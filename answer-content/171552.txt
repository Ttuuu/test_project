<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The <a href="https://codereview.stackexchange.com/a/171132/12390">review by Zac B</a> is very nice, I have only minor comments on top of that about the implementation.</p>

<h3>Large scripts in here-documents</h3>

<p>Escaping <code>$</code> in large here-documents is troublesome and error prone.
Indeed you forgot to escape something here, I let you spot it now ;-)</p>

<blockquote>
<pre><code>    local found=\$(find "/tmp/._cache" \
                    -path "\$cachepath/exit" -newermt '-10 seconds')
    if [[ "$found" == "" ]]; then 
      # Cache exists but is old, refresh in background
      ( _cache_$func "\$@" &amp; )
    fi
</code></pre>
</blockquote>

<p>Sometimes you can simplify by enclosing the here-document's start label in quotes, for example:</p>

<pre><code>  eval "$(echo "_cache_$func() {"; cat &lt;&lt; "EOF"
      : "${cachepath:?"Environment must include cachepath"}"
      mkdir -p "/tmp/._cache"
      local cmddir=$(mktemp -d -p "/tmp/._cache")

      # ...
    }
EOF
  )"
</code></pre>

<p>But in this example, since you have the <code>$func</code> variable embedded here and there that needs to be expanded, it will be better to use a single-quoted string, and dropping out of it where you need variable interpolation:</p>

<pre><code>  eval '
    _cache_'"$func"'() {
      : "${cachepath:?"Environment must include cachepath"}"
      mkdir -p "/tmp/._cache"
      local cmddir=$(mktemp -d -p "/tmp/._cache")
      _orig_$func "$@" &gt; "$cmddir/out" 2&gt; "$cmddir/err"
      echo $? &gt; "$cmddir/exit"
      # Add end-of-output marker to preserve trailing newlines
      printf "EOF" &gt;&gt; "$cmddir/out"
      printf "EOF" &gt;&gt; "$cmddir/err"
      ln -sfn "$cmddir" "$cachepath" # atomic
    }
  '
</code></pre>

<p>This implies you need to be careful with embedded single-quotes in the script, but this might not be a big problem,
for example in the longer here-doc you have,
all embedded single-quotes can be replaced with double-quotes.</p>

<h3><code>... in "$@"</code> is the default in <code>for</code> loops</h3>

<p>Another minor point is that you can omit <code>"$@"</code> in <code>for</code> loops,
as that's the default, for example here you can write:</p>

<pre><code>  local env="${func}:"
  for v; do
    env="$env:\$$v"
  done
</code></pre>
    </div>