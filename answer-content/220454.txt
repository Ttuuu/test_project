<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I would change the following things to your API:</p>

<ul>
<li>let tree items know their parent and children -&gt; easier navigation</li>
<li>encapsulate the children -&gt; better integrity</li>
</ul>

<p>As for the rendering, it can be done more lightweight.</p>

<p>sample code:</p>

<pre><code>using System;
using System.Text;
using System.Collections.Generic;

public class Program
{
    public static void Main()
    {
        var root = TreeNode.Create(new Person("John", "Doe"))
            .Add(new Person("Sam", "Doe"))
                .Add(new Person("Tom", "Doe"))
                .Parent.Add(new Person("Juliet", "Doe"))
            .Root.Add(new Person("Vanessa", "Doe"))
            .Root;

        var rendered = Render(root, (p, d) =&gt; 
            string.Format("ln: {0}{3}fn: {1} ({2})", p.LastName, p.FirstName, d, Environment.NewLine));

        Console.Write(rendered);
    }

    private static string Render&lt;T&gt;(TreeNode&lt;T&gt; tree, Func&lt;T, int, string&gt; layout) 
    {
        var builder = new StringBuilder();
        var indent = new Stack&lt;string&gt;();
        var depth = 0;

        RenderTree(builder, tree, depth, layout, indent);

        return builder.ToString();
    }

    private static void RenderTree&lt;T&gt;(StringBuilder builder, TreeNode&lt;T&gt; tree, int depth, Func&lt;T, int, string&gt; layout, Stack&lt;string&gt; indent) {

        Render(builder, tree.Value, depth, layout, indent);

        indent.Push("\t");
        depth++;

        foreach (var child in tree.Children) {
            RenderTree(builder, child, depth, layout, indent);
        }

        indent.Pop();
    }

    private static void Render&lt;T&gt;(StringBuilder builder, T element, int depth, Func&lt;T, int, string&gt; layout, Stack&lt;string&gt; indent) {

        var textLines = layout(element, depth).Split(new[] {Environment.NewLine }, StringSplitOptions.None);
        var textIndent = string.Join(string.Empty, indent);

        foreach (var textLine in textLines) {
            builder.AppendLine(string.Format("{0}{1}", textIndent, textLine));
        }
    }

    public class TreeNode&lt;T&gt;
    {
        private List&lt;TreeNode&lt;T&gt;&gt; children = new List&lt;TreeNode&lt;T&gt;&gt;();

        public TreeNode(T value)
        {
            Value = value;
        }

        public static TreeNode&lt;T&gt; Empty { get { return new TreeNode&lt;T&gt;(default(T)); }}

        public T Value { get; set; }

        public IEnumerable&lt;TreeNode&lt;T&gt;&gt; Children { get { return children.ToArray(); }}

        public TreeNode&lt;T&gt; Parent { get; private set; }

        public TreeNode&lt;T&gt; Root { get { return Parent == null ? this : Parent.Root; }}

        public static implicit operator T(TreeNode&lt;T&gt; node) { return node.Value; }

        public static implicit operator TreeNode&lt;T&gt;(T value) { return new TreeNode&lt;T&gt;(value); }

        public TreeNode&lt;T&gt; Add(TreeNode&lt;T&gt; child) {
            // TODO check null, check family (is self, ancestor, descendant, or child of other parent) ..
            children.Add(child);
            child.Parent = this;
            return child;
        }

        public TreeNode&lt;T&gt; Remove(TreeNode&lt;T&gt; child) {
            // TODO check null, check family (is child) ..
            if (children.Contains(child)) {
                children.Remove(child);
                child.Parent = null;
            }
            return child;
        }
    }

    public static class TreeNode
    {
        public static TreeNode&lt;T&gt; Create&lt;T&gt;(T value) { return new TreeNode&lt;T&gt;(value); }
    }

    public class Person
    {
      public string FirstName { get; set; }

      public string LastName { get; set; }

      public Person(string firstName, string lastName) {
          FirstName = firstName;
          LastName = lastName;
      }
    }
}
</code></pre>
    </div>