<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>As a general rule it is best not to nest comprehensions. It makes code hard to read. You are better off just writing a <code>for</code> loop and appending the results to a list or using a generator.</p>
<p>Here are a couple rules with comprehensions that will make your code less brittle and easy for others to work with:</p>
<ol>
<li>Don't nest comprehensions.</li>
<li>If a comprehension is too long for one line of code, don't use it.</li>
<li>If you need an <code>else</code>, don't use a comprehension.</li>
</ol>
<p>Of course there are exceptions to these rules, but they are a good place to start.</p>
<p>One of the reasons nested list comprehension is an issue is it often results in a exponential increase in computation needed. For each item in the order you have to loop through every product. This is not efficient. You want to go from <em>O(n x m)</em> to <em>O(n + m)</em>. You should loop through products once and through order items once.</p>
<p>You can see in the updated code below that I loop through the list of products and create a dictionary with the key as the product ID. This makes it so that, while looping through the order items, I can simply get the product by looking up the key. It is much more performant and readable.</p>
<pre class="lang-py prettyprint-override"><code>pricing = {
    "prices": [
        {"product_id": 1, "price": 599, "vat_band": "standard"},
        {"product_id": 2, "price": 250, "vat_band": "zero"},
        {"product_id": 3, "price": 250, "vat_band": "zero"},
    ],
    "vat_bands": {"standard": 0.2, "zero": 0},
}
order = {
    "order": {
        "id": 12,
        "items": [{"product_id": 1, "quantity": 1}, {"product_id": 2, "quantity": 5}],
    }
}
exchange_rate = 1.1


def calculate_exchange_rate(price, rate=None):
    if rate is None:
        rate = exchange_rate
    return round(price * rate, 2)


def items():
    """
    computes the item price and vat for a given pricing, order, and exchange rate.
    returns list of items dictionaries
    """
    item_list = []
    products = {p["product_id"]: p for p in pricing["prices"]}

    for item in order["order"]["items"]:
        product = products.get(item["product_id"])
        vat = 0
        if product["vat_band"] == "standard":
            vat = pricing["vat_bands"]["standard"] * product["price"]
        item_list.append(
            {
                "product_id": item["product_id"],
                "quantity": item["quantity"],
                "price": calculate_exchange_rate(product["price"]),
                "vat": calculate_exchange_rate(vat),
            }
        )
    return item_list

print(items())
</code></pre>
    </div>