<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>As it was a coding interview, you should give importance to some points. Here are those what I think from your coding exercise:</p>

<ol>
<li>You need to complete your exercise within the time specified. So, don’t waste you time to beautifying things or creating more functionalities which are not required. This kind of interview is conducted to see your skills and experience which is clearly mentioned.</li>
<li>Make sure your output matches with sample output. If you an average developer, a single character can harm you. But if your code is extraordinary level then it may not be an issue.</li>
<li>Focus on the coding styles like any principles or design patterns need to use. For this you need use best practices and SOLID principle of OOD. So, you must not violate SOLID principle while coding.</li>
<li>Take few minutes to think how you should design classes, interfaces etc. If you have well amount of experience, then it wouldn’t take much time to design thing in your head.</li>
<li>In scenario, flight schedules are given. So, you need to create Schedule class. These 6 schedules will be created using collection which are hard coded for this exercise so save time. However, you created schedule in a JSON file which is a waste of your time to complete this exercise.</li>
<li>Each plane has a capacity of 20 box each and each box represents 1 order. So, you need to create a Plane/Flight class and Order class. A Plane/Flight class will have a property of Schedule class, a collection of Order property and integer Capacity property. You can hard code or use constant for capacity as it’s set to 20 but it’s good to make it flexible. Furthermore, you need to read Orders from JSON file.</li>
</ol>

<p><strong>USER STORY #1</strong></p>

<ul>
<li>It gives you full information about Schedule class properties. It will have FlightNumber, Departure, Arrival, Day and IsLoaded properties. It also said that you don’t need to load Orders as you only need to show not loaded schedules.</li>
</ul>

<p><strong>USER STORY #2</strong></p>

<ul>
<li>It says Order has priority and it should be loaded in Plane/Flight using priorities. So, Order class will have Code, Destination, Priority and Schedule properties. Though orders are in JSON file are arranged by priorities but it’s good to sort by priority.</li>
</ul>

<p><strong>Here are some code samples:</strong></p>

<pre><code>class Schedule
{
    //use auto properties
    public int FlightNumber { get; set; }
    public string Departure { get; set; }
    public string Arrival { get; set; }
    public int Day { get; set; }
    public bool IsLoaded { get; set; }

    public override string ToString()
    {
        //use string interpolation
        return $"{FlightNumber}. Departure: {Departure},  Arrival: {Arrival}, Day: {Day}";
    }
}
</code></pre>

<hr>

<pre><code>class Flight
{
    //use auto properties
    public int Capacity { get; private set; }
    public Schedule Schedule { get; private set; }
    public IList&lt;Order&gt; Orders { get; set; }

    public Flight(int capacity, Schedule schedule)
    {
        Capacity = capacity;
        schedule.IsLoaded = true;
        Schedule = schedule;
        Orders = new List&lt;Order&gt;();
    }

    public string FlightSchedule()
    {
        //use string interpolation
        return $"Flight: {Schedule.FlightNumber}, departure: {Schedule.Departure}, arrival: {Schedule.Arrival}, day: {Schedule.Day}";
    }
}
</code></pre>

<hr>

<pre><code>class Order
{
    //use auto properties
    public int Priority { get; set; }
    public string Code { get; set; }
    public string Destination { get; set; }
    public Schedule Schedule { get; set; }

    public bool IsNotLoaded()
    {
        return Schedule == null;
    }
}
</code></pre>

<hr>

<pre><code>class Menu
{
    public string Header { get; set; }
    public IList&lt;string&gt; Items { get; set; }
    public int ExitValue { get; set; }

    public Menu()
    {
        Items = new List&lt;string&gt;();
    }
}
</code></pre>

<hr>

<pre><code>class FileReader
{
    public static string ReadAllText(string path)
    {
        return File.ReadAllText(Path.Combine(Directory.GetCurrentDirectory(), path));
    }
}
</code></pre>

<hr>

<pre><code>interface IOrderRepository
{
    IList&lt;Order&gt; GetOrders();
}
</code></pre>

<hr>

<pre><code>class OrderRepository : IOrderRepository
{
    public IList&lt;Order&gt; GetOrders()
    {
        var jsonString = FileReader.ReadAllText("JSON Files\\coding-assigment-orders.json");

        var orders = JsonConvert.DeserializeObject&lt;Dictionary&lt;string, Order&gt;&gt;(jsonString).Select(p =&gt;
        new Order { Code = p.Key, Destination = p.Value.Destination, Priority = int.Parse(p.Key.Substring(p.Key.LastIndexOf('-') + 1)) }).ToList();

        return orders;
    }
}
</code></pre>

<hr>

<pre><code>interface IScheduleRepository
{
    IList&lt;Schedule&gt; GetSchedules();
}
</code></pre>

<hr>

<pre><code>class ScheduleRepository : IScheduleRepository
{
    public IList&lt;Schedule&gt; GetSchedules()
    {
        //use implicitly typed variables
        var flightNo = 1;
        var day = 1;
        var schedules = new List&lt;Schedule&gt;();

        schedules.Add(new Schedule { FlightNumber = flightNo++, Departure = "YUL", Arrival = "YYZ", Day = day, IsLoaded = false });
        schedules.Add(new Schedule { FlightNumber = flightNo++, Departure = "YUL", Arrival = "YYC", Day = day, IsLoaded = false });
        schedules.Add(new Schedule { FlightNumber = flightNo++, Departure = "YUL", Arrival = "YVR", Day = day, IsLoaded = false });

        day++;
        schedules.Add(new Schedule { FlightNumber = flightNo++, Departure = "YUL", Arrival = "YYZ", Day = day, IsLoaded = false });
        schedules.Add(new Schedule { FlightNumber = flightNo++, Departure = "YUL", Arrival = "YYC", Day = day, IsLoaded = false });
        schedules.Add(new Schedule { FlightNumber = flightNo++, Departure = "YUL", Arrival = "YVR", Day = day, IsLoaded = false });

        return schedules;
    }
}
</code></pre>

<hr>

<pre><code>class MenuManager
{
    public virtual int DisplayAndRead(Menu menu)
    {
        Console.Clear();
        Console.WriteLine("======= {0} =======\n", menu.Header);

        foreach (var item in menu.Items)
        {
            Console.WriteLine(item);
        }

        Console.Write("\nEnter your choice: ");

        int userInput;
        int.TryParse(Console.ReadLine(), out userInput);

        return userInput;
    }
}
</code></pre>

<hr>

<pre><code>class InformationManager : MenuManager
{
    public override int DisplayAndRead(Menu menu)
    {
        Console.WriteLine(menu.Header);

        foreach (var item in menu.Items)
        {
            Console.WriteLine(item);
        }

        Console.Write("\nPress any key to return to main menu... ");
        Console.ReadKey();

        return 0;
    }
}
</code></pre>

<hr>

<pre><code>class ScheduleManager
{
    public static string LoadedMessage(Schedule schedule)
    {
        return $"Schedule {schedule.FlightNumber} loaded";
    }
}
</code></pre>

<hr>

<pre><code>class ItinenaryManager
{
    public static string Itinerary(Order order)
    {
        return order.IsNotLoaded() ? $"order: {order.Code}, flightNumber: not scheduled"
            : $"order: {order.Code}, flightNumber: {order.Schedule.FlightNumber}, departure: {order.Schedule.Departure}, arrival: {order.Schedule.Arrival}, day: {order.Schedule.Day}";
    }
}
</code></pre>

<hr>

<pre><code>class InventoryManager
{
    public IList&lt;Order&gt; Orders { get; private set; }
    public IList&lt;Flight&gt; FlightsScheduled { get; private set; }
    public IList&lt;Schedule&gt; Schedules { get; private set; }

    public InventoryManager()
    {
        FlightsScheduled = new List&lt;Flight&gt;();
        Schedules = new ScheduleRepository().GetSchedules();
    }

    public void ProcessFlightScheduleMenuUserChoice(int userChoice)
    {
        if (userChoice &gt; 0 &amp;&amp; userChoice &lt;= Schedules.Count)
        {
            var selectedSchedule = Schedules.FirstOrDefault(s =&gt; !s.IsLoaded &amp;&amp; s.FlightNumber == userChoice);
            if (selectedSchedule != null)
            {
                var scheduledFlight = new Flight(20, selectedSchedule);
                FlightsScheduled.Add(scheduledFlight);
                FlightsScheduled = FlightsScheduled.OrderBy(f =&gt; f.Schedule.FlightNumber).ToList();
                DisplayScheduleLoadedMessage(selectedSchedule);
            }
        }
    }

    public void DisplayScheduleLoadedMessage(Schedule schedule)
    {
        var menu = new Menu()
        {
            Items = new List&lt;string&gt;()
            {
                $"{ScheduleManager.LoadedMessage(schedule)}"
            }
        };

        new InformationManager().DisplayAndRead(menu);
    }

    public void DisplayLoadedSchedules()
    {
        var menu = new Menu()
        {
            Header = "\n======= Loaded schedules =======\n"
        };

        foreach (var flight in FlightsScheduled)
        {
            menu.Items.Add(flight.FlightSchedule());
        }

        new InformationManager().DisplayAndRead(menu);
    }

    public void DisplayFlightItineraries()
    {
        LoadOrdersInFlights();

        var menu = new Menu()
        {
            Header = "\n======= Flight itineraries =======\n"
        };

        foreach (var order in Orders)
        {
            menu.Items.Add(ItinenaryManager.Itinerary(order));
        }

        new InformationManager().DisplayAndRead(menu);
    }

    private void LoadOrdersInFlights()
    {
        Orders = new OrderRepository().GetOrders().OrderBy(o =&gt; o.Priority).ToList();

        foreach (var schedule in Schedules)
        {
            if (schedule.IsLoaded)
            {
                var loadedFlights = FlightsScheduled.Where(f =&gt; f.Schedule == schedule).ToList();

                foreach (var flight in loadedFlights)
                {
                    var flightOrders = Orders.Where(o =&gt; o.IsNotLoaded() &amp;&amp; o.Destination == schedule.Arrival).Take(flight.Capacity).Select(o =&gt; { o.Schedule = schedule; return o; }).ToList();
                    flight.Orders = flightOrders;
                }
            }
        }
    }

    public Menu GetFlightScheduleMenu()
    {
        var menu = new Menu
        {
            Header = "Choose a schedule to load"
        };

        foreach (var item in Schedules)
        {
            if (!item.IsLoaded)
            {
                menu.Items.Add(item.ToString());
            }
        }

        menu.ExitValue = Schedules.Count + 1;
        menu.Items.Add($"{menu.ExitValue}. Main menu");

        return menu;
    }
}
</code></pre>

<hr>

<pre><code>class Program
{
    static void Main(string[] args)
    {
        var inventory = new InventoryManager();

        ReadMainMenuUserChoice(inventory);
    }

    private static void ReadMainMenuUserChoice(InventoryManager inventory)
    {
        int userChoice;
        Models.Menu menu = GetMainMenu();

        do
        {
            userChoice = new MenuManager().DisplayAndRead(menu);
            ProcessMainMenuUserChoice(userChoice, inventory);
        } while (userChoice != menu.ExitValue);
    }

    private static void ProcessMainMenuUserChoice(int userChoice, InventoryManager inventory)
    {
        switch (userChoice)
        {
            case 1:
                ReadFlightScheduleMenuUserChoice(inventory);
                break;
            case 2:
                inventory.DisplayLoadedSchedules();
                break;
            case 3:
                inventory.DisplayFlightItineraries();
                break;
            case 4:
                Environment.Exit(0);
                break;
        }
    }


    private static void ReadFlightScheduleMenuUserChoice(InventoryManager inventory)
    {
        int userChoice;
        Models.Menu menu;

        do
        {
            menu = inventory.GetFlightScheduleMenu();
            userChoice = new MenuManager().DisplayAndRead(menu);
            inventory.ProcessFlightScheduleMenuUserChoice(userChoice);
        } while (userChoice != menu.ExitValue);
    }

    private static Models.Menu GetMainMenu()
    {
        var menu = new Models.Menu
        {
            Header = "Transport.ly",
            Items = new List&lt;string&gt;()
            {
                "1. Load a schedule",
                "2. List out loaded flight schedules",
                "3. Generate flight itineraries",
            }
        };

        menu.ExitValue = menu.Items.Count + 1;
        menu.Items.Add($"{menu.ExitValue}. Exit");

        return menu;
    }
}
</code></pre>

<hr>

<p>Please check code below each comment and know how to write it. I should suggest you to use <strong>ReSharper</strong> for Visual Studio. It will help you to make your code little better and inform about code issues. However, <strong>ReSharper</strong> can’t implement any principles or design patters.</p>

<p>I hope you've read other comments, so I've skipped those.</p>
    </div>