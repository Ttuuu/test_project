<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Instead of having a data pointer in the node, you might consider making the node and the data part of the same allocation.</p>

<p>The data can be either after the structure or using the "struct hack".  You could also make the node pointer be the data pointer, and reference the node fields as <code>((struct Alx_LLNode*)data)[-1].next</code>, and the like.  This takes some extra care at allocation and access time, but could be worth it.</p>

<p>Given the quality of inlined functions, you could make two accessor functions (get and set) for each field and they would inline perfectly.</p>

<p>If you do this, I would pay attention to alignment requirements vs structure size.  I.e. for performance, make sure your header size is a multiple of the worst alignment requirement or preference for data on your hardware.  (For example, on x386 and above, 32 bit ints have NO alignment requirement, but are faster if aligned on 4 byte boundaries.)</p>
    </div>