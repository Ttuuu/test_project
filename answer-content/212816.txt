<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Some inefficiencies in your code.</h2>

<ul>
<li><code>concat</code> is a memory and CPU hog as it creates a new array each time you call it. If you are just adding to an array use <code>array.push</code> as it has much less overhead.</li>
<li>You look for two indexes with <code>if (names.indexOf(name) !== names.indexOf(name, index))</code> but you only need to know if the second result is <code>&gt; -1</code> the first search is redundant.</li>
<li>You don't need to create an array of keys <code>duplicateKeys</code>. You can use <code>Array.findIndex</code> instead and work on the original items.</li>
<li>When you have located a duplicate key you do not need to check if it already exists in the list of duplicate keys. It does not matter if you duplicate items in the array of duplicate keys. Memory is cheaper than CPU cycles so favour memory over CPU cycles.</li>
<li>When you have the list of duplicated keys you can use <code>Array.filter</code> to extract the items with those keys.</li>
</ul>

<p>Thus you can simplify the function to </p>

<pre><code>function getDuplicates(arr, key = "name") {
    const dupKeys = arr.reduce((prev, item, index, arr) =&gt; {
        if (arr.findIndex((val, idx) =&gt; idx &gt; index &amp;&amp; val[key] === item[key]) &gt; -1) {
            prev.push(item[key]); 
            return prev;
        }
        return prev;
     }, []);
     return arr.filter(item =&gt; dupKeys.includes(item[key]));
}
</code></pre>

<h2>Hash tables for faster lookups</h2>

<p>You can get better performance and less complexity if you use a <code>Map</code>. It creates a hash table for each entry making lookups much faster. Use the map to count how many copies of a key there are and then filter the array depending on the count.</p>

<pre><code>function getDuplicates(arr, key = "name") {    
    const keys = new Map();
    for(const val of arr) {
        if (keys.has(val[key])) { keys.get(val[key]).count += 1}
        else { keys.set(val[key], {count: 1}) }
    }
    return arr.filter(val =&gt; keys.get(val[key]).count &gt; 1);
}
</code></pre>
    </div>