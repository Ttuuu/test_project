<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Apart from the remarks already given about returning instead of printing, and an argument for the number of doors, this code looks good.</p>

<p>Instead of looping over the list, you can also use slicing:</p>

<pre><code>def check_doors_round_splice(n, num_doors=100):
    """Check which door is open after n rounds"""
    doors = [False] * num_doors
    for step in range(min(n, num_doors)):
        my_slice = slice(step, None, step + 1)
        doors[my_slice] = [not door for door in doors[my_slice]]
    return doors
</code></pre>

<h1>Timing</h1>

<p>This is a lot faster:</p>

<pre><code>%timeit check_doors_round(100)
</code></pre>

<blockquote>
<pre><code>1.01 ms ± 40.5 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)
</code></pre>
</blockquote>

<pre><code>%timeit check_doors_round_splice(100)
</code></pre>

<blockquote>
<pre><code>66 µs ± 4.65 µs per loop (mean ± std. dev. of 7 runs, 10000 loops each)
</code></pre>
</blockquote>
    </div>