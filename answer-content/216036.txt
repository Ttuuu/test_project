<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Dynamic programming approach</h2>

<p>My main advice is to prefer bottom-up iteration to top-down memoization. These are the two main approaches to dynamic programming as described on <a href="https://en.wikipedia.org/wiki/Dynamic_programming#Computer_programming" rel="nofollow noreferrer">Wikipedia</a>. Now, while there is nothing absolutely wrong with top-down approaches, bottom-up is, at least for this problem</p>

<ul>
<li>cleaner to code</li>
<li>does not take up space on the stack</li>
<li>runs faster if method calls are slower than iteration</li>
</ul>

<p>Finally, your code may re-compute the same values multiple times. This is not true of all top-down approaches, but is easy to avoid using bottom-up dynamic programming.</p>

<h2>Bugs</h2>

<ul>
<li>incorrect if <code>X</code> is not sorted</li>
<li>incorrect if <code>X</code> does not contain <code>1</code> due to unnecessary <code>memory[1] = 1</code></li>
</ul>

<h2>Minor style points</h2>

<ul>
<li>use more descriptive class and variable names</li>
<li>instead of <code>N - X[i] &gt;= 0</code> use <code>N &gt;= X[i]</code></li>
<li>prefer enhanced <code>for</code> loops</li>
</ul>

<pre><code>static int solution(int totalStairs, int[] stepSizeOptions) {
    int[] numberWays = new int[totalStairs+1];
    numberWays[0] = 1;

    for (int numStairs = 1; numStairs &lt;= totalStairs; numStairs++) {
        for (int stepSize : stepSizeOptions) {
            if (numStairs &gt;= stepSize) {
                numberWays[numStairs] += numberWays[numStairs - stepSize];
            }
        }
    }

    return numberWays[totalStairs];
}
</code></pre>
    </div>