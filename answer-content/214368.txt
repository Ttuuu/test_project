<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<pre><code>std::string remove_excessive_ws(std::string const &amp;str)
{
    std::string result{ str };
</code></pre>

<p>As Toby mentioned, if you plan on copying and mutating the copy locally, you should pass the parameter <code>str</code> by value. It should also be noted that <code>result</code> will have the same capacity as <code>str</code> and won't shrink to fit automatically (or take advantage of SSO if allocated).</p>

<hr>

<pre><code>std::isspace(static_cast&lt;unsigned&gt;(ch))
</code></pre>

<p>Be aware that <a href="https://en.cppreference.com/w/cpp/string/byte/isspace" rel="nofollow noreferrer"><code>std::isspace</code></a> removes spaces (<code>' '</code>), whitespaces (<code>'\n', '\v', '\f', '\r'</code>), and tabs (<code>'\t'</code>).</p>

<p>You should cast to <code>unsigned char</code>.</p>

<hr>

<pre><code>(std::isspace(static_cast&lt;unsigned&gt;((&amp;ch)[1])) || (&amp;ch)[1] == '\0')
</code></pre>

<blockquote>
  <p>Is that standards-compliant?</p>
</blockquote>

<p>Using the <a href="https://en.cppreference.com/w/cpp/language/operator_member_access" rel="nofollow noreferrer">built-in subscript operator</a> on a pointer is standards compliant. From the C++17 standard (n4659), <a href="https://timsong-cpp.github.io/cppwp/n4659/expr.sub#1" rel="nofollow noreferrer">Postfix Expressions § 8.2.1 Subscripting</a>:</p>

<blockquote>
  <p>A postfix expression followed by an expression in square brackets is a postfix expression. One of the expressions shall be a <a href="https://en.cppreference.com/w/cpp/language/value_category" rel="nofollow noreferrer">glvalue</a> of type “array of <code>T</code>” or a <a href="https://en.cppreference.com/w/cpp/language/value_category" rel="nofollow noreferrer">prvalue</a> of type “pointer to <code>T</code>” and the other shall be a <a href="https://en.cppreference.com/w/cpp/language/value_category" rel="nofollow noreferrer">prvalue</a> of unscoped enumeration or integral type.</p>
</blockquote>

<p>When accessing memory out of bounds via the built-in subscript operator, the behavior is undefined. A well-defined approach would be to track the next index and access the next element using <code>std::string::operator[]</code> (element at <code>size()</code> returns <code>CharT{}</code>). <code>std::string</code> is not a null-terminated sequence and considers the null character (<code>CharT{}</code>) to be a valid character within a sequence.</p>

<pre><code>using namespace std::string_literals;
std::string str = "a\0b"s;
std::cout &lt;&lt; str &lt;&lt; '\n'; // prints "ab"
</code></pre>

<hr>

<p>For a standard library solution on removing duplicates, I would simply pass the predicate to <a href="https://en.cppreference.com/w/cpp/algorithm/unique" rel="nofollow noreferrer"><code>std::unique</code></a>. No pointer arithmetic is necessary. Just pass it a binary predicate that checks if both characters are whitespaces:</p>

<pre><code>#include &lt;algorithm&gt;
#include &lt;cctype&gt;
#include &lt;string&gt;

std::string remove_excessive_ws(std::string s)
{
    static auto const space_space =
        [](unsigned char a, unsigned char b) {
            return std::isspace(a) &amp;&amp; std::isspace(b);
        };

    s.erase(std::unique(s.begin(), s.end(), space_space), s.end());

    // trim final space
    if (!s.empty() &amp;&amp; std::isspace(static_cast&lt;unsigned char&gt;(s.back()))) {
        s.pop_back();
    }

    return s;
}
</code></pre>

<p>Your function leaves a leading whitespace if one or more exists. Is this intended? Should there be a common character (single space) to merge the different characters <code>std::isspace</code> catches? If the ultimate goal was to trim all outer whitespace and join non-whitespace tokens with single spaces, I would use abseil's <a href="https://abseil.io/tips/10" rel="nofollow noreferrer"><code>absl::StrSplit()</code></a> and <a href="https://abseil.io/tips/36" rel="nofollow noreferrer"><code>absl::StrJoin()</code></a>. The resulting string would either take advantage of SSO if small enough or use a more appropriate capacity.</p>

<pre><code>// remove_excess_whitespace
//
// Trims leading and trailing space, whitespace, and tab characters
// such that the resulting string is single space separated.
std::string remove_excess_whitespace(absl::string_view sv) {
    return absl::StrJoin(absl::StrSplit(sv, ' ', absl::SkipWhitespace{}), " ");
}
</code></pre>
    </div>