<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><p>Choosing <code>EIO</code> for error reporting is very dubious. <code>lc_atof</code> doesn't do any input or output; why should it report IO error? If the return type cannot represent the result (e.g. <code>d_nbr &gt; FLT_MAX</code>), a logical choice is <code>ERANGE</code> or <code>EOVERFLOW</code>. If the conversion cannot complete because of the malformed argument (e.g. <code>!isdigit(**str)</code>), the logical choice would perhaps be <code>EINVAL</code>.</p>
<p>That said, I do not endorse setting <code>errno</code> in the library function. A long standing tradition is to set <code>errno</code> in system calls only. I know that this tradition is more and more violated these days, but still. If you have other means of error reporting, stick with them.</p>
</li>
<li><p>Using inout parameter (<code>str</code> in your case) is not advisable. It unnecessarily complicates the code, both on the caller side and the callee side. The callee is forced to use extra indirection too many times, and to worry about parenthesizing <code>(**str)++</code>. In turn, the caller loses track on where the parsable began (say, it needs to log the malformed number). Look how <code>strtof</code> handles this:</p>
<pre><code>  float strtof(const char *restrict nptr, char **restrict endptr);
</code></pre>
<p>Here <code>nptr</code> is an in-only, and <code>endptr</code> is out-only.</p>
</li>
<li><p>I am surprised that you decided to limit the utility of the function by handling only one digit after the decimal dot. It is not a big effort to handle all of them, and the benefits are much greater.</p>
</li>
<li><p>There is no need to parenthesize the return value. <code>return</code> is an operator, not a function.</p>
</li>
</ul>
    </div>