<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Use C++ Container Classes</strong><br>
This code looks too much like C code and not enough like C++ Code.</p>
<p>In the modern day C++, the use of raw pointers such as <code>uint32_t* accumulated = a;</code> are frowned upon, and container classes such as <code>std::array</code> and iterators were developed to reduce the use of raw pointers.</p>
<p>The C style array <code>b</code> is never initialized, and the C style array <code>a</code> is initialized twice.</p>
<pre><code>        std::memset(a, 0, sizeof(a));

        for (unsigned int node_x = 0; node_x &lt; MATRIX_WIDTH_SQUARED; node_x += MATRIX_WIDTH + 1) {
            a[node_x] = 1;
        }
</code></pre>
<p>The first initialization can be accomplished by:</p>
<pre><code>        uint32_t a[MATRIX_WIDTH_SQUARED] = {0};
</code></pre>
<p>and I would prefer to see an iterator used in the second initialization.</p>
<p><strong>Use Proper Casting</strong><br>
Currently the code is implementing C style casting (<code>(uint32_t) (first_col_sum % MODE)</code>) which is not as type safe as either <a href="https://en.cppreference.com/w/cpp/language/static_cast" rel="nofollow noreferrer">static_cast(VALUE_TO_BE_CAST)</a> or <a href="https://en.cppreference.com/w/cpp/language/dynamic_cast" rel="nofollow noreferrer">dynamic_cast&lt;NEW_TYPE&gt;(EXPRESSION)</a>. In this case I recommend <code>static_cast</code>.</p>
<p><strong>Static Functions</strong><br>
It is not clear why the <code>checkRecord()</code> function was changed to a <a href="https://en.cppreference.com/w/cpp/language/static" rel="nofollow noreferrer">static member function</a> since the original prototype was <code>int checkRecord(int n)</code> in the question. There really is no need for it to be static.</p>
<blockquote>
<p>By declaring a function member as static, you make it independent of any particular object of the class. A static member function can be called even if no objects of the class exist and the static functions are accessed using only the class name and the scope resolution operator.</p>
</blockquote>
<p><strong>Variable Names</strong><br>
The symbolic constant names are clear as are the variable names <code>adj_matrix</code> (adjacency would be clearer), <code>accumulated</code> and <code>adj_matrix_pointer</code>, but the variable names <code>a</code>, <code>b</code> and <code>temp</code> are not clear and leave someone who has to read or maintain the code guessing.</p>
<p><strong>Complexity</strong><br>
The function <code>checkRecord()</code> is too complex (does too much). After the if statement there should be a call to a function to execute the rest of the code, and that function might cal sub functions. Remember that it is much easier to write correct code when you limit what a function is responsible for.</p>
<p>There is also a programming principle called the Single Responsibility Principle that applies here. The <a href="https://en.wikipedia.org/wiki/Single_responsibility_principle" rel="nofollow noreferrer">Single Responsibility Principle</a> states:</p>
<blockquote>
<p>that every module, class, or function should have responsibility over a single part of the functionality provided by the software, and that responsibility should be entirely encapsulated by that module, class or function.</p>
</blockquote>
    </div>