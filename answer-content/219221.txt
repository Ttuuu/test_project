<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Don't write prose in <code>#if 0</code> sections. The following won't work:</p>

<pre><code>#if 0
don't do this
#endif
</code></pre>

<p>The C preprocessor still has to parse the lines, and unbalanced single and double quotes will lead to syntax errors or at least warnings. No one else does this, and for good reason.</p>

<hr>

<p>Regarding the license statement: forget it. Any code that is posted on this site is <a href="https://stackoverflow.com/help/licensing">covered by a Creative Commons license</a>, no matter what you write inside your code.</p>

<p>You probably made up the license terms in your code, since I never saw this wording anywhere else. If you want your software to be reused, stick to the standard license terms. Otherwise people will not use your code because they are afraid of not knowing what exactly you mean by your terms.</p>

<hr>

<p>Do not mess around with any identifiers starting with <code>__</code>. For <code>rsize_t</code> and <code>uint8_t</code>, just assume they are defined. It's pretty easy to pass a <code>-Drsize_t=size_t</code> command line option for the very few systems that don't support these types.</p>

<hr>

<p>All global variables that are only used in your translation unit should be declared <code>static</code>. So instead of:</p>

<pre><code>rsize_t NUM_HEX_ROWS = 16;
</code></pre>

<p>better write:</p>

<pre><code>static rsize_t NUM_HEX_ROWS = 16;
</code></pre>

<p>This will make this variable invisible for code outside of this translation unit, which is good. If any other file in the whole project also defines its <code>NUM_HEX_ROWS</code> variable, your code should not be influenced by that.</p>

<p>The same goes for functions such as <code>colorchar</code>. These should also be declared <code>static</code>.</p>

<hr>

<p>Instead of using <code>_Bool</code>, you should rather <code>#include &lt;stdbool.h&gt;</code> and use <code>bool</code>. This header is available since C99, which is 20 years old by now. You can just assume it exists. Everyone who is using older compilers will already know how to make your code work with their compiler.</p>

<hr>

<p>In <code>colorchar</code>, using the <code>\e</code> escape sequence is not portable. Better use <code>\x1B</code> instead. You could also define a function to print a colored character:</p>

<pre><code>static void putchar_colored(uint8_t ch, int color)
{
    printf("\x1B[38;5;%dm%c\x1B[0m", color, ch);
}

...
putchar_colored('x', 244);
</code></pre>

<hr>

<p>The function <code>isutf8cntrl</code> never returns a value. That's undefined behavior. Remove that function, or fix it.</p>

<p>All function names starting with <code>is</code> followed by a lowercase letter are reserved by the C standard for future extensions. You should name your function <code>is_utf8_control</code> instead.</p>

<hr>

<p>Instead of:</p>

<pre><code>void colorutf8(uint8_t * s)
</code></pre>

<p>the parameter <code>s</code> should point to constant memory, since this function never modifies it:</p>

<pre><code>void colorutf8(const uint8_t * s)
</code></pre>

<p>I have no idea what the purpose of that function is. Converting a string to a number has nothing to do with UTF-8. Furthermore the function is unused. Remove it.</p>

<hr>

<p>Next time, before posting any code here, let your IDE or your editor format the code properly. This means:</p>

<ul>
<li>an empty line between functions</li>
<li>no excessive empty lines between your lines of code, especially in <code>print_bintable2</code>. There's no point in inserting an empty line after <em>every</em> line of code. Empty lines have a meaning, it's like a paragraph in written prose.</li>
</ul>

<p>I don't understand this code:</p>

<pre><code>        while (

                u &lt; NUM_BIN_ROWS


                )
</code></pre>

<p>That's a mess. There is no point of having this much whitespace in your code. Rewrite it as:</p>

<pre><code>        while (u &lt; NUM_BIN_ROWS)
</code></pre>

<hr>

<pre><code>if (i % 1 != 0) {
</code></pre>

<p>This condition always evaluates to true.</p>

<pre><code>if (index % 2 == 0) {
    fprintf(out, "%c%c%c", 0x20, 0x20, 0x20);
} else {
    fprintf(out, "%c%c%c", 0x20, 0x20, 0x20);
}
</code></pre>

<p>There's no point in having an <code>if</code> statement in which the <code>then</code> and the <code>else</code> branch have identical code.</p>

<hr>

<p>The code in <code>print_dectable</code> looks structurally similar to the code in <code>print_bintable2</code>. You should look for the common parts yourself and try to merge them into one function. It's probably a good idea to have functions called <code>dump_line_dec</code> and <code>dump_line_hex</code>, since the rest of the code is probably the same.</p>

<p>As a guideline, none of your functions should ever be longer than 50 lines. If the whole text of a function doesn't fit on a single screen, it's too large and can probably be split into at least two separate functions.</p>
    </div>