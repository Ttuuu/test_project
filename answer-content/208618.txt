<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Good algorithm</h1>

<p>Your solution is good, however its implementation is somewhat poor. </p>

<h2>Clear requirements</h2>

<p>It is very unclear what inputs to expect so I must add...</p>

<p>The input arrays are sorted and contain unique values, I must assume a requirement that is true.</p>

<p>I deduce this from your code as if the above was not true your code would fail.</p>

<h2>Style &amp; code</h2>

<ul>
<li>The variable names are too long. Remember code is always in context and if you are handling arrays do you really need to add that in their names?</li>
<li>Don't copy the array, just push it to the result. <code>finalArray.push([...currentArray]);</code> can be <code>finalArray.push(currentArray);</code> The copy halves the performance of your code (see below)</li>
<li>Use <code>undefined</code> rather than <code>null</code></li>
<li>Simplify the code by using <code>else if</code> when possible. You have <code>} else { if (currentArray) {</code> which can be <code>} else if (currentArray) {</code></li>
<li><code>finalArray</code> should be a constant.</li>
<li>Don't add code that is not needed. The last statement block up assign <code>null</code> to <code>currentArray</code> yet the variable is never used after that line.</li>
</ul>

<p>Apart from the above points your algorithm is good as it has low complexity (if you use <code>finalArray.push(currentArray)</code> you halve the complexity as [...currentArray] requires iteration of each item). </p>

<p>You missed the opportunity to exit early. If you pass the end of the either arrays you know that no more items need to be added, however you continue to the end of the first array, which if longer than the second could mean many rundundent iterations.</p>

<p>If you change the for loop to... </p>

<pre><code>for (let i = 0; i &lt; mainArray.length &amp;&amp; compArrayIndex &lt; compArray.length; i++) {
</code></pre>

<p>...you gain a reduction in overall complexity.</p>

<h2>Cleaning up your solution</h2>

<p>Thus we can rewrite your algorithm as</p>

<pre><code>function extractRuns(main, comp) { 
    var seq, j = 0;
    const result = [];
    for (let i = 0; i &lt; main.length &amp;&amp; j &lt; comp.length; i++) {
        const e = main[i];
        if (e === comp[j]) {
            if (!seq) { seq = [] }
            seq.push(e);
            j++;
        } else if (seq) {
            result.push(seq);
            seq = undefined;
        }
    }
    if (seq) { result.push(seq) }
    return result;
}
</code></pre>

<h2>Short is not always best</h2>

<p>I must point out that the <a href="https://codereview.stackexchange.com/a/208583/120556">existing answer</a> by guest271314 is very poor as it has very bad complexity by using <code>Array.includes</code> and is forced to iterate each item in the main array as it has no way to exit early from <code>Array.reduce</code>.</p>

<h2>Rewrite</h2>

<p>I personally would have written the solution as below as it gains a little performance (not by reduced complexity) via an inner while loop. (I am a bit of an off grid performance freak :) )</p>

<pre><code>function extractRuns(main, comp) { // both arrays must be sorted and contain unique values
    var m = 0, c = 0, seq;  // c and m are indexes 
    const result = [], mLen = main.length, cLen = comp.length;
    while (m &lt; mLen &amp;&amp; c &lt; cLen) {
        const a = main[m], b = comp[c];
        if (a === b) {
            c ++;
            m ++;
            result.push(seq = [a]);
            while (m &lt; mLen &amp;&amp; r &lt; cLen &amp;&amp; main[m] === comp[c]) {
                seq.push(main[m ++]);
                c ++;
            }
        } else if (b &lt; a) { c ++ }
        else { m ++ }
    }
    return result;
}    
</code></pre>

<p>But I think your solution is far more readable and only a few % points slower to not be an issue.</p>
    </div>