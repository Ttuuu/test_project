<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>For a first effort, I think it is pretty good so far.  I can think of a few suggestions, though they may be overkill for a project this small in scope.</p>

<p><strong>Separate UI from Game Logic</strong></p>

<p>To me being object oriented would be more than just a Die class.  I would also suggest have a YahtzeeGameEngine class, that would handle all the logic for the game itself.  This way with the Die class and engine class, you could re-use the same logic and have a completely different interface (let's say you go from a command-line output to a GUI, you code currently is heavily tied to outputting to a command-line interface - which is fine for a class project, but a couple of the cornerstones of OO programming is code re-use and separation of concerns).  The engine class can set up the number of sides on a die, handle the rolling, return the number of rolls to get a yahtzee win, etc). You could even do a roll event, so that the interface could trigger a function each time a die was rolled to encapsulate the functionality even further (print a dot or play a roll dice animation for a GUI - an event trigger might be too advanced for this project scope).  Then your main class could handle all of the UI aspects, asking if they want to play again, displaying the rolls, and getting the number of dice.</p>

<p><strong>Naming Conventions and Single Purpose</strong></p>

<p>Another suggestion would just be some naming conventions.  "printDots" sounds like it is printing more than one at a time, "printDot" would be more appropriate.  Another example is "dieArray", if I see a function named that, I am not going to assume it is requesting the number dice and creating the die array at same time.  Typically functions should be small and have a single role/purpose.  This makes debugging easier and usually leads to less bugs overall.  I would suggest splitting this into two functions or limiting its role to just getting the value from the user.  Perhaps call the function something like "getNumberOfDiceToRoll()", and then create the array in the calling function.</p>

<p>Overall I think you did pretty good :)</p>
    </div>