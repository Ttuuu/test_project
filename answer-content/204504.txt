<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>I'm looking for any suggestions regarding improvement on my implementation (also coding style).</p>
</blockquote>

<p>Just some basic things.</p>

<p><strong>No need for casting.</strong></p>

<p>See <a href="https://stackoverflow.com/q/605845/2410359">Do I cast the result of malloc?</a></p>

<pre><code>// idxs-&gt;dm = ( double* )calloc(( m * n ), sizeof( double ));
idxs-&gt;dm = calloc(( m * n ), sizeof( double ));
</code></pre>

<p><strong>Use the size of the referenced object.</strong></p>

<p><code>sizeof( double )</code> obliges the right type used with <code>idxs-&gt;dm</code>.  By using <code>sizeof idxs-&gt;dm[0]</code> coordinating the type is not necessary.  It is easier to code right the first time, easier to review and  maintain.</p>

<pre><code>// idxs-&gt;dm = calloc(( m * n ), sizeof( double ));
idxs-&gt;dm = calloc( m * n, sizeof idxs-&gt;dm[0]);
</code></pre>

<p><strong><code>*alloc()</code> can fail</strong></p>

<p>Run time allocations can fail.  Robust code check for that.</p>

<pre><code>idxs-&gt;dm = calloc( m * n, sizeof idxs-&gt;dm[0]);
if (idxs-&gt;dm == NULL) Handle_Error_Somehow();
</code></pre>

<p><strong>Recommend clearing</strong></p>

<p>As <code>struct idx_t</code> has so many members, I'd recommend clear the allocation first via <code>calloc()</code> or<code>memset()</code>.</p>

<pre><code>// struct idx_t* idxs = malloc( sizeof( struct idx_t ));
struct idx_t* idxs = calloc(1, sizeof *idxs);
</code></pre>

<p><strong>Avoid casual <code>int</code> <code>size_t</code> mixing</strong></p>

<p><code>size_t</code> is <em>unsigned</em> and <code>int</code> is <em>signed</em>.  With all the array indexing and sizing, best o use one type.  Usually it is best to use <code>size_t</code> for all sizing and indexing as that type is neither too wide nor too narrow. Many standard functions employing a size parameter use <code>size_t</code>.</p>

<p>Be careful to avoid indexing before 0. Can't do that with <code>size_t</code>.</p>

<p><strong>Unused variables</strong></p>

<p><code>double diff, msec, sec, cps</code> are not used.</p>
    </div>