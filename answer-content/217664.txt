<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The code is basically fine.</p>
<p>The if condition is perhaps a little complicated though. To interpret it you have to read "if not ((i is not a multiple of 3) and (i is not a multiple of 5))", which is a double negative.</p>
<p>Given the problem statement, we'd expect something more like "if (i is a multiple of 3) or (i is a multiple of 5)", so:</p>
<pre><code>if ((i % 3 == 0) || (i % 5 == 0))
</code></pre>
<p>Nitpicking:</p>
<ul>
<li>If we don't need <code>argc</code> and <code>argv</code>, we can declare main as <code>int main()</code> with no arguments.</li>
<li>The <code>return 0;</code> at the end of main happens automatically in C++, so we don't have to write it ourselves.</li>
</ul>
<hr>
<p>Note that <a href="https://adamdrake.com/an-unreasonably-deep-dive-into-project-euler-problem-1.html" rel="noreferrer">there exists an arithmetic solution to the problem</a>, which is much faster (it could even be done at compile-time in C++).</p>
<blockquote>
<p>We want to sum all the multiples of 3 or 5 less than 1000. We can think about the sequence of multiples of 3 as <code>(3, 6, 9, 12, 15, ..., 999)</code>, which is the same as <code>3 * (1, 2, 3, 4, 5, ..., 333)</code>. [...]</p>
<p>Such a sequence, where the difference between each number is constant, is called a finite arithmetic progression [and the sum is] a finite arithmetic series. The formula for the sum is <code>1/2 * n * (a_1 + a_n)</code>. where n is the number of terms being added, a_1 is the first element in the sequence, and a_n is the last element in the sequence.</p>
</blockquote>
    </div>