<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Working directory</h2>

<pre><code>os.path.dirname(os.path.realpath(__file__))
</code></pre>

<p>is not the current working directory. The current working directory is available via <code>os.getcwd</code>. Either you should call that instead, or maybe rename your variable.</p>

<h2>Semicolons</h2>

<p>are usually discouraged in Python, so you can drop one here:</p>

<pre><code>working_directory: str = os.path.dirname(os.path.realpath(__file__));
</code></pre>

<h2>pathlib</h2>

<pre><code>f"{working_directory}/{file}"
</code></pre>

<p>is better represented by making a <code>Path</code> and then using the <code>/</code> operator.</p>

<h2>Overall</h2>

<p>This approach is fragile. You're better off tapping into something like the LLVM/Clang AST, which actually understands how to parse all of the edge cases of C++.</p>

<p>Here is a suggestion that takes care of everything except the AST:</p>

<pre><code>from pathlib import Path

NAMESPACE = 'using namespace'

log_file_name = Path('logs/log.txt')

if __name__ == '__main__':
    working_dir = Path.cwd()
    with log_file_name.open('w') as log_file:
        for prefix in ('h', 'c'):
            for file_name in working_dir.glob(f'*.{prefix}*'):
                with file_name.open() as source_file:
                    for line_number, line in enumerate(source_file):
                        if NAMESPACE in line:
                            log_file.write(f'NAMESPACE FOUND: LINE [{line_number + 1}] IN FILE {file_name}\n')
</code></pre>

<p>This also takes into account @AJNeufeld's feedback which is good.</p>
    </div>