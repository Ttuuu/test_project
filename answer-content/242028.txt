<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You are on the right track. However, implementing your own bisection algorithm is not a good idea. Python has the built-in ("batteries included") <code>bisect</code> module, containing all the bisection algorithms we need.
<a href="https://github.com/python/cpython/blob/master/Lib/bisect.py" rel="nofollow noreferrer">They are implemented in Python</a>, but overridden by fast C implementations if those are available, which would then be as fast as we can hope for.</p>

<p>The <code>from bisect import bisect</code> (with the <code>bisect</code> function as an alias for <code>bisect_right</code>) replaces your <code>binSearchMod</code> function.
In the code at the bottom, there is a "manual" bisect implementation without recursion, which is also a step forward.
It is probably best to avoid recursion if (much) simpler means are available.</p>

<p>In your base <code>climbingLeaderboard</code> function, you have</p>

<pre class="lang-py prettyprint-override"><code>        if ascore&lt;scores[len(scores)-1]: # alice scores are smaller than all
            res.append(len(set(scores))+1)
        elif ascore &gt; scores[0]: #alice score is greatest
            res.append(1)
</code></pre>

<p>which handles special cases.
These cases are not special enough to warrant this, and are code smell.
Your basic search algorithm should return correct results to append to <code>res</code> on its own, as we will see shortly.
See also <code>import this</code>: <em>Special cases aren't special enough to break the rules.</em>.</p>

<p>As an aside, slicing (using <code>slice</code> objects) makes indexing sequences much easier: <code>scores[len(scores)-1]</code> is just <code>scores[-1]</code>.
Further, you return a list using</p>

<pre class="lang-py prettyprint-override"><code>return [False, start]
</code></pre>

<p>This is a bad idea.
You later use it to index into it, but that job can better be done by a <code>tuple</code>.
Simply calling</p>

<pre class="lang-py prettyprint-override"><code>return False, start
</code></pre>

<p>will return a tuple.
This can be unpacked into two variables in one assignment, or indexed into just like lists.
Tuple unpacking is convenient and easy to read.</p>

<p>The distinction between lists and tuples is important: lists are (should be) homogeneous, aka contain a sequence of elements of the same type (think filenames).
Tuples are <em>heterogeneous</em>, aka the position of elements has meaning and they are of different types.
In your example here, this would be <code>bool</code> and <code>int</code>, which have different semantics.</p>

<hr>

<p>A key aspect to realize is that duplicate scores in the leaderboard can just be tossed, since they do not count towards anything.
This calls for a <code>set</code> implementation.
This also automatically gets rids of your</p>

<pre class="lang-py prettyprint-override"><code>    #ssign ranks to scores
    for score in range(1,len(scores)):
        if scores[score]!=scores[score-1]:
            rank+=1
            rankScores.append(scores[score])
</code></pre>

<p>code block, saving a whole <span class="math-container">\$ \mathcal{O} (n) \$</span> iteration.</p>

<p>Since <code>bisect</code> relies on <em>ascending</em> order, while the input is sorted in descending order, a call to <code>sorted</code> is required, which automatically returns a <code>list</code>.</p>

<p><code>bisect(sequence, item)</code> will return the index where to insert <code>item</code> in <code>sequence</code> while retaining order.
If items compare equal, <code>item</code> is inserted to the right of existing items.
If a list of scores in ascending order is <code>[20, 30, 50]</code>, then Alice is really in second place if she scored <code>30</code>. <code>bisect_left</code> would sort her into third place.</p>

<p>Since ranks are 1-indexed, increment by <code>1</code>.
Lastly, the below result would be inverted, since the sorting inverted the list.
Therefore, use <code>len</code> to rectify.</p>

<pre class="lang-py prettyprint-override"><code>#!/bin/python3

import math
import os
import random
import re
import sys
from bisect import bisect

# Complete the climbingLeaderboard function below.
def climbingLeaderboard(scores, alice):
    length = len(scores)
    return [length - bisect(scores, alice_score) + 1 for alice_score in alice]


if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    scores_count = int(input())

    scores = sorted(set(map(int, input().rstrip().split())))

    alice_count = int(input())

    alice = list(map(int, input().rstrip().split()))

    result = climbingLeaderboard(scores, alice)

    fptr.write('\n'.join(map(str, result)))
    fptr.write('\n')

    fptr.close()
</code></pre>

<p>This passes all tests. The required <code>sorted</code> step is <span class="math-container">\$ \mathcal{O}(n\, \log n)\$</span>, see <a href="https://wiki.python.org/moin/TimeComplexity" rel="nofollow noreferrer">here</a>.</p>

<hr>

<p>Without sorting the input, a <code>bisect</code> implementation that works on reversed sorted lists is required.
The change compared to the original implementation (link above) is minimal, as seen below.
<code>if a[mid] &lt; x: lo = mid+1</code> is simply inverted to <code>if a[mid] &gt; x: lo = mid+1</code> (I also formatted the code more).</p>

<p>Simply calling <code>list((set(sequence))</code> on the scores will not work.
Duplicates will be purged, but the order will be lost.
Therefore, we simply construct a new list, using a <code>set</code> to block appending already seen elements, see <a href="https://stackoverflow.com/a/480227/11477374">here</a>.</p>

<p>The below approach works, but similarly to yours, fails for long inputs in its naive version.
This is why I added <code>previous_higher_bound</code>.
This counter keeps track of what rank Alice was on in the past.
It could also be named <code>previously_lowest_rank</code> or similar.
This is passed to <code>bisect</code> to drastically tighten the searched range, allowing the tests to pass.
Unfortunately, it also makes the approach more verbose.</p>

<pre class="lang-py prettyprint-override"><code># Complete the climbingLeaderboard function below.
def climbingLeaderboard(scores, alice):
    def reverse_bisect_left(sequence, x, lower_bound=0, higher_bound=None):
        """Return the index where to insert item x in list a, assuming a is sorted in reverse.
        """
        if lower_bound &lt; 0:
            raise ValueError("lo must be non-negative")
        if higher_bound is None:
            higher_bound = len(sequence)
        while lower_bound &lt; higher_bound:
            middle = (lower_bound + higher_bound) // 2
            if sequence[middle] &gt; x:
                lower_bound = middle + 1
            else:
                higher_bound = middle
        return lower_bound, higher_bound


    def uniquelify_list(sequence):
        seen = set()
        return [int(x) for x in sequence if not (x in seen or seen.add(x))]


    def leaderboard_rank(scores, score, higher_bound=None):
        result, previous_higher_bound = reverse_bisect_left(scores, int(score), higher_bound=higher_bound)
        return result + 1, previous_higher_bound


    def get_ranks(scores, alice_scores):
        scores = uniquelify_list(scores)
        previous_higher_bound = len(scores)
        ranks = []
        for alice_score in alice_scores:
            result, previous_higher_bound = leaderboard_rank(scores, alice_score, previous_higher_bound)
            ranks.append(result)
        return ranks
    return get_ranks(scores, alice)
</code></pre>
    </div>