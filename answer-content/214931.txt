<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<pre><code>    List&lt;char[]&gt; c = new List&lt;char[]&gt;();
    private int pagedepth;
    private long pagesize;
    private long mpagesize;         // https://stackoverflow.com/questions/11040646/faster-modulus-in-c-c
    private int currentPage = 0;
    private int currentPosInPage = 0;
</code></pre>
</blockquote>

<p>Some of these names are rather cryptic. I'm not sure why <code>c</code> isn't private. And surely some of the fields should be <code>readonly</code>?</p>

<hr>

<blockquote>
<pre><code>        pagesize = (long)Math.Pow(2, pagedepth);
</code></pre>
</blockquote>

<p>IMO it's better style to use <code>1L &lt;&lt; pagedepth</code>.</p>

<hr>

<blockquote>
<pre><code>    public char this[long n]    {
        get { return c[(int)(n &gt;&gt; pagedepth)][n &amp; mpagesize]; }
        set { c[(int)(n &gt;&gt; pagedepth)][n &amp; mpagesize] = value; }
    }
</code></pre>
</blockquote>

<p>Shouldn't this have bounds checks?</p>

<hr>

<blockquote>
<pre><code>    public string[] returnPagesForTestingPurposes() {
        string[] s = new string[currentPage + 1];
        for (int i = 0; i &lt; currentPage + 1; i++) s[i] = new string(c[i]);
        return s;
    }
</code></pre>
</blockquote>

<p>There's no need for this to be public: you can make it <code>internal</code> and give your unit test project access with <code>[assembly:InternalsVisibleTo]</code>. Also, since it's for testing purposes, it could probably be marked <code>[System.Diagnostics.Conditional("DEBUG")]</code>.</p>

<hr>

<blockquote>
<pre><code>    public void clear() {
        c = new List&lt;char[]&gt;();
        c.Add(new char[pagesize]);
</code></pre>
</blockquote>

<p>In C# it's conventional for method names to start with an upper case letter.</p>

<p>There's no need to throw quite as much to the garbage collector. Consider as an alternative:</p>

<pre><code>var page0 = c[0];
c.Clear();
c.Add(page0);
</code></pre>

<hr>

<blockquote>
<pre><code>    // See: https://stackoverflow.com/questions/373365/how-do-i-write-out-a-text-file-in-c-sharp-with-a-code-page-other-than-utf-8/373372
</code></pre>
</blockquote>

<p>Why? I don't think it sheds any light on the following method.</p>

<blockquote>
<pre><code>    public void fileSave(string path)   {
        StreamWriter sw = File.CreateText(path);
        for (int i = 0; i &lt; currentPage; i++) sw.Write(new string(c[i]));
        sw.Write(new string(c[currentPage], 0, currentPosInPage));
        sw.Close();
    }
</code></pre>
</blockquote>

<p>Missing some <a href="https://docs.microsoft.com/en-us/dotnet/api/system.idisposable.dispose?view=netframework-4.7.2" rel="nofollow noreferrer">disposal</a>: I'd use a <a href="https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/using-statement" rel="nofollow noreferrer"><code>using</code> statement</a>.</p>

<p><code>new string(char[])</code> copies the entire array to ensure that the string is immutable. That's completely unnecessary here: <code>StreamWriter</code> has a method <code>Write(char[], int, int)</code>.</p>

<hr>

<blockquote>
<pre><code>    public void fileOpen(string path)   {
        clear();
</code></pre>
</blockquote>

<p>Yikes! That should be mentioned in the method documentation.</p>

<blockquote>
<pre><code>        StreamReader sw = new StreamReader(path);
        int len = 0;
        while ((len = sw.ReadBlock(c[currentPage], 0, (int)pagesize)) != 0){
            if (!sw.EndOfStream)    {
                currentPage++;
                if (currentPage == c.Count) c.Add(new char[pagesize]);
            }
            else    {
                currentPosInPage = len;
                break;
</code></pre>
</blockquote>

<p>I think this can give rise to inconsistencies. Other methods seem to assume that if the length of the <code>BigStringBuilder</code> is an exact multiple of <code>pagesize</code> then <code>currentPosInPage == 0</code> and <code>c[currentPage]</code> is empty, but this can give you <code>currentPosInPage == pagesize</code> and <code>c[currentPage]</code> is full.</p>

<p>This method is also missing disposal.</p>

<hr>

<blockquote>
<pre><code>    public long length()    {
        return (long)currentPage * (long)pagesize + (long)currentPosInPage;
    }
</code></pre>
</blockquote>

<p>Why is this a method rather than a property? Why use multiplication rather than <code>&lt;&lt;</code>?</p>

<hr>

<blockquote>
<pre><code>    public string substring(long x, long y) {
        StringBuilder sb = new StringBuilder();
        for (long n = x; n &lt; y; n++) sb.Append(c[(int)(n &gt;&gt; pagedepth)][n &amp; mpagesize]);    //8s
</code></pre>
</blockquote>

<p>What is <code>8s</code>? Why append one character at a time? <code>StringBuilder</code> also has a method which takes <code>(char[], int, int)</code>.</p>

<hr>

<blockquote>
<pre><code>    public bool match(string find, long start = 0)  {
        //if (s.Length &gt; length()) return false;
        for (int i = 0; i &lt; find.Length; i++) if (i + start == find.Length || this[start + i] != find[i]) return false;
        return true;
    }
</code></pre>
</blockquote>

<p>What does this method do? The name implies something regexy, but there's no regex in sight. The implementation looks like <code>StartsWith</code> (by default - the offset complicates it).</p>

<hr>

<blockquote>
<pre><code>    public void replace(string s, long pos) {
        for (int i = 0; i &lt; s.Length; i++)  {
            c[(int)(pos &gt;&gt; pagedepth)][pos &amp; mpagesize] = s[i];
            pos++;
        }
    }
</code></pre>
</blockquote>

<p>Bounds checks?</p>

<hr>

<blockquote>
<pre><code>    // This method is a more sophisticated version of the Append() function above.
    // Surprisingly, in real-world testing, it doesn't seem to be any faster. 
</code></pre>
</blockquote>

<p>I'm not surprised. It's still copying character by character. It's almost certainly faster to use <code>string.CopyTo</code> (thanks to <a href="https://codereview.stackexchange.com/users/51173/pieter-witvoet">Pieter Witvoet</a> for mentioning this method) or <code>ReadOnlySpan.CopyTo</code>.</p>
    </div>