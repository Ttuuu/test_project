<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There's no need to use 1-based row and column numbers and have to subtract 1 all the time for indexing.  Use native (0-based) indexing, and add 1 at the end for display to the user.  That makes the code much easier to follow.</p>
<p>Don't pass <code>std::string</code> objects by value.  If the function doesn't need a copy, pass by reference to const, just as you have correctly done for the grid.</p>
<p>The only difference between the eight different search directions are the amount by which we advance the row and column to step between letters (these also fully determine the initial test of whether there's room for the word).  These eight functions can be reduced to a single function with two additional parameters for Δx and Δy.</p>
<p>The search functions themselves do much more work than they need to.  Think about how string comparison normally works: we generally return as soon as we reach a mismatch, rather than continuing to check the rest of the string.  Think about how we can fail early, rather than accumulating characters into <code>temp_str</code> (that's a terrible name, by the way).</p>
<p>Have you noticed that the search functions only actually need to return true or false?  There's no extra information in passing back the position information that was passed in.</p>
<p>I think your data representation might be holding you back.  It's certainly worth creating a <code>Grid</code> class to encapsulate the grid's width, height and contents.  If we represent the contents in linear form, we can always access the element at (x,y) using the linear index <code>x * width + y</code>.  This is a standard representation used in image processing.  If we use that, the <code>Δx</code> and <code>Δy</code> parameters become a single <code>stride</code> parameter (equal to <code>Δx * width + Δy</code>).</p>
<p>Turning now to reading the file, we don't need the <code>spaced</code> function.  Instead, read each line as a string, and then make a <code>std::vector&lt;char&gt;</code> from the string.</p>
<p>On a more subjective note, I'm not a fan of those file-level <code>using</code> declarations - keep the scope as small as reasonably possible.</p>
<h1>Modified code</h1>
<p>Here, I've kept the vector-of-vectors representation, but applied most of the other changes I suggest (and also adapted to read from a fixed input file, for self-contained testing):</p>
<pre><code>#include &lt;istream&gt;
#include &lt;string&gt;
#include &lt;utility&gt;
#include &lt;vector&gt;

using Grid = std::vector&lt;std::vector&lt;char&gt;&gt;;

static Grid read_grid(std::istream&amp; in)
{
    Grid wordsearch;

    std::string line;
    while (in &gt;&gt; line) {
        wordsearch.emplace_back(line.begin(), line.end());
    }

    return wordsearch;
}


static bool search_line(Grid const&amp; grid,
                 int row, int col, const std::string&amp; word,
                 int delta_x, int delta_y)
{
    int end_row = row + delta_y * word.size();
    if (end_row &lt; 0 || static_cast&lt;std::size_t&gt;(end_row) &gt;= grid.size()) return false;
    int end_col = col + delta_x * word.size();
    if (end_col &lt; 0 || static_cast&lt;std::size_t&gt;(end_col) &gt;= grid[end_row].size()) return false;

    for (char c: word) {
        if (grid[row][col] != c)
            return false;
        row += delta_y;
        col += delta_x;
    }
    return true;
}

std::pair&lt;int, int&gt; iterate(Grid const&amp;wordsearch, const std::string&amp; word) {
    /*
     Iterates through the wordsearch to find the inputted word
     wordsearch: the wordsearch puzzle
     word: the inputted word
     Return: the location
     */
    static const std::initializer_list&lt;std::pair&lt;int,int&gt;&gt; directions =
        {{-1, -1}, {-1, 0}, {-1, 1}, {0, -1}, {0, 1}, {1, -1}, {1, 0}, {1, 1}};

    int row_num = 0;
    for (auto const&amp; row: wordsearch) {
        int col_num = 0;
        for (char letter: row) {
            if (letter == word[0]) {  // first letter of word found, confirm/deny word
                // Perform the 8 possible searches.
                for (auto [dx, dy]: directions) {
                    if (search_line(wordsearch, row_num, col_num, word, dx, dy))
                        return std::make_pair(row_num+1, col_num+1);
                }
            }
            ++col_num;
        }
        ++row_num;
    }
    return std::make_pair(-1, -1);
}

#include &lt;iostream&gt;
#include &lt;sstream&gt;
static constexpr const char *const sample_grid =
    "khtjbobelbllelawrlafpsikeujttiefgpedzdud\n"
    "urrrzlmqesrtijulktjralhhoxbcupgchakqylin\n"
    "mjagawzurirorotsqbogbsacqleejcyshtddkpbg\n"
    "qtnknpniunpexeoxxdrzoncntunpqsdsjhmyhfcc\n"
    "snitnirptblbmmheuoiyhyvbnintcmxsdzpaijau\n"
    "kperformancecoatxzpggmudhilkqhnqovcltrkf\n"
    "msupplierkvrljtloxnonsgrtingsfbdyjzcwmly\n"
    "dnbcvienehbdriisjmlviineotggpiryhiqmsdlp\n"
    "yejzssctpnsdozoduofnpglwzccjiouxrqtpdxhj\n"
    "gzgxnsckmaintenanceppgwortegisqfjttetuwb\n"
    "npbzdixiesrgomahxssniserolpjxsezzaxigldl\n"
    "iqnmwfwotmktnhctsruahcckjtynndmdovkxbcmc\n"
    "rkuqdzerjsassemblyobsaqpuqxuigrvmzannsmh\n"
    "uawfrcigetartshitmcuqcazsnfespmbkfhyeqxt\n"
    "tapvwbgjgdmlgwtiydvyikzvuywugdytzxbntudn\n"
    "ccpeufynjgrjptlaqetyhizeacffaqomnxfemcvh\n"
    "ambtzwbtbmyalarjbawkvabosyzrpxdnllaqyeel\n"
    "fdijsposyiieueupauwkvffbjtmscktfqbvnuryr\n"
    "uogubvhiasrqgqxzedpgtjfbsveeibhjkjeyqdsa\n"
    "nlsfwxikkffwzwdpqubyfcexdmxebspdbienytxr\n"
    "avmuvxraxqwogzzewzpqurndrbmbtoewyknigrgy\n"
    "mlfmsvczbnbfatlcqoilvqjgenhxeyxotnndymgd\n"
    "tdoylwblacsswaazrsqptrhskjskpacmbyoghxdq\n"
    "doqwnpemhtqqmfmstgyveegbzhiszqjrzgfjhgnr\n"
    "yzkctjdotnjwzslxjlxvywjpjkovnrsqoqcazwxi\n"
    "hldcmmhadrndojumhjvtrsjkzzxwpokahglbcfll\n"
    "fghegxihojeqcdeaejzfzeksqgkhetngnmlmkhqb\n"
    "erubfrtmbalpnnljfseheugkxqaolhjwzqunleuh\n"
    "lfmnqjfbzyypmehzizhyurdsxmioejyeihfotmkc\n"
    "ufvtnqgaquifugqpwnpsvbwkplwehrqqpvahrzuh\n"
    "ukiwxtnqtztnuaeqdanzpspphaqsiaomsallnalt\n"
    "mfxmnbpxwhjlcjxstcxpymgazvlbubdymgdjytga\n"
    "nodglgayixlwfndioqswwarbaybtkhqmagoksgos\n"
    "auuoyzvwbaxlaalsedsciwdfaqgzypizluekliet\n"
    "rdldaqlveysukdutwutkyyjswzdvnfextdojspui\n"
    "ipmgltqauypamxssoppeygwgpftounkaxerwfkrt\n"
    "cfhiifkyvtvxnegqlmpbbckbexscntziitkrglmh\n"
    "zpqlaolbocqijyvbmxegdjnextlmciytfgedfdjg\n"
    "ritzgiuksqcaiqvwajjajydolwcxzxlwmdkvchua\n"
    "dinflhovqslcmnfigvjsvitfotytytqtccmtrvdl\n";

int main() {
    // Input information here
    std::istringstream infile{sample_grid};
    const Grid wordsearch = read_grid(infile);
    std::pair&lt;int, int&gt; location = iterate(wordsearch, "supplier");
    std::cout &lt;&lt; location.first &lt;&lt; " and " &lt;&lt; location.second &lt;&lt; std::endl;

}
</code></pre>
    </div>