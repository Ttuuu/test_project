<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I couldn't get your code to compile until I took out the <code>sorted</code>. The output was still good so I don't know what purpose it was supposed to serve.</p>

<p>There's no point in casting <code>validAlphabets</code> to a <code>Seq[Char]</code>.  As a <code>Range[Char]</code> the <code>contains()</code> method still works. Better still would be to cast it to a <code>Set[Char]</code>. Then the syntax is more concise and the lookup is faster.</p>

<pre><code>val rows = corners filter validAlphabets
val cols = corners filter (!validAlphabets(_))
</code></pre>

<p>Due to the use of <code>.head</code> and <code>.last</code>, this solution won't handle rows past <code>9</code>. There are also a number of input errors that it won't catch. These can be addressed if you use a Regex to parse the input.</p>

<pre><code>def cells(range: String): Seq[String] = {
  val format = "([A-Z])(\\d+):([A-Z])(\\d+)".r
  val format(colStart, rowStart, colEnd, rowEnd) = range

  for {
    c &lt;- colStart.head to colEnd.head    //from String to Char
    r &lt;- rowStart.toInt to rowEnd.toInt  //from String to Int
  } yield s"$c:$r"  //back to String
}
</code></pre>

<p>This will throw if the input string doesn't match the expected format. If you'd prefer it print the error and return nothing (an empty <code>Seq[String]</code>) then you can use a <code>match</code> statement instead, with a default <code>case _ =&gt;</code> for the format failure.</p>

<p>Notice that I use a <code>for</code> comprehension here. Whenever you see a <code>map()</code> inside a <code>flatMap()</code> that's a flag indicating that a <code>for</code> might do the same thing in a clearer/cleaner manner.</p>
    </div>