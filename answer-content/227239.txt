<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Consistency</h2>

<p>You are evaluating the <code>sum</code> in a single pass by simply adding each <code>input</code> to the current sum. But you don't do the same for the average.</p>

<blockquote>
<pre><code>if(Int32.TryParse(Console.ReadLine(), out input))
{
    numbers[i] = input;
    sum += numbers[i];
}

// ..

Console.WriteLine("The result of your numbers:");
Console.WriteLine(sum);
Console.WriteLine("The average of your numbers:");
Console.WriteLine((double)sum / (double)numbers.Length);
</code></pre>
</blockquote>

<p>As others have pointed out, you should just store the numbers in a single pass <code>numbers[i] = input;</code> and then evaluate the <code>sum</code> and <code>average</code> each in their own pass as:</p>

<pre><code>var sum = numbers.Sum();
var average = numbers.Average();
</code></pre>

<h3>Cumulative Moving Average</h3>

<p>There is another way to be consistent, while keeping everything in a single pass. You'd have the build a <a href="https://en.wikipedia.org/wiki/Moving_average#Cumulative_moving_average" rel="nofollow noreferrer">cumulative moving average</a> together with the sum:</p>

<pre><code>if(Int32.TryParse(Console.ReadLine(), out input))
{
    numbers[i] = input;
    sum += numbers[i];
    average += ((decimal)input - average) / (i + 1);
}
</code></pre>

<p>I would use a decimal to mitigate rounding and truncation errors.</p>
    </div>