<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Imports</h1>

<ol>
<li>It's really uncommon to use the <code>as</code> part of the <code>import</code>. The only time I see it is in NumPy, which is a pretty un-Pythonic library.</li>
<li>I recommend to only use <code>import</code> rather than <code>from ... import</code> statements. This is as it's harder to determine what has been imported from where.</li>
<li>When importing <code>datetime</code> I find it best to only use <code>import datetime</code>. Given that one of the classes is called <code>datetime</code> it can lead to situations where it's unknown what <code>datetime</code> is without having to then look at the imports.</li>
</ol>

<h1>Class</h1>

<p>I think you're on the right track, but you've added too much into your class. This is commonly referred to as the god-class anti-pattern.</p>

<p>I think it's a good idea, as <code>pathlib</code> implements a lot of the same stuff that you are doing. Whilst I can understand and would possibly encourage some extensions to the class, I don't think all your changes are great additions.</p>

<p>The following functions can all be replaced with pathlib in some form. Note that the entire of the bottom chunk can utilize <code>Path.stat</code>.</p>

<pre><code>self.full_name = Path.name
self.name = Path.stem
self.extension = Path.suffix
self.dir_path = Path.parent
self.dir_name = Path.parent.name

Path.stat:
    datetime:
        self.created = os.path.getctime
        self.last_modified = os.path.getmtime
        self.last_accessed = os.path.getatime
    self.size_in_bytes = os.path.getsize
</code></pre>

<h2>Datetime</h2>

<p>I don't think this should be re-added to your class. If you feel it's of great importance then you should interface with <a href="https://docs.python.org/3/library/os.html#os.stat_result" rel="nofollow noreferrer"><code>os.stat_result</code></a>. This means that using legacy and <code>pathlib</code> interfaces work with your changes.</p>

<p>Usage could be as simple as:</p>

<pre><code>stats = DateTimeStat(os.stat(...))
</code></pre>

<h2>Size Format</h2>

<p>This shouldn't be on the class. If you want to format a number that is in bytes then define a function, not a method, to do this for you. This has the benefit of you being able to pass any number from any origin to the function and it will still happily work, DRYing up your code.</p>

<p>There are three common prefixes schemes when denoting binary sizes.</p>

<ul>
<li>Metric (SI) prefixes - These are base 1000 and are the units you see pretty much everywhere in science. Much like I can have 1km, I have have 1kB. Which means 1000unit.</li>
<li>ISO binary prefix - There are base 1024 and are common when addressing binary data. The kibibyte, KiB, is 1024B.</li>
<li>JEDEC prefixes - These are discouraged by IEEE as they are confusing. It's not immediately apparent if you are using SI or JEDEC prefixes. These are base 1024 and only define the K, M, G prefixes.</li>
</ul>

<p>I suggest you stick to SI with base 1000 and ISO with base 1024.<br>
An example of all of them, 1Mib is 131.072kB and 128KB.</p>

<pre><code>import functools


def size_format(size, base, units):
    for unit in units:
        if size &lt; base:
            break
        size /= base
    return size, unit


size_bytes_format = functools.partial(
    size_format,
    base=1000,
    units='B kB MB GB TB YB'.split(),
)
size_ibytes_format = functools.partial(
    size_format,
    base=1024,
    units='B KiB MiB GiB TiB YiB'.split(),
)
</code></pre>

<h2>Duplicating</h2>

<p>I can't see this function being that useful. Even if I can't see a use, I wouldn't recommend adding it to the class. This is just a simple for loop. It's reasonable, and probably more readable, to defer this to the client code.</p>

<h2>Result</h2>

<p>Given all the above I would remove all the operations that act on an opened file. And it would result in the following class.</p>

<pre><code>class Path(pathlib.Path):
    def unzip(self, destination=None):
        if destination is None:
            destination = self.parent
        with zipfile.ZipFile(self, 'r') as target:
            return target.extractall(destination)

    def copy(self, destination):
        return shutil.copy(self, destination)
</code></pre>

<h1>File interactions</h1>

<p>As stated earlier you shouldn't <code>open</code> the file in <code>Path</code>. I don't really see much benefit your class has over just using <code>open</code>. For example, it doesn't allow streaming and is pretty memory intense.</p>

<p>How is your code better than <code>open</code> and how is <code>open</code> better than your code?</p>
    </div>