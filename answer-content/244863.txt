<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here is the anatomy of a shortcode, and how to add and then use them.</p>
<pre class="lang-php prettyprint-override"><code>add_shortcode('my_custom_shortcode', function ($atts, $content = NULL, $tag = NULL) {
    $defaults = ['a' =&gt; 'default A', 'b' =&gt; 'default B', 'c' =&gt; 'default C'];
    $atts     = shortcode_atts($defaults, $atts, $tag);

    ob_start();
    ?&gt;
    &lt;h2&gt;This is shortcode "&lt;?= $tag ?&gt;"&lt;/h2&gt;

    &lt;p&gt;&lt;em&gt;With the attributes of:&lt;/em&gt;&lt;/p&gt;
    &lt;ul&gt;
        &lt;?php foreach ($atts as $key =&gt; $value) : ?&gt;
            &lt;li&gt;&lt;strong&gt;&lt;?= $key ?&gt;:&lt;/strong&gt; &lt;?= $value ?&gt;&lt;/li&gt;
        &lt;?php endforeach; ?&gt;
    &lt;/ul&gt;

    &lt;p&gt;&lt;em&gt;With the content of:&lt;/em&gt;&lt;/p&gt;
    &lt;?= $content ?: '(Content was not passed to this shortcode)' ?&gt;
    &lt;?php
    return ob_get_clean();
});
</code></pre>
<ul>
<li>In order to create a shortcode you need use the <code>add_shortcode</code> function
<ul>
<li>It takes two arguments: a <code>$tag</code> and a <code>$callback</code> (a callback can either be an anonymous function, as used in this example, a string that is the name of the callback function defined elsewhere, or an array of class and method).</li>
<li><code>$tag</code> can be whatever you want, just as long as no other shortcode is already using that name. I chose <code>my_custom_shortcode</code> for this example</li>
<li><code>$callback</code> accepts three arguments <code>$atts, $content = NULL, $tag = NULL</code>
<ul>
<li><code>$atts</code> is an array of the arguments the user defined</li>
<li><code>$content</code> is any text the user defined inside of a shortcode (<code>[my_custom_shortcode]This text right here (if applicable)[/my_custom_shortcode]</code>)</li>
<li><code>$tag</code> is the shortcode name, if you are using an anonymous function it will always be identical to the $tag name when adding the shortcode. It can be helpful because you can use the same (non-anonymous) callback function for different shortcodes and just change them slightly depending the the tag name.</li>
</ul>
</li>
</ul>
</li>
<li>inside the callback you can optionally use the <code>shortcode_atts</code> function. It allows you to restrict/expect certain values from the user, set defaults (if not passed by the user), and drop/ignore params that are invalid (as decided by you). I typically will do this, but it's not required.</li>
<li>you want to return a string in the callback. DON'T echo/display the contents directly to the buffer. That is a common mistake. You can use <code>ob_start()</code> to start capturing the output buffer and <code>ob_get_clean()</code> to get then clear the buffer when you're done.</li>
</ul>
<p>Here is how a user (or you) can call a shortcode in code:</p>
<pre class="lang-php prettyprint-override"><code>// This is the most primitive form, no params or content is passed
// NOTE: just like html, if there is no content, you don't need to close the shortcode tag
echo do_shortcode('[my_custom_shortcode]');

// This example has one param, in this case `b`, passed and content
// NOTE: since you do want to pass content here, you do need to have a closing shortcode tag
echo do_shortcode('[my_custom_shortcode b="some user defined value for B"]The user contents[/my_custom_shortcode]');
</code></pre>
<p>If you want to call a shortcode from some WYSIWYG/Gutenberg type UI tool in WordPress, you just need the string, like this...</p>
<pre class="lang-html prettyprint-override"><code>[my_custom_shortcode]

-or-

[my_custom_shortcode b="some user defined value for B"]The user contents[/my_custom_shortcode]
</code></pre>
<p>...and WordPress with call <code>do_shortcode</code> behind the scenes.</p>
<p><strong>So...</strong>
How would you use it? Well I don't know what's inside your template file you're using for this question, but what's in there would go inside your shortcode callback. Here is your HTML, optimized from the original question</p>
<pre class="lang-php prettyprint-override"><code>&lt;div class="col kb_landing_left"&gt;
    &lt;?= do_shortcode('[my_custom_shortcode post_id="56"]') ?&gt;
&lt;/div&gt;
&lt;div class="col -sm-6"&gt;
    &lt;?php foreach ([1, 3, 2] as $post_id) : ?&gt;
        &lt;div class="row"&gt;
            &lt;div class="col kb_landing_right"&gt;
                &lt;?= do_shortcode("[my_custom_shortcode post_id='{$post_id}']") ?&gt;
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;?php endforeach; ?&gt;
&lt;/div&gt;
</code></pre>
<p>That's it, I would not mess with changing the global $post, it will cause you more problems than it's worth.</p>
<p>Here is how you write the shortcode:</p>
<pre class="lang-php prettyprint-override"><code>add_shortcode('my_custom_shortcode', function ($atts, $content = NULL, $tag = NULL) {
    $atts = shortcode_atts(['post_id' =&gt; 0], $atts, $tag);

    if (empty($atts['post_id']) || empty($post = get_post($atts['post_id']))) {
        return ''; // return nothing, a proper post_id was not passed by the user
    }

    ob_start();
    ?&gt;
    &lt;h2&gt;Title: &lt;?= $post-&gt;post_title ?&gt;&lt;/h2&gt;
    &lt;p&gt;&lt;?= $content ?: $post-&gt;post_excerpt ?&gt;&lt;/p&gt;
    &lt;p&gt;&lt;a href="&lt;?= get_permalink($post-&gt;ID) ?&gt;"&gt;Read More&lt;/a&gt;&lt;/p&gt;
    &lt;?php
    return ob_get_clean();
});
</code></pre>
<p>In my example, I'm creating a custom shortcode called <code>my_custom_shortcode</code>. I'm only accepting a post_id param. If post_id is not passed, or is not a valid id for a post, I exit early with an empty string. If a valid post is found, then I display the Title, content (if passed by user or fallback to the post excerpt), then a Read More link that takes me to that post's url. Then catch the buffer and return it.</p>
<p>Let me know if you have questions!</p>
    </div>