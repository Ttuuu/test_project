<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Calculate Distance</h1>

<p>To check the distance between points, you can <code>zip</code> together two points to get corresponding coordinates. Every point is denoted by X, Y, Z, so <code>zip(point1, point2)</code> will give you pairs <code>(X1, X2), (Y1, Y2), (Z1, Z2)</code>. Furthermore, you can use <code>sum</code> to get the total of any iterable, rather than hard-coding indices. Applying this to your distance function:</p>

<pre class="lang-py prettyprint-override"><code>import math

def calculate_distance(p1, p2):
    """
    Takes the euclidean distance between two points. They are assumed
    to be of equal length:

        p1 = [a1, a2, ..., an]
        p2 = [b1, b2, ..., bn]

    Where n is any integer
    """
    sq_dist = sum((a - b)**2 for a, b in zip(p1, p2))
    return math.sqrt(sq_dist)
</code></pre>

<p>This allows you to handle any point, and cleanly pairs up corresponding points.</p>

<h1>Generating Combinations of Distances</h1>

<p>There's no need to re-create a combinatorics function, one exists for you in <a href="https://docs.python.org/3.7/library/itertools.html#itertools.combinations" rel="nofollow noreferrer"><code>itertools.combinations</code></a>. They also include a sample recipe if you want to try it on your own, but theirs is great. It has the added benefit that you don't store the combinations in memory by default, that's totally up to you.</p>

<p>It looks like you are trying to find pairs of points across both lists that share the same distance. You have <em>lots</em> of nested loops here, so let's look at it one step at a time. A <code>dict</code> is a great way to group these points together, with the keys being distance and the values being the pairs of points. </p>

<p>To keep track of where sets of points come from, we can return separate dictionaries for fast membership testing:</p>

<pre class="lang-py prettyprint-override"><code>def combine(l1, l2):
    """
    Create your master dictionary by using the dict
    constructor on the list of key: value pairs (key is str, val is list)
    """
    d = dict(l1)
    d2 = dict(l2)

    return d, d2
</code></pre>

<p>Ok, using itertools to generate pairs, you want to group based on the euclidean distance between points. Let's do that. We will use a <code>defaultdict</code> of <code>set</code> to hold our list of names based on a distance key. The <code>set</code> will make sure that the names pairs are unique:</p>

<pre class="lang-py prettyprint-override"><code>from collections import defaultdict
from itertools import combinations


def get_pairs(d1, d2):
    """
    p1 and p2 are dictionaries of points
    we will construct a defaultdict that will take the combinations
    of points and construct the euclidean distance as our key, and a set of
    names as the values
    """
    groups = defaultdict(set)

    # unpack the names and the points using dict.items()
    pairs_dict = {**d1,**d2}
    for (name1, p1), (name2, p2) in combinations(pairs_dict.items(), 2):
        check_1 = name1 in d1 and name2 in d1
        check_2 = name1 in d2 and name2 in d2
        if check_1 or check_2:
            # skip since they lie in the same dictionary
            continue
        dist = calculate_distance(p1, p2)

        for k in groups:
            # this will give you that tolerance you are looking for
            if math.isclose(dist, k, rel_tol=0.1):
                groups[k].add((name1, name2))
        groups[dist].add((name1, name2))

    return groups

</code></pre>

<p>Why do it this way? Well, you avoid most of your nested loops, and you are returned pairs of names based on the distances. The reason I say most is that you want to check against existing distances in your group dictionary to pair up approximately equal distances. Then you are grouping not only by exact distance, but also by approximate distance. Now, as the dictionary grows, this will be an O(N) operation, and you aren't necessarily going to avoid that. Add that to an O(M) loop, where M is the number of combinations, and N*M can get quite big, but comparing to your recursive function:</p>

<pre class="lang-py prettyprint-override"><code>def recursive_finder(p1,list1,masterdict,d,ans):
        # if lenght of d is more than 2, store that list in ans
        if len(d) &gt; 2:
                ans.append(d)

        # if lenght of list is 0, do not do anything
        if len(list1) == 0:
                pass
        else:
                other = []
                nextlist = []
                #loop through each value in list1 as p1
                for i in list1:
                        if i in masterdict[p1]:
                                #make empty list
                                newl = []
                                #store old group in newl
                                newl.extend(d)
                                #add new member to old group
                                newl.append(i)
                                #store this list
                                other.append(newl)
                                #store new member
                                nextlist.append(i)
                #repeat for each successful value in nextlist                
                for i in range(len(nextlist)):
                        #collect p1 and dnew 
                        p1 = nextlist[i]
                        dnew = other[i]
                        #repeat process
 # can't get this to line up, indentation should be the same                     
 recursive_finder(p1,nextlist[i+1:],masterdict,dnew,ans)
</code></pre>

<p>You have a recursive function containing an O(N) loop inside another O(N) loop, so the O(M*N) is no worse than the existing code. Furthermore, while this may <em>look</em> like I'm modifying a dict while iterating over it, I'm really not. The state of the keys is constant while I iterate the keys, and I only inject a key after the loop. Your outer <code>build_master_dict</code> function, however, does modify a dict while iterating over the keys, since the recursive function is nested inside that loop.</p>

<p>This makes it <em>really</em> easy to look them up from your master dictionary:</p>

<pre class="lang-py prettyprint-override"><code># assume list1 and list2 are the same and in the namespace already
import math
import json # for formatting
from collections import defaultdict

d1, d2 = combine(list1, list2)

groups = get_pairs(d1, d2)

# to look up your points
points = groups[5.579426493825329]

for p1, p2 in points:
    print(d[p1], d[p2])
[1.2, 3.6, 4.5] [1.1, 2.2, 9.9]
[11.2, 3.6, 4.5] [11.1, 2.2, 9.9]
</code></pre>

<p>Or, to show in a more succinct way:</p>

<pre class="lang-py prettyprint-override"><code>for dist, points in groups.items():
    print(dist)
    for p1, p2 in points:
        print(p1, d[p1], p2, d[p2])

9.455686120002081
a [1.2, 3.6, 4.5] b [3.2, -5.4, 6.6]
v [11.2, 3.6, 4.5] x [13.2, -5.4, 6.6]
5.579426493825329
a [1.2, 3.6, 4.5] c [1.1, 2.2, 9.9]
v [11.2, 3.6, 4.5] y [11.1, 2.2, 9.9]
...
</code></pre>

<p>It's now easy to filter <code>groups</code> by <code>len</code> as well:</p>

<pre class="lang-py prettyprint-override"><code>res = dict(filter(lambda x: len(x[1]) &gt;= 3, groups.items()))

{10.0: {('c', 'y'), ('a', 'v'), ('b', 'x'), ('d', 'z'), ('d', 'v')}, 15.146286673637205: {('e', 'y'), ('c', 'x'), ('a', 'x'), ('d', 'y')}, 11.363538181394032: {('b', 'v'), ('b', 'y'), ('a', 'y'), ('c', 'v'), ('d', 'v')}, 12.223338332877807: {('c', 'v'), ('b', 'v'), ('b', 'y')}, 11.448143954370945: {('c', 'v'), ('d', 'v'), ('b', 'y')}, 22.03156826011258: {('e', 'z'), ('e', 'v'), ('e', 'x'), ('d', 'x'), ('b', 'z')}, 14.664924138910505: {('e', 'y'), ('c', 'x'), ('d', 'y')}, 19.03811965504997: {('e', 'v'), ('d', 'x'), ('c', 'z')}}

</code></pre>

<p>And to get your values:</p>

<pre class="lang-py prettyprint-override"><code>res = list(map(list, dict(filter(lambda x: len(x[1]) &gt;= 3, groups.items())).values()))

[[('c', 'y'), ('a', 'v'), ('b', 'x'), ('d', 'z'), ('d', 'v')], 
 [('e', 'y'), ('c', 'x'), ('a', 'x'), ('d', 'y')], 
 [('b', 'v'), ('b', 'y'), ('a', 'y'), ('c', 'v'), ('d', 'v')], 
 [('c', 'v'), ('b', 'v'), ('b', 'y')],  
 [('c', 'v'), ('d', 'v'), ('b', 'y')], 
 [('e', 'z'), ('e', 'v'), ('e', 'x'), ('d', 'x'), ('b', 'z')], 
 [('e', 'y'), ('c', 'x'), ('d', 'y')], [('e', 'v'), ('d', 'x'), ('c', 'z')]]

# to format your keys:
pairs = [['_'.join(x) for x in sub] for sub in res]

[['c_y', 'a_v', 'b_x', 'd_z', 'd_v'], 
 ['e_y', 'c_x', 'a_x', 'd_y'], 
 ['b_v', 'b_y', 'a_y', 'c_v', 'd_v'], 
 ['c_v', 'b_v', 'b_y'], 
 ['c_v', 'd_v', 'b_y'], 
 ['e_z', 'e_v', 'e_x', 'd_x', 'b_z'], 
 ['e_y', 'c_x', 'd_y'], 
 ['e_v', 'd_x', 'c_z']]
<span class="math-container">```</span>
</code></pre>
    </div>