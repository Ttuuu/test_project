<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<p>working sample code - <a href="https://play.golang.org/p/i24iSnpTjtP" rel="nofollow noreferrer">https://play.golang.org/p/i24iSnpTjtP</a></p>
</blockquote>
<hr>
<p>Really!</p>
<pre><code>sample := "This is a rather long line that needs word wrapping to an arbirtary line lenght so it's easier to read it."
</code></pre>
<p>Check your spelling.</p>
<pre><code>sample := "This is a rather long line that needs word wrapping to an arbitrary line length so it's easier to read it."
</code></pre>
<hr>
<p>UTF-8 is a variable-length encoding. <code>len(word)</code> is the length of <code>word</code> in bytes, not characters (except for ASCII). For example, test using Greek and Russian (Google Translate) samples:</p>
<pre><code>sample := `Αυτή είναι μια μάλλον μεγάλη γραμμή που χρειάζεται αναδίπλωση λέξεων σε αυθαίρετη γραμμή μήκος, ώστε να είναι πιο εύκολο να το διαβάσετε.`

sample := `Это довольно длинная линия, которая нуждается в перенос слов в произвольную строку длина, так что это легче читать.`
</code></pre>
<hr>
<pre><code>words := strings.Fields(strings.TrimSpace(text)))
</code></pre>
<p>Since <code>strings.Fields</code> removes <code>uinicode.IsSpace</code> characters, isn't <code>strings.TrimSpace</code> superfluous?</p>
<hr>
<p>Why do you make multiple passes (directly and indirectly) of <code>text</code> when one will do?</p>
<p>Why do you make so many allocations when one or two will do?</p>
<pre><code>BenchmarkBaduker-4   455914   2738 ns/op   1632 B/op   21 allocs/op
BenchmarkPeterSO-4   592740   1760 ns/op    224 B/op    2 allocs/op
</code></pre>
<p><code>peterso.go</code> <a href="https://play.golang.org/p/F1qyJRKurpq" rel="nofollow noreferrer">https://play.golang.org/p/F1qyJRKurpq</a> :</p>
<pre><code>package main

import (
    "fmt"
    "unicode"
    "unicode/utf8"
)

func wordWrap(text string, lineWidth int) string {
    wrap := make([]byte, 0, len(text)+2*len(text)/lineWidth)
    eoLine := lineWidth
    inWord := false
    for i, j := 0, 0; ; {
        r, size := utf8.DecodeRuneInString(text[i:])
        if size == 0 &amp;&amp; r == utf8.RuneError {
            r = ' '
        }
        if unicode.IsSpace(r) {
            if inWord {
                if i &gt;= eoLine {
                    wrap = append(wrap, '\n')
                    eoLine = len(wrap) + lineWidth
                } else if len(wrap) &gt; 0 {
                    wrap = append(wrap, ' ')
                }
                wrap = append(wrap, text[j:i]...)
            }
            inWord = false
        } else if !inWord {
            inWord = true
            j = i
        }
        if size == 0 &amp;&amp; r == ' ' {
            break
        }
        i += size
    }
    return string(wrap)
}

func main() {
    sample := "This is a rather long line that needs word wrapping to an arbitrary line length so it's easier to read it."
    fmt.Printf("%s\n\n", wordWrap(sample, 40))
    greek := `Αυτή είναι μια μάλλον μεγάλη γραμμή που χρειάζεται αναδίπλωση λέξεων σε αυθαίρετη γραμμή μήκος, ώστε να είναι πιο εύκολο να το διαβάσετε.`
    fmt.Printf("%s\n\n", wordWrap(greek, 40))
    russian := `Это довольно длинная линия, которая нуждается в перенос слов в произвольную строку длина, так что это легче читать.`
    fmt.Printf("%s\n\n", wordWrap(russian, 40))
}
</code></pre>
    </div>