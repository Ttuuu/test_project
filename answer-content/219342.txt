<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>main guard</h1>

<p>Put the parts of your code that are the ones calling for execution behind a <code>if __name__ == "__main__":</code> <a href="https://stackoverflow.com/a/419185/1562285">guard</a></p>

<pre><code>if __name__ == "__main__":
    def my_add(a, b):
        first = a
        second = b

        return first + second
    print_co_obj_fields(my_add.__code__)
</code></pre>

<p>This way you can import this python module from other places if you ever want to</p>

<h1>Documentation</h1>

<p>There is a python convention (<code>docstring</code>) to document the behaviour of a method: <a href="https://www.python.org/dev/peps/pep-0257/" rel="nofollow noreferrer">PEP-257</a></p>

<pre><code>def print_co_obj_fields(code_obj):
    """prints all the instance variables of the code object that start with 'co_'"""
</code></pre>

<h1>Indentation</h1>

<p>To decrease the levels of indentation, you can reverse the test of <code>startswith</code>, and <code>continue</code> when it fails:</p>

<pre><code>def print_co_obj_fields(code_obj):
    # Iterating through all instance attributes
    # and calling all having the 'co_' prefix
    for name in dir(code_obj):
        if not name.startswith('co_'):
            continue
        co_field = getattr(code_obj, name)
        print(f'{name:&lt;20} = {co_field}')
</code></pre>

<p>An alternative if using the builtin <code>filter</code>:</p>

<pre><code>def print_co_obj_fields(code_obj):
    # Iterating through all instance attributes
    # and calling all having the 'co_' prefix
    for name in filter(lambda field: field.startswith("co_"), dir(code_obj)):
        co_field = getattr(code_obj, name)
        print(f'{name:&lt;20} = {co_field}')
</code></pre>

<h1>Presentation</h1>

<p>Separate the generation of the results from the presentation. The easiest way to do this is to have <code>print_co_obj_fields</code> <code>yield</code> the <code>name</code> and <code>co_field</code> instead of printing them</p>

<pre><code>def co_obj_fields(code_obj):
    """generator that yields the fields in a code_object and their value"""
    for name in filter(lambda field: field.startswith("co_"), dir(code_obj)):
        co_field = getattr(code_obj, name)
        yield name, co_field

def print_co_obj_fields(fields):
    for name, co_field in fields:
        print(f"{name:&lt;20} = {co_field}")
</code></pre>

<p>The <code>main</code> part then changes to:</p>

<pre><code>if __name__ == "__main__":

    def my_add(a, b):
        first = a
        second = b

        return first + second

    fields = co_obj_fields(my_add.__code__)
    print_co_obj_fields(fields)
</code></pre>
    </div>