<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You can use <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Default_parameters" rel="nofollow noreferrer">default parameters</a> to automatically assign a value if none is given.</p>

<pre><code>function neat(numToFormat, thousandSep = ".", decimalSep = ",")
</code></pre>

<p>You should start by checking if the input is valid, instead of doing it at the end. It would also be better to throw an error, since it's not easy to tell from the result if the formatting succeeded or not.</p>

<pre><code>if (typeof numToFormat == 'number') {
  if(Number.isNaN(numToFormat) || !Number.isFinite(numToFormat)) {
    throw new Error("Invalid number");
  }
}
else if(typeof numToFormat == 'string') {
  if(!/^\d+((,|\.)\d+)?$/.test(numToFormat)) {
    throw new Error("Invalid string");
  }
}
else {
  throw new Error("Can only use number or string");
}
</code></pre>

<p>It's not <code>parseFloat()</code> which is imprecise, but the numbers themselves. JavaScript uses IEEE 754, which is 64-bit floating point numbers, with 53 bits used for precision. The number you are testing against is the highest safe integer, which is 2^53-1 and can be gotten from <code>Number.MAX_SAFE_INTEGER</code>. But your result could still be imprecise with numbers this large, since you are not only using integers but also 2 decimal places.</p>

<p>With string inputs you can get around this by not converting it to a number at all. Since the result is also a string, you can keep it a string all the way through. For number inputs you can only work with the precision you've been given. Any imprecision should be handled by the code calling this function beforehand.</p>

<p>You will need to update your <code>parseInput</code> function to avoid <code>parseFloat</code>. Just cut of any extra decimals, or add them if they are missing. If you want to round the number it gets a bit harder, but it's still possible.</p>

<p>Your <code>placeThousands</code> function can be done a little simpler. There are several ways to do it, but I would cut the string into an array of chunks and then <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/join" rel="nofollow noreferrer"><code>join</code></a> them together. I would also make it easier to change the chunk size by putting it in a variable.</p>

<pre><code>const chunkSize = 3;
let chunks = [];
let start = wholesPart.length % chunkSize;
if(start != 0) {
    chunks.push(wholesPart.slice(0, start));
}
for(let i = start; i &lt; wholesPart.length; i+= chunkSize) {
    chunks.push(wholesPart.slice(i, i + chunkSize));
}
return chunks.join(thousandSep)
</code></pre>

<p>When I saw <code>fstChunk</code> the first thing I thought was 'fast chunk', but I guess it's supposed to be 'first chunk'. There is no reason make things less clear just to save 2 characters.</p>

<p>You don't need to check the length of <code>wholesPart</code>, <code>placeThousands</code> can handle short strings.</p>

<pre><code>return placeThousands(wholesPart) + decimalPart;
</code></pre>
    </div>