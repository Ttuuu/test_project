<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Too complex</h2>
<p>As the issue of complexity has not come up and as the functions complexity is O(n<sup>2</sup>) for a problem that can be solved in O(n) where n is length of <code>arr</code>, I must point out some of the flaws.</p>
<p>The code comments show all the iterations for a worst case argument <code>[2,4,6,8,12,14,16,18,10,10]</code> the return will be <code>1</code>. (<code>**</code> is exponential operator)</p>
<pre><code>function meanMode(arr) {
    let uniqueVals = Array.from(new Set(arr));        // &lt;&lt; array iteration * 2
    let counts = uniqueVals.map(function (c, i, a) {  // &lt;&lt; outer iteration
            return arr.filter(function (c2) {         // &lt;&lt; inner iteration **2
                return c2 == c
            }).length
        });
    if (arr.every(sameValues)) {                      // &lt;&lt; array iteration
        return 0;
    } else {
        var mode;
        if ((counts.filter(function (x) {             // &lt;&lt; outer iteration
                    return x == (Math.max(...counts)) // &lt;&lt; inner iteration **2 to get max
                }).length) == 1) {

            // Next line has nested iteration **2 to get max again
            mode = uniqueVals[counts.indexOf(Math.max(...counts))]; 
        } else {
            return 0;
        }
        const mean = (arr.reduce(function (a, c) {    // &lt;&lt; array iteration
                return a + c
            })) / (arr.length);

        if (mode == mean) {
            return 1;
        } else {
            return 0;
        }
    }
    function sameValues(c, i, a) {
        return c == a[0];
    }
}
</code></pre>
<p>Not only are the 3 instances of iteration at O(n<sup>2</sup>) unneeded, you use <code>Array.filter</code> to count!! :( ...  Use <code>Array.reduce</code> to count so you don't need to allocate memory each time you add 1.</p>
<p>There are also repeated iterations that compute the same value. <code>Math.max(...counts)</code> requires one full iteration of <code>counts</code> each time it is called and you call it in the worst case 2n times.</p>
<p>Even when you add these optimisations (<code>Array.reduce</code> rather than <code>Array.filter</code> and calculate max once) and gain about 50% performance you are still at O(n<sup>2</sup>).</p>
<h2>In a single pass O(n)</h2>
<p>Using a <code>counts = new Map();</code> and a single iteration you can compute the <code>sum</code> to get the mean (after iteration), count each items frequency (via the map), and as you count the frequency you can keep a record of the top two max counts and the current max <code>mode</code>.</p>
<p>After the iteration compute the <code>mean</code> from the <code>sum</code> divide the <code>arr.length</code>, check if <code>mode</code> is equal to <code>mean</code> and if it is check that the top two frequencies are not equal to return 1 (or true).</p>
<p>An example of O(n) solution tuned for performance. (has optimisation that give an advantage if there are many sequences of the same value)</p>
<pre><code>function isMeanMode(arr) {
    const counts = new Map();
    var i, prevMaxVal, item, maxA = -1, maxB = -1, index = 0, max = 1, sum = 0;
    for (i = 0; i &lt; arr.length; i ++) {  // Only one iteration O(n)
        const val = arr[i];
        const item = counts.get(val);
        sum += val;
        if (item) { 
            item.count++;
            while (val === arr[i + 1]) { // for quick count of sequences
                i++; 
                item.count++;
                sum += val;
            }
            if (max &lt;= item.count) {
                max = item.count;
                if (prevMaxVal !== val) { // tracks the top two counts
                    maxB = maxA;          // if maxA and maxB are the same
                    maxA = max;           // after iteration then 2 or more mode vals
                } else { maxA = max }
                index = i;
                prevMaxVal = val;
            }

        } else { counts.set(val, {count : 1}) }
    }
    if (counts.size === arr.length || maxB !== -1 &amp;&amp; maxA === maxB) { return 0 }
    return arr[index] === sum / arr.length ? 1 : 0;
}
</code></pre>
<p>The above solution has a performance increase from 2 orders of magnitude + faster for large random arrays, to 3-4 times faster for very small arrays.</p>
    </div>