<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>To improve a bit Maarten's answer, you can directly generate the partitions of your target number into different dices:</p>

<pre><code>def constrained_partitions(n,k,low,high):
    ''' generator for partitions of n into k parts in [low,high] '''
    if k &lt; 1:
        return
    if k == 1:
        if low &lt;= n &lt;= high:
            yield (n,)
        return
    bound = min(high, n//k) + 1
    for i in range(low, bound):
        for result in constrained_partitions(n-i,k-1,i,high):
            yield (i,)+result
</code></pre>

<p>you can then use this instead of filtering <code>combinations_with_replacement</code></p>

<pre><code>def poss_comb_permutations_2(dice, faces, numbers):
    return sum(
        combination_permutations(combination)
        for combination in constrained_partitions(numbers, dice, 1, faces)
    )
</code></pre>

<p>here are some timings:</p>

<pre><code>%timeit poss_comb_permutations(10, 10, 50)
35.1 ms ± 84.1 µs per loop (mean ± std. dev. of 7 runs, 10 loops each)

%timeit poss_comb_permutations_2(10, 10, 50)
25.3 ms ± 162 µs per loop (mean ± std. dev. of 7 runs, 10 loops each)

%timeit poss_comb_permutations(10, 20, 50)
5.23 s ± 71.8 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)

%timeit poss_comb_permutations_2(10, 20, 50)
96 ms ± 513 µs per loop (mean ± std. dev. of 7 runs, 10 loops each)
</code></pre>
    </div>