<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Performance</h3>

<p>There are several performance issues in the posted code:</p>

<ol>
<li>The loop over <code>noteKeys</code> continues even after it knows that a word is missing. It should stop.</li>
<li>The map of counts of words in the magazine is unnecessary internal storage. A likely question for discussion during an interview is "what if the magazine doesn't fit in memory, how would you change your implementation?". Food for thought.</li>
</ol>

<h3>Program organization</h3>

<p>It's best when a function does one thing.
<code>compareNoteMag</code> does two: computes if there are enough words in the magazine, and prints "Yes" or "No".
This should have been a function returning <code>boolean</code>,
with an appropriate descriptive name.</p>

<h3>Safety</h3>

<p>The second <code>if</code> should have been an <code>else if</code> here:    </p>

<blockquote>
<pre><code>if(!mag[key]) string = 'No'
if(mag[key] &lt; note[key]){
    string = 'No'
}
</code></pre>
</blockquote>

<p>Not only this is inefficient (the second <code>if</code> is sometimes evaluated unnecessarily), the expression in the second <code>if</code> is sometimes a comparison between <code>undefined</code> and a number, which can be confusing and lead to mistakes.</p>

<h3>Naming</h3>

<p>Some of the names could be better:</p>

<ul>
<li><code>getCount</code> returns a map of <em>counts</em> (plural), so I would rename to <code>getCounts</code> (plural). </li>
<li><code>getCount</code> takes an array of words: <code>words</code> would be a natural and intuitive name instead of <code>array</code>.</li>
<li><code>compareNoteMag</code> computes the answer to print: <code>answer</code> would be a natural and intuitive name instead of <code>string</code>.</li>
</ul>

<h3>Technique</h3>

<p>Instead of this:</p>

<blockquote>
<pre><code>let count = counts[word]
counts[word] = count ? counts[word] + 1: 1;
</code></pre>
</blockquote>

<p>A common technique in JavaScript:</p>

<pre><code>counts[word] = (counts[word] || 0) + 1;
</code></pre>

<h3>Attention to detail</h3>

<p>This is very minor, but I notice some sloppiness:</p>

<ul>
<li>Semicolons are mostly omitted but not always</li>
<li>The semicolon is unnecessary at the end of <code>function checkMagazine(...) { ... };</code></li>
<li>The comment <code>// Complete the checkMagazine function below.</code> should not be there</li>
<li>The common convention is to put spaces around the parentheses in <code>for(...){</code> and <code>if(...){</code></li>
</ul>
    </div>