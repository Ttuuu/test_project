<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Ah, a fine <code>Spec</code>. Has been a while since I've used <code>Hspec</code>, but your tests seem reasonable. So, first of all: <strong>well done!</strong></p>
<p>There is one bit we should fix though, and you have identified it yourself: the property tests.</p>
<h1>QuickCheck's newtypes</h1>
<p>Creating any kind of number and then checking whether it's positive is a hassle, as half the numbers will get discarded per candidate. However, since <code>Hspec</code> uses <code>QuickCheck</code>, we can use <a href="https://hackage.haskell.org/package/QuickCheck-2.13.1/docs/Test-QuickCheck.html#t:Positive" rel="nofollow noreferrer"><code>Positive</code></a> to only generate positive numbers:</p>
<pre><code>prop_divisible (Positive a) (Positive b) =  a `mod` d == 0 &amp;&amp; b `mod`d == 0
  where EuclidRes d s t = extendedEuclid a b
</code></pre>
<p>Other than that there are no more objective improvements.</p>
<p>However, there are some personal I would use in my own specs.</p>
<h1>Reduce <code>let … in …</code> bindings in specs</h1>
<p>Consider the following spec</p>
<pre><code>  describe "Trivial" $ do
    it "trivial example 99 1" $
       let trivial = extendedEuclid 99 1      
       in  trivial `shouldBe` (EuclidRes 1 (0) 1)
</code></pre>
<p>If I want to understand the spec, I have to read the first line, remember the value of <code>trivial</code> (and that it hasn't been changed after calling <code>extendedEuclid</code>), and supply it in the next one.</p>
<p>If I instead write</p>
<pre><code>  describe "Trivial" $ do
    it "trivial example 99 1" $
       extendedEuclid 99  1 `shouldBe` (EuclidRes 1 (0) 1)
-- or
    it "trivial example 99 99" $
       extendedEuclid 99 99 
           `shouldBe` (EuclidRes 99 (0) 1)
</code></pre>
<p>I immediately see that <code>extendedEucild</code> is getting tested. This also <a href="https://hspec.github.io/" rel="nofollow noreferrer">fits the official style</a>, where <code>let … in …</code> bindings <a href="https://hspec.github.io/writing-specs.html" rel="nofollow noreferrer">aren't used at all</a>.</p>
<h1>Other small pieces</h1>
<p>You can use <code>prop</code> from <code>Test.Hspec.QuickCheck</code> instead of <code>it "..." $ property $ ...</code>:</p>
<pre><code>import Test.Hspec.QuickCheck

...

  describe "properties" $ do
      prop "both numbers divisible a%gcd == 0, b%gcd ==0" $ 
            prop_divisible
      ...
</code></pre>
    </div>