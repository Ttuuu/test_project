<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ol>
<li><p>A few points about improving code</p>

<ul>
<li>It seems that your naming convention for constants is to use a capitalized identifier. If so, that should be applied consistently for all constants including <code>inputFailure</code>.</li>
<li>The loop in the function <code>getTermCount</code> can be simplified. A for-loop is clearer IMO.</li>
<li>The output of <code>getNthFibonacciTerm</code> is actually off by one term (assuming the sequence starts with 0 at index 0). It outputs <code>1</code> for input <code>3</code>. The conditional checks before the loop could also be avoided to simplify the code.</li>
<li>Since the Fibonacci sequence is non-negative, the output could use an unsigned integer to allow slightly larger inputs.</li>
</ul></li>
<li><p>About input range: since the output exceeds the limit of <code>unsigned long long</code> when the input is over 93, I do not see how it can be accurately represented unless you try to implement representations of big integers yourself in C.</p></li>
<li><p>About performance: there are several <span class="math-container">\$\Theta(\log n)\$</span> algorithms for computing Fibonacci numbers for a given input <span class="math-container">\$n\$</span>. If you want that, <a href="https://www.geeksforgeeks.org/program-for-nth-fibonacci-number/" rel="nofollow noreferrer">here</a> is a list of all algorithms.</p></li>
</ol>

<p>Here is an improved version:</p>

<pre><code>#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;

static const int MinimumTerm = 0;
static const int MaximumTerm = 93;
static const int MaxTries = 3;
static const int InputFailure = -1;

static int getTermCount()
{
    const char *fmtstr = "Please enter an integer value between %d and %d\n";

    for (int count = 0; count &lt; MaxTries; count++)
    {
        int term;

        printf(fmtstr, MinimumTerm, MaximumTerm);    // IMO it is fine to just output to stdout before all attempts fail
        scanf("%d", &amp;term);
        if (term &gt;= MinimumTerm &amp;&amp; term &lt;= MaximumTerm)
        {
            return term;
        }
    }

    return InputFailure;
}

static unsigned long long getNthFibonacciTerm(int term)
{
    unsigned long long nthValue = 0;
    unsigned long long nextValue = 1;  // (n+1)th value, you may find a better name for that

    for (int termCount = 0; termCount &lt; term; termCount++)
    {
        unsigned long long newValue = nthValue + nextValue;
        nthValue = nextValue;
        nextValue = newValue;
    }

    return nthValue;
}

int main()
{
    int term = getTermCount();
    if (term == InputFailure)
    {
        fprintf(stderr, "Invalid Input\n");
        return EXIT_FAILURE;
    }

    printf("The %d term of the Fibonacci Sequence is %llu\n", term, getNthFibonacciTerm(term));
    return EXIT_SUCCESS;
}
</code></pre>
    </div>