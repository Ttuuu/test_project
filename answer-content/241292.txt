<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Solution: recursion with memoization works really well! Many thanks to <strong>Samwise</strong> and <strong>vnp</strong>.</p>

<p><strong>With the help of python lru_cache decorator:</strong></p>

<pre class="lang-py prettyprint-override"><code>@lru_cache(128)
def number_of_paths(m, n):
    if m == 1 and n == 1:  # border case
        result = 1

    elif m != 1 and n != 1:
        result = number_of_paths(m - 1, n) + number_of_paths(m, n - 1)

    elif m != 1 and n == 1:
        result = number_of_paths(m - 1, n)

    elif m == 1 and n != 1:
        result = number_of_paths(m, n - 1)

    else:
        raise Exception("Something went wrong!")

    return result
</code></pre>

<p><strong>With the help of dictionary to store results:</strong></p>

<pre class="lang-py prettyprint-override"><code>storage = {}
def number_of_paths_no_lru(m, n):
    if storage.get((m, n,)):
        return storage[(m, n)]

    if m == 1 and n == 1:  # border case
        result = 1

    elif m != 1 and n != 1:
        result = number_of_paths_no_lru(m - 1, n) + number_of_paths_no_lru(m, n - 1)

    elif m != 1 and n == 1:
        result = number_of_paths_no_lru(m - 1, n)

    elif m == 1 and n != 1:
        result = number_of_paths_no_lru(m, n - 1)

    else:
        raise Exception("Something went wrong!")

    storage[(m, n, )] = result
    return result
</code></pre>

<p><strong>Tests:</strong></p>

<pre><code>if __name__ == '__main__':
    print(number_of_paths(100, 100))
    print(number_of_paths_no_lru(100, 100))
    # Answers:
    # 22750883079422934966181954039568885395604168260154104734000
    # 22750883079422934966181954039568885395604168260154104734000
</code></pre>
    </div>