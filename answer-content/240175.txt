<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ol>
<li><p>If there's no reason to make it a class, don't make it a class.  (A good clue is that your class doesn't have any instance variables, and that both of its methods could be static without changing the way they work.)</p></li>
<li><p>Both of your functions return the same information (formatted differently), but one calls it <code>file_size</code> and the other calls it <code>directory_size</code> even though it's the same number.  In addition, neither has a type annotation for the return value.  This all adds up to make it hard to figure out what each function does.  Maybe it'd be better to just have one function that gets the size and a seperate one that formats it as a string?</p></li>
<li><p>The <code>totalsize</code> parameter does not seem to serve any purpose as a parameter, and should be removed.</p></li>
<li><p>There's no reason to convert <code>os.listdir</code> into a tuple; you can iterate over it as-is.</p></li>
<li><p><code>current_directory</code> is not necessarily a directory, so this name is confusing.</p></li>
<li><p>Your size formatting logic has an obvious gap in its <code>if...elif</code> chain.  Adding an <code>else</code> case fixes that.</p></li>
<li><p>This is a style thing, but I think f-strings are nicer looking than explicitly converting to <code>str</code> and using concatenation.</p></li>
<li><p>Your GB/MB/KB definitions are both copy+pasted and wrong.  Maybe this whole <code>if...elif</code> construction could be done more cleanly by turning the unit definitions into a table (where each unit size is defined exactly once) and iterating over the table?</p></li>
<li><p>Your recursive function would actually be simpler if it accepted any arbitrary path.  That way you wouldn't have to do as much logic inside the body of your iteration over the <code>os.listdir</code> results, and could actually just do it as a simple <code>sum</code> of recursive calls.</p></li>
<li><p>It's easier to test your code if you write a <code>__main__</code> block that accepts a command line parameter!</p></li>
</ol>

<p>Here's my massaged version of your code (does basically the same thing, but it uses the units as I've defined them rather than your hybrid 1024 * 10^N units -- having them defined the way I did it here makes it very easy to change if you'd rather make them 2^10, 2^20, etc).</p>

<pre><code>import os
import sys

def recursive_get_size(path: str) -&gt; int:
    """Gets size in bytes of the given path, recursing into directories."""
    if os.path.isfile(path):
        return os.path.getsize(path)
    if not os.path.isdir(path):
        return 0
    return sum(
        recursive_get_size(os.path.join(path, name))
        for name in os.listdir(path)
    )

def format_size(num_bytes: int) -&gt; str:
    """Formats a size (given in bytes) into a human-readable string."""
    for unit_name, unit_size in [
        ("GB", 10**9),
        ("MB", 10**6),
        ("KB", 10**3),
    ]:
        if num_bytes &gt; unit_size:
            return f"Size in {unit_name}: {round(num_bytes / unit_size, 3)}"
    else:
        return f"Size in bytes: {num_bytes}"

if __name__ == '__main__':
    print(format_size(recursive_get_size(
        sys.argv[1] if len(sys.argv) &gt; 1 else r"E:\Utilities_and_Apps\Python"
    )))
</code></pre>
    </div>