<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Encapsulate implementation details and any ugliness in a function. Readability is paramount.</p>

<p>For example, a more elegant solution,</p>

<pre><code>package main

import (
    "math/rand"
    "time"
)

// delay returns a random delay, in nanoseconds,
// between min and max seconds.
func delay(min, max float64) time.Duration {
    // time doesn't go backwards
    if min &lt; 0 || min &gt; max {
        return 0
    }
    // delay in seconds
    d := min + rand.Float64()*(max-min)
    // delay in nanoseconds
    return time.Duration(d * float64(time.Second))
}

func main() {
    dMin, dMax := 1.2, 2.7

    time.Sleep(delay(dMin, dMax))
}
</code></pre>

<p>By design, Go is type safe. Conversions between diffent types must be explicit.</p>

<p>Unless you have a very large number of occurrences of a floating-point variable and you can tolerate the loss of precision, use type <code>float64</code>, not <code>float32</code>.</p>

<hr>

<blockquote>
  <p>behemoth : something of monstrous size. Merriam-Webster</p>
  
  <p>a behemoth of type conversions. uli</p>
</blockquote>

<p>I only found a few type conversions in the code you posted.</p>
    </div>