<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You don't check for <code>StartDate &gt; EndDate</code>:</p>

<p>This is not caught: </p>

<pre><code>      Auction auction = new Auction("AAA", new DateTime(2019, 3, 2), new DateTime(2019, 3, 1));
</code></pre>

<hr>

<blockquote>
<pre><code>public int CurrentHighestBid
{
  get
  {
    return bids.Max(c =&gt; (int?)c.Value) ?? 0;
  }
}
</code></pre>
</blockquote>

<p>Instead of <code>return bids.Max(c =&gt; (int?)c.Value) ?? 0;</code>, you can write <code>return bids.Max(c =&gt; (int?)c.Value).GetValueOrDefault();</code>. But why do you cast to <code>int</code>?</p>

<hr>

<p>In <code>ValidateBid(double value, User user)</code> you check the start date but you don't check the end date.</p>

<hr>

<p>In</p>

<blockquote>
<pre><code>public void RemoveBid(double value, User user)
{
  var bid = bids.Where(c =&gt; c.Value == value).FirstOrDefault();       
  if (bid != null)
    bids.Remove(bid);
}
</code></pre>
</blockquote>

<p>you're not using the <code>user</code> argument to anything. I would expect the condition to be something like (you can skip the <code>Where</code>-call):</p>

<pre><code>var bid = bids.FirstOrDefault(b =&gt; b.Value == value &amp;&amp; b.User == user);
</code></pre>

<p>Futher: <code>Remove(...)</code> returns a boolean value to indicate if something was removed or not. You could return that value from <code>RemoveBid()</code> to let the client know...:</p>

<pre><code>public bool RemoveBid(double value, User user)
{
  var bid = bids.Where(c =&gt; c.Value == value).FirstOrDefault();
  if (bid != null)
    return bids.Remove(bid);
  return false;
}
</code></pre>

<hr>

<p>According to the use of exceptions and validation of input, I think you have to distinguish between input/states that hinders a normal or valid execution of the program, for instance a null reference or a <code>StartDate &gt; EndDate</code>, and violations of business rules that don't cause the program to stop working, but make invalid or unwanted results - like <code>value &lt; ReservePrice</code>. The first type should be thrown as exceptions while the latter should be handled with useful return values and/or messages. Ideally seen.</p>

<p>But it can be difficult to determine the difference (for instance: is <code>StartDate &gt; EndDate</code> a business rule or an exception?), so it is often seen, that exceptions is used in both cases. What ever you choose do it consistently and document which exceptions are thrown where and why. Never fail to throw an exception, just because you feel you have too many :-). If you think you have to throw too many exception, you should maybe consider if the overall design is right.</p>
    </div>