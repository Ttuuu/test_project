<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I also did not get to the Client. Here are some observations:</p>

<p>Don't use tombstone comments at the top of a class. Use proper JavaDoc which details the expected use of the class.</p>

<p>Star imports are discouraged. It's preferable to specify what classes you're importing in most cases.</p>

<p>Curly braces should be used even when they're optional. It's arguably pretty to avoid them, but they prevent an annoying class of error and their consistent use is considered a best practice.</p>

<p>Classes not designed for extension should be made <code>final</code>. Variables which should not change after initial assignment should also be made <code>final</code>. In addition to documenting design intent, they make it easier to read the code because you know they won't change.</p>

<p>In idiomatic Java, curly braces belong on the same line, not on a newline.</p>

<p>Resources that you open must be closed. The preferred means of doing so is the <code>try-with-resources</code> block. Not doing so can lead to resource leaks that eventually bring down your server / client applications or otherwise negatively affect the machine the code is running on.</p>

<p>Avoid abbreviations for variable names. Variable names should clearly indicate what they are.</p>

<p>Silently consuming exceptions is typically a very poor idea. It results in code that fails without giving you any clue as to where or why. Strongly consider always logging an exception.</p>

<p>Top-level classes should be declared in their own files. Classes that belong to another class should be declared inside the parent class. It's a bad idea to define multiple classes in the same file, because if there's a naming conflict between two such classes, the runtime behavior of your system is going to depend on which one the compiler sees first.</p>

<p>Types and variables should be as private as possible. Only expose functionality you expect and support external callers accessing.</p>

<p>Try to use Java generics properly. They really help out with type safety. You can turn on compiler warnings to give you a nudge.</p>

<h1>ThreadWorker</h1>

<p>This class is not a <code>Thread</code>. You haven't added generically useful functionality relevant to multiple clients who want to run a <code>Thread</code>. You have a specific block of code you want to run on it's own thread. The correct way to do that is to implement <code>Runnable</code>, and attach your code to a generic <code>Thread</code> instance.</p>

<p>This class probably shouldn't need to worry about what Socket called it. All it needs are the input and output streams, which can be passed in from the server instance.</p>

<p>It greatly enhances readability when complex strings are formatted neatly.</p>

<p>Consuming <code>IOException</code> from the socket stream and not failing upwards is dubious. I expect it will lead to ghost threads sitting around waiting on a socket that cannot possibly interact with the server.</p>

<h3>playgame</h3>

<p>Variables should be declared on their own lines, even if they share a type.</p>

<p>If you <code>return</code> from an <code>if</code> clause, you don't need an <code>else</code> clause.</p>

<p>In a non-toy application, it would be preferable to have the game track the guess state. ThreadWorker would pass in a guess and get back the number of bulls and cows. Given the nature of this application, that might be overkill here.</p>

<h3>pause</h3>

<p>It's a very bad idea to synchronize on yourself. You should always synchronize on a private member that no other class or instance knows about. The reason is that if somebody else synchronizes on your <code>ThreadWorker</code> instance, your <code>pause</code> method will be totally at their mercy as to if and when it might be able to run. In this case, you probably want a <code>ReentrantReadWriteLock</code> so you can read lock from <code>resume</code> as well.</p>

<p>Using a totally random key will only work because this is a toy application. In any real application you'd very quickly get conflicts and cranky users.</p>

<h3>resume</h3>

<p><code>resume()</code> should probably take a key, and not a magic number it has to know to split and how. </p>

<p>The first error message is misleading. It's not the saved game that's missing, it's the whole file.</p>

<p>A saved game will live forever. It might be preferable to delete them from the file when they get resumed, but that requires streaming and rewriting the whole file. Perhaps a feature enhancement for later.</p>

<p>Your magic number 5000 is a bad idea. Better would be to store the games one to a line, and read the file line-by-line. Just check if the line starts with the key. If it does, then worry about splitting.</p>

<p>The <code>return</code> at the end of the method does nothing.</p>

<p>The application flow is a bit wonky here. If you resume a game, you play the entire game from within the context of the <code>resume</code> method. Might it make more sense to return the game, and then play it from the <code>run</code> method?</p>

<h3>validate</h3>

<p>Predicate methods such as <code>validate</code> typically begin with <code>is</code> or <code>has</code>. <code>isValidTarget</code> might be a better name. <code>digs</code> is a terrible abbreviation for <code>digits</code>. And using a <code>Set</code> would be easier to read than your div/mod math.</p>

<p>In <code>help</code>, you don't need the extra <code>println</code>.</p>

<h1>BcGame</h1>

<p>Java method names should use camelCase. Java class names should start with a capital letter.</p>

<p>There's no reason to append <code>r</code> at the end of some of your variable names in the constructor.</p>

<p><code>generateNum</code> should be static, as it doesn't depend on the state of the class.</p>

<p>If you're going to use a <code>Random</code>, it's a good idea to pass it into the class that's using it. That helps you with testing later,  because you can pass in a random with a known seed so you get consistent test results.</p>

<p><code>generateNum</code> can be written more cleanly with <code>Collections.shuffle()</code>. It's somewhat less efficient, but easier to read. Additionally, <code>trimToSize</code> isn't buying you anything.</p>

<p>Objects should be created in a known good state. If it's necessary for a <code>BcGame</code> to have a name, that should be in the constructor. If it can't change, it should be final.</p>

<p><code>num</code> isn't really descriptive. <code>target</code> might be better. Likewise <code>name</code> and <code>playerName</code>, and <code>guesses</code> and <code>guessesUsed</code>. For that matter, <code>guessesRemaining</code> might be a better abstraction, because then the game controls the guesses, not the <code>ThreadWorker</code>.</p>
    </div>