<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Logic separation:</h2>

<p>At the moment, the <code>GameWindow</code> class appears to be responsible for event-handling, but also has parts of the game logic inside it, specifically:</p>

<ul>
<li>The <code>active</code> variable.</li>
<li>The <code>inputEnd</code> variable.</li>
<li>Clearing the event queue.</li>
<li>Closing the window.</li>
</ul>

<p>Removing all these makes the code much cleaner, and keeps the game logic together. Clearing the event queue can be done by the calling code, as can the outer while loop. The things subscribed to the <code>Notify*()</code> functions can simply ignore the input if it's inappropriate (set a boolean flag when the first input is received, or unsubscribe).</p>

<pre><code>void OnlineGame::RunOneGameCycle() {

    gameWindow.ClearEventQueue();

    while (!receivedInput)
        gameWindow.GetInput();

    GetRemoteMove();

    // ...
}

void OnlineGame::OnDirectionSelected(direction) { // subscribes to NotifyOnDirectionSelected()

    if (!receivedInput) {
        // do player move...

        receivedInput = true;
    }
}

void OnlineGame::OnExit() { // subscribes to NotifyOnExit()
    gameEnd = true;
    receivedInput = true; // if desired...
    // close the window after the game loop ends
}

void GameWindow::GetInput() {

    Event event{};

    while (pollEvent(event)) {
        if (event.type == Event::KeyPressed){
            switch (event.key.code) {
                case Keyboard::Up:
                    NotifyOnDirectionSelected(up);
                case Keyboard::Down:
                    NotifyOnDirectionSelected(down);
                case Keyboard::Right:
                    NotifyOnDirectionSelected(right);
                case Keyboard::Left:
                    NotifyOnDirectionSelected(left);
                case Keyboard::Escape:
                    NotifyOnExit();
                case Keyboard::Return:
                    NotifyOnConfirmation(true);
                default:
                    NotifyOnConfirmation(false);
            }
        }
        else if (event.type == Event::Closed) {
            NotifyOnExit();
        }
    }
}
</code></pre>

<p>The various notifications are also based on game specifics, and could be made more generic, e.g. <code>SubscribeToKeyPress(keyCode, callback);</code>.</p>

<hr>

<h2>Frames and Responsiveness:</h2>

<p>Most games have the event loop running constantly (i.e. every frame) to ensure that the application stays responsive. SFML, SDL, etc. are built with this usage pattern in mind. If the local player wants to close the window, they should be allowed to do so at any time.</p>

<p>If <code>GetRemoteMove()</code> blocks while waiting for the opponent's move (contains a while loop) and the local player clicks the close button, their OS may claim the application is not responsive, since it's not checking for events.</p>

<p>A close event received during an opponent's turn should probably be processed and not discarded, even if we want to ignore keyboard input during that time. Clearing the events at the start of a turn prevents that from happening.</p>

<hr>

<h2>Main Loop and GameStates:</h2>

<p>At the moment, you effectively have several main game loops, instead of one. i.e.:</p>

<pre><code>while (true) // WaitForStartSignal() // a loop!
    // wait for start signal

while (!gameEnd) // the main loop! but turn-based
{
    // clear events

    while (true) // waiting for correct player input for this turn // another main loop!
        // poll events

    while (true) // GetRemoteMove()... // another loop!
        // wait for opponents move

    // do next turn if both players have moved
}

// I'm assuming the content of WaitForStartSignal() and GetRemoteMove() here... if this is wrong please let me know.
</code></pre>

<p>Each iteration of one of those inner loops is effectively one "frame". In order to handle input properly (including window close events), we would need to be polling for events inside all of those inner loops.</p>

<p>The idealised frame-based main loop looks something like this:</p>

<pre><code>while (!gameEnd) {
    PollInput();
    UpdateGameState();
    Render();
}
</code></pre>

<p><code>UpdateGameState()</code> would involve checking a state <code>enum</code> (<code>GameState::WaitingForStart</code>, <code>GameState::PlayerTurn</code> etc.) or the use of a <a href="http://gamedevgeek.com/tutorials/managing-game-states-in-c/" rel="nofollow noreferrer">GameState class hierarchy</a>.</p>
    </div>