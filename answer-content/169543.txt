<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your <code>val_rep</code> function can also be simplified with regular expressions by using <a href="https://docs.python.org/2/library/re.html#regular-expression-syntax" rel="noreferrer">backreferences</a> (see the <code>\number</code> syntax). Here <code>\1</code> will be replaced by the first matched number.</p>

<pre><code>import re

REP_PATTERN=r"([0-9])(?:-?\1){3}"

def val_rep(sequence):
    return not re.search(REP_PATTERN, sequence)
</code></pre>

<p>You can even combine all the tests into a single regular expression using a negative lookahead <code>(?!...)</code>:</p>

<pre><code>import re

PATTERN=r"^(?!.*([0-9])(?:-?\1){3})[456][0-9]{3}(-?)[0-9]{4}\2[0-9]{4}\2[0-9]{4}$"

def is_valid_card(sequence):
    return re.search(PATTERN, sequence)
</code></pre>

<p>Note that in the second pattern we are using a backreference to reject card numbers such as <code>4123-45678910-1234</code> where hyphens are inconsistent (<code>\2</code> will match either a hyphen or an empty sequence)</p>
    </div>