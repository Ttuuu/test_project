<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Temporary state in <code>self</code></h1>

<p><code>is_cycle</code> leaves <code>sets</code> and <code>_edges</code> in <code>self</code>. Not as a cache or as a result, but as temporary state which then leaks out, that is generally seen as a bad thing.</p>

<p><code>Kruskals</code> leaves the <code>tree</code> in <code>self</code>, that's a bit more useful, but it could also be considered temporary state in <code>self</code>.</p>

<h1>The Algorithm</h1>

<p><code>union</code> doesn't look like an implementation of Union-Find to me. "Ask all sets whether the element is in them" is not how <a href="https://en.wikipedia.org/wiki/Disjoint-set_data_structure#Find" rel="nofollow noreferrer"><code>Find</code> normally works</a>. Despite that, it looks like something that reasonably should work, just slower.</p>

<p>The way <code>is_cycle</code> works means that the disjoint sets are built up from scratch (and the edges are re-sorted) every time <code>is_cycle</code> is called. That's wasteful, instead of rebuilding them from scratch, the sets could be kept up to date by unioning them as the main algorithm goes along. Calling <code>is_cycle</code> at all is wasteful: it loops over all edges, but the cycle could have been detected even before creating it by testing <code>Find(edge.start) != Find(edge.end)</code> in the main algorithm (<code>Kruskals</code>), which is how <a href="https://en.wikipedia.org/wiki/Kruskal%27s_algorithm#Pseudocode" rel="nofollow noreferrer">the pseudocode on Wikipedia</a> does it.</p>

<p>Overall I think that makes the current algorithm take O(EÂ²V log E) time, instead of O(E log E). Maybe not quite that, I just took the worst cases of all the nested loops, I didn't look at the effect of the number of sets decreasing as the algorithm progresses. </p>
    </div>