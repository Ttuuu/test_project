<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your <code>User</code> class should only be dealing with things about that user, not about how you store it in a list. You are also referring to a variable outside your class, so you are locked to this, which makes it less reusable, which is one of points of classes in the first place. So get rid of <code>addUser</code> and <code>getUserListAboveTwenty</code> from your class.</p>

<p>You don't need to pass the user to your functions, you can access it with <code>this</code>, like you've done in the constructor. You can also make your <code>addAge</code> function more general by adding age based on a parameter.</p>

<pre><code>addAge(age){
  this.age += age;
}
</code></pre>

<p>If you just need to store your users in a list, an array is just fine. But if you want more functionality you could make a UserList class.</p>

<pre><code>class UserList {
    constructor(users = []) {
        this.list = users;
    }

    addUser(user) {
        this.list.push(user);
    }

    getUserById(id) {
        return this.list.find(user =&gt; user.id == id);
    }

    getUsersAboveTwenty() {
        return new UserList(this.list.filter(user =&gt; user.age &gt; 20));
    }
}
</code></pre>

<p>I've added an additional function to return a user from an id. I also made <code>getUsersAboveTwenty</code> return a new UserList. You can add more if you need it (A way to add more users at the same time would be useful). Full code:</p>

<pre><code>class User {
    constructor(name, id, age) {
        this.name = name;
        this.id = id;
        this.age = age;
    }

    addAge(age){
        this.age += age;
    }
}

class UserList {
    constructor(users = []) {
        this.list = users;
    }

    addUser(user) {
        this.list.push(user);
    }

    getUserById(id) {
        return this.list.find(user =&gt; user.id == id);
    }

    getUsersAboveTwenty() {
        return new UserList(this.list.filter(user =&gt; user.age &gt; 20));
    }
}

let userList = new UserList();

userList.addUser(new User('user1',1,12));
userList.addUser(new User('user2',2,18));
userList.addUser(new User('user3',3,21));
userList.addUser(new User('user4',4,22));

userList.getUserById(1).addAge(3);
userList.getUsersAboveTwenty();
userList.getUserById(1).addAge(3);
</code></pre>
    </div>