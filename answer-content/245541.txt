<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Pure Functions vs. Global Variables</h1>
<p>You might want to consider making the function pure. That is to not use global variables. Pass those variables as additional arguments.</p>
<p>Although global variables an nonpure functions have their place in some use cases and in C in particular, like embeded systems, small self contained programs/modules, etc. But I would say in general it is a best practice to avoid them whenever possible. It's a good habit to not use globals and keep functions pure as the default way to code and only use them when you find yourself in situation where it seems like the only way (simple enough to be worth it) to go.</p>
<h1>Always False Condition</h1>
<p>Here:</p>
<pre><code>for(int j = 0; j &lt; candidate_count; j++){
  if((i == ranks[j]) &amp;&amp; (j != candidate_count - 1)){
</code></pre>
<p>you iterate until <code>j &lt; candidate_count</code>, but when <code>j == candidate_count - 1</code> you do nothing.</p>
<p>You should just iterate until <code>j &lt; candidate_count - 1</code>.</p>
<p>To make it a little better you may compute the decrement before the loop to avoid decrementing the same value on every iteration. But the compiler may actually do this for you.</p>
<h1>Comments</h1>
<p>It is very uncommon and invisible to keep comments aligned to the right.</p>
<p>They are easy to miss and they make the lines unnecesarily long. Everytime you have to scroll horizontally, it is uncomfortable. Whether it be because of long code or comments...</p>
<p>Just put them above the relevant line of code</p>
<pre><code>// comment here
const char* code = "here";
</code></pre>
<h1>Efficiency</h1>
<p>You are approaching the problem from the wrong side.</p>
<p>You might want to start with the ranks.</p>
<pre><code>int least_preferred = candidate_count - 1;
for (int i = 0; i &lt; least_preferred; ++i) {
  for (int j = i + 1; j &lt; candidate_count; ++j) {
    ++(preferences[ranks[i]][ranks[j]]);
  }
} -
</code></pre>
<p>Maybe there is a faster solution that would require some more complex data structure, like hash tables, heaps, or something like that. I'm not sure if these basic data structures are available in standard C library. The last time I coded in C was at university and I was probably implementing those data structures myself :) But given the maximum number of candidates is 9, I wouldn't bother implementing something like that. As I see it this is more of an improvement of readability. And performance is not so important here because 9 candidates will be computed in less then a milisecond anyway.</p>
<p>Note that I iterate <code>i</code> only while less then <code>candidate_count - 1</code> because the least preferred canidate is not preferred over anyone and thus the inner loop would execute zero times because it would start at <code>j = i + 1 = candidate_count</code>.</p>
<p>Also note that I use pre-increment (<code>++i</code>) rather then post-increment (<code>i++</code>), just out of habit. It is no different in this case (when not part of a bigger expression). But in C++ you can overload these operators on objects and for post-increment you have to keep the old and new copy of the object, while pre-increment acts in-place and thus could be more effective. And so I believe it is a good habit to only use post-increment when it's feature is required.</p>
<h1>Recursion</h1>
<p>Recursion is usualy easier to understand, but not better in performance (unless using tail recursion optimization).
I usualy try to avoid recursion. Of course this may require stacks, queues or other data structures.</p>
    </div>