<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This is a wonderfully succinct solution. I will make one point:</p>

<pre class="lang-java prettyprint-override"><code>final int[] degreeArray = new int[N + 1];
</code></pre>

<p>This creates a never-used int at degreeArray[0]. I understand that this was a choice so as to be able to use a simple access by value of the trustees:</p>

<pre class="lang-java prettyprint-override"><code>degreeArray[itemInTrustArray[0]]--;
</code></pre>

<p>In the interest of creating the minimum number of objects necessary, and thus using the least memory possible, I would recommend initializing degreeArray to length N</p>

<pre class="lang-java prettyprint-override"><code>final int[] degreeArray = new int[N];
</code></pre>

<p>And then left shifting your insert by value statements</p>

<pre class="lang-java prettyprint-override"><code>degreeArray[itemInTrustArray[0]--]--;
degreeArray[itemInTrustArray[1]--]++;
</code></pre>

<p>and finally updating your final for loop to account for this change to the zero-based indexing inherent to arrays</p>

<pre class="lang-java prettyprint-override"><code>// Now iterate though the degreeArray to find the index having degree as N-1.
for (int i = 0; i &lt; N; i++) {
</code></pre>

<p>Since you are working with int primitives, the math operators here would add only a near-vanishing amount to overall runtime, if that is a concern.</p>
    </div>