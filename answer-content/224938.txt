<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Comparing 30,000 strings against 30,000 other strings is 900 million comparisons.  It's going to take a while.</p>

<p>Run the Python profiler on a small data set to see where it is spending the most time.  So you can focus your efforts.</p>

<h3>difflib</h3>

<p>The documentation for <code>SequenceMatcher</code> says it caches information about the second sequence.  So that to compare one string against a bunch of other strings, use <code>.set_seq2()</code> to set the one string, and the use <code>.set_seq()</code> to check it against each of the other strings.</p>

<p>It also says that calculating <code>ratio()</code> is expensive to compute so you might want to use 'quick_ratio()<code>or</code>real_quick_ratio()` first.</p>

<pre><code>def wuzzyfuzzy(df1, df2):
    myList = []
    total = len(df1)

    s = SequenceMatcher(isjunk=None, autojunk=False)

    for idx1, df1_str in enumerate(df1.col1):
        s.set_seq2(df1_str)

        my_str = ('Progress : ' + str(round((idx1/total)*100,3))+'%')
        sys.stdout.write('\r' + str(my_str))
        sys.stdout.flush()

        best_str2 = ''
        best_ratio = 0

        for idx2, df2_str in enumerate(df2.col1):
            s.set_seq2(df2_str)

            if s.real_quick_ratio() &gt; best_ratio and s.quick_ratio() &gt; best_ratio:
                r = s.ratio()

                if r &gt; best_ratio:
                    best_match = df2_str
                    best_ratio = r

        myList.append([df1_str, best_match, best_ratio])

    return myList
</code></pre>

<p>You could also consider <code>difflib.get_close_matches(string, possibilities, n, cutoff)</code>.  It compares <code>string</code> against a list <code>possibilities</code> and returns a list of upto <code>n</code> that match better than <code>cutoff</code>. </p>

<pre><code>def wuzzyfuzzy(df1, df2):
    myList = []

    possibilities = list(df2.col1)

    s = SequenceMatcher(isjunk=None, autojunk=False)

    for idx1, df1_str in enumerate(df1.col1):
        my_str = ('Progress : ' + str(round((idx1/total)*100,3))+'%')
        sys.stdout.write('\r' + str(my_str))
        sys.stdout.flush()

        # get 1 best match that has a ratio of at least 0.7
        best_match = get_close_matches(df1_str1, possibilities, 1, 0.7)

        s.set_seq(df1_str, best_match) 
        myList.append([df1_str, best_match, s.ratio()])

        return myList
</code></pre>
    </div>