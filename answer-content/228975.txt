<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I have accepted the answer from @ShapeOfMatter, however I have documented the actions/comments for each of their findings below.</p>

<p>This was my first question on Code Review SE, and I realise I should have been more clear about the usage context of the code and the fact that it's an excerpt from a larger application.</p>

<h2>Efficiency</h2>

<blockquote>
  <p>You should close the socket when you're done with it.</p>
</blockquote>

<p>Thanks, implemented in the full program.</p>

<blockquote>
  <p>What are the sleep(1) lines for? You're already waiting for data to become available on the socket.</p>
</blockquote>

<p>The sleeps are to add a delay between WHOIS lookups if <code>whois()</code> is called from a loop (which it is in the full program). This is to help prevent hitting WHOIS server rate limits.</p>

<p>Having the sleep inside the <code>whois()</code> function isn't ideal, so I've moved this to the loop that calls the function instead. In the full program the sleep time can also be manually overridden via a command-line argument.</p>

<blockquote>
  <p>I would be tempted to make your timeouts and retry count optional arguments with default values, but that's not a huge deal.</p>
</blockquote>

<p>The hard-coded timeout and retries are fine for now, but I have added a backlog item to reconsider in future.</p>

<h2>Security</h2>

<blockquote>
  <p>Most of the security concerns are probably outside your control.</p>
  
  <p>How do you know if the server you're opening the socket to is the one you actually wanted? Do you care if a 3rd party is reading these messages? Could a 3rd party alter the messages in transit?</p>
  
  <p>Very likely these aren't problems you need to worry about, but depending on the application they might be.</p>
</blockquote>

<p>The program is designed with the idea that all WHOIS data is untrusted, as it is a plaintext protocol that has no native encryption or integrity checking.</p>

<p>The attacks that I am primarily concerned about are RCE, local information disclosure and DoS caused by reading malformed/malicious data from a [spoofed/compromised] WHOIS server. In the full program, the WHOIS data is parsed and certain content extracted out of it, however this is only string manipulation - the content is never executed, used to write arbitrary files, used to connect to arbitrary network locations, etc.</p>

<p>The WHOIS lookups and responses do not need to be confidential in this case.</p>

<p>I have conducted around 12 hours of fuzz testing against the WHOIS function using Radamsa, where fuzzed WHOIS responses were repeatedly served in order to test the resilience and robustness of the code. No crashes, hangs or other issues were identified, and all errors were handled as expected.</p>

<h2>Code Quality</h2>

<blockquote>
  <p>Calling <code>exit()</code> from an error handler probably isn't a great idea. If this is going to be used in a web-service of any kind, then this is actually a security issue: Anyone who can cause problems with your connection to the whois server can now break your site.</p>
</blockquote>

<p>This is part of a command-line application with no associated web services. I should have clarified this in the original question.</p>

<p>Outputting the error and exiting is the intended action for the error handler.</p>

<blockquote>
  <p>Format the comment at the top as a PHPDoc to help IDEs and intellisense.</p>
</blockquote>

<p>Good idea, thanks. Added this as a backlog item.</p>

<blockquote>
  <p>Don't do multiple assignments on one line.</p>
</blockquote>

<p>The full program doesn't have this, I had actually added these manually when writing the Stack Exchange question, to reduce the number of code lines in the question box.</p>

<blockquote>
  <p>Don't name a variable <code>$null</code>. You could name it <code>$dummy</code> or <code>$temp</code> or have separate <code>$read</code> and <code>$except</code>. You may also have the option of passing anonymous empty arrays in-line.</p>
</blockquote>

<p>Thanks, adjusted in the full program.</p>

<blockquote>
  <p><code>return</code> isn't typically written like a function; it's a language command on the level of <code>try</code> or <code>class</code>.</p>
</blockquote>

<p>Thanks, adjusted all <code>return</code>s in the full program.</p>

<blockquote>
  <p>When you're writing a loop, your first thought should be a <code>for</code> loop (or <code>foreach</code>), which will serve just fine here.</p>
</blockquote>

<p>A <code>while</code> loop is acceptable for now, however I have added this as a backlog item to reconsider in future.</p>

<blockquote>
  <p>Use type-signatures for your functions.</p>
</blockquote>

<p>Thanks, adjusted all functions in the full program.</p>
    </div>