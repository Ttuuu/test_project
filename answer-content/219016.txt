<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Bug</h2>

<p>Your second functional solution does not run. You forgot to add the second argument to <code>A.reduce</code>. I will assume you wanted an array as the last argument.</p>

<h2>Why functional sucks</h2>

<p>This example clearly illustrates the problem with some functional solutions that involve data manipulation. The requirement of no side effects forces the solution to copy the whole dataset even when you manipulate only a single item. This is particularly noticeable in your second functional solution. See performance results below.</p>

<h2>Code and Style</h2>

<p>Some minor points...</p>

<ul>
<li><code>function () {};</code>  the trailing semicolon is not needed.</li>
<li><p>Swap the conditions. </p>

<p>You have <code>if(a % 2 === 0) { /*even*/ } else { /*odd*/ }</code> ...</p>

<p>can be <code>if(a % 2) { /*odd*/ } else { /*even*/ }</code></p></li>
<li><p>Compact code. Try to avoid sprawling code. It may not matter for small segments of code, but source code can very long and reading code there spans pages is not as easy as having it all in one view.</p></li>
<li><p>Before a newline it is either <code>}</code> or <code>;</code>. There are two exceptions. The <code>}</code> that closes an object literal should have a closing <code>;</code> eg <code>const a = {};</code>. And multi line statements and expressions.</p></li>
</ul>

<h2>Know the language.</h2>

<p>You do a lot of code examples, many of them are rather trivial. Of late many of your posts contain bugs or incomplete code (may be a sign of boredom? or a lack of challenge (engagement)) . I do not believe in the classical closed book assessment examination, it does not reflect the real world. However a good memory of the field makes you a more productive coder.</p>

<p>There are many subtle tricks in JavaScript that can catch you out if unaware. Testing your knowledge improves your understanding of the language making you a better coder.</p>

<p>This is a example <a href="http://davidshariff.com/js-quiz/" rel="nofollow noreferrer">JavaScript Web Development Quiz</a> picked at random from a web search <code>"javascript quiz"</code> </p>

<p>It is good practice to do one of these every now and then.</p>

<p><sub><sup>I did not get 100% ðŸ˜¶</sup></sub></p>

<h2>Example A</h2>

<p>Compacting the function. </p>

<pre><code>function sortByParity(arr) {
    const odd = [], even = [];
    for (const val of arr) {
        if (val % 2) { odd.push(val) }
        else { even.push(val) }
    }
    return [...even, ...odd];
}
</code></pre>

<h2>Performance</h2>

<p>The second functional example was so slow I had to push the other best time down to the timer resolution cutoff 0.2ms or it would have taken forever to complete the test.</p>

<p>The functions as tested</p>

<pre><code>function sortByParity_I1(A) {
    const odd = [], even = [];
    for (const a of A) {
        if (a % 2 === 0) { even.push(a) }
        else { odd.push(a) }
    }
    return [...even, ...odd];
}
const sortByParity_F2 = A =&gt; A.reduce((acc, x) =&gt; x % 2 === 0 ? [x, ...acc] : [...acc, x], []);
const sortByParity_F1 = A =&gt; A.reduce((acc, x) =&gt; {
        if (x % 2 === 0) { acc.unshift(x) }
        else { acc.push(x) }
        return acc;
    }, []);
</code></pre>

<h3>Benchmarks</h3>

<p>Mean time per call to the function in 1/1,000,000 second. OPS is operations per second. % is relative performance of best.</p>

<p>For array of 1000 random integers</p>

<pre><code>sortByParity_I1:    20.709Âµs OPS  48,287 100%
sortByParity_F1:   133.933Âµs OPS   7,466  15%
sortByParity_F2: 3,514.830Âµs OPS     284   1%
</code></pre>

<p>For array of 100 random integers</p>

<pre><code>sortByParity_I1:     2.049Âµs OPS 488,148 100%
sortByParity_F1:    10.005Âµs OPS  99,947  20%
sortByParity_F2:    46.679Âµs OPS  21,422   4%
</code></pre>

<p><strong>Note</strong> that the results for the functional solution do not have a linear relationship with the size of the array.</p>

<h2>Improving performance</h2>

<p>I will drop the  slow functional and add an improved imperative function that pre allocates the result array. This avoids the overhead of allocation when you grow the arrays. As there is one array the overhead of joining the two arrays is avoided as well. This almost doubles the performance.</p>

<pre><code>function sortByParity_I2(A) {
    const res = new Array(A.length);
    var top = res.length - 1, bot = 0;
    for (const a of A) { res[a % 2 ? top-- : bot ++] = a }
    return res;
}

10000 items
sortByParity_I2:   119.851Âµs OPS     8,343 100%
sortByParity_I1:   223.468Âµs OPS     4,474  54%
sortByParity_F1: 5,092.816Âµs OPS       196   2%

1000 items
sortByParity_I2:    13.094Âµs OPS    76,372 100%
sortByParity_I1:    23.731Âµs OPS    42,138  55%
sortByParity_F1:   123.381Âµs OPS     8,104  11%

100 items
sortByParity_I2:     0.900Âµs OPS 1,110,691 100%
sortByParity_I1:     2.245Âµs OPS   445,398  40%
sortByParity_F1:     9.520Âµs OPS   105,039   9%
</code></pre>

<p><sub><sup>Test on Win10 Chrome 73 CPU i7 1.5Ghz </sup></sub></p>
    </div>