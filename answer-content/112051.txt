<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Is it <em>not</em> okay. Every time you think you should use reflection in a unit test, there's something wrong in the <strong>design</strong> of your class. Difficult testing reflects bad design and easy testing reflects good design (most of the time).</p>

<p>I don't know much about JPA, so here are the premises to my answer : </p>

<hr>

<pre><code>FacesContext.getCurrentInstance().getExternalContext().getSessionMap().get("user");
</code></pre>

<p>This would return <code>null</code> if your session was invalidated by the <code>logout</code> method. Otherwise it returns the currently logged in user.</p>

<hr>

<pre><code>FacesContext.getCurrentInstance().getExternalContext().getUserPrincipal();
</code></pre>

<p>I honestly have no idea what this does..</p>

<hr>

<pre><code>userDao.findByEmail(principal.getName());
</code></pre>

<p>That's simple, no need for explanation</p>

<hr>

<p>From what I understand, right now your <code>getUser</code> method has two responsabilities. </p>

<ol>
<li>"Log in" the user</li>
<li>Find the user in a context</li>
</ol>

<p>You should have a method to <strong>initialize a user</strong> (or log it in, whatever floats your boat :p) and one to retrieve the <strong>currently logged in user</strong>.</p>

<p>This way the user of the class has a clear understanding of what's happening "under the hood".</p>

<p>As I said, I don't know JPA and it makes my confidence over what I'm saying a little less high, but I <em>know</em> that using reflection in a unit test it bad. Usually it's <code>private</code> because it's an implementation detail. That's exactly what it is at the moment. Your <code>user</code> variable is useful to <em>you</em> and no one else. Your unit tests should test what is useful to your client. And if the unit test have a hard time doing it, your client will have a hard time using your code.</p>

<p>Overall, JPA or not : Reflection in unit test = bad unit test = bad design choice.</p>

<p>Think about refactoring your class to change this and I'm <em>sure</em> one day you'll think "Darn, that guy from Code Review was right, I would've been stuck if I had keep the implementation as it was."</p>

<p>Otherwise, @chillworld's answer is good, that's something you can do. But I wouldn't encourage it for such a trivial case! :)</p>
    </div>