<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The exact time complexity of your algorithm is O(2*n) since it performs two sequential iterations on the array.</p>

<p>I do have a slightly better performing algorithm:</p>

<ol>
<li><p>Sort the array by the first item in the 2nd dimension array (item number)</p></li>
<li><p>iterate over the sorted array looking for items that have exactly one line that has the requested target seller.</p></li>
</ol>

<p>time complexity is O(n log n) + O(n)</p>

<p>Note:
streaming of arrays is possible with <a href="https://docs.oracle.com/javase/8/docs/api/java/util/Arrays.html#stream-T:A-" rel="nofollow noreferrer">Arrays.stream()</a></p>

<p>Edit:
Here is a complete solution with Java 8 streams:</p>

<pre><code>private static void getUniqueProduct2(int[][] itemSeller, int target) {

    // map key is item, map value is list of 2nd dimension arrays that have this item
    Map&lt;Integer, List&lt;int[]&gt;&gt; map =
        Arrays.stream(itemSeller)
            .collect(Collectors.groupingBy(arr -&gt; arr[0]));

    // stream on map values, looking for lists with one list-item that belongs to target seller
    // build array of items that satisfy criteria
    int[] sellerExclusiveItems =
        map.values().stream()
            .filter(list -&gt; list.size() == 1  &amp;&amp;  list.get(0)[1] == target)
            .mapToInt(list -&gt; list.get(0)[0])
            .toArray();

    System.out.println(Arrays.toString(sellerExclusiveItems));
}
</code></pre>
    </div>