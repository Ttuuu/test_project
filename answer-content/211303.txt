<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><code>Tween</code> is not a very good name. How about <code>Snowflake</code>? And why is it a <code>struct</code> and exposing all of its implementation details. I would personally place it in a class, initialize its values via constructor, and give it a public function like <code>fall()</code> or something to update it each frame.</p>

<pre><code>class Snowflake
{
public:
    void fall();
private:
    sf::CircleShape snowflake;
    float begin;
    float change;
    float time{ 0 };
    float duration;
    float current() const
    {
        return begin + change * easeInOutQuad(time / duration);
    }
};
</code></pre>

<p>By putting the circle in the class you can update it internally. More on all that later.</p>

<hr>

<pre><code>float easeInOutQuad(float normalisedTime)
{
  auto &amp; t = normalisedTime;
  return t &lt; 0.5 ? 2*t*t : 2*t*(2 - t) - 1;
}
</code></pre>

<p>It seems a little unusual to assign a reference to the argument and then return the reference. I'm actually a little surprised this didn't boom. it's a trivially copied <code>float</code>. Just pass it by value.</p>

<hr>

<pre><code>auto const inverseFramerate = 1.f / 60;
window.setFramerateLimit(static_cast&lt;unsigned&gt;(1 / inverseFramerate));
</code></pre>

<p>That is an odd way to write</p>

<pre><code>window.setFramerateLimit(60);
</code></pre>

<p>Now you could replace the magic number 60 that I just passed here with a named constant but I would actually argue that this is one of those rare cases when you shouldn't. This will be the only call to this function and the name won't be more readable here. Most readers are likely to immediately recognize that the 60 is setting 60 fps.</p>

<p>No cast. No equation. easily readable. less lines.</p>

<hr>

<pre><code>auto const numberOfSnowflakes = 200;
Tween tweens[numberOfSnowflakes];
float yPositions[numberOfSnowflakes];
</code></pre>

<p>This is a much more useful named constant. However. Don't use C <code>array[]</code>s. <code>std::array</code> or <code>std::vector</code> are better C++ containers. <code>std::array</code> is static sized like the C-style <code>array[]</code> and <code>std::vector</code> is dynamically sized. Don't forget to <code>#include</code> whichever you choose to use. You should keep the constant but switch to the more preferred <code>constexpr</code></p>

<pre><code>constexpr int number_of_snowflakes = 200;
</code></pre>

<hr>

<pre><code>auto generator = std::mt19937{};
</code></pre>

<p>A lot of your difficult to read code revolves around your use and misuse of this object. Allow me to show you a slightly easier to use way of handling PRNG. I'd wrap it all into its own named function and do away with the two harder to read and use lambdas. Then inside the function you seed the generator and declare it <code>static</code> so it doesn't get destroyed when it goes out of scope.</p>

<pre><code>//we take unsigned and return float in order to work with SFML's window size which is unsigned
float generateRandom(unsigned min, unsigned max)
{
    float real_min = static_cast&lt;float&gt;(min);
    float real_max = static_cast&lt;float&gt;(max);
    std::random_device rd;
    static const std::mt19937 generator(rd());
    std::uniform_real_distribution&lt;float&gt; distribution(real_min, real_max);

    return distribution(generator);
}
</code></pre>

<p>Now when you want a value between 0 - width you do</p>

<pre><code>start = generateRandom(0, window.getSize().x)
</code></pre>

<p>This is a weird reimplementation of <code>uniform_real_distribution</code>. You did it so you could work with negative ranges because you want your snowflakes to start off-screen. But all you need is an offset applied after the fact.</p>

<pre><code>auto randomBetween = [&amp;generator](float min, float max)
{
    return std::generate_canonical&lt;float, 10&gt;(generator)*(max - min) + min;
}; 
</code></pre>

<hr>

<p>Now we get to initialization. In the future it is best to declare and initialize variables together. If you need helper functions have them defined beforehand and ready to use rather than defining them in between instantiation and initialization.</p>

<pre><code>for (auto i = 0; i &lt; numberOfSnowflakes; ++i)
{
    tweens[i].begin = randomBetween(0, window.getSize().x);
    tweens[i].change = randomChangeInX();
    tweens[i].duration = randomBetween(1, 5);
    yPositions[i] = randomBetween(-20, window.getSize().y);
}
auto const defaultRadius = 5.f;
auto circle = sf::CircleShape{};
</code></pre>

<p>Most of this can be eliminated by doing two things. Move the <code>sf::Circle</code> into our new <code>Snowflake</code> class and we use default initialization within the class. You can also be completely rid of the second <code>yPositions</code> array as the <code>Snowflake</code> class circle can maintain its own position. You will have to pass the starting coordinates to the constructor because the <code>Snowflake</code> class won't have full access to the <code>sf::RenderWindow</code> class. Our class is now starting to look like this:</p>

<pre><code>class Snowflake
{
public:
    explicit Snowflake(sf::Vector2f start_position);

    void fall();
private:
    float change{ generateRandom(1, 10) };
    float duration{ generateRandom(1, 5) };
    float time{ 0 };
    sf::Vector2f position;
    sf::CircleShape snowflake{ default_radius / duration };
    float current() const
    {
        return position.x + change * easeInOutQuad(time / duration);
    }
};
</code></pre>

<p>You can do the initialization like so:</p>

<pre><code>std::vector&lt;Snowflake&gt; snowflakes;
snowflakes.reserve(number_of_snowflakes);
for (int i = 0; i &lt; number_of_snowflakes; ++i)
{
    float x = generate_random(0, window.getSize().x);
    float y = generate_random(-20, window.getSize().y);
    sf::Vector2f start_position(x, y);
    snowflakes.emplace_back(Snow(start_position));
}
</code></pre>

<p>This will give you a nice standard container of snowflakes at default initialized</p>

<hr>

<p>So now we get to your animation loop. I see now why you did <code>inverseFramerate</code> now, but it was a complicated way of having your snow fall at varying rates. As you have moved everything into the <code>Snowflake</code> class you can have a much simpler animation loop.</p>

<pre><code>while (window.isOpen())
{
    sf::Event event;
    while (window.pollEvent(event))
    {
        if (event.type == sf::Event::Closed)
        {
            window.close();
        }
    }

    for (auto&amp;&amp; snow : snowflakes)
    {
        snow.fall(window.getSize());
    }

    window.clear();
    for (auto&amp;&amp; snow : snowflakes)
    {
        snow.draw(window);
    }
    window.display();
}
</code></pre>

<p>All that leaves us with is implementing the <code>fall()</code> and <code>draw()</code> methods from above. <code>draw()</code> is simple and would look something like this:</p>

<pre><code>void draw(sf::RenderWindow&amp; window) { window.draw(snowflake); }
</code></pre>

<p>and the <code>fall()</code> method I just copied over your implementation details using my new class member variables. It looks something like this:</p>

<hr>

<p>Put it all together and it would look like this:</p>

<pre><code>#include &lt;random&gt;
#include &lt;vector&gt;

#include &lt;SFML/Graphics.hpp&gt;

constexpr int number_of_snowflakes = 200;
constexpr float single_frame = 1.F / 60;
constexpr float default_radius = 5.F;

// Maps input in the range [0..1] to an output in the range [0..1].
// Represents the piecewise function:
// y(x) = 2*x^2             when x &lt; 0.5
//      = -2*x^2 + 4*t - 1  when x &gt;= 0.5
float ease_in_and_out(float normalised_time)
{
    float t = normalised_time;
    return t &lt; 0.5 ? 2 * t*t : 2 * t*(2 - t) - 1;
}

//we take unsigned and return float in order to work with SFML's window size which is unsigned
float generate_random(unsigned min, unsigned max)
{
    float real_min = static_cast&lt;float&gt;(min);
    float real_max = static_cast&lt;float&gt;(max);
    static std::random_device rd;
    static std::mt19937 generator(rd());
    std::uniform_real_distribution&lt;float&gt; distribution(real_min, real_max);

    return distribution(generator);
}

class Snowflake
{
public:
    explicit Snowflake(sf::Vector2f start_position) : position{ start_position }
    { 
        snowflake.setPosition(position);
        begin = start_position.x;
    }

    void fall(sf::Vector2u window_size)
    {
        time += single_frame;
        if (time &gt; duration)
        {
            begin += change;
            change = generate_random(1, 10);
            time = 0.F;
        }

        position.y = snowflake.getPosition().y;
        position.y += 1 / duration;
        if (position.y &gt; window_size.y)
        {
            position.y = -10.F;
            begin = generate_random(0, window_size.x);
            change = generate_random(1, 10);
            time = 0;
            snowflake.setRadius(default_radius / duration);
        }

        position.x = shift_x();
        snowflake.setPosition(position);
    }
    void draw(sf::RenderWindow&amp; window) { window.draw(snowflake); }
private:
    sf::Vector2f position;
    float begin;
    float change{ generate_random(1, 10) };
    float duration{ generate_random(1, 5) };
    float time{ 0 };
    sf::CircleShape snowflake{ default_radius / duration };

    float shift_x() const
    {
        return begin + change * ease_in_and_out(time / duration);
    }
};

int main()
{
    sf::RenderWindow window{ sf::VideoMode{500, 500}, "Snow" };
    window.setFramerateLimit(60);

    std::vector&lt;Snowflake&gt; snowflakes;
    snowflakes.reserve(number_of_snowflakes);
    for (int i = 0; i &lt; number_of_snowflakes; ++i)
    {
        float x = generate_random(0, window.getSize().x);
        float y = generate_random(0, window.getSize().y) - 20.F;
        sf::Vector2f start_position(x, y);
        snowflakes.emplace_back(Snowflake(start_position));
    }

    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if (event.type == sf::Event::Closed)
            {
                window.close();
            }
        }

        for (auto&amp;&amp; snow : snowflakes)
        {
            snow.fall(window.getSize());
        }

        window.clear();
        for (auto&amp;&amp; snow : snowflakes)
        {
            snow.draw(window);
        }
        window.display();
    }
}
</code></pre>

<p>Could this still be improved? Sure. I left a few magic numbers behind, and we all know those are bad. The names are more descriptive and better describe what is happening but they could probably be improved. SFML allows for classes to inherit from <code>sf::Drawable</code> and you can fix the syntax so it can be called <code>window.draw(Snowflake);</code> instead of passing a reference to the window object to your class. I would also probably extract the <code>fall()</code> method to a couple private helpers. This would</p>

<ul>
<li>hide the implementation details of the public method that don't need to be exposed.</li>
<li>allow you to simplify some of the functionality. (There's a lot of resetting values to default.)</li>
</ul>
    </div>