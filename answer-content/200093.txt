<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>My friends also reviewed my code, and I found some things that could be improved:</p>

<ul>
<li>They said there were too much null checks. Idneed, I used nulls in the board for empty cells, and in the tetromino's 2D array that contains its parts. Null checks are not good in OOP, because you deal with the variable's state instead of the object's state. Also, if you forget to check for null, you'll get <code>NullPointerException</code> (and yes, I got sometimes when I was creating the original version).</li>
<li>Using nulls in the board assumes that empty cells does not have any views. This is not good for reusability (maybe a text-based version would need to print a space).</li>
<li>Width, height, x and y coordinates were "hard-coded" into tha tetromino's 2D arrays. Originally I used matrix transforms to generate rotations for tetrominoes. This is easy in 2D arrays (just some transpose/reverse operations), but in view of OOP, they're less meaningful. What is the array's dimensions? width x height, or height x width? How is it indexed? Iterator variables named <code>i</code> and <code>j</code> doesn't tell it.</li>
</ul>

<p>To solve these null-check problems, I added two helper data structures. Boad cells implement <a href="https://en.wikipedia.org/wiki/Null_object_pattern" rel="nofollow noreferrer">Null object pattern</a>. In <code>Tetromino</code>, the order of parts was not needed anywhere, so a (full) 1D array is enough, and the helper structure stores the offset (relative distance from the tetromino's position). You can view changes <a href="https://github.com/klenium/tetris/commit/416af49f6b827d3845d73cd11aad57ba8b5dc2e5" rel="nofollow noreferrer">here</a>.</p>

<ul>
<li>In function <code>generateNextTetromino</code>, there're also a null check. I used a factory method pattern. If the tetromino could not be added to the board (ie. the at game over), it returned null. Creating a new object should not belong to any condition, it's not the <code>Tetromino</code>'s job to dispose itself.</li>
<li><code>generateNextTetromino</code> also contained logic that's not related to the generation, but the result of it.</li>
<li><p>These names aren't such good to describe what's happening:</p>

<pre><code>int x = (int) Math.ceil((boardWidth - tetromino.width) / 2);
boolean moved = tetromino.tryMove(x, 0);
if (!moved) {
</code></pre></li>
<li><p>The game wasn't thread-safe. Because the Timer and JavaFX run on different threads, if the user presses a key at the same time when the timer expires, concurrent operations can broke the Tetromino's state. Only one transformation shoukd be evaluated at the same time.</p></li>
</ul>
    </div>