<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I suggest that you do more error checking:</p>

<ul>
<li><p><code>malloc</code> or <code>realloc</code> may fail.</p></li>
<li><p>I can initialize the stack with negative capacity.</p></li>
<li><p>I can pop more elements than I pushed.</p></li>
</ul>

<p>In all these cases, your implementation silently swallows the errors and accesses invalid addresses.</p>

<p>As <a href="https://codereview.stackexchange.com/users/52802">πάντα ῥεῖ</a> said in comments, if you want to store generic elements that exceed <code>void*</code> in size, you need to allocate memory for them and let the <code>void*</code> point to them, e.g.:</p>

<pre><code>typedef struct {
    // ...
} BigStruct;

// pushing
BigStruct* data = malloc(sizeof(BigStruct));
// initialize *data
stack_push(&amp;stack, data);

// popping
BigStruct* data = stack_pop(&amp;stack);
// use *data
free(data);
</code></pre>

<p>Some small issues:</p>

<ul>
<li><p>It is not common to cast the result of <code>malloc</code> or <code>realloc</code> in C.</p></li>
<li><p>If the stack is initialized to capacity 0, then the stack will never grow and elements will be stored at invalid positions.  A solution is to adjust the capacity to 1 automatically.</p></li>
</ul>
    </div>