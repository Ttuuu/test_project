<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You really don't want a function sometimes returning a promise and sometimes returning a value.  That just makes it difficult for the caller.  Instead, if you sometimes have a promise to return, then you should always return a promise.  </p>

<pre><code>function isActive(){
  if(condition){
    return API.someFunction().then(function(response){
      return response;
    });
  }
  return Promise.resolve(active);
}
</code></pre>

<p>Then, your caller can just know that it always returns a promise and they can code accordingly.  When you have complexity like this, it's better to encapsulate it in the function itself rather than make every single caller deal with it.</p>

<p>So, the caller can then always and consistently just do:</p>

<pre><code>isActive().then(...).catch(...);
</code></pre>

<hr>

<p>Also, if you actually have this in your real code:</p>

<pre><code>   .then(function(response){
      return response;
    });
</code></pre>

<p>then, you can remove that entirely and just use this as it generates the exact same result, but is less code:</p>

<pre><code>function isActive(){
  if(condition){
    return API.someFunction();
  }
  return Promise.resolve(active);
}
</code></pre>

<p>Both examples return a promise that resolves to <code>response</code>.  One is obviously a lot simpler than the other.</p>
    </div>