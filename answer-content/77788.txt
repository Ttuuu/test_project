<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>In general, the code you have is neat, and easy to follow. The QuickSort algorithm is relatively traditional, and the pieces I expect to see are about where I expect them to be.</p>

<p>Let's go through the issues that I see though... and some of them are serious...</p>

<h2>Namespaces</h2>

<p>Using <code>namespace::std</code> is generally a poor idea. The possibility of namespace pollution is real. In fact, you have implemented a <code>swap</code> function and there already is one <code>std::swap</code>, but we'll get to that.</p>

<h2>Style</h2>

<ul>
<li><p>You have a variable <code>min</code>, but this should be <code>mid</code>.</p></li>
<li><p>sometimes you put the function parameters with the left/right indices before the array, and sometimes after. You have:</p>

<blockquote>
<pre><code>void quicksort(int *arr, int left, int right) {
</code></pre>
</blockquote>

<p>and you also have:</p>

<blockquote>
<pre><code>void swap(int i,int j, int *a) {
</code></pre>
</blockquote>

<p>pick one, and stick with it. I would personally recommend putting the array first, and the indices afterwards.</p></li>
<li><p>Use whitespace appropriately. Operators like the <code>&lt;&lt;</code> operator on <code>cout</code> are operators like any others. Use the space to improve readability:</p>

<blockquote>
<pre><code>cout&lt;&lt;"QS:"&lt;&lt;left&lt;&lt;","&lt;&lt;right&lt;&lt;"\n";
</code></pre>
</blockquote>

<p>should be:</p>

<pre><code>std::cout &lt;&lt; "QS:" &lt;&lt; left &lt;&lt; "," &lt;&lt; right &lt;&lt; "\n";
</code></pre></li>
</ul>

<h2>Bugs</h2>

<p>You have a few bugs in here which should be addressed:</p>

<ol>
<li><p>There's the potential for integer overflow when calculating the mid point. <a href="http://googleresearch.blogspot.ca/2006/06/extra-extra-read-all-about-it-nearly.html">This is a 'famous' bug</a>. Your code <code>int min = (left+right)/2;</code> should be done as:</p>

<pre><code>int mid = left + (right - left) / 2;
</code></pre>

<p>The above solution will not overflow.</p></li>
<li><p>You should, when partitioning the data, consider values equal to the pivot value, to be either left or right of the pivot. Your code you use  a strict <code>&lt;</code> or <code>&gt;</code> depending on whether you are on the right or left. One of those should include <code>=</code>. Your code, as it is, will run through the actual pivot value and do some funky business with it. You end up moving the pivot around in various ways.</p></li>
<li><p>You have a potential overrun (buffer overflow) in your loop conditions. It is posible, when you get to this line in the pivoting:</p>

<blockquote>
<pre><code>    while(arr[i]&lt;pivot)
        i++;
</code></pre>
</blockquote>

<p>for i to run off the end of the array. If all the remaining values are less than the pivot, there's nothing stopping it from going off. You still need to check against j in these loops.</p></li>
</ol>

<h2>Swap</h2>

<p>C++ has <a href="http://en.cppreference.com/w/cpp/algorithm/swap">a swap function, use it</a>. To get it, from C++11 <code>#include&lt;utility&gt;</code> and before that <code>#include&lt;algorithm&gt;</code></p>

<h2>Algorithm</h2>

<p>The classic quick-sort is done in 5 stages:</p>

<ol>
<li>find a 'pivot value'.</li>
<li>move all values less than (or equal to) the pivot value to 'the left'.</li>
<li>move all values larger than the pivot to 'the right'.</li>
<li>quick-sort the values less than(or equal)</li>
<li>quick-sort the values larger than.</li>
</ol>

<p>Note that many text books extract the first 3 stages in to a 'partitioning' function. The purpose of that function is to identify the pivot value, move the candidates around, and then insert the pivot value back in to the data at 'the right place'.</p>

<p>That last part is key, it leaves the pivot value in the exact place it is supposed to be. This means you never have to include that pivot value in the sorts again.</p>

<p>Let's break that logic down in to it's methods, then, with the assumption that' there's a 'pivoting' function that does the first 3 steps. That leavs a simpler quicksort that looks like:</p>

<pre><code>void quicksort(int *arr, const int left, const int right){

    if (left &gt;= right) {
        return;
    }

    int part = partition(arr, left, right);

    quicksort(arr, left, part - 1, sz);
    quicksort(arr, part + 1, right, sz);
}
</code></pre>

<p>Notice, in the above, that the check to make sure the inputs are valid are done on entry to the recursive function. This simplifies the last part of the function. The same code could, alternatively, be written similar to yours, as:</p>

<pre><code>void quicksort(int *arr, const int left, const int right, const int sz){

    int part = partition(arr, left, right);
    std::cout &lt;&lt; "QSC:" &lt;&lt; left &lt;&lt; "," &lt;&lt; right &lt;&lt; " part=" &lt;&lt; part &lt;&lt; "\n";
    print (arr, sz);

    if (left &lt; part - 1) {
        quicksort(arr, left, part - 1, sz);
    }
    if (part + 1 &lt; right) {
        quicksort(arr, part + 1, right, sz);
    }
}
</code></pre>

<p>I prefer the first.... it makes it more easy to spot the recursion terminator.</p>

<p>So, that's now a simpler quicksort, partition the data, sort each partition (but not the actual partitioning value which is in the right place).</p>

<p>How do you partition the data?</p>

<p>The trick here is to swap the pivot value to the front of the sequence, partition the rest of the values, and then swap the pivot value back to where it belongs:</p>

<pre><code>int partition(int *arr, const int left, const int right) {
    const int mid = left + (right - left) / 2;
    const int pivot = arr[mid];
    // move the mid point value to the front.
    std::swap(arr[mid],arr[left]);
    int i = left + 1;
    int j = right;
    while (i &lt;= j) {
        while(i &lt;= j &amp;&amp; arr[i] &lt;= pivot) {
            i++;
        }

        while(i &lt;= j &amp;&amp; arr[j] &gt; pivot) {
            j--;
        }

        if (i &lt; j) {
            std::swap(arr[i], arr[j]);
        }
    }
    std::swap(arr[i - 1],arr[left]);
    return i - 1;
}
</code></pre>

<p>Note how the code above double-checks the buffer overflow?</p>

<p>Putting this all together, and leaving in some of the debug statements you have, I would have the code:</p>

<pre><code>#include &lt;iostream&gt;
#include &lt;algorithm&gt;

void print(int *a, int n)
{
    int i = 0;
    while(i &lt; n){
        std::cout &lt;&lt; a[i] &lt;&lt; ",";
        i++;
    }
    std::cout &lt;&lt; "\n";
}

int partition(int *arr, const int left, const int right) {
    const int mid = left + (right - left) / 2;
    const int pivot = arr[mid];
    // move the mid point value to the front.
    std::swap(arr[mid],arr[left]);
    int i = left + 1;
    int j = right;
    while (i &lt;= j) {
        while(i &lt;= j &amp;&amp; arr[i] &lt;= pivot) {
            i++;
        }

        while(i &lt;= j &amp;&amp; arr[j] &gt; pivot) {
            j--;
        }

        if (i &lt; j) {
            std::swap(arr[i], arr[j]);
        }
    }
    std::swap(arr[i - 1],arr[left]);
    return i - 1;
}

void quicksort(int *arr, const int left, const int right, const int sz){

    if (left &gt;= right) {
        return;
    }


    int part = partition(arr, left, right);
    std::cout &lt;&lt; "QSC:" &lt;&lt; left &lt;&lt; "," &lt;&lt; right &lt;&lt; " part=" &lt;&lt; part &lt;&lt; "\n";
    print (arr, sz);

    quicksort(arr, left, part - 1, sz);
    quicksort(arr, part + 1, right, sz);
}

int main() {
    int arr[8] = {110, 5, 10,3 ,22, 100, 1, 23};
    int sz = sizeof(arr)/sizeof(arr[0]);
    print(arr, sz);
    quicksort(arr, 0, sz - 1, sz);
    print(arr, sz);
    return 0;
}
</code></pre>

<p>I have put this in <a href="http://ideone.com/ImMUH4">ideone too</a>.</p>
    </div>