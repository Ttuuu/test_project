<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I won't go down the rabbit hole of debating what constitutes a "<a href="https://stackoverflow.com/q/32731717/2943403">valid Pascal/Studly-cased string</a>" but there is <a href="https://stackoverflow.com/q/1993721/2943403">plenty of debate here</a> if you want to read about fringe cases (like acronyms and multibyte characters).  I will merely cross my fingers and hope that your project's naming convention does not wonder into tricky territory.  Either way, the post-namespace substring portion of my pattern can be easily amended to suit your input and desired output.</p>

<p>Effectively, you need to:</p>

<ol>
<li>Consume the namespace portion and omit it.  My pattern matches zero or more sequences of <code>not \\</code> then <code>\\</code>.</li>
<li>Then it matches a single uppercase letter followed by zero or more lowercase letters. (not very tricky)</li>
<li>Inside of the custom callback function, I check if there is a namespace substring matched (<code>$m[1]</code>), if not I prepend an underscore.</li>
<li>Finally, I convert the first letter of the matched classname word to lowercase and return the built string as the replacement value.</li>
</ol>

<p>PHP (<a href="https://3v4l.org/MHSrU" rel="nofollow noreferrer">Demo</a>) (<a href="https://regex101.com/r/VTiOGY/1" rel="nofollow noreferrer">Regex Pattern Demo</a>)</p>

<pre><code>const testNamespacedClasses = [
    "Namespace\To\SettingOption",
    "I\Was\Born\InTheUSAIwas",
    "Something\Onething"
];

function testSnakeCasedModelNames() {
    foreach (testNamespacedClasses as $class) {
        echo "$class =&gt; ";
        echo  preg_replace_callback(
            '~([^\\\\]*\\\\)*([A-Z][a-z]*)~',
            function($m) {
                return ($m[1] ? '' : '_') . lcfirst($m[2]);    
            },
            $class
        );
        echo "\n---\n";
    }
}

echo testSnakeCasedModelNames();
</code></pre>

<p>Output:</p>

<pre><code>Namespace\To\SettingOption =&gt; setting_option
---
I\Was\Born\InTheUSAIwas =&gt; in_the_u_s_a_iwas
---
Something\Onething =&gt; onething
---
</code></pre>

<p>Alternative snippets might look like: <a href="https://3v4l.org/lXdbd" rel="nofollow noreferrer">https://3v4l.org/lXdbd</a> or <a href="https://3v4l.org/MMFni" rel="nofollow noreferrer">https://3v4l.org/MMFni</a> or <a href="https://3v4l.org/ITjTk" rel="nofollow noreferrer">https://3v4l.org/ITjTk</a></p>

<p>To implement in your project:</p>

<pre><code>public function getSnakeCasedModelName()
{
    return preg_replace_callback(
        '~([^\\\\]*\\\\)*([A-Z][a-z]*)~',
        function($m) {
            return ($m[1] ? '' : '_') . lcfirst($m[2]);    
        },
        __CLASS__
    );
}
</code></pre>

<p>I considered using the <a href="https://stackoverflow.com/a/51286810/2943403"><code>\G</code> metacharacter</a> on this answer, but felt it overcomplicated the pattern and the desired result can be obtained without it</p>

<p>When comparing KIKO's answer versus mine, consider if "abstraction" is beneficial to your project.  It is completely plausible that it is.  On the other hand if you don't want to break the string manipulation process into its most basic parts, you can avoid the overhead of subsequent method calls. <a href="https://medium.com/@thisdotmedia/the-cost-of-premature-abstraction-b5d71ffd6400" rel="nofollow noreferrer">"Premature Abstraction" is a thing.</a>  It's an academic point, but you should consider the impacts of either approach on maintainability, testing, overhead, code size, readability, etc.  I don't mean to say that there is anything wrong with KIKO's advice -- "single responsibility" is an important principle in writing professional-grade code.</p>

<p>Finally, because I am using a <code>preg_</code> call to reformat the class string anyhow, I prefer to also use it to to remove the namespace.  There are some <a href="https://stackoverflow.com/a/27457689/2943403">benchmarks provided here</a> which include a Reflection-based technique, but those benchmarks are only half of the job that you require.</p>

<p>If you are using <code>__CLASS__</code> then I assume that you can also use <code>__NAMESPACE__</code> which means that perhaps <code>str_replace(__NAMESPACE__ . '\\', __CLASS__)</code> can be used to trim the namespace substring from the class.  Since you are using Laravel, you can use <a href="https://stackoverflow.com/a/26296283/2943403">its helper function</a>: <code>$baseClass = class_basename($className);</code>  ...then you only need to convert StudlyCase to snake_case.</p>
    </div>