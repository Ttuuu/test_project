<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>General remarks</strong></p>

<ul>
<li><code>chessBoard</code>, <code>size</code>, <code>boundary</code> and <code>noOfBacktrackCalls</code> should be non-static and private -- since the functions manipulating them are also (correctly!) non-static.</li>
<li>Naming: I suggest <code>rowOrColHasAQueen</code> instead of <code>rowAndColhasAQueen</code> (also note capitalization)</li>
<li>Pre-condition checking: at the beginning of <code>backTrackRoutine</code>, I suggest checking also that <code>col</code> and <code>row</code> do not exceed size (now you only check for strict equality). If this does happen, I would throw an exception, and not just return with false, because either the public function was called with wrong parameters, or there is a bug in the implementation (you can use <code>noOfBacktrackCalls</code> to differentiate the two cases).</li>
<li><code>flag</code> varible: in the <code>backTrackRoutine</code>, it is not needed (you can directly return the value you are assigning to it), in <code>diagonalHasAQueen</code>, I would give it a more descriptive name (e.g. <code>steps</code>)</li>
<li>I would make the implementation functions (<code>canPlace</code>, <code>rowAndColhasAQueen</code>, <code>diagonalHasAQueen</code>) private.</li>
</ul>

<p><strong>Performace</strong></p>

<p>I see one possible way of (maybe?) improving performance (in case it really matters for 9 milli seconds :) ). Namely, caching whether a given row or column has a queen. Let's look at rows (cols would be similar): you need an array of booleans, with the size of <code>size</code>, with originally all elements set to <code>false</code>. When you put a queen in row #i, you also set the element at position i to true, in the array. And set it back to false, in case the queen is removed. In this way, <code>rowAndColhasAQueen</code> does not have to iterate on the whole table, but can look up the rows/cols arrays instead. (I am not sure if there is such an optimization for diagonals as well, maybe...)</p>
    </div>