<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Let's take one function at a time, until we're all done.</p>

<p><strong>sepInt</strong></p>

<pre><code>sepInt n = if n &gt;= 10
            then  ( sepInt ( n `div` 10 ) ) ++ ((n `mod` 10):[])
            else n `mod` 10 : []
</code></pre>

<p>First things first: you'll definitely want to learn a bit about precedence! Normally I'm in favor of adding some unnecessary parentheses if it helps disambiguate a strange situation or if the operators involved aren't often mixed, but too many of them can get in the way of readability. Also, take advantage of that sweet syntactic sugar for lists that the language provides! So iteration one of this function is</p>

<pre><code>sepInt n = if n &gt;= 10
            then sepInt (n `div` 10) ++ [n `mod` 10]
            else [n `mod` 10]
</code></pre>

<p>Now, as we all know, building up a linked list by repeatedly appending to the end is a bit inefficient. Probably for such small lists as you'll be using in test cases here it won't matter, but it's a good idea to get in the habit of paying attention to some of the easiest stuff, so let's try to improve this a bit. We have a choice here: either we can keep the interface of this function as-is, that is, always output a list in the right order, or we can choose to change the interface, and change all the call-sites of this function. I think for this case we can keep the interface. The idea we'll take is to build up the list backwards, then reverse it at the very end. The name <code>go</code> is traditional for local workers.</p>

<pre><code>sepInt = reverse . go where
    go n = if n &gt;= 10
            then [n `mod` 10] ++ go (n `div` 10)
            else [n `mod` 10]
</code></pre>

<p>There's something a bit funny about this base case to me. It seems like it's not the most basic one you could choose. If we let the "loop" run one more time...</p>

<pre><code>sepInt = reverse . go where
    go n = if n &gt; 0
            then [n `mod` 10] ++ go (n `div` 10)
            else []
</code></pre>

<p>There's a few things I find more satisfying about this: our base-case input is <code>0</code>, a common base for <code>Integer</code>s; our base-case output is <code>[]</code>, a common base for <code>[]</code>s; and there's no duplicated code in the two branches of the <code>if</code>. Finally, I think I'd choose to replace the <code>if</code>-<code>then</code>-<code>else</code> with a pattern match, noting however that this function has a slightly different behavior for negative numbers. Since we were never really doing the right thing for negative numbers, this doesn't bother me too much.</p>

<pre><code>sepInt = reverse . go where
    go 0 = []
    go n = [n `mod` 10] ++ go (n `div` 10)
</code></pre>

<p>If we're feeling fancy, we can choose to use <code>divMod</code> instead of two separate calls to <code>div</code> and <code>mod</code>; and we can unroll the definition of <code>(++)</code>; but I think neither of these is terribly important. Nevertheless, they're idiomatic, so:</p>

<pre><code>sepInt = reverse . go where
    go 0 = []
    go n = let (d, m) = n `divMod` 10 in m : go d
</code></pre>

<p>Okay, let's check our work. We already know that the final thing works differently for negative numbers, so let's only check non-negative ones.</p>

<pre><code>*Main Test.QuickCheck&gt; quickCheck (\(NonNegative n) -&gt; sepInt n == sepInt' n)
*** Failed! Falsifiable (after 2 tests):  
NonNegative {getNonNegative = 0}
</code></pre>

<p>Whoa, whoops! Can you figure out which refactoring above was the culprit? =)</p>

<p>Now we have to decide whether we like the old behavior better or the new one. I think in this particular case we should like the old behavior better, since the goal is to show a number, and we'd like <code>0</code> to show up as <code>"0"</code> rather than as <code>""</code>. It's a bit ugly, but we can special-case it. Since we like our future selves, we'll leave ourselves a note about this, too.</p>

<pre><code>-- special case for a human-readable 0
sepInt 0 = [0]
sepInt n = reverse . go $ n where
    go 0 = []
    go n = let (d, m) = n `divMod` 10 in m : go d
</code></pre>

<p>Now the test passes:</p>

<pre><code>*Main Test.QuickCheck&gt; quickCheck (\(NonNegative n) -&gt; sepInt n == sepInt' n)
+++ OK, passed 100 tests.
</code></pre>

<p><strong>getStuff</strong></p>

<pre><code>getStuff (x:xs) = if isJust x || null xs
                    then fromJust x
                    else getStuff xs
</code></pre>

<p>This name sure leaves something to be desired! And it leaves another important thing to be desired, too: there's lots of inputs where it just crashes. Nasty! It turns out that you never call it on inputs of that form later, but totality is another good habit that you should get yourself into. It's just another tool in the mature programmer's defensive programming toolbelt. In our case, we'll want to handle cases like <code>[]</code>, or <code>[Nothing]</code>, or <code>[Nothing, Nothing]</code>, etc. where there's no good answer to return. What should we return if that happens?</p>

<p>One simple and quite common choice is to change our type from</p>

<pre><code>getStuff :: [Maybe a] -&gt; a
</code></pre>

<p>to</p>

<pre><code>getStuff :: [Maybe a] -&gt; Maybe a
</code></pre>

<p>but I think that's a bit short-sighted. Ignoring for the moment the inputs we know we're going to call this thing on, we've observed already that there's times when there's no good answer to return, and there's times when there <em>is</em> a good answer to return, so <code>Maybe a</code> seems like a good start, but there's also times when there are <em>two</em> good answers -- or more! So let's use a type that reflects this scenario instead:</p>

<pre><code>getStuff :: [Maybe a] -&gt; [a]
</code></pre>

<p>It's not too hard to fix up the code. First we'll just fix the type errors:</p>

<pre><code>getStuff (x:xs) = if isJust x || null xs
                   then [fromJust x]
                   else getStuff xs
</code></pre>

<p>This isn't obviously better, since it still fails in all the same situations it used to fail, and it never returns multiple answers. So we should differentiate the two cases that lead us to the <code>then</code> branch:</p>

<pre><code>getStuff (x:xs) = if isJust x
                   then fromJust x : if null xs
                         then []
                         else getStuff xs
                   else getStuff xs
</code></pre>

<p>Now, we have this <code>if null xs</code> branch primarily because <code>getStuff</code> still isn't total (it can't handle an empty input list). Instead of protecting ourselves from calling <code>getStuff</code> in this case, we should just let <code>getStuff</code> deal with empty lists correctly. So:</p>

<pre><code>getStuff [] = []
getStuff (x:xs) = if isJust x
                   then fromJust x : getStuff xs
                   else getStuff xs
</code></pre>

<p>Actually, using <code>isJust</code> and <code>fromJust</code> is also a code smell, for the same reason as the rest of the changes so far: <code>fromJust</code> is partial. Instead of protecting ourselves from calling <code>fromJust</code> on inputs it can't handle, we should write our code in a way that avoids partial functions. Here's how:</p>

<pre><code>getStuff [] = []
getStuff (Just x  : xs) = x : getStuff xs
getStuff (Nothing : xs) =     getStuff xs
</code></pre>

<p>(I've added a little creative whitespace to show parallels between the branches.) The only thing I'd change now is to pick a better name. For example, <code>catMaybes</code> might be an okay name for this. I'll mention one more thing, which is that this can also be implemented quite beautifully as a list comprehension:</p>

<pre><code>catMaybes xs = [x | Just x &lt;- xs]
</code></pre>

<p>By the way, this function is available from <code>Data.Maybe</code>.</p>

<p><strong>base10IntTOstring</strong></p>

<pre><code>base10IntTOstring num =
                 let chars = [ (1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (6, '6'), (7, '7'), (8, '8'), (9, '9'), (0, '0') ]
                     numbahs = sepInt num in
                     map getStuff ( map (\a -&gt; (map (\(x,y) -&gt; if a == x then Just y else Nothing ) chars ) ) numbahs )
</code></pre>

<p>There are better ways to construct that lookup table! For example, I might choose</p>

<pre><code>chars = zip [0..9] ['0'..'9']
</code></pre>

<p>(If you haven't seen <code>zip</code> before, I encourage you to try to code it up yourself! Then check the Report and compare answers.) Additionally, we're going to have to change things up a little, since we've changed how <code>getStuff</code> works and <code>base10IntTOstring</code> calls <code>getStuff</code>. Before, we had <code>getStuff :: [Maybe a] -&gt; a</code> and hence <code>map getStuff :: [[Maybe a]] -&gt; [a]</code>. Now, we have <code>catMaybes :: [Maybe a] -&gt; [a]</code> and hence <code>map catMaybes :: [[Maybe a]] -&gt; [[a]]</code>. Since we expect each of the lists in the output of that to be singleton lists, we can smash them all together with <code>concat</code>:</p>

<pre><code>base10IntTOstring num =
                 let chars = zip [0..9] ['0'..'9']
                     numbahs = sepInt num in
                     concat (map catMaybes ( map (\a -&gt; (map (\(x,y) -&gt; if a == x then Just y else Nothing ) chars ) ) numbahs ))
</code></pre>

<p>Actually, this whole process at the very end is quite roundabout! If you squint, it looks like what we're really trying to implement here is a little function</p>

<pre><code>lookupList :: Eq k =&gt; [(k, v)] -&gt; k -&gt; [v]
</code></pre>

<p>which we can use to index into our lookup table with the digits of our integer. So let's try to write this directly! Taking a cue from the final implementation of <code>catMaybes</code> above, we can write</p>

<pre><code>lookupList table k = [v | (k', v) &lt;- table, k == k']
</code></pre>

<p>Now our implementation can look like this:</p>

<pre><code>base10IntTOstring num =
                 let chars = zip [0..9] ['0'..'9']
                     numbahs = sepInt num in
                     concat (map (lookupList chars) numbahs)
</code></pre>

<p>In fact, there's even a function <code>concatMap</code> that squashes those two things together. Veteran Haskellers will prefer to spell this function in its infix, polymorphic form as <code>(&gt;&gt;=)</code></p>

<pre><code>base10IntTOstring num =
                 let chars = zip [0..9] ['0'..'9']
                     numbahs = sepInt num in
                     numbahs &gt;&gt;= lookupList chars
</code></pre>

<p>though this spelling is optional. In fact, everything is short enough now that I would even feel comfortable inlining the definitions:</p>

<pre><code>base10IntTOstring num = sepInt num &gt;&gt;= lookupList (zip [0..9] ['0'..'9'])
</code></pre>

<p>My only complaint now is the name, for two reasons. The first is that <code>string</code> isn't capitalized, which is inconsistent with the naming of the remainder of the file. The other one is more of a philosophical one: our input is an integer, not a base-ten integer. If anything, the base-ten-ness is being imposed on the <em>output</em>. So:</p>

<pre><code>intTOBase10String num = sepInt num &gt;&gt;= lookupList (zip [0..9] ['0'..'9'])
</code></pre>

<p>Let's test it:</p>

<pre><code>*Main Test.QuickCheck&gt; quickCheck (\n -&gt; base10IntTOstring n == intTOBase10String n)
+++ OK, passed 100 tests.
</code></pre>

<p>(By the way, a variant of <code>lookupList</code> that I have always felt has the wrong type, <code>lookup</code>, is available from <code>Prelude</code>.)</p>

<p>Finally, I would be remiss without pointing out that there are several good functions that already exist for doing conversions like this:</p>

<pre><code>*Main Test.QuickCheck&gt; let checkPosBase10 f = quickCheck (\(NonNegative n) -&gt; f n == intTOBase10String n)
*Main Test.QuickCheck&gt; checkPosBase10 show
+++ OK, passed 100 tests.
*Main Test.QuickCheck Numeric Data.Char&gt; checkPosBase10 (\n -&gt; showIntAtBase 10 intToDigit n "")
+++ OK, passed 100 tests.
</code></pre>

<p>The difference here is that <code>showIntAtBase</code> can be used for any base, and <code>show</code> is specific to base 10.</p>

<p><strong>charTOBase10Int</strong></p>

<pre><code>charTOBase10Int char =
                 let chars = [ ('1', 1), ('2', 2), ('3', 3), ('4', 4), ('5', 5), ('6', 6), ('7', 7), ('8', 8), ('9', 9), ('0', 0) ] in
                     let charslist = ( map (\(a,x) -&gt; if char == a then Just x else Nothing) chars ) in
                         getStuff charslist
</code></pre>

<p>Actually, most of the changes we made to <code>base10IntTOstring</code> can be done here, as well. In the interest of totality, we'll change the type, too; it will return a <code>[Char]</code> (which we happen to know will be a singleton list, if anything) instead of a <code>Char</code>.</p>

<pre><code>base10CharTOInt char = lookupList (zip ['0'..'9'] [0..9]) char
</code></pre>

<p>It's common in cases like this where the trailing arguments to the function you're defining are also trailing arguments to a function in the definition to omit the arguments entirely. The technical term for this is <code>eta reduction</code>, I think. Whether you choose to do this yourself is primarily a stylistic choice.</p>

<pre><code>base10CharTOInt = lookupList (zip ['0'..'9'] [0..9])
</code></pre>

<p>The test for this one is a bit complicated; since the old implementation is partial, we have to restrict ourselves to those inputs that work.</p>

<pre><code>*Main Test.QuickCheck&gt; quickCheck (\n -&gt; n &gt;= '0' &amp;&amp; n &lt;= '9' ==&gt; [charTOBase10Int n] == base10CharTOInt n)
*** Gave up! Passed only 67 tests.
</code></pre>

<p>The report here says that it passed the test, but that QuickCheck didn't run as many tests as it wanted to because most of the random inputs it generated weren't in the desired range. (In fact, perhaps it's questionable to use QuickCheck at all for this, since there's only ten inputs of interest anyway!)</p>

<p>By the way, this function (a partial version! boooo) exists also in <code>Data.Char</code>:</p>

<pre><code>*Main Test.QuickCheck Data.Char&gt; quickCheck (\n -&gt; n &gt;= '0' &amp;&amp; n &lt;= '9' ==&gt; charTOBase10Int n == digitToInt n)
*** Gave up! Passed only 54 tests.
</code></pre>

<p><strong>stringTOBase10Int</strong></p>

<pre><code>stringTOBase10Int string =
    let integers = ( map charTOBase10Int string ) in
        let multByBase i (x:xs) = if null xs
                                   then (10^i)*x
                                   else (10^i)*x + multByBase ( i-1 ) xs
        in multByBase ( (length integers)-1 ) integers
</code></pre>

<p>We first need to fix up some typing issues, since we've changed the interface to <code>base10CharTOInt</code> and this is a caller. As before, we can do that just by putting in a <code>concat</code>; as before, we'll spell the combination of <code>concat</code> and <code>map</code> as <code>(&gt;&gt;=)</code>.</p>

<pre><code>stringTOBase10Int string =
    let integers = string &gt;&gt;= base10CharTOInt in
        let multByBase i (x:xs) = if null xs
                                   then (10^i)*x
                                   else (10^i)*x + multByBase ( i-1 ) xs
        in multByBase ( (length integers)-1 ) integers
</code></pre>

<p>As with <code>sepInt</code> waaaay back at the beginning, I find the choice of base case a bit odd. Let's try the trick from before of letting the "loop" run one more iteration (and this time hopefully the refactoring isn't wrong!).</p>

<pre><code>stringTOBase10Int string =
    let integers = string &gt;&gt;= base10CharTOInt in
        let multByBase i [] = 0
            multByBase i (x:xs) = (10^i)*x + multByBase ( i-1 ) xs
        in multByBase ( (length integers)-1 ) integers
</code></pre>

<p>Also, let's eliminate unnecessary parentheses.</p>

<pre><code>stringTOBase10Int string =
    let integers = string &gt;&gt;= base10CharTOInt in
        let multByBase i [] = 0
            multByBase i (x:xs) = 10^i*x + multByBase (i-1) xs
        in multByBase (length integers-1) integers
</code></pre>

<p>Now, I wonder whether recomputing the power of ten each time is really the right thing to do. One thing we could do is to use <code>10^(length integers - 1)</code> and divide by 10 in each recursion. But division is slow, so let's take another plan: instead of computing the length of the list explicitly, let's do it implicitly by having <code>multByBase</code> also compute the appropriate power of ten.</p>

<pre><code>stringTOBase10Int string =
    let integers = string &gt;&gt;= base10CharTOInt in
        let multByBase [] = (1, 0)
            multByBase (x:xs) = let (pow, n) = multByBase xs in (pow*10, pow*x+n)
        in snd (multByBase integers)
</code></pre>

<p>This now has the magical special form of recursion that can be turned into a <code>foldr</code>. Let's do so! See if you can spot where each piece of code from the above ends up in the below.</p>

<pre><code>stringTOBase10Int string =
    let integers = string &gt;&gt;= base10CharTOInt in
    snd (foldr (\x (pow, n) -&gt; (pow*10, pow*x+n)) (1, 0) integers)
</code></pre>

<p>Personally, I often prefer <code>where</code> to <code>let</code>, and the <code>foldr</code> is complicated enough that I feel like it should be named, so I'd write it as follows. But this is an aesthetic choice that you may or may not agree with.</p>

<pre><code>stringTOBase10Int string = snd (go integers) where
    integers = string &gt;&gt;= base10CharTOInt
    go = foldr (\x (pow, n) -&gt; (pow*10, pow*x+n)) (1, 0)
</code></pre>

<p>And finally, fix up the name:</p>

<pre><code>base10StringTOInt string = snd (go integers) where
    integers = string &gt;&gt;= base10CharTOInt
    go = foldr (\x (pow, n) -&gt; (pow*10, pow*x+n)) (1, 0)
</code></pre>

<p>As usual, the tests. Since the old function was pretty partial, we'll arrange to have inputs it knows how to handle, though our new one tries to give an answer even when you feed it garbage.</p>

<pre><code>*Main Test.QuickCheck&gt; quickCheck (\(NonNegative n) -&gt; base10StringTOInt (show n) == stringTOBase10Int (show n))
+++ OK, passed 100 tests.
</code></pre>

<p>By the way, there are functions for this available, too; take a look at <code>reads</code> from <code>Prelude</code> (base-10 specific) and <code>readInt</code> from <code>Numeric</code> (pick your favorite base). I won't try to write tests here, because the types of these functions are more informative (and more correct in many ways).</p>

<p><strong>Final result</strong></p>

<p>Barring the reuse of already-written functions, here's the final versions of all the functions.</p>

<pre><code>sepInt 0 = [0]
sepInt n = reverse . go $ n where
    go 0 = []
    go n = let (d, m) = n `divMod` 10 in m : go d

lookupList table k = [v | (k', v) &lt;- table, k == k']
intTOBase10String num = sepInt num &gt;&gt;= lookupList (zip [0..9] ['0'..'9'])

base10CharTOInt = lookupList (zip ['0'..'9'] [0..9])    
base10StringTOInt string = snd (go integers) where
    integers = string &gt;&gt;= base10CharTOInt
    go = foldr (\x (pow, n) -&gt; (pow*10, pow*x+n)) (1, 0)
</code></pre>

<p>Keep at it; I look forward to many more questions from you!</p>
    </div>