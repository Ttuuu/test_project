<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Nesting functions</h2>
<p>There is nothing wrong with your approch, a few years back and I would have not said so as some browsers would parse functions within functions each time they were call, with the obvious performance hit. That is a thing of the past and functions are parsed then cached for use next time the function is called.</p>
<h2>Modules to keep global scope clean.</h2>
<p>Modern JS has modules that let you define exports and then import them as needed in other modules</p>
<p>Each module has its own top level context and thus does not add to the global scope.</p>
<p>Use the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export" rel="nofollow noreferrer"><code>export</code></a> token to define what can be imported.</p>
<p>The only way to access items in the module is via the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import" rel="nofollow noreferrer"><code>import</code></a> token, and only those items explicitly exported.</p>
<p>Modules also use strict mode by default.</p>
<p>Thus you can flatten you code without worrying about name conflicts.</p>
<p>If you create a default export in a module you can also import it under another name.</p>
<p>Example of a module, and flatting your quick sort.</p>
<pre><code>/* in file quickSort.js */
export default function sort(array) {
    quickSort(array, 0, array.length - 1);
}

function quickSort(array, start, end) {
    if (start &lt; end) {
        let pivot = partition(array, start, end);
        quickSort(array, start, pivot - 1);
        quickSort(array, pivot + 1, end);
    }
}

function partition(array, left, right) {
    let pivot = array[right];
    let i = left - 1;
    for (var j = left; j &lt; right; j++) {
        if (array[j] &lt;= pivot) {
            i++;
            let temp = array[j];
            array[j] = array[i];
            array[i] = temp;
        }
    }
    let temp = array[i + 1];
    array[i + 1] = array[right];
    array[right] = temp;
    return i + 1;
}
</code></pre>
<p>To access it from another module</p>
<pre><code>import sort from "quickSort";
sort([4,3,6,3,7,8]);
</code></pre>
<p>Or use another name, but only for the default export.</p>
<pre><code>import qSort from "quickSort";
qSort([4,3,6,3,7,8]);
</code></pre>
<p><strong>Note</strong> that modules must be in files for both <code>export</code> code and <code>import</code> code, and the script element must be of type "module" eg <code>&lt;script type="module" src="quickSort.js"&gt;&lt;/script&gt;</code></p>
<p>Also as a convention not a requirement modules have the extension <code>.mjs</code> rather than <code>.js</code> and some will use <code>.es.mjs</code>. They all have the same MIME type <code>text/javascript</code></p>
<h2>Singleton</h2>
<p>Before modules it was common to use the singleton (AKA immediately invoked function) to reduce or completely eliminate any intrusion to the global scope.</p>
<p>Example of a singleton</p>
<pre><code>const sort = (() =&gt; {
    function sort(array) {
        quickSort(array, 0, array.length - 1);
    }

    function quickSort(array, start, end) {
        if (start &lt; end) {
            let pivot = partition(array, start, end);
            quickSort(array, start, pivot - 1);
            quickSort(array, pivot + 1, end);
        }
    }

    function partition(array, left, right) {
        let pivot = array[right];
        let i = left - 1;
        for (var j = left; j &lt; right; j++) {
            if (array[j] &lt;= pivot) {
                i++;
                let temp = array[j];
                array[j] = array[i];
                array[i] = temp;
            }
        }
        let temp = array[i + 1];
        array[i + 1] = array[right];
        array[right] = temp;
        return i + 1;
    }
    
    return sort;
})();

sort([4,3,6,3,7,8]);
</code></pre>
    </div>