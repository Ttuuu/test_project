<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>So it seams like you have a Pandas dataframe you are working with.
At the moment it looks like this section of code does the following</p>

<pre><code>worldCases = []                   

for i in range(0,len(dd)):               #iterate through all dates
    count = 0                            #setup a counter
    for j in range(0,len(dd)):           #iterate through all dates
        if dd[j]==dd[i]:                 
            count+=dc[i]                 #add one to counter if inner date == outer date
    worldCases.append(count)             #track number of times a unique date occurs
</code></pre>

<p>You are effectively binning your data, getting a count of the number of times each unique date occurs. Pandas offers you more efficient and convenient tools for doing this. Specifically look into the <a href="https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.groupby.html?highlight=groupby#pandas.DataFrame.groupby" rel="nofollow noreferrer">groupby</a> method. </p>

<p>A much faster way to get the same output for <code>worldCases</code> would be to do the following:</p>

<pre><code># group the daily cases data by the date and then compute 
# the sum of cases within each date group

dc = 'Daily confirmed cases (cases)'
worldCases = cases.loc[:, dc].groupby(cases['Date']).sum()
</code></pre>

<p>Also, if you find yourself writing lots of loops like the above, you may want to check out the <a href="https://pandas.pydata.org/pandas-docs/stable/user_guide/groupby.html" rel="nofollow noreferrer">user guide for "group by" operations in the pandas documentation.</a> It is a very powerful way of handling situations like this, and more, but can take a bit of getting used to. It can feel like a whole different way of thinking about your data.</p>
    </div>