<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>In addition to the other reviews:</p>

<p><strong>Bad practice</strong></p>

<ul>
<li><p>(major issue) Replacing if-else statements with the ternary operator does not lead to better performance! There is no relation between the number of source code lines and program performance. A single line of may result in hundreds of
machine instructions, while a whole function may result in a single
machine instruction. All that matters for performance is what the code is actually doing.</p>

<p>So all you achieved by tossing in <code>?:</code> all over the place is severely reduced readability, as been pointed out in other answers. This <code>?:</code> readability problem is by far the most serious issue in your code - such "magic one-liners" would never pass any professional review.</p>

<p>In general, stay away from the ternary operator - it has very limited uses and comes with the <a href="https://stackoverflow.com/questions/12837631/signed-unsigned-mismatch-when-comparing-two-unsigned-values-using-a-conditional/12838204#12838204">quirk of invoking implicit conversions on the operands</a>. </p>

<p>There are a few valid uses of <code>?:</code>: conditional variable initialization, emulating function wrappers with function-like macros, making repetitive, simple code more compact etc. But all of these are specialized cases.</p></li>
<li><p>Never use the <code>strncpy</code> function, it is dangerous and should be avoided. See <a href="https://stackoverflow.com/questions/869883/why-is-strncpy-insecure">Why is strncpy insecure?</a> and <a href="https://stackoverflow.com/questions/2114896/why-are-strlcpy-and-strlcat-considered-insecure">Why are strlcpy and strlcat considered insecure?</a>. Instead, check the size of the data to copy (to avoid buffer overruns), followed by a call to <code>strcpy()</code>. Alternatively use <code>memcpy()</code> and manually terminate the string.</p></li>
<li><p>(major issue) Using the <code>short</code> type is almost never correct practice. The use of it in your code is fishy, I assume it is to save memory? Be aware that using small integer types opens up the can of worms that is <a href="https://stackoverflow.com/questions/46073295/implicit-type-promotion-rules">implicit integer promotion</a>. Therefore it is always best to avoid small integer types unless your system is very resource-restrained, such as a small, bare-metal microcontroller applications.</p>

<p>If you wish to save memory, you should use a type such as <code>int_least16_t</code> instead. Most often it makes more sense to optimize for speed though, using <code>int_fast16_t</code>. (Though note that these could also be subject to implicit promotion!) In general, the types in <code>stdint.h</code> are to prefer over the native integer data types.</p></li>
<li><p>Mixing the <code>++</code> and <code>--</code> operators with other operators in the same expression is bad practice, since this opens up the potential for all manner of poorly-defined behavior bugs. In addition, it tends to make the code less readable.</p></li>
<li><p>Keep tables of strings that aren't modified by the program <code>const</code>, for example <code>const char *suffix = ...</code>. In general, whenever you have a pointer to a string literal (or an array of such pointers) it should always be <code>const</code>-qualified. This is to avoid undefined behavior in case the data is accidentally or intentionally modified.</p>

<p>Look-up tables declared at file scope ("globals") should in addition to <code>const</code> be declared as <code>static</code>, so that you don't clutter up the global namespace.</p></li>
</ul>

<p><strong>Standard compliance</strong></p>

<ul>
<li><p>(minor issue) The form <code>int main()</code> is obsolete and may not work in future versions of the C language. Instead, use <code>int main (void)</code>.</p></li>
<li><p>The return type from <code>strlen()</code> is <code>size_t</code> not <code>short</code>. Your compiler should have told you this. Make sure you have warnings enabled for such implicit type conversions (for example <code>gcc -Wconversion</code>), to avoid all manner of subtle bugs.</p></li>
</ul>

<p><strong>Program design</strong></p>

<ul>
<li><p>Avoid the use of <code>continue</code>. The presence of this keyword is almost always a certain sign of a badly written loop that should be rewritten in more readable ways. <code>continue</code> is also often abused for spaghetti programming.</p>

<p>As already pointed out, your eternal for loop isn't the best idea. You should replace this loop and all the continue/returns, perhaps with something like this:</p>

<pre><code>func_status_t status = OK; // some custom result type, enum

while(status == OK)
{
  status = do_stuff(); // all the code goes into this function
}

cleanup(); // free memory etc

if(status == SOMETHING)
{
  return WHATEVER;
}
...
return 0;
</code></pre></li>
</ul>

<p><strong>Bugs</strong></p>

<ul>
<li><p>In case something goes wrong, you return from the program without calling <code>free()</code> and doing clean-up. Yes, the OS will do that in most cases, that's not the issue. You should still consider this as a bug, for one important reason:</p>

<p>If your code contains any form of heap memory corruption bug or dangling pointers - fairly common bugs that could be caused by pretty much anything - your program will likely crash upon calling <code>free()</code>. This is a good thing, because it means you'll get a head's up of those potentially dormant bugs early on, preventing them from getting into the production code.</p></li>
<li><p>You should initialize <code>date_string</code> to <code>NULL</code> so that even if <code>calloc</code> fails, you can pass the pointer to <code>free()</code>. Passing NULL to <code>free()</code> is well-defined to do nothing.</p></li>
</ul>

<p><strong>Coding style</strong></p>

<ul>
<li><p>(minor issue) Any reason why your brace placement style is different for functions and statements? This is inconsistent. Pick one style and stick to it, don't mix two different styles.</p></li>
<li><p>(minor issue) Inconsistent indention. Whenever you write an initializer list, you use different indention. Instead, use your standard indention width for these as well - in your case 4 spaces:</p>

<pre><code>const char *months[] = {
    NULL,
    "January",
    "February",
    ...
};
</code></pre></li>
</ul>
    </div>