<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>How could I make it look more like APL (and less like Python)?</p>
</blockquote>

<p>Assuming you mean "in a more functional and less imperative way" by this line,</p>

<h2>I don't think you can largely achieve that, for a good reason.</h2>

<p>Basically, the array-based heap (and other common algorithms you see on algorithm textbooks) is designed for imperative languages. Translating it into a language <em>whose main strength isn't imperative</em> makes the code feel awkward and unfitting. It may also lead to code whose time complexity is actually worse than designed. <a href="https://stackoverflow.com/a/958588/4595904">See how it looks like when a similar algorithm is written in Haskell.</a></p>

<p>APL is not 100% functional, but definitely is more functional than imperative (especially when you mainly use dfns). If you want, search for "functional algorithms" and try implementing those. In the case of a heap, <a href="https://en.wikipedia.org/wiki/Leftist_tree" rel="nofollow noreferrer">leftist tree</a> isn't too complex, and supports one more <span class="math-container">\$O(\log n)\$</span> operation (heap merge) compared to an imperative binary heap. You can check out a <a href="http://typeocaml.com/2015/03/12/heap-leftist-tree/" rel="nofollow noreferrer">nice illustration</a> too.</p>

<h2>But you can still improve some parts of the code.</h2>

<h3>Improvement in the algorithm</h3>

<ul>
<li>Use <code>⎕IO←1</code> instead.</li>
</ul>

<p>Array-based heap uses 0-based indexing by default, so the parent-child relationship is slightly awkward:</p>

<p><span class="math-container">$$
\begin{align}
\text{left child}&amp;=1+2\times\text{parent} \\
\text{right child}&amp;=2+2\times\text{parent} \\
\text{parent}&amp;=\Bigl\lfloor \frac{\text{child} - 1}2 \Bigr\rfloor
\end{align}
$$</span></p>

<p>If you use 1-based indexing instead, it becomes slightly cleaner:</p>

<p><span class="math-container">$$
\begin{align}
\text{left child}&amp;=2\times\text{parent} \\
\text{right child}&amp;=1+2\times\text{parent} \\
\text{parent}&amp;=\Bigl\lfloor \frac{\text{child}}2 \Bigr\rfloor
\end{align}
$$</span></p>

<p>I don't have other better ideas to utilize the strengths of APL, due to the underlying algorithm being purely imperative.</p>

<h3>General tips for writing APL code</h3>

<ul>
<li>Let the right argument of dyadic functions be the primary one (i.e. the heap).</li>
<li>If you see a negation of a comparison (e.g. <code>~heap[chp]&lt;heap[rpos]</code>), use a single equivalent function (e.g. <code>heap[chp]≥heap[rpos]</code>).</li>
<li>Prefer concatenation (e.g. <code>0,≢⍺</code>) over stranding (e.g. <code>0(≢⍺)</code>) when you concatenate two scalars.</li>
<li>Try not to modify existing variable's contents (e.g. avoid <code>chp←((rpos&lt;≢heap)∧~heap[chp]&lt;heap[rpos])⊃chp rpos</code> which refers to <code>chp</code> and then modifies it) when it isn't essential in implementing the algorithm. Try to choose a separate and meaningful name instead.</li>
<li>Parenthesize stranding assignments (e.g. <code>(start pos)←⍵</code> instead of <code>start pos←⍵</code>).</li>
<li>Consider following a <a href="https://codereview.stackexchange.com/a/239843/182436">naming convention</a>, and a little more descriptive names. (e.g. I can't easily see what <code>chp</code> stands for.)</li>
<li>Consider adding comments to each function which briefly describe the input(s) and the output.</li>
</ul>
    </div>