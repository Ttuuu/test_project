<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First of all, it's really a bad idea to change the value of the input parameter when this change has an outer effect in some other place in your code.</p>

<p>Also, You can get rid of recursive function calls, that makes your code so much faster.
So let's start from <code>cut_rod_helper</code> function:</p>

<pre><code>def cut_rod_helper(p, n, r, s):
    q = 0
    for i in range(1, n + 1):
        temp = p[i] + r[n - i]
        if q &lt; temp:
            q = temp
            s[n] = i
    return q
</code></pre>

<p>I removed comments for more clear view here. But it's good to have them in your code.</p>

<p>What I did here is removing recursion. I removed first <code>if</code> statement from your code because we don't do recursive call and don't need end of recursion statement. As you can see at the middle of the function, we get <code>r</code> value from that list directly.</p>

<p>Second change here is I removed second <code>if</code> statement in your code because we don't need this (At least when we only have prices more than zero). Fewer conditions mean better code. Because with fewer <code>if</code> and <code>else</code>, the code is more straightforward and less error-prone. Also in many cases, the if-less code is faster. So always try to minimize the number of <code>if</code> conditions in your code.</p>

<p>We can simply set <code>q</code> value to zero initially. If <code>n</code> be 0, range of <code>for</code> loop will be <code>(1,1)</code>, when start and stop values of a <code>for</code> loop are same, that <code>for</code> will not execute. So you don't need to consider a different condition for that.</p>

<p>And the biggest trick is in the third line of the function. We really don't need recursive call. If we start calling helper function from <code>0</code> to <code>n</code> index of <code>r</code>, we always have previous values in the <code>r</code> and we can access them directly.</p>

<p>Now let's go to the primary function:</p>

<pre><code>def cut_rod(p, n):
    r = [-1]*(n + 1)
    s = [-1]*(n + 1)
    r[0] = 0
    for i in range(1, n + 1):
        r[i] = cut_rod_hezerolper(p, i, r, s)
    return r, s
</code></pre>

<p>We have only two changes here. First, I have been set index 0 of <code>r</code> to zero. It's our initial state and is clear from problem description. length = 0 so price = 0!</p>

<p>Then, for avoiding the change of input parameters, We are looping through the <code>r</code> and set value of each index of it. Because for calculating <code>i</code>th value of <code>r</code>, we only need access to <code>i - 1</code> values of it, and we have been set initial value <code>r[0]</code> and start our loop from <code>i = 1</code>, now our code works without any problem.</p>

<p>I did not a full performance test, but with few tries, the second version is about 3 times faster than the first version of your code.</p>

<p>In the end, I did not change variable names, because I think that may distract you. But I think you should change your variable names. <code>s</code>, <code>r</code>, <code>q</code> and ... are meaningless. If a variable is a list contains prices, you should name it something like <code>prices_list</code>. If you do that, you don't need many lines of those comments and everyone can find out what you did in your code at first glance. Spending some seconds on naming things in programming, saving minutes and hours later.</p>

<p>I hope this helps you.</p>
    </div>