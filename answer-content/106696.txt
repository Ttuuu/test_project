<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Alright, let's go through everything that is wrong with this code...</p>

<pre><code>public class Person extends Test
</code></pre>

<p>^ A person is not a test. ^</p>

<pre><code>// Variables

            String name;
</code></pre>

<p>^ Too much vertical white space. ^</p>

<pre><code>        String name;
        int age;
        String address;

        // Default Constructor

        Person()
        {
            name = "";
            age = 0;
            address = "";
        }
</code></pre>

<p>^ Very verbose. You can set the default values at the site of variable declaration and leave the default constructor empty. ^</p>

<pre><code>        String name;
        int age;
        String address;
</code></pre>

<p>^ You didn't specify that these member variables are private. They are public by default (which is unacceptable except for final values). ^</p>

<pre><code>        public void display()
        {

            System.out.println("Name = "+ name);
            System.out.println("Age = "+ age);
            System.out.println("address = "+ address);



        }
</code></pre>

<p>^ Waaaaay too much vertical whitespace. ^</p>

<pre><code>int studentNum, semester;
</code></pre>

<p>^ Avoid declaring multiple variables on one line in Java. It hampers readability and promotes using the same modifiers for all your variables when in reality they should be different (ex. final, volatile, etc). ^</p>

<pre><code>public void setAge(int age)
{
    this.age = age;
}
</code></pre>

<p>^ The whole point of not accessing variables directly is to be able to control how they are modified. In this case, it doesn't make sense to change your age to any integer. You probably want to get rid of the setter and instead use a method that increments your age (assuming that your age can't ever go down). At the very least check to make sure that your age isn't negative.</p>

<pre><code>void Display() // Method Overriding
{



}
</code></pre>

<p>^ Don't leave a comment saying "// Method Overriding"". Instead, on the above line, write "@Override" (without the quotation marks). ^</p>

<pre><code>public class Course extends Student
</code></pre>

<p>^ BIG HUGE TERRIBLE MISTAKE. NEVER EVER EVER EVER USE INHERITANCE THIS WAY. A course is not a specific type of student. Student has an instance of course. Student has an array of courses and student should be able to add and drop courses from the array.^</p>

<pre><code>public class Test  implements StudentFees
</code></pre>

<p>You're using inheritance wrong. Every time you use inheritance, ask yourself "is type X a subclassification of type Y".</p>

<p>Example:</p>

<pre><code>public class Dog extends Animal
</code></pre>

<p>Is type dog a sub-classification of type animal? Are all dogs animals? Yes. Good. We are using inheritance the right way.</p>

<p>Now try this:</p>

<pre><code>public class Fish extends Bird
</code></pre>

<p>Is type fish a sub-classification of type bird? Are all fishes birds? No. Bad. We are using inheritance the wrong way.</p>
    </div>