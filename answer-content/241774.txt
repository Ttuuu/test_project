<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<pre><code>def start():
</code></pre>

<p>I'd call this function <code>main</code> as that's what it is generally called.</p>

<pre><code>if mode == 'encrypt':
    encryptMode()
elif mode == 'decrypt':
    decryptMode()
</code></pre>

<p>Why not call this <code>encrypt</code> and <code>decrypt</code>? The methods to actually perform the encryption / decryption after all; you're not <em>setting</em> a mode.</p>

<pre><code>alphaPlaintextFileObj = open(argv[3])
</code></pre>

<p>It seems to me that file handling can be perfectly split from the <code>encrypt</code> function, <em>especially</em> if you read in all the data before encryption happens anyway.</p>

<pre><code>ordinalPlaintext = []
</code></pre>

<p>Why would you first convert the entire plaintext / ciphertext to ordinals? This can be done on a per-character base, preferably using a separate method. Then it also becomes easier to skip space and such, which you now have to handle twice. </p>

<p>Conversion to ordinals - or more precisely, indices within the Vigenere alphabet - is of course exactly what is needed, so that's OK.</p>

<pre><code>o = ord(c) - 65
</code></pre>

<p>65 is an unexplained magic number, why not use <code>ord('a')</code> instead or use a constant with that value?</p>

<pre><code>n = ord(c) - 96
</code></pre>

<p>Why is <code>A</code> a 1? What about <code>Z</code> in that case? And why do we suddenly use the uppercase character set?</p>

<pre><code>for k, p in zip(cycle(ordinalKey), ordinalPlaintext):
</code></pre>

<p>Now this I like, it is very clear what is done here, and it is good use of Python specific functionality.</p>

<pre><code>c = (k + p) % 25
</code></pre>

<p>Wrong! You always perform a modular calculation with the same size as the alphabet. This might work as well (if you forget about the <code>Z</code>) but it's not Vigenere as it was written down a long time ago.</p>

<pre><code>alphaPlaintextFileObj.close()
</code></pre>

<p>Always close files as soon as they are not necessary any more. You already read all of the plaintext, no need to keep that file handle around.</p>

<hr>

<p>What I'm missing is validation that the contents of the plaintext consist of characters that are out of range, and a way of handling those. The same thing goes for the key, which should consist of all uppercase characters, but lowercase characters are used without issue.</p>

<hr>

<p>Furthermore, if you take a good look, then decryption is the same as encryption, except for <code>p = (c - k) % 25</code> and - of course - the file handling. Now the file reading and writing should not be in either method, so let's exclude that. That leaves us with that single assignment / expression. Of that, only the <code>-</code> sign is really different.</p>

<p>This is why most people will write a single "private" <code>_crypt</code> method that simply takes an integer of <code>1</code> for encryption and <code>-1</code> for decryption. Then the expression becomes <code>(charIndex + direction * keyIndex) % alphabetSize</code>.</p>

<p>Currently you are violating the "DRY principle": don't repeat yourself.</p>
    </div>