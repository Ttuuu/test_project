<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><sub>Note- the review below only pertains to the code in the post. "<em>Code that's not included can not be reviewed.</em>"<sup><a href="https://codereview.meta.stackexchange.com/a/10503/120114">1</a></sup></sub></p>
<p>Overall I would say this code is well-written. Variables are declared with <code>const</code> and <code>let</code> appropriately. It has good documentation - especially for each method- although example usage is tough to find. One possible change you could consider is using <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function" rel="nofollow noreferrer"><code>async</code> functions</a>.</p>
<p>I haven't used generators much but do believe they can be quite useful. I am intrigued by the application in certain functions - e.g. the shuffle method. Does it make sense to use an iterator to handle things like shuffling?</p>
<p>The shuffle method is already somewhat optimized by looping from the end of the array to the front:</p>
<blockquote>
<pre><code>for (let i = this.length - 1; i &gt; 0; i--) {
</code></pre>
</blockquote>
<p>The same can be achieved by moving the decrement operator to the <em>while</em> condition, and starting <code>i</code> at <code>this.length</code>:</p>
<pre><code>for (let i = this.length; i--; ) {
</code></pre>
<p>I noticed sometimes <code>j</code> can be equal to <code>i</code> - especially as <code>i</code> approaches zero. Does it still make sense to call the swap method when those are equal?</p>
<hr>
<p>The constructor for <code>AbstractSortArray</code> throws an error if the base constructor is called, and then if <code>interrupt</code> is not a function throws an error.</p>
<pre><code>constructor (interrupt = () =&gt; {}) {
super()

if (this.constructor === AbstractSortArray) {
  throw new TypeError('Illegal constructor')
}

if (typeof interrupt === 'function') {
  this.set('interrupt', interrupt)
} else {
  throw new TypeError('interrupt must be a function')
}
</code></pre>
<p>The <code>else</code> keyword can be avoided by checking if the typeof <code>interrupt</code> isn't a function first:</p>
<pre><code>if (typeof interrupt !== 'function') {
  throw new TypeError('interrupt must be a function')
}
this.set('interrupt', interrupt)
</code></pre>
<hr>
    </div>