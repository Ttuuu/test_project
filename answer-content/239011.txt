<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Bug</h1>

<p><code>adjust_volume(0)</code> presently results in:</p>

<blockquote>
  <p>UnboundLocalError: local variable 'bid_volume' referenced before assignment</p>
</blockquote>

<p>since <code>if position_size == 0:</code> is currently indented inside the <code>elif position_size &lt; 0:</code> statement, so is unreachable.  (This could be a result of poor formatting when copying the code into the question post.)</p>

<h1>Possible Bug</h1>

<p>Some volume calculations result in negative volumes.  (<code>adjust_volume(99)</code> gives <code>bid_volume == -8</code>, and <code>adjust_volume(-99)</code> gives <code>ask_volume == -14</code>, which seem like invalid results.)</p>

<h1>Possible Bug</h1>

<p>If <code>adjust_volume()</code> is given an argument &gt;= 100 or &lt;= -100, it also fails with an <code>UnboundLocalError</code>.  Limits should be checked and a <code>ValueError</code> be raised instead.</p>

<blockquote>
  <p>This trading system strictly cannot exceed a position limit of 100 in either direction, so our order volumes need to never exceed 100 when combined with the absolute value of <code>current position</code>.</p>
</blockquote>

<p>100 does not exceed 100, so it is likely the original implementation should have allowed <code>+100</code> and <code>-100</code> as well.  But these currently result in <code>UnboundLocalError</code>.</p>

<h1>Chained comparisons</h1>

<p>I have to say, this condition makes my brain hurt:</p>

<pre><code>    elif position_size &lt;= -65 and position_size &gt; -82:
</code></pre>

<p>It took me several moments to unwind what the range was, and I had to triple check that I got it right.  It would be much clearer to express as:</p>

<pre><code>    elif -82 &lt; position_size and position_size &lt;= -65:
</code></pre>

<p>or using the chaining comparison operations:</p>

<pre><code>    elif -82 &lt; position_size &lt;= -65:
</code></pre>

<h1>Bisect</h1>

<p>You have 9 ranges:</p>

<ul>
<li>-100 &lt; position_size &lt;= -82</li>
<li>-82 &lt; position_size &lt;= -65</li>
<li>-65 &lt; position_size &lt;= -45</li>
<li>-45 &lt; position_size &lt; 0</li>
<li>0 &lt;= position_size &lt;= 0</li>
<li>0 &lt; position_size &lt; 45</li>
<li>45 &lt;= position_size &lt; 65</li>
<li>65 &lt;= position_size &lt; 82</li>
<li>82 &lt;= position_size &lt; 100</li>
</ul>

<p>Instead of using a tree of <code>if</code>-<code>elif</code>-<code>else</code> statements to locate the correct range, you could <code>bisect</code> the list <code>-81, -64, -44, 0, 1, 45, 65, 82</code> to determine the correct range bucket.</p>

<p><em>Note</em>: Negative bucket limits have been increased by 1 to account for the difference in whether the lower limit or the upper limit is included as <code>position_size</code> goes from negative values to positive values.</p>

<pre><code>from bisect import bisect

POSITION = (-81, -64, -44, 0, 1, 45, 65, 82,)
BID_ASK = (
    (75, 85), # -100 &lt; pos &lt;= -82
    (50, 82), # -82 &lt; pos &lt;= -65
    (50, 65), # -65 &lt; pos &lt;= -45
    (10, 45), # -45 &lt; pos &lt; 0
    (30, 30), # 0 &lt;= pos &lt;= 0
    (45, 50), # 0 &lt; pos &lt; 45
    (65, 50), # 45 &lt;= pos &lt; 65
    (82, 50), # 65 &lt;= pos &lt; 82
    (91, 85), # 82 &lt;= pos &lt; 100
)

def adjust_volume(position_size):

    if not(-100 &lt; position_size &lt; 100):
        raise ValueError("position size out of range")

    bucket = bisect(POSITION, position_size)

    bid_volume, ask_volume = BID_ASK[bucket]
    if position &gt;= 0:
        bid_volume -= position_size
    else:
        ask_volume -= abs(position_size)

    return position_size, bid_volume, ask_volume
</code></pre>
    </div>