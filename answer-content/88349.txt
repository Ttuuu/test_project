<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Aside from the issue of <code>setInterval</code>s resolution/accuracy there's a lot of room for improvement in your angular.</p>

<pre><code>angular.module('app', []);
</code></pre>

<p>"app" isn't a good name for your module "fruitjs.timer" would be better as it is more descriptive and has a much lower chance of naming clashes.</p>

<hr>

<pre><code>app.controller('main', function($scope, $interval) {
</code></pre>

<p>Again "main" isn't a great name for your controller "timerController" would be more explicit.</p>

<hr>

<p>You should also utilise angular's support for safe minification:</p>

<pre><code>app.controller('main', ['$scope', '$interval', function($scope, $interval) {
    // code
}]);
</code></pre>

<p>Notice that the second parameter is now an array declaring the names of the services/modules you require and finally your controller function (this is the recommended way).</p>

<hr>

<p>More bad naming <code>clickme</code>, <code>foo</code>, <code>startfun</code> - none of these names mean anything.</p>

<hr>

<p><code>$scope.status</code> isn't the status at all - it's the potential action.</p>

<hr>

<p>You don't need the <code>clickme</code> variable (which should at least be camel cased to <code>clickMe</code>). You have 2 potential actions <code>"Start"</code> and <code>"Stop"</code> - you don't need the additional boolean to track what state you're currently in.</p>

<hr>

<p>Use either 2 or 4 spaces for your indentation - don't mix and match.</p>

<hr>

<p>You don't change the label after you stop the timer.</p>

<hr>

<p><strong>Code with above changes</strong></p>

<pre><code>var app = angular.module('fruitjs.timer', []);
app.controller('timerController', [ '$scope', '$interval', function($scope, $interval) {
    var interval, incrementTimer, actions;
    actions = { start: "Start", stop: "Stop" };

    $scope.timer = 0;
    $scope.action = actions.start;

    incrementTimer = function() {
        $scope.timer += 1;
    };

    $scope.toggle = function() {
        if ($scope.action === actions.start) {
            $scope.action = actions.stop;
            interval = $interval(incrementTimer, 1000);

        } else if ($scope.action === actions.stop) {
            $scope.action = actions.start;
            $interval.cancel(interval);
        }
    };

    $scope.reset = function () {
        $interval.cancel(interval);
        $scope.timer = 0;
        $scope.action = actions.start;
    };
}]);
</code></pre>

<hr>

<p>All you need to do now is solve the problem of keeping time accurately :)</p>
    </div>