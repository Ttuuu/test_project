<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your method visits mosts nodes <em>twice:</em> Here</p>

<pre><code>int leftDiameter = DiameterOfBinaryTree(root.left);
int rightDiameter = DiameterOfBinaryTree(root.right);

int leftHeight = Height(root.left);
int rightHeight = Height(root.right);
</code></pre>

<p>calling <code>DiameterOfBinaryTree</code> on the left and right subtree determines the height of both subtrees, and then calling <code>Height</code> on the subtrees computes those heights again.</p>

<p>This can be improved by defining a helper function which (recursively) computes <em>both</em> height and diameter of a tree rooted at a node:</p>

<pre><code>private (int height, int diam) HeightAndDiameter(TreeNode root)
{
    if (root == null)
    {
        return (0, 0);
    }

    var (leftHeight, leftDiam) = HeightAndDiameter(root.left);
    var (rightHeight, rightDiam) = HeightAndDiameter(root.right);

    return (Math.Max(leftHeight, rightHeight) + 1,
            Math.Max(Math.Max(leftDiam, rightDiam), leftHeight + rightHeight));
}
</code></pre>

<p>C# <em>(named) tuples</em> are used here to return both values to the caller. The main function then becomes</p>

<pre><code>public int DiameterOfBinaryTree(TreeNode root)
{
    return HeightAndDiameter(root).diam;
}
</code></pre>

<p>Each node is visited exactly once now.</p>
    </div>