<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<pre><code>num_lst = list(range(len(nums)))

for indx, num in enumerate(num_lst):
</code></pre>

<p>I'm not sure if I'm missing something, but I think not. I ran this code</p>

<pre><code>nums = [2,5,7,9]
num_lst = list(range(len(nums)))
list(enumerate(num_lst))

output : [(0, 0), (1, 1), (2, 2), (3, 3)]
</code></pre>

<p>So why do you create the list and then enumerate it? Maybe what you want to do is simply : <code>enumerate(nums)</code> then <code>enumerate(nums[index+1:])</code> on your other loop? A simpler way would be to only use the ranges, as I'll show below.</p>

<p>Also, given your input, there's a possibility that a single number would be higher than the target, in this case you shouldn't make the second iteration.</p>

<p>You also don't need the <code>else: continue</code> , as it's going to <code>continue</code> either way.</p>

<p>I'd end up with : </p>

<pre><code>def twoSum(nums, target):
    """
    :type nums: List[int]
    :type target: int
    :rtype: List[int]
    """

    for i1 in range(len(nums)):
        if nums[i1] &gt; target:
            continue

        for i2 in range(i1 + 1, len(nums)):
            if nums[i1] + nums[i2] == target:
                return [i1, i2]

    return None
</code></pre>

<p>Without knowing the expected input size, it's hard to focus on performance improvements. The main goal of my review was to remove what seemed like a misunderstanding in your code and in my opinion the code is clearer now.</p>
    </div>