<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>We are using regular expressions to recognise the valid message but then manually extracting the values.</p>

<p>If we change the regex pattern to <code>^s:([^;]+);r:([^;]+);m--\"([\\w\\s]+)\"$</code> we can use the groups with the regex (the parentheses indicate the groups)</p>

<ul>
<li>The sender is match.Groups[1].Value</li>
<li>The receiver is match.Groups[2].Value</li>
<li>The message is match.Groups[3].Value</li>
</ul>

<p>We can be a bit fancier if desired and use named groups <code>^s:(?&lt;sender&gt;[^;]+);r:(?&lt;receiver&gt;[^;]+);m--\"(?&lt;message&gt;[\\w\\s]+)\"$</code></p>

<ul>
<li>The sender is match.Groups["sender"].Value</li>
<li>The receiver is match.Groups["receiver"].Value</li>
<li>The message is match.Groups["message"].Value</li>
</ul>

<p>We can simplify things an amount by placing all the active code in the validation/parsing piece and using the <code>MessageInfo</code>  so hold the results.
If we ever need to make changes, we now have them all localized to <code>ProcessLine</code> not split between <code>CoreAction/lineSplitter</code> and the <code>MessageInfo</code> class</p>

<p><strong>e.g.</strong></p>

<pre><code>private class MessageInfo
{
    public MessageInfo(string sender, string receiver, string message, int score)
    {
        Sender = sender;
        Receiver = receiver;
        Message = message;
        Score = score;
    }
    public string Sender { get; }
    public string Receiver { get; }
    public string Message { get; }
    public int Score { get; }
}



static void Main(string[] args)
{
    var count = int.Parse(System.Console.ReadLine());
    var total = 0;
    for(var index = 0; index &lt; count; index++)
    {
        var info = ProcessLine(System.Console.ReadLine());
        if (info == null) continue;
        total += info.Score;
        System.Console.WriteLine($@"{info.Sender} says ""{info.Message}"" to {info.Receiver}");
    }
    System.Console.WriteLine($"Total data transferred: {total}MB");

}

private const string Pattern = @"^s:(?&lt;sender&gt;[^;]+);r:(?&lt;receiver&gt;[^;]+);m--""(?&lt;message&gt;[\w\s]+)""$";
private readonly static Regex Regex = new Regex(Pattern);

private static MessageInfo ProcessLine(string line)
{
    var match = Regex.Match(line);
    if (!match.Success) return null;

    var score = 0;
    var sender = CleanName(match.Groups["sender"].Value, ref score);
    var receiver = CleanName(match.Groups["receiver"].Value, ref score);

    return new MessageInfo(sender, receiver, match.Groups["message"].Value, score);
}

private static string CleanName(string input, ref int score)
{
    var builder = new StringBuilder();
    foreach (var ch in input)
    {
        if (char.IsDigit(ch))
        {
            score += ch - '0';
            continue;
        }
        if (char.IsLetter(ch) || ch == ' ')
        {
            builder.Append(ch);
        }
    }
    return builder.ToString();
}
</code></pre>
    </div>