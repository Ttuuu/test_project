<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The code is a bit confusing due to the large number of really short variable names, though those might match the equations in the paper you linked, I haven't looked. I would use longer, more descriptive variable names (those will also allow you to reduce the number of comments, which can only get out of synch when changing the code). Other than that, I think it's straight-forward and easy to follow.</p>

<p>In regards to performance, I don't immediately see any huge gains to be had. It might be possible to vectorize some operations, but the opportunities are not immediate obvious. The number 1 thing you can do to find out how to improve your speed is to profile your code. MATLAB has a built-in profiler, see <a href="https://www.mathworks.com/help/matlab/ref/profile.html" rel="nofollow noreferrer">here</a>.</p>

<p>Here are a few things that can be simplified:</p>

<hr>

<pre class="lang-matlab prettyprint-override"><code>    for nd = 1:ndata
        iX{nd} = and(kBinBeg&lt;=Xloc{nd},Xloc{nd}&lt;=kBinEnd); % Data in bins
        iXkey{nd} = key(iX{nd}); % Data key
        XU{nd} = X{nd}(iX{nd}); % Unshifted data
        Khj{nd} = Kh(Xcentre(ii)-XU{nd}); % Weights
    end
</code></pre>

<p>In this piece, <code>iX{nd}</code> is never used outside the loop. Neither is <code>XU{nd}</code>. Let's get rid of these (less indexing and less data storage both lead to faster code):</p>

<pre class="lang-matlab prettyprint-override"><code>    for nd = 1:ndata
        iX = and(kBinBeg &lt;= Xloc{nd}, Xloc{nd} &lt;= kBinEnd); % Data in bins
        iXkey{nd} = key(iX);          % Data key
        XU = X{nd}(iX);               % Unshifted data
        Khj{nd} = Kh(Xcentre(ii)-XU); % Weights
    end
</code></pre>

<p>Because <code>key = 1:max(nXdata)</code>, <code>key(iX)</code> is the same as <code>find(iX)</code>, it is likely that the latter is faster. Now you have:</p>

<pre class="lang-matlab prettyprint-override"><code>    for nd = 1:ndata
        iXkey{nd} = find((kBinBeg &lt;= Xloc{nd}) &amp; (Xloc{nd} &lt;= kBinEnd));
        Khj{nd} = Kh(Xcentre(ii) - X{nd}(iXkey{nd}));
    end
</code></pre>

<hr>

<p>This phrase:</p>

<pre class="lang-matlab prettyprint-override"><code>XUin(XUin&gt;nXdata(nd)-tau_c) = [];
</code></pre>

<p>can also be written as:</p>

<pre class="lang-matlab prettyprint-override"><code>XUin = XUin(XUin &lt;= nXdata(nd)-tau_c);
</code></pre>

<p>This happens inside the innermost loop, and is thus one of the lines most often executed. It is worthwhile trying both options to see which one is faster.</p>

<hr>

<p>This bit is quite expensive, because it copies the data:</p>

<pre class="lang-matlab prettyprint-override"><code>        ytt = [yinc{:}];
        Khjtt = [Khjt{:}];

        % Increments and moments
        sumKhjtt = sum(Khjtt);
        M1(tt,ii) = sum(Khjtt.*ytt)/sumKhjtt;
</code></pre>

<p>It is worth while here also to see if a loop is faster than the concatenation:</p>

<pre class="lang-matlab prettyprint-override"><code>        sumKhjtt = 0;
        sumKhjtt_ytt = 0;
        for nd = 1:ndata
           sumKhjtt = sumKhjtt + sum(Khjt{nd});
           sumKhjtt_ytt = sumKhjtt_ytt + sum(Khjt{nd}.*yinc{nd});
        end
        M1(tt,ii) = sumKhjtt_ytt / sumKhjtt;
</code></pre>

<p>(and the same for M2). This loop can be included into the previous one to avoid two more cell arrays: <code>yinc</code> and <code>Khjt</code>:</p>

<pre class="lang-matlab prettyprint-override"><code>        sumKhjtt = 0;
        sumKhjtt_ytt = 0;
        for nd = 1:ndata
            XUin = iXkey{nd};
            XUin(XUin &gt; nXdata(nd)-tau_c) = [];
            yinc = inc{tt,nd}(XUin);
            Khjt = Khj{nd}(1:numel(yinc{nd}));
            sumKhjtt = sumKhjtt + sum(Khjt{nd});
            sumKhjtt_ytt = sumKhjtt_ytt + sum(Khjt{nd}.*yinc{nd});
        end
        M1(tt,ii) = sumKhjtt_ytt / sumKhjtt;
</code></pre>

<p>You'll have to rewrite the equation for <code>M2</code> to be able to merge the summation it into that loop. This is fairly simple, it's analogous to <a href="https://en.wikipedia.org/wiki/Algorithms_for_calculating_variance#Na%C3%AFve_algorithm" rel="nofollow noreferrer">the naive algorithm for computing the variance</a>. That algorithm is not stable, it depends on your data whether the results are good or not. If it is not, use <a href="https://en.wikipedia.org/wiki/Algorithms_for_calculating_variance#Welford's_online_algorithm" rel="nofollow noreferrer">Welford's online algorithm</a> instead. There you can compute the second order central moment of the first batch, then add to the accumulators for subsequent batches.</p>
    </div>