<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><p>These lines:</p>

<pre><code>size_t N_stage = static_cast&lt;size_t&gt;(std::pow(2, stage));
size_t W_offset = static_cast&lt;size_t&gt;(std::pow(2, stages - stage));
</code></pre>

<p>should not use floating-point math because they can be inaccurate. Instead use pure integer arithmetic:</p>

<pre><code>size_t N_stage = static_cast&lt;size_t&gt;(1) &lt;&lt; stage;
size_t W_offset = static_cast&lt;size_t&gt;(1) &lt;&lt; (stages - stage);
</code></pre></li>
<li><p>Each iteration of your loop <code>for (size_t stage = 1; stage &lt;= stages; ++stage)</code> will linearly traverse the entire vector once. But this is not optimal if you consider the memory hierarchy. It would be a large change in your code, but you could rework the memory access pattern so that you transform increasingly larger blocks. This technique is known as a <a href="https://en.wikipedia.org/wiki/Cache-oblivious_algorithm" rel="nofollow noreferrer">cache-oblivious algorithm</a>.</p></li>
<li><p>As a matter of personal taste, I would do <code>using std::vector</code> and <code>using std::complex</code> because they are referred to so many times in the code.</p></li>
<li><p>Size 2 and size 4 DFTs have trivial integer twiddle factors (without irrationals), so you could special-case them to save some multiplications. You can use the formulas above to special-case your outer loop when <code>stage = 1</code> (length-2 DFT) and <code>stage = 2</code> (length-4 DFT). I have a <a href="https://www.nayuki.io/page/fast-fourier-transform-in-x86-assembly" rel="nofollow noreferrer">working example</a> on another page.</p>

<p>The DFT of the length-2 complex vector [x0, x1] looks like this:</p>

<pre><code>X0 = x0 + x1
X1 = x0 - x1
</code></pre>

<p>The DFT of the length-4 complex vector [x0, x1, x2, x3] looks like this:</p>

<pre><code>X0 = x0 + x1 + x2 + x3
X1 = x0 - i*x1 - x2 + i*x3
X2 = x0 - x1 + x2 - x3
X3 = x0 + i*x1 - x2 - x*x3
</code></pre>

<p>If a complex number is represented as a pair of real numbers in rectangular form, then multiplication by <em>i</em> is just a matter of swapping the real/imaginary parts and negating the correct part - so no multiplication or addition is needed for this operation.</p></li>
<li><p>The famous FFTW library has a bunch of speedup techniques, and there are articles you can find online that talk about how they work.</p></li>
<li><p>Overall your <code>FFTRadix2()</code> looks quite similar to <a href="https://www.nayuki.io/page/free-small-fft-in-multiple-languages" rel="nofollow noreferrer">my</a> <a href="https://www.nayuki.io/res/free-small-fft-in-multiple-languages/FftComplex.cpp" rel="nofollow noreferrer">FftComplex.cpp</a> <code>Fft::transformRadix2()</code>.</p></li>
</ul>
    </div>