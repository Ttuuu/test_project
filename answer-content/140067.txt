<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Both of these seem horribly inefficient, but I guess that is what you get if you are forced to use recursion to solve this problem.</p>

<p>In either case you don't validate input.  What if you don't get an integer value passed in the first place?</p>

<p>Your solution doesn't handle negative integers correctly - why would this always return false?</p>

<p>Your solution is really odd in that it unnecessarily uses recursion.  If you are going to use modulus, you have no need to recurse at all. You know true or false directly after this operation and decrementing two from the number and recursing isn't going to change the outcome. It's just going to take more time until you finally get to value &lt; 0.</p>

<p>I might have something more like the suggested solution, but with some input validation added:</p>

<pre><code>function isEven(n) {
  // make sure we have a number
  if(isNAN(n)) {
    console.log('Non-integer passed to isEven()');
    return false;
  }
  // parse it as int to weed out floats
  if(n !== parseInt(n)) {
    console.log('Non-integer passed to isEven()');
    return false;
  }
  if (n === 0)
    return true;
  else if (n === 1)
    return false;
  else if (n &lt; 0)
    return isEven(-n);
  else
    return isEven(n - 2);
}
</code></pre>
    </div>