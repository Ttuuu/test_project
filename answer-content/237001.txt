<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>While this is <em>Code Review</em>@SE:</p>

<p>Do not start coding while not confident the task is well defined.</p>

<p>A good way to check is <em>test first</em>:<br>
If you don't know how to test it, you don't know what to achieve.<br>
(Your program (sort of) outputs</p>

<blockquote>
<pre><code>1A  1B   0   0   0  1F   0   0   0   0  
2A  2B  2C  2D   0   0   0   0   0   0  
3A   0  3C  3D   0   0   0   0   0   0  
4A  4B   0   0  4E   0   0   0   0   0  
5A   0   0   0   0   0   0   0   0   0  
 0   0   0   0   0   0   0   0   0   0  
 0   0   0   0   0   0   0   0   0   0  
</code></pre>
</blockquote>

<p>- how many clusters of 4 do you see? Your program: <code>Total Clusters:  9</code>)  </p>

<p>Almost as helpful is to <em>somehow</em> record the approach envisioned (viability of updates and version handling as welcome as with code) -<br>
<strong>well done</strong>, presenting it before going into detail.<br>
I would have loved it if it was <em>in the code</em>.</p>

<p>Two things irritating about the problem statement:<br>
 • no indication what is <em>maximum</em> about the <em>maximum number of clusters</em> to return<br>
 • mention of <em>isles</em>, which seem to be dispensable</p>

<hr>

<p>There are conventions, lowering the threshold to grasp someone else's work.<br>
Many Python conventions a formalised as <a href="https://www.python.org/dev/peps" rel="nofollow noreferrer">Python Enhancement Proposals</a>. I put first:</p>

<ol>
<li><a href="https://www.python.org/dev/peps/pep-0008/#a-foolish-consistency-is-the-hobgoblin-of-little-minds" rel="nofollow noreferrer">PEP 8 -- Style Guide for Python Code</a><br>
there is no <em>just about style</em>: it's <em>about</em> <strong>readability</strong></li>
<li><a href="https://www.python.org/dev/peps/pep-0257/#what-is-a-docstring" rel="nofollow noreferrer">PEP 257 -- Docstring Conventions</a><br>
"If you violate these conventions, the worst you'll get is some dirty looks."<br>
And <em>not the best software for the given effort</em>.
I wish I found <code>Fully documented code</code>.</li>
</ol>

<p>Going through the code top to bottom, <em>not</em> commenting deviations from PEP 8 (<em>Everyone</em> is using tool help) and referring to <a href="https://codereview.stackexchange.com/a/236914/93149">Sam Stafford's answer</a> regarding useful code comments:  </p>

<ul>
<li><code>printMatrix(M)</code><br>
• flawless use of comprehensions.<br>
• Lacks a docstring -<br>
 <code>Print the matrix using no less than four characters per item.</code>?<br>
• Unified alignment: <code>'{:&lt;4}'.format(item)</code></li>
<li><code>sliceMatrix(M, C)</code><br>
• Not named for what it returns/computes/modifies.<br>
• Lacks a docstring -<br>
 <code>Return the count of contiguous clusters of size C in M.</code>?<br>
• Features not only the magic literal <code>4</code>:<br>
 what could(/should?) be (is?!) a parameter leaks into the name of a variable.<br>
• Contains "tracing-<code>print()</code>s" not easy to disable.<br>
• <code>i</code> used exclusively for trace printing<br>
• (Misses the opportunity to advance four seats when <code>num_zeros</code> is 0<br>
 <strong><em>“Premature optimisation is the root of all evil</em></strong> (or at least most of it) <strong>in programming.”</strong>   - D.E. Knuth)<br>
• Keeps going when <code>n_columns &lt; counter + cluster_size</code></li>
<li><code>solution(N, S)</code><br>
• Lacks a docstring -<br>
 <code>Return the maximum number of 4-passenger contiguous clusters.</code>?<br>
• Is on the long side - consider factoring out <em>taking reservations into account</em> and <em>counting clusters</em><br>
• An alternative to <code>columnDict[occupiedColumn]</code> is    <code>"ABCDEFGHJK".find(occupied_column)</code><br>
• does not iterate seatMap "the pythonic way": <code>for row in seat_map:</code><br>
• creates a slice without striking need

<ul>
<li>using explicit start and end instead of <code>row_slice = row[:]</code>

<ul>
<li>not using a symbolic upper bound: <code>row_slice = row[0:seats_per_row]</code>

<ul>
<li>using a literal of <code>9</code>, which is the last valid index and one less than a tolerable upper bound <strong>leading to wrong (low) results</strong> when there is a block of unoccupied seats "on the right" with a length divisible by 4  </li>
</ul></li>
</ul></li>
</ul></li>
<li><code>seat(N, S)</code><br>
• Missing, but specified by the problem statement.  </li>
<li>put your "tinker test" after an<br>
<code>if __name__ == '__main__':</code> - if more than a couple of lines, better define a <code>main()</code></li>
</ul>

<hr>

<p>There are many ways to reach a solution -</p>

<ul>
<li>start at the problem</li>
<li>design and code the way <em>you</em> think about problem and solution<br>
giving others (including your later self (<strong>!</strong>)) a chance to follow your thinking:<br>
<strong>Document your design.<br>
Document your code. In the code.</strong></li>
</ul>

<hr>

<p>My take of "the map approach", sans module docstring:</p>

<pre><code>def seating(N, empty, S):
    ''' Return a seating of N rows initially &lt;empty&gt;,
     with taken seats from S blanked out. '''
    seats = [empty]*N
    for taken in S.split():
        row = int(taken[:-1]) - 1
        seats[row] = seats[row].replace(taken[-1], ' ', 1)

    return seats


def count_clusters(seating, cluster_size):
    ''' Return the count of contiguous cluster_size clusters in seating. '''
    return sum(len(cluster) // cluster_size for row in seating
               for cluster in row.split())


def seat(N, S):
    ''' Return the maximum number of 4-passenger contiguous clusters. '''
    return count_clusters(seating(N, "ABCDEFGHJK", S), cluster_size=4)
</code></pre>

<hr>

<p>Sketch of an "interval approach":</p>

<ul>
<li>start with one interval per row</li>
<li>for each reservation<br>
• split every interval at the seat specified<br>
• discard all short intervals  </li>
<li>count intervals</li>
</ul>

<p>food for thought:<br>
• ordering reservations (say, by ascending row) allows handling row by row 
• manipulating some form of "dance card" is equivalent to bucket sorting reservations  </p>
    </div>