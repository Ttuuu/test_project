<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Some initial thoughts...</p>

<ul>
<li><p>Consider labelling your axis, or complying with a known standard.  When I'm looking at coordinates, I'm thinking (x,y) for horizontal, then vertical.  You're asking for i,j coordinates, for vertical, then horizontal.  This is likely to be a bit confusing to the user the first time they play.  You're also using i,j in your code, again, I'd tend to use x,y and have them apply in the expected way.</p></li>
<li><p>Your formatting is quite erratic, if it looks like that in your IDE, I'd want to fix it.  Consistent bracing/indentation makes code a lot easier to read.  If it's OK in your development environment, then usually you'd just copy and paste the whole of your code into the question, select it and click the code {} icon.</p></li>
<li><p>It's generally considered good practice to brace your statements.  Consider this code:</p>

<pre><code>do
cin&gt;&gt;i&gt;&gt;j;
while(i&lt;0||i&gt;9||j&lt;0||j&gt;9);
</code></pre>

<p>It's perfectly valid, however, with no indentation or braces at first glance it looks a bit like an infinite <code>while</code> loop.</p></li>
<li><p>Users are awfully unreliable, even those with the best intentions will eventually make a mistake.  What happens if instead of putting 'o 3 4', the user enters 'o e 4' by mistake?  The loop above is unable to resolve the problem, so loops forever.  Doing something like this (untested) would help to resolve the bad input, although obviously you might want to prompt the user again...:</p>

<pre><code>do {
    cin &gt;&gt; i &gt;&gt; j;
    if (cin.fail()) 
    {
        cin.clear(); 
        cin.ignore();
    }
}
while (i&lt;0 || i&gt;9 || j&lt;0 || j&gt;9);
</code></pre></li>
<li><p>end_game_win_check - At the moment, for the user to win, they have to have flagged all ten of the mines.  I sometimes used to play minesweep by not flagging any of the mines and just trying to clear all the squares that didn't have mines on them.  It seems like if the user has cleared cell that doesn't have a mine they should also have won...</p></li>
<li><p>OO - As you've said, you've not really used any classes or structs.  I would suggest that a good starting point would be to create a class and move your global variables into the class as members.  Move your existing functions into the class as member functions.  Then consider which functions actually need to be public and which can be private.  The next step might be to try and extract the user interaction, particularly input out of the class, so that you're exposing operations to <code>open_cell(x,y)</code> where x+y have come from another class that is responsible for asking the user for moves.</p></li>
</ul>
    </div>