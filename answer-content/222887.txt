<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>- Headers</strong></p>

<p>You are making use of POSIX types and functions (<code>sigset_t</code> and <code>fork()</code> for example).</p>

<p>You should read the manuals for every function or type you use to know what you need in order to use them properly).</p>

<p>The man page of <code>fork()</code> (<code>man fork</code>) says that you need to include two headers to be able to use this function, and you forgot one of them:</p>

<pre class="lang-c prettyprint-override"><code>#include &lt;sys/types.h&gt;
#include &lt;unistd.h&gt;
</code></pre>

<hr>

<p><strong>- POSIX</strong></p>

<p>Even if you include the POSIX headers, you need to define the posix macro so that you can use the POSIX features.  GCC (and many other compilers) used to define it for you, but recent versions of GCC don't (at least on my system), so either you define it in the source code (above any headers) or in the Makefile:</p>

<pre class="lang-c prettyprint-override"><code>#define _POSIX_C_SOURCE (200809L)
</code></pre>

<p>or</p>

<pre class="lang-c prettyprint-override"><code>CFLAGS  += -D _POSIX_C_SOURCE=200809L
</code></pre>

<hr>

<p><strong>- Function-like macros:</strong></p>

<p>Macros that act like function calls (contrary to the typical macros that evaluate to a constant like <code>#define FOO (1)</code>)  should be used by the user like any other function (the user shouldn't care about something being a macro or a function (if possible, macros should even avoid double evaluation of parameters).</p>

<p>This function:</p>

<pre class="lang-c prettyprint-override"><code>void foo(void)
{
    /* contents */
}
</code></pre>

<p>written as a macro should be written this way, so that the user never notices that it is a macro (usually, function-like macros even have lowercase names to look like functions):</p>

<pre class="lang-c prettyprint-override"><code>#define foo()   do                                                      \
{                                                                       \
    /* contents */                                                      \
} while (0)
</code></pre>

<hr>

<p><strong>- Macros that affect control flow (use <code>goto</code> instead!)</strong>  (copied from the <a href="https://www.kernel.org/doc/html/v4.10/process/coding-style.html#macros-enums-and-rtl" rel="nofollow noreferrer">Linux Kernel Coding Style</a>)</p>

<pre class="lang-c prettyprint-override"><code>#define FOO(x)  do                                                      \
{                                                                       \
                                                                        \
        if (blah(x) &lt; 0)                                                \
                return  -EBUGGERED;                                     \
} while (0)
</code></pre>

<p>is a very bad idea. It looks like a function call but exits the calling function; donâ€™t break the internal parsers of those who will read the code.</p>

<hr>

<p><strong>- errno</strong></p>

<p>When reporting an error of a standard library function, if that function sets <code>errno</code>, you should also report the value of <code>errno</code>, which can be very helpful.</p>

<p>A simple call to <code>perror(...)</code> instead of <code>fprintf(stderr, ...)</code> is enough, although I prefer to show more info, and have developed a function-like macro for that (It works similarly to <code>void perror(const char *str)</code>):</p>

<pre class="lang-c prettyprint-override"><code>#include &lt;errno.h&gt;
#include &lt;stdio.h&gt;
#include &lt;string.h&gt;

#define alx_perror(str) do                                              \
{                                                                       \
        char    *str_   = str;                                          \
                                                                        \
        fprintf(stderr, "%s:%i: %s():\n", __FILE__, __LINE__, __func__);\
        if (str_)                                                       \
                fprintf(stderr, "   %s\n", str_);                       \
        fprintf(stderr, "E%i -  %s\n", errno, strerror(errno));         \
} while (0)
</code></pre>

<hr>

<p><strong>- 80 character lines</strong></p>

<p>Please, don't use lines longer than 80 characters (there are exceptions; for example, don't break string literals).  It's very hard to read long lines.  The number 80 comes from the usual size of terminals, but it's still valid in modern editors: usually a splitted screen (or a StackExchange code block) shows around 85~90 characters, so if you write more, you have to scroll to the right to read it, which isn't very comfortable.</p>

<hr>

<p><strong>- main</strong></p>

<p>The only two standard forms of <code>main</code> are:</p>

<pre class="lang-c prettyprint-override"><code>int main(void)
int main(int argc, char *argv[])
</code></pre>

<p>You should use one of those.</p>

<hr>

<p><strong>- types</strong></p>

<p>Use the most appropriate types for the variables.</p>

<p><code>pid</code> should be <code>pid_t pid;</code> instead of <code>int pid;</code></p>

<hr>

<p><strong>- Check error codes of standard library functions</strong></p>

<p>Standard library functions that return an error code do it for a good reason.  Check that error code.</p>

<pre class="lang-c prettyprint-override"><code>int status;

status = system(compile);
if (status)
        goto err_compile;
</code></pre>

<p>if you want to handle the status to know what failed, or if not, just:</p>

<pre class="lang-c prettyprint-override"><code>if (system(compile))
        exit(EXIT_FAILURE);
</code></pre>

<hr>

<p><strong>- return or exit()</strong></p>

<p>At the end of main, you should use <code>return 0;</code>.  Although the behavior of <code>exit(0);</code> is the same, it is weird to read, and I had to check the name of the function to know if I'm in <code>main</code> or in another function, because I'm (and everyone else) used to read <code>return 0;</code> at the end of main.  It is more or less a non-written convention.  Everywhere else, do what you prefer, but not at the end of main.</p>

<hr>

<p><strong>- EXIT_FAILURE</strong></p>

<p><code>exit()</code> should be used with the macros <code>EXIT_SUCCESS</code> and <code>EXIT_FAILURE</code> instead of numbers, unless you want a specific exit failure code:</p>

<pre class="lang-c prettyprint-override"><code>exit(EXIT_FAILURE);
</code></pre>

<hr>

<p><strong>- void</strong></p>

<p>Functions that don't accept parameters should be defined as <code>type foo(void)</code> and not <code>type foo()</code>.  Empty parentheses have different meaning in prototypes and definitions of functions, so it's better to avoid them, and use <code>(void)</code>.</p>

<hr>

<p><strong>- unused variable</strong></p>

<p><code>sigset</code> (in bomb.c) is not used, so remove it.</p>

<hr>

<p><strong>- Unnecessary else</strong>  (From Linux <a href="https://github.com/torvalds/linux/blob/master/scripts/checkpatch.pl" rel="nofollow noreferrer">checkpatch.pl</a>)</p>

<p>"<code>else</code> is not generally useful after a break or return."</p>

<p>I add to that sentence a <code>continue</code>, <code>goto</code> or <code>exit()</code>.</p>

<p>Example:</p>

<pre class="lang-c prettyprint-override"><code>if (x)
        exit(EXIT_FAILURE);
else
        printf("Hello world!\n");
</code></pre>

<p>is equivalent to this, which is easier to read:</p>

<pre class="lang-c prettyprint-override"><code>if (x)
        exit(EXIT_FAILURE);
printf("Hello world!\n");
</code></pre>

<hr>

<p><strong>- Explicitly discard return error codes</strong></p>

<p>If you don't care about the error code returned by a function, you should explicitly cast it to <code>(void)</code> so that it is clear that you don't care about it, and you didn't forget about it.</p>

<pre class="lang-c prettyprint-override"><code>(void)setsid();
</code></pre>

<hr>

<p><strong>- Variables as short lived as possible</strong></p>

<p>Variables should live as short as possible.</p>

<p>In oops.c, the function <code>signal_setup()</code> asks for a parameter, but it is not needed.  You could replace it with a local variable.</p>

<hr>

<p>Fixed code:</p>

<p><code>bomb.c</code>:</p>

<pre class="lang-c prettyprint-override"><code>#define _POSIX_C_SOURCE (200809L)

#include &lt;errno.h&gt;
#include &lt;signal.h&gt;
#include &lt;stdbool.h&gt;
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;

#include &lt;sys/types.h&gt;
#include &lt;unistd.h&gt;


#define alx_perror(str) do                                          \
{                                                                   \
    char    *str_   = str;                                          \
                                                                    \
    fprintf(stderr, "%s:%i: %s():\n", __FILE__, __LINE__, __func__);\
    if (str_)                                                       \
        fprintf(stderr, "   %s\n", str_);                           \
    fprintf(stderr, "E%i -  %s\n", errno, strerror(errno));         \
} while (0)


int main(void)
{
    char    *compile = "gcc -o oops oops.c";
    char    *args[] = {NULL};
    pid_t   pid;
    int     status;
    char    str[BUFSIZ];

    status = system(compile);
    if (status)
        goto err_sys;

    while (true) {
        pid = fork();
        if (pid &lt; 0)
            goto err_fork;
        if (pid &gt; 0)
            continue;

        /* child */
        (void)setsid();
        pid = fork();
        if (pid &lt; 0)
            goto err_fork;
        if (!pid) {  /* grandchild */
            if (execv("oops", args))
                goto err_execv;
        }
    }

    return  0;

err_execv:
    alx_perror("Error on execv call.");
    exit(EXIT_FAILURE);
err_fork:
    alx_perror("Error creating the damn child.");
    exit(EXIT_FAILURE);
err_sys:
    (void)snprintf(str, sizeof(str), "Error compiling: status = %i;", status);
    alx_perror(str);
    exit(EXIT_FAILURE);
}
</code></pre>

<p><code>oops.c</code>:</p>

<pre class="lang-c prettyprint-override"><code>#define _POSIX_C_SOURCE (200809L)

#include &lt;signal.h&gt;
#include &lt;stdbool.h&gt;
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;

#include &lt;fcntl.h&gt;
#include &lt;sys/types.h&gt;
#include &lt;unistd.h&gt;


void handle_abrt(void);
void handle_chld(void);
void handle_int(void);
void handle_stop(void);
void handle_term(void);
void handle_trap(void);
void signal_setup(void);


int main(void)
{
    pid_t   pid;
    pid_t   my_pid;

    signal_setup();

    while (true) {
        pid = fork();
        if (pid)
            continue;

        /* child */
        while (true) {
            my_pid = getpid();  /* lotta system calls :) */
            printf("%d\n", my_pid);
        }
    }

    return  0;
}


void handle_abrt(void)
{

    //
}

void handle_chld(void)
{

    //
}

void handle_int(void)
{

    //
}

void handle_stop(void)
{

    //
}

void handle_term(void)
{

    //
}

void handle_trap(void)
{

    //
}

void signal_setup(void)
{
    sigset_t            sigset;
    struct sigaction    action_abrt;
    struct sigaction    action_chld;
    struct sigaction    action_int;
    struct sigaction    action_stop;
    struct sigaction    action_term;
    struct sigaction    action_trap;

    action_abrt.sa_handler = handle_abrt;
    (void)sigemptyset(&amp;action_abrt.sa_mask);
    (void)sigaction(SIGABRT, &amp;action_abrt, NULL);

    action_chld.sa_handler = handle_chld;
    (void)sigemptyset(&amp;action_chld.sa_mask);
    (void)sigaction(SIGABRT, &amp;action_chld, NULL);

    action_int.sa_handler = handle_int;
    (void)sigemptyset(&amp;action_int.sa_mask);
    (void)sigaction(SIGABRT, &amp;action_int, NULL);

    action_stop.sa_handler = handle_stop;
    (void)sigemptyset(&amp;action_stop.sa_mask);
    (void)sigaction(SIGABRT, &amp;action_stop, NULL);

    action_term.sa_handler = handle_term;
    (void)sigemptyset(&amp;action_term.sa_mask);
    (void)sigaction(SIGABRT, &amp;action_term, NULL);

    action_trap.sa_handler = handle_trap;
    (void)sigemptyset(&amp;action_trap.sa_mask);
    (void)sigaction(SIGABRT, &amp;action_trap, NULL);

    (void)sigemptyset(&amp;sigset);
    (void)sigaddset(&amp;sigset, SIGABRT);
    (void)sigaddset(&amp;sigset, SIGCHLD);
    (void)sigaddset(&amp;sigset, SIGINT);
    (void)sigaddset(&amp;sigset, SIGSTOP);
    (void)sigaddset(&amp;sigset, SIGTERM);
    (void)sigaddset(&amp;sigset, SIGTRAP);
}
</code></pre>
    </div>