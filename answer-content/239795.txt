<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Have you looked at <a href="https://en.cppreference.com/w/cpp/io/basic_osyncstream" rel="nofollow noreferrer">C++20 <code>osyncstream</code></a>?  It seems to have a better interface.</p>

<h1>Multithreading</h1>

<pre><code>std::lock_guard&lt;std::mutex&gt;(PrintLn&lt;Stream&gt;::m);
</code></pre>

<p>This line is useless, because temporary objects are destroyed at the end of the full-expression.  (Does this even have a temporary in C++17?)  You need a named variable instead.  Also make use of class template argument deduction:</p>

<pre><code>std::lock_guard lock{m};
</code></pre>

<p>Also,</p>

<h1>Streams</h1>

<p>Your approach is unnecessarily restricted because only three hardcoded streams <code>std::cout</code>, <code>std::cerr</code>, and <code>std::clog</code> are supported.  And I think <code>{}</code> is OK and these don't really help a lot:</p>

<pre><code>#define CoutLn CoutLn{}
#define CerrLn CerrLn{}
#define ClogLn ClogLn{}
</code></pre>

<p>Make the function object have regular semantics instead.  You may use a hash map internally to store the mutexes, as <code>syncbuf</code> does.</p>

<p>Also SFINAE on <code>operator&lt;&lt;</code>.</p>

<hr>

<p>Here's the same thing implemented with <code>osyncstream</code>:</p>

<pre><code>template &lt;
    class CharT,
    class Traits = std::char_traits&lt;CharT&gt;,
    class Allocator = std::allocator&lt;CharT&gt;
&gt; class PrintLn : public std::basic_osyncstream&lt;CharT, Traits, Allocator&gt; {
    using Base = std::basic_osyncstream&lt;CharT, Traits, Allocator&gt;;
public:
    using Base::Base;

    PrintLn(PrintLn&amp;&amp;) = default;
    PrintLn&amp; operator=(PrintLn&amp;&amp;) = default;
    ~PrintLn()
    {
        if (this-&gt;get_wrapped()) {
            *static_cast&lt;Base*&gt;(this) &lt;&lt; '\n';
        }
    }
};

inline auto cout_ln()
{
    return PrintLn{std::cout};
}
inline auto cerr_ln()
{
    return PrintLn{std::cerr};
}
inline auto clog_ln()
{
    return PrintLn{std::clog};
}
</code></pre>

<p>But anyway, why would you wanna do this when you can simply print a <code>\n</code>?</p>
    </div>