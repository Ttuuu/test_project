<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><code>the goal is to determine whether [pivot selection as average of extrema] is comparable to median-of-three</code><br>
which probably is to say <em>How <strong>does</strong> pivot selection as presented here compare to MoT?</em><br>
If that is <em>goal of this post</em> rather than <em>goal of the code presented</em>, CR is the wrong forum for that.<br>
(These preliminary remarks done with, I'll more or less follow the source top to bottom.) </p>

<hr>

<p>Personal dislikes:<br>
 - code where I don't know at first glance<br>
   a) what the idea was creating it<br>
   b) what I can ethically do with it.<br>
 - waste of screen space   (viz. circumventing SE's bulleted list here)<br>
I suggest leaving license information out of doc comments, using blank lines to separate things not (visually) separated otherwise, only, and using markup sparingly and with as little intrusion as feasible (e.g., &lt;/p&gt; at end of last line of paragraph).</p>

<p>I miss a description about<br>
 - what you found concerning<br>
  - how to compare quicksort pivot selection schemes<br>
  - how the scheme you present relates to prior work<br>
   (which would help presenting a similar question at <a href="https://cs.stackexchange.com/help/how-to-ask">CS</a>.)<br>
 - the raison d'être of this code<br>
(And yes, I'm talking source code. External documentation <em>does</em> get separated. I'd be fine with a hyperlink given any hope of years of accessibility. I don't want to exercise my skills in finding something on the net.)</p>

<ul>
<li><code>class QSortSAVP</code> (what does the 2nd <code>S</code> stand for?) consider separating recursion handling, pivot selection (done), partitioning, and "driver" (<code>main()</code> looks the type - I'd prefer a separate/nested class).<br>
Implement an <code>interface Sorter&lt;T&gt;</code>.  </li>
<li><code>As such, first step is…</code> is this comment up to date? (Where would <code>arithmetic overflow</code> become a problem? See <code>determinePivot()</code>'s doc comment, too. You should be able to get rid of the (current) special case for <code>firstIteration</code>.)  </li>
<li><code>[] sort([], boolean createCopy)</code> looks excessive for a non-production strength implementation. I'd prefer mentioning the case for a copy in <code>sort([] arr)</code>'s doc comment (especially if that returned its argument) or <code>[] sortCopy([])</code>.<br>
Why open code [<code>Arrays.copyOf(arr, int newLength)</code>](<a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Arrays.html#copyOf(T%5B%5D" rel="nofollow noreferrer">https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Arrays.html#copyOf(T%5B%5D</a>, int))?  </li>
<li><code>sort([] arr, pivotVal, int lowIndex, int highIndex, …)</code><br>
- Intrusive tracing impedes readability. <em>If</em> need be, use an appropriate package.<br>
- I don't quite get <code>// all entries in given range are less than or equal to pivot</code> (which they conceivably are) - the <code>return;</code> is in order <em>because <code>determinePivot()</code>never rounds up</em> (which I don't find documented anywhere) and <em>all entries are equal</em><br>
- not passing (in some convenient way) information about pivot selection between invocations of this method and <code>int determinePivot([] arr, int lowIndex, int highIndex)</code> throws away information: the overall low from <code>lowIndex</code> to <code>highIndex</code> will stay the low from <code>lowIndex</code> to <code>tempLowIndex</code>, analogously for high.<br>
- <em>If</em> at all, just handle (<code>MAX_</code>)<code>RECURSION_DEPTH</code> where you handle <code>RECURSION_COUNT</code><br>
- determine the pivot at top of this method instead of before each recursive call  </li>
<li><code>void handlePrint(object)</code>&amp; <code>…Line()</code> see suggestion about logging/tracing package</li>
</ul>
    </div>