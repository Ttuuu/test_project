<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You should definitely follow <a href="https://codereview.stackexchange.com/a/192523/59161">@Henrik Hansen's</a> suggestion about separating your method into multiple APIs with one exception.</p>

<p>The save method should just save the stream. There is no need for it return any streams. You should already know this stream from the <code>CreateCsv</code> method.</p>

<hr>

<p>Other things that you can improve are...</p>

<hr>

<p><strong>String concatenation</strong></p>

<blockquote>
<pre><code>csvContent += string.Join("|", arr) + "\n";
</code></pre>
</blockquote>

<p>I'm pretty sure this is the bottleneck of you application. Strings are immutable so in order to concatenate strings, the runtime has to copy the old one and appaned something new to it. Usually this is not a big issue but since you <em>have about 40 columns and 30k rows of data</em> this is really a lot of copying. And the string is growing, so each copy operation has to handle larger and larger strings.</p>

<p>For frequent string manipulation, especially in loops, you should use the <code>StringBuilder</code> that does not requrie copying. There are numerous pages about this topic so if you are interested in its internals, just google for it.</p>

<hr>

<p>As far as strings are concerned there is one more piece of code that isn't efficient yet.</p>

<blockquote>
<pre><code>arr = ((IEnumerable)objarr).Cast&lt;object&gt;()
             .Select(x =&gt; x.ToString())
             .ToList();
</code></pre>
</blockquote>

<p>You're materializing the <code>objarr</code> by calling <code>ToList</code>. This is not necessary at this point.</p>

<blockquote>
<pre><code>string.Join("|", arr)
</code></pre>
</blockquote>

<p><code>Join</code> can take of enumerating it later only once. Currently your string is being created twice. </p>

<p>The new code could look this:</p>

<pre><code>var csvBuilder = new StringBuilder();

for (int row_no = 0; row_no &lt; ds.Tables[0].Rows.Count; row_no++)
{
    if (row_no == 0)
    {
        var headers = new List&lt;string&gt;();
        for (int i = 0; i &lt; colCount; i++)
        {
            headers.Add(ds.Tables[0].Columns[i].ColumnName);
        }
        csvBuilder.AppendLine(string.Join("|", headers));
    }
    else
    {
        var items = ds.Tables[0].Rows[row_no].ItemArray;
        var values = ((IEnumerable)items).Cast&lt;object&gt;().Select(x =&gt; x.ToString());
        csvBuilder.AppendLine(string.Join("|", values));
    }
}
</code></pre>

<hr>

<p><strong>Always dispose streams</strong></p>

<p>Another bad habit of yours is to not dispose streams. If you call this method a couple of time you'll be wasting a lot of memory. You should always do it at some point either with the <code>using</code> statement or by calling <code>Dispose()</code> in a <code>try/finally</code> block.</p>

<hr>

<p><strong>Naming</strong></p>

<p>You should pay more attention to your variable names. <code>arr</code> is a terrible name because it can stand for just anything. It harms code readability. Code should document itself. This one doesn't.</p>

<p>You should also be more consistent. If you name most of your variables correctly with <em>camelCase</em> then don't name others with _snake_case_ like <code>row_no</code>.</p>

<p>Use always strong names and as precise as you can. Not too long (if possible) but also not to short, avoid abbreviations. <code>columnIndex</code> is a good example. <code>row_no</code> should be <code>rowIndex</code>. Currently it looks like more then one person was writing this code. Each one with different coding style.</p>

<hr>

<p><strong>{}</strong></p>

<blockquote>
<pre><code>for (var i = 0; i &lt; rowReader.FieldCount; i++)
               headers.Add(Convert.ToString(rowReader.GetValue(i)));
</code></pre>
</blockquote>

<p>Always use <code>{}</code>. You can save youself hours of debugging because without them it's very easy to make a mistake.</p>

<hr>

<p><strong>Explicit types vs var</strong></p>

<p>You mix explit types and <code>var</code>. You use them interchangeably. This makes your code look very unprovessional and messy. Pick one and stick to it. (I suggest picking <code>var</code>).</p>
    </div>