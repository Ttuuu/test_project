<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I don't believe your depth-first approach is incorrect, as far as I can tell your <code>visited</code> variable does its job. However, there is room for improvement.</p>

<p><strong>General improvents to readability</strong><br>
Firstly, this game's board can be represented by a linear tape of cells, rather than a two-dimensional grid. Using a one-dimensional array greatly simplifies the code. Only one position variable will be passed around instead of two. Additionally, the translation steps between coordinate systems that you're currently making (e.g.: <code>int pos = i*a[0].length + j;</code>) are eliminated. </p>

<p><strong>Likely bugs</strong><br>
The aim is to count the minimum number of dice rolls, but you're also incrementing <code>min</code> when you use a snake or ladder. I think you should remove the <code>+ 1</code> in the <code>else</code> branch.</p>

<p>You're currently using the <a href="https://stackoverflow.com/a/47902/3230218">magic number</a> 100, here: <code>Integer.MAX_VALUE-100</code>. There is no explanation as to where this 100 comes from, why it needs to be exactly that number. I assume it's to prevent interger wrapping when taking a sum. However, this exposes you to bugs. What if you use this program on a larger board that has paths longer than a 100 rolls? Your program now thinks the most optimum route is done in negative two billion rolls.</p>

<p>The current implementation assigns a special meaning to the value zero (no snake or ladder). However, position zero is a valid cell. This means that there is no way for a snake to point towards the cell at zero! One workaround would be to change the default value to <code>-1</code>. </p>

<p><strong>Nitpicks</strong><br>
I recommend always using brackets with conditional blocks, even if there's just one line. <a href="https://stackoverflow.com/a/8020255/3230218">Read this</a> for more information.</p>
    </div>