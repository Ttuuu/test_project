<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>What you did <em>right</em> is solve the problem.</p>
<p>What you did "wrong" really depends on a number of factors, so I'll respond with what you can do to improve it, with an example that implements those improvements.  Note, many improvements will make the code longer.</p>
<h1>Improvements</h1>
<ul>
<li>Use the shebang <code>#!/usr/bin/env ruby</code>.  It allows the environment to have ruby in a different directory than <code>/usr/bin/ruby</code>.</li>
<li>Use <code>$stderr.puts "Usage: #{$0} &lt;a&gt; &lt;b&gt; &lt;c&gt;"</code>.  <code>$stderr</code> is a global variable and can be changed.  It allows standard error to be redirected, say to a file or a logger.  It would be restored by <code>$stderr = STDERR</code>.</li>
<li>Ruby indentation standard is 2 spaces and no hard tabs.</li>
<li>Use <code>disc_str</code> to indicate it is a String version of <code>disc</code>.</li>
<li>Use <code>disc_sqrt_str</code> to indicate it is a String version of <code>disc_sqrt</code>.</li>
<li>Use a variable to reduce wasted calculations; <code>sqrt</code> is not a simple calculation.</li>
<li>Nested <code>?</code> operators can be hard to read and can lead to mistakes.</li>
<li>Use <code>numerator</code> and <code>denominator</code> to convey intention, instead of <code>s</code> and <code>d</code>.</li>
<li>Allow for the case when discriminant is zero.</li>
<li>Use parentheses for arguments when method calls are arguments.  Thus instead of <code>f g h x</code> do <code>f g(h(x))</code> or even better <code>f(g(h(x)))</code>.</li>
<li>Use <code>discriminant</code> because it is a Mathematics domain term.  A non-mathematics literate developer will be blocked from maintaining it because Googling "disc" won't help them.</li>
<li>Eliminate common factors.</li>
<li>Eliminate fraction if denominator is 1.</li>
<li>Define methods for greater flexibility.</li>
<li>Include some tests to test each pathway.</li>
<li>Use appropriate comments and self-commenting code by using good names.</li>
<li>Use Rubocop to provide similar automated improvements.</li>
<li>Use the <code>colorize</code> gem in an optional way, since it is not actually necessary.</li>
<li>Check if it is available by using <code>''.respond_to?(:underline)</code>, which will mean that it is more flexible because another method could be added to String which might do a similar thing or even something rather different; CSS, LaTeX, ASCII, ... .</li>
<li>Use Unicode codes instead of the characters directly.  Some editors may not display Unicode characters properly and could change the characters to something unexpected.</li>
</ul>
<pre><code>#!/usr/bin/env ruby
#
#   quadratic   - Output quadratic solutions as a fraction
#
#     Luis Esteban    9 August 2020
#       review of code of Dmitry Kudriavtsev

# Output rational solutions to the quadratic equation
#   For a.x^2 + b.x + c = 0
#
#   x = (-b ± √d) / 2a
#   d = b^2 - 4.a.c       (discriminant)
#

begin
  require 'colorize'
rescue LoadError
end

ALLOW_IMAGINARY = true

def solve_quadratic(a, b, c)
  discriminant = b**2 - 4*a*c
  denominator  = 2 * a

  if discriminant &gt; 0
    discriminant_sqrt = Math.sqrt(discriminant)
    if discriminant_sqrt % 1 == 0
      b, discriminant, denominator = simplify(b, discriminant_sqrt.to_i, denominator)
      numerator = [-b, " \u00b1 ", discriminant]
    else
      b, discriminant, denominator = simplify_with_sqrt(b, discriminant, denominator)
      numerator = [-b, " \u00b1 \u221a", discriminant]
    end
  elsif discriminant == 0
    solution    = Rational(-b, denominator)
    numerator   = [solution.numerator]
    denominator = solution.denominator
  else
    if ALLOW_IMAGINARY
      discriminant_sqrt = Math.sqrt(-discriminant)
      discriminant_sqrt = discriminant_sqrt.to_i if discriminant_sqrt % 1 == 0
      if discriminant_sqrt % 1 == 0
        b, discriminant, denominator = simplify(b, discriminant_sqrt.to_i, denominator)
        numerator = [-b, " \u00b1 i \u2a2f ", discriminant]
      else
        b, discriminant, denominator = simplify_with_sqrt(b, discriminant, denominator)
        numerator = [-b, " \u00b1 i \u2a2f \u221a", -discriminant]
      end
    else
      numerator = []
    end
  end
  
  [numerator, denominator]
end

def simplify(b, discriminant, denominator)
  gcd = [b, discriminant, denominator].inject(&amp;:gcd)
  gcd = -gcd unless denominator.positive?
  
  [b, discriminant, denominator].map{|n| n / gcd }
end

def simplify_with_sqrt(b, discriminant, denominator)
  gcd = [b**2, discriminant, denominator**2].inject(&amp;:gcd)
  gcd_sqrt = Math.sqrt(gcd).round
  if denominator.negative?
    gcd      = -gcd
    gcd_sqrt = -gcd_sqrt
  end
  
  [
    b            / gcd_sqrt,
    discriminant / gcd,
    denominator  / gcd_sqrt
  ]
end

def display_fraction(numerator, denominator)
  size        = numerator.size
  numerator   = numerator.join
  denominator = denominator.to_s
  width       = [numerator, denominator].map(&amp;:length).max + 2

  if size &gt; 0
    if denominator != "1"
      if ''.respond_to?(:underline)
        puts "#{numerator}".center(width).underline
        puts denominator.center(width)
      else
        puts numerator.center(width)
        puts "─" * width
        puts denominator.center(width)
      end
    else
      puts numerator
    end
  else
    puts "No solutions"
  end
end

if ARGV.length != 3
  $stderr.puts "Usage: #{$0} &lt;a&gt; &lt;b&gt; &lt;c&gt;"
  exit 1
else
  a, b, c = ARGV.map(&amp;:to_i)
  puts "solution(s) to #{a}x\u00b2 + #{b}x + #{c} = 0"
  
  display_fraction(*solve_quadratic(a,b,c))
end

# Testing
#  [
#    [1, 1, -12],    # Integer discriminant
#    [-1, 1, 12],    # Make denominator positive
#    [1, 2, 0],      # Don't show denominator if 1
#    [4, 4, 1],      # Don't show discriminant if 0
#    [1, 2, -17],    # Don't show denominator if 1 with surd
#    [2, 4, 2],      # Don't show denominator if 1 and  discriminant if 0
#    [1, 1, -13],    # Show surd
#    [1, 2, 17],     # Imaginary solution with integer discriminant no denominator
#    [1, 2, 16],     # Imaginary solution with correct cancellation of surd
#    [2, 0, 2],      # Imaginary solution with surd, hide denominator
#    [2, 8, 16],     # Imaginary solution with integer discriminant
#  ].each do |a,b,c|
#    puts "For: a = #{a.inspect}, b = #{b.inspect}, c = #{c.inspect}"
#    puts
#    display_fraction(*solve_quadratic(a,b,c))
#    puts
#  end
</code></pre>
    </div>