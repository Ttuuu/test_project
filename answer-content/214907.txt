<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Let me start with an all too common hindsight:<br>
your code lacks test support and scaffold.</p>

<p>The most basic test support for a class is a succinct <code>__str__</code>, for <code>class Node</code>:</p>

<pre><code>def __str__(self):
    return '&lt;' + ('.' if not self.left else (str(self.left) + '|')) \
        + str(self.value) + ('.' if not self.right
                             else ('|' + str(self.right))) + '&gt;'
</code></pre>

<p>(a more elaborate one would allow to limit recursion.) The result for</p>

<pre><code>if __name__ == '__main__':
    ascending = [chr(x) for x in range(ord('a'), ord('g'))]
    print(build_bst_recursive(ascending))
    print(build_bst_iterative_one_stack(ascending))
</code></pre>

<blockquote>
  <p>&lt;&lt;.0|&lt;.1.&gt;&gt;|2|&lt;&lt;.3.&gt;|4|&lt;.5.&gt;&gt;&gt;<br>
  &lt;&lt;&lt;.None.&gt;|a|&lt;.b.&gt;&gt;|c|&lt;&lt;.d.&gt;|e|&lt;.f.&gt;&gt;&gt;</p>
</blockquote>

<p>highlights an oversight with <code>_build_bst()</code> (not using <code>node = Node(array[mid])</code>) and a problem in the stack variants with always creating two child nodes (or with the handling commented <code># The segment is degenerated. Do nothing.</code>).  </p>

<hr>

<p>Your code is more or less in line with the <a href="https://www.python.org/dev/peps/pep-0008/#a-foolish-consistency-is-the-hobgoblin-of-little-minds" rel="nofollow noreferrer">Style Guide for Python Code</a> (good - do you use an IDE, your IDE's PEP8 support?); make it a habit to provide <a href="https://www.python.org/dev/peps/pep-0257/#what-is-a-docstring" rel="nofollow noreferrer">documentation strings</a> for everything public, too.  </p>

<p>If I was serious about comparing alternative implementations, I'd try to define an <a href="https://docs.python.org/3/library/abc.html" rel="nofollow noreferrer">interface</a> and hope to avoid names like <code>build_bst_iterative_one_stack</code>.<br>
I got used to the builtin <code>len()</code>, I don't see an advantage to introducing <code>size = len(array)</code> <em>where used once</em>.</p>

<p><code>_build_bst()</code> is pretty basic; if it was public, it would need a <em>doc string</em> specifying <code>last</code> to be inclusive. I don't like the name <code>array</code> - would prefer <code>values</code> or <code>ordered</code> (<code>ascending</code> would be misleading, as <code>_build_bst()</code> works perfectly for descending values).</p>

<p>I'd hesitate to roll my own stack class, more so if the stated purpose was something else, entirely. If I did, I'd just extend <code>list</code>:</p>

<pre><code>class Stack(list):
    ''' syntactic sugar: adds push(), is_empty() to list's pop() '''
    push = list.append

    def is_empty(self):
        return not bool(self)
</code></pre>

<p>(Skipping <code>build_bst_iterative()</code>.)<br>
In <code>build_bst_iterative_one_stack()</code>, I'd prefer <code>toDo</code> over <code>stack</code>. The comment <code>stack stores […and…] indices of half-segments</code> is funny in the first tuple pushed two statements down <em>not</em> being a half.<br>
I don't have an inspiration how to fix the introduction of <em><code>None</code>-Nodes</em> without duplicating the check.</p>

<p>Your "<code>build_bst_iterative*()</code>" implementations are straightforward conversions of the basic recursive approach (see <a href="https://stackoverflow.com/a/18406975">Create Balanced Binary Search Tree from Sorted linked list</a> for one working without "random" access); I would not expect insights beyond <em>doesn't get prettier for explicit stack handling</em>.  </p>

<p>Much to my dismay, I didn't find a decent web reference for a genuine iterative approach (numerous weird ones, some as new as <a href="https://arxiv.org/abs/1902.02499" rel="nofollow noreferrer">2019/3/2</a>):<br>
First consider the case of 2ⁿ-1 nodes: with <em>level</em>s numbered from 0 for bottom (up to <em>n-1</em>), the level of each node is the number of trailing zeroes in its ordinal. Have an array to reference one node for each level, initialised to <code>None</code>s. For each value, create a <code>Node</code>. Check the reference at the level indicated by the number of trailing zeroes in its ordinal: if <code>None</code>, just plant the node there and make whatever is one level lower its left descendant. If not <code>None</code>, make node the right descendant of the node at the next higher level an set this level to <code>None</code>. (As an alternative to checking this reference, you can inspect the bit in the ordinal just two above the trailing zeroes.)<br>
There are numerous ways to handle <em>N</em> ≠ 2ⁿ-1; one being to aim for a <a href="https://en.m.wikipedia.org/wiki/Binary_tree#Types_of_binary_trees" rel="nofollow noreferrer">complete binary tree</a>: compute the ordinal <em>rb</em> of the rightmost node at the bottom level. Proceed as above to <em>rb+1</em>, and increase the "ordinal number" by two instead of one thereafter.<br>
(Finally, return the node at the highest level as the root of the tree built…)</p>
    </div>