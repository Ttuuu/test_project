<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your main algorithm is fine, and the logic cannot be further optimized.
You can eliminate an unnecessary condition by reducing the ranges:</p>

<pre><code>for i in range(len(arr) - 2):
    for j in range(len(arr[i]) - 2):
        total = arr[i][j] + arr[i][j+1] + arr[i][j+2] + arr[i+1][j+1] + arr[i+2][j] + arr[i+2][j+1] + arr[i+2][j+2]
        max_total = max(max_total, total)
</code></pre>

<p>I also use <code>max(...)</code> to eliminate another condition for more compact writing style.</p>

<p>The readability could be slightly improved if you extract the long sum to compute the total into a helper function, so that you rewrite the long line as:</p>

<pre><code>total = hourglass(arr, i, j)
</code></pre>

<p>At this point, we're getting close to a form where the implementation can be rewritten as a generator comprehension.
But I don't think it would be worth it.
It would not improve the performance, and it would hardly improve readability.
Just because Python has comprehension,
doesn't mean you should always use them no matter what.</p>

<hr>

<p>The <code>if __name__ == "__main__":</code> is ineffective, because some code still remains in global space. Worse, if somebody tries to import this script, it will raise an error, because the <code>arr</code> is only initialized in the <code>if __name__ == "__main__":</code> guard, and code outside of it tries to use it.</p>

<p>Solution: move the implementation into a function,
and avoid code execution in global space.</p>

<hr>

<p>The initialization <code>total = 0</code> is unnecessary.
The value is always recomputed and overwritten inside the nested loop.</p>

<hr>

<p>You should remove unused imports.</p>
    </div>