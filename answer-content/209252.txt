<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Whenever declaring a function that you only expect to use in the current file, mark it <code>static</code>.</p>

<p>The (anonymous) user in the comments above is correct to indicate that <code>accum</code> is quite large; however, rather than allocating it statically as a global I'd suggest that it be allocated from the heap (<code>malloc</code>).</p>

<p><code>printf("%s\n", dates)</code> is equivalent to <code>puts(dates)</code>, but the latter is more efficient.</p>

<p>Having to predeclare variables in C hasn't been needed since the 90s. Do not predeclare variables. Declare them where they're used; i.e.</p>

<pre><code>for (int i = 0;
</code></pre>

<p>That loop doesn't do what you think it does. You're missing braces. The loop will only apply to the first <code>if</code>.</p>

<pre><code>j += 8
</code></pre>

<p>Where does <code>8</code> come from? Declare this as a constant. Magic numbers are bad.</p>

<p>It's pointless to have a return value for <code>pickDates</code>, so make it <code>void</code>.</p>

<p><code>date_str</code> in <code>isDate</code> should be a <code>const char *</code> because you shouldn't be modifying it. The same applies to <code>dates</code> in <code>pickDates</code>.</p>

<p>Later, where you have a series of <code>sprintf</code> / <code>strcat</code>, do not use <code>strcat</code>, nor a <code>tmp</code> array. You can write to <code>date_str</code> via a temporary pointer that you increment based on the return value of <code>sprintf</code>.</p>

<p>I suggest inverting this logic:</p>

<pre><code>if (dd &lt; 32 &amp;&amp; dd &gt; 0 &amp;&amp; mm &lt; 13 &amp;&amp; mm &gt; 0 &amp;&amp; yy &gt; 0)
{
    // ...
    return 1;
}
else return -1;
</code></pre>

<p>to</p>

<pre><code>if (dd &lt; 0 || dd &gt; 31 || mm &lt; 0 || mm &gt; 12 || yy &lt; 0)
    return -1;
// ...
return 1;
</code></pre>

<p>Also, if that return value indicates success or failure, you should use a boolean from stdbool.h and use true/false instead of an integer.</p>

<p>This:</p>

<pre><code>int i = 0;
int dd = atoi(&amp;date_str[i+1]);
int mm = atoi(&amp;date_str[i+4]);
int yy = atoi(&amp;date_str[i+7]);
</code></pre>

<p>doesn't make a whole lot of sense; <code>i</code> might as well not exist and you might as well do</p>

<pre><code>int dd = atoi(date_str + 1),
    mm = atoi(date_str + 4),
    yy = atoi(date_str + 7);
</code></pre>
    </div>