<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You might gain more OOP points by using more objects. </p>

<p>Start by defining an exception:</p>

<pre><code>class NotAvailable(Exception):
   pass
</code></pre>

<p>When something runs out, you can raise the exception and have the program return cleanly to the menu. This simplifies the flow control.</p>

<p>Next, define a worker which will actually make the coffee etc:</p>

<pre><code>class Worker(object):
    def __init__(self):
      pass

    def list_actions(self):
      return ['buy', 'fill', 'take', 'remaining']

    def set_state(self,water,milk,coffee_beans,cups,money ):
        # quantities of items the coffee machine already had
        self.water = water
        self.milk = milk
        self.coffee_beans = coffee_beans
        self.cups = cups
        self.money = money

    def available_check(self): # checks if it can afford making that type of coffee at the moment
        self.not_available = "" # by checking whether the supplies goes below 0 after it is deducted
        if self.water - self.reduced[0] &lt; 0:
            self.not_available = "water"
        elif self.milk - self.reduced[1] &lt; 0:
            self.not_available = "milk"
        elif self.coffee_beans - self.reduced[2] &lt; 0:
            self.not_available = "coffee beans"
        elif self.cups - self.reduced[3] &lt; 0:
            self.not_available = "disposable cups"

        if self.not_available != "": # if something was detected to be below zero after deduction
            print(f"Sorry, not enough {self.not_available}!")
            raise NotAvailable

        else: # if everything is enough to make the coffee
            print("I have enough resources, making you a coffee!")
            return True

    def deduct_supplies(self):
# performs operation from the reduced list, based on the coffee chosen
        self.water -= self.reduced[0]
        self.milk -= self.reduced[1]
        self.coffee_beans -= self.reduced[2]
        self.cups -= self.reduced[3]
        self.money += self.reduced[4]

    def buy(self):
        self.choice = input("What do you want to buy? 1 - espresso, 2 - latte, 3 - cappuccino, back - to main menu:\n")
        if self.choice == '1':
            self.reduced = [250, 0, 16, 1, 4] # water, milk, coffee beans, cups, money
            self.available_check() # checks if supplies are available
            self.deduct_supplies() # if it is, then it deducts

        elif self.choice == '2':
            self.reduced = [350, 75, 20, 1, 7]
            self.available_check()
            self.deduct_supplies()

        elif self.choice == "3":
            self.reduced = [200, 100, 12, 1, 6]
            self.available_check() 
            self.deduct_supplies()       

        elif self.choice != 'back':
            print ("Choice not recognised")


    def fill(self): # for adding supplies to the machine
        self.water += int(input("Write how many ml of water do you want to add:\n"))
        self.milk += int(input("Write how many ml of milk do you want to add:\n"))
        self.coffee_beans += int(input("Write how many grams of coffee beans do you want to add:\n"))
        self.cups += int(input("Write how many disposable cups of coffee do you want to add:\n"))

    def take(self): # for taking the money from the machine
        print(f"I gave you ${self.money}")
        self.money -= self.money

    def remaining(self): # to display the quantities of supplies in the machine at the moment
        print(f"The coffee machine has:")
        print(f"{self.water} of water")
        print(f"{self.milk} of milk")
        print(f"{self.coffee_beans} of coffee beans")
        print(f"{self.cups} of disposable cups")
        print(f"${self.money} of money")
</code></pre>

<p>This is mainly your code, but I have change <code>available_check()</code> to raise the exception defined above, and removed the <code>return_to_menu()</code> method because the worker will simply finish working when it is finished.</p>

<p>Finally, the machine itself:</p>

<pre><code>class CoffeeMachine(object):
  def __init__(self, water,milk,coffee_beans,cups,money ):
     """The coffee machine starts itself on initialisation.
         When running, it asks the user to select a task, and then passes the task to the worker.
     """

     self.worker = Worker()
     self.worker.set_state(water,milk,coffee_beans,cups,money)
     self.start()

  def start(self):
    """Start the machine running.
       Continue running until exit is requested
    """

    self.running = True
    while self.running:
      action = input("Write action (%s) or exit:\n" % ', '.join( self.worker.list_actions() ) )
      if action == 'exit':
        self.running = False
      elif action in self.worker.list_actions():
        self.execute_task(action)
      else:
        print ("INVALID OPTION -- PLEASE TRY AGAIN")

  def execute_task(self,action):
    """Execute a task, calling the worker method named in the action variable.
       The NotAvailable exception is caught
    """

    try:
      return getattr( self.worker, action)()
    except NotAvailable:
      print ("Please make another choice (%s not available)" % self.worker.not_available)

cm = CoffeeMachine(400, 540, 120, 9, 550)
</code></pre>

<p>Defining the worker as a separate object gives a clearer separation between the different tasks in your programming challenge.</p>
    </div>