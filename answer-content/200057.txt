<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There are several areas of improvement</p>
<h3>Architecture</h3>
<p>First of all, I don't see why these classes should inherit to each other. To me, there is no difference between these classes and I don't see why can't you just instantiate two objects of the same class. Of course if you fix another issue:</p>
<p>There is at least one principal principle violated in your classes - a <a href="https://en.wikipedia.org/wiki/Single_responsibility_principle" rel="nofollow noreferrer">single responsibility principle</a>. Why a database class should look somewhere in the filesystem for its credentials? Why a filename with credentials is hardcoded?</p>
<p>You must create a distinct class for the configuration and provide its instance as a parameter when instantiating/initializing your database class.</p>
<h3>PDO wrapper</h3>
<p>Unfortunately, you choose a very bad example to model your class after. It even could be used as a showcase for bad practices, featuring every single one of them. Consider taking a look at my article on <a href="https://phpdelusions.net/pdo/common_mistakes" rel="nofollow noreferrer">database wrappers' common mistakes</a>. In brief, your class</p>
<ul>
<li>implements an inflexible error reporting (this is also a code duplication and another violation of the single responsibility principle. It makes no sense for a database class to have an error logger of its own. whatever logging should be done elsewhere (notably core PHP is already excel in it))</li>
<li>stateful</li>
<li>duplicates PDO's functionality</li>
<li>at the same time limits it, offering you less features than exists in vanilla PDO</li>
<li>overall untidy with a lot of duplicated or unnecessary code.</li>
</ul>
<p>What I would do is just a single class that extends PDO with addition of 3 new functions:</p>
<ul>
<li><code>init($config)</code> - called once, initializing a connection</li>
<li><code>run($query, $params)</code> to run a query with parameters</li>
<li><code>getInstance()</code> get the instance</li>
</ul>
<p>You can take a look at such a class in my other <a href="https://phpdelusions.net/pdo/pdo_wrapper#run" rel="nofollow noreferrer">article</a>, make sure to check the usage examples below. You'd be surprised to find most of your code unnecessary, such as for telling a select query from insert</p>
<p>And one class to supplement it, a class to get configuration options, with two methods, one to get from a file and one to get from a database.</p>
    </div>