<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I hate to break it to you, but no this is not very secure.  While you are using some techniques to help secure it, there are still a few flaws with how you are managing the input and SQL checks.</p>

<h1>mySQL vs. mySQLi</h1>

<p>USE MYSQLI... you need the "i", mySQL is old and deprecated and should not be used if you are using a new enough version of PHP. 7+ Supports the use of mysqli.  If you're still running PHP 5.6 or older, you need to get that upgraded, seriously drop everything and focus on that.  There are serious security vulnerabilities and to still be using it in 2019 is disgraceful to the security of your users.</p>

<p>Edit: I read this part back, and I don't mean to convey this as an insult, its just something that can be overlooked.  If you are able to fix it, it should be fixed ASAP. If you can't, you should at least try to figure out who can.</p>

<h1>Prepared Statements</h1>

<p>After that, the first thing I should mention is prepared statements, these help you get rid of that darn <code>mysqli_real_escape_string</code> which is verbose and tedious to type over and over again.  Instead you should be using what is called a prepared statement (even when you don't need too, its still a good habit). This negates the use of mysqli_real_escape, since the statement and parameters are sent separately and it is simply not possible to execute any SQL function via an input using the method below.  You can also add in a preg_match($regex, $var) if you really want to get picky with inputs and confirming they are valid before insertion.</p>

<pre><code>$email = input_filter(INPUT_POST, 'email', FILTER_VALIDATE_EMAIL);

if(!email){
// ERROR
}else{
  $sql = "SELECT u_email FROM users WHERE u_email = ?";
  $stmt = $con -&gt; prepare($sql);
  $stmt -&gt; bind_param("s", $email)
  $stmt -&gt; execute();
}
</code></pre>

<p>After you start to get comfortable with this type of PHP mySQLi I suggest looking into this function from <a href="https://phpdelusions.net/mysqli/simple" rel="nofollow noreferrer">PHP Delusions</a>.  It has been an extremely handy tool for automating part of the preparation and execution, leaving you more time to deal with the results.
As with what I did, do not fall into the trap of using procedural syntax, just stick with the object oriented version, its much easier to understand and a lot less verbose.</p>

<h1>Password</h1>

<p>MD5 is not meant for passwords, even with Salt.  Please use the <code>password_hash</code> and <code>password_verify</code> functions to handle passwords, those are the best option you have for encrypting passwords with PHP. <a href="https://codereview.stackexchange.com/questions/226035/ajax-communication-with-pure-js-and-php/226610#226610">See my answer here</a> for a deeper explanation on how to use them.</p>

<h1>My own SQL email check</h1>

<p><strong>NOTE:</strong> This is not part of registration, this is an account function to change their email once signed in. This is the most relevant example I have without rewriting a giant chunk of my own registration form.
There is no point in copying and pasting this exact script as it likely will not work for this purpose, however the logic, usage of SQL prepared statements, and check for an already registered variable is all there.  You should be able to tweak it to your purpose. </p>

<pre><code>// SQL HELPER
function prepared_Query($con, $sql, $params, $types = ""){
    $types = $types ?: str_repeat("s", count($params));
    $stmt   = $con -&gt; prepare($sql);
    $stmt -&gt; bind_param($types, ...$params);
    $stmt -&gt; execute();
    return $stmt;
}

$umail = filter_input(INPUT_POST, 'umail', FILTER_VALIDATE_EMAIL);

// SQL USER EMAIL
if(!empty($umail)){
    $sql = "SELECT user_mail FROM _MAIN_users WHERE user_mail = ?;";
    $stmt = prepared_Query($con, $sql, [$umail]);
    $stmt -&gt; store_result();
    $num = $stmt -&gt; num_rows();
    if($num &gt; 0){
        $err[] = "Taken";
    }else{
        $stmt -&gt; free_result();
        $stmt -&gt; close();
        $sql = "UPDATE _MAIN_users SET user_mail = ? WHERE user_id = ?;";
        $stmt = prepared_Query($con, $sql, [$umail, $uid]);
        $err[] = "Updated";
    }
    $stmt -&gt; close();
}else{
    $err[] = "No Change";
}
</code></pre>
    </div>