<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<p>Can I use other modules to make this job easier?</p>
</blockquote>
<p>You can use some web framework like <a href="https://github.com/fastify/fastify" rel="noreferrer">fastify</a> or <a href="https://github.com/expressjs/express" rel="noreferrer">express</a>.
This would ease the code a lot</p>
<blockquote>
<p>For a job this simple, is it worth to work with HTML and CSS as separate files?</p>
</blockquote>
<p>Assumig your project will grown, it is a good approach to move some "static text" in a separated file.</p>
<blockquote>
<p>How are HTML and CSS normally handled inside JS files (edits, appends, etc)?</p>
</blockquote>
<p>You have made a server side rendering (SSR) by your hand.
Since it would be hard to manage manually all those piece of strings and would be also dandgerous to
some script injection, you could use some fremework as <a href="https://vuejs.org/v2/guide/ssr.html" rel="noreferrer">vue</a>
or other templating systems like <a href="https://handlebarsjs.com/" rel="noreferrer">handlebarsjs</a> or others - <a href="https://github.com/fastify/point-of-view#point-of-view" rel="noreferrer">here a list</a></p>
<blockquote>
<p>How well am I handling the construction of HTML and CSS?</p>
</blockquote>
<p>There could be some security issue for links like that if you start to process those values:</p>
<p><code>http://localhost:3000/?user=%3Cimg%20src=%27aaa%27%20onerror=alert(1)%3E</code></p>
<p>the framework protect you from these cases usually.</p>
<p>This code:</p>
<pre><code>  const htmlTitle = '&lt;title&gt;Your Request Is&lt;/title&gt;'
  const htmlEncode = '&lt;meta charset="UTF-8"&gt;'
  const htmlHead = `&lt;head&gt;${htmlTitle}${htmlCSS}${htmlEncode}&lt;/head&gt;`
  const htmlTop = `&lt;html lang="en"&gt;${htmlHead}&lt;body&gt;`
</code></pre>
<p>produce every time the same output string, so you could do it once instead of every request:
this will stress less the nodejs garbage collector for high throughput site.</p>
<blockquote>
<p>Can this be done more concisely?</p>
</blockquote>
<p>You could write less code using some <code>Object</code> and <code>Array</code> functions:</p>
<pre><code>function stringTemplates (request) {
  return `&lt;html lang="en"&gt;
&lt;head&gt;
&lt;title&gt;Your Request Is&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;table&gt;&lt;tbody&gt;
${Object.entries(request.headers).map(processLine).join('')}
${['httpVersion', 'httpVersionMinor', 'httpVersionMajor', 'method', 'url'].map(prop =&gt; processLine([prop, request[prop]])).join('')}
&lt;/tbody&gt;&lt;/table&gt;
&lt;/body&gt;
&lt;/html&gt;
`
}

function processLine ([header, value]) {
  return `&lt;tr&gt;&lt;td&gt;${header}&lt;/td&gt;&lt;td&gt;${value}&lt;/td&gt;&lt;/tr&gt;`
}
</code></pre>
<blockquote>
<p>What would you do differently to improve this in any way?</p>
</blockquote>
<p>This shows only GET, but in order to learn the HTTP standard it would useful to show in:</p>
<ul>
<li>query parameters</li>
<li>form parameter (with different encoding)</li>
</ul>
    </div>