<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This code is nicely written and clear in both code and description.  Good job!  I think there are still some things that might be improved.</p>

<h2>Fix the bug</h2>

<p>The updated value of <code>start_pos</code> is not being used for each iteration of the loop.  Instead, it should be, so the <code>while</code> loop should be this:</p>

<pre><code>while ((start_pos = string.find(from, start_pos)) != std::string::npos)
</code></pre>

<h2>Avoid creating copies if practical</h2>

<p>I don't have MSVC 2019 available, but I suspect that it's pointing out that you've asked it to make copies of <code>from</code> and <code>to</code>.  That is, instead of this:</p>

<pre><code>for (const auto [from, to] : map)
</code></pre>

<p>Write this:</p>

<pre><code>for (const auto&amp; [from, to] : map)
</code></pre>

<p>And see if that helps.  Another alternative would be to create a version of <code>replace_all</code> that takes a <code>std::pair&lt;std::string_view, std::string_view&gt;</code> and rewrite the loop as:</p>

<pre><code>for (const auto&amp; pr: map) {
    replace_all(string, pr);
}
</code></pre>

<h2>Consider using a different data structure</h2>

<p>The <code>std::unordered_map</code> used here may seem like a logical and intuitive structure to use but it has some potential problems.  First, the iterator has no defined ordering.  That is, the ordering is implementation defined so the programmer has no control of it.  That might be a problem if we want to do things in a specific order.  For example, replacing literal characters with their corresponding <a href="https://www.w3.org/2003/entities/2007doc/predefined.html" rel="noreferrer">predefined XML entities</a>, such as <code>&gt;</code> to <code>&amp;gt;</code> we typically want to do the <code>&amp;</code> to <code>&amp;amp;</code> conversion <em>first</em> for obvious reasons.  There's no way to do that with the existing version of the code.  Second, we can't create a <code>constexpr</code> version of the map because it has a non-trivial destructor.  I'd suggest allowing something like a <code>std::array</code> of <code>std::pair&lt;std::string_view, std::string_view&gt;</code>.  This is the approach that is used in conjunction with the next few suggestions.</p>

<h2>Use <code>using</code> to simplify code</h2>

<p>The existing code could be simplified a bit by using <code>using</code> like so:</p>

<pre><code>using MapContainer = std::unorded_map&lt;std::string_view, std::string_view&gt;;
void replace_all(std::string&amp; string, const MapContainer&amp; map)  { /* etc. */ }
</code></pre>

<p>Now any place we use the rather long name we can simply write <code>MapContainer</code>.</p>

<h2>Use <code>templates</code> for flexibility</h2>

<p>Instead of tying the <code>replace_all</code> function to a specific kind of structure, we could pass it a pair of templated iterators instead for flexibility:</p>

<pre><code>template &lt;class ForwardIt&gt;
void replace_all(std::string&amp; string, ForwardIt first, ForwardIt last) {
    for ( ; first != last; ++first) {
        replace_all(string, *first);
    }
}
</code></pre>

<p>Now all we need is any forward iterator that returns something that can be used by the inner <code>replace_all</code>.  In fact, we can simplify even further because this is exactly like the definition of <code>std::for_each</code>.</p>

<h2>Don't use <code>std::endl</code> if <code>'\n'</code> will do</h2>

<p>Using <code>std::endl</code> emits a <code>\n</code> and flushes the stream.  Unless you really need the stream flushed, you can improve the performance of the code by simply emitting <code>'\n'</code> instead of using the potentially more computationally costly <code>std::endl</code>.</p>

<h2>Consider creating a parallel version</h2>

<p>The current version is simple and straightforward, but makes multiple passes through the string.  It's possible to create a version that makes a single pass through or that makes multiple passes in parallel.  The single pass version could be general purpose, but the parallel version would require that patterns be completely independent (unlike the entity-replacing example I mentioned).</p>

<h2>Consider eliminating <code>return 0</code></h2>

<p>You don't need to explicitly provide a <code>return 0;</code> at the end of main -- it's created implicitly by the compiler.  Some people apparently feel very strongly both for and against this.  I advocate omitting it but you can decide for yourself.</p>

<h2>Alternate version</h2>

<p>Here's what I came up with using all of these suggestions:</p>

<pre class="lang-cpp prettyprint-override"><code>#include &lt;string&gt;
#include &lt;string_view&gt;
#include &lt;array&gt;
#include &lt;algorithm&gt;
#include &lt;iostream&gt;

namespace utils
{
    using WordPair = std::pair&lt;std::string_view, std::string_view&gt;;
    void replace_all(std::string&amp; string, const WordPair &amp;pr) {
        for (std::size_t start_pos{ 0 };
            (start_pos = string.find(pr.first, start_pos)) != std::string::npos;
            start_pos += pr.second.length())
        {
            string.replace(start_pos, pr.first.length(), pr.second);
        }
    }
}

int main()
{
    constexpr std::array&lt;utils::WordPair, 5&gt; my_map{{ 
        {"&amp;", "&amp;amp;"}, 
        {"&lt;", "&amp;lt;"}, 
        {"&gt;", "&amp;gt;"}, 
        {"'", "&amp;apos;"}, 
        {"\"", "&amp;quot;"} 
    }};
    std::string my_string{ "This &amp; that aren't \"&lt;&gt;\"." };
    // use a lambda for clarity
    auto repl = [&amp;my_string](const utils::WordPair &amp;p){
            utils::replace_all(my_string, p);
    };
    std::for_each(my_map.cbegin(), my_map.cend(), repl);
    std::cout &lt;&lt; my_string &lt;&lt; '\n';
}
</code></pre>
    </div>