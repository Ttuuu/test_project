<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The guessing takes too long because picking a random number is not the best idea.
For example if the number to guess is 100,
and the computer is <em>really really</em> unlucky,
it might pick the numbers 1, 2, 3, 4, 5, 6, ... and take 100 guesses!</p>

<p>A better way is to halve the intervals.
That is, if you know the number must be between 1 and 100, then pick 50.
If that's too high, and so you know the number is between 1 and 50,
then pick 25. And so on.</p>

<p>So, changing one line could make a huge difference:</p>

<pre><code>    // randNum = rand.nextInt(upperLimit - lowerLimit + 1) + lowerLimit;
    randNum = (upperLimit + lowerLimit + 1) / 2;
</code></pre>

<p>This is called a binary search.
As <a href="https://codereview.stackexchange.com/users/38383/cbojar">@cbojar</a> pointed out in comments,
since binary search takes \$\log_2(n)\$ tests where \$n\$ is the total number of objects, and since \$\log_2(100) = 6.643856\$,
that means it's guaranteed that this algorithm <em>will find</em> the correct number in at most 7 steps.</p>

<hr>

<p>The string literals "th", "tl", "y" that control the flow of the program are buried inside the code.
If you read this program a month from now,
it might not be obvious how it works until you read the details.
Something that would help with that,
and a good practice is to extract these string literals to constants,
for example:</p>

<pre><code>private static final String TOO_HIGH_MARKER = "th";
private static final String TOO_LOW_MARKER = "tl";
private static final String CORRECT_MARKER = "y";

// ...

public static void main(String[] args) {
    // ...

    do {
        // ...

        if (myAnswer.equals(TOO_LOW_MARKER)) {  //too low
            lowerLimit = randNum + 1;
        } else if (myAnswer.equals(TOO_HIGH_MARKER)) { // too high
            upperLimit = randNum - 1;
        }

        // ...
    } while (!myAnswer.equals(CORRECT_MARKER));
</code></pre>

<p>Now all these magical strings are easy to see near the top.
Should you decide to use different values,
you could just edit them right at the top, simple and clear.</p>

<p><strong>UPDATE</strong></p>

<p>As an extra touch,
as <a href="https://codereview.stackexchange.com/users/55951/tom">@Tom</a> pointed out in a comment,
it might be a good / interesting idea to make these <code>equals</code> comparisons a bit more fault tolerant by making them case insensitive by changing to <code>equalsIgnoreCase</code>, for example:</p>

<pre><code>        if (myAnswer.equalsIgnoreCase(TOO_LOW_MARKER)) {  //too low
</code></pre>

<p>This is of course less efficient than a simple <code>equals</code>,
so don't use it excessively everywhere,
only when justified.</p>

<hr>

<p>These initializers are redundant:</p>

<blockquote>
<pre><code>int randNum = 0;
String myAnswer = "";
</code></pre>
</blockquote>

<p>Because, these variables will always be assigned before they are used.
As such, you can remove the initializers:</p>

<pre><code>int randNum;
String myAnswer;
</code></pre>

<hr>

<p>It's a cosmetic thing,
but your formatting doesn't follow the standard in a few places.</p>

<p>Instead of this:</p>

<blockquote>
<pre><code>if(myAnswer.equals("tl")) {  //too low
    lowerLimit = randNum + 1;
}
else if(myAnswer.equals("th")) { // too high
    upperLimit = randNum - 1;
}
</code></pre>
</blockquote>

<p>It should be like this:</p>

<pre><code>if (myAnswer.equals("tl")) {  //too low
    lowerLimit = randNum + 1;
} else if (myAnswer.equals("th")) { // too high
    upperLimit = randNum - 1;
}
</code></pre>

<p>And instead of this:</p>

<blockquote>
<pre><code>}while(!myAnswer.equals("y"));
</code></pre>
</blockquote>

<p>It should be like this:</p>

<pre><code>} while (!myAnswer.equals("y"));
</code></pre>

<p>Again, these are minor issues, but as your programs get larger and larger these little details can add up and seriously hurt readability.
Use editor environments like Eclipse or IntelliJ or Netbeans that can automatically reformat your code following the standard.</p>
    </div>