<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>Is there any way to make this shorter or more efficient?</p>
</blockquote>

<p>Yes, we can do some things.</p>

<pre><code>for(int i = 0; i &lt; Math.pow(2,n); i++)
</code></pre>

<p>You calculate the pow for every iteration. The pow call takes some time (compared to basic things like multiplication or addition), you should do it only once.</p>

<pre><code>B = "";
B = '1'+B;
B = '0'+B;
</code></pre>

<p>You will create a lot of string copies for every string concatenation. This costs a lot of perfomance. In general, you should use a <code>StringBuilder</code>.<br>
In this special case, we could even use a char array.</p>

<pre><code>for(int i = 0; i &lt; Math.pow(2,n); i++)
if (temp%2 == 1)
temp = temp/2;
</code></pre>

<p>You could use bit manipulations. But depending on the jvm or hotspot compiler, this will be done anyway.</p>

<pre><code>void printB(int n)
        B = "";
        int temp = i;
</code></pre>

<p>Overall point: avoid abbreviations.</p>

<hr>

<p>All together, it could be like this:</p>

<pre><code>void printAllBinaryUpToLength(final int length) {
    if (length &gt;= 63)
        throw new IllegalArgumentException("Current implementation supports only a length &lt; 63. Given: " + length);
    final long max = 1 &lt;&lt; length;
    for (long i = 0; i &lt; max; i++) {
        long currentNumber = i;
        final char[] buffer = new char[length];
        int bufferPosition = buffer.length;
        while (bufferPosition &gt; 0) {
            buffer[--bufferPosition] = (char) (48 + (currentNumber &amp; 1));
            currentNumber &gt;&gt;&gt;= 1;
        }
        System.out.println(buffer);
    }
}
</code></pre>

<p>Calculates (without printing, printing takes the great majority of every loop) results up to 25 (2^25 = ~33*10^6) in less than a second. Should be enough.</p>
    </div>