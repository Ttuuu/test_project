<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here is the final result. It doesn't handle failure/retry as I continued to have issues with using a FIFO, but it does do a pretty good job. I ended up using <code>xargs -P</code> to get the parallelism since it behaves as a thread pool which is really what I needed.</p>

<pre><code>#!/usr/bin/env bash

declare -A types=(
    [jar]=application/java-archive
    [md5]=application/x-checksum
    [pom]=application/x-maven-pom+xml
    [sha1]=application/x-checksum
    [txt]=text/plain
    [xml]=application/xml
    [nupkg]=application/x-nupkg
)

errMsg(){
  printf '[1;31m' &gt;&amp;2
  echo "$@" &gt;&amp;2
  printf '[0m' &gt;&amp;2
}
export -f errMsg

okMsg(){
  printf '[1;32m'
  echo "$@"
  printf '[0m'
}
export -f okMsg

warnMsg(){
  printf '[1;33m' &gt;&amp;2
  echo "$@" &gt;&amp;2
  printf '[0m' &gt;&amp;2
}
export -f warnMsg

normalizeUrl() {
    echo ${1}| sed 's;\(.*\);\1/;g' | sed 's;\(.*\)//;\1/;g'
}
upone() {
    local user="${1:?User not supplied}"
    local pwd="${2:?Password not supplied}"
    local remote="${3:?No remote repo}"
    local art="${4:?Artifact not supplied}"

    local ct=${types[${art##*.}]:-application/octet-stream}
    local dest="$remote$art"
    local status_code="500" # fake an error
    local returnCode=0

    if ! exists ${user} ${pwd} ${dest}; then

      for attempt in 1 2 3; do
            status_code=$(
                curl -u "${user}:${pwd}" -X PUT -d "@${art}" \
                -H "Content-type: $ct" -w "%{http_code}" "$dest" 2&gt; /dev/null
            )
            case "${status_code}" in
                5*)
                    errMsg  "${status_code} $art -&gt; $dest"
                    returnCode=1
                    # exponential back-off just in case we are overloading the server
                    sleep $(( attempt * 2 ))
                ;;
                4*)
                    warnMsg "${status_code} $art -&gt; $dest"
                    break
                ;;
                2*)
                    okMsg "${status_code} $art -&gt; $dest"
                    break
                ;;
            esac
        done
    fi
    return ${returnCode}
}
export -f upone

exists(){
    local user="${1:?User not supplied}"
    local pwd="${2:?Password not supplied}"
    local resource="${3:?Destination not supplied}"
    local status_code
    status_code=$(curl -I -u "${user}:${pwd}" "${resource}" 2&gt; /dev/null |  head -1 | awk '{print $2}')
    [[ $? == 0 ]] &amp;&amp; grep -qE "2[0-9]{2}" &lt;&lt;&lt; ${status_code}
}
export -f exists

upload() {
    local user="${1:?User not supplied}"
    local pwd="${2:?Password not supplied}"
    local remote="${3:?No remote repo}"
    local local="${4:?No local repo supplied}"

    cat &lt;&lt;&lt; $(localFiles ${local}) | xargs -n 1 -P 50 -I {} bash -c 'upone "$@"' _ ${user} ${pwd} ${remote} {}

}
verify() {
    local user="${1:?User not supplied}"
    local pwd="${2:?Password not supplied}"
    local remote="${3:?No remote repo}"
    local local="${4:?No local repo supplied}"
    cat &lt;&lt;&lt; $(localFiles ${local}) | xargs -n 1 -P 50 -I {} bash -c 'verifyone "$@"' _ ${user} ${pwd} ${remote}{}

}


localFiles(){
    find "${1}" -not -path '*/\.*' -type f -not -name 'index.html' | sed -n 's;./\(.*\);\1;p'
}

validateCreds(){
    local user="${1:?User not supplied}"
    local pwd="${2:?Password not supplied}"
    local remote="${3:?No remote repo}"

    local status_code
    status_code=$(curl -I -u "${user}:${pwd}"  -w "%{http_code}"  "${remote}" |  head -1 | awk '{print $2}')
    if [[ $? != 0 || ${status_code} -eq 401 || ${status_code} -eq 403 ]]; then
        errMsg "${status_code} - curl test fail"  &amp;&amp; return -1
    fi

}

remote="${1:?$(errMsg No destination repository supplied)}"
grep -qE "http[s]?://.*" &lt;&lt;&lt; ${remote} || (errMsg "Not a valid URL '${remote}'" &amp;&amp; exit -1)


remote=$(normalizeUrl ${remote})

user=${2:-${USER:-$(read -p "Username: "  user &amp;&amp; [ -n "${user}" ] &amp;&amp; echo ${user})}}
local="${3:-.}"
pwd=$(read -s -p "Password: "  pwd &amp;&amp; [ -n "${pwd}" ] &amp;&amp; echo ${pwd})
echo ""

validateCreds ${user} ${pwd} ${remote}

upload ${user} ${pwd} ${remote} ${local}

verify ${user} ${pwd} ${remote} ${local}
</code></pre>
    </div>