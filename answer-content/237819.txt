<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Overall organization</h1>

<p>Right now, you've defined a <code>BstNode</code>, which you use directly in <code>main</code>. I'd at least consider defining a <code>Bst</code> class, and then (probably inside that) a <code>Node</code> class.</p>

<pre><code>class Bst {
    class Node {
        // only code to deal with individual nodes goes here
    };

    Node *root;
public:

    bool insert(int value);

    bool find(int value);
};
</code></pre>

<p>Then to create a Binary search tree, you'd just instantiate a <code>Bst</code> object, and use it:</p>

<pre><code>int main() {

    Bst tree;

    // oops--this will lead to a completely imbalanced tree.
    for (int i=0; i&lt;10; i++)
        tree.insert(i);

}
</code></pre>

<h1>in-class initialization</h1>

<p>Since you (almost?) always create a node with its child pointers set to nullptrs, I'd just specify that directly in the class instead of in the ctor:</p>

<pre><code>// ...
class Node {
    int value;
    Node *left = nullptr;
    Node *right = nullptr;

    Node(int value) : value(value) {}
};
</code></pre>

<h1>Insertion and Search</h1>

<p>I'd at least consider whether you really want to use recursion to do insertion and/or search. Since you only ever descend to one child of any given node, it's pretty easy to use iteration for these tasks.</p>

<h1>Insert return type</h1>

<p>I'd at least consider having <code>Insert</code> return a bool to indicate whether it actually inserted a value in the tree or not (e.g., return false if a value is already present).</p>

<h1>Collection type</h1>

<p>What you've currently implemented is roughly equivalent to a <code>std::set</code>. That is, it stores only keys. This can certainly be useful, but there are times its also useful to have data associated with the key (i.e., roughly equivalent to <code>std::map</code>).</p>

<h1>Generic Code</h1>

<p>Right now, you've written the code so the only thing can be stored in your BST is <code>int</code>s. I'd at least consider making it generic so other types can be stored.</p>

<pre><code>template &lt;class T, class Cmp = std::less&lt;T&gt;&gt;
class Bst {
    // ...
</code></pre>

<p>This increases complexity a little, but increases functionality quite a lot.</p>
    </div>