<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Logic &amp; Algorithm</h3>

<p>Without valid and invalid input files and expected outputs, it's hard to know if your program do the job. So, I'll don't analyses the logic nor the general algorithm, but instead, point out issues that are problematic and highlight bad practices</p>

<hr>

<h3>Recurring misuses and errors</h3>

<p>I haven't checked every headers, but i'm not sure you need all of those. And if you really need them for only one functionality you certainly have a design  problem. I'll try to be as exhaustive that I can, but I see a lot of mistakes</p>

<ul>
<li>You don't provide <code>pairs-in.txt</code> nor the expected <code>results.txt</code>, so it might be hard to poeple to figure out what your program do.</li>
<li>Make interfaces explicit. What is the purpose of <code>finalVerification(...)</code>, <code>quickCheckFix(...)</code> or <code>condition(...)</code> ?  Try to find self-explanatory names, <a href="https://stackoverflow.com/questions/2697783/what-does-program-to-interfaces-not-implementations-mean">program to an interface, not an implementation</a>.</li>
<li>Don't declare variables at the top of your functions, try to keep their scope as small as possible. See <a href="http://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Res-scope" rel="nofollow noreferrer">here</a>, <a href="http://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Res-introduce" rel="nofollow noreferrer">here</a> and <a href="http://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#es22-dont-declare-a-variable-until-you-have-a-value-to-initialize-it-with" rel="nofollow noreferrer">here</a> to get further information about this. Initialize your variables in the declaration.</li>
<li>All of your <code>std::string</code> parameters are given by value whereas you don't modify them, using a <code>const&amp; std::string</code> of a <code>const std::string_view</code> is way better (among other things, in term of performance) and make your interface more explicit. <a href="http://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#fcall-parameter-passing" rel="nofollow noreferrer">More info here</a>.</li>
<li>On the same subject, but extending it to all variables, when they don't have to be modified in their scope, <a href="http://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#S-const" rel="nofollow noreferrer">make it const</a>.</li>
<li>You write too much comment, code have to be self-explanatory. If so, <a href="http://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#nl1-dont-say-in-comments-what-can-be-clearly-stated-in-code" rel="nofollow noreferrer">do not use comments</a>, otherwise try to <a href="http://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#nl2-state-intent-in-comments" rel="nofollow noreferrer">keep them short</a>.  Really avoid these big blocks of comments like <code>DECLARATION</code>, <code>INITIALIZATION</code>, etc. And about long explanatory commentaries, think about <a href="https://akrzemi1.wordpress.com/2015/04/22/a-clever-comment-style/" rel="nofollow noreferrer">this comment style</a>.</li>
<li><a href="https://gamedev.stackexchange.com/questions/84221/why-is-it-bad-to-hard-code-content">Don't hard-code</a> value that can be modified if your code can be reused.</li>
<li>When you open a file with a <code>std::ifstream</code> check success with <a href="https://en.cppreference.com/w/cpp/io/basic_fstream/is_open" rel="nofollow noreferrer">std::ifstream::is_open</a> instead of comparing with <code>NULL</code>, and do it <a href="http://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#r12-immediately-give-the-result-of-an-explicit-resource-allocation-to-a-manager-object" rel="nofollow noreferrer">directly</a>. In addition, with c ++, you do not have to use <a href="http://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#r12-immediately-give-the-result-of-an-explicit-resource-allocation-to-a-manager-object" rel="nofollow noreferrer">NULL</a>.</li>
<li>[You don't have to close an <code>std::ifstream](https://stackoverflow.com/questions/748014/do-i-need-to-manually-close-an-ifstream)</code> at the end of your function, it's what <a href="http://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Rr-raii" rel="nofollow noreferrer">RAII</a> is for. In case where you have a lot of code after manipulating your file and don't need it anymore, so manually close or, even better, enclose the file-manipulation part into curly braces to make a <a href="https://en.cppreference.com/w/cpp/language/scope" rel="nofollow noreferrer">block scope</a>.</li>
<li>Instead of <code>while (getline(inputs, line))</code> if your input file contains only one word per line, use <code>while (inputs &gt;&gt; line)</code>.</li>
<li><a href="http://chris-sharpe.blogspot.com/2016/02/why-you-shouldnt-use-stdendl.html" rel="nofollow noreferrer">Don't use <code>std::endl</code></a> but <code>'\n'</code> and, if you want to manually flush the stream, explicitly call <a href="https://en.cppreference.com/w/cpp/io/manip/flush" rel="nofollow noreferrer"><code>std::flush</code></a>.</li>
<li><a href="https://stackoverflow.com/questions/1107705/systempause-why-is-it-wrong">Don't use <code>system(...)</code></a> it's not portable, nor secure and incredibly slow.</li>
<li>Avoid to mix signed and unsigned operation (<a href="http://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Res-mix" rel="nofollow noreferrer">arithmetic</a> or <a href="http://soundsoftware.ac.uk/c-pitfall-unsigned.html" rel="nofollow noreferrer">comparison</a>).  For info, <a href="https://en.cppreference.com/w/cpp/string/basic_string/size" rel="nofollow noreferrer"><code>std::string::size()</code></a> return a <code>std::string::size_type</code> which basically is a <code>std::size_t</code> namely an unsigned integer. </li>
<li>You always wrongly compare <code>flip</code> to <code>true</code> or <code>false</code>, <a href="http://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Res-if" rel="nofollow noreferrer">don't add redundant <code>==</code>/<code>!=</code></a> </li>
<li>Don't use an <a href="http://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Rl-name" rel="nofollow noreferrer">inconsistent naming style</a>. What is <code>size_Of_String</code>, a mix between snake and camelCase.</li>
<li>You never check <code>std::string input</code> length before accessing to 2 first indexes. <a href="http://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#SS-bounds" rel="nofollow noreferrer">Try to ensure your bounds safety</a>.</li>
</ul>

<hr>

<h2>Refactoring</h2>

<p>Here some specifics advices and remarks about things I didn't talk about in the section above.</p>

<h3><code>finalVerification</code></h3>

<pre><code>//When flip = true a fails, when flip = false b fails;
bool flip;

.....

//When flip = true a fails, when flip = false b fails;
flip = false;
</code></pre>

<p>should be rewrites in:</p>

<pre><code>bool flip = false;
</code></pre>

<hr>

<pre><code>if(input.size() &lt; 4){return false;}
if(input.size() == 4){
    if((input[0] == input[2])&amp;&amp;(input[1] == input[3])){ return true;}
    else {return false;}
}
</code></pre>

<p>can be rewrites in:</p>

<pre><code>if (input.size() &lt;= 4u) {
    return (input.size() == 4u &amp;&amp; input[0] == input[2] &amp;&amp; input[1] == input[3]);
}
</code></pre>

<hr>

<pre><code>    if((input[i] != a) &amp;&amp; (flip == false))
    {       
        return false;
    }
    else if((input[i] != b ) &amp;&amp; (flip == true))
    {
        return false;
    }

    if(flip == true)
    {
        flip = false;
    }
    else if (flip == false) {
        flip = true;
    }
</code></pre>

<p>can be rewrites in:</p>

<pre><code>    if(flip)
    {
        if(input[i] != b)
        {
            return false;
        }
    }
    else if(input[i] != a)
    {
        return false;
    }

    flip = !flip;
</code></pre>

<hr>

<p><strong>But the whole function can be changed to:</strong></p>

<pre><code>// add headers &lt;string_view&gt; &amp; &lt;algorithm&gt;
bool finalVerification(const std::string_view in) {
    std::size_t index = 0;
    return in.size() &gt; 3 &amp;&amp; std::all_of(cbegin(in) + 2u, cend(in),
                                        [&amp;](auto c) { return c == in[index++]; });
}
</code></pre>

<hr>

<h3><code>findUniqueChar</code></h3>

<p>You declare <code>size_Of_String</code> and <code>run_Through</code> as a copy of it (as integer instead of <code>std::size_t</code>, but anyway) but never modify <code>run_Through</code>  of access to  <code>size_Of_String</code>. Simply work with <code>size_Of_String</code> and remove <code>run_Through</code>. </p>

<hr>

<h3><code>findPair</code></h3>

<p>You take <code>input</code> by value, never modify it, copy it to <code>output</code>. In your case, you can work directly on <code>input</code>.</p>

<p>You declare `std::string pair_Values;, assign two first chars from output, but never use it.</p>

<p>Otherwise:</p>

<pre><code>if(input.size() &lt; 4){return "";}

//Super lucky condition just to save more time. 
if(input.size() == 4){
    if((input[0] == input[2])&amp;&amp;(input[1] == input[3])){ return input;}
    else {return "";}
}
</code></pre>

<p>Can be rewrites t (notice the redundancy with the case above, with "" instead of false) :</p>

<pre><code>if (input.size() &lt;= 4u) {
    return (input.size() == 4u &amp;&amp; input[0] == input[2] &amp;&amp; input[1] == input[3]) ? input : "";
}
</code></pre>

<hr>

<pre><code>//If the function return false, it is on
switch(finalVerification(output)){
case true: break;
case false: output = findPair(output);
}
</code></pre>

<p>can be rewrites in:</p>

<pre><code>if (!finalVerification(output)) {
  output = findPair(output);
}
</code></pre>

<hr>

<h3><code>condition</code></h3>

<p>As for <code>findPair</code> you declare <code>std::string pair_Values</code> assign many times values, but never use it.</p>

<hr>

<h2>Final word</h2>

<p>I have probably forgotten things and I haven't analyzed the logic of the program too much. I think you should turn to the few links I posted to improve your skills. Also, you should learn how to use the standard library, the different types and algorithms. Try to compile with all warnings and pedantic enabled, <a href="https://akrzemi1.wordpress.com/2018/01/24/help-the-compiler-warn-you/" rel="nofollow noreferrer">help the compiler to helping you</a>.</p>
    </div>