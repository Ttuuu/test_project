<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><p>Rather than using <code>*args</code> you can supply a default positional only argument.</p>

<pre class="lang-py prettyprint-override"><code>def temporary_cache(fn=None, *, ttl=60):
    ...
    if fn is not None:
        return decorator(fn)
    return decorator
</code></pre></li>
<li><p>If you feel following "flat is better than nested" is best, we can use <code>functools.partial</code> to remove the need to define <code>decorator</code>.</p>

<pre class="lang-py prettyprint-override"><code>def temporary_cache(fn=None, *, ttl=60):
    if fn is None:
        return functools.partial(temporary_cache, ttl=ttl)

    @functools.wraps(fn)
    def inner(*args, **kwargs):
    ...
</code></pre></li>
<li><blockquote>
  <p>for debugging, disable in production</p>
</blockquote>

<p>You can use <code>logging</code> for this. I will leave actually implementing this as an exercise.</p></li>
<li><blockquote>
  <p>I also couldn't abstain from using the new walrus operator (Python 3.8+), since I'm always looking for opportunities to use it in order to get a better feel for it.</p>
</blockquote>

<p>A very reasonable thing to do. Abuse the new feature until you know what <em>not</em> to do. +1</p>

<p>However, I don't think this is a good place for it.
Given all the brackets in such a small space I'm getting bracket blindness.
I can't tell where one bracket ends and the others starts.</p></li>
<li><p>I am not a fan of <code>func.cache = ...</code> and <code>func.cache_time</code>. You can stop assigning to a function by using <code>nonlocal</code>.</p></li>
</ul>

<p>Bringing this all together, and following some of my personal style guide, gets the following. I'm not really sure which is <em>better</em>, but it's food for thought.</p>

<pre class="lang-py prettyprint-override"><code>from datetime import datetime
import functools


def temporary_cache(fn=None, *, ttl=60):
    if fn is None:
        return functools.partial(temporary_cache, ttl=ttl)

    cache = None
    cache_time = datetime.fromordinal(1)

    @functools.wraps(fn)
    def inner(*args, **kwargs):
        nonlocal cache, cache_time
        now = datetime.now()
        if ttl &lt; (now - cache_time).total_seconds():
            cache = fn(*args, **kwargs)
            cache_time = now
        elif DEBUG:
            # for debugging, disable in production
            print("Cached", fn.__name__)
        return cache
    return inner
</code></pre>
    </div>