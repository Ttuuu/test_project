<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>If you've only learned VBA a week ago, then congratulations and a good job getting a working solution! Hopefully the information and tips here can provide some help in refining not only your solution, but to help guide your code in the future.</p>

<p>You've avoided some basic traps because you're already using <code>Option Explicit</code> and you are assigning a type to each variable on the <code>Dim</code> line. Most professional VBA developers will advise that it's a better habit to declare each variable immediately before it's used, even down lower in the method. This avoids the "wall of declarations" up front.</p>

<p>You have a potential problem on the statement to determine the <code>lastrow</code> value. It's an easy thing to miss, but when you use <code>Rows.Count</code>, you are referring to the number of rows on the <em>active worksheet</em>, NOT the number of rows on <code>ShNote</code> (which is what you want). So the fully accurate line is</p>

<pre><code>lastrow = ShNote.Range("C" &amp; ShNote.Rows.Count).End(xlUp).Row
</code></pre>

<p>Of course the same thing goes for similar statements throughout your code.</p>

<p>(I'm skipping around in your code, it will all make sense in the end I promise)</p>

<p>The values that you're using in the <code>Select Case</code> statement are simple numbers, but those numbers are meaningless unless you give them context. What do those numbers mean in your workbook and for your data? Translate that "meaning" into your code. One way can be to create a set of constants. I've defined a set like this:</p>

<pre><code>Const MAX_THRESHOLD As Long = 20
Const HIGH_THRESHOLD As Long = 17
Const MED_THRESHOLD As Long = 15
Const LOW_THRESHOLD As Long = 13
</code></pre>

<p>Now you can change the values just be changing the definitions, and your code makes more sense as you (or me) reads it.</p>

<p>Next, I have to question why you're calculating the same last row value on <code>ShPPT</code> eight times in a row. You can calculate it once, then copy the assignment to the other variables. You can also use more meaningful variable names, since we're defining why we're keeping track of the different rows.</p>

<pre><code>Dim lastSourceRow As Long
lastSourceRow = ShNote.Range("C" &amp; ShNote.Rows.Count).End(xlUp).Row

'--- start all the rows at the same value
Dim lastMaxRow As Long
Dim lastHighRow As Long
Dim lastMedRow As Long
Dim lastLowRow As Long
lastMaxRow = lastSourceRow
lastHighRow = lastSourceRow
lastMedRow = lastSourceRow
lastLowRow = lastSourceRow
</code></pre>

<p>The separate "counters" you had for the columns of each threshold hold the exact same value as the rows, so they aren't needed.</p>

<p>I see that each value is incremented separately, but there's also a very consistent pattern to the logic within each <code>Case</code>. When you see that, your first thought should be to break out a separate function that can isolate the logic in a single place. That makes it easier to change later. For example, your method could be</p>

<pre><code>Private Function NowCopyPaste2(ByVal fromRow As Long, _
                               ByVal toRow As Long, _
                               ByVal toColumn As Long, _
                               ByRef fromWS As Worksheet, _
                               ByRef toWS As Worksheet) As Long
    fromWS.Cells(fromRow, 3).Copy
    toWS.Cells(toRow + 6, toColumn).PasteSpecial xlPasteValues
    fromWS.Cells(fromRow, 5).Copy
    toWS.Cells(toRow + 6, toColumn + 1).PasteSpecial xlPasteValues
    NowCopyPaste = toRow + 1
End Function
</code></pre>

<p>This produces the same logic that exists in your original post. <strong>However</strong>, you're using copy/paste to transfer a value from one cell to another and there's a much simpler way that uses far less resources. Just simply assign the value of one cell to the other. The improved <code>NowCopyPaste</code> function is</p>

<pre><code>Private Function NowCopyPaste(ByVal fromRow As Long, _
                              ByVal toRow As Long, _
                              ByVal toColumn As Long, _
                              ByRef fromWS As Worksheet, _
                              ByRef toWS As Worksheet) As Long
    toWS.Cells(toRow + 6, toColumn).Value = fromWS.Cells(fromRow, 3).Value
    toWS.Cells(toRow + 6, toColumn + 1).Value = fromWS.Cells(fromRow, 5).Value
    NowCopyPaste = toRow + 1
End Function
</code></pre>

<p>Finally, the main logic of your code is more clear for the upfront work you've done and the clear definitions used:</p>

<pre><code>'--- values are copied to the PowerPoint worksheet and sorted by
'    columns according to the threshold tests
Dim i As Long
For i = 6 To lastSourceRow
    Select Case ShNote.Cells(i, 5).Value
        Case Is = MAX_THRESHOLD
            lastMaxRow = NowCopyPaste(i, lastMaxRow, 3, ShNote, ShPPT)

        Case Is &gt;= HIGH_THRESHOLD
            lastHighRow = NowCopyPaste(i, lastHighRow, 6, ShNote, ShPPT)

        Case Is &gt;= MED_THRESHOLD
            lastMedRow = NowCopyPaste(i, lastMedRow, 9, ShNote, ShPPT)

        Case Is &gt;= LOW_THRESHOLD
            lastLowRow = NowCopyPaste(i, lastLowRow, 12, ShNote, ShPPT)

        Case Else
            '--- what will you do here? (could be nothing but it's
            '    still a good idea to document with a comment that
            '    values in this range are not copied
    End Select
Next i
</code></pre>

<p>Notice that I also have used comments prior to each logic block that explain what the code does and why. This will always be important for maintaining the code, even if you are the only one to ever look at it again.</p>

<p>Here's the whole module in a single block:</p>

<pre><code>Option Explicit

Public Sub AnalysisClientRating()
    Const MAX_THRESHOLD As Long = 20
    Const HIGH_THRESHOLD As Long = 17
    Const MED_THRESHOLD As Long = 15
    Const LOW_THRESHOLD As Long = 13

    Dim lastSourceRow As Long
    lastSourceRow = ShNote.Range("C" &amp; ShNote.Rows.Count).End(xlUp).Row

    '--- start all the rows at the same value
    Dim lastMaxRow As Long
    Dim lastHighRow As Long
    Dim lastMedRow As Long
    Dim lastLowRow As Long
    lastMaxRow = lastSourceRow
    lastHighRow = lastSourceRow
    lastMedRow = lastSourceRow
    lastLowRow = lastSourceRow

    '--- I don't know what your entry and exit points do, but you should
    '    create a comment that gives the next developer an idea why these
    '    methods exist and why they are here. what do they do?
    Entry_Point

    '--- values are copied to the PowerPoint worksheet and sorted by
    '    columns according to the threshold tests
    Dim i As Long
    For i = 6 To lastSourceRow
        Select Case ShNote.Cells(i, 5).Value
            Case Is = MAX_THRESHOLD
                lastMaxRow = NowCopyPaste(i, lastMaxRow, 3, ShNote, ShPPT)

            Case Is &gt;= HIGH_THRESHOLD
                lastHighRow = NowCopyPaste(i, lastHighRow, 6, ShNote, ShPPT)

            Case Is &gt;= MED_THRESHOLD
                lastMedRow = NowCopyPaste(i, lastMedRow, 9, ShNote, ShPPT)

            Case Is &gt;= LOW_THRESHOLD
                lastLowRow = NowCopyPaste(i, lastLowRow, 12, ShNote, ShPPT)

            Case Else
                '--- what will you do here? (could be nothing but it's
                '    still a good idea to document with a comment that
                '    values in this range are not copied
        End Select
    Next i

    Exit_Point

End Sub

Private Function NowCopyPaste(ByVal fromRow As Long, _
                              ByVal toRow As Long, _
                              ByVal toColumn As Long, _
                              ByRef fromWS As Worksheet, _
                              ByRef toWS As Worksheet) As Long
    toWS.Cells(toRow + 6, toColumn).Value = fromWS.Cells(fromRow, 3).Value
    toWS.Cells(toRow + 6, toColumn + 1).Value = fromWS.Cells(fromRow, 5).Value
    NowCopyPaste = toRow + 1
End Function

Private Sub Entry_Point()
    '--- does something interesting?
End Sub

Private Sub Exit_Point()
    '--- does something interesting?
End Sub
</code></pre>
    </div>