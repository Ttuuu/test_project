<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Use <code>XGetPixel()</code> instead of writing your own function</h1>

<p>You should use the API provided to you by X libraries whenever possible. The implementation details might change over time, so your own copy of <code>XGetPixel()</code> might no longer be correct in the future. Granted, this is very unlikely in the case of Xlib, but it is good practice in general.</p>

<h1>Don't pass by const reference unnecessarily</h1>

<p>Don't pass small variables by const reference. You typically only do this for non-trivial types where the cost of passing by value is larger than passing by reference, for example <code>std::string</code>, <code>std::vector</code> and so on. You should never need a const reference for something like an <code>int</code>, <code>float</code> and so on. So:</p>

<pre><code>void MyGetPixelColor(Display *my_display, int x_coord, int y_coord, XColor *pixel_color)
{ ... }
</code></pre>

<h1>Return by value when appropriate</h1>

<p>Functions that return some value should preferably <code>return</code> that value, instead of taking a pointer that will be written to. So I would rewrite your code to:</p>

<pre><code>Xcolor MyGetPixelColor(Display *my_display, int x_coord, int y_coord)
{
    Xcolor pixel_color;
    XImage *screen_image = ...;
    pixel_color-&gt;pixel = XGetPixel(screen_image, 0, 0);
    XFree(screen_image);
    XQueryColor(my_display, XDefaultColormap(my_display, XDefaultScreen(my_display)), pixel_color);

    return pixel_color;
}
</code></pre>

<p>This doesn't cause extra copies of <code>Xcolor</code> to be made, since C++ compilers will use return value optimization here.</p>

<h2>Use <code>\n</code> instead of <code>std::endl</code></h2>

<p>Avoid using <code>std::endl</code>, it is equivalent to <code>\n</code> but it will also flush the output, which can hurt performance. See <a href="https://stackoverflow.com/questions/213907/c-stdendl-vs-n">this question</a> for more details.</p>
    </div>