<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Linting</h1>
<p>You should run some sort of linter or static analyzer on your code. <a href="https://www.rubocop.org/" rel="nofollow noreferrer">Rubocop</a> is a popular one, but there are others.</p>
<p>Rubocop was able to detect almost all of the style violations I am going to point out (and even some more), and was able to autocorrect almost all of them.</p>
<h1>Testing</h1>
<p>There is no automated testing in your code. Apart from the single example at the very end (which is not automated), there is no testing at all.</p>
<p>You should always strive to have as close to 100% test coverage as possible. It doesn't really matter if you have unit tests, functional tests, integration tests, end-to-end tests, or a mix of them, but you should have tests, and they should be automated.</p>
<p>In this particular case, since you are implementing a Ruby core method, there are already plenty of tests written for you in the <a href="https://github.com/ruby/spec/blob/master/core/enumerable/group_by_spec.rb" rel="nofollow noreferrer">Ruby/Spec project</a> as well as the <a href="https://github.com/ruby/ruby/blob/master/test/ruby/test_enum.rb#L288-L295" rel="nofollow noreferrer">YARV test suite</a>.</p>
<p>Running the Ruby/Spec tests against your code yields 3 errors, 1 failure, and only 3/7 passing tests.</p>
<p>The YARV test suite has 1/2 passing assertion and 1 error.</p>
<h1>Indentation</h1>
<p>The standard indentation style in the Ruby community is 2 spaces, not 4.</p>
<h1>Empty parameter list</h1>
<p>When you define a method without parameters, don't write out an empty parameter list. Just leave out the parameter list completely.</p>
<p>Instead of</p>
<pre class="lang-rb prettyprint-override"><code>def gruppiere()
</code></pre>
<p>you should have</p>
<pre class="lang-rb prettyprint-override"><code>def gruppiere
</code></pre>
<h1>Naming</h1>
<p><code>ret</code> and <code>tmp</code> aren't really good variable names. Try to make them more expressive so that they reveal their intent. Okay, so it's a temporary variable, but what does it do, what is it for, why is it there?</p>
<p>Normally, the reason to introduce a temporary variable is to give an intention-revealing name to some sub-expression. But <code>tmp</code> is not very intention-revealing.</p>
<p>At least, spell them out. You are not going to wear out your keyboard by writing <code>temp</code> instead of <code>tmp</code>, I promise.</p>
<h1>Unnecessary <code>self</code></h1>
<p><code>self</code> is the implicit receiver in Ruby if you don't explicitly provide one. There is no need to explicitly provide <code>self</code> as the receiver (except in some very limited special circumstances).</p>
<p>Instead of</p>
<pre class="lang-rb prettyprint-override"><code>self.each
</code></pre>
<p>just write</p>
<pre class="lang-rb prettyprint-override"><code>each
</code></pre>
<h1>Block delimiters</h1>
<p>The standard community style for block delimiters is to use <code>{</code> / <code>}</code> for single-line blocks and <code>do</code> / <code>end</code> for multi-line blocks.</p>
<p>There is a small minority that follows a different style: <code>{</code> / <code>}</code> for functional blocks and <code>do</code> / <code>end</code> for imperative blocks</p>
<p>Whichever style you follow, your block should use <code>do</code> / <code>end</code> since it is both multi-line and imperative.</p>
<h1>Explicit equality check against <code>nil</code></h1>
<p>You should not check for equality with <code>nil</code>. There is a method <a href="https://ruby-doc.org/core/Object.html#method-i-nil-3F" rel="nofollow noreferrer"><code>Object#nil?</code></a> which returns <code>false</code> for all objects, and the only override of this method is <a href="https://ruby-doc.org/core/NilClass.html#method-i-nil-3F" rel="nofollow noreferrer"><code>NilClass#nil?</code></a>, which returns <code>true</code>. In other words: the only object that will ever respond with <code>true</code> to <code>nil?</code> is <code>nil</code>.</p>
<p>Instead of</p>
<pre class="lang-rb prettyprint-override"><code>ret[key] == nil
</code></pre>
<p>you should write</p>
<pre class="lang-rb prettyprint-override"><code>ret[key].nil?
</code></pre>
<h1>Unnecessary array mutation</h1>
<p>In this piece of code:</p>
<pre class="lang-rb prettyprint-override"><code>tmp = []
tmp &lt;&lt; item
</code></pre>
<p>You assign an empty array to <code>tmp</code>, then immediately append <code>item</code> to the empty array. That's exactly the same as assigning an array with one item to <code>tmp</code> in the first place:</p>
<pre class="lang-rb prettyprint-override"><code>tmp = [item]
</code></pre>
<h1>Unnecessary temporary variable</h1>
<p>Once we have made the above change, this piece of code:</p>
<pre class="lang-rb prettyprint-override"><code>tmp = [item]
ret[key] = tmp
</code></pre>
<p>doesn't really need the temporary variable anymore:</p>
<pre class="lang-rb prettyprint-override"><code>ret[key] = [item]
</code></pre>
<p>See? The reason why you didn't find a good name for that variable, is that it shouldn't even be there!</p>
<h1><code>Hash</code> default value</h1>
<p>Actually, we can get rid of that whole conditional expression by instead making sure our result hash automatically initialized non-existent keys with an empty array the first time the key is accessed:</p>
<pre class="lang-rb prettyprint-override"><code>def gruppiere
  ret = Hash.new {|hash, key| hash[key] = [] }

  each do |item|
    key = yield item
    ret[key] &lt;&lt; item
  end

  ret
end
</code></pre>
<p>This, by the way, also gets rid of one of the things Rubocop was complaining about but was unable to auto-correct: the method was too long.</p>
<h1>Higher-level iteration methods</h1>
<p><code>each</code> is a very low level iteration method. It is usually barely needed in Ruby. As a general rule, in Ruby</p>
<ul>
<li>When you are writing a loop, you are definitely doing something wrong.</li>
<li>When you use <code>each</code>, you are very likely doing something wrong.</li>
</ul>
<p>The pattern you use in your code looks like this: you create a result object, then accumulate results in this object, and at the end return it. This pattern is actually a <a href="https://wikipedia.org/wiki/Fold_(higher-order_function)" rel="nofollow noreferrer"><em>Fold</em></a>. In Ruby, <em>fold</em> is provided by <a href="https://ruby-doc.org/core/Enumerable.html#method-i-inject" rel="nofollow noreferrer"><code>Enumerable#inject</code></a> (and its alias <a href="https://ruby-doc.org/core/Enumerable.html#method-i-reduce" rel="nofollow noreferrer"><code>Enumerable#reduce</code></a>) and <a href="https://ruby-doc.org/core/Enumerable.html#method-i-each_with_object" rel="nofollow noreferrer"><code>Enumerable#each_with_object</code></a>.</p>
<p>Here is what the method would look like using <code>Enumerable#each_with_object</code>:</p>
<pre class="lang-rb prettyprint-override"><code>def gruppiere
  each_with_object(Hash.new { |hash, key| hash[key] = [] }) do |element, result|
    key = yield element
    result[key] &lt;&lt; element
  end
end
</code></pre>
<h1>Iteration protocol</h1>
<p>It is standard that iterator methods return an <a href="https://ruby-doc.org/core/Enumerator.html" rel="nofollow noreferrer"><code>Enumerator</code></a> when called without a block. We can use the <a href="https://ruby-doc.org/core/Object.html#method-i-enum_for" rel="nofollow noreferrer"><code>Object#enum_for</code></a> method to create an <code>Enumerator</code> for our method. We just put the following code as the first line of our method:</p>
<pre class="lang-rb prettyprint-override"><code>return enum_for(__callee__) { size if respond_to?(:size) } unless block_given?
</code></pre>
<p>This actually fixes all of the test errors we had.</p>
<h1>Test failures</h1>
<p>Unfortunately, we have introduced one new test failure with our refactoring to auto-initialize the hash. <code>group_by</code> should not return a <code>Hash</code> that has <code>default_proc</code> set.</p>
<p>We have two choices:</p>
<ul>
<li>Set <code>default_proc</code> to <code>nil</code>.</li>
<li>Create a new hash.</li>
</ul>
<p>I opted for the latter, to create a new empty hash and <a href="https://ruby-doc.org/core/Hash.html#method-i-merge" rel="nofollow noreferrer"><code>Hash#merge</code></a> onto it, to be 100% sure that the <code>default_proc</code> as well as any internal flags are reset to defaults:</p>
<pre class="lang-rb prettyprint-override"><code>def gruppiere
  return enum_for(__callee__) { size if respond_to?(:size) } unless block_given?

  {}.merge(
    each_with_object(Hash.new { |hash, key| hash[key] = [] }) do |element, result|
      key = yield element
      result[key] &lt;&lt; element
    end
  )
end
</code></pre>
<h1><a href="https://ruby-doc.org/core/Hash.html#method-i-fetch" rel="nofollow noreferrer"><code>Hash#fetch</code></a></h1>
<p>There is actually a better option than using a <code>default_proc</code>. <code>Hash#fetch</code> will get the value corresponding to the key if the key exists and otherwise return a value of our choosing:</p>
<pre class="lang-rb prettyprint-override"><code>def gruppiere
  return enum_for(__callee__) { size if respond_to?(:size) } unless block_given?

  each_with_object({}) do |element, result|
    key = yield element
    result[key] = result.fetch(key, []) &lt;&lt; element
  end
end
</code></pre>
<h1>Monkey patching core classes / modules</h1>
<p>Monkey patching core modules is generally frowned upon. <em>If</em> you do it, it is good practice to put your monkey patches in a separate mixin with a clear name, and mix that into the class or module you want to monkey patch. That way, it shows up in the inheritance chain, and people can use the name in the inheritance chain to make a guess at the filename, when they find this strange method in their array that they have no idea where it comes from.</p>
<h1>Refinements</h1>
<p>NOTE! This advice is controversial.</p>
<p>When monkey patching, it is a good idea to wrap your monkey patch into a <em>Refinement</em>, so that consumers can only pull it in when they need it, and it doesn't pollute other parts of your code.</p>
<p>Unfortunately, most Ruby implementations don't implement Refinements, so as nice as the benefits are, it essentially makes your code non-portable.</p>
<h1>The Result</h1>
<p>If we put all of the above together, we end up with something roughly like this:</p>
<pre class="lang-rb prettyprint-override"><code>module EnumerableGruppiereExtension
  def gruppiere
    return enum_for(__callee__) { size if respond_to?(:size) } unless block_given?

    each_with_object({}) do |element, result|
      key = yield element
      result[key] = result.fetch(key, []) &lt;&lt; element
    end
  end
end

module EnumerableWithGruppiere
  refine Enumerable do
    include EnumerableGruppiereExtension
  end
end

using EnumerableWithGruppiere

puts [1, 2, 3, 4].gruppiere(&amp;:even?)
#=&gt; { false =&gt; [1, 3], true =&gt; [2, 4] }
</code></pre>
<h1>Addendum: Functional Programming</h1>
<p>You tagged your question with <a href="/questions/tagged/functional-programming" class="post-tag" title="show questions tagged 'functional-programming'" rel="tag">functional-programming</a>, but there is nothing functional about your code. There's looping, there is mutation, there are side-effects.</p>
<p>It is, however, not easy to program in a functional way in Ruby. Neither the core and standard library data structures nor the core and standard library algorithms really lend themselves to Functional Programming.</p>
<p>Here is a purely functional version that does not use mutation, side-effects, or looping:</p>
<pre class="lang-rb prettyprint-override"><code>def gruppiere
  return enum_for(__callee__) { size if respond_to?(:size) } unless block_given?

  inject({}) do |result, element|
    key = yield element
    result.merge({ key =&gt; result.fetch(key, []) + [element] })
  end
end
</code></pre>
<p>Now, you might ask yourself: that actually doesn't look that bad. Why did I say that Ruby is not amenable to Functional Programming?</p>
<p>The reason for this is <em>performance</em>.</p>
<p>Because <code>Hash</code> and <code>Array</code> are <em>mutable</em>, operations such as <code>Hash#merge</code> and <code>Array#+</code> can only be implemented by <em>copying the entire data structure</em>. Whereas if <code>Hash</code> and <code>Array</code> were <em>immutable</em>, as they are in a collections library for a functional language, these operations could be implemented by what is called <em>structural sharing</em>, which means that <code>Hash#merge</code> and <code>Array#+</code> would not return a full copy of the original but rather would return only the <em>updated</em> data and a reference to the old version. This is much more efficient.</p>
<p>For example, here is what the same code would look like in <a href="https://scala-lang.org/" rel="nofollow noreferrer">Scala</a>:</p>
<pre class="lang-scala prettyprint-override"><code>def [A, B](seq: Iterable[A]).gruppiere(classifier: A =&gt; B): Map[B, Iterable[A]] = 
  seq.foldLeft(Map.empty[B, IndexedSeq[A]]) {
    (result, element) =&gt; {
      val key = classifier(element)
      result updated(key, result.getOrElse(key, IndexedSeq.empty[A]) :+ element)
    }
  }

Iterable(1, 2, 3).gruppiere { _ % 2 == 0 }
//=&gt;Map(false -&gt; Iterable(1, 3), true -&gt; Iterable(2))
</code></pre>
<p>As you can see, it looks more or less identical. Some names are different (e.g. <code>foldLeft</code> instead of <code>inject</code>, <code>getOrElse</code> instead of <code>fetch</code>, etc.), and there are some static type annotations. But other than that, it is the same code. The main difference is in the performance: <code>Map.updated</code> does not copy the map, it returns a map which shares all its data except the one updated key-value-pair with the original. The same applies to <code>IndexedSeq.:+</code> (an alias for <code>IndexedSeq.append</code>).</p>
    </div>