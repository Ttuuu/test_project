<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>M.Doerner has explained the time complexity thoroughly, so I won't dive into that again. Instead I have refactored your solution in a way that makes your rather unorthodox algorithm more efficient (cuts the time with more than a half - but with same time complexity). See my inline comment below.</p>
<pre><code>// HH: Return an IEnumerable&lt;string&gt; to make it possible to yield return each permutation when ready
public IEnumerable&lt;string&gt; GenerateReview(string source)
{
  // HH: Start with a list with an empty string in order to have a uniform loop for all elements in source
  var permutations = new List&lt;string&gt; { "" };
  int capacity = 1; // HH: The capacity (count of permutations) in the next list of permutations

  // HH: Use a for loop (which is often faster than foreach) and because the index is used below
  for (int j = 0; j &lt; source.Length; j++)
  {
    // HH: Make the current char a string once
    string currentChar = source[j].ToString();
    // HH: Next permutation list is initialized with its number of permutations as capacity
    var nextPermutations = new List&lt;string&gt;(capacity *= (j + 1));

    foreach (var permutation in permutations)
    {
      for (int i = 0; i &lt; permutation.Length + 1; i++)
      {
        var nextPermutation = permutation.Insert(i, currentChar);
        nextPermutations.Add(nextPermutation);
        // HH: If at the last char in source - then yield return the full permutation
        if (j == source.Length - 1)
          yield return nextPermutation;
      }
    }

    permutations = nextPermutations;
  }
}
</code></pre>
<p>It has still the same huge memory consumption for larger inputs. For instance a string like <code>"ABCDEFGHIJK"</code> will build a list of <code>11! = 39,916,800</code> strings before the method finally returns.</p>
    </div>