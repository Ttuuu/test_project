<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<pre><code>public List&lt;Rover&gt; roverList = new List&lt;Rover&gt;();
</code></pre>
</blockquote>

<p>This field can (and should) be made private.  We don't want strangers messing around with our rovers!</p>

<p>While we're at it, let's change the name from <code>roverList</code> to <code>rovers</code> -- we don't need the name to reflect the fact that it's a <em>list</em> of rovers.</p>

<p>Finally, we can make the field <a href="https://msdn.microsoft.com/en-us/library/acdd6hb7.aspx" rel="nofollow"><code>readonly</code></a>.</p>

<hr>

<blockquote>
<pre><code>public void DestroyRovers()
{
    for (int n = roverList.Count-1; n &gt;= 0; n--)
    {
        Rover rover = roverList[n];

        if (rover.RoverDead())
        {
            roverList.Remove(rover);
        }
    }
}
</code></pre>
</blockquote>

<p>Here we're removing all the dead rovers from the list. There's a method <a href="https://msdn.microsoft.com/en-us/library/wdka673a(v=vs.110).aspx" rel="nofollow"><code>RemoveAll</code></a> that can do this for us.</p>

<pre><code>public void DestroyRovers()
{
    this.rovers.RemoveAll(rover =&gt; rover.RoverDead());
}
</code></pre>

<p><code>rover.RoverDead()</code> looks strange to me; I think <code>IsDead</code> would be a better name. <code>IsDead</code> is a good candidate for a property since we're just returning the result of a quick comparison, so let's change this</p>

<blockquote>
<pre><code>public bool RoverDead()
{
    return this.lifeTime &gt; 0;
}
</code></pre>
</blockquote>

<p>to this</p>

<pre><code>public bool IsDead
{
    get { return this.lifeTime &gt; 0; }
}
</code></pre>

<p>Now our method looks better:</p>

<pre><code>public void DestroyRovers()
{
    this.rovers.RemoveAll(rover =&gt; rover.IsDead);
}
</code></pre>

<hr>

<blockquote>
<pre><code>public void UpdateRovers()
{
    for (int n = roverList.Count-1; n &gt;= 0; n--)
    {
        Rover rover = roverList[n];
        rover.UpdateRover();
    }
}
</code></pre>
</blockquote>

<p>We can use <code>Enumerable.Reverse</code> to do the reversing for us. It's not much of a change, but I think it makes it a little easier for the reader to see exactly what is happening:</p>

<pre><code>public void UpdateRovers()
{
    foreach (var rover in Enumerable.Reverse(this.rovers))
    {
        rover.Update();
    }
}
</code></pre>
    </div>