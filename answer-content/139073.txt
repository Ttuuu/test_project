<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I would use a cheap a DistanceQuick to dismiss it cheap  </p>

<p>Do you really need double?  That is expensive.<br>
decimal or float won't do.   </p>

<p>Are your points integer?  ixi = dxd if d if d%1 = 0;</p>

<pre><code>private static double Distance(Point p1, Point p2)
{
    return Math.Sqrt(Math.Pow(p2.X - p1.X, 2) + Math.Pow(p2.Y - p1.Y, 2));
}
private static double DistanceQuick(Point p1, Point p2)
{
    // distance will this or less
    double deltaX = Math.Abs(p2.X - p1.X);
    double deltaY = Math.Abs(p2.Y - p1.Y);
    return deltaX &gt; deltaY ? deltaX : deltaY;
}    
private List&lt;Point&gt; OrderByDistance(List&lt;Point&gt; pointList)
{
    var orderedList = new List&lt;Point&gt;();
    var currentPoint = pointList[0];
    while (pointList.Count &gt; 1)
    {
        orderedList.Add(currentPoint);
        pointList.RemoveAt(pointList.IndexOf(currentPoint));
        var closestPointIndex = 0;
        var closestDistance = double.MaxValue;
        for (var i = 0; i &lt; pointList.Count; i++)
        {
            var distanceQuick = DistanceQuick(currentPoint, pointList[i]);
            if(distanceQuick &gt; closestDistance)
                continue;
            var distance = Distance(currentPoint, pointList[i]);
            if (distance &lt; closestDistance)
            {
                closestPointIndex = i;
                closestDistance = distance;
            }
        }    
        currentPoint = pointList[closestPointIndex];
    }
    // Add the last point.
    orderedList.Add(currentPoint);
    return orderedList;
}
</code></pre>
    </div>