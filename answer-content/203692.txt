<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Bearing in mind that this post is almost three years old and your last page view on this site was almost that old as well, you may have likely learned a lot about PHP, JS and HTML since then. Thus the information below may be old news</p>

<p>The answer by @Flambino has covered the main PHP (i.e. in <strong>Convert.php</strong>) code well. I have a few other points about the other PHP page (i.e. in <strong>Index.php</strong>) as well as the JavaScript code.</p>

<h1>PHP</h1>

<h3>Use <code>foreach</code> on array in associative manner</h3>

<p>The code that adds the <code>&lt;option&gt;</code> elements to the select list manually increments the variable used to generate the <em>value</em> attribute:</p>

<blockquote>
<pre><code>$files = glob('img/*.{png}', GLOB_BRACE);   //all .png files from the img/ folder are being dropped in a dropdown menu
$value = 0;
foreach($files as $file) {  
    echo '&lt;option value='.$value.'&gt;'.str_replace('img/','',$file).'&lt;/option&gt;'.PHP_EOL;
    $value++;
}
</code></pre>
</blockquote>

<p>Because <a href="http://php.net/glob" rel="nofollow noreferrer"><code>glob()</code></a> returns an array (except when an error occurs, in which case it returns <code>FALSE</code>), the keys will be numeric starting at 0 so use the <code>foreach (array_expression as $key =&gt; $value)</code> form of <code>foreach</code> to avoid manually updating <code>$value</code>:</p>

<pre><code>foreach($files as $value =&gt; $file) {  
    echo '&lt;option value='.$value.'&gt;'.str_replace('img/','',$file).'&lt;/option&gt;'.PHP_EOL;
}
</code></pre>

<h1>JavaScript</h1>

<h3>Separate JavaScript code from HTML</h3>

<p>While this is currently a small single page application, it is good practice to separate JavaScript function calls from the HTML. For example, the <em>onload</em> attribute of the body tag and the <em>onclick</em> attribute of the button could be removed and instead event listeners can be added in the JavaScript (e.g. using <a href="https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener" rel="nofollow noreferrer"><code>document.addEventListener()</code></a> for the <a href="https://developer.mozilla.org/en-US/docs/Web/Events/DOMContentLoaded" rel="nofollow noreferrer"><code>DOMContentLoaded</code></a> event on the page and the <a href="https://developer.mozilla.org/en-US/docs/Web/Events/click" rel="nofollow noreferrer"><code>click</code></a> event for the button. That way if one person was updating the HTML while the other updated the JavaScript, they could do so independently. </p>

<h3>Cache DOM references</h3>

<p>It would also be good practice to store references to DOM elements in variables. For example, <code>document.getElementById("image")</code>, and <code>document.getElementById("imageID")</code>. Consider the latter element - if it was stored in a variable:</p>

<pre><code>var imageSelect = document.getElementById("imageID");
</code></pre>

<p>Then it could simplify the following line:</p>

<blockquote>
<pre><code>imageID = document.getElementById("imageID").options[document.getElementById("imageID").selectedIndex].innerHTML;
</code></pre>
</blockquote>

<p>To this:</p>

<pre><code>imageID = imageSelect.options[imageSelect.selectedIndex].innerHTML;
</code></pre>

<p>which is much shorter, and has a lot fewer queries in the DOM.</p>

<h3>Limit scope of variables</h3>

<p>Whenever a variable is assigned without the <a href="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Statements/var" rel="nofollow noreferrer"><code>var</code></a> keyword, it is added to the global scope (i.e. <a href="https://developer.mozilla.org/en-US/docs/Web/API/Window" rel="nofollow noreferrer"><code>window</code></a>). This can lead to unintentional side-effects if multiple functions use the same variable name. </p>

<p>While it is was posted a few years ago, many of the topics are still relevant in <a href="https://ilikekillnerds.com/2015/02/stop-writing-slow-javascript/" rel="nofollow noreferrer">this article about optimizing JavaScript code</a> .</p>
    </div>