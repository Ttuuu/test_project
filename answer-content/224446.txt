<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The first thing I would note is that you should point out non obvious features of your implementation. The nice thing that is not immediately obvious is that when all external references are gone the object is automatically deleted from the <code>make_one()::values</code> set.</p>

<p>This is not really a requirement of a flyweight.<br>
But a nice little trick here.</p>

<p>So if the automatic deletion is required then the answers to the question are:</p>

<blockquote>
  <p>Can I avoid requiring enable_shared_from_this?</p>
</blockquote>

<p>No. I don't think so.  </p>

<p>You could re-invent some reference counting model but that seems a lot of work in comparison to simply using the standard libraries.</p>

<p>As an alternative, You can get around it slightly by using <code>std::set&lt;std::weak_ptr&lt;T&gt;&gt;</code> the trouble here is that even though the resource would be cleaned up the actual space for the resource would be maintained after the object is destroyed.</p>

<p>If on the other hand automatic deletion is not required.</p>

<blockquote>
  <p>Can I avoid requiring enable_shared_from_this?</p>
</blockquote>

<p>Yes. there are simpler ways that this could be written if there is no requirement to delete upon all external references going away. Now if you want it again it will still be there.</p>

<pre><code>template&lt;class T&gt;
T const&amp; make_one(const T&amp; value) {

    static std::set&lt;T&gt; values;

    auto result = values.insert(value);
    return *(result.first);
}
</code></pre>

<blockquote>
  <p>Can I make it thread safe without too much trouble?</p>
</blockquote>

<p>Yes simply add a lock on the <code>make_one()</code></p>

<blockquote>
  <p>Any other ideas for improvement.</p>
</blockquote>

<p>You could add the ability to move an object into your <code>make_once()</code> rather than copy it each time. Even better would be to allow the construction of T from its parameters.</p>

<pre><code>// Move an object in your set
template&lt;typename T&gt;
std::shared_ptr&lt;const T&gt; make_one(T&amp;&amp; value)

// Emplace a value in your set
template&lt;typename T, typename... Args&gt;
std::shared_ptr&lt;const T&gt; make_one(Args&amp;&amp;... value)
</code></pre>
    </div>