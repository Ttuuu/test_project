<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here is what I understood from your question. I'm still unsure since you didn't provide a detailed description about how the input is transformed into the output, and why some elements do not appear in the output.</p>

<p>Given:</p>

<ul>
<li>A list of <em>element types</em></li>
<li>A <em>utility function</em> that calculates a value for an element, given its index and type</li>
</ul>

<p>Calculate a sublist of the given types, such that:</p>

<ul>
<li>The sum of the utility function's values for the resulting list is maximal</li>
<li>In the sublist, adjacent elements must not have the same type</li>
<li>The elements in the returned list need not be in the same order as in the given list</li>
</ul>

<p>Based on these assumptions, the idea is:</p>

<ol>
<li>Create a list of tuples <code>(type, index, value)</code></li>
<li>Sort the list so that the largest values come first</li>
<li>Repeatedly take the first element from this sorted list whose type differs from the type at the end of the result</li>
<li>From this filtered list, keep only the <code>index</code> from the tuples</li>
</ol>

<p>And, after a while of programming, the corresponding code is:</p>

<pre><code>import collections

from typing import List, Callable


def max_sublist(types: List[int], utility: Callable[[int, int], float]) -&gt; List[int]:
    """
    Returns the indices into the types list such that the sum of the
    utility values is maximized and adjacent items from the result
    list don't have the same type.

    :param types: a list of arbitrary integers
    :param utility: a function that returns the value of the item,
    based on its (index, type)
    """

    Elem = collections.namedtuple('Elem', 'type index value')

    elems = [Elem(type, index, utility(type, index))
             for index, type in enumerate(types)]

    sorted_elems = sorted(elems, key=lambda elem: elem.value, reverse=True)

    # Repeatedly take the first element from sorted_elems
    # whose type differs from the type at the end of the result.
    remaining = sorted_elems[:]
    relevant_elems: List[Elem] = []
    done = False
    while not done:
        done = True
        for i, elem in enumerate(remaining):
            if len(relevant_elems) == 0 or elem.type != relevant_elems[-1].type:
                relevant_elems.append(elem)
                remaining.remove(elem)
                done = False
                break

    return [elem.index for elem in relevant_elems]


def test_max_sublist():
    result = max_sublist(
        [1, 1, 1, 0, 0, 1, 0, 1, 1, 1],
        lambda type, index: 2 ** -index)
    print(result)

    assert result == [0, 3, 1, 4, 2, 6, 5]


if __name__ == '__main__':
    test_max_sublist()
</code></pre>

<p>In the programming phase, I used the following and a few more Stack Overflow answers:</p>

<ul>
<li><p><a href="https://stackoverflow.com/questions/34985845/how-to-remove-adjacent-duplicate-elements-in-a-list-using-list-comprehensions">https://stackoverflow.com/questions/34985845/how-to-remove-adjacent-duplicate-elements-in-a-list-using-list-comprehensions</a></p></li>
<li><p><a href="https://stackoverflow.com/questions/2970608/what-are-named-tuples-in-python">https://stackoverflow.com/questions/2970608/what-are-named-tuples-in-python</a></p></li>
<li><p><a href="https://stackoverflow.com/questions/3749512/python-group-by">https://stackoverflow.com/questions/3749512/python-group-by</a><br>
I first wanted to use this but then realized that it would only be "almost correct".</p></li>
<li><p><a href="https://stackoverflow.com/questions/1859072/python-continuing-to-next-iteration-in-outer-loop">https://stackoverflow.com/questions/1859072/python-continuing-to-next-iteration-in-outer-loop</a><br>
Because I didn't want to create inner functions, I finally settled on the traditional <code>done = False</code> variable.
I'm not happy with this code though since it is larger than the whole rest of the function.</p></li>
<li><p><a href="https://stackoverflow.com/questions/34269772/type-hints-in-namedtuple">https://stackoverflow.com/questions/34269772/type-hints-in-namedtuple</a><br>
Since you mentioned Python 3.5 in your code, the answers don't apply here.
In PyCharm, the last line of code produces a warning because the exact type
of the returned list cannot be determined by the IDE.</p></li>
</ul>

<p>The input format and the output format are mostly irrelevant to the question. Therefore it is good that you separated the I/O code from the interesting computation.</p>

<p>You don't need classes and objects for everything. As you can see, my code does not need any <code>Object</code> or <code>ObjectList</code> classes, it just needs functions.</p>

<p>Python provides the tools for manipulating lists efficiently. Steps 1, 2 and 4 almost fit into a single line of code, each. Only step 3 was difficult since it didn't fit into the typical processing model that the Python standard library supports.</p>
    </div>