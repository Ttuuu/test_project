<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I should start with the fact that I don't entirely agree with the widespread belief that "explicit is better than implicit". I think in this case, it's probably at least as good to have a class that just implicitly converts to the right type:</p>

<pre><code>class file { 
    typedef FILE *ptr;

    ptr wrapped_file;
public:
    file(std::string const &amp;name, std::string const &amp;mode = std::string("r")) : 
        wrapped_file(fopen(name.c_str(), mode.c_str()))    
    { }

    operator ptr() const { return wrapped_file; }

    ~file() { if (wrapped_file) fclose(wrapped_file); }
};
</code></pre>

<p>I haven't tried to make this movable, but the same general idea would apply if you did. This has (among other things) the advantage that you work with a <code>file</code> directly as a file, rather than having the ugly (and mostly pointless) <code>.get()</code> wart, so code would be something like:</p>

<pre><code>file f("myfile.txt", "w");

if (!f) {
   fprintf(stderr, "Unable to open file\n");
   return 0;
}

fprintf(f, "Hello world");
</code></pre>

<p>This has a couple of advantages. The aforementioned cleanliness is a fairly important one. Another is the fact that the user now has a fairly normal object type, so if they want to use overloading roughly like they would with an ostream, that's pretty easy as well:</p>

<pre><code>file &amp;operator&lt;&lt;(file &amp;f, my_type const &amp;data) { 
    return data.write(f);
}

// ...

file f("whatever", "w");
f &lt;&lt; someObject;
</code></pre>

<p>In short, if the user wants to do C-style I/O, that works fine. If s/he prefers to do I/O more like iostreams use, a lot of that is pretty easy to support as well. Most of it is still just syntactic sugar though, so it generally won't impose any overhead compare to using a <code>FILE *</code> directly.</p>
    </div>