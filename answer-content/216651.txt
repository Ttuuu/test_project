<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>@200_success's suggestion seems like the right play here.</p>

<p>That said, I thought it was worth pointing out a couple small improvements to your approach:</p>

<ul>
<li><code>major</code> need only be the element itself (since you can look up its value in the accumulator)</li>
<li>Since you tagged this <code>functional-programming</code>, you can use expressions everywhere, and avoid the <code>if</code> statement.</li>
</ul>

<p>Revised code:</p>

<pre><code>const findMajorityElem = lst =&gt; lst.reduce((acc, x) =&gt; {
  acc[x] = acc[x] ? acc[x] + 1 : 1;
  const maxCnt = acc[acc.major] || 0
  acc.major = acc[x] &lt;= maxCnt ? acc.major : x
  return acc
}, {major: null}).major
</code></pre>

<p>And just for fun, again based on your tag, here's a single-expression solution in Ramda.  Again, I don't recommend actually using this given that Boyer-Moore exists:</p>

<pre><code>pipe(
  groupBy(identity), 
  map(length), 
  toPairs, 
  converge( reduce(maxBy(last)), [head, identity] ),
  head, 
  parseInt
)(lst)
</code></pre>

<p>You can <a href="https://goo.gl/sNReAW" rel="nofollow noreferrer">try it here</a></p>
    </div>