<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>If you want efficient, concise and elegant solution for Game of Life you do want to use an array library instead of resorting to lists. Here is a simple and fast implementation using <a href="https://github.com/lehins/massiv" rel="nofollow noreferrer"><code>massiv</code></a> that automatically parallelizes computation of each intermediate state of game of life. The core feature in this implementation is the <code>lifeStencils</code>. Documentation for massiv stencils is available in the haddock as well as in the readme on github, but I can expend explanation in here a bit as well, if necessary.</p>

<p>You can run it with:</p>

<pre><code>$ clear
$ stack gameOfLife.hs 30 50
</code></pre>

<p>Initial state will be randomly generated using <code>splitmix</code> package.</p>

<pre class="lang-hs prettyprint-override"><code>#!/usr/bin/env stack
{- stack --resolver lts-14.0 script --optimize --package massiv --package splitmix --package random -}
module Main where

import Control.Concurrent
import Data.Massiv.Array as A
import Data.Massiv.Array.Mutable.Algorithms (iterateUntilM)
import Data.Word
import System.Environment
import System.Random
import System.Random.SplitMix (initSMGen)

lifeRules :: Word8 -&gt; Word8 -&gt; Word8
lifeRules 1 2 = 1
lifeRules _ 3 = 1
lifeRules _ _ = 0

lifeStencil :: Stencil Ix2 Word8 Word8
lifeStencil = makeStencil (Sz (3 :. 3)) (1 :. 1) $ \ get -&gt;
  lifeRules &lt;$&gt; get (0 :. 0) &lt;*&gt;
  (get (-1 :. -1) + get (-1 :. 0) + get (-1 :. 1) +
   get ( 0 :. -1)         +         get ( 0 :. 1) +
   get ( 1 :. -1) + get ( 1 :. 0) + get ( 1 :. 1))

life :: Array S Ix2 Word8 -&gt; Array DW Ix2 Word8
life = mapStencil Wrap lifeStencil

printState :: Array S Ix2 Word8 -&gt; IO ()
printState arr = do
  let consCell v acc
        | v == 0 = '.' : acc
        | otherwise = '*' : acc
  A.forM_ (foldrWithin Dim1 consCell "" arr) putStrLn
  putStrLn $ "\ESC[" ++ shows (A.totalElem $ A.size arr) "A"

main :: IO ()
main = do
  [r, c] &lt;- fmap Prelude.read &lt;$&gt; getArgs
  smGen &lt;- initSMGen
  let bool2Word8 b = if b then 1 else 0
      initRandom = compute (bool2Word8 &lt;$&gt; randomArray smGen split random Par (Sz2 r c))
  () &lt;$ iterateUntilM
    (\ _ state _ -&gt; False &lt;$ (printState state &gt;&gt; threadDelay 20000))
    (const life)
    initRandom
</code></pre>

<p>Here are some important optimizations that are implemented here:</p>

<ul>
<li>Using stencils we get optimal, safe indexing of cells while avoiding bounds checking. Also border checking is handled automatically for us with <code>Wrap</code></li>
<li>As mentioned before, computation of next state is performed in parallel</li>
<li>Because of how <code>iterateUntilM</code> works, during the whole lifetime of the program there are only two arrays ever allocated, therefore it is extremely memory efficient.</li>
</ul>
    </div>