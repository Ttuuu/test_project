<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Charles is completely right, regex is the best solution for such task.</p>

<p>First I would define extension for <code>String</code> to match regex</p>

<pre><code>extension String {

  func match(regex: String) -&gt; Bool {
    return NSPredicate(format: "SELF MATCHES %@", regex).evaluate(with: self)
  }
}
</code></pre>

<p>Then your search function can be done like this:</p>

<pre><code>// OR case
func searchItems() -&gt; [Model] {
  guard let searchWords = searchController.searchBar.text?.split(separator: " ") {
    return [allItems] // Or you can return empty array, depending on your requirements
  }
  // .* = any characters
  // (?i) = case insensitive
  // (word1|word2) = words to search using OR
  // .* = any characters
  let searchRegex = ".*(?i)(\(searchWords.joined(separator: "|"))).*"
  return allItems.filter { $0.drug.match(regex: searchRegex) }
}

// AND case
func searchItems() -&gt; [Model] {
  guard let searchWords = searchController.searchBar.text?.split(separator: " ") {
    return [allItems] // Or you can return empty array, depending on your requirements
  }

  let mappedSearchWords = searchWords.map { "(?=.*\($0))" }
  // .* = any characters
  // (?i) = case insensitive
  // (?=.*word1)(?=.*word2)) = words to search using AND
  // .* = any characters
  let searchRegex = ".*(?i)" + mappedSearchWords.joined() + ".*"
  return allItems.filter { $0.drug.match(regex: searchRegex) }
}

// My general recommendation is to declare search function with search text and items as input
// Then it can be easily used for testing
// OR case
func searchAnyWords(from text: String, in items: [Model]) -&gt; [Model]
// AND case
func searchAllWords(from text: String, in items: [Model]) -&gt; [Model]
</code></pre>
    </div>