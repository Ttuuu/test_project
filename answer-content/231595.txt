<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ol>
<li>You can use <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/with.html" rel="nofollow noreferrer"><code>with</code></a> to avoid repeating the calculation of the <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.ranges/-int-range/start.html" rel="nofollow noreferrer"><code>start</code></a> of your <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.ranges/-int-range/index.html" rel="nofollow noreferrer"><code>IntRange</code></a>.</li>
<li>You can use <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/to-int.html" rel="nofollow noreferrer"><code>toInt</code></a> and integer division and multiplication as a more direct approach to calculating the <code>start</code> of your <code>IntRange</code> (similiar to how <a href="https://codereview.stackexchange.com/users/6499/roland-illig">Roland Illig</a> <a href="https://codereview.stackexchange.com/a/231368/91387">suggests</a>).</li>
<li>You can use <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.ranges/until.html" rel="nofollow noreferrer"><code>until</code></a> to clarify that your <code>IntRange</code>s are "[0,10)", "[10,20)", etc. which I think may be a bit clearer than "[0,9]", "[10,19]", etc. as the later will make readers think twice about if these ranges form a contiguous range or not whereas using closed-open ranges makes it, in my opinion, more clear.</li>
</ol>

<p>Example:</p>

<pre><code>val mappedTrips = trips.groupBy {
    with(it.duration.toInt() / 10 * 10) { this until this + 10 }
}
</code></pre>
    </div>