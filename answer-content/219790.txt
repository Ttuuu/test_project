<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><p>Let me first assume that your <code>unique_ptr</code> is supposed to be movable. Then, any basic test case whould have unrevealed this:</p>

<pre><code>unique_ptr&lt;int&gt; ptr1(new int());
unique_ptr&lt;int&gt; ptr2 = std::move(ptr1); // Fails to compile
</code></pre>

<p>Recall that <code>= delete</code>-ing special member functions means user-declaring them. And user-declared copy and copy assignment constructors prevent compiler-generated move (assignment) constructors! You have to manually define them. This case is by the way covered by the <a href="https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#c21-if-you-define-or-delete-any-default-operation-define-or-delete-them-all" rel="nofollow noreferrer">rule of five/C.21 Core Guidelines</a>, and also have a look at the table posted in <a href="https://stackoverflow.com/a/24512883/9593596">this SO answer</a> for an overview of compiler-generated/-deleted/not-declared special member functions.</p></li>
<li><p>Is the non-availability of an implicit conversion to <code>bool</code> intended? Checking if a (smart) pointer is in an empty/null state is so common in ordinary control flow statements that clients will expect this to compile:</p>

<pre><code>unique_ptr&lt;SomeType&gt; ptr = ...;

if (ptr) ... // currently fails to compile
</code></pre>

<p>But not that this might be debatable. Implicit conversions can cause a lot of pain, so if you intend to not allow them for the sake of a more explicit</p>

<pre><code>if (ptr == nullptr) ... 
</code></pre>

<p>that's a design decision. But one that should be documented in a comment at the top of the class.</p></li>
<li><p>Except the non-<code>explicit</code>-ness of the second constructor (thanks to @Deduplicator for pointing that out) taking a <code>std::nullptr_t</code>, it is superfluous. You can construct an empty <code>unique_ptr</code> by</p>

<pre><code>unique_ptr&lt;SomeType&gt; empty{nullptr};
</code></pre>

<p>which simply invokes the first constructor taking a <code>T*</code> argument. I would remove the second constructor.</p></li>
<li><p>... and add a default constructor that initializes <code>ptr_resource</code> to <code>nullptr</code>, as</p>

<pre><code>unique_tr&lt;SomeType&gt; empty;
</code></pre>

<p>might be a way of constructing an empty smart pointer that users would expect to compile.</p></li>
<li><p>Move-constructing the <code>ptr_resource</code> in the constructor initializer by <code>ptr_resource(std::move(raw_resource))</code> doesn't make much sense. Just copy the pointer instead. The comment <code>// std::move is used because it is used to indicate that an object may be moved from other resource.</code> is rather confusing, because <code>T* raw_resource</code> is already a pointer, and hence a <em>handle</em> to a resource, not the resource itself.</p></li>
<li><p>The <code>release</code> member function can be implemented more conveniently as</p>

<pre><code>T* release() noexcept
{
    return std::exchange(ptr_resource, nullptr);
}
</code></pre></li>
<li><p>I wouln't let the <code>reset</code> member function throw when the input is a <code>nullptr</code>. Why shouldn't it be allowed to <code>reset</code> a <code>unique_ptr</code> with a <code>nullptr</code>, turning it back into an empty state?</p></li>
<li><p>The only facilities you use from the standard library are <code>std::move</code> and <code>std::swap</code>. Those are in <code>&lt;utility&gt;</code>, so you don't need to include <code>&lt;algorithm&gt;</code>, which is probably much heavier in terms of compile times.</p></li>
<li><p>I would omit the <code>this-&gt;</code> prefix, it's unnecessarily verbose. But that might be a matter of taste.</p></li>
<li><p>Have you considered custom deleters? This makes the class template more reusable in scenarios other than pointers to heap resources, e.g. closing a file upon destruction etc.</p></li>
</ul>
    </div>