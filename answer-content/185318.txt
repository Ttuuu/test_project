<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>In your <code>check_palindrome</code> function you can directly return the result of the comparison:</p>

<pre><code>def check_palindrome(s):
     """Checks whether the given string is palindrome"""
     return s == s[::-1]
</code></pre>

<p>As <a href="https://codereview.stackexchange.com/questions/185308/largest-palindrome-made-from-product-of-3-digit-numbers/#comment353382_185308">@RobAu said in the comments</a>, you should keep only the current maximum product, instead of building a (potentially very large) list of all products.</p>

<p>You can also reduce the number of products you need to check by realizing that if you checked <code>999*998</code>, you don't need to check <code>998*999</code>. This can be achieved by letting the inner loop start at <code>i</code>.</p>

<pre><code>max_product = 0
for i in range(999, 900, -1):
    for j in range(i, 900, -1):
        product = i * j
        if check_palindrome(str(product)):
            max_product = max(max_product, product)
            print "i =", i, "j = ", j, "for", product
print max_product
</code></pre>

<p>Note that Python has an official style-guide, <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">PEP8</a>, which recommends using whitespace to separate operators and after commas in lists (including argument lists).</p>

<p>As a final step, I would make this a function that returns its result, instead of printing it:</p>

<pre><code>def get_max_three_digit_product():
    max_product = 0
    for i in range(999, 900, -1):
        for j in range(i, 900, -1):
            product = i * j
            if check_palindrome(str(product)):
                max_product = max(max_product, product)
    return max_product
</code></pre>

<p>This makes the code more re-usable, in case you ever need it again.
You can execute it under a <a href="http://stackoverflow.com/questions/419163/what-does-if-name-main-do"><code>if __name__ == "__main__":</code></a> guard, which allows you to import this function from another script, without executing the function.</p>

<pre><code>if __name__ == "__main__":
    print get_max_three_digit_product()
</code></pre>
    </div>