<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Throwing in a <code>noexcept</code> function</h1>

<p>This is legal, see <a href="https://stackoverflow.com/questions/39763401/can-a-noexcept-function-still-call-a-function-that-throws-in-c17">https://stackoverflow.com/questions/39763401/can-a-noexcept-function-still-call-a-function-that-throws-in-c17</a>. However, you already have doubts about it, so that's telling you it's probably not a very proper thing to do. Compilers will also warn about this.</p>

<p>If you want your program to terminate when it can't create a window, I would make this explicit, and instead of using <code>throw</code>, call <code>std::terminate()</code> explicitly.</p>

<h1>Define a namespace for your library</h1>

<p>All your classes and structs have names with SDL prefixed, for good reasons. However, you can make it more explicit to the compiler that you want everything in a separate namespace. The advantage is that within that namespace, you don't have to use the prefix anymore. For example, you can write:</p>

<pre><code>namespace SDL {
  class Window {
    friend class Context;
  public:
    ~Window() noexcept = default;
    ...
  };

  class Context {
  public:
    explicit Context(Opts const &amp;options) noexcept;
    ~Context() noexcept;

    Window Window() const noexcept;
    Renderer Renderer() const noexcept;

  private:
    Opts options_ {};
    SDL_Window *window_ {};
    SDL_Renderer *renderer_ {};
  };
}
</code></pre>

<p>In your application, you can instantiate an Window like so:</p>

<pre><code>SDL::Window myWindow;
</code></pre>

<h1>Avoid forward declarations whenever possible</h1>

<p>Forward declarations should only be used if really necessary. Otherwise, they are just duplicating code, with the potential to make mistakes. If you are using a <code>SDL_Window *</code> in your header files, just make sure you <code>#include &lt;SDL.h&gt;</code> in it.</p>

<h1>Avoid friend classes</h1>

<p>Why is <code>SDLContext</code> a friend class of <code>SDLWindow</code>? If it needs to access some private member variables, maybe you should add public accessor functions instead? From the code you posted I don't see any reason why a friend class is necessary. In general, it is something to be avoided, since it bypasses the usual member protection scheme.</p>

<h1>Use of <code>std::experimental</code></h1>

<p>While we all would like to have the latest and greatest language features available, consider that your code might be compiled by others using older compilers. Using experimental <code>C++20</code> features might prevent them from using your code. Furthermore, <code>observer_ptr&lt;&gt;</code> is not doing anything really, it's just there as an annotation. It's there to convey to other users that this pointer is not owned. SO it is more useful to use this for the public API than for private member variables. But, that also brings me to:</p>

<h1>Have classes own their own pointers to SDL2 objects</h1>

<p>It looks a bit weird that <code>SDLWindow</code> has a private constructor that takes a pointer to an <code>SDL_Window</code>. Why not have <code>SDLWindow</code> call <code>SDL_CreateWindow()</code> itself in its constructor? The same goes for <code>SDLRenderer</code>.</p>

<p>When you do this, then <code>SDLContext</code> should no longer store pointers to <code>SDL_Window</code> and <code>SDL_Renderer</code>, but it should instead store a <code>SDLWindow</code> and <code>SDLRenderer</code> directly:</p>

<pre><code>class Context {
  Window window_;
  Renderer renderer_;

public:
  Context(...);
  ...
};
</code></pre>
    </div>