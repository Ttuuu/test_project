<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2><a href="https://stackoverflow.com/q/1452721/3964927">Avoid <code>using namespace std</code></a></h2>

<p>This can cause name collisions because it adds every name in the <code>std</code> namespace to the global namespace. For a small program like this one it's unlikely that you'll run into any problems (then again, <a href="https://stackoverflow.com/q/31593548/3964927">maybe not</a>) but it's best to get into the habit of using the <code>std::</code> prefix on names in the <code>std</code> namespace.</p>

<p>Alternatively, you can introduce <a href="http://en.cppreference.com/w/cpp/language/namespace#Using-declarations" rel="noreferrer">using declarations</a> like <code>using std::cout;</code> to add specific names to the global namespace.</p>

<h2>Avoid <code>std::endl</code> in favor of <code>\n</code></h2>

<p><a href="https://stackoverflow.com/q/213907/3964927"><code>std::endl</code> flushes the stream, which can cause a loss in performance.</a></p>

<h2>Declare variables in the most local scope possible</h2>

<p>You declare <code>num</code> at the beginning of <code>mult()</code> but you don't actually use it (and initialize it to 0) until you're inside the <code>j</code> loop. It's better to simply declare and initialize it in the same place and in the place where you start to use it.</p>

<p>I would also rename it to be more descriptive (e.g. <code>sum</code> or <code>dot_product</code>).</p>

<h2>Avoid hard-coded numbers</h2>

<p>Your code works with \$4\times 4\$ matrices but you've got <code>4</code> hard-coded all over the place. You say</p>

<blockquote>
  <p>This can easily be generalized for any nxn matrix by replacing 4 with any positive number greater than 1.</p>
</blockquote>

<p>But there are a lot of instances where <code>4</code> needs to be replaced. At the very minimum you should define 4 as a constant and use that constant in the code:</p>

<pre><code>const std::size_t N = 4; // or constexpr instead of const if your compiler supports it

int mult(int A[N][N], int B[N][N]) {
    int C[N][N];

    for (int i = 0; i &lt; N; i++) {
        for (int j = 0; j &lt; N; j++) {
            int num = 0;
            for (int k = 0; k &lt; N; k++) {
                num += A[i][k] * B[k][j];
            }
            C[i][j] = num;
            std::cout &lt;&lt; num &lt;&lt; " ";
        }
        std::cout &lt;&lt; std::endl;
    }

    return 0;
}
</code></pre>

<p>Now I just need to change the definition of <code>N</code> once to use a number other than 4.</p>

<h2>Use <code>static_assert</code> to enforce the condition that \$N &gt; 1\$</h2>

<p>If your compiler supports <a href="http://en.cppreference.com/w/cpp/language/static_assert" rel="noreferrer"><code>static_assert</code></a> you can ensure that \$N &gt; 1\$ at compile time and cause a compilation failure with a simple message to explain the problem.</p>

<h2>Function template</h2>

<p>The multiplication algorithm is basically the same for any \$N &gt; 1\$, so this function is a good candidate for a function template based on the dimension \$N\$. For example, you have <code>A</code> with <code>N = 4</code>, but in the same program you could have a matrix (2D array) <code>D</code> with <code>N = 3</code> and the same code is used to multiply with both matrices. Here's a demo using a function template:</p>

<pre><code>#include &lt;iostream&gt;
#include &lt;string&gt;

template&lt;std::size_t N&gt;
int mult(int A[N][N], int B[N][N]) {
    static_assert(N &gt; 1, "N must be greater than 1");

    int C[N][N];

    for (int i = 0; i &lt; N; i++) {
        for (int j = 0; j &lt; N; j++) {
            int num = 0;
            for (int k = 0; k &lt; N; k++) {
                num += A[i][k] * B[k][j];
            }
            C[i][j] = num;
            std::cout &lt;&lt; num &lt;&lt; " ";
        }
        std::cout &lt;&lt; std::endl;
    }

    return 0;
}

int main() {
    const std::size_t N = 4;
    int A[N][N];
    int ind = 0;
    std::cout &lt;&lt; "Default Matrix A: \n \n";

    for (int i = 0; i &lt; N; i++) {
        for (int j = 0; j &lt; N; j++) {
            A[i][j] = ind; ind++;
            std::cout &lt;&lt; A[i][j] &lt;&lt; " ";
        }
        std::cout &lt;&lt; std::endl;
    }
    std::cout &lt;&lt; "\nMultiplication of A^2: \n \n";
    mult&lt;N&gt;(A, A);

    const std::size_t N2 = 3;
    int D[N2][N2];
    ind = 0;
    std::cout &lt;&lt; "\nDefault Matrix D: \n \n";

    for (int i = 0; i &lt; N2; i++) {
        for (int j = 0; j &lt; N2; j++) {
            D[i][j] = ind; ind++;
            std::cout &lt;&lt; D[i][j] &lt;&lt; " ";
        }
        std::cout &lt;&lt; std::endl;
    }
    std::cout &lt;&lt; "\nMultiplication of D^2: \n \n";
    mult&lt;N2&gt;(D, D);
    return 0;
}
</code></pre>

<h2>Consider a <code>Matrix</code> class instead of 2D arrays</h2>

<p>Mathematical libraries implement matrices as a class. Internally, the <code>Matrix</code> class may use 2D arrays to store the data, but client code shouldn't depend on how that data is stored. A <code>Matrix</code> class can hide the implementation details from client code.</p>

<h2>Extend to non-square matrices</h2>

<p>In general, an \$N \times M\$ matrix \$A\$ can be multiplied with a matrix \$B\$ if \$B\$ is \$M \times P\$ (\$A\$ has \$M\$ columns and \$B\$ has \$M\$ rows, but otherwise the two matrices can have different dimensions). With a function template you can easily extend the multiplication function to support non-square matrices. Simply add the necessary template arguments and tweak the algorithm to use dimensions other than <code>N</code>. Here's a demo:</p>

<pre><code>#include &lt;iostream&gt;
#include &lt;string&gt;

template&lt;std::size_t N, std::size_t M, std::size_t P&gt;
int mult(int A[N][M], int B[M][P]) {
    static_assert(N &gt; 1, "N must be greater than 1");
    static_assert(M &gt; 1, "M must be greater than 1");
    static_assert(P &gt; 1, "P must be greater than 1");

    int C[N][P];

    for (int n = 0; n &lt; N; n++) {
        for (int p = 0; p &lt; P; p++) {
            int num = 0;
            for (int m = 0; m &lt; M; m++) {
                num += A[n][m] * B[m][p];
            }
            C[n][p] = num;
            std::cout &lt;&lt; num &lt;&lt; " ";
        }
        std::cout &lt;&lt; std::endl;
    }

    return 0;
}

int main() {
    int A[4][3]{
        {1, 2, 3},
        {4, 5, 6},
        {7, 8, 9},
        {10, 11, 12}
    };

    int B[3][2]{
        {1, 2},
        {3, 4},
        {5, 6}
    };

    mult&lt;4, 3, 2&gt;(A, B);
    return 0;
}
</code></pre>

<p>The demo program outputs the \$N \times P\$ (\$4 \times 2\$) matrix product:</p>

<pre class="lang-none prettyprint-override"><code>22 28
49 64
76 100
103 136
</code></pre>
    </div>