<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>If you add a running sum to the formal parameters of <code>count-iter</code>, you'll have a truly iterative piece of code. As-is, every time through <code>count-iter</code> is called, you leave a "1+ ??" waiting on the stack, which will lead to a recursion depth exceeded error on larger inputs. </p>

<pre><code>(define (count-change-true-iterative amount)
  ;; penny is not in the signiture, bacause it equals (- amount
  ;;                                                     (* half-dollar 50)
  ;;                                                     (* quarter 25)
  ;;                                                     (* dime 10)
  ;;                                                     (* nickeli 5))
  (define (count-iter sum half-dollar quarter dime nickeli)
    (cond ((&gt; (* half-dollar 50) amount)
           sum)
          ((&gt; (+ (* half-dollar 50)
                 (* quarter 25)) amount)
           (count-iter sum(+ half-dollar 1) 0 0 0))
          ((&gt; (+ (* half-dollar 50)
                 (* quarter 25)
                 (* dime 10)) amount)
           (count-iter sum half-dollar (+ quarter 1) 0 0))
          ((&gt; (+ (* half-dollar 50)
                 (* quarter 25)
                 (* dime 10)
                 (* nickeli 5)) amount)
           (count-iter sum half-dollar quarter (+ dime 1) 0))
          (else (count-iter (+ 1 sum) half-dollar quarter dime (+ nickeli 1)))))
  (count-iter 0 0 0 0 0))
</code></pre>

<p>And can thus handle a calculation like <code>(count-change-true-iterative 3232)</code> though it may take several minutes to do so. ;Value: 76915410</p>
    </div>