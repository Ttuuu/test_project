<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Wow, those methods are pretty similar.</p>

<p>Initially, these objects:
<code>List&lt;ProjectObject&lt;ExhaustEquipment&gt;&gt; exhaustEquipment</code>
<code>List&lt;ProjectObject&lt;Infiltration&gt;&gt; infiltration</code></p>

<p>are only different in which template parameter refers (<code>ExhaustEquipment</code>,<code>Infiltration</code>), so you could do a generic method:</p>

<pre class="lang-cs prettyprint-override"><code>    //this all, could be written as a Generic method, the Generic Parameter would be
    //Infiltration or ExhaustEquipment
    private static List&lt;OpenXmlElement&gt; GenericRenderElement&lt;Element&gt;(MainDocumentPart mainDocumentPart, List&lt;ProjectObject&lt;Element&gt;&gt; element, Table table)

    HtmlConverter noteConverter = new HtmlConverter(mainDocumentPart);
        var nameByBusinessElement = new Dictionary&lt;string, List&lt;ProjectObject&lt;Element&gt;&gt;&gt;();

        string elementName;
        foreach (var element in businessDictionary)
        {
            elementName = element.TargetObject.Name;
            if (!nameByBusinessElement.ContainsKey(elementName))
                nameByBusinessElement.Add(elementName, new List&lt;ProjectObject&lt;Element&gt;&gt;());

            nameByBusinessElement[elementName].Add(element);
        }


    List&lt;OpenXmlElement&gt; notes = new List&lt;OpenXmlElement&gt;();
        int noteIndex = 1;

    foreach (var element in nameByBusinessElement)
        {
            List&lt;string&gt; noteIndices = new List&lt;string&gt;();
            for (int elementNameIdx = 0; elementNameIdx &lt; element.Value.Count; elementNameIdx++)
            {
                var dataItem = element.Value[elementNameIdx];
                var row = new TableRow();
                Run superscriptRun = new Run(new RunProperties(new VerticalTextAlignment { Val = VerticalPositionValues.Superscript }));

                if (elementNameIdx == 0)
                {
                    row.Append(RenderOpenXmlElementContentCell(new Paragraph(
                        new List&lt;Run&gt; {
                            new Run(new RunProperties(), new Text(element.Key) { Space = SpaceProcessingModeValues.Preserve }),superscriptRun
                        }), 1,
                        new OpenXmlElement[] {new VerticalMerge { Val = MergedCellValues.Restart },new TableCellMargin {
                                LeftMargin = new LeftMargin { Width = "120" },
                                TopMargin = new TopMargin { Width = "80" }}
                        }));
                }
                else
                {
                    row.Append(RenderTextContentCell(null, 1, null, null, new OpenXmlElement[] { new VerticalMerge { Val = MergedCellValues.Continue } }));
                }
                row.Append(RenderTextContentCell($"{dataItem.TargetObject.AirflowScalar.ToString("R2", CultureInfo.CurrentCulture)} cfm {EnumUtils.StringValueOfEnum(dataItem.TargetObject.InfiltrationCalculationType).ToLower(CultureInfo.CurrentCulture)}"));

                if (dataItem.TargetObject.NotesHTML?.Count &gt; 0)
                {
                    foreach (var note in dataItem.TargetObject.NotesHTML)
                    {
                        var compositeElements = noteConverter.Parse(note);
                        var htmlRuns = compositeElements.First().ChildElements.Where(c =&gt; c is Run).Cast&lt;Run&gt;().Select(n =&gt; n.CloneNode(true));
                        notes.Add(new Run(htmlRuns));
                        noteIndices.Add(noteIndex++.ToString(CultureInfo.InvariantCulture));
                    }
                }

                if (elementNameIdx == element.Value.Count - 1 &amp;&amp; dataItem.TargetObject.NotesHTML?.Count &gt; 0)
                {
                    superscriptRun.Append(new Text($"({String.Join(',', noteIndices)})") { Space = SpaceProcessingModeValues.Preserve });
                }
                table.Append(row);
            }
        }

        return RenderNotesArray(table, notes, new List&lt;OpenXmlElement&gt;());
    }
</code></pre>

<p>and invoke it in the other two concrete methods:</p>

<pre class="lang-cs prettyprint-override"><code>private static List&lt;OpenXmlElement&gt; RenderExhaustEquipmentTableDataAndNotes(MainDocumentPart mainDocumentPart, List&lt;ProjectObject&lt;ExhaustEquipment&gt;&gt; exhaustEquipment,Table table) {
    return GenericRenderElement&lt;ExhaustEquipment&gt;(mainDocumentPart, exhaustEquipment, table);
}

private static List&lt;OpenXmlElement&gt; RenderInfiltrationTableData(MainDocumentPart mainDocumentPart, List&lt;ProjectObject&lt;Infiltration&gt;&gt; infiltration,Table table) {
    return GenericRenderElement&lt;Infiltration&gt;(mainDocumentPart, infiltration, table);
}
</code></pre>

<p>Well, I hope it has been helpful.</p>
    </div>