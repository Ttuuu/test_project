<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I think this is an excellent example of a bad instinct in optimization.  People like focusing on code, instead of trying to optimize the core algorithm.</p>

<p>In broad strokes, what is your algorithm?  It's to create a list of 100 items, and then loop around and delete them one at a time.  Same with a lot of the other answers here - it involves dealing with those 100 entries somehow.</p>

<p>Okay, but is there any other way to do this?</p>

<p>Well, picture in your head what happens the first loop around the 100 chairs.  You eliminate 1, 3, 5, 7, ... etc.  Basically, you're left with a series of even numbered chairs.  So when you begin 'Round 2', you're really selecting through 50 numbers - all the evens 2-100.  Is the 'answer' to that any different than the answer to 2 x getSurvivors(50)?  After all, there's no difference between (2,4,6...100) and 2 x (1,2,3...50).</p>

<p>So at bare minimum, we could do reduce our chair number down until it's odd:</p>

<pre><code>private static int getSurvivors(int numChairs) {
    if (numChairs % 2 == 0) return 2 * getSurvivors(numChairs/2);
    // rest of code goes here
}
</code></pre>

<p>So we go from having to create a list of 100 entries and remove 99 of them, to creating a list of 25 entries and removing 24 of them.  Much Better!</p>

<p>But... is there any way we could improve it for <em>odd</em> cases as well?</p>

<p>If we've got 101 chairs, we're eliminating all the odds, ending up with 2-100... with one big caveat: we have to <em>skip</em> the first entry next go-around.</p>

<p>Which expands our function into four main cases:</p>

<ul>
<li>We've got an even number of chairs, and we're eliminating the first</li>
<li>We've got an even number of chairs, and we're <em>skipping</em> the first (new!)</li>
<li>We've got an odd number of chairs, and we're eliminating the first</li>
<li>We've got an odd number of chairs, and we're skipping the first</li>
</ul>

<p>Fortunately, none of the cases are too hard to chart out.  So we could use code that looks like this:</p>

<pre><code>    private int getSurvivor(int nums, bool eliminateFirst)
    {
        if (nums &lt; 1) return -1;
        if (nums == 1) return 1;
        if (nums == 2) return (eliminateFirst ? 2 : 1);
        if (nums % 2 == 0)
        {
            if (eliminateFirst) return 2 * getSurvivor(nums / 2, eliminateFirst);
            return 2 * getSurvivor(nums / 2, eliminateFirst) - 1;
        }
        if (eliminateFirst)
            return 2 * getSurvivor((nums - 1) / 2, !eliminateFirst);
        else
            return 2 * getSurvivor((nums + 1) / 2, !eliminateFirst) - 1;
    }
</code></pre>

<p>Look at that - no lists, no removals, just a recursive function that is called log2(N) times (for 100 chairs, ~7 times.)  Best of all, it's scaleable - the original code will take a lot longer for 1,000,000 chairs; this will run nearly as quickly - multiplying the number of chairs by 1000 will only add 10 more recursive calls.</p>

<p><em>Now</em> we can focus on code tweaks and optimizations ( (num &amp; 1) instead of num % 2, &gt;&gt; 1 instead of /2, etc).</p>
    </div>