<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There are couple of things that might have been done better...</p>

<ul>
<li>Initilize the dictionary form a static constructor or call the method to initialize the field. The method should not access it internally but return a dictionary as a result. The field itself should be <code>readonly</code>.</li>
<li><code>foreach</code> could be used to iterate the <code>stringToEncode</code>.</li>
<li>Names of internal variables could be better:

<ul>
<li><code>Convert</code> sounds like a method name. The dictionary should be named <code>Conversions</code>.</li>
<li><code>nums</code> should be <code>digits</code></li>
<li><code>sb</code> should be called <code>encoded</code></li>
</ul></li>
<li><code>TryGetValue</code> could have been used instead of <code>ContainsKey</code></li>
<li>The dictionary is case-insensitive only because you put all letters there. Instead you should use the <code>StringComparer.OrdinalIgnoreCase</code> and make the dictionary <code>&lt;string, char&gt;</code> but this would be inconvenient. You could create your own <code>IEqualityComparer&lt;char&gt;</code>. This will cut in half its size .</li>
<li>I wish more <code>var</code> (optional)</li>
<li>I wish more LINQ</li>
</ul>

<p>Things that are already good:</p>

<ul>
<li>I find using a dictionary was a good choice.</li>
<li>The use of a <code>Stack</code> to reverse the order is very clever.</li>
<li>Using <code>StringBuilder</code> for efficiency is definitely a good choice either.</li>
</ul>

<hr>

<p>When we apply all suggestions the code could look like this:</p>

<p>Creating the <code>IReadOnlyDictionary</code> which returns a result and uses a couple of additional helper variables. No <code>for</code> loops.</p>

<pre><code>// pre processed conversions for letters
private static readonly IReadOnlyDictionary&lt;char, char&gt; Conversions = BuildConversionDictionary();

private static IReadOnlyDictionary&lt;char, char&gt; BuildConversionDictionary()
{
    var conversions = new Dictionary&lt;char, char&gt;(CaseInsensitiveCharComparer);

    var alphabet = Enumerable.Range('a', 'z' - 'a' + 1).Select(x =&gt; (char)x);
    var vowels = new char[] { 'a', 'e', 'i', 'o', 'u' };
    var consonants = alphabet.Except(vowels);

    // consonants are replaced with previous letter b-&gt;a, c-&gt;b, etc
    foreach (var c in consonants)
    {
        conversions.Add(c, (char)(c - 1));
    }

    // y goes to space
    // space goes to y
    conversions['y'] = ' ';
    conversions[' '] = 'y';

    // vowels are replaced with number: a-&gt;1, e-&gt;2, etc
    foreach (var (c, i) in vowels.Select((c, i) =&gt; (c, i + 1)))
    {
        conversions.Add(c, (char)('0' + i));
    }

    return conversions;
}
</code></pre>

<p>The alternative equality comparer (here I'm using a helper-factory from my libraries):</p>

<pre><code>private static IEqualityComparer&lt;char&gt; CaseInsensitiveCharComparer =
    EqualityComparerFactory&lt;char&gt;.Create
    (
        (x, y) =&gt; StringComparer.OrdinalIgnoreCase.Equals(x.ToString(), y.ToString()),
        obj =&gt; StringComparer.OrdinalIgnoreCase.GetHashCode(obj.ToString())
    );
</code></pre>

<p>The refactored <code>encode</code> (which should be <code>Encode</code>). What has changed here is that I first check for digits. If it's not one and we have some then <em>dump</em> the stack to the builder and clear it, othewise do the rest. Below the loop we have to <em>dump</em> it once again in case there are some digits left at the end.</p>

<pre><code>public static string Encode(string stringToEncode)
{
    if (string.IsNullOrEmpty(stringToEncode)) throw new ArgumentException(nameof(stringToEncode));

    // our return val (efficient Appends)
    var encoded = new StringBuilder();

    // used for reversing the numbers
    var digits = new Stack&lt;char&gt;();

    // iterate the input string
    foreach (var c in stringToEncode)
    {
        if (char.IsDigit(c))
        {
            digits.Push(c);
            continue;
        }

        if (digits.Any())
        {
            encoded.Append(digits.ToArray());
            digits.Clear();
        }

        if (Conversions.TryGetValue(c, out var converted))
        {
            encoded.Append(converted);
            continue;
        }

        // something else, undefined
        encoded.Append(c);
    }

    // "dump" what's left
    encoded.Append(digits.ToArray());

    return encoded.ToString();
}
</code></pre>

<hr>

<p>I think you cannot do anything else having <em>only</em> 60 minutes. </p>
    </div>