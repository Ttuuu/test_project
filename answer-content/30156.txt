<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Some notes:</p>

<ul>
<li><p>Mutable global state is a bad programming practice. Instead, pass values as arguments so functions are black boxes that take values (as arguments) and return values. If such a function does not perform any side-effect (print to console, write a file, ...), then it's a "pure function". Try to write pure functions whenever possible.</p></li>
<li><p>Conditionals: Don't write a fallback (<code>return False</code>) where some branches get and others don't. Non-overlapping conditionals are more clear.</p></li>
<li><p>Use <code>name_of_variable</code> and <code>name_of_function</code>. </p></li>
<li><p>Try to use Python 3 whenever possible.</p></li>
</ul>

<p>I'd write:</p>

<pre><code>from random import randint
from itertools import count

def is_guess_correct(number, guess):
    if guess == number:
        return True
    elif guess &lt; number:
        print("The number is HIGHER.")
        return False
    else:
        print("The number is LOWER.")
        return False

def is_valid_guess(number_string):
    return number_string.isdigit()

def get_number(guess_iteration):
    while 1:
        number_string = input("({0}) Guess a number: ".format(guess_iteration))
        if is_valid_guess(number_string):
            return int(number_string)
        else:
            print("Please enter a valid integer!")

def run_game(nmin, nmax):
    number = randint(nmin, nmax)
    print("I'm thinking of a number between {0} and {1}...".format(nmin, nmax))

    for guess_iteration in count(1):
        guess = get_number(guess_iteration)
        if is_guess_correct(number, guess):
            print("YOU WON!")
            break

if __name__ == '__main__':
    run_game(1, 100)
</code></pre>
    </div>