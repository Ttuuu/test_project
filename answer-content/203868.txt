<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>1. Review</h3>

<ol>
<li><p>There is no docstring. What does <code>kthToLastNode</code> do? What does it return? A docstring would explain that you have to pass <code>k=1</code> to get the last item, <code>k=2</code> to get the second-to-last item, etc.</p></li>
<li><p>It would be more useful, I think, if <code>kthToLastNode</code> <em>returned</em> the \$k\$th-to-last node instead of <em>printing</em> the node's value and returning the length of the linked list.</p></li>
<li><p>If you pass a value for <code>k</code> that's out of range (for example, longer than the length of the linked list) then there should be some error handling. For example, you might raise an exception.</p></li>
<li><p>Using a global <code>count</code> means that <code>kthToLastNode</code> can only be called once: if you call it again <code>count</code> has the wrong value and the function prints nothing and returns the wrong result.</p></li>
</ol>

<h3>2. Alternative approaches</h3>

<p>Instead of recursing, iterate! Here are two implementation ideas.</p>

<ol>
<li><p>Iterate over the list twice, first to find its length, and then to find the \$k\$th-to-last node. It would be worth making a separate function to find the length: this will make the code clearer, and we might have other places where we need to find the length, so if we make a function we'll be able to reuse it.</p>

<pre><code>def linked_list_length(node):
    "Return the length of the linked list starting at node."
    length = 0
    while node:
        length += 1
        node = node.next
    return length

def kth_to_last_node(node, k):
    """Return the kth-to-last node of the linked list starting at node.
    Pass k=1 for the last node, k=2 for the next-to-last node, and so
    on. Raise IndexError if k is out of range.

    """
    length = linked_list_length(node)
    if k &lt; 1 or k &gt; length:
        raise IndexError("index out of range")
    for _ in range(length - k):
        node = node.next
    return node
</code></pre>

<p>This uses \$O(1)\$ space but has to traverse the list twice.</p></li>
<li><p>Append the nodes one by one to a <a href="https://en.wikipedia.org/wiki/Queue_(abstract_data_type)" rel="nofollow noreferrer">queue</a> of length \$k\$, so that when we reach the end of the list, the first element of the queue will be the \$k\$th-to-last node. We can implement the queue using <a href="https://docs.python.org/3/library/collections.html#collections.deque" rel="nofollow noreferrer"><code>collections.deque</code></a>.</p>

<pre><code>from collections import deque

def kth_to_last_node(node, k):
    """Return the kth-to-last node of the linked list starting at node.
    Pass k=1 for the last node, k=2 for the next-to-last node, and so
    on. Raise IndexError if k is out of range.

    """
    queue = deque(maxlen=k)
    while node:
        queue.append(node)
        node = node.next
    if k &lt; 1 or len(queue) != k:
        raise IndexError("index out of range")
    return queue[0]
</code></pre>

<p>This traverses the list once but uses \$O(k)\$ space.</p></li>
</ol>

<h3>3. General discussion</h3>

<p>Recursion and iteration are very similar: anything you can do with one, you can do with the other. In some cases the code is simpler and clearer if you use recursion, in other cases if you use iteration, and sometimes it doesn't make much difference. So it's hard to give general advice: there's no real substitute for trying both and seeing which you like better! For example, <a href="https://codereview.stackexchange.com/a/161016/11728">here's a case</a> where recursion was nicer.</p>

<p>In the case of singly linked lists, it's worth pointing out that we don't have much need for this data structure in Python, because the built-in <code>list</code> data type is nearly always better than a linked list. You can get the \$k\$th-to-last element of the list <code>a</code> by writing <code>a[-k]</code>, and this takes \$O(1)\$ time and \$O(1)\$ space.</p>

<p>The cases in which we do want to use linked lists in Python are those in which we need to efficiently insert new elements into the middle of a list. See <a href="https://codereview.stackexchange.com/a/193065/11728">this answer</a> for a rare example. But in these cases we probably don't need to find the \$k\$th-to-last element.</p>
    </div>