<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>All in all this looks good already.</p>

<p>A few tips:</p>

<h1><code>continue</code></h1>

<p>If you change the test in <code>explode</code> from <code>if s:</code> to </p>

<pre><code>if not s:
    continue
</code></pre>

<p>You can save a level of indentation for the rest of the loop</p>

<h1><code>collections.defaultdict</code></h1>

<p>checking whether a key is in a dict, and adding it if it isn't is why there is <code>collections.defaultdict</code> which can simplify <code>explode</code> a lot:</p>

<pre><code>def explode(subject: Iterable[str]) -&gt; Exploded:
    heads_to_tails = defaultdict(list)
    for s in subject:
        if not s:
            continue
        heads_to_tails[s[0]].append(s[1:])
    return {h: prune_or_follow(t) for (h, t) in heads_to_tails.items()}
</code></pre>

<h1>tuple unpacking</h1>

<p>A matter of style, but in most situations where you use <code>my_list[0]</code> and <code>my_list[1:]</code>, you can use tuple unpacking. You can use this in <code>prune_or_follow</code></p>

<pre><code>def prune_or_follow(tails: List[str]) -&gt; Union[Exploded, str]:
    start, *rest = tails
    if rest:
        return explode(tails)
    else:  
        return start
</code></pre>

<p>Whether this is more clear is a matter of taste.</p>

<p>This tuple unpacking does not work as clean in <code>explode</code> because it converts the string into a list of 1-character strings.</p>

<h1><code>Exploded</code></h1>

<p>You can use a string in <code>typing</code> so you can do:</p>

<pre><code>Exploded = Dict[str, Union["Exploded", str]]
</code></pre>

<p>without the <code>Exploded = None</code></p>

<h1><code>cull</code> typing</h1>

<p>cull can accept any iterable. For the result, I don't think the order of strings is important, so there is no need to limit you to a <code>list</code>. The signature can then be <code>def cull(subject: Iterable[str]) -&gt; Collection[str]:</code>. Whether you return a list or a set is a matter of implementation. </p>

<p>If the result is just used for iteration, you can even forgo the <code>list</code> call, and just return the <code>implode</code> generator, and let the caller decide whether he needs in in a list, set or whatever data structure he wants.</p>

<h1>implode</h1>

<p>now you use <code>e</code> as argument name. One-letter variable names are unclear in general, and to be avoided most of the time*. Since it is a kind of a tree, I would change this variable.</p>

<p>A slightly different take in <code>implode</code> which doesn't use string concatenation but tuple unpacking:</p>

<pre><code>def implode(tree: Exploded, previous=()) -&gt; Generator[str, None, None]:
    for root, branches in tree.items():
        if isinstance(branches, str):
            yield "".join((*previous, root, *branches))
        else:
            yield from implode(branches, *previous, root)
</code></pre>

<p>or equivalently:</p>

<pre><code>def implode(tree: Exploded, previous=()) -&gt; Generator[str, None, None]:
    for root, branches in tree.items():
        if isinstance(branches, str):
            yield "".join((*previous, root, *branches))
        else:
            yield from implode(branches, (*previous, root))
</code></pre>

<p>The choice between your version and this is a matter of taste, but I wanted to present the different possibilities.</p>

<p>Another variation, is using <code>try-except ArgumentError</code> instead of the <code>isinstance</code>:</p>

<pre><code>def implode_except(tree: Exploded, previous=()) -&gt; Generator[str, None, None]:
    for root, branches in tree.items():
        try:
            yield from implode(branches, (*previous, root))
        except AttributeError:
            yield "".join((*previous, root, *branches))
</code></pre>

<p>'* I find <code>i</code>, <code>j</code> etc acceptable for a counter or index, and <code>x</code> and <code>y</code> for coordinates, but in general I try not to use one-letter variable names.</p>
    </div>