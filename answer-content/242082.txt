<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><em>Disclaimer: if you want to use <code>std::ostream</code> and its manipulators, see <a href="https://codereview.stackexchange.com/a/242055/8999">@tinstaafl</a>'s answer.</em></p>

<h3>Principle of least capabilities</h3>

<p>Your functions arguments are over-constrained, compared to what is actually necessary:</p>

<ul>
<li><code>hexify</code> does not need to take a <code>vector</code>, any sequence of <code>unsigned char</code> would work.</li>
<li><code>writeFile</code> does not need to take a <em>copy</em> of a <code>string</code>.</li>
</ul>

<h3>Careful about that <code>string_view</code></h3>

<p>Unfortunately, <code>std::ofstream</code> interface is antique: it still expects a C-String as an argument.</p>

<p>This does not mesh well with <code>string_view</code>, because <code>string_view</code> does not guarantee NUL-termination.</p>

<p>Thus the first argument to <code>writeFile</code> should be either <code>char const*</code> or <code>std::string const&amp;</code>. I would advise the former as per the principle of least capabilities.</p>

<h3>No Magic Constant</h3>

<p>You use the literal <code>"0123456789ABCDEF"</code> twice:</p>

<ul>
<li>That's one two many.</li>
<li>It's better to give a name to constants.</li>
</ul>

<h3>Range-for loops are awesome</h3>

<p>There is place for iterator-based loops or index-based loops: when you do something tricky.</p>

<p>When you <em>don't</em> do anything special, however, use the range-for loop form: <code>for (auto x : range) { ... }</code>.</p>

<p>It immediately announces loud and clear that you're not doing anything tricky -- freeing brain cells for the reader -- and it guarantees that the loop is done as efficiently as possible -- not calling <code>v.end()</code> at every iteration, notably.</p>

<h3>Implicit is more lightweight</h3>

<p>There are perfectly good reasons to check that a file is open, or not, it allows reacting differently.</p>

<p>Similarly, closing a file manually rather than relying on the destructor to close allows checking for errors.</p>

<p>If you don't do anything special if it's not open, and you don't check whether close succeeded, then there's little point in doing either explicitly: it just clutters the code.</p>

<hr>

<p>With all the above in mind.</p>

<pre><code>//  - Principle of least capabilities, short of going template.
//  - No Magic Constant.
//  - Range-for loop.
std::string hexify(gsl::span&lt;unsigned char&gt; v) {
    static constexpr char HEXITS[] = "0123456789ABCDEF";

    std::string str(2 * v.size(), '\0');
    auto k = str.begin();

    for(auto c : v) {
        *k++ = HEXITS[c &gt;&gt; 4];
        *k++ = HEXITS[c &amp; 0x0F];
    }

    return str;
}

//  - Principle of least capabilities.
//  - Careful about string_view.
//  - Implicit is more lightweight.
void writeFile(char const* filename, std::string const&amp; content) {
    assert(filename != nullptr);
    std::ofstream f(filename, std::ios::binary);

    f &lt;&lt; content;
}

//  Looking good!
int main() {
    std::vector&lt;unsigned char&gt; const v{'5', '1', '5', '7', '9'};
    writeFile("text.bin", hexify(v));
}
</code></pre>

<hr>

<p>There are further potential improvements, notably around <em>memory allocations</em>.</p>

<p>Your code first allocates a string, then writes that string in the buffer of an <code>ofstream</code>: why not cut the middleman?</p>

<p>Instead you could have <code>hexify</code> take a <code>std::ostream&amp;</code> as argument, and stream into it directly: <code>hexify</code> would still know nothing of writing to a file, so would be equally easy to use outside that context, and to test, just without the extraneous memory allocation.</p>
    </div>