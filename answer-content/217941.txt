<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>A cleaner solution is to trust the standard library and try to re-use the generic components already available there. Your problem is solved by <a href="https://en.cppreference.com/w/cpp/algorithm/next_permutation" rel="nofollow noreferrer">std::next_permutation</a>, so you can proceed along the lines of:</p>

<pre><code>#include &lt;iostream&gt;
#include &lt;vector&gt;
#include &lt;algorithm&gt;

int main()
{
    std::vector&lt;int&gt; v = { 1, 2, 3, 4, 5 };

    do
    {
        for (auto e : v)
            std::cout &lt;&lt; e &lt;&lt; " ";
        std::cout &lt;&lt; "\n";
    } 
    while (std::next_permutation(v.begin(), v.end()));
}
</code></pre>

<hr>

<p>For pedagogical purposes, if you wanted to keep your current structure, you could also use standard functions there. In particular, <code>remove_item</code> and <code>merge</code> could be rewritten to:</p>

<pre><code>std::vector&lt;int&gt; remove_item(const std::vector&lt;int&gt;&amp; a, int id)
{
    assert(id &gt;= 0 &amp;&amp; id &lt; a.size());

    std::vector&lt;int&gt; res(a.begin(), a.begin() + id);
    res.insert(res.end(), a.begin() + id + 1, a.end());
    return res;
}

std::vector&lt;std::vector&lt;int&gt; &gt; merge(const std::vector&lt;std::vector&lt;int&gt; &gt;&amp; a, const std::vector&lt;std::vector&lt;int&gt; &gt;&amp; b)
{
    std::vector&lt;std::vector&lt;int&gt; &gt; res(a);
    std::copy(b.begin(), b.end(), std::back_inserter(res));
    return res;
}
</code></pre>

<p>Whatever you do, as general comments:</p>

<ul>
<li><p><a href="//stackoverflow.com/q/1452721">Avoid writing <code>using namespace std;</code>.</a></p></li>
<li><p><a href="//stackoverflow.com/q/213907">Don't write <code>std::endl</code> when <code>\n</code> will do.</a></p></li>
<li><p>You don't need <code>std::to_string</code>, just print <code>b</code>.</p></li>
<li><p>You are more likely to make mistakes when you put multiple statements on the same line. So instead of writing <code>for(...) if(...) v.push_back(x);</code> just write</p>

<pre><code>for(...)
{
   if(...)
   {
      v.push_back(x);
   }
}
</code></pre>

<p>This also improves readability.</p></li>
</ul>
    </div>