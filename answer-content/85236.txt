<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>After reading gnasher729 and Simon's answers, I was inspired to find the fastest possible way to do this.</p>

<h2>Analysis of original function</h2>

<p>The main problem with the original function is that it only uses the divide by 8 trick once.  After that, it falls into this loop:</p>

<pre><code>    while(divby8 &gt;= 9)
    {
        divby8 = divby8 - 9;
    }
</code></pre>

<p>Given a large number, this loop could iterate for millions of iterations.</p>

<h2>Faster solutions</h2>

<p>Gnasher729 and Simon demonstrated solutions that used a small loop to reduce the original number by 6 and 3 bits respectively.  Building upon their work, I came up with the following optimized solution:</p>

<pre><code>int div9(int x)
{
    x = (x &gt;&gt; 15) - (x &amp; 0x7fff);
    x = (x &gt;&gt; 9) - (x &amp; 0x1ff);
    x = (x &gt;&gt; 6) + (x &amp; 0x3f);
    x = (x &gt;&gt; 3) - (x &amp; 0x7);
    return x == 0;
}
</code></pre>

<p>This function is meant to be used for 32-bit positive integers.  For 64-bit positive integers, you can add this line at the beginning:</p>

<pre><code>    x = (x &gt;&gt; 30) + (x &amp; 0x3fffffff);
</code></pre>

<p>If negative integers are allowed, you can add this line at the beginning:</p>

<pre><code>    if (x &lt; 0) x = -x;
</code></pre>

<h2>Just for fun</h2>

<p>The original question did not allow multiply or modulo.  But just for fun, let's see what would be the fastest method.  For example, how fast is simply using modulo?</p>

<pre><code>int div9(int x)
{
    return (x % 9) == 0;
}
</code></pre>

<p>Here is the fastest solution I could come up with, using multiply.  This solution is based on <a href="https://stackoverflow.com/a/4431024/4192931">this stackoverflow answer</a>.  The shift by 6 is to get the original number small enough to work with the multiply trick.</p>

<pre><code>int div9(int x)
{
    x = (x &gt;&gt; 6) + (x &amp; 0x3f);
    return (x * 0xe38e38e4u) &lt; 0x1c71c71c;
}
</code></pre>

<h2>Timing function</h2>

<p>Here is the main function of my timing program.  It tests all values from <code>0</code> to <code>0x7ffffff4</code>.  I chose to do it this way to avoid using <code>i%9</code> in the test loop, since <code>i%9</code> can take a significant amount of time compared to the actual functions being tested.</p>

<pre><code>int main(void)
{
    int i;
    for (i=0;i&lt;0x7ffffff5;i+=9) {
        if (div9(i+0) == 0) break;
        if (div9(i+1) == 1) break;
        if (div9(i+2) == 1) break;
        if (div9(i+3) == 1) break;
        if (div9(i+4) == 1) break;
        if (div9(i+5) == 1) break;
        if (div9(i+6) == 1) break;
        if (div9(i+7) == 1) break;
        if (div9(i+8) == 1) break;
    }
    if (i != 0x7ffffff5) {
        printf("Failed on 0x%08x\n", i);
        return 1;
    }
    return 0;
}
</code></pre>

<h2>Timing results</h2>

<pre class="lang-none prettyprint-override"><code>Author              Time (seconds)
------              --------------
JS1 (multiply)           2.23
JS1 (modulo)             3.35
JS1 (shifts)             5.70
Gnasher729              16.90
Simon (opt)             30.40
Simon                   53.40
</code></pre>

<p>Simon (opt) is his function with only the shift by 3 loop.  As you can see, it is faster without having the loop that checks for powers of 2.</p>
    </div>