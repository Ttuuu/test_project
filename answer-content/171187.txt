<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Kudos</h2>

<p>It's good to see appropriate quoting and correct use of <code>"$@"</code> in these shell scripts.  Although the samples are short, it's still good to see nice readable code.</p>

<h2>Problems with the first approach</h2>

<ul>
<li>All the output of the command is sent to <code>/dev/stderr</code>; it's not possible to pipe the output into another command, or to separate the output and error streams.</li>
<li>The exit status of the command is lost, so you can't use this function as part of a conditional (<code>if</code>, <code>while</code>, <code>&amp;&amp;</code>, <code>||</code>, ...).</li>
<li>Only a single command can be timed, rather than a full pipeline.</li>
</ul>

<h2>Problems with the second approach</h2>

<ul>
<li>The exit status of the command is lost.</li>
<li>Only a single command can be timed (but that's always the case with an external <code>time</code> command, and why it's a built-in in Bash).</li>
</ul>

<hr>

<h1>An improvement</h1>

<p>You can retain the exit status when using GNU time, by using a process substitution as the output file:</p>

<pre><code>function run_time {
     command time --quiet \
                  --format '%e' \
                  --output &gt;(tee -a run_time.txt &gt;&amp;2) \
                  "${@}"
}
</code></pre>

<h3>Notes</h3>

<ul>
<li>I've also used the <code>command</code> keyword to find the external <code>time</code> without hard-coding its path.  You may or may not choose to follow this course.</li>
<li>I've sent the time result to standard error, for consistency with the command and built-in (note that the built-in outputs to the <em>shell's</em> standard error, not that of the pipeline it's timing).</li>
</ul>

<hr>

<h1>Alternative using built-in</h1>

<pre><code>function run_time {
  local TIMEFORMAT='%R'
  { { time "$@" 2&gt;&amp;3; } 2&gt; &gt;(tee -a run_time.txt &gt;&amp;2); } 3&gt;&amp;2
}
</code></pre>

<p>That's a bit hard to follow, so let's unpick it from the inside:</p>

<ul>
<li><pre><code>{ time "$@" 2&gt;&amp;3; }
</code></pre>

The command's standard output is unchanged (stream 1), but its stderr is redirected to stream 3; <code>time</code>'s output will be on stream 2.</li>
<li><pre><code>{...} 2&gt; &gt;(tee ... &gt;&amp;2)
</code></pre>

The <code>time</code> output is redirected to the <code>tee</code> command; it writes to the file and to the enclosing stream 2 (the function's standard error stream).</li>
<li><pre><code>{ ... } 3&gt;2
</code></pre>

The saved standard error stream of the timed command is diverted back to the function's standard error.</li>
</ul>

<p>This allows independent redirection of the timed command's standard output and standard error (plus timing results).  The function's error status is that of the timed command.</p>

<p>One disadvantage is that it doesn't wait for the process substitution to exit before the function returns, so <code>tee</code>'s output may occur unexpectedly late (e.g. after Bash has shown the next command prompt, in an interactive shell).</p>
    </div>