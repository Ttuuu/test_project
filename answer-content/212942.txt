<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Before diving into the code itself, I'm going to go over a couple "structural things".  </p>

<p>First, I'm not entirely sure what the utility of a tool like this actually is.  When I'm writing code in the Visual Basic Editor, I get all of this great help like IntelliSense, syntax highlighting, an Object Browser, etc., etc. (and this is before using custom add-ins like <a href="https://github.com/rubberduck-vba/Rubberduck" rel="noreferrer">Rubberduck</a><sup>1</sup>).</p>

<p>Writing code in a spreadsheet strikes me as, well, a bit strange. It seems like this wants a better interface - something like a wizard (or at very least a <code>UserForm</code>).  Currently it has a major drawback in that it requires me to add a worksheet to an existing workbook to run it, which makes it harder to, say, package as an add-in.</p>

<hr>

<p>The second glaring structural issue is that the code is output to the Immediate Window, which only has a 200 line buffer.  The sample output from the question is already getting very close to running past that maximum buffer size (and this is exacerbated by some things I'll mention below). On top of that, there is absolutely zero validation to make sure that the output isn't going to end up with the top half of the template chopped off in the Immediate Window. This could be easily resolved by sending output to a text file or (better) using <a href="https://docs.microsoft.com/en-us/office/vba/language/reference/user-interface-help/visual-basic-add-in-model-reference" rel="noreferrer">the VBE's object model</a> to generate the class directly. I consider this a fairly substantial bug.</p>

<hr>

<h2>Coding Style</h2>

<hr>

<p><strong>1.) Hungarian Notation</strong><sup>2</sup> - @MathieuGuindon provided <a href="https://www.joelonsoftware.com/2005/05/11/making-wrong-code-look-wrong/" rel="noreferrer">an excellent link</a> in <a href="https://codereview.stackexchange.com/questions/212923/standardized-and-automated-class-block-generation-for-vba#comment411813_212923">his comment</a>.  I highly recommend reading it, and then using the current Microsoft <a href="https://docs.microsoft.com/en-us/dotnet/visual-basic/programming-guide/program-structure/naming-conventions" rel="noreferrer">Visual Basic Naming Conventions</a> - they ditched this ancient style for a good reason. </p>

<p>That said, even if you completely disagree with this, the use of <code>h</code> as a prefix for <code>LongPtr</code> and <code>LongLong</code> is completely misleading to anyone familiar with the Windows APIs. In the Windows API, an <code>h</code> is a handle and <code>lp</code> is used for a long pointer. There's a difference between the two that simply can't be captured by a single variable type (and on a 32 bit install a <code>Long</code> could <em>also</em> be either a handle or a pointer).  Consistently using <code>h</code> for <strong><em>any</em></strong> <code>LongPtr</code> is dangerously misleading. See <a href="https://stackoverflow.com/q/13023405/4088852">this answer</a> over on SO.</p>

<hr>

<p><strong>2.) Indentation</strong> - Overall not bad, but whatever convention you decide to use for indenting, it should be made consistent.  For example, <code>With</code> is indented like this in some places...</p>

<blockquote>
<pre><code>For i = LBound(arrName) To UBound(arrName)

    Set myMember = New clsGenClsMember
    With myMember
</code></pre>
</blockquote>

<p>... and this in others:</p>

<blockquote>
<pre><code>For Each myMember In cProperties
With myMember
</code></pre>
</blockquote>

<p>I'd personally consider the top style "correct". Say what you will about other structures, but IMO a loop should <em>always</em> add another indentation level.</p>

<hr>

<p><strong>3.) Comments</strong> - Comments should explain the <strong><em>why</em></strong> of the code and not the <strong><em>how</em></strong> of the code. One perfect example of this is the comment <code>'# Export Print Code to Immediate Window</code>, followed immediately by <code>Debug.Print sOutput</code>.  I'm going to go out on a limb here and say that if somebody is generating a class template from an Excel spreadsheet and doesn't know what <code>Debug.Print</code> does, they probably shouldn't be generating a class template from an Excel spreadsheet. </p>

<p>Code should be self documenting to the extend possible - this means picking names that make it obvious what things represent or do. Banner comments like <code>'***** PREPARE DATA *****</code> <strong><em>inside</em></strong> of procedures are a huge red flag for me also.  If the procedure needs a sign-post as to what's going on in a function, then that function is doing too much.  </p>

<p>For example, in <code>Sub main</code>, I would at very least take each banner header like that and make it into a function of the same name, i.e. <code>Function PrepareData()</code>. The generated code probably doesn't need comments at all.  First, because the comment at the top is basically just the data used to generate the class (and that's still on my spreadsheet, right?) - and if the object model is decent and the naming is good, I shouldn't need that at all. </p>

<p>Oh yeah - and that thing from earlier about the Immediate Window only having a 200 line buffer?  This is where that bug is exacerbated. Every single needless comment reduces the amount of <em>useful</em> output that can be generated.</p>

<hr>

<p><strong>4.) The "God Procedure"</strong> - I alluded to this above, but the <code>main</code> procedure does <strong><em>way</em></strong> to much.  The procedure body is 321 lines long, and requires paging down <strong><em>7 times</em></strong> with my VBE settings to get from the top of the procedure to the bottom. If I strip out all of the vertical white-space and comments, it's <strong><em>still</em></strong> 208 lines (yep, 113 lines are pure scroll-bar). There's no conceivable way that I could tell with a casual inspection what it does (or what the variables are for that matter - they're mostly declared a couple hundred lines up). This should be split into discrete parts that each handle a very specific concern.</p>

<hr>

<p><strong>5.) Constants</strong> - First, these have types too - they should be explicitly declared. This...</p>

<blockquote>
<pre><code>Private Const cstMaxLenName = 25
Private Const cstMaxLenRW = 4
Private Const cstMaxLenVarType = 25
</code></pre>
</blockquote>

<p>...should look more like this:</p>

<pre><code>Private Const MaximumNameLength As Long = 25
Private Const MaximumAccessFlagLength As Long = 4
Private Const MaximumVariableTypeLength As Long = MaximumNameLength
</code></pre>

<p>In addition, <code>cstVariableTypes</code> and <code>cstVariablesPrefix</code> are only used by <code>Function VarPrefix</code>, and are only used once.  I'd either move them inside the function...</p>

<pre><code>Private Function VarPrefix(sVarType As String) As String

   Const VariableTypes As String = "Variant, Integer, Long, Single, Double, Currency, Date, String, Boolean, Byte, LongLong, LongPtr, Collection, Object"
   Const VariablePrefixes As String = "v, i, l, sgl, dbl, ccy, d, s, b, by, h, h, c, o"
</code></pre>

<p>...or simply inline the strings.</p>

<hr>

<h2>Miscellania</h2>

<p><strong>1.)</strong> This <code>If</code> block is complete torture:</p>

<blockquote>
<pre><code>If Selection.Columns.Count &gt; 4 And (Selection.Columns.Count - 4) Mod 2 &lt;&gt; 0 _
Then MsgBox "Selection is wrong, please try again", vbCritical + vbOKOnly, "Excel clsGen": End
</code></pre>
</blockquote>

<p>It combines a line continuation and an instruction separator to give a single line <code>If</code> statement that spans 2 lines and executes 2 statements.  That's insanely difficult to read and is becoming is the source of numerous questions on SO.  This is much, much, much better:</p>

<pre><code>If Selection.Columns.Count &gt; 4 And (Selection.Columns.Count - 4) Mod 2 &lt;&gt; 0 Then
    MsgBox "Selection is wrong, please try again", vbCritical + vbOKOnly, "Excel clsGen"
    Exit Sub
End If
</code></pre>

<p>Don't <em>fight</em> VBA's syntax - use it. The impetus to compact the code vertically won't be as great if the procedure isn't 321 lines long (see above).</p>

<hr>

<p><strong>2.)</strong> Related to the above, note also that <code>End</code> is not the same thing as <code>Exit Sub</code>. It forcibly terminates execution, meaning that it's up in the air as to whether <code>rngRawInput</code>'s reference count gets decremented. This is most likely a memory leak and I'd consider it a bug. Note also that it took me longer to catch this than any other bug in this code because it's obscured by the "single-line" <code>If</code> statement (my eyes pick it out as <code>End If</code>) - see above.</p>

<hr>

<p><strong>3.)</strong> This section of code "leaks" an initialized object outside of the loop that it's used in:</p>

<blockquote>
<pre><code>For i = LBound(arrName) To UBound(arrName)
    Set myMember = New clsGenClsMember
    With myMember
      '...[Snip]...
    End With
Next
</code></pre>
</blockquote>

<p>The variable <code>myMember</code> holds one reference, and the implicit <code>With</code> "placeholder" holds a second reference.  If you merge the instantiation into the <code>With</code>, it ensures that the object gets released at the end of the block when it goes out of scope:</p>

<pre><code>For i = LBound(arrName) To UBound(arrName)
    With New clsGenClsMember
        '...[Snip]...
    End With
Next
</code></pre>

<hr>

<p><strong>4.)</strong> <code>VbMsgBoxStyle</code> is a set of bit flags.  That means they shouldn't be added like <code>vbCritical + vbOKOnly</code>.  They should be combined with the <code>Or</code> operator:  <code>vbCritical Or vbOKOnly</code>.</p>

<hr>

<p><strong>5.)</strong> There is almost zero validation for identifier names. What if I enter something into a cell with a newline in it? Or a variable name with a space? Or a name that begins with an underscore? Or a number? Or... etc.  At a minimum, I would expect to see something like a regular expression to catch the most egregious of these.</p>

<p>Ironically, the only thing that <em>is</em> validated is that "Member name cannot be 'val'" . When I originally saw that, I thought to myself - "Oh, that's because <a href="https://docs.microsoft.com/en-us/office/vba/language/reference/user-interface-help/val-function" rel="noreferrer"><code>Val</code> is a built in VBA function</a>.".  But there's no other name collision testing (although there probably should be). It strikes me more like this used to be the default parameter name in the generated class instead of <code>Var</code>, but it was later renamed because <code>Val</code> was hiding stuff...</p>

<hr>

<p><strong>6.)</strong> Speaking of validation, the member names are being validated in the wrong place. They're checked here (and have the plug forcibly pulled if they're too long - see the discussion of <code>End</code> above)...</p>

<blockquote>
<pre><code>If Len(.Name) &gt; cstMaxLenName Or Len(.Rights) &gt; cstMaxLenRW Or Len(.VarTypeFull) &gt; cstMaxLenVarType Then _
MsgBox "Member Name, RW statement, and/or Description are too long, please try again with something shorter.", vbCritical + vbOKOnly, "Excel clsGen": End
</code></pre>
</blockquote>

<p>...but when they're <strong><em>used</em></strong>, they're coming from <code>clsGenClsMember</code> unchecked:</p>

<blockquote>
<pre><code>With myMember
    sOutput = sOutput &amp; "' - " &amp; .Name &amp; Space(cstMaxLenName - Len(.Name)) _
                               &amp; .Rights &amp; Space(cstMaxLenRW - Len(.Rights)) _
                               &amp; .VarTypeFull &amp; Space(cstMaxLenVarType - Len(.VarTypeFull)) _
                               &amp; .Description &amp; vbNewLine
End With
</code></pre>
</blockquote>

<p>This is a clear violation of separation of responsibilities, and I can't be the only one who sees irony in code that generates classes doing this. If the maximum <code>Name</code> length for a <code>clsGenClsMember</code> is 25, the class should be enforcing it, not the caller. </p>

<p>Note that this allows unchecked code like <code>.Name &amp; Space(cstMaxLenName - Len(.Name))</code> which <strong><em>throws</em></strong> if the class doesn't enforce this. This is borderline buggy.</p>

<hr>

<p><strong>7.)</strong> All of the code with place-holders and <code>Replace</code> needs validation:</p>

<blockquote>
<pre><code>   sPrint = "Private @p@VarName as @New @VarType" &amp; vbNewLine
   sPrint = Replace(sPrint, "@VarName", .Name)
</code></pre>
</blockquote>

<p>What happens if I use a place-holder in the input?  It would probably be better to concatenate these instead.</p>

<hr>

<p><strong>8.)</strong> The list of intrinsic variables doesn't take types and enumerations into account. That means when it checks to see if a property should be generated as a <code>Let</code> or a <code>Set</code> in code like this...</p>

<blockquote>
<pre><code>sPrint = Replace(sPrint, "@New ", IIf(UBound(Filter(arrNonObjectVariables, .VarType, , vbTextCompare)) &gt; -1, "", "New "))
</code></pre>
</blockquote>

<p>...it is ignoring things like <code>VbMsgBoxStyle</code> from above. There's not really a way to definitively know which one to use in all cases, because you can use <code>Set</code> with a <code>Variant</code> too.  Barring going off to read the type libraries and figuring it out, this is likely best left to user input - I'd also consider this a bug.  </p>

<p>Note also that this should be a responsibility of <code>clsGenClsMember</code>, not the calling code.</p>

<hr>

<p><strong>9.)</strong> There is at least one declaration missing variable types:</p>

<blockquote>
<pre><code>Dim sArgumentPairs
</code></pre>
</blockquote>

<p>Hungarian says that's a <code>String</code>, but it lies - that's a <code>Variant</code> (this highlights part of the problem with Hungarian notation...see above).</p>

<hr>

<p><strong>10.)</strong> Similar to #8, this default prefix in <code>VarPrefix</code>...</p>

<blockquote>
<pre><code>'Else it is an Object
VarPrefix = "o"
</code></pre>
</blockquote>

<p>...is broken for the same way. E.g. <code>Dim oNoImNotAnObject As MyType</code>...</p>

<hr>

<p>There probably more ground to cover (I didn't even get to running code analysis on this), but I'll leave that to other reviewers as this is already running a tad long...</p>

<hr>

<p><sup>1</sup> <sub>Full disclosure, I'm a contributor to that project.</sub></p>

<p><sup>2</sup> <sub>Fuller disclosure, I implemented the Hungarian notation inspection in Rubberduck too.</sub></p>
    </div>