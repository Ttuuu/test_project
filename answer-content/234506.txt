<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here are a number of things that may help you improve your program.</p>

<h2>Don't use <code>define</code> for function-like macros</h2>

<p>There is no advantage and considerable disadvantages to using function-like macros.  They lack type-checking and tend to lead to bugs.  For example, if we use this:</p>

<pre><code>c = '0';
SYMBOL(++c);
printf("%c\n", c);
</code></pre>

<p>We would see that it would print "5" because unlike a real function, the macro increments the value every time it's mentioned in the macro.  </p>

<h2>Use more whitespace for readability</h2>

<p>Lines like this:</p>

<pre><code>if(input[c]=='%'&amp;&amp;input[c+1]=='E'&amp;&amp;input[c+2]=='O'&amp;&amp;input[c+3]=='F'&amp;&amp;input[c+4]=='%'){
</code></pre>

<p>are very hard to read because of the lack of whitespace.  It's much easier to read for most people when written like this:</p>

<pre><code>if (input[c] == '%' &amp;&amp; input[c + 1] == 'E' &amp;&amp; input[c + 2] == 'O'
    &amp;&amp; input[c + 3] == 'F' &amp;&amp; input[c + 4] == '%') {
</code></pre>

<h2>Eliminate "magic numbers"</h2>

<p>One of the macros in the code is this:</p>

<pre><code>#define SYMBOL(term) (term&gt;=123&amp;&amp;term&lt;=126)||(term&gt;=33&amp;&amp;term&lt;=47)||(term&gt;=58&amp;&amp;term&lt;=64)||(term&gt;=91&amp;&amp;term&lt;=96)
</code></pre>

<p>However it's difficult to figure out what this means because of all the un-named numerical constants.  Better would be to d as you have done for the <code>LOWALPHA</code> macro and use character values directly.  Or even better, just use <code>ispunct()</code> as per the next suggestion.</p>

<h2>Use standard functions and facilities</h2>

<p>Several of the macros attempt to duplicate functions that already exist.  Specifically <a href="https://en.cppreference.com/w/c/string/byte/isupper" rel="nofollow noreferrer"><code>isupper()</code></a> and many related functions are in <code>&lt;ctype.h&gt;</code>.</p>

<h2>Don't leak memory</h2>

<p>This code calls <code>malloc</code> several places but never <code>free</code>.  This means that the code is leaking memory. It would be much better to get into the habit of using <code>free</code> for each call to <code>malloc</code> and then assuring that you don't leak memory. </p>

<h2>Check the return value of <code>malloc</code></h2>

<p>If the program runs out of memory, a call to <code>malloc</code> can fail.  The only indication for this is that the call will return a <code>NULL</code> pointer.  You should check for this and avoid dereferencing a <code>NULL</code> pointer (which typically causes a program crash).  If the program can't proceed without the memory, free any allocated memory and quit the program gracefully.</p>

<h2>Decompose your program into functions</h2>

<p>All of the logic here is in <code>main</code> in one rather long and dense chunk of code.  It would be better to decompose this into separate functions.</p>

<h2>Use <code>bool</code> where appropriate</h2>

<p>The <code>halt</code> flag is being used as a boolean variable.  If you <code>#include &lt;stdbool.h&gt;</code>, you can use a <code>bool</code> type to better signal how this is being used.</p>

<h2>Simplify your code</h2>

<p>The code currently contains this:</p>

<pre><code>if (fp != NULL) {
    int j = 0;
    while (1) {
        symbol = fgetc(fp);
        //printf("%c",symbol);
        if (symbol != EOF)
            input[j++] = symbol;
        else {
            input[j++] = symbol;
            break;
        }
    }
    fclose(fp);
}
</code></pre>

<p>That's much more complex and fragile than it needs to be.  It's fragile because there's nothing to prevent it from running beyond the allocated <code>input</code> buffer.  It's also more complex than it needs to be with multiple <code>while</code>, <code>if</code> and <code>else</code>.  It could be written instead like this:</p>

<pre><code>if (fp == NULL) {
    puts("Cannot open input file");
    exit(1);
}
fgets(input, BUFFLEN, fp);
fclose(fp);
</code></pre>

<p>Note also that I'm using <code>BUFFLEN</code> instead of a "magic number" as mentioned above.  Similarly, this code is more convoluted than it needs to be:</p>

<pre><code>int halt = 0;
while (1) {
    if (halt)
        break;
    // more code
}
</code></pre>

<p>Write it like this instead:</p>

<pre><code>bool halt = false;
while (!halt) {
</code></pre>

<h2>Don't use uninitialised memory</h2>

<p>The code allocates memory for a <code>token</code>, but tests the contents of some of its fields before actually initializing it.  If you need it set to specific values, you should set it.  If zeroes are sufficient, use <code>calloc</code>.</p>

<h2>Don't clutter the code with useless things</h2>

<p>In a number of cases we have code like this:</p>

<pre><code>token[current_token]-&gt;t = (char *)malloc(sizeof(char) * 30);
</code></pre>

<p>However, there's no need to cast the value and <code>sizeof(char)</code> is defined to always be 1.  So the code could be written like this instead:</p>

<pre><code>token[current_token]-&gt;t = malloc(MAX_TOKEN_LEN);
</code></pre>

<p>Again, we're avoiding "magic numbers" as mentioned earlier.</p>

<h2>Allow the user to specify input and output files</h2>

<p>The file names are currently hardcoded which certainly greatly restricts the usefulness of the program.  Consider using <code>argc</code> and <code>argv</code> to allow the user to specify file names on the command line.  Also <code>file</code> is certainly a poor choice for a hardcoded file name since it doesn't tell one anything useful about what the file is expected to contain.</p>

<h2>Use a state machine</h2>

<p>You might find it better to use a state machine to do this parsing.  See <a href="https://codereview.stackexchange.com/questions/134888/parse-2d-matrix-2-versions/138019#138019">this answer</a> for an example of how to do this.</p>
    </div>