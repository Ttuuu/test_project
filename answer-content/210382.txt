<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<pre><code>  public void addSport(string sportName, double price)
  {
     ...
</code></pre>
</blockquote>

<p>and</p>

<blockquote>
<pre><code>  public string name;
</code></pre>
</blockquote>

<p>In general the convention in C# is that all public members are named with PascalCase:</p>

<pre><code>public void AddSport(..)
</code></pre>

<p>and </p>

<pre><code>public string Name;
</code></pre>

<p>Where private members or local variables are named with camelCase:</p>

<pre><code>private int sportCount = 0;
</code></pre>

<hr>

<blockquote>
<pre><code>  public int sportCount = 0;
</code></pre>
</blockquote>

<p>Counting the sports with a separate variable is unnecessary and error prone. Instead rely on the <code>Count</code> member of the <code>sportPriceInfo</code> <code>Dictionary</code>:</p>

<pre><code>public int Count =&gt; sportPriceInfo.Count;
</code></pre>

<hr>

<blockquote>
<pre><code>  public void showInfo()
  {
    Console.WriteLine(name + ':');
    var sortedDictionary = from pair in sportPriceInfo
                           orderby pair.Key ascending
                           select pair;
    foreach (var item in sortedDictionary)
    {
      Console.WriteLine("  -{0} - {1:0.00}", item.Key, item.Value);
    }
  }
</code></pre>
</blockquote>

<p>In general avoid writing to the console from your model. If you want a model class to be able to write itself then inject a delegate with the appropriate signature:</p>

<pre><code>public delegate void LineWriter(string format, params object[] parameters);
</code></pre>

<p>and use it like this:</p>

<pre><code>  public void showInfo(LineWriter lineWriter)
  {
    lineWriter("{0}: ", name);
    var sortedDictionary = from pair in sportPriceInfo
                           orderby pair.Key ascending
                           select pair;
    foreach (var item in sortedDictionary)
    {
      lineWriter("  -{0} - {1:0.00}", item.Key, item.Value);
    }
  }
</code></pre>

<p>The you can call the method like:</p>

<pre><code>card.showInfo(Console.WriteLine);
</code></pre>

<p>It is more flexible this way, if you for instance want to write to a log or use <code>Debug.WriteLine</code></p>

<hr>

<blockquote>
<pre><code>  public void addSport(string sportName, double price)
  {
    if (sportPriceInfo.ContainsKey(sportName))
    {
      sportPriceInfo[sportName] = price;
    }
    else
    {
      sportCount++;
      sportPriceInfo.Add(sportName, price);
    }
  }
</code></pre>
</blockquote>

<p>Here the rule says that a second sport with the same name replaces an existing one, so no need to search for it:</p>

<pre><code>public void addSport(string sportName, double price)
{
  sportPriceInfo[sportName] = price;
}
</code></pre>

<p>this will either replace or add the new sport.</p>

<hr>

<blockquote>
<pre><code>class Database
{
  List&lt;Card&gt; allCards = new List&lt;Card&gt;();
</code></pre>
</blockquote>

<p>Instead of a <code>List&lt;Card&gt;</code> I would use a <code>Dictionary&lt;string, Card&gt;</code> instance as collection for the cards. It will make the maintenance easier:</p>

<pre><code>  public void addCard(string n, string s, double p)
  {
    if (!allCards.TryGetValue(n, out Card card))
    {
       card = new Card(n, s, p);
       allCards[n] = card;
     }
     else
     {
       card.addSport(s, p);
     }
</code></pre>

<p>or</p>

<pre><code>  public bool checkCard(string n) =&gt; allCards.ContainsKey(n); // see below
</code></pre>

<hr>

<p>BTW: avoid using abbreviated names for method arguments. Instead of <code>n</code>, <code>s</code> and <code>p</code> - <code>name</code>, <code>sport</code> and <code>price</code> would be more informative. Remember that arguments are the "interface" that a consumer must rely on - without necessarily knowing about the objects internal behavior.</p>

<p>Again: the name <code>allCards</code> is too "verbose". Why not just <code>cards</code>?</p>

<hr>

<blockquote>
<pre><code>  public void checkCard(string n)
  {
    if (isCardPresent(n) &gt;= 0)
    {
      Console.WriteLine(n + " is available!");
    }
    else
    {
      Console.WriteLine(n + " is not available!");
    }
  }
</code></pre>
</blockquote>

<p>Here again: don't write to the console from your models. Instead return a flag and let the client react accordingly to that:</p>

<pre><code>public bool HasCard(string name) =&gt; allCards.ContainsKey.(name); // If using a dictionary instead of a list.
</code></pre>

<hr>

<blockquote>
<pre><code>    if (Regex.IsMatch(line, @"^(\w+) - (\w+) - (\d+.\d+)\b$"))
    {
      lineSplit = Regex.Match(line, @"^(\w+) - (\w+) - (\d+.\d+)\b$");
</code></pre>
</blockquote>

<p>Here you parse the string two times with the same pattern. It is unnecessary because you can use the <code>Success</code> property of the returned <code>Match</code> object from <code>Regex.Match()</code>:</p>

<pre><code>Match match = Regex.Match(line, @"^(\w+) - (\w+) - (\d+.\d+)\b$");

if (match.Success)
{
  ...
}
</code></pre>

<hr>

<p>About the pattern <code>@"^(\w+) - (\w+) - (\d+.\d+)\b$"</code>:</p>

<p>It doesn't catch names with two or more words or with hyphens or the like.</p>

<p>And if you take a careful look at the input examples in the image, you'll see that the hyphens aren't of equal length, so you'll have to handle both dashes and hyphens.</p>

<p>All in all that could be done with a pattern like:</p>

<pre><code>@"^(?&lt;card&gt;.+) [-–] (?&lt;sport&gt;.+) [-–] (?&lt;price&gt;\d+.\d+)$"
</code></pre>

<p>Here I also name the subexpressions so it is possible to query the <code>match</code> object like:</p>

<pre><code>      string inputName = lineSplit.Groups["card"].Value;
      string inputSport = lineSplit.Groups["sport"].Value;
      double inputPrice = double.Parse(lineSplit.Groups["price"].Value);
</code></pre>

<hr>

<blockquote>
  <p><code>double.Parse(lineSplit.Groups["price"].Value)</code></p>
</blockquote>

<p>When you parse a numeric string you'll have to consider the current locale. So if the input number always uses <code>'.'</code> as decimal separator, you should parse with a <code>IFormatProvider</code> argument:</p>

<pre><code>double.Parse(lineSplit.Groups["price"].Value, CultureInfo.InvariantCulture);
</code></pre>

<p>Otherwise the parser may interpret the price differently, if the current culture for instance uses <code>','</code> as separator.</p>

<p>If the price is in an invalid format, <code>double.Parse</code> will fail with an exception. You should handle that in a <code>try...catch</code> block, or use <code>double.TryParse(...)</code> instead and handle a false return from that appropriately.</p>

<hr>

<p>When it comes to prices and currency, it is by the way common to use the <code>decimal</code> type instead of <code>double</code>.</p>

<hr>

<p>When I try your method with the two provided input examples it prints <code>" is not available!"</code> near the top in both examples?</p>
    </div>