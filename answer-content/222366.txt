<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I don't really see any purpose to forcibly using a class setup here. All that's doing is allowing you to provide the data before <code>result</code> is called. That's not necessary here though, and there are other ways of achieving that. If you needed to create multiple <code>Calculate</code> objects, and retain them, and call <code>result</code> on them multiple times, there may be a purpose. I can't see any gain here though. </p>

<p>I would just collapse everything down to a function that accepts the three bits of data (<code>op</code>, <code>num1</code> and <code>num2</code>) and just call the function directly when needed.</p>

<hr>

<p>There's cleaner ways of handling the "dispatching" than a <code>switch</code>. I'd just use a regular JavaScript object here:</p>

<pre><code>// Associate the operator strings
//  with functions
var strToOp = {"+": (x, y) =&gt; x + y, 
               "-": (x, y) =&gt; x - y,   
               "*": (x, y) =&gt; x * y,
               "/": (x, y) =&gt; x / y};

var num1 = 2;
var num2 = 5;
var op = "*";

// Get a function from the map
var func = strToOp[op];

// func will be undefined if they supply a bad operator string
// This is roughly equivalent to your "default" case
if(func) {
    // And give the numbers to it
    var result = func(num1, num2);

    // Prints 10
    console.log(result);

} else {
    // Handle bad operator
} 
</code></pre>
    </div>