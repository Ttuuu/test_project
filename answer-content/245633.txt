<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The code and what you're doing are very simple, there's probably not a whole lot you can do here. Here are some thoughts:</p>
<ul>
<li><p>Styling: consistent indentation and following PEP8, please.</p>
</li>
<li><p>If the original data isn't important to keep around, consider overwriting the data in-place. So, <code>data[column], _ = stats.boxcox(data[column])</code>. This allows Pandas to forget the old data after the transformation has been applied to it, saving a little memory. Probably no noticeable time savings from this, though.</p>
</li>
<li><p>I note from the <a href="https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.boxcox.html" rel="nofollow noreferrer">boxcox</a> documentation that, if <code>lambda</code> isn't given, it's computed to maximize the log-likelihood of the result. I don't know anything about this transform, but depending on how that parameter is being computed and what it means, there may be a way to pre-compute it for your given data more efficiently and thus save that computation time.</p>
</li>
</ul>
<p>Unfortunately, when your code is basically one line long (the <code>boxcox</code> call is the only thing that's substantial here), there's only so much you can do to make it faster, especially if that one line is already calling a high-performance library like Scipy. If that's not fast enough, then you'll need to break the underlying algorithm apart and look for ways that it can be optimized when you apply stronger assumptions, e.g. if you assume your data is all non-negative rather than checking it at runtime, or can find a more efficient way to compute an optimal <code>lambda</code>.</p>
    </div>