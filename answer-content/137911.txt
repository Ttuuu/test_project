<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I have a possible solution for your case, this is what I am thinking.
1) You can implement <strong>scrollViewDidEndDragging</strong> delegate and load your image for the visible cells.
for ex. </p>

<pre><code>  - (void)scrollViewDidEndDecelerating:(UIScrollView *)scrollView
    {
            [self loadImagesForOnScreenRows];
    }
</code></pre>

<p><strong>loadIamgesForOnScreenRows</strong>  will look like:</p>

<pre><code>- (void)loadImagesForOnScreenRows
{

    NSArray *visiblePaths = [self.tracksListing indexPathsForVisibleRows];

    for (NSIndexPath *indexPath in visiblePaths){
            [[self.tableView cellForRowAtIndexPath:indexPath] bindItemObject:record];
        }
    }
}
</code></pre>

<p>In my case <strong>bindItemObject</strong> is for downloading the image implemented in tableViewCell class, and <strong><em>record</em></strong> contains the url for the image.</p>

<p>The only problem which you will encounter in this case is, when the tableView appears for the first time.
In that case I suggest you to programmatically call the  </p>

<pre><code>[self.tableView scrollToRowAtIndexPath:indexPath
                          atScrollPosition:UITableViewScrollPositionTop
                                  animated:YES]; 
</code></pre>

<p>and give indexpath as indexpath for row:0 and section:0</p>

<p>I think this can solve your problem.</p>
    </div>