<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Some simple suggestions after a first look at <code>scraper.py</code>:</p>

<ol>
<li><p><code>class Song</code> defines a method called <code>printSong</code>. Don't do this. Instead, use the dundermethod <code>__str__</code> (and maybe <code>__repr__</code>) to define a mechanism to "stringify" the song, and then let the normal <code>print</code> function handle it:</p>

<p>print(str(song))  # or ...
print(repr(song))</p></li>
<li><p>Your <code>getSundayDate</code> computes the date of the appropriate Sunday, then returns it as a string. Instead, return the date object. Let the caller handle formatting the string, since the caller is <code>getUrlPattern</code> which does nothing but format strings...</p></li>
<li><p>Throughout your code you have these giant banner comments introducing your functions. Get rid of them, and put the descriptive text inside a docblock comment. This is why docblocks exist in Python:</p>

<p><strong>No!</strong></p>

<pre><code>##------------------------------------------------------------------------------
## remove bad characters from list 
## 
## @param list, list with elements to check
#
def sanitize(strList):
</code></pre>

<p><strong>Yes.</strong> </p>

<pre><code>def sanitize(strList):
    """Remove bad characters from list.

    @param strList,    list with elements to check.
    """
</code></pre></li>
<li><p>Don't raise <code>Exception</code> objects. Class <code>Exception</code> is the base class of the standard error types. If you have to install a block to catch what you're raising, you are going to have to do <code>except Exception:</code> or maybe just <code>except:</code>, and that's no good. Either create your own exception class, like <code>class SongException(Exception): ;pass</code> or use the standard types (<code>IndexError</code>, <code>ValueError</code>, and <code>TypeError</code> for the most part).</p></li>
<li><p>In <code>parseHtml</code> you do this:</p>

<pre><code>for element in range(len(interpreter)):
    interpreter_list.append(interpreter[element].text)
    title_list.append(title[element].text)
</code></pre>

<p>Written like a true Java programmer! But this isn't Java. So watch this video first: <a href="https://youtu.be/EnSu9hHGq5o" rel="nofollow noreferrer">Loop Like a Native</a> by Ned Batchelder. There are a couple of ways to rewrite this loop. You could zip the two source lists together, unpack them into a tuple, and operate on them:</p>

<pre><code>for interp, elt in zip(interpreter, element):
    interpreter_list.append(interp.text)
    element_list.append(elt.text)
</code></pre>

<p>Or you could use a comprehension to iterate over each list separately to generate the text values, and use the <code>list.extend</code> method to implicitly <code>.append</code> each element of a sequence:</p>

<pre><code>interpreter_list.extend((elt.text for elt in interpreter))
element_list.extend((elt.text for elt in element))
</code></pre>

<p>Have some of this Python-flavored Cool-aid! It's quite delicious... ;-)</p></li>
<li><p>You define <code>getToken</code> in both source files. I'm not sure what that's about...</p></li>
</ol>

<p>Looking at your <code>dataManager.py</code> file, it's quite short. I'd suggest that you just roll both files into a single source file.</p>

<p>Your post title asks how you can make your code more object-oriented. I don't think you need to do that, and I don't think you should try. You are writing a program that is very procedural: do this, then do that, next do the other, and finally store things here. That's not a good match for OO code, especially since the elements in question are all different. I encourage you to focus on using simple functions to ensure that you have good separation of concerns and encapsulation. I would also suggest visiting the documentation for Python's "magic methods" (aka dundermethods), and sitting through the Batchelder video I linked. There's a huge amount of Python mastery in that one 30-minute presentation.</p>
    </div>