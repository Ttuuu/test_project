<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I don't normally review Java, but your code looks like it should work. You might consider using the <code>synchronised</code> language feature instead in this instance, as you are not gaining anything from manually using <code>ReentrantReadWriteLock</code> (e.g. you don't have anything which uses a <code>Read</code> lock (e.g. <code>tryPeek</code>)).</p>

<hr>

<p>I appreciate that you want to use a minimal subset of the <code>JDK</code>, but I'd still advocate a <a href="https://docs.oracle.com/javase/7/docs/api/java/util/Stack.html" rel="nofollow noreferrer"><code>Stack</code></a> as the backing data-structure, since it (unsurprisingly) better represents the data, and in doing so reduces the opportunity for errors (e.g. ensuring you remove the topmost element, etc).</p>

<hr>

<p>The <code>return null</code> in <code>pop</code> is not great, as your data-structure could just as well hold a <code>null</code>; it should either <code>throw</code> when you try to remove an element that doesn't exist, or you should provide some wrapper type which indicates whether a value was retrieved. At a minimum, the fact that the method returns <code>null</code> when the queue is empty should be clearly documented.</p>

<p>If the <code>return null</code> is to remain, I'd move it (or indeed a <code>throw</code> which replaces it) into an <code>else</code> clause within the <code>try...catch</code>, so that it is closer to the logic which determines it. Others might suggest inverting the <code>if</code>, so that you <code>throw</code>/<code>return null</code> on <code>list.isEmpty()</code>, and perform the meaningful operation otherwise.</p>

<hr>

<p>Declaring <code>"In finally"</code> to the console might be useful for debugging, but as a consumer, this would infuriate me. Your class should provide a meaningful interface, and it shouldn't have any such unnecessary external influence.</p>

<hr>

<p>You might consider making <code>list</code> and <code>lock</code> <code>final</code>, which will ensure they are assigned within the constructor, and prevent their being overwritten by accident. The type isn't disposable, so there is no need to clear the references at any point.</p>

<hr>

<p>Be consistent in your styling: you use <code>this.list</code>, and then on the next line just <code>lock</code>. You've also a random empty line half way through <code>push</code>, with the rest of your code devoid of any spacing.</p>
    </div>