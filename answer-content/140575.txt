<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Concept</h2>

<p>Internet "speed" actually consists of multiple factors, including <strong>bandwidth</strong>, <strong>latency</strong>, and packet loss.  What exactly are you trying to measure?  If it's bandwidth (data transfer speed in bits per second), then you should also measure transfers of larger payloads, because the time to complete small transfers will tend to be dominated by latency effects.  If it's latency (milliseconds for a round trip) that you are want to measure, then a tiny packet (typically an ICMP echo request, commonly called a "ping") would be more appropriate.</p>

<p>In addition, there are confounding issues:</p>

<ul>
<li><strong>Upload vs. download speed</strong>: Residential Internet connections tend to significantly favour downloads, since that's what most consumers care about.</li>
<li><strong>Traffic shaping</strong>: Some ISPs will throttle the bandwidth to penalize very large transfers, so that smaller responses feel more responsive.</li>
<li><strong>Server performance</strong>: It does take a few milliseconds for Google's server to formulate the response payload; that delay would be a more significant fraction of the measured round-trip time for a short response than for a long response.</li>
<li><strong>HTTP and HTTPS overhead</strong>: You're considering only the size of the HTTP response <em>payload</em>.  Since you're using HTTPS, there are also multiple TCP round trips needed to perform the TLS handshake, and a few kilobytes to transfer the certificates.  The HTTP headers could add another kilobyte or so.  All of this is significant when the payload is only ~10 kB short.</li>
<li><strong>DNS overhead</strong>: Resolving the <code>google.com</code> hostname to an IP address might involve a DNS lookup, which would add a few milliseconds.  The time for that DNS lookup is accounted for in your benchmark, but not the traffic.</li>
<li><strong>Proximity</strong>: The "Internet" is not one entity.  Connectivity to various parts of the Internet will have different performance characteristics.</li>
</ul>

<h2>Time calculation bug</h2>

<p>When you do <code>str(datetime.datetime.now())</code>, you are converting the timestamp from a <code>datetime</code> object that is suitable for arithmetic into a string, which is a horrible format for calculations.  You then try to salvage the information by dropping the first 17 characters of the string and converting the seconds portion back into a <code>float</code>.</p>

<p>What happens if the start and end times straddle a minute boundary?  You'll get an elapsed time of approximately -60 seconds!</p>

<p>A better way would be:</p>

<pre><code>start = datetime.datetime.now()
…     # Do some work here…
end = datetime.datetime.now()
diff = (end - start).total_seconds()
</code></pre>

<h2>Inefficiencies</h2>

<p>The code expects a path as <code>sys.argv[0]</code>.  What is it for?  It seems to be used only to derive a directory to use for a temporary file, and the temporary file is used just to determine the length of the response payload.</p>

<p>All you had to do to obtain the length was <code>len(urllib2.urlopen('https://google.com'))</code>.  No filesystem access is needed!</p>

<h2>Lint</h2>

<ul>
<li>By <a href="https://www.python.org/dev/peps/pep-0008/#naming-conventions" rel="nofollow noreferrer">PEP 8</a>, <code>getInternetSpeed()</code> should be <code>get_internet_speed()</code>.  The function should probably accept a parameter for the URL to test.  Furthermore, if the function is named "get<i>Something</i>", I would expect it to return a value rather than print its result.</li>
<li>For filename manipulation, use the <a href="https://docs.python.org/2/library/os.path.html#module-os.path" rel="nofollow noreferrer"><code>os.path</code></a> module.</li>
<li><p>Avoid redefining variables, especially in a way that changes their type:</p>

<blockquote>
<pre><code>x = urllib2.urlopen('https://google.com')
…
x = x.read()
</code></pre>
</blockquote>

<p><code>x</code> is a very poor variable name, by the way.  I suggest <code>req</code>.</p></li>
<li><p><code>open()</code> should almost always be used in the context of a <code>with</code> block, so that the closure will be handled correctly for you:</p>

<pre><code> with open(os.path.join(temp_dir, 'TEMP.txt'), 'w') as f:
     f.write(x)
</code></pre></li>
<li>To generate temporary files, use the <a href="https://docs.python.org/2/library/tempfile.html" rel="nofollow noreferrer"><code>tempfile</code></a> library to guarantee that you will not overwrite an existing file.</li>
</ul>
    </div>