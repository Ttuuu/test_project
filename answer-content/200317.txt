<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Unnecessary includes: These</p>

<pre><code>#include &lt;algorithm&gt;
#include &lt;functional&gt;
#include &lt;numeric&gt;
</code></pre>

<p>are apparently not needed.</p>

<p>In your function</p>

<pre><code>template &lt;typename T&gt;
bool all_Positive(const T start, const T end) {
    T it;
    for (it = start; it != end; it++) {
        if (*it &lt; 0) return false;
    }

    return true;
}
</code></pre>

<p>the test should be</p>

<pre><code>        if (*it &lt;= 0) return false;
</code></pre>

<p>otherwise zero would qualify as positive number. As @tinstaafl
already said, verifying the input is usually not necessary for
programming challenges.</p>

<p>The functions</p>

<pre><code>std::string find_2_Nums_That_Minus_To_Difference(std::vector&lt;int&gt; availableWeights, int difference)
std::string scale_Balancing(std::vector&lt;int&gt; integerWeights, std::vector&lt;int&gt; availableWeights)
</code></pre>

<p>take the vectors as values, you probably want to pass them by
reference to avoid making copies.</p>

<p>In <code>scale_Balancing()</code> a possible pair of weights adding to the difference is
 determined (and possibly discarded) <em>before</em> searching for a single weight.</p>

<p>It is also confusing that</p>

<pre><code>std::vector&lt;int&gt; find_2_Nums_That_Add_To_Difference(...)
</code></pre>

<p>returns a vector, but</p>

<pre><code>std::string find_2_Nums_That_Minus_To_Difference(...)
</code></pre>

<p>returns a string.</p>

<p>Both functions actually return a pair of integers or “nothing.”
In C++17 you can use a</p>

<pre><code>std::optional&lt;std::pair&lt;int, int&gt;&gt;
</code></pre>

<p>for that purpose. If C++17 is not available then returning a <code>std::pair&lt;int, int&gt;</code>
(with <code>{ -1, -1 }</code> indicating “not found”) would be an alternative to
returning a vector.</p>

<p>Better (and slightly shorter) function names would be</p>

<pre><code>find_pair_with_sum(std::vector&lt;int&gt;&amp;nums, int sum)
find_pair_with_difference(std::vector&lt;int&gt;&amp;nums, int difference)
</code></pre>

<p>Note that both functions can be implemented with \$ O(n) \$
complexity if the array is sorted, see for example</p>

<ul>
<li><a href="https://www.geeksforgeeks.org/find-a-pair-with-the-given-difference/" rel="nofollow noreferrer">Find a pair with the given difference</a></li>
<li><a href="https://www.geeksforgeeks.org/write-a-c-program-that-given-a-set-a-of-n-numbers-and-another-number-x-determines-whether-or-not-there-exist-two-elements-in-s-whose-sum-is-exactly-x/" rel="nofollow noreferrer">Given an array A[] and a number x, check for pair in A[] with sum as x</a></li>
</ul>

<p>With those changes, the main function simplifies to</p>

<pre><code>std::string scale_Balancing(std::vector&lt;int&gt;&amp; integerWeights, std::vector&lt;int&gt;&amp; availableWeights)
{
    int difference = std::abs(integerWeights[1] - integerWeights[0]);
    sort(availableWeights.begin(), availableWeights.end());

    if (std::binary_search(availableWeights.begin(), availableWeights.end(), difference)) {
        return std::to_string(difference);
    }

    auto sum_pair = find_pair_with_sum(availableWeights, difference);
    if (sum_pair) {
        return std::to_string(sum_pair-&gt;first) + "," + std::to_string(sum_pair-&gt;second);
    }

    auto diff_pair = find_pair_with_difference(availableWeights, difference);
    if (diff_pair) {
        return std::to_string(sum_pair-&gt;first) + "," + std::to_string(sum_pair-&gt;second);
    }

    return "NOT POSSIBLE";
}
</code></pre>
    </div>