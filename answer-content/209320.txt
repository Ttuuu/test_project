<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The below code uses Julia 1.0.  Full code as a Pkg3 project is available <a href="https://github.com/phipsgabler/Bernstein.jl" rel="nofollow noreferrer">here</a>.</p>

<h2>Preliminaries</h2>

<p>There's enough code for it to get its own module.  This also makes testing easier.</p>

<pre><code>module Bernstein

using Polynomials

import Base: convert, promote_rule, show
import LinearAlgebra: dot, norm
import Polynomials: poly
</code></pre>

<p>Since we're in a module, we must define the exported things.  Since most of the things is just
overloaded methods, only the type remains.</p>

<pre><code>export BernsteinPoly
</code></pre>

<p>You do this check so often, we can factor it out.  Alternative: using a separate type
for intervals.</p>

<pre><code>macro checkinterval(α, β)
    :(@assert $(esc(α)) &lt;= $(esc(β)) "Invalid interval")
end
</code></pre>

<p>Parametrization by a constrained type is <a href="https://docs.julialang.org/en/v1.0/manual/performance-tips/#Avoid-fields-with-abstract-type-1" rel="nofollow noreferrer">better</a> than fields of an abstract type.  But in the case of <code>n</code> and <code>i</code>, concrete <code>Int</code>s make more sense, since they represent natural numbers
always (this makes conversions below easier).
And I'm calling it <code>BernsteinPoly</code>, since it is a variant of <code>Poly</code>.</p>

<pre><code>struct BernsteinPoly{T&lt;:Number}
    n::Int
    i::Int
    α::T
    β::T
end

BernsteinPoly(n, i) = BernsteinPoly(n, i, 0.0, 1.0)
</code></pre>

<p>Just implementing <code>show</code> using <code>print</code> is the recommended way for <a href="https://docs.julialang.org/en/v1.0/manual/types/#man-custom-pretty-printing-1" rel="nofollow noreferrer">custom pretty-printing</a>. Here, we can reuse <code>Polynomials.printpoly</code> for nicer and more consistent formatting:</p>

<pre><code>function show(io::IO, b::BernsteinPoly)
    print(io, "BernsteinPoly(")
    Polynomials.printpoly(io, poly(b))
    print(io, ")")
end
</code></pre>

<h2>Conversions</h2>

<p><code>get_p</code> was essentially the conversion from <code>BernsteinPoly</code> to <code>Poly</code>.  We can replace this
by the implementation of proper <code>convert</code> methods.  The default parameters are unnecessary,
since already occuring defaulted in the <code>BernsteinPoly</code> constructor.</p>

<pre><code>function convert(::Type{Poly{S}}, b::BernsteinPoly) where {S&lt;:Number}
    n, i, α, β = b.n, b.i, convert(S, b.α), convert(S, b.β)
    @checkinterval α β

    return (binomial(n, i)
            * poly(fill(α, i))     # `fill` instead of list comprehension
            * poly(fill(β, n - i))
            * (-1)^(n - i)
            / (β - α)^n)
end
</code></pre>

<p>This allows you to just say <code>convert(Poly, b)</code>, automatically reusing the inner type of <code>b</code></p>

<pre><code>convert(::Type{Poly}, b::BernsteinPoly{T}) where {T&lt;:Number} =
    convert(Poly{T}, b)
</code></pre>

<p>While we're at it: conversion between different <code>BernsteinPoly</code> values </p>

<pre><code>convert(::Type{BernsteinPoly{S}}, b::BernsteinPoly) where {S&lt;:Number} =
    BernsteinPoly(b.n, b.i, convert(S, b.α), convert(S, b.β))
</code></pre>

<p>If we're handling different representations, we sometimes need to determine the "most general"
form, which is called promotion:</p>

<pre><code>promote_rule(a::Type{BernsteinPoly{S}}, b::Type{Poly{T}}) where {S&lt;:Number, T&lt;:Number} =
    Poly{promote_type(S, T)}

promote_rule(::Type{BernsteinPoly{S}}, ::Type{BernsteinPoly{T}}) where {S&lt;:Number, T&lt;:Number} = 
    BernsteinPoly{promote_type(S, T)}
</code></pre>

<p>Also add a method to the <code>poly</code> smart constuctor, which is now trivial:</p>

<pre><code>poly(b::BernsteinPoly) = convert(Poly, b)
</code></pre>

<h2>Linear Algebra</h2>

<p>Now to the linear algebra part.  We could add methods to <code>dot</code> and <code>norm</code> from <code>LinearAlgebra</code>:</p>

<pre><code>function dot(p::Poly{T}, q::Poly{T}, α = zero(T), β = one(T)) where {T&lt;:Number}
    @checkinterval α β
    polyint(p * q, α, β)
end
</code></pre>

<p>And the norm induced by that inner product:</p>

<pre><code>function norm(q::Poly{T}, α = zero(T), β = one(T)) where {T&lt;:Number}
    @checkinterval α β
    √dot(q, q, α, β) / (β - α)
end
</code></pre>

<p>But such "overloads from outside" are frowned upon.  As of writing this, there's a <a href="https://github.com/JuliaMath/Polynomials.jl/blob/12d611fcd9b43300ecc83220b52c9127866b1a38/src/Polynomials.jl#L236" rel="nofollow noreferrer"><code>norm</code></a> method
in <code>Polynomials</code>, but not <code>dot</code>.  There's an <a href="https://github.com/JuliaMath/Polynomials.jl/issues/110" rel="nofollow noreferrer">issue</a> about that; basically, <code>dot</code> is not
unique, hence we need to specify the intervals each time here.</p>

<p>For Bernstein polynomials, on the other hand, the inner product is defined uniquely, if I
understood correctly.</p>

<pre><code>function dot(b::BernsteinPoly{T}, q::BernsteinPoly{T}) where {T&lt;:Number}
    @checkinterval b.α q.α
    @checkinterval b.β q.β
    m, i, n, j, α, β = b.n, b.i, q.n, q.i, b.α, b.β
    (β - α) * binomial(m, i) * binomial(n, j) / ((m + n + 1) * binomial(m + n, i + j))
end
</code></pre>

<p>And the induced norm, as before.</p>

<pre><code>function norm(b::BernsteinPoly)
    √dot(b, b) / (b.β - b.α)
end
</code></pre>

<p>As the last remaining question, how to do cross-type inner products.  If <code>dot</code> is defined for
<code>Poly</code> as written above, we can use <code>dot(promote(p, q)..., α, β)</code>.  But it's difficult to get
that working as a method.  I tried</p>

<pre><code>dot(p::Union{Poly{T}, BernsteinPoly{T}}, q::Union{Poly{T}, BernsteinPoly{T}},
     α = zero(T), β = one(T)) where {T&lt;:Number} =
     dot(promote(p, q)..., α, β)
</code></pre>

<p>but that doesn't work.  It's probably not recommended to do that anyway.  Use <code>promote</code>
explicitely where necessary.</p>

<h2>Example output</h2>

<pre><code>julia&gt; B = BernsteinPoly(3, 2)
BernsteinPoly(3.0*x^2 - 3.0*x^3)

julia&gt; Q = BernsteinPoly(4, 3)
BernsteinPoly(4.0*x^3 - 4.0*x^4)

julia&gt; using LinearAlgebra

julia&gt; dot(B, Q)
0.07142857142857142

julia&gt; norm(B)
0.29277002188455997


end # module
</code></pre>
    </div>