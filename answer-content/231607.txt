<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>One of the things I really like about Kotlin is how the source code for existing functions in the <code>stdlib</code> are readily available and can be leveraged to quickly create very efficient functions that are similar to existing ones.</p>

<p>In your particular case I suggest taking a look at <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/max.html" rel="nofollow noreferrer"><code>max</code></a>, <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/max-by.html" rel="nofollow noreferrer"><code>maxBy</code></a>, and <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/max-with.html" rel="nofollow noreferrer"><code>maxWith</code></a>. We can create our own extension functions that instead of returning a single "max" element returns a <code>List</code> of them. e.g. <code>maxElements</code>, <code>maxElementsBy</code>, and <code>maxElementsWith</code>.</p>

<p>For this example we only need a <code>maxElementsWith</code> function which takes a <code>Comparator</code> (based on <a href="https://github.com/JetBrains/kotlin/blob/master/libraries/stdlib/common/src/generated/_Collections.kt#L1688-L1700" rel="nofollow noreferrer"><code>maxWith</code> source code</a>):</p>

<pre><code>fun &lt;T&gt; Iterable&lt;T&gt;.maxElementsWith(comparator: Comparator&lt;in T&gt;): List&lt;T&gt; {
    val iterator = iterator()
    if (!iterator.hasNext()) return emptyList()
    var max = iterator.next()
    var maxElements = mutableListOf(max)
    while (iterator.hasNext()) {
        val e = iterator.next()
        when (comparator.compare(e, max).sign) {
            1 -&gt; {
                max = e
                maxElements = mutableListOf(max)
            }
            0 -&gt; maxElements.add(e)
        }
    }
    return maxElements
}
</code></pre>

<p>You can then use <code>maxElementsWith</code> to find a single "best" (max) value, a list of them, a random one, etc.</p>

<p>If you need the weight of the best/max values then you could first map your list of items to a list of pairs of the weight to the item. Pairs often get a bit tricky to read so you might even create a <code>WeightedValue</code> <code>data class</code> to improve readability:</p>

<p>Examples:</p>

<pre><code>val elements = listOf("hi", "hello", "", "world")

val bestElements = elements.maxElementsWith(compareBy(String::length))
println(bestElements)
// [hello, world]

println(bestElements.random())
// ${either hello or world}

val newBestElements = bestElements.plus("supercalifragilisticexpialidocious")
    .maxElementsWith(compareBy(String::length))
println(newBestElements)
// [supercalifragilisticexpialidocious]

println(
    elements.map { it.length to it }
        .maxElementsWith(compareBy { it.first })
        .first()
        .first
)
// 5

data class WeightedValue&lt;out T, out W&gt;(val weight: W, val value: T)

fun &lt;T, W&gt; Iterable&lt;T&gt;.withWeight(weigher: (T) -&gt; W): List&lt;WeightedValue&lt;T, W&gt;&gt; {
    return map { WeightedValue(weigher(it), it) }
}

println(
    elements.withWeight { it.length.toDouble() }
        .maxElementsWith(compareBy { it.weight })
        .first()
        .weight
)
// 5.0
</code></pre>

<p><a href="https://pl.kotl.in/N9D29SNCp" rel="nofollow noreferrer">Kotlin Playground Link</a></p>
    </div>