<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Understanding <code>String.equals(Object)</code></h3>

<p>Since <code>String.equals(Object)</code> cannot be overridden, it is safe to just test that the entries' value is a <code>String</code>. In other words, you only need one <code>instanceof String</code> check.</p>

<h3>Iterating the smaller loop</h3>

<p>Now, now, this smells a bit of premature optimization, but if you are certain that one of the <code>Map</code> is significantly smaller than the other and is likely to stay that way, you can consider iterating on the smaller loop. </p>

<h3><code>Map.remove(Object, Object)</code></h3>

<p>Streams are a little harder to understand, but I don't think that means the effort shouldn't be put in ;). There is a slightly shorter, and therefore maybe easier to understand, solution that relies on Java 8's new <a href="https://docs.oracle.com/javase/9/docs/api/java/util/Map.html#remove-java.lang.Object-java.lang.Object-" rel="nofollow noreferrer"><code>Map.remove(Object, Object)</code></a> method to do the entry value comparison for us too.</p>

<pre><code>Map&lt;String, Object&gt; copy = new HashMap&lt;&gt;(requires.get(requiresIndex).getProperties());
Optional&lt;Map.Entry&lt;String, Object&gt;&gt; duplicate = properties.entrySet().stream()
        .filter(property -&gt; property.getValue() instanceof String
                                &amp;&amp; copy.remove(property.getKey(), property.getValue()))
        .findFirst();
if (duplicate.isPresent()) {
    Map.Entry&lt;String, Object&gt; property = duplicate.get();
    throw new Exception("Property " + property.getKey() + " exists with value "
            + property.getValue() + " in requires " + requiresName);
}
</code></pre>

<p>In this approach, the second filtering condition checks if the <code>copy</code> of the 'requires map' contains the same entry that will be removed from the entry in <code>properties</code>. The first filtering condition is required to ensure at least one of the value is a <code>String</code>, per your question. </p>

<p>Still, this assumes that all the entries' values will strictly adhere to the general contract of <code>Object.equals(Object)</code>, i.e. there is not going to be a case of  <code>MyType.equals(String) == true</code> (since <code>String.equals(MyType) == false</code>).</p>

<p>You should also consider using a more appropriately-typed <code>Exception</code> class instead of the checked <code>Exception</code>. <s>Over here, lambdas do no deal with checked exceptions, so I have used <code>RuntimeException</code> as an example.</s></p>

<p><em>edit</em></p>

<p>Since you want to also log all duplicate keys before running the value checks, you can insert a <a href="https://docs.oracle.com/javase/9/docs/api/java/util/stream/Stream.html#peek-java.util.function.Consumer-" rel="nofollow noreferrer"><code>Stream.peek(Consumer)</code></a> step in between your (now two) filter steps:</p>

<pre><code>Optional&lt;Map.Entry&lt;String, Object&gt;&gt; duplicate = properties.entrySet().stream()
        .filter(property -&gt; property.getValue() instanceof String
                                &amp;&amp; copy.containsKey(property.getKey()))
        .peek(property -&gt; LOG.warn("Property with key {} already exists in requires {}", 
                                property.getKey(), requires.get(requiresIndex).getName()))
        .filter(property -&gt; copy.remove(property.getKey(), property.getValue()))
        .findFirst();
</code></pre>
    </div>