<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There is this thing in Python called unpacking.</p>

<p>The idea being that you can assign at once in several variables all the values contained in a single sequence:</p>

<pre><code>&gt;&gt;&gt; example = (1, 2, 3)
&gt;&gt;&gt; a, b, c = example
&gt;&gt;&gt; print(a, b, c)
1 2 3
</code></pre>

<p>In fact, this mechanism works with any iterable, including strings. What's even better is that this <a href="https://www.python.org/dev/peps/pep-3132/">syntax got extended in Python 3</a> to support assigning the remaining of the items into a single variable:</p>

<pre><code>&gt;&gt;&gt; a, *b, c = range(5)
&gt;&gt;&gt; print(a, c)
0 4
&gt;&gt;&gt; print(b)
[1, 2, 3]
</code></pre>

<p>Now, let's make good use of it:</p>

<pre><code>def translate_to_piglatin(word):
    vowels = 'aeiou'
    first_letter, *remaining_letters = word.lower()

    if first_letter in vowels:
        return word + 'yay'
    else:
        return ''.join(remaining_letters) + first_letter + 'ay'
</code></pre>

<p>Here I removed the need for <code>first_letter, *inner_part, last_letter = word.lower()</code> because I assumed that <code>word</code> was not ill-formed. Since you check for <code>isalpha</code> in your <code>main</code>, you don't really need to do so in this function.</p>

<p>An other improvement would be to define <code>vowel</code> as a constant outside of this function.</p>

<p>Converting back can also easily make use of unpacking:</p>

<pre><code>def translate_to_english(word):
    if word.endswith('yay'):
        return word[:-3]
    else:
        *remaining_letters, last_letter, a, y = word
        return last_letter + ''.join(remaining_letters)
</code></pre>

<p>In this case:</p>

<ul>
<li>I used a condition to enter the <code>if</code> rather than setting a boolean before;</li>
<li>I used the slice syntax to extract out the last 3 characters directly.</li>
</ul>

<p>In both cases I returned from within the <code>if</code> to simplify the logic and the variable management. Each branch needing its own kind of data structure to work with.</p>

<hr>

<p>The last thing unpacking can help you with is the choice of language/transformation function. If you define, for each input letter, the name of the language and the associated transformation function in a tuple, you can extract them out easily:</p>

<pre><code>CONVERSION_INFOS = {
    'e': ('english', translate_to_english),
    'p': ('pig latin', translate_to_piglatin),
}

def main():
    to_piglatin = input("Do you want to translate something to piglatin[P], or to english[E]: ").lower()

    while to_piglatin not in CONVERSION_INFOS:
        to_piglatin = input("[P/E]").lower()

    lang, translate = CONVERSION_INFOS[to_piglatin]

    sentence = input("Enter a sentence to translate it into {}: ".format(lang))

    if not sentence.isalpha():
        print("Invalid input, please do not use numbers or punctuation marks")
        sleep(1)
        main()

    translated_sentence = ' '.join(translate(word) for word in sentence.split())

    print(translated_sentence)
    input()
    return True
</code></pre>

<p>Note the use of <code>lower</code> on the first two <code>input</code>s so your <code>while</code> loop can break if the user input <code>'E'</code> or <code>'P'</code>.</p>

<p>I also merged some lines together to remove the intermediate variables you only use once and reduce the burden of understanding your code for the reader.</p>

<hr>

<p>Lastly, you can improve the workflow of your program by making a correct use of return values. You don't need to return something at the end of a function in Python (meaning <code>return True</code> in <code>main</code> is unneccessary) when there is no associated meaning. However, we can make use of it:</p>

<ul>
<li>We return <code>True</code> if we correctly translated a sentence;</li>
<li>We return <code>False</code> if we couldn't.</li>
</ul>



<pre><code>def main():
    to_piglatin = input("Do you want to translate something to piglatin[P], or to english[E]: ").lower()

    while to_piglatin not in CONVERSION_INFOS:
        to_piglatin = input("[P/E]").lower()

    lang, translate = CONVERSION_INFOS[to_piglatin]

    sentence = input("Enter a sentence to translate it into {}: ".format(lang))

    if not sentence.isalpha():
        print("Invalid input, please do not use numbers or punctuation marks")
        return False

    translated_sentence = ' '.join(translate(word) for word in sentence.split())

    print(translated_sentence)
    return True
</code></pre>

<p>This let you handle retries outside of the function:</p>

<pre><code>while not main():
    pass  # or time.sleep(1) like you did, but it feels a bit unresponsive
</code></pre>

<p>You may also want to change the name of the function because it doesn't convey much meaning when calling it like that.</p>
    </div>