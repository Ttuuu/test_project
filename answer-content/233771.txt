<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>In addition to @Jeff's comments, you could also change your approach a bit. The reason you use <code>List&lt;T1&gt;</code> is you want to do this with multiple <code>Tuple&lt;T1&gt;</code> don't you? You might have lists of tuples in your code here and there e.g. <code>List&lt;Tuple&lt;T1, T2&gt;&gt;</code>. Instead of creating methods which need to accept other objects as parameters and change their state - construct and return right in your extension method.</p>

<pre><code>/// &lt;summary&gt;
/// Takes a list of tuples and returns a tuple of lists.
/// &lt;/summary&gt;
public static Tuple&lt;List&lt;T1&gt;, List&lt;T2&gt;&gt; ToListTuple&lt;T1, T2&gt;( this IEnumerable&lt;Tuple&lt;T1, T2&gt;&gt; tupleList )
{
    return new Tuple&lt;List&lt;T1&gt;, List&lt;T2&gt;&gt;(
        tupleList.Select( inputObj =&gt; inputObj.Item1 ).ToList(),
        tupleList.Select( inputObj =&gt; inputObj.Item2 ).ToList()
    );
}
</code></pre>

<p>It might seem an overkill at first. Writing methods as pure functions is however something I would highly recommend. Pure functions are functions which do not modify state of any object, they just return things and their results are <em>repeatable</em>. Also if you take this approach the operation can be easily reversed:</p>

<pre><code>/// &lt;summary&gt;
/// Takes a tuple of lists and returns a list of tuples.
/// &lt;/summary&gt;
public static List&lt;Tuple&lt;T1, T2&gt;&gt; ToTupleList&lt;T1, T2&gt;(this Tuple&lt;IEnumerable&lt;T1&gt;, IEnumerable&lt;T2&gt;&gt; listTuple)
{
    return listTuple.Item1.Zip(listTuple.Item2, MakeNewTuple).ToList();
}

/// &lt;summary&gt;
/// Returns a tuple containing two objects.
/// &lt;/summary&gt;
private static Tuple&lt;T1, T2&gt; MakeNewTuple&lt;T1, T2&gt;(T1 t1Item, T2 t2Item)
{
    return new Tuple&lt;T1, T2&gt;(t1Item, t2Item);
}
</code></pre>

<p>To support other sizes of <code>Tuple&lt;...&gt;</code> objects you will need to write additional overloads.</p>
    </div>