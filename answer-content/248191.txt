<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ol>
<li>Do you need to validate inputs ?</li>
</ol>
<p>If so, you should test all cases :</p>
<ul>
<li>input could be null</li>
<li>input could be an empty string</li>
<li>n could be negative or 0</li>
</ul>
<ol start="2">
<li>Variable names</li>
</ol>
<p>Variables names are important, they help understand the code better. You don't have to make them as small as possible. Especially when you have an IDE like VisualStudio that will help you select the proper one with InteliSense.</p>
<ul>
<li>numAs -&gt; aCount</li>
<li>rem -&gt; remainder</li>
<li>reps -&gt; repetitions</li>
<li>sRem -&gt; remainderString</li>
</ul>
<ol start="3">
<li>Fail fast</li>
</ol>
<p>It is usually better to leave a method "as soon as possible". So you want to perform input validation before doing any work and exit the method if it doesn't validate.
The same way, if your remainder is 0, you can return your result right away.</p>
<ol start="4">
<li>Integer division</li>
</ol>
<p>To calculate your repetition, you subtract the remainder from n. If you check <a href="https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/operators/arithmetic-operators#integer-division" rel="nofollow noreferrer">integer division in C#</a>, you don't have to :</p>
<pre><code>long repetitions = n / input.length;
</code></pre>
<ol start="5">
<li>Use Linq</li>
</ol>
<p><a href="https://codereview.stackexchange.com/a/248163/101014">As per tinstaafl solution</a>, you can use Linq to save a variable and a line :</p>
<pre><code>count += remainderString.Take((int)remainder).Count(c =&gt; c.Equals('a'));
</code></pre>
<p>So, all in all, you get :</p>
<pre><code>long aCount = input.Count(c =&gt; c.Equals('a'));

if (input == null || input.Length == 0 || n &lt;= 0)
{
    return 0;
}

long repetitions = n / input.Length;
long remainder = n % input.Length;
long count = repetitions * aCount;

if (remainder == 0)
{
    return count;
}

return count + remainderString.Take((int)remainder).Count(c =&gt; c.Equals('a'));
</code></pre>
    </div>