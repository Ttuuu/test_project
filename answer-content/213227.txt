<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>Is there a way to avoid the <code>cond</code> dispatch in <code>na√Øve-prime?</code>?</p>
</blockquote>

<p>You could do <code>naive-prime?</code> this way:</p>

<pre><code>(defn naive-prime? [n]
  (and
       (&gt;= n 2)
       (-&gt;&gt; n
            (inc)
            (Math/sqrt)
            (range 2)
            (not-any? #(zero? (rem n %))))))
</code></pre>

<p>This gets rid of the special cases <code>1</code> and <code>2</code>. The trick is to increment <em>before</em> applying <code>Math/sqrt</code>, so that the edge case <code>2</code> works correctly. </p>

<p>I've also elided the <code>not</code> into the <code>some</code> to produce <code>not-any?</code>.</p>

<blockquote>
  <p>I'd mainly like recommendations for speeding this up.</p>
</blockquote>

<p>Try</p>

<pre><code>(defn sieve-primes [n]
  (loop [p 2 ; First prime
         marked #{} ; Found composites
         primes []]
    (let [mults (range (* p p) (inc n) p)
          next-p (-&gt;&gt; p
                      (inc)
                      (iterate inc)
                      (remove marked)
                      (first))

          new-primes (conj primes p)]

      (if (&gt;= (* next-p next-p) n)
        (into new-primes (remove marked (range next-p (inc n)))
</code></pre>

<p>There are a couple of changes here. </p>

<ul>
<li>Generate  <code>mults</code> as a <code>range</code>, starting at <code>(* p p)</code> - the first
number that needs to be tested with prime factor <code>p</code>.</li>
<li>Stop testing when the prime you would use, <code>next-p</code>, squared is
bigger than the limit <code>n</code>.</li>
</ul>

<p>I don't like the idea of building a massive set of composites. Better turn the algorithm inside out and test each number as it occurs against only the necessary prime factors. But that's a quite different algorithm. </p>
    </div>