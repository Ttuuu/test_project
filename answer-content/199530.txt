<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>If you think of this as an addition problem:  </p>

<p>To that end a constant string of all the accepted characters, to get the the character for a specific index, and a Map to get the index of a specific character, would help.  </p>

<p>Since the result of adding 1, will never be more than 1 character longer than the length of the string, we can use a char[], to store the result.  A simple loop and some math and a few lines later it's done.  It could look something like this:</p>

<pre><code>static final Map&lt;Character, Integer&gt; CHARS = Map.ofEntries(
        entry('A', 0),
        entry('B', 1),
        entry('C', 2),
        entry('D', 3),
        entry('E', 4),
        entry('F', 5),
        entry('G', 6),
        entry('H', 7),
        entry('I', 8),
        entry('J', 9),
        entry('K', 10),
        entry('L', 11),
        entry('M', 12),
        entry('N', 13),
        entry('O', 14),
        entry('P', 15),
        entry('Q', 16),
        entry('R', 17),
        entry('S', 18),
        entry('T', 19),
        entry('U', 20),
        entry('V', 21),
        entry('W', 22),
        entry('X', 23),
        entry('Y', 24),
        entry('Z', 25),
        entry('a', 26),
        entry('b', 27),
        entry('c', 28),
        entry('d', 29),
        entry('e', 30),
        entry('f', 31),
        entry('g', 32),
        entry('h', 33),
        entry('i', 34),
        entry('j', 35),
        entry('k', 36),
        entry('l', 37),
        entry('m', 38),
        entry('n', 39),
        entry('o', 40),
        entry('p', 41),
        entry('q', 42),
        entry('r', 43),
        entry('s', 44),
        entry('t', 45),
        entry('u', 46),
        entry('v', 47),
        entry('w', 48),
        entry('x', 49),
        entry('y', 50),
        entry('z', 51),
        entry('0', 52),
        entry('1', 53),
        entry('2', 54),
        entry('3', 55),
        entry('4', 56),
        entry('5', 57),
        entry('6', 58),
        entry('7', 59),
        entry('8', 60),
        entry('9', 61));
static final String KEYS = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";

public static String getNext(String value)throws BadFormatException{
    int increment = 1;
    int modulus = KEYS.length();
    int length = value.length();
    char[] result = new char[length + 1];
    result[length] = (char)(increment + '0');
    for (int i = length; i &gt; 0; i--) {
        char nextChar = value.charAt(i - 1);
        if(!CHARS.containsKey(nextChar)){
            throw new BadFormatException("String contains illegal characters.");
        }                
        int temp = (CHARS.get(value.charAt(i - 1)) + (result[i] - '0'));
        result[i] = KEYS.charAt(temp % modulus);
        result[i - 1] = (char) ((temp / modulus) + '0');
    }
    if(result[0] == '0'){
        return new String(result, 1, result.length-1 );
    }
    result[0] = KEYS.charAt(0);
    return new String(result);
}
</code></pre>
    </div>