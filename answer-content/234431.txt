<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Methods</h2>

<p>If you write more methods, your code instantly becomes easier to read. It's also easier to maintain, including making changes.</p>

<p>This is one example of what could be a method. It's not clear at a glance what this code does and you may want to allow the user to pick their own colour in the future.</p>

<pre><code>if(Math.round(Math.random()) == 0){
    humanPlayer = whitePieces;
    board = copyBoardArray(standardBoard);
} else {
    humanPlayer = blackPieces;
    board = reverseArray(copyBoardArray(standardBoard));
}
</code></pre>

<p>Creating a chess piece could be a method. You may change the features of a Chess piece in the future, you can also reduce repeating yourself with a method:</p>

<pre><code>function createChessPiece(var x, var y) {
    return {image: {sx: x * chessPieceSWidth, sy: y * chessPieceSHeight}};
}
</code></pre>

<p>All of your logic should be moved to separate methods as well.</p>

<h2>Avoid magic numbers</h2>

<p>"Magic numbers" and "magic strings" are literals not assigned to a variable. For example, what is "480" here? It could be a const declared at the top:</p>

<pre><code>event.clientX &lt; 480 &amp;&amp; event.clientY &lt; 480
</code></pre>

<h2>Naming</h2>

<p>Make sure your names make sense. "isCheck" does not make sense or mean anything.
It looks like <code>check</code> is a class variable but should be declared inside this method. <code>check</code>, <code>checkKing</code> are also bad names as it's not descriptive.</p>

<p><code>Chess</code> is not a good function name. You cannot tell what the method will do by reading the name.</p>

<p><strong>Edit: Examples of naming</strong> You may find it's hard to give certain methods names. This is actually a good thing and shows why simply creating &amp; renaming methods can be a very good tool to for refactoring. </p>

<p>For example, it's really hard to name <code>isCheck</code>, it's doing multiple things which aren't obvious by looking at the method.</p>

<p>I suggest splitting the method into 2 or 3 methods. <code>isState</code> &amp; <code>isThreatning</code> may not be good names either. Perhaps <code>getThreatningPieces</code> and renaming state to be more specific. </p>

<p>Currently you are returning 2 flags and invoking the method when you need either <code>threatningPieces</code> or <code>state</code>. It should also be noted you're invoking the method more than you need to:</p>

<pre><code>if(isCheck(humanPlayer, board).state){
    for(ind = 0; ind &lt; isCheck(humanPlayer, board).threatningPieces.length;
</code></pre>

<p>In the above code, you can create a variable to store the value of the method, so it only gets invoked once.</p>

<p>Your <code>isCheck</code> method is changing some local variables creating <strong>spaghetti code</strong>. Which brings me to my next point:</p>

<h2>Declare variables as locally as possible</h2>

<p>Don't declare all your variables at the top. There's no need for that. It's hard to tell where <code>checkKing</code> is getting changed or used. It makes debugging difficult.</p>
    </div>