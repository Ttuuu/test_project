<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Additional to @t3chb0t real code review, I would like to provide an alternative more object oriented implementaion.</p>

<p>Not sure if that solution is really better / more readable / appropriate for such a small problem - but at least it follows the SOLID principles:</p>

<pre><code>public class InputProcessor
{
    private static readonly ICharStreamProcessor[] CharStreamProcessors;

    static  InputProcessor()
    {
        CharStreamProcessors = new ICharStreamProcessor[]
        {
            new VowelCharStreamProcessor(),
            new YCharStreamProcessor(),
            new WhiteSpaceCharStreamProcessor(),
            new ConsonantCharStreamProcessor(),
            new NumberCharStreamProcessor(),
            new DefaultCharStreamProcessor(),
        };
    }

    public string Process(string input)
    {
        var preprocessedInput = (input ?? string.Empty).ToLower();
        var resultBuilder = new StringBuilder();

        using (var enumerator = preprocessedInput.GetEnumerator())
        {
            var continueProcessing = enumerator.MoveNext();
            while (continueProcessing)
            {
                var processor = CharStreamProcessors.FirstOrDefault(p =&gt; p.CanProcess(enumerator.Current));

                if (processor == null)
                {
                    throw new InvalidOperationException($"Unable to find appropriate processor for character '{enumerator.Current}'.");
                }

                bool continueProcessingWithCurrentProcessor;
                ProcessResult result = null;
                do
                {
                    var accumulated = result?.Result ?? string.Empty;
                    result = processor.Process(enumerator.Current, accumulated);
                    continueProcessing = enumerator.MoveNext();

                    continueProcessingWithCurrentProcessor =
                        continueProcessing
                        &amp;&amp; result.ContinueConsuming
                        &amp;&amp; processor.CanProcess(enumerator.Current);
                } while (continueProcessingWithCurrentProcessor);

                resultBuilder.Append(result.Result);
            }
        }

        return resultBuilder.ToString();
    }
}

public class VowelCharStreamProcessor : ICharStreamProcessor
{
    private static readonly string vowels = "aeiou";
    private const int AsciiNumberFor1 = 49;

    public bool CanProcess(char c) =&gt; vowels.Contains(c);
    public ProcessResult Process(char c, string accumulate) =&gt; ProcessResult.Finished((char)(vowels.IndexOf(c) + AsciiNumberFor1));
}

public class ConsonantCharStreamProcessor : ICharStreamProcessor
{
    private static readonly string consonants = "bcdefghjklmnpqrstvwxyz";

    public bool CanProcess(char c) =&gt; consonants.Contains(c);
    public ProcessResult Process(char c, string accumulate) =&gt; ProcessResult.Finished((char)(c - 1));
}

public class YCharStreamProcessor : ICharStreamProcessor
{
    public bool CanProcess(char c) =&gt; c == 'y';
    public ProcessResult Process(char c, string accumulate) =&gt; ProcessResult.Finished(' ');
}

public class WhiteSpaceCharStreamProcessor : ICharStreamProcessor
{
    public bool CanProcess(char c) =&gt; c == ' ';
    public ProcessResult Process(char c, string accumulate) =&gt; ProcessResult.Finished('y');
}

public class NumberCharStreamProcessor : ICharStreamProcessor
{
    public bool CanProcess(char c) =&gt; char.IsDigit(c);
    public ProcessResult Process(char c, string accumulate) =&gt; ProcessResult.Continue(c + accumulate);
}

public class DefaultCharStreamProcessor : ICharStreamProcessor
{
    public bool CanProcess(char c) =&gt; true;
    public ProcessResult Process(char c, string accumulate) =&gt; ProcessResult.Finished(c);
}

public interface ICharStreamProcessor
{
    ProcessResult Process(Char c, string accumulate);
    bool CanProcess(Char c);
}

public class ProcessResult
{
    private ProcessResult(string result, bool continueConsuming = false)
    {
        this.ContinueConsuming = continueConsuming;
        this.Result = result;
    }

    public bool ContinueConsuming { get; }
    public string Result { get; }

    public static ProcessResult Continue(string result) =&gt; new ProcessResult(result, true);
    public static ProcessResult Finished(string result) =&gt; new ProcessResult(result);
    public static ProcessResult Finished(char result) =&gt; new ProcessResult(result.ToString());
}
</code></pre>
    </div>