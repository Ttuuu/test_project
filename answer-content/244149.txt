<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Data domain restriction</h2>
<p>Your <code>nucleotides</code> should be represented as an <code>Enum</code>, given that there are only four possible values. The values of the enum can be strings, but usage in the rest of the program should be through the enum to get more confidence in correctness.</p>
<h2>External data</h2>
<p>Your codon table should be externalized, to a CSV or JSON file.</p>
<h2>Globals</h2>
<blockquote>
<p>the mutable global variables was not the most appropriate in this context</p>
</blockquote>
<p>Indeed. Constants (nucleotides, rev_compliment, the codon table and the amino acids) are fine as global constants, but the others are problematic. Pull them out of global scope and pass them around as parameters and return values for your various methods.</p>
<h2>Docstrings</h2>
<pre><code># Validates the sequence to make sure it only contains A, C, G, or T.
def validate_seq(dnaseq):
</code></pre>
<p>should actually look more like</p>
<pre><code>def validate_seq(dnaseq):
    """
    Validates the sequence to make sure it only contains A, C, G, or T.
    """
</code></pre>
<p>for a few reasons, including that Python can reflect on that string.</p>
<h2>Length checking</h2>
<p>This:</p>
<pre><code>1/len(dnaseq)
...
except ZeroDivisionError:
</code></pre>
<p>is a nasty way to do a length check. Your error message string is also wrong in that case, because it isn't a matter of invalid characters - the sequence is empty. Instead, spell it out:</p>
<pre><code>if len(dnaseq) == 0:
    raise ValueError('Empty DNA sequence')
</code></pre>
<p>Further, attempt to keep console printing and scanning at the top, so that methods like this can use exceptions, which should consistently be the internal error-signalling mechanism of the application.</p>
<h2>String interpolation</h2>
<pre><code>    print(letter + ": " + str(letter_total) + "  :  " + str(letter_per) + "%")
</code></pre>
<p>can be</p>
<pre><code>    print(f'{letter}: {letter_total}  :  {letter_per:%}')
</code></pre>
<p>Note that the use of <code>%</code> in this way obviates a multiplication by 100.</p>
<h2>String formation</h2>
<p>This:</p>
<pre><code>    dnaseq = "".join([rev_compliment[nuc] for nuc in dnaseq])[::1]
</code></pre>
<p>has a few issues:</p>
<ul>
<li>Don't make an inner <code>[]</code> list; pass the generator directly to <code>join</code></li>
<li>The step size of 1 for a slice is the default, so you can omit it and write <code>[:]</code></li>
<li>But why do a slice at all? Just omit the slice.</li>
</ul>
<h2>Console lines</h2>
<blockquote>
<p>it looks like a mess if the sequence is more than one line.</p>
</blockquote>
<p>Sure, but 150 will be far above the width of some consoles and far below the width of others. Getting the exact width is platform-dependent and can be tricky. Most console applications simply assume that the user is an adult and will be able to pipe through a scrolling frame buffer if they want, and do not do anything special with long lines.</p>
<h2>Counting</h2>
<p>This:</p>
<pre><code>dnaseq.count("C") + dnaseq.count("G")
</code></pre>
<p>is not as efficient as making a <code>Counter</code> instance. It's a built-in and will do the counting for both symbols in one pass.</p>
    </div>