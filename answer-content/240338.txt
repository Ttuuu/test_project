<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>How is my error management?  </p>
</blockquote>

<p><a href="https://github.com/golang/go/wiki/CodeReviewComments#error-strings" rel="nofollow noreferrer">Error</a> strings should not be capitalized (unless beginning with proper nouns or acronyms) or end with punctuation, since they are usually printed following other context. That is, use <code>fmt.Errorf("something bad")</code> not <code>fmt.Errorf("Something bad")</code>, so that <code>log.Printf("Reading %s: %v", filename, err)</code> formats without a spurious capital letter mid-message. This does not apply to logging, which is implicitly line-oriented and not combined inside other messages.</p>

<p>And see standard library <code>src/io/io.go</code> examples:  </p>

<pre><code>// ErrShortBuffer means that a read required a longer buffer than was provided.
var ErrShortBuffer = errors.New("short buffer")

// EOF is the error returned by Read when no more input is available.
// Functions should return EOF only to signal a graceful end of input.
// If the EOF occurs unexpectedly in a structured data stream,
// the appropriate error is either ErrUnexpectedEOF or some other error
// giving more detail.
var EOF = errors.New("EOF")
</code></pre>

<p>You don't need <code>found := false</code> flag, see 5, and for the final polished code see 8:</p>

<hr>

<p>Code review:<br>
1. Inside <code>func IntToRomanNumber(number int)</code>, the:  </p>

<pre><code>return "", fmt.Errorf("Integer argument `number` should be greater than 1. Received %v", number)
</code></pre>

<p>Should be greater than <strong>zero</strong>:  </p>

<pre><code>return "", fmt.Errorf("integer argument `number` should be greater than 0, received %v", number)
</code></pre>

<ol start="2">
<li>Using <code>strings.Builder</code> is a good habit.</li>
<li>Use <code>(string, error)</code> instead of <code>(result string, err error)</code> for function return values.  </li>
<li>See standard library for sub-string <code>s = strings.TrimPrefix(s, glyph.numeral)</code>:  </li>
</ol>

<pre><code>// TrimPrefix returns s without the provided leading prefix string.
// If s doesn't start with prefix, s is returned unchanged.
func TrimPrefix(s, prefix string) string {
    if HasPrefix(s, prefix) {
        return s[len(prefix):]
    }
    return s
}
</code></pre>

<ol start="5">
<li>About the <code>found := false</code> flag:  </li>
</ol>

<pre><code>func RomanNumberToInt(s string) (int, error) {
    result := 0
ScanningGlyphs:
    for len(s) &gt; 0 {
        for _, glyph := range RomanGlyphsByNumeral {
            if strings.HasPrefix(s, glyph.numeral) {
                s = s[len(glyph.numeral):] // s = strings.TrimPrefix(s, glyph.numeral)
                result += glyph.value
                continue ScanningGlyphs
            }
        }
        return 0, fmt.Errorf("cannot find valid roman numeral at %v", s)
    }
    return result, nil
}
</code></pre>

<ol start="6">
<li><a href="https://www.crosswordunclued.com/2010/06/roman-numerals.html" rel="nofollow noreferrer">The Classic Roman Numeral Mistake</a>: 

<blockquote>
  <p>On the face of it, IL and IC appear to follow the same subtractive principle as IV and IX, i.e. IL = L (50) - I (1) = 49.<br>
  This is actually not valid.<br>
  The subtractive principle for Roman numbers has these restrictions:<br>
  You can only subtract a power of ten, and only from the next two higher "digits", where the digits are {I, V, X, L, C, D, M}.<br>
  That is, only I, X and C can be subtracted, AND I can be subtracted only from V and X; X can be subtracted only from L and C; C can be subtracted only from D and M.<br>
  By these rules, the Roman numerals IL for 49 and IC for 99 do not work.<br>
  The correct representation for 49 is XLIX, for 99 is XCIX.</p>
</blockquote></li>
</ol>

<p>So the <code>RomanNumberToInt("IC")</code> should return error not 101:</p>

<pre><code>// 0 value means invalid glyph.
var RomanGlyphsByNumeral = []RomanGlyph{
    {"IM", 0}, {"VM", 0}, {"XM", 0}, {"LM", 0}, {"CM", 900}, {"DM", 0}, {"M", 1000},
    {"ID", 0}, {"VD", 0}, {"XD", 0}, {"LD", 0}, {"CD", 400}, {"D", 500},
    {"IC", 0}, {"VC", 0}, {"XC", 90}, {"LC", 0}, {"C", 100},
    {"IL", 0}, {"VL", 0}, {"XL", 40}, {"L", 50},
    {"IX", 9}, {"VX", 0}, {"X", 10},
    {"IV", 4}, {"V", 5},
    {"I", 1},
}
func RomanNumberToInt(s string) (int, error) {
    result := 0
ScanningGlyphs:
    for len(s) &gt; 0 {
        for _, glyph := range RomanGlyphsByNumeral {
            if strings.HasPrefix(s, glyph.numeral) {
                if glyph.value == 0 {
                    return 0, fmt.Errorf("invalid roman glyph %q", glyph.numeral)
                }
                s = s[len(glyph.numeral):] // s = strings.TrimPrefix(s, glyph.numeral)
                result += glyph.value
                continue ScanningGlyphs
            }
        }
        return 0, fmt.Errorf("cannot find valid roman numeral at %v", s)
    }
    return result, nil
}
</code></pre>

<ol start="7">
<li><a href="https://en.wikipedia.org/wiki/Glyph" rel="nofollow noreferrer">In typography, a glyph is an elemental symbol within an agreed set of symbols</a>, so naming the <code>RomanGlyph</code> struct:</li>
</ol>

<pre><code>type RomanGlyph struct {
    numeral string
    value   int
}
</code></pre>

<p>Is more readable this way:</p>

<pre><code>// Roman struct contains a roman glyph and its base 10 integer equivalent.
type Roman struct {
    glyph string
    value int
}
</code></pre>

<hr>

<ol start="8">
<li>If you are in the <code>main</code> you don't need to export (Capitalize) anything, otherwise only export intended items, and name the package <code>roman</code> then function name will be used as <code>roman.RomanGlyphToInt</code> by other packages, and that stutters; consider calling this <code>GlyphToInt</code>:</li>
</ol>

<p><code>roman/roman.go</code> file:</p>

<pre><code>// Package roman implements simple functions to convert roman glyphs to and from int.
// See example.
package roman

import (
    "fmt"
    "strings"
)

// roman struct contains a roman glyph and its base 10 integer equivalent.
type roman struct {
    glyph string
    value int
}

// romanGlyphs is a list of roman glyphs and their base 10 integer equivalents.
// Ordered for efficient matching in RomanGlyphToInt.
// 0 value means invalid glyph.
var romanGlyphs = []roman{
    {"IM", 0}, {"VM", 0}, {"XM", 0}, {"LM", 0}, {"CM", 900}, {"DM", 0}, {"M", 1000},
    {"ID", 0}, {"VD", 0}, {"XD", 0}, {"LD", 0}, {"CD", 400}, {"D", 500},
    {"IC", 0}, {"VC", 0}, {"XC", 90}, {"LC", 0}, {"C", 100},
    {"IL", 0}, {"VL", 0}, {"XL", 40}, {"L", 50},
    {"IX", 9}, {"VX", 0}, {"X", 10},
    {"IV", 4}, {"V", 5},
    {"I", 1},
}

// GlyphToInt returns an equivalent integer number in base 10 with error value.
// You can only subtract a power of ten, and only from the next two higher "digits",
// where the digits are {I, V, X, L, C, D, M}.
// only I, X and C can be subtracted, AND I can be subtracted only from V and X;
// X can be subtracted only from L and C; C can be subtracted only from D and M.
func GlyphToInt(s string) (int, error) {
    s = strings.ToUpper(s)
    result := 0
ScanningGlyphs:
    for len(s) &gt; 0 {
        for _, glyph := range romanGlyphs {
            if strings.HasPrefix(s, glyph.glyph) {
                if glyph.value == 0 {
                    return 0, fmt.Errorf("invalid roman glyph %q", glyph.glyph)
                }
                s = s[len(glyph.glyph):] // s = strings.TrimPrefix(s, glyph.glyph)
                result += glyph.value
                continue ScanningGlyphs
            }
        }
        return 0, fmt.Errorf("cannot find valid roman glyph at %q", s)
    }
    return result, nil
}

// romanGlyphsByValue is a list of roman glyphs to their base 10 integer equivalents.
// Ordered for efficient matching in IntToGlyph.
var romanGlyphsByValue = []roman{
    {"M", 1000}, {"CM", 900}, {"D", 500}, {"CD", 400},
    {"C", 100}, {"XC", 90}, {"L", 50}, {"XL", 40},
    {"X", 10}, {"IX", 9}, {"V", 5}, {"IV", 4},
    {"I", 1},
}

// IntToGlyph converts a base 10 integer to its roman equivalent glyph.
func IntToGlyph(n int) (string, error) {
    if n &lt;= 0 {
        return "", fmt.Errorf("integer number should be greater than 0, received %d", n)
    }
    var result strings.Builder
    for _, roman := range romanGlyphsByValue {
        for n &gt;= roman.value {
            n -= roman.value
            result.WriteString(roman.glyph)
        }
    }
    // if n != 0 || result.Len() == 0 {
    //  panic("needs developer attention: romanGlyphsByValue list values must be &gt; 1") // or test all values and remove this
    // }
    return result.String(), nil
}
</code></pre>

<p><code>roman/roman_test.go</code> file:</p>

<pre><code>package roman

import "testing"

var samples = []struct {
    value int
    glyph string
}{
    {2014, "MMXIV"},
    {1993, "MCMXCIII"},
    {1111, "MCXI"},
    {444, "CDXLIV"},
}

func TestRoman(t *testing.T) {
    // Test failure for converting integer 0 to a roman glyph
    _, zeroErr := IntToGlyph(0)
    if zeroErr == nil {
        t.Error("Converting int 0 to roman should have failed")
    }

    // Test failure for converting invalid roman glyphs to int
    _, invalidNumeralErr := GlyphToInt("XAV")
    if invalidNumeralErr == nil {
        t.Error("Converting roman 'XAV' to int should have failed because A is not a valid roman glyph")
    }

    // Test failure for converting invalid roman glyphs to int
    _, invalidNumeralErr = GlyphToInt("IC")
    if invalidNumeralErr == nil {
        t.Error("Converting roman 'IC' to int should have failed because A is not a valid roman glyph")
    }

    // Test samples
    for _, sample := range samples {
        result, err := IntToGlyph(sample.value)
        if err != nil {
            t.Errorf("Sample int %v should have produced glyph %v. Failed with %v", sample.value, sample.glyph, err)
        } else if result != sample.glyph {
            t.Errorf("Sample int %v should have produced glyph %v. Got %v", sample.value, sample.glyph, result)
        }
    }

    // Test roundtrip conversion for numbers 1..2000
    for i := 1; i &lt;= 2000; i++ {
        roman, err := IntToGlyph(i)
        if err != nil {
            t.Fatal(err)
        }
        backToI, err := GlyphToInt(roman)
        if err != nil {
            t.Fatal(err)
        }
        if i != backToI {
            t.Errorf("Number %v failed roundtrip: %v &gt; %v &gt; %v", i, i, roman, backToI)
        }
    }
}
</code></pre>

<p>Test output:</p>

<pre><code>ok roman    0.038s  coverage: 100.0% of statements
Success: Tests passed.
</code></pre>

<ol start="9">
<li>Usage example (<code>example/main.go</code> file):</li>
</ol>

<pre><code>func main() {
    n, err := roman.GlyphToInt("CC")
    if err != nil {
        log.Fatal(err)
    }
    fmt.Println(n) // 200

    s, err := roman.IntToGlyph(2020)
    if err != nil {
        log.Fatal(err)
    }
    fmt.Println(s) // MMXX
}
</code></pre>
    </div>