<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>It appears that you've massively underestimated the complexity of the task. This is a classic <a href="https://en.wikipedia.org/wiki/Knapsack_problem" rel="noreferrer">Multiple Knapsack problem</a>, and as is the case with all NP-hard problems, the time to solve it and/or the required memory grows very, very, very, very fast with the input size.</p>

<p>The choice of algorithm is crucial. It makes no sense to polish the code if the algorithm is poorly chosen, and naive iteration is no good.</p>

<p>If you are really interested in such problems and have some time to spare, I would highly recommend the course "<a href="https://www.coursera.org/learn/discrete-optimization" rel="noreferrer">Discrete Optimisation</a>" on Coursera. The (single) Knapsack problem is covered in Week 2 videos. For me, the approach that worked best was the one described in "<a href="https://www.coursera.org/learn/discrete-optimization/lecture/66OlO/knapsack-5-relaxation-branch-and-bound" rel="noreferrer">Knapsack 5 - relaxation, branch and bound</a>". Basically, the algorithm works this way:</p>

<ol>
<li>You make a choice, e.g. which boat to put Unit 1 on, or not at all. Or which unit to put on Boat 1 first. You have a choice of choices, isn't it cool already?</li>
<li>For each choice you estimate the worst and the best outcome. For your problem, the worst outcome may be a fast greedy solution of the remaining task, and the best outcome is the greedy fractional solution: you imagine that a unit may be split and its part will have the proportional value.</li>
<li>If the best outcome of one choice is worse than the worst outcome of another, you may safely discard that option. Otherwise, choose the most attractive branch (it might be useful not to choose the one with the best possible outcome, but to introduce a certain randomness) and repeat steps 1-3.</li>
</ol>

<p>Eventually (actually, quite fast) you'll get one probable solution. It won't be the best (it might be, but for a sufficiently large size it's improbable). The simplest way to go on would be to try the next branches immediately (depth-first tree search), it is achievable by a simple recursion and is almost free for you as a developer. However, this is a suboptimal approach: you'll spend a lot of time in one branch of solution tree, while the solution is as likely to be somewhere else. It pays off to have a smarter search strategy, to be able to go back further and branch from an earlier state. You'll need to have some data structure to keep track of what you've already checked. Take care that it doesn't eat all your memory, that's what it really likes to do.</p>

<p>A nice benefit of such approach, shared by most practical algorithms for NP-hard problems, is that for tasks that are too huge to find the optimal solution it may still get you a good enough solution, if you stop it before the time limit is reached.</p>

<p>Have fun!</p>
    </div>