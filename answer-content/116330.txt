<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>I've never written code so I have no frame of reference.</p>
</blockquote>

<p>I wouldn't know by looking: This is very nicely done! Congrats!</p>

<p>Good stuff:</p>

<ul>
<li><code>"use strict"</code></li>
<li>Using an IIFE to contain everything</li>
<li>Well-structured</li>
<li>Copious comments</li>
</ul>

<p>Typically, beginners stop once something works - usually after changing stuff again and again until errors stop appearing - and neglect "cleaning up". But you've maintained a good structure and kept things neat.</p>

<p>Again, good job!</p>

<p>All that said, when looking closer things become a little muddled, due in part to the slight detours you take in building the return object.</p>

<p>But before I go on with how I might refactor things, a few things I noticed while reading:</p>

<ul>
<li><p>Indentation is inconsistent in places. For instance, the body of <code>getScaleObject</code> is indented much more than the rest. This might be a side-effect of copy pasting things into the question, if your code has mixed spaces and tabs for indentation. Check your editor to make sure you're using one or the other; not both.</p></li>
<li><p>You seem to be timing <em>a lot</em> of things. Really, don't worry about timing unless you really have to. I don't know your use case for this code but I doubt it's <em>too slow</em>. If it's fast enough, then it's fast enough - don't worry about it. (Conversely, if timing is super critical, JavaScript probably isn't the right tool to begin with.)</p></li>
<li><p>You have some unnecessary parentheses, like:</p>

<pre><code>chromatic.splice(0,(positionOfTonic));
</code></pre>

<p><code>positionOfTonic</code> need not be wrapped.</p>

<p>Also in that line, and a few other places, you skimp on spacing. It's good practice to separate arguments, so the line would ideally look like this:</p>

<pre><code>chromatic.splice(0, positionOfTonic);
</code></pre>

<p>Small stuff, but greatly improves readability.</p></li>
<li><p>Your <code>switch</code> is lacking a <code>default</code> case. It's allowed, but it made me stop for a moment. Of course, it's not entirely clear what should happen in case the type isn't <code>major</code> or <code>minor</code> as that doesn't really make sense. You could consider throwing an exception to alert the user that their input is invalid. However, right now the code handles it quite gracefully by simply returning <code>undefined</code> (by gracefully I mean that it doesn't just crash). Still, you examine the <code>type</code> in two places, using a <code>switch</code> in one place, and an <code>if.. else if</code> in the other. This seems like needless variation, and perhaps also needless duplication of code.<br>
Anyway, if you use a <code>switch</code>, it's good practice to add a <code>default</code> case, even if it only contains a comment like:</p>

<pre><code>default:
  // if we're here, type is invalid: Do nothing.
  break;
</code></pre>

<p>Like the <code>default</code> case itself, the <code>break</code> isn't strictly necessary either, but this is like dotting the i's and crossing the t's. I'm a stickler for things like that.</p></li>
<li><p>It should be noted that your code does <em>not</em> fail gracefully if you pass an invalid note. E.g. <code>getScale(getKey("x"), "minor")</code> returns a scale object, it's just not a terribly useful one.</p></li>
<li><p>You also have some duplication in the code that removes notes from the (rotated) chromatic scale. Really the only difference between major and minor is which indices to remove, but you've duplicated the loop that does the removal too. Instead, you could just pick the right set of indices, and do the removal in one place.</p></li>
</ul>

<p>Now, refactoring. I should note that I'm musically illiterate, so I won't speak to the correctness of the code. I'm just working backwards from the code (and referencing wikipedia), but I might miss something basic or mix up the terminology.</p>

<p>First, I'd make it possible to actually call your code from outside the IIFE. Right now, anytime you want to get a scale object, you have to add the code inside the IIFE's scope. This makes it impossible to use this code from other code.</p>

<p>The basic way would be to so something like:</p>

<pre><code>var getScale = (function ()
  "use strict";
  // your code
  return getScale;
}());
</code></pre>

<p>That is, return the inner function, and store it on the outside, in a variable named the same.</p>

<p>But right now, you'd also have to somehow expose the <code>getKey</code> function to the outside, which complicates matters somewhat.</p>

<p>You could do this:</p>

<pre><code>var myFunctions = (function ()
  "use strict";
  // your code
  return {
    getKey: getKey,
    getScale: getScale
  };
}());
</code></pre>

<p>Which would let you call <code>myFunctions.getKey</code> and <code>myFunctions.getScale</code> from the outside (note that <code>myFunctions</code> can be called anything; it's just an example).</p>

<p>But the simpler solution would probably be to just change the way <code>getScale</code> is called. If you just pass it a note, it can call <code>getKey</code> internally, which would simplify the function's usage to just:</p>

<pre><code>getScale('a', 'minor');
</code></pre>

<p>But really, you don't need <code>getKey</code>, even internally. The first thing you do in <code>getScale</code> is call <code>Object.keys(tonic)[0]</code>, so your code is essentially wrapping and unwrapping a letter:</p>

<pre><code>getKey("a") =&gt; Object.keys({ "a": 1 })[0] =&gt; "a"
</code></pre>

<p>So <code>getKey</code> seems like an unnecessary detour.</p>

<p>You then "rotate" the chromatic scale, to start the right note, and remove some parts based on the type you want. The way you rotate the scale is perfectly fine, but there is also another way to pick the right notes without slicing and dicing the array. I'll get to that in a moment.</p>

<p>However, I'd propose a different notation for the sequence, namely one that lists the indices to <em>keep</em>, rather than which should be removed:</p>

<pre><code>var sequences {
      major: [0, 2, 4, 5, 7, 9, 11],
      minor: [0, 2, 3, 5, 7, 8, 10]
    };
</code></pre>

<p>(Actually there's only one sequence: The minor one is simply the major one shifted 6 degrees. So defining both sequence manually isn't really necessary, but I'll leave any further refactoring to the reader.)</p>

<p>The reason for doing things like this is that it lines up well with making a list of labels for the notes - now all are lists of 7 elements:</p>

<pre><code>var names = ["tonic", "superTonic", "mediant", "subDominant", "dominant", "subMediant", "leadingTone"];
</code></pre>

<p>(Incidentally, <a href="https://en.wikipedia.org/wiki/Diatonic_scale#Natural_minor_scale" rel="noreferrer">wikipedia</a> informs me that the name "leading tone" is only used for the major scale, but on the minor scale it's named "subtonic". I'll leave that as an exercise to the reader.)</p>

<p>Now, for the output, I'd consider returning an array instead of an object. A scale is inherently ordered, so an array seems the most natural data type (objects in JavaScript do not guarantee consistent ordering of their properties). But of course you still want to be able to access notes by their name, e.g. <code>scale.subdominant</code>. JavaScript makes this possible with arrays too, though, because arrays are objects. So you can add the notes as indexed elements <em>and</em> as named properties.</p>

<p>Given this, if we use the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce" rel="noreferrer"><code>reduce</code></a> function to construct the array:</p>

<pre><code>var scale = sequences[type].reduce(function (scale, noteIndex, i) {
  var note = rotatedScale[noteIndex], // get the note
      name = names[i];    // get the name
  scale.push(note);       // add the note as an array element
  scale[name] = note;     // add the note as a named property
  return scale;
}, []);
</code></pre>

<p>Now <code>scale</code> is an array with notes available both as ordered array elements, and by their names, e.g. <code>scale[3] === scale.subDominant</code>.</p>

<p>Finally, I mentioned a way to hit the right notes without slicing and dicing the chromatic scale. It involves knowing the offset of the input note, and the <a href="https://en.wikipedia.org/wiki/Modulo_operation" rel="noreferrer">modulo operator</a> (<code>%</code>):</p>

<pre><code>var offset = chromaticScale.indexOf(key);
var scale = sequences[type].reduce(function (scale, noteIndex, i) {
  var index = (noteIndex + offset) % chromaticScale.length,
      note = chromaticScale[index],
      name = names[i];
  scale.push(note);
  scale[name] = note;
  return scale;
}, []);
</code></pre>

<p>The modulo operator makes the <code>index</code> value "wrap around".</p>

<p>All in all, with some input checking, you end up with a function like:</p>

<pre><code>function getScale(key, type) {
  "use strict";

  // "constants"
  var chromaticScale = ['c', 'c#', 'd', 'Eb', 'e', 'f', 'f#', 'g', 'Ab', 'a', 'Bb', 'b'];
  var names = ["tonic", "superTonic", "mediant", "subDominant", "dominant", "subMediant", "leadingTone"];
  var sequences = {
            major: [0, 2, 4, 5, 7, 9, 11],
            minor: [0, 2, 3, 5, 7, 8, 10]
          };

  var offset = chromaticScale.indexOf(key);

  // return undefined if the key or type is unknown
  if(offset === -1 || !sequences[type]) return;

  return sequences[type].reduce(function (scale, noteIndex, i) {
    var index = (noteIndex + offset) % chromaticScale.length,
        note = chromaticScale[index],
        name = names[i];
    scale.push(note);
    scale[name] = note;
    return scale;
  }, []);
}
</code></pre>

<p>No need for an IIFE, as there's just one function.</p>
    </div>