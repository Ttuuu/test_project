<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<p>It can't determine a winner (yet).</p>
</blockquote>
<p>I'd suggest to use <a href="https://en.wikipedia.org/wiki/Go_(game)#Scoring_rules" rel="noreferrer">Area scoring</a>, where you can let the players continue until it gets simple enough for your algorithm.</p>
<blockquote>
<p>Is Main an acceptable name for a class? Or should it be Game/App or something completely different?</p>
</blockquote>
<p>I always use a prefix for my "Mains" (like <code>GoMain</code>) in order to be able to tell them apart even where a simple name gets used (e.g., Eclipse run configurations).</p>
<pre><code>package go;
</code></pre>
<p>That's wrong, unless there's a TLD "go" and you own it.</p>
<h2>Main</h2>
<pre><code>public static final int BORDER_SIZE = 25;
</code></pre>
<p>I'd move it into the class where other view constants get defined.</p>
<h2>GameBoard</h2>
<pre><code>private static final long serialVersionUID = -494530433694385328L;
</code></pre>
<p>You don't need it, unless you</p>
<ul>
<li>really want to
<ul>
<li>serialize <code>GameBoard</code> instances</li>
<li>and save them in files</li>
<li>and use them later with a different class version</li>
</ul>
</li>
<li>and you're determined to handle compatibility</li>
</ul>
<p>With other words, you really do not need it (and the Eclipse warning is a non-sense and should be switched off).</p>
<pre><code>public static final int SIZE = 9;
</code></pre>
<p>As the SIZE holds for <code>Grid</code> as well, I'd move it there (since the view is just an auxiliary thing).</p>
<pre><code>public static final int N_OF_TILES = SIZE - 1;
</code></pre>
<p>The naming has been already commented on, but I'd drop this altogether as it doesn't save much.</p>
<p>But actually, I'd drop <code>SIZE</code> as a constant anyway. You'll surely want to play on bigger boards as well.</p>
<pre><code>public enum State {
    BLACK, WHITE
}
</code></pre>
<p>Again, this IMHO belongs to <code>Grid</code> (as the more fundamental class).</p>
<p>Having two possibilities only (rather than adding <code>EMPTY</code>) allows you to use</p>
<pre><code>private State current_player;
</code></pre>
<p>(which violates naming convention a lot!), but using <code>null</code> as the third value for <code>stones</code> is ugly. I might go for</p>
<pre><code>private boolean isBlacksTurn;
</code></pre>
<p>which is ugly, too.</p>
<hr>
<pre><code>private Grid grid;
</code></pre>
<p>This should be final.</p>
<pre><code>private Point lastMove;
</code></pre>
<p><code>Point</code> is an ugly mutable class which I wouldn't use anywhere except where required.</p>
<pre><code>public GameBoard() {
   grid = new Grid(SIZE);
</code></pre>
<p>I'd use (manual) <a href="https://en.wikipedia.org/wiki/Dependency_injection" rel="noreferrer">DI</a> here, simply by passing a <code>grid</code> to the constructor. Again, the view is not the important part. Creating the grid in <code>Main</code> allows you to pass it anywhere (without accessing the view).</p>
<hr>
<p>The <code>MouseListener</code> is rather long, mainly because it does things it shouldn't do. It should compute the coordinates and call something like <code>gameState.playAt(row, col)</code>.</p>
<pre><code>protected void paintComponent(Graphics g) ...
</code></pre>
<p>This is a pretty long method composed of 4 main parts separated by comments. I'd probably extract the parts and drop the comments.</p>
<h2>Grid</h2>
<p>I'd rename it to <code>GameState</code> and add <code>currentPlayer</code> and <code>lastMove</code> (or a whole history).</p>
<pre><code>private final int SIZE;
</code></pre>
<p>This is no constant and should be called <code>size</code>.</p>
<pre><code>private Stone[][] stones;
</code></pre>
<p>I'm not sure if storing so much information is needed/useful. Simply storing <code>State</code> should do. I usually try to create a minimal model and store redundant information in other variables as needed.</p>
<p>You're missing a check if the move is legal, i.e., 1. your new group has at least one liberty after possible captures have been evaluated, 2. it's not a ko.</p>
<pre><code>public void checkStone(Stone stone) ...
</code></pre>
<p>I don't like the name. What about <code>removeGroupIfDead</code>?</p>
<h2>Chain</h2>
<pre><code> public ArrayList&lt;Stone&gt; stones;
 public State state;
</code></pre>
<p>Avoid public variables. First try moving everything what needs to access the class members into the class itself, otherwise provide some accessors (but don't add a getter for collections as it allows the caller to modify them later).</p>
<pre><code>public int getLiberties() {
    int total = 0;
    for (Stone stone : stones) {
        total += stone.liberties;
    }
    return total;
}
</code></pre>
<p>You're counting some liberties multiple times, which is ugly, but alright for what you're using it, namely testing if there's any. So a <code>boolean</code> result should do.</p>
<p>It looks like using <code>Chain</code> doesn't buy you much as you have to iterate anyway. Being able to store the liberties could make the evaluation fast (needed for a AI player), but this may be hard to do. Iterating over all neighbors every time could possibly be done without any <code>Chain</code>/<code>Stone</code>.</p>
<h2>Stone</h2>
<p>Again, public variables. I'd try to get rid of the whole class, but this may be hard.</p>
    </div>