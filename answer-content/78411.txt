<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>To make this \$O(n)\$, the basic algorithm is to walk both arrays in one loop in parallel, in a merge-like manner.</p>

<p>That is, you start with index <code>i=0</code> in the first array and <code>j=0</code> in the second array, and you stop when one of your indexes moved past the end of its array.  At each step in the single loop, you compare <code>a[i]</code> with <code>b[j]</code>.  If <code>a[i]</code> is greater than <code>b[j]</code>, you bump <code>j</code> by 1.  If it is smaller, you bump <code>i</code> by 1.  If <code>a[i]</code> is equal to <code>b[j]</code>, you bump both <code>i</code> and <code>j</code> and record <code>a[i]</code> as a duplicate.</p>

<p>That's all.  As each step results in at least one array element that will never be looked at again, this is \$O(n)\$.</p>
    </div>