<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Correctness</h1>

<p>In</p>

<pre class="lang-rust prettyprint-override"><code>let mut x: u8 = 0;
let mut y: u8 = 0;

while x &lt; width {
    while y &lt; height {
        println!("{}, {}", x, y);
        func(x, y);

        y += 1;
    }

    x += 1;
}
</code></pre>

<p><code>y</code> increments up to <code>height</code>, but then never gets reset. That means that the inner loop only runs once. To fix this, move the initialization of <code>y</code> inside the loop, or use a "normal loop" (see below).</p>

<hr>

<h1>Formatting and convention</h1>

<p>Right now, it looks like you're trying to write Rust in a different language. Whenever possible, use the conventions suggested by the Rust compiler and the linter <code>clippy</code> (run <code>cargo clippy</code>). In particular, using <code>#![allow(non_snake_case)]</code> to set your own convention is discouraged.</p>

<p>A few other things:</p>

<ul>
<li>Use <code>///</code> for documentation. <code>/* */</code> comments are fairly rare and <code>///</code> comments will automatically be included in the documentation produced by <code>cargo doc</code>.</li>
<li>Keep lines fairly short. It's OK to go over the traditional limit of 80 characters sometimes, but whenever possible, break up lines for readability. For example, with a function signature or call, the arguments can be placed on separate lines. <code>cargo fmt</code> will do this automatically to the best of its ability.</li>
<li><code>Vec&lt;T&gt;</code> is itself a pointer (and length and capacity), so <code>&amp;Vec&lt;T&gt;</code> has no advantage over <code>&amp;[T]</code>. In fact, due to automatic deref coercion, using the latter in a function signature allows that function to take either kind of argument. See <a href="https://stackoverflow.com/questions/40006219/why-is-it-discouraged-to-accept-a-reference-to-a-string-string-vec-vec-o">this question</a> for more.</li>
</ul>

<hr>

<h1>Use <code>for</code> loops.</h1>

<p>When iterating over a collection, <code>for</code> loops are usually the best way. There's no need to keep track of mutating variables. If an index is needed, the <a href="https://doc.rust-lang.org/stable/std/iter/trait.Iterator.html#method.enumerate" rel="nofollow noreferrer"><code>enumerate</code></a> method in the <code>Iterator</code> trait can be used.</p>

<p>Here's how I'd rewrite your loop.</p>

<pre class="lang-rust prettyprint-override"><code>for (x, col) in arr.iter().enumerate() {
    for (y, &amp;elem) in col.iter().enumerate() {
        new_arr[y][new_height - x - 1] = elem
    }
}
</code></pre>

<hr>

<h1>Add tests</h1>

<p>Before I even touched your code, I made sure to add at least one test case. That alone caught the bug that I mentioned above. Adding more was very helpful when figuring out how the width and height worked (see the first item in Miscellaneous below). Just as a template, you can use</p>

<pre class="lang-rust prettyprint-override"><code>#[cfg(test)]
mod tests {
    use super::*;

    fn my_test() {
        // Use things like `assert!` and `assert_eq!` to verify the output of your functions
        // ...
    }
}
</code></pre>

<p>Tests can be run with <code>cargo test</code>.</p>

<hr>

<h1>Miscellaneous</h1>

<p>This may just be personal preference, but when I see a 2-dimensional array like</p>

<pre class="lang-rust prettyprint-override"><code>vec![
    vec![1, 2, 3],
    vec![4, 5, 6],
]
</code></pre>

<p>I think of this has having a width of 3 and a height of 2. That is, the first row is <code>[1, 2, 3]</code> and the second row is <code>[4, 5, 6]</code>. Indexing at <code>(x, y)</code> is <code>arr[y][x]</code> (first access <code>y</code>th row, then <code>x</code>th column). From what I can tell, you've reversed this. For example, <code>vec![vec![filler; height as usize]; width as usize]</code> would have a height of <code>width</code> and a width of <code>height</code> in my convention.</p>

<p>Note that rotating the vector switches the role of <code>height</code> and <code>width</code>, so <code>new_width</code> is the height of the original and <code>new_height</code> is the width of the original.</p>

<hr>

<p>The <code>u8</code>/<code>usize</code> problems were largely solved by rewriting the loop, but in general, I'd suggest just sticking with one type. There's no reason for <code>create_new_filled_2d_vec</code> or <code>for_each_xy</code> to take <code>u8</code> arguments. That just leads to unnecessary conversions. Since the length of a vector is always <code>usize</code>, it makes sense to just use <code>usize</code> everywhere.</p>

<hr>

<p>If you want to use arrays, you'll eventually be able to use <code>const</code> generics to accomplish this. For now, they'll need to be dynamically allocated as <code>Box&lt;[T]&gt;</code>. You can produce a <code>Box&lt;[T]&gt;</code> from a <code>Vec&lt;T&gt;</code> using the <code>as_boxed_slice</code> method. Since the only difference between this and <code>Vec&lt;T&gt;</code> is the <code>capacity</code> field, <code>Box&lt;[T]&gt;</code> is fairly rare in practice. The benefit isn't very large.</p>
    </div>