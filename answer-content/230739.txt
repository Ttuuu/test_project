<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The lower loop (which fills all power-of-two multiples of the outer index) is doing unnecessary work when <code>i</code> is even.  If we find that <code>vals[i]</code> was already filled in by a previous iteration, then so was <code>vals[2*i]</code> and so on.</p>
<p>I improved run-time by about 5% simply by adding at the start of the outer loop:</p>
<pre><code>    if (vals[i]) {
        continue;
    }
</code></pre>
<hr>
<p>It's usual to report the lowest starting value of those that give rise to the same length chain.  The current code doesn't do that, because of the second loop.  To give the same results as seen on OEIS, then we need to change the logic to update <code>maxIndex</code> and <code>maxLength</code> only after computing Collatz(i), and before the <code>*=2</code> loop.</p>
<hr>
<p>Finally, we don't want to be measuring printing time as well as computation, so move the setting of <code>elapsed</code> before the printing of max number.</p>
<hr>
<h1>Improved version</h1>
<p>I upped the range to 100 million so that I could get meaningful numbers of milliseconds on my machine.  This consistently gives under 1750 ms, compared to slightly over 2000 ms with the original.  It also gives the lowest index for a given count, consistent with the results shown on the <a href="https://en.wikipedia.org/wiki/Collatz_conjecture#Examples" rel="nofollow noreferrer">Collatz entry in Wikipedia</a>.</p>
<p>I've also applied changes suggested in other reviews</p>
<pre><code>#include &lt;chrono&gt;
#include &lt;iostream&gt;

const unsigned int N = 100'000'000;
unsigned short vals[N] = {};

int main() {
    using namespace std::chrono;
    // Time the program:
    auto const startTime = steady_clock::now();

    unsigned int maxIndex = 0;
    unsigned int maxLength = 0;

    // calculate Collatz length for each index, and memoize
    for (unsigned int i = 2;  i &lt; N;  ++i) {
        unsigned long iCpy = i;
        unsigned int ct = 0;

        while (iCpy &gt; 1) {
            if (iCpy &lt; N &amp;&amp; vals[iCpy]) {
                ct += vals[iCpy];
                break;
            }

            iCpy = iCpy % 2
                ? 3 * iCpy + 1
                : iCpy / 2;
            ++ct;
        }
        if (ct &gt; maxLength) {
            maxLength = ct;
            maxIndex = i;
        }

        // Pre-fill power-of-two multiples of this result
        for (iCpy = i;  iCpy &lt; N &amp;&amp; !vals[i];  iCpy *= 2) {
            vals[iCpy] = ct++;
        }
    }

    auto elapsed = duration_cast&lt;milliseconds&gt;(steady_clock::now() - startTime);

    // output the max index and length:
    std::cout &lt;&lt; "Max number: " &lt;&lt; maxIndex &lt;&lt; ", with length " &lt;&lt; maxLength &lt;&lt;  '\n';
    std::cout &lt;&lt; "Program execution took " &lt;&lt; elapsed.count() &lt;&lt; "ms\n";
    return 0;
}
</code></pre>
<p>In case you wonder what happened to the <code>continue</code> mentioned in my first paragraph, it has to move to after the <code>maxLength</code> check, and it seems to optimise better when incorporated into the existing <code>for</code> loop condition, perhaps due to branch prediction.</p>
    </div>