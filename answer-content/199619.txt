<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The code provided might fulfill the functionality however the API is hard to use.</p>

<p>Passwords are usually strings and not binary (<code>byte[]</code>). It would also be nice that the salt could be generated automatically when you <code>hash</code> the password. That way you would call a single method to <code>hash</code> a password instead of calling two methods, in this case that would be <code>GenerateSalt</code> followed by <code>HashPassword</code>.</p>

<p>According to my argument I would suggest you to implement the following API:</p>

<pre><code>// returns hashed password + salt
Tuple&lt;byte[], byte[]&gt; HashPassword(string password, int iterations) 
bool ComparePassword(string attempt, byte[] hashedPassword, byte[] salt)
</code></pre>

<p>You can always replace the Tuple type by another class that would have the properties <code>byte[] HashedPassword</code> and <code>byte[] Salt</code>. Also often, but not always, the salt and the password are usually <code>base64</code> encoded. That usually allows you to have a slightly nicer view of the data that is stored while also avoiding storing binary data in your persistence mechanism.</p>

<p>Additionally <a href="https://www.owasp.org/index.php/Using_Rfc2898DeriveBytes_for_PBKDF2#Implementing_PBKDF2_in_.NET" rel="nofollow noreferrer">Rfc2898DeriveBytes outputs 20 bytes</a>. So <code>return rfc2898.GetBytes(32);</code> should be <code>return rfc2898.GetBytes(20);</code></p>

<p>Answering your additional question about the iteration count, there is nothing wrong with that. You can even use that as a <code>pepper</code>, different users can have slightly different iteration counts. Which makes the job of a hacker harder. In some scenarios people also store the actually algorithm that was used to hash the password. That might allow you to switch between algorithms in a easier fashion.</p>
    </div>