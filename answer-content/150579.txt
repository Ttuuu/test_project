<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>A few thoughts in addition to Roland's feedback:</p>

<p><em>Enum</em> as a collection of constants in Java has the possibility to carry all its attributes. Thus, I'd rather put the color into the enum than see a switch over the enum elements:</p>

<pre><code>enum Piece {
    Red(Color.RED),
    Blue(Color.BLUE),
    None(Color.WHITE);

    public final Color pieceColor;  // attributes of the specific constant
    private Piece(Color theColor) {  // constructor to set these attributes
        this.pieceColor = theColor;
    }
}

...
// while we are at it: this name is ugly: reserve setXXX for setters, rename to somthing like "updateColor"
public void setColor() {
    setBackground(piece.pieceColor);
}
</code></pre>

<p>Adding the print-string as a second attribute is left as an excersise ;-)</p>

<p><em>Magic numbers</em>: at some places, you already iterate to Boards.length or Boards[i].length. At other places, you use constant 6s and 7s. Replace all the constant numbers to references to the given array length, so that the only place to use concrete numbers is the creation of the Board[][].</p>

<p><em>Repeating calls</em>: chains of calls that all look the same always make me cringe, in this case the method possibleConnections. I much prefer to put the variable parts in a constant definition and have a loop over that:</p>

<pre><code>int[][] offsets = new int[][] { { -1, -1 }, { -1, 0 }, ... };
int value = Arrays.stream(offsets).mapToInt(of -&gt; lineOfFour(i, j, of[0], of[1])).sum();
</code></pre>

<p><em>Constructors with side-effects</em>: A constructor should normally just create the object. When you call "new ConnectFour(true);" you are not really interested in the object at all. So, I suggest to at least remove the setVisible call from the constructor and have this in the caller method.</p>
    </div>