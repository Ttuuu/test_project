<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your own <code>...printf()</code> - a <a href="https://en.wikipedia.org/wiki/Fools_rush_in_where_angels_fear_to_tread" rel="nofollow noreferrer">grand undertaking</a> - Impressive.</p>

<hr>

<p><strong>K&amp;R vs C89</strong></p>

<p>"had issues with floating point because there are not good tools in C89" --&gt; 
K&amp;R, in effect, is just pre-C89.  I'll assume still the goal is C89 and not K&amp;R C.</p>

<p><strong><code>const</code></strong></p>

<p>C89 uses <code>const</code> as in <code>int fprintf (FILE *stresxn, const char *format, ...)</code>.  I'd expect:</p>

<pre><code>// int e_printf(char *format, ...);
int e_printf(const char *format, ...);
</code></pre>

<p>... and for the other functions.  The is <code>const</code> ripples down into the various helper functions too.</p>

<p><strong>is...()</strong></p>

<p><code>isdigit(int ch)</code> is defined for values in the <code>unsigned char</code> range and <code>EOF</code>.  As <code>char</code> can be <em>signed</em>, better code would insure the function is called with <code>unsigned char</code> values. </p>

<pre><code>char *str
...
// isdigit(*str)
isdigit((unsigned char) *str)
</code></pre>

<p><strong>p is not supported ...</strong></p>

<p>"because it is machine dependent" is more like "implementation  dependent".  Code could simply convert the <code>void *</code> argument to <code>unsigned long</code> and print that with <code>"0x%lX"</code> when the <code>sizeof(void *) &lt;= sizeof(unsigned long)</code>.  A deeper alternative would use a <code>union</code> of <code>void *</code> and <code>unsigned char *</code>.  <a href="https://stackoverflow.com/a/35367414/2410359">example here uses binary</a>.</p>

<p><strong>issues with ... existence of NaN or inf</strong></p>

<p>Inf: <code>x &lt; -DBL_MAX || x &gt; DBL_MAX</code>: Well defined.</p>

<p><code>E_FLOAT_ISFINITE(value) (!(fabs(value) &gt;= HUGE_VAL))</code> is incorrect  as  <code>HUGE_VAL == DBL_MAX</code> is possible.</p>

<p>Nan: <code>x != x</code>: Somewhat well defined as code has done.</p>

<p><strong>eprintf.h</strong></p>

<p>Code nice and tight.  I'd expect <em>some</em> documentation here giving the overall goal of this function set.</p>

<p><strong>Include order</strong></p>

<p>For <code>eprintf.c</code> consider <code>eprintf.h</code> first as a test that the .h file is not dependent on any user prior include.</p>

<p><strong>long string limitation</strong></p>

<p><code>int length; length = strlen(str);</code> limits string length to <code>INT_MAX</code>.  Pedantically string length is up to <code>SIZE_MAX</code> and <code>size_t</code>.</p>

<p><strong>Pedantic: <code>signed char</code></strong></p>

<p>Since code is C89-ish (design for all 3 encoding types), best to explicitly use <code>unsigned char *</code> when accessing the string data.  Non-2's complement is mis-interpret-able when reading a -0 as that is not a <em>string</em> terminating null-character.</p>

<p><strong>Lots of good error checking</strong></p>

<p><strong>Printing FP</strong></p>

<p>This is <em>hard</em> to do right and handle all corner cases.</p>

<p><code>e_print_double()</code> prints a truncated value (as OP has noted) rather than a rounded one as seen in higher quality implementations .   To round right is not trivial.</p>

<p><strong>Total loss of precision with tiny values</strong></p>

<p>Consider values near <code>DBL_TRUE_MIN</code>: <code>pow(10, -*exp)</code> becomes 0.0.</p>

<pre><code>    *exp = floor(log10(fabs(value)));
    return value * pow(10, -*exp);
</code></pre>

<p><strong>Powers of 10</strong></p>

<p>For edge cases of <code>value</code> near powers of 10, I suspect <code>value * pow(10, -*exp)</code> can return a rounded value of 10.0 rather than &lt; 10.0 resulting in errant output.</p>

<p><a href="https://codereview.stackexchange.com/q/212490/29485">Function to print a double - exactly</a> may offer insight or at least a test reference.</p>

<p><strong>Errant comment</strong></p>

<p><code>e_print_generic_int</code> with <code>e_print_generic_double()</code></p>

<pre><code>/* e_print_generic_int: prints a double "value" according ... */
static int e_print_generic_double(struct e_print_data *data, double value)
</code></pre>

<p><strong>Good avoidance of <code>-INT_MIN</code> in <code>e_print_long_rec()</code></strong></p>

<p>IAC, in C89, <code>/</code> and <code>%</code> are more loosely defined.  Recommend <code>div_t div(int numer, int denom);</code> for a consistent quotient, remainder.</p>

<pre><code>div_t qr = div(value, E_DIVISOR_10_SIGN(value));
if (qr.quot) {
  chrs_printed = e_print_long_rec(data, qr.quot);
}
out = '0' + abs((int)qr.rem);
</code></pre>

<p>I see no reasons for <code>E_DIVISOR_10_SIGN(value)</code> here.</p>

<pre><code>// div_t qr = div(value, E_DIVISOR_10_SIGN(value));
div_t qr = div(value, 10);
</code></pre>

<p><strong>10 vs. 9</strong></p>

<p>With base 10 part of code, I find coding 10 more informative than 9.</p>

<pre><code>// if ((remainder = value % base) &gt; 9)
if ((remainder = value % base) &gt;= 10)
</code></pre>

<p><strong>Minor: Code assumes <code>A-F</code>,<code>a-f</code> are consecutive</strong></p>

<p>Not specified by C, yet true for ASCII, <a href="https://en.wikipedia.org/wiki/EBCDIC" rel="nofollow noreferrer">EBCDIC</a> and every character encoding I know.</p>

<p>Alternative: </p>

<pre><code>// out = remainder - 10 + (data-&gt;fmt.flag.uppercase ? 'A' : 'a');
out = (data-&gt;fmt.flag.uppercase ? "ABCDEF" : "abcdef")[remainder - 10];
</code></pre>

<hr>

<p>OK thats a wrap for today.</p>
    </div>