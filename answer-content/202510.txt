<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You can get rid of some of the repetition using a <code>for</code> loop looping over the lambdas and colors and using tuple assignment to at least get rid of one level of having to use indexing as well as the necessity of having to call <code>fitreg</code> twice for each plot:</p>

<pre><code>if __name__ == "__main__":

    D = 1
    N = 10
    mu = np.arange(10)

    xx = mu[:, None] + 0.01 * np.random.randn(N, D)
    yy = 2 * xx + 2 * np.random.randn(N, D)

    plt.clf()
    plt.plot(xx, yy, 'kx')

    x, y = fit(phi_poly, xx, yy)
    plt.plot(x, y, 'b-')
    for lamb, color in zip([1, 10, 0.1], "rgy"):
        x, y = fitreg(phi_poly, xx, yy, lamb)
        plt.plot(x, y[:, 0], '{}-'.format(color))

    plt.show()
</code></pre>

<p>I also added a <a href="http://stackoverflow.com/questions/419163/what-does-if-name-main-do"><code>if __name__ == "__main__":</code> guard</a> to allow importing from this script in another script and used <a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.arange.html" rel="nofollow noreferrer"><code>numpy.arange</code></a> for your <code>mu</code> array.</p>

<p>For the construction of <code>xx</code> you don't actually need the <code>numpy.tile</code>, the normal broadcasting rules already do that for you.</p>
    </div>