<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>main guard</h1>

<p>It is common to put the code you want to run behind an <code>if __name__ == "__main__":</code>, so you can later import the functions that might be reused in a different module</p>

<h1>naming</h1>

<p>You use both <code>snake_case</code> and <code>CamelCase</code>. Try to stick to 1 naming convention. PEP-8 advised <code>snake_case</code> for variables and functions, <code>CamelCase</code> for classes</p>

<h1>functions</h1>

<p>split the code in logical parts</p>

<h2>pandas settings</h2>

<pre><code>def settings_pandas():
    pd.set_option("display.height", None)
    pd.set_option("display.max_rows", None)
    pd.set_option("display.max_columns", None)
    pd.set_option("display.width", None)
    pd.set_option("expand_frame_repr", True)
</code></pre>

<h2>filename input</h2>

<p>The way you ask the filename is very fragile. A more robust way would be to ask the filename in a different function, and then validate it</p>

<pre><code>from pathlib import Path
def ask_filename(validate=True):
    """
    Asks the user for a filename.
    If `validate` is True, it checks whether the file exists and it is a file
    """
    while True:
        file = Path(input("Please input the CSV File Name: (CTRL+C to abort)"))
        if validate:
            if not file.exists() and file.is_file():
                print("Filename is invalid")
                continue
        return file
</code></pre>

<h1>IO</h1>

<pre><code>def read_host_data(filename):
    """reads `filename`, filters the unix platforms, and returns the `Target system address`"""
    df = pd.read_csv(filename, usecols=["Platform ID", 'Target system address']).dropna()
    unix_platforms = df['Platform ID'].str.startswith("CDS-Unix")
    return df.loc[unix_platforms, "Target system address"]
</code></pre>

<p>There is no need to save the intermediary data to a file. You could use a <code>io.StringIO</code>. An alternative if you need a temporary file is <a href="https://docs.python.org/3/library/tempfile.html#tempfile.TemporaryFile" rel="nofollow noreferrer"><code>tempfile</code></a>.</p>

<p>But in this case, where you just need the set of the values of a <code>pd.Series</code>, you can do just <code>set(host_data)</code>, without the intermediary file.</p>

<h1>putting it together:</h1>

<pre><code>if __name__ == "__main__":
    settings_pandas()  # needed?
    filename = ask_filename()
    host_data = set(read_host_data(filename))
    with open("hostfile2") as hostfile2:
        host_data2 = set(hostfile2)
    for item in sorted(host_data2 - host_data):
        print(item.strip())
</code></pre>

<p>since the <code>i</code> is not used, I dropped the <code>enumerate</code>. Since <code>host_data2</code> is directly read from a file, there are no conversions, and it are all <code>str</code>s, so the conversion to <code>str</code> is dropped too.</p>

<p>Since I don't see any printing of <code>pandas</code> data, This part can be dropped apparently.</p>
    </div>