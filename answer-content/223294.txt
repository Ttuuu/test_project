<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Elegant is hard to define, especially given the small snippet of code you've provided. I'll go down the list of different ways to write it. Note: Not all of them are what I'd call <em>"elegant"</em>, though:</p>

<pre><code>// as short as possible (NOT ELEGANT)
func fileExists(path string) (ok bool) {
    if _, err := os.Stat(path); err == nil {
        ok = true
    }
    return
}
</code></pre>

<p>This works by creating a variable for the return value. A <code>bool</code> defaults to the <code>false</code> value. Next, I stat the path, and if <code>Stat</code> returns no errors, I set the return variable to <code>true</code>. Return and only if <code>Stat</code> returned no errors, the function will return <code>true</code>.</p>

<pre><code>// boolean assignment
if fileExists(path string) bool {
    _, err := os.Stat(path)
    return err == nil
}
</code></pre>

<p>This is shorter, because we're returning the boolean value resulting from the comparison of <code>err</code>. If no error is returned, the function will return <code>true</code>.</p>

<h3>All things considered, this is not elegant</h3>

<p>It's important to remember: code is written by humans, for humans to read, and maintain. The compiler is there to translate the <em>human</em> readable code to machine instructions. If you try to write something as short as possible, it's going to be harder for others to maintain/understand. There's 2 very well known quotes about this:</p>

<blockquote>
  <p>Everyone knows that debugging is twice as hard as writing a program in the first place. So if you're as clever as you can be when you write it, how will you ever debug it? -- Brian Kernighan in The Elements of Programming Style</p>
</blockquote>

<p>And</p>

<blockquote>
  <p>Always code as if the person who ends up maintaining your code is a violent psychopath who knows where you live. From <a href="http://wiki.c2.com/?CodeForTheMaintainer" rel="nofollow noreferrer">Code for the maintainer</a></p>
</blockquote>

<p>Keeping these things in mind, I'd say the code you have is easy to read, easy to maintain, and therefore elegant. There is one small change I'd suggest to have it be more <em>"idiomatic"</em>:</p>

<pre><code>func fileExists(path string) bool {
    if _, err := os.Stat(path); err != nil {
        return false
    }
    return true
}
</code></pre>

<p>The <code>if &lt;err-assigning-expression&gt;; err != nil</code> is the de facto standard way of checking error returns in golang, if you don't need the return values other than checking them. In this case, all you need the <code>err</code> for is to check whether it was a nil value of not, so assign &amp; check in one <code>if</code> statement is what I'd recommend.</p>
    </div>