<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><p>It is a convention in Python to use the <code>_</code> variable as the 'throw away variable'.
In your case you can replace <code>column</code> with it.</p></li>
<li><p>Rather than using a for loop with <code>list.append</code> you can use a list comprehension.</p>

<pre class="lang-py prettyprint-override"><code>data = []
for i in range(4):
    data.append(i)

data = [i for i in range(4)]
</code></pre></li>
<li><p>When you build an array with all of the items having the same immutable value you can make an array with just one value and multiply the array.</p>

<pre class="lang-py prettyprint-override"><code>foo = [None for _ in range(4)]

foo = [None] * 4
</code></pre></li>
<li><p>You should not rely on globals to hold state. There are two solutions:</p>

<ol>
<li>Pass and return the values from the functions.</li>
<li>Use a class to encapsulate state.</li>
</ol></li>
<li><p>Strings <code>%</code> method for formatting is somewhat archaic and buggy. It should be noted that <code>str.format</code> or f-strings are a better alternate with more features.</p>

<pre><code>values = (1, 2)

'%s %s' % values

'{0[0]} {0[1]}'.format(values)
'{} {}'.format(*values)

f'{values[0]} {values[1]}'
</code></pre></li>
<li><p>It is best practice to use an <code>if __name__ == '__main__'</code> guard to prevent your code from running if imported by accident.</p></li>
<li><p>Python uses 0 based indexing. I have had no problems with it once adjusted. However if you do you'd be better off not using Python.</p>

<p>Lua, Julia and R are all languages that use 1-based indexing.</p></li>
</ul>

<pre class="lang-py prettyprint-override"><code>def new_board():
    return [['_'] * 3 for _ in range(3)]


def print_board(board):
    print(
        '  {} | {} | {}  '.format(*board[0])
        + '----+---+----'
        + '  {} | {} | {}  '.format(*board[1])
        + '----+---+----'
        + '  {} | {} | {}  '.format(*board[2])
    )


if __name__ == '__main__':
    board = new_board()
    print(board)
    print_board(board)
</code></pre>
    </div>