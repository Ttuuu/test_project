<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here are some code style and organization notes:</p>

<ul>
<li>remove unused imports (<code>sys</code>, <code>requests</code>)</li>
<li><code>import time</code> is also not needed since you are immediately shadowing it after by defining the variable <code>time</code></li>
<li>missing <code>datetime</code> import</li>
<li><a href="https://www.python.org/dev/peps/pep-0008/#imports" rel="nofollow noreferrer">organize imports per PEP8</a></li>
<li>use consistent <em>4-space</em> indents</li>
<li>no need for extra space after the function and before the opening parenthesis - e.g. <code>siren()</code> vs <code>siren ()</code></li>
<li>let's avoid hardcoding the constant values, like the number <code>7</code> and define it in a, say, <code>GPIO_PIN</code> "constant"</li>
<li>let's move all the initial setup code to under the "main" block of the program</li>
<li>use <code>print()</code> as a function as opposed to a statement (for Python 3.x compatibility)</li>
</ul>

<p>Here is the improved initial part of the code without the "scraping" part:</p>

<pre><code>from datetime import datetime
from time import sleep

import RPi.GPIO as GPIO
from clint.textui import puts, colored
from scraper import Scraper


GPIO_PIN = 7


def setup_gpio():
    """Sets GPIO siren is attached too."""
    GPIO.setmode(GPIO.BOARD)
    GPIO.setup(GPIO_PIN, GPIO.OUT)


def siren():
    """Make a siren (flash) on a desired output pin."""
    GPIO.output(GPIO_PIN, GPIO.HIGH)
    sleep(30)
    GPIO.output(GPIO_PIN, GPIO.LOW)


if __name__ == "__main__":
    print("Starting")
    print("Monitoring")

    now = datetime.now()

    setup_gpio()
</code></pre>

<p>Note that I've renamed <code>time</code> variable to a more readable <code>now</code>.</p>

<hr>

<p>As far as the rest of the code in the "main" block of the program:</p>

<ul>
<li><p>please see if there is a better way to register a handler for the <code>scraper</code> - instead of defining a decorator, define the <code>handler</code> function before the "main" block and call <code>register_handler()</code> passing in the function:</p>

<pre><code>scraper.register_handler(handler)
</code></pre></li>
<li><p>the <code>time</code> comparisons can be improved by using the <code>.hour</code> attribute of a datetime and short-circuiting:</p>

<pre><code>if 8 &lt; now.hour &lt; 20:
</code></pre></li>
<li><p>you can omit the last "else" + "return" branch </p></li>
<li>the <code>print</code>s around the <code>siren()</code> call should probably be put into the <code>siren()</code> function itself to avoid the code duplication</li>
</ul>
    </div>