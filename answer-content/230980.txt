<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>One should almost never use a bare <code>except</code> clause.  It should always list the exceptions to be caught.</p>

<p>The code would be easier to read and understand, if it were written in section that each tested one aspect of a magic square.  Like, is is a square, does it have all the numbers in sequence, do the rows add up to the magic number, do the columns, do the diagonals.   Here is a pure python version:</p>

<pre><code>def is_magic_square(grid: List[List[int]]) -&gt; bool:
    """Returns a boolean if an input grid is magic square"""

    grid_length = len(grid)
    grid_area = grid_length**2
    magic_sum = float(grid_length * (grid_length ** 2 + 1) / 2)

    # check the length of all rows
    if any(len(row) != grid_length for row in grid):
        return False

    # check it has all the numbers in sequence        
    if set(x for row in grid for x in row) != set(range(1, grid_area + 1)):
        return False

    # check all the rows add up to the magic_number
    if any(sum(row) != magic_sum for row in grid):
        return False

    # check all the columns add up to the magic_number
    if any(sum(row[col] for row in grid) != magic_sum for col in range(grid_length)):
        return False

    # check each diagonal adds up to the magic_number
    if (sum(grid[i][i] for i in range(grid_length)) != magic_sum
        or sum(grid[i][grid_length-i-1] for i in range(grid_length)) != magic_sum  ):
        return False

    return True
</code></pre>

<p>Your code used numpy, it has many useful functions for this task.  So here is an alternative version using numpy:</p>

<pre><code>def is_magic_square2(grid: List[List[int]]) -&gt; bool:
    """Returns a boolean if an input grid is magic square"""

    grid_length = len(grid)
    magic_sum = float(grid_length * (grid_length ** 2 + 1) / 2)

    # check the length of all rows
    if any(len(row) != grid_length for row in grid):
        return False

    npgrid = np.array(grid)

    # check it has all ints from 1 to grid_length**2 (inclusive)
    if len(np.setdiff1d(npgrid, np.arange(1, grid_length**2 + 1))):
        return False

    # check all the rows add up to the magic_number
    if any(np.not_equal(npgrid.sum(axis=0), magic_sum)):
        return False

    # check all the columns add up to the magic_number
    if any(np.not_equal(npgrid.sum(axis=1), magic_sum)):
        return False

    # check both diagonals add up to the magic_number
    if (npgrid.diagonal().sum() != magic_sum
        or np.fliplr(npgrid).diagonal().sum() != magic_sum):
        return False

    return True
</code></pre>
    </div>