<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Moving to an answer:</p>

<p>My knowledge on compilers is 20 years old. So I could be wrong. But a compiler can do a lot of the maths on const values (and now contexpr) at compile time (which is when all template code is also evaluated).</p>

<p>I have seen compilers check to see if this was a division by 2 (or multiple of 2) and do shifts (if the shifts are actually faster on that platform (the compiler I worked on explicitly did this test as part of validation and did not plant the the shifts on the SOC chip we had)).</p>

<p>I believe I have read (so this is more speculative) that the chips were baking in this optimization into the hardware circuitry. OK. The old chips did not do it like the Z80 and x86 but chip optimizations have come along way (and it has been a long time since I kept up with the trades but this is a simple hardware optimization).</p>

<p><strong>BUT that is not my main issue</strong>. My issue is with programmer micro optimization. You are unlikely to beat the compiler, but you can. The Problem is that your optimization just locked you into a technique that the compiler probably can't optimize around and thus you are pesimizing your code in the long run.</p>

<p>Over time compiler will improve (or your code will be moved to another architecture) because you have locked in one technique you are probably preventing the compiler from taking advantage of some new technique or hardware appropriate optimization.</p>

<p>Compilers are extremly good at micro (peephole) optimization. Trying to beat the compiler is counterproductive in the long run. Compilers are very bad at algorithmic optimizations (humans are very good at this. So concentrate your optimizations at the algorithm level).</p>
    </div>