<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<pre><code>public enum Operation
{
    Addition,
    Multiplication,
    Exponentation
}
</code></pre>
</blockquote>

<p>If you gave these explicit values:</p>

<pre><code>  public enum Operation
  {
    Addition = 1,
    Multiplication = 2,
    Exponentation = 3
  }
</code></pre>

<p>... you could avoid the <code>+ 1</code> for the operation:</p>

<pre><code>  return Hyper(left, (int)operation, right);
</code></pre>

<hr>

<p>Because <code>Hyper(...)</code> is private, and you are supposed to know how to use it, there is no need for checking the input values in there. It is safe to leave it to <code>Evaluate(...)</code> to do that:</p>

<pre><code>public static int Evaluate(int left, int right, Operation operation)
{
  if (left &lt; 0) throw new ArgumentOutOfRangeException(nameof(left));
  if (right &lt; 0) throw new ArgumentOutOfRangeException(nameof(right));
  if (!Enum.IsDefined(typeof(Operation), operation)) throw new ArgumentOutOfRangeException(nameof(operation));

  return Hyper(left, (int)operation, right);
}
</code></pre>

<p>it is safe because:</p>

<pre><code>  if (n == 0) return b + 1;
  if (b == 0) return n == 1 ? a : n == 2 ? 0 : 1;
</code></pre>

<p>will catch zeros for <code>n</code> and <code>b</code> while <code>a</code> never changes so no arguments will never be lesser than zero - as you can only decrement by one.</p>

<hr>

<p>Personally I would change the order of <code>b</code> and <code>n</code> to be the same as for <code>Evaluate(...)</code>:</p>

<pre><code>static int Hyper(int a, int b, int n) {...}
</code></pre>

<hr>

<p>All in all in my writing it would look like:</p>

<pre><code>  public enum Operation
  {
    Addition = 1,
    Multiplication = 2,
    Exponentation = 3
  }

  public static class Expression
  {
    public static int Evaluate(int left, int right, Operation operation)
    {
      if (left &lt; 0) throw new ArgumentOutOfRangeException(nameof(left));
      if (right &lt; 0) throw new ArgumentOutOfRangeException(nameof(right));
      if (!Enum.IsDefined(typeof(Operation), operation)) throw new ArgumentOutOfRangeException(nameof(operation));

      return Hyper(left, right, (int)operation);
    }

    static int Hyper(int a, int b, int n)
    {
      if (n == 0) return b + 1;
      if (b == 0) return n == 1 ? a : n == 2 ? 0 : 1;

      return Hyper(a, Hyper(a, b - 1, n), n - 1);
    }
  }
</code></pre>

<hr>

<p>More edge/test cases?</p>

<hr>

<p>BtW <code>Hyper()</code> stack overflows relatively quickly: for instance for <code>a == 8</code> and <code>b == 5</code> for <code>Exponentation</code>.</p>

<p>An alternative algorithm could be the below "semi-recurs-iterative":</p>

<p>It has a recursive depth of max 3:</p>

<pre><code>public static int HyperIter(int a, int b, int n)
{
  if (n == 1)
  {
    while (b &gt; 0)
    {
      a++;
      b--;
    }

    return a;
  }
  else
  {
    int res = n - 1;
    res--;
    while (b &gt; 0)
    {
      res = HyperIter(res, a, n - 1);
      b--;
    }

    return res;
  }
}
</code></pre>

<p>I'm though not sure if it completely satisfies the criteria of only using <code>+ 1</code>, because it uses a local variable (<code>res</code>) and <code>--</code> - but the original also uses <code>- 1</code> in the recursive calls, so...?</p>
    </div>