<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<pre><code>class Transaction
{
    public int Id { get; set; }
    public int Counter { get; set; }
}
</code></pre>
</blockquote>

<p>Neither of the properties should be publicly settable.</p>

<blockquote>
<pre><code>class TransactionService
{
    private readonly Dictionary&lt;int, Tuple&lt;int, object&gt;&gt; transactionLockMap; // id -&gt; (referenceCount, lock).

    class TransactionLock : IDisposable
    {
            Tuple&lt;int, object&gt; transactionLock;
                    transactionLock = Tuple.Create(1, new object());
</code></pre>
</blockquote>

<p>This is all a bit confusing because you actually have a class called <code>TransactionLock</code> but you're the using the same words for a <em>concept</em> of a transaction lock; <code>transactionLockMap</code> isn't a map of <code>TransactionLock</code>s; <code>transactionLock</code> isn't a <code>TransactionLock</code>.</p>

<blockquote>
  <p><code>transactionLock = Tuple.Create(transactionLock.Item1 + 1, transactionLock.Item2);</code></p>
</blockquote>

<p>I don't like the usage of <code>Tuple</code>s here. It would be clearer if you created a class which held the relevant items in well named properties.</p>

<blockquote>
<pre><code>lock (transactionService.syncRoot)
if (!transactionService.transactionLockMap.TryGetValue(transactionId, out transactionLock))
</code></pre>
</blockquote>

<p>I don't like this reaching in to the internals of the <code>TransactionService</code> by another class. Sure it's a nested class but imo that's no excuse. The <code>TransactionService</code> should provide methods that can be called, which encapsulate the nitty gritty work on its internals.</p>
    </div>