<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Java to JavaScript</h1>
<p>From Java to JavaScript is one of that hardest ways to move into JS. Appart from a similar C style syntax they are very different.</p>
<h2>Some things to know</h2>
<ul>
<li><p>Javascript does not have classes, interfaces, or classical inheritance.
The <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/class" rel="nofollow noreferrer">class syntax</a> is just an alternative way of defining <a href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects" rel="nofollow noreferrer">objects</a>.</p>
<p>The class syntax has some serious problems (no way to define private properties (new syntax is on the way) and encourages poor encapsulation styles) and should be avoided until it has stabilized.</p>
</li>
<li><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this" rel="nofollow noreferrer"><code>this</code></a> is not the same as Javas <code>this</code> be careful when and how you use it.</p>
</li>
<li><p>Objects do not have private properties. Encapsulation is via <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures" rel="nofollow noreferrer">closure</a>. However properties can be protected via the using the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" rel="nofollow noreferrer">Object</a> properties and functions.</p>
</li>
<li><p>Javascript Objects <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Inheritance_and_the_prototype_chain" rel="nofollow noreferrer">inherit via a prototype chain</a>. All objects have Object at the top of the prototype chain.</p>
</li>
<li><p>Apart from the <a href="https://developer.mozilla.org/en-US/docs/Glossary/Primitive" rel="nofollow noreferrer">primitives</a> <code>boolean</code>, <code>undefined</code>, <code>null</code>, <code>number</code>, <code>string</code> and <code>symbol</code>, all else are objects (and the primitives can be objects to).</p>
</li>
<li><p>Javascript can be run in two modes. <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode" rel="nofollow noreferrer">strict mode</a> is the preferred mode.</p>
</li>
</ul>
<p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript" rel="nofollow noreferrer">MDN main javascript page</a> is a good reference, use it if you need any more information regarding this answer. I will add extra links only if not at MDN</p>
<h2>The code</h2>
<p>The code is a mess.</p>
<ul>
<li><p>The following variables should all be declared using the keyword <code>const</code> instead of <code>let</code>:  <code>mordernPark</code>, <code>tootingPark</code>, <code>balhamPark</code>, <code>parkArray</code>, <code>numberOfTreesMap</code>, <code>streetMap</code>, and <code>streetArray</code> I may have missed some.</p>
</li>
<li><p>Define variables and constants in one place. Do create them as you need them.</p>
</li>
<li><p>You define functions for some parts of the report yet in others you just have inline code. Ideally you create a function for each part, and group them all in one object. (see example. The object <code>report</code> has all the functions)</p>
</li>
<li><p>Good names should try to be under 20 characters long and contain no more than two distinct words. from <a href="https://hilton.org.uk/presentations/naming-guidelines" rel="nofollow noreferrer">Naming guidelines for professional programmers</a></p>
<p>An example is the name <code>calculateTotalAndAverageStreetLength</code> is way to verbose. If you add this to an object called report you can name it <code>report.streetLengths</code></p>
</li>
<li><p>Keep names meaningful. Don't add type to the name. eg <code>parkArray.forEach((element) =&gt; {</code> should be <code>parks.forEach(park =&gt; {</code></p>
</li>
<li><p>Rather than send all report text hard coded to the console, have the functions push them to an array and return that array. You can then send that array where you need.</p>
</li>
<li><p>Use getters and setters when getting or setting calculated properties.</p>
</li>
<li><p>You have a super class <code>NameAndBuildYear</code> to hold the name and build year, yet you do not define a function to get the age in that object, rather you put it in the parks object. It should be with the <code>NameAndBuildYear</code> object.</p>
</li>
<li><p>Don't over complicate the code. You have named variables for each street, and array for all the streets and a map of streets by street name. Yet the street object holds the name already, why duplicate the names so many times?</p>
</li>
</ul>
<h2>Rewrite</h2>
<p>Keeping a similar structure (and still using the class syntax (cringe...)) the rewrite uses the above points to make your code more manageable.</p>
<p>I have renamed the main class to Assets as it seams more fitting.</p>
<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>"use strict";
class Asset {
    constructor(name, built) {
        this.name = name;
        this.built = built;
    }
    get age() { return new Date().getFullYear() - this.built }
}
class Park extends Asset {
    constructor(name, built, trees, area) {
        super(name, built);
        this.trees = trees;
        this.area = area;
    }
    get density() { return this.trees / this.area }
}
class Street extends Asset {
    constructor(name, built, length, size = 'normal') {
        super(name, built);
        this.length = length;
        this.size = size;
    }
}
const parks = [
    new Park('Mordern Park', 1909, 100, 0.2),
    new Park('Tooting Park', 1950, 1000, 0.4),
    new Park('Balham Park', 1800, 600, 2.9),
];
const streets = [
    new Street('Fayland Avenue', 1982, 200),
    new Street('Tooting Broadway', 1908, 1000, 'huge'),    
    new Street('Penwortham Road', 1950, 300, 'big'),
    new Street('Merton Road', 1932, 100, 'small'),
];

const report = {
    create() {
        return [
            ...report.parkAges(),
            ...report.treeDensities(),
            ...report.manyTrees(),
            ...report.streetLengths(),
            ...report.streetSizes(),
        ];
    },
    parkAges() {
        var meanAge = parks.reduce((sum,park) =&gt; sum + park.age, 0) / parks.length;
        return [`Parks have an average age of ${Math.round(meanAge)} years`];
    },
    treeDensities() { 
        return parks.map(park =&gt; `${park.name} has ${park.density} trees per square km`);
    },
    manyTrees() { 
        return parks
            .filter(park =&gt; park.trees &gt; 1000)
            .map(park =&gt; `${park.name}: has a  ${park.trees} trees`);
    },
    streetLengths() {
        const total = streets.reduce((sum, street) =&gt; sum + street.length, 0);;
        return [
          `The total length of the town's streets is ${total} meters`,
          `The average length is ${Math.round(total / streets.length)} meters`
        ];
    },
    streetSizes() { 
        return streets.map(street =&gt; `${street.name} is ${street.size}`);
    }
}
// to output to console
// console.log(report.create());


// For example only
logArray(report.create());

function log(textContent) {
    reportDisplay.appendChild(Object.assign(document.createElement("div"),{textContent}));
}
function logArray(array) { array.forEach(log) }</code></pre>
<pre class="snippet-code-html lang-html prettyprint-override"><code>&lt;code id="reportDisplay"&gt;&lt;/code&gt;</code></pre>
</div>
</div>

<h2>Example</h2>
<p>The following example is what I would call JS pure and takes a lot of care to protect via encapsulation the data and functions of the object <code>assets</code>.</p>
<p>It is a little far from ideal, it is mostly to show some alternative style OO JavaScript for those that come from more strict class typed languages like Java.</p>
<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>"use strict";
const assets = (() =&gt; {
    const types = Object.freeze({
        park: "park",
        road: "road",
        street: "road",
        parks: "park",
        streets: "road",        
    });
    const currentYear = new Date().getFullYear();
    const assetTypes = {
        [types.road](length, size = "normal") {
            return {
                get length() { return length },
                get size() { return size },
            };
        },
        [types.park](trees, area) {
            return {
                get manyTrees() { return trees &gt; 1000 },
                get density() { return Number((trees / area).toFixed(1)) }
            };
        },
        create(type, name, year, ...data) {
            return Object.freeze({
                get age() { return currentYear - year },
                get name() { return name },
                ...assetTypes[type](...data), 
            });
        },
    };    
    const assets = {[types.road]: new Map(), [types.park]: new Map()};
    const API = Object.freeze({
        types,
        each(type, cb) { for(const asset of assets[type].values()) { cb(asset) } },
        addAsset(type, name, ...data) { 
            assets[type].set(
                name, 
                assetTypes.create(type, name, ...data)
            );
        },
        get totalStreetLength() {
            var total = 0;
            API.each(types.road, road =&gt; total += road.length);
            return total;
        },
        get meanStreetLength() { return API.totalStreetLength / assets[types.road].size },
        get meanParkAge() {
            var total = 0;
            API.each(types.park, park =&gt; total += park.age);
            return Math.round(total / assets[types.park].size);
        },
        report() {
            const report = [];
            API.each(types.parks, park =&gt; report.push(`${park.name} has ${park.density} trees per km squared.`));
            report.push(`The average age of all parks is ${API.meanParkAge}years.`);
            API.each(types.parks, park =&gt; park.manyTrees &amp;&amp;  (report.push(`${park.name} has more than 1000 trees.`)));
            report.push(`The total street length is ${API.totalStreetLength}m.`);
            report.push(`The average street length is ${API.meanStreetLength}m.`);
            API.each(types.streets, street =&gt; report.push(`${street.name} has a size clasification of ${street.size}`));
            return report;
        }
    });
    return API;
})();

const smallTown = assets;
const types = assets.types;
smallTown.addAsset(types.park, 'Mordern Park', 1909, 100, 0.2);
smallTown.addAsset(types.park, 'Tooting Park', 1950, 1010, 0.4);
smallTown.addAsset(types.park, 'Balham Park', 1800, 100, 2.9);
smallTown.addAsset(types.street, 'Fayland Avenue', 1982, 200);
smallTown.addAsset(types.street, 'Tooting Broadway', 1908, 1000, 'huge');
smallTown.addAsset(types.street, 'Penwortham Road', 1950, 300, 'big');
smallTown.addAsset(types.street, 'Merton Road', 1932, 100, 'small');


logArray(smallTown.report())
function log(textContent) {
    reportDisplay.appendChild(Object.assign(document.createElement("div"),{textContent}));
}
function logArray(array) { array.forEach(log) }</code></pre>
<pre class="snippet-code-html lang-html prettyprint-override"><code>&lt;code id="reportDisplay"&gt;&lt;/code&gt;</code></pre>
</div>
</div>

    </div>