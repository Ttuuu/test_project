<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your code is organized oddly.</p>

<ul>
<li>Imports</li>
<li>Variable declarations &amp; code</li>
<li>Function definitions</li>
<li>More Variable declarations &amp; code</li>
</ul>

<p>You should keep the variable declarations and code together.</p>

<hr>

<p><code>str()</code> - why are you using this everywhere?  It returns an empty string: <code>""</code>, which is 3 characters shorter to type and is much easier to understand.</p>

<hr>

<p><code>elif mathsign != str and defxworking == True:</code> does not do what you intended.  It compares <code>mathsign</code> with the function <code>str</code>, not an empty string.  You are missing the brackets ... <code>mathsign != str()</code>, but again, use <code>mathsign != ""</code> instead.</p>

<hr>

<p>In several places you have code that reads ...</p>

<pre><code>if mathsign == '+':
    # code
if mathsign == '-':
    # code
if mathsign == '*':
    # code
if mathsign == '/':
    # code
</code></pre>

<p>These last three should <code>elif</code> statements, not <code>if</code> statements.</p>

<p>Similarly, code like:</p>

<pre><code>if mathsign == str():
   # code
if mathsign != str():
   # code
</code></pre>

<p>should be replaced with:</p>

<pre><code>if mathsign == "":
   # code
else:
   # code
</code></pre>

<hr>

<p>Don't Repeat Yourself (DRY).  For example, in <code>def math_pressed(math):</code> you have every branch of your <code>if ... elif</code> ending in:</p>

<pre><code>mathsign = str(math)
math_button_pressed()
current = ""
</code></pre>

<p>This can be moved out of every branch, and added as common code at the end.</p>

<p>Along a similar vein, I see the following over and over in the code:</p>

<pre><code>if condition:
    firstnum = round( (... some operation ...), 6)
if other_condition:
    firstnum = round( (... some operation ...), 6)
if third_condition:
    firstnum = round( (... some operation ...), 6)
if fourth_condition:
    firstnum = round( (... some operation ...), 6)
</code></pre>

<p>How about:</p>

<pre><code>if condition:
    result = ... some operation ...
elif other_condition:
    result = ... some operation ...
elif third_condition:
    result = ... some operation ...
elif fourth_condition:
    result = ... some operation ...

firstnum = round(result, 6)
</code></pre>

<p>Maybe you want a <code>def precision(value)</code> function that rounds <code>value</code> to the desired precision.  If you want to increase the precision later, you could change this in one spot.</p>

<p>Again, <code>screen.set(is_int(firstnum))</code> is repeated over and over, occasionally with <code>secondnum</code> as the argument.  How about a <code>set_screen(value)</code> function which sets the <code>screen</code> variable to the <code>int</code> or <code>float</code> representation of the value?</p>

<p>Or a <code>def set_firstnum(value)</code> function which rounds the value to the desired precision, sets the <code>firstnum</code> variable, and updates the <code>screen</code>.</p>

<hr>

<p>You have <code>lambda</code> functions that call functions based on which button is pressed.  But you are inconsistent about what you pass to the function.  Does <code>number_pressed(butt)</code> take an integer, such as <code>0</code> through <code>9</code>, or a string such as (<code>'.'</code>)?  You pass in both types, which forces you to use <code>str(butt)</code> in the function itself to convert the input into a string.  Instead, just always pass in a string value.</p>

<p>Creation of the GUI.  You have written a lot of code for something that can be done in a loop.</p>

<pre><code>for idx, digit in enumerate("1234567890"):
    cmd = lambda arg=digit: number_pressed(arg)
    btn = Button(root, text=digit, command=cmd, bg="gainsboro",
                 bd=3, padx=12, pady=5, font=('Helvetica', 14, bold))
    btn.grid(row = 2 + idx // 3, column = idx % 3, sticky=W)
</code></pre>

<p>With 5 lines, instead of 30, we create all 10 digit buttons.</p>

<p><strong>Note</strong>: We needed a little bit of magic (<code>arg=digit</code>) to generate the lambda functions without binding the <code>digit</code> variable itself to the lambda function body.  Without that magic, the lambda functions for all buttons would use the last value assigned to the <code>digit</code> variable when the lambda function gets invoked ... which would mean every button would call <code>number_pressed('0')</code>.</p>

<p>You can generate the remaining buttons in a similar manner.  The main difficulty is ensuring the right <code>padx</code>, <code>bg</code>, and <code>font</code> values, which are different for some buttons.</p>

<p>Also, you'll want to store the buttons for the math operators, so you can implement <code>math_button_raised()</code>.  I'd recommend adding them to a list, so you can still generate them in a loop.</p>

<hr>

<p>Global variables are horrible.  Don't use them.  A class object would make a nice container for you calculator GUI:</p>

<pre><code>from tkinter import *

class Calculator:

    def __init__(self, root):
        self.current = ""
        self.firstnum = 0
        self.screen = StringVar()

        display = Entry(root, textvariable=self.screen, justify=RIGHT)
        display.grid(columnspan=4)

        for idx, digit in enumerate('1234567890.'):
           cmd = lambda arg=digit: self.number_pressed(arg)
           btn = Button(root, text=digit, command=cmd)
           btn.grid(row=2+idx//3, column=idx%3)

        # ... etc ...

    def number_pressed(self, digit):
        self.current += digit
        self.screen.set(self.current)
        self.firstnum = float(self.current)

    # ... etc ...

root = Tk()
Calculator(root)
root.mainloop()
</code></pre>
    </div>