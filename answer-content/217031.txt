<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ol>
<li><p><code>device_raw_ptr</code> is extremely cheap to copy, so remove all hints of move-semantics and use of <code>swap()</code>.</p></li>
<li><p>Now you can remove the copy-constructor and copy-assignment, as there is no need to explicitly declare them. Especially making them user-defined must be avoided to keep them trivial.</p></li>
<li><p>Kudos on trying to use the approved two-step for <code>swap()</code>. Though you get a failing grade anyway because you bungled it by using a qualified call in the second part. Hopefully, C++20 will abolish that nonsense by introducing <a href="https://stackoverflow.com/questions/53495848/what-are-customization-point-objects-and-how-to-use-them">customization point objects</a>.</p></li>
<li><p>Yes, you should pass your <code>device_raw_ptr</code> by value if you have the choice, as it is a tiny trivial type. Still, refrain from returning a reference to such a temporary.</p></li>
<li><p>There is no reason <code>operator-(device_raw_ptr, std::ptrdiff_t)</code> should not be <code>constexpr</code>. Aside from your implementation for some reason delegating to <code>operator-=</code>, which is not. Same for <code>operator+</code> which uses <code>operator+=</code>.</p></li>
<li><p>Is there any reason you don't support subtracting a <code>device_raw_ptr</code> from another?</p></li>
<li><p>I'm really puzzled why you make the only data-member <code>protected</code> instead of <code>private</code>.</p></li>
</ol>
    </div>