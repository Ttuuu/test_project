<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Naming</h3>

<p>The meaning of some identifier names is hard to grasp:</p>

<ul>
<li>What does <code>Point_Dng</code> stand for? Why not simply <code>Point</code>?</li>
<li>What is <code>point_piece</code> in the inner loop, and how is it different from 
<code>piece</code> from the outer loop?</li>
<li><code>set</code> is too generic, what does it contain?</li>
<li><code>ans</code> stands for “answer,” but actually contains the “minimal area” found so far.</li>
</ul>

<h3>Simplifications</h3>

<p>As of Swift 4.2, the compiler automatically creates the required methods
for <code>Equatable</code> and <code>Hashable</code> conformance for a <code>struct</code> if all its member
are <code>Equatable</code>/<code>Hashable</code>.</p>

<p>A <code>struct</code> also has a default memberwise initializer if you don't define your
own.</p>

<p>The properties of a point are never mutated, so they can be declared as constants  (with <code>let</code>). </p>

<p>This makes the <code>struct Point</code> as simple as</p>

<pre><code>struct Point: Hashable {
    let x: Int
    let y: Int
}
</code></pre>

<p>The closure in</p>

<pre><code>let points_new = points.map({ (point: [Int]) -&gt; Point_Dng in
    return Point_Dng(point[0], point[1])
})
</code></pre>

<p>can be simplified because the compiler can infer the argument type and the
return type automatically. Since the array is only needed for creating the
set, the assignments can be combined into one:</p>

<pre><code>let pointSet = Set(points.map { point in Point(x: point[0], y: point[1]) })
</code></pre>

<h3>Performance improvements</h3>

<p>In the nested loop it suffices to consider only those pairs where one point
is the “lower left” and the other the “upper right” corner of a potential
rectangle. That reduces the number of tests, and makes the <code>abs()</code> call
redundant.</p>

<h3>Putting it together</h3>

<p>The following version was roughly twice as fast in my tests with 
random arrays of 500 points (on a 3.5 GHz Intel Core i5 iMac, compiled
in Release mode, i.e. with optimizations):</p>

<pre><code>class Solution {
    struct Point: Hashable {
        let x: Int
        let y: Int
    }

    func minAreaRect(_ points: [[Int]]) -&gt; Int {
        let pointSet = Set(points.map { point in Point(x: point[0], y: point[1]) })

        var minArea = Int.max
        for lowerLeft in points {
            for upperRight in points {
                if upperRight[0] &gt; lowerLeft[0]
                    &amp;&amp; upperRight[1] &gt; lowerLeft[1]
                    &amp;&amp; pointSet.contains(Point(x: lowerLeft[0], y: upperRight[1]))
                    &amp;&amp; pointSet.contains(Point(x: upperRight[0], y: lowerLeft[1])) {

                    let area = (upperRight[0] - lowerLeft[0]) * (upperRight[1] - lowerLeft[1])
                    minArea = min(minArea, area)
                }
            }
        }

        return minArea == Int.max ? 0 : minArea
    }
}
</code></pre>

<h3>Further suggestions</h3>

<p>Sorting the point array in increasing order of x-coordinates would allow to
find “lower left/upper right” pairs faster, potentially increasing the 
performance.</p>
    </div>