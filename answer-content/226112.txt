<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Comments should state why you've written code, not what it is doing.
Let's take examples from your code.</p>

<pre><code>// Different vehicle variables with speed.

double car  = 277.87; //mph koenigseggAgeraRS
double MiG25 = 1919.42; //mph
double parkerSpaceProbe = 213240; //mph
</code></pre>

<p>Variable names shouldn't start with an uppercase - I'm referring to MiG25 specifically, because they're reserved for other things like interfaces, classes, so on.</p>

<p>While reading your code I have absolutely no idea what koenigseggAgeraRS means.
It would have been better to write:</p>

<pre><code>double car  = 277.87; // Top mph of the car model koenigseggAgeraRS
double MiG25 = 1919.42; // Top mph of the plane MiG25
double parkerSpaceProbe = 213240; //mph
</code></pre>

<p>This explains <em>why</em> we wrote this variable and speed. But we can still improve on it by explaining <em>what</em> the variable is.</p>

<pre><code>double carMph  = 277.87; // Top mph of the car model koenigseggAgeraRS
double planeMph = 1919.42; // Top mph of the plane MiG25
double spaceProbeMph = 213240; //mph of the Parker spaceProbe
</code></pre>

<p>With this, I know why you've chosen these speeds. In this case these comments are a bit excessive and break the flow of reading the code, but that's something that comes with practice.</p>

<pre><code>long hourToDay1 = hourPlaneConversion / hoursInDay;
System.out.println(hourPlaneConversion + " hours is equivalent to " + hourToDay1 + " days."); //hours to days
</code></pre>

<p>Here the comment is irrelevant. The variable names and the code itself clearly show what's happening, I don't need the comment telling me again what its doing, I'd rather have it tell me why, or if its obvious, like here, skip it entirely.</p>

<hr>

<p>I'm aware you asked for tips on efficiency, but practicing commenting and naming conventions is going to serve you well in the long run. Let's move to some basics in functions.</p>

<p>As you noted, you're repeating code and renaming variables the same.
You can make the code much more efficient by using functions.
Lets make the car hourConversion into a function, using the renamed carMph.</p>

<pre><code>public void hourConversion(double vehicleMph){
    long LIGHT_YEAR = 6000000000000L;
    long light = lightYearInput.nextLong();
    long speedConverted = lightYear/vehicleMph;
    System.out.println("Driving the fastest car in space, would take you " + 
    speedConverted + " hours to travel " + light + " light years.");
}
</code></pre>

<p>You'll notice we moved the two lightYear and light variables to the function, I did this because we never use these variables again. In your method, I would've had to scroll back up and look at what these variables are and what their values are.</p>

<p>We can now call this method like so:</p>

<pre><code>hourConversion(carMph);
hourConversion(planeMph);
</code></pre>

<p>From here, I think you can create more functions that make the rest of your code more efficient and clearer.</p>
    </div>