<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Well, this is my first code review and by no means I'm an C# expert or something like that, but anyways I'd like to give a general opinion about your code.</p>

<p>First and foremost, you're using C# which is mostly an OO language, so I encourage you to write your code using OO constructs. In this case, it means that you should create classes to abstract the things that build your game. So for example, you would create a <code>SnakeGame</code> class, a <code>Snake</code> class, etc. This not only will help you to make your program more maintainable, but also will allow you to remove all the static properties and methods you've created. </p>

<p>Ideally, you <code>Main</code> method should be as short as possible. For example, inside your <code>SnakeGame</code> you could create a public <code>Run</code> method and in <code>Main</code> you would only need to instantiate that class and only invoke its <code>Run</code> method. In code:</p>

<pre><code>static void Main(string[] args)
{
   var game = new SnakeGame();
   game.Run();
}
</code></pre>

<p>On the other hand, don't use <code>int</code> when you can use an <code>enum</code>. In your program you've used an <code>int</code> for the field <code>direction</code>. Instead you could create a simple <code>enum</code>:</p>

<pre><code>enum Direction
{
   Up, Right, Down, Left
}
</code></pre>

<p>Then in the hypothetical <code>SnakeGame</code> class you could have: <code>private Direction snakeDirection;</code>, instead of <code>static int direction;</code> that you currently have in the class <code>Program</code>.</p>

<p>About the style I noticed that you have mixed camelCase with PascalCase for fields and methods: e.g., the fields <code>Populated</code> and <code>Lost</code> use PascalCase whereas the field <code>snakeLength</code> uses camelCase. Likewise, the method <code>updateScreen</code> uses camelCase, but the method <code>Restart</code> uses PascalCase, and this is not good. Choose a style and stick with it: be consistent!. FYI, in C# is common to use camelCase for variables, in particular for fields, and PascalCase for classes and methods. So my general advice here would be to follow the standard conventions. And since we're talking about conventions, it's also a common standard in C# to use the <a href="https://en.wikipedia.org/wiki/Indentation_style#Allman_style" rel="noreferrer">Allman style</a> for indentation.</p>

<p>Finally, there are a couple things I want to comment. First is  about the class <code>Cell</code>. From the way you use it in your code, there is already a built-in struct in .NET framework that would do most of the work for you: the struct <a href="https://docs.microsoft.com/en-us/dotnet/api/system.drawing.point?view=netframework-4.7.2" rel="noreferrer"><code>Point</code></a>. It's in the namespace <code>System.Drawing</code>. As its name says, it represent a point in Cartesian coordinates and it has already properties to get and set the <code>X</code> and <code>Y</code> coordinates among other methods.</p>

<p>And about namespaces, only include those that you really need. For example, you could safely remove the namespace <code>System.Collections.Generic</code> <code>System.Text</code>, etc., and instead add the namespace <code>System.Reflection</code>. But, in a better designed code you wouldn't need such a namespace ;) </p>
    </div>