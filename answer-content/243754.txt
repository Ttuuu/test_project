<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Some repeated code, i.e. <code>(&lt;X&gt; &lt; 10) ? '0' + &lt;X&gt; : &lt;X&gt;;</code>, this can be factored into a utility in order to be more DRY. Using <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/padStart" rel="nofollow noreferrer">string::padStart</a> you can ensure a string of minimum length is returned, padding the beginning of the string until it achieves the length.</p>
<blockquote>
<p>The <code>padStart()</code> method pads the current string with another string
(multiple times, if needed) until the resulting string reaches the
given length. The padding is applied from the start of the current
string.</p>
</blockquote>
<p>When <code>hours</code>/<code>minutes</code>/<code>seconds</code> is small enough a value to become a single digit this pads it back to "two digits". We run it through the <code>String</code> constructor to make it a string and able to use string functions.</p>
<pre><code>const padTime = value =&gt; String(value).padStart(2, '0');
</code></pre>
<p>You can also precompute the hours into the range [0, 11] by taking a modulus 12. The <code>hours === 0</code> check will shift the hours to be in the range [1, 12].</p>
<p>Use a <code>setInterval</code> instead of <code>setTimeout</code> and move it <em>outside</em> the function body. You'll need to invoke the function once initially, but the interval will handle each subsequent invocation to update display. By moving out of the body you'll avoid clock skew, i.e. the time between 1000 timeout expiration and the <em>next</em> timeout instantiation.</p>
<p>Give the <code>div</code> you want to inject the time into a specific <code>id</code> so you can deterministically know where it'll be. I used an id of <code>time</code>.</p>
<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>function showTime() {
  const date = new Date();
  let hours = date.getHours();
  let minutes = date.getMinutes();
  let seconds = date.getSeconds();
  let session = (hours &lt; 12) ? "AM" : "PM";

  // Modulus 12 "places" the hours into 1 of 12 "bins" [0-11]
  // Checking for 0 and setting to 12 shifts "bins" to [1-12]
  // hours = hours % 12 || 12; is more succinct using the fact
  // that `0` is a falsey value.
  hours = hours % 12; // hours one of [0,1,2,3,4,5,6,7,8,9,10,11]
  if (hours === 0) {
    hours = 12; // hours one of [1,2,3,4,5,6,7,8,9,10,11,12]
  }
  
  const padTime = value =&gt; String(value).padStart(2, '0');

  const time = `${padTime(hours)} : ${padTime(minutes)} : ${padTime(seconds)} ${session}`;
  document.querySelector('#time').innerHTML = time;
}

showTime();
setInterval(showTime, 1000);</code></pre>
<pre class="snippet-code-html lang-html prettyprint-override"><code>&lt;!DOCTYPE html&gt;
  &lt;html&gt;
    &lt;head&gt;
      &lt;title&gt;Digital Clock&lt;/title&gt;
    &lt;/head&gt;
    &lt;body&gt;
      &lt;div id="time"&gt;&lt;/div&gt;
      &lt;script src="script.js"&gt;&lt;/script&gt;
    &lt;/body&gt;
  &lt;/html&gt;</code></pre>
</div>
</div>

    </div>