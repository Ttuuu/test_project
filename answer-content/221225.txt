<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I took me a while to understand your code since I didn't know from the beginning what each variable really meant:</p>

<ul>
<li><code>i</code> is probably an int, maybe an index</li>
<li><code>x</code> is probably a number (maybe even a float), or something unknown, or a placeholder</li>
<li><code>seen</code> is a set of something, and this something could really be anything</li>
<li><code>stack</code> will only be used by calling <code>append</code> and <code>pop</code>, but what does it contain? ints, strings, complex objects? The name <code>stack</code> by itself doesn't give any clue.</li>
<li><code>w</code> could also be spelled <code>word</code>, but that one is already the best of the variable names</li>
</ul>

<p>Therefore, to really understand what each variable stands for, I had to run your code using only pen and paper, which was a good exercise since I really don't do that often.</p>

<p>By doing that I noticed:</p>

<ul>
<li>the only purpose of the <code>if not w: continue</code> is to prevent the empty word from being output</li>
<li>the only purpose of the <code>w[i:] in words</code> is to speed up the implementation; it is not necessary for the pure algorithm</li>
<li>the expression <code>i + x</code> appears several times. I wondered whether the Python runtime would be able to apply common subexpression elimination to it, or whether it would make the program faster if that expression were saved into a separate variable</li>
<li>I wanted to replace the <code>x != word_len</code> with the simpler <code>i != 0</code>, but I quickly noticed that this would break the whole algorithm</li>
<li>using a stack is great because the larger string indices are pushed at the end, which means they are popped and checked first, which speeds up the program. At least in the <code>catsdogcats</code> case</li>
<li>the <code>range</code> should not start at 0, but at 1, since for the empty word, <code>seen[i + x]</code> is always <code>True</code></li>
<li>the code is really efficient</li>
</ul>

<p>After finishing the manual analysis, each and every little expression made sense. I didn't discover anything superfluous. Therefore: nice work. You should make the variable names a little more suggestive though.</p>

<ul>
<li><code>i</code> could be <code>left</code></li>
<li><code>i + x</code> could be <code>right</code></li>
<li><code>x</code> could be <code>subword_len</code></li>
<li><code>stack</code> could be <code>indices_to_test</code></li>
<li><code>seen</code> could be <code>seen_indices</code></li>
</ul>

<p>One idea I had during the analysis was that the code might become easier to understand if you used a nested function:</p>

<pre><code>def find_all_concatenated_words_in_a_dict(words: List[str]) -&gt; List[str]:
    words = set(words)

    def is_concatenated(word: str) -&gt; bool:
        ...
        return True

    return [word for word in words if word and is_concatenated(word)]
</code></pre>

<p>After executing your algorithm using pen and paper, I thought that another implementation might be even more efficient, and maybe lead to shorter code. My idea was:</p>

<pre><code>def is_concatenated(word: str) -&gt; bool:
    word_breaks = [True] + [False] * len(word)

    for start in range(len(word_breaks)):
        if word_breaks[start]:
            for sub_len in range(1, len(word_breaks) - start):
                if sub_len != len(word) and word[start:start + sub_len] in words:
                    word_breaks[start+sub_len] = True

    return word_breaks[-1]
</code></pre>

<p>This code also starts at the beginning of the long word and marks all reachable word breaks. It uses fewer variables though.</p>

<p>The code can be further optimized:</p>

<ul>
<li>for the <code>sub_word</code> length, only iterate over the lengths that actually appear in the word set</li>
<li>return early as soon as <code>word_breaks[-1]</code> becomes <code>True</code></li>
</ul>

<p>But even with these optimizations, the time complexity stays at <span class="math-container">\$\mathcal O({\text{len}(\textit{word})}^3)\$</span>, which is quite much when <span class="math-container">\$\text{len}(\textit{word})\$</span> can be up to 10_000. Space complexity is <span class="math-container">\$\mathcal O(\text{len}(\textit{word}))\$</span>, and the initial part of the <code>word_breaks[:start]</code> list could be thrown away early.</p>

<p>The <span class="math-container">\$n^3\$</span> is because of the 2 nested <code>for</code> loops, and deeply nested in these loops is a string comparison of the subword, which also depends on <span class="math-container">\$\text{len}(\textit{word})\$</span>.</p>

<p>I'd rather have an <span class="math-container">\$\mathcal O(n^2)\$</span> or even <span class="math-container">\$\mathcal O(n)\$</span> algorithm though. I just don't know whether one exists.</p>
    </div>