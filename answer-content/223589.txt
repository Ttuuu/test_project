<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Consider a functional approach</h2>

<p>I have been coding Java for a long time before I started with Javascript so I understand the urge to write Object Oriented code, create classes etc. However, why don't you try a functional approach for a change. I bet that once you get the hang of it, you will not want to go back. I know I don't.</p>

<p>Javascript already had some great functional features, but since we got arrow functions it's just become a dream. Just look how much boilerplate we can get rid of once we accept that <em>we don't need</em> user objects to be an instance of some class. In fact, them being just plain objects is a big plus. It makes them easily serializable, To JSON for example.</p>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>const users = [];

const byId = (id) =&gt; (user) =&gt; user.id === id
const olderThan = (age) =&gt; (user) =&gt; user.age &gt; age
const makeOlder = (user, years) =&gt; user.age += years

let user1 = { name: 'user1', id: 1, age: 12 }
let user2 = { name: 'user2', id: 2, age: 18 }
let user3 = { name: 'user3', id: 3, age: 21 }
let user4 = { name: 'user4', id: 4, age: 22 }

users.push(
  user1, 
  user2, 
  user3, 
  user4
)

console.info('users', users)
console.info('id=2', users.filter(byId(2)))

makeOlder(user1, 3 /* years */)
console.info('user1.age', user1.age)

const above20 = users.filter(olderThan(20))
console.info('age&gt;20', above20)</code></pre>
</div>
</div>


<p>Note about the above code that there is less of it, it's using almost only standard constructs (we are not introducing custom list classes etc) and it is in fact more readable. Also, you'll find it is <em>much</em> more reusable because we create small, separate functions that work on <em>any</em> object instead of big classes with many members.</p>

<h2>You can do OO in Javascript</h2>

<p>If you really want object oriented code, the language has enough to make you happy. Study how to do <a href="https://crockford.com/javascript/prototypal.html" rel="nofollow noreferrer">prototypal inheritance</a> and information hiding / <a href="https://crockford.com/javascript/private.html" rel="nofollow noreferrer">private members</a> by learning from one of the masters: Douglas Crockford.</p>

<h2>You just don't need it</h2>

<p>Then... once you've learned it all... liberate yourself from it and discover... You don't need it!</p>

<p>For me, one of the biggest eye openers was how arrays are implemented in Javascript. Did you know, that all the Array methods need to do their work, is a <code>length</code> property? In fact, you can turn any object into an array-like object and have all array methods work, just by adding a length. Let me prove it to you:</p>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>var SuperArray = {}                         // omg, just a plain old object! 
SuperArray.length = 0                       // surely, this won't work??
SuperArray.push = Array.prototype.push      // what?
SuperArray.join = Array.prototype.join      // are..you doing???

// Done!
// No way!
// Way  :)

SuperArray.push('no way!')
SuperArray.push('way!')
SuperArray.push('Are you kidding me?')
SuperArray.push('No i\'m not.')
SuperArray.push('You DO NOT NEED CLASSES in Javascript.')
SuperArray.push('It\'s way cooler than that!')

console.info('SuperArray.length', SuperArray.length)
console.info('SuperArray (joined)', SuperArray.join('\n'))</code></pre>
</div>
</div>


<p>This for me is what is so incredibly cool (and powerful) about Javascript. Consider trying to figure out why and how this works. And maybe see if you can put it into practice.</p>
    </div>