<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Coding idiomatically</h2>

<ul>
<li><strong>Remember that <a href="https://en.wikipedia.org/wiki/Pragma_once" rel="nofollow noreferrer"><code>#pragma once</code></a> isn't standard (unlike <a href="https://en.wikipedia.org/wiki/Include_guard" rel="nofollow noreferrer">include guards</a>).</strong>

<ul>
<li>If you only intend your class works on major compilers, you can use <code>#pragma once</code> (but care about <a href="//stackoverflow.com/a/26908048/2644192">defects</a> and <a href="//stackoverflow.com/a/34884735/2644192">drawbacks</a>)</li>
<li>If you wish your class works on all compilers, <a href="https://stackoverflow.com/a/1144110/2644192">use both <code>#pragma once</code> and the include guards</a>.</li>
<li>If you want your class to be 100% compatible with standards, use only include guards.</li>
<li>For completeness, I have  to mention <a href="//stackoverflow.com/questions/2233401/">redundant include guards</a> too, which you could combine (or not) with <code>#pragma once</code>.</li>
</ul></li>
<li><strong>Don't misspell <code>size_t</code></strong>

<ul>
<li>You should use the full qualified <code>std::size_t</code> instead of just <code>size_t</code>, because <a href="https://stackoverflow.com/questions/5813700/difference-between-size-t-and-stdsize-t">it's the standard way to go</a>.</li>
</ul></li>
</ul>

<hr>

<h2>Coding with style</h2>

<ul>
<li><a href="https://stackoverflow.com/questions/308581/how-should-i-order-the-members-of-a-c-class/308592"><strong>Try to put <code>public</code> members first</strong></a> <strong>(primarily a matter of personal preference)</strong>

<ul>
<li>That makes your interface more explicit.</li>
<li>When users read your header file, they directly know what your class does.</li>
<li>That's what is adopted in a lot of coding standards (<a href="https://google.github.io/styleguide/cppguide.html#Declaration_Order" rel="nofollow noreferrer">google</a>, <a href="https://gcc.gnu.org/wiki/CppConventions#C.2B-.2B-_Coding_Conventions" rel="nofollow noreferrer">gcc</a>, ...)</li>
</ul></li>
<li><strong>Be consistent</strong>

<ul>
<li>In your methods' order (e.g. you shuffled <code>front</code>/<code>back</code> overloads )</li>
<li>In your spacing (e.g. look at your <code>operator</code>s' definitions)</li>
<li>In your members initialization alignment (It's really odd how you place the first member init on the same line that constructors signature, and other at the line, aligned with asserts)</li>
<li>In your naming (Why are all types "<code>snake_case</code>" but <code>circularBuffer</code> is "<code>camelCased</code>"?)</li>
</ul></li>
</ul>

<hr>

<h2>Design choices</h2>

<ul>
<li><p><strong>Type aliases</strong></p>

<p>Why are the member type aliases (<code>value_type</code>, <code>reference</code>, ...) made private?</p></li>
<li><p><strong>Naming</strong></p>

<p>Use explicit name (<code>ring_iterator</code> instead of <code>my_iterator</code>, <code>container_type</code> instead of <code>circularBuffer</code>). Avoid useless function aliases (<code>pop_front()</code>, <code>push_back()</code>, <code>top()</code>).</p></li>
<li><p><strong>Reconsider methods</strong></p>

<p>Are <code>increment_head()</code>, <code>increment_tail()</code> or <code>full()</code> are really useful?</p></li>
<li><p><strong>Consider computing <code>size</code> at compile time</strong></p>

<p>If you don't need to allow <code>size</code> to be computed at runtime, consider making it <code>constexpr</code> or template parameter. It will allow some optimizations.</p></li>
<li><p><strong>Maybe an oversight</strong></p>

<p>Where are <code>crbegin</code>/<code>crend</code> ? Did you forget them? And what about <code>swap</code> or a <code>max_size</code> method?</p></li>
<li><p><strong>Underlying container type</strong></p>

<p>Did you considered using a <a href="https://en.cppreference.com/w/cpp/container/deque" rel="nofollow noreferrer">std::deque</a> as inner data type?</p></li>
</ul>

<hr>

<h2>Checking again</h2>

<hr>

<h3>A second look</h3>

<ul>
<li>You really have a lot of formatting problems (too much or missing space, disgraceful indentation/alignment, ...). I think you have to consider adding a formatter in your tooling. <a href="//stackoverflow.com/questions/841075">There's ton of options</a>. You can also complete your toolbox using some "<a href="https://en.wikipedia.org/wiki/List_of_tools_for_static_code_analysis#C,_C++" rel="nofollow noreferrer">static code analysis</a>" application and trying to compile on multiple compilers with a selected set of flags to get useful warnings.</li>
<li>Consider <a href="https://foonathan.net/blog/2017/10/11/explicit-assignment.html" rel="nofollow noreferrer">adding the keyword <code>explicit</code> for constructors callable with one argument</a>.</li>
<li>You don't have to <code>#include</code> <code>&lt;iostream&gt;</code> nor <code>&lt;exception&gt;</code> in your ring's header, as you use nothing from them in your class.</li>
<li>You don't include <code>&lt;iostream&gt;</code>, <code>&lt;algorithm&gt;</code> and <code>&lt;exception&gt;</code> headers in the example file.</li>
<li>Don't <em>implicitly</em> use <code>using namespace std</code> (using it is a mistake, but using it without writing it is even worse).</li>
<li>Care about readability, even for example code.</li>
<li><p>You have a <em>ninja</em> semicolon after the definition of <code>my_iterator::operator++()</code></p>

<pre><code>my_iterator&amp; operator++ ()
{
    ++index;
    return *this;
}; // &lt;------ Here's the ninja!
</code></pre></li>
</ul>

<hr>

<h3>Help the compiler to help you</h3>

<ul>
<li><strong>Problem</strong>: <code>error: field 'm_array_size' will be initialized after field 'm_head' [-Werror,-Wreorder]</code></li>
<li><strong>Solution</strong>: Initialize members in order of their declaration</li>
</ul>

<hr>

<p>Once the <code>&lt;iostream&gt;</code> header removed :</p>

<ul>
<li><strong>Problem</strong>: <code>error: 'out_of_range' is not a member of 'std'</code></li>
<li><strong>Solution</strong>: Simply <code>#include &lt;stdexcept&gt;</code> in your <code>ring</code>'s header</li>
</ul>

<p>Note that removing the <code>&lt;exception&gt;</code> header have no positive/negative effect on that, so keep it removed since you don't use it in your <code>ring</code> class.</p>

<hr>

<ul>
<li><strong>Problem</strong>: <code>error: implicitly-declared 'constexpr ring&lt;int&gt;::my_iterator&lt;false&gt;&amp; ring&lt;int&gt;::my_iterator&lt;false&gt;::operator=(const ring&lt;int&gt;::my_iterator&lt;false&gt;&amp;)' is deprecated [-Werror=deprecated-copy]</code></li>
<li><strong>Solution</strong>: Simply define explicitly a copy assignment operator</li>
</ul>

<hr>

<ul>
<li><strong>Problem</strong>: A lot of verbose errors coming from the <code>std::find</code> call in the example.</li>
<li><strong>Solution</strong>: Referring to <a href="https://en.cppreference.com/w/cpp/iterator/iterator_traits" rel="nofollow noreferrer">the documentation</a> and <a href="//stackoverflow.com/questions/8054273/">this post</a> your <code>my_iterator</code> class have to provide a <code>value_type</code>member. <code>using value_type = typename std::conditional_t&lt;isconst,T ,const T&gt;;</code> should do the trick (or simply <code>T</code>).</li>
</ul>

<hr>

<ul>
<li><strong>Problem</strong>: Another verbose error starting with <code>error: no match for 'operator-=' (operand types are 'const size_type' {aka 'const long unsigned int'} and 'const ring&lt;int&gt;::my_iterator&lt;true&gt;')</code></li>
<li><strong>Solution</strong>: I think this is a copy/paste mistake. Here, the use of a subtraction assignment is pointless. just remove <code>lhs.index -= rhs;</code>.</li>
</ul>

<hr>

<ul>
<li><strong>Problem</strong>: msvc complains about "assignment operator" and "move assignment operator" implicitly defined as deleted for <code>ring&lt;int&gt;</code>. (C4626 &amp; C5027) (note: these warning are caused by the const-ness of <code>m_array_size</code>.)</li>
<li><strong>Solution</strong>: Consider implementing them.</li>
</ul>

<hr>

<ul>
<li><strong>Problem</strong>: In <code>ring::my_iterator::operator[]</code> your parameter <code>index</code> hides the member variable <code>index</code>.</li>
<li><strong>Solution</strong>: For a global solution, use a decoration (e.g. post-fix with underscore) for your member variables. Otherwise, care about naming; here change the name of the parameter. </li>
</ul>

<hr>

<p>In your example:</p>

<ul>
<li><strong>Problem</strong>: <code>catching polymorphic type 'class std::exception' by value [-Werror=catch-value=]</code></li>
<li><strong>Solution</strong>: Catch exceptions using <code>const &amp;</code> instead.</li>
</ul>

<hr>

<ul>
<li><strong>Problem</strong>: You pass <code>10</code> (which is an int) as <code>size_t</code> (an unsigned integer type, e.g. <code>uint32_t</code> or <code>uint64_t</code>) to the constructor of <code>ring</code>.</li>
<li><strong>Problem</strong>: You use <code>push</code> 20 times <code>i</code> which is <code>size_t</code> into <code>ring&lt;int&gt;</code>.</li>
<li><strong>Solution</strong>: Use the right type at the right place, even in examples.</li>
</ul>

<hr>

<ul>
<li><strong>Problem</strong>: You redeclare <code>i</code> in the nested "for-loop", already declared in the top-level one.</li>
<li><strong>Solution</strong>: Care about naming, even in examples. Here, the outside one can be named <code>value</code>: it's more explicit, and bonus, you might have noticed the typing problem.</li>
</ul>
    </div>