<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Avoid mixing clock types</h1>

<p>Why use <code>std::chrono::_V2::system_clock::time_point start</code> but initialize it with <code>std::chrono::high_resolution_clock::now()</code>? If there is a reason to use the non-standard <code>_V2</code> clocks, then you should probably stick with it everywhere. But if there is no reason to, avoid the non-standard <code>_V2</code> thing.</p>

<p>To make your code more consistent and to reduce the amount of code you have to type, define an alias for the clock namespace you want to use, like so:</p>

<pre><code>class MyTimer
{
public:
    using clock = std::chrono::high_resolution_clock;

    MyTimer() : start(clock::now()) {}
    ~MyTimer()
    {
        auto duration = clock::now() - start;
        std::cout &lt;&lt; "elapsed time was " &lt;&lt; std::chrono::duration_cast&lt;std::chrono::microseconds&gt;(duration).count() &lt;&lt; " (us)\n";
    }

private:
    clock::time_point start;
};
</code></pre>

<h1>Avoid useless definitions of default constructors and destructors</h1>

<p>In <code>class Buffer</code>, the only constructor is not doing anything, and the destructor is set to the default. There is no need for this, just omit them completely.</p>

<h1>There is no need to lock in <code>print()</code></h1>

<p>Single calls to member functions of iostreams are atomic, see <a href="https://stackoverflow.com/questions/15033827/multiple-threads-writing-to-stdcout-or-stdcerr">this post</a>. So there is no need for <code>print_mu</code>.</p>

<h1>Avoid detaching threads</h1>

<p>There is almost never a good reason to detach threads. Doing so means losing control over the threads and the resources it uses. Threads can be easily managed by STL containers. So in your <code>main()</code> you could write:</p>

<pre><code>std::vector&lt;std::thread&gt; producer_threads;

for (int i = 0; i &lt; parallelism; ++i)
{
    ...
    Producer *p = new Producer(b, 3, i, 30);
    producer_threads.emplace_back(&amp;Producer::run, p);
}

consumer_thread.join();

for (auto &amp;thread: producer_threads)
    thread.join();
</code></pre>

<p>Note that you are still leaking <code>Producer</code> objects, since you never delete them. You could put those in a <code>std::vector</code> as well, or you could change <code>class Producer</code> to start a thread in its own constructor, so you just need the vector holding <code>Producer</code>s.</p>
    </div>