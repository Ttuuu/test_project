<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I know that the code review is supposed to simply improve the code and what I'm about to suggest will probably require to rewrite most of it, however I would still like to share an approach to implementing doubly-linked list that I found particularity elegant. And the mind-blowing thing to realize about it is that most of the painstaking if-else branching can be avoided by simply introducing an additional "end" node instead of "first" and "last" pointers.</p>

<pre><code>typedef struct node {
    struct node *next;
    struct node *prev;
    void *data;
} node_t;

typedef struct list {
    size_t size;
    node_t end;
} list_t;

list_t *list_create()
{
    list_t *list = malloc(sizeof(list_t));
    list-&gt;size = 0;
    list-&gt;end.next = list-&gt;end.prev = &amp;list-&gt;end;
    return list;
}

node_t *list_insert(list_t *list, node_t *next, void *data)
{
    if (!next)
        next = &amp;list-&gt;end;

    node_t *node = malloc(sizeof(node_t));
    node-&gt;data = data;
    node-&gt;next = next;
    node-&gt;prev = next-&gt;prev;
    node-&gt;next-&gt;prev = node-&gt;prev-&gt;next = node;
    ++list-&gt;size;
    return node;
}

node_t *list_remove(list_t *list, node_t *node)
{
    node_t *next = node-&gt;next;
    node-&gt;next-&gt;prev = node-&gt;prev;
    node-&gt;prev-&gt;next = node-&gt;next;
    free(node);
    --list-&gt;size;
    return next;
}
</code></pre>

<p>Obviously the above functions require adding some safety checks and the rest of the functions can be implemented based on those once you get your head around this approach.</p>
    </div>