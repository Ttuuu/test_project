<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This is much slower than necessary.  It takes time to construct the array, and more to shorten the array word-by-word.  It's easy to imagine how this would go if <code>words</code> contains a whole book and <code>K</code> is some small number.</p>

<p>In general, you want an approach that inspects the original string to decide how much to keep, and then extracts that much, once, before returning it.</p>

<p>A regular expression is an efficient and compact way to find text that meets your criteria.  Consider:</p>

<pre><code>function crop(message, K) {
    if(K&lt;1) return "";
    const reK = new RegExp( `^.{0,${K-1}}[^ ](?= |$)` );
    return ( message.match(reK) || [ "" ] )[0];
}
</code></pre>

<p><code>.match</code> returns an array with the matched text as the first element, or <code>null</code> if no match.  The alternative <code>[ "" ]</code> will provide an empty string as a return value if there is no match (when the first word is longer than <code>K</code>). </p>

<p>The regular expression, broken down, means:</p>

<ul>
<li><code>^</code>: match start of string</li>
<li><code>.</code>: followed by any character</li>
<li><code>{0,10}</code>: ... up to ten times (one less than <code>K</code>)</li>
<li><code>[^ ]</code>: followed by a character that is not a space</li>
<li><code>(?=â€¦)</code>: this is an assertion; it means the following expression must match, but is not included in the result:

<ul>
<li><code></code>: followed by a space</li>
<li><code>|</code>: or</li>
<li><code>$</code>: end-of-string</li>
</ul></li>
</ul>

<p><strong>Exercise</strong>: can you generalize this approach to recognize any kind of whitespace (tabs, newlines, and so on)?</p>
    </div>