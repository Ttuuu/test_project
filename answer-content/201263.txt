<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your function only deals with <code>int</code>s and <code>list</code>s. While it may be fine in the context of the question, this doesn't feel Pythonic at all as it disregard any other kind of iterable and any other type of data:</p>

<pre><code>&gt;&gt;&gt; flatten([1, (2, 3), [4.5], 6])
[1, 6]
</code></pre>

<p>Instead, you could make use of the <a href="https://docs.python.org/3/library/stdtypes.html#iterator-types" rel="noreferrer">iterator protocol</a> to have a generic <code>flatten</code> function:</p>

<pre><code>def flatten(iterable):
    try:
        iterator = iter(iterable)
    except TypeError:
        yield iterable
    else:
        for element in iterator:
            yield from flatten(element)
</code></pre>

<p>Usage being:</p>

<pre><code>&gt;&gt;&gt; list(flatten([1, (2, 3), [4.5], 6]))
[1, 2, 3, 4.5, 6]
</code></pre>

<hr>

<p>However, there are two potential issues with this approach:</p>

<ul>
<li><p>you may not like that <code>flatten</code> is now a generator: change it to an helper function and wrap it with a call to <code>list</code>:</p>

<pre><code>def _flatten_generator(iterable):
    # previous code

def flatten(iterable):
    return list(_flatten_generator(iterable))
</code></pre></li>
<li><p>you won't be able to handle strings at all as individual characters are still a string and you will run into a:</p>

<blockquote>
<pre><code>RecursionError: maximum recursion depth exceeded while calling a Python object
</code></pre>
</blockquote>

<p>So you may want to add an explicit check for <code>str</code> at the beginning of the function.</p></li>
</ul>
    </div>