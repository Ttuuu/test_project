<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your code initially looks well organised, but is quite hard to follow. </p>

<p>To begin, you pass in nearly identical parameters to the two functions <code>part_one</code> and <code>part_two</code> and it is not immediately clear why. Next, using lambda functions as you currently are isn't recommended; as these are anonymous functions they won't have a name which can make debugging harder e.g if you get and error you'll be told it's in <code>&lt;lambda&gt;</code>:</p>

<pre class="lang-py prettyprint-override"><code>In [35]: a = lambda s: any(s[i] == s[i+1] for i in range(len(s)-1))
In [36]: def adjacent(s):
    ...:     return any(s[i] == s[i+1] for i in range(len(s)-1))
In [37]: a
Out[37]: &lt;function &lt;lambda&gt; at 0x105767cb0&gt;

In [38]: adjacent
Out[38]: &lt;function adjacent at 0x105aa29e0&gt;
</code></pre>

<p>I would advocate the style seen in <a href="https://codereview.stackexchange.com/a/233746/138176">Kent's answer</a>. </p>

<p>Another improvement is noticing that the answer to part two is a subset of values you generated for part one, so you should try to use that instead of having to regenerate and then filter another set of values.</p>

<hr>

<p>A couple of extra things that you may want to consider: </p>

<p>From the Advent of Code about page:</p>

<blockquote>
  <p>every problem has a solution that completes in at most 15 seconds on ten-year-old hardware</p>
</blockquote>

<p>This means that there is sometimes a trick or a shortcut that you can use to get to a solution faster, and potentially in fewer lines of code. For example, I'll share my solution:</p>

<pre class="lang-py prettyprint-override"><code>from collections import Counter

def part_1(a, b):
    for i in range(a, b + 1):
        x = list(str(i))
        if x != sorted(x) or len(set(x)) == len(x):
            continue
        yield str(i)

def part_2(passwords):
    return sum(1 for x in passwords if 2 in Counter(x).values())


passwords = list(part_1(152085, 670283))
print(len(passwords))
print(part_2(passwords))
</code></pre>

<p>Here, <code>part_1</code> is essentially a wrapper for <code>range</code> that is filtering the values we get. </p>

<ul>
<li><code>x != sorted(x)</code> checks if the digits are increasing as a sorted string will always be increasing. </li>
<li><code>len(set(x)) == len(x)</code> tests if the number of unique digits is equal to the total number of digits, if true there cannot be any duplicated values. </li>
<li>These two rules together also implicitly enforce the rule that some adjacent digits are the same, so we don't need to test for it.</li>
</ul>

<p><code>part_2</code> uses a <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="noreferrer"><code>collections.Counter</code></a> (a special kind of dictionary) to easily get the total number of each digit in the string and checking if <code>2</code> is in the values. In my opinion, this is very clear as it reads like a sentence. </p>

<p>Finally, you could easily improve the readability of my code by further abstracting the conditions in <code>part_1</code>, like so:</p>

<pre class="lang-py prettyprint-override"><code>def increasing(x):
    return x == "".join(sorted(x))

def duplicates_in(x):
    return len(set(x)) != len(x)

def part_1(a, b):
    for i in range(a, b + 1):
        i = str(i)
        if not increasing(i) or not duplicates_in(i):
            continue
        yield i
</code></pre>
    </div>