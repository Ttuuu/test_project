<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Time complexity</h3>

<p>The time complexity of push and pop operations should be \$O(1)\$, and so it is in your case too. It doesn't matter how many elements you have, these operations should take constant time. <em>(UPDATE: you've edited your original post, and made <code>pop</code> wipe out the entire stack. That's not normal! Normally, the <code>pop</code> operation on a stack should return the most recently added value. That's \$O(1)\$ time.)</em></p>

<h3>Avoid printing to <code>stdout</code></h3>

<p>Instead of the <code>display*</code> methods that print to <code>stdout</code>, it would be better to override <code>toString</code>. That way your implementation would be more testable.</p>

<h3>Generalize</h3>

<p>Why limit the stack, linked list, node elements to <code>int</code> type? It would be trivially easy to rewrite to make it work with any type <code>T</code>.</p>

<p><em>The question is tagged "beginner", so I understand you might not be familiar with generics just yet. In that case, see <a href="http://docs.oracle.com/javase/tutorial/java/generics/why.html" rel="noreferrer">this official tutorial</a>. Or perhaps you can also learn from my example implementation further down.</em></p>

<h3>Add an <code>isEmpty</code> method for the stack</h3>

<p>Your linked list has an <code>isEmpty</code> method but the stack doesn't. It would be good to have such method for the stack too.</p>

<h3>Reinventing the wheel</h3>

<p>When reinventing the wheel (here, linked list), it's good to mimic what exists. For example, <code>java.util.LinkedList</code> uses the method names <code>addFirst</code> and <code>removeFirst</code>, instead of <code>insertFirst</code> and <code>deleteFirst</code>. It's good to follow the example.</p>

<h3>Access modifiers and encapsulation</h3>

<p>As @rolfl pointed out, <code>Node</code> should not be exposed to the outside. Users of the stack should not have to know its inner workings.</p>

<p>Also, the members of <code>Node</code> should be private, and the <code>data</code> and <code>next</code> fields can be <code>final</code>. Similarly in the stack, the linked list member should be private.</p>

<h3>Naming</h3>

<p>You use poor names in many places.</p>

<ul>
<li>Instead of <code>n</code> for the new node when replacing the first item of a linked list, <code>newFirst</code> would be more intuitive</li>
<li>Instead of <code>temp</code> for the old first item removed from a linked list, <code>oldFirst</code> would be more intuitive</li>
<li>Instead of <code>li</code> for the linked list in the stack, <code>linkedList</code> would be more intuitive</li>
</ul>

<h3>Suggested implementation</h3>

<pre><code>class LinkList&lt;T&gt; {

    private static class Node&lt;T&gt; {

        private final T data;
        private final Node&lt;T&gt; next;

        public Node(T data) {
            this.data = data;
        }

        @Override
        public String toString() {
            return data.toString();
        }
    }

    private Node&lt;T&gt; first = null;

    public void addFirst(T data) {
        Node&lt;T&gt; newFirst = new Node&lt;T&gt;(data);
        newFirst.next = first;
        first = newFirst;
    }

    public T removeFirst() {
        Node&lt;T&gt; oldFirst = first;
        first = first.next;
        return oldFirst.data;
    }

    @Override
    public String toString() {
        StringBuilder builder = new StringBuilder();
        Node current = first;
        while (current != null) {
            builder.append(current).append(" ");
            current = current.next;
        }
        return builder.toString();
    }

    public boolean isEmpty() {
        return first == null;
    }

}

class LinkListStack&lt;T&gt; {

    private final LinkList&lt;T&gt; linkedList = new LinkList&lt;&gt;();

    public void push(T data) {
        linkedList.addFirst(data);
    }

    public T pop() {
        return linkedList.removeFirst();
    }

    public boolean isEmpty() {
        return linkedList.isEmpty();
    }

    @Override
    public String toString() {
        return linkedList.toString();
    }
}
</code></pre>

<h3>Unit tests</h3>

<pre><code>@Test
public void testPushAndPop() {
    LinkListStack&lt;Integer&gt; st = new LinkListStack&lt;&gt;();
    st.push(50);
    st.push(70);
    st.push(190);
    assertEquals("190 70 50", st.toString());
    assertEquals(190, (int) st.pop());
    assertEquals("70 50", st.toString());
}

@Test
public void testPopUntilEmpty() {
    List&lt;Integer&gt; values = Arrays.asList(50, 70, 190, 20);
    LinkListStack&lt;Integer&gt; st = new LinkListStack&lt;&gt;();
    assertTrue(st.isEmpty());
    for (Integer value : values) {
        st.push(value);
    }
    assertFalse(st.isEmpty());
    for (int i = values.size(); i &gt; 0; --i) {
        assertEquals(values.get(i - 1), st.pop());
    }
    assertTrue(st.isEmpty());
}
</code></pre>
    </div>