<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Incorrect indention</h2>

<p>All of the methods in a class need to be indented such that they are inside the class definition. (this is based on the original version of the code you posted.</p>

<p>Instead of this:</p>

<pre><code> class StopWatch(Frame):  
   """ Implements a stop watch frame widget. """                                                                
   def __init__(self, parent=None, **kw): ...

def makeWidgets(self): ...                        
def _update(self): ...
def _setTime(self, elap): ...
def Start(self): ...                                                  
def Stop(self): ...                                  
def Reset(self): ...                                 
def clock_in(self): ...
def clock_out(self): ...
</code></pre>

<p>You need to do this:</p>

<pre><code>class StopWatch(Frame):  
   """ Implements a stop watch frame widget. """                                                                
    def __init__(self, parent=None, **kw): ...

    def makeWidgets(self): ...                        
    def _update(self): ...
    def _setTime(self, elap): ...
    def Start(self): ...                                                  
    def Stop(self): ...                                  
    def Reset(self): ...                                 
    def clock_in(self): ...
    def clock_out(self): ...
</code></pre>

<h2>Follow PEP8 Guidelines</h2>

<p><a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">PEP8</a> gives guidelines that every python program should follow. Specifically in your case, function names need to begin with a lowercase character.</p>

<h2>StringVar is unnecessary overhead</h2>

<p>In most cases, using <code>StringVar</code> adds overhead with no real value. While this is more of a personal preference, I see no reason to use it. <code>StringVar</code> objects are good if you want the exact same value displayed in two or more widgets, or if you're wanting to trace changes. Otherwise they are superfluous. </p>

<p>Instead of <code>self.timestr</code>, you can directly alter the widget value. So, instead of saving a reference to the <code>StringVar</code>, save a reference to the widget:</p>

<pre><code>def makeWidgets(self): 
    ...                        
    self.time_label = Label(self, textvariable=self.timestr)
    ...  

def _setTime(self, elap):
    ...           
    self.time_label.configure(text='%02d:%02d:%02d' % (minutes, seconds, hseconds))
    ...
</code></pre>

<h2>Be consistent with private methods</h2>

<p>By convention, private methods (methods that are only used internally) are named with a leading underscore. You do this with <code>_update</code> and <code>_setTime</code>, but you didn't do it with <code>makeWidgets</code>. You should try to be consistent: if a function is only used internally, name it with a leading underscore. </p>

<h2>Don't hard-code the filename</h2>

<p>Your program would be a bit more portable if you didn't hard-code the filename. Right now you have the filename hard-coded in the <code>clock_in</code> and <code>clock_out</code> functions. </p>

<p>Instead, make it a parameter when you instantiate the class, or make it global.</p>

<p>For example:</p>

<pre><code>def clock_in(self):
    ...
    with open(self.filename, "a") as savedb:
    ...

def clock_out(self):
    ...
    with open(self.filename, "a") as savedb:
    ...
sw = StopWatch(root, filename=r"C:\Users\Desktop\ClockIn.csv")
</code></pre>

<h2>Separate widget creation from widget layout</h2>

<p>In my experience, separating widget creation makes the code easier to visualize and easier to maintain. </p>

<p>Instead of this:</p>

<pre><code>Button(root, text='Clock In', command=lambda :[sw.Start(), sw.clock_in()]).pack(side=LEFT)
Button(root, text='Clock Out', command=lambda :[sw.Start(), sw.clock_out()]).pack(side=LEFT)
Button(root, text='Reset', command=sw.Reset).pack(side=LEFT)
Button(root, text='Quit', command=root.quit).pack(side=LEFT)
</code></pre>

<p>... do this:</p>

<pre><code>clock_in_button = Button(...)
clock_out_button = Button(...)
reset_button = Button(...)
quit_button = Button(...)

clock_in_button.pack(side=LEFT)
clock_out_button.pack(side=LEFT)
reset_button.pack(side=LEFT)
quit_button.pack(side=LEFT)
</code></pre>

<p>This makes it much more clear to see at a glance that all for buttons are aligned to the left. When it's all blocked together it's much harder to see.</p>

<h2>Incorrect use of tkinter</h2>

<p>You're importing tkinter with <code>import tkinter as tk</code> but then trying to use tk classes without the <code>tk.</code> prefix.</p>

<p>The import is good, but you need to fix all of the code that is creating widgets. For example, <code>tk.Button(...)</code> instead of just <span class="math-container">`</span>Button(...).</p>
    </div>