<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First of all, let the code speak! Don't unnecessarily add comments unless they are explaining a really complicated piece of code.</p>

<h2>Basic definitions:</h2>

<p>A magic number is defined to be:</p>

<blockquote>
  <p>Unique values with unexplained meaning or multiple occurrences which could (preferably) be replaced with named constants</p>
</blockquote>

<p>Can you find the magic numbers in your code?<br>
Yes that's right, the culprits are <code>11</code> and <code>4</code>.</p>

<p>Let's just define variables for those!</p>

<pre><code>ROWS = 11
COLS = 11
GRID_ROWS = 4
GRID_COLS = 4
</code></pre>

<p>Next, let's replace every magic number with the appropriate variable!</p>

<h1>Making the code shorter!</h1>

<h2>Function <code>board_printer</code></h2>

<p>Why use <code>enumerate</code>? Why make everything a <code>str</code>?</p>

<p>Your whole function can just be rewritten as the following:</p>

<pre class="lang-py prettyprint-override"><code>def board_printer(board):
    """Prints the sudoku board"""

    for row in board:
        print(*row)
</code></pre>

<h2>Function <code>board_filler</code></h2>

<p>You don't need to use <code>for x in enumerate(board)</code> at all!<br>
Just use <code>for x in range(ROWS)</code> and change every instance of <code>x[0]</code> to <code>x</code> accordingly</p>

<hr>

<p>Instead of </p>

<pre><code>if ((x[0] + 1) % GRID_ROWS) == 0:
    for y in range(11):
        board[x].append("-")
</code></pre>

<p>Use</p>

<pre><code>if ((x[0] + 1) % GRID_ROWS) == 0:
    board[x] = ["-"] * COLS
</code></pre>

<hr>

<p>Use formatting!  </p>

<p>for taking input of number, use <code>number = input("Please enter a number for the square in row {xRead} and in column {yRead} (hit enter for no number): ")</code> instead of using <code>%s</code></p>

<hr>

<p>Why use a dummy variable <code>z</code>?</p>

<p>Just do:</p>

<pre class="lang-py prettyprint-override"><code>while True:
    number = input("Please enter a number for the square in column {x[0] + 1} and in row {y + 1} (hit enter for no number): ")

    try:
        number = int(number)

        if number &gt; 9 or number &lt; 1:
            raise ValueError
        else:
            board[x].append(number)

        break

    except (TypeError, ValueError):
        if not number:
            board[x].append(" ")
        else:
            print("Please enter an integer between 1 and 9")
</code></pre>

<p>Essentially, it tries to take an input, check if the value is an <strong><em>integer between 1 and 9</em></strong>, else raises an exception. If the number was indeed valid, it makes it to the end of the <code>try</code> statement, which causes the loop to break</p>

<h2>Misc</h2>

<ul>
<li><p>Run <code>board_printer(board_filler())</code> inside <code>if __name__ == __main__:</code>. This causes <code>board_printer(board_filler())</code> not to run if it was imported from another module.</p></li>
<li><p>Try using <code>list(map(int, input(f'Enter {COLS - (COLS // GRID_COLS)} space separated integers: ').split()))</code> for each row. It is tiring to fill every single cell by hand! So ask input for a whole row. It's your personal preference though!</p></li>
</ul>

<p>Hope this helps!</p>

<h1>EDIT:</h1>

<p><strong>This part is to solely dedicated to removing <code>xRead</code> and <code>yRead</code> and is not related to the above improvements</strong></p>

<p>First we have to change<br>
<code>ROWS = COLS = 11</code> to <code>ROWS = COLS = 9</code> and
<code>GRID_ROWS = GRID_COLS = 4</code> to <code>GRID_ROWS = GRID_COLS = 3</code></p>

<p><strong>Do not</strong> append <code>-</code> or <code>|</code> to board at all!</p>

<p>Just remove all statements that append <code>-</code> or <code>|</code> and also remove <code>xRead</code> and <code>yRead</code>. Now, the board would look like a sudoku board without <code>-</code> or <code>|</code></p>

<hr>

<p>In the <code>board_filler</code> use</p>

<pre><code>def board_printer(board):
    """Prints the sudoku board"""

    for row in range(ROWS):
        s = ''

        for col in range(COLS):
            s += str(board[row][col]) + ' '

            if not (col + 1) % GRID_COLS:
                s += '| '

        print(s)

        if not (row + 1) % GRID_ROWS:
            print('-' * len(s))
</code></pre>

<p>This will print <code>-</code> or <code>|</code> according to the row or column!</p>

<hr>

<h1>Final code including all above mentioned improvements</h1>

<pre><code>
ROWS = COLS = 9
GRID_ROWS = GRID_COLS = 3

def board_filler():
    """Creates the sudoku board from user input"""

    board = [[] for _ in range(ROWS)]

    for x in range(ROWS):
        for y in range(COLS):
            while True:
                number = input(f"Please enter an integer for the square in column {x + 1} and in row {y + 1} (hit enter for no number): ")

                try:
                    number = int(number)

                    if number &gt; 9 or number &lt; 1:
                        raise ValueError
                    else:
                        board[x].append(number)

                    break

                except (TypeError, ValueError):
                    if not number:
                        board[x].append(" ")
                    else:
                        print("Please enter an integer between 1 and 9")

    return board

def board_printer(board):
    """Prints the sudoku board"""

    print()

    for row in range(ROWS):
        s = ''

        for col in range(COLS):
            s += str(board[row][col]) + ' '

            if not (col + 1) % GRID_COLS:
                s += '| '

        s = s[:-1] # Removes trailing space

        print(s)

        if not (row + 1) % GRID_ROWS:
            print('-' * len(s))

if __name__ == '__main__':
    board_printer(board_filler())
</code></pre>

<p><strong>NOTE:</strong> <code>board_filler</code> doesn't look as bloated either! The code kills 2 birds with one stone!</p>
    </div>