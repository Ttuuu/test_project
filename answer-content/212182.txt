<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>The Real Used Range (not UsedRange)</h1>

<h2>Using the Find Method</h2>

<p>I've recently written this function:</p>

<pre><code>'*******************************************************************************
' Purpose:    Returns the used range of a worksheet.
' Returns:    Range Object.
'*******************************************************************************
Function URng(Optional NotActiveSheet As Worksheet) As Range
  Dim objWs As Worksheet
  If Not NotActiveSheet Is Nothing Then
    Set objWs = NotActiveSheet
  Else: Set objWs = ActiveSheet: End If
  If Not objWs Is Nothing Then
    With objWs
      If Not .Cells.Find("*", .Cells(.Rows.count, .Columns.count), -4123, , 1) _
          Is Nothing Then Set URng = .Range(.Cells(.Cells.Find("*", _
          .Cells(.Rows.count, .Columns.count)).Row, .Cells.Find("*", _
          .Cells(.Rows.count, .Columns.count), , , 2).Column), .Cells(.Cells _
          .Find("*", , , , 1, 2).Row, .Cells.Find("*", , , , 2, 2).Column))
    End With
    Set objWs = Nothing
  End If
End Function
'*******************************************************************************
' Remarks:    To remove any confusion about the search, consider a worksheet   *
'             containing only 3 rows and 3 columns. Then the search order      *
'             would be:                                                        *
'             ------------------------------------------------------------------
'             |  Type               |  Start   |  Search Order                 |
'             |----------------------------------------------------------------|
'             |  First Used Row     |    C3    |  A1,B1,C1,A2,B2,C2,A3,B3,C3.  |
'             |  First Used Column  |    C3    |  A1,A2,A3,B1,B2,B3,C1,C2,C3.  |
'             |  Last Used Row      |    A1    |  C3,B3,A3,C2,B2,A2,C1,B1,A1.  |
'             |  Last Used Column   |    A1    |  C3,C2,C1,B3,B2,B1,A3,A2,A1.  |
'*******************************************************************************
</code></pre>

<p>where you might find the following part to your interest:</p>

<pre><code>With objWs
    If Not .Cells.Find("*", .Cells(.Rows.count, .Columns.count), -4123, , 1) _
            Is Nothing Then Set URng = .Range(.Cells(.Cells.Find("*", _
            .Cells(.Rows.count, .Columns.count)).Row, .Cells.Find("*", _
            .Cells(.Rows.count, .Columns.count), , , 2).Column), .Cells(.Cells _
            .Find("*", , , , 1, 2).Row, .Cells.Find("*", , , , 2, 2).Column))
End With
</code></pre>

<p>or in a Sub</p>

<pre><code>Sub RealUsedRange()

    Const cSheet As Variant = "Sheet1"  ' Worksheet Name/Index

    Dim URng As Range   ' Real Used Range

    With ThisWorkbook.Worksheets(cSheet)
        If Not .Cells.Find("*", .Cells(.Rows.Count, .Columns.Count), -4123, , _
                1) Is Nothing Then Set URng = .Range(.Cells(.Cells.Find("*", _
                .Cells(.Rows.Count, .Columns.Count)).Row, .Cells.Find("*", _
                .Cells(.Rows.Count, .Columns.Count), , , 2).Column), _
                .Cells(.Cells.Find("*", , , , 1, 2).Row, .Cells _
                .Find("*", , , , 2, 2).Column))
    End With

    If Not URng Is Nothing Then
        Debug.Print "The Real Used Range address is [" &amp; URng.Address &amp; "]"
      Else
        MsgBox "Worksheet '" &amp; cSheet &amp; "' is empty."
    End If

End Sub
</code></pre>

<p><a href="https://stackoverflow.com/questions/53727142/how-to-find-the-first-and-last-populated-cell-in-a-range-with-whitespace/53733361#53733361">Other 'fractions' of the Real Used Range using the Find Method.</a></p>

<p>By the way, as the UsedRange property has failed you so will the SpecialCells method rather sooner than later since they are somehow connected. See <a href="https://stackoverflow.com/questions/53078262/how-to-select-a-cell-after-a-block-of-non-contiguous-data/53079722#53079722">example</a>.</p>

<h2>The Find Method's 6(9) Arguments</h2>

<p><a href="https://docs.microsoft.com/en-us/office/vba/api/excel.range.find" rel="nofollow noreferrer">Microsoft</a> (VBA Help)</p>

<p><strong>Syntax</strong>: <em>expression</em>. <strong>Find</strong>(<em>What</em>, <strong><em>After</em></strong>, <strong><em>LookIn</em></strong>, <strong><em>LookAt</em></strong>, <strong><em>SearchOrder</em></strong>, <strong><em>SearchDirection</em></strong>, <em>MatchCase</em>, <em>MatchByte</em>, <em>SearchFormat</em>)</p>

<p>Expression is a range object, in our case it will be <code>.Cells</code> which refers to all cells in the worksheet.</p>

<p>The Find method has 9 arguments:</p>

<ol>
<li>What</li>
</ol>

<blockquote>
  <ol start="2">
  <li>After</li>
  <li>LookIn</li>
  <li>LookAt</li>
  <li>SearchOrder</li>
  <li>SearchDirection</li>
  </ol>
</blockquote>

<ol start="7">
<li>MatchCase</li>
<li>MatchByte</li>
<li>SearchFormat</li>
</ol>

<p>You can use them in <code>Argument:Parameter</code> style or enter them by adding their parameters in the exact order (separated by commas) which will be used here.</p>

<p>The <strong>What</strong> argument is understandable by itself: search for anything "*". The <strong>MatchCase</strong> argument is by <em>default</em> <code>False</code> (Caution: it is <strong>not</strong> by <em>default</em> <code>False</code> for the <code>Replace</code> method though). The arguments <strong>MatchByte</strong> and <strong>SearchFormat</strong> are beyond the scope of this case and will not be further investigated, which leaves us with arguments number <strong>2</strong> to <strong>6</strong>.</p>

<p><strong>2. After</strong> has to be a one-cell range contained in <em>expression</em> (Initial Search Range). Note that this cell will be searched last, so if you use <code>.Cells(1, 1)</code> or <code>.Cells(1)</code> the search will start with the next cell e.g. <code>.Cells(1, 2)</code>, <code>.Cells(2, 1)</code>... or <code>.Cells(2)</code>, or the previous cell e.g. <code>.Cells(1,.Columns.Count)</code>, <code>.Cells(.Rows.Count,1)</code> or <code>.Cells(.Cells.Count)</code> depending on the <code>SearchOrder</code> and <code>SearchDirection</code> parameters. The <em>default</em> value is <code>.Cells(1, 1)</code> or <code>.Cells(1)</code>, which can be omitted when used. </p>

<p>To calculate the <strong>Last Used Row</strong>, <strong>Last Used Column</strong> or <strong>Last Used Cell</strong> this parameter will be omitted (<code>.Cells(1)</code>) because we want to start searching from the last cell going <strong>up</strong> or to the <strong>left</strong>.<br>
To calculate the <strong>First Used Row</strong>, <strong>First Used Column</strong> or <strong>First Used Cell</strong> this parameter will be <code>.Cells(.Rows.Count, .Columns.Count)</code> or <code>.Cells(.Cells.Count)</code> because we want to start searching from the first cell going <strong>down</strong> or to the <strong>right</strong>.</p>

<p><strong>3. LookIn</strong> can be one of the following <code>XLLookIn</code> constants:<br>
 - <code>xlValues</code> or <code>-4163</code> will find any cell with a value except a cell containing a formula that evaluates to <strong>""</strong>.<br>
 - <code>xlFormulas</code> or <code>-4123</code> will find any cells with a value including cells containing a formula that evalutates to <strong>""</strong>. This parameter will be used because we cannot ignore cells containing a formula that evaluates to <strong>""</strong>.<br>
 - <code>xlComments</code> or <code>-4144</code> will find any cell containing a comment (not used in this case).</p>

<p><strong>4. LookAt</strong> can be one of the following <code>XLLookAt</code> constants:  </p>

<ul>
<li><p><code>xlWhole</code> or <code>1</code> searches for whole strings only i.e. to find a cell
containing e.g. <strong>Word</strong>, it will find a cell containing <strong>Word</strong>, but will <strong>not</strong> find a cell containing <strong>WordId</strong>.</p></li>
<li><p><code>xlPart</code> or <code>2</code> searches for parts of the string i.e. to find a cell
containing e.g. <strong>Word</strong> it will find cells containing <strong>both</strong>, <strong>Word</strong> or <strong>WordId</strong>.</p></li>
</ul>

<p>From everything I've read it is unclear using which parameter would make our search faster so it will be omitted in our case. Should be further investigated.</p>

<p><strong>5. SearchOrder</strong> can be one of the following <code>XLSearchOrder</code> constants:  </p>

<ul>
<li><p><code>xlByRows</code> or <code>1</code> will perform the search by rows e.g. in a <code>Next</code>
search from the last cell it will search in <strong><code>A1, B1, C1...A2, B2, C2...(.Rows.Count, .Columns.Count)</code></strong>.</p></li>
<li><p><code>xlByColumns</code> or <code>2</code> will perform the search by columns e.g. in a
<code>Next</code> search from the last cell it will search in <strong><code>A1, A2, A3...B1, B2, B3...(.Rows.Count, .Columns.Count)</code></strong>.</p></li>
</ul>

<p><strong>6. SearchDirection</strong> can be one of the following <code>XLSearchDirection</code> constants:  </p>

<ul>
<li><p><code>xlNext</code> or <code>1</code> (<em>Default</em>) in a 'by columns' search (<code>xlByColumns</code>) with <code>After:="A5"</code> will search in <code>A6, A7, A8...</code></p></li>
<li><p><code>xlPrevious</code> or <code>2</code> in a 'by columns' search (<code>xlByColumns</code>) with <code>After:="A5"</code> will search in <code>A4, A3, A2...</code></p></li>
</ul>

<hr>

<p><strong>VBA Remarks</strong></p>

<blockquote>
  <p>The settings for <strong>LookIn</strong>, <strong>LookAt</strong>, <strong>SearchOrder</strong>, and
  MatchByte are saved each time you use this method. If you donâ€™t
  specify values for these arguments the next time you call the method,
  the saved values are used. Setting these arguments changes the
  settings in the Find dialog box, and changing the settings in the Find
  dialog box changes the saved values that are used if you omit the
  arguments. To avoid problems, set these arguments explicitly each time
  you use this method.</p>
</blockquote>

<p><strong>Note</strong></p>

<p>There is the <strong>What</strong> argument, there are 2 arguments (<strong>After, SearchDirection</strong>) with possible default values and 3 arguments (<strong>LookIn, LookAt, SearchOrder</strong>) that are saved each time.</p>

<h2>Dissecting the Real Used Range Expression</h2>

<pre><code>If Not .Cells.Find("*", .Cells(.Rows.Count, .Columns.Count), -4123, , _
                1) Is Nothing Then Set URng = .Range(.Cells(.Cells.Find("*", _
                .Cells(.Rows.Count, .Columns.Count)).Row, .Cells.Find("*", _
                .Cells(.Rows.Count, .Columns.Count), , , 2).Column), _
                .Cells(.Cells.Find("*", , , , 1, 2).Row, .Cells _
                .Find("*", , , , 2, 2).Column))
</code></pre>

<p>to be continued... </p>
    </div>