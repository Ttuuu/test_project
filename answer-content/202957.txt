<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Style</h2>
<p>Some style points...</p>
<h3>JavaScript style conventions.</h3>
<ul>
<li>Block delimiters on the same line  eg <code>if (foo) {</code> and <code>} else {</code></li>
<li><code>camelCase</code> for variables not <code>snake_case</code></li>
<li>Add spaces between <code>if</code> and <code>(</code> eg <code>if (</code> not <code>if(</code> same for <code>for</code>, <code>else</code>, <code>while</code>, <code>do</code>, <code>switch</code>, <code>return</code>, etc should all have a white space separating them.</li>
<li>Hoist <code>var</code> declarations to the top of the function</li>
</ul>
<h3>Code quality styles</h3>
<ul>
<li>Use <code>;</code> at the end of every line, the exception is if you can list every instance where not including it will cause problems. Most that can do this will end up using <code>;</code></li>
<li>Use <code>const</code> for variables that do not change</li>
<li>Don't add single use variables unless it improves readability. eg You have something like var <code>id = "foo"</code> then <code>var frame = $(id)</code>. Would be better as <code>const frame = $("foo");</code></li>
<li>Don't add unneeded code. You have similar to <code>if (a === b) { } else if (a &lt; b) {  } else if (a &gt; b) { }</code> the last if statement is redundant as the execution will only get to that point if a &gt; b</li>
<li>Don't add variable you don't use. EG you declare <code>frame_width</code> and <code>frame_height</code> but don't use them.</li>
<li>Learn to use <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Conditional_Operator" rel="nofollow noreferrer">ternaries</a> as they help reduce the overall source code size and let you use <code>const</code> in rather than <code>var</code> or <code>let</code> when setting values depending on statements.</li>
</ul>
<p>Aim to reduce the over all code size as it will reduce the chance of bugs and increase the readability of the whole project source.</p>
<h3>Rewrites</h3>
<p>Rewriting you code to have identical functionality.</p>
<pre><code>function fixFrame(frameId) {
    const frame = $(`#${frameId}`);
    const frameRatio = frameId === "media_image_frame" ? frame[0].naturalHeight / frame[0].naturalWidth : 0.5625;
    const parent = frame.parent()
    const parentHeight = parent.height();
    const parentWidth = parent.width();
    const parentRatio = parentHeight / parentWidth;
    frame.width(parentRatio &lt; frameRatio ? parentHeight / frameRatio : parentWidth);
    frame.height(parentRatio &gt; frameRatio ? parentWidth * frameRatio : parentHeight);
}
</code></pre>
<p>Or I would write it using the function context to reduce source code complexity via implied aberrations</p>
<pre><code>function fixFrame(id) {
    const frame = $(`#${id}`);
    const fRatio = id === "media_image_frame" ? 
        frame[0].naturalHeight / frame[0].naturalWidth : 
        0.5625;
    const parent = frame.parent()
    const pH = parent.height(), pW = parent.width(), pRatio = pH / pW;
    frame.width(pRatio &lt; fRatio ? pH / fRatio : pW);
    frame.height(pRatio &gt; fRatio ? pW * fRatio : pH);
}
</code></pre>
<p>Using abbreviations as the context of the function provides the information to know what <code>pH</code>, <code>pW</code> and <code>pRatio</code> and <code>fRatio</code> mean.</p>
<p>The declaration of <code>fRatio</code> is too long so I made it multi line. Note I had the <code>?</code> and <code>:</code> at the line ends.</p>
    </div>