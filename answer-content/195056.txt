<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Really interesting interview assignment, I may give it a go myself!  </p>

<p>The first thing that jumps out at me is the organization of the code.  Instead of a file named <code>functions.js</code>, I would be more specific and break it up even further if need be...(<code>addressController.js</code>, <code>transactionController.js</code>, etc.)  The model-view-controller (<strong>MVC</strong>) pattern will really serve you well as your app hypothetically begins to scale.</p>

<p>As far as the way you handle the actual data, I suggest you think about your data and try to narrow in on the fundamental data types or entities that you are working with and how they should/could be modeled.  For example, inside a <code>models</code> directory, you could have things like <code>User.js</code>, <code>Transaction.js</code> model files, in which you would define your model <strong>schemas</strong> (the properties of your data objects).  Using an <strong>ORM</strong> makes this much easier, for PostgreSQL I reccommend <a href="http://docs.sequelizejs.com/" rel="nofollow noreferrer">sequelize</a>.  Moreover, a database visualizer desktop app like <a href="https://eggerapps.at/postico/" rel="nofollow noreferrer">Postico</a> will be very helpful when working with your stored data.</p>

<p>Finally, it's cool that you are using <code>async</code> with <code>await</code>, but I personally think using Promsies (or even the <a href="http://caolan.github.io/async/" rel="nofollow noreferrer"><code>Async</code></a> library) would be cleaner in this case, since it looks like you are working with many different async operations.  Promises can be <em>chained</em>, and<code>async.parrallel</code> or <code>async.waterfall</code> are elegant ways to perform multiple related asynchronous operations.  </p>

<p>Also, for your <code>module.exports</code> you can use <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment" rel="nofollow noreferrer">destructuring assignment</a> and can be written like so:</p>

<pre><code>module.exports = {
  addAddress,
  deleteAddress,
  getBalance,
  getTransactions,
}
</code></pre>

<p>Finally, I suggest you reconsider your use of <code>var</code> throughout your code, I would only use it if necessary and try to be consistent with ES6 <code>let</code> and <code>const</code>.  These are the things that jump out at me immediately, overall though I think you did a great job!</p>
    </div>