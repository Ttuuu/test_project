<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Docstrings are not comments; they exist to help the caller properly use the method.</p>

<p>Consider:</p>

<pre class="lang-none prettyprint-override"><code>&gt;&gt;&gt; import math
&gt;&gt;&gt; help(math.log)
Help on built-in function log in module math:

log(...)
    log(x, [base=math.e])
    Return the logarithm of x to the given base.

    If the base not specified, returns the natural logarithm (base e) of x.

&gt;&gt;&gt; 
</code></pre>

<p>This tells me how to use the function.  The method used to calculate the logarithm is unimportant.  It could be using a Taylor-series expansion; dunno, don't care, and it didn't tell me.</p>

<p>Now consider:</p>

<pre class="lang-none prettyprint-override"><code>&gt;&gt;&gt; help(iterative_merge_sort)
Help on function iterative_merge_sort in module __main__:

iterative_merge_sort(input_list: List[~T]) -&gt; List[~T]
    Iterative Bottom Up Merge Sort
    -----------------------------------------------
    Merge Sort is a Divide and Conquer algorithm.
    It divides the input array in two halves,
    calls itself for the two halves and then merges the two sorted halves.
    The merge function is used for merging two halves.

    In this algorithm, we'd start from the smallest window size of 1
    and double up the window size in each level until we'd reach to the
    last level, which would be the size of input list.

    Attributes:
    - Time Complexity: O(N*Log N)
        - In each level, there are O(N) comparisons
        - There are O(Log N) levels
    - Space Complexity: O(N) it is not an in-place sort
    - Stable Sort

&gt;&gt;&gt; 
</code></pre>

<p>Which parts of that help description are "helpful" to someone who wants to use this code?</p>

<ul>
<li><code>Iterative Bottom Up Merge Sort</code>?  Nope - implementation detail.</li>
<li><code>Merge Sort is a Divide and Conquer algorithm ... used for merging two halves.</code>?  Nope - implementation details.</li>
<li><code>In this algorithm ... the size of the input list</code>? Nope.  Implementation details.</li>
<li><code>Time Complexity: O(N*Log N)</code>?  <strong>YES</strong>

<ul>
<li><code>In each level, there are O(N) comparisons</code>?  Nope.  Implementation detail.</li>
<li><code>There are O(Log N) levels</code>? Nope. Implementation detail.</li>
</ul></li>
<li><code>Space Complexity: O(N) it is not an in-place sort</code>?  <strong>YES</strong></li>
<li><code>Stable Sort</code>?  <strong>YES</strong></li>
</ul>

<p>Unanswered questions:</p>

<ul>
<li>Is the sorted list in ascending or descending order?</li>
<li>Which comparison operation(s) must be defined on the elements?</li>
</ul>

<p>Docstring should be used to describe to the user how to use the method, any requirements or preconditions, and perhaps things like what time/space resources are required.  Ie)</p>

<pre><code>def iterative_merge_sort(input_list: List[T]) -&gt; List[T]:
    """
    Returns a new list of elements in ascending order; the input list is not modified.

    The list elements must implement the `&lt;=` operator (`__le__`).  The sort is stable;
    the order of elements which compare as equal will be unchanged.

    Complexity:  Time: O(N*Log N)   Space: O(N)
    """
</code></pre>

<p>Implementation details, (which would be important for someone who is reviewing, maintaining or modifying the code) should be left as comments.</p>

<hr>

<p>See <a href="http://www.sphinx-doc.org/en/master/" rel="nofollow noreferrer">sphinx-doc.org</a> for one utility which can extract <code>"""docstrings"""</code> to build documentation in HTML/PDF/HLP/... formats.</p>
    </div>