<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Use a vector math library</h1>

<p>Find a suitable library that implements coordinate vectors, so you don't have to implement them as arrays of doubles. Ideally your <code>struct Particle</code> should look like:</p>

<pre><code>struct Particle {
    double m;   // mass
    vec3 x;     // position
    vec3 v;     // velocity
    vec3 F;     // force
    vec3 F_old; // force past time step
};
</code></pre>

<p>And a suitable library will provide functions and operator overloads to make working with these types very easy. You should be able to write something like:</p>

<pre><code>void Nbody::update_position(Particle *p) {
    double a = dt * 0.5 / p-&gt;m;
    p-&gt;x += dt * (p-&gt;v + a * p-&gt;F);
    p-&gt;F_old = p-&gt;F;
}
</code></pre>

<p>There are many libraries available. I am partial to GLM myself. For a discussion of possible libraries, see <a href="https://stackoverflow.com/questions/1380371/what-are-the-most-widely-used-c-vector-matrix-math-linear-algebra-libraries-a">https://stackoverflow.com/questions/1380371/what-are-the-most-widely-used-c-vector-matrix-math-linear-algebra-libraries-a</a>.</p>

<h1>Make function manipulating <code>Particle</code>s member functions of <code>Particle</code></h1>

<p>You have a lot of functions that mainly manipulate a particle's state, but they are not part of <code>struct Particle</code> itself. For example, <code>update_position()</code> is something that apart from the timestep <code>dt</code> only manipulates a <code>Particle</code>'s member variables. If you make it a member function of <code>Particle</code>, it becomes a much cleaner looking function:</p>

<pre><code>struct Particle {
    ...
    void update_position(double dt);
};

void Particle::update_position(double dt) {
    double a = dt * 0.5 / m;
    x += dt * (v + a * F);
    F_old = F;
}
</code></pre>

<p>And you call it like so:</p>

<pre><code>void Nbody::comp_position() {
    for (auto &amp;p: particles) {
        p.update_position(dt);
    }
}
</code></pre>

<p>You can do the same for <code>update_velocity()</code>, and even <code>force()</code>.</p>
    </div>