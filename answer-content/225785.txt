<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><strong>Docstrings</strong>: You should include a <a href="https://www.python.org/dev/peps/pep-0008/#documentation-strings" rel="nofollow noreferrer"><code>docstring</code></a> at the beginning of every method, class, and module you write. This will allow documentation to identify what your program is supposed to do.</li>
<li><strong>Constants Naming</strong>: Any constants that you have in your program (eg. <code>cube</code>) should be in UPPERCASE, like so: <code>CUBE</code>.</li>
<li><strong>Main Guard</strong>: Any code that isn't inside a method/class should be inside an <code>if __name__ == '__main__'</code> guard. This will prevent this code from being executed if you decide to import this module from other programs. <a href="https://stackoverflow.com/a/419185/8968906">This StackOverflow answer</a> provides more insight and explanation.</li>
<li><strong>Unnecessary if/else with returns</strong>: It is unnecessary to have an <code>else</code> after an <code>if</code>, if you return something in the <code>if</code>. Simply put the <code>else</code> return statement outside the <code>if</code> statement. This return will be run if the <code>if</code> evaluates to be <code>False</code>, which removes the necessity for the <code>else</code> statement.</li>
<li><strong>Reserved Names</strong>: You shouldn't use reserved names for variable names, such as <code>iter</code> and <code>slice</code>, to avoid confusion.</li>
<li><strong>Variable/Parameter Naming</strong>: You have a parameter named <code>iter</code> which you use as the number of times you iterate over the cube. It took a bit to identify this, as I see <code>iter</code> as an <em>iterator</em>, not the number of times you iterate. Renaming it  <code>iterations</code> makes it clearer about what that parameter is supposed to be.</li>
</ul>

<p><strong><em>Updated Code</em></strong></p>

<pre><code>"""
Module Docstring
A description of your program goes here
"""

def updated_trajectory_component(row):
    """
    Updated the trajectory component of the passed row

    :param row: Row to be updated

    """
    num = 1
    return row[0] + sum([num / i for i in row[1:]])

def updated_distance_component(row):
    """
    Updated the distance component of the passed row

    :param row: Row to be updated

    """
    return [i - row[0] for i in row[1:]]


def iterate_row(row):
    """
    Iterates over the passed row

    :param row: Row to be iterated

    """
    dist = updated_distance_component(row)
    return [updated_trajectory_component(row)] + dist


def iterate_slice(_slice):
    """
    Iterates over the rows in the passed slice

    :param _slice: Slice to be iterated over

    """
    return [iterate_row(i) for i in _slice]


def iterate_cube(cube):
    """
    Iterates over the slices in the passed cube

    :param cube: Cube to be iterated over

    """
    return [iterate_slice(i) for i in cube]

def num_iterator(cube, iterations):
    """
    Recursive iterator, iterates over the cube `iterations` times

    :param cube: Cube to iterate
    :param iterations: Number of times to iterate
    """
    print(cube)
    if iterations == 1:
        return iterate_cube(cube)
    return num_iterator(iterate_cube(cube), iterations - 1)


if __name__ == '__main__':
    CUBE = [
        [
            [0, 0.1, 1],
            [0, 1, 0.1],
            [0, 1, 1]
        ],
        [
            [0, 0.1, 1],
            [0, -1, 1],
            [0, -1, 0.1]
        ],
        [
            [0, -1, -1],
            [0, 0.1, -1],
            [0, -1, 0.1]
        ]
    ]

    #Sample Cases
    num_iterator(CUBE, 5)
    num_iterator(CUBE, 2)
    num_iterator(CUBE, 7)
    num_iterator(CUBE, 4)
</code></pre>
    </div>