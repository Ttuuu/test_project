<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I have figured out a simpler way to do the second question, building the Linked List by iterating backwards from the generated paths.</p>
<pre><code>    static class DirEnumerator {

        private Path dirPath;
        private DirEntry first = null;

        // ...

        public int scan() {
            try (Stream&lt;Path&gt; paths = Files.walk(dirPath)) {
                List&lt;Path&gt; linkedDirs = paths.filter(Files::isSymbolicLink).map(p -&gt; {
                    try {
                        return Files.readSymbolicLink(p);
                    } catch (IOException e) {
                        return p;
                    }
                }).collect(Collectors.toList());
                this.first = null;
                int i = linkedDirs.size();
                while (i-- &gt; 0) {
                    this.first = new DirEntry(linkedDirs.get(i), first);
                }
                return linkedDirs.size();
            } catch (IOException e) {
                this.first = null;
                return 0;
            }
        }

        // ...
    }

    static class DirEntry {
        private Path path;
        private DirEntry next;

        public DirEntry(Path path, DirEntry next) {
            this.path = path;
            this.next = next;
        }

       // ...
    }
<span class="math-container">```</span>
</code></pre>
    </div>