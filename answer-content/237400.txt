<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your function code can be simplified to one line.</p>

<pre><code>from itertools import combinations
from typing import List

def array_sum(inputs: List[int], tests: List[int]) -&gt; bool:
    """
    Determines if any two integers in `inputs` 
    add up to any integer in `tests`.

    :param List[int] inputs: Input data
    :param List[int] tests: Numbers to test against input data

    :return bool: True if combination is found, False otherwise
    """
    return any(sum(pair) in set(tests) for pair in combinations(inputs, 2))
</code></pre>

<p>This uses docstrings to document what the function does, and what types the function accepts and returns.</p>

<p>The main meat of the function occurs in one line. <a href="https://docs.python.org/3/library/functions.html#any" rel="noreferrer"><code>any()</code></a> returns <code>True</code> if any element in the given iterable is <code>True</code>. Converting <code>tests</code> to a <a href="https://docs.python.org/3/tutorial/datastructures.html#sets" rel="noreferrer"><code>set</code></a> removes any duplicate values, possibly reducing the number of iterations. The <a href="https://docs.python.org/2/library/itertools.html#itertools.combinations" rel="noreferrer"><code>combinations</code></a> returns subsequences of the iterable. Because you want two numbers to add up to one number in the test set, the value <code>2</code> is passed to the function.</p>
    </div>