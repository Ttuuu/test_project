<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1><a href="https://stackoverflow.com/a/384067/8339141">Program to Interfaces, not Implementations</a></h1>

<p>The code base heavily depends on <code>ArrayList</code>. For example in <code>Reading</code> </p>

<blockquote>
  <pre class="lang-java prettyprint-override"><code>ArrayList&lt;Node&gt; readDocument(String document) throws XMLStreamException {
   // ..
   ArrayList&lt;Node&gt; nodes = new ArrayList&lt;&gt;()
   // ..
       ArrayList&lt;Node&gt; nodeAddition = getActiveNode(nodes, indentation)
}

private static ArrayList&lt;Node&gt; getActiveNode(ArrayList&lt;Node&gt; nodes, int indentation) { /* .. */ }
</code></pre>
</blockquote>

<p>The only methods that are used on that instances of <code>ArrayList</code> are <code>add</code>, <code>get</code> and <code>size</code>.</p>

<blockquote>
  <pre class="lang-java prettyprint-override"><code>nodeAddition.add(node);
</code></pre>
  
  <pre class="lang-java prettyprint-override"><code>nodeAddition.get(nodeAddition.size() - 1)//..
</code></pre>
</blockquote>

<p>Since only methods get used that are defined on the interface <a href="https://docs.oracle.com/javase/8/docs/api/java/util/List.html" rel="nofollow noreferrer">List</a>, your code should rather depend on the interface than on the implementation:</p>

<pre class="lang-java prettyprint-override"><code>List&lt;Node&gt; readDocument(String document) throws XMLStreamException {
    // ..
    List&lt;Node&gt; nodes = new ArrayList&lt;&gt;()
    // ..
        List&lt;Node&gt; nodeAddition = getActiveNode(nodes, indentation)
}

private static List&lt;Node&gt; getActiveNode(List&lt;Node&gt; nodes, int indentation) { /* .. */ }
</code></pre>

<p>With <em>program to interfaces, not implementations</em> you do not limit your self to a concrete implementation, because now it would be easier to switch from an <code>ArrayList</code> to a <code>LinkedList</code> because of the use of the common interface.</p>

<hr>

<h1><a href="http://wiki.c2.com/?AccessorsAreEvil" rel="nofollow noreferrer">Accessors Are Evil</a></h1>

<blockquote>
  <p>Public accessors indicate that the data and the behavior of a class are not kept together.</p>
  
  <p>This is seen as a an indication of higher coupling and lower coherence. </p>
</blockquote>

<h3><a href="https://hackernoon.com/objects-vs-data-structures-e380b962c1d2" rel="nofollow noreferrer">Objects vs. Data Structures</a></h3>

<p>The "objects" <code>Value</code>, <code>CodeObject</code>, <code>ParserBooleanRule</code> and maybe more make have use of getters and setters. The are not objects in terms of oop - rather they are data structures. </p>

<p>In <code>Parser</code> inside the method <code>getType</code> is the following if-statement</p>

<blockquote>
  <pre class="lang-java prettyprint-override"><code>if (tempValue.equals(rule.get_true()) || tempValue.equals(rule.get_false())) {
   return Type.BOOLEAN;
}
</code></pre>
</blockquote>

<p>We can see that the <code>Parser</code> uses <code>rule</code> (<code>ParserBooleanRule</code>) as a data structure whilst it uses the methods <code>get_true</code> and <code>get_false</code> to look if a <code>value</code> is a boolean. Much better would be, when <code>ParserBooleanRule</code> knows if a <code>value</code> is a boolean:</p>

<pre class="lang-java prettyprint-override"><code>if (rule.fulfilledBy(value)) {
    return Type.BOOLEAN;
}
</code></pre>

<hr>

<h1><a href="http://wiki.c2.com/?DontUseExceptionsForFlowControl" rel="nofollow noreferrer">Don't Use Exceptions For Flow Control</a></h1>

<blockquote>
  <pre class="lang-java prettyprint-override"><code>if (_integerRule == ParserIntegerRule.Minimal) {
   try {
       //noinspection ResultOfMethodCallIgnored
       Byte.parseByte(value);
       return Type.INT8;
   } catch (NumberFormatException ignored) { }
}

if (_integerRule == ParserIntegerRule.Minimal) {
   try {
       //noinspection ResultOfMethodCallIgnored
       Short.parseShort(value);
       return Type.INT16;
   } catch (NumberFormatException ignored) { }
}

// ..
</code></pre>
</blockquote>

<p>At the first time I thought that the second if-statement will never be reached because it has the same condition as the first if-statement. Than I saw that you actually use an try-catch as condition.</p>

<p>Instead of you could check first if a value is a number trough a regex, count the number of figures and parse it to the data type you aspect..</p>

<hr>

<h1><a href="http://wiki.c2.com/?FeatureEnvySmell" rel="nofollow noreferrer">Feature Envy</a></h1>

<p>A classic [code] smell is a method that seems more interested in a class other than the one it is in. The most common focus of the envy is the data.</p>

<p>I already wrote that you have a lot of getter and setter methods witch makes it easy do access the data of an object. The <code>Parser</code> reads the data for many of your objects and do some logic on it - this is a Feature Envy. The object itself should do the operation and the <code>Parser</code> should only ask for it (<a href="https://martinfowler.com/bliki/TellDontAsk.html" rel="nofollow noreferrer">Tell don't ask</a>)</p>

<p>The following loop is inside <code>Parser</code> exist to manipulate a <code>CodeObject</code></p>

<blockquote>
  <pre class="lang-java prettyprint-override"><code>for (CodeObject object : objects) {
   CodeObject existingObject = objectWithName(result, object.get_name());
   if (existingObject == null) {
       existingObject = new CodeObject(object.get_name(), object.get_type());
       existingObject.set_from(object.get_from());
       existingObject.set_isArray((_allNodesAreArrays &amp;&amp; existingObject.get_from() == From.NODE) || object.is_isArray());
       existingObject.add_objects(reduceObjects(object.get_codeObjects()));
       result.add(existingObject);
   } else {
       existingObject.set_isArray(true);
       object.set_isArray(true);
       reduceObjects(existingObject, object);
   }
}
</code></pre>
</blockquote>

<p>The <code>Parser</code> should request the change by an <code>CodeObject</code> or in this case by an <code>CodeObjectFactory</code></p>

<p>When we look at the following method-names, we will see that they all include the class name on which they interact:</p>

<blockquote>
  <p><code>objectWithName</code>, <code>getMainObjects</code>, <code>reduceObjects</code>, <code>compareTypes</code> and <code>lowestCommonNumericType</code></p>
</blockquote>

<p>They should go into the classes envied by the <code>parser</code>.</p>
    </div>