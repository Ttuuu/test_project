<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First a review...</p>

<h1>Long extension chains</h1>

<p>With lengthy linq chains it's a good idea to break them into multiple lines. Especially here on CR so that we don't have to scroll horizontally.</p>

<h1>String interpolation</h1>

<blockquote>
<pre><code>string answer = pangramCheck ? "pangram" : "not pangram";
</code></pre>
</blockquote>

<p>We could <em>optimize</em> it as:</p>

<pre><code>var answer = $"{(pangramCheck ? string.Empty : "not ")}pangram";
</code></pre>

<p>or you can make it even prettier by encapsulating this logic in an extension:</p>

<pre><code>public static string Negate(this string value, bool negate)
{
    return $"{(negate ? string.Empty : "not ")}{value}";
}
</code></pre>

<p>so you then have:</p>

<pre><code>Console.WriteLine("pangram".Negate(isPangram));
</code></pre>

<h1>Consistency</h1>

<blockquote>
<pre><code>string text
string answer
</code></pre>
</blockquote>

<p>Don't you like <code>var</code> for strings because you already use for the other two variables? ;-)</p>

<h1>Magic numbers</h1>

<blockquote>
<pre><code>Enumerable.Range(97, 26)
</code></pre>
</blockquote>

<p>This would be easier to understand if you used constants:</p>

<pre><code>const string alphabetLength = z - a + 1;
Enumerable.Range('a', alphabetLength)
</code></pre>

<h1>Not LINQ</h1>

<blockquote>
<pre><code>.Replace(" ", "").ToLower()
</code></pre>
</blockquote>

<p>This two kill the linq idea of your question. Consider this instead:</p>

<pre><code>text
    .Select(char.ToLower)
    .Where(char.IsLetter)
</code></pre>

<hr>

<h1>Alternative solution</h1>

<p>Then an alternative version...</p>

<p>If using a <code>HashSet&lt;char&gt;</code> is still linq-ish enougth then I replaced the <code>Distinct</code> with the <code>Aggregate</code> that uses one and makes it na <em>O(n)</em> solution for the English aphabet:</p>

<pre><code>const int alphabetLength = 'z' - 'a' + 1;
var isPangram =
    text
    .Select(char.ToLower)
    .Where(char.IsLetter)
    .Aggregate(new HashSet&lt;char&gt;(), (acc, next) =&gt; { acc.Add(next); return acc; })
    .Count == alphabetLength;
</code></pre>

<hr>

<p><strong>UPDATE</strong></p>

<p>Well, I forgot that we don't have to scan the entire string. As soon as we have the required chars we can stop. So this improved version should be faster for long texts:</p>

<pre><code>const int alphabetLength = 'z' - 'a' + 1;
var chars = new HashSet&lt;char&gt;();

var testedChars = text
    .Select(char.ToLower)
    .Where(char.IsLetter)
    .TakeWhile(x =&gt; { chars.Add(x); return chars.Count != alphabetLength; })
    .Count();

var isPangram = chars.Count == alphabetLength;
</code></pre>
    </div>