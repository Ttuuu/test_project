<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'm sorry, but this code is <em>really</em> hard to read. I must admit I don't know Cython too well, so I won't be able to comment too much on that part. But anyways, here are a few comments, in random order.</p>

<ul>
<li><p>While <a href="https://cython.readthedocs.io/en/latest/src/userguide/special_methods.html#docstrings" rel="nofollow noreferrer">Cython does not fully support docstrings</a> (they do not show up in the interactive <code>help</code>), this should not prevent you from adding some to explain what the different functions do and what arguments they take.</p></li>
<li><p>You seem to be doing <code>np.int64(start).astype('M8[D]').astype('M8[M]').view("int64")</code> quite a lot. As far as I can tell, this extracts the month from a date, which was given as an integer(?). There is quite possibly a better way to do that (using the functions in <code>datetime</code>), but they might be slower. Nevertheless, you should put this into its own function.</p></li>
<li><p>You do <code>freq.decode("utf-8")[len(freq)-1]</code> twice. Do it once and save it to a variable. Also, <code>freq[len(freq)-1]</code> should be the same as <code>freq[-1]</code> and <code>freq[:len(freq)-1]</code> the same as <code>freq[:-1]</code>. This is especially costly <a href="https://cython.readthedocs.io/en/latest/src/tutorial/strings.html#general-notes-about-c-strings" rel="nofollow noreferrer">as <code>len(freq)</code> is <span class="math-container">\$\mathcal{O}(n)\$</span> for <code>char *, in Cython</code></a>.</p></li>
<li><p>You create <code>datetime.fromtimestamp(start*24*60*60)</code> three times, once each to get the day, month and year. Save it to a variable and reuse it.</p></li>
<li><p>The last two comments in <code>loanDates</code> seem not to be true anymore:</p>

<pre><code># If no dates generated (start date&gt;end date)
ts = ts

# If last date generated is not end date add it
return ts.astype('int64')
</code></pre></li>
<li><a href="https://cython.readthedocs.io/en/latest/src/tutorial/strings.html#general-notes-about-c-strings" rel="nofollow noreferrer">The documentation seems to recommend against using C strings</a>, unless you really need them. If I read the documentation correctly you could just make the type of <code>freq</code> <code>str</code> and get rid of all your <code>encode("utf-8")</code> and <code>decode("utf-8")</code> code.</li>
<li><p>The definition of the <code>months</code> array is done every time the function <code>get_days</code> is called. In normal Python I would recommend making it a global constant, here you would have to try and see if it makes the runtime worse.</p></li>
<li><p>Python has an official style-guide, <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">PEP8</a>. Since Cython is only an extension, it presumably also applies here. It recommends surrounding operators with whitespace (<code>freq[len(freq) - 1]</code>), using <code>lower_case</code> for all function and variable names and limiting your linelength (to 80 characters by default, but 120 is also an acceptable choice).</p></li>
</ul>

<p>In the end, taking 1ms to create a date range is already quite fast. As you said this is already faster than <code>pandas.daterange</code> (which does a lot of parsing of the input first, which you avoid by passing in numbers directly). You might be able to push it down to microseconds, but you should ask yourself if and why you need this many dateranges per second.</p>
    </div>