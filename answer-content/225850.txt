<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You should save the initial state of the <code>Application.*</code> variables before you mess with them, then reset them when you're done. Not all of your users will have the same settings and it's rude to assume they do. </p>

<p>A simple way to do it would be to implement a class like this:</p>

<pre><code>'@Folder("Classes")
Option Explicit

Private Type ApplicationSettings
  ScreenUpdating As Boolean
  DisplayStatusBar As Boolean
  CalculationMethod As Excel.XlCalculation
  EnableEvents As Boolean
End Type

Private this As ApplicationSettings

Public Property Get ScreenUpdating() As Boolean
  ScreenUpdating = this.ScreenUpdating
End Property

Public Property Get DisplayStatusBar() As Boolean
  DisplayStatusBar = this.DisplayStatusBar
End Property

Public Property Get CalculationMethod() As Excel.XlCalculation
  CalculationMethod = this.CalculationMethod
End Property

Public Function DisableExcelDisplayUpdates()

  SetScreenUpdating False
  SetDisplayStatusBar False
  SetCalculationMethod Excel.xlCalculationManual
  SetEnableEvents False

End Function

Public Function EnableExcelDisplayUpdates()

  Application.ScreenUpdating = this.ScreenUpdating
  Application.DisplayStatusBar = this.DisplayStatusBar
  Application.Calculation = this.CalculationMethod
  Application.EnableEvents = this.EnableEvents

End Function

Private Function SetScreenUpdating(ByVal value As Boolean)
  this.ScreenUpdating = Application.ScreenUpdating
  Application.ScreenUpdating = value
End Function

Private Function SetDisplayStatusBar(ByVal value As Boolean)
  this.DisplayStatusBar = Application.DisplayStatusBar
  Application.DisplayStatusBar = value
End Function

Private Function SetCalculationMethod(ByVal value As Excel.XlCalculation)
  this.CalculationMethod = Application.Calculation
  Application.Calculation = value
End Function

Private Function SetEnableEvents(ByVal value As Boolean)
  this.EnableEvents = Application.EnableEvents
  Application.EnableEvents = value
End Function
</code></pre>

<p>Then test it out like this:</p>

<pre><code>Option Explicit
`@Folder("Tests")

Public Sub testIt()

  Dim ExcelValues As Class1
  Set ExcelValues = New Class1

  Debug.Print "Before "
  Debug.Print "ScreenUpdating: " &amp; Application.ScreenUpdating
  Debug.Print "DisplayStatusBar: " &amp; Application.DisplayStatusBar
  Debug.Print "Calculation: " &amp; Application.Calculation
  Debug.Print "EnableEvents: " &amp; Application.EnableEvents

  ExcelValues.DisableExcelDisplayUpdates

  Debug.Print "During "
  Debug.Print "ScreenUpdating: " &amp; Application.ScreenUpdating
  Debug.Print "DisplayStatusBar: " &amp; Application.DisplayStatusBar
  Debug.Print "Calculation: " &amp; Application.Calculation
  Debug.Print "EnableEvents: " &amp; Application.EnableEvents

  MsgBox "Do your long running process here"

  ExcelValues.EnableExcelDisplayUpdates

  Debug.Print "After "
  Debug.Print "ScreenUpdating: " &amp; Application.ScreenUpdating
  Debug.Print "DisplayStatusBar: " &amp; Application.DisplayStatusBar
  Debug.Print "Calculation: " &amp; Application.Calculation
  Debug.Print "EnableEvents: " &amp; Application.EnableEvents

End Sub
</code></pre>

<p>*Note that the <code>'@Folder("&lt;something&gt;")</code> annotation is a feature of <a href="http://rubberduckvba.com/" rel="nofollow noreferrer">Rubberduck</a> which is a <em>great</em> tool for helping to improve your VBA code. I'm an avid user and occasional contributor to the OSS project.</p>
    </div>