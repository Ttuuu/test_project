<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>To specifically answer your question, you'd need to use a profiler to look at the code and see how long it takes.</p>

<pre><code>cprofilev 20190401a.py &lt; 20190401a.txt 
     1273 function calls in 0.001 seconds

Ordered by: cumulative time

ncalls  tottime  percall  cumtime  percall filename:lineno(function)
    1    0.000    0.000    0.001    0.001 {built-in method builtins.exec}
    1    0.000    0.000    0.001    0.001 20190401a.py:1(&lt;module&gt;)
  593    0.000    0.000    0.000    0.000 20190401a.py:6(findmaxdist)
    1    0.000    0.000    0.000    0.000 {method 'readlines' of '_io._IOBase' objects}
  593    0.000    0.000    0.000    0.000 {built-in method math.sqrt}
    3    0.000    0.000    0.000    0.000 {built-in method builtins.print}
    2    0.000    0.000    0.000    0.000 /usr/lib/python3.5/codecs.py:318(decode)
    2    0.000    0.000    0.000    0.000 {built-in method builtins.min}
    1    0.000    0.000    0.000    0.000 20190401a.py:18(&lt;listcomp&gt;)
    1    0.000    0.000    0.000    0.000 &lt;frozen importlib._bootstrap&gt;:996(_handle_fromlist)
   22    0.000    0.000    0.000    0.000 {method 'append' of 'list' objects}
    4    0.000    0.000    0.000    0.000 20190401a.py:48(&lt;genexpr&gt;)
    1    0.000    0.000    0.000    0.000 {built-in method builtins.hasattr}
   11    0.000    0.000    0.000    0.000 {method 'rstrip' of 'str' objects}
   10    0.000    0.000    0.000    0.000 {method 'split' of 'str' objects}
    2    0.000    0.000    0.000    0.000 {built-in method _codecs.utf_8_decode}
   15    0.000    0.000    0.000    0.000 20190401a.py:47(&lt;lambda&gt;)
    1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}
    9    0.000    0.000    0.000    0.000 {built-in method builtins.len}
</code></pre>

<p>I ran cprofile a few times and the function call numbers are static. From the look of your code, we're seeing multiple requests to findmaxdist and math.sqrt, there might be an opportunity to clean that up.<br>
There are 22 appends to a list object, which if we look at "Common Data Structure Operations" (see <a href="http://bigocheatsheet.com/" rel="nofollow noreferrer">http://bigocheatsheet.com/</a>), which might be an inefficient data structure for what you're trying to achieve. </p>

<p>Looking at your code, regardless of speed, having it all as one giant blob instead of neatly separated into functions (look up the Single Responsibility Principal) can make your code execute faster as functions compile down neatly and very efficiently - especially when written in a functional style of programming (no state maintained in the function after the function completes).</p>

<p>Other than streamlining the calls and changing your data structure, I don't think you'll see much speed improvement with the code as-in. I hope this helps somewhat?<br>
Good luck!</p>
    </div>