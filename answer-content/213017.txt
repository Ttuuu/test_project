<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First, I'd note that I have a fair amount of sympathy for Quuzplusone's position.</p>

<p>Nonetheless, I can see some situations in which it could be somewhat handy to generate regexes, especially if (for example) you want to start with a number of fragments, and use loops (or whatever) to put them together into complete regexes, that then get tested.</p>

<p>However, you seem to be putting a lot of effort into building something that lets you use <code>.then_match</code>... syntax just to concatenate some strings together.</p>

<p>I also find the <code>regex_generator::match_*</code> syntax excessively verbose and clumsy.</p>

<p>While I can certainly sympathize with the notion of isolating the necessary literals into traits classes, I'm not convinced that the traits classes you've defined are the cleanest way to accomplish that (something you already seem to believe).</p>

<p>It seems to me that when all you're really doing is generating and concatenating strings, you can make a lot better use of existing classes to handle that--you can use normal string concatenation, or you can use a stringstream to concatenate strings together.</p>

<p>Using that basic approach, I slapped together enough of an implementation to handle your example:</p>

<pre><code>#include &lt;string&gt;
#include &lt;regex&gt;
#include &lt;iostream&gt;
#include &lt;locale&gt;

namespace match {   
    template &lt;class T&gt;
     T W(char in) { 
         static auto&amp; f = std::use_facet&lt;std::ctype&lt;T&gt;&gt;(std::locale());
         return f.widen(in);
     }

     template &lt;class T&gt;
     std::basic_string&lt;T&gt; W(char const* in) {
         static T ret[3];
         static auto&amp; f = std::use_facet&lt;std::ctype&lt;T&gt;&gt;(std::locale());
         f.widen(in, in+2, ret);
         return std::basic_string&lt;T&gt;(ret);
     }

    template &lt;class T&gt;
    std::basic_string&lt;T&gt; range(T beg, T end) {
        return  std::basic_string&lt;T&gt;(1, W&lt;T&gt;('[')) + beg + W&lt;T&gt;('-') + end + W&lt;T&gt;(']');
    }

    template &lt;class T&gt;
    std::basic_string&lt;T&gt; literal(std::basic_string&lt;T&gt; const&amp; s) { return s; }

    template &lt;class T&gt;
    std::basic_string&lt;T&gt; literal(T const* s) { return s; }

    template &lt;class T&gt;
    std::basic_string&lt;T&gt; group(std::basic_string&lt;T&gt; const &amp;s) { return W&lt;T&gt;("\\(") + s + W&lt;T&gt;("\\)"); }

    template &lt;class T&gt;
    std::basic_string&lt;T&gt; group(T const* s) { return group(std::basic_string&lt;T&gt;(s)); }

    template &lt;class T&gt;
    std::basic_string&lt;T&gt; any_of(std::basic_string&lt;T&gt; const &amp;s) { return W&lt;T&gt;('[') + s + W&lt;T&gt;(']'); }

    template &lt;class T&gt;
    std::basic_string&lt;T&gt; any_of(T const* s) { return any_of(std::basic_string&lt;T&gt;(s)); }

    template &lt;class T&gt;
    std::basic_string&lt;T&gt; none_of(std::basic_string&lt;T&gt; const &amp;s) { return W&lt;T&gt;("[^") + s + W&lt;T&gt;("]"); }

    template &lt;class T&gt;
    std::basic_string&lt;T&gt; none_of(T const* s) { return none_of(std::basic_string&lt;T&gt;(s)); }

    template &lt;class T&gt;
    std::basic_string&lt;T&gt; arbno(std::basic_string&lt;T&gt; const &amp;s) { return s + W&lt;T&gt;('*'); }

    template &lt;class T&gt;
    std::basic_string&lt;T&gt; arbno(T const* s) { return arbno(std::basic_string&lt;T&gt;(s)); }

    template&lt;class T&gt;
    std::basic_string&lt;T&gt; char_class(std::basic_string&lt;T&gt; const &amp;cl) { return cl; }

    std::string space{ "\\s" };
    std::string digit{ "\\d" };
    std::string not_space{ "\\S" };

    std::wstring wspace{ L"\\s" };
    std::wstring wdigit{ L"\\d" };
    std::wstring wnot_digit{ L"\\D" };
};

int main() {

    std::string r{
        match::range('a', 'z') +
        match::literal("XXX") +
        match::char_class(match::space) +
        match::group(
            match::literal("Hello") +
            match::char_class(match::space)) +
        match::any_of("abcdef") +
        match::none_of("qreoi") +
        match::arbno(
            match::range('a','z'))
    };

    std::wstring r2{
        match::range(L'a', L'z') +
        match::literal(L"XXX") +
        match::char_class(match::wspace) +
        match::group(
            match::literal(L"Hello") +
            match::char_class(match::wspace)) +
        match::any_of(L"abcdef") +
        match::none_of(L"qreoi") +
        match::arbno(
            match::range(L'a', L'z'))
    };

    std::cout &lt;&lt; r &lt;&lt; "\n";
    std::wcout &lt;&lt; r2 &lt;&lt; L"\n";
}
</code></pre>

<p>For the moment, I've just created a string and printed it out (so I could check that I got what I expected), but creating a regex from that is obviously a trivial change.</p>

<p>I'm pretty sure by the time you added the missing operators, the result would still be pretty small compared to (for example) just the traits classes.</p>

<p>Bottom line: I wouldn't say I'm exactly <em>excited</em> about the result, but at least to me the notion of using it qualifies for a hesitant "maybe" instead of "no, absolutely not."</p>

<p>That's especially true if I change the surrounding code just a tad:</p>

<pre><code>using namespace match;

std::string r{
    range('a', 'z') +
    literal("XXX") +
    char_class(space) +
    group(
        literal("Hello") +
        char_class(space)) +
    any_of("abcdef") +
    none_of("qreoi") +
    arbno(
        range('a','z'))
};
</code></pre>

<p>I'm still not really excited, but I can say "maybe" with a bit less hesitation.</p>

<p>Edit: I've modified the code somewhat, and added the (implied) support for both narrow and wide characters. For the moment I've had to add overloads for both <code>std::basic_string&lt;T&gt;</code> and <code>T const *</code>. For some reason I don't quite understand, the compiler won't treat the former as the right overload when passing a string literal. Probably just too late at night and my brain has stopped working, but anyway, I guess adding the overloads isn't too heinous (and when somebody is thinking more clearly, maybe they can get rid of those).</p>
    </div>