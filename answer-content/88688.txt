<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>Can we make this code more elegant by following recursive approach?</p>
</blockquote>

<p>Definitely - it is relatively simple to recast this problem in a recursive fashion. Note that shifting left by two places is the same as shifting left by one place twice, so:</p>

<pre><code>def shift_left(lst, n):
    """Shifts the lst over by n indices

    &gt;&gt;&gt; lst = [1, 2, 3, 4, 5]
    &gt;&gt;&gt; shift_left(lst, 2)
    &gt;&gt;&gt; lst
    [3, 4, 5, 1, 2]
    """
    if n &lt; 0:
        raise ValueError('n must be a positive integer')
    if n &gt; 0:
        lst.insert(0, lst.pop(-1))  # shift one place
        shift_left(lst, n-1)  # repeat
</code></pre>

<p>Note that this splits the problem into three cases:</p>

<ul>
<li>Negative <code>n</code>: error state, raise an exception (I generally wouldn't use an <code>assert</code> for this - see e.g. <a href="https://stackoverflow.com/q/944592/3001761">Best practice for Python Assert</a>);</li>
<li>Positive <code>n</code>: recursive case, shift and repeat; and</li>
<li>Zero <code>n</code>: nothing left to do!</li>
</ul>

<p>However, note that the problem states that <em>"you may assume that n is a non-negative integer"</em> - I would take this to mean that you <strong>don't</strong> need to explicitly handle the <code>n &lt; 0</code> cases.</p>

<p>One downside of this particular approach is that it fails if <code>lst == [] and n &gt; 0</code>, as there's nothing to shift. You will have to decide what should happen in that case and handle it appropriately.</p>
    </div>