<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>All of these work only if all of your objects are <code>numpy.array</code>s, so just make sure they are</strong> (or uncomment the casts in each method, but that makes it slightly slower).</p>

<p>In the <code>_tournamentSelection</code> method you can use <a href="https://docs.scipy.org/doc/numpy-1.15.1/reference/generated/numpy.random.choice.html#numpy.random.choice" rel="nofollow noreferrer"><code>np.random.choice</code></a> with the optional second argument to get three random elements (with replacement as in your code, but you can also set <code>replace=False</code> if you want to) from the array:</p>

<pre><code>def _tournamentSelection(self, pop_fitness):
    # pop_fitness = np.array(pop_fitness)
    return np.random.choice(pop_fitness, 3).max()
</code></pre>

<p>Your <code>_mutate</code> method can also be vectorized using <a href="https://docs.scipy.org/doc/numpy-1.15.1/reference/generated/numpy.where.html" rel="nofollow noreferrer"><code>numpy.where</code></a>:</p>

<pre><code>def _mutate(self, individual):
    # individual = np.array(individual)
    return np.where(np.random.random(len(individual)) &lt; self.mutation_rate,
                    np.random.uniform(-100., 100, len(individual)),
                    individual)
</code></pre>

<p>Note that this trades using more memory (because of keeping three arrays the size of your population in memory) for more speed (iterating at C speed, instead of at Python interpreter speed).</p>

<p>As you rightfully observed your memory problem was because you kept on initializing a new function. You can go one step further and use the <a href="https://docs.scipy.org/doc/numpy-1.15.0/reference/generated/numpy.vectorize.html" rel="nofollow noreferrer"><code>numpy.vectorize</code></a> wrapper, to make the code very short and readable:</p>

<pre><code>def _calculate_fitness(self):
    # self.population = np.array(self.population)
    fbench = Function(1, self.dimen)
    fitness_func = np.vectorize(fbench.get_eval_function())
    return fitness_func(self.population)
</code></pre>

<p>Note that this is not faster than writing the <code>for</code> loop, but easier to read :)</p>

<p>You can go even further if <code>self.dimen</code> never changes and define it only once, in your constructor:</p>

<pre><code>def __init__(self):
    self.pop_size = pop_size
    self.mutation_rate = mutation_rate
    self.dimen = dimen
    self._fbench = Function(1, dimen)
    self._calculate_fitness = np.vectorize(self.fbench.get_eval_function())
</code></pre>

<p>In your <code>_initialize</code> method you can directly make the population the right shape:</p>

<pre><code>def _initialize(self):
    self.population = np.random.uniform(-100., 100., (self.pop_size, self.dimen))
</code></pre>

<p>Finding the least fit individual also becomes then <code>min_fitness = pop_fitness.min()</code> instead of <code>min_fitness = min(pop_fitness)</code>.</p>
    </div>