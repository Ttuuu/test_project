<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Consider narrowing accepted types</h2>

<p>This might not be possible based on the context of your code, but if it is: arguments sharing one of many different types hinders and complicates testability and maintainability. There are many different solutions to this that will help this situation; one is accepting variadic arguments - i.e.</p>

<pre><code>def add_error(error_dict, key, *errs):
</code></pre>

<p>This is still easily invocable without needing to wrap a single error in a list.</p>

<h2>Use <code>x not in</code> instead of <code>not x in</code></h2>

<p>i.e.</p>

<pre><code>if key not in error_dict
</code></pre>

<h2>Lose your loop</h2>

<p>and also lose your empty-list assignment, instead doing</p>

<pre><code>error_dict.setdefault(key, []).extend(err)
</code></pre>

<p>If you use the variadic suggestion above, your entire function becomes that one line.</p>

<h2>Immutable or not?</h2>

<p>Currently you do two things - alter a dictionary and return it - when you should only pick one. Either make a copy of the dict and return an altered version, or modify the dict and don't return anything.</p>
    </div>