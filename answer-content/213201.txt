<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>HTML</h1>

<p>Two instances of the same problem. You can actually see it in the markup but using <code>&lt;</code> and <code>&gt;</code> makes the syntax highlight weird. This is because you shouldn't be using these characters - some tools can (incorrectly) interpret them as tags. Instead use their HTML entity codes </p>

<ul>
<li><code>&amp;lt;</code> for  <code>&lt;</code> - "lt" stands for "less than"</li>
<li><code>&amp;gt;</code> for <code>&gt;</code> - "gt" stands for "greater than"</li>
</ul>

<p>It's not a huge issue, as any browser would still work with that but you can see how syntax highlighters can be tripped. </p>

<h1>JavaScript</h1>

<h2>Small Things</h2>

<ul>
<li>Typo in your variable name: <code>allowTextOverrride</code> has too many <code>r</code>s - the correct would be <code>allowTextOverride</code></li>
<li>Check for missing semicolons - the line <code>var saveServerURL = "/save"</code> doesn't have one in the end. I don't think I saw any others but still. It's a minor inconsistency in the code.</li>
<li>Avoid names like <code>gebi</code>. I had to guess that it's short for "<strong>g</strong>et<strong>E</strong>lement<strong>B</strong>y<strong>I</strong>d` but that was after seeing what it does. It's not completely clear when looking at when it's used</li>
<li>You don't actually need <code>gebi()</code> at all. I understand the idea - it's for looking up items and caching them so subsequent lookups would be faster. But the browser <em>already</em> does that. In fact, it does it better - all lookups by ID would be optimised from before you make them. When the DOM is built up all IDs will be cached, so when invoking <code>document.getElementById</code> you'd get a constant time lookup. At least that's the behaviour in most browsers. I suppose some might do a search in the page with every invocation that but I don't think it's worth optimising for those.</li>
<li>Related to you not needing <code>gebi()</code> - there is very little that function does to be useful. You call it with the ID every time, for example <code>gebi("title-input")</code>, so if the ID changes, that means you have to find all invocations and correct them. You <em>could</em> instead have something like <code>function getTitleInput { return document.getElementById("title-input"); }</code> which would actually save you repeated code. </li>
<li>Minor redundancy in <code>getSafeInputs</code> you do a <code>.trim()</code> on <code>inputs.title</code> twice. You can clean it up by first doing <code>inputs.title = inputs.title.trim();</code> and then checking if it's empty and setting a default value if so. You can also do it in one line, if you really want to <code>inputs.title = inputs.title.trim() || "&lt;untitled&gt;";</code> <a href="https://stackoverflow.com/questions/2100758/javascript-or-variable-assignment-explanation">is idiomatic JavaScript assignment</a> that will set the value to the fallback string <code>"&lt;untitled&gt;"</code> if the first option evaluates as <a href="https://dorey.github.io/JavaScript-Equality-Table/" rel="nofollow noreferrer">falsey</a>. And since that value is always going to be a string, then the only string that evaluates as falsey is the empty string <code>""</code>. With that said, you are allowed to prefer an explicit <code>if</code> check instead of a one line assignment using a boolean operator.</li>
<li>Don't use <code>alert()</code> for debugging. I know it's commented out but it's worth mentioning - <code>alert()</code> is only useful for extremely rough debugging. But it has a lot of problems like pausing other scripts execution. This can give you an incorrect information about what's going on when using <code>alert()</code> in some cases. Use <code>console.log</code> - it's unobtrusive and even if you leave it in, it's not a problem for the users. It's also easy to silence, if needed - you can overwrite the <code>console.log</code> function in production, if you find it's too chatty.</li>
<li>Don't leave code in comments - it's almost inevitable when developing to quickly enable/disable some functionality with comments. That's why all editors have a very easy shortcut for commenting out lines. Still, if you are ready with development, all code should be enabled and all comments should be whatever is relevant.</li>
</ul>

<h2>Larger Problems</h2>

<ul>
<li>Don't use global variables. Your <code>mostRecentlySelectedOptions</code>, <code>allowTextOverrride</code>, and <code>saveServerURL = "/save"</code>, along with all the functions are in the global namespace. You can use the <a href="https://stackoverflow.com/questions/17776940/javascript-module-pattern-with-example">module pattern</a> to enclose your code and insulate it from the global scope. There are <a href="https://addyosmani.com/resources/essentialjsdesignpatterns/book/#modulepatternjavascript" rel="nofollow noreferrer">many different implementations of it for various purposes</a> but in essence, all you need to do is wrap your code in a function expression like so <code>(function() { /* all the code goes here */ })()</code>. Here are the basics - JS only really has two scopes - global and functional. Once you put your code inside a function (in this case an anonymous one), it's no longer in the global scope. The last <code>()</code> executes the function and this the code inside it is live. The only difference is that anything <em>inside</em> the function doesn't immediately go to the global scope. The visibility inside is still exactly the same. On a related note the construct <code>(function() { })()</code> is called an immediately invoked function expression. Or shortened as IIFE. In case you come across it in the future, it's that - a function that's defined and executed at the same time.</li>
<li>Related to the global scope above but I wanted to have a separate point - don't enable strict mode in the global scope. Don't get me wrong - it's <em>good</em> to use strict mode but if you define it in the global scope then <em>all</em> scripts on the page would use it. This includes third party libraries, which can break them if they use some features from "loose mode" but suddenly those throw an error. You don't have third party code <em>now</em> but you may in the future - either in this project or another one. So, this is a good practice.</li>
</ul>

<h1>To answer your questions</h1>

<blockquote>
  <p>Are my variables/functions well named?</p>
</blockquote>

<p>Yes, for the most part, they are. As mentioned <code>gebi</code> is too short but also it's not needed. Some could be improved - like <code>setInputs</code> - it sets two <em>specific</em> inputs and only their <em>values</em>. So the name can be a bit misleading. However, I'm not very good with names - I'm not sure how to name them better (I'm not good with names...). Overall, the names serve but can be made a bit more descriptive.</p>

<blockquote>
  <p>Are my functions doing too much or too little?</p>
</blockquote>

<p>As mentioned <code>gebi</code> does too much and is redundant as it does what the browser already does. </p>

<p>I'm also a bit wary of <code>saveOverwrite</code>. It has two <em>completely</em> different branches and so it's actually to (code-wise) unrelated functions in one. Only one of them would run and it's governed by an external attribute. It probably needs to be cleaned up.</p>

<p>Some of the others probably fall under "too little" but I am not sure how to improve them. So, I'd let it fly. I don't think it's a huge issue. Or probably any.</p>

<blockquote>
  <p>Are there cases that you can get unexpected behavior?</p>
</blockquote>

<p>The biggest problem is that global <code>"use strict"</code>. To a lesser extent, the global functions. I can't think of anything else right now that could be an unexpected behaviour. With that said, there is a "special case" here of what happens if an ID changes? All the code assumes the IDs exist, which is fine, but if an ID is different, then you'd get a bunch of errors. Having a getter function for each ID (e.g., the <code>getTitleInput</code> I mentioned earlier) can allow you to have a slightly better error handling. Even if it's nothing more than doing a <code>console.error("ID doesn't exist")</code>. It would also be easier to fix by just changing the function.</p>

<p>Still, that might be a bit of an extreme. A lot of times you put an ID in the HTML because you want to use it and you aren't going to just change it. So it's also OK to leave the code as it is looking stuff up without trying to handle the very unlikely scenario of the HTML changing and the JS code being left as-is.</p>

<blockquote>
  <p>Do you feel that the code is easily extendable/maintainable?</p>
</blockquote>

<p>Perhaps. Depends on what you need to do. But one big problem I neglected to mention earlier (since it is rather specific to this) is the <code>setInputs</code> function. It takes two parameters, which are the two inputs you want to set the value of. But what happens if you now have three inputs? What if you only want to set some of them? I'd suggest passing in an object where the key is the input you want (perhaps the ID or just some identifier you map yourself) and the value is what you want the <em>element's</em> value set to. For example</p>

<pre><code>function setInputs(inputs){
    allowTextOverride = true;
    if (inputs.hasOwnProperty("title")) {
        document.getElementById("title-input").value = inputs.title;
    }
    if (inputs.hasOwnProperty(description) {
        document.getElementById("description-input").value = inputs.description;
    }
}
</code></pre>

<p>This way, if you have to care about more elements, you don't have to have a monolith and hard to read signature of the function.</p>

<p>However, if that expands a lot more, I'd advise you to get some frontend library that can handle the logic and view separation. It need not be something giant like Angular or React - those might be an overkill, but you might look at, for example, KnockoutJS or something else that allows databinding between HTML and a JavaScript model.</p>

<blockquote>
  <p>What can I do about the long list of addEventListeners?</p>
</blockquote>

<p>You can consolidate some. For example, if you are binding the same event with the same handler but on multiple elements, there is very little reason to just do it separately. For example, you can change </p>

<pre><code>gebi("title-input").addEventListener("keypress", function(){
    allowTextOverrride = false;
});

gebi("description-input").addEventListener("keypress", function(){
    allowTextOverrride = false;
});
</code></pre>

<p>to this</p>

<pre><code>document.querySelectorAll("#title-input, #description-input") //select both elements by their IDs
    .addEventListener("keypress", function(){ //add the same handler
        allowTextOverride = false;
    });
</code></pre>

<p>So, you can group them to save space.</p>

<p>Another thing that can save you a few lines is what in Lambda calculus is called Beta reduction. In general if you have <code>function a() { b() }</code> then <code>a()</code> is a bit useless, you can just call <code>b()</code> and get the same effect. So, you can "unwrap" them, if you will. In your case things like</p>

<pre><code>gebi("delete-button").addEventListener("click", function(){
    removeSelectedOptions();
});
</code></pre>

<p>have a useless "wrapper" function. You can directly assign the handler to be the <code>removeSelectedOptions</code> function: <code>.addEventListener("click", removeSelectedOptions);</code> note that there aren't <code>()</code> at the end. Because the name is the <em>function reference</em>. If you add <code>()</code>, that executes the function immediately, instead of setting it as the handler here.</p>

<h1>Further suggestion outside of a code reviewing the main thing</h1>

<p>Consider using ES6 in your code. It's not really new any more and it should be getting more usage. Even if you end up transpiling it into ES5, it's better to have "new code". There is little here that can be straight up improved by ES6 but it's better to practice putting <code>let</code> and <code>const</code> instead of <code>var</code> all the time. </p>
    </div>