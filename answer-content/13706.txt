<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First, I think your code doesn't make much sense. The only reason why <code>Cache</code> can be useful is if you want the cached data to expire after some time or if the memory is low. But you're preventing the memory to be freed by using the field <code>_cachedResults</code>, which will hold the data even after they are removed from the cache. This field is of no use for you, <code>_cachedResults</code> should be a local variable instead.</p>

<p>Second, your code is not reliably thread-safe, because of the way you're assigning to <code>_cachedResults</code>. What could happen is if <code>GetSomeData()</code> creates the result using <code>new</code>, an uninitialized object could be first assigned to <code>_cachedResults</code> and only then would be the constructor called. Such reordering could happen, because it's safe from the point of view of a single thread.</p>

<p>Normally, you would solve this by using a volatile write. But in your case, simply using a local variable instead of a field will be enough.</p>

<p>For more details, see <em>The Famous Double-Check Locking Technique</em> in Chapter 29 of Jeffrey Richter's <em>CLR via C#</em>, or <a href="http://en.wikipedia.org/wiki/Double-checked_locking" rel="nofollow">the Wikipedia article <em>Double-checked locking</em></a>.</p>
    </div>