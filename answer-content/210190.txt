<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Coding style</h3>

<p>Generally your code is written clearly. Just two points that I noticed:</p>

<ul>
<li><p>Two different styles of positioning the opening braces of a code block are used:</p>

<pre><code>if userDefaults.bool(forKey: preloadedDataKey) == false
{
</code></pre>

<p>vs</p>

<pre><code>if let exerciseArray = item.exercises {
</code></pre>

<p>I prefer the second version, that is also what you'll find in the “Swift Programming Language” book and in the Swift source code. You can choose your favorite style, but it should be used consistently.</p></li>
<li><p>Testing boolean values: I prefer </p>

<pre><code>if !someBooleanExpression 
</code></pre>

<p>over</p>

<pre><code>if someBooleanExpression == false
</code></pre></li>
</ul>

<h3>Naming variables</h3>

<p>From the Swift <a href="https://swift.org/documentation/api-design-guidelines/" rel="nofollow noreferrer">API Design Guidelines</a>,</p>

<blockquote>
  <p>Name variables, parameters, and associated types according to their roles, rather than their type constraints.</p>
</blockquote>

<p>This applies to <code>exerciseArray</code>, <code>answersArray</code> etc in your code. Better choices would be <code>exercises</code>, <code>answers</code>. I would also omit the <code>each</code> prefix in <code>eachExercise</code>, <code>eachAnswer</code>, just</p>

<pre><code>for exercise in exercises { ... }
</code></pre>

<p>In your first approach, where you have “plain” model classes in addition to the Core Data classes you could use the “cd” prefix to distinguish between the variables – as you already do to distinguish the classes:</p>

<pre><code>for exercise in exercises {
    let cdexercise = CDExercise(context: backgroundContext)
    ceexercise.question = exercise.question
    // ...
}
</code></pre>

<h3>The Core Data models</h3>

<p>It seems that most (all?) attributes in the Core Data model classes are declared as <em>optionals.</em> But what happens if an attribute is not set? An exercise without question, an answer without text? It could lead to a runtime error later, or to unexpected results. You should check which attributes are required, and declare those as non-optionals.</p>

<p>The <code>isCorrect</code> attribute of <code>CDAnswer</code> seems unnecessary since there is already a <code>correctAnswer</code> attribute in <code>CDExercise</code>. However, I would make that attribute a relationship to <code>CDAnswer</code> instead of a string.</p>

<h3>The property list</h3>

<p>From </p>

<pre><code>if let categoryImage = eachCategory["imageName"] as? String
// ...
if let image = eachExercise["image"] as? String {
</code></pre>

<p>it seems that the keys in the default property list are not consistent. I'd suggest to use same names as the properties in the model classes, to avoid confusion.</p>

<h3>To force unwrap or not to force unwrap – loading resources</h3>

<p>You carefully use optional binding and conditional casts, which is generally a good practice to avoid runtime errors. However, when loading the property list, you <em>know</em> that it is present, and what it contains. Any error here would be a <em>programming error</em> and must be fixed before deploying the program.</p>

<p>Therefore forced unwrapping/casting is actually better: It helps to detect the programming error early:</p>

<pre><code>let url = Bundle.main.url(forResource: "demoExercises", withExtension: "plist")!
// ...
</code></pre>

<p>The same applies to the optional casts: You <em>know</em> that category has a key "exercises" with a value which is an array of dictionaries, so instead of</p>

<pre><code>if let arrayWithExercises = eachCategory["exercises"] as? [[String : Any]]
</code></pre>

<p>you can write</p>

<pre><code>let arrayWithExercises = eachCategory["exercises"] as! [[String : Any]]
</code></pre>

<h3>Approach #1: Loading the data into non-Core Data model objects first</h3>

<p>Your first approach is to load the default data into separate structures first, and then create the managed objects. That requires some extra space and time, but that matters only if the default data is big.</p>

<p>It can be simplified considerably however, using a <code>PropertyListDecoder</code>. It suffices to declare conformance to the <code>Decodable</code> protocol in your plain model classes</p>

<pre><code>struct Category: Decodable {
    let title: String
    let imageName: String
    let exercises: [Exercise]
}

struct Exercise: Decodable { ... }

struct Answer: Decodable { ... }
</code></pre>

<p>and to make sure that the property names are identical to the keys in the property list file. Then reading the default data becomes as simple as</p>

<pre><code>let url = Bundle.main.url(forResource: "demoExercises", withExtension: "plist")!
let data = try! Data(contentsOf: url)
let categories = try! PropertyListDecoder().decode([Category].self, from: data)
</code></pre>

<p>The disadvantage of this approach is that you have to define extra types.</p>

<h3>Approach #2: Load the default data into Core Data directly</h3>

<p>I would use <code>PropertyListSerialization</code> to load the file (which works with both dictionaries and arrays):</p>

<pre><code>let url = Bundle.main.url(forResource: "demoExercises", withExtension: "plist")!
let data = try! Data(contentsOf: url)
let categories = try! PropertyListSerialization.propertyList(from: data, format: nil)
    as! [[String: Any]]
</code></pre>

<p>Instead of the <code>addToXXX</code> methods I would use the inverse relationships to connect the objects, e.g.</p>

<pre><code>category.addToExercises(exercise)
</code></pre>

<p>becomes</p>

<pre><code>exercise.category = category
</code></pre>

<p>Together with the previously mentioned points the loop to read the property list contents into Core Data would look like this:</p>

<pre><code>for category in categories {
    let cdcategory = Category(context: backgroundContext)
    cdcategory.title = category["title"] as! String
    cdcategory.imageName = category["imageName"] as! String

    for exercise in category["exercises"] as! [[String: Any]] {
        let cdexercise = Exercise(context: backgroundContext)
        cdexercise.category = cdcategory // Add exercise to the category
        cdexercise.question = exercise["question"] as! String
        // ...

        for answers in exercise["answers"] as! [[String: Any]] {
            let cdanswer = Answer(context: backgroundContext)
            cdanswer.exercise = cdexercise // Add answer to the exercise
            // ...
        }
    }
}
</code></pre>

<p>which is a bit shorter and easier to read than your original code. </p>

<p>One could also try to load the managed objects directly from the property list as in approach #1. That requires to add <code>Decodable</code> conformance to the <code>NSManagedObject</code> subclasses. A possible solution is described in <a href="https://stackoverflow.com/q/44450114/1187415">How to use swift 4 Codable in Core Data?</a> on Stack Overflow. However, it requires to write all the </p>

<pre><code> convenience init(from decoder: Decoder)
</code></pre>

<p>methods, so it may not be worth the effort.</p>
    </div>