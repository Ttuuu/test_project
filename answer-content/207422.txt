<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First, to your questions</p>

<blockquote>
  <p>Do you spot anything wrong regarding permissions?</p>
</blockquote>

<p>Overkill. Permissions has very little to do with web-servers, as there is only one user - one under which a web-server (or a php process) runs. So it doesn't really matter what number you have a fancy to set.</p>

<blockquote>
  <p>Are the checks that I do in upload_images.php to check that the files that are being uploaded are images of the allowed formats sufficient? Could I do something better?</p>
</blockquote>

<p>Overkill. All these checks do not prevent the upload of the valid PHP code. But honestly, it doesn't really matter.</p>

<blockquote>
  <p>Fetching multiple images using base64_encode(file_get_contents($images[$i])) seems a bit slow and also the string that is being put inside img src is huge...can this be a problem (for example images don't appear in xiaomis MIUI browser)? Is there a better alternative?</p>
</blockquote>

<p>Yes, it prevents the caching on the client side and causes a huge bandwidth waste.<br>
It's better to show images as is. </p>

<blockquote>
  <p>Let's say that a malicious image bypasses my checks during uploading. When I fetch an images using the following PHP code get the response in js using ajax and then append it to the dom to be shown to the user using  is it possible to be harmful in any way?</p>
</blockquote>

<p>Not on the PHP side. I am not a JS expert though. You can try security.stackexchange.com for this. Taken alone, without all this wall of code, it will make a perfect question there (if not a duplicate though).</p>

<blockquote>
  <p>Is storing images outside of root trying to prevent access of malicious users too much of a hassle? Is it better maybe (security-speed-browser compatibility wise) to just store them inside root and make use of .htaccess to prevent someone from doing harm? Would an .htaccess like the following ( secure_images/.htaccess ) be sufficient for that purpose?</p>
</blockquote>

<p>Yes allowing a web-server to handle images would be a way better way. </p>

<p>Now to the actual code review</p>

<p>The whole code is too big for the full review though, because it covers too many irrelevant topics, like secure image upload, file permissions, web security in general, client-side programming,  and even for some reason creating watermarks. So I'll cover just the actual image upload. </p>

<h3>validateArray() function</h3>

<ol>
<li>Exceptions misused. For some reason, instead of catching exceptions outside of the function, you are catching them inside, which makes both the function's code and its output more complicated. Just throw inside the function and catch outside. That's all. No need to even return true, as in case of the error, the execution won't even reach the condition where the return value is checked.  </li>
<li>You are duplicating A LOT of functionality provided by PHP. Most of errors you are checking for can be thrown by PHP. For example if you will try to iterate over a string, <a href="https://3v4l.org/Et3DA" rel="nofollow noreferrer">PHP will give you an error</a>. So it makes no sense do all the numerous verifications. PHP can do it for you. All you need is a <a href="https://phpdelusions.net/articles/error_reporting#error_page" rel="nofollow noreferrer">simple error handler</a> that can convert PHP errors to exceptions and poof - you already have the exception without a single line of code!</li>
<li>The same goes for the numerous file verifications. If a file doesn't exist, PHP will tell you that!</li>
<li>Finfo and exif can be easily fooled, a file which is a valid image <em>could be a no less valid PHP script at the same time.</em> So use them for your convenience only, but these functions won't add too much security. </li>
<li>Watermarks has nothing to do with validation.</li>
<li>Formatting. PSR-2 is a de-facto standard now so you are supposed to follow it.</li>
</ol>

<p>So in your place I would make this function like this</p>

<p>

</p><pre><code>function validateArray($array)
{
    if(count($array['name']) &gt; 15) {
        throw new MyFileUploadException("Maximum image number allowed is 15");
    }
    $allowedExts = array('png', 'jpeg', 'jpg');
    foreach($array['name'] as $i =&gt; $name)
    {
        if($array['error'][$i] !== 0) {
            throw new MyFileUploadException("File error");
        }
        if(!is_uploaded_file($array['tmp_name'][$i])) {
            throw new MyFileUploadException("File has to be uploaded using our form");
        }
        $ext = pathinfo($name, PATHINFO_EXTENSION);
        if( !in_array($ext, $allowedExts) )
        {
            throw new MyFileUploadException("Only PNG JPEG JPG images are allowed");
        }
        if(filesize($array['tmp_name'][$i]) &lt; 12) {
            throw new MyFileUploadException("All images has to be more than 11 bytes");
        }
        if($array['size'][$i] &gt; 1000000) {
            throw new MyFileUploadException("Maximum image size allowed is 1GB");
        }
    }
    return true;
}
</code></pre>

<h3>upload_images.php code</h3>

<p>Issues are the same: too much duplicated verifications and exceptions misuse which leads to the duplicated code. </p>

<p>Besides , there is no point in deleting tmp_files and also I doubt we should delete already uploaded files as well. So to me the code would be rather </p>

<pre><code>class MyFileUploadException extends Exception {};
try
{
    validateArray($_FILES['filesToUpload']);
    foreach($_FILES['filesToUpload']['tmp_name'] as $i =&gt; $tmp_name)
    {
        $ext = pathinfo($_FILES['filesToUpload']['name'][$i], PATHINFO_EXTENSION);
        $new_name = date('YmdHis',time()).mt_rand() . "." . $ext;
        $path_to_be_uploaded_to = $_SERVER['DOCUMENT_ROOT'] . "/../secure_images/" . $new_name;
        move_uploaded_file($tmp_name, $path_to_be_uploaded_to);
        add_watermark($path_to_be_uploaded_to, $ext);
    }
    $data['outcome'] = true;
    $data['msg'] = "Images uploaded successfully";
}
catch (MyFileUploadException $e)
{
    $data['outcome'] = false;
    $data['msg'] = $e-&gt;getMessage();
}
catch (Exception $e)
{
    error_log($e);
    $data['outcome'] = false;
    $data['msg'] = "There was an error please try again later";
}
echo json_encode($data);
</code></pre>

<p>Notice the user-defined exception and the difference in the processing. Your own error messages thrown via MyFileUploadException are useful for the user and do no harm when revealed - so the message is conveyed to the user as is. </p>

<p>Whereas PHP's internal error messages are exactly the opposite: too cryptic for the site user but may contain some sensitive information that shouldn't be revealed outside. At the same time they are vital for the site programmer - so they are logged in the web-server's error error log, while a generalized error message is shown to the user. So now errors are treated according to the best standards which are explained in my article I linked above.</p>

<p>I would question the name generation method though, and use md5() from the file contents instead.</p>
    </div>