<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><p>Prefer returning <code>List</code> to <code>ArrayList</code>. Clients probably don’t need to know the type of list you’re dealing with. Likewise, you can declare your <code>ArrayList</code> as a <code>List</code>, since you don’t use any methods specific to <code>ArrayList</code>. This makes it easier to change your implementation later.</p></li>
<li><p><code>patternStartIndexes</code> would be a better name than <code>allPositions</code></p></li>
<li>Method variables should be declared on their own lines, and the names should be a lot more descriptive.</li>
<li>Your <code>while</code> loop might be more clear as a <code>for</code> loop with <code>headerIndex</code> as the loop variable.</li>
<li>The short-circuit you’re doing for patterns of length one is just noise. It’s a special case that should be correctly handled by the <code>} else {</code> block correctly.</li>
<li>Your implementation does not do what I would expect for special cases. I’m going to work under the assumption that your implementation is correct. If the pattern is <code>{ “a”, “a” }</code> and the header array is <code>{ “a”, “a”, “a” }</code>, is the desired output <code>{ 0 }</code> or <code>{ 0, 1 }</code>? If the latter, you’re going to need a second loop or a somewhat different approach.</li>
<li>I’m not convinced your comments add much. Non-javadoc comments are typically used to document why, not what. I think your code is pretty straightforward in terms of what it’s doing. You may disagree. :)</li>
<li>For readability, it’s nice to keep lines relatively short - maybe 120 characters, give or take. People are neither trained for or good at reading very long lines of text.</li>
<li>You don’t need to track <code>startPosition</code>, which lets us get rid of most of the <code>else</code> block. You can do math: <code>startPosition = headerIndex - patternLength + 1</code>.</li>
</ul>

<p>If you make all the proposed modifications, your code might look something like:</p>

<pre><code>private List&lt;Integer&gt; getPatternStartIndexes(final String[] headerArray, final String[] pattern) {

    final List&lt;Integer&gt; patternStartIndexes = new ArrayList&lt;&gt;();
    int patternIndex = 0;

    for (int headerIndex = 0; headerIndex &lt; headerArray.length; headerIndex++) {
        if (headerArray[headerIndex].equals(pattern[patternIndex])) {
            patternIndex++;
            if (patternIndex == pattern.length) {
                patternIndex = 0;
                patternStartIndexes.add(headerIndex - pattern.length + 1);
            }
        } else {
            patternIndex = 0;
        }
    }
    return patternStartIndexes;
}
</code></pre>
    </div>