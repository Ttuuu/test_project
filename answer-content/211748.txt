<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You should avoid writing code with exception-handling altogether.  Usually, when you want to write a fancy loop in Python, the <code>itertools</code> module is your friend.  In this case, I would take advantage of <a href="https://docs.python.org/3/library/itertools.html#itertools.groupby" rel="noreferrer"><code>itertools.groupby()</code></a> to form groups of lines, assisted by <a href="https://docs.python.org/3/library/itertools.html#itertools.count" rel="noreferrer"><code>itertools.count()</code></a> to provide the line numbers.</p>

<pre><code>import itertools

def chunks(iterable, n):
    i = itertools.count()
    for _, group in itertools.groupby(iterable, lambda _: next(i) // n):
        yield group

with open('data.txt') as read_f, open('new_data.txt', 'w') as write_f:
    for group in chunks(read_f, 7):
        print(' '.join(line.rstrip() for line in group), file=write_f)
</code></pre>

<p>A few other minor changes:</p>

<ul>
<li>You only need one <code>with</code> block to open both files.</li>
<li><code>line.rstrip()</code> is more convenient than <code>lambda x: x.replace("\n", '')</code></li>
<li><code>print(…, file=write_file)</code> is slightly more elegant than <code>write_file.write(… + '\n')</code>.</li>
</ul>
    </div>