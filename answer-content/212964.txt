<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>import</h1>

<p>why import <code>product</code> within your method, and not in the module scope? </p>

<h1>instantiation</h1>

<p>There is just no reason to instantiate the <code>list</code> in </p>

<pre><code>choices = list(product(range(1, faces+1), repeat=dice))
</code></pre>

<p>when you just iterate over it.</p>

<p>As noted by @JordanSinger, this takes a huge toll on memory, while using it as an iterable suffices</p>

<hr>

<h1>numpy alternative</h1>

<pre><code>a = sum(
    np.meshgrid(
        *(np.arange(1, faces + 1, dtype="uint8") for _ in range(dice)),
        copy=False
    )
)
(a == number).sum()
</code></pre>

<p>but for larger number of <code>dice</code> and <code>faces</code> this runs into <code>MemoryError</code> too</p>

<h1>alternative</h1>

<p>The integer value of <code>True</code> is <code>1</code>. So instead of keeping a counter, and incrementing it each time there is a match, you can do:</p>

<pre><code>def poss_combinations(dice, faces, number):
    choices = product(range(1, faces+1), repeat=dice)
    return sum(sum(roll) == number for roll in choices)
</code></pre>

<p>But even this will take ages for <code>10**10</code> combinations. Better would be to use a analytical formula like <a href="http://mathworld.wolfram.com/Dice.html" rel="noreferrer">this</a> one</p>

<hr>

<h1>alternative 2</h1>

<p>A first alternative, is instead of taking the <code>product</code>, using <code>itertools.combination_with_replacement</code> to get all the combinations of dice rolls. For 10 10-faced dice, this is <code>sum(1 for _ in combinations_with_replacement(range(10), 10))</code> or <code>92378</code>. This is a much better number to work with that <code>10**10</code></p>

<p>The next step is to check which combinations combine to <code>numbers</code>, and then calculate how much of these combinations are possible <a href="https://en.wikipedia.org/wiki/Permutation#k-permutations_of_n" rel="noreferrer">link</a></p>

<pre><code>from collections import Counter
from functools import reduce
from math import factorial
from operator import mul


def product_math(iterable):
    return reduce(mul, iterable, 1)


def combination_permutations(combination):
    c = Counter(combination)
    return factorial(sum(c.values())) / product_math(
        factorial(i) for i in c.values()
    )
</code></pre>

<p>calculates the number of possible permutations of a combination</p>

<pre><code>def poss_comb_permutations(dice, faces, numbers):
    return sum(
        combination_permutations(combination)
        for combination in combinations_with_replacement(
            range(1, faces + 1), dice
        )
        if sum(combination) == numbers
    )
</code></pre>

<p>Then uses this to calculate the number of matching dice rolls.</p>

<p>All 3 methods arrive at the same result for </p>

<pre><code>dice = 7
faces = 7
number = 20
</code></pre>
    </div>