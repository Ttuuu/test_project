<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ol>
<li><p>When a variable is <code>volatile</code>, then the code that access that variable is forced to read/write the value of variable from/to the memory. Without <code>volatile</code>, the value of variable can be (temporarily) stored to place (like register/cache) where changes are not immediately visible to other threads, or changes by other threads are not immediately visible.</p></li>
<li><p><code>synchronized</code> is used in the code for avoiding concurrent and duplicate initialization of <code>maintenanceUserCred</code>. Without the <code>synchronized</code> block, two or more threads can enter to <code>maintenanceUserCred = getMaintenanceUserCredentials();</code> line at the same time. The <code>synchronized</code> will pass only one thread at a time to the block, so <code>maintenanceUserCred = getMaintenanceUserCredentials();</code> will be done only once. </p></li>
</ol>

<p>Both <code>synchronized</code> and <code>volatile</code> will create memory barriers, that ensures that loads and stores are really from/to the main memory (not only local cache of current CPU core). </p>

<p>For example without <code>volatile</code> and <code>synchronized</code> the generated code could <em>effectively</em> work like the following code:</p>

<pre><code>ConfigUserCredentails tmp = maintenanceUserCred;

if (tmp != null) {
    return tmp;
}
tmp = getMaintenanceUserCredentials();
maintenanceUserCred = tmp;
return tmp;
</code></pre>

<p>That will allow several threads to call getMaintenanceUserCredentials() at the same time and threads may obtain different ConfigUserCredentails objects.</p>
    </div>