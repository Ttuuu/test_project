<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your implementation looks mostly good, however I'm not sure if I'd recommend passing your parameters by value.  It may be what you're looking for, but generally I'd consider passing by reference or const-reference - it avoids the need for one or more copies, and means you shouldn't get any object slicing as I mention in answer to question 3 below.  Unless of course you wanted the copies and/or slicing to occur, in which case your implementation is fine.</p>

<p>Now, to try and answer your questions:</p>

<ol>
<li><p>I try to just keep an eye on the <code>#includes</code> and remove any that I don't think are required anymore.  If I remove one that was actually required I can always add it back in again.  I also tend to make a point of removing #includes whenever I have made changes to a file that I know mean I no longer require a header.  It's more art &amp; experience than science though, so I'm not sure I can give much good advice here.</p></li>
<li><p>Using <code>#ifndef</code> etc. to protect your include files from being included more than once is definitely still a good idea.  Some compilers support <code>#pragma once</code> that does a similar thing, but as this isn't universally supported I'd stick with <code>#ifndef</code> protection.</p></li>
<li><p>You could use references for that, which act very similarly to pointers.  Allow me to demonstrate:</p>

<p><code>Base b = Derived();   // Here b will be an instance of base</code></p>

<p><code>Base&amp; b = Derived();  // In this case b will be an instance of Derived.</code></p>

<p>In the first case, the derived that is created will be "sliced" into an instance of <code>Base</code>, meaning that any members that are in <code>Derived</code> but not in <code>Base</code> will be dropped, and b will just be a normal instance of <code>Base</code>.  For more information on object slicing, you could read <a href="http://en.wikipedia.org/wiki/Object_slicing" rel="nofollow">this wikipedia article</a></p>

<p>In the second case, you're creating a reference to an instance of <code>Derived</code>.  This will act much like a pointer would - you can only directly access members exposed by <code>Base</code>, but the underlying instance is a <code>Derived</code>. </p>

<p>To answer your comment below, <code>Base&amp; b = Derived()</code> isn't actually valid c++, because the <code>Derived()</code> call creates a temporary, and you can't point a reference at a temporary.  The code was just to illustrate a point, rather than as a proper suggestion.  What you can do however, is</p>

<p><code>Derived d;   Base&amp; b = d;</code></p></li>
<li><p>You should include the actual header file for a class whenever the compiler actually needs some information about it's members - for example if you're calling functions on the class, or if you're declaring a value type of the class.</p>

<p>If you're just passing around pointers or references to a class without actually using it you can usually get away with just a forward declaration.</p>

<p>My general rule of thumb is to forward declare anything that is needed in a header file, then #include the headers required in the .cpp file.  Except when the full declerations are actually required in the header file.  This seems to be roughly what you're doing, so I think you've got the right idea.</p></li>
<li><p>I'm assuming you're asking whether you should specifically state that <code>void acceptvisitor(Visitor v);</code> in Derived is virtual.  This isn't strictly neccesary -  as the function is declared as virtual in the <code>IVisitable</code> class then it will be virtual in <code>Derived</code> as well.</p>

<p>However, you may want to mark it as virtual anyway - this might make it more obvious to anyone reading the code that the function is actually virtual, rather than a normal method.</p></li>
</ol>

<p>Hopefully I've been clear enough here, but feel free to leave a comment if you have any further questions or want some clarificaiton.</p>
    </div>