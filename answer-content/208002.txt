<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Some additional points:</p>

<p>To me it is easier to deal with if you separate the Trie from it's nodes.  To this end a <code>Node</code> class would help.</p>

<p>Instead of using an array, I think you can get better performance by using a <code>Dictionary&lt;char,Node&gt;</code> to hold the children of each node.</p>

<p>Using a separate <code>Node</code> class gives you the option to optimize your prefix count by keeping a count of each word that has the prefix up to that point.</p>

<p>A <code>Trie</code> class with a <code>Node</code> class using a <code>Dictionary</code> could look something like this:</p>

<pre><code>class Trie
{
    private class Node
    {
        public char value = '\0';
        public int wordCount = 0;
        //public Node parent = null; for future use
        public Dictionary&lt;char, Node&gt; children = new Dictionary&lt;char, Node&gt;();

        public Node() { }
        public Node(char value)
        {
            this.value = value;
        }
        public Node AddChild(char value)
        {
            Node temp = new Node();
            if (!children.TryGetValue(value,out temp))
            {
                temp = new Node();
                children.Add(value, temp);
                //children[value].parent = this;
            }
            temp.wordCount++;
            return temp;
        }
    }
    private readonly Node root = new Node();

    public Trie() { }

    public void AddWord(string word)
    {
        Node temp = root;
        foreach (char c in word)
        {
            temp = temp.AddChild(c);                
        }
    }
    public int prefixCount(string prefix)
    {
        Node temp = root;
        foreach (char c in prefix)
        {
            if (!temp.children.TryGetValue(c,out temp))
            {
                return 0;
            }
        }
        return temp.wordCount;
    }

}
</code></pre>

<p>A solution could look like this:</p>

<pre><code>public static void RunSolution(TextReader sin,TextWriter sout )
{
    int lines = int.Parse(sin.ReadLine());
    Trie contacts = new Trie();
    for(int line = 0; line &lt; lines; ++line)
    {
        var instructions = sin.ReadLine().Split(' ');
        switch(instructions[0])
        {
            case "add":
                {
                    contacts.AddWord(instructions[1]);
                    break;
                }
            case "find":
                {
                    sout.WriteLine(contacts.prefixCount(instructions[1]));
                    break;
                }
            default:
                {
                    throw new InvalidDataException("no op code");
                }
        }
    }
}
</code></pre>

<p>With this all Trie operations become O(n) the length of the string, since any lookups are close to O(1).</p>
    </div>