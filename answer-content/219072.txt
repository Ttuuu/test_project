<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You’ve got too much code.</p>

<p>Not too much code to review - we can review a lot of code.  You’ve written too much code for this problem.  You’ve enumerated all the possible states, and hard coded variable names for all the possible states and constraints.  You’ve got <code>jugA_state</code>, <code>jugB_state</code> and <code>jugC_state</code> for the current volumes of the 3 jugs and <code>jugA_max</code>, <code>jugB_max</code> and <code>jugC_max</code> (and sometimes <code>jugC_Max</code>!) for the capacities of the 3 jugs.  If you have to solve a 4 jug problem, your amount of code is going to skyrocket.  Never mind a 5 jug problem!</p>

<p>Instead, you should number the jugs 0, 1 and 2, and used indexing for the capacities and current volumes.  You can use a tuple for the capacities, since it is fixed for the duration of the problem.</p>

<pre><code>capacities = (5, 3, 1)
volumes = [5, 0, 0]
</code></pre>

<p>Moving water from one jug into any other jug can be done by one function:</p>

<pre><code>def pour(from:int, to:int, volumes:list, capacities:tuple) -&gt; list:
    transfer = min(volumes[from], capacities[to] - volumes[to])
    if transfer &gt; 0:
        volumes = volumes[:]        # Copy the current state (volumes)
        volumes[from] -= transfer
        volumes[to] += transfer
        return volumes              # Return the new state (volumes)
    return None
</code></pre>

<p>Pouring from each jug to every other jug is a simple double iteration:</p>

<pre><code>for from in range(num_jugs):
    for to in range(num_jugs):
        if from != to:
            new_volumes = pour(from, to, volumes, capacities)
            if new_volumes:
                # Valid pour - next, check if this is a new state, record move, etc.
</code></pre>

<p>The “empty a jug” and “fill a jug” moves are simpler; only a single iteration is required.</p>

<p>Checking if any jug has reached the target volume is easy.  Just use the <code>any()</code> function with a generator expression:</p>

<pre><code>if any(volume == target_volume for volume in volumes):
    print("Target volume reached")
</code></pre>

<hr>

<p>More advanced:</p>

<p>Testing if a new state is contained within a list of already visited states.  You are using <code>[...] in listPreviousSolutions</code>.  Instead of testing for containment in a <code>list</code>, which is an <span class="math-container">\$O(N)\$</span> search, you could use containment in a <code>set</code>, which is an <span class="math-container">\$O(1)\$</span> lookup.  But since your states are themselves lists, which are mutable, you must first convert them into a <code>tuple</code>, which is immutable, and so is hashable which is required for sets.</p>

<pre><code>previousStates = set()

#...

new_state = ...
new_state = tuple(new_state)
if new_state not in previousStates:
    previousStates.add(new_state)
    # ... etc ...
</code></pre>

<hr>

<p>General PEP-8 comments.</p>

<p>Use consistent naming.  You’ve used <code>mixedCase</code> for some variables (<code>targetVol</code>), <code>snake_case</code> for others (<code>list_index_steps</code>), and even a combination of the two (<code>jugA_max</code>).  <code>snake_case</code> is recommended by the PEP-8 standard.</p>

<p>Similar for function names.  You’ve use <code>CamelCase</code> (<code>MoveWater</code>) , <code>mixedCase</code> (<code>possibleStartStates</code>) and a mashup of <code>mixedCase</code> and <code>snake_case</code> (<code>print_Steps_Taken</code>).  You’ve also inconsistently capitalized when using <code>mixedCase</code> (<code>setjugVolumes</code> ... the <code>j</code> should have been capitalized).  Again, be consistent.  I believe PEP-8 recommends <code>mixedCase</code> for function names.</p>

<p>Spaces.  Put a space around operators, like <code>!=</code> and <code>+=</code>.  Put a space after commas in lists and function calls.  Do not put a space before the <code>(</code> in function calls (<code>list_index_steps.append ([5])</code>).</p>

<p>Use a checker like <code>pylint</code> to validate your code against the PEP-8 standards, checking for these and other coding guidelines.</p>

<hr>

<p>Don’t use an integer to represent a boolean state, and avoid negations in variable names.  So instead of:</p>

<pre><code>noNewSolutionsAdded = 1

# ...

if ... :
    noNewSolutionsAdded = 0

# ...

if noNewSolutionsAdded == 1  and  ...:
</code></pre>

<p>use:</p>

<pre><code>solutions_added = False

# ...

if ...:
    solutions_added = True

# ...

if not solutions_added  and  ...:
</code></pre>
    </div>