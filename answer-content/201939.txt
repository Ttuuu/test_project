<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Text use <code>textContent</code></h2>

<p>When assign content to an element use <code>textContent</code> rather than <code>innerHTML</code> This prevent a page reflow and all the other overheads associated with new elements.</p>

<h2><code>setTimeout</code> for better control</h2>

<p>Use <code>setTimeout</code> rather than <code>setInterval</code>. It lets you start immediately and it also lets you control the display time based on the content. eg use word count to set display time.</p>

<p>For example</p>

<pre><code>const interval = 500; // in ms per word
myTimedFunction();      // starts the timed function immediately.
function myTimedFunction(){

    // do something
    var wordCount = getWordCount(quote); // imagined function 

    setTimeout(myTimedFunction, interval * wordCount);
}
</code></pre>

<h2>Content where it belongs</h2>

<p>First... You don't need to manually allocate items to an array.</p>

<p>You had something like</p>

<pre><code>const arr = [];
arr[0] = "blah";
arr[1] = "blah";
arr[2] = "de blah";
arr[3] = "blah";
</code></pre>

<p>Which can be done as</p>

<pre><code>const arr = [;
    "blah",
    "blah",
    "de blah",
    "blah",
];
</code></pre>

<p>However the quotes would be better stored hidden on the page, as it is content not data.</p>

<pre><code>&lt;!-- HTML --&gt;
&lt;ul class="quotes--quotes-hidden"&gt;
    &lt;li&gt;Blah&lt;/li&gt;
    &lt;li&gt;Blah&lt;/li&gt;
    &lt;li&gt;De Blah&lt;/li&gt;
    &lt;li&gt;Blah&lt;/li&gt;
&lt;/ul&gt;

/*CSS*/
.quotes--quotes-hidden { display : none; }
</code></pre>

<p>And then you can extract it and add it randomly to the display element.</p>

<pre><code>const interval = 15000;
const displayEl = document.getElementById("quotes");
const quotes = [...document.querySelectior(".quotes--quotes-hidden").children];
randomQuote();
function randomQuote() {
    // NOTE (val | 0) is the same as Math.floor(val)
    displayEl.textContent = quotes[Math.random() * quotes.length | 0].textContent;
    setTimeout(randomQuote, interval);

}
</code></pre>

<h2>Don't repeat random items.</h2>

<ul>
<li><p>Random can seam very none random to humans. For a small list of items the odds of the same item being repeated is 1/n where n is the number of items. So for 10 items, on average 1 in every ten users will have to wait 30 seconds before they see an new quote, 1 in 100 will wait 45, and 1 in a 1000 will wait 60. Also 1 in ten will see the first quote repeated after the second quote has been displayed.</p>

<p>To avoid repeating the same content use a second array to store upcoming quotes. Each time one is displayed remove it from the array. When the array is empty fill it again and then you start the repeat.</p></li>
</ul>

<p>For example</p>

<pre><code>const interval = 15000;
const displayEl = document.getElementById("quotes");
const quotes = [...document.querySelectior(".quotes--quotes-hidden").children];
const quotesPending = [];
randomQuote();
function randomQuote() {
    if (quotesPending.length === 0) { // get next round
       quotesPending.push(...quotes);
    } 
    const next = quotes.splice(Math.random() * quotes.length | 0)[0];
    displayEl.textContent = next.textContent;
    setTimeout(randomQuote, interval);

}
</code></pre>

<p>This will still let in the occasional repeat. To stop repeats you randomly shuffle the array then random remove one of the first half, display it and push it to the end of the array. This will ensure that a min of n/2 (where n is number items) quotes will be displayed before there is a repeat.</p>

<p>Here are three utility functions for no repeat random selection of a fixed set of items. As compact form, I can not be bothered expanding them and would be used as follows.</p>

<pre><code>// quotes is the array of random quotes

// do once at start
randShuffle(quotes); // randomizes the array

// need mid point 
const quotedSizeHalf = quotes.length / 2;

// Do each time you want a new quote
const noRepeatRandQuote = randPlay(quotes, quotedSizeHalf);
</code></pre>

<p>The trade of is that you slightly increase the chance of a sequence. The distribution remains flat</p>

<pre><code>// The required functions.
const randI = r =&gt; Math.random() * r | 0;
const randShuffle = (a, l = a.length) =&gt; { while (l) { a.push(a.splice(randI(l--), 1)[0]) } return a }
const randPlay = (a, r, i = a.splice(randI(r), 1)[0]) =&gt; (a.push(i), i);
</code></pre>
    </div>