<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<pre class="lang-py prettyprint-override"><code>import os, sys, zipfile, fnmatch, glob, sys, time, datetime, smtplib, logging
</code></pre>

<p>is a prime example why you <a href="https://www.python.org/dev/peps/pep-0008/#imports" rel="nofollow noreferrer">should not cram all your imports on a single line</a>. Why? If you have a closer look, you will see that there is a double import of <code>sys</code>.</p>

<p>It is also good practice to group imports by "topic", i.e. imports that have similar purposes. Something like</p>

<pre class="lang-py prettyprint-override"><code>import os
import glob
import zipfile
import logging

import datetime
from datetime import date, datetime

import smtplib
from email import encoders
from email.mime.text import MIMEText
from email.mime.base import MIMEBase
from email.mime.multipart import MIMEMultipart
</code></pre>

<p>As you can see some of your imports also got lost on the way. Basically it was my IDE (Visual Studio Code) telling me that they're not used in your program. At the moment I'm under Windows so I cannot test run your code, so take that with a grain of caution.</p>

<hr>

<p>Another common practice is to wrap the parts of the code that are supposed to be run as script, with an <a href="https://docs.python.org/3/library/__main__.html" rel="nofollow noreferrer"><code>if name == "__main__":</code></a> clause. In order to do that, you should collect all the loose function falls immediately done after the function definition into that block.</p>

<pre class="lang-py prettyprint-override"><code>if __name__ == "__main__":
    logging_setup()
    checkdir()
    countbackups()
    back_up_zip()
    send_email()
</code></pre>

<hr>

<p>The major issue of your code is the excessive amount of global variables that make up 100% of your data flow between the functions. You should definitely think about wrapping most of the global variables into a <code>main</code> function or however you want to call it, and let your subroutines accept parameters. </p>

<p>Also please don't store user credentials in script files. Everything that is configurable (username, password, email address, smtp server, smtp port) should be stored in an external configuration file and/or environment variables. This also avoids lot of headaches if you ever get tempted to put your script under version control (think GitHub).</p>

<hr>

<p>I will not write much about the core code of your script, but just give a few hints towards minor improvements. I'm sure if there are major issues, other members of the community will pick them up.</p>

<p>The first thing would be string formatting. I think the style from the logging library carried over to the rest of your code. However, the "old" <code>%</code> string formatting can be replaced by the much more convenient <a href="https://realpython.com/python-f-strings/#f-strings-a-new-and-improved-way-to-format-strings-in-python" rel="nofollow noreferrer">f-strings</a> in Python 3. They are as easy to use as <code>zip_file_name_full = f"{todays_date}_{current_time}_{zip_name}"</code>.</p>

<p>Another best practice that is around quite a bith longer is to use the <a href="https://docs.python.org/3/tutorial/inputoutput.html#reading-and-writing-files" rel="nofollow noreferrer"><code>with</code> statement</a> when handling resources that need to be closed afterwards, such as files. With <code>attachment = open(filename, 'rb')</code> the file won't be closed when leaving the function (the <a href="https://stackoverflow.com/a/1834757/5682996">garbage collector will eventually take care</a> of it). Using <code>with open(filename, 'rb') as attachment:</code> instead ensures that the file gets closed no matter what, including exceptions of any kind in the code. As a matter of fact, <a href="https://docs.python.org/3/library/smtplib.html#smtplib.SMTP" rel="nofollow noreferrer"><code>smtplib.STMP</code></a> may also be used with <code>with</code>.</p>
    </div>