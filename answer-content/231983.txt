<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Naming</h1>

<p><a href="https://docs.python.org/3/library/functions.html#type" rel="nofollow noreferrer"><code>type</code> is a built-in function</a> in Python and therefore a name to avoid. Also, the widely followed Style Guide for Python Code aka <a href="https://www.python.org/dev/peps/pep-0008/#function-and-variable-names" rel="nofollow noreferrer">PEP 8 recommends</a> to use <code>lower_case_with_underscores</code> for variable names. <code>CamelCase</code> or more specifically <code>TitleCase</code> is usually "reserved" for class names.</p>

<h1>Duplicate code</h1>

<p>The <code>behaviour</code> function has an enormous amount of duplicated code. The code code for each of the if branches is basically the same, the only variable parts are the thresholds on which those branches are triggered and the amount of water that is either drained or added. Also the <code>type</code> parameter of <code>behavior</code> is redundant, since <code>self</code> already knows its type. Another thing that might need a closer look is the way you use the look. My threading is a bit rusty, but if I understood your code correctly, there is a separate lock for each instance of <code>Pipe</code>. As a consequence, there is no real synchronization between the threads and the happily check and modify <code>Pipe.waterVolume</code> as they go. But maybe I'm wrong here. Under the assumption that I'm right, let's look at a refactored version of your code:</p>

<pre><code>class Pipe:
    water_volume = 0
    _lock = threading.Lock()

    def __init__(self, type_, flow, activation_condition):
        self.pipe_type = type_
        self._flow = flow
        self._activation_condition = activation_condition

    @classmethod
    def pipe1(cls):
        """A pipe of type 1 adding 100l when the volume is below 700"""
        return Pipe(1, 100, lambda volume: volume &lt; 700)

    @classmethod
    def pipe2(cls):
        """A pipe of type 2 adding 80l when the volume is below 700"""
        return Pipe(2, 80, lambda volume: volume &lt; 700)

    @classmethod
    def pipe3(cls):
        """A pipe of type 3 draining 110l when the volume is above 600"""
        return Pipe(3, -110, lambda volume: volume &gt; 600)

    def behaviour(self):
        while True:
            with Pipe._lock:
                if self._activation_condition(Pipe.water_volume):
                    Pipe.water_volume += self._flow
                    action = "added" if self._flow &gt; 0 else "drained"
                    print(f"Pipe {self.pipe_type+1} {action} {abs(self._flow)} liters")
                    print(f"Volume is: {Pipe.water_volume}")
            time.sleep(1.5)
</code></pre>

<p>A lot has changed here, so lets go through step-by-step.</p>

<ol>
<li>I changed the naming to follow the PEP8 recommendation linked above.</li>
<li>The lock is now shared between all instances of the class (and their associated threads) the same way the water volume is.</li>
<li>The code duplication is gone. 

<ul>
<li>To reach that goal, the <code>Pipe</code> class was made more general in that it now accepts a flow rate (positive or negative) and a condition under which this pipe is active. To have to same "preconfigured" pipes as before, I added three <code>classmethod</code>s which act as a simple <a href="https://realpython.com/instance-class-and-static-methods-demystified/#delicious-pizza-factories-with-classmethod" rel="nofollow noreferrer">factory</a>. Each factory method also got a short description what to expect from the returned pipe.</li>
<li><code>behaviour</code> (in lack of a better idea for a name) is now quite a bit shorter since it's basically the same code for all instances which add live to add via their properties. The lock is now also acquired before checking on the current volume. From a coding standpoint that absolutely makes sense, it's however up for discussion if a real system could/would be setup with this level of synchronization. The console output is now also generically built from what is known about the pipe object currently in action. I used f-strings (available from Python 3.6+) to format the output contrary to the "old-style" <code>%</code> formatting. Maybe have a look at <a href="https://realpython.com/python-string-formatting/" rel="nofollow noreferrer">this blog post</a> to learn more about the different kinds of string formatting available to Python programmers.</li>
</ul></li>
</ol>

<h1>Make it stop</h1>

<p>I don't know if you have ever heard of the poem <a href="https://www.babelmatrix.org/works/de/Goethe%2C_Johann_Wolfgang_von/Der_Zauberlehrling/en/5462-The_Sorcerer_s_Apprentice" rel="nofollow noreferrer">"Der Zauberlehrling" (The Sorcerer's Apprentice)</a> by the German writer Johann Wolfgang von Goethe. In the poem, a young sorcerer summons a broom to help him carry water in order to clean his masters house. When he is done with the task, he tries to stop the broom from carrying more and more water into the house but fails to do so. From there on the events quickly spiral out of control until his master returns and finally takes control over the broom again.</p>

<p>Sounds vaguely familiar? Well, that's because once one has started your program, not even Ctrl+C will stop it (at least under Windows). <a href="https://stackoverflow.com/a/29237343/5682996">This answer</a> on SO could be used as a starting point to make that work.</p>

<hr>

<p>A few closing words on threading in Python, especially in the most widely used reference implementation CPython. CPython has something called the <a href="https://wiki.python.org/moin/GlobalInterpreterLock" rel="nofollow noreferrer">global interpreter lock</a> or GIL for short. The GIL takes care that <em>at any time there is only a single thread executing Python code</em>. That has significant impact on what you can expect to see when changing your pure Python code to multi-threading. Positive gains are mainly found when you have blocking IO operations or something like calls to a web API where the underlying code actively releases the GIL in order to allow other threads to do their work. Apart from that, the Python interpreter will also stop threads from time to time in order to allow over threads to run. When this happens depends on which Python version you are using (Python 2 vs. Python 3).</p>

<p>Since this is a topic that can quite involved, let me give you another <a href="https://realpython.com/python-gil/" rel="nofollow noreferrer">link to a blog post on <em>realpython</em></a> and to a <a href="https://stackoverflow.com/q/1294382/5682996">question/answer on Stack Overflow</a> to read more about that topic.</p>
    </div>