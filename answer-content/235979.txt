<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You can do it without the IEqualityComparer but does get a tad bit more complex.  Taking the gist of <a href="http://www.zerobugbuild.com/?p=213" rel="nofollow noreferrer">PairWithPrevious</a></p>

<p>You can create an extension that keeps track of the previous value.  The code that makes this look complex is the nullable decimal from the seed data.  We do this so that we know it came from seed data and we can skip it.  </p>

<pre><code>public static IObservable&lt;decimal&gt; DistinctVariance(this IObservable&lt;decimal&gt; source, decimal offSet)
{
    return source.Scan(Tuple.Create&lt;decimal?, decimal?&gt;(null, null), (tuple, item) =&gt; Tuple.Create&lt;decimal?, decimal?&gt;(tuple.Item2, item))
        .Where(tuple =&gt;  tuple.Item2 != null &amp;&amp; (tuple.Item1 == null || Math.Abs(tuple.Item1.Value - tuple.Item2.Value) &gt; offSet))
        .Select(tuple =&gt; tuple.Item2.Value);

}
</code></pre>

<p>This should act like your original function </p>

<p>if we have data like .80m, .81m, .82m, .83m, .80m it would emit .80m, .80m</p>

<p>Now if we wanted to emit once the last publish value has changed more than the variance we could write the function </p>

<pre><code>public static IObservable&lt;decimal&gt; DistinctVariance2(this IObservable&lt;decimal&gt; source, decimal offSet)
{
    return source.Scan((prior, current) =&gt; Math.Abs(prior - current) &gt; offSet ? current : prior)
        .DistinctUntilChanged();

}
</code></pre>

<p>Since we don't care about the previous value we can just keep storing the last value. 
Input of .80m, .81m, .82m, .83m, .80m  would emit .80, .82, .80</p>
    </div>