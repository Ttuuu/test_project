<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>We can use <code>doctest</code> instead of the asserts:</p>

<pre><code>import doctest

def find_vowel_square(strs: list):
    """Return the top left grid ref of any 2x2 sq composed of vowels only.

    &gt;&gt;&gt; find_vowel_square(strs=["aqree", "ukaei", "ffooo"])
    '3-0'
    &gt;&gt;&gt; find_vowel_square(["aqrst", "ukaei", "ffooo"])
    '2-1'
    &gt;&gt;&gt; find_vowel_square(strs=["gg", "ff"])
    'Not found'
    """
    # (snip implementation)

if __name__ == "__main__":
    import doctest
    doctest.testmod()
</code></pre>

<hr>

<p>I'd write a function with a more conventional interface: return positions as a list of two integers, and <code>None</code> when not found.  It's easy to provide a simple adapter from that to the strings that the problem statement requires.</p>

<p>Consider how you would extend this to find a <em>N</em>×<em>N</em> block of vowels in the grid.  Hint: for efficiency, we can start by reading only every <em>N</em>​th line and only when we find a suitable run of vowels, look up and down in the matrix.</p>
    </div>