<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Because this function is presented w/out a context to adequately test the code in, i.e. with sample data, a <code>Main</code> function, etc., the best way to critique this presently is against the design.</p>

<p>Let us apply some basic formatting so we can actually get a better idea of what's going on:</p>

<pre><code>public List&lt;DataForExcelExport&gt; GetData()
{
    var list = new List&lt;DataForExcelExport&gt;();
    int ROWS_PER_PAGE = 41;
    int MaxRow = 0;

    var dataAdapter = new SqlDataAdapter(selectCommandText, connectionString);
    var dataTable = new DataTable();
    dataAdapter.Fill(dataTable);
    bool flgLastPage = false;

    for (int i = 0; i &lt; dataTable.Rows.Count; i++)
    {
        DataRow dr = dataTable.Rows[i];
        var item = new DataForExcelExport();
        SetItemData(dr, item, true);

        if (i + ROWS_PER_PAGE &lt; dataTable.Rows.Count)
        {
            SetItemData(dataTable.Rows[i + ROWS_PER_PAGE], item, false);
        }

        list.Add(item);

        if (flgLastPage == false)
        {
            if ((i + 1) % ROWS_PER_PAGE == 0)
            {
                i += ROWS_PER_PAGE;

                int remaining = dataTable.Rows.Count - (i + 1);
                if (remaining &lt; 2 * ROWS_PER_PAGE)
                {
                    ROWS_PER_PAGE = remaining / 2 + remaining % 2;
                    flgLastPage = true;
                }
            }
        }

        int maxrow = i + ROWS_PER_PAGE;

        if (maxrow == dataTable.Rows.Count)
        {
            break;
        }
    }

    return list;
}
</code></pre>

<p>Ah, that's better. Now, to me, the orphaned variables <code>selectCommandText</code> and <code>connectionString</code> appear as though they're global constants since they are not parameters. If they are, they should look like <code>COMMAND_TEXT</code> and <code>CONNECTION</code> to align w/ C# standards. There are also other instances of poor variable casing and naming throughout this function. <code>ROWS_PER_PAGE</code> is cased as a local constant, which should hopefully sound like an oxymoron. This variable is even modified later on. It should be named something like <code>pageCap</code> or <code>pageLim</code>. Up next, we have <code>MaxRow</code>, which isn't even used. If it were, rather than being PascalCase, it should be CamelCase to align w/ C# standards for variables. I'd say <code>dataAdapter</code> and <code>dataTable</code> should just be <code>adapter</code> and <code>table</code>, since we already know what they're doing in this context. Now, applying these changes, we get:</p>

<pre><code>public List&lt;DataForExcelExport&gt; GetData()
{
    var list = new List&lt;DataForExcelExport&gt;();
    int pageLim = 41;

    var adapter = new Sqladapter(selectCommandText, connectionString);
    var table = new table();
    adapter.Fill(table);
    bool flgLastPage = false;

    for (int i = 0; i &lt; table.Rows.Count; i++)
    {
        DataRow dr = table.Rows[i];
        var item = new DataForExcelExport();
        SetItemData(dr, item, true);

        if (i + pageLim &lt; table.Rows.Count)
        {
            SetItemData(table.Rows[i + pageLim], item, false);
        }

        list.Add(item);

        if (flgLastPage == false)
        {
            if ((i + 1) % pageLim == 0)
            {
                i += pageLim;

                int remaining = table.Rows.Count - (i + 1);
                if (remaining &lt; 2 * pageLim)
                {
                    pageLim = remaining / 2 + remaining % 2;
                    flgLastPage = true;
                }
            }
        }

        if ((i + pageLim) == table.Rows.Count)
        {
            break;
        }
    }

    return list;
}
</code></pre>

<p>The looping is pretty straightforward; you just want to get a certain number of data entries w/in a page limit. To that extent, you could just do something like this:</p>

<pre><code>int pageLim = 80;

for (int i = 0; i &lt; pageLim &amp;&amp; i &lt; table.Rows.Count; ++i)
{
    // set up `item` var using `row`
    list.Add(item);
}
</code></pre>

<p>This will create a single item page. Now, if you want multiple pages, I'd suggest looking into a <a href="https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.dictionary-2?view=netframework-4.8" rel="nofollow noreferrer">Dictionary</a> rather than using index-modulo magic in a flat list. This way, you can have page names rather than just page numbers, or any other object. If all you'll use are page numbers, a multi-dimensional list should suffice. That would look something like this:</p>

<pre><code>int i = -1;
int pageLim = 80;
List pages = new List();
List page = new List();

foreach (var row in table.Rows)
{
    ++i;

    // set up `item` var using `row`

    if (i &lt; pageLim) {
        page.Add(item);
    } else if (i == (pageLim - 1) || i == (table.Rows.Count - 1)) {
        page.Add(item); // add the last item
        pages.Add(page);
        page.clear();
        i = -1;
    }
}
</code></pre>

<p>Then just return <code>pages</code>, a list of lists w/ at most 80 items per page, and access a page like <code>pages[0]</code>. If pages have a lot of metadata, creating a <code>Page</code> object and just having a flat list of that is also possible. </p>
    </div>