<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You seem to be very much over-complicating this. Here is an efficient solution:</p>

<p><strong>Assuming <code>a</code> and <code>b</code> are positive numbers and the result is a valid 32-bit integer value</strong></p>

<pre><code>public int Multiply(int a, int b)
{
    if (a &lt; 0 || b &lt; 0)
        throw new ArgumentException("Numbers must be positive");

    var min = Math.Min(a, b);
    var max = Math.Max(a, b);

    if (min == 0 || max == 0)
        return 0;
    else if (min == 1)
        return max;

    int s = min &gt;&gt; 1;
    int halfProduct = Multiply(s, max);

    if (min % 2 == 0)
        return halfProduct + halfProduct;
    return halfProduct + halfProduct + max;
}
</code></pre>

<p>So what is happening here? First we need to sort these by the smaller and larger numbers, this reduces the number of iterations required. If either of the numbers is zero, then we return zero (since <code>x*0 == 0</code>). If the minimum number is 1, then we return max (since <code>x*1 == x</code>). </p>

<p>Now we can apply the shift operator since shifting one to the right divides the number by 2. By recursion we keep doing this until <code>Multiply</code> returns <code>0</code> or <code>max</code>. We can then determine the value if <code>min</code> is even by adding the two half-products or if <code>min</code> is odd by adding the two half products and max. </p>

<p>Again, even in your original solution this will break for negative numbers. You can code around that by switching the sign (<code>Math.Abs</code>) and swapping the sign at the end (<code>0 - return value</code>, unless both are negative then you leave it positive). I'll leave that as an exercise for you.</p>
    </div>