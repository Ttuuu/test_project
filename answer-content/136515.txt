<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Validation</h3>
<p>A public method should validate its method parameters. It doesn't matter if it is only used inside one project like <code>RubberDuck</code> or if it is used by other projects or developers.</p>
<blockquote>
<pre><code>public CharacterClass(string specifier)
{
    Match m = Matcher.Match(specifier);  
</code></pre>
</blockquote>
<p>here <code>Matcher.Match()</code> would throw an <code>ArgumentNullException</code> which I would throw as well if <code>specifier</code> would be <code>null</code> but if you throw it at your own validation you wouldn't expose that you use a <code>Regex</code>.</p>
<p>The same is true for the constructors of <code>Group</code> and <code>Literal</code>.</p>
<p>A bigger issue will come in <code>RegularExpression.Parse(string)</code> because here you are exposing <code>internal</code> details of your implementation. If the passed in <code>specifier == null</code> the stacktrace would contain that you have called a method named <code>TryParseAsAtom()</code> and that the exception had been thrown by calling the <code>Regex.Match()</code> method.</p>
<hr>
<h3>Regex</h3>
<p>I don't know how often the <code>Regex</code>es are used but you should consider to use the overloaded constructor <a href="https://msdn.microsoft.com/en-us/library/h5845fdz(v=vs.110).aspx" rel="noreferrer"><code>Regex(string, RegexOptions)</code></a> so you could use the <code>Compiled</code> enum for the <a href="https://msdn.microsoft.com/en-us/library/h5845fdz(v=vs.110).aspx" rel="noreferrer"><code>RegexOptions</code></a> to have the regex compiled which will be faster if called often.</p>
<hr>
<h3>CharacterClass</h3>
<blockquote>
<pre><code>public static readonly string Pattern = @"(?&lt;!\\)\[(?&lt;expression&gt;.*?)(?&lt;!\\)\]";
private static readonly Regex Matcher = new Regex("^" + Pattern + "$");

private readonly bool _inverseMatching;
public bool InverseMatching { get { return _inverseMatching; } }
private readonly IList&lt;string&gt; _characterSpecifiers;
public IList&lt;string&gt; CharacterSpecifiers { get { return _characterSpecifiers; } }
private readonly string _specifier;
</code></pre>
</blockquote>
<p>Instead of adding a <code>private</code> backing field for your properties you could simply have a <code>private set;</code> which would read nicer like so</p>
<pre><code>public static readonly string Pattern = @"(?&lt;!\\)\[(?&lt;expression&gt;.*?)(?&lt;!\\)\]";
private static readonly Regex Matcher = new Regex("^" + Pattern + "$");

public bool InverseMatching { get; private set; }
public IList&lt;string&gt; CharacterSpecifiers { get; private set; }
private readonly string _specifier;
</code></pre>
<p>If you are using C# 6 then you could get rid of the <code>private set;</code> all together which would make it nicer.</p>
<p>Maybe I would let the <code>public IList&lt;string&gt; CharacterSpecifiers { get { return _characterSpecifiers; } }</code> stay with a backing field but would  return either as a <code>ReadOnlyCollection&lt;string&gt;</code> like so</p>
<pre><code>public ReadOnlyCollection&lt;string&gt; CharacterSpecifiers { get { return _characterSpecifiers.AsReadOnly(); } }   
</code></pre>
<p>or at least would return a new <code>List&lt;string&gt;</code> like so</p>
<pre><code>public IList&lt;string&gt; CharacterSpecifiers { get { return new List&lt;string&gt;(_characterSpecifiers); } } 
</code></pre>
<p>This prevents that items of the <code>IList</code> could be changed.</p>
<p>While we are speaking about properties, you should stick to one style. Right now you have single lined properties like above and also multi lined properties like</p>
<blockquote>
<pre><code>public string Specifier
{
    get
    {
        return _specifier;
    }
}  
</code></pre>
</blockquote>
<hr>
<h3>Equals()</h3>
<p>I avoid the <code>is</code> operator if I later on cast the object. The <code>is</code> operator just tries to cast the object to the desired type and returns <code>true</code> if it can be casted. So a softcast using <code>as</code> and a <code>null</code> check is doing the same but involves less casting like so</p>
<pre><code>public override bool Equals(object obj)
{
    var item = obj as CharacterClass
    if (item != null)
    {
        return item._specifier.Equals(_specifier);
    }
    return false;
}
</code></pre>
<hr>
<h3>Quantifier constructor</h3>
<p>if <code>expression.Length == 0</code> you should return early following with the check <code>expression.Length == 1</code> and returning early as well. This saves you one horizontal identation level which makes your code more readable like so</p>
<pre><code>public Quantifier(string expression)
{
    if (expression.Length == 0)
    {
        Kind = QuantifierKind.None;
        MaximumMatches = 1;
        MinimumMatches = 1;
        return;
    }
    if (expression.Length == 1)
    {
        switch (expression[0])
        {
            case '*':
                MinimumMatches = 0;
                MaximumMatches = int.MaxValue;
                Kind = QuantifierKind.Wildcard;
                break;
            case '+':
                MinimumMatches = 1;
                MaximumMatches = int.MaxValue;
                Kind = QuantifierKind.Wildcard;
                break;
            case '?':
                MinimumMatches = 0;
                MaximumMatches = 1;
                Kind = QuantifierKind.Wildcard;
                break;
            default:
                throw new ArgumentException("Passed Quantifier String was not an allowed Quantifier");
        }
        return;
    }

    Kind = QuantifierKind.Expression;
    Match m = Matcher.Match(expression);
    if (!m.Success)
    {
        throw new ArgumentException(string.Format("Cannot extract a Quantifier from the expression {1}", expression));
    }
    int minimum;
    // shouldn't ever happen
    if (!int.TryParse(m.Groups["min"].Value, out minimum))
    {
        throw new ArgumentException("Cannot Parse Quantifier Expression into Range");
    }
    MinimumMatches = minimum;

    string maximumString = m.Groups["max"].Value; // drop the comma
    if (maximumString.Length &gt; 1)
    {
        int maximum;
        // shouldn't ever happen
        if (!int.TryParse(maximumString.Substring(1), out maximum))
        {
            throw new ArgumentException("Cannot Parse Quantifier Expression into Range");
        }
        MaximumMatches = maximum;
    }
    else if (maximumString.Length == 1) // got a comma, so we're unbounded
    {
        MaximumMatches = int.MaxValue;
    }
    else // exact match, because no comma
    {
        MaximumMatches = minimum;
    }

}
</code></pre>
<p>I have replaced the <code>expression.ToCharArray()[0]</code> with just <code>expression[0]</code> as well.</p>
<p>We also could remove small code duplication if we preset some of the properties outside of the <code>switch</code> like so</p>
<pre><code>if (expression.Length == 1)
{
    MinimumMatches = 0;
    MaximumMatches = int.MaxValue;
    Kind = QuantifierKind.Wildcard;

    switch (expression[0])
    {
        case '*':
            break;
        case '+':
            MinimumMatches = 1;
            break;
        case '?':
            MaximumMatches = 1;
            break;
        default:
            throw new ArgumentException("Passed Quantifier String was not an allowed Quantifier");
    }
    return;
}
</code></pre>
    </div>