<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Stylistic (not asked) the wording can be more to the point. Sometimes that gives an optimisation idea.</p>

<p>Much elegance one might not expect, shifting in arrays in C. But I did find a spot.</p>

<p>As such:</p>

<pre><code>void shl(uint8_t * const words, uint_fast_t n) {
    const int word_bits = 8;
    const int word_count = 256 / word_bits;
    const int word_shift = n / word_bits;
    const int bit_shift = n % word_bits;
    if (word_shift != 0) {
        for (int i = word_count - 1 - word_shift; i &gt;= 0; --i) { // Or memcpy
            words[i + word_shift] = words[i];
        }
        for (int i = word_shift - 1; i &gt;= 0; --i) { // Or memset
            words[i] = 0;
        }
    }
    uint8_t carry = 0;
    uint8_t mask = (1 &lt;&lt; word_bits) - 1;
    for (int_fast8_t i = word_shift; i &lt; word_count; ++i) {
        uint8_t m = carry;
        carry = (words[i] &gt;&gt; (word_bits - bit_shift)) &amp; mask;
        words[i] = (words[i] &lt;&lt; bit_shift) | m;
    }
}
</code></pre>

<p>As you see I replaced one decreasing loop + plus handling of <code>[0]</code> with a single increasing loop with a <code>carry</code>.</p>

<p>I used uint8_t instead of uint64_t (which is generally is faster), as the <code>carry</code> could then be done inside a larger uint16_t:</p>

<pre><code>    uint16_t carry = 0;
    uint16_t mask = (1 &lt;&lt; word_bits) - 1;
    for (int_fast8_t i = word_shift; i &lt; word_count; ++i) {
        uint8_t m = carry;
        carry = ((uint16_t)words[i]) &lt;&lt; bit_shift;
        words[i] = ((uint8)carry) | m;
        carry &gt;&gt;= bits_shift;
    }
</code></pre>

<p>This is my spotted "improvement" (which has to be proven by timing).</p>

<p><code>uint32_t</code> instead of <code>uint64_t</code> would be a middle way.</p>

<p>Which is realy faster has to be determined.</p>

<p>By the way in C++'s <code>std::bitset</code> would be more elegant.</p>
    </div>