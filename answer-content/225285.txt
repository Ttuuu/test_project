<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You can see my suggested improvements <a href="https://codepen.io/a-morn/pen/xvdVZm" rel="nofollow noreferrer">here</a>. As the previous guy, I'm also biased to a more functional style. This is what I've done:</p>

<ul>
<li><p>As previous answer pointed out the code is poorly formatted. I ran <a href="https://prettier.io/playground" rel="nofollow noreferrer">Prettier with standard configuration</a></p></li>
<li><p>I removed some unnecessary comments. It's obvious that <code>this.bet = bet</code> is assigning the bet value.</p></li>
</ul>

<pre class="lang-js prettyprint-override"><code>constructor(bet) {
    // assigning the bet value
    this.bet = bet;
    // default values, no cards dealt yet
    this.cards = [];
    ...
}
</code></pre>

<ul>
<li>There's a <code>*=</code> operator you can use like <code>foo *= 2</code> instead of <code>foo = 2 * foo</code></li>
<li>If you use template literals, then there's no point in also using the <code>+</code> operator for concatenation (note that template literals allow multi line).</li>
<li>This is a bit opinionated, but I think you always should use braces for if-statements</li>
<li>Use <code>some</code> if you want to know if there's any elements that fulfills the condition (a boolean) and <code>filter().length</code> if you want to know how many they are (a number). In this case we want the boolean that says if any elements exist and we don't care about how many the elements are outside of that. Using the right one improves readability.</li>
</ul>

<pre class="lang-js prettyprint-override"><code>const handsRemaining = game.hands.filter(x =&gt; !x.finished).length;
</code></pre>

<p>to</p>

<pre class="lang-js prettyprint-override"><code>const isHandsRemaining = game.hands.some(x =&gt; !x.finished);
</code></pre>

<ul>
<li>You can turn some of the if-else-blocks with string concatenation to template literals with ternaries for better readability.</li>
</ul>

<pre class="lang-js prettyprint-override"><code>buttons += `&lt;div&gt;`;
if (busted) {
  buttons += `BUSTED`;
} else {
  buttons += textResult;
}
buttons += `&lt;/div&gt;`;
</code></pre>

<p>to</p>

<pre class="lang-js prettyprint-override"><code>buttons += `&lt;div&gt;${busted ? 'BUSTED' : textResult}&lt;/div&gt;`;
</code></pre>

<ul>
<li>Use destructuring over dot notation where applicable (somewhat opionated)</li>
<li>Dictate which players exist in one place (I just added a const <code>players</code>, but this would typically come from the server) instead of having it spread out in the markup and various places in the code</li>
<li>Favor <code>Array.map</code> over <code>Array.forEach</code>.</li>
<li>Favor <code>const</code> over <code>let</code>.</li>
</ul>

<p>Also <code>shuffle</code> should be named after the shuffling algorithm you use or have a comment that explains what algorithm it is.</p>

<p>There's more improvements to be done, but at least this is a start :)</p>

<p>Edit: typos</p>
    </div>