<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>General Observations</strong><br>
The code has improved from the last version quite a bit. It now utilizes a more common algorithm for getting primes and this new algorithm should perform better. The code in hashcons.c is less complex and most or all of any possible bugs have been removed (thank you for removing the possible recursion).</p>
<p>I have taken the liberty of adding the files that were not included in both reviews from the repository. You can delete this if you like, but I am reviewing them.</p>
<p>Upate the repository readme file with the explanation of what a hashcons is that I had in my original review, as well as an explanation of what hashcons.c and prime.c do.</p>
<p>The most major area for improvement is memory allocation in C The rest of this review is organized by listing the items that can be improved in descending order from most major to most minor.</p>
<p><strong>Test for Possible Memory Allocation Errors</strong><br>
I addressed this in the first review, however, I will address it again because it is very important.</p>
<p>In modern high level languages such as C++, memory allocation errors throw an exception that the programmer can catch. This is not the case in the C programming language. As the code is now, if this code was used in software to control an airplane during flight <strong>I would not get on that airplane</strong>, there is inherent <code>Unknown Behavior</code> (UB) in how <code>malloc()</code> and <code>calloc()</code> are used in the code, this is especially true if the code is working in a limited memory application such as embedded control systems. The failure of memory allocation in C on regular computers is less of an issue since there is a lot of memory, but in limited environments this is still important.</p>
<p>Here is the code I am talking about:</p>
<p>In main.c:</p>
<pre><code>int main() {
    HASH_CONS_TABLE hc = malloc(sizeof(struct hash_cons_table));
    hc-&gt;hashf = hash;
    hc-&gt;equalf = equal;
    hc-&gt;size = 0;

DUMMY create_dummy(int key) {
    DUMMY dummy = malloc(sizeof(dummy));
    dummy-&gt;key = key;
    return dummy;
}
</code></pre>
<p>In hashcons.c</p>
<pre><code>void hc_initialize(HASH_CONS_TABLE hc, const int capacity) {
    hc-&gt;capacity = capacity;
    hc-&gt;table = calloc(hc-&gt;capacity, sizeof(*hc-&gt;table));
    hc-&gt;size = 0;
}
</code></pre>
<p>In prime.c</p>
<pre><code>void initialize_sieve_of_eratosthenes(int n) {
    if (primesTable.table == NULL) {
        primesTable.size = n;
        primesTable.table = malloc(n * sizeof(bool));
        memset(primesTable.table, true, primesTable.size);
    } else {
        int original_size = primesTable.size;
        bool *original_table = primesTable.table;

        primesTable.size = n;
        primesTable.table = malloc(n * sizeof(bool));
        memset(primesTable.table, true, primesTable.size);
        memcpy(primesTable.table, original_table, original_size * sizeof(bool));
        free(original_table);
    }
</code></pre>
<p>Each call of <code>malloc()</code> or <code>calloc()</code> should be followed by a test to see if the pointer is <code>NULL</code> to prevent accessing the address <code>0</code>, this will prevent UB.</p>
<p>Examples:</p>
<pre><code>int main() {
    HASH_CONS_TABLE hc = malloc(sizeof(struct hash_cons_table));
    if (hc == NULL)
    {
        fprintf(stderr, "Memory Allocation of HASH_CONS_TABLE hc error in main().\nExiting Program.");
        return(EXIT_FAILURE);
    }
    hc-&gt;hashf = hash;
    hc-&gt;equalf = equal;
    hc-&gt;size = 0;

DUMMY create_dummy(int key) {
    DUMMY dummy = malloc(sizeof(dummy));
    if (dummy == NULL)
    {
        fprintf(stderr, "Memory Allocation error in create_dummy().\nExiting Program.");
        exit(EXIT_FAILURE);
    }
    dummy-&gt;key = key;
    return dummy;
}

void initialize_sieve_of_eratosthenes(int n) {
    if (primesTable.table == NULL) {
        primesTable.size = n;
        primesTable.table = malloc(n * sizeof(bool));
        if (primesTable.table == NULL)
        {
            fprintf(stderr, "Memory Allocation of primesTable.table error in initialize_sieve_of_eratosthenes().\nExiting Program.");
            exit(EXIT_FAILURE);
        }
        memset(primesTable.table, true, primesTable.size);
    } else {
        int original_size = primesTable.size;
        bool *original_table = primesTable.table;

        primesTable.size = n;
        primesTable.table = malloc(n * sizeof(bool));
        if (primesTable.table == NULL)
        {
            fprintf(stderr, "Memory Allocation of primesTable.table error in initialize_sieve_of_eratosthenes().\nExiting Program.");
            exit(EXIT_FAILURE);
        }
        memset(primesTable.table, true, primesTable.size);
        memcpy(primesTable.table, original_table, original_size * sizeof(bool));
        free(original_table);
    }
</code></pre>
<p><strong>Convention When Using Memory Allocation in C</strong><br>
When using <code>malloc()</code>, <code>calloc()</code> or <code>realloc()</code> in C a common convetion is to <code>sizeof(*PTR)</code> rather <code>sizeof(PTR_TYPE)</code>, this make the code easier to maintain and less error prone, since less editing is required if the type of the pointer changes.</p>
<p>Example:</p>
<pre><code>int main() {
    HASH_CONS_TABLE hc = malloc(sizeof(*hc));        // &lt;&lt; What the pointer points to rather than sizeof struct.
    if (hc == NULL)
    {
        fprintf(stderr, "Memory Allocation of HASH_CONS_TABLE hc error in main().\nExiting Program.");
        return(EXIT_FAILURE);
    }
    hc-&gt;hashf = hash;
    hc-&gt;equalf = equal;
    hc-&gt;size = 0;
</code></pre>
<p><strong>Improve Testing</strong><br>
Move all the testing functions into test.c, and provide interfaces for them, you might also want to consider moving the DUMMY test struct to test.c as well.</p>
<p>Make an overall test function in test.c and test.h that will test everything, have it call the current test functions.</p>
<p>Increase the test sample size to stress test the hashcons algorithm and the prime algorithm.</p>
<p>Take the overall start and end time of the functions to get an average value of the time insertion takes (you may not need this if you profile the code).</p>
<p>Profile the current code and the original code to see if there is an improvement in insertion and search times.</p>
<p><strong>Missing Edit in main.c</strong><br>
While most of the program has been converted to use <code>stdbool.h</code>, <code>main.c</code> still includes <code>common.h</code> and uses FALSE rather than false in the function <code>equal()</code> which also returns <code>int</code> rather than <code>bool</code>.</p>
    </div>