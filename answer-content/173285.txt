<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>welcome to Code Review and the Python language. You're off to a good start. Here are some tips to help you on your way.</p>

<ol>
<li><p>Consider following a style guide like PEP8. It will make your naming conventions much more consistent as well. Most developers will name classes with upper camel case, variables with lower snake case, and class methods with lower snake case.</p></li>
<li><p>Let's talk organization and architecture. Your OOP doesn't look too bad, but here's what I would suggest:</p>

<pre><code># GameItems.py
class Items:
    def __init__(...):
        ...

class DoorKeys(Items):
    ...

class Weapon(Items):
    ...

Sword = Weapon(...)
Knife = Weapon(...)
...
Flower = Items(...)
</code></pre>

<p>This allows you to keep all your item related declarations together. Also, <code>DoorKeys</code> inherits from <code>Items</code>, but it has the same constructor and fields, which makes it seem redundant. You don't seem to be doing any typechecks with it, so you can just instantiate keys with the <code>Items</code> class. (Consider naming the classes <code>Item</code> and <code>DoorKey</code>, because each class represents a single instance of that object). You can then just check if the item name matches the room's required key name.</p>

<pre><code># World.py

from GameItems import *

class Room:
    ...

class Player:
    ...

class Location:
    ...

class Bag:
    ...


WORLD = {}
WORLD['introd'] = ...
...
WORLD['cottage'] = ...
</code></pre>

<p>This allows you to keep all the world related logic in one file. You would then create a separate Python file that takes this and runs the game.</p>

<pre><code># Game.py

from World import *
...

def main():
    player = Player("Jeff", 100)
    ...
    command = ''
    while command != '':
        ...
        # game code here

if __name__ == '__main__':
    main()
</code></pre>

<p>One important thing here is that you should put the game logic inside an <a href="https://stackoverflow.com/questions/419163/what-does-if-name-main-do"><code>if __name__ == '__main__':</code></a> guard. This prevents the logic inside from being exposed globally. This method of organization is just one way to do it. Of course, there are other ways to organize your game that make sense, but in general you should group together similar things and prevent circular dependencies.</p></li>
<li><p>Avoid accessing member variables directly.</p>

<pre><code>...
if command in Location.room.exits:
...
</code></pre>

<p>For a small code project like this, it's not that big of a problem, but in the future consider defining accessors and mutators like <code>getExits()</code> to prevent accidental modification.</p></li>
</ol>

<p>Happy coding!</p>
    </div>