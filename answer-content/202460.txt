<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Thank you, thank you, thank you!!  I have been tortured by this very problem and never could figure out why.</p>

<p>I would simplify the factory by storing the Object pointer and making the <strong>IWeakReference_Object</strong> the default member of the class.  </p>

<p>Returning a self reference is great for creating anonymous classes. But I think that it is overkill for this here because I can't think of a scenario where it would be used outside of the Create method.  Basically, you are adding 3 lines of code to save one.  That being said, If add it to one class I will usually added it to all my classes for consistency.</p>

<h2>WeakReference:Class</h2>

<pre><code>Attribute VB_PredeclaredId = True
Option Explicit
Implements IWeakReference

#If Win64 Then
    Private Declare PtrSafe Sub CopyMemory Lib "kernel32.dll" Alias "RtlMoveMemory" (hpvDest As Any, hpvSource As Any, ByVal cbCopy As LongPtr)
#Else
    Private Declare Sub CopyMemory Lib "kernel32.dll" Alias "RtlMoveMemory" (hpvDest As Any, hpvSource As Any, ByVal cbCopy As Long)
#End If

Public hValue As Long

Private Property Get IWeakReference_Object() As Object
Attribute Value.VB_UserMemId = 0
' Bruce McKinney's code for getting an Object from the object pointer:
    Dim objT As Object
    CopyMemory objT, hwnd, 4
    Set IWeakReference_Object = objT
    CopyMemory objT, 0&amp;, 4
End Property

Public Function Create(value As Object) As WeakReference
    Dim ref As New WeakReference
    ref.hValue = ObjPtr(value)
    Set Create = ref
End Function
</code></pre>

<h2>TheChild:Class</h2>

<pre><code>Private ref As WeakReference

Public Property Get Parent() As TheParent
    Set Parent = ref
End Property

Public Property Set Parent(ByVal value As TheParent)
    Set ref = WeakReference.Create(value)
End Property

Private Sub Class_Terminate()
    Debug.Print TypeName(Me)
    Set ref = Nothing
End Sub
</code></pre>

<hr>

<h2>Alternate Approach</h2>

<p>Here I just store the pointer handle (hwnd) of the objects and have a factory create weak referenced objects from the handles.  The advantage of this approach is that you only need to import a single class into your project.</p>

<p>That being said, the Interface does seem like a more natural fit.  If the VBA supported packages I would go with use the IWeakReference Interface.</p>

<h2>ObjectFactory:Class</h2>

<pre><code>Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Option Explicit

#If Win64 Then
    Private Declare PtrSafe Sub CopyMemory Lib "kernel32.dll" Alias "RtlMoveMemory" (hpvDest As Any, hpvSource As Any, ByVal cbCopy As LongPtr)
#Else
    Private Declare Sub CopyMemory Lib "kernel32.dll" Alias "RtlMoveMemory" (hpvDest As Any, hpvSource As Any, ByVal cbCopy As Long)
#End If

Function getObjectHwnd(Object As Object) As Long
    getObjectHwnd = ObjPtr(Object)
End Function

Function getObject(hwnd As Long) As Object
Attribute Value.VB_UserMemId = 0
' Bruce McKinney's code for getting an Object from the object pointer:
    Dim objT As Object
    CopyMemory objT, hwnd, 4
    Set getObject = objT
    CopyMemory objT, 0&amp;, 4
End Function
</code></pre>

<h2>Child:Class</h2>

<pre><code>Option Explicit

Private hParent As Long

Public Property Get Parent() As TheParent
    Set Parent = ObjectFactory.getObject(hParent)
End Property

Public Property Set Parent(ByVal value As TheParent)
    hParent = ObjectFactory.getObjectHwnd(value)
End Property

Private Sub Class_Terminate()
    Debug.Print TypeName(Me), Parent.Name
End Sub
</code></pre>
    </div>