<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Thanks for sharing your code. </p>

<p>I fully agree with the answers of Ralf and @kraskevich.</p>

<p>But Id like to add something:</p>

<h1>defensive coding</h1>

<p>Your code risks to throw <code>NullPointerException</code>s:</p>

<pre><code>    Operation operationMapValue = null;
    if (operationMap.containsKey(operation)) {
        operationMapValue = operationMap.get(operation);
        System.out.println(operationMap.get(operation));
    } else {
        System.out.println("Invalid sign");
    }
    return operationMapValue.calculateResult(operand1, operand2);
</code></pre>

<p>In the case of an "invalid sign" the last line gets executed an an NPE is thrown because the variable <code>operationMapValue</code> still points to <code>null</code>.</p>

<p>You should have written it this way:</p>

<ul>
<li><p>create a special <em>instead of null</em> implementation of your interface:</p>

<pre><code>public class NoOperationFound implements Operation {
   @Override
   public double calculateResult(double left, double right) {
      throw new InputMismatchException("invalid operator sign");
   }
 }
</code></pre></li>
<li><p>use the <code>getOrDefault()</code> method of <code>Map</code> (in java 8)</p>

<pre><code>  Operation operationMapValue = operationMap.getOrDefault(operation,new NoOperationFound());
  return operationMapValue.calculateResult(operand1, operand2);
</code></pre></li>
</ul>

<p>This will throw the expected exception without having to check explicitly.</p>

<p>In this simple version you could have a <em>constant</em> of <code>NoOperationFound</code> as suggested by @kraskevich but with a little variation the error message could be clearer:</p>

<pre><code>    public class NoOperationFound implements Operation {
       private final char sign;
       public NoOperationFound(char sign){
           this.sign = sign;
       }
       @Override
       public double calculateResult(double left, double right) {
          throw new InputMismatchException("invalid operator sign : "+sign);
       }
     }


      Operation operationMapValue =
          operationMap.getOrDefault(operation,new NoOperationFound(operation));
</code></pre>
    </div>