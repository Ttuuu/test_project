<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>If you're going to use flex, <strong><em>use</em></strong> flex! Flex inherently helps with margin control.</p>

<p>Margins are great, but you're essentially saying, I want to learn flex, except when it's easier/convenient to go back to what I've been doing. </p>

<p>Some key topics of interest regarding your concerns:</p>

<blockquote>
  <p>To maintain a good page structure for SEO...</p>
</blockquote>

<p>Great! That's a good attitude to have. You should always follow the W3C specs for best practices of what content goes where. If you don't like reading long-winded documentation.. <a href="https://developer.mozilla.org/en-US" rel="noreferrer">MDN</a> always has a great synopsis of elements/attributes/rules/principals/best practices (usually in a blue box). </p>

<p>Buttttt having a header inside <code>&lt;nav&gt;</code> tags isn't necessarily against standards, in fact, all <code>flow content</code> is permitted. <a href="https://html.spec.whatwg.org/multipage/sections.html#the-nav-element" rel="noreferrer">ref</a> </p>

<p>Additionally, in your circumstance, it acts as a main content link, so I would argue it belongs there.</p>

<p>However, keeping in mind the importance of a semantic elements purpose is a very good outlook imo.</p>

<p>Furthermore on this point, <em>I can not tell you how many developers overlook accessibility</em>. Not only does it help you with SEO, it absolutely is critical to how disabled persons rely on their devices. It often takes trivial amount of time to make a website accessible friendly, but developers generally don't consider it because either they themselves aren't disabled and it's in the back of their mind, they haven't had any complaints, they don't work for someone who cares to implement it. But that is beyond the scope of the question, either way you are on the right track with that mentality. </p>

<blockquote>
  <p>I've recently migrated away from floats and have started using flexbox </p>
</blockquote>

<p>Not a bad thing, will definitely make it easier for you, but try not to consider them synonyms. Float properties apply to <em>all</em> elements, even flex, but flex properties do not apply to all elements. With the following caveats:</p>

<ul>
<li>float applies but no effect is taken if <code>display</code> = none</li>
<li>float applies but no effect is taken if element is flex</li>
</ul>

<p>An example of why they are not synonymous is <code>float:left</code> for an <code>&lt;img&gt;</code> tag around text will allow that text to flow around the content, whereas flexbox is ... well a box and the text will maintain in it's rect bounds instead of wrapping around the box next to it.</p>

<p>An important thing to embrace with flex is that as soon as you set an element to <code>display: flex</code> <strong>the direct children of that container become flex items</strong>. So note the hierarchy there. </p>

<p>Take this example where 'C' is not a direct descendant of <code>.wrapper</code>, therefor it doesn't inherit properties.</p>

<p></p><div class="snippet" data-lang="js" data-hide="true" data-console="false" data-babel="false">
<div class="snippet-code snippet-currently-hidden">
<pre class="snippet-code-css lang-css prettyprint-override"><code>.wrapper {
  display: flex;
  flex-flow: column nowrap;
  
  height: 175px; padding: 10px; border-color: red;
}

.b, .c {
   float: right;
   border-color: green;
}
.c {
  background-color: lightgrey;
} 

/** irrelevant **/
div {
  height: 50px;
  border: 1px solid;
}
.a { border-color: blue; }</code></pre>
<pre class="snippet-code-html lang-html prettyprint-override"><code>&lt;div class="wrapper"&gt;
  &lt;div class="a"&gt;:::::: A :::::::&lt;/div&gt;
  &lt;div class"b"&gt;
    &lt;div&gt;:::::: B ::::::&lt;/div&gt;
    &lt;div class="c"&gt;:::::: C ::::::&lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;</code></pre>
</div>
</div>


<p>I bring that up, because navigation items are generally top-level children, so we can consider that in circumstances like <code>margin-top: -24px</code>. You can take the following snippet (unchanged from OP, other than color for effect) and see why it can be problematic real fast, and worse, it can easily create a domino effect where you will have to add margins to a lot of other things just to create synergy:</p>

<p></p><div class="snippet" data-lang="js" data-hide="true" data-console="true" data-babel="false">
<div class="snippet-code snippet-currently-hidden">
<pre class="snippet-code-css lang-css prettyprint-override"><code>/*------------------------
Default grid
-------------------------*/

.flex {
  display: flex;
  flex-flow: row wrap;
  justify-content: space-between;
}

.col {
  flex: 1;
}


/*------------------------
Columns
-------------------------*/

.has-2-columns .col {
  flex: none;
}

.has-2-columns .col {
  width: 49%;
}


/*------------------------
Logo
-------------------------*/

.site-title {
  position: relative;
  /* Enables z-index */
  z-index: 1;
  /* Positions logo above .main-navigation */
  width: 80px;
  margin: 0 auto;
  background: #ccc;
}


/*------------------------
Main navigation
-------------------------*/

.main-navigation {
  position: relative;
  margin-top: -24px;
  /* Brings nav inline with .site-branding */
  z-index: 0;
  /* Ensures nav is below .site-branding */
}

.main-navigation ul {
  list-style: none;
  padding: 0;
  margin: 0;
}

.main-navigation ul li {
  display: inline-block;
}

.left-menu {
  text-align: left;
}

.left-menu li {
  margin-right: 24px;
}

.right-menu {
  text-align: right;
}

.right-menu li {
  margin-left: 24px;
}

.site-header {
  background: pink;
}</code></pre>
<pre class="snippet-code-html lang-html prettyprint-override"><code>&lt;header class="site-header"&gt;

  &lt;div class="site-branding"&gt;
    &lt;h1 class="site-title"&gt;&lt;a href="#" rel="home"&gt;Demo&lt;/a&gt;&lt;/h1&gt;
  &lt;/div&gt;

  &lt;nav class="main-navigation flex has-2-columns"&gt;

    &lt;div class="left-menu col"&gt;
      &lt;ul id="left-menu" class="menu"&gt;
        &lt;li&gt;&lt;a href="#"&gt;Home&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href="#"&gt;About&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/div&gt;

    &lt;div class="right-menu col"&gt;
      &lt;ul id="right-menu" class="menu"&gt;
        &lt;li&gt;&lt;a href="#"&gt;Contact&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href="#"&gt;Store&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/div&gt;

  &lt;/nav&gt;

&lt;/header&gt;</code></pre>
</div>
</div>


<p>So that is why I say, if you're going to use flex, then use flex! <em>Take advantage of it. Let it do all this work and calculations for you</em>. Additionally, I don't know if you have begun plans for this or not, but this isn't really responsive friendly as it stands now. </p>

<hr>

<h1>TLDR;</h1>

<h2>Revisiting requirements</h2>

<blockquote>
  <p>My navigation has 4 menu items. I'd like my logo to sit in the middle of these</p>
</blockquote>

<p>The way you have set it up, as you can see get's the job done. But they are not apart of the same parent, therefor they can't take advantage of it's inherited properties, and more importantly don't recognize each other as siblings. So I think that's the first thing to address.</p>

<p>Let's assume the following here forward (no margins, no positioning):</p>

<p></p><div class="snippet" data-lang="js" data-hide="true" data-console="false" data-babel="false">
<div class="snippet-code snippet-currently-hidden">
<pre class="snippet-code-css lang-css prettyprint-override"><code>/*------------------------
Default grid
-------------------------*/



/*------------------------
Columns
-------------------------*/

.has-2-columns .col {
  flex: none;
}

.has-2-columns .col {
  width: 49%;
}


/*------------------------
Logo
-------------------------*/

.site-title {
  background: #ccc;
}


/*------------------------
Main navigation
-------------------------*/

.main-navigation { background-color: lightgrey;}

.main-navigation ul {
  display: inline-flex;
  list-style: none;
  padding: 0;
  margin: 0;
}

.main-navigation ul li { }

.left-menu {
  text-align: left;
}

.left-menu li {}

.right-menu {
  text-align: right;
}

.right-menu li {}

.site-header {
  display: flex;
  flex-flow: row wrap;
  background-color: pink;
}</code></pre>
<pre class="snippet-code-html lang-html prettyprint-override"><code>&lt;header class="site-header"&gt;

  &lt;div class="site-branding"&gt;
    &lt;h1 class="site-title"&gt;&lt;a href="#" rel="home"&gt;Demo&lt;/a&gt;&lt;/h1&gt;
  &lt;/div&gt;
  
  &lt;nav class="main-navigation has-2-columns"&gt;

    &lt;div class="left-menu col"&gt;
      &lt;ul id="left-menu" class="menu"&gt;
        &lt;li&gt;&lt;a href="#"&gt;Home&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href="#"&gt;About&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/div&gt;

    &lt;div class="right-menu col"&gt;
      &lt;ul id="right-menu" class="menu"&gt;
        &lt;li&gt;&lt;a href="#"&gt;Contact&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href="#"&gt;Store&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/div&gt;

  &lt;/nav&gt;

&lt;/header&gt;</code></pre>
</div>
</div>


<p>Making them siblings can assistant in limiting any crutches we have on margins and positioning by granting them situational awareness to one another now. </p>

<p>This is also a good time to practice good standards when it comes to classes. Since we stripped all the classes we no longer need, we aren't styling multiple elements anymore, so we can change their selector to an <code>id</code>.</p>

<p>Additionally, let's take advantage of what we learned about direct descendants and apply that now by making the <code>&lt;h1&gt;</code> a direct sibling to both lists as follows:</p>

<p></p><div class="snippet" data-lang="js" data-hide="true" data-console="false" data-babel="false">
<div class="snippet-code snippet-currently-hidden">
<pre class="snippet-code-css lang-css prettyprint-override"><code>/*------------------------
    Main navigation
    -------------------------*/

#main-navigation {
  background-color: lightgrey;
}

#main-navigation ul {
  display: inline-flex;
  list-style: none;
  padding: 0;
  margin: 0;
}

#site-header {
  display: flex;
  flex-flow: row wrap;
  background-color: pink;
}</code></pre>
<pre class="snippet-code-html lang-html prettyprint-override"><code>&lt;header id="site-header"&gt;

  &lt;nav id="main-navigation"&gt;

    &lt;ul&gt;
      &lt;li&gt;&lt;a href="#"&gt;Home&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#"&gt;About&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;

    &lt;h1&gt;&lt;a href="#" rel="home"&gt;Demo&lt;/a&gt;&lt;/h1&gt;

    &lt;ul&gt;
      &lt;li&gt;&lt;a href="#"&gt;Contact&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#"&gt;Store&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;

  &lt;/nav&gt;

&lt;/header&gt;</code></pre>
</div>
</div>


<p>Your needs will vary depending on the project, but this particular example we don't have anything else but the navigation so we are going to promote the <code>&lt;nav&gt;</code> to be the flex parent. In doing this we can take advantage of <code>align</code> properties, <code>justify</code> properties and of course the other flex benefits. The 2 key properties are <code>align-items</code> which (on <code>flex-direction: row</code>) it centers the children vertically in our case, and <code>justify-content</code> which you seem to be familiar with. These 2 properties alone handle everything you've used margins for as intended.</p>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="false" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-css lang-css prettyprint-override"><code>#main-navigation {
 display: flex;
 flex-flow: row wrap;
 align-items: center;  /* center the elements (vertically for this axis) in the parent space */
 justify-content: space-between;
}

#main-navigation ul {
  display: inline-flex;
  list-style: none;
  padding: 0;
  margin: 0;
}
#main-navigation li {
  padding: 0 10px;
}



/* irrelevant */
#site-header {
  background-color: pink;
}</code></pre>
<pre class="snippet-code-html lang-html prettyprint-override"><code>&lt;header id="site-header"&gt;

  &lt;nav id="main-navigation"&gt;

    &lt;ul&gt;
      &lt;li&gt;&lt;a href="#"&gt;Home&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#"&gt;About&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;

    &lt;h1&gt;&lt;a href="#" rel="home"&gt;Demo&lt;/a&gt;&lt;/h1&gt;

    &lt;ul&gt;
      &lt;li&gt;&lt;a href="#"&gt;Contact&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#"&gt;Store&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;

  &lt;/nav&gt;

&lt;/header&gt;</code></pre>
</div>
</div>


<p>So that's one way to get your desired outcome on a fundamental level</p>

<p>..... but wait, mobile first right? Naturally, a simple media query can help you adjust things as you wish, that will be arbitrary to your styling needs, but here is a brief example that makes the previous example responsive friendly:</p>

<p></p><div class="snippet" data-lang="js" data-hide="true" data-console="false" data-babel="false">
<div class="snippet-code snippet-currently-hidden">
<pre class="snippet-code-css lang-css prettyprint-override"><code>#main-navigation {
 display: flex;
 flex-flow: row wrap;
 align-items: center;  /* center the elements (vertically for this axis) in the parent space */
 justify-content: space-between;
}

#main-navigation ul {
  display: inline-flex;
  list-style: none;
  padding: 0;
  margin: 0;
}
#main-navigation li {
  padding: 0 10px;
}


@media only screen and (max-width: 396px) {
  #main-navigation {
    flex-flow: column nowrap;
  }
  
  #main-navigation h1 {
    order: -1;
  }
}


/* irrelevant */
#site-header {
  background-color: pink;
}</code></pre>
<pre class="snippet-code-html lang-html prettyprint-override"><code>&lt;header id="site-header"&gt;

  &lt;nav id="main-navigation"&gt;

    &lt;ul&gt;
      &lt;li&gt;&lt;a href="#"&gt;Home&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#"&gt;About&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;

    &lt;h1&gt;&lt;a href="#" rel="home"&gt;Demo&lt;/a&gt;&lt;/h1&gt;

    &lt;ul&gt;
      &lt;li&gt;&lt;a href="#"&gt;Contact&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#"&gt;Store&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;

  &lt;/nav&gt;

&lt;/header&gt;</code></pre>
</div>
</div>


<p>Notice how in that example, the <code>&lt;h1&gt;</code> element has an <code>order</code> of -1. Flex assigns '0' to an element as the default value. Therefor -1 gives specificity to those elements without needing to change every single one to [..1,2,3 etc]</p>

<p>And if you REALLY REALLY don't feel well about including it there after all that, we can kind of hack it there:</p>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="false" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-css lang-css prettyprint-override"><code>#main-navigation {
  padding: 10px;
}

#main-navigation ul {
  display: flex;
  flex-flow: row wrap;
  align-items: center;
  /* center the elements (vertically for this axis) in the parent space */
  justify-content: space-evenly;
  list-style: none;
  padding: 0;
  margin: 0;
}

#branding {
  font-size: 1.75rem;
}

@media only screen and (max-width: 396px) {
  #main-navigation ul {
    flex-flow: column nowrap;
  }
  #branding {
    order: -1;
  }
}


/* irrelevant */

#site-header {
  background-color: pink;
}</code></pre>
<pre class="snippet-code-html lang-html prettyprint-override"><code>&lt;header id="site-header"&gt;

  &lt;nav id="main-navigation"&gt;

    &lt;ul&gt;
      &lt;li&gt;&lt;a href="#"&gt;Home&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#"&gt;About&lt;/a&gt;&lt;/li&gt;
      &lt;li id="branding"&gt;&lt;a href="#"&gt;Demo&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#"&gt;Contact&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#"&gt;Store&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;

  &lt;/nav&gt;

&lt;/header&gt;</code></pre>
</div>
</div>

    </div>