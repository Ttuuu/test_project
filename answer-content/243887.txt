<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<p>I have written one before</p>
</blockquote>
<p>Yeah, I can tell. Nice. This looks well organized.</p>
<blockquote>
<pre><code>def setTokens(self):
</code></pre>
</blockquote>
<p><a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">PEP-8</a> asks that you spell it <code>set_tokens</code>.
Similarly for some other setters and getters,
and for assignments to e.g. <code>self.key_words</code> &amp; <code>self.new_tokens</code>.</p>
<blockquote>
<pre><code>    self.keyWords.append(KeyWord("NUMBER", re.compile("([0-9]*\.[0-9]+)|([0-9]+\.[0-9]*)|([0-9])")))
</code></pre>
</blockquote>
<p>Hmmm, several remarks.</p>
<p><a href="https://en.wikipedia.org/wiki/Don%27t_repeat_yourself" rel="nofollow noreferrer">DRY</a>, you have an opportunity here to loop
over a list of pairs (list of tuples),
so there's just a single <code>.append</code> that we repeatedly call.</p>
<p>Perhaps you have your reasons, but I personally disagree with your definition of NUMBER.
Choose a different name if it is a specialized restricted number from some problem domain.
With alternation you mention <code>frac|real|digit</code>.
The <code>digit</code> seems superfluous, it is subsumed by at least one of the other two.
I'd prefer to see the order <code>real|frac</code> so we can mandate
"starts with at least one digit".
After that, you passed up the opportunity to say <code>\.?</code> for optional decimal.
The <code>frac</code> case would then be "starts with decimal point".
Also your current expression rejects <code>12</code> while accepting <code>1</code> and <code>123.</code>.</p>
<p>Rather than e.g. <code>"[0-9]"</code>, consider saying <code>r"\d"</code>.</p>
<blockquote>
<pre><code>    self.keyWords.append(KeyWord("PLUS", re.compile("\+"))) ...
    self.keyWords.append(KeyWord("DIVIDE", re.compile("\/")))
</code></pre>
</blockquote>
<p>Please run <a href="https://pypi.org/project/flake8/" rel="nofollow noreferrer">flake8</a> against your code, and heed its warnings.
Here, I have a strong preference for phrasing it <code>re.compile(r"\+")</code>,
with a raw string, to avoid confusion with e.g. <code>"\t\n"</code> escapes.
Also, the regex <code>/</code> works fine, similar to the regex <code>Z</code>,
it is just a single character, no need for a <code>\</code> backwhack.</p>
<blockquote>
<pre><code>    for i in range(0, len(self.text)):
</code></pre>
</blockquote>
<p>Typical idiom would be <code>for i, ch in enumerate(self.text)</code>.</p>
<p>The whole <code>ig</code> loop is much too verbose.
Just test <code>if ch in self.ignore</code> (<code>if self.text[i] in self.ignore</code>)
and be done with it.</p>
<hr>
<p>Two algorithmic remarks:</p>
<p>It's not yet obvious to me why we need flag + loop to ignore optional
whitespace. Wouldn't a simple <code>continue</code> at top of loop suffice?
Maybe that <code>range</code> is not convenient,
and you'd be happier with a <code>while</code> loop where you increment <code>i</code> yourself.</p>
<p>DRY, I'm not keen on <code>self.delimiters</code>,
it is redundant with those beautiful regexes you went to the trouble of defining.
I'd like to see one or the other of them go,
so you don't have to remember to maintain two things in parallel
when you (or someone else!) is maintaining this a few months from now.</p>
<p>Overall, looks pretty good.</p>
    </div>