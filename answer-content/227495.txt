<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>If <code>TFirst</code> and <code>TSecond</code> are the same, nearly all of the API becomes useless because the compiler can't disambiguate the method calls.</p>

<p>I think a better design would be for <code>Inverse</code> to be a <code>BidirectionalMap&lt;TSecond, TFirst&gt;</code>, so that the methods don't need to be duplicated. Then one obvious unit test would be <code>ReferenceEquals(map, map.Inverse.Inverse)</code>. And I think the obstacle to implementing at least <code>IReadOnlyDictionary&lt;TFirst, TSecond&gt;</code> would have been removed.</p>

<hr>

<p><code>Add</code> seems overly complicated and slightly fragile. I don't think the tiny performance improvement justifies the complexity over</p>

<pre><code>    public void Add(TFirst first, TSecond second)
    {
      if (first == null) throw new ArgumentNullException(nameof(first));
      if (primary.ContainsKey(first)) throw new ArgumentException(nameof(first), $"{first} already present in the dictionary");
      if (second == null) throw new ArgumentNullException(nameof(second));
      if (secondary.ContainsKey(second)) throw new ArgumentException(nameof(second), $"{second} already present in the dictionary");

      primary.Add(first, second);
      secondary.Add(second, first);
    }
</code></pre>
    </div>