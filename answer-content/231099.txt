<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Don't know if you dislike "not this-lang-onian" comments...</p>

<pre><code>typedef std::function&lt;void(Event&amp;)&gt; EventHandler;
</code></pre>

<p>should be  </p>

<pre><code>using EventHandler = std::function&lt;void(Event&amp;)&gt;;
</code></pre>

<hr>

<pre><code>auto get_event_type() -&gt; std::type_index {
  return std::type_index(typeid(T));
}
</code></pre>

<p>you already have type in <code>return</code> statement, no need for trailing return type</p>

<hr>

<pre><code>  Message(EventType &amp;&amp;event, EventHandler event_handler) :
    m_event(std::make_unique&lt;EventType&gt;(std::move(event))),
</code></pre>

<p>you already input <code>event</code> as r-value reference. no need for <code>std::move</code></p>

<hr>

<pre><code>template &lt;typename EventType&gt;
Message(Message&amp;&amp; message) :
    m_event(std::move(message.m_event)),
    m_event_handler(message.m_event_handler) {}
</code></pre>

<p>1) doesn't depend on <code>EventType</code>, so doesn't need template wrapper<br>
2) looks like standard move constructor for me, so  </p>

<pre><code>Message(Message&amp;&amp;) = default;
</code></pre>

<p>or even no mention of it would be enough</p>

<p><strong>Also</strong><br>
If you do declare move constructor, by rule of five, you should say explicitly if you allow copy constructor, copy assignment and move assignment</p>

<hr>

<pre><code>void run() {
...
m_event_cv.notify_one();
</code></pre>

<p>I think I got the reason behind it - in case 2 events happens soon one after another (or, more probably, 2 messages from same event), the <code>run()</code> should loop over each of them...<br>
But it's not done via <code>notify_one</code>
Noone is listening for it to be notified!</p>

<p>Better approach probably would probably just copying queue, clearing the original and running <code>for_all</code> on local copy</p>

<p><strong><code>lock.unlock();</code> here is critically important</strong>, as we don't want handlers that last long time to slow down event creators (that are waiting for <code>m_message_queue_mutex</code>)</p>

<hr>

<pre><code>message.m_event_handler(*message.m_event.get());
</code></pre>

<p>you're applying operator* to the inside raw pointer, while you can safely do that with unique_ptr too<br>
(change <code>*message.m_event.get()</code> into <code>*message.m_event</code>)</p>

<hr>

<p>So far everything looks good. All mistakes are minor. Logic structure is in place  </p>

<p>Container for multiple derived classes in form of base class pointers is well known.<br>
But this is first time I've ever seen container for functions that use derived class via wrapping function that takes base reference<br>
Really clever</p>

<p>Thanks for experience! =)</p>
    </div>