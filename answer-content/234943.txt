<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The biggest thing that will allow the code to clean up a fair bit is if you had made a subclass of <code>Player</code> for <code>AIPlayer</code>:</p>

<pre><code>class AIPlayer &lt; Player
  NAMES = ['Bob', 'Joseph', 'Catherine', 'Paul', 'Tom', 'Baker']

  def initialize
    super NAMES.sample
  end
end
</code></pre>

<p>that will allow you to add a method <code>get_weapon</code> to <code>Player</code>, which would ask for the user input and override it in <code>AIPlayer</code> to return a random selection. Your <code>choice</code> method then can become cleaner:</p>

<pre><code>def choice
  @choice_1 = @player1.get_weapon
  @choice_2 = @player2.get_weapon
end
</code></pre>

<p>and not care about if it's player vs player or vs ai. Your <code>player_vs_AI?</code> method can then return <code>true</code> or <code>false</code> and not have to assign an instance variable at all:</p>

<pre><code>def player_vs_AI?
  puts "Will you be playing against another person or the computer?"
  puts "Choose 1 for another person or choose 2 for the computer"

  gets.chomp.to_s == '2'
end
</code></pre>

<p>and can be then used to clean up like:</p>

<pre><code>def greeting
  puts "Hi, please enter your name player 1: "
  name1 = gets.chomp
  @player1 = Player.new(name1)

  if player_vs_AI?
    @player2 = AIPlayer.new
    puts "Player 2 will be named #{@player2.name}"
  else
    puts "Hi, please enter your name player 2: "
    name2 = gets.chomp
    @player2 = Player.new(name2)
  end
  sleep(0.5)
  puts "Welcome to Rock-Paper-Scissor"
  sleep(0.5)
  puts "Welcome #{@player1} and #{@player2}\n\n"
  sleep(0.5)
end
</code></pre>

<p>and you no longer need to call <code>player_vs_AI?</code> during <code>start</code>.</p>

<p>Your <code>play_again?</code> method also shouldn't call <code>start</code> itself, instead the <code>start</code> method should check if they want to play again and just keep getting choices and checking the results:</p>

<pre><code>def start
  game = Game.new
  game.greeting
  game.instruct
  loop do
    game.choice
    game.logic
    break unless game.play_again?
  end
end
</code></pre>

<p>having trimmed down the <code>choice</code> method, it could be combined with the <code>logic</code> method and perhaps renamed <code>play</code> (or something more meaningful) and <code>start</code> could be renamed <code>run</code>.</p>

<p>On a last note, I would try to make things consistent for the user. You're asking for input options 3 times, the first it's enter <code>1</code> or <code>2</code> (<code>player_vs_AI?</code>), the second it's <code>r</code>, <code>p</code>, or <code>s</code> (<code>choice</code>) and the last time in <code>play_again?</code> they have to enter <code>yes</code> or <code>no</code>. Only in <code>choice</code> is there input validation (what happens in <code>play_again?</code> if I try to enter <code>y</code> instead of <code>yes</code>?). This could be more consistent (always allow the full word to be entered, or just the first letter, for instance).</p>
    </div>