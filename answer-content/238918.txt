<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Requests raising</h2>

<p>This pattern:</p>

<pre><code>if search.ok:
    ...
else:
    search.raise_for_status()
</code></pre>

<p>is redundant. Just call <code>raise_for_status()</code>, which will be a no-op if the response is OK.</p>

<p><code>check_availability</code> still has a confused return. If you're returning <code>False</code>, is there ever a point where it could return <code>True</code>? If not, why return a value at all? This boils down to the same problem that you had in the first question: either you should catch the set of exceptions that you expect from a request and return either <code>True</code> or <code>False</code>; or you should do what <code>raise_for_status</code> does - no-op if successful, raise if unsuccessful.</p>

<h2>Temporary variables</h2>

<p>You should use one for <code>logging_page_id['graphql']['shortcode_media']['edge_sidecar_to_children']['edges']</code>. Also, this pattern:</p>

<pre><code>for i in range(len(things)):
    .. use things[i]
</code></pre>

<p>is counter to idiomatic Python iteration. Instead,</p>

<pre><code>for thing in things:
</code></pre>

<h2>Uniqueness</h2>

<p>If you don't care about the order of <code>PICTURES</code>, make it a set. That way, you don't need this <code>if</code>:</p>

<pre><code>        if videos not in VIDEO:
            VIDEO.append(videos)
</code></pre>

<p>The same applies to your images list.</p>

<h2>Nomenclature</h2>

<p><code>URL_fetcher</code> (more specifically <code>URLFetcher</code>) would have been appropriate as a class name, but it's no longer a class, it's a function. So call it <code>fetch_url</code>.</p>

<h2>Cookie handling</h2>

<p>Your handling of cookies is certainly better than last time, but I still think you should take this a step further and try assigning them to a session and passing the session around instead. Then, instead of <code>requests.get(url, cookies)</code>, you can simply write <code>session.get(url)</code>.</p>

<p>Looking further down - you have this <code>MyHttpBase</code> with a session in it. First of all, you've made <code>s</code> effectively a class static, which you shouldn't - it should be in instance scope. That aside, I don't think <code>MyHttpBase</code> should exist at all. Have a read through <a href="https://2.python-requests.org/en/master/api/#api-cookies" rel="nofollow noreferrer">https://2.python-requests.org/en/master/api/#api-cookies</a></p>

<h2>Exception handling</h2>

<p>This:</p>

<pre><code>    try:
        self.driver = webdriver.Chrome()
    except WebDriverException as e:
        print(str(e))
        sys.exit(1)
</code></pre>

<p>should really not be done in the scope of a class init function. If you want to print exceptions, fine; do it at the top level in <code>main</code>.</p>

<p>Also, this pattern:</p>

<pre><code>    try:
        self.driver.do_something()
    except WebDriverException:
        pass
</code></pre>

<p>is almost certainly not what you actually want to happen. If it's actually somewhat OK for the driver to explode, at the least you'd want to print a warning about it. But why is it OK for the driver to explode?</p>

<h2>f-strings</h2>

<pre><code>"[*] extracting {links} posts , please wait...".format(links=len(links))
</code></pre>

<p>can be</p>

<pre><code>f"[*] extracting {len(links)} posts; please wait..."
</code></pre>

<h2>Typo</h2>

<p>Alredy = Already</p>

<h2>Booleans</h2>

<p>Replace <code>if video is True:</code> with <code>if video:</code>.</p>

<h2>Static methods</h2>

<p><code>content_of_url</code> shouldn't exist. Even if it did need to exist, it should be made a static method, or more likely a utility function outside of the class.</p>

<h2>Random filenames</h2>

<pre><code>            os.path.join(self.folder, "Image{}.jpg").format(
                "".join([random.choice(string.digits) for i in range(20)])),
</code></pre>

<p>I'm sure given the information you're scraping from IG that you can do better than this. Even if you can't, at least use something like a timestamp, which is both reasonably guaranteed to be unique as well as meaningful to the user.</p>

<h2>Context manager</h2>

<p>You've done a good job in implementing a context manager to close your driver. However, this:</p>

<pre><code>    MyHttpBase().close_session()
</code></pre>

<p>is (a) done in the wrong function - it should be done in <code>__exit__</code>; and (b) should simply be manipulating a Requests session object directly.</p>

<h2>Main method</h2>

<p>Put the last 11-ish lines of your program into a <code>main</code> method. Currently they're in global scope.</p>
    </div>