<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>All paths do not <code>return</code></h1>

<pre><code>    def canJumpPos(pos):
        if pos &gt;= len(nums):
            return False
        elif pos in memo:
            return memo[pos]
        else:
            for i in range(nums[pos], 0, -1):
                if canJumpPos(i + pos):
                    return True
            memo[pos] = False
            # Missing Return
</code></pre>

<p>This means <code>canJump([3,2,1,0,4])</code> returns <code>None</code>, not <code>False</code>!  A violation of your declared <code>-&gt; bool</code> return.</p>

<h1>No memoization of <code>True</code></h1>

<p>When this code returns <code>True</code>:</p>

<pre><code>                if canJumpPos(i + pos):
                    return True
</code></pre>

<p><code>memo[pos]</code> is never set to <code>True</code>.  This means that if <code>canJumpPos(pos)</code> is called called with the same <code>pos</code> value, it will have to redo all the work it has already done to return the same <code>True</code> value!</p>

<h1>Eschew offset additions, assiduously</h1>

<pre><code>            for i in range(nums[pos], 0, -1):
                if canJumpPos(i + pos):
</code></pre>

<p>Here, you are always using <code>i + pos</code>, never <code>i</code> by itself.
Instead of repeating this addition over and over again,
you could roll that addition into the <code>range()</code> end-points.</p>

<pre><code>            for i in range(nums[pos] + pos, pos, -1):
                if canJumpPos(i):
</code></pre>

<h1>Any and All</h1>

<p>Looping over some condition until you find a <code>True</code> condition:</p>

<pre><code>            for i in range(nums[pos] + pos, pos, -1):
                if canJumpPos(i):
                    return True
            # ...
</code></pre>

<p>is often better performed using <code>any(...)</code>:</p>

<pre><code>            if any(canJumpPos(i) for i in range(nums[pos] + pos, pos, -1)):
                return True
            # ...
</code></pre>

<p>The <code>any(...)</code> will terminate when the first <code>True</code> is found, and return <code>True</code>.  If no <code>True</code> value is found, it will return <code>False</code>.</p>

<p>There is a similar function <code>all(...)</code>, which will terminate at the first <code>False</code> returning <code>False</code>.  If no <code>False</code> value is found, it returns <code>True</code>.</p>
    </div>