<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here are some things that may help you improve your program.</p>
<h2>Use consistent formatting</h2>
<p>The code as posted has inconsistent indentation which makes it hard to read and understand. Pick a style and apply it consistently.</p>
<h2>Provide complete code to reviewers</h2>
<p>This is not so much a change to the code as a change in how you present it to other people.  Without the full context of the code and an example of how to use it, it takes more effort for other people to understand your code.  This affects not only code reviews, but also maintenance of the code in the future, by you or by others.  One good way to address that is by the use of comments.  Another good technique is to include test code showing how your code is intended to be used.</p>
<h2>Use <code>const</code> where practical</h2>
<p>The <code>s</code> string is set and never altered, so it could be <code>const</code> or even better in this case, <code>static const</code>.</p>
<h2>Consider re-entrancy</h2>
<p>In an embedded system, there are often many things happening at once.  The usual case is that many events are <em>event-driven</em> and so the order in which parts of code are executed is uncertain.  For that reason, you should be wary about using non-reentrant calls such as <code>strtok</code>.  Also, we don't have the complete context, but it may be worth making a copy of a buffered line of data so that subesequent data the comes in does not overwrite a line as it is being parsed.</p>
<h2>Consider passing a length</h2>
<p>This code makes the tacit assumption that the passed array is a <code>'\0'</code>-terminated text string.  If you can guarantee that is always the case, then the code is fine as it is, but a more robust system might be to explicitly pass both a pointer and a length.</p>
<h2>Understand system variations</h2>
<p>It is implementation-defined whether <code>char</code> is signed or unsigned.  If it happens to be signed on your platform, you will get warnings about sign mismatches for parameters passed to <code>strtok</code> and <code>strcpy</code>.  If you system uses unsigned chars by default, you will get no such warning, but you should be aware that this is at least a portability concern.</p>
<h2>Simplify your algorithm</h2>
<p>This could be simpler and more maintainble in the future if it used a state machine for parsing.  For this simple grammar we have the following valid sentences:</p>
<ol>
<li>I2C SCAN</li>
<li>I2C READ n</li>
<li>I2C WRITE n n</li>
</ol>
<p>I am assuming the <code>n</code> is a numeric value, but it's not clear from the context.  Here's the corresponding state machine:</p>
<p><a href="https://i.stack.imgur.com/n5i42.png" rel="noreferrer"><img src="https://i.stack.imgur.com/n5i42.png" alt="simple state machine"></a>
Here's one way to code that:</p>
<pre><code>void parser_i2c(mychar str[20])
{
    static const mychar s[2] = " ";
    enum { start, i2c, r1, w1, w2, error, done } state = start;
    mychar *n1 = NULL;
    for (mychar *token = strtok(str, s); state != done; token = strtok(NULL, s)) {
        switch (state) {
            case start:
                if (strcmp(token, "I2C") == 0) {
                    state = i2c;
                } else {
                    state = error;
                }
                break;
            case i2c:
                if (strcmp(token, "READ") == 0) {
                    state = r1;
                } else if (strcmp(token, "WRITE") == 0) {
                    state = w1;
                } else if (strcmp(token, "SCAN") == 0) {
                    i2c_scan();
                    state = done;
                } else {
                    state = error;
                }
                break;
            case r1:
                /* check for number? */
                i2c_read(token);
                state = done;
                break;
            case w1:
                /* check for number? */
                n1 = token;
                state = w2;
                break;
            case w2:
                /* check for number? */
                i2c_write(n1, token);
                state = done;
                break;
            default:
                printf(COLOR_RED "Illegal state" COLOR_RESET);
                state = done;
        }
        if (state == error) {
            printf(COLOR_RED "Bad Command" COLOR_RESET);
            state = done;
        }
    }
}
</code></pre>
<p>I've use <code>mychar</code> as a <code>typedef</code> for <code>char</code> on my machine.  On yours, it looks like you could use <code>unsigned char</code> instead.</p>
<p>Note that now, the flow is very easy to follow and it would not be at all difficult to make an alteration to the grammar to accommodate some other command. Because the tokens are handled as they're parsed, there's no need to store any except the first parsed number which we need for <code>i2c_write()</code>. If it gets any more complex than this, one could use a more sophisticated parser or use a tool like <code>flex</code>.</p>
    </div>