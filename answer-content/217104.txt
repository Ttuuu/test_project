<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'm not a security expert, so my review will focus on general best practices first.</p>

<h2>Code structure and style</h2>

<p><strong>1. Imports</strong><br>
You can group import that belong together, e.g</p>

<pre class="lang-py prettyprint-override"><code>from Crypto.Hash import HMAC
from Crypto.Hash import SHA256
</code></pre>

<p>can be written as</p>

<pre class="lang-py prettyprint-override"><code>from Crypto.Hash import HMAC, SHA256
</code></pre>

<p>The <a href="https://www.python.org/dev/peps/pep-0008/#imports" rel="nofollow noreferrer">Official Style Guide for Python</a> also recommends to place import from the standard library before any third party libraries. Apart from the double import of <code>zlib</code> you're already following this.</p>

<p><strong>2. Documentation</strong><br>
You started to add some kind of documentation on <code>decrypt</code>, so <code>encrypt</code> should be treated the same. The officially <a href="https://www.python.org/dev/peps/pep-0008/#documentation-strings" rel="nofollow noreferrer">recommended</a> way is to provide function documentation surrounded by <code>"""..."""</code> like so</p>

<pre class="lang-py prettyprint-override"><code>def decrypt(key, ciphertext):
    """Initialize counter for decryption.

    iv should be the same as the output of encrypt().
    """
   #^--- you probably also mean ciphertext here
</code></pre>

<p>This will also allow Python's built-in <code>help(...)</code> function to pick up your documentation.</p>

<p><strong>3. Whitespace</strong><br>
You should tidy up the newlines in your code. There are often two (sometimes more) newlines within a function's body, while there are none between the imports and functions. This might be an issue from posting the code here on Code Review, but you should definitely check that. A reasonable convention many people agree on is to use two newlines to seperate functions (or imports from the following functions) and only use a single newline in function bodys to visually create logical groups of code.</p>

<h2>The code itself</h2>

<p><strong>1. Exceptions</strong><br>
"You're not doing the right thing!" What thing you might ask? Well, ... "Read it! Find it out yourself!"<br>
Sounds frustrating, doesn't it? Python offers a wide variety of built-in exceptions so you can easily convey the type of error that has happened, without the need to parse/read the actual error message. In your case <a href="https://docs.python.org/3/library/exceptions.html#ValueError" rel="nofollow noreferrer"><code>ValueError</code></a> seems to be appropriate. From the documentation:</p>

<blockquote>
  <p><em>exception</em> <code>ValueError</code>
     Raised when an operation or function receives an argument that has the right type but an inappropriate value, [...]</p>
</blockquote>

<p>In case of an error on checking the HMAC, you might add your <a href="https://stackoverflow.com/a/1319675/5682996">own exception</a> derived from <code>Exception</code> (maybe <code>HMACValidationError</code>?). I will leave this as an exercise to you.</p>

<p><strong>2. encrypt/decrypt</strong><br>
These functions look quite reasonable from what I can jugde and work the way I would expect them to work. A minor "issue" I found, is that they are not handling string encoding/decoding symmetrically. While <code>encrypt</code> does handle unicode strings by converting them to bytes representation before encryption, <code>decrypt</code> has no way of knowing that this step has taken place and will always return the raw bytes.<br>
At the moment, I would favor an approach where the application using those functions has to take care that the input is already encoded into bytes and also decode the bytes back into a unicode string if desired. This would also be in line with not handling string values for the key, which strongly hints that there is an earlier step where those are created and possibly encoded. </p>

<p><strong>3. Security</strong><br>
From what I've seen on my journey through cryptoland, it is a <a href="https://crypto.stackexchange.com/a/7922">quite common practice</a> to simply prepend the ciphertext with the initialiation vector (IV). Password hashing functions do something similar and tend to store the salt prepended to the actual hash to have it available for validation later. Remember: the IV does not protect your ciphertext in the same way the key does, and therefore must not be handled with the same care. It instead prevents an attacker to see the same plaintext mapped the same ciphertext repeatedly, which is maybe more than you can afford to reveal.<br>
Something similar applys to the HMAC. The security of the HMAC authentication should only rely on the secrecy of the key, and nothing else. So as long as you use a <a href="https://crypto.stackexchange.com/a/1073">suitable HMAC implementation</a> and a reasonably secure key, you should be good to go. Just bear in mind that an HMAC alone does not and cannot prevent <a href="https://security.stackexchange.com/a/20301">all kind of attacks</a>, e.g. HMAC alone cannot prevent replay. </p>
    </div>