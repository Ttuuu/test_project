<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I would suggest a turned around approach: compute the depth upon construction of the nodes.  This is pure, and makes sure it is only computed once.  It requires you to treat the class as immutable, though (i.e., no later extending of <code>children</code>), which might or might not be fine in your use case.</p>

<pre><code>class Node:
    """
    Node in a tree, with children stored in a list.
    """

    def __init__(self, key, children = None):
        self.key = key

        if children is None:
            self.children = []
        else:
            self.children = children

        self.depth = max((c.depth for c in self.children), default = 0) + 1

root = Node('n1', [Node('n2'), Node('n3', [Node('n4'), Node('n5')])])

print(root.depth)  # 3
print(root.children[0].depth)  # 1
print(root.children[1].depth)  # 2
print(root.children[1].children[0].depth)  # 1
</code></pre>

<p><code>default</code>  is an extra argument  to <code>max</code> which tells it what to return in the case of <code>children</code> being empty.</p>
    </div>