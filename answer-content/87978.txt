<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>It looks fine, but there are a few issues with it:</p>

<ol>
<li><p>When we check if a number is a prime, we need to test all possible divisors up its root inclusively. If you print the <code>primes</code> list, you'll see that 9 is there, which is obviously a bug. <code>untilRoot n = takeWhile (\x -&gt; x*x &lt; n)</code> should be <code>untilRoot n = takeWhile (\x -&gt; x*x &lt;= n)</code>. However, this bug does not affect the correctness of your factorization algorithm.</p></li>
<li><p>It does not scale well. In the <code>firstPrimeDivisor</code> function, all primess up to <code>x</code> are checked in the worst case. That's why it works slowly even for moderately large prime numbers(for instance, <code>10^9 + 7</code>).</p></li>
</ol>

<p>Here a more efficient solution which checks only <code>O(sqrt(n))</code> divisors in the worst case:</p>

<pre><code>factorize :: Integer -&gt; Integer -&gt; [Integer]
factorize _ 1 = [] 
factorize d n 
    | d * d &gt; n = [n]
    | n `mod` d == 0 = d : factorize d (n `div` d)
    | otherwise = factorize (d + 1) n

primeFactors :: Integer -&gt; [Integer]
primeFactors = factorize 2
</code></pre>

<p>It is also much more concise. The idea behind it is to prove two statements first and then write a very simple code based on them:</p>

<ol>
<li><p>The smallest divisor of any natural number greater than two is a prime. Let's assume that it is not the case and <code>d = p * q (p, q &gt; 1)</code>, where <code>d</code> is the smallest divisor of <code>n</code>. But then <code>p &lt; d</code> and <code>p</code> is a divisor of <code>n</code>. Thus, <code>d</code> is not the smallest one. This statement also shows why your original solution is correct, even though the <code>primes</code> list is contains some composite numbers.</p></li>
<li><p>Any composite number has a divisor that does not exceed its square root. The proof by contradiction is very straightforward so I will omit it. </p></li>
</ol>
    </div>