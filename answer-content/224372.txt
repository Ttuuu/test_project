<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here are a few suggestions:</p>

<ul>
<li>You should get in the habit of wrapping all code that isn't contained in a function, in a main guard. This will protect the code from being run when the file is imported.</li>
<li>Instead of code like, for example, <code>s = "x" + str(i) + "x"</code>, you should use <code>f""</code>in front of your strings so you can directly include variable names into the strings, like so: <code>s = f"x{i}x"</code>.</li>
<li>You should include module docstrings for all your functions. This will help any documentation identify what your functions are supposed to do.</li>
<li>Running your code through <code>pylint</code>, here are a few warnings:

<ul>
<li>Parameters: Having one letter parameters isn't a good practice. Your code lit up when I first pasted it into my editor. Having meaningful names for your parameters also helps remind you what your function is supposed to take in.</li>
<li>Spacing: Any spacing like <code>s=1</code> or <code>a=b+c</code> should be spread out to <code>s = 1</code> and <code>a = b + c</code>. This improves the readability of your code greatly.</li>
</ul></li>
</ul>

<p>Below is the refactored code:</p>

<pre><code>def swap(array, index_one, index_two):
    """ Swaps two values in an array, then returns the new array"""
    temp = array[index_one]
    array[index_one] = array[index_two]
    array[index_two] = temp
    return array


def is_same_round(tables, element_one, element_two):
    """
    Returns True if the index of `element_one` is greater than the index
    of `element_two`
    """
    return tables.index(element_one) &lt; tables.index(element_two)

def solve(file):
    """ Solves the file """
    tables = [line.strip('\n') for line in open(file)]
    for i in range(len(tables)):
        tables[i] = int(tables[i][0:len(tables[i]) - 1])
    tables = tables[1:len(tables)]
    roundnumbers = []
    for i in range(len(tables)):
        for j in range(i + 1, len(tables)):
            rounds = 1
            tables = swap(tables, i, j)
            for luku in range(1, len(tables)):
                if not is_same_round(tables, luku, luku + 1):
                    rounds += 1
            roundnumbers.append(rounds)
            tables = swap(tables, i, j)

    result = f"{len(tables)} {min(roundnumbers)} {roundnumbers.count(min(roundnumbers))}"
    print(result)

if __name__ == '__main__':
    for i in range(1, 10):
        file_to_solve = f'junar{i}.in'
        solve(file_to_solve)
</code></pre>
    </div>