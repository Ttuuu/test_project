<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>1: You are declaring your variables public and creating a getter in Entity</p>

<pre><code> public String name;
 public String getName() {
    return name;
}
</code></pre>

<p>2: You should not couple walkable and non-walkable objects together.</p>

<pre><code>public interface Walkable {

void walk();
</code></pre>

<p>}</p>

<p>3: <code>private List&lt;List&lt;List&lt;Entity&gt;&gt;&gt; positions</code>;<br>
 You can create a two-dimensional array </p>

<pre><code>Entity[][] EntityArray= new Entity[height][width];
</code></pre>

<p>and get entity at x and y on that array example</p>

<pre><code>Entity entity = entityArray[x][y]
</code></pre>

<p>If null is given that point is empty.</p>

<blockquote>
  <p>With special commands you will also be able to see your inventory, stats etc. but that will come later.
   If you want this functionality I highly suggest you make an abstract class like below</p>
</blockquote>

<pre><code>public abstract class EntityExample {

private int x, y;
private char symbol;
private String name;

public EntityExample(int x, int y, char symbol, String name) {
    this.x = x;
    this.y = y;
    this.symbol = symbol;
    this.name = name;
}

public String getName() {
    return name;
}

public char getSymbol() {
    return symbol;
}

@Override
public String toString() {
    return name + ", " + symbol;
}}
</code></pre>

<p>all surrounding objects, houses, natural objects, and NPCs should extend this class as this is the bare minimum the Field object needs to display them.</p>

<p>Then you should create a more abstract class that extends EntityExample for controllable characters, for example, NPC, etc.</p>

<p>If this is your first big project You should create a UML and plan your OOP concepts in a way that follows <a href="https://itnext.io/solid-principles-explanation-and-examples-715b975dcad4" rel="nofollow noreferrer">Solid Principles</a></p>
    </div>