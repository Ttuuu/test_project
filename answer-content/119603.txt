<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>To improve <a href="https://codereview.stackexchange.com/users/30346/chriswue">@ChrisWue</a>'s <a href="https://codereview.stackexchange.com/a/119532/29371">answer</a> I would like to suggest having 2 extension methods, one acting on a <code>MatchCollection</code> and the other acting on a <code>Match</code> like so  </p>

<pre><code>public static class RegexExtensions
{
    public static string Replace(this MatchCollection matches, string source, string replacement)
    {
        foreach (var match in matches.Cast&lt;Match&gt;())
        {
            source = match.Replace(source, replacement);
        }
        return source;
    }
    public static string Replace(this Match match, string source, string replacement)
    {
        return source.Substring(0, match.Index) + replacement + source.Substring(match.Index + match.Length);
    }
}  
</code></pre>

<p>I have omitted the usually required <code>null</code> checks for these methods because something should be left for you to do.  </p>

<p>In addition I have replaced he <code>StringBuilder</code> usage in favour of simple one line string concatenation using <code>+</code> <a href="https://stackoverflow.com/a/74136/2655508">because this is automatically using internaly a <code>StringBuilder</code></a></p>

<p>I would like to encourage you to always use braces <code>{}</code> although they might be optional. Using them just helps you to make your code less error prone.</p>

<p>Implementing this changes lead to  </p>

<pre><code>string toSearchInside; // The actual string I'm going to be replacing within
List&lt;string&gt; searchStrings; // The list of words to look for via regex

string pattern = @"([:@?]{0})";
string replacement;

foreach (string toMatch in searchStrings)
{
    var regex = new Regex(
                            string.Format(pattern, toMatch), 
                            RegexOptions.IgnoreCase
                            );
    var matches = regex.Matches(toSearchInside);

    if (matches.Count == 0)
    {
        continue;
    }

    replacement = CreateReplacement(toMatch);

    toSearchInside = matches.Replace(toSearchInside, replacement);
}
</code></pre>
    </div>