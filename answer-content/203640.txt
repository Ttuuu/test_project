<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>A consistent <code>tidyverse</code> solution would use <code>readr::read_csv</code> I guess.</p>

<p>You don't need <code>map2</code> if you don't use <code>.y</code>, <code>map</code> is enough.</p>

<p>You can use <code>read.csv</code> as your <code>.f</code> argument, and leave the rest to the <code>...</code> in your <code>map</code> call, might be a matter of taste but I prefer it that way as with the formula notation you have to read through to make sure <code>read.csv</code> is the only function called.</p>

<p><code>as.is</code> doesn't seem necessary if you give column classes already. </p>

<p>Your <code>mutate</code> call is not necessary, <code>tibble</code> will evaluate lazily the definition of <code>filename</code> given at the previous step.</p>

<p>It seems you really want a "one liner" but in my opinion it would be much clearer in a few steps, I propose the following:</p>

<pre><code>files &lt;- list.files(
  "./",
  full.names = TRUE,
  pattern = "^(accounts|symbols)_201[7-9][0-9]{4}\\.csv$")

data_lst &lt;- map(
  files, 
  read_csv,
  header = FALSE,
  sep = "=",
  coltypes = "ic",
  col_names = c("count", "names"))

tibble(
  file_name = files,
  date = str_extract(filename, "201[7-9][0-9]{4}"),
  type = str_extract(filename, "(accounts|symbols)"),
  data = data_lst)
</code></pre>

<p>In fact as you're working with a lot of data files I'd tend to write a for loop instead of a <code>map</code> call, so I could more easily debug and proceed without restarting all if an issue arises.</p>
    </div>