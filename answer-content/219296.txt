<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This task sounds as if it came directly from an advertisement for the Java 8 streams API:</p>

<ul>
<li>Sort the points by their distance</li>
<li>Take the minimum k points</li>
</ul>

<p>This boils down to the following code:</p>

<pre><code>static int[][] kClosest(int[][] points, int k) {
    return Arrays.stream(points)
        .sorted(Comparator.comparing((int[] point) -&gt; point[0] * point[0] + point[1] * point[1]))
        .limit(k)
        .toArray(int[][]::new);
}
</code></pre>

<p>That code is written from the top of my head. Since the Java streams API is general-purpose and intended to be highly optimized, it should notice that it only ever needs to remember the <span class="math-container">\$k\$</span> smallest elements. You should check this by counting how often the distance function is called. To do that you should extract it to a local method, which is something that your IDE can do for you.</p>

<p>Compared to your code:</p>

<ul>
<li>I left out the <code>Math.sqrt</code> since the point coordinates are restricted to 10000, which means that the square of the distance can become at most 2e8, which luckily is a bit smaller than <code>Integer.MAX_VALUE</code>.</li>
<li>Calling <code>Math.abs</code> is unnecessary as well.</li>
<li>Making a map of lists may help in pathological cases when the given points all have the same distance. In other cases it can be left out.</li>
</ul>
    </div>