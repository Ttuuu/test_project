<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><code>random.seed</code> is a bug: add parentheses to actually call the function.</li>
<li>Use <code>collections.namedtuple</code> so you can write <code>member.fitness</code> instead of the less readable <code>member[0]</code></li>
<li><code>copy.deepcopy</code> should not be necessary in a functional approach</li>
<li>Keeping the genes in a tuple instead of a list would make the member tuple fully immutable, in line with the functional approach. This eliminates the need to deep-copy objects as you can safely copy just references.</li>
</ul>

<p>After these changes <code>create_member</code> becomes like this:</p>

<pre><code>import collections
Member = collections.namedtuple("Member", "fitness genes")

def create_member(genes):
    genes = tuple(genes)
    return Member(sum(genes), genes)
</code></pre>

<p>In some places you create members without calling <code>create_member</code>. Be sure to change them, for example:</p>

<pre><code>def mutate_member(member, rate=1):
    return create_member(mutate_genes(member.genes, rate))
</code></pre>

<ul>
<li>With immutable members there is no need to recalculate fitnesses. You can delete such functions.</li>
</ul>
    </div>