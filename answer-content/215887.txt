<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Since there is a lot going on here I will not be able to address all of your questions, but I hope my feedback will help you nevertheless.</p>

<h1>General Remarks</h1>

<h2>In-source Documentation</h2>

<p>When I first had a look at your code I was stunned by the sheer amount of stuff that was happing. On the second look a lot of the content presented itself as extensive documentation on the sources of the code, its intention, and similar things.<br>
Don't get me wrong here, <strong>well documented code</strong> is a joy to read and review.
Contrary to what you will usually see in the wild, I'm inclined to say yours is a little bit to much for a source file.
From my point of view a lot of the "introduction" section might actually better be suited to go into a seperate README file. This will help to reduce the amount of "noise" that presents itself to a reviewer or future you who wants to have a look at the code (only).</p>

<h2>Seperation of Concerns / Structure</h2>

<p>I would like remind you that keeping your code organized in digestible chunks is not something that is reserved to libraries. You can easily do this with your code as well. For example you could have a file where you collect all your functions which are used to determine the encoding, another file containing the parsers can than import this file to prepare website content. You could then import the parser in your main script file and use it without ever seeing the whole encoding detection again. Looking further, this would also give you the ability to easier test those seperate files.</p>

<h1>The Python Code</h1>

<p>After the general remarks I want to focus more on the code itself. The following points are in no particular order and I make them up as I go.</p>

<h2>Header</h2>

<p>Most Python script files will start with the following or similar lines</p>

<pre><code>#!/usr/bin/python3
#-*-coding:utf8;-*-
</code></pre>

<p>The first line is the so called <a href="https://en.wikipedia.org/wiki/Shebang_(Unix)" rel="nofollow noreferrer">shebang</a> used primarily on Unix systems which tells the system which interpreter to use when someone asks the system to treat the file as executable. Here it's the <code>python3</code> executable.<br>
The next line tells the interpreter how the source file is encoded. As with most of the time one can read more about this in the corresponding <a href="https://www.python.org/dev/peps/pep-0263/" rel="nofollow noreferrer">PEP</a>.</p>

<p>In addition to these two, there is a sheer endless collection of IDE specific "magic comments" that help your IDE or their integrated tools to work better with your source files. Since this is not Python-specific, I will not go into details here.</p>

<h2>imports</h2>

<p>Here, I would like to address your comments on <code>is this needed if we already imported all of urllib?</code>. The short answer is usually <strong>no</strong>. It just saves you from writing <code>urllib.request.urlopen</code> whenever you want to use <code>urlopen</code>. The same goes for <code>Request</code>.</p>

<p>Another note on imports would be to keep your inputs grouped together, e.g. all imports from <code>urllib</code> should be in one block, like so:</p>

<pre><code>import os
import re
import subprocess

import urllib
from urllib.request import urlopen, Request
from urllib.error import URLError, HTTPError

from html.parser import HTMLParser
from pathlib import Path
</code></pre>

<p>This will help you to easier find an import statement later, even without IDE support. See also the infamous <a href="https://www.python.org/dev/peps/pep-0008/#imports" rel="nofollow noreferrer">PEP8 Style Guide</a> for more details on this topic.</p>

<h2>Style</h2>

<p>Since we have opened the discussion on PEP8, I would like to give some hints to general style as well. Most Python code tends to use <code>snake_case</code> in function and variable names, following the PEP8 style guide. Also, those "type prefixes" like <code>i</code> or <code>s</code> sometimes found in C code are extremely uncommon in Python code. These aspects are no strict requirement for the code to work, just a recommendation. But however you choose to name your variables and functions <strong>be consistent</strong>, so either use <code>snake_case</code> or <code>camelCase</code>, not both. I know that, strictly speaking, not all of it is not "your" code, but you are the one who will have to work it ad it's a painfull experience not only to have to remember what function to use best, but also having to think about to how write the name.<br>
Most IDEs have tools that can check PEP8 or other style guidelines automatically and remind you with sadistic thoroughness on were you have violated the "rules". <a href="http://flake8.pycqa.org/en/latest/" rel="nofollow noreferrer">Flake8</a> and <a href="https://www.pylint.org/" rel="nofollow noreferrer">Pylint</a> are just some of the examples.</p>

<h2>Documentation</h2>

<p>Since we've already had a look at this topic I just want to give some further hints on this topic which are specific for Python source code.<br>
Python has built-in support for docstrings of functions and classes, e.g. by using the <a href="https://docs.python.org/3/library/functions.html#help" rel="nofollow noreferrer">help</a> function. For this to work you have to provide your documentation in a way Python expects.</p>

<p>For example, you have a nice description on what <code>getTitles</code> is supposed to do. However, Python does not know about it, since it's freely floating in the source file. Enter <strong>docstrings</strong>, which is basically just the Python name for function and class documentation in the source file. Usually these docstrings are enclosed in <code>"""&lt;doc here&gt;"""</code> and can span multiple lines. A version of <code>getTitles</code> which works with the built-in help system can be found below:</p>

<pre><code>def getTitles(sInputFile, sStatus):
    """Function that reads URLs from a text file sInputFile

    Read URLs from a file named like "myfile.txt" and gets the page title for each, 
    and writes the URL + tab + title  to an output file named "myfile.out.txt".

    Based on code from:
    Extract the title from a webpage using the python 3 standard lib - Code Review Stack Exchange
    https://codereview.stackexchange.com/questions/183160/extract-the-title-from-a-webpage-using-the-python-3-standard-lib
        and whatever I could find on how to read/write text files in Python.

    TODO: figure out some other method to get titles for ftp:// and other non-http URL protocols.
    TODO: just use the file name for images, PDFs (URLs ending in .jpg, .jpeg, .pdf, etc.)
    """
    ...
</code></pre>

<p>If you were to call <code>help(getTitles)</code> on this version of the function, Python would be able to find your documentation. Sweet, isn't it?</p>

<h2>String Formatting</h2>

<p>I'm one of the persons who tends to think not everything got better with Python 3. However, one of the most convenient things to work with (and badly miss in Python 2) are the so called <code>f-strings</code>.
An f-string is convenient way to express things like <code>sStatus = "File " + str(iCount) + " of " + sTotal + ", "</code> simple as <code>sStatus = f"File {iCount} of {sTotal}, "</code>. Wonderful.<br>
See <a href="https://realpython.com/python-f-strings/" rel="nofollow noreferrer">this blog post</a> for a nice comparison between the different ways to format string in Python.</p>

<h2>Opening and Closing Files</h2>

<p>It is common knowledge that you have to close file if you open it. So far so good. But what happens if there is an exception between opening and closing the file? Not so nice. But wait, there is help! Conceptually similar to C++ <a href="https://en.wikipedia.org/wiki/Resource_acquisition_is_initialization" rel="nofollow noreferrer">RAII idiom</a>, python offers something called <em>context managers</em>. A context manager in Python is a construct that aquires a resource when it is instantiated and also releases the resource no matter how the context is left.<br>
So for example instead of </p>

<pre><code>infile = open("test.txt", "r")
... # do something with infile, better not break somethig
infile.close()
</code></pre>

<p>one could simple write</p>

<pre><code>with open("test.txt", "r") as infile:
    ... # do something with infile, now can even throw!
</code></pre>

<p>See also <a href="https://stackoverflow.com/a/9283052">this SO post</a> on how to open multiple files in a single <code>with</code> statement.</p>

<h1>(Not so) Final Notes</h1>

<p>There are a few topics that I have not touched, e.g. the chained handling of exceptions in the encoding detection. Maybe someone else or tomorrow me will have a go at them. Till then, happy coding and welcome to the world of Python!</p>
    </div>