<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Since the method is only concerned up to days and the day of the week, I think you can opt for the "simpler" <code>LocalDate</code> type for your testing.</p>

<p><code>DayOfWeek</code> also has a static <code>from()</code> method that works directly on <code>TemporalAccessor</code> types, of which <code>LocalDate</code> inherits. Therefore, you can replace:</p>

<pre><code>DayOfWeek.of(then.get(ChronoField.DAY_OF_WEEK))
</code></pre>

<p>With just:</p>

<pre><code>DayOfWeek.from(then)
</code></pre>

<p>On the topic of testing, you probably  have good reasons for just using <code>public static void main</code>, but for the sake of any beginners who may have stumbled upon this question while they are learning about unit testing, may I suggest something in that vein instead? </p>

<p>Sample implementation (I'm using TestNG and Hamcrest matchers below):</p>

<pre><code>private static final LocalDate now = LocalDate.now();
private static final LocalDate past = LocalDate.of(1, 1, 1);
private static final LocalDate future = now.plusYears(1);

private static final void check(final LocalDate then, boolean print) {
    DayOfWeek actual = DayOfWeek.of(computeDayOfWeek(then.get(ChronoField.YEAR),
            then.get(ChronoField.MONTH_OF_YEAR), then.get(ChronoField.DAY_OF_MONTH)));
    DayOfWeek expected = DayOfWeek.from(then);
    if (print) {
        System.out.printf("%14s %14s is %s%n", then.toString(), expected, actual);
    }
    assertThat(then.toString() + " is on " + expected, actual, equalTo(expected));
}

@Test
public void testPast() {
    LocalDate then = past;
    // test every day since 1 Jan, 0001 through to today
    while (then.isBefore(now)) {
        check(then, false);
        then = then.plusDays(1);
    }
}

@Test
public void testToday() {
    check(now, true);
}

@Test
public void testFirstYear() {
    LocalDate then = past.plusYears(1);
    while (then.isAfter(past)) {
        then = then.minusDays(1);
        check(then, true);
    }
}

@Test
public void testFuture() {
    LocalDate then = now;
    while (then.isBefore(future)) {
        check(then, true);
        then = then.plusDays(1);
    }
}
</code></pre>

<p>P.S.: I usually prefer using TestNG's <code>DataProvider</code> annotations for parameterized testing, but I figured that telling TestNG to iterate through all the dates since 1st January 1 AD may be too much... hence the manual looping in each test method here.</p>

<p>P.P.S.: One very minor point, if I were you I will also consider putting the two validation <code>if</code> statements in their own validation method.</p>
    </div>