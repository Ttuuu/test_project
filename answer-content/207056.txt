<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your implementation would be actually nearly optimal if it wasn't for a <code>std::remove_if</code> limitation: you can't break out of the loop even when you know for certain that the exclusion condition won't be fulfilled again. If performance is critical, you can re-write the algorithm from scratch and bake the optimization into it:</p>

<pre><code>template &lt;typename Iter, typename Index_iter&gt;
Iter removeIndices(Iter first, Iter last, Index_iter ifirst, Index_iter ilast)
{
  if (ifirst == ilast) return last;
  auto count = *ifirst++;
  first = std::next(first, count); // no need to go through every element before
  std::size_t offset = 1;
  if (first == last) return last;
  while (std::next(first, offset) != last) {
    if (++count == *ifirst) {
      ++offset;
      if (++ifirst == ilast) break; // no need to go through every element after
    }
    *first = std::move(*std::next(first, offset));
    ++first;
  }
  return std::move(std::next(first, offset), last, first);
}
</code></pre>

<p>There is a non-negligible performance gain, as you can see <a href="http://quick-bench.com/uf8fy28bjFVuacKeM0q7Bq4hu7c" rel="nofollow noreferrer">here</a>.</p>

<p>Edit: Here's another version with two improvements on the first one: <code>std::move</code> is applied on ranges directly defined by the indices, and contiguous indices don't trigger two range-moves:</p>

<pre><code>template &lt;typename Iter, typename Index_iter&gt;
Iter removeIndicesStendhal(Iter first, Iter last, Index_iter ifirst, Index_iter ilast)
{
    if (ifirst == ilast || first == last) return last;

    auto out = std::next(first, *ifirst);
    auto in  = std::next(out);
    while (++ifirst != ilast) {
        if (*std::prev(ifirst) + 1 == *ifirst) {
            ++in; continue;
        }
        out = std::move(in, std::next(first, *ifirst), out);
        in  = std::next(first, *ifirst + 1);
    }
    return std::move(in, last, out);
}
</code></pre>

<p>The performance gain is still <a href="http://quick-bench.com/2hjapvul1b3FL9B9glyD_hfd0_k" rel="nofollow noreferrer">higher</a></p>
    </div>