<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I cannot review all aspects of your code, but here are some remarks which might be helpful.</p>

<h3>JSON decoding</h3>

<p>In the definition of <code>User.CodingKeys</code> one can omit the raw values of keys which are equal to the case name:</p>

<pre><code>struct User: Decodable {
    let login: String 
    let id: Int
    let avatarUrl: String
    let url: String
    let reposUrl: String

    enum CodingKeys: String, CodingKey {
        case login // Instead of: case login = "login" ...
        case id
        case avatarUrl = "avatar_url"
        case url
        case reposUrl = "repos_url"
    }
}
</code></pre>

<p>And the conversion from “snake-case” (in the JSON API) to “camel-case” (in the Swift API) can be done by setting a <code>keyDecodingStrategy</code> on the <code>JSONDecoder</code> in <code>getUsers()</code>:</p>

<pre><code>let decoder = JSONDecoder()
decoder.keyDecodingStrategy = .convertFromSnakeCase
AF.request(url, parameters: nil).validate()
    .responseDecodable(of: SearchResponse.self, decoder: decoder) { response in
        // ...
}
</code></pre>

<p>which makes the <code>User.CodingKeys</code> obsolete:</p>

<pre><code>struct User: Decodable {
    let login: String
    let id: Int
    let avatarUrl: String
    let url: String
    let reposUrl: String
}
</code></pre>

<h3>Unnecessary conversions to/from <code>Any</code></h3>

<p>The functions in <code>ServiceManager</code> all take a callback argument of type <code>(_ response:Any?) -&gt; Void</code>.  The (correctly typed) response from AlamoFile is therefore cast to <code>Any?</code>, and then cast back to the correct type in the caller of that function.</p>

<p>It becomes simpler with a callback that takes the proper type, e.g. in <code>getUsers()</code>:</p>

<pre><code>public static func getUsers(for query: String, completion: @escaping (SearchResponse) -&gt; Void) {
    // ...
    AF.request(url, parameters: nil).validate()
        .responseDecodable(of: SearchResponse.self, decoder: decoder) { response in
            guard let result = response.value else { ... }
            completion(result)
    }
}
</code></pre>

<p>which allows to get rid of the conditional case in the calling function <code>searchUsers()</code>:</p>

<pre><code>ServiceManager.getUsers(for: name) {[weak self] (response) in
    guard let self = self else { return }
    // guard let response = response as? SearchResponse else { return }
    // ^-- No longer needed.
    self.users = response.users
    print("RESPONSE", name, response.users.count)
}
</code></pre>

<h3>Handle rate limits and paginated responses</h3>

<p>Of course the first thing I did was to download your code and compile the app. That worked flawlessly, it compiled without warnings. Great!</p>

<p>Then I ran the app in the iOS Simulator. At first it seemed to work correctly, but then I typed my GitHub user name into the search field: No result – what is that? OK, delete the search field and try again: Now the tableview wasn't updated at all. Nothing seemed to happen anymore.</p>

<p>To isolate the problem, I added a </p>

<pre><code>print("ERROR", response.error)
</code></pre>

<p>in the failure part of <code>getUsers()</code>. This revealed that after some time, the GitHub API responded with an HTTP error 403. And indeed, the <a href="https://developer.github.com/v3/search/" rel="nofollow noreferrer">GitHub Search API documentation</a> states that search requests are limited to 30 requests per minute, and even to 10 requests per minute for unauthenticated users.</p>

<p>There is not much one can do about this limit, but a small remedy might be a “delayed search”: If the users type "ABCD" then there is no need to search for "A", then for "AB", "ABC", and finally for "ABCD". If you start a short timer after each modification to the search text, and start the actual search only if the search text is not modified for some time then the number of search requests is already reduces.</p>

<p>You could also <em>cache</em> search results in order to submit fewer requests.</p>

<p>Also GitHub responses are <a href="https://developer.github.com/v3/#pagination" rel="nofollow noreferrer">paginated</a> to 30 items by default. This can be increased to 100 at most, but even then you'll normally not get all items with a single request.</p>

<p>The <a href="https://developer.github.com/v3/#link-header" rel="nofollow noreferrer">link header</a> in the search response contains the necessary information. You can use that to either</p>

<ul>
<li>issue more request for the remaining items. Perhaps only when the user actually scrolls to the end of the current list, again in order to limit the number of requests.</li>
<li>or just display “More ...” at the end of the list, so that the user knows that there are more items than are currently displayed.</li>
</ul>
    </div>