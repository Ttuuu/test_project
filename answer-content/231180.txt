<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<pre><code>   /*9*/ template&lt;class Alloc, class = std::enable_if_t&lt;std::uses_allocator_v&lt;Container, Alloc&gt;&gt;&gt;
   BlockingQueue(const BlockingQueue&amp; other, const Alloc&amp; alloc) : queue_(alloc)
   {
      auto lock{std::scoped_lock(other.mutex_)};
      queue_ = other.queue_;
   }
</code></pre>

<p>This doesn't look quite right. <code>queue_ = other.queue;</code> may cause the allocator from <code>other.queue</code> to be used, <a href="https://en.cppreference.com/w/cpp/container/deque/operator%3D" rel="nofollow noreferrer">depending on the allocator traits</a>.</p>

<p>To ensure correct behavior, we probably need to use the relevant <code>Container</code> constructor instead:</p>

<pre><code>   /*9*/ template&lt;class Alloc, class = std::enable_if_t&lt;std::uses_allocator_v&lt;Container, Alloc&gt;&gt;&gt;
   BlockingQueue(const BlockingQueue&amp; other, const Alloc&amp; alloc)
   {
      auto lock{std::scoped_lock(other.mutex_)};
      queue_ = Container(other.queue_, alloc);
   }
</code></pre>

<p>(And the same for <code>/*10*/</code>).</p>

<hr>

<pre><code>[[nodiscard]] auto size() const noexcept(noexcept(std::declval&lt;Container&amp;&gt;().size()))
[[nodiscard]] auto clear_count()
... etc.
</code></pre>

<p>We could use <code>size_type</code> rather than <code>auto</code>.</p>

<hr>

<pre><code>[[nodiscard]] auto clear_count()
... etc.
</code></pre>

<p>Perhaps <code>count_clear</code> would better reflect the order that this function does things in. (And the same for the other similar functions).</p>

<hr>

<p>(I'm not very familiar with <code>noexcept</code>, so I haven't checked that aspect).</p>
    </div>