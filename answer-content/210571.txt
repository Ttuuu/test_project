<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I have looked at the xml data coming in and I noticed that, for example, 'primary_outcome' and 'secondary_outcome' includes other tags ('measure', 'timeframe' and 'description'). Maybe you need all the information in tags but if you needed to retreive only the 'measure' for these tags you could do something like this:</p>

<p><strong>Solution 3</strong></p>

<pre><code>import requests
from bs4 import BeautifulSoup
import pprint

def clinicalTrialsGov (nctid):
    data = BeautifulSoup(requests.get("https://clinicaltrials.gov/ct2/show/" + nctid + "?displayxml=true").text, "xml")
    subset = ['study_type', 'allocation', 'intervention_model',
              'primary_purpose', 'masking', 'enrollment',
              'official_title', 'condition', 'minimum_age',
              'maximum_age', 'gender', 'healthy_volunteers',
              'phase', 'number_of_arms', 'intervention_name',
              'intervention_type', 'arm_group_type']
    subset_has_measure = ['primary_outcome', 'secondary_outcome',]

    tag_dict = {f'ct{subset_detail.capitalize()}' : [current_tag.text for current_tag in data.find_all(subset_detail)]
                for subset_detail in subset}
    tag_dict_with_measure = {f'ct{subset_detail.capitalize()}' : [current_tag.text
                                                                  for current_tag
                                                                  in data.select(f'{subset_detail} measure')]
                             for subset_detail in subset_has_measure}
    result_data = {k: ", ".join(v) for (k, v) in tag_dict.items() if v}
    result_data.update((k, ", ".join(v)) for (k, v) in tag_dict_with_measure.items() if v)
    result_data['ctID'] = nctid
    return result_data

pprint.pprint(clinicalTrialsGov("NCT01220960"))
</code></pre>

<ul>
<li>Instead of using <code>.find_all()</code> I use <code>.select()</code> which enables us to use a CSS expression to the tag we want</li>
</ul>

<p>You could in fact generalize this situation for something else than 'measure':</p>

<p><strong>Solution 4</strong></p>

<pre><code>import requests
from bs4 import BeautifulSoup
import pprint

def clinicalTrialsGov (nctid):
    data = BeautifulSoup(requests.get("https://clinicaltrials.gov/ct2/show/" + nctid + "?displayxml=true").text, "xml")
    subset = { '': ['study_type', 'allocation', 'intervention_model',
                    'primary_purpose', 'masking', 'enrollment',
                    'official_title', 'condition', 'minimum_age',
                    'maximum_age', 'gender', 'healthy_volunteers', 'phase',
                    'number_of_arms', 'intervention_name', 'intervention_type',
                    'arm_group_type'],
               'measure': ['primary_outcome', 'secondary_outcome',]
               }
    tag_dict = {f'ct{subset_detail.capitalize()}' : [current_tag.text
                                                     for current_tag
                                                     in data.select(f'{subset_detail} {subset_category}')]
                for (subset_category, subset_types) in subset.items() for subset_detail in subset_types}
    result_data = {k: ", ".join(v) for (k, v) in tag_dict.items() if v}
    result_data['ctID'] = nctid
    return result_data

pprint.pprint(clinicalTrialsGov("NCT01220960"))
</code></pre>
    </div>