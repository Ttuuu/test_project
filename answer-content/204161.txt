<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Feedback</h2>

<p>The simulator itself looks nice. I like the simple layout of the number pad, as well as the animations on the door. The colors look nice as well. As far as the code goes, there are some suggestions outlined below. I do like the use of partially applied functions in the calls to <code>setTimeout()</code> as well as the use of <code>addEventListener()</code> for the UI events.</p>

<h2>Suggestions</h2>

<p>Many of the suggestions below come from experience as well as articles like <a href="https://ilikekillnerds.com/2015/02/stop-writing-slow-javascript/" rel="nofollow noreferrer">this one</a>.</p>

<h3>Prototype methods</h3>

<p>With idiomatic javascript, methods are typically defined on the prototype instead of in the constructor function. So instead of </p>

<blockquote>
<pre><code>this.openDoors = function(doors) {
</code></pre>
</blockquote>

<p>that would be added outside the constructor, on the prototype:</p>

<pre><code>Elevator.prototype.openDoors = function(doors) {
</code></pre>

<p>Read more about this topic on the <a href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects/Object_prototypes#Modifying_prototypes" rel="nofollow noreferrer">MDN documentation for <em>Modifying Prototypes</em></a> as well as <a href="https://stackoverflow.com/a/4508498/1575353">this SO answer</a>.</p>

<h3>Ecmascript 2015 features</h3>

<p>It appears that some <a href="/questions/tagged/ecmascript-2015" class="post-tag" title="show questions tagged 'ecmascript-2015'" rel="tag">ecmascript-2015</a> features are used, like <code>const</code>:</p>

<blockquote>
<pre><code>const doorOpenSpeed = 3
</code></pre>
</blockquote>

<p>And arrow functions:</p>

<blockquote>
<pre><code>this.availableFloors = Array.from({length: 10}, (min, max) =&gt; max+1); 
</code></pre>
</blockquote>

<p>In that case, <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes" rel="nofollow noreferrer">classes</a> could be used for <code>Elevator</code> and <code>Panel</code>, <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of" rel="nofollow noreferrer"><code>for...of</code> loops</a> could be used instead of <code>for...in</code> loops, etc..</p>

<h3>Selecting elements by Id</h3>

<p>There are many calls to select elements using the <em>id</em> attribute with <code>document.querySelector()</code>. For example:</p>

<blockquote>
<pre><code>var enter = document.querySelector("#enter"); 
</code></pre>
</blockquote>

<p>While this works, it would be much faster to use <a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/getElementById" rel="nofollow noreferrer"><code>document.getElementById()</code></a>.</p>

<pre><code>var enter = document.getElementById("enter"); 
</code></pre>

<p>For a comparison, see <a href="https://jsperf.com/getelementbyid-vs-queryselector" rel="nofollow noreferrer">this performance test</a>.</p>

<h3>Cache DOM references</h3>

<p>It may not make a large difference on a small page like this but if you work on a larger application with many more elements to be accessed via the DOM, it is wise to store them in a variable (preferably using <code>const</code> to avoid re-assignment) and use that variable whenever necessary. </p>
    </div>