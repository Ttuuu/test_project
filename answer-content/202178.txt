<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'll begin by answering the easiest question:</p>

<blockquote>
  <p>Have I gone too overboard by using BigInteger?</p>
</blockquote>

<p>Yes. The problem already ensures the variables are in an appropriate range because they are all &lt;= 1e9 and the max value of an int is 2,147,483,647 or 2e9 (<a href="https://docs.oracle.com/javase/specs/jls/se8/html/jls-4.html#jls-4.2.1" rel="nofollow noreferrer">source</a>), which is greater than 1e9. Using an int would be more appropriate.</p>

<p>But looking more deeply, I see you have used LCM as part of your algorithm, which is why you have become dependent on BigIntegers. I know LCM is not a necessary part of an algorithm, so I would use an alternative approach. But more on that later...</p>

<blockquote>
  <p>How can I further improve my approach?</p>
</blockquote>

<p>Note I'm using this section to critique your code without fundamentally changing the algorithm.</p>

<p>Stylistically, line breaks in between each line are unnecessary. Instead, I usually tend to group parts together that do similar things (e.g. assignment) or are multiple parts of a certain process (which could later be converted to a function if it's worthwhile, or if a library function already exists doing the thing I'm trying to do).</p>

<pre><code>BigInteger limit = new BigInteger("1000000000");

//...

return (numTotal.mod(limit)).intValue();
</code></pre>

<p>This is quite a concerning pair of lines from a clean code perspective. Putting aside that <code>numtotal</code> should not be able to exceed 1e9 by the nature of the problem, i.e. if <code>numtotal</code> <em>were</em> able to exceed 1e9, you should not just modulus the value until it fits into the range. Instead, you should <a href="https://docs.oracle.com/javase/tutorial/essential/exceptions/throwing.html" rel="nofollow noreferrer">throw an exception</a> if the result is too large.</p>

<p>Without changing the algorithm, there are some other <a href="https://en.wikipedia.org/wiki/Don%27t_repeat_yourself" rel="nofollow noreferrer">DRY</a> improvements. The first thing I notice is <code>D - 1</code> is repeated throughout the code. I would probably assign this to a variable called <code>maxValue</code>. I also notice the structure of <code>VAR_1 / gcd(VAR_1, VAR_2) * VAR_2</code> to get LCM is suitable for an LCM function. Also concerning is the convolutions of A,B,C variable names; I would probably use arrays to allow for unbounded porting of the variables beyond three variables.</p>

<hr>

<blockquote>
  <p>Can space and time complexity be further improved?</p>
</blockquote>

<p>In terms of efficiency, I think you're doing more a great deal more work than you need to.</p>

<p>My basic idea about how to approach this problem would be:</p>

<ul>
<li>Create an empty sorted set to store factors.</li>
<li>Merge the set of factors from A, B, and C with the main set of factors.</li>
<li>Remove all the factors that are &gt;= D from the set of factors; this could be very efficient with binary search</li>
<li>Return the length of the set of factors.</li>
</ul>

<p>This approach is probably unnecessarily space inefficient; I can imagine there might be a way to iterate through A, B, and C's factors alternatively and simultaneously, removing duplicates as it goes along and stopping once D is reached. But as a first start, this approach limits the number of times I have to handle generating factors from a number, and allows a simple and clear base from which to build more complexity.</p>
    </div>