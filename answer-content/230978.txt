<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I normally don't like to do complete rewrites for reviews as I don't think that they're usually helpful. Here though, the major problem that I see with your code is you're trying to do far too much "manually". You aren't making good use of built-in Python constructs that automate some of the painful elements. You also have everything in one massive block. I rewrote this from scratch to show how I'd approach the problem fresh.</p>

<p>There are a few discrete problems to solve here:</p>

<ul>
<li><p>Check that each sums correctly:</p>

<ul>
<li>Rows</li>
<li>Columns</li>
<li>Diagonals</li>
</ul></li>
<li><p>Check that the square is in fact a square.</p></li>
<li><p>Check that it contains the correct set of numbers.</p></li>
</ul>

<p>I see each of these as distinct problems that should be handled separately. In your current code, you have everything mixed together in one massive function which makes it difficult to tell what is responsible for what job. It's simply not very easy code to read.</p>

<p>I ended up breaking the problem up into multiple <em>tiny</em> functions, then tying everything together in <code>is_magic_square</code>:</p>

<pre><code>from typing import List, Iterable, Callable
from functools import partial

Grid = List[List[int]]  # Might as well create an alias for this

def has_correct_dimensions(grid: Grid) -&gt; bool:
    """Returns whether or not the grid is a non-jagged square."""
    return all(len(row) == len(grid) for row in grid)


def is_normal_square(grid: Grid) -&gt; bool:
    """Returns whether or not the function contains unique numbers from 1 to n**2."""
    max_n = len(grid[0]) ** 2
    # Does the set of numbers in the flattened grid contain the same numbers as a range set from 1 to n**2?
    return set(e for row in grid for e in row) == set(range(1, max_n + 1))   


def check_each(iterable: Iterable[Iterable[int]], magic_sum: int) -&gt; bool:
    """Returns whether or not every sub-iterable collection sums to the magic sum"""
    return all(sum(elem) == magic_sum for elem in iterable)


def diagonal_of(grid: Grid, y_indexer: Callable[[int], int]) -&gt; Iterable[int]:
    """Generates a line of elements from the grid. y = y_indexer(x)."""
    return (grid[y_indexer(x)][x] for x in range(len(grid)))


def is_magic_square(grid: Grid) -&gt; bool:
    """Returns whether or not the supplied grid is a proper normal magic square."""
    n_rows = len(grid)
    magic_sum = n_rows * (n_rows ** 2 + 1) / 2

    check = partial(check_each, magic_sum=magic_sum)

    return is_normal_square(grid) and \
           has_correct_dimensions(grid) and \
           check(grid) and \  # Rows
           check(zip(*grid)) and \  # Columns
           check([diagonal_of(grid, lambda x: x),
                  diagonal_of(grid, lambda x: len(grid) - x - 1)])
</code></pre>

<p>Notice how I have small functions with well defined jobs. Also note how I'm making fairly extensive use of high-level Python helpers. <code>all</code> is great whenever you need to ensure that something is True across over an entire collection. And <code>zip</code> can be used to break the grid into columns. </p>

<p>Even with this all broken up into functions, it's still 7 lines shorter than the original. It's also ~10x faster which I certainly didn't expect since I'm doing expensive shortcut stuff like <code>set(e for row in grid for e in row) == set(range(1, max_n + 1))</code>.</p>

<p>My solutions is far from perfect though. Like I said above, I'm doing a few things quite wastefully. I'm using a lot of lazy operations (like with generator expressions), and repeatedly putting a whole <code>range</code> into a set over and over.</p>

<p>The <code>return</code> in <code>is_magic_square</code> could probably be broken up too. I think it's fine, but it might make some people gag. It could be cleaned up a bit using <code>all</code>:</p>

<pre><code>return all([is_normal_square(grid),
            has_correct_dimensions(grid),
            check(grid),
            check(zip(*grid)),
            check([diagonal_of(grid, lambda x: x),
                   diagonal_of(grid, lambda x: len(grid) - x - 1)])])
</code></pre>

<p>At least that gets rid of the ugly line continuations.</p>

<hr>

<p>The major thing in your code that I will point out though is this atrocity:</p>

<pre><code>except:
    return False
</code></pre>

<p>I think I've mentioned this before: don't do this. If you need to catch an exception, specify the exception, and keep the <code>try</code> in the narrowest scope necessary.</p>

<p>Why? Because, case and point, when I tried to time your function, <code>timeit</code> was showing that your function was executing <em>one million times in 2 seconds</em>. I was blown away. Then I ran the tests though and saw that your code was returning <code>False</code> for every test. After some quick checking, I realized that I had forgotten to import numpy when I pasted your code.</p>

<p>Your code was returning a valid result even though the required packages for the code to run weren't even imported. Stuff like that will eventually bite you via long, painful debugging sessions. Silencing errors is, in my opinion, literally one of the worst things you can possibly do when programming.</p>
    </div>