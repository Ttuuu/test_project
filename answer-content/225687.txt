<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Iterating over all possible keys</h1>

<p>You have the problem that you need to nest more and more loops for longer passwords.
Instead of having nested for-loops, where each loop has an iterator that represents one character of the key, you should treat the whole key as one single iterator. For example, with a key of length 5, the lowest value of that iterator is <code>"aaaaa"</code>, and the highest is <code>"ZZZZZ"</code>. Now think of how you write a regular for-loop, and instead of <code>int i</code>, use <code>char key[]</code> as the iterator variable. Then, you have to check whether the key is valid; let's assume we will set it to the empty string if we reached the end. At the end of the loop we have to increment our iterator. That's too much work to do inside a single for-statement, but we can write functions for it. So the for-loop should look like:</p>

<pre><code>for(char key[] = "aaaaa"; key[0] != '\0'; increment(key)) {
    char *crackhash = crypt(key, salt);

    if(strcmp(crackhash, hash) == 0) {
        printf("%s\n", key);
        return true;
    } 
}
</code></pre>

<p>The function <code>increment()</code> should look like this:</p>

<pre><code>void increment(char *key) {
    static const char *alphas = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";

    /* Increment the first character of key.
       If it was 'Z', then reset the first character to 'a',
       and continue with the next character, otherwise exit.
       If every character is 'Z', make the key an empty string.
    */
    for (int i = 0; key[i] != '\0'; i++) {
        char *value = strchr(alphas, key[i]);
        ptrdiff_t pos = value - alphas;
        pos++;

        if (alphas[pos]) {
            key[i] = alphas[pos];
            break;
        } else {
            if (key[i + 1] == '\0') {
                key[0] = '\0';
            } else {
                key[i] = alphas[0];
            }
        }
    }     
}
</code></pre>

<p>The first time <code>increment()</code> is called with a key of length 5, <code>key</code> will be <code>"aaaaa"</code>. The function will then look at the first character, and look up where in the string <code>alphas</code> this character appears. Since <code>'a'</code> is the first character in <code>alphas</code>, <code>pos</code> will be <code>0</code>. It then increments <code>pos</code> to <code>1</code>, and will write back <code>alphas[pos]</code>, which is <code>'b'</code>, to the first position in <code>key</code>. Thus, the contents of <code>key</code> will then be <code>"baaaa"</code>. At this point, it breaks out of the for-loop and returns. The next time <code>increment()</code> will be called, it will set <code>key</code> to <code>"caaaa"</code>, and so on, until it is <code>"Zaaaa"</code>. When <code>increment()</code> is called with that value of the key, it will notice that after incrementing <code>pos</code>, <code>alphas[pos]</code> is the NUL character at the end of the the string <code>alphas</code>. It then sets the first character of <code>key</code> to the first character in <code>alphas</code> (<code>'a'</code>), and instead of breaking out of the for loop, it will continue with the second character of <code>'key'</code>. Here it does exactly the same as it did for the first character, so it sees an <code>'a'</code> and turns it into a <code>'b'</code>. So after <code>"Zaaaa"</code>, <code>key</code> will now become <code>"abaaa"</code>. Next time it will again only increment the first character, until it becomes <code>"Zbaaa"</code>, then the next key will be <code>"acaaa"</code>, and so on until it reaches <code>"ZZaaa"</code>. At that time, the for-loop goes all the way to the third character in <code>key</code>, and the next value will be <code>"aabaa"</code>. This goes on and on until <code>key</code> is <code>"ZZZZZ"</code>; when <code>increment()</code> is called with this value, it will reach the point where it sees that there is no sixth character to increment (<code>key[i + 1] == '\0'</code> is true), and will then set the first character of <code>key</code> to the NUL byte, which means <code>key</code> will become an empty string. This is the signal that it has completed iterating over all possible keys.</p>

<p>Note how we now just have two for loops, one in <code>increment()</code> and one in the main function. Also note that nowhere did we actually have to specify the length of the key, so the above code works for any length of key! So we can write just one more, outer for-loop to check keys of all possible sizes:</p>

<pre><code>char key[MAX_LEN + 1] = "";

for(int len = 1; len &lt;= MAX_LEN; len++) {
    for(memset(key, 'a', len); key[0] != '\0'; increment(key)) {
        char *crackhash = crypt(key, salt);
        ...
    }
}
</code></pre>

<p>The call to <code>memset()</code> is used to set the initial value for the key. It sets the first <code>len</code> bytes of <code>key</code> to the value <code>'a'</code>. So with <code>len</code> being 1, this results in <code>key</code> becoming the string <code>"a"</code>. If len is 2, then <code>key</code> will become <code>"aa"</code>, and so on. It uses the fact that all the other bytes have already been initialized to zero by <code>char key[MAX_LEN + 1] = ""</code>.</p>
    </div>