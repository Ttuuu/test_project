<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Storing passwords in plaintext</h1>

<p>I already mentioned this in a comment to your question: Don't store passwords in plaintext! It's usually not even a good idea for testing (when are you going to test the password storage then?). Plus, it's quite easy to do in Python e.g. using the <a href="https://passlib.readthedocs.io/" rel="noreferrer">passlib</a> library. Inspired from their <a href="https://passlib.readthedocs.io/en/1.7.1/narr/hash-tutorial.html" rel="noreferrer">example section</a>:</p>

<pre class="lang-py prettyprint-override"><code>from passlib.hash import pbkdf2_sha256

hash_ = pbkdf2_sha256.hash("password")
print(hash_)
$pbkdf2-sha256$29000$2RtjbM0ZY8y5l/IeQyhFCA$wxMKXJPS6gtJRKHWki1.z0UQHQlR292ZvFvWEm0wSYc
# verify provides a constant time key comparison function in order to avoid timing attacks
assert pbkdf2_sha256.verify("password", hash_)
assert not pbkdf2_sha256.verify("password2", hash_)
</code></pre>

<p>The example above uses <a href="https://en.wikipedia.org/wiki/PBKDF2" rel="noreferrer">PBKDF2</a> algorithm to store the password, but passlib also supports <a href="https://passlib.readthedocs.io/en/stable/lib/passlib.hash.bcrypt.html#passlib.hash.bcrypt" rel="noreferrer">bcrypt</a>, <a href="https://passlib.readthedocs.io/en/stable/lib/passlib.hash.scrypt.html#passlib.hash.scrypt" rel="noreferrer">scrypt</a>, and the current "state of the art" <a href="https://passlib.readthedocs.io/en/stable/lib/passlib.hash.argon2.html" rel="noreferrer">argon2</a>. All of them are hash functions specifically designed to be used for password storage.</p>

<p>If you don't want to work with an external library, the Python standard library module <code>hashlib</code> has <code>hashlib.scrypt</code> from Python 3.6 onwards (if your platform supports OpenSSL). The usage of this function might not be as smooth as with the library above, and will require a little bit more care from your side.</p>

<h1>Hard-coded paths</h1>

<p>Your application has a few hard-coded paths where your labels should be stored (probably?). You'd usually want to avoid that, so that your code does not have to be changed whenever the location of those files should change. <a href="https://docs.python.org/3/library/os.html#file-names-command-line-arguments-and-environment-variables" rel="noreferrer">Environment variables</a> or a <a href="https://docs.python.org/3/library/configparser.html" rel="noreferrer">config file</a>, maybe also written in <a href="https://docs.python.org/3/library/json.html" rel="noreferrer">JSON</a>, are things to look at. If that's all to fancy for what you have in mind, at least store them into a <code>MODULE_LEVEL_CONSTANT</code> in order to avoid copy-and-pasting the same long string over and over again.</p>

<h1>Reading and writing files</h1>

<p>When using <code>open(...)</code> it's a common <a href="https://docs.python.org/3/tutorial/inputoutput.html#reading-and-writing-files" rel="noreferrer">best practice</a> to use it in conjunction with a context manager, aka <code>with</code> statement. Using <code>with open(...) as file_:</code> takes care to properly close the file no matter what, i.e. also in the event of an exception, which would usually require using something like <code>try: ... finally: ...</code>.</p>

<h1>String formatting</h1>

<p>The current code uses the "old style" <code>%</code> string formatting, which was superseded by <code>.format(...)</code> in Python 2.7 and f-strings in Python 3.6.</p>

<pre class="lang-py prettyprint-override"><code>foo = 1
# old style
"%d" % foo
# Python 2.7+
"{}".format(foo)
# Python 3.6+
f"{foo}"
</code></pre>

<p>Especially f-string are very powerful and convenient. Maybe have a look at <a href="https://realpython.com/python-f-strings/" rel="noreferrer">this blog post</a> if you are interested to learn more about each of the three variants and their features.</p>

<h1>Style and formatting</h1>

<p>The overall appearance of the code seems a bit rough. Especially blank lines are not used very to structure the code into logical blocks. Since your code has grown quite a bit, I'd highly recommend looking for an IDE with autoformatting capabilities or at least a style-checker integration (<a href="http://flake8.pycqa.org/en/latest/" rel="noreferrer">Flake8</a>, <a href="https://www.pylint.org/" rel="noreferrer">Pylint</a>, ...). <a href="https://codereview.meta.stackexchange.com/a/5252/92478">This meta post</a> here on Code Review lists a good first overview of tools and editors to choose from. </p>
    </div>