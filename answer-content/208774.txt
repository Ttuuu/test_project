<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Thanks for sharing your code.</p>

<p>Note that what follows are guesses because I can't run your code, but might gives you an idea for better performance.</p>

<hr>

<p>First thing in your <code>interlink</code> method you call <code>path.length()</code> a few times, the Sun implementation is <strong>O(1)</strong> but it still adds function calls for no good reason (unless the compiler is smart enough to change it itself). So I'd do something like that:</p>

<pre><code>private void interlink(Tree mainTree, String path){
    int pathLength = path.length(); // compute it once here
    for(int i = 0; i &lt; branches.length; i++){
        if(branches[i] != null)
            branches[i].interlink(mainTree, path + (char)(i + 'a'));
    }
    if(pathLength &lt; 2) return;
    Tree node;
    for(int k = 1; k &lt; pathLength; k++){

        node = mainTree;
        for(int c = k; c &lt; pathLength; c++){
            node = node.branches[path.charAt(c) - 'a'];
            if(node == null)
                break;
        }
        if(node != null){
            link = node;
            break;
        }
    }
}
</code></pre>

<p>I think it also is a good things to keep in mind in general as function calls are sometimes expensives.</p>

<p>Another thing is you could use <a href="https://docs.oracle.com/javase/7/docs/api/java/lang/StringBuilder.html" rel="nofollow noreferrer">StringBuilder</a> to do the String concatenation.</p>

<pre><code>for(int i = 0; i &lt; branches.length; i++){
    if(branches[i] != null)
        builder = new StringBuilder();
        builder.append(path);
        builder.append((char)(i + 'a'));
        branches[i].interlink(mainTree, builder.toString());
}
</code></pre>

<p>But the overhead of creating a new <code>StringBuilder</code> inside the loop might kill the performance even more. </p>

<p>Last thing I see is <code>(char)(i + 'a')</code>. Instead of casting the char, if you had an array of char like:</p>

<pre><code>char[] alphabet = {'a', 'b', 'c' ....};
</code></pre>

<p>You could use it like</p>

<pre><code>for(int i = 0; i &lt; branches.length; i++){
    if(branches[i] != null)
        branches[i].interlink(mainTree, path + alphabet[i]);
}
</code></pre>

<p>(or with the <code>StringBuilder</code> version)</p>

<p>And maybe make it a <code>static</code> member of your class <code>Tree</code> to not have a separate copy of it on all instance of your <code>Tree</code>.</p>

<hr>

<p>All of those above are cheap tricks that probably won't make your program run ten times as fast, the biggest gain would be to call <code>interlink</code> less but I cannot see how to do that right now. Good luck!</p>
    </div>