<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The query that ends up being generated is VERY difficult to read/understand and will likely cause you problems in debugging down the line.</p>

<p>I guess I am not understanding why you have a bunch of WHERE clause fragments for parameters/dimensions that are not even pertinent to the filtering operation.</p>

<p>Taking your example URL of:</p>

<pre><code>/search?a1=34&amp;a2=37&amp;c1=50&amp;c2=75
</code></pre>

<p>I would think you should strive for a resulting WHERE clause that looks like:</p>

<pre><code>WHERE a BETWEEN '34' AND '37'
AND c BETWEEN '50' AND '75'
</code></pre>

<p>Note that you would probably need to work with the parameter values as integers rather than strings as shown in this example if you did not want a lexicographical comparison.</p>

<p>Note that this could also greatly improve the performance of the query itself as you will no longer be requiring the query execution to have to look at all the indexes for all fields even in the cases where the field filters are totally meaningless.</p>

<p>The bottom line here is to write a good query first, then figure out how to generate it dynamically in your code.</p>

<p>To get to this point, I think you need to abandon the approach of iterating through each known dimension/field, concatenating meaningless where clauses in the process and actually work with the parameters passed via GET.  Those are what you should be iterating on.</p>

<p>You might also consider using a URL format like</p>

<pre><code>/search?a[]=34&amp;a[]=37&amp;c[]=50&amp;c[]=75
</code></pre>

<p>Where you can use the bracket notation to indicate an array of values. This allows for you to handle a list of values of arbitrary length rather than have a series of a*, b*, c*, etc. values that you need to account for throughout your code. Of course, you might need to use <code>getlist()</code> or similar to get the list of values rather than just the last item from the list.</p>

<p>In the query, you might consider not using <code>SELECT *</code>.  This is a bit of lazy code writing, IMO, and it makes it harder for someone reading the code, who may not have visibility into the database schema itself, to understand what the expected field values are.  This can also cause more data being returned than is necessary as in most complex applications, the database tables may have a number of timestamp/audit type of fields that are not really meant to be consumed by the application, so why send this field data to the application if it is not needed?</p>

<p>Finally, I would point out that some of your lines of code are too long, making the code hard to read.</p>

<p>This line for example is particularly bad:</p>

<pre><code>sql_where += " AND ( `{dimension}` {direction}= '{get_dimension}' OR '{get_dimension}' = ('None' OR '') )".format(dimension=dimension, direction=direction, get_dimension=globals()[dimension+str(onetwo)])
</code></pre>

<p>Break this up across multiple lines so that it is easier to read and understand.</p>

<p><strong>Update - data validation</strong></p>

<p>You also are not currently validating your input at all. I think if you implement proper input validation, this would go hand in hand with answering your question about how to build SQL query filter based only on those parameters passed.</p>

<p>At the very start of your code, I would iterate through each of the parameters passed in the request and validate that:</p>

<ul>
<li>the parameters match your expected available dimensions; and</li>
<li>that the values of the parameters match whatever data type and value rules you might consider (i.e. integer values, non-zero length strings, etc.)</li>
</ul>

<p>In doing this, you now know exactly which dimensions you should be applying to your filter - only those that pass this validation.</p>

<p>How you decide to handle cases of unexpected parameters or validation failure is really up to you, but clearly in those cases, you would not want to apply filtering on those dimensions.</p>
    </div>