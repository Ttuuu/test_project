<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<pre><code>  template &lt;typename F&gt;
  void exec(F&amp;&amp; f)
  {
    {
      std::lock_guard&lt;decltype(mutex_)&gt; l(mutex_);

      queue_.emplace_back(std::forward&lt;F&gt;(f));
    }

    cv_.notify_one();
  }
</code></pre>

<p>This is a bit weird. <code>emplace_back</code> allows in-place construction of an object. In this case, it will call the move constructor, copy constructor or a constructor that takes one argument.</p>

<p>If allowing in-place construction of <code>f_t</code>s is a necessary feature, it would be better to use a parameter pack and perfect forwarding (so a constructor with any number of arguments can be used).</p>

<p>However, I suspect that isn't the intention at all, and we just want to copy / move a function object. So we should be using <code>push_back</code>, not <code>emplace_back</code>.</p>

<p>There's also no reason for this to be a template function. We want an <code>f_t</code>. The user also has to pass in a compatible <code>Function</code> type, and call <code>exec</code> with a compatible type so they already have to be aware of exactly what <code>f_t</code> is to use the class. So it would be much cleaner to make <code>f_t</code> public, take a function object by value (as a sink argument), and move it into place:</p>

<pre><code>void exec(f_t f)
{
  ...
    queue_.push_back(std::move(f));
  ...
}
</code></pre>

<p>This makes the intent instantly obvious, and avoids any complications and downsides involved with universal references.</p>

<p>If performance is a serious concern, then one overload taking an <code>f_t const&amp;</code> and one taking an <code>f_t&amp;&amp;</code> would be a reasonable alternative.</p>
    </div>