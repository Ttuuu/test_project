<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>General Implementation</h1>

<p>I would lean towards having a Priceable interface, which the extra enums implement, and having the coffee storing a list of extras, which can be passed the size and return the amount to add to the price.</p>

<pre><code>enum Creamer implements Priceable {
    NONE {
        @Override
        public double getPrice(Size size) {
            return 0;
        }
    }, MILK {
        @Override
        public double getPrice(Size size) {
            switch (size) {
                case TALL:
                    return 0.6;
                case GRANDE:
                    return 0.65;
                case VENTI:
                    return 0.70;
                case TRENTA:
                    return 0.75;
                default:
                    throw new AssertionError("Unknown size");
            }
        }
    }, HALF_N_HALF {
        @Override
        public double getPrice(Size size) {
            switch (size) {
                case TALL:
                    return 0.35;
                case GRANDE:
                    return 0.45;
                case VENTI:
                    return 0.50;
                case TRENTA:
                    return 0.6;
                default:
                    throw new AssertionError("Unknown size");
            }
        }
    };
}

interface Priceable {
    public double getPrice(Size size);
}
</code></pre>

<h1>Use of double for money</h1>

<p>I would try to use int instead of double if possible, so that you do not have to deal with floating point issues.</p>

<h1>Input validation</h1>

<p>At the moment an exception is thrown if the user makes bad input, you probably want to handle this instead.</p>

<h1>Using ordinals</h1>

<p>Using the <code>values()</code> array you can avoid having to switch over the enum members to get them by index.</p>
    </div>