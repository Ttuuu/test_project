<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Design</h3>

<ol>
<li><p><code>#define VAL 1 #define SUB '-' #define ADD '+'</code> etc. are too generically named.  Suggest a naming convention that does not so readily conflict with other code.  Same for function names <code>push(), resize(), pop(), peek()</code>.  In general, the .h files add name all over the name-space.  Suggest a corner of it instead.</p></li>
<li><p>I would expect code guards in the .h files</p>

<pre><code>// or some uppercase variant
#ifndef stack_h
#define stack_h
   ....body of .h file
#endif
</code></pre></li>
<li><p>Rather than allocating per the size of the type, allocate based on the size of the variable.  Less error prone and easier to maintain.</p>

<pre><code>//Stack* st = malloc(sizeof(Stack));
//st-&gt;data = malloc(sizeof(ValType)*ELEMENTARY_SIZE_STACK);
Stack* st = malloc(sizeof *st);
st-&gt;data = malloc(sizeof *(st-&gt;data) * ELEMENTARY_SIZE_STACK);
</code></pre></li>
<li><p>Unclear why code is avoiding <code>-0</code>.  No need for that.</p>

<pre><code>if (temp_ch != '0') // to don't allow the '-0'
</code></pre></li>
<li><p><code>getOperand()</code> does not seem to allow <code>.123</code> as input.  I would expect this to pass.</p></li>
</ol>

<h3>Minor Stuff</h3>

<ol>
<li><p>Suggest <code>bool</code> return type for <code>isOperator()</code>.</p></li>
<li><p>The test for a <code>,</code> to change it into <code>.</code> for <code>atof()</code> is interesting, yet a problem.  <code>atof()</code> accepts a <code>,</code>  or <code>.</code> depending on <em>locale</em>.  I would not folding these two characters together without checking <em>locale</em> and then calling a <em>locale</em> sensitive function.</p></li>
<li><p>Missing check for unary <code>+</code>.  Code check for unary <code>-</code>.  Complete code would check for both.</p></li>
<li><p>Ensure code passes a value in the range of <code>unsigned</code> char to <code>isspace()</code>.  Aside from <code>EOF</code>, passing negative value to <code>isspace()</code> is UB.</p>

<pre><code>// while (isspace(*ptr))
while (isspace((unsigned char) *ptr))
</code></pre></li>
<li><p>As the return <code>ValType pop()</code> may be different from <code>double</code>, ensure a matching type to <code>%f</code>.</p>

<pre><code>// printf("= %f\n", pop(nums))
printf("= %f\n", (double) pop(nums))
</code></pre></li>
<li><p>For debugging, using <code>"%e"</code> is more illuminating.</p>

<pre><code>// printf("= %f\n", (double) pop(nums))
printf("= %e\n", (double) pop(nums))
</code></pre></li>
</ol>

<hr>

<p>Quite a bit more exist to review, but GTG.</p>
    </div>