<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Consider building a different data structure.  </p>

<pre><code>Map&lt;Integer, Integer&gt; valueCounts = new HashMap&lt;&gt;();
for (int element : arr) {
    Integer count = valueCounts.getOrDefault(element, 0);
    valueCounts.put(element, count + 1);
}
</code></pre>

<p>Now we know how many times each element appears in the data.  So we can just </p>

<pre><code>Map&lt;Integer, Integer&gt; results = new HashMap&lt;&gt;();
for (Map.Entry&lt;Integer, Integer&gt; valueCount : valueCounts.entrySet()) {
    int square = valueCount.getKey() * valueCount.getKey();
    int count = valueCounts.getOrDefault(square, 0);

    if (count &gt; 0) {
        results.put(valueCount.getKey(), valueCount.getValue() * count);
    }
}
</code></pre>

<p>This tells us how many pairs there are without actually counting them.  It only counts the elements (in the first block).  </p>

<p>Your original was <span class="math-container">\$\mathcal{O}(n^2)\$</span>.  This version is <span class="math-container">\$\mathcal{O}(n)\$</span>.  You were using nested loops, where this uses sequential loops.  </p>

<p>Note:  I haven't tested this so beware of typos, etc.  </p>

<p>I separated generation from display.  You'll still have to generate the display string.  If it seems like we're missing part of the pair, remember that the second part is always the square of the first part.  You can just generate it as you go.  </p>
    </div>