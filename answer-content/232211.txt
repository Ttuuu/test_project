<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<pre><code>res = [];
for i in range(1, target+1):
  if target % i == 0:
    res.append(i)
</code></pre>

<p>This has a couple notable things. First, Python doesn't use semi-colons in the vast majority of cases. They aren't necessary. Also, whenever you have a loop whose only purpose is to create a list, you'll likely want a <a href="https://www.python.org/dev/peps/pep-0202/#rationale" rel="nofollow noreferrer">list comprehension</a> instead:</p>

<pre><code>res = [i for i in range(1, target + 1) if target % i == 0]
</code></pre>

<p>Whatever is on the left end (<code>i</code> in this case) gets appended to a new list. It can also be "guarded" using an <code>if</code> on the right end. Once you get used to seeing this syntax, it tends to read really nicely.</p>

<p>I also wouldn't write <code>target+1</code> without any spaces. <a href="https://www.python.org/dev/peps/pep-0008/#other-recommendations" rel="nofollow noreferrer">PEP8</a> recommends one space on each side of a binary operator unless you have a good reason to omit them.</p>

<hr>

<pre><code>result = 1
for x in compare_sets: 
     result = result * x  
return result
</code></pre>

<p>The line in the loop could make use of a compound-assignment operator to be more terse:</p>

<pre><code>result *= x
</code></pre>

<p>This loop though is just carrying out a transformation of an "accumulator" (<code>result</code>). This is the ideal case for <a href="https://docs.python.org/3/library/functools.html#functools.reduce" rel="nofollow noreferrer"><code>reduce</code></a>:</p>

<pre><code>from operator import mul
from functools import reduce

result = reduce(mul, compare_sets)
</code></pre>

<p><code>reduce</code> is a function from Functional Programming. It and <code>map</code> are the standard ways of working with lists at a low level in FP. Python decided to tuck it away in <code>functools</code>, but it's a very useful function. And <code>mul</code> is just:</p>

<pre><code>def mul(a, b):
    "Same as a * b."
    return a * b
</code></pre>

<p><code>operator</code> contains many similar "first order" versions of operators for cases like this.</p>

<hr>

<p>I wouldn't have top-level code like you do here. If you try to load this file by importing it or opening it in a REPL, the whole thing is forced to run, even if you just wanted to use or test a single function. Everything that isn't a function or constant definition should ideally be tucked away inside a <code>main</code>. That way you can control when the code is executed. I'd also be hesitant to call <code>quit</code> here. That also makes code harder to work with. Again, if you have this open in a REPL, <code>quit</code> will kill the REPL. I'd just change those <code>quit</code>s to <code>return</code>s once this is inside a <code>main</code>.</p>

<hr>

<p>And your naming isn't too bad. I would use much more descriptive names than <code>i</code> and <code>k</code> though unless those are straight from the equations involved (and even then description always helps).</p>
    </div>