<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Before I criticize your code, I must say this is really a good piece of code and you're heading in a good direction. There is some really good stuff and all the following comments are just to make it better. </p>

<h2>rollDice</h2>

<p>Like @toto2 said, this method could be better. I'll add a little thing, you can use <code>for-each</code> when you loop over an array. I would argue about the utility of doing the <code>new</code> operation. When I roll a die, I don't need a new one every time I need to roll, so can't you just <code>roll</code> ? It will re-roll the die. So I would have done something like :</p>

<pre><code>private static void rollDice(Die [] dieArray){
    for (Die die : dieArray){
        die.roll();
    }
}
</code></pre>

<p>The <code>new</code> was not necessary and <code>roll</code> is already assigned a the value to <code>faceValue</code> so the last line was not necessary <code>dieArray[i].faceValue = dieArray[i].getValue();</code>. I've change the visibility as well, but I'll talk about this later.</p>

<h2>dieArray</h2>

<p>Well first, I'm sorry but this is a bad name. It does not say what it will do, just what it will return. There is some duplication too (I've added a <code>foreach</code> loop to initialize the array since I've modified the other method) :</p>

<blockquote>
<pre><code>public static Die [] dieArray(Scanner keyboard){
    int numDice = getInt(keyboard, "How many dice do you want to throw? ");
    while (numDice &lt;= 0){
        System.out.println("Sorry, you must enter a positive number.");
        numDice = getInt(keyboard, "How many dice do you want to throw? ");
    }
    Die [] dieArray = new Die [numDice];
    for(int i = 0; i &lt; dieArray.length; i++) {
      dieArray[i] = new Die();
    }
    return dieArray;
}
</code></pre>
</blockquote>

<p>The duplication is this line <code>numDice = getInt(keyboard, "How many dice do you want to throw? ");</code>. The problem is if you need to change the text, you have two place to change it and what if you don't want to use <code>getInt</code> but another method, then oops you need to change both. The reason is why do you have a duplication ? It's because <code>getInt</code> does not verify for the rule that the number must be <code>&gt;=0</code>. I would suggest you have a method <code>getNumberOfDice</code> that will call <code>getInt</code> and would check if the input is positive.</p>

<h2>Visibility</h2>

<p>Every methods of your class are <code>public</code>. When you make something <code>public</code> it means you want everyone in the world (I'm exaggerating) to use your function. I'm not sure this is what you need. In fact the modifier I use by default is <code>private</code> and after that I will ask myself do I need to make this <code>public</code>. For a class like that, almost nothing need to be public. </p>

<h2>Static</h2>

<p>Every thing is <code>static</code> too, is it a requirement ? I do not like using static that easily for something that could be easily an instance. I think you could drop the staticness (it's a new word I made up) of your class, this could help you realize that almost every method need an <code>dieArray</code> that could be an instance variable (this would clean out a bunch of methods arguments).</p>

<hr>

<p>One minor nitpick, <code>Scanner.in</code> is not the keyboard, it's the console that called the program (either your IDE or your OS console), I would not be that precise about this variable name, <code>input</code> could be enough.</p>

<hr>

<p><em>I'll leave this part here even if this class should not be modified by the OP, it's important to understand that this class is not well designed (IMO)</em></p>

<h2>Die</h2>

<p>Your <code>Die</code> as a pattern I have some difficulty with, it's when you need to call a method before calling another one. I need to call <code>roll</code> before I call <code>getValue</code>. This can be troublesome since I need a special knowledge before calling your class. You have a couple of options to deal with this. In your case, I would probably return the value of <code>faceValue</code> in the <code>roll</code> method (In fact, I would expect roll to return something but that's just me).</p>

<pre><code>public int roll(){
    faceValue = (int)(Math.random() * 6 + 1);
    return faceValue;
}
</code></pre>

<p>Small comment about naming: the <code>get()</code> method should contain the complete name of the variable of the get call, so <code>getValue</code> should be <code>getFaceValue</code>.</p>

<blockquote>
<pre><code>faceValue = (int)(Math.random() * 6 + 1)
</code></pre>
</blockquote>

<p>I would argue that 6 is a magic number here. Not every die as 6 faces, so you could make a small constant variable in your class to extract that magic variable, like <code>private static int MAXIMUM_NUMBERS_FACES = 6</code> or something like that. </p>
    </div>