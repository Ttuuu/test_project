<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You don't need the grouping at the <code>Client</code> level. No grouping at all, actually. Don't worry, <a href="https://stackoverflow.com/a/53951571/861716">this is a common mistake</a> when people want grouping/aggregation in child collections. Per client, the <code>Tickets</code> can be counted: </p>

<pre><code>return clients
    .Where(cli =&gt; cli.IsActive)
    .Select(cli =&gt; new DashboardItemViewModel
    {
        Id = cli.Id,
        Name = cli.Name,
        Open = cli.Tickets.Count(t =&gt; t.Status == StatusType.Open &amp;&amp; !t.IsArchived),
        Responded = cli.Tickets.Count(t =&gt; t.Status == StatusType.Responded &amp;&amp; !t.IsArchived),
        Resolved = cli.Tickets.Count(t =&gt; t.Status == StatusType.Resolved &amp;&amp; !t.IsArchived),
    });
</code></pre>

<p>Or in query syntax, so we can benefit from the <code>let</code> statement:</p>

<pre><code>return from cli in clients
    where cli.IsActive
    let activeTickets = cli.Tickets.Where(t =&gt; !t.IsArchived)
    select new DashboardItemViewModel
    {
        Id = cli.Id,
        Name = cli.Name,
        Open = activeTickets.Count(t =&gt; t.Status == StatusType.Open),
        Responded = activeTickets.Count(t =&gt; t.Status == StatusType.Responded),
        Resolved = activeTickets.Count(t =&gt; t.Status == StatusType.Resolved)
    };
</code></pre>
    </div>