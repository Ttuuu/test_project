<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Pragma once</h2>

<p>Instead of</p>

<pre><code>#ifndef DP2_MATRIX_H
#define DP2_MATRIX_H
</code></pre>

<p>consider using</p>

<pre><code>#pragma once
</code></pre>

<p>Once is non-standard, but supported by all compilers supporting
C++14 and reduces compilation times.</p>

<h2>Includes</h2>

<p>On MSVC, <code>#include &lt;stdexcept&gt;</code> is needed for the <code>out_of_range</code>
error. I also think your include lines look tidier if you sort them in
alphabetical order. :)</p>

<h2>Bounds checking</h2>

<pre><code>Matrix&lt;int&gt;(10, 10, 0)[10][0]
</code></pre>

<p>Is an error that will be detected by your bounds checking, but</p>

<pre><code>Matrix&lt;int&gt;(10, 10, 0)[0][10]
</code></pre>

<p>is the same type of error, but won't be detected. Consider following
the STL convention described in <a href="https://stackoverflow.com/questions/1026042/when-implementing-operator-how-should-i-include-bounds-checking">this Stackoverflow
answer</a>. That
is, you remove bounds checking from <code>operator[]</code> but add a method <code>at</code>
which does bounds checking for both dimensions.</p>

<h2>Const correctness</h2>

<p>You should add <code>const</code> declared variants of the accessors. You can
also add it to the parameters, but imho, that is not as useful.</p>

<p>Result:</p>

<pre><code>#pragma once

#include &lt;algorithm&gt;
#include &lt;cstdio&gt;
#include &lt;memory&gt;
#include &lt;stdexcept&gt;

template &lt;typename T&gt;
class Matrix {
private:
    size_t row{};
    size_t col{};
    std::unique_ptr&lt;T[]&gt; data;
    void boundscheck(int r, int c) const {
        if (!(0 &lt;= r &amp;&amp; r &lt; row &amp;&amp; 0 &lt;= c &amp;&amp; c &lt; col)) {
            throw std::out_of_range("Can not access out of bound element!");
        }
    }
public:
    // Set all the values of the Matrix
    void setValues(T value) {
        std::fill_n(data.get(), row*col, value);
    }
    explicit Matrix(size_t row, size_t col, T def) {
        // Create a matrix of row X col and initialize
        // each element of the matrix with def
        this-&gt;row = row;
        this-&gt;col = col;
        this-&gt;data = std::make_unique&lt;T[]&gt;(this-&gt;row * this-&gt;col);
        setValues(def);
    }
    // Overload the [] operator for the 2d array like access
    T* operator[](int r) {
        return &amp;this-&gt;data[r * col];
    }
    const T* operator[](int r) const {
        return &amp;this-&gt;data[r * col];
    }
    T&amp; at(int r, int c) {
        boundscheck(r, c);
        return this-&gt;data[r * col + c];
    }
    const T&amp; at(int r, int c) const {
        boundscheck(r, c);
        return this-&gt;data[r * col + c];
    }
    // Overload the &lt;&lt; operator for console logging
    friend std::ostream&amp; operator&lt;&lt; (std::ostream&amp; os, Matrix &amp;mObj) {
        auto shape = mObj.shape();
        for(int i=0; i&lt; shape.first; i++) {
            for(int j=0; j&lt;shape.second; j++) {
                os &lt;&lt; mObj[i][j] &lt;&lt; " ";
            }
            os &lt;&lt; "\n";
        }
        return os;
    }
    // Get row and col values
    std::pair&lt;size_t, size_t&gt; shape() const {
        return std::make_pair(this-&gt;row, this-&gt;col);
    }
};
</code></pre>

<p>I don't think it is possible to make a general matrix class consume less memory or run quicker than that. Compilers generate pretty good code for the accessor functions. You probably have to use a different data type such as a sparse matrix to improve performance much. </p>
    </div>