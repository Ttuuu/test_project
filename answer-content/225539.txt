<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Review</h3>

<p><em>This review handles readability metrics and C# conventions only and should provide insights to reach some of your goals.</em></p>

<blockquote>
  <p>Goals: learn C#, improve coding style, create good to read code</p>
</blockquote>

<ul>
<li>There are a couple of variants how to name instance variables. The most common one is to use an underscore as prefix and camel-case the name; <code>_client</code>, <code>_listener</code>, <code>_listenThread</code>, <code>_tcpReaderThread</code>, <code>_receivedStringQueue</code>, and so on.</li>
<li>Use a generic queue when dealing with a specific type;  <code>Queue ReceivedStringQueue</code> -&gt;  <code>Queue&lt;string&gt; ReceivedDataQueue</code>. The specifc type's name should not be part of the variable name.</li>
<li>Use null-propagation where convenient. <code>if (TcpReaderThread != null) TcpReaderThread.Abort();</code> -&gt; <code>TcpReaderThread?.Abort();</code></li>
<li>Avoid empty catch blocks; <code>catch { }</code> Think about which errors to catch, how to handle them, logging, rethrowing, invalidating state, etc.</li>
<li>Avoid redundant checks; <code>if (ReceivedStringQueue.Count &gt; 0) ReceivedStringQueue.Clear();</code> -&gt; <code>ReceivedStringQueue.Clear();</code> Clear does not care what the count is.</li>
<li>It's a convention to prefix method names with <code>Try</code> when you return a boolean whether or not the method call was a sucess;  <code>bool Send(string sendString)</code> -&gt;  <code>bool TrySend(string sendString)</code>.</li>
<li>The type of member should not be part of a member name; <code>ListeningMethod</code></li>
</ul>
    </div>