<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>I would like to remove these switch statments in the same time</p>
</blockquote>

<pre><code>[Flags]
public enum StatusCode{
    codeX = 1,
    codeY = 2,
    codeZ = 4,
    codeA = 8,
    editable = codeX | codeZ,
    deleteable = codeY | codeZ
}
</code></pre>

<p><strong>Key points</strong></p>

<ul>
<li>Use the <code>Flags</code> attribute</li>
<li>enum values are powers of 2 - NOT multiples of 2</li>
<li>bit-wise AND, OR provides the magic!</li>
</ul>

<h2>Edit</h2>

<p>addressing the comments:</p>

<pre><code>public static class StatusCodes {
    private Dictionary&lt;StatusCode, int&gt; values;
    private Dictionary&lt;int,StatusCode&gt; keys;

    static StatusCodes() {

        values = new Dictionary&lt;StatusCode, string&gt; {
            {StatusCode.A, 10},
            {StatusCode.B, 20},
            // and so on
        }

        keys = new Dictionary&lt;in, StatusCode&gt; {
            {10, StatusCode.A},
            {20, StatusCode.B},
        }
    }

    public static int GetValue(StatusCode theStatusCodeKey) {} // don't forget error trapping!
    public static StatusCode GetKey(int theIntValue) {}  // ditto

    public static bool Editable(StatusCode thisCode) {
        return (StatusCode.editable &amp; thisCode) == thisCode;
    }

    public static bool Editable(int thisValue) {
        return Editable( GetKey(thisValue));
    }
}
</code></pre>

<ul>
<li>The definition of the codes is all in one place - that's SOLID (D = DRY, don't repeat yourself)</li>
<li>The definitions are in its own class - that's SOLID (S = single responsibility)</li>
<li><code>editable</code> and <code>deleteable</code> can be removed from <code>Message</code> - that's <em>very</em> SOLID (S = single responsibility)</li>
<li>We know what all those integers mean - thats.. well, just good programming.</li>
<li>The <code>StatusCode</code>s are available anywhere and everywhere in the application - That's SOLID, an attribute of being DRY.</li>
<li>I'm not sure what "status code values might not be fixed" in the comments means. Surely the set of status codes is finite.</li>
</ul>

<h2>Edit</h2>

<ul>
<li>Define "editability" in StatusCodes</li>
<li>Use above to express Message is editable</li>
<li>Address issue of exposing <code>StatusCode.editable</code> "as if it were a valid code"</li>
<li>Adhere to Single Responsibility</li>
<li>Adhere to DRY principle</li>
</ul>

<p>...</p>

<pre><code>public static class StatusCodes
{
    private static Dictionary&lt;StatusCode, int&gt; values;
    private static Dictionary&lt;int,StatusCode&gt; keys;

    static StatusCodes() {

        values = new Dictionary&lt;StatusCode, int&gt; {
            {StatusCode.A, 10},
            {StatusCode.B, 20},
            {StatusCode.C, 30},
            {StatusCode.D, 40}
            // and so on
        };

        keys = new Dictionary&lt;int, StatusCode&gt; {
            {10, StatusCode.A},
            {20, StatusCode.B},
            {30, StatusCode.C},
            {40, StatusCode.D}
        };
    }

    [Flags]
    enum Fungability
    {
        Editable = StatusCode.A | StatusCode.B,
        Deleteable = StatusCode.B | StatusCode.D
    }

    public static int GetValue( StatusCode theStatusCodeKey ) {
        int retVal;

        values.TryGetValue( theStatusCodeKey, out retVal );
        return retVal;
    } // don't forget error trapping!


    public static StatusCode GetKey( int theIntValue ) {
        StatusCode retVal;
        keys.TryGetValue( theIntValue, out retVal );
        return retVal;
    }  // ditto

    public static bool Editable( StatusCode thisCode )
    {
        return ( (StatusCode)Fungability.Editable &amp; thisCode ) == thisCode;
    }

    public static bool Editable( int thisValue )
    {
        return Editable( GetKey( thisValue ) );
    }

}


public class Message
{
    public StatusCode myStatus;

    public Message( int statusCode = 20 ) { myStatus = StatusCodes.GetKey(statusCode); }
    public Message( StatusCode statusCode = StatusCode.A ) { myStatus = statusCode; }

    public bool Editable
    {
        get { return StatusCodes.Editable( myStatus ); }
    }

    public bool Deleteable
    {
        get { return StatusCodes.Deleteable( myStatus ); }
    }
}
</code></pre>

<p><strong>Take Away</strong></p>

<ul>
<li>Structure data in an OO way</li>
<li>Expose the data adhering to the Single Responsibility principle</li>
<li>You get DRY as a side effect</li>
<li>Structure yields simplicity, coherence, clarity. <code>Editable</code> is implemented with <em>only one line of code!</em></li>
<li><code>Message.Editable</code> went from originally "calculating" if the status code was editable, to simply asking the <code>StatusCode</code> "are you editable?" </li>
</ul>
    </div>