<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>As far as I'm aware, using <code>ThreadStatic</code> like this is fine, and will give you the guarantees you need.</p>

<h2>Overall design</h2>

<p>Your class is doing 2 things:</p>

<ul>
<li>Managing <code>Random</code> instances across threads</li>
<li>Providing methods to query the Random instance</li>
</ul>

<p>I would much prefer to see all the fun methods usable on <em>any</em> <code>Random</code> instance, either wrapping it in another class or just provided as extension methods.</p>

<p>This would leave the <code>ThreadStaticRandom</code> as a tiny little class with a very well defined role.</p>

<p>I suppose the benefit of your design is that it is impossible for someone to mishandle an instance of <code>Random</code> by passing it to another thread, but at the same time it rules out any hope of having reproducible results.</p>

<h2><code>RandomLabels</code></h2>

<p>I do think this is a bad method name. I would never think to look at <code>RandomLabels</code> when I was looking for <code>Bools</code>. If you want to call a method called <code>RandomLabels</code> from a specific piece of code, then consider an extension method for that purpose.</p>

<p>I don't like the implementation either. <code>NextBytes()</code> is having to consume a lot of entropy only for you to throw must of it away. A alternative solution which doesn't depend on what I presume is an implementation detail (too lazy to check if it is even a correct assumption) would be to sample bits from integers. This won't consume any more heap space, and may well be faster.</p>

<h2>Documentation</h2>

<p>I would take issue with your plan to add documentation <em>after</em> writing the methods: writing documentation forces you to be explicit about what the method does (as opposed to how it does it), and I would never be happy with an implementation when I havn't explicitly declared what it is going to do. It's also very easy to 'write documentation later', but that has a habit of not happening (not that I should wish to suggest <em>you</em> wouldn't get around to it!). Part of the joy of inline documentation is that it is easy to do it inline and as you write the methods.</p>

<p>I won't suggest any details that need to be pointed out, because that would be a long list. I would argue you should always provide your documentation for review, because it means we can spot things that are missing (instead of trying to guess what you might forget), and check that it matches the implementation. For example, I don't know whether <code>CopyRandomValues</code> is correct because no-where is it specified that it should sample without replacement.</p>

<h2>Misc</h2>

<ul>
<li><p>You have a lot of good argument validation, but you could do with a few more <code>null</code> checks in places (e.g. in <code>Choice</code>). Also consider using the constructor for <code>ArgumentException</code> which takes two parameters: the parameter name and the message. This makes it that little bit easier to scan when something goes wrong. <code>SelectRandomElements</code> should check that <code>from.Length &gt;= count</code>.</p></li>
<li><p>I don't think you need overloads for <code>T[]</code> when you have <code>ReadOnlySpan&lt;T&gt;</code> or <code>Span&lt;T&gt;</code>: this would just reduce the redundancy a bit. (This can't be quite true of course, because it depends on an implicit conversion, which means it won't work if the caller is depending on some other implicit conversion, but then you can at least call <code>Shuffle&lt;T&gt;(Span&lt;T&gt;)</code> from <code>Shuffle&lt;T&gt;(T[])</code> to reduce duplication). Of course, the cost of simplification would be some unnecessary overhead when handling arrays.</p></li>
<li><p><code>float biasForTrue</code> should probably be a <code>double</code>.</p></li>
<li><p>I'd be temped to ditch the <code>count</code> parameters in <code>CopyRandomValues</code> methods: if the caller want a particular count, they can slice their spans accordingly. This will remove any possible confusion about whether this is a count or an offset and generally give the caller less opportunity to mess up.</p></li>
</ul>
    </div>