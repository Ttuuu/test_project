<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<pre><code>public class Vertex
{
    public FibonacciHeapNode Node { get; set; }
    public State State { get; set; }
    public float MinimumCost { get; set; } = Single.PositiveInfinity;

    public Vertex Previous { get; set; }
    public string PreviousName { get; set; }

    public Vertex(FibonacciHeapNode node = null, State state = default(State))
    {
        this.Node = node;
        this.State = state;
    }
}
</code></pre>
</blockquote>



<blockquote>
  <p>Really worthy of focus here is the last bit, in which the the vertices dictionary created in the constructor is queried. If a State already has a vertex associated with it, then use that; otherwise, create a new vertex to represent the state. As far as I can tell, this is all but necessary. Without it, the "space complexity" for a State with 2 constant parameters would be 2<sup>x</sup>. With it, it is x + 1. The memory savings increase with the number of parameters in an exponential fashion.</p>
</blockquote>

<p>I don't fully understand what you're doing here, but I think you need to revisit the design of the heap. It's far too interconnected. The <code>Graph</code> class shouldn't know about the internals of the heap. My implementation uses some generic code:</p>

<pre><code>public interface PriorityQueue&lt;K, V&gt;
    where V : IComparable&lt;V&gt;
{
    int Count { get; }
    bool ContainsKey(K key);
    void Add(K key, V priority);
    void Update(K key, V priority);
    V this[K key] { get; }
    KeyValuePair&lt;K, V&gt; Pop();
}

public interface IWeightedGraph&lt;TVertex, TWeight&gt;
{
    IEnumerable&lt;(TVertex, TWeight)&gt; Edges(TVertex vertex);
}

public static TWeight ShortestPath&lt;TVertex, TWeight&gt;(this IWeightedGraph&lt;TVertex, TWeight&gt; g, TVertex source, TVertex sink, Func&lt;TWeight, TWeight, TWeight&gt; add)
    where TWeight : IComparable&lt;TWeight&gt;
{
    // Simple Dijkstra implementation.
    PriorityQueue&lt;TVertex, TWeight&gt; q = new BinaryHeap&lt;TVertex, TWeight&gt;();
    var closed = new HashSet&lt;TVertex&gt;();

    q.Add(source, default(TWeight)); // Assume that default(TWeight) is zero
    while (true)
    {
        (var u, var w) = q.Pop();
        if (Equals(u, sink)) return w;

        closed.Add(u);

        foreach ((var v, var x) in g.Edges(u))
        {
            if (closed.Contains(v)) continue;

            var relaxed = add(w, x);

            if (!q.ContainsKey(v)) q.Add(v, relaxed);
            else if (relaxed.CompareTo(q[v]) &lt; 0) q.Update(v, relaxed);
        }
    }
}

class CookieCutterGraph : IWeightedGraph&lt;CookieCutterState, double&gt;
{
    ...
}

var soln = g.ShortestPath(emptyState, targetState, (a, b) =&gt; a + b);
</code></pre>

<p>To use a Fibonacci heap, I would just have to change one line. Also, the heap maintains the mapping from states to whatever internal representation it needs to implement <code>ContainsKey</code> and <code>Update</code>. There's only one instance of each state because the only hard reference is kept inside the heap, and when the heap finishes with it it removes it from its internal structures.</p>

<p>It's true that my <code>ShortestPath</code> method only finds the weight and not the path. The fully general way to find the path is to have a list of popped vertices to their costs, and then run it backwards looking for vertices which have a suitable edge to the current start of the partial path. This still guarantees keeping only one instance of each vertex live (two if it's a struct, because you have a copy in <code>closed</code> as well) without having a class-level cache which leaks memory.</p>

<p>On the bright side, as far as I can tell <code>Vertex.Node</code> is never cleared, so is keeping unnecessary <code>FibonacciHeapNode</code> instances around; and having references from both <code>Vertex</code> to <code>FibonacciHeapNode</code> and vice versa costs an extra 8 bytes for a reference on a 64-bit machine.</p>

<p>For further memory saving around the heap, you could look at using a <a href="//en.wikipedia.org/wiki/Pairing_heap" rel="nofollow noreferrer">pairing heap</a>, which uses less state per node but is claimed to be typically at least as fast as a Fibonacci heap.</p>
    </div>