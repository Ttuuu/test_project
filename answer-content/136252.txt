<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>In a Node.js enviroment using ES2015 (or at least with ES5) you could do like this:</p>

<pre><code>const Student = (() =&gt; {
    let _Student = class {};
    let props = {
        Age: null,
        Name: null,
        ID: null
    };
    for (let prop in props) {
        Object.defineProperty(_Student, prop, {
            get: function() {
                return props[prop];
            },
            set: function(newValue) {
                props[prop] = newValue;
            },
            enumerable: true
        });
    }
    return _Student;
})();

let student = new Student();
student.Age = 12;
student.Name = "Tolani";
student.ID = "Pokemon1234";
console.log(student.Age, student.Name, student.ID); // 12 "Tolani" "Pokemon1234"
</code></pre>

<p><strong>jsFiddle: <a href="https://jsfiddle.net/n3dgfqyq/" rel="nofollow noreferrer">https://jsfiddle.net/n3dgfqyq/</a></strong></p>

<p>This would be the "translation" of your code. Maybe a bit verbose but it has the functionality where the properties works both as setter and getter.</p>

<p>Its not very common, since the class sintax is made to use separate setter and getter, and using <code>this.prop</code> as the value keeper and setting it or getting inside the method. That is the suggestion in <a href="https://codereview.stackexchange.com/users/6502/jfriend00">jfriend00</a>'s answer. </p>
    </div>