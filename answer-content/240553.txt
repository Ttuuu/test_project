<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You should really use an algebraic data type to implement your JSON interface. You can even automatically derive <code>FromJSON</code> instances with <code>DeriveGeneric</code> GHC extension, e.g.</p>

<pre><code>{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE OverloadedStrings #-}

import GHC.Generics
import Data.Aeson
import Data.ByteString.Lazy (ByteString)

data Query = Query { items :: [Entity] }
             deriving (Show, Generic)

instance FromJSON Query -- automatically derived instance by DeriveGeneric

data Entity = Entity { uuid :: String }
              deriving (Show)

instance FromJSON Entity where
    parseJSON = withObject "Entity" $ \v -&gt; do
        -- as your json data is additionally nested with an entity object
        -- extract the entity object first
        obj &lt;- v .: "entity"
        -- then extract the uuid field from the entity object
        uid &lt;- obj .: "uuid"
        return $ Entity uid

testVal :: ByteString
testVal = "{\"items\": [{\"entity\": {\"uuid\": \"needed-value1\"}}, {\"entity\": {\"uuid\": \"needed-value2\"}}]}"

main :: IO ()
main = do
    let mayQuery = decode testVal
    case mayQuery of
        Just query -&gt; print $ map uuid $ items query
        Nothing -&gt; putStrLn "JSON parsing error"
</code></pre>

<p>I transformed your sample <code>Value</code> into a JSON string, to make the parsing clearer.</p>

<p>The <code>FromJSON</code> instance for <code>Query</code> is automatically derived, if you want to write it by hand, you can do this in analogy to the <code>FromJSON</code> instance of <code>Entity</code>.</p>

<p>This way of parsing your JSON data is very scalable, as you can easily add new fields to your data types, without complicating your code.</p>
    </div>