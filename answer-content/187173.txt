<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I assume your original program is the following (as it is not properly indented in the question):</p>

<pre><code>array = []
array1 =[]
for i in range(12, 28123):
    add = 0
    for j in range(1, i//2 + 1):
        if i%j ==0:
            add += j
        if add &gt; i:
            array.append(i)
            break
total_num = list(range(1,28124))

for k in range(len(array)):
    for l in range(k, len(array)):
        add = 0
        add = array[k] + array[l]
        if add not in array1 and add in total_num:
            array1.append(add)
        else:
            continue

print(sum(total_num)-sum(array1))
</code></pre>

<p>First of all, great job! I don't see any logical issues with your implementation.</p>

<h2>Minor nitpick</h2>

<p>Generally, it's best to avoid names like <code>array</code> and <code>array1</code>. This has nothing to do with performance, but helps a lot for program readability. Better names in this case for <code>array</code> and <code>array1</code> would be <code>abundants</code> and <code>abundant_sums</code>.</p>

<h2>Performance</h2>

<p>At a first glance, two big performance problems that can be easily addressed can be found on the line:</p>

<pre><code>if add not in abundant_sums and add in total_num
</code></pre>

<p>These are two array lookups which take linear time (O(n)) and are executed for every possible pair of abundant numbers (which turns out to be a little over 48 million times!).</p>

<p>Let's takle both issues separately:</p>

<ul>
<li><code>add not in abundants</code> - the way to remove this altogether is to make <code>abundant_sums</code> a <a href="https://docs.python.org/2/library/stdtypes.html#set" rel="nofollow noreferrer">set</a>, rather than an array. This way, you can just say <code>abundant_sums.add(add)</code> without first checking if it's already there (OK, perhaps <code>add</code> should be called sum to avoid this :) )</li>
<li><code>add in total_num</code> - this is basically just a range check. And actually, just an upper bound check, since the numbers you deal with could never yield a sum less than 24. So, instead of <code>add in total_num</code> which traverses an array of 28+K items, you can just say <code>add &lt;= 28123</code>. That's it.</li>
</ul>

<p>By just applying these two optimizations, I get a program that produces the correct result in a little over 30s:</p>

<pre><code>abundants = []
abundant_sums = set()
for i in range(12, 28123):
    add = 0
    for j in range(1, i//2 + 1):
        if i%j ==0:
            add += j
        if add &gt; i:
            abundants.append(i)
            break
print len(abundants)
total_num = list(range(1,28124))

for k in range(len(abundants)):
    for l in range(k, len(abundants)):
        add = 0
        add = abundants[k] + abundants[l]
        if add &lt;= 28123:
            abundant_sums.add(add)
print(sum(total_num)-sum(abundant_sums))
</code></pre>

<p>Another slight optimization that you could perform is to not compute the sum of <code>total_num</code>, but just use the formula <code>max * (max+1) / 2</code>. This is unlikely, however, to provide a major benefit in your case, since this calculation takes place only once. Anyway, I believe it's good to know this trick.</p>
    </div>