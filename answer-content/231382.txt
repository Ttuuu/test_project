<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>In addition to <a href="https://codereview.stackexchange.com/a/231373/136864">this</a>, you should specify validation for <code>n</code> ( <code>digit</code> ).
Also, it may be better to group validations into separate function.</p>

<pre><code>void check_input(int min_left, int max_right, int digit) {
  if (max_right &lt;= min_left)
    throw std::invalid_argument("right is &lt;= left, expected right &gt; left");
  if (min_left &lt; 0)
    throw std::invalid_argument("left &lt; 0, expected left &gt; 0");
  if (digit &lt;= 0)
    throw std::invalid_argument("digit &lt;= 0");
    //throw std::invalid_argument("number &lt;= 0");  
  if (digit &gt; 9)
    throw std::invalid_argument("digit &gt; 9");

  ////number:
  //if (digit &gt; max_right)
  //  throw std::invalid_argument("number &gt; right limit");
}

int count_digit_entries(int min_left, int max_right, int digit) {
//...
}

int main() {
  int left_limit, right_limit, num;
  std::cout &lt;&lt; "Enter left limit, right limit and the number(Only positive numbers)\n";
  std::cin &gt;&gt; left_limit &gt;&gt; right_limit &gt;&gt; num;

  check_input(left_limit, right_limit, num);

  int result = count_digit_entries(left_limit, right_limit, num);

  std::cout &lt;&lt; "\nTotal: " &lt;&lt; result &lt;&lt; "\n";
}
</code></pre>

<p>You may want to find not only digits but a whole numbers.</p>

<pre><code>//...


#define DEBUG
#ifdef  DEBUG
#define debug(x) x
#else 
#define debug(x)
#endif


int count_digit_entries(int min_left, int max_right, int search_number) {
  int count = 0;

  int mod = 10;
  while(search_number / mod &gt; 0) mod = mod * 10; // 279 -&gt; 1000

  for (int current_number = min_left, right = max_right; current_number &lt; right; ++current_number) {
    int copied_current_number = current_number; // 542793

    while (copied_current_number &gt;= search_number) {
        // 542793 - 279 % 1000    &gt;0 
        // 54279 - 279 % 1000     =0

      if ( ( (copied_current_number - search_number) % mod ) == 0 ) { 
        debug(std::cout &lt;&lt; current_number &lt;&lt; " ");
        ++count;
      };
      copied_current_number = copied_current_number / 10; 
      // 542793 -&gt; 54279

    };
  };

  return count;
};
</code></pre>

<p>Output:</p>

<pre><code>Enter left limit, right limit and the number(Only positive numbers)
0 1000 25
25 125 225 250 251 252 253 254 255 256 257 258 259 325 425 525 625 725 825 925 
Total: 20
</code></pre>
    </div>