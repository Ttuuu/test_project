<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The implementation of <code>StringEnumeration</code> below allows a subclass to behave as if it was a string enum, and also has some quality-of-life improvements like being able to specify the string associated value for each field using the attribute <code>JsonStringValue()</code>.</p>
<pre><code>/// &lt;summary&gt;Attribute to assign the string value of fields in StringEnumeration.&lt;/summary&gt;
[AttributeUsage(AttributeTargets.Field)]
public class JsonStringValue : Attribute
{
    /// &lt;summary&gt;String value.&lt;/summary&gt;
    public string Value;

    /// &lt;summary&gt;Initializes the Attribute instance to a given value.&lt;/summary&gt;
    public JsonStringValue(string value)
    {
        Value = value;
    }
}

/// &lt;summary&gt;JsonConverter used in string enumeration serialization.&lt;/summary&gt;
public class StringEnumerationConverter : JsonConverter&lt;StringEnumeration&gt;
{
    /// &lt;summary&gt;Whether a type is a subclass of &lt;c&gt;StringEnumeration&lt;/c&gt;.&lt;/summary&gt;
    /// &lt;param name="typeToConvert"&gt;Type to check.&lt;/param&gt;
    /// &lt;returns&gt;True if is a subclass.&lt;/returns&gt;
    public override bool CanConvert(Type typeToConvert)
    {
        return typeof(StringEnumeration).IsAssignableFrom(typeToConvert);
    }

    /// &lt;summary&gt;Read the string value.&lt;/summary&gt;
    /// &lt;param name="reader"&gt;Reader to access the encoded JSON text.&lt;/param&gt;
    /// &lt;param name="typeToConvert"&gt;Type of the object to deserialize.&lt;/param&gt;
    /// &lt;param name="options"&gt;Options for the deserialization.&lt;/param&gt;
    /// &lt;returns&gt;Underlying string enumeration type.&lt;/returns&gt;
    public override StringEnumeration Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        var obj = (StringEnumeration)FormatterServices.GetUninitializedObject(typeToConvert);
        obj.Value = reader.GetString();
        return obj;
    }

    /// &lt;summary&gt;Write the string value.&lt;/summary&gt;
    /// &lt;param name="writer"&gt;Writer to encode the JSON text.&lt;/param&gt;
    /// &lt;param name="value"&gt;Object to serialize.&lt;/param&gt;
    /// &lt;param name="options"&gt;Options for the serialization.&lt;/param&gt;
    public override void Write(Utf8JsonWriter writer, StringEnumeration value, JsonSerializerOptions options)
    {
        writer.WriteStringValue(value);
    }
}

/// &lt;summary&gt;Abstract base class used in string enumerations.&lt;/summary&gt;
public abstract class StringEnumeration
{
    /// &lt;summary&gt;Associated value.&lt;/summary&gt;
    public string Value { get; set; }

    /// &lt;summary&gt;Initializes all static fields in subclasses.&lt;/summary&gt;
    static StringEnumeration()
    {
        var types = typeof(StringEnumeration).Assembly.GetTypes();
        foreach (var type in types)
        {
            if (type.BaseType == typeof(StringEnumeration))
            {
                var fields = type.GetFields(BindingFlags.Public | BindingFlags.Static);
                foreach (var field in fields)
                {
                    var attribute = field.GetCustomAttribute&lt;JsonStringValue&gt;();
                    var name = attribute is null ? field.Name : attribute.Value;
                    var value = (StringEnumeration)FormatterServices.GetUninitializedObject(type);
                    value.Value = name;
                    field.SetValue(null, value);
                }
            }
        }
    }

    /// &lt;summary&gt;Implicit conversion to string.&lt;/summary&gt;
    /// &lt;param name="obj"&gt;And StringEnumeration object.&lt;/param&gt;
    /// &lt;returns&gt;string object.&lt;/returns&gt;
    public static implicit operator string(StringEnumeration obj)
    {
        if (obj is null)
        {
            return null;
        }
        return obj.ToString();
    }

    /// &lt;summary&gt;Get the string associated value.&lt;/summary&gt;
    /// &lt;returns&gt;string object.&lt;/returns&gt;
    public override string ToString()
    {
        return Value;
    }

    /// &lt;summary&gt;Test whether a StringEnumeration is equal to another object.&lt;/summary&gt;
    /// &lt;param name="a"&gt;StringEnumeration object.&lt;/param&gt;
    /// &lt;param name="b"&gt;Another object.&lt;/param&gt;
    /// &lt;returns&gt;true if the two objects are equal.&lt;/returns&gt;
    public static bool operator ==(StringEnumeration a, object b)
    {
        if (a is null)
        {
            return b is null;
        }
        return !(b is null) &amp;&amp; a.Value == b.ToString();
    }

    /// &lt;summary&gt;Test whether a StringEnumeration is different to other object.&lt;/summary&gt;
    /// &lt;param name="a"&gt;StringEnumeration object.&lt;/param&gt;
    /// &lt;param name="b"&gt;Another object.&lt;/param&gt;
    /// &lt;returns&gt;true if the two objects are different.&lt;/returns&gt;
    public static bool operator !=(StringEnumeration a, object b)
    {
        return !(a == b);
    }

    /// &lt;summary&gt;Test whether a StringEnumeration is equal to another object.&lt;/summary&gt;
    /// &lt;param name="obj"&gt;Another object.&lt;/param&gt;
    /// &lt;returns&gt;true if the objects are equal.&lt;/returns&gt;
    public override bool Equals(object obj)
    {
        return this == obj;
    }

    /// &lt;summary&gt;Get the hash code of the associated value.&lt;/summary&gt;
    /// &lt;returns&gt;An integer value representing the hash of the associated value.&lt;/returns&gt;
    public override int GetHashCode()
    {
        return Value.GetHashCode();
    }
}
</code></pre>
<p>This is how to use it:</p>
<pre><code>/// &lt;summary&gt;Consensus state returned by the server.&lt;/summary&gt;
[Serializable]
[JsonConverter(typeof(StringEnumerationConverter))]
public class ConsensusState : StringEnumeration
{
    /// &lt;summary&gt;Connecting.&lt;/summary&gt;
    [JsonStringValue("connecting")]
    public static ConsensusState Connecting;
    /// &lt;summary&gt;Syncing blocks.&lt;/summary&gt;
    [JsonStringValue("syncing")]
    public static ConsensusState Syncing;
    /// &lt;summary&gt;Consensus established.&lt;/summary&gt;
    [JsonStringValue("established")]
    public static ConsensusState Established;
}
</code></pre>
    </div>