<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Overriding toString</h2>

<p>Inside your Sku class, to print useful info instead of constructing the information outside of the class:</p>

<pre><code>@Override
public String toString() {
    return "ID:" + getId() + " quantity: " + getQuantity() + " uom: " + getUnit() + " price: " + getPricePerWeight();
}
</code></pre>

<p>Then your print statements would look like:</p>

<pre><code>System.out.println("******Before sort*****");
skus.forEach(skuToPrint -&gt; System.out.println(skuToPrint));
System.out.println("******sortedSkus*****");
sortedSkus.forEach(skuToPrint -&gt; System.out.println(skuToPrint));
</code></pre>

<h2>Change variable name 'arrays'</h2>

<p>'args' is pretty standard for command line arguments. 'Arrays' doesn't make sense anyway since it's 1 array</p>

<pre><code>public static void main(String[] arrays) {

// change to:
public static void main(String[] args) {
</code></pre>

<h2>Take advantage of Junit tests</h2>

<p>It's more clear without running your code &amp; no more manually reading the output:</p>

<pre><code>public class SkuTest {
    @Test
    public void testSkuCompareQuantity() {
        final Sku sku8 = new Sku("123456", 800, "grams", 4);
        final Sku sku1 = new Sku("234567", 600, "grams", 5);
        final Sku sku2 = new Sku("354635", 500, "grams", 7);
        final Sku sku3 = new Sku("345666", 500, "grams", 4);
        final Sku sku4 = new Sku("234545", 400, "grams", 5);
        final Sku sku6 = new Sku("765434", 700, "milliliter", 4);
        final Sku sku5 = new Sku("765434", 500, "milliliter", 3);
        final Sku sku7 = new Sku("765434", 600, "milliliter", 5);

        final List&lt;Sku&gt; expectedBestResults = Arrays.asList(sku2, sku3);
        final List&lt;Sku&gt; expectedSecondBestResults = Arrays.asList(sku1, sku8);
        final List&lt;Sku&gt; expectedThirdBestResults = Arrays.asList(sku4);
        final List&lt;Sku&gt; worstResults = Arrays.asList(sku6, sku5, sku7);

        final List&lt;Sku&gt; skus = Arrays.asList(sku8, sku1, sku2, sku3, sku4, sku5, sku6, sku7);
        final List&lt;Sku&gt; sortedSkus = SkuSorter.sortSkuList(skus);

        // assert best results
        assertTrue(sortedSkus.containsAll(expectedBestResults));

        // assert second best results
        assertTrue(sortedSkus.containsAll(expectedSecondBestResults));

        // assert third best results
        assertTrue(sortedSkus.containsAll(expectedThirdBestResults));

        // assert worst results
        assertTrue(sortedSkus.containsAll(worstResults));

        // sanity check
        assertEquals(skus.size(), sortedSkus.size());
    }
}
</code></pre>

<p><em>Note: I separated the logic into another class.</em></p>

<h2>Consider using a Comparator or CompareToBuilder</h2>

<pre><code>import java.util.Comparator;
import org.apache.commons.lang3.builder.CompareToBuilder;

public class SkuComparator implements Comparator&lt;Sku&gt; {
    private final String unit;
    private final double quantity;

    public SkuComparator(String unit, double quantity) {
        super();

        this.unit = unit;
        this.quantity = quantity;
    }

    @Override
    public int compare(Sku sku1, Sku sku2) {
        return new CompareToBuilder().append(unit.equalsIgnoreCase(sku1.getUnit()), unit.equalsIgnoreCase(sku2.getUnit()))
                .append(Double.compare(quantity, sku1.getQuantity()), Double.compare(quantity, sku2.getQuantity()))
                .toComparison();
    }
}
</code></pre>

<p><em>Notes: tested using above test, it all passes.</em></p>

<p><em>No need to sort by 'worst match', as that already comes last.</em></p>

<p><em>Using the comparator you can sort using: skus = skus.stream().sorted(new SkuComparator(unit, quantity)).collector(Collectors.toList());</em></p>
    </div>