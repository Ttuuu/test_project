<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First, install <code>perltidy</code> and run it against your code until you get used to looking at well formatted code and type it that way.</p>

<p>Second, names are really, really important.  Names for functions and variables should be readable (use camel case or snake case to break up long names, but be consistent) and descriptive.  Make sure the names are spelled correctly.  Don't use names like <code>greater_than_ten</code>.  The rule may change and you start caring about URLs with more than 12 or 8 digits.  Instead name it for the meaning.  Maybe something <code>$url_with_token</code></p>

<p>You have logic and effects all mixed up and spread out.  Instead of setting a variable at line 10 and then maybe resetting at line 30 so that you can use it at line 90, (line numbers are hypothetical here), either do all your input analysis in one place and set up a packet of info you need later, OR analyze your data and take action on within a few lines.</p>

<p>Look for repetition and factor it into subroutines.</p>

<p>Putting a bunch of related (or not) variables into a hash doesn't really do much except add syntax to access or mutate the values.</p>

<p>Let's analyze your code.  It does one of five things with all inputs:</p>

<ol>
<li>Runs some PSGI application code</li>
<li>Redirects to another URL</li>
<li>Returns HTTP 401 status: Unauthorized.</li>
<li>Returns HTTP 404 status: Not found with two different response bodies.</li>
</ol>

<p>Well, <code>404</code> with the form data (whatever that is) is your fallback case.  If you have a user_id then you redirect, run code if you have it, or 404.  And you 401 if you your referrer data looks fishy.</p>

<p>So your app boils down to:</p>

<pre><code>sub app {
    my $env = shift;

    return
          get_user_id($env)           ? run_app_or_redirect($env)
        : is_request_authorized($env) ? FILE_NOT_FOUND( get_form($env) )
        :                               UNAUTHORIZED( get_form($env) )
    ;
}
</code></pre>

<p>Huh, wow, checking auth only for not found?  That's probably a bug.  For now, let's forge ahead.</p>

<p>The <code>FILE_NOT_FOUND</code> and other error subs just look like this:</p>

<pre><code>sub FILE_NOT_FOUND {
    my @body = @_;
    my $default_message = "Not Found, go to : &lt;a href='/'&gt;Home &lt;/a&gt; ";

    return ["404", ["Content-Type" =&gt; "text/html"], [ @body ? @body : $default_message ]];       
}
</code></pre>

<p>The getters that fetch values from <code>$env</code> are like this:</p>

<pre><code>sub get_user {
    my $env = shift;
    return $env-&gt;{'psgix.session'}{user_id} // '';
}
</code></pre>

<p>Checking request authorization is combines the lookup when you set <code>fromreferer</code> and the spot where you check it to maybe return an error message.</p>

<pre><code>sub is_request_authorized {
    my $env = shift;
    return '/' eq $env-&gt;{PATH_INFO};
}
</code></pre>

<p>The tricky one is, of course, <code>run_app_or_redirect()</code>.  I'm not going to work that all out for you.  You should be able to do that yourself and probably better than I can since you know the problem domain.  Just break the code into sections.  First decide which thing you are going to do, and then collect the information needed to do it.  You may even wish to make the main sub look like:</p>

<pre><code>sub app {
    my $env = shift;

    return
          should_redirect_user($env)  ? redirect($env)
        : should_run_user_app($env)   ? run_user_app($env) || FILE_NOT_FOUND()
        : is_request_authorized($env) ? FILE_NOT_FOUND( get_form($env) )
        :                               UNAUTHORIZED( get_form($env) )
    ;
}
</code></pre>

<p>I hope this helps.</p>
    </div>