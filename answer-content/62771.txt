<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Firstly, even though your commenting style may help you read your code, it is definitely overly verbose in places. Comments like:</p>

<pre><code> // Default Constructor
 ...
 Vector()
</code></pre>

<p>are obvious, and more experienced C++ programmers would likely find it bothersome. </p>

<p>In regards to <code>inline</code> functions:</p>

<blockquote>
  <p>I use inline functions because I heard that the C++ compiler, while smart, will not be able to inline everything that I want to be inlined automatically, even if I give hints.</p>
</blockquote>

<p>This isn't really true. Regardless, even using <code>inline</code> is just a suggestion to the compiler - one it is free to ignore at its leisure (it can make a difference to the linking stage, however). Microsoft's compiler (MSVC) even has an extension <code>__forceinline</code>, which is <strong>still</strong> just a suggestion that it is free to ignore. Compilers do relatively sophisticated cost/benefit tradeoff analysis these days with regards to inlining functions, regardless.</p>

<p>A minor point before we look at the implementation: anything beginning (or ending) with <code>__</code> is reserved for compiler usage, so don't use things like:</p>

<pre><code> #ifndef __VECTOR_H__
</code></pre>

<p>Basically, the (general) rule in C++ is to not prefix anything with <code>_</code> or <code>__</code>. Use a single trailing <code>_</code> if you'd like.</p>

<hr>

<p>For the implementation itself:</p>

<p>You don't need to write a copy constructor:</p>

<pre><code>Vector (const Vector &amp;v);
</code></pre>

<p>The compiler will happily generate this for you (and it will be entirely correct in this case as well). You might want to have a read about <a href="https://stackoverflow.com/questions/4172722/what-is-the-rule-of-three">the rule of three</a>. Effectively, if you haven't allocated any memory with <code>new</code>, you don't need to write a copy constructor / destructor / copy assignment operator.</p>

<p>Is there any particular reason you're using <code>float</code>s? Most modern day x86(-64) hardware is actually optimized for <code>double</code>s, and using them will often actually be <em>faster</em>. </p>

<p>Your capitalization is a bit odd. Generally, either you'd use <code>PascalCase</code> for classes and either <code>camelCase</code> or <code>snake_case</code> for methods/functions. Having capitalized function names is a bit odd, especially for single character names like:</p>

<pre><code>float X ();
float Y ();
float Z ();
</code></pre>

<p>Speaking of these accessors, they should all be <code>const</code>, as they don't change anything about the vector:</p>

<pre><code>float x() const;
float y() const;
float z() const;
</code></pre>

<p>You are definitely overusing <code>friend</code> functions here, and you don't need to. Anywhere you are accessing the fields directly (such as <code>v1.x</code> or <code>v2.y</code>) can be replaced with the (<code>public</code>) accessor function (<code>v1.x()</code> and <code>v1.y()</code>). This would allow you to remove having to use <code>friend</code> just about everywhere in your code.</p>

<p>Code that overloads the basic operators (<code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>) and their in-place counterparts (<code>+=</code>, etc) can generally leverage each other. For example:</p>

<pre><code>// This actually needs to be a friend if you define it as a free
// function as it needs to modify (and not just read) x, y, z
friend Vector&amp; operator+=(Vector&amp; v1, const Vector&amp; v2)
{
    v1.x += v2.x;
    v1.y += v2.y;
    v1.z += v2.z;
    return v1;
}
</code></pre>

<p>You can then define <code>operator+</code> in terms of this:</p>

<pre><code>Vector operator+(const Vector&amp; v1, const Vector&amp; v2)
{
     Vector v(v1);
     v += v2;
     return v;
}
</code></pre>

<p>Having an overloaded <code>operator[]</code> for a 3-element vector seems like an odd design choice, and something that could easily be confused.</p>
    </div>