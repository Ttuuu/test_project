<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>In essence, the code is well designed. Youâ€™ve split the code into simple, reusable functions and the logic is clear.</p>

<p>But there are still improvements to be made:</p>

<ul>
<li>You relly on the global variable <code>board</code>, which is a bad habit to get into. Instead, pass it as parameter, even for your <code>draw_chess_board</code> function;</li>
<li>The check for the <code>square_color == 'black'</code> feels really odd, prefer to check for <code>'white'</code> as it is how it will draw and <strong>then</strong> change the background color;</li>
<li>Using strings to alternate between two states is unnecessarily verbose, prefer to use booleans that you convert to string at the right moment;</li>
<li>I don't see any reason to define <code>start_x</code> and <code>start_y</code> and they doesn't contribute mathematically either, you can drop them;</li>
<li>You could simplify some of your computation by storing intermediate constants into variables;</li>
<li>You should avoid magic numbers by naming them.</li>
</ul>

<p>Proposed improvements:</p>

<pre><code>import turtle


def draw_box(canvas, x, y, size, fill_color):
    canvas.penup()
    canvas.goto(x, y)
    canvas.pendown()
    canvas.fillcolor(fill_color)

    canvas.begin_fill()
    for i in range(4):
        canvas.forward(size)
        canvas.right(90)
    canvas.end_fill()


def draw_circle(canvas, x, y, radius, color):
    canvas.penup()
    canvas.goto(x, y)
    canvas.pendown()
    canvas.fillcolor(color)

    canvas.begin_fill()
    canvas.circle(radius)
    canvas.end_fill()


def draw_chess_board(canvas, box_size=30, board_size=8, pawn_lines=3):
    half_box_size = box_size / 2
    white_square = False
    for i in range(board_size):
        y = i * box_size
        for j in range(board_size):
            x = j * box_size
            draw_box(canvas, x, y, box_size, 'white' if white_square else 'black')
            if white_square and i &lt; pawn_lines:
                draw_circle(canvas, x + half_box_size, y - box_size, half_box_size, 'red')
            if white_square and i &gt;= board_size - pawn_lines:
                draw_circle(canvas, x + half_box_size, y - box_size, half_box_size, 'blue')
            white_square = not white_square
        white_square = not white_square


if __name__ == '__main__':
    t = turtle.Turtle()
    draw_chess_board(t)
    t.hideturtle()
    turtle.done()
</code></pre>
    </div>