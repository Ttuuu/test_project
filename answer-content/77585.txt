<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Some notes:</p>

<ul>
<li><code>waitUntilDisappears</code>. In Ruby, always: <code>wait_until_disappears</code>.</li>
<li><code>if element != nil</code> -&gt; <code>if element</code>.</li>
<li><code>if element != nil</code>. I think <a href="http://www.rubydoc.info/gems/selenium-webdriver/0.0.28/Selenium/WebDriver/Find#find_element-instance_method" rel="nofollow noreferrer">find_element</a> never returns <code>nil</code>, it raises exception if not found, so this is not needed.</li>
<li><code>rescue Exception =&gt; e</code>. A rescue that covers a whole method can omit the <code>begin</code>.</li>
<li><code>rescue Exception =&gt; e</code>. Rescuing from <code>Exception</code> is bad practice. Rescue from <code>StandardError</code>, which is the same as <code>rescue =&gt; e</code>.</li>
<li><code>puts "Error"</code>. It's bad practice to catch an exception (even worse ifit's <em>all</em> exceptions), just print to the screen and return as if nothing happened. Raise an exception or return a value that signals the error.</li>
<li>Is <a href="http://www.rubydoc.info/gems/selenium-webdriver/0.0.28/Selenium/WebDriver/Driver#visible%3F-instance_method" rel="nofollow noreferrer">Element#visible?</a> not enough?</li>
</ul>

<p>I'd write:</p>

<pre><code>def wait_until_disappears(type, name, timeout: 5)
  wait = Selenium::WebDriver::Wait.new(timeout: timeout)
  wait.until { !driver.find_element(type, name).visible? }
end
</code></pre>
    </div>