<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>General recommendations:</p>

<ol>
<li>Style: Please be consistent, you sometimes add spaces around operators, sometimes not, you sometimes add spaces after keywords, sometimes not, ...</li>
<li>Comments ...</li>
<li>Choose appropriate types, almost all <code>int</code>s here would be better as <code>size_t</code> as they describe the size of an object or things related to such. </li>
<li>Make compilation-unit local functions <code>static</code>.</li>
<li><p>An empty parameter-list does <em>never</em> constitute a function prototype, thus calling said function with different parameters does not constitute a compilation error:
</p>

<pre><code>int foo() {} // no prototype!
int main(void) // prototype!
{
    foo(6); // no compilation error!
    main(6); // compilation error!
}
</code></pre></li>
<li>Your code isn't C89 compatible anyway, only declare variables as you need them, this makes it easier to keep the types in mind, etc.</li>
<li>Make things <code>const</code>, if possible</li>
<li><code>free()</code> allocated memory</li>
<li>When using <code>malloc()</code>, don't encode the type like <code>sizeof (char)</code> but rather use <code>sizeof(temp[0])</code> -- maybe at some point the type changes and then your code would be wrong. This is part of the DRY (Don't Repeat Yourself) principle.</li>
</ol>

<p>Code-specific:</p>

<ul>
<li>Line 102: You allocate memory for <code>paren_info</code> although this variable is only used in <code>gen_parens()</code> and its subfunctions. Just remove that parameter and allocate it in <code>gen_parens()</code> on the stack.</li>
<li>Line 79: Following from that, use a structured initializer to initalize the <code>struct</code> (cf. code attached).</li>
<li>Line 88: You copy all the data from <code>paren_info-&gt;parens</code> to <code>ans</code>. Why? Just return <code>paren_info-&gt;parens</code> and be happy!</li>
<li>Line 38: The base case is quite long and boring, the actual recursion before. I think it makes sense to just inverse the condition and put this case at the end (you can remove one indention then, too, if you put a return after the other blocks)</li>
<li>Line 57 &amp; 66: Mostly the same code, completely not-DRY. Put it into the same scope and move the <code>if</code>s inside.</li>
<li>Line 39: It's not <code>sizeof (paren_info-&gt;size)</code> but just <code>paren_info-&gt;size</code>.</li>
<li>Line 49: If you don't use <code>realloc()</code> at least use <code>memcpy()</code>.</li>
<li>Line 76: Why do you make the size an "out"-Paremeter and just not return it directly and return the answer via a passed pointer?</li>
</ul>

<p>This is my code:
</p>

<pre><code>#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;
#include &lt;assert.h&gt;

typedef struct paren_info_s {
    size_t  size;           // number of combinations written, ie. full entries in parens
    size_t  capacity;       // number of slots in parens, ie. total entries in parens
    size_t  slen;           // length of each entry in parens, ie. 2*n +1 ('\0'-Byte)
    char  **parens;         // parens[size][slen]
    size_t  idx;            // current index for writing '('/')'
} paren_info_t;

#define SIZE_INCREMENT 8

#if 0
static int catalan(int n)
{
    if (n &lt;= 1 ) return 1;

    int res = 0;
    for (int i=0; i &lt; n; i++) {
        res += catalan(i) *catalan(n-i-1);
    }
    return res;
}
#endif

static void dfs_paren(const unsigned int left, const unsigned int right,
        paren_info_t *const paren_info, char *const temp)
{
    if (right &lt; left) {
        return;
    }


    if (left &gt; 0 || right &gt; 0) {
        // recursive call
        const size_t idx = paren_info-&gt;idx;

        paren_info-&gt;idx++;
        if (left &gt; 0) {
            temp[idx] = '(';
            dfs_paren(left-1, right, paren_info, temp);
        }
        if (right &gt; 0) {
            temp[idx] = ')';
            dfs_paren(left, right-1, paren_info, temp);
        }
        paren_info-&gt;idx--;

        return;
    }

    // recursion base case: left == right == 0
    assert(paren_info-&gt;size &lt;= paren_info-&gt;capacity);

    // resize the array
    if (paren_info-&gt;size &gt;= paren_info-&gt;capacity) {
        paren_info-&gt;capacity = SIZE_INCREMENT * ((paren_info-&gt;size/2)+1);
        char **const temp_paren_info = malloc(sizeof (temp_paren_info[0]) * (paren_info-&gt;capacity));

        memcpy(temp_paren_info, paren_info-&gt;parens, sizeof (temp_paren_info[0]) * paren_info-&gt;size);

        free(paren_info-&gt;parens);
        paren_info-&gt;parens = temp_paren_info;
    }

    // write the final temp array into paren_info struct
    paren_info-&gt;parens[paren_info-&gt;size] = malloc(paren_info-&gt;slen);
    memcpy(paren_info-&gt;parens[paren_info-&gt;size], temp, paren_info-&gt;slen);
    paren_info-&gt;size++;
}

static size_t gen_paren(const unsigned int n, char ***const result)
{
    paren_info_t paren_info = {
        .size = 0,
        .parens = malloc(sizeof (paren_info.parens[0]) * SIZE_INCREMENT),
        .capacity = SIZE_INCREMENT,
        .slen = (n*2) +1,
        .idx = 0,
    };

    char *const temp = malloc(paren_info.slen);
    temp[paren_info.slen-1] = '\0';
    dfs_paren(n, n, &amp;paren_info, temp);
    free(temp);

    *result = paren_info.parens;
    return paren_info.size;
}

static void test_paren(const unsigned int n)
{
    char **ans;
    const size_t size = gen_paren(n, &amp;ans);

    for (size_t i = 0; i &lt; size; i++) {
        printf("%s\n", ans[i]);
        free(ans[i]);
    }

    free(ans);
}

int main(void) {
    test_paren(7);

    return 0;
}
</code></pre>
    </div>