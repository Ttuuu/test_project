<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Dont't use <a href="https://stackoverflow.com/questions/1452721/why-is-using-namespace-std-considered-bad-practice"><code>using namespace std;</code></a></h2>

<hr>

<h2>Use consistent formatting:</h2>

<p>Your vertical whitespace and indentation are inconsistent. That makes your code a little difficult to read.</p>

<hr>

<h2>Use of access modifiers</h2>

<p>It is unnecessary to specify <code>private</code> as an access modifier at the top of your <code>class</code> as they are <code>private</code> by default. However it is common to list <code>public</code> members and functions first because anyone (including you) reading your code is going to be more interested in the interface for the class.</p>

<hr>

<h2>Omit <code>return 0;</code></h2>

<p><code>main()</code> will return on its own at the end of its execution. It is considered standard practice not to return at the end of <code>main()</code> and the compiler will generate the appropriate return as needed.</p>

<hr>

<h2>Let RAII do its job</h2>

<pre><code>{
ofstream myfile;

// Definition on File Name: "MeinTest.wav"
myfile.open (FileName.c_str(), ios::out | ios::binary);

â€¦ // other code
//  File is writen so close
myfile.close();
}
</code></pre>

<p>The very next line after you close your file explicitly the scope ends. Your file will close itself on going out of scope and perform all necessary operations (like flushing and memory cleanup) A huge part of writing quality C++ classes is proper RAII cleanup so that you and I don't need to clean up after ourselves. Let your objects go out of scope instead of doing it explicity.</p>

<hr>

<h2>Only write meaningful comments</h2>

<p>Most of your comments (like those in the previous example) only serve to state what is already clearly stated by the code itself. As a rule of thumb you should always assume that anyone reading your code is capable of reading code. <code>myFile.close()</code> should be readily apparent as to what it does. Only comment when something isn't easy to understand. (also consider refactoring or renaming when you find the need for a comment.)</p>

<hr>

<h2>Don't use All-cap variable names</h2>

<pre><code>char RIFF[] = "RIFF";
char WAVE[] = "WAVE";
</code></pre>

<p>All cap variables are conventionally reserved for macros. prefer instead:</p>

<pre><code>char Riff[] = "RIFF";
char Wave[] = "WAVE";
</code></pre>

<p>or</p>

<pre><code>char riff[] = "RIFF";
char wave[] = "WAVE";
</code></pre>

<p>Incidentally I am a bit uncertain about the current use case but I am unsure why you are using C-style char array[] (and not char* array[]) or a C++ string? is there a reason you can't use an <code>std::string</code>?</p>

<hr>

<h2>Use C++ casts</h2>

<pre><code>unsigned char a = (unsigned char)i1;
unsigned char b = (unsigned char)i2;
unsigned char c = (unsigned char)i3;
unsigned char d = (unsigned char)i4;
</code></pre>

<p>C++ <code>static_cast&lt;&gt;</code> is safer than C-style casts as it is checked at compile time. Also you should use C++ conventions when writing C++ code.</p>

<hr>

<h2>Concatenate your operations</h2>

<pre><code>long i = x;
int i1 = i % 256;
i = i - i1;
i = i / 256;
int i2 = i % 256;
i = i - i2;
i = i / 256;
int i3 = i % 256;
i = i - i1;
i = i / 256;
int i4 = i;

unsigned char a = (unsigned char)i1;
unsigned char b = (unsigned char)i2;
unsigned char c = (unsigned char)i3;
unsigned char d = (unsigned char)i4;
</code></pre>

<p>can be re-written:</p>

<pre><code>int x1 = x % 256;
x = (x - x1) / 256;
int x2 = x % 256;
x = (x - x2) / 256;
int x3 = x % 256;
x = (x - x1) / 256; // did you mean to use x3 here? (well i3 in your code)
int x4 = x;

unsigned char a = static_cast&lt;unsigned char&gt;(x1);
unsigned char b = static_cast&lt;unsigned char&gt;(x2);
unsigned char c = static_cast&lt;unsigned char&gt;(x3);
unsigned char d = static_cast&lt;unsigned char&gt;(x4);
</code></pre>

<p>notice it was also unnecessary to copy <code>x</code> into a second variable. you can use it directly (it's already a copy)</p>

<hr>

<h2>Omit unused headers</h2>

<p>You aren't using <code>&lt;iostream&gt;</code>. to that end you can omit it.</p>

<hr>

<h2>Compare values of the same type</h2>

<pre><code>for(float m = 0; m &lt;= DataLeng; m++)
</code></pre>

<p>That line threw me off for a moment. I've never seen a float as a comparison within a for loop. Especially since <code>DataLeng</code> is an int. Your compiler should have warned you about this. To that end. . . :</p>

<hr>

<h2>Use max compiler warnings</h2>

<p>Make sure you have max compiler warnings on. Consider warnings as error too. This will catch a lot of issues for you and help you clean your code before you even get to us. use <code>-W4</code> on VS or <code>-Wall</code> on gcc/clang and <code>-Werror</code>. (If you use a different compiler you will have to look up how to better utilize warnings.)</p>

<hr>

<h2><a href="https://stackoverflow.com/questions/3181211/prefix-postfix-increment-operators">Prefer prefix over postfix</a></h2>
    </div>