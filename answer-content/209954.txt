<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Yes, there are a few things which can be done to speed up your code.</p>

<p>You create local variables <code>width</code> and <code>height</code>.  But then you don't use these variables.  Instead you use <code>for x in range(img.shape[1]):</code> which ends up evaluating <code>img.shape[1]</code> a total of <code>height</code> times.  Consider that <code>img.shape</code> retrieves the shape array from <code>img</code>, and then accesses the <code>[1]</code> member of that list.  Using <code>for x in range(width):</code> doesn't have that overhead.</p>

<p>Consider <code>arr[y].append(_)</code>.  Again, this code is looking up in the <code>arr</code> list, the <code>[y]</code> element, and to that retrieved list appending a value.  That done once for every pixel.  If you kept a handle to the list that you are appending to, you wouldn't have to look it up each time.</p>

<pre><code>def generateArray():
    arr = []
    for y in range(height):
        row = []
        for x in range(width):
            if img[y][x][0] != 1:
               row.append(1)
            else:
               row.append(0)
        arr.append(row)
    return arr
</code></pre>

<p>The above code should be a little faster.</p>

<p>Appending is a time-consuming operation.  If the <code>list</code> is stored as an array, rather than a linked-list, then appending an element will require frequent reallocation of the array capacity, and copying of all of the elements to the new storage area.  We can prevent this reallocating and copying by allocating storage for all of the data all at once:</p>

<pre><code>def generateArray():
    arr = [None] * height          # Correctly sized array of rows
    for y in range(height):
        row = [0] * width          # Correctly sized row, filled with 0's
        for x in range(width):
            if img[y][x][0] != 1:
               row[x] = 1
        arr[y] = row
    return arr
</code></pre>

<p>Here, the <code>row</code> array starts off with <code>[0, 0, 0, 0, ..., 0, 0, 0]</code> so it is only necessary to set the elements to <code>1</code> where needed.</p>

<hr>

<p>Looping and list lookup can be slow.  Consider:</p>

<pre><code>        for x in range(width):
            if img[y][x][0] != 1:
                row[x] = 1
</code></pre>

<p>which loops over all the <code>x</code> values of a row, and for every <code>x</code> value, looks up the row <code>img[y]</code>, and then the pixel in the row <code>img[y][x]</code>, for each pixel in that row, and then accesses the <code>[0]</code> element of that pixel.  That's a lot of lookups.  If instead we used:</p>

<pre><code>        for x, pixel in enumerate(img[y]):
            if pixel[0] != 1:
                row[x] = 1
</code></pre>

<p>we'd be iterating over the row of pixels, getting their values without the double list lookup.</p>

<p>We could also use list comprehension to build the list.  Since each row is of a fixed, known length, the list comprehension can allocate the correctly sized list, and fill in the elements one-at-a-time, without indexing or appending.</p>

<pre><code>def generateArray():
    arr = [None] * height
    for y in range(height):
        arr[y] = [ 1 if pixel[0] != 1 else 0 for pixel in img[y] ]
    return arr
</code></pre>

<p>That also applies to building each row.</p>

<pre><code>def generateArray():
    return [ [ 1 if pixel[0] != 1 else 0 for pixel in row ] for row in img ]
</code></pre>

<hr>

<p>The function <code>generateArray()</code> uses a global variable <code>img</code>.  It would be better to pass <code>img</code> into the function.</p>

<pre><code>def generateArray(img):
    # code which uses img
</code></pre>

<hr>

<p><code>generateArray()</code> is a terrible name for the function.  Maybe <code>generateMaskFromImage()</code>?</p>

<hr>

<p>The output <code>arr</code> is not being used by your code.  If you omitted the line:</p>

<pre><code>arr = generateArray()
</code></pre>

<p>your code would run much, much faster.   ;-)</p>
    </div>