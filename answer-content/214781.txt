<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This looks like a useful code. I'm going to keep this bookmarked in case I need it.</p>

<hr>

<h3>Review</h3>

<blockquote>
<pre><code>import csv,sys
</code></pre>
</blockquote>

<ul>
<li>You are not using <code>csv</code> get rid of that import.</li>
</ul>

<blockquote>
<pre><code>from datetime import datetime as dt
</code></pre>
</blockquote>

<ul>
<li>Why are you shortening <code>datetime</code> to <code>dt</code>? Not really needed. Even if you are using vim to write code you can use autocomplete. </li>
</ul>

<blockquote>
<pre><code>st_et=[]
</code></pre>
</blockquote>

<ul>
<li>This is not really used?</li>
</ul>

<blockquote>
<pre><code>print dt_pairs
</code></pre>
</blockquote>

<ul>
<li>Get rid of debug prints.</li>
</ul>

<p>Other things I noticed</p>

<ul>
<li>Make it runnable.</li>
<li>Follow PEP8.</li>
<li>You can easily make this Python 3 compatible.</li>
<li>Lot of magic numbers.</li>
</ul>

<hr>

<h3>After changes are applied.</h3>

<pre><code>#!/usr/bin/env python

"""
Identify downtime from ping log
"""

from __future__ import print_function

import sys
from datetime import datetime

THRESHOLD_SECONDS = 4
ERROR_EXIT = -1
PING_LOG_MONTH_COL = 0
PING_LOG_BYTES_COL = 3


def main():
    if len(sys.argv) != 2:
        print("Usage: {0} log.txt".format(__file__))
        sys.exit(ERROR_EXIT)

    display_downtime(sys.argv[1])


def display_downtime(logfile):
    gap = 0
    down = False
    first = True
    unreachable_time_pairs = []
    previous_timestamp = None

    with open(logfile, "r") as logfile_handle:
        for line in logfile_handle:

            tokens = line.split()
            timestamp = datetime.strptime(
                " ".join(tokens[PING_LOG_MONTH_COL:PING_LOG_BYTES_COL]),
                "%b %d %H:%M:%S",
            )

            if first:
                first = False
            else:
                diff = (timestamp - previous_timestamp).total_seconds()
                if diff &gt; THRESHOLD_SECONDS:
                    gap += diff

            if "Destination" in line and not down:
                down = True
                unreachable_time_pairs.append(timestamp)
            if "bytes" in line and down:
                # ping is back up, so add previous time for unreachable_time_pairs
                down = False
                unreachable_time_pairs.append(previous_timestamp)

            previous_timestamp = timestamp

    unreachable = 0
    for i in range(0, len(unreachable_time_pairs), 2):
        unreachable += (
            unreachable_time_pairs[i + 1] - unreachable_time_pairs[i]
        ).total_seconds()

    print(
        "Downtime: {0}s (unreachable) + {1}s (gap) = {2}s".format(
            unreachable, gap, unreachable + gap
        )
    )


if __name__ == "__main__":
    main()
</code></pre>

<p>Output</p>

<pre>
~ python3 unreachability.py logfile.txt
Downtime: 31.0s (unreachable) + 444.0s (gap) = 475.0s
~ python2 unreachability.py logfile.txt
Downtime: 31.0s (unreachable) + 444.0s (gap) = 475.0s
~ ./unreachability.py logfile.txt
Downtime: 31.0s (unreachable) + 444.0s (gap) = 475.0s
~ ./unreachability.py logfile.txt a b c
Usage: ./unreachability.py log.txt
</pre>
    </div>