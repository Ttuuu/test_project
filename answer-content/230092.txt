<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Ignoring everything else, you're iterating the array in a very cache-inefficient manner, and that will ultimately limit the performance. You need to iterate in column-major order, i.e. iterate down a column, and only then advance to next column - assuming that the indices mean <code>[row][column]</code>.</p>

<p>Technically all you need to provide is a way to quickly generate these numbers on the fly, and provide a double-indexable property on the "matrix" object, and you're done. But whether LeetCode's implementation can deal with a double-indexable object other than <code>int[][]</code> is unknown to me.</p>

<p>That might be the fastest, since there's no memory overhead, and a conversion between the index and the value is quick (I urge you to look the formula up or figure it out yourself). Note that integer multiplications are fast, so doing a couple of them will be still faster than a cache miss.</p>

<p>But once you got that done, filling the array in any order - whether row-major or column-major is trivial, and it can be parallelized, too. And perhaps you can figure a formula that leverages such order and does even less work than a general item-value formula :)</p>

<p>Let's also note that <code>int</code> is a 32-bit signed type, so the largest integer square that will fit into it must be less than 2^31. Thus, the largest input is 0xB504, and the resulting square matrix has 0x7FFEA810 elements. You'd want to check the argument to make sure it's not too large, and throw an <code>ArgumentOutOfRangeException</code> otherwise.</p>
    </div>