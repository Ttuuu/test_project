<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>I've heard of dictionary lookups but I don't really understand what they are so if anyone thinks that they maybe relevant and could show me how to implement it that would be great!</p>
</blockquote>

<p>Here you go!</p>

<h1>Use Dictionaries!</h1>

<p>The entire <code>if/elif/else</code> if yelling, if not screaming, to be put into a dictionary. This is a lot faster than your implementation because it's a simple key lookup, instead of multiple logical checks to test the user input.</p>

<p>Here is your <code>test</code> function (now named <code>favorite_youtuber</code>):</p>

<pre><code>def favorite_youtuber():

    youtube_response = {
        'dr. phil': 'You are an awesome lad!',
        'james charles': 'Errmm. Ok...',
        'bloamz': 'Ok then.',
        'ali a': 'I mean. Thats old but ok...',
        'jacksepticeye': 'Thats kinda cool',
        'will smith': 'Thats diferent. I rate that.',
        'jack black': 'You have good taste.',
        'jack white': 'I like him as well.',
        'dr. mike': 'So you like learning then!',
        'morgz': 'I mean just leave now.'
    }
    # Since some youtubers in the list below are not included in the dictionary, I left the list. #
    my_favorite_youtubers = ['Dr. Phil', 'Mr. Beast', 'T-Series', 'PewDiePie', '5 Minute Crafts', 'The Ellen Show']

    youtuber = input('Enter your favourite youtuber:  ').lower()

    if youtuber in youtube_response:
        print(youtube_response[youtuber])
    else:
        print('I dont know that one. Ill check them out.')

    print(f'My favourite youtuber is {random.choice(my_favorite_youtubers)}!')
</code></pre>

<p>A dictionary works by utilizing <code>keys</code> and <code>values</code>, like so:</p>

<pre><code>my_dict = {
    "key": "value of any type",
    ...
}
</code></pre>

<p>In this case, the <code>key</code> is the name of the youtuber that the user inputs, and the <code>value</code> is the response. This prevents you from having to have multiple print statements depending on what the user inputs. Now, all you have to do is make sure that the youtuber entered by the user is included in the dictionary's keys, utilizing this line:</p>

<pre><code>if youtuber in youtube_response:
</code></pre>

<h1>Format Your Strings!</h1>

<p>The era of <code>my_string = a + " " + b</code> is over. You can now format your strings to include your variables directly in them! Take a look:</p>

<pre><code>print(f'My favourite youtuber is {random.choice(my_favorite_youtubers)}!')
</code></pre>

<p>Essentially, the value of the code within <code>{}</code> is placed in that position in the string.</p>

<p>Another option is to use <a href="https://docs.python.org/3/library/string.html#string.Formatter.format" rel="noreferrer"><code>.format()</code></a>, which is a method called on a string. Take a look:</p>

<pre><code>print('My favourite youtuber is {}'.format(random.choice(my_favorite_youtubers)))
</code></pre>

<p>They both do the same thing. It's up to you which one you want to use.</p>

<h1><code>.lower()</code> utilization</h1>

<p>Instead of</p>

<pre><code>maybe = input("Y/N ")
maybe = maybe.lower()
</code></pre>

<p>do this</p>

<pre><code>maybe = input("Y/N ").lower()
</code></pre>

<p>Since <code>input()</code> returns a string, <code>.lower()</code> applies to that string. This prevents you from having to write that extra line, and it makes your code a little nicer.</p>

<h1><code>\n</code></h1>

<p>Instead of</p>

<pre><code>print("That is not a valid option")
print("")
</code></pre>

<p>do this</p>

<pre><code>print("That is not a valid option.\n")
</code></pre>

<p>It adds a newline character at the end of the string, doing exactly what you're doing but in a nicer way.</p>

<h1>Repetitive User Input</h1>

<p>Now let's talk about your <code>try_again</code> function.</p>

<p>There's a lot to break down here. I find it easier to show you my improved version of your code, and walking you through what I did. Have a look:</p>

<pre><code>def run_app():
    while True:
        favorite_youtuber()
        again = input("Play again? (Y/N)").lower()
        while again not in "yn":
            print("Please enter Y/N!")
            again = input("Play again? (Y/N)").lower()
        if again == "n":
            break
    print("Thank you for using this app!")
</code></pre>

<p>It's fairly self explanatory. The one thing I want to talk about is the nested <code>while</code> loop.</p>

<p>Instead of checking if something is within a tuple <code>("y", "n")</code>, you can check if something is within a string <code>"yn"</code>. It's easier to understand this way. The while loop keeps asking for input until the user enters a "y" or a "n". This is easier than having nested <code>while True:</code> loops, as those can get very messy very fast.</p>

<p>Since you only want to see if they <em>don't</em> want to keep playing, you only need to check for the existence of an "n". Then, it's a simple <code>break</code> statement to print out the final goodbye.</p>

<h1>Main Guard</h1>

<p>Last thing I'm commenting on.</p>

<p>You should use a main guard when running this program. Why?</p>

<p>Let's say you want to import this module into another program, because you don't want to rewrite all this code in a different file. When you import the module, that spare <code>try_again</code> is going to run. That is not what you want. Containing this extra code in a main guard will prevent this from happening. It's a simple <code>if</code> statement:</p>

<pre><code>if __name__ == "__main__":
    run_app()
</code></pre>

<p>I renamed your <code>try_again</code> to <code>run_app()</code>, since that name is more fitting of what the program is doing.</p>
    </div>