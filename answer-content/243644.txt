<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here are some things that may help you improve your program.</p>

<h2>Fix the bug</h2>

<p>The code contains these two lines:</p>

<pre><code>bool tie = tie_game();
tie = false;
</code></pre>

<p>I'm sure that you can see why that's a bug if you think about it for a bit.</p>

<h2>Don't abuse <code>using namespace std</code></h2>

<p>Putting <code>using namespace std</code> at the top of every program is <a href="http://stackoverflow.com/questions/1452721/why-is-using-namespace-std-considered-bad-practice">a bad habit</a> that you'd do well to avoid.  </p>

<h2>Eliminate unused variables</h2>

<p>The <code>player_symbol</code> parameter that is passed to the <code>Player</code> constructor is never used.  Also <code>player_moves</code> isn't used anywhere.  All of these should be eliminated from the code.</p>

<h2>Avoid the use of global variables</h2>

<p>I see that <code>QUIT</code>, <code>PLAY</code> and <code>board</code> are declared as global variables rather than as local variables. It's generally better to explicitly pass variables your function will need rather than using the vague implicit linkage of a global variable. For example, both <code>QUIT</code> and <code>PLAY</code> could easily be local to <code>main</code> and <code>board</code> could become an object with many of the functions turning into member functions.</p>

<h2>Fix your formatting</h2>

<p>There are inconsistent spaces at the beginning of lines, inconsistent indentation and inconsistent use and placement of curly braces <code>{}</code>.  Being consistent helps others read and understand your code.</p>

<h2>Don't use std::endl unless you really need to flush the stream</h2>

<p>The difference between <code>std::endl</code> and <code>'\n'</code> is that <code>std::endl</code> actually flushes the stream. This can be a costly operation in terms of processing time, so it's best to get in the habit of only using it when flushing the stream is actually required. It's not for this code.</p>

<h2>Use constant string concatenation</h2>

<p>This code currently has a number of instances that look like this:</p>

<pre><code>cout &lt;&lt; "CONGRATULATIONS Player 2, You won" &lt;&lt; endl;
cout &lt;&lt; "Do you want to play again [y/n]" &lt;&lt; endl;
</code></pre>

<p>This calls the <code>&lt;&lt;</code> operator four times.  Instead, you could write this:</p>

<pre><code>cout &lt;&lt; "CONGRATULATIONS Player 2, You won\n"
        "Do you want to play again [y/n]\n";
</code></pre>

<p>This only calls <code>&lt;&lt;</code> once.  The compiler automatically concatenates the string literals together.</p>

<h2>Use all required <code>#include</code>s</h2>

<p>The code uses <code>to_string</code> and <code>string</code> which means that it should <code>#include &lt;string&gt;</code>.  It was not difficult to infer, but it helps reviewers if the code is complete.</p>

<h2>Don't write getters and setters for every class</h2>

<p>C++ isn't Java and writing getter and setter functions for every C++ class is not good style. Instead, move setter functionality into constructors and think very carefully about whether a getter is needed at all. In this code, there are better options for both getter and setter for <code>Player</code>, which emphasizes why they shouldn't be written in the first place.</p>

<h2>Rethink the class design</h2>

<p>The <code>Player</code> class holds only a single character, while the missing <code>Board</code> class has a lot more responsibility.  I'd suggest removing the <code>Player</code> class and turning <code>Board</code> into an object.  The design would be much clearer if you did so.</p>
    </div>