<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here are some ideas to help you improve your program.</p>

<h2>Fix the bug</h2>

<p>If we create a <code>Tree&lt;std::string&gt; t</code> and then insert "epsilon", "gamma", "beta", "delta", "alpha", "mu", and "kappa" in that order, we have a tree like this:</p>

<p><a href="https://i.stack.imgur.com/Fddqh.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/Fddqh.png" alt="tree before deletion"></a></p>

<p>If we then call <code>t.Delete("beta");</code> we invoke undefined behavior and mess up the tree by effectively deleting two nodes (both "beta" and "delta" are now gone):</p>

<p><a href="https://i.stack.imgur.com/KFMPX.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/KFMPX.png" alt="tree after deletion"></a></p>

<h2>Use raw pointers</h2>

<p>The usual advice is to replace raw pointers with smart pointers, but in this particular case, I would advise going the other way for a number of reasons.  First, the <code>std::unique_ptr</code> is not part of the public interface of the tree, so changing it to a raw pointer would not affect users of the tree at all.  Second, the smart pointer is only getting in the way here, since it would be much simpler to write this code with plain pointers.  Third, a plain pointer version would better allow you to have a single private concrete implementation class using a <code>void *</code> for the data.  The template would then only have a very light wrapper to convert to and from <code>void *</code> to type <code>T</code>.  This makes it certain that if you have multiple kinds of trees, there will only be one code instance that actually implements the tree manipulations and each templated version will only have a small bit of code overhead per type.</p>

<h2>Avoid polluting the global namespace with <code>using</code></h2>

<p>The <code>using std::make_unique</code> and <code>using std::unique_ptr</code> in this code are at file scope.  If this is intended to be an include file, then that effectively brings those to into the global scope which could cause name collisions.  Instead, you could simply remove those and simply add <code>std::</code> where appropriate or omit them entirely if you follow the previous suggestion.</p>

<h2>Don't define a constructor that only initializes data</h2>

<p>The only thing your <code>Tree</code> constructor does is to initialize <code>root_</code> to a fixed value.  It's generally better to instead use member initializers instead.  See <a href="https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#Rc-default" rel="nofollow noreferrer">Cpp Guidelines C.45</a>.  I'd also simplify the <code>Node</code> constructor by using member initializers for <code>left</code> and <code>right</code>.</p>

<h2>Provide a usable interface</h2>

<p>The way it's currently defined, it's not possible to do anything at all with nodes once they are stored in the <code>Tree</code> except to determine whether they're stored in the tree.  That's unlikely to be a useful interface in the real world.</p>

<h2>Use only necessary <code>#include</code>s</h2>

<p>The <code>#include &lt;iostream&gt;;</code> line is not necessary and can be safely removed.</p>

<h2>Consider using more idiomatic C++</h2>

<p>While your use of <code>not</code> is not techncially wrong, you should be aware that many experienced C++ programmers will be unfamiliar with <a href="https://en.cppreference.com/w/cpp/language/operator_alternative" rel="nofollow noreferrer">alternative operators</a>, and so if others read your code, it might be an impediment to their understanding of it.  </p>
    </div>