<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Validation is so common that I recommend generalizing it a little bit (not too much though, there are too many special cases).</p>

<p>One way is to create validations, schema, and data separate from each other. For example:</p>

<pre class="lang-js prettyprint-override"><code>const validators = {
    required: (config, value) =&gt; value !== '',
    mobileNo: (config, value) =&gt; value.match(/^(\+\d{1,3}[- ]?)?\d{10}$/) &amp;&amp; !(value.match(/0{5,}/)),
    equal: (config, value) =&gt; value === config.value
}

const validate = (data, schema) =&gt; {
    const messages = {}

    for(let [name, rules] of Object.entries(schema)){
        for(let rule of rules){
            if(!validators[rule.type](rule, data[name])){
                if(!messages.hasOwnProperty(name)) messages[name] = []
                messages[name].push(rule.msg)
            }
        }
    }

    return messages
}

const schema = {
    firstName: [{type: 'required', msg: 'Please enter a valid first name.'}],
    lastName: [{type: 'required', msg: 'Please enter a valid last name.'}],
    mobileNo: [{type: 'required', msg: 'Please enter a mobile number'}, {type: 'mobileNo', msg: 'Please enter a valid mobile number.'}],
    city: [{type: 'required', msg: 'Please enter a vaild city.'}],
    empType: [{type: 'equal', value: 'Self-Employed', msg: 'Some msg'}],
    salary: [{type: 'required', msg: 'Please enter a vaild salary.'}],
}

// In react component
validateForm(){
    const validationMessages = validate(this.state.data, schema)
    this.setState({validationMessages})
}
</code></pre>

<p>You can take this much further by adding templated validation messages, and fancy rules of all sorts. But I recommend keeping it simple. You can make multiple variants of the validate function for different needs as they come.</p>
    </div>