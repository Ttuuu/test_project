<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Smarter brute force</h2>

<p>You have two major slow points. </p>

<ol>
<li><p>You are checking numbers from the smallest towards the largest. That means that you can not use any found palindromes to help you avoid calculations. Ie there is no need to check if a product is a palindrome if it is smaller than the current biggest found.</p></li>
<li><p>The method you use to check if a number is a palindrome is slow. Using a faster numerical test will provide a significant performance increase.</p></li>
</ol>

<h2>A better palindrome checker</h2>

<p>The following function is on average 3 times faster than the method you use. Simply using it in your could would reduce the time from 311ms down to near 100ms.</p>

<pre><code>function isPalindrome(num) {
    var top = Math.pow(10, Math.log10(num) | 0), bot = 1;
    while (top &gt;= bot) {
        if ((num / top % 10 | 0) !== (num / bot % 10 | 0)) { return false }
        top /= 10;
        bot *= 10;
    }
    return true;
}
</code></pre>

<h2>Pick the low hanging fruit</h2>

<p>The palindrome that you are after is most likely near the high numbers. </p>

<p>Using iterators that count from 1000 down we can avoid checking products if they are lower than any found max.</p>

<p>We also know that because we are counting down, each iterator will only be stepping over smaller products. Using this we can break from the inner or outer iterator as soon as we find a product that is smaller than the max found palindrome.</p>

<h2>Example</h2>

<p>The following solution is still a brute force method. </p>

<p>It finds the palindrome in 1.3ms, iterating over 5267 products, checking 5224 of them for palindromes. </p>

<p>Compared to your function that iterated over 405,450 products and checked each for palindromes. Little wonder it took nearly one third of a second to do.</p>

<pre><code>function problem(){
    const minNum = 100, range = 899;
    const isPalindrome = num =&gt; {
        var top = Math.pow(10, Math.log10(num) | 0), bot = 1;
        while (top &gt;= bot) {
            if ((num / top % 10 | 0) !== (num / bot % 10 | 0)) { return false }
            top /= 10;
            bot *= 10;
        }
        return true;
    }

    var i = range, max = minNum * minNum, j, iVal;

    while (i--) {
        iVal = i + minNum;
        j = i + 1;
        if (iVal * (j - 1 + minNum) &lt; max) { break }
        while (j--) {
            const product = iVal * (j + minNum);
            if (product &lt;= max) { break }
            if (isPalindrome(product)) { max = Math.max(max, product) }
        }
    }
    return max;
}
</code></pre>

<h2>Under 1ms</h2>

<p>The above function is still slow. 1.3ms is forever in computer time. I have a feeling this can get down to about 0.6ms. I checked to see how many of the 5267 products iterated over were smaller than the max palindrome. </p>

<p>3088 (58%) checked products were smaller than the result. It is likely a different pattern of iteration steps can avoid many of these.</p>
    </div>