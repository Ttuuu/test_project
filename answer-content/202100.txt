<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Variables</h3>
<p>Always turn on <code>Option Explicit</code>. You can have it automatically by going to Tools -&gt; Options in the VBE and checking the <strong>Require Variable Declaration</strong> option. This way if you have any variables not defined, the compiler will let you know.</p>
<p>When you don't define your variable, VBA will declare it as a <em>Variant</em>, which are <a href="https://msdn.microsoft.com/en-us/library/twcxd6b8.aspx" rel="nofollow noreferrer">objects</a>:</p>
<p>Performance. A variable you declare with the Object type is flexible enough to contain a reference to any object. However, when you invoke a method or property on such a variable, you always incur late binding (at run time). To force early binding (at compile time) and better performance, declare the variable with a specific class name, or cast it to the specific data type.</p>
<p>By not declaring variables, you could possibly be paying a penalty.</p>
<p>You didn't define <code>folder</code> or <code>xDir</code> in <code>MainList</code>.</p>
<p>Your variables in <code>ListFilesInFolder</code> are not really adhering to <a href="https://msdn.microsoft.com/en-us/library/1s46s4ew(v=vs.140).aspx" rel="nofollow noreferrer">Standard VBA naming conventions</a>. Why are these prefaced by <code>x</code>? There doesn't seem to be a reason. Also, using the underscore in a variable should be avoided unless it's a constant.</p>
<blockquote>
<pre><code>Dim folder_index As Integer
</code></pre>
</blockquote>
<p>Integers - <a href="http://stackoverflow.com/questions/26409117/why-use-integer-instead-of-long/26409520#26409520">integers are obsolete</a>. According to <a href="https://msdn.microsoft.com/en-us/library/office/aa164506(v=office.10).aspx" rel="nofollow noreferrer">msdn</a> VBA <em>silently</em> converts all integers to <code>long</code>.</p>
<h3>Referencing</h3>
<p>Every time you use <code>Cells</code> or <code>Range</code> without an explicit reference, it is implicitly referencing the active sheet. You want <code>Sheet1.Range</code> etc</p>
<p>Be sure to avoid things like <code>.Select</code> - it just slows the code down by needing to fiddle with the spreadsheet while doing everything else behind the scenes. There's a good question on StackOverflow <a href="http://stackoverflow.com/questions/10714251/how-to-avoid-using-select-in-excel-vba-macros">addressing this</a>.</p>
<p>Take this for instance -</p>
<blockquote>
<pre><code>Cells(rowIndex, 6).Select
    ActiveSheet.Hyperlinks.Add Anchor:=Selection, Address:=xFolder.Path, 
TextToDisplay:=xFolder.Path
</code></pre>
</blockquote>
<p>The same thing could just be written directly -</p>
<pre><code> ActiveSheet.Cells(rowIndex, 6).Hyperlinks.Add Address:=xFolder.Path, TextToDisplay:=xFolder.Path
</code></pre>
<blockquote>
<pre><code>    Cells(rowIndex, 8).Formula = file_type
    Cells(rowIndex, 9).Formula = xFile.Size
    Cells(rowIndex, 10).Formula = xFile.DateLastModified
    Cells(rowIndex, 11).Formula = file_extension
</code></pre>
</blockquote>
<p>Why are you setting these values via a formula? You want to use the <code>Cells().Value</code> property when assigning a value.</p>
<p>What are you doing here -</p>
<blockquote>
<pre><code>rowIndex = Range("F65536").End(xlUp).Row + 1
</code></pre>
</blockquote>
<p>Are you just getting the last row? There is a <a href="http://stackoverflow.com/a/11169920/1161309">standard</a> way to find lastRow and lastColumn. That post explains why.</p>
<hr>
<p>Your <code>If</code> structure here -</p>
<blockquote>
<pre><code>    If file_extension = "pdf" Then
        file_type = "PDF"
    ElseIf Left(file_extension, 3) = "doc" Then
        file_type = "DOC"
    ElseIf Left(file_extension, 2) = "xl" Then
        file_type = "XLS"
    ElseIf Left(file_extension, 3) = "msg" Then
        file_type = "MSG"
    ElseIf Left(file_extension, 3) = "zip" Then
        file_type = "ZIP"
    ElseIf Left(file_extension, 3) = "ppt" Then
        file_type = "PPT"
    Else
        file_type = ""
    End If
</code></pre>
</blockquote>
<p>Why are you doing this? First, if you need to only know those files, then you would use your <code>Else</code> value to filter out files that aren't what you need and then not print them. In which case a <code>Select Case</code> would work. But, in general, this seems unnecessary when you could just use something like</p>
<pre><code>Dim fileName As String
fileName = Dir("C:\Temp" &amp; "\*")
Do While Len(fileName) &gt; 0     
    'here fileName = filename.filetype
    fileName = Dir
Loop
</code></pre>
<p>You can avoid that entire if structure by just parsing your file name</p>
<pre><code>    baseName = Left(fileName, Len(fileName)-4)
    extention = Right(fileName, 3)
</code></pre>
<p>Though in general you'd be better off parsing it like</p>
<pre><code>    Dim delimiterPosition As Long
    delimiterPosition = InStr(1, fileName, ".")
</code></pre>
<p>But your call.</p>
<hr>
<p>Another thing that's slow is writing to the sheet so many times. Instead, gather your data into an array, populate the array, and then write it all to the sheet. Since you're creating hyperlinks, you'd store that data in your array as well.</p>
    </div>