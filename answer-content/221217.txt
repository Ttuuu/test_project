<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Nit: running <a href="https://pypi.org/project/isort/" rel="nofollow noreferrer">isort</a> would organize your imports,
to reduce <code>git merge</code> conflicts.</p>
<p>The <code>split_large_file()</code> signature might default <code>my_temp_dir</code>.
Consider renaming it to simply <code>temp_dir</code>.
For compatibility with /usr/bin/sort, <code>os.environ['TMPDIR']</code> would be a fair default.</p>
<p>Consider renaming <code>starting_file</code> to <code>in_file</code> (or <code>input_file</code>).</p>
<p>Docstrings start with an English sentence, e.g. "Splits a file into pieces."
If the intent is "...into sorted pieces," then say so,
and make the function name match.
Splitting a file is by itself a valuable service, even without sorting.</p>
<p>Please say "a list of" rather than "a list with all".</p>
<p>It appears <code>liste_file</code> has a typo, plus it should simply be <code>files</code>.
Simplify <code>line_holder</code> to <code>lines</code>.</p>
<h1>algorithm</h1>
<ol>
<li>line budget vs RAM budget</li>
<li>chunking</li>
<li>loop style</li>
</ol>
<p>You impose a million-line max on each piece.
But the true goal was to cap RAM consumption,
which is indirectly related through the average chars-per-line
for a given input file.
Consider adding up line lengths
rather than incrementing by one for each line.</p>
<p>Related to this, the line-by-line iteration is on the slow side,
especially for input files comprised of short lines.
Consider doing one or more binary <code>.read()</code>'s,
and then reading until newline so only complete lines go to the outfile.
(Or scan backwards through the chunk to find a newline,
then <code>seek()</code> to that position before issuing the next read.)</p>
<p>The <code>if line_holder:</code> line is a code smell,
it suggests that you didn't quite find a form of <code>while</code> loop
that matched your application.
Perhaps a boolean <code>done</code> flag would help to
remove the copy-n-pasted 2nd chunk of code.
If for some reason you feel it still needs to remain,
then definitely extract both copies into a small helper method.
DRY: <a href="https://en.wikipedia.org/wiki/Don%27t_repeat_yourself" rel="nofollow noreferrer">https://en.wikipedia.org/wiki/Don%27t_repeat_yourself</a></p>
<p>This is correct, but weird:</p>
<pre><code>            if cpt % max_line == 0:
                cpt = 0
</code></pre>
<p>If line number <code>cpt</code> (don't know what that stands for) hits limit,
we reset the line number and emit a chunk.
Computing modulo <code>%</code> is more expensive than a comparison <code>&gt;</code>.
Usually modulo would be used if we're <strong>not</strong> going to reset the line number.</p>
<p>Three comments about the lambda:</p>
<ol>
<li>This is the first we've heard about the input file being a <code>.tsv</code>. Improve the docstring.</li>
<li>The lambda is fine, but consider breaking it out as a named function.</li>
<li>The <code>.split()</code> copies out the entire line, but it only <em>needs</em> to copy as far as first TAB.</li>
</ol>
<p>We evaluate <code>merged()</code> for side effects,
so we're looking for a verb name rather than an adjective.
Just call it <code>merge()</code>, or perhaps <code>external_merge()</code>.
Consider defaulting <code>col=0</code> in the signature.</p>
<p>Each docstring should start with an English sentence.</p>
<p>The comment "being minimal the script will fail if one column is shorter than this value" is accurate.
But, better to rewrite as a pre-condition on valid inputs:
"must exist in each input row."</p>
<pre><code>    my_heap = []
</code></pre>
<p>Yes, it is your heap.
But that's not what is interesting about it.
Better to just call it <code>heap</code>.</p>
<pre><code>    for elem in liste_file:
</code></pre>
<p>This would more naturally be: <code>for file in files:</code></p>
<p>You used a hardcoded column zero in <code>split_large_file()</code>,
but now you are apparently processing unsorted input
since <code>col</code> might be positive.</p>
<p>Please assign <code>sentinel = sys.maxsize</code>,
if that is how you're trying to use it.
Or at least add a comment.
(It is 0x7FFFFFFFFFFFFFFF, is that what you want?)
The <code>break</code> apparently should be raising a fatal exception instead,
since the input file apparently is not allowed to contain that sentinel
(not allowed to contain arbitrary contents).</p>
<p>The references to <code>minimal[0]</code>, <code>[1]</code>, and <code>[2]</code> are obscure.
Please use tuple unpack to put them in <code>val</code>, <code>line</code>, <code>file_temp</code>
or similarly informative variables.</p>
<p>The early explicit <code>.remove()</code> is fine.
If you had specified <code>delete=True</code> (or let it <a href="https://docs.python.org/3/library/tempfile.html#tempfile.NamedTemporaryFile" rel="nofollow noreferrer">default</a>)
the temp files would be deleted when the interpreter does a normal exit.</p>
<p>Depending on platform, defaulting <code>tmp_dir</code> to something like <code>/tmp</code>
might be more appropriate than to CWD (which might be unwritable).</p>
<p>Overall, looks pretty good, pretty readable.
One can always improve.</p>
    </div>