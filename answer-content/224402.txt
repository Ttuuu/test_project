<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Overall the code appears easy to read, and does what you say it does.</p>

<p><strong>General comments:</strong></p>

<ul>
<li><p>The name of the throttle function is misspelled (trottle versus throttle). Not a show stopper, but does make it harder to read.</p></li>
<li><p>I see a number of ECMA script language features being used, but the old <code>function() { ... }</code> style is being used for the callback in <code>setTimeout</code>. Consider using the more concise "<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions" rel="nofollow noreferrer">arrow function expression</a>" (e.g. lambda expression) syntax instead:</p>

<pre><code>setTimeout(() =&gt; element.addEventListener('mousemove', throttle), 2000);
</code></pre></li>
</ul>

<p><strong>Code reusability and variable scope</strong></p>

<ul>
<li><p>Two global variables are being declared, and really should not exist in the global scope. Consider using an Immediately Invoked Function Expression (IIFE) to hide them:</p>

<pre><code>(() =&gt; {
    let area;
    let result;

    ...
})();
</code></pre>

<p>Or you can use a build tool like Grunt to automatically wrap this script in an IIFE.</p></li>
<li><p>Other events are just as "spammy" as the mousemove event. The "scroll" event is just as bad, and this could be useful for that as well. Consider parameterizing the event that is being throttled.</p></li>
<li><p>Same thing with the <code>updateResult</code> function. It could be parameterized as a callback function.</p></li>
<li><p>Parameterizing the frequency of the throttling would be easy, and a good idea as well.</p></li>
<li><p>The CSS selectors used to target the element whose events are being throttled is the last thing that needs to be parameterized in order to make this truly reusable.</p></li>
</ul>

<p>Given this, a function signature like the following would probably allow you to fix all the issues, including leaking variables to the global scope:</p>

<pre><code>function throttleEvent(element, eventName, frequency, callback) {
    ...
}
</code></pre>

<p>And would be used like this:</p>

<pre><code>let area = document.querySelector("#move");
let result = document.querySelector('#result');
let updateResult = (event) =&gt; {
    result.textContent = `${event.clientX} , ${event.clientY}`;
};

throttleEvent(area, "mousemove", 2000, updateResult);
</code></pre>
    </div>