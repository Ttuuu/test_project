<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>DFS (Directory and File Serialization) file format</p>
</blockquote>

<p>Not sure what that is. Nor is google.
Recommend you offer a more specific citation, hopefully one that includes an URL.</p>

<pre><code>import os as _os
import sys as _sys
</code></pre>

<p>Hmmm, that's odd. Do you <em>really</em> need to rename them?</p>

<pre><code>FORMAT_DOCUMENTATION = '''\
</code></pre>

<p>The backwhack is very odd -- don't do it.
That's what triple quotes are for.</p>

<pre><code>        0 = Directory
</code></pre>

<p>You apparently meant "0 = type is Directory". Similarly for "1 = File".</p>

<pre><code>        b = Name Size (bytes)
</code></pre>

<p>What?!?
You're apparently indicating that <code>b</code> is a single bit,
and it denotes this many vs that many bytes?!?
How many bytes?</p>

<pre><code>    'Acquire(destination) -&gt; Acquire'
</code></pre>

<p>I understand that you think that's a docstring.
I don't understand what it's trying to tell me.
Same remark for <code>Release</code>.</p>

<pre><code>    'Initialize the Acquire object.'
</code></pre>

<p>Putting such a docstring on a ctor is redundant;
consider deleting it.
Same remark for <code>Release</code>.</p>

<pre><code>    self.__destination = destination
</code></pre>

<p>Are you <em>sure</em> you want name mangling?
Consider using just a single leading <code>_</code> underscore for these three.
Same remark for <code>Release</code>.</p>

<pre><code>    self.__pointer = 0
</code></pre>

<p>You should probably init this to zero in the ctor, as well.
It gives the reader a hint about which balls will be up in the air
during the lifetime of this object.</p>

<p>The meaning of <code>self.__archive</code> is not transparently obvious to me.</p>

<pre><code>def __dir(self, source, pointer):
</code></pre>

<p>Oh, goodness!
<strong>Stop</strong> with the name mangling already!
Is there some inheritance use case coded up where mangling helps?
Just use a single <code>_</code> underscore.</p>

<pre><code>    'Private class method.'
</code></pre>

<p>That's not a docstring, it's a <code>#</code> comment.
It doesn't help the caller figure out how to correctly call this private method.
It is clearly not a <code>@classmethod</code>, rather, each instantiated object owns it.
Similarly, delete the 'Private module function.' docstrings; they're not helpful.</p>

<pre><code>        self.__pointer += 1
</code></pre>

<p>There is a pre-condition here: <code>acquire()</code> must execute before <code>__dir()</code> does.
That is not at all obvious.
Make it so, by initializing pointer in the ctor.</p>

<pre><code>        self.__destination.write(chr((len(pointer) - 1 &lt;&lt; 4) + (len(name_size) - 1 &lt;&lt; 3) + 3) + pointer + name_size + name)
</code></pre>

<p>A single digit, <code>3</code>, is different from the preceding line, where it was <code>7</code>.
Rather than pasting the line in twice, parameterize it, highlighting the 3 / 7 contrast.</p>

<p>I was rather hoping to see a call to <a href="https://docs.python.org/3/library/struct.html#struct.pack" rel="nofollow noreferrer"><code>pack()</code></a>,
but perhaps the bit packing is not a good fit for that.</p>

<pre><code>        source.seek(0, 2)
</code></pre>

<p>That source line is Just Wrong.
Use the constant <code>os.SEEK_END</code> rather than an obscure <code>2</code>.
Similarly for <code>0</code> <a href="https://en.wikipedia.org/wiki/Magic_number_(programming)" rel="nofollow noreferrer">Magic Number</a>.</p>

<pre><code>            position = source.tell()
            source.seek(0, 2)
            if position != source.tell():
</code></pre>

<p>Sure, I'll grant you there's a race here, the <code>if</code> might possibly trigger.
But I think you wanted to assign <code>position</code> <em>before</em> the <code>while</code> loop.
(Or maybe you wanted to re-open <code>source</code>?)</p>

<pre><code>    BUFF_SIZE = 2 ** 20
</code></pre>

<p>That's the 2nd time you've defined that.
<a href="https://en.wikipedia.org/wiki/Don%27t_repeat_yourself" rel="nofollow noreferrer">DRY</a>.
Declare it in a common place that both classes can pull the value from.</p>

<pre><code>    while header != -1 and (header &gt; 127 or header &amp; 3):
</code></pre>

<p>This is obscure.
Yes, I understand the high bit distinguishes between file / dir,
and the two low order bits have been defined elsewhere.
That doesn't make <code>127</code> any less of a Magic Number, nor <code>3</code>.
You probably want to define a helper function that knows such encoding details.</p>

<pre><code>        if header &lt; 128:
</code></pre>

<p>Ok, if you're going to hard code Magic Numbers,
at least pick one and stick with it.
Consider parsing out the high bit into its own variable, then use that.
I imagine the same helper would also return <code>type_code</code>.</p>

<pre><code>    def EOF(self):
</code></pre>

<p><a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">PEP-8</a> asks that you name this <code>eof()</code>, as it is not a class.
Similarly for <code>self._eof</code>.</p>

<pre><code>    path = _os.path.join(self.__parents[_int(self.__read((header &gt;&gt; 4 &amp; 7) + 1))], self.__read(_int(self.__read((header &gt;&gt; 3 &amp; 1) + 1))))
</code></pre>

<p>I imagine this is some very nice C code,
but in python land we encourage breaking out the occasional helper function.</p>

<pre><code>    if header &gt;&gt; 2 &amp; 1:
</code></pre>

<p>Again, this is obscure, despite the very nice <code>FORMAT_DOCUMENTATION</code>
you helpfully offered.
Break out a helper function with a descriptive name.</p>

<p>You apparently wrote some additional code in a separate code block,
but this review has gone on overlong already.</p>

<p>Summary: code is obscure, and needs unit tests added so we
can confidently re-factor.</p>
    </div>