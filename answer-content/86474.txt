<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>UX</h1>
<p>Before diving into the code, I have a few points to mention about the user experience of it.</p>
<ul>
<li>You're not resetting the <code>Application.Statusbar</code> before the procedure exits, which means whenever the code runs to completion, the Excel status bar remains "frozen" with the last processed folder.</li>
<li>You're warning the user that the operation may take a long time, regardless of how many folders/subfolders there actually are.</li>
<li>Message boxes are bare-bones, without a title or an icon, and punctuation is missing from the message strings.</li>
</ul>
<hr>
<h1>Readability</h1>
<p>The code itself reads a bit like a clogged script. Indentation is insufficient and inconsistent, and vertical whitespace is completely inexistent. This code needs to breathe a little - here's your code, <em>without any other changes</em>:</p>
<pre><code>Private Sub PrintFolders()

    Dim objFSO As Object
    Dim objFolder As Object
    Dim objSubFolder As Object
    Dim i As Integer

    Application.StatusBar = ""

    'Create an instance of the FileSystemObject
    Set objFSO = CreateObject("Scripting.FileSystemObject")
    'Get the folder object
    Set objFolder = objFSO.GetFolder("C:\Temp")

    i = 1
    'loops through each folder in the directory and prints their names and path
    On Error GoTo handleCancel

    Application.EnableCancelKey = xlErrorHandler
    MsgBox "This may take a long time: press ESC to cancel"

    For Each objSubFolder In objFolder.subfolders
        Application.StatusBar = objSubFolder.Path &amp; " " &amp; objSubFolder.Name
        'print folder name
        Cells(i + 1, 1) = objSubFolder.Name
        'print folder path
        Cells(i + 1, 2) = objSubFolder.Path
        i = i + 1
    Next objSubFolder

handleCancel:
    If Err = 18 Then
        MsgBox "You cancelled"
    End If

End Sub
</code></pre>
<hr>
<h1>Comments</h1>
<p>There are way too many comments in that code. Good, valuable comments explain <em>why</em> code is doing what it does - <em>the code itself</em> <strong>should</strong> be self-explanatory about the <em>what</em>.</p>
<p>I would simply remove them... all.</p>
<blockquote>
<pre><code>'Create an instance of the FileSystemObject
Set objFSO = CreateObject("Scripting.FileSystemObject")
</code></pre>
</blockquote>
<p>Isn't too far from:</p>
<pre><code>'increment i:
i = i + 1
</code></pre>
<hr>
<h1>Non-Responsiveness</h1>
<p>You're running a pretty tight loop here:</p>
<pre><code>For Each objSubFolder In objFolder.subfolders

    Application.StatusBar = objSubFolder.Path &amp; " " &amp; objSubFolder.Name
    Cells(i + 1, 1) = objSubFolder.Name
    Cells(i + 1, 2) = objSubFolder.Path

    i = i + 1

Next objSubFolder
</code></pre>
<p>You never give Excel a chance to breathe and actually respond to the events you're sending - namely updating the statusbar and listening to <kbd>ESC</kbd> keypresses.</p>
<p>This would fix it:</p>
<pre><code>For Each objSubFolder In objFolder.subfolders

    Application.StatusBar = objSubFolder.Path &amp; " " &amp; objSubFolder.Name
    Cells(i + 1, 1) = objSubFolder.Name
    Cells(i + 1, 2) = objSubFolder.Path

    i = i + 1
    DoEvents

Next objSubFolder
</code></pre>
<p>...but it comes with a pretty high price: updating the status bar and listening for keypresses <em>at each and every iteration</em> will considerably slow down execution. How about reorganizing it a little, and only do that once every 10 iterations? Avoid <em>magic numbers</em>, give that value a meaningful name and assign it to a constant:</p>
<pre><code>Const IterationsToUpdate As Integer = 10
For Each objSubFolder In objFolder.subfolders

    Cells(i + 1, 1) = objSubFolder.Name
    Cells(i + 1, 2) = objSubFolder.Path

    i = i + 1

    If i Mod IterationsToUpdate = 0 Then
        Application.StatusBar = objSubFolder.Path &amp; " " &amp; objSubFolder.Name
        DoEvents
    End If

Next objSubFolder
</code></pre>
<p>Now, you're writing to worksheet cells in a loop, while keeping Excel relatively responsive. <strong>Are you sure you're writing to the correct worksheet?</strong></p>
<blockquote>
<pre><code>Cells(i + 1, 1) = objSubFolder.Name
Cells(i + 1, 2) = objSubFolder.Path
</code></pre>
</blockquote>
<p>Without an object reference, <code>Cells</code> is referring to the <em>active sheet</em>, which the user is free to change any time <em>as the code runs</em>. This is another UX issue if not a bug.</p>
<hr>
<h1>Performance</h1>
<p>I'm willing to bet anything that your biggest bottleneck isn't the FSO, but actually <em>writing to the cells</em>. Of course you need to do that.. but do you need Excel to repaint its grid and verify that nothing needs to be recalculated <em>every time you write to a cell</em>? Of course you don't.</p>
<p>Switch it off:</p>
<pre><code>Application.ScreenUpdating = False
Application.Calculation = xlCalculationManual
</code></pre>
<p>Now, whenever you do that, you <strong>must</strong> handle runtime errors appropriately.</p>
<hr>
<h1>Error Handling</h1>
<p>Your error handling is copy-pasted from <a href="https://msdn.microsoft.com/en-us/library/office/ff834623.aspx" rel="nofollow noreferrer">MSDN</a>, which is only an <em>example</em> to <em>illustrate</em> how a specific feature works - these examples are always focused on a very specific feature, and never about best practices.</p>
<p>Your method should <em>fail cleanly</em>, and correctly cleanup whether or not an error is raised - every error-sensitive method should be templated something like this:</p>
<pre><code>Sub DoSomething()
    On Error GoTo CleanFail

    'implementation code here

CleanExit:
    'cleanup code here
    Exit Sub

CleanFail:
    'error-handling code here
    Resume CleanExit
End Sub
</code></pre>
<p>In your case, it would look something like this:</p>
<pre><code>CleanExit:
    Application.Statusbar = False
    Application.Cursor = xlDefault
    Application.ScreenUpdating = True
    Application.Calculation = xlCalculationAutomatic
    Exit Sub

CleanFail:
    Const MsgTitle As String = "Operation not completed"
    If Err.Number = 18 Then
        MsgBox "Operation was cancelled.", vbInformation, MsgTitle
    Else
        MsgBox "An error has occurred: " &amp; Err.Description, vbCritical, MsgTitle
    End If
    Resume CleanExit
</code></pre>
<hr>
<h1>Abstraction &amp; Maintainability</h1>
<p>If you need to change the folder to run it for, you need to change the code: it's <em>screaming</em> for a <code>String</code> parameter containing the root path to start searching in.</p>
<p>The procedure is also doing too many things. To add features you need to add more code to it, making it do even more things.</p>
<p>Consider these concerns:</p>
<ul>
<li>Knowing what folder to start searching in</li>
<li>Acquiring the folders/subfolders' names</li>
<li>Warning the user about a potentially lengthy operation</li>
<li>Enabling/disabling/toggling screen updating, calculation, statusbar and cursor</li>
<li>Knowing what worksheet to output to</li>
<li>Dropping the folders/subfolders' names onto the output worksheet</li>
</ul>
<p>Most of these concerns deserve a method of their own. Here's how I would write your code:</p>
<pre><code>Option Explicit

Public Sub RenameMe()

    Dim rootPath As String
    rootPath = GetRootPath
    If rootPath = vbNullString Then Exit Sub

    Dim folders() As Variant
    Set folders = FindAllFolders(rootPath)

    Dim targetSheet As Worksheet
    Set targetSheet = Application.ActiveSheet

    OutputFolders targetSheet, folders

End Sub
</code></pre>
<p>Split concerns into small, immutable procedures - a procedure should ideally have no more than one reason to change. Doing that increases the <em>abstraction level</em> of your code, which instantly boosts readability, which in turn automatically reduces the possibility for hidden bugs.</p>
<hr>
<h2>Algorithm</h2>
<p>If you noticed, the above snippet separates <em>getting the folders</em> and <em>writing them to a worksheet</em>. You may think "but I'll have to iterate all 6,000 folders twice, this is going to be so much slower!"... but I'll give you a hint: <a href="http://www.cpearson.com/excel/ArraysAndRanges.aspx" rel="nofollow noreferrer">read up on Arrays and Ranges in VBA</a> (bookmark that site!).</p>
<p>The crux is that you don't <em>need</em> to iterate anything other than the folders: you populate a 2D array as you go, and then write that entire array onto the worksheet in a single operation. <em>Then</em> your performance bottleneck will be the <code>FileSystemObject</code>, but at that point your code will be so unrecognizeable that it'll be worth posting another Code Review question! :)</p>
    </div>