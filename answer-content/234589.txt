<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Think about the problem as a repeated Cartesian product. It allows us
to use the very useful <code>product</code> function from the <code>itertools</code> module:</p>

<pre><code>&gt;&gt;&gt; list(product('ab', 'AB', 'xy'))
[('a', 'A', 'x'), ('a', 'A', 'y'), ('a', 'B', 'x'),
('a', 'B', 'y'), ('b', 'A', 'x'), ('b', 'A', 'y'),
('b', 'B', 'x'), ('b', 'B', 'y')]
</code></pre>

<p>So your problem can be solved by replacing each character in the
string with its possible replacemnets and running <code>product</code> on the
result:</p>

<pre><code>import itertools
import sys

def alternatives(ch, repls):
    key = ch.lower()
    if key in repls:
        return [ch, repls[key]]
    return [ch]

def main(argv):
    if len(argv) != 2:
        print(f"USAGE: {argv[0]} [word]")
        return

    # Populate the known replacements
    replacements = {'a' : '4', 'e' : '3', 'i' : '1',
                    'm' : '/v\\', 'o' : '0', 'r' : '2'}

    s = [alternatives(ch, replacements) for ch in argv[1]]
    for it in itertools.product(*s):
        print(''.join(it))

if __name__ == '__main__':
    main(sys.argv)
</code></pre>

<p>Note that this version is not exactly identical to your original. If
you enter "mondoman" the program will output "mondoman" as one
combination.</p>
    </div>