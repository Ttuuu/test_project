<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ol>
<li><p>Using a signed type for an integer you want to do bit-manipulations on, or which cannot (must not) be negative is an obvious case of Java damage.</p></li>
<li><p>While in Java, an <code>int</code> is always a 32 bits 2's complement integer, C++ caters to a far wider range of targets. Admittedly, not all the options are still used (even rarely), but you should not assume the bit-width.</p></li>
<li><p>Java may not allow implicit conversion of integers to boolean, but C++ does. You seem to get that difference though. Sometimes. Maybe half the time.</p></li>
<li><p>Yes, you <em>can</em> start from the most significant bit. The most telling disadvantages are</p>

<ul>
<li>that you will always traverse <em>all</em> bits,</li>
<li>that you have to use a mask, and</li>
<li>that you need the bit-width (look in <a href="https://en.cppreference.com/w/cpp/types/integer" rel="noreferrer"><code>&lt;cstdint&gt;</code>/<code>stdint.h&gt;</code></a> for a macro, or better use <a href="https://en.cppreference.com/w/cpp/types/numeric_limits" rel="noreferrer"><code>std::numeric_limits</code> from <code>&lt;limits&gt;</code></a>) for the mask.</li>
</ul>

<p>Better start on the other end.</p></li>
<li><p>I really wonder why you initialize <code>longest_binary_gap</code> to <code>-1</code> and then use a conditional-operator to ensure you return at least <code>0</code>. That's a lot of work for nothing,</p></li>
<li><p>You were exceedingly generous with long and descriptive names <em>in</em> your function, don't you think it's much more important for the function itself?</p></li>
<li><p>The function cannot throw by design, so make it <code>noexcept</code>.</p></li>
<li><p>There also doesn't seem to be a reason not to allow use in a ctce, so mark it <code>constexpr</code>.</p></li>
</ol>

<p>Re-coded:</p>

<pre><code>constexpr int biggest_binary_gap(unsigned n) noexcept {
    while (n &amp;&amp; !(n &amp; 1))
        n &gt;&gt;= 1;
    int r = 0;
    for (;;) {
        while (n &amp; 1)
            n &gt;&gt;= 1;
        if (!n)
            return r;
        int m = 0;
        while (!(n &amp; 1)) {
            ++m;
            n &gt;&gt;= 1;
        }
        if (r &lt; m)
            r = m;
    }
}
</code></pre>
    </div>