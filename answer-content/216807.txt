<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>My understanding of the problem:</p>

<p>You are provided three values:</p>

<ol>
<li><p>A budget(the amount of funds you can spend)</p></li>
<li><p>A List of Vendor Batch Sizes</p></li>
<li><p>A List of Vendor Batch Prices</p></li>
</ol>

<p><strong>Promises/Assumptions</strong>: the items 2 &amp; 3(the lists) correspond such that for Vendor i, the vendors batch size and price can be found at List.get(i)</p>

<p>NOTE: Your code has a hard-coded assumption that the two lists (budgetQuantities and budgetCosts) are the same size, or at least you never check that this is true or otherwise enforce this requirement.</p>

<p><strong>Goal:</strong> determine the maximum affordable quantity based on Vendor and budget information.</p>

<hr>

<p>There seems to be <em>some</em> superfluous code going on here, so I will try to address that first
</p><hr>
<strong>Inner Class <code>MaxQuantity</code></strong>

<p>There really isn't any reason to use this. It has only one use: to interact with the internal <code>int value</code>. As both the class and value are public, I can access all the way through: <code>shoppingBudget.MaxQuantity.value</code>. This is generally considered bad. As the class is in all cases just an int, it can be replaced with an internal variable, <code>private int maxQuantity</code></p>

<p>suggesting removal</p>

<p></p><hr>
<strong>The permute function</strong>

<p><s>As mentioned in my comment, this function seems entirely pointless as the problem does not involve permutations; The information is linear in nature, as there is no "mix and match" (i.e. permutation) of Vendor Information (budgetQuantities and budgetCosts) </s></p>

<p>suggesting removal</p>

<p><strong>Update</strong>
I appreciate your use of recursion in your permute function, but its a tad confusing. The second set of swapping seems pointless, as by the time you reach it you are simply propagating back up the recursion tree, swapping indeces that we no longer use.</p>

<p>I looked for similar permutation implementations and found <a href="https://codereview.stackexchange.com/questions/11598/permutations-of-a-list-of-numbers+">this well designed permutation util</a>, which I used for comparison testing of your permutation method. </p>

<p></p><hr>
<strong>IntStream</strong>
<s>There really isn't a need to create an int[] for indices like this. I see it is mostly used in the permute() function, which I have suggested removing, so I will likewise suggest removing this. With a linear solution, it is much easier to create a single int index and increment it as we iterate through the lists, rather than creating an int for every position from 0 to budgetQuantities,size()-1 (the increment approach is also less computationally expensive, especially where memory is concerned)</s>

<p><strong>Update</strong> I had to use this in my rework, definitely shouldn't remove</p>

<p></p><hr>
<code>maxQuantity.value = Integer.MIN_VALUE;</code>

<p>Integer.MIN_VALUE is usually a good initial value for a maximum. However, this is not the true minimum of the problem. The absolute minimum items you can purchase is 0, so it makes more sense to initialize your globalMaximum to 0: <code>private int globalMaximum=0;</code>
</p><hr>
<strong>UPDATED</strong>

<p><strong>findSolution is NOT broken</strong></p>

<p><s>There is a hole in the logic of your findSolution method. You seem to have written your code with the intent that this method will be called many times, and each result will be compared with the global max (based on your use of <code>maxQuantity.value = Math.max(maxQuantity.value, possibleMax);</code> in permute)</s></p>

<p>However, this method runs across all vendors. Because of this, your int remaining and counter should be inside your for loop, with an <code>int localMaximumToReturn</code> where counter is currently.</p>

<p>To explain further: your current findSolution forEach loop represents each Possible Interaction between Molly and one Vendor, so both the money available and the total number of computers she can buy per transaction are independent. However, in the above code, <strong>each loop is interacting with the same funds</strong>, which will introduce severe error.</p>

<p>Example: I ran in debug with breakpoints inside the findSolution method, outside the forEach loop, with the following information:</p>

<pre class="lang-java prettyprint-override"><code>moneyAvailable: 50
budgetQuantities: {20,19}
budgetCosts: {24,20}
</code></pre>

<p>Stepping through, the first loop correctly computes that howManyToBut is 2, meaning she can buy 40 computers for 48 dollars. <strong>Then you set remaining to 2 with remaining -= 48</strong></p>

<p>This means for the next loop, we get a cost of 20, <strong>which is now greater than our remaining 2 so the second cost/quantity maximum is never checked</strong></p>

<p>We have technically hit each index, so we leave the loop and return the counter 40. While this IS the correct answer, we got here by false means. If you switch the order of items in your lists for the first assert, you should see a return of 38, which will break your assertEqual
</p><hr>
<strong>It is at this point I see the point of permute</strong> in that it was scrambling your orders. Since your findSolution would only ever succeed at checking the first index, permute scrambles your orders so that each item gets a shot at being first, so each possible results is compared with the globalMax. <strong>While this works, it is incredibly backward, and buggy</strong> I highly recommend fixing this bug in findSolution, and remove the no longer needed permute()

<hr>

<p>With superfluous code removed you should end up with something similar to:</p>

<pre class="lang-java prettyprint-override"><code>public class ShoppingBudget {
    int globalMax;

    public int budgetShopping(int budget, List&lt;Integer&gt; batchSizes, List&lt;Integer&gt; batchCosts) {
        List&lt;Integer&gt; indeces = new ArrayList&lt;&gt;();
        IntStream.range(0, batchSizes.size()).forEach((num) -&gt; indeces.add(num));
        Collection&lt;List&lt;Integer&gt;&gt; permutations = new Permutations&lt;Integer&gt;().permute(indeces);
        permutations.forEach(
                (permutation) -&gt; checkPermutationMaximum(permutation, budget, batchSizes, batchCosts)
        );
        return globalMax;
    }

    private void checkPermutationMaximum(List&lt;Integer&gt; indeces, int budget, List&lt;Integer&gt; batchSizes, List&lt;Integer&gt; batchCosts) {
        int localMax = 0;
        int remainingCash = budget;

        int i = 0;
        int sz = indeces.size();
        while (i &lt; sz &amp;&amp; remainingCash &gt; 0) {
            int currentVendor = indeces.get(i);
            int currentCost = batchCosts.get(currentVendor);
            if (remainingCash &gt;= currentCost) {
                int cashToCostRatio = remainingCash / currentCost;
                remainingCash -= currentCost * cashToCostRatio;
                localMax += cashToCostRatio * batchSizes.get(currentVendor);
            }
            i++;
        }

        if (localMax &gt; globalMax) globalMax = localMax;

    }
}
</code></pre>

<p>The above passes all of your assertEqual tests as well as debug scrutiny</p>

<p></p><hr>
<strong>Comments on Update</strong>

<p>Rather than trying to create the next unvisited permutation at run time (which is your above approach) I adapted a utility to return a Collection of Lists, where each List is a possible permutation of the input. Then I compute and check the maximum for each permutation</p>
    </div>