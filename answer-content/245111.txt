<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Amazing work! As PeterT mentioned very little to change in your code, however with that said I did notice some code that keeps repeating itself, not sure if this is intentional.</p>
<p><strong>Checking if the Model is null</strong></p>
<p><code>If Not this.model Is Nothing Then</code>, this code appears 6 times through out the UserForm, I believe you can validate if the model is null in your <code>IView_ShowDialog</code> procedure, right before you sync the model with the UI, execution will stop if the <code>viewModel</code> is not set.</p>
<pre><code>Private Function IView_ShowDialog(ByVal viewModel As Object) As Boolean
If viewModel Is Nothing Then Exit Function 'exits if viewModel is null

Set this.model = viewModel

SyncUIWithModel

Me.Show
IView_ShowDialog = Not this.IsCancelled
End Function
</code></pre>
<p><strong>Public Properties</strong></p>
<p>You are declaring a <code>Public Property Get PointLoadsCount</code> but have a <code>PointLoads</code> private variable under <code>THelper</code>. Why not just use <code>PointLoadsCount</code>, you'll have less naming and less variables to manage, plus it looks cleaner and makes more sense when using <code>this</code> keyword. This is just personal preference, but I do find it easier to manage.</p>
<pre><code>Private Type THelper
    PointLoadsCount As Long
End Type

Private this As THelper

Public Property Get PointLoadsCount() As Long
    PointLoadsCount = this.PointLoadsCount 'renamed to match Private varaible
End Property
</code></pre>
<p>Last note, I believe you can eliminate the following line of code, as you are already setting the model, right before you show the form, additionally this would throw a Runtime Error if executed.</p>
<pre><code>Public Property Let model(ByVal value As LoadingModel)'should be a Set not Let 
    Set this.model = value
End Property
</code></pre>
<p>Overall excellent implementation, especially with your <code>Enum</code> converters!</p>
    </div>