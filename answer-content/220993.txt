<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I think avoiding temporary variables, when we have no strict memory limit, is a bad idea. There is no way to have a <strong>readable</strong> code without using variables.
So let's create a version of your code with temp variables:</p>

<pre><code>def simulate_survey(sample_size, percent_subscribes):
    sum_result = sum([x for x in [True] * sample_size if r.random() &lt; percent_subscribes])
    third_value = round(sum_result / sample_size, 2)
    return (
        sample_size,
        percent_subscribes,
        third_value
    )
</code></pre>

<p>It's not the most readable version of your code, But it's clearly more readable (I changed the way you created the sum value. I'm programming with Python for years, but that syntax is so strange to me. I hope my code do what your code did).</p>

<p>So Is there a huge memory usage gap between those programs? We now that Python does not remove temporary variables as a part of its optimization process (you can read more about it <a href="https://stackoverflow.com/questions/28993557/why-doesnt-python-optimize-away-temporary-variables">here</a>). So obviously, my program should use more memory than yours. But how much?</p>

<p>I used <code>resource</code> module for comparing them. You can use this too if you are working on a UNIX based os.</p>

<p>Here is the code that I tried in both programs for measuring memory usage:</p>

<pre><code>print(simulate_survey(64, 0.5))
print(resource.getrusage(resource.RUSAGE_SELF).ru_maxrss)
</code></pre>

<p>Your variable-less program shows values around 11860 KB, But my program with temporary variables used almost 12008 KB. There is 200 KB difference, but don't forget that my code is not completely the same as your code and I changed how it creates third value.</p>

<p>So let's change the third value to the way you creates that:</p>

<pre><code>def simulate_survey(sample_size, percent_subscribes):
    sum_result = sum([
                    r.random() &lt; percent_subscribes
                    for _ in range(sample_size)
                ])
    third_value = round(sum_result / sample_size, 2)
    return (
        sample_size,
        percent_subscribes,
        third_value
    )
</code></pre>

<p>So what happens if we test memory usage of this code that has the exact same logic as the first version? The result is around 11896 KB. Only between 10 to 30 KB more than the first version (Because each time we create a process, does not exactly same things happen, memory usage values are different each time).</p>

<p>So, as a conclusion, if you are not working on a machine with very tiny memory (something like embedded programming that is not common using python), I really recommend you that always use things like temporary variables to make your code readable.</p>
    </div>