<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The obvious downside of your current approach is that you do a lot potentially unnecessary copying. One common solution is to return (const) iterators to the entries, i.e.,:</p>

<pre><code>class Record
{
    public:
        // ...

       auto cbegin() const { return entries.cbegin(); }
       auto cend() const { return entries.cend(); }

       // Perhaps similar methods for getting non-const iterators ...
};
</code></pre>

<p>This solution allows you to use e.g., standard algorithms on the entries, but you can't manipulate the underlying range from the outside (due to const-ness).</p>

<p>To support your earlier use case, you can still do <code>std::vector&lt;std::string&gt; res(r.cbegin(), r.cend());</code> if you wish, where <code>r</code> is an object of type <code>Record</code>.</p>
    </div>