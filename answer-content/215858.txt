<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I think it's pretty good, though it looks a bit more like C code than java.  You can compare it to my version of key tracking.  Instead of the keys and keysLast arrays, I use an array of KeyState objects.</p>

<pre><code>KeyState keyStates[] = new KeyState[NUM_KEYS];

public class KeyState {
    public boolean down;  // is this key pressed down right now?
    public boolean downTrigger;  // was this key first pressed down during this tick?
    public long downNano;  // nanoTime() that this key went to the down state (valid only if down is true)

    public KeyState()
    {
        down = false;
        downTrigger = false;
    }

    public void pressed()
    {
        down = true;
        downTrigger = true;
        downNano = System.nanoTime();
    }

    public void released()
    {
        down = false;
    }

    public void reset()
    {
        downTrigger = false;
    }
}
</code></pre>

<p>This is more object oriented, though I use the more unusual convention of making member variables public, but with the understanding that they should only be read and not modified outside of the containing class.  The more standard practice would be to make them private (or protected) and have getter functions.</p>

<p>To check if a key is pressed:</p>

<pre><code>   if (keyStates[KeyEvent.VK_W].down)
</code></pre>
    </div>