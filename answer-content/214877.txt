<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Standards</h1>

<p>Follow the PEP8 coding standard.  One violation that immediately is obvious is the lack of a space following a comma.  For example, <code>(row=0, column=1, sticky=E, pady=2, padx=5)</code> is much easier to read.  Use <code>pylint</code> (or similar) to check your code style against the recommended standard.</p>

<h1>Import grouping</h1>

<p>My personal preference is to keep <code>import ...</code> statements together, and <code>from ... import ...</code> statements together, not interleave them.</p>

<h1>Private class members</h1>

<p>"Private" members should be prefixed with an underscore.  Such as <code>self._champ_list</code> and <code>def _scan(self):</code>.  This doesn't actually make them private, but some tools will use the leading underscore as a key to skip generating documentation, not offer the member name in autocomplete, etc.</p>

<h1>Remove useless members</h1>

<p><code>self.randombutton</code> is only used in the constructor; it could just be a local variable, instead of a member.</p>

<h1>Use correct comments</h1>

<p>The <code># layout</code> comment above the <code>Button</code> and <code>Text</code> construction is misleading; it is not doing any layout.</p>

<h1>Self documenting names</h1>

<p>Use understandable names.  I have no idea what <code>LRG</code> is.  Good variable names go a long way towards creating self-documenting code.</p>

<h1>Use Doc-Strings</h1>

<p>Add <code>"""doc-strings"""</code> for files, public classes, public members, and public functions.  Using <code>LRG</code> as a class name could be fine (in may be a common acronym at your company), but adding a doc-string for the class could spell out what the acronym stands for at least once.</p>

<h1>Avoid hard-coded information</h1>

<p>You have hard-coded reading the <code>data/champs.csv</code> file into the constructor.  Consider making it more flexible, such as passing in a filename with that as a default.</p>

<pre><code>class LRG:
    """Literal Random Generator"""

    def __init__(self, master, csv_filename="data/champs.csv"):
        # ...etc...
</code></pre>

<p>Or, move the reading of the data outside of the class, and pass the <code>champ_list</code> in as a constructor argument.  </p>
    </div>