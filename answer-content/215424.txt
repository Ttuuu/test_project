<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I agree with <a href="https://codereview.stackexchange.com/users/42401/peilonrayz">Peilonrayz</a> that you can use a <code>dict</code>, but I would not use it this way. Not because it won't work but because it only works in this specific case.</p>

<pre><code>WIN = {('paper', 'rock'), ('rock', 'scissors'), ('scissors', 'paper')}

def game_outcome(player, computer):
    if player==computer:
        print('Draw. Nobody wins or losses.')
        return 0
    elif (player, computer) in WIN:
        print(f'{player} beats {computer}. You won!')
        return 1
    elif (computer, player) in WIN:
        print(f'{computer} beats {player}. You lost!')
        return -1  
    else:
        raise NotImplementedError(f"no defined rule for '{player}' and '{computer}'")
</code></pre>

<pre><code>&gt;&gt;&gt; game_outcome('paper', 'paper')
Draw. Nobody wins or looses.
0
&gt;&gt;&gt; game_outcome('rock', 'paper')
paper beats rock. You lost!
-1
&gt;&gt;&gt; game_outcome('paper', 'rock')
paper beats rock. You won!
1
</code></pre>

<p>Why is it more generic, because if you want to play <a href="https://www.youtube.com/watch?v=x5Q6-wMx-K8" rel="nofollow noreferrer"><strong>rock-paper-scissor-lizard-spock</strong></a>, you just change the dict to this:</p>

<pre><code>RULES = {
    ('paper', 'rock'): 'covers',
    ('rock', 'scissors'): 'crushes',
    ('rock', 'lizard'): 'crushes',
    ('spock', 'rock'): 'vaporises',
    ('scissors', 'paper'): 'cuts',
    ('lizard', 'paper'): 'eats',
    ('paper', 'spock'): 'disproves',
    ('scissors', 'lizard'): 'decapitates',
    ('spock', 'scissors'): 'smashes',
    ('lizard', 'spock'): 'poisons'
}
def game_outcome(player, computer):
    if player==computer:
        print('Draw. Nobody wins or losses.')
        return 0
    elif (player, computer) in RULES:
        print(f'{player} {RULES[player, computer]} {computer}. You won!')
        return 1
    elif (computer, player) in RULES:
        print(f'{computer} {RULES[computer, player]} {player}. You lost!')
        return -1  
    else:
        raise NotImplementedError(f"no defined rule for '{player}' and '{computer}'")
</code></pre>

<pre><code>&gt;&gt;&gt; game_outcome('paper', 'spock')
paper disproves spock. You won!
1
&gt;&gt;&gt; game_outcome('lizard', 'spock')
lizard poisons spock. You won!
1
&gt;&gt;&gt; game_outcome('lizard', 'scissor')
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "&lt;stdin&gt;", line 12, in game_outcome
NotImplementedError: no defined rule for 'lizard' and 'scissor'
&gt;&gt;&gt; game_outcome('lizard', 'scissors')
scissors decapitates lizard. You lost!
-1
</code></pre>

<p>All this code just to say that <code>{(inputs, ...): output}</code> is generally a good pattern when the mapping between the inputs and the output isn't obvious.</p>
    </div>