<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I don't see any good reason to require that the keys are put in a deque. It feels like clobbering the calling site. Instead Iâ€™d use variable number of arguments to ease usage:</p>

<pre><code>def chained_sort(iterable, *keys):
    if not keys:
        keys = deque([lambda x: x])
    else:
        keys = deque(keys)
    # etc
</code></pre>

<p>Also note:</p>

<ol>
<li>that using a mutable default argument <a href="https://stackoverflow.com/questions/1132941/least-astonishment-and-the-mutable-default-argument">is prone to errors</a>;</li>
<li>the use of <code>snake_case</code> for the function name to conform to <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">PEP8</a>;</li>
<li>it would be a good idea to add a <code>reverse</code> argument to mimic the <code>sorted</code> signature.</li>
</ol>

<hr>

<p>Now I have the feeling that the sorting behaviour of Python already does what you want. No need to extend it. In fact, sorting tuples in Python already uses multiple stages in that it sort on the first element first, then on the second element, then on the third, if any, and so on:</p>

<pre><code>&gt;&gt;&gt; sorted([(1, 2, 3), (4, 5, 6), (1, 1, 1), (2, 2, 2), (4, 4, 4), (2, 1, 2), (2, 1, 0)])
[(1, 1, 1), (1, 2, 3), (2, 1, 0), (2, 1, 2), (2, 2, 2), (4, 4, 4), (4, 5, 6)]
</code></pre>

<p>So you can leverage this behaviour to implement yours: just have the key argument of <code>sorted</code> return a tuple of all the keys for each item, and let Python sort those tuples:</p>

<pre><code>def chained_sort(iterable, *keys, reverse=False):
    if not keys:
        key = None
    else:
        def key(item):
            return tuple(f(item) for f in keys)
    return sorted(iterable, key=key, reverse=reverse)
</code></pre>

<p>Usage being</p>

<pre><code>&gt;&gt;&gt; import operator
&gt;&gt;&gt; a = [{'one': 'foo', 'two': 42}, {'one': 'bar', 'two': 1337}, {'one': 'baz', 'two': 1664}, {'one': 'foo', 'two': 1492}, {'one': 'bar', 'two': 2}, {'one': 'baz', 'two': 0}]
&gt;&gt;&gt; chained_sort(a, operator.itemgetter('one'), lambda x: x['two'] &lt; 1000)
[{'one': 'bar', 'two': 1337}, {'one': 'bar', 'two': 2}, {'one': 'baz', 'two': 1664}, {'one': 'baz', 'two': 0}, {'one': 'foo', 'two': 1492}, {'one': 'foo', 'two': 42}]
</code></pre>

<hr>

<p>Lastly docstrings should come just after the function declaration, not before. Read <a href="https://www.python.org/dev/peps/pep-0257/" rel="nofollow noreferrer">PEP257</a> for indsights.</p>
    </div>