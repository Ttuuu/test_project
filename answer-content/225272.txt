<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<pre><code>    max_heap = []
</code></pre>
</blockquote>

<p>I think the essentially Hungarian naming here is actually fairly helpful, but it would be very useful to have a comment explaining that the library support is only for min heaps, so everything must be negated when pushed or popped.</p>

<hr>

<blockquote>
<pre><code>    # Checking for 2 as prime factor
    if n % 2 == 0:
        heapq.heappush(max_heap, -2)
        # dividing by 2 until n becomes odd
        while n % 2 == 0:
            n = n/2
    # dealing with odd numbers
    for i in range(3,int(sqrt(n)),2):
        if n % i == 0:
            heapq.heappush(max_heap,-1*i)
            while n % i == 0:
                n = n/i
</code></pre>
</blockquote>

<p>Reasonable use of a special case: I see you've given some thought to optimisation.</p>

<p>It's better to use <code>-i</code> than <code>-1*i</code>, and <code>n // i</code> (since you want integer division) than <code>n / i</code>.</p>

<hr>

<blockquote>
<pre><code>    # dealing with case where n is a prime by itself
</code></pre>
</blockquote>

<p>That's open to misinterpretation. Is it talking about the original value of <code>n</code> or the current value? I think I would phrase it</p>

<pre><code>    # if n &gt; 1 here then it's a prime
</code></pre>

<hr>

<blockquote>
<pre><code>    return heapq.heappop(max_heap) * (-1)
</code></pre>
</blockquote>

<p>See previous point about unary minus.</p>

<hr>

<p>I wanted to address minor improvements before addressing the big one. Why use a heap at all? The largest prime is the last prime encountered, and there's no need to store the smaller ones. Removing the heap would make the code simpler and faster.</p>
    </div>