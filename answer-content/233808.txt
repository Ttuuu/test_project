<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The algorithm is non-optimal. While this brute force solution solves the task, it is very slow. It takes <strong>2,435s</strong> to solve both parts of the task while my algorithm takes <strong>0,032s</strong>.</p>
<p>I suggest to construct only suitable numbers (every next digit is greater or equal to previous) from the start, instead of checking all numbers in range. The amount of suitable numbers is small, so it is easy to check them for meeting <strong>part one's</strong> and <strong>part two's</strong> conditions.</p>
<h3>Algorithm:</h3>
<p><strong>My input is "372304-847060"</strong>, so <code>start = 372304</code>, <code>end = 847060</code>.</p>
<p><a href="https://i.stack.imgur.com/IS9or.png" rel="noreferrer"><img src="https://i.stack.imgur.com/IS9or.png" alt="enter image description here"></a></p>
<h3>Implementation:</h3>
<pre><code>#!/usr/bin/python3

from collections import Counter

def find_first_value(number):
    fill_digit = 0
    max_fill_digit_found = False
    new_number = []
    for digit in number:
        digit = int(digit)
        if digit &gt;= fill_digit and not max_fill_digit_found:
            fill_digit = digit
        else:
            max_fill_digit_found = True

        new_number.append(fill_digit)

    return new_number

def find_all_passwords(cur_value, end_value):
    length = len(cur_value)
    # Two lists comparison.
    # The comparison uses lexicographical ordering:
    # first the first two items are compared, and if they differ
    # this determines the outcome of the comparison;
    # if they are equal, the next two items are compared, and so on,
    # until either sequence is exhausted.
    while cur_value &lt; end_value:
        idx = length - 1
        for dgt in range(cur_value[idx], 10):
            cur_value[idx] = dgt
            yield cur_value
            
        while cur_value[idx] == 9 and idx &gt; 0:
            idx -= 1

        fill_dgt = cur_value[idx] + 1
        for i in range(idx, length):
            cur_value[i] = fill_dgt

def part_one(first_value, end_value):
    for val in find_all_passwords(first_value, end_value):
        # If all digits in the list are unique: the len(list) == len(set()).
        # Else at least one digit are repeated.
        if len(set(val)) &lt; len(val):
            yield val

def part_two(first_value, end_value):
    for val in find_all_passwords(first_value, end_value):
        # Counts the occurence of every digit.
        cntr = Counter(val)
        # If the number contains some digit two times.
        if 2 in cntr.values():
            yield val

puzzle_input = "372304-847060"
start, end = puzzle_input.split('-')

first_value = find_first_value(start)
end = list(map(int, end))

print(sum(1 for _ in part_one(first_value.copy(), end)))
print(sum(1 for _ in part_two(first_value.copy(), end)))
</code></pre>
    </div>