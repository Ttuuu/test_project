<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Magic numbers</h2>

<p>You should use constants instead of some hard coded values. Adding a meaningful name to your constants improves the readability of the code.</p>

<h2>Loop conditions</h2>

<p>Instead of picking a huge value for the for loop, you have better alternatives for the end condition of the loop.</p>

<p>This option is similar and makes the intention of the code a little more clear:</p>

<pre><code>for (int num = 2; num &lt; Integer.MAX_VALUE; num++) {
</code></pre>

<p>You want to break the code when you find the n prime number, so you can use this in the condition:</p>

<pre><code>for (int num = 2; counter &lt; 10001; num++) {
</code></pre>

<hr>

<p>To improve the performance, you can add a few changes to the code:</p>

<p>Don't test even numbers. All even numbers are divisible by 2.</p>

<pre><code>for (int factor = 3; factor &lt; num; factor = factor + 2) {
</code></pre>

<p>Don't test if the number is divisible by non-prime numbers. e.g. You don't need to test if a number is divisible by 6 (2x3), you already test with 2 and 3.  </p>

<p>You can keep the prime numbers found so far and reuse them if you need to execute the code multiple times.</p>

<p>Making the code a little more generic, it could be:</p>

<pre><code>public class PrimeFinder {
    // Uses long instead of int to be able to find bigger primes
    List&lt;Long&gt; primes = new ArrayList&lt;&gt;();

    public static void main(String[] args) {
        PrimeFinder finder = new PrimeFinder();
        System.out.println(finder.getPrime(10001));

    }

    public PrimeFinder() {
        // Start with 2 and 3 in the list to make it easy to iterate over odd numbers.
        primes.add(2l);
        primes.add(3l);
    }

    public long getPrime(int position) {
        // If this was calculated previously, return the result.
        if (position &lt;= primes.size()) {
            return primes.get(position - 1);
        }

        // Start the iteration after the last prime in the list. Skipping even numbers.
        int count = primes.size();
        for (long i = primes.get(primes.size() - 1) + 2; count &lt; position; i = i + 2) {
            if (isPrime(i)) {
                count++;
            }
        }   
        return primes.get(primes.size() - 1);
    }

    private boolean isPrime(long number) {
        for (long prime : primes) {
            if (number % prime == 0) {
                return false;
            }
        }
        primes.add(number);
        return true;
    }
}
</code></pre>
    </div>