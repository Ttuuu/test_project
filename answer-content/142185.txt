<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Bug</h3>
<p>Your code assumes that the minimum factor pair out of all factor pairs is best.  For example, if n=36, it chooses 6 from (6,6) instead of 9 from (4,9), 12 from (3,12), or 18 from (2,18) because 6 is the smallest of the <code>max(a,b)</code> factors.</p>
<p>However, this may not give you the optimal solution.  Consider the case n = 60.  Your code finds the following answer:</p>
<pre><code>60 -&gt; 10 -&gt; 5 -&gt; 4 -&gt; 2 -&gt; 1 -&gt; 0 (length 7 chain)
</code></pre>
<p>Note that it chose 10 from (6,10).  The optimal solution is:</p>
<pre><code>60 -&gt; 12 -&gt; 4 -&gt; 2 -&gt; 1 -&gt; 0 (length 6 chain)
</code></pre>
<p>To find this solution, you must consider other factors such as 12 from (5,12).</p>
<h3>Memoization unused</h3>
<p>Your program attempts to use memoization via the <code>map</code> variable, but doesn't utilize <code>map</code> enough.  Given your example of <code>n=300</code>, the function searches through thousands of possibilities without even once writing any result to the <code>map</code> variable until the very end, and then only for <code>map[300]</code>.  What it should do is write the results for each of the factors as it recursively finds the solution for them.  That way you never need to find the answer to the same number twice.</p>
<h3>Faster way</h3>
<p>A faster way would be to solve for each number up to the maximum (1000000).  Then for each query you would just need to look up the answer in the map.  Here is how I would do it:</p>
<pre><code>#include &lt;stdio.h&gt;
#include &lt;math.h&gt;

#define MAX     1000000

int map[MAX+1];

int main(void)
{
    int numCases = 0;
    int i        = 0;
    int n        = 0;
    int sqrt_max = sqrt(MAX);

    // Init map to worst case scenario.
    for (int i=0; i &lt;= MAX; i++)
        map[i] = i;

    // Now, solve for each number.  At each 'i', we know that map[i] is
    // already the best solution.  From 'i', we know that we can reach 'i+1'
    // in one extra step.  We can also reach k*i, because 'i' is a factor
    // of k*i.  But we only need to check k*i up until i*i, because after
    // that, 'i' will be the smaller factor of a factor pair, and we only
    // need to consider the higher factor.
    for (int i=1; i &lt; MAX; i++) {
        int score = map[i] + 1;
        int limit;

        // Handle n-1 case.
        if (map[i+1] &gt; score)
            map[i+1] = score;
        // Handler the k*i case.  We start at 2*i, and go up until i*i, but
        // not more than MAX.
        if (i &gt; sqrt_max)
            limit = MAX;
        else
            limit = i*i;
        for (int j = i+i; j &lt;= limit; j += i) {
            if (map[j] &gt; score)
                map[j] = score;
        }
    }

    // At this point, map contains all the best solutions.
    if (scanf("%d", &amp;numCases) != 1)
        return 1;
    while (numCases-- &gt; 0) {
        scanf("%d", &amp;n);
        printf("%d\n", map[n]);
    }
    return 0;
}
</code></pre>
<p>This program was able to compute all solutions in 0.02 seconds.</p>
    </div>