<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Variable names</h1>

<p>The few keystrokes you save by not having to type digits or permutations in full is not worth it. Just name em <code>digits</code> and <code>permutations</code>. For the import, just import <code>itertools</code> instead of <code>from itertools import permutations as perm</code></p>

<h1>to_int</h1>

<p>To take a sum, <code>reduce</code> is seldom needed. You can explain this logic simpler like :</p>

<p>def to_int(digits):
    return sum(x * 10 ** i for i, x in enumerate(reversed(digits)))</p>

<h1>itertools chain</h1>

<p>instead of having a list and extending it, </p>

<pre><code>perms = []        # stores all possible permutations with the digits of num
for i in range(1, len(digs)+1):
    perms.extend(list(p) for p in set(perm(digs, i)))
</code></pre>

<p>you can use:</p>

<pre><code>permutations = list(
    itertools.chain.from_iterable(
        set(itertools.permutations(digs, i)) for i in range(1, len(digs) + 1)
    )
)
</code></pre>

<p>Even better would be to filter as soon as possible, and use:</p>

<pre><code>permutations = itertools.chain.from_iterable(
    set(
        permutation
        for permutation in itertools.permutations(digits, i)
        if (
            sum(permutation)
            and sum(permutation) % 3 == 0
            and permutation[0] != 0
        )
    )
    for i in range(1, len(digits) + 1)
)
</code></pre>

<p>You don't even need to instantiate the list. The <code>sum(permutation)</code> test checks for a permutation with only 0s. Then the rest becomes a simple:</p>

<pre><code>count = 0
running_max = 0
for permutation in permutations:
    n = to_int(permutation)
    count += 1
    running_max = max(running_max, n)
return count, running_max
</code></pre>

<p>But it turns out you don't need all the permutations on a list</p>

<h1>not needed operations</h1>

<p>Not all operations need to be done on all numbers:</p>

<p>For a given combination of digits:</p>

<ul>
<li>if its sum is not divisible by 3, it can be discarded</li>
<li>it has 1 maximum permutation, which can be easily calculated by <code>sum(x * 10 ** i for i, x in enumerate(sorted(combination)))</code>, so <code>to_int</code> is no longer needed</li>
<li>if there are no <code>0</code>s in it, the number of permutations can be calculated with <a href="https://en.wikipedia.org/wiki/Permutation#Permutations_of_multisets" rel="nofollow noreferrer">this formula</a></li>
<li>if there are <code>0</code>s the simplest will be to generate all the combinations not starting with 0 and counting them:</li>
</ul>

<p>In python, I would do this like this:</p>

<pre><code>import itertools
from collections import Counter
from math import factorial


def powerset(iterable):
    "powerset([1,2,3]) --&gt; () (1,) (2,) (3,) (1,2) (1,3) (2,3) (1,2,3)"
    s = list(iterable)
    return itertools.chain.from_iterable(
        itertools.combinations(s, r) for r in range(len(s) + 1)
    )
</code></pre>

<p>This <a href="https://docs.python.org/3/library/itertools.html#itertools-recipes" rel="nofollow noreferrer">itertools recipe</a> gives all of the combinations for all of the subsets</p>

<pre><code>def product(iterable):
    result = 1
    for i in iterable:
        result *=  i
    return result
</code></pre>

<p>helper method to calculate the product of an iterable</p>

<pre><code>def permutation_count(combination):
    total = sum(combination)
    if total == 0: # all digits are 0
        return 0
    if 0 not in combination:
        counter = Counter(combination)
        return int(
            factorial(total) / product(factorial(i) for i in counter.values())
        )

    return len(
        {
            permutation
            for permutation in itertools.permutations(combination)
            if permutation[0] != 0
        }
    )

def multiples(number):
    digits = map(int, str(number))
    running_count = 0
    running_max = 0
    for combination in powerset(digits):
        if sum(combination) == 0 or sum(combination) % 3:  # not divisible by 3
            continue
        max_combination = sum(x * 10 ** i for i, x in enumerate(sorted(combination)))
        running_max = max(running_max, max_combination)
        running_count += permutation_count(combination)

    return running_count, running_max
</code></pre>
    </div>