<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>View</h2>
<p>It was a lucky choice to implement tic-tac-toa and not e.g. go. With <code>circleOne</code> to <code>circleThreeHundredAndSixtyOne</code> it could get rather lengthy.</p>
<p>You can see what I dislike most. Starting with the <a href="https://stackoverflow.com/a/647746/581205">XML abuse</a>(*), the repetitiveness propagates everywhere.</p>
<p>Maybe FXML allows arrays and loops, which could shorten your XML. But then we get to another point, namely <a href="https://stackoverflow.com/a/646987/581205">XML programing</a>:</p>
<blockquote>
<p>There's only one thing worse than people claiming they program in XML, and that's people who actually program in XML. See ANT for examples.</p>
</blockquote>
<hr>
<p>Your FXML has at least one tiny bug, namely the y-coordinates 99 and 100.</p>
<pre><code>  &lt;Circle fx:id="CircleTwo" fill="WHITE" layoutX="300.0" layoutY="99.0" radius="48.0" stroke="BLACK" strokeType="INSIDE" strokeWidth="8.0" visible="false" /&gt;
  &lt;Circle fx:id="CircleThree" fill="WHITE" layoutX="400.0" layoutY="100.0" radius="48.0" stroke="BLACK" strokeType="INSIDE" strokeWidth="8.0" visible="false" /&gt;
</code></pre>
<hr>
<h2>Model</h2>
<p>You have a view (the FXML), a controller, but no model. A model is something what stores the whole game state and is completely independent of the GUI. Having a model has only advantages</p>
<ul>
<li>testability: You can test if the game logic works automatically.</li>
<li>flexibility: You can save the model in a file, you can send it over network. You can plug in a network player or an AI.</li>
<li><a href="https://en.wikipedia.org/wiki/Separation_of_concerns" rel="noreferrer">Separation of Concerns</a>: The code gets much cleaner.</li>
</ul>
<h2>Controller</h2>
<pre><code> private Circle CircleOne;
</code></pre>
<p>According to Java conventions, variable names start lowercase. I'd go for <code>circle1</code>, as the suffix "One" gives you nothing besides looking better.</p>
<pre><code>private int[] filledSquares = new int[9];
private int[] filledCircles = new int[5];
private int[] filledX = new int[5];
</code></pre>
<p>No idea, what this is about. Why are there just 5 of them? Maybe because of the game taking at most 9 plies, i.e., 5 moves? You should use constants (or comments) making it clear.</p>
<hr>
<pre><code>@FXML
public void handleSquareOneClick(MouseEvent event) {
    this.handleSquareClick(1);
}

...

public void handleSquareClick(int squareNumber) {
    if(!isAlreadySelectedBox(squareNumber) &amp;&amp; this.allowMoves == true) {
        switch(squareNumber) {
            case 1:
                this.showCircleOne();
                break;

....

public void showCircleNine() {
    this.CircleNine.setVisible(true);
}

...

public void showCircleOne() {
    this.CircleOne.setVisible(true);
}

...

public void showXNine() {
    this.XOne.setVisible(true);
}
</code></pre>
<p>So due to the FXML, every single thing is repeated 9 or 18 times. You need 36 trivial methods, a complicated switch and you repeat and repeat and repeat....</p>
<p>Have I said already that the repetitive XML leads to repetitive code?</p>
<p>Have I said already that the repetitive XML leads to repetitive code?</p>
<p>Have I said already that the repetitive XML leads to repetitive code?</p>
<hr>
<p>(*) YMMV, but usually, all these "declarativeness" means actually "verbosity and repetitiveness". IMHO, arrays, loops, and a <a href="http://www.miglayout.com" rel="noreferrer">good layout manager</a> is the way to go. It works for Java FX, too. For tic-tac-toe, <code>GridLayout</code> is surely good enough, see my <a href="https://codereview.stackexchange.com/questions/96015/ultimatoe-1-gui-and-general-game-interfaces">ultimatoe</a>.</p>
<h1>Practical advice</h1>
<p>As you can see, I wouldn't use any FXML. YMMV, but in any case, use arrays, loops, and general methods.</p>
<pre><code>private final Circle[] circles = {circle1, circle2, ..., circle9};
</code></pre>
<p>Replace all the <code>handleSquareXxxClick</code> by</p>
<pre><code>public void handleSquareClick(MouseEvent event) {
     handleSquareClick(circles.indexOf(event.getSource());
}
</code></pre>
<p>(you may need to adapt it a bit to what really is the click source).</p>
<pre><code>public void handleSquareClick(int squareNumber) {
    if(!isAlreadySelectedBox(squareNumber) &amp;&amp; this.allowMoves == true) {
        circles[squareNumber].setVisible(true);
        ...
</code></pre>
<p>I can see I was a bit wrong, there's something like a model, namely <code>filledSquares</code> and <code>filledCircles</code>, but that's more useful for the history than for finding out the current state. Instead of</p>
<pre><code>public boolean isAlreadySelectedBox(int squareNumber) {
    boolean found = false;

    for(int filledSquare : this.filledSquares) {
        if(squareNumber == filledSquare) {
            found = true;
        }
    }

    return found == true;
}
</code></pre>
<p>which btw. could be simplified to</p>
<pre><code>public boolean isAlreadySelectedBox(int squareNumber) {
    for(int filledSquare : this.filledSquares) {
        if(squareNumber == filledSquare) {
            return true;
        }
    }
    return false;
}
</code></pre>
<p>you could have</p>
<pre><code>private final boolean[] squareIsFilled = new boolean[9];
</code></pre>
<p>and set <code>squareIsFilled[squareNumber] = true</code> in <code>handleSquareClick</code>.</p>
<p>Or possibly better, use</p>
<pre><code>enum FieldState {EMPTY, CIRCLE, CROSS}
private final FieldState fieldStates = new FieldState[9];
</code></pre>
<p>to keep all needed information in a single array.</p>
<p><em>Whatever you do, you should aim at making the code less repetitive as in the current state it's hard to see anything.</em></p>
<h2>My personal rules</h2>
<ul>
<li>before copying anything, think about a different solution (that's sometimes hard, but still easier than a later de-duplication)</li>
<li>always make a gui-free part (create a class called <code>Model</code> and put in everything you can)</li>
</ul>
<h2>Example Model</h2>
<pre><code>class Model {
    private int turn;
    private final FieldState fieldStates = new FieldState[9];

    public boolean canPlay(int index) ...
    public void play(int index) ...
    public boolean isDecided() ...
    public FieldState getWinner() ...
}
</code></pre>
    </div>