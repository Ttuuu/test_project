<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You have two unnecessary inner loops in your implementation. I think you could calculate the minimal difference via 2 not nested loops.<br>
You don't need to calculate sums of parts on each iteration via loops, the idea is to modify sums by moving 1 array's element form one part to another on each iteration.<br>
The following approach gives a <a href="https://en.wikipedia.org/wiki/Time_complexity" rel="nofollow">time complexity</a> of \$O(N)\$:</p>

<pre><code>public int solution(int[] A)
{
    int min = Int32.MaxValue;

    // Sum of parts in the initial position:
    int part1 = A[0];
    int part2 = A.Sum() - part1;  // 1st loop
    // Initial position is 1 since parts must be non-empty.
    // Looping should be finished before the last element for the same reason.
    for (int i = 1; i &lt; A.Length - 1; i++)  // 2nd loop
    {
        int a = A[i];
        // Move current element from part2 to part1:
        part1 += a;
        part2 -= a;
        // Find the difference:
        int val = Math.Abs(part1 - part2);
        if (val &lt; min)
        {
            min = val;
            // Early exit condition:
            if (min == 0)
            {
                break;
            }
        }
    }
    return min;
}
</code></pre>

<p><strong>EDIT</strong><br>
Added early exit condition <code>part1 &gt;= part2</code>, thanks to @Heslacher.<br>
<strong>EDIT 2</strong><br>
Removed early exit condition <code>part1 &gt;= part2</code>, since array elements can be negative.<br>
<strong>EDIT 3</strong><br>
Since parts must be non-empty, loop limits should be deflated by <code>1</code>. Thanks again to @Heslacher.</p>
    </div>