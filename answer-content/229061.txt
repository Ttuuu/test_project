<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Since no one else has replied, here's somewhat of a <a href="https://www.dreamincode.net/forums/topic/374098-any-thoughts-on-rubber-duck-code-reviews/" rel="nofollow noreferrer">"rubber duck code review"</a> given that I don't know much about Windows, vt, and NativeCall. Plus I've got a suggestion about the API and module name.</p>

<hr>

<p>It looks like the not-explicitly-initialized <code>$input-mode</code> and <code>$output-mode</code> variables are actually constants implicitly initialized to zero. I think the code would be less confusing if they were declared as constants or even if you used literal <code>0</code>s instead of them. Perhaps other code or configuration you have, or have in mind, will vary these values? Anyhow, at the very least, I think a comment making it clear the values the user passes to <code>vt-on</code> don't alter these, and <code>vt-off</code> is resetting them no matter what <code>vt-on</code> did, would be helpful.</p>

<hr>

<p>From an API perspective, aiui, if one calls <code>vt-on</code> it turns the vt stuff on for both input and output. You have to pass <code>:vt-input(False)</code> if you only want <code>vt-output</code> and vice-versa. And <code>vt-off</code> always turns both off.</p>

<p>To me, having to write <code>vt-input(False)</code> is a bit ugly because:</p>

<ul>
<li><p>It repeats the <code>vt</code>;</p></li>
<li><p>Mentions <code>input</code> when what one is trying to do is control <code>output</code>;</p></li>
<li><p>Requires explicit use of <code>False</code>.</p></li>
</ul>

<p>It seems to me it could be more ergonomic to have just one routine, <code>vt</code>. To switch both input and output on use <code>vt :on</code>. To switch both off use <code>vt :off</code>. To switch just one on and leave the other as it is, use <code>vt :on&lt;input&gt;</code> or <code>vt :on&lt;output&gt;</code>. To switch just one <em>off</em> and leave the other as it is, use <code>vt :off&lt;input&gt;</code> or <code>vt :off&lt;output&gt;</code>.</p>

<p>I've never used vt stuff and could imagine one doesn't need the extra flexibility of the API I suggest but my suggestion is really more about keeping the API sweet than it is about the additional flexibility.</p>

<hr>

<p>As for the module name...</p>

<p>I currently think we should shift all of our emphasis related to module <em>discovery</em> to an assumption of widespread use of global search via keywords, tags, etc. For now that means eg <a href="https://modules.perl6.org/t/TERMINAL" rel="nofollow noreferrer">'terminal' tag search</a> or <a href="https://modules.perl6.org/search/?q=TERMINAL" rel="nofollow noreferrer">'terminal' keyword search</a> but one day there'll surely be search of a module's Pod and other aspects as well. In summary, imo, don't worry about a name's <em>discoverability</em>.</p>

<p>To the degree that a module's name matters, I think it's beyond discoverability. I think the two key things are considering clustering with names already chosen or likely to be chosen by other module authors, and making a name nice in a <code>use</code> statement. For these latter aspects I'd say:</p>

<ul>
<li><p>Consider following <em>accepted hierarchical namespace norms</em> already established for <a href="https://modules.perl6.org/" rel="nofollow noreferrer">modules.perl6.org</a>. But don't sweat it.</p></li>
<li><p>If there are no obvious relevant norms to follow then keep a module name fairly short and sweet. Do you really need bumpy case or hyphens? Do you really need more than one <code>::</code> divider? Then again, don't pick something egregiously short-sighted. You could name it just <code>VT</code> but a module such as yours doesn't warrant such a name.</p></li>
</ul>

<hr>

<p>Other than that the code all makes sense to me and looks fine to me from a pure P6 perspective.</p>
    </div>