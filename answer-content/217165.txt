<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I see a number of things that may help you improve your code.</p>

<h2>Use standard library functions where appropriate</h2>

<p>Except as a learning exercise (which I recognize this probably is), there's little reason to write duplicates of existing, well-tested, well-documented and often highly optimized library functions.  For that reason, in real code, I'd expect <code>strlen()</code> to be used rather than <code>myStrLen()</code>.</p>

<h2>Don't leak memory</h2>

<p>Unlike Java, in C it is the responsibility of the programmer to clean up memory allocations.  For that reason, I'd expect the sample code to have the line <code>free(joined);</code> before the end of <code>main</code>.</p>

<h2>Use <code>const</code> where appropriate</h2>

<p>The <code>delimiter</code> and <code>strArr</code> arguments to <code>awfulJoinStr</code> are not and should not be modified by that function, so it would be better to indicate that fact and change the parameter list to this:</p>

<pre><code>char* awfulJoinStr(const char* delimiter, const char** strArr, size_t nStrings)
</code></pre>

<h2>Consider using a sentinel value</h2>

<p>Generally, there are two ways to tell a function the size of a list.  Either it can be passed explicitly as you do in the current code, or one can use a <em>sentinel value</em> which is simply a special "end of list" marker value.  In this case, I think it might be more convenient to use a sentinel value of <code>NULL</code>.  So your <code>coll</code> could look like this:</p>

<pre><code>const char* coll[] = {"Hello", "World", "This", "Should", "Be", "Joined!", NULL};
</code></pre>

<p>And now the code could look for the special <code>NULL</code> value instead of having to pass a count.</p>

<h2>Check for errors</h2>

<p>The call to <code>malloc</code> could fail.  The <em>only</em> indication you would have of this would be that it would return <code>NULL</code>, so for that reason, you should check for a <code>NULL</code> return from <code>malloc</code> before using the returned pointer or risk having your code crash.</p>

<p>Also, if <code>nStrings</code> is zero, the calculated <code>totalDelimiterSize</code> is huge and the result will certainly not be what you want, even if it doesn't crash.</p>

<h2>Simplify code by knowing the standard well</h2>

<p>The current code includes this line:</p>

<pre><code>char* buffer = malloc(sizeof(char) * bufferSize);
</code></pre>

<p>However, the standard <em>defines</em> <code>sizeof(char)</code> as always being equal to <code>1</code> so this could and should be written like this instead:</p>

<pre><code>char* buffer = malloc(bufferSize);
</code></pre>

<h2>Bail out early on error</h2>

<p>If the parameters to the function are faulty, or if there are no passed strings, it would probably make most sense to bail out early, rather than doing a bunch of work that would ultimately be thrown away.  </p>

<h2>Understand the use of pointers</h2>

<p>A fundamental (but not always easy!) concept in C programming is the <em>pointer</em>.  Understanding how to use pointers effectively is an important skill to learn when mastering C programming.  Examples as applied to this program are shown in the code in the next section.</p>

<h2>Simplify your code by decomposing into functions</h2>

<p>Here's one way to rewrite the function using most of what's suggested above:</p>

<pre><code>char* awfulJoinStr(const char* delimiter, const char** strArr) {
    if (strArr == NULL || delimiter == NULL) {
        return NULL;
    }
    // first calculate the total length of the strings
    size_t bufferSize = 0;
    size_t nStrings = 0;
    for (const char **str = strArr; *str != NULL; ++str) {
        bufferSize += strlen(*str);
        ++nStrings;
    }
    if (nStrings == 0) {
        return NULL;
    }
    size_t delimiterSize = strlen(delimiter);
    bufferSize += (nStrings - 1) * delimiterSize + 1;
    char* buffer = malloc(bufferSize);
    if (buffer == NULL) {
        return NULL;
    }
    buffer[bufferSize - 1] = '\0';
    for (char *curr = scopy(buffer, *strArr++); *strArr; ++strArr) {
        curr = scopy(curr, delimiter);
        curr = scopy(curr, *strArr);
    }
    return buffer;
}
</code></pre>

<p>As you see, the copying is done via a custom string copy function <code>scopy</code>.  We use this instead ofthe standard <code>strcpy</code> because <code>strcpy</code> returns the <em>start</em> of the destination string, but this code requires one past the end instead.  Here's <code>scopy</code>:</p>

<pre><code>char *scopy(char *dest, const char *src) {
    while (*src) {
        *dest++ = *src++;
    }
    return dest;
}
</code></pre>

<p>This short function uses a lot of specialized C knowledge.  First, the passed parameters are both pointers.  We can alter the pointers without necesarily altering what they're pointing to.  Second is the idea of post-increment versus pre-increment.  This line is a very common C idiom:</p>

<pre><code>*dest++ = *src++;
</code></pre>

<p>What it means in English is, in effect, "get the thing that <code>src</code> is pointing to and copy that to wherever <code>dest</code> is pointing; then increment both pointers."  (That's not exactly the sequence of events, but it will suffice to understand the intent of this line.)</p>
    </div>