<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You can at least turn the inner <code>for</code> loop into a list/generator comprehension and use <code>list.extend</code> ("Flat is better than nested"):</p>

<pre><code>def return_dict_as_list(raw_input):
    mylist = []
    for key, values in raw_input.items():
        my_list.extend({'mykey': key, 'myvalue': value} for value in values)
    return mylist
</code></pre>

<p>But you can even turn it into one list comprehension with two <code>for</code> loops in it (and no nested lists):</p>

<pre><code>def return_dict_as_list(raw_input):
    return [{'mykey': key, 'myvalue': value}
            for key in raw_input
            for value in raw_input[key]]
</code></pre>

<p>This will be a bit faster, too, since list comprehensions loop at C speed.</p>

<p>Another approach is to make it a generator:</p>

<pre><code>def to_list_generator(d):
    for key, values in d.items():
        for value in values:
            yield {'mykey': key, 'myvalue': value}
</code></pre>

<p>This makes it a lot easier to see what is happening (depending on your taste). It also means that you don't need to hold the new list in memory but can process one item at a time in some other function.</p>
    </div>