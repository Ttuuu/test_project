<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>For those who dont like <code>typed.js</code>, Modified code for the user code is.</p>

<p>Here,</p>

<ul>
<li><p><code>content</code> -&gt; is the text that shows the typing effect.</p></li>
<li><p><code>speed</code> -&gt;  is the typing effect speed.   <code>i</code>  -&gt; this will help in
iterating over the <code>content</code> till it reaches the <code>content</code> length.  </p></li>
<li><code>timer</code>  -&gt; we use this variable to assign the <code>setTimeout()</code>, so
that after the text content is looped, we can use this variable to
clear timer. This  will prevent memory leakage.  </li>
<li><code>intervalCount</code>  -&gt;
this variable is used to initialise how many times the <code>content</code> need
to toggle.</li>
</ul>

<hr>

<pre><code>const content = 'Code Review'; // text content to show typing effect
const speed = 1000; // this is the typing speed 
var i = 0;  // this is used to iterate over the text content
var timer = 0;  // this is used to set and clear timer. This will prevent memory leakage  
var intervalCount = 0; // this is used to set no. of times typing effect should loop.
</code></pre>

<p>Here initially <code>i</code> will be <code>0</code>, then it checks with the <code>content</code> length. If <code>i &lt; content.length</code>, then it will add <code>content[i]</code> to the dom. After that <code>i</code> is incremented by 1, then a <code>setTimeout()</code> function is called. This will invoke the <code>typeSetting</code> once again, at this time <code>i</code> will <code>1</code> and it will print <code>content[1]</code>. This will loop untill <code>i</code> become the <code>content length</code>.</p>

<p>This condition will iterate over the text content and displays them.</p>

<pre><code>if (i &lt; content.length) {
        el.before(`&lt;span class='typed-letter'&gt;${content[i]}&lt;/span&gt;`);
        i++;
        timer = setTimeout(function() {
          typeSetting(intervalCount)
        }, speed);
      }
</code></pre>

<p>Now the <code>else</code> part, here first it will clear the <code>timer</code> ( Which will prevent the memory leakage ), then it decrement the <code>intervalCount</code>, check for the <code>intervalCount</code> is  <code>&gt; 0</code>, then set <code>i = 0</code> ( this will help in printing the string from begining ). Again in a <code>setTimeout()</code> is called. At this time, the printed content is removed and starts printing again. Again the <code>if</code> loop explained above is executed. This will continue untill the <code>intervalCount</code> becomes <code>0</code>.         </p>

<pre><code>else {
clearTimeout(timer);
intervalCount = intervalCount ? intervalCount - 1 : 0;
if (intervalCount) {
    i = 0;
    timer = setTimeout(function() {
    $(".typed-letter").empty();
    typeSetting(intervalCount);
    }, 300);
}
}      
</code></pre>

<p>For more realistic typing effect, we can add a <code>blinking</code> animation to the <code>|</code>.</p>

<pre><code>.blinking{
    animation:blinkingText 1.2s infinite;
}
@keyframes blinkingText{
    0%{     color: #000;    }
    49%{    color: #000; }
    60%{    color: transparent; }
    99%{    color:transparent;  }
    100%{   color: #000;    }
}
</code></pre>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>const content = 'Code Review';
const speed = 100;
var i = 0;
var timer = 0;
var intervalCount = 0;

function typeSetting(interval) {
  let el = $('#bar');
  if (interval) intervalCount = interval;  
  if (i &lt; content.length) {
    el.before(`&lt;span class='typed-letter'&gt;${content[i]}&lt;/span&gt;`);
    i++;
    timer = setTimeout(function() {
      typeSetting(intervalCount)
    }, speed);
  } else {
    clearTimeout(timer);
    intervalCount = intervalCount ? intervalCount - 1 : 0;
    if (intervalCount) {
      i = 0;
      timer = setTimeout(function() {
        $(".typed-letter").empty();
        typeSetting(intervalCount);
      }, 300);
    }
  }
}

(function() {
  typeSetting(2); // may be you are using some kind of repetition count, set the count. If no params then will show 1 time.
})();</code></pre>
<pre class="snippet-code-css lang-css prettyprint-override"><code>p {
  line-height: 10px;
}
.blinking{
    animation:blinkingText 1.2s infinite;
}
@keyframes blinkingText{
    0%{     color: #000;    }
    49%{    color: #000; }
    60%{    color: transparent; }
    99%{    color:transparent;  }
    100%{   color: #000;    }
}</code></pre>
<pre class="snippet-code-html lang-html prettyprint-override"><code>&lt;script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.0.0/jquery.min.js"&gt;&lt;/script&gt;
&lt;p&gt;&lt;span id="bar" class="blinking"&gt; |&lt;/span&gt;&lt;/p&gt;</code></pre>
</div>
</div>


<p>Here no external packages are used, no libraries. Its pure javascript.</p>
    </div>