<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>DO NOT USE</strong> a raw string and <strong>DO NOT USE</strong> an enum. Move list to a separate table and add a relation between them.</p>

<p>I usually don't like assertions because there are always exceptions. <code>enum</code> (not string) may be appropriate in some circumstances (for example a small or simple application where the approach is <em>code first</em>.) In this case (if your ORM doesn't do it for you) take a look to <a href="https://codereview.stackexchange.com/a/154739/13424">Jim's answer</a>, I think it might be the way to go.</p>

<hr>

<p><strong>Integers</strong> (enums) have some benefits:</p>

<ul>
<li>They're small and index friendly.</li>
<li>They're case insensitive.</li>
<li>City/country can change name.</li>
</ul>

<p>And some drawbacks:</p>

<ul>
<li>They're harder to remember and error-prone.</li>
<li>You need a separate list somewhere to keep track of them.</li>
<li>They do not easily <em>support</em> partial matches.</li>
</ul>

<p><strong>Strings</strong> have these benefits:</p>

<ul>
<li>They're easy to recognize and to use in hand-written queries.</li>
<li>You can search for partial matches.</li>
<li>They're self-contained (no need for a list elsewhere outside DB.)</li>
</ul>

<p>And some serious drawbacks:</p>

<ul>
<li>Your data isn't normalized.</li>
<li>They waste much more space.</li>
<li>To rename a city you have to <em>touch</em> all records, for big databases this is a huge issue.</li>
<li>They can't handle duplicates.</li>
</ul>

<p>The <strong>other solution</strong> is to <em>combine</em> them creating a separate table <code>Location</code> (or <code>City</code> or <code>Country</code>) and simply relate it to your record. This has these benefits:</p>

<ul>
<li>It's easy to change names.</li>
<li>It handles aliases. Don't underestimate this aspect:

<ul>
<li>I'm living in 's-Hertogenbosch which is also called Den Bosch (oh yes, name has both apostrophe and minus sign.)</li>
<li>My wife is Taiwanese, in Italy (where we lived before) we were used to see her country registered as R.O.C., Republic of China, Taiwan, Formosa and few times even China (Taiwan). Sometimes software they used understood Taiwan even if <em>official</em> name they shown was R.O.C.</li>
</ul></li>
<li>It's easy to perform a partial match search or to write an UDF to match similar words (have you ever searched Ikea furniture? Did you type <em>those</em> exact names?)</li>
<li>You can add more information simply adding more columns to that table.</li>
<li>It doesn't waste disk space.</li>
<li>It's index friendly.</li>
<li>It's self-contained. This is more important than what you may think, it's not just for UI but also for many BI reports you can produce without duplicating information (in code and somewhere else.)</li>
</ul>

<p>And one drawback:</p>

<ul>
<li>To write queries is slightly more complicate because of the <code>JOIN</code>.</li>
</ul>

<p>To <strong>summarize</strong>: which are the benefits of strings over a separate table? Nothing I can think about. Integers? They're smaller (but few Kb aren't an issue nowadays, are they?) Benefits? Database integrity, open for changes, customizable (you do not need to recompile your code or to write complex queries to add a new country), more features (partial matches, aliases) and UI/BI.</p>

<hr>

<p>Few notes collected from comments:</p>

<ul>
<li>If you're working with a legacy database the time to do changes is now, not someday in future. If you make your own code bad designed then the cost of the change in future will be even bigger (and it won't happen.)</li>
<li>Older applications can query a view instead of a table.</li>
<li>Countries change name, they split and they merge. Business grows and shrinks.</li>
<li>Don't ever think anything is immutable in real world. Did you have a <code>bit</code> in your table to denote male/female? Bad choice. You moved to an hard-coded enum? Wrong choice because different customers will need different lists...</li>
<li>Be open for changes. In future you might want to add a column for international phone code, a column for a formatting string used for addresses...</li>
<li>Your concern about safety and integrity of integers (which BTW isn't mitigated with strings) come from the basic error: moving database data (the list of available countries) outside the database. Keep it inside it database and database integrity rules will work for you.</li>
</ul>
    </div>