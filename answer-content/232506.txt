<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here are some ideas and observations that may help you improve your code.  There are some good things here, too.  The code uses <code>const</code> appropriately and consistently, which is good.</p>

<h2>Separate input, output and calculation</h2>

<p>To the degree practical it's usually good practice to separate input, output and calculation for programs like this.  By putting them in separate functions, it isolates the particular I/O for your platform (which is likely to be unique to that platform or operating system) from the logic of the simulation (which does not depend on the underlying OS).  For example, right now, <code>is_valid_request()</code> returns a boolean value, but also has a side effect of printing to <code>std::cout</code>.  I'd suggest that a different method might be to either return a number as with many standard library calls, such that 0 means success and non-zero indicates an error.  Which error is determined by the number which then could be printed to the console or displayed in a GUI dialog box.</p>

<h2>Format your code consistently</h2>

<p>It doesn't matter as much what style you use as it matters that you have a consistent style.  Here, the formatting is not too bad, but the different indentation levels are not typical.  For example, I would not indent all of those member function definitions.  Also there is a spurious semicolon after the destructor:</p>

<pre><code>~Elevator() {};
</code></pre>

<h2>Let the compiler create default destructor</h2>

<p>The compiler will create a destructor by default which is essentially identical to what you've got, so you can simply omit both the declaraton and implementation from your code.</p>

<h2>Don't write getters and setters for every class</h2>

<p>C++ isn't Java and writing getter and setter functions for every C++ class is not good style.  Consider these two private member functions, for example:</p>

<pre><code>int get_current_floor() const
{
        return current_floor;
}

void set_current_floor(int floor)
{
        current_floor = floor;
}
</code></pre>

<p>Since there is no error checking or enforcement of invariants here (that is, <code>set_current_floor</code> would happily accept any integer value and doesn't enforce that it must be within the elevator's range), there is no advantage over simply accessing the <code>current_floor</code> data member directly.</p>

<h2>Think of the user</h2>

<p>There is no graceful way to end the program.  Also, there are some strange things such as when we ask to put 1000 people aboard a small elevator.  It would be more sensible from the user's perspective, if they were told immediately that a maximum of <span class="math-container">\$x\$</span> number of requests will be accepted.  That also answers your question about eliminating <code>num_of_reqs</code>: just keep accepting input until either the elevator can't hold any more people <em>or</em> until the user indicates no more input such as by inputting a special <a href="https://en.wikipedia.org/wiki/Sentinel_value" rel="noreferrer">sentinel value</a> that indicates end of data.</p>

<h2>Understand standard containers</h2>

<p>The use of <code>std::vector::emplace_back</code> everywhere in this program is peculiar.  Specifically <code>emplace_back</code> constructs a new object and avoids an extra copy or move versus using <code>push_back</code> which can make a difference with a vector of large or complex objects.  However here, the only vector is of <code>int</code>, so <code>push_back</code> would be much more appropriate.</p>

<h2>Sanitize user input better</h2>

<p>If I enter a string such as "Edward" when asked for the minimum floor number, the program stays in an endless loop.  It would be better to read a (text) line in and then convert it to a number.  Also, there is no check to make sure that <code>max_floor_num</code> is actually greater than <code>min_floor_num</code>.  Users can do funny things and you want your program to be robust.  Even better might be to have the computer also simulate passengers and only print out results.</p>

<h2>Combine stream output operations</h2>

<p>The code currently contains this sequence:</p>

<pre><code>std::cout &lt;&lt; "\n=======================================================\n";
std::cout &lt;&lt; "The current floor is " &lt;&lt; curr_floor &lt;&lt; " and number of person in elevator are " &lt;&lt; curr_capacity &lt;&lt;"\n";
std::cout &lt;&lt; "\nDirection of elevator is " &lt;&lt; dir &lt;&lt; " and Total capacity of the elevator is " &lt;&lt; get_max_capacity() &lt;&lt; "\n";
std::cout &lt;&lt; "\nMinimum floor number is " &lt;&lt; get_min_floor() &lt;&lt; " and Maximum floor number is " &lt;&lt; get_max_floor() &lt;&lt; "\n";
std::cout &lt;&lt; "\n=======================================================\n";
</code></pre>

<p>But you don't really need to do it that way.  Instead it could be written like this:</p>

<pre><code>std::cout &lt;&lt; "\n=======================================================\n"
    "The current floor is " &lt;&lt; curr_floor 
    &lt;&lt; " and number of people in the elevator is " &lt;&lt; curr_capacity 
    &lt;&lt; "\n\nDirection of elevator is " &lt;&lt; dir 
    &lt;&lt; " and Total capacity of the elevator is " &lt;&lt; get_max_capacity() 
    &lt;&lt; "\n\nMinimum floor number is " &lt;&lt; get_min_floor() 
    &lt;&lt; " and Maximum floor number is " &lt;&lt; get_max_floor() 
    &lt;&lt; "\n\n=======================================================\n";
</code></pre>

<p>This makes it more clear it's just one long message sent to <code>std::cout</code> and also uses constant string concatenation because the compiler automatically concatenates the first two string literals together.  As a minor change, I've also changed "number of person in elevator are" to the grammatically correct "number of people in the elevator is".</p>

<h2>Don't Repeat Yourself (DRY)</h2>

<p>The code for <code>set_initial_request()</code> and <code>set_request()</code> is largely the same.  The only differences are that the former also calls <code>set_direction()</code> and insists on getting at least one destination floor number even if the user specifies zero requests.  Instead, I'd suggest that <code>set_direction()</code> could be called outside this function or called every time and that function modified to only change direction if there are no current passengers.</p>

<h2>Use better naming</h2>

<p>The name <code>current_capacity</code> is a bit misleading, since "capacity" means, in English, the maximum amount something can hold.  It also means <code>max_capacity</code> is redundant.  Instead, I'd suggest naming them <code>passengers</code> and <code>capacity</code>.</p>

<h2>Reconsider the constructors</h2>

<p>The <code>Elevator</code> class has two constructors: one with parameters and one without.  I would suggest eliminating the default constructor with no parameters because it would not result in a useful object and there's no way to change the parameters after constructing the <code>Elevator</code>.</p>

<h2>Consider additional refinements and features</h2>

<p>I've already mentioned that it might be nice to have the computer simulate passenger behavior.  Other things to consider are whether <code>UP</code> and <code>DOWN</code> are sufficient.  Elevators typically have two indicator lights, one for "up", and one for "down".  However, both may be off, indicating that the elevator is free to take in either direction.  Also, consider gathering statistics.  How far did the elevator travel in total?  What was the average waiting time for passengers?  What about simulating a bank of elevators?  What if some are express elevators serving, for example, only the lobby and top half of the building?  There are all kinds of interesting things one could do with this concept.</p>
    </div>