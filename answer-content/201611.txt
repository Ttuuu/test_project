<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This assumes that the type being copied has a default constructor.</p>

<pre><code>  auto left = std::make_unique&lt;typename std::iterator_traits&lt;RandomIt&gt;::value_type[]&gt;(left_size);
  auto right = std::make_unique&lt;typename std::iterator_traits&lt;RandomIt&gt;::value_type[]&gt;(right_size);
</code></pre>

<p>If you use <code>std::vector</code> you can use the constructor that takes iterators and create and copy the elements in one go:</p>

<pre><code>  // Replace all this with:
  auto left = std::make_unique&lt;typename std::iterator_traits&lt;RandomIt&gt;::value_type[]&gt;(left_size);
  auto right = std::make_unique&lt;typename std::iterator_traits&lt;RandomIt&gt;::value_type[]&gt;(right_size);

  std::copy(begin, mid, left_begin);
  std::copy(mid, end, right_begin);

 // Replace all the above with.
 using ValueType = std::iterator_traits&lt;RandomIt&gt;::value_type;
 std::vector&lt;ValueType&gt;   leftSide(begin, mid);
 std::vector&lt;ValueType&gt;   rightSide(mid,  end);
</code></pre>

<p>But we are still using a copy.<br>
So lets improve the efficiency with moving the objects.</p>

<pre><code> using ValueType = std::iterator_traits&lt;RandomIt&gt;::value_type;
 std::vector&lt;ValueType&gt;   leftSide(std::make_move_iterator(begin), std::make_move_iterator(mid));
 std::vector&lt;ValueType&gt;   rightSide(std::make_move_iterator(mid),  std::make_move_iterator(end));
</code></pre>

<p>We can also improve the merge part by again using move:</p>

<pre><code>       *arr_iter = std::move(*left_iter);
</code></pre>

<p>But lets reduce the whole expression to make it easier to read:</p>

<pre><code>       ValueType&amp;  lObject = *left_iter;
       ValueType&amp;  rObject = *right_iter;
       auto&amp;       mIter   = (lObject &lt; rObject) ? left_iter : right_iter;
       ValueType&amp;  mObject = *mIter++;
       *arr_iter = std::move(mObject);
</code></pre>

<p>At the end lets make sure we move rather than copy</p>

<pre><code>  // This can be replaced with:
  std::copy(right_iter, right_end, arr_iter);
  std::copy(left_iter, left_end, arr_iter);


  // Move version of copy; called move (no need for move iterators):
  std::move(right_iter, right_end, arr_iter);
  std::move(left_iter, left_end, arr_iter);
</code></pre>

<p>You are making an assumption here (that begin != end)</p>

<pre><code>  if (begin &lt; end - 1) {
</code></pre>

<p>Easier to use:</p>

<pre><code>  if (std::distance(begin, end) &gt; 1) {
</code></pre>

<p>Note:</p>

<p>Your types don't need to be move able to use this. If there is no move semantics associated with the object then copy will be used as a backup automatically. But this way if they are moveable then you will use the move operation,</p>
    </div>