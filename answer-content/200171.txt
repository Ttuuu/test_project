<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I can't agree with the comments about goto and using sub methods.   </p>

<blockquote>
<pre><code>Pixel hole_pixel;
for (int i = 0; i &lt; img.LenX; i++)
    for (int j = 0; j &lt; img.LenY; j++)
    {
        hole_pixel = img.GetArrayElement(i, j);
        if (hole_pixel.Value == -1)
            // while goto statements are not highly approved of, as they create hard-to-read spaghetti code, 
            // this (breaking out of nested loops) is one of the rare cases where they should be used, 
            // as they are more coherent than setting up multiple flags, or using sub-methods that will return. 
            goto Hole_Exists;
    }

// if here - no hole was found, simply return null
return null;

Hole_Exists:
</code></pre>
</blockquote>

<p>It would be much cleaner by implementing a <code>FindHolePixel()</code> method which removes the need for a <code>goto</code> and the 3 lines comment as well, like so  </p>

<p>Assuming <code>img</code> is an <code>ImageMatrix</code> instead of an <code>Image</code>:  </p>

<pre><code>private Pixel FindHolePixel(ImageMatrix imageMatrix)
{
    for (var i = 0; i &lt; imageMatrix.LenX; i++)
    {
        for (var j = 0; j &lt; imageMatrix.LenY; j++)
        {
            Pixel holePixel = imageMatrix.GetArrayElement(i, j);
            if (holePixel.Value == -1)
            {
                return holePixel;
            }
        }
    }
    return null;
}  
</code></pre>

<p>resulting in <code>Trace()</code> looking like so  </p>

<pre><code>public List&lt;Pixel&gt; Trace(ImageMatrix imageMatrix)
{
    Pixel holePixel = FindHolePixel(imageMatrix);
    if (holePixel == null) { return null;}
</code></pre>

<ul>
<li><code>Trace()</code> is a <code>public</code> method. Public methods should always validate their method arguments.  </li>
<li>As you see I have added braces <code>{}</code> althought they might be optional. Omitting braces can lead to hidden and therefor hard to find bugs.  </li>
<li>Based on the <a href="https://msdn.microsoft.com/en-us/library/ms229002.aspx" rel="noreferrer">.NET Naming Guidelines</a> variables should be named using <code>camelCase</code> casing.  </li>
<li>You should think about returning an empty <code>List&lt;Pixel&gt;</code> instead of <code>null</code> if you are just iterating over the <code>List&lt;Pixel&gt;</code>. You wouldn't need a <code>null</code> check after calling <code>Trace()</code>. </li>
</ul>

<hr>

<blockquote>
<pre><code>private Pixel GetNextPixel(Pixel input, IImageMatrix img)
{
    if (input.Yi + 1 &lt; img.LenY)
    {
        return img.GetArrayElement(input.Xi, input.Yi + 1);
    }
    else if (input.Xi + 1 &lt; img.LenX)
    {
        return img.GetArrayElement(input.Xi + 1, 0);
    }
    else
        return null;            
}  
</code></pre>
</blockquote>

<p>The <code>return null;</code> seems dangerous to me because you are using the result without any <code>null</code> check. You may say thats not a problem because this won't happen but have you chaecked all edge cases ? What if your <code>ImageMatrix</code> is one gigantic hole ? Then you would get a <code>NullReferenceException</code> which always looks bad.</p>

<hr>

<blockquote>
<pre><code>// What if hole is in (x,0) ?            
if (hole_pixel.Yi == 0)
{
    var next_pixel = GetNextPixel(hole_pixel, img);
    while (next_pixel.Value == -1)
    {
        hole_pixel = next_pixel;
        next_pixel = GetNextPixel(hole_pixel, img);
    }
    _start = 4;
}
else
    _start = 0;
</code></pre>
</blockquote>

<ul>
<li><p>So what is special about a hole in <code>(x,0)</code> ? Comments should describe <strong>why</strong>  something is done in the way it is. The line <code>if (hole_pixel.Yi == 0)</code> is just doing what your comment says. </p></li>
<li><p>What does <code>_start = 4;</code> mean ? Using a well named constant would make the code easier to read.  </p></li>
<li><p>By first setting <code>_start = 0;</code> you could omit the <code>else</code> part.</p></li>
<li>Whats the meaning/purpose/advantage of <code>i</code> in <code>Pixel.Yi</code> ?  </li>
<li><code>_start</code> is used only inside the <code>Trace()</code> method. Why is it a class level variable ?  </li>
<li>You have <code>holePixel</code> and <code>nextPixel</code>, why don't you have <code>firstPixel</code> instead of <code>first</code>?  </li>
</ul>

<hr>

<blockquote>
<pre><code>// priming the loop
var first = GetClockWisePixel(hole_pixel, img);
Boundary.Add(first);  
</code></pre>
</blockquote>

<p>Here you make the assumption that <code>firstPixel</code> isn't a pixel of the hole but of the boundary. Will this always be true?  </p>
    </div>