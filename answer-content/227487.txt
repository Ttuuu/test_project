<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>As this is a simple text transformation, the regular-expression module <code>re</code> is your friend.</p>

<p>Processing letters one at a time is h-a-r-d.  It would be simpler to process things one word at a time, as suggested by @Carcigenicate.</p>

<p>The <a href="https://docs.python.org/3/library/re.html?highlight=re#re.sub" rel="noreferrer"><code>re.sub(pattern, repl, text, ...)</code></a> function is interesting in that it allows you to specify a string <strong>or a function</strong> for the replacement.  As a first approximation:</p>

<pre><code>import re

def pig_latin(text):

    def transform(match):
        first, rest = match.group(1, 2)
        if first.lower() in "aeiou":
            return first + rest + 'way'
        else:
            return rest + first + 'ay'

    return re.sub(r'(\w)(\w*)', transform, text)

print(pig_latin("Can you read pig latin?"))
</code></pre>

<blockquote>
  <p>anCay ouyay eadray igpay atinlay?</p>
</blockquote>

<p>Here, the regex is extracting entire words with two capturing groups.  The first group is simply the first letter <code>\w</code>, an the second group is the rest of the letters (if any) in the word <code>\w*</code>.  The <code>match</code> is passed to the <code>transform</code> function, from which groups #1 and #2 are extracted and assigned to <code>first</code> and <code>rest</code>.  If the <code>first</code> letter is a vowel, the replacement text is generated one way; if not it is generated a second way.  The returned value is used as the replacement in the <code>re.sub(...)</code> call.</p>

<p>The <code>transform</code> function can easily be modified to include the <code>-</code>, if desired, as well as additional special handling of <code>y</code>, if required.</p>
    </div>