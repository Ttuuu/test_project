<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Algorithm in O(N^2)</h3>

<p>The current solution will be slow for large N, because it has a complexity of O(N^2) (It checks every element in the array for every possible position of the k adjusted elements =&gt; O(N * (N-K)) =&gt; O(N^2)).</p>

<h3>There is an O(N) solution.</h3>

<p>Consider that as the K-element segment "slides" along the array, there are only two elements whose value changes: the one entering and the one leaving the segment.</p>

<p>Something like:</p>

<pre><code>def solution(K, M, A):
    threshold = len(A)//2
    counts = Counter(A)

    # increment count for each element in the initial window
    for head in A[:K]:
        counts[head] -= 1
        counts[head+1] += 1

    # initial leaders
    leaders = set(k for k,v in counts.items() if v &gt; threshold)

    # slide window along the array adjusting the counts for 
    # elements that leave (tail) or enter (head) the window.
    # An element entering gets incremented, so 
    # count[element] -= 1 and count[element+1] += 1.
    # It is the reverse for element leaving.
    for tail, head in zip(A, A[K:]):
        counts[tail] += 1
        counts[tail + 1] -= 1

        counts[head] -= 1
        counts[head + 1] += 1

        if counts[tail] &gt; threshold:
            leaders.add(tail)

        if counts[head + 1] &gt; threshold:
            leaders.add(head + 1)

    return leaders
</code></pre>
    </div>