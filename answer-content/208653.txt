<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>General stuff</h3>

<p>Several explicit type annotations are not needed, such as in </p>

<pre><code>var h: Int64  = offset

if let index: Int = alphabetArray.firstIndex(of: char)

let remainder: Int64 = hash % base
let quotient: Int64 = (hash - remainder)/base
</code></pre>

<h3>Error handling</h3>

<ul>
<li><p>In the initializer:</p>

<p>Throwing an error for illegal parameters is fine, and allows to provide more details about the error than in a failable initializer. I only wonder why <code>offset</code> is required to be strictly positive. Is there any problem with allowing a zero offset?</p></li>
<li><p>In the <code>hash</code> method:</p>

<p>Again, throwing an error for bad input seems fine to me. However: Most hashing method accept arbitrary long input strings. If “overflow” is an error for this very special hasher then I would call just it <code>overflow</code> error instead of <code>exceedsInt64</code>.</p></li>
<li><p>In the <code>reverseHash</code> method:</p>

<p>This is again a special situation for this hasher, most hashing methods are designed in a way to make “dehashing” as computing intensive as possible. Here I would return <code>nil</code> instead of throwing an error if no matching source string is found, meaning “no result.”</p></li>
</ul>

<h3>The overflow checking</h3>

<p>It is not immediately obvious how <code>self.stringLengthLimit</code> is calculated, this calls for an explaining comment. Also I am always a bit suspicious if integer and floating point arithmetic is mixed: A (64-bit) <code>Double</code> has a 53-bit significand precision and cannot store all 64-bit integers precisely.</p>

<p><em>Anyway:</em> Detecting an overflow based on the string length alone cannot work in all cases. Here is an example: With </p>

<pre><code>let base10 = CustomHasher(alphabet: "0123456789", offset: 9, base: 10)
</code></pre>

<p>the hash of "223372036854775807" fits into a 64-bit integer, but your program rejects that input string because its length exceeds <code>stringLengthLimit = 17</code>."223372036854775808" has the same length, but its hash calculation would overflow.</p>

<p>This shows that it is difficult to detect the overflow in advance. As an alternative, one could use the “overflow-reporting methods” for multiplication and addition. This is more code (and not nice to read) but detects overflow reliably:</p>

<pre><code>guard let index = alphabetArray.firstIndex(of: char) else {
    throw HashingError.outOfAlphabet(alphabet)
}
guard
    case let r1 = h.multipliedReportingOverflow(by: base), !r1.overflow,
    case let r2 = r1.partialValue.addingReportingOverflow(Int64(index)), !r2.overflow
    else {
        throw HashingError.exceedsInt64
}
h = r2.partialValue
</code></pre>

<p>Of course these thoughts apply only to your special hasher. Usually one would accept arbitrary input, using (for example) <code>&amp;+</code> and <code>&amp;*</code> for addition and multiplication with automatic “wrap around.”</p>

<h3>Simplifications</h3>

<p>There is not very much to say, the code is written clearly. You store the given alphabet both as the original string and as an array of characters, but later use only the array.</p>

<p>The second line in </p>

<pre><code>let remainder = hash % base
let quotient = (hash - remainder)/base
</code></pre>

<p>can be simplified to </p>

<pre><code>let quotient = hash/base
</code></pre>

<p>You can also compute both quotient and remainder with a call to the BSD library function <a href="https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man3/lldiv.3.html" rel="nofollow noreferrer"><code>lldiv</code></a></p>

<pre><code>let remQuot = lldiv(hash, base)
</code></pre>

<p>but I doubt that it would be faster.</p>

<p>The recursion in the dehasher could be replaced by an iteration, that would allow to <em>append</em> to the result string, and only reverse once, instead of prepending characters to a string repeatedly:</p>

<pre><code>var hash = hash
var result = ""
while hash &gt; offset {
    let remainder = hash % base
    hash = hash / base
    let index = Int(truncatingIfNeeded: remainder)
    guard index &lt; alphabetArray.count else {
        return nil
    }
    result.append(alphabetArray[index])
}
return hash &lt; 0 ? nil : String(result.reversed())
</code></pre>

<p>But since the number of recursions/iterations is quite limited it probably won't make much of a difference, and you can choose what you find more natural.</p>

<h3>Naming</h3>

<p><code>CustomHasher</code> does not tell anything about the type. I am not good in finding names, perhaps <code>TrelloHasher</code> if you want to emphasize where it comes from, or <code>MultAddHasher</code> ... naming is difficult (and subjective)!</p>

<p>Possible alternative method names would be</p>

<pre><code>func hash(of s: String) {}
func string(for hash: Int64) {}
</code></pre>
    </div>