<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First of all I want to mention that I used Swift 4.2/Xcode 10.1 to write this answer.</p>

<p>You should have this <code>extension</code> in your project, <code>count(of:)</code> returns count of elements in a sequence that fit to your statement:</p>

<pre><code>extension Sequence {
    func count(where predicate: (Element) -&gt; Bool) -&gt; Int {
        return reduce(0) { currentResult, currentItem in
            return currentResult + (predicate(currentItem) ? 1 : 0)
        }
    }
}
</code></pre>

<p>As far as I can see in your code, <code>MatematicalExpression</code> and <code>Image_Contry</code> are very similar. You can declare a protocol that demonstrates this feature:</p>

<pre><code>protocol AnswerDataProvider {
    var answer: String { get }
    var playerCorectlyAnswered: Bool { get }
}
</code></pre>

<p><code>MatematicalExpression</code> and <code>Image_Contry</code> should implement this protocol:</p>

<pre><code>extension MatematicalExpression: AnswerDataProvider { }

extension Image_Contry: AnswerDataProvider { }
</code></pre>

<p>With this <code>extension</code> you can easily get count of correct answers:</p>

<pre><code>extension Sequence where Element: AnswerDataProvider {
    var countOfCorrectAnswers: Int {
        return count { $0.playerCorectlyAnswered }
    }
}
</code></pre>

<p>You have a lot of similar strings, use this <code>enum</code> to solve the problem:</p>

<pre><code>enum Comment {
    case stupid
    case belowAverage
    case average
    case aboveAverage
    case genius

    var translation: String {
        switch self {
        case .stupid:
            return "Stupide"
        case .belowAverage:
            return "Dans la moyenne"
        case .average:
            return "In the averge"
        case .aboveAverage:
            return "Au dessu de la moyenne"
        case .genius:
            return "GÃ©nie"
        }
    }
}
</code></pre>

<p>With this <code>enum</code> you will have only 1 property for <code>matematicalAnswers</code> and <code>contryAnswers</code> in <code>ResultViewController</code>:</p>

<pre><code>enum Answers {
    case matematical([MatematicalExpression])
    case country([Image_Contry])
}
</code></pre>

<p>I guess these functions can help you to solve different problems:</p>

<pre><code>extension Answers {
    var countOfAllAnswers: Int {
        switch self {
        case .matematical(let matematicalExpressions):
            return matematicalExpressions.count
        case .country(let contryAnswers):
            return contryAnswers.count
        }
    }

    var countOfCorrectAnswers: Int {
        switch self {
        case .matematical(let matematicalExpressions):
            return matematicalExpressions.countOfCorrectAnswers
        case .country(let contryAnswers):
            return contryAnswers.countOfCorrectAnswers
        }
    }

    var goodAnswerPercentage: Double {
        return Double(countOfCorrectAnswers)/Double(countOfAllAnswers)
    }

    var percentageWithComments: [(Double, Comment)] {
        switch self {
        case .matematical:
            return [
                (0.0, .stupid),
                (0.25, .belowAverage),
                (0.5, .average),
                (0.75, .aboveAverage),
                (1.0, .genius)
            ]
        case .country:
            return [
                (0.0, .stupid),
                (0.25, .belowAverage),
                (0.5, .aboveAverage),
                (1.0, .genius)
            ]
        }
    }

    var result: String {
        let goodAnswerPercentageValue = goodAnswerPercentage
        return percentageWithComments.reversed().first {
            return goodAnswerPercentageValue &gt;= $0.0
        }?.1.translation ?? ""
    }

    var quizResult: QuizResult {
        let type: String
        switch self {
        case .matematical:
            type = "Matematical Quiz"
        case .country:
            type = "Contry Quiz"
        }
        return QuizResult(quizType: type, result: result)
    }
}
</code></pre>

<p>In such case <code>ResultViewController</code> will be shorter:</p>

<pre><code>class ResultViewController: UIViewController {

    var answers: Answers?
    var goodAnswersNumber: Double {
        return Double(answers?.countOfCorrectAnswers ?? 0)
    }

    var result: String {
        return answers?.result ?? ""
    }

    var quizResult: QuizResult {
        return answers?.quizResult ?? QuizResult(quizType: "", result: result)
    }

    //Other functions and properties
}
</code></pre>

<p>You can try to refactor other controllers with the similar protocols and enums.</p>
    </div>