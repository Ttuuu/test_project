<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your code does indeed run forever. Regrettably you don't describe the method you're using, so I will have to get that from your code.</p>

<ol>
<li>You start by getting all possible substring, of all possible sizes, out of the given input string and you store those substrings, its letters and position in an array.</li>
<li>You do a <strong>full matrix</strong> comparison of each array entry. You test if something is an anagram or not. If it is you store it in a second array.</li>
<li>You count what you stored in the second array.</li>
</ol>

<p>Somewhere along the way you lost me there. Why all the complexity? You started out well, by getting all possible substrings, but after that it became somewhat messy. A <strong>full matrix</strong> comparison is certainly not needed. I'll explain.</p>

<p>What are we trying to accomplish here? Let's analyse the problem, taking the simply case of <code>'abba'</code>. The possible substrings are <code>'a','b','b','a'</code>, <code>'ab','bb','ba'</code> and <code>'abb','bba'</code>. nine in total, let's number them 1 to 9. </p>

<p>A full matrix comparison would make 9 x 9 = 81 comparisons. But it is obvious that this would compare the same substrings twice. Comparing 2 to 5 is the same as comparing 5 to 2. So we can leave out at least half of these comparisons, cutting the time we need to do this in half. We also don't need to compare two strings of unequal length, so we won't. </p>

<p>So, in the case of <code>'abba'</code> we have 3 sets we need to compare. For the 1 character set we have to do 6 comparisons, for the 2 character set 3, and for 3 character set 1. That's a total of 10 comparisons where you did 81. This number gets proportionally lower when the size of the input string increases. It is here where we can gain most of our speed.</p>

<p>Finally we get to the comparison itself. Suppose we want to compare <code>'ab'</code> to <code>'ba'</code>. By sorting the characters in both strings we can simply compare them. If they are equal that the strings must be an anagram, and must be counted. This is what you do as well.</p>

<p>So now we know what we will need: We need all possible sorted substrings and perform only the needed comparisons.</p>

<p>In basic Javascript code that would look like this:</p>

<pre><code>function sherlockAndAnagrams(s) {
    var anagrams = 0;
    for (var len = 1; len &lt; s.length; len++) {
        var parts = [];
        for (var pos = 0; pos &lt;= s.length - len; pos++) {
            var part = s.substr(pos, len);
            parts.push(part.split('').sort().join(''));
        }
        for (var index1 = 0; index1 &lt; parts.length; index1++) {
            var part1 = parts[index1];
            for (var index2 = index1 + 1; index2 &lt; parts.length; index2++) {
                var part2 = parts[index2];
                if (part1 == part2) anagrams++;
            }
        }
    }
    return anagrams;
}
</code></pre>

<p>Notice how the outer loop goes through all the possible lengths of the substring. By working with one length of string, each time, I will never have to compare two differently sized strings.</p>

<p>The way I build the initial array with substrings looks very similar to what you have, but I only store the sorted substrings. That's all that is needed. By sorting the characters in the substring at this stage I save time.</p>

<p>The comparison of the substrings of one length is now quite simple. Notice how <code>index2</code> starts at <code>index1 + 1</code>, preventing a full matrix comparison of the subset.</p>

<p>And that's it.</p>

<p>So, the major lesson here is to try to reduce the number of comparisons you have to make by <strong>first</strong> carefully analysing the problem. For an input string of 4 characters you did 81 comparisons, I do 10 (12%). If the input is 16 characters long this goes to 18,225 and 680 (4%), 32 characters gives 277,729 and 5,456 (2%). You can see where that is going. Almost all these coding challenges, for which basic solutions run too long, require such a careful analysis. They don't require fancy programming.</p>
    </div>