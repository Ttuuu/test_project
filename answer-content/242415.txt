<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><p>Python has a standardized style guide called <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">PEP 8</a>. There is also <a href="https://google.github.io/styleguide/pyguide.html" rel="nofollow noreferrer">Google's Python style guide</a> which AFAIK is very similar to PEP 8.</p>

<p>Any code that goes largely against PEP 8 normally doesn't look Pythonic.</p>

<ul>
<li><p>Python has a naming scheme to allow developers to know the variables type by it's name only.</p>

<ul>
<li>Classes are in <code>CamelCase</code>,</li>
<li>Functions, methods and variables are in <code>snake_case</code>, and</li>
<li>Constants are in <code>UPPER_SNAKE_CASE</code>.</li>
</ul></li>
<li><p>There should be a single space after commas.</p></li>
<li>Lines should be limited to 79 characters.</li>
<li>There should be one space between all methods, and two between top level classes and functions.</li>
</ul>

<p>Overall your code adheres to these standards pretty well. Good job.</p></li>
<li><p><code>class Agent(object)</code> is a relic from Python 2. In Python 2 classes didn't inherit from <code>object</code> by default. These are now called old style classes. However in Python 3 everything inherits from <code>object</code> by default - making all classes in Python 3 new style classes.</p></li>
<li><p>Your code would benefit from another class.</p>

<p>I'm reluctant to suggest this as the code has an over-reliance on global variables. In the future you should try to solve the problem without globals and then see if it can be made cleaner by using a class.</p>

<p>And so we can make a <code>Simulation</code> class. I would include all the global functions you have in it except <code>initialize</code>.</p></li>
<li>I would use an <code>if __name__ == "__main__":</code> guard to prevent your code from running if it's been imported accidentally.</li>
</ul>

<p>This gets the following. There's some more changes that can be made, but the base of your code is good.</p>

<pre class="lang-py prettyprint-override"><code>class Agent:
    def __init__(self, identification, productivity, wealth, preferences, age, health, alive, sex):
        self.identification = identification
        self.productivity = productivity
        self.wealth = wealth
        self.preferences = preferences
        self.age = age
        self.health = health
        self.alive = alive
        self.sex = sex

    def description(self):
        print("My id is", self.identification)
        print("My age is", self.age)


class Simulation:
    def __init__(self):
        self.alive = []
        self.dead = []
        self._id = 0
        self.year = 0

    def create_agent(self):
        self.alive.append(Agent(self._id, 100, 20, "blue", 30, 0, True, True))
        self._id += 1

    def deaths(self):
        for agent in self.alive.copy():
            if agent.age &gt; 30:
                agent.alive = False
                print("Death of", agent.identification)
                self.dead.append(agent)
                self.alive.remove(agent)

    def time_skip(self):
        print("%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%SKIPPING TIME%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%")
        self.year += 1
        print("The new year is", self.year)
        for agent in self.alive:
            agent.age += 1
        self.create_agent()
        self.deaths()

if __name__ == '__main__':
    simulation = Simulation()
    for _ in range(3):
        simulation.create_agent()

    # Testing
    for agent in simulation.alive: 
        agent.description()

    simulation.time_skip()

    for agent in simulation.alive: 
        agent.description()
</code></pre>
    </div>