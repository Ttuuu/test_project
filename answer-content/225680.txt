<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This looks good overall. For the code review, I'll start with general comments and then try to get into smaller details.</p>

<p><strong>Documentation</strong></p>

<p>Documentating the code looks like an easy task but doing it properly so that it actually adds interesting information without adding too much noise can be pretty hard.</p>

<p>Let's see what could be improved here.</p>

<p>For a start, you do not need to write the comments in upper case. it actually makes things harder to read.</p>

<p>In order to document a module, a class, a function, a method, you can use docstrings. You'll find more details about this in <a href="https://www.python.org/dev/peps/pep-0257/" rel="noreferrer">PEP 257 -- Docstring Conventions</a>.</p>

<p>As you document the code, a pretty common tip is to say that <a href="https://blog.codinghorror.com/code-tells-you-how-comments-tell-you-why/" rel="noreferrer">Code Tells You How, Comments Tell You Why</a>.</p>

<p>Here are a few instances:</p>

<ul>
<li><code># DEFINING THE TEAM CLASS</code> tells you nothing that the code does not show. Having a docstring explaining the point of the Team class whould be more helpful.</li>
<li><code># INITIALISING ALL OF THE TEAMS - NAMES AND SKILL LEVELS</code> - here again, we can easily see that this is initialising teams.</li>
</ul>

<p><strong>Style</strong></p>

<p>Python has a <a href="https://www.python.org/dev/peps/pep-0008/" rel="noreferrer">Style Guide called PEP 8</a>. It could be a good idea to read it and try to see what could be applied to your code. A good example to start with could be the variable names.</p>

<p>You'll find various tools online to check your code compliancy to PEP 8 and/or to fix it.</p>

<p><strong>Code organisation</strong></p>

<p>It is good practice to split the definitions from your code such as functions and classes from the part of your code actually doing something when the script is called with <a href="https://stackoverflow.com/questions/419163/what-does-if-name-main-do">an <code>if __name__ == "__main__":</code> guard</a>.</p>

<p>This helps for the re-usability of your code (and also makes the organisation clearer/more conventional).</p>

<p><strong>Improving <code>home_score</code> &amp; <code>away_score</code></strong></p>

<p>These 2 functions are complicated, pretty long and fairly similar.
For all these reasons, there is probably something we can improve in them.</p>

<p>For a start, we could rename <code>z</code> into <code>x</code> to make the 2 functions even more similar and be able to see what differs from one to another.</p>

<p>Same for <code>lambAway</code> and <code>lambHome</code> renamed into <code>lamb</code>.</p>

<p><em>(Disclaimer: nothing here has been even remotely tested)</em></p>

<p>At this stage, we have:</p>

<pre><code>
def home_score(home, away):
    homeSkill = home.skill / 3
    awaySkill = away.skill / 3

    if homeSkill == awaySkill:
        raise ValueError

    if homeSkill &gt; awaySkill:
        goals = 0
        lamb = higher ** (homeSkill - awaySkill)
        x = random.random()
        while x &gt; 0:
            x = x - (((lamb ** goals) * math.exp(-1 * lamb)) / math.factorial(goals))
            goals += 1
        return (goals - 1)

    if homeSkill &lt; awaySkill:
        goals = 0
        lamb = higher ** (homeSkill - awaySkill)
        x = random.random()
        while x &gt; 0:
            x = x - (((lamb ** goals) * math.exp(-1 * lamb)) / math.factorial(goals))
            goals += 1

        return (goals - 1)

def away_score(home, away):
    homeSkill = home.skill / 3
    awaySkill = away.skill / 3

    if homeSkill == awaySkill:
        raise ValueError

    if awaySkill &gt; homeSkill:
        goals = 0
        lamb = lower ** (homeSkill - awaySkill)
        x = random.random()
        while x &gt; 0:
           x = x - (((lamb ** goals) * math.exp(-1 * lamb)) / math.factorial(goals))
           goals += 1
        return (goals - 1)

    if awaySkill &lt; homeSkill:
        goals = 0
        lamb = lower ** (homeSkill - awaySkill)
        x = random.random()
        while x &gt; 0:
           x = x - (((lamb ** goals) * math.exp(-1 * lamb)) / math.factorial(goals))
           goals += 1
        return (goals - 1)

</code></pre>

<p>which is not really that much better.</p>

<p>Trying to factorise out the common parts from the <code>if homeSkill &gt; awaySkill</code> and <code>if homeSkill &lt; awaySkill</code>, it looks like we could have:</p>

<pre><code>def home_score(home, away):
    homeSkill = home.skill / 3
    awaySkill = away.skill / 3

    if homeSkill == awaySkill:
        raise ValueError

    goals = 0
    lamb = higher ** (homeSkill - awaySkill)
    x = random.random()
    while x &gt; 0:
        x = x - (((lamb ** goals) * math.exp(-1 * lamb)) / math.factorial(goals))
        goals += 1
    return (goals - 1)


def away_score(home, away):
    homeSkill = home.skill / 3
    awaySkill = away.skill / 3

    if homeSkill == awaySkill:
        raise ValueError

    goals = 0
    lamb = lower ** (homeSkill - awaySkill)
    x = random.random()
    while x &gt; 0:
       x = x - (((lamb ** goals) * math.exp(-1 * lamb)) / math.factorial(goals))
       goals += 1
    return (goals - 1)
</code></pre>

<p>But we could go further and extract the common parts of the function in a different function:</p>

<pre><code>def home_score(home, away):
    return generate_random_score(home.skill / 3, away.skill / 3, higher)

def away_score(home, away):
    return generate_random_score(home.skill / 3, away.skill / 3, lower)

def generate_random_score(home_skill, away_skill, param):
    if home_skill == away_skill:
        raise ValueError

    goals = 0
    lamb = param ** (home_skill - away_skill)
    x = random.random()
    while x &gt; 0:
       x = x - (((lamb ** goals) * math.exp(-1 * lamb)) / math.factorial(goals))
       goals += 1
    return (goals - 1)
</code></pre>

<p>It looks pretty good so far but we can still improve details.</p>

<p>For a start, it is clear now that <code>lower</code> and <code>higher</code> are not such great names. Maybe something mentionning <code>home</code> and <code>away</code> would be better.</p>

<p>Also, maybe the 2 methods do not really correspond to what you want: what you usually want is to simulate a full game and not just the score for a team. You could define a function returning a tuple:</p>

<pre><code>def generate_random_score(home, away):
    delta_skill = (home - away) / 3
    return (generate_random_goal_number(delta_skill, higher), generate_random_goal_number(delta_skill, lower))


def generate_random_goal_number(delta_skill, param):
    if delta_skill == 0:
        raise ValueError

    goals = 0
    lamb = param ** delta_skill
    x = random.random()
    while x &gt; 0:
       x = x - (((lamb ** goals) * math.exp(-1 * lamb)) / math.factorial(goals))
       goals += 1
    return (goals - 1)
</code></pre>

<p>A tiny improvement could be to rewrite:</p>

<pre><code>x = x - long_expression
</code></pre>

<p>as:</p>

<pre><code>x -= long_expression
</code></pre>

<p><strong>Settings for the league</strong></p>

<p>Havnig "league_size = 20" is a bit obscure and easy to break. You probably should have <code>league_size = len(teams)</code>.</p>

<p>Also, in order to initialise the different arrays, you could have something like:</p>

<pre><code>  GOALS_AGAINST = [0] * league_size
</code></pre>

<p>Finally, the team list could be initialised directly without defining so many variables that won't get reused.</p>

<p>You could write:</p>

<pre><code>teams = [
    Team("Arsenal", 16),
    Team("Aston Villa", 6),
    Team("AFC Bournemouth", 8),
...
]
</code></pre>

<p><strong>More code organisation</strong></p>

<p>At the moment, you keep tracks of the stats for the teams in the class instances and in separate lists.</p>

<p>It would probably make sense to define a function/method <code>simulate_game</code> taking 2 teams as parameters and that would take care of generating a score and updating the team stats accordingly.</p>

<p>By the way, you do not necessarly need to keep track of the points. You could define a method in the <code>Team</code> objects to compute it on demand from the other statistics.</p>

<p><strong>Special tip</strong></p>

<p>I've said many things and there are still many things to say.</p>

<p>For learning purposes (and because I may have gotten things wrong in a few places), it could be a good idea to try to perform the changes described on your side.</p>

<p>Also, when random elements are involved, it can be hard to detect when you break something. My suggestion would be to initialise the random number generator with your favorite seed (for instance <code>random.seed(42)</code>), run your script, save the output and then keep that seed during your developments. If everything goes fine, the output should stay the same.</p>

<p>It does NOT exactly mean that:</p>

<ul>
<li><p>it the output stays the same, nothing got broken</p></li>
<li><p>if the output changes, something got broken</p></li>
</ul>

<p>but it does help to give you some confidence as you go.</p>

<hr>

<p>Here is the updated version of the code based on the comments above and more:</p>

<pre><code>import math
import random

random.seed(42)  # Removing randomness

class Team:
    def __init__(self, name, skill):
        self.name = name
        self.skill = skill
        self.points = self.gf = self.ga = self.wins = self.draws = self.losses = 0


def generate_random_score(home, away):
    param_home = 1.148698355
    param_away = 0.8705505633
    delta_skill = (home.skill / 3 - away.skill / 3)
    return (generate_random_number_of_goals(delta_skill, param_home),
            generate_random_number_of_goals(delta_skill, param_away))


def generate_random_number_of_goals(delta_skill, param):
    if delta_skill == 0:
        raise ValueError
    goals = 0
    lamb = param ** delta_skill
    x = random.random()
    while x &gt; 0:
       x = x - (((lamb ** goals) * math.exp(-1 * lamb)) / math.factorial(goals))
       goals += 1
    return (goals - 1)


def simulate_league(teams):
    """Play all teams against each other and update statistics."""
    for home_team in teams:
        print("========================================")
        print(home_team.name + "'s home games: ")
        print("========================================")
        for away_team in teams:
            if home_team != away_team:
                home_score, away_score = generate_random_score(home_team, away_team)
                print(home_team.name, home_score, ":", away_score, away_team.name)
                home_team.gf += home_score
                away_team.gf += away_score
                home_team.ga += away_score
                away_team.ga += home_score
                if home_score == away_score:
                    home_team.draws += 1
                    away_team.draws += 1
                    home_team.points += 1
                    away_team.points += 1
                else:
                    winning, losing = (home_team, away_team) if (home_score &gt; away_score) else (away_team, home_team)
                    winning.wins += 1
                    winning.points += 3
                    losing.losses += 1


if __name__ == "__main__":
    teams = [
        Team("Arsenal", 16),
        Team("Aston Villa", 6),
        Team("AFC Bournemouth", 8),
        Team("Brighton and Hove Albion", 5),
        Team("Burnley", 4),
        Team("Chelsea", 17),
        Team("Crystal Palace", 11),
        Team("Everton", 14),
        Team("Leicester City", 12),
        Team("Liverpool", 19),
        Team("Manchester City", 20),
        Team("Manchester United", 15),
        Team("Newcastle United", 3),
        Team("Norwich City", 2),
        Team("Sheffield United", 1),
        Team("Southampton", 7),
        Team("Tottenham Hotspur", 18),
        Team("Watford", 9),
        Team("West Ham United", 10),
        Team("Wolverhampton Wanderers", 13),
    ]

    for team in teams:
        print(team.name, team.skill)

    simulate_league(teams)

    # printing the final league table
    print("| TEAM                      | POINTS | WINS | DRAWS | LOSSES | GOALS FOR | GOALS AGAINST |")
    for team in sorted(teams, key=lambda t: t.points, reverse=True):
        print("|",team.name.ljust(25),"|",str(team.points).ljust(6),"|",str(team.wins).ljust(4),"|",
              str(team.draws).ljust(5),"|",str(team.losses).ljust(6),"|",str(team.gf).ljust(9),"|",
              str(team.ga).ljust(13),"|")

</code></pre>
    </div>