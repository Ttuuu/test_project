<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here are some tips based on pure code-style, including some jQuery tips, personal preferences and JavaScript best practices I am aware of:</p>

<ul>
<li><strong>don't use anonymous functions</strong></li>
</ul>

<p>Code like this <code>$(document).ready(function () { /* ... */ });</code> or this <code>setInterval(function () { /* ... */ }, delay);</code> use anonymous functions. I prefer to use function declaration (or at least named function) to help during code debugging, and to help reuse functions. Also, in a general way, I find that using named functions help you architecture your code in a better way and avoid the spaghetti code. What about something like this:</p>

<pre><code>function onDocReady () { setInterval(timerFired, delay); }
function timerFired () { /* ... */ }

$(document).ready(onDocReady);
</code></pre>

<p>An "hybrid" solution could have been this:</p>

<pre><code>function timerFired () { /* ... */ }

$(document).ready(function onDocReady () { // notice that this function has a name
    setInterval(timerFired, delay);
});
</code></pre>

<p>I find this much more readable than the code below, and it avoids callback-hell code:</p>

<pre><code>$(document).ready(function () {
    setInterval(function () {
        // ...
    }, delay);
});
</code></pre>

<p>You can read Angus Croll post about this: <a href="https://javascriptweblog.wordpress.com/2010/07/06/function-declarations-vs-function-expressions/" rel="nofollow noreferrer">https://javascriptweblog.wordpress.com/2010/07/06/function-declarations-vs-function-expressions/</a></p>

<ul>
<li><strong>don't use <code>jQuery.ready</code> when you don't need it</strong></li>
</ul>

<p>In most situations, jQuery <code>ready</code> event is not needed. I have explained it in another stackoverflow post so you can read it <a href="https://stackoverflow.com/a/10649961/1575353">here</a>. In your case, I assume you're in the situation "FOUR" and so you can almost safely switch to situation "THREE" and remove the <code>jQuery.ready</code> call.</p>

<ul>
<li><strong>avoid <code>setInterval</code></strong></li>
</ul>

<p><code>setInterval</code> should be used with huge caution. Basically, <code>setInterval</code> ignores errors and network latency, so it might be harmful. Also, if the time of execution of the "intervalled" function is longer than the delay, your browser may have hard time handling this. The equivalent of this code <code>setInterval(timerFired, delay);</code> is the following, using safer <code>setTimeout</code>:</p>

<pre><code>function timerFired () {
    /* do work */
    setTimeout(timerFired, delay);
}
timerFired();
</code></pre>

<p>You can read more about this here, with some demos: <a href="http://zetafleet.com/blog/why-i-consider-setinterval-harmful" rel="nofollow noreferrer">http://zetafleet.com/blog/why-i-consider-setinterval-harmful</a></p>

<ul>
<li><strong>be careful with relative path</strong></li>
</ul>

<p>In this code <code>$.getJSON("../../../UpdatedData/QC/QC.json", fn)</code>, be careful with relative path, maybe one day you'll want to change the location of your JavaScript file and it won't work anymore because of this. Maybe you can have all your "config" values like this grouped in the top of the file, something like this:</p>

<pre><code>var myConfig = {
    urlBulk: '/QcT/bulk',
    urlQC: '../../../UpdatedData/QC/QC.json'
};

$.ajax({url: myConfig.urlBulk})
.done(function onBulkResultGot (data) {
    $.getJSON(myConfig.urlQC, onQCResultGot);
});
</code></pre>

<ul>
<li><strong>Cache <code>length</code> in loops</strong></li>
</ul>

<p>The code <code>for (var i = 0; i &lt; data.length; i++)</code> should be written like this <code>for (var i = 0, len = data.length; i &lt; len; i++)</code>. This avoid calculating the <code>length</code> property on each iteration loop. This advice does not apply in one situation although: when the <code>length</code> changes during the loop. But as far as I see, this is not your case here.</p>

<ul>
<li><strong>Use consistent naming convention</strong></li>
</ul>

<p>In your code, we can find this <code>var div = document.getElementById('Store');</code> and this <code>var Machine = data[i];</code>. Both variable <code>div</code> and <code>Machine</code> doesn't follow the same naming convention. You should pick one and stick with it. In general, JavaScript developers like to use <code>camelCase</code> or <code>snake_case</code> for variable name, and <code>PascalCase</code> for class and sometimes functions names.</p>

<ul>
<li><strong>Be careful with variable declarations</strong></li>
</ul>

<p>Both <code>Firstoff</code> and <code>content</code> variables are not declared using <code>var</code> keyword. This can lead to some tricky bug so don't forget to use it. Also, your code can be read as follows:</p>

<pre><code>$.ajax({url: '/some/url'}).done(function (data) {
    $.getJSON('/another/url', function (data) {
    });
});
</code></pre>

<p>You have declared two variable with the same name, <code>data</code>.
Also, both <code>color</code> and <code>time</code> variables are not used: only a value is affected but not used anywhere else.</p>

<ul>
<li><strong>Use better variable names</strong></li>
</ul>

<p>You have variable named <code>data</code>, <code>div</code>. What are they supposed to represent ? Those names are way too generic IMHO. What if you have to deal with a second div ? Will you name it <code>div2</code> ? Try to find better name for them, which explains <em>why</em> they are variable, <em>what</em> do they refer too etc..</p>

<ul>
<li><strong>jQuery.each may be overkill</strong></li>
</ul>

<p>In most cases, <code>jQuery.each(element, fn)</code> can be replace by a far more simple <code>element.forEach(fn)</code>. This is true if <code>element</code> is not null and is a true array (not an object). So your code could be written as follow: <code>Machine.PassFail.forEach(function forEachPassFail (value, key) { });</code>. Notice parameters order is not the same as in <code>jQuery.each</code> method. Appart from IE 8 and below, <code>Array.prototype.forEach</code> is widely supported: 
<a href="http://kangax.github.io/compat-table/es5/#Array.prototype.forEach" rel="nofollow noreferrer">http://kangax.github.io/compat-table/es5/#Array.prototype.forEach</a>.</p>

<ul>
<li><strong>Avoid multiple DOM call</strong></li>
</ul>

<p>When we go one step above your code, we can see something like this:</p>

<pre><code>var div = document.getElementById('Store');
div.innerHTML = "";

var content = 'some content';
content += 'whatever'; // multiple times

$(content).appendTo(div);
</code></pre>

<p>The variable <code>div</code> is only used twice, so the code could be written as follows:</p>

<pre><code>var content = 'some content';
content += 'whatever'; // multiple times

var div = document.getElementById('Store');
div.innerHTML = "";
$(content).appendTo(div);
</code></pre>

<p>And even this could be simplified as:</p>

<pre><code>var content = 'some content';
content += 'whatever'; // multiple times

var div = document.getElementById('Store');
div.innerHTML = content;
</code></pre>

<p>This way, you have only one DOM modification, instead of two.</p>

<ul>
<li><strong>Don't embed HTML into JavaScript</strong></li>
</ul>

<p>You should not have code like this <code>var Firstoff = "&lt;div class='someclass'&gt;...&lt;/div&gt;</code>. Following preceding advice, you better use <a href="https://developer.mozilla.org/en-US/docs/Web/API/document.createDocumentFragment" rel="nofollow noreferrer"><code>document.createDocumentFragment</code></a>, or even better, a <a href="http://ejohn.org/blog/javascript-micro-templating/" rel="nofollow noreferrer">templating system</a>.</p>

<ul>
<li><strong>Don't embed CSS into HTML</strong></li>
</ul>

<p>You should not embed CSS declaration into your HTML code. If you want to add style to an element, use CSS classname for that purpose. Have a look:</p>

<p>From this:</p>

<pre><code>&lt;div class="col-md-1" style="border-color: black;padding-left: 0px;margin-right: 2px;"&gt;...&lt;/div&gt;
</code></pre>

<p>To this:</p>

<p>HTML</p>

<pre><code>&lt;div class="col-md-1 my-style"&gt;...&lt;/div&gt;
</code></pre>

<p>CSS</p>

<pre><code>.my-style {
    border-color: black;
    padding-left: 0px;
    margin-right: 2px;
}
</code></pre>

<ul>
<li><strong>Be careful with indentation style</strong></li>
</ul>

<p>Your code looks like as follows:</p>

<pre><code>$(document).ready(
        function timerFired () { // indent += 8, why not ? But why use indentation here ?
            setInterval(function () { // indent += 4, uh ?

                $.ajax({url: "/QcT/bulk"}) // indent += 4, ok...
                        .done(function (data) { // indent += 8, uh ??
                            // ...
                        });
            }, 6000);
        }); // can you guess what does this close ? timerFired (indent=8) &amp; ready call (indent=0)
</code></pre>

<p>This one looks like more readable IMHO (but others tips such as "avoid spaghetti code" still apply):</p>

<pre><code>$(document).ready(function onReady () {
    setInterval(function timerFired () {

        $.ajax({url: "/QcT/bulk"})
        .done(function onBulkResultGot (bulkData) {
            // ...
        });
    }, 6000);
});
</code></pre>

<ul>
<li><strong>JavaScript contains a capital S</strong></li>
</ul>

<p>But this points doesn't really matters anyway :)</p>

<p>Also, if you're new to JavaScript world, you may have a look to this post: <a href="http://tobyho.com/2011/11/16/7-common-js-mistakes-or-confusions/" rel="nofollow noreferrer">http://tobyho.com/2011/11/16/7-common-js-mistakes-or-confusions/</a>. It explains 7 common mistakes we found in this world.
Finally, and as a side note, I can't recommend you enough to check out and use <a href="http://jshint.com/" rel="nofollow noreferrer">JSHint</a>.</p>

<p>Hope that helps :)</p>
    </div>