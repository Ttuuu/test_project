<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>**Note: A lot of these might be very similar to <a href="https://codereview.stackexchange.com/a/244052/225833">tieskedh's answer</a> but I drafted before it was here so I thought I should add it **</p>
<blockquote>
<p>I'm not a fan of, when a user clicks on new item, calling notifyDataSetChanged on all items.</p>
</blockquote>
<p>You can use <code>notifyItemRangeChanged(index)</code> or <code>notifyItemChanged(index)</code> in order to specify which items have changed. This is incredibly useful/important with RecyclerViews with many items as the docs say <code>notifyDataSetChanged()</code> <a href="https://developer.android.com/reference/android/support/v7/widget/RecyclerView.Adapter#notifyDataSetChanged()" rel="nofollow noreferrer">is not very efficient</a></p>
<h3>Other stuff</h3>
<p><code>clearActive()</code> doesn't call <code>notifyDataSetChanged()</code> whereas <code>clearSelect()</code> does which seems inconstient but this might be intended behaviour</p>
<p>Both <code>dateFormatter</code> and <code>timeFormatter</code> are public vals, they're never modified and I assume they're only used in this project so you can change them to <code>private val</code>.</p>
<p><code>var items</code> has a custom setter which requires the whole array to be cleared and added each time. It might be worth considering adding methods to support removing and adding singular items from the RecyclerView if that fits your use case.</p>
<p>This is very much a question of taste and personal prefrence, where you have mutliple accesses to the same object you can use a <a href="https://kotlinlang.org/docs/reference/scope-functions.html" rel="nofollow noreferrer"><strong>scope function</strong></a> (let, apply, with etc.)
to make this block of code less verbose.</p>
<pre><code>itemView.name.text = audioRecordUI.getName()
            itemView.date.text = audioRecordUI.getDate().format(dateFormatter)
            itemView.time.text = audioRecordUI.getTime().format(timeFormatter)
            itemView.size.text = size
            itemView.select.isChecked = audioRecordUI.isSelect
</code></pre>
<h3>Styling</h3>
<p>As this is code style, this is subjective and often is something you might have agree on collabratively when working in a team.</p>
<p><strong>Expression Body functions</strong>
You can use expression body functions (instead of normal/block body) in Kotlin for functions that return non <code>Unit</code> types to remove braces. These are often easier to read/more concise especially with small functions but it's a taste thing.</p>
<p><code>override fun getItemCount() = items.size</code></p>
<p><strong>mutableListOf()</strong>
Kotlin provides the methods <code>listOf()</code> &amp; <code>mutableListOf()</code> so you could that instead of explictly instaniating an <code>ArrayList()</code> like so:
<code>var items = mutableListOf&lt;AudioRecordUI&gt;()</code></p>
<p><strong>Removing Explicit types</strong></p>
<p>To make your code more concise, you can avoid explict time declerations like so</p>
<pre><code>var dateFormatter: DateTimeFormatter = DateTimeFormatter.ofPattern("dd.MM.yyyy HH:mm")
var timeFormatter: DateTimeFormatter = DateTimeFormatter.ofPattern("mm::ss")
</code></pre>
<p>It might be worth checking out Kotlin's <a href="https://kotlinlang.org/docs/reference/idioms.htmls" rel="nofollow noreferrer">idioms</a> &amp; <a href="https://kotlinlang.org/docs/reference/coding-conventions.html" rel="nofollow noreferrer">coding-convention</a> pages for frequently used and "more tidy" ways of wrting code compared to Java. I can't see if this is the case but you seem to be using property getters for the <code>AudioRecordUi</code> the way Java would. Like <code>.getDate()</code> <code>audioRecordUI.getName()</code>, in Kotlin getters are generated automatically and you should access the properties if they are exposed <code>.name</code>, <code>.date</code> etc.</p>
    </div>