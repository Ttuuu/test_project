<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Welcome to Python programming!</p>

<p>Your code has various formatting issues, including the fact that when copying it here, you messed up the indentation of the docstring in your function – copying what you write here into my development environment will not work because of that. But let's look at the semantics.</p>

<p>On a high level view, this sounds like a problem I would try to solve recursively.</p>

<p>All the products of one number that are less than or equal to a target (you don't state that equal-to is permitted, but the line <code>if prod(B) &gt; lim :</code> makes me think that is what you want) are exactly the numbers <code>n &lt;= limit</code>, and from there we can generalize to implementing ‘The product of <code>k</code> numbers ≤ <code>p</code> if <code>x</code> is the first number and the product of the remaining <code>k-1</code> numbers ≤ <code>p//x</code>.’ Note that this works with integer division – If you allow floats or if your limit is exclusive, you need float division.</p>

<p>For that recursive solution, I would use a generator and <code>yield</code> every partial solution up the call chain until I get to the original loop that wants my results.</p>

<p>But let us assume that, for whatever reason, you indeed want a function that solves this iteratively, not recursively.</p>

<p>Then, even before I look at your function, it has issue: 2*3*11*13 = 858 &lt; 1000, but that combination does not appear in your list, so you would do well trying to manually generate maybe two examples where you know the answer, and try to produce them using your function.</p>

<p>If you feel it difficult to use the mental arithmetics, trust the tools you mention:</p>

<pre><code>def combinations_with_limit(lst, length, lim):
    return [x for x in itertools.combinations(lst, length)
            if prod(x) &lt;= lim]
</code></pre>

<p>is quite a readable and explicit process. It might throw away a lot of things, but it should help you get test cases.</p>

<p>Once you have a working solution, there are several things in your code to look out for.</p>

<ul>
<li>Calculating the product separately for various combinations, and even twice in your middle loop, will be expensive. Store it somewhere and manipulate it while moving about, instead of running <code>prod</code> too often, in particular if you have a need to access it twice, like in your <code>if</code> and <code>elif</code>.</li>
<li>You are manipulating both <code>H</code> and <code>B</code> in parallel. That feels dangerous: You need great care to make sure that <code>H</code> goes through all combinations, keeping the right length, and never gains any duplicate elements, and then you add the computational overhead of a full list comprehension on top to generate your <code>B</code>s. That sounds easy to get wrong, and as your results show, one of the conditions indeed goes wrong.</li>
</ul>
    </div>