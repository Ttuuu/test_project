<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Note</strong>: I first looked at modernizing your code, after that, I've resolved your questions in the assumption you applied my suggestions.</p>

<p>Looking at your code, I'm a bit worried that you are trying to reeinvent some weels. First of all: <code>SID</code> and <code>HashString</code>.</p>

<p>I'm really worried about this, as it ain't as readable, predictable and performant as it could be.</p>

<p>Let's start with readable: Why would you redefine <code>HashString</code> to <code>SID</code>? This introduces an extra indirection that doesn't add any value. I can see some arguments of making an alias, however, as you are using C++17, just make it an inline function.</p>

<p>Secondly: Predictable. HashString returns a <code>StringId</code>. All <code>std::hash</code> return <code>std::size_t</code>. I suspect it's the same type, however, all your calculations use <code>unsigned int</code> instead of <code>StringId</code>. So any hash you create will have several zeros.</p>

<p>Finally: Performance. Your function accepts <code>const char *</code>. Why don't you use <code>std::string_view</code> instead? If you would have a <code>std::string</code>, it already knows the size, so you shouldn't recalculate it. It can still be called with a zero-terminated char*, in which case strlen will be called in the Ctor of the view.</p>

<p>As already said, it looks like a reimplementation of <code>std::hash&lt;std::string_view&gt;</code>. However, I see an argument in having your own hash function.</p>

<p>Still looking at the same function: <code>fnv_prime</code> is a constant. Why don't you use <code>constexpr</code> for it instead of <code>const</code>?</p>

<p>I also see a for-loop. Whenever, I see <code>for (i = 0</code>, I immediately worry about the scope of the variable, do we need it after the loop? Having to check this increases the complexity for me. How about <code>for (unsigned int i = 0; i &lt; len; ++i)</code>? However, as you will be using <code>std::string_view</code>, it can become: <code>for (auto c : str)</code>, even easier to read/understand;</p>

<p>Moving on: the Component class. Again, you have a constant that could be constexpr. However, I'm worried much more about <code>mID</code>. This ID is free to access for everyone and free to update. Make it private and provide a getter/setter for it.</p>

<p>Your constructor/dtor are implemented as <code>{}</code>, while this could be <code>= default;</code> and the move/copy ctor/assignment are missing. Best to check on <code>the rule of 5</code>.</p>

<p>Going forward: TransformComponent. Are you compiling with compiler warnings (<code>-Weverything -Werror</code> in Clang, <code>/WX /W4</code> in MSVC)? You have a nice example of what is called shadowing. The member <code>mPosition</code> will never be initialized as you create a variable with the same name in a different scope. One could even wonder why you pass <code>x</code> and <code>y</code> separately, I would expect a single argument of type <code>Vec2</code>.</p>

<p>The struct <code>Components</code> creeps me out. Looking at it, its a really bad implementation of <code>std::vector</code>. Get rid of it! (And prereserve the vector if relevant).</p>

<p><code>AddComponents</code> also looks pre-C++17. An alternative:</p>

<pre><code>template &lt;typename Arg, typename ... Args&gt;
inline void AddComponents(StringID gameObjectID, Arg first, Args ... args) {
    // Do the work
    if constexpr (sizeof...(args))
        AddComponents(gameObjectID, args...);
}
</code></pre>

<p>Moving to <code>CreateGameObject</code> why do a c-style cast to <code>char*</code> when not needed?</p>

<p>Up to the <code>Application</code> class. This looks like an attempt for a singleton pattern. I would at least use <code>std::cerr</code> instead of <code>std::cout</code> for reporting failures. However, I'd even recommend <code>assert</code>. Your destructor also never resets the static to  <code>nullptr</code>.</p>

<p>And a final remark for <code>main</code>: Why would you even allocate memory here. Try writing it as:</p>

<pre><code>TestGame testGame{};
testGame.Run();
return 0;
</code></pre>

<p>Looking at your questions: </p>

<p><strong>Templates ain't slow</strong>, please compile with optimizations: <code>-O3</code> in clang, <code>/O2</code> in MSVC. It might hurt you for compile time, however, it hurts less as having to write everything manually.</p>

<p>I agree, <code>typeid</code> is bad. You don't need it. Having the overload will work good enough without the runtime overhead. However, I wouldn't overload <code>AddComponents</code> on the type. I would have an overloaded function that returns you the correct <code>std::vector</code>. Much less code to duplicate, much easier to reuse at other places.</p>

<pre><code>template&lt;typename T&gt;
auto &amp;getStorage()
{
    if constexpr (std::is_same_v&lt;T, TransformComponent&gt;)
        return TransformComponents;
    else if constexpr (std::is_same_v&lt;T, OtherComponent&gt;)
        return OtherComponents;
}
template&lt;typename T&gt;
const auto &amp;getStorage() const
{
     return const_cast&lt;ThisType &amp;&gt;(*this).getStorage();
}
</code></pre>
    </div>