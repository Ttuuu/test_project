<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your code won't compile in C89. If you want to increase the portability of your code and want it to be compilable in all C standards, </p>

<p>You should</p>

<ol>
<li>Not use non-standard functions</li>
<li>Not use VLAs</li>
<li>Not declare variables in the middle of the code</li>
</ol>

<p>Check this code:</p>

<pre><code>#include &lt;stdio.h&gt;
#include &lt;string.h&gt;
#include &lt;stdlib.h&gt;

#define xstr(s) str(s)
#define str(s) #s

#define MAX 30

int main(void)
{
    char array[MAX + 1];
    size_t length;

    if(scanf("%" xstr(MAX) "s", array) != 1)
    {
        fputs("scanf failed! Exiting...", stderr);
        exit(EXIT_FAILURE);
    }

    for (length = strlen(array); length-- ;)
    {
        putchar(array[length]);
    }

    return EXIT_SUCCESS;
}
</code></pre>

<p>Improvements:</p>

<ul>
<li>Compiles without any errors or warnings in C89, C99 and C11.</li>
<li>Added error checking for <code>scanf</code> as well as a length modifier to prevent buffer overflows.</li>
<li>Removed unneccessary variables.</li>
<li>Reduced code complexity.</li>
<li>Uses appropriate data types (<code>size_t</code>).</li>
<li>Used <code>putchar</code> instead of <code>printf</code> which will result in better performance.</li>
</ul>

<p>If you are wondering what those <code>xstr</code> and those weird <code>#define</code>s are, read up on <a href="https://gcc.gnu.org/onlinedocs/cpp/Stringification.html" rel="nofollow">Stringification</a>.</p>
    </div>