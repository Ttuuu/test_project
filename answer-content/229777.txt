<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'm all for providing <em>docstring</em>s.<br>
I doubt the docstrings presented are helpful as can be for someone not familiar with the quicksort algorithm:</p>

<ul>
<li><p><em>Returns an ascendingly sorted list;</em><br>
is this a new one or the one provided as input?<br>
(A method docstring should start with <a href="https://www.python.org/dev/peps/pep-0257/#id16" rel="nofollow noreferrer"><code>a phrase ending in a period [prescribing the] method's effect as a command ("Do this", "Return that"), not as a description</code></a>)</p></li>
<li><p><em>Input variable is an integer or float array;</em><br>
doesn't it work for strings?<br>
the <a href="https://docs.python.org/3/tutorial/datastructures.html#tuples-and-sequences" rel="nofollow noreferrer">python tutorial</a> names <em>list</em>s and <em>tuple</em>s as <code>standard sequence data type</code>s - what <em>is</em> an <a href="https://docs.python.org/3/library/array.html#module-array" rel="nofollow noreferrer"><code>array</code></a>?<br>
(The type hint does give a hint as to the intended meaning - I do not have a helpful intuition about python type hinting in general and "interaction" with docstrings in particular.)</p></li>
<li><p><em>Theoretical Complexity: O(N×Log N) Time and O(N) Memory</em><br>
Without further qualification of the bounds claimed, I expect them to be worst case bounds.</p></li>
<li><p><em>Recursively sorts the two pivot-divided sublists;</em><br>
looking at the method interface, only, I don't see <em>two sublists</em><br>
(which happens to be the first thing I hope for in a method docstring - <a href="https://www.python.org/dev/peps/pep-0257/#id17" rel="nofollow noreferrer"><code>The docstring for a function or method should summarize its behavior and document its arguments, …</code></a> does not stress this.)</p></li>
</ul>

<p>There are several things not quite <em>pythonic</em> in the code presented</p>

<ul>
<li>a swap of <code>a</code> and <code>b</code> is typically denoted using implied lists:<br>
<code>a, b = b, a</code></li>
<li><a href="https://docs.python.org/3/library/stdtypes.html#common-sequence-operations" rel="nofollow noreferrer">Concatenating immutable sequences always results in a new object</a> of the same type as both sequences (the type of the first operand if not same types(?)) - not seeing the intention in enclosing <code>test_list_integer + test_list_float</code> in <code>list()</code></li>
</ul>

<p>I prefer  </p>

<pre><code>if not &lt;condition&gt;:
    &lt;get out of here&gt;
&lt;operate&gt;
</code></pre>

<p>over</p>

<pre><code>if &lt;condition&gt;:
    &lt;operate&gt;
else:
    &lt;get out of here&gt;
</code></pre>
    </div>