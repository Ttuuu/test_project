<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Some general remarks:</p>

<blockquote>
<pre><code>System.out.println(queryLength);
</code></pre>
</blockquote>

<p>The function should only return the result, but not print anything.</p>

<blockquote>
<pre><code>int a = 0 , b = 0 , k = 0;
</code></pre>
</blockquote>

<p>The initial values are not used, and variables should be declared at the narrowest scope, in this case, inside the loop:</p>

<pre><code>for(int i = 0 ; i &lt; queryLength ; i++ )
{
    int a = queries[i][0];
    int b = queries[i][1];
    int k = queries[i][2];
    // ...
}
</code></pre>

<p>Iterating over all queries can also be done with an “enhanced for loop”:</p>

<pre><code>for (int[] query: queries)
{
    int a = query[0];
    int b = query[1];
    int k = query[2];
    // ...
}
</code></pre>

<p>Here</p>

<blockquote>
<pre><code>for(int j = (a-1) ; j &lt;= (b-1) ; j++)
</code></pre>
</blockquote>

<p>the parentheses are not needed, and this</p>

<blockquote>
<pre><code> p[j] = p[j] + k ;
</code></pre>
</blockquote>

<p>can be shortened to </p>

<pre><code>p[j] += k ;
</code></pre>

<p>The initialization</p>

<blockquote>
<pre><code>// initialize p
for(int i = 0 ; i &lt; n ; i++)
{
    p[i] = 0 ;
}
</code></pre>
</blockquote>

<p>is not needed because all elements are initialised to 0 by default.</p>

<p>It might be a matter of personal preference, but I would always put horizontal space around operators and keywords, e.g. in</p>

<blockquote>
<pre><code>if(p[i]&gt;max)
</code></pre>
</blockquote>

<p>There are also some unneeded import statements, but those are given by the submission template.</p>

<hr>

<p>But your real problem is that the algorithm is too slow. The inner loop runs up to <span class="math-container">\$ 10^{7} \$</span> times, for each of the up to <span class="math-container">\$ 2 \cdot 10^{5} \$</span> queries.</p>

<p>The main idea to improve the performance is to represent the data differently. Instead of storing and updating the array with the actual numbers, one can store and update an array which holds the <em>differences</em> between successive numbers.</p>

<p>Initially, all differences are zero.</p>

<p>Then for each query <span class="math-container">\$ (a, b, k) \$</span> you only have to update two entries in the differences array: One difference increases by <span class="math-container">\$ k\$</span>, and one difference decreases by <span class="math-container">\$ k \$</span>.</p>

<p>Finally you compute the actual numbers by accumulating the differences, and determine the maximum value. </p>

<p>This should be much faster, because the inner loop has been eliminated.</p>

<hr>

<p>Let's take the given example with <span class="math-container">\$n = 10\$</span> and the queries</p>

<pre><code>a b k
1 5 3
4 8 7
6 9 1
</code></pre>

<p>Instead of maintaining an array of the <span class="math-container">\$ n \$</span> numbers</p>

<pre>
index:             1  2  3  4  5  6  7  8  9 10
initial array:    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
after (1, 5, 3):  [3, 3, 3, 3, 3, 0, 0, 0, 0, 0]
after (4, 8, 7):  [3, 3, 3,10,10, 7, 7, 7, 0, 0]
after (6, 9, 1):  [3, 3, 3,10,10, 8, 8, 8, 1, 0]
</pre>

<p>we maintain an array of <span class="math-container">\$ n+1 \$</span> differences, where each entry <span class="math-container">\$ d[i] \$</span>  holds the difference <span class="math-container">\$a[i+1] - a[i] \$</span>:</p>

<pre>
index:             0, 1  2  3  4  5  6  7  8  9 10
initial diffs:    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
after (1, 5, 3):  [3, 0, 0, 0, 0,-3, 0, 0, 0, 0, 0]
after (4, 8, 7):  [3, 0, 0, 7, 0,-3, 0, 0,-7, 0, 0]
after (6, 9, 1):  [3, 0, 0, 7, 0,-2, 0, 0,-7,-1, 0]
final array:         [3, 3, 3,10,10, 8, 8, 8, 1, 0]
</pre>

<p>Do you see that only two entries are updated for each query? Can you figure out the pattern? </p>

<p>The final array is reconstructed by accumulating the final entries in the differences array. </p>
    </div>