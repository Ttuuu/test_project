<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You've not provided a fully functional set of code with data, so I can only make untested suggestions as an example for you to incorporate into your application.</p>

<p>Without seeing the data that you are working with, it's impossible to know if a <code>Dictionary</code> is the best approach. Using a <code>Dictionary</code> is a good idea, but only if all of the data in the table is unique. In your code fragment, for example, you are relying on the comparison of two specific cells and are not searching for a value within the entire range of data (which is better suited to a <code>Dictionary</code>).</p>

<p>Using the <code>Index</code> or <code>Match</code> is also reasonable, but remember that these functions directly interact with the worksheet cells. With larger data sets in the <code>Range</code>, this results in slower execution because the <code>Range</code> object must be traversed to access the desired <code>Cells</code>.</p>

<p>Memory-based arrays would be my recommendation for the execution speed improvements you're looking for, with a straight up array-to-array comparison. You can learn more information about using arrays <a href="https://powerspreadsheets.com/excel-vba-array/" rel="nofollow noreferrer">here</a> and <a href="https://excelmacromastery.com/excel-vba-array/#How_To_Make_Your_Macros_Run_at_Super_Speed" rel="nofollow noreferrer">here</a>.</p>

<p>Again, you didn't include a complete set of your code for review here, but there are a few observations I can make for improvement.</p>

<ol>
<li>Always use <code>Option Explicit</code>. <em>(You may be doing this, but we can't see it)</em></li>
<li>Create intermediate objects/variables to make your code more readable. As an example, you are repeating the full reference for a worksheet as <code>ThisWorkbook.Worksheets("Prod. Qty.")</code> everywhere. </li>
</ol>

<p>While it might seem more tedious at first, trust me when I say it will make your code far more readable and easier to maintain if you set it up like this:</p>

<pre><code>Dim prodQtyWS As Worksheet
Dim dashboardWS As Worksheet
Set prodQtyWS = ThisWorkbook.Worksheets("Prod. Qty.")
Set dashboardWS = ThisWorkbook.Worksheets("Dashboard")
</code></pre>

<ol start="3">
<li>Establish your ranges explicitly so the extent of your data is clear.</li>
</ol>

<p>Again, it's a few extra lines of code, but it will not slow down the execution time. <em>(My example here may be an incorrect reading of your OP, you'll have to make adjustments.)</em></p>

<pre><code>Dim prodQtyRange As Range
Set prodQtyRange = prodQtyWS.Range("A2").Resize(Total_rows_Prod, 31)
</code></pre>

<p>From here on out it's implementing your business logic to update the dashboard data. Here is my example <code>Sub</code>, which again, you have to adapt to your specific application. You will see a significant speed improvement with this method.</p>

<pre><code>Option Explicit

Sub Example(ByVal Total_rows_Prod As Long, ByVal Total_rows_Dash As Long)
    Dim prodQtyWS As Worksheet
    Dim dashboardWS As Worksheet
    Set prodQtyWS = ThisWorkbook.Worksheets("Prod. Qty.")
    Set dashboardWS = ThisWorkbook.Worksheets("Dashboard")

    '--- establish the ranges and copy the data into a memory array
    Dim prodQtyRange As Range
    Dim prodQtyData As Variant
    Set prodQtyRange = prodQtyWS.Range("A2").Resize(Total_rows_Prod, 31)
    prodQtyData = prodQtyRange.Value

    Dim dashboardRange As Range
    Dim dashboardData As Variant
    Set dashboardRange = dashboardWS.Range("A2").Resize(Total_rows_Dash, 31)
    dashboardData = dashboardRange.Value

    Dim i As Long
    Dim j As Long
    For i = 2 To Total_rows_Prod
        '--- calc this factor once, since we're adding the same value
        '    to all the dashboard rows
        Dim prodQtyFactor As Double
        prodQtyFactor = prodQtyData(i, 31) / prodQtyData(i, 4)
        For j = 2 To Total_rows_Dash
            If prodQtyData(i, 5) = dashboardData(i, 1) Then
                dashboardData(j, 4) = dashboardData(j, 4) + prodQtyFactor
            End If
        Next j
    Next i

    '--- copy the updated data back to the dashboard
    dashboardRange.Value = dashboardData

End Sub
</code></pre>
    </div>