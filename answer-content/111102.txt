<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>you shouldn't be using an infinite loop and sleep in a gui, instead use the timer functionality of FLTK using <a href="http://www.fltk.org/doc-1.1/Fl.html#Fl.add_timeout" rel="nofollow"><code>Fl::add_timeout</code></a> and <a href="http://www.fltk.org/doc-1.1/Fl.html#Fl.repeat_timeout" rel="nofollow"><code>Fl::repeat_timeout</code></a></p>

<pre><code>void timer_callback(void* window){
    reinterpret_cast&lt;Analog_clock*&gt;(window)-&gt;increment_second();
    Fl::repeat_timeout(1, timer_callback, window);
}

void Analog_clock::run_clock () {
    Fl::add_timeout(1, timer_callback, this);
}

Analog_clock::increment_second(){

    //will also handle seconds overflow so minute and hour hand can be updated
}
</code></pre>

<p>Many gui libraries use a single thread and callbacks to manage events and draws, if you block in one of the callbacks then it can't handle any other event while it is blocking. This was the reason redraw didn't work.</p>

<p><code>repeat_timeout</code> is like <code>add_timeout</code> except that it adds <code>t</code> (the time until callback should happen) to the time the current callback (should have) happened instead of <code>now()</code>. This way the time between <code>timer_callback</code> getting called and it calling <code>repeat_timeout</code> is not a factor.</p>
    </div>