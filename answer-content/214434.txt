<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Initially I came up with this solution:</p>

<pre><code>function solution(A) {
    let arr = [];

    for (let int of A) {
        if (arr[int] === false) {
            arr[int] = true
        } else (
            // only one element found so far
            arr[int] = false
        )
    }
    return arr.indexOf(false);
}
</code></pre>

<p>However, it is either O(n) or O(nlog(n)) on Codility, and fails the last performance test.</p>

<p>@Peter's approach seems like the best.</p>

<p>I cheated and modified from <a href="https://stackoverflow.com/a/43060686/7438857">this Java solution</a>:</p>

<pre><code>class Solution {
    public int solution(int[] A) {
        int result = 0;
        for (int x : A) result ^= x;
        return result;
    }
}
</code></pre>

<p>to get this solution, which has a 100% task score on Codility (with both 100% correctness and a 100% performance score; <a href="https://app.codility.com/programmers/lessons/2-arrays/odd_occurrences_in_array/start/" rel="nofollow noreferrer">try it yourself</a>):</p>

<pre><code>function solution(A) {
    var result = 0;
    for (let int of A) {
        result ^= int;
    }
    return result;
}
</code></pre>

<p>The code in the question gets a 100% correctness score, but the performance score is only 25%.</p>
    </div>