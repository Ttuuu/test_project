<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You seem to have grasped some of the mechanics of a fluent interface without grasping the fundamentals around purpose or fit (maybe your gut has, but your mind has not yet reached this understanding). When Evens and Fowler first document this pattern, their intent was to make code clearer and more readable by allowing methods to be chained together.</p>

<p>Your code, while technically correct, is not clearer or more readable. It adds extra verbiage and <strong><em>doesn't remove the <code>object.setter()</code> syntax</em></strong> at all. It simply obfuscates it by hiding these calls in the heart of a functional interface. Carefully consider the point in bold and italics because it's really important here -- you haven't removed the thing you were trying to remove. This code fails in its most basic purpose, as well as making things considerably worse.</p>

<p>This is a very bad idea. As @Bobby said:</p>

<pre class="lang-java prettyprint-override"><code>final MenuItem item = new MenuItem("foot");
item.setAccelerator(accelerator);
item.setOnAction(this::callback);
</code></pre>

<p>Is much simpler, clearer, and easy to read. If you wanted to make this fluent you would change the setters to return <code>this</code> and then you could get something like:</p>

<pre class="lang-java prettyprint-override"><code>final MenuItem item = new MenuItem("foot").setAccelerator(accelerator).setOnAction(this::callback);
</code></pre>

<p>However, in this specific case, you would be better off with one or more constructors to cover the most common use-cases.</p>

<p>The purpose of code is 2-fold. First, it has to execute correctly, and second, it has to communicate its purpose clearly to future engineers. Code is read many more times than it is written, and it is this fact that is constantly prominent in a senior developer's mind while coding.</p>
    </div>