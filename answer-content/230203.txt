<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>docstrings and comments</h2>

<p>There are lots of formulas in the drawing code, like:</p>

<pre><code>+ SPC * (N-n) + tkn * n + RIGHT + tkn * n + SPC * (N-n)
</code></pre>

<p>How did you arrive at those.  How would they change if you wanted to do some other kind of animation?  I would add a ASCII art drawing of a puzzle being solved, annotated with the dimensions and formulas.</p>

<h2>Hidden interfaces</h2>

<p>Hidden interfaces are bad.  <code>move_multiple()</code> takes a parameter <code>n</code> that is the number of disks to move.  This implies that you can select what size problem to solve by changing <code>n</code>.  However, the drawing/animation functions are coded to use a global variable <code>N</code> for the number of discs.  And <code>N</code> is hard coded to 6 disks.</p>

<h2>separate concerns</h2>

<p>The function <code>move_one()</code> does three things: 1) starts the animation for a move, 2) helps solve the problem (updating the state), and 3) adds a delay between steps in the animation.  That can make it harder to maintain or reuse the code.  For example, a year from now, you want to change the delay.  Will you remember the delay is in the tower solving code and not somewhere in the animation code?  Or you want to modify the code to drive an HTML canvas routine.  Will you remember that each animation step is started from <code>move_one()</code>?</p>

<p>It would be better if the problem solving code just solved the problem and the animation code just did the animation.  Modify the problem solving code to return a list of moves, or, better yet, turn it into a generator that yields the steps as needed:</p>

<pre><code>INTER_STEP_PAUSE = 0.2
INTER_PUZZLE_PAUSE = 2.0

# labels for the towers.  TODO: internationalize
TOWER1 = 'A'
TOWER2 = 'B'
TOWER3 = 'C'

def hanoi(n, src, dst, helper):
    """A generator to solve an n-disk Tower of Hanoi problem.

    It yields the steps for moving a stack of n discs from the source tower
    to the target tower. `helper` is the other tower.

    Yields (from, to) tuples, which means move the top disc from `from` to `to`.

    Can be used like:

        for src, dst in hanoi(3, 'Alpha', 'Bravo', 'Charlie'):
            print(f"Move disk from {src} to {dst}")
    """

    if n == 1:
        yield (source, target)

    else:
        hanoi(n-1, source, helper, target)
        hanoi( 1,  source, target, helper)
        hanoi(n-1, helper, target, source)
</code></pre>

<p>Then <code>main()</code> can be something like:</p>

<pre><code>def main():
    n = int(sys.argv[1])

    print_world(n)
    print_state(n)
    sleep(2.0)

    tower1, tower2, tower3 = LABEL1, LABEL2, LABEL3

    while True:
        for source,target in hanoi(n, tower1, tower2, tower3):
            animate(source, target)
            sleep(INTER_STEP_PAUSE)

        # rotate the tower and solve it again
        tower1, tower2, tower3 = tower2, tower3, tower1
        sleep(INTER_PUZZLE_PAUSE)
</code></pre>

<p>Implementing the display and animation code is left as an exercise for the reader.</p>
    </div>