<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>nice job!</p>

<p>Some hints:</p>

<p><strong>Gamepad.java</strong></p>

<ul>
<li>I don't get why do you used same name for <code>Gamepad</code>. Would be better to chose another one (<code>CustomGamepad</code> ?)</li>
<li>Both variables can be <code>final</code> since you do not expose setter method. This will help performaces.</li>
<li>Since <code>Button</code> is an <em>Enum</em>, you can use <em>EnumMap</em> implementation in place of <em>HashMap</em>. This helps performances and allow you to simplify your code</li>
</ul>

<p>A good <a href="https://javarevisited.blogspot.com/2012/09/what-is-enummap-in-java-example-tutorial.html" rel="nofollow noreferrer">tutorial</a> </p>

<pre><code>private Map&lt;Button, EventContainer&gt; mButtonEvents = new EnumMap&lt;Button, EventContainer&gt;(Button.class);
</code></pre>

<ul>
<li><p>In your constructor, just initialize all <code>EventContainers</code> for-each keys ( check same hint for <code>handleEvents()</code> )</p>

<ul>
<li>public void <code>handleEvents()</code> can be faster. Just check this <a href="https://stackoverflow.com/questions/46898/how-to-efficiently-iterate-over-each-entry-in-a-java-map">explanations</a> </li>
</ul></li>
<li><p>Since <code>EnumMap</code> has all the keys pre-setted, your method  <code>public void on(..)</code> will became smaller since you'll never have <code>null</code></p></li>
</ul>

<hr>

<pre><code>    public void on(ButtonState event, Button button, EventListener listener) {
//    if (button != null)
    mButtonEvents.get(button).addHandler(event, listener);
    }
</code></pre>

<hr>

<h2>Button.java</h2>

<p>you simply do not need a private interface and ExtractButton.
Simply:</p>

<pre><code>public enum Button {
  A {
    @Override
    public boolean extract(Gamepad gamepad) {
      return gamepad.a;
    }
  },
  B{
    @Override
    public boolean extract(Gamepad gamepad) {
      return gamepad.b;
    }
    // More buttons here
  });


  public abstract boolean extract(Gamepad gamepad);
}
</code></pre>

<ul>
<li>of course, if original <code>GamePad</code> has only two buttons (bundle-api methods just return a boolean ?!), this kind of infrastructure maybe it's too much but nevermind.</li>
</ul>

<h2>EventContainer.java</h2>

<p>with same "<em>EnumMap</em>" approach, you can have a nice Map to generate state simply with gets avoiding all if-else:</p>

<hr>

<pre><code>private final Map&lt;ButtonState,Map&lt;Boolean,ButtonState&gt;&gt; buttonStateMachine = new EnumMap&lt;etc.&gt; //it's simple if you use a static initializer
</code></pre>

<hr>

<p>and then your method will look like</p>

<pre><code> private static ButtonState generateNextState(boolean buttonInput, ButtonState oldState) {
    return buttonStateMachine.get(oldState).get(buttonInput);
 }
</code></pre>

<p>however you can use directly your <code>Button</code> object in place of boolean bundle-api object (or avoiding your Button object as said before)</p>

<p>Last, I don't get really how handle() can works in real case scenario but it's more likely a functional issue and not programming one.</p>
    </div>