<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ol>
<li><p>The docstring is empty. What is this function supposed to do? What does it return?</p></li>
<li><p>A bare <code>except:</code> is a bad idea, because it catches all exceptions, including <code>KeyboardInterrupt</code> and <code>SystemExit</code>. If you have some particular exception that you want to catch, then name it. But do you really need to catch any exceptions here? By catching exceptions you conceal information about what happened â€” instead of an error message and a traceback, all you get is the number 1, which tells you nothing.</p></li>
<li><p>The result of the recursive call to <code>decompress_all</code> is discarded and so is lost. If there were an exception inside the recursive call you'd never find out about it.</p></li>
<li><p>In POSIX, it's conventional for functions to return 0 for success and non-zero for failure. But in Python, it's conventional for functions either to return <code>True</code> for success and <code>False</code> for failure, or to return nothing for success, and raise an exception for failure.</p></li>
<li><p>The function calls itself with the same arguments. Why does it do this? What prevents this from recursing forever? I guess the idea here is that multiple layers of decompression might need to be undone, for example if one <code>.zip</code> file contains another <code>.zip</code> file. But I think this is not at all obvious and deserves a comment.</p></li>
<li><p>Instead of recursing, use a loop.</p></li>
</ol>

<p>Revised code:</p>

<pre><code>def decompress_all(directory_path, remove_after):
    """Repeatedly decompress all files under directory_path until no more
    files can be decompressed. The argument remove_after is passed to
    decompress.

    """
    # Decompression may extract more compressed files, so loop
    # until no more files need to be decompressed.
    while sum(decompress(filename, remove_after) == 0
              for filename in files_within(directory_path)):
        pass
</code></pre>
    </div>