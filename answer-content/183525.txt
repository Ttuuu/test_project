<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>... balance between performance and memory usage by having the program allocate blocks containing many data points instead of individual data points as needed.  Was this a good solution ...? </p>
</blockquote>

<p>No - The idea of 1) grouping many blocks, versus 2) all blocks, versus 3) 1 block is trying to outsmart the system's <code>malloc()</code>.  Focusing on designing the higher level code and let the allocator deal with memory management.  This goes against this code's overall design goal, so following will try to live with the objective.</p>

<p>The biggest waste I see is if code used many <code>queue_t</code> that were to all be initially empty, this would fail OP <code>block_num &lt;= 0</code>, obliging to create many non-zero memory size queue.  In other words, let the queue grow as needed starting at 0.</p>

<blockquote>
  <p>Should I have used a fixed size of block or was it a good idea to let the user define it? </p>
</blockquote>

<p>Simple drop the block size - that it - let it be 1.</p>

<blockquote>
  <p>If a fixed size would be better how should I determine what it should be?</p>
</blockquote>

<p>See above.</p>

<blockquote>
  <p>Is this code up to par? ... could be done faster or in a way that is more memory efficient? </p>
</blockquote>

<p>Certainly code can be more memory efficient, yet rarely is the goal unto itself.  It is a balance.  So is it efficient within the balance?</p>

<p>The biggest objection is the potential "chatter" of allocating/free'ing if the queue active size was near a <code>block</code> boundary.  A <em>hysteresis</em> could avoid that.  Only shrink when 25% latest peak.  On a shrink, set the peak to 200% current size.</p>

<blockquote>
  <p>Are there any reasons why this code might be difficult to use ...?</p>
</blockquote>

<p>The set-up is more limiting than I would care for to use in general.  The only parameter needed is the size of the object.  For queues of fixed length, I'd uses a single allocation for all the queue elements and control members.</p>

<pre><code>// queue_init(unsigned int block_num, size_t block_size, size_t element_width)
queue_init(size_t element_width)
</code></pre>

<hr>

<p>Other notes:</p>

<p>Nice <code>dqueue.h</code> set-up.  Except I'd avoid <code>#define MEM_ERROR, SIZE_ERROR, ....</code> names as too likell to collide.  Perhaps <code>QUEUE_MEM_ERROR</code> ....</p>

<p>Why call the type <code>queue_t</code>, prefix functions <code>queue_...</code> and then call the file 
<code>dqueue.h. dqueue.c</code>?  I'd  expect consitency - use  <code>queue.h. queue.c</code> or change code.</p>

<p>I'd expect a function to return the current queue usage.  (enrollments in queue)</p>

<p>Code looks tolerant of  <code>queue_destroy(queue); queue_destroy(queue);</code>.  This is good design and reflects well on the design of <code>queue_destroy()</code>.</p>

<p>I am not a big fan of embedding <code>fprintf(stderr, ...</code> inside functions yet some error handling plan should be implemented and at least this code has one.</p>
    </div>