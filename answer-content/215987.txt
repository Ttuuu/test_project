<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Securing PHP sessions is like art and the defualt session handler is not safe far from it and alot can go wrong with it.. </p>

<p>For example on shared webhosting when the sessions are configured to run in one directory. <br>
A attacker could run the PHP code on his hosting account </p>

<pre><code>&lt;?php 

session_start();
$session_id = session_id(); 

$path = session_save_path() . '/sess_' . session_id();
chmod($path, 777); # read and writeable by everybody

var_dump($session_id);

?&gt;
</code></pre>

<p>The attacker can now use the session id and change the <code>HTTP_REFERER</code> in a HTTP header tool, to use his session_id on your website. </p>

<p>That makes it also possible read and modify session data on his web hosting account to gain more privilies or do SQL injections on your web hosting account.  <br> </p>

<p>This works because the session source code in <code>session_start()</code> does not check which sessions belongs to which website, the only check is <code>HTTP_REFERER</code> header which can be spoofed. </p>

<pre><code>/* Check whether the current request was referred to by
 * an external site which invalidates the previously found id. */

if (PS(id) &amp;&amp;
        PS(extern_referer_chk)[0] != '\0' &amp;&amp;
        PG(http_globals)[TRACK_VARS_SERVER] &amp;&amp;
        zend_hash_find(Z_ARRVAL_P(PG(http_globals)[TRACK_VARS_SERVER]), "HTTP_REFERER", sizeof("HTTP_REFERER"), (void **) &amp;data) == SUCCESS &amp;&amp;
        Z_TYPE_PP(data) == IS_STRING &amp;&amp;
        Z_STRLEN_PP(data) != 0 &amp;&amp;
        strstr(Z_STRVAL_PP(data), PS(extern_referer_chk)) == NULL
) {
    efree(PS(id));
    PS(id) = NULL;
    PS(send_cookie) = 1;
    if (PS(use_trans_sid) &amp;&amp; !PS(use_only_cookies)) {
        PS(apply_trans_sid) = 1;
    }
}
</code></pre>

<p>How to make it safe? <br>
You have two good options</p>

<p>1) Use <a href="http://php.net/manual/en/function.session-save-path.php" rel="nofollow noreferrer">session_save_path</a> <br>
2) Write you own <a href="http://php.net/manual/en/class.sessionhandler.php" rel="nofollow noreferrer">SessionHandler class</a> and write your own layer to work on file system and or database. </p>

<p><strong>Note</strong> <br>
This will not solve all session related security issues when using PHP sessions, but it is a good starting point. </p>
    </div>