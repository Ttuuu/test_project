<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I like the idea of the <code>elementIndexLookup</code> but you should be aware of the following:</p>

<blockquote>
<pre><code>  private void RemoveIndexFromLookup(T element, int index)
  {
    this.elementIndexLookup[element].Remove(index);
  }
</code></pre>
</blockquote>

<p>When you remove the last index from an elements lookup entry, you should remove the entry from <code>elementIndexLookup</code> else this:</p>

<blockquote>
<pre><code>  public bool Contains(T element)
  {
    return this.elementIndexLookup.ContainsKey(element);
  }
</code></pre>
</blockquote>

<p>will be wrong if <code>elementIndexLookup[element].Count == 0</code></p>

<p>and this:</p>

<blockquote>
  <p><code>var index = this.elementIndexLookup[elementToRemove].First();</code></p>
</blockquote>

<p>will fail with an exception.</p>

<hr>

<p>This</p>

<blockquote>
<pre><code>  private void AddIndexToLookup(T element, int index)
  {
    if (this.elementIndexLookup.ContainsKey(element))
    {
      this.elementIndexLookup[element].Add(index);
    }
    else
    {
      this.elementIndexLookup.Add(element, new HashSet&lt;int&gt; { index });
    }
  }
</code></pre>
</blockquote>

<p>can be simplified to:</p>

<pre><code>  private void AddIndexToLookup(T element, int index)
  {
    if (!elementIndexLookup.TryGetValue(element, out var indices))
      elementIndexLookup[element] = indices = new HashSet&lt;int&gt;();

    indices.Add(index);
  }
</code></pre>
    </div>