<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Ok, so you have a arbitrary deep path and need to get a dictionary out of it. For this you can use an infinitely nestable <code>defaultdict</code>, as shown in <a href="https://stackoverflow.com/a/4178355/4042267">this answer</a> by <a href="https://stackoverflow.com/users/56338/sth">@sth</a>:</p>

<pre><code>from collections import defaultdict

class InfiniteDict(defaultdict):
   def __init__(self):
      defaultdict.__init__(self, self.__class__)
</code></pre>

<p>This allows you to write stuff like <code>d["a"]["b"]["c"] = 3</code> and it will automatically create all nested layers. It allows you to parse the dictionary recursively. The outer dictionary can be handled in the same way as the inner dictionaries, because <code>*a, b = "foo".split("::") -&gt; a, b = [], "foo"</code>.</p>

<pre><code>def parse(d):
    # reached a leave
    if not isinstance(d, dict):
        return d
    out = InfiniteDict()
    for path, values in d.items():
        # parse the path, if possible
        try:
            *path, key = path.split("::")
        except AttributeError:
            # do nothing if path is not a string
            path, key = [], path
        # follow the path down almost to the end
        # noop if path = []
        temp = out
        for x in path:
            temp = temp[x]
        # assign it to the last part of the path
        # need to parse that as well, in case it has another path
        # works only `sys.getrecursionlimit()` levels deep, obviously
        temp[key] = parse(values)  
    return out
</code></pre>

<p>For the given example this produces:</p>

<pre><code>InfiniteDict(__main__.InfiniteDict,
             {'a': InfiniteDict(__main__.InfiniteDict,
                           {'test': InfiniteDict(__main__.InfiniteDict,
                                         {'test2': InfiniteDict(__main__.InfiniteDict,
                                                       {'test3': InfiniteDict(__main__.InfiniteDict,
                                                                     {'test4': InfiniteDict(__main__.InfiniteDict,
                                                                                   {'age': 1,
                                                                                    'name': 'ok'})}),
                                                        'test4': InfiniteDict(__main__.InfiniteDict,
                                                                     {'test4': InfiniteDict(__main__.InfiniteDict,
                                                                                   {'age': 2,
                                                                                    'name': 'ok1'}),
                                                                      'test5': InfiniteDict(__main__.InfiniteDict,
                                                                                   {'body': InfiniteDict(__main__.InfiniteDict,
                                                                                                 {'head': InfiniteDict(__main__.InfiniteDict,
                                                                                                               {'foot': InfiniteDict(__main__.InfiniteDict,
                                                                                                                             {'age': 2,
                                                                                                                              'thing': 'test'})})}),
                                                                                    'name': 'ok1'})})})})}),
              'b': InfiniteDict(__main__.InfiniteDict,
                           {'age': 'test2', 'name': 'ok2'})})
</code></pre>

<p>Which looks worse than it is, because <code>InfiniteDict</code> inherits from <code>dict</code> in the end:</p>

<pre><code>isinstance(InfiniteDict(), dict)
# True
InfiniteDict.mro()
# [__main__.InfiniteDict, collections.defaultdict, dict, object]
</code></pre>

<p>And so you can <code>json.dumps</code> it, just like you did in your code:</p>

<pre><code>import json

...

if __name__ == "__main__":
    mydict = {...}
    print(json.dumps(parse(mydict), indent=2))

# {
#   "a": {
#     "test": {
#       "test2": {
#         "test3": {
#           "test4": {
#             "name": "ok",
#             "age": 1
#           }
#         },
#         "test4": {
#           "test4": {
#             "name": "ok1",
#             "age": 2
#           },
#           "test5": {
#             "name": "ok1",
#             "body": {
#               "head": {
#                 "foot": {
#                   "age": 2,
#                   "thing": "test"
#                 }
#               }
#             }
#           }
#         }
#       }
#     }
#   },
#   "b": {
#     "name": "ok2",
#     "age": "test2"
#   }
# }
</code></pre>

<p>The advantage of this is that the <code>InfiniteDict</code> deals with most of the nasty recursive stuff, and the only thing left to do is make paths out of the strings, if necessary.</p>
    </div>