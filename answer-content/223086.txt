<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Design</h2>

<p>You do not validate that the program is valid before starting. You should check that '[' and ']' are all matched correctly. This can be done while loading the program.</p>

<p>Your memory (tape) runs from 0 -&gt; 3000. But the ptr into this memory is not bound by this constraint. I would make sure that <code>h</code> is bound to this range.</p>

<p>Your jump backwards at the end of a block is very inefficient. Considering that when you have reached a <code>]</code> you must have already passed the <code>[</code> you could record this fact and simply jump back to that location.</p>

<h2>Implementation</h2>

<p>I would simplify loading the program (as suggested by @Edward). If you need to log it that can also be done here:</p>

<pre><code>// You can make `log` /dev/null or you could have a null stream
// that does nothing with the input (its not that hard to write).
std::vector&lt;char&gt; loadFile(std::istream&amp; str, std::ostream&amp; log)
{
    int openBrace = 0;
    std::vector&lt;char&gt; source; 
    std::copy_if(std::istream_iterator&lt;char&gt;(str),
                 std::istream_iterator&lt;char&gt;(),
                 std::back_inserter(source), 
                 [&amp;log, &amp; openBrace](char c) {
                     if (c == ']') { --openBrace;}
                     if (c == '[') { ++openBrace;}
                     if (openBrace &lt; 0) {
                         throw std::runtime_error("Poop");
                     }
                     log &lt;&lt; c;
                     return std::strchr("&lt;&gt;+-[],.", c);
                 });
    if (openBrace != 0) {
        throw std::runtime_error("Poop");
    }

    return source;
}
</code></pre>

<h2>Code Review</h2>

<p>If you can't modify the program (I don't think brainfuck supports self modifying code) then you should pass the source by <code>const reference</code> to prevent accidents.</p>

<pre><code>void interpret(std::vector&lt;char&gt;&amp; source)
</code></pre>

<hr>

<p>Is there a reason for a 30000 limit? </p>

<pre><code>    std::vector&lt;unsigned char&gt; tape(30000, 0);
</code></pre>

<p>Maybe this limit can be passed as an argument from main. The default is 30000 byt a user could override the default to allow smaller/larger values.</p>

<hr>

<p>This allows negative values:</p>

<pre><code>    int h = 0;  // the tape head
</code></pre>

<p>Also you can potentially fall off the high end. So you need to watch that.</p>

<hr>

<p>Are you sure that <code>int</code> is large enough to index all programs?</p>

<pre><code>    int i = 0;  // the index to read the source
</code></pre>

<p>I would definitely make this <code>std::size_t</code>.</p>

<hr>

<pre><code>            case '&lt;':
                --h;    // You want to allow it to fall off the left hand end?
</code></pre>

<hr>

<pre><code>            case '&gt;':
                ++h;    // You want to allow it to fall off the right hand end?
</code></pre>

<hr>

<pre><code>            case ',':
                std::cin &gt;&gt; tape[h];  // Careful. The operator &gt;&gt; skips white space on read.
                                      // I would add std::noskipws here.
</code></pre>

<hr>

<p>Here you need to validate that your inner loop does not extend beyond the end of your source.</p>

<p>Also this code is broken if you are already inside a brace and then hit another brace and the count is zero. As this will cause it not only jump over the current loop but also all outer loop that you are currently inside.</p>

<p>Also you can save the current position for quick jump back.</p>

<p>I would write the loop code like this:</p>

<pre><code>   std::vector&lt;std::size_t&gt;    loopPos;
   ...

            case '[':
                if (tape[h] != 0) {
                    loopPos.push_back(i);
                }
                else {
                    ++i;  // Want to skip over the current '[' so we can start `ignoreBrace` at 1
                    for(int ignoreBrace = 1; i &lt; source.size() &amp;&amp; ignoreBrace != 0; ++i) {
                        if (source[i] == ']' {
                            --ignoreBrace;
                        }
                        if (source[i] == '[' {
                            ++ignoreBrace;
                        }
                    }
                    --i; // because of the ++i in the loop we are now
                         // one passed the ']' we want to move back and
                         // point at the ']' so the outer-loops ++i will
                         // increment passed it.
                }
                break;

            case ']':
                if (tape[h] != 0) {
                    i = loopPos.back();
                }
                else {
                    loopPos.pop_back();
                }
                break;
</code></pre>

<hr>

<p>Personally I would put all error checking up front. That way normal code execution is at the normal indent level notinside a scope block.</p>

<p>Also I would allow for the possibility of the source being specified via std::cin?</p>

<pre><code>int main(int argc, char* argv[])
{
    // Validate the input.
    if (argc != 1) {
        std::cout &lt;&lt; "Expected a brainfuck source file as a command line argument.\n";
        std::cout &lt;&lt; "Terminating the program." &lt;&lt; std::endl;
        return 1;
    }

    // Normal operations.
    std::vector&lt;char&gt; source = read_source(argv[1]);
    filter_chars(source);
    interpret(source);
    return 0;
}
</code></pre>
    </div>