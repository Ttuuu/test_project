<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I've also commented on the julia slack, but just if anyone else is reading, as I see you've not updated the question according to my comments. </p>

<p>You can see Julia's general performance tips <a href="https://docs.julialang.org/en/v1/manual/performance-tips/index.html" rel="nofollow noreferrer">here</a>. I suggest you read this. You are falling into at least two of the performance gotchas: </p>

<ol>
<li>You are initializing <code>dUx</code>, <code>dUy</code> and <code>dUz</code> as <code>Int</code>s first, but change their type to <code>Float64</code>s in the first assignment. That trips the compiler. The solution is to initialize them to <code>0.</code></li>
<li>You are using <code>degree</code> and <code>CS</code> that appear to be captured global variables, which makes it impossible for the compiler to specialize. The solution is to pass them as arguments to the function.</li>
</ol>

<p>Not that the second issue also means that your code is not runnable, because we don't have access to <code>degree</code> and <code>CS</code>. If your code is not runnable it's very hard to comment on. </p>

<p>Here's what you can do yourself to fix this:</p>

<ol>
<li>Use the Traceur.jl package to check your code, using <code>@trace func()</code>. That will check your code for the common performance gotchas.</li>
<li>Use the BenchmarkTools package (with <code>@btime</code>) to evaluate any improvements.</li>
<li>Once you've done that, use the <code>Profile</code> module (or even better, <a href="https://docs.junolab.org/latest/man/juno_frontend.html#Juno.@profiler" rel="nofollow noreferrer">Juno's inbuilt profiler</a> to see which lines in your code are slow.</li>
</ol>

<p>Once you've done that, if you still have problems, please comment here with the results from the profiler, and update your code to be runnable, and we'll be happy to take a look again.</p>
    </div>