<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I think some students would appreciate an example without inner classes: </p>

<p>Range can implement the Iterator without an inner class. You just need to reset the cursor to the start value. Here I reset cursor in the Iterator method and in the next method, once it has finished iterating through the range. It works for the examples proposed. Of course, the Iterator is not keeping the states independently, and won't work for more complex examples, but I don't need to be passing constructor arguments to an inner class.</p>

<pre><code>import java.util.NoSuchElementException;
import java.util.Iterator;

public class Range implements Iterable&lt;Integer&gt;, Iterator&lt;Integer&gt; {
    private int start, end, cursor;

    public Range(int start, int end) {
        this.start = start;
        this.end = end;
    }

    public Iterator&lt;Integer&gt; iterator() {
        cursor = start;
        return this;
    }

    public boolean hasNext() {
        return cursor &lt; end;
    }

    public Integer next() {
        if(!hasNext()) {
            cursor = start;
            throw new NoSuchElementException();
        }
        return cursor++;
    }

    public void remove() {
        throw new UnsupportedOperationException();
    }

    public static void main(String[] args) {
        Range range = new Range(1, 10);

        // Long way
        Iterator&lt;Integer&gt; it = range.iterator();
        while(it.hasNext()) {
            int cur = it.next();
            System.out.println(cur);
        }

        // Shorter, nicer way:
        // Read ":" as "in"
        for(Integer cur : range) {
            System.out.println(cur);
        }

        Range digits = new Range(0, 10);
        for (Integer tensDigit : digits) {
            for (Integer onesDigit : digits) {
                System.out.format("%s%s ", tensDigit, onesDigit);
        }
        System.out.println();
        }
    }
}
</code></pre>
    </div>