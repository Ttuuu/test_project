<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'm curious why you are using:</p>

<pre><code>action.accept(Arrays.stream((T[]) buffer.toArray(new Object[0])));
</code></pre>

<p>It seems to me that <code>action.accept(buffer.stream())</code> would work here, as long as the <code>action.accept()</code> fully processes the produced stream before returning.</p>

<hr>

<p>Given the stream <code>1, 2, 3, 4</code> and the window size 3, the code looks like it will produce  <code>[1,2,3]</code>, <code>[2,3,4]</code>, and then due to the code outside the <code>while</code> loop, it looks like it wants to produce <code>[3,4]</code> as one last hurrah!</p>

<p>Except, <code>tryAdvance</code> has already returned <code>false</code> from <code>return sourceIterator.hasNext()</code>, so <code>tryAdvance</code> should not be called again.  So the code after the while loop looks effectively unreachable.</p>

<p>But it can be reached ... if the window never fill up completely in the first case, in which case it will produce exactly one stream of less than the full window size.  Is this intended behaviour?  If so, you really need to add comments explaining how that code is reached, and why it is possible not to reach it.</p>

<p>If less than a full window of output is possible, then shouldn't the <code>Spliterator</code> produce <code>[1]</code>, <code>[1,2]</code>, <code>[1,2,3]</code>, <code>[2,3,4]</code>, <code>[3,4]</code>, <code>[4]</code> ... building up to the full window size and then tapering off once the end of the source stream has been reached?  Wouldn't that be more consistent?</p>

<hr>

<p>An <code>ArrayDeque</code> will (based on its name) internally use an array, probably with head and tail indices.  I'm not sure how much you can improve it by implementing it with your own "plain array".  Sounds like you'd be reinventing the wheel.  Although using an array of <code>windowSize*2-1</code> to avoid the wrap-around <em>might</em> give you a slight speedup.</p>

<hr>

<p><code>estimateSize()</code> could query the collection for its size, compute the number of windows it will be producing and return an actual value, instead of simply returning <code>MAX_VALUE</code>.</p>
    </div>