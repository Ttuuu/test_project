<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Timer</h2>

<p>The clock-face and label are 'out of sync' because <code>Invalidate()</code> does <em>not</em> cause the window to draw immediately, so <code>clockTime = DateTime.Now;</code> is not run before the label updates: this means the label is always 1 timer-tick behind the face. You can sovle this either by updating <code>clockTime</code> in the timer (I'd recommend), or by replacing <code>this.Invalidate()</code> with <code>this.Refresh()</code> which <em>does</em> force the painting straight away (it's a kind of dodgy method, since painting has to go through the message pump, but you are already occupying that thread...).</p>

<p>You probably want to increase the tick frequency further, as timers are notoriously inaccurate, and updating every 500ms means that at some point there will be a 500ms or 1500ms delay between hand movements, which will not look good. I would suggest updating <code>clockTime</code> in <code>timer1_Tick</code> before doing anything else (you could even check if a re-draw is necessary, so that you don't actually perform any update is the second counter hasn't changed).</p>

<pre><code>private void timer1_Tick(object sender, EventArgs e)
{
    clockTime = DateTime.Now;
    this.label1.Text = String.Format("{0}:{1}:{2}", clockTime.Hour, clockTime.Minute, clockTime.Second);
    this.Refresh();
}
</code></pre>

<h2>Flicker</h2>

<p>When I run your code, the clock-face flickers when it renders. The quick and easy solution to this is to enable Double Buffering on the form. This means that when you do the painting, you are painting on an 'off-screen' canvas, which is copied onto the screen when it is completed (the flicker is it being show after the control is cleared, but before the hands are drawn). You can always implement your own double-buffering, but there is no need for such complexity here.</p>

<pre><code>this.DoubleBuffered = true;
</code></pre>

<h2>Drawing Hands</h2>

<p>You have a lot of similar looking code here, which is just begging to be put into a method.</p>

<pre><code>float secX = 100 * (float)Math.Cos(Math.PI / -2 + (2 * clockTime.Second * Math.PI) / 60) + centerX;
float secY = 100 * (float)Math.Sin(Math.PI / -2 + (2 * clockTime.Second * Math.PI) / 60) + centerY;
// etc.
</code></pre>

<p>Each line is computing how far round the hand went, turning this into radians, offseting that angle by <code>-pi/2</code>, and then computing the <code>x</code> or <code>y</code> displacement accordingly, multiplied by the hand length, and offset by the center. That's a lot to repeat on 6 lines. How about a <code>DrawHand</code> method?</p>

<p>Instead of inlining all the logic, we can separate out the bit that is concerned with drawing the hand from the bit that is concerned with working out how far round the hand has gone.</p>

<pre><code>private static void DrawHand(Graphics g, PointF center, Pen pen, float handLength, float handProgress)
{
    // compute angle from handProgress
    double angleRadians = (Math.PI / -2 + (2 * handProgress * Math.PI));

    // determine x and y displacements from center
    float endX = handLength * (float)Math.Cos(angleRadians) + center.X;
    float endY = handLength * (float)Math.Sin(angleRadians) + center.Y;

    // draw line with given pen
    g.DrawLine(pen, center.X, center.Y, endX, endY);
}
</code></pre>

<h2><code>Form1_Paint</code></h2>

<p>As Jesse C. Slicer has already commented, you should be disposing your <code>Pen</code> objects (but NOT the <code>Graphics</code> object when you receive it from an event!). The most tidy way to do this is to use <code>using</code> blocks, which define the scope of the object and dispose it for you even if an exception is thrown. Putting this together with <code>DrawHand</code> method, you might have something like this:</p>

<pre><code>public void Form1_Paint(object sender, PaintEventArgs e)
{
    Graphics canvas = e.Graphics;

    float centerX = this.ClientRectangle.Width / 2;
    float centerY = this.ClientRectangle.Height / 2;
    PointF center = new PointF(centerX, centerY);

    canvas.DrawEllipse(Pens.Aqua, centerX - circleDiameter / 2, centerY - circleDiameter / 2, circleDiameter, circleDiameter);

    using (Pen secHand = new Pen(Color.Green, 1))
    using (Pen minHand = new Pen(Color.Black, 2))
    using (Pen hourHand = new Pen(Color.Red, 3))
    {
        DrawHand(canvas, center, secHand, 100f, clockTime.Second / 12f);
        DrawHand(canvas, center, minHand, 80f, clockTime.Minute / 60f);
        DrawHand(canvas, center, hourHand, 70f, clockTime.Hour / 12f);
    }
}
</code></pre>

<p>Note how much cleaner and clearer the bit that draws the hand is: you could can spot the bug in seconds (pun intended) because this code only says <em>what</em> to draw, not <em>how</em> to draw it.</p>
    </div>