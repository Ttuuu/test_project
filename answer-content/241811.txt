<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>One of the main reasons Promises were created was to avoid the ugly nesting of callbacks when multiple asynchronous actions need to occur. For example, rather than</p>

<pre><code>fn1(dataToSend, dataForFn2 =&gt; {
  fn2(dataForFn2, dataForFn3 =&gt; {
    fn3(dataForFn3, processedData =&gt; {
      console.log(processedData);
    });
  });
});
</code></pre>

<p>If the functions returned Promises instead of accepting callbacks, the above could be done with</p>

<pre><code>fn1(dataToSend)
  .then(fn2)
  .then(fn3)
  .then(processedData =&gt; {
    console.log(processedData);
  });
</code></pre>

<p>The Promise-as-callback antipattern is when you <strong>nest</strong> <code>.then</code>s in other <code>.then</code>s or pass around callbacks rather than <em>chaining</em> another <code>.then</code> onto the previous Promise. This is the trap you're falling into here. Since <code>fetch</code> returns a Promise itself, it would be best to return that Promise and allow consumers of this script to use it. That is, it would be really convenient (and appropriate) if consumers to be able to do something like</p>

<pre><code>get_ip(IP_URLs)
  .then(console.log)
  .catch(handleErrors);
</code></pre>

<p>Another related nesting issue you might consider is, instead of</p>

<pre><code>if (goodCondition) {
  // lots of code
} else {
  callback("No more URLs");
}
</code></pre>

<p>Rather than having to keep track of which brackets correspond to what upper condition, it might be preferable to return early instead:</p>

<pre><code>if (!goodCondition) {
  callback("No more URLs");
  return;
}
// lots of code
</code></pre>

<p>But if you return the Promises instead of using callbacks, this should cease to be an issue.</p>

<p>The <code>init</code> object you're constructing seems strangely complicated. Many of the properties you're passing are the default ones already (like <code>method: 'get'</code>, <code>redirect: 'follow'</code>) or useless (<code>credentials: 'same-origin'</code>). Unless you're deliberately trying to affect some things with the object, it would be simpler and less confusing to omit it entirely (the script looks to work just fine without it, none of the properties look useful).</p>

<p>You have a <em>lot</em> of fail-handlers. If you really want to exhaustively identify what's OK and what isn't, it would be good to also check if the <em>response</em> is OK too:</p>

<pre><code>return fetch(url).then(
  response =&gt; {
    if (!response.ok) {
      console.log('Response was not OK:', response.status);
      return getIPFromNextSite(urls);
    }
</code></pre>

<p>But unless you're actively analyzing exactly which stage is working and what isn't, and really need all those <code>.fail</code> handlers, you might consider <a href="https://stackoverflow.com/questions/24662289/when-is-thensuccess-fail-considered-an-antipattern-for-promises">avoiding them</a> and <code>.catch</code>ing errors at the end instead:</p>

<pre><code>function getIPFromNextSite(urls) {
  if (!urls.length) {
    // Send control flow to the consuming .catch block:
    throw new Error('No more URLs');
  }
  const url = urls.pop();
  return fetch(url)
    .then(response =&gt; response.text())
    .then((txt) =&gt; {
      if (isValidIP(txt)) {
        // Send control flow to the consuming .then block:
        return txt;
      } else {
        return getIPFromNextSite(urls);
      }
    })
    .catch((err) =&gt; {
      return getIPFromNextSite(urls);
    });
}
</code></pre>

<p>It's only a comment in your code, but <code>.slice</code> does not deep copy arrays - it only shallow copies them. (Since the array here contains immutable strings, a shallow copy is fine anyway.)</p>

<p>If you want to follow the standard Javascript naming conventions, you could consider using <code>camelCase</code> for functions and most variables by default.</p>

<p>When declaring variables, best to <a href="https://softwareengineering.stackexchange.com/questions/278652/how-much-should-i-be-using-let-vs-const-in-es6">always use <code>const</code></a>. Using <code>let</code> warns readers of the code that you may reassign the variable name, which results in more cognitive overhead (and is confusing if there isn't actually any chance of the name being reassigned).</p>

<p>In full, this is how I would do it:</p>

<p></p><div class="snippet" data-lang="js" data-hide="true" data-console="true" data-babel="false">
<div class="snippet-code snippet-currently-hidden">
<pre class="snippet-code-js lang-js prettyprint-override"><code>const IP_URLs = [
  'https://api.ipify.org/',
  'https://ipecho.net/plain',
  'https://api.kwelo.com/v1/network/ip-address/my',
  'https://myexternalip.com/raw',
];
function getIPFromNextSite(urls) {
  if (!urls.length) {
    // Send control flow to the consuming .catch block:
    throw new Error('No more URLs');
  }
  const url = urls.pop();
  return fetch(url)
    .then(response =&gt; response.text())
    .then((txt) =&gt; {
      if (isValidIP(txt)) {
        // Send control flow to the consuming .then block:
        return txt;
      } else {
        return getIPFromNextSite(urls);
      }
    })
    .catch((err) =&gt; {
      return getIPFromNextSite(urls);
    });
}
function isValidIP(txt) {
  return /^(?!0)(?!.*\.$)((1?\d?\d|25[0-5]|2[0-4]\d)(\.|$)){4}$/.test(txt);
}
const getIP = urls =&gt; getIPFromNextSite(urls.slice());

getIP(IP_URLs).then(console.log);</code></pre>
</div>
</div>


<blockquote>
  <p>Should I have used async/await?</p>
</blockquote>

<p>You could. If you need to exhaustively check every error path, it would require a lot of ugly <code>try</code>/<code>catch</code> boilerplate, but if you just want a result, it looks moderately cleaner than the version above:</p>

<p></p><div class="snippet" data-lang="js" data-hide="true" data-console="true" data-babel="false">
<div class="snippet-code snippet-currently-hidden">
<pre class="snippet-code-js lang-js prettyprint-override"><code>const IP_URLs = [
  'https://api.ipify.org/',
  'https://ipecho.net/plain',
  'https://api.kwelo.com/v1/network/ip-address/my',
  'https://myexternalip.com/raw',
];
async function getIPFromNextSite(urls) {
  for (const url of urls) {
    try {
      const response = await fetch(url);
      const text = await response.text();
      if (isValidIP(text)) {
        // Send control flow to the consuming .then block:
        return text;
      }
    } catch(e) {
      // Don't do anything, just continue on to next iteration
    }
  }
  // Send control flow to the consuming .catch block:
  throw new Error('No more URLs');
}
function isValidIP(txt) {
  return /^(?!0)(?!.*\.$)((1?\d?\d|25[0-5]|2[0-4]\d)(\.|$)){4}$/.test(txt);
}
const getIP = urls =&gt; getIPFromNextSite(urls);

getIP(IP_URLs).then(console.log);</code></pre>
</div>
</div>

    </div>