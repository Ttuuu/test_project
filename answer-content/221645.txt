<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>@osuka_ has already provided a thorough review, but I want to show an important point that is missing from his review: The choice of making your class a singleton and the way that you implemented it.</p>

<p>I suppose that you have a really good reason to make this class a singleton. But sometimes, the singleton pattern is considered an anti-pattern because it often makes testing harder (among other downsides). Alternatives would be to simply make the <code>ThreadPool</code> a normal class and use dependency injection/inversion techniques to locate a shared object.</p>

<p>A possible source for problems can be found in your <code>getInstance</code> method:</p>

<pre><code>    //getInstance to allow the second constructor to be called
    static ThreadPool&amp; getInstance(int numThreads){
        static ThreadPool instance(numThreads);

        return instance;
    }
</code></pre>

<p>This constructs a single instance with a given value of <code>numThreads</code> on the first usage. The problem is: you have to take care that either</p>

<ul>
<li>this method is ALWAYS called with the same <code>numThreads</code></li>
<li><strong>or</strong> the very first usage is ALWAYS at a point where you can be completely sure that the value is correct.</li>
</ul>

<p>Both result in maintainability issues. Consider for example the following function:</p>

<pre><code>void doWork() {
    auto&amp; pool = ThreadPool::getInstance(4);
    // ... use the pool
}
</code></pre>

<p>This would later get changed to</p>

<pre><code>void doWork() {
    prepareWork();
    auto&amp; pool = ThreadPool::getInstance(4);
    // ... use the pool
}
</code></pre>

<p>Here, you would have to check whether <code>prepareWork()</code> also uses the <code>ThreadPool</code> and, if so, whether it passes the correct number of threads. In larger codebases, this can easily lead to avoidable bugs.</p>

<p><strong>Conclusion:</strong> Please reconsider whether making this class a singleton is really the best choice, and maybe select a better way of initializing the number of threads.</p>
    </div>