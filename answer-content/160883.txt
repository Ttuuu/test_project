<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Firstly, related to the mathematical aspect I see how the bias could be leaning towards \$[0, 5]\$, but I don't quite get the connection why you are using 256 afterwards. You could possibly get even better distribution by changing form bytes to the next storage level available. </p>

<p>Depending on your range, the distribution could be affected severly if the \$modulo\$ gets close to 256, if I've understood your algorithm correctly. </p>

<p>I've sadly not gotten a C# compiler available, so the following points are made untested:</p>

<ul>
<li><strong>In general your code looks goods</strong> – Nice spacing, nice variable names, and so on. Not a whole lot of comments explaining the reasoning for your methods, but in general it looks good. Personally I'm not all in favor of capitalizing both Function Names, like <code>ClampDigit()</code>, so I kind of read most of your function names as class names, but this is personal preferences. </li>
<li><strong>Cost of initializing <code>RNGCryptoServiceProvider</code>?</strong> – I'm wondering what the cost of constructing this all the time is. Some random generators are somewhat expensive to initialize, but a lot cheaper to use. There could be a possible gain of creating this once, and reusing it later on. </li>
<li><strong>Multiple call with same parameters -&gt; Class?</strong> – You call the <code>ClampDigit()</code> quite a few times with the same parameters. Not expensive as such, but possibly it could be better to have a class where you reuse the instantiation for new random digits with the same parameters?</li>
<li><strong>Why does <code>RandomNumber()</code> return a <code>string</code>?</strong> – It kind of baffles me that the <code>RandomNumber()</code> returns a string, and not an actual number. It would make more sense that it actually returned a number.</li>
<li><p><strong>Edge case never reached, and doesn't generate new number</strong> – Within <code>ClampDigit()</code> your description says you should generate a new number, but the code simply reuses one of the number which has proven to be above the <code>upperLimit</code> (and are potentially biased).</p>

<p>However, as you describe, this edge case is not met when the <code>tries</code> is sufficiently high. Not sure if this would have any influence on the distribution with a lower number of <code>tries</code>, or not.</p></li>
<li><p><strong>No bailing out of <code>for</code> loop within <code>ClampDigit()</code></strong> – Potentially your <code>for</code> loop resets <code>result</code> 10 (or <code>bytes.Length</code> times to be exact) before it continues and returns a result. By adding <code>&amp;&amp; result == -1</code> to the end condition you could bail out once you find a candidate. Could potentially reduce the running speed down to 1/10th of current speed.</p></li>
</ul>

<p>So in general your code looks good, and seems to give a better distribution than the default distribution when reducing the range significantly. But I'm a little unsure about the performance speed and cost if the range is increased, and why you've chosen to return the number as a string. All in all, interesting and well written code!</p>
    </div>