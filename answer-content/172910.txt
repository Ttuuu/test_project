<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>For overall issues, these jump out:</p>

<ol>
<li><code>s[i].is_alphabetic() &amp;&amp; i &lt; s.len()</code> can panic, because you access the value before checking the length, it would have to be <code>i &lt; s.len() &amp;&amp; s[i].is_alphabetic()</code>.</li>
<li><code>is_alphabetic</code> considers lots of things alphabetic that you probably don't want. If you <a href="https://doc.rust-lang.org/std/primitive.char.html#method.is_alphabetic" rel="noreferrer">look at the docs</a> the examples include <code>assert!('äº¬'.is_alphabetic());</code> which probably isn't what you want.</li>
</ol>

<p>For Rust itself:</p>

<ol>
<li>Rather than converting the string to a vector of chars, it's easier to use an iterator. In your case it needs to be an iterator that can <code>.peek</code> so you can stop before consuming the character.</li>
<li>Pattern-matching can make the readability of checking the vowels vs others easier, and it allows you to collapse the logic in your first <code>if</code>. The matches also allow you to cleanly create and define the <code>suffix</code> value earlier, and avoid the usage of the problematic <code>is_alphabetic</code> function.</li>
</ol>

<p>Here's an updated implementation:</p>

<pre><code>let mut chars = input.chars().peekable();
let mut new_s = String::new();
while let Some(c) = chars.next() {
    let suffix = match c {
        'a' | 'e' | 'i' | 'o' | 'u' =&gt; {
            new_s.push(c);
            String::from("-hay")
        }
        'a'...'z' | 'A'...'Z' =&gt; {
            format!("-{}ay", c)
        }
        _ =&gt; {
            new_s.push(c);
            continue;
        }
    };

    while let Some(&amp;c) = chars.peek() {
        match c {
            'a'...'z' | 'A'...'Z' =&gt; {
                chars.next();
                new_s.push(c);
            }
            _ =&gt; break,
        }
    }

    new_s += &amp;suffix;
}
println!("{}", new_s);
</code></pre>
    </div>