<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I have been silently waiting for you to post this for a while. I was working on something nearly identical to this, and almost posted my stuff a couple of weeks ago, but I wasn't sure of how to hook the events on the connection object without housing all of the event procedures inside the <code>UnitOfWork</code>. That just didn't seem right to me, so I decided I would wait just a little longer in hopes that you would randomly revisit your old code, and boy am I glad I did. The object model of this API is exactly what it needs to be (much like .NET's <code>System.Data' / 'System.Data.Common</code>). </p>

<p>Saying that, there is one thing that I would to address, so, lets get into it. </p>

<p>The idea of a <em>unit of work</em>, is to encapsulate a transaction(s), i.e. track the objects affected by actions performed on the database and then <em>commit</em> or <em>rollback</em> the changes made by those actions. This means that without transactions, the <code>UnitOfWork</code> is virtually useless. </p>

<p>In both of <code>IUnitOfWork_Commit</code> and <code>IUnitOfWork_Rollback</code>, you are ignoring any errors associated with provider transaction support. This makes <code>UnitOfWork</code> a bit misleading, because the client code may not account for the fact that a particular provider does not support the use of transactions. If this is so, then it may full well be assumed that transaction usage is permitted, because nothing in the API indicates otherwise. Say that several updates/deletes/inserts are performed, but then, it is determined that those actions need to be rolled back...except...they can't be...and what's done is done. </p>

<p>I think it might be better to block, the usage of <code>UnitOfWork</code> by raising an error if the connection's provider does not support transactions. This would prevent client code from assuming anything, and force them to use an <code>IDbConnection</code> directly instead. You could implement one of your <code>Error.GuardXxxxx</code> methods in the UoW's contructors, <code>FromConnectionString</code> and <code>Create</code> like so: </p>

<pre><code>'@Description("Raises a run-time error if the specified connection does not support usage of transactions.")
Public Sub GuardNoTransactionSupport(ByVal connection As IDbConnection, _
Optional ByVal Source As String = "SecureADODB.Errors", _
Optional ByVal message As String = "Provider does not support transactions.")
    GuardExpression Not SupportsTransactions(connection.AdoConnection), Source, message
End Sub

'Returns false If the TRANSACTION_PROPERTY_NAME does not exist in the connection's properties collection
Public Function SupportsTransactions(ByVal connection As ADODB.Connection) As Boolean

    Const TRANSACTION_PROPERTY_NAME As String = "Transaction DDL"

    On Error Resume Next 
    SupportsTransactions = connection.Properties(TRANSACTION_PROPERTY_NAME)
    On Error GoTo 0

End Function
</code></pre>

<p>Then <code>FromConnectionString</code> and <code>Create</code> Become: </p>

<pre><code>Public Function FromConnectionString(ByVal connString As String) As IUnitOfWork

    Dim db As IDbConnection
    Set db = DbConnection.Create(connString)
    Errors.GuardNoTransactionSupport db 

    Dim provider As IParameterProvider
    Set provider = AdoParameterProvider.Create(AdoTypeMappings.Default)

    Dim baseCommand As IDbCommandBase
    Set baseCommand = DbCommandBase.Create(provider)

    Dim factory As IDbCommandFactory
    Set factory = DefaultDbCommandFactory.Create(baseCommand)

    Set FromConnectionString = UnitOfWork.Create(db, factory)

End Function

Public Function Create(ByVal db As IDbConnection, ByVal factory As IDbCommandFactory) As IUnitOfWork
    Errors.GuardNonDefaultInstance Me, UnitOfWork
    Errors.GuardNullReference factory
    Errors.GuardNullReference db
    Errors.GuardExpression db.State &lt;&gt; adStateOpen, message:="Connection should be open."
    Errors.GuardNoTransactionSupport db  

    Dim result As UnitOfWork
    Set result = New UnitOfWork
    Set result.CommandFactory = factory
    Set result.Connection = db

    Set Create = result
End Function
</code></pre>
    </div>