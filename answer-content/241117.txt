<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>cmd.Cmd</h3>

<p>Although <code>argparse()</code> could be abused to provide some of the desired functionality, it isn't the right tool.  For example, it is designed to exit when an error is detected, such as an unrecognized command or missing argument.  </p>

<p><a href="https://docs.python.org/3.7/library/cmd.html#module-cmd" rel="nofollow noreferrer"><code>cmd</code></a> in the standard library is a much better tool for this.  Writing a command interpreter is as simple as coding a subclass of <code>cmd.Cmd</code> and defining "do_command" methods for each command you need, e.g. <code>do_view()</code>, <code>do_download()</code>, etc.  Here's an example based on your code, but the "do_command()" methods just print something.</p>

<pre><code>import cmd 

class StatShell(cmd.Cmd):
    intro = '\n'.join([
        "\t" + "*"*60,
        "\t\t***  Welcome - Football Stats generator  ***",
        "\t" + "*"*60,
        "",
        "\tType help or ? to list commands,",
        "\t\tor help command to get help about a command."
    ])
    prompt = "CLIStats: "


    def do_download(self, arg):
        """Download statistics: download LEAGUE SEASON TYPE"""
        arg = arg.split()
        if len(arg) == 3:
            league, season, type = arg
            print(f"downloading {league} {season} {type}")
        else:
            self.error("bad 'download' command.")


    def do_exit(self, arg):
        """Exit the interpreter."""
        print("exiting ...")
        return True


    def do_view(self, arg):
        """view leagues or seasons: view [LEAGUE] """
        if arg:
            league = arg[0]
            print(league,'seasons: ...')

        else:
            print('leagues ...')


def main():
    StatShell().cmdloop()
</code></pre>
    </div>