<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I would call this "more idiomatic" but I'm still not satisfied with it. Rust uses Iterators in a lot of ways, e.g. look at this implementation:</p>

<pre class="lang-rust prettyprint-override"><code>pub fn num_digits(num: i32) -&gt; Vec&lt;i32&gt; {
    let mul = if num &lt; 0 { -1 } else { 1 };
    num.to_string()
        .chars()
        .filter_map(|x| x.to_digit(10))
        .map(|x| (x as i32) * mul)
        .collect()
}
</code></pre>

<p>The <code>mul</code> variable is just for determining if you want negative or positive numbers.</p>

<p>Because <code>i32</code> implements the <a href="https://doc.rust-lang.org/std/fmt/trait.Display.html" rel="nofollow noreferrer"><code>Display</code> trait</a> you can call <code>to_string</code> on it, which will give you a String representation of the <code>i32</code>.<br>
Next is just iterating of the characters of the String and trying to convert them to a digit. <code>-</code> will be ignored, because it is not a digit and <code>filter_map</code> will filter all Results, that will return a <code>Err</code>. The next thing is to convert the numbers to a <code>i32</code> (because <code>to_digit</code> gives an <code>u32</code>) and either making them negative if the original number was negative or staying positive.</p>

<p><code>collect</code> will put all the numbers into a collection, in this case a <code>Vec</code> because the type can be deduced by Rust (because of the return type)</p>
    </div>