<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Naming variables</h2>

<p>The usual rule of variable names in <code>snake_case</code> applies, i.e. <code>energyFunctional</code> would become <code>energy_functional</code>. Class names on the other hand should be written in <code>CamelCase</code>. I don't mind using single capital letters for matrices.</p>

<p>Why use <code>a,b</code> for discrete indices? I would use one of <code>i,j,k,l,n,m,p,q,r</code>.</p>

<p>Use descriptive names: e.g. <code>energies</code> instead of <code>E</code>.</p>

<h2>Merging conditions</h2>

<p>Instead of</p>

<pre><code>if delta_E &lt; 0:
    s *= -1
    Energy += delta_E
    Mag += 2*s
elif random.random() &lt; expBeta[delta_E]:
    s *= -1
    Energy += delta_E
    Mag += 2*s
</code></pre>

<p>you could simply write</p>

<pre><code>if delta_E &lt; 0 or random.random() &lt; expBeta[delta_E]:
    s *= -1
    Energy += delta_E
    Mag += 2*s
</code></pre>

<p>which is easier to read.</p>

<h2>String formatting</h2>

<p>Use the sweet <code>f-strings</code>.</p>

<pre><code>sweep_time = int(time.time() - start_time)
print(f"{sweeps} monte carlo sweeps completed in {sweep_time} seconds")
</code></pre>

<h2>Logging warnings</h2>

<p>Consider using the <code>logging</code> library. I'd write warnings to <code>stderr</code>, but it's up to you, <a href="https://stackoverflow.com/questions/1430956/should-i-output-warnings-to-stderr-or-stdout">see</a>.</p>

<pre><code>import sys

print("Warning: Number of sweeps exceeded 10000", file=sys.stderr)
print("         setting number of sweeps to 10000", file=sys.stderr)
</code></pre>

<p>Truncating it to a single line allows for easier parsing later.</p>

<pre><code>print("Warning: Number of sweeps truncated to 10000.", file=sys.stderr)
</code></pre>

<h2>Refactorisation</h2>

<p>If performance wasn't the primary goal, I'd introduce a few new functions.
I'd separate the timing part anyway.</p>

<pre><code>start_time = time.time()
energies, mags = monte_carlo(n, state, energy, mag, beta, sweeps)
elapsed_seconds = int(time.time() - start_time)
print(f"{sweeps} monte carlo sweeps completed in {elapsed_seconds} seconds")
</code></pre>

<h2><code>monte_carlo</code></h2>

<p>Applying these ideas, the <code>monteCarlo</code> function becomes the following.</p>

<pre><code>def monte_carlo(n, state, energy, mag, beta, sweeps):
    if sweeps &gt; 10000:
        print("Warning: Number of sweeps truncated to 10000.", file=sys.stderr)
        sweeps = 10000

    exp_betas = np.exp(-beta*np.arange(0,9))

    energies = np.zeros(sweeps)
    mags = np.zeros(sweeps)
    for t in range(sweeps):
        for tt in range(n*n):
            j = random.randint(0, n-1)
            k = random.randint(0, n-1)
            s = state[j,k]

            neighbour_sum = (state[(j-1)%n, k] +
                             state[j, (k-1)%n] + state[j, (k+1)%n] +
                             state[(j+1)%n, k])
            energy_diff = 2*s*neighbour_sum

            if energy_diff &lt; 0 or random.random() &lt; exp_betas[energy_diff]:
                s *= -1
                energy += energy_diff
                mag += 2*s

            state[j, k] = s

        energies[t], mags[t] = energy, mag

    return energies, mags
</code></pre>
    </div>