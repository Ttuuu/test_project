<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First, let me review some of of the code you have</p>

<pre><code>public function getTodoList()
{
    return $this-&gt;oConnection-&gt;query('SELECT * FROM t_todolist')-&gt;fetchAll();
}
</code></pre>

<p>This is actually all the code you need for this task. Just one line. Thanks PDO being not an ordinary database driver like mysqli. You can check other PDO wonders in my <a href="https://phpdelusions.net/pdo" rel="nofollow noreferrer">article</a></p>

<p>There is also one important issue that should be fixed in the controller</p>

<pre><code>public function index($aRequest)
{
    $connection = new Database; // whatever you have to supply a database connection
    $oModel = new todoModel($connection);
    $aTodoList = $oModel-&gt;getTodoList();
    return ['type' =&gt; 'view', 'view' =&gt; 'view/index.tpl', 'data' =&gt; 
    ['aTodoList' =&gt; $aTodoList]];
}
</code></pre>

<p>You may check the above article in order to learn why it is very important to create a database connection only once instead of making each model to create its own.</p>

<p>Now, to the template.</p>

<p>First off, there is <strong>absolutely nothing wrong</strong> with having some PHP code in a template. PHP is a template language after all, and a good one. All you need is to keep an eye on your template and make sure that all PHP code does in it is actually related to the output only. You can only make it a bit prettier and safer</p>

<pre><code>&lt;ul id="todo_list_ul"&gt;
&lt;?php foreach ($aTodoList as $aTodo): ?&gt;
    &lt;!-- list here --&gt;
    &lt;li&gt;
       &lt;?= htmlspecialchars($aTodo['todo']) ?&gt;
       &lt;a href="" class="todo_update"&gt;update&lt;/a&gt; &lt;a class="todo_delete"&gt;
         delete
       &lt;/a&gt;
    &lt;/li&gt;
&lt;?php endforeach ?&gt;
&lt;/ul&gt;
</code></pre>

<p>However, to answer your question literally, you will need a <strong>dedicated template engine</strong>, like <a href="https://twig.symfony.com/doc/2.x/intro.html#installation" rel="nofollow noreferrer">Twig</a>. Twig has many good features compared to raw PHP. One of them is <strong>autoescaping</strong>. There is one critical flaw in your current template, namely </p>

<pre><code>&lt;li&gt;&lt;?php echo $aTodo['todo'];?&gt;
</code></pre>

<p>The moment a malicious user will put some bad Javascript in the todo description, your site will be hacked. So you have to escape HTML when echoing a variable. </p>

<p>Unlike PHP, Twig escapes your values automatically, so a code </p>

<pre><code>&lt;ul id="todo_list_ul"&gt;
{% for aTodo in aTodoList %}
    &lt;li&gt;
        {{ aTodo.todo }}
        &lt;a href="" class="todo_update"&gt;update&lt;/a&gt; &lt;a class="todo_delete"&gt;
          delete
        &lt;/a&gt;
    &lt;/li&gt;
{% endfor %}
&lt;/ul&gt;
</code></pre>

<p>will be automatically protected from XSS</p>
    </div>