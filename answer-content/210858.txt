<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>In addition to the other two answers, I would like to add this:</p>

<h2>Prefer 'streaming' processing whenever possible.</h2>

<p>Currently, you read the entire file to memory and even operate on it.</p>

<p><code>builder.toString().toCharArray()</code> will even make the file be in memory <strong>twice</strong>, once as <code>String</code>, once as <code>char[]</code>.</p>

<p>You could also process it line-by-line (or chunk-by-chunk, as you already use a <code>BufferedReader</code>. Have subresults returned and add it to the total result. That way you are far more memory-efficient.</p>

<h2>Using as much standard Java functionality</h2>

<p>Or, using the java 8 streams, for example:</p>

<pre><code>    Map&lt;Character, Long&gt; frequencyMap = 
    Files.lines(Paths.get(filename))                   //read the lines to a stream
         .flatMap(s-&gt; s.chars().mapToObj(c-&gt;(char)c))  //convert string stream to char stream
         .collect(
                 Collectors.groupingBy(                //collect to a map,
                         Function.identity(),          //key is the char
                         Collectors.counting()));      //value is the count
</code></pre>

<p>If you need a sorted end-result, sort after all the heavy lifting is done, this is better performance-wise:</p>

<pre><code>   SortedMap&lt;Characted, Long&gt; sortedFrequencyMap = 
                              new TreeMap&lt;Character, Long&gt;(frequencyMap);
</code></pre>
    </div>