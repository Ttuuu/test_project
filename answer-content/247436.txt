<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I would suggest a two lines of code solution instead of one. :)</p>
<p>Let me show you first the solution then the explanation.</p>
<h2>Solution</h2>
<pre class="lang-cs prettyprint-override"><code>private static readonly Lazy&lt;IEnumerable&lt;string&gt;&gt; enumValues = new Lazy&lt;IEnumerable&lt;string&gt;&gt;(() =&gt; Enum.GetValues(typeof(AttributesInMethod)).Cast&lt;AttributesInMethod&gt;().Select(option =&gt; option.GetDisplayNameENUM()));

private bool IsFound(IEnumerable&lt;SomeAttribute&gt; attributes) =&gt; attributes.Select(att =&gt; att.Value).Any(enumValues.Value.Contains);
</code></pre>
<h2>Explanation</h2>
<h3>Two methods instead of one</h3>
<ul>
<li>You have two kinds of data
<ul>
<li>A fairly static data, which could be changed only with code change
<ul>
<li>The mapped values of the enumeration</li>
</ul>
</li>
<li>An absolutely dynamic data, which could change by each and every method call
<ul>
<li>The <code>IsFound</code> input parameter</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>You don't need to calculate each and every time the derived data from the enumeration. It should be calculated once and stored for long term.</p>
<h3>Usage of Lazy</h3>
<p><em>"It should be calculated once and stored for long term."</em> &gt; That's where the <code>Lazy&lt;T&gt;</code> type comes into play.</p>
<p>All you have to do is to provide a factory method (how to compute the derived data) and then the calculated information should be stored in a long-living variable. <code>Lazy&lt;T&gt;</code> gives us thread-safety so there is a guarantee that it will be calculated only once.</p>
<h3>How to derive the data</h3>
<pre class="lang-cs prettyprint-override"><code>Enum.GetValues(typeof(AttributesInMethod))
  .Cast&lt;AttributesInMethod&gt;()
  .Select(option =&gt; option.GetDisplayNameENUM())
</code></pre>
<p><code>GetValues</code> returns an <code>Array</code> so you have to call <code>Cast&lt;T&gt;</code> to be able to use Linq operator on it.</p>
<h3>Composing functions</h3>
<p>For each input data check the existence of it in a predefined collection.</p>
<ul>
<li>For each input data: <code>attributes.Select(att =&gt; att.Value)</code></li>
<li>check the existence of it: <code>.Any(... .Contains)</code></li>
<li>in a predefined collection: <code>enumValues.Value</code></li>
</ul>
<p>All you have to do to compose them to create a new higher level function.</p>
    </div>