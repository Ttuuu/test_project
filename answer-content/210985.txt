<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>In this answer I'll comment on things like style, robustness or API design, not analyzing your algorithm.</p>

<pre><code>package com.solo.workouts.collections.Tree;
</code></pre>

<p>The uppercase package name <code>Tree</code> doesn't follow the Java naming conventions, and this will confuse any colleage that you might cooperate with. 99% of the Java folks follow these conventions, so any deviation irritates.</p>

<pre><code>private Comparator comparator;
</code></pre>

<p>You surely got a warning from your IDE about using a raw type. This declaration can benefit from generics, so the compiler already checks that the comparator is capable of comparing objects of type T:</p>

<pre><code>private Comparator&lt;? super T&gt; comparator;
</code></pre>

<p>You need a comparator that can compare objects of type T, e.g. if you want a <code>BinarySearchTree&lt;Double&gt;</code>, a <code>Comparator&lt;Double&gt;</code> or a <code>Comparator&lt;Number&gt;</code> will do, but a <code>Comparator&lt;String&gt;</code> won't. And that's what <code>&lt;? super T&gt;</code> says.</p>

<pre><code>private BinarySearchTree(Comparator comparator , T type) { ... }
</code></pre>

<p>I'd delete this constructor. The <code>T type</code> argument has a confusing name (you have to pass a concrete instance of T and not a type like <code>Double.class</code>) and isn't used at all. Let the <code>private BinarySearchTree(Comparator comparator) { ... }</code> constructor directly do the work.</p>

<pre><code>private BinarySearchTree(Comparator comparator) { ... }
</code></pre>

<p>As already said for the field, add the generics specification here:</p>

<pre><code>private BinarySearchTree(Comparator&lt;? super T&gt; comparator) {
</code></pre>

<p>In the <code>add()</code> method, you have numerous places where you create a new node for the new element: <code>new Node&lt;&gt;(element)</code>. Especially the ones that you create just for the <code>compare()</code> call immediatelay after the comparison become garbage, and it happens repeatedly in the while loop. As all these nodes get exactly the same contents, it's enough to create one <code>Node</code> in the very beginning of the <code>add()</code> method, and use it in all the places instead of creation.</p>

<p>You use <code>Objects.requireNonNull(e);</code> quite often, probably to avoid getting a NullPointerException later, deep inside some method call stack. Of course, this also throws a NullPointerException, but from a controlled place (I'm typically too lazy to do that). It would be even better to always add a descriptive text which variable was null.</p>

<p>Consider rewriting the <code>contains()</code> method like this:</p>

<pre><code>private boolean contains(Node&lt;T&gt; node) {
    Objects.requireNonNull(node);

    Node&lt;T&gt; currentnode = root;
    while(currentnode != null) {
        int value = compare(currentnode, node);

        if(value == 0) {
            return true;
        } else if(value &lt; 0) {
            currentnode = currentnode.leftNode;
        } else {
            currentnode = currentnode.rightNode;
        }
    }
    return false;
}
</code></pre>

<p>I'm using an early return nested inside the <code>while</code> and <code>if</code> constructs. Some developers don't like that, but I think it makes the code clearer. But it's a metter of taste.</p>

<p>And I added curly braces, which I highly recommend to always do. It's too easy to think you can add a second statement to dependent block, but without the braces it's just one conditional statement, and the next one will be executed unconditionally.</p>

<p>One hint on formatting: your formatting is somewhat inconsistent. You're probably formatting your code by hand. IDEs like Eclipse have automated formatting tools, e.g. Ctrl-I corrects the indentation of the block you marked in the source file, and Ctrl-Shift-F completely reformats the code. Very useful, makes formatting easy.</p>

<p>Documentation: for such a general-use class, you should write Javadocs for the public constructors and methods. Your IDE will create the boilerplate, and you have to write down what the methods and their arguments do (not how they do it). Have a look at the Java API specification to get an idea of rather good Javadocs.</p>
    </div>