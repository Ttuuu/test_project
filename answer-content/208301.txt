<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Review</h2>

<p>I find this is a very nice idea that I have <em>borrow</em> from you and while doing this I'd change a couple things to make it more mature and even more flexible.</p>

<hr>

<blockquote>
<pre><code>: IComparable, IEnumerable, IEnumerable&lt;char&gt;, IComparable&lt;string&gt;, IComparable&lt;ValidatedString&gt;, IEquatable&lt;string&gt;, IEquatable&lt;ValidatedString&gt;, IXmlSerializable
</code></pre>
</blockquote>

<p>The base class implements a lot of interfaces which is great because it can be used in many scenarios. There are however some more of them that currently cannot be implemented. By that I mean ones that require the usage of the <code>IEqualityComparer&lt;T&gt;</code> or <code>IComparer&lt;T&gt;</code>. This means I would extract the implementations from this class and put them in two corresponding and separate comparers. Then I would reuse them with the base class to imlement the class' interfaces.</p>

<hr>

<p>I would also unify the naming convention to <code>SomethingString</code>. Currently it's a battle between <em>prefix</em> vs <em>suffix</em> style. I don't know whether the <code>NN</code> style is a convention but I've never seen it before so I'd probably rename it to the full name.</p>

<hr>

<p>The <code>StringAlphaNum</code> type should something like <code>AlphanumericAsciiString</code> becuase it won't work correctly with other cultures. For them using <code>char.IsLetter</code> and <code>char.IsDigit</code> could be more appropriate.</p>

<hr>

<blockquote>
<pre><code> public static implicit operator string(ValidatedString str) =&gt; str?.String;
</code></pre>
</blockquote>

<p>This might be a source of weird bugs so I would definitely make it <code>explicit</code> because otherwise it's very easy to loose the validation when it invisibly gets converted into a <code>string</code>. To me it's like converting <code>double</code> to <code>int</code>. The <code>ValidatedString</code> is stripped off of its additional functionality so it should be an intentional act. Not something that happens <em>somewhere</em> automatically.</p>

<hr>

<h2>Alternative design</h2>

<p>I'd like to suggest a different approach that makes it possible to combine powers of various validations. The following code is ony a model and a rough proof-of-concept so please don't be too harsh with it.</p>

<p>In this design there is only <em>one</em> base class with different generic <em>overloads</em>. I think we actually don't need more then two or three of them. I created only to for this example.</p>

<p>The <code>T</code> of each class is a simple interface that should be implemented by validations:</p>

<pre><code>public interface IStringValidation
{
    bool IsValid(string value);
}
</code></pre>

<p>They can be used to pass them as arguments for method parameters:</p>

<pre><code>void Main()
{
    //Do1(string.Empty); // boom! = NotNullOrWhitespaceException
    Do1("abc");
    //Do2("abc"); // boom! = MinLength10Exception
    Do2("1234567890");

    //Do3("1234567890X"); // boom! = HexException
    Do3("1234567890");
}

public static void Do1(SafeString&lt;NotNullOrWhitespace&gt; value)
{

}

public static void Do2(SafeString&lt;NotNullOrWhitespace, MinLength10&gt; value)
{

}

public static void Do3(SafeString&lt;NotNullOrWhitespace, MinLength10, Hex&gt; value)
{

}
</code></pre>

<p>And here's the actual very general and basic implementation of the first class:</p>

<pre><code>public class SafeString&lt;T&gt;
    where T : IStringValidation, new()
{
    private readonly string _value;

    protected readonly IEnumerable&lt;IStringValidation&gt; _validations;

    private SafeString(string value)
    {
        _validations = new IStringValidation[] { new T() };
        _value = Validate(value);
    }

    protected SafeString(string value, params IStringValidation[] validations)
    {
        _validations = new IStringValidation[] { new T() }.Concat(validations);
        _value = Validate(value);
    }

    protected string Validate(string value)
    {
        return
            _validations.FirstOrDefault(v =&gt; !v.IsValid(value)) is var failed &amp;&amp; failed is null
                ? value
                : throw DynamicException.Create(failed.GetType().Name, "Ooops!");
    }

    public static implicit operator SafeString&lt;T&gt;(string value) =&gt; new SafeString&lt;T&gt;(value);
}
</code></pre>

<p>and two more of these that extend it with further <code>T</code>s and reuse the previous one:</p>

<pre><code>public class SafeString&lt;T1, T2&gt; : SafeString&lt;T1&gt;
    where T1 : IStringValidation, new()
    where T2 : IStringValidation, new()
{
    private SafeString(string value) : base(value, new T2()) { }

    protected SafeString(string value, IStringValidation validation) : base(value, new T2(), validation) { }

    public static implicit operator SafeString&lt;T1, T2&gt;(string value) =&gt; new SafeString&lt;T1, T2&gt;(value);
}

public class SafeString&lt;T1, T2, T3&gt; : SafeString&lt;T1, T2&gt;
    where T1 : IStringValidation, new()
    where T2 : IStringValidation, new()
    where T3 : IStringValidation, new()
{
    private SafeString(string value) : base(value, new T3()) { }

    public static implicit operator SafeString&lt;T1, T2, T3&gt;(string value) =&gt; new SafeString&lt;T1, T2, T3&gt;(value);
}
</code></pre>

<p>I've created three example implementations that look like this:</p>

<pre><code>public class NotNullOrWhitespace : IStringValidation
{
    public bool IsValid(string value) =&gt; !string.IsNullOrWhiteSpace(value);
}

public abstract class MinLengthValidation : IStringValidation
{
    private readonly int _minLength;

    protected MinLengthValidation(int minLength)
    {
        _minLength = minLength;
    }

    public bool IsValid(string value) =&gt; value.Length &gt;= _minLength;
}

public class MinLength10 : MinLengthValidation
{
    public MinLength10() : base(10) { }
}

public abstract class RegexValidation : IStringValidation
{
    protected abstract string Pattern { get; }

    private readonly Lazy&lt;Regex&gt; _regex;

    protected RegexValidation()
    {
        _regex = Lazy.Create(() =&gt; new Regex(Pattern));
    }

    public bool IsValid(string value) =&gt; _regex.Value.IsMatch(value);
}

public class Hex : RegexValidation
{
    protected override string Pattern =&gt; "^[0-9a-fA-F]*$";
}
</code></pre>

<p>I find it's more flexible this way and the user can better see which validations are going to be made like here:</p>

<blockquote>
<pre><code>SafeString&lt;NotNullOrWhitespace, MinLength10, Hex&gt;
</code></pre>
</blockquote>

<p>The string will be validated from left to right - in the same order as the generic parameters.</p>
    </div>