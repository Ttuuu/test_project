<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>If you think you have too many methods you should first know, thats completely fine. Until you can accurately prove that all the extra methods are <em>hurting</em> performance in a measurable way there is no need to refactor. That being said, we can move some of these methods out.</p>

<p><code>baccaratCount()</code> doesnt set anything on state and isn't reliant on any other methods, we can move this one out into a separate file, maybe into a <code>/utils</code> folder?</p>

<p><code>/utils/getBaccaratCount.js</code></p>

<pre><code>export const getBaccaratCount = (n, m) =&gt; {
  //recognizing gong , wong , or pair...
  let number = n.val + m.val;
  if (n.rank === m.rank) {
    return "Pair";
  } else if (n.val === 2 || m.val === 2) {
    if (number === 10) {
      return "Gong";
    } else if (number === 11) {
      return "Wong";
    }
  }
  //regular baccarat counting...
  else if (number &gt;= 10 &amp;&amp; number &lt; 20) {
    if (number &gt;= 20) {
      return (number -= 20);
    }
    return (number -= 10);
  }
  //value is under 10, return the sum.
  return number;
};
</code></pre>

<p>you can then import this into whatever files needs this like:</p>

<p><code>import { getBaccaratCount } from 'path/to/utils/getBaccaratCount</code></p>

<p><code>split()</code> can also be moved out into a separate file just like the above method, except this one will need to import the above method into it since it uses it. We can create a new file just like how we did above. Lastly, <code>compare()</code> can be moved into a separate file and imported like how we did above, this method isn't actually used anywhere in the code you supplied, so maybe it can be removed?</p>

<p>We can also refactor your <code>userInput()</code> methods to be more modular. Instead of creating a new method for each input we could add a <code>name</code> prop to the inputs and have one <code>handleInput(e)</code> method that looks like this:</p>

<pre><code>handleInput(e) {
  this.setState({
    [e.taget.name]: e.target.value
  });
}
</code></pre>

<p>Closing thought, if the method just returns a value and isn't setting state, it can <em>most likely</em> be moved to a utility file.</p>
    </div>