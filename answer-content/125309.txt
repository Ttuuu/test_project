<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>MVC and your structure</h2>

<blockquote>
  <p>Can anyone give me tips on how to improve my overall MVC design / code? I did a lot of reading, but I sure I don't fully understand the concept yet. Any help is appreciated.</p>
</blockquote>

<p>MVC is a bit of a confusing concept, as different people use the term differently. Just looking at the different images at different wikipedia pages shows that MVC can be implemented in different ways. </p>

<p>I don't think that you need to worry about implementing it 100% correct for now, but you should try to follow the basic idea.</p>

<p>So basically, you have three components: </p>

<ul>
<li>The Model: Holds the data and may contain business logic</li>
<li>The View: Displays a representation of the data</li>
<li>The Controller: Processes user input and applies it to the view and/or model</li>
</ul>

<p>You then somehow have to string these components together, which is where the approaches to MVC differ a bit.</p>

<blockquote>
  <p>My view.java file is extremely lengthy..</p>
</blockquote>

<p>That is because it doesn't just display the data, it actually contains program logic, which it shouldn't. It also holds the data (the current state of the game), which it also should not do.</p>

<p><strong>Your Model</strong></p>

<p>First of all, you need to document your code with JavaDoc comments for functions and public fields.</p>

<p>It's not really clear what <code>movesCounter</code> does, or what choice <code>setChoice</code> sets (especially without looking at the implementation).</p>

<p>Your model also has a very generic name. What I would have excepted is something like this:</p>

<pre><code>/**
 * One field of the game grid.
 */
class Field {
    private Symbol owner;

    // getters, setters, constructor
}

/**
 * A represenation of an owner of a field.
 */
enum Symbol {
    X, O, NONE
}

class Game {
    private Field[][] gameGrid;

    /** 
     * sets the owner of the field determined by x and y.
     *
     * @param  owner  the new owner of the field
     * @param  x x coordinate
     * @throws IllegalMoveException in case the owner cannot be set
     */
    public setFieldOwner(Symbol owner, int x, int y) throws IllegalMoveException {
        // ...
    } 

    public boolean isGameOver()
    public Symbol getWinner()
    ...
}
</code></pre>

<p>Now you have a game field, which contains the current state of the game, as well as the logic of the game.</p>

<p>There is room for improvement here, but it should be good enough to show you the general idea.</p>

<p><strong>Your View</strong></p>

<p>As I said above, your view does too much. It should only show the current state of your model, nothing else. </p>

<p>Generally, it might implement an interface such as this:</p>

<pre><code>interface View {

    // when this method is called, you would change the view of the corresponding element
    public setFieldOwner(Symbol owner, int x, int y);

    // here, you could show a message, and disable buttons, show start new game button, etc
    public informWin(Symbol winner);

    public informStart(Symbol winner);
}
</code></pre>

<p><strong>Your Controller</strong></p>

<p>Your controller is fine. If you use a similar approach to the one outlined above, you would need to change it a bit, but generally, it would still perform the same task as now (get input, apply it to model and view).</p>

<p>You should probably add a more generic <code>InputInterface</code> instead of using an <code>ActionListener</code> directly to separate the controller from the concrete GUI. It would probably only have one method: <code>getMove</code>, which should return the desired move in some way (either create a move class, or just use an array).</p>

<p><strong>Misc</strong></p>

<ul>
<li>fields should be private to encapsulate the concrete implementation.</li>
<li>variable names should be camelCase, not snake_case.</li>
<li>always use curly brackets even for one line statements to avoid future bugs and to increase readability.</li>
<li>the name <code>setX</code> generally implies a setter, which would accept an argument and apply it to the object. It's a bit confusing that you use it differently. </li>
</ul>
    </div>