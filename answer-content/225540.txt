<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First on code review we prefer to see code without debug statements or commented out code because that means the code may not be ready for review.</p>

<p><strong>The Good</strong><br>
The class <code>Obstacle</code> seems to be a well defined object, it could be an <a href="https://en.cppreference.com/w/cpp/language/abstract_class" rel="nofollow noreferrer">abstract</a> class if the body for the virtual function <code>onCollision()</code> was not defined by <code>Obstacle</code>. This would force every class that inherits from <code>Obstacle</code> to define the function <code>onCollision()</code>. For a reference on object oriented programming you might want to look at <a href="https://en.wikipedia.org/wiki/SOLID" rel="nofollow noreferrer">SOLID programming</a> which is a set of 5 programming principles that apply to objct oriented programming.</p>

<p>The <code>main()</code> function is nice and concise, however, you might want to implement a <code>draw</code> function that calls the object specific <code>draw</code> functions.</p>

<p><strong>Avoid Using Namespace STD</strong><br>
If you are coding professionally you probably should get out of the habit of using the "using namespace std;" statement. The code will more clearly define where cout and other functions are coming from (std::cin, std::cout). As you start using namespaces in your code it is better to identify where each function comes from because there may be function name collisions from different namespaces. The function cout you may override within your own classes. This <a href="https://stackoverflow.com/questions/1452721/why-is-using-namespace-std-considered-bad-practice">stack overflow question</a> discusses this in more detail.</p>

<p>The <code>using namespace std;</code> really shouldn't be in header files (include files) at all. It can make tracing name collisions very difficult. Keep in mind that you may not always be the one maintaining the code.</p>

<p><strong>The Usage of the this Pointer</strong><br>
Unlike some languages such as PHP, the <code>this pointer</code> is not required when accessing methods or variables within a class. Public methods or variables from other classes need to be referenced by the variable name of the object or <code>CLASSNAME::MethodName()</code> but within a class all methods public or private are known at compile and link time. The only time the <code>this pointer</code> might be necessary is when a <a href="https://stackoverflow.com/questions/993352/when-should-i-make-explicit-use-of-the-this-pointer">variable local to the function</a> has the same name as a variable declared in the class, such as in <code>Obstacle::SetSymbol(char symbol)</code>.</p>

<p><strong>Defining Constants in C++</strong><br>
There are a lot of Magic Numbers in the <code>main()</code> function (10, 15, 20, 100, 800), it might be better to create symbolic constants for all of them to make the code more readable and easier to maintain. These numbers may be used in many places and being able to change them by editing only one line makes maintenance easier. While you do have one symbolic constant defined in <code>snake.h</code> it might be better defined in a more modern way.</p>

<p>Numeric constants in code are sometimes referred to as <a href="https://en.wikipedia.org/wiki/Magic_number_(programming)" rel="nofollow noreferrer">Magic Numbers</a>, because there is no obvious meaning for them.
The values for the variable k are defined by the problem, but it might be better to use symbolic constants rather than raw numbers in the switch statement. That would make the code easier to read and maintain. C++ provides a couple of methods for this, there could be an <code>enum</code>, or they could be defined as constants using <code>const</code> or <code>constexpr</code>. Any of these would make the code more readable. There is a discussion of this on <a href="https://stackoverflow.com/questions/47882/what-is-a-magic-number-and-why-is-it-bad">stackoverflow</a>.</p>

<p>Using <code>#define CONSTANT VALUE</code> is generally discouraged in C++, the use of <code>const</code> or <code>constexpr</code> is prefered over #define. #define is not type safe where <code>const</code> or <code>constexpr</code> is.</p>

<pre><code>#define MAX_SNAKE_SIZE 500
</code></pre>

<p>versus</p>

<pre><code>const int MAX_SNAKE_SIZE = 500;
</code></pre>

<p><strong>One Set of Header and Source for Each Class</strong><br>
The files <code>Box.h</code> and <code>Box.cpp</code> define multiple classes, it would be easier to maintain the code if each class had it's own header and source file. Header files for classes that derive (inherit) from other classes can include the necessary header file. Some tools such as Visual Studio will add the <code>#include</code> statement when you use the class wizard to define a class with a dependency on another class.</p>

<p>The <code>Obstacle</code> class definition would definitely be better in it's own header file.</p>

<p><strong>Use the Type std::size_t When Indexing Arrays</strong></p>

<p>There are a number of for loops that uses a type <code>int or unsigned int</code> variable as the loop control variable and reference <code>box.size()</code>. When indexing into arrays or vectors, it is better to use the type <code>std::size_t</code> which is defined as unsigned int in both C and C++. All of the STD container class <code>size</code> functions return the type <code>std::size_t</code>, there is also another type which can be used <code>std::ptrdiff_t</code>. You can find a discussion of size_t versus ptrdiff_t in this <a href="https://stackoverflow.com/questions/3174850/what-is-the-correct-type-for-array-indexes-in-c">stackoverflow</a> question.</p>

<p>One of the benefits of using an unsigned index is that a negative number can not be used to index an array. Since arrays in C start at zero this is important and prevent bugs. A second possible benefit of using <code>size_t</code> is that it may prevent warning messages about type mismatches from some compilers when using functions such as std::container.size().</p>

<p><strong>Other Type Mismatches</strong><br>
The function <code>bool Snake::CollisionCheck(Obstacle *object)</code> returns both Boolean values and integers, it would be better if it returned only Boolean values.</p>

<p><strong>Bugs</strong><br>
The Snake class has a variable <code>length</code> that is initialized in the constructor but it is never referenced again in the program, it probably should be updated when the snake collides with food.</p>

<p>The Snake class has a function <code>int SnakeLength()</code> that return box.size() that should probably return snake.length (also type mismatch but the variable is being promoted from std::size_t to integer).</p>

<p>When in debug mode the Snake destructor performs non-destructor operations.</p>
    </div>