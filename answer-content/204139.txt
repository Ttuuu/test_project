<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I don't like <code>public void SetName()</code>.  This makes unit testing problematic.  Pass the user name in the constructor.</p>

<p>Bad shuffle use Fischer Yates.</p>

<p>Assign suit and face directly to <code>card</code> and then add it.</p>

<p>I would rather you pass the deck to public void Shuffle() rather than reference global variables.</p>

<p><code>isPlaying</code> is always true.  What purpose does it serve?</p>

<p>This can be done with less code</p>

<pre><code>namespace War
{
    class Program
    {
        static void Main(string[] args)
        {
            War();
        }
        private static Random rand = new Random();
        public static void War()
        {
            Console.WriteLine("What is you name?");
            string name = Console.ReadLine();
            Player human = new Player(name);
            Player computer = new Player("computer");
            bool play = true;
            while (play)
            {
                for (int i = 0; i &lt; 52; i++)
                {
                    if (human.Deck[i].RankI &gt; computer.Deck[i].RankI)
                    {
                        human.Wins++;
                    }
                    else
                    {
                        computer.Wins++;
                    }
                }
                Console.WriteLine($"computer {computer.Wins}  {name} {human.Wins}");
                Console.WriteLine("Enter c to play again");
                string playS = Console.ReadLine();
                if (playS == "c" || playS == "C")
                {
                    human.Deck = Shuffle(human.Deck);
                    computer.Deck = Shuffle(computer.Deck);
                    human.Wins = 0;
                    computer.Wins = 0;
                }
                else
                {
                    play = false;
                }
            }
        }
        public enum suit { Hearts, Diamonds, Clubs, Spades };
        public enum rank { Two, Three, Four, Five, Six, Seven, Eight, Nine, Ten, Jack, Queen, King, Ace };
        public class Card
        {
            private int I;
            public suit Suit { get { return (suit)(I / 13); } }
            public rank Rank { get { return (rank)(RankI); } }
            public int RankI { get { return I % 13; } }
            public override string ToString()
            {
                return $"{Rank} {Suit}";
            }
            public Card (int i)
            {
                I = i;
            }
        }
        public class Player
        {
            public string Name { get; }
            public int Wins { get; set; }
            public List&lt;Card&gt; Deck { get; set; } = new List&lt;Card&gt;();
            public Player(string name)
            {
                Name = name;
                for (int i = 0; i &lt; 52; i++)
                {
                    Card card = new Card(i);
                    Deck.Add(card);
                    //Debug.WriteLine(card.ToString());
                }
                Deck = Shuffle(Deck);
                //Debug.WriteLine("");
                //for (int i = 0; i &lt; 52; i++)
                //{
                //    Debug.WriteLine(Deck[i].ToString());
                //}
            }
        }
        public static List&lt;Card&gt; Shuffle(List&lt;Card&gt; deck)
        {
            List&lt;Card&gt; shuffled = new List&lt;Card&gt;(deck);
            for (int i = shuffled.Count - 1; i &gt; 0; i--)
            {
                int random = rand.Next(i + 1);
                if(random != i)
                {
                    Card cardR = shuffled[random];
                    shuffled[random] = shuffled[i];
                    shuffled[i] = cardR;
                }
            }
            return shuffled;
        }          
    }  
}
</code></pre>
    </div>