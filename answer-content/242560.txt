<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You should let the <code>requests</code> module do the urlencoding for you. It can take a <a href="https://requests.readthedocs.io/en/master/user/quickstart/#passing-parameters-in-urls" rel="nofollow noreferrer">dictionary of parameters</a> and do it right.</p>

<p>Instead of having a variable around which you check in your <code>while</code> condition, I would prefer a <code>while True</code> and an explicit <code>break</code> here. The loop is small enough that this makes it more readable IMO.</p>

<p>I would indeed use <code>yield</code>, or rather <code>yield from</code> here, in order to flatten the response. This means that the next page is only fetched when you have consumed the previous data. If you need to, you could also make it asynchronously using <a href="https://docs.aiohttp.org/en/stable/" rel="nofollow noreferrer"><code>aiohttp</code></a>, have a look at <a href="https://codereview.stackexchange.com/q/237253/98493">this question of mine</a> which used it or the documentation I linked.</p>

<p>You can also use <a href="https://2.python-requests.org/en/master/api/#requests.Response.raise_for_status" rel="nofollow noreferrer"><code>response.raise_for_status</code></a> to raise an exception if the status code is not 2XX. Note that any code after a <code>raise</code> is not accessible, so your <code>payload['has_more'] = False</code> and <code>return</code> will never run (unless you run it in a debugger or something).</p>

<p>Python has an official style-guide, <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">PEP8</a>, which you are following (nice!). One thing it does not recommend but I would nevertheless encourage you to do is not using unnecessary parenthesis in <code>if</code> statements. Python is not C.</p>

<pre><code>def fetch_paginated_data(url, query, timeout=0):    
    params = {"q": query}
    while True:
        response = requests.get(url, params=params)
        response.raise_for_status()
        data = response.json()
        if data and data['data']:
            yield from data['data']
        if not data['has_more']:
            break
        url = data['next_page']
        time.sleep(timeout)
</code></pre>

<p>Here I left the interface as is. If you are free to change it, I would consider taking <code>params</code> directly as an argument or even collect all keyword arguments (except for the timeout, which I also gave a defualt value) directly into a dictionary with <code>**params</code>. The latter would give you the very nice interface:</p>

<pre><code>data = fetch_paginated_data("example.com", q="FooBar", timeout=3)
</code></pre>

<p>Instead of <code>if data and data['data']:</code> you could also just use a <code>try..except</code> block. This will be slightly more performant if the response usually has this key:</p>

<pre><code>try:
    yield from data['data']
except (KeyError, TypeError):  # for dict, list
    pass
</code></pre>

<p>You should definitely add a <a href="https://www.python.org/dev/peps/pep-0257/" rel="nofollow noreferrer"><code>docstring</code></a> describing what this function does. Especially your naming the timeout a rate can be confusing for other people reading your code, or yourself in half a year.</p>
    </div>