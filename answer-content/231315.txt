<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here are some things that may help you improve your program</p>

<h2>Use consistent formatting</h2>

<p>The code as posted has irregular indentation, making it not so easy to read.  Assembly language programs are typically very linear and neat.  Also, I personally don't use tab characters in my code so that it looks the same everywhere (including printing), but that's a personal preference.</p>

<h2>Provide the complete program</h2>

<p>The program is missing the definition of <code>sys_exit</code> (which should have a value of 60).  I'd suggest also telling reviewers how you've compiled and linked the program.  Here's what I used:</p>

<pre><code>nasm -o rowcol.o -f elf64 rowcol.asm
ld -o rowcol rowcol.o
</code></pre>

<h2>Document register use</h2>

<p>The comments in your program are generally quite good, but one thing lacking is documentation on how the registers are being used, which is one of the most important aspects to assembly language programming.  The x86 architecture is unlike many others in that particular instructions require particular registers.  For that reason, it's useful to identify when you'll need to use such instructions and base the register usage around that.</p>

<h2>Avoid slow instructions</h2>

<p>Although special-purpose instructions such as <code>loop</code> and <code>repnz scasb</code> seem appealing, they are, in fact, relatively slow.  Instead, it's usually much faster (and not that many more code bytes) to do things with the more generic instructions.</p>

<h2>Use address multipliers for efficiency</h2>

<p>We can greatly simplify getting a pointer to the environment list into a register:</p>

<pre><code>mov rbp, rsp            ; use rbp for stack pointer
mov rcx, [rbp + 0]      ; get argc
lea rbx, [rbp+8+8*rcx]  ; rbx now points to env
</code></pre>

<h2>Understand environment variables</h2>

<p>In Linux, there is a difference between shell variables and environment variables.  Environment variables are what your program is searching, but the <code>LINES</code> and <code>COLUMNS</code> variables are shell variables that are set by the shell but typically <em>not</em> as environment variables.  See <a href="https://stackoverflow.com/questions/22588272/getenv-not-working-for-columns-and-lines">this question</a> for details.</p>

<h2>Use an IOCTL</h2>

<p>The reliable way to get the screen dimensions in Linux is to invoke the <code>TIOCGWINSZ</code> <code>ioctl</code> call.  In C++ it would might look like this:</p>

<pre><code>#include &lt;sys/ioctl.h&gt;
#include &lt;unistd.h&gt;
#include &lt;iostream&gt;

int main () {
    struct winsize w;
    ioctl(STDOUT_FILENO, TIOCGWINSZ, &amp;w);
    std::cout &lt;&lt; "lines = " &lt;&lt; w.ws_row &lt;&lt; "\ncolumns = " &lt;&lt; w.ws_col &lt;&lt; '\n';
}
</code></pre>

<p>So we just need to put that into assembly language.  First, some constants:</p>

<pre><code>sys_ioctl equ 0x10
STDOUT_FILENO   equ 1
TIOCGWINSZ equ 0x5413
</code></pre>

<p>Now the <code>winsize</code> structure:</p>

<pre><code>struc winsize
    .ws_row:     resw   1
    .ws_col:     resw   1
    .ws_xpixel:  resw   1
    .ws_ypixel:  resw   1
endstruc

section .bss
w   resb winsize_size   ; allocate enough for the struc
</code></pre>

<p>Finally the call:</p>

<pre><code>mov edx, w
mov esi, TIOCGWINSZ
mov edi, STDOUT_FILENO
mov eax, sys_ioctl
syscall
; do stuff with window size...
</code></pre>

<p>If the call was successful (that is, if <code>eax</code> is 0) then the <code>winsize</code> structure is filled in with the current dimensions.</p>
    </div>