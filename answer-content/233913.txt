<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The standard library find functions return the <code>.end()</code> iterator for the container if they fail to find anything. We could follow the same convention, instead of using <code>std::optional</code>.</p>

<p>Rather than nesting the checks, we could split it into two separate loops, and use  <code>std::find_if</code> from the <code>&lt;algorithm&gt;</code> header, something like this:</p>

<pre><code>auto const is_in_range = [&amp;] (int item) { return std::abs(item - zero) &lt; range; };

auto const first = std::find_if(data.begin(), data.end(), is_in_range);

if (first == data.end())
    return data.end(); // found nothing

auto const second = std::find_if(std::next(first), data.end(), is_in_range);

if (second != data.end())
    return data.end(); // found a second entry

return first;
</code></pre>
    </div>