<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<pre><code>var writeDown = {
    delay: 110,
    add: null,
    div: document.getElementById('playArea'),
    log: function() {
        var args = arguments;
        if (args.length == 0) {
            args = [''];
        }
        var div = this.div;
        setTimeout(function() {
            //console.log(args[0]);
            div.innerHTML = args[0] + "&lt;br/&gt;" + div.innerHTML;
        }, this.delay);
</code></pre>

<p>What are you doing with the arguments? You seem to be taking a roundabout method to have log optionally take a single parameter. But it's not clear why logging without any arguments would make any sense.</p>

<pre><code>        if (this.add == null) {
            this.add = this.delay;
        }
        this.delay += this.add;
</code></pre>

<p>You've done this by scheduling a series of events to happen later and later from now. That's kinda clever but not something that you should do in a JavaScript context. A better way would be to structure your code so that a single function is called repeatedly to perform logic so that the processing is ongoing rather than done all upfront.</p>

<pre><code>    },

    updateDiv: function(msg, div) {
        setTimeout(function() {
            //console.log(msg, div);
            div.innerHTML = msg;
        }, this.delay);
    },

    updateDiv_delay: function(msg, div) {
        setTimeout(function() {
            document.getElementById(div).innerHTML = msg;
        }, this.delay);
    },
</code></pre>

<p>These very similar functions as well as the similar code above is begging to be combined.</p>

<pre><code>    updateDiv_color: function(color, div) {
        setTimeout(function() {
            //console.log(color, div);
            document.getElementById(div).style.background = color;
        }, this.delay);
    }
}


var Diamond = function(d_name, d_id) {

    var name = d_name;
    var diamond = document.getElementById(d_id);

    var bases = {
        first: false,
        second: false,
        third: false,
        home: false
    };
</code></pre>

<p>When elements have a sequential interpretation, you are usually better of using numbers rather than names. Bases should be an array not an object. </p>

<pre><code>    var players = {
        first: false,
        second: false,
        third: false,
        home: false
    };
</code></pre>

<p>Instead of storing players like this, put everything in the bases array. Use null or false for no player, and the player's name otherwise.</p>

<pre><code>    this.clear = function() {
        bases = {
            first: false,
            second: false,
            third: false,
            home: false
        };
        players = {
            first: false,
            second: false,
            third: false,
            home: false
        };
        this.updateBases();
        writeDown.updateDiv('', diamond);
    }
</code></pre>

<p>You should use the clear function inside this constructor so that you don't have to duplicate its contents.</p>

<pre><code>    this.onBase = function(base_amt, PlayerName) {
</code></pre>

<p>Either use variable_like_this or VariablesLikeThis or variablesLikeThis. Avoid mixing styles. Also base_amt isn't really clear what it means.</p>

<pre><code>        var return_runs = 0;
        switch (base_amt) {
        ...
</code></pre>

<p>Your code to determine the new bases and runs is way too complicated. Your code should look something like:</p>

<pre><code> for each base
      if man on base, move forward base_amt places
             if move is past home, score a run
             otherwise set new position
</code></pre>

<p>You should never need to write such repetitive code as you wrote above.</p>

<pre><code>        var man_on = "",
            base_names = ['first', 'second', 'third'];

        for (var i = 0; i &lt; 4; i++) {
            if (players[base_names[i]] != null &amp;&amp; players[base_names[i]]) {
                man_on += players[base_names[i]] + " is on " + base_names[i] + " base &lt;br/&gt;";
            }
        }
</code></pre>

<p>If you take my advice about using arrays instead of objects for keeping track of bases this code will be much simpler.</p>

<pre><code>        writeDown.updateDiv(man_on, diamond);
        this.updateBases();
        return return_runs;
    }

    this.updateBases = function() {
        for (base in bases) {
            if (bases[base] == true) {
</code></pre>

<p>Don't == true, just use if(bases[base]</p>

<pre><code>                writeDown.updateDiv_color('#F00', base);
            }
            else {
                writeDown.updateDiv_color('#AAA', base);
            }
        }
    }


    this.playGame = function(TeamA, TeamB, innings) {
        var score_div = document.getElementById('score');
        writeDown.updateDiv(TeamA.name + ": &lt;span id='" + TeamA.name + "'&gt;" + TeamA.getScore() + "&lt;/span&gt;&lt;br/&gt;" + TeamB.name + ": &lt;span id='" + TeamB.name + "'&gt;" + TeamB.getScore() + "&lt;/span&gt;&lt;hr&gt;" + "Outs: &lt;span id='outs'&gt;0&lt;/span&gt;&lt;br/&gt;" + "Inning: &lt;span id='inning'&gt;1&lt;/span&gt;", score_div);

        for (var i = 0; i &lt; innings; i++) {
            writeDown.log("&lt;br/&gt;&lt;b&gt;INNING " + (i + 1) + "&lt;/b&gt;&lt;br/&gt;");
            writeDown.updateDiv_delay("Top of " + (i + 1), 'inning');
            if (TeamA.teamUp()) {
</code></pre>

<p>As far as I can tell teamUp never returns false. Its also deceiving because I'd expect something like that in an if to be answering a question not running a complete half-inning. Neither the name nor how it's used hint that the function does that.</p>

<pre><code>                writeDown.updateDiv_delay("Bottom of " + (i + 1), 'inning');
                writeDown.log(TeamA.name + " are out &lt;br/&gt;");
                this.clear();
                TeamA.resetOuts();
                writeDown.log("");
                if (TeamB.teamUp()) {
                    writeDown.log(TeamB.name + " are out&lt;br/&gt;&lt;br/&gt;");
                    this.clear();
                    TeamB.resetOuts();
                    writeDown.log("");
                }
            }
        }
    }

}

var Player = function(pitcher, name) {
    var name = (name == undefined) ? "Nothing" : name;
    var balls = 0;
    var strikes = 0;

    this.getName = function() {
        return name;
    }

    this.atBat = function() {
        var pitch = pitcher.show_pitch();
        var random = Math.floor(Math.random() * 1000);
        var swing_rate = 500 - (75 * strikes);

        if (random &lt; swing_rate) { //swing
            strikes += 1;
            writeDown.log(name + " swung and missed.");
            writeDown.log(name + " has " + strikes + " strikes.");
            if (strikes &gt;= 3) {
                strikes = 0;
                balls = 0;
                writeDown.log(name + " struck out");
                return {
                    out: 1,
                    type: 0
                };
            }
        }
        else if (random &lt; 880) { //wait for pitch
            writeDown.log(name + " watches the pitch.");
            if (pitch == "Strike") {
                strikes += 1;
                writeDown.log(name + " has " + strikes + " strikes.");
                if (strikes &gt;= 3) {
                    strikes = 0;
                    balls = 0;
                    writeDown.log(name + " struck out");
                    return {
                        out: 1,
                        type: 0
                    };
                }
            }
            if (pitch == "Ball") {
                balls += 1;
                writeDown.log(name + " has " + balls + " balls.");
                if (balls &gt;= 4) {
                    balls = 0;
                    strikes = 0;
                    writeDown.log(name + " has been walked");
                    return {
                        out: 0,
                        type: 1
                    };
                }
            }
</code></pre>

<p>You have code checking for strike outs in two places. You should move that code out of the if(random) block so that it can be shared.</p>

<pre><code>        }
        else if (random &lt;= 1000) { //hit ball
            balls = 0;
            strikes = 0;
            var hit = "Single";
            if (random &gt; 940 &amp;&amp; random &lt; 970) {
                hit = "Double";
            }
            else if (random &gt;= 970 &amp;&amp; random &lt; 995) {
                hit = "Triple";
            }
            else if(random &gt;= 995){
                hit = "Homerun";
            }
            writeDown.log(name + " hit a " + hit);
            var hit_type = 1;
            if (hit == "Double") hit_type = 2;
            if (hit == "Triple") hit_type = 3;
            if (hit == "Homerun") hit_type = 4;
            writeDown.log(name + " going to base");
            return {
                out: 0,
                type: hit_type
            };
        }

        //writeDown.log(name + " waiting for next pitch");
        return this.atBat();
    }
}
</code></pre>

<p>This function would be simpler if you separated out the logic deciding whether it was a strike/ball/single/double/triple/home run into a separate function and just decided what the consequences would be.</p>

<pre><code>var Pitcher = function(team) {
    var types = ["Ball", "Strike"];
    var Team = team;
    this.show_pitch = function() {
        var random = Math.floor(Math.random() * (types).length);
        writeDown.log();
        writeDown.log(Team.name + " pitcher threw the ball.");
        return types[random];
    }
}


var Team = function() {

    var amt_of_players = 9;
    var players = [];
    var pitcher = new Pitcher(this);
    var otherPitcher = null;
    var outs = 0;
    var score = 0;
    var stadium = null;
    var player_up_to = 0;

    this.name = "Nobody's";

    this.createTeam = function(TeamName, Opponent, Diamond) {
        stadium = Diamond;
        otherPitcher = Opponent.getPitcher();
        this.name = (TeamName == undefined) ? "Nothing" : TeamName;
        for (var i = 0; i &lt; amt_of_players; i++) {
            players[i] = new Player(otherPitcher, "Player " + (i + 1) + " on " + this.name);
        }
        return this;
    }
</code></pre>

<p>Passing Opponent is slightly odd here. It implies that a team can only have a single opponent which isn't true to how teams work.</p>

<pre><code>    this.teamUp = function() {
        for (var i = player_up_to; i &lt; players.length; i++) {
            var atBat = players[i].atBat();
            outs += atBat.out;
            score += stadium.onBase(atBat.type, players[i].getName());
            writeDown.updateDiv_delay(score, this.name);
            writeDown.updateDiv_delay(outs, 'outs');
            if (outs &gt;= 3) {
                player_up_to = (i + 1) % players.length; //start with next player;
                return true;
            }
        }

        if (outs &gt;= 3) {
            player_up_to = 0;
            return true;
        }
        else {
            player_up_to = 0;
            return this.teamUp();
        }
    }

    this.getScore = function() {
        return score;
    }

    this.resetOuts = function() {
        outs = 0;
        writeDown.updateDiv_delay(outs, 'outs');
    }

    this.getPitcher = function() {
        return pitcher;
    }
}

var TeamA = new Team();
var TeamB = new Team();
var Stadium = new Diamond("Citi Field", 'move');

TeamA.createTeam("Yankees", TeamB, Stadium);
TeamB.createTeam("Mets", TeamA, Stadium);

Stadium.playGame(TeamA, TeamB, 9);

writeDown.log("GAME OVER!");
</code></pre>
    </div>