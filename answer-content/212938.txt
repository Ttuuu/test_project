<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>General considerations</h3>

<p>You are writing a "denylist". There's some clean and simple denylist rules that can help rule out a lot of things already. One of these rules is denying URLs based on their scheme alone.</p>

<p>A few examples for schemes that you may not have considered:<br>
<code>steam://</code>, <code>file://</code>, <code>sftp://</code>, <code>chrome://</code>, <code>about://</code> </p>

<p>Most of these are URLs you most likely want to block. In that case "inverted matching" behaviour is really useful.</p>

<hr>

<p>Furthermore denylists usually tend to be used for "overblocking out of caution". I'm not sure how that's for your exact use-case, but <strong>if</strong> you want that to happen, making your patterns as general as possible is a great idea :)</p>

<hr>

<p><strong>URI vs. URL</strong>:<br>
Something to additionally keep in mind here: URI stands for "Uniform Resource Identifier" and URL for "Uniform Resource Locator". Your code specifically exposes a <code>Uri</code>, not a <code>Url</code> overload for matching. This implies that one should be able to blacklist things like the following URIs:</p>

<pre class="lang-none prettyprint-override"><code>git@github.com:username/repository.git
mailto:username@example.com
irc://#c-sharp@freenode
</code></pre>

<p>If your class is only intended to deal with URLs, you should only expose an overload for <code>Url</code> :)</p>

<h3>Personal preferences</h3>

<p>I personally very much prefer to use factory methods over constructors to validate arguments. YMMV, but I expect constructors to not throw exceptions.</p>

<p>I also prefer to add braces wherever they delimit a block. I can understand the omission for the argument checking though.</p>

<h3>Implementation considerations</h3>

<p>I like that you're using a lot of intermediate variables. Some minor naming nitpicks could be had there, but I think this code will get the most benefit from using tuples:</p>

<pre><code>var (scheme, hostAndPath) = SplitSchemeHost(pattern);
var (host, path) = SplitHostPath(hostAndPath);
</code></pre>

<p>This allows you to push the index matching behaviour into these methods and keep it out of the constructor. (Minor nitpick: 3 is a magic number in the <code>hostAndPath</code> creation)</p>

<p>Aside from that this code is very clean already. I'd maybe not create the patterns within the interpolated strings, but given the simplicity here it seems appropriate to do so.</p>
    </div>