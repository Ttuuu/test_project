<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Make it faster</h2>

<p>This is only improvements on the algorithm you have used.</p>

<p>There are a few ways to improve the performance. The majority are minor a few % points improvement but due to the complexity ~<span class="math-container">\$O(3^n)\$</span> quickly sum up to be worth the effort. </p>

<h2>The last step</h2>

<p>There is a very common mistake in recursive code that will nearly always give a huge performance gain (30-40% in this case).</p>

<p>First think about why you are using a recursive function. In this case you are using it to hold the current <code>cur</code> combination until it is complete. In other words you are using the recursive call to place <code>cur</code> on a stack, the stack being the call stack. The call stack is easy to use (transparent) but comes with the cost of stacking everything within the functions context, including all that is not relevant to the next step.</p>

<p>The common error in recursion is to place the exit clause at the beginning of the function. 
In the snippet below, you recurse at <code>#A</code> with <code>cur + x</code> which pushes a new context to the call stack, then at point <code>#B</code> you check to see if <code>cur + x</code> now as <code>cur</code> is the final length to exit. </p>

<p>So at point <code>#A</code> you have all the information needed to know whether or not to exit, thus wasting the creation on a new context.</p>

<h3>Redundant recursion call</h3>

<pre><code>  // For seven digit number (ignoring 9) the following calls combine 3280
  const combine = (cur, n) =&gt; {
    if (cur.length === digits.length) { // code point #B
      res.push(cur);      
      return;
    }
    [...strDigits[digits[n]]].forEach(x =&gt; combine(cur + x, n + 1)); // code point #A
  };
</code></pre>

<h3>Exit one recursion step earlier</h3>

<p>To avoid that extra call by testing for the length early</p>

<pre><code>  // For seven digit number (ignoring 9) the following calls combine 1093 times
  const FINAL_LEN = digits.length - 1
  const combine = (cur, n) =&gt; {
       if (cur.length === FINAL_LEN) { // only one char remaining to add
           [...strDigits[digits[n]]].forEach(x =&gt; res.push(cur + x));

       } else { [...strDigits[digits[n]]].forEach(x =&gt; combine(cur + x, n + 1)) }
  };
</code></pre>

<p>So for a 7 digit number (ignoring "9") the complexity is <span class="math-container">\$O(3^n)\$</span> saving 2187 needless pushes to the call stack. About a 30-40% saving in performance.</p>

<h2>Example <strong>~40%</strong> performance improvement</h2>

<p>The following example has a <strong>~40%</strong> improvement in performance when processing a set of random number strings in the range 2 - 79999999. (I did note that as the range grew there was a small drop in the improvement with a ~37% for 10 digits, and 34% for 12 digits and is likely due to the array size growth and memory management overhead)</p>

<p>Other improvements.</p>

<ul>
<li>Avoid capturing (closure) of function's <code>combine</code> state by using for loops.</li>
<li>Using an pre processed array of digits, avoiding the need to build the array <code>[...strDigits[digits[n]]]</code></li>
<li>Convert the digits string to numbers and use indexed array to lookup characters to reduce JS hashing to locate items in <code>strDigits</code>  </li>
</ul>

<p>The rest of the changes are just style as performance testing iteration required many versions and my style slowly intruded into the final iteration</p>

<p>I moved <code>ALPHAS</code> previously <code>strDigits</code> outside the function because that is my style (avoid repeated processing) and does not provide an improvement. You would normally capture it in a IIF closure.</p>

<pre><code>const ALPHAS = ",,abc,def,ghi,jkl,mno,pqrs,tuv,wxyz".split(",").map(a =&gt; [...a]);
function letterCombinations(numStr) {
    const alphas = ALPHAS; // local scope reference for shallower scope search
    const nums = [...numStr].map(Number);
    const res = [];
    const count = nums.length - 1;
    (function combine(n, cur) {
        if (n === count) {
            for (const char of alphas[nums[n]]) { res.push(cur + char) }
        } else {
            for (const char of alphas[nums[n]]) { combine(n + 1, cur + char) }
        }
    })(0, "");
    return res;
}
</code></pre>

<h2>Functional</h2>

<p>My distaste for functional code has another example of why it is to be avoided and decried at every opportunity. You functional code a an order of magnitude slower than your imperative solution. </p>

<p>Not only was it slow but the fans on the machine kicked in so I looked at the load. There was the equivalent to an extra core running near flat out (JS GC and memory management threads) and power consumption jumped by <strong>20W</strong>!!! (thats a 3rd of a solar panel) over running the tests without the functional solution.</p>

<p>The list below shows the comparative results for set of random digits to 8 digits long. (an operation is one test cycle)</p>

<pre><code>BM67....: Time:  3,875µs OPS: 258 100% Total time:  3,798ms for 980 operations
OP imp..: Time:  6,370µs OPS: 156  60% Total time:  6,307ms for 990 operations
OP func.: Time: 84,988µs OPS:  11   4% Total time: 82,439ms for 970 operations
</code></pre>
    </div>