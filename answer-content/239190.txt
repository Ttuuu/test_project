<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You're going the right path, but to master OOP think about the logical division of things. <code>Hands</code>  and <code>Decks</code> can indeed be seen as objects, but you've kept functions like <code>display_all_cards_and_values</code>, <code>restart_game</code>, and <code>continue_playing</code> separate---these sound like aspects of a <code>Game</code> to me. Some of your classes also contain methods and data that don't seem to relate to them; <code>print("\n********************\nNEW GAME BEGINS NOW!\n")</code> doesn't seem like a very <code>Deck</code> thing. The initial shuffle of the deck (in <code>__init__</code> sounds like a <code>Deck</code> method: <code>def shuffle(self) -&gt; None: random.shuffle(self.deck)</code>.</p>

<p>So what I would say is to try to turn (almost) everything into objects. If you have functions that just format strings or that transform sequences somehow, then make them separate functions, but as you force yourself to think of more things as objects it's going to get increasingly easy to structure things, and you'll realise that there are a lot of natural pairings to be made. You can also look for parts where you repeat yourself, and try to generalise as much as you can out of those parts (e.g. your if-statements in <code>drop_win</code>, which contain the same 4â€“5 lines with only minor differences).</p>

<p>Smaller advice:</p>

<ul>
<li><p>your <code>values</code> is basically an enum, so you can use an enum instead.</p></li>
<li><p>list comprehensions are fast, use them:</p>

<pre><code>self.deck = []
for rank in self.ranks:
    for suit in self.suits:
        self.deck.append((rank, suit))
</code></pre>

<p>-&gt;</p>

<pre><code>self.deck = [rank, suit for itertools.product(ranks, suits)]
</code></pre></li>
<li><p>if you're using Python version &gt;= 3.6, utilize f-strings!</p>

<pre><code>print("{} cards: {}".format(player, self.hand))
</code></pre>

<p>-&gt;</p>

<pre><code>print(f"{player} cards: {self.hand}")
</code></pre>

<p>and you can even add conditionals</p>

<pre><code>print(f"{player} cards: {self.hand if not hide else self.hand[0:-1]}")
</code></pre></li>
</ul>
    </div>