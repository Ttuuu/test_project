<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I wrote about Pythonic constructs in an other answer, so I'll focus in introducing helpful modules in this one. All in all, I'd say that converting the input to <code>Claim</code> objects is wasting resources and you should focus on your intermediate <code>matrix</code> representation instead. Or maybe as intermediate representation for documentation purposes, but you don't need to store them all at once in memory.</p>

<p>As such, I would only use the <code>re</code> module to parse a line and immediately store it into the matrix.</p>

<p>Such matrix should not be pre-allocated and allowed to be arbitrarily large if need be. For such cases, the <code>collections</code> module features two helpful classes: <code>defaultdict</code> and <code>Counter</code>.</p>

<p>Lastly, the <code>fileinput</code> module make it easy to use a/several file names on the command line or standard input.</p>

<p>My take on this would be:</p>

<pre><code>import re
import fileinput
from collections import namedtuple, defaultdict, Counter


INPUT_PATTERN = re.compile(r'#\d+ @ (\d+),(\d+): (\d+)x(\d+)')


class Claim(namedtuple('Claim', ['x', 'y', 'width', 'height'])):
    @property
    def horizontal(self):
        return range(self.x, self.x + self.width)

    @property
    def vertical(self):
        return range(self.y, self.y + self.height)


def parse_input(stream):
    for line in stream:
        match = INPUT_PATTERN.match(line)
        if match:
            yield Claim(*map(int, match.groups()))


def claim_fabric(claims):
    fabric = defaultdict(Counter)
    for claim in claims:
        for line in claim.horizontal:
            fabric[line].update(claim.vertical)
    return fabric


def count_overlaping_claims(fabric):
    return sum(
            claims &gt; 1
            for line in fabric.values()
            for claims in line.values())


if __name__ == '__main__':
    fabric = claim_fabric(parse_input(fileinput.input()))
    print(count_overlaping_claims(fabric))
</code></pre>
    </div>