<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'll try to offer an alternative solution to your problem.</p>

<p>The linked kata contains the following piece of information</p>

<blockquote>
  <p>You are given an odd-length array of integers, in which all of them are the same, except for one single number</p>
</blockquote>

<p>This means, that the array is guaranteed to contain <em>even number of same elements</em>. </p>

<p>This fact could be leveraged to achieve a very elegant solution using the XOR operator:</p>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="true">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>const arr = [17, 17, 3, 17, 17, 17, 17];

// XOR together every value inside arr
const answer = arr.reduce((acc, value) =&gt; acc ^= value, 0);

console.log(answer);</code></pre>
</div>
</div>


<p>The complexity of this algorithm is <em>O(n)</em>, as opposed to using sort, which runs in <em>O(nlogn)</em> at best (in most cases).</p>

<p>Now, the reason this works is that XOR operator has a useful property of "cancelling out" the same elements. In other words:</p>

<blockquote>
  <ol>
  <li>n ^ n = 0</li>
  <li>n ^ 0 = x</li>
  </ol>
</blockquote>
    </div>