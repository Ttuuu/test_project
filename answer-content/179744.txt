<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The code looks reasonably clean and simple, but there are some minor things which in my opinion could be improved.</p>

<hr>

<blockquote>
<pre><code>        // your code goes here
</code></pre>
</blockquote>

<p>This comment is a message to you about how to use the template which some system (Leetcode?) has given you. It's not a message to the maintenance programmer about your code, so you should delete it as soon as you've implemented that method.</p>

<hr>

<blockquote>
<pre><code>        if (board == null || board.GetLength(0) &lt; 9 || board.GetLength(1) &lt; 9)
        {
            return false;
        }

        // assume that 9 * 9
</code></pre>
</blockquote>

<p>Why <code>return false</code> and not <code>throw new ArgumentException(nameof(board))</code>? Well, ok, personally I'd split out <code>ArgumentNullException</code> and <code>ArgumentOutOfRangeException</code> cases, but the point is that these look like exception conditions rather than "no solution" conditions.</p>

<p>Why <code>assume</code>? Would it not make more sense to require that the board size be exactly 9 x 9?</p>

<hr>

<blockquote>
<pre><code>    private static bool SudokuSolveHelper(char[,] board, int row, int col)
    {
        // base case
        if (row &gt; 8)
        {
            return true;
        }
</code></pre>
</blockquote>

<p>I can figure out what's going on here based on the other code and the context provided in the question, but I think it would be worth a comment explaining <em>why</em> this is the base case, or a method-level doc comment explaining that the method searches in a given order (from which I can infer the base case).</p>

<hr>

<blockquote>
<pre><code>        var availableNumbers = getAvailableNumbers(board, row, col);

        foreach (var option in availableNumbers)
</code></pre>
</blockquote>

<p><code>availableNumbers</code> is used once, so I personally would inline it. However, this is a matter of taste, and I wouldn't be surprised if someone else has previously given you the opposite feedback. What I can say is that the code is consistent about always pulling out these intermediate values, and consistency is good, so well done for that.</p>

<hr>

<blockquote>
<pre><code>    private static HashSet&lt;Char&gt; getAvailableNumbers(char[,] board, int currentRow, int currentCol)
</code></pre>
</blockquote>

<p>Why <code>HashSet&lt;Char&gt;</code>? Firstly, since nothing in the calling code cares about it being a <code>HashSet&lt;&gt;</code>, the principle of coding to the interface rather than the implementation says that this method should return an <code>IEnumerable&lt;&gt;</code>. Secondly, the use of <code>Char</code> rather than <code>char</code> is inconsistent with the method body. I personally prefer to use the keywords for those <code>System.</code> types which have them, but this is again a matter of taste.</p>

<hr>

<blockquote>
<pre><code>        var numbers = new char[] { '1', '2', '3', '4', '5', '6', '7', '8', '9' };
</code></pre>
</blockquote>

<p>There's nothing wrong with using <code>char[]</code>, but <code>string</code> is also an <code>IEnumerable&lt;char&gt;</code>, and it's less fiddly to type and to read <code>var numbers = "123456789";</code>.</p>

<hr>

<blockquote>
<pre><code>            var isDigit = visit != '.';

            if (isDigit)
            {
                available.Remove(visit);
            }
</code></pre>
</blockquote>

<p>This is a microoptimisation. I would be inclined to say that since we know that <code>available</code> doesn't contain <code>'.'</code> we can simplify to</p>

<blockquote>
<pre><code>            available.Remove(visit);
</code></pre>
</blockquote>

<p>and make it easier to see the method as a whole on screen.</p>

<hr>

<blockquote>
<pre><code>        Console.WriteLine(SudokuSolve(board));
</code></pre>
</blockquote>

<p>Is there any reason for writing <code>True</code> rather than the actual solution?</p>

<hr>

<p>Finally, a note on magic numbers. If I asked you to modify this to solve 16 x 16 Sudokus, how much would you need to change? How about 12 x 12 Sudokus, with the blocks being 3 x 4?</p>
    </div>