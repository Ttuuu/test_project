<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The code is understandable, perhaps the naming used in some fields is quite hard to recognize for others who are seeing this code for first time.</p>

<p>Example <code>Adjs</code> (AdjacentVertices) is not intuitive, you are used to see this code and understand why you'd put everything on its place but other person who comes will spend more time getting familiar with it. Another example is <code>Node</code> (I think you mean Vertex) perhaps it is due the difference I perceive between Node (for trees) and Vertex (for general graphs, naturally including trees), technical vocabulary is also relevant.</p>

<p>Your <code>UndirectedGraph</code> class is an <code>UndirectedAdjacencyList</code> i think it is important to mention due the different Graph models that there are.</p>

<h3>With the code.</h3>

<p>You will want to dynamically add edges and vertices in your graph. An alternative would be:</p>

<pre class="lang-cs prettyprint-override"><code>    public List&lt;Node&gt; AdjacencyList { get; } //where Node is means Vertex
</code></pre>

<p>In addition, I think it would be better to handle Edges as a list rather than an array.</p>

<pre class="lang-cs prettyprint-override"><code>    //instead of 
    //private List&lt;Tuple&lt;string, string&gt;&gt; Edges = new List&lt;Tuple&lt;string, string&gt;&gt;();
    private List&lt;Edge&gt; Edges = new List&lt;Edge&gt;();
</code></pre>

<p>At last I propose you the following Idea which may make easier to manage both Vertices and Edges</p>

<pre class="lang-cs prettyprint-override"><code>    private SortedDictionary&lt;Vertex, List&lt;Edge&gt;&gt; AdjacencyList;
</code></pre>

<p>So that there will not be any repeated Vertex in your graph.</p>

<p>Thanks for reading my answer, Hope it helps</p>
    </div>