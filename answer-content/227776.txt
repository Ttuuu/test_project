<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>As a learner, I think you have done a great job.  Here's some suggestions:</p>

<h1>General</h1>

<ul>
<li><p>Don't use multiple <code>public:</code> labels.  It seems your intent is to split the declarations into groups, but that can be achieved better with <code>// iterator</code>, <code>// element access</code>, etc.</p></li>
<li><p>Some member types are missing: <code>size_type</code>, <code>difference_type</code>, <code>value_type</code>.</p></li>
<li><p>Reverse iterator support is missing.</p></li>
<li><p>Try to avoid nonstandard functions like <code>_aligned_malloc</code>.  Use portable features — <code>::operator new</code>, for example.  It would be beneficial for you to wrap the allocation and deallocation into functions, so you can have an easier time transitioning when you add allocator support in the future.</p></li>
</ul>

<h1>Constructors, assignment operators, and the destructor</h1>

<ul>
<li><p>Instead of writing the default constructor, it may be better to use in-class member initializers to ensure that the data members aren't left uninitialized accidentally.  And it can (and should) be made <code>noexcept</code>:</p>

<pre><code>Vector() noexcept = default;
</code></pre>

<p>(Note: <code>= default</code> <em>default-initializes</em> the data members by default, which means data members of type, say, <code>int</code>, will be left uninitialized.  There's no problem if you use in-class member initializes as I said above.)</p></li>
<li><p><code>size_t</code> should be <code>std::size_t</code> or (properly defined) <code>size_type</code>.  It's not common practice in C++ to make parameters <code>const</code> — at least not in the declaration.  So instead of</p>

<pre><code>explicit Vector(const size_t size);
</code></pre>

<p>go with</p>

<pre><code>explicit Vector(size_type count);
</code></pre>

<p>(you may noticed that I used <code>count</code> instead of <code>size</code> to avoid name shadowing.)</p></li>
<li><p>There's the <code>(count, value)</code> constructor and the <code>(iterator, iterator)</code> constructor.  Where are they? :)  And the <code>std::initializer_list</code> constructor.</p></li>
<li><p>The move constructor and assignment operator should be unconditionally <code>noexcept</code> because they don't actually move elements.</p></li>
<li><p>This is usually phrased as <code>reinterpret_cast</code>:</p>

<pre><code>_container(static_cast&lt;T*&gt;(_aligned_malloc(sizeof(T)* size, alignof(T))))
</code></pre>

<p>and by the way, I like to put nontrivial code (like memory allocation) in the function body to avoid order dependency problems, but that is purely a matter of taste.</p></li>
<li><p>Don't reimplement the library:</p>

<pre><code>try
{
    for (size_t i = 0; i &lt; size; i += 1)
    {
        new (_container + i) T();
    }
}
catch (...)
{
    cleanup();
    throw;
}
</code></pre>

<p>can be written as</p>

<pre><code>std::uninitialized_value_construct_n(_container, size);
</code></pre>

<p>which is simple to understand and much less error prone.  The <code>try</code> block can be removed because the standard library takes care of exception safety.</p></li>
<li><p>Similarly,</p>

<pre><code>if constexpr (std::is_trivially_copyable_v&lt;T&gt;)
{
    memcopy_trivially(_container, other._container, other._size);
}
else
{
    try
    {
        for (_size = 0; _size &lt; other._size; _size += 1)
        {
            emplace_back_internal(std::forward&lt;T&gt;(other._container[_size]));
        }
    }
    catch (...)
    {
        cleanup();
        throw;
    }
}
</code></pre>

<p>can be rewritten as</p>

<pre><code>std::uninitialized_copy_n(other.begin(), other.end(), _container);
</code></pre>

<p>the trivial copy optimization should be handled by any decent implementation, so you don't need to worry about it yourself—:)</p></li>
<li><p>Use the <a href="https://stackoverflow.com/q/3279543">copy and swap idiom</a>.  This saves you a lot of boilerplate.  The move constructor can be simplified:</p>

<pre><code>template &lt;typename T&gt;
Vector&lt;T&gt;::Vector(Vector&amp;&amp; other) noexcept
    :Vector{}
{
    swap(other);
}
</code></pre>

<p>The copy and move assignment operators can be unified:</p>

<pre><code>template &lt;typename T&gt;
auto Vector&lt;T&gt;::operator=(Vector other) noexcept -&gt; Vector&amp;
{
    swap(other);
    return *this;
}
</code></pre>

<p>(the effect of the <code>noexcept</code> here is that move assignment is <code>noexcept</code> while copy assignment is not.  Think of it.)</p></li>
<li><p><code>std::initializer_list</code> assignment operator :)</p></li>
</ul>

<hr>

<ul>
<li><p>This function</p>

<pre><code>template&lt;typename T&gt;
void Vector&lt;T&gt;::cleanup()
{
    if constexpr (!std::is_trivially_destructible_v&lt;T&gt;)
    {
        std::destroy(begin(), end());
    }

    _aligned_free(_container);
}
</code></pre></li>
</ul>

<p>is a standard facility — it should be named <code>clear</code>, made <code>public</code>, and made <code>noexcept</code>.  (Did you just "accidentally" implement a feature?)</p>

<p>Any decent implementation should implement the trivial optimization for <code>std::destroy</code>.  Don't do it yourself.  If your implementation doesn't, you should complain to them ;)  In general, if you are calling a library function, you can be 95% sure that all (relatively) trivial optimizations are implemented.</p>

<p>And you can delegate to <code>erase</code> if you want.</p>

<h1>The <code>assign</code> functions</h1>

<p>Oops, they are missing.</p>

<h1>The member access functions</h1>

<p><code>operator[]</code> should not be made <code>noexcept</code>.  <code>noexcept</code> doesn't just mean "no exceptions" — it actually means "this function won't fail".</p>

<p>Also, you probably need <code>std::launder</code> at some point.</p>

<h1>Capacity</h1>

<p><code>validate</code> is not a standard function and thus should preferably be <code>private</code>.</p>

<p>The logic of the <code>reserve</code> function can be simplified.  I am pretty sure you can avoids the <code>if else if else if else</code> chain by refactoring the code somehow.  And</p>

<pre><code>else
{
    // ?
    throw;
}
</code></pre>

<p>That's dead code, isn't it?  The comment that consists of a single question mark confuses me even more.</p>

<p>Oh, and <code>shrink_to_fit</code>.</p>
    </div>