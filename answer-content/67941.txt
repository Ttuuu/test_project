<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The root idea is to factorize all numbers in the range from 2 to 20 to the prime numbers with their multiplicity and find their production (with the multiplicity). The resulting number must be evenly divisible by all of the numbers from 1 to 20.</p>

<p>Get all primes from the range:</p>

<pre><code>private static int[] GetPrimes(int n)
{
    BitArray a = new BitArray(n + 1, true);

    for (int i = 2; i &lt;= Math.Sqrt(n); i++)
    {
        if (a[i])
        {
            for (int j = i * i; j &lt;= n; j += i)
            {
                a[j] = false;
            }
        }
    }

    List&lt;int&gt; primes = new List&lt;int&gt;();
    for (int i = 2; i &lt; a.Length; i++)
    {
        if (a[i])
            primes.Add(i);
    }

    return primes.ToArray();
}
</code></pre>

<p>This method gets all dividers (with multiplicity) of a given number:</p>

<pre><code>private static IEnumerable&lt;Tuple&lt;int, int&gt;&gt; GetUniqueDividers(long n)
{
    List&lt;int&gt; tmp = new List&lt;int&gt;();
    List&lt;int&gt; pows = new List&lt;int&gt;();
    foreach (int p in Primes)
    {
        while (n != 1)
        {
            long rem = n % p;
            if (rem == 0)
            {
                n /= p;
                if (!tmp.Contains(p))
                {
                    tmp.Add(p);
                    pows.Add(1);
                }
                else
                    pows[tmp.IndexOf(p)]++;
            }
            else
                break;
        }
    }
    return tmp.Select((v, i) =&gt; new Tuple&lt;int, int&gt;(v, pows[i]));
}
</code></pre>

<p>The initialization:</p>

<pre><code>private const int Max = 20;
private static readonly int[] Primes = GetPrimes(Max);
</code></pre>

<p>The method body:</p>

<pre><code>int[] counts = new int[Max + 1];
for (int i = 2; i &lt; counts.Length; i++)
{
    foreach (var div in GetUniqueDividers(i))
    {
        if (counts[div.Item1] &lt; div.Item2)
        {
            counts[div.Item1] = div.Item2;
        }
    }
}

int outNumber = 1;
for (int i = 2; i &lt; counts.Length; i++)
{
    if (counts[i] != 0)
    {
        outNumber *= (int)Math.Pow(i, counts[i]);
    }
}
</code></pre>

<p>Answer is in the <code>outNumber</code> variable.</p>
    </div>