<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Doc comments:</strong></p>

<p>You can be more clear in the doc comment about what the function does:</p>

<ul>
<li>What is the input? (string, path)</li>
<li>Does it return anything? (no)</li>
<li>Does it throw exceptions? (yes, because <code>os.remove</code> and <code>shutil.rmtree</code> may throw)</li>
<li>What is the state after calling the function? (file/folder has been removed, except if there was a permission error or another error)</li>
</ul>

<p><strong>Exceptions:</strong></p>

<p>Someone who calls <code>removeanything("myfile")</code> may expect that <code>myfile</code> does not exist anymore after the function call. However, in case of a permission error, it still does exist. I think this is an exceptional situation, so I recommend that you do not catch the <code>PermissionError</code> and instead propagate it to the caller.</p>

<p><strong>Output:</strong></p>

<p>Currently, the function communicates via print statements. This means that callers of the function have no way of finding out what actually happened. You could add a return value that indicates whether a file, a directory, or nothing was removed. Then you may think about removing the print statement, or enabling/disabling it via function argument, because users may want to remove files silently.</p>

<p><strong>Tests:</strong></p>

<p>It may be useful to separate the single test <code>test_removeanything</code> into multiple tests <code>test_removeanything_deletes_file</code>, <code>test_removeanything_deletes_directory</code>, <code>test_removeanything_handles_permission_error</code>. This way, if a test fails, the test name gives you some more information about what went wrong.</p>

<p>Often, functions that remove directories require them to be non-empty. Therefore, it makes sense to test the removal of both empty and non-empty directories.</p>

<p>If you change <code>removeanything</code> so that the <code>PermissionError</code> propagates to the user, you can use <code>pytest.raises</code> to test whether the exception was raised correctly.</p>

<p><strong>Misc:</strong></p>

<p>I think the name <code>removeanything</code> can be more specific. After all, the function does not remove a CD from my CD drive ;)</p>
    </div>