<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There are three obvious suggestions here.</p>

<h1>Measure!</h1>

<p>First, and most important: develop a timing framework to measure your changes! You can't know if a change is beneficial if all you have is "the old version doesn't pass" and "the new version doesn't pass". </p>

<p>Build a standard set of test cases, and a timing framework, and subject any change to measurement in the timing framework. It's better if the timing is better, otherwise it's not.</p>

<h1>Cache your results</h1>

<p>The examples shown at the hackerrank site specifically include one where the same gene string is repeated twice. So it seems likely that caching your results might provide an obvious performance win. </p>

<h1>Stop using the regex engine</h1>

<p>This is a "maybe." You're using the regex engine to get the <code>findall</code> behavior, which is sensible, since it gives you access to C code that does what you want. But using that engine comes at a price -- regex operations are traditionally slower than string operations. So see if you can write your code to do the same job without using regex calls. </p>

<p>I'm honestly not sure if this will benefit you or not, since the regexes you are using are so simple. But if you pre-compute the minimum offset for each pattern, to allow for overlaps (like "a" -&gt; +1, "aa" -&gt; +1, "ab" -&gt; +2) you should be able to scan using <code>str.find</code> or <code>str.index</code> and get what you want without any <code>re</code> calls.</p>

<h1>Bonus: generator</h1>

<p>Your original question asked about using generators. Because the underlying operation is so expensive, I'd suggest writing a single <code>minmax</code> function that yields both values at the same time (like <code>divmod</code> does). You can feed that function with a generator that yields up the scores:</p>

<pre><code>queries = [input() for _ in range(s)]
low, high = minmax(gene_scores(int(l[0]), int(l[1]), l[2] for l in queries))
</code></pre>

<p>(This has nothing to do with performance. But you wanted to use them, so here's a way!)</p>
    </div>