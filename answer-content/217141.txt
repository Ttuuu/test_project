<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I take it here that you mean “algebra” to mean <a href="https://en.wikipedia.org/wiki/Lambda_calculus" rel="nofollow noreferrer">lambda calculus</a> and by extension, <a href="https://en.wikipedia.org/wiki/Combinatory_logic" rel="nofollow noreferrer">combinatory logic</a>.</p>

<p>The <code>takeStep</code> function is essentially (disregarding side-effects): <span class="math-container">$$
\lambda ab.b
$$</span> in lambda calculus, or in JS in terms of identity (using Haskell Curry’s combinator naming):</p>

<pre><code>I = a =&gt; a
K = a =&gt; b =&gt; a
KI = K(I)
</code></pre>

<p>So as the <code>takeStep</code> function is simply disregarding the first argument, and the <code>walk</code> function calling the second argument with the previous (/initial) value there and then, I’m wondering if you would really be after the <code>B</code>-combinator <span class="math-container">$$
   \lambda fga.f(ga)
$$</span> (or, as JS: <code>B = f =&gt; g =&gt; a =&gt; f(g(a))</code>, often named <code>compose</code>) with possibly the <code>C</code>-combinator <span class="math-container">$$
   \lambda fab.fba
$$</span> (<code>C = f =&gt; a =&gt; b =&gt; f(b)(a)</code>) for reversing the arguments (often named <code>pipe</code> or <code>sequence</code> for <code>f =&gt; g =&gt; a =&gt; g(f(a))</code>).</p>

<p>(I’m not sure if the commutativity of the functions or JS evaluation strategy plays a role here.)</p>

<p>Regarding currying, I wonder if you were thinking of <a href="https://en.wikipedia.org/wiki/Partial_application" rel="nofollow noreferrer">partial application</a> instead.</p>
    </div>