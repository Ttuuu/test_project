<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I see a number of things that may help you improve your program.</p>

<h2>Fix the bug</h2>

<p>Right now, the program purports to generate a sine wave, but when I first played it, it was clear that it contained all kinds of harmonics.  When I examined the waveform using <a href="https://www.audacityteam.org/" rel="nofollow noreferrer">Audacity</a>, the problem was very clear.  Here's the waveform:</p>

<p><a href="https://i.stack.imgur.com/FZa0e.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/FZa0e.png" alt="badSine"></a></p>

<p>The problem is extreme clipping.  In particular, the software is adding an offset which is neither needed nor wanted:</p>

<pre><code>value = (result * 32767 ) + 32767;
</code></pre>

<p>If we modify that line to eliminate the offset:</p>

<pre><code>value = result * 32767;
</code></pre>

<p>The resulting waveform is correct:</p>

<p><a href="https://i.stack.imgur.com/SIDBp.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/SIDBp.png" alt="goodSine"></a></p>

<h2>Don't abuse <code>using namespace std</code></h2>

<p>Putting <code>using namespace std</code> at the top of every program is <a href="http://stackoverflow.com/questions/1452721/why-is-using-namespace-std-considered-bad-practice">a bad habit</a> that you'd do well to avoid.  </p>

<h2>Use <code>&lt;cmath&gt;</code> instead of <code>&lt;math.h&gt;</code></h2>

<p>The difference between the two forms is that the former defines things within the <code>std::</code> namespace versus into the global namespace.  Language lawyers have lots of fun with this, but for daily use I'd recommend using <code>&lt;cmath&gt;</code>.  See <a href="http://stackoverflow.com/questions/8734230/math-interface-vs-cmath-in-c/8734292#8734292">this SO question</a> for details.</p>

<h2>Use the appropriate data type</h2>

<p>It seems that your code is making the assumption that a <code>long</code> is 4 bytes and an <code>int</code> is 2 bytes.  That's not true on my machine or across different compilers.  If you need specifically 2-byte or 4-byte quantities (which this code does), it's better to use the specific size types <code>uint32_t</code> and <code>uint16_t</code> as defined in <code>&lt;cstdint&gt;</code>.</p>

<h2>Simplify your code</h2>

<p>The <code>longWrite</code> code has a number of things I'd suggest changing.  I've already mentioned one, but here's another.  Because the parameter <code>x</code> is passed by value, you are free to do what you want with the copy.  That simplifies the code a lot:</p>

<pre><code>void longWrite(uint32_t x, std::ofstream &amp;myfile)
{
    myfile &lt;&lt; static_cast&lt;uint8_t&gt;(x &amp; 0xff);
    x &gt;&gt;= 8;
    myfile &lt;&lt; static_cast&lt;uint8_t&gt;(x &amp; 0xff);
    x &gt;&gt;= 8;
    myfile &lt;&lt; static_cast&lt;uint8_t&gt;(x &amp; 0xff);
    x &gt;&gt;= 8;
    myfile &lt;&lt; static_cast&lt;uint8_t&gt;(x &amp; 0xff);
}
</code></pre>

<h2>Use an object where appropriate</h2>

<p>Unless the environment in which this code is running is <em>extremely</em> constricted in terms ofmemory space, (an embedded system, for example), it is probably better to use an object (either a <code>class</code> or <code>struct</code>, to represent the output file format.  For example, see <a href="https://codereview.stackexchange.com/questions/105341/writing-computer-generated-music-to-a-wav-file-in-c-follow-up">this C code</a>.  </p>

<h2>Use <code>const</code> or <code>constexpr</code> where practical</h2>

<p>The code uses a number of named constants, which could and should be declared as <code>const</code> or <code>constexpr</code>.  For example, the various text constants could be declared this way:</p>

<pre><code>  constexpr char RIFF[] = "RIFF";
  myfile &lt;&lt; RIFF;
</code></pre>

<p>However, as mentioned before, as a practical matter, this would be part of a structure instead.</p>

<h2>Eliminate "magic numbers"</h2>

<p>Instead of hard-coding the constants 220000 and 176000 in the code, it would be better to use a <code>const</code> or <code>constexpr</code> and name them.</p>

<h2>Initialize variables at declaration</h2>

<p>The code currently contains these lines:</p>

<pre><code>ofstream myfile;
myfile.open (FileName.c_str(), ios::out | ios::binary);
</code></pre>

<p>These could be condensed much more succintly and clearly as this:</p>

<pre><code>  std::ofstream myfile{FileName};
</code></pre>

<p>Note that a <code>std::ofstream</code> can take a <code>std::string</code> filename and that its default flags are already the ones you had specified manually.  </p>

<h2>Use the passed parameters</h2>

<p>At the moment the code takes but then ignores the passed <code>Duratione</code> value using a hardcoded <code>Time</code> variable instead.  </p>

<h2>Think of the user</h2>

<p>The use of a template here is rather suspect.  It will require essentially a duplicate compiled version for every function the user might want.  A more flexible approach would be to pass the function as a parameter.  That would remove the template and change the declaration of the WaveFileWrite function to this:</p>

<pre><code>WaveFileWriter(const std::string&amp; FileName, 
                float Frequency, 
                float Duration, 
                float (*Funktion)(float));
</code></pre>

<p>However, there's little reason to store anything in an object in this case, so I'd be inclined to turn it into a function or function object instead.  I'd also allow for passing in diferent functions for left and right channel.  Here's the function I wrote:</p>

<pre><code>bool WaveFileWriter(const std::string&amp; FileName, float Frequency, float Duration, float (*left)(float), float (*right)(float)) {
    std::ofstream myfile{FileName};
    constexpr uint16_t fullscale{32767};
    const double twoPiF{M_PI*2*Frequency};

    Header hdr{Duration};
    myfile &lt;&lt; hdr;
    for (unsigned t = 0; t &lt;= hdr.subchunk2Size; ++t)
    {
        integerWrite(fullscale * left(twoPiF * t / hdr.sampleRate), myfile);
        integerWrite(fullscale * right(twoPiF * t / hdr.sampleRate), myfile);
    }
    return !myfile.fail();
}
</code></pre>

<p>Here's an example of use:</p>

<pre><code>float decaybell(float t) {
    return std::exp(-0.001*t) * std::cos(t);
}
float harmonic(float t) {
    return 2.0/M_PI * (std::cos(t) + std::cos(3*t)/3 + std::cos(5*t)/5);
}
float square(float t) {
    return 2.0/M_PI * (std::sin(t) + std::sin(3*t)/3 + std::sin(5*t)/5);
}
float silent(float t) {
    return 0;
}

int main()
{
    WaveFileWriter("MyTest.wav", 440, 5, decaybell, square);
}
</code></pre>
    </div>