<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I couldn't run your code, so I can't say how much faster the following will be.</p>

<p>My suggestion is to use NumPy's <a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.loadtxt.html" rel="nofollow noreferrer"><code>loadtxt</code></a> function to get the array of the necessary coordinates. With this function, you can specify <code>skiprows</code> and <code>max_rows</code> parameters to get the necessary rows, 36-45. This should be more efficient than reading all the file in memory. </p>

<p>Here:</p>

<blockquote>
<pre><code>areaAr.append(PolyArea(x[36:41],y[36:41])) 
distance = max(np.abs(x[36]-x[39]),np.abs(x[42]-x[45]))
modifiedarea.append((PolyArea(x[36:41],y[36:41]))/distance)        
</code></pre>
</blockquote>

<p>you calculate <code>PolyArea</code> two times, but it is enough to calculate it only once and then reuse the result. </p>

<p>The final code could lool like this:</p>

<pre><code>for filepath in df['filepath'].iloc[:10708]:
    values = np.loadtxt(filepath, 
                        skiprows=35,
                        max_rows=10)
    x = values[:, 0]
    y = values[:, 1]
    area = PolyArea(x[:5], y[:5])
    areaAr.append(area)
    distance = max(np.abs(x[0] - x[3]), np.abs(x[6] - x[9]))
    modifiedarea.append(area / distance)  
</code></pre>
    </div>