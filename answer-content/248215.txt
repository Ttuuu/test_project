<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I just want to share what I have since I've already implemented this (sort of) in one of my previous projects (it was on ASP.NET), but it can be applied in any other environment. The implementation was similar to CharlesNRice suggestion. However, the requirement was to only have options to export system reports (which is used only one report template) to Pdf, Excel, and Word with a negotiation of having more export options in the future. So this is how I did it :</p>
<p>First the interface :</p>
<pre><code>public interface IExportTo&lt;T&gt;
{
    IExportTo&lt;T&gt; Generate();

    void Download(string fileName);

    void SaveAs(string fileFullPath);
}
</code></pre>
<p>then the container class :</p>
<pre><code>public class ExportTo : IDisposable
{
    private readonly IList&lt;T&gt; _source;

    public ExportTo(IList&lt;T&gt; source)
    {
        _source = source;
    }

    public ExportExcel Excel()
    {
        return new ExportExcel(_source);
    }

    public ExportPdf Pdf()
    {
        return new ExportPdf(_source);
    }
    
    public ExportWord Word()
    {
        return new ExportPdf(_source);
    }
    

    #region IDisposable

    private bool _disposed = false;

    public void Dispose()
    {
        Dispose(true);
        GC.SuppressFinalize(this);
    }

    private void Dispose(bool disposing)
    {
        if (!_disposed)
        {
            if (disposing)
            {
                Dispose();
            }

            _disposed = true;
        }
    }


    ~ExportTo()
    {
        Dispose(false);
    }

    #endregion
}
</code></pre>
<p>I've implemented a class for each export type as we can see in the above class. I'll share one class (I'll simplify it though from the actual class).</p>
<pre><code>public sealed class ExportPdf : IExportTo&lt;T&gt;, IDisposable
{
    private readonly IList&lt;T&gt; _source;

    private ExportPdf() { }

    public ExportPdf(IList&lt;T&gt; source) : this() =&gt; _source = source ?? throw new ArgumentNullException(nameof(source));

    public IExportTo&lt;T&gt; Generate()
    {
        // some implementation 
        return this;
    }

    // another overload to generate by Id 
    public IExportTo&lt;T&gt; Generate(long reportId)
    {
        // do some work 
        return this;
    }

    // Download report as file 
    public void Download(string fileName)
    {
       // do some work 
    }

    public void SaveAs(string fileFullPath)
    {
        throw new NotImplementedException("This function has not been implemented yet. Only download is available for now.");
    }


    #region IDisposable

    private bool _disposed = false;

    public void Dispose()
    {   
        Dispose(true);
        GC.SuppressFinalize(this);
    }


    private void Dispose(bool disposing)
    {
        if (!_disposed)
        {
            if (disposing)
            {
                Dispose();
            }

            _disposed = true;
        }
    }


    ~ExportPdf()
    {
        Dispose(false);
    }

    #endregion
}
</code></pre>
<p><code>Download</code> and <code>SaveAs</code> are different (not the same). <code>Download</code> would download the exported file, while <code>SaveAs</code> would save the object instance. But this was implemented like this because the used dependencies.</p>
<p>Now usage would like this :</p>
<pre><code>new ExportTo(someList)
.Pdf()
.Generate()
.Download(fileName);
</code></pre>
<p>This is how I've implemented in that project, it could be improved, but for business requirements it is enough.</p>
<p>Whenever you need to add a new type of export, just create a new <code>sealed</code> class, then implement <code>IExportTo&lt;T&gt;, IDisposable</code> on that class. Finally, update the container class with the new type (add a method to open a new instance of this method) and you're good to go.</p>
    </div>