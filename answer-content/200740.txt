<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><p>As @bipll mentioned, <code>template</code>s must be fully available everywhere they are used. Maybe move the implementation to the header, or at least add a note that the .cpp file is intended to be included instead of the header, as this is unusual.</p></li>
<li><p>Some operators (<code>*</code>, <code>-&gt;</code>) need <code>const</code> overloads (or need to be made <code>const</code>), as otherwise the contained pointer isn't be accessed from a <code>const</code> context, e.g. a <code>const SmartPtr&lt;T&gt;&amp;</code>.</p></li>
<li><p>Please provide an easier access to the underlying pointer than <code>smart_ptr.operator-&gt;()</code>. There are functions that only accept raw pointers, for which this way of accessing <code>SmartPtr&lt;T&gt;::_ptr</code> gets cumbersome.</p></li>
<li><p>This implementation seems similar to <code>std::shared_ptr</code> in the sense that the <code>SmartPtr</code> is intended to be shared. However, if this "being shared" involves multiple threads, then accesses to <code>RefCount::_count</code> need to be synchronized. (Otherwise you get race conditions.)</p>

<blockquote>
  <p>Sadly, C++98 doesn't offer any help for this in the standard library (as the notion of threads only got formally introduced to C++11), so you have to rely on some external library and/or platform dependent operations.</p>
</blockquote></li>
<li><p><code>nullptr</code> only got introduced in C++11, so a C++98 compiler shouldn't be able to compile this.</p></li>
</ul>
    </div>