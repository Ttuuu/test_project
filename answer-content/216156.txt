<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>welcome to code review and thanks for sharing your code.</p>

<p>You code reveled some misconceptions about the MVC-pattern:</p>

<h2>Model</h2>

<p>The Model is merely a <em>data store</em>. It provides <em>Data Transfer Objects</em> (DTOs), <em>ValueObjects</em>(VOS), <em>Beans</em> or <em>Entities</em> or alike.
Any logic in the model is about persistence, integrity and infrastructure to inform the view about changes. 
In particular the model does <strong>not</strong> contain <em>business logic</em>.</p>

<p>Your model contains business logic (the game end check).</p>

<h2>Controller</h2>

<p>the controller manipulates the model. 
It applies the <em>business logic</em> to the data stored in the model.
In particular it has no knowledge about the <em>view</em>.</p>

<p>In your code the controller interacts with the user by printing lines at the console itself.</p>

<h2>View</h2>

<p>The view displays the models current state and passes the user input to the appropriate method in the controller. 
It <em>may</em> update data in the model directly, but it should not. 
The view should delegate changes to the models state to the controller.</p>

<p>In fact <em>User Interface</em> would be a better name instead of <em>View</em> but then we wouldn't have a 3 letter acronym to reflect the 3 layer architecture... </p>

<p>Your <em>view</em> does not handle user input, it only displays the game field.</p>
    </div>