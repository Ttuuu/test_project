<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>In addition to fine answers <a href="https://codereview.stackexchange.com/a/215187/29485">@Toby Speight</a>, <a href="https://codereview.stackexchange.com/a/215204/29485">@Lundin</a>  and <a href="https://stackoverflow.com/q/55300378/2410359">a related FP question</a>, came up with additional idea/detail.</p>

<p><strong>Spelling*</strong></p>

<p>"Dinosuar" --&gt; "Dinosaur".</p>

<p><strong><a href="https://en.wikipedia.org/wiki/ASCII" rel="nofollow noreferrer">ASCII</a> or not</strong></p>

<p>Could use a lengthy test of the <em>execution character set</em> <code>C11 §5.2.1 3</code></p>

<pre><code>A to Z
a to z
0 to 9
! " # % &amp; ’ ( ) * + , - . / : ; &lt; = &gt; ? [ \ ] ^ _ { | } ~
space character, 
  and control characters representing horizontal tab, vertical tab, and form feed.
some way of indicating the end of each line of text
</code></pre>

<p>Note that <code>$</code>, <code>@</code>, <a href="https://en.wikipedia.org/wiki/Grave_accent" rel="nofollow noreferrer">grave accent</a>, ASCII 127 and various control characters are not mentioned above.</p>

<pre><code>  static_assert(
      'A' == 65 &amp;&amp; 'B' == 66 &amp;&amp; 'C' == 67 &amp;&amp; 'D' == 68 &amp;&amp; 'E' == 69 &amp;&amp; 'F' == 70
          &amp;&amp; 'G' == 71 &amp;&amp; 'H' == 72 &amp;&amp; 'I' == 73 &amp;&amp; 'J' == 74 &amp;&amp; 'K' == 75
          &amp;&amp; 'L' == 76 &amp;&amp; 'M' == 77 &amp;&amp; 'N' == 78 &amp;&amp; 'O' == 79 &amp;&amp; 'P' == 80
          &amp;&amp; 'Q' == 81 &amp;&amp; 'R' == 82 &amp;&amp; 'S' == 83 &amp;&amp; 'T' == 84 &amp;&amp; 'U' == 85
          &amp;&amp; 'V' == 86 &amp;&amp; 'W' == 87 &amp;&amp; 'X' == 88 &amp;&amp; 'Y' == 89 &amp;&amp; 'Z' == 90,
      "Dinosaur: not ASCII A-Z");
  static_assert(
      'a' == 97 &amp;&amp; 'b' == 98 &amp;&amp; 'c' == 99 &amp;&amp; 'd' == 100 &amp;&amp; 'e' == 101
          &amp;&amp; 'f' == 102 &amp;&amp; 'g' == 103 &amp;&amp; 'h' == 104 &amp;&amp; 'i' == 105 &amp;&amp; 'j' == 106
          &amp;&amp; 'k' == 107 &amp;&amp; 'l' == 108 &amp;&amp; 'm' == 109 &amp;&amp; 'n' == 110 &amp;&amp; 'o' == 111
          &amp;&amp; 'p' == 112 &amp;&amp; 'q' == 113 &amp;&amp; 'r' == 114 &amp;&amp; 's' == 115 &amp;&amp; 't' == 116
          &amp;&amp; 'u' == 117 &amp;&amp; 'v' == 118 &amp;&amp; 'w' == 119 &amp;&amp; 'x' == 120 &amp;&amp; 'y' == 121
          &amp;&amp; 'z' == 122, "Dinosaur: not ASCII a-z");
  static_assert('0' == 48, "Dinosaur: not ASCII 0-9");  // 1-9 follow 0 by spec.
  static_assert(
      '!' == 33 &amp;&amp; '"' == 34 &amp;&amp; '#' == 35 &amp;&amp; '%' == 37 &amp;&amp; '&amp;' == 38
          &amp;&amp; '\'' == 39 &amp;&amp; '(' == 40 &amp;&amp; ')' == 41 &amp;&amp; '*' == 42 &amp;&amp; '+' == 43
          &amp;&amp; ',' == 44 &amp;&amp; '-' == 45 &amp;&amp; '.' == 46 &amp;&amp; '/' == 47 &amp;&amp; ':' == 58
          &amp;&amp; ';' == 59 &amp;&amp; '&lt;' == 60 &amp;&amp; '=' == 61 &amp;&amp; '&gt;' == 62 &amp;&amp; '?' == 63
          &amp;&amp; '[' == 91 &amp;&amp; '\\' == 92 &amp;&amp; ']' == 93 &amp;&amp; '^' == 94 &amp;&amp; '_' == 95
          &amp;&amp; '{' == 123 &amp;&amp; '|' == 124 &amp;&amp; '}' == 125 &amp;&amp; '~',
      "Dinosaur: not ASCII punct");
  static_assert(
      ' ' == 32 &amp;&amp; '\t' == 9 &amp;&amp; '\v' == 11 &amp;&amp; '\f' == 12 &amp;&amp; '\n' == 10,
      "Dinosaur: not ASCII space, ctrl");
   static_assert('\a' == 7 &amp;&amp; '\b' == 8 &amp;&amp; '\r' == 13,
      "Dinosaur: not ASCII spaces");
   // Not 100% confident safe to do the following test
   static_assert('$' == 36 &amp;&amp; '@' == 64 &amp;&amp; '`' == 96,
      "Dinosaur: not ASCII special");
</code></pre>

<hr>

<p>[Edit 2019 Dec]</p>

<p>On review, incorporating <a href="https://codereview.stackexchange.com/questions/215113/detecting-unicorn-and-dinosaur-compilers#comment415934_215113">@Deduplicator</a> idea: <code>CHAR_MAX &lt;= INT_MAX</code> is not a strong enough test to avoid trouble with <code>fgetc()</code>, but should use <code>UCHAR_MAX &lt;= INT_MAX</code>.  This makes certain that the number of possible characters returned from <code>fgetc()</code> is less than the positive <code>int</code> range - preventing a collision with <code>EOF</code>.</p>

<pre><code>/*
 *  Insure char is sub-range of int
 *  When char values exceed int, makes for tough code using fgetc()
 */
// static_assert(CHAR_MAX &lt;= INT_MAX, "Dinosaur: wide char");
static_assert(UCHAR_MAX &lt;= INT_MAX, "Dinosaur: wide char");
</code></pre>
    </div>