<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I think the algorithm is a bit inefficient (especially when you get a large number of input ranges). Each time around the while loop you are finding the min value you are checking all the ranges.</p>

<p>Rather than doing this I would build a heap. Then extract the top value from the heap each iteration. The value that was extracted (should be value and original range) you can then pull the next value from the original range and add it to the heap. Rince and repeat.</p>

<p>This converts your <code>O(n.m)</code> to <code>O(n.log(m))</code> (n assume each sorted list has n elements and there are m lists).</p>

<pre><code>std::vector&lt;Range&lt;I&gt;&gt;   topOfEachHeap;
for(auto r: input) {
    topOfEachHeap.emplace_back(r);
    std::push_heap(std::begin(topOfEachHeap), std::end(topOfEachHeap), comp);
}

while (!topOfEachHeap.empty()) {
    std::pop_heap(std::begin(topOfEachHeap), std::end(topOfEachHeap), comp);
    *output = *(topOfEachHeap.back().first);

    ++topOfEachHeap.back().first;
    ++output;

    if (topOfEachHeap.back().empty()) {
       topOfEachHeap.pop_back();
    }
    else {
       std::push_heap(std::begin(topOfEachHeap), std::end(topOfEachHeap), comp);
    }
}
</code></pre>
    </div>