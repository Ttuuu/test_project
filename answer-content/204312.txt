<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>As what @Holger said would be more secure. I have gave it a try, and came up with following using a really simple <a href="https://en.wikipedia.org/wiki/Fluent_interface" rel="nofollow noreferrer">Fluent interface</a></p>

<pre><code>import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Random;

public class PasswordGenerator {

    /**
     * @Author Mr Pro Pop
     * 
     *         This creates a simple secure password
     * 
     * @todo Encryption
     */

    private final ArrayList&lt;Character&gt; UPPERCASE_LETTERS = new ArrayList&lt;&gt;(Arrays.asList('A', 'B', 'C', 'D', 'E', 'F',
            'G', 'H', 'I', 'G', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'));
    private final ArrayList&lt;Character&gt; LOWERCASE_LETTERS = new ArrayList&lt;&gt;(Arrays.asList('a', 'b', 'c', 'd', 'e', 'f',
            'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'));
    private final ArrayList&lt;Character&gt; DIGITS = new ArrayList&lt;&gt;(
            Arrays.asList('0', '1', '2', '3', '4', '5', '6', '7', '8', '9'));
    private final ArrayList&lt;Character&gt; SPECIAL_CHARACTERS = new ArrayList&lt;&gt;(
            Arrays.asList('!', '@', '#', '$', '%', '&amp;', '*', '(', ')', '+'));

    private final int SIZE = 16;
    private final Random random = new Random();

    // Stores all the characters being created to build a password
    private List&lt;Character&gt; characters = new ArrayList&lt;Character&gt;();

    /**
     * The function gets a random character from the array, and adds it to the list
     * 
     * @param count The count of lower case characters to be created
     * @return The current characters in the list
     */
    public PasswordGenerator lowercase(int count) {
        for (int i = 0; i &lt; count; i++) {
            characters.add(LOWERCASE_LETTERS.get(random.nextInt(LOWERCASE_LETTERS.size())));
        }
        return this;
    }

    /**
     * The function gets a random character from the array, and adds it to the list
     * 
     * @param count The count of upper case characters to be created
     * @return The current characters in the list
     */
    public PasswordGenerator uppercase(int count) {
        for (int i = 0; i &lt; count; i++) {
            characters.add(UPPERCASE_LETTERS.get(random.nextInt(UPPERCASE_LETTERS.size())));
        }
        return this;
    }

    /**
     * The function gets a random digit from the array, and adds it to the list
     * 
     * @param count The count of digits characters to be created
     * @return The current characters in the list
     */
    public PasswordGenerator digits(int count) {
        for (int i = 0; i &lt; count; i++) {
            characters.add(DIGITS.get(random.nextInt(DIGITS.size())));
        }
        return this;
    }

    /**
     * The function gets a random special from the array, and adds it to the list
     * 
     * @param count The count of specials characters to be created
     * @return The current characters in the list
     */

    public PasswordGenerator specials(int count) {
        for (int i = 0; i &lt; count; i++) {
            characters.add(SPECIAL_CHARACTERS.get(random.nextInt(SPECIAL_CHARACTERS.size())));
        }
        return this;
    }

    /**
     * Shuffles the characters in the lsit among themselves for randomability that
     * digits and other characters of similar type don't end up being next to each
     * other
     * 
     * @return The current list of password
     */

    public PasswordGenerator shuffle() {
        Collections.shuffle(characters);
        return this;
    }

    /**
     * This fucntion assigns values from the list to a character array and then
     * deletes the list
     * 
     * @return The password that was created
     */

    public char[] getPassword() {
        char[] password = new char[SIZE];
        for (int i = 0; i &lt; characters.size(); i++) {
            password[i] = characters.get(i);
        }
        characters.clear();
        return password;
    }
}
</code></pre>

<p>An example of usage:</p>

<pre><code>   public static void main(String[] args) {
        PasswordGenerator passwordGenerator = new PasswordGenerator();
        for (int i = 0; i &lt; 10; i++) {
            System.out
                    .println(passwordGenerator.uppercase(4).lowercase(6).digits(3).specials(3).shuffle().getPassword());
        }
    }
</code></pre>

<p>Output:</p>

<blockquote>
  <p>!F9F8Hq4yK#)xydw</p>
  
  <p>5u4XaO+++aGkE2go</p>
  
  <p>6oz#ueAr&amp;1z3C%UI</p>
  
  <p>yo!z(8RVyG1(taX9</p>
  
  <p>7!$A)2kxCuZNpi9g</p>
  
  <p>l%!u2vI1FXjm#s9K</p>
  
  <p>!C1beaa2Y!Xt+3Vb</p>
  
  <p>8aQXPb)09!p$Nrfn</p>
  
  <p>P2s(xpNy12UKy%l@</p>
  
  <p>B5rOcw$usU7p+3$B</p>
</blockquote>

<p>This was just a quick example that I wrote in 10 minutes, so it is not in it's perfect form, however it works.</p>

<p>Improvements that you could do are:</p>

<ul>
<li>Use Encryption</li>
<li>Maybe make a function that take parameters of minimum letters,
digits, and so on</li>
<li>wipe data after intention is used (Read below)</li>
</ul>

<hr>

<p><strong>Further notes</strong>
<em>char[] is preferred over String for passwords and here is why</em></p>

<p><strong>Strings are immutable</strong>. Once written, they cannot be overwritten. Whenever a string is created, it will be available in memory until Garbage collector clears. So anyone who has access to the memory can read the value of the string. Since String is used in String pool for reusability, there is pretty high chance that it will remain in memory for the long duration, which poses a security threat. Anyone has access to memory dump can find the password in clear text.</p>

<p>Once you've created the String, if another process can dump memory, there's no way (aside from reflection) you can get rid of the data before garbage collection kicks in. Now garbage collection in Java doesn't happen at any guaranteed interval. The String can thus persist in memory for a long time, and if a process crashes during this time, the contents of the string may end up in a memory dump or some log.</p>

<p><strong>char[] is mutable</strong> and by using them, they reduce the window of opportunity for an attacker, and it's only for this specific type of attack. You can explicitly wipe the data by setting each character to zero once the purpose of the password is served and the password won't be present anywhere in the system, even before garbage collection which reduces the window of opportunity for an attacker, and it's only for this specific type of attack.</p>

<p>If the value of the string is modified then it will end up creating a new string.  <code>(Example: string = null;)</code> So both the original value and the modified value stay in the memory until it is garbage collected. With plain String you have much higher chances of accidentally printing the password to logs, monitors or some other insecure place whereas char[] is less vulnerable. </p>

<p>Consider this:</p>

<pre><code>public static void main(String[] args) {
        Object pass = "Password";
        System.out.println("String: " + pw);

        pass = "Password".toCharArray();
        System.out.println("Array: " + pw);
}
</code></pre>

<p>Prints:</p>

<blockquote>
  <p>String: Password</p>
  
  <p>Array: [C@5829428e</p>
</blockquote>

<p>Example of using reflection</p>

<pre><code>private static void clearString(String password) {
    try {
        Field value = String.class.getDeclaredField("value");
        value.setAccessible(true);
        char[] chars = (char[]) value.get(password);
        Arrays.fill(chars, '*');
    } catch (Exception e) {
        throw new AssertionError(e);
    }
}
</code></pre>

<p>I also suggest working with hashed or encrypted passwords instead of plain text.</p>

<p><strong>Facts:</strong> </p>

<p>Java itself recommends using <code>getPassword()</code> method of <code>JPasswordField</code> which returns a <code>char[]</code> and deprecated <code>getText()</code> method which returns password in clear text stating security reason. It's good to follow advice from Java team.</p>

<p>I also remember that it was in one of google interview questions.</p>

<blockquote>
  <p>Note: These information has been taken from different resources and
  summarized</p>
</blockquote>
    </div>