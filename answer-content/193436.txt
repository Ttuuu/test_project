<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>transform, or map ?</h2>

<p>I wouldn't name this function <code>transform</code>, because it's very different from that stl algorithm. <code>std::transform</code> can be used to modify a range in place, and can be called with either unary or binary operations. What you implement is generally called <code>map</code> and has its roots in functional languages; so I would call it <code>tuple_map</code>, for instance. Then the convention is to put the function first in the argument list, and the sequence second.</p>

<p>Or, you could try to implement <code>transform</code>, but then it gets tricky, because there are three "semantic inputs" to be considered: the tuple, its elements and the function signature. I haven't had the time to consider it thoroughly, but I believe that using <code>decltype(fn(std::get&lt;0&gt;(tuple)))</code> as a semantic clue is a good approximation. If it's <code>void</code>, you know that the semantic is at the tuple level; if it's an lvalue reference, you use <code>std::tie</code> to return a tuple of references; if it's an rvalue reference, <code>std::forward_as_tuple</code> is the most adapted; and if it's a value, you can return a new tuple. </p>

<h2>A sketch for <code>transform</code></h2>

<p>For instance, with C++ 17 enabled:</p>

<pre><code>#include &lt;tuple&gt;
#include &lt;type_traits&gt;

template &lt;typename Fn, typename Argument, std::size_t... Ns&gt;
auto tuple_transform_impl(Fn&amp;&amp; fn, Argument&amp;&amp; argument, std::index_sequence&lt;Ns...&gt;) {
    if constexpr (sizeof...(Ns) == 0) return std::tuple&lt;&gt;(); // empty tuple
    else if constexpr (std::is_same_v&lt;decltype(fn(std::get&lt;0&gt;(argument))), void&gt;) {
        (fn(std::get&lt;Ns&gt;(argument)),...); // no return value expected
        return;
    }
    // then dispatch lvalue, rvalue ref, temporary
    else if constexpr (std::is_lvalue_reference_v&lt;decltype(fn(std::get&lt;0&gt;(argument)))&gt;) {
        return std::tie(fn(std::get&lt;Ns&gt;(argument))...);
    }
    else if constexpr (std::is_rvalue_reference_v&lt;decltype(fn(std::get&lt;0&gt;(argument)))&gt;) {
        return std::forward_as_tuple(fn(std::get&lt;Ns&gt;(argument))...);
    }
    else {
        return std::tuple(fn(std::get&lt;Ns&gt;(argument))...);
    }
}

template &lt;typename Fn, typename... Ts&gt;
auto tuple_transform(Fn&amp;&amp; fn, const std::tuple&lt;Ts...&gt;&amp; tuple) {
    return tuple_transform_impl(std::forward&lt;Fn&gt;(fn), tuple,
                          std::make_index_sequence&lt;sizeof...(Ts)&gt;());
}
</code></pre>

<h2>Helper function</h2>

<p>I can't see how you would avoid to use a helper function (besides using a <code>tuple_transform</code> function, which you're currently implementing).</p>

<p>You'll see I use a forwarding reference for the function argument, since it can be expensive to copy.</p>

<p>I keep the const lvalue reference for the tuple argument, because it's more simple (a forwarding reference wouldn't allow to constrain the type, and <code>sizeof...</code> wouldn't be possible either), but mainly because I can't see a case where the tuple would be consumed differently as a rvalue reference.</p>
    </div>