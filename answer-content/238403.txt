<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The first comment has to do with your question about <strong>Results</strong>.  IMO you are far better off to implement your ArrayToX and XToArray subroutines as functions.  Also, I tried to use your module (<code>Class Module</code> or <code>Standard Module</code>? =&gt; recommend <code>ClassModule</code>) and had difficulty understanding how to use the Filters.  In fact, I never did figure it out.  I wrote a test subroutine in a <code>Standard Module</code> to try and use the code.  (I would suggest you could improve your question by providing a similar example of how the class is intended to be used.)</p>

<p>Here's the test subroutine I was working with:</p>

<pre><code>Option Explicit 

Public Sub Test()
  Dim testObject As ArrayOps
  Set testObject = New ArrayOps

  Dim arrayOfNumbers(12)
  Dim numbers As Long
  For numbers = 0 To 11
     arrayOfNumbers(numbers) = numbers
  Next

  Dim result As String
  testObject.ArrayToString arrayOfNumbers, result

  Dim result2 As String
  result2 = testObject.ArrayToString2(arrayOfNumbers)

  Dim result3 As String
  result3 = testObject.ArrayToString2(arrayOfNumbers, testObject.FilterIncludeEquals2(3, 0))

End Sub
</code></pre>

<p>The first use of <code>ArrayToString</code> is the version in the posted code.  I've added some functions to your module to support the code for <code>result2</code> and <code>result3</code>.  </p>

<p>To my eye, the code reads easier using <code>Functions</code> rather than <code>Subroutines</code>.  Also, using <code>ByRef</code> to allow passed-in values to change is probably not the best practice - especially for arrays.  As the user, I probably do not want to pass in an array and get back a modified version.  The user might have wanted to retain the original array for other downstream logic.  Using a <code>Function</code> will make the input versus output very clear.   </p>

<p>The code for the added <code>ArrayToString2</code> and <code>FilterIncludeEquals2</code> are basically copies of the original Subroutine with some edits and comments.  They are:</p>

<pre><code>    Public Function ArrayToString2(ByRef originalArray As Variant, Optional filter As Collection = Nothing, _
                         Optional colSeparator As String = ",", Optional rowSeparator As String = ";") As String

        Dim firstRow        As Long
        Dim lastRow         As Long
        Dim firstColumn     As Long
        Dim lastColumn      As Long
        Dim row             As Long
        Dim col             As Long

        If Not IsArray(originalArray) Then Exit Function

        ' Join single dimension array
        If isSingleDimensionalArray(originalArray) Then
            ArrayToString2 = Join(originalArray, colSeparator)
            If Not filter Is Nothing Then
                ArrayToString2 = FilterApplyTo2(ArrayToString2)
            End If

            Exit Function
        End If

        firstRow = LBound(originalArray, 1)
        lastRow = UBound(originalArray, 1)
        firstColumn = LBound(originalArray, 2)
        lastColumn = UBound(originalArray, 2)

        'No need to use module variables - locals would be better
        Dim rowArray As Variant
        ReDim rowArray(firstRow To lastRow) As Variant

        Dim tempArray As Variant
        ReDim tempArray(firstColumn To lastColumn)

        For row = firstRow To lastRow
            ' fill array with values of the entire row
            For col = firstColumn To lastColumn
                tempArray(col) = originalArray(row, col)
            Next col
            rowArray(row) = Join(tempArray, colSeparator)
        Next row

        ' convert rowArray to string
        ArrayToString2 = Join(rowArray, rowSeparator)

        If Not filter Is Nothing Then
            ArrayToString2 = FilterApplyTo2(ArrayToString2)
        End If

        'Now using local variables
        'Erase rowArray
        'Erase tempArray

    End Function

    Public Function FilterIncludeEquals2(ByRef equalTo As Variant, ByRef inColumn As Long, _
                             Optional ByRef isCaseSensitive As Boolean = False) As Collection
       'Declaring thisFilter outside the If block so that the function always returns a
       'collection (possibly empty) rather than nothing 
        Dim thisFilter  As Collection
        Set thisFilter = New Collection
        'There's an upper limit to check for as well since only 1 and 2 dimensional
        'arrays are handled?
        If inColumn &gt; -1 And inColumn &lt; 2 Then

            'Dim thisFilter              As Collection
            'Dim thisFilterType          As filterType

            'Set thisFilter = New Collection
            'thisFilterType = exactMatch

            With thisFilter
                .Add exactMatch
                .Add inColumn
                .Add IIf(isCaseSensitive, equalTo, LCase(equalTo))
                .Add isCaseSensitive
            End With

            'To use this filter as a parameter in ArrayToString2 I return it directly.
            'This is different than the original design...just an example to consider 
            'If pFiltersCollection Is Nothing Then Set pFiltersCollection = New Collection

            'pFiltersCollection.Add thisFilter
            'Set thisFilter = Nothing
        End If
        Set FilterIncludeEquals2 = thisFilter

    End Function
</code></pre>

<p>Based on your update, I better understand what you are working toward - thanks!  After looking at your example, I would suggest that there is a definite advantage to creating a class module for the filter operations.  Establish a "Filter" Property in the ArrayManipulation class.  You mention concerns that adding a second module would possibly confusing to the user.  IMO it creates less confusion.</p>

<p>Below is another version of the test module with a revised Test Subroutine using the <code>ArrayManipulation</code> class with an <code>ArrayManipulationFilter</code> class member available as <code>Public Property Get Filter()</code>.</p>

<pre><code>    Option Explicit

    Public Sub Test()

        Dim testObject As ArrayManipulation
        Set testObject = New ArrayManipulation

        Dim arrayOfNumbers As Variant
        ReDim arrayOfNumbers(12)
        Dim numbers As Long
        For numbers = 0 To 11
           arrayOfNumbers(numbers) = numbers
        Next

        Dim arrayReturned As Variant
        With testObject
            ' setup filters
            .Filter.ExcludeEquals 3, 0
            .Filter.IncludeIfBetween 1, 4, 0

            ' this create a txt file storing the array

            ' The filter can now be applied inline or separately.
            ' Or, "applyFilters As Boolean" can also be added as a parameter to the ArrayToX subroutine signatures
            .ArrayToTextFile .Filter.ApplyTo(arrayOfNumbers), Environ("USERPROFILE") &amp; "\Desktop\Test.txt"

            ' this read the array from the just created file
            .TextFileToArray Environ("USERPROFILE") &amp; "\Desktop\Test.txt", arrayReturned

            ' this write the array on activesheet of you activeworkbook, starting from D3
            'arrayOfNumbers is still the original set of numbers
            .ArrayToRange arrayOfNumbers, Cells(3, 4)
            .ArrayToRange arrayReturned, Cells(5, 4)
        End With

    End Sub
</code></pre>

<p>Below is the ArrayManipulationFilter class which was a copy of the filter subroutines from the original class (with the "Filter" prefix removed from the subroutine names) plus the additional code below.</p>

<pre><code>    Private Sub Class_Initialize()
        Set pFiltersCollection = New Collection
    End Sub

    Public Function ApplyTo(ByRef originalArray As Variant) As Variant

        If Not IsArray(originalArray) Then Exit Function

        Dim result As Variant
        If isSingleDimensionalArray(originalArray) Then
            ApplyTo = filter1DArray(originalArray)
        Else
            ApplyTo = filter2DArray(originalArray)
        End If

    End Function

    Private Function isSingleDimensionalArray(myArray As Variant) As Boolean

        Dim testDimension As Long

        testDimension = -1
        On Error Resume Next
        testDimension = UBound(myArray, 2)
        On Error GoTo 0
        isSingleDimensionalArray = (testDimension = -1)

    End Function

    Private Function filter2DArray(ByRef originalArray As Variant) As Variant

        Dim firstRow                    As Long
        Dim lastRow                     As Long
        Dim firstColumn                 As Long
        Dim lastColumn                  As Long
        Dim row                         As Long
        Dim col                         As Long
        Dim arrayOfColumnToReturn       As Variant
        Dim partialMatchColumnsArray    As Variant
        Dim result                      As Variant

        result = -1
        arrayOfColumnToReturn = pColumnsToReturn
        If Not pPartialMatchColl Is Nothing Then partialMatchColumnsArray = pPartialMatchColl(2)

        ' If the caller don't pass the array of column to return
        ' create an array with all the columns and preserve the order
        If Not IsArray(arrayOfColumnToReturn) Then
            ReDim arrayOfColumnToReturn(LBound(originalArray, 2) To UBound(originalArray, 2))
            For col = LBound(originalArray, 2) To UBound(originalArray, 2)
                arrayOfColumnToReturn(col) = col
            Next col
        End If

        ' If the caller don't pass an array for partial match
        ' check if it pass the special value 1, if true the
        ' partial match will be performed on values in columns to return
        If Not IsArray(partialMatchColumnsArray) Then
            If partialMatchColumnsArray = 1 Then partialMatchColumnsArray = arrayOfColumnToReturn
        End If

        firstRow = LBound(originalArray, 1)
        lastRow = UBound(originalArray, 1)

        ' main loop
        Dim keepCount           As Long
        Dim Filter              As Variant
        Dim currentFilterType   As filterType

        ReDim arrayOfRowsToKeep(lastRow - firstRow + 1) As Variant
        keepCount = 0

        For row = firstRow To lastRow

            ' exact, excluse and between checks
            If Not pFiltersCollection Is Nothing Then
                For Each Filter In pFiltersCollection
                    currentFilterType = Filter(1)
                    Select Case currentFilterType
                        Case negativeMatch
                            If Filter(4) Then
                                If originalArray(row, Filter(2)) = Filter(3) Then GoTo Skip
                            Else
                                If LCase(originalArray(row, Filter(2))) = Filter(3) Then GoTo Skip
                            End If
                        Case exactMatch
                            If Filter(4) Then
                                If originalArray(row, Filter(2)) &lt;&gt; Filter(3) Then GoTo Skip
                            Else
                                If LCase(originalArray(row, Filter(2))) &lt;&gt; Filter(3) Then GoTo Skip
                            End If
                        Case isBetween
                            If originalArray(row, Filter(2)) &lt; Filter(3) _
                            Or originalArray(row, Filter(2)) &gt; Filter(4) Then GoTo Skip
                    End Select
                Next Filter
            End If

            ' partial match check
            If Not pPartialMatchColl Is Nothing Then
                If IsArray(partialMatchColumnsArray) Then
                    For col = LBound(partialMatchColumnsArray) To UBound(partialMatchColumnsArray)
                        If InStr(1, originalArray(row, partialMatchColumnsArray(col)), pPartialMatchColl(3), vbTextCompare) &gt; 0 Then
                            GoTo Keep
                        End If
                    Next
                    GoTo Skip
                End If
            End If
    Keep:
            arrayOfRowsToKeep(keepCount) = row
            keepCount = keepCount + 1
    Skip:
        Next row

        ' create results array
        If keepCount &gt; 0 Then

            firstRow = LBound(originalArray, 1)
            lastRow = LBound(originalArray, 1) + keepCount - 1
            firstColumn = LBound(originalArray, 2)
            lastColumn = LBound(originalArray, 2) + UBound(arrayOfColumnToReturn) - LBound(arrayOfColumnToReturn)

            ReDim result(firstRow To lastRow, firstColumn To lastColumn)

            For row = firstRow To lastRow
                For col = firstColumn To lastColumn
                    result(row, col) = originalArray(arrayOfRowsToKeep(row - firstRow), arrayOfColumnToReturn(col - firstColumn + LBound(arrayOfColumnToReturn)))
                Next col
            Next row

        End If

        filter2DArray = result
        If IsArray(result) Then Erase result

    End Function

    Private Function filter1DArray(ByRef originalArray As Variant) As Variant

        Dim firstRow                    As Long
        Dim lastRow                     As Long
        Dim firstColumn                 As Long
        Dim lastColumn                  As Long
        Dim row                         As Long
        Dim col                         As Long
        Dim arrayOfColumnToReturn       As Variant
        Dim partialMatchColumnsArray    As Variant
        Dim result                      As Variant

        result = -1

        firstRow = LBound(originalArray)
        lastRow = UBound(originalArray)

        ' main loop
        Dim keepCount           As Long
        Dim Filter              As Variant
        Dim currentFilterType   As filterType

        ReDim arrayOfRowsToKeep(lastRow - firstRow + 1) As Variant
        keepCount = 0

        For row = firstRow To lastRow

            ' exact, excluse and between checks
            If Not pFiltersCollection Is Nothing Then
                For Each Filter In pFiltersCollection
                    currentFilterType = Filter(1)
                    Select Case currentFilterType
                        Case negativeMatch
                            If Filter(4) Then
                                If originalArray(row) = Filter(3) Then GoTo Skip
                            Else
                                If LCase(originalArray(row)) = Filter(3) Then GoTo Skip
                            End If
                        Case exactMatch
                            If Filter(4) Then
                                If originalArray(row) &lt;&gt; Filter(3) Then GoTo Skip
                            Else
                                If LCase(originalArray(row)) &lt;&gt; Filter(3) Then GoTo Skip
                            End If
                        Case isBetween
                            If originalArray(row) &lt; Filter(3) _
                            Or originalArray(row) &gt; Filter(4) Then GoTo Skip
                    End Select
                Next Filter
            End If

            ' partial match check
            If Not pPartialMatchColl Is Nothing Then
                If InStr(1, originalArray(row), pPartialMatchColl(3), vbTextCompare) &gt; 0 Then
                    GoTo Keep
                End If
                GoTo Skip
            End If
    Keep:
            arrayOfRowsToKeep(keepCount) = row
            keepCount = keepCount + 1
    Skip:
        Next row

        ' create results array
        If keepCount &gt; 0 Then

            firstRow = LBound(originalArray, 1)
            lastRow = LBound(originalArray, 1) + keepCount - 1

            ReDim result(firstRow To lastRow)

            For row = firstRow To lastRow
                result(row) = originalArray(arrayOfRowsToKeep(row - firstRow))
            Next row

        End If

        filter1DArray = result
        If IsArray(result) Then Erase result

    End Function
</code></pre>
    </div>