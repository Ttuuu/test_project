<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>One of the ways of obtaining concision is by “astracting” a repeated operation to define a new function. For instance in this case you could use the <code>square</code> function previously defined in that chapter.</p>

<p>But if you look at the expression <code>(square a)</code> you will discover that it is longer then <code>(* a a)</code>, even it is, in some sense, more readable (has a minor number of symbols, so it is simpler to understand).</p>

<p>But having a function to abstract an operation could have other benefits that an immediate reduction in the count of the characters. Consider that in your example you are comparing two numbers to find the larger between them: in other words, you are looking for their maximum. </p>

<p>So, let's define  a new maximum operator:</p>

<pre><code>(define (max a b)
  (if (&gt; a b) a b)
</code></pre>

<p>Then, having the functions <code>square</code> and <code>max</code> you can now combine them, like, for instance, in:</p>

<pre><code>(define (sum-of-larger-two a b c)
  (if (&gt; a b)
      (+ (square a)
         (square (max b c)))
      (+ (square b)
         (square (max a c)))))
</code></pre>

<p>Or you can rearrange the operations in this way:</p>

<pre><code>(define (sum-of-larger-two a b c)
  (+ (square (max a b))
     (square (if (= (max a b) a)
                 (max b c)
                 (max a c)))))
</code></pre>

<p>Note that we are reducing the number of conditions to check in the function <code>sum-of-larger-two</code> (in addition to reducing the number of lines and symbols), and so we are simplifying it, improving both its readability as well as its maintainability.</p>
    </div>