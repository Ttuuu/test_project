<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You could consider using Regex to speed up the search. The cleanest way to do so would be to change your <code>full_search.txt</code> to be Regex expressions. For example <code>A?9?AAA</code> would need to be changed to <code>A.9.AAA</code> (<a href="https://rubular.com/" rel="nofollow noreferrer">in Regex the <code>.</code> means <em>any single character</em></a>).</p>

<p>Then you could change your <code>full_search</code> method to look like this:</p>

<pre><code>def full_search(offensive_list)
  vrm_list = $all_vehicles.keys.sort
  offensive_examples = offensive_list.map(&amp;:strip)

  offensive_examples.each do |offensive_example|
    vrm_list.grep(/^#{offensive_example}$/).each do |offensive_vrm|
      offensive_found(offensive_vrm, offensive_example)
    end
  end
end
</code></pre>

<p>In the Regex the <code>^</code> means start of string and the <code>$</code> means end of string; this basically ensures that substrings are not matched e.g.) <code>abcd</code> matches with the regex <code>.c</code> but not with <code>^.c$</code></p>

<p>If you don't want to modify your list, you could so something that dynamically creates the regex in Ruby. For example: <code>offensive_example.gsub("?", ".")</code> this would replace all <code>?</code> with <code>.</code>.</p>

<hr>

<p>A couple unrelated pointers...</p>

<ul>
<li>Ruby has a <a href="https://ruby-doc.org/core-2.6.2/String.html#method-i-chars" rel="nofollow noreferrer"><code>String#chars</code></a> method that is (arguably) more readable and might have some minor performance improvements over <code>string.split("")</code>.</li>
<li>Instead of assigning an initial empty value and building it in an <code>each</code>, consider using <code>Array#map</code> to reduce the amount of variable reassignments.</li>
</ul>

<pre class="lang-rb prettyprint-override"><code># before
vrm_array = []
vrm_list.each do |vrm|
  vrm_array &lt;&lt; vrm.split("")
end
vrm_array.each do |vrm|
    # do stuff
end

# after
vrm_array = vrm_list.map { |vrm| vrm.split("") } # this calls `split` on each element in `vrm_list`
vrm_array.each do |vrm|
    # do stuff
end
</code></pre>

<ul>
<li>If you need to take an array of characters and <em>join</em> them together into a single string, consider using <code>Array#join</code>.</li>
</ul>

<pre><code>irb(main):001:0&gt; ['a', 'b', 'c'].join
=&gt; "abc"
</code></pre>

<ul>
<li>If you have a Hash and you want an empty array if a key doesn't exist, consider using a default value (but be careful with <a href="https://stackoverflow.com/questions/2698460/strange-unexpected-behavior-disappearing-changing-values-when-using-hash-defa">some gotchas related to mutable defaults</a>)</li>
</ul>

<pre class="lang-rb prettyprint-override"><code>$bad_vrms = Hash.new { |h, k| h[k] = [] } # the argument is the default value which in this case is a block that initializes the key's value to a new instance of an empty array

# now we don't need to check if a key exists and can simply push to it
$bad_vrms[example] &lt;&lt; vrm
</code></pre>
    </div>