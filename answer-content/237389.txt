<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First I got same approach than previous answers (@Roland Illig &amp; Luapulu) that are very similar.</p>
<p>But then I remembered Item 72 of <a href="https://effectivepython.com" rel="nofollow noreferrer">Effective Python (Brett Slatkin's book)</a>:</p>
<blockquote>
<p>72: Consider Searching Sorted Sequences with bisect. Python’s built-in bisect module provides better ways to accomplish these types of searches through ordered lists. You can use the bisect_left function to do an efficient binary search through any sequence of sorted items. The index it returns will either be where the item is already present in the list or where you’d want to insert the item in the list to keep it in sorted order</p>
</blockquote>
<pre><code>from bisect import bisect_left
def my_sort_2(my_list):
    sorted_list = []
    for value in my_list:
        index = bisect_left(sorted_list, value)
        sorted_list.insert(index, value)
    return sorted_list
</code></pre>
<p><a href="https://docs.python.org/2/library/bisect.html#module-bisect" rel="nofollow noreferrer">bisect</a> is part of standard lib since Python 2.1:</p>
<blockquote>
<p>This module provides support for maintaining a list in sorted order without having to sort the list after each insertion. For long lists of items with expensive comparison operations, this can be an improvement over the more common approach. The module is called bisect because it uses a basic bisection algorithm to do its work.</p>
<p>bisect.<strong>bisect_left</strong>(a, x, lo=0, hi=len(a)) Locate the insertion point for x in a to maintain sorted order. The parameters lo and hi may be used to specify a subset of the list which should be considered; by default the entire list is used. If x is already present in a, the insertion point will be before (to the left of) any existing entries. The return value is suitable for use as the first parameter to list.insert() assuming that a is already sorted.</p>
</blockquote>
<p>And now it's time to check performance of available solutions for the list of 20 numbers:</p>
<ul>
<li>Min time with my_sort =0.0126 ms</li>
<li>Min time with my_sort_luapulu =0.0114 ms</li>
<li>Min time with my_sort_roland =0.0105 ms</li>
<li>Min time with my_sort_2 =0.0048 ms</li>
</ul>
<p>According just to this case, improvement in my machine with Python 3.8 is (compared to my_sort, from original question):</p>
<ul>
<li>Luapulu takes - 9,4% time</li>
<li>Roland  Illig takes - 16,4% time</li>
<li><strong>My proposal takes -61,7% time, What's a real difference for a list of 20</strong></li>
</ul>
<hr>
<p>Note: this part has been edited, after learning from comments received, the way to make a complexity analysis (please let me know if I am wrong):</p>
<p>Nº steps required for a list of n elements:  <span class="math-container">\$ n \cdot (\frac n2 \cdot \frac 12 + \frac n2) \$</span>   =  <span class="math-container">\$ n^2 \cdot \frac 34 \$</span></p>
<ul>
<li>bisect_left takes <span class="math-container">\$ \frac 12 \$</span> of sorted list length <span class="math-container">\$ \frac n2 \$</span></li>
<li>insert in sorted list is <span class="math-container">\$ \frac n2 \$</span></li>
</ul>
<p>So you neither should use this solution for sorting large data, as for large numbers it has also a time complexity of <span class="math-container">\$ \mathcal O(n^2) \$</span></p>
<h2>Thanks all for make me see that my previous time analysis was wrong.</h2>
<p>Note: Code used to check answers on my windows PC:</p>
<pre><code>def print_min_time(description, func, *args, setup='pass'):
    min_time = min(timeit.repeat(lambda: func(*args), setup))
    print(f'Min time with {description} ={min_time/1000} ms')

random_list = [randint(-20, 20) for i in range(20)]
print_min_time('my_sort', my_sort, random_list, setup='from math import inf')
print_min_time('my_sort_2', my_sort_2, random_list, setup='from bisect import bisect_left')
print_min_time('my_sort_luapulu', my_sort_luapulu, random_list)
print_min_time('my_sort_roland', my_sort_roland, random_list)

</code></pre>
    </div>