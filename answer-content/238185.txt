<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Wow!  That is really slow.  I changed <code>range(100)</code> to <code>range(5)</code>, just to get some timing numbers without dying of boredom.  So with that as my baseline, let's work on speeding it up.</p>

<h1>set_color</h1>

<pre><code>def set_color(RN,pattern,z,c):
    for v in range(10):
        z = z**2 + c
        pattern.append(z)
    if abs(z) &gt; 3.7918623e+90:
        t.color("#191970")
    elif abs(z) &gt; 1.9472705e+45:
        t.color("#16167F")
    elif abs(z) &gt; 4.4127888e+22:
        t.color("#13138F")
    elif abs(z) &gt; 210066388901:
        t.color("#10109F")
    elif abs(z) &gt; 458330:
        t.color("#0D0DAF")
    elif abs(z) &gt; 677:
        t.color("#0B0BBF")
    elif abs(z) &gt; 26:
        t.color("#0808CF")
    elif abs(z) &gt; 5:
        t.color("#0505DF")
    elif abs(z) &gt; 2:
        t.color("#0202EF")
    elif abs(z) &gt; 1.75:
        t.color("yellow")
    elif abs(z) &gt; 1.5:
        t.color("gold")
    elif abs(z) &gt; 1.25:
        t.color("goldenrod")
    elif abs(z) &gt; 1:
        t.color("darkgoldenrod")
    else:
        t.color("black")
</code></pre>

<p>The first argument, <code>RN</code>, is not used in this function.  So we can omit that, and save a little time not passing a useless argument.</p>

<pre><code>        z = 0
        set_color(RN,pattern,z,c)
        pattern = []
</code></pre>

<p>The second argument, <code>pattern</code>, is being accumulated, and then discarded.  So busy work involving memory allocation for extending a list who's value is never used.  We can remove that argument and <code>pattern.append(z)</code>.</p>

<p>The third argument, <code>z</code>, is always coming in as zero.  No point passing it as an argument; just initialize it inside the <code>set_color</code> function, which will save a little bit of time because we don't pass the extra argument.</p>

<p>Which just leaves passing in the argument <code>c</code>.  Getting better.</p>

<p>Then, you have a long string of <code>if abs(z) &gt; #</code> checks.  How many times are you computing <code>abs</code> of a complex number?  How many times will the result be different?  Maybe we can compute it just once?</p>

<pre><code>    abs_z = abs(z)
    if z &gt; 3.7918623e+90:
        t.color("#191970")
    elif abs_z &gt; 1.9472705e+45:
        ...
</code></pre>

<p>Unfortunately, that still leaves an ugly long string of <code>if</code>/<code>elif</code>/<code>elif</code>/<code>else</code> statements.  With 14 possibilities, you take an average of 7 tests to determine the correct value; with a binary search, this would reduce to 4.  We just need to put the values in a list, and use <a href="https://docs.python.org/3/library/bisect.html?highlight=bisect#bisect.bisect" rel="nofollow noreferrer"><code>bisect.bisect</code></a> to determine where the <code>abs(z)</code> would be inserted in the list.</p>

<pre><code>import bisect

MAG = (1, 1.25, 1.5, 1.75, 2, 5,
       26, 677, 458330, 210066388901, 4.4127888e+22, 1.9472705e+45,
       3.7918623e+90)

COLOR = ("black", "darkgoldenrod", "goldenrod", "gold", "yellow", "#0202EF",
         "#0505DF", "#0808CF", "#0B0BBF", "#0D0DAF", "#10109F", "#13138F",
         "#16167F", "#191970")

def set_color(c):
    z = 0
    for _ in range(10):
        z = z**2 + c
    t.color(COLOR[bisect.bisect(MAG, abs(z))])
</code></pre>

<p>My timing hasn't shown a significant impact in speed yet, but I certainly like the <code>set_color</code> function much better now.  If you want to add more colours, it is simply a matter of filling in additional values in the arrays.</p>

<h1>Mandelbrot</h1>

<pre><code>def Mandelbrot(RN,pattern,precision,check_rate,move_rate,x,y,i,c):
#draws line by line, 100 times
    for e in range(100):
        t.pendown()
#draws one line
        for e in range(precision):
            set_color(c)                 # Note: modified for new set_color
            RN = float(RN + move_rate)
            c = complex(RN,i)
            x = x + check_rate
            t.setposition(x,y)
#sets up values you'll need next row
        RN = -2.0
        i = i-.02
        t.penup()
        x = -200
        y = y - 2
        t.setposition(x,y)
    t.penup()
</code></pre>

<p>This looks backwards.  You pass in <code>RN</code>, but <code>RN</code> is computed in the loop.  You pass in <code>x</code>, but <code>x</code> is initialize to <code>-200</code> each time through the loop.  You pass in <code>c</code>, but <code>c</code> is computed in the loop.  And most things seem to be computed just after they've been used for the next loop iteration!</p>

<p>Let's re-work this, moving calculation to before they are used, and see what it looks like.  Along the way, <code>variable = variable + adjustment</code> will be replaced with <code>variable += adjustment</code>, because it results in one less variable lookup in the Python interpreter.  Also, <code>RN + move_rate</code> is already a <code>float</code>, so we can omit the redundant <code>float()</code> call.  When looping over a range of values (<code>y</code> starting at 99, and going down by two 100 times, a <code>for y in range(...)</code> construct is used:</p>

<pre><code>def mandelbrot(precision, check_rate, move_rate):
    i = 1.0
    t.penup()

    for y in range(99, 99 - 2 * 100, -2):
        rn = -2.0
        x = -200
        t.setposition(x, y)

        t.pendown()
        for _ in range(precision):
            c = complex(rn, i)
            set_color(c)

            rn += move_rate
            x += check_rate
            t.setposition(x, y)

        i -= 0.02
        t.penup()
</code></pre>

<p>Several PEP-8 changes: commas are followed by a space, variable names and method names are lowercase (technically, <code>snake_case</code>).  <code>_</code> is used as the unused variable.  Operators have a space on each side.</p>

<h1>Main</h1>

<p>Again, <code>float( )</code> calls are unnecessary.</p>

<pre><code>if __name__ == '__main__':
    precision = 400
    check_rate = 400 / precision
    move_rate = check_rate / 100

    t.penup()
    borders()
    mandelbrot(precision, check_rate, move_rate)
</code></pre>

<h1>Speed Up?</h1>

<p>Despite my initial efforts, my very rough timing measurements don't show I've sped things up any.  But I do think the code has been cleaned up significantly.</p>

<p>Next step in my efforts will be to split this up into two parts:</p>

<ol>
<li>computing a grid of Mandelbrot colour index values</li>
<li>drawing the image (using the computed grid of colour index values) with turtle graphics</li>
</ol>

<p>Then, I can get more accurate timing information for each section.</p>

<p>Step 1 is open to parallel processing (Python threads won't help, due to the Global Interpreter Lock (GIL), but using processes should help), but that will only help if it is the large consumer of time.  I fear it is the turtle graphics.</p>
    </div>