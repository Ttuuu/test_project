<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>In addition to <a href="https://codereview.stackexchange.com/a/208836/29485">@Edward</a> good answer.</p>

<p><strong>Information hiding</strong></p>

<p>I'd expect the calling code of <code>List...()</code> functions to not need to know nor be aware the inner structure of <code>struct List</code> in <code>"List.h"</code>.</p>

<pre><code>//struct X { struct X *prev, *next; };
//struct Link { struct X x; int data; };
//struct List { struct X head, tail; };
struct List;  // Just declare its existence.
</code></pre>

<p><strong>Surprising name</strong></p>

<p>I would not expect a type named <code>Action()</code> in <code>List.h</code>.  Consider  <code>ListAction</code>.</p>

<pre><code>// typedef void (*Action)(int *const);
typedef void (*ListAction)(int *const);
</code></pre>

<p><strong>Entire List Function</strong></p>

<p>Instead of simply calling a function to apply to each element of the list, pass in a <em>state</em> variable and return value of <code>int</code> to allow for preemptive return should it be non-zero.</p>

<pre><code>// typedef void (*Action)(int *const);
typedef int (*ListAction)(void *state, int *data);

// void ListForEach(struct List *const list, const Action action);
int ListForEach(struct List *const list, const ListAction action, void *state);
</code></pre>

<p><strong>Inefficient design</strong></p>

<p>Given the 4 function set, a double-linked list is not needed. A single linked list will do.  e.g. <a href="https://en.wikipedia.org/wiki/Linked_list#Circular_linked_list" rel="nofollow noreferrer">Circular linked list</a>  </p>

<p>A double-linked list is only needed if code needs to <em>walk</em> the list in either order - which is not the case here.</p>

<p>This space savings is important when the link-list type is widely deployed.  In such cases <em>many</em> lists are empty.</p>
    </div>