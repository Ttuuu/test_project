<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Not a solution but a line of thought you may use for implementation. You can define the group of students as sets and then make tuples of these sets, so for example <code>({1, 3, 5}, {2, 4, 6})</code>, let's call this tuple A and another tuple of sets B: <code>(1, 4, 5}, {2, 3, 6})</code> I assume here that the order of the sets is important as you want to compare the first set of A with the first set of B, and so on...</p>

<p>You can then compare these tuples of sets by:</p>

<pre><code>A = ({1, 3, 5}, {2, 4, 6}, {8, 10, 12})
B = ({1, 4, 5}, {2, 3, 6}, {8, 10, 12})
C = []
D = []

for i, a_list in enumerate(A):
   for j, b_list in enumerate(B):
       if i == j:
           C.append(a_list - b_list)
           D.append(b_list - a_list)

C = tuple(C)
D = tuple(D)
print(f'A: {A}\nB: {B}\nC: {C}\nD: {D}')
</code></pre>

<p>Answer:</p>

<pre><code>A: ({1, 3, 5}, {2, 4, 6}, {8, 10, 12})
B: ({1, 4, 5}, {2, 3, 6}, {8, 10, 12})
C: ({3}, {4}, set())
D: ({4}, {3}, set())
</code></pre>

<p>C and D are then tuples with sets of differences for the first set, second set, etc. If these include sets with one element you know the sets in A and B are the same except for that one element. </p>
    </div>