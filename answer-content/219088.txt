<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<pre><code>public class People
</code></pre>
</blockquote>

<p>The class is named <code>People</code>, but it should probably be called <code>Person</code>. Every instance of the class is another Person, not another People.</p>

<hr>

<blockquote>
<pre><code>private String name;
private String age;
private String address;
</code></pre>
</blockquote>

<p>It might be worth to consider splitting up the <code>name</code> attribute into a <code>firstName</code> and <code>lastName</code>, because otherwise it could be difficult to compare two peoples' last names, for example.</p>

<p>Representing <code>age</code> as a <code>String</code> is not the best fit. Age is usually a whole number, i.e. an integer, so it would be better to use <code>int</code> instead. Then you could also more easily compare ages by e.g. calculating the age difference between two people. <code>String</code>s should be used for things that are actual text or at least sequences of characters.</p>

<p>Even better than having an <code>age</code> attribute at all could be to have a <code>dateOfBirth</code> instead, represented by the Java type <code>Date</code>. Age is just an implicit attribute of a person that could change any day, and so instead of saving it in a variable you can calculate it from the date of birth and the current date whenever you need.</p>

<p>I'd say that representing <code>address</code> as a <code>String</code> is fine, but could be worth getting its own class with <code>street</code>, <code>zipCode</code> etc., then saving a reference to an <code>Address</code> inside the <code>Person</code>.</p>

<hr>

<blockquote>
<pre><code>public boolean isAttributeEqual(final People dupPeop)
</code></pre>
</blockquote>

<p><code>isAttributeEqual</code> does not tell you which attribute it checks. The singular name implies that one attribute is being checked, but what the method actually does is compare all attributes. There is a convention for that in Java, which is to override the <code>equals</code> method which the class inherits from <code>Object</code>.</p>

<hr>

<blockquote>
<pre><code>List&lt;People&gt; asList = Arrays.asList(new People("Sri", "28", "TN"), new People("Sri", "28", "TN"), new People("Sri", "28", "TN"),
    new People("Pri", "28", "TN"));

List&lt;People&gt; groupSimilar = groupSimilar(asList);
</code></pre>
</blockquote>

<p>It can be more readable if a variable name states what it contains, independently from how it came to be. <code>asList</code> is the operation that creates the list, but that will not be relevant anymore if you use the variable later on in the code. So, assuming the rename of the class that I recommended earlier, you could have something like this:</p>

<pre><code>List&lt;Person&gt; persons
</code></pre>

<p>or</p>

<pre><code>List&lt;Person&gt; people
</code></pre>

<p>Similarly, <code>groupSimilar</code> groups similar people, but the result is a list of similar people:</p>

<pre><code>List&lt;Person&gt; similarPeople = groupSimilar(people);
</code></pre>

<p>or</p>

<pre><code>List&lt;Person&gt; similarlyGroupedPeople = groupSimilar(people);
</code></pre>

<p>Also, it seems to me that what <code>groupSimilar</code> does is to find the people that are duplicated in the same list, rather than actually grouping similar people, so I would rename the variable and the method to this:</p>

<pre><code>List&lt;Person&gt; duplicates = findDuplicates(people);
</code></pre>

<hr>

<blockquote>
<pre><code>  public static List&lt;People&gt; groupSimilar(final List&lt;People&gt; people)
  {
    List&lt;People&gt; duplicatePeople = new ArrayList&lt;&gt;(people);
    for (Iterator&lt;People&gt; iterator = duplicatePeople.iterator(); iterator.hasNext();)
    {
      People people2 = iterator.next();
      for (People orignalPeople : people)
      {
        if (!orignalPeople.equals(people2) &amp;&amp; orignalPeople.isAttributeEqual(people2))
        {
          iterator.remove();
          people2 = iterator.next();
        }
      }
    }
    return duplicatePeople;
  }
</code></pre>
</blockquote>

<p>Rather than manually controlling the iterator, i.e. checking <code>hasNext()</code> and advancing it with <code>next()</code>, I would use a simple for-each loop for the outer loop, just like your inner loop already is.</p>

<p>Since you are using the default implementation for <code>equals</code> which is inherited from <code>Object</code>, it is equivalent to a reference equality check, which can be done on reference types using the <code>==</code> operator (<code>!=</code> for reference inequality).</p>

<p>So, assuming that you replaced your <code>isAttributeEqual</code> with an overriding implementation of <code>equals</code>, and use <code>==</code>/<code>!=</code> instead of the default <code>equals</code>, I would rewrite the method like this:</p>

<pre><code>public static List&lt;People&gt; findDuplicates(final List&lt;People&gt; people) {
    List&lt;People&gt; duplicates = new ArrayList&lt;&gt;();

    for (Person person : people) {
        for (Person person2 : people) {
            if (person != person2 &amp;&amp; person.equals(person2) {
                duplicates.add(person);
            }
        }
    }

    return duplicates;
}
</code></pre>

<p>The code also becomes, in my view, more easily understandable by only adding the people that are verified as duplicates, rather than declaring all as duplicates and removing those that are not.</p>
    </div>