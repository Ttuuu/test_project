<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>It is not <strong>truly</strong> random.  It is cryptographically strong.  The regular Random is going to be pretty close for what you are Doing here.</p>

<p>This is confusing to me  </p>

<pre><code>int ClampDigit(byte[] bytes, int lower, int upper)
</code></pre>

<p>lower is included but upper is not</p>

<p>I think this would be more consistent </p>

<pre><code>var modulo = upper - lower + 1;
</code></pre>

<p>Why are you using a suspect / biased result?</p>

<pre><code>if (result == -1)
{
    result = bytes[bytes[0] % bytes.Length] % modulo + lower;
}
</code></pre>

<p>Why mess with passing around data that is out of range?</p>

<p><code>int RandomDigit(int tries = 10, int lower = 0, int upper = 10)</code> does not really care about lower and upper other than pass it to another function. </p>

<p>I would break this down differently. </p>

<pre><code>public static byte[] RandomNumbersInRange(byte count, byte lower, byte upper )
{
    if (count == 0)
        throw new IndexOutOfRangeException();
    if (lower &gt;= upper)
        throw new IndexOutOfRangeException();
    byte modulo = (byte)(upper - lower + 1);
    if (modulo &gt; byte.MaxValue / 2)  //for bigger numbers I would not use byte 
        throw new IndexOutOfRangeException();
    byte[] randomNumbersInRange = new byte[count];
    byte upperLimit = (byte)(byte.MaxValue - byte.MaxValue % modulo - 1);  
    byte[] bigRandomsInRange = RandomsInRange(upperLimit, count);
    for (int i = 0; i &lt; count; i++)
    {
        randomNumbersInRange[i] = (byte)((bigRandomsInRange[i] % modulo) + lower);
    }
    return randomNumbersInRange;
}
public static byte[] RandomsInRange(byte upperLimit, byte count)
{
    if (count == 0)
        throw new IndexOutOfRangeException();
    if (upperLimit == byte.MaxValue)
        throw new IndexOutOfRangeException();
    byte[] workingBytes = new byte[1];
    byte workingByte;
    byte[] randomsInRange = new byte[count];
    using (var csp = new System.Security.Cryptography.RNGCryptoServiceProvider())
    {
        for (int i = 0; i &lt; count; i++)
        {
            workingByte = byte.MaxValue;
            while (workingByte &gt; upperLimit)
            {
                csp.GetBytes(workingBytes);
                workingByte = workingBytes[0];
            }
            randomsInRange[i] = workingByte;
        }
    }
    return randomsInRange;
}
</code></pre>

<p>Random is generating results that look as good to me and 100 times faster.  </p>

<pre><code>public static uint[] TestRandomsInRange(byte upper)
{
    byte modulo = (byte)(upper + 1);
    if (modulo &gt;= byte.MaxValue / 2)  //for bigger numbers I would not use byte 
        throw new IndexOutOfRangeException();
    byte upperLimit = (byte)(byte.MaxValue - byte.MaxValue % modulo - 1);
    byte[] workingBytes = new byte[1];
    int workingByte;
    UInt32[] randomsInRange = new UInt32[modulo];
    UInt32 count = 10000000;
    Stopwatch sw = new Stopwatch();
    sw.Start();
    using (var csp = new System.Security.Cryptography.RNGCryptoServiceProvider())
    {
        for (int i = 0; i &lt; count; i++)
        {
            workingByte = byte.MaxValue;
            while (workingByte &gt; upperLimit)
            {
                csp.GetBytes(workingBytes);
                workingByte = workingBytes[0];
            }
            workingByte = workingByte % modulo;
            //Debug.WriteLine(workingByte);
            randomsInRange[workingByte]++;
        }
    }
    UInt32 min = UInt32.MaxValue;
    UInt32 max = UInt32.MinValue;
    UInt32 value;
    for (int i = 0; i &lt; modulo; i++)
    {
        value = randomsInRange[i];
        Debug.WriteLine("i {0}  count {1}  pct {2}", i, value.ToString("N0"), (100m * value / count).ToString("N4"));
        if (min &gt; value)
            min = value;
        else if (max &lt; value)
            max = value;
    }
    Debug.WriteLine("diff {0}  pct {1} ", (max - min), (100m * (max - min) / count).ToString("N6"));
    Debug.WriteLine("done RNGCryptoServiceProvider milli " + sw.ElapsedMilliseconds.ToString("N2"));
    Debug.WriteLine("");
    sw.Restart();

    randomsInRange = new UInt32[modulo];
    Random rand = new Random();
    using (var csp = new System.Security.Cryptography.RNGCryptoServiceProvider())
    {
        for (int i = 0; i &lt; count; i++)
        {
            workingByte = rand.Next(modulo);
            //Debug.WriteLine(workingByte);
            randomsInRange[workingByte]++;
        }
    }

    min = UInt32.MaxValue;
    max = UInt32.MinValue;
    for (int i = 0; i &lt; modulo; i++)
    {
        value = randomsInRange[i];
        Debug.WriteLine("i {0}  count {1}  pct {2}", i, value.ToString("N0"), (100m * value / count).ToString("N4"));
        if (min &gt; value)
            min = value;
        else if (max &lt; value)
            max = value;
    }
    Debug.WriteLine("diff {0}  pct {1} ", (max - min), (100m * (max - min) / count).ToString("N6"));
    Debug.WriteLine("done Random milli " + sw.ElapsedMilliseconds.ToString("N2"));
    return randomsInRange;
}
</code></pre>
    </div>