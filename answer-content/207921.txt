<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Whaa??? Unreadable and bloated.</h1>
<p>Harsh title, but don't take it to heart. It takes a long time to learn to program effectively and the learning curve is steep. Your code shows all the hallmarks of inexperience, but it also shows you have what it takes to become a good coder.</p>
<h2>The review</h2>
<p>At my first look at this code, I had a hard time working out what you were doing. The main reason was that you are using a very unusual style of iteration.</p>
<p>You are using a single while loop to iterate over four independent arrays <code>profiles</code>, <code>flights</code>, <code>travelerIds</code> and <code>legs</code>.</p>
<p>Using very badly named counter variables, whose meanings only become apparent after I mentally stepped through the code (their purpose should be immediately apparent).</p>
<p>To manage each phase of the iteration you use 5 <code>if</code> statements to check data, increment counters, and build the required information object. The result is lots of duplication, AKA bloat.</p>
<p>You need to improve your naming.</p>
<h2>Naming problems</h2>
<ul>
<li><p><code>setTraveler</code> You are not setting an existing state, rather you create a new object. Maybe  <code>createTraveler</code>, or even <code>traveler</code></p>
</li>
<li><p><code>setLegs</code>. Same as above.</p>
</li>
<li><p><code>setAirlineHash</code> Again you create, and you use the singular <code>Hash</code>, but you create a hash map, or commonly just map. Maybe <code>mapArilines</code></p>
</li>
<li><p><code>getTravelersFlightInfo</code> You are creating, specifically merging existing data, the context implies travelers, flights, and info, so maybe something like <code>mergeTravelers</code>, or <code>mergeFlightInfo</code>;</p>
</li>
<li><p><code>iP</code>,<code>iF</code>,<code>iTID</code>,<code>iL</code> Once I stepped over the code I understood them, i for i index, and P,F,L, for profile, flight and leg. With TID for travelers Id (should have been <code>iTId</code>) Aliased or abbreviated variable are not bad (they can save a lot of characters that make code line long and hard to read), but they have to be immediately clear (I should not have to read the whole source, and data structure)  in the code, via comments or assignment from named alternatives. It turns out you don't need them so I will not give a suggested alternatives.</p>
</li>
</ul>
<hr>
<h2>Code Structure</h2>
<h3>Maintain clear function roles</h3>
<p>Rather than make the function <code>getTravelersFlightInfo</code>,  <code>async</code>, I would move the loading out of the function and pass the required data as arguments. This moves the role of acquiring data out as a separate role</p>
<p>The role includes what is returned, and the function returns nothing, just outputing to the log. It should return the expected travelers object. If you need to output as JSON to the log do that outside the function.</p>
<h3>Reduce noise and bloat</h3>
<p>The functions <code>setTraveler</code>, and <code>setLegs</code> are on the most part just bloat, forcing you to pass named arguments to the functions that can be done inline with less code.</p>
<p>The function <code>mapAirlines</code> (you called <code>setAirlineHash</code>) can be done using <code>array.reduce</code> and would be better done outside the main function.</p>
<p>Excessive use of destructuring. The destructuring syntax was introduce to reduce code complexity, and you should only use it when the resulting code is simpler. eg you have  <code> const { profiles } = await profilesAPI.get()</code> the destructuring is redundant and <code>const profiles = await profilesAPI.get();</code> is better. BTW no spaces after <code>{</code> and before <code>}</code> in object literals and destructure assignments .  <code>{ profiles }</code> as <code>{profiles}</code></p>
<p>Learn the language. Much of the bloat comes from poor use, or missing use of many Javascript's built in language features.</p>
<h3>Only known errors should be caught</h3>
<p>The <code>try catch</code> seems to have no actual use (your code does not create any errors). What you have done is silence errors by diverting them to the log. (BTW if you must log errors use <code>console.error(error)</code>). ONLY use try catch if you are generating known errors, or you expect known error types to be generated while the function does its thing. If you do catch errors, only handle the errors you expect and rethrow errors you don't expect so that higher level error management can take care of them.</p>
<hr>
<h2>Example</h2>
<p>The following code is meant as an example of how to improve the code using more language features and a more idiomatic approach.</p>
<p>It is however not the only solution and there is room to reduce the complexity by doing a little data processing before calling <code>mergeTravelers</code></p>
<p>You could reverse the construction process, stepping over the flights first and access profiles via a map using personId (constructed before calling mergeTravelers), which would be the least complex solution</p>
<p>Anyways the example has a minor mod to get at the data, not using async and promises, (see comments) but I did include the async code.</p>
<p>There was limited information so I went with the example solution you gave to verify it works. Profiles that have no matching trips will have empty flights array (Not sure if this is correct)</p>
<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>'use strict';
function showMergedTravelinfo(travelers) {
    console.log(JSON.stringify(travelers, null, 2));
}
async function acquireTravelFlightData() { 
    const mapAirlines = (map, airlines) =&gt; (map[airlines.code] = airlines.name, map);
    return { 
        profiles: await profilesAPI.get(),
        flightList: await tripsAPI.get().trip.flights,  
        airlineMap: await airlinesAPI.get().airlines.reduce(mapAirlines, {}),
    };
}
function mergeTravelers({profiles, flightList, airlineMap}) {    
    const createReward = (program, code) =&gt; program[code] ? program[code] : "";
    return {
        travelers: profiles.map(profile =&gt; {   
            const createLeg = leg =&gt; ({ ...leg,
                airlineName: airlineMap[leg.airlineCode],
                frequentFlyerNumber: createReward(
                    profile.rewardPrograms.air, 
                    leg.airlineCode
                )
            });
            const flights = [];
            for (const flight of flightList) {
                if (flight.travelerIds.includes(profile.personId)) {
                    flights.push({legs: flight.legs.map(createLeg)}); 
                }
            }
            return {id: profile.personId, name: profile.name, flights};
        })
    };
}

/* How to use if data was via API's 
showMergedTravelinfo( mergeTravelers( aquierTravelFlightData())); 
*/













setTimeout(() =&gt; {  // Just for the snippet this ensures code is parse before run
      // Using the local data src
      const travelers = mergeTravelers(localSrcTravelFlightData(data));
      showMergedTravelinfo(travelers);

    }, 0
);

function localSrcTravelFlightData(data) { 
    const mapAirlines = (map, airlines) =&gt; (map[airlines.code] = airlines.name, map);
    return { 
        profiles: data.profiles,
        flightList: data.trip.flights,  
        airlineMap: data.airlines.reduce(mapAirlines,{}),
    };
}

/* Change the data source for the snippet and because I am lazy */
const data = {
    profiles: [{
            personId: 1,
            name: 'Neo',
            rewardPrograms: {air: {'AK': 'NAK123','VA': 'NVA123'}}
        },{
            personId: 2,
            name: 'Morpheus',
            rewardPrograms: {air: {'AA': 'MAA123'}}
        },{
            personId: 3,
            name: 'Trinity',
            rewardPrograms: {air: {'VA': 'TVA123'}}
        },{
            personId: 4,
            name: 'Mr. Anderson',
            rewardPrograms: {air: {'AA': 'AAA444','AK': 'AAK444','VA': 'AVA444'}}
        }
    ],
    trip: {
        flights: [{
                travelerIds: [1, 2, 3],
                legs: [{airlineCode: 'AA', flightNumber: 'AA456'}]
            },{
                travelerIds: [1, 2],
                legs: [{airlineCode: 'VA', flightNumber: 'VA789'}, {airlineCode: 'AK', flightNumber: 'AK789'}]
            }
        ]
    },
    airlines: [
        { code: 'AK', name: 'Alaskan' },
        { code: 'AA', name: 'American' },
        { code: 'BA', name: 'British' },
        { code: 'DT', name: 'Delta' },
        { code: 'UA', name: 'United' },
        { code: 'VA', name: 'Virgin' },
    ]
};</code></pre>
</div>
</div>

<hr>
<h2>Update.</h2>
<p>I will remind you that code review is about reviewing existing code and not "how do I?" which your comments imply.</p>
<p>The reset is part of the update.</p>
<h3><code>O(n)</code> must define <code>n</code></h3>
<p>You original code which you quoted to be</p>
<blockquote>
<p><em>"...trying my best to keep this O(n) complexity."</em></p>
</blockquote>
<p>Could be anything depending on what you define <code>n</code> to be. The complexity is better expressed in three terms <code>n</code> = flights, <code>m</code> = profiles, <code>l</code> = mean profiles per flight. The legs can be ignored as they would likely have a mean near 1.</p>
<p>Your solution and the example I gave both have <code>O(nml)</code></p>
<p>You can improve by mapping the profiles (as pointed out in the original answer) which would bring the solution down to <code>O(2m+nl)</code> as shown in the changes to <code>acquireTravelFlightData</code> and <code>mergeTravelers</code> below.</p>
<pre><code>async function acquireTravelFlightData() { 
    const mapAirlines = (map, airline) =&gt; (map[airline.code] = airline.name, map);
    const mapProfiles = (map, profile) =&gt; {
        map[profile.personId] = {
            id : profile.personId,
            name : profile.name,
            rewards : profile.rewards,
            flights : [],
        }
        return map;
    };
    var profiles;
    return { 
        profileMap: (profiles = await profilesAPI.get()).reduce(mapProfiles,{}),
        profiles,
        flightList: await tripsAPI.get().trip.flights,  
        airlineMap: await airlinesAPI.get().airlines.reduce(mapAirlines,{}),
    };
}    
function mergeTravelers({profileMap, profiles, flightList, airlineMap}) {    
    const createReward = (program, code) =&gt; program[code] ? program[code] : "";
    const travelers = { travelers : [] };
    flightList.forEach(flight =&gt; {
        flight.travelerIds.forEach(id =&gt; {
            profile = profileMap[id];
            profile.flights = flight.legs.reduce((flights, leg) = (flights.push({   
                    ...leg,
                    airlineName: airlineMap[leg.airlineCode],
                    frequentFlyerNumber: createReward(profile.rewards, leg.airlineCode)
                }), flights),
                profile.flights
            );
        });
    });
    return {travelers : profiles.map(profile =&gt; {
            delete profileMap[profile.personId].rewards;
            return profileMap[profile.personId];
        }
    )};
}
</code></pre>
<p><sub><strong>Note:</strong> the above example is untested and may contain typos</sub></p>
<p>Thus we can reduce the complexity to <code>O(nl)</code> as <code>2m</code> is trivial compared to <code>nl</code>. Or you can express the complexity in terms of total number of passenger flights n<sub>1</sub> = nl or O(n<sub>1</sub>)</p>
<p>Now the solution is <code>O(n)</code> by defining <code>n</code> as the total number of passenger flights.</p>
    </div>