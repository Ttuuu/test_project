<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><a href="https://codereview.stackexchange.com/users/120114/s%E1%B4%80%E1%B4%8D-on%E1%B4%87%E1%B4%8C%E1%B4%80">Sᴀᴍ Onᴇᴌᴀ</a> <a href="https://codereview.stackexchange.com/a/220577/120556">answer</a> has the right idea for small strings, but can be improved by using a <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set" rel="nofollow noreferrer">Set</a> to hold the vowels rather than an array. This reduces the overhead of <code>Array.includes</code> which will iterate each character in the vowels array for non matching characters</p>

<p>You can create a set as <code>const vowels = new Set([..."AEIOUaeiou"]);</code></p>

<p>To encapsulate the constant <code>vowels</code> use a function to scope <code>vowels</code> outside the global scope and closure to make it available to the function.</p>

<pre><code>const countVowels = (() =&gt; {
    const VOWELS = new Set([..."AEIOUaeiou"]);
    return function(str) {
         var count = 0;
         for (const c of str) { count += VOWELS.has(c) }
         return count;
    }
})();
</code></pre>

<p>Or</p>

<pre><code>const countVowels = (() =&gt; {
    const VOWELS = new Set([..."AEIOUaeiou"]);
    return str =&gt; [...str].reduce((count, c) =&gt; count += VOWELS.has(c), 0);
})();
</code></pre>

<h2>UNICODE vowels</h2>

<p>Of course the first snippet is the better as it is <span class="math-container">\$O(1)\$</span> storage and as it uses a <code>Set</code> (hash table) it is <span class="math-container">\$O(n)\$</span> complexity (where <span class="math-container">\$n\$</span> is the length of the string) rather than <span class="math-container">\$O(n*m)\$</span> (where <span class="math-container">\$m\$</span> is the number of vowels). This becomes more important if you are to include the full set of <a href="https://en.wikipedia.org/wiki/Phonetic_symbols_in_Unicode" rel="nofollow noreferrer">unicode vowels</a></p>

<pre><code>const countVowels = (() =&gt; {
    // Reference https://en.wikipedia.org/wiki/Phonetic_symbols_in_Unicode
    const VOWELS = new Set([..."AEIOUaeiouiyɨʉiyɯuɪʏeøɘɵɤoɛœɜɞʌɔaɶɑɒʊəɐæɪ̈ʊ̈IYƗɄIYƜUꞮʏEØɘƟɤOƐŒꞫɞɅƆAɶⱭⱰƱƏⱯÆꞮ̈Ʊ̈"]);
    return function(str) {
         var count = 0;
         for (const c of str) { count += VOWELS.has(c) }
         return count;
    }
})();
</code></pre>

<p><strong>NOTE</strong> the above snippet does not work.. see below.</p>

<h2>Don't split unicode</h2>

<p>If you are using Unicode it is important to release that each unicode 16 bit character does not always represent a single visual character</p>

<p>For example the last two vowels "ɪ̈ʊ̈" require two characters to display. eg the string  <code>"\u026A\u0308\u028A\u0308" === "ɪ̈ʊ̈"</code> is true. You can not just count them 
as in the expression <code>"ɪ̈ʊ̈".split("").length</code> will evaluate to 4.</p>

<p>This is even more problematic as <code>\u026A</code> and <code>\u028A</code> the first character codes are also vowels <code>"ɪʊ"</code></p>

<p>To solve for the full set of vowels and keep the complexity at <span class="math-container">\$O(n)\$</span> and storage at <span class="math-container">\$O(1)\$</span> we can use 3 sets  </p>

<pre><code>const countVowels = (() =&gt; {
    const VOWELS = new Set([ ..."AEIOUaeiouiyɨʉiyɯuʏeøɘɵɤoɛœɜɞʌɔaɶɑɒəɐæIYƗɄIYƜUʏEØɘƟɤOƐŒꞫɞɅƆAɶⱭⱰƏⱯÆ"]);
    const VOWELS_DOUBLE = new Set(["ɪ̈", "ʊ̈", "Ɪ̈", "Ʊ̈"]);
    const VOWELS_SINGLE = new Set([..."ʊɪƱꞮ"]);
    return function(str) {
         var count = 0, prev;
         for (const c of str) { 
              count += VOWELS.has(c);
              count += VOWELS_DOUBLE.has(prev + c) || VOWELS_SINGLE.has(prev);
              prev = c;
         }
         return count + VOWELS_SINGLE.has(prev);
    }
})();
</code></pre>
    </div>