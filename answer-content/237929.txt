<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I have little to add to what Pod said.</p>

<p>There is nothing wrong with compact code. Your code could be very efficient, and there is clearly a lot of effort in it, but I agree <strong>readability</strong> could be improved. Indeed the small details count, even whitespace is important in code.</p>

<p>The important takeaways:</p>

<p>Good code should have a natural <strong>flow</strong> and should be <strong>visually appealing</strong>. As an experiment look at the <strong>shape</strong> of your code standing in front of your screen at a distance of one meter (or 3 feet). Do you like what you see ?
It is cliché but you only get one chance to make a first impression, and code leaves an impression too. An interview is highly subjective too. Even a good product needs some dressing-out to sell better.</p>

<p>Just for fun I did a copy-paste in Notepad++ and zoomed out. It looks like this:
<a href="https://i.stack.imgur.com/o2mS4.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/o2mS4.png" alt="enter image description here"></a></p>

<p>I have to say I have seen worse. But maybe you will be looking at things through new lenses now.</p>

<p>Next point: avoid all redundancy, that means your checks should take place in a logical order.</p>

<p>I totally agree about the <strong>single-line if statements</strong>, avoid them. Quite a bad habit, possibly laziness for which I can't find justification. Opening and closing brackets (with proper indentation of course) make the block more readable and less ambiguous. Shorter is not always better.</p>

<p>Rather than put a lot of <code>ifs</code>, sometimes a <code>switch</code> statement will make more sense. Possibly it will make the code purpose even clearer, depending on the conditions you are testing. </p>

<p>Nested <code>if</code> blocks or long sequences of <code>else if</code> can be avoided by <strong>returning early</strong> or <strong>branching out early</strong> while maintaining a single return point. Discussion about the concept: <a href="https://mikeschinkel.me/2019/better-alternative-to-return-early-php-wordpress/" rel="nofollow noreferrer">A better alternative to “return early” – PHP / WordPress edition</a></p>

<p>Not to mention the ternary operator.</p>

<p>Another good practice: <strong>comments</strong>.
While good code should speak for itself, it doesn't hurt to put a few comments here and there. 
It shows that: 1) you had a clear idea in mind, 2) you are trying to help whomever will have to work on this code, including <em>yourself</em> (in 6 months you will have lost your train of thought and you'll have to re-analyze your own code), 3) you are capable of documenting your code, 4) you put yourself in the shoes of another person (including interviewers).</p>

<p>Even if you know you will be judged on your technical proficiency rather than your English writing skills, even if you are short on time, take the time to <strong>comment</strong> even if it's just two lines. Essentials parts of the code are not commented at all. The parts that are less obvious to understand deserve some explanation.</p>

<p>What I gather is that they just didn't like your style. One thing to keep in mind is that development is often <strong>teamwork</strong> rather than solo. The interviewers may be figuring out if you would be capable of working in a team, if you already follow good practices, consistent naming conventions etc.</p>

<p>Don't let this unfortunate experience put you out. The good news is that minor changes in style can have a huge impact as exemplified in the useful comments you've got here. Hopefully you will like <strong>our</strong> feedback better !</p>
    </div>