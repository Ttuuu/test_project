<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Most of this has already been discussed here: <a href="https://stackoverflow.com/questions/57441479/avoiding-deadlock-in-concurrent-waiting-object">https://stackoverflow.com/questions/57441479/avoiding-deadlock-in-concurrent-waiting-object</a></p>

<p><strong>Issue 1</strong></p>

<p>Mutex are owned by a thread so it is undefined behavior to call <code>done()</code> from a different thread that the one that create the <code>Ticket</code>.</p>

<p><strong>Issue 2</strong></p>

<p>If a mutex is locked by a thread that already own the lock the behavior is undefined: <a href="https://en.cppreference.com/w/cpp/thread/mutex/lock" rel="nofollow noreferrer">https://en.cppreference.com/w/cpp/thread/mutex/lock</a></p>

<p><strong>Issue 3</strong></p>

<p>Depending on the actual implementation, which thread call which function and in which order, there are potential for deadlock, unprotected section and other undefined behavior.</p>

<p>Essentially, <code>std::mutex</code> seems to let the implementation decide if the mutex is owned or not and if it is recursive or not.</p>

<p>A mutex should not be used as a binary semaphore as it will not always works as it depends on undefined behavior.</p>

<p><strong>Issue 4</strong></p>

<p><code>_doneLock</code> is not recommandable as a variable name. The <strong>lock</strong> is name is confusing given that <code>std::mutex</code> is used with <code>std::unique_lock</code> or <code>std::gard_lock</code></p>

<p><strong>Issue 5</strong></p>

<p>Using 2 locks which can be locked in different order can lead to deadlock (see my answer on Stack overflow for details).</p>

<p><strong>Issue 6</strong></p>

<p>Your test are just as problematics. The main problem is that you call <code>done</code> is a loop. So it is possible that <code>thread1</code> in <code>ticket5</code> case would increment <code>_done</code> twice while <code>thread2</code> never increment it. It is also possible that <code>_done</code> will be greater than expected because of that or that you use the result while one thread is still running actively.</p>

<p>Also all you test start by sleeping so you do not properly test the case a task would finish very early.</p>

<p><strong>Suggestion</strong></p>

<p>For proper testing, I think you should also try to add some <code>sleep</code> to the original code for testing purpose like before the call to <code>waitUntilDone</code> to validate that your code also works if some or all threads finish before you wait on them.</p>

<p>Also it might be useful to try that in <code>Ticket</code> class too in particular just before or after some lock/unlock to somehow simulate what would happen in a thread switch happen at that point.</p>
    </div>