<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Iteratively incrementing/decrementing a width until you get it just right seems slow and inefficient to me.</p>

<p>Instead, my approach is just to measure the conversion factor, and then use that measurement to set the width in one go. This is way, way faster.</p>

<pre><code>Public Function WidthPerColumnWidth(r As Range) As Double
    WidthPerColumnWidth = (r.ColumnWidth * r.Columns.Count) / r.Width
End Function

Public Sub FitColumnsToRangeHeight(ByRef Target As Range, ByVal RowHeight As Double)
    With Target
        .RowHeight = RowHeight
        .ColumnWidth = WidthPerColumnWidth(Target) * RowHeight * (.Rows.Count / .Columns.Count)
    End With
End Sub
</code></pre>

<p>Since the conversion factor is dependent on the size of zero on the default (normal) font (see <a href="https://docs.microsoft.com/en-us/office/vba/api/Excel.Range.ColumnWidth" rel="nofollow noreferrer">the docs</a>), we could also determine the conversion factor based on a single cell (say A1), and cache that, if we expect no changes to the default style while the code is running.</p>

<pre><code>Public Function WidthPerColumnWidth() As Double
    Static ConversionFactor As Double
    If ConversionFactor = 0 Then
        With Range("A1")
            ConversionFactor = .ColumnWidth / .Width
        End With
    End If
    WidthPerColumnWidth = ConversionFactor
End Function
</code></pre>
    </div>