<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I have only superficially tested the code so far, but it seems to make sense. However, there are some details where I'm either missing something (which wouldn't surprise me, I'm more at home with C#) or the code is more complex than it needs to be. Any comments are appreciated!</p>

<ul>
<li>The private copy constructors and assignment operators throw exceptions although they can never be called. Wouldn't it suffice to leave them empty?</li>
<li>The constructor and assignment operator both accept not only arguments of type <code>T*</code>, but also exist in a templated version taking <code>U*</code>. I can't quite figure out why. My first thought was that this allows pointers to derived types to be passed; but then again, this is also possible using just the first form.</li>
<li>Similarly, I don't understand the role of the template versions of the private constructor and assignment operator. From my understanding, neither of these will be auto-generated if you don't provide private versions.</li>
<li>The safe bool pattern sound like a great idea (I first had to research it). However, VS2010 shows a compile error saying "cannot convert from '<code>clr_scoped_ptr&lt;T&gt;::operator safe_bool *::safe_bool *</code>' to '<code>safe_bool *</code>'". Apparently, it treats the two occurrences of <code>struct safe_bool</code> as two different types. Am I missing something here?</li>
<li>You end the private methods and operators with a semicolon and you write empty argument lists as <code>(void)</code> rather than <code>()</code>. Are these just stylistic choices, or are there advantages in doing this?</li>
</ul>
    </div>