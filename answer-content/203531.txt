<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Bugs</h2>

<p><code>FindPrimes</code> is one of the better sieve implementations I've seen posted on this site, but it has an out-by-one bug. Here's some test code, which you can tidy up in a unit testing framework if you want to do things properly:</p>

<pre><code>    var df = new DivisorFinder(72);
    int[] knownPrimes = new int[] { 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47 };
    for (int limit = 1; limit &lt;= 50; limit++)
    {
        var expected = knownPrimes.Where(p =&gt; p &lt; limit);
        var observed = df.FindPrimes(limit);
        if (!expected.SequenceEqual(observed)) Console.WriteLine($"Error for limit {limit}");
    }
</code></pre>

<hr>

<p><code>FindDivisors</code> has a more alarming bug. What are the divisors of <code>72</code>? According to this code, they include <code>144</code>...</p>

<hr>

<h2>Structure</h2>

<p><code>FindPrimes</code> should be <code>static</code>: nothing in that method depends on instance fields or properties.</p>

<p><code>FindPrimeFactors</code> modifies state, so it's not idempotent. Calling <code>FindDivisors</code> twice on the same object should give the same results, but it doesn't.</p>

<p>Frankly, this class is an example of OO purism at its worst. There's no good reason for <em>any</em> of the methods to be non-<code>static</code>.</p>

<hr>

<p>IMO the dependency relationship between <code>FindDivisors</code> and <code>FindPrimeFactors</code> is wrong: <code>FindPrimeFactors</code> should be responsible for calculating which primes it needs to use. Consider that if you want to have multiple methods which use the prime factors in different ways, you shouldn't have to copy-paste the line</p>

<pre><code>    var primes = FindPrimes((int) (Math.Sqrt(_number) + 1));
</code></pre>

<p>into every single one.</p>
    </div>