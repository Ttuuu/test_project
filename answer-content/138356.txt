<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ol>
<li><p>There's no use of IList when you have only lists you can't create an array anyway because you are using <code>Add()</code>.</p></li>
<li><p>When you know your input will be only string you should use <code>int.Parse()</code> instead of <code>Convert.ToInt32</code></p></li>
<li><p>Those lines can be replaced by a ternary operator </p>

<pre><code>        if (transactions.Count &gt; 1)
        {
            minimumDaysTransaction = transactions.OrderBy(x =&gt; x.difference).First();
        }
        else if (transactions.Count == 1)
        {
            minimumDaysTransaction = transactions[0];
        }
</code></pre></li>
</ol>

<p>Can become</p>

<pre><code>minimumDaysTransaction = transactions.Count &gt; 1 
? minimumDaysTransaction = transactions.OrderBy(x =&gt; x.difference).First() 
: minimumDaysTransaction = transactions[0];
</code></pre>

<ol start="4">
<li><p>You can replace one of your <code>for</code> loops with an <em>LINQ</em> expression</p>

<pre><code>IList&lt;int&gt; sharePrices = new List&lt;int&gt;();
foreach (string parsedPrice in parsedPrices)
{
    sharePrices.Add(Convert.ToInt32(parsedPrice));
}
</code></pre>

<p>Like this </p>

<pre><code>List&lt;int&gt; sharePrices = parsedPrices.Select(int.Parse).ToList();
</code></pre>

<p>performance-wise LINQ falls behind a normal for/foreach loop but it brings more readability to your code and also shortens it.</p></li>
<li><p>Both <code>IList&lt;Transaction&gt; transactions</code> and <code>Transaction minimumDaysTransaction</code> can be moved inside your <code>for</code> loop.</p></li>
<li><p>Talking about performance here : <code>transactions.OrderBy(x =&gt; x.difference).First()</code> you are using <code>OrderBy</code> and <code>First()</code> the second one can be replaced by <code>[0]</code> because direct indexing works faster the method call. <code>OrderBy</code> is not really fast you should replace it with custom <code>ICombarable(T)</code> + a List Sort, however you are using <code>struct</code> not a <code>class</code> implementing interface's in <code>struct</code> can cause some problems, so if You want to implement <code>IComparable(T)</code> you should switch to <code>class</code>.</p></li>
</ol>
    </div>