<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'd say there is two major issues in your code.</p>

<p><strong>First one is</strong> that main loop which is very unclear, many if statements, filled with <code>continue</code> and <code>quit()</code> , this is <strong>spagetthi code</strong> and it is makes your code harder to read, so harder to debug, because that jumps everywhere.</p>

<p><strong>The second one is the lack of OOP design</strong>, which could be very adapted to this case. Games are usually developped with strongly object oriented languages (Unreal engine uses C++ and Unity uses C# among others) because of the strong interactions between components, and a very favorable context to abstraction and modularity. To be fair, that's not really needed for short games like rock paper scissors but it prevents you to scale the game further.</p>

<p>There is few design improvements I suggest you:</p>

<p><strong>Split your code into functions</strong>, first one could be the game winning condition that should be used in your game loop to avoid unwanted infinite loops, common with constant conditions like <code>while True:</code>. Replace this statement instead by <code>while has_game_ended():</code>, with <code>has_game_ended</code> looking like:</p>

<pre><code>    def has_game_ended(player_score: int, ia_score: int) -&gt; bool:
        if player_score == 3 or ia_score == 3:
            print("Game over: {} won!".format("player" if player_score == 3 else "AI"))
            return True
        return False
</code></pre>

<p>Then <strong>use an <a href="https://docs.python.org/fr/3/library/enum.html" rel="nofollow noreferrer">enum</a></strong> to list you moves to make them easier to reuse in your code (PAPER makes more sense than 1) and enable comparison using operator overload, note that this is a tricky comparison specific to game rules.</p>

<pre><code>from enum import Enum

class Move(Enum):
    PAPER = 1
    ROCK = 2
    SCISSORS = 3

    def __lt__(self, other):
        return (self is Move.ROCK and other is Move.PAPER) or (self is Move.Paper and other is Move.SCISSORS) or (self is Move.SCISSORS and other is Move.ROCK)
</code></pre>

<p>Now you can write:</p>

<pre><code>&gt;&gt;&gt; player_choice = Move.PAPER
&gt;&gt;&gt; ia_choice = Move.ROCK
&gt;&gt;&gt; player_choice &lt; ia_choice
True
</code></pre>

<p>and something like</p>

<pre><code>player_score = player_score + int(player_choice &gt; ia_choice)
ia_score = ia_score + int(ia_choice &gt; player_choice)
</code></pre>

<p>This works well because it's not comparing two integers anymore, it's comparing two <code>Move</code>, which makes all the difference thanks to operator overloading.</p>

<p><strong>Avoid <code>quit()</code></strong> in your scripts, it totally cuts the code flow and doesn't allow nice error handling, prefer instead loop conditions or try except statements with customized Exception for unexpected behaviors (for example when you use invalid command, as in the example below).</p>

<pre><code>def WrongCommand(Exception):
    pass

if __name__ == "__main__":
    try:
        play()
    except WrongCommand:
        print("Invalid command, exiting program...")
</code></pre>
    </div>