<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>As discussed in comments, an alternative approach would be to construct the wrapped start and end iterators when the progress bar is created, rather than when <code>begin()</code> or <code>end()</code> is called.  I've experimented with this, and here's the result (which I think is considerably simpler); it may be a useful starting point:</p>

<pre><code>#ifndef __PBAR_H
#define __PBAR_H

#include &lt;iostream&gt;
#include &lt;iterator&gt;

namespace pbar {

template&lt;class It&gt;          // requires ForwardIterator It
class ProgressBar
{
public:
    ProgressBar(It it, It it_end, size_t width, const char symbol='=')
        : width_(width),
          size_(std::distance(it, it_end)),
          symbol_(symbol),
          iter_begin_(*this, std::move(it)),
          iter_end_(*this, std::move(it_end))
    {
    }

    struct iterator;

    iterator begin()
    {
        count_ = 0;
        return iter_begin_;
    }
    iterator end()
    {
        return iter_end_;
    }

private:
    // callback from iterator
    void notify()
    {
        ++count_;
        auto&amp; stream = std::clog;
        std::size_t pos = width_ * count_ / size_;
        stream &lt;&lt; left_delim_;
        for (std::size_t i = 0;  i &lt; width_;  ++i) {
            stream &lt;&lt; (i == pos ? pointer_
                       : i &lt; pos ? symbol_
                       : ' ');
        }
        stream &lt;&lt; right_delim_ &lt;&lt; count_ * 100 / size_ &lt;&lt; "%\r";
        stream.flush();
    }

    std::size_t count_ {0};
    const std::size_t width_;
    const std::size_t size_;

    const char symbol_;
    const char left_delim_ {'['};
    const char right_delim_ {']'};
    const char pointer_ {'&gt;'};

    const iterator iter_begin_;
    const iterator iter_end_;

}; // class ProgressBar


template&lt;class It&gt;
struct ProgressBar&lt;It&gt;::iterator
{
    using iterator_category = std::forward_iterator_tag;
    using value_type = typename It::value_type;
    using difference_type = typename It::difference_type;
    using pointer = typename It::pointer;
    using reference = typename It::reference;

    iterator(ProgressBar&amp; parent, It iter)
        : parent_(parent), iter_(std::move(iter))
    {}

    iterator&amp; operator++()
    {
        ++iter_;
        parent_.notify();
        return *this;
    }
    iterator operator++(int)
    {
        auto retval = *this;
        ++*this;
        return retval;
    }

    bool operator==(const iterator&amp; other) const
    {
        return iter_ == other.iter_;
    }
    bool operator!=(const iterator&amp; other) const
    {
        return !(*this == other);
    }

    reference operator*() const {
        return *iter_;
    }

    It operator-&gt;() const {
        return iter_;
    }

private:
    ProgressBar&lt;It&gt;&amp; parent_;
    It iter_;

}; // struct ProgressBar&lt;It&gt;::iterator

} // namespace pbar

#endif // __PBAR_H
</code></pre>

<p>It's still hard to know what's the Right Thing to do if <code>begin()</code> is called more than once, or if the returned iterator is copied (in particular, what happens if the user calls <code>std::distance(bar.begin(), bar.end())</code> - we'll interpret that as 100% visited!).  I've chosen to reset the counter each time <code>begin()</code> is called, but that's still not foolproof.</p>

<p>A further enhancement would be to remember what we last displayed, to avoid screen flicker when we process many small items.  We should write output only when the bar position or the percentage number changes.</p>
    </div>