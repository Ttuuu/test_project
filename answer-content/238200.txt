<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Try to use more <a href="https://en.wikibooks.org/wiki/Python_Programming/Idioms" rel="noreferrer">Python idioms</a>; in particular, make your code <a href="https://stackoverflow.com/questions/1784664/what-is-the-difference-between-declarative-and-imperative-programming">more declarative rather than imperative</a>. You can rewrite everything after your dictionary definitions with</p>

<pre class="lang-py prettyprint-override"><code>return sum(values[i] for i in s)+sum(checks.get(s[i:i+2], 0) for i in range(len(s)-1))
</code></pre>

<p>or, which is more PEP-8 friendly,</p>

<pre class="lang-py prettyprint-override"><code>result = sum(values[i] for i in s)
result += sum(checks.get(s[i : i + 2], 0) for i in range(len(s) - 1))
return result
</code></pre>

<p>Let me explain:</p>

<ul>
<li>For each sum, I don't need <code>[]</code> around the argument, because without them I'm summing a <a href="https://wiki.python.org/moin/Generators" rel="noreferrer">generator</a> instead of a list;</li>
<li>If <code>d</code> is a dictionary, <a href="https://docs.quantifiedcode.com/python-anti-patterns/correctness/not_using_get_to_return_a_default_value_from_a_dictionary.html#use-dict-get-key-default-to-assign-default-values" rel="noreferrer">it's considered best practice</a> to use <code>d.get(k, v)</code> to get <code>d[k]</code> if it exists, or <code>v</code> otherwise.</li>
</ul>

<p>Your function also shouldn't have a <code>self</code> argument. If it must exist in a class, delete this argument and place an <a href="https://stackabuse.com/pythons-classmethod-and-staticmethod-explained/" rel="noreferrer"><code>@staticmethod</code></a> <a href="https://wiki.python.org/moin/PythonDecorators#What_is_a_Python_Decorator" rel="noreferrer">Python decorator</a> above it. (Please don't confuse Python decorators with the <a href="https://en.wikipedia.org/wiki/Decorator_pattern" rel="noreferrer">decorator pattern</a>.)</p>

<p>Having said all that, your algorithm is very clever, well done. I've coded the same problem myself before, but it never occurred to me to calculate the result assuming no subtractions were needed, then make the subtractions accordingly.</p>
    </div>