<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First, I believe that the <code>Node</code> class is an implementation detail. You could move it inside the <code>Stack</code> or your could rename it <code>_Node</code> to indicate that it is private.</p>

<p>Next, I will refer you to this answer to a different CR question, also written by me: <a href="https://codereview.stackexchange.com/a/185052/106818">https://codereview.stackexchange.com/a/185052/106818</a></p>

<p>Specifically, points 2-7:</p>

<ol start="2">
<li><p>... consider how the <a href="https://docs.python.org/3/library/stdtypes.html#lists" rel="nofollow noreferrer">Python <code>list</code> class</a> (and <code>set</code>, and <code>dict</code>, and <code>tuple</code>, and ...) is initialized. And how the <a href="https://docs.python.org/3/library/stdtypes.html#mutable-sequence-types" rel="nofollow noreferrer">Mutable Sequence Types</a> are expected to work.</p>

<p>Because <em>your code</em> is implementing a "mutable sequence type." So there's no reason that your code shouldn't work the same way. In fact, if you want other people to use your code, you should try to produce as few surprises as possible. Conforming to an existing interface is a good way to do that!</p></li>
<li><p>Create an initializer that takes a sequence.</p>

<pre><code>class Stack:
    def __init__(self, seq=None):
        ...
        if seq is not None:
            self.extend(sequence)
</code></pre></li>
<li><p>Implement as many of the mutable sequence operations as possible.</p></li>
<li><p>Use the standard method names where possible: <code>clear</code>, <code>extend</code>, <code>append</code>, <code>remove</code>, etc.</p></li>
<li><p>Implement special <em>dundermethods</em> (method names with "double-underscores" in them: double-under-methods, or "dundermethods") as needed to make standard Python idioms work:</p>

<pre><code>def __contains__(self, item):
    for i in self:
        ...

def __iter__(self):
    node = self.head

    while node:
        yield node.value
        node = node.next
</code></pre></li>
<li><p>Implement your test code using standard Python idioms, to prove it's working <em>and to show developers how your code should be used!</em></p></li>
</ol>

<p>Finally, some direct code criticisms:</p>

<ol start="8">
<li><p>Don't use equality comparisons with <code>None</code>. Use <code>is None</code> or <code>is not None</code> instead. This is a <a href="https://pep8.org/" rel="nofollow noreferrer">PEP-8</a>-ism, and also actually faster.</p></li>
<li><p>You don't really use <code>self.bottom</code> for anything. Go ahead and delete it.</p></li>
<li><p>Don't use <code>CamelCase</code> variable names. That's another PEP-8 violation. Use <code>snake_case</code> for local variables.</p></li>
</ol>
    </div>