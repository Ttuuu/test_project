<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>It might be better to treat the credit card number as a string. In the C programming language a string is a null terminated array of type <code>char</code> or character. This would remove all the division in the program to get each character. It would also allow the program to detect if any non-numeric characters were entered. </p>

<p>To get the actual numeric value of a character you would subtract <code>'0'</code> from the numeric character. For a single character this would always give you a value between zero and nine.</p>

<p><strong>Variable Names</strong><br>
Having variables <code>i1</code> through <code>i16</code> is a very good indication that <code>i</code> should be an array, this is also true of <code>t</code>.</p>

<p>Having single character variable names is generally frowned upon except for loop control values. A single character really doesn't tell anyone reading or modifying the code what the variable really is or does. It isn't really clear in the program what <code>i</code> or <code>t</code> represents. While <code>number</code> is longer, it might be better if it was <code>credit_card_number</code>.</p>

<p><strong>Basic Principles When Writing Code</strong><br>
One of the earliest principles all programmers learn is <a href="https://en.wikipedia.org/wiki/Don%27t_repeat_yourself" rel="nofollow noreferrer">Don't Repeat Yourself</a>, usually shortened to DRY code. Basically anytime you have code that repeats it would be better to put it into a loop or a function where the code is reused.</p>

<p>One example of repeating code from the question is :</p>

<pre><code>    if (tN &gt; 9)
    {
        tN = tN - 9;
    }
</code></pre>

<p>This code can be made into a function:</p>

<pre><code>int adjust_t_value(int tN)
{
    if (tN &gt; 9)
    {
        return tN - 9;
    }
    else
    {
        return tN;
    }
}
</code></pre>

<p>If the variable <code>t</code> was an array, then code in the program could be reduced to </p>

<pre><code>    for (int t_count = 0; t_count &lt; N; t_count++)
    {
        t[t_count] = adjust_t_value(t[t_count]);
    }
</code></pre>

<p>There is a second form of the if statement that could also make the code shorter, it is generally covered in the later part of any C programming course</p>

<pre><code>    tN = (tN &gt; 9)? tN - 9 : tN;
</code></pre>

<p>This single statement is equivalent to the function above.</p>

<p>A second example of repeating code is the division to reduce each digit in the credit card number to a single number, this could also be put into a loop. The divisor could be reduced in each iteration of the loop if the algorithm sticks with using numbers.</p>

<p>A second principle that should be taught early but is part of more complex programming is the <a href="https://en.wikipedia.org/wiki/Single_responsibility_principle" rel="nofollow noreferrer">Single Responsibility Principle</a> which states that every module, class, or function should have responsibility over a single part of the functionality provided by the software, and that responsibility should be entirely encapsulated within the function, module or class. This reduces the size of functions which allows functions to be more readable, maintainable and easier to debug. This would mean breaking the <code>main()</code> function into two or three sub functions to reduce the complexity of main.</p>

<p><strong>Use Vertical Spacing to Make the Code More Readable</strong><br>
The code in the question has the <code>if (tN &gt; 9)</code> on only two lines, it might be more readable if it was 4 lines as shown above.</p>
    </div>