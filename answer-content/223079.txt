<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Review</h3>

<ul>
<li>Generic type definition <code>T</code> is redundant.</li>
<li>Looping the <code>ExpandoObject</code> is better optimized then looping the destination's properties, because you get the items as key-value pair in a single pass.</li>
<li>Fetch only publicly accessible setter properties to avoid nasty exceptions on <code>property.SetValue</code>.</li>
<li>Don't be too strict on matching the source and destination's types. Take advantage of the built-in type converter API <code>Convert.ChangeType</code>.</li>
</ul>

<h3>Proposed Alternative</h3>

<p><code>TypeExtension</code> allows for a changing an instance's type.</p>

<pre><code>public static class TypeExtension
{
    public static bool IsNullable(this Type type)
    {
        type = type ?? throw new ArgumentNullException(nameof(type));
        return type.IsGenericType 
            &amp;&amp; type.GetGenericTypeDefinition().Equals(typeof(Nullable&lt;&gt;));
    }

    public static bool IsNullAssignable(this Type type)
    {
        type = type ?? throw new ArgumentNullException(nameof(type));
        return type.IsNullable() || !type.IsValueType;
    }

    public static object ChangeType(this Type type, object instance)
    {
        type = type ?? throw new ArgumentNullException(nameof(type));
        if (instance == null)
        {
            if (!type.IsNullAssignable())
            {
                throw new InvalidCastException($"{type.FullName} is not null-assignable");
            }
            return null;
        }
        if (type.IsNullable())
        {
            type = Nullable.GetUnderlyingType(type);
        }
        return Convert.ChangeType(instance, type);
    }
}
</code></pre>

<p><code>Mapper</code> could be optimized, made more robust and better suited to map between different types.</p>

<pre><code>public static class Mapper
{
    public static void Map(ExpandoObject source, object destination)
    {
        source = source ?? throw new ArgumentNullException(nameof(source));
        destination = destination ?? throw new ArgumentNullException(nameof(destination));

        string normalizeName(string name) =&gt; name.ToLowerInvariant();

        IDictionary&lt;string, object&gt; dict = source;
        var type = destination.GetType();

        var setters = type.GetProperties(BindingFlags.Public | BindingFlags.Instance)
            .Where(p =&gt; p.CanWrite &amp;&amp; p.GetSetMethod() != null)
            .ToDictionary(p =&gt; normalizeName(p.Name));

        foreach (var item in dict)
        {
            if (setters.TryGetValue(normalizeName(item.Key), out var setter))
            {
                var value = setter.PropertyType.ChangeType(item.Value);
                setter.SetValue(destination, value);
            }
        }
    }
}
</code></pre>

<p>Test Case:</p>

<pre><code>public class Point
{
    public int? X { get; set; }
    public double Y { get; set; }
}

static void Main(string[] args)
{
    dynamic source = new ExpandoObject();
    source.X = 0;
    source.Y = 0m;

    var destination = new Point
    {
        X = 1,
        Y = 1d
    };

    Mapper.Map(source, destination);

    Console.WriteLine(destination.X);
    Console.WriteLine(destination.Y);
    Console.ReadKey();
}
</code></pre>
    </div>