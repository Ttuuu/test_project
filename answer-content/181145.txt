<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Concerning your question: When dividing an int by an int, or when converting double to int, the result is always an int. This means that the result is being rounded down, never up. The part after the floating point is just stripped away.</p>

<p>I suggest the following improvements:</p>

<pre><code>#include &lt;iostream&gt;
#include &lt;vector&gt;
#include &lt;algorithm&gt;

int main()
{
</code></pre>

<p>Use expressive names to create self-documenting code. If a comment is needed to explain a variable, use a different name:</p>

<pre><code>    std::vector&lt;double&gt; temperatures;
</code></pre>

<p>Comment blocks of code from the developer/user perspective, not single lines from the technical viewpoint:</p>

<pre><code>    // Fill temperatures with user input.
    for (double temperature; std::cin&gt;&gt;temperature; )
    {
        temperatures.push_back(temperature);
    }
</code></pre>

<p>Also I'm not sure whether <code>temp</code> was intended to mean temperature or temporary (which would be the common usage of the abbreviation). But both would fit here, so let's stay in our domain view.</p>

<p>Use local variables to reuse calculated values and shorten lines of code. Good variable names can abstract details and increase readability:</p>

<pre><code>    int number_of_temperatures = temperatures.size();

    // Calculate mean temperature.
    // (Maybe this should be a function instead.
    // The function name would replace the comment and shorten the code.)
    double sum = 0;
    for (int x : temperatures) sum += x;
    double mean_temperature = sum / number_of_temperatures;
</code></pre>

<p>Don't comment lines where the code already explains itself:</p>

<pre><code>    std::sort(temperatures.begin(),temperatures.end());
</code></pre>

<p>Again we use intermediate results and save them into variables. This increases readability, and reduces the need for comments.</p>

<pre><code>    // Calculate median temperature.
    bool even_amount = (number_of_temperatures % 2 == 0);
    int odd_amount_index = number_of_temperatures / 2;
    int even_amount_median = temperatures[odd_amount_index - 1] + temperatures[odd_amount_index]) / 2;

    double median_temperature = even_amount ?
                                even_amount_median : 
                                temperatures[odd_amount_index];
</code></pre>

<p>First we calculate, then we output the results:</p>

<pre><code>    std::cout &lt;&lt; "Average temperature: " &lt;&lt; mean_temperature &lt;&lt; "\n";
    std::cout&lt;&lt; "Median temperature: " &lt;&lt; median_temperature &lt;&lt; "\n";

}
</code></pre>
    </div>