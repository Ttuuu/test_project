<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<pre><code>    private void initializeImages()
    {
        string appRoot = System.IO.Path.GetDirectoryName(Application.ExecutablePath);
        files = System.IO.Directory.GetFiles(appRoot + @"\Resources");
        files2 = System.IO.Directory.GetFiles(appRoot + @"\Resources");
        files3 = System.IO.Directory.GetFiles(appRoot + @"\Resources");
        files4 = System.IO.Directory.GetFiles(appRoot + @"\Resources");
        files = files.OrderBy(x =&gt; rnd.Next()).ToArray();
        files2 = files.OrderBy(x =&gt; rnd.Next()).ToArray();
        files3 = files.OrderBy(x =&gt; rnd.Next()).ToArray();
        files4 = files.OrderBy(x =&gt; rnd.Next()).ToArray();
    }
</code></pre>
</blockquote>

<p>Here you load the same file names into four different arrays of strings. This is very memory inefficient and unnecessary. Instead only load them once into a single array and shuffle that when you want to change the images in the picture boxes.</p>

<p>In general: when you feel the need to add indices to the names of a set of variables like you do, you should reconsider your design - and you'll probably realize that an array or list or other kind of collection is the solution.</p>

<hr>

<blockquote>
<pre><code>Random rnd = new Random();
</code></pre>
</blockquote>

<p>In general: avoid abbreviated names of properties, fields, methods, object/classes etc. Provide descriptive names and let intellisense in the IDE do the work for you. Here <code>random</code> or <code>randomGenerator</code> would be descriptive names.</p>

<hr>

<blockquote>
<pre><code>private void button1_Click(object sender, EventArgs e)
    {
        initializeImages();
        nextImage();
    }
</code></pre>
</blockquote>

<p>Here you repeatedly reload the image file names. This makes sense if the number of images in the location changes - but you look in a sub folder to the installation folder which indicates that they are rather constant, so no need to do it other than when the form loads.</p>

<hr>

<p>Below I've tried to refactor your code while implementing the above suggestions:</p>

<pre><code>private string[] imageFileNames;
Random random = new Random();

public Menu()
{
  InitializeComponent();

  InitializeImages();
}

private void InitializeImages()
{
  imageFileNames = Directory.GetFiles(Path.Combine(Path.GetDirectoryName(Application.ExecutablePath), "Resources"));
}

private void ShuffleImages()
{
  Array.Sort(imageFileNames, (a, b) =&gt; random.Next(0, 3) - 1);
}

private void SetImages()
{
  var picturBoxes = new[] { pictureBox1, pictureBox2, pictureBox3, pictureBox4 };

  for (int i = 0; i &lt; picturBoxes.Length; i++)
  {
    picturBoxes[i].ImageLocation = imageFileNames[i % imageFileNames.Length];
  }
}

private void button1_Click(object sender, EventArgs e)
{
  ShuffleImages();
  SetImages();
}
</code></pre>

<hr>

<p>If the number of images is limited you can consider to load them all once into an list of <code>Image</code> objects and then shuffle these instead of the file names.</p>

<pre><code>private void InitializeImages()
{
  images = Directory
    .GetFiles(Path.Combine(Path.GetDirectoryName(Application.ExecutablePath), "Resources"))
    .Select(fn =&gt; Image.FromFile(fn)).ToArray();
}
</code></pre>
    </div>