<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I like:</p>

<ul>
<li>good include-guards, unlikely to collide with others</li>
<li>careful use of scoped names</li>
<li>efficient storage of small values (though the repeated access code could perhaps be refactored to a utility method in <code>Task</code>)</li>
</ul>

<p>I dislike:</p>

<ul>
<li>identifiers that differ only in <code>_</code> prefix or suffix</li>
<li>pointless parens around value arguments to <code>sizeof</code> that make them look like type arguments</li>
<li>our types are in the global namespace</li>
</ul>

<p>Specific issues:</p>

<ul>
<li><blockquote>
<pre><code>Task(void(*fun_)(Task&amp;), void* args_, std::size_t size_, TaskTraits::time_point when_) noexcept :
    _fun{fun_}, _args{args_}, _size{size_}, _when{when_}
{}
</code></pre>
</blockquote>

<p>It's misleading to write the <code>_when</code> initializer last, as it will be initialized first.  In this specific case, it doesn't matter, because there's no interdependencies, but I recommend always writing the initializers in the same order as the members.</p></li>
<li><blockquote>
<pre><code>void TaskScheduler::update() {
    std::size_t userdata_size = 0;
</code></pre>
</blockquote>

<p>This local variable is never used.</p></li>
<li><p>I don't see any reason why <code>Task</code> needs to be a publicly-visible class.  Since we can't insert or obtain one, it should probably be a private <code>struct</code> within <code>TaskScheduler</code>.</p></li>
<li><p>When scheduling new tasks, we ought to accept a forwarding reference to a <code>Fun</code>, and use <code>std::fwd()</code> as appropriate, rather than copying from a const reference.</p></li>
<li><p>We're over-constraining the allocator by letting the alignment default to <code>alignof(std::max_align_t)</code> rather than using the actual alignment requirements like this:</p>

<pre><code>args = get_resource()-&gt;allocate(sizeof fun_, alignof(Fun));
</code></pre></li>
<li><p>The linear search for tasks to run might be a performance drag when there are lots of tasks.  This is a problem for which the <em>heap</em> structure is a perfect fit (<code>std::priority_queue</code>).</p></li>
</ul>
    </div>