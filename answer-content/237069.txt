<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Before I met this post I've created my own implementation (<a href="https://coliru.stacked-crooked.com/a/cdf0749a54723ec4" rel="nofollow noreferrer">live example</a>):</p>

<pre><code>// This template accepts a std::pair of iterators with value_type of size 1 byte.
template &lt;typename T, typename Iter&gt;
std::enable_if_t&lt;
   sizeof( typename std::iterator_traits&lt;Iter&gt;::value_type )== 1, //std::is_same_v&lt; typename std::iterator_traits&lt;Iter&gt;::value_type, char &gt;,
   std::basic_ostream&lt;T&gt;
&gt; &amp;operator&lt;&lt;(std::basic_ostream&lt;T&gt; &amp;os, std::pair&lt;Iter, Iter&gt; beginend)
{   
   auto prev_os_format = os.flags();
   auto prev_os_fill = os.fill();

   static_assert(sizeof(typename std::iterator_traits&lt;Iter&gt;::value_type) == 1); // Available fot bytes only
   os &lt;&lt; std::setw(2) &lt;&lt; std::setfill('0') &lt;&lt; std::hex &lt;&lt; std::uppercase;
   using namespace std;
   string ascii;
   auto const &amp;[begin, end] = beginend;
   auto iter = begin;
   const char *newline = ""; // append \n at the begining of every line except first one, not at the end.
   while (iter != end)
   {
      os &lt;&lt; setw(0) &lt;&lt; newline;
      unsigned short offset = iter - begin;
      os &lt;&lt; "0x" &lt;&lt; setfill('0') &lt;&lt; setw(4) &lt;&lt; std::right &lt;&lt; unsigned(offset) &lt;&lt; ": ";

      auto const line_end = iter + 16;
      for( auto const line_part : {iter+8,line_end} ){
         while (iter != line_part &amp;&amp; iter != end)
         {
            ascii += isprint(*iter) ? *iter : '.';
            os &lt;&lt; setw(2) &lt;&lt; unsigned(*iter) &lt;&lt; " ";
            ++iter;
         }
         os &lt;&lt; " ";
      }
      // align ascii representation in last line
      for (int i = 0; i &lt; line_end - iter; ++i)
         os &lt;&lt; "   ";

      os &lt;&lt; " |" &lt;&lt; setfill(' ') &lt;&lt; setw(16) &lt;&lt; std::left &lt;&lt; ascii &lt;&lt; "|";
      ascii = "";
      newline = "\n";
   }

   os.flags(prev_os_format);
   os.fill(prev_os_fill);
   return os;
}
</code></pre>

<p>And usage:</p>

<pre><code>#include &lt;algorithm&gt;
#include &lt;sstream&gt;
#include &lt;iostream&gt;
#include &lt;iterator&gt;
#include &lt;iomanip&gt;
#include &lt;string_view&gt;
#include &lt;string&gt;
#include &lt;vector&gt;

int main()
{
   using namespace std;

   constexpr std::string_view sv0 = "hello\x02";
   cout &lt;&lt; pair{begin(sv0), end(sv0)} &lt;&lt; endl
        &lt;&lt; endl;

   constexpr std::string_view sv1 = "hello world\x02khgavsd \x0B \x0A\x05Xasjhlasbdas jalsjdn\x13xa0";
   std::vector&lt;char&gt; v1 {begin(sv1),end(sv1)};  // will fail for std::vector&lt;int&gt;
   cout &lt;&lt; pair{begin(v1), end(v1)} &lt;&lt; endl
        &lt;&lt; endl;

   constexpr std::string_view sv2 = "hello world\x02khgavsd \x0B \x0A\x05Xasjhlasbdas jalsjdn\x13  012345678asfd.hjbelfjdvn;kqewjnfd;lijvnbqe;jraf v;kqhjewrsljhfdbvi;jekbner;ifbsdvpi[ubep[ibuvqrub[iuqeb[iuabivwequniuweniupni]]]] ;afkdjvbnqe'orjnfavi;pjqerbipjvbqei[jrbwv[ipbqreo[iuwvfb[ioqeruwbvo[iubqrio[evbwsd[uibrqefp[iadubwerip[bvp[ieqwrubvipube9";
   cout &lt;&lt; pair{begin(sv2), end(sv2)} &lt;&lt; endl
        &lt;&lt; endl;
}
</code></pre>

<p>and output</p>

<pre><code>❯❯❯ c++ -std=c++17 ./test-str-hex.cpp &amp;&amp; ./a.out
0x0000: 68 65 6C 6C 6F 02                                  |hello.          |

0x0000: 68 65 6C 6C 6F 20 77 6F  72 6C 64 02 6B 68 67 61   |hello world.khga|
0x0010: 76 73 64 20 0B 20 0A 05  58 61 73 6A 68 6C 61 73   |vsd . ..Xasjhlas|
0x0020: 62 64 61 73 20 6A 61 6C  73 6A 64 6E 13 78 61 30   |bdas jalsjdn.xa0|

0x0000: 68 65 6C 6C 6F 20 77 6F  72 6C 64 02 6B 68 67 61   |hello world.khga|
0x0010: 76 73 64 20 0B 20 0A 05  58 61 73 6A 68 6C 61 73   |vsd . ..Xasjhlas|
0x0020: 62 64 61 73 20 6A 61 6C  73 6A 64 6E 13 20 20 30   |bdas jalsjdn.  0|
0x0030: 31 32 33 34 35 36 37 38  61 73 66 64 2E 68 6A 62   |12345678asfd.hjb|
0x0040: 65 6C 66 6A 64 76 6E 3B  6B 71 65 77 6A 6E 66 64   |elfjdvn;kqewjnfd|
0x0050: 3B 6C 69 6A 76 6E 62 71  65 3B 6A 72 61 66 20 76   |;lijvnbqe;jraf v|
0x0060: 3B 6B 71 68 6A 65 77 72  73 6C 6A 68 66 64 62 76   |;kqhjewrsljhfdbv|
0x0070: 69 3B 6A 65 6B 62 6E 65  72 3B 69 66 62 73 64 76   |i;jekbner;ifbsdv|
0x0080: 70 69 5B 75 62 65 70 5B  69 62 75 76 71 72 75 62   |pi[ubep[ibuvqrub|
0x0090: 5B 69 75 71 65 62 5B 69  75 61 62 69 76 77 65 71   |[iuqeb[iuabivweq|
0x00A0: 75 6E 69 75 77 65 6E 69  75 70 6E 69 5D 5D 5D 5D   |uniuweniupni]]]]|
0x00B0: 20 3B 61 66 6B 64 6A 76  62 6E 71 65 27 6F 72 6A   | ;afkdjvbnqe'orj|
0x00C0: 6E 66 61 76 69 3B 70 6A  71 65 72 62 69 70 6A 76   |nfavi;pjqerbipjv|
0x00D0: 62 71 65 69 5B 6A 72 62  77 76 5B 69 70 62 71 72   |bqei[jrbwv[ipbqr|
0x00E0: 65 6F 5B 69 75 77 76 66  62 5B 69 6F 71 65 72 75   |eo[iuwvfb[ioqeru|
0x00F0: 77 62 76 6F 5B 69 75 62  71 72 69 6F 5B 65 76 62   |wbvo[iubqrio[evb|
0x0100: 77 73 64 5B 75 69 62 72  71 65 66 70 5B 69 61 64   |wsd[uibrqefp[iad|
0x0110: 75 62 77 65 72 69 70 5B  62 76 70 5B 69 65 71 77   |ubwerip[bvp[ieqw|
0x0120: 72 75 62 76 69 70 75 62  65 39                     |rubvipube9      |
</code></pre>
    </div>