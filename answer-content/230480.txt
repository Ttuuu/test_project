<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Coding for performance doesn't mean that you should write unmaintainable code.  Remember that developer time is valuable, too: any time you spend tracking down avoidable bugs is time you could have spent tweaking program performance.  Some particular things that can be improved without impacting performance:</p>

<ul>
<li>Include the headers for standard identifiers we use (<code>std::swap</code> requires <code>&lt;utility&gt;</code>; <code>std::atoi</code> and <code>std::calloc</code> require <code>&lt;cstdlib&gt;</code>).</li>
<li>Avoid <code>using namespace std;</code></li>
<li>Prefer properly-typed <code>constexpr</code> values instead of preprocessor macros (I don't believe your claim that this made your code slower - I get the exact same assembly code with that change).  These values should be (private) static members, not globals.</li>
<li>Prefer C++ memory allocation to <code>&lt;cstdlib&gt;</code> allocation (<code>malloc()</code> and family).  That makes the error checking much simpler (exceptions rather than return-value checking).</li>
<li>Use a <code>std::vector</code> rather than raw <code>new[]</code>; that stops us leaking memory.</li>
<li>Keep the argument parsing out of the core logic, and make it more robust (e.g. use <code>std::stoul()</code> for converting to <code>unsigned long</code>).</li>
<li>Initialise members in the constructor's initializer list.</li>
<li>If you really need short-term macros, then <code>#undef</code> them after use.</li>
</ul>

<hr>

<p>Once we have maintainable code, we can work on the algorithm.  We're very inefficient with storage (making for poor data locality, and thus, thrashing cache unnecessarily).  We have two arrays of pointers, each the same dimension as <code>board</code>, but much bigger on platforms where <code>sizeof (unsigned char *)</code> is greater than 1.  The pointers all point into <code>board</code>, so we could store indexes instead; better still, store separate <em>x</em> and <em>y</em> coordinates, so we don't have to do divisions.</p>

<p>Given that our task is to minimize <em>real</em> time, we should look to parallelize as much as we can.  On multi-core processors, Game of Life naturally parallelizes with each thread writing its own part of the next state, and with all threads sharing read access to the old state.  SIMD parallelisation within each thread is possible, too, if your processor has support (e.g. NEON or AVX).</p>
    </div>