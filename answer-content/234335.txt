<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There are lots of really good things going on here. Particularly your use of a private type to encapsulate internal fields, <code>enums</code>, declaration of variables close to where they are being used, and overall code readability. </p>

<p>Saying that, there are some OOP best practices that I will mention below. And just as @PeterT has done, I implemented my own version of your code, mostly to help demonstrate how I would apply best practices to your implementation. </p>

<p><strong>Naming:</strong> </p>

<ul>
<li>You yourself call "TwoWayMapping" a reversible hash-map, so I say just call it that. </li>
<li>As for variable and method names, I would encourage the idea of thinking in terms of <code>key(s)</code> and <code>item(s)</code> instead of A(s) or B(s). My reasoning is the shear fact that member names like key(s)/item(s) are universally understood by developers. Also, class members and method names should be PascalCase, while variables should be camelCase. SCREAM_CASE for constants ensures that what you are looking at is most definitely a constant, but I have seen various opinions on the subject which agree/disagree. </li>
</ul>

<p><strong>Various:</strong> </p>

<ul>
<li><p><code>Assign</code> is devilishly clever and I am totally stealing it; however, the fact that it is declared in a standard module and not in the class itself, is bad practice. The same can be said for <code>Printf</code>. </p></li>
<li><p>Methods should be performing work, not properties. So <code>collectionFromIterable</code> should be a method, not a property. </p></li>
<li><p>I believe that I have seen the usage of <code>Create</code> which uses a <code>Self</code> instance before and it is also very clever, but consider using a more standard <code>Factory</code> pattern. The Factory class should be predeclared and named like <code>TwoWayMappingFactory</code>. You can then use it to instantiate <code>TwoWayMapping</code> by calling the <code>Create</code> factory method. You can also prevent client code from creating non-default instances of the Factory class via the <code>set foo = New TwoWayMappingFactory</code> (see the <code>TestNonDefaultInstance</code> in the Tests section below) by using a clever technique that I learned from @MathieuGuindon. </p></li>
</ul>

<p><strong>ReversibleHashMapFactory</strong></p>

<pre><code>'@Folder("Operator Framework.Common")
'@PredeclaredId

Option Explicit

Public Enum ReversibleHashMapFactoryErrors
    NonDefaultInstance = vbObjectError + 1024
End Enum

Private Sub Class_Initialize()
    ThrowIfNonDefaultInstance
End Sub

Public Function Create(ByVal Keys As Variant, ByVal Items As Variant) As ReversibleHashMap

    Set Create = New ReversibleHashMap
    With Create
        .MapPairs Keys, Items
    End With

End Function

Private Property Get IsDefaultInstance() As Boolean
    IsDefaultInstance = Me Is ReversibleHashMapFactory
End Property

Private Sub ThrowIfNonDefaultInstance()
    If Not IsDefaultInstance Then Err.Raise ReversibleHashMapFactoryErrors.NonDefaultInstance, _
                                  TypeName(Me), "Non-default instances of the factory class are invalid"
End Sub
</code></pre>

<p><br></p>

<p><strong>ReversibleHashMap</strong></p>

<pre><code>'@Folder("Operator Framework.Common")
Option Explicit

Public Enum ReversibleHashMapErrors
    MismatchedLength = vbObjectError + 1024
    SetsNotIterable
    KeyDoesNotExist
    ItemDoesNotExist
End Enum

Private Const MISMATCH_LENGTH_ERROR As String = "keys and items must have a 1 to 1 correspondence (i.e. must have the same length)"
Private Const SETS_NOT_ITERABLE_ERROR As String = "One of keys and items is not iterable. For single values, wrap in Array()"
Private Const VALUE_DOES_NOT_EXIST_ERROR As String = "value cannot be found in the map, ensure it is of the same data type as the original "

Private Const OBJECT_DOES_NOT_SUPPORT_RUNTIME_ERROR As Long = 438   'object does not support method
Private Const TYPE_MISMATCH_RUNTIME_ERROR As Long = 13              'type mismatch

Private Type TReversibleHashMap
    keysDict As Object
    itemsDict As Object
End Type

Private this As TReversibleHashMap

'*****************************************************************************************
'Public Methods
'*****************************************************************************************
Public Sub MapPairs(ByVal Keys As Variant, ByVal Items As Variant)

    Const METHOD_NAME As String = "MapValues"

    Dim keysColl As Collection
    Set keysColl = IterableToCollection(Keys)

    Dim itemsColl As Collection
    Set itemsColl = IterableToCollection(Items)

    If keysColl.Count &lt;&gt; itemsColl.Count Then ThrowError MismatchedLength, METHOD_NAME

    Dim i As Long
    For i = 1 To keysColl.Count
        MapPair keysColl(i), itemsColl(i)
    Next i

End Sub

Public Sub MapPair(ByVal key As Variant, ByVal item As Variant)

    Const METHOD_NAME As String = "MapValue"

    On Error GoTo CleanFail
    this.keysDict.Add key, item
    this.itemsDict.Add item, key

CleanExit:
    Exit Sub

CleanFail:
    ThrowError Err.Number, METHOD_NAME
    Resume CleanExit

End Sub

Public Property Get Count() As Long

    If this.keysDict.Count = this.itemsDict.Count Then
        Count = this.keysDict.Count

    Else
        ThrowError MismatchedLength, "Count"

    End If

End Property

Public Property Get Keys() As Variant
    Keys = this.keysDict.Keys
End Property

Public Property Get Items() As Variant
    Items = this.itemsDict.Keys
End Property

Public Function KeyExists(ByVal key As Variant) As Boolean
    KeyExists = this.keysDict.Exists(key)
End Function

Public Function ItemExists(ByVal item As Variant) As Boolean
    ItemExists = this.itemsDict.Exists(item)
End Function

Public Function PairExists(ByVal key As Variant, ByVal item As Variant) As Boolean
    PairExists = (KeyExists(key) Or ItemExists(item))
End Function

Public Function GetKey(ByVal item As Variant) As Variant

    Const METHOD_NAME As String = "GetKey"   

    If this.itemsDict.Exists(item) Then
        AssignValue(GetKey) = this.itemsDict(item)
    Else
        ThrowError ReversibleHashMapErrors.KeyDoesNotExist, METHOD_NAME
    End If

End Function

Public Function GetItem(ByVal key As Variant) As Variant

    Const METHOD_NAME As String = "GetItem"

    If this.keysDict.Exists(key) Then
        AssignValue(GetItem) = this.keysDict(key)
    Else
        ThrowError ReversibleHashMapErrors.ItemDoesNotExist, METHOD_NAME
    End If

End Function


'*****************************************************************************************
'Private Methods / Properties
'*****************************************************************************************
Private Sub Class_Initialize()
    Set this.keysDict = CreateObject("Scripting.Dictionary")
    Set this.itemsDict = CreateObject("Scripting.Dictionary")
End Sub

Private Function IterableToCollection(ByVal iterable As Variant) As Collection

    Select Case VarType(iterable)

        Case (vbArray + vbVariant)  '8204; https://docs.microsoft.com/en-us/office/vba/language/reference/user-interface-help/vartype-function
            Set IterableToCollection = ArrayToCollection(iterable)

        Case vbObject
            Set IterableToCollection = ObjectToCollection(iterable)

    End Select

End Function

Private Function ArrayToCollection(ByRef variantArray As Variant) As Collection

    Const METHOD_NAME As String = "ArrayToCollection"

    ValidateArrayDimensions variantArray, METHOD_NAME

    Dim result As Collection
    Set result = New Collection

    Dim i As Long

    On Error GoTo CleanFail
    Select Case NumberOfArrayDimensions(variantArray)
        Case 1
            For i = LBound(variantArray) To UBound(variantArray)
                result.Add variantArray(i)
            Next i

        Case 2
            For i = LBound(variantArray, 1) To UBound(variantArray, 1)
                result.Add variantArray(i, 1)
            Next i

    End Select

    Set ArrayToCollection = result


CleanExit:
    Exit Function

CleanFail:
    ManageIterableError Err.Number, METHOD_NAME
    Resume CleanExit

End Function

Private Function ObjectToCollection(ByRef obj As Variant) As Collection

    Const METHOD_NAME As String = "ObjectToCollection"

    Dim item As Variant
    Dim result As Collection
    Set result = New Collection

    On Error GoTo CleanFail
    For Each item In obj
        result.Add item
    Next

    Set ObjectToCollection = result

CleanExit:
    Exit Function

CleanFail:
    ManageIterableError Err.Number, METHOD_NAME
    Resume CleanExit

End Function


Private Property Let AssignValue(ByRef outValue As Variant, ByVal value As Variant)

    If IsObject(value) Then
        Set outValue = value
    Else
        outValue = value
    End If

End Property


'*****************************************************************************************
'Error Handling
'*****************************************************************************************
Private Sub ValidateArrayDimensions(ByRef variantArray As Variant, ByVal methodName As String)

    Dim dimensions As Long
    dimensions = NumberOfArrayDimensions(variantArray)
    Select Case dimensions
        Case Is &gt; 2
            ThrowError ReversibleHashMapErrors.SetsNotIterable, methodName
        Case Is = 2
            If IsMultiColumnArray(variantArray) Then ThrowError ReversibleHashMapErrors.SetsNotIterable, methodName

    End Select

End Sub

Private Sub ManageIterableError(ByVal errorNumber As Long, ByVal methodName As String)

    Select Case errorNumber
        Case OBJECT_DOES_NOT_SUPPORT_RUNTIME_ERROR, TYPE_MISMATCH_RUNTIME_ERROR
            ThrowError ReversibleHashMapErrors.SetsNotIterable, methodName

        Case Else
            ThrowError errorNumber, methodName

    End Select

End Sub

Private Sub ThrowError(ByVal errorNumber As ReversibleHashMapErrors, Optional ByVal sourceMethod As String = vbNullString)

    Select Case errorNumber
        Case ReversibleHashMapErrors.MismatchedLength
            Err.Description = MISMATCH_LENGTH_ERROR

        Case ReversibleHashMapErrors.SetsNotIterable
            Err.Description = SETS_NOT_ITERABLE_ERROR

        Case ReversibleHashMapErrors.KeyDoesNotExist
            Err.Description = "Key " &amp; VALUE_DOES_NOT_EXIST_ERROR &amp; "Keys"

        Case ReversibleHashMapErrors.ItemDoesNotExist
            Err.Description = "Item " &amp; VALUE_DOES_NOT_EXIST_ERROR &amp; "Items"

    End Select

    Err.Raise errorNumber, Source:=IIf(sourceMethod &lt;&gt; vbNullString, TypeName(Me) &amp; "." &amp; sourceMethod, TypeName(Me))

End Sub

Private Function NumberOfArrayDimensions(variantArray As Variant) As Integer

    Dim index As Long, upperBound As Long

        On Error Resume Next
        Err.Clear
        Do
            index = index + 1
            upperBound = UBound(variantArray, index)
        Loop Until Err.Number &lt;&gt; 0

    NumberOfArrayDimensions = index - 1

End Function

Private Function IsMultiColumnArray(variantArray As Variant) As Boolean

    On Error Resume Next
    Err.Clear

    Dim value As Variant
    value = variantArray(LBound(variantArray), 2)

    IsMultiColumnArray = (Err.Number = 0)

End Function
</code></pre>

<p><strong>Tests:</strong></p>

<pre><code>Option Explicit

Sub TestNonDefaultInstance()

    'this will throw an error
    Dim test As ReversibleHashMapFactory
    Set test = New ReversibleHashMapFactory

End Sub

Sub TestUsingFactory()

    Dim map As ReversibleHashMap
    Set map = ReversibleHashMapFactory.Create([A1:A3].value, [B1:B3].value)

    Debug.Assert map.GetItem([A2].value) = [B2].value
    Debug.Assert map.GetKey([B3].value) = [A3].value

    Debug.Print map.Count

    'Uncomment to test error
'    Debug.Print map.GetKey([A1].value)
'    Debug.Print map.GetItem([B2].value)

    If Not map.KeyExists([A1].value) Then Debug.Print map.GetKey([A1].value)
    If Not map.ItemExists([B2].value) Then Debug.Print map.GetItem([B2].value)

    Debug.Assert map.KeyExists("TestKey")
    Debug.Assert map.ItemExists("TestItem")

    Debug.Assert map.PairExists("TestKey", "TestItem")

    If Not map.PairExists("TestKey", "TestItem") Then map.MapPair "TestKey", "TestItem"

End Sub

Sub TestUsingClassDirectly()

    Dim map As ReversibleHashMap
    Set map = New ReversibleHashMap

    map.MapPairs [A1:A3].value, [B1:B3].value

    Dim values As Variant
    values = [A1:B5].value

    Dim i As Long
    For i = 1 To 5
        If Not map.PairExists(values(i, 1), values(i, 2)) Then
            map.MapPair values(i, 1), values(i, 2)
        End If
    Next i


    Debug.Assert map.GetItem([A2].value) = [B2].value
    Debug.Assert map.GetKey([B3].value) = [A3].value

    Debug.Assert map.KeyExists([A2].value)
    Debug.Assert map.ItemExists([B2].value)

    If Not map.PairExists("TestKey", "TestItem") Then map.MapPair "TestKey", "TestItem"

End Sub
</code></pre>
    </div>