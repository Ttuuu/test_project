<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>If status code of a message does not change during the lifecycle of Message instance, you probably can do a <a href="http://www.refactoring.com/catalog/replaceConditionalWithPolymorphism.html" rel="nofollow">Replace Conditional with Polymorphism</a> refactoring. Thus you will get an hierarchy of classes that exposes common fields. The consumers of Message class will be working with a base class, unaware of exact implementation. Exact message classes could be created via <a href="http://en.wikipedia.org/wiki/Factory_method_pattern" rel="nofollow">Factory Method</a> in a base class. This approach lets you give your message classes meaningful names which would be appreciated by the future developers as they will not have to guess what that mysterious 112 status code means.
Please see example below: </p>

<pre><code>public abstract class MessageBase
{
    public Guid ID { get; set; }
    public string MessageIn { get; set; }
    public string MessageOut { get; set; }
    public int StatusCode { get; set; }

    public static MessageBase CreateMessage(int statusCode)
    {
        switch (statusCode)
        {
            case 12:
            case 13:
            case 22:
            case 120:
                return new MessageA();
            default:
                return new MessageB();     
        }
    }

    public virtual bool IsDeletable
    {
        get { return false; }
    }

    public virtual bool IsEditable
    {
        get { return false; }
    }

    public virtual string Message
    {
        get
        {
            return string.Empty;
        }
    }
}

public class MessageA : MessageBase
{
    public override bool IsDeletable
    {
        get { return true; }
    }

    public override bool IsEditable
    {
        get { return true; }
    }

    public override string Message
    {
        get { return MessageOut; }
    }
}

public class MessageB : MessageBase
{
    public override bool IsDeletable
    {
        get { return true; }
    }

   public override string Message
    {
        get { return MessageIn; }
    }
}
</code></pre>
    </div>