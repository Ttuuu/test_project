<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First of all, the <code>Lexicon</code> class reinvents <a href="https://docs.python.org/2.7/library/collections.html#collections.Counter" rel="nofollow noreferrer"><code>Counter</code> from <code>collections</code></a>. Maybe subclassing can help.</p>

<p>Second, I'd separate persistence from the class because it's completely orthogonal to the <code>Counter</code> functionality (see below about shelve).</p>

<p>Pickle/unpickle does not represent any memory leaks. As soon as noone uses the dict, it's gone.</p>

<p>Then, using file (with pickled data) is not thread-safe. Depending on how you wish to implement storage for the counter, you may be interested in <a href="https://stackoverflow.com/questions/489861/locking-a-file-in-python">file locking</a>.</p>

<p>There is also <a href="https://docs.python.org/2/library/shelve.html" rel="nofollow noreferrer"><code>shelve</code> module</a> in Python, which may help with storing lexicons (though, it is not thread-safe).</p>

<p>Hard to say what is your case now or in the future, but you may want to use some special purpose file-based storages, which are designed for performance and concurrency. For example, <a href="https://www.sqlite.org/threadsafe.html" rel="nofollow noreferrer">sqlite</a>.</p>

<p>Minor notes:</p>

<ul>
<li><p>in Python, it is possible to make equality comparison by defining <code>__eq__</code> method (and the mentioned Counter class just does it - no need to make any special provisions), same for the <code>size</code> - in Python it's usually <code>len()</code>, and in case of a Counter there is no need to make another method - <code>size</code> (may need <a href="https://docs.python.org/2.7/reference/datamodel.html#object.__len__" rel="nofollow noreferrer"><code>__len__</code> method</a> if Lexicon is not inherited from some dict)</p></li>
<li><p>thread-safety of the <code>add</code> (if you still use it) can be fixed by using <code>setdefault</code> method with consequent <code>+= 1</code> (actually, not sure - you may need thread lock - <a href="https://stackoverflow.com/questions/23547604/python-counter-atomic-increment">https://stackoverflow.com/questions/23547604/python-counter-atomic-increment</a> ). Atomicity of collections Counter's update needs to be checked and wrapped.</p></li>
<li><p>as for performance, you can check with Python's <code>timeit</code></p></li>
</ul>

<p>If you insist on preserving your <code>add</code> method, you can consider a rewrite:</p>

<pre><code>self.dictt.setdefault(token, 0)
self.dictt[token] += 1
</code></pre>

<p>(again, check if this is faster than <code>self.dictt[token] = self.dictt.get(token, 0) + 1</code> ). Also <a href="https://stackoverflow.com/questions/12992165/python-dictionary-increment/12992212">this discussion</a> may be relevant: It provides <code>defaultdict</code> implementation, which looks even simpler than the Counter one.</p>

<p>Note on concurrency: It's a bit fragile to assume multi-threading-only. For example, some misconfiguration can make your application multiprocess one. In that case you will have arbitrary results in the file, even if you will have both thread locks and file locks. Maybe, this concern is not a problem in your settings, but if you care about having terms counted right, you may need to make only single process to control the file, all others just requesting <code>add</code>s to that process. Actually, a counter is something, which despite simplicity of the operation (just add one!), may cause concurrency problems and inefficiency problems with high-velocity data. All kinds of optimizations may be needed to implement a high-performance counter correctly (just <a href="http://blog.notdot.net/2010/04/High-concurrency-counters-without-sharding" rel="nofollow noreferrer">one of the first examples</a> google gives: three components in the solution, uses relational database and memcached). But elaborating on that is out of scope in this answer.</p>
    </div>