<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Count digits in positive integer</h2>

<p>You can get the number of digits using <code>log10</code></p>

<p>eg </p>

<pre><code>Math.log10(13526); // is 4.131169383089324
const digits = Math.ceil(Math.log10(13526)); // 5
</code></pre>

<p>You can get the unit value eg 423 is 100 or 256378 is 100000 by raising 10 to the power of the number of digits minus one. Well not for powers of 10</p>

<p>eg</p>

<pre><code>unit = 10 ** (Math.ceil(Math.log10(13526)) -1); // 10000
unit = 10 ** (Math.ceil(Math.log10(10000)) -1); // 1000 wrong for power of 10 number
</code></pre>

<p>To get the value we want we need to floor the log first</p>

<pre><code>unit = 10 ** Math.floor(Math.log10(10000)); // 10000
unit = 10 ** Math.floor(Math.log10(13526)); // 10000 correct
</code></pre>

<p>or</p>

<pre><code>unit = 10 ** (Math.log10(10000) | 0); // 10000
unit = 10 ** (Math.log10(13526) | 0); // 10000 
</code></pre>

<h2>Get digit at position of positive integer</h2>

<p>To get the digit at any position in a number divide it by 10 raised to the power of the digit position get the remainder of that divided by 10 and floor it.</p>

<pre><code>const digitAt = (val, digit) =&gt; Math.floor(val / 10 ** digit % 10);
</code></pre>

<p>or</p>

<pre><code>const digitAt = (val, digit) =&gt; val / 10 ** digit % 10 | 0;

// Note  brackets added only to clarify order and are not needed
// ((val / (10 ** digit)) % 10) | 0;

digitAt(567, 0);  // 7
digitAt(567, 1);  // 6
digitAt(567, 2);  // 5
</code></pre>

<h2>Positive integer a palindrome in <span class="math-container">\$O(1)\$</span> space</h2>

<p>With that info you can then build a function that does test in <span class="math-container">\$O(1)\$</span> space, as you do not need to store the digits in an array for later comparison.</p>

<p>To keep performance up we can avoid the slower versions of some operation. For <code>floor</code> we can <code>| 0</code> (note that for large numbers &gt; 2**31-1 you must use <code>floor</code>) and for <code>**</code> use <code>Math.pow</code> </p>

<p>Rather than do the full calculation to get the digit we can store the unit value of the digit we want for the top and bottom and multiply by 10 to move up and divide by 10 to move down.</p>

<pre><code>function isPalindrome(num) {
    var top = Math.pow(10, Math.log10(num) | 0), bot = 1;
    while (top &gt;= bot) {
        if ((num / top % 10 | 0) !== (num / bot % 10 | 0)) { return false }
        top /= 10;
        bot *= 10;
    }
    return true;
}
</code></pre>

<ul>
<li>The function will returns <code>false</code> for negative numbers but is not optimized for them</li>
<li>The function only works on integer values less than <code>Number.MAX_SAFE_INTEGER</code> which is <code>9007199254740991</code></li>
</ul>

<p>In terms of performance the above function is 5 times faster for a 16 digit palindrome <code>2192123993212912</code> and 10-11 times faster for  a non palindrome of 16 digits</p>
    </div>