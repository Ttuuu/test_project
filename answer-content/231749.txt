<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><code>getintval</code> is just <code>fromMaybe 1</code>. <code>finder</code> always produces <code>Just</code> - you probably meant to map <code>Nothing</code> to <code>Nothing</code>. <code>finder'</code> is just <code>lookup</code>. <code>foldl (\acc x -&gt; max acc x) 1</code> is just <code>maximum</code> (so long as <code>ch</code> is never empty). <code>k</code> can be inlined.</p>

<pre><code>solve' :: [Char] -&gt; [(Char, Int)] -&gt; Int
solve' ch lst = (*length ch) $ maximum $ map (fromMaybe 1 . (`lookup` lst)) ch
</code></pre>

<p><code>zipWith (\x y -&gt; (x, y))</code> is just <code>zip</code>. <code>read</code>'s type can be deduced. <code>rec</code> and <code>word1</code> can be inlined.</p>

<pre><code>solve :: [Char] -&gt; [Char] -&gt; Int
solve wght val = solve' val $ zip ['a'..'z'] $ map read $ words wght
</code></pre>

<p><code>mapMaybe</code> throws away invalid characters. We can flatten the call tree by letting <code>main</code> assemble the pieces.</p>

<pre><code>solve :: [Char] -&gt; [(Char, Int)] -&gt; Int
solve ch lst = (*length ch) $ maximum $ mapMaybe (`lookup` lst) ch

parse :: [Char] -&gt; [(Char, Int)]
parse = zip ['a'..'z'] . map read . words

main :: IO ()
main = do
  weight &lt;- getLine
  pdfstr &lt;- getLine
  print $ solve pdfstr $ parse weight 
</code></pre>
    </div>