<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><a href="http://martinfowler.com/bliki/TellDontAsk.html" rel="nofollow">TellDontAsk</a> principal sais:</p>

<blockquote>
  <p>Tell-Don't-Ask is a principle that helps people remember that object-orientation is about bundling data with the functions that operate on that data. It reminds us that rather than asking an object for data and acting on that data, we should instead tell an object what to do. This encourages to move behavior into an object to go with the data.</p>
</blockquote>

<p>Will <code>IComparer&lt;T&gt;</code> implementation work for you instead of exposing rules collection? Letâ€™s say we have:</p>

<pre><code>public class Person
{
    public static readonly SortingParser&lt;Person&gt; Sorting = 
        new SortingParser&lt;Person&gt;()
            .OrderBy(p =&gt; p.Age)  
            .OrderBy(p =&gt; p.City, StringComparer.InvariantCultureIgnoreCase)
            .OrderBy(p =&gt; p.Name);                

    public string Name { get; set; }
    public int Age { get; set; }
    public string City { get; set; }
}
</code></pre>

<p>Then we can get <code>IComparer&lt;T&gt;</code> this way:</p>

<pre><code>IComparer&lt;Person&gt; comparer;
Person.Sorting.TryParse("+Name;+Age;-City", out comparer);
</code></pre>

<p>Where:</p>

<pre><code>public class SortingParser&lt;T&gt;
{
    public SortingParser()
        : this(ImmutableDictionary&lt;string, IComparer&lt;T&gt;&gt;.Empty)
    {
    } 

    SortingParser(ImmutableDictionary&lt;string, IComparer&lt;T&gt;&gt; comparers)
    {
        Comparers = comparers;
    }

    public SortingParser&lt;T&gt; OrderBy&lt;V&gt;(
        Expression&lt;Func&lt;T, V&gt;&gt; selector) =&gt;
        OrderBy(selector, Comparer&lt;V&gt;.Default);

    public SortingParser&lt;T&gt; OrderBy&lt;V&gt;(
        Expression&lt;Func&lt;T, V&gt;&gt; selector, IComparer&lt;V&gt; comparer) =&gt;        
        new SortingParser&lt;T&gt;(
            Comparers.Add(
                ((MemberExpression)selector.Body).Member.Name.ToLower(), 
                new RelayComparer&lt;T,V&gt;(selector.Compile(), comparer)));

    public bool TryParse(string expression, out IComparer&lt;T&gt; comparer)
    {
        comparer = CompositeComparer&lt;T&gt;.Empty;
        if (expression == null)
            return false;

        IComparer&lt;T&gt; ruleComparer;
        foreach (var rule in expression.Split(';'))
        {
            if (!Comparers.TryGetValue(
                rule.TrimStart('+', '-').Trim().ToLower(), 
                out ruleComparer))
            {
                comparer = null;
                return false;
            }

            switch (rule[0])
            {
                case '+':
                    comparer = comparer.ThenBy(ruleComparer);
                    break;

                case '-':
                    comparer = comparer.ThenByDescending(ruleComparer);
                    break;

                default:
                    comparer = null;
                    return false;
            }
        }

        return true;
    }

    ImmutableDictionary&lt;string, IComparer&lt;T&gt;&gt; Comparers { get; }
}
</code></pre>

<p>I use <code>System.Collections.Immutable</code> NuGet package and these helper library classes:</p>

<pre><code>public static class ComparerComposition
{
    public static IComparer&lt;T&gt; Invert&lt;T&gt;(this IComparer&lt;T&gt; comparer) =&gt;
        new InvertedComparer&lt;T&gt;(comparer);

    public static IComparer&lt;T&gt; ThenBy&lt;T&gt;(
        this IComparer&lt;T&gt; first, IComparer&lt;T&gt; second) =&gt;
        new CompositeComparer&lt;T&gt;(first, second);

    public static IComparer&lt;T&gt; ThenByDescending&lt;T&gt;(
        this IComparer&lt;T&gt; first, IComparer&lt;T&gt; second) =&gt;
        new CompositeComparer&lt;T&gt;(first, second.Invert());
}
</code></pre>

<p>And</p>

<pre><code>public class InvertedComparer&lt;T&gt; : IComparer&lt;T&gt;
{
    public InvertedComparer(IComparer&lt;T&gt; inner)
    {
        Inner = inner;
    }

    public int Compare(T x, T y) =&gt;
        Inner.Compare(y, x);

    IComparer&lt;T&gt; Inner { get; }
}
</code></pre>

<p>And:</p>

<pre><code>public class CompositeComparer&lt;T&gt; : IComparer&lt;T&gt;
{
    public static readonly IComparer&lt;T&gt; Empty = new CompositeComparer&lt;T&gt;();

    public CompositeComparer(params IComparer&lt;T&gt;[] comparers)
    {
        Comparers = comparers;
    }

    public int Compare(T x, T y) =&gt;
        Comparers
            .Select(c =&gt; c.Compare(x, y))
            .FirstOrDefault(r =&gt; r != 0);

    IComparer&lt;T&gt;[] Comparers { get; }
}
</code></pre>

<p>And:</p>

<pre><code>public class RelayComparer&lt;T, V&gt; : IComparer&lt;T&gt;
{
    public RelayComparer(Func&lt;T,V&gt; selector, IComparer&lt;V&gt; parent)
    {
        Selector = selector;
        Parent = parent;
    }

    public int Compare(T x, T y) =&gt;
        Parent.Compare(Selector(x), Selector(y));

    Func&lt;T, V&gt; Selector { get; }
    IComparer&lt;V&gt; Parent { get; }
}
</code></pre>
    </div>