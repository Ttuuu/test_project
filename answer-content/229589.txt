<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>White Space</h2>

<p>This is hard on my aging eyes:</p>

<pre><code>static String[] morse = {".-","-...","-.-.","-..",".","..-.","--.","....","..",".---","-.-",".-..","--","-.","---",".--.","--.-",".-.","...","-","..-","...-",
    ".--","-..-","-.--","--.."};
</code></pre>

<p>This is much easier to read:</p>

<pre><code>static String[] morse = {
    ".-",   "-...",  "-.-.",  "-..",   ".",     "..-.",  "--.",   "....",  "..",   ".---",
    "-.-",  ".-..",  "--",    "-.",    "---",   ".--.",  "--.-",  ".-.",   "...",  "-",
    "..-",  "...-",  ".--",   "-..-",  "-.--",  "--.."
};
</code></pre>

<h2><code>alpha[i].charAt(0)</code></h2>

<p>In the following, you use create 26 strings, and call <code>.charAt(0)</code> on each:</p>

<pre><code>static String[] alpha = {"a","b","c","d","e","f","g","h","i","j","k",
    "l","m","n","o","p","q","r","s","t","u","v",
    "w","x","y","z"};
static String[] morse = {".-","-...","-.-.","-..",".","..-.","--.","....","..",".---","-.-",".-..","--","-.","---",".--.","--.-",".-.","...","-","..-","...-",
    ".--","-..-","-.--","--.."};

private static HashMap&lt;Character, String&gt; letters = new HashMap&lt;&gt;();

public static void main(String[] args) {
    for (int i = 0; i &lt; alpha.length; i++) {
        letters.put(alpha[i].charAt(0), morse[i]);
    }
</code></pre>

<p>You could simply use one 26-character string:</p>

<pre><code>final static String alpha = "abcdefghijklmnopqrstuvwxyz";

...

for (int i = 0; i &lt; alpha.length(); i++) {
    letters.put(alpha.charAt(i), morse[i]);
}
</code></pre>

<p>Or you could statically initialize the structure directly:</p>

<pre><code>Map&lt;Character, String&gt; letters = Map.of(
    'a', ".-",    'b', "-...",  'c', "-.-.",  'd', "-..",  'e', ".",
    'f', "..-.",  'g', "--.",   'h', "....",  'i', "..",   'j', ".---",
    ... etc ...);
</code></pre>

<h2><a href="https://docs.oracle.com/javase/8/docs/api/java/util/stream/package-summary.html" rel="nofollow noreferrer">Stream API</a></h2>

<p>The following code:</p>

<pre><code>private static String encodeWord(String word){
    StringBuilder stringBuilder = new StringBuilder();
    for (int i = 0; i &lt; word.length(); i++) {
        stringBuilder.append(letters.get(word.charAt(i)));
    }
    return stringBuilder.toString();
}
</code></pre>

<p>is pretty straight forward.  It could be reduced to 1 line of code with the Stream API, if you are familiar with it:</p>

<pre><code>private static String encodeWord(String word){
    return word.chars().mapToObj(i -&gt; letters.get((char) i).collect(Collectors.joining());
}
</code></pre>

<h2>Words &amp; Encoded Words</h2>

<p>Right now, you are allocating a parallel array for <code>encodedWords</code>, and matching words and encoded words by index.  You could merge these two structures into one object, a <code>Map&lt;String, String&gt;</code> where encoded words map to their decoded values.  Passing this object to <code>decodePossibility</code> would be more cohesive than two arrays, which could be of different length.</p>

<h2>Efficiency</h2>

<p>Continuing with the <code>Map&lt;String, String&gt;</code> of decodings...</p>

<p>In <code>decodePossibility</code>, you are looping over all <code>encodedWords</code> trying each one to see if it is the next possibility in the message.  With 7 words, this isn't too inefficient, but if the list of words was larger, it could be.</p>

<p>Instead, you could find the length of the shortest encoded word, and develop a <code>Map</code> of lists of words starting with a prefixes of that length:</p>

<pre><code>Map&lt;String, Map&lt;String, String&gt;&gt; partitioned_decoding;
</code></pre>

<p>For instance, the encoding of "the" produces the shortest sequence <code>-.....</code> of 6 characters, so in <code>partition_decoding</code> each key would be the first 6 characters of <code>encodedWords</code>, and each value would contain a mapping of <code>encodedWords</code> to <code>words</code> for only the <code>encodedWords</code> starting with that key.</p>

<pre><code>"-....."  -&gt;  Map.of("-.....", "the")
".---.-"  -&gt;  Map.of(".---.--.-.-.-", "jack")
".---.."  -&gt;  Map.of(".---...-...-..", "jill")
".--.-."  -&gt;  Map.of(".--.-.-", "went", ".--.-..", "and")
"..-.--"  -&gt;  Map.of("..-.--.", "up")
"......"  -&gt;  Map.of(".......-...-..", "hill")
</code></pre>

<p>During <code>decodePossibility</code>, if <code>code</code> was at least 6 characters long, you would fetch the first 6 characters of <code>code</code>, look up that entry in <code>partitioned_decoding</code>, and if present, loop over that (ideally only 1) entry in that submap.  In the case of <code>".--.-."</code>, you'd have to try both <code>"went"</code> and <code>"and"</code>, but that is only 2 words, which is still much smaller than examining all 7.</p>

<p>Neither <code>"e"</code> or <code>"t"</code> are valid single letter words, so the worst case would be if <code>words</code> contained the word <code>"a"</code>, which would cause the key length to reduce to 2 characters, and <code>words</code> would be partitioned into 4 different bins: <code>"--"</code>, <code>".-"</code>, <code>"-."</code>, and <code>".."</code>, which should still provide a 4 times speed-up, since only one quarter of entries would be checked at each stage.</p>

<h2>Alternative to Recursion</h2>

<p>Instead of recursion, you could use a loop, and allocate your own stacks for current position and word iteration for each level.  When a solution is found, the <code>return</code> statement would directly return the solution - no need to check for a sub-step returning non-null and returning that value, eventually unwinding the call-stack to the top.  When a dead-end is found, you pop the previous state from your own stacks, and continue looping until a solution is found or no solution is possible.</p>
    </div>