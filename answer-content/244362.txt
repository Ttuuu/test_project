<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'd say, if it's the <a href="https://medium.com/@dan_abramov/smart-and-dumb-components-7ca2f9a7c7d0" rel="nofollow noreferrer">Presentation and Container Components</a> pattern as described by Dan Abramov, then yes, you've pretty effectively nailed it. (<em>Though Dan no longer advocates this pattern!!</em>)</p>
<h1>Suggestions/Review</h1>
<h2>AddForm</h2>
<p><code>items</code> prop is really the <code>text</code> state in the parent component, it doesn't need the entire state object. (If it does then name it more accurately!) What's used is <em>just</em> the input value, so <code>value</code> is a better descriptor.</p>
<pre><code>export const AddForm = ({ value, onSubmit, onChange }) =&gt; {
  console.log(value);
  return (
    &lt;div className="add-item-form"&gt;
      &lt;form onSubmit={e =&gt; onSubmit(e)}&gt;
        &lt;label htmlFor="name"&gt;Add new todo:&lt;/label&gt;
        &lt;input
          type="text"
          id="name"
          onChange={e =&gt; onChange(e)}
          value={value}
        /&gt;
        &lt;button
          className="btn waves-effect waves-light"
          type="submit"
          name="action"
        &gt;
          Add item
        &lt;/button&gt;
      &lt;/form&gt;
    &lt;/div&gt;
  );
};
</code></pre>
<p>Usage: <code>&lt;AddForm value={this.state.text}  ...  /&gt;</code></p>
<h2>TodosContainer</h2>
<p>The handlers are all arrow functions, they already have the <code>this</code> of the class bound to them, so there isn't need to bind them in a constructor. In fact, if all the constructor is doing is setting the initial state, then you don't really need the constructor either as you can simply set initial state with a state instance variable.</p>
<p>Instead of</p>
<pre><code>constructor(props) {
  super(props);
  this.state = { items: [], text: '' };
  this.handleChange = this.handleChange.bind(this);
  this.handleSubmit = this.handleSubmit.bind(this);
  this.removeItem = this.removeItem.bind(this);
}
</code></pre>
<p>Simply</p>
<pre><code>state = { items: [], text: '' };
</code></pre>
<h3>State updates</h3>
<p>When <em>any</em> next state depends upon current state, like incrementing counters, or adding values to arrays, you should get into the habit of using functional state updates, and also not referencing <code>this.state</code> within the state update.</p>
<p><a href="https://reactjs.org/docs/state-and-lifecycle.html" rel="nofollow noreferrer">State and Lifecycle</a>
<a href="https://reactjs.org/docs/react-component.html#setstate" rel="nofollow noreferrer">setState</a></p>
<p><code>handleSubmit</code> can be improved</p>
<pre><code>handleSubmit = (e) =&gt; {
  e.preventDefault();
  const newItem = {
    text: this.state.text,
    id: Date.now(),
  };
  if (this.state.text) { // &lt;-- if text is truthy, i.e. non-empty string
    this.setState(prevState =&gt; ({
      items: prevState.items.concat(newItem), 
    }));
  }
}
</code></pre>
<p>State updates are also asynchronous, so don't try to console.log it after requesting the state update. Use a component lifecycle like <code>componentDidUpdate</code> to log state after the update (or for class-based components, you <em>can</em> use the setState 2nd parameter callback function, but for simplicity sake stick to the lifecycle functions.).</p>
<p><code>removeItem</code> handler can be improved</p>
<pre><code>removeItem = (id) =&gt; {
  this.setState(prevState =&gt; ({
    items: prevState.items.filter(item =&gt; item.id !== id),
  }));
}
</code></pre>
    </div>