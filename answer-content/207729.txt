<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>A few general comments first:</p>

<ul>
<li>Python has an official style-guide, <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">PEP8</a>. It recommends using <code>lower_case</code> for both functions and variables. It also recommends no space between <code>print</code> and <code>(</code>.</li>
<li><p>Don't write obvious comments like this (unless your class requires each line to be commented, in that case realize that that is a stupid requirement and the reason it is stupid is that you end up writing comments like this):</p>

<pre><code>if enterUsername in usernames: # If the username is in usernames...
if letter == " ": # If the ltetter is a space...
else: # Otherwise...
</code></pre></li>
</ul>

<p>Now, to get to the more salient points. You are doing this pattern quite often:</p>

<ol>
<li>Find the index of an element / choose a random element from list 1</li>
<li>Find the matching element in list 2.</li>
</ol>

<p>This is both slow (<code>list.index</code> is <span class="math-container">\$\mathcal{O}(n)\$</span>) and can easily produce wrong results. Consider e.g. this example:</p>

<pre><code>song_names = ["The Man Who Sold The World", "The Man Who Sold The World"]
artist_names = ["David Bowie", "Nirvana"]
</code></pre>

<p>If you randomly choose the second song, you will still always get the first artist, since <code>list.index</code> always returns the first match.</p>

<p>Instead either make your data a list of tuples of song titles and artists:</p>

<pre><code>def random_song(song_names, artist_names)
    songs = list(zip(song_names, artist_names))
    return random.choice(songs)
</code></pre>

<p>Or choose a random index in the first place:</p>

<pre><code>def random_song(song_names, artist_names)
    i = random.randrange(len(song_names))
    return song_names[i], artist_names[i]
</code></pre>

<p>Instead of iterating over <code>word_guessed</code>, just <code>str.join</code> the list:</p>

<pre><code>def load_game(secret_song, secret_artist):
    """Starts a new game with the given secrets."""
    print ("The artist is {secret_artist} and the song is {secret_song}")
    word_guessed = [" / " if letter == " " else "-" for letter in secret_song]
    print(" ".join(word_guessed))
    return secret_song
</code></pre>

<p>Here I also used the new <a href="https://www.python.org/dev/peps/pep-0498/" rel="nofollow noreferrer"><code>f-string</code></a> (Python 3.6+) and a <a href="https://www.pythonforbeginners.com/basics/list-comprehensions-in-python" rel="nofollow noreferrer">list comprehension</a> with a <a href="https://stackoverflow.com/questions/394809/does-python-have-a-ternary-conditional-operator">ternary operator</a> used inside.</p>

<p>You should put the call to <code>main</code> under a <a href="http://stackoverflow.com/questions/419163/what-does-if-name-main-do"><code>if __name__ == "__main__":</code></a> guard to allow importing from this script from another script.</p>
    </div>