<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Your Code:</h1>

<ol>
<li><p>Don't use <code>&lt;bits/stdc++.h&gt;</code>, it's unportable and inefficient. See "<em><a href="https://stackoverflow.com/questions/31816095/why-should-i-not-include-bits-stdc-h">Why should I not #include &lt;bits/stdc++.h&gt;?</a></em>" for the details.</p></li>
<li><p>Don't use <code>using namespace std;</code>, that namespace just isn't designed for it. See "<em><a href="https://stackoverflow.com/questions/1452721/why-is-using-namespace-std-considered-bad-practice">Why is “using namespace std” considered bad practice?</a></em>" for more background.</p></li>
<li><p>Invest in some better names. Being too parsimonious there hurts, even though brevity is a virtue.</p></li>
<li><p>Format your code consistentently.</p>

<ul>
<li>Sometimes you have space around binary operators (other than comma, which only should be followed by a space), sometimes you forget.</li>
<li>Add a space after <code>;</code> when it isn't followed by the next line, meaning a loop's head.</li>
<li>Also add a space after <code>#include</code>, <code>for</code>, <code>if</code>, and <code>while</code>.</li>
<li>You don't have to use a block for single statements, but please don't put them on the same line, at the least separate them with a space.</li>
</ul></li>
<li><p><a href="https://stackoverflow.com/questions/1887097/why-arent-variable-length-arrays-part-of-the-c-standard">C++ does not have VLAs.</a> Just use a <code>std::vector</code> instead.</p></li>
<li><p>While in general, keeping the scope of a variable minimal is a good idea, there are exceptions. One of them is efficiency. Always spinning up a new <code>std::string</code> means being unable to re-use the buffer. Not that you really need the whole string at once, anyway.</p></li>
<li><p>One reason you should minimise a variables scope, is that it allows you to initialise it to the proper value, instead of leaving it uninitialised or, horrors of horrors, adding a spurious dummy-initialisation.<br>
That also allows you to avoid writing the type (<a href="https://herbsutter.com/2013/08/12/gotw-94-solution-aaa-style-almost-always-auto/" rel="noreferrer">Almost Always <code>auto</code></a>), and making it <code>const</code> or even <code>constexpr</code>.</p></li>
<li><p>There are <a href="https://en.cppreference.com/w/cpp/language/operator_assignment" rel="noreferrer">compound-assignment-operators for most binary operators</a>. Like <code>a |= b</code> for <code>a = a | b</code>. Using them leads to shorter, more readable code.</p></li>
<li><p>When you want to output a single character, why not use a character-literal? It's potentially even slightly more efficient.</p></li>
<li><p><code>return 0;</code> is implicit for <code>main()</code>. Take it or leave it, but be aware.</p></li>
</ol>

<h1>The Algorithm:</h1>

<p>Your algorithm uses <span class="math-container">\$O(\#characters+\#words^2)\$</span> time and <span class="math-container">\$O(max\_word\_length + \#words)\$</span> space.</p>

<p>An optimal algorithm only needs <span class="math-container">\$O(\#characters+2^{\#vowels})\$</span> time and <span class="math-container">\$O(2^{\#vowels})\$</span> space:</p>

<ol>
<li>For every word:

<ol>
<li>Set the bits for all the vowels contained.</li>
<li>Increment the count on the indicated bin.</li>
</ol></li>
<li>For every vowel:

<ol>
<li>Iterate the bins containing words with that vowel.</li>
<li>Add the count to the respective bin without that vowel.</li>
</ol></li>
<li>For all bins:
Multiply the count in the bin with the count in the complementary bin, and add that.</li>
<li>Subtract twice the count in the bin for words containing all vowels. Those account for all self-pairings.</li>
<li>The answer is half the calculated number, as we counted double.</li>
</ol>

<p>Exercise for the attentive reader: Save half the multiplications this algorithm uses.</p>
    </div>