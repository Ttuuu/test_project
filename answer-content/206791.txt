<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>TASK 1</h1>

<blockquote>
<pre><code>if distance &gt; 0 and distance &lt; 51 and sln_distance &lt; 351:
    count += 1
    len_sum = float(2.50) + distance
    total_sum = len_sum * 1.06
</code></pre>
</blockquote>

<ol>
<li>Move magic values out of the code, this means <code>2.50</code> and <code>1.06</code> should be stored somewhere other than where the calulation is.</li>
<li>You duplicate this code, with a minor change when you check the people carrirer and minivan, and so it'd be better to make it a function.</li>
<li>The distance has to be a minimum of 3.</li>
<li>It'd be easier if you stored this function on a class.</li>
</ol>



<pre><code>class Vehicle:
    def __init__(self, base, travel):
        self.base = base
        self.travel = travel

    def cost(self, length):
        if not (3 &lt;= length &lt;= 50):
            raise ValueError('Invalid trip length')
        return (self.base + self.travel * length) * 1.06
</code></pre>

<h1>TASK 2</h1>

<blockquote>
<pre><code>count += 1
len_sum = float(2.50) + distance
total_sum = len_sum * 1.06
print("Price is: RM" + repr(round(total_sum, 2)) + "\n=======================================")
saloon.append("Riders: " + repr(seats) + "Revenue: RM" + repr(round(total_sum, 2)) + " | ")
total_seats += seats
total_cost += round(total_sum, 2)
sln_distance += distance
</code></pre>
</blockquote>

<ol>
<li>You can perform all the calulations at the end. Just store the distance and amount of people carried in a list.</li>
<li>Add this to your <code>Vehicle</code> class as a function.</li>
<li>You have a maximum that you can record, but you don't take that into account when you're appending to your list.</li>
</ol>



<pre><code>class Vehicle:
    def __init__(self, ...):
        ...
        self.trips = []

    def record_trip(self, distance, people):
        if len(self.trips) + 1 &gt; 24:
            raise ValueError("Can't store more than 24 trips")
        if sum(trip[0] for trip in self.trips) + distance &gt; 350:
            raise ValueError("Can't store more than 350KM")
        self.trips.append((distance, people))
</code></pre>

<h1>TASK 3</h1>

<blockquote>
<pre><code>elif menu == "2":
    print("Saloon: " + ' '.join(saloon) + "\nPeople carrier: " + ' '.join(people_car) + "\nMini van: " + ' '.join(mini))
    print("========================================")

elif menu == "3":

    print("Riders: " + repr(total_seats) + "\nCost: RM" + repr(total_cost))

    def calc(a):
        avg_cost = float(a) / 100
        return avg_cost * 7.4

    final_sln = float(calc(sln_distance))
    final_ppl = float(calc(ppl_distance))
    final_mini = float(calc(mini_distance))

    print("Saloon fuel cost: RM" + repr(round(final_sln, 2)))
    print("People carrier fuel cost: RM" + repr(round(final_ppl, 2)))
    print("Mini van fuel cost: RM" + repr(round(final_mini, 2)))
    print("========================================")
</code></pre>
</blockquote>

<ol>
<li>Only the 'sln' has a fuel efficency of 7.4L/100km, but you calculate them all against that value.</li>
<li>You can add all this code into the <code>Vehicle</code> class.</li>
</ol>



<pre><code>class Vehicle:
    def __init__(self, ..., efficency):
        ...
        self.efficency = efficency

    def average_cost(self):
        return sum(trip[0] for trip in self.trips) * self.efficency

    def total_people(self):
        return sum(trip[1] for trip in self.trips)
</code></pre>

<hr>

<ol>
<li>I'd change your questions so that they use the vechicle class.</li>
<li>To simplify your code you could use <code>cmd</code> to perform all the actions you want.</li>
</ol>



<pre><code>import cmd

class Vehicle:
    def __init__(self, base, travel, efficency):
        self.base = base
        self.travel = travel
        self.trips = []
        self.efficency = efficency

    def cost(self, length):
        if not (3 &lt;= length &lt;= 50):
            raise ValueError('Invalid trip length')
        return (self.base + self.travel * length) * 1.06

    def distance(self):
        return sum(trip[0] for trip in self.trips)

    def record_trip(self, distance, people):
        if len(self.trips) + 1 &gt; 24:
            raise ValueError("Can't store more than 24 trips")
        if self.distance() + distance &gt; 350:
            raise ValueError("Can't store more than 350KM")
        self.trips.append((distance, people))

    def average_cost(self):
        return self.distance() * self.efficency

    def total_people(self):
        return sum(trip[1] for trip in self.trips)

    def gross_income(self):
        return sum(self.cost(distance) for distance, _ in self.trips)


def args(values, metas):
    values = values.split()
    if len(values) &gt; len(metas):
        keys = ', '.join(m[0] for m in metas)
        raise ValueError(f'Too many keys should have {keys}')

    if len(values) &lt; len(metas):
        keys = ', '.join(m[0] for m in metas[len(values):])
        raise ValueError(f'Missing {keys}')

    output = []
    for value, meta in zip(values, metas):
        try:
            value = meta[1](value)
        except ValueError as e:
            raise ValueError(f'Invalid value for {meta[0]}')
        output.append(value)
    return output


class VehicleRenter(cmd.Cmd):
    intro = 'Welcome to the taxi recorder.   Type help or ? to list commands.\n'
    prompt = '&gt; '
    vehicles = {
        'saloon':         Vehicle(2.50, 1.00, 7.4/100),
        'people-carrier': Vehicle(4.00, 1.25, 8.6/100),
        'mini-van':       Vehicle(5.00, 1.50, 9.2/100),
    }

    def get_vehicle(self, vehicle):
        v = self.vehicles.get(vehicle, None)
        if v is None:
            keys = ', '.join(self.vehicles.keys())
            raise ValueError(f'Invalid vehicle {vehicle!r}, options are {keys}')
        return v

    def do_vehicles(self, _):
        """List all the vechicles available."""
        print(', '.join(self.vehicles.keys()))

    def do_cost(self, arg):
        """
        Calulate the cost of a trip.

        cost {vechicle name} {distance}
        cost saloon 3
        """
        try:
            vehicle, distance = args(arg, (('vehicle', str), ('distance', float)))
            print(self.get_vehicle(vehicle).cost(distance))
        except ValueError as e:
            print(e)

    def do_trip(self, arg):
        """
        Record a trip.

        trip {vechicle name} {distance} {people}
        trip saloon 3 1
        """
        try:
            vehicle, distance, people = args(arg, (('vehicle', str), ('distance', float), ('people', int)))
            self.get_vehicle(vehicle).record_trip(distance, people)
        except ValueError as e:
            print(e)


    def do_stats(self, _):
        """See the stats of the vehicles"""
        for name, v in self.vehicles.items():
            print(
                f'{name}:\n'
                f'  trips: {len(v.trips)}\n'
                f'  distance: {v.distance()}\n'
                f'  people: {v.total_people()}\n'
                f'  gross income: {v.gross_income():.2f}\n'
                f'  fuel: {v.average_cost():.2f}\n'
                f'  net profit: {v.gross_income() - v.average_cost():.2f}\n'
            )

if __name__ == '__main__':
    VehicleRenter().cmdloop()
</code></pre>



<pre><code>Welcome to the taxi recorder.   Type help or ? to list commands.

&gt; help

Documented commands (type help &lt;topic&gt;):
========================================
cost  help  stats  trip  vehicles

&gt; help vehicles
List all the vechicles available.
&gt; vehicles
saloon, people-carrier, mini-van
&gt; cost saloon 3.1
5.936
&gt; cost saloon 1
Invalid trip length
&gt; trip saloon 3
Missing people
&gt; trip saloon 3 1
&gt; stats
saloon:
  trips: 1
  distance: 3
  people: 1
  gross income: 5.83
  fuel: 0.22
  net profit: 5.61

people-carrier:
  trips: 0
  distance: 0
  people: 0
  gross income: 0.00
  fuel: 0.00
  net profit: 0.00

mini-van:
  trips: 0
  distance: 0
  people: 0
  gross income: 0.00
  fuel: 0.00
  net profit: 0.00
</code></pre>
    </div>