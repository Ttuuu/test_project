<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First I'd like to say that this is impressive work, overall pretty squeaky clean... despite the adjustments needed to make it build on x64 :)</p>

<p>One enhancement I can see in terms of readability, would be to use <code>PascalCase</code> rather than <code>camelCase</code> for member names: inconsistent casing is distracting, because parameters and locals are usually <code>camelCase</code>, so a camel-cased procedure name tends to register as such on first read.</p>

<p><code>Start[Unm|M]anagedTimer</code> is doing too many things, as hinted by the 3 error-handling subroutines:</p>

<pre><code>On Error GoTo generateTimerDataFail
' do stuff...

On Error GoTo createTimerFail
' do stuff...

On Error GoTo scheduleProcFail
' do more stuff...
</code></pre>

<p>The first two really feel like they belong in their own private scope/function; this would help remove some of the duplication between the two functions.</p>

<p>This is a bit dangerous:</p>

<pre><code>    Exit Function

generateTimerDataFail:
    logError "timerSet.Add", Err.Number, Err.Description
    raisePublicError GenerateTimerDataError, loggerSourceName
    Resume                                       'for debugging - break above and jump to the error-raising statement
</code></pre>

<p>A <code>Resume</code> statement jumps right back to the statement that caused the problem in the first place: if that statement throws the same error again, we're very likely stuck in an infinite loop. Breakpoints aren't necessarily going to be there next time. An unreachable <code>Stop</code> statement that can only run if the "prod path" <code>Resume</code> statement is commented-out to make the debugger hit a programmatic breakpoint that effectively halts the "debug path" infinite loop:</p>

<pre><code>    log InfoLevel, loggerSourceName, printf("ManagedTimer with id {0} created", timerInfo.ID)
CleanExit:
    Exit Function

generateTimerDataFail:
    logError "timerSet.Add", Err.Number, Err.Description
    raisePublicError GenerateTimerDataError, loggerSourceName
    Resume CleanExit ' DEBUG: comment-out this statement
    Stop
    Resume
</code></pre>

<p>Rubberduck will warn about the <code>Stop</code> statement, but only until (soon) it's able to determine that the execution path jumps out at <code>Resume</code> and the <code>Stop</code> statement is actually unreachable.</p>

<hr>

<p><code>TimerData.ID</code> aliasing <code>TimerData.CallbackWrapperPointer</code> makes the API needlessly confusing: in general the fewer different ways there are to do something or get a value, the better. The two members being on the same default interface (<code>TimerData</code>) feels like one of the two is redundant.</p>

<hr>

<p>Watch out for <code>As New</code> declarations; often, they aren't necessary and would be better off initialized in the <code>Class_Initialize</code> handler.</p>

<p>Some enum members are hard to explain, too:</p>

<blockquote>
<pre><code>Public Enum TimerError
    [_Start]
    CreateTimerError = vbObjectError + 1
    '...
    [_End]
End Enum
</code></pre>
</blockquote>

<p><code>[_Start]</code> should really be <code>[_Undefined]</code> or <code>[_NoError]</code> with an explicit value of <code>0</code>, and then a hidden <code>[_BaseError]</code> set to <code>vbObjectError</code>, and then let the VBA compiler deal with the <code>+1</code> offsets for the visible members: that way none of the visible members have an explicit value, and you can freely reorder them on a whim.</p>

<hr>

<p>I'm not sure I like the coupling between the lower-level API classes - for example why does <code>TimerRepository.Add</code> take an <code>Object</code>, when it could take a <code>TimerData</code> reference and not need to <code>Set newData = TimerData.Create(callbackWrapper)</code>.</p>

<p>That said, the <code>TickerAPI</code> default instance is stateful - while that makes a friendly-looking client code that doesn't need to worry about holding on to an instance of the class, it breaks the object-orientedness of the API... much like <code>UserForm1.Show</code>, you get client code working with objects without realizing - and global state resetting behind your back. I think the public API should just be a standard module, that way there's no implicit global <code>TickerAPI</code> object instance, and the calling code can remain identical:</p>

<pre><code>TickerAPI.StartManagedTimer New SafeTerminatingTimerProc, True, data:="User data!!"
</code></pre>

<hr>

<p>So far so good, I've peeked at the <code>Metronome</code> API and can't wait to review it!</p>
    </div>