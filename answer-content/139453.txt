<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I don't like any of these answers.  In particular, the accepted answer is simply wrong.</p>

<p>Let's start by critiquing the interface:</p>

<pre><code>List&lt;Point&gt; OrderByDistance(List&lt;Point&gt; pointList)
</code></pre>

<p>The contract is: the list must contain at least one element, the list is destroyed (!!!) by the method, the first element is special, and the result is a mutable list.  I like nothing about any of this; this sounds like a ball of potential bugs.  The right contract is:</p>

<pre><code>ImmutableList&lt;Point&gt; OrderByDistance(Point start, ImmutableSet&lt;Point&gt; points)
</code></pre>

<p>Look at how many problems this solves. Do we need the set to contain at least one point?  No. We already have the start point. Do we destroy the set of points?  No. It's immutable.  And so on.</p>

<p>Now that we have the signature correct, the algorithm is simple:</p>

<pre><code>ImmutableList&lt;Point&gt; OrderByDistance(Point start, ImmutableSet&lt;Point&gt; points)
{
  var current = start;
  var remaining = points;
  var path = ImmutableList&lt;Point&gt;.Empty.Add(start);
  while(!remaining.IsEmpty)
  {
    var next = Closest(current, remaining);
    path = path.Add(next);
    remaining = remaining.Remove(next);
    current = next;
  }
  return path;
}
</code></pre>

<p>Now all you have to do is efficiently implement Closest, which you should be able to do given the previous hints about computing distances cheaply and so on.</p>

<p>If you want a more sophisticated algorithm for <code>Closest</code>, then you need to do some research on this well-studied problem:</p>

<p><a href="https://en.wikipedia.org/wiki/Nearest_neighbor_search">https://en.wikipedia.org/wiki/Nearest_neighbor_search</a></p>
    </div>