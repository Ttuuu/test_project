<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You started correct, however perhaps you are over complicating things.
All you need to do is create an entry where you can log your structures and a method that fills a ConcurrentQueue with the items you'd like to log, this will do just fine.</p>

<p>Then in your class you add a timer that dequeues items from the buffer and store them as and how you like. that's all you need to do. let me show you a simple example:</p>

<pre><code>namespace MyApplication.Logging
{
    using System;
    using System.IO;
    using System.Text;

    class Logger&lt;T&gt;:IDisposable
    {
        private readonly System.Collections.Concurrent.ConcurrentQueue&lt;T&gt; queue;
        private readonly System.Threading.Timer timer;
        private bool isLogging = false;//default is false so you can remove assigning it if you like
        private readonly FileInfo file;

        /// &lt;summary&gt;
        /// Initializes a new instance of the &lt;see cref="Logger{T}"/&gt; class.
        /// &lt;/summary&gt;
        /// &lt;param name="logFile"&gt;The log file.&lt;/param&gt;
        /// &lt;exception cref="System.ArgumentNullException"&gt;logFile must be provided&lt;/exception&gt;
        /// &lt;exception cref="System.ApplicationException"&gt;Will throw error if logging directory could not be created&lt;/exception&gt;
        public Logger(FileInfo logFile)
        {
            if (logFile is null)
                throw new ArgumentNullException(nameof(logFile));

            this.file = logFile;

            if (!file.Directory.Exists)
            {
                try
                {
                    file.Directory.Create();
                }
                catch (Exception e)
                {
                    throw new ApplicationException("Could not create log directory, look at inner exception for details", e);
                }
            }

            //create buffer
            queue = new System.Collections.Concurrent.ConcurrentQueue&lt;T&gt;();
            //create timer to save items in buffer, start in 60 seconds, then process every 10 seconds
            timer = new System.Threading.Timer(DequeueLog, null, TimeSpan.FromSeconds(60), TimeSpan.FromSeconds(10));

        }

        /// &lt;summary&gt;
        /// Dequeues the log and saves it to disk.
        /// &lt;/summary&gt;
        /// &lt;param name="_"&gt;The state object is ignored.&lt;/param&gt;
        private void DequeueLog(object _)
        {
            //avoid duplicate processing
            if (isLogging || queue.Count == 0)
                return;

            isLogging = true;
            try
            {
                var sb = new StringBuilder();
                while (queue.TryDequeue(out T item))
                {
                    sb.AppendLine(System.Text.Json.JsonSerializer.Serialize(item));
                }
                File.WriteAllText(file.FullName, sb.ToString());
                file.Refresh();
            }
            finally {
                isLogging = false;
            }
        }

        /// &lt;summary&gt;
        /// Logs the specified item.
        /// &lt;/summary&gt;
        /// &lt;param name="item"&gt;The item.&lt;/param&gt;
        public void Log(T item)=&gt; queue.Enqueue(item);

        /// &lt;summary&gt;
        /// Gets the log size in MB.
        /// &lt;/summary&gt;
        public double LogSizeInMB =&gt; file.Exists ? file.Length / 1_048_576:0;

        #region IDisposable Support
        private bool disposedValue = false; // To detect redundant calls

        protected virtual void Dispose(bool disposing)
        {
            if (!disposedValue)
            {
                if (disposing)
                {
                    timer.Dispose();
                    if (queue.Count &gt; 0)
                        DequeueLog(null);
                }


                disposedValue = true;
            }
        }

        // TODO: override a finalizer only if Dispose(bool disposing) above has code to free unmanaged resources.
        // ~Logger()
        // {
        //   // Do not change this code. Put cleanup code in Dispose(bool disposing) above.
        //   Dispose(false);
        // }

        // This code added to correctly implement the disposable pattern.
        public void Dispose()
        {
            // Do not change this code. Put cleanup code in Dispose(bool disposing) above.
            Dispose(true);
            // TODO: uncomment the following line if the finalizer is overridden above.
            // GC.SuppressFinalize(this);
        }
        #endregion


    }
}
</code></pre>

<p>I have used no 3rd party lib's only the latest .net as of this writing.</p>

<p>Important is to not have double processing of the queue if you are writing to disk as a disk file will not like this, in a database this would work but having a single "pump" usually is best to avoid locking &amp; blocking. The variable isLogging takes care of that.</p>
    </div>