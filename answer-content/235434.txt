<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong><code>pandas</code></strong> library has rich functionality and allows to build a complex pipelines as a chain of routine calls.
<br>In your case the whole idea is achievable with the following single pipeline:</p>

<pre><code>import pandas as pd
import numpy as np

np.random.seed(seed=1234)
df = pd.DataFrame(np.random.randint(0, 100, size=(100, 6)), 
                  columns=['constant 1', 'constant 2', 1, 2, 3, 4])


def transform_columns(df):
    return df.set_index(df.filter(regex=r'\D').columns.tolist()) \
        .stack().reset_index(name='value') \
        .drop(columns='level_2', axis=1)


print(transform_columns(df))
</code></pre>

<hr>

<p><em>Details:</em></p>

<ul>
<li><p><code>df.filter(regex=r'\D').columns.tolist()</code> <br><a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.filter.html?highlight=filter#pandas.DataFrame.filter" rel="nofollow noreferrer"><code>df.filter</code></a> returns a subset of columns enforced by specified regex pattern <code>regex=r'\D'</code> (ensure the column name contains non-digit chars)</p></li>
<li><p><a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.set_index.html?highlight=set_index" rel="nofollow noreferrer"><code>df.set_index(...)</code></a> - set the input dataframe index (row labels) using column names from previous step</p></li>
<li><p><code>.stack()</code> - reshape the dataframe from columns to index, having a multi-level index</p></li>
<li><p><code>.reset_index(name='value')</code><br>
<a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.reset_index.html?highlight=reset_index#pandas.Series.reset_index" rel="nofollow noreferrer"><code>pandas.Series.reset_index</code></a> resets/treats index as a column; <code>name='value'</code> points to a desired column name containing the crucial values</p></li>
<li><p><code>.drop(columns='level_2', axis=1)</code> - drops supplementary label <code>level_2</code> from columns (<code>axis=1</code>)  </p></li>
</ul>

<p>You may check/debug each step separately to watch how the intermediate series/dataframe looks like and how it's transformed.</p>

<hr>

<p>Sample output:</p>

<pre><code>     constant 1  constant 2  value
0            47          83     38
1            47          83     53
2            47          83     76
3            47          83     24
4            15          49     23
..          ...         ...    ...
395          16          16     80
396          16          92     46
397          16          92     77
398          16          92     68
399          16          92     83

[400 rows x 3 columns]
</code></pre>
    </div>