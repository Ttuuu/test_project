<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'd separate the concerns of storage (<code>Grid</code>) and the search (<code>longestProduct</code>), like this:</p>
<pre><code>class Grid
{
    std::vector&lt;int&gt; grid;
    int rows;
    int columns;

public:
    Grid(int rows, int columns)
        : grid(rows * columns),
          rows(rows), columns(columns)
    {
    }

    void read(std::istream&amp; in);
    long largestProduct(unsigned nAdjacents) const;
}
</code></pre>
<p>See how we can now re-use one grid and find its largest 3-product, 4-product, etc. without needed to re-instantiate.</p>
<p>To calculate a <em>n</em>-product, we just need to know the starting point, stride, and length:</p>
<pre><code>private:
    long product(int x, int y, int step, unsigned n) const
    {
        long product = 1;
        for (auto *p = grid.data() + columns * x + y;  n-- &gt; 0;  p += step) {
            product *= *p;
        }
        return product;
    }
</code></pre>
<p>We can create a "high water mark" type to save typing all those <code>std::max()</code> invocations:</p>
<pre><code>// a simple value that can only be ovewritten by greater values
template&lt;typename T&gt;
struct MaxValue
{
    T value;

    MaxValue(T value = T{})
        : value(value)
    {}

    operator T() const
    {
        return value;
    }

    MaxValue&amp; operator=(T other)
    {
        if (value &lt; other)
            value = other;
        return *this;
    }
};
</code></pre>
<p>Then our <code>largestProduct</code> search becomes much simpler (C++17, for my convenience):</p>
<pre><code>long largestProduct(unsigned nAdjacents) const
{
    static const std::initializer_list&lt;std::pair&lt;int,int&gt;&gt; directions
        = {{0,1}, {1,1}, {1,0}, {1,-1}};

    MaxValue&lt;long&gt; largestProduct = 0;
    for (auto const [dy, dx]: directions) {
        // determine range to search
        auto const row_0 = 0u;
        auto const row_n = dy &gt; 0 ? rows - nAdjacents : rows;
        auto const col_0 = dx &lt; 0 ? nAdjacents : 0;
        auto const col_n = dx &gt; 0 ? columns - nAdjacents : columns;
        auto const step = dy * columns + dx;
        // do the search
        for (auto r = row_0;  r &lt; row_n;  ++r) {
            for (auto c = col_0;  c &lt; col_n;  ++c) {
                largestProduct = product(r, c, step, nAdjacents);
            }
        }
    }
    return largestProduct;
}
</code></pre>
<hr>
<h1>Full code</h1>
<pre><code>#include &lt;algorithm&gt;
#include &lt;initializer_list&gt;
#include &lt;iterator&gt;
#include &lt;istream&gt;
#include &lt;vector&gt;

// a simple value that can only be ovewritten by greater values
template&lt;typename T&gt;
struct MaxValue
{
    T value;

    MaxValue(T value = T{})
        : value(value)
    {}

    operator T() const
    {
        return value;
    }

    MaxValue&amp; operator=(T other)
    {
        if (value &lt; other)
            value = other;
        return *this;
    }
};


class Grid
{
    std::vector&lt;int&gt; grid;
    int rows;
    int columns;

public:
    Grid(int rows, int columns)
        : grid(rows * columns),
          rows(rows), columns(columns)
    {
    }

    void read(std::istream&amp; in)
    {
        // temporarily set in to throw on error
        auto saved_exceptions = in.exceptions();
        in.exceptions(std::ios_base::failbit | std::ios_base::badbit);

        auto values = rows * columns;
        std::copy_n(std::istream_iterator&lt;int&gt;(in), values, grid.begin());

        // restore exception state
        in.exceptions(saved_exceptions);
    }

    long largestProduct(unsigned nAdjacents) const
    {
        static const std::initializer_list&lt;std::pair&lt;int,int&gt;&gt; directions
            = {{0,1}, {1,1}, {1,0}, {1,-1}};

        MaxValue&lt;long&gt; largestProduct = 0;
        for (auto const [dy, dx]: directions) {
            // determine range to search
            auto const row_0 = 0u;
            auto const row_n = dy &gt; 0 ? rows - nAdjacents : rows;
            auto const col_0 = dx &lt; 0 ? nAdjacents : 0;
            auto const col_n = dx &gt; 0 ? columns - nAdjacents : columns;
            auto const step = dy * columns + dx;
            // do the search
            for (auto r = row_0;  r &lt; row_n;  ++r) {
                for (auto c = col_0;  c &lt; col_n;  ++c) {
                    largestProduct = product(r, c, step, nAdjacents);
                }
            }
        }
        return largestProduct;
    }

private:
    long product(int x, int y, int step, unsigned n) const
    {
        long product = 1;
        for (auto *p = grid.data() + columns * x + y;  n-- &gt; 0;  p += step) {
            product *= *p;
        }
        return product;
    }
};



#include &lt;iostream&gt;
#include &lt;sstream&gt;

int main()
{
    std::istringstream in(R"(
89 90 95 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08
49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00
81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65
52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91
22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80
24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50
32 98 81 28 64 23 67 10 26 38 40 67 59 54 70 66 18 38 64 70
67 26 20 68 02 62 12 20 95 63 94 39 63 08 40 91 66 49 94 21
24 55 58 05 66 73 99 26 97 17 78 78 96 83 14 88 34 89 63 72
21 36 23 09 75 00 76 44 20 45 35 14 00 61 33 97 34 31 33 95
78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92
16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57
86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58
19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40
04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66
88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69
04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36
20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16
20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54
01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48
)");
    Grid grid{20, 20};
    grid.read(in);

    std::cout &lt;&lt; grid.largestProduct(4) &lt;&lt; std::endl;
}
</code></pre>
<hr>
<p>From here, we might investigate ideas like the rolling product; that might provide less benefit than you expect, given how much more expensive division is compared to multiplication.</p>
    </div>