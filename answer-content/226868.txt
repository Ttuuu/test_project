<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Comments</h3>

<p>Please be sure your comments add something meaningful. For example:</p>

<pre><code>private:
    // ~~~~~~~~~~~~~ PRIVATE VARIABLES ~~~~~~~~~~~~
    unsigned int N=0.0;
</code></pre>

<p>In this case, the <code>private:</code> already makes it pretty clear that what follows is private. The comment isn't adding anything that wasn't already pretty obvious.</p>

<p>At least in the typical case, the code already answers "what" kinds of questions (e.g., <code>public: int n = 0;</code> tells us that <code>N</code> is an int that's publicly accessible.</p>

<p>A comment should usually answer questions about "why?" Why does the code do one thing, when another might seem more obvious. Why did you make <code>N</code> public, even though public variables are often rather frowned upon? (and so on).</p>

<h3>Type matching</h3>

<p>Looking at the previous code snippet, we also note that we have <code>N</code> defined as an <code>int</code>, but being initialized with the value <code>0.0</code>, which is a <code>double</code>. Unless you have a reason to do otherwise, it's generally preferable to have the types match, so you'd use just <code>int N = 0;</code>.</p>

<p>As an aside, I'd be less concerned with mismatches that are really just different sizes of what are otherwise similar types. For example, something like <code>unsigned long long foo = 0;</code> is reasonable event though <code>0</code> if of type <code>int</code> rather than <code>unsigned long long</code>. But initializing an integer type with a floating point value tends to suggest some confusion about whether that variable should really be able to hold a fractional value or not.</p>

<h3>Interface Design</h3>

<p>One general piece of guidance about interface design is that you should strive for an interface that's easy to use, and hard to misuse.</p>

<p>So, at least as I see things, the public interface of a linear regression model consists primarily of only two functions: construct the model from some input, and get a prediction from a constructed model. As it stands right now, your class requires that the user explicitly call <code>train</code> before they can use a model. And unfortunately, it looks like they can try to make a prediction without having called <code>train</code>, which (of course) won't work.</p>

<p>At a more detailed level, rather than starting with:</p>

<pre><code>std::vector&lt;double&gt; X;
std::vector&lt;double&gt; y;
</code></pre>

<p>...and then assuring those are the same size in <code>simple_linear_regression::calculate_N()</code>, I'd prefer to start with a simple struct:</p>

<pre><code>struct variable { 
    double x;   // independent
    double y;   // dependent
};
</code></pre>

<p>Then have a single <code>std::vector&lt;variable&gt;</code> for the rest of the code to work with. This way, it's simply impossible to create mis-matched number of independent/dependent variables, so there's no need for the rest of the code to check that the counts are equal.</p>

<h3>Avoid Boolean parameters</h3>

<p>With code like:</p>

<pre><code>simple_linear_regression slr({2, 3, 5, 7, 9}, {4, 5, 7, 10, 15}, true);
</code></pre>

<p>It's not immediately obvious what <code>true</code> vs. <code>false</code> as the last parameter means. I'd prefer something like:</p>

<pre><code>simple_linear_regression slr({2, 3, 5, 7, 9}, {4, 5, 7, 10, 15}, DEBUG);
</code></pre>

<p>or:</p>

<pre><code>simple_linear_regression slr({2, 3, 5, 7, 9}, {4, 5, 7, 10, 15}, NODEBUG);
</code></pre>

<p>Of course, taking the previous point into account, this would be more like:</p>

<pre><code>simple_linear_regression slr({{2,4},{3,5}, {5, 7}, {7, 10}, {9, 15}}, NODEBUG};
</code></pre>

<h3>Naming</h3>

<p>I'm not really excited about using the name <code>train</code> for computing a linear regression. <code>train</code> is typically used with things like neural networks to mean something that's just similar enough that the name could easily mislead somebody into believing your code is something rather different than it really is (e.g., something that trains a neural network to simulate linear regression).</p>

<p>As previously noted, however, I'd <em>prefer</em> to eliminate training as a separate step in any case.</p>

<h3>Prefer initialization over assignment</h3>

<p>Consider your constructor:</p>

<pre><code>simple_linear_regression::simple_linear_regression(std::vector&lt;double&gt; X, std::vector&lt;double&gt; y, bool verbose)
{
    this-&gt;X = X;
    this-&gt;y = y;
    this-&gt;verbose = verbose;
}
</code></pre>

<p>Rather than assigning values inside the body of the ctor, I'd prefer to use a member initializer list:</p>

<pre><code>simple_linear_regression::simple_linear_regression(std::vector&lt;double&gt; X,
                                                   std::vector&lt;double&gt; y, 
                                                   bool verbose)
    : X(X)
    , Y(Y)
    , verbose(verbose)
{}
</code></pre>
    </div>