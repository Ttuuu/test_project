<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Many of the member functions of <code>Room</code> can be <code>const</code> since they don't modify the object data (e.g., <code>bool needs_connections() const</code>).</p>

<p><code>all_rooms_conneted</code> (which has a typo in the name) should take its parameter by <code>const std::vector&lt;Room&gt; &amp;rooms</code> to avoid making a copy of the vector.  Likewise for <code>compare</code> with its <code>list</code> parameter.  <code>compare</code> can simply short circuit with <code>return true</code> rather than using <code>result</code>.</p>

<p>In <code>Room::display</code>, you have a series of <code>if () { return; } else if () { return; } else</code> statements that could do without the <code>else</code>.  And since the conditions are checking one variable for certain values, you could use a <code>switch</code>.  In addition, if <code>occ</code> is not one of the four values you check for, you don't return a value from this function resulting in Undefined Behavior.  If you compile with the warning level cranked up you should get a warning from the compiler for this.</p>

<p><code>Cave::population</code> can potentially end up in an infinite loop if the initial value for <code>population</code> is too large and all rooms get populated while still needing to add more.</p>

<p>When initializing <code>rooms</code> in the <code>Cave</code> constructor, you can use <code>rooms.emplace_back(i);</code> instead of creating a temporary room and copying it in.</p>

<p>The loop in <code>Cave::move_the_wumpus</code> can be rewritten using a <code>do</code>/<code>while</code> loop:</p>

<pre><code>do {
    new_room = find_empty_room();
} while (new_room != wumpus_location);
</code></pre>

<p><code>putback_string</code> is flawed.  You can only put back one character, and the putback will fail on an input-only stream.</p>

<p>In the <code>Turn</code> constructor, you can avoid using <code>is.putback</code> of a single character (known to be a digit) by replacing those four lines with <code>targets.push_back(c - '0');</code>.</p>

<p>There are better random number sources in the <code>&lt;random&gt;</code> header that you should look in to.</p>

<p>In <code>main</code>, you can again replace a series of <code>if</code>/<code>else</code> with a switch on <code>current_occupant</code>.</p>

<p>You use <code>gameon</code> in some instances to end the game, but in another use a <code>break</code>.  You should stick one for consistency.  Also, rather than <code>bool gameon = true; while (gameon)</code>, you can use a <code>bool gameon = true; do { ... } while (gameon);</code> loop.</p>

<p>Calling <code>system("PAUSE");</code> is a bit nonportable.  You can print a message and get a character, or just ask the player for their next move.  The clear screen (again, using a system call) is unnecessary.  Text games have a long history of being scrolling windows.</p>
    </div>