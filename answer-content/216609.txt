<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First, I'll note that your class is <em>not</em> immutable currently. You allow the user to pass in a <code>List</code> of companies, but don't make a copy of them. If the user modifies the list after passing it in, it will be modified inside the <code>Employee</code> as well. Just make a copy of it to remedy this:</p>

<pre><code>public Employee(Integer age, String name, List&lt;String&gt; companies, Date dob) {
    this.age = age;
    this.name = name;
    this.companies = new ArrayList&lt;&gt;(companies);
    this.dob = dob;
}
</code></pre>

<p>And you can do the same in <code>getCompanies</code> as @AJ noted.</p>

<hr>

<hr>

<p>And I'll mention some warnings that pop up as soon as I pasted this into IntelliJ:</p>

<blockquote>
  <p>Externalizable class 'Employee' has no 'public' no-arg constructor</p>
</blockquote>

<p>At <code>class Employee...</code>.</p>

<hr>

<blockquote>
  <p>Iteration can be replaced with bulk 'Collection.addAll' call</p>
</blockquote>

<p>In <code>getCompanies</code> in the <code>add</code> loop. You can just pass a collection to <code>addAll</code> and have it do the looping.</p>

<hr>

<blockquote>
  <p>'StringBuffer strb' may be declared as 'StringBuilder'</p>
</blockquote>

<p>In <code>toString</code>. <code>StringBuffer</code> is a synchronized version of <code>StringBuilder</code>. You don't need synchronization here though.</p>

<hr>

<blockquote>
  <p>@Override is not allowed when implementing interface method</p>
</blockquote>

<p>At the <code>@Override</code> annotations for the <code>Externalizable</code> methods.</p>

<hr>

<hr>

<p>You can also simplify the stringification of <code>companies</code> in <code>toString</code> using <a href="https://docs.oracle.com/javase/8/docs/api/java/util/StringJoiner.html" rel="nofollow noreferrer"><code>StringJoiner</code></a> and <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/String.html#join-java.lang.CharSequence-java.lang.Iterable-" rel="nofollow noreferrer"><code>String.join</code></a>:</p>

<pre><code>public String toString() {
    StringJoiner joiner = new StringJoiner(", ");
    joiner.add("AGE " + this.age)
          .add("NAME " + this.name)
          .add("DOB " + this.getDateString())
          .add("COMPANIES WORKED IN: "
                   + String.join(", ", this.companies));

    return joiner.toString();
}
</code></pre>

<blockquote>
  <p>AGE 23, NAME John Molkovich, DOB 28 Oct 1981, COMPANIES WORKED IN: IBM, Google, Norton, Seable, Nekki</p>
</blockquote>

<p><code>StringJoiner</code> is like <code>StringBuffer</code>/<code>StringBuilder</code>, but it automatically adds a <code>", "</code> between each addition, and <code>String.join</code> adds a <code>", "</code> between each company. No more needing to manually add commas for each field, and needing to delete the trailing company comma.</p>

<p>And don't worry about using <code>append</code> methods instead of <code>+</code> at every opportunity like you were doing. Iirc, <code>+</code> is automatically optimized to a <code>StringBuilder</code> with <code>append</code> calls when possible, and even when it's not, the overhead you'll suffer from using <code>+</code> likely won't be a problem. Go for the readable code here instead of the over-optimized code.</p>

<hr>

<hr>

<p>And what exception are you anticipating being thrown in <code>main</code>? You should get rid of the whole <code>try</code>. Let the sucker crash if it's going to crash. It's usually easier to get information about an exception when the IDE is allowed to process the actual crash instead of just a printout.</p>

<hr>

<hr>

<p>And a small note, I don't see any reason to have <code>this.age</code> be a wrapped <code>Integer</code>. It would be better for it to be a primitive <code>int</code> (or even a <code>short</code>). I'd change the field type to <code>int</code>, along with the <code>Employee</code> constructor parameter and the return type of <code>getAge</code>.</p>

<hr>

<hr>

<p>You could even get rid of the getters for your immutable fields like <code>age</code>. They can't be overwritten anyways since they're final:</p>

<pre><code>class Immutable {
    public final int age;

    public Immutable(int age) {
        this.age = age;
    }

    public static void main(String[] args) {
        Immutable i = new Immutable(10);

        i.age = 4;

        System.out.println(i.age);
    }
}
</code></pre>

<blockquote>
  <p>Error:(11, 10) java: cannot assign a value to final variable age</p>
</blockquote>

<p>A getter is necessary for cases like <code>getCompany</code> where the field is mutable, but numbers are immutable. <a href="https://stackoverflow.com/questions/6927763/immutable-type-public-final-fields-vs-getter">There's a discussion on the topic here.</a></p>
    </div>