<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ol>
<li><code>cymysql.connect</code> is <a href="https://github.com/nakagami/CyMySQL/blob/master/cymysql/connections.py#L324" rel="noreferrer">a context manager</a> and so you should use it in a <code>with</code> statement.</li>
<li><code>conn.cursor</code> isn't a context manager. Which is very fishy, even more so that the original version of cymysql, pymysql, is.</li>
<li>Seperate SQL interactions from UI interactions. This is as multiple parts of the UI may need to use the same SQL interactions, however since they're mangled, it'll lead to code duplication or errors in your UI.</li>
<li>You don't need to do <code>email = ''</code>, if you want to tell people it's a string then you can do <code>email: str</code>. A better thing to do however is use <code>typing</code> and make your code fully typed.</li>
<li>You may want to verify that the email is a valid email address. It doesn't look like your SQL does that, but I don't know enough about it.</li>
</ol>



<pre><code>import cymysql
from getpass import getpass


def get_user_info():
    while True:
        email = input("Input your Email address (max. 64 chars.): ")
        password = getpass("Input a password (max. 64 chars.): ")
        if len(email) &lt; 64 and len(password) &lt; 64:
            return email, password


def register(cur, email, password):
    cur.execute("INSERT INTO `users` (`Email`, `Password`) VALUES (%s, %s)", (email, password))


def login(cur, email, password):
    cur.execute("SELECT * FROM `users` WHERE `Email`=%s AND `Password`=%s LIMIT 1", (email, password))
    return bool(cur.fetchall())


def check_account(cur, email):
    cur.execute("SELECT * FROM `users` WHERE `Email`=%s LIMIT 1", (email,))
    return bool(cur.fetchone())


def main():
    conn = cymysql.connect(
        host='127.0.0.1',
        user='root',
        passwd='',
        db='david'
    )
    with conn:
        cur = conn.cursor()
        email, password = get_user_info()
        check = check_account(cur, email)
        if check:
            loggedin = login(cur, email, password)
            if loggedin:
                print("You've succesfully logged-in!")
            else:
                print("You failed logging-in!")
        else:
            register(cur, email, password)
            print("You've succesfully registered!")
        cur.close()


if __name__ == '__main__':
    main()
</code></pre>
    </div>