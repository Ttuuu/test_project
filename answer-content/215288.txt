<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>By this condition, the function returns <code>false</code> when both objects are empty:</p>

<blockquote>
<pre><code>if (isEmpty(firstObject) || isEmpty(secondObject)) return false;
</code></pre>
</blockquote>

<p>I would expect <code>true</code> in this case, and rewrite the condition as:</p>

<pre><code>if (isEmpty(firstObject) != isEmpty(secondObject)) return false;
</code></pre>

<p>That is, return <code>false</code> if one of them is empty while the other is not.</p>

<p>In fact, this special treatment is not even necessary, because the rest of the function naturally handles the case of empty objects.</p>

<hr>

<blockquote>
  <p>I was wondering if there is a more efficient, elegant or simpler way of doing this?</p>
</blockquote>

<p>The current implementation is not efficient,
because of this step:</p>

<blockquote>
<pre><code>if (!firstObjectKeys.every(value =&gt; secondObjectKeys.includes(value))) return false;
</code></pre>
</blockquote>

<p>The problem is that <code>secondObjectKeys</code> is an array,
and therefore <code>.includes</code> does a linear lookup.
You can improve the linear-time lookup to constant-time lookup by converting <code>secondObjectKeys</code> to a <em>set</em>.</p>
    </div>