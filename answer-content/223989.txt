<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Yesterday I spent the day researching how threading should be done in PyQt5 for one of my own projects and found that a lot of the documentation was incorrect, including official documentation.  </p>

<p>This was the best documentation we were able to find: <a href="https://www.learnpyqt.com/courses/concurrent-execution/multithreading-pyqt-applications-qthreadpool/" rel="nofollow noreferrer">Here</a><br>
<a href="https://github.com/Givo29/pyqt5-threading" rel="nofollow noreferrer">Here</a> is a proof of concept example I came away with and later implemented.  </p>

<p>Basically you have a <code>Thread</code> class where the code to be executed is in the run function:</p>

<pre><code>class Thread(QRunnable):

    def __init__(self):
        super(Thread, self).__init__()     
        self.signal = Signals()    

    @pyqtSlot()
    def run(self):
        time.sleep(5)
        result = "Some String"
        self.signal.return_signal.emit(result)
</code></pre>

<p>This makes a call to a <code>Signal</code> class that will store the signal as a subclass of <code>PyQt5.QtCore.QObject</code>:</p>

<pre><code>class Signals(QObject):
    return_signal = pyqtSignal(str)
</code></pre>

<p>Then the basic <code>Application</code> class that creates an instance of a <code>PyQt5.QtCore.QThreadPool</code> in the <code>__init__</code> function and creates and calls the thread in <code>clickCheckbox</code> which sends the return signal to <code>function_thread</code>:</p>

<pre><code>class App(QWidget):
    def __init__(self):
            super().__init__()
            self.title='Hello, world!'
            self.left=2100
            self.top=500
            self.width=640
            self.height=480
            self.threadpool = QThreadPool()
            self.initUI()

    def initUI(self):
            self.setWindowTitle(self.title)
            self.setGeometry(self.left,self.top,self.width,self.height)
            checkbox = QCheckBox('Check Box', self)
            checkbox.stateChanged.connect(self.clickCheckbox)
            self.show()

    def clickCheckbox(self):
        thread = Thread()
        thread.signal.return_signal.connect(self.function_thread)
        self.threadpool.start(thread)

    def function_thread(self, signal):
        print(signal)
</code></pre>

<p>Initialising Application Window:</p>

<pre><code>if __name__=='__main__':
        app=QApplication(sys.argv)
        ex=App()
        sys.exit(app.exec_())
</code></pre>

<p><strong>Applying all this, here is what I would suggest you do to your code:</strong></p>

<pre class="lang-py prettyprint-override"><code>import sys
import time
from PyQt5.QtWidgets import *
from PyQt5.QtCore import *

class Signal(QObject):
    signal = pyqtSignal(str)

class Thread(QRunnable):

    def __init__(self, counting):
        super(Thread, self).__init__()
        self.counting = counting
        self.signal = Signal()

    def run(self):
        for x in range(100):
            self.signal.signal.emit(str(x))
            time.sleep(.01)
        counting = False
        self.signal.signal.emit(str(counting))

class Application(QMainWindow):
    counting = False

    def __init__(self):
        super(Application, self).__init__()

        self.button = QPushButton()
        self.button.setText('99')
        self.button.clicked.connect(self.startCounting)

        self.layout = QVBoxLayout()
        self.layout.addWidget(self.button)
        self.frame = QFrame()
        self.frame.setLayout(self.layout)
        self.setCentralWidget(self.frame)

        self.threadpool = QThreadPool()

    def startCounting(self):
        thread = Thread(self.counting)
        thread.signal.signal.connect(self.something)
        self.threadpool.start(thread)

    def something(self, signal):
        if signal == "False":
            print("Counting is Complete")
        else:
            print(signal)


if __name__ == '__main__':
    app = QApplication(sys.argv)
    window = Application()
    window.show()
    sys.exit(app.exec_())
</code></pre>
    </div>