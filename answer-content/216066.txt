<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li>Maybe have a scheme to keep header files sorted. Makes it easier to spot possible duplicate includes.</li>
<li><p><code>enum Colors</code> should be <code>enum Color</code>, every enum instance in only one at a time.</p></li>
<li><p>To keep track of a true enumerated sequence add max enum to keep track of the number of colors.</p>

<pre><code>magenta,
cyan,
white,

COLORS }; // == 7
</code></pre>

<p>(Thus, don't forget to remove <code>#define COLORS 6</code>.)</p></li>
<li><code>Color_map</code> not really needed in this case since they are nicely enumerated. Just replace <code>buffer[i] = Color_map[remainder];</code> with <code>buffer[i] = (enum Color)remainder;</code>.</li>
<li>Doesn't look like <code>void *generate_colors(enum Colors *buffer)</code> is returning anything, so just make it <code>void generate_colors(...</code>.</li>
<li>Since <code>COLORS</code> now is <code>7</code> instead of <code>6</code>, replace all <code>COLORS + 1</code> with just <code>COLORS</code>.</li>
<li>In <code>generate_colors</code>, <code>int power ...</code> can be <code>const int power ...</code>.</li>
<li>Interface to <code>convert_input</code> can be <code>const</code> for its input, i.e., <code>int convert_input(const char *input, enum Color *buffer)</code>.</li>
<li>Simplify and speed up start of loop. E.g., don't check <code>strlen(input)</code> every interation, it's not changing. No need to call <code>strlen</code> (see below). <code>tolower</code> needs <code>unsigned char</code> to guarantee proper functionality, thus, platform dependent on signess of <code>char</code>.</li>
</ul>

<p>Example</p>

<pre><code>for (int c = 0;; ++c) // Look, no check for end of string done here
{
    switch (tolower((unsigned char)input[c]))
    {
        case 'r':
</code></pre>

<p>...</p>

<pre><code>            case '\0': // add end-of-string check here
                return 0;
            default:
                return 1;
        }
    }
}
</code></pre>

<ul>
<li><code>const char *color_to_char(enum Colors color)</code> since it return <code>const</code> strings.</li>
<li>Input handling not kind on the user when entering wrong. Instead, read the whole line and parse the line for you guess.</li>
</ul>

<p>Example</p>

<pre><code>char* line = NULL;
size_t line_len = 0u;

while (!guessed &amp;&amp; getline(&amp;line, &amp;line_len, stdin) != -1)
{
    char input[LENGTH + 1]; // OBS: This was too small before
    sscanf(line, " %4s", input); // automatic skip of white space
                                 // and limit input to 4 real characters
                                 // discarding the rest of the line.
</code></pre>

<ul>
<li>Split wide <code>printf</code> statement and don't color the commas.</li>
</ul>

<p>Snippet:</p>

<pre><code>printf("%s\n", "Please only choose characters from "
RED_C "R" RESET ", "
GRN_C "G" RESET ", "
YEL_C "Y" RESET ", "
BLU_C "B" RESET ", "
MAG_C "M" RESET ", "
CYN_C "C" RESET ", "
WHT_C "W" RESET ".");
</code></pre>

<ul>
<li>And if you use <code>getline</code>, free memory at end.</li>
</ul>

<p>Snippet:</p>

<pre><code>}

free(line);

return EXIT_SUCCESS;
</code></pre>
    </div>