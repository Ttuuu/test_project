<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>To adhere to the Open/Closed Principle for this class, you can either:</p>

<ol>
<li>Change <code>StatusCode</code> to a class with <code>bool IsEditable</code>, <code>bool IsDeletable</code>, and <code>bool?UsesOutMessage</code> gettable only properties, generating the instances via a factory class, OR</li>
<li>Pass <code>Func&lt;bool, StatusCode&gt; IsEditable</code>, <code>Func&lt;bool, StatusCode&gt; IsDeletable</code>, and <code>Func&lt;bool?, StatusCode&gt; UsesOutMessage</code> functions into <code>StatusCode</code>'s constructor.</li>
</ol>

<p>I don't see any other SOLID principles being broken in your original code, but it can be hard to tell out of context.</p>

<p><strong>EDIT</strong></p>

<p>If you went with option 1, <code>StatusCode</code> would be a class:</p>

<pre><code>class StatusCode
{
    private bool isDeletable;
    private bool isEditable;
    private bool? usesOutMessage;

    public StatusCode(bool isDeletable, bool isEditable, bool? usesOutMessage)
    {
        IsDeletable = isDeletable;
        IsEditable = isEditable;
        UsesOutMessage = usesOutMessage;
    }

    public bool IsDeletable
    {
        get { return isDeletable; }
        set { isDeletable = value; }
    }

    public bool IsEditable
    {
        get { return isEditable; }
        set { isEditable = value; }
    }

    public bool? UsesOutMessage
    {
        get { return usesOutMessage; }
        set { usesOutMessage = value; }
    }
}
</code></pre>

<p>Your code above would become:</p>

<pre><code>public class Message
{
    public Guid ID { get; set; }
    public string MessageIn { get; set; }
    public string MessageOut { get; set; }
    public StatusCode StatusCode { get; set; } //EDIT could be changed during message lifecycle

    public bool IsDeletable
    {
        get
        {
            return this.StatusCode.IsDeletable;
        }
    }

    public bool IsEditable
    {
        get
        {
            return this.StatusCode.IsEditable;
        }
    }

    public string Message
    {
        get
        {

            if (this.StatusCode.UsesOutMessage.HasValue)
            {
                if (this.StatusCode.UsesOutMessage.Value)
                {
                    return this.MessageOut;
                }
                else
                {
                    return this.MessageIn;
                }
            }
            else
            {
                    return string.Empty;
            }
        }
    }
}
</code></pre>

<p>The factory class would still need to do something like:</p>

<pre><code>StatusCode redAlert = new StatusCode(false, true, null);
StatusCode amberAlert = new StatusCode(false, false, true);
StatusCode chartreuseAlert = new StatusCode(true, true, false);
</code></pre>

<p>It looks like this is just moving the logic out of <code>MessageBase</code> into a factory, but this adheres to the Open/Closed principle for <code>MessageBase</code>.  <code>MessageBase</code> and its unit test now no longer need to be modified when new status codes are added, removed, or modified.  It just works now matter how the status codes change.  </p>

<p>This approach also keeps the logic in one place: the factory.  Everything that needs to be known about status codes can be found in the factory rather than spread across multiple classes which use status codes.</p>
    </div>