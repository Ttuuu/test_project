<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Welcome to Codereview, and welcome to Python!</p>

<p>Your code looks good -- indentation is good, names are mostly good (but see below), docblock comments are mostly good (but see below). It seems like you need to "soak in" Python a bit, and you'll be up and running.</p>

<h3>Names</h3>

<p>Python's coding standard is <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">PEP8</a> which for the purposes of naming can be simplified to:</p>

<ul>
<li><code>snake_case</code> except for classes</li>
<li><code>CAPS</code> for constants</li>
<li>unless you have to do something else</li>
</ul>

<p>Since your method names were mostly determined by the problem spec, you didn't have a lot of wiggle room. I still fault you for being inconsistent, though:</p>

<pre><code>    self.queue_dict = { ... }
    self.sequenceDict = AutoVivification()
</code></pre>

<p>That last attribute should be <code>sequence_dict</code>. Except putting type in names is so Windows 3.1! So maybe <code>pending_sequences</code>.</p>

<h3>Comments</h3>

<p>If your comment says in English what the code says in Python, delete it. Comments should explain parts of the code that aren't clear or that have possibly-surprising effects.</p>

<pre><code>    #list of output queues
    self.queue_dict = {
</code></pre>

<p>This comment is already a lie, since <code>queue_dict</code> isn't a <code>list</code> at all!</p>

<p>Also, there's a copy/paste error in the docblock for <code>next</code>: the Args are wrong.</p>

<h3>Types</h3>

<p>The name for <code>AutoVivification</code> is <a href="https://docs.python.org/3/library/collections.html?highlight=defaultdict#collections.defaultdict" rel="nofollow noreferrer"><code>collections.defaultdict</code></a>.</p>

<p><code>class MootiumError</code> should have a different name, since it has a fairly specific purpose. Considering that you later catch <code>queue.Empty</code>, I'm surprised at your choice. Perhaps <code>MootiumQueueEmpty</code>? Or even <code>MootiumQueueError</code>?</p>

<p>You construct a dictionary of numbered queues, but index the dictionary with strings. Then in <code>dispatch</code> you have to convert your number to a string to index the queue. Why not just use integer keys for the dictionary? Better still, why not use a list, which takes integer keys always? (And it would make your comment valid again!)</p>

<pre><code>def __init__(self):
    self.queue_dict = [queue.Queue() for _ in range(5)]
    # Store sequence-parts in a se[arate dict for each sequence
    self.pending_sequences = collections.defaultdict(dict)
</code></pre>

<p>There are three iterator functions for dictionaries: <code>keys()</code>, <code>values()</code>, and <a href="https://docs.python.org/3/library/stdtypes.html?highlight=dict%20items#dict.items" rel="nofollow noreferrer"><code>items()</code></a>. The <code>items</code> iterator yields (key, value) tuples.</p>

<p>Dictionaries can be checked for the presence of keys using the <code>in</code> operator. Strings can be checked for substrings using the <code>in</code> operator. Sequences can be linearly scanned for items using the <code>in</code> operator. It's the most expensive way. Naturally, that's what you're doing. Don't do that!</p>

<p>Python is not as regex-first as Perl. So there are non-re string functions, like <code>startswith</code>. They're faster and more expressive.</p>

<pre><code>def transform(self, msg):
    """ ... """

    message = json.loads(msg)

    for k, v in message.items():
        if k.startswith('_'):
            continue

        # reverse strings that include Mootium            
        if isinstance(v, str) and 'Mootium' in v:
            message[k] = v[::-1]

        # replace integer values with its bitwise negation
        elif isinstance(v, int):
            message[k] = ~v

    if '_hash' in message:
        # if _hash references another field, encode the value from that field.
        # otherwise, encode the value associated with _hash
        if message["_hash"] in message:
            toEncode = message[message["_hash"]].encode()
        else:
            toEncode = message["_hash"].encode()

        digest = base64.b64encode(hashlib.sha256(toEncode).digest())

        if message.setdefault('hash', digest) != digest:
            raise ValueError(
                    'The computed hash has a different value from the existing hash field'
                )
    return message
</code></pre>
    </div>