<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Design</h3>

<p>This sort of design isn't necessarily a bad thing, but in this example it's making things a lot more complicated, without providing any benefits:</p>

<ul>
<li><code>ChangeLight</code> suggests that <code>null</code> is not a valid state, but your <code>TrafficLight</code> class does not prevent its state from being initialized or set to <code>null</code>.</li>
<li>It's possible to create classes that inherit from <code>State</code> or one of your other state classes. This essentially means that there are an infinite number of possible states (<code>PurpleState</code>, <code>RandomState</code>, <code>SchrodingerCatState</code>, ...). That makes it unclear how exactly your traffic light is meant to be used.</li>
<li>Those state classes don't contain any actual state - it's only their type (and functionality) that matters. In that case, you might as well create static instances that can be reused. And because they all contain essentially the same logic (just different values), you don't really need separate classes either.</li>
<li>Methods like <code>AllowTraffic</code> and <code>StopTraffic(TimeSpan delay)</code> are probably more useful than a <code>ChangeLight</code> method that doesn't say anything about what the next state will be. But supporting such methods with logic inside those state classes alone is cumbersome.</li>
</ul>

<p>Using a simple <code>enum</code> instead makes things a lot easier: there's no <code>null</code> to worry about and it's immediately clear what all the possible states are. The light-changing logic is fairly simple, so that can easily be kept in <code>TrafficLight</code> itself.</p>

<h3>Further considerations</h3>

<p>Different countries use different light patterns, and traffic lights may have different modes (such as daylight versus night, or an error state). In other words: red is not always followed by green - in some countries there's an orange-red state in-between, in some modes a light is flashing red continually, and so on.</p>

<p>With such requirements, the current light doesn't tell us everything about the traffic light's internal state. It would be more useful to treat each <em>pattern</em> as a different state. But even then I wouldn't create separate state classes with their own logic: a single data-driven class and some state-tracking logic inside <code>TrafficLight</code> itself should be sufficient.</p>

<h3>Other notes</h3>

<ul>
<li>That <code>Console.WriteLine</code> is obviously some left-over test code, but be careful not to leave it lingering around. There's no reason why this code should depend on the presence of a console. If you're using Visual Studio, you may want to use tracepoints instead (breakpoints with a logging action). They're more flexible and don't clutter the code.</li>
<li>Comments like <code>// Gets or sets the state</code> are of no use: they're just stating the obvious, and they can only cause confusion when they become out-of-date.</li>
<li><code>State</code> is a very generic name - <code>TrafficLightState</code> or <code>TrafficLightColor</code> may be more appropriate here.</li>
</ul>
    </div>