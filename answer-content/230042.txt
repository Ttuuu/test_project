<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This code looks like a good start.</p>
<p>Some variable could be declared with <code>const</code> because they aren't re-assigned - e.g. <code>canvas</code>, <code>snake</code> if the first line of <code>newSnake()</code> was changed to <code>snake.length = 0;</code>. This helps avoid accidental re-assignment in the future.</p>
<p>The function name <code>pGame</code> could be improved for readability to be more descriptive of what it does - perhaps a name like <code>processGame</code> or something along those lines.</p>
<p>It would be wise to use <a href="https://developer.mozilla.org/en-US/docs/Web/API/window/requestAnimationFrame" rel="nofollow noreferrer"><code>requestAnimationFrame()</code></a> instead of <code>setInterval()</code>. As <a href="http://www.javascriptkit.com/javatutors/requestanimationframe.shtml" rel="nofollow noreferrer">this article</a> explains, <code>setInterval()</code> isn't as good for performance:</p>
<blockquote>
<p>The problem with using setTmeout/setInterval for executing code that changes something on the screen is twofold.</p>
<ul>
<li><p>What we specify as the delay (ie: 50 milliseconds) inside these functions are often times not honoured due to changes in user system resources at the time, leading to inconsistent delay intervals between animation frames.</p>
</li>
<li><p>Even worse, using <code>setTimeout()</code> or <code>setInterval()</code> to continuously make changes to the user's screen often induces "layout thrashing", the browser version of cardiac arrest where it is forced to perform unnecessary reflows of the page before the user's screen is physically able to display the changes. This is bad -very bad- due to the taxing nature of page reflows, especially on mobile devices where the problem is most apparent, with janky page loads and battery drains. An iPhone or two have even caught fire as a result (just a joke Apple, no law suits please)!</p>
</li>
</ul>
</blockquote>
    </div>