<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I only have a few small suggestions:</p>

<p>I like to have "tweaks" that I may want to change later at the top of my file. This makes it easier to quickly alter them when playing around without needing to dig through the code. I'd move <code>levels</code> and <code>standard_frame_time_in_ms</code> to the top so they're a little more accessible. I might also change <code>levels</code> to <code>n_levels</code> or something similar to make it clearer that it's a number representing how many levels to have; not a collection of "levels".</p>

<hr>

<p>Right now, you're partially populating <code>durations</code> with the halved time delay, then adding the rest in the loop. I don't see a good reason to <code>append</code> to <code>durations</code> in the loop though. The data being added to <code>durations</code> has nothing to do with data available within the loop.</p>

<p>I'd populate it before the loop. List multiplication makes this easy. The long variable names make this difficult to do succinctly unfortunately, but it can be split over two lines if need be:</p>

<pre><code>durations = [standard_frame_time_in_ms // 2] + [standard_frame_time_in_ms] * (levels - 1)

durations = [standard_frame_time_in_ms // 2] + \
                [standard_frame_time_in_ms] * (levels - 1)
</code></pre>

<p>I also changed it to use integer division (<code>//</code>) since fractions of a millisecond likely aren't usable by the GIF maker anyway.</p>

<hr>

<p>I'd stick the whole procedure in the bottom into a function:</p>

<pre><code>def main():
    carpets = []
    carpets.append(make_carpet(0, size))

    durations = [standard_frame_time_in_ms / 2] # first stage visible for a short time

    for i in range(levels - 1):
        carpets.append(make_carpet(i + 1, size))
        durations.append(standard_frame_time_in_ms)

    durations[-1] *= 4 # final stage of animation visible for a long time

    save_animated_gif("Sierpi≈Ñski's carpet.gif", carpets, durations)
</code></pre>

<p>Now, you can call <code>main</code> when you want it to run. Especially when developing using a REPL, having long-running top-level code can be a pain. You don't necessarily want the whole thing to run just because you loaded the file.</p>

<hr>

<p>You have:</p>

<pre><code>carpets.append(make_carpet(0, size))
</code></pre>

<p>then inside the loop you have:</p>

<pre><code>carpets.append(make_carpet(i + 1, size))
</code></pre>

<p>I'm not a fan of duplication like this. There's usually a better way. It seems like you could just adjust the <code>range</code> bounds:</p>

<pre><code>def main():
    carpets = []

    . . .

    for i in range(-1, levels - 1): # Start at -1 instead
        carpets.append(make_carpet(i + 1, size))

    . . .
</code></pre>

<p>This is basically just a transformation from a <code>range</code> to a list of carpets though. When "converting" one sequence to another, comprehensions come to mind:</p>

<pre><code>carpets = [make_carpet(i + 1, size) for i in range(-1, levels - 1)]
</code></pre>

<p>Then, you can easily make it lazy if that proves beneficial in the future just by changing the <code>[]</code> to <code>()</code>:</p>

<pre><code># Now it's a generator that only produces values as requested instead of strictly
carpets = (make_carpet(i + 1, size) for i in range(-1, levels - 1))
</code></pre>
    </div>