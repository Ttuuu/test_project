<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>It would be easier, and have better performance, to iterate over <code>Counter.most_common()</code> rather than using <code>.pop(0)</code> lots.</p>

<p>From here you just want to use <code>next</code> until the value is not the same. Which is effectively what you're doing with <code>.pop</code>.</p>

<pre class="lang-py prettyprint-override"><code>from collections import Counter

input_lst = [1, 2, 3, 3, 4, 4, 0, 1]

counts = Counter(input_lst)
items = iter(counts.most_common())
value, amount = next(items)
values = [value]
while True:
    value, a = next(items)
    if amount != a:
        break
    values.append(value)

print(values)
</code></pre>

<p>This is effectively grouping consecutive values together, and so you can instead use <a href="https://docs.python.org/3/library/itertools.html#itertools.groupby" rel="noreferrer"><code>itertools.groupby</code></a> rather than roll your own.</p>

<pre class="lang-py prettyprint-override"><code>from collections import Counter
from itertools import groupby

input_lst = [1, 2, 3, 3, 4, 4, 0, 1]

_, values = next(groupby(Counter(input_lst).most_common(), lambda i: i[1]))
values = [value for value, _ in values]
print(values)
</code></pre>
    </div>