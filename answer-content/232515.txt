<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>For the second point, since it's easier, <code>typing</code> has an <a href="https://docs.python.org/3/library/typing.html#typing.Any" rel="nofollow noreferrer"><code>Any</code></a>:</p>

<pre><code>from typing import List, Any
. . ., variables: List[Any], . . .
</code></pre>

<p>For the first, you're just doing a <a href="https://docs.python.org/3/library/functools.html#functools.reduce" rel="nofollow noreferrer">reduction</a> over <code>variables</code>:</p>

<pre><code>from typing import List, Any
from functools import reduce


def format_string(string: str, variables: List[Any]) -&gt; str:
    return reduce(lambda s, val: s.replace("[*]", str(val), 1), variables, string)
</code></pre>

<p>Although really, in a real use case, I'd still split this over three lines for clarity:</p>

<pre><code>def format_string(string: str, variables: List[Any]) -&gt; str:
    return reduce(lambda s, val: s.replace("[*]", str(val), 1),
                  variables, 
                  string)
</code></pre>

<p>And honestly, I might just make that function var-arg instead of grouping things in a list to make it consistent with other <code>format</code> functions:</p>

<pre><code>def format_string(string: str, *variables: Any) -&gt; str:
    return reduce(lambda s, val: s.replace("[*]", str(val), 1), variables, string)

&gt;&gt;&gt; format_string("[*] Hello [*]", 1, 2)
'1 Hello 2'
</code></pre>

<p>Note that when annotating a a var-arg parameter, you annotate the type of each element and ignore the type of the wrapping container (a tuple iirc). That means it's <code>*variables: Any</code>, not <code>*variables: Tuple[... Any]</code>.</p>

<hr>

<p>Of course though, whether or not this is better is a matter of taste, but this is the ideal use-case for <code>reduce</code>. Whenever you want to constantly reassign one thing in a simple loop, <code>reduce</code> is likely a good tool to look at.</p>
    </div>