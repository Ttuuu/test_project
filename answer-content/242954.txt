<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Debug prints</h2>

<blockquote>
  <p>I made a function to print out the BST and use it as a visual means of debug, if need be. The problem is this then facilitates needing a debug flag (which Python doesn't really have). I ended up not really using it since the unit testing was sufficient in this case. Is a visual means of debugging like this strictly discouraged?</p>
  
  <p>[...]</p>
  
  <p>this may not be the best approach to turn on/off flag for printing to stdout. Not production code material.</p>
</blockquote>

<p>Indeed! This is the perfect use case for the <a href="https://docs.python.org/3.8/library/logging.html#module-email" rel="nofollow noreferrer">logging</a> module. Leave all of your print statements in but convert them to logging calls at the debug level. Then, by changing only the level of the logger you will be able to show or omit that content.</p>

<h2>Non-init attribute set</h2>

<pre><code>self.disconnect() # this is neat
</code></pre>

<p>The problem with this approach is that there are attributes being set that are not done directly in the <code>__init__</code> function. Some linters, including PyCharm's built-in linter, will call this out. Consider moving initialization of those three attributes to the constructor, with type hints indicating what actually goes in there - possible <code>Optional['Node']</code>.</p>

<h2>Boolean expressions</h2>

<pre><code>    if requested &lt;= self.current_time or (requested &lt;= booked + self.k and requested &gt;= booked - self.k):
        return False
    else:
        return True
</code></pre>

<p>can be (if I've done my boolean algebra correctly)</p>

<pre><code>return (
    requested &gt; self.current_time and not (
        -self.k &lt;= requested - booked &lt;= self.k
    )
)
</code></pre>

<h2>Unit tests</h2>

<p>You ask:</p>

<blockquote>
  <p>Are the unit testcases I came up with satisfactory, or need more work?</p>
</blockquote>

<p>About this:</p>

<pre><code>sys.path.append(os.path.abspath('..')) #this was a workaround I found to avoid ModuleNotFoundErrors, but now I need to mandatorily run tests from ../ 
</code></pre>

<p>That's spooky and should be unnecessary. Normal unit test discovery should work fine as long as you run from the "sources-root" of your project. Incidentally, <code>src</code> as a module name is a sign that your module paths are wonky. <code>BST</code> should be in <code>runway_scheduling.schedule</code>, and <code>TestBST</code> should be in something like <code>runway_scheduling/tests/test_bst.py</code>. I can't comment any further without seeing your directory structure.</p>

<p>You also write:</p>

<blockquote>
  <p>I don't like writing magic numbers, is there a better way to do this?</p>
</blockquote>

<p>Tests are somewhat of an exception in my mind. Having everything be explicit and in-place is actually a good thing. The only thing I can suggest, although I don't immediately see where it would be applicable, is <a href="https://docs.python.org/3/library/unittest.html#distinguishing-test-iterations-using-subtests" rel="nofollow noreferrer">subTest</a> - you can find code that is repetitive with only numerical changes, factor out those numerical changes to tuples, and write a parametric loop with a subtest.</p>
    </div>