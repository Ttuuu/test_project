<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I wouldn't say, your major concern should be performance. I find the method rather error prone and it has a very limited use:</p>

<p>1) All columns have to be of type <code>string</code> - except the first which must be of type <code>Guid</code></p>

<p>2) The order of the columns in the table must match the order of the properties of the object type. If they don't, a column could easily be mapped with a wrong property without no warning because they must all be strings. You definitely need some type checking.</p>

<p>3) A data table usually has a (unique) Id column, which the instances of the class should be instantiated with, but it seems, that you create a new object Id for every new instance/row. Is that Id saved to the database? And what about the next time the <code>Row/Item</code> are mapped - is a new Id again created for that item? It seems not logical to have a new id for an item every time it is fetched from a database?</p>

<p>I would say that the method is so aimed at a special situation where you need to map a data table with a certain <code>class</code> that it is not a candidate as an extension method - but just as a private method in a class. An extension method should be generic as much as possible and should handle all possible errors in a consistent way.</p>

<p>What about <code>private vs. public</code> members?</p>

<hr>

<p>I personally don't like the use of an indexed iteration here: I would go along these lines:</p>

<pre><code>  PropertyInfo[] pis = typeof(T).GetProperties();

  foreach (DataRow row in dt.Rows)
  {
    T item = new T();

    foreach (DataColumn column in dt.Columns)
    {
      PropertyInfo pi = pis.FirstOrDefault(p =&gt; p.Name == column.ColumnName);
      if (pi != null)
      {
        pi.SetValue(item, row[column]);
      }
    }
  }
</code></pre>

<p>or </p>

<pre><code>  PropertyInfo[] pis = typeof(T).GetProperties();

  foreach (DataRow row in dt.Rows)
  {
    T item = new T();

    foreach (PropertyInfo pi in pis)        
    {
        pi.SetValue(item, row[dt.Columns[pi.Name]]);
    }
  }
</code></pre>

<p>Notice, that the call to <code>typeof(T).GetProperties()</code> is outside the loops, because there is no need to call it for every <code>row/item</code>. In this way you are half the way to a nearly completely generic extension method.</p>

<hr>

<p>In order to make it more generic, you'll have to consider the mapping strategy:</p>

<p>1) Should the column names match the property names of the class or should you consider to be able to provide a mapping table?:</p>

<pre><code>public static List&lt;T&gt; DataTableToList&lt;T&gt;(this DataTable dt, Dictionary&lt;string, string&gt; mappings) where T : class, new()
</code></pre>

<p>or:</p>

<pre><code>public static List&lt;T&gt; DataTableToList&lt;T&gt;(this DataTable dt, (string column, string property)[] mappings) where T : class, new()
</code></pre>

<p>You'll also have have to consider conversion of certain types: for instance is <code>DateTime</code> often stored in a data table as <code>SqlDateTime</code> which can not implicitly cast to a <code>DateTime</code> structure, so you should maybe be able to provide some converters:</p>

<pre><code>public static List&lt;T&gt; DataTableToList&lt;T&gt;(this DataTable dt, (string column, string property)[] mappings, Dictionary&lt;string, Func&lt;object, object&gt;&gt; converters) where T : class, new()
</code></pre>

<p>called like:</p>

<pre><code>    Dictionary&lt;string, Func&lt;object, object&gt;&gt; converters = new Dictionary&lt;string, Func&lt;object, object&gt;&gt;
    {
      { "BirthDay", (sqlDate) =&gt; ((SqlDateTime)sqlDate).Value }
    };


    List&lt;MyItem&gt; items = table.DataTableToList&lt;MyItem&gt;(null, converters);
</code></pre>

<p>Both the mapping and converter strategy can probably be more elegant or sophisticated - the above is merely some quick suggestions.</p>
    </div>