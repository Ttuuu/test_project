<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This answer covers the algorithmic aspect of the code. If you feel this second answer goes against the spirit of the Stack Exchange network, consider voting on the <a href="https://codereview.stackexchange.com/a/227286/92478">first answer</a> instead or leaving a comment to express your judgement.</p>

<hr>

<h1>The algorithm</h1>

<p>Since your question to me seems a bit vague on some parts of the data, there is a little bit of guesswork involved in the following sections, so take them with a grain of salt. I think they will nevertheless help you get an idea what to look for.</p>

<h2><code>get_sequence_idx</code></h2>

<p>If I understood the intent of the code correctly, its purpose is to look for some kind of sentinel value in binary data to tell where the sequence started. For that purpose, you iterate over your input file byte by byte, convert a slice of sentinel's byte length to its hex representation and compare it against the sentinel. That seems a little bit overkill to me. You will have to check this, but I think the following piece of code is actually functionaly equivalent:</p>

<pre><code>def get_sequence_idx(filename, sentinel="\x4f\x5f\x4d\x41"):
    """Read the binary data and find the position of the sentinel

    This function returns the binary data as present in the file as well as
    the sentinel's (given as byte-string) position in the file. If the
    sentinel value was not found, the second return value is None.
    """
    with open(filename, "rb") as f:
        blob = f.read()
        idx = blob.find(sentinel)
        return blob, idx if idx &gt; 0 else None
</code></pre>

<p>So what has happend here? I converted <code>sentinel</code> from a list of hexadecimal values to a "byte"-string (the term is a bit inaccurate in Python 2)<sup>1</sup>. That allows us to use <a href="https://docs.python.org/2/library/string.html#string.find" rel="nofollow noreferrer"><code>.find(...)</code></a> on the input data to look for the sequence instead of doing it manually. <code>.find(...)</code> returns the index of the first instance where the search string was found, and <code>-1</code> if it was not found. So if you were to return <code>-1</code> instead of <code>None</code> in case of no sentinel value, the little <a href="https://docs.python.org/2/reference/expressions.html#conditional-expressions" rel="nofollow noreferrer">ternary expression</a> would not be necessary and you could just <code>return blob, blob.find(sentinel)</code>. Since you did not provide test data you will have to verify yourself that it's actually working in your specific use-case.</p>

<h2><code>is_sequence_missing</code></h2>

<p>Now let's look at <code>is_sequence_missing</code> piece by piece:</p>

<blockquote>
<pre><code>missing, start, counter = False, True, 0
</code></pre>
</blockquote>

<p>cries "C code"! That aspect was already covered in the general recommendations section of the previous answer.</p>

<blockquote>
<pre><code>if not idx:
    print("sentinel not found")
return not missing
</code></pre>
</blockquote>

<p>Since you actually want to take action in case <code>idx</code> has the value <code>None</code>, you should likely also do that <code>if idx is None:</code>. This is also in-line with the <a href="https://www.python.org/dev/peps/pep-0008/#programming-recommendations" rel="nofollow noreferrer">Programming Recommendations</a> section of PEP8, which recommends to compare singleton values (like <code>None</code>) using <code>is</code>. The intent of <code>return not missing</code> can also be made more clear simply by doing <code>return True</code>. This also allows you to narrow down the scope of <code>missing</code> since it will only ever be needed if you pass this initial check.</p>

<p>The rest of the code is IMHO mostly as straightforward as it gets, so there are only a few minor points that may improve the readability of your code. First, you can get rid of the <code>continue</code> if you use <code>if ...: elif ...: else:</code> instead of <code>if ...: if ...: else:</code>. If you stick with your current branch structure, putting a blank line after the first <code>if</code> statement can make it clearer that this is actually a seperate block that is not to be seen as part of the later "condition chain". Regarding the <code>else</code> branch: I think here is a opportunity to stop the loop early. If I'm not mistaken, there is no chance <code>missing</code> will ever become <code>False</code> again once you have set it to <code>True</code>. So if you don't need to have all the discontinued sequence numbers to be printed to stdout, a simple <code>break</code> there would allow the loop to end the first time you entered the <code>else</code> branch. In that case <code>missing</code> could also be omitted altogether to be replaced by <code>return True</code> in the <code>else</code> branch and by <code>return False</code> at the end of the function.</p>

<h2><code>if __name__ == "__main__":</code></h2>

<p>Using <code>if __name__ == "__main__":</code> is considered good practice in Python to clearly mark what code is supposed to be run if the file is used as a script. Often, programmers go even further and wrap the code that is surrounded by <code>if __name__ == "__main__":</code> into a <code>main()</code> function. That way no variables pollute the global namespace if you run the script in an interactive Python interpreter.</p>

<pre><code>def main():
    filename, packet_size, sequence_offset = parse_arguments()
    print("passed filename %s packet_size %d sequence_offset %d" %
          (filename, packet_size, sequence_offset))
    if is_sequence_missing(filename, packet_size, sequence_offset):
        print("sequence is missing")
    else:
        print("sequence is not missing")


if __name__ == "__main__":
    main()
</code></pre>

<hr>

<p><sup>1</sup> Python 3 is more specific in that regard so there is a chance that you will end up with something like <code>sentinel=b"\x4f\x5f\x4d\x41"</code> or some encoding/decoding.</p>
    </div>