<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Simplifications</h3>

<p>What you want to do can be achieved with data-binding alone, you don't need all those commands.</p>

<ol>
<li><p>Since both text-boxes should display the same content, we only need one string property in <code>MainViewModel</code>:</p>

<pre><code>private string _mainDisplay = "";
public string MainDisplay
{
    get =&gt; _mainDisplay;
    set { _mainDisplay = value; RaisePropertyChanged(); }
}
</code></pre>

<p>Note the lack of <code>() =&gt; MainDisplay</code>: because <code>RaisePropertyChanges</code> has an overload with a <code>[CallerMemberName]</code> parameter, the compiler will automatically insert the name of the property for us. Alternately, you can use <code>nameof(MainDisplay)</code>.</p></li>
<li><p>Your user-control should bind to this property, just like the text-box in <code>MainWindow.xaml</code>: <code>Display="{Binding MainDisplay, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"</code>.</p></li>
<li><p>Now you can remove those command classes and anything related to them, including the <code>&lt;i:Interaction.Trigger&gt;</code> parts in <code>MainWindow.xaml</code> and the <code>MainTextChanged</code> and <code>UCTextChanged</code> methods in <code>MainViewModel</code>.</p></li>
<li><p>There's just one little detail left: we want changes in the user-control to be visible elsewhere immediately, but the textbox in <code>TextDisplay.xaml</code> doesn't have its <code>UpdateSourceTrigger</code> set to <code>PropertyChanged</code>. Fix that, and everything should work as expected without that <code>TextChanged</code> callback.</p></li>
</ol>

<h3>Answers</h3>

<p>Regarding dependency properties, as far as I know WPF's data binding system requires either the source or target (or both) to be a dependency property, so if you don't want to set the <code>DataContext</code> of your user-control, then yes, you'll need to use dependency properties.</p>

<p>Which approach to take depends on the purpose of your user-control. If it's meant to display a certain item, then just set the <code>DataContext</code>, so an <code>ItemUserControl</code> always binds to a matching <code>ItemViewModel</code>. On the other hand, if a user-control is a reusable UI control (such as a fancy date-picker) then it makes sense to use dependency properties.</p>

<p>Regarding commands, the MVVM Light library comes with very two useful <code>RelayCommand</code> classes. In my experience you rarely need anything else. I mostly use commands for high-level actions (open project, save file, copy/paste, etc.), and they're usually tied to menu items or buttons via data-binding: <code>&lt;Button Command="{Binding OpenFileCommand}" /&gt;</code>.</p>

<h3>Other notes</h3>

<ul>
<li>Properties that are only set once (in the constructor) don't need a <code>private set</code>, <code>{ get; }</code> is sufficient nowadays.</li>
<li>Dependency properties can also be initialized with a <code>PropertyMetadata</code> object. This allows you to specify a default value and an on-changed callback. But you can also use a <code>FrameworkPropertyMedadata</code>, which offers additional settings. One useful setting in particular is <code>FrameworkPropertyMetadataOptions.BindsTwoWayByDefault</code>.</li>
<li>MVVM Light provides a <code>Set&lt;T&gt;</code> method that allows you to simplify your property setters to <code>set =&gt; Set(ref _mainDisplay, value);</code>. This will set the backing field and raise a <code>PropertyChangedEvent</code>.</li>
</ul>
    </div>