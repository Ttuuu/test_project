<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I think this question may be off-topic, as it does not consist of complete working code to be reviewed. I spent (too long) trying to get it to compile, and got as far as this: <a href="https://godbolt.org/z/qCE9S8" rel="nofollow noreferrer">https://godbolt.org/z/qCE9S8</a></p>

<p>But you have a lot of problems with the current design. Most notably, you're using raw <code>new</code> all over the place, which creates pointers to the heap; but you aren't actually using the correct syntax to refer to those pointers. For example:</p>

<pre><code>Stream&lt;N&gt; map(function&lt;N(T)&gt; mapper) {
    return new MapStream&lt;N,T&gt;(this, mapper);
}
</code></pre>

<p>Here <code>new MapStream&lt;...&gt;()</code> yields a value of type <code>MapStream&lt;N,T&gt;*</code>, but you're trying to return it as if it were a <code>Stream&lt;N&gt;</code> object. This flatly will not compile.</p>

<p>You could consider changing this return type to <code>std::unique_ptr&lt;Stream&lt;N&gt;&gt;</code> (and using <code>make_unique</code>), but that still won't really work for your use-case, because then you'll have to change this line:</p>

<pre><code>stream.map(hash1).map(hash2).foreach(summer);
</code></pre>

<p>to:</p>

<pre><code>stream.map(hash1)-&gt;map(hash2)-&gt;foreach(summer);
</code></pre>

<p>because now <code>map</code> returns a pointer. And worse, there's no way for the <code>MapStream</code> object itself to transfer its own ownership into the <code>previous_</code> member of the next <code>MapStream</code> object in the chain. You end up with a bunch of temporary <code>unique_ptr</code>s, all linked together by raw pointers which will dangle as soon as the current full-expression finishes. That's okay for your benchmark, but it won't work at all in practice.</p>

<p>You might consider looking at a <a href="https://www.youtube.com/watch?v=tbUCHifyT24" rel="nofollow noreferrer">type erasure</a> design, so that you could keep using <code>Stream&lt;int&gt;</code> as a value type (not a polymorphic base class, no visible pointers) but give it behavior that appeared polymorphic at run time.</p>
    </div>