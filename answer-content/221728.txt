<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>And another one for posterity ...</p>

<p><strong>Macros</strong> - just say No.</p>

<pre><code>#define MAX_THREADS std::thread::hardware_concurrency() - 1;
</code></pre>

<ul>
<li>don't put a semicolon at the end of a macro, it means you can't write <code>resize(MAX_THREADS)</code></li>
<li><p>do parenthesize your macros, like</p>

<pre><code>#define MAX_THREADS (std::thread::hardware_concurrency() - 1)
</code></pre>

<p>so you can write <code>resize(MAX_THREADS/2)</code></p></li>
<li><p>don't use macros in the first place, we're not writing K&amp;R C any more</p>

<pre><code>unsigned int max_threads() {
    return std::thread::hardware_concurrency() - 1;
}
</code></pre></li>
<li><p>don't use <a href="https://en.cppreference.com/w/cpp/thread/thread/hardware_concurrency" rel="nofollow noreferrer"><code>thread::hardware_concurrency()</code></a> either - it doesn't guarantee what you expect anyway:</p>

<blockquote>
  <p>... The value should be considered only a hint.</p>
</blockquote></li>
</ul>

<p><strong>Constructors</strong></p>

<pre><code>//portable way to null the copy and assignment operators
</code></pre>

<p>... it isn't and it doesn't. Just write <code>= delete</code> explicitly, as osuka_ says.</p>

<pre><code>ThreadPool(); //prevent default constructor from being called
</code></pre>

<p>... you mean because it's private? Just use <code>= delete</code> here too. That expresses your intent so clearly you don't even need a comment, which is why it was added to the language.</p>

<pre><code>inline ThreadPool(uint8_t numThreads)
</code></pre>

<p>always mark single-argument constructors <code>explicit</code> unless you <em>want</em> implicit conversion from <code>uint8_t</code> (I'm pretty sure you don't). And <code>inline</code> does nothing here.</p>

<p>For some reason you're limiting thread pools to <code>std::numeric_limits&lt;uint8_t&gt;::max()</code> threads at construction time, but allow them to be later resized up to <code>std::numeric_limits&lt;int&gt;::max()</code>. If you really wanted, for some reason, a pool of 260 threads, that's a bit awkward.</p>

<p><strong>Singletons</strong></p>

<pre><code>/* ... To prevent spawning tons of threads, I made it a singleton */
</code></pre>

<ul>
<li>Avoid singletons anyway where you can</li>
<li>If you <em>need</em> a singleton (and you really don't), write a <code>Singleton&lt;T&gt;</code> wrapper instead of baking it into the class. Singleton-ness is not a core concern of a thread pool, and a sane user might quite reasonably want two thread pools, each with a small number of threads, for separating different types of task.</li>
<li>You already allow your pool to be up to <code>hardware_concurrency()-1</code> in size, and this could legally be <em>enormous</em>, so this doesn't avoid the problem anyway. At some point, you need to just trust that your users aren't going to start a million thread pools with INT_MAX threads each.</li>
<li>Your <code>getInstance</code> method constructs the single instance with <code>numThreads</code> threads (implicitly truncated to <code>uint8_t</code> as mentioned above) on the <em>first</em> call, but subsequent calls will ignore the <code>numThreads</code> parameter entirely. This is confusing and error-prone, which strongly suggests the instance management and configuration shouldn't be coupled at all.</li>
</ul>

<p><strong>Threads</strong></p>

<ul>
<li>when you resize the pool smaller, you detach the surplus worker threads, but you never tell them to die. Any thread pool should have a way to tell worker threads to exit. A <code>virtual bool shutdown()</code> method on the <code>Job</code> would be sufficient, but you also need some way to tell the <code>resize</code> method <em>which</em> threads exited, so it can clean up the pool correctly.</li>
<li>exactly the same cleanup problem on destruction. If you remove the <code>resize()</code> method entirely, as suggested in another answer, you can use a simple <code>bool shuttingDown</code> flag - otherwise, you can resize to zero and use the same shutdown notification mechanism.</li>
<li><p>your worker thread keeps holding the mutex while executing each task, so you'll have virtually no actual concurrency.</p>

<p>Move the current task ptr from the queue while holding the lock, and then use a scoped unlocker (like a unique_lock, but exactly backwards) to release the mutex while executing it. </p></li>
</ul>
    </div>