<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>[Ported from SO]</p>

<p>Alright, before we go into that, let's get a little bit of theory sorted. The way you measure the time a particular piece of code takes to run is, mathematically, denoted by the <code>O(n)</code> notation (big-o notation) where <code>n</code> is the size of the input. </p>

<p>Your test prime function is of something called <code>linear complexity</code> meaning that it'll become linearly slow as the size of <code>n</code> (in this case, your number input) gets large. </p>

<p>For the number <code>15</code>, the execution context is as follows:</p>

<pre><code>15 % 2 == 0 (FALSE)
15 % 3 == 0 (TRUE)
...
15 % 14 == 0 (FALSE)
</code></pre>

<p>This means that for the number <code>100</code>, there will be 98 (2 - 99) steps. And this will grow with time. Let's take your number into consideration: <code>600851475143</code>. The program will execute <code>600851475143</code>; the <code>for-loop</code> will get triggered <code>600,851,475,141</code> times. </p>

<p>Now, let's consider a clock cycle. Say each instruction takes <code>1 clock cycle</code>, and a dumbed down version of your loop takes 2, the number <code>600851475143</code> will execute <code>1,201,702,950,286</code> times. Consider each clock cycle takes <code>0.0000000625</code> seconds (for a 16-MHz platform such as the <a href="https://arduino.cc" rel="nofollow noreferrer">Arduino</a>), the time taken by that code alone is:</p>

<pre><code>0.0000000625 * 1201702950286 = ~75,106 seconds
</code></pre>

<p>Or around <code>20 hours</code>. </p>

<p>You see where I am going with this.</p>

<p>Your best best to get this program to work faster is to use a <a href="https://en.wikipedia.org/wiki/Primality_test#Probabilistic_tests" rel="nofollow noreferrer">probabilistic test</a> and confirm your findings using this number (or a BigInteger variant thereof).</p>

<hr>

<p>Your approach is more linear, in the sense that the number of iterations for the <code>for-loop</code> to check for primality increases with an increasing number. You can plot the CPU cycle time along with the number and you'll realize that this is a rather inefficient way to do this.</p>

<p>I have discrete mathematics at my Uni, so just a word of warning - primality tests and their variants get really messy as you get into the utopia of faster and faster tests. It's a path filled with thorns of mathematics and you should have a seat belt while riding through the jungle! ;) </p>

<p>If you need more information on this, I would be glad to assist! I hope this helped! :)</p>
    </div>