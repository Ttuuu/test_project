<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Pretty good code in general. Well formatted and easy to read.</p>

<p><strong>Board</strong></p>

<p>I feel like the game constraints should exist in some common location. In this case the Board should know how many tries there are and how many pins each row may contain. Now it is possible to add different sized PinRows to a Board and no checking is performed. A trial shorter than the code results in an error.</p>

<p>In the <code>addAttempt(...)</code> method the responsibility of checking the code is placed on the incoming PinRow. This provides an opportunity for the caller to inject a subclass of PinRow with an overridden check(...) method that records the code and solve the problem in two tries via cheating. I would move the code checking into a separate class, as I consider the PinRow to be a "dumb" data container.</p>

<p>In general, I would make the representation of the board as simple as possible and place the game logic into a separate game engine.</p>

<p><strong>ColorPin</strong></p>

<p>Hard coded UI colours. Allowing unlimited pin row length would logically suggest that unlimited colors are also allowed. Better leave the colours for the UI and just use integers here.</p>

<p><strong>CheckPin</strong></p>

<p>This blends UI code again to the game logic. The enums should just be named "COLOR_IN_CORRECT_LOCATION" an "COLOR_IN_WRONG_LOCATION" instead of making the programmer remember what the colours actually mean. A command line UI probably wouldn't have colours anyway.</p>

<p><strong>PinRow</strong></p>

<p>The "colors" field should be named "pins", because it is a row of pins.</p>

<p>Replacing for-loops with IntStreams isn't my cup of tea. The code is not easily understandable at all. I would like to see JavaDocs for the constructor parameters as they are not very intuitive. To create a PinRow I would expect to be required to just provide a number of ColorPin references that matches the size of the row. I assume you chose this constructor to make it easier to create the combinations in the solver. If you're implementing a Master Mind game, it's API should reflect the use cases needed when playing and the solver should adapt to the API, not the other way around.</p>

<p>The <code>randomPinRow()</code> method hard codes the game logic into the data object. For example it is now not very easy to switch to game rules that allow empty pins. This could be extracted into a separate class that implements <code>Supplier&lt;PinRow&gt;</code>. A devious "code master" would learn the "code breaker's" habits and that could be implemented in the supplier.</p>

<p>Split the <code>PinRow</code> and <code>CheckResult</code> into separate classes to follow single responsibility principle and introduce a new <code>PlayerGuess</code> to connect them.</p>

<p><strong>PinChecker</strong></p>

<p>The <code>PinChecker</code> is essentially a <code>Comparator&lt;CheckResult&gt;</code>. You should use standard library tools when possible.</p>
    </div>