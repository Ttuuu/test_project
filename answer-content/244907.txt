<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>No need of f strings at places required where no placeholders are there</p>
<pre><code>return (False, f"&lt;h1&gt;Invalid credential :"
        " Multiple candidates exists"
        "with given credential&lt;/h1&gt;")
</code></pre>
<p>should be simply</p>
<pre><code>return (False, "&lt;h1&gt;Invalid credential :"
            " Multiple candidates exists"
            "with given credential&lt;/h1&gt;")
</code></pre>
<p><strong>Open close Principle violated:</strong></p>
<p>view.py is dependent on what type of response is being sent back from backend.py. This is bad since if more type of responses are to be returned like HttpResponse, FileResponse, JsonResponse the technique of True False can't be used. You need more than 0/1 in this case. This is not extensible code. The view cares about the response being sent.</p>
<p>This should be better:</p>
<p>view.py</p>
<pre><code>def index(request):
    if request.method == "POST":
        form = InputData(request.POST)
        if form.is_valid():
            return backend.main(**form.cleaned_data)

    form = InputData()

    return render(request, "base/index.html", {
        'forms': form
    })
 
</code></pre>
<p>backend.py</p>
<pre><code>import os

import pandas as pd
from weasyprint import HTML

import configparser

from django.http import HttpResponse, FileResponse
from django.template.loader import render_to_string
from django.conf import settings

# --------------load configurations----------------


def get_configurations():
    config = configparser.RawConfigParser()
    config.optionxform = str
    config.read('vars.cfg')
    return config


config = get_configurations()
# --------------load configurations----------------


def remove_temp_file():
    if os.path.exists('temp.pdf'):
        os.remove('temp.pdf')


def get_html(opt, row):

    row = row.to_dict()
    file_path = os.path.join(settings.MEDIA_ROOT,
                             config["FILES"][f"HTML_FILE_NAME_{opt.upper()}"])
    return render_to_string(file_path, context=row)


def search_row_in_database(opt, value):
    df = pd.read_csv(os.path.join(settings.MEDIA_ROOT,
                                  config["FILES"]["EXCEL_FILE_NAME"]),
                     dtype=str, keep_default_na=False)
    return df[df[opt] == value]


def get_pdf(opt, row):
    html = get_html(opt, row)
    HTML(string=html).write_pdf("temp.pdf")
    f = open("temp.pdf", "rb")
    return f


def main(opt, value):

    remove_temp_file()

    row = search_row_in_database(opt, value)

    # check if a single row with that ID exists
    if len(row) == 1:
        row = row.squeeze()
        return FileResponse(
            # opt is required to choose which html pdf is to be picked up
            get_pdf(opt, row),
            as_attachment=True,
            filename=config['DOWNLOAD']['DOWNLOAD_FILE_AS'])
    # no rows with that ID found
    elif len(row) == 0:
        return HttpResponse("&lt;h1&gt;Invalid credential {opt}: {value}. "
                            "No user with that ID found&lt;/h1&gt;")
    # in case of not multiple rows with that ID
    else:
        return HttpResponse("&lt;h1&gt;Invalid credential :"
                            " Multiple candidates exists"
                            "with given credential&lt;/h1&gt;")
</code></pre>
<p>Since the html file is only created once the tag {% load numbersinwords %} should not be put like this.It should be put on creation of the html file manually. These tags can be stored in a readme.md often used with git. The user of the code should then read the readme and put the tag at the top of his html form rather than you doing it programmatically.</p>
    </div>