<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>From a once over,</p>

<p>you seem to call <code>sumofArray</code> a number of times, you should only have to call it once.</p>

<p>At the very beginning, you call it once for the entire array, results should be <code>13</code><br>
Then for position 0 (value 3), you substract <code>3</code> and get <code>3</code> and <code>10</code> ( 13 - 10)<br>
Then for position 1 (value 1). you add <code>1</code> to <code>3</code> and subtract <code>1</code> from <code>10</code> giving <code>4</code> and <code>9</code><br>
Then for position 2 (value 2), you add <code>2</code> to <code>4</code> and substract <code>2</code> from <code>9</code> giving <code>6</code> and <code>7</code><br></p>

<p>etc. ad nauseum.</p>

<p>This way you access all elements twice, if I count correctly.</p>

<p>As I mentioned in a comment, I would rename <code>arr</code> -&gt; <code>array</code></p>

<p>I am no Java expert, but JavaScript is close enough that you should be able to follow:</p>

<pre><code>var A = [3,1,2,4,3];

function sumArray( array )
{
  var sum = 0, index = array.length;
  while(index--)
    sum += array[index];
  return sum;
}

function tapeEquilibrium( array )
{
  var left = sumArray( array ),
      right = 0,
      smallest = left,
      index = array.length,
      difference;

  while( index-- )
  {
    right += array[index];
    left  -= array[index];
    difference = Math.abs( right-left );
    if( difference &lt; smallest )
      smallest = difference;      
  }
  return smallest;
}

console.log( tapeEquilibrium( A ) );
</code></pre>

<p>The added advantage is that very little extra memory is required when very large arrays need to be examined.</p>
    </div>