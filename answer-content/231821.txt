<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Before I get started with the script polishing, I just want to voice that I don't think it makes sense to bloat/hydrate your otherwise lean data storage with redundant text.  If you are planning on presenting this to the end user as a means to communicate on a "human-friendly" level, then abandon the array-like structure and write plain English sentences.</p>

<p>How can you make your code more manageable? I recommend a lookup array.  This will allow you to separate your "processing" code from your "config" code.  The processing part will be built "generally" so that it will appropriately handle incoming data based on the "specific" data in the lookup array.</p>

<p>By declaring the lookup as a constant (because it won't vary -- it doesn't need to be a variable), the lookup will enjoy a global scope.  This will benefit you if plan to write a custom function to encapsulate the processing code.  IOW, you won't need to pass the lookup into your function as an argument or use [shiver] <code>global</code>.</p>

<p>Now whenever you want to extend your error array-hydrating function to accommodate new <code>types</code>, <strong>you ONLY need to add a single line of code to the lookup</strong> (<code>ERROR_LOOKUP</code>) -- you never need to touch the processor.  In contrast, a <code>switch</code> block will require 3 new lines of code for each new allowance. This makes scaling your script much easier, cleaner, and more concise.</p>

<p>Code: (<a href="https://3v4l.org/vr83e" rel="nofollow noreferrer">Demo</a>)</p>

<pre><code>define("ERROR_LOOKUP", [
    'invalid' =&gt; '%s is not a valid %s',
    'missing' =&gt; '%s is a required %s - other functions have dependencies on it',
]);

$errors = [];
foreach ($e as $type =&gt; $subtypes) {
    if (!isset(ERROR_LOOKUP[$type])) {
        continue;
    }
    foreach ($subtypes as $subtype =&gt; $entry) {               
        foreach ($entry as $string) {
            $errors[] = sprintf(ERROR_LOOKUP[$type], $subtype, $string);
        }
    }
}
echo implode("\n", $errors);
</code></pre>

<p>Output:</p>

<pre><code>a123 is not a valid key
a456 is not a valid key
red is not a valid color
b72 is a required key - other functions have dependencies on it
blue is a required color - other functions have dependencies on it
green is a required color - other functions have dependencies on it
</code></pre>

<p>Your output strings may have static text on either/both sides of the <code>$subtype</code> value, so <code>sprintf()</code> makes the variable insertion very clean and flexible. Credit to @NigelRen for suggesting this improvement to my snippet.</p>

<p>The <code>continue</code> in the outermost loop ensures that no wasted iteration occurs on deadend array data.  No "do nothing" outcomes on inner loops. Alternatively, you could use <code>array_intersect_key()</code> to replace the conditional <code>continue</code> (<a href="https://3v4l.org/pe4G9" rel="nofollow noreferrer">Demo</a>).</p>

<p>p.s. I have a deep-seated hatred for <code>switch</code> block syntax with so many <code>break</code> lines.  This is why I often replace them with lookup arrays.</p>

<p>p.p.s. If you are writing an OOP structured script/project, see @slepic's post.</p>
    </div>