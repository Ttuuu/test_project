<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>A few observations:</p>

<ul>
<li><p>I might suggest that we want to use stored properties, like the original Objective-C code. I would be wary of using computed properties that return collections, as that can introduce non-obvious performance hits if you reference this computed property repeatedly, causing the whole array to be re-retrieved multiple times. Admittedly, this collection is small enough, it’s unlikely to be material, but it is something to be sensitive to when dealing with computed properties and collections. </p></li>
<li><p>I see no reason to store the <code>DateFormatter</code>. If you are using it for other purposes, then go ahead and do that, but there is nothing in this example that suggests that is the case.</p></li>
<li><p>I’d personally go towards a singleton, too</p></li>
</ul>

<p>Thus, perhaps something like:</p>

<pre><code>class DateInfo {
    static let shared = DateInfo()

    private(set) var shortMonthNames: [String] = []
    private(set) var longMonthNames: [String] = []
    private(set) var numberOfMonths: Int = 0

    private init() {
        NotificationCenter.default.addObserver(forName: NSLocale.currentLocaleDidChangeNotification, object: nil, queue: nil) { [weak self] _ in
            self?.update()
        }
        update()
    }

    private func update() {
        let formatter = DateFormatter()
        shortMonthNames = formatter.shortStandaloneMonthSymbols
        longMonthNames = formatter.standaloneMonthSymbols
        numberOfMonths = shortMonthNames.count
    }
}
</code></pre>

<p>And, if you have view controllers that are also observing <code>.currentLocaleDidChangeNotification</code>, you might want to eliminate any race conditions by introducing your own notification, e.g. <code>.dateInfoChanged</code>:</p>

<pre><code>extension Notification.Name {
    static let dateInfoChanged = Notification.Name(rawValue: Bundle.main.bundleIdentifier! + ".dateInfoChanged")
}
</code></pre>

<p>And then:</p>

<pre><code>class DateInfo {
    static let shared = DateInfo()

    private(set) var shortMonthNames: [String] = []
    private(set) var longMonthNames: [String] = []
    private(set) var numberOfMonths: Int = 0

    private init() {
        NotificationCenter.default.addObserver(forName: NSLocale.currentLocaleDidChangeNotification, object: nil, queue: nil) { [weak self] _ in
            self?.update()
            NotificationCenter.default.post(name: .dateInfoChanged, object: nil)
        }
        update()
    }

    private func update() {
        let formatter = DateFormatter()
        shortMonthNames = formatter.shortStandaloneMonthSymbols
        longMonthNames = formatter.standaloneMonthSymbols
        numberOfMonths = shortMonthNames.count
    }
}
</code></pre>

<p>Then view controllers can observe <code>.dateInfoChanged</code>, and you’ll be confident that they’ll be getting this month info after it was updated.</p>
    </div>