<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>One approach you could pick here is to design your data stores in Storage interfaces in an increasing fashion.</p>

<p><a href="https://i.stack.imgur.com/gtCyB.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/gtCyB.png" alt="Storage classes ordered by access time"></a></p>

<pre><code>private List&lt;Cab&gt; getCabs(Key key) {
    List&lt;Cab&gt; cabsByKey = this.cache.stream().filter(c -&gt; c.equals(key)).anyMatch();
    if (cabsByKey.isEmpty()) {
       cabsByKey = this.higherStorage.getByKey(key);
    }

    return cabsByKey;
}
</code></pre>

<p>The idea is to store its higher level cache instance for each data storage and to propagate request up whenever nothing has been found.</p>
    </div>