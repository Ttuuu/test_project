<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There're some bugs in the code. For example, if the user provides more inputs than needed, which the program could safely ignore (or warn about), it'll still exit with an error and an incorrect message.</p>

<p>The comparison should be updated to: <code>if (argc &lt; 3)</code></p>

<p>Although I think the first answer is ok, I think the readability of the code counts, and proper indentation makes a <em>huge</em> difference. You should develop this habit from the start and I'd find the following minor modifications slightly more preferable, IMHO:</p>

<pre><code>#include &lt;stdio.h&gt;
#include &lt;error.h&gt;

int main(int argc, char *argv[]) {
    /* notice the logical operator update here; prevents bogus error
       message if user provides more than 2 inputs */
    if (argc &lt; 3)
        errx(1, "Give a holiday and a name as arguments.");

    printf(
        "Happy %1$s to you.\n"
        "Happy %1$s to you.\n"
        "Happy %1$s, dear %2$s!\n"
        "Happy %1$s to you.\n",
        argv[1],
        argv[2]
    );

    return 0;
}
</code></pre>

<p>Also, I'd recommend that you get in the habit of writing user-visible messages using user-friendly terminology, especially when error conditions are detected.</p>

<p>For example, instead of saying "Give a holiday and name as arguments", which relies on programmer terminology (e.g. non-programmers are unlikely to know what "arguments" are), try to be user-friendly. Consider if the program instead said the following during the error and <em>helped</em> the user correct it:</p>

<pre class="lang-none prettyprint-override"><code>Some inputs appear to be missing. Please enter the holiday and your name.
Usage: HappyToYou &lt;holiday&gt; &lt;name&gt;
Example: HappyToYou Birthday Bob
</code></pre>

<p>Few things are more frustrating than error messages that are uninformative or wrong because the former doesn't help you resolve the issue and the latter sends the user down the wrong path in trying to find a solution.</p>
    </div>