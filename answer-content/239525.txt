<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your header guard is:</p>

<pre><code>#ifndef ANY_HPP_INCLUDED
</code></pre>

<p>The style I most commonly see in modern code is</p>

<pre><code>#ifndef INCLUDED_ANY_HPP
</code></pre>

<p>(or, just leave off the <code>_HPP</code> part). The reason is that <em>technically</em>, C and C++ reserve all uppercase names matching <code>E[A-Z].*</code> to the implementation, for macros like <code>EINVAL</code> and <code>EPERM</code>. Of course in practice your implementation won't have a macro named <code>EGG_HPP_INCLUDED</code>; but it's theoretically safer, and just as easy, to write <code>INCLUDED_EGG_HPP</code> and eliminate that consideration entirely. Names beginning with <code>I</code> aren't reserved to the implementation.</p>

<hr>

<pre><code>template &lt;typename List, typename Function&gt;
bool any(List &amp;elements, Function *callback) {
</code></pre>

<p>You should certainly pass <code>elements</code> by const reference, since you aren't planning to modify it. Consider this use-case:</p>

<pre><code>std::vector&lt;int&gt; getPrimesBetween(int, int);
bool isOdd(int);
bool b = any(getPrimesBetween(3, 100), isOdd);
</code></pre>

<p>Since <code>getPrimesBetween(3, 100)</code> is an rvalue expression, your template taking by lvalue reference won't work.</p>

<hr>

<p>Similarly, taking <code>callback</code> by pointer is weird. Take callbacks either by value (STL style) or by const reference (to avoid unnecessary copying). Consider:</p>

<pre><code>std::vector&lt;int&gt; primes;
auto isOdd = [](int x) { return x % 2 != 0; };
bool b = any(primes, isOdd);
</code></pre>

<p>This won't compile with your template, because <code>decltype(isOdd)</code> is a class type (an unnamed lambda class type) that doesn't pattern-match against <code>Function *</code>.</p>

<p>You solve this in a very strange way that is nevertheless kind of cute:</p>

<pre><code>bool b = any(primes, *isOdd);
</code></pre>

<p>What you probably <em>meant</em> to type here was <code>&amp;isOdd</code>, not <code>*isOdd</code>. However, the latter also works, because the lambda type has no <code>operator*</code>, and therefore it undergoes implicit conversion to a scalar type so it can use the built-in <code>*</code>. The only implicit conversion available is the implicit conversion to a function-pointer type. So you convert the lambda to a function pointer, dereference the pointer to get a function <em>reference</em>, and then pass that function by value to your template, which decays it back into a function pointer, which happily pattern-matches against <code>Function *</code>.</p>

<p>Observe the difference between <code>&amp;isOdd</code> and <code>*isOdd</code> here: <a href="https://godbolt.org/z/ehdbvw" rel="nofollow noreferrer">https://godbolt.org/z/ehdbvw</a></p>

<p>Specifically, <code>&amp;isOdd</code> and <code>&amp;isEven</code> have different types, but <code>*isOdd</code> and <code>*isEven</code> have the same type.</p>

<p>By taking only function pointers, you're also preventing your template from ever being used with stateful lambdas:</p>

<pre><code>auto isDivisibleBy(int n) { return [n](int x) { return x % n != 0; }; }
bool b1 = any(primes, isDivisibleBy(3));  // ERROR during deduction
auto isThreeven = isDivisibleBy(3);
bool b2 = any(primes, *isThreeven);  // ERROR no such operator
bool b3 = any(primes, &amp;isThreeven);  // ERROR during instantiation
</code></pre>

<hr>

<pre><code>    for (auto element : elements) {
</code></pre>

<p>Since you don't intend to modify the elements, you might take them by <code>const&amp;</code>; but actually you <em>should</em> take them by <code>auto&amp;&amp;</code>, because <a href="https://quuxplusone.github.io/blog/2018/12/15/autorefref-always-works/" rel="nofollow noreferrer"><code>auto&amp;&amp;</code> Always Works</a>.</p>

<hr>

<p>Putting it all together, you'd end up with something like</p>

<pre><code>template&lt;class List, class Function&gt;
bool any(const List&amp; elements, const Function&amp; callback) {
    for (auto&amp;&amp; element : elements) {
        if (callback(element)) {
            return true;
        }
    }
    return false;
}
</code></pre>

<p>Personally I might use the names <code>Range</code>, <code>Callable</code>, and <code>pred[icate]</code> in place of <code>List</code>, <code>Function</code>, and <code>callback</code>... but I guess just putting that in writing makes it pretty plain which one of us has been steeped too long in the unhealthy waters of STL jargon. :)</p>
    </div>