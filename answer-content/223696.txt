<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ol>
<li><p>While it is not quite definitive, it looks like you use <code>using namespace std;</code>.<br>
That namespace is not designed for wholesale inclusion, being vast and subject to change at the whim of the implementation, aside from providing what is standardised.<br>
Read "<a href="https://stackoverflow.com/q/1452721">Why is “using namespace std” considered bad practice?</a>" for more detail.</p></li>
<li><p>Synchronizing C++ iostreams with C stdio, as happens by default, is quite expensive. Call <a href="https://en.cppreference.com/w/cpp/io/ios_base/sync_with_stdio" rel="nofollow noreferrer"><code>std::ios_base::sync_with_stdio(false);</code></a> to fix that.</p></li>
<li><p>You should desist from using <code>std::endl</code>, as spurious manual flushing flushes any pretense at performance down the drain.<br>
For those rare cases where it is actually necessary for correctness, use <a href="https://en.cppreference.com/w/cpp/io/manip/flush" rel="nofollow noreferrer"><code>std::flush</code></a> for explicitness.</p></li>
<li><p>You assume reading from <code>std::cin</code> always succeeds. That's generally unsupportable, please handle failure gracefully.</p></li>
<li><p>You are reading character-by-character. Each and every read has significant overhead, which you could simply avoid by using <a href="https://en.cppreference.com/w/cpp/string/basic_string/getline" rel="nofollow noreferrer"><code>std::getline()</code></a>. Using the proper abstraction is also significantly more readable.</p></li>
<li><p>You are storing the input twice, once in a <code>std::queue</code> and once in a <code>std::stack</code>. Even only storing it in just one <code>std::deque</code> (the underlying implementation for both) would be a considerable improvement.</p></li>
<li><p>Consider encapsulating the test whether the input is a palindrome into its own reusable function, separate from actually <em>getting</em> it.</p></li>
<li><p>Testing whether something is a palindrome seems a favorite passtime of many beginners.<br>
Thus, <a href="https://codereview.stackexchange.com/questions/tagged/palindrome%20c%2b%2b">there are a myriad posts on how to efficiently and elegantly do that in C++</a>, for example "<em><a href="https://codereview.stackexchange.com/questions/166121/check-if-a-string-is-palindrome-or-two-strings-are-the-opposite-of-each-other">Check if a string is palindrome or two strings are the opposite of each other</a></em>".<br>
The important points are avoiding expensive copies, and only comparing each element once.</p></li>
<li><p>If you want one of two values, conditional on some expression, consider the conditional operator <code>expr ? true_expr : false_expr</code>. It is designed for that.</p></li>
<li><p><code>return 0;</code> is implicit for <code>main()</code>. Make of that what you will.</p></li>
</ol>
    </div>