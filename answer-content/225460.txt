<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>For the same PolyArea function, Priority order goes like this: </p>

<p>Order of milliseconds.</p>

<pre class="lang-py prettyprint-override"><code>
def PolyArea(urll):
        values = np.loadtxt(urll, skiprows=35,  max_rows=10)
        x = values[:,0]
        y = values[:,1]
        x = x[:5]
        y = y[:5] 
        return 0.5*np.abs(np.dot(x,np.roll(y,1))-np.dot(y,np.roll(x,1)))

df["areaAr"] =   PolyArea(df['filepath'].all())
</code></pre>

<p>The above method is fastest that I tried. Below is another with order of single digit seconds.</p>

<pre><code>def PolyArea(urll):
        values = np.loadtxt(urll, skiprows=35,  max_rows=10)
        x = values[:,0]
        y = values[:,1]
        x = x[:5]
        y = y[:5] 
        return 0.5*np.abs(np.dot(x,np.roll(y,1))-np.dot(y,np.roll(x,1)))

df["areaAr"] =  df.apply(lambda row: PolyArea(row['filepath']), axis=1)
</code></pre>

<p>Below is another moderate method. Still better than crude iteration which goes double digit. </p>

<pre><code>def PolyArea(urll):
        values = np.loadtxt(urll, skiprows=35,  max_rows=10)
        x = values[:,0]
        y = values[:,1]
        x = x[:5]
        y = y[:5] 
        return 0.5*np.abs(np.dot(x,np.roll(y,1))-np.dot(y,np.roll(x,1)))
for index,row in df.iterrows():
        areaAr.append(PolyArea(row["filepath"]))
</code></pre>

<p>Source, Medium blog: <a href="https://engineering.upside.com/a-beginners-guide-to-optimizing-pandas-code-for-speed-c09ef2c6a4d6" rel="nofollow noreferrer">https://engineering.upside.com/a-beginners-guide-to-optimizing-pandas-code-for-speed-c09ef2c6a4d6</a> 
    </p></div>