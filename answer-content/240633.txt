<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Use argparse</h2>

<p><a href="https://docs.python.org/3.8/library/argparse.html" rel="nofollow noreferrer">Argparse</a> will give you cleaner code and a friendlier CLI. It will simplify much of this blob:</p>

<pre><code>dir_name = ''
if len(sys.argv) == 2:
    dir_name = sys.argv[1]
    if not os.path.exists(dir_name):
        os.mkdir(dir_name)
path = dir_name + '/' if dir_name else ''
</code></pre>

<p>Also, for path handling and directory creation consider the use of <code>pathlib.Path</code>.</p>

<h2>write_path</h2>

<p>You're passing an URL into what you've called the <code>file</code> parameter, so that's confusing. Also, it appears that you're manually parsing that URL using <code>split</code> when you're better off using <a href="https://docs.python.org/3/library/urllib.parse.html" rel="nofollow noreferrer"><code>urllib.parse</code></a>.</p>

<h2>Ternary</h2>

<p>This:</p>

<pre><code>_ = text_list.append(txt + '\n') if len(txt) &gt; 2 and not txt.startswith(('$', '.', '@')) else 0
</code></pre>

<p>should be expanded out into a plain <code>if</code>:</p>

<pre><code>if len(txt) &gt; 2 and not txt.startswith(('$', '.', '@')):
    text_list.append(txt + '\n')
</code></pre>

<p>Similarly, this:</p>

<pre><code>    _ = [print(line, end='') for line in content]
</code></pre>

<p>is doing a comprehension and throwing away the result. Instead,</p>

<pre><code>print(''.join(content))
</code></pre>

<h2>Error handling</h2>

<pre><code>response = requests.get(page, headers={'user-agent': 'Mozilla/5.0'}, timeout=5)
if not response:
    raise Exception
</code></pre>

<p>First, never raise a base <code>Exception</code> - you want to raise something more specific. That said, in this case, replace your <code>if</code> with a <code>response.raise_for_status()</code>.</p>

<p>In a similar case,</p>

<pre><code>if '.' not in url:
    raise Exception
</code></pre>

<p>should instead be raising something like <code>ValueError(f'Malformed URL {url}')</code>. It's also odd that this is referring to the global <code>url</code> variable instead of the <code>page</code> argument. Finally: to do this kind of validation (not sure why it matters that there's a dot in the URL), you should be using <code>urllib.parse</code>.</p>

<h2>Global code</h2>

<p>Pull everything from <code>history_stack = []</code> onwards into one or more functions.</p>
    </div>