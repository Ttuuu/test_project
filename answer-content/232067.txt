<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>General</h1>

<h2>Task</h2>

<p>In my opinion you lost the focus of your task description:</p>

<blockquote>
  <p> [...]storing <strong>items</strong> into an <strong>inventory</strong>. The container is based on a grid as well as the items going into that container.</p>
</blockquote>

<p>The word <code>container</code> can easily be replaced by <code>inventory</code>:</p>

<blockquote>
  <p> [...] storing <strong>items</strong> into an <strong>inventory</strong>. The <strong>inventory</strong> is based on a <strong>grid</strong> as well as the <strong>items</strong> going into that <strong>inventory</strong>.</p>
</blockquote>

<p>The goal is to store items in an <code>Inventory</code>/<code>Container</code> but currently it stores <code>Shapes</code> instead of <code>Items</code>:</p>

<blockquote>
  <pre class="lang-java prettyprint-override"><code>public class RectangleContainer implements GridContainer {

  /* ... */
  private final Map&lt;GeoPoint, GridShape&gt; content;

  /* ... */

  @Override
  public boolean fitsInside(GridShape shape, GeoPoint location) { /* ... */ }

  /* ... */

  @Override
  public void add(GridShape shape, GeoPoint location) { /* ... */ }


}
</code></pre>
</blockquote>

<h2>What is an Item</h2>

<h3> What an Item currently is</h3>

<blockquote>
  <pre class="lang-java prettyprint-override"><code>public class RectangleItem&lt;I&gt; implements GridShape, ItemHolder&lt;I&gt; { /* ... */}
</code></pre>
</blockquote>

<p>To make it simpler to discuss:</p>

<blockquote>
  <pre class="lang-java prettyprint-override"><code>public class Item&lt;I&gt; implements Shape, ItemHolder&lt;I&gt; { /* ... */}
</code></pre>
</blockquote>

<p>Is <code>Item</code> an <code>Item</code>? When I see only the class name I would say yes, but after looking on the signature I would say: "It could be". 
From the signature it is an item that is a shape that holds an item.
Is it an item that holds an other item?</p>

<h3>What an Item should be</h3>

<p>A <code>Item</code> is something that <strong>has a</strong> <code>Shape</code>.</p>

<blockquote>
  <pre class="lang-java prettyprint-override"><code>public class Item&lt;I&gt; {

    private I value;
    private Shape shape;

    public Item(I value, Shape shape) { /* ... */ }

}
</code></pre>
</blockquote>

<p>and an <code>ìtem</code> should be packed into an inventory/container:</p>

<pre class="lang-java prettyprint-override"><code>public class RectangleContainer implements GridContainer {
    /* ... */
    @Override    public void add(Item item, GeoPoint location) {/* ... */}
}
</code></pre>

<h1>Code Smell</h1>

<h2>Feature Envy</h2>

<p>Inside <code>RectangleContainer#fitsInside(GridShape shape, GeoPoint location)</code> is the following line:</p>

<pre class="lang-java prettyprint-override"><code>Collection&lt;GeoPoint&gt; relativeShape = shape.getRelativeShape(location);
</code></pre>

<p>The <code>relativeShape</code> gets passed into <code>hasIntersection</code> and <code>isInBounds</code> of <code>RectangleContainer</code>:</p>

<blockquote>
  <pre class="lang-java prettyprint-override"><code>@Override
public boolean fitsInside(GridShape shape, GeoPoint location) {
  Collection&lt;GeoPoint&gt; relativeShape = shape.getRelativeShape(location);
  boolean hasIntersections = hasIntersection(relativeShape);
  boolean isInBounds = isInBounds(relativeShape);
  return !hasIntersections &amp;&amp; isInBounds;
}
</code></pre>
</blockquote>

<p>Because <code>RectangleContainer</code> works with the internals of <code>shape</code> (<code>relativeShape</code>) it is a <a href="https://refactoring.guru/smells/feature-envy" rel="nofollow noreferrer">feature envy</a>.</p>

<p>You could return a custom object <code>PositionedItem</code> that has the methods <code>intersectsNotInside(inventory)</code> and <code>isInBoundOf(inventory)</code>:</p>

<pre class="lang-java prettyprint-override"><code>@Override
public boolean fitsInside(Item item, GeoPoint location) {
   PositionedItem positionedItem = shape.at(location);
   return !positionedItem.intersectsNotInside(this) &amp;&amp; positionedItem.isInBoundOf(this);
}
</code></pre>

<p>The benefit will be that you will not have duplicate logic for <code>hasIntersections</code> and <code>isInBounds</code> in the different subtypes of <code>GridContainer</code>.</p>

<h1>Redundant Public</h1>

<p>In both interfaces <code>GridContainer</code> and <code>GridShape</code> you have used the key word <code>public</code>. Per default are fields in an interface are <code>public</code>.</p>

<p>Also valid java:</p>

<pre class="lang-java prettyprint-override"><code>public interface GridShape {
    boolean fitsInside(GridContainer container, GeoPoint pointer);
    Collection&lt;GeoPoint&gt; getShape();
    GeoPoint getPointer();
    Collection&lt;GeoPoint&gt; getRelativeShape(GeoPoint point);
}
</code></pre>

<h1>Everything is addable</h1>

<blockquote>
  <pre class="lang-java prettyprint-override"><code>@Override
public void add(GridShape shape, GeoPoint location) {
   content.put(location, shape);
}
</code></pre>
</blockquote>

<p>I could add a <code>shape</code>, that is 1000 times bigger as a <code>RectangleContainer</code>..</p>

<p>The adding of a <code>shape</code> should be checked so that it is not possible to at wrong shapes</p>
    </div>