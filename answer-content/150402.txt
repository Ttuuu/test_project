<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Generally speaking, unit tests should follow the <a href="http://wiki.c2.com/?ArrangeActAssert">"Arrange, Act, Assert"</a>-pattern. Yours only have the "Arrange, Act"-part. You're not asserting anything (with the exception of the one where you're expecting an exception to be thrown).</p>

<blockquote>
<pre><code>[TestMethod]
public void IsMarriedAndLessThan90Days()
{
    // Arrange
    EmployeeLeave leave = new EmployeeLeave(new SQLDatabaseService());
    // Act
    leave.ProcessLeaveRequest(DateTime.Now, 6, "", 454);
    // Assert?
}
</code></pre>
</blockquote>

<hr>

<p>Your unit tests depend on your database. You should try to avoid any external dependencies in your unit tests. </p>

<hr>

<p>Related to the point above: You're testing your functionality with existing users. If anything changes in your database (someone marries, the startdate is more than 90 days ago, ...) you have to rewrite your tests. You should explicitly construct your <code>Employees</code> in your test cases so they don't change and someone else can easily see what's going on.</p>

<hr>

<p>In my opinion your <code>EmployeeLeaveRequest</code> knows to much about how it's going to be saved. Your <code>IDatabaseService</code> interface should have methods like <code>void SaveLeaveRequest(ILeaveRequest request)</code> where you just hand over your request and let it handle all the SQL or whatever it needs to save the requests. Similar with <code>FindEmployee</code>. It should not be the responsibility of the <code>EmployeeLeaveRequest</code> to retrieve the employee record from a database.</p>
    </div>