<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Edit:</strong> Only after posting did I see that the question was tagged <code>c++14</code>. This code relies on <code>std::void_t</code> from <code>c++17</code> which is trivial to implement in <code>c++14</code>.</p>

<p>You can extract some of the functionality to a reusable <code>detect</code> type-trait that only needs to be supplied a type alias to work.</p>

<pre><code>namespace detail {

template &lt;template &lt;class...&gt; class CheckTemplate, class = void, class... Object&gt;
struct detect_impl : std::false_type {};

template &lt;template &lt;class...&gt; class CheckTemplate, class... Object&gt;
struct detect_impl&lt;CheckTemplate, std::void_t&lt;CheckTemplate&lt;Object...&gt;&gt;, Object...&gt; : std::true_type {};
}  // namespace detail

template &lt;template &lt;class...&gt; class CheckTemplate, class... Object&gt;
constexpr bool detect_v = detail::detect_impl&lt;CheckTemplate, void, Object...&gt;{};
</code></pre>

<p>With that in place all we need is to use it as such.</p>

<pre><code>template &lt;class T&gt;
using is_valid = decltype(std::declval&lt;T&gt;().method1(0, 0, 0));

template &lt;typename T&gt;
constexpr bool is_valid_v = detect_v&lt;is_valid, T&gt;;

static_assert(is_valid_v&lt;ValidType&lt;int&gt;&gt;)
</code></pre>

<p>The <code>Object</code> pack let's us make a more flexible <code>is_valid</code> that takes the argument types as parameters if we want.</p>

<pre><code>template &lt;class T, class... Args&gt;
using is_valid_flex = decltype(std::declval&lt;T&gt;().method1(std::declval&lt;Args&gt;()...));

template &lt;class... Args&gt;
constexpr bool is_valid_flex_v = detect_v&lt;is_valid, Args...&gt;;

static_assert(is_valid_flex_v&lt;ValidType&lt;int&gt;, int, int int&gt;);
</code></pre>

<p>Additional modification is possible if we want to involve the return-type of the method.</p>
    </div>