<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Most generic wrapper classes for crypto are used to <em>wrap</em> the knowledge of the user that wrote them, and this is no exception. Almost every line of cryptography in here is unfortunately below par. There is <em>no need</em> for the wrapper class <em>at all</em>, directly using the primitives is much better and will safe you from a maintainability nightmare.</p>

<p>I spend ages getting rid of my badly written wrapper classes in Java when I started crypto, inspired by the other - C++ based - wrapper <em>trash</em> written by my colleagues. I have been at this exact cross road, and I chose wrong. <strong>Do not use this as generic class in your applications</strong> unless you want to perform weeks of refactoring in the future (and that's not counting stupid bug fixes before that). </p>

<p><em>If</em> you do not listen to this advice, please at least include a version number with your resulting signatures and encryption methods so you are able to upgrade/replace with something secure later on.</p>

<p>That all said, I do admire that you posted here and I do hope you keep your code here, if just to warn others. I hope you learn a lot. Use the knowledge you learn here to create classes for <em>specific use cases</em> instead.</p>

<hr>

<p>Here is a line-by-line review for your learning experience.</p>

<pre><code>class Person private constructor(val name :String, private val keyPair: KeyPair) {
</code></pre>

<p>What does a person have to do with the private key? Is it the owner maybe? Why is it not an entity? Can't a server have a key pair?</p>

<pre><code>get() = keyPair.private ?: error("Current Person implementation doesn't support functions that use the private key")
</code></pre>

<p>How can you not have a private key in a key pair object? That doesn't make sense; just pass a public key in that case.</p>

<pre><code>fun isValid() = fromPrivateKey(name,privateKey).publicKey == publicKey
</code></pre>

<p>I don't think it is all that funny if <code>isValid</code> is correct for some unexplained reason (or not).</p>

<pre><code>return "Person(name=$name, finger=${fingerprint().substring(0,10)})"
</code></pre>

<p>Only later in the code it becomes clear that this is not a fingerprint of a person, but of the key. The 10 is a magic value, if you think that the fingerprint is smaller then you should let that be the result of the fingerprint calculation.</p>

<pre><code>val aesCipher = Cipher.getInstance("AES/CBC/PKCS5Padding")
</code></pre>

<p>Why not a modern mode such as GCM?</p>

<pre><code>val final = aesCipher.doFinal(data)
</code></pre>

<p><code>final</code> is a terrible name for a variable, why not call it, say, <code>ciphertext</code>?</p>

<pre><code>fun sign(data :ByteArray): Signature {
    sig.initSign(privateKey)
</code></pre>

<p><code>sig</code> comes falling out of the sky, and it is unclear what kind of algorithm is used.</p>

<pre><code>/** This needs to be below 245 bytes */
</code></pre>

<p>Seems to me that this depends on the key size and algorithm, both of which are undefined within the method. Better provide a helper method to retrieve the maximum size instead (<code>Cipher</code> has a helper function - <code>getOutputSize</code> - for that already). I presume you are going to write more documentation than just repeating this statement? And is this actually true for the data delivered for decryption?</p>

<pre><code>fun encrypt(data :ByteArray, publicKey: PublicKey): ByteArray {
</code></pre>

<p>Why not use <code>RSAPublicKey</code> here? That way you don't get surprise exceptions late on.</p>

<pre><code>fun fingerprint():String = DigestUtils.sha1Hex(publicKey.encoded)
</code></pre>

<p>Probably better to calculate the fingerprint over the modulus, that way the public and private key share the same fingerprint.</p>

<pre><code>val cipher = Cipher.getInstance("RSA")
</code></pre>

<p>Never relies on defaults like that. This is <code>"RSA/ECB/PKCS1Padding"</code> for the default Sun provider, but it could be another algorithm for different providers. OAEP padding should be preferred.</p>

<pre><code>fun encryptAES(data :ByteArray, publicKey : PublicKey): EncryptedData {
</code></pre>

<p>Encryption with AES that takes a public key. This is definitely <em>not</em> a good name for the function. Just <code>encrypt</code> or <code>hybridEncrypt</code> would be better. Why is the public key passed if it is part of the fields of the object?</p>

<pre><code>/** This will encrypt over 245 bytes */
</code></pre>

<p>And we're going to know in advance which method is chosen by the user I suppose? Wouldn't it also encrypt plaintext below that size?</p>

<pre><code>val iv = ByteArray(16) { -1 }
</code></pre>

<p>Minus one. Just because we ... can?</p>

<pre><code>SecureRandom.getInstanceStrong().nextBytes(iv)
</code></pre>

<p>Ah we use a strong random for the IV, which just needs to be unpredictable. Why? <code>SecureRandom</code> is strong enough. Blocking RNG's are not fun in any application.</p>

<pre><code>keyGen.init(128)
</code></pre>

<p>Not wrong, but note that you're using the default <code>SecureRandom</code> here, so the key is less strong than the IV. Not that you should change this line.</p>

<pre><code>//need to return encrypted secret key and the encrypted message
</code></pre>

<p>"returns" not "need to return" and put the comment before the actual <code>return</code> statement.</p>

<h2>On the companion object.</h2>

<p>Why is there a companion object for signature generation, but not for encryption / decryption?</p>

<pre><code>    private val sig = java.security.Signature.getInstance("SHA1WithRSA")
</code></pre>

<p>SHA1 is completely insecure for signature generation.</p>

<pre><code> private fun buildKeyPair(seed :Long): KeyPair {
</code></pre>

<p>A long is 64 bits. It is becoming easy to try 2^64 values and simply regenerate the key pair. Or one of multiple key pairs if more are available. Why is a normal random not used?</p>

<pre><code>val random = SecureRandom.getInstance("SHA1PRNG")
</code></pre>

<p>SHA1PRNG is not well defined, so this may return any kind of RNG. It may not be the best one either.</p>

<pre><code>random.setSeed(seed)
</code></pre>

<p>Oh, boy. This may either mix in the seed or make the SHA1PRNG act deterministically. The outcome depends on a lot of factors. Java platform and version just being two of them. Use this and you're already borked.</p>

<pre><code>val keySize = 2048
</code></pre>

<p>A rather small undefined, unexplained default and magic number. See keylength.com.</p>

<pre><code>return keyPairGenerator.genKeyPair()
</code></pre>

<p>I'm pretty sure that method has been deprecated eons ago.</p>

<pre><code> val spec = RSAPublicKeySpec(privateKey.modulus,privateKey.publicExponent)
</code></pre>

<p>... but I'm not sure if the <code>publicExponent</code> is always available even for CRT private keys. Let's assume it is because it seems that way in the API (?).</p>

<pre><code> fun deterministicFromName(name :String) :Person = Person(name,buildKeyPair(DigestUtils.sha1(name)!!.contentHashCode().toLong()))
</code></pre>

<p>The private key is determined by the name using a publicly known, unkeyed algorithm. Wow. Just wow. Um, I'm flabbergasted.</p>

<p>RSA key pairs <em>must</em> be generated from random <em>unless</em> you can be 100% sure that the key pair generation (including prime number generation) <em>never changes</em>. For that, you'd need to include the entire RSA key pair generation <em>and random number generation</em> in your source code, or updates of the system may break your scheme. </p>

<p>And you should of course feed it a secret value containing enough (~128 bits of) entropy rather than a public value.</p>

<hr>

<p>The signature and encryption classes are OK-ish, but remember: the idea of standardized signature and encryption algorithms is be able to communicate between runtimes. You'll have to think of some kind of serialization / protocol to do that.</p>
    </div>