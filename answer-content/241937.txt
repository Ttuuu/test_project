<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This is a nice candidate for group-by/map-reduce! </p>

<p>(we need an additional stream with map to get rid of the optional that is standard in reducing)</p>

<h2>Idea</h2>

<p>The idea is to <strong>group</strong> each <code>StudentSchedule</code> by program, <strong>map</strong> them to a small <code>ProgramEnrollment</code>, then to <strong>reduce</strong> the values of each key by merge or <em>coalesce</em> these ProgramEnrollments and finally return a list of the reduced values. </p>

<p>Note that the <code>reducing</code> requires at least one entry in the stream to prevent <code>Optional.empty()</code></p>

<p>You could even improve by returning a <code>Stream&lt;ProgramEnrollment&gt;</code>.</p>

<p>Note that it is possible to inline the <code>reductor</code> and <code>mapper</code>, but for clarity I introduced some local values.</p>

<h2>Code</h2>

<pre><code>public static List&lt;ProgramEnrollment&gt; computeProgramEnrollments() {


    Collector&lt;ProgramEnrollment, ?, Optional&lt;ProgramEnrollment&gt;&gt; reductor = Collectors.reducing(ProgramEnrollment::merge);
    Collector&lt;StudentSchedule, ?, Optional&lt;ProgramEnrollment&gt;&gt; mapper = Collectors.mapping(ProgramEnrollment::from, reductor);

    return
            schedules()
                    .sorted(Comparator.comparing(StudentSchedule::getStartDate))
                    .collect(Collectors.groupingBy(StudentSchedule::getProgram, mapper))
                    .values()
                    .stream()
                    .map(Optional::get).collect(Collectors.toList());
}
</code></pre>

<h2>Code - using toMap</h2>

<p><code>toMap</code> allows for easier reducing and helps to get rid of the <code>Optional</code>.</p>

<pre><code>public static List&lt;ProgramEnrollment&gt; computeProgramEnrollments() {

    return schedules()
            .sorted(Comparator.comparing(StudentSchedule::getStartDate))
            .collect(Collectors.toMap(StudentSchedule::getProgram,
                    ProgramEnrollment::from,
                    ProgramEnrollment::merge))
            .values()
            .stream()
            .collect(Collectors.toList());
}
</code></pre>

<p>With some additional methods here (they could also be extracted to a util / converted to static methods on <code>Main</code>) :</p>

<pre><code>static class ProgramEnrollment {
    ...

    public static ProgramEnrollment from(StudentSchedule s) {
        return new ProgramEnrollment(s.getProgram(), s.getStartDate(), s.getStopDate());
    }

    public ProgramEnrollment merge(ProgramEnrollment e) {
        LocalDate minStart = this.start == null ? e.start : e.start == null ? this.start : e.start.isBefore(this.start) ? e.start : this.start;
        LocalDate maxStop = this.stop == null ? null : e.stop == null ? null : e.stop.isAfter(this.stop) ? e.stop : this.stop;

        return new ProgramEnrollment(this.program, minStart, maxStop);
    }
}
</code></pre>
    </div>