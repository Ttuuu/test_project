<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I see a number of things that may help you improve your program.</p>

<h2>Keep writing good comments</h2>

<p>The comments for the macro and procedure headers are quite good.  They convey, in a systematic way, just what the reader needs to know.  My custom is also to add a "Trashed" section that says which registers are used and not restored.  More on that later.  One area that could be improved, however, would be to describe how registers are used in the main program.  Also, make sure the comments don't mislead -- the comments for the <code>ErrorHandler</code> macro, for instance, are incorrect.</p>

<h2>Consider using shorter lines</h2>

<p>Both the source code and the output of the code are very long -- over 200 characters.  If one has a nice wide display that's not necessarily a problem, but not every programmer is so equipped.  Many years ago, the standard was that each line should be no more than 80 characters wide because that was what fit on a printed sheet of paper.  You may elect to choose a wider line, but consider that other programmers may literally be unable to read your code if you do.</p>

<h2>Measure your program</h2>

<p>Programming in assembly language is fun and interesting for many.  That in itself is sufficient reason to write programs using it, but a program like this spends almost all of its time reading and writing data, so even if all of the processing took no time at all, the performance is going to be limited by the speed of I/O.  To check this, it's useful to measure the code, and one good way to do that is by using a profiler.  Two that are commonly used under Linux are <a href="https://sourceware.org/binutils/docs/gprof/" rel="nofollow noreferrer">gprof</a> and <a href="http://oprofile.sourceforge.net/docs/" rel="nofollow noreferrer">oprofile</a>.</p>

<h2>Fix the bug</h2>

<p>I tried the program on a 1.5Gib file and was rewarded with a system crash.  Ultimately, this is caused because of the relatively small fixed output buffer size and the way the program handles data.  At the moment, it reads the <em>entire</em> input file and attempts to create (in 64K) the entire output.  That's guaranteed to fail with even modestly sized inputs and should be fixed.  One way to do so would be to handle data line at a time.</p>

<h2>Avoid slow instructions</h2>

<p>The <code>xlat</code> instruction, as you've used it, <em>seems</em> to make sense because it does what you intend.  That is, it translates from one encoding to another using a table.  However, it's a relatively slow instruction and definitely not needed here.  What could be done instead would be to check if the value of the byte is in the range <code>0x20 .. 0x7E</code>.  If it is, print the value; otherwise print <code>'.'</code>.  This also has the consequence of eliminating the <code>PeriodXLat</code> table and easily shrinking the program by 256 bytes.</p>

<h2>Use fast instructions</h2>

<p>The padding code could be written a bit differently to use <code>rep stosb</code>.  This instruction has some optimizations built into it on some processors, making it faster than the existing code.</p>

<h2>Use small instructions</h2>

<p>Since we're writing in assembly language, it makes sense to use that to our advantage.  One way to do that is to keep the code as small as possible to help facilitate caching.  If the code is small enough to fit entirely within L1 cache, for example, (and this program is), it won't have to go back out to slower memory (L2, L3 caches and hard drive) as often.  One way to keep the code small is by using smaller instructions.  One could write, for example, </p>

<pre><code>mov rdi, 0    ; this sets edi to zero with a 5-byte instruction
xor rdi, edi  ; so does this but with a 3-byte instruction
</code></pre>

<p>The difference, however, is that the latter instruction is two bytes shorter.  It also sets the flags register (unlike a <code>mov</code>) so don't use it if you need to preserve flags.</p>

<h2>Don't save more registers than needed</h2>

<p>Most of the skill involved in assembly language programming, and especially for the x86 series processors, is in making very careful use of registers.  So while it's generally a good idea to save used registers (as your program generally does), careful use of registers while <em>avoiding</em> pushing and popping is how to make programs smaller and faster.  </p>

<h2>Use memory efficiently</h2>

<p>Right now, there is an input area and an separate output area.  If, as mentioned above, you modify the program to handle input line at a time, one can eliminate the input buffer entirely by simply reading the data into place in the output buffer and then using something like <code>ConvertControlChars</code> in-place on that data.</p>

<h2>Avoid extra processing</h2>

<p>If each output line is of the same format, we already know where the vertical bars and spaces and linefeed will be.  For that reason, I'd suggest setting all of that up in memory <em>once</em> and then reusing the buffer, only overwriting the changeable parts.</p>

<h2>Define constants before use</h2>

<p>The code currently has these lines: </p>

<pre><code>InputBuff: resb INPUTLEN
INPUTLEN: equ 32
</code></pre>

<p>However, when assembling, NASM says <code>warning: forward reference in RESx can have unpredictable results</code>.  What it means is, essentially, that you need to reverse those two lines so that the definition for <code>INPUTLEN</code> comes <em>before</em> it is used:</p>

<pre><code>INPUTLEN: equ 32
InputBuff: resb INPUTLEN
</code></pre>

<p>Even if NASM had no opinion on this, it's also nicer for a reader of the code.</p>

<h2>Consider adding an offset</h2>

<p>The dump would contain more information if each line started with the hexadecimal offset of that portion of the file.</p>

<h2>Be wary of using <code>rbp</code> as a data pointer</h2>

<p>While the use of <code>rbp</code> or <code>ebp</code> works as a data pointer in this case, it's worth remembering that the system architecture uses a segment register as well.  For most registers, such as <code>edi</code> and <code>esi</code>, that's <code>ds</code>, but for <code>ebp</code> it's <code>ss</code> unless specifically overridden.  It works here because Linux sets up the segment registers to alias to the same location, but it's not generally true in the architecture.  For this reason, it's good to at least be aware of the potential issue, and perhaps best to avoid it by not using the <code>ebp</code> register in that way if other registers are available.  Its usual use is as the stack frame pointer.</p>

<h2>Rethink error handling</h2>

<p>Ordinarily, I'm a staunch advocate for thorough error checking and handling, but this code might be something of an exception (if you'll pardon the pun).  For example, if the write to <code>stdout</code> fails, the current error handler attempts to ... write to <code>stdout</code> again with an error message.  I'd suggest either trying to write to <code>stderr</code> instead or maybe even just silently bailing out if there's an error.</p>
    </div>