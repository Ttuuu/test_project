<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Memory leak</h1>
<p>Consider this (I removed the pointless cast and identity multiplication):</p>
<blockquote>
<pre><code>    master[i] = malloc(sizeof ele);
    master[i] = ele;
</code></pre>
</blockquote>
<p>Here, we allocate memory (if <code>malloc()</code> succeeds), but then immediately overwrite our one and only pointer to it, so we're unable to ever free it.  The first assignment should just be removed, leaving only <code>master[i] = ele</code>.</p>
<h1>Another memory leak:</h1>
<blockquote>
<pre><code>printf("%s\n", smorse("sos"));
</code></pre>
</blockquote>
<p>The <code>smorse()</code> function returns a pointer to allocated memory, which we need to release when we've finished using it:</p>
<pre><code>const char *m = smorse("sos");
puts(m);
free(m);
</code></pre>
<p>(The <code>puts()</code> call is exactly equivalent to using <code>printf("%s\n", m)</code>, but more readable and possible more efficient.)</p>
<h1>Character coding assumptions</h1>
<p>The magic value <code>97</code> in a couple of places suggests that we're assuming that characters are encoded as ASCII values.  That's not a portable assumption: C permits a wide range of encodings.  Notably, EBCDIC systems do not have letters in the same positions as ASCII (or even as a contiguous block, so replacing with <code>'a'</code> doesn't solve the problem).</p>
<p>Also, there's no checking that the input to the function contains only characters that we can handle.  If we pass anything outside of the expected range, then we index <code>master</code> outside its bounds, which is Undefined Behaviour in C.  That means that the program may do anything - if we're lucky, it will simply crash, helping us to identify the problem, but there's no guarantee of that.</p>
<p>We ought to be converting more than just letters - digits have a standard Morse representation, as do certain other useful symbols.</p>
<h1>Value conversions</h1>
<p>It seems that this has been compiled with a very low level of warnings enabled.  Building with my usual compiler flags results in over a dozen warnings, most about suspect conversions.</p>
<p>To pick a couple of examples:</p>
<blockquote>
<pre><code>int end = strlen(str);
</code></pre>
</blockquote>
<p><code>strlen()</code> returns a <code>size_t</code>, which is of different signedness to <code>int</code>, and very likely to be bigger, so there's a risk of undefined behaviour here.</p>
<blockquote>
<pre><code>char *output = "";
</code></pre>
</blockquote>
<p>It's dangerous to point a modifiable pointer at constant data (a string literal is of type <code>char const*</code>).</p>
<blockquote>
<pre><code>printf("%s\n", smorse("sos"));
</code></pre>
</blockquote>
<p>Passing a string literal loses constness here - <code>smorse()</code> ought to accept pointer to <code>const</code> instead.</p>
    </div>