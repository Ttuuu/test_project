<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>We can eliminate the magic number <code>12</code> here:</p>

<blockquote>
<pre><code>/* If we have a name for this polygon, then get it from the table. */
if(numSides &lt;= 12) {
    name = names[numSides - 3];
}
</code></pre>
</blockquote>

<p>The common idiom for determining the number of elements in an array works by using the size of the array and the size of each element:</p>

<pre><code>static const int max_sides = sizeof names / sizeof *names;
</code></pre>

<p>We can eliminate the constant <code>3</code> even more easily, by including dummy (unused) elements at the beginning of the array:</p>

<pre><code>/* polygon names up to 12 sides */
const char* names[] = {
    "(point)",
    "(line)",
    "(line)",
    "a triangle",
    "a quadrilateral",
    "a pentagon",
    "a hexagon",
</code></pre>

<p>Here, I've included some descriptive strings for the invalid cases, which makes debugging easier should we accidentally use one of them.  We could save a tiny bit of program size by making them null pointers instead.</p>

<p>With those changes, the code I quoted becomes this:</p>

<pre><code>/* If we have a name for this polygon, then get it from the table. */

static const int max_sides = sizeof names / sizeof *names;

if (numSides &lt; max_sides) {
    name = names[numSides];
}
</code></pre>

<p>Or, making it constant:</p>

<pre><code>const char *const name = numSides &lt; max_sides
                         ? names[numSides]
                         : "this polygon";
</code></pre>
    </div>