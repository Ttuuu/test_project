<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>As bash scripts go, this is well done.  You've made pretty good use of bash features and the code clearly reflects time spent debugging and refining.  </p>

<p>There are two big things I would do differently: </p>

<ol>
<li>I wouldn't use bash.  As the number of code paths and lines of code increase, access to a real debugger and static syntax checking outweigh the convenience of a shell.</li>
<li>I'd separate the heavy lifting from the GUI.  A lot of the complexity and sheer bulk of this script arises from its constant jumping between performing the task and checking in with the user.  Develop a solid non-interactive tool, then build a GUI on top of it.</li>
</ol>

<p>What's done is done, though, and here are some changes I'd recommend to the code as-is:</p>

<h3>refactor the death pattern</h3>

<p>There's a lot of code like this:</p>

<pre><code>if [ -z "$DISPLAY" ];then
    notify_user "GUI failed. No DISPLAY." "error"
    exit 1
fi
</code></pre>

<p>That could be shortened by using an error-handling function:</p>

<pre><code>[ -n $DISPLAY ] || die "GUI failed. No DISPLAY."
</code></pre>

<p>This makes it easy to add cleanup or other functionality to fatal errors.  The function can be as simple as:</p>

<pre><code>die() {
    notify_user "$1" "${2:-error}"
    exit ${3:-1}
}
</code></pre>

<h3>tempfiles considered harmful</h3>

<p>Most tempfile contents are better stored in a variable.  Variables avoid all kinds of failure modes—disk full, no permission, file deleted from /tmp by cleanup job—and save you having to worry about if anyone can read the password saved in the mysql temp file.</p>

<p>The only real drawback is that you're limited by memory; variables are unsuitable for gigabytes of data. </p>

<pre><code>mysqlinit="CREATE USER '${mysqluser}'@'localhost' IDENTIFIED BY '${mysqlpwd}';
GRANT USAGE ON *.* TO '${mysqluser}'@'localhost';
CREATE DATABASE IF NOT EXISTS \`${mysqldb}\` CHARACTER SET utf8 COLLATE utf8_general_ci;
GRANT ALL PRIVILEGES ON \`${mysqldb}\`.* TO '${mysqluser}'@'localhost';
FLUSH PRIVILEGES;"
…
mysql --user="$mysqladmin" --password="$mysqladminpwd" &lt;&lt;&lt;$mysqlinit
</code></pre>

<p>If the quoting is hairy, you can <code>cat</code> a heredoc and capture with <code>$( … )</code>:</p>

<pre><code>foo=$( 
    cat &lt;&lt;EOF
…
EOF
)
</code></pre>

<h3><code>find_editor()</code> could be a lot shorter</h3>

<p>Instead of:</p>

<pre><code>find_editor() {
  local editor=${VISUAL:-$EDITOR}
  if [ "$editor" ]; then
    echo "$editor"
    return
  fi

  for cmd in nano vim vi pico; do
    if have_command "$cmd"; then
      echo "$cmd"
      return
    fi
  done
}
</code></pre>

<p>Just:</p>

<pre><code>find_editor() { 
    type -P $VISUAL $EDITOR nano vim vi pico | head -1
}
</code></pre>

<h3>refactor the "if I have" pattern</h3>

<p>Instead of:</p>

<pre><code>if have_command zenity; then
    zenity --notification --text="${prefix}$1" --window-icon="$windowicon"
    return
fi
</code></pre>

<p>How about:</p>

<pre><code>try() { 
    have_command "$1" &amp;&amp; "$@"
}
…
try zenity --notification --text="${prefix}$1" --window-icon="$windowicon" &amp;&amp; return
</code></pre>

<h3>check for errors</h3>

<p>What happens if <code>cp "${dir}/${scriptname}" "$installpath"</code> only copies half of the script before the disk fills up?  Probably nothing good.</p>

<p>Consider <code>set -e</code> to have bash terminate on error.  It's going to be a bit of work, because you'll need to mask ignorable errors (usually by adding <code>|| true</code> to the command). The benefit comes when you get to the end of the script and start doing system configuration, you know that there isn't some early error messing everything up.  </p>

<h3>some of these <code>$( )</code> invocations are weird</h3>

<p>You have a bunch of <code>$(function)</code> as the first argument on a command line, which runs the <em>output</em> of <code>function</code> as a second command.  That's hacky but kind-of okay, except <code>function</code> doesn't produce any output.  So it's just weird and it's going to break if <code>function</code> ever writes anything to stdout.</p>

<p>If you want to contain the effects of an <code>exit</code>, use plain <code>()</code> without the dollar sign.  Better yet, use <code>return</code> in the function, instead of <code>exit</code>, and omit the parens altogether.</p>

<h3>little stuff</h3>

<pre><code>$(LANG=C; validate_input "Bad subdomain" "$1" \
    "^[a-zA-Z0-9]([a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?$") || exit 1
</code></pre>

<p>A domain can't start with a digit.  If this is for internal use, consider disallowing caps (or folding them to lowercase).</p>

<p><code>&gt;&amp; /dev/null</code> is bash shorthand for <code>&gt; /dev/null 2&gt;&amp;1</code>.</p>

<p><code>args="$args --domain='${form[0]}'"</code> can be replaced by <code>args+=" --domain=${form[0]}"</code></p>

<p>Declare your read-only globals as such (<code>declare -r x=y</code>) to avoid accidentally clobbering them.</p>
    </div>