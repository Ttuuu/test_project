<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Style</h2>

<p><a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">PEP 8</a> is the official style guide for Python.  Unless you have a good reason to deviate, you should use <code>lower_case_with_underscores</code> for variable names and method names.  Terminating statements with semicolons is a faux pas in Python.  Also, indentation should be four spaces, which is a particularly important convention to follow in Python since whitespace is significant.</p>

<h1>Interface and Behavior</h1>

<p>The <code>wordDelimiter</code> and <code>lineDelimiter</code> parameters are completely ignored.</p>

<p>It's not obvious that the proper way to invoke this code is to call <code>.splitLines()</code> followed by <code>.splitWords()</code>.  It's even more surprising that <code>.splitWords()</code> prints anything at all â€” from the name of the method, I wouldn't have guessed that it would have that effect.  In contrast, my solution below makes it more obvious what the program does:</p>

<pre><code>wc, lc = StringCounter(2, 3, 3).word_and_line_counts(fileinput.input())
print("Word count = {0}".format(wc))
print("Line count = {0}".format(lc))
</code></pre>

<p>In my opinion, an input that is an empty string or that has an insufficient number of lines should not be an error.  After all, a line that contains too few words isn't an error, right?</p>

<p>Consider accepting the input as a line iterator, rather than as a string.  Python will naturally give you a line iterator if you read from a file or from <code>sys.stdin</code>.</p>

<h2>Eloquent looping and filtering</h2>

<p>In my solution below, I have defined three <a href="https://docs.python.org/3/tutorial/controlflow.html#lambda-expressions" rel="nofollow noreferrer">lambda expressions</a> to help with the iterating and counting.  Defining these three short functions helps make the code's purpose more obvious.</p>

<p>A lot of loops in Python can be written very expressively using the <code>itertools</code> module.  In particular, <a href="https://docs.python.org/3/library/itertools.html#itertools.islice" rel="nofollow noreferrer"><code>itertools.islice(<em>iterable</em>, <em>start</em>, <em>stop</em>, <em>step</em>)</code></a> will skip to every <em>n</em><sup>th</sup> element.</p>

<p>Counting can be done using the <a href="https://docs.python.org/3/library/functions.html#sum" rel="nofollow noreferrer"><code>sum()</code></a> built-in function with a <a href="https://docs.python.org/3/tutorial/classes.html#generator-expressions" rel="nofollow noreferrer">generator expression</a>.  Furthermore, you can take advantage of the fact that <code>True</code> and <code>False</code> are treated as <code>1</code> and <code>0</code>, respectively, when adding.  My <code>line_count += (matched_words &gt; 0)</code> is equivalent to your</p>

<blockquote>
<pre><code>if self.matchedWords &gt; 0:
  self.matchedLines += 1;
</code></pre>
</blockquote>

<p>My <code>sum((c in 'aeiouAEIOU') for c in word) &gt;= x</code> is equivalent to your</p>

<blockquote>
<pre><code>for i in self.words[wordCount].lower():
  if(i=='a' or i=='e' or i=='i' or i=='o' or i=='u'):
    self.matchedChars += 1;              
if self.matchedChars &gt;= self.vowelCount:
  self.matchedWords += 1;
</code></pre>
</blockquote>

<h2>Suggested solution</h2>

<pre><code>from itertools import islice

class StringCounter:
    def __init__(self, x, y, z):
        # Function that takes lines and yields every zth line
        self.candidate_lines = lambda lines: islice(lines, z - 1, None, z)

        # Function that takes one line and yields every yth word in it
        self.candidate_words = lambda line: islice(line.split(), y - 1, None, y)

        # Function that takes words and counts how many of them have &gt;= x vowels
        self.vowel_rich_words = lambda words: sum(
             sum((c in 'aeiouAEIOU') for c in word) &gt;= x
             for word in words
        )

    def word_and_line_counts(self, line_iter):
        word_count = line_count = 0
        for line in self.candidate_lines(line_iter):
            matched_words = self.vowel_rich_words(self.candidate_words(line))
            word_count += matched_words
            line_count += (matched_words &gt; 0)
        return word_count, line_count

mystring = """1.When I first brought my cat home.
 2.It cost a lot to adopt her.
 3.I paid forty dollars for it.
 4.And then I had to buy litter, a litterbox.
 5.Also bought food, and dishes for her to eat out of. 
 6.There's a **leash** law for cats in Fort **Collins**.
 7.If they're not in your yard they have to be on a leash. 
 8.Anyway, my cat is my best friend. 
 9.I'm glad I got her. 
 10.She sleeps under the covers with me when it's cold."""

wc, lc = StringCounter(2, 3, 3).word_and_line_counts(mystring.splitlines())
print("Word count = {0}".format(wc))
print("Line count = {0}".format(lc))
</code></pre>
    </div>