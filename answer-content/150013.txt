<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>When I run your code, Valgrind reports 11 allocations and a matching 11 frees, with no leaks.  So I don't see why your run indicated a non-freed block.</p>

<p>I did have to add includes for <code>&lt;cstring&gt;</code> and <code>&lt;iostream&gt;</code> to get it to compile - please don't omit your includes, even if the code is long!  Other than that, this code was complete; it's clear and easy to read.</p>

<p>Some observations:</p>

<h2>Initializers</h2>

<p><code>g++ -Weffc++</code> turns up some missing initialisers that are worth addressing.  For example:</p>

<blockquote>
<pre><code>string() : data(nullptr) {
    std::cout &lt;&lt; "Default ctor" &lt;&lt; std::endl;
}
</code></pre>
</blockquote>

<p>Would be better if it also initialized <code>m_size</code>:</p>

<pre><code>string()
    : data(nullptr),
      m_size(0)
{
    std::clog &lt;&lt; "Default ctor" &lt;&lt; std::endl;
}
</code></pre>

<p>And this one (the comment lies):</p>

<blockquote>
<pre><code>string(const char * p, size_t size) : m_size(size) { //default constructor
    std::cout &lt;&lt; "Special ctor" &lt;&lt; std::endl;
    data = new char[m_size];
    memcpy(data, p, m_size);
}
</code></pre>
</blockquote>

<p>could be</p>

<pre><code>string(const char *p, size_t size)
    : data(new char[size]),
      m_size(size)
{
    std::clog &lt;&lt; "Converting ctor" &lt;&lt; std::endl;
    std::memcpy(data, p, m_size);
}
</code></pre>

<p>I prefer one initialiser per line, as I do for assignments - but you're welcome to disagree.</p>

<h2>Constructors - general</h2>

<p>I'd add a constructor that takes a null-terminated string:</p>

<pre><code>string(const char *p) : string(p, strlen(p)) {}
</code></pre>

<h2>Assignment operator</h2>

<p>You can simplify your assignment operator using the <a href="//stackoverflow.com/a/3279550">copy and swap idiom</a>:</p>

<pre><code>friend void swap(string &amp;a, string&amp; b)
{
    using std::swap;
    swap(a.data, b.data);
    swap(a.m_size, b.m_size);
}

string&amp; operator=(string str)  {
    std::clog &lt;&lt; "Copy assignment" &lt;&lt; std::endl;
    swap(*this, str);
    return *this;
}
</code></pre>

<p>Writing it like this means that you don't need to overload it on <code>const string&amp;</code> and <code>string&amp;&amp;</code> - passing by value will construct <code>str</code> using the appropriate constructor.  See the linked answer for details.</p>

<p>Copy-and-swap does have some performance cost to gain that simplicity and safety.  See Scott Meyers's article <em><a href="https://scottmeyers.blogspot.co.uk/2014/06/the-drawbacks-of-implementing-move.html" rel="nofollow noreferrer">Drawbacks of Implementing Move Assignment in Terms of Swap</a></em> for a full explanation.  If that's a concern, then you should keep the overload for move-assignment.</p>

<h2>Append operator</h2>

<p>You use <code>strcat()</code> to append the second string to the first, but that assumes that both are null-terminated.  You need to use <code>memmove()</code> (preferably <code>memcpy</code>) for both:</p>

<pre><code>string&amp; operator+=(const string &amp; str) {
    size_t new_size = m_size + str.m_size;
    char * new_data = new char[new_size];
    memcpy(new_data, data, m_size);
    memcpy(new_data+m_size, str.data, str.m_size);
    delete[] data;
    m_size = new_size;
    data = new_data;
    return *this;
}
</code></pre>

<p>The ostream operator also depends on a trailing NUL, so here's a safe replacement:</p>

<pre><code>friend std::ostream&amp; operator&lt;&lt;(std::ostream&amp; os, const string&amp; s) {
    for (size_t i = 0;  i &lt; s.m_size;  ++i)
        os &lt;&lt; s.data[i];
    return os &lt;&lt; "\n";
}
</code></pre>

<h2>Addition operator</h2>

<p>Addition is conventionally a <code>const</code> method; I'm not very fond of casts:</p>

<pre><code>string operator+(const string &amp; str) const {
    string s{*this};
    return s += str;
}
</code></pre>

<p>You may prefer to add a constructor taking two (or more - you might employ <code>std::initializer_list</code> or C++17 fold expressions) <code>string</code> objects, to save allocating temporary space which is immediately freed and reallocated:</p>

<pre><code>public:
    string operator+(const string &amp; str) const {
        return {*this, str};
    }

private:
    string(const string&amp; a, const string&amp; b)
        : data{new char[a.m_size + b.m_size]},
          m_size{a.m_size + b.m_size}
    {
        if (a.data)
            memcpy(data, a.data, a.m_size);
        if (b.data)
            memcpy(data+a.m_size, b.data, b.m_size);
    }
</code></pre>

<p>That concatenation constructor could be more concise if you swap the order of <code>m_size</code> and <code>data</code> in the class.</p>

<h2>Tests</h2>

<p>It's great that you include the tests in the review.  It helps show how you expect your class to be used, and it helps identify tests you've missed.  In my opinion, all review requests should include tests.</p>

<p>Here I changed the initializer of <code>a</code> to not include its NUL and that of <code>b</code> to use my additional constructor:</p>

<pre><code>string a(p1,sizeof t1-1);
string b(p2);
</code></pre>

<p>I took out the assignment <code>e=d;</code> so that I could test <code>operator+()</code> with the empty string:</p>

<pre><code>std::cout &lt;&lt; "a+e:\t" &lt;&lt; a+e;
std::cout &lt;&lt; "e+e:\t" &lt;&lt; e+e;
std::cout &lt;&lt; "e+a:\t" &lt;&lt; e+a;
</code></pre>

<p>It would be worth implementing the <code>==</code> operator soon, and then you could make the tests self-checking (affecting the exit status, rather than requiring manual inspection).</p>

<h1>Output</h1>

<p>It's not necessary to stream <code>\r\n</code> to the standard streams; these are streams opened in text mode, which should do any necessary conversion of <code>\n</code> to the target platform's conventions.  The only time you're likely to need <code>\r\n</code> is when implementing Internet protocols that require the CR regardless of host platform (you should have the stream in binary mode then, so you don't get <code>\r\r\n</code>).</p>

<p>I guess that the output in the constructors is temporary, to help with debugging (though really we should be using <code>std::clog</code>, not <code>std::cout</code>).  But it causes a problem, because it prevents us marking move-construct and move-assign as <code>noexcept</code> - which they should normally be.</p>

<p>I don't know why the streaming operator is private and also writes a newline.  It should be public, and write only the string itself.</p>
    </div>