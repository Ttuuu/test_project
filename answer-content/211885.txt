<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First, <a href="https://www.youtube.com/watch?v=jsYwFizhncE" rel="noreferrer">this is an awesome video!</a> Upvoted for that reason alone. :)</p>

<blockquote>
  <p>If n=2, the program finishes within milliseconds, whereas for n=3, it takes a whopping 115 seconds.</p>
</blockquote>

<p>Do you know about <a href="https://en.wikipedia.org/wiki/Big_O_notation" rel="noreferrer">big-O notation</a>? Just off the top of my head after watching that video: for <code>n=2</code> you're computing the number of collisions for a 1kg block and a <code>100**2</code> = 10,000kg block, which we know from the video should be 314 collisions. For <code>n=3</code> you're simulating 3141 collisions. That's 10 times as many collisions, simulated one at a time, so it <em>should</em> take 10 times as long. In general your program is going to take O(10<sup>n</sup>) steps to compute its result. So you shouldn't be surprised if it gets real slow real fast.</p>

<p>However, you're saying the difference between <code>n=2</code> and <code>n=3</code> is a factor of more than 100. That's surprising. I think you're right to blame <code>Fraction</code> — that is, you're dealing with much bigger numerators and denominators in the <code>n=3</code> case, and bigger numbers naturally take more time to manipulate.</p>

<hr>

<pre><code>if(large.velocity &gt;= small.velocity &gt;= 0):
</code></pre>

<p>In general I like your use of chained comparisons... but why did you almost invariably put the biggest number on the <em>left</em> and the smallest on the <em>right</em>? That's backwards from how we usually write number lines.</p>

<p>And then sometimes you don't chain the comparison at all, for no reason I can detect:</p>

<pre><code>elif((large.velocity &gt;= 0 and small.velocity &lt; 0) or
   (small.velocity &lt;= large.velocity &lt; 0)):
</code></pre>

<p>I'd write this as</p>

<pre><code>elif (small.velocity &lt; 0 &lt;= large.velocity) or (small.velocity &lt;= large.velocity &lt; 0):
</code></pre>

<p>Notice that you don't need parens around the condition of an <code>if</code> or <code>elif</code> in Python, and so it's not usual to write them.</p>

<pre><code>return large.position/(abs(small.velocity) - large.velocity)
</code></pre>

<p>You didn't use <code>Fraction</code> here. Was that an oversight? Also, if this is a floating-point division, I <em>might</em> want to blame "repeated conversion from <code>Fraction</code> to floating-point and back" for some of your performance problems.</p>

<hr>

<pre><code>large = Block(100**int(input("Which power of 100 is the second mass? ")),
             -7, Fraction(75,10))
</code></pre>

<p>I strongly recommend moving the <code>input</code> onto its own source line. Mixing user input into the middle of an arithmetic expression is just asking for trouble. Plus, this lets you unambiguously name the <code>n</code> that you were trying to talk about in your question:</p>

<pre><code>n = int(input("Which power of 100 is the second mass? "))
large = Block(100**n, -7, Fraction(75,10))
</code></pre>

<p>Actually, hang on; back up!</p>

<pre><code># Set initial conditions: the object on the left is at rest at x = 5 and has
# unit mass. The one on the right starts off at x = 10, with velocity =
# -5 units/s and has mass equal to 100^n, where n is user-specified.
# The number of collisions should be floor(Pi*10^n). e.g. n = 2 =&gt; 314,
# n = 3 =&gt; 3141, and so on

small = Block(1, 0, Fraction(32/10))
large = Block(100**int(input("Which power of 100 is the second mass? ")),
             -7, Fraction(75,10))
</code></pre>

<p>That comment is <em>ridiculously</em> untrue! The object on the left is at rest at <code>x = 3.2</code> (or <code>x = 3</code> if you're in Python 2), and the object on the right starts off at <code>x = 7.5</code> with velocity <code>-7</code> units per second, not -5. So the comment is <em>completely</em> wrong. Besides, starting the big block with anything other than "velocity -1" is just wasting bits and CPU cycles. Who wants to multiply anything by <code>32/10</code> when you could be multiplying it by <code>1</code>?</p>

<hr>

<p>Also, all of that initial setup should be encapsulated into a <code>__main__</code> block:</p>

<pre><code>if __name__ == '__main__':
    n = int(input("Which power of 100 is the second mass? "))
    small = Block(1, 0, 1)
    large = Block(100**n, -1, 2)
    collisionCount = 0

    while True:
        t = timeToNextCollision(small, large)
        if t == float("inf"):
            # No more collisions
            break
        # Update the distances to what they'll be during the next collision
        small.position += small.velocity * t
        large.position += large.velocity * t
        # Update collision count AND velocities to post-collision values
        collisionCount = updateVelocities(small, large, collisionCount)
    print(collisionCount)
</code></pre>

<p>I changed your <code>timeToNextCollision()</code> to <code>timeToNextCollision(small, large)</code>, passing the blocks to it as parameters, since it needs to look at the blocks in order to know what to do.</p>

<hr>

<pre><code># Both blocks move towards left, but large block is faster. If the
# distance between blocks is small enough compared to that between the wall
# and the small block, they will collide. Otherwise the small block will
# reach the wall before the large block has a chance to catch up
return min(Fraction(-small.position, small.velocity),
           Fraction(large.position - small.position), 
                   (small.velocity - large.velocity))
</code></pre>

<p>I strongly recommend running your whole program through <code>pylint</code> or <code>pyflakes</code> and fixing all the style issues. Here specifically, I think it would benefit from the usual Python indentation style, which looks like this:</p>

<pre><code>return min(
    Fraction(-small.position, small.velocity),
    Fraction(large.position - small.position), 
    (small.velocity - large.velocity)
)
</code></pre>

<p>This makes it very clear that you're taking the <code>min</code> of <em>three</em> things, not the usual two — and also you're constructing a <code>Fraction</code> from <em>one</em> argument, not the usual two. If this is intentional behavior, then the indentation is important because it communicates to your reader, "Hey, I know what I'm typing, don't worry" — and if this is <em>unintentional</em> behavior, then hey, you just found one of your bugs!</p>

<hr>

<p>Finally, let's fix your performance issue.</p>

<p>As I said, I assume that your program takes so long because you're manipulating gigantic numerators and denominators. Above about <code>2**64</code> (or maybe <code>2**32</code>, I'm not sure), Python is going to switch from native integer representation to bignum representation, and get super slow. <a href="https://docs.python.org/2/library/fractions.html" rel="noreferrer">Reading the <code>fractions</code> docs</a> tells me that there's a <code>limit_denominator</code> method that's used precisely to keep the numerator and denominator small. So let's use it!</p>

<pre><code>while True:
    t = timeToNextCollision(small, large)
    if t == float("inf"):
        # No more collisions
        break
    # Update the distances to what they'll be during the next collision
    small.position += small.velocity * t
    large.position += large.velocity * t
    collisionCount = updateVelocities(collisionCount, small, large)

    # Here's the new code!
    small.position = small.position.limit_denominator(2**32)
    large.position = large.position.limit_denominator(2**32)
    small.velocity = small.velocity.limit_denominator(2**32)
    large.velocity = large.velocity.limit_denominator(2**32)
</code></pre>

<p>With just this change (and the cleanups mentioned in this review, including fixing that bug that pyflakes would have found), I see your program taking the O(10<sup>n</sup>) that we expect it to:</p>

<pre><code>$ time echo '2' | python x.py
Which power of 100 is the second mass? 314

real 0m0.240s
user 0m0.196s
sys  0m0.018s

$ time echo '3' | python x.py
Which power of 100 is the second mass? 3141

real 0m1.721s
user 0m1.697s
sys  0m0.015s

$ time echo '4' | python x.py
Which power of 100 is the second mass? 31415

real 0m22.497s
user 0m20.226s
sys  0m0.160s
</code></pre>

<p>Problem solved!</p>
    </div>