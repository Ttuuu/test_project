<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>If you don't count the "sorting of the lists" itself, you can iterate through both lists at the same time in a loop (while, not foreach) and only once which would be O(M+N) or even less: O(M+N) is a maximum, for "good sets" it can go as low as O(M) or O(N) depending on overlaps (thanks for pointing that out in the comments)</p>

<p>It's too late here for a complete code, but here's a rundown with some pseudocode (comparison methods) to show the algorithm I would use... (EDIT2: Updated the comparison and validated it against several overlapping scenarios. The "isBefore" was a bit sketchy - "end is before other end" should do the trick)</p>

<p>I still don't think there is a much faster solution... LINQ might make it more "versatile" but certainly not "more efficient" IMHO - with all that method calling in between...</p>

<pre><code>index1 = 0;
index2 = 0;

// as soon as the first list is exhausted, there can be no more overlaps
while (index1 &lt; list1.Count &amp;&amp; index2 &lt; list2.Count)
{
         // check for overlapping timeframe in either direction...
         if (list1[index1].StartTime &lt; list2[index2].EndTime &amp;&amp; 
             list1[index1].EndTime &gt; list2[index2].StartTime)
         {
              // overlaps - do whatever...
         }

         // Advance the one list that has the "older" ending time, 
         // doesn't matter whicht if both are equal.
         if (list1[index1].EndTime &lt; list2[index2].EndTime)
              index1++;
         else
              index2++;
}
</code></pre>
    </div>