<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Fast strings in Javascript</h1>
<p>It is important to note that something as simple as assigning a string to a variable will cost the length of the string in complexity <code>a = "12345"</code> will cost 5 characters. Assign to another variable and the cost is the same <code>b = a</code> will cost 5.</p>
<p>Every time you assign a string you need to count the length of that string. If you copy an array of strings then you move all the characters, not just the number of strings in the array.</p>
<p>You do a lot of string assignments in your code.</p>
<h2>Avoid string assignment</h2>
<p>The trick to handling strings is to avoid assigning strings if you can. Arrays and string array character referencing (eg <code>a = "abcdef"; b = a[1]</code>)  lets you treat the JS string like a C (<code>char *</code>) string. You dont copy the string, you are just indexing into the string.</p>
<p>The only time any sequence of characters are copied is on the return. The performance increase is very significant.</p>
<pre><code>const longestCommonPrefix = words =&gt; {
    var i, pos = 0, len = words.length;
    const char = words[0][pos];
    var min = words[0].length;
    for (i = 1; i &lt; len; i++) { // finds the min word length and check first char
        min = words[i].length &lt; min ? words[i].length : min;
        if (char !== words[i][pos] || pos === min) { return "" }
    }    
    pos ++;
    while (pos &lt; min) {  // check up to min word length.
        const char = words[0][pos];
        for (i = 1; i &lt;len; i++) {
            if (char !== words[i][pos]) { return words[0].substring(0,pos) }
        }
        pos ++;
    }
    return words[0].substring(0,pos);
}
</code></pre>
    </div>