<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>Is memory management correct? Here I assume that the caller is responsible for freeing memory.</p>
</blockquote>

<p>Yes. The allocated size needed is correct.  Proper <code>NULL</code> allocation test done.</p>

<blockquote>
  <p>Does this code conform to c code style?</p>
</blockquote>

<p><code>DecimalToRoman;</code> in .h unnecessarily exposes implementation.  Format looks similar to the C spec.</p>

<blockquote>
  <p>Does it look like idiomatic c?</p>
</blockquote>

<p>Not as much as it could.  .h file lacks any indication that the caller needs to free anything.  Consider that the .c file is opaque to the user.  A return value of <code>NULL</code> is a surprise.  Function name does not hint at allocation.  The .h lacks useful info to understated the function.</p>

<p>I see C moving more toward the caller supplying the buffer and size for such helper function.  Also with size leading the pointer.</p>

<hr>

<p>3 ideas: together to form a nifty result:</p>

<ol>
<li><p>Consider passing in the destination buffer and its size and use <code>unsigned</code>.  </p>

<pre><code>char * toRoman(size_t sz, char *dest, unsigned n);
</code></pre></li>
<li><p>Roman numbers did employ <code>()</code> or the like for <a href="https://en.wikipedia.org/wiki/Roman_numerals#Large_numbers" rel="nofollow noreferrer">large numbers</a>. <code>"N"</code> is is reasonable result for 0.</p>

<pre><code>5000 --&gt; "(V)"
0 --&gt; "N"
</code></pre></li>
<li><p>Using #2, then for a given <code>UINT_MAX</code>, there is a small, pre-determinate max size needed.</p></li>
</ol>

<p>Now the <code>resultLen</code> pre-calculation is not needed.  Just use a temp buffer of the max size and copy.  This <code>ROMAN_SZ</code> belongs in the .h file so a caller may benefit knowing the max size.</p>

<pre><code>#if UINT_MAX == â€­42949672965u
  #define ROMAN_SZ 52  /* (((III)))((DCCCLXXXVIII))(DCCCLXXXVIII)DCCCLXXXVIII */

#else if ...
</code></pre>

<hr>

<p>Putting this together</p>

<pre><code>char * toRoman(char *dest, size_t, sz, unsigned n) {
  char tmp[ROMAN_SZ];

  // Fill tmp based on `n`, no worry about overrun.

  size_t needed = strlen(tmp) + 1;
  if (needed &gt; sz) {
    Handle_error();  // could use NULL or "" to indicate error
  } else {
    return strcpy(dest, tmp);
  }
</code></pre>

<p>Now the fun part, use a macro and <em>compound literal</em>  for an <code>malloc()</code>-less <code>TO_ROMAN()</code></p>

<pre><code> #define TO_ROMAN(u) toRoman(ROMAN_SZ, (char [ROMAN_SZ]){""}, (u))
</code></pre>

<p>Code can use <code>TO_ROMAN()</code> to form a <em>string</em> that is valid to the end of the block with no <code>*alloc(), free()</code> needed.</p>

<pre><code>int main(void) {
  printf("%s %s\n", TO_ROMAN(42), TO_ROMAN(12345));
}
</code></pre>

<p>This is akin to <a href="https://stackoverflow.com/a/34641674/2410359">printing in any base</a></p>
    </div>