<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Usually Python is not terribly fast when it comes to "hand-written" loops. So my prediction (also supported by some preliminary profiling using <a href="https://docs.python.org/3/library/timeit.html" rel="nofollow noreferrer">timeit</a>, see below) would be that a "hand-written" loop is slower than the C loop used in the <a href="https://github.com/python/cpython/blob/master/Objects/setobject.c#L1238" rel="nofollow noreferrer">implementation</a> of <code>set.intersection</code>. The effect should/will become more significant for larger lists.</p>

<p>A quick non-performance related note: you can substitute <code>l[i+1:len(l)]</code> by <code>l[i+1:]</code>. This is because the end of a slice defaults to the end of the sequence.</p>

<pre class="lang-py prettyprint-override"><code>import timeit

SETUP = """
l = [10, 7, 11, 3, 5, 11]
k = 22

diff = {k-x for i, x in enumerate(l) if k != 2*x or x in l[i+1:]}
"""
print(
    sum(timeit.repeat("bool(diff.intersection(l))", setup=SETUP,
                      repeat=10, number=100000)) / 10
)
print(
    sum(timeit.repeat("bool([i for i in l if i in diff])", setup=SETUP,
                      repeat=10, number=100000)) / 10
)
</code></pre>
    </div>