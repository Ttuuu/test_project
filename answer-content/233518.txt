<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>So I had a look at your code and I got confused to what you were trying to do with find. So I had to test it out for myself. If I understand it correctly you are using it to figure out if a string contains the value you are looking for. If it does you continue processing if not you skip it. </p>

<p>However, this can be done by fetching the cell value and performing <code>InStr &lt;&gt; 0</code> to do the same thing.  </p>

<p>I wrote a quick VBA to see the performance of find in relation to InStr. The results of this was (as you can test yourself now) that the <code>.Find</code> method took aproximately 5 seconds to compute, whereas the <code>InStr</code> one finishes instantly. When running on 100000 lines it takes almost a minute to complete, whereas the <code>InStr</code> one finishes instantly. So since you perform the <code>Cells(x,y).Find</code> for 4 separate columns in thousand of files I would say that this is your main culprit for timeloss. </p>

<pre><code>Sheet1.Cells(1, 2).Value = TimeValue(Now)

For i = 0 To 10000
Dim x
Set x = Sheet1.Cells(1, 1).Find(What:="12", LookIn:=xlFormulas, _
    LookAt:=xlPart, SearchOrder:=xlByRows, SearchDirection:=xlNext, _
    MatchCase:=False, SearchFormat:=False)
    If Not x Is Nothing Then
        Sheet1.Cells(1, 4) = "Yup"
    End If
Next i
Sheet1.Cells(1, 3).Value = TimeValue(Now)
Sheet1.Cells(2, 2).Value = TimeValue(Now)
For i = 0 To 10000
Set x = Sheet1.Cells(2, 1)
    If InStr(x, "12") &lt;&gt; 0 Then
        Sheet1.Cells(2, 4) = "Yup"
    End If
Next i
Sheet1.Cells(2, 3).Value = TimeValue(Now)
</code></pre>

<p>On top of that you are running <code>Cells(x,y).Replace</code> which is about twice as slow as just setting the value of the Replace as seen below. </p>

<pre><code>wks.Cells(BlankRow, 1) = Replace(wks.Cells(BlankRow, 1),"string to remove","")
</code></pre>

<p>The methods you are running for Find and Replace are supposed to be executed on Ranges for the maximum efficiency. Say if you instead running replace on each cell one by one you execute it on the entire column straight away like this: </p>

<pre><code>wks.Columns(1).Replace What:="testtest         : ", Replacement:="", LookAt:=xlPart, _
        SearchOrder:=xlByColumns, MatchCase:=False, SearchFormat:=False, _
        ReplaceFormat:=False
</code></pre>

<p>Then you will notice that the Replace is performed in less than a second for all rows. Making it a lot faster if you have massive files. </p>
    </div>