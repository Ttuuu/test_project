<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>In your code, a comment says:</p>

<pre><code>// Time Complexity: O(N)
// Auxiliary Space Complexity: O(N)
</code></pre>

<p>For binary search trees, the complexity is usually much lower. Also, strictly speaking, you always have to define what your <code>N</code> ist. I'd rather write it as:</p>

<pre><code>// Time complexity: O(log(size))
// Auxiliary space complexity: O(1)
</code></pre>

<p>A single <code>insert</code> call needs either 0 or 1 new node. Therefore, the space complexity is constant.</p>

<p>The average time complexity is <span class="math-container">\$\mathcal O(\log(\textit{size}))\$</span> since typical binary trees split into two halves that have about the same size. There are corner cases (like inserting a sorted sequence) where the binary tree has only one of the branches (left or right) filled; in that case the time complexity is <span class="math-container">\$\mathcal O(\textit{size})\$</span>.</p>

<p>To avoid this worst-case complexity, you can later refine your class to implement a <a href="https://en.wikipedia.org/wiki/Self-balancing_binary_search_tree" rel="nofollow noreferrer">self-balancing binary search tree</a>.</p>
    </div>