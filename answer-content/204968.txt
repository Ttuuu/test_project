<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><em>I wrote this a few hours; hopefully I've removed everything that was overlapping too much with the other answers</em></p>

<h2><code>Add(Bitmap bitmap)</code></h2>

<p>I also really don't like this, and not just because it's inefficient:</p>



<pre class="lang-cs prettyprint-override"><code>images.Where(item =&gt; item.Value == null).FirstOrDefault().Key;
</code></pre>

<p>It took me a short while to release why this won't crash (because everything happens to be a <code>struct</code> here with a convenient default value), and it heavily obscures the intention. I'd be inclined to stuff this logic in a well-named method; or rather, see the other answers for a better idea (store recycled ids separately: then you can get rid of those annoying nulls you have to keep checking for; personally I'd use a <code>ConcurrentStack</code> rather than a <code>ConcurrentQueue</code> or linked-list).</p>

<p>I'd like to second Peter Taylor's suggestion that you move <code>currentId = 0</code> to <code>ReleaseAllImages</code>: it will remove the extra check and code-duplication in <code>Add</code>, and hopefully encourage <code>id</code> somewhere tighter in the logic, so that it isn't sitting around with a made-up-meaningful value waiting to be returned by accident.</p>

<h2>Threading</h2>

<p>The combination of <code>lock</code>s and <code>ConcurrentDictionary</code> looks like it should be safe. (though not immediately obvious, I think the <code>ConcurrentDictionary</code> is necessary for this implementation of <code>ReleaseAllImages()</code> because it relies on the specific enumerator - which doesn't complain when you change things - rather than anything threading related)</p>

<p>There is no reason to use <code>Interlocked.Increment</code> on <code>currentId</code>, as the locks already imply a memory barrier, but I guess it probably doesn't do any harm.</p>

<p>The lock names are not very helpful. Maybe change <code>addImageLock</code> to <code>addAndRemoveLock</code> (it stops you trying to add/remove from the dictionary at the same time), and <code>removeImageLock</code> to <code>readLock</code> (it stops you reading elements from the dictionary simultaneously).</p>

<p>You could also replace both with a single <code>ReaderWriterLock</code>, as already said in CharlesNRice's answer. The main benefit would be the opportunity for concurrent calls to <code>GetImage</code>, which may be long-running and potentially CPU-intensive (but then again, might just ruin your memory characteristics).</p>

<h2>API</h2>

<ul>
<li><p>It's not clear to the consumer whose job it is to dispose the <code>Bitmap</code> objects. The external API talks about 'images': a consumer could be forgiven for thinking that the cache simply holds bitmaps and disposes them when they are 'released'. This needs documenting... somehow.</p></li>
<li><p>There is no logic to defend against looking up an already released <code>Id</code> (a big problem with simple id recycling like this, rather than using managed (object) handles)</p></li>
<li><p>I don't understand why this is static... <code>ReleaseAll</code> might make sense only for a subset of the images cached by a process, so I'd sooner this was not static. If it is to mimic an existing static API, then just throw a static instance down somewhere, and everyone will be happy.</p></li>
<li><p>I like that <code>0</code> is not a valid id; it's such a common made-up-meaningful value that making it crash violently would make me even more happy.</p></li>
</ul>

<h2>Misc</h2>

<ul>
<li><p>Nice to see inline doc on the public members, thought it could be more comprehensive: <code>GetBitmap</code>, for example, fails to mention that it will return <code>null</code> if the image is not-found (or indeed <code>0</code>).</p></li>
<li><p>You're a bit inconsistent with your <code>if (images.TryGetValue(id, out ms) &amp;&amp; ms != null)</code> checks; it would be better if they all looked the same.</p></li>
</ul>
    </div>