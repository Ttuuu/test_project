<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Using a template variable in the script means you have this script in the HTML document and repeat it for each owl carousel. That is a vary bad idea, mostly because that way you may have multiple functions with the same name. </p>

<p>Generally your HTML shouldn't "know about" (reference) your JavaScript. Instead the JavaScript should find the elements it wants to attach itself to.</p>

<p>Put the function in a separate script file (together with all of your other scripts, wrapped in an <a href="https://stackoverflow.com/questions/8228281/what-is-the-function-construct-in-javascript">IIFE</a>) and include it once with <code>&lt;script src="..."&gt;</code> at the end of the HTML.</p>

<p>Then place a class on all owl carousels you want to apply the function to and use that to call the script for all and any elements with this class. For example, with jQuery:</p>

<pre><code>(function() {

    $('.owl-carousel--adjust-height').each(function () {
        _AdjustHeightOwlDots($(this));
    };

    function _AdjustHeightOwlDots(owlCarousel) {
        // ...
     }

})();
</code></pre>

<p>Now, inside "find" the sub elements (and save references to avoid duplicate queries of the same elements):</p>

<pre><code>const dots = owlCarousel.find('.owl-dots');
const dotRowWidth = dots.width();
const amountOfDots = dots[0].childElementCount;
const dotButtons = dots.find('&gt; button');
const singleDotWidth = dotButtons.width();
</code></pre>

<p>(You learn new things every day. Never heard of <code>childElementCount</code> before this - and it's not even a new thing.)</p>

<p>In <code>setNewStyle</code> the query is also repeated and can be replaced with chaining (or the alternative syntax for <code>.css()</code> using an object) and also can be moved outside the function:</p>

<pre><code>const dotButtonSpans = dotButtons.find('&gt; span');

const setNewStyle = function(hw, margin) {
    dotButtonSpans
        .css('width', `${hw}px`)
        .css('height', `${hw}px`)
        .css('margin', `5px ${margin}px`);
}
</code></pre>

<p>Or</p>

<pre><code>const setNewStyle = function(hw, margin) {
    dotButtonSpans.css({
        width: `${hw}px`, 
        height: `${hw}px`, 
        margin: `5px ${margin}px`
    });
}
</code></pre>

<p>Finally the big if block can be replaced with a simple calculation (including removing the part that makes <code>maxDotWidth</code> even, instead using <code>| 0</code> as a short cut to round numbers to integers):</p>

<pre><code>const size = ((maxDotWidth / 4) | 0) + 1;
const margin = maxDotWidth &lt; 2 ? 1 : (((maxDotWidth - 2) / 4) | 0) + 1;

setNewStyle(size , margin);
</code></pre>
    </div>