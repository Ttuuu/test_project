<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First, get the width of each column.  This can be easily done with a list comprehension:</p>
<pre><code>    width = [max(len(item) for item in column) for column in tableData]
</code></pre>
<p>Where <code>max(len(item) for item in column)</code> gets the maximum length of an item in the column.  And the <code>[ ... for column in tableData]</code> repeats it for each column.</p>
<p>Then build a format string to format each row in the desired format.</p>
<pre><code>    fmt = ' '.join(f"{{:&gt;{w}}}" for w in width)
</code></pre>
<p>Where <code>f"{{:&gt;{w}}}"</code> is a f-string expression.  Double braces get replaced by single braces and <code>{w}</code> gets replace by the value of w.  For example, with <code>w = 8</code> the f-string evaluates to <code>"{:&gt;8}"</code>.  This corresponds to a format to right justify (the <code>&gt;</code>) in a field of width 8.  A separate string is created for each column, which are joined by a space (' ').  In the example table, width = [8, 5, 5], so fmt is <code>"{:&gt;8} {:&gt;5} {:&gt;5}"</code>.</p>
<p>Lastly, print each row of the table using the format.</p>
<pre><code>    for row in zip(*tableData):
        print(fmt.format(*row))
</code></pre>
<p>Where <code>for row in zip(*tableData)</code> is a Python idiom for iterating over the rows when you have a list of columns.</p>
<p>Putting it together:</p>
<pre><code>def print_table(table_data):
    width = [max(len(item) for item in col) for col in tableData]

    fmt = ' '.join(f"{{:&gt;{w}}}" for w in width)

    for row in zip(*tableData):
        print(fmt.format(*row))
</code></pre>
    </div>