<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Performance</h2>

<p>I tried optimizing it all I could, but it seams calls to <code>random.next()</code> really clog things up :(</p>

<p>Ideas:</p>

<ul>
<li>Because there are only ~18M valid items, and because 18M &lt; Integer.MAX, we can store them in an array, using the index as ordinal</li>
<li>Because  <code>40^7</code> &lt; Long.MAX, we can store a ticket in a <code>long</code></li>
<li>We can use binary search on the ordered array of primitive <code>long</code>s. Because it is only 18M long, we have a maximum of 25 comparisons to find the index. (or not, if it is not contained). I think a tree might be faster, but if you do not use primitives, you will loose speed in auto-boxing and referencing.</li>
</ul>

<h2>Source</h2>

<pre><code>import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Random;
import java.util.stream.IntStream;

public class FastLottery {

    private static final int LOTTERY_ROW_LENGTH = 7;
    private static final int LOTTERY_MAXIMUM_NUMBER = 40;
    private static final int LOTTERY_ROWS = 40_000_000;
    private static final int OPTIONS = 18643560;


    /* arr[]  ---&gt; Input Array
       data[] ---&gt; Temporary array to store current combination
       start &amp; end ---&gt; Staring and Ending indexes in arr[]
       index  ---&gt; Current index in data[]
       r ---&gt; Size of a combination to be printed */
    public static List&lt;int[]&gt; combinationsUtil(int arr[], int data[], int start,
                                               int end, int index, int r)
    {
        List&lt;int[]&gt; results = new ArrayList&lt;&gt;();

        // Current combination is ready to be printed, print it
        if (index == r)
        {
            int[] result = new int[data.length];
            System.arraycopy(data,0, result,0, data.length);
            results.add(result);
            return results;
        }

        // replace index with all possible elements. The condition
        // "end-i+1 &gt;= r-index" makes sure that including one element
        // at index will make a combination with remaining elements
        // at remaining positions
        for (int i=start; i&lt;=end &amp;&amp; end-i+1 &gt;= r-index; i++)
        {
            data[index] = arr[i];
            results.addAll(combinationsUtil(arr, data, i+1, end, index+1, r));
        }
        return results;
    }

    // The main function that gets all combinations of size r
    // in arr[] of size n. This function mainly uses combinationUtil()
    public static List&lt;int[]&gt; getAllCombinations(int[] arr, int n, int r)
    {
        return combinationsUtil(arr, new int[r], 0, n-1, 0, r);
    }

    public static long toLong(int[] ticket)
    {
        long l=0;
        for (int i=0; i&lt;LOTTERY_ROW_LENGTH; i++)
        {
            l*=LOTTERY_MAXIMUM_NUMBER;
            l+=ticket[i];
        }
        return l;
    }
    public static int[] fromLong(long l)
    {
        int[] result = new int[LOTTERY_ROW_LENGTH];
        for (int i=LOTTERY_ROW_LENGTH-1; i&gt;=0; i--)
        {
            result[i] = (int) (((l % LOTTERY_MAXIMUM_NUMBER) + LOTTERY_MAXIMUM_NUMBER) % LOTTERY_MAXIMUM_NUMBER);
            l/=LOTTERY_MAXIMUM_NUMBER;
        }
        return result;
    }

    private static long[] generateTicketArray(List&lt;int[]&gt; allTickets) {
        System.out.println("Initializing arrays");
        long[] longTickets = new long[OPTIONS];
        for (int i=0; i&lt;OPTIONS; i++) {
            int[] tic = allTickets.get(i);
            //System.out.println("Generating ticket:" + Arrays.toString(tic));

            long ticket = toLong(tic);
            longTickets[i] = ticket;
            //System.out.println("Generating ticket:" + longTickets[i]);
        }
        //Because the allTickets and toLong keep correct order, we don't need to sort :)

        return longTickets;
    }

    private static List&lt;int[]&gt; generateAllTickets() {
        System.out.println("Generating all options");

        int arr[] = IntStream.rangeClosed(1,LOTTERY_MAXIMUM_NUMBER).toArray();
        int r = 7;
        int n = arr.length;

        List&lt;int[]&gt; allTickets = new ArrayList&lt;int[]&gt;();
        allTickets = getAllCombinations(arr, n, r);
        return allTickets;
    }

    public static void main (String[] args) {

        Random random = new Random();

        //generate all valid tickets
        List&lt;int[]&gt; allTickets = generateAllTickets();


        long[] longTickets = generateTicketArray(allTickets);
        boolean[] soldTickets = new boolean[longTickets.length];

        System.out.println("Picking random tickets");

        for (int i=0; i&lt;LOTTERY_ROWS; i++)
        {
            long randomTicket = toLong(allTickets.get(random.nextInt(OPTIONS)));
//           long randomTicket = toLong(allTickets.get(i % OPTIONS));

            //Use binary search on the sorted long array
            int index = Arrays.binarySearch(longTickets, randomTicket);

            //If we have a valid index; mark the index as SOLD
            if (index&gt;=0)
            {
                soldTickets[index] = true;
            }
            if (i%1_000_000 ==0)
            System.out.println("Picking random tickets, " + i);
        }

        System.out.println("Printing evil tickets");
        int evilTickets = 0;
        for (int i=0; i&lt;OPTIONS; i++)
        {

            if (soldTickets[i] == false)
            {
                evilTickets++;
                //System.out.println("Evil ticket:" + Arrays.toString(fromLong(longTickets[i])));
            }
        }
        System.out.println("We have # Evil tickets:" + evilTickets);
    }



}
</code></pre>
    </div>