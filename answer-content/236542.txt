<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I have some suggestion for you.</p>
<h1><code>ND2_Task1</code> class</h1>
<p>Instead of adding comment near the methods calls, I suggest that you rename the method to a name that explains what it's doing and remove the comment. Also, most of the method that has parameters can be refactored to use the internal reference of the variable.</p>
<p>The best way to do this, is to think the <code>ND2_Task1_Core</code> class as a container that doesnâ€™t expose the variables with getter or setters, but instead have methods to handle the data directly, so the <code>ND2_Task1</code> class can use them.</p>
<h2><code>getInput</code> Method</h2>
<p>I suggest that you rename this method to <code>askAndStoreUserSentenceInput</code> and remove the comment.</p>
<pre class="lang-java prettyprint-override"><code>public class ND2_Task1 {
   public static void main(String[] args) {
      //[...]
      ND2_Task1_Core run = new ND2_Task1_Core();
      run.askAndStoreUserSentenceInput();
      //[...]
   }
}
</code></pre>
<h2><code>getWordCount</code> method</h2>
<p>This method is more than a getter, since it updates the <code>wordCount</code>; the name can be confusing, I suggest <code>updateWordCount</code>.</p>
<pre class="lang-java prettyprint-override"><code>public class ND2_Task1 {
   public static void main(String[] args) {
      //[...]
      ND2_Task1_Core run = new ND2_Task1_Core();
      run.updateWordCount();
      //[...]
   }
}
        
</code></pre>
<h2><code>checkValidity</code> method</h2>
<p>Same for other methods, you can remove the parameter and uses the local variable.</p>
<pre class="lang-java prettyprint-override"><code>public class ND2_Task1 {
   public static void main(String[] args) {
      //[...]
      ND2_Task1_Core run = new ND2_Task1_Core();
      run.checkValidity();
      //[...]
   }
}

public class ND2_Task1_Core {
   //[...]
   public void checkValidity() {
      if (wordCount &lt; 2) {
         System.out.println("You have entered an insufficient number of words. Enter at least 2 words for program to swap them");
         System.out.println("Exiting now");
         System.exit(0);
      }
   }
   //[...]
}
</code></pre>
<h2><code>toArray</code> method</h2>
<p>In my opinion, the name is confusing; since it does more than convert to an array (also set the result).</p>
<p>Personally, I suggest that you make a new method called <code>convertUserSentence</code> in the class <code>ND2_Task1_Core</code> that handle the logic.</p>
<p><strong>ND2_Task1</strong></p>
<pre class="lang-java prettyprint-override"><code>public class ND2_Task1 {
   public static void main(String[] args) {
      //[...]
      run.convertUserSentence();
      //[...]
   }
}
</code></pre>
<p><strong>ND2_Task1_Core</strong></p>
<pre class="lang-java prettyprint-override"><code>public class ND2_Task1_Core {
  //[...]
   public void convertUserSentence() {
      String userSentence = getUserSentence();
      setSeperatedSentence(userSentence.split(" "));
   }
   //[...]
}
</code></pre>
<h2><code>reverseArray</code> method</h2>
<p>You can remove the parameter and uses the local variable and rename the name to <code>reverseSentenceArray</code>.</p>
<p><strong>ND2_Task1</strong></p>
<pre class="lang-java prettyprint-override"><code>public class ND2_Task1 {
   public static void main(String[] args) {
      //[...]
      run.reverseSentenceArray();
      //[...]
   }
}
</code></pre>
<p><strong>ND2_Task1_Core</strong></p>
<pre class="lang-java prettyprint-override"><code>public class ND2_Task1_Core {
   //[...]
   public void reverseSentenceArray() {
      for (int i = 0; i &lt; reversedSentence.length / 2; i++) {
         String temp = reversedSentence[i];
         reversedSentence[i] = reversedSentence[reversedSentence.length - i - 1];
         reversedSentence[reversedSentence.length - 1 - i] = temp;
      }
   }
   //[...]
}
</code></pre>
<h2><code>showResult</code> method</h2>
<p><strong>ND2_Task1</strong></p>
<pre class="lang-java prettyprint-override"><code>public class ND2_Task1 {
   public static void main(String[] args) {
      //[...]
      run.showResult();
      //[...]
   }
}
</code></pre>
<p><strong>ND2_Task1_Core</strong></p>
<pre class="lang-java prettyprint-override"><code>public class ND2_Task1_Core {
   //[...]
   public void showResult() {
      System.out.println(Arrays.toString(reversedSentence));
   }
   //[...]
}
</code></pre>
<h1><code>ND2_Task1_Core</code> class</h1>
<ol>
<li>The use of the <code>static</code> keyword on the variables is useless in this case, since you have only one instance of the class <code>ND2_Task1_Core</code>. The <code>static</code> is used to share the same value over all the instances of the same class.</li>
</ol>
<pre class="lang-java prettyprint-override"><code>//[...]
private String userSentence;
private int wordCount;
private String[] seperatedSentence;
private String[] reversedSentence;
//[...]
</code></pre>
<ol start="2">
<li>Instead of creating a new instance of the <code>Scanner</code> each time you call the <code>getInput</code> method, I suggest that you store it in a variable.</li>
</ol>
<pre class="lang-java prettyprint-override"><code>public class ND2_Task1_Core {
   private Scanner scanner;

   public ND2_Task1_Core() {
      scanner = new Scanner(System.in);
   }

   public void getInput() {
      System.out.println("Please enter a sentence.\nFirst word will be swapped with the last one.\nSecond word will be swapped with second to last\netc.");
      setUserSentence(scanner.nextLine());
   }
}
</code></pre>
<h1>Refactored code</h1>
<p><strong>ND2_Task1</strong></p>
<pre class="lang-java prettyprint-override"><code>public class ND2_Task1 {
   public static void main(String[] args) {
      ND2_Task1_Core run = new ND2_Task1_Core();
      run.askAndStoreUserSentenceInput();
      run.updateWordCount();
      run.checkValidity();
      run.convertUserSentence();
      run.reverseSentenceArray();
      run.showResult();
   }
}
</code></pre>
<p><strong>ND2_Task1_Core</strong></p>
<pre class="lang-java prettyprint-override"><code>public class ND2_Task1_Core {
   private String userSentence;
   private int wordCount;
   private String[] seperatedSentence;
   private String[] reversedSentence;
   private Scanner scanner;

   public ND2_Task1_Core() {
      scanner = new Scanner(System.in);
   }

   public void askAndStoreUserSentenceInput() {
      System.out.println("Please enter a sentence.\nFirst word will be swapped with the last one.\nSecond word will be swapped with second to last\netc.");
      setUserSentence(scanner.nextLine());
   }

   public void updateWordCount() {
      wordCount = 1;
      for (int i = 0; i &lt; userSentence.length(); i++) {
         if (userSentence.charAt(i) == ' ') {
            wordCount++;
         }
      }
   }

   public void checkValidity() {
      if (wordCount &lt; 2) {
         System.out.println("You have entered an insufficient number of words. Enter at least 2 words for program to swap them");
         System.out.println("Exiting now");
         System.exit(0);
      }
   }

   public void reverseSentenceArray() {
      for (int i = 0; i &lt; reversedSentence.length / 2; i++) {
         String temp = reversedSentence[i];
         reversedSentence[i] = reversedSentence[reversedSentence.length - i - 1];
         reversedSentence[reversedSentence.length - 1 - i] = temp;
      }
   }

   public void showResult() {
      System.out.println(Arrays.toString(reversedSentence));
   }

   public String getUserSentence() {
      return userSentence;
   }

   public void setUserSentence(String userSentence) {
      this.userSentence = userSentence;
   }

   public String[] getSeperatedSentence() {
      return seperatedSentence;
   }

   public void setSeperatedSentence(String[] seperatedSentence) {
      this.seperatedSentence = seperatedSentence;
   }

   public int getWordCount() {
      return wordCount;
   }

   public void setWordCount(int wordCount) {
      this.wordCount = wordCount;
   }

   public void convertUserSentence() {
      String userSentence = getUserSentence();
      setSeperatedSentence(userSentence.split(" "));
   }
}
</code></pre>
    </div>