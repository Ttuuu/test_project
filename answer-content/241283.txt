<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Preface:</p>

<p>Next time you post code, please include the <code>#include</code>s.  It is easier to review if reviewers can simply copy the code and compile it.  In the same vein, it's helpful if you include any special compiler flags and a test case.  Here is the code as I am reviewing it: <a href="https://godbolt.org/z/zQ5mH3" rel="nofollow noreferrer">https://godbolt.org/z/zQ5mH3</a>.</p>

<p>Review:</p>

<ol>
<li><p>You don't write <code>std::</code> before STL classes so I assume you are <code>using namespace std;</code>.  Many have written about why this is a bad idea so I won't repeat it here, but note it's especially bad in headers (.h files).  It's a less bad in implementations (.cpp files).  You haven't split out your code into a header/implementation, so anyone who <code>#include</code>s your code will also be forced to use namespace std... which is not good.</p></li>
<li><p>You use a <code>map&lt;char, vector&lt;char&gt;&gt;</code> to find possible letters from digits.  I think this is OK in cold code/as a mockup implementation while you figure out the rest of your code.  But this is a waste of time/memory in hot code because:</p>

<ul>
<li><p>the map is known at compile time</p></li>
<li><p>there is no reason to allocate/deallocate anything, and map/vector can both use the heap</p></li>
</ul></li>
</ol>

<p>Using a function that returns <code>initializer_list&lt;char&gt;</code> instead of a <code>map</code> to <code>vector</code>s speeds up your function 1.6 times (<a href="http://quick-bench.com/eYwFgmzQmT95dOsLSRH35FT4QAI" rel="nofollow noreferrer">http://quick-bench.com/eYwFgmzQmT95dOsLSRH35FT4QAI</a>).  In case you don't already know, <code>initializer_list</code> is a lightweight data-structure that can be iterated but will not allocate/deallocate memory.  Note that in order to safely return <code>initializer_list</code>, you need to make the list <code>static</code> and might as well make it <code>constexpr</code>.</p>

<ol start="4">
<li><p>Your Solution class passes a lot of state in each recursive call.  This call happens many times, so you should try to make it cheap.  For starters you could pass the constant strings by <code>const&amp;</code> to avoid unnecessary copies (this is a 1.9x speed up from the original).  But you could also opt to make the string, result, and digits member variables and then only pass the index in the recursive calls.  This has a few advantages:</p>

<ul>
<li><p>Your recursive calls will only have a <code>this</code> pointer and an index (so the arguments will fit in almost every cache line).</p></li>
<li><p>It becomes natural to use the same strings the whole time and only copy when producing the result as opposed to the way it was originally written with <code>s + string({c})</code> which does a heap allocation (at least with <code>std::string</code> and GCC 10).</p></li>
</ul></li>
</ol>

<p>The simpler recursive calls + the functional map results in a 3.3x speedup compared to the original implementation.  The recursive function now looks like:</p>

<pre><code>void letter_combination_helper(int i) {
  if (i == m_digits.size()) {
    m_result.push_back(m_string);
    return;
  }

  for (char c : lettermap(m_digits[i])) {
    m_string.push_back(c);
    letter_combination_helper(i + 1);
    m_string.pop_back();
  }
}
</code></pre>

<p>... where I have prefixed the member variables with "m_" for clarity, and <code>lettermap</code> is a function returning <code>initializer_list&lt;char&gt;</code>.</p>

<ol start="5">
<li><p>Minor nit: It's nice to use camelCase or snake_case but not both.</p></li>
<li><p>Minor nit 2: I think the indentation of the code you posted is weird e.g. <code>construct_num_letter_map</code>'s open bracket is indented but the closing bracket isn't.  This weirdness might have been introduced when you pasted your code into the question, so I won't expand on this.</p></li>
</ol>

<p>I think if you make these changes you will have some fast and elegant code.  The general algorithm is the same -- I think you got that right from the start which is good.  I believe the algorithm is optimal since you need <code>O(pow(len(digits), 4))</code> space to store the result vector, and it seems reasonable to spend that much time writing the answer down.</p>

<p>If I had to summarize the comments into one morsel of feedback, it would be to think more carefully about which operations need to use memory (i.e. allocate/deallocate/copy/dereference).  This was the issue with <code>map</code> (it has to dereference a lot to do lookups) and also with passing lots of state in the recursive calls (lots of copying).  The general rule of thumb is that memory is slow, and if you can reasonably avoid it, then you should.  If you keep at it, this will become second nature to you. </p>
    </div>