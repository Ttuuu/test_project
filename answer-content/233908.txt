<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I will review your code from top to bottom.  </p>

<pre><code>private string idnumber;  
</code></pre>

<p>this should be named using <code>camelCase</code> casing and because you don't change its value you should make it <code>readonly</code> which means you can only assign a value to it inside the constructor or by initialising like e.g <code>private string idnumber = "somevalue";</code>. Because you set this value only inside the <code>implicit</code> operator you should add a <code>private</code> constructor which has a <code>string</code> as argument. This would then look like this  </p>

<pre><code>public class IdNumber
{
    private readonly string idNumber;
    private IdNumber(string idNumber)
    {
        this.idNumber = idNumber;
    }
</code></pre>

<p>Because the <code>implicit</code> operator is <code>public</code> you should validate the argument <code>value</code> wether it is <code>null</code>. It just looks better to throw an <code>ArgumentNullException</code> than to receive an <code>NullReferenceException</code>. </p>

<p>Instead of using <code>value.All(c =&gt; IsDigit(c) || IsLowercaseLetter(c))</code> you could use a simple <code>Regex</code> to do the validation for you. This will shorten your code because the two methods <code>IsDigit()</code> and <code>IsLowercaseLetter()</code> won't be needed anymore.  </p>

<p>The <code>implicit</code> operator would then look like this  </p>

<pre><code>public static implicit operator IdNumber(string value)
{
    if (value is null) { throw new ArgumentNullException(nameof(value)); }

    if (Regex.IsMatch(value, "[0-9a-z]{10}"))
    {
        return new IdNumber(value);
    }
    throw new ArgumentException("id numer must have length 10 and must only have digits and lower case-letters");
}
</code></pre>

<p><code>ToString()</code> and <code>GetHashCode()</code> are both fine but in the <code>Equals()</code> method you can either just remove the <code>else</code> like so  </p>

<pre><code>public override bool Equals(object obj)
{
    if(obj is IdNumber other)
    {
        return this.idNumber == other.idNumber;
    }

    return false;
}  
</code></pre>

<p>or combine the <code>if</code> condition with the idNumber comparision like so  </p>

<pre><code>public override bool Equals(object obj)
{
    return (obj is IdNumber other) 
        &amp;&amp; this.idNumber == other.idNumber;
}
</code></pre>
    </div>