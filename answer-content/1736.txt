<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>That design will work well for multiple renderers - when you stated in the comment that you would it made much more sense. You should remove the static <code>Depth</code> variable though - it makes your code not thread-safe. Also, you can reduce the number of overloads. Here's a way to refactor your renderer:</p>

<pre><code>public class SurveyTextRenderer
{
   public Write(Survey survey)
   {
      Console.WriteLine(survey.Name);
      Console.WriteLine(new string('-', survey.Name.Length);

      for (SurveyPart part in survey.Children)
      {
         processNode(part, 0);
      }
   }

   protected void ProcessNode(SurveyPart part, int depth)
   {
      if (part is Section)
         WriteSection(part as Section, depth);
      else if (part is Question)
         WriteQuestion(part as Question, depth);
      else
         // Error handling or default case

      for (SurveyPart part in survey.Children)
      {
         ProcessNode(part, depth + 1);
      }
   }
}
</code></pre>

<p>Note the error handling - what happens if you add a new SurveyPart and don't update the renderer? Also, I changed the name to use a Survey name, which you should see how to implement easily.</p>

<p>I did not implement <code>WriteSection</code> and <code>WriteQuestion</code>; they'll be pretty close to what you have already except that the recursion is removed. I don't think you really need <code>static</code>s in this case, but you can make them static if you want. However, you could make, say, </p>

<pre><code>public abstract class Renderer
{
   public abstract void Write(Survey survey);
}
</code></pre>

<p>and extend that. It may or may not be useful to you. It depends on your calling code whether it would be worth adding that abstraction. If you have a method that is called like <code>PrintSurvey(new TextRenderer(), datasource)</code> where <code>datasource</code> is one of multiple places the survey could be stored (XML, database, file, etc.) it might be useful. You don't want to repeat yourself. In fact, you could have Survey extend SurveyPart (maybe rename it SurveyElement?) and remove the sort-of-redundant Write()-&gt;ProcessNode() calls.</p>

<p>Hopefully at least this gives you a few ideas!</p>
    </div>