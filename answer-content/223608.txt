<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Starting from <a href="https://codereview.stackexchange.com/a/223586/98493">the answer</a> by <a href="https://codereview.stackexchange.com/users/92478/alexv">@AlexV</a>, you can reduce the code even more by recognizing that the category name is the only difference in the URLs:</p>

<pre><code>import re
import requests
from bs4 import BeautifulSoup


def get_total_items(url):
    """Parse the product count from the given pandora URL"""
    soup = BeautifulSoup(requests.get(url).text, 'lxml')
    return ''.join(re.findall(r'\d', soup.select_one('span.products-count').text))


if __name__ == "__main__":
    url_template = "https://us.pandora.net/en/{}/?sz=30&amp;start={}&amp;format=page-element"
    categories = "charms", "bracelets", "rings", "necklaces", "earrings"

    for category in categories:
        url = url_template.format(category, 0)
        print(f"Total {category.title()}: {get_total_items(url)}")
</code></pre>

<p>I used an <a href="https://realpython.com/python-f-strings/" rel="nofollow noreferrer"><code>f-string</code></a> (Python 3.6+) to make the string formatting in the <code>for</code> loop a bit more concise and <a href="https://docs.python.org/3/library/stdtypes.html#str.title" rel="nofollow noreferrer"><code>str.title</code></a> to change the lowercase category name to titlecase.</p>

<hr>

<p>What you can do after this is use the fact that the <code>requests</code> module can build the request parameters for you. This allows you to also check multiple pages:</p>

<pre><code>import re
import requests
from bs4 import BeautifulSoup

def count_items(response):
    """Parse the product count from the given response"""
    soup = BeautifulSoup(response.text, 'lxml')
    return ''.join(re.findall(r'\d', soup.select_one('span.products-count').text))


def get_total_items(url):
    """Get the items 30 at a time, up to 1000"""
    params = {"sz": 30, "format": "page-element"}
    return sum(count_items(requests.get(url, params=params))
               for params["start"] in range(0, 1000, 30))

if __name__ == "__main__":
    url = "https://us.pandora.net/en/{}/"
    categories = "charms", "bracelets", "rings", "necklaces", "earrings"

    for category in categories:
        total_items = get_total_items(url.format(category))
        print(f"Total {category.title()}: {total_items}")    
</code></pre>

<p>This has the step and maximum page number hardcoded, but you could make it an argument of the function. You could also use a <code>requests.Session</code> to reuse the connection to the server, which speeds it up a bit.</p>
    </div>