<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Some general remarks:</p>

<ul>
<li><p>Don't use <code>namespace std;</code>, see for example <a href="https://stackoverflow.com/questions/1452721/why-is-using-namespace-std-considered-bad-practice">Why is “using namespace std;” considered bad practice?</a>.</p></li>
<li><p>Don't put all the code into <code>main()</code>. Computing the determinant in a separate
function increases the overall clarity of the program and makes it easier to add
test cases. In addition, that gives you a function which can be reused in other
programs.</p></li>
<li><p>Swapping two values can be done in C++ simply with <code>std::swap</code>.</p></li>
<li><p><code>return 0;</code> at the end of the main program can be omitted.</p></li>
</ul>

<p>At some places your code does unnecessary work:</p>

<ul>
<li><p>If the diagonal element <code>a[i][i]</code> is zero then <em>all</em> subsequent rows 
with <code>array[j][i] != 0</code> are swapped with the <code>i</code>th row. It suffices to
swap <em>one</em> row with a non-zero leading element.</p></li>
<li><p>When swapping rows <code>i</code> and <code>j</code>, it suffices to swap the elements starting
at column <code>i</code> because the preceding elements are not used anymore.</p></li>
<li><p>Similarly, when adding a multiple of row <code>i</code> to row <code>j</code>, it suffices to
update elements starting at column <code>i + 1</code>, because all values of column
<code>i</code> will not be read anymore.</p></li>
</ul>

<p>As already said in the comments, the Gaussian elimination is faster than the
Laplace expansion for large matrices (<span class="math-container">\$ O(N^3) \$</span> vs <span class="math-container">\$ O(N!) \$</span> complexity).
However, the “pivoting” (i.e. which rows to swap if an diagonal element is zero)
can be improved. A common choice is <a href="https://en.wikipedia.org/wiki/Pivot_element#Partial_and_complete_pivoting" rel="nofollow noreferrer">“partial pivoting”</a>:</p>

<blockquote>
  <p>In partial pivoting, the algorithm selects the entry with largest absolute value from the column of the matrix that is currently being considered as the pivot element. Partial pivoting is generally sufficient to adequately reduce round-off error. ...</p>
</blockquote>

<p>Using a (nested) <code>std::vector</code> for the matrix storage makes it
easier to pass it an argument to another function.
In addition, it allows to swap two rows in constant time with <code>vector::swap</code>.</p>

<p>Putting it all together, the <code>determinant</code> function could look like this:</p>

<pre><code>#include &lt;vector&gt;
#include &lt;cmath&gt;

double determinant(std::vector&lt;std::vector&lt;double&gt;&gt; &amp;matrix) {
    int N = static_cast&lt;int&gt;(matrix.size());
    double det = 1;

    for (int i = 0; i &lt; N; ++i) {

        double pivotElement = matrix[i][i];
        int pivotRow = i;
        for (int row = i + 1; row &lt; N; ++row) {
            if (std::abs(matrix[row][i]) &gt; std::abs(pivotElement)) {
                pivotElement = matrix[row][i];
                pivotRow = row;
            }
        }
        if (pivotElement == 0.0) {
            return 0.0;
        }
        if (pivotRow != i) {
            matrix[i].swap(matrix[pivotRow]);
            det *= -1.0;
        }
        det *= pivotElement;

        for (int row = i + 1; row &lt; N; ++row) {
            for (int col = i + 1; col &lt; N; ++col) {
                matrix[row][col] -= matrix[row][i] * matrix[i][col] / pivotElement;
            }
        }
    }

    return det;
}
</code></pre>
    </div>