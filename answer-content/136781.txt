<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The Regex is computationally heavy.  I would consider simply iterating through the bits, keeping track of both the highest binary gap and the current binary gap. You could add optimizations such as that proposed by @konijn to bail out of iteration when you reach a point that you can no longer logically find a larger binary gap than your current max value.</p>

<p>That could be as simple as:</p>

<p><strong>The following is updated per comments:</strong></p>

<pre><code>function binaryGap(number) {
    var binary = (number &gt;&gt;&gt; 0).toString(2);
    var maxGap = 0;
    var currentGap = 0;
    var inGap = false;
    var length = binary.length;
    /*
    Fast return if binary string length is less than 3
    and no gap is possible
    */
    if(length &lt; 3) {
        return 0;
    }
    /*
    Start iterating bits.  We start with second character.
    */
    for(var i = 1; i &lt; length; i++) {
        /*
        See if we should continue evaluation based on whether
        we can actually exceed current maxGap number
        */
        if (maxGap &gt;= currentGap + length - i) {
            break;
        }
        if (inGap === false) {
           // we need to check to see if a new gap is started
           if (binary[i-1] === '1' &amp;&amp; binary[i] === '0') {
               // we are in a new gap
               currentGap = 1;
               inGap = true;
           }
        } else {
           // we need to see if gap has ended
           if (binary[i] === '1') {
               // gap has ended
               if (currentGap &gt; maxGap) {
                   maxGap = currentGap;
               }
               inGap = false;
           } else {
               // gap has continued
               currentGap++;
           }
        }
    }
    return maxGap;
}
</code></pre>

<p><a href="https://jsfiddle.net/2475w4n0/2/" rel="nofollow noreferrer">Here is a simple performance test I set up comparing the approaches.</a>  Typically, I am seeing the bit iteration method working in about 20-25% of the time that the regex works.</p>
    </div>