<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'm unfamiliar with the algorithm, so I cannot speak for that.</p>

<h3><code>perdot()</code></h3>

<p>The function can be declared with the <code>constexpr</code> keyword.</p>

<p>When you are passing something by <code>const</code>, if it is not a <a href="https://en.cppreference.com/w/cpp/language/types" rel="noreferrer">fundamental type</a>, you should pass it by <code>const</code> reference. There are other considerations to take into account, but that works with most types such as <code>std::string</code>, and <code>std::pair</code>. You're right that it matters more if the object is larger, and if there's no reason <em>not</em> to make it <code>const</code> reference, then I would go ahead.</p>

<p>As well: <code>ab_x</code>, <code>ab_y</code>; <code>ac_x</code>, <code>ac_y</code> can be <code>const</code>, because their value is never modified within their scope.</p>

<p>Note that, with your if-statement, in C++20 this can be done simply with the spaceship operator <code>&lt;=&gt;</code>. However, this hasn't been released yet.</p>

<p>Therefore, <code>perdot()</code> becomes:</p>

<pre><code>constexpr int perdot(const std::pair&lt;int, int&gt; &amp; a, const std::pair&lt;int, int&gt; &amp; b, const std::pair&lt;int, int&gt; &amp; c)
{
    const int ab_x = b.first - a.first;
    const int ab_y = b.second - a.second;
    const int ac_x = c.first - a.first;
    const int ac_y = c.second - a.second;
    const int per_dot = ab_x * ac_y - ab_y * ac_x;

    if(per_dot &lt; 0)
    {
        return -1;
    }
    else if(per_dot &gt; 0)
    {
        return 1;
    }
    else
    {
        return 0;
    }
}
</code></pre>

<h3><code>is_convex()</code></h3>

<p>When compiling, it's generally advisable to enable flags such as (with <code>g++</code>) <code>-Wall -Wextra -Wconversion -Wshadow</code>. If you do so, you will notice that your compiler warns that <code>convex_polygon.size()</code> returns a value of type <code>std::vector&lt;std::pair&lt;int, int&gt; &gt;::size_type</code>, which you implicitly convert to <code>int</code>.</p>

<p>Instead, if you do not wish to type that long type, use <code>std::size_t</code>. Once this is done, we need to change <code>i</code> to <code>std::size_t</code> to avoid comparison of integer expressions of different signedness.</p>

<p>In C++ using preincrement is usually preferred in for loops where it has no impact on the function of the inner loop. With modern compilers, this has no performance difference, it's just a matter of style at this point.</p>

<p>Again, I can't comment on the algorithm, so I'll trust it's optimal.</p>

<p>Therefore, <code>is_convex()</code> becomes:</p>

<pre><code>bool is_convex(const std::vector&lt;std::pair&lt;int, int&gt;&gt; &amp; convex_polygon)
{
    const std::size_t n = convex_polygon.size();

    // if n == 0, handle as error, otherwise unsigned value will wrap around in for loop

    int sense = perdot(convex_polygon[n - 1], convex_polygon[0], convex_polygon[1]);
    for(std::size_t i = 0; i &lt; n - 1; ++i)
    {
        int new_sense;
        if(i == (n - 2))
        {
            new_sense = perdot(convex_polygon[i], convex_polygon[i + 1], convex_polygon[0]);
        }
        else
        {
            new_sense = perdot(convex_polygon[i], convex_polygon[i + 1], convex_polygon[i + 2]);
        }
        if(sense == 0)
        {
            sense = new_sense;
        }
        if(new_sense == (-sense) &amp;&amp; sense != 0)
        {
            return false;
        }
    }
    return true;
}
</code></pre>

<h3><code>is_inside()</code></h3>

<p>Again, switch to use <code>std::size_t</code>, preincrement, and <code>const</code> references where appropriate.</p>

<p><code>sense</code> can be <code>const</code> because it is never modified.</p>

<p>Inside of your for loop, there's no purpose in declaring the variable <code>new_sense</code>, and then assigning to it separately. Instead declare it as <code>const</code> and initialize it as such.</p>

<p>Therefore, <code>is_inside()</code> becomes:</p>

<pre><code>bool is_inside(const std::vector&lt;std::pair&lt;int, int&gt;&gt; &amp; convex_polygon, const std::pair&lt;int, int&gt; &amp; point)
{
    const std::size_t n = convex_polygon.size();
    const int sense = perdot(convex_polygon[n - 1], point, convex_polygon[0]);
    if(sense == 0)
    {
        return false;
    }

    for(std::size_t i = 0; i &lt; n - 1; ++i)
    {
        const int new_sense = perdot(convex_polygon[i], point, convex_polygon[i + 1]);
        if(new_sense == (-sense) || new_sense == 0)
        {
            return false;
        }
    }
    return true;
}
</code></pre>

<h3><code>p_inside()</code></h3>

<p>In your case, you are using the <code>count</code> variable in a strictly positive manner. I would suggest using <code>std::size_t</code> (unsigned), with the auxiliary benefit that signed overflow is undefined, while unsigned overflow is defined.</p>

<p>Once this is changed, <code>p_inside()</code> should be adapted to return <code>std::size_t</code>. This will require a small change in <code>main()</code>.</p>

<p>Instead of declaring a variable <code>inside</code>, just move that expression into the if-statement.</p>

<p>When iterating over an <code>std::vector</code> using the enhanced for loop, you can use <code>const</code> references.</p>

<h3><code>main()</code></h3>

<p>Don't use <code>size_t</code>, use <code>std::size_t</code>.</p>

<p>If you're exiting <code>main()</code> because of an error, return <code>EXIT_FAILURE</code> from <code>&lt;cstdlib&gt;</code>, otherwise <code>EXIT_SUCCESS</code>.</p>

<p>Usually when printing, you don't need <code>std::endl</code>. You can use just <code>\n</code>. Doesn't matter in this case, but has performance impact when used very often.</p>

<p>When printing an error, use <code>std::cerr</code> instead of <code>std::cout</code>.</p>

<h3>Final code</h3>

<pre><code>#include &lt;cstdlib&gt;
#include &lt;iostream&gt;
#include &lt;vector&gt;

// Calculate perpendicular dot product
constexpr int perdot(const std::pair&lt;int, int&gt; &amp; a, const std::pair&lt;int, int&gt; &amp; b, const std::pair&lt;int, int&gt; &amp; c)
{
    const int ab_x = b.first - a.first;
    const int ab_y = b.second - a.second;
    const int ac_x = c.first - a.first;
    const int ac_y = c.second - a.second;
    const int per_dot = ab_x * ac_y - ab_y * ac_x;

    if(per_dot &lt; 0)
    {
        return -1;
    }
    else if(per_dot &gt; 0)
    {
        return 1;
    }
    else
    {
        return 0;
    }
}

// Check if given set of points form a convex polygon
bool is_convex(const std::vector&lt;std::pair&lt;int, int&gt;&gt; &amp; convex_polygon)
{
    const std::size_t n = convex_polygon.size();

    // if n == 0, handle as error, otherwise unsigned value will wrap around in for loop

    int sense = perdot(convex_polygon[n - 1], convex_polygon[0], convex_polygon[1]);
    for(std::size_t i = 0; i &lt; n - 1; ++i)
    {
        int new_sense;
        if(i == (n - 2))
        {
            new_sense = perdot(convex_polygon[i], convex_polygon[i + 1], convex_polygon[0]);
        }
        else
        {
            new_sense = perdot(convex_polygon[i], convex_polygon[i + 1], convex_polygon[i + 2]);
        }
        if(sense == 0)
        {
            sense = new_sense;
        }
        if(new_sense == (-sense) &amp;&amp; sense != 0)
        {
            return false;
        }
    }
    return true;
}

// Check if a point is STRICTLY inside the convex polygon
bool is_inside(const std::vector&lt;std::pair&lt;int, int&gt;&gt; &amp; convex_polygon, const std::pair&lt;int, int&gt; &amp; point)
{
    const std::size_t n = convex_polygon.size();
    const int sense = perdot(convex_polygon[n - 1], point, convex_polygon[0]);
    if(sense == 0)
    {
        return false;
    }

    for(std::size_t i = 0; i &lt; n - 1; ++i)
    {
        const int new_sense = perdot(convex_polygon[i], point, convex_polygon[i + 1]);
        if(new_sense == (-sense) || new_sense == 0)
        {
            return false;
        }
    }
    return true;
}

// Count the number of points STRICTLY inside the convex polygon
std::size_t p_inside(const std::vector&lt;std::pair&lt;int, int&gt;&gt; &amp; convex_polygon, const std::vector&lt;std::pair&lt;int, int&gt;&gt; &amp; points)
{
    std::size_t count = 0;
    for(const auto &amp; point : points)
    {
        if(is_inside(convex_polygon, point))
        {
            count++;
        }
    }
    return count;
}

// Main
int main()
{
    int k, n;
    std::cin &gt;&gt; k &gt;&gt; n;
    std::vector&lt;std::pair&lt;int, int&gt;&gt; convex_polygon(k);
    std::vector&lt;std::pair&lt;int, int&gt;&gt; points(n);

    for(std::size_t i = 0; i &lt; convex_polygon.size(); ++i)
    {
        int x, y;
        std::cin &gt;&gt; x &gt;&gt; y;
        convex_polygon[i] = {x, y};
    }

    if(!is_convex(convex_polygon))
    {
        std::cerr &lt;&lt; "Input not convex...Exiting\n";
        return EXIT_FAILURE;
    }

    for(std::size_t i = 0; i &lt; points.size(); ++i)
    {
        int x, y;
        std::cin &gt;&gt; x &gt;&gt; y;
        points[i] = {x, y};
    }

    const std::size_t count = p_inside(convex_polygon, points);

    std::cout &lt;&lt; "Points inside: " &lt;&lt; count &lt;&lt; '\n';

    return EXIT_SUCCESS;
}
</code></pre>

<p>Hopefully this was helpful, your code looks good otherwise. Catch2 is a good testing framework. Because your code has many branches (ie <code>is_convex</code> has more than a couple branches inside the for loop), it may be harder to test, but shouldn't be impossible.</p>
    </div>