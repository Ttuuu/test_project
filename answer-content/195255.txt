<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Simplify</h3>

<p>I find the logic a bit complicated. It could be simpler:</p>

<ul>
<li>Loop from -A to +A, let's call the loop variable <code>n</code></li>
<li>Take the absolute value of <code>n</code></li>
<li>Generate the values in the row:

<ul>
<li>Loop from -A to +A, let's call the loop variable <code>m</code></li>
<li>Use the maximum of <code>abs(n) + 1</code> and <code>abs(m) + 1</code></li>
</ul></li>
</ul>

<p>Like this:</p>

<pre><code>def pretty_print(num):
    def print_line(n):
        low = abs(n)
        print(' '.join(str(max(low + 1, abs(i) + 1)) for i in range(-num + 1, num)))

    for i in range(-num + 1, num):
        print_line(i)
</code></pre>

<h3>Testing</h3>

<p>Doctests are awesome, I recommend to use them.
Here's the complete solution with doctests,
you can run this with <code>python -mdoctest pretty_print.py</code>:</p>

<pre><code>#!/usr/bin/env python


def pretty_print(num):
    """
    &gt;&gt;&gt; pretty_print(1)
    1

    &gt;&gt;&gt; pretty_print(2)
    2 2 2
    2 1 2
    2 2 2

    &gt;&gt;&gt; pretty_print(6)
    6 6 6 6 6 6 6 6 6 6 6
    6 5 5 5 5 5 5 5 5 5 6
    6 5 4 4 4 4 4 4 4 5 6
    6 5 4 3 3 3 3 3 4 5 6
    6 5 4 3 2 2 2 3 4 5 6
    6 5 4 3 2 1 2 3 4 5 6
    6 5 4 3 2 2 2 3 4 5 6
    6 5 4 3 3 3 3 3 4 5 6
    6 5 4 4 4 4 4 4 4 5 6
    6 5 5 5 5 5 5 5 5 5 6
    6 6 6 6 6 6 6 6 6 6 6
    """

    def print_line(n):
        low = abs(n)
        print(' '.join(str(max(low + 1, abs(i) + 1)) for i in range(-num + 1, num)))

    for i in range(-num + 1, num):
        print_line(i)

pretty_print(6)
</code></pre>

<h3>Style</h3>

<p>There are some minor style issues with the posted code.
I suggest to follow the <a href="http://www.python.org/dev/peps/pep-0008/" rel="noreferrer">PEP8</a> guidelines.</p>
    </div>