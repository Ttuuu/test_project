<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Review</h2>

<p>Most tips and issues have already been addressed by fellow reviewers. I would like to add or re-iterate:</p>

<ul>
<li>when implementing an algorithm, you should <em>always</em> include <strong>unit tests</strong></li>
<li>when providing a public API, you should handle argument checks; in this case, check <code>value</code> against <code>null</code> and check each of its code points against the specified entropy - in this case <code>['0'-'9']</code></li>
<li>when checking a string for a missing character, return a <code>char</code> rather than an <code>int</code>. Return <code>'0'</code> instead of <code>0</code>, and so on.</li>
<li>use clear and compact variable names to enhance readability</li>
<li>develop for human beings rather than a computer to read your code: avoid statements that could introduce ambiguity for a human reader; <code>while (0 &lt; index--)</code> makes people think about the order of operations (first comparison, or first decrementation)</li>
<li>develop for extensibility; this algorithm only works for base 10, and it can't be reused for entropies where characters are not only digits and aren't necesseraly consecutive code points, as allowed by <a href="https://en.wikipedia.org/wiki/Luhn_mod_N_algorithm" rel="nofollow noreferrer">Luhn mod N</a> generic case</li>
</ul>

<hr>

<h2>Luhn mod N</h2>

<p>Following the instructions at wikipedia, we can implement <a href="https://en.wikipedia.org/wiki/Luhn_mod_N_algorithm#Algorithm" rel="nofollow noreferrer">Luhn mod N</a> as follows:</p>

<p>A converter is required, so we are not restricted to base 10 or digits only.</p>

<pre><code>interface ICodePointConverter
{
    int CodePointFromCharacter(char character);
    char CharacterFromCodePoint(int codePoint);
    int NumberOfValidInputCharacters();
}
</code></pre>

<p>A default implementation could use lookup maps for both directions (int -&gt; char and char -&gt; int).</p>

<pre><code>class MemoryCodePointConverter : ICodePointConverter
{
    IDictionary&lt;int, char&gt; characterByCodePointMap;
    IDictionary&lt;char, int&gt; codePointByCharacterMap;

    public int NumberOfValidInputCharacters() =&gt; characterByCodePointMap.Count;

    public static MemoryCodePointConverter FromEntropy(string entropy)
    {
        entropy = entropy ?? throw new ArgumentNullException(nameof(entropy));
        return new MemoryCodePointConverter(
            Enumerable.Range(0, entropy.Length).Select(i =&gt; (i, entropy[i])));
    }

    public MemoryCodePointConverter(
        IEnumerable&lt;(int codePoint, char character)&gt; entries)
    {
        entries = entries ?? throw new ArgumentNullException(nameof(entries));
        characterByCodePointMap = new Dictionary&lt;int, char&gt;();
        codePointByCharacterMap = new Dictionary&lt;char, int&gt;();

        foreach (var entry in entries)
        {
            characterByCodePointMap.Add(entry.codePoint, entry.character);
            codePointByCharacterMap.Add(entry.character, entry.codePoint);
        }
    }

    public char CharacterFromCodePoint(int codePoint)
    {
        if (!characterByCodePointMap
            .TryGetValue(codePoint, out var character))
        {
            throw new ArgumentException(
                $"Invalid code point {codePoint}", nameof(codePoint));
        }

        return character;
    }

    public int CodePointFromCharacter(char character)
    {
        if (!codePointByCharacterMap
            .TryGetValue(character, out var codePoint))
        {
            throw new ArgumentException(
                $"Invalid character {character}", nameof(character));
        }

        return codePoint;
    }
}
</code></pre>

<p>The algorithm can then be implemented given the pseudo code at wikipedia:</p>

<pre><code>static class LuhnCheck
{
    public static char GenerateCheckCharacter(string input, ICodePointConverter converter)
    {
        converter = converter ?? throw new ArgumentNullException(nameof(converter));
        input = input ?? throw new ArgumentNullException(nameof(input));

        int factor = 2;
        int sum = 0;
        int n = converter.NumberOfValidInputCharacters();

        // Starting from the right and working leftwards is easier since 
        // the initial "factor" will always be "2" 
        for (int i = input.Length - 1; i &gt;= 0; i--)
        {
            int codePoint = converter.CodePointFromCharacter(input[i]);
            int addend = factor * codePoint;

            // Alternate the "factor" that each "codePoint" is multiplied by
            factor = (factor == 2) ? 1 : 2;

            // Sum the digits of the "addend" as expressed in base "n"
            addend = (addend / n) + (addend % n);
            sum += addend;
        }

        // Calculate the number that must be added to the "sum" 
        // to make it divisible by "n"
        int remainder = sum % n;
        int checkCodePoint = (n - remainder) % n;

        return converter.CharacterFromCodePoint(checkCodePoint);
    }
}
</code></pre>

<p>Unit tests show us the results are the same for the luhn test mod 10 from OP.</p>

<pre><code>[TestMethod]
public void Fixture()
{
    var input = "7992739871";
    var converter = MemoryCodePointConverter.FromEntropy("0123456789");

    // + '0' is required to get the character from the resulting code point
    var m1 = LuhnCheckOP.Mod10(input) + '0';
    var m2 = LuhnCheck.GenerateCheckCharacter(input, converter);

    Assert.AreEqual(m1, m2);
}
</code></pre>
    </div>