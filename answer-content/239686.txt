<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I agree with the other answer from <a href="https://codereview.stackexchange.com/users/220135/jkettmann"><em>@jkettmann</em></a> that you should abstract this. Generally speaking having a long list of if-else conditions usually has a better alternative.</p>

<p>That could be a reducer like mentioned, or could just be an object map like:</p>

<pre><code>const handlers = {
  title: addTitle,
  content: addContent,
  username: addUsername,
  email: addEmail,
  password: addPassword,
  passwordConf: addPasswordConf
}
const { name } = event.target;
if (!handlers.hasOwnProperty(name)) {
  return null;
}
return handlers[name](event.target.value);
</code></pre>

<p>I find it strange to be using the same handler to be calling different update methods (eg: <code>addTitle</code>). Forms are the ideal use case for a managing the state together in a reducer.</p>

<p>You're not even using it properly inside <code>register.tsx</code> anyway:</p>

<pre><code>usernameChange={handleInputChange}
emailChange={handleInputChange}
passwordChange={handleInputChange}
passwordConfChange={handleInputChange}
</code></pre>

<p>You could use a form management hook/reducer library, but using custom reducers is extremely easy with React hooks:</p>

<pre><code>const reducer = (state, event) =&gt; {
  return {
    ...state,
    [event.target.name]: event.target.value,
  }
};
const [state, dispatch] = React.useReducer(reducer, {
  title: '',
  content: '',
  username: '',
  email: '',
  password: '',
  passwordConf: ''
});
...
&lt;Register
  handleInputChange={dispatch}
  user={state}
...
...
&lt;SignUpForm
  submit={handleSubmit}
  usernameChange={handleInputChange}
</code></pre>

<p>I'll try and answer your actual question as well:</p>

<blockquote>
  <p><em>is the following code considered a react hook ?</em></p>
</blockquote>

<p>Your <code>InputHook</code> is structured like a hook but there's a few details that make it not 100% so.</p>

<p>The React docs say hooks are defined by this definition:</p>

<blockquote>
  <p>A custom Hook is a JavaScript function whose name starts with ”use” and that may call other Hooks.
  <a href="https://reactjs.org/docs/hooks-custom.html#extracting-a-custom-hook" rel="nofollow noreferrer">Source</a></p>
</blockquote>

<p>Your hook both does not have <code>use</code> in front and doesn't call any other hooks. So really it's just a function imitating a hook.</p>

<p>For example, this would become a hook if you used the <code>useCallback</code> hook inside your custom hook: (and made sure to name it with <code>use</code>)</p>

<pre><code>export default function useInputChange(props) {
  const {
    addTitle,
    addContent,
    addUsername,
    addEmail,
    addPassword,
    addPasswordConf
  } = props;
  return React.useCallback((event) =&gt; {
    if (event.target.name === "title") {
      addTitle(event.target.value);
    }
    if (event.target.name === "postContent") {
      addContent(event.target.value);
    }
    if (event.target.name === "username") {
      addUsername(event.target.value);
    }
    if (event.target.name === "email") {
      addEmail(event.target.value);
    }
    if (event.target.name === "password") {
      addPassword(event.target.value);
    }
    if (event.target.name === "passwordConf") {
      addPasswordConf(event.target.value);
    } else {
      return null;
    }
  }, [addTitle, addContent, addUsername, addEmail, addPassword, addPasswordConf]);
}
</code></pre>
    </div>