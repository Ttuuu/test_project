<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You already have a good review by chux; I'll not repeat the observations from there.  Instead, I'll highlight a couple of opportunities to advance beyond "beginner" level C.</p>
<h1>Become more comfortable with pointers</h1>
<p>Many C beginners seem to be intimidated by pointers.  That can lead to clumsy non-idiomatic C using indexing instead.  Whilst that's functionally correct, it will look unwieldy to the experienced C programmer, and will also hinder your ability to read code written in a more pointer-oriented style.</p>
<p>It's worth practising your pointer code until your are completely confident you can both write and understand that style.</p>
<h1>Learn what's in the Standard Library</h1>
<p>The C Standard Library contains many functions to make your life easier.  You're using <code>isdigit()</code> which is great; another function that may help us is <code>strspn()</code>, which can replace the loop for us (but we'll have to specify the allowed digits, which loses us some of the locale-independence that <code>isdigit()</code> gives us):</p>
<pre><code>bool string_contains_integer(const char *str)
{
    if (*str == '-') {
        ++str;
    }

    size_t digit_count = strspn(str, "0123456789");
    return digit_count &gt; 0
        &amp;&amp; str[digit_count] == '\0';
}
</code></pre>
<p>The <code>digit_count &gt; 0</code> test ensures we have at least one digit, and <code>str[digit_count] == '\0'</code> checks that the first non-digit is the the end of the string.</p>
<h1>Add more tests</h1>
<p>It's worth writing a small helper function:</p>
<pre><code>static bool test_contains_integer(bool expected, const char *str)
{
    if (expected == string_contains_integer(str)) {
        return true;
    }
    fprintf(stderr, "FAIL: Expected %s but got %s for input %s\n",
            expected ? "true" : "false",
            expected ? "false" : "true",
            str);
    return false;
}
</code></pre>
<p>When we have a lot of tests, it helps to produce output only for the failures.  We can count how many pass and how many fail:</p>
<pre><code>int main(void)
{
    /* counts of failure and pass */
    int counts[2] = { 0, 0 };

    ++counts[test_contains_integer(false, "")];
    ++counts[test_contains_integer(false, "-")];
    ++counts[test_contains_integer(true, "0")];
    ++counts[test_contains_integer(true, "-0")];  /* questionable */
    ++counts[test_contains_integer(true, "-00")]; /* questionable */
    ++counts[test_contains_integer(true, "1")];
    ++counts[test_contains_integer(false, "1a")];
    ++counts[test_contains_integer(true, "-10")];

    printf("Summary: passed %d of %d tests.\n",
           counts[true], counts[false] + counts[true]);

    return counts[false] != 0;
}
</code></pre>
<hr>
<p>Finally, a minor nit: prefer to declare a <code>main</code> that takes no arguments, rather than one that takes unspecified arguments:</p>
<pre><code>int main(void)
</code></pre>
    </div>