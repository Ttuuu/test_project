<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Feedback</h2>

<p>The code does cache DOM references (which I know we have mentioned in your other posts) using <code>const</code>.</p>

<p>All lines appear to have a semi-colon to end the line, except the one where text content is updated (i.e. <code>sent.text(...)</code>). While it isn't required to have one, it would be wise to be consistent, for the sake of anyone who reads your code/might need to alter it.</p>

<h2>Suggestions</h2>

<h3>Using <code>let</code> instead of <code>var</code></h3>

<p>If you are going to use <code>const</code>, which not then use <code>let</code> for the mutable strings instead of <code>var</code>?</p>

<h3>Setting values</h3>

<p>Instead of making four click handlers, you could just use the last one to set the values, since the DOM elements are all still present despite not being visible. That way, those variables can have the scope be limited to a single function, and then <code>const</code> can be used there:</p>

<pre><code>$('#fourth').click(function() {
    const nounDisplay = nounInput.val();
    const adjDisplay = adjInput.val();
    const verbDisplay = verbInput.val();
    const adverbDisplay = adverbInput.val();
    sent.text("Do you " + nounDisplay + " your " + adjDisplay + " " + nounDisplay + adjDisplay + "? That's hilarious!")
  });
</code></pre>

<h3>Mixing markup with display logic</h3>

<p>This is just a minor point and likely not something to worry about but some might argue that having the markup control logic (e.g. <code>data-target</code> on the <em>Next Step</em> buttons) might be considered tight coupling, but perhaps that is just the idiomatic way for those modals to be laid out.</p>
    </div>