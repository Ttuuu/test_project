<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You have not provided full details, so let me go on partly guessing here. First, here's a few suggestions that you can likely do immediately.</p>

<ul>
<li><p>Both methods return a boolean, but it's always <code>true</code>. What's even worse, it seems that <code>loadRooms()</code> return true even if you were unable to open the stream! Probably you intended to return <code>false</code> in both cases in case of any I/O failures.</p></li>
<li><p>You can avoid human errors by using proper constants. Don't use magic numbers 32 and 18, but rather make them constants like <code>const int ROOM_WIDTH</code> and <code>const int ROOM_HEIGHT</code> at a suitable place.</p></li>
<li><p>Because <code>itemID</code>, <code>xPos</code> and <code>yPos</code> can be <code>const</code>, make them such. This helps the reader see that the variables won't change later on, reducing mental effort.</p></li>
<li><p>In <code>saveRooms()</code>, you might only want to retrieve <code>rooms.at(i).items.at(j).GetPosition()</code>, and then print out <code>x</code> and <code>y</code> to avoid making two function calls to the getter.</p></li>
<li><p>In both methods, you have hard-coded the name of the file resource. Why? Instead, consider taking that as an input to the constructor to <code>RoomBuilder</code>, again reducing the chance of errors.</p></li>
<li><p>In <code>loadRooms()</code>, you could first check if the stream is OK, and if not, then return false. Otherwise, you could apply <a href="https://www.bfilipek.com/2016/11/iife-for-complex-initialization.html" rel="nofollow noreferrer">IIFE</a> to initialize <code>const std::vector&lt;std::string&gt; lines</code> appropriately.</p></li>
<li><p>I think <code>loadRooms()</code> is doing too much. Why not separate the logic of reading tiles into one and reading item information into another function? Those can be called from the method then.</p></li>
<li><p>You are not really checking for whether the input is valid. As per your checks, it's fine as long as you find say "ID:" or "Tiles:" <em>anywhere</em> in the string. I would suggest using some well-known structured format like JSON for storing all this information.</p></li>
<li><p>With <code>std::stringstream</code>, you can initialize the object with the correct string input, e.g., <code>std::stringstream ss("id 15 20");</code> after which you can do say <code>ss &gt;&gt; id &gt;&gt; x &gt;&gt; y;</code>, where id is a string and x and y are ints.</p></li>
<li><p>For checking streams, you can just invoke their <code>operator()</code>, i.e., you can do <code>if(ss) { ... }</code> or <code>if(in) { ... }</code>.</p></li>
</ul>

<p>In addition to these points, I would recommend you consider the following more breaking changes.</p>

<ul>
<li><p>Why is the responsibility of <code>RoomBuilder</code> to know how a specific room is saved to a file?</p></li>
<li><p>The above should be the responsbility of every room: they know their details and how to draw itself. That way, the room builder could really just say "for each room r, call r.draw()" and that's it. In that way, rooms can easily be of different size, have different cool special effects, etc.</p></li>
</ul>
    </div>