<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>It has been a long time since I did something in c++ so I probably cannot give any pointers on c++ specific things.</p>

<p>The first thing I notice is the data types you use to encode data. For example, you encode the board as a vector of strings <code>std::vector&lt;std::string&gt; &amp;board</code> which has the entire printable board. Instead of encoding the board in this way you should instead ask what data represents a board. In the case of tic tac toe it is a grid of 3 by 3 with each square encoding information if it is empty, filled by <code>X</code> or filled by <code>O</code>. Printing the board can then be offloaded to the <code>draw_board</code> method. In this way the other methods using the board don't need to know how it is printed/drawn. You can create a struct out of the board (or even a class if you want to go that route)</p>

<pre class="lang-cpp prettyprint-override"><code>struct Board {
  int pieces[3][3];
}
</code></pre>

<p>if you decide to encode the pieces on the board as <code>int</code>s (more on that later). You can even add more information to the <code>Board</code> struct, for example the current player to move, how many moves the game has advanced etc.</p>

<p>The same holds for the player encoding. You now use the <code>char</code>s <code>X</code> and <code>O</code> but you can also create an <code>enum</code> to state a player, for example</p>

<pre class="lang-cpp prettyprint-override"><code>enum Player { Xs, Os }
</code></pre>

<p>This prevents you from making errors in the future where for example you typed <code>'P'</code> instead of <code>'O'</code>. Using enums will result in compiler errors if the enum value does not exist.</p>

<p>You can also encode the squares on the board with an enum. Each square has only three possibilities: filled by Xs, filled by Os or empty. So a square can be</p>

<pre class="lang-cpp prettyprint-override"><code>enum Square { Empty, X, O }
</code></pre>

<p>or something like that (maybe not <code>X</code> and <code>O</code> as that might give collisions in the future but you get the point).</p>

<p>The goal for these enums and structs is to abstract the data you are working with (instead of working with a vector of strings, work with a Board) and to give a more clear expression of what the code is doing (instead of providing a char, provide a Player). This makes code more readable and also prevents some mental gymnastics in the future.</p>

<p>In your <code>update_board</code> there is a switch case with a whopping 9 cases. Usually when I see a switch case with a lot of cases I try to reduce the amount of cases or even try to get rid of the switch case because all the cases are a lot of copy-pasting and can have possible errors in them. In this case, your <code>choice</code> is a value between 1 and 9. This is fine for the player input, but it might be better to use the values 0 to 8 for this as soon as you got the input from the player. In that way figuring out which item in <code>plays</code> to edit can be easily calculated using the division <code>/</code> and modules operators <code>%</code>:</p>

<pre class="lang-cpp prettyprint-override"><code>plays[choice / 3][choice % 3] = current
</code></pre>

<p>Of course, it is a very good idea to replace the <code>3</code>s in the above example with some variables like <code>boardHeight</code> and <code>boardWidth</code> so it is clear what the <code>3</code> means and if you would like to create a different version with a 4 by 4 board for example, you wouldn't need to change all the <code>3</code>s in your entire source code with <code>4</code>s.</p>

<p>About the <code>winner</code> function. It might be better to have a method which expects a board and player as input and returns a boolean wether this player won as you only need to check for the player who just moved if if he won. This also makes you checking the different squares easier as you don't need to check the squares with each other but just check if each square matches the players piece/symbol. You can choose to write each case (ie each column, each row and each diagonal) instead of using for loops, in this case there are only 8 cases to check and it makes it a bit more clear, but the major downside is that you cannot change it that easily if you want to modify the game in the future to some other version as I mentioned earlier.</p>

<p>I'll leave it at this, my main takeaway is to use data types and abstractions for the different pieces of information/data you use. You'll see that if you use these abstractions you'll realise that you can write some pieces of code a lot easier. I won't comment you on c++ specific styles, someone else can do that for you ;)</p>
    </div>