<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Disclaimer: I don't know Haskell and I have never used it before.</p>

<pre><code>solve low hi = length . takeWhile (&lt;= hi) . dropWhile (&lt; low) . map read .
  filter (allF [hasDouble, noLeadingZeros]) $ combinations 6 ['0'..'9']
  where hasDouble = any ((== 2) . length) . group
        noLeadingZeros = (/= '0') . head
</code></pre>

<p>Instead of running <code>combinations 6 ['0'..'9']</code> and then chopping off everything which has a zero at the start, generate numbers from <code>100000..999999</code> and then convert it to a string. This would eliminate the <code>combinations</code> method.</p>

<p>I was able to make the following conclusions about the algorithm:</p>

<ul>
<li><p>if the numbers are sorted from smallest to largest, then it should equal the original number (i.e. they are already sorted from smallest to greatest)</p></li>
<li><p>if the numbers with no duplicates does not equal the original number, then it means that there is at least two which were "de-duped", therefore it has two duplicates</p></li>
</ul>

<p>I was able to produce the following code:</p>

<pre><code>import Data.List

checkNum num = do return ((sort(show num) == (show num) &amp;&amp; (nub (show num)) /= (show num)))
main = do checkNum 4222211
</code></pre>

<p>This checks if the sorted number (as a string) is equal to itself (which means that it is increasing correctly), and <code>nub</code> removes all duplicate digits.</p>
    </div>