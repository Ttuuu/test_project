<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>As general practice, I prefer using positional arguments simply because they're easier to typecheck with <code>mypy</code>.  In the case of using some external API that doesn't have python3 type annotations (booo) I'd create a stub file that includes all of the types that I'm using and then code against that.</p>

<p>For your example, a quick search didn't turn up any existing mypy stubs, so I assume I'm stuck writing my own.  Here's how I'm gonna do it for the code sample you've provided:</p>

<pre><code>from typing import List, TypedDict

class _Properties(TypedDict, total=False):
    title: str

class _AddSheet(TypedDict, total=False):
    properties: _Properties

class _Request(TypedDict, total=False):
    addSheet: _AddSheet

class _Body(TypedDict, total=False):
    requests: List[_Request]

def batchUpdate(spreadsheetId: str, body: _Body) -&gt; None: ...
</code></pre>

<p>This is a very incomplete type declaration for that potentially massive <code>_Body</code> object (also, note that I'm assuming that none of these fields are required; omit the <code>total=False</code> if you want to enforce totality), but since I'm probably not going to use all of those fields, my strategy is going to be to add them to my declaration as I use them, and have that be the source of truth (i.e. as long as I declare it correctly once in that file, mypy will make sure I use it correctly everywhere else).</p>

<p>Now I can call that function in my code like this:</p>

<pre><code>batchUpdate(
    spreadsheetId, { 
        'requests': [{ 
            'addSheet': { 
                'properties': { 
                    'title': "some title" 
                } 
            } 
        }]
    }
)
</code></pre>

<p>(BTW, if you want to completely ignore my advice about typing, this is the calling syntax I'd use regardless.)</p>

<p>The benefit of having added typing is that if I typo something, e.g. I misspell "properties", I'll get an error from mypy like this:</p>

<pre><code>spreadsheet.py:22: error: Extra key 'prperties' for TypedDict "_AddSheet"
</code></pre>

<p>If I forget that <code>requests</code> is a list and I omit the brackets, I get:</p>

<pre><code>spreadsheet.py:21: error: Incompatible types (expression has type "Dict[str, Dict[str, Dict[str, str]]]", TypedDict item "requests" has type "List[_Request]")
</code></pre>

<p>Getting a static error like this is a lot easier than having a typo in my server API call that results in a (possibly cryptic) runtime error.</p>

<p>My experience is that using the <code>**kwargs</code> syntax generally makes it harder to enforce good typing, so I tend to avoid it.</p>
    </div>