<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>More concise code</h3>
<p>First, you can compute <code>weightSum</code> using a <code>reduce()</code> function instead. I am not sure if there is any particular performance benefit to this or not, but it does allow you to put everything on one line if you like that sort of thing.</p>
<pre><code>const weightSum = weights.reduce((sum, weight) =&gt; sum + weight, 0);
</code></pre>
<p>Similarly, in newer versions of Javascript you can use <code>weights.findIndex()</code> instead of <code>weights.some()</code> to make your code more concise. However this will not work in Internet Explorer.</p>
<pre><code>    const retIndex = weights.findIndex((weight) =&gt; {
        choice -= weight;
        return (choice &lt; 0);
    });
    return retIndex;
</code></pre>
<p>Now, on to efficiency.</p>
<h3>Efficiency - using input once</h3>
<p>If you only plan to use each input <em>once</em>, then the algorithm you have is <em>close</em> to the best fit for the job. But the time to produce an output increases linearly with the size of the input (<em>O(n)</em>). We can improve that. (Thanks <a href="https://codereview.stackexchange.com/users/6499/roland-illig">Roland Illig</a>.)</p>
<p>Say that at the top, instead of simply taking the sum, we generate a new array with all the intermediate steps to get to the sum. E.g. for the input <code>[1.5, 3.5, 2, 1.3]</code> we create the array <code>[1.5, 5, 7, 8.3]</code>. This leads us to more or less the inverse of your current method; instead of subtracting weights from one side of the less-than comparison (i.e. from <code>choice</code>), we are adding them to the other side.</p>
<pre><code>    const accumulatedWeights = weights.slice(0, 1);
    weights.slice(1).forEach((weight, i) =&gt; {
        accumulatedWeights[i] = weight + accumulatedWeights[i - 1];
    });
    weightSum = accumulatedWeights[accumulatedWeights.length - 1];

    let choice = Math.random() * weightSum; // [0 ~ weightSum]
    let retIndex;
    accumulatedWeights.some((accumulatedWeight, index) =&gt; {
        if(choice &lt; accumulatedWeight){
            retIndex = index;
            return true;
        }
    });
    return retIndex;
</code></pre>
<p>Now, this is not <em>yet</em> an improvement on your current method. The key is that this new array <code>accumulatedWeights</code> has a useful property: we know it is sorted, ordered from least to most (assuming no negative weights, which would frankly break everything anyway). This means we can do a binary search on it. Instead of using <code>.some()</code> to go from one end of the array to the other, we can start by checking in the middle of the array, and then "zoom in" on the half that must contain the correct value, then repeat.</p>
<p>Think about if there are 100 values in the input, and the random number generated corresponds to the value at index 99. Without binary search, we have to go through the whole array and do 100 operations to find the correct index; with binary search we only have to do around 7. (All 100 -&gt; top 50 -&gt; top 25 -&gt; top 12 or 13 -&gt; top 6 or 7 -&gt; top 3 or 4 -&gt; top 1 or 2 -&gt; definitely top 1.) This is <em>O(log n)</em> time efficiency, a big improvement over <em>O(n)</em>.</p>
<p>Unfortunately I don't have time to write out a full binary search function, but see <a href="https://stackoverflow.com/questions/22697936/binary-search-in-javascript">this StackOverflow post</a>.</p>
<h3>Efficiency - using input many times</h3>
<p>But what if you wanted to use each input <em>more</em> than once? E.g. you want to select ten million randomized indexes in a row based on the same weighting scheme.</p>
<p>Well, in that case you could follow the advice of <a href="https://stackoverflow.com/a/8435261">this other StackOverflow post</a>:</p>
<ul>
<li>First, build a big array where each number you want to select appears some number of times in proportion to its weight. E.g. for the weights <code>[1.5, 3.5, 2, 1.3]</code>, you would generate an array with fifteen <code>0</code>s, thirty-five <code>1</code>s, twenty <code>2</code>s, and thirteen <code>3</code>s.</li>
<li>Then, pick a random element from the big array (i.e. compute an index via <code>Math.floor(Math.random() * big_array.length)</code> and return the element at that index) ten million times in a row.</li>
</ul>
<p>You pay a certain cost up front to set up the big array, but once you have it set up, the time to find another result is constant (<em>O(1)</em>), no matter how long the original input was.</p>
<p>Whether or not this is more efficient in practice depends entirely on your use case.</p>
    </div>