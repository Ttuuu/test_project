<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Some suggestions:</p>

<ol>
<li><a href="https://stackoverflow.com/a/10383546/96588"><code>#!/usr/bin/env bash</code></a> is a very common shebang line these days.</li>
<li><a href="https://mywiki.wooledge.org/Quotes" rel="nofollow noreferrer">Use More Quotes™</a>:

<ul>
<li><code>echo -e $i'\t'"${BOOKMARKS[$i]}"</code> should be <code>echo -e $i'\t'"${BOOKMARKS[$i]}"</code> (or even better, <code>printf '%s\t%s' "$i" "${BOOKMARKS[$i]}"</code>)</li>
<li><code>command=$1</code> should be <code>command="$1"</code></li>
</ul></li>
<li>In <code>[[ "$command" =~ [0-9]+ ]]</code> you'll want to anchor the regex.</li>
<li>If this is for your own use I don't quite understand the need for both option-style and command-style invocation.</li>
<li><code>==</code> in Bash is a bit of a historical accident. It won't make any difference as long as you use Bash, but I usually prefer the POSIX <code>=</code> in this case.</li>
<li>It seems <code>bm_compact</code> should run on every change, since it'll be super fast and you avoid changing indexes.</li>
<li><code>bmfile</code> would be better as either configuration or as a single variable.</li>
<li>"default !/.bookmarks" should probably be "default ~/.bookmarks".</li>
<li>You can set <code>IFS</code> for a single command, such as <code>while IFS=… read …</code></li>
<li><p>All the single semicolons are extraneous - you definitely don't need one for <code>echo -e $i'\t'"${BOOKMARKS[$i]}" ;</code>, and you can use</p>

<pre><code>for i in "${!BOOKMARKS[@]}"
do
</code></pre>

<p>for loops and conditionals.</p></li>
</ol>
    </div>