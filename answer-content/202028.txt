<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Have some consideration about the naming you're using.</p>

<p>You speack about <em>url</em>, but in your code you're handling <em>paths</em> and then they become <em>routes</em>.</p>

<p>It' would be better if you focus on what is the main idea here and choose the names accordingly.</p>

<p>Naming is always hard, but change variables names just to have different variables is not a good way to address the issue.</p>

<p>The use of <em>Array.map()</em> is a good choice, the bad part is that you need the index argument.</p>

<p>About the for loop, I think you can go ahead with the javascript arrays functions and get rid of it.</p>

<p>Here is a rewrite of your code in that way:</p>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>const directoryPath = 'rootFolder/folder1/exampleFolder1/folder3/folder3/subFolder123/file2.md'

// helper function to remove the check and add of / for a path segment
function addFolderSeparator (folderSeparator, element) {
    return ((element.startsWith(folderSeparator)
                ? '' : folderSeparator) + element)
}

// verify if it is the last element for a given length
const isTheLastElementFor = length =&gt;
    current =&gt; (current === length-1)

// if you use an arrow function you can return directly an object
// the for loop could be replaced by the array method slice
// and then a reduce operation to work on the array portion 
function routesFromPath (folderSeparator, path) {
    const segments = path.split(folderSeparator)
    const isTheLastElement = isTheLastElementFor(segments.length)

    return segments.map((segment, index) =&gt; (
        isTheLastElement(index)
        ? { name: segment }
        : {
           name: segment,
           url: index
                ? segments.slice(0, index + 1)
                   .reduce((acc, actual) =&gt; {
                       acc += addFolderSeparator(folderSeparator, actual)
                       return acc
                  }, '')
               : addFolderSeparator(folderSeparator, segment)
        }))
}

console.log(routesFromPath('/', directoryPath))</code></pre>
</div>
</div>


<p>In the code I use ternary operators to keep the code small, if it became more complex you should introduce functions to handle the more code instead of just adding lines of code.</p>

<p>I get rid of the <em>if</em> condition you used to skip the last element, as I thought is was hard to understand the meaning, and someone could think of a bug, as the last element is:</p>

<pre><code>{
    "name": "file2.md"
}
</code></pre>

<p>Without the <em>url</em> property.</p>

<p>Hope this is intetional, now I think is much clear anyway.</p>
    </div>