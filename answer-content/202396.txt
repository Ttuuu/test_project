<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The conventional naming for arguments in C# is camelCase:</p>

<blockquote>
  <p><code>AccountLogin _AccCred</code></p>
</blockquote>

<p>looks better as</p>

<pre><code>AccountLogin accountLogin
</code></pre>

<hr>

<p>I wonder if this: <code>DatabaseCredentials?.DatabaseName</code> is of any use? if <code>DatabaseCredentials is null</code> what database can you then connect to?</p>

<p>I would throw an exception if <code>DatabaseCredentials == null</code>. This applies probably to <code>AccountCredentials</code> too.</p>

<hr>

<p>String concatenations are a rather inefficient way to  build strings:</p>

<p>instead of </p>

<pre><code>string ConnInfo = "server=" + DatabaseCredentials.Server + ";" +
                              "user=" + AccountCredentials.Username + ";" +
                              "database=" + DatabaseCredentials.DatabaseName +
                              "port=" + DatabaseCredentials.Port + 
                              "password=" + AccountCredentials.Password;
</code></pre>

<p>use either </p>

<pre><code>StringBuilder
</code></pre>

<p>or</p>

<pre><code>String.Format("server={0};user={1};...", DatabaseCredentials.Server, AccountCredentials.Username,...);
</code></pre>

<p>or</p>

<p>string interpolation:</p>

<pre><code>$"server={DatabaseCredentials.Server};user={AccountCredentials.Username};..."
</code></pre>

<hr>

<p><code>MySqlConnection</code> implements <code>IDisposable</code>. Therefore your wrapper should do that as well, so you can dispose the <code>_connection</code> object, and the client can then use your wrapper like this:</p>

<pre><code>using (DatabaseConnection dc = new DatabaseConnection(...))
{
  // Use the connection...
}
</code></pre>

<hr>

<p>The <code>try-catch</code>-statement in the <code>Connect()</code> method is of no use to the client because, if the connection fails, it is not signaled to the client. Either rethrow the exception, throw a new exception of your own or simply ignore any exceptions here and let the client handle them.</p>

<hr>

<p>in</p>

<pre><code>public void Close()
{
    _connection.Close();
}
</code></pre>

<p>you should test for <code>_connection == null</code>.</p>
    </div>