<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Think twice before modifying function parameters</h3>

<p>The posted code modifies the content of the input array <code>nums</code> and also returns it.
When a function returns something,
it can be confusing if it also modifies the input â€” a side effect.
Modifying the input and not returning anything (<code>void</code> in other programming languages) is not confusing.
I think it's important to make a conscious of choice between two non-confusing behaviors: either modify the input and return nothing, or not modify the input and return the result as a new object.</p>

<h3>Insert <code>k</code> items at the start of an array in one step instead of one item in <code>k</code> steps</h3>

<p>In most programming languages, and I think in the context of this exercise, "array" usually means a contiguous area of memory. Inserting an element at the start is implemented by copying existing elements to shift them in memory by 1 position.</p>

<p>For this reason, for a solution to the array rotation problem, I would avoid repeatedly inserting elements at the start of the array, to avoid repeated copying of elements. Even if arrays in JavaScript may behave differently, I would prefer a solution that doesn't raise questions about the potential underlying implementation of arrays, and looks objectively easier to accept.</p>

<p>That is, I would prefer to store <code>k</code> values in temporary storage, shift the other elements by <code>k</code> steps (iterating over them only once), and then copy back the <code>k</code> elements to the correct positions.</p>

<pre><code>function rotate(nums, k) {
  k %= nums.length;
  const rotated = new Array(nums.length);
  for (let i = 0; i &lt; k; i++) {
    rotated[i] = nums[nums.length - k + i];
  }
  for (let i = 0; i &lt; nums.length - k; i++) {
    rotated[i + k] = nums[i];
  }
  return rotated;
}
</code></pre>

<p>This is <span class="math-container">\$O(n)\$</span> in both time and space.
The extra space is needed to avoid modifying the input.
If we preferred modifying the input,
then only <span class="math-container">\$O(k)\$</span> extra space would be needed,
for temporary storage of elements that would be overwritten.</p>

<h3>Taking advantage of JavaScript's features</h3>

<p>Slightly more expensive in terms of time and space,
but my preferred solution would make better use of the built-in functions on arrays in JavaScript than the version in the previous section,
in much more compact code:</p>

<pre><code>function rotate(nums, k) {
  k %= nums.length;
  const m = nums.length - k;
  return nums.slice(m).concat(nums.slice(0, m));
}
</code></pre>
    </div>