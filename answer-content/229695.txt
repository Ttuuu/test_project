<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><p>Don't do <a href="https://stackoverflow.com/questions/1452721/why-is-using-namespace-std-considered-bad-practice"><code>using namespace std;</code></a>.</p></li>
<li><p>Use an appropriate type for the range. The number of test-cases can never be negative, so we should use an unsigned integer. It looks like the player capabilities are similarly unsigned.</p></li>
<li><p><code>for (int i = 1; i &lt;= testCases; i++)</code> In C++, it's more usual to use <code>!=</code> for the end condition, and use the pre-increment operator (since we don't a temporary value). It's usually safer to use a zero-based index, and simply add one for printing if we need to convert to one-based: <code>for (int i = 0; i != testCases; ++i)</code>.</p></li>
<li><p><code>int attack {}, defense {}, physical {};</code>. Declare variables (especially POD variables) as close to the point of use as possible to minimize their scope and avoid reusing them for multiple things. These should be declared in each of the innermost loops.</p></li>
<li><p><code>reserve</code> is not a constant value, so this is not valid C++: <code>int reservePlayers [reserve];</code>, even if some compilers allow it. We should use a <code>std::vector</code> instead. (This particular array also appears to be unused!)</p></li>
<li><p><code>for (int i = 0; i &lt; totalOriginalPlayer; i++)</code> The loop condition variable shadows the <code>i</code> variable of the outer loop. This is likely to cause confusion. It would be better to pick a meaningful name for the loop variables, e.g. <code>outfielderIndex</code>.</p></li>
<li><p>It might be neater to separate the logic of the program from reading the input. Then we could reuse the input reading code for both sets of players.</p>

<pre><code>std::vector&lt;std::uint32_t&gt; outfielders = ReadPlayerData(numOutfielders);
std::vector&lt;std::uint32_t&gt; reserves = ReadPlayerData(numReserves);
std::uint32_t total = // ...
std::uint32_t worstOutfielder = // ...
std::uint32_t bestReserve = // ...

// ... do output
</code></pre></li>
<li><p>We can use the standard library to do the necessary math. Specifically <code>std::accumulate</code>, <code>std::min_element</code> and <code>std::max_element</code>.</p></li>
</ul>
    </div>