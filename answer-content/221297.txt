<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ol>
<li><p>One thing you can do to secure your Google API key is to make the whole request to Google Map API on the server. So, instead of having a call from the frontend to Google API, you create a new <code>GET</code> request on the server that just wraps the call to Google API. And then, from your website, just make a request to your server instead to Google API.</p></li>
<li><p>If by <em>safe</em> you mean "I want <strong>every</strong> request to be written in the file and not to lose any data because of parallel requests", then you need some sort of locking mechanism. I'm not a PHP developer, and I'm not sure what's the best way to achieve this. A quick search on the internet for <em>PHP lock</em> resulted in <a href="https://stackoverflow.com/questions/325806/best-way-to-obtain-a-lock-in-php">this</a> and <a href="https://github.com/php-lock/lock" rel="nofollow noreferrer">this</a>. So once you have some way of locking, you just need to surround your the <code>true</code> part of your condition with the locking mechanism.</p></li>
<li><p>You can do so by configuring your web server. If you're using Apache, then you can take a look at <a href="https://stackoverflow.com/questions/2679524/block-direct-access-to-a-file-over-http-but-allow-php-script-access">this SO question</a>.</p></li>
<li><p>I don't see any problem with your JS. You are using JQuery for making requests to the server and I guess this is fine. If you would to query for some HTML element, then I think that native APIs outperform JQuery, so that would be a thing to take into consideration. Maybe consider using native <a href="https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API" rel="nofollow noreferrer">Fetch API</a> if you use JQuery only for the server call. This will only speed up the page load time, since the browser won't need to load the remote library.</p></li>
<li><p>I don't have anything else to add.</p></li>
</ol>
    </div>