<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Prefer to use the modern version of typedef (which is using).</p>

<pre><code>    typedef std::variant&lt;bool,
            int,
            float,
            double,
            char,
            std::string,
            Vector2f,
            Vector2d,
            Color3f
            &gt; VariantType;
</code></pre>

<p>Now looks like:</p>

<pre><code>    using VariantType = std::variant&lt;bool,
            int,
            float,
            double,
            char,
            std::string,
            Vector2f,
            Vector2d,
            Color3f
            &gt;;
</code></pre>

<hr>

<blockquote>
  <p>Should getProperty return a (const) reference?</p>
</blockquote>

<p>Yes.</p>

<blockquote>
  <p>Should I switch for name to const char* instead of using a std::string?</p>
</blockquote>

<p>No. At some point you have to build a string (to have a key to compare against the map). May as well be as the parameter.</p>

<blockquote>
  <p>From a C++17 perspective: Are there more modern features of the language that I should use?</p>
</blockquote>

<p>No this is fine.</p>

<blockquote>
  <p>Should const T defaultValue be const T&amp; defaultValue?</p>
</blockquote>

<p>Yes.</p>

<blockquote>
  <p>Is it clear from the name what is the idea of the defaultValue? Should I add a comment here?</p>
</blockquote>

<p>I don't think it needs a comment.</p>
    </div>