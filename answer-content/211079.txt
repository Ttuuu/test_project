<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You could begin with <code>win</code> checking. The way you have done it works fine. But what if you were to resize the board? lets say <code>5x5</code>? You would need to write lots of if/else statements to check for winning cases.</p>

<p>Now, instead of using loads of <code>if/else</code> statements to look for winning cases you could use <code>for</code> loops to look trough <code>rows</code>, <code>columns</code>, and <code>crosses</code> as shown here:<br><br>
<a href="https://i.stack.imgur.com/tphhD.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/tphhD.png" alt="enter image description here"></a></p>

<p>Here is an example of what I am talking about (you can use this if you wish so):</p>

<p>this one is for <code>column</code> checking (top-down)</p>

<pre><code># check columns
# symbol can be x or o
def checkCol(symbol, board):
    counter = 0
    for i in range(len(board)):
        for j in range(len(board)):
            if board[j][i] == symbol:
                counter += 1
            else:
                counter = 0
        if counter == len(board):
            break
    return True if counter == len(board) else False
</code></pre>

<p>and this is for <code>row</code> checking (left-right)</p>

<pre><code># check rows
# symbol can be x or o
def checkRow(symbol, board):
    counter = 0
    for i in range(len(board)):
        for j in range(len(board)):
            if board[i][j] == symbol:
                counter += 1
            else:
                counter = 0
        if counter == len(board):
            break
    return True if counter == len(board) else False
</code></pre>

<p>Positive cross:</p>

<pre><code>#prositive cross (top left to bottom right)
def checkCrossPositive(symbol, board):
    counter = 0
    for i in range(len(board)):
        if board[i][i] == symbol:
            counter+=1
        else:
            counter = 0
    return True if counter == len(board) else False
</code></pre>

<p>Negative cross:</p>

<pre><code># negative cross (top right to bottom left)
def checkCrossNegative(symbol, board):
    counter = 0
    j = len(board)-1
    for i in range(len(board)):
        if board[i][j] == symbol:
            counter += 1
        else:
            counter = 0
        j-=1
    return True if counter == len(board) else False
</code></pre>

<p>Here's how it can be used:</p>

<pre><code>def check_win(board):
    return \
        (checkRow('x', board) or checkRow('o', board) )\
    or  (checkCol('x', board) or checkCol('o', board))\
    or  (checkCrossPositive('x', board) or checkCrossPositive('o', board))\
    or  (checkCrossNegative('x', board) or checkCrossNegative('o', board))
</code></pre>

<p><strong>EDIT:</strong></p>

<p>Avoid manually placing numbers here and there such as in</p>

<pre><code>if num_moves == 9 and not win:
</code></pre>

<p>instead of that you could have it in a "constant" variable.
(I know <code>python</code> doesn't have <code>constant</code> but just for the sake of best-practice)</p>

<pre><code>if num_moves == MAX_MOVES and not win:
</code></pre>

<hr>

<p><strong>EDIT (Explanation for column checker):</strong></p>

<p><strong>Part 1</strong></p>

<p>Usually when we iterate over a two dimensional array we use <code>i</code> and <code>j</code> as <code>X</code> and <code>Y</code> where <code>i=Y</code> and <code>j=X</code>
let's say we have a two dimensional array as this:</p>

<pre><code>array = [
    [1, 2, 3, 4, 5],
    [6, 7, 8, 9, 0]
]
</code></pre>

<p>If we iterate over this array the usual way we'd get <code>1,2,3,4,5</code> &amp; <code>6,7,8,9,0</code>
as output because the <code>Y-axis ( i )</code> represents indexes of inner arrays (those that contain numbers 1,2,3 ...).
First (inner-)array has index <code>0</code>, the second one has <code>1</code> and so on it goes.</p>

<p>This way we are iterating <code>row =&gt; col1, col2, col3, ...</code> meaning <code>i =&gt; j1, j2, j3, ...</code> but since we need to
look for columns rather than rows we need to switch the usage of <code>i</code> and <code>j</code>
where, for example, to access number <code>1</code> in the first array we would have the following: <code>array[i][j]</code> or <code>array[0][0]</code>
but in this case we have to use it as <code>array[j][i]</code> <em>(&lt;- notice that i switched them)</em>.</p>

<p>Now when we have switched the index (representors?) we would get an output as this:
<code>1,6</code> &amp; <code>2,7</code> &amp; <code>3,8</code> &amp; <code>4,9</code> &amp; <code>5,6</code></p>

<p>Here is a "GIF" to animate the concept behind this:
<a href="https://i.imgur.com/4HqLpcD.mp4" rel="nofollow noreferrer">https://i.imgur.com/4HqLpcD.mp4</a></p>

<p><strong>Part 2</strong></p>

<p>As you might have noticed there is a <code>counter</code> variable initialized with <code>0</code> at the very beginning of the code.
The purpose of this <code>counter</code> is to keep track of how many of <code>_symbol_</code> we have found while iterating of columns.</p>

<p>Inside the second loop there's a code block:</p>

<pre><code>if board[j][i] == symbol:
    counter += 1
else:
    counter = 0
</code></pre>

<p>The purpose of this part is to increase our <code>counter</code> variable by <code>1</code> if a symbol is found. if not it is re-set back to <code>0</code>.
This is because for someone to win, the whole column would have to be of the same symbol, let's say symbol <code>o</code>
and if any section in the column does not match our symbol <code>o</code> then it means <code>player-o</code>
can not win because in order for him to win all of the sections in the current column (index <code>0</code> to <code>4</code>)
would have to be of the same symbol.</p>

<p>When the first column has been scanned, we must check whether we have found enough symbols to call it a win or not.</p>

<pre><code>if counter == len(board):
    break
</code></pre>

<p>Since our board is a square we can safely compare our counter to the length of our board.
Why? Because there are as many indexes(<code>0</code> to <code>4</code>) as the length(<code>5</code>) of our board.
So when I have filled the first column with symbol-<code>o</code> there will be exactly 5 <code>o</code>s in that column.</p>

<p>When the above statement is true; main loop will break and then a boolean value is returned:</p>

<pre><code>return True if counter == len(board) else False
</code></pre>

<p>As obvious as it is: When counter is equal to the length of our board <code>True</code>(won!) is returned otherwise <code>False</code> (didn't win)</p>
    </div>