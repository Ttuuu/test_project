<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First of all, I think your code is not bad at all. The separation in classes and their respective use is quite okay.</p>

<p>Nevertheless, I have a couple of suggestions that might make your code even better:</p>

<h3>Try to make things as unsurprising as possible</h3>

<ul>
<li><p>Naming one of your classes <code>Character</code> is likely to send people on a wrong track, as <code>Character</code> is the name of Java's wrapper object class for <code>char</code> primitive variables.</p></li>
<li><p>It's a good idea to adhere to naming conventions:<br>
Methods, which only return a class attribute ("getters") should be named <code>get&lt;Attribute&gt;</code>, i.e. <code>getPoint</code>, <code>getPreviousPoint</code>, <code>getSymbol</code>, <code>getX</code>, <code>getY</code>, etc.
(you have already done it right for the "setters": <code>setX</code>, <code>setY</code>, etc)</p></li>
</ul>

<h3>Try to keep things as local and as static as possible</h3>

<ul>
<li>Can you implement the classes, that are instantiated exactly once during the lifetime of your application in a way, that leverages that?<br>
Here, the possible candidates <code>UserInterface</code>, <code>Scanner</code> and <code>Dungeon</code> hold the status of your game, so <code>static</code> is out of the question. (You could consider using a <em>Singleton</em> for these, if you wanted to)  </li>
<li>Methods, that are used only locally should be declared <code>private</code><br>
e.g. <code>noOfKeys()</code> and <code>getRandomDirection()</code>, which are both used exclusively from within <code>MovementKey</code>.<br>
(I would even include the functionality of those methods in <code>getRandomKey()</code> and erase them altogether).</li>
</ul>

<h3>Try to use existing mechanisms</h3>

<p>To store the mapping from <code>Direction</code> to their respective keys (and vice versa), you create a new bidirectional Map <code>BiMap</code>, and use that in <code>MovementKey</code>.<br>
In my Opinion, this could be more elegantly implemented by augmenting the enum <code>Direction</code> by an attribute which holds the keys, a getter for it and a couple of convenience methods (<code>getRandomKey()</code> ...)  </p>

<p>This would make <code>BiMap</code> and <code>MovementKey</code> unnecessary.</p>
    </div>