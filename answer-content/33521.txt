<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The short answer to your question is that <em>forms</em> are <em>evaluated</em> while <em>functions</em> are <em>called</em> (using <code>funcall</code> or <code>apply</code>).</p>

<p>I.e., the way you structure your code (lists of forms) you are painting yourself into the <code>eval</code> corner.  You need to replace lists of forms with lists of functions and then you will be able to use <code>funcall</code> or <code>apply</code>.</p>

<p>E.g., replace</p>

<pre><code>`((problem_id ,(read-string "inpur problem id: "))
  (language ,(read-string "select language: 0:G++,1:GCC,2:Java,3:Pascal,4:C++,5:C,6:Fortan "))
  (source ,(with-temp-buffer
            (insert-file-contents (read-file-name "select source file"))
            (buffer-string)))
  (submit "Submit"))
</code></pre>

<p>with something like</p>

<pre><code>`((problem-id read-string "problem id: ")
  (language read-string "language: 0:G++,1:GCC,2:Java,3:Pascal,4:C++,5:C,6:Fortan ")
  (source ,(lambda () (file-to-string (read-file-name "source file: "))))
  (submit identity "Submit"))
</code></pre>

<p>Where <code>file-to-string</code> is defined thus:</p>

<pre><code>(defun file-to-string (file)
  "Read the content of FILE and return it as a string."
  (with-temp-buffer
    (insert-file-contents file)
    (buffer-string)))
</code></pre>

<p>Now you can replace <code>(eval form)</code> with <code>(apply (car form) (cdr form))</code>.</p>
    </div>