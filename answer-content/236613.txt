<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Operator Consistency</h1>

<p>You provide operators for <code>+</code>, <code>-</code>, etc., but as it is some things I would expect to do are illegal, such as</p>

<pre class="lang-cpp prettyprint-override"><code>ComplexNumber c(1, 2);
ComplexNumber d(3, 4);
d += c;
</code></pre>

<p>Generally the recommendation with these forms of operators is to implement the <code>+=</code> form in your class, and then define <code>+</code> as a non-member in terms of <code>+=</code>. For example:</p>

<pre><code>class ComplexNumber {
public:
  // ...
  ComplexNumber&amp; operator+=(ComplexNumber b) {
    this-&gt;real += b.real;
    this-&gt;imaginary += b.imaginary;
    return *this;
  }

  friend ComplexNumber operator+(ComplexNumber a, ComplexNumber b) {
    // note a is a copy here
    a += b;
    return a;
  }

  // and so forth for -, *, /
};
</code></pre>

<p>Doing it this way also means that</p>

<pre><code>ComplexNumber c(1, 2);
ComplexNumber d = c + 1;  // compiles with both your code and mine
ComplexNumber e = 1 + c;  // only compiles with the above changes
</code></pre>

<p>will compile. If it's not desirable that a number <code>1</code> will implicitly convert to a <code>ComplexNumber</code>, consider marking your constructor <code>explicit</code>.</p>
    </div>