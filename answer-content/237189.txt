<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>@Linny. First of all thanks for your solution. It's a real improvement and very good explained. This push me to try to enhance it even more. </p>

<p>This new proposal is based on your solution, and it includes two additional changes. Both of them according to <a href="https://williamdurand.fr/2013/06/03/object-calisthenics/" rel="nofollow noreferrer">Jeff Bay's Object Calisthenics</a> (some basic rules to write better Object Oriented code): </p>

<blockquote>
  <p>Rule 2: "Don´t use the else keyword".  </p>
</blockquote>

<p>There's only one else. See below:</p>

<pre><code>    if youtuber in youtube_response:
        print(youtube_response[youtuber])
    else:
        print('I dont know that one. Ill check them out.')
</code></pre>

<p>Luckily, the whole 4 lines (if/else) can be replaced by one line:</p>

<pre><code>    print(youtube_response.get(youtuber, 'I dont know that one. Ill check them out.'))
</code></pre>

<p><a href="https://docs.python.org/3/library/stdtypes.html" rel="nofollow noreferrer">Get behaviour</a> is the following:  <code>get(key[, default])</code> return the value for key if key is in the dictionary, else default. </p>

<blockquote>
  <p>Rule 1: "Only One Level Of Indentation Per Method."  </p>
</blockquote>

<p>Run_app function has two additional level of indentation:</p>

<ul>
<li>First line is considered as level 0 ´While True´</li>
<li>Level 1 starts below first while</li>
<li>And level 2 starts below second while </li>
</ul>

<pre><code>def run_app():
    while True:
        # Level 1
        favorite_youtuber()
        again = input("Play again? (Y/N)").lower()
        while again not in "yn":
            # Level 2
            print("Please enter Y/N!")
            again = input("Play again? (Y/N)").lower()
        if again == "n":
            # Level 2
            break
    print("Thank you for using this app!")
</code></pre>

<p>This function in fact has two responsibilities, <strong>run_app</strong> and check if <strong>play_again</strong>. My proposal is to extract this second responsibility to another function. This should improve code readability and lower its complexity:</p>

<pre><code>def run_app():
    while True:
        favorite_youtuber()
        if not play_again():
            break
    print("Thank you for using this app!")


def play_again():
    while (again := input("Play again? (Y/N)").lower()) not in "yn":
        print("Please enter Y/N!")
    return again == "y"
</code></pre>

<p>I hope this can be helpful</p>
    </div>