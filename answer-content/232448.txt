<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Building on the previous two answers, I like to suggest a different approach to smoothing the series of quaternions.</p>

<p>Right now, you are weighting the past 16 frames equally, which is requiring you to keep all 16 rotations and use a bunch of calls to lerp them all together to get the average.</p>

<p>A different, simpler to implement, approach is to use an exponentially weighted moving average as your smoothing function. That would look like:</p>

<pre><code>public static Quaternion SmoothRotation(Quaternion nextFrame)
{
  const float alpha = 0.118; // 2/(N+1), N is number of frames in equivalent simple moving average) 
  lastFrame = Quaternion.Lerp(lastFrame, nextFrame, alpha);
  return lastFrame;
}
private static Quaternion lastFrame = Quaternion.Identity;
</code></pre>

<p>The results won't be exactly like your equally weighted moving average, but it should still smooth acceptably. The higher <code>alpha</code> is, the less smoothing will be done. The lower <code>alpha</code> is, the longer it takes to reach a steady state after a fast transition.</p>
    </div>