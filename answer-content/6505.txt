<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Using GCC/LLVM on MacOS X, and 64-bit compilation, and generating assembler with:</p>

<pre><code>gcc -S -Os clamp.c
</code></pre>

<p>where <code>clamp.c</code> contains:</p>

<pre><code>typedef unsigned char BYTE;

BYTE Clamp_1(int n)
{
    n &amp;= -(n &gt;= 0);
    return n | ((255 - n) &gt;&gt; 31);
}

BYTE Clamp_2(int n)
{
    if (n &gt; 255)
        n = 255;
    else if (n &lt; 0)
        n = 0;
    return n;
}
</code></pre>

<p>The assembler for the two functions (with prologue and epilogue) is:</p>

<pre><code>    .section        __TEXT,__text,regular,pure_instructions
    .globl  _Clamp_1
_Clamp_1:
Leh_func_begin1:
    pushq   %rbp
Ltmp0:
    movq    %rsp, %rbp
Ltmp1:
    movl    %edi, %eax
    shrl    $31, %eax
    xorl    $1, %eax
    negl    %eax
    andl    %edi, %eax
    movl    $255, %ecx
    subl    %eax, %ecx
    sarl    $31, %ecx
    orl     %eax, %ecx
    movzbl  %cl, %eax
    popq    %rbp
    ret
Leh_func_end1:

    .globl  _Clamp_2
_Clamp_2:
Leh_func_begin2:
    pushq   %rbp
Ltmp2:
    movq    %rsp, %rbp
Ltmp3:
    cmpl    $256, %edi
    jl      LBB2_2
    movl    $255, %edi
    jmp     LBB2_4
LBB2_2:
    testl   %edi, %edi
    jns     LBB2_4
    xorl    %edi, %edi
LBB2_4:
    movzbl  %dil, %eax
    popq    %rbp
    ret
Leh_func_end2:
</code></pre>

<p>The <code>pushq</code>, <code>popq</code> and <code>ret</code> are the function call overhead.  Your code (<code>Clamp_1()</code>) assembles to 11 instructions; mine to 9 (but there are two jumps in mine, which might wreak havoc on pipelined execution).  Neither approaches the 7 instructions in your optimized version.</p>

<p>Interestingly, though, when I use GCC 4.6.1 on the same code, the assembler output is:</p>

<pre><code>    .text
    .globl _Clamp_1
_Clamp_1:
LFB0:
    movl    %edi, %eax
    movl    $255, %edx
    notl    %eax
    sarl    $31, %eax
    andl    %edi, %eax
    subl    %eax, %edx
    sarl    $31, %edx
    orl     %edx, %eax
    ret
LFE0:
    .globl _Clamp_2
_Clamp_2:
LFB1:
    xorl    %edx, %edx
    testl   %edi, %edi
    movl    $255, %eax
    cmovns  %edi, %edx
    cmpl    $255, %edx
    cmovle  %edx, %eax
    ret
LFE1:
</code></pre>

<p>Now I see 8 instructions in <code>Clamp_1</code> and 6 in <code>Clamp_2</code> apart from the <code>ret</code>.</p>

<hr>

<p>Further experimentation shows that there is a difference in the output between <code>gcc -Os -S clamp.c</code> and <code>gcc -S -Os clamp.c</code>; the former generates the optimized (smaller) outputs; the latter generates the more verbose output.</p>
    </div>