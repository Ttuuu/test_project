<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Expanding on papagaga's answer</p>

<hr>

<pre><code>#include &lt;iostream&gt;
</code></pre>

<p>Be aware that many of the C++ implementations currently transparently inject a static constructor into ever translation unit that includes <code>&lt;iostream&gt;</code>.  My advice, drop any support for <code>&lt;iostream&gt;</code> or split it into its own IO utility class.</p>

<hr>

<pre><code>    struct ListNode {
        int value;
        std::shared_ptr&lt;ListNode&gt; next;
        ListNode(int val) : value(val), next(nullptr) {}
    };
</code></pre>

<p>Why name this <code>ListNode</code>? It's already (privately) encapsulated by <code>SinglyLinkedList</code>.  Perhaps just call it <code>Node</code>?</p>

<p>When you have constants, you can use in-class member initialization.</p>

<pre><code>        std::shared_ptr&lt;ListNode&gt; next = nullptr;
        ListNode(int val) : value(val) {}
</code></pre>

<p>Why <code>std::shared_ptr</code>? Take some time and watch <a href="https://www.youtube.com/watch?v=JfmTagWcqoE" rel="nofollow noreferrer">Herb Sutter's talk from CppCon 2016: Leak-Freedom in C++... By Default</a>.</p>

<p>Papagaga touched on this, but it really needs emphasis.  Anytime you are dealing with ownership, you need to keep in mind how the default-generated special member functions operate in that context.  The <a href="https://cpppatterns.com/patterns/rule-of-five.html" rel="nofollow noreferrer">rule of three/five</a> is very important.  See <a href="https://www.youtube.com/watch?v=IzQk6IM74JE" rel="nofollow noreferrer">Quuxplusone's talk from CppNow 2016: The Rule of Seven (Plus or Minus Two)</a>.</p>

<p>You should include <code>&lt;memory&gt;</code> for <code>std::shared_ptr&lt;&gt;</code>.</p>

<hr>

<pre><code>    std::shared_ptr&lt;ListNode&gt; head;
    std::shared_ptr&lt;ListNode&gt; tail;

    SinglyLinkedList();

SinglyLinkedList::SinglyLinkedList () : head (nullptr), tail (nullptr) {
}
</code></pre>

<p>If you can avoid using defining the special member functions, then do so.  Use in-class member initializers here.</p>

<pre><code>    std::shared_ptr&lt;ListNode&gt; head = nullptr;
    std::shared_ptr&lt;ListNode&gt; tail = nullptr;

    SinglyLinkedList();

SinglyLinkedList::SinglyLinkedList () {
}
</code></pre>

<p>As long as you never declare any kind of constructor for your class type, the compiler will implicitly declare one for you.</p>

<pre><code>    std::shared_ptr&lt;ListNode&gt; head = nullptr;
    std::shared_ptr&lt;ListNode&gt; tail = nullptr;

    // Don't need this
    // SinglyLinkedList();

// Or this
// SinglyLinkedList::SinglyLinkedList () {
// }
</code></pre>

<p>If you declare/define any another constructor, the compiler will not implicitly generate the default constructor for you.  To unsuppress the implicitly-generated default constructor, you can declare the default constructor with the keyword <code>default</code>.</p>

<pre><code>    std::shared_ptr&lt;ListNode&gt; head = nullptr;
    std::shared_ptr&lt;ListNode&gt; tail = nullptr;

    SinglyLinkedList() = default;

// Still don't need this...
// SinglyLinkedList::SinglyLinkedList () {
// }
</code></pre>

<p>The same can be done with the destructor...</p>

<pre><code>    ~SinglyLinkedList() = default;
</code></pre>

<p>However, the semantics of the implicitly generated functions are meant to be used with values, not ownership references/pointers.  So you will need to provide a definition or hope your list never gets big enough to blow the stack.</p>

<hr>

<pre><code>    SinglyLinkedList();
    void print_list () const;
</code></pre>

<p>Try to be consistent with your spacing.  Spaces are great a differentiating between language constructs and functions.  You go back and forth between attached and detached parens.  Reserve detached parens for the language constructs</p>

<pre><code>for (/*...*/) { }

while (/*...*/) { }
</code></pre>

<p>and attach the parens to your functions.</p>

<pre><code>call(/*...*/) { }
</code></pre>

<hr>

<pre><code>    void push_back (int val);
    void pop_back ();
    void push_front (int val);
    void pop_front ();
</code></pre>

<p>Do not provide the tail operations as those will be surprising for users who may expect constant time operations.  See the <a href="https://en.wikipedia.org/wiki/Principle_of_least_astonishment" rel="nofollow noreferrer">Principle of Least Astonishment</a>.</p>

<hr>

<pre><code>    size_t get_size () const;
</code></pre>

<p>To avoid having to create a customization point to be able to use your container with non-member <code>std::size()</code>, you should name this member function <code>size()</code>.</p>

<p>The C++ standard makes no guarantee that the unqualified <code>size_t</code> will exist.  You should qualify your types (<code>std::size_t</code>) and include the library that defines it (<code>&lt;cstddef&gt;</code>).  Do not rely on <code>&lt;iostream&gt;</code> to latently include it for you.</p>

<p>If you are not going to provide splicing operations, consider caching the size.  Splicing is a constant time operation. If you cache the size, you'll need to recalculate the size on every slice, resulting in a linear-time operation.  This is why <code>std::forward_list</code> doesn't have a size member function.</p>

<hr>

<pre><code>    void SinglyLinkedList::print_list () const { ... }
</code></pre>

<p><code>&lt;iostream&gt;</code> provides an unnecessary initialization cost due to the static constructors for those that simply want to store data and not print it to the console. Provide an alternative.  Here are a few design patterns to consider:</p>

<ul>
<li>Iterator - Objects that traverse the container providing direct access to the values.</li>
<li>Visitor - A function that takes another function (or lambda) and applies each value to that function.</li>
<li>Adaptor - An IO object that inherits the container, providing functionality for those who want to opt-in at the costs above.</li>
</ul>

<hr>

<pre><code>void SinglyLinkedList::push_back(int val) { ... }
</code></pre>

<p>This doesn't need to be <span class="math-container">\$\mathcal{O}(n)\$</span>. If <code>tail</code> doesn't exist, then neither should <code>head</code>.  If <code>tail</code> does exist, then you append your new node to the tail node.</p>

<hr>

<pre><code>    // swap is O(1), find is O(n)
    // Should I be swapping nodes instead of values?
    std::shared_ptr&lt;ListNode&gt; val1Node = find (val1);
    std::shared_ptr&lt;ListNode&gt; val2Node = find (val2);

    if (!val1Node) {
        std::cout &lt;&lt; "Value " &lt;&lt; val1 &lt;&lt; " is not in the list.\n";
        return;
    }
    if (!val2Node) {
        std::cout &lt;&lt; "Value " &lt;&lt; val2 &lt;&lt; " is not in the list.\n";
        return;
    }

    int tempNodeVal = val1Node-&gt;value;
    val1Node-&gt;value = val2Node-&gt;value;
    val2Node-&gt;value = tempNodeVal;
</code></pre>

<p>When working with generic types where the size isn't known, it's going to better to swap the links.  For this case, why swap? You already have the new values cached in temporaries from the arguments. Just assign them.</p>

<pre><code>    std::shared_ptr&lt;ListNode&gt; val1Node = find (val1);
    std::shared_ptr&lt;ListNode&gt; val2Node = find (val2);

    if (!val1Node || !val2Node) {
        // indicate that a swap didn't happen?
        return false;
    }

    val1Node-&gt;value = val2;
    val2Node-&gt;value = val1;
    return true;
</code></pre>
    </div>