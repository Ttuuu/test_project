<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>HoboProber's <a href="https://codereview.stackexchange.com/a/223300/92478">answer</a> is good with regards to clean code, but more than likely slower than what you already have.</p>

<p>At the moment we basically have to following variants of the key function:</p>

<pre><code>from math import floor


def key_op(particle, cell_size):
    return int(particle[0] / cell_size), int(particle[1] / cell_size), int(particle[2] / cell_size)


def key_hobo(particle, cell_size):
    return tuple(coordinate // cell_size for coordinate in particle)


def key_op_edit(particle, cell_size):
    """This was taken from your edit that was rolled back due to answer invalidation"""
    return floor(particle[0] / cell_size), floor(particle[1] / cell_size), floor(particle[2] / cell_size)
</code></pre>

<p>HoboProber already sneakily introduced <a href="https://docs.python.org/3/glossary.html#term-floor-division" rel="nofollow noreferrer">floor division</a> (think <code>\\</code>) to you, so the explicit version of this is also up for discussion:</p>

<pre><code>def key_floor_div(particle, cell_size):
    return particle[0] // cell_size, particle[1] // cell_size, particle[2] // cell_size
</code></pre>

<p>The timings for them are as follows:</p>

<pre class="lang-none prettyprint-override"><code>key_op          1.28 µs ± 16.2 ns (mean ± std. dev. of 7 runs, 1000000 loops each)
key_op_edit     1.62 µs ± 13.8 ns (mean ± std. dev. of 7 runs, 1000000 loops each)
key_hobo        2.09 µs ± 34.3 ns (mean ± std. dev. of 7 runs, 100000 loops each)
key_floor_div   1.11 µs ± 14.3 ns (mean ± std. dev. of 7 runs, 1000000 loops each)
</code></pre>

<p>The timing was done in an IPython environment running <code>%timeit func(example, cell_size)</code> with <code>example = (23849.234, 1399283.8923, 2137842.24357)</code> and <code>cell_size = 10</code>.</p>

<p>Based on these results there seems to be a narrow win for the floor div version over the original implementation.</p>

<p>But can we do better? Enter <a href="https://numba.pydata.org/" rel="nofollow noreferrer">numba</a>, a just-in-time compiler for Python code. At this early testing stage basically all you have to do is <code>from numba import jit</code> and then</p>

<pre><code>@jit(nopython=True)
def key_op_numba(particle, cell_size):
    return int(particle[0] / cell_size), int(particle[1] / cell_size), int(particle[2] / cell_size)
</code></pre>

<p>Act accordingly for the other versions. Now lets look at the timings:</p>

<pre class="lang-none prettyprint-override"><code>key_op          623 ns ± 8.42 ns (mean ± std. dev. of 7 runs, 1000000 loops each)
key_op_edit     618 ns ± 10.5 ns (mean ± std. dev. of 7 runs, 1000000 loops each)
key_hobo*       N/A
key_floor_div   628 ns ± 7.06 ns (mean ± std. dev. of 7 runs, 1000000 loops each)
</code></pre>

<p>As you can see numba can easily double the performance of this functions, and that is with the default settings. You might be able to squeeze out a little bit more of you are really going for it.</p>

<hr>

<p><strong>Bug</strong>: There is likely a bug in this piece of code:</p>

<pre><code>if k in self.cells:
    c = self.cells[k]
else:
    c = set()
    self.cell_size[k] = c
#            ^-- should likely be self.cells here
</code></pre>

<p>Note: a <a href="https://docs.python.org/3/library/collections.html#collections.defaultdict" rel="nofollow noreferrer"><code>defaultdict</code></a> can help to simplify this part of the code, though I cannot really say something on how its performance compares to that of a normal dict and your member-check/if-construct.</p>

<hr>

<p>*numba does not seem to like to instantiate a tuple from a generator expression, transforming it into a list comprehension yields <code>1.25 µs ± 25.1 ns</code>. You then have to convert it to a tuple to make it hashable, e.g. <code>tuple(key_hobo_numba(example, cell_size)</code>, which leaves us with the final timing of <code>1.45 µs ± 14.8 ns</code>.</p>
    </div>