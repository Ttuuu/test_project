<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>While you check out the <code>ResponseEntityExceptionHandler</code> I'll take a look at the logical handling of exceptions.</p>

<p><strong>Using classes for what they were not intended for</strong></p>

<pre><code>    } catch (SQLException | ConnectionFailedException e) {
        return new ResponseEntity&lt;&gt;(HttpStatus.INTERNAL_SERVER_ERROR);
    } catch (ClassCastException e) {
        return new ResponseEntity&lt;&gt;(HttpStatus.FORBIDDEN);
</code></pre>

<p>In this example, <code>ClassCastException</code> is used to transfer information about access rights. This is confusing as ClassCastException is meant to be used to transfer information about a specific and serious programming error. A specific exception type should be created for the purpose of denying access here and any occurrence of ClassCastException should result in an internal server error (and full stack trace logging on error-level).</p>

<p><strong>Wrong result</strong></p>

<pre><code>    } catch (SQLException | ConnectionFailedException | IdDoesNotExistException e) {
        return new ResponseEntity&lt;&gt;(HttpStatus.INTERNAL_SERVER_ERROR);
</code></pre>

<p>If the <code>IdDoesNotExistException</code> is thrown as a result of something the user provided, the result is not an internal error. Internal errors should be reserved to things the client can not affect. It should thus return FORBIDDEN.</p>

<p><strong>Duplicate error handling</strong></p>

<p>It is a bit confusing that ID is being checked against value 0L in a code block that catches IdDoesNotExistException. It would seem that either returning 0L or throwing an IdDoesNotExistException would suffice, but not both. I would go for the exception approach, as they are more self documenting than magic numbers or null values.</p>
    </div>