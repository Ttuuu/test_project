<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Helper classes</strong></p>

<p>There is no need to use <code>static_cast&lt;bool&gt;</code> for your comparisons.  The relational operators are already <code>bool</code> values.  (If they are not, that is a problem with the definition of the operator for the type <code>T</code>.)</p>

<p>The standard <code>&lt;utility&gt;</code> header provides definitions for <code>operator!=</code> (from <code>operator==</code>) and <code>operator&gt;</code>, <code>operator&lt;=</code>, and <code>operator&gt;=</code> (from <code>operator&lt;</code>).  There is no need for you to define those four operators if you have the other two (equality and less-than).</p>

<p>Why do you have the <code>relational_operators</code> struct at all?  It shouldn't be necessary.</p>

<p><strong>Implementation</strong></p>

<p>The default constructor for <code>device_raw_ptr</code> leaves the <code>ptr</code> member uninitialized.  Typically a class like this would initialize <code>ptr</code> to <code>nullptr</code>, and you wouldn't need the constructor that takes a <code>std::nullptr_t</code> object.</p>

<p>The copy assignment operator should just be <code>ptr = other.ptr</code>, since that is the only thing in your class.  The way you have it is nonstandard behavior.  You construct a temporary, then pass it as a non-const reference to <code>swap</code>.  This is not supported as part of the language, although some compilers (MSVC) support it as an extension. You're constructing a temporary, doing a swap, then destroying the temporary (a noop in this case).  Similarly, the move assignment operator can be simplified to not use the temporary (<code>ptr = other.ptr; other.reset();</code>, or use three statements with an assignment to a local to avoid problems if you move assign an object to itself).</p>

<p><code>operator bool</code> does not need a <code>static_cast</code>.  Perhaps an explicit <code>ptr != nullptr</code> check, although a pointer will implicitly convert to a <code>bool</code>.</p>
    </div>