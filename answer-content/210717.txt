<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Errors / bugs / warnings</h3>

<p>So the first thing I did was try to compile your code. Baring in mind my command was:</p>

<pre><code>g++ -std=c++14 -pedantic -Wall -Wextra -Werror
</code></pre>

<p>And then some more extra warnings. (I assume your program is C++ 14 since <code>std::make_unique</code> was added in C++ 14)</p>

<p>Here are the list of errors:</p>

<pre><code>error: no previous declaration for ‘size_t kapil::get_appropriate_capacity(size_t)’
</code></pre>

<p>That function should be in an anonymous namespace or declared <code>static</code>, since it's  a local helper function.</p>

<pre><code>(In "std::size_t get_appropriate_capacity(std::size_t)")
error: useless cast to type ‘long unsigned int’
     if ((static_cast&lt;unsigned long&gt;(new_string_length) &lt;&lt; 1) &gt; std::numeric_limits&lt;size_t&gt;::max()) {
                                                      ^
</code></pre>

<p>I see what your trying to do here, but the way you go about it is not quite right. To check for an unsigned overflow here, the easiest way would be to check if the number is smaller after bitshifting:</p>

<pre><code>if ((new_string_length &lt;&lt; 1) &lt; new_string_length) {
</code></pre>

<p>A more general solution would be:</p>

<pre><code>if (std::numeric_limits&lt;std::size_t&gt;::max() &gt;&gt; a &lt; new_string_length) {
// So `new_string_length &lt;&lt; a` would have been greater than SIZE_T_MAX
</code></pre>



<pre><code>(After "string::~string() noexcept")
error: extra ‘;’
</code></pre>

<p>You just have an extra <code>;</code> that most compilers ignore. Simple fix, remove it.</p>

<pre><code>error: comparison of unsigned expression &lt; 0 is always false
     if (idx &lt; 0 || idx &gt;= sz_) {
         ~~~~^~~
</code></pre>

<p>As the error says, since <code>idx</code> is a <code>std::size_t</code> (Unsigned), it can never be less than <code>0</code>. Just remove the check.</p>

<pre><code>(In "std::ostream&amp; operator &lt;&lt;(std::ostream&amp;, const string&amp;)")
error: conversion to ‘std::streamsize {aka long int}’ from ‘size_t {aka long unsigned int}’ may change the sign of the result
       out.write(str.c_str(), str.size());
                              ~~~~~~~~^~
</code></pre>

<p>For (convoluted) reasons, <code>std::ostream::write</code> takes a signed number for it's count. Just <code>static_cast&lt;std::stream_size&gt;(str.size())</code>.</p>

<pre><code>(In "string::reverse_iterator string::rend()")
error: negative integer implicitly converted to unsigned type
     return reverse__iterator(this, -1);
                                    ~^
</code></pre>

<p>So you obviously want the index before <code>0</code> to be the end. This works, but the index before <code>0</code> is <code>SIZE_T_MAX</code>. But to show clearly that this is what you wanted, you should have casted to a <code>std::size_t</code>: <code>std::size_t{-1}</code> or <code>static_cast&lt;std::size_t&gt;(-1)</code>.</p>

<p>Another warning I have: Use of <code>::size_t</code> (<code>size_t</code> in the global namespace). This is not defined in the C++ standard. You should instead use <code>std::size_t</code> to be compatible with all conforming compilers.</p>

<p>Another bug is in your definition of <code>operator++(int)</code> and <code>operator--(int)</code> for various classes. The "normal" definition is: return a copy of the current value, but increment the value (not the copy).</p>

<p>So, it is should look something like this:</p>

<pre><code>T T::operator++(int) noexcept {
    T copy = *this;
    ++*this;
    return copy;
}
</code></pre>

<p>Your current implementation just means that <code>++it</code> and <code>it++</code> do the same thing.</p>

<p>As for <code>noexcept</code>, the following functions should be noexcept:</p>

<pre><code>static std::size_t get_appropriate_capacity(std::size_t)
char&amp; string::back();
const char&amp; string::back() const;
char&amp; string::front();
const char&amp; string::front() const;
string&amp; string::assign(string&amp;&amp; rhs);
// Also that one should be:
string&amp; string::assign(string&amp;&amp; rhs) noexcept { (*this) = std::move(rhs); return *this; }
// Otherwise it doesn't move (`rhs` is an lvalue)
char&amp; string::operator[](std::size_t);  // Though this one's debatable
const char&amp; string::operator[](std::size_t) const;  // Same with this one
</code></pre>

<p>Your <code>void string::clear()</code> should <em>not</em> be <code>noexcept</code>. It calls <code>std::make_unique</code>, which could throw. If you do want to make a <code>noexcept</code> version, you could do something like this:</p>

<pre><code>void string::clear() noexcept {
  try {
    ptr_ = std::make_unique&lt;char[]&gt;(default_capacity_ + 1);
    current_capacity_ = default_capacity_;
  } catch (const std::bad_alloc&amp;) { /* Reuse old capacity */ }
  ptr_.get()[0] = '\0';
  sz_ = 0;
}
</code></pre>

<p>Consider removing <code>string&amp; string::append(string&amp;&amp; rhs);</code> and <code>string&amp; string::operator+=(string&amp;&amp;)</code> (Since you make a copy anyways).</p>

<p>Also, all your <code>operator==</code> which take <code>string&amp;&amp;</code> are unnecessary. An rvalue can bind to a <code>const string&amp;</code> just fine, and you don't mutate, let alone move, the arguments anyways, so there just isn't any point.</p>

<p>Consider reimplementing <code>void string::swap(string&amp;)</code>. Currently, it makes a temporary copy. You could just <a href="https://en.cppreference.com/w/cpp/memory/unique_ptr/swap" rel="nofollow noreferrer"><code>swap</code></a> the data pointers, and swap the members. This would also be <code>noexcecpt</code>.</p>

<pre><code>void string::swap(string&amp; rhs) noexcept {
    using std::swap;
    swap(current_capacity_, rhs.current_capacity_);
    swap(sz_, rhs.sz_);
    swap(ptr_, rhs.ptr_);
}
</code></pre>

<p>Also, have a look where you use <code>std::strcpy</code>. This is guaranteed to not do what you expect if a string has a <code>'\0'</code> in it. E.g.: <code>string s = string{""}+'\0'+'\0'; string copy = s; copy == s  // false</code>. Use <code>memcpy</code> with the number of characters you are copying (Usually the fix would be: <code>std::strcpy(a, other.ptr_.get())</code> -&gt; <code>std::memcpy(a, other.ptr_.get(), other.sz_ + 1);  // + 1 for nul terminator</code>)</p>

<p>These functions should be <code>const</code>:</p>

<pre><code>const_iterator string::cbegin() const;
const_iterator string::cend() const;
const_reverse_iterator string::crbegin() const;
const_reverse_iterator string::crend() const;
</code></pre>

<h3>Design</h3>

<p>You don't overload <code>operator&lt;</code> and friends, so it's hard to compare strings.</p>

<p>As for how you handle memory allocation, you are a bit too eager. Reallocation is expensive (As it is allocate + copy in this case). You should only use <code>get_appropriate_capacity</code> when the new size would be bigger than the current capacity.</p>

<p>As for your <code>get_appropriate_capacity</code> function itself, it seems pretty good.</p>

<p>As a side note, try using <a href="https://en.cppreference.com/w/cpp/iterator/reverse_iterator" rel="nofollow noreferrer"><code>std::reverse_iterator</code></a> instead of implementing a completely seperate class. Also, I don't know if you were reimplementing it on purpose, but <code>string::iterator</code> can just be <code>char*</code>, and <code>string::const_iterator</code> as <code>const char*</code>.</p>

<p>You might also want to expose <code>current_capacity_</code> as a member function like: <code>std::size_t string::capacity() const noexcept { return current_capacity_; }</code></p>

<p>Also, to actually make your class "Swappable", you need to have a free function <code>swap</code>:</p>

<pre><code>// .h file
namespace kapil {
  void swap(string&amp;, string&amp;) noexcept;
}
// .cpp file
namespace kapil {
  void swap(string&amp; rhs, string&amp; lhs) noexcept {
    rhs.swap(lhs);
  }
}
</code></pre>

<p>As a next goal, try to implement custom <code>CharT</code>s (Have a template class, so you can use <code>wchar</code> instead of <code>char</code> easily), custom <a href="https://en.cppreference.com/w/cpp/named_req/CharTraits" rel="nofollow noreferrer">"CharTraits"</a> (Another template argument, like <a href="https://en.cppreference.com/w/cpp/string/char_traits" rel="nofollow noreferrer"><code>std::char_traits&lt;CharT&gt;</code></a>) and finally custom <a href="https://en.cppreference.com/w/cpp/named_req/Allocator" rel="nofollow noreferrer">"Allocators"</a> as the third template argument. These are the 3 template arguments that are used with <a href="https://en.cppreference.com/w/cpp/string/basic_string" rel="nofollow noreferrer"><code>std::basic_string</code></a> (<code>std::string</code> is <code>std::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt;&gt;</code>)</p>
    </div>