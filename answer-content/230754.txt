<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Order your imports</h1>

<p>Imports should be ordered alphabetically in groups of standard library imports, third-party imports and local project imports:</p>

<pre><code>import math
from operator import itemgetter
import random

import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
</code></pre>

<h1>Make use of comprehensions</h1>

<p>You can rewrite</p>

<pre><code>def convert_class_str_to_class_int(classes):
    """
    This is a function that will take a set of classes and return a dictionary where the class name is the key
    and the index of the class found within the set is the value. 
    :param classes:
    :return:
    """
    classes_dict = dict()
    for index, class_str in enumerate(classes):
        classes_dict[class_str] = int(index)

    return classes_dict
</code></pre>

<p>as </p>

<pre><code>def get_class_id_mapping(classes):
    """
    This is a function that will take a set of classes and return a dictionary where the class name is the key
    and the index of the class found within the set is the value. 
    :param classes:
    :return:
    """
    return {class_str: index for index, class_str in enumerate(classes)}
</code></pre>

<p>Note that you do not need to cast for <code>int()</code>, since <code>enumerate()</code> will always yield <code>int</code>s. Also the original name was a bit misleading, as it did not reflect, what the function actually does.<br>
Also beware, that <code>set</code>s do not have indices. If the input value is actually a <code>set</code>, the corresponding indices given upon iteration will be in random order.</p>

<h1>Be specific about your error handling</h1>

<p>In this block</p>

<pre><code>try:
    classes_dict = convert_class_str_to_class_int(self.classes)
    test_data = test_data.replace(classes_dict)
    test_data = test_data.to_numpy()
except AttributeError:
    pass
</code></pre>

<p>it is not clear at which line you'll expect the <code>AttributeError</code> to occur. At the first line? At the last line? At any of the three lines?</p>

<h1>Use a main() function</h1>

<p>Put the stuff, that you have under the <code>if __name__ = '__main__'</code> guard into a <code>def main():</code> function and place its call there.</p>

<p>Other than that, your code looks pretty good. The docstrings are informative, the methods mostly named feasibly.</p>
    </div>