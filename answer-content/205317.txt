<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>If you don't want create a full-blown <code>xml</code> serializer (I wouldn't if it was a simple as that) all you can do is to just tide this up. This is, add a helper variable for <code>dataItems</code> and create a helper extension for finding elements based on the <code>Name</code> attribute. Then you can remove all the other intermediate viariables and directly assign the values to the properties because this is pretty short right now.</p>

<pre><code>public static string ValueWhereName(this IEnumerable&lt;XElement&gt; sournce, string name)
{
    return sournce.SingleOrDefault(i =&gt; i.Attribute("name").Value.Equals(name))?.Value;
}
</code></pre>

<p>and use it like this:</p>

<pre><code>var query =
    from item in dataRows
    let dataItems = item.Elements("DataItem")
    select new
    {
        Symbol = dataItems.ValueWhereName("SYMBOL"),
        CompName = dataItems.ValueWhereName("NAME"),
        Cusip = dataItems.ValueWhereName("CUSIP"),
        Sedol = dataItems.ValueWhereName("SEDOL")
    };
</code></pre>

<p>If you had a dedicated <code>class</code> for the result you could make it even more robust by using <code>nameof(YourClass.Symbol)</code>. But then the properties would have to have the same names as the attributes or you would need to decorate them with your own attributes and use some reflection... You would also need to modify the <code>Equals(name, StringComparison.OrdinalIgnoreCase)</code> call to ignore-case sind the properties obviously wouldn't match the <code>xml</code> attributes casewise.</p>

<hr>

<p>Another option could be the package <code>Json.NET</code> as it's also able to parse <code>xml</code> but I'm not sure how it could handle the attributes.</p>
    </div>