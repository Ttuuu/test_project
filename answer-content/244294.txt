<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Else-after-return</h2>
<p>Some people consider this a stylistic choice, but this:</p>
<pre><code>        if check:
            return FileResponse(
                data, 
                as_attachment=True,
                filename=config['DOWNLOAD']['DOWNLOAD_FILE_AS'])
        else:
            return HttpResponse(data)
</code></pre>
<p>can be</p>
<pre><code>        if check:
            return FileResponse(
                data, 
                as_attachment=True,
                filename=config['DOWNLOAD']['DOWNLOAD_FILE_AS'])
        return HttpResponse(data)
</code></pre>
<h2>Import-time file manipulation</h2>
<p>This:</p>
<pre><code>if os.path.exists('temp.pdf'):
    os.remove('temp.pdf')
</code></pre>
<p>is done at global scope on file interpretation, which is risky for a few reasons - including that it will make isolated unit testing much more difficult. This kind of thing should be pulled into a function that runs on program initialization, not at global scope.</p>
<p>Beyond that, having one temporary file with a fixed name invites a collection of security vulnerabilities and failures of re-entrance. This file should be randomly named; the <code>tempfile</code> module can do this for you.</p>
<h2>snake_case</h2>
<p><code>getConfigObject</code> should be <code>get_config_object</code>, like your other functions already are.</p>
<p><code>Html_file</code> should not be capitalized since it's a local variable. Also, it should be used in a <code>with</code> statement without an explicit call to <code>close</code>.</p>
<h2>Ternary abuse</h2>
<pre><code>html = "{% load numbersinwords %}" if not html.startswith(
    "{% load"
) else "" + html
</code></pre>
<p>should simply be</p>
<pre><code>if not html.startswith("{% load"):
    html = "{% load numbersinwords %}" + html
</code></pre>
<h2>Implicit return tuples</h2>
<pre><code>    return (True, f)
</code></pre>
<p>does not need parens.</p>
<h2>Avoiding temp files</h2>
<p>Read the documentation:</p>
<p><a href="https://weasyprint.readthedocs.io/en/stable/api.html#weasyprint.HTML.write_pdf" rel="nofollow noreferrer">https://weasyprint.readthedocs.io/en/stable/api.html#weasyprint.HTML.write_pdf</a></p>
<blockquote>
<p>target (<code>str</code>, <code>pathlib.Path</code> or file object) â€“ A filename where the PDF file is generated, a file object, or <code>None</code>.</p>
</blockquote>
<p>In this case it's easy to avoid a temp file by passing a file object. That file object can be a Django HTTP response stream; for more reading see</p>
<p><a href="https://docs.djangoproject.com/en/3.0/ref/request-response/#passing-strings" rel="nofollow noreferrer">https://docs.djangoproject.com/en/3.0/ref/request-response/#passing-strings</a></p>
<p>Currently you do</p>
<pre><code>    HTML(string=html).write_pdf("temp.pdf")
    f = open("temp.pdf", "rb")
    return (True, f)
    # ...

        check, data = backend.main(**form.cleaned_data)
        if check:
            return FileResponse(
                data, 
                as_attachment=True,
                filename=config['DOWNLOAD']['DOWNLOAD_FILE_AS'])
        else:
            return HttpResponse(data)
</code></pre>
<p>This needs to be refactored so that</p>
<ul>
<li>the Response object is passed to <code>write_pdf</code> instead of a filename</li>
<li>you no longer return an open file handle</li>
</ul>
    </div>