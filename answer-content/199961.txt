<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There are certain reasons I would not prefer your approach. These are:</p>

<p>1) There are multiple method calls which reduces the readability.</p>

<p>2) You are using filter twice which decreases the performances. You could do it inside the same <code>filter</code> like I've shown below</p>

<p>3) With this approach you don't have a consolidated <code>List</code> which contains common elements. For that you need another <code>else</code> condition which increases the cyclomatic complexity.</p>

<p>4) A <code>null</code> check which could produce NPE if not handled carefully as you are using <code>findFirst()</code> which returns <code>Optional</code> (Although <code>null</code> can be replaced with default <code>new Person("","")</code> object which is again not recommended).</p>

<p>5) Finally don't use <code>ArrayList&lt;Person&gt; originalPeople = new ArrayList&lt;&gt;();</code>; rather declare as <code>List</code>, to follow <a href="https://stackoverflow.com/questions/2279030/type-list-vs-type-arraylist-in-java"><em>programming to interface</em></a>.</p>

<p>Rather I would use below approach:</p>

<pre><code>private static List&lt;Person&gt; getPersonInList(
            final List&lt;Person&gt; newPeople, List&lt;Person&gt; originalPeople) {
        List&lt;Person&gt; list = new ArrayList&lt;&gt;();

        newPeople.forEach(p -&gt;
                originalPeople.stream()
                              .filter(p1 -&gt; p.getFirstName().equals(p1.getFirstName()) &amp;&amp; 
                                      p.getLastName().equals(p1.getLastName()))
                              .forEach(list::add));
        return list;
    }
</code></pre>
    </div>