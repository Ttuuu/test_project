<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>In my <a href="https://codereview.stackexchange.com/questions/210972/system-user-class-all-in-one-class-including-login-functions/210978#210978">last answer for you</a> I mention how you should use <a href="http://php-di.org/doc/understanding-di.html" rel="nofollow noreferrer">dependency injection</a> to avoid tight coupling and promote testability. Then in the comments I go further to mention to take it a step further and use a container like <a href="https://pimple.symfony.com/" rel="nofollow noreferrer">Pimple</a>. Since I don't see those changes here I'll show the container example here since I showed the basic dependency injection in the other answer.</p>

<p><strong>Using Pimple, the Dependency Injection Container</strong></p>

<p><em>I'll assume you will have installed Pimple already and have included it in your application. Their documentation covers that so I won't get into it here.</em></p>

<pre><code>use Pimple\Container;
use MyApp\Core\Database;

$container = new Container();

$container['db'] = function ($c) {
    return Database::getInstance();
};
</code></pre>

<p>The above code simply:</p>

<ol>
<li>Creates a container</li>
<li>Defines a service called <code>db</code></li>
<li>Instantiates your database class</li>
<li>Places it in your container</li>
</ol>

<p>You can add your session logic and other shared objects at this time as well. This is typically contained in its own file but where you put this ins entirely up to you as long as it executes as part of your bootstrap process (i.e. before your business logic).</p>

<p>From here you only need to include Pimple as an argument of the constructor of objects that need to use something in your container.</p>

<pre><code>class System_user
{
    public function __construct(\Pimple $container, $system_user = NULL)
    {
        $this-&gt;db = $container['db'];
    }
}
</code></pre>

<p>Now you can easily make sure all of your classes are working with the same objects, eliminate dependencies in your code, and your code is testable.    </p>

<hr>

<p><strong>Good job with not putting login info into the User object</strong></p>

<p>A common pitfall many developers fall into is to put the login logic into a user object because the user is the one who logs in. You pass the User object into the login functionality which is a <em>much</em> better way to do this. An area for improvement is you place the validation and the login logic all in one method. You could break out the validation into it's own method so you separate the two concerns. You also do this like work with IP addresses again which should be separated out into its own logic.</p>

<p><strong>Getting IP addresses is kind of common</strong></p>

<p>You have a private method for getting the user's IP address (<code>systemUserLogin::getSystemUserIp()</code>). That actually is something not directly related to a user and may be something you eventually wish to use elsewhere. That probably should be broken out into its own function or into another helper class.</p>

<p><strong>FYI Stuff</strong></p>

<p><code>sha1()</code> is obsolete for hashing passwords and should <em>not be used</em>. PHP provides <a href="//php.net/manual/en/function.password-hash.php" rel="nofollow noreferrer">password_hash()</a> and <a href="//php.net/manual/en/function.password-verify.php" rel="nofollow noreferrer">password_verify()</a>, please use them. And here are some <a href="//www.owasp.org/index.php/Password_Storage_Cheat_Sheet" rel="nofollow noreferrer">good ideas about passwords</a>. If you are using a PHP version prior to 5.5 <a href="https://github.com/ircmaxell/password_compat" rel="nofollow noreferrer">there is a compatibility pack available here</a>.</p>
    </div>