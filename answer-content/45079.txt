<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here is my lightweight solution that involves no operations at run time:</p>

<pre><code>template&lt;typename T&gt;
struct type { static void id() { } };

template&lt;typename T&gt;
size_t type_id() { return reinterpret_cast&lt;size_t&gt;(&amp;type&lt;T&gt;::id); }

struct A { };

int main ()
{
    cout &lt;&lt; type_id&lt;int&gt;() &lt;&lt; " " &lt;&lt; type_id&lt;int*&gt;() &lt;&lt; " "
         &lt;&lt; type_id&lt;A&gt;() &lt;&lt; " " &lt;&lt; type_id&lt;int&gt;() &lt;&lt; endl;
}
</code></pre>

<p>The type id of type <code>T</code> is nothing but the address of function <code>type&lt;T&gt;::id</code>, re-interpreted as a number. Being a static method, there is a unique such function per type. These addresses are assigned by the linker (I think), so they remain constant between different runs. The overhead in executable size is linear in the number of type ids requested (that is, the number of instantiations of <code>type&lt;T&gt;</code>).</p>

<p>This solution has been tested in gcc and clang, and works correctly across different compilation units, i.e. you get the same unique type id for the same type in different compilation units. However, I cannot quite explain why/how this happens.</p>

<p><code>type_id()</code> is easily inlined, so has no run-time cost. However, since it contains <code>reinterpret_cast</code> (and since the function address is not known to the compiler), it cannot be made <code>constexpr</code>. But I don't see this as a problem: if you want to use something e.g. as a template argument, you can use the type directly instead of its id. The id is for run-time use only.</p>

<p>My original implementation is using <code>const void*</code> as the return type of <code>type_id()</code>, so I know it has the same size as any pointer. I adapted it to <code>size_t</code> to fit the question. I think this is still safe, but I can't see why <code>const void*</code> wouldn't be fair enough.</p>

<p>By the way, because I haven't used it very much, I'd be happy to hear if there may be problems with this approach.</p>
    </div>