<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>IMHO there is nothing in this class that requires integration testing. At most you should be able to mock it, but all of its functionality is calling methods that are presented by the framework (or by a NuGet package, e.g. the JSON serialization). If you feel the need to test those, then why not write a test to check that the return value of some method that returns a string is actually a string and not some other type of object?</p>
<p>You could argue that perhaps it might fail to create a file because it needs to do so on a share and that share is inaccessible, but then it is perfectly possible that this happens on production and not a single integration test will catch it. That's why exceptions exist and logging etc.</p>
<p>And that's where your code really fails: at no point do you apply a <code>try...catch</code> and do you log any possible IO exceptions. Sure, maybe your exception will bubble up and get caught elsewhere and reported, but you need to be sure about that. For instance: it is entirely possible an existing file cannot be deleted because another process has it locked.</p>
<p>Perhaps you should catch any IO exceptions here and return a bool to report back whether the file was written without issues (if you care about that, if other code depends on the file existing,...).</p>
<hr>
<p>Your <code>WriteFileOutput</code> class is also pretty bad in other ways. Its name sounds like a method and is fairly undescriptive anyway. Moreover, you've obviously copy-pasted code instead of thinking through its logic. This does exactly the same while using far less lines and has no duplication:</p>
<pre><code>    if (System.IO.File.Exists(File))
    {
        System.IO.File.Delete(File);
    }

    using(var tw = new StreamWriter(File, true))
    {
       tw.WriteLine(result.ToString());
       tw.Close();
    }
</code></pre>
<hr>
<p>Some quick remarks:</p>
<ul>
<li><p>What is even the point of <code>else if (!System.IO.File.Exists(File))</code>? What else could the <code>else</code> to <code>if (System.IO.File.Exists(File))</code> even be?</p>
</li>
<li><p><code>public void writeFile</code> doesn't follow the standards WRT naming (methods should be PascalCase).</p>
</li>
<li><p>Why is this public: <code>public string File { get; set; }</code>? Why can it be set from outside?</p>
</li>
<li><p>Both <code>File</code> and <code>fileName</code> are incorrect names. You're clearly passing a path to a file, not the name of a file (and "File" is even less descriptive).</p>
</li>
<li><p><code>result</code> is too generic a name.</p>
</li>
<li><p>Are you saving other objects in much the same way as <code>List&lt;CustomerDistanceRecord&gt; invitees</code>? If so, do you have a specialized class for each of those? Because that seems overkill to me when the logic of <code>writeFile</code> (except for <code>var result = JsonConvert.SerializeObject(invitees, Formatting.Indented);</code>) can easily be reused.</p>
</li>
</ul>
    </div>