<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Since we always make a copy of <code>stringToFill</code>, we could pass it by value, which will reduce the amount of copying when we use an rvalue as argument:</p>
<pre><code>static std::wstring fillWString(
    std::wstring stringToFill, ...
                                )
{
  ...
  std::wstring&amp; result(stringToFill);
  ...
  return stringToFill;
}
</code></pre>
<p>Users can use <code>std::move()</code> if they pass a lvalue that's not required subsequently:</p>
<pre><code>s = fillWString(std::move(s), 15);
</code></pre>
<hr>
<p>Minor points:</p>
<ul>
<li>Whitespace is unusual - most C++ developers expect to see <code>&amp;</code> nestled against the type, rather than the value.</li>
<li>Consistently misspelt <code>std::size_t</code>.</li>
<li>Default arguments of <code>L""</code> could be written as <code>{}</code> if you find that more readable.</li>
<li>It's not clear from the description that if there's room for <code>initialFill</code>, it will be used even if there's insufficient room for <code>endFill</code>.  This may surprise users who want to use paired delimiters (e.g. <code> [</code> and <code>] </code>).</li>
<li>It's not clear from the description that if <code>initialFill</code> and <code>endFill</code> exactly fit, there will be no <code>fillChar</code> inserted.  That's easy enough to allow for if you know about it (just append the char to <code>initialFill</code> or prepend it to <code>endFill</code>), but users need to be informed!</li>
<li>Why limit this to <code>std::wstring</code>?  A single template argument could make this general to all string types.  A disadvantage to this as that template function arguments need to match exactly, preventing automatic conversions; workarounds for this include callers explicitly specifying the template instantiation, and/or providing a small family of forwarding functions.</li>
<li>Perhaps rearrange the logic to write just once to each character, rather than filling with <code>fillChar</code> then overwriting some of it.</li>
</ul>
<hr>
<h1>Modified code</h1>
<p>Here's how it looks with my suggestions applied; I've also shortened some of the variable names, which were over-long to my taste:</p>
<pre><code>#include &lt;string&gt;

// Pad the supplied `str` to `width` characters long, using `fill`.

// If there's room for `prefix`, then use that to begin the padding;
// if there's also room for `suffix` then use that to end the padding.

// If `prefix` or `prefix+suffix` pad exactly, then no `fill` characters
// will be used - if at least one is required, add it to the end of
// `prefix`.

template&lt;typename String&gt;
String fillString(String str,
                  const typename String::size_type width,
                  const typename String::value_type fill = ' ',
                  const String&amp; prefix = {},
                  const String&amp; suffix = {})
{
    const auto originalLength = str.size();
    if (originalLength &gt;= width) {
        return str;
    }

    str.reserve(width);

    if (originalLength + prefix.size() &lt;= width) {
        // enough space for prefix
        str += prefix;

        if (str.size() + suffix.size() &lt;= width) {
            // enough space for suffix as well
            str.resize(width - suffix.size(), fill);
            str += suffix;
        } else {
            str.resize(width, fill);
        }
    } else {
        str.resize(width, fill);
    }


    return str;
}

// forwarding function, for convenience
template&lt;typename CharT, typename... Args&gt;
std::basic_string&lt;CharT&gt; fillString(std::basic_string&lt;CharT&gt; str, Args... rest)
{
    return fillString&lt;std::basic_string&lt;CharT&gt;&gt;(std::move(str),
                                                std::forward&lt;Args&gt;(rest)...);
}
</code></pre>
<p>And a demo program (note that <code> std::literals::string_literals</code> is a namespace that's intended to be imported wholesale, unlike <code>std</code>):</p>
<pre><code>#include &lt;iostream&gt;

int main()
{
    using namespace std::literals::string_literals;
    static const auto s = L"FooBarBazQuux"s;

    for (auto i = 5u;  i &lt; s.size();  ++i) {
        std::wcout &lt;&lt; fillString(s.substr(0, i), 10, L'.', L" [.", L"]") &lt;&lt; '\n';
    }
}
</code></pre>
    </div>