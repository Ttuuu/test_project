<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Design</h2>

<p>The design is OK; it seems to use data classes and some classes that perform operations.</p>

<p>In true OO fashion, I would expect the player to send the message. For instance, you could do <code>Player.sendMessageTo(int otherPlayerID, String message)</code>. You could initialize the player with a <code>MessageHandler</code> that does the actual sending of the message. The player then can keep a list of conversations with other player(s). That way you can hide much of the technical details from the "game". Similarly, you can have a <code>Player.receiveAcknowledgement</code> that is triggered by the same <code>MessageHandler</code>.</p>

<h2>Code review</h2>

<p><strong>GameMain</strong></p>

<pre><code>public final static int MESSAGE_LIMIT = 10;
Player initiator...
</code></pre>

<p>I'd always separate the constant values and the fields using an empty line.</p>

<pre><code>Player initiator = new Player(0,"Initiator",true);
</code></pre>

<p>This is why you don't use boolean parameters: it is completely unclear what <code>true</code> does here when browsing through the code. Instead, use an enum <code>PlayerType</code> with values <code>INITIATOR</code> and <code>RECEIVER</code>. Note that you could now do away with the name - unless you want to have multiple receivers.</p>

<p>A less intrusive refactor would be to use a constant <code>INITIATOR = true</code> to be used. This has the disadvantage that other developers overlook the constant though (for <code>Cipher.getInstance</code> in Java I keep seeing <code>Cipher.getInstance(1, ...)</code> instead of <code>Cipher.getInstance(Cipher.ENCRYPT_MODE)</code>).</p>

<p>Consider maybe not numbering players, but using the name itself as ID (using a <code>HashMap&lt;String, Player&gt; nameToPlayer</code>, for instance). Generally you want to avoid having fields that have a similar function.</p>

<pre><code>Integer counter = 0;
</code></pre>

<p>Always prefer basic types: <code>int counter = 0</code>. Auto-boxing will take care of the rest.</p>

<pre><code>BlockingQueue&lt;Runnable&gt; blockingQueue = new ArrayBlockingQueue&lt;&gt;(10);

ExecutorService executorService = new ThreadPoolExecutor(1, 1, 0L, TimeUnit.MILLISECONDS, blockingQueue);
</code></pre>

<p>Why 10, 1, 1 and 0L? You need to use well named constant values here.</p>

<pre><code>messageWorker =  new SendMessageWorker(counter.toString(),"Sending a new message ",initiator,player);
</code></pre>

<p>I'd try and not stringify before it is necessary. Just use the <code>counter</code> as parameter. Don't forget your code style, and add spaces after the commas. Note that you can use <code>Integer.toString(int)</code> to convert; no need to box it.</p>

<pre><code>if (counter &gt;= MESSAGE_LIMIT) {
    break;
}
</code></pre>

<p>I've got nothing against <code>while (true) { ... if (condition) break ...}</code> <em>in principle</em> but why not just a <code>for</code> loop here?</p>

<pre><code>Conversation conversation = initiator.getConversationHashMap(player.getId());
</code></pre>

<p>As reader I would expect to get a <code>HashMap</code> here, not a specific object. Furthermore, it is not clear to me what a "conversation hash map" <strong>is</strong>.</p>

<pre><code>List&lt;Message&gt; messageList = conversation.getConversation();
</code></pre>

<p>Hmm, that's slightly weird, get a conversation from a conversation. <code>getMessages</code> maybe?</p>

<p><strong>Conversation</strong></p>

<p>I would expect a <em>list</em> of players. Try and avoid arrays, the are not very OO.</p>

<p>Then you would get:</p>

<pre><code>public Conversation(Player ... players){
    participants = List.of(players);
}
</code></pre>

<p>and note that the actual constructor call is <em>not even changed</em>.</p>

<pre><code>public ArrayList&lt;Message&gt; getConversation() {
    return conversation;
}
</code></pre>

<p>Try and avoid to expose the state of an object instance, you're failing to encapsulate the field. Return either an iterator or return <code>Collections.unmodifiableList(conversation)</code>.</p>

<p><strong>Message</strong></p>

<pre><code>private Boolean ack = false;
</code></pre>

<p><code>ack</code> will automatically be assigned <code>false</code>. <code>ack</code> is never read, and it is again an object instance rather than <code>boolean</code>.</p>

<p><code>Date</code> should preferably not be used; try and use <code>Instant.now()</code> instead (and possibly also include a clock as parameter, for testing purposes).</p>

<pre><code>public Conversation getConversationHashMap(int id) {
    return conversationHashMap.get(id);
}
</code></pre>

<p>You probably refactored this, but forgot to change the name of the method. <code>getConversationFromHashMap</code> would be better, but it would expose the inner workings of the class. <code>getConversationWithPlayer(int id)</code> is probably best.</p>

<p>Note that because <code>Conversation</code> is not immutable, the returned value again exposes state.</p>

<p><strong>SendMessageWorker</strong></p>

<pre><code>if (initiator.isInitiator() == false) {
    System.out.println("Only initiator can send message");
    return;
}
</code></pre>

<p><strong>Never</strong> keep running with invalid state. <em>Bad programmer</em>. Down (the application)! </p>

<p>If you should not get into such a state: <code>throw new IllegalStateException("Only initiator can send message")</code>.</p>

<pre><code>if (conversation == null) {
    conversation = new Conversation(initiator, receiver);
}
</code></pre>

<p>Ugh, don't do this. Either use an empty conversation and intialize in the object, or - if that's too expensive - lazily instantiate a conversation.</p>

<p>Note that this is resolved if you let the user keep track of their own conversation(s). A good design will lead you into fewer traps.</p>
    </div>