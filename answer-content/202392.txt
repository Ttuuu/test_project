<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The reason for the poor performance is that you are taking a non database approach to compiling the data.  A query's speed is dependent on its ability to group, filter and index records.  </p>

<blockquote>
<pre><code>SELECT 
Round(SUM(IIF([F1]=" &amp; searchKey &amp; ",1,0))
*100.0
/SUM(IIF([F1]&lt;&gt;Null,1,0)),10)
From [Sheet1$];
</code></pre>
</blockquote>

<p>The <code>IIF()</code> function is much slower that using a <code>WHERE</code> clause to filter the data.  Use <code>WHERE ([F1] Is Not Null) AND ([F1]=" &amp; searchKey &amp; ")</code> so you are only retrieving the relevant records.  </p>

<p>With the records properly filtered, you can use <code>Count(*)</code> instead of <code>Sum()</code> and <code>IIF([F1]&lt;&gt;Null,1,0)</code>.</p>

<p>It would be better to group the counts and returning all the records at once.  </p>

<p>Although it doesn't matter for 20 records, writing to the Immediate Window line by line is slow.  </p>

<p>Before writing the code below, I copied the data into an Access table and ran the Query Wizard - Count Duplicates.</p>

<h2>PrintOccurences</h2>

<pre><code>Sub PrintOccurences(ByRef cn As ADODB.Connection)
        Const strSql As String = "SELECT First([Sheet1$].[F1]) AS [F1 Field], Round((Count([Sheet1$].[F1])/ (SELECT Count(*) FROM [Sheet1$] WHERE [Sheet1$].[F1])) * 100,10) AS NumberOfDups" &amp; vbNewLine &amp; _
      "FROM [Sheet1$]" &amp; vbNewLine &amp; _
      "GROUP BY [Sheet1$].[F1]" &amp; vbNewLine &amp; _
      "HAVING (((First([Sheet1$].[F1])) Is Not Null));"

    Dim rs As ADODB.Recordset
    Dim sb As Object
    On Error GoTo CleanFail:
    Set rs = New ADODB.Recordset
    Set sb = CreateObject("System.Text.StringBuilder")
    rs.Open strSql, cn

    Do While Not rs.EOF
        sb.AppendFormat_4 "Variable {0} Occured {1} Many Times" &amp; vbNewLine, Array(rs("F1 Field").Value, rs("NumberOfDups").Value)
        rs.MoveNext
    Loop

    Debug.Print sb.ToString
    rs.Close
    Set rs = Nothing
    Exit Sub
CleanFail:
    Debug.Print "QUERY FAILED"
End Sub
</code></pre>

<h2>Results</h2>

<blockquote>
<pre><code>Variable 1 Occurred 5.2052052052 Many Times
Variable 2 Occurred 3.9039039039 Many Times
Variable 3 Occurred 4.8048048048 Many Times
Variable 4 Occurred 5.2052052052 Many Times
Variable 5 Occurred 4.4044044044 Many Times
Variable 6 Occurred 5.3053053053 Many Times
Variable 7 Occurred 5.005005005 Many Times
Variable 8 Occurred 5.2052052052 Many Times
Variable 9 Occurred 5.5055055055 Many Times
Variable 10 Occurred 4.8048048048 Many Times
Variable 11 Occurred 5.4054054054 Many Times
Variable 12 Occurred 4.9049049049 Many Times
Variable 13 Occurred 4.6046046046 Many Times
Variable 14 Occurred 4.1041041041 Many Times
Variable 15 Occurred 6.6066066066 Many Times
Variable 16 Occurred 5.005005005 Many Times
Variable 17 Occurred 5.5055055055 Many Times
Variable 18 Occurred 4.4044044044 Many Times
Variable 19 Occurred 5.005005005 Many Times
Variable 20 Occurred 5.1051051051 Many Times
</code></pre>
</blockquote>
    </div>