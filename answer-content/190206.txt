<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Conventions</h2>

<p>The Style guide to follow in Python is <a href="https://www.python.org/dev/peps/pep-0008/" rel="noreferrer">PEP8</a>. If you do so, your code blends right into the python community and it is immediately easier to follow. On that regard you'll see that the functions name's don't follow the recommended style.</p>

<pre><code>getClosestValue
</code></pre>

<p>Should actually be:</p>

<pre><code>get_closest_value
</code></pre>

<p><a href="https://www.python.org/dev/peps/pep-0008/#method-names-and-instance-variables" rel="noreferrer">The relevant quote from PEP8 for this case</a></p>

<blockquote>
  <p>Use the function naming rules: lowercase with words separated by
  underscores as necessary to improve readability.</p>
</blockquote>

<p>Still in this topic, all the parenthesis used in the <code>ifs</code> are redundant and break the style.</p>

<pre><code>if (target &gt;= arr[n - 1]):
</code></pre>

<p>Should be turned into:</p>

<pre><code>if target &gt;= arr[n - 1]:
</code></pre>

<p>Although i suspect that this may be a habit brought from other languages.</p>

<h2>Edge cases</h2>

<p>You contemplated the case where the value is the highest or above, which gives you a quick way out:</p>

<pre><code># edge case
if (target &gt;= arr[n - 1]):
    return arr[n - 1]
</code></pre>

<p>However there is no corresponding edge case for when the value is the lowest or below. I believe you merely forgot it.</p>

<pre><code>#edge case - first or below all
if target &lt;= arr[0]:
    return arr[0]
</code></pre>

<h2>Logic</h2>

<p>Now both edge cases are covered, so the <code>while</code> can be simplified to only have the navigation to the corresponding item if there is one.</p>

<pre><code>while (left &lt; right):
    mid = (left + right) // 2 # find the mid
    if arr[mid] == target:
        return arr[mid]

    if target &lt; arr[mid]:
        right = mid
    else:
        left = mid + 1
</code></pre>

<p>After this last <code>while</code> if there isn't an exact match, calculate the nearest to the one you ended on, and return it:</p>

<pre><code>if target &lt; arr[mid]:
    return find_closest(arr[mid - 1], arr[mid], target)
else:
    return find_closest(arr[mid], arr[mid + 1], target)
</code></pre>

<p>Note that i don't need to check if <code>mid - 1</code> or <code>mid + 1</code> is a valid index, because if it wasn't it would mean that the value was below or above all elements, and those cases were already covered in the beginning of the function.
This is not only simpler but also more efficient since it only checks for the closest on the very end and not at each iteration.</p>

<p>Taking @bipll suggestion you can restructure the <code>while</code> a bit. Considering you are only getting <code>if arr[mid] == target</code> at the very last iteration you can first check for <code>&lt;</code> or <code>&gt;</code>. This avoids making one extra check that will fail most of the times:</p>

<pre><code>while left &lt; right:
    mid = (left + right) // 2  # find the mid
    if target &lt; arr[mid]:
        right = mid
    elif target &gt; arr[mid]:
        left = mid + 1
    else:
        return arr[mid]
</code></pre>

<hr>

<p>When i have a simple condition with a <code>return</code> on both cases i rather write them inline since its easy to read and a bit more concise:</p>

<pre><code>def find_closest(val1, val2, target):
    return val2 if target - val1 &gt;= val2 - target else val1
</code></pre>

<p>But don't go over the top on this. It can easily be harder to read depending on the complexity of the condition.</p>

<h2>Full Modified Version</h2>

<p>For you to get a better picture of all the changes i mentioned, i'll leave you with the full modified version:</p>

<pre><code>def get_closest_value(arr, target):
    n = len(arr)
    left = 0
    right = n - 1
    mid = 0

    # edge case - last or above all
    if target &gt;= arr[n - 1]:
        return arr[n - 1]
    # edge case - first or below all
    if target &lt;= arr[0]:
        return arr[0]
    # BSearch solution: Time &amp; Space: Log(N)

    while left &lt; right:
        mid = (left + right) // 2  # find the mid
        if target &lt; arr[mid]:
            right = mid
        elif target &gt; arr[mid]:
            left = mid + 1
        else:
            return arr[mid]

    if target &lt; arr[mid]:
        return find_closest(arr[mid - 1], arr[mid], target)
    else:
        return find_closest(arr[mid], arr[mid + 1], target)


# findClosest
# We find the closest by taking the difference
# between the target and both values. It assumes
# that val2 is greater than val1 and target lies
# between these two. 
def find_closest(val1, val2, target):
    return val2 if target - val1 &gt;= val2 - target else val1
</code></pre>
    </div>