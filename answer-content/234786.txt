<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Portability</h2>

<p>While <code>#pragma once</code> is widely supported it is not part of the C programming standard. To make this library more portable, use include guards such as shown in the example below.</p>

<h2>Ease of Use</h2>

<p>Don't force the users of the library to include files in the proper order, functions that are written using other functions in the library need to include the header for the other function. There is no guarantee that the user of the library wants to include one header file that includes all the other header files.</p>

<h2>Useless Comments</h2>

<p>In the comments after another answer there is a statement that the is 47 KLOC (K lines of code). Comments don't count as lines of code and it appears that each file is about 70% comments. I agree with the author of the other answer that this could all be in a single file.</p>

<p>There are a lot of boiler plate comments that are not useful, comments such as <code>include guard</code> really don't help anyone. The <code>About</code> comments don't need a header comment and should include the comment block that describes the entry point, here is one example:</p>

<pre><code>#ifndef MALLOCARRAY_H
#define MALLOCARRAY_H
/*
 *  About:
 * [[gnu::malloc]] [[gnu::warn_unused_result]]
 * void *mallocarray(ptrdiff_t nmemb, size_t size);
 *
 * Almost equivalent to `reallocarray(NULL, nmemb, size)`.
 *
 * Features:
 * - It fails safely if (nmemb &lt; 0).  With `reallocarray()` the array would be
 *      be allocated (it uses `size_t` instead of `ptrdiff_t`), and it's usage
 *      would likely produce undefined behavior.
 *
 * example:
 *      #define ALX_NO_PREFIX
 *      #include &lt;libalx/base/stdlib/alloc/mallocarray.h&gt;
 *
 *              int *arr;
 *
 *              arr     = mallocarray(7, sizeof(*arr));         // int arr[7];
 *              if (!arr)
 *                      goto err;
 *
 *              // `arr` has been succesfully allocated here
 *              free(arr);
 *      err:
 *              // No memory leaks
 *
 * Parameters:
 * nmemb:       Number of elements in the array.
 * size:        Size of each element in the array.
 *
 * return:
 *      != NULL:        OK.
 *      NULL:           Failed.
*/

#include &lt;errno.h&gt;
#include &lt;stddef.h&gt;
#include &lt;stdlib.h&gt;
#include "reallocArray.h"
__attribute__((malloc, warn_unused_result))
inline
void    *alx_mallocarray        (ptrdiff_t nmemb, size_t size);

#if defined(ALX_NO_PREFIX)
__attribute__((always_inline, malloc, warn_unused_result))
static inline
void    *mallocarray            (ptrdiff_t nmemb, size_t size)
{
        return  alx_mallocarray(nmemb, size);
}
#endif

inline
void    *alx_mallocarray        (ptrdiff_t nmemb, size_t size)
{

    if (nmemb &lt; 0)
        goto ovf;

    return  reallocarray(NULL, nmemb, size);
    ovf:
    errno   = ENOMEM;
    return  NULL;
}

#endif // MALLOCARRAY_H
</code></pre>

<h2>Opinionated Summary</h2>

<p>It is not clear who would benefit from this library, the C programming language has been around for almost 50 years. If a library like this was beneficial it would have been written before this.</p>
    </div>