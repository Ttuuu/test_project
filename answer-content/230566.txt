<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Being myself new to rust, take the following with a grain of salt. I would welcome further edits.</p>

<p>I think, generally, that there are two things your code is trying to do.
On one hand, it's about string tokens and concatenation.<br>
On the other, there's the solving the 99 bottles problem.</p>

<h1>99 Bottles</h1>

<p>For this problem, your approach seems complex and results in rather gauche
code. What makes it so, is that it's hard to understand at first glance what
<code>phrase</code> is at any point.<br>
Adding comments would be a good thing.<br>
Myself, I would forego the whole tokenisation part, and solve it in a more
concise way.</p>

<p>There are only a handful of sentences in the song, which need slight variations.
I'd like to use something like Python's raw strings:</p>

<pre class="lang-py prettyprint-override"><code>SOLO = r"{QTY} bottles of beer on the wall, {QTY} bottles of beer."
SOLOT.format(QTY=count)
</code></pre>

<p>In rust, I managed to get this behaviour by using <code>std::String::replace</code>:</p>

<pre class="lang-rust prettyprint-override"><code>const SOLO: &amp;str = "{QTY} bottles of beer on the wall, {QTY} bottles of beer."
let mut solo: String = SOLO.to_string().replace("{QTY}", &amp;count.to_string());
</code></pre>

<p>Once can likewise replace <code>bottles</code> for its singular form, <code>one</code> for <code>it</code>.  </p>

<p>Other details to clarify are:
1. are negative bottles allowed?
2. in one place, we're talking of phrase, in another of verse, and returned are
a bunch of sentences. Which nomenclature is correct? A single term ought to be used.
3. We're only dealing with beer, perhaps <code>bottles_of_beer</code> could become <code>bottles</code>?</p>

<p>We then end up with something like so:</p>

<pre class="lang-rust prettyprint-override"><code>const SOLO: &amp;str = "{QTY} bottles on the wall. ";
const CHORUS: &amp;str = "Take one down and pass it around, {QTY} bottles of beer on the wall.\n";
const BOTTLE: &amp;str = "bottle"; // for substitution when 1 bottle left.
const NONE: &amp;str = "\
No more bottles of beer on the wall, no more bottles of beer.\n\
Go to the store and buy some more, {QTY} bottles of beer on the wall.\n\
";

pub fn get_song(start: u32, stop: u32) -&gt; String {
    let mut song: String = String::new();

    for x in (start..stop+1).rev() {
        if x == 0 {
            let no_beer: String = NONE.to_string().replace("{QTY}", &amp;start.to_string());
            song = song + &amp;no_beer;
            break;
        }
        let mut solo: String = SOLO.to_string().replace("{QTY}", &amp;x.to_string());
        let mut chorus: String = CHORUS.to_string().replace("{QTY}", &amp;x.to_string());
        if x == 1 {
            solo = solo.replace("bottles", BOTTLE);
            chorus = chorus.replace("bottles", BOTTLE);
            chorus = chorus.replace("one", "it");
        }
        song = song + &amp;solo + &amp;chorus;
    }
    return song;
}


fn main() {
   println!("{}", get_song(10, 0)); 
}
</code></pre>

<p><em>note that I am not sure this is a correct way to do such constant
strings.</em><br>
I think <code>let mut song: String = String::new();</code> is the preferred style,
as <a href="https://doc.rust-lang.org/stable/book/ch08-02-strings.html#creating-a-new-string" rel="nofollow noreferrer">seen in the rust book</a>, over
<code>let mut phrase: String;</code></p>

<p>The <code>while</code> loop can be replaced by a <code>for</code> loop. This is actually the <a href="https://doc.rust-lang.org/1.1.0/book/for-loops.html" rel="nofollow noreferrer">textbook example</a>:</p>

<pre class="lang-rust prettyprint-override"><code>for x in (stop..start+1).rev() {
    ...
}
</code></pre>

<p>There's the <code>+1</code> increment to include the starting value, then the iterator is reversed to go from high to low values.</p>

<h1>String Tokens and Concatenation</h1>

<p>To stay on the string concatenation path, I suggest commenting what each path does.
There are several <code>if n &lt; 1</code>, which could be put together.  Within that, <code>n</code>
is redefined and subtracted, leading to an nested <code>if n &lt; 1</code> test.</p>

<p>We can observe that there are two types of operations: building different types of sentences,
and checking whether we're at the end of the song (<code>n &lt; 1</code>).</p>

<p>Let's agree to not return a <code>phrase</code>, but a <code>paragraph</code>:</p>

<pre class="lang-rust prettyprint-override"><code>let mut paragraph: String = String::new();

// Build qty of bottles on the wall sentence
if n &lt; 1 {
  ...
  paragraph = format!(...);
} else { ... }

// Build qty of bottles left on the wall sentence
if n &lt; 1 {
   paragraph = format!("{} {}", paragraph, ...);
} else { ... }
</code></pre>

<p>And so on.</p>

<p>Now I'm thinking, what's actually done here, is not checking a condition, but
rather <code>match</code>ing a parameter, so <code>if-else</code>s could become:</p>

<pre class="lang-rust prettyprint-override"><code>// Build qty of bottles on the wall sentence
match n {
   0 =&gt; paragraph = format!("{}{}{}{}", N_UP, O_MORE, SPACE, bottles),
   _ =&gt; paragraph = format!("{}{}{}", n_str, SPACE, bottles), 
}
</code></pre>

<p>By using <code>match</code> extensively, we also can remove the nested <code>if-else</code>:</p>

<pre class="lang-rust prettyprint-override"><code>    // Build closing 
    let phrase = match n {
        0 =&gt; format!("{}{}{}", NINE_NINE, SPACE, bottles),
        1 =&gt; format!("{}{}{}{}", N_DOWN, O_MORE, SPACE, bottles),
        _ =&gt; format!("{}{}{}", qty, SPACE, bottles),
    };
</code></pre>

<p>Finally, we get to such a result:</p>

<pre class="lang-rust prettyprint-override"><code>const BOTTLE: &amp;str = "bottle";
const BOTTLES: &amp;str = "bottles";
const OF_BEER: &amp;str = "of beer";
const UPPERCASE_N: &amp;str = "N";
const LOWERCASE_N: &amp;str = "n";
const O_MORE: &amp;str = "o more";
const ON_THE_WALL: &amp;str = "on the wall";
const SPACE: &amp;str = " ";
const COMMA: &amp;str = ",";
const PERIOD: &amp;str = ".";
const NL: &amp;str = "\n";
const TAKE: &amp;str = "Take";
const IT: &amp;str = "it";
const ONE: &amp;str = "one";
const DOWN_AND_PASS: &amp;str = "down and pass it around";
const GO_STORE: &amp;str = "Go to the store and buy some more";
const NINE_NINE: &amp;str = "99";

pub fn verse(n: u32) -&gt; String {
    let mut paragraph: String = String::new();

    // Is `bottle` plural in this paragraph?
    let bottles: String = match n {
        1 =&gt; BOTTLE.to_string(),
        _ =&gt; BOTTLES.to_string(),
    };

    // Create first half of first verse.
    let phrase: String = match n {
        0 =&gt; UPPERCASE_N.to_owned() + O_MORE + SPACE + &amp;bottles,
        _ =&gt; n.to_string() + SPACE + &amp;bottles,
    };
    paragraph = paragraph + &amp;phrase;
    paragraph = paragraph + SPACE + ON_THE_WALL + COMMA + SPACE;

    // Create second half of first verse.
    let phrase: String = match n {
        0 =&gt; LOWERCASE_N.to_owned() + O_MORE,
        _ =&gt; n.to_string(),
    };
    paragraph = paragraph + &amp;phrase;
    paragraph = paragraph + SPACE + &amp;bottles + PERIOD + NL;

    // Create first half of second verse.
    let phrase: String = match n {
        0 =&gt; GO_STORE.to_string(),
        1 =&gt; TAKE.to_owned() + SPACE + IT + SPACE + DOWN_AND_PASS,
        _ =&gt; TAKE.to_owned() + SPACE + ONE + SPACE + DOWN_AND_PASS,
    };
    paragraph = paragraph + &amp;phrase;
    // Add punctuation
    paragraph = paragraph + COMMA + SPACE;

    // Create second half of second verse.
    let phrase = match n {
        0 =&gt; NINE_NINE.to_owned() + SPACE + &amp;bottles,
        1 =&gt; LOWERCASE_N.to_owned() + O_MORE + SPACE + BOTTLES,
        _ =&gt; n.to_string() + SPACE + &amp;bottles,
    };
    paragraph = paragraph + &amp;phrase;

    // Finish second verse
    paragraph = paragraph + SPACE + OF_BEER + SPACE + ON_THE_WALL + PERIOD + NL;

    return paragraph;
}

fn main() {
    let start: u32 = 10;
    let stop: u32 = 0;
    let mut song: String = String::new();
    for x in (stop..start+1).rev() {
        song = song + &amp;verse(x);
    }
    println!("{}", song);
}
</code></pre>

<p>This is still not too clear code to me, and I'd rather work with the
first variant.  </p>

<p>On a final note, there were places were you use <code>n_str</code> or <code>format!("{}", n)</code>, be mindful of this types of errors.
Likewise, typically <code>start/stop</code> or <code>begin/end</code> are used, but try not to mix them up.<br>
Lastly, I had a lot of trouble distinguishing between <code>O_DOWN</code> <code>N_DOWN</code>, <code>N_UP</code>.</p>
    </div>