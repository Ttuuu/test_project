<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Some comments:</p>

<ol>
<li>Rename functions to follow the PEP8 naming convention, <a href="https://www.python.org/dev/peps/pep-0008/#id45" rel="nofollow noreferrer">here</a>.</li>
<li>Do not use range to iterate over the a list of elements, iterate directly over it. If you need the index, as in your case, use <a href="https://docs.python.org/3/library/functions.html#enumerate" rel="nofollow noreferrer">enumerate</a>.</li>
<li>No need to wrap the boolean clauses in parenthesis, moreover you can use the truth(y) values directly, see <a href="https://docs.python.org/3/library/stdtypes.html#truth-value-testing" rel="nofollow noreferrer">truth value testing</a>.</li>
<li>Is possible add comments on what does the function does.</li>
</ol>

<p>After a first rewrite the code of your function should look something like this:</p>

<pre><code>def get_index(a, b):
    """Get the index of and element or else return 'not found' """
    status = 0
    index = 0
    for i, element in enumerate(b):
        if element == a:
            index = i
            status = 1
            break
    if status:
        return index
    else:
        return "not found"


def get_string(a, b, c):
    """Build a sub-string from c starting on a"""
    string = c[a]
    for i in range(a + 1, b, 1):
        element = c[i]
        string = string + element
    return string


def lcm(a, b):
    """Find the least common multiple"""
    if a &gt; b:
        larger = a
    else:
        larger = b
    i = larger
    while True:
        if (i % a == 0) and (i % b == 0):
            break
        else:
            i += larger
    return i


if __name__ == "__main__":
    assert get_index(1, [1, 2, 3]) == 0
    assert get_index(1, [2, 3]) == "not found"
    assert get_string(0, 3, "hello world") == "hel"
    assert lcm(2, 5) == 10
</code></pre>

<p>I added some (basic) test, to validate any further change you could make in the future to this functions. </p>

<p>The above comments are superficial, if you want speed and reliability use the functions provided by the standard library, in the end your functions should look like something like this:</p>

<pre><code>from math import gcd


def get_index(a, b):
    """Get the index of and element or else return 'not found' """
    try:
        return b.index(a)
    except ValueError:
        return "not found"


def get_string(a, b, c):
    """Build a sub-string from c starting on a"""
    return c[a:b]


def lcm(a, b):
    """Find the least common multiple"""
    return abs(a * b) // gcd(a, b)
</code></pre>

<p>The <code>lcm</code> implementation uses the <code>gcd</code>, see more in the wikipedia <a href="https://en.wikipedia.org/wiki/Least_common_multiple#Using_the_greatest_common_divisor" rel="nofollow noreferrer">page</a>. </p>
    </div>