<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>1. Review</h3>

<ol>
<li><p>There are no docstrings. What does <code>move</code> do? What does it return?</p></li>
<li><p><code>move</code> always returns its first argument as the first element of the returned tuple. This seems pointless since the caller obviously has the argument in hand at the point where <code>move</code> is called.</p></li>
<li><p>When raising an exception, it's a good idea to write a message explaining what went wrong. In this case, something like:</p>

<pre><code>raise ValueError(f"expected a direction but got {direction!r}")
</code></pre></li>
<li><p>The body of <code>move</code> consists of four copies of the movement logic, one for each direction. There are at least three reasons to avoid this kind of repetition:</p>

<p>(i) it increases the bulk of code and so makes it more time-consuming to read and understand;</p>

<p>(ii) it makes it harder to change because you have to make corresponding edits to all four copies;</p>

<p>(iii) it runs the risk of introducing a bug that only affects one of the copies, making it less likely to be discovered in testing.</p>

<p>The easiest way to merge these four copies is to change the board representation. Instead of representing the board as a list of \$n\$ lists of \$n\$ tile values, represent it as a single list of \$n×n\$ tiles, for example in the \$4×4\$ case you could index the board like this:</p>

<p><img src="https://i.stack.imgur.com/Roq7n.png" alt=""></p>

<p>The advantage of this representation is that the indexes for each row and each column (whichever direction it is traversed) form an arithmetic progression, which can be represented by a <code>range</code> object. For example, to go right along the 2nd row we need the indexes 4, 5, 6, and 7, which can be represented by <code>range(4, 8)</code>, and to ascend the 3rd column we need the indexes 14, 10, 6, and 2, which can be represented by <code>reversed(range(2, 16, 4))</code>.</p>

<p>Note that this representation simplifies some of the other code: we only need one indexing operation on each lookup, not two, and copying the board is easier.</p></li>
<li><p>Multiple merges are prevented by adding coordinates to the list <code>already_merged</code>. There are three problems with this:</p>

<p>(i) Python lists do not have an efficient membership test, so that <code>(x, ny) not in already_merged</code> has to potentially compare against every element in the list. It would be more efficient to use a set.</p>

<p>(ii) Tiles can only merge with tiles on the same row (if moving horizontally) or column (if moving vertically) and so there is no need to keep a set of the coordinates of all merged tiles, just the ones on the current row (or column), for example:</p>

<pre><code>if direction == MoveDirection.UP:
    for x in range(size[0]):
        already_merged = set()
        # ...
</code></pre>

<p>(iii) In fact we only care whether one tile has merged, namely the last tile to move on the current row or column. So with some refactoring it ought to be possible to remember the merge status using a single boolean. See below for how this could be done.</p></li>
<li><p>The move logic has three nested loops, for example in the "moving up" case:</p>

<pre><code>for x in range(size[0]):
    for y in range(1, size[1]):
        # ...
        for ny in reversed(range(0, y)):
</code></pre>

<p>This means that if the board is \$n×n\$, the algorithm runs in time \$O(n^3)\$. But if you think about how you would implement this by hand, you'd have two indexes, one representing how far you'd visited in the old row or column, the other representing how far you'd packed in the new row or column. For example, in the "moving left" case you'd start like this (note that the new board starts out empty):</p>

<p><img src="https://i.stack.imgur.com/PcvY6.png" alt=""></p>

<p>and then after visiting the first two tiles (and packing one onto the new row), the situation looks like this:</p>

<p><img src="https://i.stack.imgur.com/vXSq9.png" alt=""></p>

<p>and at the end of the row you've visited all four tiles and packed two:</p>

<p><img src="https://i.stack.imgur.com/Pe0Kk.png" alt=""></p>

<p>This approach would reduce the complexity of the algorithm to \$O(n^2)\$.</p></li>
</ol>

<h3>2. Revised code</h3>

<pre><code># Map from direction to function taking (i, n) and returning an
# iterable of indexes for the i'th row or column in the given
# direction on a board of side n.
INDEXES = {
    MoveDirection.UP: (lambda i, n: range(i, n ** 2, n)),
    MoveDirection.DOWN: (lambda i, n: reversed(range(i, n ** 2, n))),
    MoveDirection.LEFT: (lambda i, n: range(i * n, (i + 1) * n)),
    MoveDirection.RIGHT: (lambda i, n: reversed(range(i * n, (i + 1) * n))),
}

def move(old_board, n, direction):
    """Move tiles in the indicated direction.

    Arguments:
    old_board -- game board before the move
    n -- side of square board
    direction -- direction to move

    Returns:
    new_board -- game board after the move
    moves -- list of tuples (from, to, merged) giving the indexes of
       tiles that moved and whether they merged as a result

    """
    new_board = [0] * n ** 2
    moves = []
    for i in range(n):
        indexes = INDEXES[direction](i, n) # indexes of i'th row or column
        new_indexes = iter(indexes)        # corresponding indexes in new board
        k = next(new_indexes)              # target index in new board
        merged = False                     # new_board[k] merged already?
        for j in indexes:
            moving = old_board[j]
            if moving:
                if not merged and moving == new_board[k]:
                    new_board[k] += 1
                    merged = True
                else:
                    if new_board[k]:
                        k = next(new_indexes)
                    new_board[k] = moving
                    merged = False
                if j != k:
                    moves.append((j, k, merged))
    return new_board, moves
</code></pre>

<p>Note that this is just a sketch to indicate the approach that I have in mind. In the real program, <code>n</code> is going to be constant for the duration of a game, and so you could generate all the indexing ranges once at the start of the game instead of providing functions to generate them as above.</p>
    </div>