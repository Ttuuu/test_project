<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The first thing that comes into my mind is that if <code>evapPerDay</code> is <code>&lt;= 0</code> the function will continue infinitely - or more precise: until a stack overflow is encountered. So you have to guard against that:</p>
<pre><code>let evaporatorReview (content: float) (evapPerDay: float) (threshold: float): int =
    if evapPerDay &lt;= 0. then 
        failwith "evapPerDay must be greater than 0.0"
    else
        // ... The original algorithm
</code></pre>
<hr>
<p>The next is that by having the unnecessary local <code>result</code> variable <code>solve()</code> isn't tail recursive. You can fix that by simply return directly from the <code>match</code>-entries:</p>
<pre><code>let evaporator (content: float) (evapPerDay: float) (threshold: float): int =
    let minUsefulAmount = content * (threshold / 100.)
    let evapAsPercentage = evapPerDay / 100.

    let rec solve (content: float) (dayCount: int) =
        let amountLost = content * evapAsPercentage
        let newContent = content - amountLost
        let stillUseful = newContent &gt; minUsefulAmount

        match stillUseful with
        | true -&gt; solve newContent (dayCount + 1)
        | false -&gt; dayCount
    solve content 1
</code></pre>
<hr>
<p>IMO all the temporary variables in <code>solve()</code> blur what actually is going on. By skipping them and do the calculations directly in the recursive call to <code>solve()</code> the picture is more clear:</p>
<pre><code>let evaporator (content: float) (evapPerDay: float) (threshold: float): int =
    if evapPerDay &lt;= 0. then 
        failwith "evapPerDay must be greater than 0.0"
    else
        let limit = content * threshold / 100.
        let rec solve (content: float) (dayCount: int) =
            match content with
            | x when x &lt;= limit -&gt; dayCount
            | _ -&gt; solve (content * (1. - evapPerDay / 100.)) (dayCount + 1)

        solve content 0
</code></pre>
<hr>
<p>In fact you don't have to calculate on the content, you can do it percentage wise:</p>
<pre><code>let evaporatorReview (content: float) (evapPerDay: float) (threshold: float): int =
    if evapPerDay &lt;= 0. then 
        failwith "evapPerDay must be greater than 0.0"
    else
        let limit = threshold / 100.
        let rec solve (remaining: float) (dayCount: int) =
            match remaining with
            | x when x &lt;= limit -&gt; dayCount
            | _ -&gt; solve (remaining * (1. - evapPerDay / 100.)) (dayCount + 1)

        solve 1. 0
</code></pre>
<hr>
<p>The mathematical "discipline" in question here is exponential growth (<code>r &gt; 0</code>) or decay (<code>r &lt; 0</code>) and there is a formula for that:</p>
<pre><code>Xn = X0 * (1 + r)^n
</code></pre>
<p>Where <code>Xn</code> is <code>threshold</code>, <code>X0</code> is <code>100</code> or <code>content</code>, <code>r</code> is <code>evapPerDay / 100.</code> and <code>n</code> is the number of days = the result.</p>
<p>This can be use in sequential calculations ending when the threshold is met:</p>
<pre><code>let evaporatorSeq (content: float) (evapPerDay: float) (threshold: float): int =
    if evapPerDay &lt;= 0. then 
        failwith "evapPerDay must be greater than 0.0"
    else
        let limit = threshold / 100.0
        Seq.initInfinite (fun i -&gt; i) 
        |&gt; Seq.takeWhile (fun n -&gt; Math.Pow(1.0 - evapPerDay / 100.0, float n) &gt; limit)
        |&gt; Seq.last
        |&gt; (+) 1
</code></pre>
<hr>
<p>But even better, it can be solved in respect to <code>n</code> as :</p>
<pre><code>n = log(Xn/X0) / log(1 + r)
</code></pre>
<p>which can be used in the function as an O(1) - solution:</p>
<pre><code>let evaporator content evapPerDay threshold = 
    match evapPerDay with
    | x when x = 100. -&gt; 1
    | x when x &lt;= 0.0 -&gt; failwith "evapPerDay must be greater than 0.0"
    | _ -&gt; int (Math.Ceiling(Math.Log((threshold / 100.) / 1.) / Math.Log(1. - evapPerDay / 100.)))
</code></pre>
<p>The division by <code>1.</code> is of cause redundant, but it emphasize the relation of the expression to its origin.</p>
<p><code>if evapPerDay = 100. then 1</code> is necessary here because if <code>evapPerDay = 100</code> then <code>Math.Log(1.0 - evapPerDay / 100.)</code> becomes <code>Math.Log(0.)</code> which isn't defined.</p>
    </div>