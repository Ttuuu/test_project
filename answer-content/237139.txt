<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I have some observations not mentioned in <a href="/a/237125/75307">Jerry Coffin's answer</a>.</p>

<hr>

<p>Prefer <code>&lt;cstdlib&gt;</code> over <code>&lt;stdlib.h&gt;</code>.  The former puts its identifiers into the <code>std</code> namespace where we want them.</p>

<hr>

<p>To select one line at random from all the input lines, we don't need to store them all.  There's a single-pass algorithm that selects each line with equal probability, that's quite simple to understand:</p>

<ul>
<li>Choose the first line with probability 1 (i.e. always).</li>
<li>Read the second line, and with probability ½ choose it instead of the first.</li>
<li>Read the third line, and with probability ⅓ choose it instead of one of the first two.</li>
<li>Read the fourth line, and replace selected line with probability ¼.</li>
<li>and so on...</li>
</ul>

<p>In code, that looks like this:</p>

<pre><code>#include &lt;istream&gt;
#include &lt;random&gt;
#include &lt;string&gt;

#include &lt;utility&gt;

std::string random_line(std::istream&amp; input)
{
    static auto gen = std::mt19937{std::random_device{}()};
    auto count = 0u;
    auto selected = std::string{};
    std::string line;
    while (std::getline(input, line)) {
        if (std::uniform_int_distribution{0u,count++}(gen) == 0) {
            selected = std::move(line);
        }
    }
    return selected;
}
</code></pre>

<p>We can demonstrate it with a simple test program, that will pick one of six lines, approximately 20000 times each:</p>

<pre><code>#include &lt;iostream&gt;
#include &lt;map&gt;
#include &lt;sstream&gt;
int main()
{
    auto const lines = "one\n"
                       "two\n"
                       "three\n"
                       "four\n"
                       "five\n"
                       "six\n";
    auto counts = std::map&lt;std::string,unsigned int&gt;{};
    for (auto i = 0;  i &lt; 120000;  ++i) {
        auto is = std::istringstream{lines};
        ++counts[random_line(is)];
    }

    {
        // print the counts
        auto is = std::istringstream{lines};
        std::string line;
        while (std::getline(is, line)) {
            std::cout &lt;&lt; line &lt;&lt; ": " &lt;&lt; counts[line] &lt;&lt; '\n';
        }
    }
}
</code></pre>

<hr>

<p>Always check whether reading input succeeded:</p>

<blockquote>
<pre><code>        std::cin &gt;&gt; guess;
</code></pre>
</blockquote>

<p>If we reach the end of input, then <code>guess</code> will be empty (or in C++03 and earlier, won't be written to), and we'll enter an infinite loop.</p>

<p>Similarly, make sure that <code>file</code> is good after opening it in <code>random_line()</code>.</p>

<p>Consider ignoring non-word characters (e.g. <code>!</code>, <code>@</code>, ...) as invalid input, unless your word list actually contains them.  And consider being nice to the user if they enter a guess they've already tried - don't penalise that as a wrong guess.</p>

<hr>

<p>Minor: Spelling error in the final result:</p>

<pre><code>std::cout &lt;&lt; "You lose!\n";
</code></pre>
    </div>