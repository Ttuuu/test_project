<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Dry out, and separate style, data and logic.</h2>

<p>D3 seams to encourage a lot of repeated code with many lines of chained calls to <code>.style</code> and <code>.attr</code> and with that a tendency to mix data, style, and logic into one hard to follow and maintain source code mass.</p>

<p>With a little additional effort you can create helper functions to remove the repeating code and help separate data, style and logic.</p>

<p>With the helper function you can move all the optional style related information to a single encapsulated object.</p>

<h3>The wavy line</h3>

<p>The creation of the wave is rather long winded, first you create the points, then you transform them to fit the 360deg of the circle. And you have to pop the last value.</p>

<p>This can be simplified to one function that creates all the points transformed and scaled, reducing the complexity and thus attainability of the code. You don't need rotate, and the (hacky) need to pop the last point from the array. </p>

<p>Eg </p>

<pre><code>    d3.range(numPoints - 1).map(k =&gt; {
        const u = k / numPoints * PI2 ;
        const r = radius + Math.sin(u * numWaves + phase) * amplitude;
        return [scaleX(Math.cos(u) * r), scaleY(Math.sin(u) * r)];
    });
</code></pre>

<p>Also the number of point should be related to the size of the circle. Creating a segment length option you can get the number of points needed to match a desired resolution.</p>

<h2>Coercion</h2>

<p>You don't need to coerce values if the expression does will do it anyways.</p>

<blockquote>
<pre><code>const height = +svg.attr('height') - margin.top - margin.bottom;
</code></pre>
</blockquote>

<p>The <code>+</code> is not needed as <code>-</code> can only operate on numbers and will thus coerce the string to a number.</p>

<pre><code>const height = svg.attr('height') - margin.top - margin.bottom;
</code></pre>

<h2>Example.</h2>

<p>The example code has a helper that sets object attributes, styles, or calls functions with supplied data to remove the need to repeat the long list of chained <code>attr</code>, <code>style</code>, and calls.</p>

<p>The object options has most of the data needed to style and display the graph.</p>

<p>A single function <code>getSineWave</code> creates the line.</p>

<p>The code to create and display the final result is at the bottom.</p>

<p>You can make many changes to the style and data without needing to navigate the code to find and replace one or more copies of the styling you are changing.</p>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>const d3Helper = (obj, props) =&gt; {
  if (props.call || props.attr || props.style) {
    const call = Object.entries(props.call || {});
    const style = Object.entries(props.style || {});
    const attr = Object.entries(props.attr || {});
    for (const [name, value] of call) {
      obj[name](value)
    }
    for (const [name, value] of style) {
      obj.style(name, typeof value === "function" ? value() : value);
    }
    for (const [name, value] of attr) {
      obj.attr(name, typeof value === "function" ? value() : value);
    }
  } else {
    for (const [name, value] of Object.entries(props)) {
      obj[name](value)
    }
  }
  return obj;
}

const svg = d3.select('svg');
const marg = { top: 50,right: 50,bottom: 50,left: 50};
const width = svg.attr('width') - marg.left - marg.right;
const height = svg.attr('height') - marg.top - marg.bottom;
const widthH = width / 2, heightH = height / 2;
const PI = Math.PI, PI2 = PI * 2;
const options = {
  scale: 100,
  radius: 63.66,
  numWaves: 4,
  amplitude: 10,
  phase: PI / 2,
  segmentLength: 2, // pixels per line segment (approx)
  color: "black",
  lineWidth: "2px",
  dash: "3, 3",
  get domain() {
    return [-options.scale, options.scale]
  },
};
Object.assign(options, { ...{
    numPoints: options.radius * PI2 / options.segmentLength | 0,
    g: {
      attr: {
        transform: `translate(${marg.left + widthH},${marg.top + heightH})`
      }
    },
    rect: {
      attr: {
        "class": "content",
        width: width,
        height: height,
        transform: `translate(${-widthH},${-heightH})`,
      }
    },
    circle: {
      style: {
        "stroke-dasharray": () =&gt; options.dash,
        stroke: () =&gt; options.color,
        fill: "transparent"
      },
      attr: {
        cx: 0,
        cy: 0,
        r: () =&gt; scaleX(options.radius)
      }
    },
    wave: {
      attr: {
        d: () =&gt; line(sineWave),
        fill: "none",
        stroke: () =&gt; options.color,
        "stroke-width": () =&gt; options.lineWidth,
      }
    },
    line: {
      x: d =&gt; d[0],
      y: d =&gt; d[1],
      curve: d3.curveCardinalClosed
    },
    scaleX: {
      domain: options.domain,
      range: [-widthH, widthH]
    },
    scaleY: {
      domain: options.domain,
      range: [-heightH, heightH]
    },
  }
});

const getSineWave = ({numWaves, amplitude, phase, radius, numPoints}) =&gt;
  d3.range(numPoints - 1).map(i =&gt; {
    const a = i / numPoints * PI2;
    const r = radius + Math.sin(a * numWaves + phase) * amplitude;
    return [scaleX(Math.cos(a) * r), scaleY(Math.sin(a) * r)];
  });

const vis = d3Helper(svg.append('g'), options.g);
d3Helper(vis.append('rect'), options.rect);
const scaleX = d3Helper(d3.scaleLinear(), options.scaleX);
const scaleY = d3Helper(d3.scaleLinear(), options.scaleY);
vis.append('g').call(d3.axisTop(scaleX));
vis.append('g').call(d3.axisLeft(scaleY));
d3Helper(vis.append('circle'), options.circle);
const sineWave = getSineWave(options);
const line = d3Helper(d3.line(), options.line);
d3Helper(vis.append('path'), options.wave);</code></pre>
<pre class="snippet-code-css lang-css prettyprint-override"><code>svg {
  background-color: steelblue;
}

.content {
  fill: lightsteelblue;
}</code></pre>
<pre class="snippet-code-html lang-html prettyprint-override"><code>&lt;script src="https://d3js.org/d3.v4.js"&gt;&lt;/script&gt;
&lt;svg width="1000" height="1000"&gt; &lt;/ svg&gt;</code></pre>
</div>
</div>

    </div>