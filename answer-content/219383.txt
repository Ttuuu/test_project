<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><code>Range.CopyFromRecordset</code> only addresses the [massive] performance issue of traversing an entire recordset row by agonizing row and writing it to a worksheet cell by agonizing cell - all while Excel painstakingly repaints itself every time, fires <code>Worksheet.Change</code> events, and evaluates whether or not recalculations should be happening... <em>between every single worksheet write</em>.</p>

<p>Whenever you programmatically interact with a worksheet, it's a good idea to turn off screen updating, event firing, and make calculations manual to avoid this overhead:</p>

<pre><code>With objExcel
    .ScreenUpdating = False
    .EnableEvents = False
    .Calculation = xlCalculationManual
End With
</code></pre>

<p>And then, don't forget to toggle this <code>Application</code> state back on, and handle runtime errors to make sure it's toggled back on regardless of whether an error occurs or not. Note that any code that involves I/O or a database connection, <em>should</em> handle run-time errors. Right now if the connection times out or if there's a syntax error in that SQL statement, the error is unhandled. I'd recommend something like this:</p>

<pre><code>Public Sub DoSomething()
    On Error GoTo CleanFail
    '...do stuff...
CleanExit:
    '...clean up: restore state, close open connections, etc...
    Exit Sub
CleanFail:
    'log error, warn user, etc.
    Resume CleanExit
End Sub
</code></pre>

<p>You are not consistently declaring your variables: the fact that the code can even compile &amp; run with undeclared variables, means you haven't specified <code>Option Explicit</code> at the top of the module. This is a very common beginner trap: VBA is very permissive and lets you do this - doesn't mean you <em>should</em> though. By specifying <code>Option Explicit</code> at the top of every module, you force yourself to declare all variables - which turns a typo into a compile error instead of a very hard-to-diagnose run-time bug.</p>

<p>Activating the active sheet is redundant:</p>

<blockquote>
<pre><code>Set Sheet = objWorkbook.ActiveSheet
Sheet.Activate
</code></pre>
</blockquote>

<p>Rule of thumb, you pretty much <em>never</em> need to <code>Activate</code> anything - especially if you mean to work "in the background" with a hidden application instance. Speaking of which...</p>

<blockquote>
<pre><code>Set objExcel  = CreateObject("Excel.Application")
</code></pre>
</blockquote>

<p>You're hosted in Excel: the Excel type library <em>has</em> to be referenced. There is no reason whatsoever to use <code>CreateObject</code> for this. The <code>New</code> keyword is used for creating objects for which the type is known at compile-time:</p>

<pre><code>Set objExcel = New Excel.Application
</code></pre>

<p>Avoid <code>CreateObject</code> whenever possible: it's hitting the Windows Registry, looking up the provided ProgID string, then finds the corresponding class, loads the type from the library, creates an instance, and returns it. Between this:</p>

<blockquote>
<pre><code>Set RS = Conn.Execute(SQL)
</code></pre>
</blockquote>

<p>And this:</p>

<blockquote>
<pre><code>Set RS   = CreateObject("ADODB.Recordset") 
RS.Open SQL, Conn
</code></pre>
</blockquote>

<p>I take <code>Conn.Execute</code> any day. So you're also using late binding for ADODB:</p>

<blockquote>
<pre><code>Dim Conn
Dim RS
Dim SQL
</code></pre>
</blockquote>

<p><code>Conn</code> and <code>RS</code> should be declared <code>As Object</code>, and <code>SQL</code> should be <code>As String</code>. As it stands, all 3 are implicit <code>Variant</code>. But ideally, you would be referencing the ADODB library, and declare <code>Conn As ADODB.Connection</code> and <code>RS As ADODB.Recordset</code>, creating the connection with <code>Set Conn = New ADODB.Connection</code>.</p>

<p>Note that <code>While...Wend</code> loops were made obsolete when <code>Do While...Loop</code> was introduced, a long time ago: avoid <code>While...Wend</code> - these loops can't be exited without a <code>GoTo</code> jump, but you can early-exit a <code>Do</code> loop with <code>Exit Do</code>.</p>

<p>Watch out for implicit <code>ByVal</code> expressions here:</p>

<blockquote>
<pre><code>MsgBox ("Saved")
</code></pre>
</blockquote>

<p>This takes the <code>"Saved"</code> string literal, evaluates it as an expression (yielding... a string literal), and passes the result <code>ByVal</code> to the <code>MsgBox</code> function. The parentheses are redundant and harmful!</p>

<pre><code>MsgBox "Saved"
</code></pre>

<p>Note that this wouldn't compile:</p>

<pre><code>MsgBox ("Saved", vbOkOnly)
</code></pre>

<p>Because <code>("Saved", vbOkOnly)</code> isn't a legal expression that can be evaluated.</p>

<p>Lastly, note that a lot of everything mentioned above (and more) would have been picked up by the <em>Code Inspections</em> of <a href="http://www.github.com/rubberduck-vba/Rubberduck" rel="noreferrer">Rubberduck</a>, a VBIDE add-in open-source project I contribute to (along with a merry bunch of fellow VBA reviewers - star us on GitHub if you like!) - I'm obviously biased, but I can't recommend it enough. The <a href="https://rubberduckvba.wordpress.com/" rel="noreferrer">project's blog</a> is also a valuable resource for various VBA topics, from late binding to object-oriented programming and modern best-practices.</p>
    </div>