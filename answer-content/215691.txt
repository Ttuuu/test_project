<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Use primitive functions and operators as much as possible</strong></p>

<p>You are defining <code>remove-dups</code>, and in this function you use the primitive <code>adjoin</code>, which adds an element to a list if not already present. But in Common Lisp the primitive function <code>remove-duplicates</code> is also <a href="http://www.lispworks.com/documentation/HyperSpec/Body/f_rm_dup.htm#remove-duplicates" rel="nofollow noreferrer">available</a>, that returns a list without duplicates.</p>

<p>Instead of <code>(+ expression 1)</code> use the primitive <code>1+</code> function: <code>(1+ expression)</code>.</p>

<p>To iterate over a list there are convenient primitives iterative constructs, like <code>dolist</code> and <code>loop</code> (see below).</p>

<p><strong>Alists</strong></p>

<p>If you want to use alists, it can be more clean to use the primitive operators already defined on them, like <code>acons</code>, <code>pairlis</code>, <code>assoc</code>. For instance, the program could be simplified in this way:</p>

<pre><code>(defun occurrences (lst)
  (let* ((elements (remove-duplicates lst))
         (alist (pairlis elements (make-list (length elements) :initial-element 0))))
    (loop for x in lst
          do (incf (cdr (assoc x alist))))
    alist))
</code></pre>

<p>Note that the counters inside the alist are incremented with <code>incf</code>; in fact another suggestion of mine is “don’t by shy to use modifying primitives”, when you are modifying things locally to some function and are sure no undesirable side-effects arise.</p>

<p><strong>Hash tables</strong></p>

<p>Another suggestion is: use the data structures for the task at hand. In Common Lisp there are hash tables, which are <em>ideal</em> for problems like yours. For instance:</p>

<pre><code>(defun occurrences (lst)
  (let ((table (make-hash-table)))
    (loop for x in lst
          do (incf (gethash x table 0)))
    (loop for k being the hash-key of table
          using (hash-value v)
          collect (cons k v))))
</code></pre>

<p>This is of course the most efficient solution of all, since it is of O(<em>n</em>), and it scans only once the input list. At the end you could sort the elements returned by their <code>car</code>, and remember always that all the primitive functions that need to do comparisons use by default <code>eql</code> but can be called with an extra keyword parameter <code>:test</code> to chose another comparison predicate, as for instance <code>equal</code> to compare complex values as lists. This applies to <code>remove-duplicates</code>, <code>assoc</code> and <code>make-hash-table</code>.</p>
    </div>