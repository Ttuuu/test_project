<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>When you have a starting bracket without a closing bracket, your program ignores the problem entirely.</p>

<p>Now ask yourself this, what happens when you get a closing bracket without an opening bracket?</p>

<p>The answer is a negative depth and an exception from the dictionary for trying to remove something that doesn't exist... oops.</p>

<p>The easiest way to solve that is to check that the depth is greater than 0 and handle the error before trying to index or remove an item or decrease the depth.</p>

<hr>

<p>In terms of improvements, I'd suggest turning your algorithm into a proper function and not mixing console code with it. Doing so would make this behaviour reusable instead of having the algorithm tightly coupled to the output method.</p>

<p>Additionally, it would be best to provide a list of pairs of positions (a start position and an end position), and as an added bonus you could then turn this into a generator function (i.e. it returns <code>IEnumerable&lt;BracketPair&gt;</code>).</p>

<p>I apologise in advance for using some 'outdated' methods like <code>string.Format</code> instead of <code>$""</code>, I haven't caught up with the techniques introduced after C# 4.5.</p>

<pre><code>// Using a struct because this is a small and cheap immutable object
public struct BracketPair
{
    private int startIndex;
    private int endIndex;
    private int depth;

    public BracketPair(int startIndex, int endIndex, int depth)
    {
        if (startIndex &gt; endIndex)
            throw new ArgumentException("startIndex must be less than endIndex");

        this.startIndex = startIndex;
        this.endIndex = endIndex;
        this.depth = depth;
    }

    public int StartIndex
    {
        get { return this.startIndex; }
    }

    public int EndIndex
    {
        get { return this.endIndex; }
    }

    public int Depth
    {
        get { return this.depth; }
    }
}

public static class TextHelper
{
    public static IEnumerable&lt;BracketPair&gt; ParseBracketPairs(string text)
    {
        var startPositions = new Stack&lt;int&gt;();

        for (int index = 0; index &lt; text.Length; index++)
            if (text[index] == '[')
            {
                startPositions.Push(index);
            }
            else if (text[index] == ']')
            {
                if (startPositions.Count == 0)
                    throw new ArgumentException(string.Format("mismatched end bracket at index {0}", index));

                var depth = startPositions.Count - 1;
                var start = startPositions.Pop();

                yield return new BracketPair(start, index, depth);
            }

        if (startPositions.Count &gt; 0)
            throw new ArgumentException(string.Format("mismatched start brackets, {0} total", startPositions.Count));
    }

    // You can even go one step further and handle TextReaders  
    // Remember you need using System.IO
    public static IEnumerable&lt;BracketPair&gt; ParseBracketPairs(TextReader reader)
    {
        var startPositions = new Stack&lt;int&gt;();

        for (int index = 0; reader.Peek() != -1; ++index)
        {
            // Detect overflow
            if (index &lt; 0)
                throw new ArgumentException(string.Format("input text too long, must be shorter than {0} characters", int.MaxValue));

            var c = (char)reader.Read();
            if (c == '[')
            {
                startPositions.Push(index);
            }
            else if (c == ']')
            {
                // Error on mismatch
                if (startPositions.Count == 0)
                    throw new ArgumentException(string.Format("mismatched end bracket at index {0}", index));

                // Depth tends to be zero-based
                var depth = startPositions.Count - 1;
                var start = startPositions.Pop();

                yield return new BracketPair(start, index, depth);
            }
        }

        // Error on mismatch
        if (startPositions.Count &gt; 0)
            throw new ArgumentException(string.Format("mismatched start brackets, {0} total", startPositions.Count));
    }
}
</code></pre>

<p>After which using the following:</p>

<pre><code>static void Main(string[] args)
{
    for (string input = Console.ReadLine(); !string.IsNullOrWhiteSpace(input); input = Console.ReadLine())
    {
        foreach (var pairs in TextHelper.ParseBracketPairs(input))
            Console.WriteLine("Start: {0}, End: {1}, Depth: {2}", pairs.StartIndex, pairs.EndIndex, pairs.Depth);
    }
}
</code></pre>

<p>For the input <code>[a][b[c[d]e]][f]</code> you get:</p>

<pre><code>Start: 0, End: 2, Depth: 0
Start: 7, End: 9, Depth: 2
Start: 5, End: 11, Depth: 1
Start: 3, End: 12, Depth: 0
Start: 13, End: 15, Depth: 0
</code></pre>

<p>By providing an <code>IEnumerable&lt;BracketPair&gt;</code> you get access to all the useful extension methods from LINQ which will allow you to process your bracket pairs however you see fit.</p>
    </div>