<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Review</h2>

<ul>
<li>You always instantiate inner dialogs for both platforms, even though one will never be called. Your platform will not change at runtime. Use the <a href="https://docs.microsoft.com/en-us/dotnet/api/system.lazy-1?view=netframework-4.8" rel="noreferrer">Lazy pattern</a> to only instantiate the required dialog at first access.</li>
<li>Rather than returning the magic path <code>null</code>, I would opt to use a <code>TryShow</code> method returning a <em>boolean</em> whether a path got selected an an <code>out</code> parameter for the path.</li>
</ul>

<hr>

<h2>Object Destruction</h2>

<p>From <a href="https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/destructors" rel="noreferrer">Programming Guide: Destructors</a>:</p>

<blockquote>
  <p><em>The programmer has no control over when the finalizer is called
  because this is determined by the garbage collector. The garbage
  collector checks for objects that are no longer being used by the
  application. If it considers an object eligible for finalization, it
  calls the finalizer (if any) and reclaims the memory used to store the
  object.</em></p>
</blockquote>

<p>Since your class is not sealed, derived classes can be made. These classes will not be able to control the order of finalisation code. The order of destructors is fixed as this snipped from the link shows:</p>

<blockquote>
<pre><code>protected override void Finalize()  
{  
    try  
    {  
        // Cleanup statements...  
    }  
    finally  
    {  
        base.Finalize();  
    }  
}
</code></pre>
</blockquote>

<p>That's why you should implement the <a href="https://docs.microsoft.com/en-us/dotnet/standard/garbage-collection/implementing-dispose" rel="noreferrer">dispose pattern</a> instead. It allows for more flexibility in flow and distinguishes between disposing managed vs unmanaged code. </p>

<hr>

<h2>Unit Tests</h2>

<blockquote>
  <p><em>My reasoning for this design is that now the 3 readonly variables can be mocked in unit tests via reflection, while this isn't an ideal way
  of doing it, it's better than nothing.</em></p>
</blockquote>

<p>When writing code with testability in mind, you don't want to resort to reflection to mock private state of your classes. There are a couple of options available:</p>

<ul>
<li>Make the <em>private</em> methods <em>protected virtual</em>. Mocking frameworks and derived classes are able to override the methods. Partial mocks could be used in this case.</li>
<li>Wrap both internal dialogs behind a custom interface, injected into the outer class. The class no longer has dependencies on native win and vista components and interfaces are easy to mock. </li>
</ul>
    </div>