<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>PEP-8 Violations</h1>

<p>The <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">Style Guide for Python Code</a> enumerates many conventions that all Python code should follow.  You have deviated from these conventions in several areas:</p>

<ol>
<li><code>mixedCase</code> is discouraged.  Function names, methods and variable should all be <code>snake_case</code>.  This means <code>thetaMax</code> should be called <code>theta_max</code>.  (Exceptions are allowed for things like <code>Da</code>, where consistency with mathematical notation is more important than consistency with Python style.)</li>
<li><code>return</code> is not a function call; it should not have parenthesis.  Ie) <code>return(result)</code> should be written as <code>return result</code>.</li>
<li><code>if</code> is also not a function call, nor is Python a C-like language; it should not have parenthesis.  <code>if(method == 'mle'):</code> should be written as <code>if method == 'mle':</code></li>
<li>Binary operators should have one space before and after it.  This is only violated by the division operation in <code>gpcm</code> from my quick perusal of the code.</li>
<li>Commas should be followed by one space.</li>
<li>The equal sign used in <code>keyword=parameter</code> should not have a space before or after it.  This applies both to the function definitions <code>def gpcm(theta, d, score, a, D=1.7):</code> and function calls <code>p = prob3pl(theta, a, b, c, D=D)</code></li>
<li>Builtin Python identifiers should not be redefined without reason.  <code>object</code> is such an identifier.  A better name should be used.</li>
</ol>

<h1>Truthiness of lists.</h1>

<p>A container used in a boolean context is <code>True</code> if the container is not empty, and <code>False</code> if the container is empty.  There is no need to fetch the length of the container, test that value is greater than zero:</p>

<pre><code>if x1:
</code></pre>

<p>is more "Pythonic" than:</p>

<pre><code>if(len(x1) &gt; 0):
</code></pre>

<h1>Ranges Start at Zero by Default</h1>

<p>By default, all ranges start at 0.  This means <code>range(0, len(x2))</code> is much more commonly written as <code>range(len(x2))</code>.</p>

<h1>Iteration over a container</h1>

<p>Python is a scripting language, where the script can assign its own implementation for many operations including subscripting, and iteration.  This makes it impossible for Python to optimize code like:</p>

<pre><code>for i in range(0, len(x2)):
    ... use the value x2[i] ...
</code></pre>

<p>It will usually be more efficiently written as:</p>

<pre><code>for x2_i in x2:
    ... use the value x2_i ...
</code></pre>

<p>If the index is needed along with the values, then <code>enumerate()</code> is used for the most efficient result:</p>

<pre><code>for i, x2_i in enumerate(x2):
    result[i] = gpcm(theta, d=d[i], score=x2_i, a=1, D=D)
</code></pre>

<p>Iterating over two (or more) parallel list (<code>d</code> and <code>x2</code>) would be done using zip:</p>

<pre><code>for d_i, x2_i in zip(d, x2):
    ... = gpcm(theta, d=d_i, score=x2_i, a=1, D=D)
</code></pre>

<p>And if the indices are also needed, <code>enumerate(zip(...))</code>:</p>

<pre><code>for i, (d_i, x2_i) in enumerate(zip(d, x2)):
    result[i] = gpcm(theta, d=d_i, score=x2_i, a=1, D=D)
</code></pre>

<p>But building up a complete array is more commonly done with list comprehension:</p>

<pre><code>result = [ gpcm(theta, d=d_i, score=x2_i, a=1, D=D) for d_i, x2_i in zip(d, x2) ]
</code></pre>

<p>which eliminates the need for the <code>result = [0] * len(x2)</code> pre-allocation.</p>

<h1>Keyword Arguments</h1>

<p>What arguments can be passed to <code>thetaMax()</code>?</p>

<p>The answer is "any".  The user has no way of knowing what is possible, or allowed.  You can pass <code>optimization_level=18</code> without error ... and without effect.</p>

<p>It would be safer to define the function with the allowed keyword arguments explicitly:</p>

<pre><code>def thetaMax(x, indDichot, a, b, c, D, d, method='mle', *, mu=None, sigma=None):

    if method not in {'mle', 'map'}:
        raise ValueError("Invalid method")
    if method == 'map':
        if mu is None or sigma is None:
            raise ValueError("Both mu= and sigma= keyword arguments must be given")
    elif method == 'mle':
        if mu is not None or sigma is not None:
            raise ValueErorr("Neither mu= or sigma= is appropriate for 'mle'")
</code></pre>

<p>As a bonus, having the values already extracted into their own variables is faster than repeatedly looking up <code>optional_args['mu']</code> and <code>optional_args['sigma']</code> during each and every call of <code>fn()</code> during the minimize function.</p>

<p>Additional speed may come from defining different <code>fn()</code> functions for the 6 different combinations of <code>len(x1) &gt; 0</code>, <code>len(x2) &gt; 0</code>, and <code>method</code>, thus removing the conditionals from inside the nested calls.</p>
    </div>