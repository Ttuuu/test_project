<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><p>I don't like discarding all exceptions from File.Delete(). I think it's fine to discard a DirectoryNotFoundException here, but I think the others should be allowed to propagate up and be shown to the user. I find that hiding the fact that the user does not have write access or that another process has the file locked generally tends to cause more confusing errors later on.</p></li>
<li><p><strike>You serialise the new content inside the big try-catch. If the serialisation fails then you tell the user that the file has been corrupted or deleted and they should restore from the backup provided, even though you have not reached the point where the backup is made.</strike></p></li>
<li><p>The idea of having one big try-catch and then using flags to identify what stage you were up-to makes me a little uneasy. You can replace the <code>originalRenamed</code> flag with a try-catch around <code>File.Move(tempNewFile, fileName)</code> since this is the only call made while the flag is set to true.</p>

<pre><code>try
{
    // ...

    try
    {
        File.Move(tempNewFile, fileName);
    }
    catch
    {
        if (!string.IsNullOrEmpty(oldFileTempName) &amp;&amp; File.Exists(oldFileTempName))
        {
            File.Move(oldFileTempName, fileName);
        }

        MessageBox.Show("...");

        throw;
    }

    // ...

    if (!string.IsNullOrEmpty(oldFileTempName) &amp;&amp; File.Exists(oldFileTempName))
    {
        TryToDelete(oldFileTempName);
    }
}
catch(Exception ex)
{
    MessageBox.Show(ex.Message);
}
</code></pre>

<p>This may be inconvenient if you want the message boxes to appear in the specific order but I don't think it should be too much of an issue.</p></li>
</ul>
    </div>