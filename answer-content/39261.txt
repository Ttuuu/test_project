<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This is a nice, clean implementation of a Linked list... Generally a good job.</p>

<p>You have a bug in your <code>reverse</code> method, a <code>NullPointerException</code> when the list is empty. There is an easy fix, but you should be aware.</p>

<p>I also had a look at your reverse method. I cannot see a way to do it with fewer than 3 variables, while still keeping the logic readable. I am not particularly fond of your implementation... The distinct <code>if/else</code> condition makes the internal logic cumbersome. It makes things easier if you consider the process to be closer to a <em>swap</em>... we want to swap the direction of the pointer between nodes.</p>

<p>So, the logic is, for three nodes A-&gt;B-&gt;C, we want to make B point to A, but, we have to remember that C comes after B <strong>before</strong> we reverse the pointer. Then we have to make C point to B, becoming A&lt;-B&lt;-C</p>

<p>But, we have a couple of <em>loose ends</em> (pun is intended)... we have the <code>start</code> pointer which points at A, and A is pointing at B still, So, we need to remove the now-redundant A-&gt;B pointer, and also move start to point at C..... All so complicated, but it boils down to a simple loop:</p>

<pre><code>    public void reverse() {
        if (start == null) {
            return;
        }
        Node current = start;
        Node after = start.next;
        while (after != null) {
            Node tmp = after.next; // preserve what will come later.
            after.next = current;  // reverse the pointer
            current = after;       // advance the cursor
            after = tmp;           // the node after is the one preserved earlier.
        }
        start.next = null;         // null-out next on what was the start element 
        start = current;           // move the start to what was the end.
    }
</code></pre>

<p>This, to me, is much more readable than the conditional logic you had. It <strong>does</strong> use three pointers in addition to the <code>start</code>.</p>

<p>If you want to, you can probably find a way to do it with one less pointer, but that is by <em>hacking</em> the <code>start</code> pointer and using it as a tracker in the loop (probably instead of <code>current</code>, but the readability, and simplicity will suffer if you do that.</p>

<p>Note also that Java coding convention puts the <code>{</code> open brace at the end of the line containing the conditional block.</p>

<p>Finally, at the risk of adding a little complexity to your code, most general-purpose Linked Lists in 'real' applications have an <em>O (1)</em> mechanism for getting the List size. If you have a custom purpose for the list where the size is not important, you can skip that, but, you should otherwise consider adding a size field so you can avoid doing a full iteration to get the size.</p>

<p>Another Finally, The Java Iterator concept is a very common idiom. It is surprisingly complicated though to get your implementation to match the specification. I strongly recommend that you take it upon yourself to make your List iterable, and to make sure your Iterator implementation conforms to the specification (especially the conditions under which the iterator throws exceptions).</p>

<p>I also extended your main method to do a few more tests than you have:</p>

<pre><code>    public static void main(String args[]) {
        ReverseLL ll=new ReverseLL();
        ll.reverse();
        ll.display();
        System.out.println();

        ll.insert(1);
        ll.reverse();
        ll.display();
        System.out.println();

        ll.insert(2);

        ll.reverse();
        ll.display();
        System.out.println();

        ll.reverse();
        ll.display();
        System.out.println();

        ll.insert(3);
        ll.insert(4);
        ll.insert(5);
        ll.insert(6);
        ll.insert(7);
        ll.insert(8);
        ll.display();
        System.out.println();

        ll.reverse();
        ll.display();
        System.out.println();
    }
</code></pre>
    </div>