<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Firstly, before I start, I'd like to mention that you might not need these JS animation functions. A lot of animations can be achieved through CSS transitions and keyframes, using JS to toggle classes where needed. In my opinion, JS should only step in when the animation becomes too intensive for CSS to handle.</p>

<p>There appears to be a lot of duplication here. I'm going to simplify a lot of it for these reasons:</p>

<ul>
<li>requestAnimationFrame has <a href="https://caniuse.com/#feat=requestanimationframe" rel="nofollow noreferrer">great browser support</a> and shouldn't need to be polyfilled. That said, I do still like consolidating the browser prefixed versions into one just to be on the safe side.</li>
<li>Most functionality is standardised so you shouldn't need to know the browser prefix.</li>
<li>Your support checks should exist separately to your animation code, meaning they can be reused for multiple animation blocks.</li>
</ul>

<p>The support checks look like this (include at the top of your file):</p>

<pre><code>// test for Web Animations API (.animate) support
// test from Modernizr.js
const WEB_ANIMATIONS_API_SUPPORTED = 'animate' in document.createElement('div');

// consolidate browser prefixed versions into one function
let requestAnimationFrame = (
    window.requestAnimationFrame ||
    window.mozRequestAnimationFrame ||
    window.webkitRequestAnimationFrame ||
    window.msRequestAnimationFrame ||
    function(callback) {
        return window.setTimeout(callback, 1000 / 60)
    }
);
</code></pre>

<p>Then when you want to create an animation, you can do:</p>

<pre><code>if ( WEB_ANIMATIONS_API_SUPPORTED ) {
    // your .animate call
} else {
    requestAnimationFrame(function() {
        // your fallback function
    });
}
</code></pre>

<hr>

<p>I'll also try and answer your other questions as best as I can here.</p>

<blockquote>
  <p>its always best practice to check for feature support before actually
  implementing it,</p>
</blockquote>

<p>Absolutely correct and it's a very good practice to get into.</p>

<blockquote>
  <p>and then implement fallbacks for backwards compatibility and older
  browsers.</p>
</blockquote>

<p>Again this is the best way to handle using new functionality. It's called progressive enhancement - use the lowest level technology to build a base experience and then enhance if the newer functions are available.</p>

<blockquote>
  <p>I'm not 100% sure if this has any security concerns</p>
</blockquote>

<p>I can reliably say there are no security concerns here. If you want to know more about security in JS start by reading around XSS vulnerabilities.</p>

<p>Regex can be difficult to learn and even experienced devs struggle with it. I like to use a visual interface like <a href="https://regexr.com/" rel="nofollow noreferrer">https://regexr.com/</a> to see the matches in real time. You can also hover over each regex character to see what it means and how it interacts with characters before and after it.</p>

<p>Yes, <code>ua</code> is shorthand for User Agent, and <code>tem</code> appears to be short for temporary. It's only used to quickly hold the matches from the Regex. Personally, I hate this style of variable naming and always go for longer, self-documenting ones where possible.</p>

<p>As you mention the browser prefix is repeating itself. This is likely because the <code>requestAnimationFrame</code> polyfill you're using is a packaged polyfill, and comes with it's own browser prefix checking. If you were doing a lot of tests, then it would make sense to abstract this out to a separate browser prefixing function.</p>

<blockquote>
  <p>However, if I attempted to call or attach this let to an item it would
  end up being element.window.requestAnimationFrame which is the wrong
  syntax.</p>
</blockquote>

<p>I'm not sure what you mean here. If you can give me more info, I'll try and provide an answer.</p>
    </div>