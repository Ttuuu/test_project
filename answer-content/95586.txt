<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>If you don't like global variables (which you really shouldn't!), you can create a static variable by making it an attribute of the function:</p>

<pre><code>def fib(n):
    if n in fib.cache:
        return fib.cache[n]
    ret = fib(n-2) + fib(n-1)
    fib.cache[n] = ret
    return ret
fib.cache = {0: 1, 1: 1}
</code></pre>

<p>Memoization is one of the poster childs of function decorators in Python, so an alternative approach would be something like:</p>

<pre><code>class Memoize(object):
    def __init__(self, func):
        self.func = func
        self.cache = {}
    def __call__(self, *args):
        if args in self.cache:
            return self.cache[args]
        ret = self.func(*args)
        self.cache[args] = ret
        return ret

@Memoize
def fib(n):
    if n &lt; 2:
        return 1
    return fib(n-2) + fib(n-1)
</code></pre>
    </div>