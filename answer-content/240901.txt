<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'm not sure my code is any less messy.  Writing an application that checks for errors and allows a person to correct their errors is messy.</p>

<p>I followed the strategy of testing for each of the goals in a separate method.</p>

<p>The <code>main</code> method simply loops, receiving input and producing output, until the user just presses the Enter key when entering String 1.</p>

<p>The <code>verifyInput</code> method returns a code to let the calling method know what the result was.</p>

<p>The codes are:</p>

<pre><code>0 - Valid input
1 - User pressed Enter key to exit application
2 - One of the three strings did not meet the criteria.
3 - The three strings are not of equal length.
</code></pre>

<p>I'm not thrilled to use a return code, but it was the only way I could check for a user exit, check validity, and repeat the process until the user exits.</p>

<p>The rest of the methods basically do what the name of the method says.  The methods are coded in the order in which they are called.  In other words, the reader of the code never has to page up to see what a method does.</p>

<p>Generally, you start with the high-level concepts, then work your way down to the details.  Writing an application is a lot like writing an essay.  You start with the main points and provide more details later.</p>

<p>Here's the code.</p>

<pre><code>import java.util.Scanner;

public class TriString {

    private static String consonants = "[BCDFGHJKLMNPQRSTVXZ" + 
            "bcdfghjklmnpqrstvxz]";
    private static String vowels = "[aeiouyAEIOUY]";

    public static void main(String[] args) {
        Scanner scn = new Scanner(System.in);
        while (true) {
            int returnCode = verifyInput(scn);
            if (returnCode == 1) {
                break;
            } 
        }
        scn.close();
    }

    static int verifyInput(Scanner scn) {
        System.out.println("Provide 3 strings");
        String first = getFirstString(scn);

        if (first.equals("")) {
            return 1;
        }

        String second = getSecondString(scn);
        String[] third = getThirdStrings(scn);

        if (first == null || second == null ||
                third.length == 0) {
            return 2;
        } else if (!isInputEqualLength(
                first, second, third[0])) {
            return 3;
        } else {
            printOutput(first, second, third);
            return 0;
        }
    }

    static String getFirstString(Scanner scn) {
        String first = getInput(scn, "  String 1: ");
        if (first.equals("")) {
            return first;
        }

        String firstRegex = "[a-z]+";
        if (!first.matches(firstRegex)) {
            System.err.print("The first string must ");
            System.err.print(" be all lower case ");
            System.err.println("alphabetic characters.");
            return null;
        }
        return first;
    }

    static String getSecondString(Scanner scn) {
        String second = getInput(scn, "  String 2: ");
        String secondRegex = "[A-Z]+";
        if (!second.matches(secondRegex)) {
            System.err.print("The second string must ");
            System.err.print(" be all upper case ");
            System.err.println("alphabetic characters.");
            return null;
        }
        return second;
    }

    static String[] getThirdStrings(Scanner scn) {
        String third = getInput(scn, "  String 3: ");
        if (third.length() % 2 != 0) {
            System.err.print("The third string must ");
            System.err.print(" have an even number of ");
            System.err.println("characters.");
            return new String[0];
        }

        String thirdWithoutVowels = 
                third.replaceAll(vowels, "");
        String thirdWithoutConsonants = 
                third.replaceAll(consonants, "");
        if (thirdWithoutVowels.length() !=
                thirdWithoutConsonants.length()) {
            System.err.print("The third string must ");
            System.err.print(" have an equal number ");
            System.err.println("of consonants and vowels.");
            return new String[0];
        }

        String[] output = new String[3];
        output[0] = third;
        output[1] = thirdWithoutConsonants;
        output[2] = thirdWithoutVowels;
        return output;
    }

    static String getInput(Scanner scn, String text) {
        System.out.print(text);
        return scn.nextLine().trim();
    }

    static boolean isInputEqualLength(String... input) {
        int length = input[0].length();
        for (int i = 1; i &lt; input.length; i++) {
            if (input[i].length() != length) {
                System.err.print("The three strings must ");
                System.err.println(" be the same length.");
                return false;
            }
        }
        return true;
    }

    static void printOutput(String first, String second,
            String[] third) {
        System.out.print("Output string 1: ");
        System.out.println(first + third[1]);
        System.out.print("Output string 2: ");
        System.out.println(third[2] + second);
        System.out.print("String with most consonants: ");
        String most = mostConsonants(first, second, third[0]);
        System.out.println(most);
        System.out.print("String with most vowels    : ");
        most = mostVowels(first, second, third[0]);
        System.out.println(most);
    }

    static String mostConsonants(String... input) {
        String test = input[0];
        int maxLength = countConsonants(test);
        for (int i = 1; i &lt; input.length; i++) {
            int length = countConsonants(input[i]);
            if (maxLength &lt; length) {
                maxLength = length;
                test = input[i];
            }
        }
        return test;
    }

    static String mostVowels(String... input) {
        String test = input[0];
        int maxLength = countVowels(test);
        for (int i = 1; i &lt; input.length; i++) {
            int length = countVowels(input[i]);
            if (maxLength &lt; length) {
                maxLength = length;
                test = input[i];
            }
        }
        return test;
    }

    static int countConsonants(String str) {
        String stringWithoutVowels = 
                str.replaceAll(vowels, "");
        return stringWithoutVowels.length();
    }

    static int countVowels(String str) {
        String stringWithoutConsonants = 
                str.replaceAll(consonants, "");
        return stringWithoutConsonants.length();
    }

}
</code></pre>
    </div>