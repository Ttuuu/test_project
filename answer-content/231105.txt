<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>user673679 already mentioned that a lot of string copying is going on. Indeed, <code>std::string_view</code> could be used here to just keep references to the original input strings, saving both time and space.</p>

<h1>Give your variables meaningful names</h1>

<p>Your variable names should tell you something about the <em>contents</em> of the variable, not of the <em>type</em> of the variable. So don't write <code>std::vector&lt;std::string&gt; vector_of_strings</code>, but give it a more descriptive name such as <code>input</code> if it's the input to your program, and <code>possibilities</code> instead of <code>vector_of_vector_of_strings</code>.</p>

<p>Also avoid variable names that are too alike, such as <code>separator</code> and <code>sep</code> in your <code>main()</code> function. In this case, you can avoid it by writing the code like so:</p>

<pre><code>bool first = true;

for (const auto &amp;word: sentence) {
    if (first)
        first = false;
    else
        std::cout &lt;&lt; " ";

    std::cout &lt;&lt; word;
}
</code></pre>

<p>Don't abbreviate too much, just write <code>carthesian_product</code> instead of <code>cart_product</code>. The latter abbreviation is not common and might confuse others that do not know that you mean Carthesian product here.</p>

<h1>Use more algorithms?</h1>

<p>Since you are already using some of the C++ standard library algorithms, why not use more? For example, instead of writing a <code>for</code>-loop to create the vector of vector of strings, write:</p>

<pre><code>std::transform(input.begin(), input.end(),
               std::back_inserter(possibilities),
               [](std::string words){
                   return split(words, '|');
               });
</code></pre>

<p>Although arguably, it doesn't improve readability much here.</p>

<h1>Split off more functionality into their own functions</h1>

<p>The <code>main()</code> function could be cleaned up and made more readable if you moved some of its parts to properly named functions. For example, instead of creating the vector of vector of strings inline, it would be nice it you could just write:</p>

<pre><code>auto possibilities = split_possibilities(input);
</code></pre>

<p>Also, consider creating a <code>join()</code> function, so writing out all the permutations could be written as:</p>

<pre><code>for (auto &amp;sentence: sentences) {
    std::sort(sentence.begin(), sentence.end());

    do {
        std::cout &lt;&lt; join(sentence, " ") &lt;&lt; '\n';
    } while(std::next_permutation(sentence.begin(), sentence.end());
}
</code></pre>
    </div>