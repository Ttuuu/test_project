<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Probably late, but here's a re-write of <code>seqn</code>. </p>

<pre><code>(defn sequence-parser
  "Returns a parser that runs given parsers in order, and returns result in a sequence."
  [&amp; parsers]
  (fn [stream]
    (reduce (fn [[acc stream] parser]
              (let [[x rest-stream] (parser stream)]
                [(conj acc x) rest-stream]))
            [[] stream]
            parsers)))
</code></pre>

<p>Some points:</p>

<ul>
<li>Use vectors instead of lists for general purpose sequences.</li>
<li>Give descriptive names to functions and variables. If you can't, make it anonymous or inline it.</li>
<li>Use <code>reduce</code> to loop over a sequence and accumulate a result.</li>
<li>You can deconstruct vectors in the argument list(as in <code>[acc stream]</code> and <code>[x rest-stream]</code>).</li>
<li>Use <code>nil</code> as indication of failure.</li>
</ul>
    </div>