<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Typically in an ASP.NET app (and in fact in any app), you should only catch and handle the base <code>System.Exception</code> in a single place as close to the application entry point (or in this case request entry point) as possible. This means you don't have to duplicate exception handling code in every action method, and helps ensure you always return a consistent error response that is the same shape.</p>

<p>In .NET Core and OWIN based APIs this is typically done using a <a href="https://docs.microsoft.com/en-us/aspnet/core/fundamentals/middleware/?view=aspnetcore-2.1&amp;tabs=aspnetcore2x" rel="nofollow noreferrer">Middlware</a>. With traditional ASP.NET APIs you can use an <a href="http://blog.karbyn.com/articles/handling-errors-in-web-api-using-exception-filters-and-exception-handlers/" rel="nofollow noreferrer">exception filter</a>. The default MVC API template in VS2017 adds a <a href="https://docs.microsoft.com/en-us/previous-versions/aspnet/web-frameworks/dd470778(v%3Dvs.118)" rel="nofollow noreferrer">System.Web.Mvc.FilterAttribute</a> for you:</p>

<pre><code>public class FilterConfig
{
    public static void RegisterGlobalFilters(GlobalFilterCollection filters)
    {
        filters.Add(new HandleErrorAttribute());
    }
}
</code></pre>

<p>You can replace this with your own implementation that for example logs the error using your chosen logging framework and forms the error response according to your API contract. Your controllers then do not need to worry about exception handling:</p>

<pre><code>public class EmployeeController : ApiController
{
    private readonly IEmployeeService _employeeService;

    public EmployeeController(IEmployeeService employeeService)
    {
        _employeeService = employeeService;
    }

    [HttpPost, Route("add")]
    public IHttpActionResult Add(AddEmployeeRequest request)
    {
        var response = _employeeService.AddEmployee(request);

        if (!response.OperationResult)
        {
            // Can return content that matches what your error filter returns.
            return Content(HttpStatusCode.InternalServerError, new
            {
                Code = ErrorCodes.E002,
                Message = "Failed to add customer."
            });

            // Or could throw a custom exception that will be picked up in your error filter.
            throw new CustomerException("Failed to add customer.", ErrorCodes.E002);
        }

        return Ok(response);
    }
}
</code></pre>
    </div>