<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You need to consider using classes more often. </p>

<p>For your current work, you need two classes (at least) to handle the application process. A class would be for holding the <code>Questions</code> and another class to hold the application logic. </p>

<pre><code>// define the number of levels you need which would be used for random.
// so if the user chose Easy, this means it will pick from 1 to 3 MathOperation.
public enum UserDifficulty { Easy = 3, Normal = 4, Hard = 6 }

public enum MathOperation { Addition = 1, Subtraction = 2, Multiplication = 3, Division = 4, Power = 5, SquareRoot = 6 }

public class MathQuestions
{
    public int QuestionNumber { get; set; }
    public MathOperation OperaionType { get; set; }
    public int LeftHand { get; set; }
    public int RightHand { get; set; }
    public int CorrectAnswer =&gt; Calculate();
    public int GivenAnswer { get; set; }

    public bool IsCorrect =&gt; CorrectAnswer == GivenAnswer;

    public int Calculate()
    {
        switch (OperaionType)
        {
            case MathOperation.Addition:
                return LeftHand + RightHand;
            case MathOperation.Subtraction:
                return LeftHand - RightHand;
            case MathOperation.Multiplication:
                return LeftHand * RightHand;
            case MathOperation.Division:
                return LeftHand / RightHand;
            case MathOperation.Power:
                return (int)Math.Pow(LeftHand, RightHand);
            case MathOperation.SquareRoot:
                return (int)Math.Sqrt(LeftHand);
            default:
                return 0;
        }
    }

    public string GetOperationString()
    {
        switch (OperaionType)
        {
            case MathOperation.Addition:
                return $"{LeftHand} + {RightHand}";
            case MathOperation.Subtraction:
                return $"{LeftHand} - {RightHand}";
            case MathOperation.Multiplication:
                return $"{LeftHand} x {RightHand}";
            case MathOperation.Division:
                return $"{LeftHand} / {RightHand}";
            case MathOperation.Power:
                return $"{LeftHand} ^ {RightHand}";
            case MathOperation.SquareRoot:
                return $"√{LeftHand}";
            default:
                return string.Empty;
        }
    }
}

public class MathClass
{
    // you need two randoms, one for the questions, and ther other one for the operators
    // using one for each would avoid skipping the operator numbers and vise versa. 
    private readonly Random random = new Random();

    private readonly Random randomOperator = new Random();

    private readonly List&lt;MathQuestions&gt; questions = new List&lt;MathQuestions&gt;();

    private int NumberOfQuestions { get; }

    private UserDifficulty Difficulty { get; }

    public MathClass(UserDifficulty difficulty, int numberOfQuestions)
    {
        Difficulty = difficulty;
        NumberOfQuestions = numberOfQuestions;
    }

    public IEnumerable&lt;MathQuestions&gt; GetQuestions()
    {
        var level = (int)Difficulty + 1;

        int operation;

        for (int x = 1; x &lt;= NumberOfQuestions; x++)
        {
            operation = randomOperator.Next(1, level);

            var question = new MathQuestions
            {
                QuestionNumber = x,
                LeftHand = random.Next(1000),
                RightHand = random.Next(500),
                OperaionType = (MathOperation)operation

            };

            // Calculate the Correct Answer.
            question.Calculate();

            questions.Add(question);
        }

        return questions;
    }

}
</code></pre>

<p>then you can do this : </p>

<pre><code>public static class Program
{    
    public static void Main(string[] args)
    {

        //for the MathClass
        UserDifficulty difficulty = UserDifficulty.Normal;

        int numberOfQuestions = 0;

        int steps = 1; // number of process steps before getting the exam

        while (steps &lt;= 2)
        {
            if(steps == 1)
            {
                Console.WriteLine("What difficulty level would you like to do! Please type E for Easy, N for Normal and H for hard");

                var userDifficultyStr = Console.ReadLine().ToUpper();


                if (!new[] { "E", "N", "H" }.Contains(userDifficultyStr)) { continue; } // return to this step.

                switch (userDifficultyStr)
                {
                    case "E":
                        difficulty = UserDifficulty.Easy;
                        break;
                    case "N":
                        difficulty = UserDifficulty.Normal;
                        break;
                    case "H":
                        difficulty = UserDifficulty.Hard;
                        break;
                }

                //Go to the next Step
                steps++;
            }


            if(steps == 2)
            {
               Console.Write("How many questions would you like to answer? Please type a number divisible by 10!");

               if(!int.TryParse(Console.ReadLine(), out numberOfQuestions) || numberOfQuestions % 10 != 0) { continue; } // return to this step.

                // if all things okay break this loop 
                break;
            }
        }

        // Create the questions
        var questions = new MathClass(difficulty, numberOfQuestions).GetQuestions().ToList();// using Linq

        // Loop over them 
        foreach (var question in questions)
        {

            int answer;

            Console.Write($"What is {question.GetOperationString()} = ");

            while (!int.TryParse(Console.ReadLine(), out answer))
            {
                Console.WriteLine("Invalid Input, only integers are allowed. Try Again!");
            }

            // store the answer of this question 
            question.GivenAnswer = answer;

            if (answer != question.CorrectAnswer)
            {
                Console.WriteLine("Your answer is incorrect!");
            }
            else
            {
                Console.WriteLine("Well Done!");
            }
        }


        var score = questions.Count(x =&gt; x.IsCorrect); // using Linq

        Console.WriteLine($"You got a score of {score} out of {questions.Count}");

    }
}
</code></pre>

<p><strong>UPDATE</strong></p>

<p>if just want to make partial changes on the current loop you can do this : </p>

<pre><code>// set the operation max value based on the given difficulty.
int operationMax = 0;

switch (userDifficulty)
{
    case "E":
        operationMax = 3;           
        break;
    case "N":
        operationMax = 4;           
        break;
    case "H":
        operationMax = 7;           
        break;                                          
}           

while (numberOfQuestionsLeft &gt; 0)
{
    var operation = random.Next(1, operationMax);

    // make them all double 
    double number1 = 0;
    double number2 = 0;
    double correctAnswer; 
    double userAnswer; 

    // store the msg
    string msg = string.Empty;

    switch(operation)
    {
        case 1:
            number1 = random.Next(1000);
            number2 = random.Next(1000);
            correctAnswer = number1 + number2;
            msg = $"{number1} + {number2}";
            break;
        case 2:
            number1 = random.Next(1000);
            number2 = random.Next(1000);
            correctAnswer = number1 - number2;
            msg = $"{number1} - {number2}";
            break;      
        case 3:
            number1 = random.Next(13);
            number2 = random.Next(13);
            correctAnswer = number1 * number2;
            msg = $"{number1} x {number2}";
            break;
        case 4:
            number1 = random.Next(1, 10000);
            number2 = random.Next(1, number1 - 1);  // this would give smaller number than number1 
            correctAnswer = number1 / number2;
            msg = $"{number1} / {number2}";
            break;      
        case 5:
            number1 = random.Next(13);
            number2 = random.Next(5);   
            correctAnswer = Math.Pow(number1, number2);
            msg = $"{number1} ^ {number2}";
            break;              
        case 6:
            number1 = random.Next(1000);    
            correctAnswer = Math.Sqrt(number1);
            msg = $"√{number1}";
            break;                      
    }


    if(operation == 4 || operation == 6)
    {
        Console.Write($"To the nearest integer, What is {msg} =");  
    }
    else 
    {
        Console.Write($"What is {msg} =");
    }

    userAnswer = Convert.ToDouble(Console.ReadLine());

    if (Math.Round(correctAnswer) == Math.Round(userAnswer))
    {
        Console.WriteLine("Well Done!");
        score++;
    }
    else
    {
        Console.WriteLine("Your answer is incorrect!");
    }               

}

Console.WriteLine($"You got a score of {score} out of {numberOfQuestions}");
</code></pre>

<p>let me know if you have any questions. </p>
    </div>