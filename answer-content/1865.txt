<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Couldn't find any super quick wins in itertools.</p>

<p>(Maybe I didn't look hard enough.)
I did however come up with this,
it runs pretty slow, but is fairly concise:</p>

<pre><code>from itertools import chain, combinations

def subsets(arr):
    """ Note this only returns non empty subsets of arr"""
    return chain(*[combinations(arr,i + 1) for i,a in enumerate(arr)])

def k_subset(arr, k):
    s_arr = sorted(arr)
    return set([frozenset(i) for i in combinations(subsets(arr),k) 
               if sorted(chain(*i)) == s_arr])


print k_subset([1,2,3,4],3)
</code></pre>

<p>Some minor wins for speed but less concise, would be to only do the set//frozenset buisness at the end if there are non unique elements in the array, or use a custom flatten function or sum(a_list, []) rather than chain(*a_list).</p>

<p>If you are desperate for speed you might want have a think about another language or maybe:
www.cython.org is pretty neat.
Obviously the above algorithms are much better speed-wise for starters.</p>

<p>Also what might be worht a look into is www.sagemath.org...
It's an mathematical environment built atop of python, and for example functions like, subsets() , flatten etc and lots of combinatorial things live there.</p>

<p>Cheers,</p>

<p>Matt</p>
    </div>