<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your <code>Linked_List</code> and your <code>Iterator</code> both should have a serial number to allow for fast failure of iterating over a list that is modified by something other than that iterator. </p>

<p>The Problem:</p>

<p>When you implement <code>Iterator::remove</code>, it has to hold on to a pointer just before (or just after or both) the node that was just removed.  If that node is then removed by some means (direct call to <code>Linked_List::pop_*()</code> or removal by another iteration), the saved pointer will end up pointing to deallocated memory.</p>

<p>Solution:</p>

<p>Each change to the <code>Linked_List</code> should change the serial number (<code>+= 1</code> works).  Each time an <code>Iterator</code> is created, it should take a snapshot of the serial number.  Before performing any operation with the <code>Iterator</code>, it should compare its copy of the serial number to the actual <code>Linked_List</code> serial number and raise an exception if they are different.  When an <code>Iterator</code> is used to modify the <code>Linked_List</code>, the serial number will change and that <code>Iterator</code> should capture this new value. </p>
    </div>