<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li>You should run a linter on your program, you have quite a few PEP 8 issues. A lot are from non-standard whitespace usage, and using <code>cammelCase</code> rather than <code>snake_case</code>. Conforming to one standard - PEP 8 - allows others to more easily address your code. This is as all code looks the same and so can be easily read.</li>
<li>At one time <code>%</code> formatting was deprecated in the Python docs. Given that f-strings are available in Python now, I would recommend converting to either <code>str.format</code> or f-strings to increase readability with modern Python best practices.</li>
<li>You can change <code>pingBox</code> to use a ternary to DRY your code.</li>
<li><p>You should be able to see that in <code>createThread</code> <code>tlist</code> is only going to have 1 item. On creation you're going to start the thread and then wait for it to finish running.</p>

<p>The problem is that you're <code>Thread.join</code>ing before you've started all the other threads. This is simple to fix, you just need to build the threads before joining them.</p></li>
<li><p>You can use <code>str.lower</code> to simplify your <code>rangeSelector</code> if statements.</p></li>
<li>If your range starts at 0, then you don't need to specify 0.</li>
<li>I think you have a bug, 255 is a valid address. You currently are ignoring it tho. You need to specify 256 in the <code>range</code>.</li>
<li>You can use a generator comprehension to make all the IPs you want, that you need to pass to <code>create_threads</code>.</li>
</ul>

<pre><code>#!/usr/bin/python3

import threading
import os


def ping_box(thread_name, host):
    response = os.system("ping -c 1 " + host)
    print(f'Response for pinging {thread_name} is {response}')
    status = 'down' if response else 'up'
    print(f'{host}: is {stetus}')


def create_threads(ips):
    for ip in ips:
        thread = threading.Thread(
            target=ping_box,
            kwargs={
                "thread_name": f"Thread:{ip}",
                "host": ip
            }
        )
        thread.start()
        yield thread


def range_selector(ip_range):
    if ip_range.lower() == 'a':
        ips = (
            f'127.0.0.{i}'
            for i in range(256)
        )
    elif ip_range.lower() == 'b':
        ips = (
            f'127.0.{i}.{j}'
            for i in range(256)
            for j in range(256)
        )
    else:
        ips = ()
    for thread in list(create_threads(ips)):
        thread.join()


if __name__ == "__main__":
    range_selector(input('Choose range A|B :'))
</code></pre>

<p>Please note the <code>list</code> around <code>create_threads</code>. This is to avoid the laziness of generator functions, which is not something we want.</p>
    </div>