<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Another one going only as far as necessary, with O(1) to check whether the first value is the outlier and otherwise simple O(n) to search for the outlier.</p>
<pre><code>def find_uniq(arr):
    a = arr[0]
    if a not in arr[1:3]:
        return a
    for b in arr:
        if b != a:
            return b
</code></pre>
<p>Slight variation, getting the duplicate value from the first three and then searching the non-dupe:</p>
<pre><code>def find_uniq(arr):
    dupe = sorted(arr[:3])[1]
    for x in arr:
        if x != dupe:
            return x
</code></pre>
<p>Another variation, finding a difference pair first:</p>
<pre><code>def find_uniq(arr):
    a = arr[0]
    for b in arr:
        if b != a:
            return b if a in arr[1:3] else a
</code></pre>
<p>Optimized version of <a href="https://www.codewars.com/kata/reviews/5941972edacd78ae0a00013c/groups/59428499985bf99a9100006f" rel="nofollow noreferrer">this</a>, also O(n) because, you know, Timsort:</p>
<pre><code>def find_uniq(arr):
    arr.sort()
    return arr[-(arr[0] == arr[1])]
</code></pre>
<p>Optimized version of GZ0's <code>groupby</code> solution, faster and taking only O(1) space:</p>
<pre><code>def find_uniq(arr):
    group_iter = groupby(arr)
    k1, _ = next(group_iter)
    k2, g2 = next(group_iter)
    next(g2)
    return k1 if k2 in g2 else k2
</code></pre>
    </div>