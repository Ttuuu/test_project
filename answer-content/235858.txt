<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This code does in fact print the expected result of <code>dog runs</code>, so I'm going to go ahead and give it a quick review.</p>

<p>First: your <code>mixed</code> method does not use the <code>self</code> parameter, so it could be a <code>@staticmethod</code>.  Figuring out which of your object's methods actually depend on the object state makes it easier to figure out which methods might affect each other.</p>

<p>Since after that change your class consists only of a single static method, the object itself is superfluous; it should just be a function:</p>

<pre><code>def mixed(which, why):
    which=["dog", "cat", "bird", "crow"]
    why=["runs","jumps", "flies", "talks"]
    if ("dog" in which):
        message=("dog"+ " " +why[0])
        print(message)
        return(message)
    else:
        print("dog not found")
        return(message)
</code></pre>

<p>Now, looking closer at this function: the <code>which</code> and <code>why</code> parameters are discarded (you assign new values to those names before reading the caller's passed-in values), so we could more simply write this function with no parameters at all and it would still produce the same result:</p>

<pre><code>def mixed():
    which=["dog", "cat", "bird", "crow"]
    why=["runs","jumps", "flies", "talks"]
    if ("dog" in which):
        message=("dog"+ " " +why[0])
        print(message)
        return(message)
    else:
        print("dog not found")
        return(message)
</code></pre>

<p>Now it's easy to see how we can simplify this code further:</p>

<ol>
<li>Since we define <code>which</code> statically as a list that contains <code>"dog"</code>, the <code>if</code>/<code>else</code> is just dead code.  Always eliminate dead code!</li>
<li>Having removed that <code>if</code> check, <code>which</code> itself becomes superfluous, since that was the only thing we used it for.</li>
</ol>

<p>Now our simplified code is:</p>

<pre><code>def mixed():
    why=["runs","jumps", "flies", "talks"]
    message=("dog"+ " " +why[0])
    print(message)
    return(message)
</code></pre>

<p>We only ever use the first element of <code>why</code> (i.e. we're not doing something like <code>random.choice(why)</code> which would give us a random element, we're just always asking for the <code>[0]</code>th element), so the rest of that list is also dead code, and we can delete it with no ill effect:</p>

<pre><code>def mixed():
    why=["runs"]
    message=("dog"+ " " +why[0])
    print(message)
    return(message)
</code></pre>

<p>And since <code>why[0]</code> is just always <code>"runs"</code> we can in fact just generate <code>message</code> as a single static string and it will produce the same result without unnecessary obfuscation:</p>

<pre><code>def mixed():
    message = "dog runs"
    print(message)
    return(message)
</code></pre>

<p>This function does the same exact thing as the method in your original class, but is only 3 lines of implementation and is much easier to read and maintain.  I'd suggest adding type annotations and a docstring as well, so that future developers will know exactly what the function does without even having to read those 3 lines:</p>

<pre><code>def mixed() -&gt; str:
    """Prints and returns the message 'dog runs'."""
    message = "dog runs"
    print(message)
    return(message)
</code></pre>
    </div>