<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>... and those who didn't check for first and last words to be "A" were all selected</p>
</blockquote>

<p>maybe they wrote a loop that didn't <em>need</em> to special case the first &amp; last characters, and that was considered cleaner?</p>

<blockquote>
  <p>Is str.at(i) not good enough...?</p>
</blockquote>

<p><code>std::basic_string::at</code> does bounds checking. You either <em>need</em> this, in which case you've arguably written your loop condition poorly and <em>should be prepared to handle a <code>std::out_of_range</code> exception</em>, or you wrote the loop safely, don't need the bounds checking, and needn't pay for it.</p>

<p>Because you <em>might</em> fail the bounds checking here, but <em>don't</em> handle the exception, your program will just terminate for some valid input strings.</p>

<blockquote>
  <p>I know even if we use str[i] it is interpreted as str.operator, so I'm preventing the overhead conversion, right?</p>
</blockquote>

<p>what conversion? this is syntactic sugar resolved at compile time. You're either calling</p>

<pre><code>str.at[i] =&gt; std::basic_string&lt;char&gt;::at(int i)
</code></pre>

<p>or</p>

<pre><code>str[i]    =&gt; std::basic_string&lt;char&gt;::operator[](int i)
</code></pre>

<p>the fact that one has a fancy-looking syntax doesn't affect the cost of calling it.</p>

<p>Actually, as I mentioned above, <code>operator[]</code> is <em>cheaper</em> because it <em>doesn't</em> do the bounds checking (which you don't handle correctly anyway).</p>

<hr>

<p>Oh, and for completeness, a sample (untested) one-pass state machine that doesn't require special cases for the first and last characters:</p>

<pre><code>class CountA
{
    int count_;
    enum { NewWord, PossibleMatch, NonMatch } state_;

    void next(char c)
    {
        if (isalnum(c)) { // assuming words are alphanumeric strings only
            switch (state_) {
            case NewWord: // first char of a new word
                state_ = (toupper(c) == 'A') ? PossibleMatch : NonMatch;
                break;
            case PossibleMatch:   // had "A", got "Ax"
                state_ = NonMatch;
            case NonMatch:      ; // just a non-match getting longer
            }
        } else {
            if (state_ == PossibleMatch) ++count_; // complete match!
            state_ = NewWord;
        }
    }
public:
    CountA() : count_(0), state_(NewWord) {}
    int count() const { return count_; }

    void scan(std::string const &amp;str)
    {
        char const *p = str.c_str();
        do {
            next(*p);
        } while(*p++);
    }
};
</code></pre>
    </div>