<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Criticism of original code:  it is <span class="math-container">\$\mathcal{O}(n^2)\$</span> time, even assuming the <code>BigInteger</code> calculations are constant relative to the input size.  </p>

<p>To do this in <span class="math-container">\$\mathcal{O}(n)\$</span> time without division, make two arrays.  In one, calculate an increasing product from left to right.  In the other, calculate an increasing product from right to left.  You should be able to generate each array in linear time.  </p>

<pre><code>private BigInteger[] buildIncreasingArray(int[] numbers) {
    BigInteger[] results = new BigInteger[numbers.length];

    results[0] = BigInteger.ONE;
    for (int i = 1; i &lt; results.length; i++) {
        results[i] = results[i - 1].multiply(BigInteger.valueOf(numbers[i - 1]));
    }

    return results;
}

private BigInteger[] buildDecreasingArray(int[] numbers) {
    BigInteger[] results = new BigInteger[numbers.length];

    results[results.length - 1] = BigInteger.ONE;
    for (int i = results.length - 2]; i &gt;= 0; i++) {
        results[i] = results[i + 1].multiply(BigInteger.valueOf(numbers[i + 1]));
    }

    return results;
}

public BigInteger[] calculateSkipProducts(int[] numbers) {
    if (numbers == null || numbers.length == 0) {
        throw new IllegalArgumentException("input cannot be empty");
    }

    BigInteger[] fromLeft = buildIncreasingArray(numbers);
    BigInteger[] fromRight = buildDecreasingArray(numbers);
    BigInteger[] results = new BigInteger[numbers.length];

    for (int i = 0; i &lt; results.length; i++) {
        results[i] = fromLeft[i].multiply(fromRight[i]);
    }

    return results;
}
</code></pre>

<p>This will still be <span class="math-container">\$\mathcal{O}(n)\$</span> in space and time if the <code>BigInteger</code> calculations run in constant time.  It makes a constant number of arrays (three), so that's still linear in space.  It iterates over the arrays a constant number of times (once each), so still linear in time.  There's an argument that the <code>BigInteger</code> calculations will be non-constant relative to the size of the input array.  So that could increase time and space to something like <span class="math-container">\$\mathcal{O}(n \log{n})\$</span>.</p>

<p>As <a href="https://codereview.stackexchange.com/questions/205338/given-an-array-of-numbers-return-array-of-products-of-all-other-numbers#comment396150_205340">already stated</a>, you can only get <span class="math-container">\$\mathcal{O}(1)\$</span> in space if you modify the original array and you can only get <span class="math-container">\$\mathcal{O}(n)\$</span> in time then if you generate the product and divide.  </p>

<p>So you must assume that all the answers will fit in <code>int</code> without overflow and that none of the input are <a href="https://codereview.stackexchange.com/questions/205338/given-an-array-of-numbers-return-array-of-products-of-all-other-numbers#comment396158_205340">zero</a> if you want constant space and linear time.  We can already be sure that <code>int</code> operations each occur in constant time.  </p>

<p>It is not necessary for the full product to  fit in <code>int</code>.  You can store it in a <code>long</code>.  </p>

<p>I haven't tested this.  Be wary of syntax or bounding errors.  </p>

<p>Nothing to do with functionality, but the standard indent in Java is four columns.  </p>
    </div>