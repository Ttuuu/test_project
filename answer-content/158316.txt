<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Prefer value type semantic</strong></p>

<p>Try to make classes default constructible and equality comparable whenever this makes sense. Currently your <code>Optional</code> class doesn't fulfil neither. The following code will not compile</p>

<pre><code>class A { int a; A() = delete; };

int main()
{
  Optional&lt;A&gt; i;
}
</code></pre>

<p>Even though it might make sense to have an optional. Also consider this example</p>

<pre><code>struct B { B() { /* insert something super long */ } }:

int main()
{
  Optional&lt;B&gt; opt_b; // this line takes really long!
}
</code></pre>

<p><a href="http://en.cppreference.com/w/cpp/types/aligned_storage" rel="noreferrer">Here is an example</a> of how to use <code>std::aligned_storage</code> to use uninitialised memory. I think this could help you as well.</p>

<p><strong>Do not return by value if you can</strong></p>

<p>The line</p>

<pre><code>T get() const { return val_; }
</code></pre>

<p>Makes a copy of <code>T</code> while returning <code>val_</code>. Imagine val_ is a very big <code>std::string</code>. This could be very expensive in code which calls <code>get()</code> multiple times. If you want read-only access, prefer to use</p>

<pre><code>const T&amp; get() const&amp; noexcept { return val_; }
</code></pre>

<p>instead.</p>

<p><strong>Make use of move assignments</strong></p>

<p>Currently you have to copy values into your optional. But what, if you just want to move something big that you want to return from a function? You 
need to add constructors for rvalue-<code>T</code>s.</p>

<pre><code>Optional(T&amp;&amp; value)
 : val_{std::move(value)}
 , is_set_{true} {}
</code></pre>
    </div>