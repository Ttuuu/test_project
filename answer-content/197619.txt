<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>For code written by students new to the language, this is quite good. You haven't made any of the major mistakes that most newbies to the language make, like abuse of <code>def</code>, or use of unnecessary side effects.</p>

<p>For your main questions:</p>

<ol>
<li><p>It's very possible to write imperative, non-functional code in Clojure. Since Clojure is heavily functional leaning however, non-functional code is usually quite ugly and verbose. As soon as you start using <code>do</code> (or a macro that emits a <code>do</code>), know that you've crossed a line. It's not necessarily a <em>bad</em> line, but one that means you're leaning imperative and relying on side effects instead of just passing data around explicitly.</p></li>
<li><p><a href="https://github.com/carcigenicate/clojure-helpers/blob/master/src/helpers/general_helpers.clj#L30" rel="nofollow noreferrer">In my personal library</a>, I actually created my own versions of all the random functions that also accept a Java <code>Random</code> object. That way, if you pass the same random number generator into a function, it will return the same results. I don't like Clojure's standard random functions because they can't be seeded. I consider them to be a mistake, but that's just me. To answer your question however, it's always a balance. You can make them pure at the cost of an extra parameter, or they can be impure and harder to test, but easier to write. I have both ways, depending on the context.</p></li>
<li><p>Use of an <code>atom</code> internally here is fine. You have (mostly) pure functions that represent a transformation of a state, and the state you're using is immutable. The fact that Quil is using an atom behind the scenes is irrelevant.</p>

<p>Think of it this way, this useless function is pure, and the input and output are both immutable, despite the use of the <code>atom</code> internally:</p>

<pre><code>(defn my-func [n]
  (let [a (atom 0)]
    (doseq [m (range n)]
      (swap! a + m))

    @a))
</code></pre>

<p>From the outside, the fact that this function uses an atom as an implementation detail changes nothing. </p></li>
<li><p>No, actually, this is quite functional. The main problem is the use of random numbers as mentioned in <code>2.</code>, but as you pointed out, that's hard to avoid. Ask yourself: "Is this function carrying out side effects, or just taking some data and returning some data?". If it's the latter, it's likely functional. There's other aspects of functional programming, but that's a big one.</p></li>
</ol>

<hr>

<hr>

<p>Now onto a more thorough review:</p>

<p>I don't actually see anything glaringly wrong here! I'll comment on how this can be improved, but this isn't outright bad code. I'm going to basically just work top-down here.</p>

<hr>

<p>First, probably one of the biggest problems here is the gross use of <a href="https://en.wikipedia.org/wiki/Magic_number_(programming)q" rel="nofollow noreferrer">Magic Numbers</a>. Take a look at <code>star-color-index</code> and <code>inside?</code>. How many seemingly arbitrary numbers do you have in those functions? If you came back to this code a year from now, would you remember what each number individually means? If you needed to make changes, would you being able to reliably? Bind the numbers in a <code>let</code> to give them a name, or if they're used in other functions as well, define them top level using a <code>def</code>, then refer to them as needed. Then, any changes you make to the number will automatically be reflected everywhere, and the names make it obvious what the numbers are even for.</p>

<hr>

<p>You're using bare maps in a lot of places where a record might be a better option. Note how your star and game state "classes" always have the same fields. If you ever find yourself using a map that should only have very specific fields, use <code>defrecord</code> instead. It has the potential to improve performance, but more importantly, it makes it clear what data should and shouldn't be a part of the map. I'd change your <code>create-star</code> to:</p>

<pre><code>; This clearly defines what a Star should have
(defrecord Star [x y size speed color])

(defn create-star [y]
  ; -&gt;Star is an automatically generated constructor
  ; You could also use map-&gt;Star if you wanted to create it based on an existing map
  (-&gt;Star (rand-int (q/width))
          (rand-int y)
          (+ (rand-int 5) 1)
          (+ (rand-int 3) 1)
          (star-color-index (rand-int 20))))
</code></pre>

<p>Then you can do a similar thing with your main state. Anyone reading over the code can just read the <code>defrecord</code> at the top, and immediately know what data each structure holds.</p>

<hr>

<p>I feel <code>reset-state-variable</code> could probably be written much neater using <code>assoc</code>. That way, you aren't needing to write things like <code>:stars (:stars state)</code>. I'd also make use of destructuring so you don't need to write things like <code>(:score state)</code>, and use <code>max</code> to decide what the new highscore is:</p>

<pre><code>(defn reset-state-variable [state]
  (let [{:keys [score highscore]} state]
    (assoc state
           :rocket {:image (q/load-image "images/rocket.png")
                    :x 260
                    :y 340
                    :dir 0}
           :background (q/load-image "images/stars.jpg")
           :fires []
           :smoke []
           :score 0
           :highscore (max score highscore) ; A little more straight-forward
           :gameOver true
           :meteors []
           :bonus [])))
</code></pre>

<p>The gain here using <code>assoc</code> isn't huge. Mainly just now you don't need to re-associate <code>:stars</code>. You can see real gains though if you look at <code>meteor-out</code>. Many of the fields you're just copying from the old state to the new one! Just use <code>assoc</code> so you don't need to handle stuff that isn't changing. I'm also going to sprinkle use of <code>update</code> in there since <code>:score</code> depends on its old value:</p>

<pre><code>(defn meteor-out [state]
  (let [old-count (-&gt; state :meteors (count))
        new-meteor (remove item-inside? (:meteors state))
        new-count (count new-meteor)]
    (-&gt; state
        (assoc :background (q/load-image "images/stars.jpg")
               :gameOver false
               :meteors new-meteor)

        (update :score #(+ % (- old-count new-count))))))
</code></pre>

<p><em>Much</em> less duplication. Oh, and don't use <code>new</code> as a symbol. That's actually a special operator in Clojure like it is in Java. I'm surprised that that doesn't raise an error actually.</p>

<hr>

<p>I'll just quickly point out that <code>:gameOver</code> should really be <code>:game-over</code>. Dash separation is idiomatic Clojure, and camelCase isn't known for lending itself to readability.</p>

<hr>

<p><code>meteor-hit</code> is huge and very convoluted looking. It took me a second to figure out what was going on. I can't say I've ever written <code>(if (loop...</code> before. You're also using <code>if</code> to return <code>true</code> and <code>false</code> instead of just returning/negating the original condition. I'd break the function up, and use <code>cond</code> instead of nested <code>if</code>s. I'll admit though, I tried to refactor the <code>loop</code>, and went into brain lock. It could definitely be neatened up, but it's significantly better just moving it out into it's own function:</p>

<pre><code>(defn collision? [meteors rocket-x rocket-y]
  (loop [[m1 &amp; rest] meteors]
    (if (or (and
              (&lt;= (:x m1) rocket-x (+ (:x m1) 45))
              (&lt;= (:y m1) rocket-y (+ (:y m1) 45)))
            (and
              (&lt;= (:x m1) (+ rocket-x 45) (+ (:x m1) 45))
              (&lt;= (:y m1) (+ rocket-y 45) (+ (:y m1) 45))))
      true
      (if (empty? rest)
        false
        (recur rest)))))

(defn meteor-hit [state]
  (let [rocket-x (-&gt; state :rocket :x)
        rocket-y (-&gt; state :rocket :y)
        meteors (:meteors state)]
    (cond
      (empty? meteors) state
      (collision? meteors rocket-x rocket-y) (reset-state-variable state)
      :else state)))
</code></pre>

<hr>

<p>Just for emphasis on why you should <em>really</em> be using <code>assoc</code>, here's <code>bonus-out</code> when you use <code>assoc</code>:</p>

<pre><code>(defn bonus-out [state]
  (if (item-inside? (:bonus state))
    state
    (assoc state
           :background (q/load-image "images/stars.jpg")
           :gameOver false
           :bonus [])))
</code></pre>

<p>Again, <em>much</em> less duplication, <em>and</em>, if you ever added a field to the state, you no longer need to go back and fix <em>every</em> function that manipulates the state! That alone is massive.</p>

<hr>

<p>There's no point in using <code>update-in</code> if you aren't actually accessing a nested member. <code>age-smoke</code> could/should be written just as:</p>

<pre><code>(defn age-smoke [smoke]
  (update smoke :age #(+ % 0.3)))
</code></pre>

<p>You can also make use of <code>update</code>'s var-arg overload. It seems complicated at first when you're reading the docs, but basically how it works is the value being updated is automatically passed as the first argument to the function. Any arguments after that are given to the function after the first argument (that sounds awkward). To clear it up, here's the same function without the wrapper function:</p>

<pre><code>(defn age-smoke [smoke]
  (update smoke :age + 0.3))
</code></pre>

<p><code>%</code> is automatically treated as the first argument to <code>+</code>, then <code>0.3</code> is given after it. This is nice if the update is already in a <code>#()</code>, since those can't be nested.</p>

<hr>

<p>Nice use of <code>remove</code>. Gotta love code that reads like:</p>

<pre><code>(defn remove-old-smokes [smokes]
  (remove old? smokes))
</code></pre>

<p>This could theoretically be "reduced" down to:</p>

<pre><code>(def remove-old-smokes
  (partial remove old?))
</code></pre>

<p>This is a nice thing to think about, but I wouldn't stick with using <code>partial</code> in this particular example. </p>

<hr>

<p>It looks like your "smoke" map should also be a record instead of a standard map.</p>

<hr>

<p>For <code>reset-game</code>, I honestly prefer the condition to <code>if</code> to be on the same line as the <code>if</code>. I find it reads much nicer. I'd also bind <code>:rocket</code> in a <code>let</code> so you don't need to write <code>:rocket</code> twice:</p>

<pre><code>(defn reset-game [state]
  (let [rocket (:rocket state)]
    (if (inside? (:x rocket) (:y rocket))
      (reset-state-variable state)
      state)))
</code></pre>

<p>You could also destructure out the <code>:x</code> and <code>:y</code>:</p>

<pre><code>(defn reset-game [state]
  (let [{:keys [x y]} (:rocket state)]
    (if (inside? x y)
      (reset-state-variable state)
      state)))
</code></pre>

<p>This is a matter of style. It depends on where you want the bulk to be. In the body, or up in a <code>let</code>?</p>

<hr>

<p><code>reset-game-over</code> violates a <em>personal</em> pet-peeve of mine. Why use an <code>if</code> then just return <code>true</code>/<code>false</code>? You're also not using the <code>gameOver</code> parameter, and the name is wonky. That function isn't resetting anything; it's deciding if it should be reset. Just write:</p>

<pre><code>(defn reset-game-over? [state]
  (-&gt; state :rocket :dir (not= 0) (not)))
</code></pre>

<p>That double <code>not</code> looks a little off though. I'll admit I don't fully understand why <code>dir</code> is being used to decide if you should reset the game over state, but it might be possible to just write:</p>

<pre><code>(defn reset-game-over? [state]
  (-&gt; state :rocket :dir (zero?)))
</code></pre>

<hr>

<p>In <code>move-rocket</code>, <code>case</code> doesn't require lists around what you're matching on. You can just use bare numbers there.</p>

<hr>

<p>In your <code>draw</code> method, you're using a lot of nested <code>if</code>s, and I feel that it's hurting readability. I'd use <code>cond</code> here instead to reduce nesting.</p>

<hr>

<p>The functions that I didn't mention either had similar problems to one I'd already mentioned, or didn't have anything worth noting. </p>
    </div>