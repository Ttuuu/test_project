<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>In programming challenges, proper performances improvement usually come from a smarter algorithm. Unfortunately, I have no algorithm better than the one you have implemented.</p>

<p>I have found a single trick to shave off some time.</p>

<p><strong>Remove all the logic around <code>seen</code></strong></p>

<p>In all places where you access elements from <code>grid</code> and <code>seen</code>, we have basically: <code>if grid[pos] and not seen[pos]</code>.</p>

<p>An idea could be to update <code>grid</code> in place to remove seen elements from it. From an engineering point of view, it is not very nice: I would not expect an function computing the size of the biggest connected components to update the provided input. For a programming challenge, we can probably accept such a thing...</p>

<p>We'd get:</p>

<pre><code>def largest_connected_component(nrows, ncols, grid):
    """Find largest connected component of 1s on a grid."""

    def traverse_component(i, j):
        """Returns no. of unseen elements connected to (i,j)."""
        grid[i][j] = False
        result = 1

        # Check all four neighbours
        if i &gt; 0 and grid[i-1][j]:
            result += traverse_component(i-1, j)
        if j &gt; 0 and grid[i][j-1]:
            result += traverse_component(i, j-1)
        if i &lt; len(grid)-1 and grid[i+1][j]:
            result += traverse_component(i+1, j)
        if j &lt; len(grid[0])-1 and grid[i][j+1]:
            result += traverse_component(i, j+1)
        return result

    # Tracks size of largest connected component found
    component_size = 0

    for i in range(nrows):
        for j in range(ncols):
            if grid[i][j]:
                temp = traverse_component(i, j)
                if temp &gt; component_size:
                    component_size = temp

    return component_size
</code></pre>

<hr>

<p>Another idea in order to do the same type of things without changing <code>grid</code> could be to store "positive" elements in a set. This also remove the need to check for edge cases of the grid. The great thing is that we can populate that set with less array accesses. This is still pretty hackish:</p>

<pre><code>def largest_connected_component(nrows, ncols, grid):
    """Find largest connected component of 1s on a grid."""

    def traverse_component(pos):
        """Returns no. of unseen elements connected to (i,j)."""
        elements.remove(pos)
        i, j = pos
        result = 1

        # Check all four neighbours
        for new_pos in [(i-1, j), (i+1, j), (i, j-1), (i, j+1)]:
            if new_pos in elements:
                result += traverse_component(new_pos)
        return result

    # Tracks size of largest connected component found
    elements = set()

    for i, line in enumerate(grid):
        for j, cell in enumerate(line):
            if cell:
                elements.add((i, j))

    return max(traverse_component(pos) for pos in set(elements) if pos in elements)
</code></pre>

<p><strong>Edit</strong>: rewriting the solution to avoid the copy of <code>elements</code>, we have a slightly faster solution:</p>

<pre><code>def largest_connected_component(nrows, ncols, grid):
    """Find largest connected component of 1s on a grid."""

    def traverse_component(pos):
        """Returns no. of unseen elements connected to (i,j)."""
        i, j = pos
        result = 1

        # Check all four neighbours
        for new_pos in [(i-1, j), (i+1, j), (i, j-1), (i, j+1)]:
            if new_pos in elements:
                elements.remove(new_pos)
                result += traverse_component(new_pos)
        return result

    # Tracks size of largest connected component found
    elements = set((i, j) for i, line in enumerate(grid) for j, cell in enumerate(line) if cell)
    largest = 0
    while elements:
        pos = elements.pop()
        largest = max(largest, traverse_component(pos))
    return largest
</code></pre>
    </div>