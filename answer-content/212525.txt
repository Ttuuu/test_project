<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You are using classes wrong. Your first wrong statement is actually your first comment <code># Instances vairables</code>. Variables which you set at the class scope are class variables, they are in general shared by all instances of the class. Here this distinction does not really matter since you only ever have one instance of the class and when you do change them in the instance you override them with a new string instead of mutating the object there (which is impossible since strings are immutable in Python). But if you ever write a class where these objects are mutable (a <code>list</code> for example) you are in for a hell of a surprise:</p>

<pre><code>class A:
    x = []

a1 = A()
a2 = A()
a1.x.append(2)
print(a2.x)
# [2]
</code></pre>

<p>The next thing where you are using classes wrong is when calling the class methods. The usual way is this:</p>

<pre><code>class A:
    def some_method(self, *args):
        print("some_method", *args)

    def other_method(self):
        self.some_method(1)
</code></pre>

<p>Note that in the second method I did not write <code>A.some_method(self, 1)</code>. <code>self.some_method</code> is automatically expanded to that (and a lot more readable).</p>

<hr>

<p>And finally, I would question if this needs to be a class at all. Almost all parameters are explicitly passed to the methods anyways and the only state you keep around is <code>self.sheet</code>. But you might as well just keep that in a variable.</p>

<p>Without a class your code could look like this:</p>

<pre><code>import getpass
import gspread
from github import Github, BadCredentialsException
from oauth2client.service_account import ServiceAccountCredentials


def get_user_credentials():
    while True:
        username = raw_input("Github username: ")
        password = getpass.getpass(prompt='Github password: ')
        if username and password:
            return username, password
        print 'Github credentials are required!'


def get_repo(username, password, repository_name):
    try:
        github_account = Github(username, password)
        return github_account.get_repo('someuseraccount/' + repository_name)
    except BadCredentialsException:
        print 'Bad credentials. Try again!'
        raise

def get_releases(repository, release_name):
    releases = [release
                for release in repository.get_releases()
                if release.title.encode('utf-8') == release_name]
    if not releases:
        raise RuntimeError("'Release Name' is wrong!, Please try again with correct 'release name'")
    return releases

def get_issues(release):
    tag_name = release.tag_name.encode('utf-8')
    for line in release.body.splitlines():
        line = line.encode('utf-8')
        if line.startswith('- [FIX]'):
            yield "YES", tag_name, line[7:]
        elif line.startswith('-' * 7):
            yield "NO", tag_name, line[7:]

def get_sheet(file_name):
    scope = ['https://spreadsheets.google.com/feeds',
             'https://www.googleapis.com/auth/drive']
    google_credentials = ServiceAccountCredentials.from_json_keyfile_name(
        'test.json', scope)
    f = gspread.authorize(google_credentials)
    sheet = f.open(file_name).sheet1
    # Add headers to the sheet
    sheet.update_acell('A1', 'Client Version')
    sheet.update_acell('B1', 'Version Reference for Internal Purposes')
    sheet.update_acell('C1', 'Proposed Change (Expected Functional Behavior)')
    sheet.update_acell('D1', 'Bug Fix?')
    sheet.resize(1)
    return sheet

def write_issues_to_sheet(sheet, issues):
    for fixed, tag_name, line in issues:
        sheet.append_row([tag_name, tag_name, line, fixed])
    print "Release inserted to the Google sheet."

def main():
    username, password = get_user_credentials()
    repository_name = raw_input("Repository name: ")
    repo = get_repo(username, password, repository_name)
    sheet = get_sheet('Copy_of_MOD_Change_Worklog_Tracker.xlsx')

    release_name = raw_input('Release name: ')
    for release in get_releases(repo, release_name):
        write_issues_to_sheet(sheet, get_issues(release))

if __name__ == "__main__":
    main()
</code></pre>

<p>I also moved around a bit where stuff is being done in order to decouple the functions from each other. Now they are all being called from the <code>main</code> function which handles passing them the right parameters. This drastically reduced the number of parameters needed by the functions, since now they don't need to take the parameters of the functions they are going to call inside.</p>

<p>I also used <code>sheet.append_row</code> which appends a row after the last row. For this to work correctly we must first set the last row to be the first one (because otherwise it will add rows starting at row 1000). For this I used <code>sheet.resize</code>. You might have to do <code>sheet.resize(2)</code> instead of <code>1</code> if it overrides your header, can't test this ATM.</p>
    </div>