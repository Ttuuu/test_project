<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Well, it looks quite nice. But now let's try to find all the corners which can still be improved:</p>

<ol>
<li><p>I'm not quite sure why you list a few members of each include you added. But, at least it simplifies checking for extraneous includes, and they are sorted.</p></li>
<li><p>Simply restating the code in vaguer words, or otherwise restating the obvious, is an abuse of comments. They just detract from anything relevant.</p>

<p>Well, at least some of them could be justified as breaking long blocks of declarations and definitions into easier digestible logical chunks.</p></li>
<li><p>Conversion to and arithmetic using unsigned types being done using modulo-arithmetic should not be a surprise to any reviewer and/or maintainer. If it is, they lack basic knowledge, and your sources should not be a basic language-primer.</p></li>
<li><p>You had extraneous whitespace at the end of some lines. An automatic formatter, or format-checker, either of which can be put in a commit-hook, would have fixed or at  least found them.</p></li>
<li><p>You use your macro <code>CONSTRAINT</code> seven times, leading to a total saving of <span class="math-container">\$((40-13)-(15-3)) \times 7 - 71 - 19 = 15 \times 7 - 90 = 15\$</span> bytes. That's quite a paltry compensation for adding this cognitive burden on any maintainer, and breaking any user-code defining <code>CONSTRAINT</code> before the include. At least the damage is limited due to you undefining it too.</p></li>
<li><p>Your use of the macro <code>EXPECTS</code> does not even have that silver lining, as it expanded your code by <span class="math-container">\$((12-3)-(21-13)) \times 11 + 49 + 16 = 1 \times 11 + 65 = 76\$</span> bytes. And it leaves me even more puzzled as you should have just used <code>assert()</code> directly, that's exactly what it's for.</p></li>
<li><p>You use an extra template-parameter for SFINAE of a function once. While ctors have to do SFINAE there or not at all, functions can avoid any potential extra-cost by using the return-type for that.</p></li>
<li><p>If you were actually writing part of the standard library, or had C++20 with it customisation-points, <code>my_size()</code> and <code>my_data()</code> would be pointless. Even though you don't actually need it, I would suggest enabling their use for SFINAE.</p></li>
<li><p>You aren't currently optimizing the case of non-dynamic extent. Not too surprising, as you go down to the metall everywhere. Just always delegate to <code>span::span(T*, std::size_t)</code> (at least ultimately), and see everything get magically easier. Yes, when you conditionally remove the backing-field for size, you need to adapt <code>.size()</code>.</p></li>
<li><p>Unifying the ctors <code>span::span(Container&amp;)</code> and <code>span::span(Container const&amp;)</code> is simplicity itself:</p>

<pre><code>template &lt;class Container, class = std::enable_if_t&lt;
    !std::is_rvalue_reference_v&lt;Container&amp;&amp;&gt;
    &amp;&amp; previous_constraint&gt;&gt;
span(Container&amp;&amp; c)
</code></pre></li>
<li><p>Building on the above, you only have one point left interested in whether you have a non-<code>std::array</code>, non-<code>span</code>, container. Thus, you can simplify all the machinery to detect that, unify detection of <code>std::array</code> and <code>span</code>, and inline it all:</p>

<pre><code>template &lt;class T, template &lt;auto&gt; class TT&gt;
struct is_template_instantiation : std::false_type {};
template &lt;template &lt;auto&gt; class TT, auto N&gt;
struct is_template_instantiation&lt;TT&lt;N&gt;, TT&gt; : std::true_type {};

template &lt;class Container, class = std::enable_if_t&lt;
    !std::is_rvalue_reference_v&lt;Container&amp;&amp;&gt;
    &amp;&amp; !span_detail::is_template_instantiation&lt;std::decay_t&lt;Container&gt;, span&gt;()
    &amp;&amp; !span_detail::is_template_instantiation&lt;std::decay_t&lt;Container&gt;, std::array&gt;()
    &amp;&amp; !std::is_array&lt;std::decay_t&lt;Container&gt;&gt;(), decltype(
    span_detail::my_size(std::declval&lt;Container&amp;&gt;()), void(),
    span_detail::my_data(std::declval&lt;Container&amp;&gt;()), void())&gt;&gt;
span(Container&amp;&amp; c)
: span(span_detail::my_data(c), span_detail::my_size(c))
{}
</code></pre></li>
<li><p>I suggest adding computed <code>noexcept</code> even where not mandated. Doing so even allows you to unify more members.</p></li>
</ol>
    </div>