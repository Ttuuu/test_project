<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You're thinking too procedural instead of actually using Java in the way it's designed to be used. This is most obvious in that you're only ever using static methods that don't even return anything.</p>

<p>Correcting everything would be a bit out of scope of this review so I'll give some pointers on how to improve your current code without changing <em>too</em> much. In no particular order, here's my list of changes I suggest, in order that I encountered them:</p>

<h1>variable naming conventions</h1>

<p>The java convention is to start variable names with a small case  That way it's immediatly clear when something is a variable name and when it's a class name.<br>
<code>JButton Play</code> should be <code>play</code> instead.</p>

<p>Variables should also get meaningful names. Editors these days usually include autocomplete anyway so it doesn't take much more typing to use longer names. Other people using (or reviewing) your code will be thankful if you don't use one letter variables.<br>
Variables like <code>b</code>, <code>i</code>, ... could be namend <code>columnB</code> ... instead, <code>k</code> should probably be something like <code>frame</code> and <code>bk</code> took me way longer than I'd like to admit before I figured out that it's the <code>background</code> for the application.</p>

<p>The only exceptions where one letter variables are commonly used is in a for loop. The convention is to use <code>i</code> (or <code>j</code> in a nested loop) instead of how you used <code>p</code>.</p>

<h1>static fields</h1>

<p>These made me think you don't understand OOP yet. Since they're used only inside the <code>random()</code> method, the easiest quickfix for now is to just move them inside that method.</p>

<p>Static fields are rarely useful, except if they're constants, in which case they should also be declared <code>final</code> (and following Java naming conventions written in ALLCAPS). At some point you'll want to introduce an actual instance of one of your classes and use non-static fields. I'm considering that out of scope of this review for now. It's advisable you search for a Java tutorial to explain how to use classes and objects.</p>

<h1>random.double()</h1>

<p>I don't like casting if you don't need it.<br>
This should probably be replaced with <code>random.nextInt(to - from + 1) + from</code>.</p>

<h1>removing random generation repetition.</h1>

<p>One of the most obvious points where repetition can be avoided is in your <code>random()</code> method. My initial thought was to provide a new helper method like this:</p>

<pre><code>private static int[] generateRandomNumbers(int from, int to) {
    Random random = new Random();
    int[] result = new int[5];
    for(int i = 0; i &lt; 5; i++){
        boolean found = false;
        while(!found) {
            result[i] = random.nextInt(to-from+1)+from;
            found = true;
            for(int j = 0; j&lt;i; j++){
                if(result[i] == result[j]) {
                    found = false;
                }
            }
        }
    }
    return result;
}
</code></pre>

<p>Which can be used for all the columns except for the middle one. The only difference is the size of the array to be returned. So if we pass that in as a variable as well we can simplify your entire <code>random()</code> method to this:</p>

<pre><code>public static void random() { // Random number Generator method, is called when action listener runs
    int b[] = generateRandomNumbers(1, 15, 5);
    int i[] = generateRandomNumbers(16, 30, 5);
    int n[] = generateRandomNumbers(31, 45, 4);
    int g[] = generateRandomNumbers(46, 60, 5);
    int o[] = generateRandomNumbers(61, 75, 5);

    card(b, i, n, g, o);
}

private static int[] generateRandomNumbers(int from, int to, int amount) {
    Random random = new Random();
    int[] result = new int[amount];
    for (int i = 0; i &lt; amount; i++) {
        boolean found = false;
        while (!found) {
            result[i] = random.nextInt(to - from + 1) + from;
            found = true;
            for (int j = 0; j &lt; i; j++) {
                if (result[i] == result[j]) {
                    found = false;
                }
            }
        }
    }
    return result;
}
</code></pre>

<h1>removing button creation repetition</h1>

<p>Another place where you repeat the same lines over and over is when you're creating all the buttons inside the <code>card</code> method.</p>

<p>Let's start by creating a helper method that creates a button</p>

<pre><code>private static JButton createButton( String text) {
    JButton button = new JButton();
    button.setText(text);
    button.setForeground(Color.BLACK);
    button.setContentAreaFilled(false);
    button.setFocusPainted(false);
    button.setFont(new Font("Comic Sans MS", Font.PLAIN, 26));
    return button;
}
</code></pre>

<p>That way we can simplify the for loops to create the buttons to:</p>

<pre><code>    //For loops to setText to all of the buttons
    for (int p = 0; p &lt; b.length; p++) {
        b1[p] = String.valueOf(b[p]);
        columnB[p] = createButton(b1[p]);
        frame.add(columnB[p]);
    }
</code></pre>

<p>I also noticed that the <code>b1</code> array is only used inside that loop, so we can inline that instead to remove that variable altogether:</p>

<pre><code>    //For loops to setText to all of the buttons
    for (int p = 0; p &lt; b.length; p++) {
        columnB[p] = createButton(String.valueOf(b[p]));
        frame.add(columnB[p]);
    }
</code></pre>

<p>A bit further into the method there's a lot of repetition to add a click listener to each of the buttons. We can just add that listener inside our new helper method so that it's already done for each of the buttons when they're created. That way we can remove all of that repetition.</p>

<pre><code>private static JButton createButton( String text) {
    JButton button = new JButton();
    button.setText(text);
    button.setForeground(Color.BLACK);
    button.setContentAreaFilled(false);
    button.setFocusPainted(false);
    button.setFont(new Font("Comic Sans MS", Font.PLAIN, 26));
    button.addActionListener(new ActionListener() {
        private boolean right = false;

        @Override
        public void actionPerformed(ActionEvent e) {
            if (!right) {
                button.setForeground(Color.red);
            } else if (right) {
                button.setForeground(Color.BLACK);
            }
            right = !right;
        }
    });
    return button;
}
</code></pre>

<h1>layout manager</h1>

<p>You should really consider using a layout manager instead of hard coding positions yourself. Explaining how to use one is a bit too much to do in this review. I suggest looking up how to use a <code>MigLayout</code> for example where you can define a 5x5 grid. That way it's enough to just add the buttons in the earlier mentioned for loops without explicitly setting each of the bounds.</p>

<h1>handling middle square</h1>

<p>An idea that could further simplify your code is to first not treat the middle square as anything special and actually create a 5x5 grid instead of separate columns. Then only where it actually matters make the difference for that middle square. That way you can do things like:</p>

<pre><code>public static void card(int[][] numberGrid) {
....    

for(int row = 0; row &lt; grid.length; row++) {
    for(int col = 0; col &lt; grid[row].length; col ++) {
        if (row == 2 &amp;&amp; col == 2) {
            R.add(new JLabel("Free square!"));  //todo replace with something useful                  
        } else {
            R.add(createButton(String.valueOf(numberGrid[row][col])));
        }
    }
}
</code></pre>

<p>I'll leave figuring out how to update the rest of your code to use such a grid up to you.</p>

<h1>one frame</h1>

<p>It's probably nicer if you can only create one frame for your application and keep using that one instead of always disposing your frame and creating a new one. This may require actually using an instance of your Bingo class to store the frame in so I'll leave it out of scope of this review.</p>
    </div>