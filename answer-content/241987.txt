<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Well, let me tell you the truth: this is not OOP at all. This is a very common approach called "ole good procedural disguised as OOP". Your code is essentially procedural. Class methods here are used as functions. You can rewrite them as functions and your code will be the same. </p>

<p>And even such a makeshift OOP is inconsistent. </p>

<ul>
<li>for example, <code>new Files($pdo, $_SESSION['userid']);</code> - why instead of using <code>$client</code> a direct access to the session variable?</li>
<li><p>or, I would make the whole authentication into a method of the Client class, and call this method, like</p>

<pre><code>if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    $client = new Client();
    $client-&gt;authenticate($pdo, $_POST['nick'], $_POST['pass']);
    $err = 'Nickname or password incorrect';
}
</code></pre></li>
<li><p>the same goes for the logout code</p></li>
</ul>

<p>To be honest, in your place I would rather try to learn how to make a more organized procedural code. For example instead of such "accordion" as in your add.php why not to make it more level</p>

<pre><code>$err = [];
$inputValidator = new InputValidator($name);
if (!$inputValidator-&gt;length(1, 50)) {
    $err[] = 'File name length is not correct';
}
$inputValidator = new InputValidator($content);
if (!$inputValidator-&gt;length(0, 10000)) {
    $err[] = 'Your file size is too big';
}
if (!$err) {
    require 'includes/db.php';
    $files = new Files($pdo, $_SESSION['userid']);
    $files-&gt;add($name, $content);
    $_SESSION['message'] = 'File has been added successfully';
    $_SESSION['filesData'] = null;
    $client-&gt;redirect('system.php');
}
</code></pre>

<p>And you also need learn the basic PHP syntax. For example, why <code>$stmt-&gt;fetchAll()[0]['id'];</code> when there is <code>fetch()</code>,  or even <code>fetchColumn()</code> intended exactly for this purpose? Both <code>fetchAll()</code> and <code>fetch()</code> would raise an error when there is no such user found, where <code>fetchColumn()</code> will just return FALSE.</p>

<p>Oh - and you really, really should learn basic SQL as well. </p>

<pre><code> $stmt-&gt;bindValue(':id', rand(10000001,99999999) . rand(10000001,99999999));
</code></pre>

<p>is <strong>abaslutely not</strong> how it works. You've got to make the id field <code>auto_increment PRIMARY KEY</code> in the table, and it will be assigned automatically and without the risk of collisions.</p>

<p>Your idea on using exceptions is also wrong. As well as on the variable scope. To catch every exception on the spot is not how exceptions are intended to work. Least there is any point in assigning the error message to a variable that will be discarded the next instant. In PHP, a variable inside a function is only alive a long as the function is executed and when the function is finished your $err variable gets in to the void. And therefore it makes no sense to check <code>if (!isset($err))</code> - it is never set.  In general, you should leave error and exceptions alone, and handle them in a single place with a dedicated code, instead of littering your application code with thousands of catch blocks. Here is an article I wrote on <a href="https://phpdelusions.net/articles/error_reporting" rel="nofollow noreferrer">PHP error reporting</a>. </p>

<p>Don't be discouraged though. OOP is a hard tack by itself, but tenfold when compared to obscene simplicity of traditional PHP. OOP is not a syntax. It's a mindset. No wonder you don't know what an abstract class is for, simply because you don't know yet <em>what a regular class is for</em> either. It takes time to realize.</p>

<blockquote>
  <p>To me, OOP is an approach that improves the <em>manageability</em> of the code at the cost of adding extra <em>complexity</em>. Which means that as long as your procedural code is manageable, you won't see any benefit from OOP, yet your code will become unnecessarily more complex.</p>
</blockquote>
    </div>