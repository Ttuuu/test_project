<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I've updated the <a href="http://sqlfiddle.com/#!18/bdf74/10" rel="nofollow noreferrer">Fiddle</a> with your initial query and 2 alternatives.</p>

<p>This is the initial query plan:</p>

<p><a href="https://i.stack.imgur.com/tJgx2.jpg" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/tJgx2.jpg" alt="enter image description here"></a></p>

<p>Using <code>OUTER APPLY</code> instead of the nested <code>SELECT</code> statements.</p>

<pre><code>select created_at, prior_dd_rcvd_status_id, 
    new_dd_rcvd_status_id, prior_dd_status, new_dd_status, filing_id
from ES_LOG
outer apply (
    select dd_doc_status_name as prior_dd_status 
    from ES_DOCUMENT_STATUSES where dd_doc_status_id = prior_dd_rcvd_status_id
) a
outer apply (
    select dd_doc_status_name as new_dd_status 
    from ES_DOCUMENT_STATUSES where dd_doc_status_id = new_dd_rcvd_status_id
) b
where filing_id = 988;
</code></pre>

<p>The query plan gets simplified:</p>

<p><a href="https://i.stack.imgur.com/GTxlh.jpg" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/GTxlh.jpg" alt="enter image description here"></a></p>

<p>And using <code>LEFT OUTER JOIN</code> instead of the <code>OUTER APPLY</code>.</p>

<pre><code>select created_at, prior_dd_rcvd_status_id, 
    new_dd_rcvd_status_id, 
    a.dd_doc_status_name as prior_dd_status, 
    b.dd_doc_status_name as new_dd_status, 
    filing_id
from ES_LOG
left outer join ES_DOCUMENT_STATUSES a 
    on a.dd_doc_status_id = prior_dd_rcvd_status_id
left outer join ES_DOCUMENT_STATUSES b 
    on b.dd_doc_status_id = new_dd_rcvd_status_id
where filing_id = 988;
</code></pre>

<p>With an even more simplified query plan:</p>

<p><a href="https://i.stack.imgur.com/AkyEh.jpg" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/AkyEh.jpg" alt="enter image description here"></a></p>

<p>However, as you can see, the table scans take most of the time. So I'm not sure how much performance you could gain by picking either of the alternatives.</p>

<p>Further improvements require the use of indexes (<a href="https://www.itprotoday.com/sql-server/which-faster-index-access-or-table-scan" rel="nofollow noreferrer">Table Scan vs Index Scan</a>). Deciding which index to provide depends not only on this query, but also the general design of how these tables will be used for other queries and CRUD operations. I would advise you learn about them.</p>
    </div>