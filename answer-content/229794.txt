<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><code>ShiftRight</code> does not need to be a series of shift-by-1 operations.</p>

<p>An other approach is:</p>

<ol>
<li>shift whole bytes, by a distance of <code>distance / 8</code></li>
<li>shift the bytes by <code>distance % 8</code>, while shifting in bits from the next byte</li>
</ol>

<p>I have to be a little careful here because you used an unsual byte order (lowest order byte <em>last</em>) and you're doing this in-place. Here's an attempt (not debugged):</p>

<pre><code>// move bytes to shift by multiples of 8
int byteDistance = (int)(distance / 8);
for (int i = bytes.Length - 1; i &gt;= byteDistance; i--)
{
    bytes[i] = bytes[i - byteDistance];
}
// zero out the "top" of the array
for (int i = byteDistance - 1; i &gt;= 0; i--)
{
    bytes[i] = 0;
}

// bit-granular shift by the remainder of the distance
int bitShift = (int)(distance % 8);
for (int i = bytes.Length - 1; i &gt;= 1; i--)
{
    int twoBytes = bytes[i] | (bytes[i - 1] &lt;&lt; 8);
    bytes[i] = (byte)(twoBytes &gt;&gt; bitShift);
}
bytes[0] &gt;&gt;= bitShift;
</code></pre>

<p>Some variants may be interesting:</p>

<ul>
<li>The last loop can iterate less, stopping at the part of the array that was left zero by the byte-granular shift.</li>
<li>The last loop could be unrolled, packing more bytes into an <code>int</code> and making "better use" of the integer shift. </li>
<li>With <code>Span&lt;T&gt;</code> and primarily targeting 64bit, we could <code>MemoryMarshal.Cast</code> the <code>Span&lt;byte&gt;</code> to an <code>Span&lt;uint&gt;</code>, then do a similar thing as above but with two <code>uint</code> in an <code>ulong</code> rather than two <code>byte</code> in an <code>int</code>. It takes some care with arrays with length not a multiple of 4, of course.</li>
</ul>

<p>Notable <em>non</em>-possibility:</p>

<ul>
<li>An other new thing in Standard 2.1 thing is <a href="https://docs.microsoft.com/en-us/dotnet/api/system.numerics.vector?view=netstandard-2.1" rel="nofollow noreferrer">System.Numerics.Vector</a>, but it still lacks bit-shifts (I've heard they will probably be added someday), so it can't be used for this, even though the hardware can do it.</li>
</ul>
    </div>