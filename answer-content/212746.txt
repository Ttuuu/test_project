<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You forgot to include any of the headers that your code depends on; copy/paste of this into <a href="https://godbolt.org/" rel="nofollow noreferrer">https://godbolt.org/</a> gives lots of errors until I add <code>#include &lt;memory&gt;</code> and iostream, and some <code>using</code> declarations (<a href="https://godbolt.org/z/cE0GDR" rel="nofollow noreferrer">https://godbolt.org/z/cE0GDR</a>).  So the code in the question is incomplete.</p>

<p><strong>More importantly, for <code>shared_ptr</code> to be thread-safe, it has to use atomic-increment / decrement instructions, and check if the ref-count has become 0 after it's done referencing a node.</strong>  This makes it significantly more expensive than I think you want.  As another answer suggests, <code>std::unique_ptr&lt;&gt;</code> is probably a better choice.</p>

<p>So for example, your <code>findmin()</code> source looks really simple, just traversing down to the left-most leaf node, but because you're using <code>shared_ptr</code> it compiles (on x86-64) to <code>lock add</code> and <code>lock xadd</code> instructions, potentially calling the destructor to free the node.</p>

<p>(gcc emits checks before actually doing the atomic ++ / -- ref counting.  It checks <a href="https://stackoverflow.com/questions/27257655/undefined-reference-to-gthrw-pthread-key-createunsigned-int-void-voi">the <em>address</em> of a weak alias for <code>__pthread_key_create</code></a>.  I think this might just be checking if the program could possibly be multi-threaded, i.e. linked with the thread library, rather than if multiple threads are currently running.  So some of the cost of <code>shared_ptr</code> might go away in some single-threaded programs.)</p>

<p>If you're looking at the asm on the Godbolt compiler explorer, search for the <code>lock</code> prefix for x86-64.  Or for AArch64, look for <code>ldaxr</code>/<code>stlxr</code> LL/SC retry loops (load-acquire exclusive / store sequential-release exclusive).</p>
    </div>