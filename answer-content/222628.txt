<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This is code review, we didn't need to see your non-abstracted class since it doesn't need reviewing.</p>

<p>I will not do a complete review of the abstracted class, but I have a few comments and tips. </p>

<p>First of all, your class is called <code>CreateTable</code>, but this class can also destroy a table. That is the opposite of what it says on the tin. I think a better name would be <code>ManipulateTable</code>. </p>

<pre><code>$employeeTable = new ManipulateTable($pdo, 'Employee');
</code></pre>

<p>Which is just another way of saying: "I want to work on the table 'Employee' now.". </p>

<p>I don't like the lump methods <code>up()</code> and <code>down()</code>. They are not very flexible or abstract. I would, instead, use methods to create or delete one column:</p>

<pre><code>$employeeTable-&gt;deleteColumn("password")
              -&gt;commitToDatabase();

$employeeTable-&gt;createColumn("passwordHash", "VARCHAR(64)")
              -&gt;commitToDatabase();
</code></pre>

<p>After all, columns are the most important things when manipulating tables, so you want to be able to manipulate them individually. The <code>commitToDatabase()</code> method is used to update any changes to the database. To create multiple columns you would do:</p>

<pre><code>$employeeTable-&gt;createColumn("userId", "INT")
              -&gt;createColumn("firstName", "VARCHAR(32)")
              -&gt;createColumn("lastName", "VARCHAR(32)")
              -&gt;createColumn("email", "VARCHAR(64)")
              -&gt;createColumn("password", "VARCHAR(72)", false, "!test@12345")
              -&gt;createColumn("PRIMARY KEY (userId)")
              -&gt;createPrimaryIndex("userId")
              -&gt;commitToDatabase();
</code></pre>

<p>In other words, I would take your approach one step further. The <code>ManipulateTable</code> class is now more than a wrapper around the "CREATE TABLE" statement and has become a general purpose class for manipulating tables. It actually makes it easier to work with tables. I could, for instance, use it to add a column to an existing table. You can't do that with your class because you can only do <code>up([columns])</code> or <code>down()</code>.</p>

<p>As for the code in your class: Your <code>up()</code> method doesn't return anything. If a table already exists it does nothing, and the user of that method will never know that. Why not return <code>false</code> in that case and <code>true</code> when the table was correctly created? </p>

<p>I also think that:</p>

<pre><code>if (empty($results)) {
    return false;
}
return true;
</code></pre>

<p>is the same as:</p>

<pre><code>return !empty($results);
</code></pre>

<p>you use this construction twice.</p>
    </div>