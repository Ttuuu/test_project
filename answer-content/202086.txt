<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here are a few suggestions, in order of importance</p>
<h2>Delete nodes in the destructor</h2>
<p>Right now, you are relying on users to call <code>deleteList</code> in order to delete the nodes in the List. Modern C++ uses the concept of <a href="https://en.wikipedia.org/wiki/Resource_acquisition_is_initialization" rel="noreferrer">RAII</a> to remove the need for this. Write a destructor for your list that automatically deletes all nodes, so that users do not have to remember to call <code>deleteList</code> every time their list is about to go out of scope.</p>
<h2>Finish adding double-linked list functionality</h2>
<p>Right now, this is not a double-linked list, because you cannot perform operations on both ends of the list. In order to be a true double-linked list, you need to support adding and removing nodes from both the front and back of the list.</p>
<h2>Break up responsibility</h2>
<blockquote>
<p>The sortedInsert(x) function would only work properly if it is used with a new list. It wouldn't work if first insert(x) is used and then sortedInsert(x)</p>
</blockquote>
<p>This smells like one class trying to do two different things that it doesn't actually support. I can use your <code>List</code> as either a regular linked list, or a sorted linked list, but not both. If this is the case, you should split up these two responsibilities into two different classes, which can be made simpler through inheritance or composition.</p>
<p>I recommend you first remove the <code>sortedInsert</code> function from your <code>List</code> and focus on making that a true double-linked list. Then, you can create a new class called <code>SortedList</code> that either uses <code>List</code> as a base class...</p>
<pre><code>class SortedList : public List
{
    ...
}
</code></pre>
<p>...or is a wrapper around a regular List which it keeps sorted.</p>
<pre><code>class SortedList
{
private:
    List list;
public:
    void sortedInsert(int x);
    ...
}
</code></pre>
<p>The interfaces for <code>List</code> and <code>SortedList</code> are very different (you don't want to regular <code>insert()</code> into a <code>SortedList</code>). Therefore, I would personally go with the second option (composition) as it allows you to control the interface of your <code>SortedList</code> without exposing any of the underlying <code>List</code> interface.</p>
<h2>Don't use <code>operator+</code></h2>
<p>Operator overloading is an easy trap to fall into that actually ends up making your code more confusing. Really think about it for a moment - what does it mean to add two <code>List</code>s together? Do we append one to the other? Or do we add together all of their elements? In your case it is the former, but if you look at this code snippet...</p>
<pre><code>List list1;
List list2 = list1 + 5;
List list3 = list1 + list2;
</code></pre>
<p>...it is hard for me to tell what is going on here. Especially in C++ where addition generally means "adding two numbers together", I would not expect <code>list1 + 5</code> to insert <code>5</code> at the end of <code>list1</code>.</p>
<p>For containers, explicitly-named functions are usually more useful than operator overloads. I would prefer <code>insert(int element);</code> and <code>append(const List&amp; otherList);</code> to an ambiguous <code>operator+</code> that doesn't cleanly show what it is doing.</p>
<h2>Make it templated</h2>
<p>You can make your <code>List</code> more useful by making it a templated container. The interface will be very similar to what you have now, but instead of using <code>int</code> everywhere, you can define the class as</p>
<pre><code>template &lt;typename T&gt;
class List { ... }
</code></pre>
<p>and use <code>T</code> everywhere you are currently using <code>int</code>.</p>
<h2>Write more idiomatic C++</h2>
<p>There are a couple of small idioms that you can use in your code to make it more readable for a C++ programmer. One that I noticed right away is comparing to <code>nullptr</code>. In C++, it is very common to write <code>while (node)</code> rather than <code>while (node != nullptr)</code>, or <code>if (!node)</code> instead of <code>if (node == nullptr)</code>. This is common practice, and will be recognizable by most C++ programmers.</p>
<h2>Improve variable names</h2>
<p>Most of your functions are short and easy-to-parse, which is good. They can be improved by using more descriptive names i.e <code>currentNode</code> instead of <code>tmp</code>. This is more of a problem in long functions, but having the context of a "real" name is always more useful than simply <code>temp</code> or <code>c</code> etc.</p>
<h2>Fix minor formatting issues</h2>
<p>Sometimes you have two empty lines between statements, but sometimes you have zero. You also have the same problem with functions. Additionally, you usually put the * for a pointer directly after the type i.e <code>Node*</code> except for two places where you use <code>Node *</code> with a space. These are minor issues, but if your code is formatted consistently, it becomes much easier to read quickly.</p>
    </div>