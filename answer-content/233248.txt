<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>A big issue with your code is consistency and there are a lot of duplicated points of pain in your code. I've not repeated them in every case.</p>

<p><strong>Just a nitpick, but sorting your headers makes them easier to read.</strong></p>

<pre><code>#include &lt;iostream&gt;
#include &lt;iomanip&gt;
#include &lt;vector&gt;
#include &lt;cctype&gt;
</code></pre>

<p><strong>Avoid declaring <code>using namespace std;</code>, especially in a header file.</strong></p>

<pre><code>using namespace std;
</code></pre>

<p><strong>Don't prefix your types.</strong></p>

<pre><code>class cCar {
</code></pre>

<p><strong>Declare access modifiers in public, protected, private order.</strong></p>

<pre><code>private:
</code></pre>

<p><strong>Systems Hungarian notation is out-dated by many decades and isn't useful anymore with modern inventions like intellisense.</strong></p>

<p><strong>Avoid starting a variable declaration with an underscore (and never containing two back-to-back), the rules are obscure and you may clash with a reserved-for-implementation declaration.</strong></p>

<pre><code>    string _sName;
</code></pre>

<p><strong>From a rounding error perspective, never use floating-point datatypes when dealing with money. Prefer <code>long long</code> and then divide by the appropriate conversion from smallest unit to whole unit amounts at the end.</strong></p>

<p><strong>i.e. if units are in dollars and cents, you'd store the values in cents/pennies and divide by 100 at the end; if the units are in pounds and pence (after 1971), you'd store the values in pence and divide by 100 at the end as well.</strong></p>

<pre><code>    double _dPrice;
public:
</code></pre>

<p><strong>Use constructor initializer lists instead of copying data twice in the body.</strong></p>

<p><strong>The argument names aren't helpful. Consider naming them more appropriately such as <code>name</code> and <code>price</code>.</strong></p>

<pre><code>    cCar(string s, double d) {
        _sName = s;
        _dPrice = d;
    }
    string getName() { return _sName; }
    double getPrice() { return _dPrice; }
};
</code></pre>

<p><strong>You append the argument vector AND return it. Why?</strong></p>

<pre><code>vector&lt;cCar&gt;CarDatabase(vector&lt;cCar&gt;&amp; car_list) {
</code></pre>

<p><strong>You aren't declaring <code>cCar</code>'s constructor <code>explicit</code>. Because of this, consider using an initializer list instead of explicitly calling the constructor.</strong></p>

<p><strong>i.e. <code>car_list.push_back({"Blue Nissan Skyline", 1000});</code>.</strong></p>

<pre><code>    car_list.push_back(cCar("Blue Nissan Skyline", 1000));
    car_list.push_back(cCar("Red Mini", 3000));
    car_list.push_back(cCar("Black Land Rover", 4000));
    car_list.push_back(cCar("Beatle", 9000));
    car_list.push_back(cCar("Ferrari", 300000));
    return car_list;
}
</code></pre>

<p><strong>Be consistent. You prefixed <code>cCar</code> but nothing else. Prefer removing the prefix of <code>cCar</code>.</strong></p>

<p><strong>Put unrelated classes in their own header and implementation files.</strong></p>

<p><strong>See previous about avoiding floating-point types when dealing with money.</strong></p>

<pre><code>class Finance {
private:
    string _sUserName;
    double _dCostOfCar;
    string _sChosenCar;
    int _iFinancePlan;
    double _dDepositedAmount;
    double _dMonthlyPayments;
    double _dTotalLeftToPay;

public:
</code></pre>

<p><strong>Consistency. You have well-defined argument names here but not in <code>cCar</code>.</strong></p>

<p><strong>Use constructor initializer list instead of copying in the body.</strong></p>

<p><strong>Systems Hungarian notation is out-dated.</strong></p>

<pre><code>    Finance(string sName, double dCostOfCar, string sChosenCar, int iFinancePlan, double dDepositedAmount, double dDMonthlyPayments, double dTotalLeftToPay) {
        _sUserName = sName;
        _dCostOfCar = dCostOfCar;
        _sChosenCar = sChosenCar;
        _iFinancePlan = iFinancePlan;
        _dDepositedAmount = dDepositedAmount;
        _dMonthlyPayments = dDMonthlyPayments;
        _dTotalLeftToPay = dTotalLeftToPay;
    }
    //...
};
</code></pre>

<p><strong>Useless comments. A professional programmer is going to know what this is.</strong></p>

<p><strong>Consistency as well. Why didn't you prototype every function?</strong></p>

<pre><code>//START OF PROTOTYPE
void ViewPurchases(vector&lt;Finance&gt;&amp; buyers, char&amp; cOption, bool&amp; bExit);
//END OF PROTOTYPE
</code></pre>

<p><strong>Comments that simply repeat information given by the function's name are less than useful and should be removed.</strong></p>

<pre><code>//1. This displays the car menu items.
void display_menu(vector&lt;cCar&gt;&amp; car_list)
{
    //...
</code></pre>

<p><strong>Again, consistency. This function and its arguments use camalCase and C-style lower-case with underscores. Other functions use just C-style. Pick one.</strong></p>

<pre><code>//This procedure proccesses the user's selection and all information regarding price and name of car are then transferred to transaction variables.
void selectedCar(vector&lt;cCar&gt;&amp; car_list, string&amp; sNameOfChosenCar, double&amp; dCostOfChosenCar)
{
    //...
</code></pre>

<p><strong>The following comments are unhelpful as they add no more information than what the function name already provides.</strong></p>

<pre><code>//This procedure gets the user's deposit.
void DepositMoney(double&amp; dDepositAmount)
{
    //...

//This function calculates the amount of money the user has to pay after deposit, added tax and charge percentage of 10%
double TotalLeftToPay(double iFinanceLength, double dDepositAmount, double dCostOfChosenCar)
{
    //...

//This calculates monthly payments.
double MonthlyPayments(double dTotalLeftToPay, int iFinanceLength)
{
    //...

//This asks the user whether they'd like to restart the application.
void RestartOptions(char&amp; cOption, bool&amp; bExit, vector&lt;Finance&gt;&amp; buyers)
{
    //...

//This string function returns either year or years (plural)
string  YearOrYears(int iFinanceLength)
{
    return (iFinanceLength &gt; 1) ? "years" : "year";
}
//...

//This displays receipt of the user's transaction.
void Receipt(const string&amp; sUserName, const int&amp; iFinanceLength, const double&amp; dDepositAmount, char cOption, bool&amp; bExit, const string&amp; sNameOfChosenCar, const double&amp; dCostOfChosenCar, vector&lt;Finance&gt;&amp; buyers)
{
    //...

//This displays receipt of the user's transaction.
void ViewPurchases(vector&lt;Finance&gt;&amp; buyers, char&amp; cOption, bool&amp; bExit)
{
    //...

//This asks the user whether they're happy with the options of they've chosen.
void AcceptDeclineOptions(string&amp; sUserName, int&amp; iFinanceLength, double&amp; dDepositAmount, bool&amp; bExit, string&amp; sNameOfChosenCar, double&amp; dCostOfChosenCar, vector&lt;Finance&gt;&amp; buyers)
{
    //...
</code></pre>

<p><strong>Personally, main should be the first function after the prototype list and every other function should appear after it in logical order as they are first called.</strong></p>

<pre><code>int main()
{
</code></pre>

<p><strong>Don't declare all your variables at the top of the function. Declare them closest to first use as possible.</strong></p>

<p><strong>Systems Hungarian notation is outdated.</strong></p>

<pre><code>    bool bExit = false;
    int iFinanceLength = 0;
    double dDepositAmount = 0;
    string sNameOfChosenCar = "";
    double dCostOfChosenCar = 0;
</code></pre>

<p><strong>Modern compilers are smart. It's better to return the <code>car_list</code> than  fill it via a pass-by-reference.</strong></p>

<pre><code>    vector&lt;cCar&gt;car_list;
    CarDatabase(car_list);
</code></pre>

<p><strong><code>car_purchases</code> isn't used at all. Remove it.</strong></p>

<pre><code>    vector&lt;cCar&gt;car_purchases;
</code></pre>

<p><strong><code>buyers</code> is only ever used internally. Consider moving it closer to its intended scope or, for such a small program, making it a <code>static</code> global.</strong></p>

<pre><code>    vector&lt;Finance&gt;buyers;
    //...
</code></pre>
    </div>