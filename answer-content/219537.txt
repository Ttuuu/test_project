<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>In case if you wanna improve only the <code>validate_time_zone</code> method:</p>

<p>Performance wise I don't see anything sinister in your implementation.</p>

<p>I assume the <code>states</code> table has a direct <code>time_zone</code> field. If so, then we can use the <code>pluck</code> method to avoid instantiation ActiveRecord objects.</p>

<p><code>Array.uniq</code> returns a new array by removing duplicate values. The idea is nobel but it means it will use more memory and will loop over the time zones array which will happen anyway in case of <code>include?</code> </p>

<p>On the other hand nowadays in software development the real cost is more in maintenance rather than in CPU cycles.</p>

<p>With this in mind, how about the following refactor?</p>

<pre><code>class User
  validates_presence_of :time_zone

  validate :validate_time_zone

  def validate_time_zone
    # using guard clause and let the built in validation do the presence validation
    return unless org.present? &amp;&amp; time_zone.present?

    # A temp variable is a code smell, but here we have an underlying concept
    # that is better to be named
    allowed_time_zones = org.country.states.pluck(:time_zone)

    # tip: you can use the .exclude? API if you don't want to a use guard clause
    return if allowed_time_zones.include?(time_zone)

    errors.add(:time_zone, :invalid)
  end
end
</code></pre>
    </div>