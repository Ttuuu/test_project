<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First of all, it's a good thing that you asked, only a few do care about handling errors. </p>

<p>Unfortunately, the way you choose is frowned upon, in both cases. Luckily, I've got a couple articles that cover your question in every possible detail:</p>

<ul>
<li>a generalized one, <a href="https://phpdelusions.net/articles/error_reporting" rel="nofollow noreferrer">PHP error reportig</a> will show you the right approach for handling errors in general</li>
<li>a direct answer to your question, <a href="https://phpdelusions.net/pdo_examples/connect_to_mysql" rel="nofollow noreferrer">How to connect to MySQL using PDO</a> would provide a ready-made connection code</li>
</ul>

<h3>Error handling</h3>

<p>The idea here is that a module or a part of code should never treat errors by itself. This function should be delegated to the application level. Your database interaction code should only <em>raise an error</em>, which would be handled according to the site-wide configuration elsewhere. </p>

<p>So your goal with PDO is just to make it throw an error (in the form of Exception). As to how it will be handled should be defined elsewhere. It will make your error reporting uniform and both programmer- and user-friendly. </p>

<h3>Connection</h3>

<p>Another issue is a function. </p>

<blockquote>
  <p>I use it as a function and call it always when I need a database connection. </p>
</blockquote>

<p>If you call it more than once, it will create many connections to the database server and this number is not infinite. A connection should be made only once. So in its current form this function is rather useless. Given you have to create a <code>$pdo</code> variable only once, an include file would serve as well.</p>

<p>So let's create it</p>

<pre><code>$host = '127.0.0.1';
$db   = 'test';
$user = 'root';
$pass = '';
$charset = 'utf8mb4';

$options = [
    \PDO::ATTR_ERRMODE            =&gt; \PDO::ERRMODE_EXCEPTION,
    \PDO::ATTR_DEFAULT_FETCH_MODE =&gt; \PDO::FETCH_ASSOC,
    \PDO::ATTR_EMULATE_PREPARES   =&gt; false,
];
$dsn = "mysql:host=$host;dbname=$db;charset=$charset";
try {
     $pdo = new \PDO($dsn, $user, $pass, $options);
} catch (\PDOException $e) {
     throw new \PDOException($e-&gt;getMessage(), (int)$e-&gt;getCode());
}
</code></pre>

<h3>Handling query errors.</h3>

<p>Like it was said above, do not handle errors in your code. We already configured PDO to throw exceptions in case of error, that's all. So just write your query execution code right away, without any conditions:</p>

<pre><code>$stmt = $pdo-&gt;prepare("SELECT a FROM b WHERE c = :c")) {
$stmt-&gt;execute(array(':c' =&gt; $c));
$result = $stmt-&gt;fetch();
echo 'All fine.';
</code></pre>
    </div>