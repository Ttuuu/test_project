<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Avoid unnecessary memory allocations.</h1>

<p>Memory allocations take time, significant time if you do them in your inner most loop.</p>

<p>For starters, change:</p>

<pre><code>vector&lt;vector&lt;int&gt;&gt; output;
</code></pre>

<p>to:</p>

<pre><code>vector&lt;std::tuple&lt;int, int, int&gt;&gt; output;
</code></pre>

<p>This converts your putput vector from "A vector of pointers to fixed size dynamic elements" (note the oxymoron, fixed size dynamic elements, there's your problem) to "A vector of fixed size elements". Not only will you be avoiding lots and lots of memory allocations but you will also improve your cache performance by miles because your entire output vector is now contiguous and cache friendly.</p>

<p>Then change:</p>

<pre><code>for(int i=0; i&lt;nums.size();i++){
    for(auto x:pairs){
        if(x.first!=nums.at(i) &amp;&amp; x.second!=nums.at(i)){
            if(x.first+x.second+nums.at(i)==0){
                vector&lt;int&gt; curr;
                curr.push_back(x.first);
                curr.push_back(x.second);
                curr.push_back(nums.at(i));
                sort(curr.begin(),curr.end());
                output.push_back(curr);
            }
        }
    }
}
</code></pre>

<p>to:</p>

<pre><code>for(int i=0; i&lt;nums.size();i++){
    for(auto&amp; x:pairs){
        if(x.first!=nums.at(i) &amp;&amp; x.second!=nums.at(i)){
            if(x.first+x.second+nums.at(i)==0){
                int a = x.first;
                int b = x.second;
                int c = nums.at(i);
                // You could write out the if-else tree to 
                // possibly optimise this if your compiler doesn't 
                // already do that.
                if(a &gt; b)
                    swap(a,b);
                if(a &gt; c)
                    swap(a,c);
                if(b &gt; c)
                    swap(b,c);
                output.emplace_back(a,b,c);
            }
        }
    }
}
</code></pre>

<h1>Return value</h1>

<p>You are returning a vector by value, a naive compiler may cause the entire vector contents to be copied and if you have a vector of vectors, this is really bad. However most modern compilers perform <a href="https://en.wikipedia.org/wiki/Return_value_optimization" rel="noreferrer">Return Value Optimization(RVO)</a>. However if you don't want to be at the mercy of a possibly dodgy compiler, just pass a reference to a vector where you want to store the results as an argument to the function.</p>

<h1>Time complexity</h1>

<p>So you do this:</p>

<pre><code>for(int i=0; i&lt;nums.size();i++){
    for(int j=i+1; j&lt;nums.size();j++){
            pairs.push_back(make_pair(nums.at(i),nums.at(j)));
</code></pre>

<p>which means that <code>pairs.size() == n^2</code>. Then proceed with sorting:</p>

<pre><code>sort(pairs.begin(),pairs.end());
</code></pre>

<p>Because you are sorting <code>m = n^2</code> entries, the time complexity becomes <code>O(m*log(m)) = O(n^2*log(n))</code>.</p>

<p>But then you do this...</p>

<pre><code>for(int i=0; i&lt;nums.size();i++){
    for(auto x:pairs){
        if(x.first!=nums.at(i) &amp;&amp; x.second!=nums.at(i)){
</code></pre>

<p>Okay so this becomes <code>O(n*n^2)</code>. Note that <code>O(n^2)</code> is easily achievable by other algorithms.</p>

<p>This is why you get TLE.</p>

<h1>Better algorithm</h1>

<p>We can easily reach <code>O(n^2)</code> time complexity.</p>

<p>We need to find all <code>a</code>, <code>b</code>, <code>c</code> such that <code>a+b+c=0</code>. Note that this is equivalent to <code>c = -(a+b)</code>. Hence if we can check if <code>c</code> exists in the input in <code>O(1)</code> time, then we just need to try each pair of <code>a</code> and <code>b</code> and see if a matching <code>c</code> exists. Since there are <code>O(n^2)</code> pairs we have <code>O(n^2*1)</code> time.</p>

<p>A hash set provides the necessary <code>O(1)</code> check if <code>c</code> is present in the input. </p>

<p>(I'm not going to handle the three zeros, you can figure that out). </p>

<p>Pseudocode:</p>

<pre><code>unordered_map&lt;int&gt; hashset;
for(auto&amp; x : input){ hashset.put(x); }

for(int i = 0; i &lt; input.size(); ++i){ 
    for(int j = i+1; j &lt; input.size(); j++){
        auto c = -(input[i] + input[j]);
        if(hashset.contains(c)){
            output.addTuple(input[i], input[j], - c);
        }
    }
}
</code></pre>
    </div>