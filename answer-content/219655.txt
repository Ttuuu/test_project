<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>General remarks</h1>

<p>Here are some general remarks that could make your code look a little cleaner :</p>

<ul>
<li>Avoid using <code>;</code> at the end of an instruction unless you have to put multiple instructions in the same line.</li>
<li>Document the functions properly: The description of the <code>complition</code> parameter of <code>splitToFitSize</code> isn't well formatted.</li>
<li>The correct spelling of <code>complition</code> is <code>completion</code>.</li>
<li>This is subjective and probably nitpicky: Put a space only where needed, one after the closing curly brace of a scope: <code>} else</code>, and none before a punctuation sign:  <code>(size: size, font: font)</code>.</li>
</ul>

<h1>Catching the culprits</h1>

<p><a href="https://i.stack.imgur.com/BlSMr.jpg" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/BlSMr.jpg" alt="Dalton Cousins"></a></p>

<p>Sources of slow code:</p>

<ul>
<li><code>" \(content)"</code>: String interpolation is slow as previously stated <a href="https://codereview.stackexchange.com/a/213879/49921">here</a>.</li>
<li><code>self.components(separatedBy: .whitespaces)</code>: This has both a time and space <a href="https://developer.apple.com/documentation/foundation/nsstring/1413214-components" rel="nofollow noreferrer">complexity</a> of O(<em>n</em>). Better iterate over the <em>story</em> with a <code>String.Index</code>.</li>
<li><code>DispatchQueue.global(qos: .background)</code> : This is the <a href="https://developer.apple.com/documentation/dispatch/dispatchqos/qosclass/background" rel="nofollow noreferrer">lowest priority</a> you could give to code and it wastes time by switching from the main thread to a background one, and back.</li>
<li><p><code>contents.removeFirst()</code>: This is called in multiple places and repeatedly. Each call is O(<em>n</em>) since all the elements of the <code>contents</code> array shifted (Have a look <a href="https://developer.apple.com/documentation/swift/array/2886730-removefirst" rel="nofollow noreferrer">here</a>). This means that this algotithm shifts the elements of the <code>contents</code> array n + (n-1) + (n-2) + ... + 1 times. Knowing that :
<span class="math-container">$$n + (n-1) + (n-2) + ... + 1 = \frac{n(n+1)}{2}$$</span></p>

<p>it makes this algorithm O(<em>n<sup>2</sup></em>), with <em>n</em> being the number of elements in <code>contents</code>. To circumvent this use an index that traverses the array.</p></li>
</ul>

<hr>

<h2>Alternative implementation</h2>

<p>Here is an alternative solution to split a string into a given size using a certain font :</p>

<pre><code>extension String {

    static let blanks: [Character] = [" ", "\n", "\t"]

    func splitToFit (size: CGSize, using font: UIFont) -&gt; [String] {
        var output: [String] = []
        var (fitted, remaining) = fit(self, in: size, using: font)
        var lastCount = fitted.count
        output.append(fitted)

        while remaining != "" {
            (fitted, remaining) = fit(remaining,
                                      in: size,
                                      using: font,
                                      lastCount: lastCount)
            lastCount = fitted.count
            output.append(fitted)
        }

        //Trim white spaces if needed
        //return output.map { $0.trimmingCharacters(in: .whitespacesAndNewlines)}
        return output
    }

    private func fit(
        _ str: String,
        in size: CGSize,
        using font: UIFont,
        lastCount: Int = 0) -&gt; (String, String) {

        if !str.isTruncated(in: size, using: font) {
            return (str, "")
        }

        var low = 0
        var high = str.count - 1
        let lastValidIndex = high
        var substr = ""
        let step = lastCount/10  //Could be adjusted


        if lastCount != 0 {
            high = min(lastCount, lastValidIndex)
            while !str[0..&lt;high].isTruncated(in: size, using: font) {
                low = high
                high = min(high + step, lastValidIndex)
            }
        }

        while low &lt; high - 1 {
            let mid = low + (high - low)/2 
            //Or more efficiently 
            //let mid = Int((UInt(low) + UInt(high)) &gt;&gt; 1)
            //Have a look here https://ai.googleblog.com/2006/06/extra-extra-read-all-about-it-nearly.html

            substr = str[0..&lt;mid]

            let substrTruncated = substr.isTruncated(in: size, using: font)

            if substrTruncated {
                high = mid
            } else  {
                low = mid
            }
        }

        substr = str[0..&lt;low]

        while !String.blanks.contains(substr.last!) {
            substr.removeLast()
            low -= 1
        }

        let remains = str[low..&lt;str.count]
        return (substr, remains)
    }
}
</code></pre>

<p>It calls these other extensions :</p>

<pre><code>extension String {
    func isTruncated(in size: CGSize, using font: UIFont) -&gt; Bool {
        let textSize = (self as NSString)
            .boundingRect(with: CGSize(width: size.width,
                                       height: .greatestFiniteMagnitude),
                          options: .usesLineFragmentOrigin,
                          attributes: [.font: font],
                          context: nil).size

        return ceil(textSize.height) &gt; size.height
    }

    subscript (range: Range&lt;Int&gt;) -&gt; String {
        let startIndex = self.index(self.startIndex, offsetBy: range.lowerBound)
        let endIndex = self.index(self.startIndex, offsetBy: range.upperBound)
        let range = startIndex..&lt;endIndex

        return String(self[range])
    }
}
</code></pre>

<p>This code is inspired by this <a href="https://github.com/nishanthooda/FitMyLabel/blob/master/FitMyLabel/FitMyLabel.swift" rel="nofollow noreferrer">library</a> but <strong>twice</strong> as fast ðŸš€. Further improvements are possible.</p>

<p>It was tested using the following code:</p>

<pre><code>class ViewController: UIViewController, UIScrollViewDelegate {

    var scrollView: UIScrollView! {
        didSet{
            scrollView.delegate = self
        }
    }

    private let font = UIFont.systemFont(ofSize: 17)

    override func viewDidLoad() {
        super.viewDidLoad()

        let width = view.frame.width
        let height = view.frame.height
        let labelSize = CGSize(width: width - 40.0, height: height - 60.0)
        //Split the story here
        //let start = Date()
        let strings = story.splitToFit(size: labelSize, using: font)
        //let end = Date()
        //print("time =", end.timeIntervalSince(start))

        let scrollViewFrame = CGRect(x: 0,
                                     y: 0,
                                     width: width,
                                     height: height)

        scrollView = UIScrollView(frame: scrollViewFrame)
        scrollView.contentSize = CGSize(width: width * CGFloat(strings.count), height: height)
        scrollView.isPagingEnabled = true

        let colors: [UIColor] = [.red, .green, .blue]

        for i in 0 ..&lt; strings.count {
            let label = UILabel()
            label.numberOfLines = 0
            label.frame = CGRect(origin: CGPoint(x: width * CGFloat(i) + 20.0,
                                                 y: 40.0),
                                 size: labelSize)
            label.backgroundColor = colors[i % 3]
            label.font = font
            label.text = strings[i]
            label.translatesAutoresizingMaskIntoConstraints = false
            scrollView.addSubview(label)
        }

        view.addSubview(scrollView)
    }
}
</code></pre>

<p>with <code>story</code> being a 10-paragraph string, 1104 total words, 7402 total characters, generated on <a href="http://lorem-ipsum.perbang.dk/" rel="nofollow noreferrer">this website</a>, it takes <strong>54ms</strong> on my local machine to split the story.</p>

<p>If the story is too long, and to avoid blocking the main thread I would recommend adding subviews asynchronously to the <code>UIScrollView</code> as the <code>fitted</code> strings are calculated one by one.</p>
    </div>