<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Your C++ is very C-like.</strong> I would start by taking advantage of C++:</p>

<ul>
<li><p>You will almost always want to use <code>std::vector</code> instead of arrays.</p>

<p>For example:</p>

<pre><code>std::vector&lt;Player&gt; players;
players.reserve(32);
</code></pre>

<p>This will create a vector large enough to hold 32 <code>Player</code>s. If you ever need room for more, the vector will grow automatically when you add more players. By accessing elements using <code>players.at(index)</code>, you will get range-checking.</p>

<p>To get the number of elements in a <code>vector</code>, you can use <code>players.size()</code> instead of using the <code>sizeof</code> array division hack.</p></li>
<li><p>Your <code>struct</code> typedef-ing is a common idiom in C, because in C you need to qualify <code>struct</code> identifiers with <code>struct</code> in order to use them: <code>void foo(struct Bacon* bacon)</code>. In C++ you don't have to do this. I would therefore change your definition of <code>Player</code> to:</p>

<pre><code>class Player {
public:
    // contents
};
</code></pre></li>
<li><p>The variables in <code>Player</code> should normally be encapsulated. This means they should be defined in the <code>private</code> section of the class (above <code>public:</code>). If you need access to the variables from other functions or classes, then you can provide accessor functions:</p>

<pre><code>class Player {
    int** basePointer;
public:
    int** getBasePointer() const { return basePointer; }
};
</code></pre></li>
<li><p>If you really want to use your <code>struct</code> as <a href="http://en.wikipedia.org/wiki/Plain_Old_Data_Structures" rel="nofollow noreferrer">POD</a>, I recommend making the members <code>const</code> and making a copy every time your need to. This isn't a <em>must</em>, but reduces the chances of unintentional changes.</p></li>
<li><p>In short, your class (a <code>struct</code> is a class) could and probably should be designed like a <em>class</em>, and not like POD.</p></li>
<li><p>Like @Jamal points out, you can use <code>enum</code> for your offsets:</p>

<pre><code>enum Offsets { playerBaseXOffset = 0x34, playerBaseYOffset = 0x38 /* ... */ };
</code></pre>

<p>If you are expecting to have more offsets of a kind later, use a <code>std::vector</code> instead:</p>

<pre><code>std::vector&lt;std::size_t&gt; playerBaseXOffsets{ 0x34 }; // C++11 syntax.
</code></pre>

<blockquote>
  <p><strong>Note the <code>{</code> and <code>}</code> in the last example. <em>Using</em> <code>(</code> <em>and</em> <code>)</code> <em>instead compiles, but means something entirely different!</em></strong> (It will default-construct 0x34 = 52 objects.)</p>
</blockquote></li>
<li><p>I'm not sure if all your pointer fiddling is really necessary. If it's not, I recommend you avoid it. It is error prone, and some of the potential errors can be really hard to find. You risk forgetting to dereference a pointer if you're lucky; you get undefined behavior from <a href="https://stackoverflow.com/questions/98650/what-is-the-strict-aliasing-rule">violating the strict aliasing rule</a> if you're not.</p></li>
<li><p>Use symbolic, rather than literal, constants. For example:</p>

<pre><code>const std::size_t player_one_base_offset = 0xDF73C;
players[0] = Player((int**) ((UINT) GetModuleHandleW(0) + player_one_base_offset));
</code></pre>

<p>I'm sure you agree <code>player_one_base_offset</code> is much more readable and understandable than <code>0xDF73C</code>.</p></li>
<li><p>I would normally recommend C++-style <code>static_cast&lt;type&gt;(object)</code> instead of your C-style <code>(type)object</code> casting, but in your case I think it would just reduce readability even more without giving much benefit.</p></li>
</ul>

<p>And finally, not directly code related: It's either <em>Pythagoras' theorem</em>, or the <em>Pythagorean theorem</em>.</p>
    </div>