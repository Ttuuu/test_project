<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Declare the Variables When They are Needed</strong><br>
The first five lines of the function <code>memmem()</code> are:</p>

<pre><code>    const unsigned char *haystack = (const unsigned char *) haystack_start;
    const unsigned char *needle = (const unsigned char *) needle_start;
    const unsigned char *h = NULL;
    const unsigned char *n = NULL;
    size_t x = needle_len;
</code></pre>

<p>Since x, h and n are loop variants, it would be better to delcare them where their values are assigned:</p>

<pre><code>    for (; *haystack &amp;&amp; haystack_len--; haystack++) {
        size_t x = needle_len;
        unsigned char *n = needle;
        unsigned char *h = haystack;
</code></pre>

<p>The pointers n and h are variable, they will change inside the loop, the characters won't change. </p>

<p>The variables haystack and needle start aren't needed utill just before the loop, because they also are only used in the loop..</p>

<pre><code>    unsigned char *haystack = (unsigned char *) haystack_start;
    unsigned char *needle = (unsigned char *) needle_start;

    for (; *haystack &amp;&amp; haystack_len--; haystack++) {
        size_t x = needle_len;
        unsigned char *n = needle;
        unsigned char *h = haystack;
</code></pre>

<p><strong>Simplify the Code</strong><br>
There is no reason to stay in the function or the outer loop once <code>haystack_len</code> is less than <code>needle_len</code>.</p>

<pre><code>        if (haystack_len &lt; needle_len)
        {
            return NULL;
        }
</code></pre>

<p><strong>Make Maintenance Easier</strong>
While the following is perfectly legitimate, it's not the best programming practice, if someone needs to add a second statement to the THEN clause, it might be better to add braces around all THEN and ELSE clauses:</p>

<pre><code>    if (haystack_len &lt; needle_len)
        return NULL;
</code></pre>

<p>would be better as:</p>

<pre><code>    if (haystack_len &lt; needle_len)
    {
        return NULL;
    }
</code></pre>

<p><strong>One Possible Optimization</strong><br>
Most computers have a decrement and test opcode, the for loop</p>

<pre><code>        for (; x ; h++ , n++) {
            x--;

            if (*h != *n)
                break;

            if (x == 0)
                return (void *)haystack;
        }
</code></pre>

<p>would probably be faster this way:</p>

<pre><code>        for (x = needle_len + 1; --x ; )
        {
            if (*h++ != *n++)
                break;
        }
        if (x == 0)
        {
            return (void *)haystack;
        }
</code></pre>

<p>The variable x needs to be one greater than the length because --x is tested at the top of the loop.</p>
    </div>