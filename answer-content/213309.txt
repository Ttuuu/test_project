<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You can check if the <code>String</code> is empty with <code>!str</code> instead of <code>strA.length === 0</code>, </p>

<p><code>console.log(''); // false</code></p>

<p>i think <code>haveSameLength</code> and <code>isSame</code> are extras, you can write <code>srtA.length === strB.length</code> and it would still be readable,</p>

<p>you can get the first letter with a simpler <code>strA[0]</code> instead of <code>strA.substring(0, 1);</code></p>

<blockquote>
  <p>Which one is more readable and easier to understand for you?</p>
</blockquote>

<p>a loop is easier to read and understand than a recursive function, </p>

<p>But the hole approach seems like it can be simpler using a <code>for</code> loop, <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some" rel="nofollow noreferrer">Array.some()</a> , here's what i would suggest : </p>

<p>You can generate an array of combinations moving the letters one index at a time,
for a string <code>abc</code> you would have <code>['abc, bca', 'cba']</code>, see if one of the resulting array entries euqals the second string :</p>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>const isSameAfterShifting = (str1, str2) =&gt; {
  // check if the strings are empty or has different lengths
  if (!str1 || !str2 || str1.length !== str2.length) return false;

  // check if the strings are the same
  if (str1 === str2) return true;

  // generate the array 
  let combos = [];
  for (let i = 0; i &lt; str1.length; i++) {
    let c = str1.slice(i) + str1.slice(0, i);
    combos.push(c);
  }

  // for a string 'abc'
  // combos = ['abc', bca', 'cab']

  // check if the array has one of its entries equal to the second string  
  return combos.some(s =&gt; s === str2);
}

console.log( isSameAfterShifting('abc', 'cab') );
console.log( isSameAfterShifting('abc', 'cabaaa') );
console.log( isSameAfterShifting('abc', 'bac') );</code></pre>
</div>
</div>


<p>you can replace the <code>for</code> loop with <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from" rel="nofollow noreferrer">Array.from()</a></p>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>const isSameAfterShifting = (str1, str2) =&gt; {
  // check if the strings are empty or has different lengths
  if (!str1 || !str2 || str1.length !== str2.length) return false;

  // check if the strings are the same
  if (str1 === str2) return true;

  // generate the array
  let combos = Array.from({
    length: str1.length
  }, (_, i) =&gt; str1.slice(i) + str1.slice(0, i));

  // for a string 'abc'
  // combos = ['abc', bca', 'cab']

  // check if the array has one of its entries equal to the second string
  return combos.some(s =&gt; s === str2);
};

console.log(isSameAfterShifting("abc", "cab"));
console.log(isSameAfterShifting("abc", "cabaaa"));
console.log(isSameAfterShifting("abc", "bac"));</code></pre>
</div>
</div>

    </div>