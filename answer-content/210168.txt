<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Although not familiar with MRV and degree heuristics, i can make some remarks about the Python code style:</p>

<p><strong>Loops can be made more Pythonic</strong></p>

<pre><code>for i in range(len(self.adjacencyList[initialNode])):
    childNode = self.adjacencyList[initialNode][i]
</code></pre>

<p>should be written as: </p>

<pre><code>for childNode in self.adjacencyList[initialNode]:
</code></pre>

<p><strong>Conditionals</strong></p>

<pre><code>if(self.isSafe(childNode, c) == True):
</code></pre>

<p>should be</p>

<pre><code>if self.isSafe(childNode, c):
</code></pre>

<p><strong>method <code>isSafe</code></strong></p>

<pre><code>def isSafe(self, node, c):
    for i in range(len(self.adjacencyList[node])):
        if(self.color[self.adjacencyList[node][i]] == c):
            return False
    return True
</code></pre>

<p>could be:</p>

<pre><code>def isSafe(self, node, c):
    for adjacency in self.adjacencyList[node]:
        if self.color[adjacency] == c:
            return False
    return True
</code></pre>

<p>or even, more Pythonic, but a bit cryptic:</p>

<pre><code>def isSafe(self, node, c):
    # return True if all node neighbours colors differ from c
    return all([self.color[adj] != c for adj in self.adjacencyList[node]])        
</code></pre>

<p><strong>Data structure</strong></p>

<p>The repetition of the keys in the <code>adjacencyList</code> and <code>color</code>
suggest a data structure like the following, although this requires a 
lot changes in the existing code:</p>

<pre><code>nodes = {
    'WA' : {'color' : 0, 'neighbours' : ['NT', 'SA']},
    'NT' : {'color' : 0, 'neighbours' : ['WA', 'SA', 'Q']},
    'SA' : {'color' : 0, 'neighbours' : ['WA', 'NT', 'Q', 'NSW', 'V']},
    'Q'  : {'color' : 0, 'neighbours' : ['NT', 'SA', 'NSW']},
    'NSW': {'color' : 0, 'neighbours' : ['SA', 'Q', 'V']},
    'V'  : {'color' : 0, 'neighbours' : ['SA', 'T', 'NSW']},
    'T'  : {'color' : 0, 'neighbours' : ['V']},
}    
</code></pre>

<p><strong>Others:</strong></p>

<ul>
<li><code>self.nodeSequence</code> is not used</li>
<li><code>self.totalNodes</code> is not used</li>
<li><code>minCount = 0</code> was edited out in <code>getNodeWithMRV</code> but should be there, or <code>if (countColor &lt; minCount)</code> should be <code>if (countColor &lt; 0)</code></li>
<li><code>pickNode</code> is called only once with a constant argument <code>''</code>, and can therefor be made simpler </li>
<li><code>getNodeWithMRV</code> will always return <code>''</code> because <code>countColor</code> will never be smaller than 0.</li>
<li>the <code>;</code> at the end of <code>adjacencyList = ...</code> and <code>color = ...</code> an origin in another language :-) </li>
</ul>
    </div>