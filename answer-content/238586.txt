<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<pre><code>Stack* helper (char val, int x, int y)
  {
</code></pre>

<p>Your indentation and whitespace are kind of funky; I recommend looking at what some popular open-source code on GitHub does, and trying to copy them as closely as possible. Or, just run your code through a formatter such as <code>clang-format</code>.</p>

<pre><code>Stack *helper(char val, int x, int y)
{
</code></pre>

<p>This function is only ever used in one place, so why do you have it? Right now it's kind of unsafe, because <code>helper</code> returns a <code>Stack *</code> which:</p>

<ul>
<li><p>must be freed by the caller to avoid memory leaks, and</p></li>
<li><p>has uninitialized garbage in its <code>next</code> field.</p></li>
</ul>

<p>If you inlined it into <code>push</code>, you'd have a complete unit of work, without either of those dangerous sharp edges.</p>

<hr>

<p>Look into proper library organization. You should have a <code>.h</code> file that defines <code>struct Stack</code> and declares <code>push</code> and <code>pop</code>, and a <code>.c</code> file with the implementations.</p>

<p>You should probably name the functions something like <code>stack_push</code> and <code>stack_pop</code>, since <code>push</code> and <code>pop</code> are likely to be common names; e.g. you might later want to write a <code>struct Queue</code> with a <code>queue_push</code> and <code>queue_pop</code>. This kind of "manual namespacing" is common in C libraries.</p>

<hr>

<p>Of course <code>push</code> shouldn't call <code>printf</code> (there's no "I" in "TEAM" and there's no "printf" in "push data onto a stack").</p>

<p>In <code>pop</code>'s argument list, you use <code>w</code> and <code>h</code> where you meant <code>x</code> and <code>y</code>.</p>

<p><code>pop</code> has interesting behavior on an empty stack: it just returns without initializing <code>*x</code> and <code>*y</code>. This is a problem for the caller, because the caller doesn't have any indication that anything went wrong! You should probably make <code>pop</code> return a <code>bool</code> to indicate whether it was successful.</p>

<hr>

<p>Compare a pointer for null with <code>(top == NULL)</code>, not <code>!top</code>. Clarity counts!</p>

<hr>

<p>Here's an idea if you want to push yourself harder: Right now you're passing <code>x</code>, <code>y</code>, and <code>value</code> as individual arguments to <code>push</code>, and retrieving them individually from <code>pop</code>. Package them up into a struct!</p>

<p>Here's the struct definitions and function declarations for a different stack implementation. Can you see how to implement these functions?</p>

<pre><code>struct Data { int x, y, value; };

struct DataStack { struct Data data; struct DataStack *next; }

struct DataStack *datastack_push(struct DataStack *, struct Data);
struct DataStack *datastack_pop(struct DataStack *);
struct Data datastack_top(const struct DataStack *);
bool datastack_empty(const struct DataStack *);
</code></pre>
    </div>