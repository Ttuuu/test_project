<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The real power of OOP is not that you can use classes as namespaces to bundle functions that belong together. The main power is polymorphism, meaning that you can inherit from classes and use subclasses interchangeably with their parent classes. This means that you want to be able to do something like this:</p>
<pre><code>class UnitaryMatrix(Matrix):
    ...

a = Matrix(...)
u = UnitaryMatrix(...)
a + u
</code></pre>
<p>However, this is currently not possible with your class, because you are using a too restrictive check for the type of classes in your operators. Instead of</p>
<pre><code>assert type(other) == Matrix, f"Matrix cannot be added by {type(other)}"
</code></pre>
<p>simply use</p>
<pre><code>assert isinstance(other, Matrix), f"Matrix cannot be added by {type(other)}"
</code></pre>
<p><code>isinstance</code> returns true as long as the object is of that type, or a type derived from it. In other words, a <code>UnitaryMatrix</code> is also a <code>Matrix</code> and can be used wherever a <code>Matrix</code> is expected.</p>
<hr>
<p>I would re-think how you construct your matrix. You want to make the default usecase as simple as possible. I would want to use your class like this:</p>
<pre><code>m = Matrix([[1, 2], [3, 4]])
</code></pre>
<p>Without having to specify the dimensions, since they are obvious from the input. Other ways to construct the matrix should be <a href="https://www.geeksforgeeks.org/classmethod-in-python/" rel="nofollow noreferrer">class methods</a>:</p>
<pre><code>m2 = Matrix.from_flattened([1, 2, 3, 4], shape=(2, 2))
m3 = Matrix.zeros(2, 2)
</code></pre>
<p>Which you can implement like this:</p>
<pre><code>class Matrix:
    def __init__(self, elements):
        self.matrix = elements
        self.shape = len(elements), len(elements[0])
        ...

    @classmethod
    def from_flattened(self, elements, shape):
        assert len(shape) == 2
        assert len(elements) == shape[0] * shape[1]
        return Matrix([elements[i*shape[0]:(i+1)*shape[0]]
                       for i in range(shape[0])])

    @classmethod
    def zeros(self, *shape):
        assert len(shape) == 2
        return Matrix([[0] * shape[1] for _ in range(shape[0])])
</code></pre>
<p>Note that I renamed <code>dimension</code> to <code>shape</code>, which is what e.g. <code>numpy</code> uses. For me, <code>dimension</code> should be <code>len(shape)</code>, i.e always two in the case of a matrix.</p>
<p>Depending on your usecases, defining  a <code>filled</code> and a <code>ones</code> classmethod might also make sense:</p>
<pre><code>    @classmethod
    def filled(self, value, *shape):
        assert len(shape) == 2
        return Matrix([[value] * shape[1] for _ in range(shape[0])])

    @classmethod
    def zeros(self, *shape):
        return Matrix.filled(0, *shape)

    @classmethod
    def ones(self, *shape):
        return Matrix.filled(1, *shape)
</code></pre>
<p>Using class methods also allows you to define other special matrices, like the identity matrix:</p>
<pre><code>    @classmethod
    def identity(self, *shape):
        m = Matrix.zeros(*shape)
        for i in range(m.shape[0]):
            m.matrix[i][i] = 1
        return m
</code></pre>

<pre><code>&gt;&gt;&gt; Matrix.identity(3, 3)
Matrix([[1, 0, 0], [0, 1, 0], [0, 0, 1]])
</code></pre>
<hr>
<p>Using <code>elements == None</code> is not the right way to do it. Use <code>elements is None</code>, as recommended by Python's official style-guide, <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">PEP8</a>.</p>
<hr>
<p>To ease using your class in an interactive terminal, you should also implement <code>__repr__</code>, which is used as a representation. By convention, the output should be able to construct your class again, i.e. <code>eval(repr(m)) == m</code>. In this case this is rather easy:</p>
<pre><code>class Matrix:
    ...

    def __repr__(self):
        return f"Matrix({self.matrix!r})"
</code></pre>

<pre><code>&gt;&gt;&gt; Matrix.zeros(2, 2)
Matrix([[0, 0], [0, 0]])
</code></pre>
<hr>
<p>Instead of using <code>*</code> both for scalar and matrix multiplication, you could implement the (normally unused) operator <code>@</code>, which is called matrix multiplication. In order to do so, simply implement the dunder method <code>__matmul__</code>. Even if you want <code>*</code> to do both things, I would implement <code>__matmul__</code> anyway and just use <code>self @ other</code> in the definition of <code>__mul__</code>.</p>
<hr>
<p>Use the built-in <code>sum</code> if you sum up things in a loop:</p>
<pre><code>determinant = sum((-1)**c * matrix[0][c] * self.determinant_helper(self.get_minor(matrix, 0, c))
                  for c in range(len(matrix)))
</code></pre>
<p>You can also iterate over the entries and indices at the same time using <code>enumerate</code>:</p>
<pre><code>determinant = sum((-1)**i * m_0i * self.determinant_helper(self.get_minor(matrix, 0, i))
                  for i, m_0i in enumerate(matrix[0]))
</code></pre>
<hr>
<p>I would consider making the <code>determinant</code> method a property. This allows you to easily make it cached in the future:</p>
<pre><code>class Matrix:
    ...

    @property
    def determinant(self):
        """
        finds the determinant by using the helper function to supply the current matrix of the object
        changes integer floats to integers, and so on
        """
        det = self.determinant_helper(self.matrix)
        return int(det) if det.is_integer() else det

    def inverse(self):
        """
        acquires the inverse form of a matrix by using laplace's expansion
        which is A^-1 (inverse matrix) = 1/determinant * C^T (transposed matrix of all cofactors of all elements in matrix along main diagonal)
        """
        determinant = self.determinant
        ...
</code></pre>
<p>In order to cache the result, you just need to use a <a href="https://docs.python.org/dev/library/functools.html?highlight=s#functools.cached_property" rel="nofollow noreferrer">different decorator</a> (Python 3.8+):</p>
<pre><code>from functools import cached_property

...

class Matrix:
    ...

    @cached_property
    def determinant(self):
        ...
</code></pre>
<hr>
    </div>