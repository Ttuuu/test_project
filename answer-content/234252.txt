<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>In addition to @TorbenPutkonen's review here are my comments:</p>

<p>In general, the code seems well structured, readable and understandable.</p>

<p><strong>Tests</strong></p>

<p>While there is a complex logic in your code, the tests are not implemented. Without tests most interviewers would consider the task not completed (as long as it is not an Intern or a Junior position).</p>

<p><strong>Logs</strong></p>

<p>Although the tasks stays that the program should interact via console it is a bad idea to rely on <code>System.out.println</code> in all places. Instead, you could use any kind of logger or create your own abstraction on top. You would understand that it is an issue if you tried to unit test this code because stdout communications are hard to mock.</p>

<p><strong>Exceptions for code flow</strong></p>

<p>It is a bad practice to use exceptions for code flow. Read more <a href="https://softwareengineering.stackexchange.com/questions/189222/are-exceptions-as-control-flow-considered-a-serious-antipattern-if-so-why">here</a>. You have <code>ignored</code> exceptions in several places which are not ignored in fact. You have an additional logic (returning null, or printing a message) if an exception occurs.</p>

<p><strong>Logic in constructors</strong></p>

<p>Constructor of class <code>InputReader</code> calls an instance method in it's body. Although in you case it doesn't harm, it is considered a bad practice. Read why <a href="https://stackoverflow.com/a/5230637/2065796">here</a>. Instead you can create a factory method to create an instance of <code>Termainl</code> and pass it to a private constructor of <code>InputReader</code>.</p>

<p><strong>Single responsibility</strong></p>

<p>If I come across a method called <code>validateUrl</code> I expect that it <em>validates urls</em>. Instead, the method converts a String to a URL object. In some cases it prints some information to stdout. This is an example of a violation of the single responsibility principle. Instead, the method should do only one thing: it either validates or converts, but not both.</p>

<p><strong>Self-documenting code</strong></p>

<p>I see a lot of comments and javdocs in your code which help understand the logic. At the same time, if you constantly face a need to explain your code it is a sign of a bed design. In other words, if a reader is required to read a documentation o a method body in order to understand what it does it is a bad design. Read more on the subject <a href="https://stackoverflow.com/q/209015/2065796">here</a>. As an alternative, you can carefully name your variables and methods, keep them simple and you won't need to explain your code. As a rule if you want to comment a peace of code, extract it to a method and give it a good name (even if these are just 1-2 lines of code).</p>

<p><strong>Complexity</strong></p>

<p>It is hard to judge without implementing myself or knowing all preconditions, but the code seems to be a way more complex that it could be. I would suggest you to go to GitHub and search by tag specifying the company name and I am pretty sure you'll find another solutions of the same task implemented by other folks. Juts compare them with yours.</p>

<p>Ich wünsche Ihnen viel Spaß!</p>
    </div>