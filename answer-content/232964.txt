<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>I tried to create a different logic to initiate "merge" by blocks (skip merging the same value cells in the first column right away):</p>
</blockquote>

<p>The best way to do this is count the number of duplicates and then define your range as <code>current row to (current row - (number of duplicates + 1))</code> (note: you add 1 because the original value is not a duplicate).</p>

<blockquote>
<pre><code>Range(Cells(i - (countDups + 1), k), Cells(i, k))
</code></pre>
</blockquote>

<p>Hard coded values that may change in the future are called Magic Numbers.  Replacing these values with an enumeration or constants will make you code easier to read and modify.</p>

<p>For example the number 3 appears appears 4 times in code.  Each occurrence is being used to determine the number of columns to exclude.  If you later decide that you only need to exclude a 2 columns, you could just change all the 3's to 2.  No problem, ease pease.  So let's say we did that but decided to we did indeed need the to exclude the 3rd column, no problem just replace the 2's with 3's.  But wait there are 2 header rows, now there is a problem.</p>

<p>Before</p>

<blockquote>
<pre><code>Cells(myFirstRow, myCol - 3)
</code></pre>
</blockquote>

<p>After</p>

<blockquote>
<pre><code>Cells(myFirstRow, myCol - ColumnOffset)
</code></pre>
</blockquote>

<p>Anything that is in going to happen <code>If</code> or <code>Else</code> does not belong in an <code>If</code> statement.</p>

<pre><code>If iRow &lt;&gt; n Then

    Range(Cells(myFirstRow, 1), Cells(myFirstRow, myCol - 3)).HorizontalAlignment = xlCenter
    Range(Cells(myFirstRow, 1), Cells(myFirstRow, myCol - 3)).VerticalAlignment = xlCenter
    Range(Cells(myFirstRow, 8), Cells(myFirstRow, 8)).WrapText = True
    Range(Cells(myFirstRow, 1), Cells(myFirstRow, myCol - 3)).EntireRow.AutoFit

    iRow = Cells(myFirstRow + i, myFirstColumn)
    n = Cells(myFirstRow + i + 1, myFirstColumn)

Else
    n = Cells(myFirstRow + i + 1, myFirstColumn)

    For k = 1 To myCol - 3 'need to merge data per column but don't need to merge data in the last 3 columns

        Range(Cells(myFirstRow + i - 1, k), Cells(myFirstRow + i, k)).Merge
        Range(Cells(myFirstRow + i - 1, k), Cells(myFirstRow + i, k)).HorizontalAlignment = xlCenter
        Range(Cells(myFirstRow + i - 1, k), Cells(myFirstRow + i, k)).VerticalAlignment = xlCenter
        Range(Cells(myFirstRow + i - 1, 8), Cells(myFirstRow + i, 8)).WrapText = True
        Range(Cells(myFirstRow + i - 1, k), Cells(myFirstRow + i, k)).EntireRow.AutoFit

    Next

End If
</code></pre>

<p>The <code>k</code> loop is disguising the fact that the <code>HorizontalAlignment</code>, <code>VerticalAlignment</code> and row height are being adjusted whether <code>iRow &lt;&gt; n</code> or not.  Knowing this we can move these operations outside the scope of the <code>If</code> statement.  This will make it much easier to focus on the <code>if...Else</code> logic.</p>

<blockquote>
<pre><code>If iRow &lt;&gt; n Then
    iRow = Cells(myFirstRow + i, myFirstColumn)
Else
    For k = 1 To myCol - 3
        Range(Cells(myFirstRow + i - 1, k), Cells(myFirstRow + i, k)).Merge
    Next
End If

n = Cells(myFirstRow + i + 1, myFirstColumn)
Range(Cells(myFirstRow, 8), Cells(myFirstRow, 8)).WrapText = True
With Range(Cells(myFirstRow, 1), Cells(myFirstRow, myCol - 3))
    .HorizontalAlignment = xlCenter
    .VerticalAlignment = xlCenter
    .EntireRow.AutoFit
End With
</code></pre>
</blockquote>

<p>If we think about it a little deeper, these formats are being applied to all cells in our target area.  The formatting isn't even essential to merging the cells, which is what we are really trying to do.  So we could simply pass the area to be formatted to another subroutine (see code below).   This will simplify the main code and make it much easier to focus on the task at hand.</p>

<h2>Refactored Code</h2>

<pre><code>Sub MergeDuplicateValues()
    Const DebugMode As Boolean = True

    Dim Target As Range
    Dim ws As Worksheet

    Set ws = ThisWorkbook.Worksheets("Data")

    If DebugMode Then
        Rem Close previous test workbook
        CloseTestWorkbooks
        Rem Copy the worksheet to a new workbook
        ws.Copy
        Set ws = ActiveSheet
    End If

    Rem Define the Target Range
    Set Target = getMergeRange(ws.Range("A1"))
    Rem Add breakpoint here and use Target.Select in the Immediate Window to test the range

    If Target Is Nothing Then Exit Sub

    Application.ScreenUpdating = False
    MergeDuplicates Target
    ApplyBorders Target.CurrentRegion
    ApplyFormatsToMergeArea Target

End Sub

Private Sub MergeDuplicates(Target As Range)
    Application.DisplayAlerts = False
    Dim r As Long, countDups As Long

    With Target
        For r = 1 To .Rows.Count
            If .Cells(r, 1).Value = .Cells(r + 1, 1).Value Then
                countDups = countDups + 1
            Else
                If Count &gt; 0 Then
                    Dim Column As Range

                    Rem Iterate over each column of the Target Range
                    For Each Column In .Columns
                        Dim section As Range
                        Set section = Column.Cells(r - countDups, 1).Resize(countDups + 1)

                        Rem Add breakpoint here and use section.Select in the Immediate Window to test the range
                        section.Merge
                    Next
                    Count = 0
                End If
            End If
        Next
    End With
    Application.DisplayAlerts = True
End Sub

Private Function getMergeRange(Target As Range) As Range
    Const LastColumnOffset As Long = -3
    Const FirstRowOffset As Long = 2

    Dim newTarget As Range
    With Target.CurrentRegion

        Rem An error handler is needed when setting a range using negative offsets
        On Error Resume Next

        Rem Define the actual Target range
        Set newTarget = .Offset(FirstRowOffset).Resize(.Rows.Count - FirstRowOffset, .Columns.Count + LastColumnOffset)

        Rem Add breakpoint here and use newTarget.Select in the Immediate Window to test the range

        If Err.Number &lt;&gt; 0 Then
            Err.Raise Number:=vbObjectError + 513, Description:="Unable to create Merged Range"
            Exit Function
        End If
        On Error GoTo 0
    End With

    Set getMergeRange = newTarget
End Function

Private Sub ApplyBorders(Target As Range)
    With Target.Borders
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .Weight = xlThin
    End With
End Sub

Private Sub ApplyFormatsToMergeArea(Target As Range)
    Const NumberOfColumns As Long = 8

    With Target
        .HorizontalAlignment = xlCenter
        .VerticalAlignment = xlCenter
        .Resize(, NumberOfColumns).WrapText = True
        .Rows.EntireRow.AutoFit
    End With
End Sub

Private Sub CloseTestWorkbooks()
    Dim wb As Workbook
    For Each wb In Workbooks
        If Len(wb.Path) = 0 Then wb.Close 0
    Next
End Sub
</code></pre>
    </div>