<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I think we need to start with a list of suffixes that can be put somewhere accessible(preferably as a property to a class, but global space works for now)</p>

<pre class="lang-js prettyprint-override"><code>const suffixes = [
    'master',
    'utlan',
    'totaloversikt'
];
</code></pre>

<p>From there we can change our event listener to make a note of the suffix and register a generic function for the event.</p>

<pre class="lang-js prettyprint-override"><code>suffixes.foreach(suffix =&gt; {
    const isAllTableSearch = suffix === 'master';
    // Master has different behaviour
    const filterExpression = isAllTableSearch
        ? '.table_data  tr:visible:not(:has(th))'
        : '#table_data_' + suffix + ' tr:visible:not(:has(th))';

    $("#table_search_" + suffix)
        .data('suffix', suffix)
        .data('filter', filterExpression)
        .data('is-all-table-search', isAllTableSearch)
        .on("input", doFiltering); // Input triggers whenever it changes including things like cut/paste rather than keyup which only triggers when a key is released
});
</code></pre>

<p>Your doFiltering method can then use the search box to derive the suffix and filter to make the method more generic</p>

<pre class="lang-js prettyprint-override"><code>function doFiltering(event) {
    const searchBox = $(event.target);
    const searchQuery = searchBox.val().toLowerCase();
    $(searchBox.data('filter')).each((index, element) =&gt; {
        $(element).toggle($(element).text().toLowerCase().indexOf(searchQuery) &gt; -1)
    });

    // Update totals
    if (searchBox.data('is-all-table-search')) {
        updateAllTotals();
    } else {
        updateTotalForSuffix(searchBox.data('suffix'));
    }
}
</code></pre>

<p>While we're talking adding methods for stuff I'd also suggest adding a method to recalculate the totals, this is especially important for the master which can hide rows in other tables but doesn't update their totals.</p>

<pre class="lang-js prettyprint-override"><code>function updateTotalForSuffix(suffix) {
    const tableSearch = $("#table_search_" + suffix);
    rowCount = $(tableSearch.data('filter')).length;
    $('#row_count_' + suffix).text(rowCount);
    $('#no_result_' + suffix).toggle(rowCount === 0);
}

function updateAllTotals() {
    suffixes.foreach(suffix =&gt; updateTotalForSuffix(suffix));
}
</code></pre>

<p>This gives you a handy function to call on init and whenever the master search is called to avoid the info falling out of sync.</p>

<p>This gives us a few advantages. We're not maintaining logic for multiple copies of the search functionality, we've got one set of methods that take an object and use it's properties to determine the behaviour rather than having changes to each bit of logic for changes in behaviour.</p>

<p>Where possible I've tried to avoid <code>$(this)</code> because it can cause problems once you start abstracting stuff away into further functions(so say you wanted updating the totals to be a different method to your search but wanted a separate function for handling calling them both, using <code>$(this)</code> means to do so you now need to either change the methods or rebind the function, rather than just passing in a relevant argument like <code>event.target</code>).</p>
    </div>