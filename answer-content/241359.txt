<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1><code>O(n√n)</code> solution</h1>

<hr>

<p>First, a quick note about your implementation: it doesn't ensure that the returned product is the maximal product, it just returns the last product it finds. Your tests are too simple to detect this bug.</p>

<hr>

<p>Step 1: reduce the time complexity from <code>O(n^3)</code> to <code>O(n^2)</code> (at the cost of increasing memory complexity to <code>O(n)</code>) by creating a hash table with all the numbers from the array, so your <code>contains</code> checks can be <code>O(1)</code> instead of <code>O(n)</code>.</p>

<p>Sort the array and start checking from the biggest number so you can stop as soon as you find a product.</p>

<pre><code>public static int MaxPairProduct(int[] input)
{
    Array.Sort(input);
    if(input[input.Length - 1] == 0)
    {
        return input.Length &gt; 1 ? 0 : -1;
    }
    int minIndex = -1;
    while (input[++minIndex] == 0);
    HashSet&lt;int&gt; hashSet = new HashSet&lt;int&gt;(input);

    for (int i = input.Length - 1; i &gt; 0; i--)
    {
        int product = input[i];
        for (int j = i - 1; j &gt;= minIndex; j--)
        {
            if (product % input[j] == 0 &amp;&amp; hashSet.Contains(product / input[j]))
            {
                return product;
            }
        }
    }

    return input[0] == 0 &amp;&amp; input.Length &gt; 1 ? 0 : -1;
}
</code></pre>

<p>Step 2: decrease the time complexity to <code>O(n√n)</code> on average (there are <code>O(n^2)</code> edge cases) by making the inner loop start from index 0 and continue only until it reaches the square root of <code>product</code>, because by then you will have checked all the multiplications that could possibly produce <code>product</code>. Any number bigger than the root needs to be multiplied by a number smaller than the root, and they were all seen already.</p>

<pre><code>public static int MaxPairProduct(int[] input)
{
    Array.Sort(input);
    if(input[input.Length - 1] == 0)
    {
        return input.Length &gt; 1 ? 0 : -1;
    }
    int minIndex = -1;
    while (input[++minIndex] == 0);
    HashSet&lt;int&gt; hashSet = new HashSet&lt;int&gt;(input);

    for (int i = input.Length - 1; i &gt; 0; i--)
    {
        int product = input[i];
        int root = (int)Math.Sqrt(product);
        int j = minIndex;
        for (; j &lt; input.Length &amp;&amp; input[j] &lt; root; j++)
        {
            if (product % input[j] == 0 &amp;&amp; hashSet.Contains(product / input[j]))
            {
                return product;
            }
        }
        if(input[j] == root &amp;&amp; input[j+1] == root &amp;&amp; product % root == 0)
        {
            return product;
        }
    }

    return input[0] == 0 &amp;&amp; input.Length &gt; 1 ? 0 : -1;
}
</code></pre>

<p>If you want <code>O(1)</code> memory complexity you can use binary search instead of <code>HashSet</code>, giving you time complexity of <code>O(n√n log n)</code>.</p>
    </div>