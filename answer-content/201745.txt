<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Suggestion 1: Don't split the lines</h3>

<p>I don't see the need for splitting each line into tokens and extracting the numbers from each token. You can extract all the numbers from a line by using a <code>istringstream</code> with the entire line.</p>

<p>Replace the lines</p>

<pre><code>boost::split(v, str, boost::is_any_of(" ,"));

string xstr = v[0];
string ystr = v[1];
string zstr = v[2];
int xint, yint;
float x,y,z;

stringstream(v[0]) &gt;&gt; x;
xint = (int)round(x);

stringstream(v[1]) &gt;&gt; y;
yint = (int)round(y);

stringstream(v[2]) &gt;&gt; z;
</code></pre>

<p>by</p>

<pre><code>std:istringstream istr(str);
if ( istr &gt;&gt; x &gt;&gt; y &gt;&gt; z )
{
   // Process the data
}
else
{
   // Deal with the error.
}
</code></pre>

<h3>Suggestion 2: Use a <code>char []</code> instead of <code>std::string</code> for lines</h3>

<p>Constructing and destrucing <code>std::string</code>s for each line is potentially expensive. Use <code>char []</code> of sufficient size.</p>

<pre><code>const size_t MAX_LINE_LENGTH = 1000; // Make it large enough for your app.
char line[MXX_LINE_LENGTH];
while ( in.getline(line, MAX_LINE_LENGTH) )
{
   // Use line
}
</code></pre>
    </div>