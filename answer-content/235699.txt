<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your code uses an inconsistent style for its spacing. Sometimes you write <code>if (cond)</code> and sometimes <code>if(cond)</code>. You should pick either style and stick to it.</p>

<p>I am assuming that you prefer a condensed writing style because in several cases you don't even leave a space after a comma. In that case, you should consistently apply this condensed style, and your code should look like:</p>

<pre class="lang-c prettyprint-override"><code>#include&lt;errno.h&gt;
#include&lt;stdio.h&gt;
#include&lt;stdlib.h&gt;
#include&lt;string.h&gt;
#include&lt;arpa/inet.h&gt;
#include&lt;netdb.h&gt;
int main(int c,char**v){if(c&lt;2){printf("\n%s [IP]\n",v[0]);printf("For e.g. %"
"s 10.32.129.77\n",v[0]);exit(-1);}struct sockaddr_in sa;int res=inet_pton(
AF_INET,v[1],&amp;sa.sin_addr);switch(res){case 0:printf("\nInput address is not a"
" valid IPv4 address.\n");case-1:if(res==-1)printf("\nError(%s)\n",strerror(
errno));int n_res=inet_pton(AF_INET6,v[1],&amp;sa.sin_addr);switch(n_res){case 0:
printf("\nInput address is not a valid IPv6 address.\n");case-1:if(n_res==-1)
printf("\nError(%s)\n",strerror(errno));exit(-1);case 1:sa.sin_family=AF_INET6;
}case 1:sa.sin_family=AF_INET;}printf("\nsa.sin_addr.s_addr[%d]\n",sa.sin_addr.
s_addr);char node[NI_MAXHOST];memset(node,0,NI_MAXHOST);res=getnameinfo((struct
sockaddr*)&amp;sa,sizeof sa,node,sizeof node,NULL,0,0);if(res){printf("%s\n",
gai_strerror(res));exit(1);}printf("\nIP[%s]\n",v[1]);printf("HOSTNAME[%s]\n",
node);return 0;}
</code></pre>

<p>This code style is unreadable for anyone. There is a fun <a href="https://ioccc.org/" rel="nofollow noreferrer">competition that encourages this code style</a>, but other than that, it's useless.</p>

<p>On the other hand, when you take an arbitrary IDE (integrated development environment) and tell it to format your code (it's often just a single keyboard shortcut), it will come up with something like this:</p>

<pre class="lang-c prettyprint-override"><code>#include &lt;errno.h&gt;
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;
#include &lt;arpa/inet.h&gt;
#include &lt;netdb.h&gt;

int main(int argc, char **argv)
{
    if (argc &lt; 2) {
        printf("\n%s [IP]\n", argv[0]);
        printf("For e.g. %s 10.32.129.77\n", argv[0]);
        exit(-1);
    }

    struct sockaddr_in sa;
    int res = inet_pton(AF_INET, argv[1], &amp;sa.sin_addr);
    switch (res) {
    case 0:
        printf("\nInput address is not a valid IPv4 address.\n");
    case -1:
        if (res == -1)
            printf("\nError(%s)\n", strerror(errno));

        int n_res = inet_pton(AF_INET6, argv[1], &amp;sa.sin_addr);
        switch (n_res) {
        case 0:
            printf("\nInput address is not a valid IPv6 address.\n");
        case -1:
            if (n_res == -1)
                printf("\nError(%s)\n", strerror(errno));
            exit(-1);
        case 1:
            sa.sin_family = AF_INET6;
        }
    case 1:
        sa.sin_family = AF_INET;
    }
    printf("\nsa.sin_addr.s_addr[%d]\n", sa.sin_addr.s_addr);

    char node[NI_MAXHOST];
    memset(node, 0, NI_MAXHOST);
    res = getnameinfo((struct sockaddr *)&amp;sa, sizeof sa, node, sizeof node, NULL, 0, 0);
    if (res) {
        printf("%s\n", gai_strerror(res));
        exit(1);
    }

    printf("\nIP[%s]\n", argv[1]);
    printf("HOSTNAME[%s]\n", node);

    return 0;
}
</code></pre>

<p>I manually added some empty lines to split the code into logical sections, to give the reader a time to breathe. This style is much more common and can be read easily by any C programmer.</p>

<p>The remaining issues have already been covered in the other answers.</p>
    </div>