<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There is a lot of room for improvement but I will stick to the index stuff.</p>

<h1>Naming</h1>

<p>Your function</p>

<pre><code>def x_player(list_secondary, string, list_primary):
    '''
    returns the item from a list(list_primary) at
    the index of another string (string) in another list(list_secondary)
    '''

    return list_primary[list_secondary.index(string)]
</code></pre>

<ul>
<li>has bad names for function and parameters. <code>x_player</code> suggest that it is about players but in fact it is an absolutely generic function. Even if used with players the qualifier <code>x_</code> does not give any hint what is happening or returned. also what is <code>list_primary</code> and what is <code>list_secondary</code>? The parameter name <code>string</code> is without any semantic hint. From the perspective of the function it even worse as the function is not limited to string type keys.</li>
<li>has a bad docstring. the docstring is just a lengthy read of the code line below. A reader not familiar with your code has a hard time to understand the usage.</li>
</ul>

<p>What if we change the names and the docstring to</p>

<pre><code>def get_value(keys, key, values):
    '''
    fakes a dict()
    '''
    return values[keys.index(key)]
</code></pre>

<p>All of a sudden it is absolutely clear, that this is a completely generic function that looks up values in a parallel list and may be used for any key type.</p>

<h1>Consistency</h1>

<p>You use your fake dict <code>x_player</code> for <code>bids</code> and <code>balances</code>, but you do not use it for <code>fold_code</code> where you do <code>fold_code[player_names.index(player)]</code> explicitly. Also there are explicit usages <code>balances[player_names.index(player)]</code> and <code>bids[player_names.index(player)]</code>. Either you think <code>fold_code[player_names.index(player)]</code> is readable, then avoid to create a function. Or you think that is somewhat hard to read, then create the function and use it throughout the code.</p>

<p>For your dict-less implementation you have several lists of the same length. You first fill the key list <code>player_names</code> then you create the value lists inconsistently</p>

<pre><code>balances = [ 90 for n in range(n_players)]
bids = [10 for n in range(len(player_names))]
fold_code = [ 0 for n in range(len(player_names)) ]
</code></pre>

<p>The first line I like the least, <code>n_players</code> is a helper for the input loop only. The real truth is <code>player_names</code>, the list lengths must match. So in terms of dependency to the real stuff your other lines are better. However thy are not pythonic in two ways. In python you nearly never loop over <code>range(len(x))</code>. So</p>

<pre><code>bids = [10 for n in range(len(player_names))]
</code></pre>

<p>would read</p>

<pre><code>bids = [10 for name in player_names]
</code></pre>

<p>which is less error prone. Also in python you use <code>_</code> when you do not need the variables you somehow get.</p>

<pre><code>bids = [10 for name in player_names]
</code></pre>

<p>would read</p>

<pre><code>bids = [10 for _ in player_names]
</code></pre>

<h1>Loops over player</h1>

<p>You have a loop over <code>player_names</code> where you have multiple fake dict lookups for player attributes:</p>

<pre><code>for player in player_names:
    # [...]
    if fold_code[player_names.index(player)] == 1:
        # [...]
    if action == 'c':
        bid = max(bids) - x_player(player_names, player, bids)
</code></pre>

<p>For this case your fake dict is not very efficient. Instead of retrieving player name and have many lookups you could also lookup the player index once</p>

<pre><code>for player_idx, player in enumerate(player_names):
    # [...]
    if fold_code[player_idx] == 1:
        # [...]
    if action == 'c':
        bid = max(bids) - bids[player_idx]
</code></pre>

<p>That makes the code more readable.</p>
    </div>