<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Don't cast the result of <code>malloc</code></h2>

<p><a href="https://stackoverflow.com/a/605858/6872717">Do I cast the result of malloc?</a></p>

<p>NEVER.</p>

<hr>

<h2>Safe usage of malloc</h2>

<p>Malloc is easily misused.  Problems that can arise using malloc are the following:</p>

<ul>
<li><p>casting the result:  As said above, never do this.</p></li>
<li><p><code>sizeof(type)</code> vs <code>sizeof(*foo)</code>:</p></li>
</ul>

<p><code>foo = malloc(sizeof(*foo) * nmemb);</code> is better because if you ever change the type of <code>foo</code>, this call will still be valid, while if not, you would have to change every line where malloc is called with foo.  If you forget any of those lines, good luck.</p>

<hr>

<h2>Never use <code>=</code> inside an <code>if</code>, even if you mean it.</h2>

<p>Lines should be as simple as possible, and limited to just one purpose.</p>

<p>This:</p>

<pre><code>if (!(message = (t_message*)malloc(sizeof(t_message))))
        return (NULL);
</code></pre>

<p>Should be rewritten as</p>

<pre><code>message = malloc(sizeof(*message));
if (!message)
        return NULL;
</code></pre>

<p>If that extra line is too much for you, I suggest you to use this macro around <code>malloc()</code> which also adds some nice extra safety: <a href="https://codereview.stackexchange.com/a/223175/200418"><code>mallocs()</code></a></p>

<hr>

<h2>Unneeded code: No</h2>

<p>Don't write absolutely useless code like this: <code>return (a);</code>. It just makes it less readable without improving safety or anything at all.</p>

<p>Just use <code>return a;</code> or <code>content = buffer + 2;</code> (or <code>content = &amp;buffer[2];</code>)</p>

<hr>

<h2>Aliasing</h2>

<p>For some reason you are aliasing a <code>char</code> as a <code>short</code>.  Until you publish the header, I don't know if it's safe.  What I anticipate is that it is not clear why, which is something bad in itself.</p>

<hr>

<h2>C99 types</h2>

<p>We're in 2019, C89 shouldn't even be considered as an option when writing new code (it's acceptable for codebases of millions of lines of code which were started many decades ago, and it might be unsafe to port them to C99).</p>

<p>The definition of <code>short</code> is actually the same definition as <code>int_least16_t</code>. If you really want that type, use <code>int_least16_t</code>; if you want <code>int16_t</code>, which is probably what you intended to use, use it, but forget that <code>short</code> exists, it's dead.</p>

<hr>

<h2>Casting a pointer to an integer: NO!</h2>

<p><code>(long unsigned int)delimiter</code>: Why? NO!  In the very unlikely case that you actually want to use a pointer as an integer, you have <code>(u)intptr_t</code>; that's the only acceptable type to use, and you need a very very good reason to do that.</p>

<hr>

<h2><code>memalloc()</code></h2>

<p>What is that???</p>

<hr>

<p>I'm sure there are other things, but you can start fixing those.</p>
    </div>