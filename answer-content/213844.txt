<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Although unrelated to the code, I'll mention that for a CPU to overheat, especially a dual-core CPU, is not usual except with very high ambient temps.  I'd suggest removing the heat sink and re-applying thermal paste.  Any number of youtube videos can provide step-by-step instructions.</p>

<p>Moving on to the code:</p>

<ul>
<li>terminal semicolons aren't needed </li>
<li>configuration should go at the top</li>
<li><code>kill -0 PID</code> is a portable alternative to <code>-e /proc/$pid</code></li>
<li>bash builtins <code>let</code> and <code>[[ x -gt y ]]</code> can replace <code>bc</code> for these purposes</li>
<li><code>[[ .. ]]</code> is a builtin alternative to <code>[ .. ]</code></li>
<li><code>date +%s</code> can be replaced by builtin <code>printf</code></li>
<li><code>gawk</code> can extract the temperature more flexibly than <code>grep</code>+<code>sed</code></li>
<li>your time/run/report pattern can be factored into a function</li>
<li>the monitoring loop can be simplified by moving <code>sleep</code> to the end</li>
<li>no real harm in monitoring more aggressively, since the loop is not going to use a lot of CPU</li>
<li>can save a couple of forks by reading temp directly from /sys, at the cost of CPU-vendor specifity</li>
</ul>

<p>Putting it all together:</p>

<pre><code>#!/bin/bash
temp_lo=60
temp_hi=95

# reading temps from /sys is CPU-vendor-specific, eliminates need for external sensors program
# temp_label=$( grep -l ^Core /sys/bus/platform/devices/coretemp.*/hwmon/hwmon*/temp*_label  |head -1 )
# temp_source=${temp_label%_label}_input

alias now="printf '%(%s)T\n' -1"

function watch_child {
    childd=$1
    while kill -0 $childd &gt;&amp; /dev/null; do
        temp=$( sensors | gawk -F'[: +Â°.]+' '/^Core.?1/ {print $3;exit}' )
        # temp=$(( $(&lt;$temp_source) / 1000 ))
        [[ $temp -ge $temp_hi ]] &amp;&amp; kill -SIGSTOP $childd
        [[ $temp -le $temp_lo ]] &amp;&amp; kill -SIGCONT $childd
        sleep 1
    done
}

function elapsed {
    echo " ******* $1 time: $(date -u -d @$(( ${3:-$(now)}-$2 )) +%T)"
}

function monitor {
    launch_time=${launch_time:-$(now)}
    start_time=$(now)
    echo "********* $1"
    shift
    "$@" &amp;
    watch_child $!
    elapsed Processing $start_time
    elapsed Running $launch_time
}

monitor "The step to perform." my_long_running_command arg1 arg2 
monitor "The next step to perform." another_long_running_command arg1 arg2 
</code></pre>
    </div>