<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I see what you are trying to achieve, while your question does not fully meet the Code Review rules, but I guess some inputs won't hurt specially in my free time ;). </p>

<p>In my opinion, </p>

<ul>
<li>You should use <code>DateTime</code> instead of <code>string</code> and <code>int</code>. </li>
<li>You should combine <code>Talk</code> and <code>Slot</code>, as it should be only one class that hold the meeting details (subject, time, and place ..etc).</li>
<li>You can use <code>DurationInMin</code>, but I would rather use <code>DateTime</code> and based on the business requirements, I would make a way to make the user input only integer while using <code>DateTime</code> in the back-end, (e.g. in the front-end, I make a field that only accepts int, and in the back-end, I call <code>DateTime.AddMinutes()</code>) this way, if the business logic required (in the future) to add meetings for future reference (such as making a meeting schedule for the next day or week ..etc), it'll be easy to adjust without being a break change. </li>
<li><code>Dictionary&lt;Slot, string&gt;</code> should be <code>Dictionary&lt;int, Slot&gt;</code> the int will represent the TrackNumber, which will remove the need of <code>TrackNumber</code>. </li>
<li>GetScheduledTalk takes <code>List&lt;string&gt;</code> and return <code>List&lt;Track&gt;</code>, doesn't make any sense to me! using string list in this situation will be a real pain. Even if is it an input that you get from another resource (such as CVS). if there is any serialization process in this part, I would suggest moving it to a handler class, and create a model for it, then change the string to that model. </li>
</ul>

<p>Finally, <strong>Naming Convention</strong>, you should keep your objects names clearer by naming each object to its rule. if the object is related to another object, then include the name of that object as well. </p>

<p>Here is a proposal that might help you in your implementation. </p>

<pre><code>public enum ScheduleSessionName
{
    Python,
    Java,
    Blender
}

public class ScheduleSessionSlot
{
    public ScheduleSessionName SessionName { get; set; }

    public DateTime SessionTimeStart { get; set; }

    public DateTime SessionTimeEnd { get; set; }

    //you can use this method if you want to make SessionTimeEnd readonly property, so it will be automatically set with def
    public DateTime SetDefaultSessionTime(DateTime sessionTimeStart)
    {
        switch (SessionName)
        {
            case ScheduleSessionName.Python:
                return sessionTimeStart.AddMinutes(90);
            case ScheduleSessionName.Java:
                return sessionTimeStart.AddMinutes(75);
            case ScheduleSessionName.Blender:
                return sessionTimeStart.AddMinutes(120);
            default:
                return sessionTimeStart.AddMinutes(60);
        }

    }

}

public interface ISchedule : IEnumerable
{      
    int Count { get; }

    void Add(int trackNumber, ScheduleSessionSlot sessionSlot);

    void Remove(int trackNumber);

    void Clear();

    new IEnumerator GetEnumerator();

}


public class Schedule : ISchedule
{

    private readonly Dictionary&lt;int, ScheduleSessionSlot&gt; _schedulesStore = new Dictionary&lt;int, ScheduleSessionSlot&gt;();

    public int Count =&gt; _schedulesStore.Count;

    public ICollection&lt;int&gt; TrackNumbers =&gt; _schedulesStore.Keys;

    public ICollection&lt;ScheduleSessionSlot&gt; SessionSlots =&gt; _schedulesStore.Values;

    public ScheduleSessionSlot this[int trackNumber]
    {
        get =&gt; _schedulesStore.ContainsKey(trackNumber) ? _schedulesStore[trackNumber] : null;
        set =&gt; _schedulesStore[trackNumber] = value;
    }


    public void Add(int trackNumber, ScheduleSessionSlot sessionSlot) =&gt; _schedulesStore.Add(trackNumber, sessionSlot);

    public void Remove(int trackNumber) =&gt; _schedulesStore.Remove(trackNumber);

    public bool Contains(int trackNumber) =&gt; _schedulesStore.ContainsKey(trackNumber);

    public bool Contains(ScheduleSessionSlot sessionSlot) =&gt; _schedulesStore.ContainsValue(sessionSlot);

    public bool Contains(KeyValuePair&lt;int, ScheduleSessionSlot&gt; schedule) =&gt; _schedulesStore.Contains(schedule);

    public void Clear() =&gt; _schedulesStore.Clear();

    public IEnumerator GetEnumerator() =&gt; _schedulesStore.GetEnumerator();

}
</code></pre>

<p>The rest, will require your action ;).</p>
    </div>