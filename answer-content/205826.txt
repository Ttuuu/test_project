<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Unnecessary storage</h3>

<p>The current implementation basically processes the two input arrays in parallel, taking the next smaller element from the appropriate array, and appending to <code>ar</code>,
until either the end of an input array is reached,
or the counter <code>i</code> reaches <code>half</code>.</p>

<ul>
<li><p>If the end of an input array was reached,
the remaining elements of the other array are appended to <code>ar</code>.
The size of <code>ar</code> becomes <code>len</code>.</p></li>
<li><p>If the counter <code>i</code> reaches <code>half</code>, then nothing is appended to <code>ar</code>.
At this point the size of <code>ar</code> is <code>half</code>.</p></li>
</ul>

<p>Then, the <code>median</code> function doesn't actually pick the median of the array parameter,
but it computes a value based on the <code>len</code> parameter.</p>

<p>The <code>ar</code> array is unnecessary storage. In the end, only the <code>half</code>-th and possibly the <code>half + 1</code>-th values will be used.</p>

<p>The benefit of the <code>ar</code> storage is it makes it simple to compute the median in the case when the end of an input array was reached.
In this case, without <code>ar</code>, it's not trivial to find the correct index.</p>

<p>An alternative algorithm is possible without extra storage:
- pick values from the input arrays
- if we haven't reached yet either end, take the next smaller element
- otherwise, if we reached the end of the first array, take the next element from the second
- otherwise, if we reached the end of the second array, take the next element from the first
- before the above conditions, save the previously picked value in a variable</p>

<p>After counting until <code>half</code> elements, you can compute the value of the median based on <code>len</code>, <code>prev</code> and <code>current</code>.</p>

<p>Like this:</p>

<pre><code>  for (let i = 0, r1 = 0, r2 = 0; i &lt;= half; i++) {
    prev = current;
    if (r1 &lt; nums1.length &amp;&amp; r2 &lt; nums2.length) {
      if (nums1[r1] &lt; nums2[r2]) {
        current = nums1[r1++];
      } else {
        current = nums2[r2++];
      }
    } else if (r1 &lt; nums1.length) {
      current = nums1[r1++];
    } else if (r2 &lt; nums2.length) {
      current = nums2[r2++];
    }
  }

  if (prev === undefined) {
    return current;
  }

  if (len % 2 === 0) {
    return (prev + current) / 2;
  }
  return current;
</code></pre>

<h3>Unnecessary computation</h3>

<p>The <code>median</code> helper function recomputes <code>half</code>.
You could simply reuse the <code>half</code> variable that's already computed in the closure.</p>

<p>The loop condition <code>i &lt;= len</code> is unnecessary.
It will always be true,
because the implementation in the loop body guarantees that <code>i</code> will never reach <code>len</code>.</p>

<h3>Return value in case of empty input arrays</h3>

<p>In case of empty input arrays,
the implementation returns <code>NaN</code>.
I'm not sure that's correct, or expected.
Unless the exercise specifies to return <code>NaN</code> in this case,
I think returning <code>undefined</code> makes more sense.</p>
    </div>