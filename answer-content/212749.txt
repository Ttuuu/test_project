<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Code formatting</h2>

<p>Format your code to improve readability and hence maintainability.</p>

<h2>DRY (Don't Repeat Yourself) Principle</h2>

<p>You have a lot of places with duplicate code. You should try to avoid this.</p>

<p>First of all in your <code>core2</code> method you have calls in all condition blocks, you should move it below to be executed in any case.</p>

<p>Also you have many duplicate code in your <code>calc</code> methods. You can move duplicate code to your core <code>core2</code> method.</p>

<h2>Inconsistent styles</h2>

<p>Use the same style everywhere. If you are starting your sentences for output with uppercase then try to follow it everywhere. The same is true about comments and constructs like <code>to get a sum</code>, <code>to find a product</code>, <code>to divide</code>. Use single ubiquitous style for everything.</p>

<h2>Function return types</h2>

<p>If you don't want to return anything from your function it should be <code>void</code>. All your <code>calc</code> functions are <code>int</code>s (but you don't call return operator) and you are not using return values. So all your <code>calc</code> functions should be void.</p>

<h2>Redundant <code>core2</code> function</h2>

<p><strike>Also <code>core2</code> function is not needed here, you can use <code>main</code> directly.</strike> But C++ specs prohibits this behaviour although this works fine in most compilers. So we can replace <code>core2</code> recursion with infinite loop in <code>main</code>.</p>

<hr>

<p>So if we take into account all above notes code will look like this</p>

<pre><code>#include &lt;iostream&gt;
#include &lt;string&gt;
using namespace std;

// Now we have only primitive one-liner arithmetic functions
// with double return types    

double add(double a, double b) { return a + b; }

double subtract(double a, double b) { return a / b; }

double multiply(double a, double b) { return a * b; }

double divide(double a, double b) { return a / b; }

void core2() {
    string choice;
    cout &lt;&lt; "Would you like to multiply, divide, add, or subtract? (typer in lowercase)" &lt;&lt; endl;
    cin &gt;&gt; choice;

    // Choosing correct action name to output
    string result_name;

    if (choice == "add") {
        result_name = "sum";
    } else if (choice == "subtract") {
        result_name = "difference";
    } else if (choice == "multiply") {
        result_name = "product";
    } else if (choice == "divide") {
        result_name = "quotient";
    } else { // This block also performs validation of input parameter
        result_name = ""; // Just to prevent compiler error due to undeclared variable
        cout &lt;&lt; "USER ERROR" &lt;&lt; endl &lt;&lt; "you typed in something wrong, try again." &lt;&lt; endl;
        return; // end execution here
    }

    // Entering numbers in single place
    double a;
    double b;
    cout &lt;&lt; "Enter two numbers to get the "&lt;&lt; result_name &lt;&lt; "." &lt;&lt; endl;
    cin &gt;&gt; a &gt;&gt; b;

    double result;

    if (choice == "add") {
        result = add(a, b);
    } else if (choice == "subtract") {
        result = subtract(a, b);
    } else if (choice == "multiply") {
        result = subtract(a, b);
    } else {
        result = divide(a, b);
    }

    // Outputting result in single place
    cout &lt;&lt; "The " &lt;&lt; result_name &lt;&lt; " is " &lt;&lt; result &lt;&lt; "." &lt;&lt; endl;
}

int main() {
    while (true) {
        core2();
    }
}
</code></pre>

<hr>

<p>Further improvement will use more advanced techniques and relatively new C++11 features.</p>

<p>You need some way to map string and function, so for this we will use <code>std::map</code> as dictionary and <code>std::function</code> as polymorphic function wrapper. Also lambdas will be use to pass anonymous functions here as parameters. <code>struct</code> will be here used as container to store calculation function and result description.</p>

<pre><code>#include &lt;iostream&gt;
#include &lt;string&gt;
#include &lt;functional&gt;
#include &lt;map&gt;
using namespace std;

struct CalculationTechnique {
    std::function&lt;double (double,double)&gt; Function;
    string ResultName;
};

void core2() {
    string choice;
    cout &lt;&lt; "Would you like to multiply, divide, add, or subtract? (typer in lowercase)" &lt;&lt; endl;
    cin &gt;&gt; choice;

    // Filling our dictionary
    std::map&lt;string, CalculationTechnique&gt; calculation_mapping = {
        { "add", CalculationTechnique { [](double a, double b) -&gt; double { return a + b; }, "sum" } },
        { "subtract", CalculationTechnique { [](double a, double b) -&gt; double { return a - b; }, "difference" } },
        { "multiply", CalculationTechnique { [](double a, double b) -&gt; double { return a * b; }, "product" } },
        { "divide", CalculationTechnique { [](double a, double b) -&gt; double { return a / b; }, "quotient" } }
    };    

    // if no value found in dictionary
    if (calculation_mapping.count(choice) == 0) {
        cout &lt;&lt; "USER ERROR" &lt;&lt; endl &lt;&lt; "you typed in something wrong, try again." &lt;&lt; endl;
        return;
    }

    CalculationTechnique technique = calculation_mapping.at(choice);

    double a;
    double b;
    cout &lt;&lt; "Enter two numbers to get the "&lt;&lt; technique.ResultName &lt;&lt; "." &lt;&lt; endl;
    cin &gt;&gt; a &gt;&gt; b;

    cout &lt;&lt; "The " &lt;&lt; technique.ResultName &lt;&lt; " is " &lt;&lt; technique.Function(a, b) &lt;&lt; "." &lt;&lt; endl;
}

int main() {
    while (true) {
        core2();
    }
}
</code></pre>
    </div>