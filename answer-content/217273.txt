<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I see a number of things that may help you improve your program.</p>

<h2>Use proper case for file names</h2>

<p>We all know that Windows is not case sensitive with respect to file names, but pretty much every other operating system out there (Apple's OS X, Linux, BSD, etc.) is.  For that reason, when you have a class named <code>Generator</code> it should be in a file named <code>Generator.h</code> rather than <code>generator.h</code> or tools such as <code>moc</code> won't recognize them on any OS other than Windows.  By using proper case for file names now, you can avoid all future annoyance in having to port the code to any other OS.</p>

<h2>Don't <code>throw</code> from a Qt event handler</h2>

<p>Qt does not support <code>throw</code>ing an exception from within an event handler, so this code:</p>

<pre><code>int Generator::_generateNumber( int low, int high ) {
    if ( low &gt; high ) {
        throw BadParameters( "Upper bound is NOT higher \n" );
    }
    return qrand() % (( high + 1) - low) + low;
}
</code></pre>

<p>will generate the following error under Qt5:</p>

<blockquote>
  <p>Qt has caught an exception thrown from an event handler. Throwing exceptions from an event handler is not supported in Qt. You must not let any exception whatsoever propagate through Qt code. If that is not possible, in Qt 5 you must at least re-implement QCoreApplication::notify() and catch all exceptions there.</p>
</blockquote>

<p>See <a href="https://stackoverflow.com/questions/10075792/how-to-catch-exceptions-in-qt">https://stackoverflow.com/questions/10075792/how-to-catch-exceptions-in-qt</a> for more details.  </p>

<p>In this case, I'd suggest linking the two spinboxes together to make it impossible for the condition to occur.  That is, don't allow <code>high</code> to be set to a value less than <code>low</code> - it's almost always better to prevent exceptions than to try to catch them.</p>

<h2>Don't use obsolete functions</h2>

<p>The <code>qsrand()</code> and <code>qrand()</code> functions <a href="https://doc.qt.io/qt-5/qtglobal-obsolete.html" rel="nofollow noreferrer">are obsolete</a> and should not be used in new code.  I'd suggest using the <a href="https://en.cppreference.com/w/cpp/numeric/random" rel="nofollow noreferrer">standard C++ <code>&lt;random&gt;</code></a> tools instead.</p>

<h2>Naming and formatting</h2>

<p>The code currently contains these lines:</p>

<pre><code>_minSpinBox-&gt;setMinimum    ( Config::SpinBox::minimum );
_minSpinBox-&gt;setMaximum    ( Config::SpinBox::maximum );
_minSpinBox-&gt;setSingleStep ( Config::SpinBox::single_step );
</code></pre>

<p>There's a lot that could be improved here.  First, aligning parentheses like that creates a maintenance headache.  If someone adds one single line that happens to be longer than the <code>setSingleStep</code> line, they'd have to adjust <em>every other line</em> to realign.  Over the long term, that's a pointless and frustrating battle.  Let it go!</p>

<p>Second, you've already noted that the underscore prefix is technically legal but suspect.  Personally, I don't bother usually with any particular identifier prefix or suffix and find it easier to both read and write as a result.  </p>

<p>Third, rather than making separate calls to <code>setMinimum</code> and <code>setMaximum</code>, one could instead make a single call to <code>setRange</code> instead.</p>

<p>Fourth, this could would be much easier to read without the <code>Config::SpinBox</code> prefix everywhere.  I'd suggest rewriting the function like this (in conjunction with the next suggestion):</p>

<pre><code>QSpinBox *Generator::createSpinBox() {
    using namespace Config::SpinBox;
    auto sb = new QSpinBox(this);
    sb-&gt;setRange(minimum, maximum);
    sb-&gt;setSingleStep(single_step);
    sb-&gt;setValue(default_value);
    return sb;
}
</code></pre>

<h2>Don't Repeat Yourself (DRY)</h2>

<p>If you are creating a lot of <em>almost</em> identical code, you should ask yourself if there is a way to avoid it.  This is such common advice that programmers often just use the shorthand and say "DRY up your code".  In this case, here's a rewrite of <code>_createSpinBox()</code> that shows how to use the single function above instead of two separate functions:</p>

<pre><code>void Generator::_createSpinBoxes() {
    _minSpinBox = createSpinBox();
    _maxSpinBox = createSpinBox();
    _createSpinBoxLayout();
}
</code></pre>

<h2>Accomodate translations</h2>

<p>The current code correctly uses <code>tr()</code> in a few places, but not all.  For example, the window title and button label.  It's very beneficial to get into the habit of making sure that all displayable literal values are translatable.  See <a href="https://doc.qt.io/qt-5/i18n-source-translation.html" rel="nofollow noreferrer">the Qt translation docs</a> for more details.</p>

<h2>Use the new version of <code>connect</code></h2>

<p>Since Qt5, there is a better syntax for connecting slots and signals. So instead of this:</p>

<pre><code>connect ( _button, SIGNAL(clicked()), this, SLOT(showNumber()) );
</code></pre>

<p>one could write this:</p>

<pre><code>connect(_button, &amp;QPushButton::clicked, this, &amp;Generator::showNumber);
</code></pre>

<p>The version above is <strong>thanks to @GrecKo</strong>.  I had originally written this, but the use of <code>std::bind</code> is really not needed here.  I think it was a leftover from an experiment I did on the code.</p>

<pre><code>connect(_button, &amp;QPushButton::clicked, std::bind(&amp;Generator::showNumber, this));
</code></pre>

<p>Note that I've used <code>std::bind</code> from <code>&lt;functional&gt;</code> here to allow the correct passing of <code>this</code>. </p>
    </div>