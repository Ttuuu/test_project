<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You know, if you want to improve performance, the first thing to do is get a high-level overview of what your code does to achieve its aim. Currently, you do this:</p>

<ol>
<li>Iterate over all words in <em>D</em>.

<ol>
<li>Iterate over the whole string <em>S</em> trying to prove it a sub-sequence.</li>
</ol></li>
</ol>

<p>That's trivially proven to be an <span class="math-container">\$O(\#D * \#S)\$</span> algorithm.</p>

<p>You can do better, by using the proper data structure:</p>

<ol>
<li>Build a <a href="https://en.wikipedia.org/wiki/Trie" rel="noreferrer">prefix-tree</a> from the words, noting the longest word which can be found from there.</li>
<li>Iterate over the string.

<ol>
<li>Continue if the current character doesn't fit.</li>
<li>Update the best found if it is a terminal node.</li>
<li>recurse with the sub-tree.</li>
</ol></li>
</ol>

<p>Regarding your code:</p>

<ol>
<li><p>Your use of a class is completely unmotivated. There are no invariants to protect, as evidenced by you marking it all <code>public</code>, and you only create it to call one single function anyway. Just make it a free function. Ok, if you change the algorithm, you might want to break it up it into building the trie, using a pre-computed trie, and putting it all together.</p></li>
<li><p><code>auto</code> would allow you to always have the proper type, without cluttering your code with long and obscure names. Read <a href="https://herbsutter.com/2013/08/12/gotw-94-solution-aaa-style-almost-always-auto/" rel="noreferrer">"<em>Almost Always Auto</em>"</a>.</p></li>
<li><p>I'm not sure why you use a <code>std::tuple</code>. Maybe for obfuscation? If so, I confirm you are on the right way.</p></li>
<li><p>Always define variables in the smallest scope possible, unless there are significant advantages (most likely in performance) for a <em>slightly</em> longer lifetime.</p></li>
<li><p><code>return 0;</code> is implicit for <code>main()</code>.</p></li>
</ol>
    </div>