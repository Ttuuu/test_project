<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>In all, this code is not bad, but there are some ways I think it might be improved.</p>

<h2>Fix the bug</h2>

<p>If the user hits the <kbd>space</kbd> key, it fills in a block and a left <kbd>cntl</kbd> removes it.  Unfortunately, although the arena is fenced when the program starts, the user is not prevented from removing the fence blocks and wandering outside the allocated memory.  This, of course, is a serious bug that should be addressed.</p>

<h2>Decompose your program into functions</h2>

<p>All of the logic here is in <code>main</code> in one rather long and dense chunk of code.  It would be better to decompose this into separate functions.</p>

<h2>Use <code>&lt;stdbool.h&gt;</code> for boolean types</h2>

<p>The <code>running</code> variable is used as a boolean value, but is declared as a <code>char</code>.  It would be clearer to readers of the code if instead of this:</p>

<pre><code>char running = 1;
while( running == 1 ) {
</code></pre>

<p>write this:</p>

<pre><code>for (bool running = true; running; ) {
</code></pre>

<h2>Prefer logical evaluation to <code>if</code></h2>

<p>The code contains these lines:</p>

<pre><code>if( SDL_PollEvent( &amp;e ) &gt; 0) {
  if( e.type == SDL_QUIT) running = 0;
}
</code></pre>

<p>Especially in combination with the suggestion above, I think this would be more clearly expressed like this:</p>

<pre><code>running = !( SDL_PollEvent( &amp;e ) &gt; 0 &amp;&amp; e.type == SDL_QUIT);
</code></pre>

<h2>Write portable code where practical</h2>

<p>The code uses <code>#include &lt;sys/time.h&gt;</code> and has these lines:</p>

<pre><code>t2 = clock();
float ms = (float)(t2-t1)/1000.0;
printf("%f\n", ms );
if(ms &lt; 16) SDL_Delay(16.0 - ms);
</code></pre>

<p>This is not portable code.  First, the standard location is <code>&lt;time.h&gt;</code> (no <code>sys</code>).  Second, this assumes that <code>clock()</code> is measuring in seconds, but that's not actually required by the C standard.  Instead, to get milliseconds, one could write this:</p>

<pre><code>t2 = clock();
float ms = (float)(t2-t1)/CLOCKS_PER_SEC*1000.0;
printf("%f\n", ms );
if(ms &lt; 16) SDL_Delay(16.0 - ms);
</code></pre>

<p>Note, however, <code>SDL_Delay</code> is not that fine-grained and may not be doing what you intend.  See <a href="https://gamedev.stackexchange.com/questions/97532/how-do-i-implement-a-fixed-delta-time-step-with-a-sdl-delay15ms-precision">this game-dev answer</a> for details.</p>

<h2>Be careful with signed vs. unsigned</h2>

<p>In C, array access via subscripting is done with <em>unsigned</em> integer subscripts, but this code casts the subscript to <code>char</code> in many places.  That's a potential problem because <code>char</code> is <em>signed</em> for some compilers.  Better would be to use a <a href="https://en.cppreference.com/w/c/types/size_t" rel="nofollow noreferrer"><code>size_t</code></a> type.</p>

<h2>Eliminate "magic numbers"</h2>

<p>There are a few numbers in the code, such as <code>0x11</code> and <code>16</code> and <code>27</code> that have a specific meaning in their particular context.  By using named constants such as <code>wall_color</code> or <code>ms_per_loop</code>, the program becomes easier to read, understand and maintain.  </p>

<h2>Use an appropriate data structure</h2>

<p>The code is full of separate lines that separately update an <span class="math-container">\$x\$</span> and <span class="math-container">\$y\$</span> coordinate.  What would make the code simpler to read, understand and maintain, would be to create and use a structure for both like this:</p>

<pre><code>typedef struct {
    float x;
    float y;
} Point2D;


void rotate(Point2D* p, float rotangle) {
    float oldX = p-&gt;x;
    p-&gt;x = p-&gt;x * cos(rotangle) - p-&gt;y * sin(rotangle);
    p-&gt;y = oldX * sin(rotangle) + p-&gt;y * cos(rotangle);
}
</code></pre>

<p>This enables changing this:</p>

<pre><code>  if(keystate[SDL_SCANCODE_RIGHT]) {
    oldDirX = dirX;
    dirX = dirX * cos(ROTSPEED) - dirY * sin(ROTSPEED);
    dirY = oldDirX * sin(ROTSPEED) + dirY * cos(ROTSPEED);
    oldPlaneX = planeX;
    planeX = planeX * cos(ROTSPEED) - planeY * sin(ROTSPEED);
    planeY = oldPlaneX * sin(ROTSPEED) + planeY * cos(ROTSPEED);
  }
</code></pre>

<p>To this:</p>

<pre><code>  if(keystate[SDL_SCANCODE_RIGHT]) {
    rotate(&amp;dir, ROTSPEED);
    rotate(&amp;plane, ROTSPEED);
  }
</code></pre>

<h2>Eliminate unused variables</h2>

<p>Unused variables are a sign of poor code quality, so eliminating them should be a priority.  In this code, <code>surface</code>, <code>oldtime</code> and <code>time</code> are unused.  My compiler also tells me that.  Your compiler is probably also smart enough to tell you that, if you ask it to do so. </p>

<h2>Eliminate global variables where practical</h2>

<p>The code declares and uses a number of global variables.  Global variables obfuscate the actual dependencies within code and make maintainance and understanding of the code that much more difficult.  It also makes the code harder to reuse.  For all of these reasons, it's generally far preferable to eliminate global variables and to instead pass pointers to them.  That way the linkage is explicit and may be altered more easily if needed.  It may also be handy to collect such variables into structures.</p>

<h2>Don't Repeat Yourself (DRY)</h2>

<p>The movement operations all include a lot of very similar repeated code.  Instead of repeating code, it's generally better to make common code into a function.  In this case, I'd replace the lengthy and repetitive code that handles the <kbd>D</kbd>, <kbd>A</kbd>, <kbd>W</kbd> and <kbd>S</kbd> keys with this:</p>

<pre><code>float velocity = ((keystate[SDL_SCANCODE_D] ^ keystate[SDL_SCANCODE_A]) &amp;&amp;
            (keystate[SDL_SCANCODE_W] ^ keystate[SDL_SCANCODE_S])) ? STRAFEMOVESPEED : MOVESPEED;
Point2D oldpos = pos;
if(keystate[SDL_SCANCODE_D]) {
  pos.x -= dir.y * velocity;
  pos.y += dir.x * velocity;
}
if(keystate[SDL_SCANCODE_A]) {
  pos.x += dir.y * velocity;
  pos.y -= dir.x * velocity;
}
if(keystate[SDL_SCANCODE_W]) {
  pos.x += dir.x * velocity;
  pos.y += dir.y * velocity;
} 
if(keystate[SDL_SCANCODE_S]) {
  pos.x -= dir.x * velocity;
  pos.y -= dir.y * velocity;
} 
adjustCollision(&amp;pos, &amp;oldpos, map);
</code></pre>

<p>This assumes that <code>pos</code> and <code>dir</code> are <code>Point2D</code> structures as mentioned above and that the <code>adjustCollision</code> function will prevent moving in a direction that is blocked by a wall.</p>
    </div>