<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Immutable objects are awesome. They are robust, predictable, and inherently thread-safe.
Make the <code>x</code>, and <code>y</code> fields <code>final</code>, 
and change the operations to return the resulting <code>Vector</code>,
for example:</p>

<pre><code>class Vector {
    private final int x;
    private final int y;

    public Vector(int x, int y) {
        this.x = x;
        this.y = y;
    }

    public Vector add(Vector other) {
        return new Vector(x + other.x, y + other.y);
    }

    public Vector sub(Vector other) {
        return new Vector(x - other.x, y - other.y);
    }

    public Vector mul(Vector other) {
        return new Vector(x * other.x, y * other.y);
    }
}
</code></pre>

<p>As in the example above, I recommend changing the name of the <code>Vector</code> parameter from <code>vector</code> to something else, like <code>other</code>, to make it perfectly clear that the method is dealing with <em>another</em> vector.</p>

<p>This way you'll be able to chain operations like this:</p>

<pre><code>new Vector(1, 2).add(new Vector(3, 4)).sub(new Vector(5, 6)).mul(new Vector(7, 8));
</code></pre>

<p>It will be also useful to implement a custom <code>toString</code> method to make it easy to print a String representation of the vector, for example:</p>

<pre><code>@Override
public String toString() {
    return String.format("(%s, %s)", x, y);
}
</code></pre>
    </div>