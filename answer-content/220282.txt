<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li>The question states that the input is a number 32 signed int so checking for <code>undefined</code> or <code>null</code> is a waste of time.</li>
</ul>

<p>The solution is a little long. Some of it due to not being familiar with some old school short cuts.</p>

<ul>
<li>To  get the sign of a number use <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sign" rel="noreferrer"><code>Math.sign</code></a></li>
</ul>

<p>-JavaScript numbers are doubles but when you use bitwise operations on them they are converted to 32 bit signed integers. This gives you a very easy way to check if the result has overflowed.</p>

<pre><code>const signedInt = value =&gt; (value | 0)  === value; // returns true if int32
</code></pre>

<ul>
<li><p>A 32 bit int can store 9 full decimal digits, with an extra digit <code>1</code> or <code>2</code>, and a sign. you dont need to use an array to hold the reversed digits you can store them in the reversed number as you go.</p></li>
<li><p>JavaScript can handle hex <code>0x10 === 16</code>, decimal <code>10 === 10</code>, octal <code>010 === 8</code> and binary <code>0b10 === 2</code> (oh and BIG ints <code>10n === 10</code>) Hex makes realy easy to remember the lowest and highest int for a given size. </p>

<p>Not that you need them to solve the problem, just some handy info.</p></li>
</ul>

<p>Some common ways of writing min max 32Ints</p>

<pre><code> const MIN = Math.pow(-2, 31), MAX = Math.pow(2, 31) - 1;


// negative
-0x80000000 === MIN;      // true
(0x80000000 | 0) === MIN; // true. Coerce from double to int32 
1 &lt;&lt; 31 === MIN;          // true. Shift 1 to the highest (MSB) bit for negative

//positive
0x7FFFFFFF === MAX; // true
~(1 &lt;&lt; 31) === MAX; // true  Flips bits of min int32
</code></pre>

<h2>Rewrite</h2>

<p>With that info you can rewrite the solution as</p>

<pre><code>function reverseDigits(int) {
    var res = 0, val = Math.abs(int);
    while (val &gt; 0) {
        res = res * 10 + (val % 10);
        val = val / 10 | 0;
    }
    res *= Math.sign(int);
    return (res | 0) === res ? res : 0;
}
</code></pre>
    </div>