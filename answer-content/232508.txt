<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Star imports are discouraged. It's preferable to specify what classes you're importing in most cases.</p>

<p><code>getR</code> is a very poor method name unless <code>R</code> is well defined inside the domain you're operating in. It's preferable to clearly express, without abbreviations, what the method will be doing. <code>get</code> is also misleading because it implies a simple local operation to retrieve a value from a class, not a remote call.</p>

<p>When variables will not be reassigned, it's preferable to mark them as <code>final</code>. This expresses design intent and tells the reader they don't have to worry about the value of the variable changing.</p>

<p>Minimizes scope wherever possible. <code>getR</code> should probably be either private or public. Package-private seems unlikely to be correct.</p>

<p><code>startTime</code> is never used and can be removed. Rather than creating a Calendar instance, <code>System.currentTimeMillis()</code> would be preferable to find the current time.</p>

<p>If <code>getR</code> needs a <code>URL</code>, it should probably take it as a parameter, rather than accepting a <code>String</code>. In particular, your error handling of a bad URL is highly dubious. The caller gets no notification of any type that the URL string was incorrect. Make them build a correct URL and handle the case where they can't before the <code>getR</code> call.</p>

<p>There's an argument to be made that <code>setDoInput(true)</code> is noise, and one to be made that it makes things clearer. </p>

<p>The only exception your method throws is if the error stream can't be closed. It's unclear what you expect the caller to be able to do about that.</p>

<p>Use <code>try-with-resources</code> where possible to leverage automatic closing of resources. Otherwise you need to always close resources in <code>finally</code> blocks or you risk exceptions preventing you from closing them.</p>

<p>Always use curly braces, even if they're not required. You prevent an annoying and difficult-to-find class of error, and you enhance readability in most cases.</p>

<p>In idiomatic java, <code>catch</code> belongs on the same line as <code>}</code>.</p>

<p>Always catch the most specific type of exception possible. Catching <code>Exception</code> may silently swallow current or future exceptions you didn't intend to handle.</p>

<p>Using <code>assert</code> to ensure invariants in non-production environments is a good practice, but note that assertions must be engaged at both compile time and run time to function. Most production environments won't (and shouldn't) have assertions enabled. Many development environments and compilations also won't have assertions enabled, so make sure that they're correctly activated if you intend to use them.</p>

<p>It's unclear to me why you're explicitly closing the error stream in that fashion, since you never need or use it otherwise. If you must close it, put it in a <code>try-with-resources</code> block.</p>

<p>You should almost certainly log the exception you're handling for debugging later.</p>

<p>Early returns can clarify the code. The <code>only one return location</code> paradigm is a holdover from when it was not possible to embed returns in the middle of a block of code. A helper method could do the replacements for you.</p>

<p>In idiomatic java, variables start with a lowercase letter. <code>return</code> would be preferable to <code>Return</code>.</p>

<p>Turning the <code>if</code> check into a guard clause would reduce indentation and simplify the logic.</p>

<p>As of Java 9, I believe (but you should confirm) that string concatenation is actually faster than using a <code>StringBuilder</code> in the simple case of appending strings to one another. I think the readability is a wash.</p>

<p>If you were to make all these changes, your code might look more like:</p>

<pre><code>private static String getR(
        final String xml,
        final URL requestUrl,
        final int retryWaitTime,
        final int socketTimeOut) {

    final StringBuilder xmlString = new StringBuilder();
    HttpURLConnection connection = null;

    try {
        connection = (HttpURLConnection) requestUrl.openConnection();
        connection.setConnectTimeout(retryWaitTime);
        connection.setReadTimeout(socketTimeOut);
        connection.setDoInput(true);
        connection.setDoOutput(true);
        connection.setRequestMethod("POST");
        connection.setRequestProperty("Accept", "application/xml");
        connection.setRequestProperty("Content-Type", "application/xml; charset=UTF-8");

        try (final OutputStreamWriter writer =
                new OutputStreamWriter(connection.getOutputStream(), StandardCharsets.UTF_8)) {
            writer.write(xml);
        }

        final int statusCode = connection.getResponseCode();
        if (statusCode != HttpURLConnection.HTTP_OK) {
            return sanitize(statusCode + "^" + xml);
        }

        try (final BufferedReader br = new BufferedReader(new InputStreamReader(connection.getInputStream()))) {
            String line;
            while ((line = br.readLine()) != null) {
                xmlString.append(line);
            }
        }
        return sanitize(xmlString.toString());

    } catch (final IOException e) {
        e.printStackTrace();
        return sanitize("X^" + xml);
    }
}

private static String sanitize(final String string) {
    return string.replace("\n", "").replace("\r", "");
}
</code></pre>
    </div>