<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Naming</h3>

<p>According to the
<a href="https://swift.org/documentation/api-design-guidelines" rel="nofollow noreferrer">API Design Guidelines</a>,
needless word should be omitted, and  prepositional phrases should be made
argument labels. Also variable names should generally be lower (camel) case.</p>

<p>Therefore a better function name would be</p>

<pre><code>public func longestBinaryGap(for n: Int) -&gt; Int 
</code></pre>

<p>Also variable names should not contain type information, that applies
for example to</p>

<pre><code>var arrayOfIndexes: [Int]
</code></pre>

<h3>Simplifying your approach</h3>

<p>Let's start with <code>func getCurrentBinaryGapFor()</code>, that looks unnecessary
complicated. Without additional local variables it can be written as</p>

<pre><code>func getCurrentBinaryGapFor(_ array:[Int]) -&gt; Int {
    if array.count &gt;= 2 {
        return array[array.count - 1] - array[array.count - 2] - 1
    } else {
        return 0
    }
}
</code></pre>

<p>In the main function,</p>

<pre><code>let currentBinaryGap = getCurrentBinaryGapFor(arrayOfIndexes)
if arrayOfIndexes.count == 2 {
    longestBinaryGap = currentBinaryGap
} else if index &gt; 2 {
    if currentBinaryGap &gt; longestBinaryGap {
        longestBinaryGap = currentBinaryGap
    }
}
</code></pre>

<p>can be simplified to</p>

<pre><code>let currentBinaryGap = getCurrentBinaryGapFor(arrayOfIndexes)
if currentBinaryGap &gt; longestBinaryGap {
    longestBinaryGap = currentBinaryGap
}
</code></pre>

<p>and the loop </p>

<pre><code>var index = 0
for char in binaryString {
    if char == "1" {
        // ... do something ...
    }
    index += 1
}
</code></pre>

<p>can be written as </p>

<pre><code>for (index, char) in binaryString.enumerated() where char == "1" {
    // ... do something ...
}
</code></pre>

<p>Only the last two elements of <code>arrayOfIndexes</code> are used in the program.
I would</p>

<ul>
<li>either store all positions of ones in the array first, and then determine
the longest run from that array once, </li>
<li>or use two variables for the recent two positions instead of an array.</li>
</ul>

<p>In either case, a separate function to compute the current gap seems
unnecessary.</p>

<p>Summarizing the changes so far, the function would look like this:</p>

<pre><code>public func longestBinaryGap(for n: Int) -&gt; Int {
    var bitPositions: [Int] = [] // Positions of all `1` bits in `n`
    let binaryRepr = String(n, radix:2) //

    for (index, char) in binaryRepr.enumerated() where char == "1" {
        bitPositions.append(index)
    }

    var longestGap: Int = 0
    if bitPositions.count &gt;= 2 {
        for i in 0...bitPositions.count - 2 {
            let gap = bitPositions[i + 1] - bitPositions[i] - 1
            if gap &gt; longestGap {
                longestGap = gap
            }
        }
    }

    return longestGap
}
</code></pre>

<p>Using Swift's functional methods this could be written as</p>

<pre><code>public func longestBinaryGap(for n: Int) -&gt; Int {
    let binaryRepr = String(n, radix: 2) //

    let bitPositions = binaryRepr.enumerated()
        .filter { $0.element == "1" }
        .map { $0.offset }

    let longestGap = zip(bitPositions, bitPositions.dropFirst())
        .map { $1 - $0 - 1 }
        .max() ?? 0

    return longestGap
}
</code></pre>

<p>which looks elegant, but is actually a bit slower than the previous version.</p>

<h3>Boosting the performance</h3>

<p>Your approach is \$ O(d) \$ (in time and memory), where \$ d \$ is the 
number of digits in \$ n \$. That seems very good since any solution must
somehow traverse all digits of the given number.</p>

<p>As said above, the memory usage can be reduced to \$ O(1) \$ by keeping
only the last two bit positions, instead of using an array.</p>

<p>However, much time can be saved by <em>not</em> converting the integer to a string.
The binary digits of a number can be determined efficiently in pure
integer arithmetic.</p>

<p>That leads to the following implementation (essentially a Swift version
of <a href="https://codereview.stackexchange.com/questions/159650/find-the-binary-gap-of-a-number-n/159678#159678">Find the binary gap of a number N</a>),
which is considerably faster:</p>

<pre><code>public func longestBinaryGap1(for n : Int) -&gt; Int {

    if n &lt;= 0 {
        return 0
    }

    var n = n // Make a mutable copy
    // Remove trailing zeros:
    while n % 2 == 0 {
        n /= 2
    }

    var longestGap = 0
    var gap = 0
    repeat {
        n /= 2
        if n % 2 == 0 {
            // Current bit is `0`: increase gap size.
            gap += 1
        } else {
            // Current bit is `1`: check current gap, then reset.
            if gap &gt; longestGap {
                longestGap = gap
            }
            gap = 0
        }
    } while n &gt; 0

    return longestGap
}
</code></pre>

<p>And it gets even faster if we use the “find first bit set”
function <code>ffsl()</code> (which might take advantage of compiler intrinsics):</p>

<pre><code>public func longestBinaryGap2(for n : Int) -&gt; Int {

    var n = n // Make a mutable copy
    let firstPosition = ffsl(n)
    if firstPosition == 0 {
        return 0
    }
    n = n &gt;&gt; firstPosition

    var longestGap = 0
    while n &gt; 0 {
        let position = Int(ffsl(n))
        if position - 1 &gt; longestGap {
            longestGap = position - 1
        }
        n = n &gt;&gt; position
    }

    return longestGap
}
</code></pre>

<h3>Benchmark</h3>

<p>My simple benchmark:</p>

<pre><code>let M = 1_000_000

do {
    var sum = 0
    let start = Date()
    for n in 1...M { sum += longestBinaryGap(for: n) }
    let end = Date()
    print(sum, end.timeIntervalSince(start))
}
</code></pre>

<p>On a 1.2 GHz Intel Core m5 (with the program compiled in Release mode, i.e.
with optimizations), I measured approximately:</p>

<ul>
<li>Your original code: 3.3 seconds</li>
<li><code>longestBinaryGap1()</code>: 0.08 seconds</li>
<li><code>longestBinaryGap2()</code>: 0.04 seconds</li>
</ul>
    </div>