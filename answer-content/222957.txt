<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The problem is a combination of very large numbers and rendering in <code>ItemsControls</code>s in WPF.</p>

<p>And if you think about it: No human can use the full view of a number with 10000 digits to anything. Therefore you need a view model:</p>

<pre><code>  public class FactorialVM : INotifyPropertyChanged
  {
    public FactorialVM(long value, BigInteger factorial)
    {
      Value = value;
      Factorial = factorial;
    }

    public long Value { get; }
    public BigInteger Factorial { get; }


    public string Display { get; private set; }

    public event PropertyChangedEventHandler PropertyChanged;
    void OnPropertyChanged(string name)
    {
      PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(name));
    }

    async internal Task SetDisplay()
    {
      await Task.Run(() =&gt;
      {
        string temp = Factorial.ToString();

        if (Factorial &gt;= 1000)
        {
          Display = $"{Value}! = {temp[0]}.{temp.Substring(1, 3)}e{temp.Length - 1}";
        }
        else
        {
          Display = $"{Value}! = {temp}";
        }

        OnPropertyChanged("Display");
      });
    }

    public string FullView =&gt; $"{Value}! = {Factorial}";

    public override string ToString()
    {
      return Display;
    }
  }
</code></pre>

<p>that reduces the view of each number to something understandable for humans and maintainable for the rendering system.</p>

<p>A test view with a button, a text box for the count of numbers to add and the result list could look like:</p>

<pre><code>  &lt;DockPanel&gt;
    &lt;ToolBarTray DockPanel.Dock="Top"&gt;
      &lt;ToolBar&gt;
        &lt;Button Content="Next" Name="NextCm" Click="Button_Click" /&gt;
        &lt;TextBox Name="CountOfNumbers" Text="100" Width="100" TextAlignment="Right"/&gt;
      &lt;/ToolBar&gt;
    &lt;/ToolBarTray&gt;
    &lt;ListBox Name="NumberList"  
              VirtualizingPanel.IsContainerVirtualizable="True"
              VirtualizingPanel.IsVirtualizing="True"
              VirtualizingPanel.VirtualizationMode="Recycling"
              VirtualizingPanel.CacheLengthUnit="Item"
              VirtualizingPanel.CacheLength="10, 10"
              &gt;
      &lt;ListBox.ItemTemplate&gt;
        &lt;DataTemplate&gt;
          &lt;TextBlock Text="{Binding Display}"&gt;
            &lt;TextBlock.ContextMenu&gt;
              &lt;ContextMenu&gt;
                &lt;MenuItem Header="Copy" Name="ValueCopyCmd" Click="ValueCopyCmd_Click" /&gt;
              &lt;/ContextMenu&gt;
            &lt;/TextBlock.ContextMenu&gt;
          &lt;/TextBlock&gt;
        &lt;/DataTemplate&gt;
      &lt;/ListBox.ItemTemplate&gt;
    &lt;/ListBox&gt;
  &lt;/DockPanel&gt;
</code></pre>

<p>The <code>NumberList</code> List box is initialized as follows:</p>

<pre><code>ObservableCollection&lt;FactorialVM&gt; numbers = new ObservableCollection&lt;FactorialVM&gt;();
public MainWindow()
{
  InitializeComponent();

  NumberList.ItemsSource = numbers;
}
</code></pre>

<p>The click event for the button could then be something like:</p>

<pre><code>long currentValue = 1;
BigInteger currentFac = 1;
async private void Button_Click(object sender, RoutedEventArgs e)
{
  try
  {
    NextCm.IsEnabled = false;
    int nums = int.Parse(CountOfNumbers.Text);

    long stop = currentValue + nums;

    for (; currentValue &lt; stop; currentValue++)
    {
      currentFac *= currentValue;
      FactorialVM vm = new FactorialVM(currentValue, currentFac);
      await vm.SetDisplay();
      numbers.Add(vm);
      NumberList.ScrollIntoView(vm);
    }

  }
  finally
  {
    NextCm.IsEnabled = true;
  }
}
</code></pre>

<hr>

<p>And you could provide a copy command to copy a number to the clipboard:</p>

<pre><code>private void ValueCopyCmd_Click(object sender, RoutedEventArgs e)
{
  string text = ((sender as MenuItem).DataContext as FactorialVM).FullView;
  Clipboard.SetText(text);

}
</code></pre>

<p>You'll of course have to make properly validation of input and make a proper main View Model etc.</p>

<p>You can try the above in a standard WPF Window and you'll see it works smoothly. But be aware that the calculation of the factorial for numbers takes longer and longer time as well as the formatting of the display string will.</p>

<p>There may be possibilities for performance improvements, but the above is a way to go.</p>
    </div>