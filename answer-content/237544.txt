<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>In java is the preferred way of curly brace placing on the same line like you can see in code snippets in <a href="https://www.oracle.com/technetwork/java/javase/documentation/codeconventions-141270.html" rel="nofollow noreferrer">Oracles Style Guide</a>.</p>

<hr>

<p><code>reverse_string</code> has a <a href="https://blog.codinghorror.com/code-smells/" rel="nofollow noreferrer">type embedded</a> in its name which leads to a code smell.</p>

<p>The disadvantage is that if you want to change the type of the parameter you have to change the method name too.</p>

<p>Additional the invocation looks messy and redundant compared to a method name without the embedded type:</p>

<blockquote>
  <pre class="lang-java prettyprint-override"><code>if (user_string.equals(reverse_string(user_string)))
</code></pre>
</blockquote>

<p>compared to</p>

<pre class="lang-java prettyprint-override"><code>if (user_string.equals(reverse(user_string)))
</code></pre>

<hr>

<p>Code can be descriptive by choosing good variable names.</p>

<blockquote>
  <pre class="lang-java prettyprint-override"><code>Scanner input = new Scanner(System.in);
String user_string = input.nextLine().toLowerCase().replace(" ", "");
</code></pre>
</blockquote>

<p>I think <code>input</code> fits better than <code>user_string</code> to describe the input of a user:</p>

<pre class="lang-java prettyprint-override"><code>Scanner scanner = new Scanner(System.in);
String input = scanner.nextLine().toLowerCase().replace(" ", "");

if (input.equals(reverse(input))) { /*...*/ }
</code></pre>

<hr>

<blockquote>
  <pre class="lang-java prettyprint-override"><code>if (user_string.equals(reverse_string(user_string)))
{
  System.out.println("It is a palindrome.");
} else
{
  System.out.println("It is not a palindrome.");
}
</code></pre>
</blockquote>

<p>The two <code>System.out.println</code> are a bit like a duplication. You could save the message you want to print in a variable and then print it once to the console:</p>

<pre class="lang-java prettyprint-override"><code>String message;
if (user_string.equals(reverse_string(user_string))) {
  message = "It is a palindrome.";
} else {
  message = "It is not a palindrome.";
}

System.out.println(message);
</code></pre>

<p>Or even shorter with the <a href="https://docs.oracle.com/cd/E57185_01/IRWUG/ch21s03s01s02.html" rel="nofollow noreferrer">ternary operator</a>:</p>

<pre class="lang-java prettyprint-override"><code>String message = user_string.equals(reverse_string(user_string)) ? "It is a palindrome." : "It is not a palindrome.";
System.out.println(message);
</code></pre>

<hr>

<p>I know that this a small script but I would like to introduce to think in objects:</p>

<pre><code>public class Main {

  private static final WhiteSpaceFreeScanner scanner = new WhiteSpaceFreeScanner(new Scanner(System.in));

  public static void main(String[] args) {
    final Input input = scanner.nextLine();

    String message = input.isPalindrome() ? "It is a palindrome." : "It is not a palindrome.";
    System.out.println(message);
  }
}
</code></pre>

<pre class="lang-java prettyprint-override"><code>class WhiteSpaceFreeScanner {

  private final Scanner scanner;

  CustomScanner(Scanner scanner) {
    this.scanner = scanner;
  }

  Input nextLine() {
    String input = scanner.nextLine().toLowerCase().replace(" ", "");
    return new Input(input);
  }

}
</code></pre>

<pre class="lang-java prettyprint-override"><code>class Input {
  private final String value;

  public Input(String value) {
    this.value = value;
  }

  Input reversed() { /* ... */ }

  boolean isPalindrome() {
    return this.equals(reversed());
  }

  @Override
  public boolean equals(Object o) { /* ... */ }

  @Override
  public int hashCode() { /* ... */ }
}
</code></pre>
    </div>