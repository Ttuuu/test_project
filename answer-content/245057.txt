<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Ifs and nesting control loops</h1>
<p>Maybe this is just me but I would always enclose all <code>if</code> blocks within brackets <code>{}</code> to avoid <strong>ambiguity</strong> and possible logic errors:</p>
<pre><code>if($user_to != "new")
    $user_to_obj = new User($con, $user_to);

    if(isset($_POST['post_message'])) {

        if(isset($_POST['message_body'])) {

            $body = mysqli_real_escape_string($con, $_POST['message_body']);
            $date = date("Y=m-d H:i:s");
            $message_obj-&gt;sendMessage($user_to, $body, $date);

        }
    }
</code></pre>
<p>Try not to <strong>nest</strong> control loops. Here you have three levels of ifs but it is unnecessary, see below.</p>
<hr>
<h1>Expect the unexpected</h1>
<p>Remember that any site is going to be subjected to automated (and sometimes manual) <strong>attacks</strong>. You have to assume that requests can be tainted.
What I would do first in the code:</p>
<ol>
<li>verify that all expected form fields are present in the POST or GET requests</li>
<li>validate them</li>
<li>if one or more expected, non-optional fields are missing, then stop execution. This is more likely a malicious attempt (SQL injection, fuzzing) or a truncated request that should be considered corrupt. Your script should not continue if required fields are missing.</li>
</ol>
<p>I cannot test your code but I have the impression that it could behave unpredictably if the form submission is manipulated. Not necessarily a security risk but you should test.</p>
<p>You validate the fields <em>if they are present</em>, which is a good thing. But if they are not, certain parts of your code are not executed. You have to be sure this is what you want and the execution flow will not yield unpleasant surprises.</p>
<p>So, if you rewrite your code as suggested by doing early validation, you can simplify it. The three levels of nested ifs are no longer necessary: you can get rid of <code>if(isset($_POST['post_message'])) {</code> and <code>if(isset($_POST['message_body'])) {</code> since you've checked for those earlier in your code. And the code suddenly becomes more simple and readable don't you think ?</p>
<p>Do not repeat stuff like <code>$_POST['message_body']</code>, assign all your $_POST fields to variables instead.</p>
<hr>
<h1>Formatting</h1>
<p>Line spacing is not always consistent, sometimes too much:</p>
<pre><code>$user_data_query_result-&gt;close();

$stmt = $con-&gt;prepare("SELECT profile_pic FROM users WHERE username = ? ");

$stmt-&gt;bind_param("s", $userLoggedIn);

$stmt-&gt;execute();

$stmt-&gt;bind_result($img);

$stmt-&gt;fetch();

$stmt-&gt;close();
</code></pre>
<p>Or here:</p>
<pre><code>&lt;div class="user_details_left_right"&gt;
    
    &lt;a href="&lt;?php echo $userLoggedIn; ?&gt;"&gt;

        &lt;?php

            echo $first_name . " " . $last_name;

        ?&gt;

    &lt;/a&gt;
    
    &lt;br&gt;
    &lt;br&gt;

    &lt;?php echo "Likes: " . $num_likes; ?&gt;

&lt;/div&gt;
</code></pre>
<p>You can save a few lines = shorter code = less scrolling. Readability and good formatting are important. When the code is hard to understand, bugs or logic errors are more difficult to spot.</p>
<hr>
<h1>CSS</h1>
<p>You have a CSS class named <code>user_detailss</code> but there is <code>user_details_left_right</code>. I am not sure if this is intended or this is a typo. I would call it <code>user_details</code>. I don't see the definition of <code>user_details_left_right</code> in your code so I guess there is a separate style sheet already. Avoid inline CSS.</p>
<p>Indeed, the style sheet has to be kept separate. Remember, you'll probably have more than one style sheet. Also, users like to customize appearance. Having a choice of layouts and colors is an expected feature. Some sites also have high-contrast style sheets for visually-impaired people.</p>
<hr>
<h1>Localization</h1>
<p>Since you mentioned you are building a social network, <strong>localization</strong> is important. You are going to have users from different countries, with different languages and times zones. I would store all datetime values as UTC and render them to the user in the proper language, with the appropriate offset for their location.</p>
<p>This is a basic feature that is found in any forum software.</p>
<hr>
<h1>Templating</h1>
<p>You should consider using some sort of <strong>template</strong> system for your pages. Because evolution and maintenance is going to be tedious, unless your project will be no more than a dozen pages (which I doubt). Try to separate code (logic) from layout (presentation) as much as possible.</p>
<p>Some users will be using a desktop computer, other will be coming from a mobile device. Either go for <strong>responsive design</strong> or be prepared to serve different templates based on the user device. The style sheet can address some of these concerns.</p>
<p>A very long time ago, I was using HTML pages with tags like %USER_NAME% inside, and a PHP script would load the desired page and replace the tags with appropriate values. Then came solutions like smarty etc.</p>
    </div>