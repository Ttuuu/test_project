<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>An alternative approach may involve <strong>trading space for time</strong> and pre-calculate mappings between letter indexes and the individual words. That would make the actual lookup function perform at <span class="math-container">\$O(1)\$</span> with <span class="math-container">\$O(n)\$</span> sacrifice for space. This may especially be useful if this function would be executed many times and needs a constant time response for the same word. </p>

<p>And, as this is tagged with <a href="/questions/tagged/interview-questions" class="post-tag" title="show questions tagged 'interview-questions'" rel="tag">interview-questions</a>, I personally think it would be beneficial for a candidate to mention this idea of pre-calculating indexes for future constant-time lookups.</p>

<p>We could use a list to store the mappings between indexes and words:</p>

<pre><code>import re


class Solver:
    def __init__(self, word):
        self.indexes = []
        for match in re.finditer(r"([A-Z][a-z]*)", word):
            matched_word = match.group()
            for index in range(match.start(), match.end()):
                self.indexes.append(matched_word)

    def find_word(self, index):
        return self.indexes[index]


solver = Solver('CamelCaseString')
print(solver.find_word(2))  # prints "Camel"
print(solver.find_word(5))  # prints "Case"
</code></pre>
    </div>