<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>If LINQ-to-SQL and other ORMs are not possible to use in your organization. I would suggest to create a fixable solution that makes things easier for you for future updates. For instance, you could create a new class to handle SQL operations. This class will be a thin layer on top of the existing layer. Then, use it to design new methods that will reduce code redundancy, and recall them from the current ones. Then over the time, you'll see that this new handler will replace the current work, which will make your life easier. </p>

<p><code>DataTable</code> also another approach, but it depends on the server IO and how much data it's going to be processed, which consumes more memory.</p>

<p>for your question, you can do something like this : </p>

<pre><code>public IEnumerable&lt;IDataRecord&gt; Reader(string query,  SqlParameter[] parameters = null, CommandType commandType = CommandType.StoredProcedure)
{
    var globalConnection = (SqlConnection) sqlHelper.CreateConnection(); //sqlHelper is a nugget and not in my control

    using(var connection = new SqlConnection(globalConnection.ConnectionString)) // just create this scope, in case you don't want to the global connection to be disposed.
    using (var cmd = new SqlCommand(query, connection) { CommandType = commandType })
    {
        // if there is parameters add them
        if (parameters != null)
        {
            for (int x = 0; x &lt; parameters.Length; x++)
            {
                cmd.Parameters.Add(parameters[x]);
            }
        }

        connection.Open();

        using (SqlDataReader reader = cmd.ExecuteReader())
        {
            if (reader.HasRows)
            {
                foreach (var row in reader)
                {
                    yield return (DbDataRecord)(IDataRecord)row;
                }
            }
        }

    } // only this connection will be disposed
}
</code></pre>

<p>and then use it like this : </p>

<pre><code>public CustomReturn&lt;List&lt;ParkingSlipDetails&gt;&gt; GetAllParkingSlips(int offset, int fetch)
{
    try
    {
        var ParkingSlipDetailsList = new List&lt;ParkingSlipDetails&gt;();


    SqlParameter[] parameters = new SqlParameter[]
    {
        new SqlParameter{ ParameterName = "@CreatedBy", SqlDbType = SqlDbType.NVarChar, Value = gepservice.GetUserContext().UserId},
        new SqlParameter{ ParameterName = "@OffsetRows", SqlDbType = SqlDbType.NVarChar, Value = offset},
        new SqlParameter{ ParameterName = "@FetchRows", SqlDbType = SqlDbType.NVarChar, Value = fetch}
    };



        var reader = Reader(Constants.GetAllParkingSlips, parameters);

        foreach(var row in reader)
        {

            var pSlips = new ParkingSlipDetails();

            for(int x =0; x &lt; pSlips.GetType().GetProperties().Length; x++)
            {
                var column_name  = row.GetName(x);
                var column_type  = row.GetFieldType(x);
                var column_value = row.GetValue(x);

                // for columns that don't have identical naming with the model's properties 
                if(column_name.Equals(FileUploadConstants.FileURI, StringComparison.OrdinalIgnoreCase))
                {
                    column_name = "FileUri";
                }
                else if(column_name.Equals(FileUploadConstants.DocumentNumber, StringComparison.OrdinalIgnoreCase))
                {
                    column_name = "PONumber";
                }
                else if(column_name.Equals(FileUploadConstants.RecieptNumber, StringComparison.OrdinalIgnoreCase))
                {
                    column_name = "ReceiptNumber";
                }
                else if(column_name.Equals(FileUploadConstants.UploadDate, StringComparison.OrdinalIgnoreCase))
                {
                    column_value = Convert.IsDBNull(sqlDr[FileUploadConstants.UploadDate]) ? DateTime.UtcNow: Convert.ToDateTime(sqlDr[FileUploadConstants.UploadDate]);
                }                   
                else if(column_name.Equals("CreatedBy", StringComparison.OrdinalIgnoreCase))
                {
                    column_value = gepservice.GetUserContext().UserId;                      
                }

                    // Use refelection to set the values &amp; use Convert.ChangeType() to convert the data reader value to the property's datatype. 
                    pSlips.GetType().GetProperty(column_name).SetValue(pSlips, Convert.ChangeType(column_value, column_type), null);                                                        


            }


            ParkingSlipDetailsList.Add(pSlips);
        }


        return new CustomReturn&lt;List&lt;ParkingSlipDetails&gt;&gt; (ParkingSlipDetailsList);
    }
    catch(Exception ex)
    {
        LogError("ManageParkingSlipDataAccess", "GetAllParkingSlips", "Error", ex);
        return null;
    }
    finally
    {
        // there is no connection in this scope, since it's already disposed within Reader() method.

        //if (sqlConnection != null)
        //sqlConnection.Close();
    }
}
</code></pre>
    </div>