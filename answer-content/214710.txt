<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I would try to clean it up by extracting the tricky and repetitive day truncation logic into a reusable function. This would result in something like:</p>

<pre><code>    /* Creates a DateTime instance for the given year, month and day. 
     * It will truncate the possiblyTruncatedDay down to the largest number possible 
     * for the given month in case if it's out of bounds.
     * Eg. trying to create an illegal Feb 31 instance will fallback to Feb 28 or 29) */
    private static DateTime CreateTruncating(int year, int month, int possiblyTruncatedDay)
    {
        return new DateTime(
            year,
            month,
            Math.Min(possiblyTruncatedDay, DateTime.DaysInMonth(year, month)));
    }

    public static DateTime GetNextExpirationDate(DateTime finalExpirationDate)
    {       
        int expirationDay = finalExpirationDate.Day;
        int currentMonth = DateTime.Now.Month;
        int currentYear = DateTime.Now.Year;
        DateTime expirationDateThisMonth = CreateTruncating(currentYear, currentMonth, expirationDay);

        if (expirationDateThisMonth &gt;= DateTime.Now)
        {
           return expirationDateThisMonth;
        }

        DateTime dateInOneMonth = DateTime.Now.AddMonths(1);
        return CreateTruncating(dateInOneMonth.Year, dateInOneMonth.Month, expirationDay);
    }
</code></pre>
    </div>