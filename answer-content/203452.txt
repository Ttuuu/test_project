<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><code>class Element</code> looks an awful lot like <code>std::pair</code>; I wonder if you could just use <code>std::pair</code>, to eliminate some lines of code.</p>

<hr>

<pre><code>const V* null = nullptr;
// These two functions cause a compilation error when evaluated in a constexpr context.
const V&amp; DUPLICATE_KEYS_PRESENT() const { return *null ; }
const bool DOES_NOT_CONTAIN() const { return true; }

constexpr bool must_contain(const K&amp; key) const {
  return ContainsUnchecked(key) ? true : DOES_NOT_CONTAIN();
}
constexpr bool must_not_contain_duplicates() const {
  return AllAreUnique() ? true : DUPLICATE_KEYS_PRESENT();
}
</code></pre>

<p>Rather than all this rigmarole, why not just <code>throw</code>? That's equally non-constexpr, and has the benefit of not (segfaulting|returning a wrong answer) when you're <em>not</em> in a constexpr context. Thus:</p>

<pre><code>constexpr bool must_contain(const K&amp; key) const {
  return ContainsUnchecked(key) ? true : throw "oops";
}
constexpr bool must_not_contain_duplicates() const {
  return AllAreUnique() ? true : throw "oops";
}
</code></pre>

<p>Check the <code>sizeof(ConstMap&lt;int,int,10&gt;)</code> before and after getting rid of the (non-<code>static</code>) <code>const V *null</code>, by the way!</p>

<hr>

<p>As einpoklum says, if you really want to make your code shorter and simpler and you already know that what's making it long and complicated is recursive templates, then you should try to eliminate those recursive templates! (I have <a href="https://quuxplusone.github.io/blog/2018/07/23/metafilter/" rel="nofollow noreferrer">a blog post on the subject</a>.) In this case it's easy because the Standard Library already gives us <code>std::array</code>:</p>

<p>It would end up looking something like this (UNTESTED CODE).</p>

<pre><code>template&lt;class K, class V, int size&gt;
class ConstMap {
  std::array&lt;std::pair&lt;K, V&gt;&gt; data_;

public:
  template&lt;class... Elements&gt;
  constexpr ConstMap(Elements... elements) : data_{std::move(elements)...} {}

  constexpr bool AllAreUnique() const {
      // This could easily be 2x faster but I am lazy
      for (auto&amp;&amp; a : data_) {
          for (auto&amp;&amp; b : data_) {
              if (&amp;a != &amp;b &amp;&amp; a.first == b.first) return false;
          }
      }
      return true;
  }
  constexpr bool Contains(const K&amp; key) const {
      return std::find_if(data_.begin(), data_.end(), [](const auto&amp; elt){
          return elt.first == key;
      }) != data_.end();
  }
  constexpr const V&amp; Get(const K&amp; key) const {
      auto it = std::find_if(data_.begin(), data_.end(), [](const auto&amp; elt){
          return elt.first == key;
      });
      if (it != data_.end()) return it-&gt;second;
      throw "not found";
  }
};
</code></pre>

<p>Incidentally, I don't see why you bother to check <code>must_not_contain_duplicates()</code> over and over. Surely you should just check that one time in the constructor, if ever! And in fact there's no real reason your thing <em>couldn't</em> hold duplicates; there's no particular invariant that would break, is there? So just let go and let it.</p>

<p>But if you want to enforce that invariant, then you'd do it like this:</p>

<pre><code>  template&lt;class... Elements&gt;
  constexpr ConstMap(Elements... elements) : data_{std::move(elements)...} {
      if (not AllAreUnique()) throw "oops";
  }
</code></pre>

<hr>

<p>Speaking of invariants... what you've made here is not a <em>map</em> in any meaningful sense. At best it's a <em>flatmap</em>, and honestly I'd just tell it like it is: it's an <em>array</em>.</p>

<p>A <em>map</em> would support faster-than-O(N) lookup: either binary search (that being a <code>TreeMap</code> in Javaspeak, or a <code>std::map</code> in C++) or by hashing (that being a <code>HashMap</code> in Javaspeak, or <code>std::unordered_map</code> in C++). If all it has is linear search, then it's an <em>unsorted array</em>...</p>

<p>...or <code>std::array</code> in C++. Not coincidentally, what we ended up with was a really thin wrapper around <code>std::array</code>!</p>
    </div>