<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I think your performance problems at 10**6 elements start here:</p>

<pre><code>for i in range(3, int(num**(1/2)) + 1 , 2):
</code></pre>

<p>This generates a list of numbers that you then build a set of multiples from and remove those multiples from the numbers set.  But this generates a set [3,5,7,9,11,13,15,...] so when you've removed all the multiples of 3 you still try and remove multiples of [9,15,21,...] all of which went when you removed the multiples of three.</p>

<p>In a classic implementation of sieve you would find the next smallest prime and remove that, then find the next smallest prime and remove that until you get to the square root of num.</p>

<p>For example with num = 25 :</p>

<ul>
<li>[], [3,5,7,9,11,13,15,17,19,21,23,25] -- remove multiples of 3</li>
<li>[3], [5,7,11,13,17,19,23,25] - 5 is next lowest so remove its   multiples </li>
<li>[3,5], [7,11,13,17,19,23] - we've reached the square root
of num, only primes left</li>
</ul>

<p>So after each removal you want to find the new minimal element left in numbers but the problem with the set is that it's unordered so operation like min() is an O(N) operation, the entire set has to be scanned.  You may be able to get round this by looking for an OrderedSet implementation, in which case each time you find a prime you remove it's multiples, remove the prime itself to a separate set say, and the next prime to remove is the minimal value in the numbers set.</p>

<p>As Peilonrayz points out in a comment, when you start to get toward 10*8 elements you need to think about how much memory these sets are going to need.  You might well need a data structure that uses a lot less memory.</p>
    </div>