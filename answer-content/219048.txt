<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I like @toby-speight's answer (and have up-voted). He's reviewed your code. 
Here's the result of scratching my head for an hour while driving home FWIW.<br>
One up-side is it should deal with all ints.<br>
Temporary (working) storage requirement is O(1).<br>
Time complexity obviously a lot worse - I estimate ~O(nlog n) but haven't put too much thought into it.
E&amp;OE.</p>

<pre><code>/*  THE APPROACH
 *  ************
 *  This is not exactly a code review, but an algorithm suggestion
 *  Based on trading off between
 *    (i)   O(n) intermediate storage (for counts) and
 *    (ii)  reducing storage at the cost of increasing time-complexity
 *  Obviously I'm going down rabbit hole (ii) (given points 1 &amp; 2 following your code)
 *  Thought process something like this...
 *  - Not allowed to sort
 *  - Can't keep counts
 *  - How to search?
 *    - Need max and min entries, costing 1 pass over the array (count n)
 *    - Worst-case search is binary "chop", costing O(log n) PASSES (O(n log n) (hope I've got that thumb-thuck right;-)
 *    - Improvement maybe possible... let's see how we go
 *  - Note adopted definition: median of 1,2,3,4 (even number of data points) is (2+3)/2
*/

#include &lt;iostream&gt;
#include &lt;vector&gt;
#include &lt;climits&gt;

size_t nPasses = 0;

void FindMinMax(const std::vector&lt;int&gt;&amp; rgint, int&amp; min, int&amp; max)
{
  min = max = rgint[0];
  for (auto i : rgint)
  {
    if (i &lt; min) 
      min = i;
    else if (i &gt; max) 
      max = i;
  }
}

struct DataPointInfo
{
  double Value{};
  int low{};
  int high{};
  int nearestBelow = INT_MIN;
  int nearestAbove = INT_MAX;
  size_t countBelow = 0;
  size_t countEqual = 0;
  size_t countAbove = 0;
};

void AboveBelow(const std::vector&lt;int&gt;&amp; rgint, DataPointInfo* pguess)
{
  pguess-&gt;countAbove = pguess-&gt;countBelow = pguess-&gt;countEqual = 0;
  pguess-&gt;nearestBelow = INT_MIN;
  pguess-&gt;nearestAbove = INT_MAX;
  for (auto i : rgint)
  {
    if (pguess-&gt;Value &gt; i)
    {
      pguess-&gt;countBelow++;
      if (i &gt; pguess-&gt;nearestBelow) 
        pguess-&gt;nearestBelow = i;
    }
    else if (pguess-&gt;Value &lt; i)
    {
      pguess-&gt;countAbove++;
      if (i &lt; pguess-&gt;nearestAbove) 
        pguess-&gt;nearestAbove = i;
    }
    else pguess-&gt;countEqual++;
  }
}

double FindMedian(const std::vector&lt;int&gt;&amp; rgint)
{
  int min, max;
  FindMinMax(rgint, min, max);
  nPasses++;
  DataPointInfo dpi{ (static_cast&lt;double&gt;(min) + max) / 2, min, max };
  do
  {
    AboveBelow(rgint, &amp;dpi);
    nPasses++;
    if (dpi.countBelow &lt;= dpi.countAbove + dpi.countEqual &amp;&amp; dpi.countBelow + dpi.countEqual &gt;= dpi.countAbove) 
      return dpi.countEqual &gt; 0 ? dpi.Value : (static_cast&lt;double&gt;(dpi.nearestBelow) + dpi.nearestAbove) / 2; //  found
    if (dpi.countBelow &lt; dpi.countAbove)  //  must be "to the right"
      dpi.low = dpi.nearestAbove;
    else  //  must be "to the left"
      dpi.high = dpi.nearestBelow;
    dpi.Value = (static_cast&lt;double&gt;(dpi.low) + dpi.high) / 2;
  } while (true);
}

int main()
{
  const std::vector&lt;int&gt; testData{ 1,2,3,8,3,2,3,5,0,1,2,7,6,5,4,2,3,4,5,9 };
  double median = FindMedian(testData);
  std::cout &lt;&lt; median &lt;&lt; " found in " &lt;&lt; nPasses &lt;&lt; " passes over the dataset";
}
</code></pre>
    </div>