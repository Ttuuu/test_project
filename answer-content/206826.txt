<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your code doesn't compile. As such it fails any reasonable job interview unless you were writing it without the aid of a compiler.</p>

<hr>

<p>As for the design:</p>

<pre><code>+-&gt;[Product]&lt;&gt;--&gt;[Region]&lt;&gt;--&gt;[Store]&lt;&gt;--+
|                                        |
+----------------------------------------+
</code></pre>

<p>The cyclical nature of the design is problematic. This code will leak memory all over the place unless <em>very</em> carefully handled.</p>

<hr>

<pre><code>struct ResourceAllocation {
    let resource: Resource
    let amount: Int
}
</code></pre>

<p>I am not a fan of the above at all... What on earth is "1" milk? Is that a pint, a cup, a teaspoon? What about "1" sugar.</p>

<hr>

<p>Why the <code>MenuHandlerType</code>? A protocol that has no users is kind of useless, even if there are classes/struct that conform to it.</p>

<hr>

<p>I see that <code>MenuHandler.add(_:to:)</code> allows users to add a product to a region even if the product isn't accepted in that region. The method expects its user's to abide by the rules.</p>

<p>Instead of the Product having an <code>acceptedRegions</code>, I would rather see maybe the Region have an <code>acceptableRecourses</code>.</p>

<hr>

<p>Sometimes you put a space before a colon and sometimes you don't. Pick one style and stick with it. The official standard is no space before the colon.</p>

<hr>

<p>You have asked for comments about your functions.</p>

<h3><code>Region.init(id:name:)</code></h3>

<p>This function returns without initializing all stored properties. That's a compile time error.</p>

<h3><code>MenuHandler.init(regions: [Region])</code></h3>

<p>What is to stop a user from accidentally sending a dictionary where the key (RegionID) and the value's ID don't match? This is very dangerous. I would rather see it written with guarantees that this can't happen:</p>

<pre><code>init(regions: [Region]) {
    guard Set(regions.map { $0.id }).count == regions.count else { fatalError("No regions allowed with duplicate IDs") }
    self.regions = Dictionary.init(grouping: regions, by: { $0.id })
        .mapValues { $0.first! }
}
</code></pre>

<h3><code>func MenuHandler.add(_ product: Product, to region: Region)</code></h3>

<p>Given that the region already has to exist inside the <code>MenuHandler</code> before this function can be called, and especially given that you only use the <code>id</code> of the Region object passed in, you don't actually need to send an entire Region object. Just send in the Product and the RegionID.</p>

<p>Also, this function unconditionally adds a product to a valid region. This is where the guard to ensure that the product is allowed in the region should be.</p>

<p>As an aside, RegionID is merely a typealias for a String. A user could easily accidentally pass in a ProductID or a store ID (or a product name for that matter) instead of a RegionID. I would rather see RegionID (and all the other IDs for that matter) be turned into a legitimate type:</p>

<pre><code>struct RegionID: RawRepresentable {
    let rawValue: String 
}
</code></pre>

<p>This way, there can be no confusion and sending the wrong ID type will be a compile time error.</p>

<h3><code>func MenuHandler.add(_ product: Product, to store: Store, in region: Region)</code></h3>

<p>Again, only the ids of the region and store are used. If that's all the function needs then that's all that needs to be passed into it. And BTW, you forgot to actually <em>do</em> anything in this function.</p>

<h3><code>func MenuHandler.add(_ snack: Snack, to product: Product)</code></h3>

<p>This function isn't implemented either. I can only assume that, like it's previous functions, it looks up the product by ID and sets the Snack object in it. It doesn't <em>add</em> a snack, because there can be only one, it <em>sets</em> the snack. Maybe it should be called <code>set(_:to:)</code> instead.</p>

<hr>

<p>I'm also concerned about the lack of access restrictions on any of the properties. When I see class invariants implied by the code, but no way to ensure that those invariants always hold, I get nervous about the code's integrity. At minimum, I would expect to see a <code>private (set)</code> restriction on both of MenuHandler's properties.</p>

<hr>

<p>Another side note, none of these functions have any real behavior; they just wire up the objects in question. In other words, this code doesn't actually <em>do</em> anything. I would question any requirements document that asks me to write an app that doesn't actually do anything.</p>
    </div>