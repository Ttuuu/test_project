<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The comment</p>

<blockquote>
<pre><code># disable shellcheck information SC2016 globally for the script
# link to wiki: https://github.com/koalaman/shellcheck/wiki/SC2016
# reason: the script's main parts use constructs like that
</code></pre>
</blockquote>

<p>doesn't add anything.  Instead, it should summarize what <code>SC2016</code> <em>is</em>, (instead of requiring us to follow a link that's outside our control), and <em>why</em> the script needs to use the constructs it warns about.</p>

<p>I found only one line where we have text in single quotes that looks like parameter expansion, so we can greatly reduce the scope of the suppression:</p>

<pre><code>    if [ "${#}" -ne 3 ]
    then
        # $1, $2 and $3 are to be shown literally in this message
        # shellcheck disable=SC2016
        printf 'print_error_and_exit internal error\n\n\tWrong number of arguments has been passed: %b!\n\tExpected the following 3:\n\t\t$1 - exit code\n\t\t$2 - error origin\n\t\t$3 - error message\n\nexit code = 1\n' "${#}"
        exit 1
    fi
</code></pre>

<p>Similarly, consider this suppression:</p>

<blockquote>
<pre><code># in this function, the SC2120 warning is irrelevant and safe to ignore
# link to wiki: https://github.com/koalaman/shellcheck/wiki/SC2120
# shellcheck disable=SC2120
</code></pre>
</blockquote>

<p>It can be more helpfully commented:</p>

<pre><code># Don't warn that no caller passes arguments - that's the point of the test
# shellcheck disable=SC2120
</code></pre>

<p>Although, TBH, I wouldn't waste effort checking that the caller hasn't passed arguments we won't use - just ignore them, as do standard commands such as <code>true</code> or <code>false</code>.</p>

<p>Finally,</p>

<blockquote>
<pre><code># in this test, the SC2181 information is safe to ignore
# link to wiki: https://github.com/koalaman/shellcheck/wiki/SC2181
# shellcheck disable=SC2181
</code></pre>
</blockquote>

<p>becomes:</p>

<pre><code># Testing $? is clearer than embedding preceding pipeline here
# shellcheck disable=SC2181
</code></pre>

<hr>

<p>The test for sufficient space is dubious - even if the space exists now, we can't be sure that it will still be there a few cycles later when we actually write the file (or we might be out of inodes, or we might have reached the user's quota, or any number of issues).  It's better to attempt to write the output, and recover gracefully if we fail (e.g. remove partly-written files).</p>
    </div>