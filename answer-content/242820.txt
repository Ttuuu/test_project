<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You have conceived a theoretical model that works. And avoids sorting.</p>

<ul>
<li>Tiers by frequency</li>
<li>Every tier contains letters of that frequency</li>
</ul>

<p>It will come at no surprise, that moving a char from on frequency's bin to the next frequency's bin will cost at least as much as sorting. But it is a nice mechanism
one sees too rare, and might have its application in vector operations, GPUs or whatever.</p>

<ol>
<li><p>Improved could be the names. "Tier" one inclines to love, and might be apt, but does the term help in understanding the code?</p></li>
<li><p>Use if possible more general interfaces implemented by specific classes, like <code>List&lt;T&gt; list = new ArrayList&lt;&gt;();</code>. This is more flexible, when passing to methods, reimplementing with another class.</p></li>
<li><p>The comment to remain is for adding null for the frequency 0.</p></li>
<li><p>For characters in a tier use a <code>Set</code>. As implementation I used a <code>TreeSet</code> which is sorted to give nicer output.</p></li>
<li><p>Use as index not <code>i</code> but rather <code>freq</code>.</p></li>
<li><p>Moving from one frequency to the next higher can be done in two separate steps old+new. That makes the code more readable.</p></li>
</ol>

<p>so:</p>

<pre><code>public static String frequencySort(String s) {
    if (s.length() &lt;= 1) return s;

    List&lt;Set&lt;Character&gt;&gt; charsByFrequency = new ArrayList&lt;&gt;(); // stores characters at their proper frequency "tier"
    Map&lt;Character, Integer&gt; frequencyMap = new HashMap&lt;&gt;(); // maps the characters to their current frequency tier
    charsByFrequency.add(null); // entry for frequency 0 is not used

    for (char c : s.toCharArray()) {
        Character ch = c; // Does ch = Character.valueOf(c);
        int oldFreq = frequencyMap.getOrDefault(c, 0);
        if (oldFreq != 0) {
            charsByFrequency.get(oldFreq).remove(ch);
        }
        int freq = oldFreq + 1;
        if (freq &gt;= charsByFrequency.size()) {
            charsByFrequency.add(new TreeSet());
        }
        charsByFrequency.get(freq).add(ch);
        frequencyMap.put(ch, freq);
    }

    StringBuilder result = new StringBuilder();
    for (int i = 1; i &lt; charsByFrequency.size(); i++) { // iterate through tiers
        Set&lt;Character&gt; tier = charsByFrequency.get(i); // get tier
        for (Character c : tier) { // for each char in tier, append to string a number of times equal to the tier
            for (int j = 0; j &lt; i; j++) result.append(c);
        }
    }

    result.reverse(); // reverse, since result is currently in ascending order
    return result.toString();
}
</code></pre>
    </div>