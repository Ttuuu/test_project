<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Consider using two variables — an <em>x</em> and a <em>y</em> component — to store the direction.  The left and right turns are based on <a href="https://en.wikipedia.org/wiki/Cross_product" rel="nofollow noreferrer">cross product principles</a>.</p>

<p>Then, each forward move can be done using unconditional additions with no modulo operations.  An additional advantage is that the meaning of the direction is self-evident.  (It's not immediately obvious what <code>direction = 1</code> would mean in your code.)</p>

<pre><code>import java.util.Scanner;

public class CartesianAgent {
    public static void main(String[] args) {
        int x = 0, y = 0;
        int dx = 0, dy = 1;

        Scanner scanner = new Scanner(System.in);
        System.out.print("Introduce the command: ");
        String command = scanner.nextLine();

        for (int i = 0; i &lt; command.length(); i++) {
            switch (command.charAt(i)) {
              case 'l':
                int old_dx = dx;
                dx = -dy;
                dy = old_dx;
                break;
              case 'r':
                old_dx = dx;
                dx = dy;
                dy = -old_dx;
                break;
              case 'f':
                x += dx;
                y += dy;
                break;
            }
        }
        System.out.printf("Result: [%d,%d]%n", x, y);
    }
}
</code></pre>

<hr>

<p>Alternatively, store the direction as a single integer, and use lookup tables to decode it.</p>

<p>According to the convention you chose, <code>direction = 0</code> points up (in the +<em>y</em> direction), and turns left as <code>direction</code> increases (assuming a standard Cartesian grid that follows the right-hand rule).  I consider that to be weird.  You should either use</p>

<ul>
<li><code>direction = 0</code> points up, then turns clockwise as <code>direction</code> increases (like <a href="https://en.wikipedia.org/wiki/Heading_%28navigation%29" rel="nofollow noreferrer">navigation headings</a>), or</li>
<li><code>direction = 0</code> points to the right (in the +<em>x</em> direction), then turns counterclockwise as <code>direction</code> increases (like <a href="https://en.wikipedia.org/wiki/Polar_coordinate_system" rel="nofollow noreferrer">polar coordinates</a>).</li>
</ul>

<p>The modulo operation should be done when turning, rather than when advancing.</p>

<pre><code>import java.util.Scanner;

public class CartesianAgent {
    private static final int[] DX = {  0, +1,  0, -1 },
                               DY = { +1,  0, -1,  0 };

    public static void main(String[] args) {
        int x = 0, y = 0, direction = 0;

        Scanner scanner = new Scanner(System.in);
        System.out.print("Introduce the command: ");
        String command = scanner.nextLine();

        for (int i = 0; i &lt; command.length(); i++) {
            switch (command.charAt(i)) {
              case 'l':
                direction = (direction + 3) % 4;
                break;
              case 'r':
                direction = (direction + 1) % 4;
                break;
              case 'f':
                x += DX[direction];
                y += DY[direction];
                break;
            }
        }
        System.out.printf("Result: [%s,%s]%n", x, y);
    }
}
</code></pre>

<hr>

<p>Printing the result using <code>System.out.printf()</code> is a bit more readable than concatenating the string using <code>+</code>.</p>
    </div>