<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ol>
<li>It is generaly a bad idea to shadow a builtin (like <code>list</code>) by using a variable named after it.</li>
<li><p>You can use slices and array extension to simplify a bit your algorithm:</p>

<pre><code>def unpack(n, lst):
    result = lst[:n]
    return result + [None] * (n - len(result))
</code></pre></li>
<li><p>You can use the <a href="https://docs.python.org/2/library/itertools.html"><code>itertools</code></a> module to improve memory management and allow for any iterable:</p>

<pre><code>import itertools


def unpack(n, iterable):
    infinite = itertools.chain(iterable, itertools.repeat(None))
    return itertools.islice(infinite, n)
</code></pre></li>
<li><p>Python 3 has an extended unpacking capability that is closer to your needs:</p>

<pre><code>&gt;&gt;&gt; x, y, *z = [1, 2]
&gt;&gt;&gt; print(x, y, z)
1, 2, []
</code></pre></li>
</ol>
    </div>