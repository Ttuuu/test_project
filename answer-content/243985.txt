<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<p>I have a writeOnFile() method with too many fwrite().  ...</p>
</blockquote>
<p>A way to reduce <code>fwrite()</code> calls is to simply write all text to a large <code>char buffer[]</code> and then write that once per <code>for (int i = 0; i &lt; global_index; i++)</code> loop.</p>
<p>Use the return vale of <code>snprintf()</code> to speed calculation of next offset.  Use  <code>*printf()</code> features for padding.</p>
<pre><code>for (int i = 0; i &lt; global_index; i++) {
    char buf[N];
    int offset = 0;

    //snprintf(strNumber, 50, "%f", instants[i]);
    //fwrite(strNumber, 1, strlen(strNumber), out);
    //for (int i = 0; i &lt; strlen(header1) - strlen(strNumber); i++)
    //    fwrite(sp, 1, 1, out);

    //                                           vv---- pad on right
    int len = snprintf(buf+offset, N - offset, "%-*f", (int) (sizeof header1 - 1), instants[i]);
    assert(len &gt;= 0 &amp;&amp; len &lt; N - offset);
    offset += len;

    //snprintf(strNumber, 50, "%d", playing[i]);
    //fwrite(strNumber, 1, strlen(strNumber), out);
    //for (int i = 0; i &lt; strlen(header2) - strlen(strNumber); i++)
    //    fwrite(sp, 1, 1, out);

    len = snprintf(buf+offset, N - offset, "%-*d", (int) (sizeof header2 - 1), playing[i]);
    assert(len &gt;= 0 &amp;&amp; len &lt; N - offset);
    offset += len;

    ....

    fwrite(buf, 1, offset, out);
}
</code></pre>
<hr>
<p>Some other ideas to linearly improve performance.</p>
<p><strong>Why run down string again to find length?</strong></p>
<pre><code>//snprintf(strNumber, 50, "%f", instants[i]);
//fwrite(strNumber, 1, strlen(strNumber), out);
int len = snprintf(strNumber, 50, "%f", instants[i]);
fwrite(strNumber, 1, len, out);
</code></pre>
<p><strong>No need for <code>strlen()</code> for a constant string</strong></p>
<pre><code>char header1[] = "Instant        ";
// fwrite(header1, 1, strlen(header1), out);
fwrite(header1, 1, sizeof header1 - 1, out);
</code></pre>
<p><strong>Questionable "safe:" concerns</strong></p>
<p><code>sprintf()</code> is certainly faster (or as fast) as <code>snprintf()</code> ....</p>
<pre><code>// snprintf(strNumber, 50, "%d", playing[i]);
sprintf(strNumber, "%d", playing[i]);
</code></pre>
<p>... yet by some coding standards, better to use <code>snprintf()</code> even though <code>"%d"</code> will not overfill 50 <code>char</code> array.</p>
<p>What is curious about this "safe" code is the lack of checks of <code>fwrite()</code> return, a more likely issue.</p>
<pre><code>    // fwrite(strNumber, 1, strlen(strNumber), out);
    size_t nmemb = strlen(strNumber);
    size_t written = fwrite(strNumber, 1, nmemb, out);
    if (written != nmemb) Handle_Error();
</code></pre>
<hr>
<p><strong>Watch out for <em>unsigned</em> bugs</strong></p>
<p>Consider what happens when <code>strlen(header1) &lt; strlen(strNumber)</code></p>
<pre><code>for (int i = 0; i &lt; strlen(header1) - strlen(strNumber); i++)
</code></pre>
<p>is like</p>
<pre><code>for (int i = 0; i &lt; strlen(header1) + (SIZE_MAX - strlen(strNumber) - 1); i++)
</code></pre>
<p>due to <em>unsigned</em>  math wrap around.</p>
<p>Better coded as</p>
<pre><code>for (size_t i = strlen(strNumber); i &lt; strlen(header1); i++)
// or 
for (size_t i = strlen(strNumber); i &lt; sizeof header1 - 1; i++)
</code></pre>
<hr>
<p><strong>Watch out for <em>long</em> <code>"%f"</code></strong></p>
<p><code>"%f"</code>  may takes 100s  of characters for large FP values.</p>
<p>Consider <code>"%g"</code>.</p>
<hr>
<p>Curious that OP's code did not start with <code>fprintf()</code> rather than <code>snprintf()/fwrite()</code>.  This is another option.</p>
<p>Conceptually, <code>fprintf()</code> is effectively doing the <code>char buffer[]</code> mentioned above albeit without many <code>fwrite()/fprintf()</code> calls.</p>
<p>Switching to <code>fprintf()</code>  and using the suggested padding format will be sufficient for a first level speed-up.</p>
<p>For me, I do like the idea of writing a <em>line</em> with one I/O call.   It is symmetric with the idea of reading one <em>line</em> on input code with <code>fgets()</code>.</p>
    </div>