<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This script might get the job done, but it is a rather crude and inefficient hack.  Ideally, you should avoid polling every quarter second (or polling at all).  Also, I see no reason to write any files to <code>/tmp</code>.</p>

<hr>

<p>The ideal way to do it in Linux is to use udev.  If you don't want to <a href="http://reactivated.net/writing_udev_rules.html" rel="noreferrer">write a persistent udev rule</a>, or you don't have root access, you can run <code>/sbin/udevadm monitor --udev --property</code> as a child process, and trigger your test whenever <code>udevadm</code> offers output.  For a smarter script, you can can look for the <code>ACTION=add</code> line and take advantage of the information in the <code>SUBSYSTEM=…</code> and <code>DEVPATH=…</code> lines.  <code>DEVPATH</code> tells you path to the device within <code>/sys</code>.  But, even if you simply trigger your script only when any output appears, that would be a huge improvement over polling four times a second.</p>

<pre><code>import itertools
from subprocess import Popen, PIPE
import re
import sys

KEYVALUE_RE = re.compile(r'([^=]+)=(.*)')

def events(stream):
    """
    Read udev events from the stream, yielding them as dictionaries.
    """
    while True:
        event = dict(
            KEYVALUE_RE.match(line).groups()
            for line in itertools.takewhile(KEYVALUE_RE.match, stream)
        )
        if event:
            yield event

try:
    UDEVADM = ['/sbin/udevadm', 'monitor', '--udev', '--property']
    with Popen(UDEVADM, stdout=PIPE, encoding='UTF-8') as udevadm:
        for event in events(udevadm.stdout):
            if event['ACTION'] == 'add' and event.get('DRIVER') == 'usb-storage':
                print(event)
                break
except KeyboardInterrupt:
    sys.exit(1)
</code></pre>

<hr>

<p>On macOS, you can get similar information by running and monitoring the output of <code>/usr/sbin/diskutil activity</code>, if you are interested in storage devices.  Look for lines starting with <code>***DiskAppeared</code>.</p>

<pre><code>from subprocess import Popen, PIPE
import sys

try:
    DISKUTIL = ['/usr/sbin/diskutil', 'activity']
    with Popen(DISKUTIL, stdout=PIPE, encoding='UTF-8') as diskutil:
        # Ignore events that describe the present state
        for line in diskutil.stdout:            
            if line.startswith('***DAIdle'):    
                break
        # Detect the first subsequent "Disk Appeared" event 
        for line in diskutil.stdout:
            if line.startswith('***DiskAppeared'):
                print(line)
                break
except KeyboardInterrupt:
    sys.exit(1)
</code></pre>

<p>If you are interested in non-storage devices as well, then you could take advantage of the <a href="https://developer.apple.com/library/archive/documentation/Darwin/Conceptual/FSEvents_ProgGuide/Introduction/Introduction.html" rel="noreferrer">File System Events API</a>, possibly through the <a href="https://pypi.org/project/MacFSEvents/" rel="noreferrer">MacFSEvents</a> Python package or the cross-platform <a href="https://github.com/emcrisostomo/fswatch/wiki" rel="noreferrer">fswatch</a> program.</p>
    </div>