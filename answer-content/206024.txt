<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Review</h1>

<p>Hi and welcome to code review.</p>

<p>To help out I have numbered the lines of your code for reference.</p>

<p>I will ignore the <code>console.log</code> calls as they represent debugging code.</p>

<ul>
<li><p><strong>Line 3</strong> Bad function name. You are not uploading a file, you are loading the file and displaying it. That is two separate tasks and should be handled by two separate functions. </p>

<p>It is important that functions do one thing (their role) as describe in the function name. Two functions <code>loadCSV</code> and <code>displayCSV</code> and the directing of what to load and where to display is upto the event listing for the CSV file.</p></li>
<li><p><strong>Line 5</strong>. The variable 'data` is not used. You declare it again in the onload line 11. </p>

<p>You don't need to set a value to null if you have nothing to put in it yet. The default is <code>undefined</code>.</p></li>
<li><p><strong>Lined 6 &amp; 7</strong> The variables <code>file</code> and <code>reader</code> should be constants as they dont change.</p></li>
<li><p><strong>Line 10</strong> the variable <code>csvData</code> should be a <code>const</code> but you only use it once on  line 11. Would have been better to add <code>event.target.result</code> on line 11</p></li>
<li><p><strong>Line 11</strong> 'data' should be a <code>const</code>. You are storing the wrong thing in it. If you look at the rest of the code lines 12,13,16,18 you use <code>data.data</code>. If you assigned the second property <code>data</code> to <code>data</code> then you would not have to type <code>data.data</code> each time. </p>

<p>Thus the line becomes <code>const data = Papa.parse(event.target.result, {header : false}).data;</code></p></li>
<li><p><strong>Line 13</strong>  <code>const</code> for <code>arrayLength</code> but you don't need it. Tthe 'console.log' on line 12 will have the length and the for loop (line 15) is the only other place you use it. But next point means you don't need it at all.</p></li>
<li><p><strong>Line 15</strong> First the <code>i</code> should be a block scoped variable using <code>let</code> and <code>data.length</code> for the length eg <code>for(let i = 0; i &lt; data.length; i++) {</code></p>

<p>But rather than use a <code>for(;;)</code> loop you can use a <code>for of</code> loop. Thus line 15 becomes <code>for(const item of data) {</code> where <code>item</code> is each item data. It's a <code>const</code> as it is a new variable each iteration.</p></li>
<li><p><strong>Lines 17,18</strong> is a very poorly written. First line 18 should be indented one tab as it is a continuation of line 17. </p>

<p>The query <code>$("#header")</code> is very slow and you get the same element each time. Before the loop you should have found the element and stored it in a <code>const</code> saving heaps of time.</p>

<p>You append HTML to the page which means the browser must parse it, then do a reflow, for every item, so slow. It can be done much faster. See examples </p></li>
<li><p><strong>Lines 21,22,23</strong> (and line 9) There is a shorthand way of writing functions, called arrow functions. They help reduce code noise making the code smaller and easier to read.</p>

<p>They differ a little from standard functions but for now you can just change lines 21-23 to <code>reader.onerror = ()=&gt; alert('Unable to read ' + file.fileName);</code></p></li>
</ul>

<blockquote>
<pre><code> 1    document.getElementById('txtFileUpload').addEventListener('change', upload, false);
 2    
 3    function upload(evt) {
 4    
 5        var data = null;
 6        var file = evt.target.files[0];
 7        var reader = new FileReader();
 8        reader.readAsText(file);
 9        reader.onload = function(event) {
10            var csvData = event.target.result;
11            var data = Papa.parse(csvData, {header : false});
12            console.log(data.data);
13            var arrayLength = data.data.length;
14            console.log(arrayLength);
15            for (var i = 0; i &lt; arrayLength; i++) {
16                console.log(data.data[i]);
17                $("#header").append("&lt;li&gt;" + 
18                JSON.stringify(data.data[i]) + "&lt;/li&gt;");
19            }
20        };
21        reader.onerror = function() {
22            alert('Unable to read ' + file.fileName);
23        };
24    }
</code></pre>
</blockquote>

<h2>Rewrite</h2>

<p>The first version is the simplest one (incase you have not used promises before) but not perfect. The role of <code>loadCSV</code> is not quite just loading as it passes it on to <code>displayCSV</code>. But would require callbacks to do properly so it will do as is.</p>

<p>Both example don't need jQuery</p>

<pre><code>const uploadInputEl = document.getElementById('txtFileUpload')
uploadInputEl.addEventListener('change',event =&gt; { loadCSV(event.target.files[0]) });

// The following function would normally be part of some help utilities like jQuery
const createTag = type =&gt; document.createElement(type);

function loadCSV(file) {
    const reader = new FileReader();
    reader.readAsText(file);
    reader.onload = e =&gt; displayCSV(Papa.parse(e.target.result, {header : false}).data);
}

function displayCSV(data) {
    const list = createTag("ul"); 
    for (const item of data) { 
        list.appendChild(  
            object.assign(  
                createTag("li"), {textContent : JSON.stringify(item)}
        ));
    }
    document.getElementById("CSVContainer").appendChild(list);
}
</code></pre>

<p>The next uses promises to help keep the function roles succinct. <code>LoadCSV</code> only loads the data, and <code>displayCSV</code> creates the displayable content, that goes back to the event that started it all to place where it is wanted. </p>

<pre><code>const uploadInput = document.getElementById('txtFileUpload');
const CSVContainer = document.getElementById("CSVContainer");

uploadInput.addEventListener("change",fileListener);

function fileListener(event) { 
    loadCSV(event.target.files[0])
        .then(data =&gt; displayCSV(data)
            .then(list =&gt; CSVContainer.appendChild(list)) 
        );            
}

function loadCSV(file) {
    return new Promise(loaded =&gt; {
        const reader = new FileReader();
        reader.readAsText(file);
        reader.onload = e =&gt; loaded(Papa.parse(e.target.result, {header : false}).data);
    });
}

function displayCSV(data) {
    const list = tag("ul"); 
    for (const item of data) { 
        list.appendChild(tagText("li", JSON.stringify(item)));
    }
    return Promise.resolve(list);
}


// The next two would be part of a utils lib  and beyond the scope of the answer
// They do not represent well written code.    
const tag = type =&gt; document.createElement(type); 
const tagText = (type, text) =&gt; (type = tag(type), type.textContent = text, type);
</code></pre>
    </div>