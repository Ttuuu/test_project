<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Complexity</h2>
<p>The function <code>Rotate()</code> is too complex (does too much). There is a programming principle called the Single Responsibility Principle that applies here. The <a href="https://en.wikipedia.org/wiki/Single_responsibility_principle" rel="nofollow noreferrer">Single Responsibility Principle</a> states:</p>
<blockquote>
<p>that every module, class, or function should have responsibility over a single part of the functionality provided by the software, and that responsibility should be entirely encapsulated by that module, class or function.</p>
</blockquote>
<p>Another reason to keep functions simple is that they are easier to write, debug, read, and maintain. As a suggestion, all the error checking can be moved into another function that <code>Rotate</code> calls, leave only the rotation portion in the <code>Rotate</code> function itself.</p>
<h2>Be Consistent with the <code>if</code> Statements</h2>
<p>This is partially about style, but also about maintainability. The <code>if</code> statements that contain <code>throw</code> statements do not have blocks of code, but most of the other <code>if</code> statements do. As time goes on code needs to be maintained, many times a bug fix may be a simple insertion of a new statement, it is easier to maintain the code if the <code>if</code> and <code>else</code> statements have blocks of code even if only a single statement is within the block. This is also true for loops.</p>
<h2>Debug Code and Unused Code</h2>
<p>The code contains this comment block:</p>
<pre><code>        /* WIP for supporting other underlying types
        Type t = Enum.GetUnderlyingType(inEnum.GetType());
        List&lt;object&gt; values = new List&lt;object&gt;((object[])Enum.GetValues(inEnum.GetType()));
        var listType = typeof(List&lt;&gt;).MakeGenericType(t);
        */
</code></pre>
<p>When posting code for review, it is better remove unused code and put debug code into</p>
<pre><code>#if DEBUG
...
#endif // DEBUG
</code></pre>
<p>This makes it easier to review the code. Features that haven't been implemented are not meant for code reviews. Removing unused code makes the remaining code easier to read, debug and modify.</p>
    </div>