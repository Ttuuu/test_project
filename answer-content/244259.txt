<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>User interface decisions</h2>
<p>Having a <code>start</code> option is an odd choice. If the user started the program itself, is it likely that they don't want to start the rest of its logic?</p>
<h2>Successive concatenation</h2>
<p>This:</p>
<pre><code>decision_prompt = "\nWould you like to bring back a character you killed?"
decision_prompt += "\nOr would you like to kill off another character?"
decision_prompt += "\nEnter 'kill off' or 'bring back' -&gt;"
</code></pre>
<p>is better off as</p>
<pre><code>DECISION_PROMPT = '''
Would you like to bring back a character you killed?
Or would you like to kill off another character?
Enter 'kill off' or 'bring back' -&gt;'''
</code></pre>
<h2>Data structures</h2>
<p>It seems that the order of <code>killed_tv_characters</code> does not matter, so it should be a <code>set</code>, not a <code>list</code>.</p>
<h2>Input validation</h2>
<p>This:</p>
<pre><code>"""Checks user input for decision."""
if user_input in valid_decision_input and user_input == 'kill off':
    return user_input
elif user_input in valid_decision_input and user_input == 'bring back':
    return user_input
else:
    invalid_input == True
    print("Please enter a valid input!")
</code></pre>
<p>has a few problems:</p>
<ul>
<li><code>invalid_input == True</code> doesn't do what you think it does; it's a no-effect statement</li>
<li>This doesn't really benefit from the combination of <code>valid_decision_input</code> (which should be a <code>set</code>) and checking for specific strings</li>
<li>Early-return means that you don't need to use <code>else</code></li>
</ul>
<p>Here is an alternative:</p>
<pre><code>if user_input in valid_decision_input:
    return user_input
invalid_input = True
print("Please enter a valid input!")
</code></pre>
<p>Other concerns:</p>
<ul>
<li>This will set a local <code>invalid_input</code> unless you declare it <code>global</code> at the top</li>
<li>Rather than returning a string, consider returning an <code>Enum</code> to narrowly represent user choice</li>
</ul>
<h2>Booleans</h2>
<p>This:</p>
<pre><code>if tv_characters == False:
</code></pre>
<p>should be</p>
<pre><code>if not tv_characters:
</code></pre>
    </div>