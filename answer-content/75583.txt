<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The definition of the numbers array </p>

<pre><code>let numbers = [
    "37107287533902102798797998220837590246510135740250",
    ...
    "53503534226472524250874054075591789781264330331690"
]
</code></pre>

<p>takes a lot of space in the <code>euler13()</code> function and therefore distracts from
the relevant code. I would store the original data from the Project Euler problem 
into a text file and load the data from there. That also helps to avoid copy/paste
errors or other typos, e.g. when adding the quotation marks and commas.</p>

<p>For an Xcode command-line project this is done by adding a "Other-&gt;Empty" file "data.txt" to the project and adding this file to the "Copy Files" build phase:</p>

<p><img src="https://i.stack.imgur.com/AmoFP.png" alt="enter image description here"></p>

<p>Then you can copy/paste the given data into this file and load it at runtime,
so that the main function becomes</p>

<pre><code>func euler13() {
    let path = NSBundle.mainBundle().pathForResource("data", ofType: "txt")!
    let data = NSString(contentsOfFile: path, encoding: NSUTF8StringEncoding, error: nil)!
    let numbers = data.componentsSeparatedByString("\n") as [String]

    let number = largeSum(numbers)
    println(number)
}
</code></pre>

<p>Strictly speaking, your output is not correct, as the problem asks only for the
first 10 digits of the sum. This would be done with</p>

<pre><code>func euler13() {
    // ...

    let number = largeSum(numbers)
    println(number[number.startIndex ..&lt; advance(number.startIndex, 10)])
}
</code></pre>

<p>Storing the numbers in an integer array is a good choice, as working on a Swift
string directly would most probably be much slower. But I would separate
the <code>String &lt;-&gt; [Int]</code> conversions into separate functions:</p>

<pre><code>func stringToIntArray(str : String) -&gt; [Int] {
    return Array(str).reverse().map() { String($0).toInt()! }
}

func intArrayToString(num: [Int]) -&gt; String {
    return "".join(num.reverse().map() { String($0) } )
}
</code></pre>

<p>Your code computes the sum of two "large numbers" in an integer array and
then converts that array back to a string. In the next step the string is
converted to an integer array again for the next addition.</p>

<p>It would be more effective to use only integer arrays for all intermediate
results, and convert only the final sum back to a string.
Then <code>largeSum()</code> would look like this:</p>

<pre><code>func largeSum(numbers:[String]) -&gt; String {

    var result : [Int] = []
    for number in numbers {
        let num = stringToIntArray1(number)
        addToIntArray(&amp;result, num)
    }

    return intArrayToString(result)
}
</code></pre>

<p>Your <code>addToResult</code> functions adds only a single digit to a "large integer"
(represented as an <code>[Int]</code>) array. It is more effective to add two "large integers" in a single loop:</p>

<pre><code>func addToIntArray(inout result: [Int], num: [Int]) {
    var carry = 0
    let commonLength = min(result.count, num.count)
    var index = 0
    while index &lt; commonLength {
        let sum = result[index] + num[index] + carry
        result[index] = sum % 10
        carry = sum / 10
        index++
    }
    while index &lt; num.count {
        let sum = num[index] + carry
        result.append(sum % 10)
        carry = sum / 10
        index++
    }
    while index &lt; result.count &amp;&amp; carry &gt; 0 {
        let sum = result[index] + carry
        result[index] = sum % 10
        carry = sum / 10
        index++
    }
    if carry &gt; 0 {
        result.append(carry)
    }
}
</code></pre>

<p>On my computer, these changes reduced the time from 0.032 to 0.017 seconds.</p>

<p>Now profiling showed that much of the time is spent in the <code>stringToIntArray()</code>
function. The following version is significantly faster:</p>

<pre><code>func stringToIntArray(str : String) -&gt; [Int] {
    var num : [Int] = []
    let unicodeDigitZero = 48

    for digit in str.unicodeScalars {
        num.append(Int(digit.value) - unicodeDigitZero)
    }

    return reverse(num)
}
</code></pre>

<p>The computation time is now 0.006 seconds.</p>

<p>Ideas for further possible improvements:</p>

<ul>
<li>Store more than one decimal digit in each element of the <code>[Int]</code> array.
This would make the addition faster, but the string to array conversion 
more complicated.</li>
<li><em>Cheat</em>. The problem asks only for the first 10 digits of the sum.
That means that only a initial portion of the given numbers is actually needed.</li>
</ul>
    </div>