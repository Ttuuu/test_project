<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Different ways for finding even or odd numbers.</h2>
<p>While the modulo operator works fine for testing if a number is even or odd, a faster technique (which I would not expect a beginner to know about) is to use <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_AND" rel="nofollow noreferrer">bitwise AND - i.e. <code>&amp;</code></a>. Refer to <a href="https://blog.karlpurk.com/finding-odd-even-numbers-with-javascript-bitwise-operators/" rel="nofollow noreferrer">this article for a thorough explanation of how it works</a>.</p>
<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>function isEven(number) {
     return !(number &amp; 1);
}
for (let x = 0; x &lt; 6; x++) {
    console.log(x, ' is even: ', isEven(x));
}</code></pre>
</div>
</div>

<h1>Other review aspects</h1>
<h2>Filtering the array</h2>
<p>As Lucas already mentioned <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter" rel="nofollow noreferrer"><code>Array.prototype.filter()</code></a> can be used to simplify the addition of elements into <code>evenNumbers</code>. <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce" rel="nofollow noreferrer"><code>Array.prototype.reduce()</code></a>  could be used though it wouldn’t be as concise as each iteration would need to return the cumulative array, and the initial value would need to be set to an array.</p>
<p>While you didn't ask specifically about <a href="/questions/tagged/performance" class="post-tag" title="show questions tagged 'performance'" rel="tag">performance</a>, if you want the code to be as efficient as possible (e.g. it will be run millions (or more) times in a short amount of time, then avoid iterators - e.g. functional techniques with <code>array.filter()</code>, <code>array.map()</code>, as well as <a href="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Statements/for...of" rel="nofollow noreferrer"><code>for...of</code> loops</a> - use a <code>for</code> loop.</p>
<h2>Declaring variables</h2>
<p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const" rel="nofollow noreferrer"><code>const</code></a> could be used instead of <code>var</code> to avoid accidental re-assignment for both arrays, and if the variables were inside a block, the scope would be limited to the block. Note that "It's possible to push items into the array"<sup><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const#Examples" rel="nofollow noreferrer">1</a></sup> even if it is declared with <code>const</code>.</p>
<h2>Promoting user for input</h2>
<p><a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/prompt" rel="nofollow noreferrer"><code>window.prompt()</code></a> “displays a dialog with an optional message prompting the user to input some text.”<sup><a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/prompt" rel="nofollow noreferrer">2</a></sup>. A friendly message could be passed as the first argument to give the user information about the expected input- e.g.</p>
<pre><code>window.prompt(“Please enter a number”);
</code></pre>
<p>Additionally:</p>
<blockquote>
<p>Please note that result is a string. That means you should sometimes cast the value given by the user. For example, if their answer should be a Number, you should cast the value to Number.</p>
<pre><code>  const aNumber = Number(window.prompt("Type a number", ""));
</code></pre>
</blockquote>
<p><sup><a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/prompt#Notes" rel="nofollow noreferrer">3</a></sup></p>
<p>So the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number" rel="nofollow noreferrer"><code>Number</code> constructor</a> could be used to store numbers in the array.</p>
<pre><code>numList.push(Number(window.prompt("Please enter a number")));
</code></pre>
<h2>Sending output with <code>document.write()</code></h2>
<blockquote>
<p><strong>Note</strong>: Because <code>document.write()</code> writes to the document <strong>stream</strong>, calling <code>document.write()</code> on a closed (loaded) document automatically calls document.open(), <a href="https://developer.mozilla.org/en-US/docs/Web/API/document.open#Notes" rel="nofollow noreferrer">which will clear the document</a>.</p>
</blockquote>
<p><sup><a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/write" rel="nofollow noreferrer">4</a></sup></p>
<p>So don’t plan on using that function on scripts that run on webpages with DOM elements existing on the page, lest they get removed.</p>
    </div>