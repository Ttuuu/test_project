<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Hello and welcome to CodeReview! It looks like you're just getting started with OO programming in Python. On the plus side, you've organized your classes by separate areas of responsibility and areas of focus: separating the environment from the plants from the growth from the plotting. That's all good, solid OO design work.</p>

<p>Here are some things I think you could improve:</p>

<h3>Look beyond the surface</h3>

<p>You broke your classes down into obvious parts based on the problem statement. You didn't break them down (yet) based on the actual code you were writing. What's one thing you missed? Interacting with the user!</p>

<p>Every one of your classes tries to "talk" with the user: they contain <code>print</code> calls that send output, and <code>input</code> calls that collect input. You should consider writing some user interface code that handles all that talking for you, and then passing that object to the other parts of your program:</p>

<pre><code>user = UserInterface()
env = Environment(user)
growth = Growth(user)
...
</code></pre>

<p>This would let you identify common themes in your interaction with the user -- like repeating a question until you get an acceptable answer -- and coding them in a central place. It would also make it easier to write unit tests. If you can just swap out a "keyboard" object for a "scripted responses" object, its easier to control the program and set up test scenarios.</p>

<h3>Separate configuration data from creation</h3>

<p>Most of your classes ask the user questions to set up their data. I suggest that you pull the questioning out (see above) and start passing the setup data to the classes as part of object creation:</p>

<pre><code>zip_code = get_zip_code(user)
env = Environment(zip_code)
</code></pre>

<p>An alternative might be to create a <a href="https://en.wikipedia.org/wiki/Factory_method_pattern" rel="nofollow noreferrer"><em>factory method</em></a> to put the question, the validation, and possibly data conversion into the class with the object creation. Something like:</p>

<pre><code>plant = Plant.get_crop_from_user(user)

# in class Plant:
@classmethod
get_crop_from_user(cls, user):
    crops = ("lemon", "blueberry", "pear")
    choice = user.show_menu(crops, prompt="What kind of crops to grow?")
    return cls(crops[choice])
</code></pre>

<h3>Don't assume the internet is fast</h3>

<p>When I ran your program, connecting to the openweathermap site to get the weather data took several seconds. You should make it clear when you're doing something over the net, to prevent the user from thinking the program is hung up. Since you can't show a "spinning wheel" effect, settle for just printing a message about what you're doing:</p>

<pre><code>print("Stand by. Getting weather data from openweathermap.org")
</code></pre>

<h3>Know what to forget</h3>

<p>You use a lot of object attributes. A <em>lot</em> of attributes. A <strong>lot.</strong></p>

<p>Many of those attributes are never used again. They appear in a method in one or two lines, and then nowhere else in the file. </p>

<p>Those items should be replaced by local variables in the particular methods. For example, in <code>Environment.get_weather</code> you use <code>self.zip_code</code> which never gets used anyplace else. Your only use for it is to construct the query URL for your openweathermap call.</p>

<p>Also, you use <code>self.result</code>. You refer to it several times in in <code>get_weather</code> but it never gets used anyplace else in the code. Both of those could be local variables. Instead of <code>self.zip_code</code> just use <code>zip_code</code>. Instead of <code>self.result</code> use <code>result</code>. They will be valid until the end of the <code>get_weather</code> method, and then they'll be forgotten, which is fine since you only use them in the one place.</p>

<h3>Choose your names wisely</h3>

<p>In general, you did a pretty good job with names until you got to your <code>start_engine</code> function. Why did you go with <code>a</code>, <code>b</code>, <code>c</code>, and <code>d</code>? Why not <code>env</code>, <code>plants</code>, <code>growth</code>, and <code>plot</code>? </p>

<h3>Follow community standards</h3>

<p>As they write in <a href="https://en.wikipedia.org/wiki/They_Live" rel="nofollow noreferrer">the movie</a>:</p>

<p><img src="https://i.stack.imgur.com/clHY8.png" width="150" height="150"></p>

<p>You did a good job putting your code into the <code>start_engine</code> function, and then calling it:</p>

<pre><code>start_engine()
</code></pre>

<p>But <code>start_engine</code> doesn't mean anything to me, except as the last few words of the <a href="http://www.jefffoxworthy.com/jokes/redneck-1420" rel="nofollow noreferrer">US national anthem.</a></p>

<p>On the other hand, <code>main</code> definitely means something to a lot of people. And the <a href="https://docs.python.org/3/library/__main__.html" rel="nofollow noreferrer">officially suggested way</a> to call it is:</p>

<pre><code>if __name__ == '__main__':
    main()
</code></pre>

<p>This construction lets other modules import your code without automatically running the game. The only time the <code>if</code> statement will succeed is when you run the program like <code>python myfile.py</code>. If some other module (like a unit test driver) imports your code, the condition will fail and <code>main</code> won't be called. Always do this!</p>
    </div>