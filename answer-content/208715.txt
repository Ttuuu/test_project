<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>Is this just a fundamental limitation of classes and operator overloading that I have to live with, in return for the convenience?</p>
</blockquote>

<p>Not at all! C++ is all about abstractions with zero overhead. The design behind C++ is that it shouldn't leave any place for another language closer to the machine, while providing powerful abstractions to leverage native speed.</p>

<p>Further down a semi-complete review of your code (@TobySpeight already covered much ground).</p>

<pre><code>#ifndef COORD_H
#define COORD_H


#include &lt;iostream&gt;
#include &lt;fstream&gt;
#include &lt;iomanip&gt;
</code></pre>

<p>That seems a bit heavy on I/O headers</p>

<pre><code>#include &lt;cstring&gt;
#include &lt;complex&gt;
#include &lt;vector&gt;
#include &lt;map&gt;
#include &lt;stdlib.h&gt;
</code></pre>

<p>There's a bit of clean up to do here</p>

<pre><code>//#include "math.h"


// Useful reference: http://courses.cms.caltech.edu/cs11/material/cpp/donnie/cpp-ops.html


/*! \brief Class to store and manipulate points or position vectors in 3D, in Cartesian coordinates.*/
class vect3D
</code></pre>

<p>Why not a <code>struct</code>? Since your data is public anyway </p>

<pre><code>{
public:

    double x = 0.0, y = 0.0, z = 0.0;
    double tol = 1.0e-15;
</code></pre>

<p>What you're looking for is standardized here <a href="https://en.cppreference.com/w/cpp/types/numeric_limits/epsilon" rel="nofollow noreferrer">https://en.cppreference.com/w/cpp/types/numeric_limits/epsilon</a></p>

<pre><code>    // Constructors
    vect3D() {};
</code></pre>

<p>Why would you define such a useless constructor? Just default it:  <code>vect3D() = default</code></p>

<p>By the way, there's a useless superfluous semi-colon at the end of all your function definitions.</p>

<pre><code>    vect3D(std::initializer_list&lt;double&gt; RHS) { x = *RHS.begin(); y = *(RHS.begin()+1); z = *(RHS.begin()+2); };
</code></pre>

<p>If you conceive your vect3D as an aggregate (no user provided constructor, no virtual functions, and some other restrictions) you can use aggregate initialization directly (<code>vect3D v{1., 2., 3.};</code>) without having to define a brace-list constructor</p>

<pre><code>    vect3D(std::vector&lt;double&gt; &amp;RHS) { x = RHS[0]; y = RHS[1]; z = RHS[2]; };
</code></pre>

<p>So what if I provide a <code>vector</code> with one or two elements? Or even with six elements: that's clearly a mistake that won't be called out by the compiler.</p>

<pre><code>    vect3D(double *RHS) { x = RHS[0]; y = RHS[1]; z = RHS[2]; };
</code></pre>

<p>Same here. The advice is to provide an interface that is hard to misuse </p>

<p>By the way, did you wonder why you got a lot of warnings about a deprecated implicit copy constructor? do you see why? Think of what will happen when the default copy constructor will copy your vector member by member, your vector of pointers included</p>

<pre><code>    // Assignment
    vect3D&amp; operator=(const vect3D &amp;RHS) { x = RHS.x; y = RHS.y; z = RHS.z; return *this; };

    // Addition and subtraction
    vect3D&amp; operator+=(const vect3D &amp;RHS) { x += RHS.x; y += RHS.y; z += RHS.z; return *this; };
    vect3D&amp; operator-=(const vect3D &amp;RHS) { x -= RHS.x; y -= RHS.y; z -= RHS.z; return *this; };

    vect3D&amp; operator+=(const double &amp;RHS) { x += RHS; y += RHS; z += RHS; return *this; };
    vect3D&amp; operator-=(const double &amp;RHS) { x -= RHS; y -= RHS; z -= RHS; return *this; };

    vect3D operator+(const vect3D &amp;RHS) { return vect3D(*this) += RHS; };
    vect3D operator-(const vect3D &amp;RHS) { return vect3D(*this) -= RHS; };

    vect3D operator+(const double &amp;RHS) { return vect3D(*this) += RHS; };
    vect3D operator-(const double &amp;RHS) { return vect3D(*this) -= RHS; };


    // Scalar product and division
    vect3D&amp; operator*=(const double &amp;RHS) { x *= RHS; y *= RHS; z *= RHS; return *this; };
    vect3D&amp; operator/=(const double &amp;RHS) { x /= RHS; y /= RHS; z /= RHS; return *this; };

    vect3D operator*(const double &amp;RHS) { return vect3D(*this) *= RHS; };
    vect3D operator/(const double &amp;RHS) { return vect3D(*this) /= RHS; };

    friend vect3D operator*(double c, vect3D &amp;vec) { return vec*c; };
    friend vect3D operator/(double c, vect3D &amp;vec) { return vec/c; };


    // Comparisons
    bool operator==(const vect3D &amp;RHS) { return ((x - RHS.x &lt; x*tol) &amp;&amp; (y - RHS.y &lt; y*tol) &amp;&amp; (z - RHS.z &lt; z*tol)); };
    bool operator!=(const vect3D &amp;RHS) { return !(*this == RHS); };

    bool operator&gt;=(const vect3D &amp;RHS) { return ((x &gt;= RHS.x) &amp;&amp; (y &gt;= RHS.y) &amp;&amp; (z &gt;= RHS.z)); };
    bool operator&lt;=(const vect3D &amp;RHS) { return ((x &lt;= RHS.x) &amp;&amp; (y &lt;= RHS.y) &amp;&amp; (z &lt;= RHS.z)); };
    bool operator&gt;(const vect3D &amp;RHS) { return !(*this &lt;= RHS); };
    bool operator&lt;(const vect3D &amp;RHS) { return !(*this &gt;= RHS); };


    // Euclidean norm
    double norm2() { return std::sqrt(std::pow(x, 2) + std::pow(y, 2) + std::pow(z, 2)); };

    friend double norm2(vect3D const &amp;a) { return std::sqrt(std::pow(a.x, 2) + std::pow(a.y, 2) + std::pow(a.z, 2)); };
</code></pre>

<p>You don't need all those friends since x, y and z are public. That only clutters your class interface.</p>

<pre><code>    // Dot product
    friend double dot(vect3D const &amp;a, vect3D const &amp;b) { return a.x*b.x + a.y*b.y + a.z*b.z; };

    // Cross product
    friend vect3D cross(vect3D const &amp;a, vect3D const &amp;b) { return {(a.y*b.z - a.z*b.y), (a.z*b.x - a.x*b.z), (a.x*b.y - a.y*b.x)}; };


    // Print to stream
    friend std::ostream&amp; operator&lt;&lt;(std::ostream &amp;stream, vect3D const &amp;p) { return stream &lt;&lt; "(" &lt;&lt; p.x &lt;&lt; ", " &lt;&lt; p.y &lt;&lt; ", " &lt;&lt; p.z &lt;&lt; ")" &lt;&lt; std::flush; };


    // Function to explicitly return coordinates as an array of doubles, if needed
    void DoubleArray(double *v) { v[0] = x; v[1] = y; v[2] = z; return; };

    // To access coordinates using square bracket notation, for convenience
    std::vector&lt;double *&gt; p = std::vector&lt;double *&gt; {&amp;x, &amp;y, &amp;z};
</code></pre>

<p>I'm amazed that someone with a sane mind (at least I hope so) would have such an extravagant idea. I'm not sure that square bracket notation is
a convenience here -it might as well persuade the user that <code>vect3D</code> behaves like an array or a pointer- but even if you want to provide it, creating
a vector of pointers is crazy, without even mentioning what will happen when a user naively calls for the third dimension with <code>vec[3]</code> (and they will).
If you really want the bracket operator, implement it with a switch: <code>case 0: return x; ...; default: throw std::out_of_bonds();</code></p>

<pre><code>    double operator [] (int ii) const { return *(p[ii]); };

};

#endif
</code></pre>
    </div>