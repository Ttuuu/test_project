<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Just going to focus on your main program, not <code>cleanname.py</code>.</p>

<ul>
<li><strong>Import Order</strong>: This one is a personal preference. I like to have my imports ordered alphabetically. You can decide to follow this practice or not.</li>
<li><strong>Docstrings</strong>: Docstrings are used to help identify what your method is supposed to do. You should include one in every method you write.</li>
<li><strong>Unused variables/methods</strong>: You had a few unused variables and one method. You should remove these to improve the readability of your program, so someone doesn't have to look for 10 minutes (those without a linter, of course) before realizing it's never used in your code.</li>
<li><strong>Return expressions</strong>: 
<code>if url_status.status_code &lt; 400: return True ... return False</code> can be reduced to simply <code>return url_status.status_code &lt; 400</code>. Returning expressions is much better than returning <code>True/False</code>, improves readability greatly.</li>
<li><strong>Useless returns</strong>: If you're not expecting to return anything in a method, leave it as it is. Having the line <code>return None</code> is redundant, because any method that doesn't return anything automatically returns <code>None</code>.</li>
<li><strong>Using <code>f""</code> over <code>"".format(...)</code></strong>: This one is another preference, but having my strings formatted using <code>f"..."</code> looks much cleaner than using <code>.format</code>. It allows you to directly implement variables into your strings, rather than concatenating or using the format method.</li>
<li><strong>Return/append anonymously</strong>: In many places, you create a dict, change it, append to a list, then reset the dict. That's a lot of steps for adding a dict to a list. You can simply appending an anonymous dict <code>result.append({ ... })</code> or <code>return { ... }</code>, so you don't need to keep creating/resetting a dict you're only using in that method.</li>
<li><strong>Main guard</strong>: You should wrap any code that isn't in a function in a main guard. <a href="//stackoverflow.com/a/5544783">Here</a> is an answer that provides a deeper and more meaningful explanation.</li>
<li><strong>Constant Variable Names</strong>: Variables that are constants should be UPPERCASE.</li>
</ul>

<p><strong><em>Final Code</em></strong></p>

<pre><code>import os
import requests
from cleanname import clean_filename
from lxml import html

def check_url(url):
    """ Returns the status code being less than 400 """
    return requests.head(url).status_code &lt; 400

def get_list_of_chapters(url):
    """ Returns a list of chapters from the specified `url` """
    if check_url(url):
        response = requests.get(url).content
        tree = html.fromstring(response)
        path = r'//*/div[@id="chapterlist"]/table[@id="listing"]/tr/td/a'
        res = tree.xpath(path)
        result = []
        for i in res:
            result.append({
                'chapter': i.text,
                'url': WEBSITE_URL + i.attrib['href'],
                'name': i.tail
            })
        return result
    return None


def get_page_list(chapter_url):
    """ Returns a list of link to the page on `chapter_url` """
    res = requests.get(chapter_url).content
    path = r'//*/div[@id="selectpage"]/select[@id="pageMenu"]'
    tree = html.fromstring(res)
    data = tree.xpath(path)[0]
    page_links = [f"{i.attrib['value']}" for i in data]
    return page_links

def get_image_from_page(url):
    """ Gets the image from `url` """
    page_url = f"{WEBSITE_URL}{url}"
    res = requests.get(page_url).content
    path = r'//*/img[@id="img"]'
    tree = html.fromstring(res)
    result = tree.xpath(path)
    return {
        'page_name': result[0].attrib['alt'],
        'source': result[0].attrib['src']
    }


def download_image(image_url):
    """ Downloads image from `image_url` """
    return requests.get(image_url).content


def save_file(image_file, save_location, filename, save_img_format):
    """ Saves the `image_file` to `location` with the name `filename` """
    image_loc = os.path.join(save_location, filename) + save_img_format
    with open(image_loc, 'wb') as file:
        file.write(image_file)
    return os.path.isfile(image_loc)


def get_page_details(chapter_url):
    """ Gets the details about the page """
    page_details = get_page_list(chapter_url)
    result = []
    for page in page_details:
        details = get_image_from_page(page)
        result.append({
            'page_link': page,
            'page_name': details['page_name'],
            'source': details['source']
        })
    return result


if __name__ == '__main__':

    DIR_LOC = r''
    WEBSITE_URL = r'https://www.mangapanda.com'
    MANGA_URL = r'https://www.mangapanda.com/one-piece'

    MANGA_URL = r'https://www.mangapanda.com/akame-ga-kiru'
    STORING_LOCATION = r'C:\Users\prashra\Pictures\mangascrapper'
    MANGA_NAME = MANGA_URL.split('/')[-1]
    LOCATION = os.path.join(STORING_LOCATION, clean_filename(MANGA_NAME))
    CHAPTER_LIST = get_list_of_chapters(MANGA_URL)[:6]

    if not os.path.exists(LOCATION):
        print(f"Creating folder: {MANGA_NAME}")
        os.makedirs(LOCATION)

    for chapter in CHAPTER_LIST:
        name = rf"{chapter['chapter']}{chapter['name']}"
        chapter_path = os.path.join(LOCATION, clean_filename(name))
        print(chapter_path)
        if not os.path.exists(chapter_path):
            os.makedirs(chapter_path)
        chapter_details = get_page_details(chapter['url'])
        for _page in chapter_details:
            name, src = _page['page_name'], _page['source']
            img_format = f".{src.split('.')[-1]}"
            print(f"Saving image {name} in path {chapter_path}")
            image_data = requests.get(src).content
            save_file(image_data, chapter_path, name, img_format)
</code></pre>
    </div>