<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3><em>Refactoring in steps</em></h3>

<p><strong><em>Enumeration class</em></strong></p>

<p><code>Types</code> is too generic name for the <em>enum</em> representing <em>char types</em>. Renamed to <strong><code>CharTypes</code></strong>.<br>
Instead <code>CAP</code>, <code>SMA</code>, <code>DIG</code>, <code>SPE</code> as <em>enumeration members</em> are better replaced with a more common/familiar and comprehensive abbreviations/associations:<br><code>UPPER</code>, <code>LOWER</code>, <code>DIGIT</code> and <code>SPECIAL</code>.<br>
Since <code>string.ascii_uppercase</code> and other <code>string.*</code> are essentially just <em>string constants</em> - they can be easily set as <em>enumeration values</em>:</p>

<pre><code>class CharTypes(Enum):
    UPPER = string.ascii_uppercase     # Capital
    LOWER = string.ascii_lowercase     # Small
    DIGIT = string.digits              # Digits
    SPECIAL = '!()-.?[]_`~;:@#$%^&amp;*='  # Special
</code></pre>

<p>thus, making all intermediate re-mappings like <code>type_chars</code> and <code>types</code> (in <code>password_generator</code> function) redundant and unnecessary. </p>

<hr>

<p><strong><em><code>password_generator</code></em></strong> function</p>

<p>The function signature is slightly changed in arguments names to conform with <code>CharTypes</code> members:</p>

<pre><code>def password_generator(min_length=6, max_length=20, upper=1, lower=1, digits=1, special=1)
</code></pre>

<p><code>types</code> mapping is eliminated as redundant.</p>

<p><em>char counts</em> passed as arguments are gathered and summed at once:</p>

<pre><code>char_counts = (upper, lower, digits, special)
num_chars = sum(char_counts)
</code></pre>

<p>Avoid overwriting/assigning to function argument like <code>min_length = max(num_chars, min_length)</code> as <strong><code>min_length</code></strong> might be potentially referenced as <em>"original"</em> argument value (and relied on) in other places in the function's body.<br>
A safer way is assigning it to a separate variable:</p>

<pre><code>min_len = max(num_chars, min_length)
</code></pre>

<p><code>length</code> variable is renamed to <strong><code>target_length</code></strong> (to emphasize the <em>final</em> size).</p>

<p><code>char_list</code> is renamed to <strong><code>char_types</code></strong> as it's aimed to accumulate <code>CharTypes</code> enum members</p>

<p>Two <code>for</code> loops which performed <code>char_list.extend</code> and <code>char_list.append</code> are efficiently replaced with 2 <em>generators</em> which further joined/merged by <a href="https://docs.python.org/3/library/itertools.html#itertools.chain" rel="nofollow noreferrer"><code>itertools.chain</code></a> function:</p>

<pre><code>char_types = list(chain(*([c_type] * num for c_type, num in zip(CharTypes, char_counts)),
                        (choice(char_types_enums) for _ in range(target_length - num_chars))))
</code></pre>

<p>Furthermore, <code>itertools.chain</code> is smart enough to skip <em>empty</em> generators (if let's say there's no <em>remaining values to fill</em>).</p>

<p>The last <code>for</code> loop (accumulating password from random chars) is simply replaced with <code>str.join</code> call on generator expression:</p>

<pre><code>password = ''.join(choice(char_type.value) for char_type in char_types)
</code></pre>

<hr>

<p>The whole crucial functionality is now shortened to the following:</p>

<pre><code>import string
from enum import Enum
from random import randint, shuffle, choice
from itertools import chain


class PasswordError(Exception):
    pass


class CharTypes(Enum):
    UPPER = string.ascii_uppercase     # Capital
    LOWER = string.ascii_lowercase     # Small
    DIGIT = string.digits              # Digits
    SPECIAL = '!()-.?[]_`~;:@#$%^&amp;*='  # Special


def password_generator(min_length=6, max_length=20, upper=1, lower=1, digits=1, special=1):
    char_counts = (upper, lower, digits, special)
    num_chars = sum(char_counts)   # Number of mandatory characters
    min_len = max(num_chars, min_length)   # In case 'num_chars' is greater

    # If number of characters required for each possible char type
    # is greater than maximum possible length
    if min_len &gt; max_length:
        raise PasswordError(f'No password with the given criteria')

    target_length = randint(min_len, max_length)
    char_types_enums = list(CharTypes)  # get list of enums to pass `random.choice` call

    # List of char "types" comprised of: mandatory requirements + remaining values to fill
    char_types = list(chain(*([c_type] * num for c_type, num in zip(CharTypes, char_counts)),
                            (choice(char_types_enums) for _ in range(target_length - num_chars))))
    shuffle(char_types)

    password = ''.join(choice(char_type.value) for char_type in char_types)
    return password


if __name__ == '__main__':
    ....
</code></pre>

<p>Sample usage:</p>

<pre class="lang-none prettyprint-override"><code>Minimum number of characters required: &gt;? 10
Maximum number of characters possible: &gt;? 30
Number of capital letters required: &gt;? 5
Number of small letters required: &gt;? 4
Number of digits required: &gt;? 6
Number of special characters required: &gt;? 5
Number of passwords required: &gt;? 4
--------------------------------------------------

   Here are your passwords: 

32S%km3A^v04h9pwR-T7O;=0O
mh8a:38Q-pGS3PtGs)e0P1g)$(#0U1
z@a0r;b7v.~K!8S@R343J7L
Mie:8Ec0C=3Cz93HPHDFm_84#;6@
</code></pre>
    </div>