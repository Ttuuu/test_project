<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Some quick remarks:</p>

<ul>
<li><p>Don't name things "class", e.g. <code>HelperClass</code>.</p></li>
<li><p>Don't use Hungarian notation and give your variables meaningful names: <code>u_gvid</code> is a complete mystery to me.</p></li>
<li><p>I don't get why <code>CheckIfUserExists</code> and <code>CheckIfUnblocked</code> are <code>public</code>, and even less why they'd use <code>RedirectToAction</code>. I expect these methods to return a boolean, not to execute redirects etc.</p></li>
<li><p><code>NpgsqlConnection</code> and <code>NpgsqlCommand</code> don't follow the Microsoft naming guidelines: they are compound words, so the "s" in "sql" should be capitalized.</p></li>
<li><p>Don't write ADO.NET code. You're using 15+ lines to write something that could be expressed much simpler by using Dapper. The <code>var result = cmd.ExecuteScalar().ToString().ToLower();</code> and <code>if (result == "false")</code> bit is even worse. You don't provide us with the relevant SQL, so perhaps there is a good reason to return a boolean-like string, but I wouldn't be surprised if the query logic could be much simplified.</p></li>
<li><p><code>CheckIfUserExists</code> and <code>CheckIfUnblocked</code> are IMHO bad method names. To me they should be something like <code>DoesUserExist</code> and <code>IsUserUnblocked</code>, which are the kind of methods I'd expect to return a boolean.</p></li>
<li><p><code>CheckIfUserExists</code> should not execute <code>CreateUser</code>, unless you rename the method. And I wouldn't expect a method called <code>CreateUser</code> to return a boolean. Avoid this temptation by moving these methods to a service etc. instead of them being part of the controller. Keep your controllers as light as possible, things like data processing etc. should be handled by dedicated classes.</p></li>
<li><p>In <code>CheckIfUnblocked</code> you have a boolean: <code>var result = (bool)cmd.ExecuteScalar();</code>. Why then not simply return this instead of doing the whole <code>if (result) return true;</code> / <code>else return false;</code> dance? You spend six lines on something that could be expressed by a single one. </p></li>
</ul>
    </div>