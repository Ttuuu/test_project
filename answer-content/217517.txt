<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I see a couple places where there is a <code>for...in</code> loop and then the first line within the block checks to see if the key is not a property - e.g.</p>

<blockquote>
<pre><code>for (const key in state) {
  if (!state.hasOwnProperty(key)) {
    continue
  }
</code></pre>
</blockquote>

<p>and</p>

<blockquote>
<pre><code>for (const key in data.bags) {
  if (!data.bags.hasOwnProperty(key)) {
    continue
  }
</code></pre>
</blockquote>

<p>Did you consider using <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys" rel="nofollow noreferrer"><code>Object.keys()</code></a> to get the array of keys and iterating over those? Then perhaps the calls to <code>.hasOwnProperty()</code> could be eliminated.</p>

<hr>

<p>In the store actions method <code>init</code>, <code>state</code> is never re-assigned: </p>

<blockquote>
<pre><code>actions: {
  async init ({ commit }) {
    let state = {}
    await lf.iterate((value, key) =&gt; {
      state[key] = value
    })
    await commit('init', state)
</code></pre>
</blockquote>

<p>You could use <code>const</code> instead of <code>let</code> to declare <code>state</code>.</p>

<hr>

<p>I see two nearly identical lines:</p>

<blockquote>
<pre><code>/**
 * @type {Type[]}
 */
this.types = types.map((type) =&gt; Type[type.name.toUpperCase()])
</code></pre>
</blockquote>

<p>and shortly after that:</p>

<blockquote>
<pre><code>self.types = types.map((type) =&gt; Type[type.type.name.toUpperCase()])
</code></pre>
</blockquote>

<p>if that mapping happens frequently in your code, perhaps it would be wise to abstract that arrow function into a named function that can be referenced wherever needed.</p>

<hr>

<p>In the callback function subscribed on the store (in <code>persistPlugin</code>) the variable <code>value</code> is only used once after it is assigned:</p>

<blockquote>
<pre><code>const value = state[key]
  lf.setItem(key, value)
</code></pre>
</blockquote>

<p>That could be simplified to a single line:</p>

<pre><code>lf.setItem(key, state[key])
</code></pre>

<p>This would require less memory and one less line.</p>
    </div>