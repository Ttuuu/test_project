<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Note: although I hinted in a comment that there's a <code>O(n * K)</code> solution, I'm deliberately not going to give it to you (and I hope that by bumping the question to the front page I don't cause someone else to) because in my opinion the point of challenge websites is for you to learn by doing, and you will learn more effectively by figuring it out yourself with hints than by getting the solution on a plate. However, I do have some comments on your code.</p>

<blockquote>
<pre><code>class Solution:
    # @param A : list of strings
    # @param B : integer
    # @return an integer
</code></pre>
</blockquote>

<p>It's useful to document the expected type, but it's more useful to document the meaning. Here <code>B</code> is the <code>K</code> of the problem specification, but I shouldn't have to work that out myself. The parameters would benefit from descriptive names, and the <code>@return</code> should outline what the integer returned means.</p>

<blockquote>
<pre><code>    def LCPrefix(self, A, B):
        res = 0
        for i in xrange(len(A)):
            prev = A[i]
            prevLCP = len(A[i])
            for j in xrange(i, len(A)):
                prevLCP = self.getLCP(prev, A[j], prevLCP) 
                prev = A[j]
</code></pre>
</blockquote>

<p>There's a possible minor optimisation here: when <code>j == i</code> you already know the LCP, but you calculate it again. In my opinion it would be worth duplicating the simple test <code>if prevLCP &gt;= B: res += 1</code> before the loop, and only considering <code>j &gt; i</code>. As a bonus, you would no longer need to track <code>prev</code> because you would always be testing the common prefix of <code>A[j-1]</code> and <code>A[j]</code>. (Hint: does that give you any ideas for optimisation?)</p>

<p>Why the update to <code>prevLCP</code>? I can figure it out, but a comment (and a better name - because the value of <code>prevLCP</code> isn't the previous LCP) would be useful.</p>

<blockquote>
<pre><code>                if prevLCP &gt;= B:
                    res += 1
</code></pre>
</blockquote>

<p>An <code>else: break</code> clause here would not change the asymptotic complexity of your solution, but it would surely make it much faster in many test cases.</p>

<blockquote>
<pre><code>        return res % 1000000007
</code></pre>
</blockquote>

<p>I'll give you one more hint about improving the complexity: the fact that they want the answer modulo 10<sup>9</sup> is a really big clue that you shouldn't compute it solely via <code>res += 1</code>.</p>

<blockquote>
<pre><code>    def getLCP(self, A, B, upto):
</code></pre>
</blockquote>

<p>Document the parameters, and think about the names. <code>getLCP</code> implies to me that the return value should be the longest common prefix: i.e. a string. But it's actually an integer, and it might not even be the length of the LCP because of <code>upto</code>.</p>

<blockquote>
<pre><code>        i = 0
        lim = min(upto, len(B))
        while i &lt; lim:
            if A[i] != B[i]:
                break

            i += 1

        return i
</code></pre>
</blockquote>

<p>In the other method you used <code>xrange</code>: why not here?</p>

<pre><code>        lim = min(upto, len(B))
        for i in xrange(lim):
            if A[i] != B[i]:
                return i
        return lim
</code></pre>
    </div>