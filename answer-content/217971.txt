<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Reduce the inner loops iteration count.</h2>
<p>The problem is the inner loop is looping over too many items. The result is that you spend too much time processing data you know is irrelevant.</p>
<p>As the function should exit if it detects a position has made over 2 bribes, you need only have the inner loop check positions down 2 from the item you are checking, and not from the start of the line.</p>
<h2>Quicker solution</h2>
<p>It only requires a slight modification of your code, but as you have complicated the situation by calling an inner function <code>sort</code> the example has just removed the inner function.</p>
<p>The line <code>for (j = pos-2; j &lt; i; j++) {</code> is where the improvement is with <code>pos</code> being <code>item[i]</code> in your function.</p>
<pre><code>function minBribe(queue) {
    var bribes = 0, i, j;
    for (i = 0; i &lt; queue.length; i++) {
        const pos = queue[i], at = i + 1;
        if (pos - at &gt; 2) { return "Too chaotic" } 
        for (j = Math.max(0, pos - 2); j &lt; i; j++) {
            if (queue[j] &gt; pos) { bribes++ }
        }
    } 
    return bribes;
}
</code></pre>
<p>This brings the solution down from <span class="math-container">\$O(n^2)\$</span> to near <span class="math-container">\$O(n)\$</span> however the number of bribes is a factor so its closer to <span class="math-container">\$O(n + (m^{0.5}/2))\$</span> where <span class="math-container">\$m\$</span> is the number of bribes. (this is only an approximation)</p>
    </div>