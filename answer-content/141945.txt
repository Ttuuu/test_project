<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This is my attempt at trying to convert it to one large list comprehension, I got pretty far but things just stopped going my way... to many nested loops (and not enough pre-planning) and hard to keep track of conceptually. </p>

<pre><code>grouped_workers = defaultdict(list)
specializations = list(x[0] for x in groupby(list_of_workers, lambda x :x.specialization.name))
cities = list(set(x[0] for x in groupby(list_of_workers, lambda x :x.city.name)))
for i in list_of_workers:
    grouped_workers['workers'] = [{'name':x,'cities':[{'name':y,'workers':[{'name':p.name,'building_points':p.building_points} for p in list_of_workers if p.specialization.name == x and p.city.name ==y]} for y in cities ]} for x in specializations]
</code></pre>

<p>output:</p>

<pre><code>{'workers': [{'cities': [{'name': 'Berlin',
                      'workers': [{'building_points': 4,
                                   'name': 'Donald Duck'}]},
                     {'name': 'Paris',
                      'workers': [{'building_points': 3,
                                   'name': 'Homer Simpson'}]}],
          'name': 'Engineer'},
         {'cities': [{'name': 'Berlin', 'workers': []},
                     {'name': 'Paris',
                      'workers': [{'building_points': 7,
                                   'name': 'Marie Curie'},
                                  {'building_points': 7,
                                   'name': 'Tyrion Lannister'}]}],
          'name': 'Scientist'}]}
</code></pre>

<p>if you were open to trying a different data structure, then maybe there would be a simpler answer, but your data structure needs to be specific, and so your code is specific as well so you already have the best answer that matches the structure you need. And alternative and more "pythonic" approach would be to use a smaller list comprehension in a function to filter by common searches for what you need when you need it, eg. Another thing to note is that you already have the data stored in objects, why do you need to extract the attributes into an dictionary, firstly its using more memory to store it in two places, and secondly its no longer in object-oriented programming and so you loose all the advantages of having classes in the first place. </p>

<pre><code>def group_workers_by_city(list_of_workers,cityname = None):
    return [x for x in list_of_workers if x.city.name == cityname or cityname == None]

def group_workers_by_class(list_of_workers,specialization):
    return [x for x in list_of_workers if x.specialization == specialization]

engineer = Specialization("Engineer", "Boosts production")

print(group_workers_by_city(list_of_workers,'Paris'))
print(group_workers_by_class(list_of_workers,engineer))
print(group_workers_by_city(group_workers_by_class(list_of_workers,engineer),'Paris'))
</code></pre>

<p>This implies that you have your Specialization class has an <code>__eq__</code> overload. </p>
    </div>