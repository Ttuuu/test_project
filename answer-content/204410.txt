<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your code is safe, <em>but your attitude is not.</em></p>

<blockquote>
  <p>I don't know if someone could find the link to this login, so I used PDO prepared statement</p>
</blockquote>

<p>This is the wrong reason to use a prepared statement. Such an attitude will lead to a disaster, sooner or later. You should never mind the data source when protecting from SQL Injection. It's the destination that matters. Would this variable be used in the SQL query? Then add it via prepared statement. No exceptions.</p>

<blockquote>
  <p><code>die('QuerySCD Error '.$e-&gt;getMessage());</code></p>
</blockquote>

<p>This is a textbook security flaw. By echoing the error message out you may reveal too much of your system internals that can be used by the attacker. </p>

<p>There should never be a code like this. First, a die with the error message is rather useless, as an uncaught exception will kill you script providing the error message all the same. But what is more important, it will direct it to where it belongs: <strong>on a live site it most be a log file, not a browser</strong>. Read more on the <a href="https://phpdelusions.net/articles/error_reporting" rel="nofollow noreferrer">proper error reporting</a> in my article.  </p>

<p>Regarding the code itself, I've got a <a href="https://phpdelusions.net/pdo_examples/password_hash" rel="nofollow noreferrer">canonical example</a> for the case. </p>

<p>There is also a possible breach in riscar.php, so you better show us its code as well.</p>
    </div>