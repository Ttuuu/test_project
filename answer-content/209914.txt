<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You've already done a pretty good job adding these tests and covering a big chunk of the code under test.</p>

<p>The problem is, if we look at the <a href="https://coverage.readthedocs.io/en/coverage-4.3.4/branch.html" rel="nofollow noreferrer"><em>branch coverage</em></a>, we'll see that quite a few of the branches are not reached as the implementation is relatively <a href="https://github.com/PyCQA/mccabe" rel="nofollow noreferrer">"complex"</a> - by <a href="https://en.wikipedia.org/wiki/Cyclomatic_complexity" rel="nofollow noreferrer">code complexity standards</a>:</p>

<pre><code>python -m pytest test_tree.py --cov-branch --cov=tree --cov-report html
</code></pre>

<p>Using <code>pytest</code> and <code>pytest-cov</code> plugin, <code>tree</code> here is the module/package name for which to measure coverage. </p>

<p>Other observations:</p>

<ul>
<li><code>self.assertEquals()</code> is deprecated in favor of <code>self.assertEqual()</code></li>
<li>even though <code>setUp</code> and <code>tearDown</code> are the legacy camel-case Junit-inspired names, consider following PEP8 and naming your methods in an <a href="https://www.python.org/dev/peps/pep-0008/#id36" rel="nofollow noreferrer">lower_case_with_underscores style</a></li>
<li>look into defining your tree as a <a href="https://docs.pytest.org/en/latest/fixture.html" rel="nofollow noreferrer"><code>pytest</code> fixture</a></li>
<li>look into <em>property-based-testing</em> with <a href="https://hypothesis.readthedocs.io/en/latest/" rel="nofollow noreferrer">Hypothesis</a> as a means to generate possible input nodes for your tree</li>
<li>focus on the more complex parts first as this is where the possibility of having a problem is higher - the <code>splay()</code> method should probably be tested separately and directly checking all the major variations of re-balancing the tree when a new node is added</li>
</ul>
    </div>