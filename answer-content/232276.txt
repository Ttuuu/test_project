<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Use X-Macro to construct parallel enum and array</h1>

<p>As the number of items increases, so does the effort required to keep the parallel constructions in sync.</p>

<pre><code>enum Combinator
    { POP, DUP, SWAP
    , FLIP, ID, QUOTE
    , UNQUOTE, UNKNOWN };

static const char Str_Combs[][8] =
    { "pop", "dup", "swap"
    , "flip", "id", "quote"
    , "unquote" };
</code></pre>

<p>Instead, you can make a single list as a parameterized macro.</p>

<pre><code>#define COMBINATORS(macro) \
  macro( POP, "pop" ), \
  macro( DUP, "dup" ), \
  macro( SWAP, "swap" ), \
  macro( FLIP, "flip" ) /* etc */

#define COMBINATOR_ENUM(a,b) a
enum Combinator { COMBINATORS(COMBINATOR_ENUM) };

#define COMBINATOR_STRING(a,b) b
static const char Str_Combs[][8] = { COMBINATORS(COMBINATOR_STRING) };
</code></pre>

<p>When you add more items, the enum and the array will always remain in sync. If you don't mind having the two parts in the same case, you could also simplify the table and use stringify to produce the string.</p>

<pre><code>#define COMBINATORS(macro) \
  macro( POP ), \
  macro( DUP ), \
  macro( SWAP ), \
  macro( FLIP ) /* etc */

#define COMBINATOR_ENUM(a) a
enum Combinator { COMBINATORS(COMBINATOR_ENUM) };

#define COMBINATOR_STRING(a) #a
static const char Str_Combs[][8] = { COMBINATORS(COMBINATOR_STRING) };
</code></pre>

<p>This makes the list even easier to maintain.</p>

<h1>Loops and Recursion in the language</h1>

<p>See <a href="https://stackoverflow.com/questions/6949434/how-to-implement-loop-in-a-forth-like-language-interpreter-written-in-c">my answer on SO</a> for implementing user functions with a stack. To allow for infinite loops or recursion, the important part is using a tail-recursion optimization. For stack based languages, the easy thing to do is pop the array when you get to the last element so the empty "tails" are no longer on the stack while you execute the last element.</p>
    </div>