<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>In your <code>sum_div</code> method, 1 is always a divisor, and n/1 is never a “proper” divisor of n.  So you can remove the “1” case from your loop, and get rid of the <code>x != 1</code> test, for a slight speed increase. </p>

<p>Also, if <code>n % x == 0</code>, then the other divisor is <code>n // x</code>; no call to <code>int()</code> is required. </p>

<p>Finally, no list creation is required.  Just maintain a running total. </p>

<pre><code>def sum_div(n):
    total = 1
    for x in range(2, int(math.sqrt(n) + 1)):
        if n % x == 0:
            total += x
            y = n // x
            if y &gt; x:
                total += y
    return total
</code></pre>

<hr>

<p>In your main loop, your search for <code>i,j</code> both in <code>range(1,10000)</code>, and add both <code>i, j</code> (if different) to your <code>set</code> to ensure you don’t have duplicates. </p>

<p>You can cut down your search space by half by recognizing that if you find one pair <code>i, j</code>, you have also found the other pair <code>j, i</code>, and adding the other pair to the set is a no-op.  You only need to search the cases where (say) <code>i &lt; j</code> is true, which eliminates just over half of the pairs. </p>

<pre><code>for i in range(1, 10000):
    for j in range(i+1, 10000):
        if sum_div(i) == j and sum_div(j) == i:
            amicable_nums.update([i, j])
</code></pre>

<hr>

<p>How many times are you computing <code>sum_div(i)</code>???  Does it change in the inner loop?  Maybe you could only compute it once per loop?</p>

<pre><code>for i in range(1, 10000):
    sdi = sum_div(i)
    for j in range(i+1, 10000):
        if sdi == j and sum_div(j) == i:
            amicable_nums.update([i, j])
</code></pre>

<hr>

<p>Do you really need the inner loop?  <code>sdi == j</code> will only be true for exactly one value in the loop. </p>
    </div>