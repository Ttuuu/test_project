<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I will go through your code line by line and give feedback. We will skip the general advice on <em>don't use CGI</em> as it's actually suited for what you are trying to do here.</p>

<p>I wrote this answer in two stages, so some of the things here might have been said by other people. I'm attempting to provide full feedback, and I'm not copying from others. If several of us give the same feedback, it must probably make some sense.</p>

<blockquote>
<pre><code>#!/usr/bin/perl -T
</code></pre>
</blockquote>

<p>The <code>-T</code> flag turns on <a href="http://perldoc.perl.org/perlsec.html#Laundering-and-Detecting-Tainted-Data" rel="nofollow noreferrer">taint mode</a>. I am not sure you intended to do this, or just copied it from somewhere else. Taint mode essentially makes sure that data coming into your program from the outside must be validated before it's being used. But you are not untainting the variable <code>$f</code>. That <em>could</em> bite you in the back.</p>

<hr>

<blockquote>
<pre><code>use strict;
use warnings;
</code></pre>
</blockquote>

<p>This is good! Well done. Your code should always start with <code>strict</code> and <code>warnings</code>.</p>

<hr>

<blockquote>
<pre><code>use CGI qw/:all/;
</code></pre>
</blockquote>

<p>You are importing <em>a lot</em> of stuff into your namespace, but all you use is <code>param</code>. Instead, consider importing only <a href="https://metacpan.org/pod/distribution/CGI/lib/CGI.pod#:cgi" rel="nofollow noreferrer"><code>:cgi</code></a>, which will give you less stuff, or only import <code>param</code> and <code>header</code>. That also makes it easier to remember where that function came from.</p>

<pre><code>use CGI qw(param header);
</code></pre>

<hr>

<blockquote>
<pre><code>my $f = param("f") || '';
</code></pre>
</blockquote>

<p><code>$f</code> is not the greatest variable name. Use descriptive variable names, like <code>$filename</code>.</p>

<p>If the file is called zero <code>0</code>, or <code>0000</code>, this will fail. Read more about that at the end of this post.</p>

<hr>

<blockquote>
<pre><code>($f eq '') &amp;&amp; die;
</code></pre>
</blockquote>

<p>While some people like to use logical operators for flow control, this is really weird to read. If you want concise syntax without blocks, use a <a href="https://en.wikipedia.org/wiki/Reverse_Polish_notation" rel="nofollow noreferrer">post-fix</a> <a href="http://perldoc.perl.org/functions/if.html" rel="nofollow noreferrer"><code>if</code></a> or <a href="http://perldoc.perl.org/functions/unless.html" rel="nofollow noreferrer"><code>unless</code></a>.</p>

<p>Also, provide an error message as to why this failed. It's CGI, so this will show up in your server log. You don't want it to say <em>Died at line 10</em>, do you?</p>

<p>I prefer to use <a href="http://perldoc.perl.org/functions/q.html" rel="nofollow noreferrer">the <code>q{}</code> quoting operator</a> for empty strings, as it shows the intent of giving an empty string more clearly.</p>

<pre><code>die "No filename given" if $f eq q{}.
</code></pre>

<hr>

<blockquote>
<pre><code>open(PATH, "&lt;$path") || die;
</code></pre>
</blockquote>

<p>Don't use a GLOB as a file handle. It's global to all of your program, including other modules and namespaces. If another module was to use the same <code>PATH</code> name for a handle, this would conflict. Instead, use a lexical file handle. The convention is to name file handles <code>$fh</code>.</p>

<p>This has the added benefit that Perl will take care of closing the handle for you as soon as the variable goes out of scope. In this case, that's when the program ends. So you don't have to use <code>close</code> explicitly.</p>

<p>Use the three-argument form of <code>open</code>, where the second argument is the mode. In your case, that's <code>&lt;</code> for reading. This makes file operations more secure, as your <code>$path</code> could for example start with a pipe <code>|</code>, which would change the meaning. Especially if part of your file name comes from the user (and you didn't even untaint it), this is crucial advice.</p>

<p>Don't use <a href="http://perldoc.perl.org/perlop.html#C-style-Logical-Or" rel="nofollow noreferrer">binary or</a> <code>||</code> for flow control as it has tight binding. Use <code>or</code> instead, which binds very loosely, so you don't need to put the parentheses after <code>open</code>. It will also read more like actual English.</p>

<p>Include a meaningful error message with your <code>die</code>, especially the error <code>$!</code> that was returned from the <code>open</code> call.</p>

<pre><code>open my $fh, '&lt;', $path or die "Error opening '$path': $!";
binmode $fh;
</code></pre>

<hr>

<blockquote>
<pre><code>print header(-type =&gt; "application/pdf",
         -target =&gt; "$f");
</code></pre>
</blockquote>

<p>Indent your code properly. This looks weird. You have indented the second line 9 spaces. Looks like one full tab in vim, and one space. Instead, break it around properly, and align everything. On average, code is read ten times more than written. Prepare for that.</p>

<p>Don't quote variables if there is no interpolation needed. If it's only one var, leave out the quotes.</p>

<pre><code>print header(
    -type   =&gt; "application/pdf",
    -target =&gt; $filename,
);
</code></pre>

<hr>

<blockquote>
<pre><code>print;
</code></pre>
</blockquote>

<p>This line will print the current value of <code>$_</code>. I am not sure what that is at this time in the execution of the program. It's probably not intended. Get rid of it.</p>

<hr>

<blockquote>
<pre><code>while (&lt;PATH&gt;) {
    print($_);
}
</code></pre>
</blockquote>

<p>If you intend to use the loop variable, name it. The topic <code>$_</code> is really useful for short one-liners, <code>map</code> and such, but a <code>while</code> loop is rarely such a case.</p>

<pre><code>while ( my $buffer = &lt;$fh&gt; ) {
    print $buffer;
}
</code></pre>

<p>You can also use the aforementioned post-fix notation for that. Again, you don't need to use the topic, because it's implicit.</p>

<pre><code>print while &lt;$fh&gt;;
</code></pre>

<p>But you can also just get rid of that completely, and simply use the fact that <code>print</code> is list context, and the diamond operator <code>&lt;&gt;</code> returns the full file as an array in list context.</p>

<pre><code>print &lt;$fh&gt;;
</code></pre>

<hr>

<p>I said earlier that your check for <code>$filename</code> with <code>||</code> will fail if the name is a false value. Remember that Perl has no actual <code>true</code> and <code>false</code>, just values that evaluate <em>truthy</em>, and values that don't. There are very few things that are false in Perl. <code>0</code>, <code>undef</code>, the empty string <code>q{}</code> and the empty list <code>()</code> are such cases.</p>

<pre><code>my $filename = param('f');
die unless $filename;
</code></pre>

<p>This would be similar, but again, <code>0</code> would be cast out.</p>

<pre><code>my $filename = param('f');
die unless defined $filename;
</code></pre>

<p>If there was no param <code>f</code>, the <code>param</code> function <a href="https://metacpan.org/source/LEEJO/CGI-4.37/lib/CGI.pm#L441" rel="nofollow noreferrer">returns <code>undef</code></a>. So we can avoid that by saying <code>unless defined</code>. That lets <code>0.pdf</code> through. But what about the empty string?</p>

<p>Essentially you need to decide whether a file named <code>$basepath/.pdf</code> is valid. That's up to you. If you don't want that, you have to do additional checks.</p>

<p>You could also check if that file exists in general, with <a href="http://perldoc.perl.org/functions/-X.html" rel="nofollow noreferrer"><code>-e</code></a>.</p>

<pre><code>die "No such file" unless -e $path;
</code></pre>

<p>However, <code>open</code> will check that anyway, so it's not needed.</p>
    </div>