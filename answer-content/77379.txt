<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>My overall take was "Nice!". :)</p>

<p>Given your exchange with Patrick J S above (not to mention my lack of familiarity with the wrinkles discussed in the relevant RFCs) I'm not going to comment at all on the technical-compliance-with-standards aspects of your decoding logic.</p>

<h1>Simplify <code>Inline::Perl5</code> code</h1>

<pre><code>use Inline::Perl5;
my $p5 = Inline::Perl5.new;
$p5.use('Text::Unidecode');
.
.
sub transformfilename($filename) {
  return $p5.call('Text::Unidecode::unidecode', $filename);
}
</code></pre>

<p>That was old style. Write this way instead:</p>

<pre><code>use Text::Unidecode:from&lt;Perl5&gt;;

sub transformfilename($filename) {
  return Text::Unidecode::unidecode($filename);
}
</code></pre>

<h1><a href="https://en.wikipedia.org/wiki/Don%27t_repeat_yourself" rel="nofollow noreferrer">Don't repeat yourself</a>?</h1>

<pre><code>sub transformdirname($dirname is copy) {
  $dirname.=subst( /:i \%(&lt;[0..9A..F]&gt;**2) /, { chr(:16(~$0)) }, :g );
  $dirname.=subst( /\//, '_', :g );
  return $dirname;
}
</code></pre>

<p>This has 'dirname' in the sub's name plus four mentions of <code>$dirname</code>. Sometimes repeats are valuable, perhaps making code easier to read or change, but in this case I think the reverse applies. I'd write:</p>

<pre><code>sub transformdirname($_ is copy) {
  .=subst( /:i \%(&lt;[0..9A..F]&gt;**2) /, { chr(:16(~$0)) }, :g )
  .=subst( /\//, '_', :g )
}
</code></pre>

<p><code>transformfilename</code> has a similar issue:</p>

<pre><code>sub transformfilename($filename) {
  return $p5.call('Text::Unidecode::unidecode', $filename);
}
</code></pre>

<p>('filename' is written three times.) In addition it's a one line routine introducing the abstract "transform" and I'm going to assume the transformation is unlikely to change, so abstracting it out to a <code>sub</code> is questionable. In addition there's <em>another</em> several 'file's in the call so instead I'd elide the <code>sub</code> altogether and eliminate <em>all</em> the repeats of 'file'. We'll see that later in the final version where I've made some additional changes.</p>

<h1>Comments</h1>

<p>Imo good code means good comments. You've written good comments like:</p>

<pre><code>sub transformdirname($dirname is copy) {
  $dirname.=subst( /:i \%(&lt;[0..9A..F]&gt;**2) /, { chr(:16(~$0)) }, :g ); # undo URL encoding
  $dirname.=subst( /\//, '_', :g ); # make it a valid UNIX filename
  return $dirname;
}
</code></pre>

<p>In Raku you can effortlessly turn such ordinary end-of-line comments (that start with <code>#</code>) into <a href="https://docs.raku.org/type/Pod::Block::Declarator" rel="nofollow noreferrer">Pod declarator comments</a> (that start with <code>#|</code> or <code>#=</code> and appear immediately before or after a declaration):</p>

<pre><code>#| undo URL encoding and make it a valid UNIX filename
sub transformdirname($_ is copy) {
  .=subst( /:i \%(&lt;[0..9A..F]&gt;**2) /, { chr(:16(~$0)) }, :g );
  .=subst( /\//, '_', :g );
}
</code></pre>

<p>Now documentation tools can automatically extract documentation of the <code>sub</code> because this:</p>

<pre><code>say &amp;transformdirname.WHY;
</code></pre>

<p>now displays:</p>

<p>undo URL encoding and make it a valid UNIX filename</p>

<p>(Why is the method that extracts such doc called <code>WHY</code>? It's to remind folk that by far the most important thing to explain in code comments is WHY -- why the code has been written and/or why it's written the way it is.)</p>

<p>I note you've used <code>MAIN</code>:</p>

<pre><code>sub MAIN($fromdir, $todir) {
</code></pre>

<p>As you know, this automatically generates a nice usage message. What you may not know is that this can be combined with the Pod declarator blocks discussed above to great effect. Checkout <a href="https://perl6advent.wordpress.com/2014/12/22/the-cool-subset-of-main/" rel="nofollow noreferrer">The Cool subset of MAIN</a> for examples.</p>

<h1>Final version</h1>

<p>I've made many more changes to be the way I write things. As I wrote at the start, your original code looks nice and many coding issues are subjective.</p>

<pre><code>use Text::Unidecode:from&lt;Perl5&gt;;

sub MAIN ($fromdir, $todir) {

  for $fromdir.dir {

    next unless .d;

    say my $tosubdir = "$todir/&amp;transformdirname(.basename)";
    mkdir $tosubdir;

    for .dir {

      # make filename ASCII at all costs:
      my $tofile = "$tosubdir/{.basename.&amp;Text::Unidecode::unidecode}";

      if $tofile.path.e { die "Will not overwrite $tofile" }

      copy $_, $tofile;

    }
  }
}

# undo URL encoding and make it a valid UNIX filename
sub transformdirname($_ is copy) {
  .=subst( /'%' (&lt;xdigit&gt;**2)/, { chr(:16(~$0)) }, :g )
  .=subst( /\//, '_', :g )
}
</code></pre>
    </div>