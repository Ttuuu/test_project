<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>As the fizz has been done to death I will review this in terms of a page that displays a list of items, could be anything, dates, measurements, or whatnot.</p>
<hr>
<h2>Problems and bugs</h2>
<h3>There is a sizing problem.</h3>
<p>Not all the values indicated by the height slider can be scrolled to. This is because you set the container size incorrectly <code>&lt;div id="listContainer" v-bind:style="{ height: height + 'px'}"&gt;</code> it should be <code>height: height * listItemHeight + 'px'</code> with <code>listItemHeight</code>  matching the height of a list item.</p>
<p>Better yet don't set the height let the layout engine do that. You use colon property <code>:class="getClass(number)"</code> You can add another class named <code>Empty</code> and return that if the function is called with a number greater than height.</p>
<p>The containing div will size itself to fit the content.</p>
<h3>You only display 100 items</h3>
<p>Changing the height slider (min value is 200) I imagine changes the number of items in the list. However only 100 items are displayed no matter what the <code>height</code> value is.</p>
<h3>The initial setting is incorrect</h3>
<p>When the page loads you set the slider height to 3000 but the array you set to 100. Maybe a constant in the JS to set up the <code>height</code>, and <code>numbers</code> array would help. (See first example)</p>
<h3>Use a label</h3>
<p>Use a label to associate the height slider with the height value display rather than an unassociated div. You can just nest the input within the label to make the association implicit.</p>
<hr>
<h2>JavaScript style</h2>
<ul>
<li>Delimit single line statement blocks with curlies <code>if (foo) {...}</code></li>
<li>isNaN does not require a number, the explicit convertion is supluflorouse. <code>isNaN(parseInt(output, 10))</code> is the same a <code>isNaN(output)</code> Also use Number to convert base 10 numbers if you know you are not rounding <code>Number(output)</code> is better than <code>parseInt(output, 10)</code></li>
<li>Be consistency in style. In the function <code>getOutput</code> you use inline undelimited single
line statements <code>if (number % 5) return 'Buzz';</code> yet in <code>getClass</code> you use 3 line delimited single line statements <code>if (isNaN(output)) {\n return output;\n }</code>  with <code>\n</code> for new lines.</li>
<li>Less is best. Use the short form of code where you can. Eg last 4 lines of <code>getClass</code> can be on ternary. (see example)</li>
</ul>
<hr>
<h2>Use dynamic views for large data sets.</h2>
<p>I think that the approach is a little over the top. Having very long pages has a cost in resources. Considering that you can never see more than a screen full at a time it would be more effective to generate the list as a view in place as the user scrolls. That way you only need to create as many elements as can be seen at once. You could use the height slider to replace the scroll and us it to reference the top view item.</p>
<p>With a little more effort such a list should be zoomable as well, only ever displaying one screenfull. (Really scroll bars are old, ugly, and awkward. Good design means weighted intuitive gesture control, even with a mouse)</p>
<hr>
<h2>Example 1</h2>
<p>Addressing some of the problems and bugs. Uses a complete list (set to 1000 for practicality)</p>
<p></p><div class="snippet" data-lang="js" data-hide="true" data-console="false" data-babel="false">
<div class="snippet-code snippet-currently-hidden">
<pre class="snippet-code-js lang-js prettyprint-override"><code>const getIndex = (number, index) =&gt; index + 1;
const MIN_HEIGHT = 100;
const MAX_HEIGHT = 1000;

const app = new Vue({
  el: "#app",
  data: {
    numbers: new Array(MAX_HEIGHT).fill(1).map(getIndex),
    height: MAX_HEIGHT,
    minHeight : MIN_HEIGHT,
    maxHeight : MAX_HEIGHT,
  },
  filters: {
    getOutput: function(number) {
      if (number % 3 === 0 &amp;&amp; number % 5 === 0) { return 'FizzBuzz' }
      if (number % 3 === 0) { return 'Fizz' }
      if (number % 5 === 0) { return 'Buzz' }
      return number;
    }
  },
  methods: {
    getClass: function(number) {
      if (number &gt; this.height) { return "Empty" }
      const output = this.$options.filters.getOutput(number);
      return isNaN(output) ? output : "";
    }
  }
});</code></pre>
<pre class="snippet-code-css lang-css prettyprint-override"><code>body {
  padding: 4px;
  font-family: serif;
}
h1 {
   font: 400 20px cursive;
}
input[type="range"] {
  width: 100%;
}


li {
  background: #fff;
  color: #000000;
  border-radius: 4px;
  border: 2px solid #6a737c;
  padding: 3px;
}

li.FizzBuzz {
  border-color: #f800ff; 
}

li.Fizz {
  border-color: #f80000;
}

li.Buzz {
  border-color: #0000ff;
}
li.Empty {
  display: none;
}</code></pre>
<pre class="snippet-code-html lang-html prettyprint-override"><code>&lt;script src="https://cdnjs.cloudflare.com/ajax/libs/vue/2.5.17/vue.js"&gt;&lt;/script&gt;
&lt;div id="app"&gt;
  &lt;h1&gt;
    FizzBuzz with dynamic height container
  &lt;/h1&gt;
  &lt;label&gt;
   Height: {{ height }}
  &lt;input type="range" :min="minHeight" :max="maxHeight" v-model="height" /&gt;
  &lt;/label&gt;
  &lt;div id="listContainer" &gt;
    &lt;ul&gt;
      &lt;li v-for="number in numbers" :class="getClass(number)"&gt;
        {{ number | getOutput }}
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;  
&lt;/div&gt;</code></pre>
</div>
</div>

<h2>Example 2</h2>
<p>This does not create the long list, rather it uses a view controlled by the height slider replacing the scroll bar. This lets you display a much larger range of values without having to tax the device with a huge lists of elements.</p>
<p>I have removed the title (not needed we know what the page does) and height label as that value is now the first fizzBuzz item. This gives needed realestate back to the app.</p>
<p>Increased the view range to 10000. Also using HEX CSS alpha format colors thus will look a little ugly for some older browsers.</p>
<p></p><div class="snippet" data-lang="js" data-hide="true" data-console="false" data-babel="false">
<div class="snippet-code snippet-currently-hidden">
<pre class="snippet-code-js lang-js prettyprint-override"><code>const getIndex = (number, index) =&gt; index;
const MIN_HEIGHT = 1;
const MAX_HEIGHT = 10000;
const DATA_VIEW_SIZE = 7;

const app = new Vue({
  el: "#app",
  data: {
    numbers: new Array(DATA_VIEW_SIZE).fill(1).map(getIndex),
    height: MIN_HEIGHT,
    minHeight : MIN_HEIGHT,
    maxHeight : MAX_HEIGHT,
  },
  filters: {
    getOutput: function(number) {
      if (number % 3 === 0 &amp;&amp; number % 5 === 0) { return  'FizzBuzz' }
      if (number % 3 === 0) { return 'Fizz' }
      if (number % 5 === 0) { return 'Buzz' }
      return number;
    }
  },
  methods: {
    getClass: function(number) {
      const output = this.$options.filters.getOutput(number + Number(this.height));
      return isNaN(output) ? output : "";
    },
    getItem: function(number) {
      return this.$options.filters.getOutput(Number(number) + Number(this.height));
    },
  }
});</code></pre>
<pre class="snippet-code-css lang-css prettyprint-override"><code>body {
  padding: 0px;
  font-family: serif;
}

input[type="range"] {
  width: 100%;
  margin-top: -8px;
}
ul {
  margin-top: -2px;
}
li {
  background: #0003;
  color: #000000;
  border-radius: 4px;
  border: 1px solid #6a737c;
  padding: 1px;
}

li.FizzBuzz {
  border-color: #f800ff; 
  background: #f800ff33;
}

li.Fizz {
  border-color: #f80000;
  background: #f8000033;
}

li.Buzz {
  border-color: #0000ff;
  background: #00f3;
}</code></pre>
<pre class="snippet-code-html lang-html prettyprint-override"><code>&lt;script src="https://cdnjs.cloudflare.com/ajax/libs/vue/2.5.17/vue.js"&gt;&lt;/script&gt;
&lt;div id="app"&gt;
  &lt;input type="range" :min="minHeight" :max="maxHeight" v-model="height" /&gt;

    &lt;ul&gt;
      &lt;li v-for="number in numbers" :class="getClass(number)"&gt;
        {{  getItem(number) }}
      &lt;/li&gt;
    &lt;/ul&gt;

&lt;/div&gt;</code></pre>
</div>
</div>

    </div>