<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I've been able to slash the execution time by almost half on my machine by declaring <code>current</code> and <code>c</code> as <code>ContiguousArray</code>:</p>

<pre><code>struct HeapPermutationSequence&lt;Element&gt;: Sequence, IteratorProtocol {

    private var current: ContiguousArray&lt;Element&gt;
    private var c: ContiguousArray&lt;Int&gt;
    private var i = 0
    private var firstIteration = true

    init(elements: [Element]) {
        self.current = ContiguousArray(elements)
        self.c = ContiguousArray&lt;Int&gt;(repeating: 0, count: elements.count)
    }

    mutating func next() -&gt; ContiguousArray&lt;Element&gt;? {
        ...
    } 
}
</code></pre>

<h2>Benchmarks</h2>

<p>Using the same benchmarking code, compiled with <code>-O</code> in the terminal, on a  2.7 GHz i7 MacBook Pro :</p>

<ul>
<li>Before: fluctuates between <code>0.126</code>s and <code>0.139</code>s</li>
<li>After:  <code>0.07</code>s with inferior fluctuations, thanks to <code>current</code> being a <code>ContiguousArray</code>, since such a type has predictable performance.</li>
</ul>

<hr>

<p>I've got to <code>0.022</code>s by wrapping the benchmarking code in a <code>do</code> statement or any new scope (Makes the code 3x faster):</p>

<pre><code>do {
    let N = 10
    var count = 0
    let start = mach_absolute_time()
    for _ in HeapPermutationSequence(elements: Array(1...N)) { count += 1 }
    let end = mach_absolute_time()
    print(count, Double(end - start)/Double(1e9))
}
</code></pre>

<p>ü§Ø Putting the original code inside a single iteration for loop <code>for _ in 0..&lt;1 {...}</code> brings its execution time down to <code>0.020</code> too. Putting it inside a <code>do</code> statement, <code>repeat while false</code>, closure, <code>while true { ... break}</code>..., takes it back to <code>0.13</code>s üëéüèª.</p>

<p><strong>N.B:</strong> The above result has only been observed on a mac (4 physical cores, 4 logical ones). On an iPhone and an iPad (both 2 physical cores), using a <code>ContiguousArray</code> makes the code a full second faster (<code>2.~</code>s vs <code>3.~</code>s).</p>

<hr>

<p>We can gain <code>1</code> to <code>2ms</code> by rearranging the conditions:</p>

<pre><code>private var notFirstIteration: Bool = false
//...
if notFirstIteration {
//...
} else {
    notFirstIteration = true
}
</code></pre>

<p>This would eliminate The <code>(N! - 1)</code> unnecessary <em>conditional jumps</em> in the assembly code.</p>

<hr>

<p>As suggested by <strong>Mr. Martin</strong>: Not discarding manually the output of <code>HeapPermutationSequence</code> by using this code:</p>

<pre><code>for x in HeapPermutationSequence(elements: Array(1...N)) { 
    count += x.count 
}
</code></pre>

<p>Gives a <code>+/-2ms</code> fluctuation in both solutions.</p>
    </div>