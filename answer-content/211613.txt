<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>If I understand things correctly, then what you're trying to do is called a 'preimage attack'. That's a lot harder than 'just' finding a hash collision. Apparently there is a known preimage attack for MD5, but it's only slightly better than a brute-force approach, so I don't think that'll be of any practical use here.</p>

<p>But the challenge you're referring to is more of a 'who can find the longest matching prefix', so it's about how efficient your code is and how patient you are.</p>

<hr>

<p>Regarding efficiency, there are a few things you can do to speed it up:</p>

<ul>
<li>You're creating a new <code>MD5</code> instance every time you want to generate an MD5 hash. Don't do that - create a single instance when your program starts and keep using that until the program ends.</li>
<li>You're constantly converting between strings and byte arrays. That involves a lot of extra work and extra allocations, which will slow things down. Use byte arrays everywhere, and modify them in-place whenever possible.</li>
</ul>

<hr>

<p>Other things you can do that will make the code easier to understand and maintain:</p>

<ul>
<li>Code duplication: both file-writing and hash comparing are duplicated several times. Each of these only needs to occur once in the code.</li>
<li><code>Main</code> contains two nested loops and quite a few additional checks. A single loop should be sufficient, and its body only needs to check a hash, update the longest-match if necessary, 'increase' the input and check if it's time to write the current state to a file.</li>
<li>Declaring local variables up-front, instead of as close to where they are used as possible, tends to make code more difficult to understand. I think the main reason why you'll sometimes see this style is because it used to be required in certain older languages.</li>
<li>Type names like <code>System.IO.File</code>, <code>System.TimeSpan</code>, <code>System.Security.Cryptography.MD5</code> and so on can be simplified to <code>File</code>, <code>TimeSpan</code> and <code>MD5</code> thanks to <code>using &lt;namespace&gt;;</code> statements.</li>
</ul>
    </div>