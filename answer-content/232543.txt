<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1><code>check_win</code></h1>

<p>There are a lot of <code>if</code> and <code>elif</code> statements here. You can reduce this by utilizing python's <a href="https://www.programiz.com/python-programming/methods/built-in/any" rel="nofollow noreferrer"><code>any</code></a> built in function. This will return <code>True</code> if <em>any</em> of the values passed in are <code>True</code>. And since you have a bunch of expressions that evaluate to boolean values, this can be rewritten like so:</p>

<pre><code>def check_win(board, letter):
    return any([
            (item == letter for item in board[:3]),
            (item == letter for item in board[3:6]),
            (item == letter for item in board[6:9]),
            (item == letter for item in board[::3]),
            (item == letter for item in board[1::3]),
            (item == letter for item in board[2::3]),
            (item == letter for item in board[::4]),
            (item == letter for item in board[2:8:2])
        ])
    ])
</code></pre>

<p>Since <code>all</code> has to be passed an iterable, you can create a list containing the resulting Boolean values from these expressions. If any are <code>True</code>, then the function will return <code>True</code>.</p>

<p>This answer is the fastest on average (tested 1000 times).</p>

<h1>Type Hinting</h1>

<p>You should use type hints to make it clear what types of parameters are passed to functions, and what types are returned by functions. Lets take your <code>check_win</code> function for example:</p>

<pre><code>from typing import List

def check_win(board: List[str], letter: str) -&gt; bool:
</code></pre>

<p>This makes it clear that is accepts a list of strings as the board, as string representing the letter, and returns a boolean value.</p>

<h1>Docstrings</h1>

<p>Lets expand upon the <code>check_win</code> function. This can be even more descriptive by using a function docstring. This will allow you to put in words what the function is supposed to do. Take a look:</p>

<pre><code>def check_win(board: List[str], letter: str) -&gt; bool:
    """
    Determines if there is a winner in the passed board

    :param board -&gt; List[str]: The playing board
    :param letter -&gt; str: Letter (X/O) to check

    :return bool: True if there is a winner, False otherwise
    """
</code></pre>

<h1>String Formatting</h1>

<p>Instead of</p>

<pre><code>print(x + ' has won!')
</code></pre>

<p>consider using an <code>f""</code> string. This allows you to directly implement variables in your strings:</p>

<pre><code>print(f"{x} has won!")
</code></pre>

<h1>Additional Methods</h1>

<p>Consider writing a couple more methods to reduce your open code in your program. By open I mean code that isn't contained within a function/class. Maybe a function like <code>run_game</code> that manages turns, and a <code>display_winner</code> that presents who won the game. I'll leave these up to you to implement.</p>

<p></p><hr>
<em>All the above suggestions can be applied to each function within your code. I used <code>check_win</code> as an example for several, but they apply to both of your functions.</em>
    </div>