<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There are many bad practices in this code. I want to show all I could find and suggest improvements.</p>

<ol>
<li><a href="https://stackoverflow.com/questions/1452721/why-is-using-namespace-std-considered-bad-practice">Don't use using namespace std</a></li>
<li><p><strong>Pick a naming style:</strong></p>

<pre><code>string yay;     
string actyay = "yes";  
string nactyay = "no";  
string EastEgg = "maybe";   
string replay = "replay";   
bool Chest_Unlocked;
bool Have_Knife;    
bool Dead = !true;
</code></pre>

<p>You dont use a consistent naming style here. Use either camel case:</p>

<pre><code>string yay;
string actYay = "yes";
string nActYay = "no";
string eastEgg = "maybe";
string replay = "replay";
bool chestUnlocked;
bool haveKnife;
bool dead = !true;
</code></pre>

<p>Or whitespace:</p>

<pre><code>string yay;
string act_yay = "yes";
string n_act_yay = "no";
string east_egg = "maybe";
string replay = "replay";
bool chest_unlocked;
bool have_knife;
bool dead = !true;
</code></pre></li>
<li><p><strong>Better naming.</strong> What is a <code>yay</code>, <code>actyay</code> , <code>nactyay</code> and
    <code>EastEgg</code> ?</p>

<p>How about renaming them to <code>userChoice</code>, <code>choiceYes</code> , <code>choiceNo</code>
    and <code>choiceWin</code>.</p></li>
<li><p><strong>Use false directly.</strong> This:</p>

<pre><code>bool Dead = !true;
</code></pre>

<p>How about stating directly that dead is false :</p>

<pre><code>bool isDead {false};
</code></pre></li>
<li><p><strong>Init your Variables.</strong> This:</p>

<pre><code>bool Chest_Unlocked;
bool Have_Knife;
</code></pre>

<p>This is dangerous. It is not defined if these variables are true or
false at the beginning. You should state your intentions clearly
like this (I also renamed them):</p>

<pre><code>bool chestIsUnlocked{ false };  bool hasKnife{ false };
</code></pre></li>
<li><p><strong>use constexpr string_view.</strong> Change your const variables to this:</p>

<pre><code>    constexpr std::string_view choiceYes = "yes";       constexpr
</code></pre>

<p>std::string_view choiceNo = "no";       constexpr std::string_view
choiceWin = "maybe";        constexpr std::string_view replay = "replay";</p>

<p>The advantage is, that they are now compile time constants who can't
be modified by accident</p></li>
<li><p><strong>Use else if.</strong> This:</p>

<pre><code>if (yay == actyay){
    Have_Knife = true;
}if (yay == nactyay){
    Have_Knife = false;
}if (yay == EastEgg){
    goto EasterEgg;
}
</code></pre>

<p>Should be this:</p>

<pre><code>if (yay == actyay) {
    Have_Knife = true;
}
else if (yay == nactyay) {
    Have_Knife = false;
}
else if (yay == EastEgg) {
    goto EasterEgg;
}
</code></pre>

<p>Reason. If you met one condition you can't reach the others so
there's no reason to still check for them</p></li>
<li><strong>Don't use <code>goto</code>.</strong> In several places you use <code>goto</code> to emulate functions.
There's almost never a good reason to use <code>goto</code> at all. Instead use
proper functions (See ending of the post)</li>
<li><p><a href="https://stackoverflow.com/questions/1107705/systempause-why-is-it-wrong">Don't use system("pause").</a> You can replace it with a portable
solution like this:</p>

<pre><code>void pressAnyKeyToContinue()
{
    std::cout &lt;&lt; "Press any key to continue...\n";
    std::cin.ignore(std::numeric_limits&lt;std::streamsize&gt;::max(), '\n');
    std::cin.get();
}
</code></pre></li>
<li><p><strong>Handle wrong input.</strong> In this:</p>

<pre><code>cout &lt;&lt; "Do you pick up the knife?\n";
cin &gt;&gt; yay;
if (yay == actyay){
    Have_Knife = true;
}if (yay == nactyay){
    Have_Knife = false;
}if (yay == EastEgg){
    goto EasterEgg;
}
</code></pre>

<p>Besides other problems here. If the user doesn't fullfil any of
these statements you continue your program with invalid input. Try
that out you will run in an exception because <code>Have_Knife</code> also
wan't initialized before. The solution is repeat the user input as
long as it is not valid.</p></li>
<li><p><strong>Don't check bools explicit.</strong> These ones:</p>

<pre><code> if (Have_Knife == true){


 if (Dead == false){
</code></pre>

<p>Can be simplified as:</p>

<pre><code> if (hasKnife) {

 if (!isDead) {
</code></pre></li>
<li><p><strong>Use Functions.</strong> Currently your program looks like a assembler
 program where you use jumps to go to certain parts of the program to
 simulate functions. You should divide your program logically into
 functions. It will also make it more readable.</p></li>
</ol>

<p>Rewritten your code by using some more enhancements I came to this solution (Not perfect but to give you an idea how the code could look):</p>

<pre><code>#include &lt;iostream&gt;
#include &lt;cstdlib&gt;
#include &lt;string&gt;
#include &lt;string_view&gt;
#include &lt;limits&gt;

namespace game {

    void clearScreen()
    {
#ifdef _WIN32
        std::system("cls");
#else
        std::system("clear"); // most other systems use this
#endif
    }

    void pressAnyKeyToContinue()
    {
        std::cout &lt;&lt; "Press any key to continue...\n";
        std::cin.ignore(std::numeric_limits&lt;std::streamsize&gt;::max(), '\n');
        std::cin.get();
    }

    void printWin()
    {
        clearScreen();
        std::cout &lt;&lt; "You Win!";
        pressAnyKeyToContinue();
    }

    struct Player {
        bool hasKnife{ false };
        bool wins{ false };
    };


    void userChoicePickUpKnifeOrWin(Player&amp; player,
        std::string_view choiceYes,
        std::string_view choiceNo,
        std::string_view choiceWin)
    {
        std::string userChoice;

        for (;;) {
            clearScreen();
            std::cout &lt;&lt; "Do you pick up the knife?\n";
            std::cin &gt;&gt; userChoice;

            if (userChoice == choiceYes) {
                player.hasKnife = true;
                return;
            }
            else if (userChoice == choiceNo) {
                player.hasKnife = false;
                return;
            }
            else if (userChoice == choiceWin) {
                player.wins = true;
                return;
            }
        }
    }

    bool userChoiceUnlockChest(std::string_view choiceYes,
        std::string_view choiceNo)
    {
        std::string userChoice;

        for (;;) {
            clearScreen();
            std::cout &lt;&lt; "Did you unlock the chest?\n";
            std::cin &gt;&gt; userChoice;

            if (userChoice == choiceYes) {
                return true;
            }
            else if (userChoice == choiceNo) {
                return false;
            }
        }
    }

    void printSnakeIsInChest()
    {
        clearScreen();
        std::cout &lt;&lt; "Inside the chest is a big fat snake :O\n";
        pressAnyKeyToContinue();
    }

    void printDead()
    {
        std::cout &lt;&lt; "You arise to heaven and meet God the Almighty\n"
            &lt;&lt; "God says unto you...\n"
            &lt;&lt; "     Thou hast lost the game of life and death"
            &lt;&lt; "because of this you have come back unto my realm."
            &lt;&lt; "I give you a choice that will only come once in a lifetime.\n"
            &lt;&lt; "Would you like to replay dat crappy little game or have\n"
            &lt;&lt; "Fun in Heaven?\n";
    }

    bool choiceReplay(std::string_view replay)
    {
        std::string userChoice;
        std::cin &gt;&gt; userChoice;

        return userChoice == replay;
    }

    bool playGame()
    {
        constexpr std::string_view choiceYes = "yes";
        constexpr std::string_view choiceNo = "no";
        constexpr std::string_view choiceWin = "maybe";
        constexpr std::string_view replay = "replay";

        Player player;

        userChoicePickUpKnifeOrWin(player, choiceYes, choiceNo, choiceWin);
        if (player.wins) {
            return false;
        }

        if (userChoiceUnlockChest(choiceYes, choiceNo)) {
            printSnakeIsInChest();
        }
        else {
            clearScreen();
            std::cout &lt;&lt; "You Lose\n";
            printDead();
            return choiceReplay(replay);
        }

        if (player.hasKnife) {
            clearScreen();
            std::cout &lt;&lt; "Since you have dat handy knife you kill dat snakey\n";
            pressAnyKeyToContinue();
            return false;
        }
        clearScreen();
        std::cout &lt;&lt; "YOU DIE HAHAHAHAHAHAHA\n";
        printDead();
        return choiceReplay(replay);
    }
}


int main()
{
    while (game::playGame()) {
        ;
    }
    game::printWin();
}
</code></pre>
    </div>