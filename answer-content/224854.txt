<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You've essentially built a glorified <a href="http://practicalcryptography.com/ciphers/caesar-cipher/" rel="nofollow noreferrer">Caesar Cipher</a>. Not all of the changes I suggest below are included in the final version of the reviewed code, but they should be considered. Here they are:</p>

<ul>
<li><strong>Comments</strong>: <code>#------- IMPORT STATEMENTS ------</code>, then having one import below it, is a bit verbose. You should only comment code that needs to be explained, like an algorithm or a method. </li>
<li><strong>Docstrings</strong>: Docstrings belong inside the method</li>
<li><strong>Structure</strong>: There really is not need to have a separate file for <code>Phrases</code>. Having an array, or user inputed, for the phrases within the file is good enough.</li>
<li><strong>Global Variables</strong>: It's not recommended to use global variables in your code. If it can be passed as a parameter, do it that way.</li>
<li><strong>Alphabet</strong>: <code>string</code> has it's own stored alphabet, so you can <code>import string</code> and use, in your case, <code>string.ascii_lowercase</code> for your alphabet.</li>
<li><strong>Main guard</strong>: You should wrap any code that isn't in a function in a main guard. <a href="https://stackoverflow.com/a/5544783/8968906">Here</a> is an answer that provides a deeper and more meaningful explanation.</li>
<li><strong>Elif Elif Elif</strong>: You had 7 <code>elif</code> checking for special characters. You can just use an <code>else</code> to catch anything not in the alphabet, and append that.</li>
<li><strong>String Formatting</strong>: <code>print("\n" + converted_phrase.upper() + "\n\n" + ref)</code> looks very chunky. It can be simplified to <code>print(f"\n{converted_phrase.upper()}\n\n{ref}")</code>, utilizing the <code>f""</code> string formatting. Using this, you can directly implement variables into strings, instead of using <code>+</code> and separating the string.</li>
</ul>

<p><strong><em>Final Code</em></strong></p>

<pre><code>import random

CHART = {
    97: 'a', 98: 'b', 99: 'c', 100: 'd', 101: 'e', 102: 'f', 103: 'g',
    104: 'h', 105: 'i', 106: 'j', 107: 'k', 108: 'l', 109: 'm', 110: 'n',
    111: 'o', 112: 'p', 113: 'q', 114: 'r', 115: 's', 116: 't', 117: 'u',
    118: 'v', 119: 'w', 120: 'x', 121: 'y', 122: 'z'
}

def create_new_phrase(text, rotations):
    """ Encodes the passed text, rotating `rotations` times """
    new_phrase = ""
    for index in range(len(text)):
        new_position = ord(text[index]) + (rotations % 26)
        if new_position &gt; 122:
            new_position = 97 + (new_position - 122)
        if ord(text[index]) not in CHART:
            new_phrase += text[index]
        else:
            new_phrase += CHART[new_position]
    return new_phrase

if __name__ == '__main__':
    print(create_new_phrase("Good will come to those who are generous and lend freely, who conduct their affairs with justice.".lower(), random.randint(1, 24)))
</code></pre>
    </div>