<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I can envision situations in which sharing the memory address of an object would be an unacceptable security hole. I want to offer an alternate solution for such cases. This uses a simple static counter to increment the GUID.</p>

<pre><code>class HasGuid {
private:
  static unsigned long currentId = 1;
  unsigned long guid_;
protected:
  HasGuid() : guid_(currentId++) {}
public:
  unsigned long Guid() { return guid_; }
};
</code></pre>

<p>Any class that needs a GUID can simply inherit from <code>HasGuid</code>. The GUID, itself, is safely hidden and can't be changed. And the GUID will be unique across all instances of all classes that inherit from <code>HasGuid</code>.</p>

<p>A further option may be to use Adamski's solution. But hash the address with a secret key before returning it.</p>

<pre><code>private:
  const unsigned long secretKey_ = {some random string of digits};
public:
  unsigned long getId() {
    return (unsigned long)this ^ secretKey_;
  }
</code></pre>

<p>Note: I know I'm a sinner for placing my braces on the same line as the function/class name. It's a habit I picked up from JavaScript.</p>

<p><strong>Edit:</strong> I recently learned in a software development class that GUIDs are usually just 16 byte random numbers. The odds of two random 16 byte numbers being identical is so fantastically small, that it is safe to assume they will never be identical across any instance of any class in any applications in use across the universe. In fact, to call the odds astronomical would be giving too much credit to astronomy (anecdote stolen from <a href="https://youtu.be/S9JGmA5_unY" rel="nofollow noreferrer">this video</a> by 3Blue1Brown). Also, most operating systems have a built in GUID tyoe that you can generate at any time by calling the appropriate API function.</p>
    </div>