<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I would clean your code before trying to make any performance changes to the algorithm.</p>

<h2><code>struct possition</code></h2>

<p>You can find lots of articles and <a href="https://stackoverflow.com/questions/3751911/why-are-c-sharp-structs-immutable">posts</a> online that suggest to make structs immutable. This means we should remove method <code>assign</code> and make the properties readonly. Let's also rename this struct to <code>Position</code> while we're at it and make sure to use <a href="https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/inside-a-program/coding-conventions" rel="nofollow noreferrer">C# Conventions</a> instead of those of Java.</p>

<pre><code>public struct Position 
{
    public float X { get; }
    public float Y { get; }
    public float Z { get; }

    public Position (Position other) =&gt; this(other.X, other.Y, other.Z);

    public Position (float x, float y, float z) =&gt; (X, Y, Z) = (x, y, z);
}
</code></pre>

<p>The equality check could be simplified:</p>

<blockquote>
<pre><code>public static bool operator ==(possition Pos1, possition Pos2){
    if (Pos1.X == Pos2.X &amp;&amp; Pos1.Y == Pos2.Y &amp;&amp; Pos1.Z == Pos2.Z){
            return true;
    }
    else {return false;}
}
</code></pre>
</blockquote>

<p>You don't need the explicit <code>if (condition) true else false</code> syntax.</p>

<pre><code>public static bool operator == (Position source, Position target) 
        =&gt; source.X == target.X
        &amp;&amp; source.Y == target.Y
        &amp;&amp; source.Z == target.Z;
</code></pre>

<p><strong>Bug:</strong> The inequality check is wrong. You should have used <code>!cond1 || !cond2 || !cond3</code> instead of <code>!cond1 &amp;&amp; !cond2 &amp;&amp; !cond3</code>. </p>

<blockquote>
<pre><code>public static bool operator !=(possition Pos1, possition Pos2){
    if (Pos1.X != Pos2.X &amp;&amp; Pos1.Y != Pos2.Y &amp;&amp; Pos1.Z != Pos2.Z){
            return true;
    }
    else {return false;}
}
</code></pre>
</blockquote>

<p>But even better is to negate the equality check.</p>

<pre><code>public static bool operator != (Position source, Position target) =&gt; !(source == target);
</code></pre>

<h2><code>struct box</code></h2>

<p>I have no idea what <code>NotNull</code> means here. If you want the struct to be null-assignable, you should use a <code>Nullable&lt;box&gt;</code> instead. Also, <code>this.NotNull = NULL;</code> is a really unfortunate assignment. Why store the variable with its inverse meaning, it only adds confusion? <code>Min</code> and <code>Max</code> are common names for bounds, use them. Here's a refactored immutable struct.</p>

<pre><code>public struct Box 
{
    public Position Min { get; }
    public Position Max { get; } 

    public Box (Position min, Position max) =&gt; (Min, Max) = (min, max);
}
</code></pre>

<h2><code>public static box getBoundingBox</code></h2>

<ul>
<li>You state the helper <code>Occupied</code> used by <code>getBoundingBox</code> is for testing purposes only. Then why does <code>getBoundingBox</code> call it? </li>
<li>There is no clear specification what this method should do. Start by providing a clear spec. </li>
<li>You don't need the <code>#.f</code> semantics for providing floats to your classes. <code>cornerOrigin.assign(0.0f,0.0f,0.0f);</code> can be written as <code>cornerOrigin.assign(0, 0, 0);</code>. - Since you no longer should assign, make a new instance instead <code>var corner = new Position(0, 0, 0);</code>. If you need to provided parameter to be able to store a different value, make it a by-ref parameter <code>getBoundingBox(ref Position cornerOrigin)</code>.</li>
<li>You have recurring blocks of code <code>if(Success) Success = false;</code>. Rather than resetting variables, you should split this algorithm up into more and smaller methods instead.</li>
</ul>

<hr>

<p>â˜› Once you have cleaned your code up, perhaps you could ask a follow-up question with code that's much more comprehensible.</p>
    </div>