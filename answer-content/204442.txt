<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I know, this is a bit late but I have some more minor optmimization suggestions:</p>

<ul>
<li>in your <code>legendre_symbol</code> implementation, you compute <code>pow(a, (p - 1)/2, p)</code>. You don't need to subtract <code>1</code> from <code>p</code>, since <code>p</code> is odd. Also, you can replace <code>p/2</code> with <code>p &gt;&gt; 1</code>, which is faster.</li>
<li>in your simple case handling, you can replace <code>p % 4</code> with <code>p &amp; 3</code> and again, <code>pow(a, (p + 1)/4, p)</code> with <code>pow(a, (p + 1) &gt;&gt; 2, p)</code>. Since you have checked that <code>p &amp; 3 == 3</code>, an equivalent solution would be <code>pow(a, (p &gt;&gt; 2) + 1, p)</code>, I would go for this one instead. It can make a difference when the right shift effectively reduces the byte size of <code>p</code>.</li>
<li>there is another simple case you can check for: <code>p % 8 == 5</code> or the equivalent <code>p &amp; 7 == 5</code>. In that case, you can compute <code>pow(a, (p &gt;&gt; 3) + 1, p)</code>, check if it is a solution (it is a solution if and only if <code>a</code> is quartic residue modulo <code>p</code>), otherwise multiply that with <code>pow(2, p &gt;&gt; 2, p)</code> to get a valid solution (and don't forget to calculate <code>% p</code> after the multiplication of course)</li>
<li><p>in your <code>while</code>-loop, you need to find a fitting <code>i</code>. Let's see what your implementation is doing there if <code>i</code> is, for example, <code>4</code>:</p>

<pre><code>pow(t, 2, p)
pow(t, 4, p)   # calculates pow(t, 2, p)
pow(t, 8, p)   # calculates pow(t, 4, p), which calculates pow(t, 2, p)
pow(t, 16, p)  # calculates pow(t, 8, p), which calculates pow(t, 4, p), which calculates pow(t, 2, p)
</code></pre>

<p>do you see the redundancy? with increasing <code>i</code>, the number of multiplications grows quadratically, while it could just grow linear:</p>

<pre><code>i, t2i, = 0, t
for i in range(1, m):
    t2i = t2i * t2i % p
    if t2i == 1:
        break
</code></pre></li>
<li><p>the last optimization is a rather simple one: I would just replace</p>

<pre><code>t = (t * b * b) % p
c = (b * b) % p
</code></pre>

<p>with</p>

<pre><code>c = (b * b) % p
t = (t * c) % p
</code></pre>

<p>which saves one multiplication</p></li>
</ul>
    </div>