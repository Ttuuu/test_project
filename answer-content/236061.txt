<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<pre><code>@BeforeEach
void init(){
    ModelMapper modelMapper = new ModelMapper();
    passwordEncoder = new BCryptPasswordEncoder();
</code></pre>
</blockquote>

<p>You're using actual implementation classes from your unit test.  This has implications in that you're also effectively testing these classes, so you have potential side effects from changes when you upgrade the library, performance / dependency considerations.  That said, it may be acceptable if you consider these to be reliable library methods with low performance impact/dependencies (nobody mocks out <code>String</code> for example), however if not you might want to consider mocks. I would probably mock out at least the <code>PasswordEncoder</code>, as this would make it easier to control the result of the encoded password.</p>

<p>You're also setting up these dependencies before each test.  There doesn't seem to be any need to do this, the same <code>ModelMapper</code> and <code>PasswordEncoder</code> could be used for all of the tests, so I'd tend to put it in <code>@BeforeAll</code>, or even when initialising the fields.</p>

<blockquote>
<pre><code>@Test
void encodePassword_correctly(){
</code></pre>
</blockquote>

<p>Your other tests have three parts to their names.  It looks like they are 'methodName_source_result'.  MethodName seems to be missing for this test name.  Where possible, consistency really does make it easier for other people to understand to expect.</p>

<blockquote>
<pre><code>//THEN
assertNotEquals(registerUserDto.getPassword(), user.getPassword());
</code></pre>
</blockquote>

<p>You don't really need to assert that the encoded password doesn't match the original password, if you're going to test that it matches with the password encoder as well.  It just adds noise to the test.</p>

<blockquote>
<pre><code>assertTrue(passwordEncoder.matches(registerUserDto.getPassword(), user.getPassword()));
</code></pre>
</blockquote>

<p>This is checking with your encoder that the returned password would match.  As I've said, this is testing more than just your code, however it might be acceptable to you.  I'd prefer a pair of tests that explicitly test this interaction something like this:</p>

<pre><code>@Test
void convert_fromRegisterUserDto_toEncodedPassword() {
    //BEFORE
    when(passwordEncoder.encode(any(String.class)))
        .thenReturn("encodedPassword");

    //WHEN
    ConvertMapper.User user = converterRegisterUserDto.convert(registerUserDto);

    //THEN, assert encodedPassword is mapped into returned user.
    assertEquals("encodedPassword", user.getPassword());
}

@Test
void convert_delegatesPasswordEncoding_toPasswordEncoder() {
    //BEFORE
    registerUserDto.setPassword("unencodedPassword");

    //WHEN
    converterRegisterUserDto.convert(registerUserDto);

    //THEN, verify correct password was encoded
    verify(passwordEncoder).encode("unencodedPassword");
}
</code></pre>

<p>Which assumes a mock setup in the field/init:</p>

<pre><code>privatePasswordEncoder passwordEncoder = mock(PasswordEncoder.class);

void init() {
    // default to returning emptyString
    when(passwordEncoder.encode(any(String.class))).thenReturn("")
</code></pre>

<p>This test seems a bit redundant:</p>

<blockquote>
  <p>assertEquals(User.class, user.getClass());</p>
</blockquote>

<p>Do you <em>really</em> care if it's an actual instance of <code>User</code>, rather than a derived type?</p>

<blockquote>
<pre><code>assertEquals(registerUserDto.getUsername(), user.getUsername());
</code></pre>
</blockquote>

<p><code>assertEquals</code> always seems counter intuitive to me (I want the expected to be on the right).  So I tend to use assertJ:</p>

<pre><code>assertThat(user.getUsername()).isEqualTo(registerUserDto.getUsername());
</code></pre>

<p>However, it can also be more descriptive to use constants in your tests to be more expressive.  This allows you to see at a glance where the tested information is coming from:</p>

<pre><code>@Test
void convert_fromRegisterUserDto_isMappingCorrectly() {
    //Before
    registerUserDto.setUsername("UserName");
    registerUserDto.setEmail("A@B.C");

    //WHEN
    ConvertMapper.User user = converterRegisterUserDto.convert(registerUserDto);

    //THEN
    assertEquals("UserName", user.getUsername());
    assertEquals("A@B.C", user.getEmail());
}
</code></pre>
    </div>