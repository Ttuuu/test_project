<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You have two errors in the HTML: </p>

<ul>
<li><p>A <code>&lt;title&gt;</code> element is required.</p></li>
<li><p>There is a closing <code>&lt;/body&gt;</code> tag instead of an opening tag <code>&lt;body&gt;</code> tag at the beginning.</p></li>
</ul>

<p>Furthermore in the HTML :</p>

<ul>
<li><p>The comment <code>&lt;!-- Page Contents !--&gt;</code> is pointless.</p></li>
<li><p>It is convention to write attributes without spaces around the equals sign.</p></li>
<li><p>Don't use a (disabled) <code>&lt;input&gt;</code> for output. HTML specifically provides the  <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/output" rel="nofollow noreferrer"><code>&lt;output&gt;</code></a> element for this.</p></li>
<li><p>Don't add unnecessary attributes if you don't use them, such as the <code>id</code> on the display or the <code>name</code>s on the buttons.</p></li>
</ul>

<p>On to the JavaScript:</p>

<ul>
<li><p>Don't use the <code>on...</code> event listener properties, but use <code>addEventListener</code> like you did for the button click listener. </p></li>
<li><p>It's not wrong, but uncommon to select elements using the <code>name</code> attribute. A class is the usual way.</p></li>
<li><p>For the form selector string you correctly use single quotes, but for the button selector string you use a template string with backticks (<code>`</code>) unnecessarily. Use single quotes there too.</p></li>
</ul>

<p>Also the button selector is unnecessarily long. Just <code>form[name="calculator"] input[type="button"]</code> is sufficient. Considering you already have a reference to the form you could call <code>querySelectorAll</code> on that:</p>

<pre><code>const calculator = document.querySelector('form[name="calculator"]');
const btns = calculator.querySelectorAll('input[type="button"]');
</code></pre>

<p>Looping over all buttons and then assigning the event handlers based on <code>if</code> constraints isn't really practical. It would be better to select the "clear" and "equal" buttons directly and give all numerical and operator buttons a class to select them:</p>

<pre><code>calculator.querySelector('button[name="clear"]').addEventListener("click", ...);

calculator.querySelector('button[name="equal"]').addEventListener("click", ...);

const btns = calculator.querySelectorAll('input.numerical, input.operator').forEach(
    button =&gt; button.addEventListener("click", ...);
) 
</code></pre>

<p>Finally the biggest problem, for two reasons: <code>eval</code>.</p>

<ol>
<li><p>Generally using <code>eval</code> is a bad idea. See: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval#Never_use_eval!" rel="nofollow noreferrer">Never use eval!</a></p></li>
<li><p>Your program isn't really a calculator. It's an on-screen keyboard that evaluates (potentially invalid) expressions.</p></li>
</ol>

<p>At the very least you should replace <code>eval</code> with <code>Function</code> (as the above link demonstrates) and catch any errors it throws. Better would be to check if the entered expression is valid before evaluating it (or even better yet stop the user entering an invalid expression in the first place). Finally try evaluating the expression yourself, or write a application that doesn't build an expression, but calculates as you type just like a real calculator.</p>
    </div>