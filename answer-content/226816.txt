<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>English language</h3>

<p>These are relatively minor issues, but fixing them might help other people to use / maintain your code.</p>

<ol>
<li>The verb corresponding to <em>permutation</em> is <em>permute</em>.</li>
<li>I'm pretty sure that <code>reminder</code> is intended as <code>remainder</code>.</li>
</ol>

<h3>Code</h3>

<blockquote>
<pre><code>    public static IEnumerable&lt;T[]&gt; Permutate&lt;T&gt;(this IEnumerable&lt;T&gt; source)
    {
        return permutate(source, Enumerable.Empty&lt;T&gt;());
        IEnumerable&lt;T[]&gt; permutate(IEnumerable&lt;T&gt; reminder, IEnumerable&lt;T&gt; prefix) =&gt;
            !reminder.Any() ? new[] { prefix.ToArray() } :
            reminder.SelectMany((c, i) =&gt; permutate(
                reminder.Take(i).Concat(reminder.Skip(i+1)).ToArray(),
                prefix.Append(c)));
    }
</code></pre>
</blockquote>

<p>To return a permutation of <code>source</code> it is necessary to find all of the elements of <code>source</code>, so I think this is a case where the first thing the method should do is to fully evaluate <code>source</code> (e.g. with <code>ToList()</code> or <code>ToArray()</code>), and then work with that list rather than <code>source</code>. Apart from the efficiency benefits, that guarantees that all of the permutations will be permutations of the same size and elements, even if <code>source</code> has side-effects.</p>

<p>There are a couple of things you can then do with a list to make it much more efficient. Either you can use a standard "next permutation" algorithm (<a href="https://en.wikipedia.org/wiki/Permutation#Generation_in_lexicographic_order" rel="noreferrer">see Wikipedia</a>: for arbitrary inputs it can be done by permuting an array of integers and copying the operations on the array of <code>T</code>) or you can recursively select an element from the first <code>k</code>, swap it to position <code>k</code>, recurse on <code>k-1</code>, and then swap it back. When <code>k==0</code> you instead copy the entire array and yield the copy. This avoids building up chains of <code>Append</code> and the overheads of <code>Take</code>/<code>Skip</code>/<code>Concat</code>. I expect that the most efficient would be the "next permutation" approach, because it is non-recursive and so doesn't wrap coroutine in coroutine.</p>
    </div>