<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Using line breaks and <code>{}</code> in code is not a crime :-P Only because we have the nice <code>=&gt;</code> doesn't mean we have to use it <strong>everywhere</strong>. The code is so condensed that it's hard to say where anything begins and ends.</p>

<p>I find you should first try to write this function in such a way that it is easy to read and one can see what and where could be optimized.</p>

<p>So, I think in this case the <code>Permutate</code> extension would benefit from the query syntax and two <code>let</code> <em>helpers</em>. This would shorten the calls and make it also easier to format and read. Now we can try to use @dfhwze suggestions.</p>

<p>How about this?</p>

<pre><code>public static IEnumerable&lt;string&gt; Permutate(this string source)
{
    return
        source
            .AsEnumerable() // &lt;-- not necessary, string is already IEnumerable&lt;char&gt;
            .Permutate()
            .Select(a =&gt; new string(a));
}

public static IEnumerable&lt;T[]&gt; Permutate&lt;T&gt;(this IEnumerable&lt;T&gt; source)
{
    return permutate(source, Enumerable.Empty&lt;T&gt;());

    IEnumerable&lt;T[]&gt; permutate(IEnumerable&lt;T&gt; reminder, IEnumerable&lt;T&gt; prefix)
    {
        if (reminder.Any())
        {
            return
                from t in reminder.Select((r, i) =&gt; (r, i))
                let nextReminder = reminder.Take(t.i).Concat(reminder.Skip(t.i + 1)).ToArray()
                let nextPrefix = prefix.Append(t.r)
                from permutation in permutate(nextReminder, nextPrefix)
                select permutation;

        }
        else
        {
            return new[] { prefix.ToArray() };
        }
    }
}
</code></pre>
    </div>