<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ol>
<li><p>Don't mark your class <code>final</code> without a good reason. It inhibits user-freedom.</p></li>
<li><p>The default-access for members of a <code>class</code> is already <code>private</code>.</p></li>
<li><p>Explicitly deleting <a href="https://en.cppreference.com/w/cpp/language/copy_constructor" rel="nofollow noreferrer">copy-constructor</a> and <a href="https://en.cppreference.com/w/cpp/language/copy_assignment" rel="nofollow noreferrer">copy-assignment-operator</a> is superfluous, as you define move-constructor and move-assignment, which <em>already</em> suppresses them. Still, some assert being explicit adds clarity.</p></li>
<li><p>I wonder why you didn't declare construction from <code>T*</code> to be <code>constexpr</code>...</p></li>
<li><p>Try to consistently use the injected class-name (<code>unique_ptr</code>), instead of sporadically naming the template-arguments (<code>unique_ptr&lt;T&gt;</code>).</p></li>
<li><p>You are missing implicit upcasting in the move-ctor and move-assignment-operator.</p>

<pre><code>template &lt;class U, class = std::enable_if_t&lt;
    std::has_virtual_destructor&lt;T&gt;() &amp;&amp; std::is_convertible&lt;U*, T*&gt;()&gt;&gt;
unique_ptr(unique_ptr&lt;U&gt;&amp;&amp; other) noexcept
: ptr_(other.release())
{}

template &lt;class U&gt;
auto operator=(std::unique_ptr&lt;U&gt;&amp;&amp; other) noexcept
-&gt; decltype((*this = unique_ptr(other))) {
    return *this = unique_ptr(other);
}
</code></pre></li>
<li><p>Take a look at <a href="https://en.cppreference.com/w/cpp/utility/exchange" rel="nofollow noreferrer"><code>std::exchange(object, value)</code> from <code>&lt;utility&gt;</code></a>. It allows you to simplify some of your code.</p></li>
<li><p>If you use move-and-swap, you could isolate freeing of the referee to the dtor. Having it at only one place ensures you always do it the same, and is a good first step for retrofitting custom deleters. Not to mention that it in many cases simplifies the implementation.</p></li>
<li><p><code>(ptr != nullptr)</code> can be simplified to <code>ptr</code>. In contexts where you have to force the type, <code>!!ptr</code>.</p></li>
<li><p>Why are <code>op==()</code> and <code>op!=()</code> inline-friend-functions, but <code>swap()</code> isn't? That's inconsistent. It's especially puzzling as they are all written to use the public interface only.</p></li>
<li><p>There is exactly one place where you don't have a single empty line between two functions, but two. Yes, that's nothing big.</p></li>
</ol>
    </div>