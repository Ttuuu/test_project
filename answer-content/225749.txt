<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Ilkhd made good points about performance within the context of the task. I'll concentrate on a couple of generic issues.</p>

<p><strong>Naming</strong></p>

<pre><code>public static String hexToBin(String s) 
public static String binToHex(String s)
</code></pre>

<p>The String parameter in the above method signatures is a hexadecimal string or binary string so they should be named <code>hexString</code> and <code>binaryString</code>, like is done with the local variables.</p>

<pre><code>Utils.leftPad4(String, int)
</code></pre>

<p>The code for this mehtod is missing, but I assume it left-pads the String with the number of zeroes given in the int parameter. The 4 in the name seems unnecessary and confusing. The method doesn't seem to be very reusable either. It should be made into a generic left pad method: <code>Utils.leftPad(String target, char padChar, int count)</code>. Although I'm fairly sure such a method already exists in one of the common utility libraries (Apache Commons, etc).</p>

<pre><code>private static Map&lt;Character, String&gt; binMap = new HashMap&lt;&gt;();
private static Map&lt;String, Character&gt; hexMap = new HashMap&lt;&gt;();
</code></pre>

<p>If possible, the name of a map should describe the key and the value. These should thus be <code>hexToBinMap</code> and <code>binToHexMap</code>. They even managed to confuse me, since the first one does not map binary to anything. It maps hexadecimal characters to binary, so the naming was completely backwards. They have also been documented as lookup tables when they are actually lookup maps.</p>

<p><strong>Performance</strong></p>

<pre><code>StringBuilder chars = new StringBuilder();
...
hexString.append(hexMap.get(chars.toString()));
</code></pre>

<p>This fills a StringBuilder with consecutive characters from a String and immediately converts it to another String. It should use <a href="https://docs.oracle.com/javase/7/docs/api/java/lang/String.html#substring(int,%20int)" rel="nofollow noreferrer">String.substring(int startIndex, int endIndex)</a> instead. This removes the unnecessary char array allocation done in StringBuilder.toString.</p>

<p>If you're concerned about performance, you should use an IDE, like Eclipse or Idea. They allows you to easily dig into the code in the JRE, like the StringBuilder.toString and examine yourself what it does. Knowing what the libraries you use is essential to performance optimization.</p>

<p><strong>Error checking</strong></p>

<pre><code>binaryString.append(binMap.get(s.charAt(i)));
</code></pre>

<p>If the input string isn't a valid hexadecimal string, this will just append the string "null" to the binary string. There needs to be a check that the value returned from <code>binMap.get(...)</code> (or hexToBinMap as it should be) is not null. There is also no checking or documentation for upper vs lower case characters.</p>

<p><strong>Finally</strong></p>

<pre><code>public static String hexToBin(String s) 
{   
    StringBuilder binaryString = new StringBuilder();
</code></pre>

<p>Whenever a piece of code declares a variable that is not intended to be changed, it should be declared final. This applies to method parameters, local variables and class members variables. This reduces the cognitive load of the maintainer as it removes the need to figure out if the variable is ever manipulated. The code above should thus become: </p>

<pre><code>public static String hexToBin(final String s) 
{   
    final StringBuilder binaryString = new StringBuilder();
</code></pre>
    </div>