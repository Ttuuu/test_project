<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Given the product formula</p>

<p><span class="math-container">$$\binom nk = \prod_{i=1}^k \frac{n-k+i}{i} \tag1$$</span></p>

<p>and the symmetry property</p>

<p><span class="math-container">$$\binom nk = \binom n{n-k} \tag2$$</span></p>

<p>of the binomial coefficient, you can implement the calculation in the following way which avoids fractional intermediate values as well as looping more than <span class="math-container">\$\lfloor \frac{n}{2}\rfloor\$</span> times.</p>

<pre><code>static final BigInteger MOD = BigInteger.valueOf(1_000_000_007L);

public static BigInteger calcBinCoeff(BigInteger n, BigInteger k)
{
    BigInteger bin; // binomial coefficient
    BigInteger nom; // nominator
    BigInteger den; // denominator

    if (k.shiftLeft(1).compareTo(n) == 1)
        return calcBinCoeff(n, n.subtract(k)); // (2)

    bin = BigInteger.ONE;
    nom = n;
    den = BigInteger.ONE;

    while (den.compareTo(k) &lt; 1) // (1)
    {
        bin = bin.multiply(nom).divide(den);
        nom = nom.subtract(BigInteger.ONE);
        den = den.add(BigInteger.ONE);
    }

    return bin;
}

// 159835829
calcBinCoeff(BigInteger.valueOf(1000), BigInteger.valueOf(800)).mod(MOD);
</code></pre>

<p>Using <code>long</code> would overflow for <span class="math-container">\$1000 \choose 500\$</span>.</p>

<p>Instead of taking the result of <code>calcBinCoeff</code> modulo <code>MOD</code> you could modify the above code and calculate <code>bin</code> modulo <code>MOD</code> in each intermediate step. As @MartinR mentioned in a comment, division must then be replaced by multiplication with the modular inverse of the denominator. This works because 1000000007 is prime and thus coprime to any input in the given range.</p>

<pre><code>public static BigInteger calcBinCoeff(BigInteger n, BigInteger k)
{
    BigInteger bin; // binomial coefficient
    BigInteger nom; // nominator
    BigInteger den; // denominator

    if (k.shiftLeft(1).compareTo(n) == 1)
        return calcBinCoeff(n, n.subtract(k));

    bin = BigInteger.ONE;
    nom = n;
    den = BigInteger.ONE;

    while (den.compareTo(k) &lt; 1)
    {
        bin = bin.multiply(nom).multiply(den.modInverse(MOD)).mod(MOD);
        nom = nom.subtract(BigInteger.ONE);
        den = den.add(BigInteger.ONE);
    }

    return bin.mod(MOD);
}
</code></pre>

<p>For the small prime modulus 1000000007 this algorithm also works for <code>long</code> without overflow. A possible implementation is given below.</p>

<pre><code>public static long calcBinCoeff(long n, long k)
{
    long bin; // binomial coefficient
    long nom; // nominator
    long den; // denominator

    if (k + k &gt; n)
        return calcBinCoeff(n, n - k);

    bin = 1;
    nom = n;
    den = 1;

    while (den &lt;= k)
    {
        bin = Math.floorMod(bin * nom, MOD);
        bin = Math.floorMod(bin * modInverse(den, MOD), MOD);
        nom -= 1;
        den += 1;
    }

    return Math.floorMod(bin, MOD);
}

/**
 * The modular inverse as described in
 * https://en.wikipedia.org/wiki/Extended_Euclidean_algorithm
 * @param n A positive number.
 * @param p A prime number.
 * @return The modular inverse
 */
public static long modInverse(long n, long p)
{
    //  i-1   i
    long R,   r; // remainders
    long S,   s; // 1st Bézout coefficients
    long T,   t; // 2nd Bézout coefficients

    assert n &gt; 0 &amp;&amp; p &gt; 0;

    R = n;
    r = p;

    S = 1;
    s = 0;

    T = 0;
    t = 1;

    while (r &gt; 0)
    {
        long _q = R / r;
        long _r = R - _q * r;  R = r;  r = _r;
        long _s = S - _q * s;  S = s;  s = _s;
        long _t = T - _q * t;  T = t;  t = _t;
    }

    assert R == 1; // gcd == 1 since p is assumed to be prime

    return Math.floorMod(S, p);
}
</code></pre>
    </div>