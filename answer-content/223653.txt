<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Welcome to the world of modern C++!</p>

<p>The OP has stated that "I don't think you need to write code that a C programmer couldn't understand to say that a program is C++."  That's partially right — high-level, modern C++ techniques are easy to understand.  What is wrong is that C++ programs don't have to be understood by C programmers in particular — C++ and C are different languages.  If you are programming in the common subset of C and C++ (plus a few C++ features), you are not programming in C++.</p>

<p>As such, this answer focuses exclusively on how to convert your code to C++ code.  It seems that the OP is not very familiar with modern C++ programming, so some of the points may not make much sense to the OP.  As they get more familiar with C++ programming, hopefully they will understand.</p>

<hr>

<blockquote>
  <p>After writing <code>swnprintf</code> and <code>sbprintf</code> in C (<a href="https://codereview.stackexchange.com/q/223112">Encapsulating snprintf
  to avoid repetition of
  sizeof</a>), I've written
  a C++ version of them:</p>
</blockquote>

<p>Oh that's nice.  Don't have to deal with low-level programming details anymore.  Finally we have a C++ wrapper on top of <code>snprintf</code>.</p>

<blockquote>
  <p><code>swnprintf</code>:</p>
  
  <p>Similar to <code>snprintf</code>.  Properties: (properties not mentioned shall be
  the same as <code>snprintf</code>)</p>
  
  <ul>
  <li>It writes the actual value of characters written (excluding the NUL terminator) through a pointer, instead of returning it.</li>
  </ul>
</blockquote>

<p>Huh?  I was expecting a C++-style function.  Why are we using output parameters?</p>

<blockquote>
  <p>The user can explicitly discard that value by passing NULL.</p>
</blockquote>

<p>Why not just return it then?  Let's read on.</p>

<blockquote>
  <p>If a NUL character has been written in the middle of the string (eg.:
  <code>swnprintf(buf, &amp;w, sizeof(buf), "%c%c%c", 'a', 0, 'b');</code>), the last
  NUL written is not counted, but any other characters until that one,
  including NULs are counted. In this example, <code>w == 3</code> after the
  function call.</p>
</blockquote>

<p>This makes sense.  The NUL character is not included in the length of a string anyway.</p>

<blockquote>
  <p>If the string is truncated, the value written is the actual number of
  characters written, and not the value that would have been written had
  <code>n</code> been sufficiently large.</p>
</blockquote>

<p>The phrase "the string is truncated" caught my eyes.  Why do we have to care about that in C++?</p>

<blockquote>
  <p>If there's an error in the internal call to snprintf, the resulting
  string is unreliable (<code>written</code> is also unreliable) and the return
  value is negative. If there's truncation, the string is valid and the
  return value is positive. If there's no error, the return value is 0.</p>
</blockquote>

<p>The reason for using an output parameter is revealed — you are using the return value to report errors.  In C++, the usual way is to use the return value for output, and <em>exceptions</em> to report errors.</p>

<blockquote>
  <p><code>errno</code> is set on any error. Truncation: <code>ENOMEM</code>. The absolute value
  of the return value is the same as <code>errno</code>.</p>
</blockquote>

<p>Good old <code>errno</code> ... C++ programs are expected to stay a few meters away from it.</p>

<blockquote>
  <p>Usage:</p>
  
  <ul>
  <li><p>Example where the user doesn't care about truncation:</p>

<pre><code>char        buf[BUFSIZ];
ptrdiff_t   tmp;
ptrdiff_t   len;

if (alx::swnprintf(buf, &amp;tmp, sizeof(buf), "text, num=%i", 7) &lt; 0)
        goto err;
len = tmp;
if (alx::swnprintf(&amp;buf[len], &amp;tmp, sizeof(buf) - len, "2nd part") &lt; 0)
        goto err;
len += tmp;
</code></pre></li>
  </ul>
</blockquote>

<p>Wait, this is C — well, not really, we have <code>::</code>.  But this isn't the kind of C++ I am expecting — in C++ I expect this:</p>

<pre><code>std::string result = alx::swnprintf("text, num=%i", 7) + alx::swnprintf("2nd part");
</code></pre>

<p>Notice:</p>

<ul>
<li><p>the conciseness and readability; (I doubt a C programmer has trouble <em>understanding</em> it)</p></li>
<li><p>the reduced opportunity for errors to kick in;</p></li>
<li><p>the lack of explicit memory management (<code>std::string</code> does them under the hood) and error checking (exceptions do them under the hood).</p></li>
</ul>

<blockquote>
  <ul>
  <li><p>Example where the user cares about truncation and doesn't about len:</p>

<pre><code>char        cmd[_POSIX_ARG_MAX];
ptrdiff_t   tmp;

if (alx::swnprintf(cmd, &amp;tmp, sizeof(cmd), "%s ", "cat"))
        goto err;
if (alx::swnprintf(&amp;cmd[tmp], NULL, sizeof(cmd) - tmp, " %s ", "main.c"))
        goto err;
system(cmd);
</code></pre></li>
  </ul>
</blockquote>

<p>Corresponding example in a C++ program:</p>

<pre><code>system(alx::swnprintf("%s %s", "cat", "main.c"));
</code></pre>

<p>Where <code>system</code> has been wrapped to take <code>std::string</code>:</p>

<pre><code>int system(const std::string&amp; command)
{
  return std::system(command.c_str());
}
</code></pre>

<blockquote>
  <p><code>sbprintf</code>:</p>
  
  <p>This is a higher abstraction than <code>swnprintf</code>. It is designed to only
  accept arrays as input. It is safer because it calculates internally
  the size of the buffer, so the user has less chance of writing buggy
  code. The down side is that it is less flexible (it can only write at
  the beginning of a buffer). Apart from that, the behaviour is the same
  as in <code>swnprintf</code>.</p>
</blockquote>

<p>I would expect a "higher abstraction" to behave as in the above examples.</p>

<hr>

<p>It is always easier said than done.  Now let's convert your code step by step.</p>

<p>I am very glad to see that you used a namespace.  This avoids name clashes.</p>

<p>Here's your <code>swnprintf</code> declaration:</p>

<pre><code>int swnprintf(char *__restrict__ str, ptrdiff_t *__restrict__ written,
              ptrdiff_t nmemb, const char *__restrict__ format, ...);
</code></pre>

<p>I would separate it to two functions.  One receives a length argument:</p>

<pre><code>template &lt;typename... Args&gt;
std::string swnprintf(const char* format, std::size_t length, Args&amp;&amp;... args);
</code></pre>

<p>The other does not, and calls <code>snprintf</code> twice to determine the length: (I have no idea how to name it)</p>

<pre><code>template &lt;typename... Args&gt;
std::string swprintf(const char* format, Args&amp;&amp;... args);
</code></pre>

<p>Notice that the output is stored in the returned <code>std::string</code>.  <code>length</code> is of type <code>std::size_t</code> to prevent negative length in the first place.  The <code>str</code> is allocated internally by <code>std::string</code>, <code>written</code> is available via <code>str.size()</code>, <code>nmemb</code> is no longer needed, and the return value is converted to exceptions.  And we use a template parameter pack to pass the arguments to <code>snprintf</code>.</p>

<p>You need to define templates in the header.  Here's my implementation:</p>

<pre><code>namespace alx {

  struct Internal_error :std::exception {};
  struct Truncation_error :std::exception {};

  template &lt;typename... Args&gt;
  std::string swnprintf(const char* format, std::size_t length,
                        Args&amp;&amp;... args)
  {
    std::string buffer(length, '\0');
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wformat"
    int len = std::snprintf(buffer.data(), length + 1, format,
                            std::forward&lt;Args&gt;(args)...);
#pragma GCC diagnostic pop
    if (len &lt; 0)
      throw Internal_error{};
    else if (static_cast&lt;std::size_t&gt;(len) &lt;= length)
      return buffer;
    else
      throw Truncation_error{};
  }

  template &lt;typename... Args&gt;
  std::string swprintf(const char* format, Args&amp;&amp;... args)
  {
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wformat"
    int len = std::snprintf(nullptr, 0, format, args...);
#pragma GCC diagnostic pop
    return swnprintf(format, len, args...);
  }

}
</code></pre>

<p><code>Internal_error</code> and <code>Truncation_error</code> are exception types to denote errors.  (I had to add the pragmas to suppress the warning; in practice some kind of wrapping is expected.)</p>
    </div>