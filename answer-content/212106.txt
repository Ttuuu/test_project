<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Maybe it is overkill to use <code>findInterval</code> when your brackets only have two values (a min and a max). I would suggest this much shorter function based on two <code>outer</code> calls with <code>&gt;=</code> and <code>&lt;=</code>. As you probably know, <code>outer</code> is efficient in that it can take advantage of vectorized functions, so here only a single call to <code>&lt;=</code> and <code>&gt;=</code> will be made:</p>

<pre><code>assign_interval2 &lt;- function(x, brackets) {
  stopifnot(all(lengths(brackets) == 2L))
  lower_bounds &lt;- sapply(brackets, head, 1)
  upper_bounds &lt;- sapply(brackets, tail, 1)
  outer(x, lower_bounds, "&gt;=") &amp; outer(x, upper_bounds, "&lt;=")
}
</code></pre>

<p>The results are the same and benchmarks suggest this is also a bit faster:</p>

<pre><code>x &lt;- 1:6505
brackets &lt;- list(c(1,  325), c(1,  651), c(1,  976),
                 c(1, 1301), c(1, 1626), c(1, 1952))

res1 &lt;- assign_interval(x = x, brackets = brackets)
res2 &lt;- assign_interval2(x = x, brackets = brackets)
any(res1 != res2)
# [1] FALSE

library(microbenchmark)
microbenchmark(
  assign_interval(x = x, brackets = brackets),
  assign_interval2(x = x, brackets = brackets)
)

# Unit: milliseconds
#                                          expr      min        lq      mean
#   assign_interval(x = x, brackets = brackets) 7.851050 11.278404 15.300305
#  assign_interval2(x = x, brackets = brackets) 1.373723  1.628319  3.134719
#     median      uq       max neval
#  13.099052 14.4824 152.33409   100
#   2.192194  3.2971  13.70505   100
</code></pre>

<hr>

<p>That being said, let's review your code and see if we can make small suggestions to improve your code while staying true to your implementation. </p>

<p>Instead of the <code>do.call("cbind", lapply(...))</code>, you could use <code>sapply</code>. The <code>s</code> in <code>sapply</code> is meant to do that exactly that: <code>s</code>implify the output by binding the pieces together. It comes at a very small (time) performance cost which should not affect you much here considering you do not have many <code>brackets</code>. I also notice that you are using the <code>-&gt;</code> assignment operator which is not often used by R programmers hence not recommended.</p>

<pre><code>dat &lt;- sapply(brackets, findInterval, x = x, rightmost.closed = TRUE)
</code></pre>

<p>For the friendly names, I think the following would read better:</p>

<pre><code>lower_bounds &lt;- sapply(brackets, head, 1)
upper_bounds &lt;- sapply(brackets, tail, 1)
friendly_names &lt;- paste("int", lower_bounds, upper_bounds, sep = "_")
</code></pre>

<p>Next, a call to <code>setNames</code>is a bit inefficient as it copies your data to a separate space in memory. Instead, you should use the <code>colnames&lt;-</code> function so it only modifies the attribute of your existing object.</p>

<pre><code>colnames(int_dta) &lt;- friendly_names
</code></pre>

<p>Next, the use of <code>apply</code> is pretty inefficient as it loops on the columns. Instead you could just do:</p>

<pre><code>int_dta &lt;- int_dta == 1L
</code></pre>

<p>to convert to a matrix of <code>TRUE/FALSE</code>.</p>

<p>At the end, you are again making an unnecessary copy of your data. You can just change the rownames of your current object, then return it.</p>
    </div>