<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><a href="https://codereview.stackexchange.com/a/209689/187192">Josay's answer</a> is right on the money in terms of how to start optimizing one's Python code. </p>

<p>Below I go further with the optimization that Josay started. I should warn that the code is at a stage where optimizations begin to really flirt with readability, and so for shared code that must be understood and maintained, we're home safe.</p>

<p>If we desire to get a "one-liner" Python script, for what it's worth, let's look at the difference between <code>list1</code> and <code>list2</code>. As a side-note about style, more descriptive names of these lists might be <code>evens</code> and <code>odds</code>: hints that would really help the person who has to read your code. </p>

<h2>Finding commonality in how the odds even digits are handled</h2>

<p>Recall that for our sum, we will be adding up all the numbers in <code>odds</code>. We will, in fact, also be adding up all the digits in <code>evens</code>, except we will <em>also</em> add them up again (doubling). Then we also need to account for the cases when the doubling results in two-digit numbers, but more on that below.</p>

<p>Since both <code>odds</code> and <code>evens</code> adds each digit, we could start off with just adding up all the digits:</p>



<pre class="lang-python prettyprint-override"><code>def validate_credit_card_number(card_number):     #incomplete code
    temp_list = [int(c) for c in str(card_number)]
    return ( sum(temp_list) + CORRECTIONS ) % 10 == 0
</code></pre>

<p>So what are the corrections we need to make? Well, every other digit needs to be added again. Instead of dividing the list up into <code>evens</code> and <code>odds</code> and separating the problems, what if we had some sort of <em>indicator</em> that we are processing an odd or an even digit? </p>

<h2>Correcting for the even numbers</h2>

<p>One possible answer is to somehow look up the <em>index</em> of the digit we are processing, and seeing if that one is odd or even. The check for whether <code>i</code> is odd is just <code>(i % 2) == 1</code>.</p>

<p>But what's a good way of getting to know both the index of the digit and the digit itself? Python has a nice built-in iterator called <a href="https://docs.python.org/3/library/functions.html#enumerate" rel="nofollow noreferrer">enumerate</a>. Formally, <code>enumerate</code> gives you a generator that provides (index,element) pairs from a list. To illustrate, <code>enumerate (["foo","bar",7,"zoo"])</code> returns a generator for <code>[(0, 'foo'), (1, 'bar'), (2, 7), (3, 'zoo')]</code>. Great! Let's see if we can use that.</p>

<pre class="lang-python prettyprint-override"><code>def validate_credit_card_number(card_number):     #incomplete code
    temp_list = [int(c) for c in str(card_number)]
    return sum([ x + (x if (i % 2)==0 else 0) for (i,x) in enumerate(temp_list)]) % 10 == 0
</code></pre>

<p>Here we use Python's <code>a if &lt;test&gt; else b</code> ternary notation to check if the number is the even number. </p>

<h2>Thinking backwards</h2>

<p>But wait ... the Luhn specification said we needed to start counting from the <em>right-most</em> digit. So what if that digit happens to have an even index? Our odds and evens would be exactly switched! Here, we would notice that it'd be so much more convenient to just count from the right. All we are doing is adding up numbers, so it wouldn't make any difference if we were to just reverse the list first! We just have to be careful that the rightmost digit in the reverse list (<code>temp_list</code>) is now at index 0, so we must now be correcting the <em>odd</em> numbers.</p>

<pre class="lang-python prettyprint-override"><code>def validate_credit_card_number(card_number):     #incomplete code
    temp_list = reversed([int(c) for c in str(card_number)])
    return sum([ x + (x if (i % 2)==1 else 0) for (i,x) in enumerate(temp_list)]) % 10 == 0
</code></pre>

<h2>Fixing the double digit cases</h2>

<p>Much better. But, alas, there is still an issue with the double digits. If the digit at the even index is 0, 1, 2, 3, or 4, we actually do the right thing: double the number. But if it's 5, 6, 7, 8, or 9, we are currently adding 10, 12, 14, 16, 18 instead of 1, 3, 5, 7, 9, respectively. But for those numbers, the difference between what we do now and what we should do is always 9! How about adding a check for whether the digit is 5 or more, in which case subtract 9?</p>

<pre class="lang-python prettyprint-override"><code>def validate_credit_card_number(card_number):
    temp_list = reversed([int(c) for c in str(card_number)])
    return sum([ x + (x + (-9 if x&gt;=5 else 0) if (i % 2)==1 else 0) for (i,x) in enumerate(temp_list)]) % 10 == 0
</code></pre>

<p>This code actually works! </p>

<h2>Simplifying with modulus tricks</h2>

<p>Let's keep going! If we add -9 to a sum that we are reducing modulo 10, that's the same as adding 1 to the sum. Why? Because <span class="math-container">\$-9 \pmod{10} \equiv 10 + (-9) \pmod{10} \equiv 1 \pmod{10}\$</span> since the extra 10 doesn't change the modulus. It's a bit like saying that 9 hours ago, the clock hand pointed at the same number as it will do <span class="math-container">\$(12-9)=3\$</span> hours from now -- except that clocks work modulo 12.</p>

<pre class="lang-python prettyprint-override"><code>def validate_credit_card_number(card_number):
    temp_list = reversed([int(c) for c in str(card_number)])
    return sum([ x + (x + (1 if x&gt;=5 else 0) if (i % 2)==1 else 0) for (i,x) in enumerate(temp_list)]) % 10 == 0
</code></pre>

<h2>Multiplication instead of ternary operator</h2>

<p>Also, we can replace the ternary operators (the <code>if</code> business) with simple multiplication. Why? Because there is no difference between <code>8 + (42 if x%2==1 else 0)</code> and <code>8 + 42*(x%2)</code>. Further, something like <code>8 + (1 if x%2==1 else 0)</code> could just be simplified to <code>8 + (x%2)</code>.</p>

<p>Using these ideas, we now have:</p>

<pre class="lang-python prettyprint-override"><code>def validate_credit_card_number(card_number): 
    temp_list = reversed([int(c) for c in str(card_number)])
    return sum([ x + (x+(x&gt;=5))*(i%2) for (i,x) in enumerate(temp_list)]) % 10 == 0
</code></pre>

<h2>Mapping to a one-liner</h2>

<p>Nice. Now, can we squeeze this whole expression into a single line, just because? Here, we may notice that the list comprehension for <code>temp_list</code> is really just applying <code>int</code> to every character in <code>card_number</code>. There is another nice built-in function in Python called <a href="https://docs.python.org/3/library/functions.html#map" rel="nofollow noreferrer"><code>map</code></a>, a descendant from <a href="https://en.wikipedia.org/wiki/Functional_programming" rel="nofollow noreferrer">functional programming</a> languages, that takes a function and a list, and applies the function to each element of a list. (From a Pythonic style perspective, bear in mind that <a href="https://stackoverflow.com/questions/40015439/why-does-map-return-a-map-object-instead-of-a-list-in-python-3">generator expressions are usually favorable to map, which almost got removed in Python3</a>).</p>

<pre class="lang-python prettyprint-override"><code>def validate_credit_card_number(card_number): 
    temp_list = reversed(list (map(int, [c for c in str(card_number)])))
    return sum([ x + (x+(x&gt;=5))*(i%2) for (i,x) in enumerate(temp_list)]) % 10 == 0
</code></pre>

<h2>One-liner ahoy!</h2>

<p>Wait a minute. When we see <code>[c for c in str(card_number)]</code>, we should pause and think about what list we are really generating. When you think about it, <code>str(card_number)</code> return a string, and Python strings implement an <a href="http://zetcode.com/lang/python/itergener/" rel="nofollow noreferrer">iterator</a>. So for our purposes, we could just treat <code>str(card_number)</code> as a list of characters! This gives:</p>

<pre class="lang-python prettyprint-override"><code>def validate_credit_card_number(card_number): 
    temp_list = reversed(list (map(int, str(card_number))))
    return sum([ x + (x+(x&gt;=5))*(i%2) for (i,x) in enumerate(temp_list)]) % 10 == 0
</code></pre>

<p>The <code>list</code> bit is ugly. So let's reverse the string earlier and conclude with:</p>

<pre class="lang-python prettyprint-override"><code>def validate_credit_card_number(card_number): 
    return sum([x + (x+(x&gt;=5))*(i%2) for (i,x) in enumerate(map(int, reversed(str(card_number))))]) % 10 == 0
</code></pre>

<h2>Shorter still?</h2>

<p>There are still opportunities to shorten the expression. For one, we could assume that the input is actually a string already. For another, we can remove the reversal business and just figure out if the doubling should happen for evens or odds by looking at the length of the input string. This gives:</p>

<pre class="lang-python prettyprint-override"><code>def validate_credit_card_number(card_str): 
    return sum([x + (x+(x&gt;=5))*((len(card_str)-1+i)%2) for (i,x) in enumerate(map(int, card_str))]) % 10 == 0
</code></pre>
    </div>