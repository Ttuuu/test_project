<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This looks pretty good! I'm still fairly new to Rust myself, so I'm not sure how familiar I am with the idioms beyond those outlined in the book. That said, there's a few improvements I can suggest.</p>

<h2>Unsigned integer for <code>day</code></h2>

<p>Since <code>day</code> is never negative, you can use an <a href="https://doc.rust-lang.org/book/ch03-02-data-types.html#integer-types" rel="noreferrer">unsigned integer</a> instead of an <code>i32</code> here:</p>

<pre><code>fn gen_lyrics(day: usize) -&gt; String
</code></pre>

<p>If you use <code>usize</code> specifically, you also avoid the cast to <code>usize</code> here:</p>

<pre><code>start.push_str(&amp;LYRICS[11 - (i as usize)]);
</code></pre>

<p>That would then just be:</p>

<pre><code>start.push_str(&amp;LYRICS[11 - i]);
</code></pre>

<h2>Ordinal suffix <code>match</code> expression</h2>

<p>You can avoid some <code>.to_string()</code> calls and repetition of numbers by making the match expression return just the suffix of the ordinal. You can then append that suffix to the number itself in the <code>format!()</code> call:</p>

<pre><code>let ordinal_suffix = match day {
    1 =&gt; "st",
    2 =&gt; "nd",
    3 =&gt; "rd",
    _ =&gt; "th",
};

let mut start = format!(
    "On the {}{} day of Christmas, my true love gave to me:\n",
    day,
    ordinal_suffix
);
</code></pre>

<h2>Inclusive range</h2>

<p>You can use <code>..=</code> instead of <code>..</code> to create an <a href="https://doc.rust-lang.org/edition-guide/rust-2018/data-types/inclusive-ranges.html" rel="noreferrer">inclusive range</a>:</p>

<pre><code>fn main() {
    for i in 1..=12 {
        println!("{}\n", gen_lyrics(i))
    }
}
</code></pre>

<h2>Iterators and the skip method</h2>

<p>You can iterate directly over the <code>LYRICS</code> array, <a href="https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.skip" rel="noreferrer">skipping</a> over the number of lines you don't want to include:</p>

<pre><code>for line in (&amp;LYRICS).iter().skip(12 - day) {
    start.push_str(line);
    start.push_str("\n");
}
</code></pre>

<p>The problem with this is that there's no longer an <code>i</code> variable to check whether an iteration is the last line or not, so it can't conditionally insert a newline. The code above will always insert a newline.</p>

<p>But we can cheat a little ðŸ˜‰</p>

<p>If you remove the newline from the end of the <code>start</code> variable:</p>

<pre><code>"On the {} day of Christmas, my true love gave to me:"
</code></pre>

<p>You can push the newline first, that way you no longer need a conditional in the loop:</p>

<pre><code>for line in (&amp;LYRICS).iter().skip(12 - day) {
    start.push_str("\n");
    start.push_str(line);
}
</code></pre>

<hr>

<h2>Bringing it all together</h2>

<p>This is the code with all the changes applied:</p>

<pre><code>const LYRICS: [&amp;str; 12] = [
    "Twelve drummers drumming",
    "Eleven pipers piping",
    "Ten lords a-leaping",
    "Nine ladies dancing",
    "Eight maids a-milking",
    "Seven swans a-swimming",
    "Six geese a-laying",
    "Five golden rings",
    "Four calling birds",
    "Three french hens",
    "Two turtle doves, and",
    "A partridge in a pear tree",
];

fn gen_lyrics(day: usize) -&gt; String {
    let ordinal_suffix = match day {
        1 =&gt; "st",
        2 =&gt; "nd",
        3 =&gt; "rd",
        _ =&gt; "th",
    };

    let mut start = format!(
        "On the {}{} day of Christmas, my true love gave to me:",
        day,
        ordinal_suffix
    );

    for line in (&amp;LYRICS).iter().skip(12 - day) {
        start.push_str("\n");
        start.push_str(line);
    }

    start
}

fn main() {
    for i in 1..=12 {
        println!("{}\n", gen_lyrics(i))
    }
}
</code></pre>
    </div>