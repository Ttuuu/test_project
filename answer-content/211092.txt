<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>The initial data</strong></p>

<p>Since every day shares the exact same default temperature, repeating it would be useless, you can instead map a list of days and create a JSON for each element using <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map" rel="nofollow noreferrer">map</a>.</p>

<p>The description should also be removed from your data, since it entirely depends on the temperature, there is no reason to store both <code>temp</code> and <code>description</code>.</p>

<pre><code>this.state = {
    data: ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday',].map(day =&gt; ({
        day,
        temp: 100
    }))
}
</code></pre>

<p><strong>Setting your initial state</strong></p>

<p>The React documentation recommends using a class contructor instead of setting your state raw into your class. This solution may wokr for now, but it can cause unexpected behavior on the long term.</p>

<pre><code>constructor(props) {
    super(props)

    this.state = {
        data: ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday',].map(day =&gt; ({
            day,
            temp: 100
        }))
    }
}
</code></pre>

<p><strong>Getting the description and image</strong></p>

<p>Having blocks of <code>if/else</code> nested statements is almost never necessary when using JSON objects. Just create an array containing every possible description/image combination and which temperature it represent.</p>

<p>When done, use a <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find" rel="nofollow noreferrer">find</a> function to get get the corresponding description/image. This function will execute a verification (<code>weather =&gt; temp &gt;= weather.value</code>) on every JSON of list until it finds a correct one, here, the first JSON that has a value lower than the given temperature.</p>

<p>Code :</p>

<pre><code>getInfos = temp =&gt; {
    return [
        {
            value: 95,
            description: 'Sunny',
            image: sunny
        },
        {
            value: 85,
            description: 'Partly Cloudy',
            image: partly
        },
        {
            value: 75,
            description: 'Cloudy',
            image: cloudy
        },
        {
            value: -Infinity,
            description: 'Rainy',
            image: rainy
        },
    ].find(weather =&gt; temp &gt;= weather.value)
}
</code></pre>

<p><strong>Changing the temperature</strong></p>

<p>To change your temperature, simply add a parameter saying by how much you want to vary it :</p>

<pre><code>&lt;div className="upButton" onClick={this.changeTemp(1)}&gt;+&lt;/div&gt;
&lt;div className="downButton" onClick={this.changeTemp(-1)}&gt;-&lt;/div&gt;
</code></pre>

<p>Then, make a function that receives both this parameter and the click event (even if you're not using it). this function should also update the information about the image and the description using <code>getInfos</code>: </p>

<pre><code>changeTemp = value =&gt; ev =&gt; {
    this.setState(prevState =&gt; ({ 
        temp: prevState.temp + value,
        ...this.getInfos(prevState.temp + value)
    }))
}
</code></pre>

<p>Full code :</p>

<pre><code>class App extends Component {
    constructor(props) {
        super(props)

        this.state = {
            data: ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday',].map(day =&gt; ({
                day,
                temp: 100
            }))
        }
    }

    cardClicked = card =&gt; event =&gt; {
        this.setState({ data })
    }

    render() {
        return (
            &lt;div className="App"&gt;
                &lt;div className="cards"&gt;
                    {this.state.data.map(card =&gt; &lt;WeatherCard key={card.day} data={card}&gt;&lt;/WeatherCard&gt;)}
                &lt;/div&gt;
            &lt;/div&gt;
        );
    }
}

import sunny from '../img/sunny.png';
import partly from '../img/partly.png';
import cloudy from '../img/cloudy.png';
import rainy from '../img/rainy.png';

class WeatherCard extends React.Component {
    constructor(props) {
        super(props)

        const { temp } = props

        this.state = {
            temp
        }

        getInfos(temp)
    }

    getInfos = temp =&gt; {
        return [
            {
                value: 95,
                description: 'Sunny',
                image: sunny
            },
            {
                value: 85,
                description: 'Partly Cloudy',
                image: partly
            },
            {
                value: 75,
                description: 'Cloudy',
                image: cloudy
            },
            {
                value: -Infinity,
                description: 'Rainy',
                image: rainy
            },
        ].find(weather =&gt; temp &gt;= weather.value)
    }

    changeTemp = value =&gt; ev =&gt; {
        this.setState(prevState =&gt; ({ 
            temp: prevState.temp + value,
            ...this.getInfos(prevState.temp + value)
        }))
    }

    render() {
        const { day } = this.props
        const { temp, image, description } = this.state

        return (
            &lt;div className="card"&gt;
                &lt;div className="card-head"&gt;{day}&lt;/div&gt;
                &lt;div className="card-body"&gt;
                    &lt;h1&gt;{temp}&lt;/h1&gt;
                    &lt;img src={image} alt={description}&gt;&lt;/img&gt;
                    &lt;p&gt;{description}&lt;/p&gt;
                &lt;/div&gt;
                &lt;div className="controls"&gt;
                    &lt;div className="upButton" onClick={this.changeTemp(1)}&gt;+&lt;/div&gt;
                    &lt;div className="downButton" onClick={this.changeTemp(-1)}&gt;-&lt;/div&gt;
                &lt;/div&gt;
            &lt;/div&gt;
        )
    }
}
</code></pre>

<hr>

<p>EDIT :</p>

<p>Here's an even shorter version of your <code>getInfos</code> function using array deconstruction, just because :</p>

<pre><code>getInfos = temp =&gt; 
    [ 
        [95, 'Sunny', sunny],
        [85, 'Partly Cloudy', partly],
        [75, 'Cloudy', cloudy],
        [-Infinity, 'Rainy', rainy]
    ].find(([value]) =&gt; temp &gt;= value)
</code></pre>
    </div>