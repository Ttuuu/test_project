<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I have suggestion for you.</p>

<ol>
<li>I suggest that you extract the length of the <code>binx</code> and <code>biny</code> in two variables, so you can use them instead of recalling the <code>java.lang.String#length</code> each time.</li>
</ol>

<pre class="lang-java prettyprint-override"><code>String binx = Integer.toBinaryString(x);
int binxLength = binx.length();
String biny = Integer.toBinaryString(y);
int binyLength = biny.length();

//[...]
if (binxLength &gt; binyLength) {
   //[...]
}
//[...]
</code></pre>

<ol start="2">
<li>You can use the method <code>java.lang.String#repeat</code> (java 11+) to repeat the zeros</li>
</ol>

<pre class="lang-java prettyprint-override"><code>  sb.append("0".repeat(dif));
</code></pre>

<ol start="3">
<li>I suggest that you make a method to repeat the zeros.</li>
</ol>

<pre class="lang-java prettyprint-override"><code>private String repeatZeros(int nb) {
   return "0".repeat(nb);
}
</code></pre>

<ol start="4">
<li>In my opinion, the <code>dif</code> variable is useless, you can inline it.</li>
</ol>

<pre class="lang-java prettyprint-override"><code>sb.append(repeatZeros(binxLength - binyLength));
</code></pre>

<ol start="5">
<li>Since you are not concatenating the <code>String</code> in a loop, instead of using the <code>StringBuilder</code>, you can concat them directly.</li>
</ol>

<pre class="lang-java prettyprint-override"><code>if (binxLength &gt; binyLength) {
   biny = repeatZeros(binxLength - binyLength) + biny;
} else if (binyLength &gt; binxLength) {
   binx = repeatZeros(binyLength - binxLength) + binx;
}
</code></pre>

<ol start="6">
<li>I suggest that you create a method to pad the binary string.</li>
</ol>

<pre class="lang-java prettyprint-override"><code>private String padLeftWithZeros(String str, int length) {
   return repeatZeros(length) + str;
}

public int hammingDistance(int x, int y) {
   //[...]
   if (binxLength &gt; binyLength) {
      biny = padLeftWithZeros(biny, (binxLength - binyLength));
   } else if (binyLength &gt; binxLength) {
      binx = padLeftWithZeros(binx, (binyLength - binxLength));
   }
   //[...]
}
</code></pre>

<ol start="6">
<li>I suggest that you extract the distance in a method and return the result.</li>
</ol>

<pre class="lang-java prettyprint-override"><code>public int hammingDistance(int x, int y) {
   //[...]
   return calculateHammingDistance(binx, binxLength, biny);
}

private int calculateHammingDistance(String binx, int binxLength, String biny) {
   int dist = 0;
   for (int i = 0; i &lt; binxLength; i++) {
      if (binx.charAt(i) != biny.charAt(i)) {
         dist++;
      }
   }

   return dist;
}
</code></pre>

<h3>Refactored code</h3>

<pre class="lang-java prettyprint-override"><code>public int hammingDistance(int x, int y) {
   String binx = Integer.toBinaryString(x);
   int binxLength = binx.length();
   String biny = Integer.toBinaryString(y);
   int binyLength = biny.length();

   if (binxLength &gt; binyLength) {
      biny = padLeftWithZeros(biny, (binxLength - binyLength));
   } else if (binyLength &gt; binxLength) {
      binx = padLeftWithZeros(binx, (binyLength - binxLength));
   }

   return calculateHammingDistance(binx, binxLength, biny);
}

private String padLeftWithZeros(String str, int length) {
   return repeatZeros(length) + str;
}

private String repeatZeros(int nb) {
   return "0".repeat(nb);
}

private int calculateHammingDistance(String binx, int binxLength, String biny) {
   int dist = 0;
   for (int i = 0; i &lt; binxLength; i++) {
      if (binx.charAt(i) != biny.charAt(i)) {
         dist++;
      }
   }

   return dist;
}
</code></pre>
    </div>