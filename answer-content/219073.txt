<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I think a first problem is that m should be changed to m-1. Or maybe better you should change it so that the lines "i=0;" are changed to "i=1;" instead, and also initializing the vector with 1 instead of 0.</p>

<p>By what I understand a permutation does not necessarily contain each number at least once. So we just need to generate all possible vectors of length <span class="math-container">\$n\$</span> with elements in the set <span class="math-container">\$ \{1,2,\dots, m\}\$</span>.</p>

<p>Your method is the same thing I would do, except I would not use pop_back and instead I would just modify the elements in place (although this is really a small change):</p>

<pre class="lang-cpp prettyprint-override"><code>vector &lt;vector &lt;int&gt; &gt; genperms(int n,int m) {
    vector &lt;vector&lt;int&gt;&gt; perms;
    vector &lt;int&gt; curr(n,1);
    perms.push_back(curr);
    while(true){
        int change = 0;
        for(int i=n-1;i&gt;=0;i--){
            if(curr[i] &lt; m){
                curr[i]++;
                for(int j=i+1;j&lt;n;j++){
                    curr[j] = 1;
                }
                change = 1;
                perms.push_back(curr);
                break; //try to change again
            }
        }
        if(change == 0) break; //if we couldnt make a change we are done
    }
    return perms;
}
</code></pre>

<p>This modification seems to give like an 8% boost in speed in my computer (using the n=8,m=8 case) . Although probably one can get better improvements if a vector is changed for something else.</p>

<p>If you want to speed this up you can also reserve the outer "perms" vector to a large enough size.</p>
    </div>