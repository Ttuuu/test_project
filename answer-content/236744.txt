<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I have done some revisions. Thanks</p>

<p>Book.java (New version)
Converted a concrete class.
No more keep "readers" information in book class.</p>

<pre><code>        package oopdesign.onlineBookReaderSystem;

        public class Book {

            private long bookId;
            private String name;
            private String category;
            private String author;
            private int pageCount;

            public Book(String name, String category, String author, int pageCount){
                this.bookId = name.hashCode();
                this.name = name;
                this.category = category;
                this.author = author;
                this.pageCount = pageCount;
            }

        }

    /* Old version
    package OOPDesign.onlineBookReaderSystem;

    import java.util.ArrayList;

    public abstract class Book {

        long bookId;
        String name;
        String category;
        String author;
        int pageCount;

        ArrayList&lt;User&gt; readers = new ArrayList&lt;&gt;();

        public Book(String name, String category, String author, int pageCount){
            this.bookId = name.hashCode();
            this.name = name;
            this.category = category;
            this.author = author;
            this.pageCount = pageCount;
        }

        ArrayList&lt;User&gt; getReaders(){
            return readers;
        }

    }

    */
</code></pre>

<p>BookProgress.java (New version)
startReading &amp; finishReading methods carried to here from User.java class.</p>

<pre><code>        package oopdesign.onlineBookReaderSystem;

        public class BookProgress  {

            User user;
            Book book;
            int  resumedPage;

            public BookProgress(Book book, User user) {
                this.book = book;
                this.user = user;
                this.resumedPage = 0;
            }

            public void setResumedPage(int resumedPage) {
                this.resumedPage = resumedPage;
            }

            public int getResumedPage() { return resumedPage;  }

            public void pageForward(){
                resumedPage++;
                setResumedPage(resumedPage);
            }

            public void pageBackward(){
                 resumedPage--;
                setResumedPage(resumedPage);
            }

            public int startReading() {

                int resumedPage =  this.resumedPage;

                for(int i=0;i&lt;50;i++){
                    pageForward();
                }

                System.out.println("Started reading");
                return resumedPage;
            }

            public void  finishReading(){
                System.out.println("Finished reading at "+ resumedPage);
            }

        }


    /* Old version

    package OOPDesign.onlineBookReaderSystem;

    public class BookProgress  {

        long userId;
        Book book;
        int  resumedPage;

        public BookProgress(Book book, long userId) {
            this.book = book;
            this.userId = userId;
            this.resumedPage = 0;
        }

        public void setResumedPage(int resumedPage) {
            this.resumedPage = resumedPage;
        }

        public void pageForward(){
            resumedPage++;
            setResumedPage(resumedPage);
        }

        public void pageBackward(){
            resumedPage--;
            setResumedPage(resumedPage);
        }
    }
    */
</code></pre>

<p>/* Newly added */
Library.java</p>

<pre><code>    package oopdesign.onlineBookReaderSystem;

    import java.util.ArrayList;
    import java.util.List;

    public class Library {

        List&lt;Book&gt; library;

        public Library(){
            library = new ArrayList&lt;&gt;();
        }

        public void addBook(Book book){
            library.add(book);
        }

        public List&lt;Book&gt; getBookList(){
            return library;
        }

    }
</code></pre>

<p>OnlineReaderSystem.java (New version) </p>

<pre><code> private Library library;
 private UserManager userConsole;
 private BookProgress progress;    
</code></pre>

<p>connections have been added.</p>

<pre><code>    package oopdesign.onlineBookReaderSystem;

    import java.util.List;

    public class OnlineReaderSystem {

        private Library library;
        private UserManager userConsole;
        private BookProgress progress;

        public OnlineReaderSystem() {
            userConsole = new UserManager();
            library = new Library();
        }

        public static void main(String[] args) {

            OnlineReaderSystem onlineReaderSystem = new OnlineReaderSystem();

            // Create user
            User userNes = new User("Nesly", "Nesly","Password");

            onlineReaderSystem.userConsole.addUser(userNes);

            List&lt;User&gt; userAllList = onlineReaderSystem.userConsole.getAllUsers();

            for(User u: userAllList){
                System.out.println(u.getName());
            }

            // Create book
            Book bookFiction = new Book("Fiction Book", "Fiction", "James",320);

            onlineReaderSystem.library.addBook(bookFiction);

            // User login
            userNes.login("Nesly","password");

            // Start reading book
            onlineReaderSystem.progress = new BookProgress(bookFiction, userNes);

            onlineReaderSystem.progress.startReading();

            onlineReaderSystem.progress.finishReading();

            int page = onlineReaderSystem.progress.getResumedPage();

            System.out.println(page);
        }

    }

/* Old version
package OOPDesign.onlineBookReaderSystem;

public class OnlineReaderSystem {

    public static void main(String[] args) {

        // Create user
        User userNes = new User("Nesly", "Nesly","Password");

        // Create book
        Book bookFiction = new FictionBook("Fiction Book", "Fiction", "James",320);

        // User login
        userNes.login("Nesly","password");

        // Start reading book
        userNes.addBook(bookFiction);

        userNes.startReading(bookFiction);

        userNes.finishReading(bookFiction);

    }
}

*/
</code></pre>

<p>User.java (New version)
<code>addBook</code> method removed
<code>getRegisteredBooks</code>  method removed
<code>startReading</code> method removed
<code>finishReading</code> method removed</p>

<pre><code>    package oopdesign.onlineBookReaderSystem;

    import java.time.LocalDateTime;
    import java.time.format.DateTimeFormatter;
    import java.util.Date;

    public class User {

        private long userId; 
        private String name;

        private String subcriptionType;
        private Date   subsciptionDate;

        private String loginUserId;
        private String loginPassword;
        private String lastLoginDate;

        private String creditCardInfo;

        public User(String name, String loginUserId, String loginPassword) {
            this.userId = name.hashCode();
            this.name = name;

            this.subcriptionType = "Classic";
            this.loginUserId = loginUserId;
            this.loginPassword = loginPassword;
        }


        public void login(String loginUser, String login_Password){

            if(this.loginUserId.equals(loginUserId) &amp;&amp; this.loginPassword.equals(login_Password)) {
                System.out.println("Welcome " + name);
                DateTimeFormatter dtf = DateTimeFormatter.ofPattern("yyyy/MM/dd HH:mm:ss");
                LocalDateTime now = LocalDateTime.now();
                lastLoginDate = dtf.format(now);
            }else {
                System.out.println("Unsuccessful login  " + name);
            }

        }


        public String getName() {
            return name;
        }

        public String getSubcriptionType() {
            return subcriptionType;
        }

        public Date getSubsciptionDate() {
            return subsciptionDate;
        }

    }
/* Old version
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Date;
import java.util.HashMap;
import java.util.concurrent.Semaphore;

public class User {

    private long userId;
    private String name;

    private String subcriptionType;
    private Date   subsciptionDate;

    private String login_UserId;
    private String login_Password;

    private String lastLoginDate;

    Semaphore semaphoreReader;

    HashMap&lt;Book, BookProgress&gt; userBooks = new HashMap&lt;&gt;();

    private String creditCardInfo;

    public User(String name, String login_UserId, String login_Password) {
        this.userId = name.hashCode();
        this.name = name;

        this.subcriptionType = "Classic";
        this.login_UserId = login_UserId;
        this.login_Password = login_Password;
    }


    public void login(String loginUser, String login_Password){

        if(this.login_UserId == login_UserId &amp;&amp; this.login_Password == login_Password) {

            System.out.println("Welcome " + name);
            DateTimeFormatter dtf = DateTimeFormatter.ofPattern("yyyy/MM/dd HH:mm:ss");
            LocalDateTime now = LocalDateTime.now();
            lastLoginDate = dtf.format(now);
        }else {
            System.out.println("Unsuccessful login  " + name);
        }

    }

    public void addBook(Book book){
        userBooks.put(book, new BookProgress(book,userId));
    }

    public HashMap&lt;Book, BookProgress&gt; getRegisteredBooks(){
        return this.userBooks;
    }


    public int  startReading(Book book) throws InterruptedException {

        int resumedPage =  userBooks.get(book).resumedPage;
        BookProgress progress = userBooks.get(book);

        for(int i=0;i&lt;50;i++){
          progress.pageForward();
        }

        System.out.println("Started reading");
        return resumedPage;
    }

    public void  finishReading(Book book){
        BookProgress progress = userBooks.get(book);
        System.out.println("Finished reading at "+ progress.resumedPage);
    }

}
*/
</code></pre>

<p>// Newly added
UserManager.java</p>

<pre><code>package oopdesign.onlineBookReaderSystem;

import java.util.ArrayList;
import java.util.List;

public class UserManager {

    List&lt;User&gt; users;

    public UserManager(){
        users = new ArrayList&lt;&gt;();
    }

    public void addUser(User user){
        users.add(user);
    }

    public List&lt;User&gt; getAllUsers(){
        return users;
    }

}
</code></pre>
    </div>