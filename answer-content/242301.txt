<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This code looks more like C than C++. The only C++ feature used is <code>cout</code>. While the standard C++ library already provides <a href="https://en.cppreference.com/w/cpp/container/stack" rel="nofollow noreferrer"><code>std::stack</code></a>, I assume the idea is to implement a stack from scratch to show how that would work. With that in mind, here's what I would change to make it better C++ code:</p>

<h1>Create a <code>class</code> representing a stack</h1>

<p>The code as it is only defines a single stack element, and has global functions that manipulate pointers to elements. In C++, you would create a <code>class</code> to manage everything related to the stack:</p>

<pre><code>class Stack {
    struct Element {
         Element *next;
         int value;
    };

    Element *top = nullptr;

public:
    ~Stack() {
         // Write code here to clean up the stack
    }

    bool isEmpty() const {
         return top == nullptr;
    }

    void push(int value) {
         // Create a new Element and make it the new top
    }

    // other functions here
    ...
};         
</code></pre>

<p>This hides the management of stack elements, forcing the rest of the code to use the public functions to manipulate the stack, making it harder to make mistakes. You would use it like so:</p>

<pre><code>int main() {
    Stack S;

    for (int i = 1; i &lt;= 10; ++i)
         S.push(i);

    while (!S.empty()) {
         std::cout &lt;&lt; S.top() &lt;&lt; '\n';
         S.get();
    }
}
</code></pre>

<h1>Consider making a <code>pop()</code> function that combines <code>top()</code> and <code>get()</code></h1>

<p>This would be a logical mirror of the <code>push()</code> function, and allows writing a bit shorter code, like:</p>

<pre><code>    while (!S.empty())
         std::cout &lt;&lt; S.pop() &lt;&lt; '\n';
</code></pre>

<h1>Make the <code>class</code> a <code>template</code></h1>

<p>One big issue with your version of a stack is that it can only store <code>int</code>s. What if you want a stack that stores floats, or strings, or anything else? You want to avoid having to write different versions of the stack just to handle different types. This is what templates are made for. It's quite easy to make a template:</p>

<pre><code>template&lt;typename T&gt;
class Stack {
    struct Element {
        Element *next;
        T value;
    };

    ...

    void push(T value) {
        ...
    }

    T get() {
        return top-&gt;value;
    }

    ...
};
</code></pre>

<p>And then you can use it like:</p>

<pre><code>int main() {
    Stack&lt;int&gt; S;

    for (int i = 1; i &lt;= 10; ++i)
         S.push(i);

    ...
}
</code></pre>
    </div>