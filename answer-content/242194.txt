<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I know its a bit late but I have had this idea to solve this problem iteratively. I wish to leave this here for someone who is searching for an iterative answer like me.</p>

<p>It is difficult to explain in English (for me), but the idea is to start updating the current permutation from the end, one index at a time. Keep updating until the initial permutation is again encountered, in which case we stop updating any more by setting <code>hasNext=False</code>.</p>

<pre class="lang-py prettyprint-override"><code>from typing import Iterator, List

def permutations_with_replacement(n: int, m: int) -&gt; Iterator[List[int]]:
    cur = [1]*n
    hasNext = True
    while hasNext:
        yield cur
        i = n-1
        while hasNext:
            cur[i] += 1
            if cur[i] &gt; m:
                cur[i] = 1
                i -= 1
                if i &lt; 0:
                    hasNext = False
            else:
                break

if __name__ == '__main__':
    n = int(input("Please enter 'N': "))
    m = int(input("Please enter 'M': "))

    for i in permutations_with_replacement(n, m):
        print(*i)
</code></pre>
    </div>