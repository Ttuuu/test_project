<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>In my opinion, there are two ways with Spring to do that; your way is one of them (using the Spring Resource), and the other is to inject the file bytes directly in the <code>javax.servlet.http.HttpServletResponse</code>.</p>
<p>Your version can be improved, since you can use the <a href="https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/core/io/FileSystemResource.html" rel="nofollow noreferrer"><code>FileSystemResource</code></a> instead of the <a href="https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/core/io/InputStreamResource.html" rel="nofollow noreferrer"><code>InputStreamResource</code></a>.</p>
<p>The <a href="https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/core/io/InputStreamResource.html" rel="nofollow noreferrer"><code>InputStreamResource</code></a> is good when there are no other options available, as stated in the Java documentation since there are lots of other implementations to use.</p>
<pre><code>Should only be used if no specific Resource implementation is applicable[...]
</code></pre>
<p>The <a href="https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/core/io/FileSystemResource.html" rel="nofollow noreferrer"><code>FileSystemResource</code></a> will remove the need to open the file and make the code shorter.</p>
<pre class="lang-java prettyprint-override"><code>HttpHeaders header = new HttpHeaders();
header.add(HttpHeaders.CONTENT_DISPOSITION, "attachment; filename=" + filename + EXTENSION);
header.add("Cache-Control", "no-cache, no-store, must-revalidate");
header.add("Pragma", "no-cache");
header.add("Expires", "0");

File file = new File(serverLocation + File.separator + filename + EXTENSION);
Resource resource = new FileSystemResource(file);

return ResponseEntity.ok()
.headers(header)
.contentLength(file.length())
.contentType(MediaType.parseMediaType("application/octet-stream"))
.body(resource);

</code></pre>
<p>The thing that concerns me with your code, is the potential <a href="https://owasp.org/www-community/attacks/Path_Traversal" rel="nofollow noreferrer">Path Traversal</a> vulnerability that you have when reading the file, from the parameter. If I pass the <code>filename</code> value of <code>..\..\..\system.log</code>, this could potentially be a problem, because we could download file out of the scope of your application.</p>
<pre class="lang-java prettyprint-override"><code>File file = new File(serverLocation + File.separator + filename + EXTENSION);
</code></pre>
<p>One way to prevent that is to compare the base path / location of the file with the <code>serverLocation</code>, if the <a href="https://portswigger.net/web-security/file-path-traversal" rel="nofollow noreferrer">path is different</a>, you ignore the request.</p>
    </div>