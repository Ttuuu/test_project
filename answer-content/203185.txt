<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I was going to say that this shouldn't be done in C#, but then after some thought last night, I came up with a really dirty idea.</p>

<p>You're basically trying to get the count of things that happened with a file, right? So if it was renamed, that's a thing, if it was created/removed, that's a thing, modified = a thing, etc.</p>

<p>In that case, we're basically just treating renamed as a special case.</p>

<p>First off: why do this functionally? This is actually a great place for a Dictionary and an imperative loop. Throw all of this away, and think about the problem more simply.</p>

<p>You want to count changes to each file, where Rename counts for both the old and new file, so to do so, we can really make life a lot easier by treating it as a quick loop over the dataset (I have no clue if this compiles, but I hope it demonstrates what I mean):</p>

<pre><code>var result = new Dictionary&lt;string, int&gt;();
void addKey(string k, int v) =&gt;
    result.ContainsKey(k) ? result[k] += v : result.Add(k, v);
foreach (var diff in diffs)
{
    addKey(diff.Path, 1);
    if (diff.Status == ChangeKind.Renamed)
    {
        addKey(diff.OldPath, 1);
    }
}
return result.Select(x =&gt; new PathCount(x.Key, x.Value)).OrderByDescending(s =&gt; s.Count);
</code></pre>

<p>Writing it functionally like you have just conflates it to a complex piece of code that, really, could be a lot simpler. In this case, imperative programming helps us out.</p>

<p>If you wanted to do it functionally, I'd do something like this in F#:</p>

<pre class="lang-fs prettyprint-override"><code>diffs
|&gt; Seq.map (fun diff -&gt;
    match diff.Status with
    | ChangeKind.Renamed -&gt; [diff.OldPath; diff.Path]
    | _ -&gt; [diff.Path])
|&gt; Seq.concat
|&gt; Seq.groupBy id
|&gt; Seq.map (PathCount) // should be equivalent to Seq.map (fun (k, c) -&gt; PathCount(k, c))
|&gt; Seq.orderByDescending (fun s -&gt; s.Count) // note that we're currently discussing a language design
                                            // change to make property access in Lambda's shorter,
                                            // but this is the most concise we can do at the moment
</code></pre>

<p>You could also <code>fold</code> (why bother?, again, keep it simple):</p>

<pre><code>diffs
|&gt; Seq.fold (fun acc diff -&gt;
    match diff.Status with
    | ChangeKind.Renamed -&gt; diff.OldPath :: (diff.Path :: acc)
    | _ -&gt; diff.Path :: acc) []
|&gt; Seq.groupBy id
|&gt; Seq.map (PathCount) // should be equivalent to Seq.map (fun (k, c) -&gt; PathCount(k, c))
|&gt; Seq.orderByDescending (fun s -&gt; s.Count)
</code></pre>

<p>While technically shorter, I wouldn't do this because it makes things less readable.</p>
    </div>