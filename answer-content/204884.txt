<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Naming</h3>

<p>According to the <a href="https://swift.org/documentation/api-design-guidelines/" rel="nofollow noreferrer">Swift API Design Guidelines</a>, variable names are lower camel case (not <code>alphabet_array</code>),
and types should not be part of the variable name (not <code>caesarNumber</code>, <code>inputString</code>, <code>resultString</code>).</p>

<p>It is also clear that the first (and only) argument of <code>encode()</code> and <code>decode()</code> 
is the input string, here we can omit the argument label:</p>

<pre><code>func encode(_ input: String) -&gt; String
</code></pre>

<p>which is then called as</p>

<pre><code>let encodedString = encode("zacharias")
</code></pre>

<h3>Improving the API</h3>

<p>The current API has two drawbacks:</p>

<ul>
<li>It uses the global variable <code>caesarNumber</code> to pass information to the 
functions.</li>
<li>The function names (“encode”, “decode”) are too common, they to not tell
what the function actually does.</li>
</ul>

<p>Here are two alternative suggestions:</p>

<ol>
<li>Make the function names more specific, and pass the shift amount as an
additional argument.</li>
</ol>

<p>You can also define a default parameter value for the shift amount.</p>

<pre><code>func caesarEncode(_ input: String, shiftBy: Int = 7) -&gt; String 
func caesarDecode(_ input: String, shiftBy: Int = 7) -&gt; String 
</code></pre>

<ol start="2">
<li>Define a <em>cipher type</em> with parameters, and encode/decode methods.</li>
</ol>

<p>That would allow to substitute the Caesar cipher by other methods easily.</p>

<pre><code>struct CaesarCipher {
    let shiftAmount: Int

    init(shiftAmount: Int = 7) {
        self.shiftAmount = shiftAmount
    }

    func encode(_ input: String) -&gt; String { ... }
    func decode(_ input: String) -&gt; String { ... }
}
</code></pre>

<p>Example usage:</p>

<pre><code>let rot13 = CaesarCipher(shiftAmount: 13)
let encrypted = rot13.encode("Hello World")
</code></pre>

<p>I'll stick with the first API for the remainder of this review.</p>

<h3>Simplify the code</h3>

<p>The alphabet can be initialized simply with</p>

<pre><code>let alphabet: [Character] = Array("abcdefghijklmnopqrstuvwxyz")
</code></pre>

<p>because a <code>String</code> is a sequence of its <code>Character</code>s. Locating a character
in the array can be done with</p>

<pre><code>if let idx = alphabet.index(of: char) { ... }
</code></pre>

<p>instead of a loop. The test for</p>

<pre><code> if (i + caesarNumber &lt; alphabet_array.count-1)
</code></pre>

<p>is not needed, because the “else case” (with the modulo arithmetic) works actually in both cases, with or without wrap-around.</p>

<p>Summarizing the above suggestions so far, we have for the encoding method:</p>

<pre><code>func caesarEncode(_ input: String, shiftBy: Int = 7) -&gt; String {
    var result: String = ""
    for char in input {
        if let idx = alphabet.index(of: char) {
            let newIdx = (idx + shiftBy) % alphabet.count
            result.append(alphabet[newIdx])
        }
    }
    return result
}
</code></pre>

<p>Decoding is the same as encoding, only with a shift in the opposite direction.
If we modify the encoding method slightly to work with negative shift amounts then it can be used for the decoding as well:</p>

<pre><code>func caesarEncode(_ input: String, shiftBy: Int = 7) -&gt; String {
    var result: String = ""
    for char in input {
        if let idx = alphabet.index(of: char) {
            var newIdx = (idx + shiftBy) % alphabet.count
            if newIdx &lt; 0 { newIdx += alphabet.count }
            result.append(alphabet[newIdx])
        }
    }
    return result
}

func caesarDecode(_ input: String, shiftBy: Int = 7) -&gt; String {
    return caesarEncode(input, shiftBy: -shiftBy)
}
</code></pre>

<h3>Improve the performance</h3>

<p>For optimal performance on really long strings you can operate on the
UTF-16 view instead, that allows to determine the offset within the alphabet with pure integer arithmetic instead of the array lookup.</p>

<p>Enumerating the UTF-16 view also <em>seems</em> to be faster than enumerating
the characters (which represent extended grapheme clusters).</p>

<p>A possible implementation could look like this:</p>

<pre><code>func caesarEncode(_ input: String, shiftBy: Int = 7) -&gt; String {
    let letterA = Int("a".utf16.first!)
    let letterZ = Int("z".utf16.first!)
    let letterCount = letterZ - letterA + 1

    var result = [UInt16]()
    result.reserveCapacity(input.utf16.count)

    for char in input.utf16 {
        let value = Int(char)
        switch value {
        case letterA...letterZ:
            let offset = value - letterA
            var newOffset = (offset + shiftBy) % letterCount
            if newOffset &lt; 0 { newOffset += letterCount }
            result.append(UInt16(letterA + newOffset))
        default:
            break
        }
    }

    return String(utf16CodeUnits: &amp;result, count: result.count)
}
</code></pre>

<p>On my computer this was faster than the previous method (3 milliseconds
instead of 11 milliseconds for a string with 100,000 characters).</p>

<p>For shorter strings that probably won't matter, and you can choose what you
feel more familiar with.</p>
    </div>