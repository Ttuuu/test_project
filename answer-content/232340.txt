<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>It might be slightly cleaner and more performant to keep <code>self.mask</code> as a list, and just <code>join</code> it before printing:</p>

<pre><code># Basically what you had before, without the space
# Just "list multiplication" instead of "string multiplication"
self.mask = ['_'] * len(word)

. . .

if w == letter:
    mask[i] = letter

. . .

if '_' not in self.mask:
    self.show_board()
    print('You won!')

. . .

print(' '.join(self.mask))
</code></pre>

<p>Now there's less converting back and forth between strings and lists. This also saves you from needing to do <code>i * 2</code>. The spaces can just be added in using <code>join</code> before being printed, so you don't need to worry about them.</p>

<hr>

<p><code>print(self.mistakes)</code> currently prints out a normal list representation to the end user without any context. I'd probably prefix a message to that, and format it a bit before printing:</p>

<pre><code>print(f"Already tried: {', '.join(self.mistakes)}")
# Already tried: R, Q
</code></pre>

<hr>

<p>I'd probably get rid of <code>self.winner</code> and change how you're checking for winning. Notice what you're using it for: you assign it in <code>check_winner</code>, then return that same value that you just assigned, but never use the return value. I'd have <code>check_winner</code> just return the value, move the call to <code>check_winner</code> to after the call to <code>make_move</code>, and use the return value:</p>

<pre><code>def check_winner(self):
    if '_' not in self.mask:
        self.show_board()
        print('You won!')
        return True

    return False

. . .

def play(self):
    won = False  # Just track this locally instead

    while not won:
        self.show_board()

        letter_input = input('Choose a letter: ').upper()
        self.make_move(letter_input)

        won = self.check_winner()  # And assign it here
        self.check_loser()
</code></pre>

<p>I'd also probably change <code>check_loser</code> (As a heads up, it's spelled "loser". "Looser" means that one thing is "less tight" than something else). I'd maybe have it return a bool saying whether or not the player lost, and just return from that function instead. As I noted in a <a href="https://codereview.stackexchange.com/a/232211/46840">previous review</a> (at the bottom), <code>quit</code> can cause problems when testing code. Just returning from the main loop to allow control to pass back to the REPL is much cleaner.</p>
    </div>