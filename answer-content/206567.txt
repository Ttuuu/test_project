<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>So your actual goal is to substitute placeholders in a file, based on property values. The code you have shown is a lot more complicated than it needs to be.</p>

<p>First, to address your immediate question:</p>

<ul>
<li>In <code>DictionaryReplacements</code>, <code>properties</code> is a dictionary, so you can perform key lookups directly. There's no need for those <code>Where(..).Select(..).FirstOrDefault()</code> constructions at all.</li>
<li>For that key lookup, you may want to use the <code>nameof</code> operator: <code>properties[nameof(Files.InternalName)]</code>. The benefit should be immediately clear: it reveals that <code>Files</code> is missing a <code>R_brush_locked</code> property.</li>
<li>But instead of creating an intermediary dictionary, you could use a <code>Files</code> instance directly: <code>{"[internalName]", files.InternalName}</code>, so you don't need to use reflection anymore.</li>
<li>You might as well create that dictionary in a method in your <code>Files</code> class, there's no need for that <code>Replacements</code> struct at all.</li>
<li>Inside <code>CreateDefaultPart</code>, you're calling <code>DictionaryReplacements</code> each time your regex finds a match. Just call it once and store the result in a local variable to prevent doing a lot of duplicate work.</li>
</ul>

<p>Other notes:</p>

<ul>
<li>It's good to see some documentation, but try documenting the 'why' instead of the 'what'. Things like 'Creates an instance of the struct' are already obvious from the code itself.</li>
<li><code>CreateDefaultParts</code> isn't a very descriptive name - there's no hint that this will create a file, or that it needs a template file, or what the 'default' in the name applies to.</li>
<li>I'd also expect that method to accept file paths as arguments, instead of having them hardcoded.</li>
<li>As for the destination filename, having that as a property is confusing, because all properties are used to substitute values. That's not clearly documented, and it's easy to forget to give it a value. A method parameter on the other hand gives a clear signal: 'hey, you need to specify a destination filename!'.</li>
<li>Why is the return type of <code>DictionaryOfProperties</code> <code>dynamic</code>? There's no obvious reason for that, and it does come with additional runtime costs and a loss of compile-time checks. Unless you're doing interop with a dynamic language you'll rarely if ever need to use <code>dynamic</code>.</li>
<li>Inside <code>DictionaryOfProperties</code>, there's some odd newline placement inside that <code>for</code> loop. If you want to split it up across multiple lines, at least keep each argument on the same line. Also, I'd add braces here to prevent confusion. Finally, <code>PropertyInfo.Name</code> is already a string - no need to call <code>ToString()</code> on it.</li>
</ul>
    </div>