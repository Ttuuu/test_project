<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>As alluded to <a href="https://codereview.stackexchange.com/questions/213129/read-jobs-from-jobs-af-a-jobs-portal-categories-them-and-write-them-to-separ#comment412319_213129">in the comments</a> by <a href="https://codereview.stackexchange.com/users/42401/peilonrayz">@Peilonrayz</a>, using the <code>requests</code> module would simplify your URL building and reading the result of the request:</p>

<pre><code>import requests

url = 'http://api.jobs.af/jobs'
params = {"filter": 1, "per_page": 50, "category": category, "title": title}
json_data = requests.get(url, params=params).json()
</code></pre>

<p>If <code>category</code> or <code>title</code> are <code>None</code>, they will just be skipped and both the parameter names as well as the values will be URL encoded (so not only spaces replaced by <code>%20</code>, but also all other possible entities).</p>

<hr>

<p>In your argument parsing you use a <code>try..except</code> block in which you first parse without any arguments, then try to parse what the user supplied and then output a help message if it is not correct.</p>

<p>This is wrong on almost all accounts. You should not need the first empty parsing, you should basically never use a bare <code>except</code> clause (it also catches things like the user pressing <kbd>Ctrl</kbd>+<kbd>C</kbd>) and <code>argparse</code> will already generate an error message for you on wrong input. In addition with your version the program will continue running with invalid parameters. Instead it should just fail and stop right there.</p>

<hr>

<p><a href="https://www.python.org/dev/peps/pep-0257/" rel="nofollow noreferrer"><code>docstring</code>s</a> should go into the scope of the function:</p>

<pre><code>def f(a, b):
    """Sums the values `a` and `b`."""
    return a + b
</code></pre>

<p>This way you can actually access it:</p>

<pre><code>&gt;&gt;&gt; print f.__doc__
# Sums the values `a` and `b`.

&gt;&gt;&gt; help(f)
# Help on function f in module __main__:
# 
# f(a, b)
#     Sums the values `a` and `b`.
</code></pre>

<hr>

<p>For the writing to excel sheets I would use a less manual approach. <a href="http://pandas.pydata.org/" rel="nofollow noreferrer"><code>pandas</code></a> has data frames and a <a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.to_excel.html" rel="nofollow noreferrer"><code>to_excel</code></a> method:</p>

<pre><code>import pandas as pd

def combine_location(row):
    return " ".join(x["name_en"] for x in row['data'])

df = pd.DataFrame(json_data["data"])
df = df[["position_title", "skills_requirement", "expire_date", "gender",
         "location", "category"]]
df["location"] = df.location.apply(combine_location)
df["category"] = df.category.apply(lambda row: row["data"]["name_en"])
df.columns = ['Position Title', 'skill', 'Expire Date', 'Gender', 'Location',
              'Category']

writer = pd.ExcelWriter('listJobs.xlsx')
gdf = df.groupby("Gender", as_index=False)
gdf.apply(lambda df: df.to_excel(writer, df.iloc[0].Gender, index=False))
writer.save()

print "Number of jobs for:"
for gender, jobs in gdf.groups.items():
    print gender, len(jobs)
</code></pre>

<hr>

<p>You should put your code that executes the rest under a <a href="http://stackoverflow.com/questions/419163/what-does-if-name-main-do"><code>if __name__ == "__main__":</code> guard</a> so that you can import from this script without executing everything.</p>

<hr>

<p><a href="https://pythonclock.org/" rel="nofollow noreferrer">Python 2 will stop being officially supported in less than a year</a>. Now is a good time to switch to Python 3.</p>
    </div>