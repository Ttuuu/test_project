<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The tests <code>c.HP &gt; 0</code> and <code>c.Team != Team</code> are probably blazingly fast tests.  <code>Location.Dist(c.GetLocation()) &lt;= AttackRange</code> probably involves the square-root of the sum of the squares of the difference of coordinates in two or three dimensions. Plus, <code>GetLocation()</code> may involve memory allocation and/or copying constructors.  It is by far the slowest test, yet you are testing it first!  Take advantage of the short-circuit logical <code>and</code> operators by reordering the tests so the fastest tests are done first, so the slowest test may not even need to be executed, resulting in faster execution. </p>

<p>Since all conditions must pass before you update <code>weakestEnemy</code>, you could even test whether or not the target passes the “weakest with lowest ID” test before checking the attack range. </p>

<p>Bonus: the square-root can be avoided; simply compute the square distance, and compare against the <span class="math-container">\$AttackRange^2\$</span> (computed outside of the loop) for another speed gain.</p>
    </div>