<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>A few simple things.</p>

<hr>

<pre><code>a = b = c = d = e = 0
</code></pre>

<p>This is bad for a couple reasons:</p>

<ul>
<li><p>Those are all nondescript, overly simple names. There's no way to tell what they represent just by looking at them.</p></li>
<li><p>You're shoving their declarations/definitions all on one line. This is generally regarded as poor practice. Say I'm looking for where <code>c</code> is defined. It's much easier to find it when I can be sure that I'm looking for exactly <code>c = ...</code> somewhere. It's harder to find though when it's declared half way through a line.</p></li>
</ul>

<p>In both cases, you're sacrificing readability for brevity. Avoid doing this unless you're code golfing. Readability takes precedence over nearly everything else.</p>

<hr>

<p><code>fishing = True</code> is the third line in your file, yet you don't use it until later. Unless it's a constant, it's a good idea to declare variables near where they're first used. When someone's reading your code and wants to see the definition of <code>fishing</code>, it's more efficient if they only have to look up a line or two instead of needing to scroll to the top of the file.</p>

<hr>

<p><code>while fishing == True:</code> can simply be written as <code>while fishing:</code>.</p>

<hr>

<p>You actually have a bug. <code>fishing == False</code> should be <code>fishing = False</code>.</p>

<hr>

<p><code>if answer.lower() == "no":</code> could be written to be more "tolerant" (but less exact) by only checking the first letter:</p>

<pre><code>if answer.lower().startswith("n"):
</code></pre>

<p>Now input like "nope" will work as well. Whether or not you want this behavior is another story though. If you had other answers that require "n" as the first letter, obviously this would break things. </p>
    </div>