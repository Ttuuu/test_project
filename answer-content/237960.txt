<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>better splitting method</h2>

<p>instead of comparing each character of the string, use an regex! </p>

<pre><code>String input = ...
String output = new String(input);
Pattern p = Pattern.compile("\\d+");
Matcher m = p.matcher(input);
while(m.find()) {
    String occurrence = m.group();
    int number = Integer.parseInt(m.group());
    if (number &gt;= 0 &amp;&amp; number &lt;=10){
        String numberWord = replace(number);
        output = output.substring(0,m.start())+
            output.substring(m.start()).replace(occurrence, numberWord);
    }
}
</code></pre>

<h2>avoid magic numbers</h2>

<p>instead of returning the replacement for numbers in code you should define them separately - this allows you to change language easier and offers more maintaince on further usage. (here magic numbers are these <code>Strings</code> of wach number)</p>

<pre><code>private final String[] mapping = {"zero", "one", ..., "ten"};

public String replace(int number){
    return mapping[number];
}
</code></pre>

<h2>naming</h2>

<p><code>replace</code> is a generic name and should have a better name. <code>toWord</code> might be more suitable but it's up to you.</p>

<h2>fun fact</h2>

<p><a href="https://i.stack.imgur.com/UnslF.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/UnslF.png" alt="enter image description here"></a>
(Copyright: <a href="https://xkcd.com/208/" rel="nofollow noreferrer">XKCD</a>)</p>

<h2>improvement</h2>

<p>thanks to <a href="https://codereview.stackexchange.com/users/2035/rotora">RoToRa</a> i learned how to properly use <code>StringBuffer</code> and <code>Matcher</code> </p>

<pre><code>String input = ...
Pattern p = Pattern.compile("\\d+");
Matcher m = p.matcher(input);
StringBuffer sb = new StringBuffer();
while (m.find()) {
    int number = Integer.parseInt(m.group());
    if (number &gt;= 0 &amp;&amp; number &lt;=10){
       m.appendReplacement(sb, mapping[number]);
    }
}
m.appendTail(sb);
String output = sb.toString();
</code></pre>
    </div>