<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>PEP-8</h1>

<p>The <a href="https://www.python.org/dev/peps/pep-0008/" rel="noreferrer">Style Guide for Python Code</a> has many stylistic guidelines that all Python programs should follow.</p>

<ul>
<li>Naming

<ul>
<li>functions, methods, and variables should all be <code>snake_case</code>.  <code>CapitalWords</code> are reserved for <code>Types</code> and <code>ClassNames</code>.  So <code>movesNeeded</code> should be <code>moves_needed</code> and <code>PegDict</code> should be <code>peg_dict</code>, and so on.</li>
</ul></li>
<li>Commas

<ul>
<li>All commas should be followed by exactly one space. <code>{'A': A,'B': B,'C': C}</code> violates this.</li>
</ul></li>
<li>Binary operators

<ul>
<li>Binary operators should be surrounded by one space.  You mostly follow this, except for the <code>print('Moves: '+ str(moves))</code> statements at the end.</li>
</ul></li>
</ul>

<h1>Exponentiation</h1>

<pre><code>movesNeeded = pow(2, discs) - 1
</code></pre>

<p>Python has the <code>**</code> operator, for exponentiation.  Thus, this could be written slightly more compactly:</p>

<pre><code>moves_needed = 2 ** discs - 1
</code></pre>

<h1>Initial list generation</h1>

<pre><code>A = []

for i in range(discs, 0, -1):
    A.append(i)
</code></pre>

<p>This is a little verbose.  You are already using the <code>range()</code> method to generate the disc numbers; you could simply create a list directly from the result:</p>

<pre><code>a = list(range(discs, 0, -1))
</code></pre>

<h1>Moving a Disc</h1>

<pre><code>def move(fromm, to):
    to.append(fromm[-1])
    fromm.pop()
</code></pre>

<p>I'm going to assume <code>fromm</code> is not a spelling error, but rather avoiding the <code>from</code> keyword.  The PEP-8 recommendation is a trailing underscore: <code>from_</code>.  My personal preference is to use synonyms.</p>

<p><code>.pop()</code> returns the item removed from the list, which is the value you used <code>fromm[-1]</code> to retrieve.  Therefore, these operations could easily be combine into one statement:</p>

<pre><code>def move(source, destination):
    destination.append(source.pop())
</code></pre>

<h1>Repeated Code</h1>

<pre><code>    print(A)
    print(B)
    print(C)
    print()
</code></pre>

<p>You've repeated this code twice.  Once moving the small disc, once moving a larger disc.  Instead of repeating the code, you should move this into a function.  Then, if you change how the discs are shown (curses, GUI, ...), you only have to alter the code once.</p>

<pre><code>def print_pegs(a, b, c):
    print(a)
    print(b)
    print(c)
    print()
</code></pre>

<h1>Iterating over a container</h1>

<pre><code>        for key in PegDict:
            if PossibleMove(PegDict[key]) != None:
                fromPeg = PegDict[key]
                onePossibleMove = PossibleMove(PegDict[key])
</code></pre>

<p>In this code, you are iterating over the <code>PegDict</code>, fetching the keys, and using the key to look up the dictionary value.  In fact, you never use the key for anything else.  You do not need the key at all, and could simply iterate over the contents of the dictionary:</p>

<pre><code>        for peg in peg_dict.values():
            if possible_move(peg) != None:
                from_peg = peg
                one_possible_move = possible_move(peg)
</code></pre>

<p>But notice we are computing using <code>possible_move(peg)</code> twice.  This is inefficient.  You should compute the result once, save it in a temporary, and use the temporary variable for further tests and assignments:</p>

<pre><code>        for peg in peg_dict.values():
            move = possible_move(peg)
            if move != None:
                from_peg = peg
                one_possible_move = move
</code></pre>

<h1>More Advanced Changes</h1>

<h2>Left or Right?</h2>

<p>Each iteration, you check if the number of discs was even or odd, and call the <code>moveLeft()</code> or <code>moveRight()</code> function.  Since the number of discs is constant, you always make the same choice.  You could move this decision out of the loop.</p>

<pre><code>move_smallest_disc = move_left if disc % 2 != 0 else move_right

while len(c) != discs:       # A simpler termination condition

    move_smallest_disc()
    print_pegs(a, b, c)
    moves += 1

    ...
</code></pre>

<p>But I've a different option...</p>

<h2>Cyclic Peg Order</h2>

<p>You always move the smallest disc either:</p>

<ul>
<li>a -&gt; b -&gt; c -&gt; a -&gt; b -&gt; c</li>
<li>a -&gt; c -&gt; b -&gt; a -&gt; c -&gt; b</li>
</ul>

<p>You can keep track of which order you need with a list:</p>

<pre><code>    if discs % 2 == 1:
        peg = [a, c, b]
    else:
        peg = [a, b, c]
</code></pre>

<p>And move the smallest disc from <code>peg[0]</code> to <code>peg[1]</code>, without having to hunt for which peg the smallest disc is on:</p>

<pre><code>    move(peg[0], peg[1])
</code></pre>

<p>And later rotate the <code>peg</code> list:</p>

<pre><code>    peg = peg[1:] + peg[:1]   # [a, b, c] -&gt; [b, c, a] -&gt; [c, a, b] -&gt; [a, b, c]
</code></pre>

<p>After moving the smallest disc onto <code>peg[1]</code>, the only possible moves for the larger disc will be <code>peg[0]</code> -&gt; <code>peg[2]</code> or <code>peg[2]</code> -&gt; <code>peg[0]</code>, so you can greatly simplify the possible move determination, by just looking at those two pegs:</p>

<pre><code>    source, destination = possible_move(peg[0], peg[2])
    move(source, destination)
</code></pre>

<h1>Refactored Code</h1>

<pre><code>from pathlib import Path
import gettext
gettext.install('hanoi', Path(__file__).parent)

def move(source, destination):
    destination.append(source.pop())

def possible_move(peg1, peg2):
    if peg1 and (not peg2 or peg1[-1] &lt; peg2[-1]):
        return peg1, peg2
    else:
        return peg2, peg1

def print_pegs(a, b, c):
    print(a)
    print(b)
    print(c)
    print()

def tower_of_hanoi(discs):
    a = list(range(discs, 0, -1))
    b = []
    c = []

    minimum_moves = 2 ** discs - 1

    if discs % 2 == 1:
        peg = [a, c, b]
    else:
        peg = [a, b, c]

    moves = 0
    while len(c) != discs:
        if moves % 2 == 0:
            move(peg[0], peg[1])      # Smallest disc now on peg[1]
        else:
            source, destination = possible_move(peg[0], peg[2])
            move(source, destination)
            peg = peg[1:] + peg[:1]   # Rotate the peg ordering

        print_pegs(a, b, c)
        moves += 1

    print()
    print(_('Moves:'), moves)
    print(_('Minimal moves:'), minimum_moves)

if __name__ == '__main__':
    discs = int(input(_('Enter the number of disks: ')))
    tower_of_hanoi(discs)
</code></pre>

<p>If you run <a href="https://docs.python.org/3/library/gettext.html#internationalizing-your-programs-and-modules" rel="noreferrer"><code>pygettext</code></a> on this, you can make a <code>hanoi.pot</code> template file, copy it to <code>hanoi.po</code> and put translations into it:</p>

<pre><code>msgid "Moves:"
msgstr "Liczba ruchów:"

msgid "Minimal moves:"
msgstr "Minimalna liczba ruchów:"

msgid "Enter the number of disks: "
msgstr "Podaj ilość dysków: "
</code></pre>

<p>Run <code>msgfmt</code> on that to generate an <code>hanoi.mo</code> file, and store it the subdirectory: <code>pl/LC_MESSAGES</code>.</p>

<p>Running <code>LANG="pl" ./hanoi.py</code> on my machine, gives:</p>

<pre class="lang-none prettyprint-override"><code>Podaj ilość dysków: 2
[2]
[1]
[]

[]
[1]
[2]

[]
[]
[2, 1]


Liczba ruchów: 3
Minimalna liczba ruchów: 3
</code></pre>

<p>With luck, I haven't butchered the translated strings too badly.</p>
    </div>