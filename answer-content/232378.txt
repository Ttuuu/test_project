<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You can always avoid repeating code by abstracting the general parts.</p>

<p>For example, your switch statement could be abstracted with the following code (assumed some types that are not declared in your question):</p>

<pre><code>private interface IChecker
{
    void Apply(GridData gridData);
    bool CanApply(string filterPropertyName);
}

private class Checker&lt;TFilterProperty&gt; : IChecker
{
    private readonly string name;
    private readonly Func&lt;Filter, TFilterProperty&gt; filterSelector;
    private readonly Func&lt;GridRow, TFilterProperty&gt; gridRowSelector;
    private readonly Action&lt;TFilterProperty&gt; filterSetter;

    public Checker(
        string name, 
        Func&lt;Filter, TFilterProperty&gt; filterSelector, 
        Func&lt;GridRow, TFilterProperty&gt; gridRowSelector,
        Action&lt;TFilterProperty&gt; filterSetter)
    {
        this.name = name;
        this.filterSelector = filterSelector;
        this.gridRowSelector = gridRowSelector;
        this.filterSetter = filterSetter;
    }

    public void Apply(GridData gridData)
    {
        var filter = GridData[0];
        var filterValue = filterSelector(filter);
        var found = GridData.FirstOrDefault(f =&gt; gridRowSelector(f) != filterValue);
        var valueToSet = found == null ? filterValue : null;
        this.filterSetter(valueToSet);
    }

    public bool CanApply(string filterPropertyName) =&gt; filterPropertyName == "all" || filterPropertyName == this.name;
}

private void SetHeaderCheckbox(string filterProperty = null)
{
    if (GridData.Count == 0) return;

    if (filterProperty == null) filterProperty = "all";

    var checkers = new IChecker[]
    {
        new Checker("SuperImpose", f =&gt; f.SplitOver, f =&gt; f.SplitOver, v =&gt; this.SuperimposeHeaderCheckbox = value),
        new Checker("Normalize", f =&gt; f.ToNormalize, f =&gt; f.ToNormalize, v =&gt; this.NormalizeByHeaderCheckbox = value),
        new Checker("Legend", f =&gt; f.ToLegend, f =&gt; f.ToLegend, v =&gt; this.LegendHeaderCheckbox = value),
    }

    foreach (var checker in checkers.Where(c =&gt; c.CanApply(filterProperty))
    {
        checker.Apply(GridData);
    }
}
</code></pre>

<p>Whether the abstracted code is more readable / maintainable is another question that depends on the concrete use case :)</p>

<p>Note that the code above is just an untested example that illustrates the abstraction of common parts. There may be better abstractions with less delegates in your case ;)</p>
    </div>