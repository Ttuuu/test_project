<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'm having trouble visualizing what your intention here is.</p>

<p>Let's talk about your code itself, then I'll move on to a slight redesign:</p>

<p>C# has a nice-new language feature called "Expression-Bodied members", basically, this:</p>

<pre><code>public int Strength =&gt; 5;
</code></pre>

<p>That's equivalent, but much shorter than your version:</p>

<blockquote>
<pre><code>public int Strength { get { return 5; } }
</code></pre>
</blockquote>

<p>So, I would recommend moving to something like that, if you want to keep this design.</p>

<p><strong>But</strong>, I would redesign this:</p>

<p>Everything has the same stats, right? They all need the stats, they just might have different values?</p>

<pre><code>public class Stats
{
    public int Strength { get; }
    public int Constitution { get; }
    public int Agility { get; }
    public int Accuracy { get; }
    public int Intelligence { get; }
    public int Charisma { get; }
    public int Luck { get; }
}
</code></pre>

<p>So we're using another new language feature here: auto-implemented readonly properties. Basically: don't put code in the <code>get</code>, and these can only be set by the constructor. Of course, we <em>need</em> a constructor:</p>

<pre><code>public Stats(int strength, int constitution, int agility, int accuracy, int intelligence, int charisma, int luck)
{
    Strength = strength;
    Constitution = constitution;
    Agility = agility;
    Accuracy = accuracy;
    Intelligence = intelligence;
    Charisma = charisma;
    Luck = luck;
}
</code></pre>

<p>Now, because everyone has their own specific stats, but they all follow the same structure, we use this class in the object:</p>

<pre><code>public abstract class Entity
{
    public Stats Stats { get; }
    public Entity(Stats stats)
    {
        Stats = stats;
    }
}
</code></pre>

<p>So, because everybody is the same type of "Entity" with different attributes, we then move on to the <code>Warrior</code> / <code>Wizard</code> / etc.:</p>

<pre><code>public abstract class Warrior : Entity
{
    public Warrior()
        : base(new Stats(5, 4, 3, 3, 2, 3, 1))
    { }
}

public abstract class Wizard : Entity
{
    public Wizard()
        : base(new Stats(2, 3, 3, 3, 5, 4, 1))
    { }
}
</code></pre>

<p>Now you can use the <code>ILocatable</code> etc. in the specific games, but the <em>basics</em> are all the same across-the-board. We build a more extracted model: the things that <em>have</em> to be there are, and are enforced.</p>

<p>With this part:</p>

<blockquote>
<pre><code>public interface IGame
{
    Type WarriorType { get; }
    Type WizardType { get; }
}
</code></pre>
</blockquote>

<p>We can do some trickery:</p>

<pre><code>public abstract class Game&lt;TWarrior, TWizard&gt;
    where TWarrior : Warrior
    where TWizard : Wizard
{
    public Type WarriorType =&gt; typeof(TWarrior);
    public Type WizardType =&gt; typeof(TWizard);
}
</code></pre>

<p>Now, I don't know <em>why</em> you need the <code>WarriorType</code> or <code>WizardType</code>, you probably <em>don't</em> need them in this version, because we put those types on the <code>Game</code> class.</p>

<p>We obviously haven't handled the <code>TakeDamages</code> or <code>Shoot</code>, right? We need to find a way to deal with that on a game-by-game basis: enter <strong>ECS</strong> (entity-component-system).</p>

<p>We built the entities, they have stats (components), now we need "systems" to handle the components.</p>

<pre><code>public class ActualWizard : Wizard { }
public class ActualWarrior : Warrior { }

public class ActualGame : Game&lt;ActualWizard, ActualWarrior&gt;
{
    public class ShootSystem
    {
        public static void Shoot(Entity source, Entity target)
        {
            Console.WriteLine($"Shooting with STR={source.Stats.Strength}");
        }
    }
}
</code></pre>

<p>So, now you would call <code>ShootSystem.Shoot(myWarrior, myWizard);</code>, which would be where you handle all of the logic to <em>actually shoot</em> the wizard with the warrior. This also means that <em>all entities</em> can use the same function, whatever they may be. (Paladin, etc.)</p>

<pre><code>var myGame = new ActualGame();
var myWarrior = new ActualWarrior();
var myWizard = new ActualWizard();
myGame.ShootSystem.Shoot(myWarrior, myWizard);
</code></pre>

<p>You would add any stats <em>specific</em> to warriors to <code>ActualWarrior</code>, same with <code>ActualWizard</code>, but you don't put the <em>logic</em> there, you build a <code>System</code> for it.</p>
    </div>