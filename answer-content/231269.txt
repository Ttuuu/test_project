<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Missing <code>&lt;cstring&gt;</code> header (needed for <code>std::memcpy()</code>).  Conversely, we've included <code>&lt;memory&gt;</code> but declined to take advantage of what it provides.</p>

<p>You have misspelt <code>std::uint32_t</code> (the template's default <code>IdxType</code>).</p>

<p>Using bare <code>new[]</code> instead of a vector gives a serious bug when a <code>PriorityQueue</code> is copied (use after free, and double delete).  It's simpler and safer to use a <code>std::vector</code> to manage the arrays for us.</p>

<p>Giving external write access to the innards (<code>objects()</code>, <code>indices()</code>) allows outside code to break the object's invariants.</p>

<p>The <code>buildHeap()</code> member applies <code>std::memcpy()</code> without checking whether that's safe for <code>ObjectType</code> objects - we should be using <code>std::move()</code> (from <code>&lt;algorithm&gt;</code>) instead:</p>

<pre><code>std::move(array, array+elementsCount, m_objects);
</code></pre>

<p>It's surprising that this method takes a pointer to array of mutable objects; we could consider an overload for const objects - that would use <code>std::copy_n()</code> rather than <code>std::move()</code>:</p>

<pre><code>    IdxType * buildHeap(ObjectType const* array, IdxType elementsCount)
    {
        assert(elementsCount &lt;= m_maxSize);

        std::copy_n(array, elementsCount, m_objects);
</code></pre>

<p>Also in this method, don't use <code>assert()</code> for checking that needs to occur in production builds - that's a macro compiles to nothing when <code>NDEBUG</code> is defined.  We wouldn't need that test if we were using a vector for storage.</p>

<p>Why are we writing our own heap algorithm instead of using <code>std::make_heap()</code> and related functions?</p>

<p>Object counts are best represented as <code>std::size_t</code>, not <code>std::uint32_t</code>.  <code>m_heapSize</code> and <code>m_maxSize</code> ought to be of type <code>IdxType</code>.</p>
    </div>