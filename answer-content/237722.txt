<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>These constructors are basically the same:</p>

<pre><code>BigInt(int number)
BigInt(long long int number)
BigInt(unsigned long long int number)
</code></pre>

<p>So why not templatize them so you only have to write them once:</p>

<pre><code>template&lt;typename I&gt;
BigInt(I number)
</code></pre>

<p>If you are worried about non integer types you can add a constraint to make sure that I is always integers.</p>

<pre><code>template&lt;typename I&gt;
require std::is_integer&lt;I&gt; // C++20
BigInt(I number)
</code></pre>

<p>or </p>

<pre><code>template&lt;typename I, typename = std::enable_if_t&lt;std::is_integral&lt;I&gt;::value&gt;&gt;
BigInt(I number)
</code></pre>

<p>Manually converting to a string:</p>

<pre><code>    while(number &gt; 0){
        this -&gt; number += (number % 10) + '0';
        number /= 10;
    }
</code></pre>

<p>Seems like a lot of work:</p>

<pre><code>    // This also works for zero.
    this-&gt;number = std::to_string(number);
</code></pre>

<p>You can then check the first character for '-' to set the negative flag (and then remove it).</p>
    </div>