<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There are following issues with such approach:</p>

<ol>
<li>If you call <code>getBiodata()</code> before <code>generateLists()</code> you will get empty list.</li>
<li>User of this class should know internal implementation (<code>generateLists()</code> breaks encapsulation).</li>
<li>If you use setters after <code>generateLists()</code> you will get the state without filled data.</li>
</ol>

<p>I would suggest following:</p>

<ol>
<li>Create dedicated private method <code>init()</code> and use it in constructors.</li>
<li>Remove setters, make the lists final.</li>
<li>Return copy of the lists, it will protect state of the class from unexpected modifications.</li>
<li>Add dedicated methods for lists modifications. </li>
</ol>

<p>Have a look at the following code:</p>

<pre><code>public class MassiveDTO {
    private final List&lt;String&gt; company;
    private final List&lt;String&gt; partners;
    private final List&lt;String&gt; biodata;

    public MassiveDTO() {
        this(new ArrayList&lt;&gt;(), new ArrayList&lt;&gt;(), new ArrayList&lt;&gt;());
    }

    public MassiveDTO(List&lt;String&gt; company, List&lt;String&gt; partners, List&lt;String&gt; biodata) {
        super();
        this.company = company;
        this.partners = partners;
        this.biodata = biodata;
        init();
    }

    private void init() {
        company.add("X0788");
        company.add("X0192");
        partners.add("X0081");
        biodata.add("X0913");
    }

    public List&lt;String&gt; getCompany() {
        return new ArrayList&lt;&gt;(company);
    }

    public List&lt;String&gt; getPartners() {
        return new ArrayList&lt;&gt;(partners);
    }

    public List&lt;String&gt; getBiodata() {
        return new ArrayList&lt;&gt;(biodata);
    }

    public MassiveDTO addPartner(String partner) {
        partners.add(partner);
        return this;
    }

    public MassiveDTO addCompany(String comp) {
        company.add(comp);
        return this;
    }

    public MassiveDTO addBiodata(String bio) {
        biodata.add(bio);
        return this;
    }
}
</code></pre>
    </div>