<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<pre><code>private string QueryString(object request, string propertyName = null)
{
  if (request == null) throw new ArgumentNullException(nameof(request));
</code></pre>
</blockquote>

<p>It is fine to check if a parameter is null, but because you call this method recursively, the <code>request</code> parameter may be a property that is null on an object that is otherwise valid:</p>

<pre><code>class ParentObject
{
  ChildObject Child { get; set; }
  int PrimitiveValue { get; set; }
}

class ChildObject
{
  string Name { get; set; }
}


ParentObject po = new { ChildObject = null, PrimitiveValue = 10 }
</code></pre>

<p>Are you sure this situation should throw an exception, when handling ChildObject recursively?</p>

<hr>

<p>You are not dealing with <code>struct</code> types (value types that are not primitives). They are handled as primitive types, which goes well for <code>DateTime</code>, but what about structs with two or more useful properties?</p>

<hr>

<p>You should be aware of the possibility to go into an infinite recursion if a type have a property of its own kind: a <code>DateTime</code> has the property <code>Date</code> which is of type <code>DateTime</code>, so that is a candidate for an infinite recursion.</p>

<hr>

<p>As CharlesNRice writes in this comment, you should check that each object is only handled once.</p>

<hr>

<blockquote>
  <p><code>return "?" + queryString;</code></p>
</blockquote>

<p>Because you call the method recursively, you end up with '?' more places than just at the beginning. Is that intentionally?</p>

<hr>

<blockquote>
  <p><code>PaymentMethod.Code=1</code></p>
</blockquote>

<p>When running your example the above is generated. But shouldn't that be <code>Object.PaymentMethod.Code=1</code> ?</p>

<hr>

<p>All in all I think you do too much in the same method, and you query the request for properties unnecessarily many times. I think I would try with an approach like:</p>

<pre><code>  IEnumerable&lt;(string key, object value)&gt; CollectProperties(object request, string prefix = null)
  {
    List&lt;(string key, object value)&gt; properties = new List&lt;(string key, object value)&gt;();

    if (IsHandled(request)) return properties;

    prefix = prefix == null ? "" : $"{prefix}.";

    foreach (PropertyInfo pi in request.GetType().GetProperties().Where(p =&gt; p.CanRead))
    {
      string propertyPrefix = $"{prefix}{pi.Name}";
      if (IsPrimitive(pi))
        properties.Add(HandlePrimitive(..., propertyPrefix));
      else if (IsEnumerable(pi))
        properties.AddRange(HandleEnumerable(..., propertyPrefix));
      else if (IsClass(pi))
        properties.AddRange(HandleClass(..., propertyPrefix));
      else if (IsStruct(pi))
        properties.AddRange(HandleStruct(..., propertyPrefix));
    }

    return properties; 
  }
</code></pre>

<p>Each of the Handle&lt;...&gt;(...) methods may call the above method recursively. The caller handles the format and url encoding and finally the concatenation to one string using <code>string.Join("&amp;", properties.Select(format...))</code>. In this way you only have one place where the format occur.</p>
    </div>