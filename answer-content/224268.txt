<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your code looks quite good. It is easy to read and understand.</p>

<p>I don't know how efficient it is, though. The <code>reorder</code> function creates lots of objects (3 arrays, and a return object). I think there are more efficient ways to implement this. Since you got the algorithmic complexity correct, I would not worry about these performance issues too much. If the code is fast enough, it's good enough. And it's readable, which is often more important.</p>

<p>Instead of <code>let larger = []</code>, you can write <code>const larger = []</code> since the variable <code>larger</code> is only ever assigned once. Sure, you later modify the contents of the array, but the variable still points to the same array as before.</p>

<p>Instead of the <code>for (let i = 0</code> loop, you can use the simpler <code>for (const elem of arr)</code> loop, which will free your code from the many <code>[i]</code> brackets.</p>

<p>There are some more unnecessary brackets in that function, in the expression <code>arr[pivot]</code>. This expression is evaluated more often than necessary. I would change the pivot element to be the value itself instead of the array index.</p>

<p>The <code>sort</code> function returns the original array in some cases, and a new array in the other cases. That is inconsistent. The caller of the <code>sort</code> function might assume that they may modify the array afterwards, and depending on the array size, this may or may not affect the original array, which you defined as immutable. Therefore you should return a copy of the array in every case.</p>

<p>You should write lots of automated tests. Having just a single example is not enough to cover all cases. I have written a few test cases for you, feel free to add more.</p>

<p>After applying all these suggestions, the code looks like this:</p>

<pre><code>const reorder = (arr, pivot) =&gt; {
    const larger = []
    const smaller = []
    const equals = []
    for (let elem of arr) {
        if (elem &lt; pivot) {
            smaller.push(elem)
        } else if (elem &gt; pivot) {
            larger.push(elem)
        } else {
            equals.push(elem)
        }
    }
    return {
        smaller: smaller,
        equals: equals,
        larger: larger
    }
}

const sort = (arr) =&gt; {
    if (arr.length &lt;= 1) {
        return arr.slice()
    }
    const pivotIndex = Math.floor(arr.length / 2)
    const result = reorder(arr, arr[pivotIndex])
    return [...sort(result.smaller), ...result.equals, ...sort(result.larger)]
}

const testcase = (unsorted, expected) =&gt; {
    const actual = sort(unsorted)
    const actualStr = actual.join(', ')
    const expectedStr = expected.join(', ')
    if (actualStr !== expectedStr) {
        console.log('error:', 'input:', unsorted, 'expected:', expected, 'actual:', actual)
    }

    if (actual.length !== 0) {
        const beforeModification = unsorted.join(', ')
        actual[0] += 1
        const afterModification = unsorted.join(', ')
        if (beforeModification !== afterModification) {
            console.log('error:', 'unsorted:', unsorted, 'before:', beforeModification, 'after:', afterModification)
        }
    }
}

testcase([], [])
testcase([1], [1])
testcase([3, 1, 1, 1, 2], [1, 1, 1, 2, 3])
testcase([0, 5, 4, 8, 9, 3, 7, 1, 2, 6], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
</code></pre>
    </div>