<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Thanks for editing the question. I have few ideas how you might want to polish your code. </p>

<h2>std::string base class</h2>

<p>It caught my eye that <code>JSONPretify</code> is derived from <code>std::string</code>. Generaly speaking STL containers are not meant for such use case. Specificaly it is a good idea if you are deriving from a base class to check that it has virtual destructor. <code>std::string</code> does not have <code>virtual</code> destructor.</p>

<p>See e. g.
<a href="https://www.securecoding.cert.org/confluence/display/cplusplus/OOP52-CPP.+Do+not+delete+a+polymorphic+object+without+a+virtual+destructor" rel="noreferrer">https://www.securecoding.cert.org/confluence/display/cplusplus/OOP52-CPP.+Do+not+delete+a+polymorphic+object+without+a+virtual+destructor</a></p>

<h2>interface</h2>

<p>I would go even further and suggest that as you don't need to model any state, keep any data or invariant simple function might be better interface.</p>

<pre><code>std::string pretify(const std::string&amp; j, bool colon_space = false);
</code></pre>

<h2>separation of interface and implementation</h2>

<p>In order to be able to hide all hairy details from users of your code you might separate it into interface and implementation. The most common form is iterface only header file (e. g. prettify.hpp) and implementation source file (e. g. prettify.cpp). You then might leave all definitions and implementation details for prettify.cpp. To separate it from the rest of your code (even that you are only linking to) you might use either anonymous namespaces or internal linkage functions (surprisingly this is other meaning of keyword <code>static</code>).</p>

<ul>
<li><a href="http://en.cppreference.com/w/cpp/language/namespace" rel="noreferrer">http://en.cppreference.com/w/cpp/language/namespace</a></li>
<li><a href="http://en.cppreference.com/w/cpp/language/storage_duration" rel="noreferrer">http://en.cppreference.com/w/cpp/language/storage_duration</a></li>
</ul>

<h2>find_lowest</h2>

<p>I would try to avoid implementation of this algorithm and use <code>std::string::find_first_of()</code> and/or <code>std::min_element()</code>. </p>

<p>If you decide to stick with it then you still might simplify it by not making it a template as there is just single call to it. You also probably don't want to copy the argument vector so reference might be more appropriate:</p>

<pre><code>unsigned long find_lowest(const std::vector&lt;long&gt;&amp; outof){
</code></pre>

<h2>work_with</h2>

<p>I would recommend using scoped enum (great C++11 extension) and distinquishing between such enum and integers.</p>

<p>See <a href="http://en.cppreference.com/w/cpp/language/enum" rel="noreferrer">http://en.cppreference.com/w/cpp/language/enum</a> [Scoped enumerations]</p>

<p>All it takes is new <code>positions</code> definition:</p>

<pre><code>enum class positions{
</code></pre>

<p>and change to values usage:</p>

<pre><code>case(positions::TAB):{
</code></pre>

<p>I am perplexed by this</p>

<pre><code>positions work_with = find_lowest(std::vector&lt;long&gt;{pos_tab.pos, pos_comma, pos_obj_start, pos_obj_end,pos_array_start,pos_array_end});
</code></pre>

<p>because you are assigning position to <code>work_with</code> but checking content in <code>switch</code>. Is it correct?</p>

<h2>variables</h2>

<p>This is kind of subjective opinion but omitting some helper variables might increase readability.</p>

<pre><code>            case(COMMA):{
                std::string insert = "\n";
                this-&gt;insert(pos_comma+1, insert);

                it = pos_comma+1;
                break;
            }
</code></pre>

<p>shortened to</p>

<pre><code>            case(COMMA):{
                this-&gt;insert(pos_comma+1, "\n");

                it = pos_comma+1;
                break;
            }
</code></pre>

<p>For those variables that you create and don't intend to change I would definitely use <code>const</code> to let know the compiler about your intention and let it actually check that you don't accidentally violate that.</p>

<pre><code>const std::regex var = std::regex(R"((\".+?\".*?(?=\{|\[|\,|\]|\}))|(\d+?))");

const regex_pos pos_tab = findRegexFirstPosition(it, var);

const std::string insert = generateSpaces(depth);
</code></pre>

<h2>insertColonSpaces</h2>

<p>Basically you are replacing one string with another.</p>

<p>This question might give some hints (e. g. <code>boost::algorithm::replace_all_copy</code> or using <code>std::regex</code>).
<a href="https://stackoverflow.com/questions/5343190/how-do-i-replace-all-instances-of-a-string-with-another-string">https://stackoverflow.com/questions/5343190/how-do-i-replace-all-instances-of-a-string-with-another-string</a></p>

<h2>generateSpaces</h2>

<p>Unless I have overlooked something it is the same as</p>

<pre><code>return std::string(l * 4, ' ');
</code></pre>

<p>Check <code>std::string</code> "fill" constructor here:
<a href="http://www.cplusplus.com/reference/string/string/string/" rel="noreferrer">http://www.cplusplus.com/reference/string/string/string/</a></p>

<h2>for() { break; }</h2>

<p>This loop</p>

<pre><code>    for (unsigned i=0; i&lt;m.size(); ++i) {
        at = m.position(i);
        l = m[i].str().size();
        break;
    }
</code></pre>

<p>looks more like a simple condition</p>

<pre><code>    if ( m.size() &gt; 0 ) {
        at = m.position(0);
        l = m[0].str().size();
    }
</code></pre>
    </div>