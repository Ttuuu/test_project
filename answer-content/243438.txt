<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>LOOP works, it's an iterative version of the algorithm. But there are other ways to implement a solution in Common Lisp.</p>

<p>I always try to solve a problem by checking the following techniques, generally in this order :</p>

<ol>
<li>Using applicative operators (MAPCAR, MAP, REDUCE...),</li>
<li>Tail-Recursive function,</li>
<li>Iterative function (DOTIMES, DOLIST, DO, DO*).</li>
</ol>

<p>And then I try to check performance of each version using TIME.</p>

<p>Here are my versions and their evaluation on a 10000 parenthesis string using SBCL 2.0.1 on OpenBSD :</p>

<pre><code>;;; Applicative version :
(defun xmas-floor (instr)
  (reduce #'+
          (map 'list
               #'(lambda (c)
                   (cond ((equal c #\( ) 1)
                         ((equal c #\) ) -1)
                         (t 0)))
               instr)))

;; Evaluation took:
;;   0.006 seconds of real time
;;   0.000000 seconds of total run time (0.000000 user, 0.000000 system)
;;   0.00% CPU
;;   17,685,922 processor cycles
;;   30 page faults
;;   163,840 bytes consed
;; 10000
</code></pre>

<pre><code>;;; Tail-Recursive version :
(defun xmas-floor (instr)
  (let ((len (length instr)))
    (labels ((helper (i fl)
               (when (equal i len)
                 (return-from helper fl))
               (let ((c (elt instr i)))
                 (cond ((equal c #\( ) (helper (+ i 1) (+ fl 1)))
                       ((equal c #\) ) (helper (+ i 1) (- fl 1)))
                       (t (helper (+ i 1) fl))))))
      (helper 0 0))))

;; Evaluation took:
;;   0.002 seconds of real time
;;   0.000000 seconds of total run time (0.000000 user, 0.000000 system)
;;   0.00% CPU
;;   4,558,671 processor cycles
;;   0 bytes consed
;; 10000
</code></pre>

<pre><code>;;; Iterative version :
(defun xmas-floor (instr)
  (let ((fl 0) (c nil))
    (dotimes (i (length instr) fl)
      (setf c (elt instr i))
      (cond ((equal c #\( ) (incf fl))
            ((equal c #\) ) (decf fl))))))

;; Evaluation took:
;;   0.000 seconds of real time
;;   0.000000 seconds of total run time (0.000000 user, 0.000000 system)
;;   100.00% CPU
;;   1,280,905 processor cycles
;;   0 bytes consed
;; 10000
</code></pre>

<p>For comparison, your function using LOOP on my computer, with a string of 10000 parenthesis, gives the following evaluation :</p>

<pre><code>;; Evaluation took:
;;   0.002 seconds of real time
;;   0.000000 seconds of total run time (0.000000 user, 0.000000 system)
;;   0.00% CPU
;;   4,833,080 processor cycles
;;   0 bytes consed
;; (10000 0 10000)
</code></pre>
    </div>