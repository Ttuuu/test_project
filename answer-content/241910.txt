<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Design</h2>

<p>I'd create a separate class for <code>Grid</code> and <code>Position</code> at the very least. Especially when separating out the <code>Grid</code> the game code will be significantly reduced. Smaller classes should generally be preferred when they make sense.</p>

<p>With the removal of <code>movecount</code> (see below), you'd have just two fields: <code>currentGrid</code> and <code>goalGrid</code>, both of type <code>Grid</code>.</p>

<h2>Code review</h2>

<p>I'll handle the lines in order, skipping many, with the remarks below the code.</p>

<pre><code>import java.util.Arrays;
public class FifteenPuzzle
{ 
</code></pre>

<p>Please use at least a white line between import statements and the class declaration.</p>

<p>The class should probably be made <code>final</code> unless you create it for extension.</p>

<p>Using <code>{</code> on a new line instead of "Egyptian braces" is often acceptable, but it is not very much used for Java. If they are used, then use them <strong>consistently</strong> (which is not the case here). Most IDE's contain code formatting nowadays, use that if you don't like doing it yourself.</p>

<pre><code>private int xspace;   // xspace,yspace are the current coordinates of the space
private int yspace;
</code></pre>

<p>What space? The empty space? Please be precise. If two variables are needed for one thing, try and aggregate them together, e.g. into a <code>Position</code> class (immutable with <code>equals</code> and <code>hashCode</code> please).</p>

<pre><code>private final int size; // the number of tiles across and down 
</code></pre>

<p>Not required, <code>grid.length</code> will do that. Generally, try to minimize the amount of fields. However, for readability reasons I guess this is kinda OK.</p>

<pre><code>private int movecount = 1000;
</code></pre>

<p>The field <code>movecount</code> (or rather <code>moveCount</code>) should be a constant; it doesn't change within the game logic.</p>

<p>I'm a bit worried about the naming though, what about, say, <code>edgeSize</code> or <code>dimension</code>?</p>

<pre><code>grid = initialGrid;
</code></pre>

<p>Why isn't the size of the grid checked here? It is not symmetric with the constructor that just takes the grid size. Furthermore, there is no check that the width and height are identical.</p>

<pre><code>public void scramble() {
</code></pre>

<p>Hey, is the user allowed to call <code>scramble</code>? If not, then why is the method <code>public</code> instead of <code>private</code>? Same for other methods.</p>

<pre><code>done = true;
</code></pre>

<p>Use <code>while (true)</code> or <code>for(;;)</code> and <code>break</code> / <code>continue</code> instead. May look weird initially, but it removes one variable from the equation, and you can remove redundant checks.</p>

<pre><code>for (int a = 1; a &lt;= size; a++) {
</code></pre>

<p>No, no, no. Always use zero based indexing:</p>

<pre><code>for (int a = 0; a &lt; size; a++) {
</code></pre>

<p>unless there are specific reasons not to. It seems OK for the move counter (as you're doing move 1 initially, not move 0 I suppose).</p>

<p>And what about that naming, why <code>a</code> and <code>b</code> for coordinates? <code>x</code> and <code>y</code> is used correctly in the rest of the code.</p>

<pre><code>public int[][] setGoal() {
</code></pre>

<p>A "setter" is a specific function that sets a field to a given value. It takes a single argument and returns <code>void</code>. <code>createGoal</code> is probably a better name.</p>

<pre><code>public int[][] getGrid()
</code></pre>

<p>This is a correct "getter" declaration. No arguments, single return of a field.</p>

<pre><code>return grid;
</code></pre>

<p>Never ever return a mutable reference to something that makes up the internal state of a class, violating encapsulation principles. Copy or clone the data instead, or provide read only access (iterator, lambda).</p>

<pre><code>if (x &lt; 0 || y &lt; 0 || x &gt; size-1 || y &gt; size-1) {
</code></pre>

<p>This I can read somewhat.</p>

<pre><code>return ( (x == xspace &amp;&amp; (y == yspace - 1 || y == yspace + 1)) || (y == yspace &amp;&amp; (x == xspace - 1 || x == xspace + 1)) );
</code></pre>

<p>This I cannot. The line size is too large as well. Compare to reading this:</p>

<pre><code>return insideGrid(x, y) &amp;&amp; nextToEmpty(x, y);
</code></pre>

<p>and then implementing those functions. With a bit of help of the IDE that's not even that much work.</p>

<pre><code>if (!legalClick(x, y)) {
    return;
}
</code></pre>

<p>Just returning (or worse, just returning <code>null</code> or <code>0</code> for methods that return data) is almost always a bad decision. In this case an exception should be thrown.</p>

<p>If the calling code first wants to check if the move is valid, it can call <code>legalClick</code> itself. You may be calling <code>legalClick</code> twice that way, but the JIT compiler will probably notice if it starts to take too much time.</p>

<h2>GUI code</h2>

<p>There was some time required to get the GUI running. However, when I did the game ran, but there were some issues. For instance, you can scale the window containing puzzle, but that just mucks up the contents. The puzzle is not scaled well initially either, and a line seems to be missing on the right hand side.</p>

<p>I don't expect to interact with a <code>Viewer</code>. Maybe with a <code>View</code>, but a <code>Viewer</code> sounds rather passive.</p>

<p>There are dual calls to <code>drawGrid</code> that aren't explained at all. I don't see why those are necessary.</p>

<p>I presume the squares are 100 pixels in size or so, but there is a lot of repetition of the value 100. The value 100 should probably be a constant, but generally I'd already use a <code>squareEdgeSize</code> variable for that. At least you did make sure that the value is not repeated in the canvas code, so that's OK.</p>

<p>You are using a <code>MouseListener</code> with unimplemented methods. However, in that case you might want to have a look at a <code>MouseAdapter</code> instead that provides default implementations, cleaning up your listener interface.</p>

<p>When you look at the <code>drawRectangle</code> you can see that you specifically have to calculate <code>x + 100</code>, while the original method of drawing in Java uses a <code>width</code>. So you are calculating a second <code>x</code> using the width only to reverse that later.</p>

<p>Your methods are not symmetric. You have a <code>drawGrid()</code> that doesn't take any arguments, and many other <code>draw</code> methods that do. That kind of inconsistencies are also seen in the whitespace and such. It makes the code less clean and harder to read.</p>

<p>Both the constructor of the viewer and another method draw the grid, and make the same decision which one to draw. This goes against DRY principles.</p>
    </div>