<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The call to clone() in Graph::dijkstra feels wrong. Without actually re-factoring the code, I am not sure of the solution, I can see you have some problems with borrowing / mut.</p>
<p>My intuition is that you need to make the method that constructs DijkstraTable a method of DijkstraTable rather than Graph. It would take a (non-mutable) reference to the Graph.</p>
<p>Edit:</p>
<p>After taking a much closer look, I made some changes to eliminate the cloning ( the #derive(Clone)s are no longer needed ), and other changes:</p>
<pre><code>type Vertex = char;

#[derive(Debug)]
struct Connection {
    peers   : (Vertex, Vertex),
    weight  : u32,
}

#[derive(Debug)]
struct Graph {
    connections : Vec&lt;Connection&gt;,
    vertices    : Vec&lt;Vertex&gt;,
}

#[derive(Debug)]
struct Road {
    vertex     : Vertex,
    distance   : u32,
    via_vertex : Vertex,
}

#[derive(Debug)]
struct DijkstraTable {
    start_vertex : Vertex,
    roads        : Vec&lt;Road&gt;,
    unvisited    : Vec&lt;Vertex&gt;,
}

impl DijkstraTable {
    fn get_distance(&amp;self, vertex: Vertex) -&gt; u32 {
        let mut ret = 0;

        for r in &amp;self.roads {
            if r.vertex == vertex {
                ret = r.distance;
            }
        }

        ret
    }

    fn get_next_unvisited(&amp;self) -&gt; Option&lt;Vertex&gt; {
        let mut min = u32::MAX;
        let mut next = None;

        for vertex in &amp;self.unvisited {
            for r in &amp;self.roads
            {
              if r.vertex == *vertex 
              {
                if r.distance &lt; min {
                  min = r.distance;
                  next = Some(*vertex);
                }
              }
            }
        }
        next
    }

    fn remove(&amp;mut self, v : Vertex) {
        let mut index = 0;
        while index &lt; self.unvisited.len() {
            let toremove = self.unvisited[index];
            if v == toremove {
                self.unvisited.remove(index);
                break
            }
            index += 1;
        }
    }


    fn new( graph: &amp;Graph, start: Vertex ) -&gt; DijkstraTable {
        let mut table = DijkstraTable {
            start_vertex : start,
            roads        : Vec::new(),
            unvisited    : graph.vertices.clone(),
        };

        for v in &amp;graph.vertices {
            let mut road = Road::new(*v);

            if *v == start {
                road.distance = 0;
            }

            table.roads.push(road);
        }

        loop {
            match table.get_next_unvisited() {
                None =&gt; break,
                Some(v) =&gt; {
                    //println!("{}##################",v);

                    for n in graph.get_neighbours(v) {
                      let d = graph.get_weight((v, n));
                      let k = d + table.get_distance(v);
                      for road in &amp;mut table.roads
                      {         
                        if road.vertex == n
                        {
                          if k &lt; road.distance {
                            road.via_vertex = v;
                            road.distance = k;
                          }
                          break;
                        }
                      }
                    }
                    table.remove(v);
                    // println!(" {:#?} ", table);
                }
            }
        }
        table
    }
}

impl Road {
    fn new(from: Vertex) -&gt; Road {
        Road {
            vertex      : from,
            distance    : u32::MAX,
            via_vertex  : '-',
        }
    }
}

impl Graph {
    fn get_weight(&amp;self, peers: (Vertex, Vertex)) -&gt; u32 {
        let mut ret : u32 = 0;

        for c in &amp;self.connections {
            let (a, b) = peers;

            if c.peers == peers || c.peers == (b, a) {
                ret = c.weight;
                break;
            }
        }
        ret
    }

    fn get_neighbours(&amp;self, vertex: Vertex) -&gt; Vec&lt;Vertex&gt; {
        let mut neighbours : Vec&lt;Vertex&gt; = Vec::new();

        for c in &amp;self.connections {
            if c.peers.0 == vertex {
                neighbours.push(c.peers.1);
            } else if c.peers.1 == vertex {
                neighbours.push(c.peers.0);
            }
        }

        neighbours
    }

    fn vertices_from_connections(conns : &amp;Vec&lt;Connection&gt;) -&gt; Vec&lt;Vertex&gt; {
        let mut verts : Vec&lt;Vertex&gt; = Vec::new();

        for c in conns.iter() {
            if ! verts.contains(&amp;c.peers.0) {
                verts.push(c.peers.0);
            }
            if ! verts.contains(&amp;c.peers.1) {
                verts.push(c.peers.1);
            }
        }
        verts
    }

    fn new(conns: Vec&lt;Connection&gt;) -&gt; Graph {
        Graph {
            vertices    : Graph::vertices_from_connections(&amp;conns),
            connections : conns,
        }
    }
}

fn main() {
    let graph = Graph::new(
        vec![
            Connection {
                peers: ('A', 'B'),
                weight: 6,
            },
            Connection {
                peers: ('A', 'D'),
                weight: 1,
            },
            Connection {
                peers: ('D', 'E'),
                weight: 1,
            },
            Connection {
                peers: ('D', 'B'),
                weight: 2,
            },
            Connection {
                peers: ('E', 'B'),
                weight: 2,
            },
            Connection {
                peers: ('E', 'C'),
                weight: 5,
            },
            Connection {
                peers: ('B', 'C'),
                weight: 5,
            },
        ]
    );
    let dt = DijkstraTable::new( &amp;graph, 'A' );
    println!(" Dijkstra of 'A': {:#?}", dt );
}
</code></pre>
<p>I ought ideally to explain the changes in more detail, but I hope the above helps. In particular you had functions returning &amp;Vertex rather than simply Vertex, which I think caused problems. Also, I have eliminated the functions get_road_mut and get_road. I'm not sure if this was strictly necessary or not, but having functions that return references is I think generally problematic.</p>
<p>Edit 2:</p>
<p>It is possible to have a function get_road that returns a mutable reference:</p>
<pre><code>fn get_road(&amp;mut self,  n: Vertex) -&gt; &amp;mut Road
{
  for road in &amp;mut self.roads
  {         
    if road.vertex == n { return road; }
  }
  panic!("Road not found");
}
</code></pre>
<p>Which is used like this:</p>
<pre><code>                  let road = table.get_road( n );
                  if k &lt; road.distance {
                    road.via_vertex = v;
                    road.distance = k;
                  }  
</code></pre>
<p>Besides, since we have a keyed set of values, it may be easier to use a <a href="https://doc.rust-lang.org/book/ch08-03-hash-maps.html" rel="nofollow noreferrer">Hash Map</a>.</p>
    </div>