<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The complexity can't be of \$O(N)\$ or even \$O(N/K)\$. My algorithm is of \$O(2^K)\$, which is huge in itself but still acceptable. Even if I pass N = Long.MAX_VALUE, I get immediate results. Though if K is greater, the code may take time or the code may break when LCM of all jump values exceeds <code>Long.MAX_VALUE</code>.</p>

<p>To explain it, let's take A = {4, 5, 6} and N = 20.</p>

<p>We can count uneaten leaves are {1, 2, 3, 7, 9, 11, 13, 14, 17, 19} = 10</p>

<p>How can we get this result without counting?</p>

<pre><code>N - (N / 4) - (N / 5) - (N / 6) + (N / 20) + (N / 12) + (N / 30) - N / 60
= 20 - 5 - 4 - 3 + 1 + 1 + 0 - 0 = 20 - 12 + 2 = 10
</code></pre>

<p><a href="http://deepakmishra117.blogspot.com/2017/09/caterpillar-uneaten-leaves-problem.html" rel="nofollow noreferrer">Caterpillar Uneaten Leaves Problem</a></p>
    </div>