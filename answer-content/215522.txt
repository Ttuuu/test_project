<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Overview</h2>

<ul>
<li>You can still leak the pointer from the constructor. </li>
<li>You can crash the program when a <code>T</code> destructor safely throws.</li>
<li>You ahve some bugs around reset.</li>
</ul>

<h2>Code Review</h2>

<p>My biggist issue is here:</p>

<pre><code>  constexpr explicit shared_ptr(T* ptr) {                  // constructor
    ptr_ = ptr;
    ref_count_ = new int{1};
  }
</code></pre>

<p>The problem is that <code>new</code> can throw. If it throws during a constructor then the destructor is never run. and thus you will leak <code>ptr</code>. The whole point of the class is to prevent leaking so you need to think about this situation.</p>

<p>The function <code>decrement_ref_count_and_delete_if_needed()</code> is called from several function that are marked as <code>noexcept</code>. So this function should also be <code>noexcept</code> or some of your <code>noexcept</code> functions should not be marked <code>noexcept</code>. </p>

<p>In this function you have to either make a concerted effort to make sure no exceptions propagate or that you don't affect the state of your object if it does throw.</p>

<p>The problem is this line:</p>

<pre><code>          delete ptr_;
</code></pre>

<p>Here <code>ptr_</code> is of type <code>T</code>. You don't know what type <code>T</code> and thus you can not guarantee that it does not throw.</p>

<p>The <code>reset()</code> is broken.</p>

<pre><code>  void reset() noexcept {
    decrement_ref_count_and_delete_if_needed();
  }
</code></pre>

<p>If I reset a shared pointer then it should be <code>nullptr</code> inside. This function does not set this object to <code>nullptr</code> (unless it is the only pointer to the object).</p>

<p>The <code>reset(T* ptr)</code> is also broken.</p>

<pre><code>  void reset(T* ptr) {
    decrement_ref_count_and_delete_if_needed();   // decrement ref count
                                                  // but if this was not the
                                                  // only pointer to the object
                                                  // then these value are still
                                                  // pointing at the old values.


    ptr_ = ptr;                                   // Overwrite the pointer OK


    if (!ref_count_) {                            // THIS IS WRONG.
                                                  // If you have a pointer to a count
                                                  // This count belongs to the other
                                                  // pointer you were previously
                                                  // countint for.


      ref_count_ = new int{1};                    // BASICALLY THIS LINE SHOULD
                                                  // ALWAYS BE USED.
    }
    *ref_count_ = 1;                             
  }
</code></pre>

<h2>Further Reading</h2>

<p>I wrote some articles around writting smart pointer you may find useful:</p>

<p><a href="https://lokiastari.com/blog/2014/12/30/c-plus-plus-by-example-smart-pointer/index.html" rel="nofollow noreferrer">Smart-Pointer - Unique Pointer</a><br>
<a href="https://lokiastari.com/blog/2015/01/15/c-plus-plus-by-example-smart-pointer-part-ii/index.html" rel="nofollow noreferrer">Smart-Pointer - Shared Pointer</a><br>
<a href="https://lokiastari.com/blog/2015/01/23/c-plus-plus-by-example-smart-pointer-part-iii/index.html" rel="nofollow noreferrer">Smart-Pointer - Constructors</a></p>
    </div>