<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There are two basic ways to solve this type of problem.  One is having to do the rotation in place, where you can't allocate additional storage for a copy of the array.  This uses less memory but takes longer, since the rotations have to go by small increments (usually 1, since that is easiest to implement).  The other way is to do the rotation into a copy.  This has the advantage of being faster but can take additional memory.  Your implementation is a hybrid of both.</p>

<p>Don't write <a href="https://stackoverflow.com/questions/1452721/why-is-using-namespace-std-considered-bad-practice"><code>using namespace std;</code></a>.</p>

<p>You're passing all your vectors by value, which will result in copies being made.  Since you're making a new vector to store the rotated vector in, you can pass them by <code>const &amp;</code>.  For example,</p>

<pre><code>std::vector&lt;int&gt; rotate(const std::vector&lt;int&gt; &amp;myVector, int direction);
</code></pre>

<p><code>print</code> can take advantage of range based for loops:</p>

<pre><code>void print(const vector&lt;int&gt; &amp;rotatedVector) {
    for (int v: rotatedVector){
        std::cout &lt;&lt; v &lt;&lt; '\n';
    }
}
</code></pre>

<p>This also avoids using <code>endl</code>, since that will do a flush which can greatly slow the rate output is displayed.</p>

<p>Your two parameter <code>rotate</code> function can rotate by more than one element at a time.  You can combine the two <code>rotate</code> functions into one, with an offset of <code>-direction * count</code> instead of <code>-direction</code>.  (With appropriate code to precalculate that value and a check so that the result is not larger than <code>-length</code> to avoid having a negative number on the left of <code>%</code>.)</p>
    </div>