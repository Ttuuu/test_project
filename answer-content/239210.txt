<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Answers to Specific Questions</h2>
<blockquote>
<p>There were some functions that weren't part of the "calculator". So I didn't define them in the header file. Is this bad practice or good practice?</p>
</blockquote>
<p>It is sometimes necessary to keep some things private, these functions don't need a prototype in the header file.</p>
<blockquote>
<p>I'm fairly new to exception handling; Did do it correctly in my code?</p>
</blockquote>
<p>The problem with your exception handling is that you are returning the <code>error,what()</code> value as a successful <code>word</code> in at least one case. How does the outer program know that this is an error and stops the processing. It is possible that they try{} catch{} implementation is at a too low level and may need to be at a higher level in the programming so that the program resets and doesn't try to process the string.</p>
<h2>General Observations</h2>
<p>One thing to always keep in mind when designing and writing software is maintainability. Functionality always grows as a program matures and this means that there are changes that must be made. You may win the lottery or inherit a lot of money so you may not be the one maintaining the code. This code will not be easy to modify by other people.</p>
<p>It also seems that you may have missed some of the suggestions that EmilyL made (make sure your code is working properly).</p>
<h2>Separate Functionality</h2>
<p>There are 2 sets of functionality here, parsing the expressions and performing the calculations, split the functionality so that first the input is entirely parsed, and then calculate the value if the expression is legal, don't try to do everything at once. This will simplify writing and debugging the code. Build a parse tree of operators and operands and then process the parse tree separately. There is really no need to convert to Reverse Polish Notation internally.</p>
<p>Quite possibly there should be 2 classes used by the program, a parser and then a calculator. The parsing algorithm and the calculating algorithm should be in separate source files with separate header files.</p>
<h2>Complexity</h2>
<p>The function <code>std::string toRPN(const std::string &amp;expression)</code> is far too complex (does too much in one function) and should have blocks of code broken out into more functions. In the dinosaur age of computing, functions that were more than one page long (about 60 lines) were considered too long to be understandable. In the modern age, any function that does not fit on a screen is too long.</p>
<p>There is also a programming principle called the <a href="https://en.wikipedia.org/wiki/Single_responsibility_principle" rel="nofollow noreferrer">Single Responsibility Principle</a> that applies here. The Single Responsibility Principle states:</p>
<blockquote>
<p>that every module, class, or function should have responsibility over a single part of the functionality provided by the software, and that responsibility should be entirely encapsulated by that module, class or function.</p>
</blockquote>
<h1>Let the Compiler do the Optimization</h1>
<p>In the C++ language the keyword <code>inline</code> is obsolete. Optimizing compilers do a much better job of deciding what functions should be inlined. There isn't any other use for the keyword <code>inline</code> other than optimization.</p>
<h1>Prefer Data Structures Over Long If Then Else If Statements</h1>
<p>In the function <code>void applyFunction(std::string &amp;function, NUMTYPE &amp;argument)</code> the very long <code>if then else if</code> statement might be better implemented using <code>std::map</code>. This would make adding or deleting operations much easier because the map is easier to add to. It would also greatly reduce the amount of code in this function.</p>
<h2>Use the Conditional (or Ternary) Operator</h2>
<p>The functions <code>inline bool isNumber(const char character)</code> <code>inline bool isLetter(const char character)</code> and <code>inline bool isOperator(const char character)</code> could all be much shorter, in the case of <code>isNumber()</code> and <code>isLeter()</code> they are one liners if you use the <a href="http://www.cplusplus.com/articles/1AUq5Di1/" rel="nofollow noreferrer">ternary operator</a>.</p>
<pre><code>inline bool isNumber(const char character)
{
    return ((character &gt;= '0' &amp;&amp; character &lt;= '9') || character == '.');
}

inline bool isLetter(const char character)
{
    return ((character &gt;= 'a' &amp;&amp; character &lt;= 'z') || (character &gt;= 'A' &amp;&amp; character &lt;= 'Z'));
}
</code></pre>
<p>If you include <code>&lt;cctype&gt;</code> this becomes even simpler, <code>isLetter()</code> can simply be replaced by <code>isalpha()</code> and <code>isNumber()</code> can be simplified with</p>
<pre><code>inline bool isNumber(const char character)
{
    return (isdigit(character) || character == '.');
}
</code></pre>
<p>The function <code>inline bool isOperator(const char character)</code> is easier to maintain if it written in the following manner.</p>
<pre><code>bool isOperator(const char character)
{
    std::vector&lt;char&gt;operators = {'+', '-', '*', '/', '&amp;', '^', '(', ')'};
    for (char m_operator: operators)
    {
        if (m_operator == character)
        {
            return true;
        }
        return false;
    }
}
</code></pre>
    </div>