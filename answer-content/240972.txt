<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your constructor has</p>

<pre><code>constructor({ play1, play2, rules, messages }) {
  this.play1 = play1;
  this.play2 = play2;
  this.rules = rules;
  this.messages = messages;
}
</code></pre>

<p>You may as well <code>Object.assign</code> the parameter to the instance instead:</p>

<pre><code>constructor(config) {
  Object.assign(this, config);
}
</code></pre>

<p><code>pattern</code> is a slightly odd name for what it represents here - the usual English word for one of the clubs, diamonds, etc, is <strong>suit</strong>. <code>rule</code> is a bit strange as well - a rule usually refers to the process by which a game is played (eg "Hands consist of 6 cards" or "The player with the best hand wins"). To describe the different possible winning combinations and their ranks, I'd use the word <code>handRanks</code> <a href="https://en.wikipedia.org/wiki/List_of_poker_hands" rel="nofollow noreferrer">or something similar</a>. <code>play1</code> and <code>play2</code> aren't great descriptors either - these represent the cards held in each player's hand, so maybe use <code>player1Cards</code> or <code>player1Hand</code>.</p>

<p>With regards to the <code>play()</code> method, when you want to find an item in an array which fulfills a condition, it would be more appropriate to use <code>.find</code>, rather than a <code>for</code> loop - <code>find</code> more clearly indicates what the intention of the loop is, and is more concise. You also need to set the rank to <code>Infinity</code> if no handRanks pass - why not integrate this <code>Infinity</code> into the <code>handRanks</code> array itself? You're also writing the looping code twice - you can make it more DRY by putting it into a function, and calling that function twice instead.</p>

<pre><code>new Card({ suit: "spade", number: 1 }),  // &lt;-- Suit
</code></pre>

<pre><code>new HandRank({  // &lt;-- HandRank
  description: "Six Cards of the same suit",  // &lt;-- Suit
  rank: 1,
  validator: cards =&gt; {
    return hasSameSuit(cards, 6);  // &lt;-- hasSameSuit, not hasSamePattern
  }
}),
new HandRank({  // &lt;-- HandRank
  description: "Nothing special",
  rank: Infinity,                 // &lt;-- add this whole new HandRank
  validator: cards =&gt; true,
}),
</code></pre>

<pre><code>getRank(cards) {
  return this.handRanks.find(({ validator }) =&gt; validator(cards)).rank; // &lt;-- this.handRanks
}
play() {
  const rankOfP1 = this.getRank(this.player1Cards); //  &lt;-- player1Cards
  const rankOfP2 = this.getRank(this.player2Cards); //  &lt;-- player2Cards
  return rankOfP1 === rankOfP2
    ? this.messages.tie
    : rankOfP1 &lt; rankOfP2
      ? this.messages.win.player1
      : this.messages.win.player2;
}
</code></pre>

<p>One of the benefits of using arrow functions is that if the function contains only a single expression which is immediately returned, you can omit the <code>{</code> <code>}</code> brackets and the <code>return</code> keyword, if you want to make things concise, eg for the <code>hasSameSuit</code> test above:</p>

<pre><code>validator: cards =&gt; hasSameSuit(cards, 6),
</code></pre>

<p>If you want to find if any item in an array <em>passes</em> a test, but you don't care about <em>which</em> item passes the test, you should use <code>.some</code>, not <code>.find</code>. (<code>.some</code> returns a boolean indicating whether any passed, <code>.find</code> returns the found item) For the <code>hasSamePattern</code> (or <code>hasSameSuit</code>) method, use:</p>

<pre><code>return Object.values(patterns).some(num =&gt; num &gt;= threshold);
</code></pre>

<p>Your <code>hasConsecutiveNums</code> method has the bug <a href="https://codereview.stackexchange.com/questions/240914/write-a-function-to-determine-whether-an-array-contains-consecutive-numbers-for/240918#comment472670_240914">mentioned in the comments previously</a> - a hand of <code>[1, 2, 2, 3]</code> will not pass a 3-consecutive-number test because the sorted array will contain 2 twice, failing <code>if (prevNum + 1 === num) {</code>. De-duplicate the numbers with a Set first.</p>

<pre><code>const nums = [...new Set(cards.map(card =&gt; card.number).sort((a, b) =&gt; a - b))];
</code></pre>

<blockquote>
  <p>I wonder if anyone knows how to rewrite the game in functional programming style.</p>
</blockquote>

<p>Javascript isn't <em>entirely</em> suited to completely functional programming either, though it can get most of the way there. To start with, make your functions pure, and avoid side-effects and mutations. For example, assigning to a property of the instance with <code>this.play1 = play1;</code> (or <code>this.player1Cards = player1Cards;</code>) is a mutation. None of your code <em>fundamentally</em> requires anything non-functional (except the <code>console.log</code> at the very end, which is unavoidable), so it should be pretty easy to convert - rather than assigning to properties, just keep the variables in a closure, and return a function for the <code>play</code> method, eg:</p>

<pre><code>const makeGame = ({ player1Cards, player2Cards, handRanks, messages }) =&gt; () =&gt; {
  // getRank is now a standalone function which takes a handRanks parameter
  const rankOfP1 = getRank(player1Cards, handRanks);
  const rankOfP2 = getRank(player2Cards, handRanks);
  return rankOfP1 === rankOfP2
    ? messages.tie
    : rankOfP1 &lt; rankOfP2
      ? messages.win.player1
      : messages.win.player2;
};
</code></pre>

<pre><code>const play = makeGame({ ... });
console.log(play());
</code></pre>
    </div>