<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>My review is focused about simplification of your code using java <a href="https://docs.oracle.com/javase/8/docs/api/java/util/stream/DoubleStream.html" rel="nofollow noreferrer">DoubleStream</a> and <a href="https://docs.oracle.com/javase/8/docs/api/java/util/DoubleSummaryStatistics.html" rel="nofollow noreferrer">DoubleSummaryStatistics</a> classes; I found some repeated operation in your code that can be avoided to slightly increase efficiency.
You have the following methods in your code:</p>

<blockquote>
<pre><code>public static double sum(double[] x) {
    double s = 0;
    for (int i = 0; i &lt; x.length; i++)
        s += x[i];
    return s;
}
    // Mean of an array
public static double mean(double[] x) {
    return sum(x)/((double) x.length);
}
</code></pre>
</blockquote>

<p>These methods can be erased because already included in <code>DoubleStream</code> and <code>DoubleSummaryStatistics</code>. You have the following methods in your code:</p>

<blockquote>
<pre><code>// Compute B-bar_i
public static double bMean(double[] x, int i, int L) {
    return(mean(B(x, i, L)));
}
// Compute MBB variance
public static double mbbVariance(double[] x, int L, double alpha) {
    int n = x.length;
    double mbbMean = mbbMu(x, L);
    double[] diffs = new double[n - L + 1];
    for (int i = 0; i &lt; n - L + 1; i++) {
        diffs[i] = Math.pow(L, alpha) * Math.pow(bMean(x, i + 1, L) - mbbMean, 2);
    }
    // Compute the summation
    double varSum = sum(diffs);
    double out = varSum / ((double) n - L + 1);
    return out;
}
// Compute NBB mean
public static double nbbMu(double[] x, int L) {
    int n = x.length;
    int b = (int) Math.floor(((double) n) / L);
    double[] blockAvgs = new double[b];
    for (int i = 0; i &lt; b; i++)
        blockAvgs[i] = bMean(x, 1 + ((i + 1) - 1) * L, L);
    return mean(blockAvgs);
}
// Compute NBB variance
public static double nbbVariance(double[] x, int L, double alpha) {
    int n = x.length;
    int b = (int) Math.floor(((double) n) / L);
    double nbbMean = nbbMu(x, L);
    double[] diffs = new double[b];
    for (int i = 0; i &lt; b; i++)
        diffs[i] = Math.pow(bMean(x, 1 + ((i + 1) - 1) * L, L) - nbbMean, 2);
    double varSum = Math.pow((double) L, alpha) * sum(diffs) / ((double) b);
    return varSum;
}
</code></pre>
</blockquote>

<p>They can be rewritten in the following way:</p>

<pre><code>// Compute B-bar_i
public static double bMean(double[] x, int i, int l) {
    return DoubleStream.of(b(x, i, l)).average().orElse(0);
}

// Compute MBB mean
public static double mbbMu(double[] x, int l) {
    DoubleSummaryStatistics statistics = new DoubleSummaryStatistics();

    for (int i = 0; i &lt; x.length - l + 1; i++) {
        statistics.accept(bMean(x, i + 1, l));
    }

    return statistics.getAverage();
}

// Compute MBB variance
public static double mbbVariance(double[] x, int L, double alpha) {
    double mbbMean = mbbMu(x, L);
    DoubleSummaryStatistics statistics = new DoubleSummaryStatistics();

    for (int i = 0; i &lt; x.length - L + 1; i++) {
        statistics.accept(Math.pow(L, alpha) * Math.pow(bMean(x, i + 1, L) - mbbMean, 2));
    }

    return statistics.getAverage();
}

// Compute NBB mean
public static double nbbMu(double[] x, int L) {
    int b = (int) Math.floor(((double) x.length) / L);
    DoubleSummaryStatistics statistics = new DoubleSummaryStatistics();

    for (int i = 0; i &lt; b; i++) {
        statistics.accept(bMean(x, 1 + i * L, L)); 
    }

    return statistics.getAverage();
}

// Compute NBB variance
public static double nbbVariance(double[] x, int L, double alpha) {     
    int b = (int) Math.floor(((double) x.length) / L);
    double nbbMean = nbbMu(x, L);
    DoubleSummaryStatistics statistics = new DoubleSummaryStatistics();

    for (int i = 0; i &lt; b; i++) {
        statistics.accept(Math.pow(bMean(x, 1 + i * L, L) - nbbMean, 2));
    }

    return Math.pow((double) L, alpha) * statistics.getAverage();
}
</code></pre>

<p>Another method rewritten using a <code>DoubleStream</code>:</p>

<pre><code>// Row means
public static double[] rowMeans(double[][] x, int nrows, int ncols) {
    double[] means = new double[nrows];
    for (int i = 0; i &lt; nrows; i++) {
        double[] row = new double[ncols];
        for (int j = 0; j &lt; ncols; j++)
            row[j] = x[i][j];
        means[i] = DoubleStream.of(row).average().orElse(0);
    }
    return means;
}
</code></pre>

<p>In your main code you can calculate one time the <code>factorial</code> of <code>p</code> and pass it for the consecutive calls of your method h, here your version of the method not passing the factorial:</p>

<blockquote>
<pre><code>// Hermite polynomial
public static double H(double x, int p) {
    int upperIdx = (int) Math.floor(((double) p) / 2);
    double out = 0;
    for (int i = 0; i &lt; upperIdx + 1; i++) {
        out += Math.pow(-1, i) * Math.pow(x, p - (2 * i)) / 
        ((factorial(i) * factorial(p - (2 * i))) * Math.pow(2, i));
    }
    out *= factorial(p);
    return out;
}
</code></pre>
</blockquote>

<p>I added the new parameter <code>factorialP</code> to this method, probably it will be an increment of performance:</p>

<pre><code>// Hermite polynomial
public static double h(double x, int p, int factorialP) {
    final int upperIdx = (int) Math.floor((double)p / 2);
    int out = 0;

    for (int i = 0; i &lt; upperIdx + 1; i++) {
        out += Math.pow(-1, i) * Math.pow(x, p) / 
        ((factorial(i) * factorial(p)) * Math.pow(2, i));
        p -= 2;
    }

    return out * factorialP;

}

//later in your main method
int factorialP = factorial(p);
for (int i = 0; i &lt; rows; i++) {
    for (int j = 0; j &lt; cols; j++) {
        timeSeries[i][j] = h(scnr.nextDouble(), p, factorialP);
    }
    scnr.next(); // skip null terminator
}
</code></pre>

<p>I think is possible to parallelize operations because you are doing sum of elements and calculating average of them, but I have no further knowledge or experience about this argument to give an answer.</p>
    </div>