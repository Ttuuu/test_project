<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Two big suggestions:</p>

<ol>
<li>Give things meaningful names.</li>
<li>Give things meaningful types.</li>
</ol>

<p>Looking at your <code>word_filter</code> function:</p>

<pre><code>def word_filter(self, check, tuple, list, sentence_type, method, parameters):
    # Bad Code Below:
    # This is an absolute disaster.
    # At the momment it seems to serve the purpose but
    # i know it will cause a number of issues

    # tuple = subj=[0],verb=[1],noun=[2],skill=[3],weapon=[4],action=[5],direction=[6],number=[7]
    # Checks = ([0]= checks, [1] = Methods, [2] = Parameters)
    # sentence_type = type of sentence being handled

    #### These will hold multiple values depending on requirements. ######

    # list = stores accepted words   [list[0],list[1],list[2]

    # method =  function which will be executed   [method[0],method[1],method[2]]

    # parameters =  parameters to be supplied    [paramters[0],paramters[1],paramters[2]]
</code></pre>

<p>The code itself isn't the disaster here, it's the interface to it.  I don't know what the types of any of these arguments are, even after reading the comments.  More to the point, I don't know what this function is even supposed to be doing.  The name suggests that it "filters" something, but it doesn't return anything, which is normally what a filter would do.  Instead it invokes a "method" function, but I don't know what that function itself does, or how the method relates to the data passed in.  According to the docstring, the function "serves the purpose" (what purpose?) and the inputs "depend on requirements" (what requirements?).</p>

<p>I would try to suggest a way to add types to make this more comprehensible, but since there's no documentation on the function's purpose, and since nothing within the code has a meaningful name (you named one of your inputs <code>tuple</code> and another one <code>list</code>), it's hard to even reverse-engineer what the code is supposed to do.  So maybe I can start there by just destructuring the inputs based on your comments.</p>

<p>I'm going to change the signature to:</p>

<pre><code>def word_filter(self, check, gross_tuple, accepted, sentence_type, method, parameters):
</code></pre>

<p>because <code>tuple</code> and <code>list</code> are really bad names for variables (they match the names of builtin functions).  I honestly don't know what <code>tuple</code> even is so I just renamed it <code>gross_tuple</code> for now.  Your <code>list</code> is "accepted words" according to the comments so I renamed it "accepted".</p>

<p>Now I can do some simple find+replace to make the body a little more legible:</p>

<pre><code>subject, verb, noun, skill, weapon, action, direction, number = gross_tuple
checks, methods, params = check[0], check[1], check[2]

exit_code = -1  # control when the program exits.

access = -1
# access will contol what values are being used in each check.
# first check will use all values stored at [0] then second check [1] and so on.

while exit_code != (checks - 1):  # loop will exit once all checks are performed or when a match is found
    access = access + 1  #
    exit_code = exit_code + 1
    if methods &gt; 0 and params == 0:  # Takes multiple Methods and no parameters
        if sentence_type == 'sentence':
            if subject == 'player':
                if (verb in accepted[access]) and (noun in accepted[access]):
                    (method[access])()
                    break
            else:
                if (subject in accepted[access]) and (verb in accepted[access]):
                    (method[access])()
                    break
        elif sentence_type == 'simple':
            if subject == 'player':
                if (verb in accepted[access]) and (noun in accepted[access]):
                    (method[access])()
                    break
                elif verb in accepted[access]:
                    (method[access])()
                    break
            else:
                if (subject in accepted[access]) and (verb in accepted[access]):
                    (method)[access]()
                    break
                elif (verb in accepted[access]) and (noun in accepted[access]):
                    (method[access])()
                    break
    elif methods == 1 and params &gt; 0:  # Takes one Method and Multiple Parameters
        if sentence_type == 'skill':
            if subject == 'player':
                if (verb in accepted[access]) and (skill in accepted[access]):
                    method(parameters[access])
                    break
                elif skill in accepted[access]:
                    method(parameters[access])
                    break
            else:
                if (subject in accepted[access]) and (skill in accepted[access]):
                    method(parameters[access])
                    break
                elif (verb in accepted[access]) and (skill in accepted[access]):
                    method(parameters[access])
        elif sentence_type == 'simple':
            if subject == 'player':
                if (verb in accepted[access]) and (noun in accepted[access]):
                    method(parameters[access])
                    break
                elif verb in accepted[access]:
                    method(parameters[access])
                    break
            else:
                if (subject in accepted[access]) and (verb in accepted[access]):
                    method(parameters[access])
                    break
                elif (verb in accepted[access]) and (noun in accepted[access]):
                    method(parameters[access])
                    break
    elif methods &gt; 1 and params &gt; 1:  # Takes Multiple Methods and Multiple Parameters
        if sentence_type == 'sentence':
            if subject == 'player':
                if verb and noun in accepted[access]:
                    method(parameters[access])
                    break
                else:
                    if (subject in accepted[access]) and verb in accepted[access]:
                        (method[access])(parameters[access])
                        break
        elif sentence_type == 'simple':
            if subject == 'player':
                if (verb in accepted[access]) and (noun in accepted[access]):
                    (method[access])(parameters[access])
                    break
                elif verb in accepted[access]:
                    (method[access])(parameters[access])
                    break
                else:
                    if (subject in accepted[access]) and (verb in accepted[access]):
                        (method[access])(parameters[access])
                        break
                    elif (verb in accepted[access]) and (noun in accepted[access]):
                        (method[access])(parameters[access])
                        break
        elif sentence_type == 'action':
            if subject == 'player':
                if action in accepted[access]:
                    (method[access])(parameters[access])
                    break
</code></pre>

<p>That's about the point at which I can't figure out anything else to do with this code, because I don't know what <code>access</code> is or what <code>method</code> might be.  My hunch is that you want to break this up into different functions to handle the different sentence types.</p>

<p>My suggestion for meaningful typing would look something like:</p>

<pre><code>from enum import Enum, auto
from typing import Callable, List, NewType, Set, Tuple

class SentenceType(Enum):
    action = auto()
    sentence = auto()
    simple = auto()
    skill = auto()

Word = NewType("Word", str)
Subject = NewType("Subject", Word)
Verb = NewType("Verb", Word)
Noun = NewType("Noun", Word)
Skill = NewType("Skill", Word)
Weapon = NewType("Weapon", Word)
Action = NewType("Action", Word)
Direction = NewType("Direction", Word)


def word_filter(
        check: List[int], 
        gross_tuple: Tuple[Subject, Verb, Noun, Skill, Weapon, Action, Direction], 
        accepted: List[Set[Word]], 
        sentence_type: SentenceType, 
        method: Callable[[...], None], 
        parameters: List[...]
):
</code></pre>
    </div>