<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>why not using <code>Replace</code> directly ? not sure why no one suggested though. It would be much faster and simpler. </p>

<pre><code>public static IEnumerable&lt;string&gt; ReplaceSpecialCharacters(IEnumerable&lt;string&gt; lines)
{
    if(lines == null) { throw new ArgumentNullException(nameof(lines)); }

    StringBuilder sb = new StringBuilder();

    foreach(var line in lines)
    {   
        sb.Clear();
        sb.Append(line);

        foreach(var character in Chars)
        {
           sb.Replace(character.Key, character.Value);       
        }

        yield return sb.ToString();
    }
}
</code></pre>

<p>using <code>Replace</code> would replace the old character with the new one, if there is no match, it would return the original string. So, this would eliminate the need of checking the key, as the <code>Replace</code> will handle that for you. </p>

<p>Using <code>StringBuilder</code> would minimize the string allocation overhead, especially with large amount of <code>string</code>s. Also, it would give you more performance.</p>

<p>since we used <code>yield return</code> we also need to clear the stringbuilder then append the new line <code>sb.Clear();</code></p>

<p>Finally, return the results as <code>IEnumerable&lt;string&gt;</code>, this would give you more compatibility with other collections. So, instead of just return or accept <code>List&lt;string&gt;</code> the method can accept any type of collection that implements <code>IEnumerable&lt;string&gt;</code> such as <code>List&lt;string&gt;</code> , <code>Collection&lt;string&gt;</code>, <code>string[]</code> and many others. </p>
    </div>