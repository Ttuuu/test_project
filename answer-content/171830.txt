<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Overall, the code looks clean and readable, so here are some basics nits and tips for the code snippet in your question.</p>

<ol>
<li><p>Don't create new variables for everything. Sometimes you don't need them.</p>

<pre><code>total_points = 0
total_points += _calc_set_points(rolls_to_scoring_counts)
total_points += _calc_nonset_points(rolls_to_scoring_counts)
return total_points
</code></pre>

<p>Why not just do this?</p>

<pre><code>return _calc_set_points(rolls_to_scoring_counts) + _calc_nonset_points(rolls_to_scoring_counts)
</code></pre></li>
<li><p>While we're addressing this function, lets discuss code convention. You're using lower snake case, and your naming conventions are consistent, which is good (I suggest taking a look at the <a href="http://pep8.org/" rel="nofollow noreferrer">PEP8</a> style guide for a concrete set of rules around Pythonic code). However, some variable names are a bit too long. Descriptive variable names are good, but providing redundant information is not.</p>

<pre><code>def score(dice_rolls):
    if not dice_rolls:
        return 0

    rolls_to_counts = collections.Counter(dice_rolls)
    rolls_to_scoring_counts = _get_rolls_to_scoring_counts(rolls_to_counts)

    total_points = 0
    total_points += _calc_set_points(rolls_to_scoring_counts)
    total_points += _calc_nonset_points(rolls_to_scoring_counts)
    return total_points
</code></pre>

<p>Why not rewrite it this way?</p>

<pre><code>def score(rolls):
    if not rolls:
        return 0
    counts = collections.Counter(rolls)
    scoring_counts = _get_rolls_to_scoring_counts(counts)
    return _calc_set_points(scoring_counts) + _calc_nonset_points(scoring_counts)
</code></pre>

<p>This is much more concise and conveys the same amount of information.</p></li>
<li><p>Underscore prefixed function names.</p>

<pre><code>def _get_rolls_to_scoring_counts(rolls_to_counts):
</code></pre>

<p>Prefixing with an underscore is generally a developer convention in Python indicating that <a href="https://stackoverflow.com/questions/1301346/what-is-the-meaning-of-a-single-and-a-double-underscore-before-an-object-name">the method is private</a>. Given the context of your function, I don't think you intend for your code to be a module whose functions are imported and used elsewhere. Having the underscore prefix seems unnecessary to me.</p></li>
<li><p>Too much abstraction?</p>

<pre><code>def _roll_has_a_set(roll_count):
    return roll_count &gt;= SET
</code></pre>

<p>Defining this seems overkill to me, since you can do this operation in your code.</p></li>
<li><p>Constants</p>

<pre><code>ROLL_TO_POINTS = {
    1: 100,
    2: 0,
    3: 0,
    4: 0,
    5: 50,
    6: 0
}
</code></pre>

<p>Extract this to the top of the file as a global constant, like your <code>SET</code> variable.</p></li>
</ol>

<p><strike> 
6. Unneeded import.</strike></p>

<pre><code>    return functools.reduce(_accumlate_nonset_points, rolls_to_scoring_counts, 0)
</code></pre>

<p>Python has a built-in <a href="https://docs.python.org/2/library/functions.html#reduce" rel="nofollow noreferrer"><code>reduce()</code></a> function.
</p>

<p>These are just some basic nits and optimizations. Other than that, I don't see any major glaring errors. Happy coding!</p>

<p>Python Experience: <code>+100</code></p>

<p>LEVEL UP!</p>
    </div>