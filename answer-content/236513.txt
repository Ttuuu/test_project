<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>PEP-8</h1>

<p>As commented by greybeard, the PEP-8 guidelines for Python suggest using <code>CapWords</code> for class names, and <code>snake_case</code> for variables and method names.  So <code>postOrderTraversal</code> should be <code>post_order_traversal</code></p>

<h1>Type Hints</h1>

<p>Your code is incomplete, which makes it more difficult to review.  Clearly, you have defined the <code>TreeNode</code> elsewhere, or your code would not run.  You should include that code in your question post.  (But don’t change it now that there have been answers posted to your question; your change would just be rolled back.  In future questions, include all referenced code, including import statements and type definitions.)</p>

<p>You are only half using type hints.  You indicate that <code>postOrderTraversal</code> takes a <code>TreeNode</code> as an input parameter, but not specified what it returns.  It doesn’t return anything, which should be indicated with <code>-&gt; None</code>.  Eg)</p>

<pre><code>def postOrderTraversal(root: TreeNode) -&gt; None:
    # remainder of function
</code></pre>

<h1>Documentation</h1>

<p>You should help future users of your function understand what your function does and how to use it properly, without needing to read the code, by providing a <code>"""docstring"""</code> at the start of the function.  A user may then type <code>help(postOrderTraversal)</code>, which would print out that information.  </p>

<p>You should help future maintainers of the code (including yourself) understand how the code works by including comments in the code, to describe the overall algorithm, and any non-obvious aspects.  It is clear Charles Merriam did not understand the point of checking if <code>popped == stack[-1].right</code>, so that could definitely stand a comment or two.</p>

<p>Please note the distinction between “users of” and “maintainers of”.  A user needs a docstring describing what the function does, what it needs and what it returns.  A maintainer needs comments in the code describing how the code functions.</p>

<h1>Iterative Algorithm</h1>

<p>When you first visit a node, you push it on the stack, so you can return to it a second time, and then proceed to walk down the left branch.</p>

<p>When you return to the node, you leave it on the stack, so you can return to it a third time, and then you proceed to walk down the right branch.</p>

<p>When you again return to the node the third time, you finally “process” the node ... by popping it off the stack and printing its value.</p>

<p>You maintain a state machine using <code>curr</code>, <code>popped</code> and <code>stack[-1].right</code> to determine whether this is the first, second, or third visit to the node, which is somewhat complicated, despite you and your wife finding it “<em>easy to grasp</em>.”</p>

<p>Instead, consider pushing both the node and the state information onto the stack.</p>

<pre><code>    stack.append((curr, False))
    curr = curr.left
</code></pre>

<p>And pop both pieces off the stack:</p>

<pre><code>    curr, visited_right = stack.pop()
    if visited_right:
        print(curr.val)
        curr = None
    else:
        stack.append((curr, True))
        curr = curr.right
</code></pre>

<p>With this change, you no longer need to maintain and check <code>popped</code> against <code>stack[-1].right</code>.  The state is stored along with the node on the stack.</p>
    </div>