<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Dogbert, I have some comments to add to those from other commenters (use of free, naming)</p>

<ul>
<li>minor quibbles: put the opening { of a function on a new line, column 0; put a space after keywords such as for, while, if, etc; make functions static where possible; make parameters const where possible; avoid multiple statements on the same line.</li>
<li>negative numbers are not handled</li>
<li><p>your type <code>bi</code> uses an allocated integer array to store values in the range [0..9]. This seems wasteful.  A signed char would do.  Also, you have to allocate twice to create a <code>bi</code> when once would be preferable. Here I have rearranged the structure so that the array is at the end and can be expanded by allocating more memory that is needed just for the struct:</p>

<pre><code>typedef struct {
    size_t size;
    signed char data[1];  // you can also use just data[] and adjust calloc call
} Bigint;

static Bigint* bigint_new(size_t size) 
{
    Bigint *b = calloc(sizeof(*b) + size - 1, 1); /* calloc zeroes allocated memory */
    if (b) {
        b-&gt;size = size;
    }
    return b;
}
</code></pre></li>
<li><p>you have no error checking in your input routine - ie. there is no check for characters not in the range '0'..'9'.</p></li>
<li><p>skipping leading zeroes could be better done with <code>strspn</code>. Also, I think you should store your values in the opposite order. This simplifies the loops in add and multiply (see below), so <code>bi_from_string</code> becomes this (note also the const)</p>

<pre><code>static Bigint* bi_from_string(const char *s)
{
    s += strspn(s, "0");
    size_t size = strlen(s);
    int min = (size == 0) ? 1 : 0;

    Bigint *b = bi_new(size + min);
    for (int i = 0; i &lt; size; ++i) {
        b-&gt;data[size - i - 1] = s[i] - '0';
    }
    return b;
}
</code></pre></li>
<li><p>your <code>bi_add</code> is a mess. You have too many loop variables and they count downward, which is normally a bad idea.  By reversing the storage order of the data in the <code>bi</code> type you can also reverse the loops and avoid so many loop variables. Notice how much simpler the loop is now</p>

<pre><code>static Bigint* bi_add(const Bigint *a, const Bigint *b)
{
    size_t max = (a-&gt;size &gt; b-&gt;size ? a-&gt;size : b-&gt;size);
    Bigint *c = bi_new(max + 1);

    int carry = 0;
    int i;
    for (i=0; i&lt;max; ++i) {
        int tmp = carry;

        if (i &lt; a-&gt;size) {
            tmp += a-&gt;data[i];
        }
        if (i &lt; b-&gt;size) {
            tmp += b-&gt;data[i];
        }
        carry = tmp / 10;
        c-&gt;data[i] = tmp % 10;
    }
    if (carry) {
        c-&gt;data[i] = 1;
    } else {
        c-&gt;size--; //extra space added for growth of value was not used
    }
    return c;
}
</code></pre></li>
<li><p>your <code>bi_multiply</code> is also rather messy. It suffers the same problems as <code>bi_add</code> but compounds this with a nested loop. Nested loops are sometimes necessary but more often than not can be usefullly split into two functions.  Here is an example of multiplying with two separate functions:</p>

<pre><code>static signed char* bi_multiply_by_n(const Bigint *a, int n, signed char *result)
{
    int carry = 0;
    for (int i=0; i&lt;a-&gt;size; ++i) {
        int tmp = carry + (a-&gt;data[i] * n) + *result;
        carry = tmp / 10;
        *result++ = tmp % 10;
    }
    if (carry) {
        *result++ = carry;
    }
    return result; // pointer to char beyond end of result
}

static Bigint* bi_multiply(const Bigint *a, const Bigint *b)
{
    size_t max = a-&gt;size + b-&gt;size;
    Bigint *c = bi_new(max);
    signed char *end;

    for (int i=0; i&lt;b-&gt;size; ++i) {
        end = bi_multiply_by_n(a, b-&gt;data[i], c-&gt;data + i);
    }
    c-&gt;size = end - c-&gt;data; // actual space used
    return c;
}
</code></pre></li>
</ul>

<p>Note that I tested these functions, so they should be ok.</p>
    </div>