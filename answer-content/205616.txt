<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your <code>Game</code> class might not need to be a class at all.  You create <code>self.board</code> in the <code>__init__()</code> method, and then only use it in the <code>play()</code> method.  Since <code>play()</code> doesn't return until the game is over, <code>board</code> could simply be a local variable, created at the beginning of the <code>play()</code> function.  If that is changed, then <code>Game</code> doesn't have any data - just methods - so doesn't need to be a class.</p>

<pre><code>point = tuple(map(int, line[1:].split(",")))
self.board.flag_square(point[0], point[1])
</code></pre>

<p>This code seems a little verbose.  You are creating a tuple to force the conversion of the return value of <code>map</code> into something you can directly use, from the mysterious <code>map object</code> is actually returns.  How about:</p>

<pre><code>row, col = map(int, line[1:].split(","))
self.board.flag_square(row, col)
</code></pre>

<p>This is a little clearer, bordering on self-documenting.  We expect exactly 2 values ... a <code>row</code> and a <code>col</code> value.  If the user types in "f 3,4,7", your code would muddle on using the 3,4 value, where as the new code will raise a <code>Value Error: too many values to unpack</code>, which your code would catch and prompt the user for better input.</p>

<hr>

<p>The <code>Square</code> class holds too much information.  While <code>mine</code>, <code>flag</code> and <code>clicked</code> all seem required, <code>board</code>, <code>row</code> and <code>col</code> are not necessary; adding them has actually complicated your code.  Your squares know where they are, so they can tell you who their neighbours are, as well has how many mines are around them.  But imagine if they didn't.  Not a problem: <code>Board.squares[row][col]</code> holds each square.  You just need to ask <code>Board</code> for the neighbours of <code>(row, col)</code> or the number of mine around <code>(row, col)</code>.  The code just needs to move from <code>Square</code> to <code>Board</code>, and as these are board-level operations, that makes sense.</p>

<p>How many times is <code>square.mine_neighbors()</code> called?  If you start the game clicking (3,4), each time you print the board, you will need to print the number of mines around (3,4), so after <code>n</code> turns, you've called it <code>n</code> times for that square.  But on the second turn, you'll have clicked another square, and will have called the function <code>n-1</code> times for that new square.  And <code>n-2</code> times for the third square that got clicked, and so on.  The result is you're calling <code>square.mine_neighbours()</code> <span class="math-container">\$O(n^2)\$</span> times.  The mines don't move; the number of neighbours never changes.  Perhaps you could store one additional piece of information in <code>Square</code> ... the number of neighbouring mines.  Compute that for the entire board at the start.</p>

<hr>

<p><code>Board.print_board_wrapper(self, print_hook)</code>.</p>

<p>This API requires the caller to pass in one of two functions, depending on whether the game is over or not.  The <code>Board</code> object itself has a <code>self.game_state</code> member which knows whether the game is over.  Why force the caller to provide the correct method?</p>

<pre><code>class Board:
    ...
    def print_board(self):
        if self.game_state in (GameState.start, GameState.on_going):
            print_hook = self.print_board_hook
        else:
            print_hook = self.print_board_end_hook
        self.print_board_wrapper(print_hook)
</code></pre>

<p>Now the caller can just call <code>print_board()</code>, and the correct board format will be used depending on state.</p>

<p>But wait!  Why two "hook" methods depending on the game state?  The <code>Board.print_board_hook</code> method knows the game state.  You could get rid of the two hook methods, and replace them with:</p>

<pre><code>    def print_square(self, square):
        """..."""

        if self.game_state in (GameState.win, GameState.lose) and square.mine:
            return " x "
        elif square.clicked:
            return " " + str(square.mine_neighbors()) + " "
        elif square.flag:
            return " f "
        return " . "
</code></pre>

<hr>

<p>Why does <code>Board</code> have a function to print the game board?  It doesn't do any other printing.  You could add a graphical UI to the program, and most of <code>Board</code> doesn't have to be changed.  The <code>Game</code> would need to be changed, of course, as well as these <code>Board.print_board_*</code> methods.</p>

<p>Perhaps the <code>print_board()</code> function should be moved into <code>Game</code>?  In fact, it looks like you intended this, but forgot.</p>

<pre><code>""" Data models for a minesweeper CLI game. """
</code></pre>

<p>(And "Data models" wouldn't have any user I/O methods)</p>

<hr>

<p>A simple mine placement algorithm:</p>

<pre><code>def _add_mines(self, mine_percentage):
    num_mines = self.rows * self.cols * mine_percentage // 100

    count = 0
    while count &lt; num_mines:
        row = random.randrange(self.rows)
        col = random.randrange(self.cols)
        if not self.squares[row][col].mine:
            self.squares[row][col].mine = True
            count += 1
</code></pre>

<p>But, how to ensure the user's starting location isn't a mine?  Easy.  Make it a mine to begin with.  Add all the other mines.  Then remove that initial mine.</p>

<pre><code>self.squares[row][col].mine = True
self._add_mines(mine_percentage)
self.squares[row][col].mine = False
</code></pre>

<p>As long as the mine percentage is not high, the number of iterations through the loop shouldn't be much larger than <code>num_mines</code>.  To handle larger mine percentages, a different strategy should be used:</p>

<ul>
<li>Create a list of all board locations</li>
<li>Remove the user's starting location</li>
<li>Shuffle the list</li>
<li>Add mines to the first <code>num_mines</code> locations in the list.</li>
</ul>

<p>Something like:</p>

<pre><code>locs = [(row, col) for row in range(self.rows) for col in range(self.cols)]
locs.remove((initial_row, initial_col))
random.shuffle(locs)
for row, col in locs[:num_mines]:
    self.squares[row][col].mine = True
</code></pre>

<hr>

<p>As you suspected, your <code>neighbors(self)</code> could be improved.  You don't need <code>itertools.product</code>, or <code>filter</code> or <code>lambda</code>, nor even the <code>__point_neighbors</code> helper function.  List comprehension with a double <code>for</code> loop can replace the <code>product</code> and <code>set</code> creation.  Just need a few <code>min</code>/<code>max</code> operations to ensure the loops stay within the confines of the board.  Assuming the code is moved to <code>class Board</code>:</p>

<pre><code>def neighbors(self, row, col):
    neighbor_set = { (r, c) for r in range(max(0, row-1), min(self.rows, row+2))
                            for c in range(max(0, col-1), min(self.cols, col+2)) }
    neighbor_set.remove((row, col))
    return neighbor_set
</code></pre>

<p>There is no need to turn the <code>set</code> into a <code>list</code>.</p>
    </div>