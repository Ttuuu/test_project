<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>General Stuff</h2>

<p>I would use a for-loop for <code>i</code>: with the while loop you've just ended up moving the <code>i++</code> far from the condition logic, which makes it that little bit harder to understand quickly. I'd also rename it to <code>time</code> or <code>t</code>: <code>i</code> is typical for indexing, which might give the wrong impression.</p>

<p>I don't really know C++, so I might be falling into a trap, but I would consider removing <code>range</code>'s parameterless constructor so that it's harder to misuse.</p>

<p>Your <code>celeb_density</code> method will crash violently if the <code>schedule</code> is empty. You should probably detect this case and fail in a helpful manner. <code>celeb_density</code> is not great name: it tells me nothing about what it does or what it returns.</p>

<p>Your <code>main</code> method (though I don't suppose you are too worried about this) doesn't perform any validation, so I can, for example, request a negative number of entries, and it will happily ask me to enter a start and end time before it crashes in <code>celeb_density</code>. It only prompts for a range once (which is confusing), and it doesn't complain if I enter a range where <code>start &gt; end</code>. <code>Range</code> could also throw if <code>start &gt; end</code>, which would ensure that the code producing the invalid input throws rather than algorithms producing meaningless results.</p>

<p>Your vector has a size type of <code>size_t</code>, so you should ideally make <code>j</code> that same type.</p>

<h2>Performance and Scalability</h2>

<p>Using a sort to find the start is excessive, because you algorithm doesn't care about the order in the <code>schedule</code>: you can find these with a linear scan. It also means you have modified the input, which the caller might not appreciate.</p>

<p>Your method (ignoring the sort) has a worst case time complexity of <code>O(n*m)</code> where <code>n</code> is the size of the schedule, and <code>m</code> is the time-space between the start and end of the schedule. In terms of scalability, this isn't ideal, but its a stupid little example without a specification for performance, so this might not matter.</p>

<p>However, we can achieve a <code>O(n log(n))</code> worst case time complexity (which would already have because of the sort, but that is trivially removed). A sort will be in order, but first break the events into two entries: an incrementing entry and a decrementing entry. You can then sort these and just loop over them incrementing and decrementing as you go, keeping track of the 'best time' as you already are. The only detail is that you need to sort the decrementing events before the incrementing events or otherwise deal with the situation where there are arrivals and departures on the same hour.</p>
    </div>