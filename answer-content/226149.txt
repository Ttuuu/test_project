<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I think that as it is, there is in fact not much difference.  You could add more complex calculation or matching behavior to a given pricing rule, but in the absence of such there's little benefit.  In the example as written, it's just more complexity for little gain.</p>

<p>However, consider that not every item needs a separate rule class, and that the rules could come from another source than being manually created.  For example:</p>

<pre><code>class SimplePriceRule implements IPriceRule {
    private string sku;
    private int pricePerItem;

    public SimplePriceRule(string sku, int pricePerItem) {
        this.sku = sku;
        this.pricePerItem = pricePerItem;
    }

    @Override
    boolean isMatch(OrderItem item) {
        return item.sku.equals(sku);
    }

    @Override
    int calculatePrice(OrderItem item) {
        return item.quantity * pricePerItem;
    }
}
</code></pre>

<p>Now imagine that your list of rules comes from reading a config file of sku/price info which is parsed into these.  Even then, it doesn't <em>need</em> an interface until there's a second type of pricing, but the use of such adds relatively little complexity.</p>
    </div>