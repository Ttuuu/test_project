<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There are <a href="/search?q=600851475143+is%3Aquestion">many questions about Project Euler 3</a> on this site already.  The trick is to <a href="/a/48185/9357">pick an algorithm</a> thatâ€¦</p>

<ul>
<li>Reduces <code>n</code> whenever you find a factor, so that you don't need to consider factors anywhere near as large as 600851475143</li>
<li>Only finds prime factors, and never composite factors, so that you never need to explicitly test for primality.</li>
</ul>

<p>Your algorithm suffers on both criteria: the outer <code>for</code> loop goes all the way up to 600851475143 (which is ridiculous, because even if you optimistically assume that it takes one nanosecond per loop, that would be 5 minutes), and you're testing each of those numbers for primality (which is incredibly computationally expensive).</p>
    </div>