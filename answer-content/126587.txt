<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Pretty good, but I have a few notes:</p>

<ul>
<li><p>Nice job on putting <code>void</code> in for the parameter arguments for <code>main()</code></p></li>
<li><p>Extract the main algorithm into its own function, separate from <code>main()</code>.  This helps compartmentalize the program into more maintainable parts if expanded in the future.</p></li>
<li><p>A length of 30 can be short for a string, depending on what you use the program for.  I'd recommend making that more variable by testing for the string length once you have an input string, and then creating a pointer based on that length.  This makes the final implementation much more dynamic.</p></li>
<li><p>Prefer <code>uint16_t</code> from <code>stdint.h</code> to <code>unsigned short</code>.  I just prefer to use <code>size_t</code>, even though I doubt you'll go beyond the bounds of a <code>short</code> type.  <code>size_t</code> is also the return type for <code>strlen()</code>.</p></li>
<li><p>You don't have to return <code>0</code> at the end of <code>main()</code>, just like you wouldn't bother putting <code>return;</code> at the end of a <code>void</code>-returning function. The C standard  knows how frequently this is used, and lets you not bother.</p>

<blockquote>
  <p><strong>C99 &amp; C11 ยง5.1.2.2(3)</strong></p>
  
  <p>...reaching the <code>}</code> that terminates the <code>main()</code> function returns a
  value of <code>0</code>. </p>
</blockquote></li>
</ul>

<hr>

<h3>Final Program:</h3>

<p>A quick note about something a few people will want to point out: a portion of the C standard defines the string handling function arguments, unless specified otherwise, <em>must</em> have valid values.  I try to mimic that here, therefore excluding the <code>NULL</code> check.  This also provides a slight boost in execution speed.</p>

<pre><code>#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;


char* strrev(const char *str)
{
    size_t len = strlen(str);
    char *rev = malloc(len + 1);

    for(size_t i = 0; i &lt; len; ++i)
    {
        rev[i] = str[(len-1) - i];
    }

    // need to NULL terminate the string
    rev[len] = '\0';
    return rev;
}

int main(void)
{
    // outputs "blimey nice function"
    puts(strrev("noitcnuf ecin yemilb"));
}
</code></pre>
    </div>