<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<pre><code>'Declare All Variables:

Dim myCell As Range
Dim myRow As Integer
Dim myRange As Range
Dim myCol As Integer
Dim i As Integer
Dim k As Integer

Dim myFirstRow As Long
Dim myFirstColumn As Long

Dim rngCopy As Range, rngPaste As Range
</code></pre>
</blockquote>

<p>Don't do this. This procedure is somewhere between 2 and 3 screens high on my laptop: when I'm at the bottom of the procedure, I don't know what I'm looking at, so I scroll back up to this <em>wall of declarations</em>, parse the chunk of code, locate the variable I'm looking for, then scroll back down to where I was, ...and that gets very annoying, very fast.</p>

<p>People defending this "declare everything at the top of the procedure" habit usually defend it pretty hard, and they're wrong. "I can see everything that's used in the procedure at once" sounds great on paper. Truth is, it only makes you scroll back and forth all the time for no reason, <em>and</em> makes it much harder than it should be, to know whether or not a variable is used, let alone <em>where</em> it's used.</p>

<p>If you declare variables where you first assign them, as you need to introduce them, then you simply <em>can't</em> miss the fact that <code>myCell</code>, <code>myRange</code>, <code>rngPaste</code> are never assigned or referenced anywhere... and that <code>iRow</code> and <code>n</code> aren't declared at all. This is extremely bug-prone, you don't want to allow VBA code to run with undeclared variables. Fortunately you can completely prevent this, by simply specifying <code>Option Explicit</code> at the very top of every module you ever write any VBA code in.</p>

<p>Proper indentation also helps, massively. It started well:</p>

<pre><code>For i = 1 To myRow

    If iRow &lt;&gt; n Then
</code></pre>

<p>...and then suddenly went <em>way out there</em>:</p>

<pre><code>                Range(Cells(myFirstRow, 1), Cells(myFirstRow, myCol - 3)).HorizontalAlignment = xlCenter
</code></pre>

<p>...to seemingly random:</p>

<pre><code>            Else
            n = Cells(myFirstRow + i + 1, myFirstColumn)

                For k = 1 To myCol - 3 'need to merge data per column but don't need to merge data in the last 3 columns
</code></pre>

<p>Use an <a href="http://rubberduckvba.com/indentation" rel="nofollow noreferrer">indenter</a> if you're unsure how to keep indentation consistent.</p>

<p>Row numbers should always be <code>As Long</code>. An <code>Integer</code> is a 16-bit signed integer type, so its maximum possible value is 32,767. This means as soon as your data involves row 32,768 and beyond, your code breaks with an "Overflow" run-time error. In fact, there's little to no reason at all to ever declare anything <code>As Integer</code> in 2019: processors are optimized to deal with 32-bit integer types, and that's a <code>Long</code> in VBA.</p>

<p>I like this:</p>

<blockquote>
<pre><code>With ActiveSheet
</code></pre>
</blockquote>

<p>I makes <code>ActiveSheet</code> references explicit, and that's very good.</p>

<p>However you're <em>implicitly</em> referring to whatever the <code>ActiveSheet</code> is everywhere else outside this <code>With</code> block.</p>

<blockquote>
<pre><code>myRow = Range(Cells(3, 1), Cells(3, 1).End(xlDown)).Count + 2 'first two rows are headers
myCol = Range(Cells(2, 1), Cells(2, 1).End(xlToRight)).Count
</code></pre>
</blockquote>

<p>Unqualified like this, <code>Range</code> and <code>Cells</code> are implicitly referring to the <code>ActiveSheet</code>: the <code>With ActiveSheet</code> block is therefore redundant, and makes accesses to that active sheet inconsistent: some are explicit, some are implicit - and that's very bug-prone.</p>

<p>A note about this:</p>

<pre><code>myRow = Range(Cells(3, 1), Cells(3, 1).End(xlDown)).Count + 2 'first two rows are headers
</code></pre>

<p>Looks like you're trying to get the last used row; this is not a reliable way to do it. Consider flipping the logic around and going <em>up</em> from the last row on the sheet to get the <code>.Row</code> of that specific cell, rather than the <code>Count</code> of cells in a range:</p>

<pre><code>myRow = ws.Range("A" &amp; ws.Rows.Count).End(xlUp).Row
</code></pre>

<p>Note how the fist two rows being headers, doesn't matter any more.</p>

<p>I'd strongly advise <em>against</em> using <code>my</code> as a prefix for anything, regardless of how often you see it in documentation. Same goes for <code>rng</code> and <code>o</code> and whatever other prefixing scheme you might read anywhere. Use meaningful names instead. "myRow" doesn't say what's important about it: it's the last row with data. <code>lastRow</code> would already be a much better name for it.</p>

<p><code>rngCopy</code> is assigned, its borders are formatted, ...but it's not being <em>copied</em> anywhere. The name strongly suggests it's a <code>source</code>, especially since it's declared right next to the unused <code>rngPaste</code>, which strongly suggests that would be a <code>destination</code> for an operation involving the clipboard. Pretty misleading, since none of that is happening anywhere in the procedure.</p>

<p>I already mentioned <code>n</code> isn't declared. Its usage is a problem.</p>

<pre><code>Set n = Cells(myFirstRow + 1, myFirstColumn)
</code></pre>

<p>It's <code>Set</code>-assigned to a <code>Range</code>. Thus, its runtime type at that point is <code>Variant/Range</code>.</p>

<pre><code>If iRow &lt;&gt; n Then
</code></pre>

<p>Now it's being compared to <code>iRow</code>, which is another undeclared <code>Variant/Range</code> variable, and the two objects are only comparable through implicit let-coercion involving hidden default member calls - making it all explicit would look like this:</p>

<pre><code>If iRow.Value &lt;&gt; n.Value Then
</code></pre>

<p>And while that's now explicit, it's wrong. It's wrong, because they shouldn't be <code>Range</code> objects. They shouldn't be <code>Range</code> objects, because they're later being <code>Let</code>-assigned to plain values:</p>

<pre><code>        iRow = Cells(myFirstRow + i, myFirstColumn)
        n = Cells(myFirstRow + i + 1, myFirstColumn)
</code></pre>

<p>Beyond that point, the data type of <code>iRow</code> and <code>n</code> is up in the air. If you're lucky, you're looking at two <code>Variant/Double</code> values. Otherwise, you're looking at one or more <code>Variant/Error</code> values (that would be the case if the worksheet contains error values), and everything blows up with a <em>type mismatch</em> error.</p>

<p>Not declaring variables is one thing, reusing variables is another, but reusing undeclared variables and assigning them a new runtime type, makes everything very hard to follow. Declare them with an explicit data type, and let them <em>be</em> values, instead of <em>objects that behave like values</em> thanks to implicit hidden code.</p>

<p>As for performance, the reason it's slow is because it's doing the single slowest thing any code can do: interact with worksheet cells directly, in a loop.</p>

<p>You can't help it, interacting with worksheet cells is <em>precisely</em> what this macro needs to do. All you <em>can</em> do is tell Excel to stop trying to keep up as you modify the worksheet.</p>

<p>Every time a cell is modified, Excel evaluates whether a recalc is needed, and will perform it if it has to. Switch calculation to manual before you start manipulating the worksheet, and toggle it back to automatic when you're done: Excel will only recalculate once. That's <code>Application.Calculation</code> (set to <code>xlCalculationManual</code>, then back to <code>xlCalculationAutomatic</code> when you're ready).</p>

<p>Every time a cell is modified, Excel fires worksheet events (e.g. <code>Worksheet.Change</code>), and if there's a handler procedure for that event, then that code will run before the next instruction does. Turn off application events before you start manipulating the worksheet, and toggle it back on when you're done: no worksheet events will be fired; that's <code>Application.EnableEvents</code> (set to <code>False</code>, then back to <code>True</code> when you're ready).</p>

<p>Every time a cell is modified, Excel tries to repaint itself. While that's normally pretty fast, when you're modifying cells in a loop you don't want Excel to even try to keep up - you want to make your changes, and have Excel repaint itself when you're done. Do that by toggling <code>Application.ScreenUpdating</code> (set to <code>False</code>, then back to <code>True</code> when you're ready).</p>

<p>Whenever you toggle this global <code>Application</code> state, make sure you handle runtime errors, and have your error-handling subroutine ensure that the global state gets properly reset whether the procedure succeeds or fails, whatever the reason for failing might be.</p>
    </div>