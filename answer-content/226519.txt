<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Make <code>type_expressions</code> a const member variable</h1>

<p>Why have a function returning a <code>std::unordered_map&lt;&gt;</code> with constant data, if you can just as well declare this map directly as a member variable? Declare this in the header file:</p>

<pre><code>class Token {
    ...
public:
    static const std::unordered_map&lt;std::string, Type&gt; type_expressions;
    ...
};
</code></pre>

<p>And the following in the implementation file:</p>

<pre><code>const std::unordered_map&lt;std::string, Type&gt; Token::type_expressions = {
    {"and", Type::AND},
    ...
};
</code></pre>

<h1>Consider having <code>Token</code> just be a <code>class enum</code></h1>

<p>Your class <code>Token</code> is not very generic. It works like an <code>enum</code>, with just two differences: it has a <code>is_one_of()</code> convenience function, and there's a map from strings to <code>Type</code>. But it has a hardcoded set of <code>Types</code>. I recommend just doing:</p>

<pre><code>enum class Token: uint8_t {
    UNKNOWN,
    FIELD,
    ...
};
</code></pre>

<p>Have the map from strings to types just be a non-class variable, and defining <code>is_one_of()</code> as a generic function that can compare any set of things:</p>

<pre><code>template&lt;typename T, typename... Ts&gt;
bool is_one_of(T const value, T const value1, Ts const ... values) {
    return value == value1 || is_one_of(value, values...);
}

template&lt;typename T&gt;
bool is_one_of(T const value, T const value1) {
    return value == value1;
}
<span class="math-container">```</span>
</code></pre>
    </div>