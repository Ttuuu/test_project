<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You can remove the <code>coins</code> variable altogether and replace it with a generator of squares:</p>

<pre><code>for coin in (x**2 for x in itertools.count(1)):
    ...
</code></pre>

<p>You don't necessarily need a <code>defaultdict</code> with a lambda, since you are going to create the all the values in the dict anyway (<code>defaultdict</code> is more appropriate if you don't know in advance what keys you'll need):</p>

<pre><code>min_coins_to_make = {i: i for i in range(n)}
</code></pre>

<p>(which takes care of the square of 1, too, so you can start your count at 2, realistically)</p>

<p>In terms of space and complexity, space is <code>O(N)</code>, complexity is <code>O(N*Log(N))</code> (it's actually a Harmonic number (<code>sum(1/i for i &lt; n)</code>), but it converges to <code>ln(N)</code>). I don't see a better option right now.</p>

<p>One other way to look at the problem could be to go backward from large squares, that way you can stop when the square you're looking at is smaller that N/current best (as you'd <em>have</em> to replace a bigger element, hence increasing
the total count.) or when you somehow know that the current solution is optimal. I don't know exactly how you'd go about this approach, though.</p>
    </div>