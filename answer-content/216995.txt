<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Old school</h2>
<blockquote>
<p><em>"I've been learning JavaScript for about a year and it is my first language."</em></p>
</blockquote>
<p>Welcome to the world of programming where learning and the eagerness to learn is a primary skill all good programmers must have stay relevant in the ever changing IT industry.</p>
<p>That segues me to the issue with your code. It is near <strong>9 years</strong> out of date, wherever you are getting your study material from it is time to look for something current.</p>
<p>The current draft version is ECMAScript2019 which is what you should be learning. Your code is haphazardly pre ES5 which was released in 2011.</p>
<p>The first line inside the init function (the Array.map polyfill) pre-dates even ES5.</p>
<h2>Questions</h2>
<blockquote>
<p><em>"Is my use of a constructor implemented in a standard and acceptable way?"</em></p>
</blockquote>
<p>No the standard is <a href="http://www.ecma-international.org/publications/standards/Ecma-262.htm" rel="nofollow noreferrer">ES2018</a>/19</p>
<blockquote>
<p><em>"Is there anything that can be done to optimize the performance of this code?"</em></p>
</blockquote>
<p>Yes, update to <a href="http://www.ecma-international.org/publications/standards/Ecma-262.htm" rel="nofollow noreferrer">ES2018</a>/19</p>
<p>For a reasonably up to date reference <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript" rel="nofollow noreferrer">MDN Javascript</a> is not as dry as the official <a href="http://www.ecma-international.org/publications/standards/Ecma-262.htm" rel="nofollow noreferrer">ECMA-262</a> site.</p>
<h2>Good points</h2>
<ul>
<li><p>Your code has a consistent style and  good layout (indentation, naming format, spaces, etc), however some line lengths are a little too long.</p>
</li>
<li><p>Correct use of equality operators, and statement block layout.</p>
</li>
<li><p>Good naming, room for improvement but nothing to leave me guessing.</p>
</li>
</ul>
<p><sup><sub><strong>Note</strong> I qualified the good points so to avoid CR commenting backlash</sub></sup></p>
<h2>Bad points</h2>
<ul>
<li>Bad data structuring</li>
</ul>
<p>eg if you have a set of named items that share the same category/association move the cat name out of the names and create an object to hold the items.</p>
<pre><code>ilPrice: digitalData.page.pageInfo.pricingIL,
alPrice: digitalData.page.pageInfo.pricingAL,
mcPrice: digitalData.page.pageInfo.pricingMC,
</code></pre>
<p>should be</p>
<pre><code>price: {
    il: digitalData.page.pageInfo.pricingIL,
    al: digitalData.page.pageInfo.pricingAL,
    mc: digitalData.page.pageInfo.pricingMC, 
}
 
</code></pre>
<ul>
<li><p>Repetitive</p>
<ul>
<li>Repeated long accessors. If you repeatably access values via a long object paths, create a reference to the object needed, don't use the full path each time. See <strong>Ex A</strong></li>
<li>Repeated code. There are is a section where you have the same 7 lines repeated 3 times with the only difference between 3 is 2 characters.</li>
</ul>
</li>
</ul>
<p><strong>Ex A</strong> (As your code needs a rewrite from the ground up, the example does the above using a IIFE and <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Default_parameters" rel="nofollow noreferrer">default parameter</a> as example only)</p>
<pre><code>price: {
    il: digitalData.page.pageInfo.pricingIL,
    al: digitalData.page.pageInfo.pricingAL,
    mc: digitalData.page.pageInfo.pricingMC, 
},


price: ((info = digitalData.page.pageInfo) =&gt; ({
    il: info.pricingIL,
    al: info.pricingAL,
    mc: info.pricingMC, 
}))(),
</code></pre>
<ul>
<li><p>Magic constants. There are many repeated constants as strings, parts of strings, numbers, distributed throughout your code. Move these out of the code and define them as named constants in one place. You should not have to navigate the body of the code to change a simple number, or string.</p>
</li>
<li><p>Don't add HTML to the page via strings, use the DOM API to create and modify elements, its significantly quicker, and lets you structure your code to better fit its role.</p>
</li>
</ul>
<h2>Summary</h2>
<p>All in all  not bad for one year, I have seen worse code from CS post-grads with 5 years under their belts.</p>
<p>Just don't fall behind. If you are worried about legacy browser support use a transpiler like <a href="https://babeljs.io/" rel="nofollow noreferrer">Babel.js</a>, don't let a tiny, <sub><sup>tiny </sup><sub><sup><sup>tiny </sup></sup></sub></sub> minority hold your skill development back.</p>
    </div>