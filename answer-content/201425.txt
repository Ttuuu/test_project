<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>These are (to me) unexpected:</p>

<pre><code>if (source == default(IEnumerable&lt;T&gt;))
{
    yield break;
}

if (selector == default(Func&lt;T, IEnumerable&lt;TResult&gt;&gt;))
{
    yield break;
}
</code></pre>

<p>LINQ itself crashes helpfully if you pass <code>null</code> to <code>Select</code> and other such methods (including <code>FirstOrDefault</code>). Your API would make me feel uneasy (because this sort of misplaced <code>null</code> is never fun to debug) and would go against expectations if you are trying to mimic LINQ directly. I'd much prefer an <code>ArgumentException</code> here. At the very least, this behaviour should be clearly documented with inline documentation (<code>///</code>).</p>

<p><code>ToList</code> behaves differently, as <code>new List&lt;T&gt;(null)</code> throws unlike the rest of your methods. <code>Aggregate</code> is also weird in this regard. An empty <code>source</code> would give you <code>seed</code>, but <code>null</code> gives you <code>default(TEnd)</code>. <code>Min</code> is weird also: it should defintiely crash, since the <code>Min</code> of an empty list is ill-defined, let alone the min of a non-existance list: you should cover these cases explicitly, and <code>throw</code> (or rather, that's what LINQ does, and that's what I'd expect).</p>

<p>It's also a bit odd that you compare to <code>default(IEnumerable&lt;T&gt;)</code> in some places, and <code>null</code> in others. <code>null</code> is sufficient, since it's an interface.</p>

<hr>

<p>Regarding <code>Contains</code>, LINQ doesn't do this, but I'd personally appreciate a signature like</p>

<pre><code>public static bool Contains&lt;T&gt;(IEnumerable&lt;T&gt; source, T item) where T : IEquatable&lt;T&gt;
</code></pre>

<p>LINQ no-doubt uses the <a href="https://msdn.microsoft.com/en-us/library/ms224763(v=vs.110).aspx" rel="nofollow noreferrer">default <code>EquailtyComparer</code></a> which will 'pick' an efficient comparison where possible, and something you might consider, since passing structs to <code>Equals(object)</code> incurs boxing.</p>

<hr>

<p>In <code>LongCount</code>, this is a little odd:</p>

<pre><code>return default(int);
</code></pre>

<p>Just return <code>0</code>. It would be so much clearer what you are doing. However, returning <code>0</code> for a <code>null</code> source again makes no sense.</p>

<hr>

<p>In <code>ToArray</code>: I wouldn't use <code>LinkedList&lt;T&gt;</code> here, because it's usually slower than a <code>List&lt;T&gt;</code>, and just has a less pleasant interface. In fact, you'd probably be better of just returning <code>ToList(source).ToArray()</code>. You might consider caching an empty array or using <code>Array.Empty&lt;T&gt;()</code> to handle the special case of an empty source, but again I'd suggest throwing if source is <code>null</code>.</p>

<p>As a general rule, I wouldn't use <code>LinkedList&lt;T&gt;</code> unless I was depending upon efficient insertion or removal at the start or in the middle with order retention.</p>

<p>The same in <code>Reverse&lt;T&gt;</code>. I'd use a <code>Stack&lt;T&gt;</code>: it's literally perfect for this job. (see Henrik Hansen's answer for a perfectly good example, which again will throw if <code>source</code> is null)</p>

<hr>

<p><code>PrivateFieldsOfType&lt;T&gt;</code> seems a little out-of-place here! It's also not clear that it's only meant to yield instance fields, and various other things that the specific <code>BindingFlags</code> imply. I'd argue that this method is useless without documentation or access to the code, since as a consumer I have no real idea what it is doing.</p>

<hr>

<p>You have no <code>Max&lt;T&gt;</code> or <code>Min&lt;T&gt;</code> taking some sort of comparable: this limits their utility rather. Having such a method would save you needing separate implementations for <code>int</code> and <code>long</code>.</p>

<p>Also, integers can be negative, so initialising <code>max = 0</code> is a problem (should be <code>int.MinValue</code>).</p>

<hr>

<p>Saved until last, because it would be effort, but I'd be inclined to use a Heap to implement <code>OrderBy</code>, because a well-implemented Binary Heap can be built in linear time, so you only pay the log-linear cost for elements you pull (i.e. if you only need the first 10 elements, you don't have to 'completely' sort the other (n-10)).</p>

<p><code>OrderBy</code> also puts the <code>null</code> key elements at the end for both ascending and descending sort. I don't know if this is intentional; I'd expect the comparer to handle <code>null</code>s for me, and if it can't, then crashing would be nice.</p>
    </div>