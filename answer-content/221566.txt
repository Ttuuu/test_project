<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Adding onto @Chipster's answer, I'd like to suggest some improvements for the Deck class:</p>

<pre><code>class Deck
{
private:
    std::array&lt;Card, 52&gt; m_card;
    int m_cardIndex;

    void swapCard(Card &amp;a, Card &amp;b);
    inline Card* dealCard();

public:
    std::vector&lt;Card*&gt; m_playerHand;
    std::vector&lt;Card*&gt; m_dealerHand;

    ...

    void printDeck() const;
    void shuffleDeck(int xTimes);
    void dealPlayer();
    void dealDealer();
};
</code></pre>

<ol>
<li><p>As @yuri suggested, make a <code>DECK_SIZE</code> variable that maybe gets set via a constructor to get rid of the magic number of 52 (you could use templates for this), even though that's the standard deck size. Also, <code>m_card</code> in the singular doesn't make sense to me. I'd say <code>m_cards</code> (or simply <code>cards</code> to get rid of the <a href="https://softwareengineering.stackexchange.com/a/102690/333842">unnecessary Hungarian notation</a> altogether).</p></li>
<li><p>From an object-oriented perspective, it doesn't make sense for a <code>Deck</code> to have <code>m_playerHand</code> and <code>m_dealerHand</code>. It makes more sense for these to be part of player and dealer classes (but players and dealers share a lot of common functionality, so a class hierarchy may make sense hereâ€”maybe an abstract base class of <code>BlackjackEntity</code>).</p></li>
<li><p><code>printDeck()</code> is fine, but it can be replaced with the following <a href="http://www.cplusplus.com/doc/tutorial/inheritance/" rel="nofollow noreferrer">friend function</a>:</p></li>
</ol>

<p><code>friend std::ostream&amp; operator&lt;&lt;(std::ostream&amp; os, const Deck&amp; deck)</code></p>

<p>This would allow you to simply <code>std::cout &lt;&lt; referenceToDeck</code>.</p>

<ol start="4">
<li>And finally, <code>dealPlayer</code> and <code>dealDealer</code> do exactly the same thing, just to different entities. Moreover, it makes more sense to move the <code>dealTo</code> method to the <code>Dealer</code> class (assuming you go down that route) and change its signature to be:</li>
</ol>

<p><code>void Dealer::dealTo(Deck&amp; deck, BlackjackEntity&amp; recipient)</code></p>

<p>After all, it's the <code>Dealer</code> who deals, not the deck. The deck simply has the capacity to be dealt. This method would then call <code>deck.dealCard()</code> to get the card and give it to <code>recipient</code>, which is either <code>this</code> or a reference to the player. For this to work, both <code>Dealer</code> and <code>Player</code> would have to subclass <code>BlackjackEntity</code>. That base class would provide all methods common to <code>Dealer</code>s and <code>Player</code>s. The subclasses would add any methods unique to their respective entities (like dealing for the <code>Dealer</code>).</p>

<p>Hope that helps!</p>
    </div>