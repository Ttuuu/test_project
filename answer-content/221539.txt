<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><p>I think <code>ask_file_name</code> looks fine without using <code>pathlib</code>. The difference between the two comes down to LBYL vs EAFP.</p>

<p>For the most part the difference between the two is style. Do you prefer using <code>except FileNotFoundError</code> or an <code>if path.exists()</code>.</p></li>
<li><p>What I do find strange is <code>ask_file_name</code> follows a LBYL approach, but the code inside it follows an EAFP approach.</p>

<p>To make it fully EAFP return the file object you create in the <code>try</code>.</p></li>
<li><p>I'd move the <code>input</code> call outside the <code>try</code>. Whilst it's unlikely to raise either error, it's a good habit to get into.</p></li>
<li>There's no need to <code>continue</code> in the <code>except</code>, this is as there are no statements after the <code>try</code>.</li>
<li><p>I don't understand why you've used <code>str(input_file.readlines())</code>.</p>

<p>This converts from a list to a string adding additional noise. You can also read the entire file with <code>input_file.read()</code>.</p></li>
<li><p><code>retrieve_values</code> can be changed to a list comprehension.</p></li>
<li>Don't mix string delimiters, pick either <code>"</code> or <code>'</code>.</li>
<li>I'm not a fan of your names. I have changed them to what I would use, but you may dislike my naming style.</li>
</ul>

<p><sub>Docstrings removed for brevity</sub></p>

<pre><code>#! /usr/bin/env python3
# coding: utf-8

# Sample data from http://www.py4inf.com/code/

import re


def get_file():
    while True:
        path = input('Enter the file name: ')
        try:
            return open(path, 'r')
        except FileNotFoundError:
            print('Input empty or file does not exist.')
        except IsADirectoryError:
            print("That's not a directory, not a file.")


def find_confidences(file):
    return re.findall(
        'X-DSPAM-Confidence: 0.[0-9]+',
        file.read()
    )


def retrieve_confidences(confidences):
    return [
        float(confidence.split()[-1])
        for confidence in confidences
    ]


def average(values):
    return sum(values) / len(values)


def main():
    with get_file() as file:
        occurences = find_confidences(file)
    confidences = retrieve_confidences(occurences)
    print(average(confidences))


if __name__ == '__main__':
    main()
</code></pre>
    </div>