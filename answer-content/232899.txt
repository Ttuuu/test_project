<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Avoid the Comma Operator in Declarations</h2>

<p>In the declaration of Position the comma operator is being used.</p>

<pre><code>typedef struct {
    unsigned int row, col;
} Position;
</code></pre>

<p>It is preferable to declare each variable separately, it is easier to find variable declarations this way, it is easier to add and remove variables this way and it makes the code more readable.</p>

<pre><code>typedef struct {
    size_t row;
    size_t col;
} Position;
</code></pre>

<p>In many cases it is preferable to use <code>size_t</code> instead of <code>unsigned int</code>, especially for array and vector indexes. The <code>size()</code> function of <strong>STL</strong> container classes returns <code>size_t</code>.</p>

<h2>The <code>factorial()</code> Function</h2>

<p>It would be better to use an iterative solution for the <code>factorial()</code> function, it would perform faster and use less memory. While this probably won't happen in this program, for large numbers the current implementation of <code>factorial()</code> may cause a stack overflow due to the number of copies of <code>factorial()</code> on the stack. Using an iterative approach would also allow for testing the value to be returned to make sure it never exceeds the size of the variable being used (Arithmetic Overflow).</p>

<pre><code>constexpr unsigned int factorial(const unsigned int n) {
    if (n == 1)
        return 1;
    else
        return n*factorial(n - 1);
}
</code></pre>

<p>A good habit to get into is to wrap actions after <code>if</code> or <code>else</code> in brackets (<code>{}</code>). This improves the maintainability of the code. If someone had to modify the <code>if</code> statement by adding another statement before the <code>return</code> statement they could introduce a bug if the didn't add the brackets. </p>

<pre><code>constexpr unsigned int factorial(const unsigned int n) {
    if (n == 1) {
        return 1;
    }
    else {
        return n*factorial(n - 1);
    }
}
</code></pre>

<h2>Algorithm</h2>

<p>It might be better if the class Queens had a way to print the contents of the <code>queens</code> vector, that way the <code>main()</code> function would be simpler, because the <code>solve()</code> function could return <code>true</code> or <code>false</code> and the code would not be using <code>try{}</code> and <code>catch{}</code>. Generally <code>try{}</code> and <code>catch{}</code> are used for error processing, and what is thrown is an exception. Not finding a solution to the N Queens problem should not be considered an error and shouldn't use try and catch. This would also remove any necessity for <code>main()</code> to have any knowledge of the private vector <code>queens</code> or the struct <code>Position</code></p>

<pre><code>template&lt;unsigned int N&gt;
bool Queens&lt;N&gt;::solve() {
    for (unsigned int i = 0; i &lt; factorial(N); ++i) {
        generate_permutation();
        if (configuration_acceptable(queens))
        {
            return true;
        }
    }
    return false;
}

template&lt;unsigned int N&gt;
void Queens&lt;N&gt;::printQueens()
{
    for (auto it : queens) {
        std::cout &lt;&lt; it.col &lt;&lt; " " &lt;&lt; it.row &lt;&lt; "\n";
    }
    std::cout &lt;&lt; std::flush;
}

int main() {
    Queens&lt;8&gt; a;
    bool solved = a.solve();
    std::cout &lt;&lt; a.length() &lt;&lt; "\n";
    if (solved)
    {
        std::cout &lt;&lt; "found configuration:\n";
        a.printQueens();
    } else {
        std::cout &lt;&lt; "No Solution Found\n";
    }
}
</code></pre>
    </div>