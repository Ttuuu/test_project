<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><p>Combining lookup and insertion functionality in one function looks like an unnecessary violation of SRP. I strongly recommend to separate them.</p></li>
<li><p>Keeping the error inside the structure is indeed questionable. Notice that once you split lookup and insert, <code>return errcode;</code> becomes natural: every function besides <code>insert</code> would just return an error code, and <code>insert</code> would return <code>NULL</code> on failure.</p>

<p>If you still want to keep the error flag, you should at least clear it in the beginning of any function which may set it, and provide a function to check it. As of now, the client must directly access <code>ht-&gt;err_f</code>, which breaks the encapsulation.</p></li>
<li><p>Speaking of encapsulation, the standard practice is to forward declare <code>typedef struct htable_t htable_t;</code> in the <code>htable.h</code>, and define it in <code>htable.c</code>. The client has no business knowing how exactly the table is organized.</p></li>
<li><p><code>htable_foreach</code> apparently attempts to compact the list of indices. It is a very strange place to do so. Removing an index is more natural in <code>htable_remove</code>. Meanwhile, I am not sure what benefits does the list of indices provide.</p></li>
</ul>
    </div>