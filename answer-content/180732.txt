<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Using `Val`</h2>

<p>The <code>Val</code> function can run into problems when converting string values, depending upon the locale of the user. It is generally safer to use <code>CDbl</code>, but it will depend on the input. See <a href="https://www.vb-helper.com/tip_internationalization.html" rel="nofollow noreferrer">Internationalization Tips</a></p>

<h2>Indenting/Line spacing</h2>

<p>Your compiler directives follow on the immediate line after the function signatures, which looks a little cluttered, and hard to spot the beginning/end of the compiler directive. I'd like to see an extra line before and after the compiler directives.</p>

<h2>Enum ordering</h2>

<p>I'll let you off the hook for the inconsistent casing of enum members, as I see that you're trying to implement a consistent style, but also trying to maintain the Win32 capitalizations. But, you are using inconsistent ordering of the enum members - sometimes the members are alphabetical, and sometimes they're by hex value. In my experience, it is better to define the enum in hexagonal order (as it's easier to spot omissions), and then rely on the Object Browser/Intellisense to render the enum members alphabetically.</p>

<h2>Magic Numbers/Constants</h2>

<p>There are numerous references to magic numbers (like <code>9</code> for Office 2000) and string-literals (like <code>"ThunderDFrame"</code>) throughout the code. These would be much better defined as constants (with a view to allowing multi-language support). You make the effort on occasion, but not on others. You also use magic numbers like 240 and 480 (for x and y), but without adding comments (or descriptive constant names) to explain why.</p>

<h2>Passing 0 to GetDC</h2>

<p>Your <code>GetDC</code> function accepts a Long/LongPtr, but you're passing a integer-literal of <code>0</code>. You can avoid an implicit conversion, by using <code>GetDC(0&amp;)</code> instead of <code>GetDC(0)</code></p>

<h2>Backward Portability</h2>

<p>It seems this would almost work in VBA6 hosts, but the <code>VBA7</code> compiler constant wouldn't be present. For portability, it might be nice to add a commented-out compiler constant of:</p>

<pre><code>'Uncomment the next line for the code to work in VBA6 hosts
'#Const VBA7 = False
</code></pre>

<p>Or maybe the non-existent compiler constant would convert to 0, and thereby False, by default?</p>

<h2>The Access rendering "32000" limit</h2>

<p>Access can run into difficulty on large/multi-monitor systems, where the host window equates to roughly 32000 ( the exact limit seems related to the 32000 give or take the borders imposed by various operating system versions) in the X direction. This is, in my understanding, party an Access limitation, and partly a factor of the way that forms are serialized. You may want to check the behavior when an Access window is wider than a typical 1080p monitor (16x 1920 pixels across), or you may get some unexpected problems.</p>
    </div>