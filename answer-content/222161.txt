<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your class is non-testable mainly because :  </p>

<ol>
<li>it reads datas from disk/network</li>
<li>it doesn't use any injection</li>
</ol>

<p>Firstly, please note that Spring has some utility to read property file and fills java beans automaticly. You should check this if you don't want to reinvent the wheel. ;)
Also, <em>Properties</em> is a fairly old school class in Java and isn't used that much recently.</p>

<p>If you do want to have your own implementation, the let's see what we can do line-by-line, shall we ?</p>

<pre><code>private final String secretToken = "SECRET";
</code></pre>

<p>Either you plan on making this variable (and then it should be injected in the constructor) or this is a constant (so it should be <code>private static final</code>).</p>

<pre><code>public final class Keys 
{
    public final static String KEY1 = "KEY1";
    public final static String KEY2 = "KEY2";
}
</code></pre>

<p>I don't really get what you were trying to accomplish here. Why didn't you put those constants in the main classes ? I'd remove this code altogether IMHO.</p>

<pre><code>private Properties properties;
</code></pre>

<p>This is set in the constructor so this is a good candidate for <code>final</code> ;)</p>

<pre><code>public PropertiesManager() throws IOException
{
    properties = new Properties();
    InputStream in = new FileInputStream(CONF_FILE_NAME);
    properties.load(in);
}
</code></pre>

<p>Maybe some people will disagree but I'm no big fan of constructor that do I/O.<br>
Also this is non-configurable : what if you want to change the file name ? what if you want to read not from a file but from a string or from the console ?<br>
You should read about dependency injection if you've never heard of it before.<br>
For a quick introduction, it's a principle that some codes delegates the configuration of the object to the calling code allowing for more and easier code reuse.</p>

<p>The InputStream is not closed which may lead to ressource-leak. See <a href="https://docs.oracle.com/javase/7/docs/api/java/lang/AutoCloseable.html#close()" rel="nofollow noreferrer">https://docs.oracle.com/javase/7/docs/api/java/lang/AutoCloseable.html#close()</a> ;)</p>

<p>IMO I'd have a constructor that takes a <code>Properties</code> object. However, this may pose others problems (such as the Properties object still being accessed by another object and be modified directly).<br>
So, I'd consider using a static factory method that takes a <em>Reader</em> and returns the <em>PropertiesManager</em>. The calling code will be the one responsible to close the stream.
This allows you to inject any time of Reader making your code more reusable.</p>

<pre><code>public String getProperty(String name)
{
    //...
</code></pre>

<p>This is fine. As a side-note : you shouldn't use <code>System.out.println</code> for log in production code.</p>

<pre><code>public HashMap&lt;String, String&gt; getAllPublicProperties()
</code></pre>

<p>Your return type shouldn't be HashMap ; when possible you should code against the interface that most suits your need, in this case : <em>Map</em>.</p>

<pre><code>HashMap&lt;String, String&gt; map = new HashMap&lt;&gt;();

properties.keySet().stream().map(f -&gt; (String)f).filter(f -&gt; !f.contains(secretToken)).forEach(f -&gt; map.put(f, properties.getProperty(f)));
</code></pre>

<p>This code may be dangerous as it is not thread-safe due to the forEach that modify a non thread-safe object. From a FP pov, you should try to delegate to the collect method (check <a href="https://docs.oracle.com/javase/9/docs/api/java/util/stream/Collectors.html" rel="nofollow noreferrer">https://docs.oracle.com/javase/9/docs/api/java/util/stream/Collectors.html</a>).</p>

<p>This leads us to the following code :</p>

<pre><code>package pl.propertiesdemo;

import static java.util.stream.Collectors.toMap;

import java.io.IOException;
import java.io.Reader;
import java.util.Map;
import java.util.Properties;
import java.util.function.Function;

public class PropertiesManager {
    public static final String DEFAULT_CONF_FILE_NAME = "conf_file.conf";

    private static final String SECRET_TOKEN = "SECRET";

    private final Properties properties;

    public static PropertiesManager createFrom(final Reader r) throws IOException {
        var properties = new Properties();
        properties.load(r);
        return new PropertiesManager(properties);
    }

    protected PropertiesManager(final Properties properties) {
        this.properties = properties;
    }

    public String getProperty(final String name) {
        String property = properties.getProperty(name);
        if (property == null) {
            System.out.println("Property " + name + " not found in properties file");
        }
        return property;
    }

    public Map&lt;String, String&gt; getAllPublicProperties() {
        return properties.keySet()
                .stream()
                .map(f -&gt; (String) f)
                .filter(f -&gt; !f.contains(SECRET_TOKEN))
                .collect(toMap(Function.identity(), f -&gt; properties.getProperty(f)));
    }
}
</code></pre>

<p>Now that your object don't read from disk and can be easily injected, the object instantiation in the test class may look like this :</p>

<pre><code>PropertiesManager prop = null;
try {
    prop = PropertiesManager.createFrom(new StringReader("someKey=someValue"));
} catch (IOException ioe) {
    fail();
}
</code></pre>
    </div>