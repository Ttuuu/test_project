<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Issues</h3>

<p>Possible null reference exceptions:</p>

<p>both <code>values</code> as any <code>value</code> could be <code>null</code>.</p>

<blockquote>
<pre><code>foreach (var value in values) {
     children.Add(value.ToString());
}
</code></pre>
</blockquote>

<p>Improve robustness of finding properties:</p>

<p>make sure to filter out properties with a public getter that aren't <em>indexers</em>.</p>

<blockquote>
  <p><code>entity.GetType().GetProperties()</code></p>
</blockquote>

<pre><code>entity.GetType().GetProperties().Where(p =&gt; p.CanRead &amp;&amp; p.GetGetMethod() != null 
    &amp;&amp;  p.GetIndexParameters().Length == 0)
</code></pre>

<hr>

<h3>Refactored solution</h3>

<p>Original solution provided by mjolka.</p>

<ul>
<li>Issues are fixed</li>
<li>Generator pattern (yield) instead of verbose return statements</li>
<li>A couple of small syntax changes using newer C# features</li>
</ul>

<p>code</p>

<pre><code> public IEnumerable&lt;KeyValuePair&lt;string, IEnumerable&lt;string&gt;&gt;&gt; Dependencies(TEntity entity) 
 {
     if (entity == null)
     {
         yield break;
     }

     var properties = entity.GetType()
         .GetProperties()
         .Where(p =&gt; typeof(IEnumerable).IsAssignableFrom(p.PropertyType) 
                 &amp;&amp; !typeof(string).IsAssignableFrom(p.PropertyType)
                 &amp;&amp;  p.CanRead &amp;&amp; p.GetGetMethod() != null 
                 &amp;&amp;  p.GetIndexParameters().Length == 0);

     foreach (var property in properties)
     {
         if (property.GetValue(entity) is IEnumerable values)
         {
             var children = (
                 from object value 
                 in values
                 where value != null
                 select value.ToString()
             ).ToList();

             yield return new KeyValuePair&lt;string, IEnumerable&lt;string&gt;&gt;
                 (property.Name, children);
         }
     }
 }
</code></pre>
    </div>