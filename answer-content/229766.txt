<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I haven't looked at any Prolog code in at least a decade.  So, I really can't give any useful feedback on your code.  However, the question piqued my interest, and you did say you'd be more happy with ... Python......  </p>

<p>So I rolled my own solver in Python.  It's rough and under-tested, has very little error checking, and could use some refactoring.  But here it is:</p>

<pre><code>import re

from collections import defaultdict
from enum import Enum
from operator import add, mul
</code></pre>

<p>Enum for the state of each square</p>

<pre><code>class State(Enum):
    OFF = 0
    ON = 1
    UNASSIGNED = 2
</code></pre>

<p>Class for the squares</p>

<pre><code>class Variable:

    def __init__(self, op, value):
        self.op = op
        self.value = int(value)
        self.state = State.UNASSIGNED
        self.shorthand = f"{op}{value}"

        self.func = {'+':add, '*':mul}[op]

    def evaluate(self, left):
        if self.state != State.ON:
            return left
        else:
            if left:
                return self.func(left, self.value) 

            else:
                return self.value

    def __str__(self):
        return f"Variable('{self.op}','{self.value}'): {self.state.name})"   

    def __repr__(self):
        return f"V('{self.op}','{self.value}')"   

    def code(self):
        #       OFF         ON        UNKNOWN
        return ['',   self.shorthand,   '?'  ][self.state.value]
</code></pre>

<p>Enum for status of a constraint</p>

<pre><code>class Status(Enum):
    FAILED  = 0
    PASSED  = 1
    UNKNOWN = 2
</code></pre>

<p>Class for the constraints</p>

<pre><code>class Constraint:

    def __init__(self, variables, op, value):
        self.variables = list(variables)
        self.op = op
        self.value = int(value)

    def check(self):
        if self.op == '#':
            value = 0
            for v in self.variables:
                if v.state==State.UNASSIGNED:
                    return Status.UNKNOWN

                if v.state==State.ON:
                    value += 1

        else:
            value = None
            for variable in self.variables:
                if variable.state == State.UNASSIGNED:
                    return Status.UNKNOWN

                value = variable.evaluate(value)

        return Status.PASSED if value == self.value else Status.FAILED

    def __str__(self):
        variables = ','.join(repr(v) for v in self.variables)
        return f"Constraint([{variables}], '{self.op}', '{self.value}')"
</code></pre>

<p>Class for the puzzle</p>

<pre><code>class Puzzle:

    def __init__(self, puzzle):
        self.puzzle = puzzle[:]

        self.constraints = []
        self.by_var = defaultdict(list)
        self.variables = []

        rows = defaultdict(list)
        cols = defaultdict(list)
        groups = defaultdict(list)

        last_var_row = 0

        # gather the variables
        for r,row in enumerate(puzzle):
            for match in re.finditer(r"(?P&lt;op&gt;[+*])(?P&lt;val&gt;\d+)(?P&lt;group&gt;\w?)", row):
                variable = Variable(match['op'], match['val'])

                self.variables.append(variable)
                rows[r].append(variable)

                for left,right in cols.keys():
                    if match.start() &lt;= right and match.end() &gt;= left:
                        key = (left, right)
                        break
                else:
                    key = (match.start(),match.end())

                cols[key].append(variable)

                if match['group']:
                    groups[match['group']].append(variable)

                last_var_row = max(last_var_row, r)

        # gather the constraints
        for r,row in enumerate(puzzle):
            for match in re.finditer(r"(?P&lt;group&gt;\w?)(?P&lt;op&gt;[#=])(?P&lt;val&gt;\d+)", row):
                if match['group']:
                    cvars = groups[match['group']]

                elif r &lt;= last_var_row:
                    cvars = rows[r]

                else:
                    for left,right in cols.keys():
                        if match.start() &lt;= right and match.end() &gt;= left:
                            key = (left, right)
                            break
                    else:
                        raise ValueError("Unaligned column constraint: {match[0]} @ line {r}, col {match.start()}")

                    cvars = cols[key]

                constraint = Constraint(cvars, match['op'], match['val'])
                self.constraints.append(constraint)

                for v in cvars:
                    self.by_var[v].append(constraint)

    def consistent(self, variable):
        for constraint in self.by_var[variable]:
            check = constraint.check()

            s = ' '.join(v.code() for v in constraint.variables)

            if check == Status.FAILED:
                return False

        return True


    def solve(self, pretty=False):

        def search(variables):
            if not variables:
                return [v.state.value for v in self.variables]

            first, *rest = variables
            for state in (State.ON, State.OFF):
                first.state = state

                check = self.consistent(first)
                if check:

                    result = search(rest)

                    if result is not None:
                        return result

            first.state = State.UNASSIGNED
            return None

        solution = search(self.variables[:])

        if solution is not None:
            if pretty == True:
                index = 0

                def sub(match):
                    nonlocal index

                    state = self.variables[index].state
                    index += 1

                    return match[0] if state == State.ON else ' '*len(match[0])


                print(re.sub(r"(?P&lt;op&gt;[+*])(?P&lt;val&gt;\d+)(?P&lt;group&gt;\w?)", sub, '\n\n'.join(self.puzzle)))

        return solution
</code></pre>

<p>A puzzle is defined graphically by a list of strings as shown in the example below.  </p>

<p>A square is an operator followed by an integer, and an optional group id (a letter).  For example,  '+12' or '*3f'.  All squares and column constraints must line up under the top square in the column (they must overlap). </p>

<p>A constraint is an optional group id, and operator ('=' or '#'), and then an int.  An '=' sign means the formula equals the int.  A '#' means that many squares are ON.  For example, '=8', '#1', or 'f#5'.</p>

<p><code>Puzzle.solver()</code> returns a list of 0/1 that corresponds to the squares in left-to-right, top-to-bottom order.  A '1' means the square is ON and a '0' means it's OFF.  </p>

<p>Here's your example coded for this solver:</p>

<pre><code>puzzle = [
    "         +1a  +2a  *4a  +2          =4",
    "         +2a  *2a  +2a  +1          =5",
    " +1  *2  *2a  *3a  *2a  *3  *4  +8 =24",
    "         +1a  *2a  +2a  *2          =2",
    "         +3   +3   *2   *2          =6",
    "          =6  =12   #1  =6            ",
    "a#6"
    ]

p = Puzzle(puzzle)

p.solve()
</code></pre>

<p>If you pass <code>pretty=True</code> to the <code>Puzzle.solver()</code>, it also prints out a picture of the solution.</p>

<pre><code>p.solve(pretty=True)

              +2a       +2          =4

         +2a       +2a  +1          =5

 +1  *2       *3a           *4     =24

         +1a  *2a                   =2

         +3             *2          =6

          =6  =12   #1  =6            

a#6
</code></pre>
    </div>