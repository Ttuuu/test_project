<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>From a processing efficiency perspective, they are largely indistinguishable. But if I were forced to choose between these two approaches, I might lean towards the latter, wrapping the whole <code>if</code>-<code>else</code> test in a single dispatch to the main queue, for two reasons:</p>

<ol>
<li><p>There is a timing issue: </p>

<p>Let’s assume you ran this from a background thread and <code>active</code> was <code>false</code>, so you asynchronously dispatch the activity indicator update back to the main queue. What if, by the time the main queue gets to the dispatched block, that <code>active</code> is now <code>true</code>? Do you still really want to turn off the activity indicator? No, you almost certainly want to treat the combined test of <code>active</code> and the corresponding updating of the activity indicator as a single operation.</p></li>
<li><p>There is a thread safety issue:</p>

<p>When dealing with this boolean (and I’m assuming it’s a simple boolean, not wrapped in some synchronization mechanism), you should think about how you ensure thread-safe access to it. One really should synchronize access to one’s properties when writing multi-threaded code, and the first approach makes it unclear from which thread are you retrieving <code>active</code> (much less from which thread(s) is it being updated). One very simple synchronization technique to ensure that all reads and writes to <code>active</code> are done on the main queue, which, by virtue of being a serial queue, ensures thread-safety.</p></li>
</ol>

<hr>

<p>A few observations regarding other possible patterns/considerations: </p>

<ol>
<li><p>You might want to consider whether, rather than writing a routine that you manually call to check <code>active</code> and update the activity indicator accordingly (meaning that every time you update <code>active</code>, you have to remember to call this routine), whether you might prefer to just supply the <code>active</code> property an observer that does the updating of the activity indicator for you. If you can have your property automatically trigger the UI update, then it eliminates the possibility of them getting out of sync.</p></li>
<li><p>There are special concerns if the changes to <code>active</code> are happening very quickly:</p>

<ul>
<li><p>First, if <code>active</code> changes are happening extremely quickly (e.g. thousands of times per second), you risk flooding the main queue. You can address these sorts of issues with things like dispatch sources.</p></li>
<li><p>Second, even if it’s only a couple of times per second, you might want to avoid starting and stopping the activity indicator too quickly (because it yields a spinner that is constantly restarting, yielding a “Max Headroom” style of stuttering effect). For example, if <code>active</code> changes every ¼ second, and keeps doing that for 10 seconds, you may want to just want to keep the spinner going for that full 10 seconds, not starting and stopping it repeatedly. You can accomplish this by programming some latency in the “stop activity indicator” routine. E.g. when <code>active</code> is set to <code>false</code>, add non-repeating timer to stop the activity indicator in ½ second, but only after canceling any prior timer, if any. Likewise, when <code>active</code> is set to <code>true</code>, only “start” the activity indicator if you know it’s not already started.<br> </p></li>
</ul>

<p>Bottom line, be aware that the right implementation might depend upon the frequency of changes.</p></li>
</ol>
    </div>