<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your <code>getPixelColor</code> function creates a new array every time it's called, which is likely what ends up triggering the garbage collector.</p>

<p>When dealing with pixel data, libraries often handle each pixel as a single 4-byte integer: the top 8 bits are the red value, the next are the green, the next are the blue, and the last are the alpha. This allows you to eschew arrays by using some simple bitwise arithmetic:</p>

<pre><code>function setPixelColor(cvs, data, row, col, color) {
  const offset = col + cvs.width * row;
  data[offset] = (color &gt;&gt;&gt; 24);
  data[offset + 1] = ((color &gt;&gt;&gt; 16) &amp; 0xff);
  data[offset + 2] = ((color &gt;&gt;&gt; 8) &amp; 0xff);
  data[offset + 3] = ((color &gt;&gt;&gt; 0) &amp; 0xff);
}

function getPixelColor(cvs, data, row, col) {
  const offset = col + cvs.width * row;
  return (
      (data[offset] &lt;&lt; 24)
      | (data[offset + 1] &lt;&lt; 16)
      | (data[offset + 2] &lt;&lt; 8)
      | (data[offset + 3] &lt;&lt; 0)
  );
}
</code></pre>

<p><em>Note: caching the <code>offset</code> value in a local variable saves us some calculations. <code>color &gt;&gt;&gt; 0</code> doesn't affect the value, it's there to coerce the value into an integer instead of the default floating point value JS uses for numbers.</em></p>

<p>This also makes the <code>arr_eq</code> function unnecessary, since you can just use a simple equality operator <code>===</code> to check if two colors match.</p>
    </div>