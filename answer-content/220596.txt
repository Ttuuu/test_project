<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Requirements</strong></p>

<p>The requirements are somewhat imprecise because they rely on untold assumptions about the filenames we should expect. Before implementing anything, we should try to think about the different inputs we can have and how we should handle them.</p>

<p>In our case, this could correspond to:</p>

<ul>
<li>what if the regexp does not match (no underscore or less than 3 numbers) ?</li>
<li>what if we have more than 4 numbers ? Should we consider only the first 4 ?</li>
<li>what if the pattern appears more than once ?</li>
</ul>

<p>In order to tests tests, I've defined the following list of file names from my invention.</p>

<pre><code>files = [
    '.h5',
    '_.h5',
    'foo_.h5',
    'foo_123.h5',
    'foo_1234.h5',
    'foo_1240.h5',
    'foo_12345.h5',
    'foo_12340.h5',
    'foo_12340.h5',
    'foo_12400.h5',
    'foo_12403.h5',
    'foo_123_bar.h5',
    'foo_1234_bar.h5',
    'foo_1240_bar.h5',
    'foo_12345_bar.h5',
    'foo_12340_bar.h5',
    'foo_12400_bar.h5',
    'foo_12403_bar.h5',
    'foo_1234_bar_1240.h5',
    'foo_1240_bar_1234.h5',
]
</code></pre>

<p>From here, changes in the code may be considered wrong as they could change the way the code behaves (on some of the inputs above) but I do not know what the expected behavior is.</p>

<p><strong>Improving the code</strong></p>

<p>The first thing we could do is try to be more robust when the pattern does not match.</p>

<p>Usually after a call to <code>re.search</code>, the next step is "if match" (or "if match is None").</p>

<p>Taking this chance to define variables with better names ("digits" instead of re-using "match" for the string of 4 digits, "n" instead of "digits" from the corresponding integer), we'd have something like:</p>

<pre><code>
for f in files:
    match = re.search(r'_\d{4}', f)
    if match is not None:
        digits = match.group(0)[1:]
        n = int(digits)
        if n % 20 != 0:
            print("remove file " + f + " (" + digits + ")")
            continue
    print("skip file " + f)
</code></pre>

<p><strong>Removing the need for modulo</strong></p>

<p>Division by 20 is simple enough so that the corresponding logic can be moved into the regexp.</p>

<p><em>Disclaimer:</em> This may not correspond to something we usually want to do but it is fun and interesting so let's do it anyway :)</p>

<p>A number is divisible by 20 if and only if:</p>

<ul>
<li><p>last digits is a 0</p></li>
<li><p>the digit before that is divisible by 2</p></li>
</ul>

<p>We could write:</p>

<pre><code>for f in files:
    match = re.search(r'_\d\d[02468]0', f)
    if match is None:
        print("remove file " + f)
    else:
        print("skip file " + f)
</code></pre>

<p><strong>Organisation</strong></p>

<p>It would indeed be worth defining small functions to make your code easier to understand. We could imagine having a function "def file_must_be_deleted(filename)" return a boolean.</p>
    </div>