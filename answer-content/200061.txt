<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Design</h1>

<ul>
<li><p>Is there a need for <code>IEventDispatcher</code>? Defining it as an abstract base class doesn't provide much utility if there's only ever going to be one derived class.</p></li>
<li><p>Is there any requirement for <code>EventDispatcher::eventListeners</code> to be of type <code>std::multimap&lt;EventType, EventHandler&gt;</code>? It doesn't seem like the ordering of elements has much relevance, so a <code>std::unordered_multimap&lt;EventType, EventHandler&gt;</code> might provide better performance. But: The current code doesn't even use any <code>std::multimap</code> specific functionality, so the easiest solution might actually be a <code>std::unordered_map&lt;EventType, std::vector&lt;EventHandler&gt;&gt;</code>.</p></li>
<li><p>There is no way to remove a specific <code>EventHandler</code>, only all <code>EventHandler</code>s registered for an <code>EventType</code>.</p></li>
<li><p>There's no way to pass arguments to an event handler. This might be necessary for some use cases, e.g. to indicate what changed.</p>

<blockquote>
  <p>There's no easy way to provide both general event dispatching (handling multiple different <code>EventType</code>s) and event-specific parameter passing (different parameter types for different events). Some solutions:</p>
  
  <ul>
  <li><p>Redefining the scope of <code>EventDispatcher</code>: Instead of handling multiple events in each <code>EventDispatcher</code> instance each instance is only responsible for handling one specific <code>EventType</code>. The parameter types can then be taken as template parameters.</p></li>
  <li><p>Make <code>EventType</code> a base class and inherit from it when parameters need to be passed (so more like <code>EventArgs</code> in C#). Requires <code>EventType</code> instances to be passed as references or pointers, and <code>EventHandler</code>s need to downcast internally to the concrete derived class. Many possible ways to get this wrong, and the compiler might not be able to help much.</p></li>
  </ul>
</blockquote></li>
</ul>

<h1>Implementation issues</h1>

<ul>
<li><p><code>EventDispatcher::dispatch</code> iterates over all entries in <code>EventDispatcher::eventListeners</code>. Why not use <a href="https://en.cppreference.com/w/cpp/container/multimap/equal_range" rel="nofollow noreferrer"><code>std::multimap::equal_range</code></a> to then only iterate over all entries that match?</p>

<blockquote>
  <p>This would be \$\mathcal{O}(k + \log n)\$ on average instead of \$\mathcal{O}(n)\$ (where \$n\$ denotes the number of all elements in the container, and \$k\$ denotes all elements for the relevant key), or \$\mathcal{O}(k)\$ on average for <code>std::unordered_multimap</code>.</p>
  
  <p>The proposed replacement <code>std::unordered_map&lt;EventType, std::vector&lt;EventHandler&gt;&gt;</code> would also have complexity \$\mathcal{O}(k)\$ (\$\mathcal{O}(1)\$ to find the vector, \$\mathcal{O}(k)\$ to iterate it) - even in the worst case.</p>
</blockquote></li>
<li><p>Rule of Five violation: A custom destructor is declared for <code>EventDispatcher</code>, but no custom copy constructor, copy assignment operator, move constructor and move assignment operators are declared. This prevents the compiler from providing default implementations for those (or soon will, it currently is deprecated for compilers to do so in case of copy constructor and copy assignment operator).</p>

<blockquote>
  <p>It would be easiest to just use the default compiler-provided destructor.</p>
</blockquote></li>
<li><p>Inconsistent naming: <code>IEventDispatcher.h</code> has file extension <code>.h</code>, whereas <code>EventDispatcher.hpp</code> has file extension <code>.hpp</code>.</p></li>
<li><p>In <code>EventDispatcher</code>, all member functions inherited and overridden from <code>IEventDispatcher</code> lack the <code>override</code> keyword.</p></li>
<li><p><code>EventDispatcher::dispatch</code> could be <code>const</code>.</p></li>
</ul>
    </div>