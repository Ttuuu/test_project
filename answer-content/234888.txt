<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>Use of the lambda to process each triple</p>
</blockquote>

<p>Sure, why not. Nothing wrong with using a lambda in <code>main()</code> here instead of writing a normal function.</p>

<blockquote>
  <p>Way of constraining the template to prevent unsuitable lambda's being passed. (C++20 concepts needed to do it cleanly?)</p>
</blockquote>

<p>If you could live with <code>pythag::triple::find()</code> not being <code>constexpr</code>, then you don't need C++20 for this at all. Just use <code>std::function&lt;&gt;</code> for the type of <code>proc</code>:</p>

<pre><code>#include &lt;functional&gt;
...
void find(long max_perim, std::function&lt;void(triple &amp;)&gt; proc) {
    ...
}
</code></pre>

<blockquote>
  <p>Use of initialisers for static data. Also is there a way to get away from the {{ .. {{ .. {},{},{} .. }} .. }} craziness? 4 extra opening and closing braces.</p>
</blockquote>

<p>Yes, by not using <code>std::array&lt;&gt;</code>, but just declaring a multidimensional, "C-style" array:</p>

<pre><code>  static constexpr vec3 U[3][3] {
      {{  1, -2,  2},     // vec3 U[0][0]
       {  2, -1,  2},     // vec3 U[0][1]
       {  2, -2,  3}},    // vec3 U[0][1]

      {{  1,  2,  2},     // vec3 U[1][0]
       {  2,  1,  2},     // vec3 U[1][1]
       {  2,  2,  3}},    // vec3 U[1][2]

      {{ -1,  2,  2},     // vec3 U[2][0]
       { -2,  1,  2},     // vec3 U[2][1]
       { -2,  2,  3}},    // vec3 U[2][2]
  };
</code></pre>

<p>You need to change <code>transform()</code> as well:</p>

<pre><code>  [[nodiscard]] constexpr triple transform(const vec3 T[3]) const noexcept {
    return triple{dot(T[0]), dot(T[1]), dot(T[2])};
  }
</code></pre>

<blockquote>
  <p>Use of specific type for vec3 and a using alias for trans</p>
</blockquote>

<p>I think you could've made <code>vec3</code> an array as well, either <code>std::array&lt;&gt;</code> (at the cost of even more braces) or just <code>int[3]</code>. Since you use <code>trans</code> in multiple places, it's good to have made an alias for it. But what's weird is that you write:</p>

<pre><code>static constexpr auto U = std::array&lt;trans, 3&gt;{...};
</code></pre>

<p>The <code>auto</code> is totally unnecessary here, you could've written it simply as:</p>

<pre><code>static constexpr std::array&lt;trans, 3&gt; U{...};
</code></pre>

<blockquote>
  <p>Body of the transform() function. Is there a map() ... splat way?</p>
</blockquote>

<p>There's <a href="https://en.cppreference.com/w/cpp/algorithm/inner_product" rel="nofollow noreferrer"><code>std::inner_product</code></a> which could replace <code>dot()</code>, and <a href="https://en.cppreference.com/w/cpp/algorithm/transform" rel="nofollow noreferrer"><code>std::transform()</code></a> could have replaced the body of <code>transform()</code>, if your triples and vectors were arrays. It would have looked like:</p>

<pre><code>triple transform(const trans&amp; T) const {
    triple result;
    return std::transform(T.begin(), T.end(), result.values.begin(),
        [this](vec3 V){
            return std::inner_product(V.begin(), V.end(), this-&gt;values.begin(), 0);}
        }
    );
}
</code></pre>

<p>Instead of <code>const long _a, _b, _c</code> you'd have to have something like <code>std::array&lt;long, 3&gt; values</code> to make it work.</p>

<blockquote>
  <p>General function signatures / use of const, constexpr, attributes etc</p>
</blockquote>

<p>Does it really need to be <code>constexpr</code>? It is restricting you (you can't use <code>std::function&lt;&gt;</code> for <code>find()</code> for example), and I don't see any reason why you would ever need to know the number of Pythogorean triples up to some value at compile-time.</p>

<p>Of course, marking things <code>const</code>, <code>constexpr</code>, <code>[[nodiscard]]</code> and so on where possible is a good thing. Keep doing that.</p>

<p>I would however change the type of the components of <code>vec3</code> to <code>long</code>, to match that of the triple itself. You could even think of making an alias for the value type, or make the whole class templated, so you can decide which value type to use.</p>

<blockquote>
  <p>Use of "by value" vs "by ref" semantics for triples / tranforms etc. There are some "arguably redundant" const T&amp;s in there which were just as fast as "by value" (probably copy elided).</p>
</blockquote>

<p>With optimization enabled, any decent compiler will probably generate the same assembly code here, regardless of whether you pass by value or by const reference.
You even missed the possibility to make <code>operator&lt;&lt;()</code> take a const reference.</p>

<blockquote>
  <p>More algorithmic question: The algorithm as implemented is constrained by max_perimeter and due to recursive DFS flow and the matrix transforms the triples come out in a (subjectively) "weird order". Several other constraints and orderings are conceivably possible. One idea is to implement several alternative .find_XX() methods to do that.</p>
</blockquote>

<p>What algorithm is best depends on the application. Your recursive DFS algorithm is probably the most elegant one to implement, but apart from the weird output order, the main issue is that you can run out of stack space if the recursion goes too deep. So try to implement another algorithm that doesn't require recursive function calls.</p>
    </div>