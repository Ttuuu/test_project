<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First of all, when I start writing decorators of more than moderate complexity, and especially if they take parameters, I usually transition to writing them as classes - I find that easier to reason about and understand.</p>

<p>Second of all, in 100% of decorators I've ever written, I've wanted the decorator to <a href="https://docs.python.org/2/library/functools.html#functools.update_wrapper" rel="nofollow noreferrer">look like the wrapped function</a>.  To do this, just use <a href="https://docs.python.org/2/library/functools.html#functools.wraps" rel="nofollow noreferrer"><code>functools.wraps()</code></a>.</p>

<p>Next, I think you have some weirdness in your api. I would expect <code>logger</code> to default to some default logger, and I would expect <code>logger_attr</code> to only be used to override whatever that logger is.  I also don't like that you're explicitly calling <code>print</code> in the decorator - instead you should always use the logger, and if they want one that just calls print, or if that is the default, you should provide that.  As an additional note, if <code>logger_attr</code> is a string then you can simplify the implementation a bit to look like this </p>

<pre><code>logger = getattr(instance, attr_name, logger)
logger.log(level, message)
</code></pre>

<p>Next, you've limited yourself to some pretty static forms of backoff by making it a number. Instead, make it be a generator.  Then you can do something like this</p>

<pre><code>def doubling_backoff(start):
    if start == 0:
        start = 1
        yield start
    while True:
        start *= 2
        yield start

def no_backoff(start):
    while True:
        yield start
</code></pre>

<p>and then in your decorator, it looks like this</p>

<pre><code>backoff_gen = backoff(delay)
while max_tries &gt; 1:
    try:
        return f(*args, **kwargs)
    except exceptions as e:
        message = "Exception {} caught, retrying {} more times.".format(e.message, max_tries)

        instance = args[0]
        logger = getattr(args[0], attr_name, logger)
        logger.log(level, message)

        time.sleep(delay)
        delay = next(backoff_gen)
        max_tries -= 1
</code></pre>

<p>This lets you add much more complex backoff algorithms as needed.</p>

<p>Lastly, I think your comments don't really add much value to the code - reading the code is self-explanatory. I also don't think that promoting the values to local variables is worthwhile, but given that this is somewhat time sensitive then it might be. I removed that, but YMMV.</p>

<p>My end result looked something like this:</p>

<pre><code>import time
import logging
import functools

class DefaultLogger(object):

    def log(self, level, message):
        print(message)        

def doubling_backoff(start):
    if start == 0:
        start = 1
        yield start
    while True:
        start *= 2
        yield start

def no_backoff(start):
    while True:
        yield start               

class RetryAndCatch(object):

    def __init__(exceptions_to_catch, num_tries=5, logger=DefaultLogger(), log_level=logging.ERROR, logger_attribute='', delay=0, backoff=no_backoff)
        self.exceptions = exceptions_to_catch
        self.max_tries = num_tries
        self.tries = num_tries
        self.logger = logger
        self.level = log_level
        self.attr_name = logger_attribute
        self.delay = delay
        self.backoff = backoff

    def __call__(self, f):
        @functools.wraps(f)
        def retrier(*args, **kwargs):
            backoff_gen = self.backoff(delay)
            try:
                while self.tries &gt; 1:
                    try:
                        return f(*args, **kwargs)
                    except self.exceptions as e:
                        message = "Exception {} caught, retrying {} more times.".format(e.message, self.tries)

                        instance = args[0]
                        self.logger = getattr(args[0], self.attr_name, self.logger)
                        self.logger.log(self.level, message)

                        time.sleep(self.delay)
                        self.delay = next(backoff_gen)
                        self.tries -= 1

                return f(*args, **kwargs)
            finally:
                self.tries = self.max_tries
        return retrier
</code></pre>

<p>As an aside, I wrote a somewhat similar decorator and asked about it here <a href="https://codereview.stackexchange.com/questions/97681/memoizing-decorator-that-can-retry">Memoizing decorator that can retry</a>, but the backoff idea is pretty cool and I might incorporate that into mine.</p>
    </div>