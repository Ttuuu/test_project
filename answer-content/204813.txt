<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I would try to extract some of the common functionality into reusable components as follows. The <code>NumericButton</code> and <code>OperatorButton</code> components could either receive <code>selectNumber</code> and <code>selectOperator</code> as props or the components could be connected components with the <code>select*</code> props coming from <code>mapDispatchToProps</code>. The connected component method eliminates the need to pass the prop in every component instance in <code>ButtonContainer</code>, but increases the number of connected components thus adding some complexity.</p>

<pre><code>const CalculatorButton = ({ children, className, onClick, value}) =&gt; {
  return &lt;button value={value} onClick={e =&gt; onClick(e.target)} className={`buttonStyle ${className || ''}`} type="submit"&gt;{children || value}&lt;/button&gt;;
};

const NumericButton = ({ className, value }) =&gt; {
  return &lt;CalculatorButton className={className} onClick={selectNumber} value={value} /&gt;;
};

const OperatorButton = ({ className, value }) =&gt; {
  return &lt;CalculatorButton className={className} onClick={selectOperator} value={value} /&gt;
};

const ButtonsContainer = () =&gt; (
  &lt;React.Fragment&gt;
    &lt;CalculatorButton className="ac" onClick={() =&gt; initialize()} value="AC" /&gt;
    &lt;CalculatorButton className="ce" onClick={() =&gt; clearEntry()} value="CE" /&gt;
    &lt;CalculatorButton className="posneg" onClick={changeSign} value="CHANGE"&gt;{'+/-'}&lt;/CalculatorButton&gt;
    &lt;OperatorButton className="divide" value="/" /&gt;
    &lt;NumericButton className="seven" value="7" /&gt;
    &lt;NumericButton className="eight" value="8" /&gt;
    &lt;NumericButton className="nine" value="9" /&gt;
    {/* etc. */}
  &lt;/React.Fragment&gt;
);
</code></pre>
    </div>