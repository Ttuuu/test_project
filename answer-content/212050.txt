<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Global Variables</h2>

<blockquote>
<pre><code>Dim sheetCount As Integer
Dim datatoFind
</code></pre>
</blockquote>

<p>Global variables make the code harder to maintain, modify, and debug.  It would be better to pass the data as parameters between the sub routines.  This makes it easier to determine exactly what data is being passed into your subroutines.</p>

<p><code>Private</code> or <code>Public</code> modifiers should be used instead of <code>Dim</code> when declaring a global variable. </p>

<h2>Constant Expressions</h2>

<blockquote>
<pre><code>Dim mainSheet As String: mainSheet = "All Programs"
Dim nameColumnStart As String: nameColumnStart = "A"
Dim startColumn As Integer: startColumn = 10 'J Column'
Dim EndColumn As Integer: EndColumn = 33 'AG Column'
</code></pre>
</blockquote>

<p>The variables above should be declared as constants.</p>

<blockquote>
<pre><code>Const mainSheet As String = "All Programs"
Const nameColumnStart As String = "A"
Const startColumn As Integer = 10 'J Column'
Const EndColumn As Integer = 33 'AG Column'
</code></pre>
</blockquote>

<h2>namesStart and namesEnd</h2>

<p>Why initiate the values below if you are not going to use the initial values?</p>

<blockquote>
<pre><code>Dim namesStart As Integer: namesStart = 1
Dim namesEnd As Integer: namesEnd = 200


namesStart = InputBox("Please enter start value")
namesEnd = InputBox("Please enter end value")
</code></pre>
</blockquote>

<p>Consider using <a href="https://docs.microsoft.com/en-us/office/vba/api/excel.application.inputbox" rel="nofollow noreferrer">Application.InputBox</a> because you can specify the type of data it returns.</p>

<blockquote>
<pre><code>Dim namesStart As Integer
Dim namesEnd As Integer
Const namesStartDefault As Integer = 1
Const namesEndDefault As Integer = 200

namesStart = Application.InputBox(Prompt:="Please enter start value", Default:=namesStartDefault, Type:=1)
namesEnd = Application.InputBox(Prompt:="Please enter end value", Default:=namesEndDefault, Type:=1)

If namesStart &lt; namesStartDefault Then
    MsgBox "Start vaule must be greater than or equal to " &amp; namesStartDefault, vbCritical
    Exit Sub
End If
</code></pre>
</blockquote>

<h2>Selecting and Activating Objects</h2>

<p>Selecting and Activating Objects should be avoided unless absolutely necessary, watch <a href="https://www.youtube.com//watch?v=c8reU-H1PKQ&amp;index=5&amp;list=PLNIs-AWhQzckr8Dgmgb3akx_gFMnpxTN5" rel="nofollow noreferrer">Excel VBA Introduction Part 5 - Selecting Cells (Range, Cells, Activecell, End, Offset)</a>.   I would wager to bet that of the 20 minutes that it takes to run your code 19+ minutes are spent needlessly activating worksheets.  </p>

<p>Using <code>Application.ScreenUpdating = False</code> would probably cut the time in half.</p>

<h2>Function Find_Data</h2>

<p><code>SpecialCells(xlLastCell)</code> should only be used when you don't know the data structure.  </p>

<p><code>lastCol</code> isn't used.</p>

<blockquote>
<pre><code> lastCol = ActiveCell.SpecialCells(xlLastCell).Column
</code></pre>
</blockquote>

<p><code>vRow</code> is never declared.  The <code>v</code> prefix implies a variant when it should clearly be long.</p>

<p><code>ColumnName</code> implies a string value.  I would use <code>CoumnIndex</code> instead.</p>

<h2>Refactored Code</h2>

<pre><code>Private Const mainSheet As String = "All Programs"

Private Sub CommandButton1_Click()
    Application.ScreenUpdating = False
    Const LastColumn = 34
    Dim namesStart As Integer
    Dim namesEnd As Integer
    Const namesStartDefault As Integer = 1
    Const namesEndDefault As Integer = 200

    namesStart = Application.InputBox(Prompt:="Please enter start value", Default:=namesStartDefault, Type:=1)
    namesEnd = Application.InputBox(Prompt:="Please enter end value", Default:=namesEndDefault, Type:=1)

    If namesStart &lt; namesStartDefault Then
        MsgBox "Start vaule must be greater than or equal to " &amp; namesStartDefault, vbCritical
        Exit Sub
    End If

    Dim r As Long, c As Long
    With ThisWorkbook.Worksheets(mainSheet)
        For r = namesStartDefault To namesEndDefault
            For c = 2 To LastColumn
                .Cells(r, c).Value = Find_Data(.Cells(r, 1).Value, c)
            Next
        Next
    End With

End Sub

Private Function Find_Data(ByVal EmployeeName As String, ByVal ColumnIndex As Integer) As Single
    Dim result As Single
    Dim ws As Worksheet
    Dim r As Long
    For Each ws In ThisWorkbook.Worksheets
        With ws
            If Not .Name = mainSheet Then
                For r = 2 To .Range("A" &amp; .Rows.Count).End(xlUp).Row
                    If InStr(1, .Cells(r, 1).Value, EmployeeName, vbTextCompare) &gt; 0 Then
                        result = result + .Cells(r, ColumnIndex).Value
                    End If
                Next
            End If
        End With
    Next
    Find_Data = result
End Function
</code></pre>
    </div>