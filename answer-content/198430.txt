<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The other reviews have already covered the most important bits, so I'll just address a few things not already mentioned.</p>

<h2>Use your own function</h2>

<p>If you have <code>strdup</code> available, the <code>operator""_cstr</code> can become a one-liner:</p>

<pre><code>char * operator"" _cstr(unsigned long long int num) {
    return strdup(operator""_str(num).c_str());
}
</code></pre>

<p>If you don't have <code>strdup</code> (it's a standard POSIX, but not standard C++ function), one could easily create one or simply write the few lines of code to create the equivalent.  Alternatively, one could use the other operator as a base from which to construct a string, but I like this direction better.  In fact, I'd probably not provide a <code>cstr</code> operator at all because of the ugliness it introduces for memory management.</p>

<h2>Perform static checking</h2>

<p>Instead of using <code>abi::__cxa_demangle()</code> which is, as you know, non-portable, we can do this:</p>

<pre><code>static_assert(std::is_same&lt;decltype(str), std::string&gt;(), 
    "str does not match expected type 'std::string'\n");
static_assert(std::is_same&lt;decltype(cstr), char *&gt;(), 
    "cstr does not match expected type 'char *'\n");
</code></pre>

<p>One could even go crazy and define an ugly macro for this:</p>

<pre><code>#define TYPE_CHECK(str, tipo) \
   static_assert(std::is_same&lt;decltype(str), tipo&gt;(), \
       # str " does not match expected type '" # tipo "'\n")
</code></pre>

<p>Then use it as:</p>

<pre><code>TYPE_CHECK(str, std::string);
TYPE_CHECK(cstr, const char *);
</code></pre>
    </div>