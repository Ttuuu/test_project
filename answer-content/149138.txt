<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There's a few key optimisations that, on my machine, takes the execution time of your function down to 10 seconds (my 2.5 GHz Intel Core i7).</p>

<p>Check out your main loop; you're incrementing the possibilities with <code>++</code>, but since you know the answer must be a multiple of 20, so why not start at 20, then increment with <code>x+=20</code>; then just check if it's divisible by 19, 18, etc. This gives you a 20x speedup.</p>

<p>Second, you don't need to check every factor; if your <code>x</code> is divisible by 20, then it's also divisible by 10; if it's divisible by 18 it's divisible by 9; if it's divisible by 16 then it's divisible by 8. And so on. So the only factors you need to check are 20..11.  10...1 are already covered. (BTW, going from 20 down is a good direction.)</p>

<p>Third, quit out as soon as it's proved not a suitable candidate. That's the biggest gain.</p>

<pre><code>        for (long x = 20; true; x+=20) {
                bool dividable = true;

            for (int y = 20; y &gt;= 11; y--) {
                if (x % y != 0) {
                    dividable = false;
                    break;
                }
            }

            if (dividable == true) {
                Console.WriteLine(x);
                break;
            }
        }
</code></pre>
    </div>