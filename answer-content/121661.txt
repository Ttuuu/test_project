<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Specifying a key</h3>

<p>From a UX perspective, I think it will help if you can also indicate that the key should either be prefixed with <code>0x</code>, so that you will treat it as a hexadecimal value, or it should be an integer.</p>

<h3>Code duplication</h3>

<p>And speaking about parsing the input keys, there's some code duplication in <code>App.processArguments(String[])</code> and <code>MyActionListener.actionPerformed(ActionEvent)</code>. You should consider refactoring the integer parsing part out so that it can be shared in both places.</p>

<h3>Getting a file list</h3>

<pre><code>private List&lt;File&gt; getFileList(String[] args) {
    // We subtract 2 in order to omit the fist two arguments in 'args' that
    // are the switch and the key.
    List&lt;File&gt; fileList = new ArrayList&lt;&gt;(args.length - 2);

    for (int i = 2; i &lt; args.length; ++i) {
        fileList.add(new File(args[i]));
    }

    return fileList;
}
</code></pre>

<p>I think it'll be better if a processed <code>args</code> array <em>without</em> the initial command-line arguments is passed in here. Anyways, assuming if you prefer to keep to the current approach, you can use the familiar stream processing for this too:</p>

<pre><code>private List&lt;File&gt; getFileList(String[] args) {
    return Arrays.stream(args)
                    .skip(2)
                    .map(File::new)
                    .collect(Collectors.toList());
}
</code></pre>

<p>In fact, this will make refactoring easier when <code>args</code> no longer have the additional arguments: you can just remove the line <code>.skip(2)</code>.</p>
    </div>