<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Documentation</h2>
<pre><code>"""
returns the directory if the path is a directory, and it exists otherwise asks to input again
"""
</code></pre>
<p>OK; but that's not what this function does at all. The "asking to input again" is done elsewhere.</p>
<h2>Type hints</h2>
<p>Guessing for this signature; type hints would remove the guesswork:</p>
<pre><code>def format_output(matched_paths, matched_dict):
</code></pre>
<p>could become</p>
<pre><code>def format_output(
    matched_paths: Iterable[str],
    matched_dict: Dict[
        str,
        Dict[str, str]
    ],
):
</code></pre>
<p>If this is true, the second type is complex enough that it could benefit from external declaration, i.e.</p>
<pre><code>MatchesDict = Dict[
    str,
    Dict[str, str]
]
</code></pre>
<h2>Dictionary iteration</h2>
<pre><code>for path in matched_paths:
    for line, matches in matched_dict[path].items():
        for match in matched_dict[path][line]:
</code></pre>
<p>should be</p>
<pre><code>for path in matched_paths:
    for line, matches in matched_dict[path].items():
        for match in matches:
</code></pre>
<p>In other words, <code>items</code> gets you a key and a value; when you have the value, use it.</p>
<h2>Logic inversion</h2>
<p>I find that this:</p>
<pre><code>    if re.search(string, path.read_text()):
        matched_dict[path] = dict()
        for i, line in enumerate(text_file.readlines()): # i refers to line number
            matches = list(re.finditer(string, line))
            if matches:
                matched_dict[path][i] = []

                for m in matches:
                    matched_dict[path][i].append(m.span())
        return True
    return False
</code></pre>
<p>is more legible as</p>
<pre><code>    if not re.search(string, path.read_text()):
        return False

    matched_dict[path] = dict()
    for i, line in enumerate(text_file.readlines()): # i refers to line number
        matches = list(re.finditer(string, line))
        if matches:
            matched_dict[path][i] = []
             for m in matches:
                matched_dict[path][i].append(m.span())
    return True
</code></pre>
    </div>