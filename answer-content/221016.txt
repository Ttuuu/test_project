<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>This is supported by convenience extensions:</p>

<pre><code>public static FingerprintBuilder&lt;T&gt; For&lt;T&gt;(
         this FingerprintBuilder&lt;T&gt; builder, 
         Expression&lt;Func&lt;T, string&gt;&gt; expression, StringOptions options)
     {
         Func&lt;string, string&gt; format = input =&gt;
     {
        if (ignoreCase)
        {
            input = input.ToUpperInvariant();
        }

        if (ignoreWhiteSpace)
        {
            input = input.Trim();
        }

        return input;
    };

    return builder.For(expression, input =&gt; format(input));
}
</code></pre>
</blockquote>

<p>Not convenient enough for extended unicode and combining characters. Unless you only work with 16-bit characters ;-)</p>

<pre><code>[Flags]
public enum StringOptions : uint
{
    None = 0,
    IgnoreCase = 1 &lt;&lt; 0,
    IgnoreWhiteSpace = 1 &lt;&lt; 1,
    PrimaryForm = 1 &lt;&lt; 2,
    CompatabilityForm = 1 &lt;&lt; 3,
    NormalisationFormMask = PrimaryForm | CompatabilityForm
}

public static FingerprintBuilder&lt;T&gt; For&lt;T&gt;(
        this FingerprintBuilder&lt;T&gt; builder, 
        Expression&lt;Func&lt;T, string&gt;&gt; expression, StringOptions options)
    {
        var format = (Func&lt;string, string&gt;)(input =&gt;
        {
            if (options.HasFlag(StringOptions.NormalisationFormMask)) {
                var form = default(NormalizationForm);
                var isPrimary = options.HasFlag(StringOptions.PrimaryForm);
                var isCompatible = options.HasFlag(StringOptions.CompatabilityForm);
                // yes, could be written more elegantly
                if (isPrimary) {
                    if (isCompatible) {
                        form = NormalizationForm.FormKC;
                    }
                    else {
                        form = NormalizationForm.FormC;
                    }
                }
                else {
                    if (isCompatible) {
                        form = NormalizationForm.FormKD;
                    }
                    else {
                        form = NormalizationForm.FormD;
                    }
                }
                input = input.Normalize(form);
            }

            if (options.HasFlag(StringOptions.IgnoreCase)) {
                input = input.ToUpperInvariant();
            }
            if (options.HasFlag(StringOptions.IgnoreWhiteSpace)) {
                input = input.Trim();
            }
            return input;
        });

        return builder.For(expression, input =&gt; format(input));
    }
</code></pre>
    </div>