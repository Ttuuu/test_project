<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Firstly, <code>main()</code> must return an <code>int</code>:</p>

<pre><code>int main(void)
</code></pre>

<p>We can make the array initialization easier to read with judicious use of whitespace:</p>

<pre><code>static const int N = 5;
const int pixel_array[5][5] =
    {
     {1,  3,  6,  10, 15},
     {2,  5,  9,  14, 19},
     {4,  8,  13, 18, 22},
     {7,  12, 17, 21, 24},
     {11, 16, 20, 23, 25}
    };
</code></pre>

<p>Instead of the <code>if</code>/<code>else</code> inside the loop, notice that the <code>else</code> is only taken on the last iteration, and move that out:</p>

<blockquote>
<pre><code>for (int row = 0; row &lt; N; row++)
{
    if (row &lt; N - 1)
    {
        for (int temp_row = row, col = 0; temp_row &gt;= 0; temp_row--, col++)
            printf("%d ", pixel_array[temp_row][col]);
    }
    else
    {
        for (int col = 0; col &lt; N; col++)
            for (int temp_col = col, temp_row = N - 1; temp_col &lt; N; temp_col++, temp_row--)
                printf("%d ", pixel_array[temp_row][temp_col]);
    }
}
</code></pre>
</blockquote>

<p>becomes</p>

<pre><code>for (int row = 0;  row &lt; N - 1;  row++)
{
    for (int temp_row = row, col = 0; temp_row &gt;= 0; temp_row--, col++)
        printf("%d ", pixel_array[temp_row][col]);
}

/* row == N - 1 */
for (int col = 0;  col &lt; N;  col++)
    for (int temp_col = col, temp_row = N - 1; temp_col &lt; N; temp_col++, temp_row--)
        printf("%d ", pixel_array[temp_row][temp_col]);
</code></pre>

<p>We can move the printing of the main diagonal to the first loop, so that its condition is <code>row &lt; N</code> and remove it from the second loop by starting <code>col</code> at <code>1</code>.  Also observe that <code>temp_row</code> and <code>temp_col</code> can always be derived from <code>row</code> and <code>column</code>:</p>

<pre><code>for (int row = 0;  row &lt; N;  ++row) {
    for (int col = 0;  col &lt;= row;  ++col) {
        printf("%d ", pixel_array[row-col][col]);
    }
}

for (int col = 1;  col &lt; N;  ++col) {
    for (int row = N - 1;  row &gt;= col;  --row) {
        printf("%d ", pixel_array[row][col+N-1-row]);
    }
}
</code></pre>
    </div>