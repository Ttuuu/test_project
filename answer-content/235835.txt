<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Since you're using <code>malloc</code>, <code>realloc</code>, and <code>free</code> for memory management, your class can only be instantiated with POD classes.  Any class with a constructor, destructor, or copy assignment operator may not work with your <code>myVector</code> class because these special functions will not be called.</p>

<p>The copy constructor is wrong.  Since it uses copy assignment, and the copy assignment operator assumes that <code>this</code> is a valid object, you will try to free a pointer (<code>free(m_Buffer)</code>) that has not been initialized.  The same applies to the other constructors that use assignment to initialize the object.</p>

<p>In addition, your copy assignment operator does not handle assignment to self (<code>a = a;</code>).  Although rare, if it happens to occur you will free memory then try to read from it.</p>

<p><code>pop</code> functions typically remove the last element.  Specifying a number to remove is atypical.  Calling that parameter <code>index</code> is potentially confusing.  Do you pass the index of the one element to remove?  Is the index the last element to keep, or the last one to remove?  You're using it as a count of elements to remove.</p>

<p>Specifying the <code>inline</code> keyword for <code>used</code> and <code>size</code> is redundant. Since the function definitions are supplied, they are implicitly inline.</p>

<p><code>reserve</code> has a <code>return 1;</code> but the return type is a bool.  While that <code>1</code> will be converted to a bool value of <code>true</code>, it would be cleaner to specify <code>return true;</code> directly.  And what does the return value mean?  There's no documentation for any of your functions.</p>

<p><strong>Resizing</strong></p>

<p>You are nearly always resizing the array, both when you add something and when you remove it via <code>pop</code>.  The only time this doesn't happen is if you <code>reserve</code> some memory first then add to it via <code>push</code>.  If you remove an element you throw out the extra memory and resize down to the minimum required.</p>

<p><code>changeSize</code> should, generally, not be called when removing elements.  When adding elements, and you need to add more storage space, you should base the new space on the existing size.  Doubling is very common, although I have seem implementations that use a 1.5 multiplier.</p>
    </div>