<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Been a while since I coded PHP, but I'll give it a shot. I'll stick to the conversion functions for this (don't want to re-read the imagemagick PHP API).</p>

<p>Overall, I found the following things:</p>

<ul>
<li><p>Naming.<br>
Your function names are <code>alloneword</code>. Use <code>snake_case</code> instead, like most of PHP tends to do. Also, you have a lot of variables that are UPPERCASE, like <code>$R</code>, <code>$G</code>, and <code>$B</code>, though there's really no reason. Personally, I'd stick to lowercase or perhaps <code>camelCase</code> for variables. Classes are named with <code>PascalCase</code> and constants are <code>ALL_CAPS_AND_UNDERSCORES</code>, but nothing else should start with a capital letter.</p></li>
<li><p>Whitespace.<br>
Use more spaces, please. It makes it <em>a lot</em> easier to read a line like <code>fmod((($G-$B)/$Cdelta),6);</code> if you give a bit of breathing room.</p></li>
<li><p>Parentheses.<br>
Use <em>fewer</em>, please. For instance, you've wrapped all your ternaries, though they don't all have to be. <code>echo $x ? $y : $z</code> works the same as <code>echo ($x ? $y : $z)</code>. Also, you're unnecessarily putting parentheses around function calls, like this:</p>

<pre><code>($Cdelta/(1-(abs(2*$L - 1)))))*100
</code></pre>

<p>That is <em>a lot</em> of close-parens in a row there. But the same can be written as:</p>

<pre><code>100 * $Cdelta / (1 - abs(2 * $L - 1))
</code></pre>

<p><a href="http://php.net/manual/en/language.operators.precedence.php" rel="nofollow">Multiplication is handled before division</a>, and the <code>abs</code> call already has parentheses, so no need to wrap it further. Also note the extra bit of spacing.</p></li>
</ul>

<p>Another example of the last two points:</p>

<pre><code>} elseif (($H &gt;= 1)&amp;&amp;($H &lt; 2)){
</code></pre>

<p>Why have a space after <code>elseif</code>, but no space between the close-parenthesis and the opening brace (<code>){</code>)? Why wrap the comparisons in parentheses? The same could be written more readably as just:</p>

<pre><code>} elseif ($H &gt;= 1 &amp;&amp; $H &lt; 2) {
</code></pre>

<p>More specific review items (just going from the top):</p>

<pre><code>function validatergb($key){  //doesnt really need to be a own function
</code></pre>

<p>Firstly, spellcheck your comments. Secondly, if it doesn't need to be its own function, why <em>is</em> it its own function? Thirdly, this function does not "validate" anything. It <em>clamps</em> a value to the range 0-255. And lastly, why the name <code>$key</code>? If anything, a single component color of RGB is called a "channel" or simply a "value".</p>

<p>Here's my interpretation:</p>

<pre><code>function clamp_rgb_channel($value) {
    return min(max($value, 0), 255);
}
</code></pre>

<p>With regard to <code>rgb2hsl</code>, here's my take. Just general clean-up and some mild refactoring:</p>

<pre><code>function rgb2hsl($r = 0, $g = 0, $b = 0) {
    // you may inline the min(max()) clamping, if you
    // don't want to use a separate function for it
    $r = clamp_rgb_channel($r) / 255.0; 
    $g = clamp_rgb_channel($g) / 255.0;
    $b = clamp_rgb_channel($b) / 255.0;

    // note: No need to use an array; min and max are variadic
    $maxC = max($r, $g, $b);
    $minC = min($r, $g, $b);
    $deltaC = $maxC - $minC;

    if ($deltaC == 0){
        $h = 0;
        $s = 0; // we might as well set this too
    } else {
        $s = $deltaC / (1 - abs(2 * $l - 1));
        switch ($maxC){
            case $r:
                $h = fmod(($g-$b) / $deltaC, 6);
                break;
            case $g:
                $h = (($b-$r) / $deltaC) + 2.0;
                break;
            case $b:
                $h = (($r-$g) / $deltaC) + 4.0;
                break;
            default:
                $h = 0;
        }
    }

    $l = ($maxC + $minC) / 2;

    // put all the final multiplication at the end; bookends
    // nicely with the initial division-by-255
    $h *= 60;
    $l *= 100;
    $s *= 100;

    return array($h, $s, $l);
}
</code></pre>

<p>I'll leave off here, since some of these points can be applied to the rest of the code as well.</p>

<p>Only thing to note is that you sometimes use ternaries where a simple <code>if</code> would be clearer, because there's only one branch. For instance:</p>

<pre><code>$H = ($H &lt; 0 ? $H += 360 : $H);
</code></pre>

<p>For one, those parentheses are unnecessary, but then so is the ternary. It'd be simpler to just say:</p>

<pre><code>if ($H &lt; 0) {
    $H += 360;
}
</code></pre>

<p>Or:</p>

<pre><code>if ($H &lt; 0) $H += 360;
</code></pre>

<p>But I recommend <em>always</em> using braces, even for one-liners. An extra keystroke or two never hurt anyone, and only makes the code absolutely unambiguous.</p>

<p>Of course, there's the risk that <code>$H</code> is waaay below zero, in which case adding 360 still wouldn't bring it above zero. Hence, you'll want to use <code>$H % 360</code> instead. You might even do something like this, if you still want the ternary:</p>

<pre><code>$value %= 360;
$value &gt;= 0 ?: $value += 360;
</code></pre>

<p>That <code>?:</code> is <a href="https://en.wikipedia.org/wiki/Elvis_operator" rel="nofollow">so-called the Elvis operator</a>, by the way. I wouldn't actually recommend coding like this - it's fairly convoluted - but I couldn't help but use the Elvis operator somewhere.</p>
    </div>