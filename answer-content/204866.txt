<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><p><strong>Naming</strong>. What <code>run</code> iterates over is known as a direct (or Cartesian) product. It seems that <code>namespace direct_product</code> is more descriptive than <code>nestedFor</code>.</p></li>
<li><p><strong>Parallel arrays</strong> (<code>runIterators, startIterators, endIterators</code>) remind me good old days of Fortran. It is definitely an anti-idiomatic C++. Consider a single vector of</p>

<pre><code>struct iterators {
    Iter runIterator,
    Iter startIterator,
    Iter endIterator,
    // Constructors, assignment, increment, and anything else which is needed
}
</code></pre>

<p>You will need much less lines to express the <em>increment a vector</em> idiom.</p></li>
<li><p>I strongly recommend to use a class instead of namespace. This way an initialization loop naturally becomes a constructor, and the actual loop becomes unnecessary. Define an iterator over states of the product, <code>operator++</code> and <code>operator*</code> for it. This lifts the callback out of your responsibility, and enables the client to write</p>

<pre><code>direct_product dp{....};
for (auto it = dp.begin(); it != dp.end(); ++it) {
    fun(*it);
}
</code></pre>

<p>or even a range-based loop.</p></li>
<li><p>Kudos for not resorting to recursion.</p></li>
</ul>
    </div>