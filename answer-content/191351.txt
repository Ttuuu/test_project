<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<p>How does the es-6 usage look? What would you change and/or code differently?</p>
</blockquote>
<h3>1. Arrow Functions</h3>
<p>I would personally recommend using <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions" rel="nofollow noreferrer">arrow functions</a> where you have not to stay consistent with the ES6 usage throughout your code.</p>
<p><strong>Example:</strong></p>
<pre><code>;(function() {
</code></pre>
<p>... can be changed to:</p>
<pre><code>;(() =&gt; {
</code></pre>
<p>Additionally, parenthesis are optional when only one parameter is given.</p>
<p><strong>Example:</strong></p>
<pre><code>document.addEventListener('click', (event) =&gt; timeout ...
</code></pre>
<p>... can be changed to:</p>
<pre><code>document.addEventListener('click', event =&gt; timeout ...
</code></pre>
<hr>
<h3>2. Constant Arrow Function Expressions</h3>
<p>Since it does not appear that you have any intention of overwriting your functions, I would recommend using function expressions defined as constants, rather than function declarations.</p>
<p><strong>Example:</strong></p>
<pre><code>function updateTitle(showAsterisk = false) {
</code></pre>
<p>... can be changed to:</p>
<pre><code>const updateTitle = (showAsterisk = false) =&gt; {
</code></pre>
<hr>
<h3>3. Don't Use <code>var</code></h3>
<p>If you can use <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let" rel="nofollow noreferrer"><code>let</code></a> or <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const" rel="nofollow noreferrer"><code>const</code></a>, use them instead.</p>
<p><strong>Example:</strong></p>
<pre><code>var titleMatches = document.title.match(/^([\W]{1})Review/);
</code></pre>
<p>... can be changed to:</p>
<pre><code>const titleMatches = document.title.match(/^([\W]{1})Review/);
</code></pre>
<hr>
<h3>4. The <code>window.</code> Prefix is Unnecessary</h3>
<p>You do not need to use the <code>window</code> prefix on <code>window.setTimeout</code>, <code>window.clearTimeout</code>, or <code>window.location</code>.</p>
<p><strong>Example:</strong></p>
<pre><code>window.clearTimeout(timeout);
</code></pre>
<p>... can be changed to:</p>
<pre><code>clearTimeout(timeout);
</code></pre>
<hr>
<h3>Final Result</h3>
<p>Ultimately, the final result of the changes I would make would look like the following:</p>
<pre><code>// ==UserScript==
// @name         Highlight active review
// @namespace    http://tampermonkey.net/
// @version      0.1
// @description  Bring attention to the user when a post is up for reviewing
// @author       Sam Onela
// @match        https://codereview.stackexchange.com/review/*
// ==/UserScript==

;(() =&gt;
{
    'use strict';
    
    const INITIAL_CHECK_TIMEOUT = 1500;
    const INTERVAL_DELAY        = 400;
    const RELOAD_DELAY          = 6500;
    const CLICK_CHECK_DELAY     = 6000;
    const ticks                 = [
        '⠋', '⠙', '⠹', '⠸', '⠼', '⠴', '⠦', '⠧', '⠇', '⠏'
    ];
    
    let timeout = setTimeout(check, INITIAL_CHECK_TIMEOUT);
    let interval;
    
    const updateTitle = (showAsterisk = false) =&gt;
    {
        let titleMatches = document.title.match(/^([\W]{1})Review/);
        
        if (titleMatches &amp;&amp; titleMatches.length &gt; 1)
        {
            const index    = ticks.indexOf(titleMatches[1]);
            document.title = document.title.replace(titleMatches[1], ticks[( index + 1) % ticks.length]);
        }
        
        else
        {
            document.title = (showAsterisk ? '*' : ticks[0]) + document.title;
        }
    };
    
    const check = (clickHandlerAdded = false) =&gt;
    {
        if (timeout)
        {
            clearTimeout(timeout);
            timeout = 0;
        }
        
        if (window.location.pathname.match(/\d+/)) // drilled in to a review item
        {
            updateTitle(true);
            
            if (!clickHandlerAdded)
            {
                document.addEventListener('click', event =&gt; timeout = setTimeout(check, CLICK_CHECK_DELAY, true));
            }
        }
        
        else //add spinner animation and then reload
        {
            updateTitle();
            
            if (interval === undefined)
            {
                interval = setInterval(updateTitle, INTERVAL_DELAY);
            }
            
            setTimeout(_ =&gt; window.location = window.location, RELOAD_DELAY);
        }
    };
    
})();
</code></pre>
<p>Hope this helps!</p>
    </div>