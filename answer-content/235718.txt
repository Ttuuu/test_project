<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First of all, that's quite a robust approach from the architectural point of view. The only drawbacks are in the inconsistent implementation.</p>

<h3>1. Autoload.</h3>

<p>Forget about <code>require_once</code> forever. </p>

<ul>
<li>use namespaces</li>
<li>store your classes in catalogs the the same name as namespaces</li>
<li>either call <code>spl_autload_register()</code> manually with a simple function that will require your classes automatically, or tell Composer to do that for you</li>
</ul>

<h3>2. Connection.</h3>

<p>This issue is rather big. In no time you will get "Too many connections error" because every instance of every repository <em>will create its own database connection.</em> An instance of the database connection class, be it vanilla mysqli or your own class, has to be made only once!</p>

<p>Then, this instance should be passed to other classes via constructor, i.e.</p>

<pre><code>public function __construct(MySQLConnector $db) {
    $this-&gt;db_obj = $db;
}
</code></pre>

<h3>3. Connection class.</h3>

<p>Well yes, I don't see much reason in having such a class. At least some functionality has to be added. Given mysqli prepared statements are quite inconvenient, I would at least add a method to do the reoutine binding, based on my <a href="https://phpdelusions.net/mysqli/simple" rel="nofollow noreferrer">mysqli helper function</a>:</p>

<pre><code>public function preparedQuery($sql, $params, $types = "")
{
    $types = $types ?: str_repeat("s", count($params));
    $stmt = $this-&gt;link-&gt;prepare($sql);
    $stmt-&gt;bind_param($types, ...$params);
    $stmt-&gt;execute();
    return $stmt;
}
</code></pre>

<h3>4. Escaping table names.</h3>

<p>There should be an <code>escapeIdent()</code> function which you should always apply to all table and column names as you'll never know which one would coincide with a MySQL keyword</p>

<pre><code>function escapeIdent($field){
    return "`".str_replace("`", "``", $field)."`";
}
</code></pre>

<h3>5. Prepared statements.</h3>

<p>This is the <strong>most important issue</strong>. You've got everything confused here, having useless double "protection" in some places and <strong>no protection</strong> at all at others. </p>

<ol>
<li>Forget about <code>escapeString()</code> method. Remove it from your class. You will never ever need this function.</li>
<li>Remove all calls to this function from the repository as well.</li>
<li><p>Replace <strong>ALL</strong> (in the meaning 100%) date variables in your queries with placeholders. There should never be a horror like </p>

<pre><code>$query = 'select * from ' . $this-&gt;table . ' where id = '.$id;
</code></pre>

<p>seriously, where have you been all this time when everyone was talking about SQL injection?</p></li>
<li><p>The <code>prepared_query()</code> method from the above is to help</p>

<pre><code>public function getById($id) {
    $table = $this-&gt;db_obj-&gt;escapeIdent($this-&gt;table);
    $query = "select * from $table where id = ?";
    $result = $this-&gt;db_obj-&gt;preparedQuery($query, [$id])-&gt;get_result();
    return $this-&gt;db_obj-&gt;fetchAssoc($result);
}
</code></pre></li>
</ol>

<h3>6. Automation.</h3>

<p>See this <a href="//stackoverflow.com/a/58446867/285587">answer to <em>How to avoid code repetition with PHP SQL prepared statements?</em></a> for some ideas in order to make your repository methods less verbose.</p>

<h3>7. Other issues</h3>

<blockquote>
  <p>I am aware that I am missing some validation and error checking throughout the code.</p>
</blockquote>

<p>Quite contrary, there should be none. </p>

<ul>
<li>validations does not belong to a repository class</li>
<li>neither does error checking. What are going to do in this checking code anyway? Read my article on the proper <a href="https://phpdelusions.net/articles/error_reporting" rel="nofollow noreferrer">PHP error reporting</a>.</li>
</ul>

<blockquote>
  <p>public function getAll();</p>
</blockquote>

<p>Trust me, you will never ever need such a function in the real life. A function you need instead is <code>getBySQL()</code>.</p>
    </div>