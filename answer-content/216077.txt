<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><code>Move</code> events in <code>ObservableSelectIterator</code> could be expensive if elements are shifted around near the start of the list, as <code>Remove</code> and <code>Insert</code> will end up shifting the whole collection. There might be a significant performance advantage to manually moving the elements 'in between' the start and end indices, if that is at-all a concern.</p>

<p>Similarly with <code>Replace</code>, there is need only to perform a single removal or insertion, which would halve the amount of copying to be done. If the lists are the same length, then there is no need to move any of the other elements at all: this in particular is important, because it covers index assignment, which everyone expects to be constant-time.</p>

<p>I figure the same is true of <code>ObservableWhereIteractor</code>, but I shan't pretend I've fully reviewed the big-twiddling in its <code>Mangle</code> method.</p>

<hr>

<p>Giving <code>Item1</code> and <code>Item2</code> half-meaningful names in <code>_Index</code> wouldn't hurt.</p>

<pre><code>private BigInteger _Index(IEnumerable elts) =&gt; elts.Cast&lt;TElement&gt;().Aggregate((indices : BigInteger.Zero, bit : BigInteger.One), (accum, elt) =&gt; (accum.indices + (predicate(elt) ? accum.bit : 0), accum.bit &lt;&lt; 1)).indices;
</code></pre>

<hr>

<p>Should you be checking for <code>-1</code> indices in the <code>NotifyCollectionChangedEventArgs</code>? Presumably <a href="https://docs.microsoft.com/en-us/dotnet/api/system.collections.specialized.notifycollectionchangedeventargs.-ctor?view=netframework-4.7.2#System_Collections_Specialized_NotifyCollectionChangedEventArgs__ctor_System_Collections_Specialized_NotifyCollectionChangedAction_System_Collections_IList_System_Collections_IList_" rel="nofollow noreferrer">this constructor</a> is only provided to support unordered collections, but I can't work out if there are any meaningful guarantees.</p>
    </div>