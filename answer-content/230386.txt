<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First lets fix your imports.</p>

<p>You are importing * and you should do <code>import tkinter as tk</code> so you don't overwrite anything.
You are also importing <code>DISABLED</code> and that is already imported from * so on the very next line you are already overwriting imports.</p>

<p>Next did major PEP8 clean up. This includes proper spacing between qualifiers, classes, functions, comments and so on as well as working on the <a href="http://docs.bigchaindb.com/projects/contributing/en/latest/cross-project-policies/python-style-guide.html#maximum-line-length" rel="nofollow noreferrer">max line length</a> for coding.</p>

<p>Next we got rid of a lot of unneeded <code>self</code> prefixes. You only need self when you have a class attribute or method you will need to use again in the code down the line.</p>

<p>Then we need to replace all you concatenation with <code>format()</code> as format is the current correct method of concatenation.</p>

<p>One big save on rows is to build your Check Buttons into a list and then reference that list when writing your data.</p>

<p>One last change was to convert your Window1 class to be the root window through inheritance as well as convert Window2 to a Toplevel class. This allows us to use <code>self.master</code> to work with the parent window.</p>

<p>I got your code down to 147 lines of code and I could probably get it down lower if I could do some testing. Take a look at the below and let me know if you have any questions.</p>

<p>I do have a concern on this line:</p>

<pre><code>account_list = [line.split(":", maxsplit=1) for line in open("passwords.txt")]
</code></pre>

<p>I am a fan of one liners however I think (I may be wrong) this remains open as you never tell it to close. I would instead load the file using a <code>with open()</code> statement instead and then take the data and throw that into your one liner. The benefit to using <code>with open()</code> is that once the work is complete it will auto close the connection/file.</p>

<p>I will be adding more detail to this answer when I get home but for now this should be a good start.</p>

<p>Edit: Some more error fixing.</p>

<pre><code>import tkinter as tk
import tkinter.ttk as ttk
from tkinter import messagebox
from PIL import Image, ImageTk, ImageGrab
from pathlib import Path
import pyautogui
import glob
import time
import os


def main():
    Window1().mainloop()


def manual_open():
    os.startfile('//SERVER/shared_data/Technical/Food Safety &amp; Quality Manual/Section 21 -'
                 ' Process Control/21.LABL.02 - Labelling notes.docx')


class Window1(tk.Tk):
    def __init__(self):
        super().__init__()
        self.title("User Log In")
        self.geometry('400x150')
        frame = tk.Frame(self)
        frame.pack(fill="both", expand=True)

        tk.Label(frame, text="Username: ", font=("bold", 16)).pack()
        self.entry_username = tk.Entry(frame, font=("bold", 14))
        self.entry_username.pack()
        tk.Label(frame, text="Password: ", font=("bold", 16)).pack()
        self.entry_password = tk.Entry(frame, show="*", font=("bold", 14))
        self.entry_password.pack()
        tk.Button(frame, text="Login", font=("bold", 10), command=self._login_btn_clicked).pack()

    def on_closing(self):
        self.destroy()

    def _login_btn_clicked(self):
        username = self.entry_username.get()
        password = self.entry_password.get()
        account_list = [line.split(":", maxsplit=1) for line in open("passwords.txt")]
        accounts = {key: value.rstrip() for key, value in account_list}
        if accounts[username] == password:
            self.withdraw()
            self.app = Window2()
            self.app.protocol("WM_DELETE_WINDOW", self.on_closing)
        else:
            messagebox.showinfo("User message", "Invalid username or password specified please try again")


class Window2(tk.Toplevel):
    def __init__(self):
        super().__init__()
        notebook = ttk.Notebook(self)
        notebook.pack(expand=1, fill="both")
        main = ttk.Frame(notebook)
        manual = ttk.Frame(notebook)
        notebook.add(main, text='Main-Screen')
        notebook.add(manual, text='Manual')
        self.display_time = tk.Label(main)
        self.display_time.grid(column=3, row=0)
        self.clock()
        self.username = self.master.entry_username.get()
        tk.Label(main, text='User: {}'.format(self.username), font='15').grid(column=4, row=0)

        self.checkbutton_list = []
        checkbutton_verb = ["Ingredients present in full (any allergens in bold with allergen warning if necessary)",
                            "May Contain Statement.", "Cocoa Content (%).", "Vegetable fat in addition to Cocoa butter",
                            "Instructions for Use.", "Additional warning statements (pitt/stone, hyperactivity etc)",
                            "Nutritional Information Visible", "Storage Conditions", "Best Before &amp; Batch Information",
                            "Net Weight &amp; Correct Font Size.", "Barcode - Inner", "Address &amp; contact details correct"]

        for ndex, i in enumerate(checkbutton_verb):
            x = tk.IntVar()
            self.checkbutton_list.append([tk.Checkbutton(main, text=i, variable=x), x])
            self.checkbutton_list[-1][0].grid(column=2, row=ndex+1, sticky='w')

        directory = "//SERVER/shared_data/Technical/Label Sign Off Sheets/sign off project/To Sign"
        choices = glob.glob(os.path.join(directory, "*- to sign.jpg"))
        tk.Label(main, text="Choose here").grid(column=0, row=0)
        self.tkvar = tk.StringVar()
        self.tkvar.set('...To Sign Off...')
        tk.OptionMenu(main, self.tkvar, *choices, command=self.func).grid(row=1, column=0)
        self.label2 = tk.Label(main, image=None)
        self.label2.grid(row=2, column=0, rowspan=500)
        tk.Button(main, text="Open", command=self.change_dropdown).grid(row=502, column=0)
        self.dataSend = tk.Button(main, text="Send", command=self.var_states, state='disabled')
        self.dataSend.grid(column=1, row=13, sticky='w')
        self.CaptureScreen = tk.Button(main, text="PrintScreen", command=self.print_screen, state='disabled')
        self.CaptureScreen.grid(column=1, row=14, sticky='w')
        self.manualBtn = tk.Button(manual, text="open doc", command=manual_open)
        self.manualBtn.pack()

    def clock(self):
        t = time.strftime('%d/%m/%Y, %H:%M:%S, ', time.localtime())
        if t != '':
            self.display_time.config(text=t, font='times 15')
        self.after(1000, self.clock)

    def print_screen(self):
        pyautogui.keyDown('alt')
        pyautogui.keyDown('printscreen')
        pyautogui.keyUp('printscreen')
        pyautogui.keyUp('alt')
        self.dataSend['state'] = 'normal'

    def var_states(self):
        text_file = open("logfile.txt", "a")
        formatted_string = 'Username: {}'.format(self.username)
        for ndex, sub_list in enumerate(self.checkbutton_list):
            formatted_string = '{}, Option {}: '.format(formatted_string, ndex+1, sub_list[1].get())
        text_file.write(formatted_string)
        text_file.close()
        self.img = ImageGrab.grabclipboard()
        self.img.save('//SERVER/shared_data/Technical/Label Sign Off Sheets/sign off project/Signed/{} {} .jpg'
                      .format(os.path.basename(self.p).strip('- to sign.jpg'), self.username), 'JPEG')
        ed = '//SERVER/shared_data/Technical/Label Sign Off Sheets/sign off project/Signed/{} ed.jpg'\
             .format(os.path.basename(self.p).strip('- to sign.jpg'))
        nb = '//SERVER/shared_data/Technical/Label Sign Off Sheets/sign off project/Signed/{} Nb.jpg'\
             .format(os.path.basename(self.p).strip('- to sign.jpg'))
        jj = '//SERVER/shared_data/Technical/Label Sign Off Sheets/sign off project/Signed/{} jj.jpg'\
             .format(os.path.basename(self.p).strip('- to sign.jpg'))
        kl = '//SERVER/shared_data/Technical/Label Sign Off Sheets/sign off project/Signed/{} kl.jpg'\
             .format(os.path.basename(self.p).strip('- to sign.jpg'))

        if os.path.exists(ed) and os.path.exists(nb) or os.path.exists(jj) or os.path.exists(kl):
            os.remove('//SERVER/shared_data/Technical/Label Sign Off Sheets/sign off project/To sign/{}'
                      .format(os.path.basename(self.p)))
        else:
            print("False")

    def change_dropdown(self):
        img = Image.open(self.tkvar.get())
        photo = ImageTk.PhotoImage(img)
        self.label2.image = photo
        self.label2.configure(image=photo)
        self.CaptureScreen['state'] = 'normal'
        self.p = None

    def func(self, value):
        self.p = Path(value)
        print(self.p)


if __name__ == '__main__':
    main()
</code></pre>

<p>For your error in the comments I am not getting this same issue.
Please provide full trace back. As you can see below I can print the value of <code>accounts</code> resulting from this line <code>accounts = {key: value.rstrip() for key, value in account_list}</code> and that is the same line you get an error on.</p>

<p><a href="https://i.stack.imgur.com/M3Cow.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/M3Cow.png" alt="enter image description here"></a></p>
    </div>