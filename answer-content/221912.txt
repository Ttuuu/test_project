<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Performance</h2>

<ol>
<li><p>The main reason for the slow down are the state changes you incur each time you change the color and transparency of the particle (which is each particle). Unless you are prepared to write some shaders (webGL) you are not going to get past this problem. You will need to sacrifice some features to get performance.</p></li>
<li><p>The second reason for the slowdown is that P5 is as slow as they get, I mean snails can draw faster than p5. </p>

<p>For example the call to <code>var dir = p5.Vector.sub(this.position, p.position);</code>  subtract one vector from another. With P5 you have to execute 13 lines of code, assign memory for new two arrays, one new vector, go through 4 branching statements and you get back a 3D vector.</p>

<p>It can be done in 2 expressions and 100 times faster.</p></li>
<li><p>You loop over ever particle ever time you do something to it. If you want performance you need to have as little overhead as you can manage. Loops are overhead so do everything in one pass.</p></li>
<li><p>JavaScripts memory management is s slow. If you are creating many short lived objects you have to avoid deleting them when you are done with them. </p>

<p>Eg You splice out a particle when its dead with <code>this.particles.splice(i, 1);</code> so GC must clean it up. Then you create a new particle with <code>this.particles.push(new Particle(this.origin, velObj, color));</code> </p>

<p>Memory is cheap and plentifully, CPU cycles are not, so for performance sections of your code you should reuse objects rather than delete then. Only grow arrays never shorten them.</p>

<p>Nor should you splice from arrays in performance code. When you splice Javascript has to move every item above the splice point down one. And if the array size falls below  half its size, it will dump the reserved space for GC to clean up. Then if you add one item javascript will ask for all that memory back. This can be very costly.</p></li>
</ol>

<h2>Rewrite</h2>

<p>This can be done in webGL but with a few modifications the standard 2D API does it very well.</p>

<ul>
<li><p>To avoid state changes particles do not fade out but rather change size. That means all the particles from a single particle system can be rendered in one go (one state change). This gives you 10 time + improvement in rendering speed.</p></li>
<li><p>To avoid memory allocation and GC overhead particles are in two arrays. There is a <code>pool</code> that contains dead particles. When a particle is dead it is moved to the pool, the iterator in <code>Particles.run</code> has two indexes and keeps the main array packed with live particles. It never deletes anything while in the main loop.</p>

<p>Rather than use the array length property, <code>count</code> and <code>deadCount</code> hold the number of usable particles. Note do not use particles above there counts as what they reference is unknown and can not be trusted.</p></li>
<li><p>To avoid overhead for vector math most of its done inline and vectors are stored in a very simple <code>Vec</code> object or anything that has a <code>x</code>, or <code>y</code> property. (unlike p5 which refuses to handle anything but defined vectors (Crazzy))</p></li>
</ul>

<p>I have doubled the particle count in this example compared to the one you provided in the question.</p>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>const ctx = canvas.getContext("2d");

const mouse  = {x : 0, y : 0}
function mouseEvents(e){
	mouse.x = e.pageX;
	mouse.y = e.pageY;
}
document.addEventListener("mousemove", mouseEvents);

Math.TAU = Math.PI * 2;
Math.rand = (min, max) =&gt; Math.random() * (max - min) + min;
const Vec = (x, y) =&gt; ({x,y}); // Simple vector object
const mousePos = Vec(0,0);
const particleSystems = [];
var repeller, numDraws = 0, width, height;

setTimeout(setup, 0);  // Just waits for all objects to be defined
function setup() {
    width = canvas.width = innerWidth;
    height = canvas.height = innerHeight;
    particleSystems.length = 0;

    
    repeller = Force(mouse, -500, 2, 100);
    const leftAttractor = Force(Vec(0, height / 2), 1150, 5, 50);
    const rightAttractor = Force(Vec(width, height / 2), 1150, 5, 50);


    particleSystems.push(Particles({origin : Vec(width / 5, height / 2), min: Vec(-4,-4), max: Vec(0, 4)}, "#00F",  [repeller, rightAttractor]));
    particleSystems.push(Particles({origin : Vec(width * 4 / 5, height / 2), min: Vec(0,-4), max: Vec(4, 4)}, "#F00", [repeller, leftAttractor]));
    
    // Ones not affected by attractor
    particleSystems.push(Particles({origin : Vec(width / 5, height / 2), min: Vec(-2,-2), max: Vec(1, 2)}, "#0FF", [repeller]));
    particleSystems.push(Particles({origin : Vec(width * 4 / 5, height / 2), min: Vec(-1,-2), max: Vec(2, 2)}, "#FF0", [repeller]));

    requestAnimationFrame(draw);
}

function draw() {
    if (width !== innerWidth || height !== innerHeight) { // check for resize
       setTimeout(setup, 0); 
       return;
    }
    ctx.fillStyle = "#FFF";
    ctx.fillRect(0, 0, ctx.canvas.width, ctx.canvas.height);

    for(const system of  particleSystems) {
        system.addParticle();
        system.addParticle();
        system.run();
    }
    repeller.display();
    numDraws++;
    requestAnimationFrame(draw); // At fixed rate of 60Fps if it can
}

function Force(pos, force, min, max) { // force negative to repel, positive to attract
    min *= min;  // raise to power 2
    max *= max;
    var x,y,d,d2; // working variables created so they do not need to be created each call to repel
    return {
        display() {
            ctx.strokeStyle = "#000";
            ctx.fillStyle = "#9999" // yes 4 the last digit is alpha
            ctx.globalAlpha = 1;
            ctx.lineWidth = 2;
            ctx.beginPath();
            ctx.arc(pos.x, pos.y, 30, 0, Math.TAU);
            ctx.fill();
            ctx.stroke();
        },
        apply(p) { // p is particle 
            x = pos.x - p.x;
            y = pos.y - p.y;
            d = Math.sqrt(d2 = x * x + y * y) * p.mass; 
            d2 = force / (d2 &lt; min ? min : d2 &gt; max ? max : d2) / d;
            p.ax += x * d2;
            p.ay += y * d2;
        }
    };
}

function Particle() {}
Particle.prototype = { // Use prototype when creating many instances
    init(emitter) {
        this.x = emitter.origin.x;
        this.y = emitter.origin.y;
        this.life = 255;
        this.mass = 5;
        this.vx = Math.rand(emitter.min.x, emitter.max.x); 
        this.vy = Math.rand(emitter.min.y, emitter.max.y); 
        this.ay = this.ax = 0;
    },
    display() {
        const size = (this.life / 255) * 4; 
        if (size &lt; 2) { // draw faster rect when too small to discern
            ctx.rect(this.x - size / 2, this.y - size / 2, size, size)
        } else {
            ctx.moveTo(this.x + size, this.y);
            ctx.arc(this.x, this.y, size, 0, Math.TAU);
        }
    },
    update() { // return true if dead
        this.x += (this.vx += this.ax);
        this.y += (this.vy += this.ay);
        this.ay = this.ax = 0;
        return (this.life -= 1.5) &lt;= 0;
    },
}


function Particles(emitter, color, forces) {
    const particles = []; // holds live particles
    var count = 0;
    var deadCount = 0;
    const pool = []; // holds dead particles
    return {
        run() {
            var i = 0, top = 0;
            ctx.beginPath();      // prep state change and start defining paths
            ctx.fillStyle = color;
            while (top &lt; count) {
                const p = particles[i] = particles[top];
                for (const force of forces) { force.apply(p) }
                if (p.update()) {                  
                    pool[deadCount++] = p;
                } else {
                    p.display();
                    i ++;
                }
                top++;
            }
            ctx.fill();  // applies the state and renders
            count = i;
        },
        addParticle() {
            if (deadCount &gt; 0) { 
                p = pool[--deadCount]; // get from pool if available
            } else {
                p = new Particle();    // else create a new one
            }
            p.init(emitter);
            particles[count++] = p;
        },
    };
}</code></pre>
<pre class="snippet-code-css lang-css prettyprint-override"><code>canvas { position : absolute; top : 0px; left : 0px; }</code></pre>
<pre class="snippet-code-html lang-html prettyprint-override"><code>&lt;canvas id="canvas"&gt;&lt;/canvas&gt;</code></pre>
</div>
</div>

    </div>