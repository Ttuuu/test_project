<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I see a number of things that may help you improve your program.</p>

<h2>Don't abuse <code>using namespace std</code></h2>

<p>Putting <code>using namespace std</code> at the top of every program is <a href="http://stackoverflow.com/questions/1452721/why-is-using-namespace-std-considered-bad-practice">a bad habit</a> that you'd do well to avoid.  </p>

<h2>Don't use <code>system("pause")</code></h2>

<p>There are two reasons not to use <code>system("cls")</code> or <code>system("pause")</code>.  The first is that it is not portable to other operating systems which you may or may not care about now.  The second is that it's a security hole, which you absolutely <strong>must</strong> care about.  Specifically, if some program is defined and named <code>cls</code> or <code>pause</code>, your program will execute that program instead of what you intend, and that other program could be anything.  First, isolate these into a seperate functions <code>cls()</code> and <code>pause()</code> and then modify your code to call those functions instead of <code>system</code>.  Then rewrite the contents of those functions to do what you want using C++.  For example, the <code>pause</code> function might be rewritten like this:</p>

<pre><code>void pause_for_user()
{
    std::string line;
    std::cin &gt;&gt; line;
}
</code></pre>

<p>I called this function <code>pause_for_user</code> insteaad of just <code>pause</code> because <code>pause</code> is already the name of a different function in POSIX.</p>

<h2>Use a <code>switch</code> instead of long <code>if ...else</code> chain</h2>

<p>The pattern matching logic is much easier to see if a <code>swtich</code> statement is used instead of the long <code>if...else</code> chain.  For example, instead of this:</p>

<pre><code>if (Map[i][j] == WALL)
{
    cout &lt;&lt; "*";
}
else if (Map[i][j] == EMPTY)
{
    cout &lt;&lt; " ";
}
else if (Map[i][j] == SNAKE_HEAD)
{
    cout &lt;&lt; "O";
}
else if (Map[i][j] == SNAKE_TAIL)
{
    cout &lt;&lt; "o";
}
else if (Map[i][j] == FRUIT)
{
    cout &lt;&lt; "+";
}
</code></pre>

<p>one could instead write this:</p>

<pre><code>switch (Map[i][j]) {
    case WALL:
        cout &lt;&lt; '*';
        break;
    case EMPTY:
        cout &lt;&lt; ' ';
        break;
    case SNAKE_HEAD:
        cout &lt;&lt; 'O';
        break;
    case SNAKE_TAIL:
        cout &lt;&lt; 'o';
        break;
    case FRUIT:
        cout &lt;&lt; '+';
        break;
}
</code></pre>

<p>It's shorter and a little easier to read.  However, see the next suggestion.</p>

<h2>Shorten code by simplifying conversion</h2>

<p>The code represents the various screen objects using an <code>enum</code>.  A plain <code>enum</code> in C++ can still be used as an <code>int</code> which can be handy here.  The <code>enum</code> declaration is this:</p>

<pre><code>enum objects {EMPTY, WALL, SNAKE_HEAD, SNAKE_TAIL, FRUIT};
</code></pre>

<p>so one way to write the contents of <code>draw()</code> would be this:</p>

<pre><code>static constexpr char object_rep[]{" *Oo+"};
for (int i=0; i &lt; m_y; ++i) {
    for (int j=0; j &lt; m_x; ++j) {
        std::cout &lt;&lt; object_rep[Map[i][j]];
    }
    std::cout &lt;&lt; '\n';
}
</code></pre>

<p>However, we can simplify still further and make it much easier to see the association between the object representation and the object itself:</p>

<pre><code>enum objects {EMPTY=' ', WALL='*', SNAKE_HEAD='O', SNAKE_TAIL='o', FRUIT='+'};
</code></pre>

<p>Now the printing looks like this:</p>

<pre><code>for (int i=0; i &lt; m_y; ++i) {
    for (int j=0; j &lt; m_x; ++j) {
        std::cout &lt;&lt; static_cast&lt;char&gt;(Map[i][j]);
    }
    std::cout &lt;&lt; '\n';
}
</code></pre>

<h2>Avoid the use of global variables</h2>

<p>I see that <code>Map</code> is declared as a global variable rather than as a local variable. It's generally better to explicitly pass variables your function will need rather than using the vague implicit linkage of a global variable.</p>

<h2>Use "range <code>for</code>" and simplify your code</h2>

<p>The code currently contains these lines:</p>

<pre><code>for (std::vector&lt;GameObject*&gt;::iterator itr = updates.begin(), end = updates.end();itr != end; itr++)
{
    (*itr)-&gt;update();
}
</code></pre>

<p>It's much easier to read an understand like this:</p>

<pre><code>for (auto &amp;item : updates) {
    item-&gt;update();
}
</code></pre>

<h2>Rethink your object design</h2>

<p>The <code>Map</code> variable and the <code>updates</code> vector and the <code>Snake</code> and <code>Fruit</code> objects are related but only by their use rather than their structure.  I'd suggest that instead there could be a <code>Game</code> object that would contain, effectively, the <code>Map</code> and <code>Snake</code> and <code>Fruit</code> objects, as well as having member functions <code>draw()</code> and <code>update()</code> and a constructor that performs the functions that are currently done at the beginning of <code>main</code>.  Also, since <code>Fruit</code> and <code>Snake</code> both derive from <code>GameObject</code> and both have x and y coordinates, the coordinates probably belong in the base class.  In my rewritten version, here's what <code>main</code> looks like now:</p>

<pre><code>int main()
{
    Game game;
    game.play();
}
</code></pre>

<p>I would also recommend using a <code>Point</code> class to store the coordinates of items.</p>

<h2>Consider using a better random number generator</h2>

<p>If you are using a compiler that supports at least C++11, consider using a better random number generator.  In particular, instead of <code>rand</code>, you might want to look at <a href="http://en.cppreference.com/w/cpp/numeric/random/uniform_real_distribution" rel="nofollow noreferrer"><code>std::uniform_real_distribution</code></a> and friends in the <code>&lt;random&gt;</code> header.</p>

<h2>Fix the bug</h2>

<p>The is a small chance that when the snake eats a fruit that the next fruit is generated on top of the snake.  Better would be to make sure that the fruit is only place on an empty square.</p>

<h2>Eliminate magic numbers</h2>

<p>The constants 38, 19 and others are used in multiple places.  It would be better to have them as named <code>const</code> values so that it would be clear what those numbers represent.</p>

<h2>Don't use leading underscores in names</h2>

<p>Anything in global space with a leading underscore is a <em>reserved name</em> in C++ (and in C).  See <a href="http://stackoverflow.com/questions/228783/what-are-the-rules-about-using-an-underscore-in-a-c-identifier">this question</a> for details.</p>

<h2>Use more whitespace to enhance readability of the code</h2>

<p>Instead of crowding things together like this:</p>

<pre><code>for (int i=0;i&lt;m_y;i++)
</code></pre>

<p>most people find it more easily readable if you use more space:</p>

<pre><code>for (int i=0; i &lt; m_y; ++i)
</code></pre>

<h2>Don't Repeat Yourself (DRY)</h2>

<p>In the <code>Snake::_Collision()</code> function, there is a lot of repeated code.  This could be restructed to be much easier to read and understand.  Essentially, the job of the function is to find out whether the snake is about to run into something.  Here's another way to do it:</p>

<pre><code>void Snake::_Collision(Game &amp;game)
{
    switch (game.at(next(game._direction, location))) {
        case Game::EMPTY:
            break;
        case Game::FRUIT:
            break;
        default:
            std::cout &lt;&lt; "YOU LOST, GET GUD SCRUB!";
            pause_for_user();
            exit(0);
    }
}
</code></pre>

<p>This assumes a number of changes.  For instance, there is a <code>next</code> member function that takes a direction and a <code>Point</code> and and returns the next <code>Point</code>.  There is also an <code>at</code> function that returns a reference to the map location given the <code>Point</code>.</p>
    </div>