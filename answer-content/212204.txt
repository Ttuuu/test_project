<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>If I understand your question right your main concern is how to refactor all the <code>CallServiceSafely(...)</code> methods, so you don't have to maintain a lot of repetitive code. A way to go could be to have an <code>ExecuteMethod()</code> method like:</p>

<pre><code>private void ExecuteMethod(Action action)
{
  try
  {
    action();
  }
  catch (Exception ex)
  {
    switch (ex)
    {
      case FaultException fe:
        throw new ServiceException(CreateErrorDescriptionInstance(fe));
      // TODO: Other specialized exception cases
      default:
        throw new ServiceException(ToolKit.ErrorDescriptionFactory.CreateInstance(ex));
    }
  }
}
</code></pre>

<p>and then call it from the <code>CallServiceSafely</code> methods like:</p>

<pre><code>protected void CallServiceSafely&lt;T, TU, TV&gt;(Action&lt;T, TU, TV&gt; serviceMethod, T firstParam, TU secondParam, TV thirdParam)
{
  ExecuteMethod(() =&gt; serviceMethod(firstParam, secondParam, thirdParam));
  //serviceMethod.Invoke(firstParam, secondParam, thirdParam);
}
</code></pre>

<hr>

<p>You could also do:</p>

<pre><code>private void ExecuteMethod(Action action)
{
  try
  {
    action();
  }
  catch (FaultException fe)
  {
    throw new ServiceException(CreateErrorDescriptionInstance(fe));
  }
  catch (Exception ex)
  {
    throw new ServiceException(ToolKit.ErrorDescriptionFactory.CreateInstance(ex));
  }
}
</code></pre>

<hr>

<pre><code>    private T ExecuteFunc&lt;T&gt;(Func&lt;T&gt; function)
    {
        try
        {
            return function();
        }
        catch (SoapException ex)
        {
            throw new ServiceException(ToolKit.ErrorDescriptionFactory.CreateInstance(ex));
        }
        catch (WebException ex)
        {
            throw new ServiceException(ToolKit.ErrorDescriptionFactory.CreateInstance(ex));
        }
        catch (ApplicationException ex)
        {
            throw new ServiceException(ToolKit.ErrorDescriptionFactory.CreateInstance(ex));
        }
        catch (FaultException ex)
        {
            throw new ServiceException(CreateErrorDescriptionInstance(ex));
        }
    }
</code></pre>

<p>Which is maybe more "catchy" correct.</p>
    </div>