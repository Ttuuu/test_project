<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Review</h2>

<ol>
<li>You define <code>ReturnedValue</code>, use it as parameter for <code>MethodInfo.Invoke</code>, but could have also stored <code>(T)Arguments[1]</code> and <code>default(T)</code> (your last return statement) to it. This way you could call <code>return ReturnedValue</code> once at the end of the flow.</li>
<li>Please use <em>camelCase</em> in C# variable names.</li>
</ol>

<hr>

<h2>Alternative Solution</h2>

<blockquote>
  <p>So I got sick of several things about the way TryParse works. I
  implemented a generic ParseOrDefault function using reflection.</p>
</blockquote>

<p>You talk about two different concept: <code>TryParse</code> and <code>Parse</code>. Your solution handles the latter case. For this case, why not use an existing <a href="https://docs.microsoft.com/en-us/dotnet/api/system.convert.changetype?view=netframework-4.8" rel="nofollow noreferrer">API</a> as an alternative to do parsing for you? </p>

<pre><code>public static T ParseOrDefault&lt;T&gt;(this string value)
{
    return ReferenceEquals(value, null) 
         ? default(T) : (T)Convert.ChangeType(value, typeof(T));
}
</code></pre>

<hr>

<h2>Test case</h2>

<pre><code>public static void Main()
    {
        Console.WriteLine(((string)null).ParseOrDefault&lt;bool&gt;());
        Console.WriteLine(((string)null).ParseOrDefault&lt;bool?&gt;());
        Console.WriteLine(("true").ParseOrDefault&lt;bool&gt;());
        Console.WriteLine(("false").ParseOrDefault&lt;bool&gt;());
        Console.WriteLine(("23").ParseOrDefault&lt;int&gt;());
        Console.WriteLine(("52").ParseOrDefault&lt;int&gt;());
        Console.WriteLine(("4/22/1989").ParseOrDefault&lt;DateTime&gt;());
        Console.WriteLine(("4/22/2016").ParseOrDefault&lt;DateTime&gt;());
    }
</code></pre>

<p><em>Results</em></p>

<ul>
<li>False</li>
<li><code>null</code></li>
<li>True</li>
<li>False</li>
<li>23</li>
<li>52</li>
<li>4/22/1989 12:00:00 AM</li>
<li>4/22/2016 12:00:00 AM</li>
</ul>
    </div>