<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Congratulations on finding code you enjoy!</p>

<p>This appears to be walking through a binary tree you have defined (or possibly from <a href="https://toytree.readthedocs.io/en/latest/6-treenodes.html" rel="nofollow noreferrer">toytree</a>?).  Walking through this with an explicit stack is one way of thinking of the problem, and the code can be a good learning experience.</p>

<p>An alternate method would be to use the Python's recursion system, where you make code vaguely like:</p>

<pre><code>   def walk(tree):
        if tree is not None:   # ignore walking into an empty node
            walk(tree.left)
            walk(tree.right)
            print(tree.val)
</code></pre>

<p>It takes a a little brain stretching to see these as equivalent.  As an exercise you should explore making the function a generator.  That is, would call it as:</p>

<pre><code>  for value in tree.walk():
      print(value)
</code></pre>

<p>To do this, you need to replace a <code>print</code> with a <code>yield</code>, and a recursive call with a <code>yield from</code>.   Try it: it does a different stretch on the brain.</p>

<p>As far as efficiency, you need to use the the <a href="https://docs.python.org/3.8/library/timeit.html" rel="nofollow noreferrer">timeit</a> module to see what does run fast.   In general, tree structures with a single value do poorly for really large numbers because memory access is a bit slow.  However, profiling is necessary for optimizing by less than factors of n (the size of the tree).  Orders of magnitude can be judged by eye and logic while unexpected internals might double the speed of some code. </p>

<p>You might notice that your code will currently fail on being passed an empty tree (root=None), as <code>popped</code> will be checked before it is assigned.  I am not sure why you are checking if popped equals the right node.</p>

<p>Keep hacking!  Keep notes.</p>
    </div>