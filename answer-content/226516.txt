<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Avoid declaring <code>u16</code>.</h1>

<p>You are defining <code>u16</code> to be equal to <code>std::uint16_t</code>. Is this because you just want to save some keystrokes, or is it because the <code>u16</code> represents something distinct in your class? If you want it to be a value representing the number of states or index of a state, then make this more explicit:</p>

<pre><code>using state_size_t = std::uint16_t;
</code></pre>

<p>Now when you ever decide to change the amount of bits used for state sizes/indices, you only have to change one line.</p>

<p>Another issue with <code>u16</code> is that it's a very generic name, and by just declaring it in the global namespace, you risk conflicting with other libraries that potentially make the same mistake.</p>

<h1>Avoid exposing implementation details to the global namespace</h1>

<p><code>numBits()</code> is some function you just want to use in some of the member functions of <code>class State</code>. Similar to <code>u16</code>, you don't want this in the global namespace where it could cause conflicts. Just make it part of <code>State</code>:</p>

<pre><code>template&lt;u16 N&gt;
class State {
    static constexpr unsigned numBits(u16 n) {...}

public:
    ...
};
</code></pre>

<p>Even better would be to declare a namespace for your library, and put everything in that namespace, including the <code>using</code> declaration.</p>

<h1>There's no need to write <code>State&lt;N&gt;</code> inside <code>State</code> itself</h1>

<p>Inside a templated class, you don't have to add the template parameters each time you use the type. So just write:</p>

<pre><code>std::vector&lt;std::shared_ptr&lt;State&gt;&gt; nextStates_;
</code></pre>

<p>Note that you already use the type <code>State</code> without <code>&lt;N&gt;</code> in many places.</p>

<h1>Don't use a <code>std::bitset&lt;&gt;</code> with only one bit set</h1>

<p>When you create a <code>State</code>, you copy the <code>u16 value</code> to a <code>std::bitset&lt;&gt;</code> that might be very large (8 kilobytes if <code>N</code> equals 65535). But it's just a copy of the value, so store it as a <code>u16</code>.</p>

<h1>Avoid pointer references for the list of transitions</h1>

<p>With pointers, you always have to worry about ownership, and whether they are valid or not. They also restrict moving and copying of variables. And in this case, you don't need pointers to refer to states, since they already have unique identifiers in the form of a <code>u16</code>. So just write:</p>

<pre><code>std::vector&lt;u16&gt; nextStates_;
</code></pre>

<p>Or, if you expect the transition table to be dense, it might make sense to make this a bitset:</p>

<pre><code>std::bitset&lt;numBits(N)&gt; nextStates_;
</code></pre>

<p>And in <code>addTransition()</code>, write:</p>

<pre><code>nextStates_.set(state.value_);
</code></pre>

<h1>Use <code>std::array&lt;&gt;</code> instead of <code>std::vector&lt;&gt;</code> if you know the size up front</h1>

<p>In <code>class FiniteStateMachine</code>, you already know the number of states you are going to support. So just write:</p>

<pre><code>std::array&lt;State, N&gt; states_;
</code></pre>

<p>This has the advantage that it doesn't require heap allocations, and you don't have to shrink to fit in the constructor.</p>

<h1>Can states be reused in different state machines?</h1>

<p>One issue with your design is that you can declare a <code>State</code>, and it is not tied to a state machine. However, when creating a state machine and adding state transitions, those transitions are actually stored inside the <code>State</code> variable, not inside the <code>FiniteStateMachine</code>. So this effectively makes reusing states impossible.</p>

<p>You could make states reusable, by moving the list of possible transitions to <code>FiniteStateMachine</code> itself. There are various ways possible, for example you could do:</p>

<pre><code>template&lt;u16 N&gt;
class FiniteStateMachine {
public:
    std::vector&lt;std::pair&lt;State, std::vector&lt;State&gt;&gt;&gt; states_;
    ...
</code></pre>

<p>So each element of <code>states_</code> is a <code>State</code> plus a vector of other <code>State</code>s it can transition to. Or if you have dense transition tables:</p>

<pre><code>    std::vector&lt;std::pair&lt;State, std::bitset&lt;numBits(N)&gt;&gt;&gt; states_;
</code></pre>
    </div>