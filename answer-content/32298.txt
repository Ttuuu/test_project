<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>If data is ordered, as is the case in your example, you can use a merge-sort algorithm to do it while traversing each collection only once:</p>

<pre><code>    List&lt;Integer&gt; a = Arrays.asList(1, 2, 3, 4);
    List&lt;Integer&gt; b = Arrays.asList(3, 4, 5, 6);
    List&lt;Integer&gt; result = new ArrayList&lt;&gt;();

    int ia = 0, ib = 0;

    while(ia&lt;a.size() &amp;&amp; ib&lt;b.size()) {
        if (a.get(ia)&lt;b.get(ib)) {
            result.add(a.get(ia));
            ia++;
        } else if (a.get(ia)&gt;b.get(ib)) {
            result.add(b.get(ib));
            ib++;
        } else {
            ia++;
            ib++;
        }
    }
    result.addAll(a.subList(ia, a.size()));
    result.addAll(b.subList(ib, b.size()));

    System.out.println("Uncommon elements of set a and set b is : " + result);
</code></pre>

<p>If an actual <code>java.util.Set</code> is required, instead of any collection that in this case behaves as a set, one may use a <code>java.util.SortedSet</code> implementation (e.g., <code>java.util.TreeSet</code>). The code above can be directly translated to iterators by using a <code>PeekableIterator</code> wrapper. Without <code>peek()</code>, it requires a little more effort to advance each iterator only when needed.</p>
    </div>