<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Yes, there are ways to do this that avoid most of the divisions, and are probably faster as well.</p>

<p>Let's start with a simplified version of the problem: add up all the multiples of 3.</p>

<p>Now, you could do a simplified version of what you've written:</p>

<pre><code>int sum = 0;

for (int i=1; i&lt;1000; i++)
    if (i % 3 == 0)
        sum += i;
</code></pre>

<p>...but we know up front that 1 and 2 aren't multiples of three. We can generate all multiples of three by counting by 3's:</p>

<pre><code>int sum = 0;

for (int i=0; i&lt;1000; i += 3)
    sum += i;
</code></pre>

<p>Obviously enough, we can do the same thing for multiples of 5:</p>

<pre><code>int sum = 0;

for (int i=0; i&lt;1000; i += 5)
    sum += i;
</code></pre>

<p>But if we do both in succession:</p>

<pre><code>int sum = 0;

for (int i=0; i&lt;1000; i += 3)
    sum += i;

for (int i=0; i&lt;1000; i += 5)
    sum += i;
</code></pre>

<p>...we'll get the wrong answer. The problem now is that if a number is a multiple of <em>both</em> 3 and 5 (e.g., 15) we've counted it twice. There are a few ways we can avoid that. One is to have the second loop add <code>i</code> to the sum if and only if <code>i</code> is not a multiple of 3. </p>

<pre><code>for (int i=0; i&lt; 1000; i += 5)
    if (i % 3 != 0)
       sum += i;
</code></pre>

<p>Another is to initially add those, but then add a third loop that generates only the numbers that are multiples of both 3 and 5, and subtracts those from the overall result:</p>

<pre><code>int product = 3 * 5;

for (int i = 0; i &lt; 1000; i += product)
    sum -= i;
</code></pre>

<p>Since you're (apparently) more interested in learning programming than in learning math, I'll only sketch out the next step. There are ways to avoid doing those loops at all though. What we're really doing is (for two different values of N) summing a series of 1N + 2N + 3N + 4N + ...</p>

<p>Using the distributive property, we can turn that into <code>N * (1 + 2 + 3 + 4 + ...)</code>. Gauss invented an easy way to sum a series like <code>1 + 2 + 3 + 4 + ...</code>, so what we need to do is compute the number of terms of that series we need for each of 3 and 5, compute them, multiply by 3 and 5 respectively, and add together the results. Then do the same for multiples of 15, and subtract that from the result. The number of terms in each series we need will be the upper limit divided by the N for that series--so for multiples of 3, we have 1000/3 terms, and for multiples of 5 we have 1000/5 terms.</p>

<p>So, we can compute the final value as:</p>

<pre><code>3 * gauss_sum(1000/3) + 5 * gauss_sum(1000/5) - 15 * gauss_sum(1000/15)
</code></pre>

<p>...and we're left with no loops at all, so we can compute the correct value for any upper limit (up to what fits in an <code>unsigned long long</code>, anyway) in constant time.</p>
    </div>