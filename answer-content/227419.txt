<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Dividor</h2>

<p><code>dividor</code> is ill-defined. It acts as a factor for quantization:</p>

<blockquote>
<pre><code> xi = xi / divider;
</code></pre>
</blockquote>

<p>But also as threshold for yielding smoothed results:</p>

<blockquote>
<pre><code>for (int i = 0; i &lt; divider; i++)
</code></pre>
</blockquote>

<p>While this seems fine if <code>dividor</code> is <span class="math-container">\$integer &gt;= 2\$</span>, it could yield unwanted results for fractions (as it is a double precision integer). I would at least change its type to int or uint instead and add an out-of-bound guard. If you would decide to allow fractions, make it clear in the spec how the edge case near the end is handled, since you might get a scenario where you don't synchronize with the end value.</p>

<hr>

<h2>Usability</h2>

<p><code>GeneratePointsForSmoothMovement</code> is a low level generator. The caller code should still think about technical parameters to provide. And if a caller requires several levels of smoothness, multiple calls with different parameters have to be executed. In order to provide the consumer a solution that avoids most overhead, you could write an extension method on <code>IEnumerable&lt;Tuple&lt;Double,Double&gt;&gt;</code> and preferrably also on <code>IDictionary&lt;Double,Double&gt;</code> for faster lookup.</p>

<p>In pseudo code:</p>

<pre><code>public static Func&lt;Double, Double&gt; ToContinuousFunction(
    this IDictionary&lt;Double,Double&gt; points)
{
    return new Func&lt;Double, Double&gt;(x =&gt; 
    {
        if (points.TryGetValue(x, out var y))
        {
            return y;
        }

        // .. perform lineair interpolation or extrapolation based on nearby points
    });
}
</code></pre>

<p>Let's say we have points <code>(x: 1, y: 10)</code> and <code>(x: 2, y: 20)</code>:</p>

<pre><code>var f = points.ToContiniousFunction();
var yValues = new [] 
{
    f(1)    // 10  (from cache)
   ,f(1.5)  // 15  (interpolation)
   ,f(2)    // 20  (from cache)
   ,f(3)    // 30  (extrapolation)
};
</code></pre>
    </div>