<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Use local labels</h1>
<p>All of your labels are global labels.</p>
<p>Since all these labels are trying to complete the same task and they all work together, they should all be grouped under a single global variable, and have the rest of the labels be local.</p>
<p>For example, you would change this label:</p>
<pre><code>fizzbuzz_check:
</code></pre>
<p>to:</p>
<pre><code>.fizzbuzz_check:
</code></pre>
<p>Also, it's just better practice.</p>
<hr>
<h1>Different conditional jump</h1>
<p>At the end of each check for either Fizz, Buzz, or FizzBuzz, you do something like this:</p>
<pre><code>  je    print_fizzbuzz   ; if so, proceed with printing

  jmp   fizz_check       ; if not, try checking for fizz

  print_fizzbuzz:
</code></pre>
<p>This could be shortened to:</p>
<pre><code>  jne    main_loop

  print_fizzbuzz:
</code></pre>
<p>If the <code>jne</code> doesn't pass, execution will fall through to <code>print_fizzbuzz</code></p>
<hr>
<h1>Versatility</h1>
<p>Right now, your code only supports Fizz, Buzz, and Fizzbuzz.</p>
<p>But what if you wanted to change things up a bit? Say you wanted to say "Fizz" every fourth number?</p>
<p>To do this, you'd be adding quite a chunk of code.</p>
<p>Although, there is an easier way to do this; use <code>struc</code>s.</p>
<p>Say you created this <code>struc</code>:</p>
<pre><code>struc message

    .say: resb 10
    .num: resb 1

endstruc
</code></pre>
<p>You could then do something create a bunch of messages easily like this:</p>
<pre><code>messages:
    db "FizzBuzz", 0, 0
    db 15

    db "Buzz",0,0,0,0,0,0
    db 5

    db "Fizz",0,0,0,0,0,0
    db 3

    db 0,0,0,0,0,0,0,0,0,0; so, when iterating, can know if the end has been reached
    db 0
</code></pre>
<p>(The extra 0's are for filling up the 10 bytes given for the name)
(Note the order: you want greatest to least)</p>
<p>And, you can easily</p>
<p>Now, in your main code, you can easily iterate through <code>messages</code> and, if the counter is evenly divisible by the value in the <code>num</code> field, then you log the <code>say</code> field.</p>
<p>Now, the code could be written like this:</p>
<pre><code>xor cx, cx

main_loop:
    inc cx
    cmp cx, 100

    jg .done

    call search

    jmp main_loop

.done:
    .EXIT

search:
    mov si, messages

.next:
    mov ax, cx
    mov bh, [si + message.num]; divisor
    div bh

    cmp ah, 0; was evenly divisible
    je .print_message

    add si, message_size
    cmp byte [si], 0; the next item in `messages` is the terminator
    jne .next

    jmp .print_num

.print_message:
    PutStr [si + message.say]
    nwln
    ret
    
.print_num:
    PutInt cx
    nwln
    ret
</code></pre>
<p><em>Note: This was troublesome to test out without <code>macros.s</code> so if there are any issues, notify me</em></p>
    </div>