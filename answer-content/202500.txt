<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First, the <code>docstring</code> goes inside of the class definition:</p>

<pre><code>class Circle(Shape):
    """
    Circle class attributes must be:
    radius=x
    """
    ...
</code></pre>

<p>This allows you to e.g. call <code>help(Circle)</code> in an interactive shell and get back this string. This is documented in <a href="https://www.python.org/dev/peps/pep-0257/" rel="nofollow noreferrer">PEP257</a>.</p>

<hr>

<p>To answer your question how the user is to know what the parameters are, just make them explicit in the constructors:</p>

<pre><code>class Circle(Shape):
    def __init__(self, radius):
        super().__init__(radius=radius)
        self.area = pi * radius**2
        self.perimeter = 2 * pi * radius
</code></pre>

<p>This way it is actually useful to override the <code>__init__</code> method. If all you do is call the parents constructor (without any change of arguments) you could just leave it out.</p>

<p>Note that I also moved the calculation of perimeter and area into the constructor. This way the class is usable right after construction and you don't need to call some arcane calculate this property function.</p>

<p>I also fixed your calculation for the perimeter and area of the circle.</p>

<hr>

<p>Normally I would probably make them an actual <code>property</code>:</p>

<pre><code>class Circle(Shape):
    def __init__(self, radius):
        super().__init__(radius=radius)

    @property
    def area(self):
        return pi * self.radius**2

    @property
    def perimeter(self):
        return 2 * pi * self.radius
</code></pre>

<p>But this has the disadvantage that you cannot discover it from the <code>__dict__</code> anymore. But then again, these are two fixed names, so you could hardcode them in <code>Shape.__str__</code>:</p>

<pre><code>class Shape:
    def __init__(self, **kwargs):
        for key, value in kwargs.items():
            setattr(self, key, value)

    def __str__(self):
        all_info = [self.__class__.__name__]
        for attribute, value in self.__dict__.items():
            if value &gt; 0:
                all_info.append(f"{attribute}: {value:.2f}")
        all_info.append(f"{area}: {self.area:.2f}")
        all_info.append(f"{perimeter}: {self.perimeter:.2f}")
        return "\n".join(all_info)
</code></pre>

<p>Note that I removed your string addition, because <a href="https://softwareengineering.stackexchange.com/questions/304445/why-is-s-better-than-for-concatenation">it is very costly in Python</a> (strings are immutable, so adding two strings involves allocating a new string of the correct size and copying the content of the two strings there), especially if you do many of them, as you do here. Instead I used a list of strings, which I <a href="https://www.tutorialspoint.com/python/string_join.htm" rel="nofollow noreferrer"><code>str.join</code></a> in the end.</p>

<p>I also used the new <a href="https://docs.python.org/3/whatsnew/3.6.html#whatsnew36-pep498" rel="nofollow noreferrer"><code>f-string</code></a> to make the formatting a lot easier to read.</p>
    </div>