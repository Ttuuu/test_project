<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First, you can make your empty board much faster. For a start, you can create a list of 8 <code>'.'</code>s with the multiplication operator.</p>

<pre><code>board = ['.'] * 8
</code></pre>

<p>And you can make it have the 2 axes with a thing called a list comprehension. It's basically a shorthand for generating a list with a for loop.:</p>

<pre><code>board = [['.']*8 for _ in range(8)]
</code></pre>

<p>Using <code>_</code> in this loop is just a Python style for saying that the variable doesn't matter, we really just want to iterate 8 times.</p>

<p>I also don't recommend naming your board <code>board_x</code> as that implies it's specifically only the x axis, when it contains both. I would also say there's no need to separate <code>__init__</code> from <code>create_board</code></p>

<pre><code>def __init__(self):
    """Initialise a new chess board."""

    self.board = [['.']*8 for _ in range(8)]

    board[7][4] = 'K'
    board[7][3] = 'Q'
    board[7][2] = 'B'
    board[7][1] = 'N'
    board[7][0] = 'R'
</code></pre>

<p>Also confusingly you seem to only initialise some pieces of the board. If this is intentional, you should explain why in a comment and not leave people to guess.</p>

<hr>

<p>Now the White King. I agree about the inheritance being funny, I also don't see why he would need to inherit and create a separate copy of the board. This sounds like it would only create issues.</p>

<p>For parameters, I think you should name them shorter and don't need to be as explicit. People will know what <code>WhiteKing.x</code> is, you don't need <code>position</code> and <code>WK</code> around it. Likewise you can cut down to <code>symbol</code> as your last name.</p>

<p>I would also suggest editing the chess board when creating this piece. This is when you should insert the King into the board as it means you're essentially creating and placing him on the board. That does also mean you'd need to pass the chessboard as a parameter, but that's good practice anyway so that the King is linked to the board, rather than having an inheritance to join them.</p>

<pre><code>def __init__(self, chessboard):
    self.x = 7
    self.y = 4
    self.symbol = 'K'
    chessboard[self.x][self.y] = self.symbol
</code></pre>

<p>Note that you could make this cleverer if you added a method to the board that would take a piece and two co-ordinates as a parameter and handle their movement. Something like this:</p>

<pre><code>class Chess_Board:

    ...

    def move(self, piece, x, y):
        #Reset the old spot to be empty then update the new spot
        self.board[piece.x][piece.y] = '.'
        self.board[x][y] = piece.symbol

        #Now that it's moved, update the piece itself
        piece.x = x
        piece.y = y
</code></pre>

<p>The reason this is a good idea is that you can now have the board check if a move is actually allowed for the board. For example, not going off the edges or not trying to take a king (in the latter case it should instead be presenting as either a check or checkmate), while the piece itself can handle telling the player that it can't move that way (ie trying to get a king to travel more than one square at a time).</p>

<hr>

<p>Back to the King, where you did create a <code>move</code> function. First please don't use a bare <code>try: except:</code>. If you are generating errors you should know <em>exactly</em> what the error is and where it can happen, and account specifically for that issue. A bare <code>try: except:</code> wouldn't even tell you if you made a typo and would leave the error unchecked. </p>

<p>I'm guessing you want this to ignore either input errors or IndexErrors, but in both cases they ought to be handled, not ignored. So for input, I'd set up a <code>while</code> loop that breaks when two valid inputs are supplied. Like this:</p>

<pre><code>while True:
    try:
        print ('Give a x and y coordinate for WHITE KING')
        movex = int(input())
        movey = int(input())
        break
    except ValueError:
        print ('Co-ordinates can be only be an integer')
</code></pre>

<p>(again I used shorter but still clear variable names)<br>
A ValueError is what's raised if <code>int()</code> is unable to parse a number from what's supplied. I also reccomend giving some feedback to the user about what they've done:</p>

<pre><code>    print ("White King to {} {}...".format(movex, movey))
</code></pre>

<p><code>str.format</code> is a good method for inserting variables into a string, I can explainfurther if you're not familiar with it.</p>

<p>The tests you do here for what's in the destination is mostly stuff I'd move to <code>Chess_Board</code> as I suggested earlier. However I'd keep the checks to ensure that the King specifically can move the amount the user has suggested. Your test for the king's movement seems generally good to me, except I'd flip to check if it is moving more than 1, and use <code>or</code> since that way it only needs to check if it's moved more than 1 in either case. However, you did forget to check if the King <em>isn't</em> being moved, so I added that too.</p>

<pre><code>        if (abs(self.x - movex) &gt; 1 or abs(self.y - movey) &gt; 1 or
                (self.x == movex and self.y == movey)):
</code></pre>

<p>In order to allow the user to input a new number you can actually just have the <code>Chess_Board.move</code> function return a boolean, <code>True</code> if the move was allowed but otherwise <code>False</code>. Here's how this whole method would work:</p>

<pre><code>def move(self):
    while True:
        while True:
            try:
                print ('Give a x and y coordinate for WHITE KING')
                movex = int(input())
                movey = int(input())
                break
            except ValueError:
                print ('Co-ordinates can be only be an integer')

        if (abs(self.x - movex) &gt; 1 or abs(self.y - movey) &gt; 1 or
                (self.x == movex and self.y == movey)):
            print ('The king cannot perform that move, please choose co-ordinates again.')
            continue

        print ('White King to {} {}...'.format(movex, movey))
        if chessboard.move(self, movex, movey):
            break # Moved successfully

        print ('Your move is invalid for this board, please choose co-ordinates again.')
        # You could have a more specific message about not placing the King in check.
</code></pre>

<p>Even if you don't take these exact suggestions, I think it's worth thinking more about what a class is and should do. Why should the King check if he's allowed to go to square 8, 4. That's the board's job!</p>
    </div>