<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><em>I went ahead and refactored your code a lot. However, before I get into that, lets talk about what you did and what you could have done differently.</em></p>

<p><em>Feel free to let me know if you want me to expand on something specific.</em></p>

<h2>Logic regarding: function calculateAverage(tests) {}</h2>

<p>Calculate average function should <strong>not</strong> take in parameters a list of <code>HTMLInputElements</code> and should <strong>not</strong> return a <code>string</code>.</p>

<p>Why? Well it doesn't make sense. <code>calculateAverage</code> should take a list of values and calculate an average.</p>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>function calculateAverage(values){
  return values.reduce((a,c)=&gt;a+c,0)/values.length;
}
const avg = calculateAverage([1,2,3]);

console.log(avg);</code></pre>
</div>
</div>


<p>Because you return a string... later on you have to do this:</p>

<pre><code>physicsAverage.value.slice(9)
</code></pre>

<p>Not good ! And can become extremely buggy !</p>

<h2>Use <a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelectorAll" rel="noreferrer">querySelectorAll</a></h2>

<p><code>querySelectorAll</code> is your friend. It allows you to transform this:</p>

<pre><code>document.getElementById('physics').getElementsByTagName('input');
</code></pre>

<p>into this:</p>

<pre><code>document.querySelectorAll('#physics &gt; input');
</code></pre>

<h2>Declare static variables globally:</h2>

<p>In your calculator listener callback, you declare a list of variables.</p>

<pre><code>var physicsTests = document.getElementById('physics').getElementsByTagName('input');
var physicsAverage = document.getElementById('physicsAverage');
//etc
</code></pre>

<p>But these variables never change. So don't declare them in your callback, move them outside and at the top of your file.</p>

<h2>Create generic code !</h2>

<p>With the current code you have, a lot of manual labor is needed if you wish to add another subject. In my final solution, everything is built in a way where adding a new subject requires <strong>NO</strong> changes in the javascript.</p>

<p>To able to do this, use <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/data-*" rel="noreferrer">data-*</a> HTML properties. It's super powerful when you need to add some extra info like the coefficients of each subject.</p>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>const subjects = document.querySelectorAll("div[data-coef]");

subjects.forEach(subject=&gt;{
  console.log(subject.id, subject.dataset.coef);
});</code></pre>
<pre class="snippet-code-html lang-html prettyprint-override"><code>&lt;div id="physics" data-coef="3"&gt;&lt;/div&gt;
&lt;div id="history" data-coef="2"&gt;&lt;/div&gt;</code></pre>
</div>
</div>


<p>Another powerful tool is <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map" rel="noreferrer">Map</a>. It allows you to easily keep track of specific subjects and other variables. </p>

<h2>Solution:</h2>

<p></p><div class="snippet" data-lang="js" data-hide="true" data-console="true" data-babel="false">
<div class="snippet-code snippet-currently-hidden">
<pre class="snippet-code-js lang-js prettyprint-override"><code>const inputContainers = document.querySelectorAll('form#form &gt; .subject');

const finalGradeElement = document.getElementById('finalGrade');  
const form = document.getElementById('form');

const m = new Map();

inputContainers.forEach((container,i)=&gt;{
  const output = container.querySelector(".output");
  const inputs = Array.from(container.getElementsByTagName("input"));
  const coef = Number(container.dataset.coef);
  
  const data = Array(inputs.length);
  m.set(i, {
    output, data, coef
  }); 
  
  inputs.forEach((item,j)=&gt;item.addEventListener("input", function(){
    if(!this.value.length &gt; 0){
       data[j] = undefined;
    } else {
       data[j] = Number(this.value);
    }
  }));
});

document.getElementById('calculator')
.addEventListener('click', function() {

  const res = Array.from(m.values()).reduce( (a,{output, data, coef})=&gt;{
  
      const values = data.filter(item=&gt;item!==undefined);
      
      if(values.length &gt; 0){
        const avg = values.reduce((a,c)=&gt;a+c, 0)/values.length;
        a.avgTotal  += avg * coef;
        a.coefTotal += coef;
        
        output.value = `Average: ${avg.toFixed(1)}`;
      } else {
        output.value = "Please enter a number";
      }
      
      return a;
  }, {avgTotal: 0, coefTotal: 0})

  const averagesTotal = res.avgTotal/res.coefTotal;
  
  finalGradeElement.value = `Final Grade: ${averagesTotal.toFixed(1)}`
  
});

function isEdited(){
  return !Array.from(m.values()).every(({data})=&gt;{
    return data.every(i=&gt;i===undefined);
  });
}

document.getElementById('resetter')
.addEventListener('click', function() {
  if (isEdited() &amp;&amp; confirm('Your changes will be lost.\nAre you sure you want to reset?')) {
    form.reset();
    m.clear();
  }
});

window.addEventListener('beforeunload', function(event) {
  if (isEdited()) {
    event.returnValue = 'Your changes may be lost.';
  }
});</code></pre>
<pre class="snippet-code-css lang-css prettyprint-override"><code>form &gt; div {
  display: flex;
  flex-direction: column;
}</code></pre>
<pre class="snippet-code-html lang-html prettyprint-override"><code>&lt;form id="form"&gt;
  &lt;div class="subject" data-coef="3"&gt;
    Physics:
    &lt;input type="number"&gt;
    &lt;input type="number"&gt;
    &lt;input type="number"&gt;
    &lt;output class="output"&gt;&lt;/output&gt;
  &lt;/div&gt;
  &lt;div class="subject" data-coef="2"&gt;
    History:
    &lt;input type="number"&gt;
    &lt;input type="number"&gt;
    &lt;input type="number"&gt;
    &lt;output class="output"&gt;&lt;/output&gt;
  &lt;/div&gt;
  &lt;button type="button" id="calculator"&gt;Calculate&lt;/button&gt;
  &lt;button type="button" id="resetter"&gt;Reset&lt;/button&gt;
  &lt;output id="finalGrade"&gt;&lt;/output&gt;
&lt;/form&gt;</code></pre>
</div>
</div>

    </div>