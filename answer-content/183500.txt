<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First I pretty agree with @le_m: a simple function is absolutely enough for such a need.</p>

<p>Second I pretty agree with @Blindman67: seems good to enlarge the capabilities of the function, i.e.</p>

<ul>
<li>accepting more than 2 factors</li>
<li>accepting more free use of spaces</li>
<li>possibly accepting floats, not only integers</li>
</ul>

<p>Then, taking these advantages, I suggest a way far more simpler than the ones proposed above, by merely using the unloved <code>eval()</code> function:</p>

<ul>
<li>it's main flaw is that it may be severely unsafe if not carefully used: so here we'll take the necessary steps to avoid that.</li>
<li>it's generally slower than using alternatives: for the current need it seems that it shouldn't matter, but I admit that it should be accurately evaluated in the case of a massive use of the function.</li>
</ul>

<p>Here is the simpler version (accepting only integers) of such a solution:</p>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>function calc(expr) {
  return /^( *[-+]? *\d+)+ *$/.test(expr) ? eval(expr) : undefined;
}

['3 + 7', '3 - 7', '3- 7', '3 -7', '3-7', '-3-7', '3 - 7.9', '3 - - 7', '3 - a 7', '3 a 7', '3-7-', '3-7-1', ' 37  -25']
.forEach(expr =&gt; console.log(expr, '-&gt;', calc(expr)));</code></pre>
</div>
</div>


<p>As stated above, using the regexp ensures to avoid executing any malicious code which might have been put in the incoming expr.<br>
At the same time, it eliminates any expr not-compliant with our need (but allows any number of spaces between operands/operators)</p>

<p>Here I reused the @Blindman67 examples, and you can see that float numbers cause the entire expr to be evaluated as <code>undefined</code>.<br>
In order to accept them we only must slightly change the regexp:</p>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>function calc(expr) {
  return /^( *[-+]? *(\d+.)?\d+)+ *$/.test(expr) ? eval(expr) : undefined;
}

['3 + 7', '3 - 7', '3- 7', '3 -7', '3-7', '-3-7', '3 - 7.9', '3 - - 7', '3 - a 7', '3 a 7', '3-7-', '3-7-1', ' 37  -25', '3 + 7..2']
.forEach(expr =&gt; console.log(expr, '-&gt;', calc(expr)));</code></pre>
</div>
</div>


<p>In this case I choosed to return a float rather than its rounded value when a float features in the expr.
Obviously we can change our option without more effort, like this:</p>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>function calc(expr) {
  return /^( *[-+]? *(\d+.)?\d+)+ *$/.test(expr) ? Math.round(eval(expr)) : undefined;
}

['3 + 7', '3 - 7', '3- 7', '3 -7', '3-7', '-3-7', '3 - 7.9', '3 - - 7', '3 - a 7', '3 a 7', '3-7-', '3-7-1', ' 37  -25', '3 + 7..2']
.forEach(expr =&gt; console.log(expr, '-&gt;', calc(expr)));</code></pre>
</div>
</div>


<p>In all these different versions the function remains pretty simple.</p>
    </div>