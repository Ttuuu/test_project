<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I think you should separate the computation in three different functions, one for minutes, one for hours, and one for days. And generalize each of these functions, so they can be used for other time frames if you ever decide to change them.</p>

<h2>Minutes</h2>

<p>You can specify an extra parameter in <code>range()</code>, the <code>step</code>: how much is added every iteration. With this the method to check a minute time frame is quite simple:</p>

<pre class="lang-py prettyprint-override"><code>def minute_timeframe(minutes, timestamp, timeframes):
    for x in range(0, 60, minutes):
        if timestamp.minute == x:
            timeframes.append(f"{minutes}m")
</code></pre>

<p>Since your tags say you use Python 3, I used <a href="https://docs.python.org/3/reference/lexical_analysis.html#f-strings" rel="nofollow noreferrer">formatted string literals</a>.</p>

<h2>Hours</h2>

<p>Be careful! You are using the <code>&amp;</code> operator, which in Python is the <code>binary and</code> operation. Since what you want is probably the logical and (i.e. this is true and the other is true), use the <code>and</code> keyword (same for <code>or</code> and <code>not</code>).</p>

<p>By looking at your implementation of hour timeframes, it's pretty easy to generalize:</p>

<pre class="lang-py prettyprint-override"><code>def hour_timeframe(hours, timestamp, timeframes):
    if timestamp.minute == 0 and timestamp.hour % hours == 0:
        timeframes.append(f"{hours}h")
</code></pre>

<h2>Days</h2>

<p>The same happens for generalizing days. I must comment though, that your original does not seem to follow the <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">PEP 8 Style</a> for the indentations on that part of the code. You also do not need the parenthesis surrounding the if condition.</p>

<pre class="lang-py prettyprint-override"><code>def day_timeframe(days, timestamp, timeframes):
    if timestamp.minute == 0 and timestamp.hour == 0 and timestamp.day % days == 0:
          timeframes.append(f"{days}d")
</code></pre>

<h2>Final result</h2>

<p>Now that our functions are generalized, in my opinion what would be best is to store a list of the different timeframes you want to use, that way adding new ones or changing them is simple. This is the final function:</p>

<pre class="lang-py prettyprint-override"><code># Constants go in ALL_CAPS
MINUTE_TIMEFRAMES = [3, 5, 15, 30]
HOUR_TIMEFRAMES = [1, 2, 3, 4, 6, 8]
DAY_TIMEFRAMES = [1, 2, 3]

def get_timeframes(self):
    timestamp = datetime.datetime.utcnow()
    timeframes = ["1m"]

    for x in MINUTE_TIMEFRAMES:
        minute_timeframe(x, timestamp, timeframes)

    for x in HOUR_TIMEFRAMES:
        hour_timeframe(x, timestamp, timeframes)

    for x in DAY_TIMEFRAMES:
        day_timeframe(x, timestamp, timeframes)

    # Format it correctly and use 'and'
    if (timestamp.minute == 0 and timestamp.hour == 0 and
        calendar.day_name[date.today().weekday()] == "Monday"):
        timeframes.append("1w")
</code></pre>
    </div>