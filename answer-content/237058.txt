<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>One of the most important things to take care of when writing a database application is to prevent unwanted access. This means that you always want to make sure that there is no user (and the programmer, i.e. you should be included in that) can supply an input that can escape the query and e.g. delete your whole database. This attack vector is called SQL injection and is very common. <a href="https://www.w3schools.com/python/python_mysql_where.asp" rel="nofollow noreferrer">Avoiding it is relatively easy, thankfully</a>, although you cannot do it for the table name:</p>

<pre><code>@classmethod
def login(cls, user_name, password):
    db = mycon.connect(host=cls.host, user=cls.user, password=cls.password,
                       database=cls.database)
    cursor = db.cursor()
    query = f"SELECT firstName, lastName, password, UserName, email FROM {cls.table} WHERE UserName = %s;"
    r = cursor.execute(query, (user_name,))
    user_info = cursor.fetchone()
    if user_info is not None:
        if user_info[2] == password:
            print("Login Successful")
            return cls(user_info[0],user_info[1],user_info[3],user_info[4])
        else:
            print(f"INVALID PASSWORD {password} {user_info[2]}")
    else:
        print("USER DOES NOT EXIST")
    db.close()
</code></pre>

<p>Note that I followed Python's official style-guide, <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">PEP8</a>, which recommends using <code>lower_case</code> for variables and functions, spaces after commas and around <code>=</code> when using it as an assignment, but no space around the <code>=</code> when using it for keyword arguments.</p>

<p>Comparisons to <code>None</code> should always be done with <code>is</code> or <code>is not</code> and <code>if</code> conditions don't require parenthesis, since it is a keyword.</p>

<p>I also explicitly named the column names (they might be called differently, judging by <code>UserName</code>, so you would have to fix that), to ensure that you can change the table structure, as long as these names stay the same.</p>

<p>And I used an <a href="https://www.python.org/dev/peps/pep-0498/" rel="nofollow noreferrer"><code>f-string</code></a> for easy formatting in case of an invalid password. Note that in this case you do reveal the actual password (I guess this is just for testing, just make sure you don't forget to remove that information later). In a similar vein, you should not store passwords in plaintext. Hash them with a good hashing algorithm and ideally add a salt.</p>

<p>You could also use the <a href="https://dev.mysql.com/doc/connector-python/en/connector-python-api-mysqlcursornamedtuple.html" rel="nofollow noreferrer"><code>mysql.cursor.MySQLCursorNamedTuple</code></a> cursor, so you can say <code>user_info.password</code> instead of <code>user_info[2]</code>. Just use <code>cursor = db.cursor(named_tuple=True)</code>.</p>

<p>You should do yourself a favor and add a <a href="https://www.python.org/dev/peps/pep-0257/" rel="nofollow noreferrer"><code>docstring</code></a> to every method you write, to explain what the method does, what its arguments are and what it returns.</p>
    </div>