<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">


<p>I want to focus on the <code>SqlResult</code>/<code>SqlResultRow</code> classes here. The way it is, it is analogous to having bought a huge expensive truck then insisting on driving the original dinky car that you wouldn't trade in and paying the payments on both the truck and the dinky car. </p>

<p><strong>Why?</strong></p>

<p>Because you're basically taking an <code>ADODB.Recordset</code> object, a full-featured entity that provides sorting, filtering, jumping to an arbitrary position, and few more. That's your expensive truck. You then painstakingly copy the contents of the recordset into a custom collection which has much less features... that's your dinky car. </p>

<p>Now, you are doing this for encapsulation and that's <em>not a bad thing</em> at all! However, what I propose is that instead of copying the content from a recordset to a custom collection, that you use the <code>ADODB.Recordset</code> as the implementation underneath the <code>SqlResult</code> class. </p>

<p>That way, it becomes very easy to wrap methods like sorting, filtering, jumping what have you. The consumers of the <code>SqlResult</code> class need not know about the recordset under the hood driving the class. </p>

<p><strong>But, I don't want the connection leaking!</strong></p>

<p>And that's a legit concern! However, with an <code>ADODB.Recordset</code>, it is easy to manage this. What you actually want is a disconnected recordset. That way, the contents of the recordset are all available in the user's computer's memory and there's no dangling connection. What you should do is basically something like this:</p>

<pre class="lang-vb prettyprint-override"><code>Public Function Execute(connection As ADODB.connection, ByVal sql As String, ParamArray parametervalues()) As ADODB.Recordset

    Dim Values() As Variant
    Values = parametervalues

    Dim cmd As ADODB.Command
    Set cmd = CreateCommand(connection, adCmdText, sql, Values)

    'Configure the recordset to use client-side snapshot
    'which is the only valid option for disconnected recordset
    'It needs not be readonly but updatable disconnected recordset
    'is needlessly complicating things anyway.
    Dim rs As ADODB.Recordset
    Set rs = New ADODB.Recordset
    With rs
        .CursorLocation = adUseClient
        .CursorType = adOpenStatic
        .LockType = adLockReadOnly
    End With

    'Load the recordset with result of the command
    'We can't assign rs directly from the Execute method of the cmd
    'or it'll coerce it to the wrong type of the recordset
    rs.Open cmd

    'Disconnect the recordset
    Set rs.ActiveConnection = Nothing        

    Set Execute = rs

End Function
</code></pre>

<p>Now we have a disconnected recordset that can be browsed, iterated, etc. and then provided to the <code>SqlResult</code> class. </p>

<p>That way the consumers need not know about the implementation of ADO but you still get all the goodness of <code>ADODB.Recordset</code> without incurring any extra costs and you can then modify the <code>SqlResult</code> class to wrap various features on the <code>ADODB.Recordset</code> for essentially free. By the same token, <code>SqlResultRow</code> is easier, since you can leverage the <code>ADODB.Record</code> or something similar. Now you're actually driving that fancy expensive truck, something you <em>would</em> have gotten anyway even if you didn't really needed all the features it has to offer.</p>
    </div>