<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<pre><code>          if (probK &lt;= prob) { // increment k until cumulative probability, prob, reached
             k++;
             prob -= probK;
          } else {
             break;
          }
</code></pre>
</blockquote>

<p>With this pattern, it's often better to write </p>

<pre><code>          if (probK &gt; prob) {
              break;
          }

          k++;
          prob -= probK;
</code></pre>

<p>This saves some indent and makes it clear what is happening.  We check for the end condition and then proceed normally if it was not reached.  The other way, it's not obvious what the end condition is, since it is hidden in an <code>else</code>.  </p>

<p>But I would actually rewrite the whole loop.  </p>

<pre><code>      int k = 0;
      for (double probabilityOfK = Math.exp(-lambda);
              probabilityOfK &lt;= targetProbability; 
              probabilityOfK *= lambda / k) {
          targetProbability -= probabilityOfK;
          k++;
      }
</code></pre>

<p>The <code>for</code> loop declaration is on three lines to eliminate side scroll on this site.  It might fit on one line in actual code.  </p>

<p>I prefer <code>probabilityOfK</code> to <code>probK</code> as being more readable.  I prefer <code>targetProbablity</code> to <code>prob</code> as being more descriptive.  </p>

<p>I stopped using <code>Math.pow</code> as a rather expensive calculation.  It is replaced with a simple multiplication.  And you were multiplying anyway, so that's effectively free.  </p>

<p>Now it doesn't use a loop forever pattern with a break.  It just loops normally until the condition fails.  </p>

<p>This works because you never use <code>cumulativeProbability</code> outside the loop, but each value relates to the previous one.  </p>

<p>The result may change slightly due to double rounding.  It's up to you if that matters.  And if it does matter, if the original was better.  </p>

<blockquote>
<pre><code>    for (int i = 0; i &lt; lines.length; i++) {
</code></pre>
</blockquote>

<p>I would do this with a range-based <code>for</code> loop.  Something like </p>

<pre><code>    for (Queue&lt;?&gt; line : lines) {
</code></pre>

<p>Then you could replace all the <code>lines[i]</code> with just <code>line</code>.  Replace <code>Queue&lt;?&gt;</code> as necessary.  </p>

<blockquote>
<pre><code>       while (!lines[i].isEmpty() &amp;&amp; k &gt; 0) {
</code></pre>
</blockquote>

<p>Consider something like </p>

<pre><code>        if (k &gt;= line.size()) {
            line.clear();
            continue;
        }

        while (k &gt; 0) {
</code></pre>

<p>Now you don't have to check if <code>line</code> is empty, as you'll run out of <code>k</code> before you run out of <code>line</code>.  </p>

<p>You could move that check into the previous loop.  Then if you reach the maximum possible <code>k</code>, you can stop immediately rather than continuing.  That might be more efficient.  Something like </p>

<pre><code>        for (Queue&lt;?&gt; line : lines) {
            if (line.isEmpty()) {
                continue;
            }

            updateLine(line);
        }
</code></pre>

<p>and </p>

<pre><code>    public void updateLine(Queue&lt;?&gt; line) {
        int k = 0;
        for (double probabilityOfK = Math.exp(-lambda);
                probabilityOfK &lt;= targetProbability; 
                probabilityOfK *= lambda / k) {

            targetProbability -= probabilityOfK;
            k++;

            if (k &gt;= line.size()) {
                line.clear();
                return;
            }
        }

        while (k &gt; 0) {
            line.decrement();
            k--;
        }
    }
</code></pre>
    </div>