<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Style</h2>

<p>These are in order of me thinking of them; not in order of first appearance. Sorry!</p>

<h3><code>#[test]</code></h3>

<p>If you mark your tests with <code>#[test]</code>, then running <code>cargo test</code> will run them. If you also mark them with <code>#[cfg(test)]</code>, then they'll only be compiled in test mode.</p>

<h3>Unneeded <code>collect()</code></h3>

<p><code>cargo clippy</code> is an invaluable tool. Here, it found an optimisation!</p>

<pre><code>if !number.iter().filter(|&amp;x| *x &gt; 0 &amp;&amp; *x &gt;= from_base ).collect::&lt;Vec&lt;_&gt;&gt;().is_empty(){
    return Err(Error::InvalidDigit(from_base));
}
</code></pre>

<p>It points out that <code>.collect::&lt;Vec&lt;_&gt;&gt;().is_empty()</code> should be replaced with <code>.next().is_none()</code>:</p>

<pre><code>if !number
    .iter()
    .filter(|&amp;x| *x &gt; 0 &amp;&amp; *x &gt;= from_base)
    .next()
    .is_none()
{
    return Err(Error::InvalidDigit(from_base));
}
</code></pre>

<p>The compiler's <em>probably</em> smart enough to turn this into efficient code,<sup><a href="//" rel="nofollow noreferrer">[citation needed]</a></sup> but this code can be made clearer:</p>

<pre><code>if number.iter().any(|&amp;x| x &gt; 0 &amp;&amp; x &gt;= from_base) {
    return Err(Error::InvalidDigit(from_base));
}
</code></pre>

<h3>Unnecessary casting</h3>

<pre><code>inter = inter as f64/base as f64;
</code></pre>

<p>can be</p>

<pre><code>inter /=  base as f64;
</code></pre>

<p>and you can get rid of all of the <code>base as f64</code> bits by putting</p>

<pre><code>let base = base as f64;
</code></pre>

<p>at the top of <code>convert_back</code>.</p>

<p>After a quick pass through <code>cargo fmt</code> to clean up the errant spacing and expand the iterator chain to separate lines, this all looks pretty good.</p>

<h2>Algorithm</h2>

<p>Your algorithm is, sadly, more limited than it looks. Your use of <code>as</code> is a little risky, as casting to a smaller integer truncates it. However, that won't get to be a problem, because as soon as the <code>from_base.pow</code> ends up with a number bigger than <code>u32</code> can store, it'll panic.</p>

<p>You need some kind of "too big" <code>Error</code> variant if you want to handle this gracefully; you could check whether <code>number.len() &gt; u32::MAX</code> (otherwise <code>as</code>'s truncation could cause issues), and then check whether all the <code>.pow</code> calls are guaranteed to work (perhaps with <code>.checked_pow</code>?), and then whether adding all the digits together will exceed the bounds of <code>u32</code>.</p>

<p>Alternatively, you could make the algorithm convert via base 2³² instead of <code>u32</code>s, which would resolve the issue.</p>
    </div>