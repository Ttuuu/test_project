<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Buggy game mechanics</h2>

<p>Your program reports "Player<i>p</i> has been eliminated after <i>t</i> turn(s)!", but without any visual confirmation, so you're blindly trusting that the logic is correct.  But is it?</p>

<p>If I do add a visualization, then I see bizarre things like this happening (where <code>T</code> represents the tagger, and the numbers represent the pursued players):</p>

<pre class="lang-none prettyprint-override"><code>⋮
Turn 5:
 ---------
|         |
|     3   |
|         |
| 2       |
|         |
|   0     |
|         |
|         |
|       T |
 ---------
Turn 6:
 ---------
|         |
|    3    |
|         |
|2        |
|         |
|         |
|   0     |
|         |
|      T  |
 ---------
Player0 has been eliminated after 7 turn(s)!
Player3 has been eliminated after 7 turn(s)!
Player2 is the winner!
</code></pre>

<p>Let's examine the tagging logic:</p>

<blockquote>
<pre><code>above_or_under = player.position[0] in (self.position[0] + 1, self.position[0] - 1)
left_or_right = player.position[1] in (self.position[1] + 1, self.position[1] - 1)
if above_or_under or left_or_right:
    del player_list[player_list.index(player)]
    …
</code></pre>
</blockquote>

<p>Basically, this isn't a regular game of tag ("A player is out if they are directly above, next to, or below the tagger. Diagonally does not count"), but a <strong>game of laser tag with eight laser beams</strong>.  Stepping on any of these rays would put a player in the kill zone:</p>

<pre class="lang-none prettyprint-override"><code>       ┊ ┊
       │ │
       │ │
┈──────┼─┼──────┈
       │T│
┈──────┼─┼──────┈
       │ │
       │ │
       ┊ ┊
</code></pre>

<p>The moral of the story: verify what is happening visually.  Furthermore, examine the progress at each time step.  (Here's a <a href="/a/196468/9357">similarly buggy simulation</a> that could have benefitted from the same advice.)</p>

<p>As a consequence, I recommend that you split up your <code>tag()</code> method, which runs an entire game, to define a <code>one_turn()</code> method that just advances the game by one turn, to make it easier to examine the progress.</p>

<h2>Design</h2>

<p>The <strong>logic for dealing with illegal moves</strong> is cumbersome.  It's repetitive, with the <code>in_limits</code> tests within <code>move()</code> being similar to the tests within <code>is_stuck()</code>.  In <code>move()</code>, you make a choice of which direction to go, then awkwardly recurse to retry if that choice turns out to be illegal.  It would be better to weed out the illegal moves first, then make a choice that is guaranteed to succeed.</p>

<p>Furthermore, <code>move()</code> has <strong>two branches of code to handle displacements along the two axes</strong>; it would be nice to handle displacements in any direction using the same code.</p>

<p>To help solve these issues, I would define a <code>Coords</code> class to help you figure out what the neighboring positions are.  I would make it a <a href="https://docs.python.org/3/library/collections.html#collections.namedtuple" rel="nofollow noreferrer"><code>namedtuple</code></a>, because <code>position.x</code> and <code>position.y</code> would look less cluttered than <code>position[0]</code> and <code>position[1]</code>.</p>

<hr>

<p>The <code>status</code> member of the <code>Player</code> class is superfluous, as is the <code>if self.status == "IT"</code> check in the <code>tag()</code> method.</p>

<hr>

<p>The fact that the <code>move()</code>, <code>is_stuck()</code>, and <code>tag()</code> methods need so many and such similar parameters passed to them is a hint that your OOP modeling is underdeveloped.  In particular, <strong>the <code>tag()</code> method does not belong in the <code>Player</code> class.</strong>  There really ought to be a <code>TagGame</code> class that defines the arena size, keeps track of its players, and encodes the rules of the game.</p>

<h2>Style</h2>

<p><strong>When you say that the arena limits are <code>[8, 8]</code>, you mean that it's a 9×9 board, which is unconventional.</strong>  Your legal coordinates range from <code>[0, 0]</code> to <code>[8, 8]</code>, inclusive.  I would expect that when you specify <code>[8, 8]</code> as the arena limits, you would get an 8×8 board (either ranging from <code>[0, 0]</code> to <code>[7, 7]</code> inclusive, or from <code>[1, 1]</code> to <code>[8, 8]</code> inclusive).</p>

<p>When you get around to commenting your code, start by writing <a href="https://www.python.org/dev/peps/pep-0257/" rel="nofollow noreferrer">docstrings</a> first.</p>

<p>Instead of composing strings by concatenation with <code>+</code>, use <a href="https://realpython.com/python-string-formatting/" rel="nofollow noreferrer">one of the several string-formatting options</a>.  Personally, I prefer <a href="https://docs.python.org/3/library/stdtypes.html#str.format" rel="nofollow noreferrer"><code><em>str</em>.format()</code></a>, which is quite powerful and is supported by many versions of Python.</p>

<p><strong><a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer">List comprehensions</a> and <a href="https://docs.python.org/3/tutorial/classes.html#generator-expressions" rel="nofollow noreferrer">generator expressions</a> are your friend for writing compact Pythonic code!</strong></p>

<p>Flag variables, such as <code>done</code>, are almost always a sign that the code could be improved by eliminating them.</p>

<p><code>else: pass</code> is obviously superfluous.</p>

<p><code>del player_list[player_list.index(player)]</code> is simply <a href="https://docs.python.org/3/library/stdtypes.html#mutable-sequence-types" rel="nofollow noreferrer"><code>player_list.remove(player)</code></a>.</p>

<h2>Suggested solution</h2>

<p>To activate the visualization, uncomment the <code>print()</code> statements in <code>TagGame.one_turn()</code>.</p>

<pre><code>from collections import namedtuple
from random import choice, randint

class Coords(namedtuple('Coords', 'x y')):
    def is_in_bounds(self, bounds):
        return (0 &lt; self.x &lt;= bounds.x) and (0 &lt; self.y &lt;= bounds.y)

    def neighbors(self, bounds, steps=1):
        """
        Return a list of Coords that are the specified number of steps away in
        each cardinal direction and that are in bounds.
        """
        candidate_coords = [
                        Coords(self.x, self.y - steps),
        Coords(self.x - steps, self.y), Coords(self.x + steps, self.y),
                        Coords(self.x, self.y + steps),
        ]
        return [c for c in candidate_coords if c.is_in_bounds(bounds)]

class Player:
    def __init__(self, name, position, speed=1):
        self.name = name
        self.position = position
        self.speed = speed

    def __str__(self):
        return self.name

    def move(self, game):
        """
        Make a move in a random cardinal direction (unless it is impossible to
        do so without running out of bounds or stepping on another player).
        """
        player_positions = [p.position for p in game.players + [game.it]]
        destinations = [
            c for c in self.position.neighbors(game.bounds, self.speed)
            if c not in player_positions
        ]
        if destinations:
            self.position = choice(destinations)

class TagGame:
    def __init__(self, num_players):
        """
        Create a game with the specified number of players (plus the
        "it" player).
        """
        self.bounds = Coords(8, 8)
        self.it = Player("IT", Coords(8, 8))
        self.players = [
            Player("Player{0}".format(i), Coords(randint(1, 6), randint(1, 6)))
            for i in range(num_players)
        ]
        self.turns = 0

    def one_turn(self):
        """
        Run one turn of the game, yielding the players who are eliminated.
        """
        kill_zone = self.it.position.neighbors(self.bounds)
        for player in self.players:
            player.move(self)
            if player.position in kill_zone:
                self.players.remove(player)
                yield player
                if len(self.players) == 1:
                    # print(self)
                    return
        # print(self)
        self.it.move(self)

    def run(self):
        """
        Run the game until one player remains, and return that winning player.
        """
        while True:
            self.turns += 1
            for loser in self.one_turn():
                print("{0} has been eliminated after {1} turns!".format(
                    loser, self.turns
                ))
                if len(self.players) == 1:
                    print("{0} is the winner!".format(self.players[0]))
                    return self.players[0]

    def __str__(self):
        arena = (
            ' ' + '-' * self.bounds.x + ' \n' +
            '\n'.join(
                '|' + ''.join(
                    next((
                        p.name[-1] for p in [self.it] + self.players
                        if p.position == Coords(x, y)
                    ), ' ')
                    for x in range(1, self.bounds.x + 1)
                ) + "|"
                for y in range(1, self.bounds.y + 1)
            ) +
            '\n ' + '-' * self.bounds.x + ' '
        )
        return "Turn {0}:\n{1}".format(self.turns, arena)

# Your buggy laser tag games tend to finish in a handful of turns.
# A proper game of tag could sometimes take thousands of turns, so I
# wouldn't run 10000 games.
for simulation in range(2):
    TagGame(num_players=4).run()
    print("-" * 20)
</code></pre>
    </div>