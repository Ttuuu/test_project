<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I think they were probably looking for you to split out the responsibilities into classes.</p>

<p>You created your <code>product</code> class to encapsulate the data but that's where you stopped. You stuffed everything to do with UI (writing/reading the console) and calculating the tax in the main <code>Program</code> class.</p>

<p>You at least need a separate class for calculating tax:</p>

<pre><code>public class TaxCalculator
{
    public decimal CalculateTax(Product product)
    {
         // Some code - everyone loves political humour...
         return isMultinationalOrganisation ? 0 : 10000m;
    }
} 
</code></pre>

<p>Other than that there's some style points that could rely do with some work:</p>

<p>Classes should be named in Pascal case (upper camel case). <code>product</code> should be <code>Product</code>.</p>

<p>Methods should also be Pascal case <code>customRound</code> should be <code>CustomRound</code>.</p>

<p>What the hell is <code>customRound</code> even doing.</p>

<p>Don't mix concatenation and <code>string.Format</code> it kills a puppy.</p>

<pre><code>    private decimal _Total_tax;
    public decimal Total_tax
    {
        get
        {
            return this._Total_tax;
        }

        set
        {
            this._Total_tax = value + Total_tax;
        }
    }
</code></pre>

<p>Fields should be camel case. Either: <code>totalTax</code> or <code>_totalTax</code>.</p>

<p>A setter that keeps a running total isn't a good idea. Consider my example:</p>

<pre><code> TotalTax = 10;
 TotalTax = 15;
 TotalTax == 15; // False!?!?!?!?
</code></pre>

<p>You don't need to write:</p>

<pre><code>if (is_import == true) {
</code></pre>

<p>You can just write:</p>

<pre><code>if (is_import) {
</code></pre>

<p>Break the underscore key off of your keyboard. Just use camelCase for variables.</p>

<p><strong>Edit</strong></p>

<p>I think one of the other reasons for saying it isn't very OO is the fact that your CalcTax method (should be CalculateTax) takes a list of parameters when it would be better served by taking a <code>Product</code> object.</p>
    </div>