<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Nope, it is not safe. You can refer to the <a href="https://www.ibm.com/developerworks/library/wa-php-renewed_2/index.html" rel="nofollow noreferrer">following article</a> thet explains why you shouldn't use SHA-family hashing and required to use password_hash() instead. Beside other things, it means that salt field should be removed, and password field should be varchar(255).</p>

<p>To soften the pill, I've got the <a href="https://phpdelusions.net/pdo_examples/password_hash" rel="nofollow noreferrer">reference code to check the hashed passsword</a>.</p>

<p>There is one more issue which is connected to security: wherever an error occurs, <strong>you are echoing it right in the hands of a potential hacker</strong>, revealing a lot of sensitive information about your software, database structure, etc. You should never ever be doing things like  <code>echo "Error: " . $e-&gt;getMessage();</code>! For more info refer to my article on the basics of <a href="https://phpdelusions.net/articles/error_reporting" rel="nofollow noreferrer">PHP error reporting</a></p>

<p>Everything else is rather good, save for <em>peculiar code formatting</em> and unnecessary WHILE statement. When you expect just a single row, there is no need to run a while loop. Just fetch your row right away.</p>

<p>Also, it does no good to duplicate the database connection code. Store it in a file and just include wherever needed.</p>

<p>So the refactored version would be like</p>

<p>db.php:</p>

<pre><code>&lt;?php

$servername = "localhost";
$username = "whatever";
$password = "whatever";
$dbname = "whatever";
$charset = 'utf8mb4';

$options = [
    PDO::ATTR_ERRMODE            =&gt; PDO::ERRMODE_EXCEPTION,
    PDO::ATTR_DEFAULT_FETCH_MODE =&gt; PDO::FETCH_ASSOC,
    PDO::ATTR_EMULATE_PREPARES   =&gt; false,
];
$dsn = "mysql:host=$servername;dbname=$dbname;charset=$charset";
try {
     $db = new PDO($dsn, $username, $password, $options);
} catch (\PDOException $e) {
     throw new \PDOException($e-&gt;getMessage(), (int)$e-&gt;getCode());
}
</code></pre>

<p>register.php</p>

<pre><code>require 'db.php';
$hashpsw = password_hash($_POST["providedpass"],);

$stmt = $db-&gt;prepare("INSERT INTO users (username, password, level) VALUES (?,?,?)");
$stmt-&gt;execute(array($_POST["usrnm"], $hashpsw, 1));
echo "USER CREATED";
</code></pre>

<p>auth.php:</p>

<pre><code>require 'db.php';
$stmt = $db-&gt;prepare("SELECT * FROM users WHERE username = ?");
$stmt-&gt;execute([$_POST['usrnm']]);
$user = $stmt-&gt;fetch();

if ($user &amp;&amp; password_verify($_POST['providedpass'], $user['password']))
{
    echo "FOUND USER";
}
</code></pre>
    </div>