<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This bit of your code that is trying to vectorize text into count vector</p>

<pre><code>doc2_words = word_processor(document2)

doc1_word_freq = {i: doc1_words.count(i)
                for i in doc1_words}  # the doc1 vector
doc2_word_freq = {i: doc2_words.count(i)
                for i in doc2_words}  # the doc2 vector
</code></pre>

<p>can be replaced by <a href="https://scikit-learn.org/stable/modules/generated/sklearn.feature_extraction.text.CountVectorizer.html#sklearn.feature_extraction.text.CountVectorizer" rel="nofollow noreferrer">scikit-learn's CountVectorizer</a></p>

<pre><code>vectorizer=sklearn.feature_extraction.text.CountVectorizer()
vectorizer.fit([document1, document2])
doc1_word_freq = vectorizer.transform([document1])
doc2_word_freq = vectorizer.transform([document2])
</code></pre>

<p>This can be loaded directly from files with <code>vectorizer=sklearn.feature_extraction.text.CountVectorizer(content='file')</code></p>

<p>For even large text I would use Keras <a href="https://keras.io/preprocessing/text/" rel="nofollow noreferrer">keras.preprocessing.text.Tokenizer</a></p>

<p>and then this bit of the code </p>

<pre><code>for key, value in doc1_word_freq.items():
    if key in doc2_word_freq.keys():
        dot_product += doc2_word_freq[key] * value # the dot product of the two doc vectors

doc1_mag = sqrt(sum([value**2 for value in doc1_word_freq.values()])) # the magnitude of the each document
doc2_mag = sqrt(sum([value**2 for value in doc2_word_freq.values()]))

similarity = dot_product / (doc1_mag * doc2_mag) * 100 
print("The similarity between 2 document is", similarity, "percent")
</code></pre>

<p>is recommended to use <a href="https://stackoverflow.com/questions/18424228/cosine-similarity-between-2-number-lists">Numpy</a> or even <a href="https://scikit-learn.org/stable/modules/generated/sklearn.metrics.pairwise.cosine_similarity.html" rel="nofollow noreferrer">Scikit-learn</a> for matrix operation</p>

<pre><code>similarity = sklearn.metrics.pairwise.cosine_similarity(doc1_word_freq, doc2_word_freq)
</code></pre>
    </div>