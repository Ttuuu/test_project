<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>SolverOptions</h3>

<blockquote>
<pre><code>public class SolverOptions
{
    public int MaxRecursion { get; set; } = -1;
    public int MaxSolutions { get; set; } = -1;
</code></pre>
</blockquote>

<p>Instead of using undocumented magic values, why not use <code>uint?</code>?</p>

<p>I'm not sure what <code>MaxRecursion</code> gains you. IMO it would be more useful to have a <a href="https://docs.microsoft.com/en-us/dotnet/api/system.iprogress-1" rel="nofollow noreferrer">progress report</a> and a <a href="https://docs.microsoft.com/en-us/dotnet/api/system.threading.cancellationtoken" rel="nofollow noreferrer">way to cancel the search</a>.</p>

<hr>

<blockquote>
<pre><code>    public bool IncludeCluesInSolution = false;
</code></pre>
</blockquote>

<p>What's a "clue" in a general exact cover problem? I think this is at the wrong level of abstraction.</p>

<hr>

<blockquote>
<pre><code>    public bool HasSolutionsExceeded(IEnumerable&lt;ISet&lt;int&gt;&gt; solutions)
    {
        return MaxSolutions &gt; -1 &amp;&amp; solutions.Count() &gt;= MaxSolutions;
    }
</code></pre>
</blockquote>

<p>Ugh. This either forces you to evaluate the solution set multiple times (if it's lazy) or it forces you to use a non-lazy <code>IEnumerable</code>, which means caching the full solution set in memory. IMO it would be far preferable for the searcher to return a lazy enumeration and simply keep count of the solutions returned and compare the count to <code>MaxSolutions</code>. Alternatively, and this is what I did with my Java implementation many years ago, the search could take a callback which accepts the solution and returns a <code>bool</code> indicating whether to continue searching.</p>

<hr>

<h3>ICSPSolver</h3>

<blockquote>
<pre><code>public interface ICSPSolver
{
    IReadOnlyCollection&lt;ISet&lt;int&gt;&gt; Solve(ExactCover problem, SolverOptions options);
}
</code></pre>
</blockquote>

<p>I'm not convinced by the name. There are constraint satisfaction problems which can't be reduced to exact cover.</p>

<p>See my comments above on preferring to return a lazy <code>IEnumerable</code>, which would mean changing the return type here.</p>

<hr>

<h3>ExactCover</h3>

<blockquote>
<pre><code>public class ExactCover
{
    public ISet&lt;int&gt; Constraints { get; }
    public IDictionary&lt;int, ISet&lt;int&gt;&gt; Sets { get; }
    public ISet&lt;int&gt; Clues { get; }
</code></pre>
</blockquote>

<p>Why <code>int</code>? Knuth writes in a context in which everything is described in a fairly minimalist imperative language from the 1970s, but this code is in a modern polymorphic language. I would be strongly inclined to make the universe a type parameter, and then if the caller wants to number the elements of the universe and work with <code>int</code>s for speed of comparisons then let them, but don't make it obligatory.</p>

<p>For my taste the properties should all have read-only types. It is unfortunate that .Net doesn't have an <code>IReadOnlySet&lt;T&gt;</code>: I consider that it's worth writing one, and a read-only wrapper for <code>ISet&lt;T&gt;</code>.</p>

<p>I am baffled as to what the three properties represent. As far as I'm concerned the absolutely necessary component of an exact cover problem is an <code>IEnumerable&lt;IEnumerable&lt;TUniverse&gt;&gt;</code> representing the subsets; and the other, optional, component is an <code>IEnumerable&lt;TUniverse&gt;</code> to detect the case where the union of the subsets is missing one or more elements.</p>

<hr>

<blockquote>
<pre><code>    public ExactCover(ISet&lt;int&gt; constraints, IDictionary&lt;int, ISet&lt;int&gt;&gt; sets, ISet&lt;int&gt; clues)
    {
        Constraints = constraints;
        Sets = sets;
        Clues = clues;
    }
</code></pre>
</blockquote>

<p>There's always a case to be made for copying your inputs to prevent the caller mutating them.</p>

<hr>

<h3>DLXNode</h3>

<blockquote>
<pre><code>class DLXNode
{
    internal DLXNode header, row;
    internal DLXNode up, down, left, right;
</code></pre>
</blockquote>

<p>See previous comments on using a modern language. I don't believe that it's necessary to manually implement the linked lists of Knuth's description, and by delegating that kind of thing to the library you can save yourself a lot of pain debugging.</p>

<hr>

<h3>DLX</h3>

<blockquote>
<pre><code>public class DLX : ICSPSolver
{
    public IReadOnlyCollection&lt;ISet&lt;int&gt;&gt; Solve(ExactCover problem, SolverOptions options)
    {
        var root = Parse(problem);
</code></pre>
</blockquote>

<p>I'm intrigued by the name. To me, <code>Parse</code> means transforming a <code>string</code> into the thing it represents. What does it mean to you?</p>

<hr>

<blockquote>
<pre><code>    internal bool CheckForSolution(
    internal DLXNode GetHeaderWithMinimumRowCount(DLXNode root)
    internal void Explore(
    internal void Cover(DLXNode node)
    internal void Uncover(DLXNode node)
    internal DLXNode Parse(ExactCover problem)
</code></pre>
</blockquote>

<p>These could, and therefore should, all be <code>static</code>.</p>

<hr>

<blockquote>
<pre><code>                var solution = new HashSet&lt;int&gt;(currentSolution);
                if (options.IncludeCluesInSolution)
                {
                    foreach (var clue in clues)
                    {
                        solution.Add(clue);
                    }
                }
</code></pre>
</blockquote>

<p><code>solution.UnionWith(clues)</code> would be more elegant.</p>

<hr>

<blockquote>
<pre><code>    internal DLXNode GetHeaderWithMinimumRowCount(DLXNode root)
    {
        DLXNode next = null;

        foreach (var header in root.Iterate(n =&gt; n.right).Skip(1))
        {
            if (next == null || header.rowCount &lt; next.rowCount)
            {
                next = header;
            }
        }

        return next;
    }
</code></pre>
</blockquote>

<p>Among the obviously useful things lacking from Linq is a function <code>public static TSource MinBy&lt;TSource, TValue&gt;(this IEnumerable&lt;TSource&gt; elts, Func&lt;TSource, TValue&gt; valuation) where TValue : IComparable&lt;TValue&gt;</code>. I heartily recommend that you factor this function out of <code>GetHeaderWithMinimumRowCount</code> and add it to your utility library.</p>

<hr>

<blockquote>
<pre><code>        foreach (var constraint in problem.Constraints.Where(x =&gt; !givens.Contains(x)))
</code></pre>
</blockquote>

<p><code>problem.Constraints.Except(givens)</code>.</p>
    </div>