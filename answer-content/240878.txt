<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Raw Strings</h1>

<pre><code> r'(?&lt;=[qwrtypsdfghjklzxcvbnm])([aeiou]{2,})(?=[qwrtypsdfghjklzxcvbnm])'
</code></pre>

<p>The advantage of raw strings is you don't have to escape (add a <code>\</code> before) certain characters, such as quotation marks and the backslash character itself.  You aren't using any characters you need to escape here, so why use a raw string?  </p>

<h1>Redundant lists</h1>

<pre><code>match_obj = list(...)
if len(list(match_obj)) != 0:
    ...
</code></pre>

<p><code>match_obj</code> is already a list; you don't need to make a new list out of it, to determine it's length.  Just use <code>match_obj</code> directly:</p>

<pre><code>match_obj = list(...)
if len(match_obj) != 0:
    ...
</code></pre>

<p>Of course, a list of length zero is falsy, and any list of non-zero length is truthy, so you don't need the <code>len(...) != 0</code> test:</p>

<pre><code>match_obj = list(...)
if match_obj:
    ...
</code></pre>

<h1>list(re.finditer)</h1>

<p>The function <code>re.finditer(...)</code> returns an iterator, and avoids building up the complete result, so you can process a string piece by piece, distributing the memory usage over time instead of collecting and returning all results immediately.</p>

<p>Passing the result of <code>re.finditer(...)</code> to <code>list(...)</code> immediately runs the iterator to completion, collecting all results into the in-memory list.  Any efficiency gained by using the iterator version is lost, and may actually decrease performance because the work required to create the iterator, save temporary state, etc., has been wasted.</p>

<p>The only thing you do with the resulting match objects is call <code>.group()</code> on them, to get the matched text.</p>

<p>So why not use <a href="https://docs.python.org/3/library/re.html?highlight=finditer#re.findall" rel="noreferrer"><code>re.findall(...)</code></a> which returns the list of matched strings?</p>

<pre><code>    matches = re.findall(r'(?&lt;=[qwrtypsdfghjklzxcvbnm])([aeiou]{2,})(?=[qwrtypsdfghjklzxcvbnm])', string, re.IGNORECASE))
    if matches:
        for match in matches:
            print(match)
    else:
        print(-1)
</code></pre>

<h1>Consonants</h1>

<p>This isn't going to make the code more compact or efficient, but it might make it more maintainable and readable:</p>

<p>Is <code>"qwrtypsdfghjklzxcvbnm"</code> the complete list of consonants?  Did you forget any?  You've ordered them in QWERTY order, which makes it hard for a reader to verify it.</p>

<p>Sometimes "y" is considered a vowel.  If you were to want to include it, you'd have to add the "y" to the vowel list, and remove it twice from the consonants list.</p>

<p>Maybe you should:</p>

<pre><code>from string import ascii_lowercase

vowels = "aeiou"
consonants = ''.join(set(ascii_lowercase) - set(vowels))
</code></pre>

<p>Then you could generate your regex string:</p>

<pre><code>double_vowels = f"(?&lt;=[{consonants}])([{vowels}]{{2,}})(?=[{consonants}])"
</code></pre>

<p>and even compile it:</p>

<pre><code>double_vowels = re.compile(
    f"(?&lt;=[{consonants}])([{vowels}]{{2,}})(?=[{consonants}])",
    re.IGNORECASE)
</code></pre>

<h1>Refactored Code</h1>

<pre><code>import re
from string import ascii_lowercase

vowels = "aeiou"
consonants = ''.join(set(ascii_lowercase) - set(vowels))

double_vowels = re.compile(
    f"(?&lt;=[{consonants}])([{vowels}]{{2,}})(?=[{consonants}])",
    re.IGNORECASE)

def find_two_or_more_vowels(string: str) -&gt; None:
    matches = double_vowels.findall(string)
    if matches:
        for match in matches:
            print(match)
    else:
        print(-1)

if __name__ == '__main__':
    find_two_or_more_vowels(input())
</code></pre>
    </div>