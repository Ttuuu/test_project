<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>1)</strong> As already mentioned <strong>T4</strong> might be a better solution though I'm not sure whether it is available for earlier VS versions.  </p>

<p><strong>2)</strong> I would avoid using <code>string OutputPath</code> parameters, <code>Streams</code> are usually more handy.  </p>

<p><strong>3)</strong> Separate presentation and business logic code. Having <code>BulletedList</code> parameter in such a class seems to be completely wrong to me.  </p>

<p><strong>4)</strong> I think you should not even take this <code>BulletedList</code> (or anything similar) as parameter. This messages log is an <strong>output</strong> of your methods, not an <strong>input</strong>, so there is no point accepting it as parameter. Return it and remove method overloads which are not needed.  </p>

<p><strong>5)</strong>  <strong>Naming convention</strong> - usual rules are lower camel case for parameters.  </p>

<p><strong>6)</strong> Define variables closer to their first assignment and do not assign them any value if this value will be overwritten anyway. This is mostly about <code>CreateSingleTable</code> method. <code>ListDatabaseTables</code> also has 5 lines of code instead of maximum 3 needed.  </p>

<p><strong>7)</strong> I would make <code>ListDatabaseTables()</code> method more strongly typed. Returning a <code>DataTable</code> gives me absolutely no idea how to use it.  </p>

<p><strong>8)</strong> I prefer writing such constructions:  </p>

<pre><code>            if (f.readOnly)
                info += " (RO)";
            else
                info += " (RW)";
</code></pre>

<p>as: </p>

<pre><code>info += f.readOnly ? " (RO)" : " (RW)";
</code></pre>

<p>This IMO shows more clearly that you're going to append <em>something</em> to <code>info</code> <strong>anyway</strong> and this <em>something</em> depends on <code>isReadonly</code> value.  </p>

<p><strong>9)</strong> I would replace this:  </p>

<pre><code>string info = "---&gt; " + f.name + " (" + f.type + ")";
if (f.readOnly)
    info += " (RO)";
else
    info += " (RW)";
if (f.allowNull)
    info += " (Null)";  
</code></pre>

<p>with this:  </p>

<pre><code>string info = string.Format("---&gt; {0} ({1}) ({2}){3}"
                                 , f.name
                                 , f.type
                                 , f.readOnly? "RO" : "RW"
                                 , f.allowNull ? " (NULL)" : string.Empty);  
</code></pre>

<p>This shows more clearly which format will <code>info</code> variable have. Also this has only one assignment which is better than doing <code>+=</code> on string several times.  </p>

<p><strong>10)</strong> <code>sw.WriteLine("// Inherit this class and make changes there");</code> I would prefer extending existing class instead of inheritance. Or at least you should <strong>allow</strong> extending it. In order to allow this generated classes are usually defined as <code>partial</code>.  </p>

<p><strong>11)</strong> A lot of repeats here:  </p>

<pre><code>        if (getType(f.type) == "int")
            sw.WriteLine("\tprivate " + getType(f.type) + " _" + f.name + " = -1;");
        else if (getType(f.type) == "float")
            sw.WriteLine("\tprivate " + getType(f.type) + " _" + f.name + " = -1;");
        else if (getType(f.type) == "DateTime")
            sw.WriteLine("\tprivate " + getType(f.type) + " _" + f.name + " = new DateTime(1753, 1, 1);");
        else if (getType(f.type) == "byte[]")
            sw.WriteLine("\tprivate " + getType(f.type) + " _" + f.name + " = new byte[1];");
        else
            sw.WriteLine("\tprivate " + getType(f.type) + " _" + f.name + ";");
</code></pre>

<p>It should be separated into at least two blocks:  </p>

<p><strong>a)</strong> write <code>private</code> + <code>type</code><br>
<strong>b)</strong> determine default value and write it (if any)  </p>

<p><strong>12)</strong> You have <code>new DateTime(1753, 1, 1);</code> repeated several times in your code. I would consider this string as magic string and I think it should be extracted into constant.  </p>

<p><strong>13)</strong> <code>fieldName.ToUpper() == "DEFAULT"</code>. <code>string.Equals(...)</code> has a parameter to ignore case.  </p>

<p><strong>14)</strong> You have just written your own <code>string.Join(...)</code> here:  </p>

<pre><code>    count = fields.Count;
    foreach (TableFieldInfo f in fields)
    {
        count--;
        if (f.readOnly != true)
        {
            if (count != 0)
                sw.Write("@" + f.name + ", ");
            else
                sw.Write("@" + f.name);
        }
    }
</code></pre>

<p><strong>15)</strong> <code>if (f.readOnly == true &amp;&amp; CanSelect == false)</code> I do not think this is the case when <code>bool</code> variable should be compared against <code>true</code> or <code>false</code>. I would prefer <code>if (f.readOnly &amp;&amp; !CanSelect)</code>  </p>

<p><strong>16)</strong> Do not write god methods/classes and do not instantiate god objects. <code>CreateSingleTable</code> is definitely a god method - it has almost 500 lines of code !!! Raptors will come for you as soon as they will finish with <code>goto</code> writers. Break down this method into ~5-10 smaller methods.  </p>

<p><strong>17)</strong></p>

<pre><code>private static string getType(string DBType)
{
    string ret = DBType;

    if (DBType == "System.Data.SqlTypes.SqlString")
        ret = "string";
    else if (DBType == "System.Data.SqlTypes.SqlInt16")
        ret = "Int16";
    else if (DBType == "System.Data.SqlTypes.SqlInt32")
        ret = "int";
    else if (DBType == "System.Data.SqlTypes.SqlFloat")
        ret = "float";
    else if (DBType == "System.Data.SqlTypes.SqlDouble")
        ret = "float";
    else if (DBType == "System.Data.SqlTypes.SqlDecimal")
        ret = "float";
    else if (DBType == "System.Data.SqlTypes.SqlBoolean")
        ret = "bool";
    else if (DBType == "System.Data.SqlTypes.SqlDateTime")
        ret = "DateTime";
    else if (DBType == "System.Data.SqlTypes.SqlByte")
        ret = "byte";
    else if (DBType == "System.Data.SqlTypes.SqlBinary")
        ret = "byte[]";

    return ret;
}
</code></pre>

<p>Instead of such constructions I usually use collections which contain mappings between input condition and desired result. I would replace your 10 conditions with this:  </p>

<pre><code>Dictionary&lt;string, string&gt; dbTypeToDotNetTypeMappings =
    new Dictionary&lt;string, string&gt;();

dbTypeToDotNetTypeMappings.Add("System.Data.SqlTypes.SqlString", "string");
// ... 
dbTypeToDotNetTypeMappings.Add("System.Data.SqlTypes.SqlBinary", "byte[]");

string mappedType;
if (dbTypeToDotNetTypeMappings.TryGetValue(dbType, out mappedType))
    return mappedType;

return dbType;
</code></pre>

<p>This shows more clearly the fact that you have a lot of similar <code>input-&gt;output</code> transformations. Also it allows moving this conditions out of the code, to the configuration file for example.  </p>

<p><strong>18)</strong> <code>getType()</code> should be more strongly typed. It has to be <code>Type -&gt; Type</code> mapping instead of <code>string -&gt; string</code>.</p>

<p><strong>19)</strong>  </p>

<pre><code>    catch (Exception e)
    {
        // Remove stupid warning
        Exception x = e;
        e = x;
    }
</code></pre>

<p>The best way to get rid of warning is logging the exception. Otherwise use <code>#pragma</code>:  </p>

<pre><code>#pragma warning disable 168
        catch (Exception e)
#pragma warning restore 168
        {

        }
</code></pre>
    </div>