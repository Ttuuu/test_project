<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First off, don't print every single loop. It's wasteful and surprisingly intensive. Also, you don't need to return all primes, your brief only requires one. You should make it more clear what the function is for. Return the last found prime, probably also rename your function to <code>prime</code>.</p>

<p>Don't omit 2, it's only a strange and confusing work around that you haven't even explained in the code. Just include it in the initialisation of primes. </p>

<pre><code>primes = [2]
</code></pre>

<p>Also you don't need to do </p>

<pre><code>for i in range(len(primes)):
    if attempt % primes[i] == 0:
</code></pre>

<p>Python has a simpler <code>for var in iterable</code> syntax that lets you get the values directly, which is more efficient.</p>

<pre><code>for i in primes:
    if attempt % i == 0:
</code></pre>

<p>But rather than using a <code>for</code> loop at all you can use <code>all</code>. It employs short circuiting and will immediately stop iterating over the loop when it finds any value that has an invalid factor. This is faster than breaking when a prime is found, as primes are much rarer than non primes <em>especially</em> when you get into the high values.</p>

<pre><code>def primes(n):
    primes = [2]
    attempt = 3
    while len(primes) &lt; n:
        if all(attempt % prime != 0 for prime in primes):
            primes.append(attempt)
        attempt += 2
    return primes[-1]
</code></pre>

<p>Note, you also forgot to increment attempt when a prime <em>was</em> found. That means that every time you found a prime, it then had to be checked yet again in a very costly way since only the <strong>last</strong> element in the list would invalidate it.</p>
    </div>