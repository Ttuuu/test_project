<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>A <em>very strong</em> suggestion: <strong>Fix the <a href="https://www.owasp.org/index.php/SQL_Injection" rel="nofollow noreferrer">SQL injection</a></strong> in your code! This code should never ever be allowed into a production application.</p>

<p>Some suggestions:</p>

<ol>
<li><a href="https://github.com/ambv/black" rel="nofollow noreferrer"><code>black</code></a> can automatically format your code to be more idiomatic.</li>
<li><p><a href="https://gitlab.com/pycqa/flake8" rel="nofollow noreferrer"><code>flake8</code></a> with a strict complexity limit will give you more hints to write idiomatic Python:</p>

<pre><code>[flake8]
max-complexity = 4
ignore = W503,E203
</code></pre></li>
<li><p>I would then recommend adding <a href="https://docs.python.org/3/library/typing.html" rel="nofollow noreferrer">type hints</a> and validating them using a strict <a href="https://github.com/python/mypy" rel="nofollow noreferrer"><code>mypy</code></a> configuration:</p>

<pre><code>[mypy]
check_untyped_defs = true
disallow_untyped_defs = true
ignore_missing_imports = true
no_implicit_optional = true
warn_redundant_casts = true
warn_return_any = true
warn_unused_ignores = true
</code></pre></li>
<li>Naming is incredibly important for code maintainability. <code>data</code> is a well-known <a href="https://wiki.c2.com/?BadVariableNames" rel="nofollow noreferrer">offender</a> because it is completely meaningless. Every variable contains data, and unless you are handling arbitrary collections of completely unknown bytes there is a better name for the contents of that variable. <code>b</code>, for example, could at the very least be improved by calling it <code>result</code> - it's not going to conflict with the other <code>result</code> variable. It's not always easy to think of a better name, but it's time well spent.</li>
<li><p>Your connection string could be formatted straight from the dictionary without duplicating the names (untested):</p>

<pre><code>"".join([f"{key}={value};" for key, value in connection_configuration.items()])
</code></pre></li>
<li><code>conn</code> and <code>top100</code> are both shadowed by the <code>top100Search</code> parameters - they have the same name. This is a bug magnet.</li>
<li><code>GetConfig</code> might as well return the entire dictionary - the code is much simpler that way, and anything that's not needed in the configuration would cause a handy error or would simply be ignored.</li>
<li>Values like <code>Location</code> would be better off as configuration - it has no bearing on the logic of this code.</li>
<li>You have a bug in your code - <code>resultparser</code> takes <code>results</code> but seems to think it's called <code>a</code> in the code.</li>
</ol>
    </div>