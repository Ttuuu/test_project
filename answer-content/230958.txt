<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<pre><code>mov SS, AX                          ;
mov BP, 0x7BFF
mov SP, BP   
</code></pre>
</blockquote>

<p>This is a dangerous construct! To maintain a consistent <code>SS:SP</code> pair of registers you should always set these back to back (No instruction(s) in between).</p>

<p>The code uses <code>pusha</code>, <code>popa</code>, <code>shr bx, 12</code>, ...<br>
So your code is clearly targetting x86 (and not the infamous 8086). Then you don't need to use <code>CLI</code> nor <code>STI</code> around this code.</p>

<p>To optimize the stack access, setting the stackpointer offset <code>SP</code> to an even address is best and since you want to place the stack beneath the bootloader, I suggest you write:</p>

<pre><code>xor ax, ax
mov ss, ax
mov sp, 0x7C00
</code></pre>

<p>Your program depends on a correct <code>DS</code> segment register. You can't trust this to be so when BIOS starts your program. For good measure this applies to <code>ES</code> also, so make it happen:</p>

<pre><code>xor ax, ax
mov ds, ax
mov es, ax
mov ss, ax
mov sp, 0x7C00
</code></pre>

<hr>

<p>The BIOS Teletype function uses <code>BH</code> to specify the display page and you will want this to be zero. Therefore it's not a good idea to use <code>BX</code> for addressing the text.</p>

<p>In your program it works because the label <em>.result</em> has a very small address, meaning <code>BH=0</code>.</p>

<p>These are the necessary changes to <em>WriteString</em> and <em>WriteCharInTeletypeMode</em>:</p>

<pre><code>WriteString:
    pusha
  .loop:
    mov  al, [si]
    cmp  al, 0
    je   .break
    call WriteCharInTeletypeMode
    inc  si
    jmp  .loop
  .break:
    popa
    ret

WriteCharInTeletypeMode:
    pusha
    mov bh, 0      ;Displaypage
    mov ah, 0x0E
    int 0x10
    popa
    ret
</code></pre>

<hr>

<h3>You want to optimize for code size</h3>

<p>(1) Then at least use a loop to convert to hexadecimal instead of using an unrolled approach.</p>

<pre><code>  mov  di, .result+6
More:
  mov  si, bx
  and  si, 15
  mov  al, [.alphabet + si] 
  dec  di
  mov  [di], al
  shr  bx, 4
  cmp  di, .result+2
  ja   More
  mov  si, .result        ;Using SI here!!
  call WriteString
</code></pre>

<p>(2) Do you really need a separate <em>WriteCharInTeletypeMode</em>?<br>
You save a lot of bytes if you inline this code:</p>

<pre><code>WriteString:
    pusha
  .loop:
    mov  al, [si]
    cmp  al, 0
    je   .break

    mov bh, 0      ;Displaypage
    mov ah, 0x0E
    int 0x10

    inc  si
    jmp  .loop
  .break:
    popa
    ret
</code></pre>

<p>(3) You don't need a terminating zero with that <em>.alphabet</em> string.</p>

<pre><code>.alphabet:
    db '0123456789ABCDEF'
</code></pre>

<p>(4) A conversion that doesn't use this 16 characters string is probably shorter, code-wise. Should not be too difficult to find an example.</p>
    </div>