<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>1. Alternatives</h2>

<p>Just as the other answer suggests, you should be looking into existing framework. There's no use reinventing the wheel unless you're specifically trying to improve it (which is not the case here).</p>

<p>For a professional project, I prefer EF. Not just because of the framework itself, but because it's the most commonly used ORM nowadays (as far as I'm aware), and there is a vast amount of information about using EF available online.</p>

<p>I can't speak to the benefits of using Dapper, no personal experience with it. From a quick browse of some code examples, I'm not a fan of still using SQL in code.<br>
However, if the queries you expect to execute are squeezed for their performance, using SQL may be a benefit to you. EF drops in performance once your queries get very complex.</p>

<p>Unless you're trying to account for complex-yet-performant queries, EF should notably simplify your life.</p>

<h2>2. Reviewing the code itself</h2>

<p>As mentioned in the earlier chapter, I suggest you move to an ORM. However, I think it's also valuable to review your coding methodology itself, regardless of the existence of ORMs.</p>

<ul>
<li>I'm not a fan of the static methods which return objects. Your access layer is closer to a factory than anything else. Your external callers will need to chain the static methods together in order to achieve a meaningful result. If your order of operations changes in the future, you will have to update <strong>all external callers</strong> to now use the new order of operations.</li>
</ul>

<p>Instead, what I'd prefer to see is an access layer that functions like an <strong>object</strong>. Instead of returning an <code>SqlCommand</code> object, return a wrapper object (e.g. <code>MyDataWrapper</code>). <strong>Internally</strong>, the <code>MyDataWrapper</code> is allowed to use <code>SqlCommand</code> objects. However, your external caller should only be working directly with the <code>MyDataWrapper</code> (see the <strong>example</strong> below)</p>

<ul>
<li><p>Every method you have for retrieving data all contains the same copy/paste code that checks if the connection is not null, opening the connection, creating a transaction, ... This is leading to a substantial <strong>bloat</strong> of your code. This is caused by your static methods: every time you call a different method, you need to examine if all paramters have been supplied correctly. If you're using OOP principles instead, then you can have your constructor ensure that all needed objects are present; and you don't need to re-check this for every subsequent method call on the object.</p></li>
<li><p>If you pass your connectionstring for every newly created <code>SqlCommand</code>, then you're making it possible for your data to be saved in different spots. Unless you are specifically creating an application that is intended to connect to many databases, you're better off retrieving your connection string from a <strong>singular</strong> source (e.g. your app.config file) (see the example below)</p></li>
<li><p>Especially when opening external connections, you'll want to be able to control the closure of the connection at the earliest appropriate time. If you use OOP, then your <code>MyDataWrapper</code> object can implement <code>IDisposable</code>, which allows your to use <code>using() {}</code> statements, which keep your code clean (compared to manually calling <code>Dispose()</code>). This isn't possible on your static methods (it's technically possible to put the static methods in a non-static class which implements <code>IDisposable</code>, but that makes little sense).</p></li>
</ul>

<p><em>Note: the below example is created specifically to showcase the difference between using static methods and using an actual object (OOP). It's not perfect in other aspects, e.g. how it returns an <code>SqlDataReader</code>. That can be further optimized, but I chose to omit further optimizations for clarity's sake.</em><br>
<em>For your specific case, you're already expecting an external caller to supply an SQL query, which means that expecting that external caller to handle an <code>SqlDataReader</code> is not really a newly introduced problem. Ideally, you'd want your external caller to not use any SQL string nor <code>SqlDataReader</code>, but that is a much bigger refactoring and would require strong knowledge of your business requirements.</em></p>

<p><strong>Example</strong>:</p>

<p>Your data wrapper:</p>

<pre><code>public class MyDataWrapper : IDisposable
{
    SqlConnection _connection;
    SqlCommand _command;

    public MyDataWrapper()
    {
        string theConnectionString = System.Configuration.ConfigurationManager.ConnectionStrings["MyConnString"].ConnectionString;

        _connection = new SqlConnection(theConnectionString);
        _command = new SqlCommand() { Connection = _connection };
    }

    public SqlDataReader Query(string query)
    {
        _connection.Open();

        _command.CommandText = query;
        _command.CommandType = CommandType.Text;

        var reader = _command.ExecuteReader();

        return reader;
    }

    //Scalar and NonQuery methods omitted.

    public void Dispose()
    {
        if (_connection != null) _connection.Close();
    }
}
</code></pre>

<p>An example external caller:</p>

<pre><code>public class ExternalCaller
{
    private void TestMethod()
    {
        using(var myDataWrapper = new MyDataWrapper())
        {
            var myDataReader = myDataWrapper.Query("SELECT * FROM Users");
            while(myDataReader.Read())
            {
                //Process each row
            }
        }
    }
}
</code></pre>

<p>There are other small things that I could remark, but many of these nitpicks will already disappear (or change shape) if you move towards an OOP approach.</p>
    </div>