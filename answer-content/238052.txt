<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>An important question: why don’t you want to touch the database in the test? You have a few different options for getting phpunit to play nicely with a database. Doing so lets you test things more thoroughly as you can do assertions that the data has landed in the database as you expected. </p>

<p>As a starting point, based on what I see in this method, I would recommend adding something along these lines in phpunit.xml within the <code>&lt;php&gt;</code> tag</p>

<pre><code> &lt;env name="DB_DATABASE" value="testing"/&gt;
</code></pre>

<p>And create a database lined up with the “testing” value set in <code>DB_DATABASE</code>. These values equate to .env values, so you can add additional <code>DB_USERNAME</code>, etc values as appropriate. </p>

<p>You can use the <code>RefreshDatabase</code> trait to reset migrations within your newly created testing database on each test. That is described at <a href="https://laravel.com/docs/6.x/database-testing#resetting-the-database-after-each-test" rel="nofollow noreferrer">https://laravel.com/docs/6.x/database-testing#resetting-the-database-after-each-test</a> </p>

<p>It looks like you need some Location and Customer data in your database for this job to work. If you don’t already have factories for these models, make some as described at <a href="https://laravel.com/docs/6.x/database-testing#writing-factories" rel="nofollow noreferrer">https://laravel.com/docs/6.x/database-testing#writing-factories</a> </p>

<p>As a starting point you can manually call factories in your test – <code>factory(App\Customer::class)-&gt;create();</code> will put a factory generated customer into your database. If you need three of them, – <code>factory(App\Customer::class, 3)-&gt;create();</code> The factory method returns the created entities, so you can do: </p>

<pre><code>    $customer = factory(App\Customer::class)-&gt;create();
    $locations = factory(App\Location::class, 3)-&gt;create();
    newJob(
     $customer-&gt;id, 
     Arr::get($locations, 0)-&gt;id, 
     Arr::get($locations, 1)-&gt;id, 
     Arr::get($locations, 2)-&gt;id
);
</code></pre>

<p>Now the job should be in your testing.jobs table, and you can make an assertion of that:</p>

<pre><code>$this-&gt;assertDatabaseHas(‘jobs’,[
‘customer_id’ =&gt; $customer-&gt;id,
‘location_id_from’ =&gt; Arr::get($locations, 0)-&gt;id,
‘location_id_to’ =&gt; Arr::get($locations, 1)-&gt;id,
‘location_id_ bill’ =&gt; Arr::get($locations, 2)-&gt;id,
]);
</code></pre>

<p>Yes there’s a some overhead in getting the database incorporated into your test setup and in writing the factory, but the end result is a more thorough test. Worth it, in my opinion. </p>

<p>I hope something here helps!</p>
    </div>