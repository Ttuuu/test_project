<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>It's worth writing functions that accept a <code>std::istream</code> or <code>std::ostream</code> for 
reading and writing (respectively), rather than hard-coding a file name.  This makes for easier testing, as we can write to a <code>std::stringstream</code> rather than assuming we're able to write to <code>Input.txt</code> in the current working directory.</p>

<p>It's also better for your production code, as we can separate the file handling from the I/O, and perhaps store many contestants' data in a single file.</p>

<p>The output version should not modify <code>Contestant</code>, so declare it <code>const</code>.</p>

<p>We should call the functions <code>operator&gt;&gt;</code> and <code>operator&lt;&lt;</code>, so they can be used like the other streaming operators:</p>

<pre><code>#include &lt;iosfwd&gt;
std::istream&amp; operator&gt;&gt;(std::istream&amp;, Contestant&amp;);
std::ostream&amp; operator&lt;&lt;(std::ostream&amp;, const Contestant&amp;);
</code></pre>

<hr>

<p>Now to the meat of the review.  There are several serious problems here:</p>

<blockquote>
<pre><code>file_obj.write((char*)this, sizeof(this));
</code></pre>
</blockquote>

<ul>
<li><p>The first is that <code>this</code> is a <code>Contestant*</code>, i.e. a pointer.  So <code>sizeof this</code> evaluates to the size of the pointer, not to the size of a <code>Contestant</code>.  You probably meant to write <code>sizeof *this</code>.</p></li>
<li><p>The second big problem is that <code>std::string</code> objects are not <em>trivially copyable</em> - simply writing their memory representation isn't going to work.  An obvious reason that it couldn't work is that strings generally need to be able to allocation additional memory when their contents grow; that memory is external to the object, and referenced by a pointer.</p></li>
<li><p>The third issue is that types such as <code>int</code> are represented differently on different platforms (they may have different size and endianness, and represent negative values differently).  So we should always convert to a neutral representation for interchange (remember that we might be reading with a newer version of the program, on the same machine).  A human-readable form is usually best.</p></li>
</ul>
    </div>