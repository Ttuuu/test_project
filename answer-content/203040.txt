<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The program is difficult to read because all code is in the <code>main()</code>
function. As an example, one has to jump to the end of the program in
order to understand how the “get a positive integer from the user” loop
works.</p>

<p>It is generally better to separate the I/O from the computation, and
have dedicated functions for a single purpose. In your example, the overall
structure could for example look like this:</p>

<pre><code>static int readPositiveInteger(String prompt) throws IOException {
    // ...
}

static boolean[] openDoors(int numOfDoors) {
    // ...
}

static void printOpenDoors(boolean[] doors) {
    // ...
}

public static void main(String[] args) throws IOException {

    int numOfDoors = readPositiveInteger("Enter the number of doors: ");
    boolean[] doors = openDoors(numOfDoors);
    printOpenDoors(doors);
}
</code></pre>

<p>More remarks:</p>

<ul>
<li>The naming convention for Java classes is <em>upper</em> camelcase, in your case
<code>HundredDoors</code>.</li>
<li>The <code>boolean hasNum</code> should be a local variable in <code>main()</code>.</li>
<li><code>boolean</code> variables are by default initialized to <code>false</code>, the explicit
initialization in a loop is not needed.</li>
<li>You create a new <code>Scanner</code> instance for each attempt to read a positive
integer. A single instance is sufficient if you read lines from standard
input with <code>nextLine()</code>.</li>
<li>The message “Please enter an integer” should be “Please enter a positive
integer" since that is what you need and check for.</li>
<li>Array indices start at zero whereas the door numbers start at one.
If you allocate one additional <code>boolean</code> element for the <code>doors</code> array then
the door number can be used as array index directly, instead of adding/subtracting
one at various places. That makes the code better understandable.</li>
<li>The output can be written directly to standard output instead of 
concatenating it to a string first.</li>
</ul>

<p>Putting it all together, the program could look like this:</p>

<pre><code>import java.io.IOException;
import java.util.Scanner;

public class HundredDoors {

    static int readPositiveInteger(String prompt) throws IOException {
        Scanner scanner = new Scanner(System.in);
        int i = 0;
        do {
            System.out.print(prompt);
            try {
                i = Integer.parseInt(scanner.nextLine());
            } catch (NumberFormatException e){
                i = 0;
            }
            if (i &lt;= 0) {
                System.out.println("Please enter a positive integer!");
            }
        } while (i &lt;= 0);
        return i;
    }

    static boolean[] openDoors(int numOfDoors) {
        boolean[] doors = new boolean[numOfDoors + 1];
        for (int index = 1; index &lt;= numOfDoors; index++) {
            for (int door = index; door &lt;= numOfDoors; door += index) {
                doors[door] = !doors[door];
            }
        }
        return doors;
    }

    static void printOpenDoors(boolean[] doors) {
        System.out.println("Doors still opened:");
        int count = 0;
        for (int door = 1; door &lt; doors.length; door++) {
            if (doors[door]) {
                if (count == 10) {
                    System.out.println();
                    count = 0;
                }
                count += 1;
                System.out.print(door + " ");
            }
        }
        System.out.println();
    }

    public static void main(String[] args) throws IOException {

        int numOfDoors = readPositiveInteger("Please enter the number of doors: ");
        boolean[] doors = openDoors(numOfDoors);
        printOpenDoors(doors);
    }
}
</code></pre>
    </div>