<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Well, I always start with <a href="https://stackoverflow.com/questions/419163/what-does-if-name-main-do">using a main block.</a> It's just a good habit to have.</p>

<p>Name your constants. What if you wanted the change the number the user was supposed to guess to, say, 5? You already have at least two places in the code where 0 shows up, and what you actually mean by that is "the target value". Give it a name and use that name.</p>

<pre><code>target = 0

while guess != target: # ...
</code></pre>

<p>You're checking the game-end logic twice, once in the outer <code>while</code> loop, once in the inner <code>if</code> check. <a href="https://en.wikipedia.org/wiki/Don%27t_repeat_yourself" rel="nofollow noreferrer">Only do so in one place</a>. E.g., make the outer loop <code>while True:</code> or, better yet, <code>for _ in range(max_num_guesses):</code> with an explicitly set maximum number of guesses. Then, inside the <code>if</code> statement that checks if the user got the answer right, just <code>break</code> to exit the loop.</p>

<p>Now, about what you particularly ask about: computing the sum/mean/count of the users' guesses. Your current approach scatters the logic of what you're trying to do: summation happens on one line, counting on another, division on another... this code sample isn't big, but already this goal is scattered across your code. It'd be a lot cleaner if we dealt with all those similar things in one place. To do this, let's just keep track of the guesses inside the loop, then later, we'll do all the relevant computations with them. Something like:</p>

<pre><code>target = 0
guesses = []

while True:
    print("Guess the number: ")
    guess = int(input())
    guesses.append(guess)

    if guess == target:
        break

    print("Nope.")

print(f"Attempts: {len(guesses)}")
print(f"Total sum of guesses: {sum(guesses)}")
print(f"Average guess: {sum(guesses) / len(guesses)}")
</code></pre>

<p>This snippet doesn't do exactly what your code does, but hopefully it gives you an idea for how you can keep different chunks of your code focused on different purposes, and thus keep each bit clean and keep the logic simple. See how the <code>while</code>-loop section is solely focused on running the game logic, and the <code>print</code> section is solely focused on what details you want to print back to the user. The only crossover is the the <code>guesses.append(guess)</code> line in the loop, which just says "I'll want this info later" and let you, later, figure out exactly what you want to do. E.g., let's say you wanted to report the median guess, or how many guesses were above versus below the target; these are easy to add later if we have a list of guesses, but would add yet more fluff to the loop if we tried to keep track as we went along. Note that, since you're just keeping track of user input, this list is never expected to get so big that counting and summing it is worth bothering about; even if you want to report this value in each loop iteration, just compute it each time rather than trying to calculate things incrementally.</p>

<p>Oh, and finally, <a href="https://stackoverflow.com/questions/7604636/better-to-try-something-and-catch-the-exception-or-test-if-its-possible-first">while I'm all for the try-and-fail</a> when it makes your code cleaner, this probably isn't such an occasion. I'd consider:</p>

<pre><code>if count &gt; 1:
    average = (total_sum / (count - 1))
    print("Average number:", average)
else:
    print("No average")
</code></pre>

<p>or even:</p>

<pre><code>print(f"Average number: {total_sum / (count - 1)}" if count &gt; 1 else "No average")
</code></pre>

<p>to be cleaner than using a <code>try/except ZeroDivisionError</code> here.</p>

<p>(PS: Note the use of f-strings rather than relying on the <code>print</code> function to append things to strings... that's also a good habit, though not a significant improvement in this particular case.)</p>
    </div>