<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I would like to add something.</p>

<h1>Comments</h1>

<p>I am always against commenting code. If you need comments that might suggest bad naming. Additionally commenting stuff that is obvious is meaningless.</p>

<h1>Prefer constexpr</h1>

<p>You have a value which should be at least <code>const</code> but I would make this <code>constexpr</code></p>

<p><code>constexpr int MAXKEYS = 5</code></p>

<h1>C.48: Prefer in-class initializers to member initializers in constructors for constant initializers</h1>

<pre><code>Node(bool isLeaf = false)
: _isLeaf(isLeaf),
  _parent(nullptr)
{   
}
</code></pre>

<p>It could be just </p>

<pre><code>Node(bool isLeaf): _isLeaf(isLeaf) {}

bool _isLeaf {false};
Node* _parent {nullptr};
</code></pre>

<h1>Naming convention</h1>

<p>You are using somehow popular naming convention with <code>_</code>. <code>_isLeaf</code>
Personally, I do not like this kind of ornamentation. (but it's my opinion)</p>

<h1>Output parameters</h1>

<p>You are passing a lot of parameters by reference as output parameters.
If it possible I would avoid this. I find it much more easier to understand return values than output parameters.</p>

<h1>Using new</h1>

<p>In modern C++ code you probably will never see <code>new</code></p>

<pre><code>std::shared_ptr&lt;Tree&gt; tree(new Tree());
</code></pre>

<p>Should be done this way</p>

<pre><code>std::shared_ptr&lt;Tree&gt; tree = std::make_shared&lt;Tree&gt;();
</code></pre>

<h1>Matter of taste</h1>

<p>I personally use and, or instead of &amp;&amp;, || but it is a matter of taste.</p>

<pre><code>if (!_isLeaf)
</code></pre>

<p>becomes</p>

<pre><code>if (not _isLeaf)
</code></pre>
    </div>