<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Use Props !</h2>

<p>Using props to highly customize your component is good practice, but too many props isn't always good ! You need to ask yourself:</p>

<ol>
<li>Am I trying to overly handle every situation possible ?</li>
<li>Is it ok if a second component handles different cases ?</li>
<li>Are these props absolutely required for my component to work as intended ?</li>
</ol>

<p>If 1. and/or 2. is a <strong>yes</strong> and/or 3. is a <strong>no</strong> then you should probably rethink your component logic.</p>

<p><em>For your example, you're <strong>not overly using props</strong>.</em></p>

<h2>Don't assume your props exist !</h2>

<p><code>&lt;input type={this.props.type} .../&gt;</code></p>

<p>Get the props and set default values for them if they are undefined. Use destructuring for this:</p>

<pre><code>render(){
  const {
      type        = "text", 
      placeholder = "Type something",
      id          = null,
      className   = null
  } = this.props;

  return (
   &lt;input type={type} placeholder={placeholder} id={id} className={className} /&gt;
  )
 }
</code></pre>

<h2><a href="https://www.npmjs.com/package/prop-types" rel="nofollow noreferrer">Use PropTypes</a> !</h2>

<blockquote>
  <p>You can use prop-types to document the intended types of properties passed to components. React (and potentially other libraries—see the checkPropTypes() reference below) will check props passed to your components against those definitions, and warn in development if they don’t match.</p>
</blockquote>

<p>Using many props gets messy and it's easy to forget which props are being used and which props are required for your components.</p>

<p><strong>Example:</strong></p>

<pre><code>export class Input extends React.Component{
   /** code here */
}

Input.propTypes = {
  id: PropTypes.number.isRequired, //required will throw error if id is not set
  placeholder: PropTypes.string,
  className: PropTypes.string, //optional
  type: PropTypes.string, //optional
}
</code></pre>

<h2>When to use classes and when not to use classes</h2>

<p>Keep in mind that all your components don't <em>need</em> to be a class. Only use a class if the object becomes complex.</p>

<p>Keep things simple like so:</p>

<pre><code>export const Input = props =&gt; {

  const {
      type        = "text", 
      placeholder = "Type something",
      id          = null,
      className   = null
  } = props;

  return (
   &lt;input 
     type={type} 
     placeholder={placeholder} 
     id={id} 
     className={className} /&gt;
  )
}
</code></pre>
    </div>