<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Consider a typedef instead of hardcoding <code>float</code> everywhere</h1>

<p>Whilst the current use-case requires <code>float</code>, we might want to convert to a template in future, so that we could use with <code>double</code> or <code>long double</code>.  We can ease that by defining a type alias, so there's less work to change when we do so:</p>

<pre><code>using value_type = float;
</code></pre>

<h1>Consider implementing unary minus</h1>

<p>If we implement unary <code>operator-()</code> for <code>FreeVector</code>, we can use that to implement subtraction in terms of addition (without loss of efficiency).</p>

<h1>Use standard Euclidean-length function</h1>

<p>Instead of writing <code>std::sqrt(x * x + y * y + z * z)</code>, we could use <code>std::hypot()</code> instead for an algorithm that remains stable for very large and very small values.  Since C++17, there's an overload that takes all three inputs:</p>

<pre><code>float Vector::length() const {
    return std::hypot(x, y, z);
}
</code></pre>

<h1>Could <code>UnitVector</code> be implemented using <code>FreeVector</code>?</h1>

<p>Instead of having constant members (which of course inhibits assignment operators), perhaps it's worthwhile having a private <code>FreeVector</code> member in a <code>UnitVector</code>, and forwarding access?  Something like this:</p>

<pre><code>struct UnitVector
{
    UnitVector(float x, float y, float z);
    explicit UnitVector(const FreeVector&amp; other);

    operator const FreeVector&amp;() const { return v; }

private:
    FreeVector v;
};

UnitVector::UnitVector(const float x, const float y, const float z)
    : UnitVector{FreeVector{x, y, z}}
{}

UnitVector::UnitVector(const FreeVector&amp; v)
    : v{v / v.length()}
{}
</code></pre>

<p>Note that I've provided a non-explicit conversion to <code>FreeVector</code>, as a replacement for the <code>FreeVector(UnitVector)</code> constructor.  This means that we no longer need to implement arithmetic operators for <code>UnitVector</code>, as they will simply promote to <code>FreeVector</code> in such contexts.</p>

<h1>Document the behaviour of indefinite unit vectors</h1>

<p>What happens when we try to create a unit vector when its length is zero?  I think we end up with all NaNs - we should make it clearer to users what they should expect (without them having to read the implementation).  We might even need an <code>operator bool()</code> that tests whether any element of the vector is NaN.</p>

<h1>Style - give names to formal parameters</h1>

<p>It's subjective, but I think it makes an interface easier to read if the formal parameters have names, particularly when there are multiple arguments of the same type.</p>

<h1>Kudos</h1>

<p>I often forget to give this, so: well done on good use of <code>const</code> and <code>explicit</code>; I was pleased to see that the binary operations take one argument by copy and one by const-ref, so the copy can be modified and returned.</p>
    </div>