<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Several of the public member names differ needlessly from those of the standard containers.  That can prevent use of this class in generic code.</p>

<p>For instance,</p>

<blockquote>
<pre><code>void push(int);
int pop();
void prepend(int);
bool isEmpty();
</code></pre>
</blockquote>

<p>I would have expected:</p>

<pre><code>void push_back(int);
void pop_back();
void push_front(int);
bool empty() const;
</code></pre>

<p>These ones, dealing with size and capacity, should normally use <code>std::size_t</code> rather than <code>int</code>:</p>

<blockquote>
<pre><code>int size() const;
int capacity() const;
void resize(int);
</code></pre>
</blockquote>

<p>It's also worth providing the standard type definitions that generic code expects of a container (<code>value_type</code>, <code>size_type</code>, etc).</p>

<p>We really, <em>really</em> need iterators for the collection.  Then we wouldn't need <code>find()</code> to be a member, because <code>std::find()</code> does that job.  <code>insert()</code> and <code>erase()</code> also normally accept iterators rather than indices.</p>

<p>There's lots of unnecessary loops where standard algorithms could and should be used (<code>std::fill()</code> and <code>std::move()</code> in particular).</p>

<p>I don't see why capacity calculation needs a loop.  Just add the headroom to the required capacity rather than iterating over a fixed sequence of sizes.</p>

<p>Libraries shouldn't write, especially to standard output (<code>std::cerr</code> is the appropriate place for error messages), and certainly shouldn't terminate the process (except perhaps if specifically built for debugging, with <code>NDEBUG</code> undefined).</p>
    </div>