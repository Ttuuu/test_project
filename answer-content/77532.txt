<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There's a lot of code here. I'm not even going to pretend I looked at it all, so don't consider this a complete critique. I did see a few things though.</p>

<p>In <code>Map.DataTableToClass</code> there's a serious case of <a href="http://blog.codinghorror.com/flattening-arrow-code/" rel="nofollow">arrow code</a>.</p>

<blockquote>
<pre><code>try
{
    foreach (DataRow row in Table.Rows)
    {
        T classObject = new T();
        foreach (PropertyInfo property in propertyList)
        {
            if (property != null &amp;&amp; property.CanWrite)   // Make sure property isn't read only
            {
                if (columnNames.Contains(property.Name))  // If property is a column name
                {
                    if (row[property.Name] != System.DBNull.Value)   // Don't copy over DBNull
                    {
                        object propertyValue = System.Convert.ChangeType(
                                row[property.Name],
                                property.PropertyType
                            );
                        property.SetValue(classObject, propertyValue, null);
                    }
                }
            }
        }
        result.Add(classObject);
    }
    return result;
}
</code></pre>
</blockquote>

<p>I would look for ways to reduce the nesting here. Probably by flipping some of your <code>if</code> statements to be guard clauses instead. The <a href="http://www.dotnetperls.com/continue" rel="nofollow"><code>continue</code> statement</a> will help us out here.</p>

<pre><code>List&lt;T&gt; result = new List&lt;T&gt;();
try
{
    foreach (DataRow row in Table.Rows)
    {
        T classObject = new T();
        foreach (PropertyInfo property in propertyList)
        {
            if (property == null || !property.CanWrite)   // Make sure property isn't read only
            {
                continue;
            }

            if (!columnNames.Contains(property.Name))  // If property is a column name
            {
                continue;
            }

            if (row[property.Name] == System.DBNull.Value)   // Don't copy over DBNull
            {
                continue;
            }

            object propertyValue = System.Convert.ChangeType(
                    row[property.Name],
                    property.PropertyType
                );
            property.SetValue(classObject, propertyValue, null);
        }
        result.Add(classObject);
    }
    return result;
}
</code></pre>

<p>Which is a start, but we're calling <code>continue</code> to send us to the next iteration in three different places. That's not very DRY is it? Also, some people don't care for <code>continue</code>. That's okay, we can solve those things by extracting a method to validate that it's okay to add the object to the result. This greatly reduces the amount of nesting going on here.</p>

<pre><code>List&lt;T&gt; result = new List&lt;T&gt;();
try
{
    foreach (DataRow row in Table.Rows)
    {
        T classObject = new T();
        foreach (PropertyInfo property in propertyList)
        {   
            if (IsValidObjectData(property, columnNames, row)
            {
                object propertyValue = System.Convert.ChangeType(
                        row[property.Name],
                        property.PropertyType
                    );
                property.SetValue(classObject, propertyValue, null);
            }
        }
        result.Add(classObject);
    }
    return result;
}
</code></pre>
    </div>