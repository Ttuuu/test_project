<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Bit shifting and masking is annoying.  I'm counting 9 and/or/shift-operations in your implementation.</p>

<p>If you've got 1024 bytes of free space available, here is an implementation with only 1 or-operation, but with 2 extra memory lookups:</p>

<p>First, construct the conversion tables.  These can be hard-coded.</p>

<pre><code>#define L(x) (uint16_t)((x &amp; 0xE0) | ((x &amp; 0x1f) &lt;&lt; 11))
#define H(x) (uint16_t)(((x &amp; 0x07) &lt;&lt; 8 ) | ((x &amp; 0xF8) &gt;&gt; 3))

const uint16_t low[256] = {
    L(0x00), L(0x01), L(0x02), L(0x03) ... L(0x0F),
    L(0x10), L(0x11), L(0x12), L(0x13) ... L(0x1F),
       :        :        :        :           :
    L(0xF0), L(0xF1), L(0xF2), L(0xF3) ... L(0xFF)
};

const uint16_t high[256] = {
    H(0x00), H(0x01), H(0x02), H(0x03) ... H(0x0F),
    H(0x10), H(0x11), H(0x12), H(0x13) ... H(0x1F),
       :        :        :        :           :
    H(0xF0), H(0xF1), H(0xF2), H(0xF3) ... H(0xFF)
};

#undef L
#undef H
</code></pre>

<p>When you read the low &amp; high bytes, look up the corresponding bit-swapped values, then <code>OR</code> them together.</p>

<pre><code>uint16_t color = low[flash[idx]] | high[flash[idx+1]];
</code></pre>

<p>This works as follows:</p>

<pre><code>flash[idx+0]  --&gt;  GGGR RRRR  --&gt;  RRRR R___ GGG_ ____
flash[idx+1]  --&gt;  BBBB BGGG  --&gt;  ____ _GGG ___B BBBB
    OR'd                      --&gt;  RRRR RGGG GGGB BBBB
</code></pre>

<p>Whether the 2 extra memory lookup cycles are faster than the extra 8 masking, shifting and or'ing operations, you'll have to profile to determine.</p>

<p>As opposed to hard-coding the tables, you could generate them at startup.</p>

<pre><code>for (int byte=0; byte&lt;256; byte++) {
   low[byte] = (uint16_t)((byte &amp; 0xE0) | ((byte &amp; 0x1f) &lt;&lt; 11));
   high[byte] = (uint16_t)(((byte &amp; 0x07) &lt;&lt; 8 ) | ((byte &amp; 0xF8) &gt;&gt; 3));
}
</code></pre>
    </div>