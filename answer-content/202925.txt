<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li>Any part of the code that understand how the data is fetched or how the data is structured is considered Model</li>
<li>You could make a <code>WebSocketController</code> that accepts a <code>URL</code> or <code>URLRequest</code> as well as a <code>WebSocketDelegate</code>. This makes it easy to create new WebSockets for new types of connections</li>
<li>Now if you want to get the data in different parts of the app depending where you are you need to coordinate who gets a new message when. Typically you would create a Singleton-like class like <code>ChatMessageHandler</code>.</li>
<li><p>It will do two things: allow listeners to register and deregister themselves and it will forward messages (in this case <code>ChatMessage</code>s) it receives from the WebSocket. The WebSocket should be built something like this:</p>

<p>let delegate = ChatWebSocketDelegate(delegate: self)
let socket = WebSocketController(connectingTo: url, delegate: delegate)</p></li>
<li><p>Your <code>ChatMessageHandler</code> implements <code>ChatMessageHandling</code> which has some functions for the <code>ChatWebSocketDelegate</code> to call something like <code>received(newMessages: [Array])</code></p></li>
<li>This function will go over the array of registered listeners (<code>[ChatMessageListening?]</code> *) and send them the new messages. *retain loops!</li>
<li>Sometimes there's a bit of logic like if you're watching the chat you receive the messages for you won't get a toaster notification in-app. This logic also lives in <code>ChatMessageHandler</code>. </li>
<li>Your <code>ViewController</code> (or any object that wants to receive updates) only needs to implement <code>ChatMessageListening</code> in an <code>extension</code> and <code>register</code> and <code>deregister</code> itself with the <code>ChatMessageHandler</code></li>
<li>Typically register on <code>init</code> or <code>viewDidLoad</code></li>
<li>Deregister on <code>deinit</code></li>
<li>Remember to send <code>weak var weakSelf = self</code> as a listener otherwise you'll create retain loops! Another option is to make a weak copy inside the <code>register</code> function so you don't need to remember it every time</li>
</ul>
    </div>