<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Excellent</h2>

<ul>
<li><strong>Type annotations</strong> help the IDE make sense of dynamically typed code.</li>
<li><strong>Doctest examples</strong> show people how to use your code with theirs.</li>
<li><strong>Unit tests</strong> ensure that future changes are less likely to break functionality.</li>
</ul>

<h2>Naming issues</h2>

<ul>
<li>When doing the opposite of an action I would use the antonym of the method name. So in this case I would rename <code>erase_value</code> to <code>delete</code>, <code>remove</code> or another antonym of "add".</li>
<li>The <code>_first</code> suffix looks redundant - <code>pop</code> and <code>peek</code> are common names for what you are doing.</li>
<li>A common pattern for first and second parameters like in <code>_swap_indexes</code> or your lambdas is simply <code>first</code> and <code>second</code>. These are lexicographically more distinct than <code>index1</code> and <code>index2</code>, so it's much harder to confuse the two.</li>
</ul>

<h2>Keeping it simple</h2>

<ul>
<li>By all means write comments to clarify things to yourself while programming, but then see if you can simplify the code so much that you can remove it. Comments should explain the "why", not the "how", "what" or "when."</li>
<li>I would pull out both lambdas and give them names. That way the "Default results in min-heap." comment becomes redundant and <code>-1 if a &lt; b else 0 if a == b else 1</code> can be much more legible as multiple lines.</li>
<li>Unless binary heaps are special in some way starting indexing at 1 will be extremely confusing to most programmers. Python as a rule does not do 1-based indexing.</li>
</ul>

<h2>Tests</h2>

<ul>
<li>Testing should be done by an external process, not every time the program runs.</li>
<li>Test naming is tricky. I know almost every guide out there uses the standard "test [function name]" or "test [high level requirement]" naming scheme, but there's a couple tricks to make them much more useful:

<ul>
<li>Start the test name with "should." (In Python you need to configure your test framework to look for <code>should_</code> or just use <code>test_should_</code>.) This forces you to think about the <em>goal</em> of the test, to prove that the code does what it should do rather than just what sort of data or function is involved in the test. For example, renaming <code>test_erasing_nonexistent</code> to <code>should_return_false_when_removing_nonexistent_number</code> would clarify what the test is trying to prove.</li>
</ul></li>
<li>I can tell from the tests that they were written after the code, because I used to write tests the same way. With TDD you would discover that there is no point testing 16 values when one, two or three would do to prove the point. This would also make the tests much easier to read, because as a reviewer I would be able to verify with the absolute minimal cognitive load that they do what they say.</li>
<li>Each test should ideally contain only one assertion. (The only exception to this that I've found is when a guard assertion results in more useful error messages, such as <code>self.assertEqual(200, request.status_code, request.data)</code>.) While resulting in lots more test methods this gives several advantages:

<ul>
<li>Each test is much easier to read.</li>
<li>It's much easier to spot redundant, irrelevant or wrong tests.</li>
<li>You won't have to play whack-a-mole with assertions to get to the end of the test.</li>
</ul></li>
</ul>

<p>Mypy by default does very few checks; last time I configured it I ended up with this:</p>

<pre><code>[mypy]
check_untyped_defs = true
disallow_untyped_defs = true
ignore_missing_imports = true
no_implicit_optional = true
warn_redundant_casts = true
warn_return_any = true
warn_unused_ignores = true
</code></pre>

<p>This would flag some more issues, like <code>__init__</code> and test methods missing return types (which should be <code>None</code>).</p>
    </div>