<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Although you already accepted an answer, here is my two cents.</p>

<h3>The code:</h3>

<p>Although recursive functions can lead to elegant solutions for some problems, in <code>addElement()</code> I think the recursive call complicates things.  So I changed that to an iterative solution, and kept track of the column index.  The function is also complicated by terminating the loops when you run out of letters in the string.  This can be handled by iterating over the string and using a <code>try ... except StopIteration</code> construct to catch when the letters are exhausted.  Note, we don't need to pass in count or column any longer.</p>

<pre><code>def addElements(self):
    letter = iter(self.s)
    column = 0

    try:
        while True:
            # fill in down a column
            for row in range(self.numRows):
                self.final_grid[row][column] = next(letter)

            # fill in up a diagonal
            column += 1 
            for row in range(self.numRows - 2, 0, -1):
                self.final_grid[row][column] = next(letter)
                column += 1 

    except StopIteration:
        # ran out of letters
        pass
</code></pre>

<p>I think this is simple enough to move it into the <code>convert()</code> function:</p>

<pre><code>class Solution:
    def convert(s, numRows):
        grid = [['']*(len(s)//2) for _ in range(numRows)]

        letter = iter(s)
        column = 0

        try:
            while True:
                # fill in down a column
                for row in range(numRows):
                    grid[row][column] = next(letter)

                # fill in up a diagonal
                column += 1 
                for row in range(numRows - 2, 0, -1):
                    grid[row][column] = next(letter)
                    column += 1 

        except StopIteration:
            # ran out of letters
            pass

        return "".join(map("".join, grid))
</code></pre>

<h3>Getting rid of the grid</h3>

<p>At the end, the final string is read out of the grid row by row, skipping the empty cells.  Notice that within a row, the column just serves to keep the letters 
in the same order as in the original string.  But this can be done by keeping a string for each row.  Then iterate over the string adding the letters to the end of the appropriate row.</p>

<pre><code>    def convert(s, numRows):
        rows = [''] * numRows

        letter = iter(s)
        column = 0

        try:
            while True:
                # fill in down a column
                for row in range(numRows):
                    rows[row] += next(letter)          # &lt;&lt; append letter to the row

                # fill in up a diagonal
                column += 1 
                for row in range(numRows - 2, 0, -1):
                    rows[row] += next(letter)          # &lt;&lt; append letter to the row
                    column += 1 

        except StopIteration:
            # ran out of letters
            pass

        return "".join(rows)
</code></pre>

<h3>Direct calculation</h3>

<p>The row number for a letter cycles through the pattern 0, 1, ..., numRows-2, numRows-1, numRows-2, ... 1, 0, 1, ....  The length of the cycle is numRows + (numRows - 2) = 2*numRows - 2.  So the position in a cycle can be found by <code>index % cycle_length</code>.  With a little algebra, that can be converted to the row:</p>

<pre><code>    def convert(s, numRows):
        rows = [''] * numRows
        cycle_length = 2*numRows - 2

        for i,c in enumerate(s):
            row = numRows - 1 - abs(numRows - 1 - i % cycle_length)
            rows[row] += c

        return "".join(rows)
</code></pre>

<h3>Look ma, no math</h3>

<p>Observe, that the row index starts at 0 and steps upward until it gets to the last row.  Then it reverses direction and counts back down to 0, where it starts counting up again.  Here is another take on a solution:</p>

<pre><code>def convert(s, numRows):
    row = [''] * numRows

    index = 0
    step = 1

    for c in s:
        row[index] += c
        index += step

        # reverse step direction when hit the top or bottom row
        if index in (0, numRows-1):
            step = -step

    return ''.join(row)
</code></pre>
    </div>