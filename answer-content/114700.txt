<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I will try to give you as much feedback as I can, but I make no claim to be complete.</p>

<h1>General</h1>

<ul>
<li>Add the encoding of your source code on top of your file. <a href="https://www.python.org/dev/peps/pep-0263/" rel="nofollow noreferrer">PEP263</a> recommends something like <code># -*- coding=utf-8 -*-</code>.</li>
<li>You have loads of global variables. Consider refactoring your code, so that you can manage them in a central place. A class would be ideal, but a dictionary might also do the trick.</li>
<li><code>12</code> (words?) and <code>60</code> (default highscore?) are more or less magic numbers. It would be good practice to replace them by constants with meaningful names.</li>
<li>Rethink your use of the <code>if __name__ == '__main__':</code> construct. Usually this little piece of code is used to get different behaviour if your code is executed as script (<code>__name__</code> is <code>__main__</code> in that case), from when your code is imported from other programs (<code>__name__</code> is <code>name_of_your_file</code>).</li>
</ul>

<h1>Imports</h1>

<p>I would not recommend to use <code>*</code> imports in general. It is quite hard to see which functions/objects/... come from a certain package. This is an even greater problem if someone, who maybe does not even know that package, reviews your code. In your case you could do something like</p>

<pre><code>try:
    import tkinter as 
except ImportError:
    import Tkinter as tk
</code></pre>

<p>This allows you to use the functionality of the package simply by prepending <code>tk.</code> to your calls, without the need to care which module really got imported.</p>

<h1>Functions (general)</h1>

<ul>
<li>Consider choosing more meaningfull names, e.g. <code>no</code> is not a good function name. <code>empty_callback</code> or something similar would be more self describing</li>
<li>Add a short documentation for your functions. <a href="https://www.python.org/dev/peps/pep-0008/#documentation-strings" rel="nofollow noreferrer">PEP8</a> and <a href="https://www.python.org/dev/peps/pep-0257/" rel="nofollow noreferrer">PEP257</a> will give you very good guidelines and examples how to design such "docstrings", as they are called in Python.</li>
<li>Use <code>global</code> only if you assign to a global variable (see <a href="https://stackoverflow.com/a/423668/5682996">SO</a> for a good example). If you just want to access them, they are in your scope with or without <code>global</code>. The only difference is, that with <code>global</code> assignments to these variables will cause the global value to change, otherwise the change will be lost after the function returns.</li>
</ul>

<h1>Functions (one by one)</h1>

<p>If a function does not appear in the list below, I did not spot any special issue(s). The statements from the previous sections apply to them and all items in the list below likewise.</p>

<h2><code>shuffle</code></h2>

<ul>
<li>As I already mentioned, consider to rename some functions. As far as I understand the code of <code>shuffle</code>, you are not really shuffling anything, but instead pick a random word of your list of words.</li>
<li><p>The use of <code>while</code> is not really appropriate here. The loop is only run once (at most) and can easily be replaced with an <code>if</code> statement. The following code should have the exact same behaviour:</p>

<pre><code>if word_count &lt; 12:
    # your while-code here, without return
else:
    end()
</code></pre></li>
<li><p>Loops are usually left with a <code>break</code>. <code>return</code> will not just leave the loop, but the whole function. In your case that will not make any difference, but you should stick with <code>break</code> if you want to leave loops.</p></li>
</ul>

<h2><code>restart</code></h2>

<ul>
<li>First problem with <code>global</code>: <code>global word_count, skips, time_score</code> will will change this variables at global scope, but then there is <code>start_time = time.time()</code>. That assignement will never leave the function.</li>
</ul>

<h2><code>no</code></h2>

<p>See my example in <strong>Functions (general)</strong></p>

<h2><code>write</code></h2>

<ul>
<li>You can add the values to write as parameters, which allows you to use them again later, e.g. in <code>reset</code>.</li>
<li>Maybe the two values written to two files should go to one file as they belong together. As SuperBiasedMan already suggested in his <a href="https://codereview.stackexchange.com/a/114637/92478">answer</a>, JSON could be a good way to go.</li>
<li>You should consider writing a function <code>read</code> as wrapper for the lines at the beginnig that read your information from file.</li>
</ul>

<h2><code>end</code></h2>

<p>Mostly another issue with <code>global</code>. You do not assign anything to the variables you introced as <code>global</code>. <code>start_time</code>, <code>high_score</code> and <code>name</code> are not even used in this function.</p>

<h2><code>reset</code></h2>

<p>Consider a rename. The name is quite missleading, as it does not tell anything about what is actually reset.</p>

<h2><code>update</code></h2>

<ul>
<li>Next inconsistency with <code>global</code>. You only use <code>high_score</code> and <code>name</code> anywhere in the function and just assign a new value to <code>name</code>.</li>
<li>There is a quite large part of code which is somehow redudant to the initalization code later.</li>
</ul>

<h2><code>check</code></h2>

<ul>
<li><code>global</code> again. </li>
<li>Consider a more meaningful name as well.</li>
<li>Is there a specific reason the checks only include all lowercase comparisons? The words in your list all have uppercase letters in the first position.</li>
</ul>

<h2><code>update_time</code></h2>

<ul>
<li><code>global</code> again. </li>
<li><p>You could save the temporary assignement simply by using </p>

<pre><code>time_score += time.time() - start_time
</code></pre></li>
</ul>

<h2><code>update_right</code></h2>

<ul>
<li><code>global</code>s again.</li>
<li>Small typo in the functions name.</li>
</ul>

<h1>All the rest</h1>

<p>After the definition of your functions there is a large chunk to initialize the GUI. A few comments would be very nice, so that a reviewer can spot errors, where your intention differs from your actual code, easier.</p>

<p>There are several redundant blocks with lots of calls to <code>.pack()</code>. These blocks might be pushed into a function as well.</p>
    </div>