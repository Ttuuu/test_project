<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Welcome to CodeReview!</p>
<p><strong>Style Guide</strong></p>
<p>You mentioned that you think your code looks "ugly". This problem can be solved by reading a style guide (<a href="https://google.github.io/styleguide/javaguide.html" rel="nofollow noreferrer">Google Style Guide</a>).</p>
<p>Some important points:</p>
<ul>
<li>Use proper intendation</li>
<li>Although you can use empty lines to structure your code, it is not useful to have empty lines after every line of code.</li>
<li>Use useful names (public class Test is not useful). Also you should use camelCase for your variable-names.</li>
</ul>
<pre><code>import java.util.Scanner;

public class LoanCalculator {

    public static void main(String[] args) {
        Scanner sc = new Scanner (System.in);
        System.out.println("if Days is not calculated just type 0");
        System.out.print("Days: ");
        double day = sc.nextDouble();

        if (day&lt;=0) {
            System.out.println("Old Year: ");
            double oldYear = sc.nextDouble();

            System.out.println("Old Month: ");
            double oldMonth = sc.nextDouble();

            System.out.println("Old Date: ");
            double oldDate = sc.nextDouble();

            System.out.println("New Year: ");
            double newYear = sc.nextDouble();

            System.out.println("New Month: ");
            double newMonth = sc.nextDouble();

            System.out.println("New Date: ");
            double newDate = sc.nextDouble();

            day = ((newYear * 365) + (newMonth * 30)+(newDate)) - (((oldYear * 365) + (oldMonth * 30) + (oldDate)));
            System.out.println("Days = "+ day);
            System.out.print("Principle: ");
            double principle = sc.nextDouble();
            System.out.print("Rate Of Interest: ");
            double rateofinterest = sc.nextDouble();
            double interest = (((principle * (rateofinterest / 100)) / 30) * day);
            System.out.println("--------------------------------");
            System.out.println("Interest = Rs " + interest);
            System.out.println("                                 ");
            System.out.println("Total Amount = Rs " + (principle + interest));
            System.out.println("--------------------------------");
            System.out.println("Thank you!!");
        }

        else {
            System.out.print("Principle: ");
            double principle = sc.nextDouble();
            System.out.print("Rate Of Interest: ");
            double rateofinterest = sc.nextDouble();  
            double interest = (((principle * (rateofinterest / 100)) / 30) * day);
            System.out.println("--------------------------------");
            System.out.println("Interest = Rs " + interest);
            System.out.println("                                 ");
            System.out.println("Total Amount = Rs " + (principle + interest));
            System.out.println("--------------------------------");
            System.out.println("Thankyou!!");
        }
    }
}
</code></pre>
<p><strong>Code Structure</strong></p>
<p>To structure your code, it is highly recommended to use methods, especially for code that is used multiple times. One example:</p>
<pre><code>    public static double getInterest(double rateofinterest, double principle, double day) {
        return (((principle * (rateofinterest / 100)) / 30) * day);
    }
</code></pre>
<p>Then you can just use <code>           double interest = getInterest(rateofinterest, principle, day);</code> in your main-method.</p>
    </div>