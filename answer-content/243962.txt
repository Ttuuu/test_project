<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>So you want the index of the maximum value in your collection. That's a lot of code for such a simple task.</p>
<p>Let's start at the top.</p>
<p><code>q_table_test.txt</code> - The sample data supplied is rather ridiculous. The elements that will become "attribute values" are all the same. How do you know the code is correct if there is no maximum? Does it matter which index is returned?</p>
<p><code>QTable.apply(filename)</code> - The number_attributes_per_instance should be a configuration parameter, or derived directly from the input data. What if you needed to support more than one number_attributes_per_instance?</p>
<p>You don't appear to know what a <code>lazy val</code> is and what it's for. Its usage here makes no sense.</p>
<p>There are no safety checks. The file text is loaded as if formatting errors can't happen.</p>
<p><code>getQTableFromFile()</code> - Why is <code>getResourceAsStream()</code> wrapped in an <code>Option</code> and then unwrapped with a <code>.get</code>? That's like loaning your brother a dollar so that he can repay the dollar he borrowed from you yesterday. A lot of busy work that accomplishes nothing.</p>
<p><code>cleanData()</code> - Very inefficient.</p>
<p><code>getArgMaxValue()</code> - If the <code>state</code> parameter is faulty you go through the trouble of building a bogus <code>qValues</code> list and then the elaborate and convoluted steps of finding the index of its max value, of which there is none. If you're going to lie to the user why not just return <code>remainingPositions.head</code> and be done with it?</p>
<hr>
<p>As a demonstration, here's a smaller yet safer implementation of the same basic outline.</p>
<pre><code>import scala.util.{Try, Using}  //Scala 2.13.x

class QTable(bindings: Map[String, Array[Double]]) {
  def getMaxValueIdx(state              : String
                    ,remainingPositions : List[Int]
                    ) :Option[Int] =
    bindings.get(state)
            .flatMap(arr =&gt; remainingPositions.maxByOption(arr.lift))
}

object QTable {
  private def loadFromFile(filename :String) :Try[String] =
    Using(scala.io.Source.fromFile(filename)) {
      _.getLines().map(_.takeWhile(_ != '#').trim).mkString
    }

  private val recFormat =
    """([^,"\[\]]+)\s*,((\s*('\d*\.?\d*')\s*,?)+)""".r.unanchored

  def apply(filename :String) :QTable =
    loadFromFile(filename).flatMap{ data =&gt; Try {
      recFormat.findAllMatchIn(data)
        .map(m =&gt; m.group(1) -&gt; m.group(2)
                                 .split("[,\\s]+")
                                 .collect{case s"'$n'" =&gt; n.toDouble}
            ).toMap
    }}.fold(err =&gt; {println(err); new QTable(Map.empty)}
           ,new QTable(_))
}
</code></pre>
<p>My <code>q_table_test.txt</code> file:</p>
<pre><code>[
"1st 9 Tbl,'0','1','2','3','4','5','6','7','8', #table of 9 elements
"Short Tbl,   '7' , '1.1','.22', '3'  ,'12.0' , #mixed spacing
"Split Tbl, '17', '1.25', '.127', '300.003'     #1st part
          , '12.0', '4321', '.1234'           , #2nd part
"2nd 9 Tbl,'0.','0.9','0.8','0.7','0.6','0.5','0.4','0.3','0.2'"
]
</code></pre>
<p>testing:</p>
<pre><code>val qx = QTable("bogus.txt")    // (No such file or directory)
qx.getMaxValueIdx("1st 9 Tbl", List(7, 2, 3))  // None

val qt = QTable("./q_table_test.txt")
qt.getMaxValueIdx("1st 9 Tbl", List(7, 2, 3))  // Some(7)
qt.getMaxValueIdx("1st 9 Tbl", List())         // None
qt.getMaxValueIdx("Short Tbl", List(2,3,0))    // Some(0)
qt.getMaxValueIdx("Short Tbl", List(2,3,990))  // Some(3)
qt.getMaxValueIdx("NoSuchTbl", List(5,0,8))    // None
qt.getMaxValueIdx("Split Tbl", List(5,0,8))    // Some(5)
qt.getMaxValueIdx("2nd 9 Tbl", List(7, 2, 3))  // Some(2)
</code></pre>
    </div>