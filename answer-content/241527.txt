<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>PEP-8</h1>

<p>The <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">Style Guide for Python Code</a> enumerates a set of rules that all Python programs should follow.  Of particular note is the <a href="https://www.python.org/dev/peps/pep-0008/#naming-conventions" rel="nofollow noreferrer">Naming Conventions</a>, which indicates that function names and variable names should all be <code>snake_case</code>, not <code>CapitalizedWords</code>.  So <code>MergeSort</code> should be renamed <code>merge_sort</code>, and <code>MyList</code> should be renamed <code>my_list</code>.</p>

<h1>Private functions</h1>

<p><code>merge</code> is an internal helper function for <code>MergeSort</code>.  PEP-8 also recommends naming internal helpers with a leading underscore, to indicate it is private, and should not be used externally, so <code>merge</code> should be named <code>_merge</code>.</p>

<h1>Repeated computations and lookups</h1>

<pre><code>    while len(left) &gt; i and len(right) &gt; j:
        if left[i] &gt; right[j]:
            sorted_list.append(right[j])
            j += 1
        else:
            sorted_list.append(left[i])
            i += 1
</code></pre>

<p>This code has some inefficiencies.</p>

<ol>
<li>Every iteration is recomputing <code>len(left)</code> and <code>len(right)</code>.</li>
<li>Every iteration is performing 3 indexing operations, first looking up <code>left[i]</code> and <code>right[j]</code>, and then looking up either <code>left[i]</code> or <code>right[j]</code> depending on which branch of the <code>if</code>/<code>else</code> is taken.</li>
</ol>

<p>You only need to test <code>len(left) &gt; i</code> when <code>i</code> changes, and <code>len(right) &gt; j</code> when <code>j</code> changes:</p>

<pre><code>    while True:
        if left[i] &gt; right[j]:
            sorted_list.append(right[j])
            j += 1
            if len(right) &gt; j:
                break
        else:
            sorted_list.append(left[i])
            i += 1:
            if len(left) &gt; i:
                break
</code></pre>

<p>Now, the <code>len()</code> function should be called half as often, and only the part of the expression that is changing is being evaluated, and so this code, while longer, should actually run faster.</p>

<p>Similarly, we can remove the repeated indexing operations, by only performing the indexing operation when the corresponding index changes:</p>

<pre><code>    left_value = left[i]
    right_value = right[j]

    while True:
        if left_value &gt; right_value:
            sorted_list.append(right_value)
            j += 1
            if len(right) &gt; j:
                break
            right_value = right[j]
        else:
            sorted_list.append(left_value)
            i += 1:
            if len(left) &gt; i:
                break
            left_value = left[i]
</code></pre>

<p>Again, more code, but it should run faster.</p>

<h1>Iterators</h1>

<p>The above code is complicate because we are responsible for testing if the indices get to the end of the list, looking up the values at the given indices, and incrementing the indices.</p>

<p>Python has iterators, which do all of these operations for us!  So the above code could simply be written as:</p>

<pre><code>    left_iter = iter(left)
    right_iter = iter(right)

    left_value = next(left_iter)
    right_value = next(right_iter)

    while True:
        if left_value &gt; right_value:
            sorted_list.append(right_value)
            right_value = next(right_iter)
        else:
            sorted_list.append(left_value)
            left_value = next(left_iter)
</code></pre>

<p>This takes the <code>left</code> and <code>right</code> lists, creates iterators for them, extracts the first values of each, and then adds the smaller of the two values to the <code>sorted_list</code>, and then fetches the next value from the corresponding iterator.</p>

<p>The only problem is it will raise a <code>StopIteration</code> exception when one of the two iterators runs out.  We just need to catch this, and add the remaining entries from the non-expired iterator.  But which one?  Actually this is easy, since the values for <code>left_value</code> and <code>right_value</code> haven't changed, <code>left_value &gt; right_value</code> will reveal which branch of the <code>if</code>/<code>else</code> the exception was raised in.</p>

<p>The only "tricky" part to remember is that if the <code>next(left_iter)</code> raised an exception, then <code>right_value</code> should be added to the <code>sorted_list</code> before the rest of the values from <code>right_iter</code>, and vis-versa. <code>sorted_list.extend()</code> is an easy way of adding the remaining items from the non-expired iterator.  </p>

<pre><code>def _merge(left, right):
    left_iter = iter(left)
    right_iter = iter(right)

    sorted_list = []

    # These should never fail because both left &amp; right have one or more elements.
    left_value = next(left_iter)
    right_value = next(right_iter)

    try:
        while True:
            if left_value &gt; right_value:
                sorted_list.append(right_value)
                right_value = next(right_iter)
            else:
                sorted_list.append(left_value)
                left_value = next(left_iter)

    except StopIteration:
        if left_value &gt; right_value:
            sorted_list.append(left_value)
            sorted_list.extend(left_iter)
        else:
            sorted_list.append(right_value)
            sorted_list.extend(right_iter)

    return sorted_list
</code></pre>

<p>We've approximately double the number of lines of code in <code>_merge(left, right)</code>, but the code should be faster, since all of the indexing, is now being handled by Python itself.</p>
    </div>