<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Use a 2D array instead of 6 1D arrays (vs. <code>character0</code>, <code>character1</code>, ...)</p>

<p>Use a 1D array for <code>n</code> instead of (<code>n0</code>, <code>n1</code>, ...)</p>

<p>Add EOS termination to the string that gets passed to <code>strtol</code></p>

<p>Here's a refactored version:</p>

<pre><code>bool
checksum(char card[])
{
    char chars[6][3];
    long nx[6];

    for (int col = 0;  col &lt; 6;  ++col) {
        int lo = col &lt;&lt; 1;
        int hi = lo + 2;
        for (int i = lo;  i &lt; hi;  ++i)
            chars[col][i - lo] = card[i];
    }

    for (int i = 0;  i &lt; 6;  ++i) {
        char *ptr = chars[i];
        ptr[2] = 0;
        nx[i] = strtol(ptr,NULL,16);
    }

    if (nx[0] ^ nx[1] ^ nx[2] ^ nx[3] ^ nx[4] == nx[5])
        return true;
    else
        return false;
}
</code></pre>

<hr>

<p><strong>UPDATE:</strong></p>

<p>Here's a cleaner/simpler version:</p>

<pre><code>bool
checksum(char card[])
{
    char tmp[3];
    long nx[6];

    tmp[2] = 0;
    for (int col = 0;  col &lt; 6;  ++col) {
        int lo = col &lt;&lt; 1;

        tmp[0] = card[lo + 0];
        tmp[1] = card[lo + 1];

        nx[col] = strtol(tmp,NULL,16);
    }

    if (nx[0] ^ nx[1] ^ nx[2] ^ nx[3] ^ nx[4] == nx[5])
        return true;
    else
        return false;
}
</code></pre>

<hr>

<p><strong>UPDATE #2:</strong></p>

<p>Here's an even simpler version:</p>

<pre><code>bool
checksum(char card[])
{
    char tmp[3];
    long nx;

    tmp[2] = 0;
    nx = 0;
    for (int idx = 0;  idx &lt; 12;  idx += 2) {
        tmp[0] = card[idx + 0];
        tmp[1] = card[idx + 1];

        nx ^= strtol(tmp,NULL,16);
    }

    if (nx == 0)
        return true;
    else
        return false;
}
</code></pre>

<hr>

<p><strong>UPDATE #3:</strong></p>

<p>Based on some feedback ...</p>

<p>The first two examples above, were to eliminate "parallel scalar" variables (e.g.) <code>v0, v1, v2, ... vN</code> in favor of an array: <code>v[N+1]</code>. This allowed replicated code to be replaced with loops. OP's code had two such instances for <code>character*</code> and <code>n*</code> variables, so I converted both to arrays.</p>

<p>When starting out [as a programmer], when to use an array isn't always obvious [particularly for small numbers]. In the above case, <code>N</code> was 6. So, the code could be built up by cut-and-paste.</p>

<p>If, however, <code>N</code> had been a much larger number, say, 1000, the original code would then not <em>scale</em> well. And, the array solution would have become [more] obvious.</p>

<p>OP's code was trying to copy two bytes from the buffer into different <code>char</code> arrays of the form <code>character*</code> in the first code block [to add an EOS char to allow <code>strtol</code> to work]. This still had a bug because there was no space for the EOS.</p>

<p>OP's second block would use <code>strtol</code> on the intermediate <code>character*</code> variables to produce <code>n*</code> variables.</p>

<p>My first example [in my <em>original</em> post], did the conversion from separate scalar variables to arrays.</p>

<p>My second example [in my first update], combined both blocks/loops into one, so that <code>character*</code> [which I had replaced with the 2D <code>chars</code> array], could be eliminated with a single <code>tmp</code> array.</p>

<p>When I did my example in update #2, I assumed that OP's algorithm was correct. I didn't realize that:</p>

<pre><code>if (nx[0] ^ nx[1] ^ nx[2] ^ nx[3] ^ nx[4] == nx[5])
</code></pre>

<p>was being interpreted [by the compiler, based on precedence] as:</p>

<pre><code>if (nx[0] ^ nx[1] ^ nx[2] ^ nx[3] ^ (nx[4] == nx[5]))
</code></pre>

<p>I assumed it was grouped as:</p>

<pre><code>if ((nx[0] ^ nx[1] ^ nx[2] ^ nx[3] ^ nx[4]) == nx[5])
</code></pre>

<p>Because that's what made sense for the CRC calculations [and I assumed OP had done it correctly].</p>

<p>My refinement [to eliminate the <code>nx</code> <em>array</em> in favor of a running CRC], was based on the following identity:</p>

<pre><code>(x == y) === ((x ^ y) == 0)
</code></pre>

<p>So, XORing all values (including the checksum), if the message was correct/intact, would produce a final value of zero. So, by doing this, I fixed OP's second bug, based on some serendipity.</p>

<p>Others have pointed out that:</p>

<pre><code>if (nx == 0)
    return true;
else
    return false;
</code></pre>

<p>Can be replaced with:</p>

<pre><code>return (nx == 0);
</code></pre>

<p>I had debated doing that, but decided that the example was already far afield from OP's original and that it would be clearer to leave the <code>return</code> sequence as it was. And, the optimizer would [probably] produce the same exact code for both.</p>

<p>At that point, I had debated coming up with a <code>hex</code> function that decoded a single hex char as others have suggested, calling it twice and eliminating the copy to <code>tmp</code> and call to <code>strtol</code>, but, again, felt I was getting far enough away from the original code.</p>

<p>But, just for the sake of completeness, here is my final/best example, generalized to allow an arbitrary buffer size:</p>

<pre><code>unsigned int
hex(unsigned int chr)
{

    // NOTE: hopefully, this function gets inlined ...

    do {
        if ((chr &gt;= '0') &amp;&amp; (chr &lt;= '9')) {
            chr -= '0';
            break;
        }

        chr = tolower(chr);

        if ((chr &gt;= 'a') &amp;&amp; (chr &lt;= 'f')) {
            chr -= 'a';
            chr += 10;
            break;
        }

        // should blow up here (but there was no error checking in original)
        chr = 0;
    } while (0);

    return chr;
}

bool
checksum(const char *card,size_t len)
{
    unsigned int cur;
    unsigned int crc = 0;

    for (size_t idx = 0;  idx &lt; len;  idx += 2) {
        cur = hex(card[idx + 0]);
        cur &lt;&lt;= 4;

        cur |= hex(card[idx + 1]);

        crc ^= cur;
    }

    return (crc == 0);
}
</code></pre>

<p>Note that even this could be tweaked a bit more for speed with some careful benchmarking ...</p>

<hr>

<p><strong>UPDATE #4:</strong></p>

<p>Eliminating the call to <code>hex</code> in favor of a [single] table lookup may be faster and provide some error checking:</p>

<pre><code>int
checksum(const char *card,size_t len)
{
    static unsigned char hex[256] = { ['0'] = 0xFF };
    unsigned int chr;
    unsigned int cur;
    unsigned int crc = 0;

    // one time init of translation table
    if (hex['0'] == 0xFF) {
        for (chr = 0x00;  chr &lt;= 0xFF;  ++chr)
            hex[chr] = 0xFF;

        for (chr = 0;  chr &lt;= 9;  ++chr)
            hex[chr + '0'] = chr;

        for (chr = 0x00;  chr &lt;= 0x05;  ++chr) {
            hex[chr + 'a'] = chr + 0x0A;
            hex[chr + 'A'] = chr + 0x0A;
        }
    }

    for (size_t idx = 0;  idx &lt; len;  idx += 2) {
        chr = hex[card[idx + 0]];
#ifdef ABORT_ON_ERROR
        if (chr == 0xFF)
            return -1;
#endif
        cur = chr;
        cur &lt;&lt;= 4;

        chr = hex[card[idx + 1]];
#ifdef ABORT_ON_ERROR
        if (chr == 0xFF)
            return -1;
#endif
        cur |= chr;

        crc ^= cur;
    }

    return (crc == 0);
}
</code></pre>
    </div>