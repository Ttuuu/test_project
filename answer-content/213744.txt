<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here are some suggestions:</p>

<p><strong>Raw Strings</strong></p>

<p>Python has <a href="https://docs.python.org/3/reference/lexical_analysis.html#string-and-bytes-literals" rel="nofollow noreferrer"><em>raw strings</em></a> which make it much easier to use backslashes. The documentation is a bit scattered, but the upshot is that a raw string looks like <code>r'foo'</code> and backslashes don't need to be escaped. This makes raw strings the format of choice for writing Windows paths and regular expressions.</p>

<p>I'd suggest you use something like this:</p>

<pre><code>DATA_DIR = r'C:\DataFiles'
</code></pre>

<p><strong>Python Paths</strong></p>

<p>But the fact is that Python file operations will honor windows paths spelled using forward slashes (<code>/</code>) instead of backslashes (<code>\</code>). So you could just as easily define that like this:</p>

<pre><code>DATA_DIR = 'C:/DataFiles'
</code></pre>

<p><strong>Use <code>pathlib</code></strong></p>

<p>Probably the most important thing you could do, however, is to start using <code>pathlib</code>. Don't bother with <code>os.path</code> for this, go directly to the good stuff! The <code>pathlib</code> module is part of the standard library, and does many things that "just work." Including, of course, overloading the operator <code>/</code> to do concatenation:</p>

<pre><code>from pathlib import Path

DATA_DIR = Path('C:/DataFiles')

test = DATA_DIR / 'foo'    # test = Path('C:/DataFiles/foo')
</code></pre>

<p><strong>[pro-tip]: Don't hard-code your file names, write code to find them</strong></p>

<p>It seems easy to write something like <code>filenames = [ 'Q1.txt', 'Q2.txt' , 'Q3.txt' , 'Q4.txt']</code> and it <em>is,</em> until your boss says, "Hey, could you add the last two calendar years to that report?" and you're suddenly stuck trying to move files around and change your code and change the field names in your dataframe and change your HTML and change your spreadsheets and ...</p>

<p>It's better if you <em>have only one source of truth</em> for things like this. In this case, let's use the filenames as the source of truth. Then we can use <code>glob</code> to match them:</p>

<pre><code>from pathlib import Path

DATA_DIR = Path('C:/DataFiles')

def get_data_files(data_path, pattern="*Q[0-9].txt"):
    """ Return a list of data-file Path objects in the given directory
        where the name matches the pattern.

        Note that pattern uses Python glob rules, which allows for
        **/*.txt to recursively traverse subdirectories.
    """
    # NB: Path(string) returns Path, Path(Path) returns Path FTW!
    filepaths = Path(data_dirspec).glob(pattern)
    return filepaths
</code></pre>

<p>Writing code like this lets you make one change - renaming <code>Q[1-4].txt</code> to <code>2019Q[1-4].txt</code> - and you still get the list of paths you need. </p>

<p>Then the rest of the preamble changes to:</p>

<pre><code>quarter_files = get_data_files(DATA_DIR)

for this_q in quarter_files:
    q_name = this_q.stem  # 'Q1', 'Q2', etc.
</code></pre>

<p><strong>[pro-tip]: Use <code>with</code> for opening and closing files</strong></p>

<p>There's an example right in the Python documentation for <a href="https://docs.python.org/3/tutorial/inputoutput.html#reading-and-writing-files" rel="nofollow noreferrer">Reading and Writing Files</a> that shows how to use <code>with</code> for file I/O. It's built-in RAII support, if that means anything to you, and it's absolutely the correct way to do file I/O in most cases. Certainly in this one. Plus if you don't use it, every suggestion you get from anyone that (1) reads your code; and (2) knows how to code in Python is going to include "use <code>with</code> for file I/O!". So let's make this quick change:</p>

<p>Change this:</p>

<pre><code>allNames = [line.rstrip('\n') for line in open(entireFilename)]
</code></pre>

<p>To this:</p>

<pre><code>with open(this_q) as infile:
    all_names = [line.rstrip('\n') for line in infile]
</code></pre>

<p>What's the difference? The difference is that after the <code>with</code> version, the <code>infile</code> is closed. Why does it matter? Two reasons: First, <code>with</code> handles success, failure, exceptions, and always makes sure to close the file. Second, <em>file handles</em> are a surprisingly limited resource, especially if you're debugging code in a REPL. Using <code>with</code> is a good way to never run out.</p>

<p><strong>Let Python do Python</strong></p>

<p>You wrote a lot of code to handle the management of names in your dataframe. But you overlooked the fact that Python has data structures other than dataframes that are easier to work with.</p>

<pre><code>for eachname in allNames:
    # If the name is in the dataframe then replace the current quarter with 'Y'
    if ( df['Name'].str.contains(eachname).any() ):
       rowNumber = df.loc[df['Name'] == eachname].index[0]
       df.iloc[[rowNumber],[currentQtr]] = 'Y'
    else:
        # It is a new name, thus, replace the current Qtr with 'Y'. Rest with be Nan
        emptyDataFrame =DataFrame( columns = ['Name', 'Q1', 'Q2', 'Q3', 'Q4' ])
        emptyDataFrame = emptyDataFrame.append([{'Name':eachname}])
        rowNumber = 0
        emptyDataFrame.iloc[[rowNumber], [currentQtr]] = 'Y'
        df = df.append(emptyDataFrame)
        df.index = range(len(df))
</code></pre>

<p>First of all, you claim that names only appear once in any given quarter's data, if they appear at all. So your logic is about checking to see if a name appears in the dataframe because of some previous quarter.</p>

<p>This is a good use for Python's <a href="https://docs.python.org/3/tutorial/datastructures.html#sets" rel="nofollow noreferrer"><code>set</code></a> data type. You can test for containment and compute intersections and differences quite easily.</p>

<pre><code>with open(this_q) as infile:
    names_this_q = {line.rstrip('\n') for line in infile}
</code></pre>

<p>That is called a <em>set comprehension,</em> and it works similar to a <em>list comprehension</em>. (And yes, it rocks!) Sets are <em>O(1)</em> for lookup, so you can just use the <code>in</code> operator.</p>

<pre><code>all_names = set()  # Sadly, no literal for empty set

for this_q in quarter_files:
    with open(this_q) as infile:
        names_this_q = {line.rstrip('\n') for line in infile}

    q_name = this_q.stem

    for name in names_this_q:
        if name in all_names:
            # Already in DF
        else:
            # Add it to DF
</code></pre>

<p>But you're really either updating an existing record, or accumulating new records. Why not capture all the new records into a python data structure and do one single dataframe update at the end? </p>

<p>An even better question might be to ask if you need to use the dataframe for this at all? You are building what amounts to a boolean table. You could store the boolean values in a data structure built from <code>collections.defaultdict</code> and only convert it into a dataframe for the purpose of generating the HTML at the end.</p>

<pre><code>def quarters_dict():
    """Return a new dict of 'Qx':False for all quarter files Qx."""
    return {qf.stem:False for qf in quarter_files}


all_names = collections.defaultdict(quarters_dict)

for qfile in quarter_files:
    with open(this_q) as infile:
        names_this_q = {line.rstrip('\n') for line in infile}

    q_name = this_q.stem
    for name in names_this_q:
        all_names[name][q_name] = True


And now you have a table of name appearances. You can put `all_names` into a DataFrame and massage it however you like.
</code></pre>

<p><strong>Let Pandas do Pandas</strong></p>

<p>Pandas is great at dealing with tables of data of known, basic types. It supports indexing, lookup, boolean, and database type operations. Try to see how you could use that.</p>

<p>First, you are storing <code>Nan</code> and <code>'Y'</code> values in your columns: floating point and string data? The <code>Nan</code> means false and the <code>'Y'</code> means true. But there's already a True/False data type, and it is neither floating point nor string. Why not make your table a table of boolean values?</p>

<p>Second, you are treating your names as a column. But they are really the index! So why not make them the index? If you do so, you can use <code>name in df</code> and not have to maintain a separate Python <code>set</code> object.</p>

<p>Third, you are creating one-row dataframes to append values, and then resetting the index of your dataframe. You can just store to a new index!  <code>df[new_name] = new_info</code></p>

<p>Finally, the <code>df.to_html()</code> function takes a large number of parameters. Including formatting parameters that you can use to translate boolean values into <code>'X' or 'Y'</code>. </p>

<p>Use the features of pandas as they were intended, and your code will get simpler, shorter, and faster.</p>
    </div>