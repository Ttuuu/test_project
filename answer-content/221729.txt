<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Although your code seems to work, it is difficult to read. Loops inside loops and many <code>if</code>, <code>else if</code> blocks and <code>continue</code> or <code>return</code>. Let's start with some big issues:</p>

<p>You use an <em>endless while loop</em> when it is clear you don't have to. The code below would perform the same function:</p>

<pre><code>function searchThreeSameNum(arr1, arr2, arr3) {
    let i = 0, j = 0;
    while (i &lt; arr1.length &amp;&amp; j &lt; arr2.length) {
        if (arr1[i] &lt; arr2[j]) {
            i++;
            continue;
        } else if (arr1[i] &gt; arr2[j]) {
            j++;
            continue;
        } else if (arr1[i] == arr2[j]) {
            for (let k = 0; k &lt; arr3.length; k++) {
                if (arr1[i] == arr3[k]) return arr1[i];
            }   
        } 
    }
    return 'No equal numbers';
}
</code></pre>

<p>This has one less <code>return 'No equal numbers';</code> (<a href="https://en.wikipedia.org/wiki/Don%27t_repeat_yourself" rel="nofollow noreferrer">code repetition</a>) and only one <code>return</code> from within the while loop. </p>

<p>Now let's look at what the loop is actually doing. It runs through array 1 and 2 and tries to find equal pairs of values in them. If a pair is found it searches in the third array for the same value and returns it when it is found. </p>

<p>There is a handy array method called <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes" rel="nofollow noreferrer">includes()</a>. It could replace the whole looping of the third array, like this:</p>

<pre><code>function searchThreeSameNum(arr1, arr2, arr3) {
    let i = 0, j = 0;
    while (i &lt; arr1.length &amp;&amp; j &lt; arr2.length) {
        if (arr1[i] &lt; arr2[j]) {
            i++;
            continue;
        } else if (arr1[i] &gt; arr2[j]) {
            j++;
            continue;
        } else if (arr1[i] == arr2[j]) {
            if (arr3.includes(arr1[i])) return arr1[i];
        } 
    }
    return 'No equal numbers';
}
</code></pre>

<p>I could even go a step further and get rid of the while loop altogether by looping through array 1 and see if its values are contained in array 2 and 3, like this:</p>

<pre><code>function searchThreeSameNum2(arr1, arr2, arr3) {
    for (number of arr1) {
        if (arr2.includes(number) &amp;&amp; arr3.includes(number)) return number;
    }
    return 'No equal numbers';
}
</code></pre>

<p>Note that this simplification makes this function easy to read, but also less efficient. It has to checks array 2 and 3 completely, for every element of array 1, until a match is found.</p>

<p>The assumption, in the function above, is that array 1 is properly sorted. If it isn't you can <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort" rel="nofollow noreferrer">sort</a> it.</p>

<pre><code>function searchThreeSameNum2(arr1, arr2, arr3) {
    let sorted = arr1.sort((a, b) =&gt; a - b);
    for (number of sorted) {
        if (arr2.includes(number) &amp;&amp; arr3.includes(number)) return number;
    }
    return 'No equal numbers';
}
</code></pre>

<p>Arrays 2 and 3 don't need to be sorted.</p>

<p><strong>In summary</strong> </p>

<ol>
<li>If you use a while loop, always break the loop with a proper condition in the right place. Do not use endless loops.</li>
<li>Try not to use complex execution flow constructions, with lot of <code>else</code>, <code>continue</code> and <code>return</code>. They are difficult to read and to debug. </li>
<li>Use the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array" rel="nofollow noreferrer">build in array methods</a>, they are very handy, but don't overdo it.</li>
</ol>
    </div>