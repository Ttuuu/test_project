<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Inline isn't</h2>
<p>This pops up on CodeReview regularly. <code>inline</code> is effectively ignored by most modern compilers, and even if it weren't, it isn't a good idea to force the matter -- programmers do not know what's best for their program when compared to the compiler when full optimization is enabled. It's safe to omit this.</p>
<h2>Redundant initial values</h2>
<pre><code>uint8_t* m_Buffer = nullptr;
size_t m_BufferSize = 0;
</code></pre>
<p>These are initialized by your constructor, so there's no point in pre-initializing them here.</p>
<h2>Type punning</h2>
<p>This:</p>
<pre><code>*(value_t*)&amp;m_Buffer[byte_offset]
</code></pre>
<p>is a little gross. There are better ways to do inline pointer casts, particularly in C++. Here, since you're punning from <code>uint8_t*</code> to a pointer of arbitrary type, you'll probably want <code>reinterpret_cast</code>.</p>
<p>I guess <code>bit_size</code> should be 64 if you pass <code>uint64_t</code> for <code>value_t</code>, but I don't see why it's passed separately. You can move <code>bpb</code> up in scope; then <code>bit_size</code> would equal <code>bpb * sizeof(value_t)</code>. Perhaps you want to support <code>bit_size</code> smaller than the value type, which is fine; but you should at least assert that <code>bit_size</code> is less than or equal to the number of bits in <code>value_t</code>.</p>
<p>There are subtler risks in the way that you're packing bits - from what I can tell, it assumes little-endian, which will not be universally true.</p>
    </div>