<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your code is somewhat Pythonic, but could use some improvements.</p>

<p>You seem to be under the impression that you are exploring each island by performing a <a href="/questions/tagged/breadth-first-search" class="post-tag" title="show questions tagged 'breadth-first-search'" rel="tag">breadth-first-search</a> using a queue (named <code>q</code>).  Actually, you are performing a <a href="/questions/tagged/depth-first-search" class="post-tag" title="show questions tagged 'depth-first-search'" rel="tag">depth-first-search</a> using a stack.  (You can't <code>.pop()</code> a queue!)</p>

<p><code>for _,d in enumerate(dirs)</code> is a pointless use of <code>enumerate()</code>, and it should be written as <code>for d in dirs</code>.</p>

<p>If you name the bounds as <code>rlen</code> and <code>clen</code>, then I would prefer that you use <code>r</code> and <code>c</code> (instead of <code>i</code> and <code>j</code>) for your coordinates.</p>

<p>Your <code>add_dir()</code> function is a bit clumsy.  You return <code>(-1, -1)</code> if the result is out of bounds, which means that the caller also has to check whether the result is out of bounds.  What you want is a <code>neighbors(r, c)</code> function that lists all of the neighbor coordinates of (<em>r</em>, <em>c</em>) that are in bounds.  One Pythonic technique that you can use is to write it as a <a href="https://docs.python.org/3/tutorial/classes.html#generators" rel="nofollow noreferrer">generator</a>.  Another trick is to use <a href="https://docs.python.org/3/reference/expressions.html#comparisons" rel="nofollow noreferrer">chained comparisons</a> (e.g. <code>x &lt; y &lt;= z</code>).</p>

<p>It's a bit uncouth to initialize the elements of <code>visited</code> to <code>0</code>, then set some of them to <code>True</code>, mixing integers with booleans.</p>

<p>A more readable way to express the goal of the <code>max_area_of_island()</code> function would be:</p>

<pre><code>return max(island_size(r, c) for r, c in product(range(rlen), range(clen)))
</code></pre>

<p>â€¦ taking advantage of <a href="https://docs.python.org/3/library/itertools.html#itertools.product" rel="nofollow noreferrer"><code>itertools.product()</code></a> to avoid a nested loop.  I have therefore reorganized the code to provide an <code>island_size()</code> function to enable that.</p>



<pre><code>from itertools import product

def max_area_of_island(grid):
    rlen, clen = len(grid), len(grid[0])
    def neighbors(r, c):
        """
        Generate the neighbor coordinates of the given row and column that
        are within the bounds of the grid.
        """
        for dr, dc in [(-1, 0), (1, 0), (0, -1), (0, 1)]:
            if (0 &lt;= r + dr &lt; rlen) and (0 &lt;= c + dc &lt; clen):
                yield r + dr, c + dc

    visited = [[False] * clen for _ in range(rlen)]
    def island_size(r, c):
        """
        Find the area of the land connected to the given coordinate.
        Return 0 if the coordinate is water or if it has already been
        explored in a previous call to island_size().
        """
        if grid[r][c] == 0 or visited[r][c]:
            return 0
        area = 1
        stack = [(r, c)]
        visited[r][c] = True
        while stack:
            for r, c in neighbors(*stack.pop()):
                if grid[r][c] and not visited[r][c]:
                    stack.append((r, c))
                    visited[r][c] = True
                    area += 1
        return area

    return max(island_size(r, c) for r, c in product(range(rlen), range(clen)))
</code></pre>
    </div>