<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your code will accomplish the task of returning the Nth Fibonacci number and will do it quite fast.   But you are not getting the point of the video, how to do Memoization. </p>

<p>To improve your code:</p>

<ol>
<li><p>Defining your variables at the beginning of your function.  </p></li>
<li><p>Indent your if block and surround with { }</p>

<pre><code>fibonacci: function (n)  {
  var array = [1, 1]; // prevent variable  hoisting 
  var i = 2;          // defining var at start of function        
  if (n === 0 || n === 1) {
    return 1;  // indent if block and surround with {}
  }
  for (; i &lt; n; i++) {
    array.push(array[0] + array[1]);
    array.shift();
  }

  return array[0] + array[1];
}
</code></pre></li>
</ol>

<p>Memoization is more efficient by storing or memorizing past results to get faster future results the NEXT time you call the function.  If you call fibonacci(701) then fibonacci(700), you will calculate the results both times.  If  you memoize the function you will look up the result on the second call.  If you call fibonacci(702) you will look up the last two values to get the next result.</p>

<p>You have NO memoized values.  </p>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>function fibonacci (n, pastResults)
{
  var memo = pastResults || [1, 1]; //if no pastResults, set default value
  var i = memo.length;
  if (i &gt; n) { // we have result 
    console.log('looking up value')
    return {  //return 2 values
        pastResults: memo,
        result: memo[n-1]
    };  // return it
  }
  for (; i &lt; n; i++) {
    memo[i] = memo[i-1] + memo[i-2];
  }

  return {
    pastResults: memo,
    result: memo[n-1]
  };
}

var r = fibonacci(7)
console.log(r.result) //13
r = fibonacci(5, r.pastResults);  // looking up value
console.log(r.result) //5
console.log(r.pastResults) //[1, 1, 2, 3, 5, 8, 13], these will not be recalcuated
r = fibonacci(22, r.pastResults);  
console.log(r.result) //17711</code></pre>
</div>
</div>


<p><a href="https://stackoverflow.com/questions/3798858/explanation-on-javascript-the-good-parts-example-section-4-15">Here</a> is a more eloquent, but harder to understand solution.  </p>

<p>Note, in my 13+ years of JavaScript development, I've never used Memoization in production code.  </p>

<p>References:</p>

<p>...coming soon</p>

<p>...Bock scope vs Function scope reference soon</p>

<p><a href="https://github.com/dwyl/Javascript-the-Good-Parts-notes#memoization" rel="nofollow noreferrer">https://github.com/dwyl/Javascript-the-Good-Parts-notes#memoization</a></p>
    </div>