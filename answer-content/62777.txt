<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Answers to Quesitions</h3>
<blockquote>
<p>I use inline functions because I heard that the C++ compiler, while smart, will not be able to inline everything that I want to be inlined automatically, even if I give hints.</p>
</blockquote>
<p>The inline keyword is not used by any modern compiler to decide weather to do inlining. The compiler is much smarter than you on deciding when to use and when not to do it anyway. It is required where you use (in a header file when not part of the class).</p>
<blockquote>
<p>I use commenting style that takes a lot of extra space. For me personally, it aids me in reading and documenting my code step by step.</p>
</blockquote>
<p>Its a bit much. I don't mind the comments that telly you what the function does. But things that are obvious you should leave out (like: <code>Default Constructor</code>, <code>Component Constructor</code> and <code>Copy Constructor</code> seem superfluous).</p>
<p>Also commenting stuff that should be obvious.</p>
<pre><code>// Equal To Operator
//------------------------------------------------------------------
// Compares the x, y and z components of Vector v1 and to the x, y 
// and z components of Vector v2 and returns true if they are 
// identical. Otherwise, it returns false.
//------------------------------------------------------------------
friend bool operator == (const Vector &amp;v1, const Vector &amp;v2);
</code></pre>
<p>I would only have written that comment of <code>operator==</code> did something that was not obvious. If it does what you expect then there seems little point in writing it down.</p>
<blockquote>
<p>I heard use of 'friend' operator is discouraged, but I seem to like using it. It allows me to code functions that, while could work as methods (e.g. vector.CrossProduct(otherVector)) sound better as functions CrossProduct(vector1, vector2) in my opinion.</p>
</blockquote>
<p>I like the <code>friend</code> operator. I think it adds clarity and decreases coupling.<br>
<a href="https://softwareengineering.stackexchange.com/a/99595/12917">https://softwareengineering.stackexchange.com/a/99595/12917</a> . You have more than I would normally see. But in this case I have no issues with them.</p>
<p>But you have to be careful. The way you have written things will tend to hide errors in certain situations. Currently you are OK because you don't have a single argument constructor. But what happens if sombody added one (in a few years they wanted a convenient way of creating a simple Vector along the X-access.</p>
<pre><code> // Sombody adds.
 Vector::Vector(float x) : x(x), y(0), z(0) {}

 // Now this code
 Vector   x(4,5,6);

 if (x == 3) // Here you get an automatic conversion. (Not that unexpected)
 {}

 if (3 == x) // Here is also an automatic conversion. (Can be unexpected).
             // But if the operator had been a member rather than a friend
             // then this would not have been an automatic conversion and
             // generated a compiler error.
</code></pre>
<p>I am not saying it is bad or good but you need to watch for that kind of thing and see if that is what you expect your objects to work.</p>
<blockquote>
<p>I don't comment the implementation code. It seems too trivial to comment, I wonder if you think this is the case too?</p>
</blockquote>
<p>I agree. If I can read the code and see what is happening no comments are needed. If you are implementing a specific algorithm provide a link to the algorithm etc..</p>
<h3>Code review.</h3>
<p>The others have covered most of the points I would have:</p>
<pre><code>#ifndef __VECTOR_H__
</code></pre>
<p>I want to emphasis this one (it happens a lot with beginners). Double underscore is reserved <em>anywhere</em> in an identifier never use it. Underscore at the beginning of an identifier is reserved in certain contexts (the rules are complex). So best to never use an identifier that begins with an underscore (most people get it wrong if they try).</p>
<p>The name <code>Vector</code> is already being used (though the capitalization is different). To make sure people spot the difference I would make sure you put this in your own namespace;</p>
<pre><code> namespace ThreeDimension
 {
     class Vector{};
 }
 int main()
 {
      namespace TD = ThreeDimension;
      TD::Vector  data;
 }
</code></pre>
    </div>