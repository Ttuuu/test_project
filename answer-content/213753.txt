<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Honestly there's not much code to comment on, it's also a programming challenge, so there's not much incentive to make it any better than it is. I too would have done it your way.</p>

<p>The only objective criticism I have is I'd just add a function <code>regex_options</code> to build the non-capturing group.</p>

<p>Other than that I'd apply this to the creation of <code>g</code>, <code>o</code>, <code>l</code> and <code>e</code>. As I think it's a little cleaner. But you may want to perform it before <code>"".join</code>, and after <code>regex = (g, o, o, g, l, e)</code>.</p>

<pre><code>import re


def regex_options(options):
    options = (re.escape(o) for o in options)
    return "(?:{})".format("|".join(options))


g = regex_options(["g", "G"])
o = regex_options(["o", "O", "0", "()", "[]", "&lt;&gt;"])
l = regex_options(["l", "L", "I"])
e = regex_options(["e", "E", "3"])

regex = "^{}$".format("".join((g, o, o, g, l, e)))

print(bool(re.match(regex, input())))
</code></pre>

<p>If this were professional code, I'd suggest using an <code>if __name__ == '__main__':</code> block, and possibly a <code>main</code> function.</p>
    </div>