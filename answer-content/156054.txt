<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here are some things that may help you improve your code.</p>

<h2>Don't abuse <code>using namespace std</code></h2>

<p>Putting <code>using namespace std</code> within your program is generally <a href="https://stackoverflow.com/questions/1452721/why-is-using-namespace-std-considered-bad-practice">a bad habit</a> that you'd do well to avoid.  </p>

<h2>Use the appropriate <code>#include</code>s</h2>

<p>In order to compile and link, this code requires the following lines:</p>

<pre><code>#include &lt;cmath&gt;
#include &lt;vector&gt;
#include &lt;string&gt;
</code></pre>

<p>For the program to be complete, these should be listed, too.</p>

<h2>Fix the bug</h2>

<p>OK, technically speaking, it's not actually a bug, but it's a useless statement and confusing to human readers.  In particular, I'm referring to this line:</p>

<pre><code>for (queens_to_add; queens_to_add &lt;= min(queens_left, (uint16_t)2); queens_to_add ++) {
</code></pre>

<p>The first clause <code>queens_to_add</code> doesn't actually do anything.  It caused me to wonder if it was intended to say <code>queens_to_add=0</code> or something like that, but on deeper inspection, the value has already been set.  I'd recommend leaving that clause empty instead.</p>

<h2>Omit unused variables</h2>

<p>Because <code>argc</code> and <code>argv</code> are unused, you could use the alternative form of <code>main</code>:</p>

<pre><code>int main ()
</code></pre>

<h2>Don't use <code>std::endl</code> if you don't really need it</h2>

<p>The difference betweeen <code>std::endl</code> and <code>'\n'</code> is that <code>'\n'</code> just emits a newline character, while <code>std::endl</code> actually flushes the stream.  This can be time-consuming in a program with a lot of I/O and is rarely actually needed.  It's best to <em>only</em> use <code>std::endl</code> when you have some good reason to flush the stream and it's not very often needed for simple programs such as this one.  Avoiding the habit of using <code>std::endl</code> when <code>'\n'</code> will do will pay dividends in the future as you write more complex programs with more I/O and where performance needs to be maximized.</p>

<h2>Don't use leading underscores in names</h2>

<p>Anything with a leading underscore is a <em>reserved name</em> in C++ (and in C).  See <a href="https://stackoverflow.com/questions/228783/what-are-the-rules-about-using-an-underscore-in-a-c-identifier">this question</a> for details.</p>

<h2>Prefer references to raw pointers</h2>

<p>In a number of places within the code, parameters are passed as raw pointers such as </p>

<pre><code>void print_board(std::vector&lt;queen_t&gt; *board);
</code></pre>

<p>What you really want is a reference.  The difference is that a reference cannot be <code>nullptr</code> and must actually point to an object, which is exactly the guarantee your code relies on anyway.</p>

<h2>Use appropriate C++ idioms</h2>

<p>The last line of <code>main</code> looks like this:</p>

<pre><code>print_board(&amp;(*_boards.begin()));
</code></pre>

<p>Instead of doing funny stuff like that with an iterator, why not just use <code>front()</code>?  Combined with the suggestion above (to pass references), that would change that line instead to this:</p>

<pre><code>print_board(_boards.front());
</code></pre>

<h2>Use <code>const</code> where practical</h2>

<p>In your <code>print_board()</code> routine, the passed board is never altered, which is just as it should be.  You should indicate that fact by declaring it like this:</p>

<pre><code>void print_board(const std::vector&lt;queen_t&gt; &amp;board);
</code></pre>

<p>Note that this also incorporates the above two suggestions.</p>

<h2>Prefer <code>const</code> or <code>constexpr</code> variables to <code>#define</code></h2>

<p>The <code>BOARD_SIZE</code> value should be declared as </p>

<pre><code>constexpr std::size_t BOARD_SIZE{8};
</code></pre>

<p>The difference is that when constants are declared this way, they have a bit of additional type safety.</p>

<h2>Eliminate global variables where possible</h2>

<p>The <code>_boards</code> variable is global but should really be in <code>main</code>.  If you move it to main, you can simply add an additional reference argument to <code>recurse</code> and to <code>validate_and_continue</code>.</p>

<h2>Create a C++ object</h2>

<p>Rather than passing the <code>board</code> vector around, it would seem to make more sense to me to have it be an actual object with most of the functions being member functions of that class.  Itwould not only encapsulate the data and algorithms more neatly, but it would also make the code easier for humans to read and understand.</p>

<h2>Use better naming</h2>

<p>The <code>can_attack()</code> function is well named because it's easy to guess (correctly) what it does in this context.  The <code>recurse</code> function, however, doesn't really say anything useful about what the function's purpose is; just a hint as to how it might function.  A user of the function won't necessarily care what's inside, so the name should be more descriptive.</p>

<h2>Return something useful from functions</h2>

<p>Instead of <code>void</code>, why not return the recursion depth from <code>recurse</code> and pass the current depth as a parameter?  That way you could eliminate another global variable.</p>

<h2>Improving the algorithm</h2>

<p>Reflections and translations of any given solution are also solutions.  One could easily incorporate the generation of those within the program and eliminate some of the recursions.</p>
    </div>