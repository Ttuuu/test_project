<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Some other observations, in addition to <a href="https://codereview.stackexchange.com/a/237887/188857">Toby Speight's answer</a>:</p>

<ul>
<li><p>Sort your includes.</p></li>
<li><p><code>#define NUM 1048576*2</code> should be <code>constexpr std::size_t num = 1048576*2</code> (or 2097152) instead.</p></li>
<li><p>This loop:</p>

<pre><code>std::vector&lt;int&gt; tobesorted;
for(int i = 0; i &lt; NUM; i++){
    tobesorted.push_back(rand());
}
</code></pre>

<p>can be simplified: (requires <code>&lt;algorithm&gt;</code>)</p>

<pre><code>std::vector&lt;int&gt; numbers(num);
std::generate_n(numbers.begin(), num, []{ return std::rand(); });
</code></pre>

<p>or, better, with <code>&lt;random&gt;</code> and a separate function: (requires <code>&lt;algorithm&gt;</code> and <code>&lt;random&gt;</code>)</p>

<pre><code>std::vector&lt;int&gt; generate()
{
    static std::mt19937_64 engine{std::time(nullptr)};
    std::uniform_int_distribution&lt;int&gt; dist{}; // [0, INT_MAX] by default

    std::vector&lt;int&gt; result(num);
    std::generate(result.begin(), result.end(), [&amp;]{ return dist(engine); });
    return result;
}

// in main()
auto numbers = generate(); // guaranteed copy elision
</code></pre></li>
<li><p>This loop:</p>

<pre><code>for(int i = 0; i &lt; NUM; i++){
    std::cout &lt;&lt; tobesorted[i] &lt;&lt; ", ";
}
</code></pre>

<p>can be replaced with (requires <code>&lt;algorithm&gt;</code> and <code>&lt;iterator&gt;</code>)</p>

<pre><code>std::copy(numbers.begin(), numbers.end(),
          std::ostream_iterator&lt;int&gt;{std::cout, ", "});
</code></pre></li>
<li><p>Avoid <code>std::endl</code> unless the flushing semantics is necessary.  See <a href="https://stackoverflow.com/q/213907/9716597"><code>std::endl</code> vs <code>\n</code></a> for more information.</p></li>
<li><p>Use <code>[begin, end)</code> (including begin, excluding end) style instead of <code>[begin, end]</code> (including both begin and end) in order to eliminate the <code>+1</code> / <code>-1</code>.  Rewrite <code>0.25*size</code> as <code>size / 4</code>, <code>0.5*size</code> as <code>size / 2</code>, and <code>0.75*size</code> as <code>size / 4 * 3</code>.</p></li>
<li><p>Instead of using <code>std::thread</code> directly, consider the more high-level <code>std::async</code> and <code>std::future</code>:</p>

<pre><code>constexpr std::size_t thread_num = 4;
auto chunk_size = vec.size() / thread_num;

std::vector&lt;std::future&lt;void&gt;&gt; tasks;
tasks.reserve(thread_num);
for (std::size_t i = 0; i &lt; thread_num; ++i) {
    tasks.push_back(std::async(std::launch::async,
        [](auto first, auto last) { std::sort(first, last); },
        vec.begin() + chunk_size * i,
        vec.begin() + chunk_size * (i + 1)
    ));
}
for (auto&amp; task : tasks) {
    task.get();
}
// similarly for merging
</code></pre></li>
</ul>
    </div>