<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here are some things that may help you improve your program.</p>

<h2>Use only required <code>#include</code>s</h2>

<p>The code uses nothing from <code>&lt;stdlib.h&gt;</code>, so that header can and should be omitted.  Only include files that are actually needed.  This makes the code easier to understand and maintain and also may slightly speed up compiling.</p>

<h2>Try to write portable code</h2>

<p>Things that are guaranteed by the C standard are absolutely portable to conforming compilers on all platforms.  Things that are specified by POSIX standards are portable to the subset of machines that conform to POSIX.  Your life will be easier if you aim for those.  Things that are compiler extensions, such as <code>error</code> are not necessarily portable to other machines.  For that reason, I'd suggest that instead of using <code>error</code> in this program (which is a GNU extension), you could use <code>printf</code> and <code>return</code> or <code>exit</code>.  For example, instead of this:</p>

<pre><code>if (argc != 2)
    error(1, errno, "Too many or few arguments\n");
</code></pre>

<p>Write this:</p>

<pre><code>if (argc != 2) {
    printf("Incorrect number of arguments.\n"
            "Usage: %s node\n"
            "where node is the IPv4 address of a machine to be scanned.\n", argv[0]);
    return 1;
}
</code></pre>

<h2>Think about the user</h2>

<p>In the code above giving the user an error message saying "Too many or few arguments" is likely to be a frustrating experience for the user.  You say what's wrong from the <em>program's</em> point of view, but don't say what to do differently from the <em>user's</em> point of view.  The suggested text above does both.</p>

<h2>Use standard library functions</h2>

<p>The <code>convert_int_to_string</code> has a bug (it returns a null string if the passed number is zero) and isn't really needed anyway.  You could either use <code>snprintf</code> or write a function to increment a text version of the port.</p>

<h2>Understand library calls</h2>

<p>The <code>getaddrinfo</code> call returns a linked list in <code>serviceinfo</code> but this program never frees that memory.  You should instead call <code>freeaddrinfo(serviceinfo);</code> and both should be <em>outside</em> the loop.  You may also consider trying each of the items in that linked list; it's common, for instance that <code>localhost</code> resolves to both <code>::1</code> and <code>127.0.0.1</code> and also common for ports to be open on only IPv6 or only IPv4.</p>

<h2>Don't use up resources</h2>

<p>The number of simultaneously open file handles is typically set per system.  If you're running Linux, you can use the <code>ulimit -n</code> command to find out how many are available on your system.  A typical value is 1024, but remember that <code>stdin</code>, <code>stdout</code> and <code>stderr</code> are 3 of those.  Any other open files also subtract from that.  This means that it's easy to run out of them unless you close handles as soon as you are finished with them.  In this case, it means that every call to <code>socket</code> must be paired with a corresponding <code>close(sock_fd);</code> or you are likely to run out of handles.  Generally: free memory you allocate and close file descriptors you open.</p>

<h2>Don't forget about IPv6</h2>

<p>There doesn't seem to be a good reason to restrict this code to IPv4 only when it could work just as well with IPv6.  To accommodate either, simply delete the line that sets <code>hints.ai_family</code>.</p>

<h2>Understand real world consequences</h2>

<p>Running a port scan should only be done on computers that are yours or on computers for which you have permission to do so.  Smart security professionals get such permission <em>in writing</em> before commencing.  See <a href="https://www.sans.org/reading-room/whitepapers/legal/ethics-legality-port-scanning-71" rel="nofollow noreferrer">this SANS whitepaper</a> for more information on this topic.</p>

<h2>An example</h2>

<p>One way to apply these suggestions could look like this:</p>

<pre><code>int main(int argc, char **argv)
{
    if (argc != 2) {
        printf("Incorrect number of arguments.\n"
                "Usage: %s node\n"
                "where node is the IP address of a machine to be scanned.\n", argv[0]);
        return 1;
    }
    static struct addrinfo hints = { .ai_socktype = SOCK_STREAM };
    struct addrinfo *serviceinfo;
    if (getaddrinfo(argv[1], NULL, &amp;hints, &amp;serviceinfo) != 0) {
        puts("error in getaddrinfo() function call");
        return 1;
    }
    for (struct addrinfo* svc = serviceinfo; svc; svc = svc-&gt;ai_next) {
        for (unsigned port_no = 0; port_no &lt; 1024; port_no++) {
            int sock_fd = socket(svc-&gt;ai_family, svc-&gt;ai_socktype, svc-&gt;ai_protocol);
            if (sock_fd == -1) {
                puts("error in socket() function call");
                freeaddrinfo(serviceinfo);
                return 1;
            }
            if (svc-&gt;ai_family == AF_INET) {
                ((struct sockaddr_in *)(svc-&gt;ai_addr))-&gt;sin_port = htons(port_no);
            } else if (svc-&gt;ai_family == AF_INET6) {
                ((struct sockaddr_in6 *)(svc-&gt;ai_addr))-&gt;sin6_port = htons(port_no);
            }
            if (connect(sock_fd, svc-&gt;ai_addr, svc-&gt;ai_addrlen) != -1) {
                printService(svc);
                printf("Port %u is open\n", port_no);
            }
            close(sock_fd);
        }
    }
    freeaddrinfo(serviceinfo);
}
</code></pre>
    </div>