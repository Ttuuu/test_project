<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I've made the classes more idiomatic for C# by using properties, recommended capitalization and an <code>enum</code> (as opposed to a <code>bool</code> for red-ness and black-ness). It also allowed for removal of extraneous code such as <code>else</code>-blocks that follow <code>break</code>s or <code>return</code>s and simplification of to the ternary operator. </p>

<pre><code>namespace RedBlackTree
{
    internal enum RedBlackIndicator
    {
        Red,

        Black
    }

    // From Wiki:
    // The performance of an AA tree is equivalent to the performance of a red-black tree.
    // While an AA tree makes more rotations than a red-black tree, the simpler algorithms tend to be faster, and all of this balances out to result in similar performance.
    // A red-black tree is more consistent in its performance than an AA tree, but an AA tree tends to be flatter, which results in slightly faster search times.
    internal class RedBlackTree
    {
        private rbtNode root;

        public int Count { get; private set; }

        ////public bool Contains(PNode Key)
        ////{
        ////    Node current = root;
        ////    while (current != null)
        ////    {
        ////        if (current.Key == Key)
        ////        {
        ////            return true;
        ////        }
        ////        else if (value &lt; current.value)
        ////        {
        ////            current = current.left;
        ////        }
        ////        else
        ////        {
        ////            current = current.right;
        ////        }
        ////    }
        ////    return false;
        ////}

        #region Insert Methods

        public void Insert(Node value)
        {
            var n = new rbtNode(value);

            if (this.root == null)
            {
                this.root = n;
            }
            else
            {
                var current = this.root;

                while (true)
                {
                    if (current.F == value.F)
                    {
                        return;
                    }

                    if (value.F &lt; current.F)
                    {
                        if (n.Left == null)
                        {
                            current.Left = n;
                            break;
                        }

                        current = current.Left;
                    }
                    else if (value.F &gt; current.F)
                    {
                        if (current.Right == null)
                        {
                            current.Right = n;
                            break;
                        }

                        current = current.Right;
                    }
                }

                n.Parent = current;
            }

            this.Count++;
            this.InsertCase1(n);
        }

        private static rbtNode Uncle(rbtNode node)
        {
            return node.Parent == null ? null : Sibling(node.Parent);
        }

        private static rbtNode Sibling(rbtNode node)
        {
            return node.Parent == null ? null : (node == node.Parent.Left ? node.Parent.Left : node.Parent.Right);
        }

        private static rbtNode Grandparent(rbtNode n)
        {
            return n == null || n.Parent == null ? null : n.Parent.Parent;
        }

        // Root node test, make it black
        private void InsertCase1(rbtNode node)
        {
            if (node.Parent == null)
            {
                node.Colour = RedBlackIndicator.Black;
            }
            else
            {
                this.InsertCase2(node);
            }
        }

        // Node has black parent == No problems!
        private void InsertCase2(rbtNode node)
        {
            if (node.Parent.Colour != RedBlackIndicator.Red)
            {
                this.InsertCase3(node);
            }
        }

        // If Uncle is red, there is a certain error since we are red and parent is red
        // Make g red, and u and p black. No more error. Red grandparent needs to be checked though
        // If uncle isn't red and parent IS red then the fix is different, and we move to case 4
        private void InsertCase3(rbtNode node)
        {
            if (Uncle(node).Colour == RedBlackIndicator.Red)
            {
                node.Parent.Colour = RedBlackIndicator.Black;
                Uncle(node).Colour = RedBlackIndicator.Black;
                Grandparent(node).Colour = RedBlackIndicator.Red;
                this.InsertCase1(Grandparent(node));
            }
            else
            {
                this.InsertCase4(node);
            }
        }

        // This case tests if the tree is in one of 2 forms which
        // need to be converted to other forms before they can be
        // fixed in case 5 (conversion is by rotation, left or right)
        // These are: 
        //      n = left child of right child
        //      n = right child of left child
        // Any forms not covered in case 4 are already fine for processing by case 5.
        // e.g.
        //      n = left child of left child
        //      n = right child of right child
        private void InsertCase4(rbtNode node)
        {
            if (node == node.Parent.Right &amp;&amp; node.Parent == Grandparent(node).Left)
            {
                this.RotateLeft(node.Parent);
                node = node.Left;
            }
            else if (node == node.Parent.Left &amp;&amp; node.Parent == Grandparent(node).Right)
            {
                this.RotateRight(node.Parent);
                node = node.Right;
            }

            this.InsertCase5(node);
        }

        private void InsertCase5(rbtNode node)
        {
            node.Parent.Colour = RedBlackIndicator.Black;
            Grandparent(node).Colour = RedBlackIndicator.Red;
            if (node == node.Parent.Left &amp;&amp; node.Parent == Grandparent(node).Left)
            {
                this.RotateRight(Grandparent(node));
            }
            else if (node == node.Parent.Right &amp;&amp; node.Parent == Grandparent(node).Right)
            {
                this.RotateLeft(Grandparent(node));
            }
        }

        #endregion

        private void RotateRight(rbtNode node)
        {
            var temp = node.Left;

            this.ReplaceNode(node, temp);
            node.Left = temp.Right;
            if (temp.Right != null)
            {
                temp.Right.Parent = node;
            }

            temp.Right = node;
            node.Parent = temp;
        }

        private void RotateLeft(rbtNode node)
        {
            var temp = node.Right;

            this.ReplaceNode(node, temp);
            node.Right = temp.Left;
            if (temp.Left != null)
            {
                temp.Left.Parent = node;
            }

            temp.Left = node;
            node.Parent = temp;
        }

        private void ReplaceNode(rbtNode oldNode, rbtNode newNode)
        {
            // This function does a lot of the hard work when swapping nodes. Reassigns parents and children.
            if (oldNode.Parent == null)
            {
                this.root = newNode;
            }
            else
            {
                if (oldNode == oldNode.Parent.Left)
                {
                    oldNode.Parent.Left = newNode;
                }
                else
                {
                    oldNode.Parent.Right = newNode;
                }
            }

            if (newNode != null)
            {
                newNode.Parent = oldNode.Parent;
            }
        }

        private sealed class rbtNode
        {
            private readonly int key;

            private readonly int f;

            internal rbtNode(Node node)
            {
                this.key = node.Key;
                this.f = node.F;
                this.Colour = RedBlackIndicator.Red;
            }

            public int Key
            {
                get
                {
                    return this.key;
                }
            }

            public int F
            {
                get
                {
                    return this.f;
                }
            }

            internal RedBlackIndicator Colour { get; set; }

            internal rbtNode Parent { get; set; }

            internal rbtNode Left { get; set; }

            internal rbtNode Right { get; set; }
        }
    }
}
</code></pre>
    </div>