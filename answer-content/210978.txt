<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Interestingly enough we just had <a href="//codereview.stackexchange.com/q/210970">another question</a> where there was a large user class doing a lot. It was correctly pointed out that is not a good thing as it violates the <a href="https://en.wikipedia.org/wiki/Single_responsibility_principle" rel="nofollow noreferrer">Single Responsibility Principle</a>. To summarize it, a class should have one and only one responsibility. If your user class is handling the user properties, login, and other actions it is doing too much.</p>

<p>You should familiarize yourself with <a href="http://php-di.org/doc/understanding-di.html" rel="nofollow noreferrer">Dependency Injection</a>. In your constructor you instantiate a database class and then use it to get your database abstraction object. Now you cannot unit test this class because you cannot mock that object. (You can still do an integration test, though). "Dependency injection allows a client to remove all knowledge of a concrete implementation that it needs to use. This helps isolate the client from the impact of design changes and defects. It promotes reusability, testability and maintainability". (<a href="https://en.wikipedia.org/wiki/Dependency_injection" rel="nofollow noreferrer">source</a>) In other words, your user class has a dependency on the Database class and is at risk if backwards incompatible changes are made to it.</p>

<p>A high level explanation of what you would want to do here to improve this is:</p>

<ol>
<li>Create an <a href="http://php.net/manual/en/language.oop5.interfaces.php" rel="nofollow noreferrer">interface</a> that your database implements. This will enforce that any database objects in your code will adhere to the same contract (assuming they all implemnt this interface).</li>
<li>Instantiate the database object in the client code (the code that calls the user class).</li>
<li>Pass it as a parameter to your constructor and then assign it to your User::db property. Make sure you type hint that parameter using the name of the interface you created in step 1 so if a different database object is created and used it will have to adhere to the same contract or else your code will blow up (in testing before it ever goes live).</li>
</ol>

<p>Here's some simple code to get you started:</p>

<h3>The Database Interface</h3>

<p><em>This is just a stub. You will need to complete it.</em></p>

<pre><code>interface iDatabase
{
    public function row($sql);
    public function customer_connect($host, $dbName);
}
</code></pre>

<h3>Implement the interface</h3>

<pre><code>class Database implements iDatabase
</code></pre>

<h3>Make your database object a parameter of your contstructor</h3>

<pre><code>// Put optional parameters after required parameters
public function __construct(iDatabase $db, $system_user = NULL)
</code></pre>

<h3>Instantiate your class passing the database object as a parameter</h3>

<pre><code>$db = Database::getInstance();
$this-&gt;user = new User($db);
</code></pre>

<p>You would follow the same example above for any other logic that you pull out of your user class and into its own object. Now your User class does only one thing and does it well and it testable.    </p>

<h3>Some little stuff</h3>

<p><strong>Put a line between your <code>namespace</code> and <code>use</code> statements</strong></p>

<p><a href="https://www.php-fig.org/psr/psr-2/" rel="nofollow noreferrer">PSR-2 coding standards</a> say there should be a line between the <code>namespace</code> declaration and your <code>use</code> statements. </p>

<pre><code>namespace MyApp\Models;

use \Exception;
</code></pre>

<p><strong>Class names should be camel case</strong></p>

<p>The <a href="https://www.php-fig.org/psr/psr-1/" rel="nofollow noreferrer">PSR-1 standards say class names should be camel case</a> and should not use underscores:</p>

<pre><code>class SystemUser
</code></pre>

<p><strong>The PHP community prefers <code>//</code> to <code>#</code> for comments</strong></p>

<p>Although <code>#</code> is a valid syntax for a one line comment in PHP, it is common practice to use <code>//</code>. This came out as a result of the <a href="https://pear.php.net/manual/en/standards.comments.php" rel="nofollow noreferrer">PEAR coding standards</a>.</p>

<p><strong>No need to point out your class' "variables"</strong></p>

<p>Besides the fact that they aren't technically variables but "class members", convention says they go at the top of the class so it is already clear what they are. No need to add unnecessary comments pointing out the obvious. Save your comments for anything that might be ambiguous or needs explanation because it isn't clear from reading the code.</p>

<p><strong>Don't mix coding styles</strong></p>

<p>Your class properties you use both underscores and camel case in your names. Use one or the other but not both.</p>
    </div>