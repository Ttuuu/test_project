<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Initial Comments</h2>
<p><a href="https://codereview.stackexchange.com/users/130137/marc-rohloff">@MarkRohloff</a>'s <a href="https://codereview.stackexchange.com/questions/204467/validate-email-as-user-is-typing-javascript#comment394357_204467">comment</a> is good:</p>
<blockquote>
<p>My recommendation would be to set the <code>&lt;input&gt;</code> elements type to <code>email</code> and let the browser worry about the validation.</p>
</blockquote>
<p>Furthermore, while you stated "<em>A valid email is defined as follows: <code>^[a-z0-9]*[@][a-z]*[.][a-z]{1,3}$</code></em>", I am reminded of <a href="https://stackoverflow.com/a/611784/1575353">this SO answer for a regex for validating email addresses</a>, which also reminds me of <a href="https://stackoverflow.com/a/1732454/1575353">the great answer about parsing HTML with regular expressions</a>.</p>
<h2>Code Review</h2>
<p>Let's look at the function <code>valideEmail()</code>. This function has a lot of coupling - with the view (i.e. input elements, output elements). If something needs to be updated in the HTML, then this function may need to be updated as well. A less-coupled approach might be to accept a single value and return a boolean value. That way the controlling code can pass the value (e.g. from the HTML view, or test code could pass test values) and then use the result accordingly (e.g. display a message in the view, or for test code it might compare the result with expected results).</p>
<p>Also, <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes" rel="nofollow noreferrer"><code>String.prototype.includes()</code></a> (used in <code> value.includes('.')</code> in some of those conditional statements) appears to be a feature of EcmaScript-2015 A.K.A. es-6. Thus you could use other es-6 features, like <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith" rel="nofollow noreferrer"><code>String.prototype.endsWith()</code></a> instead of <code>value[value.length - 1]</code>, as well as arrow functions.</p>
<p>Additionally, DOM lookups (e.g. <code>$('#emailInput')</code>, <code>$('#emailDisplay')</code>) are not cheap, so it is wise to store those in a variable (and use <code>const</code> since you are using es-6 code), and utilize the variables whenever needed later.</p>
    </div>