<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Adding to @Reinderien's review, here are a few more points:</p>

<h1>Testing</h1>

<ul>
<li><p>The test code has some repeated statements for every function. It would be better to put that into a <code>for</code> loop like this:</p>

<pre><code>sorting_algorithms = [
   ("Selection Sort", selection_sort),
   ...
   # Wrap shell_sort into a lambda to make it a single-argument function for testing
   ("Shell Sort", lambda s: shell_sort(s, 5))
]

for description, func in sorting_algorithms:
    ...
    print(f"{description} (Integer): {func(TEST_LIST_INTEGER.copy())}")
    ...
</code></pre></li>
<li><p>Since callers of sorting functions are normally expected to supply only the list to be sorted, it would be better to make all other arguments optional:</p>

<pre><code>def shell_sort(input_list: List[T], sublist_increment: int = 5) -&gt; List[T]:
</code></pre>

<p>This sets a default value for the <code>sublist_increment</code> argument. With this change, the lambda wrapper for <code>shell_sort</code> in the code above is no longer needed (it is still needed if you want to test calling the function with non-default arguments).</p></li>
<li><p><code>random.sample</code> performs sampling without replacement. So every input occurs only once and there are no duplicates in the output list. This is undesired for testing purpose since the functions are expected to work with duplicated elements. <code>random.choice</code> should be used instead.</p></li>
<li><p>It is a bit unusual to use two modules <code>scipy.stats</code> and <code>random</code> for the same task -- generating random numbers. The former is more powerful but in this case either of them is sufficient.</p></li>
</ul>

<h1>Coding style</h1>

<ul>
<li><p>Since you have defined the function <code>_swap_elements</code>, it would be better to use it everywhere when the functionality is needed. The <code>selection_sort</code> function has not used it yet.</p></li>
<li><p>The function <code>_swap_elements</code> does not need to know what the input indices mean for the caller. The function would work as long as the indices are valid. Therefore in this declaration</p>

<pre><code>def _swap_elements(input_list: List[T], current_index: int, next_index: int)
</code></pre>

<p>the argument names <code>current_index</code> and <code>next_index</code> can be changed to more general names such as <code>index1</code> and <code>index2</code>.</p></li>
<li><p>There are some overly long lines. Although it may not always be necessary to conform to the 79-char limit recommended by PEP 8, it would also be better not to make the lines too long. Long comments can be written on multiple lines. Statements like this</p>

<pre><code>print(f"The unsorted integer input list is:\n{TEST_LIST_INTEGER}\n-----------------------------------\n")
</code></pre>

<p>can be written as this</p>

<pre><code>print("The unsorted integer input list is:",
      TEST_LIST_INTEGER,
      "-----------------------------------\n", sep='\n')
</code></pre>

<p>or this (Python automatically joins adjacent string literals with no separators)</p>

<pre><code>print("The unsorted integer input list is:\n"
      f"{TEST_LIST_INTEGER}\n"
      "-----------------------------------\n")
</code></pre>

<p>The shorter-line versions are also a bit more clear since each line of code corresponds to a line in the actual output.</p></li>
</ul>
    </div>