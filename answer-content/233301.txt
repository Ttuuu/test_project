<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3><em>Restructuring and corrections</em></h3>

<p>Let's start with <code>first_picture</code> function issues.<br>
I'd renamed it at least to <strong><code>get_first_picture</code></strong>. <br></p>

<p><code>BeautifulSoup.find_all</code> allows using regular expression to find images tags with <code>src</code> attribute that meets some condition. Thus the condition:</p>

<pre><code>sourcelist = []
...
    if "camo" in image["src"]:
        ...
</code></pre>

<p>can be eliminated and images are filtered by <strong><code>images = soup.find_all("img", src=re.compile(r'.*camo.*'))</code></strong>.</p>

<p>The <code>except</code> block:</p>

<pre><code>except IOError:
    first_picture()
</code></pre>

<p>doesn't provide any <em>"exit"</em> condition. When the control flow will get into this <code>except</code> block and call the current function <code>first_picture()</code> again - that doesn't mean that all subsequent statements below (from previous context) won't be executed.<br>You would need to either enclose all statements after that block into <strong><code>else:</code></strong> block to make them execute on successful image opening or put <strong><code>return</code></strong> statement right below <code>first_picture()</code> call. </p>

<p><strong>But</strong> instead, what should be noticed beforehand is that both <code>get_first_picture</code> and <code>change_desktop</code> functions share the same common behavior that covers the following set of actions:</p>

<ul>
<li>extracting image from remote resource</li>
<li>saving image</li>
<li>setting desktop background in separate <code>subprocess</code></li>
</ul>

<p>The time delay is also has a common amount - <code>40</code> (In your <code>set_display_and_start_browser</code> function <code>time.sleep(20)</code> + <code>time.sleep(20)</code>, are indirectly added).<br><br>
That definitely calls for <strong><em>Extract function</em></strong> technique - the common/repeated behavior is extracted into a separate function, say <strong><code>set_desktop_background</code></strong>:</p>

<pre><code>def set_desktop_background(image_source):
    """Tap into the dynamic webpage that is displaying a different
    wallpapers-like images at a given interval."""

    request = requests.get(image_source)
    image = Image.open(io.BytesIO(request.content))
    image_format = image.format
    current_dir = os.path.dirname(os.path.realpath(__file__))
    temp_local_image_location = f'{current_dir}/interactive_wallpaper.{image_format}'
    image.save(temp_local_image_location)
    subprocess.Popen(["/usr/bin/gsettings", "set",
                      "org.gnome.desktop.background",
                      "picture-uri", f"'{temp_local_image_location}'"],
                      stdout=subprocess.PIPE)
    time.sleep(40)
</code></pre>

<p>Now <code>change_desktop</code> function is removed in favor of <code>set_desktop_background</code> function.</p>

<p>As for your mentioned periodical error <code>OSError: cannot identify image file ...</code> - I believe that can be fixed separately and is related to whether some particular image type or truncated image or failing to save image; you may find various fixes online. </p>

<p>The <strong><code>get_first_picture</code></strong> function is now shortened to the following:</p>

<pre><code>def get_first_picture():
    """Retrieve a random image from a non-interactive website. This 
    will be the first image to which the Gnome desktop will be set. It 
    will (1) give the user visual feedback that the script is working 
    and (2) prevent the same image (or minor set of images) to be shown
    whenever the script is run."""

    request = requests.get('https://github.com/dconnolly/chromecast-backgrounds')        
    soup = BeautifulSoup(request.content, features="lxml")
    images = soup.find_all("img", src=re.compile(r'.*camo.*'))
    sourcelist = [image["src"] for image in images]

    shuffle(sourcelist)
    set_desktop_background(sourcelist[0])
</code></pre>

<hr>

<p><code>set_display_and_start_browser</code> is a bad pattern for function naming as it points to excessive responsibility (the function doing too much). <br>It's better to split it into a separate functions (considering all above optimizations):</p>

<p><strong><code>start_display</code></strong> function:</p>

<pre><code>def start_display():
    display = Display(visible=0, size=(1920, 1080))
    display.start()
</code></pre>

<p><strong><code>start_browser</code></strong> function:</p>

<pre><code>def start_browser():
    """Start selenium driver. This is needed
       for the selenium-initiated browser to grab the dynamically
       loaded images from the webpage.
    """
    desired_capabilities = DesiredCapabilities.CHROME.copy()
    desired_capabilities['connection'] = "keep-alive"
    browser = webdriver.Chrome(desired_capabilities=desired_capabilities)
    url = "https://clients3.google.com/cast/chromecast/home/"
    browser.get(url)
    return browser
</code></pre>

<p>and <strong><code>load_images_to_desktop</code></strong> function (as the main <em>supervisor</em> function):</p>

<pre><code>def load_images_to_desktop():
    start_display()
    browser = start_browser()
    get_first_picture()

    while True:
        element = browser.find_element_by_id("picture-background")
        image_source = element.get_attribute("src")
        set_desktop_background(image_source)
</code></pre>
    </div>