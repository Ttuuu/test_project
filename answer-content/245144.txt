<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Don't <code>using std</code></h2>
<p>...especially in a header. In a source file it's not so bad; but in a header, you're forcing anyone who includes it to pollute their namespace.</p>
<h2>Const references</h2>
<p>Since <code>Mergesort</code> is not in-place, <code>vals</code> should be passed as <code>const</code>.</p>
<h2>Make your tests tests</h2>
<p>The tests currently in main should have <code>assert</code>s so that they act as actual tests.</p>
<h2>Your questions</h2>
<blockquote>
<p>By having <code>Merge</code> take references to <code>leftHalf</code> and <code>rightHalf</code>, I'm working with whatever memory was allocated (in this case, stack memory from <code>Mergesort</code>) and not <em>copies</em> of those vectors right?</p>
</blockquote>
<p>You're correct that <code>Merge</code> will not make copies at the beginning of the call due to the reference. However, accepting a reference does not guarantee that the referred variable was allocated on the stack, nor should that matter to the function.</p>
<blockquote>
<p>Lastly, I don't need to worry about free-ing  <code>leftHalf</code>, <code>rightHalf</code>, <code>sortedLeft</code>, <code>sortedRight</code>, <code>sorted</code>, and <code>mergedVec</code> because they're allocated on the stack and returned by value, right?</p>
</blockquote>
<p>Right(ish). Even if you did need to free the memory, you wouldn't use <code>free()</code> - this is C++, so you would use <code>delete</code>.</p>
<blockquote>
<p>Is there a way to check which region of memory an object lies in (e.g., stack, heap, global, etc.)?</p>
</blockquote>
<p>You should never need to do this outside of maybe a very narrow and non-production debugging or profiling effort.</p>
<blockquote>
<p>we can say the address range 0x4FFFFFFFDDDDDDDD to 0x5000000000000000 is always where a program stores stack frames</p>
</blockquote>
<p>Absolutely not, and this is dependent on a number of things, including OS and processor (32-bit vs. 64-bit).</p>
<p>Some operating systems go out of their way to <a href="https://en.wikipedia.org/wiki/Address_space_layout_randomization" rel="nofollow noreferrer">randomize this range</a> to make certain exploits more difficult.</p>
    </div>