<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<pre><code>public interface IOneWayEncryptionService
{
    string Encrypt(string text);
}

public interface ICryptographyService : IOneWayEncryptionService
{
    string Decrypt(string text);
}
</code></pre>
</blockquote>

<p>These seem to be crippled. The basic operations on which almost everything else can be built are</p>

<pre><code>byte[] Encrypt(byte[] plaintext, byte[] key, byte[] iv)
byte[] Decrypt(byte[] ciphertext, byte[] key, byte[] iv)
</code></pre>

<p>or</p>

<pre><code>byte[] Encrypt(byte[] plaintext, byte[] key)
byte[] Decrypt(byte[] ciphertext, byte[] key)
</code></pre>

<p>if the implementations are designed to generate a random IV and to include it as a prefix of the ciphertext.</p>

<p>However, if you want to use the full power of modern cipher modes (e.g. Galois Counter Mode) you get something like</p>

<pre><code>byte[] Encrypt(byte[] plaintext, byte[] authenticated_data, byte[] key, byte[] iv)
(byte[] plaintext, byte[] authenticated_data) Decrypt(byte[] ciphertext, byte[] key, byte[] iv)
</code></pre>

<p>and need to document clearly that the output of <code>Encrypt</code> doesn't include the <code>authenticated_data</code>.</p>

<hr>

<blockquote>
<pre><code>public class MD5CryptographyService : IOneWayEncryptionService
</code></pre>
</blockquote>

<p><strong>No, no, no!!!</strong> Hashing is <strong>not</strong> encryption. I know Microsoft's <code>System.Security.Cryptography</code> sets a bad example with <code>ICryptoTransform</code>, but they do at least distinguish <code>HashAlgorithm</code> from <code>SymmetricAlgorithm</code>. If you want to write maintainable code, you should do everything in your power to prevent the two concepts from being confused with each other.</p>
    </div>