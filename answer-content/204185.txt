<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There are two main reasons why your program is slow and using huge amounts of memory:</p>

<ol>
<li><p>You are using a 768×768 pixel image for each overlap calculation</p></li>
<li><p>You are checking each anchor box against each red box, but most of the time there is no overlap at all.</p></li>
</ol>

<h2>Use exact solutions where possible</h2>

<p>For the first issue, instead of doing image manipulation, you can instead do an exact calculation by finding the intersections of the edges of the rotated rectangles, constructing the polygon that is the overlapping area, and then calculating the area of that polygon. This is much faster and uses much less memory. See <a href="https://stackoverflow.com/questions/44797713/calculate-the-area-of-intersection-of-two-rotated-rectangles-in-python/45268241" title="Calculate the area of intersection of two rotated rectangles in python">this question</a>
for a possible approach in Python.</p>

<p>To calculate the area of the overlapping region with such a method, you would use on the order of 100 to 200 floating point operations: checking all 4 edges of one rectangle against each 4 of the other rectangle is about 4 * 4 * 8 = 128 operations, and calculating the area is around 8 * 4 = 32 operations for the worst case polygon with 8 edges. You probably only need to store the coordinates of the intersection points, which is 8 * 2 = 16 floating point values, which is 128 bytes when using double precision. I'm assuming all temporary values from the computations can be stored in registers. Compare that to having to create a 768*768 pixel image, where each image should hold at least 3 possible value: not part of a rectangle, non-overlapping area, and overlapping area. Because packing and unpacking 2 bit values is not efficient, you probably end up using 1 byte per pixel, so that is 576 kiB of memory, 4608 times as much as the 128 bytes used for the exact method. You would have to intialize this image, then calculate draw the boxes, which can probably done with integers or fixed-point mathematics, which may or may not be any faster than floating point arithmetic. Assuming you only need to do one operation per pixel, that will still be 589824 operations, or around 3000 more than using the exact method.</p>

<h2>Avoid testing all possible combinations</h2>

<p>For the second issue there are various ways to deal with it. A simple approach is to calculate the bounding box for each rotated rectangle, and first check if the bounding boxes overlap before doing the more expensive IoU calculation. However, that still requires a lot of tests. Looking at the images you provided, most red rectangles are quite small relative to the whole domain. In that case, a possible approach might be to divide the domain into smaller tiles, and for each tile have a list of rectangles that are overlapping that tile. Then you check each anchor box against all of the red rectangles that are overlapping the same tiles as the anchor box itself is overlapping.</p>

<p>For example, if you use tiles of size 100×100, then most boxes will overlap roughly only 2 tiles. That means, with 756 boxes in a 768x768 domain, there are approximately 2 * 756 * 100²/768² ≈ 25 overlapping each tile. Each anchor box will overlap approximately 2 tiles, so you need to check only 50 red boxes for each anchor box, reducing the amount of work by a factor 15 in this case. You can play around with the tile size to find the optimum size.</p>

<h2>Use a faster language</h2>

<p>Last but not least, Python will only get you so far. Once you have reduced the algorithmic complexity of your solution as much as possible, you are left with the <a href="https://stackoverflow.com/questions/801657/is-python-faster-and-lighter-than-c" title="Is Python faster and lighter than C?">overhead of an interpreted language like Python</a>. To get the best performance, use a language like C, C++ or Rust. Depending on how much your Python code already off-loaded most of its work to libraries written in those compiled languages, you might get a huge speed boost this way.</p>

<h2>Total speedup and memory usage reduction</h2>

<p>It is very hard to give an exact number of how much you can improve this code, unless you actually implement the suggested methods and measure it. I'll give an estimate, and it might easily be off by a factor of 10.</p>

<p>Your code reports using ~3.5 GB of RAM, and takes around 3 seconds. That's actually close to what I would expect: 5 * 756 * 768 * 768 * 1 byte/pixel ≈ 2.2 GB, and also 5 * 756 * 768 * 768 * 1 FLOP/pixel / 1 GFLOP/s 
≈ 2.2 seconds.</p>

<p>If I put in my estimates for the time and memory usage, and scale them with the ratio of the actual measurements from your code divided by the above estimate, then with both exact solutions and tiles combined, I get a memory usage of 5 * 50 * 128 / (5 * 756 * 768 * 768) * 3.57 GB ≈ 51 kB, and 5 * 50 * 200 / (5 * 756 * 768 * 768) * 3.11 s ≈ 70 µs. Now, those are some very small numbers, and while I think they are realistic, they don't include the setup costs for the tiles, so an actual program will probably use a bit more memory and time than that.</p>
    </div>