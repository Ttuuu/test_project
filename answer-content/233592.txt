<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I was hoping to see you come out with an improved Version 2 with a new posting.  I began to write some code for an answer to you, but that code diverged so much from your original that it warrants being its own post for review:</p>

<p><a href="https://codereview.stackexchange.com/questions/233209/prime-number-table-i-e-listint/233590#233590">Prime Number Table, i.e. List&lt;int&gt;</a></p>

<p>This is similar to yours, was inspired by yours, but eventually has different goals and objectives than yours.  A least one goal we have in common is a desire to provide a many primes quickly to a consumer.</p>

<p>I do use a faster lookup to index, which was highly recommended to you.</p>

<p>I also expose the table to the consumer as a readonly list.  For all the time, energy, and memory you use to build this table, I see no reason to hide it away.</p>

<p>My implementation doesn't carry the same side effects as yours, but again this is a design decision (our different goals) in that I restrict any methods using the index to the known primes, i.e. those already in my table.  I do not look past or add to the known primes on many calls. </p>

<p>Where we absolutely differ is that I use a sieve to initialize my prime table.  For most responsiveness in an app, I use time rather than prime count as the driving factor.  The sieve is temporary, creates the prime table, and its memory returned to later be GC'ed.  And it is much, much faster than generating primes using naive methods.</p>

<p>You take some issue with sieves due to allocation.  I would ask you to instead look at it with an open mind and an opportunity to learn new things.  </p>

<p>Let's compare the memory used by a sieve versus a <code>List&lt;int&gt;</code> along with an upperLimit of 10 million.  There are <code>664_579</code> primes in that list.  This requires <code>2_658_316</code> bytes.</p>

<p>If one use a <code>bool[]</code> and only used odd numbers, the array would need <code>5_000_001</code> items, and each item is a byte.  This is almost twice the size of the <code>List&lt;int&gt;</code>.</p>

<p>However, I do not use a <code>bool[]</code> but instead use a <a href="https://docs.microsoft.com/en-us/dotnet/api/system.collections.bitarray?view=netframework-4.8" rel="nofollow noreferrer">Systems.Collection.BitArray</a>.  Here each odd number is only 1 bit.  Note the underlying values in a bit array are provided by an <code>int</code>, where a single <code>int</code> provides 32 bits.  Thus my <code>BitArray</code> of <code>5_000_001</code> bits requires <code>156_282</code> integers, or <code>625_128</code> bytes.  Thus my <code>BitArray</code> is 0.25 the size of the <code>List&lt;int&gt;</code>.  </p>

<p>So I can prove that <a href="https://codereview.stackexchange.com/a/233590/54031">sieve is much faster</a> than your naive methods, and a sieve with a <code>BitArray</code> uses less memory than a `List'.  </p>

<p>I would encourage to try an improved implementation of your own and would welcome a chance to see and review it.</p>
    </div>