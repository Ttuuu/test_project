<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Prefer Symbolic Constants Over Magic Numbers</h2>
<p>There is a header file that should be included, <a href="http://pubs.opengroup.org/onlinepubs/009695399/basedefs/stdlib.h.html" rel="noreferrer">stdlib.h</a>, that provides some standard symbolic constants such as <a href="https://en.cppreference.com/w/cpp/utility/program/EXIT_status." rel="noreferrer">EXIT_SUCCESS and EXIT_FAILURE</a>. It might also be better to define <code>buf_size</code> and <code>cpy_buf_siz</code> as symbolic constants. If you are using a C compiler use <code>#define</code> to define your constants, if you are using the c++ compiler use the <a href="http://www.enseignement.polytechnique.fr/informatique/INF478/docs/Cpp/en/cpp/language/constexpr.html" rel="noreferrer">const or constexpr</a>. The <code>open_files</code> function could also return these values.</p>
<p>By using EXIT_SUCCESS and EXIT_FAILURE as the return values in the <code>cpy</code> function when main exists <code>success</code> doesn't need to be tested it can just be returned.</p>
<h2>Test for Success or Failure on all User Input</h2>
<p>The input value from <code>fgets()</code> is not checked to see if it is a valid value. NULL would not be a valid value in this case. The user could be prompted in a loop for each file name.</p>
<h2>DRY Code</h2>
<p>The function <code>get_paths()</code> could use a function such as <code>char *get_path(char* prompt)</code> that takes a prompt and returns a single string or NULL on failure. The error handling for <code>fgets()</code> could be in this function.</p>
<p>It might be better if <code>cpy()</code> <code>called open_files()</code>. That would simplify the <code>cpy()</code> interface to</p>
<pre><code>int cpy(char* src, char* dest);
</code></pre>
<p>If the C++ compiler is being used, it would probably be better to use <code>std::cin</code> and <code>std::cout</code> rather than <code>fgets()</code>.</p>
    </div>