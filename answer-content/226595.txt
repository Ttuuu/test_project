<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><em>Just a couple of words before the code review starts: I only found small issues that are not super crucial but make your code more readable or even a bit faster. My review is kinda long not because your code is bad but because I tried to elaborately explain why I would make some changes.</em></p>

<h2>General Code Style</h2>

<ul>
<li>Methods, in general, should always use <code>lowerCamelCase</code> for consistency and readability. So in your case, the two methods should be named <code>getVowels</code> and <code>getConsonants</code>.</li>
<li>You should stay consistent with the placement of the braces. Most coding conventions recommend to have whitespace between keywords and braces and to keep the curly braces in the same line instead of having them in a new line, e.g.: <code>for (int i = 0; i &lt; 10; i++) {</code></li>
<li>Using access modifiers is considered good practice and using the default access is not neccessary in your code which means you can use the modifier <code>private</code>.</li>
</ul>

<h3>Programming to Interface</h3>

<ul>
<li>It's generally a good practice to program to an interface if possible, which in your case means that you should use the interface <code>List</code> wherever you can. The main reason for this design principle is that your code doesn't become dependent on a specific implementation. Here is a <a href="https://stackoverflow.com/a/9853116/11959029">link</a> to a post that explains this better than I ever could.

<ul>
<li>Concretely this means that both your methods should return <code>List&lt;String&gt;</code> instead of <code>ArrayList&lt;String&gt;</code> and when initializing a list you should use the following pattern:</li>
</ul></li>
</ul>

<pre class="lang-java prettyprint-override"><code>List&lt;T&gt; identifier = new ArrayList&lt;&gt;();
</code></pre>

<h2>main</h2>

<ul>
<li>You should probably modify the input to be in all uppercase letters just in case the user doesn't use all caps. This makes the game more fool-proof.</li>
</ul>

<pre class="lang-java prettyprint-override"><code>String userInput = consoleInput.nextLine().toUpperCase();
</code></pre>

<ul>
<li>Safe the <code>List</code>s <code>getVowels(userInput)</code> and <code>getConsonants(userInput)</code> as they are used multiple times and a call to one of these methods is pretty cost-intensive since they have three nested for-loops (we want those to be called as few times as possible).</li>
</ul>

<p>The full method would look like this:</p>

<pre class="lang-java prettyprint-override"><code>public static void main(String[] args) {
    System.out.println("Please enter a word");
    Scanner consoleInput = new Scanner(System.in);
    String userInput = consoleInput.nextLine().toUpperCase();

    List&lt;String&gt; vowels = getVowels(userInput);
    List&lt;String&gt; consonants = getConsonants(userInput);
    System.out.println(vowels.size() + " words starting with vowels: " + vowels);
    System.out.println(consonants.size() + " words starting with consonants: " + consonants);
}
</code></pre>

<h2>getVowels</h2>

<ul>
<li>You can use a for-each loop instead of the currently existing for-loop with minimal effort. Usually, you should always use for-each over a classic for-loop because it is shorter and a clarifies the intention of the loop.</li>
</ul>

<pre class="lang-java prettyprint-override"><code>for (char vowel : vowels) {
</code></pre>

<ul>
<li>Declare the variable <code>wordStartingIndex</code> outside of the loops and initialize it inside of the condition. This reduces the amount of memory usage a bit:</li>
</ul>

<pre class="lang-java prettyprint-override"><code>int wordStartingIndex;
// ...
while ((wordStartingIndex = userInput.indexOf(vowels[i], offset)) &gt;= 0) {
</code></pre>

<ul>
<li>The variable <code>wordStartingIndex</code> can also be reused when assigning a new value to the variable <code>offset</code>:</li>
</ul>

<pre class="lang-java prettyprint-override"><code>offset = wordStartingIndex + 1;
</code></pre>

<ul>
<li>Use the method <code>contains</code> instead of <code>indexOf</code> when checking if a word is already in the list of possible words. This effectively does the same but makes it clearer to someone who is reading the code what your goal is with that line (or even you if you take a look at it a few months later):</li>
</ul>

<pre class="lang-java prettyprint-override"><code>!possibleWords.contains(maybeAWord)
</code></pre>

<p>Applying the above recommendations the method would look like this:</p>

<pre class="lang-java prettyprint-override"><code>private static List&lt;String&gt; getVowels(String userInput) {
    char[] vowels = "aeiou".toCharArray();
    List&lt;String&gt; possibleWords = new ArrayList&lt;&gt;();

    int wordStartingIndex;
    for (char vowel : vowels) {
        int offset = 0;
        while ((wordStartingIndex = userInput.indexOf(vowel, offset)) &gt;= 0) {
            for (int u = wordStartingIndex; u &lt;= userInput.length(); u++) {
                String maybeAWord = userInput.substring(wordStartingIndex, u);
                if (maybeAWord.length() &gt; 0 &amp;&amp; !possibleWords.contains(maybeAWord)) {
                    possibleWords.add(maybeAWord);
                }
            }
            offset = wordStartingIndex + 1;
        }
    }
    return possibleWords;
}
</code></pre>

<h2>getConsonants</h2>

<ul>
<li>The list <code>consonantIndexes</code> is never used so it can safely be deleted at the current state of the project. If you plan on using it later leave it in the code but I removed it in the final version.</li>
<li>Again you should make use of the for-each loop and use a variable to store the value of <code>userInput.indexOf(vowel, offset)</code> since it is used three times in a row without it changing.</li>
<li>The variable <code>wordStartingIndex</code> is completely redundant and thus can safely be deleted. Instead you should use the iterator-variable <code>i</code>.</li>
<li>Also again, you should use the <code>contains</code> method instead of checking if the index is less than 0.</li>
</ul>

<p>Applying the above recommendation the method would look like this:</p>

<pre class="lang-java prettyprint-override"><code>private static List&lt;String&gt; getConsonants(String userInput) {
    char[] vowels = "aeiou".toCharArray();
    List&lt;String&gt; possibleWords = new ArrayList&lt;&gt;();
    List&lt;Integer&gt; vowelIndexes = new ArrayList&lt;&gt;();

    int vowelIndex;
    for (char vowel : vowels) {
        int offset = 0;
        while ((vowelIndex = userInput.indexOf(vowel, offset)) &gt;= 0) {
            vowelIndexes.add(vowelIndex);
            offset = vowelIndex + 1;
        }
    }

    for (int i = 0; i &lt; userInput.length(); i++) {
        if (vowelIndexes.indexOf(i) &lt; 0) {
            int offset = i;
            while (offset &lt;= userInput.length()) {
                String maybeAWord = userInput.substring(i, offset);
                if (maybeAWord.length() &gt; 0 &amp;&amp; !possibleWords.contains(maybeAWord)) {
                    possibleWords.add(maybeAWord);
                }
                offset = offset + 1;
            }
        }
    }
    return possibleWords;
}
</code></pre>
    </div>