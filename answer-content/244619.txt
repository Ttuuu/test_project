<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>As explained in another answer, the implementation of the standard library that you use internally passes the comparator by value. It would not have to do that, but you still would have passed it by value to <code>sort</code>, and it is best to avoid that copying altogether. Now, you do not need to change the structure of your program to avoid this.</p>
<p>First, now that you are aware of the problem, I would advise you to make the comparator non-copyable just to ensure that you do not accidentally copy it.</p>
<pre><code>struct compare {
    // There is no need to copy this.
    compare(const compare &amp;) = delete;

...
</code></pre>
<p>With that change, your original program will not compile any more. Now next, we do not pass your heavy-weight comparator itself any more, but a light-weight wrapper that only holds a reference to it.</p>
<pre><code>static void sort(vector &amp;v) {
    const compare c(v);
    std::sort(v.begin(), v.end(),
              [&amp;c](unsigned x, unsigned y) { return c(x, y); });
}
</code></pre>
<p>Now this does exactly what you intended in the first place.  If you are worried that you might later change the type of the numbers from unsigned to something else and forget to also change it in the lambda, you can use <code>const auto &amp;</code> there instead of unsigned.</p>
    </div>