<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Overall you have a good D3 code here. I'm fairly impressed with the questions I've seen here at C.O. lately, from people claiming <em>"This is the very first time I've used d3 or drawn a SVG"</em>. Congrats.</p>

<p>However, before sharing my proposed alternative, I'd like to tell you that, unfortunately, you're using the <strong>wrong tool for the task</strong>!</p>

<p>As you can see in my <a href="https://codereview.stackexchange.com/a/171946/143592">answer here</a>, the problem is that D3 is designed to create visualizations based on data, normally qualitative or discrete quantitative data sets. According to Mike Bostock, D3 creator:</p>

<blockquote>
  <p>D3 is designed primarily for data visualization, mostly empirical datasets <strong>rather than continuous functions</strong>, and so there is no built-in method for generating abscissa values. (emphasis mine)</p>
</blockquote>

<p>As you can see in your case, the line gets better if you push more datapoint into the array, increasing any of the two constants in...</p>

<pre><code>d3.range(numWaves*numPointsPerWave+1)
</code></pre>

<p>In your particular case we can get a good line with <code>numPointsPerWave = 10</code>, which is not a big problem... however, the advice remains: D3 is not the correct tool here, you should look for a proper plotting library. As you can see in the linked answer above, in some situations we have to increase the data points a lot to have a good looking graph.</p>

<h3>D3 radial line</h3>

<p>All that being said, here is my proposed alternative: instead of all that complicated math and 2 functions to set the path's <code>d</code> attribute, use a <a href="https://github.com/d3/d3-shape/blob/master/README.md#lineRadial" rel="noreferrer">D3 radial line</a> generator.</p>

<p>In this answer I'll focus only on the use of the radial line generator, nothing more. I'm sure that other users will soon post answers regarding your JavaScript code (use of functions, constants, destructuring, currying etc...) </p>

<p>According to the API, <code>d3.lineRadial()</code>:</p>

<blockquote>
  <p>Constructs a new radial line generator with the default settings. A radial line generator is equivalent to the standard Cartesian line generator, except the x and y accessors are replaced with angle and radius accessors. Radial lines are always positioned relative to ⟨0,0⟩; use a transform (see: SVG, Canvas) to change the origin.</p>
</blockquote>

<p>So, all we need is the line generator...</p>

<pre><code>const radialGenerator = d3.lineRadial()
    .angle(d =&gt; d.angle)
    .radius(d =&gt; d.radius)
    .curve(d3.curveCardinalClosed);
</code></pre>

<p>And the adequate data:</p>

<pre><code>const length = 100;
const amplitude = 20;
const radialScale = d3.scaleLinear()
  .domain([0, length])
  .range([0, Math.PI * 2]);

const data = d3.range(length).map(function(d) {
  return {
    angle: radialScale(d),
    radius: xScale(radius) + Math.sin(d) * amplitude
  }
});
</code></pre>

<p>Then, you append the path:</p>

<pre><code>const wave = vis.append('path')
  .attr('d', radialGenerator(data))
  .attr('fill', 'none')
  .attr('stroke', 'black')
  .attr('stroke-width', '1px');
</code></pre>

<p>Have in mind that my function here is not as complex as yours, which accepts several different parameters: this answer is just to show you the existence of <code>d3.lineRadial()</code>, you can certainly improve it.</p>

<p>Here is the demo:</p>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>const svg = d3.select('svg');
const margin = {
  top: 50,
  right: 50,
  bottom: 50,
  left: 50
};
const width = +svg.attr('width') - margin.left - margin.right;
const height = +svg.attr('height') - margin.top - margin.bottom;

// content area of your visualization
const vis = svg.append('g')
  .attr('transform', `translate(${margin.left+width/2},${margin.top+height/2})`);

// show area inside of margins
const rect = vis.append('rect')
  .attr('class', 'content')
  .attr('width', width)
  .attr('height', height)
  .attr('transform', `translate(${-width/2},${-height/2})`);

// show scales
const xScale = d3.scaleLinear()
  .domain([-100, 100])
  .range([-width / 2, width / 2]);
const yScale = d3.scaleLinear()
  .domain([100, -100])
  .range([-height / 2, height / 2]);
vis.append('g').call(d3.axisTop(xScale));
vis.append('g').call(d3.axisLeft(yScale));

// draw circle
const pi = Math.PI
const radius = 63.66
const circle = vis.append('circle')
  .style('stroke-dasharray', '3, 3')
  .style('stroke', 'black')
  .style("fill", "transparent")
  .attr("r", xScale(radius))
  .attr("cx", 0)
  .attr("cy", 0);

const length = 100;
const amplitude = 20;

const radialGenerator = d3.lineRadial()
  .angle(d =&gt; d.angle)
  .radius(d =&gt; d.radius)
  .curve(d3.curveCardinalClosed)

const radialScale = d3.scaleLinear()
  .domain([0, length])
  .range([0, Math.PI * 2]);

const data = d3.range(length).map(function(d) {
  return {
    angle: radialScale(d),
    radius: xScale(radius) + Math.sin(d) * amplitude
  }
});

const wave = vis.append('path')
  .attr('d', radialGenerator(data))
  .attr('fill', 'none')
  .attr('stroke', 'black')
  .attr('stroke-width', '1px')</code></pre>
<pre class="snippet-code-css lang-css prettyprint-override"><code>svg {
  background-color: steelblue;
}

.content {
  fill: lightsteelblue;
}</code></pre>
<pre class="snippet-code-html lang-html prettyprint-override"><code>&lt;script src="https://d3js.org/d3.v5.min.js"&gt;&lt;/script&gt;
&lt;svg width="1000" height="1000"&gt;&lt;/svg&gt;</code></pre>
</div>
</div>

    </div>