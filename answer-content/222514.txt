<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The main piece of advice I feel I can offer is to avoid using the asterix
<code>from list2BST import *</code></p>

<p>This makes it much harder for other users to work out where individual functions are coming from. It is much better practice to say</p>

<p><code>import list2BST</code> </p>

<p>and then </p>

<p><code>list2BST.&lt;function name&gt;</code> </p>

<p>or 
<code>from list2BST import &lt;function_1&gt;, &lt;function_2&gt;</code></p>

<p>I have copied below my own implementation of this if you are interested in looking. The code is much shorter and I build, print and search the BST in a single module. I also use fewer variables and I think my approach is fairly intuitive. I have added this for comparison though because other than my comment above, I cannot think of anything else you can do to improve your code</p>

<pre><code>""""Module to find lowest common ancestor of BST"""
from dataclasses import dataclass


@dataclass
class Node:
    """BST class"""

    value: int
    left: None = None
    right: None = None

    def add_child(self, value):
        """Add child to BST"""
        if self.value:
            if value &lt; self.value:
                if self.left:
                    self.left.add_child(value)
                else:
                    self.left = Node(value)
            else:
                if self.right:
                    self.right.add_child(value)
                else:
                    self.right = Node(value)

    def print_tree(self, level=0):
        """Print the BST"""
        if self.value:
            print(" " * level, self.value)
            if self.left:
                self.left.print_tree(level + 1)
            if self.right:
                self.right.print_tree(level + 1)

    def explore(self, node, lst_ancestors):
        """Explore BST to find ancestors of node"""
        if self.value:
            if self.value == node:
                lst_ancestors.append(self.value)
                return True, lst_ancestors
            if self.left:
                left_true = self.left.explore(node, lst_ancestors)
                if left_true:
                    lst_ancestors.append(self.value)
                    return True, lst_ancestors
            if self.right:
                right_true = self.right.explore(node, lst_ancestors)
                if right_true:
                    lst_ancestors.append(self.value)
                    return True, lst_ancestors

    def common_ancestor(self, node1, node2):
        """Find common ancestors"""
        _, list_1 = self.explore(node1, [])
        _, list_2 = self.explore(node2, [])
        common_nodes = set(list_1).intersection(list_2)
        if common_nodes:
            print(f"The LCA node of {node1} and {node2} is {list(common_nodes)[0]}")
        else:
            print(f"There is no LCA for {node1} and {node2}")


if __name__ == "__main__":
    n = Node(5)
    n.add_child(3)
    n.add_child(4)
    n.add_child(2)
    n.add_child(7)
    n.add_child(6)
    n.add_child(8)

    node1 = 2
    node2 = 6
    n.common_ancestor(node1, node2)

</code></pre>
    </div>