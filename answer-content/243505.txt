<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'm only adding some notes here on addition of Miguel answer, his answer gives you what you asked, but what you really want is to divide this method into several methods, each method would handle one thing and only one thing. here is a list of the methods you need : </p>

<ol>
<li>Converting <code>List&lt;ProjectObject&lt;T&gt;&gt;</code> to Dictionary. </li>
<li>Creating a Note from <code>ProjectObject&lt;T&gt;</code>.</li>
<li>Creating a Note Indices from <code>ProjectObject&lt;T&gt;</code>.</li>
<li>Creating <code>TableRow</code> from <code>ProjectObject&lt;T&gt;</code>.</li>
<li>Creating <code>Run</code> for <code>ProjectObject&lt;T&gt;</code>.</li>
</ol>

<p>Then, you can create methods to use these single object return methods to return <code>IEnumerable&lt;T&gt;</code> in which would create multiple objects of each method 
 like creating multiple notes, rows, runs ..etc.</p>

<p>if you do this, it'll be very easy to reuse and maintain. and then, you can overload them to add some other requirements, for instance, for the <code>TableRow</code>, you can add <code>RenderTextContentCell</code> overload. </p>

<p>Another thing is to make use of <code>interface</code>. If you implemented an interface that would be implemented on <code>Infiltration</code> and <code>ExhaustEquipment</code>, you would be able to pass that interface to the method instead of the concrete object name like this </p>

<pre><code>private static List&lt;OpenXmlElement&gt; RenderInfiltrationTableData(
    MainDocumentPart mainDocumentPart, 
    List&lt;ProjectObject&lt;IExhaustInfiltration&gt;&gt; exhaustOrInfiltration,
    Table table) 
    { ... }
</code></pre>

<p>with this, you would be able to pass one of those two objects, which would easier to make some conditions in the method to switch some cases based on the type like: </p>

<pre><code>var isInfiltration = exhaustOrInfiltration.GetType() == typeof(Infiltration);

if(isInfiltration)
{
    // do something
}
else
{
    // it's ExhaustEquipment
}
</code></pre>

<p>here is a pseudo-code example on how your method would be if you done these suggestions :</p>

<pre><code>private static List&lt;OpenXmlElement&gt; RenderTableData(MainDocumentPart mainDocumentPart, List&lt;ProjectObject&lt;IExhaustInfiltration&gt;&gt; exhaustOrInfiltration,Table table)
{
    var exhaustOrInfiltrationTypes = ToDictionary(exhaustOrInfiltration);

     // to be used on notes
    var isInfiltration = exhaustOrInfiltration.GetType() == typeof(Infiltration);
    foreach(var item in exhaustOrInfiltrationTypes)
    {
        // CreateTableRow would contains the add single row, note, and run methods. 
        var tableRows = CreateTableRow(item.Value, isInfiltration);
        table.Append(tableRow); // assuming there is a method accepts (IEnumerable&lt;TableRow&gt;) to add multiple rows at once. 
    }

    return RenderNotesArray(table, notes, notesSection);
}
</code></pre>
    </div>