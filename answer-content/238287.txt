<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>It seems your code will work expected. I am sure that there are other improvements for  multithreading but I will just suggest some improvements in terms of readability and usability. I hesitated to share but maybe it could be beneficial for you or others.</p>

<ul>
<li><p>Firstly, intuitive expectation of most of developers is using <code>operator &lt;&lt;</code> to stream out things.</p></li>
<li><p>Second, actually singleton is detail of your implementation. It might be hidden in a <code>class</code>. It also provides you to change the implementation later without breaking backward compatibility.</p></li>
</ul>

<p>So it is possible to support with the help of <a href="https://en.cppreference.com/w/cpp/io/basic_stringstream" rel="nofollow noreferrer">std::stringstream</a> combined with <a href="https://en.cppreference.com/w/cpp/language/raii" rel="nofollow noreferrer">RAII</a> technique.</p>

<p>Possible implementation :</p>

<pre><code>#include &lt;iostream&gt;
#include &lt;sstream&gt;
#include &lt;functional&gt;

struct singleton_impl
{

    static singleton_impl&amp; instance()
    {
        static singleton_impl impl;
        return impl;
    }

    void log( const std::string&amp; l )
    {
        std::cout &lt;&lt; l &lt;&lt; std::endl;
    }
};

template&lt;typename Fn&gt;
class message
{
    public:

        message( Fn&amp;&amp; fn ) : m_f { std::forward&lt;Fn&gt;( fn ) } 
        {  }

        ~message() {
            // Push to message queue
            m_f( m_ss.str() );
        }

        template&lt;typename T&gt;
        message&amp; operator&lt;&lt;( const T&amp; msg ) 
        {
            m_ss &lt;&lt; msg;
            return *this;
        }

    private:

        std::stringstream m_ss;
        Fn m_f;
};

struct logger
{

    auto operator()() {
        return message { std::bind( static_cast&lt; void(logger::*)( const std::string&amp; )&gt;( &amp;logger::log ) , this , std::placeholders::_1 ) };
    }

    void log( const std::string&amp; l )
    {
        // std::cout &lt;&lt; l &lt;&lt; std::endl;
        singleton_impl::instance().log( l );
    }
};

int main()
{
    logger logger;

    logger() &lt;&lt; "Hello, world ! a number : " &lt;&lt; 15 &lt;&lt; ". Supports 'operator &lt;&lt;'";
    logger.log( "another way" );


    {
        logger() &lt;&lt; "outputs at end of the scope.";
    }

    auto output = logger();
    output &lt;&lt; "Output over object.";
    output &lt;&lt; "Appended to the previous text.";

    return 0;
}
</code></pre>

<blockquote>
  <p>Hello, world ! a number : 15. Supports 'operator &lt;&lt;'<br>
  another way<br>
  outputs at end of the scope.<br>
  Output over object.Appended to the previous text</p>
</blockquote>

<p><a href="https://onlinegdb.com/ryCsiDsVU" rel="nofollow noreferrer">run online</a></p>

<ul>
<li><p>Another improvement could be making it extendable with the help of metaprogramming. I won't implement but the interface could be like this.</p>

<pre><code>#include &lt;iostream&gt;
#include &lt;string&gt;

struct with_thread_id {};
struct with_timestamp {};
struct with_this_token {
    with_this_token( const std::string&amp; t ) : m_token { t } {}

    private:
        std::string m_token;
};
// And many more

template&lt; typename... Features &gt;
class logger_impl {
    // Implement somehow
};

using logger = logger_impl&lt; with_thread_id , with_timestamp &gt;;

int main()
{
    logger l;

    l() &lt;&lt; "There will be `thread_id` and `timestamp` before this text.";

    return 0;
}
</code></pre></li>
<li><p>Another little performance improvement in your code. Use <a href="https://en.cppreference.com/w/cpp/language/move_assignment" rel="nofollow noreferrer">move assignment</a> instead of <a href="https://en.cppreference.com/w/cpp/language/copy_assignment" rel="nofollow noreferrer">copy assignment</a> when it is possible. </p>

<pre><code> // message = messages.front();
 message = std::move( messages.front() );
</code></pre></li>
<li><p>For sake of better readability, <a href="https://en.cppreference.com/w/cpp/thread/scoped_lock" rel="nofollow noreferrer">std::scoped_lock</a> could be used instead of lock()/unlock() pair.</p>

<pre><code>/* messagesMutex.lock();
message = messages.front();
messages.pop_front();
messagesMutex.unlock(); */

{
    std::scoped_lock lock { messagesMutex };
    message = messages.front();
    messages.pop_front();
}  
</code></pre></li>
</ul>
    </div>