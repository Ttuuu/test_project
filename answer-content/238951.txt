<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your implementation quickly falls apart when we have digits inside strings. Consider the following testcases:</p>

<pre><code>package encode

// run-length encode a string
var encodeTests = []struct {
    input       string
    expected    string
    description string
}{
    {"1111111111111", "131", "numbers test"},
    {"131", "131", "unique numbers test"},
}

// run-length decode a string
var decodeTests = []struct {
    input       string
    expected    string
    description string
}{
    {"131", "1111111111111", "numbers test"},
    {"131", "131", "unique numbers test"},
}

// encode and then decode
var encodeDecodeTests = []struct {
    input       string
    expected    string
    description string
}{
    {"1111111111111", "1111111111111", "encode followed by decode gives original string"},
    {"131", "131", "encode followed by decode gives original string"},
}
</code></pre>

<p>These requirements are impossible to satisfy as two distinct inputs can give the same output. When actually run, a panic results:</p>

<pre><code>--- FAIL: TestRunLengthDecode (0.00s)
panic: runtime error: slice bounds out of range [recovered]
        panic: runtime error: slice bounds out of range

goroutine 19 [running]:
testing.tRunner.func1(0xc0000a4300)
        /usr/lib/go-1.11/src/testing/testing.go:792 +0x387
panic(0x512100, 0x619ff0)
        /usr/lib/go-1.11/src/runtime/panic.go:513 +0x1b9
encode.newRunLength.func2(0x536b33, 0x3, 0x5207a0, 0xc00005e4b0)
        /home/minombre/go/src/encode/encode.go:34 +0x2eb
encode.runLength.decode(0x53fb70, 0x53fb80, 0x536b33, 0x3, 0xc000030601, 0x40bbf8)
        /home/minombre/go/src/encode/encode.go:48 +0x3a
encode.RunLengthDecode(0x536b33, 0x3, 0x6074c8, 0x27)
        /home/minombre/go/src/encode/encode.go:56 +0x4f
encode.TestRunLengthDecode(0xc0000a4300)
        /home/minombre/go/src/encode/encode_test.go:16 +0xee
testing.tRunner(0xc0000a4300, 0x53fb58)
        /usr/lib/go-1.11/src/testing/testing.go:827 +0xbf
created by testing.(*T).Run
        /usr/lib/go-1.11/src/testing/testing.go:878 +0x35c
FAIL    encode  0.008s
</code></pre>

<p>You could possibly store these into some sort of a structure with a character per structure but that would be impractical.</p>
    </div>