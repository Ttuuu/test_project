<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>To be honest: Neither. </p>

<ul>
<li><p>Both are equally unnecessarily complicated and difficult to read. They use old-fashioned, maybe over-optimized techniques instead of Java/OOP features. </p></li>
<li><p>The code lacks readable variable names and any documentation for the reader/reviewer or for other programmers who need to use this. </p></li>
<li><p>And finally (if I read it correctly) they have the danger to getting caught in an infinite loop if called with specific arguments.</p></li>
</ul>

<hr>

<h1>Building the character lists</h1>

<h2>Memory management</h2>

<p>In the building of the character lists one of the problems is that the <code>ArrayList</code>s are used in a way that (internally) the data is copied in memory multiple times. To avoid that when filling an <code>ArrayList</code>, if you know number of elements you will be adding, set the capacity when creating the <code>ArrayList</code>:</p>

<pre><code>ArrayList&lt;Character&gt; g1 = new ArrayList&lt;Character&gt;(26);
</code></pre>

<p>After filling the list you loop over the items to find one you remove. Removing items from an <code>ArrayList</code> also requires coping of data in order to fill the gaps in the array. Since you are already looping over the letters to fill the array list, you shouldn't add the letters you don't want in the first place:</p>

<pre><code>ArrayList&lt;Character&gt; g1 = new ArrayList&lt;Character&gt;();
for (char i = 'a'; i &lt;= 'z'; i++) {
    if (i != 'l') {
       g1.add(i);
    }
}
</code></pre>

<p>Also notice: <code>'a'</code> is already a literal of the type <code>char</code>. Declaring <code>i</code> as a <code>char</code> avoids casting twice - one implicit and one explicit). </p>

<h2>Use interfaces instead of specific classes</h2>

<p>Don't declare object variables, generic types and method parameters as their specific type, but as the most constraining interface possible. So your character list should be:</p>

<pre><code>public static final List&lt;List&lt;Character&gt;&gt; groups = new ArrayList&lt;List&lt;Character&gt;&gt;();
</code></pre>

<p>This is because code that uses this list does not need (and should not need) to know that  these are <code>ArrayList</code>s.</p>

<p>This also allows you to use something other than <code>ArrayList</code>. For example the small lists of special characters would be much nicer the create with <code>List.of</code> (which uses its own implementation of <code>List</code>):</p>

<pre><code>List&lt;Character&gt; g4 = List.of('-');
List&lt;Character&gt; g5 = List.of('_');
List&lt;Character&gt; g6 = List.of(' ');
List&lt;Character&gt; g7 = List.of('!', '$', '%', '&amp;');
</code></pre>

<p>This also comes back to another memory management point. The line </p>

<pre><code> groups.addAll(List.of(g1, g2, g3, g4, g5, g6, g7));
</code></pre>

<p>creates a list (<code>List.of</code>) but its content is added to <code>groups</code> and then it's discarded again. Instead don't create an <code>ArrayList</code> and use the list created by <code>List.of</code>  directly:</p>

<pre><code>public static final List&lt;List&lt;Character&gt;&gt; groups;

static {
    // ...
    groups = List.of(g1, g2, g3, g4, g5, g6, g7);
}
</code></pre>

<h2>A more Java appropriate data structure</h2>

<p>(This review is getting quite a bit longer that I expected, so I'll be more abstract from here on.)</p>

<p>Is is really needed to fill an array with all possible characters? Instead consider a data structure that represents a character range for example storing only the first, last and missing characters. It can have methods that return the number of characters it represents and return the <code>n</code>th character.</p>

<p>Also the different character sets, which are currently represented by the index of the outer <code>ArrayList</code> and the bits in the <code>gs</code> parameter of the actual password generator, could be instead represented by a Java <code>enum</code>. Java also provides a <code>EnumSet</code> which would be used to replace the bitset.</p>

<p>(I could go into details and write much more, but unfortunately I don't have the time anymore.)</p>
    </div>