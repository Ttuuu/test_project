<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Constructors</h1>
<p>The better way to write the constructor is</p>
<pre class="lang-cpp prettyprint-override"><code>song(std::string tit, std::string au = "? ", std::string al = "? ")
    : title(tit), author(au), album(al) { }
</code></pre>
<p>That way specifying the title and the author but leaving the album default is possible. Also you only need a single constructor now. You can further improve by using <code>title(std::move(tit))</code> to skip a memory allocation.</p>
<h1>Privacy</h1>
<p>Through keeping <code>title</code>, <code>author</code> and <code>album</code> <code>private</code> and only providing functions like <code>gettitle</code> and <code>showtitle</code> you sort of made those read-only. Why? What is the danger having a <code>song</code> and setting the title of it? If someone wants to do it they can do</p>
<pre class="lang-cpp prettyprint-override"><code>s = song{"new title", s.getauthor(), s.getalbum()};
</code></pre>
<p>which is just awkward. You didn't actually gain privacy while inconveniencing your users. I'd make all the members <code>public</code> and remove the getters until there is internal logic that keeps the members synchronized and you cannot guarantee it when users can change the members.</p>
<h1>Warnings</h1>
<p>Enable them. They are really useful. There is a bug in <code>const bool operator==(song &amp; a)</code> but it's not really worth learning about because <a href="https://coliru.stacked-crooked.com/a/5218fe771890c162" rel="nofollow noreferrer">a compiler can spot it</a> so you don't have to.</p>
<h1>Const correctness</h1>
<p>When comparing 2 <code>song</code>s those should not change and only being able to compare modifiable <code>song</code>s is weird. The correct signature for that is <code>bool operator==(const song &amp; a) const</code>. The <code>const</code> on the right refers to <code>*this</code>, meaning when you do <code>s1 == s2</code> then <code>s1</code> is allowed to be <code>const</code>. The <code>const</code> in the middle refers to the right side, <code>s2</code> in the example which we also want to allow to be <code>const</code>. The <code>const</code> in the front you had refers to the <code>bool</code> and besides very weird edge cases you don't want to return <code>const</code> objects by value. The same applies to <code>gettitle</code> and arguably those functions should return a <code>const std::string &amp;</code> to avoid making a copy.</p>
<h1>Comparisons</h1>
<p>If you want lexicographic compares you can use</p>
<pre class="lang-cpp prettyprint-override"><code>return std::tie(title, author, album) == std::tie(a.gettitle(), a.getauthor(), a.getalbum());
</code></pre>
<p>It doesn't look that much better than what you wrote, but it fixed the bug I hinted at when talking about warnings and when doing <code>operator &lt;</code> this becomes much easier than doing it by hand. C++20 is not that far away and then defaulting <code>operator &lt;=&gt;</code> should make this convenient.</p>
<h1>Separation of Concerns</h1>
<p><code>song</code> prints to <code>std::cout</code>. It really shouldn't. As a user of your class I should be the one who decides how and where things are printed to. I want to print to <code>std::clog</code> for example. For that you can add a function <code>std::ostream &amp;operator &lt;&lt;(std::ostream &amp;os, const song &amp;s)</code> which prints its elements to <code>os</code>. Through inheritance I can now do <code>std::cout &lt;&lt; song{};</code> or <code>std::fstream("/tmp/songs.txt") &lt;&lt; song{};</code> or whatever I want. Although if you make the members <code>public</code> this is probably no longer necessary. Also users can add their own way of printing.</p>
<h1>Extra Parenthesis</h1>
<p><code>x.getlist()</code> has lots of extra parenthesis around making the code less readable. I find <code>findsong((x.getlist())[i])</code> particularly jarring. <code>findsong(x.getlist()[i])</code> is better.</p>
<h1><a href="https://en.wikipedia.org/wiki/Yoda_conditions" rel="nofollow noreferrer">Yoda Conditions</a></h1>
<p><code>if (false == this-&gt;findsong((x.getlist())[i]))</code> should better be written as <code>if (not findsong(x.getlist()[i]))</code>. Using <code>not</code> over <code>!</code> is a style choice some people find weird and you don't need to follow it, but yoda conditions are harmful to readability and with warnings enabled have no upside.</p>
    </div>