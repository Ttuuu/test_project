<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>We already have a standard algorithm for <code>comp_coords_lexic</code>:</p>

<pre><code>bool comp_coords_lexic(const std::vector&lt;int&gt; &amp;lhs, const std::vector&lt;int&gt; &amp;rhs)
{
    return std::lexicographical_compare(lhs.begin(), lhs.end(),
                                        rhs.begin(), rhs.end());
}
</code></pre>

<p>Stylewise, I'd probably write <code>x</code> and <code>y</code> rather than <code>fc</code> and <code>sc</code> everywhere.  Those are a better match to programmer expectations when we're doing planar geometry.</p>

<p>For the algorithm, perhaps a better representation of the points would be a pair of maps: one from each x-coordinate to a set of y-coordinates and another mapping each y-coordinate to a set of x-coordinates?  That makes it much easier to find other points to consider with the current one (and since sets are sorted, we can finish the inner loop when we reach the current outer-loop point).</p>

<p>It may make sense to compute the area when we have three candidate points, and discard it unless the possible area is an improvement on the current smallest, and only then check for the existence of the fourth point (since the search is more expensive than multiplication).</p>

<p>Is there a limit on the range of <code>int</code> values used for coordinates?  We might need a wider type for storing the area (in fact, we may well need a wider type simply to represent coordinate differences).</p>
    </div>