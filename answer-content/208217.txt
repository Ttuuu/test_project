<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>We're definitely missing some context here to run your code or understand what it is supposed to do, but there is enough to detect a few things that could be easily improved.</p>

<hr>

<pre><code>        Coins = Coins-Coins #Removes all coins
</code></pre>

<p>This should be:</p>

<pre><code>        Coins = 0  #Removes all coins
</code></pre>

<p>Also</p>

<pre><code>        Coins = Coins+10 #Adds an additional 10 points
</code></pre>

<p>can be written</p>

<pre><code>        Coins += 10  #Adds an additional 10 points
</code></pre>

<hr>

<p>Don't perform the same operations more than needed. In particular when handling the user input, you can limit the number of index accesses, to call to <code>lower</code> function, to call to <code>int</code> function:</p>

<pre><code>    user_input = input('Enter the direction followed by the number Ex:Up 5 , Number should be &lt; 8 \n').split()
    if len(user_input) != 2:
        print('Wrong command, please input again')
        continue
    direct, number = user_input
    direct = direct.lower()
    number = int(number.lower())
    if direct not in ['up','left','down','right']:#Validates input
        print('Wrong command, please input again')
        continue
    elif direct == 'up':
        up(number, 8)  #Boundary is set to 8 as the 'easy' grid is a 8^8
    elif direct == 'down':
        down(number, 8)
    elif direct == 'left':
        left(number, 8)
    elif direct == 'right':
        right(number, 8)
</code></pre>

<p>Then, you can actually change the condition order so that you don't need to list twice the valid directions:</p>

<pre><code>    if direct == 'up':
        up(number, 8)  #Boundary is set to 8 as the 'easy' grid is a 8^8
    elif direct == 'down':
        down(number, 8)
    elif direct == 'left':
        left(number, 8)
    elif direct == 'right':
        right(number, 8)
    else:
        print('Wrong command, please input again')
        continue
</code></pre>

<hr>

<p>You could probably rewrite the comparisons to have something like:</p>

<pre><code>    if current == Treasure1_Pos\
       or current == Treasure2_Pos\
       or current == Treasure3_Pos\
       or current == Treasure4_Pos\
       or current == Treasure5_Pos\
       or current == Treasure6_Pos\
       or current == Treasure7_Pos\
       or current == Treasure8_Pos\
       or current == Treasure9_Pos\
       or current == Treasure10_Pos:
        print("Hooray! You have found booty! +10 gold")
        Coins += 10  #Adds an additional 10 points
        print("Coins:",Coins)

    if current == Bandit1_Pos\
         or current == Bandit2_Pos\
         or current == Bandit3_Pos\
         or current == Bandit4_Pos\
         or current == Bandit5_Pos:
        print("Oh no! You have landed on a bandit...they steal all your coins!")
        Coins = 0  #Removes all coins
        print("Coins:",Coins)
</code></pre>

<p>And you could even define a data structure (list, set) to hold all the relevant positions and write something like:</p>

<pre><code>    if current in Treasure_Positions:
        print("Hooray! You have found booty! +10 gold")
        Coins += 10  #Adds an additional 10 points
        print("Coins:",Coins)

    if current in Bandit_Positions:
        print("Oh no! You have landed on a bandit...they steal all your coins!")
        Coins = 0  #Removes all coins
        print("Coins:",Coins)
</code></pre>

<hr>

<p>Then more things look wrong/improvable about <code>boardeasy</code> but we'd need to see what it does.</p>
    </div>