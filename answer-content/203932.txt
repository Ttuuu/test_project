<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Virtually all of your comments are visual noise. Comments should explain why things happen, not what is happening. If you can’t read the code to see what is happening, the code is not clear enough.</p>

<p>Use curly braces and whitespace consistently. Open curly braces don’t take a line by themselves. Put whitespace before the open curly brace.</p>

<h1>Queue</h1>

<p>Your class is called <code>Queue</code> but it is a <code>Stack</code>.</p>

<p>All your member variables should be <code>private</code>. Your methods should probably be <code>public</code> and not default scope.</p>

<p><code>queue</code> should be final, since it’s never being reassigned.</p>

<p><code>top</code> and <code>bottom</code> can have their base values assigned when they’re declared as member variables. <code>top</code> will be assigned zero by default if you don’t explicitly assign it, but there’s some disagreement as to whether that’s more or less clear.</p>

<p><code>size</code> does nothing for you and can be removed. <code>n</code> should be renamed <code>size</code>.</p>

<p><code>x</code> is a poor name for a char variable. Traditionally it would be <code>c</code>.</p>

<p><code>pop</code> doesn’t need a variable in it. Just <code>return this.queue[this.top++]</code>.</p>

<p>You should consider whether using <code>++</code> as part of your array index value is a good idea or if it makes the code hard to read. The code might be more clear if you separate the array indexing from the variable change.</p>

<p>The body if <code>isEmpty()</code> can be reduced to <code>return this.top &gt; this.bottom</code>.</p>

<p>Your class will only work for one round of pushing and popping. The class breaks because bottom and top only get larger. To make the class reusable, you need only one variable which goes up and down as items are pushed and popped. You’ll still have out of bounds errors if they try to pop from an empty stack or push to a full one.</p>

<h1>Main</h1>

<p><code>Imp</code> is a poor name for a method that reverses a <code>String</code>. Why wouldn’t you name it <code>reverse</code>?</p>

<p>Methods should start with a lowercase letter.</p>

<p>Your comment says <code>Imp</code> “reverses the<code>String</code>”, but it doesn’t. It reverses a <code>StringBuffer</code>. </p>

<p>Curly braces should never be treated as optional. That's a bug waiting to happen.</p>

<p><code>StringBuffer</code> is thread-safe, and should really only be used in multithreaded environments for performance reasons. Prefer <code>StringBuilder</code>.</p>

<p>Unless there’s a reason you need to do the reverse in <code>O(1)</code> space, it would be more idiomatic to create a new <code>StringBuilder</code> and push the characters into that. Your method could accept a <code>CharSequence</code>, and interface which <code>String</code>, <code>StringBuilder</code>, and <code>StringBuffer</code> all implement. I’ll assume <code>O(1)</code> space is a hard requirement, since it would really be preferable to not mutate the input parameter.</p>

<p><code>n</code> is a poor variable name. You don’t really need a variable there anyway, since you can just reference <code>length()</code> directly when you need it.</p>

<p><code>obj</code> is a poor variable name. Variable names should describe what is being referenced. <code>stack</code> would be generic, but at least it’s a bit more descriptive.</p>

<p>You should declare <code>i</code> inside the scope of the <code>for</code> loop.</p>

<p>The <code>ch</code> variable does nothing for you and can be folded into the assignment.</p>

<p>If you were to apply all my suggestions, your <code>Main</code> class might look something like:</p>

<pre><code>public class Main {

    public static void reverse(final StringBuilder characters) {

        final Stack stack = new Stack(characters.length());

        for (int i = 0; i &lt; characters.length(); i++) {
            stack.push(characters.charAt(i));
        }

        for (int i = 0; i &lt; characters.length(); i++) {
            characters.setCharAt(i, stack.pop());
        }
    }

    public static String reverse(final CharSequence charSequence) {
        final Stack stack = new Stack(charSequence.length());

        for (int i = 0; i &lt; charSequence.length(); i++) {
            stack.push(charSequence.charAt(i));
        }

        final StringBuilder reversedCharSequence = new StringBuilder(charSequence.length());
        while (!stack.isEmpty()) {
            reversedCharSequence.append(stack.pop());
        }
        return reversedCharSequence.toString();
    }

    public static void main(final String args[]) {
        final StringBuilder a = new StringBuilder("bob");
        final StringBuilder b = new StringBuilder("eat too much");
        final StringBuilder c = new StringBuilder("I love greasy food");
        final StringBuilder d = new StringBuilder("FORTRAN 77 RULES");

        reverse(a);
        reverse(b);
        reverse(c);
        reverse(d);

        System.out.println(a + "\n" + b + "\n" + c + "\n" + d);

    }
}
</code></pre>

<p>and your <code>Queue</code> class might look something like:</p>

<pre><code>class Stack {

    private final char[] stack;
    private int top = -1;

    public Stack(final int size) {
        this.stack = new char[size];
    }

    public char push(final char c) {
        this.top++;
        this.stack[this.top] = c;
        return c;
    }

    public char pop() {
        final char c = this.stack[this.top];
        this.top--;
        return c;
    }

    public boolean isEmpty() {
        return this.top &gt;= 0;
    }
}
</code></pre>
    </div>