<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>To me you're kind of handling the exception in two ways:</p>

<ul>
<li>you are acting like a library in the sense that you <em>talk</em> about an exception to be raised;</li>
<li>you are acting like an application in the sense that you print out error messages and then continue running.</li>
</ul>

<p>I think you are mainly having the script / function be used as a library, as you return the matrix rather than printing it out. If you talking about handling the exception for a library function, which seems most reasonable, then you should <code>raise</code> an exception rather than returning a <em>magic value</em> (<code>m = 0</code>) that you can check. Make sure that the exception has a clear message that may be put into a stacktrace in case it isn't handled. So you <em>catch and re-raise</em>.</p>

<p>In your case it is probably best to throw a more specific exception in <code>_get_coords</code> though, e.g.:</p>

<pre><code>raise ValueError(f'source_points = {source_points}' +
                 '\n could not be broadcasted as a numerical array' +
                 '\n with shape = (n, 3).')
</code></pre>

<hr>

<blockquote>
  <p>It works fine to me, because I can check if m == 0 in the other script to stop it</p>
</blockquote>

<p>That's <em>exactly</em> what exceptions are for. Just let the other script catch it and stop. The situation could be different if you would want to keep on running with a different matrix.</p>

<p>Magic values are often unclear to the reader, and may be skipped on accident. Try to avoid them as much as possible. You don't want to run on with the magic value as <em>invalid state</em>, so raise and make sure you don't.</p>

<hr>

<p>The same thing happens when you print <code>Processing...</code> to the output stream. Generally library functions don't print to the output stream. If you want to have a progress indication, then allow some kind of progress reporting function to be present as parameter or class field, and report progress that way. If you just want to indicate that it started progressing then you should however just let the <em>user of the library</em> report that a function is called.</p>

<p>Using a logger rather than output stream would be highly advisable.</p>

<p>You can find more information about listeners <a href="https://python-can.readthedocs.io/en/master/listeners.html" rel="nofollow noreferrer">here</a>. Logging is also mentioned over there, which is likely not coincidental.</p>
    </div>