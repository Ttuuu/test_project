<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Attempt 1</h3>

<p>To expand on my rather long comment above, I took the 64x64 multiply <a href="https://github.com/bobbl/libaeabi-cortexm0/blob/master/lmul.S" rel="nofollow">from this library implementation on github</a>, and I modified it to be a 32x32 multiply.  I'm not sure how you are counting the cycles, but this may be equivalent to your 26 cycle implementation because I count 19 "1-cycle" instructions which is the same as in the original post.  I don't know how many cycles the <code>push</code> and <code>pop</code> take.</p>

<pre><code>@ long long mul32(long r1, long r0)
@
@ Multiply r1 and r0 and return the product in r1:r0
@
    .thumb_func
        .global mul32
mul32:

    push    {r4, lr}
    mov     r2, r1

    lsrs    r1, r0, #16
    lsrs    r4, r2, #16
    muls    r1, r4

    lsrs    r3, r0, #16
    uxth    r0, r0
    uxth    r2, r2
    muls    r3, r2
    muls    r4, r0
    muls    r0, r2

    movs    r2, #0
    adds    r3, r4
    adcs    r2, r2
    lsls    r2, #16
    adds    r1, r2

    lsls    r2, r3, #16
    lsrs    r3, #16
    adds    r0, r2
    adcs    r1, r3
    pop {r4, pc}
</code></pre>

<h3>Attempt 2</h3>

<p>Actually, I just transformed the above to this, which should be faster than the original post (it now has 1 fewer instructions than the previous version).  Perhaps you could test it to make sure I didn't do something wrong because I transformed the code in my head:</p>

<pre><code>@ long long mul32(long r1, long r0)
@
@ Multiply r1 and r0 and return the product in r1:r0
@
    .thumb_func
        .global mul32
mul32:

    push    {r4, lr}

    uxth    r2, r1
    lsrs    r3, r0, #16
    lsrs    r1, r1, #16
    mov     r4, r1
    muls    r1, r3

    uxth    r0, r0
    muls    r3, r2
    muls    r4, r0
    muls    r0, r2

    movs    r2, #0
    adds    r3, r4
    adcs    r2, r2
    lsls    r2, #16
    adds    r1, r2

    lsls    r2, r3, #16
    lsrs    r3, #16
    adds    r0, r2
    adcs    r1, r3
    pop {r4, pc}
</code></pre>
    </div>