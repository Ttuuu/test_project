<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Style nits: misspelling of <code>occurence</code>, gratuitous renaming of the problem statement's <code>initialState</code> to <code>initial_state</code>.</p>

<p>I was initially skeptical of your algorithm, but I think I've convinced myself now that it's correct — even the initially mysterious addition of <code>0</code> to the <code>num_set</code>. Basically you're observing that if we have <code>m</code> dials set to the <code>M</code>th position, and <code>n</code> dials set to <code>N</code>th position, then it never makes sense to send them all to some position <code>POS</code> in the middle (<code>M &lt; POS &lt; N</code>). If <code>m &gt; n</code> then we can save time by sending them all to <code>M</code>; if <code>m &lt; n</code> then we save time by sending them all to <code>N</code>; and if <code>m = n</code> then sending them all to <code>POS</code> costs exactly the same amount as sending them all to either <code>M</code> <em>or</em> <code>N</code>. The one special case is when <code>m = n</code> and <code>M &lt; 0 &lt; N</code>, in which case the problem statement requires us to send them all to <code>0</code>... and that's why you special-case <code>num_set.add(0)</code>!</p>

<p>The above reasoning could productively have been recorded in a block comment.</p>

<p>Speed-wise, I see one obvious improvement and one possible improvement.</p>

<pre><code>shortest = {j: 0 for j in num_set}
for i in occurence:
    for j in num_set:
        shortest[j] += min(abs(i-j), k - abs(i-j)) * occurence[i]
return min([[k, shortest[k]] for k in shortest], key=itemgetter(1,0))[0]
</code></pre>

<p>The obvious improvement is that you are repeatedly doing the lookup of <code>occurence[i]</code> (sic) inside your inner loop, even though you could have cached it in the outer loop. Let's do that. And similarly <code>shortest[k]</code>, even though I can't imagine <em>that</em> being a bottleneck:</p>

<pre><code>shortest = {j: 0 for j in num_set}
for i, population in occurence.iteritems():
    for j in num_set:
        shortest[j] += min(abs(i-j), k - abs(i-j)) * population
return min(shortest.iteritems(), key=itemgetter(1,0))[0]
</code></pre>

<p>The possible improvement is that you've got this dict <code>shortest</code> that you're keeping <em>only</em> so that you can take its minimum at the end. This is a classic pattern that's going to come up over and over, so you might as well learn it: <em>keep a running min.</em></p>

<pre><code>best = (0, float('inf'))
for j in num_set:
    score = 0
    for i, population in occurence.iteritems():
        score += min(abs(i-j), k - abs(i-j)) * population
    if score &lt; best[1]:
        best = (j, score)
return best[0]
</code></pre>

<p>This isn't much of anything to look at, but it does completely eliminate the repeated computation of <code>shortest[j]</code> inside your inner loop.</p>

<p>If you'd included some test vectors in your question, then we could run them and see if these changes made any difference in the running time.</p>

<hr>

<p>P.S. — You say your algorithm is <code>O(n*k)</code> (where <code>n</code> = <code>initialState.length</code>), but I believe your <code>num_set</code> optimization makes it actually <code>O(n*n)</code>. Since <code>n</code> is less than <code>10000</code>, you're doing on the order of 100 million ops here, so I'd guesstimate it should be doable in a couple of seconds, tops. How much time are you seeing it take, and on what kind of test cases?</p>
    </div>