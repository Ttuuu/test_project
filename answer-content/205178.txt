<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><p><code>push</code> handles both branches in a curiously similar way. The only difference is that <code>temp-&gt;next</code> becomes <code>NULL</code> when <code>head</code> is <code>NULL</code>, and <code>head</code> otherwise. You should see the redundancy. It always becomes <code>head</code> no matter what <code>head</code> has been before. Consolidate the branches:</p>

<pre><code>node *push(char *element, node *head)
{
    // create space for new element on stack
    node *temp = malloc(sizeof(node));
    if (!temp)
    {
        return NULL;
    }

    strcpy(temp -&gt; string, element);
    temp -&gt; next = head;
    return temp;
}
</code></pre></li>
<li><p>Failure to allocate a node results in the entire list being lost. It seems a bit too drastic.</p></li>
<li><p>I do not endorse a recursive solution when a straightforward iterative one is available. Consider rewriting <code>destroy_stack</code> iteratively.</p></li>
</ul>
    </div>