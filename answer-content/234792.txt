<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>For reference, what I think is the most straightforward solution, that is <em>not</em> fast enough since it does all combinations of three.</p>

<pre><code>from itertools import combinations

class Solution:
    def threeSum(self, nums: List[int]) -&gt; List[List[int]]:
        return set(tuple(c) for c in combinations(sorted(nums), 3) if sum(c) == 0)
</code></pre>

<p>And a longer, but valid solution.</p>

<ul>
<li><p>Take positive and negative numbers separately.</p></li>
<li><p>Add all combinations of two positive numbers where their negative sum is among the negative numbers. Repeat for negative numbers.</p></li>
<li><p>For each number in both negative and positive, add <code>-n, 0, n</code></p></li>
<li><p>If there are three or more zeroes, add <code>0,0,0</code></p></li>
</ul>

<pre class="lang-py prettyprint-override"><code>from itertools import combinations

class Solution:
    def threeSum(self, nums: List[int]) -&gt; List[List[int]]:
        positive = sorted([n for n in nums if n &gt; 0])
        posSet = set(positive)
        negative = sorted([n for n in nums if n &lt; 0])
        negSet = set(negative)
        zeroes = nums.count(0)
        valid = set((a,b,0-a-b) for (a,b) in combinations(positive, 2) if 0-a-b in negSet)
        valid = valid.union(set((a,b,0-a-b) for (a,b) in combinations(negative, 2) if 0-a-b in posSet))
        if(zeroes &gt; 0):
            valid = valid.union(set((-a,0,a) for a in positive if 0-a in negSet))
        if(zeroes &gt; 2):
            valid.add((0,0,0))
        return valid
</code></pre>

<p>Surprisingly good results:</p>

<p><em>Runtime: 360 ms, faster than 98.52% of Python3 online submissions for 3Sum.
Memory Usage: 16.4 MB, less than 97.14% of Python3 online submissions for 3Sum.</em></p>
    </div>