<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I think you would benefit from viewing your processing steps and criteria as <em>filters</em> that operate on <a href="https://docs.python.org/3/library/stdtypes.html#iterator-types" rel="nofollow noreferrer">iterables</a>.</p>

<p>Suppose you have a sequence, like a <code>set</code> or a <code>list</code> or a <code>tuple</code>. You could iterate over that sequence like so:</p>

<pre><code>for item in sequence:
    pass
</code></pre>

<p>Now suppose you use the <a href="https://docs.python.org/3/library/functions.html?highlight=iter%20built#iter" rel="nofollow noreferrer"><code>iter()</code></a> built-in function to create an iterator, instead. Now you can pass around that iterator, and even extract values from it:</p>

<pre><code>it = iter(sequence)
first_item = next(it)
print_remaining_items(it)
</code></pre>

<p>Finally, suppose you take advantage of <a href="https://docs.python.org/3/glossary.html#term-generator" rel="nofollow noreferrer">generator functions</a> and avoid collecting and returning entire lists. You can iterate over the elements of an iterable, inspect the individual values, and yield the ones you choose:</p>

<pre><code>def generator(it):
    for item in it:
        if choose(item):
            yield item
</code></pre>

<p>This allows you to process one iterable, and iterate over the results of your function, which makes it another iterable. </p>

<p>Thus, you can build a "stack" of iterables, with your initial sequence (or perhaps just an iterable) at the bottom, and some generator function at each higher level:</p>

<pre><code>ibl = sequence
st1 = generator(ibl)
st2 = generator(st1)
st3 = generator(st2)

for item in st3:
    print(item)  # Will print chosen items from sequence
</code></pre>

<p>So how would this work in practice?</p>

<p>Let's start with a simple use case: you have an iterable, and you wish to filter it using one or more simple conditionals.</p>

<pre><code>class FilteredData:
    def __init__(self, ibl):
        self.iterable = ibl
        self.condition = self.yes

    def __iter__(self):
        for item in self.ibl:
            if self.condition(item):
                yield item

    def yes(self, item):
        return True

obj = FilteredData([1,2,3,4])

for item in obj:
    print(item)   # 1, 2, 3, 4

obj.condition = lambda item: item % 2 == 0

for item in obj:
    print(item)  # 2, 4
</code></pre>

<p>How can we combine multiple conditions? By "stacking" objects. Wrap one iterable item inside another, and you "compose" the filters:</p>

<pre><code>obj = FilteredData([1,2,3,4])
obj.condition = lambda item: item % 2 == 0
obj2 = FilteredData(obj)
obj2.condition = lambda item: item &lt; 3

for item in obj2:
    print(item)  # 2
</code></pre>

<p>Obviously, you can make things more complex. I'd suggest that you not do that until you establish a clear need.</p>

<p>For example, you could pass in the lambda as part of the constructor. Or subclass FilteredData.</p>

<p>Another example, you could "slurp" up the entire input as part of your <code>__iter__</code> method in order to compute some aggregate value (like min, max, or average) then yield the values one at a time. It's painful since it consumes O(N) memory instead of just O(1), but sometimes it's necessary. That would require a subclass, or a more complex class.</p>
    </div>