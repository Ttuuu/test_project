<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I wrote code like the question once for a Fluent Builder which also accepted <code>Consumer</code> as parameter to allow callers to provide a set of opaque modifications determined earlier. In a menu example this might be:</p>

<pre class="lang-java prettyprint-override"><code>new Fluent&lt;&gt;(new Menu("File")))
  .with(o -&gt; o.setAccelerator(accelerator))
  .with(contextSensitiveMenuItem)
</code></pre>

<p>This rapidly required a varargs call as the opaque-items are variable in number</p>

<pre class="lang-java prettyprint-override"><code>public Fluent&lt;T&gt; with(Consumer&lt;T&gt;... consumers) {
  for (consumer in consumers) {
    consumer.accept(object);
  }
  return this;
}
</code></pre>

<p>Generically, I'm not sure how useful <code>final</code> parameters are in this context. THe compiler will figure that out itself.</p>
    </div>