<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>A more normal code review :-)</p>

<p>OK. This code is good. So anything I have to say is going to have be extremely nit picky to even say anything. So only bother to read if you want to see me at my nit pickiest (I am bored).</p>

<hr>

<p>I have one question. I don't understand this:</p>

<p>OK. I don't understand this.</p>

<pre><code>        template &lt;typename..., typename U = T, REQUIRES(std::is_default_constructible_v&lt;U&gt;)&gt;
        explicit static_vector(size_type n)
        {
            insert_back(n);
        }
</code></pre>

<p>What is happening with the <code>...</code> in this context?</p>

<hr>

<h2>Ahhhh documentation tools</h2>

<pre><code>**
 * @file static_vector.hpp
 */
</code></pre>

<p>Nothing more to say on the subject.<br>
I''l delete the comments before doing any more reviews.</p>

<p>OK. one more thing to say:</p>

<pre><code>        /**
         * @brief Returns `reverse_iterator(begin())`.
         */
        [[nodiscard]] reverse_iterator rend() noexcept
        {
            return reverse_iterator(begin());
        }
</code></pre>

<p>7 lines to do what you could have done in 1.</p>

<p>OK time to invest some time into finding a vim plugin to fold documentation comments so they are not visible. Still want to see normal comments but documentation comments are not really useful for a code review (only the documentation tool generator).</p>

<p>OK. one more real thing to say. Please be consistent with your spacing between comments.</p>

<pre><code>        reference operator[](size_type n)
        {
            assert(n &lt; size());
            return begin()[n];
        }
        // MIY added comment.
        // Sometimes you leave a space beteen the function function and comment
        // Sometimes you don't. If I find a comment folding plugin that will
        // mean that sometimes there is a space between functions and sometimes
        // they are smashed together.
        /**
         * @brief Returns a constant reference to the element with
         * index `n`.  The behavior is undefined if `n &gt;= size()`.
         *
         * @return `begin()[n]`.
         */
        const_reference operator[](size_type n) const
        {
            assert(n &lt; size());
            return begin()[n];
        }
</code></pre>

<hr>

<p>Not sure I like this without protection.</p>

<pre><code>#define REQUIRES(...) std::enable_if_t&lt;(__VA_ARGS__), int&gt; = 0
</code></pre>

<p>Especially since you <code>#undef</code> it at the end. Personally I would add a check around it to make sure that no other system is using it.</p>

<pre><code>#ifdef REQUIRES
#error "This code depends on the macro REQUIRES but it is defined in your code."
#endif
#define REQUIRES(...) std::enable_if_t&lt;(__VA_ARGS__), int&gt; = 0
</code></pre>

<hr>

<p>Wimsical</p>

<pre><code>// inspired by Merriam-Webster's word of the day on August 20, 2019
namespace ethereal {
</code></pre>

<hr>

<pre><code>        template &lt;typename It&gt;
        using iter_category_t = typename std::iterator_traits&lt;It&gt;::iterator_category;
</code></pre>

<p>Type names ending in <code>_t</code> are reserved by POSIX. Not sure I want to tread on their territory. Though i suppose that is only in the global namespace. </p>

<hr>

<p>Not sure I like this style personally (disabling properties by inheritance) but I have seen it around (boost) so its been used before.</p>

<p>OK. I have now read further into the code. Nice usage as it will depend on the type <code>T</code> and its properties. OK. Cool like it.</p>

<pre><code>        // define the copy constructor and copy assignment as deleted
        template &lt;bool Enabled&gt;
        struct copy_base {};

        // Put at least one blank line here.

        template &lt;&gt;
        struct copy_base&lt;false&gt; {
            copy_base() = default;
            copy_base(const copy_base&amp;) = delete;
            copy_base(copy_base&amp;&amp;) = default;
            copy_base&amp; operator=(const copy_base&amp;) = delete;
            copy_base&amp; operator=(copy_base&amp;&amp;) = default;
            ~copy_base() = default;
        };
</code></pre>

<p>My one complaint here is that it is hard to make out the <code>default</code> from <code>deleted</code>. I would group them together so you can at a glance see what is deleted and what is defaulted. I suppose its a common pattern that people know but in that case why not grab one of the standard version (like boost).</p>

<hr>

<p>It's a nice touch to check <code>N</code> here.</p>

<pre><code>    class static_vector {
        static_assert(std::is_destructible_v&lt;T&gt;,
                      "static_vector&lt;T, N&gt; requires std::is_destructible_v&lt;T&gt;");
        static_assert(N &lt;= std::numeric_limits&lt;std::ptrdiff_t&gt;::max(),
                      "static_vector&lt;T, N&gt; requires "
                      "N &lt;= std::numeric_limits&lt;std::ptrdiff_t&gt;::max()");
</code></pre>

<p>But the test <code>N &lt;= std::numeric_limits&lt;std::ptrdiff_t&gt;::max()</code> is not accurate. I would suspect most systems have a limit on the size of the stack frame (OK its been over two decades since I wrote a compiler so that may not be true on modern hardware).</p>

<p>In the old days the size of the stack frame (for the kids the chunk of memory reserved for local variables when a function is entered) was limited. Usually by hardware but sometimes also be compiler. This test is a bit meaningless as <code>std::numeric_limits&lt;std::ptrdiff_t&gt;::max()</code> is very large.</p>

<p>Having a quick look at <code>GCC</code> I found this: <a href="https://gcc.gnu.org/onlinedocs/gcc-3.0.4/gcc/Stack-Checking.html" rel="nofollow noreferrer">https://gcc.gnu.org/onlinedocs/gcc-3.0.4/gcc/Stack-Checking.html</a></p>

<blockquote>
  <p>STACK_CHECK_MAX_FRAME_SIZE<br>
  The maximum size of a stack frame, in bytes. GCC will generate probe instructions in non-leaf functions to ensure at least this many bytes of stack are available. If a stack frame is larger than this size, stack checking will not be reliable and GCC will issue a warning. The default is chosen so that GCC only generates one instruction on most systems. You should normally not change the default value of this macro. </p>
</blockquote>

<hr>

<p>As mention before I have to find a check you have initialized all the members.</p>

<pre><code>        static_vector() noexcept = default;
</code></pre>

<p>That makes it hard to do a code review.<br>
Think of the people you work with. Do you have a documented way to find members so you can check that they are all being correctly initialized.</p>

<hr>

<p>All of these function. I would have made one liners.</p>

<pre><code>        [[nodiscard]] iterator begin() noexcept
        {
            return data();
        }
        [[nodiscard]] const_iterator begin() const noexcept
        {
            return data();
        }
        // etc
</code></pre>

<hr>

<p>What's this for?</p>

<pre><code>        [[nodiscard]] difference_type ssize() const noexcept
        {
            return static_cast&lt;difference_type&gt;(size());
        }
</code></pre>

<p>Why is it diffent from <code>size()</code>?</p>

<hr>

<p>Bad habit.<br>
Not putting the braces around the throw.</p>

<pre><code>        reference at(size_type n)
        {
            if (n &gt;= size())
                throw std::out_of_range{"static_vector&lt;T, N&gt;::at(n) out of range"};
            return begin()[n];
        }
</code></pre>

<hr>

<p>Should this not return <code>pointer</code>?</p>

<pre><code>        [[nodiscard]] T* data() noexcept
        {
            return std::launder(reinterpret_cast&lt;T*&gt;(elems.data()));
        }
</code></pre>
    </div>