<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Comments</h1>
<p>Comments should clarify the code, not simply restate it. You have a lot of comments like this.</p>
<blockquote>
<pre><code>   /// &lt;summary&gt;
   ///     The parent of the node.
   /// &lt;/summary&gt;
   private ITreeNode&lt;T&gt; _parent;
</code></pre>
</blockquote>
<p>It's redundant and noisy. They actually make the code hard to read in my opinion. Secondly, I <em>love</em> doc comments. They're great, but I see no value in placing them on <code>private</code> members. If a private member needs a comment, use a regular one. Or even better, refactor/rename so that a comment is no longer needed.</p>
<h1>Constructors</h1>
<p>You have a lot of them and they tend to duplicate functionality. If you changed one of them, you'd have to change many of them. Use CTor chaining instead. Every other constructor should call on this one. The one that takes in every possible argument.</p>
<blockquote>
<pre><code>   public TreeNode(T value, ITreeNode&lt;T&gt; parent, ITreeNodeCollection&lt;T&gt; children)
   {
       Initialize(value, parent, children);
   }
</code></pre>
</blockquote>
<p>Then you chain it like this.</p>
<pre><code>    /// &lt;summary&gt;
    ///     Creates a new instance of the &lt;see cref="TreeNode{T}" /&gt; class.
    /// &lt;/summary&gt;
    /// &lt;param name="children"&gt;The children of the node.&lt;/param&gt;
    public TreeNode(ITreeNodeCollection&lt;T&gt; children)
        :this(default(T), children: children)
    { }
</code></pre>
<p>Note that utilizing this strategy, you could likely implement all of the <code>Initialize()</code> logic in one ctor, where it belongs.</p>
<h1>Braces</h1>
<p>Use them. Always. Take a look at this snippet.</p>
<blockquote>
<pre><code>       set
       {
           if (value == _children)
               return;

           if (_children != null)
               _children.ForEach(x =&gt; x.SetParent(null, false, false));

           _children = value;
           _children.ForEach(x =&gt; x.SetParent(this, false));
       }
</code></pre>
</blockquote>
<p>Does <code>_children = value</code> execute if <code>children != null</code>, or always? It executes always, but we have to think about it. Don't make me think. Use braces instead. The second thing to consider is that it is likely you will add to/modify the set parent logic that happens if <code>_children</code> isn't null. The second you add another line of code to that logic, you'll need to add the braces anyway. If you forget to, then you've got a bug that didn't need to happen.</p>
<p>Actually, upon further inspection, this method may not be doing what you intended it to do. Minimally, it's doing something silly. If children isn't null, the collection gets looped through twice; setting and then resetting their parents. Double check this property.</p>
<h1>Misc</h1>
<p>This was an interesting design decision. I'm not sure whether I like it or not.</p>
<blockquote>
<pre><code>public ITreeNode&lt;T&gt; Root
{
    get { return (Parent == null) ? this : Parent.Root; }
}
</code></pre>
</blockquote>
<p>I'm not sure I would expect the root node to return itself. I guess it makes sense and it does remove any need to null check the root. So, yeah. I guess I do like this after all. Well done.</p>
<hr>
<p>It's not an entirely thorough review, but that should give you a good start until someone else comes along.</p>
    </div>