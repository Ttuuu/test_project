<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Action.h</strong></p>

<ol>
<li>The <code>Action</code> class only contains public static data members. While it's not illegal, a class might not be the best way to go about it. Consider using <code>struct</code>, which is the same as a <code>class</code> but has <code>public</code>as the default access specifier. Or even better, don't use a <code>class</code> or <code>struct</code> and instead, wrap it inside a namespace, which seems perfect for this kind of thing.</li>
</ol>



<pre><code>namespace Action
{
  static constexpr char moveLEFT{ 'a' };
  static constexpr char moveRIGHT{ 'd' };
  static constexpr char moveDOWN{ 's' };
  static constexpr char rotateLEFT{ 'q' };
  static constexpr char rotateRIGHT{ 'e' };    
} 
</code></pre>

<p>You can then use it the same way as you're doing now. <code>Action::moveLeft</code> et cetera.</p>

<p><strong>Coordinate.cpp</strong></p>

<ol>
<li>Use initializer list instead of setting the members in the body of the constructor. Only it doesn't really matter <em>in this case</em>, it's still a good idea to do so. <a href="https://stackoverflow.com/questions/926752/why-should-i-prefer-to-use-member-initialization-list">See here why.</a></li>
</ol>



<pre><code>Coordinates::Coordinates(int x_, int y_): x(x_), y(y_) { /* empty */ }
</code></pre>

<ol start="2">
<li>Make your getters <code>const</code>. In fact, you should mark all methods that are not modifying your data members <code>const</code>.</li>
</ol>



<pre><code>int Coordinates::getX() const
{
    return x;
}

int Coordinates::getY() const
{
  return y;
}
</code></pre>

<ol start="3">
<li>You don't need to do <code>const int&amp; x</code> in the <code>setX()</code> function. The cost of copying an <code>int</code> is negligible. <code>void setX(int x)</code> is fine. We pass by reference when we want to change the value of the argument <code>void changeValueOfX(int&amp; x)</code> or when a structure is large enough the copying it incurs a non-negligible penalty <code>void doStuffWith2DVector(const std::vector&lt;std::vector&lt;int&gt;&gt;&amp; vec)</code>.</li>
</ol>

<p><strong>Coordinate.h</strong></p>

<ol>
<li>Since all your constructor is doing is setting the value, you could just put the initializer list in this header instead of putting it in the cpp file. </li>
</ol>



<p><code>Coordinates(int x_ = 0, int y_ = 0): x(x_), y(y_) {}</code></p>

<ol start="2">
<li><p><code>using namespace std;</code> is frowned upon, and using it inside a header is a big no-no. Remember that all the code in the header file is literally copy-pasted whenever you do <code>#include "Coordinates.h</code>. That means every file where you include this file will contain the line <code>using namespace std;</code> and can lead to some nasty bugs if you're not careful.</p></li>
<li><p>Don't include headers when you don't need them. The header is not using <code>iostream</code>. Instead, include the file when in the <code>Coordinates.cpp</code> file, when you actually do need to use it. </p></li>
</ol>

<p><strong>Difficulty.cpp</strong></p>

<ol>
<li>Again, no need to do <code>int&amp; counterNumberOfTilesPlayed</code>. Just do <code>int counterNumberOfTilesPlayed</code>. Also, your argument list is inconsistent. In the earlier file you did <code>const int&amp; x</code> and now you're doing <code>int&amp; counterNumberOfTilesPlayed</code>, when you're not changing the value of the argument in either of those.</li>
</ol>

<p><strong>Difficulty.h</strong></p>

<ol>
<li><p>Spelling error in the include guard.</p></li>
<li><p>Again, all your class is containing is public static members and member functions. Wrap them inside a namespace rather than a class. C++ contains OOP features, but we don't have to use it all the time.</p></li>
</ol>

<p><strong>Drawable.cpp</strong></p>

<ol>
<li><p>Mark methods as <code>const</code>. </p></li>
<li><p>Don't need to <code>const int&amp; x</code>, et cetera.</p></li>
</ol>

<p><strong>Drawable.h</strong></p>

<ol>
<li>You don't need <code>windows.h</code> in this file. Move it over to the implementation. </li>
</ol>

<p><strong>Source.cpp</strong></p>

<ol>
<li>I haven't actually looked at the implementation of your code, but there is surely a better way to realize when a player loses than a try catch block. Rethink your logic. A try catch block to decide whether a player loses seems, to be honest, ugly.</li>
</ol>

<p><strong>Table.cpp</strong></p>

<ol>
<li>Use member initializer list in the constructor to sets values of your data members. </li>
</ol>



<pre><code>Table::Table(): score(0)
{
    ...

}
</code></pre>

<p><strong>Table.h</strong></p>

<ol>
<li>Move the non-required headers into the implementation.</li>
</ol>

<p><strong>General</strong></p>

<ol>
<li><p>A lot of your classes contain only or mostly static data. You should reevaluate whether a class is the best choice.</p></li>
<li><p>Your naming of methods and members is too verbose. While variables should always be named to describe their purpose, too long a variable name can be cumbersome, for the person writing the code and the person who will read it. </p></li>
</ol>

<p>A few examples:</p>

<ul>
<li><p><code>moveCoordinatesInADirection(char direction)</code> can be renamed <code>moveCoordinates(char direction)</code>. In both cases, the name describes what the method is doing, but the latter is shorter and more concise.</p></li>
<li><p><code>counterNumberOfTilesPlayed</code> can be renamed <code>numberOfTilesPlayed</code> or <code>numTilesPlayed</code> or even <code>tilesPlayed</code>. </p></li>
<li><p><code>informationAboutGame</code> can be renamed <code>gameInfo</code>.</p></li>
<li><p><code>checkingAndDeletingCompletedLines</code> can be renamed <code>deleteCompletedLines</code></p></li>
<li><p><code>moveTileDownAutomatically</code> can be renamed <code>moveTileDown</code>. </p></li>
</ul>



<p>Any many more..</p>

<ol start="3">
<li>Comments: I firmly believe code should be self-documenting unless a method or variable or statement requires explicit instructions or programmer's intention. </li>
</ol>



<pre><code>void moveTileInADirection(char direction);          // Moves the tile in a specific direction (right, left, down)
</code></pre>

<p>adds nothing to the source code. One could figure it out from the method prototype.</p>

<ol start="4">
<li>Consider using <code>std::vector</code> or <code>std::array</code> instead of C-style arrays.</li>
</ol>
    </div>