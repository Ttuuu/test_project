<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ol>
<li><p>As you are effectively reading the whole file <code>test_in</code> into memory in lots of small independent chunks, consider a different approach:</p>

<ol>
<li>Read the whole file as one big chunk, or preferably simply map it.</li>
<li>Put <code>std::string_view</code>s into that array in the vector, instead of strings.</li>
</ol>

<p>Most <code>std::string</code>s employ SSO, meaning there are two possible states (external string, active SSO), in contrast to the single one for <code>std::string_view</code>. Thus, no branch-misprediction.</p>

<p>Additionally, <code>std::string</code> is generally at least twice the size of <code>std::string_view</code>, so this about halves the size of the vector's data.<br>
Due to allocator overhead, all the small bits of string data would also together likely need considerably more space than that one big chunk.</p></li>
<li><p>You copy the prefix on calling <code>find_prefix()</code>. Better pass a view.</p></li>
<li><p>When you know where the range you want starts, you know it won't end earlier.</p></li>
<li><p><code>++prefix.back();</code> is blatantly wrong.</p>

<ol>
<li><p>If the prefix is empty, it's Undefined Behavior.</p></li>
<li><p>If it causes signed overflow, it's Undefined Behavior.</p></li>
<li><p>If it causes unsigned wrap-around, you simply get a completely wrong end-position, which might even lie before the start-position.</p></li>
</ol>

<p>I suggest simply writing your own comparator and using <code>std::upper_bound()</code> too, as it is intended to be used.</p>

<p>Be aware that <code>char</code> is treated as <code>unsigned char</code> for comparison by <code>std::char_traits&lt;char&gt;</code>. You probably want to mirror that, especially as you used that rule when sorting... I won't go to the trouble of staying that general.</p></li>
<li><p><code>std::equal_range()</code> with a custom comparator does what you want:</p>

<pre><code>template &lt;class RandomAccessIterator&gt;
auto find_prefix(RandomAccessIterator first, RandomAccessIterator last, std::string_view prefix) {
    return std::equal_range(first, last, prefix,
        [n = prefix.size()](std::string_view a, std::string_view b) noexcept {
            return a.substr(0, n) &lt; b.substr(0, n);
    });
}
</code></pre></li>
<li><p>You don't need <code>std::make_tuple</code> in C++17. Just use <code>std::tuple</code> directly:</p>

<pre><code>return std::tuple{low, up};
</code></pre></li>
<li><p>By the way, <code>return 0;</code> is implicit for <code>main()</code>.</p></li>
</ol>
    </div>