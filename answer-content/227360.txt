<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This seems mostly to be an API question?  Assuming all that data for
each of the companies is required and there's no combined API endpoint
that can be fed with, say, 10s or 100s of symbols, this would seem to
be the best way.  If so, there'd still be possible concurrent execution
options to make multiple API requests at the same time and possible get
more throughput with it, though the number of API calls would still be
the same.</p>

<p>The <a href="https://iexcloud.io/docs/api/#streaming" rel="nofollow noreferrer">streaming endpoints</a> looking interesting at first, but they don't support the data here; any other endpoints all look like they only accept single symbols.</p>

<hr>

<p>What you should definitely do is create a (few) function(s) and ideally
get rid of the <code>try</code> blocks.  From a first look I've zero idea where
stuff gets thrown.  But I'm guessing mostly keys not being present.
Preferably this could be handled directly (with default values or
similar features) that do not require lots of exception handling.  Yes,
Python might encourage this, but simply catching <code>ValueError</code> around a
huge block will eventually catch unintended exceptions too.</p>

<p>So at least something like this would be a good start:</p>

<pre><code>def fetch_company_info(ticker):
    company = Stock(ticker, output_format='pandas')

    book_value = 0
    income_ttm = 0

    try:
        # Get income from last 4 quarters, sum it, and store to temp Dataframe
        df_income = company.get_income_statement(period="quarter", last=4)
        df_income['TTM'] = df_income.sum(axis=1)
        income_ttm = int(df_income.loc['netIncome', 'TTM'])

        # Get book value from most recent quarter, and store to temp Dataframe
        df_book = company.get_balance_sheet(period="quarter")
        book_value = int(df_book.loc['shareholderEquity'])

    # Ignore IEX Cloud errors
    except iexfinance.utils.exceptions.IEXQueryError:
        pass

    return income_ttm, book_value
</code></pre>

<p>I also shuffled the variables a bit around - with the right order this
could even be type checked ...</p>

<p>In any case, I can't see anything wrong here and I've removed the other
two exceptions as they look more like hiding problems than actual proper
handling of the exact problem that was encountered.  With the example
names I also couldn't trigger them at all.</p>

<p>The main body of the script is now rather small:</p>

<pre><code># Loop through companies in tickers list
for ticker in tickers:
    # Call IEX Cloud API, and store stats to Dataframe
    output_df.loc[ticker] = fetch_company_info(ticker)

print(output_df)
</code></pre>

<p>If there's no need for reusability then that's it, otherwise I'd suggest
a <code>main</code> function and moving all currently global definitions into it,
then have some argument parser or configuration file handling, etc. to
make it a more fully grown solution.</p>

<hr>

<p>After some discussion in the comments it turns out that splitting the
return values from the assignment can lead to easy mistakes like the
order of the values being wrong.  With that in mind, either the <code>output_df</code>
global should be kept in the function, or (better) be passed in as
a variable instead:</p>

<pre><code>for ticker in tickers:
    fetch_company_info(ticker, output_df)
</code></pre>

<p>and</p>

<pre><code>def fetch_company_info(ticker, output_df):
    ...
    output_df[ticker] = [income_ttm, book_value]
</code></pre>
    </div>