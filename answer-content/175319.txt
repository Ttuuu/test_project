<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'm actually not the right person to properly review your code, since event handling is outside my particular experience, so the overall idea of even having this kind of observer-handler-emitter system might be great or might be a bad idea, I'm not judging. Still, in the context of what you're trying to do, here are several comments.</p>

<h2>Don't skimp on type definitions</h2>

<p>You're missing </p>

<pre><code>using Callback = std::variant&lt;std::function&lt;void(EventTypes)&gt;...&gt;
</code></pre>

<p>so you're repeating yourself with that long type definition in a couple of places (and it's not that readable).</p>

<h2>The <code>IObserver</code> class - an ugly artifact</h2>

<p>The <code>IObserver</code> class has no functionality implemented - not even virtually. You seem to be using it merely for its virtual destructor. You should probably avoid defining this kind of a class.</p>

<p>Also, I'm personally against Hungarian-notation-like naming, such as prending <code>I</code>, but that's a stylistic preference.</p>

<h2>The observer design - a job half-done</h2>

<p>You've made it a point that you want to avoid having to explicitly <code>unsubscribe()</code> event handlers, and for that purpose you're willing to equate the end-of-lifetime of an observer with its unsubscription time. Well, then, just go all the way on the other side: Avoid <code>subscribe()</code> by having the construction of an observer do the subscription. By doing that, you will gain many things:</p>

<ul>
<li>No need to explicitly <code>subscribe()</code> - constructing an observer (which gets passed an emitter) automatically subscribes <em>all</em> relevant handlers.</li>
<li>No need for the emitter to keep a data structure of callbacks per observer - just a set of event types to which it is subscribed.</li>
<li>Actually having some functionality in the <code>Observer</code> class</li>
<li>With some clever use of templates and constexpr code you might just be able to avoid writing any code in specific observers other than the actual event handlers, and just have them inherit from <code>Observer&lt;EventType1, EventType2, EventType3&gt;</code> for example - with templated code in the <code>Observer</code> class taking care of everything, both on construction and on event emission (the emitter will call a method of <code>Observer</code> after all.</li>
</ul>

<h2>Not thread-safe</h2>

<p>Event-related code is typically used in a concurrent/multi-threaded environment. Your code does not seem to be thread-safe (e.g. possible race condition appending to <code>m_observers</code>).</p>

<h2>Sequential execution of handlers</h2>

<p>You're calling the handlers one at a time. Now, perhaps that's reasonable - if you can assume they all take very little time. But if that's not the case, you might consider launching them "all at once", i.e. in their own threads on which you join, or using some executor mechanism etc.</p>

<h2>misnamed <code>m_observers</code></h2>

<p>your <code>m_observers</code> holds callbacks mainly, or callback and weak pointer to observers. Its name suggests otherwise.</p>

<h2>Avoid using <code>std::pair</code></h2>

<p><a href="http://maintainablecode.logdown.com/posts/158531-stdpair-considered-harmful" rel="nofollow noreferrer">std::pair considered harmful!</a></p>

<p>Define a proper struct, with named members, and make the struct and member names meaningful. A method or two might not be a bad idea even if it's essentially a plain-old-data struct, if that increases readability.</p>

<p>In your case, however, this is a moot point, due to:</p>

<h3>Inappropriate data structure for holding callbacks</h3>

<p>The callbacks don't have any particular order. (They could have, if that's important to you; right now it's order of insertion, which is not very meaningful.) So - why are you keeping them in an <code>std::vector</code>? It's not as though you need killer performance and an <code>std::unordered_set</code> is too much overhead, right? Also, even if it was, and you wanted an <code>std::vector</code> - encapsulate that away in some kind of vector-based-set class (even if merely via a type definition).</p>

<p>... but actually, a set won't do either. After all, callbacks are per-observer. So it's a set of pairs. And what's a set of pairs? That's right, a(n unordered) map. So what you should really have there is:</p>

<pre><code>std::unordered_map&lt;std::weak_ptr&lt;IObserver&gt;,std::unordered_set&lt;Callback&gt;&gt; m_callbacks;
</code></pre>

<p>(before any additional typedef'ing you might do.)</p>
    </div>