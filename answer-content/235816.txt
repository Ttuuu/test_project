<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I see no reason why you use <code>IndexOf()</code> at all. <code>string.Replace(string, string)</code> do the search for you and replaces all occurrences in the string anyway. And if the searched string is not found it just returns the original string.</p>

<p>So your algorithm can be reduces to:</p>

<pre><code>  foreach (Item item in items)
  {
    Console.WriteLine($"{item.ChildName.Replace(item.Name, "").Trim()} Car");
  }
</code></pre>

<hr>

<blockquote>
  <p><code>string temp = string.Format("{0} {1}", item.ChildName, "Car");</code></p>
</blockquote>

<p>Why do you have the constant string <code>"Car"</code> as an argument to <code>Format</code> and not just as part of the format string itself.</p>

<hr>

<blockquote>
  <p><code>new Item { Id = 1, Name = "Audi", ChildName = "Audi A3 Premium Plus Audi" }</code></p>
</blockquote>

<p>this will produce this output:</p>

<pre><code>A3 Premium Plus  Car
</code></pre>

<p>(with an space char too many between "Plus" and "Car")</p>

<p>To fix it you must call <code>Trim()</code> on the returned string from <code>Replace()</code>:</p>

<pre><code>string temp = string.Format("{0} {1}", item.ChildName.Replace(item.Name, "").Trim(), "Car");
</code></pre>
    </div>