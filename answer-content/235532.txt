<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<pre><code>If Not DebugMode Then Resume CleanExit Else: Stop: Resume
</code></pre>
</blockquote>

<p>Avoid using the <code>:</code> instruction separator in code. That's good for golfing up quick throw-away code in the <em>immediate pane</em>, not for production code.</p>

<p>Statement syntax is fine when the <code>Then</code> part is a single statement - if it gets any more complex than that, block syntax should be used for clarity and maintainability (much easier to add statements in either conditional branch):</p>

<pre><code>If Not DebugMode Then
    Resume CleanExit
Else
    Stop
    Resume
End If
</code></pre>

<p>It's not clear where <code>DebugMode</code> is defined, but it's clearly not a conditional compilation constant... which means the compiled code includes these debugging helpers. Not a big deal, but essentially the equivalent of shipping a release with the .pdb debug files.</p>

<p>Consider defining <code>DebugMode</code> as a conditional compilation constant, and then the condition can be conditionally compiled, resulting in this code with <code>DebugMode=1</code>:</p>

<pre><code>    Stop
    Resume
</code></pre>

<p>...and this code with <code>DebugMode=0</code>:</p>

<pre><code>    Resume CleanExit
</code></pre>

<p>While the source code would look like this:</p>

<pre><code>#If DebugMode = 0 Then
    Resume CleanExit
#Else
    Stop
    Resume
#End If
</code></pre>

<p>That way no opcodes will be generated for the dead code when <code>DebugMode</code> is toggled on or off, and no condition needs to be evaluated at run-time; static code analysis (Rubberduck) will not see the dead code either, so <a href="http://rubberduckvba.com/Inspections/Details/StopKeyword" rel="nofollow noreferrer">StopKeywordInspection</a> will only fire a result when <code>DebugMode = 1</code>, which can make a great heads-up that you're about to release code that includes instructions that were intended purely for debugging purposes.</p>

<hr>

<p>Avoid noisy banner comments - especially if they're just there to eat up screen estate:</p>

<blockquote>
<pre><code>'
' Private Members
' ---------------
'

'
' Public Members
' --------------
'

'
' Private Methods
' ---------------
'
</code></pre>
</blockquote>

<p>Group your members that way - and then the fact that private methods are private methods among other private methods will be self-evident; comments that plainly state the obvious, should be removed.</p>

<blockquote>
<pre><code>'@Version(1)
'@Folder("App")

Option Explicit
'@PredeclaredId
</code></pre>
</blockquote>

<p>Consider grouping <em>all</em> module annotations together - either above or under <code>Option Explicit</code>... just not on <em>both</em> sides of it: the day [future] you (or a future maintainer) want(s) to add a <code>@ModuleDescription</code> annotation, if annotations are scattered everywhere then new annotations will just end up being added wherever they're added.</p>

<pre><code>'@Folder("App")
'@PredeclaredId
Option Explicit
</code></pre>

<p>If annotations are always consistently above <code>Option Explicit</code>, then the message to the maintainer is clear: we want annotations above <code>Option Explicit</code>, and a maintainer unfamiliar with the code would know to put any new ones where they belong.</p>

<p>Note that <code>@Version</code> isn't a legal Rubberduck annotation, and very likely will never be one: version information (and copyright, authorship, license, diff history, etc.) does not belong in source code. It belongs in a source control repository. If your code isn't under source/version control, then what does a "version" mean anyway? I'd just remove it, it's a noisy comment that poses as a Rubberduck annotation, likely flagged by the <a href="http://rubberduckvba.com/Inspections/Details/IllegalAnnotation" rel="nofollow noreferrer">IllegalAnnotation</a> inspection.</p>

<hr>

<p><code>ReplaceStringInWorkBook</code> is iterating <code>ThisWorkbook.Queries</code>, which makes it very, very misleading. Since it's <code>Private</code>, I'm struggling to see what justifies <code>@IgnoreProcedureNotUsed</code> here - a private method with a misleading name that isn't invoked from anywhere, is dead code that needs to be removed.</p>

<p>A <code>Public</code> procedure (wait why is it in the middle of a bunch of <code>Private</code> methods?) in a framework-type project might be legitimately unused, but the <code>AssignedByValParameter</code> is a real concern here:</p>

<blockquote>
<pre><code>'@Ignore ProcedureNotUsed, AssignedByValParameter
Public Sub TransferQueries(Optional ByVal FromWorkbook As Workbook, Optional ByVal ToWorkbook As Workbook, Optional ByVal overwrite As Boolean = False)
</code></pre>
</blockquote>

<p>By assigning to the supplied parameter, the rest of the procedure loses the ability to tell what the supplied values were. Whether or not the rest of the procedure needs that knowledge makes no difference: the <code>Optional</code> parameters are suspicious and make the public API ambiguous and adds implicit behavior to the calling code... and implicit behavior in an API, while pretty common in the Excel object model, should be avoided like the plague in any modern piece of code. If you don't want to declare and assign local variables instead, consider making the parameters non-optional, and raising an error if <code>FromWorkbook</code> or <code>ToWorkbook</code> isn't specified. If you really need a method that does this with <code>ThisWorkbook</code>, consider exposing a <code>TransferQueriesFromThisWorkbook</code> method that makes it explicit, doesn't take a <code>FromWorkbook</code> argument, and simply passes <code>ThisWorkbook</code> as the first argument to <code>TransferQueries</code>.</p>

<p>Note that <code>ThisWorkbook</code> is an identifier that refers to the host document's <code>ThisWorkbook</code> component, while <code>Application.ThisWorkbook</code> refers to the same, but then if you renamed <code>ThisWorkbook</code> to something else, the VBA project component would need to be updated, but <code>Application.ThisWorkbook</code> will always refer to the host document... except if you renamed <code>ThisWorkbook</code>, then <code>Application.ThisWorkbook</code> gets confusing - consider referring to the host workbook using the <code>ThisWorkbook</code> module identifier like you do for every single other module in your VBA project (and like you're doing everywhere else), because <code>Application.ThisWorkbook</code> is still going to be available through the <code>[_Global]</code> interface, which means renaming <code>ThisWorkbook</code> to <code>SomeWorkbook</code> will make <code>[Application.]ThisWorkbook</code> refer to <code>SomeWorkbook</code>, but as a member call against <code>Application</code>, won't get renamed by Rubberduck's <em>rename</em> refactoring.</p>

<p>Consider ditching the "Manager" suffix - see <a href="https://blog.codinghorror.com/i-shall-call-it-somethingmanager/" rel="nofollow noreferrer">I Shall Call It... SomethingManager</a> on Jeff Atwood's <em>Coding Horror</em> blog for more information.</p>
    </div>