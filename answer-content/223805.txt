<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The aspect of the code that may cause difficulty to those new to Lisp appears to be the fact that in Common Lisp, <code>nil</code> has two meanings.  It's the value of an empty list <code>()</code> and it's also <code>false</code> when used in boolean context.  So when we have something like <code>(or '(1 2 3) ())</code> the first non-<code>NIL</code> list is returned.  When we use <code>and</code> it returns the last item if all items are true (that is, all lists are nonempty if we pass in lists).  If you keep those facts in mind, you'll see that the first code is both consistent and logical.  See also <a href="https://stackoverflow.com/questions/23826145/what-is-the-exact-difference-between-null-and-nil-in-common-lisp">https://stackoverflow.com/questions/23826145/what-is-the-exact-difference-between-null-and-nil-in-common-lisp</a></p>

<p>I'd probably write the code the first way because it's a more compact way of expressing what you've done with <code>if</code> and also only evaluates <code>node-l</code> once instead of twice.  But then, I'd still write <code>car</code> instead of <code>first</code>, so maybe I'm a relic of former days as well.  :)</p>
    </div>