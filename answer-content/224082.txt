<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><a href="https://www.sudhanshutheone.com/posts/double-check-lock-csharp" rel="nofollow noreferrer">Double Check Locking</a> is not recommended. Specially in this case where the time spend inside the lock is minimal.</p>

<blockquote>
<pre><code>public bool TryCapture()
{
    if (!IsCaptured)
        lock (_lock)
            if (!IsCaptured)
                return IsCaptured = true;
    return false;
}
</code></pre>
</blockquote>

<p>Keep it simple..</p>

<pre><code>public bool TryCapture()
{
    lock (_lock)
        if (!IsCaptured)
            return IsCaptured = true;
    return false;
}
</code></pre>

<p>I like this approach in one of the answers the most. It allows the derived class to decide the locking pattern, so you can take advantage <code>Monitor.TryEnter</code>, rather than being held hostage of the lock as designed in <code>TryCapture</code>.</p>

<blockquote>
<pre><code>public abstract class Capture : IDisposable
{
    public static implicit operator bool(Capture capture) =&gt;
        capture.Active;

    protected abstract bool Active { get; }
    public abstract void Dispose();
}
</code></pre>
</blockquote>

<p>If the order of consumers that require exclusive access is important and needs to be fair, you'd need an <em>active object</em> that uses a queue to schedule access to the resource.</p>
    </div>