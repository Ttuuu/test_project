<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Use the function name given in the problem:</p>
<pre><code>def getUnallottedUsers(bids, totalShares):
</code></pre>
<p>The problem doesn't provide any information about the likelihood of there being enough shares for all bidders, so IMO the first for-loop is an example of premature optimization.</p>
<p>Use constants instead of "magic numbers".  Use meaningful names.  Take a look at PEP8 about common formatting conventions.  These things go a long way in making code readable.</p>
<pre><code>USERID = 0
SHARES = 1
PRICE = 2
TIME = 3

bids.sort(key=lambda bid:(-bid[PRICE], bid[TIME]))

for index, bid in enumerate(bids):
    totalShares -= bid[SHARES]

    if totalShares &lt;= 0:
        break
</code></pre>
<p>Answer the question that was asked: "The function must return a list of integers, each an id for those bidders who receive no shares, <strong>sorted ascending</strong>"</p>
<pre><code>return sorted(bid[USERID] for bid in bids[index + 1:])
</code></pre>
<p>All together:</p>
<pre><code>USERID = 0
SHARES = 1
PRICE = 2
TIME = 3

def getUnallottedUsers(bids, totalShares):
    bids.sort(key=lambda bid:(-bid[PRICE], bid[TIME]))

    for index, bid in enumerate(bids):
        totalShares -= bid[SHARES]

        if totalShares &lt;= 0:
            break

    return sorted(bid[USERID] for bid in bids[index + 1:])
</code></pre>
<p>Or use an iterator:</p>
<pre><code>    bids = iter(bids)
    while totalShares &gt; 0:
        price = next(bid)[PRICE]
        totalShares -= price

    return sorted(bid[USERID] for bid in bids)
</code></pre>
    </div>