<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>BUG</h1>

<p>Your code doesn't execute right now, I'm guessing because you recently moved source code: <em>ModuleNotFoundError: No module named 'config'</em>. (Works again if you move <code>config.py</code> to <code>backend/</code>.)</p>

<hr>

<h1>Your questions</h1>

<p><strong>Is there a better way to restructure this project? Are the project files named correctly?</strong></p>

<p>I would move: the entry file (<code>main.py</code>; which you either could call that or rename to something like <code>safer.py</code>) out of your source directory (to the root dir), the database (<code>safer.db</code>) as well as the config file (<code>config.py</code>) out of the root dir. The config file may currently only have a single entry, but I would expect it to grow with the project. You can additionally use <a href="https://docs.python.org/3/library/configparser.html" rel="nofollow noreferrer">configparser</a> for the config, and <a href="https://docs.python.org/3/library/logging.html" rel="nofollow noreferrer">logging</a> instead of some of your info and debug messages.</p>

<p>I also think that <code>views.py</code> is poorly named, given that you yourself write "not really views, actions for my models" about it.</p>

<p>Since some of your functions are "private", you could consider naming them with a leading underscore to signal this.</p>

<p><strong>Is my code modular enough?</strong></p>

<p>You should replace the URI in <code>config.py</code> to a relative path if the database comes with the project. Look at <a href="https://docs.python.org/3/library/pathlib.html" rel="nofollow noreferrer">pathlib</a> and be careful about different operating systems.</p>

<p><strong>What about the logic? Would you use other approach over another when it comes any of the functionality in my code?</strong></p>

<p>I would prefer to have the "front-end" more object-oriented (especially since you already use OOP), and I would separate the "back-end" from the inputs and outputs. It would make it easier if the project grows (say you wanted to add a GUI later), but also for troubleshooting and testing. I would expect a method for getting a list of all passwords instead of having a function that simply prints to stdout the list of all passwords (<code>list_all_passwords()</code>). I would also look at <a href="https://docs.python.org/3/library/re.html" rel="nofollow noreferrer">regular expressions</a> for validation of inputs.</p>

<p>I think you missed an opportunity to use dundermethods for accessing members (your methods <code>get_password_by_name</code>, <code>delete_password</code>, etc.).</p>

<p>I also find it a little strange that you draw your menu and have your switch cases in one place, but you have a separate function for taking the input (<code>get_option()</code>).</p>

<p><strong>Did I stick to the DRY principle enough? If not, what can I improve?</strong></p>

<p>Your global variables (<code>VALID_...</code>) and their usage is a bit repeated.</p>

<p><strong>UX - User experience</strong></p>

<p>It's a bit annoying that it prints out the menu again after each invalid choice, so that the screen eventually stacks up with duplicates. It's also a bit surprising that the app exits after choosing an option in the menu (at least with choice #1).</p>

<hr>

<h1>Other things</h1>

<p><strong>Readability, standard practises</strong></p>

<p>Code looks pythonic and nice in <code>models.py</code> and <code>view.py</code>, slightly less good in the "front-end" (entry) file. I would also have liked to see some tests.</p>

<p>I think you over-document a little, a good example being:</p>

<pre><code>    def __repr__(self) -&gt; str:
        """Representation of the Password object.
        Returns:
            Representation of the Password object as str
        """
        return f"&lt;Password(name='{self.name}', value='{self.value}')&gt;"
</code></pre>

<p>I think you can assume that most readers will know what repr is and does.</p>

<p>I also saw that you only have three commits on your repo. You may want to work on your version control workflow.</p>

<p><strong>Security</strong></p>

<p>I don't think you should allow any type of password, and I think you should more than just notify the user that they've selected an insecure password. If you don't want to force strict passwords, you can just ask them to enter an insecure one again to confirm.</p>

<p><strong>Context manager</strong></p>

<p>I like the idea of a context manager your sessions, but be careful to handle potential errors in your <code>__exit__</code> function.</p>

<p><strong>Surprising behaviour/prompt</strong></p>

<p>In the same vein, raise errors in your back-end but deal with them yourself in the front-end; don't do this:</p>

<pre><code>    if not is_master_password_valid(master_password):
        raise ValueError("Please insert a valid master key.")
</code></pre>

<p><strong>Refactoring</strong></p>

<p>Some of your <code>if</code>-clauses should be <code>elif</code> (or you could refactor to dicts), and I would prefer to see your loops reworked.</p>

<hr>

<h1>PS.</h1>

<ul>
<li><p>Since you use <code>typing</code> anyway, you can use <code>typing.NoReturn</code> for your side-effect-only type-hints.</p></li>
<li><p>You don't need the <code>__init__.py</code> since Python3.3.</p></li>
</ul>
    </div>