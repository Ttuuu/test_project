<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>If you're trying to learn C++, you should get comfortable with constructors and destructors — they're what C++ is all about!</p>

<pre><code>struct Node 
{ 
    int data; 
    Node *left, *right; 
}; 

// A utility function to create a new BST node 
Node* newNode(int data) 
{ 
    Node *temp =  new Node(); 
    temp-&gt;data = data; 
    temp-&gt;left = NULL; 
    temp-&gt;right = NULL; 
    return temp; 
}
</code></pre>

<p>That's C style. C++ style would be:</p>

<pre><code>struct Node { 
    int data_; 
    Node *left_ = nullptr;
    Node *right_ = nullptr;

    explicit Node(int data) : data_(data) {}
}; 
</code></pre>

<p>Then when you want a new heap-allocated node, you don't call <code>newNode(42)</code> — you call <code>new Node(42)</code>! Or, a good habit you should get into: call <code>std::make_unique&lt;Node&gt;(42)</code> to get back a <a href="https://en.cppreference.com/w/cpp/memory/unique_ptr" rel="noreferrer">smart pointer</a>.</p>

<p>Notice that I added sigils to your data members (<code>data_</code> etc) to distinguish them from non-member variables; and I declared no more than one variable per line to reduce reader confusion.</p>

<hr>

<pre><code>void inorder(Node *&amp;root) 
{ 
    if (root != NULL) 
    { 
        inorder(((root)-&gt;left)); 
        printf("%d \n", (root)-&gt;data); 
        inorder(((root)-&gt;right)); 
    } 
}
</code></pre>

<p>Several things weird here. First, you have a bunch of unnecessary parentheses. <code>(root)</code> is the same thing as <code>root</code>. Second, you're passing <code>root</code> by <em>non-const reference</em>, even though you don't intend to modify it. Third, very minor nit, you're using C-style <code>NULL</code> instead of <code>nullptr</code>. Fourth, why do you print a space before the newline? Fixed up:</p>

<pre><code>void inorder(const Node *root)
{
    if (root != nullptr) {
        inorder(root-&gt;left); 
        printf("%d\n", root-&gt;data); 
        inorder(root-&gt;right); 
    } 
}
</code></pre>

<p>Remember to remove the redundant parentheses in places like <code>insert(((node)-&gt;right),value)</code>. It's much easier to read as <code>insert(node-&gt;right, value)</code>.</p>
    </div>