<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I would say we need to look at design of your game.</p>

<p>To me an adventure game is moving through a set of locations. At each locatoin you can move to another location (that is linked to the current location) or interact with objects at that location. So it seems to me that you want to build a graph of locations.</p>

<p>So first we have a game object.</p>

<pre><code> class Game
 {
      std::string  currentLocation;                // Assuming a one player game
                                                   // You only need to store that
                                                   // players location.

      std::map&lt;std::string, Location&gt;   locations; // All locations in the game
                                                   // You can look them up by name.
 };
</code></pre>

<p>So we have a game with locations. But how does that fit together.</p>

<pre><code> class Location
 {
     std::string                           description;
     std::map&lt;std::string, std::string&gt;    linked;       // Places linked to from
                                                         // here. The action is the key
                                                         // the location is the value
                                                         // and you can get the location
                                                         // details by looking up the 
                                                         // location in the map.
     std::vector&lt;std::string&gt;              thingsLyingHere;
 };

 Example:
 ========
   description: "You are on a road that heads west and east of your position."
   linked["Go West"]  = "TheCreepyCrossroads";
   linked["Go East"]  = "TheLongRoad";
   linked["Wait for something to happen"] = "Waiting At Start";
</code></pre>

<p>Now your main program looks at your current location. Looks that location up in the <code>Game</code> object and can print out the description and options for that location. When your user types in one of the available actions you look that up in linked and update the current location. Then you start the loop again.</p>
    </div>