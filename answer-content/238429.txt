<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>One way to (slightly) speed up repeated connections to the same server is to use a <a href="https://2.python-requests.org/en/v1.1.0/user/advanced/#session-objects" rel="nofollow noreferrer"><code>Session</code></a>, which keeps the connection alive.</p>

<p>In addition, <code>requests</code> can take a parameter dictionary which will even take care of urlencoding for you:</p>

<pre><code>import requests

URL = "https://api.tripgo.com/v1/routing.json"
HEADERS = {'Accept': 'application/json',
           'X-TripGo-Key': "XXXX"}

with requests.Session() as session:
    ...
    for ind, (_, orig_cord, dest_cord, dep_time) in database.iterrows():
        params = {"from": f"({orig_cord})",
                  "dest": f"({dest_cord})",
                  "modes": mode,
                  "departAfter": dep_time,
                  "v": 11, "locale": "en", "ir": "true"}

        data = session.get(URL, params=params, headers=headers).json()
        ...
</code></pre>

<p>Note that I followed Python's official style-guide, <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">PEP8</a>, by having spaces around <code>=</code> when using it for assignment and after commas, used tuple unpacking to directly set the variables in the loop instead of having to do it manually right away and used the relatively new <a href="https://www.python.org/dev/peps/pep-0498/" rel="nofollow noreferrer"><code>f-string</code></a> to get the parenthesis around the parameters where needed.</p>

<p>If the API does not support making multiple requests at once, you might also have to look into making multiple requests in parallel, e.g. using <a href="https://aiohttp.readthedocs.io/en/stable/" rel="nofollow noreferrer"><code>aiohttp</code></a> like I did in <a href="https://codereview.stackexchange.com/questions/237253/wordcloud-from-all-answers-of-a-user-here-on-cr">this recent question of mine</a>.</p>

<hr>

<p>For your nested <code>for</code> loop, I'm not sure there is a better way to check all nested subentries. But you can at least make it into a <a href="https://djangostars.com/blog/list-comprehensions-and-generator-expressions/" rel="nofollow noreferrer">generator expression</a> that flattens it and then use the built-in <code>min</code>:</p>

<pre><code>from operator import itemgetter

trips = (trip for group in data["groups"] for trip in group
         if trip["depart"] &gt;= dep_time)
best_trip = min(trips, key=itemgetter("arrive"))
</code></pre>

<p>Note that <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">PEP8</a> recommends using <code>lower_case</code> for variables (and functions).</p>

<hr>

<p>This line does not do what you think it does:</p>

<pre><code>if 'groups'and'segmentTemplates'in TripGoData:
</code></pre>

<p>This is parsed as </p>

<pre><code>if ('groups' and 'segmentTemplates') in TrupGoData:
</code></pre>

<p>which is </p>

<pre><code>if 'segmentTemplates' in TrupGoData:
</code></pre>

<p>because non-empty strings are truthy and <code>and</code> returns the last value if all values are truthy (and the first falsey value if not).</p>

<p>Instead you have to use</p>

<pre><code>if 'groups' in TrupGoData and 'segmentTemplates' in TrupGoData:
</code></pre>

<hr>

<p>And for writing to a csv it is probably easier to use <a href="https://docs.python.org/3/library/csv.html#csv.DictWriter" rel="nofollow noreferrer"><code>csv.DictWriter</code></a> and return dictionaries from each row:</p>

<pre><code>import csv

def get_best_trip_info(orig_cord, dest_cord, dep_time):
    data = ...
    best_trip = ...
    out = {}
    out["carbonCost"] = best_trip['carbonCost']
    ...
    return out


database = ...
with open('Car_Data.csv', "w") as out_file
    writer = csv.DictWriter(out_file, ["carbonCost", ...])
    writer.writerows(get_best_trip_info(orig_cord, dest_cord, dep_time)
                     for ind, (_, orig_cord, dest_cord, dep_time) in database.iterrows())
</code></pre>
    </div>