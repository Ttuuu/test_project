<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The intro you provided for this question is a good start on a module level comment or docstring that describes <strong>why</strong> the module is coded the way it is.</p>
<pre><code>"""
This module generates random points on the perimeter of a ellipse.

The naive approach of picking a random angle and computing the
corresponding points on the ellipse results in points that are not
uniformly distributed along the perimeter.

This module generates points that are uniformly distributed
on the perimeter by:

  1. Compute P, the perimeter of the ellipse.  There isn't a simple
     formula for the perimeter so it is calculated numerically.
  2. Pick a random number s on [0,P].
  3. Determine the angle t associated with the arc [0,s].
  4. Compute the x- and y-coordinates associated with t from the
     parametric equation of the ellipse.
"""
</code></pre>
<p>To respond to your comment, put the plotting code at the end of the file in a <code>if __name__ == "__main__":</code> guard (<a href="https://docs.python.org/3/library/__main__.html#module-__main__" rel="nofollow noreferrer">see docs</a>).  If you run the file as a script or using <code>python -m</code> it will run the plotting code. If the file is imported then this code is not included.</p>
<pre><code>if __name__ == "__main__":

    import matplotlib.pyplot as plt

    np.random.seed(4987)
    
    x1, y1 = rand_ellipse_bad(2, .5, 1000)
    x2, y2 = rand_ellipse(2, .5, 1000, 1000)
    
    fig, ax = plt.subplots(2, 1, figsize=(13, 7), sharex=True, sharey=True)
    fig.suptitle('Generating random points on perimeter of ellipse', size=18)
    ax[0].set_aspect('equal')
    ax[1].set_aspect('equal')
    ax[0].scatter(x1, y1, marker="+", alpha=0.5, color="crimson")
    ax[1].scatter(x2, y2, marker="+", alpha=0.5, color="forestgreen")
    ax[0].set_title("Bad method: Points clustered along major axis")
    ax[1].set_title("Correct method: Evenly distributed points")

    # Plot arc length as function of theta
    theta_from_arc_length, domain = theta_from_arc_length_constructor(2, .5, theta=2*np.pi, n=100)
    s_plot = np.linspace(0, domain, 100)
    t_plot = theta_from_arc_length(s_plot)
    
    fig, ax = plt.subplots(figsize=(7,7), sharex=True, sharey=True)
    ax.plot(t_plot, s_plot)
    ax.set_xlabel(r'$\theta$')
    ax.set_ylabel(r'cumulative arc length')
</code></pre>
    </div>