<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<p>... <code>for digit in num_as_string[::-1]:</code>. In this loop, it's just <span class="math-container">\$O(n)\$</span> where n is just number of digits of the input.</p>
<p>I am assuming the time complexity of this code is something like O(n) + 2 * O(number of digits in base10) which is linear.</p>
</blockquote>
<p>This is not quite right.  The second and third loops will loop the number of digits <strong>in base <span class="math-container">\$b_2\$</span></strong> (not in base 10), which is approximately <span class="math-container">\$n * \frac {\log b_1}{\log b_2}\$</span> times, so your time complexity would be:</p>
<p><span class="math-container">$$O(n) + 2 * \frac{\log b_1}{\log b_2} * O(n)$$</span></p>
<p>which is of course is still simply <span class="math-container">\$O(n)\$</span>.</p>
<p>This also means your space complexity is not "<em>O(number of digits in base10)</em>"; it is O(number digits in <span class="math-container">\$b_2\$</span>), but again, these are constant factors, and becomes simply <span class="math-container">\$O(n)\$</span>.</p>
<p>Still, it is unusual to express it the complexity in terms of the number of digits of the input.  Usually, you have an input value N, (which can be expressed in <span class="math-container">\$\log_{b_1}N\$</span> digits), and would express the complexity of the algorithm as <span class="math-container">\$O(\log N)\$</span>.</p>
<hr>
<h2>Except ...</h2>
<pre><code>res = ''
for i in converted[::-1]:
    res += string.hexdigits[i].upper()
</code></pre>
<p>Which actually makes this an <span class="math-container">\$O(n^2)\$</span> algorithm, since while you are looping, you are copying all previous digits to add one character.  Convert all the digits into the appropriate character, and then join them all together at once:</p>
<pre><code>res = ''.join(string.hexdigits[digit] for digit in converted[::-1]).upper()
</code></pre>
<hr>
<p>Using <code>% b2</code> and <code>//= b2</code> back-to-back is generally inefficient.  When the math library computes one, it almost always has computed the other as a side effect.  The <code>divmod()</code> function returns both values:</p>
<pre><code>while base10 &gt; 0:
    base10, digit = divmod(base10, b2)
    converted.append(digit)
</code></pre>
<hr>
<p>Practice for a coding interview?  You'd better clean up this code considerably.  In addition to @Reinderien's suggestions, look at your two <code>return</code> statements</p>
<pre><code>return '-' + str(base10) if is_neg else str(base10)
return '-' + res if is_neg else res
</code></pre>
<p>These look exactly the same, if <code>res = str(base10)</code>.  Try to rework your code to handle the <code>is_neg</code> test only once, and only use 1 <code>return</code> statement.</p>
    </div>