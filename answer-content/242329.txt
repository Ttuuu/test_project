<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>My answer is about how you can obtain the same results with a less complex code using a <code>List</code> more adapt than arrays to the nature of the problem. Examining your example :</p>

<pre><code>arr = [5, 5, 2, 5, 8], --&gt; erase the first 5 is equal to left shift the original array obtaining the array [5, 2, 5, 8] deleting the last position

arr = [5, 5, 2, 5, 8], --&gt; erase the second 5 is equal to left shift the original array obtaining the array [5, 2, 5, 8] deleting the last position

arr = [5, 5, 2, 5, 8], --&gt; erase the 2 is equal to left shift the original array obtaining the array [5, 5, 5, 8] deleting the last position

... other iterations
</code></pre>

<p>This can be obtained using the <code>List</code> method <code>remove</code> equal to the left shift and after adding the removed element to the <code>List</code> at the same position so you obtain again the original list.
Your method <code>countBalancingElements</code> can be rewritten in the following way :</p>

<pre><code>public static int countBalancingElements(int[] arr) {
    int count = 0;
    List&lt;Integer&gt; list = Arrays.stream(arr).boxed().collect(Collectors.toList());
    final int length = arr.length;

    for (int i = 0; i &lt; length; ++i) {
        int oddSum = 0;
        int evenSum = 0;
        int removed = list.remove(i); //&lt;--remove one element at every iteration
        for (int j = 0; j &lt; length - 1; ++j) {
            if (j % 2 == 0) { evenSum += list.get(j); }
            else { oddSum += list.get(j); }
        }
        if (oddSum == evenSum) { ++count; }
        list.add(i, removed); //&lt;-- add the removed element at the same position 
    }

    return count;
}
</code></pre>
    </div>