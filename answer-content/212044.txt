<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>I am trying to find all primes less than 2,000,000 and sum them
  together. My code currently takes 1'36" to run. Is there a faster way
  to get my solution?</p>
</blockquote>

<hr>

<p>Yes. For example,</p>

<pre><code>142913828922
3.860761ms
</code></pre>

<p>versus your</p>

<pre><code>142913828922
1m35.090248409s
</code></pre>

<hr>

<p><code>prime.go</code>:</p>

<pre><code>package main

import (
    "fmt"
    "time"
)

const (
    prime    = 0x00
    notprime = 0xFF
)

func oddPrimes(n uint64) (sieve []uint8) {
    sieve = make([]uint8, (n+1)/2)
    sieve[0] = notprime
    p := uint64(3)
    for i := p * p; i &lt;= n; i = p * p {
        for j := i; j &lt;= n; j += 2 * p {
            sieve[j/2] = notprime
        }
        for p += 2; sieve[p/2] == notprime; p += 2 {
        }
    }
    return sieve
}

func sumPrimes(n uint64) uint64 {
    sum := uint64(0)
    if n &gt;= 2 {
        sum += 2
    }
    for i, p := range oddPrimes(n) {
        if p == prime {
            sum += 2*uint64(i) + 1
        }
    }
    return sum
}

func main() {
    start := time.Now()

    var n uint64 = 2000000 - 1
    sum := sumPrimes(n)
    fmt.Println(sum)

    fmt.Println(time.Since(start))
}
</code></pre>

<hr>

<p>Reference: <a href="https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes" rel="nofollow noreferrer">Sieve of Eratosthenes - Wikipedia</a> </p>

<hr>

<p>Go was designed for Google scale. Therefore, Go package <code>testing</code> includes benchmarking tools. For example,</p>

<pre><code>$ go test -bench=. -benchmem
BenchmarkPeterSO-8     500        3805125 ns/op    1007621 B/op     1 allocs/op
BenchmarkNightman-8      1    95703259026 ns/op    5866752 B/op    31 allocs/op
$ 
</code></pre>

<hr>

<blockquote>
  <p>Comment: You have presented an alternative solution, but haven't
  reviewed the code. Please explain your reasoning (how your solution
  works and why it is better than the original) so that the author and
  other readers can learn from your thought process. â€“ <a href="https://codereview.stackexchange.com/users/35991/martin-r">Martin
  R</a></p>
</blockquote>

<hr>

<p>The thought process is simple, obvious, and well-known. </p>

<p>The prime number problem is well-known.</p>

<p>Therefore, <a href="https://en.wikipedia.org/wiki/Standing_on_the_shoulders_of_giants" rel="nofollow noreferrer">Standing on the shoulders of giants - Wikipdia</a>.</p>

<p>"If I have seen further it is by standing on the sholders [sic] of Giants." Isaac Newton</p>

<p>For example, <a href="https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes" rel="nofollow noreferrer">Sieve of Eratosthenes - Wikipedia</a>.</p>

<p>The algorithm given in the question is much slower than Eratosthenes' well-known algorithm, approximately 25,000 times slower.</p>

<p>In real-world code reviews, code should be correct, maintainable, robust, reasonably efficient, and, most importantly, readable. The code in the question is not reasonably efficient.</p>
    </div>