<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>General</h2>

<ul>
<li><p>As per <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">PEP 8</a> conventions, the variables in functions should be in lowercase.</p></li>
<li><p>Adding docstrings is recommended. <a href="https://www.python.org/dev/peps/pep-0257/" rel="nofollow noreferrer">PEP 257</a></p></li>
<li><p>Names should be short and meaningful. For example, <code>convert_number_to_binary</code> should actually be <code>to_base_minus_two</code>. Also, <code>calculate_number</code> should be <code>from_base_minus_two</code></p></li>
<li><p>Use <a href="https://stackoverflow.com/questions/32557920/what-are-type-hints-in-python-3-5">type hints</a></p></li>
<li><p>Instead of <code>x == 0</code> python allows you to use use <code>not x</code>. Similarly, <code>x != 0</code> can be replaced with <code>x</code>.</p></li>
<li><p>Envelop the main code inside <code>if __name__ == '__main__':</code>. This will prevent the code from being run if imported from another module.</p></li>
<li><p>Following  @Martin R's advice, you can change -2 to a constant <code>BASE</code></p></li>
</ul>

<h2>Function <code>solution</code></h2>

<pre class="lang-py prettyprint-override"><code>value = math.ceil(from_base_minus_two(A) / 2)
p = to_base_minus_two(value)
return p
</code></pre>

<p>Can be replaced with the one liner:</p>

<pre class="lang-py prettyprint-override"><code>return to_base_minus_two(math.ceil(from_base_minus_two(a) / 2))
</code></pre>

<h2>Function <code>from_base_minus_two</code></h2>

<pre><code>total = 0
for i in range(0, len(a)):
    total += a[i] * BASE ** i
return total
</code></pre>

<p>Instead, you can use:</p>

<pre><code>return sum(j * BASE ** i for i, j in enumerate(a)))
</code></pre>

<h2>Function <code>to_base_minus_two</code></h2>

<p>The value you are finding isn't exactly <code>binary</code>. Change it to <code>base_minus_two</code></p>

<p>You don't need to use</p>

<pre class="lang-py prettyprint-override"><code>if number == 0:
    return base_minus_two
</code></pre>

<p>Automatically, the while loop will terminate immediately as <code>number</code> is 0, and will return <code>base_minus_two</code> which is <code>[]</code></p>

<hr>

<p>Here's what the final code might look like:</p>

<pre class="lang-py prettyprint-override"><code>import math
from typing import List


BASE = -2


def from_base_minus_two(a: List[int]) -&gt; int:
    """ Converts base 'BASE' to decimal """

    return sum(j * BASE ** i for i, j in enumerate(a))


def to_base_minus_two(number: int) -&gt; List[int]:
    """ Converts decimal to 'BASE' """

    base_minus_two = []

    while number:
        number, remainder = divmod(number, BASE)

        if remainder &lt; 0:
            number += 1
            remainder -= BASE

        base_minus_two.append(remainder)

    return base_minus_two


def solution(a: List[int]) -&gt; List[int]:
    """

    * Converts from 'BASE' to decimal
    * Divides the decimal by 2
    * Converts the decimal back to 'BASE'

    """

    return to_base_minus_two(math.ceil(from_base_minus_two(a) / 2))


if __name__ == '__main__':
    print(solution([1, 0, 0, 1, 1, 1]))
</code></pre>
    </div>