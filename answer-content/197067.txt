<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>Holy crap. All that just to get Rounded corners?</p>
</blockquote>

<p>Yes, I wholeheartedly agree with that comment. It is astonishing, how some things that sound trivial - are extremely complicated in WPF. But there is only so much that you can do. You can either fight it or embrace it (you can also choose different framework, but that's another story). And when choosing between those two options, you have to consider this:</p>

<p>What are the chances, that you are not going to change default templates anyway in the future? In my experience those chances are often quite slim. If you care enough about your UI that corner radius bothers you, then that's probably not the only thing you will need to change. What about that highlight color? What about other controls? Will you change corner radius of scrollbar buttons also? Progressbar?</p>

<blockquote>
  <p>Correct me if I'm wrong. For this you should 1) Store nearly a hundred
  lines of code for default button styles, 2) Create new class with
  attached property (you can't write Border.CornerRadius="10" for
  button, can you?)</p>
</blockquote>

<p>Yes, you can't, but you can set it in style. This code works:</p>

<pre><code>&lt;Page
  xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
  xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"&gt;
  &lt;Button&gt;  
      &lt;Button.Style&gt;
          &lt;Style TargetType="Button"&gt;
              &lt;Setter Property="Border.CornerRadius" Value="15"/&gt;
              &lt;Setter Property="Width" Value="100"/&gt;
              &lt;Setter Property="Height" Value="100"/&gt;
              &lt;Setter Property="Template"&gt;
                  &lt;Setter.Value&gt;
                      &lt;ControlTemplate&gt;
                          &lt;Border CornerRadius="{TemplateBinding Border.CornerRadius}" 
                                  BorderThickness="1" Background="Green" BorderBrush="Black"/&gt;
                      &lt;/ControlTemplate&gt;
                  &lt;/Setter.Value&gt;
              &lt;/Setter&gt;
          &lt;/Style&gt;
      &lt;/Button.Style&gt;
  &lt;/Button&gt;
&lt;/Page&gt;
</code></pre>

<p>But you can, of course, use your own stand-alone attached property (there is no need to subclass anything). You can even make it inherited, and set it for you entire <code>MainWindow</code>, so that all controls are affected.</p>

<hr>

<p>Don't get me wrong, I often write similar behaviors myself. I just think that whenever I want to modify control template via behavior, it is a good idea to carefully consider <a href="http://i0.kym-cdn.com/entries/icons/original/000/019/952/ZKCXVpE.jpg" rel="nofollow noreferrer">the implications</a>. Yes, when you override template, there is some initial copy-pasting. But then it just works. Want to databind <code>Padding</code> property? Fine. Want to change corner radius property via animation? Sure. Want to use those buttons inside a docked window, that can reload its content multiple times? No problem.</p>

<p>You solution on the other hand is very much tied to your current use case:</p>

<p>1) It overrides padding property, potentially breaking triggers and databindings.</p>

<p>2) It does not allow modifications to <code>CornerRadius</code> after control is loaded.</p>

<p>3) It will not work, if <code>Loaded</code> event triggers more than once. Most notably, your padding will just keep growing.</p>

<p>4) It relies heavily on the fact, that default button template has an element named <code>border</code>. But will it in the future versions of the framework? I mean realistically, it probably will, but this assumption still feels shaky.</p>

<p>There might be other edge cases, where you behavior will fail but the template will not. So is it all worth it? I am not so sure.</p>
    </div>