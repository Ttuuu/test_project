<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Formatting</h2>

<p>It may seem petty, but, as janos already pointed out, use a code formatter.
(Ctrl-Shift-F on a vanilla eclipse is your friend).
Stick to one style throughout a project.</p>

<p>Especially indentation can be seriously misleading (this makes me cringe ;-) ):</p>

<pre><code>        }
        }else
        if(..){
            ..
            if(..){
                ..
            }else{
                ..
            ..
            if(..){
                ..
            }
            ..  
        }
        }
}
</code></pre>

<p>Correct indentation enables you to see class / subclass / method / block / nested block boundaries at a glance.</p>

<h2>Externalize 'magic' numbers</h2>

<p>You'll have a hard time if you ever want to change anything about the game mechanics.
Define and use constants (or constant fields or enums) for values that won't change.</p>

<pre><code>public static final int INITIAL_ARCHER_HP = 14;

private static void buildArcher() {
    ..
    playerhp = INITIAL_ARCHER_HP;
    ..
}
</code></pre>

<p>This way, everything is defined once and all definitions are in one place.</p>

<h2>Code</h2>

<ul>
<li>keep in mind that <code>String.charAt()</code> will give you unexpected results if you have to use exotic charsets (see <a href="https://stackoverflow.com/questions/12280801/what-exactly-does-string-codepointat-do">this discussion</a> ).</li>
<li>consider a simple <code>return</code> rather than <code>System.exit(0)</code>.
It might be fine for a small standalone Java application, but it terminates the JVM rather abruptly, which in a multithreaded application, could be rather suprising to all other threads..</li>
</ul>

<p>(btw: the <code>return;</code> after the <code>System.exit(0);</code> is never reached)</p>
    </div>