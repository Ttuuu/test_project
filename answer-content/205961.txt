<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Having <code>topicClient</code> and <code>queueClient</code> as class fields is unnecessary here, and potentially leads to exception scenarios.</p>

<p>For example, if you were to create a new <code>MessageBroker</code> and immediately call <code>Dispose()</code> without first calling both the other methods then a <code>NullReferenceException</code> will be thrown as <code>topicClient</code> and <code>queueClient</code> are only defined within these methods.</p>

<p>An alternative could be to make use of the <code>using</code> syntax to instantiate a client and dispose of it when done. e.g.</p>

<pre><code>using(var topicClient = TopicClient.CreateFromConnectionString(appConfiguration.BrokerConnectionString, topicName))
{
    BrokeredMessage brokeredMessage = new BrokeredMessage(message);
    await topicClient.SendAsync(brokeredMessage);
}
</code></pre>

<p>Using this approach would allow you to remove the <code>IDisposable</code> implementation.</p>

<p>If you want to be able to re-use the same <code>topicClient</code> and <code>queueClient</code> then you could have a <code>MessageBroker</code> for a specific <code>queueName</code> and/or <code>topicName</code>, and define the clients from the constructor.
(Creating new <code>MessageBrokers</code> as necessary for new queue and topic names.)</p>

<pre><code>public class MessageBroker : IMessageBroker, IDisposable
{
    private readonly TopicClient topicClient;
    private readonly QueueClient queueClient;

    public MessageBroker(IAppConfiguration appConfiguration, string queueName, string topicName)
    {
        this.queueClient = QueueClient.CreateFromConnectionString(appConfiguration.BrokerConnectionString, queueName);
        this.topicClient = TopicClient.CreateFromConnectionString(appConfiguration.BrokerConnectionString, topicName);
    }

    public async Task SendMessageToQueueAsync(string message)
    {
        BrokeredMessage brokeredMessage = new BrokeredMessage(message);
        await queueClient.SendAsync(brokeredMessage);
    }

    public async Task SendMessageToTopicAsync(string message)
    {
        BrokeredMessage brokeredMessage = new BrokeredMessage(message);
        await topicClient.SendAsync(brokeredMessage);
    }

    public void Dispose()
    {
        this.queueClient.Close();
        this.topicClient.Close();
    }
}
</code></pre>

<p>If you have need of only one <code>MessageBroker</code> (i.e. one <code>topicName</code> and <code>queueName</code>) then this will be sufficient, and an instance of this can be registered within your DI.</p>

<p>Otherwise, you will need some sort of <code>MessageBrokerFactory</code> which can be used to create a <code>MessageBroker</code> for a given queue/topic name, that can then be re-used.</p>

<pre><code>public MessageBrokerFactory {
    private readonly IAppConfiguration appConfiguration;

    public MessageBrokerFactory(IAppConfiguration appConfiguration)
    {
        this.appConfiguration = appConfiguration;
    }

    public IMessageBroker Create(string queueName, string topicName)
    {
        return new MessageBroker(
            this.appConfiguration,
            queueName,
            topicName);
    }
}
</code></pre>
    </div>