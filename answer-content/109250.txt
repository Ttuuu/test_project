<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First, don't use <code>for-in</code> for arrays. It will run through the elements of the array <em>as well as other properties</em>. Use a regular for loop, or better use <code>map</code> instead. Additionally, I suggest you name <code>params</code> to something else. <code>params</code> is too generic, plus the array isn't really "params". It's a list of player names.</p>

<pre><code>var players = playerNames.map(function(player){
  return { name: player, frames : []}
});
</code></pre>

<p>In <code>frameFinished</code>, I see you use <code>map</code> to construct a sum. <code>reduce</code> is the better method for such operation.</p>

<pre><code>var sumRolls = players[playerNumber].frames[currentFrame].reduce(function(sum, item){
  return sum + item;
}, 0);
</code></pre>

<p>Further down in the same function, I see you have a bunch of conditions. You can actually just combine them. Additionally, conditions are by themselves boolean. No need to use a ternary to return <code>true</code> or <code>false</code>. Also, I suggest you put the values in variables for easy comprehension.</p>

<pre><code>var isLastFrame = isLastFrame();
var hasRolledAllTenRounds = sumRolls &gt;= 10;
var hasRolledLessThanThree = rolls &lt; 3;
var hasRolledTwo = rolls === 2;
var currentPlayerIsAtFrameTen = players[playerNumber].frames[currentFrame][0] === 10;

return !(isLastFrame &amp;&amp; hasRolledAllTenRounds &amp;&amp; hasRolledLessThanThree) || // and so on...
</code></pre>

<p>Now one problem with <code>if</code> statements is in the long run, they can easily run out of control and end up in deeply nested situations. One way you can avoid that is to use ternaries and condition variables. For instance, <code>nextPlayer</code>.</p>

<pre><code>playerNumber = (playerNumber &lt; (players.length - 1)) ? player + 1 : 0
</code></pre>

<p>or <code>currentFrame</code></p>

<pre><code>currentFrame = currentFrame &lt; 9 ? currentFrame + 1 : currentFrame;
</code></pre>

<p>The rest of your code seem to follow the same pattern. I suggest applying what I have reviewed to the rest, where applicable.</p>
    </div>