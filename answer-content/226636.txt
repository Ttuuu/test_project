<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Most of your code can be greatly reduced.</p>

<p><a href="https://stackoverflow.com/questions/10043636/any-reason-not-to-use-to-concatenate-two-strings">Doing string addition is often a bad idea in Python</a>, especially if you are doing it in a loop. Also note that <code>a + "" == a</code> for any string <code>a</code>. I would replace your mix of global code and the <code>word_processor</code> function with this short function:</p>

<pre><code>import string

WHITELIST = set(string.ascii_letters + string.digits + string.whitespace)

def get_words(file_name):
    with open(file_name) as f:
        for line in f:
            line = "".join(c for c in line.casefold() if c in WHITELIST)
            yield from line.split()
</code></pre>

<p>This filters each line of the file to only contain ASCII letters and whitespace and splits it by whitespace afterwards (the default behavior of <a href="https://docs.python.org/3.7/library/stdtypes.html#str.split" rel="nofollow noreferrer"><code>str.split</code></a>). The <a href="https://docs.python.org/3/whatsnew/3.3.html#pep-380-syntax-for-delegating-to-a-subgenerator" rel="nofollow noreferrer"><code>yield from</code></a> effectively flattens the output into a stream of words (the whole function is a <a href="https://wiki.python.org/moin/Generators" rel="nofollow noreferrer">generator</a>, so you can consume the output one at a time without keeping the whole list in memory). It also uses the <a href="https://effbot.org/zone/python-with-statement.htm" rel="nofollow noreferrer"><code>with</code></a> keyword to ensure your files are closed, even in the event of an exception interrupting the program. I used <code>str.casefold</code> instead of <code>str.lower</code>, as recommended by <a href="https://codereview.stackexchange.com/users/100620/ajneufeld">@AJNeufeld</a> in the comments.</p>

<p>You should put the actual code into a function as well. I would call it <code>similarity</code>, since it does not actually measure distance, but similarity (from 0 to 100). For this you can use <a href="https://docs.python.org/2/library/collections.html#collections.Counter" rel="nofollow noreferrer"><code>collections.Counter</code></a> instead of using <code>list.count</code> repeatedly (each of which is <span class="math-container">\$\mathcal{O}(n)\$</span>).</p>

<pre><code>from collections import Counter
from math import sqrt

def similarity(words1, words2):
    words1, words2 = Counter(words1), Counter(words2)
    dot = sum(words1[k] * words2[k] for k in words1.keys() &amp; words2.keys())
    norm1 = sqrt(sum(v**2 for v in words1.values()))
    norm2 = sqrt(sum(v**2 for v in words2.values()))
    return dot / (norm1 * norm2)
</code></pre>

<p>Here I used the fact that <code>Counter</code> can take any iterable (like the output of <code>get_words</code>) and counts how often each item occurs (it returns a kind of dictionary). Also, dictionary keys behave like sets, so we can do a set intersection so we don't have to check for every key if it is also in the second words counter. I would also leave scaling the similarity to the caller.</p>

<p>Use it within a <a href="http://stackoverflow.com/questions/419163/what-does-if-name-main-do"><code>if __name__ == "__main__":</code> guard</a> to allow importing from the module. You might want to add a simple CLI interface with <code>sys.argv</code> (or do it properly and use <a href="https://docs.python.org/3/library/argparse.html" rel="nofollow noreferrer"><code>argparse</code></a> if you want more functionality). Throw in a <a href="https://realpython.com/python-f-strings/" rel="nofollow noreferrer"><code>f-string</code></a> to make formatting the output to the user easier (and make it a percent with not too many digits shown).</p>

<pre><code>import sys

if __name__ == "__main__":
    file1, file2 = sys.argv[1:3]
    sim = similarity(get_words(file1), get_words(file2))
    print(f"Similarity of {file1} and {file2}: {sim:.2%}")
</code></pre>

<p>Usage:</p>

<pre><code>python3 similarity.py file.txt file_old.txt
# Similarity of file.txt and file_old.txt: 92.19%
</code></pre>

<p>For these two small files (21KiB), your code takes 0.3s, whereas my code only takes 0.05s on my machine.</p>
    </div>