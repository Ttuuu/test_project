<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Also you may compare two slices without using <a href="https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.zip" rel="nofollow noreferrer"><code>zip()</code></a>, try it on the <a href="https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=3dd9b33b20da6f95ab733a0c079e992c" rel="nofollow noreferrer">Rust Playground</a>:  </p>

<pre><code>fn compare&lt;T: Ord&gt;(a: &amp;[T], b: &amp;[T]) -&gt; std::cmp::Ordering {
    let mut iter_b = b.iter();
    for v in a {
        match iter_b.next() {
            Some(w) =&gt; match v.cmp(w) {
                std::cmp::Ordering::Equal =&gt; continue,
                ord =&gt; return ord,
            },
            None =&gt; break,
        }
    }
    return a.len().cmp(&amp;b.len());
}

fn main() {
    assert_eq!(std::cmp::Ordering::Equal, compare(&amp;[1, 2, 3], &amp;[1, 2, 3]));
    assert_eq!(std::cmp::Ordering::Less, compare(&amp;[1, 0], &amp;[1, 2]));
    assert_eq!(std::cmp::Ordering::Less, compare(&amp;[], &amp;[1, 2, 3]));
    assert_eq!(std::cmp::Ordering::Greater, compare(&amp;[1, 2, 3], &amp;[1, 2]));
    assert_eq!(std::cmp::Ordering::Greater, compare(&amp;[1, 3], &amp;[1, 2]));
}

</code></pre>

<hr>

<p>Code review:  </p>

<ol>
<li><p>You don't need the <code>&amp;self</code> argument, since you did not use it: <code>self</code> parameter is only allowed in associated functions and not semantically valid as a function parameter. note: associated functions are those in <code>impl</code> or <code>trait</code> definitions</p></li>
<li><p>You need <code>use std::cmp;</code> otherwise rewrite e.g. this: <code>std::cmp::min(a.len(), b.len());</code>  </p></li>
<li><p>It is not common to return <code>-2</code> for <code>compare(&amp;[1, 0], &amp;[1, 2]))</code></p></li>
<li><p>Use <code>min_len -= 1;</code> instead of <code>min_len = min_len - 1;</code></p></li>
<li><p>You may use: <code>ret = a.len() as i64 - b.len() as i64;</code> which returns length diff instead of:  </p></li>
</ol>

<pre><code>        if a.len() &lt; b.len() {
            ret = -1;
        } else if a.len() &gt; b.len() {
            ret = 1;
        }
</code></pre>

<ol start="6">
<li>You don't need <code>else</code> after <code>break</code> here:</li>
</ol>

<pre><code>if *p1 != *p2 {
                ret = *p1 as i64 - *p2 as i64;
                break;
            }
</code></pre>

<ol start="7">
<li>For simple code you may return instead of break:</li>
</ol>

<pre><code>fn compare(a: &amp;[u8], b: &amp;[u8]) -&gt; i64 {
    let mut p1 = a.as_ptr() as *mut u8;
    let mut p2 = b.as_ptr() as *mut u8;
    let mut min_len = std::cmp::min(a.len(), b.len());
    while min_len &gt; 0 {
        unsafe {
            if *p1 != *p2 {
                return *p1 as i64 - *p2 as i64;
            }
            p1 = p1.offset(1);
            p2 = p2.offset(1);
        }
        min_len -= 1;
    }
    return a.len() as i64 - b.len() as i64;
}
</code></pre>

<ol start="8">
<li>You may simply avoid using <code>unsafe</code> like the following code:  </li>
</ol>

<pre><code>fn compare(a: &amp;[u8], b: &amp;[u8]) -&gt; i64 {
    let mut p1 = a.iter();
    let mut p2 = b.iter();
    let mut min_len = std::cmp::min(a.len(), b.len());
    while min_len &gt; 0 {
        let v = *p1.next().unwrap();
        let w = *p2.next().unwrap();
        if v != w {
            return v as i64 - w as i64;
        }
        min_len -= 1;
    }
    return a.len() as i64 - b.len() as i64;
}
</code></pre>

<ol start="9">
<li>You may use generics for more code reusability:</li>
</ol>

<pre><code>fn compare&lt;T: Ord&gt;(a: &amp;[T], b: &amp;[T]) -&gt; std::cmp::Ordering {
    let mut p1 = a.iter();
    let mut p2 = b.iter();
    let mut min_len = std::cmp::min(a.len(), b.len());
    while min_len &gt; 0 {
        let v = p1.next().unwrap();
        let w = p2.next().unwrap();
        if v != w {
            return v.cmp(w);
        }
        min_len -= 1;
    }
    return a.len().cmp(&amp;b.len());
}

fn main() {
    assert_eq!(std::cmp::Ordering::Equal, compare(&amp;[1, 2, 3], &amp;[1, 2, 3]));
    assert_eq!(std::cmp::Ordering::Less, compare(&amp;[1, 0], &amp;[1, 2]));
    assert_eq!(std::cmp::Ordering::Less, compare(&amp;[], &amp;[1, 2, 3]));
    assert_eq!(std::cmp::Ordering::Greater, compare(&amp;[1, 2, 3], &amp;[1, 2]));
    assert_eq!(std::cmp::Ordering::Greater, compare(&amp;[1, 3], &amp;[1, 2]));
}

</code></pre>
    </div>