<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Breaking up <code>comps</code> results in simpler, more efficient, easier to control functions.</p>

<p>Two lists (x,y) for a Cartesian product are usual. The products are half duplicates. If each column starts with a perfect square, the duplicates are eliminated.</p>

<p>Then each column is generated. Each column starts with a perfect square but then must also be specifically trimmed in length. Each multiple is compared to the limititing value.</p>

<p>So, about 25% or less of the Cartesian product are used, that is, calculated.</p>

<p><code>calcc</code> limits the value of each factor multiple it calculates just like <code>comps</code> but unlike <code>comps</code> it doesn't use an initial-factor list.
Each initial-factor squared is first on the multiple list. Each initial-factor is the <code>head</code> of each factor lists input.</p>

<p>I tried making <code>comps</code> use one list only instead of two. The function was short, more complicated but not faster. Two remaining problems with it were the calculation for the limit value which only needs to be calculated one time at the beginning and a problem with all such functions a glob of parameters or superflous <code>where</code> calculations. The functions need the parameters but should not be recalculated time-after-time.</p>

<p><code>runr</code> passes the initial-factor to apply to itself and all other factors. The list sent to <code>calcc</code> starts with a perfect square factor value. The diagonal eliminates duplicates.</p>

<p><code>rrunr</code> sarts <code>runr</code> with a length <code>n</code> factor list and the limit based on that list length.<br>
The 11 multiples extend to <code>n</code>. Successive columns shorten to none at about <code>n/10</code></p>

<p>Checking every perfect square against the limit does not save time.</p>

<p>I also tried <code>mergeAll</code> from Data.List.Ordered but it seemed to error around 3/4 the way down a prime list. I still have to investigate. <code>sort</code> is what I still use but the functions now let me create a single list or a list of lists for <code>mergeAll</code>. </p>

<pre><code>calcc _ _ []= []
calcc f lim (x:xs)
        | m&lt;= lim= m:calcc f lim xs
        | True= []
    where m= f*x

runr _ []= []
runr lim xss@(x:xs) = (calcc x lim xss)++runr lim xs

rrunr n = runr lim ds
    where ds= take n n7sl
         lim= 11*last ds 
</code></pre>

<p><code>last.rms (sort $ rrunr 5000) $ n7sl</code></p>

<p>240641</p>

<p>(0.07 secs, 50,617,744 bytes)</p>

<p><code>last.rms (sort $ rrunr 10000) $ n7sl</code></p>

<p>481249</p>

<p>(0.18 secs, 115,282,560 bytes)</p>

<p><code>last.rms (sort $ rrunr 15000) $ n7sl</code></p>

<p>721891</p>

<p>(0.25 secs, 179,096,928 bytes)</p>

<p><strong>5/13/2019</strong></p>

<p>I tried <code>unionAll</code> instead of <code>mergeAll</code> because each sub-list is already in order. It did result in a minor speed up. <code>runr</code> produces individual sub-lists for <code>unionAll</code>. </p>

<pre><code>runr _ []= []
runr lim xss@(x:xs) = [calcc x lim xss]++runr lim xs
</code></pre>

<p><code>last $ rms (unionAll $ rrunr 10000) n7sl</code></p>

<p>481249</p>

<p>(0.12 secs, 89,250,264 bytes)</p>

<p><code>last $ rms (unionAll $ rrunr 15000) n7sl</code></p>

<p>721891</p>

<p>(0.20 secs, 140,110,392 bytes)</p>

<p><code>last $ rms (unionAll $ rrunr 20000) n7sl</code></p>

<p>962509</p>

<p>(0.27 secs, 192,858,656 bytes)</p>

<p>I have an infinite version of this which is much simpler coding but it is a little slower.</p>

<pre><code>mupcl _ [] = []
mupcl (x:xs) (y:ys) = [(x*) &lt;$&gt; y]++ mupcl xs ys

uat = unionAll.mupcl n7sl $ (\i-&gt; (take i n7sl)) &lt;$&gt; [1..]
</code></pre>

<p><code>take 50000 $ rms uat n7sl</code></p>

<p>611993</p>

<p>(0.45 secs, 269,026,264 bytes)</p>

<p>I updated this because finding the nth prime is important and this can. It's still slower than the fixed just before this but has some uses not available to the fixed.
I toyed with making the sublists sequences but then found that I could generate the sublist end value and multiply it by all previous values and itself. Sequence would access the end value in about O(1) which is awesome but the end values are in one-to-one correspondence with each sublist.</p>

<p>The diagonal of these is just each sublist is one longer than the previous.This is the top diagonal necessary for an infinite list.</p>

<p>The previous functions use a bottom diagonal and a limit value. If they used the top diagonal would they end as this function? IDK </p>

<p><strong>5/27/2019</strong></p>

<p>The composite list was being traversed twice and it was driving me nuts.
I could not come up with a single function that would multiply two identical infinite lists diagonally. </p>

<p>I had developed one function to multiply 2s, 3s &amp; 5s together to form the Hamming list. Saturday morning I looked at that function and followed the pattern for this function. It amazed me it worked. <code>unionAll</code> does the limiting.</p>

<pre><code>umap = unionAll $ map (\n -&gt; (n*) &lt;$&gt; n7sl) n7sl
</code></pre>

<p>But, I am such an impatient idiot the function is going through two lists, exactly what I didn't want. I have an aversion to <code>tails</code>, more like a phobia because of experience with <code>tails</code> crashing my PC in an infinite function. What I discovered the past two or three months is that <code>mergeAll</code> and <code>unionAll</code> do magic with infinite lists. They automatically limit end points. Talk about no coding. I spent so much time coding end points in this and in the Hamming numbers (which are way fast, too) that I really feel like an idiot. @Will Ness knows way more than I, too. Haskell is <code>pure</code> (no pun) magic with laziness.</p>

<pre><code>c2 = unionAll $ map (\xs@(x:_)-&gt; (x*) &lt;$&gt; xs) $ tails n7sl
</code></pre>

<p><code>(minus n7sl c2) !! 1000000</code></p>

<p>15485941</p>

<p>(1.55 secs, 3,545,902,888 bytes)</p>

<p>And now, it's way faster than the non-infinite above.</p>

<p>This does 75803 primes to 962509 in 0.08 and the non-infinite does 75803 to 962509 in 0.27 and uses a little more memory.</p>

<p>This does</p>

<p><code>(minus n7sl c2) !! 75803</code></p>

<p>962509</p>

<p>(0.08 secs, 162,030,280 bytes)</p>

<p><strong>5.30.2019</strong></p>

<p>OMG. It worked! I told @Will Ness it might, but that it would not with the non-infinite. What it is is the size of the wheel. I started calling it a wheel when I saw the deltas to create it. Mine is not a wheel because I have to generate the deltas from a column in Excel. I take 300 of <code>n7sl</code> into a column in Excel them I remove all the 11 multiples. I take the deltas of the remainder then find where it repeats.</p>

<p>My no 11s list is </p>

<pre><code>n11s=[4,2,4,6,2,6,4,2,4,6,6,2,6,4,2,6,4,6,8,4,2,4,2,4,14,4,6,2,10,2,6,6,4,2,4,6,2,10,2,4,2,12,10,2,4,2,4,6,2,6,4,6,6,6,2,6,4,2,6,4,6,8,4,2,4,6,8,6,10,2,4,6,2,6,6,4,2,4,6,2,6,4,2,6,10,2,10,2,4,2,4,6,8,4,2,4,12,2,6,4,2,6,4,6,12,2,4,2,4,8,6,4,6,2,4,6,2,6,10,2,4,6,2,6,4,2,4,2,10,2,10,2,4,6,6,2,6,6,4,6,6,2,6,4,2,6,4,6,8,4,2,6,4,8,6,4,6,2,4,6,8,6,4,2,10,2,6,4,2,4,2,10,2,10,2,4,2,4,8,6,4,2,4,6,6,2,6,4,8,4,6,8,4,2,4,2,4,8,6,4,6,6,6,2,6,6,4,2,4,6,2,6,4,2,4,2,10,2,10,2,6,4,6,2,6,4,2,4,6,6,8,4,2,6,10,8,4,2,4,2,4,8,10,6,2,4,8,6,6,4,2,4,6,2,6,4,6,2,10,2,10,2,4,2,4,6,2,6,4,2,4,6,6,2,6,6,6,4,6,8,4,2,4,2,4,8,6,4,8,4,6,2,6,6,4,2,4,6,8,4,2,4,2,10,2,10,2,4,2,4,6,2,10,2,4,6,8,6,4,2,6,4,6,8,4,6,2,4,8,6,4,6,2,4,6,2,6,6,4,6,6,2,6,6,4,2,10,2,10,2,4,2,4,6,2,6,4,2,10,6,2,6,4,2,6,4,6,8,4,2,4,2,12,6,4,6,2,4,6,2,12,4,2,4,8,6,4,2,4,2,10,2,10,6,2,4,6,2,6,4,2,4,6,6,2,6,4,2,10,6,8,6,4,2,4,8,6,4,6,2,4,6,2,6,6,6,4,6,2,6,4,2,4,2,10,12,2,4,2,10,2,6,4,2,4,6,6,2,10,2,6,4,14,4,2,4,2,4,8,6,4,6,2,4,6,2,6,6,4,2,4,6,2,6,4,2,4,12,2,12]
n11sl = scanl (+) 13 $ cycle n11s
</code></pre>

<p>The improvement is not stark and going any further with this would not be beneficial. <code>c2</code> modified to use <code>n11sl</code></p>

<pre><code>c2 = unionAll $ map (\xs@(x:_) -&gt; (x*) &lt;$&gt; xs) $ tails n11sl
</code></pre>

<p>Executing it would be</p>

<p><code>(11:(minus n11sl c2)) !! 1000000</code></p>

<p>15485941</p>

<p>(1.30 secs, 2,968,456,072 bytes)</p>

<p><code>(11:(minus n11sl c2)) !! 500000</code></p>

<p>7368841</p>

<p>(0.55 secs, 1,305,594,104 bytes)</p>
    </div>