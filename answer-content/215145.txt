<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I see a number of things that could help you improve your code.</p>

<h2>Don't abuse <code>using namespace std</code></h2>

<p>Putting <code>using namespace std</code> at the top of every program is <a href="http://stackoverflow.com/questions/1452721/why-is-using-namespace-std-considered-bad-practice">a bad habit</a> that you'd do well to avoid.  Know when to use it and when not to (as when writing include headers).  If I were hiring, I'd prefer that the candidate actually write production quality code, rather than point out that the just-produced sample was not, even if they could articulate and justify the difference.  After all, they're probably not hiring someone to produce non-production sample code, right?</p>

<h2>Don't define a default constructor that only initializes data</h2>

<p>Instead of writing this:</p>

<pre><code>struct Queue
{
    Node* queue;
    int size;
    bool is_empty;
    Node* front;
    Node* back;

    Queue() : queue(nullptr), size(0), is_empty(true), front(nullptr), back(nullptr) { }
    // etc.
};
</code></pre>

<p>write this:</p>

<pre><code>struct Queue
{
    Node* queue = nullptr;
    int size = 0;
    bool is_empty = true;
    Node* front = nullptr;
    Node* back = nullptr;

    // no need to write default constructor
    // other code
};
</code></pre>

<p>See <a href="https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#Rc-default" rel="nofollow noreferrer">Cpp Core Guidelines C.45</a> for details.</p>

<h2>Use <code>class</code> rather than <code>struct</code> if there are invariants</h2>

<p>The current <code>Queue</code> has pointers and <code>size</code> and <code>is_empty</code> members.  Will everything still work if those are arbitrarily changed to random values?  No, it will not.  There are expectations that <code>size</code> and <code>is_empty</code> will always have the right values and the values of the pointers are critical to the operation of the data structure, therefore this must be a <code>class</code> and not a <code>struct</code>.  See <a href="https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#Rc-struct" rel="nofollow noreferrer">Cpp Core Guidelines C.2</a>.</p>

<h2>Eliminate redundant data</h2>

<p>Rather than maintaining a separate <code>is_empty</code> data item, I'd suggest only keeping the <code>size</code> and defining a function instead like this:</p>

<pre><code>bool is_empty() const { return size == 0; }
</code></pre>

<p>As per the previous advice, I'd also keep <code>size</code> private and provide a <code>public</code> access function if needed:</p>

<pre><code>std::size_t size() const { return size_; }
</code></pre>

<p>Also, you don't really need both <code>queue</code> and <code>front</code>.  The code would be both clearer and more compact if only <code>front</code> and <code>back</code> pointers were included.</p>

<h2>Use the appropriate data types</h2>

<p>Would it ever make sense to have a negative <code>size</code> for a queue?  I'd suggest not, and so it would make more sense to have <code>size</code> be a <code>std::size_t</code> type.</p>

<h2>Rethink the interface</h2>

<p>If a user of this <code>Queue</code> were to invoke <code>get_front()</code> on an empty queue, I think it would be a much better interface to either throw an exception or to return an empty string rather than the special value <code>"empty"</code>.  It's also quite peculiar to push <code>int</code>s and then pop strings.  That's not what I'd want.  Here's how I'd write <code>get_front</code>:</p>

<pre><code>int get_front() const {
    if (is_empty()) {
        throw std::out_of_range{"cannot get data from empty queue"};
    }
    return front-&gt;data;
}
</code></pre>

<h2>Use const where practical</h2>

<p>The current <code>print()</code> functions do not (and should not) modify the underlying object, and so both should be declared <code>const</code>:</p>

<pre><code>void print(const Node* current, std::string queue_string) const;
void print() const;
</code></pre>

<p>I would also make the first variant <code>private</code> because the user of the class should not have any pointer to an internal structure.</p>

<h2>Fix the bugs</h2>

<p>There are several problems with <code>pop_front</code>.  First, it doesn't check for an empty queue before decrementing the <code>size</code> which is an error.  Second, it does not correctly update <code>queue</code> and leads to dereferencing freed memory which is <em>undefined behavior.</em></p>

<h2>Don't use <code>std::endl</code> if <code>'\n'</code> will do</h2>

<p>Using <code>std::endl</code> emits a <code>\n</code> and flushes the stream.  Unless you really need the stream flushed, you can improve the performance of the code by simply emitting <code>'\n'</code> instead of using the potentially more computationally costly <code>std::endl</code>.</p>

<h2>Avoid <code>to_string</code></h2>

<p>The <code>print</code> function currently contains these lines:</p>

<pre><code>queue_string = to_string(current-&gt;data) + " " + queue_string;
cout &lt;&lt; queue_string &lt;&lt; endl;
</code></pre>

<p>This creates another string and then prints that string which is not needed.  Instead, just print directly:</p>

<pre><code>cout &lt;&lt; current-&gt;data &lt;&lt; ' ' &lt;&lt; queue_string &lt;&lt; '\n';
</code></pre>

<h2>Use all of the required <code>#include</code>s</h2>

<p>The type <code>std::string</code> is used but its declaration is in <code>#include &lt;string&gt;</code> which is not actually in the list of includes.</p>

<h2>Prefer iteration over recursion</h2>

<p>Recursion tends to use additional stack space over iteration.  For that reason (and often for clarity) I'd recomment writing <code>print</code> like this instead:</p>

<pre><code>void print() const {
    std::cout &lt;&lt; "_____________\n";
    for (const auto *item = front; item; item = item-&gt;previous) {
        std::cout &lt;&lt; item-&gt;data &lt;&lt; ' ';
    }
    std::cout &lt;&lt; "\n_____________\n";
}
</code></pre>

<p>Even better would be to pass a <code>std::ostream &amp;</code> argument to this function to allow printing to any stream.</p>

<h2>Simplify your code</h2>

<p>The recursive <code>push_back</code> function is much longer than it needs to be.  I'd write it like this:</p>

<pre><code>void push_back(int data) {
    auto temp = new Node{data};
    ++size_;
    if (back == nullptr) { // adding to empty queue
        front = back = temp;
    } else {
        back-&gt;previous = temp;
        back = temp;
    }
}
</code></pre>

<p>Note that this version assumes that the data members <code>queue</code> and <code>is_empty</code> have already been removed per the suggestions above.</p>

<h2>Make test success obvious</h2>

<p>The current test code exercizes the queue, but it doesn't indicate what is <em>expected</em> to be printed.  I'd instead write both test scenarios and also the expected result so that it would be clear to anyone running the code whether everything was working as expected or not.</p>

<h2>Make private structures private</h2>

<p>Nothing outside of <code>Queue</code> needs to know anything about <code>Node</code>, so I'd strongly recommend making the definition of <code>Node</code> <code>private</code> within <code>Queue</code>.</p>

<h2>Don't leak memory</h2>

<p>This program leaks memory because the <code>Queue</code>'s destructor doesn't free all resources.  This is a serious bug.</p>

<h2>Consider using a template</h2>

<p>A queue is a fairly generic structure that could hold any kind of data if the class were templated, and not just an <code>int</code>.</p>

<h2>Consider possible uses</h2>

<p>For any code production, but especially if you're in an interview, think about how the class is being used and whether there are any restrictions or limits inherent in the design.  For example, think about <code>copy</code> and <code>move</code> operations.  If you write this, does the code do the right thing?</p>

<pre><code>Queue queue;
queue.push_back(5);
queue.push_back(6);
queue.push_back(7);
auto a_copy{queue};
a_copy.pop_front();
queue.print();
a_copy.print();
</code></pre>

<p>Also consider multithreaded code.  Would it be thread-safe to push from one thread and pull from another?  If not, what would be needed to make that work?</p>

<h2>Don't make platform assumptions</h2>

<p>Although it doesn't adversely affect the code, the assumptions about data sizes in the comments for <code>Node</code> are simply incorrect on my machine and would be a red flag in an interview.</p>
    </div>