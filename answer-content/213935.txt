<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Some point regarding the game</p>

<ul>
<li>The game has 9 positions. </li>
<li>The order of moves does not affect the game result.</li>
<li>Player may not move over another.</li>
<li>There are 8 possible winning combinations of moves.</li>
<li>The game is symmetrically invariant so column, row need only be relative, and does not need to match actual board positions.</li>
</ul>

<p>That means you can encode all the moves for both players in two 9 bit ints</p>

<pre><code>self.moves = {"X" : 0, "O" : 0}

def playerMove(self, player, row, col):
    self.moves[player] |= 1 &lt;&lt; (row * 3 + col)
</code></pre>

<p>You can use a mask to check for a winning move</p>

<pre><code>self.wins = [7,56,448,273,84,292,146,73]  

def isWin(self, player):
    for win in self.wins:
        if (self.moves[player] &amp; win) == win:
            self.game_outcome = player
            return True
    return False
</code></pre>

<p>You can check for a draw by or'ing (Same as adding because there is no overlap) both players moves</p>

<pre><code>def isDraw(self):
    if (self.moves["X"] + self.moves["O"]) == 511:
        self.game_outcome = 'Tie'
        return True
    return False
</code></pre>

<p>To reset the game</p>

<pre><code>def reset(self):
    self.moves["X"] = 0
    self.moves["O"] = 0
</code></pre>

<p>Thus the whole thing becomes</p>

<pre><code>class GameOutcome:
    def __init__(self):
        self.moves = {'X' : 0, 'O' : 0}
        self.game_state = ''
        self.wins = [7, 56, 448, 273, 84, 292, 146, 73]  # each has 3bits set
        # bits 0 to 8 in order of above array
        # 000000111,000111000,111000000,100010001,001010100,100100100,010010010,001001001
        # fold them into a 3by3 to get the following patterns
        # 000  000  111  100  001  100  010  001
        # 000  111  000  010  010  100  010  001
        # 111, 000, 000, 001, 100, 100, 010, 001

    def get_game_state(self):
        if self.is_win('X') or self.is_win('O'):
            return self.game_state
        self.is_draw()
        return self.game_state

    def player_move(self, player, row, col):
        self.moves[player] |= 1 &lt;&lt; (row * 3 + col)
        return None

    def is_win(self, player):
        for win in self.wins:
            if (self.moves[player] &amp; win) == win:
                self.game_state = player
                return True
        return False

    def is_draw(self):
        if (self.moves["X"] + self.moves["O"]) == 511:
            self.game_state = 'Tie'
            return True
        return False

    def reset(self):
        self.moves["X"] = 0
        self.moves["O"] = 0
        self.game_state = ''
        return None
</code></pre>
    </div>