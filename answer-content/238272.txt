<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ol>
<li><p>Is the user of your <code>Teacher</code> class supposed to be able to modify the <code>name</code>, <code>subject</code>, and <code>room_number</code> attributes after they're set?  If not, make them private by putting a <code>_</code> at the start of those names.</p></li>
<li><p>Python objects have a magic method <code>__repr__</code> that turns them into a string for printing.  That would be a good place to put your formatting logic.</p></li>
<li><p>I don't know what this stuff with <code>globals</code> is trying to do, but as a general rule you should not touch <code>globals</code>.</p></li>
<li><p>Your <code>instagator</code> function says that it creates a <code>Teacher</code>, but it also takes a list of the existing teachers, appends to it, and then returns it.  Try to have your functions do one obvious thing instead of doing multiple non-obvious things.  </p></li>
</ol>

<p>If your <code>instagator</code> function just does the one thing it says it does (creates a <code>Teacher</code>), and if you move the string formatting into the <code>__repr__</code> function instead of having an intermediate <code>print_info</code> that doesn't actually print anything, the code gets a bit simpler:</p>

<pre><code>class Teacher:
    def __init__(self, name: str, subject: str, room_number: str):
        self._name = name
        self._subject = subject
        self._room_number = room_number

    def __repr__(self) -&gt; str:
        return f"{self._name.capitalize()} teaches {self._subject} in room {self._room_number}."


def instagator() -&gt; Teacher:
    """Creates a Teacher from user input."""
    print("")
    name = input("Please enter a teachers name: ")
    subject = input("Please enter that teachers subject: ")
    room_number = input("Please enter what room that teacher teaches in: ")
    return Teacher(name, subject, room_number)


print("Please enter the name of 10 teachers, the subject they teach, and the room they teach that subject in.")
teachers = [instagator() for _ in range(10)]
print("\n")

for teacher in teachers:
    print(teacher)
</code></pre>

<p>Note that since <code>instagator</code> returns a <code>Teacher</code> I can just use a simple list comprehension to build a list of all the <code>Teacher</code>s, one for each number in the <code>range</code>.  And since I implemented <code>__repr__</code> I don't need to have multiple lines of code to build the string to print; I can just print the <code>teacher</code> directly and that will automagically turn into the formatted string that I want.</p>

<p>I don't think it's great practice in general to have a constructor prompt for user input, but for a practice exercise like this I think it's fine to demonstrate how you can use a class to encapsulate all of the logic that pertains to building an object:</p>

<pre><code>class Teacher:
    def __init__(self):
        """Creates a Teacher from user input."""
        print("")
        self._name = input("Please enter a teachers name: ")
        self._subject = input("Please enter that teachers subject: ")
        self._room_number = input("Please enter what room that teacher teaches in: ")

    def __repr__(self) -&gt; str:
        return f"{self._name.capitalize()} teaches {self._subject} in room {self._room_number}."


print("Please enter the name of 10 teachers, the subject they teach, and the room they teach that subject in.")
teachers = [Teacher() for _ in range(10)]
print("\n")

for teacher in teachers:
    print(teacher)
</code></pre>
    </div>