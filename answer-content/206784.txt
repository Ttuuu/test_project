<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your code compile on GCC but not on Clang, he don't like (as me) these few lines :</p>

<pre><code>template&lt;typename t_derived, typename t_key, typename t_ptr, typename... t_args&gt;
template&lt;typename t_registrar, auto key&gt;
const bool registry_t&lt;t_derived, t_key, t_ptr, t_args...&gt;::register_const&lt;t_registrar, key&gt;::s_registered
{registry_t&lt;t_derived, t_key, t_ptr, t_args...&gt;::register_const&lt;t_registrar, key&gt;::private_t::register_class()};

template&lt;typename t_derived, typename t_key, typename t_ptr, typename... t_args&gt;
template&lt;typename t_registrar&gt;
const bool registry_t&lt;t_derived, t_key, t_ptr, t_args...&gt;::register_dyn&lt;t_registrar&gt;::s_registered
{registry_t&lt;t_derived, t_key, t_ptr, t_args...&gt;::register_dyn&lt;t_registrar&gt;::private_t::register_class()};
</code></pre>

<p>In both <code>register_class()</code>, you use the operator <code>new</code>, but you never <code>delete</code>. Keep in mind that they come in pair. Or you can (and should) doing like in the blog post you followed, using <code>std::make_unique</code>.</p>

<p>Using integer as identifier don't make sense for the final user. </p>

<p>Playing with template, code can be quickly unreadable. Try to space and indents long template chain.</p>
    </div>