<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your <a href="http://en.wikipedia.org/wiki/Illegal_number" rel="nofollow noreferrer"><code>IllegalNumber</code></a> is an exception, so should be called <code>IllegalNumberException</code>. It's also not needed since <code>ValueError</code> already occupies this niche.</p>

<p>You should break this onto multiple lines:</p>

<pre><code>self.num = tuple(int(d) for d in str(n)) if isinstance(n, (int, str)) \
    else tuple(int(d) for d in n)  # convert n into a tuple of digits
</code></pre>

<p>as</p>

<pre><code>if isinstance(n, (int, str)):
    self.num = tuple(int(d) for d in str(n))
else:
    self.num = tuple(int(d) for d in n)
</code></pre>

<p>although it's simpler to do:</p>

<pre><code>if isinstance(n, (int, str)):
    n = str(n)

self.num = tuple(map(int, n))
</code></pre>

<p>In fact, the <code>isinstance</code> check doesn't need to include <code>str</code>.</p>

<p>I would change <code>_is_legal</code> to</p>

<pre><code>digits = set(range(10))

return self.num[0] and len(self.num) == NUM_DIGITS == len(digits &amp; set(self.num))
</code></pre>

<p>I would personally use <code>map</code> in <code>__str__</code>.</p>

<p><code>compare</code> can use <code>zip</code>:</p>

<pre><code>bulls, cows = 0, 0
for digit, other_digit in zip(self.num, other.num):
    if digit == other_digit:
        bulls += 1
    elif digit in other.num:
        cows += 1
return bulls, cows
</code></pre>

<p>You could even do this:</p>

<pre><code>pos_eq = sum(map(eq, self.num, other.num))
set_eq = len(set(self.num) &amp; set(other.num))

return pos_eq, set_eq - pos_eq
</code></pre>

<p>although maybe I'm getting ahead of myself.</p>

<p><code>ComputerPlayer.__init__</code> can generate mostly correct digits with:</p>

<pre><code>for digits in permutations(range(10), NUM_DIGITS)
</code></pre>

<p>This gives a good speed improvement to the initial load. Since the load is still noticably slow, I suggest improving it with something like</p>

<pre><code>    digitss = permutations(range(10), NUM_DIGITS)

    for digits in digitss:
        if digits[0]:
            break

    self.possible_nums = [digits] + map(Num, digitss)
</code></pre>

<p>and making the <code>_is_legal</code> call external so that this loop doesn't require it. I would also change the constructor to just</p>

<pre><code>self.num = n
</code></pre>

<p>since <code>permutations</code> already returns tuples of digits. This would make <code>HumanPlayer.guess</code> start with</p>

<pre><code>while True:
    inp = raw_input('Enter a guess: ')

    try:
        digits = map(int, inp)
    except ValueError:
        pass
    else:
        guess_num = Num(digits)
        if guess_num.is_legal():
            break

    print ("The number should consist of %d different digits "
           "and the first digit can't be 0." % NUM_DIGITS)
</code></pre>

<p>In <code>ComputerPlayer.guess</code>, you shouldn't need two checks to determine if the human cheated. Namely, the first <code>try...except</code> seems unneeded.</p>

<p>I like the use of a higher-order function with <code>check_func</code>. It's very elegant. However, don't abuse it; <code>HumanPlayer</code> should not be running the game; that logic should be in <code>play</code>.</p>

<p>It's unfortunate that you don't get an indication that you lost, or if you lost due to being caught cheating. This would be easier to sort out if more was in <code>play</code> and not in the respective classes.</p>

<p>You only use each method of <code>Num</code> in one place with these changes; it makes sense IMHO to make these functions on tuples of digits to remove the need to create classes. This makes things a little cleaner. It also allows one to speed up <code>ComputerPlayer.__init__</code> further.</p>

<p>You don't validate the user's input in <code>HumanPlayer.check</code>. <code>check</code> also shouldn't be in the business of saying <code>You lost!</code>; that should be game logic.</p>

<p>Using <code>random.sample</code> to shuffle in-place is fancy but it isn't good. Just use <code>random.shuffle</code> on another line.</p>

<p>This all gives:</p>

<pre><code>"""Play Bulls and Cows."""
import random
NUM_DIGITS = 5

from itertools import permutations
from operator import eq

def is_legal(digits):
    return digits[0] and len(digits) == NUM_DIGITS == len(set(range(10)) &amp; set(digits))

def format_digits(digits):
    return ''.join(map(str, digits))

def bulls_and_cows(left, right):
    """If one number was A's secret number and the second one
    was B's guess, how many bulls and cows are there? Return
    them in a (bulls, cows) tuple representation.

    &gt;&gt;&gt; bulls_and_cows((1, 2, 3, 4), (5, 2, 4, 3)) ==&gt; 1, 2
    """
    pos_eq = sum(map(eq, left, right))
    set_eq = len(set(left) &amp; set(right))

    return pos_eq, set_eq - pos_eq

def get_int(inp):
    while True:
        try:
            return int(raw_input(inp))
        except ValueError:
            pass

class ComputerPlayer(object):
    """An average computer player."""
    def __init__(self):
        self.possible_nums = list(permutations(range(10), NUM_DIGITS))

        minimum = self.possible_nums.index(tuple(range(1, NUM_DIGITS+1)))
        del self.possible_nums[:minimum]

        self._secret_num = random.choice(self.possible_nums)

    def guess(self, check_func):
        """Guess a number and check it with the given function.
        The function gets a guess and returns the bulls and cows.
        Return True if the player won, and False otherwise.
        """
        guess_num = random.choice(self.possible_nums)
        bulls, cows = check_func(guess_num)

        if bulls == NUM_DIGITS:
            return True

        # The possible numbers that could be the opponent's secret number.
        self.possible_nums = [n for n in self.possible_nums if bulls_and_cows(n, guess_num) == (bulls, cows)]

        # If it's empty, the opponent cheated
        return self.possible_nums == []

    def check(self, guess_num):
        """Check the opponent's guess, and return the bulls and cows."""
        return bulls_and_cows(self._secret_num, guess_num)

class HumanPlayer(object):
    """Ask the user for a guess, show him the suitable bulls and cows
    for the guess, and ask him for suitable bulls and cows for the
    opponent's guess - let the user play Bulls and Cows."""

    def guess(self, check_func):
        """Ask the user for a guess, and check it with the
        given function, that gets the guess and returns
        the bulls and cows in a (bulls, cows) representation.
        Print the results to the user.
        Return True if the player won, and False otherwise.
        """
        while True:
            inp = raw_input('Enter a guess: ')

            try:
                guess_num = map(int, inp)
            except ValueError:
                pass
            else:
                if is_legal(guess_num):
                    break

            print ("The number should consist of %d different digits "
                   "and the first digit can't be 0." % NUM_DIGITS)

        bulls, cows = check_func(guess_num)

        if (bulls, cows) == (NUM_DIGITS, 0):
            print 'You won!'
            return True

        print 'You have {} bulls and {} cows.'.format(bulls, cows)
        print '-----'
        return False

    def check(self, num):
        """Check the opponent's guess, and return the bulls and cows."""
        # The messages are indented, to improve the readibility
        # for the user - he can easily distinguish between messages
        # from `guess` and messages from `check`
        print "\tYour opponent's guess is {}.".format(format_digits(num))
        bulls, cows = get_int('\tBulls: '), get_int('\tCows: ')

        if (bulls, cows) == (NUM_DIGITS, 0):
            print 'You lost!'

        return bulls, cows

def play(player1, player2):
    """Play a game between the two given Player classes.
    Each player class should contain `guess` and `check` methods.
    `check` will get the opponent's guess and return the suitable
    bulls and cows, and `guess` will get a function (the opponent's
    `check` method) and let the player guess a number and check it
    with the given function. `guess` will return True if the player
    won, and False otherwise.
    Return 1 if player1 won, and 2 if player2 won.
    """
    players = [player1(), player2()]
    random.shuffle(players)

    current_player, opponent = players
    while not current_player.guess(opponent.check):
        current_player, opponent = opponent, current_player

    return {player1: 1, player2: 2}[current_player.__class__]

play(HumanPlayer, ComputerPlayer)

raw_input("Thanks for playing Bulls and Cows! ")
</code></pre>
    </div>