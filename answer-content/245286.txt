<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Private methods</h2>
<p>You are correct- there currently is no way to set functions as private like other languages have, though there is <a href="https://tc39.es/proposal-class-fields/#prod-FieldDefinition" rel="nofollow noreferrer">a proposal</a> for <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/Private_class_fields" rel="nofollow noreferrer">private class fields</a> including <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/Private_class_fields#Private_Methods" rel="nofollow noreferrer">private methods</a> but that hasn't been adopted yet. See also <a href="https://stackoverflow.com/q/4484424/1575353">this similar question about private functions on SO</a>.</p>
<p>There isn't one de-facto convention about private method naming. For example, the <a href="https://google.github.io/styleguide/jsguide.html" rel="nofollow noreferrer">Google JS Style guide</a> states:</p>
<blockquote>
<h3>6.2.3 Method names</h3>
<p>Method names are written in <code>lowerCamelCase</code>. Names for <code>@private</code> methods must end with a trailing underscore.<sup><a href="https://google.github.io/styleguide/jsguide.html#naming-method-names" rel="nofollow noreferrer">1</a></sup></p>
</blockquote>
<p>While the <a href="https://github.com/airbnb/javascript" rel="nofollow noreferrer">AirBnB style guide</a> states:</p>
<blockquote>
<h3>• <a href="https://github.com/airbnb/javascript#naming--leading-underscore" rel="nofollow noreferrer">23.4</a> Do not use trailing or leading underscores. eslint: <a href="https://eslint.org/docs/rules/no-underscore-dangle.html" rel="nofollow noreferrer"><code>no-underscore-dangle</code></a></h3>
<blockquote>
<p>Why? JavaScript does not have the concept of privacy in terms of properties or methods. Although a leading underscore is a common convention to mean “private”, in fact, these properties are fully public, and as such, are part of your public API contract. This convention might lead developers to wrongly think that a change won’t count as breaking, or that tests aren’t needed. tl;dr: if you want something to be “private”, it must not be observably present.
<sup><a href="https://github.com/airbnb/javascript#naming--leading-underscore" rel="nofollow noreferrer">2</a></sup></p>
</blockquote>
</blockquote>
<p>Bear in mind that "<em>classes, introduced in ECMAScript 2015, are primarily syntactical sugar over JavaScript's existing prototype-based inheritance. The class syntax does not introduce a new object-oriented inheritance model to JavaScript.</em>"<sup><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes" rel="nofollow noreferrer">3</a></sup>. Another technique for private methods is to use the <a href="https://gist.github.com/zcaceres/bb0eec99c02dda6aac0e041d0d4d7bf2" rel="nofollow noreferrer">Revealing module pattern</a> and only expose methods that are considered public.</p>
<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>var QuickSort = (function () {
  // We'll expose all these functions to the user
  function sort (a) {
    console.log('sort() called with argument: ', arguments);
  }
  function partition() {
  }
  // Let's hide this function
  function privateSort() {
    console.log('privateSort() called');
  }

  return { // expose public functions
    sort,
    partition
  }
})(); // our IIFE function (surrounded with parens) is invoked here
const sample = [3, 4];
QuickSort.sort(sample);
QuickSort.privateSort(); //Uncaught TypeError: QuickSort.privateSort is not a function</code></pre>
</div>
</div>

<h2>Suggestions</h2>
<h3>Use consistent line terminators</h3>
<p>Many lines are terminated with a semi-colon but some are not. Unless you completely understand rules of <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#Automatic_semicolon_insertion" rel="nofollow noreferrer">Automatic semicolon insertion</a> or are using a compiler/module bundler it is best to include line terminators.</p>
<h3>Don't use <code>var</code></h3>
<p>Default to using <code>const</code>. If you determine re-assignment is necessary then use <code>let</code>. This helps avoid accidental re-assignment. There is little need for <code>var</code> anymore, except if you absolutely needed a global variable.</p>
<h3>Swapping values</h3>
<p>instead of this</p>
<blockquote>
<pre><code>let temp = a[firstEl];
a[firstEl] = a[secondEl];
a[secondEl] = temp;
</code></pre>
</blockquote>
<p>One could use <a href="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment" rel="nofollow noreferrer">Destructuring assignment</a> to <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment#Swapping_variables" rel="nofollow noreferrer">swap variables</a> but <a href="https://jsperf.com/swap-array-vs-variable/9" rel="nofollow noreferrer">it seems that is slower than other techniques</a> even though the V8 blog claims "<em>Once we unblocked escape analysis to eliminate all temporary allocation, array destructuring with a temporary array is as fast as a sequence of assignments.</em>"<a href="https://v8.dev/blog/v8-release-68#performance" rel="nofollow noreferrer">1</a>. There is a "hack" suggested in <a href="https://stackoverflow.com/a/16201730/1575353">this SO answer by showdev</a> that <a href="https://jsperf.com/swap-array-vs-variable/9" rel="nofollow noreferrer">appears to be the fastest method to swap variables</a>:</p>
<pre><code>a[secondEl] = [a[firstEl], a[firstEl] = a[secondEl]][0];
</code></pre>
<h3>Useless <code>return</code> in <code>swap()</code></h3>
<p>There is a <code>return</code> at the end of <code>swap()</code>:</p>
<blockquote>
<pre><code>swap(a, firstEl, secondEl) {
  let temp = a[firstEl];
  a[firstEl] = a[secondEl];
  a[secondEl] = temp;
  return
}
</code></pre>
</blockquote>
<p>That would return <code>undefined</code> so there is little use in that line.</p>
<h3>Should the input array be mutated?</h3>
<p>If I run this code <code>sample</code> will get mutated, but the caller might not want it to be</p>
<pre><code>const sample = [1,0,3, -1];
var obj = new QuickSort();
sortedSample = obj.sort(sample);
//sample has been modified, even though sortedSample contains the sorted data
</code></pre>
<p>To preserve the original data, sort a copy of it (e.g. call <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice" rel="nofollow noreferrer"><code>slice()</code></a>).</p>
    </div>