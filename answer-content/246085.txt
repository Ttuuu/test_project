<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Why are you creating a new variable, and then immediately using it in the <code>base()</code> constructor?</p>
<pre><code>public MyValidator(
    string errorMessage = "Isin. The first two characters of an ISIN must be letters / non numeric.") : base(errorMessage)
{
}
</code></pre>
<p>For readability think about moving this directly to <code>base()</code> like so:</p>
<pre><code>public MyValidator() : base("Isin. The first two characters of an ISIN must be letters / non numeric.")
{
}
</code></pre>
<hr>
<p>Instead of declaring <code>stringToValidate</code> as a string, then using it's value, you could improve conciseness by moving the expression immediately into the function call, like so:</p>
<pre><code>protected override bool IsValid(PropertyValidatorContext context)
{
    return IsValid(context.PropertyValue as String);
}
</code></pre>
<hr>
<p>Instead of the if returning <code>false</code> or <code>true</code> manually, just return the inverse result of the statement, like this:</p>
<pre><code>public bool IsValid(string stringToValidate)
{
    var charString = stringToValidate.ToCharArray();
    return !Regex.IsMatch(charString[0].ToString(), "[0-9]") || Regex.IsMatch(charString[1].ToString(), "[0-9]");
}
</code></pre>
<hr>
<p>For conciseness, you could rewrite a few lines in the last method (<code>Handler.Handle()</code>) like so:</p>
<pre><code>public class Handler : IRequestHandler&lt;Command&gt;
{
    private readonly DataContext _context;

    public Handler(DataContext context)
    {
        _context = context;
    }
    public async Task&lt;Unit&gt; Handle(Command request,
        CancellationToken cancellationToken)
    {
        await _context.Companies.AddAsync(new Company
        {
            Name = request.Name,
            Exchange = request.Exchange,
            Ticker = request.Ticker,
            Isin = request.Isin,
            Website = request.Website
        );

        if (await _context.SaveChangesAsync() &lt;= 0)
        {
            throw new Exception("Problem saving changes");
        }

        return Unit.Value
    }
}
</code></pre>
<p>Also, note that I switched the order of the final few lines. You should be checking for false results/exceptions in the indented code, but returning the actual result at the bottom. For more information on reducing nesting, read <a href="https://www.refactoring.com/catalog/replaceNestedConditionalWithGuardClauses.html" rel="nofollow noreferrer">this</a>.</p>
    </div>