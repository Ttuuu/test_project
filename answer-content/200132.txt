<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There is a better approach for that problem.</p>

<p>First start by sorting the array, next traverse the array, for every element that is lower than the <code>cap</code> (your <code>cap</code> starts as the <code>avg</code> of <code>budget/array.length</code>) reduce it from your current funds and recalculate the cap (i.e. now the <code>cap</code> equals to <code>budget/(array.length - (i+1))</code>).</p>

<p>Once you got to the end of the array or to the first element that is higher than your current <code>cap</code> you just return the last cap you have in hand.</p>

<p>So all in all this is your solution: </p>

<pre><code>  static double findGrantsCap(double[] arr, double newBudget) {
    // your code goes here
    Arrays.sort(arr); // O(N*LogN)
    int n = arr.length;
    double cap = newBudget/n;
    for(int i = 0; i &lt; n; i++) { // O(N)
      if(arr[i] &lt; cap) {
        newBudget -= arr[i];
        cap = (newBudget/(n-(1+i)));
      }else {
        arr[i] = cap;
      }
    }

    return cap;
  }
</code></pre>

<p>Adding all the numbers on the array will be the newBudget since for every lower number we subtract it from the total and everything above just gets capped (essentially gets to be the average from what we got left with divided with the total elements we got left with - adding those will be the remains of the budget we got up to them).</p>
    </div>