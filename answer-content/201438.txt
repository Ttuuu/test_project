<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The first issue I see is it's very hard to read. You have too many levels (nesting) of <code>If/Else</code>, but also too much code in them which makes it hard to see where everything starts and ends etc. Also you have duplicated messages.</p>

<p>You code can either be condensed into less checks to return the same error message, or even just split out the issues into separate blocks, reverse your logic, and return early.</p>

<p>A very basic example of this idea (not necessarily the best approach for your code), instead of your code:</p>

<pre><code>if (!($NILength &lt; 10 | $NILength &gt; 10)) {
    // 23 lines of code including 4 IFs 4 more levels deep and 3 elses
} else {
    echo "Invalid National Insurance Number.";
}
</code></pre>

<p>Instead do this:</p>

<pre><code>if ($NILength &lt; 10 || $NILength &gt; 10) {
    echo "Invalid National Insurance Number.";
    return;
}
</code></pre>

<p>So instead of <code>if thing is ok do the thing...else...</code> you just do <code>if thing is NOT ok return</code> then there's no need to even have an else because if it didn't return then it was a false statement (no error) and the code can move along to the next check.</p>

<p>Additionally, instead of echoing in this function, most times you are better off returning a value (even a string error message). The problem with echoing from such a function is it makes it hard to <em>re-use</em> in another scenario where it doesn't want to echo something.  </p>

<p>Your first IF is written in an overly complicated way.  </p>

<pre><code>if (!($NILength &lt; 10 | $NILength &gt; 10)) {
</code></pre>

<blockquote>
  <p>If length is not less than 10<br>
  AND<br>
  If length is not greater than 10</p>
</blockquote>

<p>This is simply:  </p>

<blockquote>
  <p>If length is 10</p>
</blockquote>

<pre><code>if ($NILength === 10) {
</code></pre>

<p>Also as you only use this var once, it's arguably superfluous you can just check the passed in var with <code>strlen()</code>.</p>

<hr>

<p><strong>NOTE:</strong> I don't declare any of this code to be tested or working. This is more about theory than actual working code.</p>

<p><strong>Basic Refactor:</strong>  </p>

<p>This is a basic refactor your function to return early incorporating above points (also some PSR standard added with proper spaces etc). This is a bit cleaner and you can see the "moving parts" more clearly - that is each potential reason why the data is invalid or valid.</p>

<pre><code>function validateNI($niNo)
{
    if (empty($niNo)) {
        return "Invalid National Insurance Number.";
    }

    if (strlen($niNo) !== 10) {
        return "Invalid National Insurance Number.";
    }

    $niParts = str_split($niNo, 2);

    if ((preg_match("/[^!@#$%^&amp;*]*(BG|GB|NK|TN|NT|ZZ|D|F|I|Q|U|V)[^!@#$%^&amp;*]*/i", $niParts[0]))) {
        return "Invalid National Insurance Number.";
    }

    $niPartsSplit = str_split($niParts[0]);

    if (preg_match("/[^!@#$%^&amp;*]*(O)[^!@#$%^&amp;*]*/i", $niPartsSplit[1])) {
        return "Invalid National Insurance Number.";
    }

    $niPartsNum = $niParts[1] . $niParts[2] . $niParts[3];

    if (!is_numeric($niPartsNum)) {
        return "Invalid National Insurance Number.";
    }

     if (!preg_match("/[^!@#$%^&amp;*]*(A|B|C|D)[^!@#$%^&amp;*]*/i", $niParts[4])) {
         return "Invalid National Insurance Number.";
     }

     return "Valid National Insurance Number.";
}
</code></pre>

<p>I've added an <code>empty()</code> check on the passed in var to avoid "undefined var" warning.</p>

<p>I think the function above is tidy and clear. </p>

<p>Some people set a variable in each check and return that at the end, as well as other approaches. However, why let PHP run through a load of additional checks when something has already determined there's a problem? Unless you stack up different errors, but you do not here.<br>
<a href="https://softwareengineering.stackexchange.com/questions/18454/should-i-return-from-a-function-early-or-use-an-if-statement">Return Early</a></p>

<p>You can go another step and as you only have one error message setting a var is a bit tidier too (and means easier to change that shared message in one place later):</p>

<pre><code>function validateNI($niNo)
{
    $errorMessage = 'Invalid National Insurance Number';

    if (empty($niNo)) {
        return $errorMessage;
    }

    if (strlen($niNo) !== 10) {
        return $errorMessage;
    }

    // ETC

   return "Valid National Insurance Number.";
}
</code></pre>

<p>You could probs tidy some of the actual code up (beyond structure) and even pair some of the errors together, such as:</p>

<pre><code>function validateNI($niNo)
{
    if (empty($niNo) || strlen($niNo) !== 10) {
        return "Invalid National Insurance Number.";
    }

    $niParts = str_split($niNo, 2);
    $niPartsSplit = str_split($niParts[0]);
    $niPartsNum = $niParts[1] . $niParts[2] . $niParts[3];

    if (
        preg_match("/[^!@#$%^&amp;*]*(BG|GB|NK|TN|NT|ZZ|D|F|I|Q|U|V)[^!@#$%^&amp;*]*/i", $niParts[0]) 
        || preg_match("/[^!@#$%^&amp;*]*(O)[^!@#$%^&amp;*]*/i", $niPartsSplit[1]) 
        || !is_numeric($niPartsNum)
        ||!preg_match("/[^!@#$%^&amp;*]*(A|B|C|D)[^!@#$%^&amp;*]*/i", $niParts[4])
    ) {
        return "Invalid National Insurance Number.";
    }

    return "Valid National Insurance Number.";
}
</code></pre>

<p>Even though that is a shorter function, I think it's harder to read as there's a lot of regex bunched together. This is subjective though and where a dev's personal style comes in to play (or more so a team's unified decision).</p>

<hr>

<p><strong>Class:</strong>  </p>

<p>Going one step further, all of this would be in a class as this is the modern way:</p>

<pre><code>class ValidateNationalInsuranceNumber
{
    /**
     * @param string $niNo
     *
     * @return string
     */
    public function validateNi($niNo)
    {
        $errorMessage = 'Invalid National Insurance Number.';

        if (!$this-&gt;isLengthValid($niNo)) {
            return $errorMessage;
        };

        $niParts = str_split($niNo, 2);

        if (
            !$this-&gt;isPrefixValid($niParts[0])
            || !$this-&gt;isBodyValid($niParts)
            || !$this-&gt;isSuffixValid($niParts[4])
        ) {
            return $errorMessage;
        }

        return 'Valid National Insurance Number.';
    }

    /**
     * @param string $niNo
     *
     * @return bool
     */
    private function isLengthValid($niNo)
    {
        if (empty($niNo) || strlen($niNo) !== 10) {
            return false;
        }

        return true;
    }

    /**
     * @param string $prefix
     *
     * @return bool
     */
    private function isPrefixValid($prefix)
    {
        $niPartsSplit = str_split($prefix);

        if (
            preg_match(
                "/[^!@#$%^&amp;*]*(BG|GB|NK|TN|NT|ZZ|D|F|I|Q|U|V)[^!@#$%^&amp;*]*/i",
                $prefix
            )
            || preg_match("/[^!@#$%^&amp;*]*(O)[^!@#$%^&amp;*]*/i", $niPartsSplit[1])
        ) {
            return false;
        }

        return true;
    }

    /**
     * @param array $niParts
     *
     * @return bool
     */
    private function isBodyValid(array $niParts)
    {
        if (!is_numeric($niParts[1] . $niParts[2] . $niParts[3])) {
            return false;
        }

        return true;
    }

    /**
     * @param string $suffix
     *
     * @return bool
     */
    private function isSuffixValid($suffix)
    {
        if (!preg_match("/[^!@#$%^&amp;*]*(A|B|C|D)[^!@#$%^&amp;*]*/i", $suffix)) {
            return false;
        }

        return true;
    }
}
</code></pre>
    </div>