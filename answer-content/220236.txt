<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Don't Ignore Warning Messages</strong><br>
This line in e_shop.desplayAllProducts() generates a warning message:</p>

<pre><code>    for (int i = 0; i &lt; allProducts.size(); i++)
</code></pre>

<p>The warning is that there is a type miss-match between the variable <code>i</code> and allProducts.size(). To remove this warning message <code>i</code> should be declared as type <code>size_t</code>. All STL container classes return <code>size_t</code> from the size function. The type <code>size_t</code> is unsigned rather than signed, integers are signed.</p>

<p>It might be better to use a ranged for loop using iterators rather than an index for loop:</p>

<pre><code>    for (auto i : allProducts) {
        std::cout &lt;&lt; i-&gt;getProductName() &lt;&lt; std::endl;
    }
</code></pre>

<p>This may improve performance as well.</p>

<p><strong>Reusability and Maintainability</strong><br>
It might be better to put each class in it's own file. While several of the classes depend on the interface (abstract class) <code>IProducts</code>, none of the classes depend on the other classes in the header file. The header file Products.h can include each  of the product class files.</p>

<p>The <code>productName</code> string should be declared as a protected variable in the abstract class <code>IProducts</code> and rather than defining std::string getProductName() as an abstract function in <code>IProducts</code> create the full declaration of the function.</p>

<pre><code>class IProducts
{
public:
    std::string getProductName() { return productName; }  // Note: no `this` keyword.
    // Virtual Function to Display  the names of all components of a class implementing the interface
    virtual void DisplayComponents() = 0;
    // Virtual Function to display the values of the components of a class implementing the interface 
    virtual void Display() = 0;
    // Virtual Function to set the components to desired values 
    virtual void setAttributes() = 0;
protected:
    std::string productName;
};
</code></pre>

<p>Have a constructor in each of the classes that inherits from <code>IProducts</code> that initializes productName to the proper value. The constructor should also initialize each of the private variables to a default value. Some of the classes might require destructors as well, they can always be set to the default constructor if they don't have special functions such as closing files.</p>

<p>Unlike some other languages such as PHP, the <code>this</code> keyword is not generally required in C++ and is generally not used. There may be certain special cases where it is required.</p>

<p>It might be better if each class had a .cpp file that contained the functions and only the class declaration was in the header file. This will improve compile times and not require all file to rebuild when changes are made in the executable code.</p>

<p><strong>Portability</strong><br>
While </p>

<pre><code>#pragma once
</code></pre>

<p><a href="https://en.wikipedia.org/wiki/Pragma_once" rel="noreferrer">is widely supported, it is not part of the C or C++ standard</a> and some C++ compilers may report a compilation error or warning message. This <a href="https://stackoverflow.com/questions/1263521/what-is-pragma-used-for">stackoverflow question</a> also discusses the user of <code>#pragma once</code>. It might be better to use an explicit <a href="https://en.wikipedia.org/wiki/Include_guard" rel="noreferrer">include guard</a>.</p>

<pre><code>#ifndef GRANDPARENT_H
#define GRANDPARENT_H

struct foo {
    int member;
};

#endif /* GRANDPARENT_H */
</code></pre>

<p><strong>Performance</strong><br>
Generally the code will perform better if <code>\n</code> is used over <code>std::endl</code>. std::endl performs a file flush to the output stream and this adds time in each execution, if you use std::endl do it outside a loop after the loop has completed.</p>
    </div>