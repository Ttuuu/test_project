<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here is a potential solution which was minimized from a finite automata. To make this solution more maintainable, a parse tree could have been created (or an explicit finite automata) so that the syntax can be modified in the future.</p>

<p>Note: this answer is a bit academic in that its practical use is limited, however, provides a starting point to convert this program into a parse tree.</p>

<p>It doesn't have the file reading capabilities or the <code>argparse</code> abilities, but it has the core of the solution (checks if the program is valid and if so, run it.)</p>

<pre><code>import re

input_program = "&gt;&lt;72&gt; &gt;&lt;101&gt; &gt;&lt;108&gt; &gt;&lt;108&gt; &gt;&lt;111&gt; &gt;&lt;44&gt; &gt;&lt;32&gt; &gt;&lt;87&gt; &gt;&lt;111&gt; &gt;&lt;114&gt; &gt;&lt;108&gt; &gt;&lt;100&gt; &gt;&lt;33&gt;"

regex = r"(?:^\&gt;\&lt;((1|2|3|4|5|6|7|8|9|10|1{2}|12|13|14|15|16|17|18|19|20|21|2{2}|23|24|25|26|27|28|29|30|31|32|3{2}|34|35|36|37|38|39|40|41|42|43|4{2}|45|46|47|48|49|50|51|52|53|54|5{2}|56|57|58|59|60|61|62|63|64|65|6{2}|67|68|69|70|71|72|73|74|75|76|7{2}|78|79|80|81|82|83|84|85|86|87|8{2}|89|90|91|92|93|94|95|96|97|98|9{2}|10{2}|101|102|103|104|105|106|107|108|109|1{2}0|1{3}|1{2}2|1{2}3|1{2}4|1{2}5|1{2}6|1{2}7|1{2}8|1{2}9|120|121|12{2}|123|124|125|126|127))\&gt; )+(?:\&gt;\&lt;(1|2|3|4|5|6|7|8|9|10|1{2}|12|13|14|15|16|17|18|19|20|21|2{2}|23|24|25|26|27|28|29|30|31|32|3{2}|34|35|36|37|38|39|40|41|42|43|4{2}|45|46|47|48|49|50|51|52|53|54|5{2}|56|57|58|59|60|61|62|63|64|65|6{2}|67|68|69|70|71|72|73|74|75|76|7{2}|78|79|80|81|82|83|84|85|86|87|8{2}|89|90|91|92|93|94|95|96|97|98|9{2}|10{2}|101|102|103|104|105|106|107|108|109|1{2}0|1{3}|1{2}2|1{2}3|1{2}4|1{2}5|1{2}6|1{2}7|1{2}8|1{2}9|120|121|12{2}|123|124|125|126|127)\&gt;)$"

pattern = re.compile(regex)

def extract_ascii_codes(input_text):
  """
  Converts the ASCII codes into text
  """
  matches = re.finditer(r"\d+", input_text)
  for matchNum, match in enumerate(matches, start=1):
      yield int(match.group())

def parse_line(input_program):
  """
  Checks if the line in the program is syntatically valid; returns if it is
  """
  if pattern.match(input_program) is not None:
    return (''.join(map(chr, extract_ascii_codes(input_program))))

parsed_program = list(map(parse_line, input_program.split("\n")))

if all(parsed_program):
  for a_line in parsed_program:
    print(a_line)
else:
  print("Syntax error")
</code></pre>

<p>Finite automata (condensed):</p>

<p><a href="https://i.stack.imgur.com/K6JIp.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/K6JIp.png" alt="enter image description here"></a></p>
    </div>