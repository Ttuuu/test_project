<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<pre><code>private string GetUniqueStringForModel&lt;T&gt;(
    string originalString,
    IQueryable&lt;T&gt; databaseQueryable,
    Expression&lt;Func&lt;T, string&gt;&gt; stringFieldFunction
) where T : class {
    var lowerBound = originalString.ToLowerInvariant();
    var upperBound = originalString.ToUpperInvariant() + "z";
    var candidates = new HashSet&lt;string&gt;(
       databaseQueryable
          .Select(stringFieldFunction)
          .Where(field =&gt; field &gt;= lowerBound &amp;&amp; field &lt; upperBound)
          .ToSet()
    );

    return Enumerable
       .Range(0, int.MaxValue)
       .Select(i =&gt; originalString + (i == 0 ? "" : $"_{i}"))
       .First(candidate =&gt; !candidates.Contains(candidate));
}
</code></pre>

<p>There are a few things going on here.</p>

<p>First, since you are using Entity Framework and received the error you did, I believe that your <code>IEnumerable</code> is <em>actually</em> an <code>IQueryable</code>. If you want to add predicates to the query that are performed on the database server, you need to maintain the <code>IQueryable</code> as that data type and not prematurely force it to become an <code>IEnumerable</code>. This is of crucial importance to understand and I encourage you to go study the difference between these and what effects it has. The exact same code is compiled completely differently when cast to an IQueryable instead of an IEnumerable—differently in a way necessary for being able to project your C# code to SQL for doing the majority of the work in the database.</p>

<p>Second, your <code>Func</code> can work, but it must contain only methods and operators <a href="https://docs.microsoft.com/en-us/dotnet/framework/data/adonet/ef/language-reference/supported-and-unsupported-linq-methods-linq-to-entities" rel="nofollow noreferrer">that work with Entity Framework</a> and must be an <code>Expression&lt;Func&lt;&gt;&gt;</code>. If you want to use a method that is not supported, that can only be done by, after whatever IQueryables have filtered it so far, materializing the result set in memory using <code>.ToList()</code> and then iterate over it locally (using a regular <code>Func</code>).</p>

<p>My goal in the above code was to fetch the set of values that could possibly match the <code>originalString</code>. Notice that by assigning the values to variables, this leaves the queryable's <code>Where</code> clause susceptible to being read by EF, because it will be compiled as an <code>Expression</code> instead of to byte code. (That is why you need <code>IQueryable</code> instead of <code>IEnumerable</code>). The trick I used to select the appropriate range may not be a good one (I haven’t touched C# for 16 months). Study the operators and your data and pick a better one. Find the greatest value that can be added (not "z") and add that.</p>

<p>Third, the very limited set of results is being converted to a <code>Set</code> so that we can get O(1) lookup time. I promise you that performing a <code>ToList()</code> on an <code>IQueryable</code> (masked as an <code>IEnumerable</code>) on each new number suffix attempt is a superbly wonderful way to destroy performance. Please don't do that. Your code as written will read every single row from the underlying <code>IQueryable</code> <em>on every iteration of the while loop</em>—hopefully there are some conditions on it and this isn’t the entire table!</p>

<p>Fourth, you have to pay attention to the string comparison in the database and for the <code>HashSet</code>. Do you want case sensitivity or case insensitivity? Is there another kind of collation that might be needed to perform foreign language support? You need to provide the <code>HashSet</code> a <code>StringComparer</code> that will perform properly.</p>

<p>Fifth, why even provide a <code>stringFieldFunction</code> when the caller can just do <code>.Select(stringFieldFunction)</code> itself? This doesn't seem useful to me. Don't add unnecessary parameters. Doing it in the caller will avoid having to muck about with <code>Func</code> vs. <code>Expression&lt;Func&gt;</code>.</p>
    </div>