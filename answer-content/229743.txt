<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Naming</h1>
<p>It's unconventional to name a type with all-uppercase - we normally reserve those names for preprocessor macros, to warn readers that they need treating with care.  Avoid such names for ordinary identifiers.</p>
<p>Avoid using identifiers that begin with an underscore - in many situations, those names are reserved for use by the implementation, which could conflict with your own uses.</p>
<h1>Allocation</h1>
<p>Let's look at this section:</p>
<blockquote>
<pre><code>    NODE *newnode = (NODE *) malloc(sizeof(NODE));
    newnode-&gt;value = n;
    newnode-&gt;next = NULL;
</code></pre>
</blockquote>
<p>There's a serious bug here.  Remember that <code>malloc()</code> can return a null pointer.  It's <strong>essential</strong> to check that <code>newnode</code> is not null before we dereference it using <code>*</code> or <code>-&gt;</code>.</p>
<p>Because <code>malloc()</code> returns a <code>void*</code>, it's not necessary or desirable to cast the result - we can assign it directly to <code>newnode</code>.  Also, when computing the size, we can avoid repeating the type of the allocation by writing <code>sizeof *newnode</code> for the size (this has more value when the allocation is far from the declaration, but it's a good habit to be in).</p>
<p>That gives this replacement:</p>
<pre><code>    Node *newnode = malloc(sizeof *newnode);
    if (!newnode) {
        fputs("Allocation failed\n", stderr);
        return EXIT_FAILURE;
    }

    newnode-&gt;value = n;
    newnode-&gt;next = NULL;
</code></pre>
<h1>Reading input</h1>
<p>Another function whose return value must be checked is <code>scanf()</code>.  If I enter something that's not a number, or if I close the input stream, then we don't write to <code>n</code> here:</p>
<blockquote>
<pre><code>scanf("%i", &amp;n);
</code></pre>
</blockquote>
<p>We need to check the return value and test whether the expected number of items were successfully converted.  Something like this:</p>
<pre><code>int getinteger(void)
{
    int n = 0;
    printf("Enter integer: ");
    fflush(stdout);
    while (scanf("%i", &amp;n) != 1) {
        if (feof(stdin)) {
            /* no point retrying! */
            fputs("Read failure\n", stderr);
            exit(EXIT_FAILURE);
        }
        printf("Invalid input! Enter integer: ");
        fflush(stdout);
        scanf("%*[^\n]");       /* discard rest of line */
        /* newline remains, but will be discarded by scanf("%i") */
    }
    return n;
}
</code></pre>
<p>Notice that there's a lot more code for dealing with the unexpected than with the "happy path" - that's a common experience when reading input using C.</p>
<h1>Memory management</h1>
<p>Apart from the lack of checking when <code>malloc()</code> is used, the memory management is great.  No leaks, double-frees, or use of uninitialised, unallocated or released memory.</p>
<h1>Efficiency</h1>
<p>Notice that every time we add a node, we have to start from the head, and traverse the whole length of the list to get to the tail.  This becomes more and more work as the list gets longer - sometimes likened to <a href="https://www.joelonsoftware.com/2001/12/11/back-to-basics/" rel="noreferrer">Schlemiel the Painter</a>.  We can make this more efficient, though at the cost of some extra storage, by maintaining a pointer to the tail of the list as well as the head.</p>
<h1>Other improvements</h1>
<p>We don't need to pass a pointer-to-pointer into <code>printlist()</code>; a plain <code>Node *</code> is fine:</p>
<pre><code>void printlist(Node *p)
{
    for (;  p;  p = p-&gt;next) {
        printf("%i\n", p-&gt;value);
    }
}
</code></pre>
<p>When we're looking for the list tail, we can simplify by starting <code>p</code> at <code>head</code> rather than first assigning <code>NULL</code>:</p>
<pre><code>        Node *p = start;
        while (p-&gt;next) {
            p = p-&gt;next;
        }
        p-&gt;next = newnode;
</code></pre>
<p>In the main loop in <code>main()</code>, <code>n</code> shouldn't be declared in the <code>for</code> initializer, as it's not part of the loop control.</p>
<p>If we define <code>main()</code> last, the definitions of the other functions can act as their declarations, so no need to forward-declare them.</p>
<hr>
<h1>Improved code</h1>
<p>Note: I haven't addressed the issue mentioned above in "Efficiency".</p>
<pre><code>#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;

/* number of nodes to create in list */
#define N 5

typedef struct node {
    int value;
    struct node *next;
} Node;

/* Prompt on stdout, and read a number from stdin */
int getinteger(void)
{
    printf("Enter integer: ");
    fflush(stdout);

    int n;
    while (scanf("%i", &amp;n) != 1) {
        if (feof(stdin)) {
            /* no point retrying! */
            fputs("Read failure\n", stderr);
            exit(EXIT_FAILURE);
        }
        printf("Invalid input! Enter integer: ");
        fflush(stdout);
        scanf("%*[^\n]");       /* discard rest of line */
        /* newline remains, but will be discarded by scanf("%i") */
    }

    return n;
}

void printlist(Node *p)
{
    for (;  p;  p = p-&gt;next) {
        printf("%i\n", p-&gt;value);
    }
}

void freelist(Node *p)
{
    while (p) {
        Node *next = p-&gt;next;
        free(p);
        p = next;
    }
}


int main(void)
{
    Node *start = NULL;

    for (int i = 0;  i &lt; N;  ++i) {
        int n = getinteger();

        Node *newnode = malloc(sizeof *newnode);
        if (!newnode) {
            fputs("Allocation failure\n", stderr);
            return EXIT_FAILURE;
        }

        newnode-&gt;value = n;
        newnode-&gt;next = NULL;

        if (!start) {
            start = newnode;
        } else {
            Node *p = start;
            while (p-&gt;next) {
                p = p-&gt;next;
            }
            p-&gt;next = newnode;
        }
    }

    printlist(start);
    freelist(start);
}
</code></pre>
    </div>