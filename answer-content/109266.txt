<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ol>
<li><p>Well, first off, why do you use a <code>std::vector</code> for a comparatively small sequence of known length? A raw array or <code>std::array</code> suffice and avoids any dynamic allocation.</p>
</li>
<li><p>Next, avoid needless magic numbers. Use <code>std::mt19937::state_size</code> instead of manually specifying <code>624</code>.</p>
</li>
<li><p>Why do you use a lambda? A simple <code>std::ref(source)</code> suffices.</p>
</li>
</ol>
<p>The seeding itself looks perfectly fine and there's no actual <em>error</em> anywhere in your code.</p>
<pre><code>template&lt;class T = std::mt19937, std::size_t N = T::state_size * sizeof(typename T::result_type)&gt;
auto ProperlySeededRandomEngine () -&gt; typename std::enable_if&lt;N, T&gt;::type {
    std::random_device source;
    std::random_device::result_type random_data[(N - 1) / sizeof(source()) + 1];
    std::generate(std::begin(random_data), std::end(random_data), std::ref(source));
    std::seed_seq seeds(std::begin(random_data), std::end(random_data));
    return T(seeds);
}
</code></pre>
<p>You <em>could</em> avoid the need for <code>random_data</code> by using counting and transforming iterators as detailed in "<em><a href="https://stackoverflow.com/a/6974533/3204551">Sequence iterator? Isn't there one in boost?</a></em>".</p>
<p>This is not simpler, but maybe more efficient:</p>
<pre><code>template&lt;class T = std::mt19937, std::size_t N = T::state_size * sizeof(typename T::result_type)&gt;
T ProperlySeededRandomEngine () {
    std::random_device source;
    auto make_iter = [&amp;](std::size_t n) {
    return boost::make_transform_iterator(
        boost::counting_iterator&lt;std::size_t&gt;(n), [&amp;](size_t){return source();});
    };
    std::seed_seq seeds(make_iter(0), make_iter((N - 1) / sizeof(source()) + 1));
    return T(seeds);
}
</code></pre>
<p><a href="//coliru.stacked-crooked.com/a/ca6ce9c74205e0a5" rel="nofollow noreferrer">On coliru</a></p>
    </div>