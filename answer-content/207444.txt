<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>[<strong>note</strong>: This is more of a "food-for-thought" Answer, since I ended up realizing it could actually be invalid when called with enough <code>args</code> to cause <code>long</code>-overflow... but I thought this might still be worth posting to show other possibilities with <code>long</code>...]</p>

<p>This is not <em>asymptotically</em> faster (still linear O(|args|) like in the Question), but is many less lines of body code (3), and is <em>trivially</em> faster due to only 1 logic/if-check:</p>

<pre><code>public static boolean canSumToInt(long... args){
    long sum = 0;
    for(long curLong: args) sum += curLong;
    return Integer.MIN_VALUE &lt;= sum &amp;&amp; sum &lt;= Integer.MAX_VALUE;
}
</code></pre>

<ul>
<li>Can even still call this with <code>int</code>-type args, because of numeric promotion of [smaller data type] <code>int</code> -&gt; [larger data type] <code>long</code> (actual numeric value ends ups the same)</li>
<li>I don't see why you would need a separate/additional/distinct <code>me</code> parameter - you can just make <code>me</code> the first value in <code>args</code></li>
<li>The technically possible invalidity I mentioned however, is that the loop-summing could reach a point where there is <code>long</code>-overflow (which would go "undetected") with sufficiently-large-magnitude individual <code>args</code> or sufficiently-many <code>args</code> - and that overflowed sum could end up being <code>int</code>-type-magnitude, which would return a false-positive [of <code>true</code>]</li>
</ul>

<p>However you could even save 1 more line of code by re-introducing additional <code>me</code> parameter:</p>

<pre><code>public static boolean canSumToInt(long me, long... args){
    for(long curLong: args) me += curLong;
    return Integer.MIN_VALUE &lt;= me &amp;&amp; me &lt;= Integer.MAX_VALUE;
}
</code></pre>
    </div>