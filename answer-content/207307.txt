<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I think the general construction of your code is poor.</p>

<ol>
<li>A book is owned by a library even if the book is on loan.</li>
<li>Your code doesn't seem to be able to handle books with the same name.</li>
<li>Without running your code it looks like you can steal books by taking one out and returning another.</li>
<li><code>BookStatus</code> is incredibly poorly implemented. I'd instead use <code>dataclasses</code>.</li>
<li>You're effectively creating an in-memory database. And so you should design the database, and then the code around that.</li>
</ol>

<p>Starting with the database design you have three things:</p>

<ul>
<li>Book</li>
<li>Loan</li>
<li>Person</li>
</ul>

<p>Yes there is no library, because all books are in your library.
Each book can be loaned many times, but only one book can be in a loan.
Each person can have multiple loans, but each loan can only be given to one person.</p>

<p>And so your <code>Loan</code> object should have the ID of the book and the person, but neither the book nor the person should have any links to the other database items.</p>

<p>We can then create these objects and tables in Python.
I'm using <a href="https://docs.python.org/3/library/dataclasses.html" rel="nofollow noreferrer"><code>dataclasses</code></a> (<a href="https://pypi.org/project/dataclasses/" rel="nofollow noreferrer">Python 3.6</a>) and <a href="https://docs.python.org/3/library/typing.html" rel="nofollow noreferrer"><code>typing</code></a> to build the objects quickly.
Since we're already using <code>typing</code> for the <code>dataclass</code>, I decided to make the rest of the program fully typed allowing a static analyzer, such as <a href="http://mypy-lang.org/" rel="nofollow noreferrer">mypy</a>, to check my code for errors.
This allows the base code of:</p>

<pre><code>from dataclasses import dataclass
from typing import Optional, Set, Mapping, TypeVar, Dict, Type, Iterator
from datetime import datetime, timedelta

T = TypeVar('T')


@dataclass
class Book:
    id: int
    name: str


@dataclass
class Person:
    id: int
    name: str


@dataclass
class Loan:
    id: int
    book: Book
    person: Person
    checkout: datetime
    due: datetime
    checkin: Optional[datetime]


class Table(Mapping[int, T]):
    _db: Dict[int, T]

    def __init__(self, type: Type[T]) -&gt; None:
        self._db = {}
        self._type = type

    def __getitem__(self, key: int) -&gt; T:
        return self._db[key]

    def __iter__(self) -&gt; Iterator[T]:
        return iter(self._db)

    def __len__(self) -&gt; int:
        return len(self._db)


books = Table(Book)
people = Table(Person)
loans = Table(Loan)
</code></pre>

<p>This then allows us to easily add the additional functionality:</p>

<pre><code>class Table(Mapping[int, T]):
    # Other code
    def add(self, *args, **kwargs) -&gt; None:
        key = len(self)
        self._db[key] = self._type(key, *args, **kwargs)

    def display(self) -&gt; None:
        for value in self.values():
            print(value)


def borrow_book(person: int, book: int, loan_days: int) -&gt; None:
    checkout = datetime.now()
    loans.add(
        books[book],
        people[person],
        checkout,
        checkout + timedelta(days=loan_days),
        None
    )


def return_book(loan: int) -&gt; None:
    loans[loan].checkin = datetime.now()


def display_active_loans() -&gt; None:
    has_active = False
    for loan in loans.values():
        if loan.checkin is not None:
            continue
        has_active = True
        print(f'{loan.id}: {loan.person.name} -&gt; {loan.book.name}')
    if not has_active:
        print('No active loans')
</code></pre>

<p>And usage is fairly easy, you just use IDs:</p>

<pre><code>books.add('Title')
books.display()
people.add('Student')
people.display()
borrow_book(0, 0, 10)
display_active_loans()
return_book(0)
display_active_loans()
</code></pre>

<hr>

<pre><code>from dataclasses import dataclass
from typing import Optional, Set, Mapping, TypeVar, Dict, Type, Iterator
from datetime import datetime, timedelta

T = TypeVar('T')


@dataclass
class Book:
    id: int
    name: str


@dataclass
class Person:
    id: int
    name: str


@dataclass
class Loan:
    id: int
    book: Book
    person: Person
    checkout: datetime
    due: datetime
    checkin: Optional[datetime]


class Table(Mapping[int, T]):
    _db: Dict[int, T]

    def __init__(self, type: Type[T]) -&gt; None:
        self._db = {}
        self._type = type

    def __getitem__(self, key: int) -&gt; T:
        return self._db[key]

    def __iter__(self) -&gt; Iterator[T]:
        return iter(self._db)

    def __len__(self) -&gt; int:
        return len(self._db)

    def add(self, *args, **kwargs) -&gt; None:
        key = len(self)
        self._db[key] = self._type(key, *args, **kwargs)

    def display(self) -&gt; None:
        for value in self.values():
            print(value)


books = Table(Book)
people = Table(Person)
loans = Table(Loan)


def borrow_book(person: int, book: int, loan_days: int) -&gt; None:
    checkout = datetime.now()
    loans.add(
        books[book],
        people[person],
        checkout,
        checkout + timedelta(days=loan_days),
        None
    )


def return_book(loan: int) -&gt; None:
    loans[loan].checkin = datetime.now()


def display_active_loans() -&gt; None:
    has_active = False
    for loan in loans.values():
        if loan.checkin is not None:
            continue
        has_active = True
        print(f'{loan.id}: {loan.person.name} -&gt; {loan.book.name}')
    if not has_active:
        print('No active loans')
</code></pre>
    </div>