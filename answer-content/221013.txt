<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I don't think it can be done at design time given generic constraints. Second best option would be at runtime. There are 2 runtime constraints:</p>

<ol>
<li><code>TNullableKey</code> must be null-assignable (reference type or nullable type)</li>
<li>The underluying type of <code>TNullableKey</code> must be of type <code>TKey</code></li>
</ol>

<p>code</p>

<pre><code>public class FrameworkUser&lt;TKey, TNullableKey&gt; : IdentityUser&lt;TKey&gt;
           where TKey : IEquatable&lt;TKey&gt;
  {
      public virtual TNullableKey ParentUserId { get; set; }
      public FrameworkUser() 
      {
          var sourceType = typeof(TKey);
          var nullAssignableType = typeof(TNullableKey);

          if (!IsNullAssignable(nullAssignableType)) {
              throw new InvalidOperationException();
          }

          var targetType = nullAssignableType;
          if (IsNullable(targetType)) {
              targetType = Nullable.GetUnderlyingType(targetType);
          }

          if (!targetType.Equals(sourceType)) {
              throw new InvalidOperationException();
          }
      }

      private static bool IsNullable(Type t) {
          return t.IsGenericType &amp;&amp; t.GetGenericTypeDefinition() == typeof(Nullable&lt;&gt;);
      }

      private static bool IsNullAssignable(Type t) {
          if (IsNullable(t) || !t.IsValueType) {
              return true;
          }
          return false;
      }
 }
</code></pre>

<p>Test case</p>

<pre><code>public static void Main() {

        // OK
        var a = new FrameworkUser&lt;string, string&gt;();
        var b = new FrameworkUser&lt;int, int?&gt;();

        // Errors
        //var c = new FrameworkUser&lt;string, int&gt;();
        //var d = new FrameworkUser&lt;string, int?&gt;();
        //var e = new FrameworkUser&lt;int, int&gt;();

        Console.ReadKey();
    }
</code></pre>
    </div>