<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>What you can do is combine the two methods <code>toLower</code> and <code>toUpper</code> into one method, say <code>transform</code>, to which you pass the method by which to transform (<code>std::tolower</code> or <code>std::toupper</code>) as arguments. The same can be done for <code>toUpperCopy</code> and <code>toLowerCopy</code>. Passing functions allows you to be more flexible as you are now able to not only use <code>std::tolower</code> and <code>std::toupper</code> but also any other function which transforms a character.</p>

<p>You can combine everything into one method and use something like a boolean parameter to tell if it should copy or not but I would advise against it. The functions are short functions so they will still be readable and you keep the responsibility for copying in a separate function.</p>

<p>Passing the functions would look something like this:</p>

<pre class="lang-cpp prettyprint-override"><code>namespace ae
{
    template &lt;typename charT&gt;
    auto transform(std::basic_string&lt;charT&gt;&amp; str, charT charMap(charT, const std::locale&amp;))
    {
        std::transform(str.begin(), str.end(), str.begin(), [&amp;charMap](const auto&amp; c)
        {
            static const auto loc{ std::locale() };
            return charMap(c, loc);
        });
    }

    template &lt;typename charT&gt;
    auto transformCopy(std::basic_string&lt;charT&gt;&amp; str, charT charMap(charT, const std::locale&amp;))
    {
        auto newStr{ str };
        std::transform(str.begin(), str.end(), newStr.begin(), [&amp;charMap](const auto&amp; c)
        {
            static const auto loc{ std::locale() };
            return charMap(c, loc);
        });
        return newStr;
    }
}

int main()
{
    std::wstring my_str{ L"Test" };
    ae::transform(my_str, std::tolower);
    std::wcout &lt;&lt; my_str &lt;&lt; std::endl;

    std::string my_str2{ "This is a test aswell" };
    auto new_str{ ae::transformCopy(my_str2, std::toupper) };
    std::cout &lt;&lt; new_str &lt;&lt; std::endl;

    return 0;
}
</code></pre>

<p>Note that I changed the template variable from <code>StrT</code> to <code>charT</code> as the <code>charT</code> was needed for the <code>charMap</code>. Using both <code>StrT</code> and <code>charT</code>, the compiler was not able to infer the template argument for <code>charT</code> so you had to manually add the template arguments each time you called <code>ae::transform</code>.</p>
    </div>