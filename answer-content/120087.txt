<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><code>return</code> means "Eureka! I have found the answer! It is â€¦."  It hands that result back to the caller and stops executing any more code in this function.</p>

<p>Unlike <code>x**y</code>, your function gives incorrect results for negative or non-integer values of <code>y</code>.  You should note that caveat in a docstring.</p>

<p>The standard way to do counting loops in Python is to use <code>range()</code> (or, in Python 2, <code>xrange()</code>).</p>

<p>To reduce the complexity of your code, you should avoid unnecessary special cases.</p>

<pre><code>def pow(x, y):
    """Raise x to the power y, where y must be a nonnegative integer."""
    result = 1
    for _ in range(y):   # using _ to indicate throwaway iteration variable
        result *= x
    return result
</code></pre>

<hr>

<p>This particular looping pattern (starting with some initial value and repeatedly applying an operation to the result) could be <a href="https://docs.python.org/2/library/functools.html#functools.reduce">reduced</a> to a one-liner:</p>

<pre><code>from functools import reduce  # Optional in Python 2, required in Python 3

def pow(x, y):
    """Raise x to the power y, where y must be a nonnegative integer."""
    return reduce(lambda result, _: result * x, range(y), 1)
</code></pre>

<p>This solution is admittedly foreign-looking to a C programmer.  The <a href="https://docs.python.org/2/library/functions.html#reduce"><code>reduce()</code></a> function uses <code>1</code> as the starting value (equivalent to <code>result = 1</code> in the first solution).  For each <code>_</code> in <code>range(y)</code>, it does <code>result = result * x</code>.  <code>lambda</code> is just a way to define a simple function on the spot.</p>

<hr>

<p>A more efficient algorithm would be <a href="https://en.wikipedia.org/wiki/Exponentiation_by_squaring">repeated squaring</a>.</p>
    </div>