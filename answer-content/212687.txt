<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You can put your logic in a <code>while</code> loop that repeats indefinitely (we'll break out of it later). In that loop make your HTTP request and parse the response. If it is successful get the HTML returned by it and <code>break</code> out of the loop. If it fails pause, increment your retry attempts, and then check to see if you have reached your maximum amount of retries. If so, <code>die()</code>.</p>

<pre><code>while (true) {
    $getPage = CurlPage($URL);
    $getPage1httpCode = $getPage['httpCode'];
    if ($getPage1httpCode === 200) {
        $HTML = $getPage['Data'];
        break;
    }
    sleep(rand(5, 10));
    $attempts++;
    if ($attempts === 5) {
        die('Fatal Error');
    }
}
</code></pre>

<p>I didn't run this code but it should demonstrate how you can simply this code and avoid code repetition and the <a href="http://wiki.c2.com/?ArrowAntiPattern" rel="nofollow noreferrer">arrowhead anti-pattern</a>.</p>

<p><strong>Variable Naming</strong></p>

<p>When naming variables don't use all uppercase unless you are trying to represent a constant. <code>$HTML</code> should be <code>$html</code>. (And if you are trying to have a variable act as a constant you should use <code>define()</code> to make it an actual constant but that doesn't apply here).</p>

<p>Variables should also start with a lower case letter. So <code>$Cookie</code> becomes <code>$cookie</code>.</p>

<p><strong>Follow PSR coding standards</strong>    </p>

<p>The PSR coding standards exist to ensure a high level of technical interoperability between shared PHP code. They also ensure conformity for projects with multiple developers. </p>

<p><a href="https://www.php-fig.org/psr/psr-2/" rel="nofollow noreferrer">PSR-2 </a> says that:</p>

<blockquote>
  <p>Opening braces for control structures MUST go on the same line, and closing braces MUST go on the next line after the body.</p>
</blockquote>

<pre><code>if ($getPage1httpCode != 200)
{
</code></pre>

<p>becomes:</p>

<pre><code>if ($getPage1httpCode != 200) {
</code></pre>

<p><strong>When doing comparisons use === whenever possible</strong></p>

<p>Unlike <code>==</code> which compares values only, <code>===</code> compares both values and <em>type</em>. This strict comparison helps to avoid error, and attacks, that occur when PHP encounters a comparison of two variables of different types it will coerce one of the variables into the type of the other variable in order to do the comparison.</p>

<p>For example</p>

<pre><code>1 == '1'  // true
1 === '1' // false
</code></pre>

<p>How much does this matter? It depends. If you get into a situation where you are getting numbers as strings but you are trying to use them as numbers, for something like sorting, you can get unexpected results if your check only checks value instead of type. And those of us who remember phpBB remember when it was subject to a slew of high profile vulnerabilities many of which were resolved simply by using a stricter comparison. So, yes, it matters.  </p>
    </div>