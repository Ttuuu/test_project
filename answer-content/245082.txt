<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This is not a good interface to serialize to JSON:</p>
<pre><code>jsonData = Foo(100,500,Bar(900).toJson()).toJson()
</code></pre>
<p>You would want it to be transparent and be able to do</p>
<pre><code>foo = Foo(100, 500, Bar(900))
json_data = foo.to_json()
</code></pre>
<p>Otherwise you have weird things, like you are initializing <code>Foo</code>  with the serialized <code>Bar</code> object, instead of the actual object, just so you can serialize it. This will fail as soon as your initializer does anything (except setting properties) with the arguments it is passed.</p>
<p>I would consider implementing a custom JSON Encode/Decoder:</p>
<pre><code>class Foo:
    def __init__(self, x, y, bar):
        self.x =x
        self.y = y
        self.bar = bar #Second class object is here

class Bar:
    def __init__(self, z):
        self.z = z
</code></pre>

<pre><code>import json

class ClassJSONEncoder(json.JSONEncoder):
    def default(self, obj):
        if hasattr(obj, "__dict__"):
            return {"__class__": obj.__class__.__name__, **obj.__dict__}
        # Let the base class default method raise the TypeError
        return json.JSONEncoder.default(self, obj)

def as_class(dct):
    if '__class__' in dct:
        cls_name = dct.pop("__class__")
        cls = vars()[cls_name]
        return cls(**dct)
    return dct
</code></pre>
<p>Now, if you want to, you can add a JSONSerializable mix-in:</p>
<pre><code>class JSONSerializable:
    def to_json(self):
        return json.dumps(self, cls=ClassJSONEncoder)

    @classmethod
    def from_json(cls, s):
        self = json.loads(s, object_hook=as_class)
        assert isinstance(self, cls)
        return self
</code></pre>
<p>So you can directly inherit from this:</p>
<pre><code>class Foo(JSONSerializable):
    ...

class Bar(JSONSerializable):
    ...

Foo(100, 200, Bar(900)).to_json()
# '{"__class__": "Foo", "x": 100, "y": 200, "bar": {"__class__": "Bar", "z": 900}}'
Foo.from_json(Foo(100, 200, Bar(900)).to_json())
# &lt;__main__.Foo at 0x7effb1d86e48&gt;
# with {'x': 100, 'y': 200, 'bar': {'z': 900}}
</code></pre>
<p>Although this is maybe still not the best implementation, because <code>Foo.from_json</code> suggests that you get back a <code>Foo</code> object, while this serialization relies on the correct <code>"__class__"</code> key for the class name (although I added a check that this is the case).</p>
<p>This also does not deal with positional-only arguments. It also requires, just like your code, the <code>__dict__</code> to be necessary and sufficient for creating a new object.</p>
<p>However, this approach has the added advantage that it can override the <code>to_json</code> and <code>from_json</code> methods, should you need to, while covering the base cases quite nicely, IMO.</p>
    </div>