<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First and foremost: go and get yourself an IDE with an autoformatter, e.g. <a href="https://www.jetbrains.com/pycharm/" rel="nofollow noreferrer">PyCharm</a>, <a href="https://code.visualstudio.com/" rel="nofollow noreferrer">Visual Studio Code</a> with the <a href="https://code.visualstudio.com/docs/python/python-tutorial" rel="nofollow noreferrer">Python Plugin</a> (just to name a few, there is a longer list in <a href="https://codereview.meta.stackexchange.com/a/5252/92478">another post here on Code Review</a>). This will help you to establish a consistent code style, which in turn makes it easier to read and review code. Python comes with an "official" <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">Style Guide for Python Code</a> (aka PEP 8) and those tools greatly help to write code that looks professional. Some aspects to take special care of:</p>

<ul>
<li>whitespace before and after <code>=</code> in assignments, e.g. <code>distancedata = pd.DataFrame(harray)</code></li>
<li><code>lower_case_with_underscore</code> names for variables and functions, e.g. <code>def distances_train(d3, d2, d1): ...</code></li>
<li>writing <code>"""documentation"""</code> for your code</li>
</ul>

<p>Once you have that covered, I highly recommend to have a look at some of the talks of Jake VanderPlas:</p>

<ul>
<li><a href="https://www.youtube.com/watch?v=EEUXKG97YRw" rel="nofollow noreferrer">Losing your Loops - Fast Numerical Computing with NumPy</a></li>
<li><a href="https://www.youtube.com/watch?v=zQeYx87mfyw" rel="nofollow noreferrer">Performance Python: Seven Strategies for Optimizing Your Numerical Code</a></li>
</ul>

<p>Also a highly recommended read to get going with numerical computations in Python: <a href="https://jakevdp.github.io/PythonDataScienceHandbook/" rel="nofollow noreferrer">Python Data Science Handbook</a> by the same person. It will take you some time to work through this, but I promise it'll  be worth the effort.</p>

<p>A core takeaway of the material I linked to: Loops are slow in plain Python, so it's often best to avoid them as far as possible.</p>

<p>I'll demonstrate that using <code>Distancetrain</code></p>

<blockquote>
<pre><code>def Distancetrain(d3, d2, d1):
    d = len(d3.index)
    harray = []
    for i in range(d):
        harray.clear()
        for j in range(d):
            harray.append(((d3.iloc[i]-d3.iloc[j])**2) + ((d2.iloc[i]-d2.iloc[j])**2) + ((d1.iloc[i]-d1.iloc[j])**2))
        if i &lt; 1:
            distancedata = pd.DataFrame(harray)
        else:
            distancedata[i] = harray
    return distancedata
</code></pre>
</blockquote>

<p>Things that make this function slow:</p>

<ul>
<li>nested <code>for</code> loops in Python</li>
<li>unnecessary computations: <a href="https://en.wikipedia.org/wiki/Metric_(mathematics)#Definition" rel="nofollow noreferrer">a core principle of a distance function like the squared Euclidean distance you are using is, that it is symmetric</a>, i.e. you only have to compute either the upper or lower (triangle) half of the distance matrix</li>
<li>"hand-written" distance function</li>
<li>elementwise access to elements of a pandas series: pandas and numpy are optimized to apply the same operation on a lot of elements at the same time. Manually iterating over them can be costly and very slow.</li>
<li>dynamically growing array(s)</li>
</ul>

<p>So how can this be improved? Since distance computation is a very common task in all kinds of machine learning applications, there is good library support for it, namely in the <a href="https://docs.scipy.org/doc/scipy/reference/spatial.distance.html" rel="nofollow noreferrer"><code>scipy.spatial.distance</code></a> module of <a href="https://www.scipy.org/" rel="nofollow noreferrer">scipy</a>. You are already using numpy, pandas, and sklearn, so there is a great chance that scipy is also available to you.</p>

<p>Looking at the module's documentation I linked to above, shows two very convenient functions: <a href="https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.distance.pdist.html" rel="nofollow noreferrer"><code>pdist</code></a> and <a href="https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.distance.cdist.html" rel="nofollow noreferrer"><code>cdist</code></a>. <code>pdist</code> is basically equivalent to what <code>Distancetrain</code> is supposed to do, <code>cdist</code> will become handy when thinking about improvements on <code>Distancetest</code>.</p>

<p>With this function, <code>Distancetrain</code> becomes very easy to implement:</p>

<pre><code>def as_column(series):
    """Reshapes a pandas series to a numpy column vector"""
    return series.to_numpy(copy=False).reshape((-1, 1))


def distances_train(d3, d2, d1):
    # pdist requires the input to have a shape of (n_samples, n_dimensions)
    np_data = np.concatenate((as_column(d3), as_column(d2), as_column(d1)), axis=1)
    # squareform is used to get the full distance matrix from the half triangle I talked about earlier
    return pd.DataFrame(squareform(pdist(np_data, "sqeuclidean")))
</code></pre>

<p>All that reshaping, the concatenation, and the conversion back to a dataframe is basically unnecessary. I only keep them so that the output is compatible with your original code. You can use <code>np.allclose(arr1, arr2)</code> to see for yourself that the results are indeed identical.</p>

<p>The loops that previously had to be executed by the Python interpreter, are now executed in the underlying library implementation. Numerical Python libraries are usually written in C, and therefore (most of the time) much, much faster than plain Python code when it comes to loops.</p>

<p>An informal timing delivered the following results (average over 10 runs):</p>

<pre class="lang-none prettyprint-override"><code>original:  15.3467 s
new:        0.0031 s
</code></pre>

<p>That's almost 5000x faster!</p>

<p>You can rewrite other parts of your code in the same fashion. It just takes some time to get used to think about the problem in terms of larger array and matrix operations. A tried-and-tested approach to get there is to rewrite parts of your code while keeping the old code around to check if the results match. Sometimes they don't, but that shouldn't discourage you from further looking into it. More often than not, the rewritten version can be correct because it's easier and straightforward without convoluted loops and the like.</p>

<p>Maybe also have a look at <a href="http://numba.pydata.org/" rel="nofollow noreferrer">numba</a>, a just-in-time compiler for Python code. This can sometimes speed up loops significantly (see <a href="https://codereview.stackexchange.com/a/216399/92478">here</a> for example). numba does not fully support everything you can do in Python or numpy, so the implementation might need some tweaking to work correctly with it.</p>

<p>Of course profiling is also key in that process and has been mentioned in the comments. Python's built-in <a href="https://docs.python.org/3/library/profile.html" rel="nofollow noreferrer"><code>cProfile</code></a> module is very useful for that purpose. <a href="https://docs.python.org/3/library/timeit.html" rel="nofollow noreferrer"><code>timeit</code></a> can also be used to robustly measure the execution time of smaller pieces of code.</p>
    </div>