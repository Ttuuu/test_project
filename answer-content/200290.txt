<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here are what in my opinion are the primary areas of concern.</p>

<p><em>Misuse of Json.NET</em></p>

<p>Code like <code>JObject.Parse("{" + newJson + "}")</code> is redundant. You are manually forming a JSON string and then deserialising it back into a JObject. You can just <a href="https://www.newtonsoft.com/json/help/html/CreatingLINQtoJSON.htm" rel="nofollow noreferrer">build JTokens directly</a>, avoiding the cost of deserialization and having to mess around with formatting.</p>

<p><em>Inefficient Token Replacement</em></p>

<p>After the service call, you update the original items very inefficiently. Lets say you have 1000 items each with 3 tokenised fields. That would be 3000 results from your service call. Your code iterates through all 3000 results for each of the 3000 tokens, resulting in a total of ~9000000 iterations. Iâ€™ll show you below how to reduce this to just 3000.</p>

<p><strong>A Possible Solution</strong></p>

<p>If you create some classes to deserialize to/from, the code will be much easier to work with, removing the need to deal with <code>JTokens</code> at all. To fix your 9 million iterations problem, you could use a dictionary to create a lookup table when you initially loop over the properties. The key could be the token, and the value could be a reference to the item that needs to be updated. Then once you have your token values, you just need to iterate over them, updating the dictionary (fast). I've put a console app together <a href="https://gist.github.com/mattwcole/f0db8dc307988e39571aacb29c42ec73" rel="nofollow noreferrer">here</a> that works with your example JSON to demonstrate. The key parts are as follows.</p>

<p><em>Form service request and lookup table</em></p>

<pre><code>foreach (var item in inputData.Wrapper)
{
    foreach (var kvp in item.Where(property =&gt; property.Value.StartsWith("@!!!@")))
    {
        propertiesLookup[kvp.Value] = new ItemUpdate
        {
            Properties = item,
            UpdateKey = kvp.Key
        };
        propertiesRequest.Wrapper.Add(new PropertySearch
        {
            Token = kvp.Value
        });
    }
}
</code></pre>

<p><em>Use lookup table to add tokenized fields to items</em></p>

<pre><code>foreach (var item in intermediateData.Wrapper)
{
    var itemToUpdate = propertiesLookup[item.Token];
    itemToUpdate.Properties[$"@{itemToUpdate.UpdateKey}"] = item.Value;
}
</code></pre>
    </div>