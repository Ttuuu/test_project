<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ol>
<li><p>The docstring is not quite right: "Find first non-repeated char in a string" — and then what? It should say explicitly that it returns the character. </p></li>
<li><p>The function returns <code>False</code> if all characters are repeated. This is a bad idea: it would be easy for the caller to forget to check. It's better to raise an exception in exceptional cases.</p></li>
<li><p><code>myDict</code> is an uninformative choice of variable name. This dictionary contains counts of characters, so it should have name like <code>counts</code> or <code>character_counts</code>.</p></li>
<li><p><code>c in myDict.keys()</code> can be simplified to <code>c in myDict</code>.</p></li>
<li><p>Building a dictionary of counts can more easily done using the built-in <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow noreferrer"><code>collections.Counter</code></a>. It's not clear why you would want to avoid using this. Trivial functions should be trivial.</p></li>
<li><p>There's no point in testing <code>if 1 in myDict.values()</code>. Dictionaries have efficient lookup by key, but not by value, so the <code>in</code> operator here has to look through all the values. Since you're going to look through all the values anyway, this doesn't save you anything.</p></li>
<li><p>The runtime is \$Θ(n^2)\$ because <code>s.index(k)</code> has to search through the string for the character <code>k</code>. But there is a \$Θ(n)\$ algorithm:</p>

<pre><code>from collections import Counter

def unique_char(s):
    """Return the first non-repeated character in the string s, or raise
    ValueError if all characters are repeated.

    """
    counts = Counter(s)
    for c in s:
        if counts[c] == 1:
            return c
    raise ValueError("all characters are repeated")
</code></pre></li>
</ol>
    </div>