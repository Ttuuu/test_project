<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I see a number of things that may help you improve your program.</p>

<h2>Don't abuse <code>using namespace std</code></h2>

<p>Putting <code>using namespace std</code> at the top of every program is <a href="http://stackoverflow.com/questions/1452721/why-is-using-namespace-std-considered-bad-practice">a bad habit</a> that you'd do well to avoid.  </p>

<h2>Use consistent formatting</h2>

<p>The code as posted has inconsistent formatting.  For example, some places use tabs for indentation and other use four or eight spaces and sometimes there is a space after <code>#include</code> and sometimes not (I prefer the space).  Pick a style and apply it consistently. </p>

<h2>Describe your program better</h2>

<p>For code reviewers and for any reader of your code, there should be a clear explanation of the purpose of the code.  As one comment noted, the description "convert do a for loops into while loops" is quite vague.  What transformations are being done and why?  What is the expected output?  Is it supposed to handle macros, for example?</p>

<h2>Test your code</h2>

<p>There's not much evidence here that the code has been tested, and a test stub is often a good way to both make sure there are fewer errors in the code and also to convey what the program is intended to do.  For example, I used this sample input:</p>

<pre><code>#include &lt;stdio.h&gt;
/* This is a comment and shouldn't be touched...
for (int i=10; i; --i) {
*/

int main() {
    int x = 0;

    for (int i=10; i; --i) {
        for (int j = i; j; --j, x+=i*j) {
            for (int x=1; x; --x) 
                printf("%d\n", i*j);
        }
    }

    while (x &gt; 10000) 
        x &gt;&gt;= 1;

    printf("%d\n", x);
}
</code></pre>

<p>This results in a program which compiles and runs without error.  If we use this software to transform it, it still results in a program which compiles and runs without error, but the output is completely different and never terminates!  </p>

<h2>Rethink your approach</h2>

<p>The current lexer works but relies on thirteen different possible states which is a heavy cognitive load for any programmer reading or modifying this code.  As an example, there is not really much difference between the <code>FOR</code> state and the <code>oneLineFor</code> state and I strongly suspect they should be combined.</p>

<h2>Eliminate redundant rules</h2>

<p>The code contains these four rules:</p>

<pre><code>&lt;text&gt;\n {
    loopBody+=yytext;
    ECHO;
}
&lt;DOWHILE&gt;\n {
    loopBody+=yytext;
    ECHO;
}
&lt;text&gt;. {
    loopBody+=yytext;
    ECHO;
}
&lt;DOWHILE&gt;. {
    loopBody+=yytext;
    ECHO;
</code></pre>

<p>They can all be reduced to this single rule:</p>

<pre><code>&lt;text,DOWHILE&gt;.|\n {
    loopBody+=yytext;
    ECHO;
}
</code></pre>
    </div>