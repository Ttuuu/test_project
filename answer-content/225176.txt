<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>How about a generic extension method that takes a boolean and an expression, whereas the expression is only evaluated in case the boolean is true:</p>

<pre><code>public static IQueryable&lt;T&gt; When&lt;T&gt;(
    this IQueryable&lt;T&gt; source, bool trigger, Expression&lt;Func&lt;T, bool&gt;&gt; expression)
{
    if (trigger)
    {
        return source.Where(expression);
    }

    return source;
}
</code></pre>

<p>It allows you to chain the calls similar to what @t3chb0t suggested, but it will not even chain unnecessary filters:</p>

<pre><code>articles = articles.When(filters.IsAvailable.HasValue, article =&gt; article.IsAvailable == filters.IsAvailable)
    .When(!string.IsNullOrEmpty(filters.Name), article =&gt; article.Title.Contains(filters.Name));
</code></pre>

<p>Similarly it would be possible to write an even more generic method that doesn't take <code>Expression&lt;Func&lt;T, bool&gt;&gt;</code> as third parameter but an <code>Expression&lt;Func&lt;IQueryable&lt;T&gt;, IQueryable&lt;T&gt;&gt;&gt;</code>, which would allow you to chain arbitrary methods (with a trigger).</p>
    </div>