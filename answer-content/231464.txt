<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This is not bad for a programmer as new to C++ as you have said you are.  Keep up the good work!  With that said, here are some ideas on how you might be able to improve your program.</p>

<h2>Don't abuse <code>using namespace std</code></h2>

<p>Putting <code>using namespace std</code> at the top of every program is <a href="http://stackoverflow.com/questions/1452721/why-is-using-namespace-std-considered-bad-practice">a bad habit</a> that you'd do well to avoid.  It's not necessarily wrong to use it, but you should be aware of when not to (as when writing code that will be in a header).</p>

<h2>Don't use <code>system("cls")</code></h2>

<p>There are two reasons not to use <code>system("cls")</code> or <code>system("pause")</code>.  The first is that it is not portable to other operating systems which you may or may not care about now.  The second is that it's a security hole, which you absolutely <strong>must</strong> care about.  Specifically, if some program is defined and named <code>cls</code> or <code>pause</code>, your program will execute that program instead of what you intend, and that other program could be anything.  First, isolate these into a seperate functions <code>cls()</code> and <code>pause()</code> and then modify your code to call those functions instead of <code>system</code>.  Then rewrite the contents of those functions to do what you want using C++.  </p>

<h2>Use the appropriate <code>#include</code>s</h2>

<p>This code has <code>#include &lt;stdlib.h&gt;</code> but in a C++ program that should actually be <code>&lt;cstdlib&gt;</code> which puts the various declarations into the <code>std::</code> namespace rather than in the global namespace.  However in this case, if you follow the immediately previous suggestion, the code will use nothing from that and so the <code>#include</code> can simply be eliminated.</p>

<h2>Use whitespace to improve readability</h2>

<p>Lines like this:</p>

<pre><code>}while(arr[choice]==10||arr[choice]==11);
</code></pre>

<p>become much easier to read with a little bit of whitespace:</p>

<pre><code>} while (arr[choice] == 10 || arr[choice] == 11);
</code></pre>

<h2>Use constant string concatenation</h2>

<p>This code currently has a number of instances that look like this:</p>

<pre><code>cout&lt;&lt;"invalid move!!";
cout&lt;&lt;"place your turn!!";
</code></pre>

<p>This calls the <code>&lt;&lt;</code> operator twice.  Instead, you could write this:</p>

<pre><code>std::cout &lt;&lt; "invalid move!!\n"
             "place your turn!!";
</code></pre>

<p>This only calls <code>&lt;&lt;</code> once.  The compiler automatically concatenates the string literals together.</p>

<h2>Consider using standard length lines</h2>

<p>The comments in the code are very long and some lines are over 200 characters.  Neither of these things are necessarily wrong, but they are different from the usual convention which is to make sure that lines are no more than around 80 characters long.  Some use 132 characters as a limit.  Both of these stem from historical limitations of standard printers and displays, and while those are history, the convention is still widely used.</p>

<h2>Eliminate global variables where practical</h2>

<p>Having routines dependent on global variables makes it that much more difficult to understand the logic and introduces many opportunities for error.  The global variable <code>arr</code> (which is not a good name, by the way) could instead be wrapped in an object to make it easy to differentiate between read access and an update and to keep the state of the game consistent and accurate.</p>

<h2>Don't Repeat Yourself (DRY)</h2>

<p>The <code>checkwin()</code> function includes large portions of repeated code.  Instead of repeating code, it's generally better to make common code into a function.</p>

<h2>Omit unused variables</h2>

<p>Because <code>argc</code> and <code>argv</code> are unused, you could use the alternative form of <code>main</code>:</p>

<pre><code>int main ()
</code></pre>

<h2>Eliminate "magic numbers"</h2>

<p>This code has a number of inscrutable "magic numbers," that is, unnamed constants such as 3, 10, 11, etc.  Generally it's better to avoid that and give such constants meaningful names.  That way, if anything ever needs to be changed, you won't have to go hunting through the code for all instances of "3" and then trying to determine if this <em>particular</em> 3 is relevant to the desired change or if it is some other constant that happens to have the same value.</p>

<h2>Use longer, more meaningful names</h2>

<p>Names like <code>p</code> and <code>a</code> and <code>b</code> and <code>arr</code> are not very descriptive.  Better names help the reader of the code understand what is happening and why.</p>

<h2>Don't mislead with comments</h2>

<p>The code currently contains this peculiar line:</p>

<pre><code>int a = 10, b = 11;         // player 1 == 69 and player 2 == 96
</code></pre>

<p>The comments and the code contradict each other.  If the variables were given better names, you could simply eliminate the comment:</p>

<pre><code>int player1 = 10;
int player2 = 11;
</code></pre>

<h2>Declare each variable on its own line</h2>

<p>Declaring each variable on its own line avoids certain kinds of errors and leaves more room for a meaningful comment, if needed.  See <a href="https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#es10-declare-one-name-only-per-declaration" rel="noreferrer">ES.10</a></p>

<h2>Use rational return values</h2>

<p>All of your functions return <code>void</code> and half take no parameters.  This is highly suspect.  For example, it would make more sense to have <code>turn</code> return a <code>bool</code> value to indicate that the player who just played has won the game.  See the next suggestion.</p>

<h2>Declare the loop exit condition at the top</h2>

<p>The <code>main</code> routine has this seemingly endless loop:</p>

<pre><code>while (true) {
    turn(&amp;a);
    turn(&amp;b);
}
</code></pre>

<p>However the comment indicates that it's not <em>really</em> an infinite loop, but that the game ends when either one player wins or the game is a tie.  It would be better to make that explicit <em>in the code itself</em> rather than just in the comment.</p>

<pre><code>while ((!turn(&amp;a) &amp;&amp; !tie()) &amp;&amp; (!turn(&amp;b) &amp;&amp; !tie()))
{ /* keep playing until game end */ }
</code></pre>

<p>This uses <em>short-circuit</em> evaluation, which means that, in the case of an <code>&amp;&amp;</code> expression, if the first condition is not true, the second one won't be evaluated.  In this case, we assume that <code>turn</code> returns <code>true</code> if that player has just won and that a new function <code>tie</code> returns true if the game is a tie.</p>

<h2>Separate input, output and calculation</h2>

<p>To the degree practical it's usually good practice to separate input, output and calculation for programs like this.  By putting them in separate functions, it isolates the particular I/O for your platform (which is likely to be unique to that platform or operating system) from the logic of the game (which does not depend on the underlying OS). </p>

<h2>Have you run a spell check on comments?</h2>

<p>If you run a spell check on your comments, you'll find a number of things such as "GAMEVOARD" instead of "GAMEBOARD" and "nad" instead of "and".  Also in the case of a tie, the user is informed that "THE GEME IS OVER" (instead of the "GAME").  It's worth the extra step to eliminate spelling errors, especially in user-visible strings.</p>

<h2>Think of the user</h2>

<p>The game seems to work and follow the usual conventions for the game, but the use of <code>10</code> and <code>11</code> is a bit strange for users.  Consider using instead the typical text characters <code>X</code> and <code>O</code>.  There is some indication that perhaps you tried to do that.  A hint in that regard: if you keep letters in the game array instead of <code>int</code> values, you may find it easier to manage.</p>

<h2>Don't pass raw pointers</h2>

<p>The <code>turn()</code> function is passed a pointer to the <code>player</code> value which is not a good idea.  Modern C++ makes very little use of raw pointers.  Instead, it would make more sense to do it as was done for the <code>check_win()</code> code and simply pass by value since what's being passed is not a gigantic structure (that would take time and memory to copy) but just an <code>int</code> which likely fits in a machine register.</p>

<h2>Eliminate <code>return 0</code></h2>

<p>You don't need to explicitly provide a <code>return 0;</code> at the end of main -- it's created implicitly by the compiler.</p>
    </div>