<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I don't know SFML at all, so very partial review.</p>

<pre><code>auto random(const std::uniform_real_distribution&lt;float&gt;&amp; dist)
{
    static auto&amp; RandomEngine = randomEngine();
    return dist(RandomEngine);
}
</code></pre>

<p>There are two portability bugs here:</p>

<ul>
<li><code>randomEngine()</code> returns a temporary, but <code>auto&amp;</code> will deduce a non-const reference type here - that's an error (MSVC has an extension that accepts this though, unfortunately). But you don't need a reference here though, just a plain static object, so drop the <code>&amp;</code></li>
<li>the distribution's <code>operator()(Generator &amp;)</code> member is not const according to the standard. You should remove the <code>const</code> from parameter for this to be portable.</li>
</ul>



<pre><code>auto randomEngine()
{
    // ...
    thread_local std::mt19937 seeded_engine(seeds);
    // ...
}
</code></pre>

<p>This <code>thread_local</code> doesn't make sense here, at least not with your <code>random()</code> function's usage. (Even without that it's fishy, your seed manipulations would be executed on every call, but the actual engine would be constructed only once and copied out of the function.) Remove it.</p>

<p>If threads are involved, you need to change the <code>static</code> to <code>thread_local</code> in <code>random</code>, you'll get data races in there otherwise.</p>

<pre><code>explicit World(const sf::Font &amp;font)
  : mSnake(font), mBorders(4),
      mDistX(2 * BlockSize, WindowSize.x - 2 * BlockSize),
      mDistY(3 * BlockSize, WindowSize.y - 2 * BlockSize), mScore() {...}
// ...
std::size_t mScore;
// ...
DistType mDistX;
DistType mDistY;
</code></pre>

<p>The order in which you declared your variables is the order in which they will be initialized at runtime. But the order you have them in the constructor's initializer list is different. This can lead to <a href="https://stackoverflow.com/a/12222454/635608">subtle bugs</a> when initialization of some members depends on others. You should make both orders match.</p>
    </div>