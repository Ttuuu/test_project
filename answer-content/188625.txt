<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<pre><code>    const string TOKENALPHABET = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-.";
</code></pre>
</blockquote>

<p>I learnt the hard way that the problem with using <code>.</code> in a URL token sent by e-mail is that certain mail clients (Outlook in particular) will attempt to auto-detect URLs in a plain text email, but will exclude a trailing <code>.</code> from the inferred URL, so when your user clicks on the auto-generated link they send an invalid token. I suggest that you change <code>.</code> to <code>_</code>.</p>

<hr>

<blockquote>
<pre><code>    static string NewToken(int length = 16)
</code></pre>
</blockquote>

<p>Length in what units? Generally with cryptographic stuff it's clearer to explicitly use <em>bits</em> as the unit of length.</p>

<hr>

<blockquote>
<pre><code>        var rnd = new RNGCryptoServiceProvider();
</code></pre>
</blockquote>

<p>As already noted in comments, this is <code>IDisposable</code> and the standard <code>using</code> pattern is preferred.</p>

<hr>

<blockquote>
<pre><code>        var token =
            Enumerable
                .Range(0, length)
                .Select(i =&gt; TOKENALPHABET[tokenBytes[i] % TOKENALPHABET.Length])
                .ToArray();
</code></pre>
</blockquote>

<p>Firstly, this could be simplified to</p>

<pre><code>        var token =
            tokenBytes
                .Select(b =&gt; TOKENALPHABET[b % TOKENALPHABET.Length])
                .ToArray();
</code></pre>

<p>But secondly, by only using 6 bits per byte you're throwing away 25% of the entropy which the system just produced for you. On busy servers, cryptographic-grade entropy is a valuable resource and you should only request as much as you need.</p>
    </div>