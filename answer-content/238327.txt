<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Toying with this, I stumbled across another alternative. According to my own initial thought, it would have been cheating, but I'd present it here because I think that it's a compromise that should at least be considered. The idea is to simply use a different base duration, in this case milliseconds instead of seconds:</p>

<pre><code>tMinMS := 1200
tMaxMS := 2700

delayMS := tMin + rand.Intn(1 + tMax - tMin)

time.Sleep(time.Duration(delay) * time.Millisecond)
</code></pre>

<p>Notes here:</p>

<ul>
<li>This works with just one conversion and the <code>time.Milliseconds</code> constant, which is better. The trick is that the conversion, even though it discards fractions, only causes a rounding error of less than 1ms. Doing the same to the original code would impose rounding errors of 1000 times as much.</li>
<li>Everyone used to calculating with units will notice and cringe from the fact that this multiplies a <code>time.Duration</code> with a <code>time.Duration</code>. Which is why I still don't like this solution.</li>
<li>I've been looking at replicating the <code>time</code> module using <code>float64</code> representing seconds as alternative. I should check if anyone did that already before reinventing the wheel...</li>
</ul>
    </div>