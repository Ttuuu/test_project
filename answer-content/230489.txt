<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This destructor is pointless:</p>

<blockquote>
<pre><code>  ~GraphFactory()
  {
    mGraphDataMap.clear();
    mCurrentPath.clear();
    mTotalPath.clear();
  }
</code></pre>
</blockquote>

<p>Those three members are going out of scope anyway, so <code>clear()</code> is redundant.  Just omit the destructor entirely.</p>

<p>Here's a useless statement:</p>

<blockquote>
<pre><code>if (mPath.empty())
{
  pathToParent;
}
</code></pre>
</blockquote>

<p>Was that meant to be a <code>return</code>?</p>

<p>Use consistent types for comparisons.  For example, we have:</p>

<blockquote>
<pre><code>for (int j = 0; j &lt; mPath.size(); j++)
</code></pre>
</blockquote>

<p>A vector's <code>size()</code> is a <code>std::size_t</code>, so use the same type for <code>j</code>:</p>

<pre><code>for (std::size_t j = 0;  j &lt; mPath.size();  ++j)
</code></pre>

<p>In initializer lists, it helps readers if you write the initializers in the order that they will be executed (which is the order in which the members are declared):</p>

<pre><code>Graph(const Graph&lt;T&gt;&amp;&amp; copy)
    : mData(std::move(copy.mData)),
      mDist(std::move(copy.mDist)),
      mParent(),
      mVisited(copy.mVisited),
      mEdges(std::move(copy.mEdges)),
      mPath(),
      mID(copy.mID)
{
}
</code></pre>

<p>There's a couple of unused variables in <code>findMin()</code>:</p>

<blockquote>
<pre><code>int index = -1;
int last_index = 0;
</code></pre>
</blockquote>

<p>Prefer to use initializers rather than assignment in constructors:</p>

<pre><code>Graph(T&amp; data, int id = -1)
    : mData(data),
      mDist(INT32_MAX),
      mParent(),
      mVisited(false),
      mEdges(),
      mPath(),
      mID(id)
{
}
</code></pre>

<p>All the points above are found simply by compiling with a reasonable set of warnings (<code>g++ -Wall -Wextra -Wwrite-strings -Wno-parentheses -Wpedantic -Warray-bounds  -Weffc++</code>), so easily fixed yourself.</p>

<hr>

<p>The <code>GraphMeta</code> member functions (constructors and assignment) add no value, as they are identical to the compiler-generated code, so we can omit them.  We just need to change the member order to match the construction call, and use braces at the call site:</p>

<pre><code>struct GraphMeta
{
    Graph::GraphPTR edge;
    int weight;
};
</code></pre>



<pre><code>    mEdges.push_back(GraphMeta{ptr, weight});
</code></pre>

<hr>

<p>I'd like to move in to look at <code>GetObjectPTR</code>.</p>

<p>We're missing some of the point of <code>std::make_shared()</code>, in that we don't need to construct an object and copy it in; though we do need to read <em><a href="//stackoverflow.com/q/8147027/4850040">How do I call <code>std::make_shared</code> on a class with only protected or private constructors?</a></em> (or to make the <code>Graph</code> constructor public).</p>

<p>It doesn't make sense to make a <code>GraphFactory</code> of rvalue-references, so <code>std::forward()</code> is pointless in this method; we should accept a reference to <code>const T</code> instead.</p>

<p>There's no need to return its shared pointer by reference - pointers should almost always be passed by value</p>

<p>There's also much repetition of work here (repeated lookup in the map).  We should keep a reference or iterator to avoid the re-work.</p>

<p>I ended up with:</p>

<pre><code>std::shared_ptr&lt;Graph&lt;T&gt;&gt; GetObjectPTR(const T&amp; data, int id, bool addToPath)
{
    auto pair = std::make_pair&lt;const T&amp;,const int&amp;&gt;(data, id);
    auto found = mGraphDataMap.find(pair);
    if (found != mGraphDataMap.end()) {
        return found-&gt;second;
    }

    auto p = std::make_shared&lt;Graph&lt;T&gt;&gt;(data, id);
    mGraphDataMap[pair] = p;
    mTotalPath.push_back(p);
    if (addToPath) {
        mCurrentPath.push_back(p);
    }

    return p;
}
</code></pre>

<p>Additionally, a handful of <code>T&amp;</code> arguments on other functions became <code>const T&amp;</code> to match.</p>

<hr>

<p>This expression:</p>

<blockquote>
<pre><code>   GraphPTR graph = mPath[mPath.size() - 1];
</code></pre>
</blockquote>

<p>is normally written:</p>

<pre><code>    GraphPTR graph = mPath.back();
</code></pre>
    </div>