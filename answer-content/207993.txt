<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You should set <code>lockTaken = false</code> in <code>Dispose()</code></p>

<hr>

<p>To elaborate a little on Pieter Witvoets <code>CustomIteration(..)</code>:</p>

<p>Doing this:</p>

<pre><code>  foreach (var item in CustomIteration(data.Synchronized(lockObj)))
  {
    Console.WriteLine(item);
  }
</code></pre>

<p>works, because <code>MoveNext()</code> calls <code>Dispose()</code> when called after the last item (<code>sourceEnumerator.MoveNext()</code> returns <code>false</code>).</p>

<p>But doing this:</p>

<pre><code>  foreach (var item in CustomIteration(data.Synchronized(lockObj)).Take(5))
  {
    Console.WriteLine(item);
  }
</code></pre>

<p>is problematic because then <code>Dispose()</code> is never called from <code>MoveNext()</code> (because <code>foreach</code> only sees the outer <code>IEnumerable&lt;T&gt;</code> which hides the inner <code>Enumerator</code>. So <code>Monitor.Exit(...)</code> is never called.</p>

<p>So in the following scenario the <code>ThreadPool</code> thread is in trouble and will hang - because of the unreleased lock:</p>

<pre><code>  int[] data = { 1, 2, 3, 4, 5, 6, 7, 8, 9 };
  object lockObj = new object();

  foreach (var item in CustomIteration(data.Synchronized(lockObj)).Take(5))
  {
    Console.WriteLine(item);
  }

  AutoResetEvent are1 = new AutoResetEvent(false);

  ThreadPool.QueueUserWorkItem((state) =&gt;
  {
    // Here this thread will hang
    foreach (var item in data.Synchronized(lockObj))
    {
      Console.WriteLine(item);
    }

    are1.Set();
  });


  are1.WaitOne();
</code></pre>
    </div>