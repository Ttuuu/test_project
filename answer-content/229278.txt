<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Prompt</h2>

<p>The most obvious bad practice here is the use of a global variable.  Instead of setting <code>num</code> as a side-effect, your function should <code>return</code> the result.</p>

<p><code>getNum()</code> is not such a good name for the function.  <a href="https://www.python.org/dev/peps/pep-0008/#naming-conventions" rel="noreferrer">PEP 8</a>, the official style guide for Python, says that function names should be <code>lower_case_with_underscores</code>.  Furthermore, "get" implies that the function is retrieving a piece of data that is already stored somewhere, which is not the case here.  Finally, "Num" should be more specific.</p>

<p>The use of recursion is not appropriate.  If you want a loop, write a loop.</p>

<pre><code>def ask_integer():
    """
    Return an integer entered by the user (repeatedly prompting if
    the input is not a valid integer).
    """
    while True:
        try:
            return int(input("&gt; "))
        except ValueError:
            print("Please enter an integer")

num = ask_integer()
</code></pre>

<h2><code>collatz</code> function</h2>

<p>Strictly speaking, you didn't follow the instructions.  Your solution isn't wrong or bad â€” you just didn't implement the <code>collatz</code> function according to the specification that was given, which says that you should print and return one single number.</p>

<pre><code>def collatz(num):
    """
    Given a number, print and return its successor in the Collatz sequence.
    """
    next = num // 2 if num % 2 == 0 else 3 * num + 1
    print(next)
    return next

num = ask_integer()
while num &gt; 1:
    num = collatz(num)
</code></pre>
    </div>