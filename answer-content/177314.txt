<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Honestly, you won't be able to get anything as good as <a href="https://github.com/python/cpython/blob/3.6/Lib/enum.py#L51" rel="nofollow noreferrer">the built-in code for <code>auto</code></a>. This is as they've added <a href="https://github.com/python/cpython/blob/3.6/Lib/enum.py#L97" rel="nofollow noreferrer">a clause to <code>_EnumDict.__setitem__</code> to handle the class</a>.</p>

<p>Since we can't make it so that the values from <code>auto</code> don't start at one for each enum. Such as the following being equivalent:</p>

<pre><code>class A(Enum):
    A = auto()
    B = auto()

class B(Enum):
    A = auto()
</code></pre>



<pre><code>class A(Enum):
    A = 1
    B = 2

class B(Enum):
    A = 1
</code></pre>

<p>And so the simplest would be to stick with your code, and have the following be equal. (As you done)</p>

<pre><code>class A(Enum):
    A = auto()
    B = auto()

class B(Enum):
    A = auto()
</code></pre>



<pre><code>class A(Enum):
    A = 1
    B = 2

class B(Enum):
    A = 3
</code></pre>

<p>And so IMO your code is good. The only thing I'd change is make your code not pollute the global namespace with <code>__my_enum_auto_id</code>. And indent with four spaces. This is as easy as using a closure.</p>

<pre><code>def auto_builder():
    number = 0
    def auto():
        nonlocal number
        number += 1
        return number
    return auto

try:
    from enum import auto
except ImportError: 
    auto = auto_builder()
del auto_builder
</code></pre>
    </div>