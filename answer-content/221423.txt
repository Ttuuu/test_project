<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The solution of @AJNeufeld is elegant and solves your immediate problem. However, I want to make a case for doing things the verbose way: check for each bad condition individually, log an error if the value is null, and continue onward otherwise. This has two advantages.</p>

<p>First, it allows custom error messages depending on which value is null. If a missing field is a serious error in your data, your error log should have tons of information about it! Simply giving up and logging a generic error does not help you fix the database.</p>

<p>Second, it allows you to assign each object to a variable. Presumably, you need to use at least some of these objects inside of the business logic, so having variables bound to each will avoid extra calls to the getters later on.</p>

<p>The resulting code would look something like this.</p>

<pre><code>if (context == null) {
    LOG.error("Cannot process: context is null.");
    return;
}

GrandParent grandParent = context.getGrandParent();
if (grandParent == null) {
    LOG.error(String.format("Cannot process: context %s has null grandParent.", context));
    return;
}

Parent parent = grandParent.getParent();
if (parent == null) {
    LOG.error(String.format("Cannot process: grandParent %s has null parent.", grandParent));
    return;
}

Child child = parent.getChild();
if (child == null) {
    LOG.error(String.format("Cannot process: parent %s has null child.", parent));
    return;
}

if (child.isRequired()) {
    // business logic
}
</code></pre>

<p>The code is admittedly quite verbose, but it is readable and clear. In production, useful error messages like these can be much more important than concise code.</p>
    </div>