<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Style</h2>

<p>Please use braces everywhere, removing them hurts readability and makes it easier to produces bugs.</p>

<pre><code>   if (reply == JOptionPane.YES_OPTION) 
        return true;
    else 
        return false;
</code></pre>

<p>This can be written as <code>return reply == JOptionPane.YES_OPTION</code>.</p>

<h2>A simple Levenshtein distance trick</h2>

<p>Instead of using absolute distances for the Levenshtein distance, you can define a ratio. That is, if string1 is within 30% of edit distance of string2, then it can considered egal. I've used this trick in the past and accuracy increased a bit.</p>

<h2>BumSkeeter-aware distance</h2>

<p>You're saying that the errors come from paste errors where a few chars are missing at the end. If this is the only possible error, then you don't need the full power of the Levenshtein Distance, and might want to use a distance which only counts the number of added characters, and use Levenshtein distance * 10 otherwise.</p>

<h2>Searching intelligently</h2>

<p>(This is the most important point.)</p>

<p>The best way to get good results is to stop pairing two strings when the distance is short enough, but to always assign the best string. That is, you still do your outer loop <code>for(Item cl : clItems)</code>, but for the second loop, store the score for every possibility, and assign only the best score. The time complexity is the same, it could possibly be a bit longer, but unless you have thousands or millions of items it's going to produce much better results.</p>
    </div>