<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Design</strong></p>

<p>I'm guessing you're coming from some sort of Object-Oriented Programming Language (OOPL), like Java. Python is an interpreted language, and while treating it like an OOPL isn't bad in many large scale scenarios, something small like this doesn't need that design. If this is for some kind of scholastic exercise or you're just training OOPL design in Python, you can stick to it, but personally I'd avoid it here.</p>

<p><strong>Printing &amp; Strings</strong></p>

<p>Pasting out each array index isn't necessary. Instead of using the modulo operator to format strings, you can either use <code>.format()</code> or f-strings. For the board prompt I'd personally use <code>.format()</code>, like so:</p>

<pre class="lang-py prettyprint-override"><code>print(' {} | {} | {} \n===+===+===\n {} | {} | {} \n===+===+===\n {} | {} | {} \n'.format(*list(n for n in self.board)))
</code></pre>

<p>You use variadic assignment in <code>three_in_row</code>, so I'm assuming you know the <a href="https://medium.com/understand-the-python/understanding-the-asterisk-of-python-8b9daaa4a558" rel="nofollow noreferrer">four use cases of the asterisk</a>.</p>

<p>I notice you use double quotes a lot in your main code but not in the actual main function, so maybe that was pregenerated by an editor like VSCode? Regardless, you can use single quotes more throughout your code.</p>

<p><strong>Game &amp; Logic</strong></p>

<p><code>None</code> checks and usage seem to be quite frequent throughout this program. Again, this indicates to me some beginner OOP ideology. We all start somewhere, but as it is in good OOP design to not explicitly use <code>null</code> where possible, the same can apply to <code>None</code> here.</p>

<p>In your <code>eval_board</code> function, you prioritize the fourth, or central, spot for the AI.  Why not just check this outside of the loop, and then start it if it fails? This function appears to be used exclusively by the AI as well, so why isn't it named something like <code>ai_move</code> or <code>ai_eval</code> to reflect this? Other functions could benefit from this naming as well. Also, using <code>while</code> loops and checking for a <code>None</code> spot seems like a bad substitution for Boolean functions and checks in my mind.</p>

<p>Conveniently, I've also put up a Tic Tac Toe question, which is here: <a href="https://codereview.stackexchange.com/questions/231718/back-to-basics-tic-tac-toe">Back to Basics - Tic Tac Toe</a></p>

<p>Any comments I'd have on optimizing your game logic would just be incorporating some of the techniques used in my implementation. Granted, I don't have an "AI," but the imagination shouldn't need to flex over the available possibilities.</p>
    </div>