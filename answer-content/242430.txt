<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Notes : </p>

<ul>
<li>Months array</li>
<li>Regex</li>
<li>multiple loops and redundant validations. </li>
<li>Direct parsing without validations. </li>
</ul>

<p>As Roland mentioned, you don't need to redefine what is already existed, nor handling the conversion of dates manually. You need to focus on using what <code>.NET</code> already has, if you don't know, google before you start coding. This way, you will avoid making major changes. </p>

<p>You take two inputs from the user, then you only need 2 validations process. While in your code you're doubling that!, which is unnecessary if you implement it correctly.</p>

<p>Let's start with the month validation, user can input a short name month, or full name, or even a number. As you're dealing with string, you need to take the inputs possibilities, even if you tried to restrict the input, there is still a chance of an invalid input with is the unknown case! So, you will focus on covering known cases, which you already mostly did. </p>

<p>The repeated issue that you are unaware of is that you're assigning and processing then validating the user input, so you need to reverse that. First validate, then process based on that validation. </p>

<p>Here is an example of your process of validation : </p>

<pre><code>// prompts for birth month and capitalize first letter
Console.WriteLine("Hello User!");
Console.Write("Please enter your birth month in letters: ");
birthMonth = Console.ReadLine();
birthMonth = char.ToUpper(birthMonth[0]) + birthMonth.Substring(1);


// check if birth month contains only letters
while(Regex.IsMatch(birthMonth, @"^[a-zA-Z]+$") == false)
{
    Console.WriteLine("Birth month should only contain letters!");
    Console.Write("Please enter your birth month in letters: ");
    birthMonth = Console.ReadLine();
    birthMonth = char.ToUpper(birthMonth[0]) + birthMonth.Substring(1);
}
</code></pre>

<ol>
<li>First you asked a user for an input</li>
<li>then you directly get the first char assuming it's a valid string</li>
<li>then you validate it with regex. </li>
<li>if invalid, you do the same steps 1 to 3 until it's valid letter. </li>
</ol>

<p>what happens if <code>birthMonth</code> is empty or null? it'll throw <code>IndexOutOfRangeException</code> because of <code>birthMonth[0]</code> and if the <code>birthMonth</code> is <code>NULL</code> then it'll also throw a null exception.! these are basic validations which need to be validated before processing. </p>

<p>you've applied the same process to the reset. you need to validate the string first using <code>string.IsNullOrEmpty</code> or <code>string.IsNullOrWhiteSpace</code> or if you prefer to do it manually you can do this </p>

<pre><code>if(birthMonth != null &amp;&amp; birthMonth.Length &gt; 0)
</code></pre>

<p>for the month part, you don't need the array, you need to use <code>DateTime</code> instead. You can use something like this : </p>

<pre><code>// handle the month conversion
// acceptable inputs : short name, full name, month number 
private static bool TryGetMonth(string month, out DateTime date)
{
    date = new DateTime();

    if(string.IsNullOrEmpty(month))
    {
        return false;       
    }

    // default datetime format 
    var format = "dd MMMM yyyy HH:mm:ss tt";

    // if user enters a repersental month number then adjust the format
    if(int.TryParse(month, out int monthInt))
    {
        format = "dd M yyyy HH:mm:ss tt";
    } 
    else if(month.Length &lt;= 3 &amp;&amp; !month.Equals("May", StringComparison.OrdinalIgnoreCase))
    {
        format = "dd MMM yyyy HH:mm:ss tt";
    }

    return DateTime.TryParseExact($"01 {month} 2020 00:00:00 AM", format, CultureInfo.InvariantCulture, DateTimeStyles.None, out date);
}
</code></pre>

<p>the <code>DateTime.TryParseExact</code> will handle the conversion, and would return a valid date if the input meets the parsing requirements. Then, from the dateTime, you can have access to its values like month name, number ..etc.</p>

<p>Also, when parsing integers, use <code>int.TryParse</code> to check the validity of the integer first, then extract the parsed integer. This would avoid throwing undesired exceptions. </p>

<p>here is an untested revision of your code using the <code>TryGetMonth</code> method above along with using <code>DateTime</code> to demonstrate my points: </p>

<pre><code>// prompts for birth month and capitalize first letter
Console.WriteLine("Hello User!");
Console.Write("Please enter your birth month in letters: ");

while(TryGetMonth(Console.ReadLine(), out DateTime monthDate ) == false)
{
    Console.WriteLine("invalid month");
    Console.WriteLine("Please enter your birth month name (short or full name) or number");
}

// prompts for birth day
Console.Write("Please enter your birth day in numbers: ");

while(int.TryParse(Console.ReadLine(), out int birthDay) &amp;&amp; (birthDay &gt; 0  &amp;&amp; birthDay &lt;= 31))
{
    Console.WriteLine("Invalid argument! Please enter day between 1-31 in numerals");
    Console.WriteLine("Please enter your birth day in numbers: ");
}


DateTime birthDate = new DateTime(DateTime.Now.Year, monthDate.Month, birthDay);
DateTime reminderDate = birthDate.AddDays(-1);

string suffix;
string reminderSuffix;
string msg; 

switch(birthDate.Day)
{
    case 1:
        suffix = "st";
        reminderDate = reminderDate.AddMonths(-1);
        break;
    case 2:
        suffix = "nd";
        reminderSuffix = "st";
        break;
    case 3:
        suffix = "rd";
        reminderSuffix = "nd";
        break;
    case 4:
        suffix = "th";
        reminderSuffix = "rd";
        break;
    default: 
        suffix = "th";
        reminderSuffix = "th";
}

if(birthDate.Day == 1) {
    msg = $"A reminder email for your birthday discount \nwill be sent on the last day of {reminderDate.ToString("MMMM")}";
} else {
    msg = $"A reminder email for your birthday discount \nwill be sent on the {reminderDate.Day}{reminderSuffix} of {reminderDate.ToString("MMMM")}";
}

// print values
Console.WriteLine();
Console.WriteLine($"Your birthday is on the {birthDate.Day}{suffix} of {birthDate.ToString("MMMM")}" );
Console.WriteLine(msg);

// reminderDate.ToString("MMMM") would return month name
// "MMMM" for full name and "MMM" for short name (e.g. June and Jun)
</code></pre>
    </div>