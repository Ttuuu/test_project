<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You need to:</p>

<ol>
<li>Get the annotated signature of a <code>target_class</code>' <code>__init__</code> method;</li>
<li>Apply whatever arguments come from the provided JSON string;</li>
<li>Check that all arguments are present;</li>
<li>Check that all arguments conform to the annotations of the class' <code>__init__</code>.</li>
</ol>

<p>All except the last step is pretty straightforward using the <a href="https://docs.python.org/3/library/inspect.html" rel="nofollow noreferrer"><code>inspect</code></a> module:</p>

<pre><code>import json
import inspect
from typing import Callable, Any, T


def deserialize_json(target_class: Callable[[Any], T], object_repr: str) -&gt; T:
    data = json.loads(object_repr)
    signature = inspect.signature(target_class)
    bound_signature = signature.bind(**data)
    bound_signature.apply_defaults()
    return target_class(**bound_signature.arguments)
</code></pre>

<p><a href="https://docs.python.org/3/library/inspect.html#inspect.Signature.bind" rel="nofollow noreferrer"><code>inspect.Signature.bind</code></a> validate arguments pretty much the same as a real call to <code>target_class.__init__</code> would; raising <code>TypeError</code> if a positionnal argument is missing or if an extra keyword argument is found.</p>

<p>Now you "just" need to validate the type of the arguments based on the annotations. A simple but potentially sufficient way of doing would check the <a href="https://docs.python.org/3/library/inspect.html#inspect.Parameter.annotation" rel="nofollow noreferrer"><code>annotation</code></a> attribute of each parameter of the <code>Signature</code> and check it is the right type using <code>isinstance</code>:</p>

<pre><code>def deserialize_json(target_class: Callable[[Any], T], object_repr: str) -&gt; T:
    data = json.loads(object_repr)
    signature = inspect.signature(target_class)
    bound_signature = signature.bind(**data)
    bound_signature.apply_defaults()

    for name, value in bound_signature.arguments.items():
        expected_type = signature.parameters[name].annotation
        if not isinstance(value, expected_type):
            raise TypeError('&lt;error message&gt;')

    return target_class(**bound_signature.arguments)
</code></pre>

<p>Note that this simple example would most likely have <a href="https://stackoverflow.com/q/49171189/5069029">troubles validating Generic types</a> or <a href="https://stackoverflow.com/q/48572831/5069029">parametrized Generic types</a>. Adapting the code to fit those needs is left as an exercise for the reader (but <a href="https://stackoverflow.com/q/50563546/5069029">Python 3.7 have better support for such checks</a>).</p>

<hr>

<p>As a side note, if all target classes ressemble the <code>Foo</code> example, and you don't mind having them immutable, you can make use of <a href="https://docs.python.org/3/library/typing.html#typing.NamedTuple" rel="nofollow noreferrer"><code>typing.NamedTuple</code></a>:</p>

<pre><code>class Foo(typing.NamedTuple):
    val: int
    msg: str
    frac: float = 1.0


print(Foo(1, 'bar'))  # Foo(val=1, msg='bar', frac=1.0)
print(Foo(2, 'baz', 0.0))  # Foo(val=2, msg='baz', frac=0.0)
print(Foo(3))  # TypeError: __new__() missing 1 required positional argument: 'msg'
</code></pre>

<p>or switch to Python 3.7 and use full-blown <a href="https://docs.python.org/3/library/dataclasses.html" rel="nofollow noreferrer"><code>dataclasses</code></a>.</p>
    </div>