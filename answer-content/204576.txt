<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li>Is there a smarter way to approach this question?</li>
</ul>

<p>We'll see in a moment. Parts of it can be improved for sure.</p>

<ul>
<li>How can I improve the space and time complexity of the given question?</li>
</ul>

<p>You can't. The <em>complexity</em> will remain the same. The changes you can make might give small increases in performance or decrease memory usage, but the <em>complexity</em> will remain the same.</p>

<ul>
<li>Have I gone too overboard by using BigInteger Library for this question?</li>
</ul>

<p>I thought at first that it was possible to use just <code>long</code>, but I'm afraid not. Because of 1000 nCr 500, and such big numbers, you are stuck with <code>BigInteger</code>.</p>

<hr>

<p>You can use <a href="https://docs.oracle.com/javase/8/docs/api/java/math/BigInteger.html#valueOf-long-" rel="nofollow noreferrer">BigInteger.valueOf</a> instead of using the constructor with a String.</p>

<p>You can save some time by using the symmetric property of nCr if r &gt; n / 2. For example, 100 nCr 80 is the same as 100 nCr 20.</p>

<p>You can use just one for-loop instead of two:</p>

<pre><code>value = 1;
for (int i = 0; i &lt; r; i++) {
    value = value * (n - i) / (i + 1);
}
return value;
</code></pre>

<p>I used something similar in <a href="https://github.com/Zomis/Minesweeper-Analyze/blob/ab97053049f9e94828fdc895f98f22f51600e0a0/src/main/java/net/zomis/minesweeper/analyze/Combinatorics.java#L94" rel="nofollow noreferrer">a project of mine</a> (where I used <code>double</code> instead and thus didn't have to think about truncating integers - an issue which is fixed above thanks to Martin R).</p>
    </div>