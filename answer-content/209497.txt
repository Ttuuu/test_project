<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>A few things I'd like to point out:</p>

<p>Whenever you're code gets input from a user of your code you must have some way of verifying that they're entering the right type of data and in the right format.  not having this is just looking for trouble.</p>

<p>Using a <code>switch</code> block is usually much easier to work with than a bunch of <code>if</code> blocks.</p>

<p>There is a <code>Duration</code> class in the time api which is made for this type of situation.  It is made to help with time calculations as well date/time parts.</p>

<p>Here's one way all this could be put together:</p>

<pre><code>import java.time.Duration;

public class TimeCalculator {


    public static void main(String[] args) {
        if (args.length == 0 || args[0].contains("help")) {
            showHelp();
            return;
        }
        try{
          System.out.println(GetFormattedString(args));          
        }catch(Exception e){
            System.out.println(e.getMessage());
        }
    }

    private static String GetFormattedString(String[] times) throws NumberFormatException, IllegalArgumentException  {
        Duration totalTime = makeTime(times);
        String test = totalTime.toString();
        long days = totalTime.toDaysPart();
        int hours = totalTime.toHoursPart();
        int minutes = totalTime.toMinutesPart();
        int seconds = totalTime.toSecondsPart();
        return String.format("%1$d days %2$d hours %3$d minutes %4$d seconds", days,hours,minutes,seconds);
    }

    private static Duration makeTime(String[] times) throws NumberFormatException, IllegalArgumentException  {
        Duration totalTime = Duration.ZERO;
        for (  var s:times) {
            long time = 0;
            int lastIndex = s.length()-1;
            try {
                time = Integer.valueOf(s.substring(0, lastIndex));
            } catch (NumberFormatException e) {
                throw new NumberFormatException("Invalid characters present in strings provided");
            }
            switch (s.charAt(lastIndex)) {
                case 's':
                    totalTime = totalTime.plusSeconds(time);
                    break;
                case 'm':
                    totalTime = totalTime.plusMinutes(time);
                    break;
                case 'h':
                    totalTime = totalTime.plusHours(time);
                    break;
                case 'd':
                    totalTime = totalTime.plusDays(time);
                    break;
                default:
                    throw new IllegalArgumentException("String provided is in the wrong format");
            }
        }
        return totalTime;
    }

    private static void showHelp() {
        System.out.println("This Program converts time strings to an ordered string that makes the time");
        System.out.println("information better understandable\n");
        System.out.println("You can enter something like this: ");
        System.out.println("java TimeCalculator 534s 400d 32453s 234h");
        System.out.println("The output will be this: ");
        System.out.println("410 days 3 hours 9 minutes 47 seconds");
        System.out.println("Available characters: d, h, m, s");
    }
}
</code></pre>

<p><strong><em>EDIT</em></strong></p>

<p>I didn't really like throwing exceptions like that, so I came up with a version that eliminates throwing exceptions.  I added 2 things, a <code>tryParseLong</code> method and a wrapper class(<code>TimeLong</code>) to be able to pass the time value by reference:</p>

<pre><code>import java.time.Duration;

public class TimeCalculator {

    public static void main(String[] args) {
        if (args.length == 0 || args[0].contains("help")) {
            showHelp();
            return;
        }
        String formattedString = GetFormattedString(args);
        if(formattedString.equals("")){
            System.out.println("Invalid arguments used");
            showHelp();
            return;
        }
        System.out.println(formattedString);
    }

    private static String GetFormattedString(String[] times) {
        Duration totalTime = makeTime(times);
        if (totalTime == Duration.ZERO) {
            return "";
        }
        long days = totalTime.toDaysPart();
        int hours = totalTime.toHoursPart();
        int minutes = totalTime.toMinutesPart();
        int seconds = totalTime.toSecondsPart();
        return String.format("%1$d days %2$d hours %3$d minutes %4$d seconds", days, hours, minutes, seconds);
    }

    private static Duration makeTime(String[] times) {
        Duration totalTime = Duration.ZERO;
        for (var s : times) {
            TimeLong time = new TimeLong((0L));
            int lastIndex = s.length() - 1;
            if (!tryParseLong(s.substring(0, lastIndex), time)) {
                return Duration.ZERO;
            }
            switch (s.charAt(lastIndex)) {
                case 's':
                    totalTime = totalTime.plusSeconds(time.value);
                    break;
                case 'm':
                    totalTime = totalTime.plusMinutes(time.value);
                    break;
                case 'h':
                    totalTime = totalTime.plusHours(time.value);
                    break;
                case 'd':
                    totalTime = totalTime.plusDays(time.value);
                    break;
                default:
                    return Duration.ZERO;
            }
        }
        return totalTime;
    }
    private static class TimeLong{
        public Long value;
        public TimeLong(Long value){
            this.value= value;
        }
    }
    private static boolean tryParseLong(String value, TimeLong outVal) {
        try {
            outVal.value =  Long.valueOf(value);
        } catch (Exception e) {
            outVal.value = 0L;
            return false;
        }
        return true;
    }

    private static void showHelp() {
        System.out.println("This Program converts time strings to an ordered string that makes the time");
        System.out.println("information better understandable\n");
        System.out.println("You can enter something like this: ");
        System.out.println("java TimeCalculator 534s 400d 32453s 234h");
        System.out.println("The output will be this: ");
        System.out.println("410 days 3 hours 9 minutes 47 seconds");
        System.out.println("Available characters: d, h, m, s");
    }
}
</code></pre>
    </div>