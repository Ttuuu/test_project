<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here's a recursive function whose basic idea is similar to yours:</p>

<pre><code>function flatten(a) {
  if (! Array.isArray(a)) throw new Error('flatten() called with non-array');
  const f = [];
  function p(a) {
    for (let e of a) if (Array.isArray(e)) p(e); else f.push(e);
  }
  p(a);
  return f;
}
</code></pre>

<p>Advantages of this version:</p>

<ul>
<li>It avoids copying the nested arrays twice (which happens in <code>result.concat(flatten(value))</code> in your solution).</li>
<li>By using a plain <code>for</code> loop instead of <code>forEach(function ...)</code>, the syntax becomes simpler, and we avoid an extra function call in each recursive call, which will probably make things a bit faster (but I haven't measured it).

<ul>
<li>(This also means that it can handle arrays that are nested about twice as deep before it exceeds the stack size, but that's a problem that is extremely unlikely to occur in real life.)</li>
</ul></li>
<li>The main function <code>flatten</code> is not recursive. It just checks its argument, sets up a data structure, calls the recursive function <code>p</code> which does the main work, and returns the result.

<ul>
<li>Such a split between a 'public' function that is meant to be called by 'normal' users and an 'internal' recursive function that does the actual work is often helpful when you develop recursive functions. The 'public' function has a simple interface and does some housekeeping, the 'internal' function has fewer argument checks or maybe has additional arguments that are not meant to be used by 'normal' callers. This often makes the recursive function simpler and faster.</li>
</ul></li>
</ul>

<p>On my machine, this version can process arrays with millions of elements and thousands of nesting levels in a few seconds.</p>

<p>At the top of the function, I added a check whether the argument is an array. Note that this check is only applied once, not on every recursive call - on a recursive call of <code>p</code>, we already know that the argument is an array.</p>

<p>I also modified the behavior of the function when the argument is not an array:</p>

<ul>
<li>In your original version, an empty array is returned when the value is falsy, doesn't have a <code>length</code> property, or its <code>length</code> is not positive. When it has a positive <code>length</code> property but no <code>forEach()</code> method (e.g. it's a non-empty string), an error is thrown. When it has a <code>length</code> property and a <code>forEach()</code> method, that method is called, which may or may not be useful.</li>
<li>In this version, an error is thrown for all non-array arguments.</li>
</ul>

<p>I generally prefer the 'fail-fast' approach - when an error is detected, don't try to keep working, just fail. But that's a matter of taste. In some cases, it may make sense to for e.g. <code>flatten({})</code>, <code>flatten(123)</code> or <code>flatten('foo')</code> to succeed and return a default value, e.g. an empty array, or the given value, or an array containing the given value.</p>

<hr>

<p>Here's a solution with a recursive generator function:</p>

<pre><code>function flatten(a) {
  if (! Array.isArray(a)) throw new Error('flatten() called with non-array');
  function* f(a) {
    for (let e of a) if (Array.isArray(e)) yield* f(e); else yield e;
  }
  return Array.from(f(a));
}
</code></pre>

<p>Generator functions often allow elegant solutions to problems that are otherwise much harder to solve, but in this case (and probably many others), the performance is quite bad: Processing an array with 40,000 elements takes 10 seconds in Node.js on my machine.</p>
    </div>