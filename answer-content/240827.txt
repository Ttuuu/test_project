<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your controller class looked fine.  The <code>calculate</code> method in the model class should have been located in this class.  In this example application, the model class should be empty.  There is no data to retain.</p>

<p>Your <code>Main</code> class needs to put the creation and execution of the Swing components on the <a href="https://docs.oracle.com/javase/tutorial/uiswing/concurrency/dispatch.html" rel="nofollow noreferrer">Event Dispatch Thread</a>.  Here's how I changed your <code>Main</code> class.</p>

<pre><code>import javax.swing.SwingUtilities;

public class Main implements Runnable {

    public static void main(String[] args) {
        SwingUtilities.invokeLater(new Main());
    }

    @Override
    public void run() {
        Model model = new Model();
        View view = new View();
        Controller controller = new Controller(model, view);
        view.setController(controller);
        controller.start();
    }

}
</code></pre>

<p>In the View class, when creating Swing components, it's a good idea to group all of the method calls by each Swing component.  The Swing components should be defined in row, column order.</p>

<p>I also added <a href="https://docs.oracle.com/javase/tutorial/uiswing/layout/visual.html" rel="nofollow noreferrer">layout managers</a> for the <code>JPanel</code>s.  You used a default <code>FlowLayout</code> for your one <code>JPanel</code>.</p>

<p>I made a few other tweaks to make your GUI look more like a calculator.</p>

<p><a href="https://i.stack.imgur.com/XeEg1.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/XeEg1.png" alt="Calculator MVC"></a></p>

<p>Here's what I did to your <code>View</code> class.</p>

<pre><code>import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.BorderFactory;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JTextField;

public class View {

    Controller controller;
    JTextField result;

    public void setController(Controller controller) {
        this.controller = controller;
    }

    public void show() {
        JFrame frame = new JFrame("Calculator MVC");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        JPanel panel = new JPanel();
        panel.setLayout(new BorderLayout());

        JPanel calculatorPanel = new JPanel();
        calculatorPanel.setLayout(new FlowLayout());

        JTextField input1 = new JTextField(10);
        input1.setHorizontalAlignment(JTextField.RIGHT);
        calculatorPanel.add(input1);

        JComboBox&lt;String&gt; operand = new JComboBox&lt;String&gt;(
                new String[] { "+", "-" });
        calculatorPanel.add(operand);

        JTextField input2 = new JTextField(10);
        input2.setHorizontalAlignment(JTextField.RIGHT);
        calculatorPanel.add(input2);

        JLabel label = new JLabel(" = ");
        calculatorPanel.add(label);

        result = new JTextField(10);
        result.setBorder(BorderFactory.createLineBorder(
                Color.BLACK));
        result.setEditable(false);
        result.setHorizontalAlignment(JTextField.RIGHT);
        calculatorPanel.add(result);

        panel.add(calculatorPanel, 
                BorderLayout.BEFORE_FIRST_LINE);

        JPanel buttonPanel = new JPanel();
        buttonPanel.setLayout(new FlowLayout());

        JButton calcbutton = new JButton("Calculate"); 
        calcbutton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                String s1 = input1.getText();
                String op = operand.getItemAt(
                        operand.getSelectedIndex());
                String s2 = input2.getText();
                controller.handleUserInput(s1, op, s2);
            }
        });
        buttonPanel.add(calcbutton);

        panel.add(buttonPanel, BorderLayout.AFTER_LAST_LINE);

        frame.add(panel);
        frame.getRootPane().setDefaultButton(calcbutton);
        frame.pack();
        frame.setLocationByPlatform(true);
        frame.setVisible(true);
    }

    public void setResult(String res) {
        this.result.setText(res);
    }

}
</code></pre>
    </div>