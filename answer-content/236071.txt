<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Format</strong></p>

<p>So first up, as has been said in the comments, code formatting is important.  Consistent formatting makes your code a lot easier to read.  If it really looks the same in your editor as in the question, then you should try reformatting it in a good Java editor:</p>

<pre><code>public int issue_book(Issue_Use_Bean obj_Issue_Use_Bean) {
    Connection connection = null;
    DBConnection_LMS_Portal obj_DBConnection_SMS_Portal = new DBConnection_LMS_Portal();
    connection = obj_DBConnection_SMS_Portal.getConnection();
    PreparedStatement ps = null;
    ResultSet rs = null;
    int flag = 0;
    TimeZone.setDefault(TimeZone.getTimeZone("USA"));
    SimpleDateFormat format = new SimpleDateFormat("YYYY-MM-DD hh:mm:ss ");

    Date today4 = new Date();
    String date4 = format.format(today4);
    try {
        String query = "select * from student_table, book_table where student_table.employee_id=? and book_table.book_title=?";
        ps = connection.prepareStatement(query);
        ps.setString(1, obj_Issue_Use_Bean.getEmployee_id());
        ps.setString(2, obj_Issue_Use_Bean.getBook_title());
        System.out.println(ps);
        rs = ps.executeQuery();

        if (obj_Issue_Use_Bean.getEmployee_id() == null) {
            flag = 20;
        } else if (obj_Issue_Use_Bean.getBook_title() == null) {
            flag = 18;
        } else if (rs.next()) {
            query = "insert into issue_book(" +
                    "employee_id," +
                    "book_title," +
                    "barcode," +
                    "issue_date," +
                    "return_date," +
                    "status," +
                    "issue_sl_no," +
                    "description) " +
                    "values(?,?,?,?,?,?,?,?)";

            ps = connection.prepareStatement(query);
            ps.setString(1, obj_Issue_Use_Bean.getEmployee_id());
            ps.setString(2, obj_Issue_Use_Bean.getBook_title());
            ps.setString(3, obj_Issue_Use_Bean.getBarcode());
            ps.setString(4, date4);
            ps.setString(5, obj_Issue_Use_Bean.getReturn_date());
            ps.setString(6, obj_Issue_Use_Bean.getStatus());

            Sequence_Issue_Id obj_Sequence_Issue_Id = new Sequence_Issue_Id();
            String issue_sl_no = obj_Sequence_Issue_Id.get_issue_id();
            ps.setString(7, issue_sl_no);
            ps.setString(8, obj_Issue_Use_Bean.getDescription());
            System.out.println(ps);
            flag = ps.executeUpdate();
            if (obj_Issue_Use_Bean.getStatus() != null) {
                if (obj_Issue_Use_Bean.getStatus().contains("borrowed")) {
                    query = "update book_table set total_book_available=total_book_available-1  where book_title=?";
                    ps = connection.prepareStatement(query);
                    ps.setString(1, obj_Issue_Use_Bean.getBook_title());
                    System.out.println(ps);
                    ps.executeUpdate();
                }
            }
            query = "update serial_number set book_status='Not Available' where bar_code=?";
            ps = connection.prepareStatement(query);
            ps.setString(1, obj_Issue_Use_Bean.getBarcode());
            System.out.println(ps);
            ps.executeUpdate();
        } else {
            flag = 17;
        }
    } catch (Exception e) {
        e.printStackTrace();
    } finally {
        if (connection != null) {
            try {
                connection.close();
            } catch (Exception e2) {
                // TODO: handle exception
            }
        }
        if (ps != null) {
            try {
                ps.close();
            } catch (Exception e2) {
                // TODO: handle exception
            }
        }
        if (rs != null) {
            try {
                rs.close();
            } catch (Exception e2) {
                // TODO: handle exception
            }
        }
    }
    return flag;
}
</code></pre>

<p><strong>Cleanup</strong></p>

<p>The code is littered with <code>TODO</code> and <code>System.out.println</code> statements.  These can both be useful during development, however by the time your code gets merged into source control / ready for review all of these should be cleaned up / resolved.</p>

<p><strong>Naming</strong></p>

<p>There's some standard <a href="https://www.oracle.com/technetwork/java/codeconventions-135099.html" rel="nofollow noreferrer">naming conventions for java</a>, which include things like public method names.  To comply with the convention, I'd expect your method to be named <code>issueBook</code>.</p>

<p>Variable names should also be descriptive.  Appending numbers onto them doesn't make the code easier to read.  <code>date4</code> for example might be better named <code>formattedDate</code>.</p>

<p><strong>TimeZone</strong></p>

<p>Your setting the default timezone.  This seems a bit odd.  There's probably a better way to achieve what you're after.</p>

<p><strong>Break up your code</strong></p>

<p>There's an awful lot going on in one method.  You want to create layers of abstraction within your code. This will make more approachable and easier to understand.  A good start might be to break each of the SQL queries out into their own method.  The top level method then becomes a higher level orchestra-tor of these calls.</p>

<p><strong>Magic Strings</strong></p>

<p>There's a lot of strings in your code (table names, column names, values to insert into columns etc).  You should consider putting some of them into constants or enums.  This can help prevent problems caused by future typos.  </p>

<p><strong>Flag</strong></p>

<p>Flag's not a great name for a variable.  You're also setting it to not particularly obvious magic numbers (0, 17, 20...).  It would be clearer if these numbers were named and in constants.  It would also make it easier to ensure that the front and back end stay in sync if they're using the same constants, rather than relying on both sides remembering to use 18.  Looking at the front end code, you're essentially mapping this 'flag' code to a <code>String</code> that's displayed.  Rather than the flag being returned, one option might be for <code>issueBook</code> to return the success/failure message to be displayed.</p>

<p><strong>Exceptions / Missing Condition</strong></p>

<p>What's supposed to happen if the first execute throws an exception?  At the moment, it returns a <code>flag</code> of '0', which the front-end doesn't seem to handle.  It's generally a bad idea to swallow exceptions, without taking some kind of action to make sure that they are being handled correctly (in this instance it could be as simple as setting <code>flag=17</code> which is your failed message).</p>
    </div>