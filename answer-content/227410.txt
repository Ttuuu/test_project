<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Make it an enumerator</strong> You can make the evaluation lazy and get rid of the intermediate list by changing the return type to <code>IEnumerable&lt;&gt;</code>.</p>

<p><strong>Use named tuples</strong> You can make the API more user-friendly by using named tuples. Something like a <code>readonly struct Point</code> would be preferable but if you don't have it or don't want it then named tuples are your best friend.</p>

<p><strong>Interpolation</strong> The point generation you're doing is called <em>interpolation</em>. You can use this word in the method name like <code>InterpolateMovement</code>. I don't know if these calculations have any concrete name, but if they have than you may use an even more exact name like <code>InterpolateMovementByAlgorithmName</code>.</p>

<p>Here's an example of how this could look like after implementing the above suggesions:</p>

<pre><code>public IEnumerable&lt;(double X, double Y)&gt; InterpolateMovement(double x1, double y1, double x2, double y2, double divider)
{
    // If points are same, return empty list
    if (x1 == x2 &amp;&amp; y1 == y2)
    {
        yield break; // break the enumeration
    }

    // ..

    // increment temp vars by difference-division parts
    for (int i = 0; i &lt; divider; i++)
    {
        xf += xi;
        yf += yi;

        yield return (xf, yf); // &lt;-- return tuples
    }
}
</code></pre>
    </div>