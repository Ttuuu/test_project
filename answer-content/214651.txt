<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>@JellybeanNewbie, and welcome to code review. </p>

<p>You ask about efficiency, and there are a few changes that jump out to me as possibilities for speeding things up. I'll make a few comments about other aspects of your code first, and then walk through the efficiency things. </p>

<hr>

<pre><code>double b=input.nextInt();
</code></pre>

<p>There are actually three little concerns on this line. </p>

<p>First is that <code>b</code> is not a very descriptive variable name. The code would be clearer if it were named something else, like <code>upperBound</code>. </p>

<p>Second, it is always worth being careful about what types your variables have. It's a bit of a red flag when you are getting an <code>int</code> and putting it into a <code>double</code> variable. There are good reasons to use doubles sometimes, but they can cause subtle bugs often associated with rounding error. If you definitely want to work with an integer it's usually worth keeping things as <code>int</code>. If not, perhaps you should be using something like <code>nextDouble</code>.</p>

<p>Third is that this is information that is coming from the user. As a general rule, it's worth checking all information that comes from the user, just to make sure that it makes sense. For example, it may be worth making sure that <code>b</code> is actually a number. It's also worth checking that <code>b</code> is bigger than <code>a</code>. Likewise if there's anything else that could make the code fall over, it is usually worth checking that they haven't used such an input as soon as possible.</p>

<hr>

<pre><code>for(double j=1; j&lt;=b; j++){
</code></pre>

<p>This line is actually hiding a subtle bug. Suppose that your input for <code>a</code> is 0 and <code>b</code> is 2, which seems like a perfectly sensible pair of inputs. There are then two answers: both 0 and 1 are both squares and cubes. However your <code>for</code> loop starts at 1, which means it will skip right over considering 0. Now this bug will actually disappear completely with some of my efficiency suggestions, but I wanted to draw attention to it because it highlights an important lesson in testing code. That is, always remember to think about and test the edge cases, which are the biggest or smallest things that a bit of code can work with. </p>

<hr>

<p>Now, for the efficiency bit. There is a useful proverb for getting code to go faster: "The fastest code is the code that isn't run." </p>

<p>Look again at the <code>for</code> loop with <code>j</code> in it. That loop is counting upwards, from 1 to <code>b</code>. For each number between 1 and <code>b</code>, it checks whether <code>j</code> to the power of 6 is exactly <code>i</code>. Now, let's suppose that <code>b</code> is a big sort of number, perhaps a million, so you're doing that check a million times. However, as soon a <code>j</code> to the power of 6 is greater than <code>i</code>, it's clear that none of the rest of those possible <code>j</code> values can be the number you want. After all, <code>j</code> keeps getting bigger, so <code>j</code> to the power of 6 will get bigger, and it's already too big. Once you notice that, you'll see that instead of checking a million possible values of <code>j</code> we only have to check ten. </p>

<p>That's a big improvement, but there is room do do better. Instead of checking possible values of <code>j</code> and seeing whether <code>j</code> to the power of 6 is <code>i</code>, you can just check the sixth root of <code>i</code>. (For example using <code>Math.pow(i, 1.0/6.0)</code> or <code>Math.sqrt(Math.cbrt(i))</code>). If that is an integer, then you've found a special number. And in the process, you can completely delete the second <code>for</code> loop. </p>

<p>There's a couple of tricks that I've used here. Think about the sixth root rather than counting up the sixth powers. Think about what happens as you start to count up. I'll end on a challenge. Can you find a way to use the same sorts of tricks to make the that first <code>for</code> loop shorter, and then disappear? I think you can solve this problem without any looping at all!</p>
    </div>