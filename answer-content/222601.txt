<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Dangerous bug</h1>

<p>Always take care to avoid buffer overruns such as this one:</p>

<blockquote>
<pre><code>char str[20];
scanf(" %[^\n]",str);
</code></pre>
</blockquote>

<p>If you have a fixed-size buffer like that, you need to ensure that the input is limited to its length:</p>

<pre><code>char str[20];
scanf(" %19[^\n]", str);
</code></pre>

<p>This is the kind of bug that leads to remote code execution or local privilege escalation in servers and setuid programs, respectively.  Get into the habit of coding defensively, so that you're not inviting attacks when your code is used in such a target system.</p>

<p>It's generally a good idea to examine the value returned by <code>scanf</code> - if it's not the number of variables you expected to assign, then reading has failed (perhaps you reached end-of-file?), and you can't expect to proceed normally.</p>

<h1>Prefer iteration to recursion</h1>

<p>Some algorithms are naturally recursive (such as Quicksort).  Even implementations of those iterate as much as possible (typically in Quicksort, we recurse for the smaller partition, and iterate for the larger one).  For computation of factorial, there's really no need to recurse:</p>

<pre><code>unsigned long factorial(unsigned n)
{
    unsigned long x = n;
    while (--n) {
        x *= n;
    }
    return x;
}
</code></pre>

<p>That said, computing factorial and then dividing by the appropriate amount to account for duplicates is prone to unnecessary overflow (consider a pathological case of <em>N</em> identical words, where <em>N</em>! is greater than <code>ULONG_MAX</code>).  It may be worth finding a safer algorithm for this.</p>
    </div>