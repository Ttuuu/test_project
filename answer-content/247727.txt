<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>It is not so easy to get a clear picture of what the program is doing
and why it is doing what it is doing. I think adding more
documentation and comments would help, and also trying to code in a
way that is easy to read. That means using function and variable names
carefully to enhance readability. Avoid using compact/clever
constructs if they are not easy to read, instead prefer more verbose
code if it can improve readability and maintainability.</p>
<p>It is not clear why you did not want to use <code>make</code> or <code>cmake</code> to
handle dependencies in a more efficient way.
Another issue is the purpose of the command line switches. It would
help to provide more documentation and background for their usage.</p>
<p>Automatic compilation of dependencies is
usually done with <code>make</code> or <code>cmake</code>. But this requires you to write a
<code>Makefile</code> or a <code>CMakeLists.txt</code> file that specify dependencies. Another
option that avoids this is to use <code>g++ -MMD -MP -MF</code> as mentioned by
@MartinYork in the comments. Also note that <code>make</code> and <code>cmake</code> has the
added benefit of only recompiling the source files that have changed
(i.e. those that are newer than the target file). This can markedly
speed up compilation times for a large project. The Perl script on the
other hand, will recompile
every dependency into a single object each time whether some of the
dependencies has changed or not.</p>
<p>On the other hand, an advantage of using the Perl script can be to avoid writing the
<code>Makefile</code> (though I would recommend learning to write a <code>Makefile</code> or
a <code>CMakeLists.txt</code> as it is the common way of doing it).
The script also automatically runs the executable file after compilation, though it
does not check if the compilation failed or not (if the compilation
fails it does
not make sense to run the executable).
Another advantage can be that it does not generate multiple <code>.o</code> files
(as <code>make</code> and <code>cmake</code> does to to enable recompilation only of changed files).</p>
<p>The Perl script as you named <code>exe</code> (I will rename it to <code>exe.pl</code> for clarity) can
be used in many ways. From reading the source code, here is what I found:</p>
<p>Firstly, it can be used to
compile specific files in the current directory (and then run the
generated executable). For example:</p>
<pre><code>$ exe.pl main student2
</code></pre>
<p>This will run <code>g++ -o main.out main.cpp student2.cpp</code>. The <code>-o</code> option
can be used to specify another name for the exe (but the suffix will
always be <code>.out</code>):</p>
<pre><code>$ exe.pl -o prog main student2
</code></pre>
<p>runs <code>g++ -o prog.out main.cpp student2.cpp</code>. The <code>-s</code> option can be
used to add headers to the compilation (though I could not see why this
is useful, as headers are commonly included from within a <code>.cpp</code> file,
and therefore should be included automatically by the <code>g++</code> preprocessor):</p>
<pre><code>$ exe.pl -s main student2
</code></pre>
<p>runs <code>g++ -o main.exe main.cpp student2.cpp student2.hpp</code>. Note that <code>main.hpp</code> is not added. The script considers
the first filename on the command line (here <code>main</code>) as the "main"
script, and the <code>-s</code> option will not add a header file for the main
script. (Please consider clarify why this is done!)
Headers can still be added without using the <code>-s</code>
option by supplying names that matches "_h":</p>
<pre><code>$ exe.pl main student2 student2_h
</code></pre>
<p>runs <code>g++ -o main.exe main.cpp student2.cpp student2.hpp</code>. Next, the
the <code>-i</code> switch is used to handle dependencies. A dependency is a <code>.cpp</code> file
in another directory, let's call it DD, from the main directory, DM, where the script is
run from. If the dependency includes header files, the
script checks if the header files are located in DM, if so they are
excluded from the later compilation (please consider clarify why this is
done).</p>
<p>For example, consider DM=<code>/home/user/Desktop/bin/2</code>. We see that DM is located in a
parent directory DT=<code>/home/user/Desktop</code> which the script will use as the
top of the source tree. Then if for example the dependency directory
is DD=<code>/home/user/Desktop/bin/1</code>
and the dependency file is <code>student.cpp</code> which contains an include
statement <code>#include "grade.hpp"</code>, the script first checks if <code>grade.hpp</code>
already exists in DM. If it does, it is excluded from the later <code>g++</code>
compilation command (please consider explaining why it is done). Next,
the script tries to find
<code>student.cpp</code> in DT or any of it sub directories recursivly using
<code>File:Find</code>. If it finds the file (or more than one file) and it turns
out that the file is
in DD (and not some other directory in DT), it is assumed that there
also exists a <code>.cpp</code> file with the same
name in DD and the absolute path of this <code>.cpp</code> file is included in the
later <code>g++</code> compilation command. Also, the absolute path of DD is added
as an include search path (<code>-I</code> option) to the <code>g++</code> command.</p>
<p>I would recommend that the motivation behind the above logic (which is
not at all clear to me) be explained carefully in the source
code as comments.</p>
<p>To summarize, the above example corresponds to the following
command line:</p>
<pre><code>$ exe.pl -i target=student -i dir=/home/user/Desktop/bin/1 main student2
</code></pre>
<p>and the script will then produce the following <code>g++</code> command:</p>
<p><code>g++ -I /home/user/Desktop/bin/1 -o main.exe /home/user/Desktop/bin/1/student.cpp main.cpp student2.cpp</code></p>
<h1>Logical issues</h1>
<h2>The -i option does not work with more than one pair of (target, dir)</h2>
<p>Currently, the <code>-i</code> option does not work for more than one target. For example,
for the command line:</p>
<pre><code>$ exe.pl -i target=student2 -i dir=/home/user/Desktop/bin/1 -i target=student3 -i dir=/home/user/Desktop/bin/3
</code></pre>
<p><code>GetOptions()</code> will return for the hash <code>%opt_i</code> corresponding to
the input parameters <code>"i=s" =&gt; \%opt_i</code> the following hash</p>
<pre><code>%opt_i = (target =&gt; "student3", dir =&gt; "/home/user/Desktop/bin/3")
</code></pre>
<p>Notice that the first target <code>student2</code> is missing, this is because
both targets use the same hash key <code>target</code>. To fix this, you can try use
arrays instead of hashes as parameters to <code>GetOptions()</code>. For example:</p>
<pre><code>"target=s" =&gt; \@opt_t,
"dir=s" =&gt; \@opt_d,
</code></pre>
<h2>Dependencies in sub directories are not checked for</h2>
<p>As mentioned above, the code tries to exclude dependencies that are
present in the main directory. But if a dependency is in a sub
directory of that directory it will not find it. This is due to the
usage of <code>readdir()</code> :</p>
<pre><code>my %local = map { abs_path($_) =&gt; 1 } grep { !/^\./ } readdir CWD;
</code></pre>
<p>Here, <code>readdir()</code> will only return the files in <code>CWD</code>, not those in
any sub directory below it.</p>
<h2>Account for multiple versions of the same dependency file</h2>
<p>Currently the code uses the file in the main directory if there are
multiple versions of the same file name.</p>
<p>Let's say the dependency file <code>/home/user/Desktop/bin/1/student.hpp</code> contains:</p>
<pre><code>#include "grade.hpp"
</code></pre>
<p>and there exists two versions of the corresponding <code>.cpp</code> file. One in the dependency
directory <code>/home/user/Desktop/bin/1/</code></p>
<pre><code>/home/user/Desktop/bin/1/grade.cpp
</code></pre>
<p>and one in the CWD (where the script is run from)</p>
<pre><code>/home/user/Desktop/bin/2/grade.cpp
</code></pre>
<p>What is the correct file? The script should at least give a warning.</p>
<h2>Not checking recursivly for dependencies</h2>
<p>Let's say <code>student.hpp</code> has a <code>#include "grade.hpp"</code> and <code>grade.hpp</code> has an
include <code>#include "calc.hpp"</code>. Then, it will not find and compile <code>calc.cpp</code>.</p>
<h2>The <code>_h</code> command line trick does not work correctly</h2>
<p>The following code is used to check for header files on the command
line:</p>
<pre><code>@hed = map { /_h/ and s/^(.+)_.+/$1/ and "$_.hpp" } @ARGV;
</code></pre>
<p>Notice that the first regex <code>/_h/</code> matches any file with a <code>_h</code>
anywhere in the filename, for example <code>sah_handler</code>. I think you need
to add an end-of-string anchor to the regex: <code>/_h$/</code>.</p>
<h2>Matching of #include files name in a dependency file</h2>
<p>The code uses</p>
<pre><code>my @file_dep = map { /#include "([^"]+)"/ ? abs_path($1) : () } &lt;MAIN&gt;;
</code></pre>
<p>to extract the dependencies from a dependency file. Note that this
requires that there is no space between <code>#</code> and <code>include</code>. But the
assumption is not correct, it is in fact allowed to have spaces there, for example</p>
<pre><code>#   include "student.hpp"
</code></pre>
<p>is a legal C++ include statement.</p>
<h1>Language related issues</h1>
<h2>Use strict, warnings</h2>
<p>It is recommended to include <code>use strict; use warnings</code> at the top of
your program. This will help you catch errors at an early stage.</p>
<h2>Try to limit the use of global variables</h2>
<p>Extensive use of global variables makes it harder to reason about a
program. It is crucial that a program is easy to read (and understand)
in order to maintain and extend it effectively (at a later point).
It also makes it easier to track down bugs.</p>
<p>Note that if you add <code>use strict</code> at the top of the program, global
variable needs to be declared similar to lexical variables. You
declare a global variable with <code>our</code>.</p>
<h2>Old style open() and opendir()</h2>
<p>Modern perl uses the three-argument form of <code>open</code> and avoids global
bareword filehandle names. Instead use lexical filehandles. So instead
of this:</p>
<pre><code>open MAIN, $file;
</code></pre>
<p>do this (assuming no <code>autodie</code>):</p>
<pre><code>open (my $MAIN, '&lt;', $file) or die "could not open $file: $!";
</code></pre>
<p>See <a href="http://modernperlbooks.com/mt/2010/04/three-arg-open-migrating-to-modern-perl.html" rel="nofollow noreferrer">Three-arg
open()</a>
from the book "Modern Perl" for more information.</p>
<h2>Shebang</h2>
<p>See <a href="https://www.cyberciti.biz/tips/finding-bash-perl-python-portably-using-env.html" rel="nofollow noreferrer">this</a> blog for more information.
Consider replacing <code>#!/usr/bin/perl</code> with <code>#!/usr/bin/env perl</code>
Most systems have <code>/usr/bin/env</code>. It will also allow your script to run if you e.g.have multiple <code>perls</code> on your system. For example if you are using <code>perlbrew</code>.</p>
<h2>Clever use of map()</h2>
<p>The code uses <code>map</code> to produce very concise code, but such
code can be difficult to understand and make it harder to maintain
your code in the future.</p>
<p>Also note that returning false from the map {} code block like in</p>
<pre><code>@src = map { !/_h/ and "$_.cpp"} @ARGV;
</code></pre>
<p>produces an empty string element in @src, if you want to not produce
an element you must return an empty list <code>()</code> instead of false:</p>
<pre><code>@src = map { !/_h/ ? "$_.cpp" : () } @ARGV;
</code></pre>
<h2>Use good descriptive names for the subs.</h2>
<p>The sub <code>diff()</code> is supposed to find dependency files that are not
present in the current directory. But the name <code>diff()</code> does not
clarify what the sub is doing. On the other hand, the following name might be too verbose:</p>
<pre><code>find_abs_path_of_dep_files_that_does_not_exist_in_curdir()
</code></pre>
<p>but it is at least easier to understand.</p>
<h2>Use positive return values with <code>exit</code></h2>
<p>The exit code from a linux process is usually an integer between zero
(indicating success) and 125, see <a href="https://unix.stackexchange.com/a/418802/45537">this</a> answer for more information.</p>
<h2>Check the return value of <code>system $command</code></h2>
<p>You should check the return value from the <code>system()</code> call for
<code>g++</code>. The compilation may fail, and then the exit code will be
nonzero. In that case, there is no point in running the executable
after the compilation has finished.</p>
<h2>Use <code>say</code> instead of <code>print</code></h2>
<p>You can avoid typing a final newline character for print statements by
using <code>say</code> instead of <code>print</code>. The <code>say</code> function was introduced in
perl 5.10, and is mad available by adding <code>use v5.10</code> or use <code>use feature qw(say)</code> to the top of your script.</p>
<h1>Example code</h1>
<p>Here is an example of how you can write the code, following some of
the principles I discussed above. I use an object oriented approach to
avoid passing too many variables around in the parameter lists of the
subs. It also avoids using global variables.</p>
<pre><code>#! /usr/bin/env perl

package Main;
use feature qw(say);
use strict;
use warnings;
use Cwd qw(getcwd);
use File::Spec;
use Getopt::Long ();
use POSIX ();

{  # &lt;--- Introduce scope so lexical variables do not "leak" into the subs below..
    my $self = Main-&gt;new( rundir =&gt; getcwd() );
    $self-&gt;parse_command_line_options();
    $self-&gt;parse_command_line_arguments();
    $self-&gt;find_dependencies();
    $self-&gt;compile();
    $self-&gt;run();
}

# ---------------------------------------
# Methods, alphabetically
# ---------------------------------------

sub check_run_cmd_result {
    my ( $self,  $res ) = @_;

    my $signal = $res &amp; 0x7F;
    if ( $res == -1 ) {
        die "Failed to execute command: $!";
    }
    elsif ( $signal ) {
        my $str;
        if ( $signal == POSIX::SIGINT ) {
            die "Aborted by user.";
        }
        else {
            die sprintf(
                "Command died with signal %d, %s coredump.",
                $signal, ( $res &amp; 128 ) ? 'with' : 'without'
            );
        }
    }
    else {
        $res &gt;&gt;= 8;
        die "Compilation failed.\n" if $res != 0;
    }
}

sub compile {
    my ( $self ) = @_;

    my @command = ('g++');
    push @command, ("-I", $_) for @{$self-&gt;{inc}};
    push @command, "-o", "$self-&gt;{out}.out";
    push @command, @{$self-&gt;{hed}}, @{$self-&gt;{deps}}, @{$self-&gt;{src}};
    $self-&gt;debug( "@command" ) if $self-&gt;{opt_debug};
    my $res = system @command;
    $self-&gt;check_run_cmd_result( $res );
}

sub debug{
    my ( $self, $cmd ) = @_;

    say "final output:\n$cmd\n\nDependencies:";
    say for @{$self-&gt;{dep}};
    exit 1;
}

sub find_dependency {
    my ( $self,  $target, $dir ) = @_;

    $target .= '.cpp';
    my $fn = File::Spec-&gt;catfile($dir, $target);
    open ( my $fh, '&lt;', $fn ) or die "Could not open file '$fn': $!";
    my @include_args = map { /^#\s*include\s*"([^"]+)"/ ? $1 : () } &lt;$fh&gt;;
    close $fh;
    my @deps;
    for (@include_args) {
        my $fn = File::Spec-&gt;catfile( $dir, $_ );
        # TODO: In your program you checked if file also existed in
        #  $self-&gt;{rundir}, and excluded it if so. Do you really need to check that?
        if (-e $fn) {   # the file exists in target dir
            my ($temp_fn, $ext) = remove_file_extension( $fn );
            if (defined $ext) {
                check_valid_header_file_extension( $ext, $fn );
                push @deps, "$temp_fn.cpp";
                # TODO: Here you could call $self-&gt;find_dependency() recursively
                #  on basename($temp_fn)
            }
        }
    }
    if (@deps) {
        push @{$self-&gt;{deps}}, @deps;
        push @{$self-&gt;{inc}}, $dir;
    }
}

sub find_dependencies {
    my ( $self ) = @_;

    $self-&gt;{deps} = [];
    $self-&gt;{inc} = [];
    my $targets = $self-&gt;{opt_t};
    my $dirs = $self-&gt;{opt_d};
    for my $i (0..$#$targets) {
        my $target = $targets-&gt;[$i];
        my $dir = $dirs-&gt;[$i];
        $self-&gt;find_dependency( $target, $dir );
    }
}

sub parse_command_line_arguments {
    my ( $self ) = @_;

    check_that_name_does_not_contain_suffix($_) for @ARGV;
    # TODO: Describe the purpose of -s option here!!
    if($self-&gt;{opt_s}){
        $self-&gt;{src} = [ map { "$_.cpp" } @ARGV ];
        # NOTE: exclude header file for main program name ($self-&gt;{out})
        #   So if main program name is "main", we include main.cpp, but not main.hpp
        # TODO: describe why it is excluded
        $self-&gt;{hed} = [ map { !/^$self-&gt;{out}$/ ? "$_.hpp" : () } @ARGV];
    }
    else {
        # TODO: Describe what is the purpose of "_h" here!!
        $self-&gt;{src} = [ map { !/_h$/ ? "$_.cpp" : () } @ARGV ];
        $self-&gt;{hed} = [ map { /^(.+)_h$/ ? "$1.hpp" : () } @ARGV ];
    }
}

sub parse_command_line_options {
    my ( $self ) = @_;

    Getopt::Long::GetOptions(
        "s"        =&gt; <span class="math-container">\$self-&gt;{opt_s},   # headers the same as source files
        "h"        =&gt; \$</span>self-&gt;{opt_h},   # help message
        "o=s"      =&gt; <span class="math-container">\$self-&gt;{opt_o},   # output filename
        "target=s" =&gt; \@{$self-&gt;{opt_t}}, # target name for dependency
        "dir=s"    =&gt; \@{$self-&gt;{opt_d}}, # target dir for dependency
        "debug"    =&gt; \$</span>self-&gt;{opt_debug}   # output the generated command
    ) or die "Failed to parse options\n";

    usage() if $self-&gt;{opt_h};
    usage("Bad arguments") if @ARGV==0;
    $self-&gt;{out} = $self-&gt;{opt_o} // $ARGV[0];
    check_that_name_does_not_contain_suffix( $self-&gt;{out} );
    $self-&gt;validate_target_and_dir_arrays();
}

sub run {
    my ( $self ) = @_;

    exec "./$self-&gt;{out}.out";
}

sub validate_target_and_dir_arrays {
    my ( $self ) = @_;

    my $target_len = scalar @{$self-&gt;{opt_t}};
    my $dir_len = scalar @{$self-&gt;{opt_d}};

    die "Number of targets is different from number of target dirs!\n"
      if $target_len != $dir_len;
    $_ = make_include_dir_name_absolute($_) for @{$self-&gt;{opt_d}};
}

#-----------------------------------------------
# Helper routines not dependent on $self
#-----------------------------------------------

sub check_that_name_does_not_contain_suffix {
    my ($name) = @_;

    if ($name =~ /\.(?:hpp|cpp)$/ ) {
        die "Argument $name not accepted: Arguments should be without extension\n";
    }
}

sub check_valid_header_file_extension {
    my ( $ext, $fn ) = @_;

    warn "Unknown header file extension '$ext' for file '$fn'"
      if $ext !~ /^(?:hpp|h)/;
}

sub make_include_dir_name_absolute {
    my ($path ) = @_;

    if ( !File::Spec-&gt;file_name_is_absolute( $path )) {
        warn "Warning: Converting include path '$path' to absolute path: \n";
        $path = Cwd::abs_path( $path );
        warn "  $path\n";
    }
    return $path;
}

sub new {
    my ( $class, %args ) = @_;

    return bless \%args, $class;
}


sub remove_file_extension {
    my ( $fn ) = @_;

    if ( $fn =~ s/\.([^.]*)$//) {
        return ($fn, $1);
    }
    else {
        warn "Missing file extension for file '$fn'";
        return ($fn, undef);
    }
}

sub usage {
    say $_[0] if defined $_[0];
    say "usage: exe.pl [-h][--debug][-s][-o output_file][[-dir=directory -target=source]] &lt;main source&gt; &lt;other sources&gt;...";
    # TODO: Please add more explanation of the options here!!
    exit 0;
}
</code></pre>
    </div>