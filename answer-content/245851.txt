<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Consider using a hashmap of provider -&gt; process. This will enable you to register new providers with relative ease.</p>
<pre><code>async function githubRelease({user, repo, part = ""}) {
  let json = (await (await fetch(`https://api.github.com/repos/${user}/${repo}/releases/latest`)).json())
  if (json.message === "Not Found") throw "Invalid repository"
  if (!("assets" in json)) throw "Rate limit exceeded"
  let browser_download_urls = json.assets.map(asset =&gt; asset.browser_download_url)
  return browser_download_urls.filter(url =&gt; url.includes(part))
}
</code></pre>
<p>It will then be mapped inside the <code>getRelease</code> function as follows:</p>
<pre><code>module.exports.getRelease = async ({provider, user, repo, part = ""}) =&gt; {
    if !(providerMethods[normalise(provider)]) {
        throw "Invalid provider"
    }
    return providerMethods[normalise(provider)](user, repo, part)
}
</code></pre>
<p>where <code>providerMethods</code> would be:</p>
<pre><code>let providerMethods = {
    normalise("github"): githubReleases
}
</code></pre>
<p>This will enable users of your module to register new (or private) registry providers. They can add a new provider to the <code>providerMethods</code> object (gitlab etc) and don't have to wait for you to update the library first for supporting any extra providers (you can add providers if popular).</p>
<p>The <code>await (await fetch()).json()</code> can be extracted to another function. Although, I'd prefer using the <code>promise.then(r =&gt; r.json()).catch()</code> chain over multiple awaits, it is entirely dependent on your comfort with the language.</p>
    </div>