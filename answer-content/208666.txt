<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Overall code is written in a uniform style - good.</p>

<p><strong>Separate Code</strong></p>

<p><em>There is far too much code in one file</em>.  And even that is not organized enough.  This is unmanageable and increases review/maintenance effort.</p>

<p>Instead group like functions into several .c files and their corresponding declarations, typedefs, etc. into several .h. files.</p>

<p><strong>Avoid defining a declaration</strong></p>

<p><code>#define Dst_DECL dasm_State **Dst</code> hides too much.  Separate the type from the object.</p>

<p><strong>Allocate to the type</strong></p>

<p>Given the below, is the right type used?</p>

<pre><code>brks_t.addr = calloc(sizeof(uint32_t), 1);
</code></pre>

<p>To be certain obliges a review of declaration of <code>brks_t</code>below. </p>

<pre><code>struct {
  unsigned int * addr;
  int count;
} brks_t, rets_t;
</code></pre>

<p>And <strong>code got it wrong</strong>.  C does not define <code>unsigned</code> and <code>uint32_t</code> to be the same.</p>

<p>Now try allocating to the sizeof the de-referenced object.  This is easier to code right, review and maintain.</p>

<pre><code>brks_t.addr = calloc(sizeof *brks_t.addr, 1);
</code></pre>

<p>Minor point: <code>calloc(size_t nmemb, size_t size)</code> is usually coded <em>number-of-elements</em>, <em>elements-size</em>, so the following is typical.</p>

<pre><code>brks_t.addr = calloc(1, sizeof *brks_t.addr);
</code></pre>

<p>Robust code checks if the allocation succeeded.</p>

<pre><code>if (brks_t.addr == NULL) {
  Handle_Error();
}
</code></pre>

<p><strong>Avoid unnecessary casts</strong></p>

<pre><code>// memset((void *)D-&gt;lglabels, 0, D-&gt;lgsize);
memset(D-&gt;lglabels, 0, D-&gt;lgsize);
</code></pre>

<p><strong>Avoid <a href="https://en.wikipedia.org/wiki/Magic_number_(programming)#Unnamed_numerical_constants" rel="nofollow noreferrer">magic numbers</a></strong></p>

<p><code>dasm_put(Dst, 246)</code> means little. Perhaps:</p>

<pre><code>#define DTS_MEANINGFUL_NAME 246
...
dasm_put(Dst, DTS_MEANINGFUL_NAME);
</code></pre>

<p><strong>Use <code>bool</code></strong></p>

<p>Since C99, C has a boolean type <code>_Bool</code>.</p>

<pre><code>#include &lt;stdbool.h&gt;

void cmpexpr() {
  // int and = 0, or = 0;
  bool and = 0, or = 0;
</code></pre>

<p><strong>Avoid <code>and</code> as an object name</strong></p>

<p>Standard header <code>&lt;iso646.h&gt;</code> defines <code>and</code>, <code>not</code>, <code>or</code>, <code>xor</code> and others.  To avoid that name clash, use an alternative name, perhaps <code>and_flag</code>.</p>

<p><strong>Good use of <code>size_t</code> and array size calculations</strong></p>

<pre><code>size_t i = 0;
for (; i &lt; sizeof(stdfuncts) / sizeof(stdfuncts[0]); i++) {
</code></pre>

<p><strong>Think positive</strong></p>

<p>Style issue.  I find avoiding negation easier to follow</p>

<pre><code>if (!strcmp(stdfuncts[i].name, name)) {
// vs.
if (strcmp(stdfuncts[i].name, name) == 0) {
</code></pre>

<p>I've even gone to the point of defining a helper macro.  Example:</p>

<pre><code>#define streq(a,b) (strcmp((a), (b)) == 0)
if (streq(stdfuncts[i].name, name)) {
</code></pre>

<p><strong>Avoid excessive long lines</strong></p>

<p>Harder to review</p>

<pre><code>int siz = (v-&gt;type == T_INT ? sizeof(int32_t) : v-&gt;type == T_STRING ? sizeof(int32_t *) : v-&gt;type == T_DOUBLE ? sizeof(double) : 4);
</code></pre>

<p>vs.</p>

<pre><code>int siz = (v-&gt;type == T_INT ? sizeof(int32_t) :
         v-&gt;type == T_STRING ? sizeof(int32_t *) :
         v-&gt;type == T_DOUBLE ? sizeof(double) : 4);
</code></pre>

<p>Either way, this should be handled with auto formatting using a width much less than 136 as above.</p>

<p><strong>Organize  name space</strong></p>

<p>With global functions like <code>error(), lex(), skip(), asmexpr()</code>, etc., it is hard to follow code and know the source of a function.  Consider a few common prefixes for the several large chunks of his code.  (As you did with <code>dasm_</code>)</p>

<p><strong>Much more</strong></p>

<p>Only so much time.  Sorry.</p>
    </div>