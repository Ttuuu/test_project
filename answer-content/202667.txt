<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'd say <code>Root</code> is a misnomer here, since at first glance I imagined it to represent the filesystem root (i.e. the <code>/</code> directory), not the root of your class tree. Moreover, instead of deriving <code>File</code> and <code>Directory</code> from a common (abstract) ancestor, I'd derive <code>Directory</code> from <code>File</code> instead, since that's what most real filesystems do anyway, i.e. they treat directories as special files.</p>

<p><code>size</code> should not be a writable property; the <code>File</code> object should always calculate it based on its content. This can ensure there's no discrepancy between the stored size and the actual size of the file's content. Also, why doesn't <code>Directory</code> have a <code>getSize()</code> method? It could just call <code>getSize()</code> on all its children and add up the results.</p>

<p>You have a <code>writable</code> attribute on your objects, but you don't seem to be using it, e.g. in <code>setName()</code> you just replace the name of the object without checking if it's writable. Similarly, you have a <code>parent</code> argument in the constructor, but you don't use it; I'd expect the <code>File</code> to call <code>addContent()</code> on its parent automatically if the parent is specified in the constructor.</p>

<p>As for further features, I'd recommend making your <code>Directory</code> class iterable (so it can be used in <code>for</code> loops), as well as implementing the most common collection methods, such as <code>forEach</code>, <code>has</code>, <code>length</code> (i.e. the number of files in the directory), etc., instead of just exposing the array of children.</p>
    </div>