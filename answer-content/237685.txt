<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>The Algorithm</h1>

<p>The method <code>logIn</code> can be chunked into small steps:</p>

<blockquote>
  <pre class="lang-java prettyprint-override"><code>public boolean logIn(String name, String password) {

   if( /* user is logged in already? */)

   for (/* every user */)
     if ( /* has name and password */)

   if (/* no match found */)
     for (/* every user */)
       if ( /* can find user with the given name? */ )
}
</code></pre>
</blockquote>

<p>The logic is more complex than it has to be. The algorithm searches twice if a <code>user</code> with the <code>name</code> exists. A simpler algorithm could look like:</p>

<pre class="lang-java prettyprint-override"><code>public boolean logIn(String name, String password) {
    User user = // find user by its name

    if (/* no user found */)

    if (user.isLoggedIn)

    return user.hasPassword(password)     
}
</code></pre>

<hr>

<h1>Data Structure</h1>

<p>The method <code>getUsers()</code> looks like it returns a <code>List</code>. Since it is a list and you do not know at which index a concrete user is saved you have to search for the user.</p>

<blockquote>
  <pre class="lang-java prettyprint-override"><code>for (User user: getUsers())
{
  if (user.toString().equals(name))
</code></pre>
</blockquote>

<p>To check that a user with <code>name</code> does not exists you have to loop through the hole list and this could take some time if you have many users! This is also known as <a href="https://en.wikipedia.org/wiki/Time_complexity#Table_of_common_time_complexities" rel="nofollow noreferrer"><span class="math-container">\$O(n)\$</span></a> which is a indicator for the time complexity a algorithm can have.</p>

<p>It would be much more performant if we could get a user directly without to search it which would be a time complexity of <span class="math-container">\$O(1)\$</span>.</p>

<p>We can archive this goal by using a <a href="https://docs.oracle.com/javase/8/docs/api/java/util/HashMap.html" rel="nofollow noreferrer"><code>Map</code></a> instead of a <code>List</code>:</p>

<pre class="lang-java prettyprint-override"><code>Map&lt;String, User&gt; nameByUser = new HashMap&lt;&gt;();

nameByUser.put("TomZ", new User("TomZ", "aPassw0rt"));
// ..insert some more users

User user = nameByUser.get("TomZ");
</code></pre>
    </div>