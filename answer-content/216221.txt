<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Instead of providing you a "better" solution, I will try to give you some feedback the code.</p>

<hr>

<h1>Block indentation</h1>

<blockquote>
  <pre><code>function vowelsAndConsonants(s) {
var strConsonants = "";
var strVowels = "";
var i;
// ..
</code></pre>
</blockquote>

<p>To work with code it is important that it is formatted in a readable way. There are some style guides out there for example <a href="https://google.github.io/styleguide/jsguide.html" rel="noreferrer">from google</a> </p>

<pre><code>function vowelsAndConsonants(s) {
  var strConsonants = "";
  var strVowels = "";
  var i;
  // ..
</code></pre>

<hr>

<h1><a href="https://blog.codinghorror.com/code-smells/" rel="noreferrer">Type Embedded in Name</a></h1>

<pre><code>var strConsonants = "";
var strVowels = "";
</code></pre>

<p>In this variable names the type is embedded in the name</p>

<blockquote>
  <p>Avoid placing types in method names; it's not only redundant, but it forces you to change the name if the type changes.</p>
</blockquote>

<hr>

<h1><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...in#Array_iteration_and_for...in" rel="noreferrer">Array iteration and for...in</a></h1>

<p>For your task is the order important:</p>

<blockquote>
  <p>Input string, output vowels and consonants to log, separately but in order</p>
</blockquote>

<p>You can read <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...in#Array_iteration_and_for...in" rel="noreferrer">on MDN about the for..in loop</a>,that it do not guaranties a traversal in order:</p>

<blockquote>
  <p><strong>Note</strong>: <code>for...in</code> should not be used to iterate over an Array where the index order is important. [...]</p>
  
  <p>[...] iterating over an array may not visit elements in a consistent order. Therefore, it is better to use a for loop with a numeric index (or Array.prototype.<code>forEach()</code> or the <code>for...of</code> loop) when iterating over arrays where the order of access is important.</p>
</blockquote>

<hr>

<h1>Make the Else-Statement Implicit</h1>

<blockquote>
  <pre><code>if (s.charAt(i) == "a" || 
    s.charAt(i) == "e" || 
    s.charAt(i) == "i" || 
    s.charAt(i) == "o" || 
    s.charAt(i) == "u") {
  strVowels += s.charAt(i);
} else if (s.charAt(i) != "a" || 
           s.charAt(i) != "e" || 
           s.charAt(i) != "i" || 
           s.charAt(i) != "o" || 
           s.charAt(i) != "u") {
  strConsonants += s.charAt(i);
}
</code></pre>
</blockquote>

<p>Currently the if-else statement tries to express: <em>If you are a, e, i, o, u do something, else if you are not from a, e, i, o, u do something</em>.</p>

<p>This is semanticly the same as: <em>If you are a, e, i, o, u do something, else do something</em>.</p>

<p>Additional we can wrap the condition of the <code>vowels</code> into its own method to make the code more readable.</p>

<pre><code>function isVowel(letter) {
    return letter === "a" || 
           letter === "e" || 
           letter === "i" || 
           letter === "o" || 
           letter === "u"
}
</code></pre>

<p>The if-statement could now look like</p>

<pre><code>var letter = s.charAt(i)
if (isVowel(letter)) {
  strVowels += letter;
} else {
  strConsonants += letter;
}
</code></pre>

<hr>

<h1>String Concatenation..</h1>

<blockquote>
  <pre><code>strVowels += letter
</code></pre>
  
  <p>Every time Strings get merged by <code>+</code> a new String gets created, because Strings are immutable, that means that for each concatenation new memory space gets allocated.</p>
</blockquote>

<p>Better would be to use an array instead of a string an <code>push</code> into it.</p>

<pre><code>vowels.push(letter)
</code></pre>

<hr>

<h1>Example Refactoring</h1>

<pre><code>function isVowel(letter) {
    return letter === "a" ||
           letter === "e" ||
           letter === "i" ||
           letter === "o" ||
           letter === "u"
}

function vowelsAndConsonants(s) {
    var consonants = [];
    var vowels = [];

    for (var letter of s) {
        if (isVowel(letter)) {
            vowels.push(letter)
        } else {
            consonants.push(letter)
        }
    }

    for (var vowel of vowels) {
        console.log(vowel);
    }

    for (var constant of consonants) {
        console.log(constant);
    }
}
</code></pre>

<p>and from here you can still use some methods like <code>forEach</code> or using the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Conditional_Operator" rel="noreferrer">ternary operator</a> to shorten an if-else</p>

<pre><code>function isVowel(letter) {
    return letter === "a" ||
           letter === "e" ||
           letter === "i" ||
           letter === "o" ||
           letter === "u"
}

function print(x) {
    console.log(x)
}

function vowelsAndConsonants(s) {
    var consonants = [];
    var vowels = [];

    for (var letter of s) {
        isVowel(letter)
            ? vowels.push(letter)
            : consonants.push(letter)
    }

    vowels.forEach(print)
    consonants.forEach(print)
}
</code></pre>
    </div>