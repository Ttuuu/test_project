<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>If I understand your starting postulate, the user give:</p>
<ol>
<li><p>A wstring as a starting point</p>
</li>
<li><p>A maximal length if padding occurs</p>
</li>
<li><p>A char to repeatedly add after the string for padding</p>
</li>
<li><p>A prefix and a suffix that have to enclose the string only if they fit (both or just the first or none*) inside the maximal length.</p>
<p>(*) In my opinion, a policy "both or none" is more consistent.</p>
</li>
</ol>
<h2>Review</h2>
<pre><code>static std::wstring fillWString
</code></pre>
<p>I don't see advantage to declare your function as <code>static</code>.</p>
<ul>
<li>If it's a static method from a class, since you "extracted" it from the class for review, just remove the keyword.</li>
<li>If it's to hide the function from other translation units, just replace it by an anonymous namespace.</li>
<li>Maybe you added it for another reason, if so, tell me.</li>
</ul>
<p>Next, for the function signature</p>
<pre><code>const std::wstring &amp;stringToFill,
size_t fillLength,
const wchar_t fillChar = L' ',
const std::wstring &amp;initialFill = L"",
const std::wstring &amp;endFill = L""
</code></pre>
<p>As said by @Deduplicator, you should use <code>wstring_view</code> instead of <code>const wstring&amp;</code> this will reduce number of allocations and help you to reduce overhead. Your const-correctness is good, just apply it to the <code>size_t</code> to stay consistent and allow optimizations.</p>
<p>At this point, we can already see another problem: your naming convention. You wrote 26 times the word "fill" for only 16 lines of code (i dont count curly braces nor the empty lines). That pollute the reading since we already know from the function name that's about filling a string.</p>
<pre><code>const size_t originalStringLength = stringToFill.size();
if (fillLength &lt;= originalStringLength) {
  return stringToFill;
}
std::wstring result(stringToFill);
result.resize(fillLength, fillChar);
</code></pre>
<p>You return the original string if at least as long as the given length.</p>
<pre><code>std::wstring result(stringToFill);
result.resize(fillLength, fillChar);

if (originalStringLength + initialFill.size() &lt;= fillLength) {
  result.replace(originalStringLength, initialFill.size(), initialFill, 0u);
  if (originalStringLength + initialFill.size() + endFill.size() &lt;= fillLength) {
    result.replace(fillLength - endFill.size(), endFill.size(), endFill, 0u);
  }
}
</code></pre>
<p>You allocate the final size, but after put the filling char in each byte of padding, if needed, you change again bytes where prefix and suffix occurs. Try to avoid overwriting when you can. Furthermore, you did many times same computation, caching is a option.</p>
<p>Here you can see also how too long names make the reading more difficult.</p>
<h2>Proposal (using policy "both or none")</h2>
<pre><code>#include &lt;iostream&gt;
#include &lt;string&gt;
#include &lt;string_view&gt;

std::wstring fillString(
    const std::wstring_view source,
    const size_t length,
    const wchar_t filler = L' ',
    const std::wstring_view prefix = {},
    const std::wstring_view suffix = {}
) {
    if (length &lt;= source.size()) {
        return std::wstring{source};
    } 
    std::wstring result;
    result.reserve(length);
    result = source;
    
    if (prefix.size() + result.size() + suffix.size() &lt;= length ) {
      result.append(prefix);
      result.append(length - result.size() - suffix.size(), filler);
      result.append(suffix);
    }
    else {
      result.append(length - result.size(), filler);
    }
    return result;
}
</code></pre>
    </div>