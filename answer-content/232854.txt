<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Don't abuse <code>using namespace std</code></h3>
<p>Putting <code>using namespace std</code> at the top of every program is <a href="https://stackoverflow.com/questions/1452721/why-is-using-namespace-std-considered-bad-practice">a bad habit</a> that you'd do well to avoid.</p>
<h3>Implement <code>operator&lt;&lt;</code> and <code>operator&gt;&gt;</code> regardless of terminal or file input</h3>
<p>The only implementations you should have are</p>
<pre><code>friend istream&amp; operator &gt;&gt; (istream&amp; in, Account &amp;acc);
friend ostream&amp; operator &lt;&lt; (ostream&amp; out, const Account &amp;acc);
                                        // ^^^^^ Note the const here
</code></pre>
<p>Mixing the text extraction operators with <code>std::cin</code> as you do here</p>
<pre><code>istream&amp; operator &gt;&gt; (istream&amp; in, Account &amp;acc){
    string first_name, second_name;
    string gender;
    double balance;

    cout &lt;&lt; "Enter First Name: "; cin &gt;&gt; first_name;
    cout &lt;&lt; "Enter Second Name: "; cin &gt;&gt; second_name;
    cout &lt;&lt; "Enter Gender (M / F): "; cin &gt;&gt; gender;
    cout &lt;&lt; "Enter Initial Balance: "; cin &gt;&gt; balance;

    acc.setFirstName(first_name);
    acc.setSecondName(second_name);
    acc.setGender(gender);
    acc.setBalance(balance);

    return in;
}
</code></pre>
<p>restricts reusability and is a bad implementation.</p>
<p>Rather use the setters, or appropriate constructors for such case.</p>
<p>Also the implementation of <code>friend ofstream&amp; operator &lt;&lt; (ofstream&amp; out, const Account &amp;acc);</code></p>
<p>is redundant. <code>friend ostream&amp; operator &lt;&lt; (ostream&amp; out, const Account &amp;acc);</code> will already work for any kinf of <code>std::ostream</code>.</p>
    </div>