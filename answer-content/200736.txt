<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>2. Is there a better way to solve this question?<br>
  4. Can space and time complexity be further improved?</p>
</blockquote>

<p>Your approach takes \$O(n^2)\$ time (because at least one of searching or removing elements from a list will take time linear in the length of the list) and \$O(n)\$ space (because the length of the list may be half as long as the length of the input).</p>

<p>The suggestion of using a <code>HashSet</code> will, under reasonable assumptions, take \$O(n)\$ time and \$O(n)\$ space.</p>

<p>The intended approach takes \$O(n)\$ time and \$O(1)\$ space and consists of accumulating the numbers seen so far using <code>^</code> (xor). This operator has lots of nice properties: in particular it is commutative (<code>a ^ b</code> == <code>b ^ a</code>) and associative (<code>(a ^ b) ^ c</code> == <code>a ^ (b ^ c)</code>), and every value is its own inverse (<code>a ^ a</code> == <code>0</code>).</p>

<hr>

<blockquote>
  <p>5. Is my code very redundant?</p>
</blockquote>

<p>There's only one thing which looks truly redundant to me:</p>

<blockquote>
<pre><code>            if (!(alone.contains(elem))) {
                alone.add(elem);
            }
            else {
                alone.remove(alone.indexOf(elem));
            }
</code></pre>
</blockquote>

<p>If <code>elem</code> is already in the array then it scans once to test <code>contains</code> and a second time to find <code>indexOf</code>. <code>List</code> is the wrong data structure for this problem, but if you were e.g. required to use it in an interview question this would be less redundant as</p>

<pre><code>            int index = alone.indexOf(elem);
            if (index == -1) {
                alone.add(elem);
            }
            else {
                alone.remove(index);
            }
</code></pre>
    </div>