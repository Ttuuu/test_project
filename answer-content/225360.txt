<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><a href="https://www.python.org/dev/peps/pep-0008/#programming-recommendations" rel="nofollow noreferrer">Comparisons to <code>None</code> should always be done with <code>is</code> or <code>is not</code>.</a> This is because <code>None</code> is a singleton object and this will give you the right behavior even if you override some objects <code>__eq__</code> method or similar. This is mentioned in Python's official style-guide, <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">PEP8</a>. It also recommends no spaces around <code>=</code> for keyword arguments and using <code>lower_case</code> for variables and functions.</p>

<p>As to your actual question, what you really want to do is apply some function (fitting and plotting) to either the whole dataset or grouped by one or more categorical values.
The latter is what <a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.groupby.html" rel="nofollow noreferrer"><code>pandas.DataFrame.groupby</code></a> is for.</p>

<pre><code>kmf = KaplanMeierFitter()

def plot_fit(df, fig, name='Survival function'):
    results = kmf.fit(df['TIME'], df['EVENT'])
    trace_df = results.survival_function_.copy()  # Is this copy really needed?
    fig.add_trace(go.Scatter(
        x=trace_df.index,
        y=trace_df.iloc[:,0],
        mode='lines',
        name=name
    ))

def do_fit(df, by=None):
    fig = go.Figure()
    if by is None:
        plot_fit(df, fig)
    else:
        for group, df2 in df.groupby(by):
            name = ...  # Somehow determine label from group
            plot_fit(df2, fig, name)
    fig.update_layout(showlegend=True)
    return fig
</code></pre>

<p>This function can be called either as <code>do_fit(df)</code>, <code>do_fit(df, "PROTOCOL")</code> or <code>do_fit(df, ["PROTOCOL", "MUTATION"])</code>. The <code>group</code> variable is a tuple telling you which protocol and/or mutation it is, extracting a correct label from this is left as an exercise. I also omitted getting the dataframe with your <code>getter</code> function and other preparations. These should probably be done in the function calling this function.</p>

<p>It could be argued that this should be divided up even further and the fitting should be separated from the plotting.</p>
    </div>