<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><code>set</code>s perform containing checks (<code>w in visited</code>) <span class="math-container">\$O(1)\$</span> rather than <span class="math-container">\$O(n)\$</span> for lists.</li>
<li><a href="https://docs.python.org/3/library/collections.html#collections.deque" rel="nofollow noreferrer"><code>collections.deque</code></a> are better than lists for poping elements at the front (<code>popleft</code>).</li>
<li>you should put your example code under an <code>if __name__ == '__main__'</code> clause.</li>
<li><code>w</code> as a variable name does not convey meaning, you should try to come up with something more explicit.</li>
</ul>



<pre><code>import collections


def breadth_first_search(graph, root): 
    visited, queue = set(), collections.deque([root])
    while queue: 
        vertex = queue.popleft()
        for neighbour in graph[vertex]: 
            if neighbour not in visited: 
                visited.add(neighbour) 
                queue.append(neighbour) 


if __name__ == '__main__':
    graph = {0: [1, 2], 1: [2], 2: []} 
    breadth_first_search(graph, 0)
</code></pre>

<hr>

<p>Given a growing number of comments indicating that the code does not return anything, Iâ€™d like to add that, yes, this code does not process nodes: it only traverse the graph and you're likely to want to add your own custom logic to process each node. As your mileage may vary (building a traversal list, finding the first node that satisfies a condition, etc.), there is not a "one code fits all" approach, but a useful first approximation would be to <code>yield</code> each node as they are traversed:</p>

<pre><code>import collections


def breadth_first_search(graph, root): 
    visited, queue = set(), collections.deque([root])
    while queue: 
        vertex = queue.popleft()
        yield vertex
        visited.add(vertex)
        queue.extend(n for n in graph[vertex] if n not in visited)


if __name__ == '__main__':
    graph = {1: [2, 4, 5], 2: [3, 6, 7], 3: [], 4: [], 5: [], 6: [], 7: []}
    list(breadth_first_search(graph, 1))  # [1, 2, 4, 5, 3, 6, 7]
</code></pre>

<p>Note that this alternative iteration also takes care of the bug mentioned in <a href="https://codereview.stackexchange.com/a/175749/84718">this answer</a></p>
    </div>