<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ol>
<li><p>I don't personally know of any advantage to prefixing php functions with a backslash, so consider removing the unnecessary character.  (or tell me why it is useful)</p></li>
<li><p>Perform arithmetic once.  AKA "Don't Repeat Yourself" (<strong>D.R.Y.</strong>)</p>

<pre><code>$additionPointsCount = \count($currentContainer-&gt;addition_points);
</code></pre>

<p>becomes:</p>

<pre><code>$lastPoint = count($currentContainer-&gt;addition_points) - 1;
</code></pre></li>
<li><p>I'd have to double check the docs to recommend a replacement for <code>goto()</code>, but I'm pretty sure that the php docs say to avoid it all costs.  I recall a comic strip illustration that conveys the importance of its avoidance.  Then again, unless I am overlooking something, perhaps this is a suitable use case which avoids having to manually transfer variables into a new curom function scope.</p></li>
<li><p>If two separate sets if conditions lead to the same <code>goto</code>, then write D.R.Y. code and merge the conditions.  Likewise with several conditions that lead to <code>continue</code>.</p></li>
<li><p>To simplify conditions evaluating the same value with two or more sets of <code>||</code>, use <code>in_array()</code>. When ordering the conditions, write the least expensive evaluations first and the most taxing evaluations (that, say, make a function call) last.  Because conditions short circuit on the first "condition breaking" false, the heavier checks are avoided and efficiency is gained.  Also, try to remove excessive parentheses.</p>

<pre><code>if ((($currentRotation === 3) || ($currentRotation === 4)) &amp;&amp; ($currentItemType-&gt;xy_rotatable === false)) {
    continue;
}
</code></pre>

<p>becomes</p>

<pre><code>if ($currentItemType-&gt;xy_rotatable === false &amp;&amp; in_array($currentRotation, [3, 4])) {
    continue;
}
</code></pre></li>
<li><p>If you can't manage to reverse all of the logic in a multi-conditional expression (leading to <code>continue 2;</code>), then wrap all of the conditions in parentheses and write <code>!</code> before it to provide the opposite boolean evaluation, this way you don't need the <code>else</code> branch.</p></li>
<li><p>When pushing just one element into an indexed array, just use square braced syntax and spare the <code>array_push()</code> call.</p></li>
</ol>
    </div>