<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Sam has address some of the individual word translations.  Let's look at some of the other code.</p>

<h1>split/join/split</h1>

<pre><code>sentence = ' '.join([x.strip(punctuation) for x in sentence.split()])
...
sentence = sentence.split()
</code></pre>

<p>Here, you are joining splitting the sentence into words, stripping out punctuation, joining the words back into a sentence, and then splitting the sentence back into words.  Those last two steps seem unnecessary.  You could simply have:</p>

<pre><code>sentence = [word.strip(punctuation) for word in sentence.split()]
</code></pre>

<p>This isn't exactly the same.  If you have stand alone punctuation in the sentence, it will leave an empty string in the list, whereas joining and resplitting will eliminate those.  But due to the next step, filtering on a dictionary, it doesn't matter.</p>

<h1>in dictionary</h1>

<pre><code>dictionary = dictionary.split()

for element in sentence:
    if element in dictionary:
        ...
</code></pre>

<p>You are looking up elements in a <code>list(...)</code>, which is an <span class="math-container">\$O(N)\$</span> operation.  The <code>in</code> operator must start at the beginning of the list, comparing <code>element</code> with successive elements, until it finds the element or reaches the end of the list.</p>

<p>Containment tests are much faster when performed on sets.  The input is hashed to determine which bin to look for the element in.  The result is closer to <span class="math-container">\$O(1)\$</span> time complexity.  In short, it is usually faster.</p>

<pre><code>dictionary = set(dictionary.split())

for element in sentence:
    if element in dictionary:
        ...
</code></pre>

<p>Not a big change for the resulting speed improvement.</p>

<h1>List comprehension</h1>

<pre><code>result = []

for element in sentence:
    if element in dictionary:
        result.append(element)
</code></pre>

<p>Creating a list, and then adding elements to the list one-by-one is inefficient.  The list must be continuously resized, where each resize may involve allocating a larger chunk of memory and copying elements to the new memory location.</p>

<p>Copying all of the elements that pass some criteria from one list to another list is a common operation, and Python has created a syntax for doing this efficiently.</p>

<pre><code>result = [ element for element in sentence if element in dictionary ]
</code></pre>

<p>The Python interpreter can "guess" that the size of <code>result</code> will be at most the size of the <code>sentence</code> list.  One allocation, copy the data, then reallocate to the actual required size.  Faster code, and less code as well; double win.</p>

<h1>Type consistency</h1>

<p>In your code, what is the type of the data held in the variables <code>sentence</code> and <code>dictionary</code>?  Initially, they hold strings, but later they hold lists.  This variable type mutation makes the code harder to analyze, both by code analysis tools &amp; by humans.  Try to use separate variables for separate concepts.  A sentence would be a string; if split on white-space, you get words.    Use meaningful names too.  While <code>x</code> may be a perfectly fine variable name for coordinate systems, it does not convey any meaning when used for part of a sentence.</p>

<pre><code>valid_words = set(dictionary.split())
words = [fragment.strip(punctuation) for fragment in sentence.split()]
words = [word for word in words if word in valid_words]
</code></pre>

<h1>Generator stream</h1>

<p>Instead of performing the transformation in steps, at each step fully building lists of temporary results using list comprehension, you could also create a pipeline of generator expressions that fully process the translation of each word before fetching the next and accumulating the results at the end.</p>

<p>Borrowing <a href="https://codereview.stackexchange.com/a/240838/100620">Sam Stafford's <code>english_rules</code></a> ...</p>

<pre><code>rules = { 'English': english_rules }

def translate(sentence: str, dictionary: str, punctuation: str, language: str) -&gt; str:
    """
    Translate words in ``sentence`` that are found in the ``dictionary``, 
    according of the ``language`` rules, after removing unnecessary ``punctuation``.
    """

    def apply_rules(word, rules):
        for rule in rules:
            translated = rule(word)
            if translated:
                return translated
        return word

    valid_words = set(dictionary.split())

    words = (fragment.strip(punctuation) for fragment in sentence.split())
    words = (word for word in words if word in valid_words)
    words = map(functools.partial(apply_rules, rules=rules[language]), words)

    return " ".join(words)

if __name__ == '__main__':
    sentence = "?hello boolean bring, !mango! and, country ban,ana wish yum  apple!" 
    dictionary = "a aa apple banana pear strawberry mango country wish boolean bring" 
    punctuation = "?!," 
    language = "English"
    print(translate(sentence, dictionary, punctuation, language))
</code></pre>

<p>Result:</p>

<blockquote>
  <p>buwulean bringah mango countryeeh wishey apple</p>
</blockquote>
    </div>