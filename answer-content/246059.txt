<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>first of all you can use the "new" class syntax instead of changing the prototype directly.<br>
This is how I would do it:</p>
<pre><code>class Errey {
    #currentArray;

    constructor(...elements) {
        this.#currentArray = elements;
    }

    get errey() {
        return this.#currentArray;
    }

    push(...elements) {
        const startLength = this.#currentArray.length;
        elements.forEach((curEl, index) =&gt; this.#currentArray[index + startLength] = curEl);
        return this.#currentArray.length;
    }

    join(union = " ") {
        return this.#currentArray.reduce((prev, cur) =&gt; prev + union + cur);
    }
}

//run a few examples
const myArray = new Errey("3","blue","1","brown")

console.log(myArray.join(", "));
console.log(myArray.push("Subscribe", "To", "Him"));
console.log(myArray.errey);
</code></pre>
<p>push:<br>
the standard array.prototype.push allows for multiple elements to be added at once, so I allow multiple elements and loop over them using <code>forEach</code>, you could also do <code>[...this.#currentArray, ...elements]</code> (or use <code>Array.prototype.concat()</code>).</p>
<p>join:<br>
here I use reduce to create a join operation. Reduce takes the first 2 elements and applies a function on them (in this case <code>a + union + b</code>), makes them the new first element and repeats that until there is only one element left, our joined erray.</p>
<p>I also made the internal Array private using the prefixed <code>#</code> and created a getter (<code>get errey()</code>) instead, this way the internal array can only be changed using the push method.</p>
<p>Using the factory pattern (which I personally prefer):</p>
<pre><code>const Errey = (...elements) =&gt; {
    
    const push = (...newElements) =&gt; {
        const startLength = elements.length;
        newElements.forEach((curEl, index) =&gt; elements[index + startLength] = curEl);
        return elements.length;
    };

    const join = (union = " ") =&gt; elements.reduce((prev, cur) =&gt; prev + union + cur);

    const get = () =&gt; elements;

    return {
        push,
        join, 
        get,
    };
};

const myArray = Errey("3","blue","1","brown")

console.log(myArray.join(", "));
console.log(myArray.push("Subscribe", "To", "Him"));
console.log(myArray.get());
</code></pre>
    </div>