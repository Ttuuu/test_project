<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This may not be more efficient than juvian's answer, but I think it's a lot cleaner to use <code>Array.prototype.filter</code>; it's usage, as the name suggests, it to filter elements out of an array, which is exactly what you are trying to do.</p>

<pre><code>function diffArray(a, b) {
    return   a.filter(function(val) { // reveal the unique values in a
        return b.indexOf(val) &lt; 0;
    }.concat(b.filter(function(val) { // concat those with the unique values in b
        return a.indexOf(val) &lt; 0;
    }
}
</code></pre>

<p>And, if you want, you could make it even cleaner by extracting the <code>filter</code> parts to their own functions:</p>

<pre><code>function getUniqueValues(src, other) {
    return src.filter(function(val) {
        return other.indexOf(val) &lt; 0;
    }
}
</code></pre>

<p>Then, your main function becomes:</p>

<pre><code>function diffArr(a, b) {
    return getUniqueValues(a, b).concat(getUniqueValues(b, a));
}
</code></pre>

<p>Again, this may not be more efficient, but it is more idiomatic in that is uses the right built-in JavaScript methods for the job.</p>

<p>Note: it may be more efficient to sort both arrays for faster computing overall:</p>

<pre><code>function diffArr(a, b) {
    a.sort();
    b.sort();
    ...
}
</code></pre>
    </div>