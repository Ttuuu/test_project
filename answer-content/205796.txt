<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I like the concept in the answer from <a href="https://codereview.stackexchange.com/questions/205748/grouping-report-data-by-one-of-two-criteria/205767#205767">Xiaoy312</a>, but in my opinion you should only return one time (at the bottom of the method). So with a little refactoring it could look like:</p>

<pre><code>public virtual IEnumerable&lt;EventListGroup&gt; GetEventsGrouped(IEnumerable&lt;EventListRow&gt; eventList, GroupByEventData groupBy)
{
  Func&lt;EventListRow, object&gt; grouper = null;
  Func&lt;IEnumerable&lt;EventListRow&gt;, EventListGroup, EventListGroup&gt; extraSetter = null;

  EventListGroup CreateGroup(IEnumerable&lt;EventListRow&gt; source)
  {
    return extraSetter(source, new EventListGroup
    {
      EventDurationSeconds = source.Sum(e =&gt; e.EventDurationSeconds),
      EventCount = source.Count(),
      OeeEventTypeColourHex = source.Max(e =&gt; e.OeeEventTypeColourHex),
      OeeEventTypeName = source.Max(e =&gt; e.OeeEventTypeName)
    });
  }

  switch (groupBy)
  {
    case GroupByEventData.Hour:
      grouper = e =&gt; new { e.StartDateTime.Date, e.StartDateTime.Hour };
      extraSetter = (source, group) =&gt;
      {
        group.GroupID = source.Min(e =&gt; e.StartDateTime.CimToSql());
        group.GroupName = source.Min(e =&gt; e.StartDateTime.ToString("MMM dd yyyy HH:00tt"));
        return group;
      };
      break;
    case GroupByEventData.Day:
      grouper = e =&gt; new { e.Date };
      extraSetter = (source, group) =&gt;
      {
        group.GroupID = source.Min(e =&gt; e.Date.CimToSql());
        group.GroupName = source.Min(e =&gt; e.Date.ToString("MMM dd yyyy"));
        return group;
      };
      break;
    // TODO: The rest of the cases
    default:
      Log.WriteError(string.Format("Group by: \"{0}\" not coded for", groupBy), "EventService.GetEventsGrouped");
      return null;  // Or throw an exception
  }

  return eventList.GroupBy(grouper).Select(CreateGroup);
}
</code></pre>

<p>One of the advantages of this is that you only manipulate <code>eventList</code> in one place, and you can easily change the LINQ-expression, if you want to for instance order it before returning or filter before grouping etc.</p>

<hr>

<p>Or slightly modified:</p>

<pre><code>public virtual IEnumerable&lt;EventListGroup&gt; GetEventsGrouped(IEnumerable&lt;EventListRow&gt; eventList, GroupByEventData groupBy)
{
  Func&lt;EventListRow, object&gt; grouper = null;
  // Instead of just an IEnumerable&lt;EventListRow&gt; the entire group is provided for the group property setters:
  Func&lt;IGrouping&lt;object, EventListRow&gt;, string&gt; groupIdSetter = null;
  Func&lt;IGrouping&lt;object, EventListRow&gt;, string&gt; groupNameSetter = null;


  EventListGroup CreateGroup(IGrouping&lt;object, EventListRow&gt; source)
  {
    return new EventListGroup
    {
      GroupID = groupIdSetter(source),
      GroupName = groupNameSetter(source),
      EventDurationSeconds = source.Sum(e =&gt; e.EventDurationSeconds),
      EventCount = source.Count(),
      OeeEventTypeColourHex = source.Max(e =&gt; e.OeeEventTypeColourHex),
      OeeEventTypeName = source.Max(e =&gt; e.OeeEventTypeName)
    };
  }

  switch (groupBy)
  {
    case GroupByEventData.Hour:
      grouper = e =&gt; new { e.StartDateTime.Date, e.StartDateTime.Hour };
      groupIdSetter = source =&gt; source.Min(e =&gt; e.StartDateTime.CimToSql());
      groupNameSetter = source =&gt; source.Min(e =&gt; e.StartDateTime.ToString("MMM dd yyyy HH:00tt"));
      break;
    case GroupByEventData.Day:
      grouper = e =&gt; new { e.Date };
      groupIdSetter = source =&gt; source.Min(e =&gt; e.Date.CimToSql());
      groupNameSetter = source =&gt; source.Min(e =&gt; e.Date.ToString("MMM dd yyyy"));
      break;
    case GroupByEventData.Week:
      grouper = e =&gt; new { Week = e.StartDateTime.GetWeekNumber(), e.StartDateTime.Year };
      groupIdSetter = source =&gt; source.Min(e =&gt; e.StartDateTime.CimToSql());
      // Here is the first element in the group used to create the group name instead of the anonymous group object:
      groupNameSetter = source =&gt; "Wk " + source.First().StartDateTime.GetWeekNumber() + ", " + source.First().StartDateTime.Year;
      break;
    case GroupByEventData.Month:
      grouper = e =&gt; new { e.StartDateTime.Month, e.StartDateTime.Year };
      groupIdSetter = source =&gt; source.Min(e =&gt; e.StartDateTime.CimToSql());
      // Here the group key is casted to dynamic in order to use the properties of the anonymous key directly in the group name:
      groupNameSetter = source =&gt; ((dynamic)source.Key).Month + "/" + ((dynamic)source.Key).Year;
      break;
    default:
      Console.WriteLine(string.Format("Group by: \"{0}\" not coded for", groupBy), "EventService.GetEventsGrouped");
      throw new InvalidOperationException("Undefined Group By case");
  }

  return eventList.GroupBy(grouper).Select(CreateGroup);
}
</code></pre>
    </div>