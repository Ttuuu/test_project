<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>SOLVED</strong></p>

<p>this is the way I ended up doing it, don't know if it's the best way, but it works</p>

<p>I took this idea from an answer that was posted here but now it's not anymore, 
and Honestly I don't remember who suggested it, I took the foreach loop and adapted to my case, for my point of view the foreach loop is the fasted way, and also I can turn it into a method and dive the code to be reusable as suggested by</p>

<blockquote>
  <p>FeRaac and dfhwze</p>
</blockquote>

<p>In the case approached by FeRaac about the exception or the difference between <code>strPosi</code> and <code>strLvl</code> with the rest of the params I changed the way I made the linq so to avoid using <code>LIKE</code> in the where clause.</p>

<pre><code>public ActionResult MultipleParameterSearch(MultipleParameterSearch multiple)
    {
        //First I declare an empty string in which I'll store the different params
        string whereClause = string.Empty;
        //Here I create an empty string list where I'll add not null params values
        List&lt;string&gt; values = new List&lt;string&gt;();
        //Like my data base tables don't have the same names as the params I declare and initialise an string dictionary so I can select the data base table name according the param
        Dictionary&lt;string, string&gt; properties = new Dictionary&lt;string, string&gt;()
        {
            {"strCod", "CodProd" },
            {"strRack", "Rack" },
            {"strPosi", "Position"},
            {"strLvl", "Level" },
            {"intCantMin", "Stock" },
            {"intCantMax", "Stock" }
        };
        //get model properties
        var pro = multiple.GetType().GetProperties();
        //keep count of the iterated params
        int count = 0;
        foreach (var p in pro)
        {
            if (p.GetValue(multiple, null) != null)
            {
                //if the param is not null I create a string in which I add the table name and the param value
                string whereForThisP = string.Format(CultureInfo.InvariantCulture, "{0} " + (p.Name == "intCantMin" ? "&gt;=" : (p.Name == "intCantMax" ? "&lt;=" : "==")) + " @"+count, properties[p.Name]);
                //I add the not null param to the values list
                values.Add(p.GetValue(multiple, null).ToString());
                if (whereClause.Equals(string.Empty))
                {
                   //if whereClause is still ampty just add the string
                    whereClause = whereForThisP;
                }
                else
                {
                    //if not I append a "AND" to the clause
                    whereClause += " and " + whereForThisP;
                }
                count++;
            }
        }
        //if the clause does not contains "Stock" by default I add it greater than 0
        if (!whereClause.Contains("Stock"))
            whereClause += " and Stock &gt; 0";

        try
        {
            //Here just add to the where clause the predicate string , and the values list converted to array
            var x = getData()
                    .Where(whereClause, values.ToArray()).ToList();
            return PartialView("multi", x);
        }
        catch (Exception ex)
        {
            return Json(ex.ToString(), JsonRequestBehavior.AllowGet);
        }
    }
</code></pre>

<p>I documented the code the best I could but in brief I just iterate over the model porperties, evaluate if it's not null, and if that's the case I append to a string variable, the table name, and also append the param value to a list where I store the values to later parse it to an array.</p>

<p>After that sent the string where clause and values array as params to the linq where consult.</p>
    </div>