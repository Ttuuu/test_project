<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Initializing in the declaration</h3>

<blockquote>
<pre><code>    private DelayQueue&lt;Transaction&gt; transactions;


    public TransactionManager() {
        transactions = new DelayQueue&lt;&gt;();
    }
</code></pre>
</blockquote>

<p>You could replace this entire block with just </p>

<pre><code>    private BlockingQueue&lt;Transaction&gt; transactions = new DelayQueue&lt;&gt;();
</code></pre>

<p>This has the identical effect.  No big advantage, just less code.  </p>

<p>Using the interface rather than the implementation is good practice, as it makes the code more flexible.  </p>

<h3>Statistics</h3>

<p>You have </p>

<blockquote>
<pre><code>        Statistic statistics = new Statistic();
        transactions.forEach(transaction -&gt; {
            statistics.setCount(statistics.getCount() + 1);
            statistics.setSum(statistics.getSum() + transaction.getAmount());
            statistics.setMax(statistics.getMax() &gt; transaction.getAmount() ? statistics.getMax() : transaction.getAmount());
            statistics.setMin(statistics.getMin() &lt; transaction.getAmount() ? statistics.getMin() : transaction.getAmount());
        });
        if (statistics.getCount() &gt; 0) {
            statistics.setAvg(statistics.getSum() / statistics.getCount());
        }
</code></pre>
</blockquote>

<p>And </p>

<blockquote>
  <p>Statistic.class with getters and setters.</p>

<pre><code>public class Statistic {
private double sum = 0.0;
private double avg = 0.0;
private double max = 0.0;
private double min = 0.0;
private int count = 0;}
</code></pre>
</blockquote>

<p>Consider getting rid of the setters.  Instead, move that block from the <code>getStatistics</code> method into an <code>addDatum</code> method in the <code>Statistics</code> class.  </p>

<pre><code>public class Statistics {

    private double sum = 0.0;
    private double maximum = 0.0;
    private double minimum = 0.0;
    private int count = 0;

    public void addDatum(double amount) {
        count++;
        sum += amount;

        if (amount &gt; maximum) {
            maximum = amount;
        } else if (amount &lt; minimum) {
            minimum = amount;
        }
    }

    public double calculateAverage() {
        return (count &gt; 0) ? (sum / count) : 0.0;
    }

}
</code></pre>

<p>This way the <code>Statistics</code> class knows how to do calculations.  In the original, it was only a dumb container.  So you had to <code>get</code> the value, update it, and then <code>set</code> to the result.  </p>

<p>I also fixed the indentation and spacing of the class.  </p>

<p>I updated the name.  Average is a statistic.  This is a collection of statistics.  </p>

<p>I moved the average calculation into a replacement for <code>getAvg</code>.  It calculates it on the fly.  You could memoize the result if you wanted, but you'd have to invalidate it with each addition.  Or you could recalculate the average each time you add something.  </p>

<h3>Updating as you go</h3>

<p>You are considering making changes to update as you go.  This is still consistent with that.  </p>

<p>You may also want to consider how you use this.  You say </p>

<blockquote>
<pre><code>     * Return statistics of transaction for the last 60 seconds.
</code></pre>
</blockquote>

<p>But there are easier ways to do that than to use a <code>DelayQueue</code>.  Rather than use a sorted queue, use buckets.  E.g. with a <code>HashMap&lt;MinuteTime, Transactions&gt;</code>:   </p>

<pre><code>buckets.get(timeToTheMinute).add(transaction);
</code></pre>

<p>Then you can calculate the statistics in the <code>add</code> method.  And you don't have to worry about expirations to separate one period from another.  </p>
    </div>