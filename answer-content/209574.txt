<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>In addition to Reinderien's comments:</p>

<hr>

<p><code>checkWin()</code> first checks <code>board[0][0]==board[0][1]==board[0][2]</code> and returns the "winning" symbol (a string), if the match was found.</p>

<p>This means that, with the following board:</p>

<pre><code>   |   |   
---+---+---
 X | X |   
---+---+---
 O | O | O 
</code></pre>

<p><code>checkWin()</code> returns <code>''</code>, and <code>checkWin() == currentPlayer.symbol</code> is false, so "O" doesn't win.  And "X" can fill their row on their move, and will be declared the winner in two more moves!</p>

<p>The only player who can win, is the one that just made a move, so pass that player's symbol to the <code>checkWin()</code> call, and explicitly check for that player winning:</p>

<pre><code>def checkWin(symbol):
    for row in board:
        if row[0] == row[1] == row[2] == symbol:
            return symbol
</code></pre>

<hr>

<p><code>checkWin()</code> returns 3 different types of values!</p>

<ul>
<li><code>str</code> if a winner is detected</li>
<li><code>bool</code> if there are still moves which can be made</li>
<li><code>int</code> if the game is tied.</li>
</ul>

<p>This is just plain wrong.  Pick one return type.  For instance, you could use <code>int</code>, and return <code>0</code> for game not over, <code>1</code> for a win by the current player, and <code>-1</code> for a draw game.<br>
Or you could use <code>str</code>, and return <code>"X"</code> or <code>"O"</code> for a win by that player, <code>"Cat's game"</code> for a draw, and <code>""</code> for the game not over.  Then, created named constants for the values, and use those names in your code, instead of the actual values.  Eg)</p>

<pre><code>GAME_HAS_WINNER = 1
GAME_IS_A_DRAW = -1
GAME_IS_NOT_OVER = 0

# ...

def game():

    # ...

    while True:
        # ...
        state = checkWin(currentPlayer.symbol)
        if state == GAME_HAS_WINNER:
            # ... declare winner
            break
        elif state == GAME_IS_A_DRAW:
            # ... declare a draw
            break
        else:
            # ...
</code></pre>

<p>Better would be to create an <code>Enum</code> for the return code, if you've learnt that.</p>

<hr>

<p>You can simplify your <code>createBoard()</code> &amp; <code>printBoard()</code> functions, and at the same time fix the bug in <code>checkWin()</code> by initializing the board with the number characters, instead of empty strings.</p>

<pre><code>def createBoard():
    return [['1', '2', '3'], ['4', '5', '6'], ['7', '8', '9']]

def printBoard():
    for row in board:
        print("---------------")
        for place in row:
            print("|", place, "|", end='')
        print("")
    print("---------------")
</code></pre>

<p>You'll need a different way to check for a draw game.  The simplest would be to remove that test from <code>checkWin()</code> and change your <code>while</code> loop into a <code>for</code> loop that runs for at most 9 turns.  If you finish the loop without <code>break</code>-ing out of the loop, the <code>else:</code> clause gets executed.</p>

<pre><code>def game():

    # ...

    for _ in range(9):
        # ...
        if checkWin(currentPlayer.symbol) == GAME_HAS_WINNER:
             # ... announce winner
             break
        # ...
    else:
        # ... announce draw game
</code></pre>

<hr>

<p>You can use list comprehension to simplify <code>checkWin()</code>.  For instance, checking only for a win by a given symbol, and returning <code>True</code> for a win, and <code>False</code> otherwise:</p>

<pre><code>def checkWin(symbol):
    if any( all(board[i][j] == symbol for i in range(3)) for j in range(3)):
        return True
    if any( all(board[i][j] == symbol for j in range(3)) for i in range(3)):
        return True
    if all(board[i][i] == symbol for i in range(3)):
        return True
    return all(board[i][2-i] == symbol for i in range(3)):
</code></pre>
    </div>