<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Side note: this is a code review site, so I'm going to at least start by reviewing your actual code. I might try to add a few points about what you tried to investigate later, but for now this is mostly just about the code itself.</p>

<h1>Don't Repeat Yourself</h1>

<p>Right now, your code contains main repetitions of nearly identical code:</p>

<pre><code>begin = clock();
for (int i = 0; i &lt; l; i++) {
    map[i] = i;
}
std::cout &lt;&lt; "std::unordered_map: " &lt;&lt; clock() - begin &lt;&lt; '\n';

begin = clock();
for (int i = 0; i &lt; l; i++) {
    vec1.push_back(i);
}
std::cout &lt;&lt; "std::vector (no reserve): " &lt;&lt; clock() - begin &lt;&lt; '\n';

vec2.reserve(l);
begin = clock();
for (int i = 0; i &lt; l; i++) {
    vec2.push_back(i);
}
std::cout &lt;&lt; "std::vector (reserve): " &lt;&lt; clock() - begin &lt;&lt; '\n';
</code></pre>

<p>As a starting point, I'd try to refactor that to eliminate at least some of the repetition. I'd start with a little "timer" template, something on this general order:</p>

<pre><code>template &lt;class F&gt;
void timer(std::string const &amp;label, F f) {
    auto begin = clock();
    f();
    std::cout &lt;&lt; label &lt;&lt; clock() - begin() &lt;&lt; '\n';
}
</code></pre>

<p>Then I'd use that for each of the individual tests:</p>

<pre><code>void primitive_test() {
    // ...

    timer("std::unordered_map:", [&amp;]{ for (int i=0; i&lt;l; i++) map[i] = i; } );

    timer("std::vector (no reserve): ", [&amp;]{ for (int i=0; i&lt;l; i++) vec1.push_back(i); }); 

    vec2.reserve(l);
    timer("std::vector (reserve): ", [&amp;]{ for (int i=0; i&lt;l; i++) vec2.push_back(i); });
</code></pre>

<h1>Improve Readability</h1>

<p>Right now, the output isn't very readable. First of all, all the numbers immediately follow the labels, so they're not aligned with each other. When you have a different number of digits, it's not always easy to be sure whether one might be 10 times larger than another. So I'd change the code to display the output so the numbers are aligned with each other:</p>

<pre><code>std::cout &lt;&lt; std::setw(30) &lt;&lt; label &lt;&lt; std::setw(10) &lt;&lt; clock() - begin &lt;&lt; "\n";
</code></pre>

<p>Note that by consolidating the code as we did above, we now only have to make this change in one place.</p>

<p>Second, I'd try to format the numbers as the user would normally expect them to look based on the configured locale. We can do that by adding code like this at the beginning of <code>main</code>:</p>

<pre><code>std::cout.imbue(std::locale(""));
</code></pre>

<p>With those changes, we get output that I find much more readable and easier to compare, like this:</p>

<pre><code>Testing primitives.
           std::unordered_map: 2,240,000
    std::vector (no reserve):    130,000
       std::vector (reserve):     60,000
        std::vector (resize):     10,000
    std::vector (initialize):     10,000
                  std::deque:     50,000
        std::queue (emplace):     50,000
                       array:     50,000
</code></pre>

<h1>Improve Timing</h1>

<p><code>clock()</code> isn't really a great way of timing things. The precision varies (widely) and getting results in a meaningful (real-world) unit is somewhat painful. I'd prefer to use something like <code>std::chrono::high_resolution_clock</code>. Again, having consolidated all the timing in one place makes it much easier to institute this change:</p>

<pre><code>template &lt;class F&gt;
void timer(std::string const &amp;label, F f) {
    using namespace std::chrono;
    auto begin = high_resolution_clock::now();
    f();
    auto end = high_resolution_clock::now();
    std::cout &lt;&lt; std::setw(30) &lt;&lt; label 
              &lt;&lt; std::setw(10) &lt;&lt; duration_cast&lt;milliseconds&gt;(end-begin).count() &lt;&lt; "ms\n";
}
</code></pre>

<p>Now we get output like this:</p>

<pre><code>Testing primitives.
           std::unordered_map:     2,266ms
    std::vector (no reserve):        126ms
       std::vector (reserve):         60ms
        std::vector (resize):         13ms
    std::vector (initialize):         10ms
                  std::deque:         45ms
        std::queue (emplace):         50ms
                       array:         41ms
</code></pre>
    </div>