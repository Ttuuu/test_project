<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I like how you made the <code>Kennel</code> class the virtual base for your animals. The other reviewers might have a point in that this could become confusing, but for such a simple project I think this is quite effective. It avoids the need for a pure virtual <code>Animal</code> class, which is kind of neat. Mind you, I'm highly skeptical of the "object oriented" approach as it is typically practiced. I can count on one hand the number of times I've been able to use inheritance to actually simplify things.</p>

<p>You also do not use <code>using namespace std</code>. Fantastic!</p>

<h2>Naming</h2>

<p>Your variable names are OK for the most part. But do note that <code>AddCat</code> and <code>AddDog</code> use <code>name</code> as input argument, and the object has a <code>name</code> member variable also. Thus within these functions, the member variable is not visible. You should try to avoid duplicating names like this. One common solution is to have member variables consistently named as <code>m_name</code> or <code>name_</code>. This makes it obvious what they are, and it also prevents name clashes.</p>

<p>The methods you implemented based on the exercise's requirements have a different naming style than the <code>makeSound</code> method you created. You also have two member variables, one starts with an upper case letter and the other with a lower case letter. Try to be consistent in naming!</p>

<h2>Memory management</h2>

<p>The destructor for <code>Kennel</code> iterates over <code>KennelList</code> and destroys all allocated memory. From the looks of it you're not leaking memory. But ideally you don't want to have to deal with deallocation. Why not let the compiler figure out what to deallocate?</p>

<pre><code>std::vector&lt;std::unique_ptr&lt;Kennel&gt;&gt; KennelList;
</code></pre>

<p>If you use a vector of <code>std::unique_ptr</code> elements, you don't need to worry about <code>delete</code>. When you stick a pointer into the <code>KennelList</code>, it will from that moment on take care of not only the pointer, but also the pointed-to data. You would do something like this to put your pointers into the vector:</p>

<pre><code>KennelList.emplace_back(new Cat(name));
</code></pre>

<h2>Input arguments</h2>

<p>For the <code>AddCat</code> method you take a const reference to a string as input argument. This is excellent (though I prefer to write <code>std::string const&amp; name</code> rather than <code>const std::string &amp; name</code>, it prevents some misunderstandings between me and the compiler...). However, for all the other methods you take a <code>std::string</code> by value (<code>Dog</code> and <code>Cat</code> constructors, <code>makeSound</code>). There is no need to make these copies.</p>

<p>Though one alternative for the constructor could be</p>

<pre><code>Dog(std::string dogName)
{
  name = std::move(dogName);
}
</code></pre>

<p>Here, instead of taking <code>dogName</code> by reference, you take it by value, making a copy. This copy you then move into your member variable. The advantage of making the copy at the input of the function is that when you call the function,</p>

<pre><code>Dog("Kipper");
</code></pre>

<p>a temporary <code>std::string</code> is made. The compiler will not create a copy of this temporary to pass to the <code>Dog</code> constructor, but it will directly use that temporary. Thus, the <code>std::string</code> is constructed only once, and directly stored in your new object.</p>

<p>Note also that <code>makeSound</code> doesn't need an input argument at all. The object should know its own name!</p>

<h2>Loops</h2>

<p>In your destructor you use the modern-style loops:</p>

<pre><code>for (auto i : KennelList)
</code></pre>

<p>But in <code>RollCall</code> you write</p>

<pre><code>for (unsigned int i = 0; i &lt; KennelList.size(); ++i)
</code></pre>

<p>Again, consistency is good. Also, the first loop form is better because it's less verbose, and thus much easier to read.</p>

<h2><code>std::endl</code></h2>

<p><code>std::endl</code> not only prints a newline, it also flushes the stream. It's much more efficient to let the system decide when to flush.</p>

<pre><code>std::cout &lt;&lt; name &lt;&lt; " says Woof" &lt;&lt; std::endl;
</code></pre>

<p>produces the same output as</p>

<pre><code>std::cout &lt;&lt; name &lt;&lt; " says Woof\n";
</code></pre>

<h2>Inheritance</h2>

<p>I know you're supposed to use "object oriented" design in this exercise, but I think if you have one object it's "object oriented", no? I like to avoid inheritance where I can, because I usually find the resulting code simpler to read and to maintain, and it tends to be much more efficient. For example, note how this code is much shorter:</p>

<pre><code>class Kennel {
   public:
      void AddCat(std::string name) {
         kennelList_.emplace_back(Species::Cat, std::move(name));
      }
      void AddDog(std::string const&amp; name) {
         kennelList_.emplace_back(Species::Dog, std::move(name));
      }
      void RollCall() {
         for (auto animal : kennelList_) {
            std::cout &lt;&lt; animal.name;
            switch (animal.species) {
               case Species::Dog:
                  std::cout &lt;&lt;  " says Woof\n";
                  break;
               case Species::Cat:
                  std::cout &lt;&lt;  " says Meow\n";
                  break;
            }
         }
      }
   private:
      enum class Species { Dog, Cat };
      struct Animal {
         Species species;
         std::string name;
         Animal(Species s, std::string n) 
            : species(s), name(std::move(n)) {}
      };
      std::vector &lt;Animal&gt; kennelList_;
};
</code></pre>

<p>Besides simpler code, it is also more efficient. Not that it matters at all in this application, but I like to think about efficiency. Feel free to skip the rest of this section, you're just starting out, but maybe you find this interesting.</p>

<p>One of the most important concepts in modern hardware is data locality. Data that is close together is faster to process because it plays better with the cache. The other important concept is branch prediction. Modern hardware tries to predict what the outcome of a conditional statement is, and will start executing that code even if it hasn't done the computations yet that the condition depends on. If it fails to predict correctly, stuff gets thrown out and it starts to process the correct branch. If it can predict well, <code>if</code> statements don't delay things all that much. Otherwise, it's good to prevent <code>if</code>s.</p>

<p>Note what happens when processing the elements of a <code>std::vector&lt;Kennel*&gt;</code>: the pointers themselves are contiguous in memory, it's easy to get them. But they point at things allocated independently, and therefore possibly not contiguous. The <code>RollCall</code> function must fetch these objects (cache is ineffective here), get their virtual function table pointer, look up the address for the <code>makeSound</code> method, then call the method (branch prediction is not applicable, because the CPU is literally waiting for a pointer that points at the code to be executed).</p>

<p>Compare this to what happens in the simpler code above: the <code>Animal</code> objects are all contiguous in memory (because we hold the items directly). The <code>RollCall</code> method loops over these, and one of two code branches is executed depending on a value in it. The cache and branch prediction can do their thing here.</p>

<p>Though, since what is being done inside the loop is writing to <code>stdout</code>, all of the above is way fast in comparison, and the efficiency matters little here.</p>
    </div>