<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Few typical problems:</p>

<ul>
<li><p><code>if (comparator.compare(from[i], from[k]) &lt; 0)</code> causes merge sort to lose stability. If the elements compare equal, the value from the right subarray is merged first.</p></li>
<li><p>Insertion sort implementation is suboptimal: at each iteration of</p>

<pre><code>    while (i &gt;= lower &amp;&amp; comparator.compare(key, arr[i]) &lt; 0) {
</code></pre>

<p><em>two</em> conditions are tested. It is possible to test only <em>one</em>. In pseudocode:</p>

<pre><code>    if key &lt;= array[lower]
        // Don't bother to compare values. We are guaranteed
        // that everything is not less than the key. Just shift.
        while i &gt;= lower
            arr[i + 1] = arr[i--]
    else
        // Don't bother to check indices. We are guaranteed
        // to not fall off: the first element is less than the key,
        // and naturally guard the insertion.
        while key &lt; arr[i]
            arr[i + 1] = arr[i--]
    arr[i + 1] = key;
</code></pre>

<p>It doesn't change the quadratic nature of the insertion, but improves the bottomline. After all, not everything is about big-oh. In the rare cases we resort to insertion sort, this may give a crucial performance boost.</p></li>
<li><p>Quick sort implementation is equally suboptimal. Standard ways to improve performance are</p>

<ul>
<li><p>Do not recur into small partitions; the call becomes too expensive. Define a threshold, say <code>k</code>, and if the partition is smaller than <code>k</code> return immediately. Once the initial invocation of <code>internalSort</code> returns, run an insertion sort. It will complete in <span class="math-container">\$O(nk)\$</span> (do you see why?). BTW, it <em>is</em> one of the rare occasions where resorting to insertion sort is beneficial.</p></li>
<li><p>Eliminate the tail recursive call. Java doesn't do tail recursion elimination, and I am sure Kotlin doesn't either. Keep in mind that you want to recur into a <em>smaller</em> partition, and handle the larger one in the loop.</p></li>
<li><p>I am not sure that the random pivot selection strategy is sound.</p></li>
</ul></li>
<li><p>I don't see the benefits of <code>enum class Complexity</code>.</p></li>
</ul>
    </div>