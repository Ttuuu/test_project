<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2><code>lineHandler</code></h2>

<p>Prefer <code>const</code> over <code>let</code> when a variable gets assigned only once. </p>

<pre><code>function lineHandlerOP(line) {
    const id = Number(line.slice(0, 4));
    const index = Number(line.slice(8, 10));
    const maxIndex = Number(line.slice(12, 14));
    const msg = line.slice(16, line.length);
    return [id, index, maxIndex, msg];
}
</code></pre>

<p>Your implementation is very strict. The examples behind the link only show data that fits your format, but what about <code>id</code> 1, would it be formatted as <code>'   1'</code> or <code>'0001'</code>? Or what if additional white space is added between the data?</p>

<blockquote>
<pre><code>const line = "6220    1   10  Because he's the hero Gotham deserves,";
// [6220, 1, 10,  "Because he's the hero Gotham deserves,"]
</code></pre>
</blockquote>

<p>If the format changes ever so slightly, results will no longer match.</p>

<blockquote>
<pre><code>const line = "6220     1   10  Because he's the hero Gotham deserves,";
// [6220, 1, 1,  "Because he's the hero Gotham deserves,"]
</code></pre>
</blockquote>

<hr>

<h2>Proposed refactoring (initial attempt)</h2>

<p>First I figured why not use a <code>string.split</code> with <code>limit</code>?</p>

<pre><code>function lineHandler(line) {
    return line.split(/\s+/, 4).map(
      (currentValue, index) =&gt; index &gt; 2 
        ? currentValue : Number(currentValue));
}
</code></pre>

<p>Unfortunately, in Javascript the remainder is not added to the last element.</p>

<pre><code> const line = "6220    1   10  Because he's the hero Gotham deserves,";
 // [6220, 1, 10,  "Because"]
</code></pre>

<hr>

<h2>Proposed refactoring (using a regex)</h2>

<p>Either we need to roll out our own <code>split</code> method that puts the remainder in the last element or we could use a regex. The regex approach could be written as:</p>

<pre><code>function lineHandler(line) {
    const regexp = /(?&lt;id&gt;\d+)\s*(?&lt;index&gt;\d+)\s*(?&lt;maxIndex&gt;\d+)\s*(?&lt;msg&gt;.+)/
    const result = regexp.exec(line);
    const id = Number(result.groups.id);
    const index = Number(result.groups.index);
    const maxIndex = Number(result.groups.maxIndex);
    const msg = result.groups.msg;
    return [id, index, maxIndex, msg];
}
</code></pre>

<p>It's a bit more code, but a lot more resilient to changes in the format.</p>

<pre><code> const line = "6220    1   10  Because he's the hero Gotham deserves,";
 // [6220, 1, 10,  "Because he's the hero Gotham deserves,"]

 const line = "6220    1         10  Because he's the hero Gotham deserves,";
 // [6220, 1, 10,  "Because he's the hero Gotham deserves,"]
</code></pre>
    </div>