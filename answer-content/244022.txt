<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>ctor</strong></p>
<p>Neither <code>key.Length</code> nor <code>iv.Length</code> can be smaller than <code>0</code> you only need to check if it is equal to <code>0</code>. But for me as a user of that class it would look strange to receive an <code>ArgumentNullException</code> if I pass e.g a key with Length == 0. I would expect an <code>ArgumentOutOfRangeException</code>.</p>
<p>Omitting braces althougth they might be optional can lead to hidden and therfor hard to find bugs.</p>
<p><strong>Encrypt()</strong></p>
<ul>
<li><p>The default <a href="https://docs.microsoft.com/en-us/dotnet/api/system.security.cryptography.rijndaelmanaged.mode?view=netcore-3.1#System_Security_Cryptography_RijndaelManaged_Mode" rel="nofollow noreferrer">Mode</a> of <code>RijndaelManaged</code> is already <code>CipherMode.CBC</code> so there is no need to set it again.</p>
</li>
<li><p>By returning out of the most inner <code>using</code> you can remove <code>byte[] encrypted</code>.</p>
</li>
<li><p>By stacking the <code>using</code>'s you save some levels of indentation.</p>
</li>
<li><p>You can use the parameterless <code>CreateEncryptor()</code> method because you already set the <code>Key</code> and <code>IV</code>.</p>
</li>
<li><p>As the method is <code>public</code> you should validate its parameter.</p>
</li>
</ul>
<p><strong>Decrypt()</strong></p>
<ul>
<li><p>The default <a href="https://docs.microsoft.com/en-us/dotnet/api/system.security.cryptography.rijndaelmanaged.mode?view=netcore-3.1#System_Security_Cryptography_RijndaelManaged_Mode" rel="nofollow noreferrer">Mode</a> of <code>RijndaelManaged</code> is already <code>CipherMode.CBC</code> so there is no need to set it again.</p>
</li>
<li><p>By returning out of the most inner <code>using</code> you can remove <code>byte[] decrypted</code>.</p>
</li>
<li><p>By stacking the <code>using</code>'s you save some levels of indentation.</p>
</li>
<li><p>You can use the parameterless <code>CreateDecryptor()</code> method because you already set the <code>Key</code> and <code>IV</code>.</p>
</li>
<li><p>You shouldn't mix styles. In the <code>using</code>'s you sometimes use the concrete type and sometimes you use <code>var</code>.</p>
</li>
</ul>
<p><strong>General</strong></p>
<p>Naming things in a good way is hard. Mostly it is sufficient and just more readable to just use a classname in <code>camelCase</code> casing. If you stumble in a few months over the variable <code>rijAlg</code> you will need to ask yourself what it stands for. By naming it <code>rijndaelManaged</code> you will see at first glance what it is about.<br>
Another example of "bad"  naming is in <code>Encrypt()</code> you name the MemoryStream <code>msEncrypt</code> but in <code>Decrypt()</code> you name it <code>ms</code> the same is true for <code>csEncrypt</code> vs <code>cryptoStream</code>.</p>
<p>Implementing the mentioned points leads to</p>
<pre><code>public class AesGenericEncryptionService
{
    private readonly byte[] m_Key;
    private readonly byte[] m_IV;

    public AesGenericEncryptionService(byte[] key, byte[] iv)
    {
        if (key == null)
        {
            throw new ArgumentNullException(nameof(key));
        }
        else if (key.Length == 0)
        {
            throw new ArgumentOutOfRangeException(nameof(key));
        }

        if (iv == null || iv.Length &lt;= 0)
        {
            throw new ArgumentNullException(nameof(iv));
        }
        else if (iv.Length == 0)
        {
            throw new ArgumentOutOfRangeException(nameof(iv));
        }

        m_Key = key;
        m_IV = iv;
    }

    public byte[] Encrypt(byte[] data)
    {
        if (data == null)
        {
            throw new ArgumentNullException(nameof(data));
        }

        using (var rijndaelManaged = new RijndaelManaged())
        {
            rijndaelManaged.KeySize = m_Key.Length * 8;
            rijndaelManaged.Key = m_Key;
            rijndaelManaged.BlockSize = m_IV.Length * 8;
            rijndaelManaged.IV = m_IV;

            using (var encryptor = rijndaelManaged.CreateEncryptor())
            using (var ms = new MemoryStream())
            using (var cryptoStream = new CryptoStream(ms, encryptor, CryptoStreamMode.Write))
            {
                cryptoStream.Write(data, 0, data.Length);
                cryptoStream.FlushFinalBlock();

                return ms.ToArray();
            }
        }
    }
    public byte[] Decrypt(byte[] cipher)
    {
        // Check arguments.
        if (cipher == null)
        {
            throw new ArgumentNullException(nameof(cipher));
        }
        else if (cipher.Length == 0)
        {
            throw new ArgumentOutOfRangeException(nameof(cipher));
        }

        using (var rijndaelManaged = new RijndaelManaged())
        {
            rijndaelManaged.KeySize = m_Key.Length * 8;
            rijndaelManaged.Key = m_Key;
            rijndaelManaged.BlockSize = m_IV.Length * 8;
            rijndaelManaged.IV = m_IV;

            using (var decryptor = rijndaelManaged.CreateDecryptor())
            using (var ms = new MemoryStream(cipher))
            using (var cryptoStream = new CryptoStream(ms, decryptor, CryptoStreamMode.Read))
            {

                var dycrypted = new byte[cipher.Length];
                var bytesRead = cryptoStream.Read(dycrypted, 0, cipher.Length);

                return dycrypted.Take(bytesRead).ToArray();
            }
        }
    }
}
</code></pre>
    </div>