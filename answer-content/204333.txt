<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>It's a very good intention but rather bad implementation. The first and foremost problem is </p>

<h1>SQL injection</h1>

<p>In a code written in 2018 it's a shame to have such a blatant one. Your <code>Database::query</code> method must support two arguments, one is an SQL statement and one is an array with data to bind. You can see an example implementation <a href="https://phpdelusions.net/pdo/pdo_wrapper#run" rel="nofollow noreferrer">here</a>. So the code would be</p>

<pre><code>    $statement = "SELECT * FROM `users` WHERE `email` = ? LIMIT 1";
    $query = Database::query($statement, [$email]);
</code></pre>

<p>Same goes for all other queries. insert for example: </p>

<pre><code>$statement = "INSERT INTO `users` (`name`, `email`, `username`, `password`) 
              VALUES (?,?,?,?)";
Database::query($statement,[$name, $email, $username, $hashedPassword]);
</code></pre>

<p>Fixing this is the most important thing that needs to be done. Other issues are less important, more on the proper OOP structure and code optimization. </p>

<h1>Validation class</h1>

<ol>
<li><code>function fieldIsEmpty($field)</code> is questionable, for two reasons:

<ul>
<li>running empty() against a variable that is deliberately set is overkill</li>
<li>a dedicated function to duplicate the empty()'s functionality? It could make sense but still I am not sure if it worth</li>
</ul></li>
<li><code>function validateEmail($email)</code> - there is a built-in function, <code>filter_var</code> with a <code>FILTER_VALIDATE_EMAIL</code> flag which should be better than a homebrewed regexp.</li>
<li><code>function redirectUser($validUser)</code> doesn't belong to validation.  What if you will need to implement a command-line utility to create a user? Where it will be supposed to redirect? It should be another class responsible to HTTP interaction.</li>
<li><code>function loginValidation</code> doesn't belong to validation class either. It does validate a user, so it should belong to either a User class or a UserValidation class, which may inherit from the Validation class. </li>
<li>Same goes for usernameExists() and emailExists()</li>
<li><p>Also, loginValidation() is too verbose and making way too much SQL queries. The followed code should be enough (although still doing one extra query)</p>

<pre><code>public static function loginValidation($usernameOrEmail, $password)
{
    $user = UsersTable::getUserByEmail($usernameOrEmail);
    if (!$user)
        $user = UsersTable::getUserByUsername($usernameOrEmail);
    }
    return ($user &amp;&amp; password_verify($password, $user['password']));
}
</code></pre>

<p>again: a function named <code>somethingValidation()</code> under no circumstances should redirect anyone anywhere. It should return a boolean value that could be used elsewhere.</p></li>
<li><p>There are a lot of unnecessary conditions. Most functions xould be rewritten to return the result right away:</p>

<pre><code>public static function usernameExists($username)
{
    return (bool)UsersTable::getUserByUsername($username));
}
public static function getUserByEmail($email)
{
    $statement = "SELECT * FROM `users` WHERE `email` = ? LIMIT 1";
    return Database::query($statement, [$email])-&gt;fetch(PDO::FETCH_ASSOC);
}
</code></pre>

<p>and so on</p></li>
</ol>

<h1>login.php</h1>

<p>Given the inmformation above, its code should be more like</p>

<pre><code>if (UserValidation::loginValidation($_POST['username-email'], $_POST['password'])) {
    HTTP::redirect("../index.php");
} else  {
    HTTP::redirect("../login-page.php");
}
</code></pre>
    </div>