<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The core code (I'd prefer the f-string if you can guarantee Python 3.6+, else the addition or <code>"{}{}{}".format(...)</code> if you need to support older Python versions) looks fine. However, you overwrite <code>text</code> each loop, but continue to use the originally provided <code>offset</code>'s, which could be very confusing since the offsets will become incorrect after the first tag insertion. The code doesn't crash, but I'd argue it doesn't "work", certainly not as I'd intuitively expect:</p>

<pre><code>In [1]: insert_tag('abc', [1, 2], ['x', 'y'])
Out[1]: 'axyyxbc'
</code></pre>

<p>I'd expect this to produce <code>'axbyc'</code>. If that output looks correct to you, ignore the rest of this answer.</p>

<p>It would be better to break the original string apart first, then perform the insertions. As is typical in Python, we want to avoid manual looping if possible, and as is typical for string generation, we want to create as few new strings as possible. I'd try something like the following:</p>

<pre><code>In [2]: def insert_tags(text: str, offsets: [int], tags: [str]):
   ...:     offsets = [0] + list(offsets)
   ...:     chunks = [(text[prev_offset:cur_offset], tag) for prev_offset, cur_offset, tag in zip(offsets[:-1], offset
   ...: s[1:], tags)]
   ...:     chunks.append([text[offsets[-1]:]])
   ...:     return ''.join(piece for chunk_texts in chunks for piece in chunk_texts)


In [3]: insert_tags('abc', [1, 2], ['x', 'y'])
Out[3]: 'axbyc'
</code></pre>

<p>Other stylistic considerations:</p>

<ul>
<li><p>Your function supports the insertion of multiple tags, so it should probably be called "insert_tags" (plural) for clarity.</p></li>
<li><p>Type annotation are generally good (though recall that they lock you in to newer versions of Python 3.X), but getting them right can be a nuisance. E.g., in this case I'd suggest using <code>Sequence</code> instead of <code>List</code>, since you really just need to be able to loop on the offsets and tags (e.g., they could also be tuples, sets, or even dicts with interesting keys). I also find them to often be more clutter than useful, so consider if adding type annotations really makes this code clearer, or if something simpler, like a succinct docstring, might be more helpful.</p></li>
</ul>
    </div>