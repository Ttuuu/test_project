<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>After a few months of usage, I'm inclined to think that while this method does work and probably will be best investment for more common scenario where you want to set up an automated build process on a dedicated server, it is a poor fit for our specific scenario of making it easy to build anywhere on anyone's machine with minimum changes. Here's few reasons:</p>

<p><strong>1) Visual Studio and PowerShell actually are not integrated.</strong></p>

<p>At the first glance, it appears that there's a high level of integration -- <code>Package Manager Console</code> is in fact a PowerShell console, right? However, in practice, we have no control over the powershell's version. Some may be stuck due to corporate policy or other reasons with PowerShell 2.0, and therefore cannot leverage the package management feature that exists in PowerShell 3.0/4.0/5.0.</p>

<p>Then there's the execution policy. While that can be worked around, it is yet another hinderance.</p>

<p><strong>2) Poor error reporting</strong></p>

<p>Because the PowerShell is running the show, if there's been an error, all Visual Studio ends up showing is a " exited with a code -1" in the <code>Error List</code> with no details. One'd have to scour through the debug output to locate the actual error that caused the script to fail. That does not make it easy to diagnose and resolve errors from the user's POV.</p>

<p><strong>3) Double-double quoting</strong></p>

<p>Because the command to execute script goes through the <code>cmd.exe</code>, it necessitates invoking the PowerShell, then passing in the actual command. That makes for more complicated setup as you must quote/escape for both <code>cmd.exe</code> and PowerShell. </p>

<p><strong>4) Why mix code?</strong></p>

<p>We have the script invoking some C# code in an assembly that's just built. But if we're writing C#... why not do it all in C#? In fact creating a custom build task is not that hard to do. It boils down to the 3 general steps:</p>

<p>1) Create a C# class that derives from MSBuild's <code>ITask</code> interface</p>

<p>2) Add a <code>UsingTask</code> XML element to the csproj that points to the assembly containing the class.</p>

<p>3) Add the task (perhaps within a <code>Target</code> for example)</p>

<p>Additionally, this offers strong-typing, even in the csproj format as Visual Studio is able to see the properties and provide intellisense support for constructing the custom task node. </p>

<p><strong>5) Temptation to write quick'n'dirty code</strong></p>

<p>This is more reflective of the programmer than the language. It is possible to write clean code in PowerShell bue due to the nature of PowerShell, it's also too easy to write a single god function with global state, etc. etc. Thus, it takes more discipline to write clean code in PowerShell. This also kind of runs contrary to the premise that you should write in PowerShell because it's quick to do what you need with minimum effort. We have encountered and had to fix bugs resulting from global namespace pollution of re-used variables. </p>

<p>So in short - PowerShell scripting to support custom build actions can work but requires too much work and special-casing across different environments. Setting a custom build task ensures that it will run in same version of Visual Studio that the solution itself requires, so there is no additional dependencies that must be satisfied in order for the build task to run. </p>
    </div>