<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Bloom Filters</h2>

<p>I suggest a new data structure, specifically a <a href="https://en.wikipedia.org/wiki/Bloom_filter" rel="nofollow noreferrer">Bloom Filter</a>.  A bloom filter is a boolean array of length <em>m</em>.  You will also need <em>k</em> different hashing algorithms (more on <em>m</em> and <em>k</em> in a moment). Each hash should accept complete word and return a number 0 through <em>m</em>.</p>

<p>A bloom filter is a big hashing data structure that returns one of two results when checking if an item is in the hash:
1) The item is definitely not in the data structure
2) The item is maybe in the data structure</p>

<p>To use the bloom filter, you will load it with every word in your list.  Specifically, for every word, load the first two letters, then first three, then so on, until the whole word is loaded.  I like the idea of using a period to mark the end of the word, so do that too.  For example, for the word 'cart', you would load your filter with ['ca', car', 'cart']. </p>

<p>Then, on the boggle array, you can do an exhaustive DFS search fromevery starting position. if the letter combination (with or without period) is in the list, then you keep branching and searching.  If the combination isn't in the list, you choose a different path, etc.</p>

<h3>Simple concrete example</h3>

<p>Here is a simple example of a bloom filter being used.  Let's set <em>m=100</em> (array of 100 booleans, initialized to true) and <em>k=2</em> (use two different hashing algorithms).</p>

<p>When hashing the word 'cat', hash1 might return 7 and hash2 might return 36, so you set indexes 7 and 36 to false.  When hashing the word 'dog', hash1 might return 7 and hash2 might return 70, so those indices are set to false.  Next, we check to see if 'fish' is in the array.  Hash1 returns 80 and hash2 returns 7.  Because all the indices are not false, we know that 'fish' is definitely not in the array.  Finally, we check if 'bird' is in the array.  Hash1 returns 70 and Hash2 returns 7.  'Bird' might be in the array and we will have to check the actual wordlist to confirm.</p>

<h3>Some notes</h3>

<p>1) You should be able to search using only the bloom filter until you are checking for a complete word (For example when checking for 'car.', and not checking 'car' as a substring of 'cart.' or 'carriage.').  Otherwise if the bloom filter says it's probably in the list, just assume it's true.<br>
2) Depending on how thorough your edge cases are, it may be possible to occasionally miss a possible word depending on the hash algoirthms chosen, size of filter, etc.  In general, I would say that while you are not 100% guaranteed to find the highest scoring word, you will definitely find a high scoring word.
3) The bloom filter here is chosen to reduce the memory space of the search.  The running time may very well be longer than the trie structure.
4) When confirming a word exist in your word list, you should, of course, use a binary search.</p>

<h3>Choosing <em>m</em> and <em>k</em></h3>

<p>There is some math involved in choosing <em>m</em> and <em>k</em>.  I'll spare you the finer details and suggest you look at <a href="https://en.wikipedia.org/wiki/Bloom_filter#Optimal_number_of_hash_functions" rel="nofollow noreferrer">wiki section about choosing optimal sizes</a>.</p>
    </div>