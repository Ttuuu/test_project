<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I suppose that a little optimization could be done by changing the way the substrings are extracted from the main string: the iterations should start from the original string itself and then continue by subtracting characters.</p>

<p>In this way the first time <code>isPalindrome()</code> returns <code>true</code>, the palindrome is the longest one.</p>

<p>Here is a little edit to your <code>longestPalindrome</code> function:</p>

<pre><code>int longestPalindrome(std::string&amp; str, std::string&amp; palindromeStr)
{
    for (int len = str.length(); len &gt; 1; len--)  // One-char strings can't be considered as palindromes...
    {
        for (int j = 0; j &lt;= str.length() - len; j++)
        {
            std::string sub = str.substr(j, j + len);
            if (isPalindrome(sub))
            {
                palindromeStr = sub;
                return len;
            }
        }
    }
    return 0; // It is not a palindrome...
}
</code></pre>
    </div>