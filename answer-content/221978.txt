<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'm not an expert in c++, so I will focus mostly on the correctness of your implementation w.r.t. the algorithm as described in the book.</p>

<h2>Numerical Robustness</h2>

<p>Often, the main challenge in implementing geometric algorithms is the fact we cannot work with the real numbers and therefore implementing geometric primitives (is this point to the left of a line, find the intersection of two lines) is tricky. There are multiple ways to implement them, and combinations of them can be used as well: </p>

<ul>
<li>Floating point arithmetic, which is fast and has native language support (<code>double</code>), but imprecise. </li>
<li>Fraction arithmetic, which is precise, but slow and often has no native language support. You also have to be very careful to avoid integer overflow (or use arbitrary precision integer arithmetic such as Java's <code>BigInteger</code>. I'm not aware of any comparable implementation in c++, however)</li>
<li>Interval arithmetic. Is precise and relatively fast in the 'easy' cases, defers to exact arithmetic in the 'hard' cases. Doing this effectively, however, relies on the intricacies of the floating point standard and often some calculation of the error propagation within . </li>
</ul>

<p>In general, numerical robustness is a hard problem to deal with efficiently. (<a href="https://members.loria.fr/Monique.Teillaud/CGAL/robustness.pdf" rel="nofollow noreferrer">These slides</a> on some considerations of these issues within the CGAL library are nice to give an idea of the complexity involved) </p>

<p>You should decide on which approach to take depending on the purpose of your implementation. If your main purpose is to learn by yourselves, you might get away with using <code>double</code> (properly!) in the instances you test it on. If you are getting issues with the precision, consider using fraction arithmetic. If you want to use this algorithm in production, don't. Instead, use the naive O(n^2) line segment algorithm or use <a href="https://doc.cgal.org/latest/Surface_sweep_2/index.html" rel="nofollow noreferrer">CGAL</a>. </p>

<p>For the following, I will just assume that this implementation is supposed to be only educational.</p>

<h2>Implementing the geometric primitives</h2>

<p>This is not in the class you posted, but it is important to do this correctly, so I will mention this anyway. I will first make some remarks on your current approach.</p>

<p>In <a href="https://github.com/lukkio88/ComputationalGeometry/blob/master/Point/segment.cpp" rel="nofollow noreferrer"><code>segment.cpp</code></a>: </p>

<pre><code>return (twiceArea(c, d, a)*twiceArea(c, d, b) &lt;= 0.0) &amp;&amp; (twiceArea(a, b, c)*twiceArea(a, b, d) &lt;= 0.0);
</code></pre>

<p>You cannot rely on equality holding when the numbers are equal. Instead, you should consider everthing that is less than a small value as equal to zero (as you have done correctly in <code>ComparePts</code>):</p>

<pre><code>double eps = 0.0001;
return (twiceArea(c, d, a)*twiceArea(c, d, b) &lt; eps) &amp;&amp; (twiceArea(a, b, c)*twiceArea(a, b, d) &lt; eps);
</code></pre>

<p>But be aware that this will give an incorrect answer if there are true values in between <code>0</code> and <code>eps</code> or if the error in the calculation of <code>twiceArea(c, d, a)*twiceArea(c, d, b)</code> is larger than <code>eps</code>. </p>

<p>Also, <code>twiceArea</code> is not a good name. Areas should be positive, and it also isn't clear of <em>what</em> you are computing the area. Additionally, you only need the sign of this operation. I suggest you replace <code>twiceArea</code> by a function <code>orientation</code> that returns its sign, where you should set the sign to 0 if the value is less than some small constant and otherwise return the sign properly (1 if positive, -1 if negative)</p>

<p>To compute whether two segments intersect, I suggest the following approach: </p>

<p>Using <code>orientation</code>, you can easily test whether a segment intersects a line: this is the case if an only if one of the endpoints of the segment lies on the line or both endpoints lie on different sides of the line. With that, you can test whether two line segments intersect: test whether the first segment intersects the line extended from the second segment and the vice versa.</p>

<p>The advantage of this approach is that you replace the test <code>sign(a * b) &lt; 0</code> by <code>sign(a) != sign(b)</code> and avoid a floating point operation. It also places all the imprecision 'inside' the smallest function possible, which makes it easier to adapt it to more precise approaches or different ways of dealing with the imprecision.</p>

<hr>

<p>As for <code>Segment::intersect</code>, I would instead implement a function to compute the intersection of lines extending from the segments. This means that you drop the check for checking whether the segments intersect, although you probably want to test for the case where the lines are parallel and do not intersect. One reason to do this is that you can then use this function to compute the intersection point of a segment with the sweepline, it it intersects the sweepline. So, you can replace <code>getX</code> with a call to the the line segment intersection function.</p>

<h2>Segment comparison</h2>

<p>With these low-level implementation issues out of the way, let's look at the rest of the code. </p>

<p>In the function <code>SegmentComparator</code>:</p>

<pre><code>if (xs != xr)
    return xs &lt; xr;
</code></pre>

<p>Two direct comparison of floats, do something like</p>

<pre><code>if (xs - xr &lt; ths)
   return 1
if (xs - xr &gt; ths)
   return 0
</code></pre>

<p>instead. (The <code>else</code> is unnecessary.)</p>

<pre><code>    Point u = (sIsHorizontal) ?
        normalize(s.q - s.p):
        normalize(getUp(s) - getDown(s));

    Point v = (rIsHorizontal) ?
        normalize(r.q - r.p):
        normalize(getUp(r) - getDown(r));

    Point ref{ 1.0,0.0 };

    if (*above) {
        return u * ref &lt; v*ref;
    }
    else {
        return u * ref &gt; v*ref;
    }
</code></pre>

<p>It seems you are comparing the inverse of the slope here. I would not normalize here and compute the inverse slope normally (<code>(s.q.y-s.p.y)/(s.p.x-s.q-x)</code>) which avoids having to determine which part is 'up', or at least not take the square root, that is not needed it makes it impossible to use fractions. (you can simply compare the squared Euclidean norm)</p>

<p>You are using <code>above</code> to switch the order of segments in the status at their intersection point. This is ok, but you have to be careful when you insert two segments with the same upper endpoint (when you put all eventpoints except the intersections in the queue). In that case, the <code>above</code> flag should be false. (it is not clear to me what the initial value of <code>above</code> is)</p>

<h2>Event handling</h2>

<p>Set and Map use a red-black tree as the underlying data-structure, so they have the required logarithmic time for insertion, removal and lookup. So far so good. </p>

<pre><code>    std::vector&lt;Segment&gt; U = queue.begin()-&gt;second;
</code></pre>

<p>This is incorrect, p does not have to be an upper point of all segments stored at the event point, the segments can either have this point as an intersection point or as lower point. You can check at this point to which part the points belong, but I'd recommend to store the type of point when inserting the event, as it is always known at that point. This also helps with visualizing your event queue for debugging.</p>

<pre><code>static bool findEvent(const Segment&amp; l, const Segment&amp; r, Point&amp; p) {
    return l.intersect(r, p);
}
</code></pre>

<p>It is not enough to check whether the segments intersect, you have to verify that the intersection is not in the event queue, or any point that has been in the event queue. To do this, you have to check that the intersection point p is earlier than the current event point with <code>ComparePts</code>.</p>

<p>I'm not sure if there are more errors here, but I suggest you implement the simple case where an event-point can only be either 1. the top of a segment 2. the bottom of a segment or 3. the intersection of a pair of segments. I would only extend this to the general case if I test that that works.</p>

<h2>General recommendations</h2>

<p>Implementing geometric algorithms properly is hard, so while it might be nice to try and implement the simpler ones such as the convex hull algorithms, you should keep in mind that implementing geometric algorithms is a completely different topic than what this textbook is trying to teach you.</p>

<p>Also, it helps to make some simplifying assumptions and test your implementation under those conditions first. Assuming that the points are in general position or that no points have the same y-coordinate simplifies the problem. (but be careful that this has to be the case for the intersection points as well)</p>
    </div>