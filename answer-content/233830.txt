<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Without a description of the KMP algorithm I can't begin to check where the code might be going wrong.</p>

<h2>Make Sure to Fix all Warnings</h2>

<p>When you are writing and compiling your code you might want to try to get all the warning messages as well as the compiler errors. Currently you have a possible bug in <code>string load_file()</code>, the compiler warning message for this is <code>'load_file': not all control paths return a value</code>. The <code>return text;</code> statement is inside the <code>for</code> loop so if the loop exits after 6 iterations the function doesn't return a value. Another possible bug is that since the <code>return text;</code> statement is in the <code>for</code> loop and it is not nested within an if statement the <code>for</code> loop only performs one iteration.</p>

<p>A second problem that my compiler caught is that the declaration of <code>main()</code> is incorrect. The function <code>main()</code> is supposed to return an integer value to the operating system that indicates the status of the program, therefore the declaration should be:</p>

<pre><code>#include &lt;cstdlib&gt;

int main()
{
    ...
    return EXIT_SUCCESS;
}
</code></pre>

<p><em>Note if the program fails <a href="https://en.cppreference.com/w/cpp/utility/program/EXIT_status" rel="nofollow noreferrer">EXIT_FAILURE</a> can be returned from <code>main()</code> instead.</em>  </p>

<h2>Avoid <code>using namespace std</code></h2>

<p>If you are coding professionally you probably should get out of the habit of using the <code>using namespace std;</code> statement. The code will more clearly define where <code>cout</code> and other identifiers are coming from (<code>std::cin</code>, <code>std::cout</code>). As you start using namespaces in your code it is better to identify where each function comes from because there may be function name collisions from different namespaces. The identifier<code>cout</code> you may override within your own classes, and you may override the operator <code>&lt;&lt;</code> in your own classes as well. This <a href="https://stackoverflow.com/questions/1452721/why-is-using-namespace-std-considered-bad-practice">stack overflow question</a> discusses this in more detail.</p>

<h2>Need More Error Checking of User Input</h2>

<p>The code performs error checking in <code>main()</code> for if the user wants to continue or not, but the code does not check other inputs such as checking the input here</p>

<pre><code>        std::cin &gt;&gt; pattern;
</code></pre>

<p>What if the user just hits the enter key, or they enter an invalid patter?</p>

<h2>Complexity</h2>

<p>The functions <code>main()</code>, <code>void boyer_moore(string text, string pattern, int textlength, int patlength)</code> and <code>void kmp(string text, string pattern, int textlength, int patlength)</code> are too complex (do too much). Each of these functions should be simplified by breaking them up into smaller functions that do exactly one thing. There are several reasons for this, one is that it is easier to write, debug, read and maintain smaller functions. A second reason is that some functions can be reused. When I was learning how to design programs in computer science they taught us to keep breaking problems into smaller and smaller pieces until each piece was easy to solve. A third benefit that might prove useful is that functions can be profiled so that you can see where the program is spending the most amount of time.</p>

<p>There is also a programming principle called the Single Responsibility Principle that applies here. The <a href="https://en.wikipedia.org/wiki/Single_responsibility_principle" rel="nofollow noreferrer">Single Responsibility Principle</a> states:</p>

<blockquote>
  <p>that every module, class, or function should have responsibility over a single part of the functionality provided by the software, and that responsibility should be entirely encapsulated by that module, class or function.</p>
</blockquote>

<p>Some examples of functions that should exist to simplify the program:</p>

<p>Called from main:</p>

<pre><code>bool executeAgain()
{
    bool end = false;
    bool valid = false;
    do  {
        int userend;
        cin &gt;&gt; userend;
        if ((int)userend == 1) {
            valid = true;
            end = true;
        }
        else if ((int)userend == 0) {
            valid = true;
        }
        else {
            "Please enter a valid number: ";
        }
    } while (valid == false);

    return end;
}
</code></pre>

<p>Checking user input on <code>pattern</code>.</p>

<p>Starting the timer and stopping the timer. (you might want to look at <a href="https://en.wikipedia.org/wiki/Don%27t_repeat_yourself" rel="nofollow noreferrer">DRY code</a> for this as well because this code is repeated in multiple places)</p>

<p>In KMP each one of the loops looks complex enough to be it's own function, that is probably true in <code>boyer_moore</code> as well. By breaking up KMP you might spot the problem yourself. </p>

<h2>Prefer '\n` Over std::endl</h2>

<p>When you are worried about performance it is better to output a new line rather than std::endl. std::endl flushes the output buffer and that means that it is calling a system function. Lines such as </p>

<pre><code>    cout &lt;&lt; endl &lt;&lt; endl &lt;&lt; endl &lt;&lt; "KMP: time taken: " &lt;&lt; time_taken &lt;&lt; "ms" &lt;&lt; endl &lt;&lt; endl &lt;&lt; endl;
</code></pre>

<p>can easily be rewritten as std::cout &lt;&lt; "\n\n\nKMP: time taken: &lt;&lt; time_taken &lt;&lt; "ms\n\n\n"; and it will execute faster.</p>

<h2>Prefer std::array Over C Style Arrays</h2>

<p>C++ has a lot of container classes that are very useful, the code already uses <code>std::vector&lt;TYPE&gt;</code> but there is also <code>std::array&lt;TYPE, COUNT&gt;</code>, the benefits of using this container type is that it works similar to the old C style array, but it also can use iterators to index through the array and you can use a ranged for loop rather than hard coding for loops based on size.</p>

<p>It is also better to use <code>constexpr</code> to define symbolic constants rather than <code>#define</code> which is a C programming construct rather than a C++ programming construct.</p>
    </div>