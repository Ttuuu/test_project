<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>A couple of issues:</p>

<ol>
<li><p>Your <code>compareWith(_:)</code> will not compile, as you have a path of execution where you are not returning any value. </p></li>
<li><p>We’ve also moved away from method names with the trailing preposition, and might name it <code>compare(with:)</code> instead. Or because you're not considering the name associated with these pairs of numbers, I might call it <code>compareValues(with:)</code> to make it unambiguous that we’re ignoring the name associated with this pair, and only comparing their respective values.</p></li>
<li><p>I might suggest giving this structure a more meaningful name. In the absence of more information, I'll just call it a <code>NamedPair</code>.</p>

<pre><code>struct NamedPair {
    let name: String
    let from: Int
    let to: Int
}
</code></pre>

<p>That having been said, I'd probably rename <code>from</code> and <code>to</code> as well because that suggests some directionality which may or may not be valid. (I also wouldn't generally use a preposition, alone, for a property name, probably leaning towards <code>fromValue</code> and <code>toValue</code> at the very least.) But as you haven't shared the functional intent for this structure, I've left those property names alone.</p></li>
<li><p>I might be inclined to use tuples for the equality state and separate out the “reversed” scenario into its own test, to make the intent absolutely explicit and clear.</p>

<p>I also think you're missing the “half equal” scenario where <code>self.to == other.from</code>.</p>

<p>Anyway, pulling that together, perhaps something:</p>

<pre><code>extension NamedPair {
    enum CompareResult {
       case equal
       case halfEqual
       case notEqual
    }

    func compareValues(with other: NamedPair) -&gt; CompareResult {
        if (from, to) == (other.from, other.to) {
            return .equal
        } else if (from, to) == (other.to, other.from) {
            return .equal
        } else if from == other.from || from == other.to || to == other.to || to == other.from {
            return .halfEqual
        } else {
            return .notEqual
        }
    }
}
</code></pre></li>
<li><p>While I've called this <code>NamedPair</code>, it strikes me that this might be, more generally, a <code>NamedSet</code>, where you might just want to know whether the sets match, intersect, or are disjoint:</p>

<pre><code>struct NamedSet {
    let name: String
    let set: Set&lt;Int&gt;
}

extension NamedSet {
    enum CompareResult {
       case equal
       case intersect
       case disjoint
    }

    func compareValues(with other: NamedSet) -&gt; CompareResult {
        if set == other.set {
            return .equal 
        } else if set.isDisjoint(with: other.set) {
            return .disjoint
        } else {
            return .intersect
        }
    }
}
</code></pre>

<p>Not only does this handle the generalized scenario, but it offloads the equality and intersection logic to the existing <code>Set</code> type.</p></li>
<li><p>For what it’s worth, these are both seem like good candidates to be generics:</p>

<pre><code>struct NamedPair&lt;T: Comparable&gt; {
    let name: String
    let from: T
    let to: T
}

extension NamedPair {
    enum CompareResult {
       case equal
       case halfEqual
       case notEqual
    }

    func compareValues(with other: NamedPair) -&gt; CompareResult {
        if (from, to) == (other.from, other.to) {
            return .equal
        } else if (from, to) == (other.to, other.from) {
            return .equal
        } else if from == other.from || from == other.to || to == other.to || to == other.from {
            return .halfEqual
        } else {
            return .notEqual
        }
    }
}
</code></pre>

<p>And</p>

<pre><code>struct NamedSet&lt;T: Hashable&gt; {
    let name: String
    let set: Set&lt;T&gt;
}

extension NamedSet {
    enum CompareResult {
       case equal
       case intersect
       case disjoint
    }

    func compareValues(with other: NamedSet) -&gt; CompareResult {
        if set == other.set {
            return .equal 
        } else if set.isDisjoint(with: other.set) {
            return .disjoint
        } else {
            return .intersect
        }
    }
}
</code></pre></li>
</ol>
    </div>