<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Resources:</h3>
<p>You should start using <a href="http://docs.oracle.com/javase/tutorial/essential/exceptions/tryResourceClose.html" rel="noreferrer"><code>try-with-resources</code>.</a> This statment does some work for you with resources that implement <code>AutoCloseable</code>. It closes these resources for you, so you don't have to worry about file-locks and remaining database connections:</p>
<pre><code>File file = new File("C:/text.txt");
try(Scanner scanner = new Scanner(file, "utf-8")){
    //your code here ;)
}
</code></pre>
<p>You also shouldn't throw <code>Exception</code> in the main method of your program. This can be very confusing to users. Instead you main-method should handle all exceptions "gracefully" by being wrapped into a <a href="http://docs.oracle.com/javase/tutorial/essential/exceptions/try.html" rel="noreferrer">try-catch-block.</a></p>
<h3>Conditionals:</h3>
<blockquote>
<pre><code>if(!Character.isLetter(c)){
   continue;
}
</code></pre>
</blockquote>
<p>This is an early return statement for the purpose of following conditions, meaning you don't have to write <code>else if</code> in your next condition.</p>
<h3>Naming</h3>
<p><code>hashMap</code> is not a good name. The map you use is not a Hash-Map, and <code>treeMap</code> would also not explain what the map does, what it <em>contains</em>.</p>
<p>You might want to rename it to <code>characterMap</code></p>
<p>all else equal, your naming is nice and consistent, and tells exactly what the variables do. You nicely follow <code>camelCase</code>-conventions. <strong>Keep it up!</strong></p>
<h3>Summary:</h3>
<p>Your code reads nicely and is easily understandable. You follow naming conventions and have descriptive and understandable variable names. You should work on your exception handling and the use of resources.</p>
    </div>