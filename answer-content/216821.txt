<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>How could this code be optimized?</p>
</blockquote>

<p>I'm not sure if you mean optimized for performance, brevity, readability, maintainability, etc. but I will offer some suggestions below that might suffice in some of those areas.</p>

<p>Overall the function seems a bit long. There is no exact rule about what is too long but there are various conventions developers adhere to (e.g. see answers to <a href="https://softwareengineering.stackexchange.com/q/27798/244085"><em>What should be the maximum length of a function?</em> on SE SE</a>. You could break the function up into separate functions that handle an individual aspect of parsing the string and/or adding output- for example one to return the output for the time, one for the days, etc. This might also allow for better unit testing if you chose to do that. </p>

<p>I also see two different <code>return</code> statements - one for the case where <code>dayOfWeek.length === 1</code> combined with <code>dayOfWeek === "*" &amp;&amp; dayOfMonth !== "*"</code> and one at the end. It is fine to return early, but should the code also return early when the string calls for execution each minute? - i.e. the following code</p>

<blockquote>
<pre><code>if (minutes === "*") {
  cronToString =
    "Unreadable cron format. Cron will be displayed in its raw form: " +
    cronExpression;
}
</code></pre>
</blockquote>

<hr>

<p>Unless the browser requirements are such that it won't work (e.g. <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment#Browser_compatibility" rel="nofollow noreferrer">for IE</a>) you can utilize some <a href="/questions/tagged/ecmascript-6" class="post-tag" title="show questions tagged 'ecmascript-6'" rel="tag">ecmascript-6</a> features to shorten the code. For example:</p>

<blockquote>
<pre><code>var cron = cronExpression.split(" ");
var minutes = cron[0];
var hours = cron[1];
var dayOfMonth = cron[2];
var month = cron[3];
var dayOfWeek = cron[4];
</code></pre>
</blockquote>

<p>This could be simplified using <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment#Array_destructuring" rel="nofollow noreferrer">Array destructuring</a>:</p>

<pre><code>let [minutes, hours, dayOfMonth, month, dayOfWeek] = cronExpression.split(" ");
</code></pre>

<p>You could use <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const" rel="nofollow noreferrer"><code>const</code></a> instead of <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let" rel="nofollow noreferrer"><code>let</code></a> if you don't overwrite those variables (and instead add to the output string).</p>

<hr>

<p>I see a few places where the string to be returned (i.e. <code>cronToString</code>) is appended to using </p>

<blockquote>
<pre><code>cronToString = cronToString + hours + "h" + minutes + " ";
</code></pre>
</blockquote>

<p>This can be simplified using the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Expressions_and_Operators#String_operators" rel="nofollow noreferrer">shorthand concatenation operator</a> - i.e. <code>+=</code></p>

<blockquote>
<pre><code>cronToString += hours + "h" + minutes + " ";
</code></pre>
</blockquote>

<hr>

<p>I see one call to <code>parseInt()</code> - i.e. </p>

<blockquote>
<pre><code>parseInt(dayOfWeek)
</code></pre>
</blockquote>

<p>If you are going to use <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/parseInt" rel="nofollow noreferrer"><code>parseInt()</code></a>, it is wise to specify the radix using the second parameter - unless you are using a unique number system like hexidecimal, octal, etc. then specify 10 for decimal numbers. </p>

<blockquote>
  <p><strong>Always specify this parameter</strong> to eliminate reader confusion and to guarantee predictable behavior. Different implementations produce different results when a radix is not specified, usually defaulting the value to 10.<sup><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/parseInt#Parameters" rel="nofollow noreferrer">1</a></sup></p>
</blockquote>

<pre><code>parseInt(dayOfWeek, 10);
</code></pre>

<p>While it may not cause a logic error with this code due to the range of numbers checked, it is a good habit to specify that parameter.</p>

<hr>

<p>Let us talk about that <code>switch</code> statement. Bearing in mind that the code in the question doesn’t exactly use one, I am reminded of <a href="https://codereview.stackexchange.com/a/44187/120114">this stellar answer</a> where the OP was advised to use a hashmap (since that Code is java). Whenever you have a set of cases in a <code>switch</code> statement that have one line very similar to the majority of all other cases then you might want to consider creating a mapping. This can be done in JavaScript with an array, a plain old JavaScript object (A.K.A. a “<em>POJO</em>”) or a <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map" rel="nofollow noreferrer"><code>Map</code></a>. Then just check that the value used in the <code>switch</code> statement matches an index/key of the array/object/map. </p>

<p>Instead of using the <code>switch</code> statement to add the day of the week display, you could put the days of the week into an array (perhaps outside the function to avoid re-assignment whenever the function is called), and check if <code>dayOfWeek</code> matches a key in that array:</p>

<pre><code>const daysOfWeek = ['Sunday', 'Monday', 'Tuesday', 'Wedensday', 'Thursday', 'Friday', 'Saturday'];
</code></pre>

<p>Then to use it, reference the key as <code>dayOfWeek</code>:</p>

<pre><code>if (dayOfWeek &gt; -1 &amp;&amp; dayOfWeek &lt; 7) {
   dayOfWeek = "on " + daysOfWeek[dayOfWeek];
}
else {
  cronToString =
    "Unreadable cron format. Cron will be displayed in its raw form: " +
    cronExpression;
  return cronToString;
}
</code></pre>

<p>You could also consider using <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleDateString" rel="nofollow noreferrer"><code>date.toLocalDateString()</code></a> with the <code>weekday</code> option, which would allow offering localized values, but then that would involve constructing a date and calling more functions, which might not be optimal for your use case.</p>

<p>I also looked for a similar way to add the ordinal suffix but don't see anything built-in, though there are various alternatives in the answers to <a href="https://stackoverflow.com/q/13627308/1575353">this SO question</a> - some briefer (and more obfuscated) than others...</p>

<p><sup>1</sup><sub><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/parseInt#Parameters" rel="nofollow noreferrer">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/parseInt#Parameters</a></sub></p>
    </div>