<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><em>Unfortunately I don't have time to finish my answer right now, but here's what I think so far:</em></p>

<h3>Main.java</h3>

<p>If your whole program is built around reading and manipulating a single file, it's customary and useful to take the name of that file in as a parameter (i.e. read it from <code>args</code>) instead of hardcoding it. (In future versions you might replace the filename with, say, the connection information for the database.)</p>

<h3>Animal.java</h3>

<p>No real objections to the current code. This would be a good place to put a <code>Species</code> enum. (See AnimalHandler.java).</p>

<h3>UserTextInterface.java</h3>

<ul>
<li>The only reason <code>processInput()</code> returns a boolean is to break out of the one-line while-loop in <code>run()</code>, but the while-loop in <code>run()</code> literally does nothing. It doesn't even call <code>processInput()</code> more than once, since <code>processInput()</code> will never return <code>true</code>. So just give <code>processInput()</code> a <code>void</code> return type and have <code>run()</code> call it normally. It's exactly the same behavior.</li>
<li>In <code>processInput()</code>, the if-statement in the while-loop ends with an empty branch (<code>else { }</code>). This is unnecessary and should be removed.</li>
</ul>

<h3>AnimalHandler.java</h3>

<ul>
<li>A bit off-topic: this code loads all the data from your "database" (the file) into an in-program, in-memory structure (<code>fileArray</code>). This is fine for the current program, but since you say you want to use an online database in the future, I feel it's only fair to warn you that this pattern would not work well for that case. It would produce a very slow program. Ideally you would want some kind of database-interface class with useful methods like <code>findAnimal(int ID)</code>, <code>updateAnimal(Animal animal)</code>, etc., that could be then be used by an interact-with-users class.  </li>
<li><code>fileArray</code> is a bad name for your List object. Arrays and lists are not the same thing in Java, and <code>fileArray</code> sounds more like an array <em>of</em> files than an array of things <em>from</em> a file. </li>
<li>You spend a lot of time searching for animals by ID by looping through <code>fileArray</code> and checking each ID individually. This will become increasingly inefficient as the list of animals grows longer. It would be far more efficient to replace the List with a <a href="https://docs.oracle.com/javase/8/docs/api/java/util/Map.html" rel="nofollow noreferrer">Map</a>, using the IDs as the keys and the Animals as the values.</li>
<li>Since the <code>addDog()</code> and <code>addCat()</code> methods are doing pretty much the same thing, you could combine them a more generic <code>addAnimal()</code> method that takes a <code>species</code> parameter. I think that a string would be good enough at present (you can capitalize or de-capitalize the first letter as needed), but you could also create a new <code>Species</code> <a href="https://docs.oracle.com/javase/tutorial/java/javaOO/enum.html" rel="nofollow noreferrer">enum</a> with useful properties. This will make the code easier to extend if you decides to add more animal types in the future (hamsters, goldfish, parrots, etc.).

<ul>
<li>Frankly, even the enum is not ideal, since you have to recompile the code every time you want to add a new species. It would be even better if you had a proper <code>Species</code> class and were able to load the species data from an external source as well (file, database, administrator input, etc.).</li>
</ul></li>
<li>In <code>readDate()</code>, instead of building the <code>date</code> string as you go, you can wait until the end and use <code>String.format()</code> to build the string from all your integers at once. With the right format string, this will also do all the zero-padding that you're currently doing with if-statements.
<code>String date = String.format("%02d/%02d/%d", day, month, year);</code>

<ul>
<li>Actually, I'm not 100% sure that <code>dateFormatter.parse()</code> even needs the zero-padding. Need to do a little more research on that.</li>
</ul></li>
<li>A bit off-topic again: I see that you have two separate but basically-identical <code>SimpleDateFormat</code> objects based on the pattern <code>"dd/MM/yyyy"</code>, one in this file and one in <code>FileHandler</code>. I just want to emphasize that this is a <strong>good</strong> thing. <code>AnimalHandler</code> does not know how <code>FileHandler</code> handles reading dates from or writing dates to the file, and it doesn't <em>need</em> to know that. You could change the pattern for one <code>SimpleDateFormat</code> and it wouldn't matter at all to the other one. Encapsulation is good.</li>
</ul>
    </div>