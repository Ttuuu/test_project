<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong><code>size + sizeof(mem_header)</code> assumes correct alignment</strong></p>

<p>Memory management functions</p>

<blockquote>
  <p>The pointer returned if the allocation succeeds is suitably aligned so that it may be assigned to a pointer to any type of object with a fundamental alignment requirement  C11 ยง7.22.3 1</p>
</blockquote>

<p>The returned pointer from <code>_malloc()</code> needs to meet the <em>fundamental alignment requirement</em> and it is not known the <code>struct mem_header</code> meets that.  So possibly <code>sizeof(mem_header) + something_more + size</code> is needed. Then <code>(char *) heap_ptr + sizeof(mem_header)</code> will work per the C spec.  <a href="https://codereview.stackexchange.com/questions/206988/malloc-and-free-for-linux-with-system-calls/207111#comment399411_207006">@Peter Cordes</a></p>

<p>With C11, this is easy with <code>_Alignas</code> and <code>max_align_t</code> to insure <code>struct mem_header</code> is aligned well.</p>

<blockquote>
  <p>An object type imposes an alignment requirement on every object of that type: stricter alignment can be requested using the <code>_Alignas</code> keyword. ยง6.2.8 1</p>
</blockquote>

<pre><code>struct _Alignas(max_align_t) mem_header {
  size_t size;
  bool free;
  mem_header * prev;
  mem_header * next;
};
</code></pre>

<p>A pre-C11 approach.  Align for the widest base types.  The may cause super alignment.</p>

<pre><code>union my_wide_union {
  int (*foo)();
  void *v;
  double d;
  long l;
  // for C99
    long double ld;
    uintmax_t um;
    long double _Complex z; // for select C99 or later
};

union mem_header {
  union my_wide_union dummy;
  struct {
    size_t size;
    bool free;
    mem_header * prev;
    mem_header * next;
  }
};
</code></pre>

<hr>

<p><strong>Another alignment issue</strong></p>

<p>The <code>size</code> requested also needs to be a multiple of <code>sizeof(max_align_t)</code>.  Recommend</p>

<pre><code>size_t padding = size % sizeof(max_align_t);
if (padding) size += sizeof(max_align_t) - padding;
</code></pre>

<hr>

<p><strong>Prevent overflow</strong></p>

<pre><code>//if(!size)
if(size == 0 || size &gt; SIZE_MAX - sizeof(struct mem_header)) {
    return NULL;
}
</code></pre>
    </div>