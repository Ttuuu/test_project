<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li>First thing I found weird was the use of globals for the channels. This is generally a bad idea and rarely necessary.</li>
<li>Then, in <code>main()</code> there is this <code>dummy</code> channel. It seems to be used as synchronization mechanism without any actual info transported through it. However, it's unclear what the intention is. As it stands, you only make sure that the goroutines with the producers were started before the program is allowed to terminate. What is the intention?</li>
<li>Further, I wonder why you start the producers from a goroutine and not from a simple loop in <code>main()</code>. This may be required for something, but it is unclear to the casual reader of your program. That reader could be you in a few weeks when you forgot why you did that. Documenting the "why?" of your programs is the most valuable information.</li>
<li>The WaitGroup <code>wg</code>, what is that for? You have added another synchronization mechanism, but it's similarly unclear what that is used for.</li>
<li>You seed the RNG every time you retrieve a random number. That's bad, in particular since the behaviour of the seed value you use is very easily predictable. Seed it only once on program start.</li>
<li>You usually only need one channel, shared between producers and consumer. I'm not sure if your requirements imply some other synchronization or perhaps a "finished" detection. You could perhaps solve that by closing the channel or sending a signal value, without adding more parts and making things even more complex.</li>
</ul>

<p>Note: Your requirements are pretty unclear. Getting random numbers in a particular order is unlikely, but maybe that's just the example. If you provided more info what is produced and consumed, people could give you a better suggestion.</p>
    </div>