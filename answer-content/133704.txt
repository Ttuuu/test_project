<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><em>(See also comments in code)</em></p>

<p><strong>GetRefNo</strong></p>

<p>Create case-insensitive dictionaries right away as you ignore the case later anyway:</p>

<pre><code>public SubmissionHeaderDTO GetRefNo()
{
    // tell the dictionaries how to compare the keys
    var inPrms = new Dictionary&lt;string, object&gt;(StringComparer.InvariantCultureIgnoreCase)
    {
        // ...
    };


    var outPrms = new Dictionary&lt;string, object&gt;(StringComparer.InvariantCultureIgnoreCase)
    {
        // ...
    };

    var refNo = DBHelper.ExecSP(Constants.SPNames.SubmissionHeaderInsert, inPrms, outPrms);

    SubmissionHeaderDTO result = DictionaryToObject&lt;SubmissionHeaderDTO&gt;(refNo);

    return result;

}
</code></pre>

<p><strong>DictionaryToObject</strong></p>

<p>You don't need to call <code>.GetType().GetProperties()</code> over and over. You already have retrieved the properties at the beginning. It might be a real performance hit if you do it frequently. Luckily this can be easily avoided.</p>

<pre><code>private static T DictionaryToObject&lt;T&gt;(IDictionary&lt;string, object&gt; dict) where T : new()
{
    // use a meaningfull name for the instance of T
    var result = new T();

    var properties = 
        typeof(T)
        .GetProperties()
        // filter the properties hier not in the loop, it's easier to modify and understand
        .Where(p =&gt; dict.ContainsKey(p.Name));

    foreach (var property in properties)
    {       
        // you can now directly get the value for the property
        var value = dict[property.Name]

        var propretyType = Nullable.GetUnderlyingType(property.PropertyType) ?? property.PropertyType;

        var convertedValue = Convert.ChangeType(value, propretyType);

        // there's no need to GetType.GetProperties agian, just set the value
        property.SetValue(result, convertedValue)
    }

    return result;
}
</code></pre>

<p><strong>ExecuteQuery</strong></p>

<p>Your code will look nicer and simpler if you use the <code>using</code> instead of the lengthy <code>finally</code> block:</p>

<pre><code>public Dictionary&lt;string, object&gt; ExecuteQuery(
    string storedProcedure, 
    Dictionary&lt;string, object&gt; parameters,
    Dictionary&lt;string, object&gt; outParameters)
{       
    // the usings will gracefully dispose/close everything disposable
    using (var sqlConn = new SqlConnection(Configuration.DBConnection))
    {
        sqlConn.Open();

        // if this is a select I doubt you need a transaction for this
        using (var transaction = sqlConn.BeginTransaction("Results"))
        using (var sqlcmd = new SqlCommand(storedProcedure, sqlConn, transaction))
        {

            sqlcmd.CommandType = CommandType.StoredProcedure;

            // use var where possible
            foreach (var kv in parameters)
            {
                sqlcmd.Parameters.AddWithValue(kv.Key, kv.Value);
            }

            foreach (var kv in outParameters)
            {
                // no helper variables needed here
                sqlcmd
                    .Parameters
                    .AddWithValue(kv.Key, kv.Value)
                    .Direction = ParameterDirection.Output;
            }

            try
            {
                sqlcmd.ExecuteNonQuery();
                var result = GetOutputParameters(sqlcmd.Parameters);

                transaction.Commit();
                return result;
            }
            catch (Exception)
            {
                transaction.Rollback();
                throw;
            }

        }
    }
}
</code></pre>
    </div>