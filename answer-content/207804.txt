<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Keeping it simple</h1>
<p>One big problem that coders must face is complexity. Complexity is many times the actual result of wanting to simplify code readability, but often this is at the expense of functional and source simplicity.</p>
<p>Complexity propagates throughout a project. In the example of your code the view name objects <code>{name : "top"}</code> means that at all levels of the project the need to access a view by name requires the additional object property reference "name". On a large project the seamingly simple use of a named property can add dozens or more lines of source code.</p>
<p>Simplicity means looking further than just the immediate code, but how data structure, data sources, and access methods effect code complexity throughout the project.</p>
<h2>Sources of complexity</h2>
<ol>
<li><strong>Data duplication</strong></li>
</ol>
<p>You have some data duplication.</p>
<p>The array <code>idArray</code> is a duplication of the <code>blueprints</code> keys and can be computed using <code>Object.keys(bluePrints)</code> or better still use a for loop to extract both the <code>id</code> and <code>value</code> of each entry in <code>bluePrint</code>.</p>
<ol start="2">
<li><strong>Expression of the implied</strong></li>
</ol>
<p>The <code>view</code> array has objects containing just one property <code>{name : "bottom"}, ...</code> which just adds complication. Why not just have an array of view names. This will make future manipulation easier.</p>
<p>eg finding a view in array of string is</p>
<pre><code>const printHasView = (print, viewName) =&gt; print.views.includes(viewName);
</code></pre>
<p>As opposed to the more complicated search that requires an addition call stack item, associated context, and additional references.</p>
<pre><code>const printHasView = (print, viewName) =&gt; print.views.some(view =&gt; view.name === viewName);
</code></pre>
<ol start="3">
<li><strong>Indirect references</strong></li>
</ol>
<p>The property <code>colorId</code> is an indirect reference to an object in a, (I am guessing) map, mapLike, or array of colors.</p>
<p>This means that each time you need to handle the print's color you need to include code that locates the color by <code>Id</code>. You can simplify by using a direct reference to the color, you thus don't need to lookup the color by Id each time you need it. Saving functional and source complexity.</p>
<h2>Example</h2>
<p>This makes some assumptions about your project and code and is only meant as an example. How your project is structured is unknown and will affect the quality of this example.</p>
<p>An alternative blueprint filter as a function that has an argument pertaining to the filter criteria, removing view name object in favour of the simpler string, and directly referencing the colors.</p>
<pre><code>// arg views is array of strings ["top", "bottom"]
const filterPrintsByViews = (prints, ...views) =&gt; {
    const result = [];
    for (const [id, value] of Object.entries(prints)) {
        if (views.every(name =&gt; value.views.some(view =&gt; view.name === name))) {
            result.push({colorRef: colors[id], views: value.views.map(view =&gt; view.name)});
        }
    }
    return result;
}

// Data sources ============================================
// assuming that id and value are not uinque
const colors = {
    "12": {color: "red"},
    "231":{color: "white"},
    "73": {color: "black"},
    "4":  {color: "silver"},
    "20": {color: "silver"}, // second case of silver
};

const blueprints = {
  "12":{color: "red", views: [{name: "front"}, {name: "back"}, {name: "top"}, {name: "bottom"}]},
  "231":{color: "blue", views: [{name: "front"}, {name: "back"}]},
  "73":{color: "cyan", views: [{name: "front"}, {name: "back"}, {name: "top"}, {name: "bottom"}]},
  "4":{color: "gold", views: [{name: "front"}, {name: "back"}, {name: "top"}, {name: "bottom"}]},
};


// Usage =========================================================
const result = filterPrintsByViews(bluePrints, "top", "bottom");


// Example of resulting data
// result looks like    
[
    {colorRef: {color: "red"}, views: ["front", "back", "top", "bottom"]},
    {colorRef: {color: "black"}, views: ["front", "back", "top", "bottom"]},
    {colorRef: {color: "silver"},  views: ["front", "back", "top", "bottom"]},
];
</code></pre>
    </div>