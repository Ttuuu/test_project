<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Player is confusing</strong></p>

<p>Only 1 player is defined. This spawns the need for confusing code that looks like <code>this.player</code> is 0 then 1 then 2 then 3 and so on. And player-value incrementing is spread over many methods which my spidey sense says "uh-oh, player disconnects ahead!".</p>

<pre><code>changePlayer() { this.player = this.player === 0 ? 1 : 0; }
currentPlayuer() { return this.player; }
</code></pre>

<p>Personally, when I write a second method for a given thing I start to consider making a separate class. Classes should be about exposing related functionality. Good classes expose functionality and hide state.</p>

<hr>

<p><strong>Array Iterator Functions</strong></p>

<p>Read up on <code>Array.map</code>, <code>Array.every</code>, <code>Array.some</code>, et cetera. These will really clean up the array looping. </p>

<hr>

<p><strong>Class decoupling</strong></p>

<p>Class purpose needs to be more precisely nailed down conceptually. Then the existing coupling will be more evident. Mixing UI functionality into many classes seems universal in my coding experiences. It just too easy to do when updating the screen is a simple one liner.</p>

<p><code>Game</code> sounds like it should be the overall game manager. It should be coordinating the other objects through their own APIs, but is directly manipulating raw state that should be in other objects such as display. </p>

<p><code>Board</code> is only the board and should only be aware of its own state - which squares are occupied. But it is also handling display details. <code>gameHistory</code> sounds like high level functionality that belongs in a conceptually higher level class.</p>

<p><code>BoardCanvas</code> sounds like <em>the</em> place for display functions, but it is not. The DOM and <code>Canvas</code> are conceptually display components for tic-tac-toe and only <code>BoardCanvas</code> should have to use them. <code>BoardCanvas</code> needs an a tic-tac-toe game appropriate API. <code>addClickListener()</code> is a spot-on example of good decoupling.</p>

<hr>

<p><strong><code>Board</code> contains a <code>Game</code> or vice versa?</strong></p>

<p>As a general rule have higher level classes contain lower level classes. <code>Board</code> is a low level and thus "stupid" class. Keep it stupid. It should not be coordinating <code>Game</code> - <code>BoardCanvas</code> interaction; which will happen if you invert the containment heirarchy.</p>

<hr>

<p><strong><code>undo</code></strong></p>

<pre><code> const undo = () =&gt; { board.undo(); }
</code></pre>

<p>You'll end up naturally writing lots of these "pass through" functions with decoupled classes. This invisible hand of OO, so to speak, will make high level classes read appropriately high level and classes at all levels will be able to "mind their own business".</p>

<hr>

<p><strong>game flow logic</strong></p>

<p>In the spirit of expressing high level logic, at the highest level, I imagine the game as a loop. Whether this logic is in <code>Game</code> or a new class is a design decision but the overall point is "layers of abstraction" in the application.</p>

<pre><code>// initialze variables, create objects, etc.
var noWinner = true;
...

while (noWinner) {
  ...

  // testing for a winner or tie game should be somewhere in the
  // method we're calling (or method chain it might be calling).
  //  An if-else in this game loop takes away part of the "who won?" logic 
  // from its proper place. 
  noWinner = this.hasWon(currentPlayer());
}

boardCanvas.displayWinner(this.winner);
// I suppose the winner could be "its a tie" 
</code></pre>
    </div>