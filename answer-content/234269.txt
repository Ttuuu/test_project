<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Prefer writing functions over macros</h1>

<p>In many cases, macros can be replaced by perfectly ordinary functions which do the same thing, but are usually safer to use. Consider <code>alx_mallocs()</code> for example, it can be simply written as:</p>

<pre><code>static inline bool alx_mallocs(void **ptr, size_t size) {
    return (*ptr = malloc(size));
}
</code></pre>

<p>There's no need for tricks to prevent the arguments from being evaluated more than once. You can then even add <code>__attribute__((nonnull))</code> in front of it if your compiler supports it.</p>

<h1>Move <code>current</code> out of the list</h1>

<p>By making the <code>current</code> point part of <code>Alx_LinkedList</code>, you prevent multiple parts of the code from accessing the same list simultaneously. This is an issue even in single-threaded code. For example, consider a loop going through the elements of the list, and if some condition is true, it has to call another function which also wants to iterate through the list. This nested list access is not possible with your functions.</p>

<p>It is better to create a new struct that represents a cursor into an existing list.</p>

<h1>Remove redundant functions</h1>

<p>You have these two functions:</p>

<pre><code>int alx_llist_move_fwd  (struct Alx_LinkedList *list, ptrdiff_t n);
int alx_llist_move_bwd  (struct Alx_LinkedList *list, ptrdiff_t n);
</code></pre>

<p>They do the same thing; they move the <code>current</code> pointer, but they take a signed offset and both handle that fine. Just keep a single function:</p>

<pre><code>int alx_llist_move  (struct Alx_LinkedList *list, ptrdiff_t n);
</code></pre>

<p>If someone wants to move backwards, they can just pass in a negative number. Internally you could split it into multiple functions for handling forward and backwards movement differently, but at least keep your API simple.</p>

<h1>Use proper names</h1>

<p><code>alx_llist_edit_current()</code> is probably better rewritten as <code>alx_llist_set_current()</code>.</p>

<p>If I see <code>alx_llist_first_element()</code>, I don't know what it does. Does it get the first element? Does it set the first element? Does it move <code>current</code> to the first element? Only by reading the code do I know what it does. It apparently sets the first element, but only if there was no first element to begin with. If it's just an internal helper function, it should not be part of the API, so remove it from <code>linked-list.h</code>, but still give it a better name in <code>linked-list.c</code>.</p>

<h1>Add a function to get data out of a node</h1>

<p>You have functions to insert data into the list, but I don't see any function that gets the data back out. Apparently you have to just follow the <code>data</code> pointer of an <code>Alx_LLnode</code>. It's cleaner and more symmetrical to add a function to retrieve the data pointer from a node. And that immediately brings to light another problem:</p>

<h1>Store the size of the data in a node</h1>

<p>You allow setting the contents of a node by providing both a pointer to a blob of data, and its size. So it is natural to expect that given a node, I can get back the pointer to that blob, <em>and its size</em>.</p>

<h1>Make it clear that this is a <em>circular</em> linked list</h1>

<p>To distinguish it from a regular linked list, make sure the names of structs and functions make it clear that it is a circular linked list. It's also best if the filenames themselves reflect this.</p>
    </div>