<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I agree with @janos that threads are a poor fit for this problem.</p>

<h3>Modularity</h3>

<p>If you're going to use threads anyway, I'd at least attempt to get rid of the global variables, and the dependencies between the two threads. Each thread should basically do its "thing" in isolation from the others. As it is right now, your <code>printEven</code> basically knows about and depends on some of the internals of <code>printOdd</code> and vice versa--i.e., that the other will increment <code>x</code> each time it executes. I'd prefer that each be at least reasonably independent, something on this general order:</p>

<pre><code>#include &lt;iostream&gt;
#include &lt;thread&gt;
#include &lt;atomic&gt;

int main() {
    static const int max = 10;

    enum which { odd, even };

    std::atomic&lt;which&gt; t = odd;

    auto a = std::thread([&amp;] {
        for (int i = 1; i &lt; max; i += 2) {
            while (t != odd)
                std::this_thread::yield();
            std::cout &lt;&lt; i &lt;&lt; "\t";
            t = even;
        }
    });

    auto b = std::thread(
        [&amp;] {
        for (int i = 2; i &lt; max; i += 2) {
            while (t != even)
                std::this_thread::yield();
            std::cout &lt;&lt; i &lt;&lt; "\t";
            t = odd;
        }
    });

    a.join();
    b.join();
}
</code></pre>

<p>Ideally, we'd probably prefer to avoid the knowledge of other threads implicit in <code>odd</code> setting <code>t</code> to <code>even</code>, and <code>even</code> setting <code>t</code> to <code>odd</code>, but each just doing something like <code>t = successor(t);</code>, so deciding what happens next after an iteration of a thread is somewhere else (but it's arguable whether it's worth the trouble for a case this trivial).</p>

<h3>Avoid std::endl</h3>

<p>Although you're producing little enough output in this case that it probably doesn't much, I'd advise avoiding <code>std::endl</code> in general. Most of the time you just want a new-line, in which case <code>'\n'</code> works fine. If you really do want to flush the stream (like <code>std::endl</code> does) it's better to do that explicitly.</p>

<h3>condition variables</h3>

<p>A condition variable seems to compound the problem of having threads that do tiny bits of work and constantly switch contexts. The code above (using an atomic and <code>yield()</code>) is simpler (at least IMO) and at least in a quick test, seems to run around three times as fast (and yes, for that test, I modified them to produce the same output, eliminate <code>std::endl</code> as advised above, and piped the output to a file, so I could time this code, not just the speed of console scrolling).</p>
    </div>