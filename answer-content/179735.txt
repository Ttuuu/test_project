<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Good work!</p>

<p>After a quick first pass, here's the main items I've found, in no particular order. I'm sure there's more to find in there, but these should improve your code a lot:</p>

<h2>overuse of explicit</h2>

<p>Edit: see comments below, this not not correct in every single scenarios.</p>

<p><code>explicit</code> is only useful on constructors with a single non-default parameter. adding it to constructors with more arguments is useless.</p>

<h2>Weird use of pointers</h2>

<p><code>const Token* peek_token();</code></p>

<p>Returning by pointer makes no sense here. It's not like you are expecting anyone to store a long-term reference to a token. You should be returning by reference instead.</p>

<h2>Do not use raw pointers</h2>

<p><code>std::deque&lt;const Token*&gt; tokens_;</code></p>

<p>should be </p>

<p><code>std::deque&lt;std::unique_ptr&lt;const Token&gt;&gt; tokens_;</code></p>

<p>But it doesn't matter because:</p>

<h2>Don't use dynamic memory where unnecessary</h2>

<p><code>std::deque&lt;std::unique_ptr&lt;const Token&gt;&gt; tokens_;</code></p>

<p>should actually be:</p>

<p><code>std::deque&lt;const Token&gt; tokens_;</code></p>

<p>STL containers already store objects in the heap, and do a good job at managing them unless they have a <code>sizeof()</code> that's ridiculusly massive (which would be super suspicious in the first place). You are wasting a lot more performance on hitting the memory system like a madman and inferior cache performance than you are gaining from marginally faster container resizing.</p>

<p>Speaking of resizing...</p>

<h2>Deque is for fast front insertion, not fast resizing.</h2>

<p>you do not <code>push_front()</code> on <code>tokens_</code>, so you shouldn't be using a deque here. Once again, the marginal increase in container resizing is almost certainly not worth the decreased cache performance. <code>std::vector&lt;&gt;</code> has an amortized <code>push_back()</code> time of O(1), it'll be fine.</p>

<h2>InputSource design is dodgy</h2>

<p>It's hard to tell because <code>InputSource</code> seems to be designed to accomodate code that is not being shown here, but in general any "inherit to extend" design is suspect.</p>

<p>Really, as far as I can tell from here, your lexer should probably just operate on a <code>std::istream</code>, and let the calling code handle concatenating token streams from different files. This would lessen the responsability on the lexer, and let it do just on thing: Lex.</p>

<h2>Big ugly if else if block:</h2>

<pre><code>  if (identifier == "def") {
    tokens_.push_back(
      new Token(Token::Type::def, create_lexing_context()));
    i++;  // space afterwards
  } else if (identifier == "class") {
    tokens_.push_back(
      new Token(Token::Type::class_, create_lexing_context()));
    i++;  // space afterwards
  } else if (identifier == "import") {
...
</code></pre>

<p>Could simply be:</p>

<pre><code>std::unordered_map&lt;std::string, Token::Type&gt; tokens_;
...
auto found_token = tokens_.find(identifier);
if(found_token != tokens_.end()) {
  tokens_.push_back(
      new Token(found_token-&gt;second, create_lexing_context()));
    i++;  // space afterwards
}
</code></pre>
    </div>