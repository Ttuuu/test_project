<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3><em>Toward restructuring and optimization</em></h3>

<p>The expressions <strong><code>Math.floor(event.clientX / 60)</code></strong> and <strong><code>Math.floor(event.clientY / 60)</code></strong> which represents element position are redundantly duplicated across a half of the entire posted function's content.<br>The <em>Extract function technique</em> is reasonably applied and expressed with a separate function:</p>

<pre><code>function getElPosition(e){
    return {x: Math.floor(e.clientX / 60),
            y: Math.floor(e.clientY / 60)};
}
</code></pre>

<hr>

<p><code>hasClicked</code> and <code>highlightPos</code> variables are assigned with same values in both exclusive branches of <code>if/else</code> conditional.<br>Thus, the assignment statements are moved out as common ones.<br>Furthermore, both <strong><code>highlightPos</code></strong> and <strong><code>advancePosition</code></strong> are essentially point to the target event element position returned by mentioned <code>getElPosition</code> function. Therefore, they could be just eliminated (see the full approach below).</p>

<hr>

<p>The condition:</p>

<pre><code>if (pieceMoves.moves[i].x - 2 == highlightPos.x || pieceMoves.moves[i].x + 2 == highlightPos.x) {
    isCastling = true;
} else {
    isCastling = false;
}
</code></pre>

<p>is just a verbose version of:</p>

<pre><code>isCastling = (pieceMoves.moves[i].x - 2 == elPos.x || pieceMoves.moves[i].x + 2 == elPos.x);
</code></pre>

<p>Noisy condition:</p>

<pre><code>if (
    board[highlightPos.y][highlightPos.x] == whiteKingSideCastle ||
    board[highlightPos.y][highlightPos.x] == whiteQueenSideCastle ||
    board[highlightPos.y][highlightPos.x] == blackKingSideCastle ||
    board[highlightPos.y][highlightPos.x] == blackQueenSideCastle ||
    board[highlightPos.y][highlightPos.x] == blackKing ||
    board[highlightPos.y][highlightPos.x] == whiteKing
)
</code></pre>

<p>is replaced with flexible <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes" rel="nofollow noreferrer"><code>Array.includes</code></a> feature:</p>

<pre><code>if ([whiteKingSideCastle, whiteQueenSideCastle, blackKingSideCastle, 
     blackQueenSideCastle, blackKing, whiteKing].includes(board[elPos.y][elPos.x]))
</code></pre>

<p>The <code>can_move</code> flag can be eliminated and replaced with check of <code>pieceMoves.length</code>.</p>

<p><code>board[highlightPos.y][highlightPos.x]</code> indexing is repeated multiple times and worth to be extracted into a variable:</p>

<pre><code>let boardItem = board[elPos.y][elPos.x];
</code></pre>

<hr>

<p>See the full optimized approach:</p>

<pre><code>function getElPosition(e){
    return {x: Math.floor(event.clientX / 60),
            y: Math.floor(event.clientY / 60)};
}

document.addEventListener('click', function (event) {
    let elPos = getElPosition(event);
    if (!hasClicked) {
        if (event.clientX &lt; 480 &amp;&amp; event.clientY &lt; 480 &amp;&amp; board[elPos.y][elPos.x] != "vacant") {
            if (humanPlayer.indexOf(board[elPos.y][elPos.x]) != -1) {
                isHighlightPossibleMoves = true;
                pieceMoves = processMoves(Object.assign({}, elPos), board);
            }
            hasClicked = true;
        }
    } else {
        if (pieceMoves &amp;&amp; pieceMoves.length) {
            for (let i = 0, len = pieceMoves.moves.length; i &lt; len; i++) {
                let boardItem = board[elPos.y][elPos.x];
                if (elPos.x == pieceMoves.moves[i].x &amp;&amp; elPos.y == pieceMoves.moves[i].y) {
                    if (boardItem == blackKing || boardItem == whiteKing) {
                        isCastling = (pieceMoves.moves[i].x - 2 == elPos.x || pieceMoves.moves[i].x + 2 == elPos.x);
                    }
                    if (!isCastling) {
                        if ([whiteKingSideCastle, whiteQueenSideCastle, blackKingSideCastle,
                            blackQueenSideCastle, blackKing, whiteKing].includes(boardItem))
                        {
                            boardItem.hasClicked = true;
                        }
                        board = chess.updateBoard(elPos, elPos);
                        chess = new Chess(board);
                        break;
                    }
                    board = chess.returnCastledBoard({x: elPos.x, y: elPos.y}, pieceMoves.moves[i]);
                    chess = new Chess(board);
                    isCastling = false;
                }
            }
        }
        hasClicked = false;
        pieceMoves = undefined;
    }
});
</code></pre>
    </div>