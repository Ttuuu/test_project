<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here are some things that may help you improve your code.</p>
<h2>Don't abuse <code>using namespace std</code></h2>
<p>Putting <code>using namespace std</code> at the top of every program is <a href="http://stackoverflow.com/questions/1452721/why-is-using-namespace-std-considered-bad-practice">a bad habit</a> that you'd do well to avoid.</p>
<h2>Provide complete code to reviewers</h2>
<p>This is not so much a change to the code as a change in how you present it to other people.  Without the full context of the code and an example of how to use it, it takes more effort for other people to understand your code.  This affects not only code reviews, but also maintenance of the code in the future, by you or by others.  One good way to address that is by the use of comments.  Another good technique is to include test code showing how your code is intended to be used.</p>
<h2>Reconsider container choices</h2>
<p>A <code>std::vector&lt;std::vector&lt;int&gt;&gt;</code> is not likely to be an optimal choice for your data structure.  Because a chess move, in this code is actually two pairs of coordinates (source and destination), I'd suggest that either a <code>std::array</code> or a custom type.  A <code>class</code> representing a board location would be very handy for a number of things, as I'll demonstrate later.  Finally rather than <code>int board[8][8]</code> a choice that would be just as efficient but would allow better use of standard algorithms would be <code>std::array&lt;int, 64&gt;</code> or better yet, make it a class.</p>
<h2>Use more whitespace for legibility</h2>
<p>The code contains this terribly long line:</p>
<pre><code>if(row != 7 &amp;&amp; col!= 7 &amp;&amp; board[row+1][col+1] &lt;= 0)pseudomoves.push_back(push(row,col,row+1,col+1));
</code></pre>
<p>It could be made more legible by not cramming it all onto a single line:</p>
<pre><code>if (row != 7 &amp;&amp; col!= 7 &amp;&amp; board[row+1][col+1] &lt;= 0) {
    pseudomoves.push_back(push(row,col,row+1,col+1));
}
</code></pre>
<h2>Use an <code>enum</code> for clarity</h2>
<p>Right now there are lots of <em>magic numbers</em> in the code to signify the various chess pieces.  For example, the white King is represented as 10 and the black King as -10.  The <code>check_w</code> routine includes this line:</p>
<pre><code>if(board[i][j] == 10){
</code></pre>
<p>That's in the middle of a couple of nested loops looking for the white king.</p>
<p>Why not make an <code>enum class</code> instead?</p>
<pre><code>enum class Piece{k=-10, q=-6, r, n=-3, b, p, x, P, B, N, R=5, Q, K=10};

if(board[i][j] == Piece::K){
</code></pre>
<p>Now it's a bit clearer what we're looking for without having to rely on the comment.</p>
<h2>Rethink the code structure</h2>
<p>Right now, it appears that you will have to duplicate the code for <code>generate_moves_w</code> to create the corresponding <code>generate_moves_b</code>, and a similar story with <code>check_w</code>.  That really doesn't make much sense because the rules of chess are the same for both players.  Also, all of the details of how each piece could move are in one long nested loop within <code>generate_moves_w</code>.  An alternative approach would be to have one routine per type of piece, greatly simplifying the code and making it much easier to understand and test.</p>
<h2>Don't use <code>std::endl</code> when '\n' will do</h2>
<p>Using <code>std::endl</code> emits a <code>\n</code> and flushes the stream.  Unless you really need the stream flushed, you can improve the performance of the code by simply emitting <code>'\n'</code> instead of using the potentially more computationally costly <code>std::endl</code>.</p>
<h2>Eliminate global variables where practical</h2>
<p>The code declares and uses a global variable <code>board</code>.  Global variables obfuscate the actual dependencies within code and make maintainance and understanding of the code that much more difficult.  It also makes the code harder to reuse.  For all of these reasons, it's generally far preferable to eliminate global variables and to instead create an object to encapsulate both the data and the relevant functions that operate on it.  In this code, one obvious class would be a <code>ChessBoard</code>.</p>
<h2>Rethink the algorithm</h2>
<p>Right now, the code searches the entire board for pieces, recalculates all possible moves, tests each possible move for a check and then finally returns a list of valid moves.  If your interest is performance, the first thing to think about is how to avoid so much recalculation.  For instance, in the opening stages of the game, the possible moves for either King are unaltered by most moves.  If you calculate it at the beginning of the game, you don't really need to recalculate for any move -- just certain ones.  Also, there are two important and related concepts.  The first concept is the possible moves each piece has available, but the other is which pieces threaten or protect others.  The calculations for threaten/protect are identical -- the only difference is whether the pieces are opposite colors or not.  You could use this to simplify, for example, your <code>check_w</code> code.</p>
<h2>An example</h2>
<p>Here's a partial refactoring of the code to show how it might look using classes.</p>
<pre class="lang-cpp prettyprint-override"><code>class Chess {
    class BoardLocation {
        int rank, file;
    public:
        BoardLocation(int rank, int file) :
            rank{rank}, file{file}
        { 
            if (rank &lt; 0 || file &lt; 0 || rank &gt; 7 || file &gt; 7) {
                throw std::invalid_argument("rank and file must be in the range [0,7]");
            }
        }
        int Rank() const { return rank; }
        int File() const { return file; }
        friend std::ostream&amp; operator&lt;&lt;(std::ostream&amp; out, const BoardLocation&amp; bl) {
            return out &lt;&lt; char('a'+bl.File()) &lt;&lt; char('8'-bl.Rank());
        }
    };
public:
    enum class Piece{k, q, r, n, b, p, x, P, B, N, R, Q, K};
    struct ChessMove {
        BoardLocation from;
        BoardLocation to;
        friend std::ostream&amp; operator&lt;&lt;(std::ostream&amp; out, const ChessMove&amp; m);
    };

    Chess();
    Piece operator()(int a, int b) const {
        return board[a][b];
    }
    Piece operator()(const BoardLocation&amp; bl) const {
        return board[bl.Rank()][bl.File()];
    }
    Piece &amp;operator()(const BoardLocation&amp; bl) {
        return board[bl.Rank()][bl.File()];
    }
    bool isBlack(int a, int b) const {
        auto v{board[a][b]};
        return v==Piece::k || v==Piece::q || v==Piece::r || v==Piece::n || v==Piece::b || v==Piece::p;
    }
    bool isWhite(int a, int b) const {
        auto v{board[a][b]};
        return v==Piece::K || v==Piece::Q || v==Piece::R || v==Piece::N || v==Piece::B || v==Piece::P;
    }
    Piece perform(ChessMove &amp;m);
    void undomove(Piece original, const ChessMove&amp; m);
    bool check_w() const;
    std::vector&lt;ChessMove&gt; generate_moves_w();
    static const std::unordered_map&lt;Chess::Piece, char&gt; piecename; 
private:
    Piece board[8][8];
};
</code></pre>
    </div>