<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Finding (and removing) duplicates is already a built-in functionality; this code is kind of reinventing the wheel. Making VBA code faster than native functionality, from what I've seen, requires thinking outside the box and manipulating memory locations.</p>

<p>But let's review the code we're looking at.</p>

<blockquote>
<pre><code>Sub DupValidation()
</code></pre>
</blockquote>

<p>Kudos for using a meaningful name! This one reads like a <em>noun</em> though; since <code>Sub</code> procedures typically <em>do something</em>, it's common practice to make their names start with a <em>verb</em>, so <code>ValidateDuplicates</code> would be a better name. The procedure is also <em>implicitly</em> <code>Public</code>; <a href="https://rubberduckvba.com/Features/FeatureItem/ImplicitPublicMember" rel="nofollow noreferrer">consider always using explicit modifiers</a>.</p>

<p>Next we have a handful of declarations, for each of the variables used in the procedure. Again, kudos for explicitly declaring all variables (is <code>Option Explicit</code> specified?) - but consider declaring them when they're needed, as they're needed. That way it's much harder to accidentally leave <a href="https://rubberduckvba.com/Features/FeatureItem/VariableNotUsed" rel="nofollow noreferrer">unused variables</a> behind, like what happened to <code>lastrow2</code>.</p>

<p>Rule of thumb, if there's a digit at the end of a name, it's <em>usually</em> a bad name. <code>ws1</code> could be <code>sheet</code>, or <code>ticketsSheet</code>.</p>

<p>But you're not here to hear about variable naming are you.</p>

<p>I'm curious why <code>Range("g2:g" &amp; lastrow)</code> is good enough to get a range encompassing all cells in column G, but once inside the loop we switch to a very long-winded <code>Range(Cells, Cells)</code> call instead of just doing <code>Range("B2:B" &amp; lastrow)</code> like we just did.</p>

<p>Do we really need to <code>COUNTIF</code> to identify a 2nd or 3rd (or 250th) duplicate for one value?</p>

<p>If we had a data structure we could quickly lookup a value from, we could put the known-dupe value in it, and then only perform the expensive <code>COUNTIF</code> when we already know we're not looking at a known duplicate value. <code>Dictionary</code> and its O(1) keyed retrieval sounds like a good tool for this.</p>

<p>So instead of just writing <code>True</code> into column G, we can store the value of column B into our dictionary, and then the loop can now conditionally evaluate the countif when the dictionary doesn't already contain the value in column B.</p>

<p>Actually, with a dictionary you could make the whole loop much more efficient than that.</p>

<p>Start at row 2, end at lastrow: the number of iterations is known before we even start looping - the loop should be a <code>For</code> loop, not <code>Do While</code>. So we loop <code>i</code> from 2 to N, and at each row we try to add the value of column B into the dictionary. If the value already exists in there (that's O(1); CountIf is O(n)), then we know we have a dupe at that row so we write <code>True</code> to column G. After the loop, column G identifies all dupes, and the dictionary contains all the unique values. Iterating a variant array of values in-memory instead of worksheet cells would be even faster. You'll find the <code>Dictionary</code> class in the <code>Scripting</code> library if you want it early-bound.</p>

<p>But then again, I doubt it would be faster than the native <em>highlight duplicates</em> functionality.</p>
    </div>