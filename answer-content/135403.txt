<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your code runs instantly on my system with 1 million randomly generated numbers. are you sure you are searching for <code>n - x</code> in <code>num_set</code> and not in <code>nums</code>?</p>

<p>Anyway, a couple of Python style pointers:</p>

<ol>
<li><p>You can iterate over the set directly, no need to pass both the set and the list:</p>

<pre><code>def has_two_sum(n, num_set):
    res = any(((n-x) in num_set) and 2*x != n for x in num_set)
    return res
</code></pre></li>
<li><p>Not much point in storing a value to immediuately return it:</p>

<pre><code>def has_two_sum(n, num_set):
    return any(((n-x) in num_set) and 2*x != n for x in num_set)
</code></pre></li>
<li><p>Boolean values are converted to 0 or 1 when used in an integer setting, so your adding of values is typically written as:</p>

<pre><code>two_sum = sum(has_two_sum(n, num_set) for n in range(-10000, 10001))
</code></pre></li>
<li><p>If you are going to have a function that contains a single liner, you better give it a great, descriptive name. I don't think that <code>has_two_sum</code> really fits the bill. Perhaps <code>has_two_items_that_sum_to_n</code> or <code>has_two_that_sum_to_n</code>? Alternatively, I think my preferred option here would be to get rid of the function altogether and let code speak by itself, writing the whole thing as two nested comprehensions:</p>

<pre><code>two_sum = sum(any(n - x in num_set and 2*x != n for x in num_set)
              for n in range(-10000, 10001))
</code></pre>

<p>There is a school of thought that considers nested comprehensions to be confusing (e.g. <a href="https://google.github.io/styleguide/pyguide.html#List_Comprehensions">the Google Python style guide doesn't allow them</a>), but I think this case is simple enough, YMMV.</p></li>
</ol>
    </div>