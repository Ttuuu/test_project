<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>See @svick excellent answer, but, note that it does not account for regex special syntax character escaping.</p>
<p>Literals like <code>.</code> are special selectors in <strong>regex</strong>. So, for a LIKE fragment <code>asdf.qwer%</code> a (python syntax) regex <code>re.match('^asdf.qwer.*$', 'asdfXqwer')</code>  would INCORRECTLY match because <code>.</code> means "any single character here".</p>
<p>You also need to escape any regex-special chars in LIKE fragment before piping to regex. Example in this case: <code>re.match('^asdf\.qwer.*$', 'asdfXqwer')</code>  == proper no match.</p>
<p>Ansi SQL special characters <code>%</code> and <code>_</code> are wonderfully NOT regex special selector characters. So, it's super easy to escape ANSI SQL like fragments, and then replace <code>%</code> and <code>_</code> with regex eqivalents.</p>
<pre><code># Python example
# note that in python, you need to escape `\` in code too :) 
# resulting in `\\` in code representation. print the string to see single `\`

_special_regex_chars = {
    ch : '\\'+ch
    for ch in '.^$*+?{}[]|()\\'
}

def _sql_like_fragment_to_regex_string(fragment):
    # https://codereview.stackexchange.com/a/36864/229677
    safe_fragment = ''.join([
        _special_regex_chars.get(ch, ch)
        for ch in fragment
    ])
    return '^' + safe_fragment.replace('%', '.*?').replace('_', '.') + '$'
</code></pre>
<p>Or, in one go (because there is no overlap between ANSI SQL selectors and Python Regex selectors):</p>
<pre><code>_char_regex_map = {
    ch : '\\'+ch
    for ch in '.^$*+?{}[]|()\\'
}
_char_regex_map['%'] = '.*?'
_char_regex_map['_'] = '.'

def sql_like_fragment_to_regex_string(fragment):
    return '^' + ''.join([
        _char_regex_map.get(ch, ch)
        for ch in fragment
    ]) + '$'
</code></pre>
    </div>