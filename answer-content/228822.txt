<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Ignoring for now the various gotchas that @scnerd describes about offsets, and making some broad assumptions about the monotonicity and order of the input, let's look at the performance of various implementations. Happily, your implementations are close to the most efficient given these options; only the shown "naive" method is faster on my machine:</p>

<pre><code>#!/usr/bin/env python3

from io import StringIO
from timeit import timeit


# Assume that 'offsets' decreases monotonically


def soln1(text: str, offsets: tuple, tags: tuple) -&gt; str:
    for offset, tag in zip(offsets, tags):
        text = f'{text[:offset]}{tag}{text[offset:]}'
    return text


def soln2(text: str, offsets: tuple, tags: tuple) -&gt; str:
    for offset, tag in zip(offsets, tags):
        text = text[:offset] + tag + text[offset:]
    return text


def gen_join(text: str, offsets: tuple, tags: tuple) -&gt; str:
    offsets += (0,)
    return ''.join(
        text[offsets[i+1]:offsets[i]] + tag
        for i, tag in reversed(tuple(enumerate(tags)))
    ) + text[offsets[0]:]


def naive(text: str, offsets: tuple, tags: tuple) -&gt; str:
    output = text[:offsets[-1]]
    for i in range(len(tags)-1,-1,-1):
        output += tags[i] + text[offsets[i]:offsets[i-1]]
    return output + text[offsets[0]:]


def strio(text: str, offsets: tuple, tags: tuple) -&gt; str:
    output = StringIO()
    output.write(text[:offsets[-1]])
    for i in range(len(tags)-1,-1,-1):
        output.write(tags[i])
        output.write(text[offsets[i]:offsets[i-1]])
    output.write(text[offsets[0]:])
    return output.getvalue()


def ranges(text: str, offsets: tuple, tags: tuple) -&gt; str:
    final_len = len(text) + sum(len(t) for t in tags)
    output = [None]*final_len
    offsets += (0,)

    begin_text = 0
    for i in range(len(tags)-1,-1,-1):
        o1, o2 = offsets[i+1], offsets[i]
        end_text = begin_text + o2 - o1
        output[begin_text: end_text] = text[o1: o2]

        tag = tags[i]
        end_tag = end_text + len(tag)
        output[end_text: end_tag] = tag

        begin_text = end_tag

    output[begin_text:] = text[offsets[0]:]
    return ''.join(output)


def insertion(text: str, offsets: tuple, tags: tuple) -&gt; str:
    output = []
    offsets = (1+len(tags),) + offsets
    for i in range(len(tags)):
        output.insert(0, text[offsets[i+1]: offsets[i]])
        output.insert(0, tags[i])
    output.insert(0, text[:offsets[-1]])
    return ''.join(output)


def test(fun):
    actual = fun('abcde', (4, 3, 2, 1), ('D', 'C', 'B', 'A'))
    expected = 'aAbBcCdDe'
    assert expected == actual


def main():
    funs = (soln1, soln2, gen_join, naive, strio, ranges, insertion)
    for fun in funs:
        test(fun)

    N = 5_000  # number of averaging repetitions
    L = 150  # input length
    text = 'abcde' * (L//5)
    offsets = tuple(range(L-1, 0, -1))
    tags = text[-1:0:-1].upper()

    print(f'{"Name":10} {"time/call, us":15}')
    for fun in funs:
        def call():
            return fun(text, offsets, tags)
        dur = timeit(stmt=call, number=N)
        print(f'{fun.__name__:10} {dur/N*1e6:.1f}')


main()
</code></pre>

<p>This yields:</p>

<pre class="lang-none prettyprint-override"><code>Name       time/call, us  
soln1      134.2
soln2      133.2
gen_join   289.7
naive      116.8
strio      159.6
ranges     513.9
insertion  204.7
</code></pre>
    </div>