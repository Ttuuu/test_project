<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here is a simpler method that has the following advantages:</p>

<ul>
<li>No need to create a custom TestCase class.</li>
<li>No need to decorate every test method.</li>
<li>Use the unittest standard load test protocol. <a href="https://docs.python.org/3.7/library/unittest.html#load-tests-protocol" rel="nofollow noreferrer">See the Python docs here.</a></li>
</ul>

<p>The idea is to go through all the test cases of the test suites given to the test loader protocol and create a new suite but with the tests ordered by their line number.</p>

<p>Here is the code:</p>

<pre><code>import unittest

def load_ordered_tests(loader, standard_tests, pattern):
    """
    Test loader that keeps the tests in the order they were declared in the class.
    """
    ordered_cases = []
    for test_suite in standard_tests:
        ordered = []
        for test_case in test_suite:
            test_case_type = type(test_case)
            method_name = test_case._testMethodName
            testMethod = getattr(test_case, method_name)
            line = testMethod.__code__.co_firstlineno
            ordered.append( (line, test_case_type, method_name) )
        ordered.sort()
        for line, case_type, name in ordered:
            ordered_cases.append(case_type(name))
    return unittest.TestSuite(ordered_cases)
</code></pre>

<p>You can put this in a module named order_tests and then in each unittest Python file, declare the test loader like this:</p>

<pre><code>from order_tests import load_ordered_tests

# This orders the tests to be run in the order they were declared.
# It uses the unittest load_tests protocol.
load_tests = load_ordered_tests
</code></pre>
    </div>