<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ol>
<li><p>At least to me, the naming of <code>swapChannel</code> is confusing (and I go "how can the parameter be const if the method does a swap?"). The method is not <em>swapping</em>, but it is simply "reversing" the channels from <code>arr</code> to <code>dst</code>. I would consider a more informative name for the method (for a swap, I'd expect two parameters by-reference and then doing std::swaps inside).</p></li>
<li><p>If you wanted to, there are standard algorithms available so that you can avoid explicit for-loops in places like the definition of the arithmetic operator (see e.g., <code>std::transform</code>). Your code is more or less full of examples where you can apply these functions.</p>

<p>For example, your function <code>sum</code> is <code>std::accumulate</code>, while <code>pow</code> and <code>sqrt</code> can also be written using standard algorithms. So you can just do (and here, notice I'm also passing by reference):</p>

<pre><code>template&lt;class T, std::size_t N&gt;
void pow(InArg&lt;T, N&gt;&amp; arr, OutArg&lt;T, N&gt;&amp; dst, const T exponent)
{
    std::transform(arr.cbegin(), arr.cend(), dst.begin(), 
        [&amp;](auto v) { return std::pow(v, exponent); });
}

// This applies an InArg place exponent power over vector A.
template&lt;class T, std::size_t N&gt;
void powInplace(InOutArg&lt;T, N&gt;&amp; arr, const T exponent)
{
    std::transform(arr.cbegin(), arr.cend(), arr.begin(), 
        [&amp;](auto v) { return std::pow(v, exponent); });
}
</code></pre>

<p>As another example, your <code>sum</code> (also, notice we pass by const-ref now, just as the user would expect because a sum should never modify the elements) just becomes:</p>

<pre><code>// This calculates the sum of a vector.
template&lt;class T, std::size_t N&gt;
T sum(const InArg&lt;T, N&gt;&amp; arr)
{
    return std::accumulate(arr.cbegin(), arr.cend(), 0);
}
</code></pre>

<p>Finally, you asked specifically about how to sum two vectors using <code>std::transform</code>. There is an overload for that as well, so you can do:</p>

<pre><code>template &lt;class T, std::size_t N&gt;
OutRet&lt;T, N&gt; operator+( InArg&lt;T, N&gt; arr1, InArg&lt;T, N&gt; arr2 )
{
    pxNDArr&lt;T, N&gt; dst;
    std::transform(arr1.cbegin(), arr1.cend(), arr2.cbegin(), dst.begin(), std::plus&lt;&gt;());

    return dst;
}
</code></pre></li>
</ol>
    </div>