<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here are a few things that caught my eye while quickly looking through your code:</p>

<hr>

<h2>Imports</h2>

<p>As per the official Style Guide for Python Code (aka PEP8), <code>import</code>s <a href="https://www.python.org/dev/peps/pep-0008/#imports" rel="nofollow noreferrer">should best be grouped</a>. Imports from the standard library come first, then third-party modules, followed by any library/application specific imports. The groups should be seperated by blank lines. In your particular case, that might look like this:</p>

<pre><code>import os
import random
import typing as t
from enum import Enum
from functools import partial
from getpass import getpass
from re import match

import attr
import bcrypt
import psycopg2
</code></pre>

<p>The order of the imports has also changed slightly. That's because I left grouping and sorting the imports to the according function of Visual Studio Code, which under the hood uses <a href="https://pypi.org/project/isort/" rel="nofollow noreferrer">isort</a> to automate the process.</p>

<h2>Documentation</h2>

<p>There are a few loose text blocks, that are likely meant to be seen as method documentation. I'm talking about the triple-quoted text above <code>Player.update</code> as well as <code>Dealer.deal</code> and <code>Game.close</code>. To really work as a documentation string, they should be placed properly indented inside the function body like so:</p>

<pre><code>def update(self):
    """ Update self.state after self.hit

    If player busted, self.state = State.BUST, etc.
    """
    ...
</code></pre>

<pre><code>def deal(self, player, game):
    """ In this method, the dealer and player enter a loop in which the 
    player gets a card from the dealer until it stands or busts.
    """
    ...
</code></pre>

<p>These now follow the <a href="https://www.python.org/dev/peps/pep-0008/#documentation-strings" rel="nofollow noreferrer">style guide recommendations on how to write proper docstrings</a>. Python's <code>help(...)</code> as well as most Python IDEs will now easily pick it up to help you out.</p>

<p>In general, you should think about adding more documentation to your code. Often just a one-line description is sufficient to describe what the function is supposed to do. If there is more to say, say more. If you ever came back to your code after a longer pause, future-you will be really really grateful for the extra effort you spent back then.</p>

<h2>Building the deck</h2>

<p><code>build_deck</code> uses a double list comprehension to generate all possible combinations of values and suits. This function can also be rewritten using <a href="https://docs.python.org/3/library/itertools.html#itertools.product" rel="nofollow noreferrer"><code>itertools.product</code></a>:</p>

<pre><code>from itertools import product

def build_deck():
    suits = ("Hearts", "Clubs", "Diamonds", "Spades")
    values = ("2", "3", "4", "5", "6", "7", "8", "9", "10", "J", "Q", "K", "A")
    return [Card(value, suit) for value, suit in product(values, suits)]
</code></pre>

<p>It doesn't make a huge difference here, but it's always good to now about <code>itertools</code>, especially if you ever find yourself in a situation where you'd have to combine more than two or three iterables. I also changed <code>suits</code> and <code>values</code> to be tuples instead of lists, which is IMHO a nice way to express that you don't want to modify them, because <a href="https://docs.python.org/3/tutorial/datastructures.html#tuples-and-sequences" rel="nofollow noreferrer"><code>tuple</code>s are immutable</a>.</p>

<h2>Whatever <em>lock</em> is</h2>

<p>You define <code>lock</code> to be a partial version of <code>attr.s</code>, but I'm not entirely sure if <code>lock</code> is a particularly good name for it. As I usually don't work with the <code>attr</code> module it could be just me, but at the moment, <code>lock</code> does not really seem to fit here. IMHO the name strongly hints towards authentication, but does not do anything in that regard if I'm not totally mistaken.</p>

<h2><em>ask_question</em></h2>

<p><code>casefold()</code> does seem to be a little bit "overpowered" here. A simple <code>lower()</code> would suffice and be less suprising to us mere mortal Python programmers out here looking at your code ;-)</p>

<h2><em>Card.score</em></h2>

<p><code>Card.score</code> breaks the pattern of listing all the elements you are willing to accept explicitly and give them all as a single string instead. I don't have strong arguments why you should or should not use either of those, but it's probably best to stick to one of them. Personally, I prefer the tuple version.</p>

<h2>Credentials in code</h2>

<p>Your <code>Database</code> class has all the database credentials hard-coded. That's usually not a great idea for several reasons. The first one is that if you ever push your code to a public repository (or Code Review), your credentials will also be public. That's usually not what you want. If you now think, that you will remember to remove them before doing that: You won't! The second one is that if you ever decided to change them or give the game code to someone else, you or, even worse they, will have to touch the code. </p>

<p>There are also several ways on how to improve this, where I think putting the credentials in environment variables or an external configuration file are the most commonly used ones. The first variant might look like this:</p>

<pre><code>conn: t.Any = attr.ib(default=psycopg2.connect(dbname=os.environ["BLACKJACK_DB_NAME"],
                                               user=os.environ["BLACKJACK_DB_USER"],
                                               password=os.environ["BLACKJACK_DB_PASS"],
                                               host=os.environ["BLACKJACK_DB_HOST"]))
</code></pre>

<hr>

<p>That's it for now. Maybe I will find the time to extend the answer in a few days. Till then: Happy coding and good luck with the reviews!</p>
    </div>