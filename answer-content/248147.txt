<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This is nice, neat code in my view, and there is absolutely nothing wrong with modifying <code>argc</code> and <code>argv</code>.  Indeed, it's an entirely rational and natural way to do things for just this kind of purpose. Here are some things that may help you further improve your code:</p>
<h2>Provide complete code to reviewers</h2>
<p>The code as presented is not quite complete.  It is missing these necessary includes and does not have a <code>main</code> to exercise the functions.</p>
<pre><code>#include &lt;iostream&gt;
#include &lt;cassert&gt;
#include &lt;cstring&gt;
#include &lt;stdexcept&gt;
#include &lt;string&gt;
#include &lt;sstream&gt;
</code></pre>
<p>I moved everything to a file <code>args.h</code> and wrote this to test:</p>
<pre><code>#include "args.h"
#include &lt;iostream&gt;
#include &lt;iomanip&gt;

#define SHOW(X) std::cout &lt;&lt; std::boolalpha &lt;&lt; # X " = " &lt;&lt; (X) &lt;&lt; '\n'

int main(int argc, char *argv[]) {
    CliArg&lt;bool&gt; isVerbose(argc, argv, "v", "verbose");
    CliArg&lt;std::string&gt; inFileName(argc, argv, "f", "filename");
    CliArg&lt;int&gt; count(argc, argv, "n", "number");

    SHOW(isVerbose);
    SHOW(inFileName);
    SHOW(count);

    std::cout &lt;&lt; "Remaining args:\n";
    for (int i{0}; i &lt; argc; ++i) {
        std::cout &lt;&lt; "argv[" &lt;&lt; i &lt;&lt; "] = " &lt;&lt; argv[i] &lt;&lt; '\n';
    }
}
</code></pre>
<p>With that added, it was easier to review the code.</p>
<h2>Provide an operator for legacy C functions</h2>
<p>The <code>std::string</code> overload is very likely to be used for things such as file names that might be passed to legacy C functions, so to make that more convenient, I'd suggest adding one more function:</p>
<pre><code>operator const char *() const  { return Mixin::m_value.c_str(); }
</code></pre>
<h2>Consider repeated arguments</h2>
<p>It's common for repeated arguments to have a defined behavior, such as "only the last one has effect" or "only the first one has effect."  This code uses, in effect, the latter policy but then does not ignore or process any subsequent repeats of that option, leaving the user of this code to clean that up.  It would be nice if the code handled that.</p>
<h2>Fix the bug</h2>
<p>The handling of combined flags, such as <code>'-vf'</code> in the sample code above seems to work, but has a flaw having to do with unknown or repeated arguments.  If we run the code as:</p>
<pre><code>src/args -n 42 -vvf config.log foo bar biz baz
</code></pre>
<p>The rather peculiar effect is this:</p>
<pre><code>isVerbose = true
inFileName = v
count = 42
Remaining args:
argv[0] = src/args
argv[1] = config.log
argv[2] = foo
argv[3] = bar
argv[4] = biz
argv[5] = baz
</code></pre>
<p>The second <code>v</code> is misinterpreted as the <code>inFileName</code> while the actual file name is unprocessed.</p>
<h2>Think of the user</h2>
<p>With a long list of arguments, it would be rather tedious to use this syntax repeatedly:</p>
<pre><code>CliArg&lt;bool&gt; isVerbose(argc, argv, "v", "verbose");
CliArg&lt;bool&gt; isCompressed(argc, argv, "c", "compressed");
CliArg&lt;std::string&gt; filterName(argc, argv, "f", "filename");
CliArg&lt;std::string&gt; waveletType(argc, argv, "w", "wavelet");
CliArg&lt;int&gt; count(argc, argv, "n", "number");
</code></pre>
<p>It might be nice to allow for a less verbose syntax or one that would support initialization of multiple variables, possibly with default values, via a <code>constexpr</code> data structure.</p>
<h2>Check your spelling</h2>
<p>In one of the comments, there's a typo: "condesed".  Since this is generally nice code, it would be worth the extra effort to make sure the comments don't have spelling errors.  That's the only spelling error I noticed.</p>
    </div>