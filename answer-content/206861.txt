<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><p>Your docstrings look a bit weird to me. The first line is usually a summary of what the function does. In your first function that line comes after the parameters and in the second one it does not exist at all. In <code>get_stats</code> when describing the parameter <code>symbols</code> there is no need to describe what the function internally does with it (i.e. split it up). This is an implementation detail (if it mutated the original list that might be worth mentioning but you don't do that).</p></li>
<li><p>I would put the chunking line into its own function, so you could change it if you want to at some time:</p>

<pre><code>def chunks(it, n):
    """Splits `it` into chunks of length `n` (last chunk might be smaller)."""
   return [it[i : i + n] for i in range(0, len(it), n)]
</code></pre></li>
<li><p>The processing part is unnecessarily long. You could just write:</p>

<pre><code>def get_stats(symbols):
    """
    :param symbols: List of symbols (can only send 100 at a time, 
    so these may need to be broken up)
    :return: Pandas DataFrame with stats
    """
    with Pool() as pool:
        return pd.concat(pool.starmap(iex_get_stat, chunks(symbols, 99))))
</code></pre>

<p>Note that when exiting, this calls <code>pool.terminate()</code> instead of <code>pool.close(); pool.join()</code>. If you want to switch to the async methods this means that it will not wait for your workers to finish, but since you are not (I think), it should be fine.</p>

<p><code>Pool</code> also automatically chooses <code>os.cpu_count()</code> when no number of processes is passed.</p></li>
<li><p>I would also move encapsulating each batch within another list into <code>iex_get_stat</code>, so you can just pass it a list instead (which is then actually what it says in the docstring):</p>

<pre><code>def iex_get_stat(batch):
    """ 
    :param batch: batch is a list of stock tickers (ex: ["AAPL", "MSFT", "TSLA"]
    Gets and returns DataFrames of stats on a list of stocks 
    """
    return Stock([batch], output_format="pandas").get_key_stats().T
</code></pre></li>
</ul>
    </div>