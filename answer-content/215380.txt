<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Empty pattern should only match empty text</h3>

<p><code>isMatch("aa", "a")</code> returns <code>true</code>, when it should be <code>false</code>.
The problem is with this condition: </p>

<blockquote>
<pre><code> if (p.length() == 0) {
     return true;
 }
</code></pre>
</blockquote>

<p>An empty pattern should match only an empty text:</p>

<pre><code> if (p.isEmpty()) {
     return s.isEmpty();
 }
</code></pre>

<p>Notice that I replaced <code>s.length() == 0</code> with <code>s.isEmpty()</code>.
This is a more natural way to check if a string is empty.</p>

<h3>Use better variable names</h3>

<p>Instead of <code>s</code> and <code>p</code> it would be more natural to call them <code>text</code> and <code>pattern</code>.</p>

<p>The function <code>isNextCharStarred</code> is always used on the pattern,
but its parameter is called <code>s</code>, which is the same name as the variable used for text in the other function. Even <code>p</code> would have been less confusing. <code>pattern</code> would be nice and natural.</p>

<h3>Eliminate <code>hasPatternBeenEaten</code></h3>

<p>The parameter <code>hasPatternBeenEaten</code> looked a bit suspicious to me.
Let's take a closer look.</p>

<p>The value of the variable is only read in one place in the code.
Let's look at the piece code just before that:</p>

<blockquote>
<pre><code> if (isNextCharStarred(p)) {
     // will always return from this block
 }
 if (s.charAt(0) == p.charAt(0)) {
     return ...
 }
 if (hasPatternBeenEaten) {
     return false;
 }
</code></pre>
</blockquote>

<p>That is:</p>

<ul>
<li>If the pattern starts with <code>X*</code> (where <code>X</code> is any letter), the first <code>if</code> block will return.</li>
<li>If the pattern doesn't start with <code>X*</code>, and the first characters match, the second <code>if</code> block will return.</li>
<li>If the pattern doesn't start with <code>X*</code>, and the first characters don't match, then we need not look further: the pattern doesn't match, we can <code>return false</code>.</li>
</ul>

<p>Therefore, the <code>hasPatternBeenEaten</code> is unnecessary, and can be safely eliminated.</p>

<h3>Simplify</h3>

<p>With the above changes, the code will look more like this:</p>

<pre><code>  private boolean isMatch(String text, String pattern) {
    if (pattern.isEmpty()) {
      return text.isEmpty();
    }

    if (text.isEmpty()) {
      if (isNextCharStarred(pattern)) {
        return isMatch(text, pattern.substring(2));
      }
      return pattern.isEmpty();
    }

    if (isNextCharStarred(pattern)) {
      if (text.charAt(0) != pattern.charAt(0)) {
        return isMatch(text, pattern.substring(2));
      }
      return isMatch(text.substring(1), pattern)
        || isMatch(text, pattern.substring(2));
    }

    if (text.charAt(0) == pattern.charAt(0)) {
      return isMatch(text.substring(1), pattern.substring(1));
    }

    return false;
  }
</code></pre>

<p>This can probably be written simpler, by rearranging the conditions and extracting common patterns.</p>

<p>First of all the second <code>pattern.isEmpty()</code> condition is redundant,
because at that point we already know that <code>pattern</code> is not empty,
due to the very first condition in the method.</p>

<p>Next, we can extract the common condition <code>text.charAt(0) == pattern.charAt(0)</code> to a variable <code>firstMatch</code>, and flatten the <code>if</code> conditions to direct <code>return</code> statements, like this:</p>

<pre><code>if (pattern.isEmpty()) {
  return text.isEmpty();
}

if (text.isEmpty()) {
  return isNextCharStarred(pattern) &amp;&amp; isMatch(text, pattern.substring(2));
}

boolean firstMatch = text.charAt(0) == pattern.charAt(0);

if (isNextCharStarred(pattern)) {
  return firstMatch &amp;&amp; isMatch(text.substring(1), pattern)
    || isMatch(text, pattern.substring(2));
}

return firstMatch &amp;&amp; isMatch(text.substring(1), pattern.substring(1));
</code></pre>

<p>Lastly, we can generalize <code>firstMatch</code> to include the case of empty text,
which will make the second <code>if</code> redundant:</p>

<pre><code>if (pattern.isEmpty()) {
  return text.isEmpty();
}

boolean firstMatch = !text.isEmpty() &amp;&amp; text.charAt(0) == pattern.charAt(0);

if (isNextCharStarred(pattern)) {
  return firstMatch &amp;&amp; isMatch(text.substring(1), pattern)
    || isMatch(text, pattern.substring(2));
}

return firstMatch &amp;&amp; isMatch(text.substring(1), pattern.substring(1));
</code></pre>
    </div>