<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This is my first post here, but I thought I might give this one a shot. </p>

<ul>
<li><p>Your code could be made more user friendly by providing custom error messages.</p>

<ul>
<li>When you get the filename from the command line arguments, you assume that the user will provide at least one command line argument. You could provide a helpful error message if they don't. </li>
<li>If opening a file fails for some reason (probably that the file doesn't exist at all), you could provide a custom print-out.  </li>
<li>My example uses <code>expect()</code> as an example, but in code where user-friendliness is actually a goal, you would probably want to use <code>eprintln!("error message here")</code> and <code>std::process::exit(1)</code> to quit the program. That way, you don't get rust's extra panic messages which a user shouldn't have to understand. </li>
</ul></li>
<li><p>You don't actually have to allocate a <code>Vec</code> to read the command line arguments, you can use the <code>.nth</code> method on the <code>Args</code> iterator. </p></li>
<li><p>You don't need the <code>trim()</code> call, because the <code>lines()</code> iterator already removes the newlines. </p></li>
<li><p>If you are looking to make the code cleaner, you could open the file for reading with <code>File::open</code>, and open it for writing with <code>File::create</code>.</p></li>
<li><p>I don't know how to significantly improve the performance of your code.</p>

<ul>
<li>The biggest thing that I notice is that when you write the processed sequence of numbers to the file, you call <code>write!</code> on every line. This means that you talk to the OS every time you write a number. This could be made faster by using BufWriter, which would let you talk to the file only once. Alternatively, you could construct your output string while you are <em>reading</em> the file.</li>
</ul></li>
</ul>

<pre><code>use std::env;
use std::fs::File;
use std::io::{BufReader, BufRead};
use std::io::Write;

fn main() {
    let file_path = &amp;env::args().nth(1).expect("must provide an input file");

    let file = File::open(file_path).expect("failed to open input file");

    let doubled_contents: String = BufReader::new(file).lines()
        .map(|line| {
            let number = line.unwrap().parse::&lt;i32&gt;().expect("failed to parse file");
            format!("{}\n", number*2)
        })
        .collect();

    let mut output_file = File::create(file_path).expect("failed to open output file");
    write!(output_file, "{}", doubled_contents).expect("could not write output");
}

</code></pre>
    </div>