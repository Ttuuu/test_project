<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Observations</h3>

<ul>
<li>The class is not thread-safe, so why is method <code>doubleBackingArraySize</code> synchronized?</li>
<li>All methods perform some sort of redundancy in circular incrementation and decrementation. This kind of arithmetic could be placed in 2 separate methods, which you would then call in the other methods to have more DRY code.</li>
<li>Deciding when to allocate more space is a repeating code block that could be placed into a helper method.</li>
<li>You present a great set of unit tests.</li>
</ul>

<hr>

<h3>Circular arithmetic</h3>

<p>These could be the reusable helpers methods. Naming conventions conform Java's implementation of <a href="http://fuseyism.com/classpath/doc/java/util/concurrent/ArrayBlockingQueue-source.html" rel="nofollow noreferrer">ArrayBlockingQueue</a>.</p>

<pre><code>final int inc(int i) {
    return ++i % items.length;
}

final int dec(int i) {
    return (--i + items.length) % items.length;
}
</code></pre>

<hr>

<h3>DRY</h3>

<p>Put the following recurring code into a helper:</p>

<blockquote>
<pre><code>if ((nextIdx + 1) % backingArray.length == firstIdx) {
    doubleBackingArraySize();
}
</code></pre>
</blockquote>

<pre><code>final void CheckArrayCapacity() {
    if ((nextIdx + 1) % backingArray.length == firstIdx) {
        doubleBackingArraySize();
    }
}
</code></pre>

<hr>

<h3>Refactoring Code</h3>

<p>For instance, <code>addFirst</code> could be written as:</p>

<pre><code>public void addFirst(T x) {
    CheckArrayCapacity();
    firstIdx = dec(firstIdx);
    backingArray[firstIdx] = x;
}
</code></pre>

<p>instead of:</p>

<blockquote>
<pre><code>public void addFirst(T x) {
    if ((nextIdx + 1) % backingArray.length == firstIdx) {
        doubleBackingArraySize();
    }

    firstIdx -= 1;
    // Note: in Java -1 % n == -1
    if (firstIdx &lt; 0) {
        firstIdx += backingArray.length;
    }
    backingArray[firstIdx] = x;
}
</code></pre>
</blockquote>

<p>All other methods could be written in a succinct way as above.</p>
    </div>