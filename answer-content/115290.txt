<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I would recommend your outputs be flops. It would be a cleaner output signal and easier to do timing analyses. It takes time (few nano seconds) to calculate the <code>tx</code> value after the clock with combinational logic. During that time the intermediate values are being transmitted and causing noise. This noise will can get worse from resistance an capacitance in your USB cable; lowers the signal quality. It seems your running at low speeds, so you wouldn't see a problem, but at higher speeds you may run into trouble. </p>

<p>Be aware that many synthesizers treat conditional operators (the <code>? :</code> syntax) as explicit 2:1 muxes. So your current <code>tx</code> logic will always be a chain of 2:1 muxes even when a 4:1 is more suitable. A case statement within an always block tend to synthesize more optimally. I have a more detail answer for <code>? :</code> vs <code>case()</code> on <a href="https://electronics.stackexchange.com/a/208129/17779">here</a> on Electronics StackExchange.</p>

<p>Usually a FSM is written as a case statement; not if-else statements. The synthesizer doesn't really care. It is more of a common practice with RTL designers. It makes the FSM easier to identify and control how it synthesizes (full_case, parallel_case, onehot, encoding, etc.).</p>

<p>For a more optimzed design, your code should look something like the below. Or you can use two always blocks (my preference); one for calculating the next states for the flops, the other for simple flop assignment.</p>

<pre><code>module uart_send #(parameter BAUD_RATE = 9600,
                   parameter CLOCK_SPEED_MHZ = 100)
                  (input [7:0] data_byte, 
                  input start_send, 
                  input clk, 
                  output reg tx, // &lt;-- reg outputs
                  output reg ready); // &lt;-- reg outputs

  /* ... local parameter and reg declarations here ... */

  always @(posedge clk) begin
    case(state)
      IDLE : begin
          /*your IDLE code here*/
        end
      START_BIT : begin
          /*your START_BIT code here*/
        end
      END_BIT : begin
          /*your END_BIT code here*/
        end
      DATA_BIT : begin
          /*your DATA_BIT code here*/
        end
    endcase
  end

endmodule
</code></pre>

<hr>

<p>I will also suggest changing the <code>uart_send</code> instantiation form connect by port order to connect by name.</p>

<pre><code>uart_send sender("X", count == 100000000, clk, tx, ready);
</code></pre>

<p>to (port order does not matter)</p>

<pre><code>uart_send sender( .data_byte("X"), .start_send(count == 100000000),
                  .clk(clk), .tx(tx), .ready(ready) );
</code></pre>

<p>or even cleaner (width matching)</p>

<pre><code>wire [7:0] data_byte = "X";
wire start_send = (count == 100000000);
uart_send sender( .data_byte(data_byte), .start_send(start_send),
                  .clk(clk), .tx(tx), .ready(ready) );
</code></pre>

<p>I believe you can abbreviate matching name and size to just <code>.name</code> (ex <code>.clk</code> is the same as <code>.clk(clk)</code>) but I do not remember if that if Verilog or an added feature in SystemVerilog. I not have my copy if the LRMs with me.</p>

<pre><code>wire [7:0] data_byte = "X";
wire start_send = (count == 100000000);
uart_send sender( .data_byte, .start_send, .clk, .tx, .ready );
</code></pre>
    </div>