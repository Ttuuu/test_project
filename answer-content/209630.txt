<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>1. Bugs</h3>

<ol>
<li><p>If any item has weight greater than <code>max_pm</code>, no solution is possible but the code may return a solution anyway. It would be more robust to raise an exception in this case.</p></li>
<li><p>This condition is wrong:</p>

<pre><code>len(current_packing) &lt; solution
</code></pre>

<p>Here <code>len(current_packing)</code> is an <code>int</code> but <code>solution</code> is a <code>list</code> so in Python 2.7, where you can compare any two values even if they have different types, this always evaluates to <code>True</code>. This can cause the code to return a worse solution when a better solution was discovered earlier. The condition should be:</p>

<pre><code>len(current_packing) &lt; len(solution)
</code></pre>

<p>In Python 3 you couldn't have missed this bug because you would have got an exception:</p>

<pre class="lang-none prettyprint-override"><code>TypeError: '&lt;' not supported between instances of 'int' and 'list'
</code></pre></li>
</ol>

<h3>2. Review</h3>

<ol>
<li><p>The use of the <code>print</code> statement suggests that you are using Python 2, but this version will <a href="https://www.python.org/dev/peps/pep-0373/#update" rel="nofollow noreferrer">no longer be supported from 2020</a>. It would be better to use Python 3. Even if you are stuck on Python 2 for some reason, it would be better to use <code>from __future__ import print_function</code> so that your code can more easily be ported to Python 3 when the time comes.</p></li>
<li><p>There's no docstring. What does <code>bin_pack</code> do? What arguments does it take? What does it return?</p></li>
<li><p>Returning <code>None</code> when there is no solution is risky—the caller might forget to check. It is more robust to handle an exceptional case by raising an exception.</p></li>
<li><p>Some of the names could be improved—since this is a <em>bin</em> packing, the thing being packed ought to be called <code>bin</code> rather than <code>pack</code>. The names <code>min_pm</code> and <code>max_pm</code> are quite obscure: what does <code>pm</code> stand for? Names like <code>min_weight</code> or <code>min_cost</code> or <code>min_size</code> would be clearer.</p></li>
<li><p>Getting the weight of the items using <code>item[3]</code> is not very flexible—it forces the caller to represent items in a particular way. It would be better for <code>bin_pack</code> to take a function that can be applied to the item to get its weight. Then the caller could pass <a href="https://docs.python.org/3/library/operator.html#operator.itemgetter" rel="nofollow noreferrer"><code>operator.itemgetter(3)</code></a>.</p></li>
<li><p>Calling the <code>remove</code> method on a list is not efficient: this method searches along the list to find the first matching item, which takes time proportional to the length of the list. In all the cases where the code uses <code>remove</code>, in fact the item to be removed is the last item in the list and so the <code>pop</code> method could be used instead.</p></li>
<li><p>It's not clear why the code restores the item at the next-to-last position in the list of items:</p>

<pre><code>items.insert(-1, item)
</code></pre>

<p>Since the item came from the last position in the list, using <code>items.pop()</code>, I would have expected it to be put back at the last position (not the next-to-last) by calling <code>items.append(item)</code>.</p></li>
<li><p>There are some cases where the same information has to be recomputed over and over again: (i) before returning a solution, the code have to check whether all bins have the minimum weight. But this fact could be remembered as part of the current state of the algorithm, so that it doesn't have to be recomputed all the time. (ii) Before deciding whether an item can go into a bin, the code adds up the weights of all the items in the bin. But again, the current weight of each bin could be remembered.</p></li>
<li><p>Making a deep copy of the solution ends up copying out the contents of the items as well as their organization into the solution. This is unnecessary and possibly harmful—in some use cases the items may not be copyable. A two-level copy is all that's needed here.</p></li>
<li><p>A bunch of difficulties arise because <code>bin_pack</code> is recursive: (i) passing <code>min_pm</code> and <code>max_pm</code> through all the recursive calls even though these never change; (ii) initializing <code>current_packing</code> on every recursive call even though this ought to only need to be done once; (iii) the best solution has to be pass and returned through all the recursive calls. These difficulties could all be avoided by defining a local function that does the recursion. See below for how you might do this.</p></li>
<li><p>There is an easy small speedup if you prune branches of the search that can't get you a better solution. See the revised code for how to do this.</p></li>
</ol>

<h3>3. Revised code</h3>

<pre><code>def bin_pack(items, weight, min_weight, max_weight):
    """Pack items (an iterable) into as few bins as possible, subject to
    the constraint that each bin must have total weight between
    min_weight and max_weight inclusive.

    Second argument is a function taking an item and returning its
    weight.

    If there is no packing satisfying the constraints, raise
    ValueError.

    """
    items = [(item, weight(item)) for item in items]
    if any(w &gt; max_weight for _, w in items):
        raise ValueError("No packing satisfying maximum weight constraint")
    bins = []                   # current packing in the search
    bin_weights = []            # total weight of items in each bin
    best = [None, float('inf')] # [best packing so far, number of bins]
    def pack():
        if best[1] &lt;= len(bins):
            return # Prune search here since we can't improve on best.
        if items:
            item, w = item_w = items.pop()
            for i in range(len(bins)):
                bin_weights[i] += w
                if bin_weights[i] &lt;= max_weight:
                    bins[i].append(item)
                    pack()
                    bins[i].pop()
                bin_weights[i] -= w
            if len(bins) + 1 &lt; best[1]:
                bins.append([item])
                bin_weights.append(w)
                pack()
                bin_weights.pop()
                bins.pop()
            items.append(item_w)
        elif all(w &gt;= min_weight for w in bin_weights):
            best[:] = [[bin[:] for bin in bins], len(bins)]
    pack()
    if best[0] is None:
        raise ValueError("No packing satisfying minimum weight constraint")
    return best[0]
</code></pre>

<p>Because this needs to run in Python 2.7, I had to make <code>best</code> into a list so that it can be updated from inside the locally defined function <code>pack</code>. In Python 3 we'd have two variables:</p>

<pre><code>best = None
best_bins = float('inf')
</code></pre>

<p>and then inside <code>pack</code> we could declare these as nonlocal variables:</p>

<pre><code>nonlocal best, best_bins
</code></pre>

<p>and just assign to them like any other variables. But this doesn't work in Python 2.7 because there's no equivalent of the <code>nonlocal</code> statement.</p>
    </div>