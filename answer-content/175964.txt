<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><em>no chance of introducing a bug at this point</em> - Oh ye of little faith :) there will always be bugs. Always. But seriously, this is very good for the most part. I only have a few suggestions.</p>

<p>Since your function returns a bool, I would suggest renaming it to <code>HasNoValue(...)</code>.</p>

<p>Your function also has too many responsibilities. What happens when you support more controls or types? You'd have to make this function much longer. I'd recommend making each type have its own validation check.</p>

<p>Also, I would host these validation checks in a separate module called <code>Validation</code>.</p>

<p>For each type, you could name its function to something like <code>TypeHasNoValue</code> like <code>CheckboxHasNoValue</code>. When calling the code, you could use the module name in front to fully qualify it like <code>Validation.CheckboxHasNoValue(...)</code></p>

<p>In module <code>Validation</code>:</p>

<pre><code>Public Function CheckboxHasNoValue(ByRef checkbox As Chekbox) As Boolean
    CheckboxHasNoValue = IsNull(checkbox.Value)
End Function
</code></pre>

<p>I know this might seem like overkill, but if you later want to include something like a default (something like an empty item), then you can also check for that in this function whose responsibility is checking a Checkbox for a value.</p>

<p>In your main module, your function becomes something like:</p>

<pre><code>Public Function HasNoValue(ObjectToTest As Object) As Boolean

    Dim noVal As Boolean

    NoValue = True 

    If ObjectToTest Is Nothing Then
        noVal = True
    Else
        Select Case TypeName(ObjectToTest)
            Case Is = "CheckBox"
                noVal = Validation.CheckboxHasNoValue(ObjectToTest)

            Case Is = "ComboBox"
                noVal = Validation.ComboBoxHasNoValue(ObjectToTest)

            Case Is = "Label"
                noVal = Validation.LabelHasNoValue(ObjectToTest)

            Case Is = "Listbox"
                noVal = Validation.ListboxHasNoValue(ObjectToTest)

            Case Is = "Recordset"    '* ADO
                noVal = Validation.RecordsetHasNoValue(ObjectToTest)

            Case Is = "Recordset2"    '* DAO
                noVal = Validation.Recordset2HasNoValue(ObjectToTest)

            Case Is = "TextBox"
                noVal = Validation.TextBoxHasNoValue(ObjectToTest)

            Case Else
                ' Only using native access types, not activex, so there shouldn't be anything here
                ' Should I err.Raise ?

        End Select

    End If

    NoValue = noVal

 End Function
</code></pre>

<p>As for your question about Case Else, yes I think you should have one. But about the behavior, that really depends on your application. Do you have error handling? Do you have a log? Do you just want to silently fail because maybe it's not critical? It really depends. But, yes, you should have one for completion sake.</p>
    </div>