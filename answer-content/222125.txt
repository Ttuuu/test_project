<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><p>List lookup is faster than dict lookup:</p>

<pre><code>$ python -m timeit -s "c = {i: i for i in range(10)}" "c[3]"
10000000 loops, best of 5: 30 nsec per loop
$ python -m timeit -s "c = {i: i for i in range(10)}" "c[9]"
10000000 loops, best of 5: 30.2 nsec per loop

$ python -m timeit -s "c = [i for i in range(10)]" "c[3]"
10000000 loops, best of 5: 26.3 nsec per loop
$ python -m timeit -s "c = [i for i in range(10)]" "c[9]"
10000000 loops, best of 5: 26.6 nsec per loop
</code></pre></li>
<li><p>Removing the <code>if</code> and instead using <code>zip</code> yields a speed up too.</p>

<p>It doesn't matter too much whether you build the list with <code>[] * len(input_)</code> or using <code>itertools.cycle</code>.</p>

<p>It does matter that the tables be the second item in the zip, otherwise the speed can fluctuate to being slower than 'Overkill'.</p></li>
<li>Replacing <code>reversed</code> with a slice is the same speed, even though it removes a function call.</li>
<li>It doesn't look like tuple lookup is faster than list lookup.</li>
</ul>

<p>And so this is the fastest I could get:</p>

<pre><code>import itertools


class Luhn:
    CHECK_DIGIT_LUT = ("0", "9", "8", "7", "6", "5", "4", "3", "2", "1")
    SUM_MOD10_LUT = [
        {str(j): (i + j) % 10 for j in range(10)}
        for i in range(10)
    ]
    SUM_DOUBLE_MOD10_LUT = [
        {str(j): (i + (0, 2, 4, 6, 8, 1, 3, 5, 7, 9)[j]) % 10 for j in range(10)}
        for i in range(10)
    ]

    @classmethod
    def calculate_lut_overkill(cls, input_):
        """Calculate the check digit using Luhn's algorithm"""
        sum_ = 0
        for digit, table in zip(
            reversed(input_),
            itertools.cycle([
                cls.SUM_DOUBLE_MOD10_LUT,
                cls.SUM_MOD10_LUT,
            ]),
        ):
            sum_ = table[sum_][digit]
        return cls.CHECK_DIGIT_LUT[sum_]
</code></pre>

<p>My timings were:</p>

<pre><code>LuhnBase 0.581
LuhnOverkill 0.279
LuhnPeilList 0.271
LuhnPeilTables 0.201
LuhnPeilAltTables 0.202
LuhnPeilItertools 0.207
LuhnPeilAltItertools 0.203
LuhnPeilSlice 0.204
</code></pre>
    </div>