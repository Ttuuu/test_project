<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Note that, if you just remove the tag <code>Response</code> from all your types (including unifying the types <code>CoordinateResponse</code> and <code>Coordinate</code> which seem like they ought to be a single type), it's already a lot more readable:</p>

<pre><code>toCoordinate :: Geo -&gt; Coordinate
toCoordinate (Geo (Result [Location coord]:_)) = coord
toCoordinate _ = Coordinate 0 0
</code></pre>

<p>Also, the <code>Location</code> newtype doesn't seem to be serving any purpose, so maybe <code>Location</code> and <code>Coordinate</code> should just be the same type, too, which would remove a level.</p>

<p>Otherwise, what you've written is pretty idiomatic.  It's possible to use <code>coerce</code> to "cut through" all of the newtypes, so you could write:</p>

<pre><code>import Data.Coerce

toCoordinate' :: GeoResponse -&gt; Coordinate
toCoordinate' gr = case coerce gr of
  [CoordinateResponse lat lng]:_ -&gt; Coordinate lat lng
  _                              -&gt; Coordinate 0 0
</code></pre>

<p>or if <code>CoordinateResponse</code> and <code>Coordinate</code> were the same type:</p>

<pre><code>toCoordinate' :: Geo -&gt; Coordinate
toCoordinate' gr = case coerce gr of
  [coord]:_ -&gt; coord
  _         -&gt; Coordinate 0 0
</code></pre>

<p>That's obviously shorter, though it may hide what you're doing.  It seems important that you are pattern matching against the first of (possibly many) <code>ResultResponse</code> values but requiring that response to consist of a single <code>LocationResponse</code>, and that's not so obvious from this version.</p>
    </div>