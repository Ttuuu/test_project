<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>On the whole, I quite like the approach.  There's a few things to consider.</p>
<h1>Test Size</h1>
<p>Your first happy path test seems like it's testing quite a lot more than if the grid is initialized...</p>
<blockquote>
<pre><code>[Fact]
public void WhenMessageIsValid_InitializesGrid()
{
   var input = Lines(
       "5 5",
       "1 2 N",
       "LMLMLMLMM",
       "3 3 E",
       "MMRMMRMRRM");
   var output = _sut.HandleMessage(input);

   output.Should().Be(Lines(
       "1 3 N",
       "5 1 E"));
}
</code></pre>
</blockquote>
<p>It's actually testing if two different rovers can be put on the grid and moved around it, covering all possible direction changes.  I'd expect this to be more focussed.</p>
<h1>Naming</h1>
<p>Naming's always hard, however it's quite important.  I'm not sure <code>MessageParser</code> is the right name for your high level class.  I'd expect a message parser to take in a message and then return some kind of decoded model to represent the message, for example a list of commands (CreateGrid(5,5), AddRover(1,2,N), MoveRover(id), TurnRover(id, direction) etc).  You parser is actually responsible for both decoding the message and executing each of the commands.  This feels  a bit misleading.</p>
<h1>Direction</h1>
<p>Your direction class has public three properties <code>Left</code>,<code>Right</code>,<code>Current</code>, which identify the direction string.  This is really an implementation detail of the class, I'd consider if these really need to be public, or could they be private.  Clients all use the <code>TurnLeft</code>/<code>TurnRight</code> methods.</p>
<p>There's an overlap between the behaviour of <code>TurnLeft</code>, <code>TurnRight</code> and <code>Create</code>.  All three methods convert from a string representation (N) to a Direction instance North.  Whilst the <code>Turn</code> methods do it via a lookup, <code>Create</code> uses a switch.  It seems like this could be consolidated to take one approach (Turn could rely on create, or create could perform a lookup and throw an error if it doesn't exist).</p>
<p>Whilst the list is small, so iterating through it should be fast, I'd still tend to represent this type of lookup as a Map / Dictionary.  Using a dictionary, the implementation might look like this:</p>
<pre><code>private static Dictionary&lt;String, Direction&gt; validDirections = new Dictionary&lt;string, Direction&gt;
{
    {"N", North },
    {"E", East },
    {"S", South },
    {"W", West }
};

private static Direction LookupDirection(string encodedDirection)
{
    if (validDirections.TryGetValue(encodedDirection, out Direction direction))
    {
        return direction;
    }
    throw new ArgumentException($"Invalid direction {encodedDirection}", nameof(encodedDirection));
}

public static Direction create(String encodedDirection)
{
    return LookupDirection(encodedDirection);
}

public Direction TurnLeft()
{
    return LookupDirection(Left);
}

public Direction TurnRight()
{
    return LookupDirection(Right);
}
</code></pre>
    </div>