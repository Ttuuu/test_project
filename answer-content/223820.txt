<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your five functions only differ by the predicate used to test each character, so you could have a single one parametrized by said predicate:</p>

<pre><code>def fulfill_condition(predicate, string):
    for character in string:
        if predicate(character):
            return True
    return False


if __name__ == '__main__':
    s = input()
    print(fulfill_condition(str.isalnum, s))
    print(fulfill_condition(str.isalpha, s))
    print(fulfill_condition(str.isdigit, s))
    print(fulfill_condition(str.islower, s))
    print(fulfill_condition(str.isupper, s))
</code></pre>

<p>Note that you don't need to convert the string to a list for this to work, strings are already iterables.</p>

<p>Now we can simplify <code>fulfill_condition</code> even further by analysing that it applies the predicate to each character and returns whether any one of them is <code>True</code>. This can be written:</p>

<pre><code>def fulfill_condition(predicate, string):
    return any(map(predicate, string))
</code></pre>

<p>Lastly, if you really want to have 5 different functions, you can use <a href="https://docs.python.org/3/library/functools.html#functools.partial" rel="nofollow noreferrer"><code>functools.partial</code></a>:</p>

<pre><code>from functools import partial


func_alnum = partial(fulfill_condition, str.isalnum)
func_isalpha = partial(fulfill_condition, str.isalpha)
func_isdigit = partial(fulfill_condition, str.isdigit)
func_islower = partial(fulfill_condition, str.islower)
func_isupper = partial(fulfill_condition, str.isupper)
</code></pre>
    </div>