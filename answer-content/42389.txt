<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Language Usage Problems</h3>

<p>You call <code>gets_s()</code> with only one parameter.  It expects two parameters — the second parameter is supposed to be the size of the buffer.  I would be surprised that this compiled at all.</p>

<p>You tagged this question as <a href="/questions/tagged/c" class="post-tag" title="show questions tagged 'c'" rel="tag">c</a>, and it is indeed <em>mostly</em> C.  However, you <code>#include &lt;cstdio&gt;</code>, which is a C++ header file, instead of <code>&lt;stdio.h&gt;</code>, which is what you should use in C.  (<code>&lt;cstdio&gt;</code> provides declarations for C-style I/O functions to C++ programs, for compatibility with legacy C code.)</p>

<p>If you <code>#include &lt;stdio.h&gt;</code>, I don't believe you need <code>&lt;conio.h&gt;</code>, which is Windows-specific.</p>

<p><code>system("pause")</code> works on Windows, but is not portable.  <a href="https://stackoverflow.com/a/4869519/1157100"><code>getchar()</code></a> would be a portable alternative.</p>

<p>The <code>check_status()</code> function is defined but never used.  If you compile with warnings enabled, your compiler should tell you that <code>char buffer[80][90]</code> in <code>main()</code> is an unused variable.</p>

<h3>Logic Bug</h3>

<p>Compare the signature of this function</p>

<pre><code>float get_total_income(float wage, float div, float intre, float other, int dep)
{
    …
}
</code></pre>

<p>against the way you call it:</p>

<pre><code>income_tax = get_total_income(wages, other_income, dividends, interest, dependents);
</code></pre>

<p>Notice the discrepancy?</p>

<h3>Code Organization</h3>

<p>You input routines include <strong>nearly identical code, repeated four times</strong>.  Instead, you should be able to define a single function to be used four times, like this:</p>

<pre><code>wages = prompt_amount_in_category("wages");
other_income = prompt_amount_in_category("other income");
interest = prompt_amount_in_category("interest");
dividends = prompt_amount_in_category("dividends");
</code></pre>

<p>Your functions could be named better.  For example, <code>dependents_loop()</code> would be better named <code>prompt_number_of_dependents()</code>.  It reads better as English and is more descriptive.  Also, the caller is more interested in the purpose of the function; the fact that there happens to be a loop inside the function is an implementation detail that doesn't deserve to be part of the function's name.</p>

<p><code>get_total_income()</code> is a misnomer — it actually does much more than that.  After calculating the total income, it also asks the user for the marital/filing status, increments a global counter based on that answer, calculates the tax, and displays a report.  <strong>A function should do <em>one</em> thing only,</strong> and its name should reflect its purpose.</p>

<pre><code>enum filing_status {
    SINGLE,
    MARRIED_FILING_JOINTLY,
    MARRIED_FILING_SEPARATELY,
    SINGLE_HEAD_OF_HOUSEHOLD
};
#define FILING_STATUS_MAX (SINGLE_HEAD_OF_HOUSEHOLD + 1)

float get_total_income(float wage, float div, float intre, float other, float dep)
{
    return wage + div + intre + other + dep;
}

enum filing_status prompt_filing_status()
{
    char status[10];
    do {
        printf("\n\nWhat is your Status: ");
        gets_s(status, sizeof(status));
        switch (status[0]) {
          case 'S': case 's':
            switch (status[1]) {
              case '\0':
                return SINGLE;
              case 'H': case 'h':
                return SINGLE_HEAD_OF_HOUSEHOLD;
            }
            break;
          case 'M': case 'm':
            switch (status[1]) {
              case 'J': case 'j':
                return MARRIED_FILING_JOINTLY;
              case 'S': case 's':
                return MARRIED_FILING_SEPARATELY;
            }
            break;
        }
        printf("\n\n INCORRECT STATUS. Enter (S, MJ, MS, or SH) \n\n");
    } while (1);
}

float calculate_tax(float income, enum filing_status status)
{
    …
}

int main() {
    int return_counts[FILING_STATUS_MAX] = { 0 };
    …

    wages = prompt_amount_in_category("wages");
    other_income = prompt_amount_in_category("other income");
    interest = prompt_amount_in_category("interest");
    dividends = prompt_amount_in_category("dividends");
    dependants = -2000 * prompt_number_of("dependants");

    //function to indicate the status and other things. 
    enum filing_status status = prompt_filing_status();
    return_counts[status]++;

    total_income = get_total_income(wages, dividends, interest, other_income, dependents);
    income_tax = calculate_tax(total_income, status);


    printf("\n\n\n\t YOUR WAGES: %.2f", wages);
    printf("\n\t YOUR OTHER INCOME: %.2f", other_income);
    printf("\n\t YOUR DIVIDENS: %.2f", dividends);
    printf("\n\t YOUR INTEREST: %.2f", interest);
    printf("\n\t YOUR INCOME AFTER DEPENDANTS: %.2f", total_income);

    …
}
</code></pre>

<h3>Accountancy Errors</h3>

<p>According to your program, a single filer with 9000.00 of income owes 468.00 in income tax.  A single filer with 9000.01 in income owes 747.00 in income tax.  That's the most regretful cent that anyone has ever earned!  Tax brackets don't work like that — each marginal tax rate only applies to the part of the income that falls within that tax bracket, not to the entire income.</p>

<p>I know that this is just a toy program, but such an error makes it awkward for me to suggest a way to reduce the amount of code to compute the tax.  I could either propose a buggy solution that is compatible with your original, or a plausible solution that is hard to compare against the original code.  Therefore, I'll just end the review here without improving <code>calculate_tax()</code>.</p>
    </div>