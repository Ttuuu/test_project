<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1><code>main</code> guard</h1>

<p>Put the main section of the program begind a <code>if __name__ == "__main__":</code> guard, so you can import this module if needed.</p>

<h1>Spacing</h1>

<p>Your code is very inconsistent about spacing before and after operators and commas. Use a code formatter (like black or yapf) to help you.</p>

<h1>Looping</h1>

<p>Don't loop over the index;</p>

<pre><code>for k in range(0,len(numbers)):
    number = numbers[k]
</code></pre>

<p>can be expressed as:</p>

<pre><code>for number in numbers:
</code></pre>

<h1>Special return value</h1>

<p>You return <code>-1</code> to signal no number has been found. A better return signal would be <code>None</code>, or you could raise a custom exception to signal this.</p>

<h1><code>itertools</code></h1>

<p>Use <code>itertools.count</code> if you need to iterate over an ever increasing number;</p>

<pre><code>a = -1
i= 1
while a == -1:
    if a % 10 != 0:
        a = find_smallest_increasing(number,i)
    i = i + 1
</code></pre>

<p>can be a lot cleaner:</p>

<pre><code>a = None
for i in count(1):
    a = find_smallest_increasing(number,i)
    if a is not None:
        break
</code></pre>

<p>I suggest you see the talk "looping like a pro".</p>

<h1>Control flow</h1>

<pre><code>if max(one,two,three,four,five,six,seven,eight,nine) &gt; 0:
    num = "1"*one+"2"*two+"3"*three+"4"*four+"5"*five+"6"*six+"7"*seven+"8"*eight+"9"*nine
    if int(num) % number == 0:
        if ehd == -1:
            ehd = int(num)
        if int(num) &lt; ehd:
            ehd = int(num)
</code></pre>

<p>can be simplified:</p>

<pre><code>digits = one, two, three, four, five, six, seven, eight, nine
if any(digits):
    num = int("".join(s * d for s, d in zip("123456789", digits))))
    if not num % number:
        if ehd is None or ehd &gt; num:
            ehd = num
</code></pre>

<h1>Alternative approach</h1>

<p>In addition to the previous answers, here are 2 generators that generate the sorted numbers that are descending or ascending:</p>

<pre><code>def pairwise(iterable):
    "s -&gt; (s0,s1), (s1,s2), (s2, s3), ..."
    a, b = tee(iterable)
    next(b, None)
    return zip(a, b)

def make_int(numbers):
"""generates an int from an interable of digits"""
    return int("".join(map(str, numbers)))


def monotonic_naive():
    for i in count():
        number_str = str(i)
        if any(b &lt; a for a, b in pairwise(number_str)):
            if not i % 10:
                if all(a &gt;= b for a, b in pairwise(number_str)):
                    yield i
            continue
        yield i
        if number_str != number_str[::-1]:
            yield int(number_str[::-1])


def monotonic_length(number_length=3):
    if number_length == 0:
        yield 0
        return
    number_list = [0] * number_length
    last_not_9 = number_length - 1

    while True:
        number_list[last_not_9] += 1
        if number_list[0]:
            yield make_int(number_list)
        if number_list[-1] and number_list != number_list[::-1]:
            yield make_int(number_list[::-1])

        for last_not_9 in reversed(range(number_length)):
            if number_list[last_not_9] != 9:
                break
            new_num = number_list[last_not_9 - 1] + 1
            number_list[last_not_9:] = [new_num] * len(number_list[last_not_9:])
        else:  # all 9's
            return


def monotonic():
    yield from range(1, 100) # all numbers with 1 or 2 digits are automatically ascending or descending
    for i in count(3):
        yield from sorted(monotonic_length(i))
</code></pre>

<p>The second form is based on Accumulation's technique. Especially for larger numbers this will go faster than the naive approach.</p>

<p>You can use it like this:</p>

<pre><code>start = time.time()
number_set = set(numbers)
found = 1
for result in monotonic():
    results = set()
    for number in number_set:
        if not result % number:
            print(
                f"{found:03}/{len(numbers)}", 
                round(time.time()-start, 2),  
                number, 
                result, 
                result/number,
            )
            found += 1
            results.add(number)
    number_set -= results

    if not number_set:
        break
</code></pre>

<p>This took about 7 seconds to find the first 151 numbers:</p>

<blockquote>
<pre><code>151/162 7.18 9898 555544442222 56126939.0
</code></pre>
</blockquote>

<p>But the next 5 numbers took 1000s more:</p>

<blockquote>
<pre><code>156/162 1034.38 2178 99999999999999999999990 4.591368227731864e+19
</code></pre>
</blockquote>

<p>after which I stopped it running.</p>
    </div>