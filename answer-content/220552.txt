<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Custom vs. normal enum</h3>

<p>This looks like some kind of custom enum type, but in its current form it's not very useful:</p>

<ul>
<li>All properties in <code>PrinterAttribute</code> are <code>protected</code>, which means that only derived classes can access them. That's not very useful for other code.</li>
<li>A property of type <code>Enum</code> is cumbersome to use because it's too weakly typed. It only tells you that it's an enum, but not which one, so you still don't know which values are valid.</li>
<li>Enum values can already be given a specific numeric value, so you don't need that <code>Value</code> property.</li>
<li><code>NetworkProtocolAttribute.FTP == new NetworkProtocolAttribute(1, "FTP")</code> fails because they're not the same instance. The same goes for calling <code>Equals</code>. You'll want to implement the relevant operators, as well as override the standard <code>Equals</code> method (and with that, also <code>GetHashCode</code>). Implementing <code>IEquatable&lt;T&gt;</code> is also a good idea.</li>
</ul>

<p>Have you considered using a normal enum instead?</p>

<pre><code>[Flags]     // Indicates that this enum is intended to be used as a bitmask
public enum Protocol    // No need to specify int as underlying type
{
    None =  0x00,
    FTP =   0x01,
    LPD =   0x02,
    TCP =   0x04,
    UDP =   0x08,
    HTTP =  0x10,
    SMTP =  0x20,
    // and so on
}

// Use:
var protocol = Protocol.FTP;
protocol.ToString();  // -&gt; "FTP"

var protocols = Protocol.FTP | Protocol.UDP;
protocols.HasFlag(Protocol.UDP);  // -&gt; true

Enum.GetValues(typeof(Protocol)); // -&gt; Protocol[] { None, FTP, LDP, ... }
</code></pre>

<p>You could add <code>[Description("...")]</code> attributes to these values if you really need to, but the enum names themselves are already descriptive enough. If you're using such descriptions for display purposes then that's better done at the UI layer (due to things like localization).</p>

<h3>Other notes</h3>

<ul>
<li>Don't use <code>IList&lt;T&gt;</code> for static read-only properties: it allows other code to modify your list. Use <code>IEnumerable&lt;T&gt;</code>, <code>IReadOnlyCollection&lt;T&gt;</code> or <code>IReadOnlyList&lt;T&gt;</code> instead. Additionally, use an actual <code>ReadOnlyCollection&lt;T&gt;</code> (<code>List&lt;T&gt;</code> has a convenient <code>AsReadOnly</code> method for that).</li>
<li>Properties can be initialized directly: <code>Foo MyProperty { get; } = new Foo();</code>, so you don't need to explicitly define a field and perform a null-check in your getters. That null-check approach isn't thread-safe, bytheway, so if you really do need lazy initialization, use <code>Lazy&lt;T&gt;</code> or <code>LazyInitializer</code> instead.</li>
<li><code>NetworkProtocolAttribute protocol1 = NetworkProtocolAttribute.SMTP_FirstWay;</code> can be shortened to <code>var protocol1 = NetworkProtocolAttribute.SMTP_FirstWay;</code>. This lets the compiler infer the type, so you don't need to write out types twice if it's already obvious from the right-hand side.</li>
<li><code>.Where(...).FirstOrDefault()</code> can be simplified to <code>.FirstOrDefault(...)</code>.</li>
<li>Personally I don't like to use <code>this.</code>. Properties are written in PascalCase, parameters in camelCase, so <code>Value = value;</code> is clear enough for me.</li>
<li>Properties that are meant to be read-only don't need a setter.</li>
<li>Just write <code>Description</code> out full - readability is important, especially in the long run, and writing doesn't take that much time with the help of auto-completion tools.</li>
<li>The names of your classes suggest that they're attributes - special types that are used to attach meta-data to other code. Because you're not inheriting from <code>System.Attribute</code>, that's apparently not what you intended, so you may want to pick different names to avoid confusion.</li>
</ul>

<p>Finally, with regards to the linear lookups in #1 and #3, you can get rid of those by inverting the relationship between the list and the other properties:</p>

<pre><code>public static NetworkProtocolAttribute FTP { get; } = new NetworkProtocolAttribute(1, "FTP");
public static NetworkProtocolAttribute LPD { get; } = new NetworkProtocolAttribute(2, "LPD");
// and so on...

public static IReadOnlyList&lt;NetworkProtocolAttribute&gt; AllProtocols { get; }
    = new List&lt;NetworkProtocolAttribute&gt; {
        FTP,
        LPD,
        // and so on...
    }.AsReadOnly();
</code></pre>

<p>But again, unless you have some specific requirements, I would just use normal enums.</p>
    </div>