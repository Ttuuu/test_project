<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Good first effort.  Coming from Java, you'll find memory management in C new and frustrating:</p>
<h1>Memory management</h1>
<p>You can't just call <code>malloc</code> and directly use the result like this:</p>
<blockquote>
<pre><code>Hand player_hand = malloc(sizeof(Card*) * MAX_CARDS);

for (int i = 0; i &lt; MAX_CARDS; i++) {
    player_hand[i] = NULL;
}
</code></pre>
</blockquote>
<p>If <code>malloc()</code> fails, it will return a null pointer, and that will cause Undefined Behaviour when we reach <code>player_hand[i] = NULL;</code>.  It's vital that we check the result before we use it, perhaps as simple as:</p>
<pre><code>Hand player_hand = malloc(sizeof(Card*) * MAX_CARDS);
if (!player_hand)
    fputs("Memory allocation error!\n", stderr);
    exit(EXIT_FAILURE);
}
</code></pre>
<p>Another thing that's new to Java programmers is the need to <code>free()</code> the memory we allocate.  For a small program like this, we get away with not releasing our memory, as it will all be reclaimed by our OS at program exit, but we'll want to develop good practice for longer-running programs (perhaps we'll want to develop a game server built around this code, for example).</p>
<p>There's a simple rule: every allocation must be paired with a deallocation somewhere in the program.  A large part of C programming is concerned with managing allocations and ensuring there's clear <em>ownership</em> of each one until it is released.</p>
<h1>Error checking</h1>
<p>As well as <code>malloc()</code>, there are other functions whose return value indicates errors and must therefore be checked.  One such example is <code>scanf()</code>, such as here:</p>
<blockquote>
<pre><code>char input;
scanf(" %c", &amp;input);
while(!check_valid(input)) {
    printf("Invalid input. Please enter y/n\n");
    scanf(" %c", &amp;input);
}
</code></pre>
</blockquote>
<p><code>scanf()</code> returns the number of conversions performed, or <code>EOF</code> if there was an I/O failure.  What happens if there is a failure?  (We can force failure, just by closing the input stream.)  <code>input</code> doesn't get assigned, so its value is uninitialised.  Unless it happens to contain a valid response, then we'll loop indefinitely, failing to read input each time.  To fix this, we need to inspect the return value (I'll reorder the loop, so we only need to code this once):</p>
<pre><code>char get_user_response(void)
{
    char input;
    while (scanf(" %c", &amp;input) == 1) {
        if (check_valid(input)) {
            return input;
        }
        printf("Invalid input. Please enter y or n\n");
    }
    fputs("Input error!\n", stderr);
    exit(EXIT_FAILURE);
}
</code></pre>
<h1>Choose which strings are writable</h1>
<p>We have</p>
<pre><code>char* suite_to_string(int suite);
</code></pre>
<p>If we look where we use this, we never need to write to the returned memory - we just use it for printing.  This means we can return a <code>const char*</code> instead, which in turn means that we don't need to allocate memory: we can just return a pointer to a string literal:</p>
<pre><code>#include &lt;assert.h&gt;
#define NOTREACHED(message) 0

const char *suite_to_string(int suite)
{
    switch (suite) {
    case DIAMONDS: return "Diamonds";
    case CLUBS: return "Clubs";
    case SPADES: return "Spades";
    case HEARTS: return "Hearts";
    }
    assert(NOTREACHED("Invalid suit name"));
    return "ERROR";
}
</code></pre>
<p>If we were to declare an <code>enum</code> for the suit, then a good compiler would check that we'd included all the values in the <code>switch</code> (using <code>default</code> would prevent that, which is why I've put the error-handling outside the block).</p>
    </div>