<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Since no information was available about the size of source range being copied</p>
<p>Following grey area in the question is assumed as follows</p>
<ol>
<li><p>Since 191 Rows X 68 copy X 3 columns take around 10 minutes only (with you code), the range is about 191 Rows X 15 Columns in size</p>
</li>
<li><p>since it has been claimed that code is working Correctly. The Cells of the range (irrespective of their row or column positions) is being copied in column A only (below one another). Though it contradicts the statement "automate creation of a data table"</p>
</li>
<li><p>Since the cells of the ranges are being copied and pasted. In test case only formulas are copied.</p>
<p>So the code below will just replicate what your code is doing with some increased efficiency. As I personally don't prefer to keep calculations, event processing and screen updating off (in normal cases) i haven't added that standard lines. However you may use these standard techniques, depending on the working file condition. Make necessary changes regarding Range etc</p>
</li>
</ol>
<p>Code takes only 2-3 seconds to complete with  191 Rows X 15 columns X 68 copies:</p>
<pre><code>Sub test()
Dim SrcWs As Worksheet, DstWs As Worksheet, SrcArr As Variant
Dim Rng As Range, cell As Range, DstArr() As Variant
Dim X As Long, Y As Long, Z As Long, i As Long, LastRow As Long
Dim Chunk60K As Long
Dim tm As Double
tm = Timer
Set SrcWs = ThisWorkbook.Sheets("Input Data")
Set DstWs = ThisWorkbook.Sheets("TrialSheet")

Set Rng = SrcWs.Range("A1:O191")
SrcArr = Rng.Formula
    
LastRow = DstWs.Cells(Rows.Count, "A").End(xlUp).Row + 1
Chunk60K = 0
Z = 1
    For X = 1 To UBound(SrcArr, 1)
    For Y = 1 To UBound(SrcArr, 2)
    For i = 1 To 68
        ReDim Preserve DstArr(1 To Z)
        DstArr(Z) = SrcArr(X, Y)
    
        If Z = 60000 Then  ' To Overcome 65K limit of Application.Transpose
        DstWs.Range("A" &amp; Chunk60K * 60000 + LastRow).Resize(UBound(DstArr, 1), 1).Formula = Application.Transpose(DstArr)
        Chunk60K = Chunk60K + 1
        Z = 1
        ReDim DstArr(1 To 1)
        Debug.Print "Chunk: " &amp; Chunk60K &amp; " Seconds Taken: " &amp; Timer - tm
        Else
        Z = Z + 1
        End If
    
    Next i
    Next Y
    Next X

If Z &gt; 1 Then DstWs.Range("A" &amp; Chunk60K * 60000 + LastRow).Resize(UBound(DstArr, 1), 1).Formula = Application.Transpose(DstArr)

Debug.Print "Seconds Taken: " &amp; Timer - tm
End Sub
</code></pre>
<p>Edit: <strong>With full credit to @TinMan's brilliant suggestion</strong> in his comment, the code has been modified (efficiency improved around 65%). The inherent deficiency in the above code is use of <code>ReDim Preserve</code> within the loop has been removed. This enabled use of 2D array and eliminates necessity of transposing the array. <strong>Again with many thanks to TinMan and acknowledging full credit to TinMan</strong>, The final simplified code as follows.</p>
<pre><code>Sub test()
Dim SrcWs As Worksheet, DstWs As Worksheet, SrcArr As Variant
Dim Rng As Range, cell As Range, DstArr() As Variant
Dim X As Long, Y As Long, Z As Long, i As Long, Lastrow As Long
Dim Repeat As Long
Dim tm As Double
tm = Timer
Set SrcWs = ThisWorkbook.Sheets("Input Data")
Set DstWs = ThisWorkbook.Sheets("TrialSheet")
Set Rng = SrcWs.Range("A1:O191")
SrcArr = Rng.Formula
Repeat = 68
ReDim DstArr(1 To (Repeat * Rng.Count), 1 To 1)
Lastrow = DstWs.Cells(Rows.Count, "A").End(xlUp).Row + 1
Z = 1
    
    For X = 1 To UBound(SrcArr, 1)
    For Y = 1 To UBound(SrcArr, 2)
    For i = 1 To Repeat
    DstArr(Z, 1) = SrcArr(X, Y)
    Z = Z + 1
    Next i
    Next Y
    Next X

DstWs.Range("A" &amp; Lastrow).Resize(UBound(DstArr, 1), 1).Formula = DstArr
Debug.Print "Seconds Taken: " &amp; Timer - tm
End Sub
</code></pre>
    </div>