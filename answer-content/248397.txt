<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<pre><code>pub trait Dispatch {
    fn register_command_listener(
        &amp;mut self,
        command_type: connection::CommandType,
        command_listener: Box&lt;dyn Fn(&amp;connection::Command)&gt;,
    );

    fn handle_command(&amp;mut self, command: connection::Command);
}
</code></pre>
<p>You define a few traits like this. Generally, we don't do this in Rust. Just use the concrete types. So, have references to the <code>Dispatcher</code> struct in your code and not the <code>Dispatch</code> trait.</p>
<pre><code>pub struct Connection&lt;'a&gt; {
    reader: Box&lt;dyn 'a + io::BufRead&gt;,
    writer: Box&lt;dyn 'a + Write&gt;,
    dispatcher: Rc&lt;RefCell&lt;dyn 'a + dispatcher::Dispatch&gt;&gt;,
}
</code></pre>
<p>The use of the dyn is slightly inefficient relative to using generics. Generics would also handle lifetimes a bit more easily due to type inference.</p>
<pre><code>fn poll(&amp;mut self) -&gt; bool {
    let mut buffer = String::new();

    match self.reader.read_line(&amp;mut buffer) {
        Ok(len) =&gt; {
            if len == 0 {
                panic!("Stream disconnected");
            } else {
                print!("&lt; {}", buffer);
                self.dispatch_message(buffer);
                true
            }
        }
        Err(ref e) if e.kind() == io::ErrorKind::WouldBlock =&gt; false,
        Err(e) =&gt; panic!("IO error: {}", e),
    }
}
</code></pre>
<p>This work by registering and calling function handlers. That's common in other languages, but not the best solution in Rust. What you want to do is return an <code>Option&lt;Command&gt;</code> from this function instead of calling dispatch_message. The calling code can than <code>match</code> on the returned value to decide how to respond to it.</p>
<pre><code>let dispatcher = Rc::new(RefCell::new(dispatcher::Dispatcher::new()));

let connection = Rc::new(RefCell::new(connection::Connection::new(
    &amp;stream,
    dispatcher.clone(),
)));
</code></pre>
<p><code>Rc</code> and <code>RefCell</code> are escape hatches that let you avoid the borrow checker. Using them is usually a sign that your design is insufficiently rusty. In this case, you should have <code>Connection</code> take ownership of <code>Dispatcher</code> and then have <code>Client</code> take ownership of <code>Connection</code>. Then you don't need the Rc/RefCell.</p>
    </div>