<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I would recommend using built-in methods when you can. In this case I doesn't look like you need LoDash at all. You can use <code>Object.keys</code> and <code>reduce</code>:</p>

<pre><code>var reverseMapFromMap = function(map, f) {
  return Object.keys(map).reduce(function(acc, k) {
    acc[map[k]] = (acc[map[k]] || []).concat((f || id)(k))
    return acc
  },{})
}

var mapFromReverseMap = function(rMap, f) {
  return Object.keys(rMap).reduce(function(acc, k) {
    rMap[k].forEach(function(x){acc[x] = (f || id)(k)})
    return acc
  },{})
}
</code></pre>

<p>I renamed <code>identity</code> to <code>id</code>, as it is a well known function in functional programming. I don't think it would create confusion, and lets you pass it in one liners easily, like shown above. </p>

<p>The above works with your example <a href="http://jsbin.com/cadig/1/edit" rel="noreferrer">http://jsbin.com/cadig/1/edit</a>. But I would recommend you reverse the arguments, so the callback comes first, and the receiver last, so it works better with composition.</p>

<p>Other than the missing braces in the <code>if</code> statement, I'd say your code looks pretty good. It is quite common though to use one or two letter variables in functional programming, as these transformations shall apply to many things in theory (polymorphism), and we only have a handful of objects. <code>f</code> clearly means "function" for example, and <code>x</code> is any value, where <code>k</code> is a "key". After getting used to these conventions, a line like:</p>

<pre><code>rMap[k].forEach(function(x){acc[x] = (f || id)(k)})
</code></pre>

<p>seems faster to visually parse than:</p>

<pre><code>rMap[key].forEach(function(value) {
  acc[value] = (callback || identity)(key)
})
</code></pre>

<p>Eventually your mind removes the <code>function</code> keyword, and you just see the transformation as it is. In ES6 this becomes even shorter, and calls for a concise one-liner:</p>

<pre><code>rMap[k].forEach(x =&gt; acc[x] = (f || id)(k))
</code></pre>
    </div>