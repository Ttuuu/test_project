<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><a href="https://codereview.stackexchange.com/a/220264/59161">CharlesNRice</a>'s solution has still one flaw. It eagerly enumerates the main collection and since we don't know its length, we better avoid it. Since the other answer already mentions flaws in your code, let me just add this lazy alternative.</p>

<hr>

<p>It's a little bit tricky to make it deferred because you first need to enumerate the main collection and create enumerators for each sub-collection, this is what I use the <code>isQueuePopulated</code> flag for. Then you need to collect them in the <code>queue</code> for as long as you're enumerating the main collection. When this is done, you need to switch to the <code>queue</code>, then you <code>Dequeue</code> the first enumerator, try to <code>MoveNext</code> and if it succeeded, you return <code>Current</code> and <code>Enqueue</code> the enumerator for later.</p>

<pre><code>public static IEnumerable&lt;T&gt; TakeEach&lt;T&gt;(this IEnumerable&lt;IEnumerable&lt;T&gt;&gt; source, int count)
{
    var counter = 0;
    var queue = new Queue&lt;IEnumerator&lt;T&gt;&gt;();
    var mainEnumerator = source.GetEnumerator();
    var isQueuePopulated = false;
    try
    {
        var e = default(IEnumerator&lt;T&gt;);
        while (!isQueuePopulated || queue.Any())
        {
            if (!isQueuePopulated &amp;&amp; mainEnumerator.MoveNext())
            {
                e = mainEnumerator.Current.GetEnumerator();
            }
            else
            {
                isQueuePopulated = true;
            }

            e = isQueuePopulated ? queue.Dequeue() : e;

            if (e.MoveNext())
            {
                queue.Enqueue(e);
                yield return e.Current;

                if (++counter == count)
                {
                    yield break;
                }
            }
            else
            {
                e.Dispose();
            }
        }
    }
    finally
    {
        mainEnumerator.Dispose();
        foreach (var e in queue)
        {
            e.Dispose();
        }

    }
}
</code></pre>
    </div>