<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Keep in mind that the primary focus of this web site is to review your working code and provide suggestions on how to improve the code. Questions about which way is better or worse may be based on opinion and that is off-topic for most of the stack exchange websites.</p>
<p>In answer to your question, it could be a possible optimization that reduces the number of steps, but that isn't clear. You may be missing the point of the interview, which is that you should explain as clearly as possible to the interviewer(s) what you are doing at each step so they understand your problem solving techniques. Please note that the video code looked more like C rather than C++, but could have also been other languages.</p>
<h2>Avoid Using Namespace <code>std</code></h2>
<p>If you are coding professionally you should get out of the habit of using the <code>using namespace std;</code> statement. In an interview you definitely don't want to use this statement because it is unprofessional. The concept of Name Spaces was invented to specifically solve certain problems such as collision of duplicate function names from core code and library code. This <a href="//stackoverflow.com/q/1452721">stack overflow question</a> discusses this in more detail.</p>
<h2>Use Code Blocks in Flow Control Rather Than Single Statements</h2>
<p>Professional coders generally put code blocks or complex statements into if statements, else clauses or loop bodies. The reason for this is to enhance the maintainability of the code. To many bugs have been introduced into code by trying to add one statement to an if statement, else clause or loop. A code maintainer may forget to add the necessary braces so putting them in from the beginning is better. It also makes the code more readable and easier to understand to begin with.</p>
<p>So code like</p>
<pre><code>        int N = mtx.size();
        for (int n = 0 ; n&lt;= N-2; n++)
            for(int m= n+1 ; m&lt;= N-1; m++)
                swap(mtx[n][m], mtx[m][n]);
</code></pre>
<p>is better written as</p>
<pre><code>        size_t N = mtx.size();
        for (size_t n = 0 ; n &lt;= N-2; n++)
        {
            for(size_t m= n + 1 ; m &lt;= N-1; m++)
            {
                std::swap(mtx[n][m], mtx[m][n]);
            }
        }
</code></pre>
<p>Obviously a maintainer of the code can figure out where to add a statement here.</p>
<h2>Horizontal Spacing</h2>
<p>It is common to leave spaces between operator and variable. The horizontal spacing in this code is inconsistent.</p>
<h2>Prefer <code>std::size_t</code> Over <code>int</code> For Loop Control Variables That Index through C++ Container Classes</h2>
<p>While the code in the example from this question will compile and run properly there may be warning messages if the strictest level of compiler switch is used. <code>std::vector.size()</code> returns <code>std::size_t</code> which is unsigned, rather than signed. If the strictest level of switches are used a the following loop might yield the warning message <code>type mismatch</code>.</p>
<pre><code>        for (int n = 0 ; n &lt;= mtx.size() - 2; n++)
        {
            for(int m= n + 1 ; m &lt;= mtx.size() - 1; m++)
            {
                std::swap(mtx[n][m], mtx[m][n]);
            }
        }
</code></pre>
    </div>