<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>If your goal is to implement the conversion functions yourself:</p>

<ol>
<li><p>You are repeating <code>number % base</code> 3 times.  Once in the <code>if</code> statement, once in the <code>switch</code> statement, and once in <code>finalNumber.append()</code>.  You should do the calculation once, and store it as a local variable.</p></li>
<li><p>As noted in the comment, <code>decimalToRandomBase()</code> only works up to base 16.  You could expand this to base 36 by:</p>

<ul>
<li>calculating the character to append, <code>'A' + (number % base - 10)</code>, instead of using a <code>switch</code> statement, or</li>
<li>Using <a href="https://docs.oracle.com/javase/7/docs/api/java/lang/Character.html#forDigit(int,%20int)" rel="nofollow noreferrer"><code>Character.forDigit(value, radix)</code></a> which is the opposite of the <code>Character.getNumericValue()</code> function.  For values 10 and greater, it will return lower case letters, however.</li>
</ul></li>
<li><p>You already have a <code>StringBuilder</code>; you don't need to create a <code>new StringBuilder(finalNumber)</code> in order to <code>.reverse().toString()</code>.  Simply <code>finalNumber.reverse().toString()</code> will work.</p></li>
</ol>

<p>If your goal isn't to implement the conversion functions yourself, you can replace <code>randomBaseToDecimal</code> and <code>decimalToRandomBase</code> with:</p>

<ul>
<li><a href="https://docs.oracle.com/javase/10/docs/api/java/lang/Integer.html#parseInt(java.lang.String,int)" rel="nofollow noreferrer"><code>Integer.parseInt(str, radix)</code></a> - string to int with arbitrary base, and</li>
<li><a href="https://docs.oracle.com/javase/10/docs/api/java/lang/Integer.html#toString(int,int)" rel="nofollow noreferrer"><code>Integer.toString(i, radix)</code></a> - int to string with arbitrary base</li>
</ul>

<hr>

<p>You check twice for a 6th argument: the base to display the answer in.  Once to convert it to an integer (if present), and a second time when printing the answers.  If you initialize the <code>baseOfSolution</code> to <code>10</code>:</p>

<pre><code>    int baseOfSolution = 10;
    if (args.length == 6) {
        baseOfSolution = Integer.parseInt(args[5]);
    }
</code></pre>

<p>then you don't have to check for the existence of the 6th argument to decide between printing out the value in <code>baseOfSolution</code>, or base 10.  You can simply print the solution in <code>baseOfSolution</code>.</p>

<hr>

<p>This chain of if/elseif statements can be replaced by a <code>switch</code> statement.  </p>

<pre><code>    int solutionDec = 0;
    if (operator.equals("+")) {
        solutionDec = number1Dec + number2Dec;
    } else if (operator.equals("-")) {
        solutionDec = number1Dec - number2Dec;
    } else if (operator.equals("x")) {
        solutionDec = number1Dec * number2Dec;
    } else if (operator.equals("/")) {
        solutionDec = number1Dec / number2Dec;
    }
</code></pre>

<p>If the operator isn't one of the listed operations, the program simply outputs zero?  That is unexpected behaviour!  This would be better:</p>

<pre><code>    int solutionDec = 0;
    switch (operator) {
        case "+": 
            solutionDec = number1Dec + number2Dec;
            break;
        case "-":
            solutionDec = number1Dec - number2Dec;
            break;
        case "x":
            solutionDec = number1Dec * number2Dec;
            break;
        case "/":
            solutionDec = number1Dec / number2Dec;
            break;
        default:
            throw new IllegalArgumentException("Unrecognized operator: "+operator);
    }
</code></pre>

<hr>

<p>The test <code>if (args[0].contains("help"))</code> is odd.  Is it really the intention to match words like <code>"unhelpful"</code> in addition to <code>"help"</code>?  Or was this supposed to be <code>if (args[0].equals("help"))</code>?  Or perhaps <code>if (args[0].equalsIgnoreCase("help"))</code>?</p>

<hr>

<p>Your help is less than helpful.  It doesn't describe which of the arguments are the values and which are the bases.  It would also be useful to advise the user as to which operations are supported; many might try "*" instead of "x" for multiplication.</p>
    </div>