<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your attempts lack <a href="https://www.python.org/dev/peps/pep-0257/#what-is-a-docstring" rel="nofollow noreferrer">docstrings</a>.  </p>

<p>Using <a href="https://docs.python.org/3/library/stdtypes.html#common-sequence-operations" rel="nofollow noreferrer">common sequence operations</a> is a nice touch - if only there was a<br>
<code>index_min = min_index(iterable, *[, key, default])</code> or a<br>
<code>min,â€‡index = min_index(iterable, *[, key, default])</code>.  </p>

<p>Why use <code>for i in range()</code>, but an open coded inner <code>while</code>-loop?  </p>

<p>In Attempt #1, you keep just one piece of information about the <code>smallest_num</code> when a new one is found. If that was the index, you wouldn't have to re-discover it (let alone twice) - at the cost of an indexed access every time you need the value.
Why, in the inner loop, add one to <code>j</code> in more than one place?</p>

<pre><code>for j in range(i+1, len(L)):
    if L[j] &lt; smallest_num:
        smallest_num = L[j]
        smallest_index = j
</code></pre>

<p>In Attempt #2, what do you expect the second time <code>swap_min(L, i)</code> gets executed?
You don't use <code>j</code> in the inner loop. If it was <code>index = L.index(smallest_num, n)</code>, <code>index == n</code> after the first call - no need for an explicit inner loop at all.</p>
    </div>