<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<pre><code>match io::stdin().read_line(&amp;mut line) {
    Ok(_) =&gt; (),
    Err(err) =&gt; println!("Could not parse input: {}", err),
}
</code></pre>
</blockquote>

<p>Instead of continuing, the program should panic if it fails to read input.  Use <a href="https://doc.rust-lang.org/std/result/enum.Result.html#method.expect" rel="nofollow noreferrer"><code>expect</code></a> instead:</p>

<pre><code>io::stdin()
    .read_line(&amp;mut input)
    .expect("Failed to read input");
</code></pre>

<blockquote>
<pre><code>let mut l = 0.0;
let mut w = 1.0;
let mut s = 0.0;
let sentmarker = ['?', '.', '!'];

for b in bytes {
    if b &gt;= 65 &amp;&amp; b &lt;= 90 || b &gt;= 97 &amp;&amp; b &lt;= 122 { // check if character in [a-zA-Z]
        l += 1.0;
    } else if sentmarker.contains(&amp;(b as char)) {
        s += 1.0;
    } else if (b as char) == ' ' {
        w += 1.0;
    }
}
</code></pre>
</blockquote>

<p>This parse can be simplified using <a href="https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.filter" rel="nofollow noreferrer"><code>filter</code></a> and <a href="https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.count" rel="nofollow noreferrer"><code>count</code></a>.  Also, use <a href="https://doc.rust-lang.org/std/primitive.u8.html#method.is_ascii_alphabetic" rel="nofollow noreferrer"><code>is_ascii_alphabetic</code></a> instead of hard-coding the values.</p>

<p>It is probably clearer to create a dedicated <code>struct</code> to hold the parameters.</p>

<hr>

<p>My version of the code: (takes advantage of the Unicode definition of letters and whitespace)</p>

<pre><code>use std::io::{self, prelude::*};

fn main() {
    println!("Text: ");
    io::stdout().flush().expect("Failed to flush stdout");

    let mut input = String::new();
    io::stdin()
        .read_line(&amp;mut input)
        .expect("Failed to read input");

    let analysis = Analysis::new(&amp;input);
    match analysis.index() {
        0 =&gt; println!("Before Grade 1"),
        index @ 1..=16 =&gt; println!("Grade {}", index),
        _ =&gt; println!("Grade 16+"),
    }
}

struct Analysis {
    n_letters: usize,
    n_words: usize,
    n_sentences: usize,
}

impl Analysis {
    fn new(text: &amp;str) -&gt; Analysis {
        Analysis {
            n_letters: text.chars().filter(|c| c.is_alphabetic()).count(),
            n_words: text.split_whitespace().count(),
            n_sentences: text.split_terminator(|c| ".!?".contains(c)).count(),
        }
    }
    fn index(&amp;self) -&gt; usize {
        let n_letters_per_100_words = self.n_letters as f64 / self.n_words as f64 * 100.0;
        let n_sentences_per_100_words = self.n_sentences as f64 / self.n_words as f64 * 100.0;

        let index = 0.0588 * n_letters_per_100_words - 0.296 * n_sentences_per_100_words - 15.8;
        index.round() as usize
    }
}
</code></pre>

<p>(<a href="https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=63b5ab7b305947cd551777ed4c2527e4" rel="nofollow noreferrer">playground</a>, with some tests)</p>
    </div>