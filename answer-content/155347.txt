<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I don't fully understand the desire for a "generic" data mapper.  Oftentimes, flexibility leads to complexity and fragility in your application.  Take for example your <code>delete()</code> method.  It just arbitrarily accepts whatever object is passed and starts deleting things from the database.  What is to stop someone from just creating a new object named similarly to a table you don't want deletes happening against (like a configuration table) and arbitrarily destroying records in the database?</p>

<p>This flexibility can lead to bad habits like doing <code>SELECT *</code> queries, overuse of publicly accessible properties on your objects, and using PDO::fetch_object() which can circumvent class constructor behavior.</p>

<p>I guess as an educational exercise like this perhaps has value, but for a real-world production-level application, I think this class is pretty much a non-starter.</p>

<p>I know it might seem like a lot of extra code to have to build "model" classes for each of your database entities, but I would strongly suggest doing just this, as you will likely find over time that a one-size-fits all mapper such as this just becomes a mess when trying to adapt it to the various use cases you may have in a more complex application.</p>

<p>I DO think that what you have may be informative towards such classes, as a lot of what you have written might be well-aligned with an abstract base model class which is extended for each entity type.  A "search by id" function for example, is probably pretty common across all classes, where you might find that an update method might be hard to implement in a base class and should perhaps be defined as an abstract method there.</p>

<p>Some more specific notes follow.</p>

<hr>

<p>I don't understand the need for <code>$driver</code> and escaping you are doing here.  If you go with an inheritance model where inheriting class specify the tables/columns they related to, you can get away from all this unnecessary escaping of database object names.</p>

<hr>

<p>Consider using more meaningful/specific variable and method names.  For example</p>

<pre><code>$db =&gt; $pdo (since it holds a PDO object)
query() =&gt; prepare() (since this method does not perform a query at all, but rather creates a prepared statment)
find() =&gt; findById()
</code></pre>

<hr>

<p>Should your <code>save()</code> method actually be broken up into <code>create()</code> and <code>update()</code> methods?  I would think that a programmer should be explicit about what they are expecting to happen here. And you should not ever let the class get set up to where id would be empty if the record has been persisted to the database.</p>

<hr>

<p>Your code really only considers happy path.  What if prepared statements fail? What if select queries return zero rows?</p>

<hr>

<p>You are leaking implementation details outside this class.  Why would you be returning <code>PDOStatement</code> objects to the caller like in your <code>query()</code> method.  If this class wants to be a mapper, it should ONLY be a mapper, not a general purposes class for preparing statements.</p>

<hr>

<p><code>findBySql()</code> is an odd method.  It accepts arbitrary query input, so how to you know that the query is even a <code>SELECT</code> vs. some other type of query.  Why would a mapper class even need to accept arbitrary SQL?</p>

<hr>

<p>Why not use <code>PDO::quote()</code> for escaping string rather than your own logic?</p>

<hr>

<p>Your public methods really do nothing to validate that the arguments being passed are suitable to be working with.  You should never get so far as to prepare a statement on the database (a relatively expensive operation) if you have not validated that you have reasonable values to work with.</p>

<p>I would suggest you add guarding code at the first few lines in this methods to validate the input and fail with <code>InvalidArgumentException</code> or similar before you get to executing method logic.  Fail early and fail loudly.</p>

<hr>

<p>You repeat this code: <code>strtolower(basename(get_class($object)))</code> in several methods.  Perhaps your class needs a <code>getTableNameFromClass()</code> method that can be used in your functions, or this should be part of <code>escapeIdent()</code>.</p>

<hr>

<p>I challenge your thinking that a class name and table name should be the same with the exception of camel casing.  Most relational databases treat database object names (tables, columns, etc.) in a case-insensitive fashion or could have problems if the database is run on different OS that vary on case sensitivity with regard to the physical file names in which the data is stored. So many consider it best practice to simply remove any potential chance for error and use snake_case in relational databases.</p>
    </div>