<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There are some implicit problematic assumptions...</p>

<ol>
<li><p>You must not forget to call <code>del_strlist</code>, and call it exactly once.</p></li>
<li><p>You clearly have to transport some data via unknown means from <code>strlist</code> call to the point where <code>del_strlist</code> takes place, namely the <em>size of the vector</em>.</p></li>
<li><p>The user has to know how each string was allocated. As your <code>char**</code> data structure is read/write, someone outside even might change an element to another, and try to use <code>malloc</code>/<code>free</code>.</p></li>
</ol>

<p>All this data aggregation/"use the correct methods"-requirements strongly suggest to <strong>write a class</strong>.</p>

<p>You could avoid these problems by providing a <code>class</code> constructed from a either a <code>std::vector&lt;std::string&gt;</code> or a <code>const char**</code>, which would store the data in a local <code>char**</code> (and automatically deallocate it in the destructor). This already solves problem #1.</p>

<p>Then you could add a <code>size_t</code> member to your class containing the array size - this solves problem #2 - now the destructor <em>knows</em> the array size.</p>

<p>To tackle #3, you could even add some <code>operator[]</code>s which are able to access or even replace a <code>char*</code> at an index (and reallocate the memory in a correct way).</p>

<p>If you provide an <code>operator char**()</code> which returns the internal (private) member in which the allocated strings are stored, you may use this class anywhere where a <code>char**</code> is expected :)</p>

<p>If you need the stored data as C++ vector again, you might want to add a <code>std::vector&lt;std::string&gt; get() const</code> member to this class.</p>
    </div>