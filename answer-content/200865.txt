<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The idea about using <code>Task.WhenAll</code> is a good start as it could help with running then in parallel.</p>

<p>Take a look at the following refactor</p>

<pre><code>private async Task&lt;List&lt;InventoryProdAndSubsVM&gt;&gt; GetProductInventoryAsync(IEnumerable&lt;BackhaulTopVM&gt; prodCodes, DateTime userDate) {
    //Only take unique ProdCodes
    var uniqueProductCodes = prodCodes.GroupBy(code =&gt; code.ProdNum).Select(g =&gt; g.FirstOrDefault())
    //Create tasks to get inventory for the product codes.
    var prodCodeTasks = uniqueProductCodes.Select(product =&gt;
        loadSchedulingRepo.GetInventoryForOrdersAPIAsync(product.ProdNum, userDate)
    );
    //wait for all the tasks to complete
    var inventory = await Task.WhenAll(prodCodeTasks);
    //grab all items returned from the async tasks
    var resultSet = inventory.SelectMany(items =&gt;
        items.Select(item =&gt;  new InventoryProdAndSubsVM 
        {
            Commodity = item.Commodity,
            DueIn = item.DueIn,
            OnHand = item.OnHand,
            Committed = item.Committed,
            ProdCode = item.ProdCode,
            ProdNum = item.ProdNum,
            ProdDesc = item.ProdDesc
        })
    ).ToList();

    return resultSet;
}
</code></pre>

<p>Initially you were still making each request in sequence even though you were doing it asynchronously. The speed would be the similar to what was happening before, with the only difference being that it probably was not locking the main thread.</p>

<p>With the above approach the rest calls all happen at the same time with the overall duration being as long as the longest request.</p>
    </div>