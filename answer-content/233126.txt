<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Don't instantiate a new <code>Scanner</code> object for every input</strong></p>

<p>You only ever need 1 Scanner.</p>

<p><strong>Format Strings</strong></p>

<p>You can use <code>System.out.printf</code> to print formatted strings, such as:</p>

<pre><code>System.out.printf("You are dropping %d balls into %d slots\n", numberOfBalls, numberOfSlots); 
</code></pre>

<p><strong>Put comments above the line of code, not in the same line.</strong></p>

<pre><code>// like this
someCode();

someCode(); // NOT like this
</code></pre>

<p><strong>Use java naming standards</strong> </p>

<p>private &amp; method scoped variables should begin with a lower case letter. The formatting in stackexchange gives you a hint, it thinks <code>Slots</code> is a class since it begins with an uppercase:</p>

<pre><code>// should be int slots[].
int Slots[] = new int[numberOfSlots];
</code></pre>

<p><strong>Give names that make sense</strong></p>

<p><code>eachBallPath</code> doesn't really make sense as a method name. <code>printEachBallPath</code> would make more sense. <code>printBallPaths</code> would make even more sense.</p>

<p>Or if you'd like, <code>calculateBallPaths</code>, and have the method return an Array that can be printed elsewhere.</p>

<p>Same for <code>ballInSlot</code> and <code>pathTaken</code>. Maybe <code>getBallInSlot</code> and <code>getPathTaken</code>. If you don't like using <code>get</code> for methods other than getters, I'd suggest <code>calculatePathTaken</code> &amp; <code>calculateBallInSlot</code>.</p>

<p><strong>Add method documentation also known as <code>JavaDocs</code> when a method is unclear.</strong></p>

<p>Taking the a glance at the method <code>ballInSlot</code> from the view of another programmer:</p>

<pre><code>public static int ballInSlot(String path, int Slots[]) {
...
return frequencyOfRight;
</code></pre>

<p>It's really hard to tell what this method is actually doing. If you cannot make it clear through naming, it might be an indication the method is too complicated and should be split into multiple methods. </p>

<p>However sometimes this isn't possible  / doesn't help. In these cases you should:</p>

<p><strong>Add a method documentation AKA Java Docs:</strong></p>

<pre><code>/**
 * explanation of the method
 * @param path explanation of the parameter 'path'
 * @param Slots explanation of parameter 'Slots'
 * @return what does the method return?
 */
</code></pre>

<p>IMO every public method should be documented, and every unclear private method. Some people believe every method should be documented. However it's pretty standard to document methods that are unclear.</p>

<p><strong>Regarding the code below:</strong></p>

<p><strong>always use curly braces even when the code is 1 length long.</strong> </p>

<p><a href="https://softwareengineering.stackexchange.com/questions/2715/should-curly-braces-appear-on-their-own-line">A good explanation</a>:</p>

<blockquote>
  <p>Skimping on braces might save you a few keystrokes the first time, but
  the next coder who comes along, adds something to your else clause
  without noticing the block is missing braces is going to be in for a
  lot of pain.</p>
  
  <p>Write your code for other people.</p>
</blockquote>

<p>use <code>else if</code> or <code>else</code> whenever it makes sense to do so</p>

<p>You can use shorthand <code>+=</code>, <code>-=</code>, <code>*=</code>, <code>/=</code> etc, instead of <code>variable = + variable</code> etc.</p>

<pre><code>if (random &lt; 0.5)
    path = path + "L";
if (random &gt;= 0.5)
    path = path + "R";
</code></pre>
    </div>