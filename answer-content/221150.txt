<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Time</h2>

<p>You store the members as <code>int</code>, but accept them as <code>uint</code>. I would be more consistent. There is a <em>guard</em> condition anyway in the constructor.</p>

<blockquote>
<pre><code>public Time(uint h, uint m, uint s)
    {
        if (h &gt; 23 || m &gt; 59 || s &gt; 59)
        {
            throw new ArgumentException("Invalid time specified");
        }
        _hours = (int)h; _minutes = (int)m; _seconds = (int)s;
        _totalSeconds = _hours * 60 * 60 + _minutes * 60 + _seconds;
    }
</code></pre>
</blockquote>

<p>The method <code>OverrideTime</code> could be renamed to <code>ApplyTo</code>. This way it is clear the instance updates the parameter and not the other way around.</p>

<blockquote>
<pre><code>public DateTime OverrideTime(DateTime dt)
    {
        return new DateTime(dt.Year, dt.Month, dt.Day, _hours, _minutes, _seconds);
    }
</code></pre>
</blockquote>

<h2>TimeRange</h2>

<p>I would favor <em>operator overloads</em> rather than explicit convert methods like <code>GetTimeSpan</code>. The language enables us to write operators, so why not use them?</p>

<blockquote>
<pre><code>public TimeSpan GetTimeSpan()
    {
        return new TimeSpan(0, 0, _endTime.TotalSeconds - _startTime.TotalSeconds);
    }
</code></pre>
</blockquote>

<h2>DayTimeRange</h2>

<p>I would not deviate from a common pattern, specially when using its exact name <code>CompareTo</code>. I would rather implement <code>IComparable</code> and return -1 or 1 when the day does not match.</p>

<blockquote>
<pre><code> public int? compareTo(DateTime datetime)
    {
        if (datetime.DayOfWeek == day)
        {
            return timeRange.CompareTo(datetime);
        }

        // cannot compare if datetime is not on the same day of the week.
        return null;
    }
</code></pre>
</blockquote>

<h2>DateRange</h2>

<p>Method <code>GetOverlappingTime</code> could be rewritten as</p>

<blockquote>
<pre><code>public TimeSpan GetOverlappingTime(DateRange range)
    {
        if (_startDate &gt;= range._endDate // ..
        // ..
        return _endDate - range._startDate;
    }
</code></pre>
</blockquote>

<pre><code>public TimeSpan GetOverlappingTime(DateRange range)
    {
        var start = range._startDate &gt; _startDate 
             ? range._startDate : _startDate;
        var end = range._endDate &lt; _endDate 
             ? range._enDate : _endDate;
        return end &lt; start ? TimeSpan.Zero : end - start;
    }
</code></pre>

<h2>General</h2>

<ul>
<li>Why choose private classes with <code>Debug</code> asserts instead of public classes with exceptions?</li>
<li>The hash code is fine. It should be fast, idempotent and a superset of the identity of the instance.</li>
</ul>
    </div>