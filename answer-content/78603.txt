<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>DFS should keep track of all the nodes visited. Not the node.</p>

<p>The node only properties is it self, and it's children. </p>

<p>Check <a href="http://eddmann.com/posts/depth-first-search-and-breadth-first-search-in-python/" rel="noreferrer">this amazing implementation</a>:</p>

<pre><code>graph = {'A': set(['B', 'C']),
         'B': set(['A', 'D', 'E']),
         'C': set(['A', 'F']),
         'D': set(['B']),
         'E': set(['B', 'F']),
         'F': set(['C', 'E'])}

def dfs(graph, start):
    visited, stack = set(), [start]
    while stack:
        vertex = stack.pop()
        if vertex not in visited:
            visited.add(vertex)
            stack.extend(graph[vertex] - visited)
    return visited

dfs(graph, 'A') # {'E', 'D', 'F', 'A', 'C', 'B'}
</code></pre>

<p>As you can see DFS is called just once and it keeps track of visted nodes all the way, it will use pop(-1) so it will Depth-search, you could either change to pop(0), so it would Breadth-First Search. It's the same concept, the only difference is which node is visited in which order.</p>

<p>Your implementation will have some problems if the graph is too deep, because it could raise a <code>Maximum recursion depth exceeded</code>.</p>
    </div>