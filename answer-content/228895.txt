<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Implementation</h3>

<blockquote>
<pre><code>def xmat(r,n):
    return Matrix([[2*x, -1], [1, 0]])*rem(1,x**r-1)*(1%n)
</code></pre>
</blockquote>

<p>Am I correct in thinking that <code>n</code> will always be a positive integer greater than 2? If so, <code>*rem(1,x**r-1)*(1%n)</code> can be optimised away entirely.</p>

<hr>

<blockquote>
<pre><code>def myisprime(n):
    r=smallestr(n)
    if r==0:
        return n==2
    else:
        xp=(xmat(r,n)**n)*Matrix([[x],[1]])
        ...
</code></pre>
</blockquote>

<p>How to parse <code>smallestr</code>? Is it <code>small_e_str</code>? PEP8 promotes using underscores to separate words in names.</p>

<p>I inserted here a debug line:</p>

<pre><code>        print(r, xp)
</code></pre>

<p>When <code>n = 3</code> we get</p>

<pre><code>5 Matrix([[-4*x**2 + x*(2*x*(4*x**2 - 1) - 2*x) + 1], [x*(4*x**2 - 1) - 2*x]])
</code></pre>

<p>It seems that sympy is manipulating expression trees rather than polynomials, and not simplifying at all ever. If you can't find a way to make it auto-simplify, it would probably be faster to roll your own polynomial class.</p>

<hr>

<blockquote>
<pre><code>        return trunc(xp[1],n)==(rem(x*(1%n),x**r-1))**n
</code></pre>
</blockquote>

<p>Simplifying:</p>

<blockquote>
<pre><code>        return trunc(xp[1],n)==x**n
</code></pre>
</blockquote>

<p>Now, <code>trunc</code> implies that you should be working over <span class="math-container">\$\mathbb{Z} / n\mathbb{Z}\$</span> rather than <span class="math-container">\$\mathbb{Z}\$</span>. <code>xmat(r,n)**n</code> is going to generate coefficients which are exponentially larger than <code>n</code>: working modulo <code>n</code> all the way through would be far far faster.</p>

<p>(I implemented a naïve version out of curiosity, and it tests <code>61</code> in about 2.4 milliseconds, vs 42 seconds for your code).</p>

<hr>

<h3>Deep dive into the algorithm</h3>

<p>By diagonalisation, if I haven't messed up the algebra,</p>

<p><span class="math-container">$$ \begin{pmatrix}2x &amp; -1 \\ 1 &amp; 0\end{pmatrix}^n \begin{pmatrix}x \\ 1\end{pmatrix}
%= \left(S J S^{-1} \right)^n \begin{pmatrix}x \\ 1\end{pmatrix}
%= S \left(J \right)^n S^{-1} \begin{pmatrix}x \\ 1\end{pmatrix}
%= \begin{pmatrix} x-\sqrt{x^2-1} &amp; x+\sqrt{x^2-1} \\ 1 &amp; 1 \end{pmatrix} \begin{pmatrix} x-\sqrt{x^2-1} &amp; 0 \\ 0 &amp; x+\sqrt{x^2-1} \end{pmatrix}^n \begin{pmatrix} -\frac{1}{2\sqrt{x^2-1}} &amp; \frac{x}{2\sqrt{x^2-1}}+\frac12 \\ \frac{1}{2\sqrt{x^2-1}} &amp; \frac12 - \frac{x}{2\sqrt{x^2-1}} \end{pmatrix}  \begin{pmatrix}x \\ 1\end{pmatrix} \\
%= \begin{pmatrix} x-\sqrt{x^2-1} &amp; x+\sqrt{x^2-1} \\ 1 &amp; 1 \end{pmatrix} \begin{pmatrix} (x-\sqrt{x^2-1})^n &amp; 0 \\ 0 &amp; (x+\sqrt{x^2-1})^n \end{pmatrix} \begin{pmatrix}\frac12 \\ \frac12\end{pmatrix} \\
%= \begin{pmatrix} x-\sqrt{x^2-1} &amp; x+\sqrt{x^2-1} \\ 1 &amp; 1 \end{pmatrix} \begin{pmatrix}\frac12 (x-\sqrt{x^2-1})^n \\ \frac12 (x+\sqrt{x^2-1})^n \end{pmatrix} \\
= \frac12 \begin{pmatrix}
(x-\sqrt{x^2-1})^{n+1} + (x+\sqrt{x^2-1})^{n+1} \\
(x-\sqrt{x^2-1})^n + (x+\sqrt{x^2-1})^n
  \end{pmatrix}
$$</span></p>

<p>So what this test boils down to is <span class="math-container">$$(x-\sqrt{x^2-1})^n + (x+\sqrt{x^2-1})^n \equiv 2x^n \pmod n$$</span></p>

<p>Expanding the LHS, <span class="math-container">$$(x-\sqrt{x^2-1})^n + (x+\sqrt{x^2-1})^n = 
\sum_{i=0}^n \binom{n}{i} x^{n-i} \left( (-\sqrt{x^2-1})^{i} + (\sqrt{x^2-1})^{i}\right) \\
= \sum_{i=0}^n \binom{n}{i} x^{n-i} (\sqrt{x^2-1})^{i} \left( (-1)^i + 1^i\right) \\
= \sum_{i=0}^{n/2} \binom{n}{2i} x^{n-2i} (\sqrt{x^2-1})^{2i} \\
= \sum_{i=0}^{n/2} \binom{n}{2i} x^{n-2i} (x^2-1)^{i} \\
= \sum_{i=0}^{n/2} \binom{n}{2i} x^{n-2i} \sum_{j=0}^i \binom{i}{j} (x^2)^{i-j} (-1)^j \\
= \sum_{j=0}^{n/2} (-1)^j x^{n-2j} \sum_{i=j}^{n/2} \binom{n}{2i} \binom{i}{j} \\
$$</span></p>

<p>So the test is that <span class="math-container">$$\forall 0 &lt; j \le \tfrac n2: \sum_{i=j}^{n/2} \binom{n}{2i} \binom{i}{j} \equiv 0 \pmod n$$</span></p>

<p>But a direct calculation on that basis is worse than simply verifying that <span class="math-container">$$\forall 0 &lt; j \le \tfrac n2: \binom{n}{2j} \equiv 0 \pmod n$$</span> which is a perfectly valid primality test for odd <span class="math-container">\$n\$</span>. And that itself is clearly worse than simply testing <span class="math-container">$$\forall 1 &lt; j \le \sqrt{n}: n \not \equiv 0 \pmod j$$</span></p>

<p>So we're relying on the matrix exponentiation being extremely fast. Roughly speaking, we do <span class="math-container">\$O(1)\$</span> polynomial multiplications for polynomials of order <span class="math-container">\$1, 2, 4, \ldots, n\$</span>, so if a multiplication of polynomials of length <span class="math-container">\$\ell\$</span> takes <span class="math-container">\$\Theta(\ell^\alpha)\$</span> then the overall exponentiation also takes <span class="math-container">\$\Theta(n^\alpha)\$</span>. There's no way that <span class="math-container">\$\alpha &lt; \tfrac12\$</span>, so no matter how well optimised the implementation is it won't be faster than a naïve trial division.</p>
    </div>