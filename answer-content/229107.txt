<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>As a preface: Your code works good, is readable and does its job efficiently. The following review, though long, doesn't mean there is anything substantially wrong with it :-)</p>
<h3>General comments</h3>
<p>In the constructor, you're <strong>binding</strong> the event handlers to <code>this</code>. However, since you declare these event handlers as arrow functions, they are <a href="https://reactjs.org/docs/handling-events.html" rel="nofollow noreferrer">already bound to the current instance</a> and you can therefore skip binding them explicitly.</p>
<p>The functionality to only <strong>recalculate</strong> on blur and swap is nice and well implemented, but it is probably not needed for efficiency's sake, since the recalculation is (at the moment at least) very cheap.</p>
<p><code>generateTable</code> is a component, but it's not <strong>written the same way</strong> as other components (it's not capitalized and declared as <code>const</code>). I also wouldn't mind you incorporating the logic of this component directly into <code>Output</code>, as this component would then still be of readable length and concern itself only with one aspect.</p>
<p>You have added a <strong><code>key</code> prop</strong> to every React component you render. However, <a href="https://reactjs.org/docs/lists-and-keys.html" rel="nofollow noreferrer">this is only necessary if you render a collection of components</a> (i.e. if you declare an array of either DOM or React elements to be rendered). So it is only needed in the <code>ResultTable</code> (line 218).</p>
<p>You can insert JavaScript variables in text with the same <code>{var}</code> notation you use for attribute values and element children, so <code>{`Number ${props.num}: `}</code> on line 133 can be replaced by <code>Number {props.num}: </code></p>
<p>In your components <code>NumberBox</code> and <code>NumberPrompt</code>: <code>onChange</code> and <code>handleChange</code> mean very different things in your code. However, <code>onChange</code> is such a common sight that is has a clear meaning attached to it. I would therefore strongly discourage using a name close to it (<code>handleChange</code>) for something different ("committing" the value on blur) than it suggests. I think you already sensed as much, seeing your comment next to the props. Why don't you use a separate <code>onBlur</code> handler, so that the prop names align with the handler names?</p>
<h3>Functional components</h3>
<p>You could <strong>destructure</strong> the props received by a functional component as its argument. This allows you to more easily read the "signature", what props it depends on, and allows you to save some typing:</p>
<pre><code>function SwapButton({handleSwap}) {
  return (
    &lt;button key='swap' type='button' onClick={handleSwap}&gt;Swap&lt;/button&gt;
  );
}
</code></pre>
<p>You could also opt for writing components as <strong>arrow-functions</strong>, as you already do in <code>generateTable</code>. Especially since you 'only' return JSX in a lot of components, this can make your component definitions shorter:</p>
<pre><code>const SwapButton = ({handleSwap}) =&gt; &lt;button type='button' onClick={handleSwap}&gt;Swap&lt;/button&gt;
</code></pre>
<h3>Result components</h3>
<p>In my opinion, the splitting into <code>ResultTable</code>, <code>ResultHead</code> and <code>ResultRow</code> results in more cognitive overhead than just simply writing:</p>
<pre><code>function ResultTable({data}){
  return (
    &lt;table id='result'&gt;
      &lt;thead&gt;
        &lt;tr&gt;
        &lt;th&gt;Operation&lt;/th&gt;
        &lt;th&gt;Result&lt;/th&gt;
      &lt;/tr&gt;
      &lt;/thead&gt;
      &lt;tbody&gt;
        {data.map(({key, op, num}) =&gt; (
          &lt;tr key={key}&gt;
            &lt;td&gt;{op}&lt;/td&gt;
            &lt;td&gt;{num}&lt;/td&gt;
          &lt;/tr&gt;
        ))}
      &lt;/tbody&gt;
    &lt;/table&gt;
  );
}
</code></pre>
<p>This way, you clearly see how the HTML table is constructed and which information ends up where. Note also the same <strong>destructuring</strong> of the argument inside <code>map</code>.</p>
<h3>Â Naming</h3>
<p>This is the hardest part of any programming task. These are my personal opinions:</p>
<ul>
<li>Your component and function names generally <strong>don't use abbreviations</strong> and are very readable. I would extend this to your state and rethink the names <code>num1</code> and <code>doAdd</code>.</li>
<li>I didn't understand initially what was meant by <code>box</code>. Now that I know it, I think box is not the right word. Since this state holds the immediate <em>value</em> of the input fields, I'd opt for something like <code>inputValue1</code>.</li>
<li>While it is technically true that <code>doAdd: false</code> (suggesting an action) prevents any addition from being done, I'd opt for something like <code>showAdditionResult: false</code> (suggesting a state).</li>
</ul>
    </div>