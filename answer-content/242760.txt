<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Overall Observations</h2>
<p>It is important to remember when writing code professionally that you may not be the only one writing the code or maintaining and debugging the code. If the project is a high priority then there may be a team of programmers working on it. If the code is shipped, it may have a life span of a decade or more and you may not still be at the company (think winning the lottery or getting a better paying job with another company). Code should be easy to read, write, and be maintained by others.</p>
<p>The file extension <code>.dll</code> has a very specific meaning in the Microsoft Windows world, it is a Dynamically Loaded Library (DLL), it would be less confusing for anyone who has to maintain the code if the signature data file had a different file extension. By definition on Windows platforms you are linking your code to <code>.dll</code> files such as the C++ STL files so that it can run. There are <a href="https://docs.microsoft.com/en-us/windows/win32/dlls/using-run-time-dynamic-linking" rel="nofollow noreferrer">special functions for loading DLL files at runtime</a>. If you are scanning for virus signatures, then this program should also be able to search other types of files such as <code>.exe</code>, <code>.doc</code>, <code>.docx</code>, etc. and not just <code>.dll</code>.</p>
<p>Generally in when editing C++ programs one uses an <a href="https://www.codecademy.com/articles/what-is-an-ide" rel="nofollow noreferrer">Interactive Development Environment (IDE)</a> such as <code>Visual Studio</code>, <code>eclipse</code> or <code>CLion</code>. These IDEs provide wizards for creating classes, and will automatically add header files and source files to the program that match the exact name of the class. For the files to have the same name as the class makes it easier for people who have to maintain the code to find the source code for the class. In this code the name of the header and source files are different from the name of the class and that can be confusing.</p>
<h2>Private Versus Public in C++ Classes</h2>
<p>Given the current organization of the file, where the <code>private</code> variables and functions precede the <code>public</code> variables and functions the keyword <code>private</code> is not required because by default all variables and functions are private in a C++ Class, this is different from a <code>struct</code> where all variables and functions are public by default.</p>
<p>That said, in object oriented programming the public interfaces in an object declaration are generally listed first so that the users of the class (other developers that may be working in parallel to you) can find the public interfaces quickly. In most of the C++ code I have seen the constructors and destructors are listed first (when they exist).</p>
<p>The function organization in <code>SignatureScan.cpp</code> should list Constructors first, then destructors (when needed), then the public functions, and finally the private functions.</p>
<p>Very short public or private functions that probably won't be modified don't need to be in the <code>.cpp</code> file, they can be in the header file. Examples of these kinds of functions <code>std::string SigScan::CurrentByte()</code> and <code>void SigScan::CountAddress(unsigned int count)</code>. Doing this will allow an optimizing compiler to decide what should be inlined so that the code will run faster.</p>
<h2>Header Files</h2>
<p>Within header files, only include header files that are necessary for the code to compile, this will decrease the compile / build time for those source files that include the header file. In the code presented, there are 6 header files included but only 3 of these files are necessary for the code to compile in a source file that includes the header file (<code>windows.h</code>, <code>string</code> and <code>map</code>). Include the other headers necessary in the source file <code>SignatureScan.h</code>.</p>
<h2>Variable Names</h2>
<p>There are 2 private variables declared in the header file that have questionable names, <code>i</code> and <code>j</code>. This forced added comments in both the header file and the source file. Write self documenting code as much as possible using more descriptive variable names so that comments are not as necessary. The problem with comments is that they also need to be maintained, and therefore add cost to the maintenance of the software.</p>
<p>Based on my earlier comment about DLLs, the variable name could be changed to <code>fileToScan</code>.</p>
<p>The variable names in the function prototypes are important, especially in the <code>public</code> function prototypes. These variable names will give the users of the functions an idea of what the variable is to be used for.</p>
<h2>Use C++ Container Classes Rather Than Old Style C Arrays or Pointers</h2>
<p>The class definition of SigScan contains the variable declarations</p>
<pre><code>    unsigned int fileSize;

    BYTE* byteData;                         // contains the binary data
</code></pre>
<p>While <code>fileSize</code> may be needed for multiple reasons, the most important reason seems to be that it is the size of <code>byteData</code>. There are 2 different ways these 2 variables could be combined into 1 complex variable, the first would be to use the C++ type <code>array</code> and the second would be to use the C++ type <code>vector</code>. On of the values of using a C++ container type is being able to pass both variables in a single parameter. A second value of using a C++ container type is that you can use a <a href="https://en.cppreference.com/w/cpp/language/range-for" rel="nofollow noreferrer">range based for loop</a> that would reduce the code necessary in <code>std::string SigScan::hexStr(BYTE* data, int len)</code> and possibly run faster because it is using <code>iterators</code>.</p>
<pre><code>std::string SigScan::hexStr(std::vector&lt;BYTE&gt; data)
{
    std::stringstream ss;
    ss &lt;&lt; std::hex;

    for (BYTE byte: data)
    {
        ss &lt;&lt; std::setw(2) &lt;&lt; std::setfill('0') &lt;&lt; (int)byte;
    }

    return ss.str();
}
</code></pre>
<p>Note that there is no need to specify the index <code>i</code> in the above loop.</p>
<p>Another reason is that raw pointers are frowned upon in modern C++ because they lead to bugs.</p>
<p>I may have time to review <code>void FindSignature(std::string, std::string, bool)</code> later, but there is enough information now.</p>
    </div>