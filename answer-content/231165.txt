<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Default arguments</h2>

<p>This default:</p>

<pre><code>path=None
</code></pre>

<p>isn't effectively <code>None</code>, but instead <code>'/Users/user_name/Desktop/Amazon Scraper/'</code>. That's an immutable value, so it's safe to put into the default directly.</p>

<p>An obvious issue with that path is that it's absolute and not per-user. Consider using <code>os.path.expanduser</code> with <code>~</code> instead.</p>

<h2>Dict formatting</h2>

<p>Writing this:</p>

<pre><code>self.proxies = [{'https:': 'https://' + item.rstrip(), 'http':
                'http://' + item.rstrip()} for item in open('proxies.txt').readlines()]
</code></pre>

<p>should have one dict item per line or it'll get confusing. In other words,</p>

<pre><code>self.proxies = [{'https:': 'https://' + item.rstrip(),
                 'http': 'http://' + item.rstrip()}
                for item in open('proxies.txt').readlines()]
</code></pre>

<h2>Avoid backslash continuation</h2>

<pre><code>    self.starting_target_urls = \
        {'bs': ('https://www.amazon.com/gp/bestsellers/', 'https://www.amazon.com/Best-Sellers'),
         'nr': ('https://www.amazon.com/gp/new-releases/', 'https://www.amazon.com/gp/new-releases/'),
         'ms': ('https://www.amazon.com/gp/movers-and-shakers/', 'https://www.amazon.com/gp/movers-and-shakers/'),
         'gi': ('https://www.amazon.com/gp/most-gifted/', 'https://www.amazon.com/gp/most-gifted'),
         'mw': ('https://www.amazon.com/gp/most-wished-for/', 'https://www.amazon.com/gp/most-wished-for/')}
</code></pre>

<p>can be</p>

<pre><code>    self.starting_target_urls = {
        'bs': ('https://www.amazon.com/gp/bestsellers/', 'https://www.amazon.com/Best-Sellers'),
        'nr': ('https://www.amazon.com/gp/new-releases/', 'https://www.amazon.com/gp/new-releases/'),
        'ms': ('https://www.amazon.com/gp/movers-and-shakers/', 'https://www.amazon.com/gp/movers-and-shakers/'),
        'gi': ('https://www.amazon.com/gp/most-gifted/', 'https://www.amazon.com/gp/most-gifted'),
        'mw': ('https://www.amazon.com/gp/most-wished-for/', 'https://www.amazon.com/gp/most-wished-for/')
    }
</code></pre>

<h2>Avoid manual path concatenation</h2>

<p>This:</p>

<pre><code>    os.chdir(content_path + 'Amazon/')
</code></pre>

<p>should use <code>pathlib</code> and the <code>/</code> operator instead.</p>

<h2>Use a log library</h2>

<p>This:</p>

<pre><code>                    if self.log:
                        print(f'Saving {category} ... failure.', file=self.log, end='\n')
</code></pre>

<p>shouldn't be writing to files directly. Instead, you should be setting up the stock Python logging with a file handler that goes to that file. It's more flexible and maintainable.</p>

<h2>Implicit line iteration</h2>

<p>For lines like this:</p>

<pre><code>            return [link.rstrip() for link in cats.readlines()]
</code></pre>

<p>You don't need to call <code>readlines</code>. Iterating over a file object iterates over its lines.</p>

<h2>HTTP error checking</h2>

<p><code>_get_response</code> should include a call to <code>raise_for_status</code>. It's a quick and easy way to get better validation on your HTTP calls.</p>
    </div>