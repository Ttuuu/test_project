<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Just a couple of tipps...</p>

<hr>

<blockquote>
<pre><code>if (ruleParts is null || !ruleParts.Any() || allGroups is null || !allGroups.Any())
</code></pre>
</blockquote>

<p>This sanity checks would be a big surprise for me because <code>null</code> is virtually never a valid value so this method should throw if any parameter is <code>null</code>.</p>

<p>Having checked for <code>null</code>s it's not necessary to also check them for <code>Any</code>. The queries wouldn't return anything anyway in this case so just let them do the job.</p>

<hr>

<blockquote>
<pre><code>  var positiveRuleParts = collectRulePartMembers(ruleParts.Where(rp =&gt; !rp.Negated), allGroups);
  var negativeRuleParts = collectRulePartMembers(ruleParts.Where(rp =&gt; rp.Negated), allGroups);
</code></pre>
</blockquote>

<p>You don't have to iterate <code>ruleParts</code> twice. Instead use <code>ToLookup</code></p>

<pre><code>var rulePartsLookup = ruleParts.ToLookup(x =&gt; x.Negated);
</code></pre>

<p>and get the values with</p>

<pre><code>collectRulePartMembers(rulePartsLookup[false], allGroups);
collectRulePartMembers(rulePartsLookup[true], allGroups);
</code></pre>

<hr>

<blockquote>
<pre><code>new List&lt;string&gt;().AsEnumerable()
</code></pre>
</blockquote>

<p>It's more <em>natural</em> to use <code>Enumerable.Empty&lt;string&gt;()</code> than creating an empty list and turn it into an enumerable anyway.</p>

<hr>

<p>I cannot comment on the recursion because I am not able to visualize it without an example.</p>
    </div>