<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First of all first statement may be simplified to</p>

<pre><code> l = range(2, n + 1)
</code></pre>

<p>since <code>range</code> objects support indexing, so creating <code>list</code> from it will cause performance issues with no gain.
Also it is less noisy to test <code>list</code>s for emptyness with</p>

<pre><code>while l:
    ...
</code></pre>

<hr>

<p>Wherever you are dealing with <code>list</code>s it may become faster (or at least, less memory consuming) by making calculations "lazy" using iterables/iterators/generators. So your function may be rewritten like</p>

<pre><code>def sieve_2(n):
    numbers = iter(range(2, n + 1))

    def to_is_dividable_by(divisor):
        return lambda dividend: dividend % divisor

    while True:
        try:
            prime = next(numbers)
        except StopIteration:
            return
        yield prime
        numbers = filter(to_is_dividable_by(prime), numbers)
</code></pre>

<p>Note that we are creating predicate on each step since <code>filter</code> creates iterator object and if we will use some sort of partial application of prime as divisor to predicate like before:</p>

<pre><code>l = filter(lambda n: n % prime, l)
</code></pre>

<p>this will lead to undesired behavior since <code>prime</code> will be modified on each step and all of applied <code>lambda</code> functions will change accordingly and have the same <code>prime</code> argument due to late binding (more info can be found <a href="https://docs.python-guide.org/writing/gotchas/#late-binding-closures" rel="nofollow noreferrer">here</a>).</p>

<h1>Test</h1>

<p>On my laptop with Windows 10 in Python 3.6.5 gives</p>

<pre><code>&gt;&gt;&gt; from timeit import repeat
&gt;&gt;&gt; min(repeat('sieve(10000)', 'from __main__ import sieve', number=10, repeat=7))
1.198557400000027
&gt;&gt;&gt; min(repeat('list(sieve_2(10000))', 'from __main__ import sieve_2', number=10, repeat=7))
0.9349597000000358
</code></pre>

<p>Better, but still not so great, so we probably should review our algorithm for further improvements.</p>

<p>Searching on StackOverflow will lead us to <a href="https://stackoverflow.com/questions/2068372/fastest-way-to-list-all-primes-below-n/46635266#46635266">this answer</a> using which we have</p>

<pre><code>&gt;&gt;&gt; min(repeat('rwh_primes1v1(10000)', 'from __main__ import rwh_primes1v1', number=10, repeat=7))
0.003475800000160234
&gt;&gt;&gt; min(repeat('rwh_primes1v2(10000)', 'from __main__ import rwh_primes1v2', number=10, repeat=7))
0.0025113000001510954
</code></pre>
    </div>