<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Another way to do the instance creation would be to give each type a constructor reference for the strategy it corresponds to.</p>

<pre><code>enum DataPresenterStrategyType { 
    DISTANCE(DistanceStrategy::new), POWER(PowerStrategy::new);
    private final Supplier&lt;DataPresenterStrategy&gt; constructor;

    DataPresenterStrategyType(Supplier&lt;DataPresenterStrategy&gt; constructor){
        this.constructor = constructor;
    }

    DataPresenterStrategy newStrategy() {
        return constructor.get();
    }
}
</code></pre>

<p>The main advantages I see for this way are the compile time safety that each type has a <code>Supplier</code> and that you don't need to look for all the switch statements in your project to add cases if you add a new strategy type.</p>

<p>If not all of the constructors of your strategies take the same arguments you can replace the constructor reference with a lambda.</p>

<p>If you don't have access to Java 8, you can accomplish the same thing more verbosely with an anonymous class instead of the constructor reference, or you could make <code>newStrategy()</code> an abstract method and implement it in each type.</p>
    </div>