<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I see a number of things that may help you improve your program.</p>

<h2>Use only the required <code>#include</code>s</h2>

<p>As far as I can tell, nothing from <code>&lt;getopt.h&gt;</code> is actually used, so that could be omitted.</p>

<h2>Eliminate unused definitions</h2>

<p>The <code>BUF_SIZE</code> definition is not used and should be eliminated.</p>

<h2>Avoid allocating memory if possible</h2>

<p>There's not really much need here for <code>malloc</code> and <code>free</code>.  The <code>Total</code> structure is small and easily fits on the stack frame.  Avoiding <code>malloc</code> means you'll never have to worry about <code>free</code>ing the memory later.</p>

<h2>Prefer a <code>switch</code> to a long <code>if...else</code></h2>

<p>The <code>while</code> loop only examines <code>ch</code> but it does so inefficiently because potentially, it examines the same character multiple times.  A <code>switch</code> would be more efficient, shorter and more easily understood here.</p>

<h2>Use <code>bool</code> where appropriate</h2>

<p>The <code>startWord</code> variable is apparently being used as a boolean variable.  For that reason, I'd suggest using <code>#include &lt;stdbool.h&gt;</code> and declaring it as <code>bool</code>.  </p>

<h2>Use <code>const</code> where practical</h2>

<p>The <code>filename</code> argument is not and should not be altered by the <code>readFile</code> function.  For that reason, it would be better to declare that argument <code>const</code>.</p>

<h2>Consolidate code by combining cases</h2>

<p>Instead of having completely separate <code>readStdin</code> and <code>readFile</code> functions, it would be sensible to simply retain only <code>readFile</code> and initialize the <code>FILE</code> structure like this:</p>

<pre><code>FILE *file = (filename &amp;&amp; filename[0] == '-') ? stdin : fopen(filename, "r");
</code></pre>

<h2>Use the appropriate <code>printf</code> format string</h2>

<p>The code uses <code>%d</code> for the format string, but would it ever make sense for the passed arguments to be negative?  I would say not, and would suggest instead that these variables would more appropriately be <code>size_t</code> and that the format string should be <code>%lu</code> or <code>%u</code> depending on your compiler's implementation.</p>

<h2>Simplify code by using functions</h2>

<p>There are four places in the code that use <code>printf</code> to show totals.  These could instead be reduced to a single place by creating a simple function:</p>

<pre><code>static void report(const char *filename, size_t lines, size_t words, size_t letters) {
    printf("%5lu %5lu %5lu %s\n", lines, words, letters, filename);
}
</code></pre>

<h2>Don't quit after a single error</h2>

<p>The way that <code>wc</code> works is that it will keep going to process other files if one happens not to exist.  To mimic that behavior, you'd have to alter your code to not <code>exit</code> if the file does not exist.</p>

<h2>Carefully consider whether a <code>struct</code> is worthwhile</h2>

<p>I'm all for consolidating variables into meaningfully named <code>struct</code>s as you have done, but I think the code is simpler using the three plain variables.  Here's my complete version which incorporates all of these suggestions so that you can compare for yourself:</p>

<pre><code>#include &lt;stdio.h&gt;
#include &lt;stdbool.h&gt;

static void count(const char *filename, size_t *lines, size_t *words, size_t *letters) {
    FILE *file = (filename &amp;&amp; filename[0] == '-') ? stdin : fopen(filename, "r");
    if (file == NULL) {
        printf("%s: No such file or drectory\n", filename);
        return;
    }
    bool inword = false;
    for (int ch = fgetc(file); ch != EOF; ch = fgetc(file)) {
        switch (ch) {
            case '\n':
                ++*lines;
                // fall through
            case ' ': 
            case '\r':
            case '\t':
                if (inword) {
                    ++*words;
                }
                inword = false;
                break;
            default:
                inword = true;                  
        }
        ++*letters;
    }
    fclose(file);
}

static void report(const char *filename, size_t lines, size_t words, size_t letters) {
    printf("%5lu %5lu %5lu %s\n", lines, words, letters, filename);
}

int main(int argc, char* argv[]) {
    size_t totallines = 0;
    size_t totalwords = 0;
    size_t totalletters = 0;
    if (argc &lt; 2) {
        puts("Usage: wc filename [filename ...]");
        return 0;
    }
    for (int i=1; i &lt; argc; ++i) {
        size_t lines = 0;
        size_t words = 0;
        size_t letters = 0;
        count(argv[i], &amp;lines, &amp;words, &amp;letters);
        report(argv[i], lines, words, letters);
        totallines += lines;
        totalwords += words;
        totalletters += letters;
    }
    if (argc &gt; 2) {
        report("total", totallines, totalwords, totalletters);
    }
}
</code></pre>
    </div>