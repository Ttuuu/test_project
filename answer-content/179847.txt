<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Function calls in callbacks</h3>

<p>Instead of making a closure/lambda function just to call a function, the name of the function can be used instead. For example, the following block:</p>

<blockquote>
<pre><code>$('.close-notification').bind('click', function () {
    _this.removeSelf();
});
</code></pre>
</blockquote>

<p>Could be simplified to:</p>

<pre><code>$('.close-notification').bind('click', _this.removeSelf);
</code></pre>

<p>Bear in mind that the arguments passed to the click handler (e.g. the clickEvent) would be passed to the <code>removeSelf</code> method but those should be ignored.</p>

<p>Also, <a href="http://api.jquery.com/bind" rel="nofollow noreferrer"><code>.bind()</code></a> is deprecated in version 3; <a href="http://api.jquery.com/click/" rel="nofollow noreferrer"><code>.click()</code></a> (or <a href="http://api.jquery.com/category/events/mouse-events/" rel="nofollow noreferrer">other event binding helpers</a>) can be used instead:</p>

<pre><code>$('.close-notification').click(_this.removeSelf); 
</code></pre>

<h3>Single element with class <em>notification</em></h3>

<p>Because the code won't add a notification element if there are already elements with that class name <em>notification</em>, the code could instead add a single hidden element when the DOM is ready, show it when the notification class is instantiated, and then hide it when necessary. That way the DOM wouldn't be manipulated as much. For more information, check out <a href="https://ilikekillnerds.com/2015/02/stop-writing-slow-javascript/" rel="nofollow noreferrer">Stop writing slow Javascript</a>. I know it bashes jQuery a bit in the beginning but later it has some useful information that I wish I had read years ago.</p>

<h3>Removing <em><code>_this</code></em></h3>

<p>One could use <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind" rel="nofollow noreferrer">Function.prototype.bind()</a> (not to be confused with the jQuery method <a href="http://api.jquery.com/bind" rel="nofollow noreferrer"><code>.bind()</code></a>) to bind functions to the context of <code>this</code>, which would eliminate the need for the extra variable <code>_this</code>. See an example below, also utilizing the function names instead of calls in simple closures.</p>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>function notification(notificationType, message, delay) {
    //var _this = this;
    this.notificationType = notificationType;
    this.className = 'notification';
    this.message = message;
    this.delay = delay || 3000;
    this.removeTimeOut;
    this.disappearTimeOut;

    this.init = function() {
        $('body').append('&lt;div class=" ' + this.className + ' ' + this.notificationType + '"&gt;&lt;p&gt;' + this.message + '&lt;/p&gt;&lt;i class="fa fa-times fa-lg close-notification"&gt;&lt;/i&gt;&lt;/div&gt;');
        this.setEvents();  
      
        this.removeTimeOut = setTimeout(this.startDisappearing.bind(this), this.delay);    
    };

    this.setEvents = function() {
        $('.close-notification').click(this.removeSelf);
    };

    this.startDisappearing = function() {
        $('.' + this.className).addClass('disappearing');
        this.disappearTimeOut = setTimeout(this.removeSelf.bind(this), 1200);
    };

    this.removeSelf = function() {
    console.log('args',arguments, this.className);
        clearTimeout(this.removeTimeOut);
        clearTimeout(this.disappearTimeOut);

        $('.' + this.className).remove();
    };
    
    if ($('.' + this.className).length === 0) this.init();
};
$(function() {
    $('#add').click(function() {
            new notification('warning', $('.sourcecode-warning').text(), 4000);
    });
});</code></pre>
<pre class="snippet-code-css lang-css prettyprint-override"><code>.notification {
  border: 2px solid #0F0;
  background: #0e0;
  color: #000;
  padding: 8px;
  position: relative;
}
.notification .close-notification {
  
  position: absolute;
  right: 0;
  top: 0;
}
.label {
  font-style: italic;
}</code></pre>
<pre class="snippet-code-html lang-html prettyprint-override"><code>&lt;link href="//netdna.bootstrapcdn.com/font-awesome/4.0.3/css/font-awesome.min.css" rel="stylesheet"/&gt;
&lt;script src="https://ajax.googleapis.com/ajax/libs/jquery/3.1.1/jquery.min.js"&gt;&lt;/script&gt;
&lt;button id="add"&gt;Add notifiation&lt;/button&gt;
  &lt;div class="label"&gt;sourcecode-warning:&lt;/div&gt;
  &lt;div class="sourcecode-warning"&gt;
    Send us a message
  &lt;/div&gt;</code></pre>
</div>
</div>


<h3>jQuery Element creation</h3>

<p>One could utilize jQuery's helper function to create elements (see example below), or utilize a template engine.</p>

<pre><code>var container = $('&lt;div&gt;',{"class": this.className + ' ' + this.notificationType});
var paragraph = $('&lt;p&gt;').append(this.message);
var close = $('&lt;i&gt;',{"class": 'fa fa-times fa-lg close-notification'});
container.append(paragraph, close);
$('body').append(container);
</code></pre>
    </div>