<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Implementation 1</h1>
<pre><code>const increaseQuantity = index =&gt; {
  const currentItems = [...stock];

  currentItems[index].quantity += 1;
  setStock(currentItems);
};

const decreaseQuantity = index =&gt; {
  const currentItems = [...stock];

  if (currentItems[index].quantity &gt; 1) {
    currentItems[index].quantity -= 1;
    setStock(currentItems);
  }
};
</code></pre>
<h2>Issues</h2>
<ul>
<li><code>currentItems[index].quantity += 1;</code> and <code>currentItems[index].quantity -= 1;</code> are state mutations.</li>
<li>Any computed state updates should use functional state updates and compute the next state from the current state. If for any reason more than a single <code>increaseQuantity</code> or <code>decreaseQuantity</code> is queued within a single render cycle only one gets applied. Similarly, if both a <code>increaseQuantity</code> <em>and</em> <code>decreaseQuantity</code> are enqueued, one would expect the net gain to be zero, but the last one enqueued is the one applied, so the net gain won't be zero.</li>
</ul>
<h2>Solution</h2>
<ul>
<li>Use a functional update</li>
<li>Correctly compute next state</li>
</ul>
<p>Suggestions</p>
<pre><code>const increaseQuantity = index =&gt; {
  setStock(stock =&gt;
    stock.map((el, i) =&gt;
      i === index
        ? {
            ...el,
            quantity: el.quantity + 1
          }
        : el
    )
  );
};

const decreaseQuantity = index =&gt; {
  setStock(stock =&gt;
    stock.map((el, i) =&gt;
      i === index
        ? {
            ...el,
            quantity: el.quantity - el.quantity &gt; 1 ? 1 : 0,
            // or
            // quantity: Math.max(0, el.quantity - 1),
          }
        : el
    )
  );
};
</code></pre>
<h1>Implementation 2</h1>
<pre><code>const manageQuantity = (index, action) =&gt; {
  const currentItems = [...stock];

  if (action === "increase") {
    currentItems[index].quantity += 1;
    setStock(currentItems);
  }

  if (currentItems[index].quantity &gt; 1 &amp;&amp; action === "decrease") {
    currentItems[index].quantity -= 1;
    setStock(currentItems);
  }
};
</code></pre>
<h2>Issues</h2>
<ul>
<li>Suffers the same state mutation issue previously mentioned.</li>
<li>More of a design pattern issue, but you've effectively encoded most of a reducer function.</li>
</ul>
<h2>Solution 1</h2>
<ul>
<li>Apply same fixes as implementation 1</li>
<li>Reduce code duplication in function</li>
</ul>
<p>Suggestions</p>
<pre><code>const manageQuantity = (index, action) =&gt; {
  setStock(stock =&gt;
    stock.map((el, i) =&gt;
      i === index
        ? {
            ...el,
            quantity:
              el.quantity + action === "increment"
                ? 1
                : el.quantity &gt; 1
                ? -1
                : 0
            // or
            // quantity: Math.max(0, el.quantity + action === "increment" ? 1 : -1)
          }
        : el
    )
  );
};
</code></pre>
<h2>Solution 2</h2>
<ul>
<li>Apply same fixes as implementation 1</li>
<li>Concert to <a href="https://reactjs.org/docs/hooks-reference.html#usereducer" rel="nofollow noreferrer"><code>useReducer</code></a> react hook</li>
</ul>
<p>Suggestions</p>
<p>Create action types &amp; creator, and a reducer function.</p>
<pre><code>const ACTIONS_TYPE = {
  INCREMENT: 'INCREMENT',
  DECREMENT: 'DECREMENT',
};

const reducer = (state, action) =&gt; {
  switch(action.type) {
    case ACTIONS_TYPE.INCREMENT:
      return state.map((el, i) =&gt; i === action.index ? {
        ...el,
        quantity: el.quantity + 1,
      } : el);

    case ACTIONS_TYPE.DECREMENT:
      return state.map((el, i) =&gt; i === action.index ? {
        ...el,
        quantity: Math.max(0, el.quantity - 1),
      } : el);

    default:
      return state;
  };
};

const increment = index =&gt; ({
  type: ACTIONS_TYPE.INCREMENT,
  index,
});

const decrement = index =&gt; ({
  type: ACTIONS_TYPE.DECREMENT,
  index,
});
</code></pre>
<p>Use in component</p>
<pre><code>const [state, dispatch] = useReducer(reducer, initialState);

const incrementQuantity = () =&gt; index =&gt; dispatch(increment(index));
const decrementQuantity = () =&gt; index =&gt; dispatch(decrement(index));

...

...onClick={incrementQuantity(index)}...
</code></pre>
<p><em><strong>Notice</strong></em>:</p>
<ul>
<li>Action types are defined as an ENUM so when used in code the likelihood of typos is reduced since the string text isn't used directly.</li>
<li>Like its redux big brother, it is a bit boiler-plately, but abstracts and isolates the state computation into a reducer pure function. IMO this improves the readability of the code using it.</li>
<li>It still applies the pattern of using the current state and some input to compute the next state, still always a returning a new state object.</li>
</ul>
<h1>TL;DR</h1>
<p>Complexity is similar in both approaches so it really comes down to familiarity. The former is close to the normal component state pattern while the latter resembles a portion of the redux pattern. One isn't necessarily better than the other, though I'd say for simple state the <code>useState</code> and update functions may be easier to grok for juniors joining your team than the <code>useReducer</code> which works well for more complex state shapes.</p>
<p>Lessons Learned</p>
<ol>
<li>Don't mutate state, use shallow copies of state (and sub-state) and update when necessary.</li>
<li>Use functional state updates to ensure multiple state updates enqueued within the same render cycle correctly compute next state from previous state.</li>
</ol>
    </div>