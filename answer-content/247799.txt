<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I suppose the simplest thing is to go through the principles:</p>
<ul>
<li>SRP - Cannot see any 'too big' things in your example</li>
<li>OCP - The example is small enough and you are not using class
inheritance that I cannot think of how this would apply</li>
<li>LSP - You only have one implementation of each interface so hard to
say</li>
<li>ISP - Your interfaces seem to serve a single purpose that might serve
the needs of several users - so no complaints there</li>
<li>DIP - You have pushed the more variable 'decision' making out,
keeping the API more abstract which seems reasonable.</li>
</ul>
<p>Much of this, of course, depends on your specific aims and requirements. some thoughts:</p>
<ul>
<li>How likely is it that the mapper and reader will vary independently?</li>
<li>Are you going to get any reuse out of all the different readers and mappers (actual not future-proofing)</li>
<li>Will each reader have a mapper in practice, in which case your comment about combining the mapper and reader is worth more thought.</li>
<li>Do you really need an interface for the reader, it seems like you are just wrapping what could be a function/lambda</li>
<li>What is the motivation in restricting the outbound data?</li>
<li>I appreciate this may just be an exercise, but it's good practice to think if you need to do this kind of restriction</li>
</ul>
<p>It can be difficult to have a good instinct for principles like SOLID on toy problems due to the lack of realistic constraints and compromises.</p>
    </div>