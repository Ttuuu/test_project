<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Assuming you cannot us generator expressions (which technically are not mutable but I can see being outside the scope of the assignment), solution 1 can be simplified by iterating over the items of the tuple, and by use the <code>+=</code> in-place append:</p>

<pre><code>def map_tuple(func, tup):
    """
    Applies func to each element of tup and returns a new tuple.

    &gt;&gt;&gt; a = (1, 2, 3, 4)
    &gt;&gt;&gt; func = lambda x: x * x
    &gt;&gt;&gt; map_tuple(func, a)
    (1, 4, 9, 16)
    """
    new_tuple = ()
    for itup in tup:
        new_tuple += (func(itup),)
    return new_tuple
</code></pre>

<p>The second can be simplified by looking for the case where the tuple is empty, and if it is not empty return the map of everything except the last element, plus the function applied to the last element:</p>

<pre><code>def map_tuple_recursive(func, tup):
    """Applies func to each element of tup and returns a new tuple.

    &gt;&gt;&gt; a = (1, 2, 3, 4)
    &gt;&gt;&gt; func = lambda x: x * x
    &gt;&gt;&gt; map_tuple(func, a)
    (1, 4, 9, 16)
    """
    if not tup:
       return ()
    return map_tuple_recursive(func, tup[:-1]) + (func(tup[-1],)
</code></pre>

<p>Using a generator expression lets you do this, but maybe outside the scope of what you are allowed to do:</p>

<pre><code>def map_tuple_gen(func, tup):
    """
    Applies func to each element of tup and returns a new tuple.

    &gt;&gt;&gt; a = (1, 2, 3, 4)
    &gt;&gt;&gt; func = lambda x: x * x
    &gt;&gt;&gt; map_tuple(func, a)
    (1, 4, 9, 16)
    """
    return tuple(func(itup) for itup in tup)
</code></pre>
    </div>