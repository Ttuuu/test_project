<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Person</strong></p>

<p>Split user-input from your class definition. It's not a good practice to mix the input in the definition. Try to decouple as much as possible. I also redefined the properties in the class:</p>

<pre><code>public string FirstName { get; set; }
public string MiddleName { get; set; }
public string LastName { get; set; }
public int Age { get; set; }
public string Phone { get; set; }
</code></pre>

<p>Same goes for displaying the information about the person. It's not a good practice to write it to screen from within this class. Just override the ToString()-method and display this on screen. The FirstChar()-method is there to check if the name exists to take the first character of that name, otherwise return a spacer.</p>

<pre><code>public override string ToString()
{
    StringBuilder sb = new StringBuilder();
    sb.AppendLine(String.Format("Your name is: {0} {1}. {2}", FirstName, FirstChar(MiddleName), LastName));
    sb.AppendLine(String.Format("Your initials are: {0}{1}{2}", FirstChar(FirstName), FirstChar(MiddleName), FirstChar(LastName)));
    sb.AppendLine(String.Format("Your age is: {0}", Age));
    sb.AppendLine(String.Format("Your phone number is: {0}", Phone));

    return sb.ToString();
}

private char FirstChar(string input)
{
    return String.IsNullOrEmpty(input) ? ' ' : input[0];
}
</code></pre>

<p><strong>Input</strong></p>

<p>Since the input is not mixed in the Person-class we have to declare it somewhere else. In this example I put the input-code in the KeyInput class. The method returns an instance of the Person-class and if the user enters "exit", null is returned. This way we can later on catch if the user wants to stop.</p>

<pre><code>public static Person NewPerson()
{
    string first = KeyInput.keyIn("Please enter your first name: ");
    if (first.ToLower().Equals("exit"))
        return null;

    string middle = KeyInput.keyIn("Please enter your middle name: ");
    string last = KeyInput.keyIn("Please enter your last name: ");
    int age = 0;

    while (true)
    {
        try
        {
            age = Convert.ToInt32(KeyInput.keyIn("Please enter your age"));
            break;
        }
        catch (ArgumentException)
        {
            Console.WriteLine("No value was entered");
        }
        catch (FormatException)
        {
            Console.WriteLine("You didn't entered a valid number");
        }
        catch (Exception)
        {
            Console.WriteLine("Something went wrong with the conversion.");
        }
    }

    string phone = KeyInput.keyIn("Please enter your  phone number\n");

    return new Person { FirstName = first, MiddleName = middle, LastName = last, Age = age, Phone = phone };
}
</code></pre>

<p><strong>Main</strong></p>

<p>Since all previous code has changed, the logic of your Main will change too.</p>

<pre><code>public static void Main()
{
    Console.WriteLine("Please enter data for person(s). Enter EXIT to end.");

    List&lt;Person&gt; people = new List&lt;Person&gt;();

    while (true)
    {
        var person = KeyInput.NewPerson();

        if(person == null)
            break;

        people.Add(person);
    }

    foreach (var person in people)
    {
        Console.WriteLine(person.ToString());
    }
}
</code></pre>

<p><strong>Summary</strong></p>

<p>I'm not saying that my code is perfect in any way. Probably my code could be revised and corrected as well. I only want to show you the way how you decouple user-input from class-definitions, use proper variable names, bring a proper structure and logic in your code. Please feel free if to comment if anything's wrong with my code.</p>

<p><strong>Edit:</strong></p>

<p>Thanks to the valid comments I received, I edited the code. The posters of the comments were absolutely right. I've also rewritten the Initial()-method to a more correct logic. Here's the result in it's entirety:</p>

<pre><code>internal class Person
{
    public string FirstName { get; set; }
    public string MiddleName { get; set; }
    public string LastName { get; set; }
    public int Age { get; set; }
    public string Phone { get; set; }

    public override string ToString()
    {
        var sb = new StringBuilder();

        sb.AppendFormat("Your name is: {0} {1} {2}", FirstName, Initial(MiddleName, true), LastName).AppendLine();
        sb.AppendFormat("Your initials are: {0}{1}{2}", Initial(FirstName, false), Initial(MiddleName, false), Initial(LastName, false)).AppendLine();
        sb.AppendFormat("Your age is: {0}", Age).AppendLine();
        sb.AppendFormat("Your phone number is: {0}", Phone).AppendLine();

        return sb.ToString();
    }

    private static string Initial(string input, bool dot)
    {
        if (String.IsNullOrEmpty(input))
            return input;

        if(input.Contains(" "))
            return input.Split(' ').Aggregate("", (current, s) =&gt; current + s[0]);

        return input[0] + (dot ? "." : "");
    }
}

internal class KeyInput
{
    public static string KeyIn(string scrtext)
    {
        Console.Write(scrtext);
        var buffer = Console.ReadLine();
        return buffer;
    }
}

internal class Program
{
    public static void Main(string[] args)
    {
        Console.WriteLine("Please enter data for one or more person(s)." + Environment.NewLine);

        var people = new List&lt;Person&gt;();
        var newInput = true;

        while (newInput)
        {
            var person = GetNewPerson();
            people.Add(person);
            newInput = KeyInput.KeyIn("Add another person? (Y/N): ").ToLower().Equals("y");
        }

        foreach (var person in people)
            Console.WriteLine(person.ToString() + Environment.NewLine);

        Console.ReadKey();
    }

    public static Person GetNewPerson()
    {
        var first = KeyInput.KeyIn("Please enter your first name: ");
        var middle = KeyInput.KeyIn("Please enter your middle name: ");
        var last = KeyInput.KeyIn("Please enter your last name: ");
        int age;

        while (!int.TryParse(KeyInput.KeyIn("Please enter your age: "), out age))
            Console.WriteLine("Invalid input, try again...");

        var phone = KeyInput.KeyIn("Please enter your  phone number: ");

        return new Person { FirstName = first, MiddleName = middle, LastName = last, Age = age, Phone = phone };
    }
}
</code></pre>

<p>Still feel free to comment, I'm learning myself! ;)</p>
    </div>