<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Question 1</h2>
<blockquote>
<p><em>So which way should I go?</em></p>
</blockquote>
<p>That depends on what is the assessment criteria. Three basic criteria are performance, readability and ease of use.</p>
<h3>Readability</h3>
<p>That depends on the reader. Knowing that bitwise operators coerce numbers to signed 32 ints the need to clarify this by using <code>Math.imult</code> is mute. Personally operators are more readable than functions, but some argue the opposite. I would opt for the second version.</p>
<h3>Ease of use</h3>
<p>Is the function easy to use? Can it be misused? Yes and no. The <code>Math.imult</code> is a little easier because it does not rely on coercion and thus handles different number types better.</p>
<p>The second version has a bug that makes its use difficult.</p>
<p>Example of a <strong>failure</strong>.</p>
<pre><code>clmul_u32_coerced(0b1110000000000, 1.2); // &gt;&gt; incorrect 0b1111001100110
clmul_u32_imult(0b1110000000000, 1.2);   // &gt;&gt; correct 1110000000000
</code></pre>
<p>Why does <code>clmul_u32_coerced</code> fail? The reason is that javascript coerces to the left and for numbers to the highest precision. Thus if you have a double in the operation the result will be a double.</p>
<p>To fix  <code>clmul_u32_coerced</code> you need to coerce <code>b</code> to an int32. <strike>But this comes at a performance cost (see below)</strike> Well I assumed it would be slower, not so the extra line is worth it, even if you pass int's as args.</p>
<pre><code>function clmul_u32_coerced_f(a, b) {
    var prod = 0;
    b |= 0;
    while (a !== 0) {  // Note strict not equal add ~1% performance
        prod ^= b * (a &amp; -a);
        a &amp;= a - 1;
    }
    return prod;
}
</code></pre>
<p>Ease of use means that the caller need not worry about type so <code>clmul_u32_imult</code> is the better option, or use the variant above.</p>
<h3>Performance</h3>
<p>In terms of performance the use of the <code>*</code> operator gives a benefit. This is expected as any function call has overhead that is generally unavoidable. Testing shows the performance comparison.</p>
<p>Tests using double. Note that <code>32Int coerced</code> fails</p>
<pre><code>Testing Compare clmul(0b1110000000000, 1.2) 400 times. Sorted by performance.
32Int coerced fixed *.: 0.836µs OPS 1,195,472 100% Total 786ms 940 cycles
Math.imul.............: 0.878µs OPS 1,139,002  95% Total 904ms 1030 cycles
32Int coerced **......: 0.973µs OPS 1,028,149  86% Total 1,002ms 1030 cycles

// * Fixed includes the line `b |= 0;` 
// ** This call fails to return the correct result
</code></pre>
<p>Tests using arguments that are typed as Signed Int32 eg <code>const a = 0b1110000000000 | 0, b = 1 | 0; clmul(a, b);</code> so there is no failure.</p>
<pre><code>Testing Compare clmul(0b1110000000000, 1) 400 times.
32Int coerced fixed *.: 0.358µs OPS 2,791,501 100% Total 1,214ms 1130 cycles
32Int coerced.........: 0.404µs OPS 2,478,225  89% Total 1,114ms 920 cycles
Math.imul.............: 0.525µs OPS 1,903,171  68% Total 1,497ms 950 cycles

// * Fixed includes the line `b |= 0;` 
</code></pre>
<p>Thus the test device can do 2,791,501 * 400 ~= 1,116,600,400 <code>clmul</code>'s a second. Not bad for Javascript on a 1.60GHz Core.</p>
<h2>Question 2</h2>
<blockquote>
<p><em>Or perhaps there are better ways entirely?</em></p>
</blockquote>
<p>In javascript there is no easy better way. The functions performance is dependent on the number of bits in <code>a</code>. The operation <code>b * (a &amp; -a)</code> lets you shift <code>b</code> via a multiplication. However if you could get the bit position of <code>(a &amp; -a)</code> then you could use <code>b &lt;&lt; bitPos(a &amp; -a)</code> which would be quicker if <code>bitpos</code> had no overhead.</p>
<p>Consider the following variation that avoids the multiplication by shifting <code>b</code> and xoring it with the product.</p>
<pre><code>function clmul_u32_b(a, b) {
    var p = 0;
    while (a &gt; 0) {
        while((a &amp; 1) === 0) {
            a &gt;&gt;= 1;
            b &lt;&lt;= 1;
        }
        p ^= b;
        a &gt;&gt;= 1;
        b &lt;&lt;= 1;
    }
    return p;
}
</code></pre>
<p>The problem is that its performance is dependent on the position of the highest bit in <code>a</code>. Thus with four bits at the top it runs at a poor 35% of your fixed coerced version</p>
<pre><code>Testing Compare clmul(0xF000000, 1).
32Int coerced.: 0.520µs OPS 1,924,528 100% Total 530ms 1020 cycles
Shifting......: 1.497µs OPS 667,984  35% Total 1,467ms 980 cycles
</code></pre>
<p>But swap the arguments and the table is turned upside down out performing all other versions with ease.</p>
<pre><code>function clmul_u32_b(b, a) {  // swapped args
    ... code see above snippet
    return p;
}
</code></pre>
<p>Results</p>
<pre><code>Testing Compare clmul(0xF000000, 1).
Shifting swap.: 0.188µs OPS 5,324,813 100% Total 563ms 1000 cycles
32Int coerced.: 0.521µs OPS 1,918,526  36% Total 1,564ms 1000 cycles
</code></pre>
<p>You may think, why not add a line that swaps the arguments, ensuring that <code>a</code> is less than <code>b</code> allowing for the least number of shifts. This does not work. A JS statement will force a cache miss and you lose any benefit.</p>
<h2>Conclultion</h2>
<p>In terms of ease of use, readability (4+ years JS experience reader), and performance your coerced version with the extra line to force b to an int has in my view the best for all 3 criteria.</p>
<pre><code>// includes the line b |= 0
function clmul_u32_coerced(a, b) {
    var prod = 0;
    b |= 0;
    while (a != 0) {
        prod ^= b * (a &amp; -a);
        a &amp;= a - 1;
    }
    return prod;
}
</code></pre>
<p>Though the shifting version I present can in a best case out perform by a factor of 3, the best case is rare and any code to select for best cases will result in an overall performance loss.</p>
<h2>Notes on testing</h2>
<ul>
<li>A call is via a function that grouped function calls by 400 see below.</li>
<li>Calls are run in strict mode.</li>
<li>Calls have been allowed to run until optimisations complete (eg testing waits till times are stable before logging time)</li>
<li>Device and setup <code>"Chrome Version 70.0.3538.102 (Official Build) (32-bit)"</code> on a  <code>"Win10 CPU i7 Q720 @1.6GHz"</code> laptop</li>
</ul>
<p></p><div class="snippet" data-lang="js" data-hide="true" data-console="true" data-babel="false">
<div class="snippet-code snippet-currently-hidden">
<pre class="snippet-code-js lang-js prettyprint-override"><code>function call(a, b) {
    var i = 25;
    while (i--) {
        clmul_u32(a, b);
        clmul_u32(a, b);
        clmul_u32(a, b);
        clmul_u32(a, b);
        clmul_u32(a, b);
        clmul_u32(a, b);
        clmul_u32(a, b);
        clmul_u32(a, b);
        clmul_u32(a, b);
        clmul_u32(a, b);
        clmul_u32(a, b);
        clmul_u32(a, b);
        clmul_u32(a, b);
        clmul_u32(a, b);
        clmul_u32(a, b);
        clmul_u32(a, b);
    }
}</code></pre>
</div>
</div>

<p>In javascript the performance landscape is in constant flux, browser version changes can have significant changes to performance comparisons, and not always positive. If performance is important than you must monitor performance for each browser update, and use code that is tuned for each browser's type.</p>
    </div>