<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'm no professional when it comes to testing. But it looks like your code is a perfect example on non-test friendly code. And is why SRP, <a href="https://en.wikipedia.org/wiki/Single_responsibility_principle" rel="noreferrer">single responsibility principle</a> is such a big thing.</p>

<p>From my perspective, your function is doing two things:</p>

<ol>
<li>Making <code>path</code>.</li>
<li>Ensuring <code>path</code> exists.</li>
</ol>

<p>If you change your code so that those are two distinct functions than you can test more easily. And finally have <code>get</code> as a helper function.</p>

<pre class="lang-py prettyprint-override"><code>def generate_path(base, timestamp, channel):
    return (
        pathlib.Path(base)
        / "tofu"
        / timestamp.strftime("%Y%m%d")
        / f"{channel:&gt;02d}"
        / "quinoa.txt"
    )


def ensure_exists(path):
    if path.exists():
        print(path, "exists")
    else:
        path.parent.mkdir(exist_ok=True, parents=True)


def get(base, timestamp, channel):
    path = generate_path()
    ensure_exists(path)
    return path

</code></pre>

<p>I believe someone more versed in testing would be able to say something more enlightening about what you should unittest and what you should mock. But from my POV I don't see why the implementation details of <code>generate_path</code> should matter, all that matters is you get the correct result. The implementation details of <code>ensure_exists</code>, however, do matter, as it can be hard to test file interactions. But with <a href="https://codereview.stackexchange.com/a/237063">etene's</a> changes this statement can suddenly become false.</p>

<p>Overall I agree with etene's answer, but I think my answer should help when designing your code for testing.</p>

<pre class="lang-py prettyprint-override"><code>import pathlib
import unittest.mock
import datetime


def generate_path(base, timestamp, channel):
    return (
        pathlib.Path(base)
        / timestamp.strftime("tofu/%Y%m%d")
        / f"{channel:&gt;02d}"
        / "quinoa.txt"
    )


def ensure_exists(path):
    if path.exists():
        print(path, "exists")
    else:
        path.parent.mkdir(exist_ok=True, parents=True)
    return path


class Tests(unittest.TestCase):
    BASE = "quorn"
    TIME = datetime.datetime(2020, 2, 11, 0, 0, 0, 0)
    CHANNEL = 42
    PATH = pathlib.Path("quorn/tofu/20200211/42/quinoa.txt")

    def test_generate_path(self):
        self.assertEqual(
            generate_path(self.BASE, self.TIME, self.CHANNEL),
            self.PATH,
        )

    @unittest.mock.patch("pathlib.Path", autospec=True)
    def test_ensure_exists(self, pP):
        pP.exists.return_value = False
        ensure_exists(pP)
        pP.parent.mkdir.assert_called_once()


if __name__ == '__main__':
    unittest.main()
</code></pre>
    </div>