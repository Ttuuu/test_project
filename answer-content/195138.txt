<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I can't add to the existing reviews of your code (other than I find it a little hard to follow), but maybe you find the below Linq-approach useful as inspiration. It seems to be "slow" for small data sets but rather fast for larger:</p>

<pre><code>public static IEnumerable&lt;IEnumerable&lt;T&gt;&gt; CombinationsOfK&lt;T&gt;(T[] data, int k)
{
  int size = data.Length;

  IEnumerable&lt;IEnumerable&lt;T&gt;&gt; Runner(IEnumerable&lt;T&gt; list, int n)
  {
    int skip = 1;
    foreach (var headList in list.Take(size - k + 1).Select(h =&gt; new T[] { h }))
    {
      if (n == 1)
        yield return headList;
      else
      {
        foreach (var tailList in Runner(list.Skip(skip), n - 1))
        {
          yield return headList.Concat(tailList);
        }
        skip++;
      }
    }
  }

  return Runner(data, k);
}
</code></pre>

<p><strong>Usage:</strong></p>

<pre><code>  int[] data = Enumerable.Range(1, 10).ToArray();
  int k = 3;
    foreach (string comb in CombinationsOfK(data, k).Select(c =&gt; string.Join(" ", c)))
    {
      Console.WriteLine(comb);
    }
</code></pre>
    </div>