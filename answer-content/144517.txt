<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>It's been a while and I haven't got a review for the question. I am attempting to answer my own question. Do point out any mistakes. Happy to take it.</p>

<ol>
<li><p>Create Mocks</p></li>
<li><p>Define return values for methods with mockitos when</p></li>
<li><p>Call the test method</p></li>
<li><p>Verify all the methods are called in the chain with correct arguments</p></li>
</ol>

<p>I changed my <code>FeedViewModel</code> constructor</p>

<pre><code>public FeedViewModel(Context context, DataListener datalistener,DataManager dataManager) {

    this.datalistener = datalistener;
    mContext =  context;
    this.dataManager = dataManager;
}
</code></pre>

<p>With the above I can pass actual arguments while fetching data and mock them while testing. Mockitos when requires mock objects.</p>

<p>With that in place, I had to pass the mocks while setting up in the test</p>

<p>Mocks:</p>

<pre><code> dataListener = mock(FeedViewModel.DataListener.class);
 Context mMockContext = mock(Context.class);
 dataManager =mock(DataManager.class);
</code></pre>

<p>Then:</p>

<pre><code>feedViewModel = spy(new FeedViewModel(mMockContext, dataListener,dataManager));
</code></pre>

<p>Then my final unit test:</p>

<pre><code>@Test
public void testShouldScheduleLoadFromAPIOnBackgroundThread() {

    Observable&lt;FeedResponse&gt; observable = (Observable&lt;FeedResponse&gt;) mock(Observable.class);

    when(dataManager.fetchFeed()).thenReturn(observable);
    when(observable.subscribeOn(Schedulers.io())).thenReturn(observable);
    when(observable.observeOn(AndroidSchedulers.mainThread())).thenReturn(observable);

    //call test method
    feedViewModel.fetchFeed();
    verify(feedViewModel).fetchFeed();

    verify(observable).subscribeOn(Schedulers.io());
    verify(observable).observeOn(AndroidSchedulers.mainThread());
    verify(observable).subscribeWith(Matchers.&lt;DisposableObserver&lt;FeedResponse&gt;&gt;any());

}
</code></pre>

<p>To be sure that my code is correct, I checked some repos on github. Although I used MVVM pattern the test case is similar when you use MVP.</p>

<p>To test you need to have a clean architecture. With clear separation you can test your viewmodel with junit test and the UI with espresso.</p>

<p>I referred to <a href="https://github.com/anupcowkur" rel="nofollow noreferrer">this</a> github repository to make sure my test code is correct.</p>
    </div>