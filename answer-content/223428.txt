<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>According to pep8 imports should be ordered alphabetically so</p>

<pre><code>import reporters
import senders
</code></pre>

<p>Your classes from the <code>senders</code> module don't take instantiation parameters and just have one method used so these could probably just be functions.</p>

<pre><code>from senders import send_email, send_sms, save_file, show_console
</code></pre>

<p>Similarily <code>Comparator</code> only contains a single method and no state so it too should be a function</p>

<pre><code>def compare(compared, competitors):
    ...
</code></pre>

<p><code>valid_item</code> and <code>rule_valid_compared</code> seem to have their responsibilities a bit mixed, I would change this to.</p>

<pre><code>def is_item_valid(self, item):
    return 'loading_time' in item

def report_valid_item(self, item):
    is_valid = self.is_item_valid(item):
    if is_valid:
        self._reporter.report_loading_time(item)
    else:
        self._reporter.report_invalid(item)
    return is_valid
</code></pre>

<p>You can also reduce a lot of duplication between the two actual comparison methods by parametrize it, also as each item has already been <em>validated</em> you can replace the <code>get</code> with key lookup. </p>

<pre><code>def compare_is_smaller(self, n=1, report_func=lambda a: None):
    for item in self.competitors:
        if (item['loading_time'] * n) &lt; self.compared['loading_time']:
             report_func(self.compared, item)
             result = True
    return result

def compare_smaller(self):
    return self.compare_is_smaller(report_func=self._reporter.report_smaller)

def compare_twice_as_small(self):
    return self.compare_is_smaller(report_func=self._reporter.report_twice_as_small)
</code></pre>
    </div>