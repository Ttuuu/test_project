<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Review</h1>
<p>Welcome to Code review.</p>
<p>Interesting project, I have never seen Battle TicTacToe so created a review to see how it played. It got a little out of hand.</p>
<p>I have trimmed quite a lot and I normally do a rewrite of the code. But in this case I found that I had to make major changes, thus making the rewrite completely unrelated to the original code. There is not much to learn from such an extensive rewrite.</p>
<p>Feel free to ask questions in the comments.</p>
<h2>Bugs</h2>
<p>Bugs I found just reading your source. I have not run your code.</p>
<p>There are potential and hidden bugs in your code. Hidden bugs are bugs that break the intended logic but are not obviously apparent (they don't throw errors)</p>
<ul>
<li><strong>ALWAYS</strong> define variables. You have undefined variable <code>i</code> and many more. Using variables without defining them means that they are globals. Though in this example the undefined variable <code>i</code> will not cause you a problem. It would, if you called a function that used <code>i</code> as well.</li>
</ul>
<p>Example the following code will lock up the page and require you to close it manually, because the second function <code>doTwoThings</code> will change the global <code>i</code> to 2 when it returns meaning the calling loop will never reach 10</p>
<pre class="lang-js prettyprint-override"><code>doTenThings();
function doTwoThings() {
   for(i = 0; i &lt; 2; i++){
      console.log("Hi there");
   }
}
 
function doTenThings() {
   for(i = 0; i &lt; 10; i++){
      doTwoThings()
   }
}
</code></pre>
<p>For learning JavaScript you should make a habit of adding the directive <code>"use strict";</code> as the first line of any javascript file or <code>&lt;script&gt;</code> tag as it will throw an error when you use an undefined variable. If added to the above example it would not run.</p>
<ul>
<li>You have the line <code>if(fightingNumber =&gt; 4) {</code> (which is a new one for me). Lucky (or unlucky) it does not create a parsing error because its an arrow function and the statement <code>(fightingNumber =&gt; 4) === true</code>. I assume you meant <code>if(fightingNumber &gt;= 4) {</code></li>
</ul>
<h2>Style</h2>
<p>Good code style is the most important attribute of a good programmer. There are a zillion styles out there, and the arguments as to which is best get heated.</p>
<p>Which is best is up to the individual but there are some style rules that help avoid some common language specific problems.</p>
<ul>
<li>Use <code>===</code> rather than <code>==</code> and <code>!==</code> rather than <code>!=</code>.</li>
<li>Make unchanging variables constants. Eg <code>var coordList = [</code> should be <code>const coordList = [</code></li>
<li>Don't forget to add semicolon to the end of lines.</li>
<li>Variables declared as <code>var</code> should be defined at the top of the function. Do not define them as needed. Learn the difference between <code>let</code>, <code>const</code> and <code>var</code> and use the appropriate type of variable.</li>
<li>Don't add code in the markup (HTML). Eg <code>onclick="place(this)"</code> should be in the JavaScript using <code>addEventListener</code></li>
</ul>
<p>There are style rules that make code readable, these are the most argued rules and thus none are definitive</p>
<ul>
<li><p>Spaces between operators. examples</p>
<ul>
<li><code>a+b</code> as <code>a + b</code></li>
<li><code>if(a===b){</code> as <code>if (a === b) {</code></li>
<li><code>[1,2,3,4];</code> as <code>[1, 2, 3, 4];</code></li>
</ul>
</li>
<li><p>Don't use comments to remove code. Remove it if it's no longer needed.</p>
</li>
<li><p>If you find yourself prefixing variables with the same name it is a good sign that that prefix should be an object. Eg you have <code>currentPlayer</code>, <code>currentAction</code>, and <code>currentType</code>, is better as <code>const current = {action: "picking", type: "Noughts", player: "O"};</code></p>
</li>
<li><p>Use constants to define magic numbers and strings.</p>
</li>
<li><p>Define grouped constants by name. E.g. <code>actions = {picking: 1, playing: 2};</code> then you check for the current action with <code>current.action === actions.playing</code></p>
</li>
</ul>
<h2>Consistent style</h2>
<p>There is one style rule that everyone can at least agree upon, it is by far the most important you must master.</p>
<p><strong>Be Consistent</strong> If you add spaces between operators, then always do it. If you don't like semicolons, then never use them. Inconsistent style makes looking for bugs so much harder.</p>
<h2>Code</h2>
<p>Good code has the following attributes</p>
<ol>
<li>Is simple.</li>
<li>Is granular (many short functions rather than a few long functions).</li>
<li>Is well organised (related functions keep together, variables declared together, magic numbers as constants),</li>
<li>Is efficient.</li>
</ol>
<p>Most of these relate to readability and maintainability, but an eye for efficiency is also important as users of your software don't see code, they see the end product and slow inefficient code does not make for happy clients and they are always the most important reviewers of your software.</p>
<p>Many of the following points cross over, they are listed in the most appropriate category.</p>
<h3>Incorrect language use</h3>
<ul>
<li>You incorrectly use the ternary <code>currentType == "Noughts" ? currentType = "Crosses": currentType = "Noughts";</code> should be <code>currentType = currentType == "Noughts" ? "Crosses" : "Noughts";</code></li>
</ul>
<h3>Maintainability</h3>
<ul>
<li><p>If you have many elements that you assign the same event handler, you should consider a single handler and use the event object to determine which item has been clicked.</p>
</li>
<li><p>The function <code>place</code> is way to long and should be reduced into smaller functions.</p>
</li>
<li><p>Don't over complicate the system. The game has 9 items and you are indexing them as 9 3 character strings "0_0" to "2_2" which means your code is full of strings. These can be replace via an index, 0-8, that can be used as an array indexes to lookup content as needed. (you can almost half the code size by using index rather than the coord string)</p>
</li>
<li><p>If you have a set of <code>if</code> statements that are exclusive, use <code>else</code>. Or if you have large sets of <code>if {} else if {} ... else {}</code> consider using <code>switch</code> statements, or even use lookups.</p>
</li>
<li><p>The function <code>checkGameBoard</code> does more than check the board for a win, it handles the win as well. Try to keep a functions role too just one thing. It would be better if it returned the game status and then the calling function can handle the result.</p>
</li>
</ul>
<h3>Performance</h3>
<ul>
<li><p>Use <code>element.textContent</code> rather than <code>element.innerText</code> as it is faster and does not force a reflow.</p>
</li>
<li><p>DOM queries such as <code>document.getElementById</code> are very sloooowwww.... Locate them once and put them in variables so you don't have to interrogate the DOM each time you need access.</p>
</li>
<li><p>Learn to use the DOM API to create and add elements. Using <code>innerHTML</code> is again very sloooowwww....</p>
</li>
<li><p>Use CSS style rules to change content. You keep removing and adding option buttons. You should have the button already defined and use a class rule to hide and show them as needed rather than add new ones each move.</p>
</li>
<li><p>You can improve efficiency by precalculating information and storing it. For example the function <code>checkAdjecent</code> does a complicated sequence of steps to find locations. These locations can be stored in an array <code>const adjacent = [[1,3], [0,4,2], [1,5], [0,4,6], [1,3,5,7], [2,4,8], [3,7], [4,6,8], [5,7]];</code> where the cells (boxes) are numbered from 0 to 8. Thus the adjacent boxes for box 4 (center) is array <code>adjacent[4]</code>,  <code>[1,3,5,7]</code></p>
</li>
</ul>
<h3>Simplify</h3>
<p>Every extra line, even every character is another point where an error can occur. When looking for bugs, every extra character and line is more check. In a mass of code it is difficult to find typos. To reduce the chance of bugs you should constantly be thinking of ways to reduce the complexity of the code, both logically and in terms of size.</p>
<p>Some points on simplifying.</p>
<ul>
<li><p>You check for a win on each cell (box), however a win is a win no matter which cell is set so you can simplify the win by checking for all wins in the function. Thus you don't need that long list of <code>if(bos == "1_1")</code> just one call and check all winning rows for any win.</p>
</li>
<li><p>If you are getting one character from a string you can use brackets to index the character <code>currentPlayer.substring(1,2)</code> becomes <code>currentPlayer[1]</code></p>
</li>
<li><p>You generate a random number from 0-6 and add one to it <code>const fightingNumber = Math.random() * 6 + 1 | 0;</code>, then you test if that number is <code>fightingNumber &gt;= 4</code>. You can skip adding one and test if the number is <code>&gt; 2</code>. However if you think about it you are using the random number to pick a 50% chance for one action or the other which can be done with <code>if (Math.random() &lt; 0.5) {</code> or <code>if (Math.random() &gt;= 0.5) {</code></p>
</li>
<li><p>You test for not an empty array with <code>if(array.length !== 0)</code> however the number <code>0</code> (and <code>-0</code>) equate to <code>false</code> and other numbers are <code>true</code> so you can do the same with <code>if (array.length) {</code></p>
</li>
</ul>
    </div>