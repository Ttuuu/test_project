<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Algorithm</h2>
<p>This looks like it was primarily developed as a library, it is possible on code review to provide separate files for review. Most of the code belongs possibly in a file called <code>memoryblockallocator.c</code>, there should also be a <code>memoryblockallocator.h</code> that provides the public function prototypes for <code>memoryblockallocator.c</code>. The <code>main()</code> function can be in a separate file called <code>main.c</code> which includes the header file <code>memoryblockallocator.h</code>. Within <code>memoryblockallocator.c</code> both <code>pool_heap</code> and <code>g_pools</code> should be declared as <code>static</code> so that they are not accessible to the rest of the program, currently only <code>pool_heap</code> is declared as <code>static</code>.</p>
<p>Due to the logic in <code>is_power_of_two()</code> there is no benefit in declaring this an <code>inline</code> function, also modern <code>C</code> compilers that optimize the generated code may ignore <code>inline</code> since it is only a recommendation in the C99 standard.</p>
<p>There is no need to put a size into the declaration <code>size_t block[4] = {32, 64, 256, 1024};</code> in <code>main()</code>, C will give it the proper size, and the code already contains the proper way to calculate the size in the call to <code>pool_init()</code>.</p>
<p>In the function <code>void pool_free(void* ptr)</code> it might be good if the code merged adjacent blocks so that if the memory needs to be allocated again it isn't too fragmented. When allocating memory it might be good to use either a best fit or first fit algorithm for the allocation also to reduce the possibility of fragmentation. To do this the <code>node</code> struct may need to be augmented with more information.</p>
<h2>Lack of Error Checking or Checking of Return Values</h2>
<p>The function <code>pool_init(size_t* block_sizes, size_t block_size_count)</code> returns a bool value indicating the success or failure of the initialization, but this is ignored in <code>main()</code>. If <code>pool_intit()</code> fails <code>main()</code> should probably report an error and exit.</p>
<h2>Unused and Untested Functions</h2>
<p>Niether the function <code>void pool_deinit(void)</code> or the function <code>void pool_free(void* ptr)</code> are called in the program. In the case of <code>void pool_free(void* ptr)</code> this means that an important and complex part of the code is not being tested. It would not be good to trust that <code>void pool_free(void* ptr)</code> is working properly without testing it.</p>
<h2>If Statements That Don't Do Anything</h2>
<p>In the function <code>void pool_free(void* ptr)</code> there is this if statement that doesn't change anything:</p>
<pre><code>    // check if it is beyond the boundaries of heap
    if (ptr &lt; (void*)pool_heap || ptr &gt;= (void*)&amp;pool_heap[HEAP_SIZE]) {
    }
</code></pre>
<p>If there is no action then this <code>if</code> statement isn't necessary</p>
<p>In the function <code>void* pool_malloc(size_t n)</code> there is this <code>if</code> statement.</p>
<pre><code>    if (n &lt;= pool-&gt;block_size) {
    } else {
        return NULL;
    }
    
</code></pre>
<p>The logic can be changed so that the code is simplified so there are no empty code blocks.</p>
<pre><code>    if (n &gt; pool-&gt;block_size) {
        return NULL;
    }
</code></pre>
<h2>Inconsistent Use of Code Blocks in Flow Control</h2>
<p>Withing the function <code>void pool_free(void* ptr)</code> there are these statements that control the flow of the function:</p>
<pre><code>    if (ptr == NULL) {
        return;
    }


    for(int i = 0; i &lt; MAX_POOLS; ++i) if (g_pools[i].pool_start != NULL) allocated_pools++;


    if (pool == NULL) {
        return;
    }
</code></pre>
<p>The first thing to notice is that two of the three <code>if</code> statements wrap braces around a single statement, this is a good practice, this code can be expanded easily in maintenance. The inconsistency is the for loop does not wrap the <code>if</code> statement in braces and the <code>if</code> statement does not wrap the action in braces either. This code will be very difficult to maintain by you or anyone that inherits the code. A second problem with the for loop is that there are 3 statements all on one line which is even harder to maintain. Based on the other statements in this function I would expect to see:</p>
<pre><code>    for(int i = 0; i &lt; MAX_POOLS; ++i)
    {
        if (g_pools[i].pool_start != NULL) 
        {
            allocated_pools++;
        }
    }
</code></pre>
<p>This could easily be turned into a function to reduce the amount of code in <code>void pool_free(void* ptr)</code></p>
<pre><code>static  uint8_t count_allocated_pools()
{
    uint8_t allocated_pools = 0;

    for(int i = 0; i &lt; MAX_POOLS; ++i)
    {
        if (g_pools[i].pool_start != NULL)
        {
            allocated_pools++;
        }
    }

    return  allocated_pools;
}
</code></pre>
<p>Breaking the code up in this manner makes it easier to write, read, debug and maintain.</p>
<p>The suggestions in this section apply to the other functions as well.</p>
    </div>