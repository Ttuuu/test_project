<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Review:</h3>
<p>From extensibility and in pro of having the possibility of including in future versions more operations, it is a good approach. The code is very simple, and it is easy to read so it is very good your design proposal.</p>
<blockquote>
<p>The main purpose of applying design patterns is <em>to simplify</em> things, to reach the maximum level of abstraction and allow you to write meaningful code, not just repeat stuff</p>
</blockquote>
<p>So, you did good.</p>
<p>However, there are some observations:</p>
<pre class="lang-java prettyprint-override"><code>package oopdesign.calculator;

//Singleton is a good approach for this problem
public class Calculator {

    //By default any object is null
    //Do not put it as public, you have the getInstance method
    private static Calculator instance;

    //You are limiting the operations to handle
    CalculationStrategy calculationStrategy;

    //This is not a Singleton if you allow the default constructor (its public by default)
    private Calculator() {
    }

    public void setCalculationStrategy(CalculationStrategy calculationStrategy) {
        this.calculationStrategy = calculationStrategy;
    }

    public static Calculator getInstance() {
        if (instance == null)
            instance = new Calculator();
        return instance;
    }

    //You should think about handle the most general data type (this case double)
    public double calculate(double value1, double value2) {
       return calculationStrategy.calculate(value1, value2);
    }
}
</code></pre>
<pre class="lang-java prettyprint-override"><code>package oopdesign.calculator;

public class CalculatorMain {

    public static void main(String[] args) {

        Calculator c = Calculator.getInstance();

        //There is a problem with it, you need to instanciate the strategies
        //each time you need to use it
        c.setCalculationStrategy(new AdditionStrategy());
        System.out.println(c.calculate(5,2));

        //It requires space, plus you are not being efficient by storing
        //there operations (calculation strategies)
        c.setCalculationStrategy(new SubtractionStrategy());
        System.out.println(c.calculate(5,2));

        c.setCalculationStrategy(new MultiplicationStrategy());
        System.out.println(c.calculate(5,2));

        c.setCalculationStrategy(new DivideStrategy());
        System.out.println(c.calculate(5,2));
    }
}
</code></pre>
<h3>An alternative</h3>
<pre class="lang-java prettyprint-override"><code>import java.util.HashMap;
import java.util.Map;

public class Calculator {

    private static Calculator instance;

    //search in Constant time (approximately)
    private Map&lt;String, CalculationStrategy&gt; calculationStrategies;

    private Calculator() {
        calculationStrategies = new HashMap&lt;&gt;();
    }

    public void addCalculationStrategy(String name, CalculationStrategy strategy) {
        calculationStrategies.put(name, strategy);
    }

    public static Calculator getInstance() {
        if (instance == null)
            instance = new Calculator();
        return instance;
    }

    //double b... means that there may be 0 to n parameters
    //consider that there are unitary operators or functions in a calculator
    public double calculate(String name, double a, double... b) {
        return calculationStrategies.get(name).calculate(a, b);
    }
}
</code></pre>
<pre class="lang-java prettyprint-override"><code>package oopdesign.calculator;

public class Main {

    public static void main(String[] args) {
        Calculator calculator = Calculator.getInstance();

        //Use a lambda instead
        calculator.addCalculationStrategy("+", (a, b) -&gt; a + b[0]);
        //[b] is taken as an array but is a variadic parameter
        calculator.addCalculationStrategy("-", (a, b) -&gt; a - b[0]);
        calculator.addCalculationStrategy("*", (a, b) -&gt; a * b[0]);
        calculator.addCalculationStrategy("/", (a, b) -&gt; a / b[0]);
        calculator.addCalculationStrategy("Abs", (a, b) -&gt; Math.abs(a));
        calculator.addCalculationStrategy("Cos", (a, b) -&gt; Math.cos(a));
        calculator.addCalculationStrategy("Sin", (a, b) -&gt; Math.sin(a));

        System.out.println(calculator.calculate("+", 1, 3));
        System.out.println(calculator.calculate("-", 1, 3));
        System.out.println(calculator.calculate("*", 1, 3));
        System.out.println(calculator.calculate("/", 1, 3));
        System.out.println(calculator.calculate("Abs", -66));
        System.out.println(calculator.calculate("Cos", 75));
        System.out.println(calculator.calculate("Sin", 28));
        System.out.println(calculator.calculate("+", 666, 777));
    }
}
</code></pre>
<p>About <code>double b...</code> read this post about <a href="https://stackoverflow.com/questions/2635229/java-variadic-function-parameters">Variadic function parameters</a>, as I said, it is a way to have multiple parameters, From 0 To N parameters</p>
<p>Thanks for reading this answer.</p>
    </div>