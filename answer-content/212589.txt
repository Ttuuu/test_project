<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>I don't know where you are learning <code>C++</code> from, but this what you posted is basically <code>C</code> with classes.</h3>
<hr>
<p>That being said, I am just going to point out in a list what you can improve. You can find enough material on the internet for each of the points.</p>
<ul>
<li><p>Naming</p>
<ul>
<li>Name your classes starting with an uppercase, e.g. <code>passSingleton</code> should be <code>PassSingleton</code>, otherwise it might look like a function call to the reader.</li>
<li>Name your classes, variables, etc. correctly, meaningfully, and written out, e.g. rename <code>passSingleton</code> to <strong><code>PasswordGenerator</code></strong></li>
<li>Naming your generate function <code>generatePass()</code> is ambiguous (<em>pass</em> could be understood differently) and obsolete. Just name it <code>generate()</code> since your class is named <code>PasswordGenerator</code>.</li>
</ul>
</li>
<li><p><strong>Use STL containers!!!</strong></p>
<ul>
<li>instead of <code>char password[MAX_PASS_LEN]</code> use <code>std::string password</code>. With <code>std::string</code> you can still access each character with <code>operator[]</code>.</li>
<li>You are not using any other containers here, but for future, use <code>std::vector</code> instead of raw C arrays.</li>
</ul>
</li>
<li><p>In <code>setPasswordLength()</code> you are calling <code>exit(1)</code> if some requirements are not set. Don't <code>exit</code> from a function, rather return a <code>bool</code> or <code>throw</code>. This way, the caller of the function can still react.</p>
</li>
<li><p><a href="https://stackoverflow.com/questions/13865842/does-static-constexpr-variable-make-sense"><strong>constexpr</strong></a></p>
<ul>
<li>you can rewrite <code>static const unsigned int MAX_PASS_LEN = 128;</code> to <code>static constexpr unsigned int MAX_PASS_LEN = 128;</code></li>
</ul>
</li>
<li><p>just return the generated password in <code>generate()</code>. You don't need to save the password since you are not using it anywhere else.
<code>auto mypass = myPassFact.generatePass();</code> Doesn't this look way better?</p>
</li>
<li><p>In your <code>passSingleton</code> constructor, you are creating a local variable <code>generator</code> shadowing your member variable. Put the initialization of <code>generator</code> into the initializer list of the constructor.
<code>passSingleton() : generator(time(nullptr)) {}</code></p>
</li>
<li><p><code>nullptr</code> instead of <code>NULL</code></p>
</li>
<li><p>consider using <a href="https://www.boost.org/doc/libs/1_63_0/doc/html/program_options.html" rel="nofollow noreferrer">Boost.Program Options</a> instead of manually trying to parse the command line arguments</p>
</li>
</ul>
    </div>