<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The review will be focused on readability and testability.</p>
<h1>Naming</h1>
<p>I read (I think it was in Clean Code) that <a href="https://blog.usejournal.com/naming-your-variables-f9477ba002e9#c159" rel="nofollow noreferrer">variables should not have a postfix like <code>Data</code> and <code>Information</code></a> and instead we should give things a name that they represent.</p>
<p><code>PortfolioData</code> is actually a <code>Portfolio</code> while your current <code>Portfolio</code> is more a <code>PortfolioRepository</code> or <code>PortfolioCollection</code>.</p>
<p>Additionally I couldn't figure out, what <code>Basic</code> could mean and I looked up the json-representation of the <em>gitconnected</em> api:</p>
<blockquote>
<pre><code>"basics": {
   "name": "...",
   "picture": "https://avatars2.githubusercontent.com/u/2121481?v=4",
   "label": "...",
   "headline": "...",
   "summary": "...",
   "website": "...",
   "blog": "...",
   "yearsOfExperience": 2,
   "id": "...",
   "username": "...",
   "karma": 22,
   "email": "...",
   "region": "...",
   "location": {},
   "phone": "...",
   "followers": 63,
   "following": 94,
   "profiles": []
}
</code></pre>
</blockquote>
<p>For me a more descriptive name would be <code>User</code> or <code>Owner</code>. A <code>Portfolio</code> has an <code>Owner</code> and a <code>PortfolioRepository</code> stores <code>Portfolio</code>-Objects:</p>
<pre class="lang-js prettyprint-override"><code>export interface Portfolio {
  owner: Owner;
  projects?: Project[];
}

interface Cache {
  portfolio: Portfolio;
  expiration: number;
}

class PortfolioRepository { /* ... */ }
</code></pre>
<h1>Concerns</h1>
<p>The class <code>Portfolio</code> handles multiple concerns. There are two principles which can be named to emphasize the importance for separation:</p>
<ul>
<li><a href="https://en.wikipedia.org/wiki/Separation_of_concerns" rel="nofollow noreferrer">Separation of Concerns</a> (SoC)</li>
<li><a href="https://en.wikipedia.org/wiki/Single-responsibility_principle" rel="nofollow noreferrer">Single Responsibility Principle</a> (SRP)</li>
</ul>
<p>The concerns are</p>
<ul>
<li>fetching (<code>await fetch(this.url)</code>)</li>
<li>caching (<code>this.setCache(...)</code>)</li>
<li>querying (<code>async getPortfolio(): Promise&lt;PortfolioData&gt;</code>)</li>
</ul>
<p>When we separate the concerns we could accomplish something like</p>
<pre class="lang-js prettyprint-override"><code>interface PortfolioRepository {
    get(): Promise&lt;Portfolio&gt;;
}

class ApiPortfolioRepository implements PortfolioRepository {
    constructor(private cache: Cache, 
                private api: API) {}

    async get(): Promise&lt;Portfolio&gt; {
        if (this.cache.containsPortfolio()) {
            return this.cache.get();
        }

        const portfolio = await this.api.fetch();
        this.cache.update(portfolio);
  
        return portfolio;
    }
}
</code></pre>
<p>This has multiple advantages. Beside the descriptive and shorter method body we can accomplish through the dependency injection via the constructor a better way to test the class.</p>
<p>Now the <code>PortfolioRepository</code> does not need to know about how caching works like the <code>cacheDurationInMilliseconds</code> and it does not need to know the http endpoint any more.</p>
<p>If we want to test the class we could simply mock the api (for exampe with mocha and chai):</p>
<pre class="lang-js prettyprint-override"><code>import { assert } from "chai";

suite('API Portfolio Repository', () =&gt; {

    const cache = ...;
    const fakeAPI = new FakeAPI();

    test('when API returns no portfolio -&gt; return undefined', () =&gt; {
        const repository = new ApiPortfolioRepository(cache, fakeAPI.withoutResponse);
        
        const portfolio = repository.get();

        assert.isUndefined(portfolio);
    });

    test('when API returns a portfolio -&gt; return portfolio', () =&gt; {
        const repository = new ApiPortfolioRepository(cache, fakeAPI.withResponse);
        
        const portfolio = repository.get();

        assert.deepEqual(portfolio, fakeAPI.portfolio);
    });

})
</code></pre>
    </div>