<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>Am I using too many test cases for <code>CalculateDemeritPoints_WhenCalled_ReturnsExpectedInt</code>?</p>
</blockquote>

<p>Yes. I'd say so, anyway.</p>

<p>Let's say I'm maintaining code you've written. When a test case fails, ideally it will give me exactly the information I need to fix it, and it will give me that information as quickly as possible. The very first thing I will see when I learn a test has failed? That test's name.</p>

<p>Currently if I see that this test method has failed, all I learn from the name is that the calculator didn't return what was expected. That doesn't give me very much information about what kind of bug to look for, so I'll have to dig a little deeper to find what what speed was passed in, what demerit value was returned, and why that value was unexpected.</p>

<p>You can save me that digging by adding a test called <code>CalculateDemeritPoints_LegalSpeed_GivesNoDemerits</code>, and putting all your <code>TestCase(_,0)</code> cases there. As a bonus, <code>[TestCase(60)]</code> on top of a method named "Legal Speed" is more instantly readable than <code>[TestCase(60,0)]</code> on top of a method named "Expected".</p>

<p>In general, if a single test method is testing different <em>kinds</em> of behavior, I will say it's too much. As a rule of thumb, different branches of code probably deserve different test methods.</p>

<hr>

<p>As a side note, I think it would be fine if you combined the two exception test methods into one.</p>

<p>On the other hand, I'd also be fine if you skipped test parameterization and made separate test methods for every single test case.</p>

<p>The key, in my opinion, is to look at it through the maintainer's eyes. How much can you assist that person in understanding what your code is doing, and what's going wrong with it?</p>

<hr>

<p>As another side note, I also dislike (although it's not a strong dislike) the common practice of class-level setup and teardown methods. Especially in a case like this; the <code>[Setup]</code> is saving you exactly one line of code per test, and test code is <em>cheap</em>.</p>

<p>As a maintenance programmer, if I see that a test has failed, I will always have to go inspect the failing test method. Will you <em>also</em> make me search for any other methods that might have fired as a part of the test? For example: If a test is failing because the test object was constructed with a strange argument, and the call to the constructor was in a setup method, that means cause of the failure has been hidden from me.</p>

<p>For that reason, I like to err on the side of verbose test methods, in order to make each method self-contained (and therefore, easier to follow).</p>
    </div>