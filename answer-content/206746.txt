<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I think you can do away with removing and adjusting the vector for each element.  Using a simple swap algorithm you can move the elements you don't want to the bottom of the vector and simply resize the vector to throw them away:</p>

<pre><code>typedef std::vector&lt;int&gt;::iterator  iter;
template &lt;typename INT, typename T&gt; // INT could be int, unsigned int, char, size_t, etc...
void removeIndicesFromVector(std::vector&lt;T&gt;&amp; v, std::vector&lt;INT&gt;&amp; rm)
{
    if (!std::is_sorted(rm.begin(),rm.end()))
    {
        std::sort(rm.begin(), rm.end());
    }
    auto rmFirst = rm.front();
    auto rmLast = rm.back();
    //Check if the elements are in contiguous indices
    if ((rmLast - rmFirst + 1) == rm.size())
    {
        //If they are at the bottom already, resize.
        if (rmLast == v.size() - 1)
        {
            v.resize(rmFirst);
            return;
        }
        //Otherwise swap the range you want to keep in front of the range you don't want and resize.
        iter vBegin = v.begin();
        iter newEnd = std::swap_ranges(vBegin + (rmLast + 1), v.end(), vBegin + rmFirst);
        v.resize(newEnd - vBegin);
        return;
    }
    int swapIndex = rm[0];
    int rmIndex = 0;
    int limit = v.size();
    for (int i = rm[rmIndex]; i &lt; limit; ++i)
    {
        if (i != rm[rmIndex])
        {
            std::swap&lt;T&gt;(v[i], v[swapIndex++]);
        }
                else
                {
                    ++rmIndex;
                }

    }
        v.resize(swapIndex);
}
</code></pre>
    </div>