<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Improvements and corrections:</h3>

<p><strong><code>run_length_encode</code></strong> function. <br>The responsibility is <em>"encoding"</em> the input string basing on <em>counting</em> consecutive characters (including repetitive characters) and returning the resulting string in format <code>&lt;count&gt;&lt;char(s)&gt;...</code>.<br>Instead of relying on a verbose and noisy <code>for</code> loop, <a href="https://docs.python.org/3/library/re.html#re.sub" rel="nofollow noreferrer"><strong><code>re.sub</code></strong></a> function with <a href="https://www.regular-expressions.info/backref.html" rel="nofollow noreferrer">regex <em>backreferences</em></a> and extended (but simple) substitution allow to succeed the job in just one line. (Add <strong><code>import re</code></strong> at top level)</p>

<p>The new version of <code>run_length_encode</code> function:</p>

<pre><code>def run_length_encode(string: str) -&gt; str:
    if not string.isalpha():
        raise EncodeError('Input string must contain only alphabetic chars')

    encoded = re.sub(r'(.)(\1+)?', 
                     lambda m: f"{len(m.group(2) or '') + 1}{m.group(1)}", string)
    return encoded
</code></pre>

<hr>

<p><strong><code>run_length_decode</code></strong> function.</p>

<ul>
<li><p><code>encoded_string</code> is shortened to <strong><code>encoded_str</code></strong> and <em>stripped</em> at the very start:</p>

<pre><code>encoded_str = encoded_str.strip()
</code></pre></li>
<li><p><code>if encoded_string[-1].isnumeric()</code>. The <code>DecodeError</code> for this check is rephrased to get a more consistent description:</p>

<pre><code>if encoded_str[-1].isnumeric():
    raise DecodeError('Ending character must be an alphabetic char')
</code></pre></li>
<li><p><code>if not encoded_string[0].isnumeric()</code>. The validation for starting char is extended to also cover prohibited <code>0</code> digit at the start of the input string:</p>

<pre><code>if not encoded_str[0].isnumeric() or encoded_str[0] == '0':
    raise DecodeError('Starting character must be an integer (except 0)')
</code></pre></li>
<li><p>the crucial <strong><code>for</code></strong> loop gets even worse with inner validations:</p>

<pre><code>if number == '0':
    raise DecodeError('Number cannot start with 0')
</code></pre>

<p>and</p>

<pre><code>if not c.isalpha():
    raise DecodeError('String must contain only alphabets')
</code></pre>

<p>The error message <code>'Number cannot start with 0'</code> sounds too generic and is better expressed as <code>'Input string cannot contain letter(s) with zero counts'</code>.<br>Those 2 validations can be effectively moved <strong>out</strong> from the loop and run just once (powered by <a href="https://docs.python.org/3/library/re.html#re.search" rel="nofollow noreferrer"><code>re.search</code></a> check) before the main processing. </p></li>
</ul>

<p>If sacrificing concrete descriptive error messages - all validations can be handled with a single regex pattern and <em>collapsed</em>, but that, of course, would require a more generic error message.<br></p>

<p>But finally, the entire loop is replaced with similar short <em>regex magic</em> based on pattern <strong><code>r'(\d+)(\D+)'</code></strong> and string <em>multiplication</em>:</p>

<pre><code>    def run_length_decode(encoded_str: str) -&gt; str:
        encoded_str = encoded_str.strip()
        if not encoded_str:
            return ''

        if encoded_str[-1].isnumeric():
            raise DecodeError('Ending character must be an alphabetic char')

        if not encoded_str[0].isnumeric() or encoded_str[0] == '0':
            raise DecodeError('Starting character must be an integer (except 0)')

        if re.search(r'[^\da-zA-Z]', encoded_str):
            raise DecodeError('Input string must contain only alphanumeric chars')

        if re.search(r'\D0', encoded_str):
            raise DecodeError('Input string cannot contain letter(s) with zero counts')

        decoded = re.sub(r'(\d+)(\D+)', 
                         lambda m: f"{m.group(2) * int(m.group(1))}", encoded_str)
        return decoded
</code></pre>

<hr>

<p>Quick test of <em>new</em> versions:</p>

<pre><code>print(run_length_encode('AABBCCDDDD'))   # "2A2B2C4D"
print(run_length_encode('aaaa3'))   # EncodeError "Input string must contain only alphabetic chars"
print(run_length_encode('AAABBcCCddee'))   # "3A2B1c2C2d2e"

print(run_length_decode("2A3#"))   # DecodeError "Input string must contain only alphanumeric chars"
print(run_length_decode("1a2N030c"))   # DecodeError "Input string cannot contain letter(s) with zero counts"
print(run_length_decode("1a2"))   # DecodeError "Ending character must be an alphabetic char"
print(run_length_decode("a23b"))   # DecodeError "Starting character must be an integer (except 0)"
print(run_length_decode("10abC2err10b3B"))  # "abCabCabCabCabCabCabCabCabCabCerrerrbbbbbbbbbbBBB"
print(run_length_decode("4abc1Arr3bbB"))   # "abcabcabcabcArrbbBbbBbbB"
</code></pre>
    </div>