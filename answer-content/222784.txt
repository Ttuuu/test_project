<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your current implementation is a brute force method, that has some hefty space performance problems (you are copying large parts of the journey every step of the way). Note that both the runtime and space costs are exponential in the worst case in this form.</p>

<p>This problem can be solved more elegantly through some of <em>graph theory</em>.
First we note that every location has to be entered the same number of times as it is leaved, except the end and start points which counts as an extra leaving and entry respectively. If this isn't the case then there is no solution, and if it is the case we are guaranteed for there to be a solution.
To find such a solution we can separate the locations into places that have only one way to enter and leave, and then the rest (remember that we have already identified our endpoint based on which place had one place less to leave). For those will multiple ways through, we need to find enough cycles that passes through other locations to have it returned to being a one pass in and out, such that we can have a route enter it, go through the cycles and then leave through the remaining exit.
The algorithm then is as follows:</p>

<ol>
<li>Calculate the order (amount of flights entering and leaving) of each location.</li>
<li>Determine if it is possible to solve and identify the ending location.</li>
<li>Start from the starting point and go through any combination of journeys until you reach the end location (there is no way to screw yourself over on this one).</li>
<li>While there are still journeys left untaken, connect them in separate cycles, by just starting at any one of its locations and walk until you get back to the starting location.</li>
<li>Combine the results from results from step 3 and 4, by injecting the cycles from step 4 as parts of other routes when those other routes reach a location in such a cycle. Repeat this until there is only one route left, that is the result.</li>
</ol>

<p>There are different ways to implement this, mainly based on how you deal with storing the information of the journeys, routes and locations. It should be possible to implement the above algorithm in such a way that it only require <span class="math-container">\$O(E)\$</span> runtime and extra space, with <span class="math-container">\$E\$</span> being the number of journeys.</p>
    </div>