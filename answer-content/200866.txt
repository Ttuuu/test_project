<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><code>SubsetIterable</code> isn't really clear in what it's trying to accomplish (props for the documentation though!).  We're mapping indices to a range, so <code>IndexMap</code> or <code>SubscriptMap</code> may be better.</p>

<p>Consider making <code>SubsetIterator</code> its own class so that it can be used with existing algorithms and structures.</p>

<pre><code>auto elements = std::vector(SubsetIterator{indices.begin(), container}, 
                            SubsetIterator{indices.end()});
std::copy(SubsetIterator{indices.begin(), container}, 
          SubsetIterator{indices.end()},
          ostream_joiner{std::cout, ", "});
</code></pre>

<p>That would also require fulfilling the iterator requirements (<a href="http://eel.is/c++draft/iterator.requirements" rel="nofollow noreferrer">C++17 § 22.2</a>). Add the missing type information (<a href="http://eel.is/c++draft/iterator.requirements#general-5" rel="nofollow noreferrer">C++17 § 22.2.1.5</a>). The pre-increment operator (<code>Iterator::operator++()</code>) is required to return a reference (<code>Iterator&amp;</code>) (<a href="http://eel.is/c++draft/iterator.requirements#iterator.iterators-2.2" rel="nofollow noreferrer">C++17 § 22.2.2.2.2</a>).</p>

<p>A better idea is to use existing tools. You have a range of indices and you want index accesses into random-access containers.  In C++, we use <code>std::transform</code> for such operations.  For a range-based solution, see <a href="https://www.boost.org/doc/libs/1_67_0/libs/range/doc/html/range/reference/adaptors/reference/transformed.html" rel="nofollow noreferrer"><code>boost::adaptors::transformed</code></a>, <a href="https://github.com/ryanhaining/cppitertools#imap" rel="nofollow noreferrer"><code>iter::imap</code></a>, or soon™ <code>std::ranges::action::transformed</code> (Ranges proposal).</p>

<pre><code>auto by_subscript = [](const auto&amp; obj) {
    static_assert(has_subscript_op_v&lt;decltype(obj)&gt;);
    return [&amp;obj](auto index) {
        return obj[index];
    };
};

int main() {
    std::vector&lt;std::string&gt; strs{"abc", "cde", "lol", "lal", "foo", "baz"};
    std::vector&lt;size_t&gt; indices{0,3,4,5};

    for (auto&amp;&amp; str : indices | iter::imap(by_subscript(strs)) {
        std::cout &lt;&lt; str &lt;&lt; '\n';
    }

    std::copy(boost::make_transform_iterator(indices.cbegin(), by_subscript(strs)),
              boost::make_transform_iterator(indices.cend(), by_subscript(strs)),
              std::ostream_iterator{std::cout, "\n"});
}
</code></pre>

<p>You should either document or statically check that the <code>container</code> be at least random accessible (requires subscript operator).</p>
    </div>