<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>welcome on Codereview.</p>

<p>I am pretty sure that you will find many other ways to do it the comments from @NateGardner is already a good suggestion. But the goal is to review your code so I will just try to suggest some improvements to your code.</p>

<p>First of all I will just reformat the code, create a dedicated class for it and define the input and output.</p>

<pre><code>class WordFinder {
  private final String[] words;
  WordFinder(String[] words) {
    this.words = new String[words.length];
    System.arraycopy(words, 0, this.words, 0, words.length);
  }
  String[] find(String word) {
    // Your code here
  }
}
</code></pre>

<p>Then you can start to split your nested logic in different methods and use exiting methods to simplify your code (like <code>String#toCharArray()</code> instead of <code>String#split("")</code>)</p>

<pre><code>  String[] find(String word) {
    String[] result = new String[this.words.length];
    char[] letters = word.toCharArray();
    int counter = 0;
    for (String candidate : this.words) {
        if ( this.matches(letters, candidate.toCharArray()) ) {
            result[counter++] = candidate;
        }
    }
    return Arrays.copyOf(result, counter);
  }
</code></pre>

<p>As said in the beginning, there is a lot of way to test two words for matching and I am sure that you will find the best one. For this answer, I decided to compare the hash of each array of <code>char</code>.</p>

<hr>

<p>Here is my code if you want. But if you can use other structure from the collections or the stream API, this one can be totally different.</p>

<pre><code>public class WordFinder {

    private final String[] words;

    public WordFinder(String[] words) {
        this.words = new String[words.length];
        System.arraycopy(words, 0, this.words, 0, words.length);
    }

    public String[] find(String word) {
        String[] result = new String[this.words.length];
        char[] letters = word.toCharArray();
        int counter = 0;
        for (String candidate : this.words) {
            if ( matches(letters, candidate.toCharArray()) ) {
                result[counter++] = candidate;
            }
        }
        return Arrays.copyOf(result, counter);
    }

    private boolean matches(char[] requirement, char[] candidate) {
        /* Edited to replace Arrays.hashCode with Arrays.equals, see comments
        return candidate.length==requirement.length &amp;&amp;
           hash(candidate)==hash(requirement);*/

        if ( candidate.length!=requirement.length ) {
            return false;
        } 
        char left = Arrays.copyOf(requirement, requirement.length);
        Arrays.sort(left);
        char right = Arrays.copyOf(candidate, candidate.length);
        Arrays.sort(right );
        return Arrays.equals(left, right);
    }

    /*private int hash(char[] array) {
        char[] copy = Arrays.copyOf(array, array.length);
        Arrays.sort(copy);
        return Arrays.hashCode(copy);
    }*/
}
</code></pre>
    </div>