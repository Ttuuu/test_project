<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'm going to give you a review of this as to how I'd improve this, and though it pulls <em>some</em> data from the other answer a little bit, it uses a bit different syntax.  Namely, I don't like using in-built <code>f""</code> for formatting strings with replacements, so I use the full <code>"".format()</code> syntax.</p>

<p>Some of the changes are suggested in order to allow <em>easy expansion</em> of this 'API wrapper', so that you can build out new functions more easily.  Sorry about that, but I'm one of those coders who has written entire API wrappers and therefore I think in terms of "How could I expand the API" and such.</p>

<p>Also, my apologies for a wall-of-text, but I am overly descriptive sometimes.  I also give you the fully revised code at the bottom of this post, if you don't want to read the wall of text, however I suggest that you <em>at least</em> read the section headers in bold, and then the code.</p>

<hr>

<p><strong>Variables should be <code>snake_case</code>, or <code>CAPS_CASE</code> for 'constants' if you wish.</strong></p>

<p>All variables should be in <code>snake_case</code>.  This technically includes the 'global' variables that are essentially constants, though I use <code>CAPS_CASE</code> as they <em>are</em> global constants that won't change (and this is technically acceptable in the PEP8 style guides).</p>

<p>So, <em>all</em> of your variables inside the functions, where applicable, are converted to <code>snake_case</code>, and the URL and API key variables became <code>CAPS_CASE</code> like so:</p>

<pre><code>QUERY_URL = "https://www.alphavantage.co/query?function={REQUEST_TYPE}&amp;apikey={KEY}&amp;symbol={SYMBOL}"
API_KEY = "AN ACTUAL KEY"
</code></pre>

<hr>

<p><strong>Condense URL formatting into a single URL generation method</strong></p>

<p>Your method of generating a URL is clunky.  We can glean the following information from your URL structure, though:</p>

<ol>
<li>You need to provide the type of request, which is a specific type of data from their API.</li>
<li>You need to provide the symbol being looked at.</li>
<li>You need to provide an API key.</li>
</ol>

<p>Since all three parts are <em>necessary</em>, we can use a structured string to create the URL.  We also, already, know the base URL, so we don't need to declare another variable for it.  We end up with this string for the <code>QUERY_URL</code> variable (again, I made this one all-caps to be a "global" or a "constant" - this is acceptable, and though it's not snake-case, it's actually acceptable):</p>

<pre><code>QUERY_URL = "https://www.alphavantage.co/query?function={REQUEST_TYPE}&amp;apikey={KEY}&amp;symbol={SYMBOL}"
</code></pre>

<p>Similarly, we also have API key as <code>API_KEY</code>:</p>

<pre><code>API_KEY = "AN ACTUAL KEY"
</code></pre>

<p>We'll be using this in the next session, so let's focus on that.</p>

<hr>

<p><strong>Make a generic 'request' function that will accept arguments and issue the request</strong></p>

<p>Rather than structuring the URL and creating individual requests for <em>each</em> type of function you want (which will require code duplication and increase the difficulty of maintaining things down the line), we can take the entire request URL generation <em>and</em> the actual task of making a request and split it off into a separate function.</p>

<p>However, we have to be careful as to how we <code>return</code> the web request. The way your existing code works returns an <code>HTTPRequest</code> object, and not the results of the request. To get the data, you need to <code>read()</code> the data. The data returned from the request is in the form of <code>bytes</code>, and currently the <code>json</code> library is looking for a file pointer (for <code>load</code>) or a string (for <code>loads</code>, which is what you'll want to use). So, we've not only got to do a <code>read()</code> call to the request object, we also have to decode the <code>bytes</code> response into a string with <code>.decode('UTF-8')</code>, as the bytes returned from the API are UTF-8 encoded.</p>

<p>For reasons, I use internal functions that shouldn't be referenced from outside the Python script/library itself which start with a <code>_</code>, to imply that it's a protected member.  While there is no mechanism to actually <em>do</em> protected members, most code analysis tools will assume things with underscores are protected elements.  </p>

<p>With all this in mind, you get this for your actual web request function, which returns the data, and gets rid of having to take the API key as an argument too:</p>

<pre><code>def _request(symbol, req_type):
    with urllib.request.urlopen(QUERY_URL.format(REQUEST_TYPE=req_type, KEY=API_KEY, SYMBOL=symbol)) as req:
        data = req.read().decode("UTF-8")
    return data
</code></pre>

<p>The reasons for doing this become more prevalent in the next section of this review, though.</p>

<hr>

<p><strong>Change your <code>dailyData</code> function to snake_case, but take advantage of the new <code>_request</code> function</strong></p>

<p>Now that we have the dedicated <code>_request</code> function, we can get rid of <em>all</em> of your URL construction code that you had in <code>dailyData</code>.  We can <em>also</em> reduce this function, now to be named <code>get_daily_data</code>, to <em>only</em> require you to pass in the symbol <em>and</em> lets URL construction take place in the actual request handling function we made.  This saves us from having to construct brand new URLs within each and every 'getter' that would get data from the API.</p>

<p>All this said and done, you end up with this for your <code>get_daily_data</code> function, which looks a bit cleaner than the original version, in my opinion:</p>

<pre><code>def get_daily_data(symbol):
    return json.loads(_request(symbol, 'TIME_SERIES_DAILY'))
</code></pre>

<p>Now, the only thing you really need to do is make sure you're passing the proper request/function string to the <code>_request</code> library, and also pass the symbol.</p>

<p>This has an added bonus, though: because we're using <code>_request</code> to do the URL construction <em>and</em> the actual web request processing, we can easily expand this code for other functions in your API wrapper - all you need to change is the 'function' call to get different data.</p>

<hr>

<p><strong>Unused Libraries</strong></p>

<p>You import <code>datetime</code> but you don't use it for anything.  So, don't include it in the <code>import</code> statements until you actually <em>use</em> it for something.</p>

<hr>

<p>Now on to testing.  I use a slightly different form of your test code here, compressing everything into a one-liner call:</p>

<pre><code>print(get_daily_data("AAPL")["Time Series (Daily)"]["2018-03-02"])
</code></pre>

<p>This in turn returns this data:</p>

<pre class="lang-none prettyprint-override"><code>{'1. open': '172.8000', '2. high': '176.3000', '3. low': '172.4500', '4. close': '176.2100', '5. volume': '38453950'}
</code></pre>

<hr>

<p>The code after all my revisions above, and after removing comments, ends up being this:</p>

<pre><code>import json
import urllib.request

QUERY_URL = "https://www.alphavantage.co/query?function={REQUEST_TYPE}&amp;apikey={KEY}&amp;symbol={SYMBOL}"
API_KEY = "AN ACTUAL KEY"

def _request(symbol, req_type):
    with urllib.request.urlopen(QUERY_URL.format(REQUEST_TYPE=req_type, KEY=API_KEY, SYMBOL=symbol)) as req:
        data = req.read().decode("UTF-8")
    return data

def get_daily_data(symbol):
    return json.loads(_request(symbol, 'TIME_SERIES_DAILY'))
</code></pre>

<p>This being said, this program <em>could</em> be developed to take the stock ticker to check as a runtime argument, thereby permitting you to run the core code against <em>any</em> symbol that you define, but that's outside the scope of this review, technically.</p>
    </div>