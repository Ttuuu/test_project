<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The first thing is when you use parenthesis it means that you pass a tuple to a function instead of single parameters. So you can ditch them.</p>

<p>The second thing is that <code>bool</code> supports <a href="https://fsharpforfunandprofit.com/posts/match-expression/" rel="noreferrer">pattern matching</a></p>

<p>The third thing is that you can use recursion instead of mutable variables. Note the usage of <code>rec</code> which enables <a href="https://devblogs.microsoft.com/fsharpteam/tail-calls-in-f/" rel="noreferrer">tail call optimisation</a>. </p>

<p>The code would look something like this. </p>

<pre><code>let rec private WaitForData2 (client : TcpClient) (dataLength : int) (loopBreaker : bool) (result: bool) : Async&lt;bool&gt;= 
    async {
        match loopBreaker with
        | true -&gt; 
            let isConnectionAlive : bool = IsConnectionEstablished client &amp;&amp; client &lt;&gt; null
            match isConnectionAlive, client.Available &gt;= dataLength with
            | true, true -&gt;             
                Task.Delay(500) 
                |&gt; Async.AwaitTask 
                |&gt; ignore
                return! WaitForData2 client dataLength false true                
            | false, _ -&gt; 
                Task.Delay(500) 
                |&gt; Async.AwaitTask 
                |&gt; ignore
                return! WaitForData2 client dataLength false false
            | _, _ -&gt; 
                Task.Delay(500) 
                |&gt; Async.AwaitTask 
                |&gt; ignore
                return! WaitForData2 client dataLength true false
        | false -&gt; return result     
</code></pre>
    </div>