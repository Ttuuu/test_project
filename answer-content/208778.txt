<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>In reply to <a href="https://codereview.stackexchange.com/a/208741/176102">@chux review</a>:</h3>

<blockquote>
  <p><strong>Segregate code</strong></p>
  
  <p>Splitting into <code>bin_add.c</code>, <code>bin_add.h</code>, <code>main.c</code> would help delineate what is the code, its user interface and test code.</p>
</blockquote>

<p>I understand. Please note that I posted the code contained within one "file" to make copy &amp; paste for testing easier for the readers. I concur, the code should be split up in a header and it's accompanying source file.</p>

<blockquote>
  <p><strong>Some comments would help</strong></p>
  
  <p><code>gpp()</code> would benefit with at least a line comment about its goal, expected input, output, etc. Same for <code>bin_add()</code> - which should alert that the return pointer needs to be free'd. This becomes even more important when the user only has access to the declaration in a <code>.h</code> file.</p>
</blockquote>

<p>I wrote short specifications of the both functions to go in front of their declaration (prototype) and definition (implementation).</p>

<blockquote>
  <p>Commenting some of the block of code would help too.</p>
</blockquote>

<p>I'd appreciate your input on where coments might be needed on the cleaned up version of the code since I believe in self-documenting code.</p>

<blockquote>
  <p><strong>When to shift</strong></p>
  
  <p>When there is not a final carry, code shifts <code>Ol[]</code>. As a final carry with this FP-like code is more rare, I'd shift when there is a carry.</p>
</blockquote>

<p>Um. Since the code "shifts away" all leading zeros I am not sure your conclusion and suggestion "As a final carry with this FP-like code is more rare, I'd shift when there is a carry" is applicable.</p>

<blockquote>
  <p><strong>Collapsing</strong></p>
  
  <p>With floating point strings, I expect code to drop trailing zero digits to the right of the <code>'.'</code>.</p>
</blockquote>

<p>Yes, that is an oversight of the initial implementation. I'll add code to discard trailing zeros from the result.</p>

<blockquote>
  <p>Leading zero digits are possible based on input. Perhaps eat those too with an early <code>while (*a == '0') a++;</code> and with <code>b</code>. - depends on coding goals though.</p>
</blockquote>

<p>Whith discarding leading zeros at an early stage as you suggest, it is no longer needed to keep track of the last <code>'1'</code> written to the output string. I'll add code to discard leading zeros in the input strings.</p>

<blockquote>
  <p><strong>Inconsistent bracket style</strong></p>

<pre><code>//                                v ?? 
pp[i] = pp[i] ? ll[i] - pp[i] : 0;}
</code></pre>
  
  <p>Hopefully code is auto-formatted.</p>
</blockquote>

<p>You are right, that bracket should to to the next line.</p>

<blockquote>
  <p><strong>Inconsistent indentation</strong></p>

<pre><code>if((Ol[0] = '0' + xc) == '1') return Ol;
//  v   Why indented here?
    for (size_t i = 0; i &lt;= ML - lO + 1; ++i)
        Ol[i] = Ol[lO + i];
</code></pre>
  
  <p>This implies code is not auto formatted. Save time, and use auto-formatting.</p>
</blockquote>

<p>That was an oversight when posting the question. The original code is properly indented.</p>

<blockquote>
  <p><strong>Terse digit like object names lose clarity</strong></p>
  
  <p>The short object names <code>OO</code>, <code>lO</code>, <code>O</code>, <code>Ol</code>, <code>ll</code> look too much like <code>00</code>, <code>10</code>, <code>0</code>, <code>01</code>, <code>11</code>. Consider more clear alternatives.</p>
  
  <p>Other examples:
  <code>int xc</code> as the carry bit looks more clear as <code>int carry</code>. <code>size_t ML</code> more meaningful as <code>MaxLength</code>.</p>
</blockquote>

<p>I'll think of better names.</p>

<blockquote>
  <p><strong>Input error detection</strong></p>
  
  <p>I'd suggest a separate <code>bool bin_valid(const char *s)</code> and let <code>bin_add()</code> assume valid strings <code>a</code>, <code>b</code>. This would help simplify - a <code>NULL</code> return would only indicate out-of-memory.</p>
</blockquote>

<p>Good point. This will allow to drop counting of radix points from <code>bin_add()</code>. I'll implement a function <code>bool is_valid_binary_string(char const *s)</code>.</p>

<blockquote>
  <p><strong>Misc.</strong></p>
  
  <p><code>ops[2]</code>, <code>cc[2]</code> could be local to <code>for (size_t i = ML; i; --i) {</code></p>
</blockquote>

<p>Right. I changed the point of definition of <code>ops[2]</code>. <code>cc[2]</code> will be dropped as it is no longer needed if the function can rely on valid input.</p>

<blockquote>
  <p>Personal preference: Consider <code>char *Ol = calloc(ML + 2, sizeof *Ol);</code></p>
</blockquote>

<p>This would help to avoid a pitfall if the code were ever to be changed to work with wide characters. Changed.</p>

<blockquote>
  <p><strong>Do not assume <code>EOF</code> is -1</strong></p>
  
  <p>Simply test if the scanf() result is 2.</p>
</blockquote>

<p>The original code does not assume <code>EOF</code> to be -1. It compares the result of <code>scanf()</code> to 2 just as you suggest, albeit in a rather obfuscated way. I'll change <code>== 1 &lt;&lt; 1</code> to <code>== 2</code>.</p>

<blockquote>
  <p><strong><code>ENOMEM</code></strong></p>
  
  <p><code>ENOMEM</code> is not part of the standard C.</p>
</blockquote>

<p>Since it is no longer needed with <code>bin_add()</code> relying on valid input, I will drop checking <code>errno</code> for <code>ENOMEM</code>.</p>

<p>Also I'll drop the speculation about the code being C89/90 compliant from my post since it contains variable definitions local to <code>for</code>-loops which is not allowed in pre C99 code. Didn't think about that.</p>

<p>A revised version of the code:</p>

<pre><code>#include &lt;stdbool.h&gt;
#include &lt;stddef.h&gt;
#include &lt;string.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;stdio.h&gt;

#define MAX(x, y) ((x) &gt; (y) ? (x) : (y))

/* gpp() (get point position) expects a zero terminated string as input and
   will return the 1-based position of the first occurrence of character '.'
   or 0 if no such character is present in the input string.
*/
size_t gpp(char const *s)
{
    char *n = strchr(s, '.');
    return n ? (size_t)(n - s + 1) : 0;
}

/* Determines if its parameter is a valid binary number consisting only of
   '0' and '1' and containing at most one radix point. The return value is
   true if a valid binary number is passed and false otherwise.
*/
bool is_valid_binary_string(char const *s)
{
    int num_points = 0;
    for (; *s; ++s) {
        if (*s != '1' &amp;&amp; *s != '0' &amp;&amp; *s != '.')
            return false;
        if (*s == '.' &amp;&amp; ++num_points &gt; 1)
            return false;
    }
    return true;
}

/* bin_add() expects two zero terminated strings as input. The both strings
   must not contain other characters than '0' and '1'. Both may contain no or
   one radix point ('.'). The function returns a zero terminated string which
   is the result of the addition of both input strings done in base 2. The
   caller is responsible for deallocating the memory to which a pointer is
   returned. If memory allocation failes the function returns NULL and errno
   is ENOMEM. If one or both input strings do not conform to the expectations
   of the function, it returns NULL.
*/
char* bin_add(char const *a, char const *b)
{
    while (*a == '0') ++a;
    while (*b == '0') ++b;

    char const *input[] = { a, b };
    size_t length[] = { strlen(a), strlen(b) };
    size_t point_position[] = { gpp(a), gpp(b) };
    size_t integer_part[2];
    size_t offset[2];

    for (size_t i = 0; i &lt; 2; ++i) {
        integer_part[i] = point_position[i] ? point_position[i] - 1 : length[i];
        point_position[i] = point_position[i] ? length[i] - point_position[i] : 0;
    }

    for (size_t i = 0; i &lt; 2; ++i)
        offset[i] = integer_part[i] &lt; integer_part[!i]
                  ? integer_part[!i] - integer_part[i]
                  : 0;

    size_t maximum_length = MAX(integer_part[0], integer_part[1]) +
                            MAX(point_position[0], point_position[1]) +
                            (!!point_position[0] || !!point_position[1]);

    char *result = calloc(maximum_length + 2, sizeof(*result));
    if (!result)
        return NULL;

    int carry = 0;
    bool result_contains_point = false;
    for (size_t i = maximum_length; i; --i) {
        char ops[2];
        bool is_radix_point = false;
        for (size_t l = 0; l &lt; 2; ++l) {
            ops[l] = i &lt;= length[l] + offset[l] &amp;&amp; i - offset[l] - 1
                &lt; length[l] ? input[l][i - offset[l] - 1] : '0';
            if (ops[l] == '.') {
                result_contains_point = is_radix_point = true;
                break;
            }
            ops[l] -= '0';
        }
        if (is_radix_point) {
            result[i] = '.';
            continue;
        }
        if ((result[i] = ops[0] + ops[1] + carry) &gt; 1) {
            result[i] = 0;
            carry = 1;
        }
        else carry = 0;
        result[i] += '0';
    }

    result[0] = '0' + carry;

    if(result_contains_point)
        while (result[maximum_length] == '0')
            result[maximum_length--] = '\0';

    if (result[0] == '1')
        return result;

    for (size_t i = 0; i &lt;= maximum_length + 1; ++i)
        result[i] = result[i + 1];
    return result;
}

int main(void)
{
    char a[81], b[81];

    while (scanf(" %80[0.1] %80[0.1]", a, b) == 2) {
        if (!is_valid_binary_string(a) || !is_valid_binary_string(b)) {
            fputs("Input error :(\n\n", stderr);
            goto clear;
        }

        char *c = bin_add(a, b);
        if (!c) {
            fputs("Not enough memory :(\n\n", stderr);
            return EXIT_FAILURE;
        }

        char* numbers[] = { a, b, c };
        size_t point_position[3];
        size_t offset = 0;

        for (size_t i = 0; i &lt; 3; ++i) {
            point_position[i] = gpp(numbers[i]);
            point_position[i] = point_position[i] ? point_position[i] : strlen(numbers[i]) + 1;
            offset = point_position[i] &gt; offset ? point_position[i] : offset;
        }

        putchar('\n');
        for (size_t i = 0; i &lt; 3; ++i) {
            for (size_t l = 0; l &lt; offset - point_position[i]; ++l, putchar(' '));
            puts(numbers[i]);
        }
        putchar('\n');

        free(c);

clear:  {   int ch;
            while ((ch = getchar()) != '\n' &amp;&amp; ch != EOF);
        }
    }
}
</code></pre>
    </div>