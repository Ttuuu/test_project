<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here are some notes I made while reading your code.</p>

<p>For a real-world code review, code should be correct, maintainable, reasonably efficient, and, most importantly, readable.</p>

<p>Writing code is a process of stepwise refinement.</p>

<p>Start by looking at two similar methods.</p>

<p><code>go-angular/server/app.go</code>:</p>

<pre><code>func (a *App) addStudent(w http.ResponseWriter, r *http.Request) {
    w.Header().Set("Content-Type", "application/json")
    s := student{}
    err := json.NewDecoder(r.Body).Decode(&amp;s)
    s.ID = uuid.New().String()
    if err != nil {
        sendErr(w, http.StatusBadRequest, err.Error())
    } else {
        err = a.db.Save(&amp;s).Error
        if err != nil {
            sendErr(w, http.StatusInternalServerError, err.Error())
        } else {
            w.WriteHeader(http.StatusCreated)
        }
    }
}

func (a *App) updateStudent(w http.ResponseWriter, r *http.Request) {
    w.Header().Set("Content-Type", "application/json")
    s := student{}
    err := json.NewDecoder(r.Body).Decode(&amp;s)
    if err != nil {
        sendErr(w, http.StatusBadRequest, err.Error())
    } else {
        s.ID = mux.Vars(r)["id"]
        err = a.db.Save(&amp;s).Error
        if err != nil {
            sendErr(w, http.StatusInternalServerError, err.Error())
        }
    }
}
</code></pre>

<p>Write them in more readable form.</p>

<pre><code>func (a *App) addStudent(w http.ResponseWriter, r *http.Request) {
    w.Header().Set("Content-Type", "application/json")
    var s student
    err := json.NewDecoder(r.Body).Decode(&amp;s)
    if err != nil {
        sendErr(w, http.StatusBadRequest, err.Error())
        return
    }
    s.ID = uuid.New().String()
    err = a.db.Save(&amp;s).Error
    if err != nil {
        sendErr(w, http.StatusInternalServerError, err.Error())
        return
    }
    w.WriteHeader(http.StatusCreated)
}

func (a *App) updateStudent(w http.ResponseWriter, r *http.Request) {
    w.Header().Set("Content-Type", "application/json")
    var s student
    err := json.NewDecoder(r.Body).Decode(&amp;s)
    if err != nil {
        sendErr(w, http.StatusBadRequest, err.Error())
        return
    }
    s.ID = mux.Vars(r)["id"]
    err = a.db.Save(&amp;s).Error
    if err != nil {
        sendErr(w, http.StatusInternalServerError, err.Error())
        return
    }
    w.WriteHeader(http.StatusOK)
}
</code></pre>

<p>Write more readable code.</p>

<blockquote>
  <p><a href="https://github.com/golang/go/wiki/CodeReviewComments#indent-error-flow" rel="nofollow noreferrer">Go Code Review Comments: Indent Error
  Flow</a>.</p>
  
  <p>Try to keep the normal code path at a minimal indentation, and indent
  the error handling, dealing with it first. This improves the
  readability of the code by permitting visually scanning the normal
  path quickly.</p>
</blockquote>

<p>Use <code>var</code> to declare variables that are decoding targets. They have zero value(s).</p>

<pre><code>var s student
</code></pre>

<p>Don't do things before they are necessary.</p>

<pre><code>s.ID = uuid.New().String()
</code></pre>

<p>The <code>s.ID</code> value is discarded in <code>addStudent</code> if there is an error in decoding. Wait until it is needed, as you did in <code>updateStudent</code>.</p>

<p>In <code>addStudent</code> you returned a status.</p>

<pre><code>w.WriteHeader(http.StatusCreated)
</code></pre>

<p>Return a status in <code>updateStudent</code>.</p>

<pre><code>w.WriteHeader(http.StatusOK)
</code></pre>

<p>And so on.</p>

<p>Make sure that your <code>app.go</code> code is good before worrying about testing.</p>
    </div>