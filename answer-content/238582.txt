<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>A python idiom for iterating over a sequence in groups it to use <code>zip()</code> like so:</p>

<pre><code>group_iter = zip(*[iter(seq)]*n)
</code></pre>

<p>where <code>seq</code> is the sequence and <code>n</code> is the size of each group. Note that the last group will be dropped if it doesn't have <code>n</code> elements.</p>

<p>Using that idiom, your function could be coded:</p>

<pre><code>def nthofchar(string: str, char: str, n: int = 2) -&gt; list:
    chunks = string.split(char)
    groups = zip(*[iter(chunks)]*n)

    return [char.join(group) for group in groups]
</code></pre>

<p>Added a test case for n != 2:</p>

<pre><code>print(nthofchar("1;a;b;2;c;d;3;e;f;4;g;h;5;i;j;6;k;l", ";", 3))
# Output: ['1;a;b', '2;c;d', '3;e;f', '4;g;h', '5;i;j', '6;k;l']
</code></pre>
    </div>