<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Names</h3>

<p>The plural of <em>parenthesis</em> is <em>parentheses</em> (as used in the specification). So I think it would make more sense to call the top level function <code>generateParentheses</code>, or even <code>generateBalancedParentheses</code>.</p>

<p>The inner function should be <code>addParenthesis</code> (with an <code>e</code> substituted for the third <code>a</code>).</p>

<p>Opinions will vary on <code>cur</code> as an abbreviation for <code>current</code>. I think it's common enough to be easily recognised, although given the meaning of the value it names perhaps <code>prefix</code> would be better.</p>

<p><code>open</code> and <code>close</code> read to me as verbs, although <code>open</code> could also be a count of the number of parentheses which have been opened and not closed (i.e. the surplus of <code>(</code> over <code>)</code> in <code>cur</code>). I've reverse engineered that they count, respectively, the number of <code>(</code> and <code>)</code> in <code>cur</code>. Perhaps <code>opened</code> and <code>closed</code> would be clearer, along with a comment explaining what they are.</p>

<h3>Scope</h3>

<p>Although JavaScript is very forgiving of the order of declarations, humans tend to read code in order. I would find it clearer if <code>res</code> were defined <em>before</em> <code>addParenthesis</code>, since that references it.</p>

<h3>Correctness</h3>

<p>Although the code looks correct to me, I would like to see some comments to justify <em>why</em> it's correct. Why are the <code>if</code> guards necessary and sufficient?</p>

<p>With these comments, you would also be able to justify a slight simplification:</p>

<pre><code>  const addParenthesis = (prefix, opened, closed) =&gt; {
    if (closed === n) { res.push(prefix); }
    if (opened &lt; n) { addParenthesis(prefix + '(', opened + 1, closed); }
    if (closed &lt; opened) { addParenthesis(prefix + ')', opened, closed + 1); }
  };
</code></pre>
    </div>