<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>If <code>AnAsynWebServiceCallHere</code> is already async then there is no need for the additional <code>Task.Run</code> in the <code>Task.WhenAll</code>. </p>

<p><a href="https://docs.microsoft.com/en-us/dotnet/api/system.threading.tasks.task.whenall?view=netframework-4.7.2#System_Threading_Tasks_Task_WhenAll__1_System_Threading_Tasks_Task___0____" rel="nofollow noreferrer"><code>Task.WhenAll&lt;TResult&gt;(param Task&lt;TResult&gt;[])</code></a> will already return the results of the tasks in the collection as an array of results. </p>

<p>All that is left then is to convert the array to a <code>List&lt;&gt;</code></p>

<pre><code>public async Task&lt;List&lt;DesiredResult&gt;&gt; GetMyDesiredData(MyParamDTO dto) {
    var results = await Task.WhenAll(
        AnAsynWebServiceCallHere(dto.A), 
        AnAsynWebServiceCallHere(dto.A)
    );
    return results.ToList();
}
</code></pre>

<p>All the tasks will run in parallel and at the end will return the combined results.</p>

<p>Looking at the <code>AnAsynWebServiceCallHere</code> you could also wrap the response in a <code>using</code> statement as it is disposable also</p>

<pre><code>public async Task&lt;DesiredResult&gt; AnAsynWebServiceCallHere(string sqlQuery) {
    var url = "https://demoapi.MyHost.net/SQLRunner";
    using(var request = new HttpRequestMessage(HttpMethod.Post, url)) {
        request.Headers.Add("id", SECURITY_TOKEN);          
        request.Headers.Add("sqlStatement", sqlQuery);
        using(HttpResponseMessage response = await client.SendAsync(request)) {
            var json = await response.Content.ReadAsStringAsync();
            return JsonConvert.DeserializeObject&lt;DesiredResult&gt;(json);
        }
    }      
}
</code></pre>
    </div>