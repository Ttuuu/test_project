<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Everything looked pretty good in general, until I got to the <code>(let [output_directory ...</code> part, then your indentation got all wonky! Part of the problem is that there are a couple of really long lines, and it's difficult to keep them short when you're nested so many layers deep into an S-expression. Shortening your lines and making sure that everything lines up from line-to-line in an intuitive way will solve this.</p>

<p>First of all, I believe it is idiomatic to include all your <code>use</code>/<code>require</code>/<code>import</code> statements within the namespace definition, like so:</p>

<pre><code>(ns my_cli_clojure.core
  (:require [clojure.data.csv :as csv]
            [clojure.java.io :as io]
            [me.raynes.fs :as fs]
            [clojure.tools.cli :refer [cli] :as c]
            [clojure.string :as s])
  (:gen-class :main true))
</code></pre>

<p>Notice that I added <code>[clojure.string :as s]</code> -- this abbrevation will come in handy in shortening some of the later lines, in which you have a lot of fully-qualified references to <code>clojure.string</code> methods.</p>

<p>Next, just an aesthetic spacing tweak here:</p>

<pre><code>(defn write-csv-data [&amp; {:keys [data outfile] :or {data "", outfile ""}}]
  (csv/write-csv outfile data))
</code></pre>

<p>Your code was fine, I just find my version easier to read at a glance. I generally try to avoid using line-breaks whenever the code I'm writing looks sufficiently compact on less lines. When the lines start getting long, I will think more about where it would make the most sense to break them up. (I also renamed write_csv_data to write-csv-data; it's idiomatic in Clojure to name symbols using hyphens instead of underscores)</p>

<p>More spacing adjustments here:</p>

<pre><code>(defn -main [&amp; args]
  (let [[options args banner]
        (c/cli args
               ["-d" "-dome" "Dome Identifier" :default "dome1"]
               ["-p" "-principal" "Principal code" :default "kraft"]
               ["-o" "-output-directory" "Output file" :default "."]
               ["-h" "-help" "Show Help" :flag true :default false])]
</code></pre>

<p>Here is how I would tackle the part at the end:</p>

<pre><code>(let [out-dir (:output-directory options)]
  (if-not (fs/exists? out-dir)
    (fs/mkdirs out-dir))
  (doseq [n (s/split (:dome options) #",")]
    (let [dome-id (first (s/split n #"-"))]
      (with-open [out-file (io/writer (str out-dir "/" dome-id ".csv"))]
        (write-csv-data :data [["dome_identifier" "name"]
                               [dome-id (last (s/split n #"-"))]] 
                        :outfile out-file))
      (with-open [dome-principal-file 
                  (io/writer (str out-dir "/dome_principal." dome-id ".csv"))]
        (write-csv-data :data [["dome_identifier" "principal_code" 
                                "currency_code" "active" "latitude" "longitude"]
                               [dome-id (:principal options) "" "t" "" ""]] 
                        :outfile dome-principal-file)))))))
</code></pre>

<p>Changes:</p>

<ol>
<li>I shortened a few symbol names, like output_directory =&gt; out-dir and dome_identifier =&gt; dome-id. </li>
<li>I changed the two parts with the pattern like <code>(s/join "/" [out-dir (s/join "." [dome-id "csv"])])</code> to <code>(str out-dir "/" dome-id ".csv")</code>, which is more concise and easier to read. Keep it simple!</li>
<li>I simplified <code>(first (reverse (s/split n #"-")))</code> to <code>(last (s/split n #"-"))</code>.</li>
<li>There's a part of your code where you created a list of strings by doing something like this: <code>(s/split "first-string second-string third-string fourth-string" #"\s+")</code>. That's clever, but the downside is that it leaves you with a long string that you can't break in order to shorten your lines. In this case, I think it makes more sense just to type e.g. <code>["first-string" "second-string" "third-string" "fourth-string"]</code>.</li>
</ol>

<p>Hope that helps!</p>
    </div>