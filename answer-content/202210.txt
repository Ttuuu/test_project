<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You will not get dramatic speedups untill you can vectorize the operations, but here are some tips already</p>

<h1>indexing before iterating</h1>

<p>instead of </p>

<pre><code>for i, row in df.iterrows():
    if row['event'] == 1:
</code></pre>

<p>If you do </p>

<pre><code>for i, row in df[df['event'] == 1].rows():
</code></pre>

<p>you will iterate over less rows.</p>

<h1>itertuples</h1>

<p>generally, <code>itertuples</code> is faster than <code>iterrows</code></p>

<h1>comparable_rows</h1>

<p>for <code>comparable_rows</code> you are only interested in the <code>proba</code> and the length, so you might as well make this into a Series, or even better, a numpy array.</p>

<p>The test <code>(df['event'] == 0)</code> doesn't change during the iteration, so you can define a <code>df2 = df[df['event'] == 0]</code> outside of the loop</p>

<h1>n_correct_rows</h1>

<p>instead of <code>len(comparable_rows[comparable_rows['proba'] &lt; row['proba']])</code>, you can use the fact that <code>True == 1</code> do <code>(comparable_rows['proba'] &lt; row.proba).sum()</code></p>

<h1>result</h1>

<pre><code>def c_index3(y_pred, events, times):
    df = pd.DataFrame(data={'proba':y_pred, 'event':events, 'time':times})
    n_total_correct = 0
    n_total_comparable = 0
    df = df.sort_values(by=['time'])
    df2 = df.loc[df['event'] == 0]
    for row in df[df['event'] == 1].itertuples():
        comparable_rows = df2.loc[(df2['time'] &gt; row.time), 'proba'].values
        n_correct_rows = (comparable_rows &lt; row.proba).sum()
        n_total_correct += n_correct_rows
        n_total_comparable += len(comparable_rows)

    return n_total_correct / n_total_comparable if n_total_comparable else N
</code></pre>

<h2>timings</h2>

<pre><code>data = ([0.1, 0.3, 0.67, 0.45, 0.56], [1.0,0.0,1.0,0.0,1.0], [3.1,4.5,6.7,5.2,3.4])
%timeit c_index1(*data)
</code></pre>

<blockquote>
<pre><code>5.17 ms ± 33.6 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)
</code></pre>
</blockquote>

<pre><code>%timeit c_index3(*data)
</code></pre>

<blockquote>
<pre><code>3.77 ms ± 160 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)
</code></pre>
</blockquote>
    </div>