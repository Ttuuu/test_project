<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You could also use a switch statement to prevent auto-boxing. Taking the logic from @tinstaafl's solution:</p>

<pre><code>class Solution {

public int romanToInt(String input){       
    int retVal = 0;
    int limit = input.length();
    int prevVal = 0;
    int nextVal = 0;
    for(int i = limit - 1;i &gt;= 0; --i){
        char nextChar = input.charAt(i);
        prevVal = nextVal;
        switch(nextChar)
        {
            case 'I':
                nextVal = 1;
                break;
            case 'V':
                nextVal = 5;
                break;
            case 'X':
                nextVal = 10;
                break;
            case 'L':
                nextVal = 50;
                break;
            case 'C':
                nextVal = 100;
                break;
            case 'D':
                nextVal = 500;
                break;
            case 'M':
                nextVal = 1000;
                break;
            default:
                throw new RuntimeException("No valid input");
        }
        if(nextVal &lt; prevVal){
            retVal -= nextVal;
        }else{
            retVal += nextVal;
        }
    }
    return retVal;
}
}
</code></pre>

<p>For those who are interested, Java generates a nice tableswitch ( with O(1) complexity) from this:</p>

<pre><code>ILOAD 6
TABLESWITCH
  67: L10
  68: L11
  69: L12
  70: L12
  71: L12
  72: L12
  73: L13
  74: L12
  75: L12
  76: L14
  77: L15
  78: L12
  79: L12
  80: L12
  81: L12
  82: L12
  83: L12
  84: L12
  85: L12
  86: L16
  87: L12
  88: L17
  default: L12
</code></pre>
    </div>