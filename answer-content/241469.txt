<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'm not sure I understand completely what you're trying to achieve. [Sorry, I'm not allowed to write a comment yet, so I couldn't ask for clarification there...]</p>

<p>If you know what keys you're looking for, you can just get the value in 1 step from the Dictionary.</p>

<pre><code>public const string searchKey = "key2";

Dictionary&lt;string, string&gt; values = new Dictionary&lt;string, string&gt;() {
  { "key1", "value1" },
  { "key2", "value2" },
  { "key3", "value3" }
};

// A: If you are sure the key can be found in the dictionary or you want to get an Exception in case it is not
string v = values[searchKey]; // v will be "value2"

// B: If you're not sure if the key is in the dictionary and you don't want an Exception
if (values.TryGetValue(searchKey, out string val))
{
  // Here val will be "value2"
}
else
{
  // This code runs when searchKey was not among the dictionary keys
}

</code></pre>

<p>Of course Option A is faster, but see the comment if it fits your situation. There is no faster way to get a value from a Dictionary.</p>

<p>Based on this, your code would be something like this:</p>

<pre><code>// predefined keys
public const string ABC = "header-abc";
public const string PQR = "header-pqr";
public const string DEF = "header-def";
public const string HIP = "header-hip";

HeadOne = values[ABC];
HeadOneId = HeadOne;

HeadTwo = values[PQR];
HeadTwoId = HeadTwo;

HeadThree = values[DEF];
HeadThreeId = HeadThree;

HeadFour = values[HIP];
HeadFourId = HeadFour;

</code></pre>

<p>or with option B:</p>

<pre><code>// predefined keys
public const string ABC = "header-abc";
public const string PQR = "header-pqr";
public const string DEF = "header-def";
public const string HIP = "header-hip";

if (values.TryGetValue(ABC, out string val))
{
  HeadOne = val;
  HeadOneId = HeadOne;
}

if (values.TryGetValue(PQR, out string val))
{
  HeadTwo = val;
  HeadTwoId = HeadTwo;
}

if (values.TryGetValue(DEF, out string val))
{
  HeadThree = val;
  HeadThreeId = HeadThree;
}

if (values.TryGetValue(HIP, out string val))
{
  HeadFour = val;
  HeadFourId = HeadFour;
}
</code></pre>

<p>I hope this is an answer to your question. If not, please clarify your goal or ask questions. Thanks!</p>

<hr>

<p>Update 1 - Answer to your comment:</p>

<p>Yes, totally. If you have the relevant keys in a collection you can iterate through them and use TryGetValue in the loop. But in this case the variable names like "HeadOne", "HeadTwo" or "HeadFourId" need to be generalized as well. Or you need an extra switch-case inside the loop again, which leads back to square one.</p>

<p>Also, consider the comments on the question, they have some good points, like using the dictionary directly where you need it rather than getting out the values separately and use them later.</p>

<p>An example for the loop:</p>

<pre><code>string[] keys = new string[] { "header-abc", "header-pqr", "header-def", "header-hip" }

IList&lt;string&gt; headerValues = new List&lt;string&gt;();

foreach (var key in keys)
{
  if (values.TryGetValue(key, out string val))
  {
    headerValues.Add(val);
  }
}
</code></pre>
    </div>