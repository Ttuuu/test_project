<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First refactor the implementation to use an internal constructor</p>

<pre><code>internal AdPersister(AdRepository&lt;TEntity&gt; adRepository, IAdImagePersister adImagePersister){
    _adRepository = adRepository;
    _adImagePersister = adImagePersister;
}
</code></pre>

<p>Effectively hiding it from use externally and giving you full controll of the class's activation</p>

<p>The lower layer in this case would need to expose an extensibility point to populate the used container by  implementing the <a href="https://github.com/ninject/Ninject/wiki/Providers%2C-Factory-Methods-and-the-Activation-Context#providers" rel="nofollow noreferrer"><code>IProvider</code></a> interface (in Ninject.Activation) </p>

<p><strong>Infrastructure Layer</strong></p>

<pre><code>public class AdPersisterProvider : IProvider {
    public Type Type =&gt; typeof(AdPersister&lt;&gt;);

    public object Create(IContext context) {
        var genericArguments = context.GenericArguments;
        var genericType = this.Type.MakeGenericType(genericArguments); //AdPersister&lt;T&gt;

        var dbContextType = typeof(ApplicationDbContext);
        var repoGenericType  = typeof(AdRepository&lt;&gt;).MakeGenericType(genericArguments);

        var dbContext = context.Kernel.Get(dbContextType); //assumed registered
        var adRepository = Activator.CreateInstance(repoGenericType, dbContext); //dbContext injected
        var adImagePersister = new S3AdImagePersister();

        var argTypes = new [] {
            repoGenericType,
            typeof(IAdImagePersister)
        };
         // Get the internal constructor that take the provided arguments
        var constructor = genericType.GetConstructor(BindingFlags.Instance | BindingFlags.NonPublic, null, argTypes, null);

        var parameters = new object[] {
            adRepository,
            adImagePersister
        };
        return constructor.Invoke(parameters);
    }
}
</code></pre>

<p>And used in composition root in the web project (using ninject):</p>

<pre><code>private static void RegisterServices(IKernel kernel) {
    kernel.Bind&lt;ApplicationDbContext&gt;().ToSelf().InRequestScope();
    kernel.Bind(typeof(IAdPersister&lt;&gt;)).ToProvider&lt;AdPersisterProvider&gt;().InRequestScope();
}
</code></pre>
    </div>