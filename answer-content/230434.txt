<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<p>Explicit is better than implicit.</p>
<p>Simple is better than complex.</p>
<p>Readability counts.</p>
</blockquote>
<p>The easiest way to make it faster would be to simply convert it into code:</p>
<pre><code>def generate_mbis() -&gt; Iterator[str]:
    """ Generate MBIs, starting with 1A00A00AA00.

        An MBI is a string with the following rules:

        [1-9]                      # No leading zeros
        [ac-hjkmnp-rt-z]           # No letters that can be confused for numbers or each other
        [ac-hjkmnp-rt-z\d]         # Letter or number
        \d                         # Any number
        [ac-hjkmnp-rt-z]           
        [ac-hjkmnp-rt-z\d]         
        \d                         
        [ac-hjkmnp-rt-z]{2}        # Then two letters
        \d{2}                      # Then two numbers
    """
    LETTERS = "acdefghjkmnpqrtuvwxyz".upper()
    D0_9 = "0123456789"

    # Using 2-space indents because so many
    for p0 in range(1, 9):
      for p1 in LETTERS:
        for p2 in LETTERS + D0_9:
          for p3 in D0_9:
            for p4 in LETTERS: 
              for p5 in LETTERS + D0_9:
                for p6 in D0_9:
                  for p7 in LETTERS:
                    for p8 in LETTERS:
                      for p9 in D0_9:
                        for p10 in D0_9:
                          yield p1+p2+p3+p4+p5+p6+p7+p8+p9+p10
</code></pre>
<p>You could probably improve speed by caching the partial sums in the inner loops. You <em>might</em> see some gain by using purely numeric indexing, using <code>range</code> instead of <code>for ... in ...</code>. (I don't know this, I just suspect it.)</p>
<p>Implementing a start-string would be straightforward, but would require an <code>if/else</code> at each level. You might make a helper function for that. (<strong>Edit:</strong> this turns out to be wrong. See below for an example of resuming.)</p>
<p><strong>Edit:</strong></p>
<p>It's worth noting that yes, you could use <code>itertools.product</code> to get the same effect:</p>
<pre><code>for tpl in itertools.product(range(1, 9),
                             LETTERS,
                             LETTERS + D0_9,
                             D0_9, 
                             LETTERS,
                             LETTERS + D0_9,
                             D0_9,
                             LETTERS,
                             LETTERS,
                             D0_9,
                             D0_9):
    yield ''.join(tpl)
</code></pre>
<p>But you won't have any opportunity to tweak the performance. It's worth trying, but I expect you'll be able to use a <code>bytearray</code> or partial sum or something to get better speed than you can from this approach.</p>
<p><strong>Edit:</strong></p>
<p>There was some question in the comments about (re)starting from an arbitrary location and how it would affect performance. Here's a simple 3-digit demo program to show how it could be done:</p>
<pre><code>import string

def gen_999(start: str = None):
    if start is None:
        start = '000'

    # Figure out the starting values
    s0, s1, s2 = ('000' + str(start))[-3:]
    digits = string.digits

    d0 = digits[digits.index(s0):]
    d1 = digits[digits.index(s1):]
    d2 = digits[digits.index(s2):]

    for p0 in d0:
        for p1 in d1:
            for p2 in d2:
                yield p0 + p1 + p2
            d2 = digits
        d1 = digits
    d0 = digits  # Included only for symmetry.

def main():
    for i, mbi in enumerate(gen_999(949)):
        print(mbi)
        if i == 100:
            break
    else:
        print("ended before break")

if __name__ == '__main__': 
    main()
</code></pre>
<p>This code prints numbers from 949 to 999, and the performance hit is an extra assignment statement in each level of looping.</p>
    </div>