<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There are numerous small things.</p>

<ol>
<li>You don't have to keep subtracting and adding 32 from <code>rsp</code>.  Allocate the space once at the start of the function (<code>main</code>), reuse it for the duration, and add it back at the end (but see below).</li>
<li>My personal preference would be to use <code>mov ecx,offset question</code> to make it clear that I want the address of the variable, and not the contents of it.</li>
<li>Start your prime check with the low numbers, not the high ones.  They're far more likely to be divisors.</li>
<li>Check for divisible by 2 first (before your loop), then you only need to check the odd numbers in your loop.</li>
<li><p>Instead of a conditional jump around an unconditional jump, negate the condition.  So you'd change</p>

<pre><code>    jge not_reached_1_yet
    jmp prime_check_ended
not_reached_1_yet:
</code></pre>

<p>to</p>

<pre><code>    jnge prime_check_ended    ; or j
</code></pre></li>
<li><p>Instead of <code>cmp edx,0</code>, you can use <code>test edx,edx</code>.  The <code>test</code> will do a bit-wise logical <code>and</code> of the two operands and set the flags accordingly without storing the result of the <code>and</code>.  This is a common way to check for zero.</p></li>
<li>Once you find that your number is not prime, you can stop looping.</li>
<li>You can also stop looping once you get to the square root of <code>number</code>.  This is often done by comparing the square of <code>counter</code> with <code>number</code>, but you can easily check it by comparing <code>eax</code> with <code>counter</code> after the division.  If <code>eax</code> is less or equal to counter you can stop looping.</li>
<li>Your <code>mov rbp,rsp</code> at the end is backwards.  It should be <code>mov rsp,rbp</code>.  This will also remove the 32 bytes of stack space you reserved for argument storage during function calls, so you don't need to explicitly add those 32 bytes back to the stack pointer.</li>
</ol>
    </div>