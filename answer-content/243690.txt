<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Don't like this:</p>
<pre><code>using JSONType = std::variant
&lt;
    bool,
    int,
    float,
    double,
    std::string,

    std::vector&lt;bool&gt;,
    std::vector&lt;int&gt;,
    std::vector&lt;float&gt;,
    std::vector&lt;double&gt;,
    std::vector&lt;std::string&gt;
&gt;;
</code></pre>
<p>That's not really what the type looks like. The array (Vector) can have any JSON type as a member. I think a better version would be:</p>
<pre><code>#include &lt;string&gt;
#include &lt;unordered_map&gt;
#include &lt;vector&gt;
#include &lt;variant&gt;

enum JsonType {Null, Obj, Vec, Bool, Int, Double, String};
class   Json;
struct JsonObj
{
    std::unordered_map&lt;std::string, Json&gt;   members;
};
using   JsonVec   = std::vector&lt;Json&gt;;
union JsonUnion
{
    JsonUnion() {null_ = nullptr;}
    ~JsonUnion(){}
    void*       null_;
    JsonObj     object_;
    JsonVec     array_;
    bool        bool_;
    int         int_;
    double      real_;
    std::string string_;
};
class Json
{

    JsonType     type;
    JsonUnion    data;
    public:
        Json()
            : type(Null)
            , data()
        {}
};

int main()
{
    Json    value;
}
</code></pre>
<hr>
<p>The get function assumes you only have objects. You should be able to handle de-referencing arrays. But that requires two types of get parameter (integer and string).</p>
<pre><code>using Access = std::variant&lt;int, std::string&gt;;

template &lt;class T&gt;
T* getIf(std::vector&lt;Access&gt; const&amp; keys)
</code></pre>
<hr>
<p>Also why are you returning a pointer?</p>
<pre><code>T* getIf()
</code></pre>
<p>Memory management is hard. That is why C got such a bad reputation for being hard. Java tried to solve this with the garbage collector (which just caused more issues with runtime running). C++ solved the problem by introducing "Automated Fine Grain Deterministic Memory Management" also know as "Smart Pointers". This is how memory management is done consisely and reliabily in modern C++.</p>
<pre><code>std::unqiue_ptr&lt;T&gt; getIf()
</code></pre>
<hr>
<p>Using <code>class</code> in the template is a bit old school.</p>
<pre><code>template &lt;class T&gt;
T* getIf(
</code></pre>
<p>Sure it is technically valid. But most people use <code>typename</code>. It has exactly the same meaning to the compiler. But to the human it implies that <code>T</code> can be any type (not just a class Type).</p>
<hr>
<p>If you are "getting" something from an object then I would normally expect that this would not alter the object. I notice that your <code>getIf()</code> is not <code>const</code>. You probably did this because it does not compile with <code>const</code>. This is because you use <code>operator[]</code> on the unordered map.</p>
<pre><code>temp = &amp;std::get&lt;JSONObject&gt;(temp-&gt;attributes[keys[i]]);
                                             ^       ^
</code></pre>
<p>When looking a value in a unordered_map (or map) and you use the square braces then if the key does not exist it is added to the structure. This is probably not what you want.</p>
<p>I would change this so it uses a <code>find</code>. If the object does not have the appropriate key then you have a serious issue and I would throw an exception:</p>
<pre><code>auto find = temp-&gt;attributes.find(keys[i]);
if (find == temp-&gt;attributes.end()) {
    throw "Bad Member Name";
}

temp = &amp;std::get&lt;JSONObject&gt;(find-&gt;second);
</code></pre>
<hr>
    </div>