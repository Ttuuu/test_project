<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Whenever you see large amounts of duplication, you should think about what's different about each piece, and what's the same. Once you see what's different, you can try to "automate" the duplicated bits.</p>

<p>For example, look at this code:</p>

<pre><code>pone = max(good_hands(plays, 0)) if good_hands(plays, 0) else None
ptwo = max(good_hands(plays, 1)) if good_hands(plays, 1) else None
pthree = max(good_hands(plays, 2)) if good_hands(plays, 2) else None
pfour = max(good_hands(plays, 3)) if good_hands(plays, 3) else None
pfive = max(good_hands(plays, 4)) if good_hands(plays, 4) else None
psix = max(good_hands(plays, 5)) if good_hands(plays, 5) else None
pseven = max(good_hands(plays, 6)) if good_hands(plays, 6) else None
peight = max(good_hands(plays, 7)) if good_hands(plays, 7) else None
pnine = max(good_hands(plays, 8)) if good_hands(plays, 8) else None
</code></pre>

<p>Every line is nearly identical. The only differences are the second argument passed to <code>good_hands</code>, and the name of the variable that you're creating. You're also calling <code>good_hands</code> twice as often as needed, and that looks like a very expensive function.</p>

<p>This block can be easily automated though. To generate numbers, you can use <code>range</code>, and once you have a range of numbers, you can just loop over them:</p>

<pre><code>outcome = []

for n in range(9):
    # Save the result instead of doing large amounts of work twice per n
    result = good_hands(plays, n)

    play = max(result) if result else None

    outcome.append(play)
</code></pre>

<p>Note how there is next to no duplication in this code. It can be improved further though. Whenever you want to turn one sequence into another sequence, you should consider using <code>map</code> (or, in Python specifically, a list comprehension).</p>

<p>That whole original chunk you had can be expressed in two, quite terse lines:</p>

<pre><code>raw_results = [good_hands(plays, n) for n in range(9)]  # Calls good_hands on each n

outcome = [max(result) if result else None for result in raw_results]  # Then finds the max of each (or None if it's falsey)
</code></pre>

<p>While this is arguably better, I'm not super happy with it. This really could be one simple line (and avoid the extra overhead) if you didn't need to call <code>max</code>, or you were using Python 3.8. Because you need to call <code>max</code> on a potentially invalid result returned by <code>good_hands</code>, you really need an intermediate variable to avoid calling <code>good_hands</code> twice. I achieved that here by splitting the operation over two list comprehensions. In Python 3.8 though, I'd be able to make use of an <a href="https://www.python.org/dev/peps/pep-0572/" rel="nofollow noreferrer">assignment expression</a> and create a variable inside the comprehension:</p>

<pre><code>outcome = [max(r) if (r := good_hands(plays, n)) else None) for result in raw_results]
</code></pre>

<p>Although this doesn't really read well. </p>
    </div>