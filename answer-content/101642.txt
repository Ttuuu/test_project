<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>A few things that could be improved upon:</p>

<hr>

<blockquote>
<pre><code>TEXTURES = {
    "dirt": pygame.transform.scale(pygame.image.load("./images/gameDirtBlock.png"), (TILE_SIZE, TILE_SIZE)),
    "grass": pygame.transform.scale(pygame.image.load("./images/gameGrassBlock.png"), (TILE_SIZE, TILE_SIZE)),
    "stone": pygame.transform.scale(pygame.image.load("./images/gameStoneBlock.png"), (TILE_SIZE, TILE_SIZE)),
    "sand": pygame.transform.scale(pygame.image.load("./images/gameSandBlock.png"), (TILE_SIZE, TILE_SIZE)),
    "water": pygame.transform.scale(pygame.image.load("./images/gameWaterBlock.png"), (TILE_SIZE, TILE_SIZE)),
    "wood": pygame.transform.scale(pygame.image.load("./images/gameWoodBlock.png"), (TILE_SIZE, TILE_SIZE)),
    "leaf": pygame.transform.scale(pygame.image.load("./images/gameLeafBlock.png"), (TILE_SIZE, TILE_SIZE)),
}
</code></pre>
</blockquote>

<p>A few things here:</p>

<ul>
<li>There's no need to wrap the actual texture title with <code>game*Block</code>: <code>./images/*.png</code> is fine.</li>
<li>All the lines are basically the same except for the texture title, you could probably loop over this if you wanted, or move the <code>pygame.transform.scale(pygame.image.load(), (TITLE_SIZE, TILE_SIZE))</code> into a function.</li>
</ul>

<hr>

<blockquote>
<pre><code>    def render_background(self):
        if player_aboveground:
            screen.fill(self.SKY_COLOR)
        if player_underground:
            screen.fill(self.UNDERGROUND_SKY_COLOR)
</code></pre>
</blockquote>

<p>Shouldn't <code>if player_underground</code> be <code>elif</code>? You can't be in both places at once.</p>

<hr>

<blockquote>
<pre><code>    self.START_X_LEFT = self.START_X_CENTER-500
    self.END_X_LEFT = self.START_X_CENTER

    # Start and end for right side
    self.START_X_RIGHT = self.END_X_CENTER
    self.END_X_RIGHT = self.END_X_CENTER+500

    # Start and end for far left side
    self.START_X_FAR_LEFT = self.START_X_LEFT-750
    self.END_X_FAR_LEFT = self.START_X_LEFT

    # Start and end for far right side
    self.START_X_FAR_RIGHT = self.END_X_RIGHT
    self.END_X_FAR_RIGHT = self.END_X_RIGHT+750
</code></pre>
</blockquote>

<p>Where's the spacing in between <code>self.* + val</code>?</p>

<hr>

<blockquote>
<pre><code>    self.inventory = {
        0: [0, pygame.transform.scale(pygame.image.load("./images/gameDirtBlock.png"), (17, 17))],
        1: [0, pygame.transform.scale(pygame.image.load("./images/gameGrassBlock.png"), (17, 17))],
        2: [0, pygame.transform.scale(pygame.image.load("./images/gameStoneBlock.png"), (17, 17))],
        3: [0, pygame.transform.scale(pygame.image.load("./images/gameSandBlock.png"), (17, 17))],
        4: [0, pygame.transform.scale(pygame.image.load("./images/gameWaterBlock.png"), (17, 17))],
        5: [0, pygame.transform.scale(pygame.image.load("./images/gameWoodBlock.png"), (17, 17))],
        6: [0, pygame.transform.scale(pygame.image.load("./images/gameLeafBlock.png"), (17, 17))],
    }
</code></pre>
</blockquote>

<p>Really?</p>

<ol>
<li>You should cast expelliarmus on the magic number <code>17</code>!</li>
<li><code>ArrayPosition</code>s are bad keys. In fact, useless.</li>
<li>I'm not familiar with <code>pygame</code>, but couldn't you just transform the <code>TEXTURES</code> instead?</li>
</ol>

<hr>

<blockquote>
<pre><code>    for chunk_x in range(self.START_X_FAR_LEFT, self.END_X_FAR_LEFT, TILE_SIZE):
        chunk = Chunk(chunk_x)
        chunk.add_new_chunk_data_far_side()

    # Generate the left side
    for chunk_x in range(self.START_X_LEFT, self.END_X_LEFT, TILE_SIZE):
        chunk = Chunk(chunk_x)
        chunk.add_new_chunk_data_side()

    # Generate the center
    for chunk_x in range(self.START_X_CENTER, self.END_X_CENTER, TILE_SIZE):
        chunk = Chunk(chunk_x)
        chunk.add_new_chunk_data_center()

    # Generate the right side
    for chunk_x in range(self.START_X_RIGHT, self.END_X_RIGHT, TILE_SIZE):
        chunk = Chunk(chunk_x)
        chunk.add_new_chunk_data_side()

    # Generate the far right side
    for chunk_x in range(self.START_X_FAR_RIGHT, self.END_X_FAR_RIGHT, TILE_SIZE):
        chunk = Chunk(chunk_x)
        chunk.add_new_chunk_data_far_side()

    # Generate the underground portion
    for chunk_x in range(self.UNDER_START_X, self.UNDER_END_X, TILE_SIZE):
        chunk = Chunk(chunk_x)
        chunk.add_new_chunk_data_underground()
</code></pre>
</blockquote>

<p><strong>DRY</strong> this a bit.</p>

<hr>

<blockquote>
<pre><code>def initalize_game():
    clock.tick(75)
    background = Background()
    generator = WorldGenerator()
    generator.generate_world()
</code></pre>
</blockquote>

<p>Is there any reason to assign <code>background</code> and <code>generator</code>?</p>

<pre><code>    Background()
    WorldGenerator().generate_world()
</code></pre>

<hr>

<p>Why do the comments in <code>run_events</code> have question marks on the end<code>?</code></p>

<blockquote>
<pre><code># Player aboveground? 
</code></pre>
</blockquote>

<hr>

<p>Also in <code>run_events</code>:</p>

<blockquote>
<pre><code>    # Player aboveground?
    if player_aboveground:
        self.chunk_loader.render_current_loaded_chunks_aboveground()

    # Player underground?
    if player_underground:
        self.chunk_loader.render_current_loaded_chunks_underground()

    # Move player aboveground?
    if player_aboveground:
        self.player.move_player_aboveground()

    # Move player underground?
    if player_underground:
        self.player.move_player_belowground()
</code></pre>
</blockquote>

<p>Why are these seperate?</p>

<pre><code>    if player_aboveground:
        self.chunk_loader.render_current_loaded_chunks_aboveground()
        self.player.move_player_aboveground()

    elif player_underground:
        self.chunk_loader.render_current_loaded_chunks_underground()
        self.player.move_player_belowground()
</code></pre>

<hr>

<p>On a related note to above:</p>

<blockquote>
<pre><code>    if player_aboveground:
        self.chunk_loader.render_current_loaded_chunks_aboveground()
        self.player.move_player_aboveground()

    elif player_underground:
        self.chunk_loader.render_current_loaded_chunks_underground()
        self.player.move_player_belowground()
</code></pre>
</blockquote>

<ul>
<li><strong>Above</strong>: <code>player_aboveground</code>, <code>*chunks_aboveground()</code>, <code>*move_player_aboveground()</code></li>
<li><strong>Under</strong>: <code>player_underground</code>, <code>*loaded_chunks_underground()</code>, <code>move_player_belowground()</code></li>
</ul>

<p>All the <code>above</code> ones use <code>above</code>, but all the <code>under</code> ones are not the same, one is <code>below</code>. IMHO, below sounds better (<em>Linguistically</em>) than under, but, the issue is that they should all be consistent.</p>
    </div>