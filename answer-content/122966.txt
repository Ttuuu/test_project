<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<pre><code>public enum Coins
</code></pre>
</blockquote>

<p>Enum type names should be singular, unless they're decorated with a <code>[Flags]</code> attribute:</p>

<blockquote>
  <ul>
  <li>Use Pascal case for Enum types and value names.</li>
  <li>Use abbreviations sparingly.</li>
  <li>Do not use an Enum suffix on Enum type names.</li>
  <li><strong>Use a singular name for most Enum types, but use a plural name for Enum types that are bit fields.</strong></li>
  <li>Always add the FlagsAttribute to a bit field Enum type.</li>
  </ul>
  
  <p><sub><a href="https://msdn.microsoft.com/en-us/library/4x252001(v=vs.71).aspx" rel="nofollow noreferrer">https://msdn.microsoft.com/en-us/library/4x252001(v=vs.71).aspx</a></sub></p>
</blockquote>

<p>Hence, <code>CoinType</code> would be a better name. Now, since this isn't a <code>[Flags]</code> enum, the underlying <code>int</code> values are utterly meaningless and don't need to be explicitly specified at all.</p>

<hr>

<blockquote>
<pre><code>public const char CopperAbbreviation = 'c';
public const char SilverAbbreviation = 's';
public const char GoldAbbreviation = 'g';
public const char PlatinumAbbreviation = 'p';
</code></pre>
</blockquote>

<p>Semantically, these aren't <em>constants</em>. They're the values you want to be using <em>now</em> in <em>this version</em> of the code. The problem is, by exposing them as <code>public const</code> fields, you've pretty much painted yourself in a corner if you've released your library: if a future version changes these values, you're forcing all client code to be recompiled, because the <code>const</code> values are "burned into place" upon compilation - so if I was using your library and now you're releasing a new version, I have to recompile <em>my</em> code to get the new values your framework is providing.</p>

<p>On the other hand, if you had them like this:</p>

<pre><code>public static readonly char CopperAbbreviation = 'c';
public static readonly char SilverAbbreviation = 's';
public static readonly char GoldAbbreviation = 'g';
public static readonly char PlatinumAbbreviation = 'p';
</code></pre>

<p>..then I could just swap your old version for the new and I'd get the updated content without recompiling anything.</p>

<p>That said, the only uses for these constants seem to be in the <code>ToString</code> implementation, which concatenates all the values:</p>

<blockquote>
<pre><code>public override string ToString()
{
    return
        "" + Platinum + PlatinumAbbreviation + "," +
        Gold + GoldAbbreviation + "," +
        Silver + SilverAbbreviation + "," +
        Copper + CopperAbbreviation;
}
</code></pre>
</blockquote>

<p>These concatenations aren't pretty, and the <code>""</code> feels like a hack to get the <code>+</code> operator to compile and get the numeric values to implicitly convert to strings.</p>

<p>If that <code>ToString</code> override is meant for debugging purposes, then I wouldn't even bother with the <code>XxxxAbbreviation</code> values - let the client code figure it out, and if you really want a <code>ToString</code> override, then you could simply do this:</p>

<pre><code>return string.Format("{0}p, {1}g, {2}s, {3}c", Platinum, Gold, Silver, Copper);
</code></pre>

<p>Even better, decorate your class with a <code>DebuggerDisplayAttribute</code> instead:</p>

<pre><code>[DebuggerDisplay("{Platinum}p, {Gold}g, {Silver}s, {Copper}c")]
</code></pre>

<hr>

<blockquote>
<pre><code>public static void ComputeWealth(long baseDenomination, out int platinum, out int gold, out int silver, out int copper)
</code></pre>
</blockquote>

<p>These <code>out</code> parameters stink. It's quite unfortunate that the method is returning <code>void</code>, when you could simply return a <code>MoneyBag</code> instance with one little instruction:</p>

<pre><code>return new MoneyBag(baseDenomination);
</code></pre>

<p>But then, why would you even need that member? Remove it, it's redundant.</p>

<p>Come to think about it, the whole type is really encapsulating 4 <code>int</code> values: consider making it an <a href="https://stackoverflow.com/a/3753640/1188513">immutable <code>struct</code></a> instead of a class; all mutating methods would simply return a new value.</p>

<p>I'd only change these two members:</p>

<blockquote>
<pre><code>public static readonly MoneyBag FilledBag = new MoneyBag(MaximumBaseDenomination);
public static readonly MoneyBag EmptyBag = new MoneyBag();
</code></pre>
</blockquote>

<p>to this:</p>

<pre><code>public static readonly MoneyBag Full = new MoneyBag(MaximumBaseDenomination);
public static readonly MoneyBag Empty = new MoneyBag();
</code></pre>

<p>"Bag" is redundant when you're calling it. Consider:</p>

<pre><code>var emptyBag = MoneyBag.EmptyBag;
var fullBag = MoneyBag.FilledBag;
</code></pre>

<p>vs.</p>

<pre><code>var emptyBag = MoneyBag.Empty;
var fullBag = MoneyBag.Full;
</code></pre>
    </div>