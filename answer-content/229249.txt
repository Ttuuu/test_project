<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I think this is a beautiful opportunity to put them all in a dictionary.</p>

<pre class="lang-py prettyprint-override"><code>"""
RULES
    +5 when first and last digit match
    +6 when second digit is twice the first AND third digit is greater than second or fourth digit
    +7 if any 7 is in the zipcode
    +8 when there's no "13" in MIDDLE the zipcode
    +9 when all three middle digits match
    +10 when third and fourth digits match
    +11 when zipcode is palindrome (12121 == 12121, while 12345 != 54321)
"""
def rule1(code):
    return code[0] == code[-1]

def rule2(code):
    return int(code[1]) == 2*int(code[0]) and int(code[2]) &gt; int(code[1]) or int(code[2]) &gt; int(code[3])

def rule3(code):
    return "7" in code

def rule4(code):
    return "13" not in code[1:-1]

def rule5(code):
    return len(set(code[1:-1])) == 1  # Only 1 unique symbol in this part of the string.

def rule6(code):
    return code[2] == code[3]

def rule7(code):
    return code == code[::-1]  # Checks for equality against it's own reverse.

rules = {
    rule1: 5,
    rule2: 6,
    rule3: 7,
    rule4: 8,
    rule5: 9,
    rule6: 10,
    rule7: 11,
}

code = input("Please enter code: ")
total = 0
for is_valid, worth in rules.items():
    if is_valid(code):
        total += worth
        print(f"{is_valid.__name__} got {worth} points, so total is now {total}")
    else:
        print(f"{is_valid.__name__} got 0 points, so total is now {total}")

</code></pre>

<p>First we define all our rules, in such way that they return a boolean value to show whether they apply or not. Then we put them in a dictionary, with the functions themselves as keys, and the worth as value - this allows us to have duplicate values in a hypothetical future. And yes, functions are perfectly valid dictionary keys, like all hashable objects. </p>

<p>Then we simply loop over the dictionary, adding up the values that belong to those functions that return true.</p>

<p>If printing wasn't necessary, it would be a lot easier to add the values up and print them right away with a <a href="https://docs.python.org/3/reference/expressions.html#generator-expressions" rel="nofollow noreferrer">Generator Expression</a>, one of the tools responsible for making python as awesome as it is.:</p>

<pre class="lang-py prettyprint-override"><code>print(f"Total value: {sum(worth for is_valid, worth in rules.items() if is_valid(code))}")
</code></pre>
    </div>