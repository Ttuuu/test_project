<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>(repost of my <a href="https://codereview.stackexchange.com/a/207008/23601">previous reply</a>)</p>

<p>A few nitpicks off the bat since you asked about messiness. First, use a tool (any tool) to automatically format your code. Your braces and indentation are all over the place. Second, I would remove all of the "section" comments from your code. It's obvious that, for example, the first few lines of your function are "declarations" You don't need a comment to tell you that.</p>

<h3>Non-idomatic code</h3>

<ul>
<li><p>You have a habit of declaring all of your variables at the top of the function. This isn't necessary in C++ (or even modern versions of C). Most people agree that it's easier to read code where variables are simply declared where they are first used.</p></li>
<li><p>You are passing strings by value everywhere. It would be more idiomatic in C++ to either take function arguments as const references (<code>const std::string&amp;</code>) and continuing to return strings or just take a mutable reference (<code>std::string&amp;</code>) and mutate the string in-place, returning <code>void</code>.</p></li>
<li><p>This code stuck out to me:</p></li>
</ul>

<blockquote>
  <p><code>switch(finalVerification(output)){
  case true: break;
  case false: output = findPair(output);
  }</code></p>
</blockquote>

<p>It's very unusual to switch over a boolean, especially when you don't do anything with the true case. You can re-write this as </p>

<pre><code>if(!finalVerification(output) {
    output = findPair(output);
}
</code></pre>

<h3>Naming</h3>

<p>Function names like <code>condition</code> and <code>quickCheckFix</code> aren't very helpful to the reader. What the <code>quickCheckFix</code> function actually does is remove characters that occur next to themselves, so call it something like <code>removeSelfAdjacent</code>.</p>

<h3>Verbosity</h3>

<p>Generally, you're writing way more code than you need to. Your <code>quickCheckFix</code> is 42 lines, whereas the following function that does exactly the same thing is only 10.</p>

<pre><code>//Removes all characters that occur next to themselves in the string.
void removeSelfAdjacent(std::string&amp; input) {
    for(std::size_t i = 0; i &lt; input.size() - 1; i++) {
        //If duplicates are encountered remove all instances of that character
        //from the string.
        if(input[i] == input[i + 1]) {
            output.erase(std::remove(output.begin(), output.end(), output[i]), output.end()); 
            --i; // Need to recheck the current character since we just removed it.
        }
    }
}
</code></pre>
    </div>