<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Toby &amp; Sam both make excellent points; I won't repeat them.  I would like the add the following:</p>

<h1>Use sets with in</h1>

<p>You are repeatedly testing whether a letter is <code>in</code> the string <code>VOWELS</code>.  This requires a linear search through the string, checking each substring to see if it matches.</p>

<p>If instead, you declared <code>VOWELS</code> as a <code>set</code>:</p>

<pre><code>VOWELS = set("aeiouAEIOU")
</code></pre>

<p>then the <code>in</code> operation should become a much faster <span class="math-container">\$O(1)\$</span> lookup.</p>

<h1>Repeated tests</h1>

<p>You may be checking <code>strs[x][y] in VOWELS</code> up to 4 times.  Once for <code>strs[string_i][i]</code>, once for <code>strs[string_i][i+1]</code>, once for <code>strs[string_i+1][i]</code>, and once for <code>strs[string_i+1][i+1]</code>.</p>

<p>You could perform the check exactly once per character:</p>

<pre><code>vowel = [[ch in VOWELS for ch in line] for line in strs]
</code></pre>

<p>With <code>["abcd", "eikr", "oufj"]</code>, this would yield the matrix:</p>

<pre><code>[[True, False, False, False],
 [True, True, False, False],
 [True, True, False, False]]
</code></pre>

<p>Then testing <code>vowel[x][y]</code>, <code>vowel[x+1][y]</code>, <code>vowel[x][y+1]</code>, <code>vowel[x+1][y+1]</code> would be simple lookup operations, instead of more complicated <code>in</code> containment tests.</p>

<h1>An alternate approach</h1>

<p>Using this matrix of vowel flags, you could compute whether pairs of vowels exist in a row, by AND-ing each adjacent pair of boolean values together:</p>

<pre><code>vowel_pairs = [[a and b for a, b in zip(row[:-1], row[1:])] for row in vowels]
</code></pre>

<p>resulting in</p>

<pre><code>[[False, False, False],
 [True, False, False],
 [True, False, False]]
</code></pre>

<p>Then, you could AND each pair of adjacent rows:</p>

<pre><code>vowel_square = [[a and b for a, b in zip(row_a, row_b)] 
                for row_a, row_b in zip(vowel_pairs[:-1], vowel_pairs[1:])]
</code></pre>

<p>resulting in</p>

<pre><code>[[False, False, False],
 [True, False, False]]
</code></pre>

<p>The <code>True</code> in the row 1, column 0 means a 2x2 vowel square occurs there.  Assuming "most top-left" means first in top-to-bottom, then left-to-right ordering, we can extract the locations of all vowel squares using a generator expression:</p>

<pre><code>locations = (f"{x}-{y}"
             for x, row in enumerate(vowel_square) for y, flag in enumerate(row)
             if flag)
</code></pre>

<p>and extract only the first if it exists:</p>

<pre><code>return next(locations, "Not found")
</code></pre>

<p><strong>Note</strong>: this matrix row/column AND'ing does a complete analysis of the matrix, finding any and all 2x2 vowel matrices.  It does not stop when the first one is found, so may be slower if the required 2x2 matrix is found early on.  In the case of no 2x2 vowel matrix existing, it may perform the fastest, since every possibility would need to be checked.  However, it would not scale well to larger submatrices.  Toby's recommendation of searching every <em>N</em>th line would be better.</p>
    </div>