<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I’d go out on a limb and call this Good Code™️. I’m easily able to follow all the logic. It’s fairly idiomatic, using map/reduce instead of loops and pattern matching. The tests are all super tight and clear. </p>

<p>The only thing that catches my eye are those <code>[should_panic]</code> annotations. I would expect a <code>parse</code> function to return an Ok/Err <code>Result</code> instead of hard panic. Personally, I prefer to defer decisions about how to handle an error as long as possible and push it as high up into the call stack as I can. Embrace the monad. It’s common in rust to have two variants of a function, one that may panic and one that returns a <code>Result&lt;T&gt;</code>. Then the client code can decide which behavior it wants. </p>
    </div>