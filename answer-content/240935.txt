<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Dirty Flag Pattern</strong> </p>

<p>In all the getSomethingMatrix() you can apply the Dirty Flag Pattern described in the book Game Programming Patterns. This one ensure that calculations are only performed when they are needed. And, additionally, you will be able to reduce most of the code duplication inside setter functions. For example:</p>

<pre><code>class CH_API PerspectiveCamera : public Camera 
{
public:
    // ... 
    private:
    // ...
    bool m_dirty = true;
};
</code></pre>

<p>.</p>

<pre><code>void PerspectiveCamera::setZoom(const float&amp; zoom)
{
    m_zoom  = zoom;
    m_dirty = true;
}

glm::mat4 PerspectiveCamera::getProjectionMatrix() 
{
    if(m_dirty)
    {
        recalculateViewProjectionMatrix();
    }
    return m_projectionMatrix;


glm::mat4 PerspectiveCamera::getViewProjectionMatrix() 
{
    if(m_dirty) 
    {
        recalculateViewProjectionMatrix();
    }
    return m_viewProjectionMatrix;
}   

void PerspectiveCamera::recalculateViewProjectionMatrix() 
{
    m_projectionMatrix = glm::perspective(glm::radians(m_fov/m_zoom), m_aspectRatio, m_zNear, m_zFar);
    m_viewProjectionMatrix = m_projectionMatrix * m_viewMatrix;
    m_dirty = false;
}
</code></pre>

<p>Note that this enforce you to remove the const statement of getter functions or make the matrix variables to be mutable.  </p>

<p>It also would be nice if you have a class Transform with everything related to position, rotation and scale. That way, the CameraController becomes a generic TransformController (with additional methods to control camera specific fields) and the logic inside MainCamera::handleKeyInput could be applied to any object. This class may be used to get any object model matrix in your game engine. It also makes possible to have transform hierarchies, like a camera attached to a player.</p>
    </div>