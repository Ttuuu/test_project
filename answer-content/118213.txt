<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Good on you for taking on a project to learn, and even more for posting it here! Keep it up, you'll go far.</p>
<h1>Make use of methods</h1>
<p>Likely what you mean when you say modular, you should be using more methods. Right now pretty much all your logic is in your start method. Not only would using methods increase both maintainability and readability it would also make adding features more streamlined thus making your entire program both more flexible and extensible.</p>
<p>Here's a small example of where you can do this:
This if series where you currently check whether a deleted character is an operator:</p>
<pre><code>if(charToDelete == '+' || charToDelete == '-'
 || charToDelete == '*' || charToDelete == '/'){
     operatorAlreadyPressed = false;
}
</code></pre>
<p>You can extract this into the following:</p>
<pre><code>private boolean isOperator(char potentialOperator) {
        return potentialOperator == '+' || potentialOperator == '-' ||
               potentialOperator == '*' || potentialOperator == '/';
}
</code></pre>
<p>This way you reduce your if condition to <code>isOperator(charToDelete)</code>, You could even have a method that calls this one and alters <code>operatorAlreadyPressed</code> as a result. Try to see where else you can add more methods to your code!</p>
<h1>Use Lambda expressions</h1>
<p>Unless you're explicitly constrained in which runtime you may use, consider replacing your anonymous inner classes with lambda expressions.</p>
<p>e.g. Everywhere you use the <code>setOnAction</code> method, like the following:</p>
<blockquote>
<pre><code>numberButtons.get(counter).setOnAction(new EventHandler&lt;ActionEvent&gt;(){
                public void handle(ActionEvent e){
                // logic
                }
   }
</code></pre>
</blockquote>
<p>You can write it simply:</p>
<pre><code>numberButtons.get(counter).setOnAction(e -&gt; {
               // logic
});
</code></pre>
<p>Read more about Lambda Expressions, from Oracle,  <a href="https://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html" rel="nofollow noreferrer">here</a> &amp; for a general rundown of Java 8 features I recommend <a href="http://winterbe.com/posts/2014/03/16/java-8-tutorial/" rel="nofollow noreferrer">this</a>.</p>
<h2>Interface Intuitiveness</h2>
<p>The 'C' button typically acts as a clear option on calculator. Yours currently acts as a backspace and you actually lack a clear option altogether.
In addition, after any result is displayed any proceeding input appends to the end of the previous result.
Lastly, I would organize things to be more like a natural calculator. It's fairly horizontal and there's quite a lot of space that just doesn't do anything. Good work on the flexible sizing however.</p>
<h3>Remove commented code.</h3>
<p>Commented is dead code. 'Nuff said.</p>
<h3>On XML &amp; CSS</h3>
<p>A large appeal of JavaFX  is the possibility to use CSS stylings and the ability to use XML to separate your model / view from your application logic. There is even software, like <a href="http://gluonhq.com/open-source/scene-builder/" rel="nofollow noreferrer">Scene Builder</a>, that feature GUI whose use generates the desired XML for an interface. Here's a simple <a href="https://codereview.stackexchange.com/questions/112534/stylishly-saving-source">example</a> using both CSS and XML facilitated by Scene Builder to design an interface.</p>
    </div>