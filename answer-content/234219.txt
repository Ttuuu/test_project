<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>For your second algorithm which I suppose is slow, but not fatally slow like the first one, you can actually perform some brute force optimisations: </p>

<p>You are trying out whether n is divisible by 2, 3, 4, 5, 6, 7, 8, 9, 10, etc. Now if you think about it, n cannot fail the test of divisibility by 4, 6, 8 or 10, because it would have been divisible by 2 already. n also cannot fail the division test for 9, 15, 21, 27 etc. because it would have been divisible by 3 already. </p>

<p>If you check first whether n is divisible by 2, 3 and 5, then you only need to check divisibility by other numbers that are not divisible by 2, 3 or 5. Only 8 out of every 30 consecutive numbers are not divisible by 2, 3, or 5, and that is the numbers 30k+1, 30k+7, 30k+11, 30k+13, 30k+17, 30k+19, 30k+23 and 30k+29. If you only check divisibility by these numbers, then only 8 out of 30 tests are needed. That will be about 4 times faster. </p>

<p>You can do even better by only checking divisibility by primes. Store all the small primes in an array, and only check divisibility by primes. If n &gt; p^2 for the largest stored prime p, you have to find the next prime first. </p>

<p>And please make sure that your algorithm gives the correct result for n = 1, n = 0, n &lt; 0.</p>
    </div>