<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here is another twist, roughly similar to dariosicily's proposal.</p>

<p>It differs in the following points:</p>

<ul>
<li>It create the aggregated comparator only once, then store it in a static field. Why? Because functions such as <code>Comparator.nullsFirst()</code> and <code>Comparator.comparing()</code> implies object allocation, which you definitely want to avoid if your comparator is called from tight loops (for example, a sort or tree insertion algorithm).</li>
<li>Null checks on the LoadAccount objects themselves have also been delegated to <code>Comparator.nullsFirst()</code>. That means that absolutely no <code>if</code> statement is required!</li>
<li>I moved that comparator to a public, static field of a utility class. I have learned from personal experience that comparators on domain model objects very often come in "families". In different places, you want different sorting strategies, for the same objects. Here, for demonstration, I also included one comparator for <code>loadAmount</code> (that is, without fallback on tie), and another one for <code>creationDate</code>. But you can see how this idea can be generalized.</li>
<li>In this sample, I have adopted an uncommon indentation strategy. I think this is justified in this case because it helps make it easier to see which fields are sorted by each comparator, and in which order. This is of great importance when you have comparators that involve a significant number of fields.</li>
</ul>

<pre><code>    public class LoanAccountAmountComparators {

        /**
         * A comparator that sort LoanAccounts, by load's amount, in decreasing order.
         */
        public static final Comparator&lt;LoanAccount&gt; BY_AMOUNT = 
            Comparator.nullsFirst(
                Comparator.comparing(
                    LoanAccount::getLoanAmount, Comparator.nullsFirst(Comparator.reverseOrder())
                );
            );

        /**
         * A comparator that sort LoanAccounts, by creation date, in ascending order.
         */
        public static final Comparator&lt;LoanAccount&gt; BY_DATE = 
            Comparator.nullsFirst(
                Comparator.comparing(
                    LoanAccount::getCreationDate, Comparator.nullsFirst(Comparator.naturalOrder())
                );
            );

        /**
         * A comparator that sort LoanAccounts, by creation amount (in descending order),
         * then by date (in ascending order).
         */
        public static final Comparator&lt;LoanAccount&gt; BY_AMOUNT_AND_DATE = 
            Comparator.nullsFirst(
                Comparator.comparing(
                    LoanAccount::getLoanAmount, Comparator.nullsFirst(Comparator.reverseOrder())
                ).thenComparing(
                    LoanAccount::getCreationDate, Comparator.nullsFirst(Comparator.naturalOrder())
                );
            );
    }
</code></pre>

<p>It should be noted that, in this example, all fields involved are indeed some kind of objects. If, however, your comparator would involve fields containing primitive types, then you should use the corresponding <code>Comparator.comparing&lt;primitiveType&gt;</code> function (that is, never let some primitive be boxed to object only so it can be compared to <code>Comparator.naturalOrder()</code>.</p>
    </div>