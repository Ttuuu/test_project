<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>From a short review;</p>
<ul>
<li><code>ascending</code> should probably be a parameter in the <code>sortFunc</code></li>
<li><code>sort</code> (<code>sortKey</code>) should probably be a parameter in the <code>sortFunc</code></li>
<li>I feel things should be Spartan (1 char) or spelled out
<ul>
<li><code>sortFunc</code> -&gt; <code>sortFunction</code> -&gt; <code>sorter</code>?</li>
</ul>
</li>
<li>I would strongly consider the closure concept (example ion proposal)</li>
<li>I would harmonize the sort values with the object fields,or create a map</li>
<li>There is no need to initialize <code>aParam</code> and <code>bParam</code> with <code>null</code>, the default <code>undefined</code> should do</li>
<li>You probably want to add a comment as to why you compare <code>name</code> at the end</li>
<li>I prefer the <code>if/else if</code> approach even when <code>if</code> performs a <code>return</code>, it's one line less and increases readability</li>
</ul>
<p>This is my counter-proposal;</p>
<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>const sortAscending = true;
const sortDescending = false;

function createSortFunction(key, ascending){

  const keyMap = {
    brand : 'brand.title',
    weight: 'metadata.weight',
    price: 'price.unit_amount',
    style: 'metadata.style',
    arrival: 'created'
  }
  
  key = keyMap[key]? keyMap[key] : 'brand.title';
  
  return (function sortFunction(a, b){
  
    //Minor magic, derive the property from a the dot notation string
    key.split('.').forEach(part=&gt;{a = a[part], b = b[part];}); 
    
    // Sort by property, ascending or descending
    if (a &lt; b) {
      return ascending ? -1 : 1
    }else if (b &gt; a) {
      return ascending ? 1 : -1
    }
  
    // Sort by name if the properties are same
    if (a.name &lt; b.name) {
      return -1
    } else if (a.name &gt; b.name) {
      return 1
    }
    //a and b are equal
    return 0;
  });
}


products = [
 { name : 'Bob',   metadata: { weight: 160, style: 'sage'}, price: { unit_amount: 145}, created : '19750421', brand : { title: 'Sir' } },
 { name : 'Skeet', metadata: { weight: 130, style: 'ninja'}, price: { unit_amount: 160}, created : '20010611', brand : { title: 'Bro' } }
]

products.sort(createSortFunction('weight', sortAscending));
console.log(products);</code></pre>
</div>
</div>

    </div>