<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>When creating a parent class your attributes can be inherited to a subclass. A conventional way to create characters:</p>

<pre><code>class Char:
    def __init__(self, name, hp, strength, gold):
        self.name = name
        self.hp = hp
        self.strength = strength
        self.gold = gold


class Enemy:
    def __init__(self, name, hp, strength, gold):
        self.name = name
        self.hp = hp
        self.strength = strength
        self.gold = gold

#Create player and enemy
player = Char('John Smith', 100, 100, 100)
goblin = Enemy('Goblin', 100, 100, 200)
</code></pre>

<p>You can also use the <code>super()</code> method to create subclass that automatically inherits the attributes of the parent class without affecting the parent class.</p>

<pre><code>class Goblin(Char):
    def __init__(self):
        super().__init__(name='Goblin', hp=100, strength=100, gold=200)
</code></pre>

<p>This is using the attributes from the parent class <code>Char</code>. You can also add attributes to this class if you want to include any other variables</p>

<p>@Linny</p>

<p>Yes you can, the extending the attributes would just be included in the class your making however you might not want the rest of the functions from the main class. This is why I usually separate the classes. For instance:</p>

<pre><code>class Char:
    def __init__(self, name, hp, strength, gold):
        self.name = name
        self.hp = hp
        self.strength = strength
        self.gold = gold

    def __str__(self): # You may not want to return any values but this will run
      return 'name: {} , hp: {} , strength: {} , gold: {}'.format(self.name, self.hp, self.strength, self.gold)


class Enemy(Char): # You can extend attributes here without changing the parent class
  pass


player = Char('John Smith', 100, 100, 100)
enemy_1 = Enemy('Giant', 1000, 1000, 1000)
print(player)
print(enemy_1)
</code></pre>

<p>This gives:</p>

<pre><code>name: John Smith , hp: 100 , strength: 100 , gold: 100
name: Giant , hp: 1000 , strength: 1000 , gold: 1000
</code></pre>

<p>Your Subclass may not want the Parent class functions so the first method is a good way to achieve full flexibility in your code.</p>
    </div>