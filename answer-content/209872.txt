<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>Go doesn't guarantee atomicity ... so I built a simple Go interface to do that</p>
</blockquote>

<p>Okay, but is your implementation atomic? The only atomic operations guaranteed to be atomic in Go are through the <code>sync/atomic</code> package (or things like <code>func (*Cond) Wait</code> under <code>sync</code>).</p>

<p>If you need true atomic write, use the atomic package. However, using <code>log</code> is usually sufficient.</p>

<hr>

<p>Your implementation looks like it's trying to be concurrent, not atomic. Rather than rolling your own concurrent writer interface, use the standard API.</p>

<p>You're right, <code>fmt</code> (&amp; <code>os</code> write functions, etc.) do not provide concurrency. However, the <code>log</code> package <a href="https://stackoverflow.com/a/18362952">does</a>.</p>

<p>You <a href="https://golang.org/src/log/log.go?s=5252:5306#L139" rel="nofollow noreferrer">can see</a> that they use mutex locks for the <code>Output</code> function, which is used by almost everything else.</p>

<p>This should perform nearly identical to your use case, because you open the file with <code>O_APPEND</code>, and <code>log</code> appends.</p>

<p>So open a file, and pass it to <code>log.New()</code>.</p>

<p>For example:</p>

<pre><code>package main

import (
    "log"
    "os"
)

func main() {
    f, err := os.OpenFile("testfile", os.O_APPEND|os.O_CREATE|os.O_WRONLY, 0644)

    if err != nil {
        log.Fatal(err)
    }

    logger := log.New(f, "", 0)
    logger.Output(2, "wow")
}
</code></pre>
    </div>