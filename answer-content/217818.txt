<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Various Comments</h3>

<p>First, Stack Exchange sent the body of my response into the void when I logged in to post it, so I'm going to be a bit more brief and a bit less organized than I originally wanted because I'm lazy.</p>

<p>This is not really reviewing your code, so it would've been better served as a comment, but I didn't think to comment my approach before I wrote out all the code. Might as well share it in case it's helpful. </p>

<p>To be honest, I don't quite understand your second solution, but on a second read it looks like it might still be <code>n^2</code> (same asymptotic complexity as your first solution), so that would explain why it's slower. I assumed at first it was just something to do with mutability and vectors (which I don't really understand myself), but on second read I'm no longer so sure about this.</p>

<p>If you don't mind me being frank in answering your first question: I don't really think it's nice. I had a pretty rough time reading it, to the point where I instead just wrote a more Haskell-inclined solution that has better asymptotic performance than your first one.</p>

<h3>Proposed Solution</h3>

<p>Are you okay with an <code>n log n</code> solution? If memory serves, with the right choice of set/map, the <code>log</code>'s base is so large that it is effectively linear.</p>

<p>Here is one such solution</p>

<pre><code>import Data.List (foldl', sortOn)
import Data.Map (Map)
import qualified Data.Map as Map

-- | Gives the unique elements of 'elems' in order.
orderedNub :: Ord a =&gt; [a] -&gt; [a]
orderedNub elems = sortOn (firstIndexMap Map.!) (Map.keys firstIndexMap)
  where
    -- Insert such that if the value is already in 'firstIndexMap', it is not
    -- updated.
    addElem m (elem, index) = Map.insertWith (flip const) elem index m
    -- Left fold in order to get the first occurance of each element.
    firstIndexMap = foldl' addElem Map.empty $ zip elems [0..]

-- | Gives the unique elements of 'elems' and the indices of 'elems' in
-- the unique list of elements.
unique :: Ord a =&gt; [a] -&gt; ([a], [Int])
unique elems = (uniques, indices)
  where
    uniques = orderedNub elems
    uniqueInds = zip uniques [0..]
    indexMap = foldr (uncurry Map.insert) Map.empty uniqueInds
    -- We can use unsafe indexing since we know that 'indexMap' has
    -- the right values.
    indices = [indexMap Map.! x | x &lt;- elems]
</code></pre>

<h3>Some Notes About the Solution</h3>

<ol>
<li>I changed the code so it is correct now, assuming you want to preserve order. Some of these comments may be a bit out of date as a result.</li>
<li><code>orderedNub'</code> is a kind of clunky definition, but it should have better asymptotic performance than <code>nub</code>. I’m pretty sure you can avoid the overhead of an actual sort (one clunky way would be to use a vector like you’re using).</li>
<li><code>uncurry Map.insert</code> is a cute pointfree thing, if that's not your dig just sub it with a lambda or helper function.</li>
<li>I can't think of a good way to avoid using <code>Map.!</code>, even though it's partial. If I used <code>Map.lookup</code>, then there'd have to be a <code>fromJust</code> or a <code>Maybe</code> overhead, even though the map is, by construction, going to have the right keys. Guess this is a shortcoming of the type system.</li>
</ol>
    </div>