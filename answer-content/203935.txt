<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I don't think it's necessary to insist that the string builder itself be in dynamic storage.  It's a fixed size, and would really like to be in automatic storage.  Ideally, it would be re-usable, too.</p>

<p>That can be enabled, by adding functions like these:</p>

<pre><code>typedef struct stringbuilder_s stringbuilder_s;

bool sb_init(stringbuilder_s *b, const char *s)
{
    b-&gt;count = strlen(s);
    b-&gt;cap = LOAD_FACTOR * (b-&gt;count + 1);
    b-&gt;mem = malloc(b-&gt;cap);
    if (!b-&gt;mem) {
        b-&gt;count = 0;
        b-&gt;cap = 0;
        return false;
    }
    strcpy(b-&gt;mem, s);
    return true;
}

void sb_close(stringbuilder_s *b)
{
    free(b-&gt;mem);
    b-&gt;cap = 0;
    b-&gt;count = 0;
}
</code></pre>

<p>We can then use like this:</p>

<pre><code>#include &lt;stdio.h&gt;

int main(void)
{
    stringbuilder_s builder;
    if (!sb_init(&amp;builder, "foo")) { goto fail; }
    if (!sb_append_char(&amp;builder, '1')) { goto fail; }
    printf("Created %s\n", sb_as_string(&amp;builder));
    sb_close(&amp;builder);
    return 0;

 fail:
    sb_close(&amp;builder);
    fprintf(stderr, "String creation failed");
    return 1;
}
</code></pre>

<hr>

<p>Bug:</p>

<ul>
<li>If <code>sb_new()</code> fails to allocate <code>mem</code>, we really need to free <code>ret</code> before returning null.</li>
</ul>

<hr>

<p>Minor points:</p>

<ul>
<li><code>sizeof (char)</code> is 1 by definition, and <code>sizeof *ret</code> is clearer than <code>sizeof (struct stringbuilder_s)</code> when allocating to assign to <code>ret</code>.</li>
<li>It's wasteful to zero out the whole capacity, when we only need a single terminator for a string.  We <em>could</em> defer the null termination until we <code>sb_as_string()</code> is called, but I think it's better to keep <code>mem</code> nul-terminated as we go.  (The overhead shrinks once we support <code>sb_append_string()</code>, of course).</li>
</ul>
    </div>