<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<pre><code>#ifndef LRUTIL_H
</code></pre>

<p>This doesn't match the name of the file. If your compiler supports <code>#pragma once</code>, it's easier to use that instead of manual header guards.</p>

<hr>

<pre><code>template &lt;std::size_t RHS_SIZE, std::size_t LA_SIZE&gt;
bool LR1Item&lt;RHS_SIZE, LA_SIZE&gt;::is_final_item() const { ...
</code></pre>

<p>Definitions for template functions should be <a href="https://stackoverflow.com/questions/495021/why-can-templates-only-be-implemented-in-the-header-file">in the header file, not in a cpp file</a>.</p>

<hr>

<pre><code>int parsed_till;
</code></pre>

<p>You may be getting compiler warnings about comparing signed and unsigned numbers because of the type of this variable. Since this is an index, it would probably be better to use an unsigned type here (specifically <code>std::size_t</code>).</p>

<hr>

<pre><code>bool LR1Item::is_final_item() const
</code></pre>

<p><code>is_final_item</code> implies that our index points at the final item (<code>size() - 1</code>). But we actually have an invalid index at this point. Perhaps <code>is_at_end</code> would be a better name.</p>

<hr>

<pre><code>const char* LR1Item::move_forward() {
    if (is_final_item()) // added check!
        throw std::runtime_error("Invalid call to move_forward()!");

    return rhs[parsed_till++];
}
</code></pre>

<p>I'd suggest adding a check in <code>move_forward()</code>, something like the above.</p>

<hr>

<pre><code>    template &lt;std::size_t FIRST_SIZE&gt;
    std::vector&lt;const char*&gt; first_of(
        std::unordered_map&lt;const char*, std::array&lt;const char*, FIRST_SIZE&gt;&gt; first_sets);

    template &lt;std::size_t FIRST_SIZE&gt;
    std::vector&lt;const char*&gt; get_following_items(
        std::unordered_map&lt;const char*, std::array&lt;const char*, FIRST_SIZE&gt;&gt; first_sets);
</code></pre>

<p>I think these two functions can both be <code>const</code>.</p>

<hr>

<p><code>parsed_till + 1 &lt;= rhs.size() - 1</code></p>

<p>Is this guaranteed to be safe? I don't see anything ensuring that <code>rhs</code> isn't empty...</p>

<hr>

<p><code>first_sets[x].begin()</code></p>

<p>Note that <a href="https://en.cppreference.com/w/cpp/container/unordered_map/operator_at" rel="nofollow noreferrer"><code>unordered_map::operator[]</code></a> will create a new entry at <code>x</code> if it doesn't already exist. We should probably use <code>first_sets.find(x)</code> instead.</p>

<hr>

<p>Consider using <code>std::string</code> and <code>std::vector</code> instead of <code>const char*</code> and <code>std::array</code>. This might be slower, but the code will be much simpler (no array template sizes) and easier to use (no string lifetime / ownership issues).</p>

<hr>

<p>Note: I haven't really checked the logic of what this actually does. I don't remember enough about parsers right now.</p>
    </div>