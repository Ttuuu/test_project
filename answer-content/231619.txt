<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Stimulating question;</p>

<p>Both the edit of @dustytrash and the comment of @Ry are giving a great hint.</p>

<p>But before we go there, let's look at this part:</p>

<pre><code>  let newNum = 0;
  let otherNum = 0;
  let indicator = 0;
  while (num &gt; newNum) {
    if (indicator === 0) {
      otherNum = num;
      indicator++;
      continue;
    }
</code></pre>

<p>You are setting up <code>otherNum</code> up within the loop, you only do it once with <code>indicator</code> but you are still performing an <code>if</code> statement every cycle. You can just drop <code>indicator</code> completely and start with the smallest possible value of <code>otherNum</code>:</p>

<pre><code>  let otherNum = num + 1;
  while (num &gt; newNum) {
</code></pre>

<p>Then you can replace this part:</p>

<pre><code>  if (otherNum &gt; num) {
    newNum = otherNum;
  }
</code></pre>

<p>with simply a return statement there:</p>

<pre><code>if (String(num).split("").sort().join("") === String(otherNum).split("").sort().join(""){
        return otherNum;
}
</code></pre>

<p>You would not need <code>newNum</code> at all any more.
Still, to your point in the question, we are looking for more than minor tweaks.</p>

<p>This code basically tries out every integer between <code>num</code> and the solution, that is to say potentially a ton of numbers. For <code>2017</code> -&gt; <code>2071</code> there are 54 tries, but there are only 24 possible combinations with 4 digits (4*3*2*1). From those 24 possible combinations we know that none of the combinations can start with either 0 or 1 because that would give a number smaller than 2017. Which leaves us with only 12 combinations to test.</p>

<p>To go further, if we want to check the next big number of 2341, we know that the next biggest number starts with either 2 possibly, or 3. I could not be 1 since then the number is too small, it could not be 4 because any number starting with 4 is going to be both greater than any number starting with 3.</p>

<p>Finally, we know that if the next biggest number started with '3', we should just apply the remaining digits from low to high (so 3124), there is no way to make a lower number than that.</p>

<p>This is my rewrite, very commented since I am still wrapping my brains around it a bit, but it seems to work. I made one small change for my benefit, the code returns -1 if it cannot find a bigger number with the same digits. </p>

<p>(Which is another issue with your code, it seems that running it for say 531, it will run forever).</p>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>//H4ck: We trust that n is part of the list
function removeNumber(list, n){
  list.splice(list.indexOf(n), 1);
  return list;
}

//Takes a string that looks like a positive integer number 
//and returns the next bigger number formed by the same digits
//Return the same number if we can not find a next bigger number
function nextBiggerString(s){
  
  let digits = s.split('');
  let wip = [...digits]; //Work in progress
    
  //Special case we don't want to deal with, 2 digits
  //Very useful for a recursive approach
  if(digits.length == 2){
    //Don't reverse if we are already at max
    return Math.max(digits.reverse().join(""), s);
  }
  
  //First digit has to be equal or next biggest after target digit to make sense
  const target = digits[0];
  //Only keep valid starting candidates 
  wip = wip.sort().filter(i=&gt;i&gt;target);
  //Very often the solution is option 1, kicking the can down the road
  const option1 = target + nextBiggerString(s.slice(1));
  if(wip.length==0){
    //The first digit was the highest digit of them all, so we can only kick the can
    return option1;
  }else{
    if(option1 != s){
      //Only return option1 is it different from what we started with
      return option1
    } else{
      //Otherwise take the next digit, and sort the rest ascendingly
    	return wip[0] + removeNumber(digits,wip[0]).sort().join('');      
    }   
  }
}

//Takes a positive integer number and returns the next bigger number formed by the same digits
//Return -1 if we cant find a next bigger number
//this uses a stringbased biggerString because this uses an iterative solution
//where for example 034 from 1034 becomes 34, which would return then 143
function nextBigger(n){
  const maybe = nextBiggerString(String(n))*1;
  return maybe == n ? -1 : maybe;
}


console.log(nextBigger(12));
console.log(nextBigger(513));
console.log(nextBigger(531));
console.log(nextBigger(2017));
console.log(nextBigger(2721));</code></pre>
</div>
</div>

    </div>