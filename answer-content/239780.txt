<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>One thing the other answers don't address is your implementation of <code>IEnumerable</code>:</p>

<blockquote>
<pre><code>    public IEnumerator GetEnumerator()
    {
        while (list.Any())
            yield return Pop();
    }
</code></pre>
</blockquote>

<p>An iterator is supposed to iterate over all elements in the collection, but it should never ever change the state of the collection. Your implementation actual pops all the items in the stack, so it is empty afterwards.</p>

<p>Using it like:</p>

<pre><code>var stack = new Stack();

stack.Push(1);
stack.Push(2);
stack.Push(3);

foreach (var item in stack)
{
   Console.PrintLine(item);
}
</code></pre>

<p>will result in an empty stack, and I don't think that should be the case.</p>

<p>If the top of the stack is the head of the list, you can just return the enumerator from the list:</p>

<pre><code>public IEnumerator GetEnumerator()
{
  return list.GetEnumerator();
}
</code></pre>

<hr>

<p>You could make the private field <code>list</code> <code>readonly</code> to secure, that it is never set to <code>null</code> or anything else:</p>

<pre><code>private readonly List&lt;object&gt; list = new List&lt;object&gt;();
</code></pre>

<hr>
    </div>