<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li>Your code is very spaced out. It doesn't need to be.</li>
<li>Consider using industry-standard style by using Egyptian braces for control structures like <code>if</code> and <code>foreach</code>.</li>
<li>Get rid of the <code>$http_host</code> variable; you never use it.</li>
<li>Consider generalising your function to accept any URL instead of pulling <code>REQUEST_URI</code>.</li>
<li>You're kind of reinventing the wheel; PHP has the built-in functions <a href="http://php.net/parse-str"><code>parse_str</code></a> and <a href="http://php.net/http-build-query"><code>http_build_query</code></a> that you can use.</li>
<li>Do you intend to replace existing variables, or just to append them to the request?</li>
</ul>

<p>Here's an example that takes advantage of the built-in functions, and intelligently merges in conflicts. (<a href="http://ideone.com/bqTqhk">ideone</a>)</p>

<pre class="lang-php prettyprint-override"><code>/**
 *  Like array_merge, but will recursively merge array values.
 *
 *  @param array $a1
 *      The array to be merged into.
 *  @param array $a2
 *      The array to merge in. Overwrites $a1, when string keys conflict.
 *      Numeric keys will just be appended.
 *  @return array
 *      The array, post-merge.
 */
function merge_query_var_arrays($a1, $a2) {
    foreach ($a2 as $k2 =&gt; $v2)
        if (is_string($k2))
            $a1[$k2] = isset($a1[$k2]) &amp;&amp; is_array($v2) ? merge_query_var_arrays($a1[$k2], $v2) : $v2;
        else
            $a1[] = $v2;
    return $a1;
}

/**
 *  @param string $query_string
 *      The URL or query string to add to.
 *  @param string|array $vars_to_add
 *      Either a string in var=val&amp;[...] format, or an array.
 *  @return string
 *      The new query string. Duplicate vars are overwritten.
 */
function add_query_vars($query_string, $vars_to_add) {
    if (is_string($vars_to_add))
        parse_str($vars_to_add, $vars_to_add);
    if (preg_match('/.*\?/', $query_string, $match))
        $query_string = preg_replace('/.*\?/', '', $query_string);
    parse_str($query_string, $query_vars);

    $query_vars = merge_query_var_arrays($query_vars, $vars_to_add);
    return @$match[0] . http_build_query($query_vars);
}
</code></pre>
    </div>