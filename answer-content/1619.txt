<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I would focus on <code>BeginAnimationDetail</code> method. </p>

<ul>
<li><p><strong>Variable names</strong>. I would rename at least these variables - <code>tempTrans</code> and <code>trans</code>. <code>tempTrans</code> name doesn't give me any idea what is this variable about. I would name it <code>originalTransform</code> for example - it will be enough to understand why do you add it to another transform and later resetting control's transform to this one. From <code>tempTrans</code> name it is unclear how will you use it.   </p></li>
<li><p>In the beginning of that method you have several variables defined and then for ~60 lines (two <code>switch</code> statements) you're setting some values to those variables. Besides the fact that some part of code is repeated there, I find it very difficult to read when variables are assigned far from the line when they were defined. I would rewrite method in order to avoid it. Algorithm could be:  </p>

<ul>
<li><p>Calculate positions of <code>in</code> and <code>out</code> points. <code>In = {0, 0}</code>, <code>Out</code> depends on <code>Direction</code> and <code>Distance</code>.  </p></li>
<li><p>Decide at which point animation will start and at which point it will finish.</p></li>
<li><p>Create animations and start them.</p></li>
</ul></li>
</ul>

<p>Result (it is around two times shorter): </p>

<pre><code>   protected override void BeginAnimationDetail()
    {
        var inPoint = new Point(0, 0);
        Point outPoint;

        switch (Direction)
        {
            case Direction.Up:
                outPoint = new Point(0, -Distance);
                break;
            case Direction.Down:
                outPoint = new Point(0, Distance);
                break;
            case Direction.Left:
                outPoint = new Point(-Distance, 0);
                break;
            case Direction.Right:
                outPoint = new Point(Distance, 0);
                break;
            default:
                throw new InvalidOperationException();
        }

        Transform originalTransform = Target.RenderTransform;

        var easing = Type == AnimationType.In ? EasingMode.EaseOut : EasingMode.EaseIn;
        double opacityTarget = Type == AnimationType.In ? 1 : 0;
        Point from = Type == AnimationType.In ? outPoint : inPoint;
        Point to = Type == AnimationType.In ? inPoint : outPoint;

        var animatedTranslate = new TranslateTransform(from.X, from.Y);

        var group = new TransformGroup();
        if (originalTransform != null) group.Children.Add(originalTransform);
        group.Children.Add(animatedTranslate);
        Target.RenderTransform = group;

        var animFade = new DoubleAnimation(opacityTarget, Duration) {FillBehavior = OpacityBehavior};
        animFade.Completed += delegate
            {
                Target.RenderTransform = originalTransform;
                OnCompleted();
            };

        Target.BeginAnimation(UIElement.OpacityProperty, animFade);
        animatedTranslate.BeginAnimation(TranslateTransform.XProperty, new DoubleAnimation(to.X, Duration) {EasingFunction = new CubicEase {EasingMode = easing}});
        animatedTranslate.BeginAnimation(TranslateTransform.YProperty, new DoubleAnimation(to.Y, Duration) {EasingFunction = new CubicEase {EasingMode = easing}});
    }
</code></pre>
    </div>