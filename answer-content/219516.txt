<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Vernacular</h2>
<p>Naming is very important and it starts by using the correct terminology.</p>
<p>There is no such thing as a JSON object as you use the term. There are JSON strings and JSON files. There is also a <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON" rel="nofollow noreferrer">JSON</a> built-in Object. It provides an API to help convert between Objects and JSON strings</p>
<p>JavaScript uses <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" rel="nofollow noreferrer">Object</a> to store data in the form of properties.</p>
<p>Objects can be converted to JSON string using <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify" rel="nofollow noreferrer"><code>JSON.stringify</code></a>, or can be created from a JSON string using <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse" rel="nofollow noreferrer"><code>JSON.parse</code></a>. Not all object can be converted to JSON, while all valid JSON strings can be converted to an Object.</p>
<p>Your question title makes no sense...</p>
<blockquote>
<p><em>"Convert nested array of values to a JSON object"</em></p>
</blockquote>
<p><em>"JSON object"</em> is more meaningfully as <a href="https://en.wikipedia.org/wiki/Tree_(data_structure)" rel="nofollow noreferrer">tree</a></p>
<p>"Convert nested array into a tree"</p>
<h2>Style</h2>
<ul>
<li>The variables <code>data</code> and <code>parent</code> should be declared as constants <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const" rel="nofollow noreferrer"><code>const</code></a> as the references they hold do not change.</li>
<li>The JavaScript naming convention is <a href="https://en.wikipedia.org/wiki/Camel_case" rel="nofollow noreferrer">camelCase</a> try to avoid using <a href="https://en.wikipedia.org/wiki/Snake_case" rel="nofollow noreferrer">snake_case</a>. Eg the name <code>top_item</code> should be <code>topItem</code>
The only time that snake_case is used is for some types of constants, in which case we use use SNAKE_UPPER_CASE.</li>
<li>When possible (you don't need the array index) use a <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of" rel="nofollow noreferrer"><code>for...of</code></a> loop rather than a <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for" rel="nofollow noreferrer"><code>for(;;)</code></a> loop</li>
</ul>
<h2>Code logic</h2>
<h3>Functions</h3>
<p>Good code tries to avoid doing too much in one function. Breaking the code into distinct tasks and assigning those tasks to functions make it easier to manage as the complexity starts to grow.</p>
<p>You create the node object in two places. Good source code avoids repetition. The most conman way to avoid repetition is to create functions that do the same or similar things via a call.</p>
<p>You need to search the node to locate where to add new child nodes. The simplest way to search a tree is via a recursive function. Recursive functions exploit the similarity of nested data to reduce the complexity of the code.</p>
<h3>Avoid redundancies</h3>
<p>There is no need to create the <code>data</code> object as a top level parent. The child of <code>data</code>, <code>data.children[0]</code> can serve as the top parent.</p>
<h2>Rewrite</h2>
<p>We can rewrite the code breaking it into smaller functions.</p>
<p>There are 3 functions in the main one</p>
<ol>
<li><code>node</code> creates a new node</li>
<li><code>addNode</code> adds a node to a parent node</li>
<li><code>findNamedNode</code> will find a node with a name. If that node does not exist it returns <code>undefined</code></li>
</ol>
<p>The main body of the function just iterated each array, searching for each node by name. If one is found it moves to the next. If no node is found it creates and adds a new one.</p>
<pre><code>function createTree(structure, topItem = "Top") {
    const node = (name, parent = null) =&gt; ({name, parent, children: []});
    const addNode = (parent, child) =&gt; (parent.children.push(child), child);
    const findNamedNode = (name, parent) =&gt; {
        for (const child of parent.children) {
            if (child.name === name) { return child }
            const found = findNamedNode(name, child);
            if (found) { return found }            
        }
    }
    const TOP_NAME = "Top";
    const top = node(TOP_NAME);
    var current;

    for (const children of structure) {
        current = top;
        for (const name of children) {
            const found = findNamedNode(name, current);
            current = found ? found : addNode(current, node(name, current.name));
        }
    }
    return top;
}
</code></pre>
<p>To make sure it all worked (no typos or idiotic coder intrusion) the snippet run it once on a simple data set.</p>
<p></p><div class="snippet" data-lang="js" data-hide="true" data-console="true" data-babel="false">
<div class="snippet-code snippet-currently-hidden">
<pre class="snippet-code-js lang-js prettyprint-override"><code>logTree(createTree(data()));

function createTree(structure) {
    const node = (name, parent = null) =&gt; ({name, parent, children: []});
    const addNode = (parent, child) =&gt; (parent.children.push(child), child);
    const findNamed = (name, parent) =&gt; {
        for (const child of parent.children) {
            if (child.name === name) { return child }
            const found = findNamed(name, child);
            if (found) { return found }            
        }
    }
    const TOP_NAME = "Top", top = node(TOP_NAME);
    for (const children of structure) {
        let par = top;
        for (const name of children) {
            const found = findNamed(name, par);
            par = found ? found : addNode(par, node(name, par.name));
        }
    }
    return top;
}



















   function data() { return [['A1', 'B1'],['A1', 'B1', 'C1'],['A1', 'B1', 'C2'],['A2', 'B1', 'C1'],['A2', 'B2', 'C2', 'D1'],['A2', 'B2', 'C2', 'D2'],['A2', 'B2', 'C2', 'D3'],['A2', 'B2', 'C2', 'D4'],['A2', 'B2', 'C2', 'D5'],['A2', 'B3', 'C1', 'D1'],['A3', 'B1', 'C1', 'D1'],['A3', 'B1', 'C1', 'D2'], ['A3', 'B1', 'C1', 'D3']]; }





/*=============================================================================*/
// Support code unrelated to answer
function log(textContent) {
    info.appendChild(Object.assign(document.createElement("div"),{textContent}));
}    
function logTree(parent, indent = "", end) {
    const tail = parent.children.length &gt; 0 ? "┬" : "─";
    if(end){
        log(indent + "└──┬─" + "►parent: " + parent.parent);
        log(indent + "   └" + tail + "►name..: " + parent.name);
        indent +="    ";
    } else {
        log(indent + "├──┬─" + "►parent: " + parent.parent);
        log(indent + "│  └" + tail + "►name..: " + parent.name);
        indent +="│   ";
    }
    var idx = 0;
    for (const child of parent.children) {
        logTree(child, indent, (idx++ === parent.children.length -1));
    }
}</code></pre>
<pre class="snippet-code-css lang-css prettyprint-override"><code>body {background:black}
#info {color:#CC0;font-size:smaller;white-space:pre-wrap;}</code></pre>
<pre class="snippet-code-html lang-html prettyprint-override"><code>&lt;code id="info"&gt;&lt;/code&gt;</code></pre>
</div>
</div>

    </div>