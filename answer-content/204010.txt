<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>All in all it looks pretty good.</p>

<p>I have the following remarks:</p>

<p>The name <code>GenericNode&lt;T&gt;</code> is somewhat redundant or "Pleonastic". I would simply call it <code>Node&lt;T&gt;</code> because the type argument indicates the genericness. </p>

<hr>

<p><code>GenericNode&lt;T&gt;.NodeInformation</code> would I simply call <code>Value</code></p>

<hr>

<p>The <code>IsRootNode()</code> can be reduced to:</p>

<pre><code>private static bool IsRootNode(IDbEntityNode dbEntity)
{
  return dbEntity.ParentId == 0;
}
</code></pre>

<hr>

<p><code>CreateTree&lt;T&gt;</code> can be changed to:</p>

<pre><code>public static List&lt;Node&lt;T&gt;&gt; CreateTree&lt;T&gt;(List&lt;T&gt; flatDataObject, Func&lt;T, bool&gt; IsRootNode) where T : IDbEntityNode
{
  var lookup = new Dictionary&lt;int, Node&lt;T&gt;&gt;();
  var rootNodes = new List&lt;Node&lt;T&gt;&gt;();

  foreach (T element in flatDataObject)
  {
    if (lookup.TryGetValue(element.Id, out Node&lt;T&gt; currentNode))
    {
      currentNode.Value = element;
    }
    else
    {
      currentNode = new Node&lt;T&gt;() { Value = element };
      lookup.Add(element.Id, currentNode);
    }

    if (IsRootNode(element))
    {
      rootNodes.Add(currentNode);
    }
    else
    {          
      if (!lookup.TryGetValue(element.ParentId, out Node&lt;T&gt; parentNode))
      {
        parentNode = new Node&lt;T&gt;();
        lookup.Add(element.ParentId, parentNode);
      }
      parentNode.Children.Add(currentNode);
      currentNode.Parent = parentNode;
    }
  }

  return rootNodes;
}
</code></pre>

<p>Here the <code>for</code>-loop is changed to a <code>foreach</code>-loop which makes it a little more readable.</p>

<p>The same thing could be done using LINQ, but be aware that LINQ is not necessarily especially performant:</p>

<pre><code>public static List&lt;Node&lt;T&gt;&gt; CreateTree&lt;T&gt;(List&lt;T&gt; flatDataObject, Func&lt;T, bool&gt; IsRootNode) where T : IDbEntityNode
{
  var roots = flatDataObject.Where(o =&gt; IsRootNode(o)).Select(o =&gt; new Node&lt;T&gt; { Value = o, Parent = null }).ToList();

  var currentParents = roots;

  while (currentParents.Any())
  {
    currentParents = currentParents.SelectMany(p =&gt;
    {
      var children = flatDataObject.Where(o =&gt; o.ParentId == p.Value.Id).Select(o =&gt; new Node&lt;T&gt; { Value = o, Parent = p }).ToArray();
      p.Children.AddRange(children);
      return children;
    }).ToList();
  }

  return roots;
}
</code></pre>

<p>and here's another LINQ approach:</p>

<pre><code>public static List&lt;Node&lt;T&gt;&gt; CreateTree&lt;T&gt;(List&lt;T&gt; flatDataObject, Func&lt;T, bool&gt; IsRootNode) where T : IDbEntityNode
{
  var nodes = flatDataObject.Select(o =&gt; new Node&lt;T&gt; { Value = o }).ToArray();
  List&lt;Node&lt;T&gt;&gt; roots = null;

  foreach (var group in nodes.GroupBy(n =&gt; n.Value.ParentId))
  {
    var parent = nodes.FirstOrDefault(n =&gt; n.Value.Id == group.Key);
    if (parent != null)
    {
      parent.Children.AddRange(group);
      foreach (var node in group)
      {
        node.Parent = parent;
      }
    }
    else
    {
      roots = group.ToList();
    }
  }

  return roots; //nodes.Where(n =&gt; IsRootNode(n.Value)).ToList();
}
</code></pre>
    </div>