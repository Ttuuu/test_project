<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Class Definition</h3>

<p>First of all, I would separate the class definition from the actual use case. The challenge wants you to walk nodes with integer data, but a next challenge may ask you to use a string instead. Don't let the use case stipulate the class definition. Let's make a generic class to make the tree reusable for more scenarios.</p>

<pre><code>public class TernaryTree&lt;T&gt;
{
    public T Data { get; set; }
    public TernaryTree&lt;T&gt; Left { get; set; }
    public TernaryTree&lt;T&gt; Right { get; set; }
    public TernaryTree&lt;T&gt; Middle { get; set; }
}
</code></pre>

<h3>DRY Code</h3>

<p>You then present a method <code>PreOrderTraversal</code> which combines walking the tree with outputting data for this use case. It's a pitty the flow is not split from the use case. We would have to rewrite that flow for every single use case like this. Let's keep it DRY.</p>

<p>We want to have a non specific flow for traversing the tree pre-order, middle, left, then right.</p>

<pre><code>public IEnumerable&lt;TernaryTree&lt;T&gt;&gt; WalkPreOrder()
{
    yield return this;
    foreach (var descendant in Middle?.WalkPreOrder())
    {
        yield return descendant;
    }
    foreach (var descendant in Left?.WalkPreOrder())
    {
        yield return descendant;
    }
    foreach (var descendant in Right?.WalkPreOrder())
    {
        yield return descendant;
    }
}
</code></pre>

<h3>Use Case</h3>

<p>And now we can reuse that method for our use case. This code should not be part of <code>TernaryTree</code> but rather of our unit test, or container class for the challenge:</p>

<pre><code> static void Print(TernaryTree&lt;int&gt; tree)
 {
     foreach (var node in tree.WalkPreOrder())
     {
         Console.WriteLine(node.Data);
     }
 }
</code></pre>

<h3>Unit Tests</h3>

<p>I noticed a comment in your code <code>// manually verify the console output is 1 2 22 3 33 4 5</code>. You can avoid manually checking the outcome by writing <a href="https://docs.microsoft.com/en-us/visualstudio/test/walkthrough-creating-and-running-unit-tests-for-managed-code?view=vs-2019" rel="nofollow noreferrer">unit tests</a>.</p>

<hr>

<h3>What's Next?</h3>

<p>Since you can set any node to any of the child positions, you might introduce cycles. Suppose you set <code>node.Left = node</code>, this would be a cycle because of a self-to-child reference. As a challenge, you should try to figure out how to prevent cycles.</p>

<blockquote>
<pre><code>public TernaryTree Left   { get; set; }
public TernaryTree Right  { get; set; }
public TernaryTree Middle { get; set; }
</code></pre>
</blockquote>
    </div>