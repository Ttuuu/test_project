<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Since nobody answered my question probably because I have not explained what I want here is an answer which satisfied my needs. </p>

<p>I have been wondering in the dark than I have found this <a href="https://stackoverflow.com/questions/3937586/generic-programming-vs-metaprogramming">answer</a> which expanded my knowledge regarding programming.</p>

<p>I have seen some of those methods but I have never taught of the level of abstraction which they can bring.</p>

<p>As the accepted answer states:</p>

<blockquote>
  <p>Programming: Writing a program that creates, transforms, filters,
  aggregates and otherwise manipulates data.</p>
  
  <p>Metaprogramming: Writing a program that creates, transforms, filters,
  aggregates and otherwise manipulates programs.</p>
  
  <p>Generic Programming: Writing a program that creates, transforms,
  filters, aggregates and otherwise manipulates data, but makes only the
  minimum assumptions about the structure of the data, thus maximizing
  reuse across a wide range of data types.</p>
</blockquote>

<p>I saw that I have been typing code which can be easily avoided.</p>

<p>Long story short here is my implementation to the issue I had.</p>

<hr>

<p>My controller is still not there where I want it to be but I have managed to call my actions like this:</p>

<pre><code>   return $this-&gt;baseService-&gt;actionHandler($exercise,
        [
            BaseService::ACT_GET_NAME,
            BaseService::ACT_GET_DESC,
            BaseService::ACT_GET_BASE,
            BaseService::ACT_GET_OBJ
        ],
        $queryParams
    );
</code></pre>

<p>And my service looks something like this:</p>

<pre><code>class BaseService
{

    // vars
    private $domainRepository;
    private $responseBootstrap;
    private $versionDomain;
    private $nameDomain;
    private $tagDomain;
    private $planDomain;
    private $packageDomain;
    private $roundDomain;
    private $auditDomain;
    private $deleteDomain;
    private $languageDomain;


    //actions create
    const ACT_VERSION = 'versionUp';
    const ACT_CREATE = 'createObject';
    const ACT_SINGLE_OBJ = 'returnSingleObject';
    const ACT_CRE_NAME = 'createName';
    const ACT_CRE_DESC = 'createDescription';
    const ACT_CRE_TAG = 'createTags';
    const ACT_CRE_BODY = 'createBody';
    const ACT_CRE_PKG_PLAN = 'createPackagePlan';
    const ACT_CRE_WRK_PLN_DAY = 'createWorkoutPlanDay';
    const ACT_CRE_ROUND = 'createRound';
    const ACT_RELEASE = 'releaseContent';
    const ACT_DELETE = 'delete';

    // actions delete 
    const ACT_ED_NAME = 'editName';
    const ACT_ED_OBJ = 'editObject';
    const ACT_ED_DESC = 'editDescription';
    const ACT_ED_TAG = 'editTag';
    const ACT_ED_ROUND = 'editRound';
    const ACT_ED_BODY = 'editBody';
    const ACT_ED_DAY = 'editDay';
    const ACT_ED_PKG_PLAN = 'editPackagePlan';

    // actions get
    const ACT_GET_NAME = 'getName';
    const ACT_GET_DESC = 'getDescription';
    const ACT_GET_BODY = 'getBody';
    const ACT_GET_OBJ = 'getObjectResponse';
    const ACT_GET_BASE = 'getBase';

    // system actions
    const SYS_ACT_BEG_TRANS = 'begginTransaction';
    const SYS_ACT_COM_TRANS = 'commitTransaction';
    const SYS_ACT_ROLB_TRANS = 'rollbackTransaction';

    private $responseArray = [];



    /**
     * Constructor
     * 
     * @param DomainRepository $domainRepository
     * @param ResponseBootstrap $responseBootstrap
     * @param VersionDomain $versionDomain
     * @param NameDomain $nameDomain
     * @param NameDomain $descriptionDomain
     */

    public function __construct(
        DomainRepository $domainRepository,
        ResponseBootstrap $responseBootstrap,
        VersionDomain $versionDomain,
        NameDomain $nameDomain,
        TagDomain $tagDomain,
        PlanDomain $planDomain,
        PackageDomain $packageDomain,
        RoundDomain $roundDomain,
        AuditDomain $auditDomain,
        DeleteDomain $deleteDomain, 
        LanguageDomain $languageDomain)
    {
        $this-&gt;domainRepository = $domainRepository;
        $this-&gt;responseBootstrap = $responseBootstrap;
        $this-&gt;versionDomain = $versionDomain;
        $this-&gt;nameDomain = $nameDomain;
        $this-&gt;tagDomain = $tagDomain;
        $this-&gt;planDomain = $planDomain;
        $this-&gt;packageDomain = $packageDomain;
        $this-&gt;roundDomain = $roundDomain;
        $this-&gt;auditDomain = $auditDomain;
        $this-&gt;deleteDomain = $deleteDomain;
        $this-&gt;languageDomain = $languageDomain;
    }


    /**
     * Action Handler
     * 
     * @param object $object
     * @param array $actions
     * @return object
     */
    public function actionHandler(object $object, array $actions = [], QueryParams $queryParams = null):object
    {
        try{
            // beggin transaction
            $this-&gt;domainRepository-&gt;begginTransaction();

            foreach($actions as $action){
                // on create return object
                if($action == BaseService::ACT_SINGLE_OBJ){
                    // commit transaction
                    $this-&gt;domainRepository-&gt;commitTransaction(); 
                    return $this-&gt;{$action}($object);
                }
                // on get return object
                else if($action == BaseService::ACT_GET_OBJ){
                    // commit transaction
                    $this-&gt;domainRepository-&gt;commitTransaction();

                    return $this-&gt;{$action}();
                }else{
                    $this-&gt;{$action}($object, $queryParams);
                }
            } 
        }catch(\PDOException $e){
            // handle rollback of sql action
            $this-&gt;domainRepository-&gt;rollbackTransaction($e);
        }
    }


    /*********************************************************************************************/
    /***********************************         Executors       *********************************/
    /*********************************************************************************************/


    /**
     * Version Up
     * 
     * @param object $object
     */
    private function versionUp(object $object):void
    {
        // version up
        $this-&gt;versionDomain-&gt;handle($object);
    }

    ...........
</code></pre>

<p>The <strong>BaseService</strong> class has all the actions and it calls the DAO layer which is flexible enough to construct the query I need.</p>

<p>I need to add a caching layer to it and a few more things but this is the answer which I have been asking for(at least I think so if somebody else had a better version of it feel free to post your answer.</p>
    </div>