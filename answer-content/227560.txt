<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>For a start, the code is missing several items of whitespace which PEP8 says it should have. There are automated PEP8 checkers which will tell you more.</p>

<hr>

<blockquote>
<pre><code>def _121_(N): #N - number of turns
</code></pre>
</blockquote>

<p>The Pythonic way to document the arguments is with a docstring.</p>

<hr>

<blockquote>
<pre><code>    TOTAL_PROBABILITY = 0
</code></pre>
</blockquote>

<p>This use of upper case is also not conventional.</p>

<hr>

<blockquote>
<pre><code>    #Calclulate min number of blue discs you need to pick in order to win the game
    if N % 2 == 1: minimum_picks = int(math.ceil(N/2))
    else: minimum_picks = int((N/2) +1)
</code></pre>
</blockquote>

<p>This can be simplified. The first line says that if <span class="math-container">\$n = 2k + 1\$</span> then we want <span class="math-container">\$k+1\$</span>; the second line says that if <span class="math-container">\$n = 2k\$</span> then we want <span class="math-container">\$k+1\$</span>. So</p>

<pre><code>    minimum_picks = 1 + N // 2
</code></pre>

<hr>

<blockquote>
<pre><code>    #Calculate probabilities of all variations
    indeces_chain = set(range(N))
</code></pre>
</blockquote>

<p>The plural of <em>index</em> is <em>indexes</em> or <em>indices</em>, depending on the context. But spelling aside, I'm not sure what this name means. To me, <em>chain</em> implies ordering, and a <code>set</code> is unordered.</p>

<hr>

<blockquote>
<pre><code>    for V in range(minimum_picks,N+1):
        blue_indeces = list(combinations(indeces_chain,V))
        for M in blue_indeces:
            cumul = 1
            for blue_prob in M:
                cumul*= blue[blue_prob]
            for red_prob in indeces_chain.difference(set(M)):
                cumul*=red[red_prob]
</code></pre>
</blockquote>

<p>I think it would be simpler to turn the combination into a <code>set</code> and then iterate over the indexes:</p>

<pre><code>blue_indexes = set(combinations(range(N), V))
cumul = 1
for index in range(N):
    cumul *= blue[index] if index in blue_indexes else red[index]
</code></pre>

<hr>

<p>Also, although this finishes inside the minute, it's not very efficient. Specifically, the number of combinations is exponential in the input. I would encourage you as an exercise to try to find a way of solving the problem which is quadratic in the input.</p>
    </div>