<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Wow! What a project!</strong></p>

<p>I had tons of fun working on this! There are a lot of things to like about your code. Instead of going over the general improvements I made, I'm going to explain each part that I changed and why I changed it. </p>

<p><em>Note: I did not touch the</em> <code>threading</code> * and other hunger behavior because I am not confident enough with my ability to improve that. Another answer can possible touch on that.*</p>

<p>Here we go!</p>

<p><strong>Import Statements</strong></p>

<pre><code>import random; import time; import threading; import sys; import psutil; from colorama import init; from termcolor import colored
</code></pre>

<p>According to <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">PEP-8</a>, this is unconventional. All imports should be on their own line, and ordered alphabetically, with the <code>from .. import ..</code> statements being ordered after.</p>

<pre><code>import psutil
import random
import sys
import time
import threading
from colorama import init
from termcolor import colored
</code></pre>

<p><strong>Job Selection</strong></p>

<p>Your method to choose a job was a whole <strong>332</strong> lines long! That's a lot of code to just select what your profession is. Using a simple <a href="https://www.w3schools.com/python/python_dictionaries.asp" rel="nofollow noreferrer">dict</a>, we can use the names of the jobs as <code>values</code>, and have each <code>abcde</code> option as the <code>key</code>. Using this method, I was about to shrink the method down to <strong>23</strong> lines, <strong>309</strong> lines shorter!</p>

<p><strong>Global Variables</strong></p>

<p>Q: <em>Should you use global variables in your program?</em></p>

<p>A: <strong>90% of the time, <em>NO.</em></strong></p>

<p>It's anyones guess what the right answer is. Using global variables has a plethora of nasty things that can affect your program. <a href="http://wiki.c2.com/?GlobalVariablesAreBad" rel="nofollow noreferrer">This document</a> can explain the negative effects of using global variables better than I ever will be.</p>

<p><strong>Method Docstrings</strong></p>

<p>You should include docstrings on the first line of every method you write. This will help documentation identify what your method is supposed to do.</p>

<p><strong>Variable/Method Naming</strong></p>

<p>You should use <code>snake_case</code> and not <code>camelCase</code> or <code>nonexistentcase</code> when naming variables in python.</p>

<p><strong>Main Guard</strong></p>

<p>When running code outside a method/class, it's always good to use a main guard. This is a <a href="https://stackoverflow.com/questions/19578308/what-is-the-benefit-of-using-main-method-in-python">StackOverflow question</a> that helps explain the benefit/use of the guard. An excerpt from the accepted answer:</p>

<blockquote>
  <p>Having a main guard clause in a module allows you to both run code in the module directly and also use procedures and classes in the module from other modules. Without the main guard clause, the code to start your script would get run when the module is imported.</p>
</blockquote>

<p><strong>Objects</strong></p>

<p>In your code, you have variables like so:</p>

<pre><code>cash = 100
Bank_balance = 0
hunger = 100
inventory = []
Skill = 0
count = 0
job_position = []
</code></pre>

<p>This code is just screaming to be organized into an object. Having classes, especially in this context of a simulator, can really help the flow of the program, and help you remember what belongs to what. I put the above code into a player class:</p>

<pre><code>class Player:
    """ Player Class """

    def __init__(self, name):
        self.name = name
        self.bank_account = BankAccount(self)
        self.cash = 100
        self.hunger = 100
        self.job = None
        self.skill = 0
        self.inventory = []
        self.pin = 0

        #Used to calculate bonuses for Teacher, AA, and HR
        self.fulltime_days_worked = 0
</code></pre>

<p>Now, you have all that code neatly organized into one place.</p>

<p>I also want to touch up on the job selection a bit more. You have tons of if statements and nested if statements explaining and collecting input about if the player wanted to choose that job. You can store all the information about the job into an object as well. Using this method, I was able to neatly organize a <code>list</code> of jobs that would be available for the player to select:</p>

<pre><code>class Job:
    """ Job Class """

    def __init__(
            self,
            title,
            pay,
            skill_required,
            working_hours,
            hunger_decrease,
            skill_increase):

        self.title = title
        self.pay = pay
        self.skill_required = skill_required
        self.working_hours = working_hours
        self.hunger_decrease = hunger_decrease
        self.skill_increase = skill_increase

    def __str__(self):
        return f"""
            Title: {self.title}
            Pay: ${self.pay}
            Skill Required: {self.skill_required}
            Hours Per Day Working: {self.working_hours}
            Hunger Decrease Per Day: {self.hunger_decrease}
            Skill Increase Per Day: {self.skill_increase}
        """
</code></pre>

<p>Finally, the banking portion of the program can also be organized into an object, storing it's own <code>account_balance</code>, and PIN number (I saw your future plans to implement a PIN and decided to go for it!).</p>

<p><strong>Shop</strong></p>

<p>I could have put this into its own <code>Shop</code> class, and almost did, but I relented. Since the user is really only interacting with the shop through one means, I decided that a method would be good enough. Instead of using <code>tuples</code>, I changed it to a <code>dict</code> again, so I could easily lookup the price of the item with its corresponding name.</p>

<p><strong>Main Menu</strong></p>

<p>Awesome ASCII title! I stored the methods in a <code>dict</code> as well, so instead of having multiple <code>if/elif</code> spam, I could simply match the input with the key in the <code>dict</code>, and call that method.</p>

<p><strong>count_work =&gt; determine_bonus</strong></p>

<p>I changed the method name to be more resemblant of what the method is actually doing. Since</p>

<pre><code>count_work(12)
count_work(24)
count_work(36)
count_work(48)
count_work(60)
count_work(72)
</code></pre>

<p>is just checking every 12 days, you can use the <a href="https://stackoverflow.com/questions/17524673/understanding-the-modulus-operator">moludo</a> operator to check if it's divisible by 12, like so:</p>

<pre><code># Changed `count` to `fulltime_days_worked` because its more descriptive and
# that's essentially what `count` was counting
if (player.fulltime_days_worked % 12) == 0:
</code></pre>

<p>Below is the refactored code for you. Thank you for posting this, I really had a blast reviewing and rewriting it!</p>

<p><em>Note: If anything doesn't work the way it is supposed to, mention me in a comment and I'll fix it (obviously not the hunger/threading. Because I didn't touch it, it is not included in the final reviewed code. I'll leave it up to you to implement it.). I went through tons of tests through each and every method, and everything was fine, but something could always fall through the cracks</em></p>

<p><strong>Refactored Code</strong></p>

<pre><code>""" Import Statements"""
import random
import time
import threading
import sys
import psutil
from colorama import init
from termcolor import colored

def main_menu():
    """ Main Menu of the game """
    options = {
        "a": player.bank_account.interface,
        "b": store,
        "c": work,
        "d": your_stuff,
        "e": more_info,
        "f": quit
    }
    print("Welcome To the game!")
    print("="*15)
    time.sleep(1)
    main = input("Where would you like to go?\nA) The Bank\nB) Store\nC) Work\nD) Inventory\nE) More information\nF) Exit\n&gt;&gt;&gt;").lower().strip()

    if main in list(options.keys()):
        options[main]()
    else:
        print("="*15)
        print("Invalid input. Try again!")
        print("="*15)
        main_menu()

class Job:
    """ Job Class """

    def __init__(
            self,
            title,
            pay,
            skill_required,
            working_hours,
            hunger_decrease,
            skill_increase):

        self.title = title
        self.pay = pay
        self.skill_required = skill_required
        self.working_hours = working_hours
        self.hunger_decrease = hunger_decrease
        self.skill_increase = skill_increase

    def __str__(self):
        return f"""
            Title: {self.title}
            Pay: ${self.pay}
            Skill Required: {self.skill_required}
            Hours Per Day Working: {self.working_hours}
            Hunger Decrease Per Day: {self.hunger_decrease}
            Skill Increase Per Day: {self.skill_increase}
        """

class Player:
    """ Player Class """

    def __init__(self, name):
        self.name = name
        self.bank_account = BankAccount(self)
        self.cash = 100
        self.hunger = 100
        self.job = None
        self.skill = 0
        self.inventory = []
        self.pin = 0

        #Used to calculate bonuses for Teacher, AA, and HR
        self.fulltime_days_worked = 0

class BankAccount:
    """ Bank Class """

    def __init__(self, user):
        self.user = user
        self.options = {
            "a": self.deposit,
            "b": self.withdraw,
            "c": self.check_balance,
            "d": main_menu
        }
        self.account_balance = 0.00

    def interface(self):
        """ Main interface for the bank """
        print("="*15)
        print(f"Welcome to Omnibank {self.user.name}.")
        print("="*15)
        time.sleep(.01)

        #Check if user has set a pin
        if player.pin != 0:

            login = input("Enter your PIN: ")

            if login == player.pin:

                while True:
                    option = input("What will you like to do?\nA) Deposit\nB) Withdraw\nC) Check Balance\nD) Mainmenu\n&gt;&gt;&gt;").lower().strip()
                    print("="*15)
                    if option in list(self.options.keys()):
                        self.options[option]()

            print(colored("Invalid PIN!", "red"))
            self.interface()

        #Prompt user to set a pin
        pin = input("Enter a four digit pin for future logins: ")
        if len(pin) != 4:
            print(colored("That was an invalid pin length! Enter again!", "red"))
            self.interface()
        player.pin = pin
        print(colored("Your personal pin has been set up!", "green"))
        self.interface()

    def deposit(self):
        """ Bank Deposit Method """
        print(f"Your current cash is ${player.cash}")
        amount = input("How much would you like to deposit?")
        if float(amount) &gt; self.user.cash:
            print(colored("You don't have that much money to deposit!", "red"))
            self.interface()
        self.account_balance += float(amount)
        self.user.cash -= float(amount)
        print(colored(f"Your account balance is now ${self.account_balance}!", "green"))
        print(colored(f"Your current cash is now ${self.user.cash}!", "green"))
        self.interface()

    def withdraw(self):
        """ Bank Withdraw Method """
        print(f"Your current account balance is ${player.bank_account.account_balance}")
        amount = input("How much would you like to withdraw?")
        if float(amount) &gt; self.account_balance:
            print(colored("You don't have that much money to withdraw!", "red"))
            self.interface()
        self.account_balance -= float(amount)
        self.user.cash += float(amount)
        print(colored(f"Your bank balance is now ${self.account_balance}!", "green"))
        print(colored(f"Your current cash is now ${self.user.cash}!", "green"))
        self.interface()

    def check_balance(self):
        """ Bank Check Balance Method """
        print(colored(f"Your current balance is ${self.account_balance}", "green"))

def store():
    """ Method for purchasing items at the store """

    print("Welcome to David's Grocery")
    print("="*15)

    items = {
        'eggs': 3.16,
        'mealdeal': 8,
        'chicken': 4.38,
        'milk': 2.60,
        'tomatoes': 4,
        'cheese': 3,
        'apples': 2,
        'potatoes': 4,
        'beer': 3.37,
        'wine': 15,
        'coca-cola': 1.9
    }

    print("This is our menu! Take a look around!")
    print(f"""

            Wine ..... $15.00 ...(+8 hunger)
            Chicken.... $4.38 ...(+9 hunger)
            Coca-Cola ...... $1.92 ...(+4 hunger)
            Milk ..... $2.60 ...(+2 hunger)
            Beer ..... $3.37 ...(+5 hunger)
            Tomatoes ....... $4 ...(+1 hunger)
            MealDeal .... $8.00 ...(+10 hunger)
            Cheese ..... $3.00 ...(+4 hunger)
            Potatoes ...... $4 ...(+3 hunger)
            Apples ....... $2 ...(+2 hunger)
            Eggs ..... $3.16 ... (+3 hunger)

    """)

    buy = input("Would you like to buy something? (Y/N)")

    if buy.lower() == "y":
        item = input("Enter item to buy: ").lower()
        if item in list(items.keys()):
            cost = items[item]
            if player.cash &lt; cost:
                print(colored(f"Not enough money to buy {item}!", "red"))
                store()
            print(colored(f"{item} bought for ${cost}", "green"))
            player.cash -= cost
            player.inventory.append(item)
            store()
        print(colored("Invalid option, choose again!", "red"))
        store()
    main_menu()

def more_info():
    """Displays more information about the game """

    print("="*15)
    print(colored(f"Hey {player.name}, Your objective is to survive as long as possible. You start off with $100 cash and 100 hunger, Go to inventory to see your hunger level and inventory and more!", 'green'))
    print("="*15)
    print(colored("Your hunger will decrease every 3 minutes by 10 hunger. So make sure to eat!", 'green'))
    print("="*15)
    print(colored("You can't eat something that will increase your hunger past 100.", 'green'))
    print("="*15)
    print(colored("You can work to have an income and survive. You can start of as a Cashier and gradually get better paying jobs but each job require a certain amount of skill to get the job! when you recieve your check it will automatically be taxed!", 'green'))
    print("="*15)
    print(colored("Tax rate is 6.99%!", 'green'))
    print("="*15)
    print(colored("More stuff to come soon!", 'red'))
    print("="*15)
    main_menu()

def select_job():
    """ ORIGIONAL METHOD WAS 332 LINES LONG!!!!!!!!!! """
    job_titles = {
        "a": "Cashier",
        "b": "Waitress",
        "c": "Teacher",
        "d": "Administrative Assistant",
        "e": "HR Manager"
    }
    selected_job = input("Select a job\n\nA) Cashier\nB) Waitress\nC) Teacher\nD) Administrative assistant\nE) HR Manager\n&gt;&gt;&gt;").lower().strip()
    for job in get_jobs():
        if job.title == job_titles[selected_job]:
            print(job)
            interested = input("Would you like this job? (Y/N)").lower()
            if interested == "y":
                if player.skill &gt;= job.skill_required:
                    print(colored(f"You have successfully taken the job of {job.title}!", "green"))
                    player.job = job
                    main_menu()
                print(colored("You don't have enough skill for this job!", "red"))
            select_job()
    print(colored("That is an invalid option! Select again!", "red"))
    select_job()
    main_menu()

def your_stuff():
    """ Prints all of the players attributes """
    print(f"""

        Name: {player.name}
        Hunger Level: {player.hunger}
        Job: {player.job}
        Skill: {player.skill}
        Cash: {player.cash}
        Money In Bank Account: {player.bank_account.account_balance}
    """)
    print("Inventory")
    for item in player.inventory:
        print(f"\t{item}")

def work():
    """ Traversing through another work day """
    if player.job is None:
        select_job()

    switch_jobs = input("Do you want to switch jobs?").lower()
    if switch_jobs == "y":
        select_job()

    work_today = input("Do you want to work today? (Y/N)").lower()
    if work_today == "y":

        if player.job.title == "Cashier":
            print(colored("You worked hard today! $89 Has Been deposited to your bank account! -10 hunger, +0.5 skills!", "green"))
            tax = round(96 * 0.0699)
            player.bank_account.account_balance += (96 - tax)
            player.hunger -= 10
            player.skill += 0.5
            work()

        if player.job.title == "Waitress":
            tip = random.randint(0, 100)
            print(colored(f"You worked hard today! $67 Has Been deposited to your bank account. Your Tip for today is: ${tip}.  -10 hunger, +1.5 skills!", "green"))
            tax = round(72 * 0.0699)
            player.bank_account.account_balance += (72 + tip - tax)
            player.hunger -= 10
            player.skill += 1.5
            work()

        if player.job.title == "Teacher":
            print(colored(f"You worked hard today! $120 Has Been deposited to your bank account. -10 hunger, +5 skill!", "green"))
            tax = round(120 * 0.0699)
            player.bank_account.account_balance += (120 - tax)
            player.hunger -= 10
            player.skill += 5
            player.fulltime_days_worked += 1
            determine_bonus()
            work()

        if player.job.title == "Administrative Assistant":
            print(colored(f"You worked hard today! $176 Has Been deposited to your bank account. -12 hunger, +10 skill!", "green"))
            tax = round(176 * 0.0699)
            player.bank_account.account_balance += 176 - tax
            player.hunger -= 12
            player.skill += 10
            player.fulltime_days_worked += 1
            determine_bonus()
            work()

        if player.job.title == "HR Manager":
            print(colored(f"You worked hard today! $210 Has Been deposited to your bank account. -15 hunger, +20 skill!", "green"))
            print("="*15)
            tax = round(210 * 0.0699)
            player.bank_account.account_balance += 210 - tax
            player.hunger -= 15
            player.skill += 20
            player.fulltime_days_worked += 1
            determine_bonus()
            work()
    main_menu()

def determine_bonus():
    """ Used to determine bonuses """
    if (player.fulltime_days_worked % 12) == 0:
        bonus = random.randint(500, 3000)
        print(colored(f"You got a bonus of ${bonus}.", 'green'))
        player.bank_account.account_balance += bonus

def get_jobs():
    """ This method was a pain in my butt!!!!!! """
    jobs = []
    jobs.append(Job("Cashier", 12, 0, 8, 10, 0.5))
    jobs.append(Job("Waitress", 9, 10, 8, 10, 1.5))
    jobs.append(Job("Teacher", 15, 50, 8, 10, 5))
    jobs.append(Job("Administrative Assistant", 22, 250, 8, 12, 10))
    jobs.append(Job("HR Manager", 35, 1500, 6, 15, 20))
    return jobs

def show_slower(str):
    """ Prints letter by letter """
    for char in str:
        time.sleep(0.1)
        sys.stdout.write(char)
        sys.stdout.flush()


if __name__ == '__main__':
    print(colored("""


       M      M                                         ega     ga
      mMe   imMe                                      imMega     g
     imMeg SimMe    mMegaS     aSi Meg     egaSim    SimM            mM gaS  Meg
     imMegaSimMe   imM  aSi  egaSimMe     MegaSim    SimMe     Meg  imMegaSimMega
    SimMegaS mMe  SimM gaSi  ega  mMe        aSim     imMega   Meg  imM  aSi  ega
    Sim  ga  mMe  SimMegaSi  ega  mMe    mMegaSim      mMegaS  Meg  imM  aSi  ega
    Sim  ga  mMe aSim       MegaSimMe   imMe aSim       MegaS mMeg SimM gaSi  ega
   aSim      mMegaSimM gaSi  egaSimMe  SimMe aSim  gaSimMega  mMeg Sim  gaSi  egaS
   aSim      mMeg SimMegaSi      imMe  SimMegaSim  gaSimMega imMegaSim  gaSi  egaS
  gaSim      mMeg  imMegaS  Me  SimMe   imMegaSim  gaSimMe   imMegaSim  gaSi  egaS
                           mMegaSimM
                           mMegaSim

                                              """, 'yellow'))
    init() #colorama
    shutdown = psutil.Process() #psutil
    name = input("Enter your name! ")
    player = Player(name)

    time.sleep(1)
    show_slower("Loading............\n")
    time.sleep(1)
    show_slower("Initializing.............\n")
    time.sleep(1)
    show_slower("Done\n")

    main_menu()
</code></pre>
    </div>