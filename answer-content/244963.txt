<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ol>
<li>Put this in a function.</li>
<li>Make the input a 1d array.</li>
</ol>
<pre class="lang-py prettyprint-override"><code>def maximum(prices):
    max_array = np.zeros(prices.size - 5)
    for index, elem in np.ndenumerate(prices[:-5]):
        local_max = 0.0
        for i in range(1,6,1):
            price_return = prices[index[0] + i] / elem
            local_max = max(local_max, price_return)
        max_array[index] = local_max
    return np.amax(max_array)
</code></pre>
<ol start="3">
<li>Flip the enumeration around.</li>
</ol>
<pre class="lang-py prettyprint-override"><code>def maximum(prices):
    max_array = np.zeros(5)
    for i in range(1, 6):
        local_max = 0.0
        for index, elem in np.ndenumerate(prices[:-5]):
            price_return = prices[index[0] + i] / elem
            local_max = max(local_max, price_return)
        max_array[i - 1,] = local_max
    return np.amax(max_array)
</code></pre>
<ol start="4">
<li>Use numpy to slice the array. And then use <code>.max</code>.</li>
</ol>
<pre class="lang-py prettyprint-override"><code>def maximum(prices):
    size, = prices.shape
    size -= 4
    max_array = np.zeros(5)
    for i in range(5):
        max_array[i,] = (prices[i:size + i] / prices[:size]).max()
    return np.amax(max_array)
</code></pre>
<ol start="5">
<li>Use <code>max</code> and a comprehension.</li>
</ol>
<p>Now the inner loop is vectorized and it's a lot easier to see what it's doing.</p>
<pre class="lang-py prettyprint-override"><code>def maximum(prices, windows=5):
    size, = prices.shape
    size -= windows - 1
    return max(
        (prices[i:size + i] / prices[:size]).max()
        for i in range(windows)
    )
</code></pre>
    </div>