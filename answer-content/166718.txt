<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Two things caught my eye.</p>

<p>1) Looking at this:</p>

<pre><code>process_bit:
    shr     eax,    0x1     ; Kick the right-most bit out ...
    jc      add_one         ; If it was a 1 jump to 'add_one' ... 
    mov     ebx,    0x0     ;  ... otherwise write a 0 ...
    jmp     now_rotate      
add_one:
    mov     ebx,    0x1
now_rotate:
    rol     ebx,    cl      ; The right-most bit has been fresh written. Now move it n-positions to the left.
</code></pre>

<p>When you want to zero a register, normally you would do that with <code>xor ebx, ebx</code> instead of <code>mov ebx, 0x0</code> since this is slightly smaller/faster.  Also, what about something like this:</p>

<pre><code>process_bit:
    xor     ebx,    ebx     ; Start at zero
    shr     eax,    0x1     ; Kick the right-most bit out ...
    adc     ebx,    0x0     ; Add the shifted bit to ebx
    rol     ebx,    cl      ; The right-most bit has been fresh written. Now move it n-positions to the left.
</code></pre>

<p>2) Then there's this:</p>

<pre><code>mov     eax,    edx
call    print_eax_binary
</code></pre>

<p>If you know that you are going to need a specific value in eax, why not structure your code such that it ends up there in the first place?  If appears that if you swap the usage of <code>eax</code> and <code>edx</code>, you can avoid this move.</p>

<p>PS Regarding Roland's somewhat cryptic remark regarding <code>ch</code>:</p>

<blockquote class="spoiler">
  <p> If <code>ch</code> isn't zero (for example if it is 7), when you do <code>mov cl, 0x1f</code>, then the <code>ecx</code> register will contain 0x71f.  This becomes a problem, since <code>loop</code> uses <code>ecx</code>, not <code>cl</code>.</p>
</blockquote>
    </div>