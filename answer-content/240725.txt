<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>As it stands, the algorithm posted by <strong>@Agguro</strong> <strong>would not match <code>ABC</code> against <code>AABC</code></strong>, as it always "eats up" at least substring length characters from the main string. This can be corrected as below.</p>

<pre><code>section .data

    ; the string
    string:       db "this is the string we are searching in"
    stringlength: equ $-string

    ; the substring
    substring:    db "string we are searching"
    substringlength: equ $-substring        

    mov     rsi, string                    ; pointer to string in RSI
    mov     rdx, stringlength              ; length of string in RDX

    ; Subtract substring length to prevent looking beyond the string length,
    ; We can also check here if the substring fits in the string.
    ; If not we never can find the substring in the string

    sub     rdx, substringlength
    cmp     rdx, 0
    jl      .@@notfound

    ; enter the compare loop
.@@repeat:    
    mov     rdi, substring                 ; pointer to substring in RDI
    mov     rcx, substringlength           ; length substring in RCX (loop counter)
    cld
    mov         rax,rsi                    ; save rsi
    repe        cmpsb                      ; compare string at rdi with length rcx with string in rsi
    jz          .@@found                   ; if zero flag then substring is found within string, exit loop

    ; substring is not found yet, put substring pointer at begin of substring

    inc         rax                        ; increment rax to proceed one character in string
    mov         rsi,rax                    ; restore the modified rsi value from rax
    dec         rdx                        ; decrement length of string
    and         rdx, rdx                   ; check remaining length to search in
    jnz         .@@repeat                  ; remaining length non-zero, repeat

.@@notfound:
    ; else, substring wasn't found, exit loop
    ; substring not found actions

.@@found:
    ; substring found actions
    ; rsi has address to start of substring+the length of the substring
    ; subtracting the start of the string we can calculate the offset (or index) in the string where substring starts

    sub         rsi, substringlength
</code></pre>

<p>Not directly related: also, depending on the use cases for the function, comparing <code>rdx</code> (the remaining string length) with <code>substringlength</code> might be worth it as an optimization just above line <code>and rdx, rdx</code>. This is only worth it if both the string and substring are very long, but close in length. It would on average slow down the match if the string is very long, but the substring - very short.</p>
    </div>