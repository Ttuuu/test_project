<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your function signature is misleading. You give almost the same than the std version. It's not obvious that the return type isn't the result.</p>

<pre><code>int _stoi(std::string str, int* p_value)
 // std version, where size_t is an unsigned int
int stoi( const std::string&amp; str, std::size_t* pos = 0, int base = 10 );
</code></pre>

<p>So both can be called from a <code>string</code> and a <code>ptr to an (unsigned) integer</code> and return an <code>integer</code>.</p>

<ul>
<li>identifiers beginning by an underscore are reserved. If you want to avoid name collisions, you can (and should) enclose your function in a namespace.</li>
<li>Don't pass your <code>string</code> by value, instead get a <code>const&amp;</code> or a <code>string_view</code></li>
<li>Instead of magical return values, you can return an enum.</li>
<li>Or, even better, you can, maybe, wrap the return value in a sum type like <code>expected</code> or <code>optional</code>.</li>
<li>Here, if user don't want exceptions, he still have to pay for it, you are just simply hiding them. Your code isn't "exception-free", but "exception-safe".</li>
<li>It would be better if internally you do the work in a exception-safe way. So, people who deactivated exceptions can still use your function. </li>
<li>Which advantage versus <code>std::from_chars</code>?</li>
</ul>
    </div>