<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>First issue</strong></p>

<p>You're calling the weather API on every <code>OnBindViewHolder()</code>, which means it will get called for each visible row, and on new rows entering, or re-entering the screen. So if you scroll the list a few times you will call the API for each city more than once.</p>

<p><strong>Second issue</strong></p>

<p>Your Adapter shouldn't make any API calls. In fact, it should only concern itself about displaying cities.</p>

<p><strong>How can we solve this?</strong></p>

<p>Your <code>MyCity</code> model should provide all information necessary to display the weather.</p>

<p>So let's add city name and temperature to your model.</p>

<p>Next we create a service which iterates over the cities and calls the API once for each city. This can be a regular Android <code>Service</code> for example, or something more advanced like <code>WorkManager</code>.</p>

<p>This logic will be triggered from your ViewModel.</p>

<p>Depending on how frequent you want the weather updates to be, you can call this each time you open the screen, or on certain intervals.</p>

<p>In all cases, once you get the response back, you need to persist the new data to your database.</p>

<p>Since you are observing the data, the adapter will be automatically notified of changes.</p>

<p><strong>Note:</strong> when retrieving the cities to call the API you shouldn't use <code>LiveData</code> because when you update the city it will re-trigger the <code>LiveData</code> and you find yourself in an endless loop.</p>

<p>Your Dao will look something like this:</p>

<pre><code>@Dao
public interface CitiesDao {

    @Query("SELECT * FROM cities")
    List&lt;MyCity&gt; getCities();

    @Query("SELECT * FROM cities")
    LiveData&lt;List&lt;MyCity&gt;&gt; observeCities();

    // etc

}
</code></pre>

<p>This is just the starting point.</p>

<p>More things you can consider:</p>

<ul>
<li>Use different models for data and UI (e.g. MyCity and MyCityUiModel)</li>
<li>Use the Repository pattern</li>
</ul>
    </div>