<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>N.B. I thought I'd answer the original test question myself in F# as a Kata, so this is a functional suggestion based on what I found.</p>

<p>I'll only talk about the versatility part of the solution, others have touched on using Linq and I think your code is already quite readable.</p>

<hr>

<p>If you can divide the original requirement into a number of smaller rules, where each rule has the same "Shape".</p>

<p>This "Shape" is <em>take a sequence of characters and return a Boolean</em>.</p>

<p>So in C# we'd have: </p>

<pre><code>bool LengthIsValid(string s) =&gt; s.Length &gt;= 6 &amp;&amp; s.Length &lt;= 16;

bool Rule2(string s) =&gt; true; //e.g must start with Letter, or doesn't with with '-'
</code></pre>

<p>Now that we have each rule in the same "Shape", you can create a composite set of rules and validate them all together:</p>

<pre><code>var rules = new List&lt;Func&lt;string, bool&gt;&gt; 
{ 
    LengthIsValid, 
    Rule2,
    //etc.
};
</code></pre>

<p>Checking the rules is then just a matter of applying those rules to the input string:</p>

<pre><code>bool CheckAllRules (string s) =&gt;
    rules
    .All(rule =&gt; rule(s));
</code></pre>

<p>With this approach you get versatility from been able to create any number of composition of rules.</p>

<p>e.g. Creating Rules where the powerUsers don't need to check the length (I can be <code>root</code>).</p>

<pre><code>IEnumerable&lt;Func&lt;string, bool&gt;&gt; CreateRules(bool powerUser)
{
    if (!powerUser)
        yield return LengthIsValid;

    yield return Rule2;
}
</code></pre>

<p><sub>
The F# version if you're interested in <a href="https://gist.github.com/xdaDaveShaw/a21142852d1bf9aff772b07e2523a946" rel="nofollow noreferrer">here</a>
</sub></p>
    </div>