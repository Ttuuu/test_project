<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Yes, there is a concise way to do this, even without a recursive function and that is to use the built-in <a href="https://docs.python.org/3/library/functions.html#min" rel="nofollow noreferrer"><code>min</code></a> function with a custom <code>key</code>:</p>

<pre><code>from operator import itemgetter

def min_index(x):
    return min(enumerate(x), key=itemgetter(1))[0]
</code></pre>

<p>The <a href="https://docs.python.org/3/library/functions.html#enumerate" rel="nofollow noreferrer"><code>enumerate</code></a> function adds the indices and the <a href="https://docs.python.org/3/library/operator.html#operator.itemgetter" rel="nofollow noreferrer"><code>operator.itemgetter</code></a> ensures that <code>min</code> cares only about the actual value (here it is equivalent to <code>lambda t: t[1]</code>). The <code>[0]</code> at the end gets the index from the minimum tuple.</p>

<p>The usage is almost the same as your function, it returns the value so you have to  print it yourself. This is actually good practice because this way you can use the output of the function for other things afterwards.</p>

<pre><code>if __name__ == "__main__":
    print(min_index([3,2,4,0,1,5,-6,2,5]))
    # 6
</code></pre>

<hr>

<p>If you want to use <code>numpy</code> (i.e you are going to do some heavy calculations with these objects), there is a function which does exactly what you want already implemented, <a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.argmin.html" rel="nofollow noreferrer"><code>numpy.argmin</code></a>:</p>

<pre><code>import numpy as np

np.argmin([3,2,4,0,1,5,-6,2,5])
# 6
</code></pre>
    </div>