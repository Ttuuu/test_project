<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I will not repeat what's been said in cHao's review, but I would like to share an alternative approach.</p>

<p>First, we know the length of the return string, so we create a char array which we'll pass to the <a href="https://msdn.microsoft.com/en-us/library/ttyxaek9(v=vs.110).aspx" rel="nofollow noreferrer">(Char[]) string constructor</a> in the return statement. </p>

<pre><code>var chars = new Char[length];
</code></pre>

<p>Next, populate the array by using the <a href="https://msdn.microsoft.com/en-us/library/0w4e0fzs.aspx" rel="nofollow noreferrer">modulus operator</a> to "translate" the <code>chars</code> index (the <code>length</code> variable in the example below) to correct <code>str</code> index.</p>

<pre><code>while (length &gt; 0)
{
    length--;
    chars[length] = str[(length % str.Length)];
}
</code></pre>

<p>Finally, return a new string.</p>

<pre><code>return new String(chars);
</code></pre>

<hr>

<p>Here's how the method should look like if placed in an extension class:</p>

<pre><code>public static String Expand(this String value, Int32 length)
{

    if (value == null)
    {
        throw new ArgumentNullException("value");
    }
    else if (length &lt; 0)
    {
        throw new ArgumentOutOfRangeException("length");
    }

    var chars = new Char[length];

    for (Int32 index = 0; (index &lt; length); index++)
    {
        chars[index] = value[(index % value.Length)];
    }

    return new String(chars);

}
</code></pre>
    </div>