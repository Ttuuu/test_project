<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>I am trying to implement multiplication of two numbers. And I am looking to improve its time and space efficiency</p>
</blockquote>

<p>There really isn't a better time and space efficiency than this.</p>

<pre><code>static int MultiplyTwoNumbers(int num1, int num2)
{
    return num1 * num2;
}
</code></pre>

<p>However, I assume that you've got some other motives behind the question.</p>

<blockquote>
  <p>Which one is better and how can I improve it?</p>
</blockquote>

<p>Of the two methods you've posted, <code>multiplicationUsingAdd</code> is clearly the better option for a few reasons:</p>

<ol>
<li>It's simpler and easier to understand.</li>
<li>There's no memory allocation on the heap (like the <code>new List&lt;int&gt;()</code>) in the other one.</li>
<li>I haven't profiled it, but it's extremely likely to be the faster of the two.</li>
</ol>

<p>However, it could be improved quite a bit.</p>

<ol>
<li>Standard C# <a href="https://msdn.microsoft.com/en-us/library/ms229043(v=vs.110).aspx" rel="nofollow noreferrer">naming conventions</a> always use <code>PascalCase</code> for method names. It should be called <code>MultiplicationUsingAdd</code></li>
<li>The name <code>MultiplicationUsingAdd</code> is a form of <a href="https://en.wikipedia.org/wiki/Leaky_abstraction" rel="nofollow noreferrer">leaky abstraction</a> because the method name exposes the details of the implementation.</li>
<li>A better name would simply be <code>Multiply</code>. The parameters indicate how many numbers are involved and the implementation details are irrelevant.</li>
<li>The code itself can be make a little easier to read by removing some irrelevant bits (e.g. the <code>temp</code> variable).</li>
</ol>

<p>Here's how I would have written it.</p>

<pre><code>static int Multiply(int num1, int num2)
{
    var result = 0;

    for (int i = 0; i &lt; num2; i++)
        result += num1;

    return result;
}
</code></pre>
    </div>