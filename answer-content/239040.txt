<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<pre><code>public static void RunProgram()
{
   ....
}
</code></pre>
</blockquote>

<p>Why do you run the application as a method on the <code>Stopwatch</code> class it self?</p>

<hr>

<p>You have made all the methods (<code>StartTimer()</code>, <code>StopTimer()</code>) private. This means that they only can be run from your <code>RunProgram</code> method, which occupy the main thread of the program and measures nothing. This set up makes the entire effort rather useless. I would expect a stopwatch being able to measure something in a way like:</p>

<pre><code>  Stopwatch stopwatch = Stopwatch.StartNew();

  // TODO: execute something you want to measure
  Thread.Sleep(5000);

  stopwatch.Stop();

  Console.WriteLine($"Duration: {stopwatch.Duration}");
</code></pre>

<hr>

<blockquote>
<pre><code>    private static bool isStarted = false;
    private static bool isStopped = false;
</code></pre>
</blockquote>

<p>These flags can be combined into one <code>isRunning</code>, used like:</p>

<pre><code>    private static void StartTimer(DateTime start)
    {
        if (isRunning)
        {
            throw new InvalidOperationException("Unable to start a stopwatch twice in a row.");
        }
        else
        {
            isRunning = true;
            TimeStart = start;
        }
    }
</code></pre>

<p>and</p>

<pre><code>    private static void StopTimer(DateTime stop)
    {
        if (!isRunning)
        {
            throw new InvalidOperationException("Unable to stop the stopwatch because it is not running.");
        }
        else
        {
            isRunning = false;
            TimeStop = stop;
        }
    }
</code></pre>

<hr>

<blockquote>
<pre><code>    private static void Begin()
    {
        StartTimer(DateTime.Now);
        System.Console.WriteLine(" - Stopwatch has begun.");
    }
</code></pre>
</blockquote>

<p>You shouldn't write to the console in class methods of any object, unless it's explicitly meant to be a console application. The above message is useless in a WinForm application.</p>

<hr>

<blockquote>
  <p><code>private static void StartTimer(DateTime start)</code></p>
</blockquote>

<p>I don't se why you have a start time as argument to <code>StartTimer</code>. Why not just call <code>DateTime.Now</code> inside it? And likewise in <code>StopTimer</code>.</p>

<hr>

<p>You were told to provide the result as a <code>TimeSpan</code>, but you actually return a string:</p>

<blockquote>
  <p><code>private static string ElapsedTimer() =&gt; (TimeStop - TimeStart).ToString();</code></p>
</blockquote>

<hr>

<blockquote>
  <p><code>public static class Stopwatch</code></p>
</blockquote>

<p>The major problem with your implementation is though, that you make it static. That means that you only can run one "instance" at a time. In this way you aren't able to measure on two treads at the same time - or have nested measurements.</p>

<p>I would remove all the static stuff and only have one static method - starting a new <code>Stopwatch</code> instance, that then can be stopped by calling <code>Stop()</code> on the returned object like I showed above. So the public interface of the object would be:</p>

<pre><code>  public class Stopwatch
  {
    public TimeSpan Duration { get; }

    public void Start() { }
    public void Stop() { }
    public static Stopwatch StartNew() { }
  }
</code></pre>

<p>I think you have misunderstood the concepts of "<em>encapsulation and information hiding</em>" slightly. An object must have a public interface through which clients can communicate with it, but they shouldn't be allowed to manipulate the objects internal state (for instance the <code>StartTime</code> member of your watch) - only through the public interface. The client shouldn't know about how you measure the time internally, they are only interested in the final result, when they stop the watch by calling <code>Stop()</code>.</p>
    </div>