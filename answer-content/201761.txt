<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your code is well organized and read well but there are a few oddities:</p>

<ol>
<li>Read <a href="https://www.python.org/dev/peps/pep-0008/" rel="noreferrer">PEP8</a> and apply official coding conventions so that your code read like Python code;</li>
<li>Remove that useless <code>pass</code>;</li>
<li>Don't <code>print</code> your results in the function that compute them, instead <code>return</code> them to the caller so your function is reusable (in your case, <code>yield</code>ing them might be more appropriate);</li>
<li>Don't check for a specific type using <code>type</code>: favor <code>isinstance</code>; better would be to not check for a type at all but for a feature: call the <code>items</code> method of what would appear to be a <code>dict</code> and work with that, discard anything else that raise an <code>AttributeError</code>;</li>
<li>A more generic function would accept the key to search for as parameter;</li>
<li>A recursive approach cannot handle arbitrary large structures due to the recursion limit, an iterative approach can (even though it would rarely be an issue in practice).</li>
</ol>

<p>Proposed improvements:</p>

<pre><code>def retrieve_nested_value(mapping, key_of_interest):
    mappings = [mapping]
    while mappings:
        mapping = mappings.pop()
        try:
            items = mapping.items()
        except AttributeError:
            # we didn't store a mapping earlier on so just skip that value
            continue

        for key, value in items:
            if key == key_of_interest:
                yield value
            else:
                # type of the value will be checked in the next loop
                mappings.append(value)


def main():
    menu = {...}
    for plu in retrieve_nested_value(menu, 'PLU'):
        print(plu)


if __name__ == '__main__':
    main()
</code></pre>
    </div>