<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here are my comments:</p>

<h2><code>Item</code> common super class of itself and <code>Recipe</code></h2>

<p>I understand this design decision stems from the requirement that Recipes are Items of other Recipes. and this is the cause of the confusing <code>isItem</code> property of the <code>Item</code> class.  It would be more clear if Item and Recipee would have a common super class, say <code>RecipeComponent</code> and then you can test if a component is an Item using <code>instanceof</code> </p>

<h2><code>Recipe</code> is a tree</h2>

<p>if we rethink the design of Recipe we see that it is a tree structure, where the leaves (nodes w/o children) are Items (that are not built from other items)  and Recipes are the 'junctions' (nodes with children).  So now you can build a <code>Recipe</code> as tree of sub-Recipes and Items.  the advantage of this is that with trees you have many established algorithms for traversal and manipulation.</p>

<h2><code>count</code> property</h2>

<p>It took me a while to understand the <code>count</code> property of <code>Item</code>. IIUC, the count is the number of items in the <code>Recipe</code>. if that is so, the count is a property (= instance variable) of the recipee, not the item. </p>

<p>so this is how I think your model should look like:</p>

<p><code>Component</code> class:<br>
holds the properties that are define a thing that is used in recipes. 
currently, you have one such property - name.</p>

<p><code>Recipe</code> class:<br>
holds a map where key is component name and value is count of components in recipe. </p>

<p><code>RecipeCatalog</code> class:<br>
holds a map where kay is recipe name and value is an instance of that recipe.</p>

<p>Traversal of <code>Recipe</code> tree:<br>
iterate over the <code>components</code> map. for each item in the map, if it's a <code>Recipe</code>, get its instance from the catalog and traverse it (in recursion fashion).</p>

<h2>how to build recipe instances and the catalog</h2>

<p>this can be done in the code like you did. but a more convonient way is to have the details in a text file in a standard format. (for example, json or xml) then you can use many of the available libraries to load the text into memry as instances of <code>Recipe</code> and build the catalog.  This is also useful for support of mods (you can have different text files for mods)</p>

<h2>multiple constructors</h2>

<p>This is a technical tip: <code>Item</code> class has multiple constructors with duplicate assignment of instance variables. yuo can call constructor from another constructor to have the assignment written once:</p>

<pre><code>// constructor with no args assigns default values
public Item() {
    this.name = "";
    this.count = 1;
    this.isPopulated = false;
    this.isItem = true;
}

// constructor with args only needs to overide default values
public Item(String name) {
    this();
    this.name = name;
}
</code></pre>
    </div>