<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Overall this looks very good. It's even fits nicely with PEP 8 guidelines.</p>

<p>I would suggest preallocating your array, with something like <code>work = [0] * (n + 1)</code> to help slightly with speed and memory use. <code>append</code> is slightly wasteful in that regard because it keeps resizing the array and copying its contents elsewhere.</p>

<p>In terms of naming, <code>i</code> could perhaps helpfully be renamed something like <code>candidate</code> and <code>work</code> could do with being renamed too. Nothing is that unclear though. </p>

<p>It's good to see tests along with the code, and particularly good to see <code>1</code> tested. However, it's better to prefer standard testing libraries such as <a href="https://docs.python.org/3/library/unittest.html" rel="noreferrer">unittest</a> to writing your own test routines. It's particularly hard to read code that redefines functions as you go, so if you must roll your own I'd strongly suggest redoing <code>expect</code> to take the input and expected output rather than some freshly defined <code>test</code> function. (But really, use a library!)</p>

<hr>

<p>Finally, a comment on the underlying algorithm. The bottom up algorithm here is simple, thorough, and correct which are all good things. However, it is potentially wasteful because it has to check every number up to the target. </p>

<p>Consider that every number is either even or is 1 away from being even. Therefore you can always either divide or divide next time. That means that, even without the rule about 3s, you should expect the solution to take at worst \$ 2 log_2(n) \$ steps. That in turn indicates that at almost all of the second half of your <code>work</code> list for large numbers is guaranteed to be unused: you can't divide to it (because you can't divide by less than 2) and it's not worth stepping to it 1 element at a time because that would quickly overshoot the logarithmic lower bound. (Experimentally, if you check the value for say 10,000,000 then over 70% of entries in your cache have paths at least as long as your target path and so are useless to you.)</p>

<p>Therefore, consider instead using a top-down dynamic programming approach instead of a bottom up one to avoid storing results that you are never going to use. (Essentially, this works out as a breadth first search.)</p>
    </div>