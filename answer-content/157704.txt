<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>One useful performance trick when dealing with low-level pixel manipulations like this is that it's often possible to process red and blue together using the 8 bits for green as a gap. Since here you're just adding them, you can add 256 blue values before they would overflow past green into red.</p>

<p>Taking into account John Wu's comment about the stride being irrelevant you can do (untested, and in particular might have endianness bugs; it's several years since I regularly wrote this kind of code, and that was in Java rather than C#):</p>

<pre><code>        unsafe
        {
            uint* p = (uint*)(void*)Scan0;

            uint pixelCount = width * height;
            uint idx = 0;
            while (idx &lt; (pixelCount &amp; ~0xff)) {
                uint sumRR00BB = 0;
                uint sum00GG00 = 0;
                for (int j = 0; j &lt; 0x100; j++) {
                    sumRR00BB += p[idx] &amp; 0xff00ff;
                    sum00GG00 += p[idx] &amp; 0x00ff00;
                    idx++;
                }

                totals[0] += sumRR00BB &gt;&gt; 16;
                totals[1] += sum00GG00 &gt;&gt; 8;
                totals[2] += sumRR00BB &amp; 0xffff;
            }

            // And the final partial block of fewer than 0x100 pixels.
            {
                uint sumRR00BB = 0;
                uint sum00GG00 = 0;
                while (idx &lt; pixelCount) {
                    sumRR00BB += p[idx] &amp; 0xff00ff;
                    sum00GG00 += p[idx] &amp; 0x00ff00;
                    idx++;
                }

                totals[0] += sumRR00BB &gt;&gt; 16;
                totals[1] += sum00GG00 &gt;&gt; 8;
                totals[2] += sumRR00BB &amp; 0xffff;
            }
        }
</code></pre>
    </div>