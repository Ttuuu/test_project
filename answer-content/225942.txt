<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Use a profiler</h3>

<p>To try to find out what is slowing down the code, try using the Python <a href="https://docs.python.org/3.7/library/profile.html" rel="nofollow noreferrer">profiler</a>.</p>

<h3>Data structures</h3>

<p>The cited article uses a array/linked list data structure to store the alphabet, so that insertions and deletions are O(1).  Your code uses a Python list.  <code>list.remove(item)</code> does a linear search of the list to find the first occurance of <code>item</code>, removes the item, and then copies the remainder of the list up one position to fill in the removed item...so <code>remove()</code> is an O(n) operation.  I believe <code>list.insert()</code> is O(n).  These get called k times for each prenecklace.  I don't know if that is enough to cause the slow down.</p>

<p>The article uses an array of elements that include the index of the next/previous element.  It might help to also keep the index of the last element.  Maybe something like this:</p>

<pre><code>class Node:
    def __init__(self, letter, prev, next):
        self.letter = letter
        self.prev = prev
        self.next = next

self.alphabet = [Node(letter, letter - 1, letter + 1) for letter in range(self.k)]


def __remove_letter(self, letter):
    self.alphabet[letter].next.prev = self.prev
    self.alphabet[letter].prev.next = self.next
    return letter

def __add_letter(self, index, letter):
    self.alphabet[letter].next.prev = letter
    self.alphabet[letter].prev.next = letter


def __get_letter(self, index):
    return -1 if index &lt; 0 else self.alphabet[index].letter
</code></pre>

<h3>Other observations</h3>

<p><code>letter = max(self.alphabet)</code> isn't the max item always at the end? So this could be replaced by <code>letter = self.alphabet[-1]</code>.</p>

<p>"Big-O" analysis generally looks at the how an algorithm performs as n gets large.  For small problems an algorithm with worse Big-O may be faster because the problem isn't large enough to amortize the extra overhead of the more efficient algorithm. For example, bubble sort may be faster than quick sort for a list of a few items. 
 Here, your sample necklaces may not be big enough to see the benefits of the fast algorithm.   </p>
    </div>