<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There are a few things you can do to reduce repetition in your code. The first would be encapsulating your new <code>Node&lt;T&gt;</code> into a method.</p>

<pre><code>impl&lt;T&gt; Node&lt;T&gt; {
    fn new(elem: T) -&gt; Self {
        Self {
            elem,
            left: None,
            right: None,
        }
    }
}
</code></pre>

<p>Then all the constructions of <code>Node</code> in <code>add</code> can be replaced with <code>Node::new(elem)</code>.</p>

<hr>

<p>Another thing that can reduce verbosity is having <code>current</code> be an actual (boxed) node rather than an option. Right now you maintain the invariant that <code>current</code> is the <code>Some</code> variant of an <code>Option&lt;&amp;mut Box&lt;Node&lt;T&gt;&gt;&gt;</code> (<code>Link&lt;T&gt;</code>). By instead keeping the <code>&amp;mut Box&lt;Node&lt;T&gt;&gt;</code>, it'll allow you to reduce the number of <code>unwrap</code>s. Conceptually, this means that we're expressing the invariant using the type system.</p>

<p>For example, to initialize <code>current</code>,</p>

<pre><code>let mut current;
match self.root {
    None =&gt; {
        self.root = Some(Box::new(Node::new(elem)));
        return;
    }
    Some(ref mut node) =&gt; {
        current = node;
    }
}
</code></pre>

<p>(matching on <code>Some(ref mut node)</code> makes <code>node</code> a mutable reference - there are some other ways to get the same effect, but this is the clearest).</p>

<p>Having this allows you to change the later blocks to</p>

<pre><code>if elem &lt; current.elem {
    if current.left.is_none() {
        current.left = Some(Box::new(Node::new(elem)));
        break;
    } else {
        current = current.left.as_mut().unwrap();
    }
}
</code></pre>

<hr>

<p>My last major suggestion is to use matching to get rid of <em>all</em> the unwrapping. Blocks like</p>

<pre><code>if current.left.is_none() {
    current.left = Some(Box::new(Node::new(elem)));
    break;
} else {
    current = current.left.as_mut().unwrap();
}
</code></pre>

<p>are just the poor man's match statement. They can be replaced by</p>

<pre><code>match current.left {
    None =&gt; {
        current.left = Some(Box::new(Node::new(elem)));
        break;
    }
    Some(ref mut node) =&gt; {
        current = node;
    }
}
</code></pre>

<p>(again, <code>ref mut node</code> means we're capturing a mutable reference).</p>

<p>This could more succinctly be expressed using <code>if let</code>.</p>

<pre><code>if let Some(ref mut node) = current.left {
    current = node;
} else {
    current.left = Some(Box::new(Node::new(elem)));
    break;
}
</code></pre>

<hr>

<p>Now for some extra things. First, as I mentioned in the comments, the code as written handles duplicates by placing them to the right. This isn't necessarily what you want, but it's easy to change. The trait <code>Ord</code> provides a <code>cmp</code> method that has three possible outputs: <code>Less</code>, <code>Greater</code> or <code>Equal</code>. By doing a match on the output of <code>cmp</code>, we can handle all three.</p>

<pre><code>match elem.cmp(&amp;current.elem) {
    std::cmp::Ordering::Less =&gt; {
        //...
    }
    std::cmp::Ordering::Equal =&gt; break,
    std::cmp::Ordering::Greater =&gt; {
        //...
    }
}
</code></pre>

<p>If you don't want to type out the whole names, you could do <code>use std::cmp::Ordering::*;</code> inside the <code>fn add</code> block (or wherever else, but it's best to keep the scope small).</p>

<hr>

<p>This suggestion would be a pretty major rework of your code, but it leads to a much more elegant solution. As I said before, you maintain the invariant that <code>current</code> is a <code>Some</code> variant. I suggested that you could keep a <code>&amp;mut Box&lt;Node&lt;T&gt;&gt;</code> instead so that the invariant is expressed in the type of <code>current</code>. What you can do instead is not try to keep that invariant at all, but instead check whether current is <code>Some</code> or <code>None</code> at the <em>start</em> of the loop. Then you wouldn't need the initial test on <code>self.root</code>.</p>

<pre><code>fn add(&amp;mut self, elem: T) {
    let mut current = &amp;mut self.root;
    loop {
        match current {
            Some(node) =&gt; {
                // check how elem compares to node.elem
                // assign node.left/right to current as appropriate (or break)
            }
            None =&gt; {
                // set the data behind `current` to a new node.
                // i.e. `*current = ...`
            }
        }
    }
</code></pre>

<hr>

<p>Finally, just a fairly minor thing. Don't forget to run <code>cargo fmt</code> and <code>cargo clippy</code>. <code>cargo fmt</code> will make your code more readable to other Rust programmers and keep things in a consistent style. <code>cargo clippy</code> will give you a few helpful tips for making your code more idiomatic and sometimes help avoid logic errors.</p>
    </div>