<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>Is numpy a good candidate module for this?</p>
</blockquote>

<p>Using numpy is fine, but you can get by just fine without it.</p>

<p>Borrowing Martin R's <code>wrapped_distance</code> function, you could solve the problem without any external libraries as follows:</p>

<pre><code>def coordinates(matrix: List[str], subject: str) -&gt; Iterable[Tuple[int, int]]:
    return ((r, c)
            for r, row in enumerate(matrix)
            for c, ch in enumerate(row)
            if ch == subject)

def calc_closest_enemy(matrix: List[str]) -&gt; int:
    """Calculate the minimum number of moves to reach an enemy

    (... rest of your docstring omitted ...)
    """

    friendly_coord = next(coordinates(matrix, "1"))
    enemy_locations = coordinates(matrix, "2")
    shape = len(matrix), len(matrix[0])
    distances = (wrapped_distance(friendly_coord, enemy, shape) for enemy in enemy_locations)
    return min(distances, default=0)
</code></pre>
    </div>