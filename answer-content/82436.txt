<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Solution overall seems nice, although:</p>

<ul>
<li>casting to list in list comprehension is not needed</li>
<li>product returns iterator, so you also may want to generate iterator if you mainly plan to iterate over possibilities </li>
<li>I'd strongly advice using better names. Characters in source code costs nothing and maintaining code afterwards is much easier</li>
</ul>

<p>My attempt would be:</p>

<pre><code>import itertools

letters_map = {'2':'ABC', '3':'DEF', '4':'GHI', '5':'JKL', 
               '6':'MNO', '7':'PQRS', '8':'TUV', '9':'WXYZ'}

def possible_words(phone_number):
    letters_to_combine = (letters_map[digit] for digit in phone_number)
    for letters_group in itertools.product(*letters_to_combine):
        yield ''.join(letters_group)

print list(possible_words("23567"))
</code></pre>
    </div>