<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I have some suggestions for you.</p>

<p>Next time, before submitting code, try to format it :)</p>

<h1>Suggestions</h1>

<h2>Unused variable</h2>

<p>The variable <code>rd</code> is not used, you can remove it.</p>

<h2>Put variables that donâ€™t change out of the loop</h2>

<p>In the <code>while</code> loop, the <code>rock</code>, <code>paper</code> and <code>scissors</code> get their value reassigned with the same value each time the loop restart, move them outside of the loop.</p>

<p>I suggest that you put those as class constants, so you will be able to reuse the in other methods.</p>

<pre class="lang-java prettyprint-override"><code>public class RockPaperScissors {
    public static final int ROCK = 1;
    public static final int PAPER = 2;
    public static final int SCISSORS = 3;
}
</code></pre>

<h2>Validate the invalid choice first</h2>

<p>In your code, you check if the chosen option is valid at the end of the loop; it will be more efficient if you check the invalid options first. This will prevent to check every other conditions and quit the loop faster.</p>

<pre class="lang-java prettyprint-override"><code>System.out.print("Please Enter: \n1 for Rock, \n2 for Paper, \n3 for Scissors: ");
int player1 = kb.nextInt();

if (player1 != rock &amp;&amp; player1 != paper &amp;&amp; player1 != scissors) {
   System.out.print("Invalid response");
   break;
}
</code></pre>

<h2>Extract some of the logic into methods</h2>

<p>In your code, you can move some of the logic into method to allow the code to be shorter and easier to read.</p>

<ol>
<li>I suggest make methods to check if the answer is a rock, paper or scissors; this will allow the conditions to be shorter.</li>
</ol>

<pre class="lang-java prettyprint-override"><code>public static void main(String[] args) {
   while (true) {
      //[...]
      if (isRock(player1) &amp;&amp; isRock(random)) {
         //[...]
      }
      //[...]
   }
}

private static boolean isRock(int answer) {
   return answer == ROCK;
}

private static boolean isPaper(int answer) {
   return answer == PAPER;
}

private static boolean isScissor(int answer) {
   return answer == SCISSORS;
}
</code></pre>

<ol start="2">
<li>I suggest that you extract the logic that read the value in a method. </li>
</ol>

<pre class="lang-java prettyprint-override"><code>public static void main(String[] args) {
   while (true) {
      //[...]
      int player1 = getPlayer1Answer(kb);
   }
}

private static int getPlayer1Answer(Scanner kb) {
   System.out.print("Please Enter: \n1 for Rock, \n2 for Paper, \n3 for Scissors: ");
   return kb.nextInt();
}
</code></pre>

<p><strong>Bonus</strong></p>

<p>While you are in the method, I suggest to make another loop to verify the validity of the answer; this will make sure the provided choice is valid and ask again if not.</p>

<pre class="lang-java prettyprint-override"><code>private static int getPlayer1Answer(Scanner scanner) {
   int value;

   while (true) {
      System.out.print("Please Enter: \n1 for Rock, \n2 for Paper, \n3 for Scissors: ");
      value = scanner.nextInt();

      if (isRock(value) || isPaper(value) || isScissor(value)) {
         break;
      } else {
         System.out.println("Invalid response");
      }
   }

   return value;
}
</code></pre>

<ol start="3">
<li>I suggest that you extract the logic that generates the computer answer in a method. </li>
</ol>

<pre class="lang-java prettyprint-override"><code>    private static int getComputerAnswer() {
        int[] conditions = {ROCK, PAPER, SCISSORS};
        return conditions[new Random().nextInt(conditions.length)];
    }
</code></pre>

<h1>Refactored code</h1>

<pre class="lang-java prettyprint-override"><code>public class RockPaperScissors {
    public static final int ROCK = 1;
    public static final int PAPER = 2;
    public static final int SCISSORS = 3;

    public static void main(String[] args) {
        Scanner kb = new Scanner(System.in);
        System.out.println("Welcome to Rock Paper Scissors!");

        while (true) {
            int random = getComputerAnswer();
            int player1 = getPlayer1Answer(kb);

            if (isRock(player1) &amp;&amp; isRock(random)) {
                System.out.print("You have tied, computer rock, please try again\n");
            } else if (isPaper(player1) &amp;&amp; isPaper(random)) {
                System.out.print("You have tied, computer chose paper, please try again");
            } else if (isScissor(player1) &amp;&amp; isScissor(random)) {
                System.out.print("You have tied, computer chose scissors, please try again");
            }

            if (isRock(player1) &amp;&amp; isPaper(random)) {
                System.out.print("Computer chose paper, computer has won");
                break;
            } else if (isPaper(player1) &amp;&amp; isRock(random)) {
                System.out.print("You win!, computer chose rock");
                break;
            } else if (isPaper(player1) &amp;&amp; isScissor(random)) {
                System.out.print("Computer chose scissors, computer has won");
                break;
            } else if (isScissor(player1) &amp;&amp; isPaper(random)) {
                System.out.print("You win, computer chose paper");
                break;
            } else if (isRock(player1) &amp;&amp; isScissor(random)) {
                System.out.print("You win!, computer chose scissors");
                break;
            } else if (isScissor(player1) &amp;&amp; isRock(random)) {
                System.out.print("Computer chose rock, computer has won");
                break;
            }
        }
    }

    private static boolean isRock(int answer) {
        return answer == ROCK;
    }

    private static boolean isPaper(int answer) {
        return answer == PAPER;
    }

    private static boolean isScissor(int answer) {
        return answer == SCISSORS;
    }

    private static int getComputerAnswer() {
        int[] conditions = {ROCK, PAPER, SCISSORS};
        return conditions[new Random().nextInt(conditions.length)];
    }

    private static int getPlayer1Answer(Scanner scanner) {
        int value;

        while(true) {
            System.out.print("Please Enter: \n1 for Rock, \n2 for Paper, \n3 for Scissors: ");
            value = scanner.nextInt();

            if(isRock(value) || isPaper(value) || isScissor(value)) {
                break;
            } else {
                System.out.println("Invalid response");
            }
        }

        return value;
    }
}
<span class="math-container">```</span>
</code></pre>
    </div>