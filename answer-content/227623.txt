<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Error handling</h1>

<blockquote>
  <p>One specific question I have is if it's bad practice to return a print
  call, as a way to print an error and simultaneously return from the
  function? I did that so that I could print the error and return None
  on the same line.</p>
</blockquote>

<p>That is unconventional to say the least. By catching the exception internally and print it to the console you take away the ability to handle exceptions in calling code. You should raise an exception if an error occured that cannot be handled by the function itself to give the caller the possibility to decide how to handle this. Also, ask yourself: What is the advantage of your chosen approach? Is</p>

<blockquote>
<pre><code>result = atoi(test_string)
if result:
  print('It was a valid int! atoi() returned:', result)
else:
  print('It was an invalid int! atoi() returned:', result)
</code></pre>
</blockquote>

<p>really any better than, for example:</p>

<pre><code>try:
    result = atoi(test_string)
    print('It was a valid int! atoi() returned:', result)
except CannotConvertToInteger:
    print('It was an invalid int!)
</code></pre>

<h1>The code itself</h1>

<ul>
<li>The function would profit from some blank lines to seperate logical blocks.</li>
<li><code>string[::-1]</code> actually creates a copy, since strings are immutable. You can avoid that by using <code>reversed(string)</code>, which is perfectly fine for your use-case since you only want the single digits, not the whole thing reversed.</li>
<li><p>This convoluted structure</p>

<blockquote>
<pre><code>try:
    if ((code &gt; 57) or (code &lt; 48)):
        raise CannotConvertToInteger
    else:
        val += (code - 48) * multiplier
        multiplier *= 10
except CannotConvertToInteger:
    return print('Cannot convert string to an integer!')
</code></pre>
</blockquote>

<p>is the price you pay for the way you chose to handle your error cases. As said above, removing the <code>try: ... catch ...:</code> is the favorable approach here.</p></li>
<li><p><a href="https://codereview.stackexchange.com/users/98493/">@Graipher</a>'s <a href="https://codereview.stackexchange.com/a/227622/">answer</a> has more good points about using built-in exceptions and avoiding magical numbers, that I almost immediately thought about when writing this up, but then forgot in the process.</p></li>
<li><p>Almost as a side note: you don't need parens around conditions in Python. Most people only ever use them if the conditions get very long and need to spread over multiple lines. The same goes for the return value. Here the parens are even more unnecessary.</p></li>
<li>You should have a look at the official <a href="https://www.python.org/dev/peps/pep-0008/" rel="noreferrer">Style Guide for Python Code</a> (often just called PEP8). The recommendations most relevant to your code would be to use 4 spaces per indentation level and avoid multiple initializations per source line. The meta-site for Code Review also has a nice <a href="https://codereview.meta.stackexchange.com/a/5252/92478">list of tools</a> that can help you check this automatically.</li>
</ul>
    </div>