<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Your solution just doesn't work</h1>

<ol>
<li>Your validation check always fails. Yes <code>int(value) != int</code> is always true. I don't think an instance of a class will ever be the class that it's an instance of.</li>
<li><p>Your mutating a class variable. The tool you're utilizing forces you to take instances, normally there's a pretty good reason.</p>

<p>If we remove the previous error and run your code we can easily see, there's no point in having more than one instance of a <code>Player</code>.</p>

<pre class="lang-py prettyprint-override"><code>&gt;&gt;&gt; a = Person()
&gt;&gt;&gt; b = Person()
&gt;&gt;&gt; a.moods['happy'].__set__(a, 8)
&gt;&gt;&gt; b.moods['happy'].__get__(b, None)
8  # Ok, that's not right...
</code></pre></li>
</ol>

<p>I don't believe you've actually tried to code you've provided. And honestly what's the point in a single-data non-singleton class? The provided code is just untested garbage.</p>

<h1>You're using it wrong</h1>

<p>If it's not evident enough that you're fighting a tool that is pure sugar. Then you're not doing it right. The instance has to keep the state of the instance, and the descriptor has to interact with a varying amount of instances to interact with <em>their</em> state correctly.</p>

<p>If anything of the instance's leaks out into the descriptor, or vice versa. Then you're going to have a bad, bad time.</p>

<p>Since descriptors are to be tied onto classes I'm making a <code>Mood</code> class. Since the descriptor needs to have a place to store data. We can define that in the <code>__init__</code> of <code>Mood</code>. To note, because you may not notice this by yourself. <code>self._values</code> can be mutated to bypass the validator. Using <code>self._values[mood] = value</code> is not how you update values, use <code>setattr(self, mood, value)</code>.</p>

<p>In addition to fixing <code>OneDigitNumericValue</code>, you should make it take an argument that is the validator for the function. If you need another validator it'd be better and simpler to make a simple hard to mess-up function. Rather than making lots of potentially broken descriptors.</p>

<pre class="lang-py prettyprint-override"><code>def single_digit(value):
    if 0 &lt;= value &lt;= 9:
        return
    raise ValueError("The value is invalid")


class Validator:
    def __init__(self, validator):
        self.validator = validator
        self.name = None

    def __set_name__(self, owner, name):
        self.name = name

    def __get__(self, instance, owner) -&gt; object:
        return instance._values[self.name]

    def __set__(self, instance, value) -&gt; None:
        self.validator(value)
        instance._values[self.name] = value


class Mood:
    happy = Validator(single_digit)
    angry = Validator(single_digit)
    sad = Validator(single_digit)

    def __init__(self):
        self._values = {}
        self.happy = 5
        self.angry = 5
        self.sad = 5

    def update_states(self, states):
        for mood, value in states.items():
            setattr(self, mood, value + getattr(self, mood))
</code></pre>

<p>And it actually works:</p>

<pre><code>&gt;&gt;&gt; a = Mood()
&gt;&gt;&gt; b = Mood()
&gt;&gt;&gt; a.happy = 3
&gt;&gt;&gt; a.happy
3
&gt;&gt;&gt; b.happy
5
&gt;&gt;&gt; a.update_states({'happy': 3})
&gt;&gt;&gt; a.happy
6
</code></pre>
    </div>