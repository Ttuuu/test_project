<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>validity checks</h2>

<p>As you say, the problem statement includes this:</p>

<blockquote>
  <p>Check within the constructor the given values for being valid.</p>
</blockquote>

<p>Here's a plane that your code does not reject as invalid:</p>

<pre><code>new Plane(-5, 12, 1000, 800, 500, 2500, 25000, 8000);
</code></pre>

<p>Not only can <code>maxWeight</code> (and the other parameters) invalidly be negative, it can also be exceeded by the the <code>loadWeight</code>.</p>

<h2>units</h2>

<p>Planes travel large distances, possibly reaching countries far far away, where people might use the imperial system (or even other, more arcane ones). You have an implicit contract of what units the values should be given in. That contract is not clearly communicated. Are the weights in metric tonnes? The fuel in gallons?</p>

<blockquote>
  <p><strong>fun fact</strong>: The Concorde was constructed by British and French companies, one using imperial system and the other metric. <a href="https://en.wikipedia.org/wiki/Metrication_of_British_transport#Aircraft_design" rel="nofollow"><em>Imperial units were used for the sections designed by the British team and metric units for those designed by the French team.</em></a></p>
</blockquote>

<p>And even within the metric system for example, do you use kg, t, g, … for weight? <strong>You have to clearly document what units you are expecting.</strong></p>

<p>Ideally, you'd use some <a href="https://www.jcp.org/en/jsr/detail?id=108" rel="nofollow">built-in mechanism to work with units</a>. That would even solve the imperial/metric conversion problem. Basically speaking, the dimension of a variable is specified and then the conversion of units for that dimension. If the dimension is temperature, you can shove any value into it that's a temperature, <a href="https://en.wikipedia.org/wiki/Temperature_conversion_formulas" rel="nofollow">be it °C, °F, °Ré, °Rø or whathaveyou</a>. Sadly, the proposal linked to above was withdrawn, because nobody cared to do it. I guess there are other libraries in place that do this. It's out of scope for a beginner program and nobody expects you to use a system like this. This paragraph is just FYI.</p>

<h2>use <code>min()</code>/<code>max()</code> for clamping</h2>

<p>If you want to keep a value within some limits, you can do this:</p>

<pre><code>this.kerosinStorage = kerosinStorage &lt; this.maxFuel
                        ? kerosinStorage
                        : this.maxFuel;
</code></pre>

<p>but you can also do it this way</p>

<pre><code>this.kerosinStorage = Math.min(kerosinStorage, this.maxFuel);
</code></pre>

<p>which is a bit more self documenting if you got used to it, because it clearly says: <em>take the smaller value</em>. Parsing the ternary operator is a bit harder to read.</p>

<p>This might be personal preference. There's also a (blurry) line where simplifying code becomes obfuscation to cryptic one-liners. Don't be tempted to write everything in as little code as possible.  You have to draw that line for yourself.</p>

<h2>the validity checks strike back</h2>

<p>Even if you have some validity checks, you have to come up with a contract on how they are enforced. What should happen if some invalid value is passed to your class? Maybe you want to <code>throw new</code><a href="https://docs.oracle.com/javase/7/docs/api/java/lang/IllegalArgumentException.html" rel="nofollow"><code>IllegalArgumentException("Negative weights aren't possible.")</code></a> or maybe you want to limit the values to a certain range of valid values and move on. There is no clear right or wrong here. It's a matter of how you design your class. What's important is that you <strong>communicate whatever you do clearly</strong>. Even if you don't perform any validity checks, you should explain this to possible users of your class: "<em>Hey there, if you pass nonsense to this class, it won't check for that and you have to live whatever garbage it produces as a result.</em>" This could be a valid choice in some situations. (In yours it's obviously not, because you were asked to do them)</p>

<h2>naming</h2>

<p>This is a subjective one. When I read <code>kerosinStorage</code>, I associate with that the size of the tank or container that the kerosene is stored in. In your code it is the actual amount of kerosene left in the plane. I suggest to change that name to just <code>kerosene</code>.</p>

<h2>setters should set, not add</h2>

<p>The setter for <code>kerosinStorage</code> adds to the current value and doesn't set it</p>

<pre><code>public void setKerosinStorage(double kerosinStorage) 
{
    this.kerosinStorage = this.kerosinStorage + kerosinStorage &gt; maxFuel
            ? maxFuel : this.kerosinStorage + kerosinStorage;
}
</code></pre>

<p>Either make this method a setter or rename it to <code>addKerosene</code> or something like that.</p>

<h2>the return of the validity checks</h2>

<p>Admittedly, this is more about <strong>code duplication</strong>, but I could not resist completing the trilogy.</p>

<blockquote>
  <p>Check <strong>within the constructor</strong> the given values for being valid.</p>
</blockquote>

<p>That's a bit misleading, because if you have setters for properties, you should perform the validity checks in the setters, <strong>not</strong> in the constructor. As you have it right now, you have duplicated code to limit the value of <code>kerosinStorage</code>. You do it once in the constructor:</p>

<pre><code>    this.kerosinStorage = kerosinStorage &lt; this.maxFuel
                            ? kerosinStorage
                            : this.maxFuel;
</code></pre>

<p>and then you do it again in "<code>addKerosene</code>":</p>

<pre><code>    this.kerosinStorage = this.kerosinStorage + kerosinStorage &gt; maxFuel
            ? maxFuel : this.kerosinStorage + kerosinStorage;
</code></pre>

<p>Here's a reduced version of your class, that does things differently:</p>

<pre><code>package plane;

public class Plane 
{
    private double maxFuel;
    private double kerosene;

    public Plane(double maxFuel, kerosene)
    {
        this.maxFuel        = maxFuel;
        setKerosene(kerosene);
    }

    public void setKerosene(double amount)
    {
        kerosene = Math.min(maxFuel, amount);
    }

    public void addKerosene(double amount) 
    {
        setKerosene(kerosene + amount);
    }
}
</code></pre>

<p>In your current code, you have some validity checks in the setter methods <code>fillUp()</code> and <code>load()</code>, but they are not called in the constructor.</p>

<p>To wrap up the whole validity check thing once and for all:</p>

<ul>
<li>perform validity checks in the setter methods</li>
<li>call the setter methods from the constructor to ensure they are performed and to prevent code duplication</li>
<li>come up with a consistent way to deal with invalid values and communicate it clearly</li>
</ul>
    </div>