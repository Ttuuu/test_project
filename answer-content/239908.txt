<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Answers to OP's questions</h2>

<blockquote>
  <p>Are the extra comments ok or are they too much?</p>
</blockquote>

<p>Looks good to me overall, though some of them contain redundant information (that is already explained as variable names):</p>

<pre><code>  ⍝ aux train to check if position is inside chessboard
  isInsideBoard ← ∧/(1∘≤∧≤∘8)
</code></pre>

<p>Compare it with, e.g.</p>

<pre><code>  ⍝ checks if position is inside chessboard, i.e. 1 ≤ both coords ≤ 8
  isInsideBoard ← ∧/(1∘≤∧≤∘8)
</code></pre>

<p>Or you could omit it entirely since the code is talking the intent very well by itself, and just name the function better:</p>

<pre><code>  IsInsideChessBoard ← ∧/(1∘≤∧≤∘8)
</code></pre>

<p>which, by following the naming convention (function names capitalized), is made even more clear.</p>

<blockquote>
  <p>Are <code>signs</code> and <code>offsets</code> defined in an acceptable way? I like the trade-off between hardcoding too much and using too many functions just to create a couple of constants.</p>
</blockquote>

<p>Also fine to me. I especially like how you decided to simply go with <code>(1 2)(2 1)</code> for <code>offsets</code>.</p>

<p><strong>Nitpicking:</strong> Having an intermediate array of rank 3 or higher can make code hard to understand. In your current code, <code>signs</code> is a matrix and <code>offsets</code> is a vector, so <code>signs ∘.× offsets</code> yields a cube (rank 3 array). I'd suggest adding a <code>,</code> to <code>signs</code>:</p>

<pre><code>  signs ← , ¯1 1 ∘., ¯1 1
</code></pre>

<blockquote>
  <p>What is the standard spacing notation around <code>¨</code>? Should I write <code>f¨ arg</code>, <code>f ¨ arg</code>, <code>f ¨arg</code> or <code>f¨arg</code>?</p>
</blockquote>

<p>There's no such thing in APL, partially because some APL editors strip away all spaces not relevant to tokenization. But considering that <code>¨</code> binds to the function on its <em>left</em> to modify its behavior, I believe <code>f¨ arg</code> is the most reasonable spacing.</p>

<hr>

<h2>Writing test cases</h2>

<p>Expanding on <a href="https://codereview.stackexchange.com/a/239904/182436">Quuxplusone's suggestion</a>.</p>

<p>Unfortunately, APL doesn't yet have a <em>standard</em> way to write unit tests. Yet we can find some examples of writing simple assertions. One striking example is from <a href="https://www.dyalog.com/blog/2015/07/20/" rel="noreferrer">Roger Hui's Dyalog blog post</a>, written back in 2015:</p>

<pre><code>assert←{⍺←'assertion failure' ⋄ 0∊⍵:⍺ ⎕SIGNAL 8 ⋄ shy←0}

pcheck←{
  assert 2=⍴⍴⍵:
  assert (⍴⍵)≡(!⍺),⍺:
  …
  1
}
</code></pre>

<p>This cleverly uses dfns' guards to neatly list all the assertions to satisfy. If you run this in the interpreter and some assertion fails, a <code>⎕SIGNAL 8</code> is raised and execution is stopped at the line containing the failed assertion.</p>

<p>In <a href="https://github.com/Bubbler-4/advent-of-apl" rel="noreferrer">Advent of APL</a>, I use slightly different formulation to allow testing for multiple functions implementing the same thing (modified to meet the naming convention you're using):</p>

<pre><code>Assert←{
    0=⍵:'Assertion Failure'⎕SIGNAL 11
    0
}
_Test←{
    F←⍺⍺
    Assert 0≡F'(())':
    Assert 0≡F'()()':
    Assert 3≡F'(((':
    Assert 3≡F'(()(()(':
    Assert 3≡F'))(((((':
    'All tests passed'
}
⍝ Actual testing
Solution _Test ⍬
</code></pre>

<p>You can try writing tests for your function in this style. Since the order of the output shouldn't matter, you could write something like this:</p>

<pre><code>Sort←(⍋⊃¨⊂)
UnorderedEq←{(Sort ⍺)≡Sort ⍵}
Assert←{⍺←'assertion failure' ⋄ 0∊⍵:⍺ ⎕SIGNAL 8 ⋄ shy←0}
Test←{
  Assert (2 3)(3 2) UnorderedEq KnightMovesRevised 1 1:
  Assert (1 1)(1 5)(3 1)(3 5)(4 2)(4 4) UnorderedEq KnightMovesRevised 2 3:
  Assert 8 = ≢ KnightMovesRevised 3 5:
  'All tests passed'
}
⎕←Test ⍬
</code></pre>

<p><a href="https://tio.run/##hZJPaxNBGMbv@ymeW3axtt02Qij0EEVK8M/B1g8wZt5sho47cWcbKCEXFUlSIl7EXDxYCvYg9NSLx/hN5ovEd2a3JGDBy@w7M8/ze//MioF@KM@FNtlq9SxXWb98YYZkX9FQWZJwn75gFAFu/h1Hakg5BLp9svaNEYXEwFhVKpNvoadyibJP0JQJjdOAwlvP2o4Y0LGd3CpJT7z5cTB7tpv83IlTN1m46RXHYV20EjZYleU2aLawvEmRsnaxXcd8b3o9S2WliFPsJfEeUm8MOWtjDWHjn293jrobrWwJoXVVtOkK34cNu7r4rjnTEplBadizlnh0leQB3Oy9m9/WSMEjOCUaBMhQaCVhcvIJq403/juH5fWafSfdWZ@Mo@jYFCV7Yze/cLMPy2tOmkSvc1NIKkg@fcd3o9iLuIrfiZv@qOPbcdS2loJ5xFf8aYhwwGT0hNJnBTXgLj5i101mbDhgFdznr8edo5ft52iFO9s/Z@fuODohG1BcZcUFz3w/ifd5@tioB/f8SPxoBxs@3ia8PPLm1C8cNf0jNtH8L4uTbrBaOISbXt4nZKwXNtr@mbl4i4HvXzZ4qtwl9@Jb4kn9Wq3@Ag" rel="noreferrer" title="APL (Dyalog Unicode) – Try It Online">Try it online!</a></p>
    </div>