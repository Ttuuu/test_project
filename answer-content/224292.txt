<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'll assume in 2019 that C++17 is available.</p>

<p>All other answers seem to be using two <code>queue</code>s, one for each type of animal, but I think it kinda defeats the purpose that the FIFO behaviour has to be on the whole set of animals. With two <code>queues</code>, the FIFO has to be implemented by an <code>_order</code> stored with the animal, which mixes the data with the algorithm. Once the animal is adopted, out of the shelter, the <code>_order</code>has no meaning, but is still part of the structure.</p>

<p>Using a queue, I would use a single queue of animals, which implements FIFO. (But the <code>deque</code> allows you to remove from the middle of it)</p>

<pre><code>std::deque&lt;Animal&gt; _animals;
</code></pre>

<p>Now, the animal being either a cat or a dog, I would just say so</p>

<pre><code>using Animal = std::variant&lt;Dog,Cat&gt;;
</code></pre>

<p>And implement each species as its own class.</p>

<pre><code>class Cat { /* implementation*/ };
class Dog { /* implementation*/ };
</code></pre>

<p>Then, borrowing terminology from Edward's answer, I would simply implement:</p>

<pre><code>void dropoff(Animal a) { _animals.emplace_back(std::move(a)) };
std::optional&lt;Animal&gt; adoptAny() {
   if(_animals.empty()) return std::nullopt;

   auto adoptee = std::move(_animals.front());
   _animals.pop_front();
   return adoptee; // NRVO
}


template&lt;typename T&gt;
auto adoptFirstOfType() -&gt; std::optional&lt;T&gt; {
  // Find first animal of given type
  const auto adoptee_it = std::find_if(
      begin(_animals),
      end(_animals), 
      [](const Animal&amp; a) { return a.holds_alternative&lt;T&gt;(); };

  // If not found, return empty optional.
  if(adoptee_it == end(_animals)) {
      return std::nullopt;
  }

   // If found, steal the right alternative, remove from queue and return
   auto adoptee = std::get&lt;T&gt;(std::move(*adoptee_it));
   _animals.erase(adoptee_it);
   return adoptee; //NRVO
}

auto adoptDog() { // type deduced consistently from returned expression
   return adoptFirstOfType&lt;Dog&gt;();
}
auto adoptCat() { // type deduced consistently from returned expression
   return adoptFirstOfType&lt;Cat&gt;();
}
</code></pre>

<p>Edward's main function should work fine as is, because <code>optional</code> has the same "container access" interface as <code>unique_ptr</code>.</p>

<p>This allows to simply drop the <code>_order</code> and <code>operator&lt;</code> hacks from his solution. (because yes, implementing <code>operator&lt;</code> is a hack - it makes no sense that a Dog be more than a Cat because it arrived first in the shelter) </p>
    </div>