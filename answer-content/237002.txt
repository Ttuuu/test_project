<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The answer uses this structure declared in the program:</p>

<pre><code>typedef struct ListNode {
    // Basic Node data structure of a Linked List
    int val;
    struct ListNode* next;
} node_t;
</code></pre>

<h2>Symbolic Constants for Return From <code>main()</code> and <code>exit()</code></h2>

<p>The program is already including <code>&lt;stdlib.h&gt;</code>. There are two system defined macros or Symbolic Constants supplied by <code>&lt;stdlib.h&gt;</code>, these are <a href="https://en.cppreference.com/w/cpp/utility/program/EXIT_status" rel="nofollow noreferrer"><code>EXIT_SUCCESS</code> and <code>EXIT_FAILURE</code></a>. These macros can also be using in C++ by including <code>&lt;cstdlib&gt;</code>.</p>

<h2>Complexity</h2>

<p>Several of the functions are too complex (do too much). One of the problems in these functions is that code is repeated, specifically the calls to <code>malloc()</code> are repeated. One basic principle in programming is <a href="https://en.wikipedia.org/wiki/Don%27t_repeat_yourself" rel="nofollow noreferrer">Don't Repeat Yourself</a> sometimes known as DRY code. In this case it would be better to create a function that creates a <code>node_t</code> struct.</p>

<pre><code>node_t *createNode(int data, char *errorLocation)  // It is ok to define this function without the string errorLocation but that limits the error message below.
{
    node_t *newNode = malloc(sizeof(*newNode));
    if (newNode == NULL)
    {
        fprintf(stderr, "An error occurred while allocating memory for node_t in %s\n", errorLocation);
        exit(EXIT_FAILURE);
    }

    newNode-&gt;val = data;
    newNode-&gt;next = NULL;

    return newNode;
}
</code></pre>

<p>Please note that the cast to <code>node_t*</code> is not necessary because <code>malloc()</code> returns <code>void*</code>. It is also better to use the size of what the variable is pointing to, so that if the type of the variable is changed only one item needs to be changed on the line. It is better to print error messages to <code>stderr</code>, the operating system may highlight errors and error messages will be outside the flow of normal output.</p>

<p>When one works with linked list there are a basic set of functions that should be created:</p>

<ul>
<li><code>node_t *createNode(int data);</code> - shown above.  </li>
<li><code>node_t *appendNode(node_t *newNode, node_t *listHead);</code>  </li>
<li><code>node_t *insertNode(node_t *newNode, node_t *listHead);</code>  </li>
<li><code>node_t *deleteNode(node_t *node, node_t *listHead);</code>  </li>
<li><code>node_t *findNode(int data, node_t *listHead);</code>  </li>
<li><code>void deleteList(node_t *listHead);</code>  </li>
</ul>

<p>Using the above list of functions makes it much easier to create and manipulate linked lists.</p>

<p>There is also a programming principle called the Single Responsibility Principle that applies here. The <a href="https://en.wikipedia.org/wiki/Single_responsibility_principle" rel="nofollow noreferrer">Single Responsibility Principle</a> states:</p>

<blockquote>
  <p>that every module, class, or function should have responsibility over a single part of the functionality provided by the software, and that responsibility should be entirely encapsulated by that module, class or function.</p>
</blockquote>

<p>Here are a few examples of the functions to be created:  </p>

<pre><code>node_t *appendNode(node_t* newNode, node_t* listHead)
{
    if (listHead != NULL)
    {
        node_t *head = listHead;
        while (head-&gt;next != NULL)
        {
            head = head-&gt;next;
        }
        head-&gt;next = newNode;
        return  listHead;
    }

    return newNode;
}

node_t *insertNode(node_t *newNode, node_t *listHead)
{
    newNode-&gt;next = listHead;
    return newNode;
}

node_t *createList(int data[], int length)
{
    node_t *head = NULL;
    for (int i = 0; i &lt; length; i++)
    {
        node_t *newNode = createNode(data[i], "createList()");
        head = appendNode(newNode, head);
    }

    return head;
}
</code></pre>

<p>Rather than passing in a pointer to the list of items to modified, it is better for functions to return lists.</p>
    </div>