<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This only works if <code>n</code> is never changes between calls.</p>
<pre><code>T* addr_;
if (free_list.pop(addr_)) return addr_;
</code></pre>
<p>IF you can guarantee this then its fine. Otherwise you need a free list for every different value of <code>n</code>. otherwise an allocation for 10 could be done then deallocated (thus you have a block of ten on the list). Now an allocation comes in for 20 (you will give it the block on the free list which has a size of 10).</p>
<p>If you know that <code>n</code> never changes then:</p>
<pre><code>if (n &lt;= 1)
  throw std::runtime_error("Unexpected number of elements to initialize: " +
                       std::to_string(n));
</code></pre>
<p>and</p>
<pre><code>if (n &lt;= 1) // should never happen. but just in case, I don't want to leak
  free(p);
</code></pre>
<p>Are a waste of time. You have already guaranteed that <code>n</code> is consistent.</p>
<p>This is particularly bad practice for something that needs optimal work.</p>
<pre><code>if (n &lt;= 1) // should never happen. but just in case, I don't want to leak
  free(p);
</code></pre>
<p>Branching is the single most problematic thing in degradation of performance. If the CPU branch prediction is off then you always pay the price. I would put that check in an <code>assert()</code> that way you can validate when testing but in production you don't need to perform the test.</p>
<h2>Undefined Behavior.</h2>
<p>This will not work:</p>
<pre><code>static free_list_type free_list;
</code></pre>
<p>If you have any <code>std::vector&lt;&gt;</code> that use your allocator that is in the global scope (or any constructors for static storage duration objects that create vectors directly or indirectly with your allocator).</p>
<p>You will need to convert this to a static function:</p>
<pre><code>   static free_list_type getFreeList() {
        static free_list_type free_list;
        return free_list;
   }
</code></pre>
    </div>