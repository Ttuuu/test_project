<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Correctness</h3>

<p>Your function reduces <code>0/0</code> to <code>0</code>, but the result should be "undefined" or "invalid".</p>

<h3>Too many special cases</h3>

<p>Your function distinguishes far too many cases. The process of simplifying a fraction
can be reduced to the following 4 steps:</p>

<ol>
<li>Check for invalid input (denominator is zero).</li>
<li>Remove a common factor from numerator and denominator.</li>
<li>Make the denominator positive (e.g. <code>5/-3 -&gt; -5/3</code>).
(This step can also be omitted, see below.)</li>
<li><em>Finally</em> check if the (reduced) denominator is equal to one (e.g. <code>4/1 --&gt; 4</code>).</li>
</ol>

<p>All other checks (if numerator is zero, comparing absolute values, etc) are
not necessary and automatically handled by the above algorithm.</p>

<h3>Computing the "common factor"</h3>

<p>Your method to compute the common factor of numerator and denominator is</p>

<ul>
<li>Create a list of all factors of the numerator (using a brute-force
algorithm that checks each possible factor).</li>
<li>Create a list of all factors of the denominator.</li>
<li>Create a list of the common factors.</li>
<li>Take the largest element of that list.</li>
</ul>

<p>But you don't need <em>all</em> factors, only the largest common one. So it would
be faster to start with the largest possible common factor and stop as soon
a common factor is found. This would roughly look like:</p>

<pre><code>#find greatest common divisor for numerator and denominator, except 1:
common_factor = 1
for i in xrange(min(abs(numer), abs(denom)), 1, -1):
    if numer % i == 0 and denom % i == 0:
         common_factor = i
         break
</code></pre>

<p>On my MacBook Pro, this reduces the time to simplify the fraction
<code>12345678/87654321</code> already from about 10 seconds to 1 second.</p>

<p>But you can do much better. The <a href="http://en.wikipedia.org/wiki/Euclidean_algorithm" rel="nofollow noreferrer">Euclidean algorithm</a>
is a well-known, simple and fast algorithm to compute the greatest common
divisor of integers, and it is easy to implement.</p>

<p>The reduces the time to simplify <code>12345678/87654321</code> to about 0.025 seconds.</p>

<h3>Putting it all together:</h3>

<p>There are probably many Python implementations of the Euclidean algorithm,
I copied one from  <a href="https://stackoverflow.com/a/11175154/1187415">https://stackoverflow.com/a/11175154/1187415</a>:</p>

<pre><code>def gcd(a, b):
    """Calculate the Greatest Common Divisor of a and b.

        Unless b==0, the result will have the same sign as b (so that when
        b is divided by it, the result comes out positive).
        """
    while b:
        a, b = b, a % b
    return a
</code></pre>

<p>As you can see, dividing the denominator by the common divisor gives a 
<em>positive</em> result, which means that step #3 it not necessary anymore.
This also means that the fraction is already simplified exactly if the
common divisor of numerator and denominator is equal to one.</p>

<p>So your main method reduces to</p>

<pre><code>def simplify_fraction(numer, denom):

    if denom == 0:
        return "Division by 0 - result undefined"

    # Remove greatest common divisor:
    common_divisor = gcd(numer, denom)
    (reduced_num, reduced_den) = (numer / common_divisor, denom / common_divisor)
    # Note that reduced_den &gt; 0 as documented in the gcd function.

    if reduced_den == 1:
        return "%d/%d is simplified to %d" % (numer, denom, reduced_num)
    elif common_divisor == 1:
        return "%d/%d is already at its most simplified state" % (numer, denom)
    else:
        return "%d/%d is simplified to %d/%d" % (numer, denom, reduced_num, reduced_den)
</code></pre>
    </div>