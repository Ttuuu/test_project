<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>About your notes</h1>

<blockquote>
  <p>There are no error messages to handle ill-formed input. We were required by those who gave us the assignment to focus on solving the problem, rather than making it become an input-checking exercise. So I'll pretty much assume the input is well-formatted throughout the program</p>
</blockquote>

<p>It is a good excercise for yourself to add input checking. Invalid input is rather common, and if you don't check it, your program might crash (which is actually the best possible outcome), or worse: the program seems to run fine but you might get incorrect results.</p>

<blockquote>
  <p>There are no prompt texts like Number of states? due to the program being corrected by an automatic platform that matches the exepcted output with the one from the program.</p>
</blockquote>

<p>That's actually a good thing, if it's more likely that someone will pipe a file to the program's standard input instead of typing in manually while the program is running.</p>

<h1>Allocate a whole array in one go</h1>

<p>You are creating an array of pointer to <code>State</code>s, and then while reading each line of input, you allocate the actual memory for each individual <code>State</code>. You can just as well allocate the memory for all <code>State</code>s in one go:</p>

<pre><code>State *automaton = malloc(n * sizeof(*automaton));
</code></pre>

<p>Note that <code>sizeof(*automaton)</code> is equal to <code>sizeof(State)</code>, but prefer to use an actual variable to get the size of a type. The advantage of the former is that if you ever change the type of <code>automaton</code>, that you only have to do it in one place instead of multiple places.</p>

<p>In the <code>for</code>-loop, you  can now just use <code>.</code> instead of <code>-&gt;</code> to access the array members.</p>

<h1>Prefer <code>strdup()</code> over manual allocation + copying of strings</h1>

<p>While it's not part of the C standard, POSIX.1-2001-compliant C libraries provide a function named <code>strdup()</code> that will copy a string for you. So instead of doing a <code>malloc()</code> and <code>strcpy()</code>, you could write:</p>

<pre><code>automaton[i].sName = strdup(token);
</code></pre>

<p>Note how you no longer have to check the length of the string manually. This would fix the bug in <code>appendTransition()</code>, where you forgot to add <code>+ 1</code> to the length of the string when calling <code>malloc()</code>.</p>

<h1>Enable compiler warnings and fix all warnings it prints</h1>

<p>Even if the warnings seem harmless, do fix them. It usually just ensures you keep your code clean (like getting rid of the unused <code>stateName</code> variable), but some warnings might actually point to potential bugs in your program.</p>

<h1>Use <code>fgets()</code> to read lines</h1>

<p>Instead of using <code>scanf()</code> and <code>getch()</code> to read lines, I recommend you use <code>fgets()</code> instead. It's designed to read in complete lines. The only issue that you have to deal with is that it stores the newline character (<code>\n</code>) in the destination string as well. Also make sure that you pass the correct size of the buffer. For example:</p>

<pre><code>fgets(line, sizeof(line), stdin); // Please do check the return value of fgets()!
size_t len = strlen(line);
if (len &amp;&amp; line[len - 1] == '\n')
    line[len - 1] = '\0'; // Removes trailing newline.
</code></pre>

<h1>Consider not hardcoding the check for terminal states in <code>evaluate()</code></h1>

<p>It would make <code>evaluate()</code> simpler to maintain and more flexible if you didn't hardcode the knowledge that state names starting with <code>"F"</code> indicate terminal states. Instead, create another function to check this, and call that inside <code>evalute()</code> like so:</p>

<pre><code>if(is_terminal(st))
    return 1;
</code></pre>

<p>Note that you don't need the comment anymore explaining what that <code>if</code>-statement does.
Then you can decide how to implement <code>is_terminal()</code>. You can move the check for the name there:</p>

<pre><code>bool is_terminal(const State *st) {
    return st-&gt;sName[0] == 'F';
}
</code></pre>

<h1>Use <code>const</code> where appropriate</h1>

<p>Whenever a variable is not supposed to be changed after being initialized, add <code>const</code> to its declaration. For example, if you use <code>strdup()</code> as mentioned above, you could make the strings stored in <code>Transition</code> and <code>State</code> <code>const</code>, like so:</p>

<pre><code>typedef struct transition {
    char c;
    const char *newState;
    struct transition *nextPtr;
} Transition;

typedef struct state {
    const char *sName;
    Transition *tList;
} State;
</code></pre>

<p>And functions that take a string argument should be annotated as well, for example:</p>

<pre><code>State *createNewState(const char *stateName) {
    ...
    newState-&gt;sName = strdup(stateName);
    ...
}
</code></pre>

<p>Once you have parsed the state definitions from the input, the functions that evaluate the automaton should not modify them. So you should be able to write the following (assuming you allocated memory for states using a single <code>malloc()</code> call):</p>

<pre><code>const State *move(const State *automaton, int nStates, const State *currState, char ch) {
    ...
}

int evaluate(const State *automaton, int nStates, const char *line) {
    ...
}
</code></pre>

<p>The <code>const</code> annotation will allow the compiler produce better optimized code, and will generate errors when you accidentally do try to write to them.</p>

<h1>Use <code>static</code> where appropriate</h1>

<p>Functions and variables that are only used in the same <code>.c</code>-file where they are defined should be made <code>static</code>. This helps the compiler produce more optimized code, and prevents namespace pollution in larger projects. If you have everything in one <code>.c</code>-file, then every function and every global variable can be made <code>static</code>, except <code>main()</code> itself.</p>

<h1>Improving performance</h1>

<p>Your function <code>move()</code> is quite inefficient, it scales as O(S+T), where S is the number of states and T the number of possible transitions per state. It is possible to turn this into an O(1) operation. Instead of having a linked list of transitions, each storing the name, you could have an array of pointers to <code>State</code>s, indexed by the input character, like so:</p>

<pre><code>typedef struct state {
    const char *sName;
    State *transitions[128]; // handle all 7-bit ASCII characters
} State;
</code></pre>

<p>Assuming you fill in the <code>transitions</code> array correctly when parsing the state definitions, you can then change <code>move()</code> to:</p>

<pre><code>const State *move(const State *automaton, int nStates, const State *currState, char ch) {
    return currState-&gt;transitions[ch];
}
</code></pre>

<p>This solution is very fast, but it might waste quite a bit of memory if you only have a few valid transitions per state.</p>

<p>Note that the above solution didn't require comparing state names. You could avoid that in your solution as well, by using <code>struct state *newState</code> in <code>Transition</code>, instead of storing the state name. Of course, the reason you went for this solution is that it simplifies parsing of the state definitions. However, it should be easy to modify the state definition parser to also handle previously unseen states after the first <code>;</code>.</p>
    </div>