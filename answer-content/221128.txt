<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Note that <a href="https://gitlab.common-lisp.net/alexandria/alexandria" rel="nofollow noreferrer"><em>Alexandria</em></a> defines <code>random-elt</code> (and <code>whichever</code>).</p>

<p>My only complain is that <code>random-element</code> does too much, both digits and characters.
This would be the kind of use cases where I would rely on generic functions:</p>

<pre><code>(defgeneric generate (type &amp;key &amp;allow-other-keys))

(defmethod generate ((type (eql :number/offset)) &amp;key offset length)
  (+ offset (random length)))

(defmethod generate ((type (eql :number/around)) &amp;key (origin 0) (length 1.0))
  (generate :number/offset
            :offset (- origin (/ length 2))
            :length length))

(defmethod generate ((type (eql :ascii)) &amp;key case)
  (multiple-value-bind (offset length)
      (ecase case
        (:down (values 97 26))
        (:up (values 65 26))
        (:both (values 65 52)))
    (code-char
     (generate :number/offset :offset offset :length length))))

(defmethod generate ((type (eql :digit)) &amp;key radix)
  (random radix))

(defmethod generate ((type (eql :choose-from)) &amp;key sequence)
  (random-elt sequence))
</code></pre>

<p>For example:</p>

<pre><code>(list (generate :ascii :case :up)
      (generate :digit :radix 8)
      (generate :number/around :origin 0 :length 10)
      (generate :choose-from :sequence #(5 6 8)))
</code></pre>
    </div>