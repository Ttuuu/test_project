<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Overall Impression</h2>

<p>The code displays some good programming practices or habits. It is generally well structured, with well thought out functions. Good definitions of <code>typedef</code>s. The type <code>size_t</code> is used to index arrays instead of <code>int</code>.</p>

<p>There are several potential bugs in the code. They are <code>potential</code> because they could happen, not that they would happen as the code is written currently.</p>

<h2>Error Checking</h2>

<p>While the return values of <code>malloc()</code> are checked, there should be some additional error checking in 2 places in the code. The first is that in <code>Polynomial* create_poly(size_t capacity)</code> before any memory allocation takes place, the value of the parameter <code>capacity</code> should be checked that is larger than zero, if not the memory allocation should not take place.</p>

<p>The second place for additional error checking is in <code>main()</code>. If <code>p</code> after the call to <code>create_poly()</code> is NULL, assignments to <code>p</code> will fail, possibly causing a catastrophic error. This is one potential bug.</p>

<h2>Memory Allocation</h2>

<p>It might be better to use <a href="https://en.cppreference.com/w/c/memory/calloc" rel="nofollow noreferrer">calloc()</a> rather than <code>malloc()</code> in the following statement:</p>

<pre><code>    coeffs = malloc(capacity * sizeof(real));
</code></pre>

<p>The memory allocation function <code>calloc(size_t count, size_t size)</code> was written with arrays in mind. In addition to being slightly more readable, <code>calloc()</code> sets all of the values to zero when the array is allocated, which means the values in the array are initialized.</p>

<pre><code>    real* coeffs = calloc(capacity, sizeof(*coeffs));
</code></pre>

<p><em>Note</em> that in the example of <code>calloc()</code> usage the <code>sizeof()</code> argument is what <code>coeffs</code> points to. This allows who ever is maintaining the code to change the type of <code>coeffs</code> without have to modify more than the type itself. If the type <code>real</code> was used in the statement, there would be 2 places to change the code and not one.</p>

<h2>Unnecessary Statement</h2>

<p>In the function <code>void delete_poly(Polynomial* p)</code> the statement <code>p = NULL;</code> is unnecessary. Since <code>p</code> was passed in instead of a pointer to <code>p</code> it only affects the local value of <code>p</code>, it does not affect the value of <code>p</code> in <code>main()</code>.</p>

<h2>Initialize Variables When They are Declared</h2>

<p>In at lest 2 places in the code variables are declared on one line and then initialized on another line like the initialization is an after thought. A better habit to get into is to initialize the variables as they are declared. This can lead to less bugs and less debugging of code.</p>

<p>In <code>main()</code>:</p>

<pre><code>    Polynomial* p;
    const real EPS = pow(10, -7);
    p = create_poly(3);
</code></pre>

<p>Versus</p>

<pre><code>    const real EPS = pow(10, -7);
    Polynomial* p = create_poly(3);
</code></pre>

<p>In <code>create_poly()</code></p>

<pre><code>    real* coeffs;

    coeffs = malloc(capacity * sizeof(real));
    if (coeffs == NULL) return NULL;
</code></pre>

<p>Versus</p>

<pre><code>    real* coeffs = malloc(capacity * sizeof(real));
    if (coeffs == NULL) return NULL;
</code></pre>

<h2>Magic Numbers</h2>

<p>There are Magic Numbers in the <code>main()</code> function (10 and -7), it might be better to create symbolic constants for them to make the code more readable and easier to maintain. These numbers may be used in many places and being able to change them by editing only one line makes maintenance easier.</p>

<p>Numeric constants in code are sometimes referred to as <a href="https://en.wikipedia.org/wiki/Magic_number_(programming)" rel="nofollow noreferrer">Magic Numbers</a>, because there is no obvious meaning for them. There is a discussion of this on <a href="https://stackoverflow.com/questions/47882/what-is-a-magic-number-and-why-is-it-bad">stackoverflow</a>.</p>

<p>The code already has a symbolic constant defined in <code>real newton_raphson_poly(const Polynomial*const p, real x0, real eps)</code>.</p>

<pre><code>    const int max_iter = 100;
</code></pre>

<p>Write the code consistently.</p>

<h2>Possible Optimizations</h2>

<p>The code in <code>main()</code> could be more flexible or extensible if it modified to create an array of coefficients and get the size of the array as the capacity. The code to copy the coefficients into the Polynomial struct could be an additional function, or it could also be added to <code>create_poly(size_t capacity, real coeffs[])</code>.</p>

<pre><code>int main()
{
    real coeffs[] = {-2, 0, 1};
    size_t capacity = sizeof(coeffs) / sizeof(*coeffs);

    const real EPS = pow(10, -7);
    Polynomial* p = create_poly(capacity);

    real* poly_coeffs_ptr = &amp;p-&gt;coeffs[0];
    real* coeffs_ptr = &amp;coeffs[0];
    for (size_t i = 0; i &lt; capacity; i++)
    {
        *poly_coeffs_ptr = *coeffs_ptr;
    }

    printf("The result of sqrt(2) is given by the root of\n");
    print(p);
    printf("Its value is: %f \n", newton_raphson_poly(p, 1.0, EPS));

    delete_poly(p);
}
</code></pre>

<p>Reordering of <code>malloc()</code>s might lead to less code.</p>

<pre><code>Polynomial* create_poly(size_t capacity)
{
    if (capacity &gt; 0)
    {
        Polynomial* poly = malloc(sizeof(Polynomial));
        if (poly != NULL)
        {
            poly-&gt;coeffs = calloc(capacity, sizeof(real));
            if (poly-&gt;coeffs == NULL)
            {
                free(poly);
                poly = NULL;
            }
        }
        return poly;
    }

    return NULL;
}
</code></pre>
    </div>