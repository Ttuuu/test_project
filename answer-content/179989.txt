<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You don't show us the <code>BlockCipher</code> base class, but it appears that it imposes a terrible interface on us:</p>

<pre><code>void encrypt(const uint8 input[], const uint8 key[], uint8 output[])
    const override;

void decrypt(const uint8 input[], const uint8 key[], uint8 output[])
    const override;
</code></pre>

<p>I'm assuming that <code>uint8</code> is a simple typedef of <code>std::uint8_t</code> (though not sure why you don't go the whole hog and call it <code>u8</code> as many abbreviators do).</p>

<p>The problem here is that we don't get any compile-time checking of the correctness of the arguments.  As our input and output block sizes are fixed at 128 bits, I'd expect something more like:</p>

<pre><code>void encrypt(const uint8 (&amp;input)[16], const uint8 key[], uint8 (&amp;output)[16])
    const override;
// and a similar decrypt
</code></pre>

<p>Or possibly even</p>

<pre><code>void encrypt(const InputBlock&amp; input, const Key&amp; key, OutputBlock&amp; output)
    const override;
</code></pre>

<p>where the array types can be defined by <code>BlockCipher</code> if it's declared as</p>

<pre><code>class BlockCipher&lt;std::size_t KeySize,
                  std::size_t InputSize,
                  std::size_t OutputSize = InputSize&gt;
</code></pre>
    </div>