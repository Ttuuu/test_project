<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Thanks for sharing your code.</p>

<p>I like the <code>enum</code> approach but it could be improved.</p>

<p>My problem with your approach is that you handle the drink size like an ingredient. </p>

<p>On the other hand you separate the "XL" price of the creamer from the creamer itself where it might be a property of the creamer.</p>

<p>So I'd create a common interface for the coffee types and the creamers, so that I can hold them in the same List:</p>

<pre><code>interface Ingredient{
  /** @return the ingredient price depending on the drinks size */
  double getPrice(Size size);
} 
</code></pre>

<p>The creamer <code>enum</code> implements this interface:</p>

<pre><code>enum Creamer implements Ingredient {
    NONE("None"){
       @override
       public double getPrice(Size size){
           return 0.0; // same value for all
       }
    },
    MILK("Milk", 0.50, 0.65, 0.70, 0.75),
    HALF_N_HALF("Half and Half", 0.25, 0.45, 0.55, 0.60);

    private final double[] prices;
    private final String name;
    Creamer(String name, double ... prices){
      this.name = name;
      this.prices = prices;
    }
    @override
    public double getPrice(Size size){
       return prices[size.ordinal()]; // enum Size should have a dedicated getIndex() method to be independent from order in the enum.
    }
    public String getName() {
        return name;
    }
}
</code></pre>

<p>The my coffee type type will also implement this interface since it no problem for the implementer to ignore the size parameter. Also it makes it easy to introduce size depended prices for the coffees too, but this is a side effect, not intended:</p>

<pre><code>enum Coffe implements Ingredient {

    CAFFEE_AMERICANO("Coffee", .75),
    CAFFEE_LATTE("Caffee Latte" , .50),
    CAFFE_MOCHA("Caffee Mocha" , .65),
    CAPPUCCINO("Cappuccino" , .85),
    COFFEE("Caffee" , .95),
    DECAF_COFFEE("Decaf Coffee" , .45);

    private final String name;
    private final double unitPrice;

    private Coffee(String name, double unitCost)
    {
        this.name = name;
        this.unitPrice = unitCost;
    }

    public String getName() {
        return name;
    }

    @override
    public double gePrice(Size size) {
        return unitPrice;
    }
}
</code></pre>

<p>Having this I can collect coffee and creamer in a <code>Collection&lt;Ingredient&gt;</code>  (rather than in a <code>Map</code>) and pass this list along with the selected size to the <code>PricingEngine</code>:</p>

<pre><code>// ...
Collection&lt;Ingredient&gt; myCoffee = new HasSet&lt;&gt;();
myCoffee.add(askForCoffeeType());
int size = askForSize();
myCoffee.add(askForCreamer());

double coffeePrice = new PricingEngine()
                      .priceBasedOnSize(myCoffee, size);
reportToCustomer(coffeePrice);
// ...
</code></pre>

<p>.</p>

<pre><code>public class PricingEngine {

    public static double priceBasedOnSize(Collection&lt;Ingredient&gt; ingredients, int size) {
        double totalCost = 0.0;
        for(Ingredient ingredient : ingredients)
            totalCost += ingredient.getPrice(size);
        return totalCost;
        // alternative with Java8
        return ingredients.stram().
                          .mapToDouble(ingredient.getPrice(size))
                          .sum();
    }

}
</code></pre>

<p>Benefit:  </p>

<ul>
<li>no differentiation between coffee and creamer.</li>
<li>shorter</li>
<li>supports more ingredient types (e.g. optional "flavors") without change. But again: this is a side effect, not intended.</li>
</ul>
    </div>