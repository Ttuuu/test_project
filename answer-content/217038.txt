<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There might be a reason why you used a <code>List&lt;Tuple&lt;string ,double, double&gt;&gt;</code>. E.g. if you need to pass the data to an existing library or your UI needs to bind to a list. Otherwise I would recommend to create a dedicated class</p>

<pre><code>public class RiskStatistics
{
    public double ArithmeticMeanMonthly { get; set; }
    public double ArithmeticMeanAnnual { get; set; }

    public double AverageGainMonthly { get; set; }
    public double AverageGainAnnual { get; set; }

    public double AverageLossMonthly { get; set; }
    public double AverageLossAnnual { get; set; }
}
</code></pre>

<p>Since the properties are named, there's no need for magic strings. This makes the creation and usage of the risk matrix less convoluted:</p>

<pre><code>public Dictionary&lt;int, RiskStatistics&gt; RiskMatrixByFunds(
    Dictionary&lt;int, IEnumerable&lt;double&gt;&gt; returnsLists)
{
    var riskMatrixDict = new Dictionary&lt;int, RiskStatistics&gt;();

    foreach (KeyValuePair&lt;int, IEnumerable&lt;double&gt;&gt; entry in returnsLists) {
        var risk = new RiskStatistics();
        (risk.ArithmeticMeanMonthly, risk.ArithmeticMeanAnnual) = ArithmeticMean(entry.Value);
        (risk.AverageGainMonthly, risk.AverageGainAnnual) = AverageGain(entry.Value);
        (risk.AverageLossMonthly, risk.AverageLossAnnual) = AverageLoss(entry.Value);
        riskMatrixDict.Add(entry.Key, risk);
    }
    return riskMatrixDict;
}
</code></pre>

<hr>

<p>You could also calculate the annual values on the fly. This would make the creation even easier. Here the adapted average gain properties as an example:</p>

<pre><code>private static readonly double Sqrt12 = Math.Pow(12, 0.5);

public double ArithmeticMeanMonthly { get; set; }
public double ArithmeticMeanAnnual =&gt; ArithmeticMeanMonthly * Sqrt12;
</code></pre>

<p>With this adapted <code>RiskStatistics</code> class, you could directly assign from the extension methods and skip the methods returning tuples.</p>

<pre><code>var risk = new RiskStatistics {
    ArithmeticMeanMonthly = entry.Value.Mean(),
    AverageGainMonthly = entry.Value.GainMean(),
    AverageLossMonthly = entry.Value.LossMean()
};
riskMatrixDict.Add(entry.Key, risk);
</code></pre>

<p>The annual values are read-only and need not to be assigned.</p>
    </div>