<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I suggest this solution:</p>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>console.log(powerset([1, 2, 3, 4]));

function powerset(set, result) {
  if (!result) {
    var begin = true;
    result = [];
  }
  if (set.length) {
    result = set.reduce(function(result, current, index, array) {
      var subset = array.slice(0);
      result.push(JSON.stringify(subset.splice(index, 1)));
      powerset(subset, result);
      return result;
    }, result);
  }
  result.push(JSON.stringify(set));
  if (begin) {
    result = result
      .reduce(function(result, current) {
        if (result.indexOf(current) == -1) {
          result.push(current);
        }
        return result;
      }, [])
      .map(function(current) {
        return JSON.parse(current);
      });
  }
  return result;
}</code></pre>
</div>
</div>


<p>Regarding your three points:</p>

<blockquote>
  <p>Make this algorithm more efficient</p>
</blockquote>

<p>Actually the one used in my proposed code is not quite different:</p>

<ul>
<li>like yours, it successively processes each member of the given set, recursively sub-processing the set of all other members</li>
<li>and like yours it uses JSON.stringify on each resulting member to avoid duplicates</li>
</ul>

<blockquote>
  <p>Make this code easier to understand</p>
</blockquote>

<p>Here are the main differences:</p>

<ul>
<li><p>there is a unique function, and the whole main process part is very compact:  </p>

<p><code>if (set.length) {
    result = set.reduce(function(result, current, index, array) {
      var subset = array.slice(0);
      result.push(JSON.stringify(subset.splice(index, 1)));
      powerset(subset, result);
      return result;
    }, result);
  }
result.push(JSON.stringify(set));</code><br>
From the current set, it pushes into result each of its members, recursively sub-processes the subset of all other members, and finally pushes the entire set itself.</p></li>
<li>also it pushes JSON.stringified members instead of the original members: this way, it becomes easy to drop duplicates at end, before turning members back to their real value in the final result.</li>
</ul>

<blockquote>
  <p>Make my code shorter</p>
</blockquote>

<p>It results in a much more concise code. Note that, ironically, the final cleaning process uses more lines than the main process! I hope this might be improved to end with a yet more recuded code.</p>
    </div>