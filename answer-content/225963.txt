<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Write useful comments</strong></p>

<pre><code>carryingCapacities = new ArrayList&lt;Integer&gt;(); // create arraylist for the carrying capacities of ships
strengths = new ArrayList&lt;Integer&gt;(); //create arraylists for strengths and weights of units
weights = new ArrayList&lt;Integer&gt;(); //create arraylists for weights
sc = new Scanner(new File(input)); // load my input from a textfile
numberOfShips = sc.nextInt();  // load the number of ships
for (int i = 0; i &lt; numberOfShips; i++) { //add carrying capacities to arraylist
...
</code></pre>

<p>All these comments (and pretty much all the others too, I left them out for brevity) are redundant english language explanations of what the code does. They add no value. Instead they make the code harder to read by interrupting the code.</p>

<p>When people say code should be self documenting, it means the code should tell you what it does. This is done by using names that describe what a field contains or what a method does (and you've got that nailed down pretty well). Comments should not repeat that, instead the comments should explain <strong>why</strong> the code does what it does because that is something that cannot sometimes be expressed with code only.</p>

<p>There is no need to explain that data is read from a file when you have code that declares a scanner and a file, or that an ArrayList is being created when you call <code>new ArrayList&lt;&gt;()</code>.Â´</p>

<p>Also, end-of-line-comments are the hardest ones to read, write and maintain. Avoid them.</p>
    </div>