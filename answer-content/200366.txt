<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>All in all well-written and mostly self-explanatory code. However, there are some remarks:</p>

<h1>Negative tests</h1>

<p>You already provide <code>WouldOverlap</code> as a possible error, but you don't use it in <code>insert</code> or <code>add</code>. Your tests cannot check this at the moment, as they handle perfectly valid and sane code. However, real code contains errors, and we should check that our code catches those.</p>

<p>For those tests, use the <a href="https://doc.rust-lang.org/book/second-edition/ch11-01-writing-tests.html#checking-for-panics-with-should_panic" rel="nofollow noreferrer"><code>should_panic</code></a> attribute, e.g.</p>

<pre><code>#[test]
#[should_panic(expected = "WouldOverlap")]
fn bad_insertion() {
    let mut bfs = BitFieldSet::new(8).unwrap();
    bfs.add(PATH_TYPE_POS, 1).unwrap();
    bfs.add(PATH_TYPE_POS, 1).unwrap();
}
</code></pre>

<h1>Magic numbers are semi-evil</h1>

<p>In <code>new</code>, you assume that every byte has <code>8</code> bits. That's true for all platforms <a href="https://forge.rust-lang.org/platform-support.html" rel="nofollow noreferrer">where Rust is supported</a>, so it's fine, but there were some platforms where <a href="https://en.cppreference.com/w/c/types/limits" rel="nofollow noreferrer"><code>CHAR_BIT</code></a> isn't <code>8</code>.</p>

<p>For documentation purposes, I'd suggest you give the stray <code>8</code> a name, e.g. <code>const BITS_PER_BYTE : usize = 8</code>.</p>

<h1>Endianess</h1>

<p>If the code is used on both little endian and big endian architectures, the underlying <code>StorageType</code> will get filled in a different way. Keep that in mind if you allow direct access to <code>storage</code> at some point, for example with <code>self.storage.to_be()</code>.</p>

<h1>Misleading types</h1>

<p>Your <code>pos</code> and <code>width</code> aren't storages. They are indices and length. Yet we call them <code>StorageType</code>. The <code>pos</code> and <code>width</code> should be independent from the underlying storage.</p>

<h1>Bits and bytes</h1>

<p>You mix bits and bytes in the following line:</p>

<pre><code>let data_too_large = mem::size_of::&lt;D&gt;() &gt; self.num_bits
</code></pre>

<p>After all, <code>num_bits</code> counts bits, wheras <code>mem::size_of</code> returns bytes. We can use the mentioned constant here:</p>

<pre><code>let data_too_large = mem::size_of::&lt;D&gt;() * BITS_PER_BYTE &gt; self.num_bits;
</code></pre>

<h1>Duplicate information</h1>

<p><code>BitField</code> is used as a value in your hash map, but the corresponding key is always the <code>pos</code>. If there is no case where those two differ, you can probably use a <code>HashMap&lt;Position, Width&gt;</code> instead.</p>

<p>Also, you probably want to implement <code>add</code> in terms of <code>insert</code>.</p>

<h1>Document all public functions</h1>

<p>Every public function should get documented.</p>
    </div>