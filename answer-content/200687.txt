<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>What you did well</h2>

<p>You packaged the code into a <code>main</code> function and three helper functions, each with a specific purpose.</p>

<h2>Style</h2>

<ul>
<li><p>The most important function to define for this task, <code>is_valid_mmddyyyy(date)</code>, isn't defined!  That would make your work reusable.</p></li>
<li><p>The comments are excessive, and mainly serve to guide Python beginners.  Instead of those comments, it would be better to document the purposes of the functions instead, as <a href="https://www.python.org/dev/peps/pep-0257/" rel="nofollow noreferrer">docstrings</a>.</p></li>
<li><p>You should rarely need to write <code>True</code> or <code>False</code> explicitly in your code.  The pattern</p>

<blockquote>
<pre><code>if day &gt;= 1 and day &lt;= 31:
    return True
else:
    return False
</code></pre>
</blockquote>

<p>… would be better written as <code>return 1 &lt;= day &lt;= 31</code>.</p>

<p>Similarly,</p>

<blockquote>
<pre><code>if monthvalidity == True and dayvalidity == True and yearvalidity == True:
</code></pre>
</blockquote>

<p>… would be better written as</p>

<pre><code>if monthvalidity and dayvalidity and yearvalidity:
</code></pre></li>
<li><p>The names <code>monthcheck</code>, <code>daycheck</code>, and <code>yearcheck</code> don't quite convey how they behave for valid or invalid inputs.  Do they print error messages?  Do they raise exceptions?  It would be better to name them <code>is_valid_month</code>, <code>is_valid_day</code>, and <code>is_valid_year</code> to make it clear that they are <a href="https://en.wikipedia.org/wiki/Predicate_%28mathematical_logic%29" rel="nofollow noreferrer">predicates</a> (functions that return either <code>True</code> or <code>False</code> with no side-effects).</p></li>
<li><p>It's annoying that <code>monthcheck(month)</code> and <code>daycheck(month, day)</code> accept integers as inputs, but <code>yearcheck(year)</code> accepts a string.</p></li>
<li><p><code>monthlist1</code> and its friends are not optimally named, thus necessitating comments like <code>## monthlist for months with 31 days</code>.  Also, <code>monthlist3</code> is, deceptively, not a list.  A slightly better idea:</p>

<pre><code>months_with_31_days = [1, 3, 5, 7, 8, 10, 12]
months_with_30_days = [4, 6, 9, 11]
months_with_28_days = [2]

if month in months_with_31_days:
    return 1 &lt;= day &lt;= 31
if month in months_with_30_days:
    return 1 &lt;= day &lt;= 30
if month in months_with_28_days:
    return 1 &lt;= day &lt;= 28
</code></pre></li>
</ul>

<h2>Validation quality</h2>

<ul>
<li><p>You assume that there will be two <code>/</code> characters in the input.  If there are fewer parts or more parts, then it crashes with a <code>ValueError</code>.</p></li>
<li><p>If the month or day are not integers, then it crashes with a <code>ValueError</code>.</p></li>
<li><p>You only care about the length of the year, so <code>1/1/zero</code> and <code>1/1/3.14</code> are both considered valid dates.</p></li>
<li><p>As you say, you haven't bothered to support leap years.  But the design of the <code>daycheck</code> function makes it hard to enhance the code to add leap year support.</p></li>
</ul>

<h2>Suggested solution</h2>

<p>The main challenge is to determine how many days there are in a month.  Your <code>daycheck</code> kind of does that, but falls short in two respects:</p>

<ul>
<li><p>It assumes that the <code>month</code> is valid.  For <code>daycheck</code> to do its job, it needs to perform a lookup anyway, so <code>monthcheck</code> doesn't really need to be a separate function.  You just need to indicate that the month is not in the lookup table.</p></li>
<li><p>If you wanted to support leap years, the month alone is insufficient: you would also need to know the year.</p></li>
</ul>

<p>Keeping that in mind, I would redesign the program this way:</p>

<pre><code>def days_in_month(year, month):
    """
    Given a year and month as integers, return the last day of that month
    (assuming the Gregorian calendar).  Raise ValueError if the month is
    invalid.
    """
    if month == 2:
        is_leap_yr = (year % 4 == 0) and (year % 100 != 0 or year % 400 == 0)
        return 29 if is_leap_yr else 28
    try:
        return {
            1: 31,        3: 31,  4: 30,  5: 31,  6: 30,
            7: 31, 8: 31, 9: 30, 10: 31, 11: 30, 12: 31
        }[month]
    except KeyError:
        raise ValueError('Invalid month')


def is_valid_mmddyyyy(date):
    """
    Test whether the date is a string in mm/dd/yyyy format representing a valid
    date (assuming the Gregorian calendar).
    """
    try:
        mm, dd, yyyy = [int(part) for part in date.split("/")]
        return 0 &lt; yyyy &lt;= 9999 and 0 &lt; dd &lt;= days_in_month(yyyy, mm)
    except ValueError:
        # Too few slashes, too many slashes, non-integer part, or invalid month
        return False


def main():
    date = input("Enter the date in mm/dd/yyyy format: ")
    valid = is_valid_mmddyyyy(date)
    print("The date {0} is {1}.".format(date, "valid" if valid else "invalid"))

if __name__ == '__main__':
    main()
</code></pre>
    </div>