<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I did a recursive solution using powers of two times the divisor. Essentially, it finds the highest <code>divisor * 2^n</code> that still fits in the dividend, subtracts it and repeats.</p>

<pre><code>const divide = (dividend, divisor) =&gt; {
    if (dividend === -2147483648 &amp;&amp; divisor === -1) return 2147483647;
    const result = dividePositive(Math.abs(dividend), Math.abs(divisor))
    return dividend &lt; 0 === divisor &lt; 0 ? result : 0 - result
};

const dividePositive = (dividend, divisor) =&gt; {
    if(dividend &lt; divisor) return 0
    let subtract = divisor, result = 1
    while(subtract &lt; dividend-subtract) {
        subtract += subtract
        result += result
    }
    return result + dividePositive(dividend-subtract, divisor)
}
</code></pre>

<p>I've tried tricks like using <code>subtract &lt;&lt;= 1</code> instead of <code>subtract += subtract</code>, having an extra while loop instead of the recursion, saving the powers of two in tables etc. but never achieved anything that would be noticeably faster.</p>

<p>For reference, a version saving the intermediate results if you want to tweak further. Note that <code>n &lt;&lt;= 1</code> flips around to negative numbers at 2^32, giving you a bit of a headache with handling high numbers.</p>

<pre><code>var divide = function(dividend, divisor) {
    if (dividend === -2147483648 &amp;&amp; divisor === -1) return 2147483647;
    flipSign = dividend &lt; 0 != divisor &lt; 0
    dividend = Math.abs(dividend);
    divisor = Math.abs(divisor);

    var subtract = divisor, result = 1
    powers = [], results = []
    while(subtract &lt;= dividend) {
        powers.push(subtract)
        results.push(result)
        subtract += subtract;
        result += result;
    }
    final = 0;
    for(var i = powers.length -1; i &gt;= 0; i--) {
        if(dividend &gt;= powers[i]) {
            dividend -= powers[i];
            final += results[i];
        }
    }
    return flipSign ? 0 - final : final
};
</code></pre>

<p>Copy paste the code to <a href="https://leetcode.com/problems/divide-two-integers/" rel="nofollow noreferrer">https://leetcode.com/problems/divide-two-integers/</a> and submit to run and get the time results.</p>
    </div>