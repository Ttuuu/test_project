<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<p>I want to abstract some code...</p>
</blockquote>
<p>What is it that you actually want to abstract?</p>
<p>Unless you are going to pass an instance of <code>ContactCanBeContactedCheck</code> class to someone who expects a <code>callable</code>, you shouldn't implement it through <code>__invoke</code> method.</p>
<p>My first though was, why not make it a method of the <code>Contact</code> class?</p>
<pre><code>class Contact
{
  public const NOT_CONTACTABLE_REASON_DECEASED = 1;
  public const NOT_CONTACTABLE_REASON_OPTED_OUT = 2;

  // ...

  public function getNotContactableReason(): ?int
  {
        if ($this-&gt;is_deceased) {
            return static::NOT_CONTACTABLE_REASON_DECEASED;
        }

        if ($this-&gt;opt_out) {
            return static::NOT_CONTACTABLE_REASON_OPTED_OUT;
        }

        return null;
  }
}
</code></pre>
<p>Now it is contained in the class that actualy has the data to tell the reason. Encapsulation is one of the fundamental principles of OOP.</p>
<p>Still, if you need a callable, you can now do just</p>
<pre><code>$callback = fn (Contact $contact): ?int =&gt; $contact-&gt;getNotContactableReason();
</code></pre>
<p>Also your method is trying to do 2 things</p>
<ul>
<li>tell if the contact is contactable</li>
<li>tell the reason why it is not contactable</li>
</ul>
<p>My method only tells the reason why it is not contactable, and null if there is no reason, because the contact <strong>is</strong> contactable. Using this approach you are actually able to tell both those things using just this one method as well. But it is not intent to do two things like in your method. It's just a side effect. And that makes a big difference.</p>
<p>You could add another method that would just tell whether it is contactable regardless of reason, but it is now easy enough to tell from the first method as well, so the second method would be just sugar for <code>$this-&gt;getNotContactableReason() === null</code>.</p>
<p>Notice I started the constants at 1, not 0. Zero is falsey, just like null.
And using zero could then easily lead to mistakes if you use weak comparision.</p>
<pre><code>if ($reason) {...}
</code></pre>
<p>vs.</p>
<pre><code>if ($reason !== null) {...}
</code></pre>
<p>I am wondering though, what you are actually doing with the class and the resulting reason. If the reason ends up in a switch or an if, then the entire method is useless and you should branch your code based directly on the <code>$is_deceased</code> and <code>$opt_out</code> properties.</p>
<p>Those 3 lines of usage are far from enough to tell what you really need. If I had more, I could target my review much better.</p>
    </div>