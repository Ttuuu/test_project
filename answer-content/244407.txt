<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There are multiple things you could improve in your code.</p>
<h2>The name of the game</h2>
<p>I feel that it'd be better to call your <code>game</code> method <code>run_game</code>. You should also run it multiple times in a while loop, asking the user each time if they want to exit. When they say they want to exit, you can call the <code>results</code> function to display the results.</p>
<h2>The results</h2>
<p>Not only do you never use the <code>results</code> function, but you've indented it too far so it's inside the <code>game</code> function. Make sure it's top-level so that other modules can use it. Also, you have spaces before the <code>print</code> statements, but that's a minor thing.</p>
<p>I assume you're designing this module so that other modules can use it, but if not, make the global variables local and get rid of the <code>if</code> at the end.</p>
<p>Better names for your result variables would be <code>num_wins</code>, <code>num_losses</code>, and <code>num_ties</code>.</p>
<p>Your <code>results</code> function would also be better if it were named <code>print_results</code>, since the current name implies that it <em>returns</em> the results.</p>
<h2>Storing the choices</h2>
<p>First of all, don't name your variables <code>var</code>. <code>choices</code> is a better name. Also, you can just use a list instead of a dictionary, and use the indices to calculate who won. You could also reuse your <code>choices</code> list while taking user input and while choosing a move for the computer.</p>
<pre><code>choices = ['paper', 'scissors', 'rock']
</code></pre>
<p>Also, rather than using the names <code>user</code> and <code>computer</code>, call the variables where you store the user's and computer's choices something like <code>user_move</code> and <code>comp_move</code></p>
<pre><code>user_move = input("Please choice scissors, paper or rock: ")
while user_move not in choices:
        user_move = input("Please choice scissors, paper or rock: ")
comp_move = random.choice(choices)
</code></pre>
<h2><code>one</code> and <code>two</code> and finding the winner</h2>
<p>To get the value associated with a key in a dictionary, you can simply do <code>my_dict[my_key]</code>. It's not necessary to loop through the entire list and not break even once you've found the necessary key. You could have replaced that for loop with this (note that there's no need to use <code>int()</code> on the value)</p>
<pre><code>one = choices[user_move].index(1)
two = choices[comp_move].index(1)
</code></pre>
<p>However, we have changed the <code>choices</code> variable to be a list of strings, and anyways, your logic won't work in case the user selects "rock" and the computer selects "paper", as @ThisIsAQuestion pointed out.</p>
<p>This way accounts for that error (I also renamed <code>one</code> and <code>two</code> to <code>user_ind</code> and <code>comp_ind</code>):</p>
<pre><code>user_ind = choices.index(user_move)
comp_ind = choices.index(comp_move)

if user_ind == comp_ind:
  num_ties += 1
elif user_ind - comp_ind &lt; 2:
  num_wins += 1
else:
  num_losses += 1
</code></pre>
<p>However, this isn't very clear. A better way to do it would be like this, by checking if the computer's move is one index ahead (after using <code>%</code>, of course)</p>
<pre><code>if user_move == comp_move:
  num_ties += 1
elif choices[(choices.index(user) + 1) % len(choices)] == comp_move:
  num_losses += 1
else:
  num_wins += 1
</code></pre>
<p>This second approach treats <code>choices</code> like a cycle rather than just a linear list. The <code>%</code> is to avoid accessing an index beyond the range of the list - it comes back to <code>0</code> if it's <code>3</code> (You can always hardcode <code>3</code> instead of <code>len(choices)</code>).</p>
<h2>The resulting code</h2>
<pre><code>import random

num_wins = 0
num_losses = 0
num_ties = 0

def run_game():
  choices = ['paper', 'scissors', 'rock']
  user_move = input("Please choice scissors, paper or rock: ")
    while user_move not in choices:
      user_move = input("Please choice scissors, paper or rock: ")
  comp_move = random.choice(choices)

  if user_move == comp_move:
    num_ties += 1
    print(f"BOTH with {user_move} - TIE")
  elif choices[(choices.index(user) + 1) % len(choices)] == comp_move:
    num_losses += 1
    print(f"COMPUTER with {comp_move} - WIN!")
  else:
    num_wins += 1
    print(f"USER with {user_move} - WIN!")

def print_results():
  print("You win %d times!" % num_wins)
  print("You lose %d times!" % num_losses)
  print("You tie %d times!" % num_ties)

if __name__ == "main":
  continue = 'y'
  while continue.lower() == 'y':
    run_game()
    continue = input('Enter "y"/"Y" to continue')
  print_results()
</code></pre>
<p>Edit: Using the walrus operator, as Aivar Paalberg suggested, would simplify the while loops.</p>
    </div>