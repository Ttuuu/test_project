<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Interface</h3>
<p>I'm not overly fond of the interface you've defined to the function. I think trying to combine reading integers and reading strings into a single function makes it more difficult to use. For most C code, I think the old guiding principle of UNIX ("do one thing, and do it well") provides excellent guidance. As such, I'd probably have two separate functions, one for reading a string, the other for reading a number.</p>
<p>I haven't tested it to be sure, but at first glance it also looks like if you ask to read a number, it does a poor job of signalling failure. For example, if your file has: <code>foo=0</code> and you try to read <code>foo</code> as a number, it'll set the number to 0, and return 0. But if the file contains <code>foo=Joe</code> instead, it looks to me like it'll do exactly the same.</p>
<p>I'd prefer that if it couldn't convert the rest of the line after the <code>=</code> to a number that it return 1 to indicate that it has failed.</p>
<h3>Memory Allocation</h3>
<p>Since you only use our <code>left</code> and <code>right</code> inside of your function, and free them again before returning, there's probably no need to allocate them on the heap. You can just allocate them as local arrays, and use them. The obvious exception to this would be if you were targeting a tiny micro-controller that might well have less than 256 bytes available on the stack. In that case, however, you usually won't have a file system either, so the entire function becomes irrelevant.</p>
<h3>Standard Library</h3>
<p>I think judicious use of <code>fscanf</code> can simplify the code quite a bit.</p>
<p>For reading a string, it seems like the obvious interface would be to just return the value part of the pair, and if it's not found, return a NULL pointer:</p>
<pre><code>char *read_string(FILE *file, char const *desired_name) { 
    char name[128];
    char val[128];

    while (fscanf(file, "%127[^=]=%127[^\n]%*c", name, val) == 2) {
        if (0 == strcmp(name, desired_name)) {
            return strdup(val);
        }
    }
    return NULL;
}
</code></pre>
<p>When reading a number, we probably need something closer to your original interface, with a return value to indicate success/failure, and receive a pointer to an int where we write the value (if it's found):</p>
<pre><code>int read_int(FILE *file, char const *desired_name, int *ret) {
    char *temp = read_string(file, desired_name);

    char *stop;
    *ret = strtol(temp, &amp;stop, 10);
    int ret_val = stop == NULL || *stop != '\0';
    free(temp);
    return ret_val;
}
</code></pre>
<p>Note that as it stands right now, the return value reflects converting the <em>entire</em> remainder of the line (everything after the <code>=</code>) to the desired number. If part of it can be converted, that part will be written to the destination, but the return will still indicate failure. For example, if you had <code>foo=1234abcd</code>, attempting to read <code>foo</code> as a number would give you <code>1234</code>, but return 1 because the <code>abcd</code> part couldn't be converted.</p>
<p>It would also be possible to simply ignore any trailing garbage, so <code>foo=1234abcd</code> would read the <code>1234</code> part, and return 0 to signal success:</p>
<pre><code>int read_int(FILE *file, char const *desired_name, int *ret) {
    char *temp = read_string(file, desired_name);

    char *stop;
    *ret = strtol(temp, &amp;stop, 10);
    int ret_val = stop == temp;
    free(temp);
    return ret_val;
}
</code></pre>
<p>In this case, we just need to check that at least one character was converted, in which case <code>stop</code> will have be advanced at least one character after the input.</p>
    </div>