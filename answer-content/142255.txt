<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I made it a little shorter:
The logic is also little more simple.</p>

<pre><code>def TotalCount(M,N,P,Q):
    count=0
    for l in range(M,N+1):
        for b in range(P,Q+1):
            count +=CountPerChocolateBar(l,b)
    return count
</code></pre>

<p>Your cadbury function stayed almost the same. But your version has a bug: if the difference between M and N, or P and Q is not one (in your example it was one), your code fails:</p>

<pre><code>a = 7
b = 10
for element in [a,b]:
  print (element)
</code></pre>

<p>result is 7, 10 . NOT the expected 7,8,9,10</p>

<pre><code>def CountPerChocolateBar(l,b):

  count = 0
  while True:
      longerr=max(l,b)
      shorterr=min(l,b)
      count+=1
      diff=longer-shorter
      if diff==0:
        return count
      else :
        l=min(l,b)
        b=diff
</code></pre>

<p>Your call function can be simplified a little:
you can handle l&gt;b ,b&gt;l without branches, because it doesn't matter which one is bigger. You count the difference, increase the count variable, and based on the difference you return the count number or calculate the new b and l values. When the difference is 0, the while loop ends with the return statement</p>

<pre><code>while True:

    numbers=raw_input("Number: ")

    M=int(numbers.split()[0])
    N=int(numbers.split()[1])
    P=int(numbers.split()[2])
    Q=int(numbers.split()[3])
    tc=TotalCount(M,N,P,Q)

    print (tc)
</code></pre>

<p>You can test my solution with this little loop. :)</p>
    </div>