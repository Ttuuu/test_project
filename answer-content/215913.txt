<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I believe it's a good example of a problem that you can represent with a state-machine. What you do with the next character depends on the state you're in: </p>

<ul>
<li>if you're outside of a comment, then you copy the character unless it's a <code>/</code> or a <code>#</code></li>
<li>if the last character was a <code>/</code> outside a comment, then test if the new character is a <code>*</code> or a <code>/</code></li>
<li>if you're inside a single line comment, you ignore it unless it's a newline</li>
<li>if you're inside a multi-line comment, you ignore it unless it's a star</li>
<li>if you've just read a <code>*</code> inside a multi-line comment then you need to check if the new char isn't a <code>/</code></li>
</ul>

<p>State-machines aren't always the most elegant way of coding, but they're robust, easy to read and blazingly fast. So how would you implement it in this case?</p>

<p>First, don't read the input line by line. It is probably a mistake since crucial information resides in the previous line, if there's one: you can't know, looking at a line, if a multi-line comment was opened in the previous one. Also, it will force you to perform memory management each time you read a line (you need to check if the output string is big enough and allocate more memory if it isn't), which will slow down your program, whereas looking character by character will allow you greater flexibility (any object exposing iterators on characters is acceptable) and prevent allocations if they aren't needed.</p>

<p>That brings us to the signature:</p>

<pre><code>template &lt;typename InputIt, typename OutputIt&gt;
OutputIt copy_without_comments(InputIt first, InputIt last, OutputIt out)
</code></pre>

<p>The <code>OutputIt</code> can be many things: an iterator on an allocated buffer, an iterator constructing a <code>string</code>, an iterator on a stream...</p>

<p>The state machine itself is generally implemented with an <code>enum</code> specifying the possible states:</p>

<pre><code>enum class State : char { SlashOutsideComment, StarInsideComment, SingleLineComment, MultiLineComment, NotAComment };
</code></pre>

<p>Then it's only a big <code>switch</code> to know how to handle the next character:</p>

<pre><code> switch (state) {
            case State::SlashOutsideComment:
                if (*first == '/') state = State::SingleLineComment;
                else if (*first == '*') state = State::MultiLineComment;
                else {
                    state = State::NotAComment;
                    *out++ = '/';
                    *out++ = *first;
                }
                break;
            case State::StarInsideComment:
                if (*first == '/') state = State::NotAComment;
                else state = State::MultiLineComment;
                break;
            case State::NotAComment:
                if (*first == '#') state = State::SingleLineComment;
                else if (*first == '/') state = State::SlashOutsidedComment;
                else *out++ = *first;
                break;
            case State::SingleLineComment:
                if (*first == '\n') {
                    state = State::NotAComment;
                    *out++ = '\n';
                }
                break;
            case State::MultiLineComment:
                if (*first == '*') state = State::StarInsideComment;
        }
</code></pre>

<p>Link to test and play with: <a href="https://wandbox.org/permlink/iXC7DWaU8Tk8jrf3" rel="nofollow noreferrer">https://wandbox.org/permlink/iXC7DWaU8Tk8jrf3</a></p>
    </div>