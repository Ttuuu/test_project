<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>A simple in-place, iterative version:</p>

<pre><code>import bisect

def insertsort(l):
    for nsorted in range(1, len(l)):
        bisect.insort(l, l.pop(), hi=nsorted)
</code></pre>

<p>then, there are two ways one can think about a recursive version: a bottom-up one, where you grow the number of sorted elements from the left:</p>

<pre><code>def bottomup_insertsort(l, nsorted=1):
    if nsorted &gt;= len(l):
        return
    bisect.insort(l, l.pop(), hi=nsorted)
    bottomup_insertsort(l, nsorted + 1)
</code></pre>

<p>...and a maybe more elegant top-down version, where you call insertsort on a list after taking away the last element (inspired by lifebalance's approach, but in-place and returning None following typical Python conventions):</p>

<pre><code>def topdown_insertsort(l):
    if len(l) &gt; 1:
        candidate = l.pop()
        insertsort(l)
        bisect.insort(l, candidate)
</code></pre>

<p>All these approaches modify the list in-place, which is more efficient and less functional in style, since it obviously relies on side effects. Of course, depending on the point of the exercise one may prefer other solutions. For practical questions, of course, the wonderful <code>list.sort()</code> Timsort implementation is <em>very very</em> hard to beat.</p>
    </div>