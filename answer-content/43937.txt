<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Hmm. The lack of comments make it slightly non-obvious what is happening. The inverted conditions <code>not iszero(…)</code> don't make it any easier to understand. The same set of these conditions occurs two times, which is a bit confusing. I also don't know where the <code>iszero(…)</code> function is from, and will replace it by <code>… == 0</code> in the following.</p>

<p>Now a bit of math first. Two vectors are perpendicular if their scalar product is zero:</p>

<pre><code>1st vector (x, y, z)
2nd vector (a, b, c)
0 = a·x + b·y + c·z
</code></pre>

<p>You are correct in avoiding the trivial solution <code>x = y = z = 0</code>. Note that you do not avoid the solution <code>a = b = c = 0</code>, because <code>random.random()</code> <em>can</em> return zero.</p>

<p>If one of <code>x, y, z</code> is zero, then the above equation can be solved by choosing a non-zero value for the corresponding direction, and setting the other variables to zero. Example: given <code>(1, 0, 3)</code> as a first vector, the equation can be solved by a second vector <code>(0, 1, 0)</code>.</p>

<p>The above rule can also be applied in reverse if the first vector has <em>two</em> zero fields, but it's only required to change one of the zero fields to a non-zero value.</p>

<p>We can encode these simple cases in pseudocode as</p>

<pre><code>match vec1 with
| (0, 0, 0) -&gt; ValueError('zero-vector')
| (0, _, _) -&gt; Vector(1, 0, 0)
| (_, 0, _) -&gt; Vector(0, 1, 0)
| (_, _, 0) -&gt; Vector(0, 0, 1)
| (x, y, z) -&gt; a more complex case which we'll handle in a moment
</code></pre>

<p>If all parts of the input vector are non-zero, the calculation is a bit more complex because we have three variables <code>a, b, c</code> to determine but only one equation – this means we can choose two values arbitrarily. Choosing a random value might make sense when hardening your application, but it's difficult to test, and we can make the code simpler by choosing <code>a = b = 1</code> (we cannot choose <code>a = b = 0</code>). The equation can now be used to calculate <code>c</code>:</p>

<pre><code>c = -(x + y)/z
</code></pre>

<p>which you essentially have used as well.</p>

<p>So to wrap it all up, I would write this code:</p>

<pre><code>def perpendicular_vector(v):
    r""" Finds an arbitrary perpendicular vector to *v*."""
    # for two vectors (x, y, z) and (a, b, c) to be perpendicular,
    # the following equation has to be fulfilled
    #     0 = ax + by + cz

    # x = y = z = 0 is not an acceptable solution
    if v.x == v.y == v.z == 0:
        raise ValueError('zero-vector')

    # If one dimension is zero, this can be solved by setting that to
    # non-zero and the others to zero. Example: (4, 2, 0) lies in the
    # x-y-Plane, so (0, 0, 1) is orthogonal to the plane.
    if v.x == 0:
        return Vector(1, 0, 0)
    if v.y == 0:
        return Vector(0, 1, 0)
    if v.z == 0:
        return Vector(0, 0, 1)

    # arbitrarily set a = b = 1
    # then the equation simplifies to
    #     c = -(x + y)/z
    return Vector(1, 1, -1.0 * (v.x + v.y) / v.z)
</code></pre>
    </div>