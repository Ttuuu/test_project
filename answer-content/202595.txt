<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Code like this should raise a flag:</p>

<pre><code>    // Add file menu items
    undoEdit = new JMenuItem("Undo");
    undoEdit.addActionListener(this);
    undoEdit.setPreferredSize(new Dimension(100, 20));
    undoEdit.setEnabled(true);

    redoEdit = new JMenuItem("Redo");
    redoEdit.addActionListener(this);
    redoEdit.setPreferredSize(new Dimension(100, 20));
    redoEdit.setEnabled(true);
</code></pre>

<p>If you can squint your eyes and two paragraphs look the same, you are not DRY.</p>

<p>I usually look at these and try to figure out what is similar/different.  In your case, with a single exception, the only difference is the menu name and the action that menu name takes.  So that entire block can become</p>

<pre><code>"Undo", "Redo", "Select All", "Copy", "Paste", "Cut".
</code></pre>

<p>for the most part.  However, you must still "bind" the word "Undo" with some code.  </p>

<p>So one way to do this might be with a Lambda:</p>

<pre><code>addMenuItem("Undo", {-&gt;undo.undo()})
addMenuItem("Redo", {-&gt;undo.redo()})
...
</code></pre>

<p>the addMenuItem is a method you would define that adds the method name and lambda to a data structure for your actionPerformed method to use.  It will probably need to create a map of <code>&lt;JMenuItem, Runnable&gt;</code> so that your actionPerformed can just:</p>

<pre><code>eventMap.get(event.getSource()).call();
</code></pre>

<p>If you do it right, this can be your ENTIRE actionPerformed method (Well, you probably want a try/catch around this line to catch/report failures).</p>

<p>There are other complexities that this EXACT solution doesn't solve--nesting comes to mind (sub-menus) but those can be overcome by adding additional parameters to the addMenuItem function (such as "Parent" to specify a parent menu to place this menu under).</p>

<p>This kind of coding/refactor is important for a few reasons:</p>

<ol>
<li>copy/paste code tends to be very difficult to debug, the differences meld into the pattern.</li>
<li>The supporting code is not difficult to write once you get in the habit and will probably save you more time than it takes.</li>
<li>It's more fun to write code where you have to think than copy/paste/debug</li>
<li>Once in this form it is often possible to both find higher level refactors and/or externalize the data (put it in a config file).</li>
</ol>

<p>One trick here--don't FORCE every instance to use the new addMenuItem method.  By just not converting exception cases (In your case, consider "Edit" an exception case) you can keep addMenuItem quite simple. The hardest thing about coding is exception cases, the less you have the simpler your code can be.</p>
    </div>