<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><p>C++ is not Java. You don't need to spell out <code>this-&gt;</code>.</p></li>
<li><p>Flat is better than nested. Consider</p>

<pre><code>if (word_len &lt;= std::get&lt;1&gt;(current_longest_)) {
    continue;
}
// Follow with the business logic unindented
</code></pre></li>
<li><p>I'd prefer to alias <code>typename std::string::size_type</code> as</p>

<pre><code>using size_type = typename std::string::size_type;
</code></pre>

<p>or, even better, use iterators.</p></li>
<li><p>The inner loop can be streamlined. When we see <code>bool flag;</code> the instinct tells to get rid of it. Upon the loop termination the same information is available as <code>j == word_len</code> (or <code>word_it == word_end()</code> in the iterator version). We just need to lift <code>j</code> (or <code>word_it</code>) out of the loop.</p>

<p>Another problem with the inner loop is that it manages two indices in a not-so-obvious way. A cleaner approach is to let the loop manage just the <code>word</code>, and another (innermost) loop to search through the given string. Consider</p>

<pre><code>auto str_it = given_string.begin();
auto word_it = word.begin();
while (word_it != word.end()) {
    while (str_it != given_string.end() &amp;&amp; *str_it != *word_it) {
        ++str_it;
    }
    if (str_it == given_string.end()) {
        break;
    }
    ++word_it;
}
</code></pre>

<p>Now we notice that the innermost loop does the same job as <code>std::find_first</code>. Use it:</p>

<pre><code>while (word_it != word.end()) {
    if ((str_it = std::find_first(str_it, str.end(), *word_it)) == str_end()) {
        break;
    }
    ++word_it;
}
</code></pre></li>
<li><p>I also recommend to factor a body of the <code>for (const std::string&amp; word : dict)</code> loop out into a function:</p>

<pre><code>const std::string&amp;&amp; FindLongestSubSeq(const std::vector&lt;std::string&gt;&amp; dict)
{
    std::tuple&lt;std::string, typename std::string::size_type&gt; current_longest_
        = { "", 0 };
    for (const std::string&amp; word : dict) {
        if (word_len &lt;= std::get&lt;1&gt;(current_longest_)) {
            continue;
        }

        if (is_subsequence(given_string, word)) {
            std::get&lt;0&gt;(this-&gt;current_longest_) = word;
            std::get&lt;1&gt;(this-&gt;current_longest_) = word.size();
        }
    return std::move(std::get&lt;0&gt;(this-&gt;current_longest_));
}
</code></pre></li>
<li><p>Finally, I recommend to get rid of the <code>class StringManipulater</code> altogether, and implement everything as free functions. The class does not add any value (an C++ is not Java).</p></li>
</ul>
    </div>