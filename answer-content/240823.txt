<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You have the right idea here by replacing an imperative loop with recursion. </p>

<p>The main improvement I would suggest is that in <code>firstStop</code> you are simulating waiting for the bus <code>i</code> minutes at a time instead of calculating how long to wait. The formula I came up with for that is (renaming <code>i</code> to <code>interval</code> as below):</p>

<pre><code>where
  remainder = current `rem` interval
  firstStop =
    case remainder of
        0 -&gt; remainder
        x -&gt; interval - remainder
</code></pre>

<p>e.g. if we're at time 26 and <code>interval = 5</code> then <code>remainder</code> is 1 and <code>interval - remainder</code> is 4 which correct since we need to wait until time 30. The exception is for when the wait time is 0, in which case <code>interval - remainder</code> would tell us 5 instead of 0, so I wrote out a case expression for that.</p>

<hr>

<p>There are some Haskell practices you could do better. For example, <code>head</code> and <code>tail</code> are discouraged when you can use pattern matching instead. Here's one refactoring you could do:</p>

<pre class="lang-hs prettyprint-override"><code>calcTime :: Integer -&gt; [Integer] -&gt; [Integer] -&gt; Integer
calcTime current [] intervals = current
calcTime current (travelTime:travelTimes) (interval:intervals) =
    calcTime (firstStop + travelTime) travelTimes intervals
        where firstStop = ...
</code></pre>
    </div>