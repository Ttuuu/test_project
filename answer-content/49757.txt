<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">


<p>This loop (in <code>SqlResult.Create</code>):</p>

<blockquote>
<pre class="lang-vb prettyprint-override"><code>For Each field In adoRecordset.fields
    If grabFieldName Then result.AddFieldName LCase$(Coalesce(field.name, vbNullString))
Next
</code></pre>
</blockquote>

<p>will still iterate all fields even though <code>grabFieldName</code> is <code>False</code>. And since <code>grabFieldName</code> will only be <code>True</code> for the first record, why not just do it like this - and the flag should be called <code>grabFieldNames</code>, since the code is "grabbing" <em>all</em> field names:</p>

<pre class="lang-vb prettyprint-override"><code>If grabFieldNames Then
    For Each field In adoRecordset.fields
        result.AddFieldName LCase$(Coalesce(field.name, vbNullString))
    Next
End If
</code></pre>

<p>Speaking of <code>AddFieldName</code>, this implementation:</p>

<blockquote>
<pre class="lang-vb prettyprint-override"><code>Public Sub AddFieldName(name As String)
    this.FieldNames.Add name
End Sub
</code></pre>
</blockquote>

<p>Might work for most scenarios, but then if you want to have a <code>Dictionary</code> that maps field names to an index for more efficient field name lookups, a query like <code>SELECT NULL AS Test, NULL AS Test</code> will blow it up, since dictionary keys must be unique.</p>

<p>Given this field (see <a href="https://codereview.stackexchange.com/questions/45666/dictionarytkey-tvalue-implementation">Dictionary implementation here</a>):</p>

<pre class="lang-vb prettyprint-override"><code>Private nameIndices As New Dictionary
</code></pre>

<p><code>AddFieldName</code> could look like this:</p>

<pre class="lang-vb prettyprint-override"><code>Public Sub AddFieldName(ByVal name As String)

    Static nameInstances As New Dictionary

    Dim localName As String
    localName = LCase$(name)

    If nameIndices.ContainsKey(localName) Then

        If nameInstances.ContainsKey(localName) Then
            nameInstances(localName) = nameInstances(localName) + 1
        Else
            nameInstances.Add localName, 1
        End If

        AddFieldName name &amp; nameInstances(localName) 'recursive call

    Else
        this.FieldNames.Add localName
        nameIndices.Add localName, this.FieldNames.Count - 1
    End If

End Sub
</code></pre>

<p>This way the first <code>Test</code> field will be called <code>Test</code>, and the 2nd one will be called <code>Test1</code>, ensuring uniqueness of the field names. This could be quite surprising to the calling code, though, but selecting identically named columns shouldn't happen very often.</p>

<p>The <code>FieldNameIndex</code> function can then look like this:</p>

<pre class="lang-vb prettyprint-override"><code>Public Function FieldNameIndex(ByVal name As String) As Long

    Dim i As Long
    If nameIndices.TryGetValue(name, i) Then
        FieldNameIndex = i
    Else
        FieldNameIndex = -1
    End If

End Function
</code></pre>
    </div>