<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Design Trigger</h2>

<p>I don't understand why you implement a duplex wcf operation to emulate a simplex operation, just to avoid configuring the timeout. Let's assume you have a really good reason why you don't want to change the default timeouts, then your solution can still time out on being idle (after 10 minutes), because you changed from timing out on <code>SendTimeout</code> to <code>ReceiveTimeout</code>. </p>

<p>As explained <a href="https://codereview.stackexchange.com/questions/24845/wcf-using-tap-without-worrying-about-timeouts">here</a> the following timeouts have an impact on your code:</p>

<ul>
<li><strong>SendTimeout</strong>:
maximum threshold to expire an ongoing simplex operation. -&gt; The timeout you don't like to configure (default: 1 minute)</li>
<li><strong>ReceiveTimeout</strong>: 
maximum idle time on a session. -&gt; The timeout between the one-way message and the callback fired back. (default: 10 minutes)</li>
</ul>

<hr>

<h2>Review</h2>

<ul>
<li><p>Your concern about using a single instance for multiple calls is valid. Using a single instance with a single callback is the simplest solution. Otherwise, you would need to implement a matching system with correlation ids in the request and callback contracts.</p></li>
<li><p>The lifetime management is not robust enough. Use a try-finally block to close the connection. Also, distinguish between <code>Abort</code> (when connection is <code>Faulted</code>) and <code>Close</code> (graceful disconnect) (<a href="https://blog.rsuter.com/correctly-handle-wcf-clients-life-cycle-simple-way/" rel="nofollow noreferrer">Close Connection</a>).</p>

<blockquote>
<pre><code>//wait for the result
var result = await tcs.Task;  // &lt;- if this throws an exception

//close the connection
client.Close();       // &lt;- this won't be called
</code></pre>
</blockquote></li>
</ul>
    </div>