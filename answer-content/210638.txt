<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You could use a <a href="https://developer.android.com/reference/java/util/concurrent/CompletableFuture" rel="nofollow noreferrer">CompletableFuture</a> for this. Make each call return a completed future with the body, or an exceptionally completed future with an error:</p>

<pre><code>private CompletableFuture&lt;String&gt; call(String url) {
    CompletableFuture&lt;String&gt; future = new CompletableFuture&lt;&gt;();

    OkHttpClient client = new OkHttpClient.Builder().connectTimeout(15, TimeUnit.SECONDS).build();
    client.newCall(requestbuilder.url(url).build()).enqueue(new Callback() {
        @Override
        public void onFailure(Call call, IOException e) {
            future.completeExceptionally(e);
        }

        @Override
        public void onResponse(Call call, Response response) {
            try {
                ResponseBody body = response.body();
                if (response.code() != 200 || body == null) {
                    throw new IOException("Http error");
                } else {
                    future.complete(body.string());
                }
            } catch (IOException | JsonSyntaxException e) {
                future.completeExceptionally(e);
            }
        }
    });

    return future;
}
</code></pre>

<p>Then add a generic method to make the calls and deserialize the results:</p>

<pre><code>private &lt;T&gt; Future&lt;T&gt; callAndDeserialize(String url, Gson gson, TypeToken&lt;T&gt; typeToken) {
    CompletableFuture&lt;String&gt; future = call(url);
    return future.thenApply(new Function&lt;String, T&gt;() {
        public T apply(String body) {
            return gson.fromJson(body, typeToken.getType()));
        }
    });
}
</code></pre>

<p>The <code>loadRepository</code> code would then be something like:</p>

<pre><code>final Gson gson = new GsonBuilder().registerTypeHierarchyAdapter(Calendar.class, new CalendarGson()).create();

Future&lt;List&lt;Article&gt;&gt; articlesFuture = callAndDeserialize("https://apiurlarticles", gson, new TypeToken&lt;List&lt;Article&gt;&gt;() {});
Future&lt;List&lt;Event&gt;&gt; eventsFuture = callAndDeserialize("https://apiurlarticles", gson, new TypeToken&lt;List&lt;Event&gt;&gt;() {});
Future&lt;List&lt;Article&gt;&gt; sportsFuture = callAndDeserialize("https://apiurlarticles", gson, new TypeToken&lt;List&lt;Article&gt;&gt;() {});
Future&lt;List&lt;Article&gt;&gt; fitnessFuture = callAndDeserialize("https://apiurlarticles", gson, new TypeToken&lt;List&lt;Article&gt;&gt;() {});
Future&lt;List&lt;Article&gt;&gt; governmentFuture = callAndDeserialize("https://apiurlarticles", gson, new TypeToken&lt;List&lt;Article&gt;&gt;() {});
Future&lt;Article&gt; mainArticleFuture = callAndDeserialize("https://apiurlarticles", gson, new TypeToken&lt;Article&gt;() {});
Future&lt;Configuration&gt; configurationFuture = callAndDeserialize("https://apiurlarticles", gson, new TypeToken&lt;Configuration&gt;() {});

try {
    articles = articlesFuture.get();
    events = eventsFuture.get();
    sportArticles = sportsFuture.get();
    fitnessArticles = fitnessFuture.get();
    governmentArticles = governmentFuture.get();
    mainArticle = mainArticleFuture.get();
    config = configurationFuture.get();

    notifyObservers(HTTPRequestStatus.OK);
} catch (ExecutionException e) {
    if(e.getCause() instanceof KeyManagementException || e.getCause() instanceof NoSuchAlgorithmException || e.getCause() instanceof KeyStoreException) {
        notifyObservers(HTTPRequestStatus.TLSERROR);
    } else {
        notifyObservers(HTTPRequestStatus.HTTPERROR);
    }
}
</code></pre>

<p>The <code>ExecutionException</code> at the end now retains the exception messages, causes and stacktraces. In case there's any unexpected errors you need to debug, you can also <a href="https://developer.android.com/reference/android/util/Log" rel="nofollow noreferrer">log</a> this exception as well notifying the observers.</p>
    </div>