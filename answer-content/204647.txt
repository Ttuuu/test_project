<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p></p><h1>Coding well is hard, but reading code should be easy</h1>

<p>After reading through your code I think it is reasonable secure. You protect yourself against SQL-injection and you use <code>password_hash()</code>. All good things. </p>

<p>However this code only provides the most basic security, and that not very well. Sorry, I don't mean to be rude.</p>

<p>There is one thing, I worry about, above everything else: This code is a bit of a mess. And messy code is a security risk, even if it all works correctly now. You might want to change something, years from now, and make a mistake because you misunderstand your own code. Or even worse: Someone else has to work on your code.</p>

<p>Well written code should be almost <em>self-evident in what it does and how it does it</em>. How to do this? Well there are many resources, for instance:</p>

<p><a href="https://www.macronimous.com/resources/articles/writing-clean-secure-easy-maintain-php-code" rel="nofollow noreferrer">https://www.macronimous.com/resources/articles/writing-clean-secure-easy-maintain-php-code</a></p>

<p><a href="https://deliciousbrains.com/refactoring-php-code-better-readability" rel="nofollow noreferrer">https://deliciousbrains.com/refactoring-php-code-better-readability</a></p>

<p><a href="https://code.tutsplus.com/tutorials/top-15-best-practices-for-writing-super-readable-code--net-8118" rel="nofollow noreferrer">https://code.tutsplus.com/tutorials/top-15-best-practices-for-writing-super-readable-code--net-8118</a></p>

<p>And many, many more. Visiting, and reading, StackExchange, is also a good idea.</p>

<p>Here are some of the comments I wrote down regarding your code (in random order):</p>

<ul>
<li><strong>Unused hash variable:</strong> You have a global variable called <code>$hash</code>, you even store it in the database, but it is not used in any
meaningful way. You should get rid of it, especially because a reader
might think its used to improve the security in some way. It is not.</li>
<li><strong>Output to user:</strong> The function <code>print_r()</code> is normally used to output human-readable information about a variable, and shouldn't be used to output plain strings. It works, but better use <code>echo()</code> or just <code>print()</code>.</li>
<li><strong>Encapsulate code:</strong> It's better to put your code in a function or method, that way it is better isolated from other code you might
write. You could, for instance, be using variables like <code>$name</code> and
<code>$email</code> in other code as well.</li>
<li><strong>Choosing a password:</strong> You have many rules for the password. Users find that very annoying. Since you email the password to the
users anyway, why not choose a password for them? Save the users the
hassle of choosing one. Mind you: <em>Some might regard the emailing of
a password as a security risk.</em>, but it all depends on how secure you want to be. Security can be overdone at the expense of usability.</li>
<li><strong>escaping strings:</strong> I don't see escaping of strings in your code. You are using <code>bind_param()</code> which is what you should be using.</li>
<li><strong>Choice of variable names:</strong> Apart from having every variable at the global scope (see point 3), the names of the variables don't seem to be chosen
with care. After careful reading, I was able to find out that <code>$un</code>
probably means 'username', but why the obfuscation? Also, the
'username', is sometimes called <code>$name</code>, then 'login' in
your database, and finally <code>$un</code> when you read the database. These should    preferably be the same.</li>
<li><strong>Use of globals:</strong> Don't use <code>$GLOBALS['name']</code> when you can just write <code>$name</code>. If you ever need to use a global variable, you have
created yourself, in a function or method, use <code>global $name;</code> to
indicate you will be referring to the global version of that
variable.</li>
<li><strong>Create variables only when they are needed:</strong> An example is the <code>$message</code> variable. You create it when the email address is validated, but
only use it after the database connection was made, the username was
not found, and you have a valid IP address. It might not be used at
all, so you've wasted resources. </li>
<li><strong>Database connections can fail:</strong> You check to see if you have a database connection, and you make one when there isn't. That is weird
in itself, but more trouble is it that you don't check whether you
actually got a good connection. A connection will, one day, fail, and
you need to handle that gracefully. </li>
<li><strong>Many nested if ... elseif ....:</strong> It is easy to loose track of what's going on in your code because of all the nested code
fragments. The code doesn't have much structure. Using functions and
classes can solve this problem.</li>
<li><strong>Comments should be useful and accurate:</strong> There's no point in reading a comment like "Return Success - Valid Email" when nothing is
returned and the email was validated 60 lines before that comment.
There are no comments above the queries, where they could have been
useful. Also be consistent about either placing comments before or
after whatever they refer too, otherwise it is very confusing.</li>
</ul>

<p>This list seems long, but it is by no means exhaustive. I do realize that learning to code is difficult, hence the title, and I can see you're on the right track. With a bit more practice, and taking some of the suggestions on board, you coding style could improve greatly.</p>
    </div>