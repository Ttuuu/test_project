<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I didn't test any of my snippets below, so they may contain typos.  I am only including them to give context to my advice.</p>

<p>I translated the Dutch to English so that I could follow your processes.</p>

<ul>
<li><p>By storing the gallows data as a semi-matrix, you can swiftly update the image by adding a single character in its desired position.  I could have condensed the <code>$victim</code> array further, but I felt that that would negatively impact readability / maintainability.</p></li>
<li><p>My custom <code>update</code> functions modify variables by reference, so there is no return value -- this makes the code slightly more succinct.</p></li>
<li><p>Iterating the letters in a string can be done without splitting the word into an array of letters because php allows access to each letter by its offset.  If your hangman game may include multibyte characters, <code>mb_</code> functions will need to be implemented.</p></li>
<li><p>In your loop I recommend writing all of your negative/invalid/erred processes first and saving the successful outcome for last -- I find this more readable.</p></li>
</ul>

<p>The custom functions:</p>

<pre><code>function game_not_finished($secret_word, $word_status, $wrong_count) {
    return $wrong_count &lt; 6 &amp;&amp; $secret_word != $word_status;
}

function update_gallows(&amp;$gallows, $part) {
    $gallows[$part["row"]][$part["offset"]] = $part["symbol"];
}

function update_word_status($secret_word, &amp;$word_status, $letter) {
    for ($offset = 0, $length = strlen($secret_word); $offset &lt; $length; ++$offset) {
        if ($secret_word[$offset] == $letter) {
            $word_status[$offset] == $letter;
        }
    }
}
</code></pre>

<p>The gallows storage:</p>

<pre><code>$gallows = [
    " +---+",
    " |   |",
    "     |",
    "     |",
    "     |",
    "     |",
    "=======",
];

$victim = [
    ["row" =&gt; 2, "offset" =&gt; 1, "symbol" =&gt; "o"], // head
    ["row" =&gt; 3, "offset" =&gt; 1, "symbol" =&gt; "|"], // torso
    ["row" =&gt; 3, "offset" =&gt; 0, "symbol" =&gt; "/"], // right arm
    ["row" =&gt; 3, "offset" =&gt; 2, "symbol" =&gt; "\\"], // left arm
    ["row" =&gt; 4, "offset" =&gt; 0, "symbol" =&gt; "/"], // right leg
    ["row" =&gt; 4, "offset" =&gt; 2, "symbol" =&gt; "\\"], // left leg
];
</code></pre>

<p>Initializing required variables:</p>

<pre><code>$secret_word = $wordpool[rand(0, sizeof($wordpool) -1)];
$word_length = strlen($secret_word);
$word_status = str_repeat('*', $word_length);
$chosen_letters = '';
$wrong_letters = '';
$wrong_count = 0;

echo "The word has $word_length letters." , PHP_EOL;    
</code></pre>

<p>The loop:</p>

<pre><code>while (game_not_finished($secret_word, $word_status, $wrong_count)) {
    echo "You have already chosen the following letters: " , $chosen_letters , PHP_EOL;
    echo "The letters revealed so far are: " , $word_status , PHP_EOL;
    echo "The following guessed letters are not in the word: " , $wrong_letters , PHP_EOL;
    echo implode(PHP_EOL, $gallows);

    echo "Give your choice for a letter." . PHP_EOL;
    echo "&gt;";
    $input = trim(strtolower(fgets(STDIN)));  // or uppercase if fitting for your word list
    echo "The letter you have chosen is: $input" , PHP_EOL;
    // validate input
    if (strlen($input) != 1) {
        echo "You have chosen more than one letter." , PHP_EOL;
        continue;
    }
    if (!ctype_alpha($input)) {
        echo "This is not a valid letter for hangman." , PHP_EOL;
        continue;
    }
    if (strpos($chosen_letters, $input) === false) {
        echo "You have tried this letter before." , PHP_EOL;
        continue;
    }
    if (strpos($secret_word, $input) === false) {
        echo "Too bad, this letter does not appear in the word." , PHP_EOL;
        $wrong_letters .= $input;
        update_gallows($gallows, $victim[$wrong_count]);  // add another body part to gallows
        ++$wrong_count;
    } else {
        echo "Well done, this letter occurs in the word." , PHP_EOL;
        update_word_status($secret_word, &amp;$word_status, $input); // no return value, overwrites $word_status in function
    }
    $chosen_letters .= $input;
}
</code></pre>

<p>The conclusion:</p>

<pre><code>if ($wrong_count == 6) {
    echo "Sorry, you lost" , PHP_EOL;
    // show full hangman . echo implode(PHP_EOL, $gallows);
} else {
    echo "Congratulations, you won" , PHP_EOL;
}
</code></pre>
    </div>