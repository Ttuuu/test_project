<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Are you sure that your business logic really needs to know about all those different types of coins? It feels like unnecessary complication to me. It should be a lot easier to maintain a code, that always treats money simply as <code>long</code> number (with some extra methods). Only when it comes to UI layer, you should consider what is the best way to display your money bag. There you can have a converter that would convert money to coins, that your user sees on screen. But it should be a class, separate from <code>MoneyBag</code> and it should only exist as part of UI layer.</p>

<p>Some other things regarding your existing code:</p>

<ol>
<li><p>When implementing equality methods and operators, you should always try to reuse your implementation as much as possible. <code>a != b</code> is the same as <code>!(a == b)</code>, <code>a - b</code> is the same as <code>a + (-b)</code>, etc. For example, you can implement equality as:</p>

<pre><code>public override bool Equals(object obj)
{
    return Equals(obj as MoneyBag);
}

public static bool operator ==(MoneyBag a, MoneyBag b)
{
    return a.Equals(b);
}

public static bool operator !=(MoneyBag a, MoneyBag b)
{
    return !a.Equals(b); // or return !(a == b)
}

public bool Equals(MoneyBag other)
{
    //here goes the actual implementation, 
    //which you reuse in all other methods
}
</code></pre>

<p>This way you can guarantee that all equality methods always return the same result. And fixing a bug in your equality logic becomes as easy as fixing as single method. At the moment passing <code>null</code> to <code>IEquatable.Equals</code> method will <code>throw</code>, while using <code>==</code> will work just fine, for example.</p></li>
<li><p>You have a mutable hash code, which is a bad idea in general.</p></li>
<li><p>You have mutable static fields (<code>FilledBag</code> and <code>EmptyBag</code>), which is also a bad idea. Consider this code:</p>

<pre><code>var myBag = MoneyBag.EmptyBag;
//blah-blah 100 lines of code
myBag.Add(...);
</code></pre>

<p>You might be thinking: "Hey, I am not THAT guy! I am not going use <code>EmptyBag</code> like that!" But every single one of THOSE guys probably thought the same.</p></li>
<li><p>Things like <code>platinum * 1000000</code> should be extracted into dedicated methods, so you don't have to copy-paste those (or manually count zeros) every time you need to convert one type of currency to another.</p></li>
</ol>
    </div>