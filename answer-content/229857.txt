<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Fairly good code overall.</p>

<p>Mostly small stuff below.</p>

<p><strong>Narrowing</strong></p>

<blockquote>
  <p>I do get warnings about XOR-ing 1-bit ints but I have no idea why.</p>
</blockquote>

<p>Weak compiler.</p>

<p>Perhaps use <code>bool sign : 1;</code></p>

<p><strong>Naked magic numbers</strong></p>

<p>Rather than 23, 127, etc, consider the C-ish</p>

<pre><code>#define MANTISSA_BIT_WIDTH 23
</code></pre>

<p>or a C++ -ish</p>

<pre><code>const int mantissa_bit_width = 23;
</code></pre>

<p><strong><code>uint</code>?</strong></p>

<p><code>uint</code> appears non-standard.  Perhaps <code>unsigned</code>?</p>

<pre><code>// return SoftFloat{(uint)fullNewMantissa, (uint)newNormalBiasedExponent, sign ^ right.sign};
return SoftFloat{(unsigned)fullNewMantissa, (unsigned)newNormalBiasedExponent, sign ^ right.sign};
</code></pre>

<hr>

<p>Minor stuff</p>

<p><strong>Portability</strong></p>

<p>Although OP has "gcc, linux, x64", little changes would step toward portability without sacrificing efficient emitted code.</p>

<pre><code>// if(fullNewMantissa == (1 &lt;&lt; 23)) {
if(fullNewMantissa == (1ul &lt;&lt; 23)) {  // `int` could be 16-bit

// fullNewMantissa &amp;= ~(1ll &lt;&lt; implicitBit);
fullNewMantissa &amp;= ~(1ull &lt;&lt; implicitBit);  // Why mess with signed shifts?
</code></pre>

<p><strong><code>int</code> vs. <code>short</code></strong></p>

<p>Rarely is <code>short</code> faster/better than <code>int</code> unless one has an array of the type.</p>

<p>Consider</p>

<pre><code>// short leftNormalBiasedExponent, rightNormalBiasedExponent, newNormalBiasedExponent
int leftNormalBiasedExponent, rightNormalBiasedExponent, newNormalBiasedExponent
</code></pre>

<p><strong>sizeof type vs sizeof object</strong></p>

<p>Consider the clearer, less maintenance </p>

<pre><code>// return !memcmp(this, &amp;right, sizeof(SoftFloat));
return !memcmp(this, &amp;right, sizeof *this);
</code></pre>

<p><strong><code>roundedShift()</code></strong></p>

<p>Unclear about <code>roundedShift()</code> correctness.  Partly due to lack of comments, partly due to "it takes time" to analyze.</p>
    </div>