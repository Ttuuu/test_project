<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Why the marker interface?</p>

<blockquote>
<pre><code>public interface IViewModel
{
    // Marker interface
}

public interface IHandleViewModel&lt;TViewModel&gt; where TViewModel : IViewModel
{
    Task&lt;TViewModel&gt; Handle();
}
</code></pre>
</blockquote>

<p>What you really want to do here, is ensure that <code>TViewModel</code> is a <em>reference type</em> - right? There's a generic type constraint specifically for that:</p>

<pre><code>public interface IHandleViewModel&lt;TViewModel&gt; where TViewModel : class
{
    Task&lt;TViewModel&gt; Handle();
}
</code></pre>

<hr>

<p>This is a Dependency Injection anti-pattern - lookup <em>Service Locator</em>:</p>

<blockquote>
<pre><code>private readonly Container _container;

public ViewModelProcessor(Container container)
{
    _container = container;
}
</code></pre>
</blockquote>

<p>Your IoC container should be in one single place in your entire code base: the <em>composition root</em>. Passing it around as a dependency is always a <em>Bad Idea</em>.</p>

<p>That "processor" is actually a.. wait... an <em>abstract factory.. factory</em>.</p>

<blockquote>
<pre><code>public Task&lt;TViewModel&gt; Create&lt;TViewModel&gt;() where TViewModel : IViewModel, new()
{
    var handlerType = typeof(IHandleViewModel&lt;&gt;).MakeGenericType(typeof(TViewModel));
    dynamic handler = _container.GetInstance(handlerType);
    return handler.Handle();
}
</code></pre>
</blockquote>

<p>And your controller is masking its true dependencies:</p>

<blockquote>
<pre><code>public HomeController(IProcessViewModels models)
{
    _models = models;
}
</code></pre>
</blockquote>

<p>It's not injected with <em>models</em> - it's injected with a <em>Service Locator</em> that has the capability of giving it just about anything.</p>

<p>The beauty of Dependency Injection, is that when it's well implemented, constructors become a static documentation for the dependencies of every single type out there. Injecting a Service Locator destroys that, and empowers your controller with <em>keeping the control</em> over its true dependencies. That's what <a href="http://www.manning.com/seemann/">Mark Seemann</a> describes as the <em>Control Freak</em> anti-pattern.</p>

<p>I strongly encourage you to read his book, it's a very enjoyable read.</p>
    </div>