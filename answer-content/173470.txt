<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Problem is that you prefer <em>static</em> methods. This way you effectively throw away benefits of <em>polymorphism</em>.</p>

<p>Also, when ever you find duplicated code you should carefully think if it might belong into a class of its own. </p>

<p>If you could open your mint to an OO approach you could move common behavior into a (non static) <em>utility class</em> and inject that common behavior into the concrete Factories. Or you go the <em>usual</em> OO way to create an <em>abstract</em> factory having the common code and have the concrete factories inheriting from it.</p>

<hr>

<blockquote>
  <p>but <em>why</em> do static methods throw away polymorphism benefits?  – Thufir </p>
</blockquote>

<p>Static method imply <em>early binding</em>. All accessors to a method are known at compile time of the method implementation. Also all implementors of a static method are known at compile time of the accessors. You cannot provide a new behavior of a method unless you compile the accessors needing this new behavior.</p>

<pre><code>class A {
  static void method(){
     System.out.println("static method in A");
  }
}


class B extends A {
  static void method(){
     System.out.println("static method B");
  }
}

class  C {
  static void main(String[] args){
     A.method(); // outputs "static method in A"
     B.method(); // outputs "static method in B"
     A[] a = {new A(), new B()};
     a[0].method();  // outputs "static method in A"
     a[1].method();  // outputs "static method in A" although instance is f type `B` 
  }
}
</code></pre>

<blockquote>
  <p>And, is polymorphism really so beneficial? – Thufir </p>
</blockquote>

<p>Polymorphism is no value as such.</p>

<p>But if you doubt the value of polymorphism in general you might rather use a programing language that does not bother you with such  gratuitous  concepts...</p>
    </div>