<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>What is a service?</h1>
<p>There are mupltiple definitions. Probably the most generic one is that it is any object that provides some useful functionality. Sometimes it may be a synonym for a singleton.</p>
<h1>What is a factory?</h1>
<p>Factory is basically a service that instantiates other objects. A class constructor can be considered a factory in a way that is not polymorhic (in runtime). More complex factories should often stand aside from the class being instantiated as it involves more dependencies needed only for the instantiation but not by the instantiated object once it exists (like in your case HybridLogger does not need to know which loggers it is given but your factory combines the two concrete implementations). Factory method generally helps separate concerns and maintain single responsibility principle. One class should either create objects, or act on them when they already exist, but not both. If they need new objects for their acting, they delegate to factories.</p>
<h1>One generic method vs specific method for each level</h1>
<blockquote>
<p>Should only need the Log method in this class but
I need to comply to ILogger, I'll keep them until
I come up with a solution, an ideal one would be
I just call Log(message, type) from the HybridLogger</p>
<p>But thinking, is extra methods better? Encapsulation for LogType..</p>
</blockquote>
<p>You might want to design the interface so that it only has that one method.</p>
<pre><code>public interface ILogger
{
  void Log(LogType type, string message);
}

logger-&gt;Log(LogType.Success, "message");
// instead of
logger-&gt;Success("message");
</code></pre>
<p>Now if you stil want those individual methods, you can define a wrapper.</p>
<pre><code>public interface ILoggerFacade
{
  void Success(string message);
  void Warning(string message);
  // etc.
}

public class LoggerFacade : ILoggerFacade
{
  private ILogger Logger;
  public LoggerFacade(ILogger logger) {Logger = logger;}
  public void Success(string message) {Logger.Log(LogType.Success, message);}
  public void Warning(string message) {Logger.Log(LogType.Warning, message);}
}

var facade = new LoggerFacade(logger);
facade.Success("message");
</code></pre>
<h1>Log to file or not log to file?</h1>
<p>Notice I omitted the <code>bool logToFile</code> parameter, thats because whether file logging occurs is implementation detail of the logger. If you want that control from outside for some reason, you should probably merge console logger and file logger together avoiding the hybrid logger. But it makes very little sense to me.</p>
<p>It might make sense to decide whether file logging should occur based on the log type, you can have a configurable Ilogger implementation that follows the decorator pattern and allows to turn on/off specific log types (refered to as SwitchableLogger in the last code snippet).</p>
<h1>"Merging" Implementations</h1>
<blockquote>
<p>I feel like there could be a better way to merge implementations</p>
</blockquote>
<p>It is absolutely fine to combine them this way, although it could be generalized to an Enumerable to be able to log to any amount of ILogger implementations, not just two.</p>
<pre><code>public class MultiLogger : ILogger
{
  private IEnumerable&lt;ILogger&gt; Loggers;
  public MultiLogger(IEnumerable&lt;ILogger&gt; loggers) {Loggers = loggers;}
  public void Log(LogType type, string message) {
    foreach (var logger in Loggers) logger.Log(type, message);
  }
}
</code></pre>
<p>Further we have made sure that every logger is called with the correct type, unlike your HybridLogger which calls <code>Success</code> on the second logger regardless of the type requested.</p>
<h1>Logger aware of the class using it</h1>
<p>This is actualy almost a circular reference. The loggers dont depend on the class who owns the logger, but they depend on its class type. It means you need at least one logger for each distinct class that uses a logger. You could shift this to only have one logger service in your application by having the type passed to the Log method.</p>
<pre><code>public interface ILogger
{
  public void Log(LogType type, string message, Type callerType);
  //or even as template
  public void Log&lt;T&gt;(LogType type, string message);
}
</code></pre>
<p>But honestly, your ConsoleLogger does not even use that value. And secondly if the logger consumer wishes, he can add the class name to the message.</p>
<h1>Dependency Injection</h1>
<p>You should be explicit about where the FileLogger puts the logs. Let it get the file path mapper in constructor.</p>
<h1>Final result</h1>
<pre><code>var logger = new SwitchableLogger(new FileLogger(errorLogPaths));
logger.AllOff();
logger.ErrorOn();
var facade = new LoggerFacade(new MultiLogger([new ConsoleLogger(), logger]));
// the facade is output of the factory method, im putting it here to simplify...

facade.Error("whoops"); //logs both
facade.Success("success"); // logs only to console
<span class="math-container">```</span>
</code></pre>
    </div>