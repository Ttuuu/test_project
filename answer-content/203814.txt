<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ol>
<li><p>It would be a good idea to write a docstring for the <code>defvar</code>'d variables like <code>linter-execs</code>. The explanations in the post would make an excellent start, for example:</p>

<pre><code>(defvar linter-execs '((flycheck-python-flake8-executable "bin/flake8")
                       (flycheck-python-pylint-executable "bin/pylint")
                       (flycheck-python-pycompile-executable "bin/python"))
  "The linter executables, as list of two-element lists. The
first element of an entry is the flycheck variable that contains
the path of a linter executable. The second element is the
relative path of the executable from within the venv.")
</code></pre></li>
<li><p>Writing <code>(nth 0 exec)</code> and <code>(nth 1 exec)</code> makes it hard to understand the meaning of these items of data. In Python you'd use tuple unpacking to give meaningful names to each element of the <code>exec</code> data structure, like this:</p>

<pre><code>flycheck_var, path = exec
</code></pre>

<p>In Emacs Lisp you can use <a href="https://www.gnu.org/software/emacs/manual/html_node/cl/Macros.html" rel="noreferrer"><code>cl-destructuring-bind</code></a> in a similar way:</p>

<pre><code>(dolist (exec linter-execs)
  (cl-destructuring-bind (flycheck-var path) exec
    (let ((venv-linter-bin    (concat pyvenv-virtual-env path))
      ;; etc
</code></pre>

<p>But <code>exec</code> comes from a list that you are looping over, so you could use the <a href="https://www.gnu.org/software/emacs/manual/html_node/cl/Loop-Facility.html" rel="noreferrer"><code>cl-loop</code></a> macro instead of <code>dolist</code>, and <code>cl-loop</code> has destructuring built in:</p>

<pre><code>(cl-loop for (flycheck-var path) in linter-execs do
  (let ((venv-linter-bin    (concat pyvenv-virtual-env path))
    ;; etc
</code></pre>

<p>You'll need <code>(require 'cl-macs)</code> to use <code>cl-destructuring-bind</code> or <code>cl-loop</code>.</p></li>
<li><p>The two directories <code>pyvenv-virtual-env</code> and <code>default-linter-venv-path</code> are treated in exactly the same way: first we do <code>(let ((Y (concat X path))</code> and then <code>(file-exists-p Y)</code> and finally <code>(set flycheck-var Y)</code>. This repetition could be factored out into a loop:</p>

<pre><code>(defun switch-linters ()
  "Switch linter executables to those in the current venv.

If the venv does not have any linter packages, then they will be
set to those in the `default-linter-venv-path` venv.  If these do
not exist, then the linter will be set to nil."
  (cl-loop with dirs = (list pyvenv-virtual-env default-linter-venv-path)
           for (flycheck-var path) in linter-execs
           do (set flycheck-var
                   (cl-loop for directory in dirs
                            for executable = (concat directory path)
                            if (file-exists-p executable) return executable)))
</code></pre></li>
<li><p>Instead of <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Testing-Accessibility.html" rel="noreferrer"><code>file-exists-p</code></a>, you probably want to use <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Testing-Accessibility.html" rel="noreferrer"><code>file-executable-p</code></a>.</p></li>
<li><p>Looking for a file in a list of directories is built into Emacs as the function <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Locating-Files.html" rel="noreferrer"><code>locate-file</code></a>. Using this, we get:</p>

<pre><code>(defun switch-linters ()
  "Switch linter executables to those in the current venv.

If the venv does not have any linter packages, then they will be
set to those in the `default-linter-venv-path` venv.  If these do
not exist, then the linter will be set to nil."
  (cl-loop with dirs = (list pyvenv-virtual-env default-linter-venv-path)
           for (flycheck-var path) in linter-execs
           do (set flycheck-var (locate-file path dirs nil 'file-executable-p))))
</code></pre></li>
</ol>
    </div>