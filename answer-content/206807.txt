<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Louys already suggested simplifying the multiple requests into a single request - that is a great idea. I see a few other simplifications and suggestions.</p>

<p>The first few lines of the Javascript code push jQuery objects into an array: </p>

<blockquote>
<pre><code>var players = [];
players.push($('#p0'));
players.push($('#p1'));
players.push($('#p2'));
players.push($('#p3'));
</code></pre>
</blockquote>

<p>While it isn't the same, one simplification would be to combine those selectors into a single selector:</p>

<pre><code>var players = $('#p0, #p1, #p2, #p3');
</code></pre>

<p>Instead of an array of jQuery objects, that would be a single jQuery object with the four elements, and thus access to each element could be utilized via the <a href="http://api.jquery.com/eq" rel="nofollow noreferrer"><code>.eq()</code></a> method - e.g. </p>

<pre><code>players.eq(i).parents(".card-header").addClass('border-success');
players.eq(i).load('play.php?p='+i);
</code></pre>

<p>Another consideration is to use a class name - for example, if those four elements all have the same <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class" rel="nofollow noreferrer"><em>class</em></a> attribute, then that class name could be used in the selector.</p>

<hr>

<p>As Louy's answer suggests, it would be wise to handle the case when the AJAX requests fail - for an example, see the last example in the <a href="http://api.jquery.com/load/" rel="nofollow noreferrer">documentation for <code>.load()</code></a>.</p>

<hr>

<p>Also, as Louy's answer implied, it would be wise to use <a href="http://php.net/json_encode" rel="nofollow noreferrer"><code>json_encode()</code></a> to send data in JSON format from the PHP code, and then parse it in the AJAX success callback - even if there was a single set of data.</p>

<hr>

<p>The code for the <code>FrontHandler</code> class was not included but we see that it has methods like <code>playerTurn</code>, <code>deckUpdate</code>, etc. Do you consider that class a controller? Perhaps it could have a single method to return the appropriate data based on the supplied parameters.</p>
    </div>