<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Constructor initialization - 0 out the array</h3>

<p><code>buffer(new T[size]{})</code> will set all the values to 0 instead of random garbage</p>

<pre><code>template&lt;class T&gt;
CyclicBuffer&lt;T&gt;::CyclicBuffer(std::size_t size): head(0), tail(0), buffer(new T[size]{}), size(size) {

}
</code></pre>

<h3>Adding and Getting can use equality comparison</h3>

<p>Comparing equality rather than subtracting/greater or equals makes it more readable</p>



<pre class="lang-cpp prettyprint-override"><code>template&lt;class T&gt;
void CyclicBuffer&lt;T&gt;::add(T val) {
    if (head == size)
        head = 0;

    buffer[head++] = val;
}

template&lt;class T&gt;
T CyclicBuffer&lt;T&gt;::get() {
    if (tail == size)
        tail = 0;

    return buffer[tail++];
}
</code></pre>

<h3>Use <code>template&lt;class T&gt;</code> to make your structure generic</h3>

<p>You will be able to insert any type:</p>

<pre class="lang-cpp prettyprint-override"><code>CyclicBuffer&lt;char&gt; charCyclicBuffer(5);
CyclicBuffer&lt;int&gt; intCyclicBuffer(5);
</code></pre>

<h3>Use <code>std::size_t</code> for portability</h3>

<p>Besides portability - size, head, tail will never be negative</p>

<pre class="lang-cpp prettyprint-override"><code>template&lt;class T&gt;
class CyclicBuffer{
public:
    explicit CyclicBuffer(std::size_t size);

    ~CyclicBuffer();

    void add(T val);

    T get();

    inline std::size_t getSize() {
        return this-&gt;size;
    }

private:
    T *buffer;
    std::size_t size;
    std::size_t head;
    std::size_t tail;
};
</code></pre>
    </div>