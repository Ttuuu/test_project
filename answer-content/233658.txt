<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><p>A dictionary is the more appropriate data structure to use here, since your code is essentially building a mapping from directory paths to lists of matched filenames. That is, instead of building a <code>List[List[Union[str, List[str]]]]</code>, build a <code>Dict[str, List[str]]</code>.</p></li>
<li><p>A single call to <code>os.walk</code> is sufficient to perform the job that <code>yield_files_in_subfolders</code> and <code>yield_files_with_extensions</code> are currently doing together. For each 3-tuple <code>(root, dirs, files)</code>, <code>root</code> is the containing directory and <code>files</code> is a list of non-directory files that reside directly under <code>root</code>.</p></li>
<li><p>Do note that if we want each <code>root</code> directory (as mentioned above) to be an absolute path, we need to pass in an absolute path to <code>os.walk</code>. Calling <code>os.path.abspath</code> on the input directory path ensures this.</p></li>
<li><p>To make the script easier to use and test, I'd recommend reading in the target (top-level) directory and the filename extension as command-line arguments. We can do this with <code>argparse</code> or <code>sys.argv</code>.</p></li>
</ul>

<p>Here is the script with the above suggestions implemented:</p>

<pre class="lang-py prettyprint-override"><code>#!/usr/bin/env python3

import os
import fnmatch
import argparse
from collections import defaultdict

def find_matching_files(directory, file_pattern):
    # directory could be a relative path, so transform it into an absolute path
    directory = os.path.abspath(directory)
    directory_to_matched_files = defaultdict(list)

    for root, _, files in os.walk(directory):
        for file in files:
            if fnmatch.fnmatch(file.lower(), file_pattern):
                directory_to_matched_files[root].append(file)

    return directory_to_matched_files

if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('target_directory')
    parser.add_argument('-x', '--filename-extension', default='mp4')
    args = parser.parse_args()

    files = find_matching_files(args.target_directory,
                                f'*.{args.filename_extension.lower()}')

    # print report of directories &amp; files
    # [...]
</code></pre>

<p>Sample invocation:</p>

<pre><code>$ ./script.py /mnt/mp4library/mp4library -x mp4
</code></pre>
    </div>