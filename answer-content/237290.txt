<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>A few things can be noted.</p>

<ol>
<li>Find the largest value by using <code>Max()</code> which is a <code>LINQ</code> extension.</li>
<li>Don't initialize integers variables with <code>MinValue</code> or <code>MaxValue</code> such as <code>decimal.MinValue</code>. Use a default value of <code>0</code> or <code>-1</code> (which are the common used ones` for better code management).</li>
<li><code>IsInValidInput</code> is not presented in your post, but I assume it's a method where you have validate the input based on your business needs, I just hoped that would be present as well to make the picture clearer. </li>
<li>Using <code>Try/Catch</code> block inside this method is unnecessary. The <code>Try/Catch</code> should be outside this scope.</li>
<li>Parsing string, then returning a string is a bad practice. You always need to parse once, and work through the parsed typed, then use <code>ToString()</code> whenever needed, this would create a string while keeping the actual source untouched. Using the current solution means that you're parsing the values in every step in the application. If you see multiple parsing to the same data, try to unify it to make it parsed once, and let the application uses the actual types, then convert it to string whenever needed (like, sending it to database or over web request ..etc). </li>
<li>Use <code>decimal.TryParse</code> instead of <code>decimal.Parse</code> as you don't know what values are passed to the method, so validate these values before parse them. Also, use <code>string.IsNullOrEmpty</code> since you're working with <code>string</code>. It's minor changes, but it would avoid invalid inputs. Even if it's already validated in <code>IsInValidInput</code>, as long as the method is exposed, you should always consider the implement the method validation process. </li>
<li>Make use of generic classes such as <code>IEnumerable</code>. instead of accepting <code>string[]</code> you could converted to <code>IEnumerable&lt;string&gt;</code> which would extend your acceptable collections types, and would work with any collection that implements <code>IEnumerable&lt;string&gt;</code>. This would make your method flixable and adaptable to other classes out-of-the-box.</li>
<li>using <code>StringBuilder</code> is a good choice in your case, but you're misused it when you added a string at the return statement. What you need to do is to keep using the <code>StringBuilder</code> save the results inside it, and then call <code>ToString()</code> on the return statement.</li>
</ol>

<p>for the current work, where you get a string's array and output one string containing the person information who has the biggest loss. You can simplify it to :</p>

<pre><code>public static string FindPersonWithBiggestLoss(string[] peopleAndBalances)
{
    if (IsInValidInput(peopleAndBalances)) { return InValidOutput; }

    decimal max = 0;

    var personWithHighestLoss = new StringBuilder();

    for (int x = 0; x &lt; peopleAndBalances.Length; ++x)
    {
        // convert string to array
        var data = peopleAndBalances[x].Split(',');

        // since index 0 would hold the person name, then we can start with index 1 to get balances
        for (int i = 1; i &lt; data.Length; i++)
        {
            if (decimal.TryParse(data[i], out decimal amount) &amp;&amp; amount &gt; max)
            {
                personWithHighestLoss.Clear();
                personWithHighestLoss
                    .Append(data[0])
                    .Append(" lost the most money. -Â¤")
                    .Append(amount)
                    .Append('.');

                max = amount;
            }
        }
    }

    return personWithHighestLoss.ToString();
}
</code></pre>

<p>if you want a better version which would be more practical in actual work environment, then you would need to do something like this : </p>

<pre><code>// Make use of `IEnumerable` and `KeyValuePair&lt;string, decimal&gt;`
public static IEnumerable&lt;KeyValuePair&lt;string, decimal&gt;&gt; FindPersonWithBiggestLoss(IEnumerable&lt;string&gt; peopleAndBalances)
{
    if (IsInValidInput(peopleAndBalances)) { return InValidOutput;  }

    foreach (var person in peopleAndBalances)
    {
        decimal max = 0;

        // check the string array
        if (!string.IsNullOrEmpty(person))
        {
            // convert string to array
            var data = person.Split(',');

            // since index 0 would hold the person name, then we can start with index 1 to get balances
            for (int i = 1; i &lt; data.Length; i++)
            {
                // check the string and validate if it's an integer
                // if not valid, just ignore and get the next value.
                if (decimal.TryParse(data[i], out decimal amount) &amp;&amp; amount &gt; max)
                {
                    max = amount;
                }
            }

            yield return new KeyValuePair&lt;string, decimal&gt;(data[0], max);
        }
    }
}
</code></pre>

<p>this can be simplified using <code>Linq</code> to this : </p>

<pre><code>public static IEnumerable&lt;KeyValuePair&lt;string, decimal&gt;&gt; FindPersonWithBiggestLoss(IEnumerable&lt;string&gt; peopleAndBalances)
{
    if (IsInValidInput(peopleAndBalances)) { return InValidOutput;  }

    foreach (var person in peopleAndBalances)
    {
        var data = person.Split(',');

        yield return new KeyValuePair&lt;string, decimal&gt;(
            data[0], // you can use Array.Find(data, x =&gt; !decimal.TryParse(x, out _)) as well.
            data.Where(x =&gt; decimal.TryParse(x, out _)).Max(x =&gt; decimal.Parse(x))
            );
    }
}
</code></pre>
    </div>