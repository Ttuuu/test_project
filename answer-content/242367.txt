<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I did this once in javascript, think the fastest algorithm was:</p>

<ul>
<li>create your board</li>
<li>visit each cell, if it is empty, iterate through all possible values</li>
<li>if the board has an inconsistency, take the next value</li>
<li>if all values are used up, it cannot be solved</li>
<li>if the value is valid, go directly to the next cell</li>
</ul>

<p>basically a depth-search-first, creating the board that will be the solution. each inconsistency only goes back one step and tries the next possible value there, so you have very little overhead for checking one scenario.</p>

<p>edit: okay, that is called backtracking according to wikipedia:</p>

<p><a href="https://en.wikipedia.org/wiki/Sudoku_solving_algorithms" rel="nofollow noreferrer">https://en.wikipedia.org/wiki/Sudoku_solving_algorithms</a>&lt;</p>

<p>what i think is faster than your solution:</p>

<ul>
<li><p>you don't iterate the whole board to find the next empty cell because you already know that the previous ones are filled.</p></li>
<li><p>you can just check the "adjecent cells" (same row, same column, same box) to see if the entered value is in them. no need to check the whole board for correctness. maybe you should check it once in the beginning just to be sure the problem is not bonkers already.</p></li>
</ul>

<p>okay, think i am wrong again, you already know that the values are good because you used the "adjecent cells" to calculate the possible values.</p>

<p>i think i wasn't even keeping the possible values as lookup table, could be too much overhead to maintain them. just read them directly fom the board. or try both and see what's faster. you want to learn coding, so trying out stuff and measuring your solutions is a very good technique.</p>

<p>good luck / have fun!</p>
    </div>