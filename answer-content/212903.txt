<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Well, you can implement a game item in a hundred ways depending on your use-case.</p>

<p>About your questions:
<strong>Avoid needles inheritance</strong>. Actually never implement inheritance when you just want to share some code. Purpose of Inheritance is not a code reuse. Inheritance is meant to model Is-A relationship. And you don't need to model Is-A relationship very often. Code sharing is a side effect of this. Composition is a way better technique of code reuse. Take a look at this quick draft of what Composition based Item might look like.</p>

<pre><code>public class Item {

    enum Type {
        Armor,
        Consumable,
        Weapon,
        Misc
    }

    private final String name;
    private final Type type;
    private final Money value;
    private final Attributes attributes;

    public Item(String name, Type type, Money value) {
        this.name = name;
        this.type = type;
        this.value = value;
        this.attributes = Attributes.None;
    }

    public Item(String name, Type type, Money value, Attributes attributes) {
        this.name = name;
        this.type = type;
        this.value = value;
        this.attributes = attributes;
    }

    // ...

    public static void main(String[] args) {
        new Item("Iron Nails", Item.Type.Misc, new CopperCoins(5));
        new Item("Fur Poncho", Item.Type.Armor, new SilverCoins(5));
        new Item("Health Potion", Item.Type.Consumable, new SilverCoins(1),
            new Attributes(
                new Attribute(Attribute.Type.Health, new Stat(Stat.Type.Plus, 150)),
                new Attribute(Attribute.Type.Hunger, new Stat(Stat.Type.Minus, 2))
            )
        );
        new Item("Assassins Dagger", Item.Type.Weapon, new GoldCoins(5),
            new Attributes(
                new Attribute(Attribute.Type.Damage, new Stat(Stat.Type.Plus, 5)),
                new Attribute(Attribute.Type.BleedingDamage, new Stat(Stat.Type.Plus, 10)),
                new Attribute(Attribute.Type.Agility, new Stat(Stat.Type.Plus, 2)),
                new Attribute(Attribute.Type.Weight, new Kilograms(1))
            )
        );
    }
}
</code></pre>

<p>You are right about the second point. Item should not be responsible for its construction nor its drop-rate. Drop-rate can be easily added to enemies. Such as draft below. Actual building of items is again full of options. You could for example have them defined in a files or in a database and have some object construct them for you. As I said. All depend on what you want to use it for.</p>

<pre><code>new Enemy(
    "Enraged Barbarian",
    Class.Warrior,
    new Drop(
        new ChanceInPercent(5),
        new Item("Barbarian's Mighty Axe", Item.Type.Weapon, new GoldCoins(50),
            new Attributes(
                new Attribute(Attribute.Type.Damage, new Stat(Stat.Type.Plus, 50)),
                new Attribute(Attribute.Type.Ability, new Decapitate(new HealthThreshold(20)))
            )
        )
    )
);
</code></pre>
    </div>