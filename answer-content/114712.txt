<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You always need to know where you want to go. Actions shouldn't be split up to much. If you are going to set different functions for different actions (which is something good), they should to be "stand alone".</p>

<hr>

<p>Also you need to "Recycle" what you already have. With something like this</p>

<pre><code>Private Const XLength As Long = 100
Private Const YLength As Long = 100
</code></pre>

<p>there is all you need to get your array-size. Now having</p>

<pre><code>AssignArrayBounds thisTickArray, LB1, UB1, LB2, UB2
</code></pre>

<p>doesn't make sense to me here. It is only a waste of resources.</p>

<hr>

<p>Have something as "can be changed" or "can't be changed"</p>

<pre><code>firstRow = 1
firstCol = 1
</code></pre>

<p>They are 1. If you really plan on changing the starting point, why not put them to global?</p>

<pre><code>Private Const firstRow As Long = 1
Private Const firstCol As Long = 1
</code></pre>

<p>Having more code later, may end up with "searching". You should always have 1 "range" where all settings can be done.</p>

<hr>

<p>Looking at</p>

<pre><code>For ix = LB1 To UB1
    For iy = LB2 To UB2
        xStart = ix - 1
        xEnd = ix + 1
        yStart = iy - 1
        yEnd = iy + 1

        If xStart &lt; LB1 Then xStart = LB1
        If yStart &lt; LB2 Then yStart = LB2
        If xEnd &gt; UB1 Then xEnd = UB1
        If yEnd &gt; UB2 Then yEnd = UB2
</code></pre>

<p>you waste a LOT of time! Why do you check inside thy <code>yi</code> loop for being outside the <code>xi</code> loop? </p>

<pre><code>For ix = LB1 To UB1
  xStart = ix - 1
  xEnd = ix + 1
  If xStart &lt; LB1 Then xStart = LB1
  If xEnd &gt; UB1 Then xEnd = UB1

  For iy = LB2 To UB2
    yStart = iy - 1
    yEnd = iy + 1
    If yStart &lt; LB2 Then yStart = LB2
    If yEnd &gt; UB2 Then yEnd = UB2
</code></pre>

<p>Or even better skip it directly:</p>

<pre><code>For ix = LB1 To UB1
  If ix = LB1 Then xStart = ix Else xStart = ix - 1 'skip row over range
  If ix = UB1 Then xEnd = ix Else xEnd = ix + 1     'skip row below range

  For iy = LB2 To UB2
    If iy = LB1 Then yStart = iy Else yStart = iy - 1 'skip column left of range
    If iy = UB1 Then yEnd = iy Else yEnd = iy + 1     'skip column right of range
</code></pre>

<p>While i know you prefer code with bigger "height" then "width", I'd suggest to use the "width" as long as you stay in the window. (However, it's not avoidable for some cases and we are not talking about that)</p>

<hr>

<p>While that may be nothing to look at, but in your random fill you used:</p>

<pre><code>For row = 1 To XLength
    For col = 1 To YLength
        If Rnd() &gt; 0.5 Then Cells(row, col) = 1
    Next col
Next row
</code></pre>

<p>To me, this looks easy to understand. Going from 1 to the set range. But looking at something that picks LBound/UBound my head tries to remember "how big was it?" or "was there something special?"<br>
Also, this way less calculations were done. Even <code>For row = firstRow to XLength</code> would be easier to "understand" than using <code>AssignArrayBounds</code> and running your 'LBx' and <code>UBx</code>...</p>

<hr>

<p>Talking about your <code>LB</code> and <code>UB</code>. You are always talking about "easy to understand notation". Having a visible 2D-table you may think it over and and use it like this:</p>

<pre><code>From xi = upperEnd to lowerEnd
  From yi = leftEnd to rightEnd
    ....
  next
next
</code></pre>

<p>This way everyone will know what happens here in a flash.  </p>

<hr>

<p>Lastly, you used <code>Dim row As Long</code>. <code>Row</code> is a property and should not declared as a variable.</p>

<hr>

<p>Simply: the less calculations are need to be done, the more you can add :)</p>

<p>Still, you need to know where you are trying to go, to avoid as much calculations as possible.</p>

<hr>

<p>However, after a long search at old hard drives I was able to find my old code from some years ago (i was barely able to remember it worked in a different way).<br>
I just smashed some comments into it (I left everything else as it was, so please do not complain about names or something like that) :P<br>
Hopefully you get one or two ideas for this or some other projects.  </p>

<pre><code>Option Explicit

Public Const cellsX As Long = 100 'height
Public Const cellsY As Long = 100 'width
'values from creaMin to creaMax will create new life
Public Const creaMin = 3
Public Const creaMax = 3
'outside this range life will die (if not inside crea-range)
Public Const retMin = 2
Public Const retMax = 3

Public Sub calcLife()
  Dim lifeNow As Variant 'direct life/death tabe
  Dim tempCount() As Byte 'array to get neighbours

  With Sheet3 'load all values
    lifeNow = .Range(.Cells(1, 1), .Cells(cellsX, cellsY)).Value
  End With

  ReDim tempCount(0 To cellsX + 1, 0 To cellsY + 1) 'ranges + 1 to all directions to skip checks

  Dim offsetX As Long
  Dim offsetY As Long
  Dim runX As Long
  Dim runY As Long

  'calculate neighbours
  For offsetX = -1 To 1 'shift top/down
    For offsetY = -1 To 1 'shift left/right
      If offsetX = 0 And offsetY = 0 Then offsetY = 1 'no offset -&gt; skip that loop
      For runX = 1 To cellsX
        For runY = 1 To cellsY
          tempCount(runX + offsetX, runY + offsetY) = _
                     tempCount(runX + offsetX, runY + offsetY) _
                   + lifeNow(runX, runY)

        Next runY
      Next runX
    Next offsetY
  Next offsetX

  'calculate for life/death
  For runX = 1 To cellsX
    For runY = 1 To cellsY
      If tempCount(runX, runY) &gt;= creaMin And tempCount(runX, runY) &lt;= creaMax Then 'set neighbours always create/retain life
        lifeNow(runX, runY) = 1
      ElseIf tempCount(runX, runY) &lt; retMin Or tempCount(runX, runY) &gt; retMax Then 'out of retaining life =&gt; death
        lifeNow(runX, runY) = 0
      End If
    Next runY
  Next runX

  With Sheet3
    .Range(.Cells(1, 1), .Cells(cellsX, cellsY)).Value = lifeNow 'output new life
  End With

  Application.OnTime Now, "calcLife" 'automatically run next step / ESC to stop / includes DoEvents

End Sub

Sub rndNew()
  Dim percN As Variant 'percentage to create

  percN = InputBox("Enter Chance as percentage without ""%""")
  If Not IsNumeric(percN) Then
    Exit Sub
  ElseIf percN &gt; 0 And percN &lt; 100 Then
    percN = percN / 100
  Else
    Exit Sub
  End If

  Randomize
  Dim tableNow As Variant

  With Sheet3
    tableNow = .Range(.Cells(1, 1), .Cells(cellsX, cellsY)).Value
  End With

  Dim i As Long, j As Long
  For i = 1 To cellsX
    For j = 1 To cellsY
      tableNow(i, j) = (Rnd() &gt; percN) + 1
    Next
  Next

  With Sheet3
    .Range(.Cells(1, 1), .Cells(cellsX, cellsY)).Value = tableNow
  End With

End Sub
</code></pre>
    </div>