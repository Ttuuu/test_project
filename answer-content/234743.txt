<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There's a few general code hygiene things that I'll look at first, and then I'll comment on the algorithm design. </p>

<p>First, <code>const</code> should mean constant. I know that in Javascript you don't get in trouble for changing the contents of a <code>const</code> array but it's still confusing to use it with a variable whose job is to change. <code>const arr</code> I like but <code>const resultArray</code> I don't.</p>

<p>Second, although I appreciate that these practice challenges don't always give a huge amount of context to inform your purpose, it's important to think about variable names. In particular, <code>arr</code> is a very vague name at the best of times, and a moderately misinforming one in this context. I'd go for something like "instruction".</p>

<p>Third, three if statements checking the same expression for fixed values just screams "use a <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/switch" rel="nofollow noreferrer">switch statement</a>". Efficiency questions notwithstanding, <code>switch</code> will immediately clue anyone reading the code into there being one value to check against several options. (Whereas with long <code>else if</code> chains we have to focus on each condition because they could be different)</p>

<p>Fourth, avoid this little trick: <code>if(frequencyArray[arr[1]])</code>. Yes, Javascript will silently do all sorts of funky conversions, and this old implicit cast bool seems tame in comparison. But those conversions are hard to read and bug prone. If you want to check first whether it exists and then whether it is positive, check first whether it exists and then whether it is positive. </p>

<p>Fifth, tiny style thing, but consistency is often more important than what decision you come to. So with Javascript, you can leave off semicolons, or you can add them in. Either works. Some people insist one way or the other, and I won't do that. But if you do use them, use them. As is, 4 statements end with semicolons and 3 end without semicolons, with nothing to tell them apart. </p>

<p>As to the algorithm efficiency, you're making good use of the fact that Javascript "arrays" are dictionaries, so you can directly refer to <code>frequencyArray[arr[1]]</code> without having to worry about whether <code>arr[1]</code> being enormous. With that direct value lookup, your cases for <code>1</code> and <code>2</code> both consist of very quick operations. Case <code>3</code> is the one that will take time, even though it looks just as simple as the others. It's the <code>includes</code> function that's killing you. While the other cases just check one value in the array, <code>includes</code> has to check every single value. What you'll want to do is remember your frequency count as you go, taking a bit of extra time in your <code>1</code> and <code>2</code> cases to update an additional array/dictionary, so that in your <code>3</code> case you can just look up that already calculated value and output it.</p>
    </div>