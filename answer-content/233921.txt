<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>For your coding style, that's good that I'm not the only one to use <a href="https://refactoring.com/catalog/replaceNestedConditionalWithGuardClauses.html" rel="nofollow noreferrer">Guard Clauses</a>, to clear the invalid states before entering the main code. Also, the methods are short and well named; I had no issues to find the code quickly, that's a big plus, in my opinion.</p>
<h1>Minor issues</h1>
<h3>Method <code>MaxHeapify</code></h3>
<ul>
<li>The name of the method should start with a lowercase.</li>
<li>The variable <code>tmp</code> is unused.</li>
</ul>
<h3>Method <code>swap</code></h3>
<ul>
<li>The variable <code>tmp</code> can be on the same line as the initialization.</li>
</ul>
<pre class="lang-java prettyprint-override"><code>   private void swap(int from, int to) {
      int tmp = heap.get(from);
      heap.set(from, heap.get(to));
      heap.set(to, tmp);
   }
</code></pre>
<h3>Class <code>Heap</code></h3>
<ul>
<li>The initialization of the variable <code>array</code> with the value <code>{}</code> is useless, since the value is overridden in the constructor.</li>
</ul>
<pre class="lang-java prettyprint-override"><code>    public class Heap {
      //[...]
      int[] array;
      int size;
      //[...]
   {
</code></pre>
<h3>Method <code>Heap#isValid</code></h3>
<ul>
<li>The logic can be simplified.</li>
</ul>
<pre class="lang-java prettyprint-override"><code>   public boolean isValid(int idx) {
      return size - 1 &gt;= idx;
   }
</code></pre>
<p>Good job!</p>
    </div>