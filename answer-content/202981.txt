<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>All in all this code does, what you want it to do and you separate responsibility by splitting the code in meaningful functions.</p>

<p>I don't like that <code>CheckPalindrome(...)</code> expects the input to be in a certain format (case). In other words: it should do the preparation of the <code>originalStr</code> by it self and check for invalid input: </p>

<pre><code> static bool CheckPalindrome(string orginalStr)
 {
    if (string.IsNullOrEmpty(originalStr)) return false;

    originalStr = originalStr.ToLower();

    //call the string reverse method
    var reversedStr = ReverseString(orginalStr);

    if (reversedStr.Equals(orginalStr))
        return true;

    return false;
 }
</code></pre>

<p>The palindrome check by comparing the original string with its reversed string is rather inefficient. Instead you can compare each char from the start of the string with the same position from the end of the string. You then only have to iterate through the half of it: </p>

<pre><code>static bool IsPalindrome(string word)
{
  if (string.IsNullOrWhiteSpace(word)) return false;

  word = word.ToLower();

  for (int i = 0; i &lt; word.Length / 2; i++)
  {
    if (word[i] != word[word.Length - i - 1])
      return false;
  }

  return true;
}
</code></pre>

<hr>

<p><strong>EDIT</strong></p>

<p>If you go multilingual, you may find this approach useful:</p>

<pre><code>static bool IsPalindrome(string word)
{
  if (string.IsNullOrEmpty(word)) return false;

  StringInfo stringInfo = new StringInfo(word.ToLower());
  int length = stringInfo.LengthInTextElements;

  for (int i = 0; i &lt; length / 2; i++)
  {
    if (stringInfo.SubstringByTextElements(i, 1) != stringInfo.SubstringByTextElements(length - i - 1, 1))
      return false;
  }

  return true;
}    
</code></pre>

<p>Disclaimer: I have only tested it on Latin strings, so don't hang me if...</p>
    </div>