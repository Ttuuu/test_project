<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>A simple solution would use <code>any</code> and <code>itertools.combinations</code></p>

<pre><code>from itertools import combinations

def anytwoequalto(numbers, k):
    return any(((i + j) == k) for i, j in combinations(numbers, 2))
</code></pre>

<p><code>itertools.combinations</code> iterates over the given object returning tuples with the given number of items in them with no repetitions. eg.</p>

<pre><code>combinations('ABCD', 2) =&gt;
    (('A', 'B'), ('A', 'C'), ('A', 'D'), ('B', 'C'), ('B', 'D'), ('C', 'D'))
</code></pre>

<p><code>any</code> returns <code>True</code> if any of the expressions <code>((i + j) == k)</code> evaluate to <code>True</code></p>

<p>If you wish to consider that an item can be added to itself, use <code>combinations_with_replacement</code> instead.</p>

<p>Note: depending on the version of Python you are using, you may need to add extra parentheses (<code>()</code>) around the expression inside the <code>any</code> call.</p>

<p>Hope this makes sense.</p>
    </div>