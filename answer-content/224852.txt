<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><code>bfs()</code> doesn't actually do anything with the nodes.  It just returns a list of the nodes in the order they were visited.</p>

<h3>Data structures</h3>

<p>Each call to <code>neighbors</code> scans the whole edge list.  Which, as you point out, is inefficient.  So, preprocess the edge list to create data structure that lets you access the neighbors more efficiently.</p>

<p>If you know how many nodes there are in advance, you can do something like this:</p>

<pre><code>from collections import deque

def neighbors(edge_list, number_of_nodes):
    """ Build a list such that the list at index `n`
        is the set of the neighbors of node `n`.
    """

    neighbors_list = [set() for _ in range(number_of_nodes)]

    for start_node, end_node in edge_list:
        neighbors_list[start_node].add(end_node)    

        # if the edges are not directed, then uncomment the next line
        #neighbors_list[end_node].add(start_node)    

    return neighbors_list
</code></pre>

<p>If the nodes have strings for labels, or you don;t know in advance how many there are, <code>neighbors()</code> can be modified like so:</p>

<pre><code>from collections import defauldict, deque

def neighbors(edge_list, number_of_nodes):
    """ Build a list such that the list at index `n`
        is the set of the neighbors of node `n`.
    """

    neighbors_list = defaultdict(set)

    for start_node, end_node in edge_list:
        neighbors_list[start_node].add(end_node)    

        # if the edges are not directed, then uncomment the next line
        #neighbors_list[end_node].add(start_node)    

    return neighbors_list
</code></pre>

<p>Then <code>bfs</code> can be done like this (using one of the <code>neighbors()</code> above):</p>

<pre><code>def bfs(edge_list, number_of_nodes, start=0):
    neighbors_of = neighbors(edge_list, number_of_nodes)
    que = deque([start])
    visited = {start:True}

    while(que):
        node = que.popleft()

        neighbor_nodes = neighbors_of[node] - visited.keys()
        que.extend(neighbor_nodes)
        visited.update((neighbor,True) for neighbor in neighbor_nodes)

    return list(visited.keys())
</code></pre>

<p>The above relies on python 3.7 features: </p>

<ol>
<li>a dictionary returns keys in the order they were added to the dictionary, so list(visited.keys()) returns the nodes in the order they were visited.</li>
<li>the view returned by <code>dict.keys()</code> behaves like a set, so <code>neighbors_of[node] - visited.keys()</code> returns a set of nodes that are neighbors or <code>node</code> but are not in <code>visited</code>.</li>
</ol>
    </div>