<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">


<p>The need to instantiate a <code>StackFactory</code> in order to create a <code>Stack</code> seems superfluous. I would suggest making <code>create()</code> a <code>static</code> method, which in turn would mean that, instead of the class <code>StackFactory</code>, it will be the method <code>create()</code> that needs a type parameter:</p>

<pre class="lang-java prettyprint-override"><code>public class StackFactory {

    public static &lt;E&gt; Stack&lt;E&gt; create() {
        return new EmptyStack&lt;&gt;(); //compiler can infer the type parameter for the newly created Stack from the method's return type
    }
}
</code></pre>

<p>Then you can call the method like this:</p>

<pre class="lang-java prettyprint-override"><code>Stack&lt;String&gt; stack = StackFactory.&lt;String&gt;create()
        .push("first")
        .push("second")
        .push("third");
</code></pre>

<p>Note that, in the above example, you need to explicitly pass the type parameter <code>String</code> to the method <code>create()</code>, because the newly created <code>Stack</code> is not directly assigned to a variable of type <code>Stack&lt;String&gt;</code> and the compiler can therefore not infer the type parameter <code>E</code> for the call to the method <code>&lt;E&gt; create()</code> to be <code>String</code>.</p>
    </div>