<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Ignoring the fact that there's a better algorithm based on the sum of all elements (albiet somewhat less efficient once the input is sorted), there's plenty to review in the implementation of the functions.</p>

<hr>

<p>It's rude to the caller to modify the function's argument.  I suggest accepting <code>v</code> by value, and the caller can choose whether to <code>std::move()</code> into the argument or whether it needs to retain its own copy.</p>

<hr>

<p>This pattern:</p>

<pre><code>if (condition)
    return true;
else
    return false;
</code></pre>

<p>can always be simplified to</p>

<pre><code>return condition;
</code></pre>

<hr>

<p>Solution 2 depends on the order of execution of the predicate.  It might be best to make this explicit, by passing <strong><code>std::execution::seq</code></strong> as a first argument.  However, I'm not convinced that this imposes the order that's required; <code>std::find_if()</code> just isn't going to work in a standards-guaranteed manner with a mutable predicate.</p>

<hr>

<p>Both solutions miss the useful library function <strong><code>std::adjacent_find()</code></strong>.</p>

<p>In our case, we're looking for the first element that's not followed by an element that's one higher in value:</p>

<pre><code>auto const predicate = [](int a, int b){ return a + 1 != b; }
sort(v.begin(), v.end());
if (v.empty() || v.front() != 0) { return 1; }         // first element was missing
auto it = std::adjacent_find(v.begin(), v.end(), predicate);
if (it == v.end()) { --it; }                           // last element was missing
return *it + 1;
</code></pre>

<p>We can safely use this <code>std::adjacent_find()</code> with a parallel execution policy if we want.</p>
    </div>