<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I would replace all the switch statements with a Map.<br>
Map key should be pair of from-to <code>SystemsMeasures</code>. Map value can be a container class that holds all conversion factors.<br>
You can write custom <code>Pair</code> or <code>Tuple</code> class or use ready made one from libraries such as Apache commons, Guava, etc.<br>
The container class can be something like </p>

<pre><code>public class ConversionFactor {
    public double mass;
    public double distance;
    public ConversionFactor(double mass, double distance) {
        this.mass = mass;
        this.distance = distance;
    }
}
</code></pre>

<p>The map can be defined (assuming <a href="http://commons.apache.org/proper/commons-lang/apidocs/org/apache/commons/lang3/tuple/Pair.html" rel="nofollow noreferrer">Apache commons Pair</a> which correctly implements <code>equals()</code> and <code>hashCode()</code>)</p>

<pre><code>Map&lt;Pair&lt;SystemsMeasures, SystemsMeasures&gt;, ConversionFactor&gt;
</code></pre>

<p>Now, you just need to create a <code>Pair</code> instance that represents the requested conversion and <code>get()</code> the value from the map.</p>

<p>an added advantage of this approach is that you can easily load the map values from file, avoiding <a href="https://en.wikipedia.org/wiki/Magic_number_(programming)" rel="nofollow noreferrer">magic numbers anti-pattern</a></p>

<p>Example:</p>

<pre><code>public static Map&lt;Pair&lt;SystemsMeasures, SystemsMeasures&gt;, ConversionFactor&gt; conversionMap =
    Map.of(
        new ImmutablePair&lt;&gt;(SystemsMeasures.Metric, SystemsMeasures.Imperial),
            new ConversionFactor(2.2, 0.394),
        new ImmutablePair&lt;&gt;(SystemsMeasures.Imperial, SystemsMeasures.Metric),
            new ConversionFactor(0.455, 2.54)
    );

public Number convertToMassUnit(Number input, SystemsMeasures from, SystemsMeasures to) {
    double constant = conversionMap.get(new ImmutablePair&lt;&gt;(from, to)).mass;
    return ... 
}
</code></pre>

<p>The above map can be represented in serialized form:</p>

<pre><code>Metric, Imperial -&gt; 2.2, 0.394
Imperial, Metric -&gt; 0.455, 2.54
</code></pre>

<p>read the file into <code>List&lt;String&gt;</code> and parse it into the map. </p>
    </div>