<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Shebang</h2>

<pre><code>#!/opt/anaconda3/bin/python
</code></pre>

<p>This is suspicious. Usually you should just</p>

<pre><code>#!/usr/bin/env python
</code></pre>

<p>and make sure that your environment uses the correct Python. Among other things, it'll make it easier for you to switch to system Python if you need it.</p>

<h2>Enums</h2>

<pre><code>RABBIT = 0
FOX = 1
</code></pre>

<p>It's good that you're assigning symbols for these values, but you should consider taking it a step further and using <a href="https://docs.python.org/3/library/enum.html" rel="nofollow noreferrer">https://docs.python.org/3/library/enum.html</a> .</p>

<h2>Encapsulation</h2>

<p>Rather than these variables</p>

<pre><code># initial number of rabbits and foxes
nrabbits = 10
nfoxes = 5

# energy of a freshly spawned rabbit/fox
rabben = 20
foxen = 20

# chance of a new fox/rabbit being spawned at a gridpoint on a step
rabbit_newborn_chance = 0.01
fox_newborn_chance = 0.01
</code></pre>

<p>being tracked individually, consider making a <code>Species</code> class with two instances, each having the above attributes. You can then factor out a lot of common code.</p>

<h2>Type hinting</h2>

<p>PEP484 type hints can help, here; for instance:</p>

<pre><code>def __init__(self, x0: int, y0: int, init_energy: float, species: int):
</code></pre>

<p>though the type for that <code>species</code> would change if you make it an <code>Enum</code>.</p>

<h2>Variable names</h2>

<pre><code>isDead
</code></pre>

<p>should be</p>

<pre><code>is_dead
</code></pre>

<h2>No-op branches</h2>

<p>This can be deleted:</p>

<pre><code>    if direction == STAY:
        pass
</code></pre>

<h2>Global code</h2>

<p>Your <code>Animal</code> class is a good start. You should move the global-scoped code starting with <code>animals = []</code> into functions, as well.</p>

<h2>Scaling</h2>

<pre><code># interact if two animals are at the same coordinates
for j, animal1 in enumerate(animals):
    for animal2 in animals[j:]:
        if (animal1.x == animal2.x and
            animal1.y == animal2.y):
            animal1.interact(animal2)
</code></pre>

<p>This will get slow as you scale up to larger and larger grid sizes. Consider maintaining a nested grid list tracking where all of your animals are. <a href="https://wiki.python.org/moin/TimeComplexity" rel="nofollow noreferrer">List lookup is O(1)</a> so this will be fast, and you won't have to compare all animal coordinates, which seems to be O(n^2).</p>

<h2>Data vis</h2>

<p>Your <em>Rabbit vs fox population</em> graph is cool, but it quickly becomes muddied when the system converges. This should be re-represented with another dimension, either density or time. There are many approaches to this - you could decrease the opacity of the line, or you could show a heat map, or you could make the colour of the line parametric on time and use a jet pallette so that it becomes clearer where convergence is.</p>

<p>Another option is to show your <em>population vs time</em> graph with the series smoothed and confidence intervals shown; an example is shown here - <a href="https://stackoverflow.com/questions/27164114/show-confidence-limits-and-prediction-limits-in-scatter-plot">https://stackoverflow.com/questions/27164114/show-confidence-limits-and-prediction-limits-in-scatter-plot</a></p>
    </div>