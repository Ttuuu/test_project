<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>In addition to the valuable technical hints given by @Reinderien, I'd like to comment on your code structure.</p>
<p>You are doing everything within one class (even inside the constructor of that class):</p>
<ul>
<li>Creating the user interface (<code>new JLabel()</code>, <code>setBounds()</code>, <code>add()</code> and so on)</li>
<li>Getting user interactions (<code>addActionListener()</code>)</li>
<li>Doing the business logic (e.g. generating various reports)</li>
<li>Presenting results (<code>print()</code>, <code>setText()</code> etc.)</li>
</ul>
<p>I'd typically expect an application like yours to be split into at least two major parts:</p>
<ul>
<li><p>The business logic, consisting of classes corresponding to the real-world concepts you're working with, e.g. <code>Student</code>, <code>Group</code>, <code>Course</code>, <code>Year</code>. There shouldn't be any user interface elements in there (nothing coming from <code>javax.swing</code>, <code>java.awt</code>, <code>System.out</code> etc.). There you should find the fields that describe a student, a group etc. as well as the actions necessary (e.g. in a class <code>Group</code> a method like <code>add(Student student)</code>, modifying the Group's fields to now contain one more Student).</p>
</li>
<li><p>The user interface, consisting of everything you need to show the user the current state of the application, and to get his commands. Execute them by just calling the business logic.</p>
</li>
</ul>
<p>If you organize your code that way, you gain some benefits:</p>
<ul>
<li>Your code is more readable. If you want to know what it means to add a student to a group, you find it in the <code>Group</code> business class. There's no need to skip over the Swing code where get JLabel contents and add text to other JLabels. The same is true for the UI classes. They just define how to interact with the user, e.g. when a user presses this or that button, you want to add a student to a group, no matter how that works internally. That's responsibility of the business logic.</li>
<li>You gain a better re-usability. Maybe you later want to deploy your app on a server and have the users interact from their browsers. Then you can keep the business logic unchanged, "just" write a fresh web-based front-end, replacing or adding to the Swing user interface.</li>
</ul>
    </div>