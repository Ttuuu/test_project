<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your first solution's time complexity is non-trivial to determine, and it won't work for long lists because it'll run out of stack, while your second solution obviously needs linear time (optimal) and is unlikely to run out of memory, so I would scrap the first one right away.</p>

<p>The first solution is also inferior because of the <code>_mem</code> member. There is no reason to create this in <code>Rob</code>, and there is no reason to make it a member. Making it a member means:
 - this code can't be called concurrently
 - it leaves memory hanging around once the method exists
 - it is susceptible to interference by other members
 - it is hard to reason about than a variable because it is removed from the method that use it</p>

<p>One nice solution would be to make <code>_mem</code> a local variable, and <code>Helper</code> a local function in <code>Rob</code>: that way you don't have to pass <code>nums</code> and <code>_mem</code> around, and there is no way to mis-use the code. Then you can make all these methods <code>static</code>.</p>

<h2>Naming</h2>

<p>The naming could be better:</p>

<ul>
<li><code>_mem</code> and <code>memo</code> are both cryptic (<code>_mem</code> is providing memoisation, and <code>memo</code> is arguably not)</li>
<li><code>Rob</code> and <code>Rob2</code> convey almost nothing</li>
<li><code>Helper</code> says <em>nothing at all</em> (what is it helping? what does it do?)</li>
</ul>

<h2>Documentation</h2>

<ul>
<li>Please take the time to add documentation. It doesn't matter if you are practising for an interview: real code needs documentation (so that it can be consumed and maintained), writing it is a skill worth practising, and doing so helps you to better reason about your code and solidify edge-case behaviour.</li>
</ul>

<h2>Tests</h2>

<p>The tests are limited and not very good. They do not test the case where you need to 'skip' a pair (e.g. <code>9, 1, 1, 9</code>) and do not cover any edge cases.</p>

<p>Both methods will throw on a <code>NullReferenceException</code> on <code>null</code> input, when they should probably throw a nice <code>ArgumentException</code> so that the caller knows immediately what they did wrong: ideally this would be tested.</p>
    </div>