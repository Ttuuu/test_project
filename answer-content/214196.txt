<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ol>
<li><p><code>private:</code> is redundant: While <code>union</code> and <code>struct</code> default to <code>public</code>, <code>class</code> already defaults to <code>private</code>.</p></li>
<li><p>Calling the capacity <code>size</code> is seriously counter-intuitive. <code>std::string</code> has <code>.length()</code> as a legacy-method which is equal to <code>.size()</code>.</p></li>
<li><p>A factor of two or more when re-allocating is seriously sub-optimal: It inhibits re-use of returned memory-blocks when expanding bit by bit.</p></li>
<li><p>Unconditionally over-allocating on creation is in general a serious pessimisation.</p></li>
<li><p>Why does <code>_debug()</code> use <code>cout</code> instead of <code>cerr</code>?</p></li>
<li><p>Any reason you use your own macro, instead of re-using <a href="https://en.cppreference.com/w/cpp/error/assert" rel="nofollow noreferrer"><code>assert()</code>'s <code>NDEBUG</code></a>?</p></li>
<li><p>It's curious that assignment accepts an rvalue-reference or a copy, but not a constant reference. Also consider accepting a <code>const char*</code> like the ctor does.</p></li>
<li><p>Construction from <code>const char*</code> will write out-of-bounds if passed a 0-length string.</p></li>
<li><p>Why write the nul-terminator in an extra step when you can simply copy that too?</p></li>
<li><p><a href="https://en.cppreference.com/w/cpp/algorithm/copy_n" rel="nofollow noreferrer"><code>std::copy_n</code></a> seems to fit your use better than <code>std::copy()</code>.</p></li>
<li><p>Not doing the move in the move-ctor, but delegating to a separate method called <code>move()</code>, is seriously weird.</p></li>
<li><p><code>+=</code> is the operator for concatenation. Why do you call it <code>concat()</code>?</p></li>
<li><p>Consider consolidating the methods accepting a non-modifiable range to one using iterators. Excepting those which might use the fact that the source-range <em>is</em> actually already nul-terminated.</p></li>
<li><p>You can restrict member-functions to only be called on xvalues:</p>

<pre><code>friend Stringy&amp;&amp; operator+ (const char* Other) &amp;&amp;;
friend Stringy&amp;&amp; operator+ (const Stringy&amp; Other) &amp;&amp;;
</code></pre>

<p>If you are at it, consider doing the same for <code>+=</code>.</p></li>
<li><p>If a function does not <em>need</em> to have the access, don't declare it a <code>friend</code>.</p></li>
<li><p>Take advantage of templates to run the same code with <code>std::string</code> and your own <code>Stringy</code>.</p></li>
</ol>
    </div>