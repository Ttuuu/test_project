<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Just one addition: like <code>asprintf</code> <em>vs</em> <code>snprintf</code>. One can effectively predict the size, so I would think it natural to have a string buffer and the size passed in instead of creating it dynamically.</p>

<pre><code>#include &lt;stdlib.h&gt; /* strtol */
#include &lt;string.h&gt; /* strlen */
#include &lt;stdio.h&gt;  /* printf */
#include &lt;assert.h&gt; /* assert */

/** Converts {str} to the underlying bit representation in hex, stored in
 {hex}. It may fail to compute the entire string due to {hex_size}, in which
 case the return will be less then the {str} length.
 str: A valid null-terminated string.
 hex: The output string.
 hex_size: The output string's size.
 return: The number of characters from the original that it processed. */
static size_t strToHex(const char *str, char *hex, size_t hex_size)
{
    static const char digits[0x0F] = { '0', '1', '2', '3', '4', '5',
        '6', '7', '8', '9', 'A', 'B', 'C', 'E', 'F' };
    const size_t str_len = strlen(str), hex_len = hex_size - 1;
    const size_t length = str_len &lt; hex_len / 2 ? str_len : hex_len / 2;
    const char *s = str;
    char *h = hex;
    size_t x;
    assert(str &amp;&amp; hex);
    if(!hex_size) return 0;
    for(x = 0; x &lt; length; x++)
        *h++ = digits[(*s &amp; 0xF0) &gt;&gt; 4], *h++ = digits[*s++ &amp; 0x0F];
    *h = '\0';
    return s - str;
}

int main(void)
{
    const char *str = "abcdefghijklmnopqrstuvwxyz", *str2 = "æôƌԹظⓐa";
    char hex[80];
    size_t ret;
    ret = strToHex(str, hex, sizeof hex);
    printf("\"%s\" -&gt; \"%s\" (%lu.)\n", str, hex, (unsigned long)ret);
    ret = strToHex(str, hex, sizeof hex / 2);
    printf("\"%s\" -&gt; \"%s\" (%lu.)\n", str, hex, (unsigned long)ret);
    ret = strToHex(str, hex, 0);
    printf("\"%s\" -&gt; \"%s\" (%lu.)\n", str, hex, (unsigned long)ret);
    ret = strToHex(str2, hex, sizeof hex);
    printf("\"%s\" -&gt; \"%s\" (%lu.)\n", str2, hex, (unsigned long)ret);
    return EXIT_SUCCESS;
}
</code></pre>

<p>It cannot really fail if given the proper input, so this simplifies error checking a lot, especially in <code>C</code>. <code>malloc</code> and <code>sprintf</code> are pretty slow functions, comparatively, so I expect this to be faster and more robust.</p>
    </div>