<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><code>List</code> is internally backed by an array, so item-removal won't be efficient. Use <code>LinkedList</code> instead which is a doubly linked list and allows efficient removal.</p>
<pre class="lang-cs prettyprint-override"><code>[TestClass]
public class LruCacheUnitTest
{
    [TestMethod]
    public void LruCacheTest()
    {
        var cache = new LruCache&lt;int, string&gt;(2);
    
        cache.Put(1, "One");
        cache.Put(2, "Two");
        Assert.AreEqual("One", cache.Get(1));
        cache.Put(3, "Three");
        Assert.IsNull(cache.Get(2));
        cache.Put(4, "Four");
        Assert.IsNull(cache.Get(1));
        Assert.AreEqual("Three", cache.Get(3));
        Assert.AreEqual("Four", cache.Get(4));
    }
}

public class LruCache&lt;TKey, TValue&gt;
{
    private int capacity;
    private Dictionary&lt;TKey, TValue&gt; valueCache;
    private Dictionary&lt;TKey, LinkedListNode&lt;TKey&gt;&gt; nodeCache;
    private LinkedList&lt;TKey&gt; orderList;

    public LruCache(int capacity)
    {
        this.capacity = capacity;
        this.valueCache = new Dictionary&lt;TKey, TValue&gt;(capacity);
        this.nodeCache = new Dictionary&lt;TKey, LinkedListNode&lt;TKey&gt;&gt;(capacity);
        this.orderList = new LinkedList&lt;TKey&gt;();
    }

    public void Put(TKey key, TValue value)
    {
        if (this.valueCache.ContainsKey(key)) // Key already exists.
        {
            this.Promote(key);            
            this.valueCache[key] = value;
            return;
        }

        if (this.valueCache.Count == capacity) // Cache full.
        {
            this.RemoveLast();
        }
        
        this.AddFirst(key, value);
    }

    public TValue Get(TKey key)
    {
        if (!this.valueCache.ContainsKey(key))
        {
            return default;
        }

        this.Promote(key);            
        return this.valueCache[key];
    }
    
    private void AddFirst(TKey key, TValue value)
    {
        var node = new LinkedListNode&lt;TKey&gt;(key);
        this.valueCache[key] = value;
        this.nodeCache[key] = node;
        this.orderList.AddFirst(node);
    }
    
    private void Promote(TKey key)
    {
        LinkedListNode&lt;TKey&gt; node = this.nodeCache[key];
        this.orderList.Remove(node);
        this.orderList.AddFirst(node);
    }
    
    private void RemoveLast()
    {
        LinkedListNode&lt;TKey&gt; lastNode = this.orderList.Last;
        this.valueCache.Remove(lastNode.Value);
        this.nodeCache.Remove(lastNode.Value);
        this.orderList.RemoveLast();
    }
}
</code></pre>
    </div>