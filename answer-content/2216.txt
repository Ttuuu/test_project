<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<pre><code>#include &lt;iostream&gt;
#include &lt;vector&gt;
#include &lt;string&gt;
#include &lt;sstream&gt;
#include &lt;cstdlib&gt; // mmocny: I needed to add this to use atof
#include &lt;functional&gt;

using namespace std;

//----------------------------------

class Variable
{
public:
    Variable(const string&amp; name, double val)
        : name_(name), val_(val) // mmocny: Use initializer lists
    {
    }

    // mmocny: get_* syntax is less common in C++ than in java etc.
    const string&amp; name() const { return name_; } // mmocny: Don't mark as inline (they already are, and its premature optimization)
    double val() const { return val_; } // mmocny: Again, don't mark as inline
private:
    string name_; // mmocny: suggest renaming name_ or _name: Easier to spot member variables in method code, and no naming conflicts with methods
    double val_;
};

//----------------------------------

// mmocny: Replace print_* methods with operator&lt;&lt; so that other (non cout) streams can be used.
// mmocny: Alternatively, define to_string()/str() methods which can also be piped out to different streams
std::ostream &amp; operator&lt;&lt;(std::ostream &amp; out, Variable const &amp; v)
{
    return out &lt;&lt; v.name() &lt;&lt; ", " &lt;&lt; v.val() &lt;&lt; endl;
}

std::ostream &amp; operator&lt;&lt;(std::ostream &amp; out, vector&lt;Variable&gt; const &amp; v)
{
    for (vector&lt;Variable&gt;::const_iterator it = v.begin(), end = v.end(); it != end; ++it ) // mmocny: Use iterators rather than index access
    {
        out &lt;&lt; *it &lt;&lt; endl;
    }
    return out;
}

//----------------------------------

double get_variable(const string&amp; op, vector&lt;Variable&gt;&amp; v)
{
    // mmocny: instead of using a vector&lt;Variable&gt; you should be using a map/unordered_map&lt;string,double&gt; and doing a key lookup here
    int size = v.size();
    for (int i = 0; i &lt; size; i++)
    {   
        if (op == v[i].name())
            return v[i].val();
    }
    // mmocny: what do you do if you don't find the variable?
    throw std::exception(); // mmocny: You should do something better than throw a generic exception()
}

//----------------------------------

bool is_number(const string&amp; op)
{
    // mmocny: someone else already mentioned: what if op is empty?
    int char_to_int = op[0];
    // mmocny: couple notes here:
    // 1) chars are actually numbers you can reference directly, and not need "magic" constants
    // 2) functions in the form "if (...) return true; else return false;" should just be reduced to "return (...);"
    // 3) is_number functionality already exists in libc as isdigit()
    // 4) long term, you are probably going to want to improve this function.. what about negative numbers? numbers in the form .02? etc..
    //return (char_to_int &gt;= '0' &amp;&amp; char_to_int &lt;= '9');
    return isdigit(char_to_int);
}

//----------------------------------

// mmocny: replace istringstream with istream
// mmocny: you only need to predeclare this one function
double operate(const string&amp; op, istream&amp; in, vector&lt;Variable&gt;&amp; v);

//----------------------------------
/*
 * mmocny: All of your perform_* functions have identical code other than the operator being used.
 * You can turn all of these functions into a single function template where you pass the operator to be used.
 * Luckily, &lt;functional&gt; already has plus minus multiplies divides function objects (functors)
 */

template&lt; class Operator &gt;
double perform_action(istream&amp; in, vector&lt;Variable&gt;&amp; v, Operator op)
{
    string left;
    in &gt;&gt; left;

    double result = operate(left, in, v); // mmocny: This is a big one: for correctness, you must calculate result of left BEFORE you read right

    string right;
    in &gt;&gt; right;

    return op(result, operate(right, in, v));
}

//----------------------------------

double operate(const string&amp; op, istream&amp; in, vector&lt;Variable&gt;&amp; v)
{   
    double value;
    if (op == "+")
        value = perform_action(in, v, plus&lt;double&gt;());
    else if (op == "-")
        value = perform_action(in, v, minus&lt;double&gt;());
    else if(op == "*")
        value = perform_action(in, v, multiplies&lt;double&gt;());
    else if (op == "/")
        value = perform_action(in, v, divides&lt;double&gt;());
    else if (is_number(op))
        value = atof(op.c_str()); // mmocny: consider using boost::lexical_cast&lt;&gt;, or strtod (maybe)
    else
        value = get_variable(op, v);

    return value;
}

//----------------------------------

void define_new_var(vector&lt;Variable&gt;&amp; v, istream&amp; in)
{
    string name;
    in &gt;&gt; name;

    string temp;
    in &gt;&gt; temp;

    double value = operate(temp, in, v);

    v.push_back(Variable(name, value));
}

//----------------------------------

int main()
{
    cout &lt;&lt; endl &lt;&lt; "LeRPN Programming Language" &lt;&lt; endl;

    vector&lt;Variable&gt; v;

    string temp;
    while (cin)
    {
        cout &lt;&lt; endl &lt;&lt; "&gt; ";

        getline(cin, temp);

        if (temp.empty()) // mmocny: This also handles the case of CTRL+D
            continue;

        istringstream iss(temp);
        string op;
        iss &gt;&gt; op;

        if (op == "quit")
            break;
        else if (op == "def")
            define_new_var(v, iss);
        else if (op == "show_vars")
            std::cout &lt;&lt; v &lt;&lt; std::endl;
        else
            cout &lt;&lt; endl &lt;&lt; operate(op, iss, v) &lt;&lt; endl;
    }
}
</code></pre>

<p>Those are my changes, with comments inline.  I would make more changes, but thats enough for now :)</p>

<p>Notice one BIG change: you have a serious correctness bug in your perform_* functions.  Not that I've tested my modified code above for all edge cases, but the original code was flat out always wrong for any nested calculations.</p>
    </div>