<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><p>Use <code>std::unique_ptr</code>. (It's much safer and easier than manual memory management).</p></li>
<li><p><em>bug:</em> The <code>delete</code> operator will call the object destructor. We should not call the destructor manually. (A perfect example of why we should use <code>std::unique_ptr</code> and avoid this entirely :D ).</p></li>
<li><p>Note that <code>std::optional</code> doesn't allocate memory itself, but keeps the contained object on the stack. This could be done with a boolean flag and <code>std::aligned_storage</code> or perhaps with <code>std::variant</code>.</p></li>
<li><p><code>value</code> and <code>valueOr</code> can be <code>const</code> functions. <code>value</code> should perhaps return a reference, and have const and non-const versions.</p></li>
<li><p><em>opinion:</em> I really dislike that <code>std::optional</code> overloads <code>operator-&gt;</code> and <code>operator*</code>. They're unnecessary and make it less obvious what the type is. It's not a pointer type (at least semantically), so I don't think they make sense. Personally I'd skip them.</p></li>
<li><p>If we're creating a special case for reference types, and hiding the <code>std::reference_wrapper</code> internally, we need to re-implement the other access functions, not just <code>value()</code>. Currently the <code>reference_wrapper</code> is exposed through <code>valueOr</code>, <code>operator*</code> and <code>operator-&gt;</code>.</p>

<p>(This results in a subtly different implementation for "reference maybes", and I don't know if that's a good thing or not. However, I feel like we should either hide the <code>std::reference_wrapper</code> entirely, or let the user create a <code>Maybe&lt;std::reference_wrapper&lt;T&gt;&gt;</code> themselves if they need one).</p></li>
<li><p>The <code>apply</code> methods are very interesting. :)</p>

<ul>
<li><p>I think we need <code>const</code> versions (for calling <code>const</code> member functions of types contained in <code>const Maybe</code>'s).</p></li>
<li><p>Since the <code>Maybe</code> can also store simple POD types, where the <code>apply</code> functions do not make sense, perhaps <code>apply</code> should be implemented as a set of free functions (and named <code>invoke_maybe</code> or something similar). This would provide a calling syntax more consistent with <code>std::invoke</code> and <code>std::bind</code>. It would also allow <code>invoke_maybe</code> to be implemented for other classes, such as <code>std::function</code> (or <code>std::optional</code>), returning an empty <code>Maybe</code> if necessary.</p></li>
<li><p><em>feature request:</em> Note that <a href="https://en.cppreference.com/w/cpp/utility/functional/invoke" rel="nofollow noreferrer"><code>std::invoke</code></a> lets us access member variables, not just member functions. This doesn't appear to be supported with the current <code>apply</code> implementation, but would be pretty cool.</p></li>
</ul></li>
</ul>
    </div>