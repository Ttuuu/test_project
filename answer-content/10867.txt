<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>A class should know &amp; do everything about itself</strong></p>

<ul>
<li><code>IsValidCourseName</code> and <code>isValidCourseDescription</code> should be in the
<code>Course</code> class</li>
</ul>

<p><strong>Design should reflect your domain</strong></p>

<ul>
<li><p>What are we talking about here? A University, yes? Use that to frame
your design. What things are in there and what do we do with them?
What attributes to these things have?</p></li>
<li><p>I think there should be a <code>Schedule</code> class. This schedule may be
ordered, i.e. "scheduled" or it may be unordered, i.e. "just a list of
courses I've signed up for."</p></li>
<li><p>Maybe a <code>Schedule</code> has a boolean to indicated that it's been
scheduled, or maybe theres a separate class <code>CourseLoad</code> to
encapsulate the idea that this is a list of courses not yet
scheduled.</p></li>
<li><p>Maybe a <code>CourseCatalog</code> should encapsulate all the "available
courses" stuff.</p></li>
<li><p>Then client code is necessarily written &amp; reads in terms of your
business model. e.g. compare: <code>public String[]
scheduleCourses(String[] param0)</code> and <code>public Schedule
scheduleCourses(CourseLoad newCourseLoad)</code>. It becomes virtually self
documenting.</p></li>
<li><p>You should get 10 lashes for every parameter name like <code>param0</code></p></li>
<li><p><code>havePrerequisitesBeenTaken()</code> is totally baffling. Where the hell
did <code>courseDescription</code> come from? It's not in <code>Course</code>. The actual
code suggests that if a course has a prerequisite then, by
definition, it has not been taken. Yet your comments say otherwise.
That makes no sense. And I had to study the code too much to figure
that out.</p></li>
</ul>

<p><strong>I like the CourseScheduler as a separate class</strong></p>

<ul>
<li><p>Separating out complex algorithms is a good way to contain complexity
and keep other classes cleaner and clearer. This separation enhances 
maintenance.</p></li>
<li><p>Single Responsibility Principle (SRP) says a class should do only
one thing. In this case "schedule courses." It should not be
building the available courses prerequisite map.</p></li>
</ul>

<p><strong>Design &amp; coding principles are fractal</strong></p>

<ul>
<li><p>A <a href="https://en.wikipedia.org/wiki/Fractal" rel="nofollow noreferrer">fractal</a> is a self-similar pattern, and likewise good design
principles should be applied at all levels of your code. Abstraction
and encapsulation apples at module, class, method, code block levels.</p></li>
<li><p>I.E. make classes, methods, code bits as needed to express things in
business and process terms as much as practical. "Push details down".
Otherwise you tend to obscure what's going on.</p></li>
<li><p><code>buildSchedule()</code> is just one such method that is cluttered and it's
function is not readily apparent without some deliberate diving into
the details. Yes, at some point the code must do what it does, but at
the conceptual level of "how to build a schedule" I want to see the
conceptual steps expressed.</p></li>
<li><p>The <code>CourseScheduler</code> class is cluttered because it's doing more than
just producing a schedule. Specifically it seems to be the course
catalog as well.</p></li>
</ul>

<p><strong>Refactoring</strong></p>

<p>Refactoring is a term with a technical meaning. Refactoring is the act of changing code without changing it's behavior (i.e. without breaking it!). There is <a href="https://rads.stackoverflow.com/amzn/click/com/0201485672" rel="nofollow noreferrer">an excellent book on the subject</a> that should be on every programmer's bookshelf - hear me now and believe me later.</p>

<p>Good OO design <em>significantly</em> enhances your ability to refactor. So what, you say? Invariably code must be changed, either to fix bugs or add functionality. So the act of refactoring really starts with a software design that is flexible and extensible.</p>

<p>Refactoring is not a measure of design quality. It is not what you do only after you've delivered your final product. It is what you do from the very beginning of writing your code, staring with a blank sheet of paper (metaphorically speaking, of course). <strong>Continuous Refactoring</strong> means write what you need now. As you add stuff, refactor as needed to (a) not break what you have (b) apply and maintain good design and coding principles when adding code and (c) ultimately enhance future changes.</p>

<ul>
<li><p><code>buildSchedule()</code> should have the catalog &amp; student's course list
passed into it. Now buildSchedule can deal with any catalog and any
course list. If the catalog mapping algorithm changes,
<code>buildSchedule()</code> does not change.</p></li>
<li><p>When you have complex or obscure logic consider refactoring. Compare:
<code>if (prerequisites == null || prerequisites.size() == 0)</code> vice
<code>if(course.prerequisitesAreMet())</code>.  Note that (a) As changed I can
tell what's going and (b) the original code is not in the <code>Course</code>
class, yet it has to know how to figure out prerequisites for the
stupid course.</p></li>
</ul>

<p>Good luck!</p>
    </div>