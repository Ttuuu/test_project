<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This is an interesting use case of postfixes.  Here's how I would go about it.  Unfortunately, because postfixes can't take regexen, you need to specify each one individually, but it's not horrible, especially if you throw things into a module. </p>

<p>Let's first create a postfix operator for each value type:</p>

<pre class="lang-perl prettyprint-override"><code>multi postfix:&lt;kg&gt; (Numeric() $m) { Mass.new: $m, 'k' }
multi postfix:&lt;g&gt;  (Numeric() $m) { Mass.new: $m      }
multi postfix:&lt;mg&gt; (Numeric() $m) { Mass.new: $m, 'm' }
</code></pre>

<p>Basically, we're saying we want to attach <code>g</code> onto something.  We'd like it to be a number type, so we make have it only act on <code>Numeric</code> types, but if someone passes us a string, the <code>()</code> tells it to coerce it for us.  And then we make a <code>Mass</code> object from those the value and the prefix.</p>

<p>Now let's take a look at the <code>Mass</code> class.  All we really need to have in it is a weight and probably store its prefix so if we create a <code>kg</code> if we want to display it we can keep it in <code>kg</code> and not switch to <code>mg</code> or something.  We'll store things in grams, so on creation we use the prefix to shrink/expand the value. </p>

<pre class="lang-perl prettyprint-override"><code>class Mass {
  has $.grams;
  has $.prefix;
  method new  ($value, $prefix) {
    self.bless: 
      :grams($value * si-prefix{$prefix}),
      :$prefix
  }
}
</code></pre>

<p>The <code>si-prefix</code> is just a map of values: </p>

<pre class="lang-perl prettyprint-override"><code>my constant \si-prefix := Map.new( 'k', 1000, '', 1, 'm', 0.001 );
</code></pre>

<p>By making it independent of the gram, we can use it later for a length / etc class.  For that reason, I'd define it outside of the class so that it can be used by others easily.  Believe it or not, it is possible to have an empty string as a key.  Kind of useful in our case.</p>

<p>At this point, we can start to use our values:</p>

<pre class="lang-perl prettyprint-override"><code>say 500g; # --&gt; Weight.new(grams =&gt; 500, prefix =&gt; "")
say 2kg;  # --&gt; Weight.new(grams =&gt; 2000, prefix =&gt; "kg")
</code></pre>

<p>Okay, not the most useful output, but at least we know everything is working.  Let's make a <code>Str</code> and <code>gist</code> method that makes more sense:</p>

<pre><code>  method Str {
    $!grams / si-prefix{$!prefix}
    ~ $!prefix                     
    ~ 'g'
  }
  method gist { self.Str }
</code></pre>

<p>Now all we really have to do is handle the addition:</p>

<pre><code>multi infix:&lt;+&gt; (Mass \a, Mass \b) { Weight.new: a.grams + b.grams } 
multi infix:&lt;-&gt; (Mass \a, Mass \b) { Weight.new: a.grams - b.grams } 
</code></pre>

<p>This works great, but does automatically convert everything back to being a <code>g</code> unit even if both were <code>kg</code>, etc.  At this point, it's a bit of taste.  You could decide that the first or second unit has precedence, or implement some more complex logic (larger or smaller, or the one that results in no more than three decimal places or no more than three whole units, etc).  I'll leave that for you to implement.  </p>

<p>As I said, this would work great as a module.  You can do that like this:</p>

<pre class="lang-perl prettyprint-override"><code>unit module SI-Operators;

my constant \si-prefix := Map.new(
  'Y',  10 **  24,   'y',  10 ** -24,
  'Z',  10 **  21,   'z',  10 ** -21,
  'E',  10 **  18,   'a',  10 ** -18,
  'P',  10 **  15,   'f',  10 ** -15,
  'T',  10 **  12,   'p',  10 ** -12,
  'G',  10 **   9,   'n',  10 **  -9,
  'M',  10 **   6,   'μ',  10 **  -6,
  'k',  10 **   3,   'm',  10 **  -3,
  'h',  10 **   2,   'c',  10 **  -2,
  'da', 10 **   1,   'd',  10 **  -1,
  '',   1  
);

# MASSES

class Mass is export (:mass) {
  has $.grams;
  has $.prefix;
  method new  ($number, $prefix = '') {
    self.bless: 
      :grams($number * si-prefix{$prefix}),
      :$prefix
  }
  method Str {
    $!grams / si-prefix{$!prefix}
    ~ $!prefix
    ~ 'g'
  }
  method gist { self.Str }
}

multi infix:&lt;+&gt; (Mass \a, Mass \b) is export (:mass) { Mass.new: a.grams + b.grams } 
multi infix:&lt;-&gt; (Mass \a, Mass \b) is export (:mass) { Mass.new: a.grams - b.grams } 

multi postfix:&lt;Yg&gt;  (Numeric() $m) is export (:mass) { Mass.new: $m, 'Y'  }
multi postfix:&lt;Zg&gt;  (Numeric() $m) is export (:mass) { Mass.new: $m, 'Z'  }
multi postfix:&lt;Eg&gt;  (Numeric() $m) is export (:mass) { Mass.new: $m, 'E'  }
multi postfix:&lt;Pg&gt;  (Numeric() $m) is export (:mass) { Mass.new: $m, 'P'  }
multi postfix:&lt;Tg&gt;  (Numeric() $m) is export (:mass) { Mass.new: $m, 'T'  }
multi postfix:&lt;Gg&gt;  (Numeric() $m) is export (:mass) { Mass.new: $m, 'G'  }
multi postfix:&lt;Mg&gt;  (Numeric() $m) is export (:mass) { Mass.new: $m, 'M'  }
multi postfix:&lt;kg&gt;  (Numeric() $m) is export (:mass) { Mass.new: $m, 'k'  }
multi postfix:&lt;hg&gt;  (Numeric() $m) is export (:mass) { Mass.new: $m, 'h'  }
multi postfix:&lt;dag&gt; (Numeric() $m) is export (:mass) { Mass.new: $m, 'da' }
multi postfix:&lt;g&gt;   (Numeric() $m) is export (:mass) { Mass.new: $m       }
multi postfix:&lt;dg&gt;  (Numeric() $m) is export (:mass) { Mass.new: $m, 'd'  }
multi postfix:&lt;cg&gt;  (Numeric() $m) is export (:mass) { Mass.new: $m, 'c'  }
multi postfix:&lt;mg&gt;  (Numeric() $m) is export (:mass) { Mass.new: $m, 'm'  }
multi postfix:&lt;μg&gt;  (Numeric() $m) is export (:mass) { Mass.new: $m, 'μ'  }
multi postfix:&lt;ng&gt;  (Numeric() $m) is export (:mass) { Mass.new: $m, 'n'  }
multi postfix:&lt;pg&gt;  (Numeric() $m) is export (:mass) { Mass.new: $m, 'p'  }
multi postfix:&lt;fg&gt;  (Numeric() $m) is export (:mass) { Mass.new: $m, 'f'  }
multi postfix:&lt;ag&gt;  (Numeric() $m) is export (:mass) { Mass.new: $m, 'a'  }
multi postfix:&lt;zg&gt;  (Numeric() $m) is export (:mass) { Mass.new: $m, 'z'  }
multi postfix:&lt;yg&gt;  (Numeric() $m) is export (:mass) { Mass.new: $m, 'y'  }



# LENGTH

class Length is export (:length) {
  has $.meters;
  has $.prefix;
  method new  ($number, $prefix = '') {
    self.bless: 
      :meters($number * si-prefix{$prefix}),
      :$prefix
  }
  method Str {
    $!meters / si-prefix{$!prefix}
    ~ $!prefix
    ~ 'm'
  }
  method gist { self.Str }
}

multi infix:&lt;+&gt; (Length \a, Length \b) is export (:length) { Length.new: a.meters + b.meters } 
multi infix:&lt;-&gt; (Length \a, Length \b) is export (:length) { Length.new: a.meters - b.meters } 

multi postfix:&lt;Ym&gt;  (Numeric() $l) is export (:mass) { Length.new: $l, 'Y'  }
multi postfix:&lt;Zm&gt;  (Numeric() $l) is export (:mass) { Length.new: $l, 'Z'  }
multi postfix:&lt;Em&gt;  (Numeric() $l) is export (:mass) { Length.new: $l, 'E'  }
multi postfix:&lt;Pm&gt;  (Numeric() $l) is export (:mass) { Length.new: $l, 'P'  }
multi postfix:&lt;Tm&gt;  (Numeric() $l) is export (:mass) { Length.new: $l, 'T'  }
multi postfix:&lt;Gm&gt;  (Numeric() $l) is export (:mass) { Length.new: $l, 'G'  }
multi postfix:&lt;Mm&gt;  (Numeric() $l) is export (:mass) { Length.new: $l, 'M'  }
multi postfix:&lt;km&gt;  (Numeric() $l) is export (:mass) { Length.new: $l, 'k'  }
multi postfix:&lt;hm&gt;  (Numeric() $l) is export (:mass) { Length.new: $l, 'h'  }
multi postfix:&lt;dam&gt; (Numeric() $l) is export (:mass) { Length.new: $l, 'da' }
multi postfix:&lt;m&gt;   (Numeric() $l) is export (:mass) { Length.new: $l       }
multi postfix:&lt;dm&gt;  (Numeric() $l) is export (:mass) { Length.new: $l, 'd'  }
multi postfix:&lt;cm&gt;  (Numeric() $l) is export (:mass) { Length.new: $l, 'c'  }
multi postfix:&lt;mm&gt;  (Numeric() $l) is export (:mass) { Length.new: $l, 'm'  }
multi postfix:&lt;μm&gt;  (Numeric() $l) is export (:mass) { Length.new: $l, 'μ'  }
multi postfix:&lt;nm&gt;  (Numeric() $l) is export (:mass) { Length.new: $l, 'n'  }
multi postfix:&lt;pm&gt;  (Numeric() $l) is export (:mass) { Length.new: $l, 'p'  }
multi postfix:&lt;fm&gt;  (Numeric() $l) is export (:mass) { Length.new: $l, 'f'  }
multi postfix:&lt;am&gt;  (Numeric() $l) is export (:mass) { Length.new: $l, 'a'  }
multi postfix:&lt;zm&gt;  (Numeric() $l) is export (:mass) { Length.new: $l, 'z'  }
multi postfix:&lt;ym&gt;  (Numeric() $l) is export (:mass) { Length.new: $l, 'y'  }
</code></pre>

<p>What's great about doing it as a module is you can only import what you need.  For example, if in most of your program you're not using SI units, there's no reason to polute the operator namespace with lots of postfixes.  But when you do:</p>

<pre><code>sub stuff-with-lengths {
  use SI-Operators :length;
  say 25mm + 78km # 78000.025m
}
</code></pre>

<p>Note that multiplying, etc, would need you to implement more math operator subs.  But could also lead to interesting things like a <code>Length * Length</code> generating an <code>Area</code> etc, and <code>Area * Length</code> getting <code>Volume</code></p>
    </div>