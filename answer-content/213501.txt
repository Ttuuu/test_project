<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Some suggestions:</p>

<ul>
<li>Every single line should at least be comprehensible on its own. Single letter variables destroy that comprehension, meaning that anyone reading the code needs to read the <em>entire</em> code and mull it over for a while to even understand what it's meant to do. Something like <code>current_byte = file_handle.read(1)</code> is a lot more readable than <code>b = f.read(1)</code>.</li>
<li>All the top-level code should be in either functions, methods or classes, and the file should have a <code>main</code> function, so that the pieces of this code can be understood and reused.</li>
<li>Running this through at least one linter such as <code>flake8</code> and <code>pycodestyle</code> will give several tips to produce more pythonic code. For example, <code>return (Res);</code> should be written as <code>return res</code> - no parentheses or semicolon, and <code>snake_case</code> variable names.</li>
<li>There are several magic values like <code>80</code> and <code>4</code> which are hard to guess the meaning of. They should be pulled out as named variables or constants.</li>
<li>Instead of closing the file handle explicitly you should use a context manager like <code>with open(â€¦) as file_handle:</code>. This ensures that the file handle will be closed even if there is an exception.</li>
<li>Rather than checking whether the current position in the file is at the end you should read until reading returns nothing.</li>
<li>There are assignment operators such as <code>//=</code> which can simplify some of your expressions.</li>
<li>A helpful exercise for detecting "hacky" code is to add <a href="https://docs.python.org/3/library/typing.html" rel="nofollow noreferrer">type hints</a> to it, and verifying it with <code>mypy</code> using strict settings (like not allowing <code>Any</code>). For example, it looks like the type of <code>b</code> would be <code>Union[byte, str]</code>, which is a code smell - the variable is literally used for two different <em>types of</em> things.</li>
</ul>
    </div>