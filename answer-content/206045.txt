<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ol>
<li><p>you can simplify this block a little:</p>

<pre><code>for (let row of board) {
    for (let char of row) {
         map[counter] = char;
         counter++;
    }
}
</code></pre>

<p>into:</p>

<pre><code>const map = board.flat();
</code></pre></li>
<li><p>You can generate matches pseudo-automatically which simultaneously improve readability</p>

<pre><code>function generateMatches() {
     function simpleRange(upTo) {
          return new Array(upTo).fill(true).map((_, index) =&gt; index);
     }

     function customRange(start, step, length) {
          return simpleRange(length).map(index =&gt; start + index * step);
     }

     function horizontalRow(top) {
          return customRange(3 * top, 1, 3);
     }

     function verticalRow(left) {
          return customRange(left, 3, 3);
     }

     function progressingDiagonal() {
          return customRange(0, 4, 3);
     }

     function regressingDiagonal() {
          return customRange(2, 2, 3);
     }

     const matches = [];
     for (let top = 0; top &lt; 3; ++top) {
          matches.push(horizontalRow(top));
     }
     for (let left = 0; left &lt; 3; ++left) {
          matches.push(verticalRow(left));
     }
     matches.push(progressingDiagonal());
     matches.push(regressingDiagonal());
     return matches;
}
</code></pre></li>
</ol>

<blockquote>
  <p>Warning! I assumed starting at 0 index</p>
</blockquote>

<ol start="3">
<li><p>Don't use <code>console.log(...);</code> in solve function. Try to return list of matches instead and use user interface API outside of it. It will allow you to write some automatic (for instance unit) tests for your code (using Motcha, Jasmine, etc... depending on your target technology)</p></li>
<li><p>General advices:</p>

<ul>
<li>Use better names for variables: <code>map</code> -&gt; <code>flatBoard</code>, <code>arr</code> -&gt; <code>row</code>, <code>arr2</code> -&gt; <code>reducedRow</code></li>
<li><p>Split your code into smaller functions for each step, for instance:</p>

<pre><code>const arr2 = [...new Set(arr)].join("");
</code></pre>

<p>into:</p>

<pre><code>function reduceRow(array) {
     return [...new Set(array)].join("");
}
const reducedRow = reduceRow(row);
</code></pre></li>
</ul></li>
<li><p>Your original question is about performance. Let just start it now:</p>

<ul>
<li><p>IMHO you don't need to convert Set into array into string to test its size. Use something like this instead: <br>
<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/size" rel="nofollow noreferrer">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/size</a></p>

<pre><code>function rowDiversity(array) {
     return new Set(array).size;
}
const rowDiversity = rowDiversity(row);
</code></pre></li>
<li><p>Not sure if destructuring operator is needed at all at previous line too (most likely its performance impact is already neutral) But I would write this instead anyway:</p>

<pre><code>function fetchRow(flattenBoard, match) {
     return match.map(index =&gt; flattenBoard[index]);
}
const row = fetchRow(flattenBoard, match);
</code></pre></li>
</ul></li>
</ol>
    </div>