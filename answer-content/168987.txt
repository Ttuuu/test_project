<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There doesn't appear to be a way to get the results directly from <code>document.evaluate()</code>.</p>
<p>Taking the concept from <a href="https://stackoverflow.com/a/42600459/1575353">this answer</a>, one could get <a href="https://developer.mozilla.org/en-US/docs/Introduction_to_using_XPath_in_JavaScript#Snapshots" rel="nofollow noreferrer">a snapshot</a> result, create an array <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/fill" rel="nofollow noreferrer">filled</a> with dummy values (e.g. <code>0</code>s) and then <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map" rel="nofollow noreferrer">map</a> calls to <a href="https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIDOMXPathResult#snapshotItem()" rel="nofollow noreferrer">snapshotItem()</a>.</p>
<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>const query = document.evaluate("//*[@*[starts-with(name(), 'temp')]]", document, null, XPathResult.ORDERED_NODE_SNAPSHOT_TYPE, null);
const results = Array(query.snapshotLength).fill(0).map((element, index) =&gt;  query.snapshotItem(index));
console.log(results);</code></pre>
<pre class="snippet-code-html lang-html prettyprint-override"><code>&lt;div temp-callback="1" temp-post-callback="4"&gt;&lt;/div&gt;
&lt;div temp-callback="2"&gt;&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
&lt;div temp-callback="8" temp-post-callback="7"&gt;&lt;/div&gt;</code></pre>
</div>
</div>

<p>While less of a functional programming approach, one could also just use a <em>for</em> loop:</p>
<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>const query = document.evaluate("//*[@*[starts-with(name(), 'temp')]]", document, null, XPathResult.ORDERED_NODE_SNAPSHOT_TYPE, null);
for (var i=0, results = []; i&lt; query.snapshotLength; results.push(query.snapshotItem(i++)));
console.log(results);</code></pre>
<pre class="snippet-code-html lang-html prettyprint-override"><code>&lt;div temp-callback="1" temp-post-callback="4"&gt;&lt;/div&gt;
&lt;div temp-callback="2"&gt;&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
&lt;div temp-callback="8" temp-post-callback="7"&gt;&lt;/div&gt;</code></pre>
</div>
</div>

<p>Additionally, given the last example of <a href="https://en.wikipedia.org/wiki/While_loop#Equivalent_constructs" rel="nofollow noreferrer"><em>Equivalent constructs</em></a>, the <em>while</em> loop could be rewritten as a <em>for</em> loop as well:</p>
<pre><code>for ( ; condition; ) {
    statements;
}
</code></pre>
<p>So the original code could be written as such:</p>
<pre><code>var nodes = [];
for(var node = result.iterateNext(); node; node = result.iterateNext()) {
    nodes.push(node);
}
</code></pre>
<p>See this demonstrated in the snippet below:</p>
<p></p><div class="snippet" data-lang="js" data-hide="true" data-console="true" data-babel="false">
<div class="snippet-code snippet-currently-hidden">
<pre class="snippet-code-js lang-js prettyprint-override"><code>var result = document.evaluate("//*[@*[starts-with(name(), 'temp')]]", document, null, XPathResult.ANY_TYPE, null);
var nodes = [];
for(var node = result.iterateNext(); node; node = result.iterateNext()) {
  nodes.push(node);
}

console.log(nodes);</code></pre>
<pre class="snippet-code-html lang-html prettyprint-override"><code>&lt;div temp-callback="1" temp-post-callback="4"&gt;&lt;/div&gt;
&lt;div temp-callback="2"&gt;&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
&lt;div temp-callback="8" temp-post-callback="7"&gt;&lt;/div&gt;</code></pre>
</div>
</div>

<h3>Performance Comparison</h3>
<p>Compare the four approaches with <a href="https://jsperf.com/pushingnodes" rel="nofollow noreferrer">this jsperf example</a>. In Chrome, Firefox, and MS Edge it reports that the original code is the fastest.</p>
    </div>