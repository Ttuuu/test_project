<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I see a number of things that may help you improve your program.</p>

<h2>Fix the formatting</h2>

<p>It's not clear to me if the code as posted is what you see when you look at it, or if there was a problem pasting the code, but in either case, it's worthwhile to fix the formatting.  In particular, consistent indentation and consistent use of a particular style is really more important than <em>which</em> particular style you may eventually choose.  The key to readable code is to pick a style and apply it consistently.</p>

<h2>Eliminate "magic numbers"</h2>

<p>This code is littered with "magic numbers," that is, unnamed constants such as -0.1, 20, 400, etc.  Generally it's better to avoid that and give such constants meaningful names.  That way, if anything ever needs to be changed, you won't have to go hunting through the code for all instances of "20" and then trying to determine if this <em>particular</em> 20 means the radius of the player's circle or some other constant that happens to have the same value.</p>

<h2>Be aware of object lifecycles</h2>

<p>There really isn't any need for the <code>event</code> object to be created and destroyed each time through the main loop since it can easily be reused.  It may be better to declare it once outside the loop and simply use it within.</p>

<h2>Think of the user</h2>

<p>The ball appears to consistently launch from midfield on the left side.  When the ball is launched toward the right, that's reasonable, but when it's launched to the left, it means that the ball suddenly appears with very little time to react.  It would improve the game play to have the ball launch such that it always traverses at least three quarters of the court before coming into the plane of a user paddle.</p>

<h2>Check for reasonable ranges</h2>

<p>The paddles can be moved entirely off the playing field, and further, there doesn't appear to be a limit at any distance.  It would be nicer to limit the paddle to within the playing field.  Otherwise, if the player wasn't paying attention, the paddle could be off the board with no visual indication of which way to send it back.</p>

<h2>Eliminate global variables where practical</h2>

<p>Having routines dependent on global variables makes it that much more difficult to understand the logic and introduces many opportunities for error.  Eliminating global variables where practical is always a good idea, whether programming for desktop machines or for embedded systems.  For global variables such as <code>player1score</code>,  the simplest fix in this case is to simply move them to within <code>main</code>.</p>

<h2>Consider scaling</h2>

<p><a href="https://i.stack.imgur.com/EhP5P.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/EhP5P.png" alt="Pong window"></a></p>

<p>Right now the board is asymmetric. This could more easily be fixed if the numbers were not all fixed but rather derived from one or two fixed values.  This would allow scaling and enable easier symmetry.</p>

<h2>Use objects</h2>

<p>Because SFML already uses an object model, making better use of objects for your own code is often just a matter of deriving from that code.  For example, in this game, each of the players and the ball could be an object with more sophisticated and game-specific behavior than simply a <code>sf::RectangleShape</code>.</p>

<pre><code>class Paddle : public sf::RectangleShape {
public:
    Paddle(float horzPos) 
    : sf::RectangleShape(sf::Vector2f{10, 50}),
      horz{horzPos}
    {
        setFillColor(sf::Color::Black);
        setPosition(horz, 200);
    }
    void setKeys(sf::Keyboard::Key upkey, sf::Keyboard::Key downkey) {
        K_up = upkey;
        K_down = downkey;
    }
    bool handleKey() {
        if (sf::Keyboard::isKeyPressed(K_up)) {
            move(up);
        } else if (sf::Keyboard::isKeyPressed(K_down)) {
            move(down);
        } else {
            return false;
        }
        return true;
    }
private:
    float horz;
    sf::Keyboard::Key K_up, K_down;
    static const sf::Vector2f up, down;
};
const sf::Vector2f Paddle::up{0, -0.1};
const sf::Vector2f Paddle::down{0, +0.1};
</code></pre>
    </div>