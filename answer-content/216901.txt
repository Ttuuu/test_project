<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>CodeReview problems</h2>

<p>You've made two "codereview" errors (as opposed to "coding" errors): </p>

<h3>Use tags</h3>

<p>You didn't specify enough about your environment. What version of C are you writing for? (I'm guessing "not K&amp;R" since you're using ANSI-style function declarations. But is that C89, C99, C11, or C18?) Is your code limited to *nix or Windows, or must it run on both? Do you care about compiler versions? Are you allowed to use compiler extensions?</p>

<h3>No moving targets!</h3>

<p>You edited your code after posting it. Someone is going to yell at you for that - it's considered poor form. Since nobody had replied when you edited, it's not the end of the world, though.</p>

<h2>Coding style</h2>

<p>I have some issues with your coding style. You didn't specify what style you were trying to write, and I suspect you started with <a href="https://www.ioccc.org/" rel="nofollow noreferrer">"IOCCC"</a> as your base, although I don't know why. So:</p>

<h3>Find a style</h3>

<p>There are three kinds of "C Coding Style" guides out there:</p>

<p>The first kind are actually C++ guides. Ignore these. </p>

<p>The second kind are "we want to have a guide, but we don't want to risk a flamewar, so we're afraid to make any firm guidelines". Ignore these, too. </p>

<p>The third kind will provide some good advice, and some amount of nutrient-laden fertilizer. That's the kind you want! Find one of those you like and <strong>stick with it.</strong> </p>

<p>I don't care if your tabs are 2 spaces, 11 spaces or what, as long as they stay the same. I don't care if your braces are up or down, or even (God forbid) down and indented. The good advice and consistency will overwhelm your failure to use a multiple of a perfect prime number as your tab size.</p>

<p>Once you find your ideal coding standard, tattoo it on your body somewhere. I have found that whatever style people adopt first they will be able to rationalize retaining for the rest of their lives. And you can be really dogmatic about it - it's fine! I still write (C) code using the coding standard from my first "corporate" job by default. (Of course, it was a pretty well-thought-out standard, even if pre-ANSI...)</p>

<p>Having a formal document to refer to makes it really easy to be dogmatic. Go ahead, it's the internet!</p>

<p><img src="https://i.stack.imgur.com/EscFY.jpg" width="175" height="225" alt="According to this, you're a heretic!"></p>

<h3>Whitespace is free. Use lots of it.</h3>

<p>I'm not aware of any coding style guide that argues for the elimination of whitespace. If you are following one, please post a link to it so that we can burn it out for the heresy that it is! This code shows a lack of horizontal and vertical spacing:</p>

<pre><code>        code[code_size]=0;
        return code;
    }
    unsigned char* create_tape(){
</code></pre>

<p>It should be:</p>

<pre><code>        code[code_size] = 0;
        return code;
    }

    unsigned char *
    create_tape()
    {
</code></pre>

<p>(Although you might want to "cuddle" that opening brace... if you're a heretic.)</p>

<h3>Pick better names</h3>

<p>This is a bit of an art form, but what does <code>get_file_handle</code> return? Surprisingly, it returns a <code>FILE</code> pointer. This is surprising because <code>handle</code> is one of those <em>magic words</em> in computing that "everybody knows" what it means. And it doesn't mean that. According to <a href="http://www.catb.org/jargon/html/H/handle.html" rel="nofollow noreferrer">Jargon</a> a <strong>handle</strong> is:</p>

<blockquote>
  <ol start="2">
  <li>A magic cookie, often in the form of a numeric index into some array somewhere, through which you can manipulate an object like a file or window. The form file handle is especially common. </li>
  </ol>
</blockquote>

<p>Also, what does "get" mean? (Seriously.) There are quite a few meanings for <code>get</code> in computing. Java(Beans) screwed it up for most people by slathering it in front of their accessors. But it used to mean "fetch or create." Now days, you're better off avoiding it, especially considering what your function does: return a valid file handle or die.</p>

<p>I'd suggest either explicitly stating that in your function name (<code>open_or_die</code>), or simply echoing the "successful" behavior by calling it something like <code>fopen_rb</code> or <code>open_file_rb</code>.</p>

<pre><code>FILE *
open_or_die(filename)
    const char *filename;
{
    FILE *input = fopen(filename, "rb");

    if (input)
        return input;

    fprintf(stderr, "Error: failed to open file %s\n", filename);
    exit(FILE_ERROR);
}
</code></pre>

<p>Finally, what does <code>loop</code> mean? Maybe <code>nested</code> or <code>levels</code> or <code>depth</code> would be better. Or even <code>num_open</code> or <code>open_brackets</code>.</p>

<h3>Create the right functions</h3>

<p>There are three reasons to create a function from some non-function code.</p>

<ol>
<li><p>Create a function for things you do more than one time. In my opinion, N=2 is the right time to create a function. Sometimes you'll find yourself doing N&gt;2, but IMO 2 is the right number. (For example, some trivial pair of calls to configure buttons in a GUI might seem "simple enough" to not make a function. Make the function!)</p>

<p>In your code, you have three different places where you <code>exit</code> if a pointer is NULL. That would fall under the rule of N &gt; 1, and so you might write something like:</p>

<pre><code>void die(const char * fmt, ...);

// ...

input = fopen(filename, "rb") 
    || die("Could not open input file '%s' for reading", filename);
</code></pre>

<p>(Note: I don't suggest doing that, because of #2 here.)</p></li>
<li><p>Create a function to "abstract away" code to a separate layer. In your <code>main</code>, you have:</p>

<pre><code>int main(int argc,char** argv){
    if(argc!=2){
        puts("Usage: bfic &lt;source&gt;");
        exit(OTHER_ERROR);
    }
    run(argv[1]);
}
</code></pre>

<p>The first paragraph (the <code>if</code> statement) is at a much lower level of detail than the <code>run</code> call. I would be inclined to write something like:</p>

<pre><code>parse_args(argc, argv);
run_code(argv[1]);
</code></pre>

<p>despite the "trivial" nature of the <code>parse_args</code>, because that puts them both at the same level of abstraction. Alternatively, you might pull out some of the code from <code>run</code> to put more meat into <code>main</code> like:</p>

<pre><code>const char *code_file = parse_args(argc, argv);
const code_t *code = load_code(code_file);
int result = run_code(code);
return result;
</code></pre></li>
</ol>

<p>You do this with your <code>read_code</code> and <code>create_tape</code> functions, and this is generally the right way to go if you have to choose between #1 (above) and #2 (this option).</p>

<ol start="3">
<li><p>Create a function to isolate a potentially valuable operation for reuse.</p>

<p>This is the gold standard for functions, and so you won't see it very often. But when you <em>do</em> see it, grab on! In your case, you've got a couple of them right here:</p>

<pre><code>fseek(input_file,0,SEEK_END);
size_t code_size=(size_t)ftell(input_file);
fseek(input_file,0,SEEK_SET);
</code></pre>

<p>This code computes the size of a file given a file pointer. That's something you might wish to reuse later, and it has nothing to do with your main code - there are no special types or anything getting in the way. This would be something you could put in your toolbox. (You'll probably find half a dozen different ways to do this task. Collect 'em all!)</p>

<p>Also, consider that your <code>read_code</code> function represents an operation so common that Perl <a href="https://perldoc.perl.org/perlglossary.html#slurp" rel="nofollow noreferrer">gives it a name:</a></p>

<blockquote>
  <p><strong>slurp</strong></p>
  
  <p>To read an entire file into a string in one operation.</p>
</blockquote>

<p>That's another function that would be worth "isolating" so you could keep it in your toolbox. (By "isolating" I mean separating it from your code, so that the name is more general, the types used are all standard types, etc.)</p></li>
</ol>

<h2>Code organization</h2>

<p>The one weak spot I think I see with your code organization is writing your code with a common level of abstraction inside functions. I've already mentioned <code>main</code>. This also shows up in <code>run</code> in two ways. First, because the interpreter code is finer grained than the <code>make_tape</code> and <code>read_code</code> functions, and second because <code>read_code</code> should just go ahead and incorporate the file open and close operations. Change this:</p>

<pre><code>FILE* input_file=get_file_handle(filename);
unsigned char *tape=create_tape(),*tape_ptr=tape;
unsigned char *code=read_code(input_file),*code_ptr=code;
fclose(input_file);
</code></pre>

<p>... to this:</p>

<pre><code>unsigned char *tape = create_tape();
unsigned char *tape_ptr = tape;
unsigned char *code = read_code(filename);
unsigned char *code_ptr = code;
</code></pre>

<p>... by moving the open/close operations down into <code>read_code</code>. And adding newlines.</p>

<h2>Final notes</h2>

<p>You spend some characters casting the value of TAPE_SIZE. Why not either include the typecast in the macro (<code>#define TAPE_SIZE ((size_t)300000)</code>) or declare a static variable for the value which you could configure from the command line (<code>-t SIZE</code>):</p>

<pre><code>size_t Tape_size = TAPE_SIZE;
</code></pre>

<p>You also mentioned in the comments on your request a performance hit after converting to functions. If you look at your original version, you handled '[' and ']' separately. Why not do that in your functions? And while you're at it, just return the result.</p>

<pre><code>const unsigned char *
find_matching_bracket(tape_ptr, code_ptr)
    const unsigned char *tape_ptr;
    const unsigned char *code_ptr;
{
    if (*code_ptr == ']') {
        // search this-a-way
    }
    else {
        // search that-a-way
    }

    return code_ptr;
}
</code></pre>
    </div>