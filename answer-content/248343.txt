<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Observations</h2>
<p>Very interesting question.</p>
<p>The numbers I came up with when running the program are</p>
<blockquote>
<p>10248 distinct values sorted<br>
Selection sort on 16384 items: 353 ms<br>
Insertion sort on 16384 items: 176 ms</p>
</blockquote>
<p>Which makes the insertion sort twice as fast as the selection sort.
This is on Windows 10 using Visual Studio 2019 on a 4 year old Lenovo Thinkpad P50
with 32GB and an Intel i7-6820HQ processor.</p>
<p>After I rewrote the code to use functions, here are my results. Notice that the selection sort time went up slightly:</p>
<blockquote>
<p>10248 distinct values sorted by insertion<br>
10248 distinct values sorted by selection<br>
selection sort on 16384 items: 355 ms<br>
inserstion sort on 16384 items: 176 ms</p>
</blockquote>
<p>I was going to add a section on global variables but when I first tried to rewrite the code I discovered a reason for them, the arrays are too large and the stack can't support them, at least on my laptop. I also used memory allocation to put as much of the data as possible on the heap rather than on the stack. That would be one way to get around any global variables.</p>
<p>You might want to see if you can optimize both <code>selection</code> and <code>insertion</code> to bring the numbers down.</p>
<p>Declare variables as you need them, the C programming language no longer requires all variables to be declared at the top of a code block.</p>
<h2>Improvements to the Code</h2>
<p>You worked too hard or at least wrote too much code in <code>main()</code>.</p>
<p>I see 3 distinct functions possible, and one of them would have reduced the repetition of the existing code.</p>
<p>You can use pointers to the sort functions to make common functions for testing.</p>
<p>I decided to validate the sorts before testing for time, if one of the sorts doesn't work timing it doesn't make sense.</p>
<p>Given the implementation below you could test more sorts to find the best one by adding new sort functions.</p>
<p>Here are the functions I see:</p>
<pre><code>int original_items[NUM_ITEMS];

static void generate_unsorted_data(void)
{
    srand(RANDOM_SEED);
    for (int i = 0; i &lt; NUM_ITEMS; i++) {
        original_items[i] = rand() % NUM_ITEMS;
    }
}

static void validate_results(void(*ptr_to_sort_function)(int data[], unsigned int count), char *func_name)
{
    int *sorted_items = calloc(NUM_ITEMS, sizeof(*sorted_items));
    if (!sorted_items)
    {
        fprintf(stderr, "calloc failed in validate_results\n");
        return;
    }
    memcpy(sorted_items, original_items, sizeof(original_items));

    ptr_to_sort_function(sorted_items, NUM_ITEMS);

    int num_distinct = 1;
    for (int i = 1; i &lt; NUM_ITEMS; i++) {
        if (sorted_items[i] &lt; sorted_items[i - 1]) {
            printf("%s result validation failed.\n", func_name);
        }
        if (sorted_items[i] != sorted_items[i - 1]) {
            num_distinct++;
        }
    }

    printf("%d distinct values sorted by %s\n", num_distinct, func_name);
    free(sorted_items);
}

static void time_test_sort(void(*ptr_to_sort_function)(int data[], unsigned int count), char* func_name)
{
    clock_t start_time;
    clock_t total_time;
    int* sorted_items = calloc(NUM_ITEMS, sizeof(*sorted_items));
    if (!sorted_items)
    {
        fprintf(stderr, "calloc failed in validate_results\n");
        return;
    }

    total_time = 0;
    for (int i = 0; i &lt; ITERATIONS; i++) {
        memcpy(sorted_items, original_items, sizeof(original_items));
        start_time = clock();
        ptr_to_sort_function(sorted_items, NUM_ITEMS);
        total_time += clock() - start_time;
    }

    printf("%s sort on %d items: %ld ms\n", func_name, NUM_ITEMS, (long)(total_time / ITERATIONS / CLOCKS_PER_MS));
    free(sorted_items);
}

int main(void) {

    generate_unsorted_data();

    validate_results(insertion, "insertion");

    validate_results(selection, "selection");

    time_test_sort(selection, "selection");

    time_test_sort(insertion, "insertion");
}
</code></pre>
    </div>