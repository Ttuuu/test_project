<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'm about kotlin, not about <a href="https://github.com/SalomonBrys/Kotson" rel="nofollow noreferrer">kotson</a> or <a href="https://kotlin.link/?q=json" rel="nofollow noreferrer">other kotlin-json libraries</a>.<br>
Also, when writing, I jumped into reification. This isn't really important...</p>

<h1>Reified Inline Extension functions</h1>

<p>The only reason I'm writing this is because I'm using extension-functions later on and I don't know your kotlin-level. You can skip this if you understand. </p>

<p>You can skip reified completely.</p>

<h1><a href="https://kotlinlang.org/docs/reference/extensions.html#extension-functions" rel="nofollow noreferrer">extension function</a></h1>

<p>Extension-functions are functions which make it look like you add functions to an existing class. An example:</p>

<pre><code>fun &lt;T&gt; Any.cast() : T= this as T
</code></pre>

<p>As you can see, we refer to the receiver (Any) with <code>this</code>.</p>

<pre><code>override fun equals(other : Any?) : Boolean{
    ...
    val otherId = other.cast&lt;AbstractJpaPersistable&lt;*&gt;()
        .getId() ?: return false
    ...
}
</code></pre>

<p>This function makes the code more flowable.  </p>

<h2><a href="https://kotlinlang.org/docs/reference/inline-functions.html" rel="nofollow noreferrer">Inline</a></h2>

<p>Inline means that kotlin will replace the call to a function with the body of the function.</p>

<pre><code>inline fun sayHi() = println("hi")
fun main() = sayHi()
//will be replaced with
fun main() = println("hi")
</code></pre>

<hr>

<h2><a href="https://kotlinlang.org/docs/reference/inline-functions.html#reified-type-parameters" rel="nofollow noreferrer">reified</a></h2>

<p>Just to make inline extension functions interesting, we can write the safeCase-function:</p>

<pre><code>fun &lt;T&gt; safeCast() : T? = when(this){
    is T -&gt; this // exception
    else -&gt; null
}
</code></pre>

<p>At runTime, the generics are erased and become Any?
This means the former function becomes:</p>

<pre><code>fun safeCast() : T? = when(this){
    is null -&gt; this // exception
    else -&gt; null
}
</code></pre>

<p>As we know, kotlin can create extra code at compiletime by inlining code.<br>
We also know that the passed generics are know at compiletime.<br>
When we combine those things, we can ask kotlin to create code, whereby it replaces the generics with the types it knows the generics represent.<br>
We do this by adding reified to the generic:</p>

<pre><code>inline fun &lt;reified T&gt; Any.safeCast() : T? = when(this){
    is T -&gt; this
    else -&gt; null
}

override fun equals(other : Any?) : Boolean{
    ...
    val otherId = other.safeCast&lt;AbstractJpaPersistable&lt;*&gt;()
        ?.getId() ?: return false
    ...
}
</code></pre>

<p>at runtime, this will become:</p>

<pre><code>override fun equals(other : Any?) : Boolean{
    ...
    val otherId = when(other){
        is AbstractJpaPersistable -&gt; other 
        else -&gt; null
    }?.getId() ?: return false
    ...
}
</code></pre>

<p>Because kotlin inlines the functions, it knows what the types are from parameters that go in and what come out.<br>
Therefor, it's possible to rewrite the normal cast a bit safer using castOrThrow with or without generic param:</p>

<pre><code>inline fun &lt;reified T&gt; Any.castOrThrow() : T{
     return when(this){
          is T -&gt; this
          else -&gt; throw ClassCastException("")
     }
}

fun main(){
    val a : Any = 5.castOrThrow()
    val a = 5.castOrThrow&lt;Int&gt;()
    val string : String = 5.castOrThrow() //throws
}
</code></pre>

<hr>

<h1><a href="https://kotlinlang.org/docs/reference/scope-functions.html#scope-functions" rel="nofollow noreferrer">scope functions</a></h1>

<p>I saw you using let:</p>

<ul>
<li>reference to the receiver using it</li>
<li>returns result of lambda</li>
<li><code>receiver.let{ it.toString() }</code></li>
</ul>

<p>You also have also:</p>

<ul>
<li>reference to the receiver using it</li>
<li>returns the receiver</li>
<li><code>receiver.also{ it.doSomething() }</code></li>
</ul>

<p>You can use this for creating CxExport:</p>

<pre><code>val export = CxExport().also {
    it.exportCount = count
    it.accountId = 51216
    it.exportType = ExportType.mention
    val now = Timestamp.from(Instant.now())
    it.exportStart = now
    it.exportEnd = now
}
</code></pre>

<p>But... we have 2 more:</p>

<p>run:</p>

<ul>
<li>reference to receiver using this:</li>
<li>returns result of lambda</li>
<li><code>receiver.run{ this.toString() }</code></li>
</ul>

<p>And apply:</p>

<ul>
<li>reference to receiver using this</li>
<li>returns the receiver</li>
<li><code>receiver.apply{ this.doSomething() }</code></li>
</ul>

<p>And as this doesn't have to be written: <code>receiver.apply{ doSomething() }</code><br>
this means the code can be rewritten as:</p>

<pre><code>val export = CxExport().apply {
    exportCount = count
    accountId = 51216
    exportType = ExportType.mention
    val now = Timestamp.from(Instant.now())
    exportStart = now
    exportEnd = now
}
</code></pre>

<h1><a href="https://kotlinlang.org/docs/reference/scope-functions.html#scope-functions" rel="nofollow noreferrer">inline classes</a></h1>

<p>Kotlin has inline classes (they work roughly the same as Integer/int in Java).<br>
You can create a inline class which takes one argument and add functions to that argument.<br>
The inlined class itself is not used (if you call it from kotlin and the type is known):</p>

<p>When inline classes are boxed:</p>

<ul>
<li>When using generics</li>
<li>Inline classes can implement interfaces. Passing it where interface is expected will box</li>
<li>When making type nullable</li>
</ul>

<p>I believe this is the perfect way to make the data.foreach better</p>

<pre><code>inline class Location(private val value : Map&lt;String, String?&gt;?){
    operator fun Map&lt;String, String?&gt;?.get(key: String) = this?.get(key)
    val continent get() = value["continent"]?.asText()
    val country get() = value["country"]?.asText()
    val city get() = value["city"]?.asText()
    val region get() = value["region"]?.asText()
    val longitude get() = value["longitude"]?.asText()
    val latitude get() = value["latitude"]?.asText()
}

inline class Priority(private val value : Map&lt;String, String?&gt;?){
    operator fun Map&lt;String, String?&gt;?.get(key: String) = this?.get(key)
    val id get() = value["id"]?.asInt()
    val name get() = value["name"]?.asText()
    val color get() = value["color"]?.asText()
}
</code></pre>

<p>As i said before, making the inline class nullable, means that the class is not inlined anymore.<br>
Because you have to call value?.get("id") on a nullable map, I created an extension-function on the nullable Map. </p>

<p>We can place this function in an interface as well.  </p>

<pre><code>inline class Location(private val value : Map&lt;String, String?&gt;?) : NullableMapGetter{
    val continent get() = value["continent"]?.asText()
    val country get() = value["country"]?.asText()
    val city get() = value["city"]?.asText()
    val region get() = value["region"]?.asText()
    val longitude get() = value["longitude"]?.asText()
    val latitude get() = value["latitude"]?.asText()
}

interface NullableMapGetter{
    operator fun Map&lt;String, String?&gt;?.get(key: String) = this?.get(key)
}

inline class Priority(private val value : Map&lt;String, String?&gt;?) : NullableMapGetter{
    val id get() = value["id"]?.asInt()
    val name get() = value["name"]?.asText()
    val color get() = value["color"]?.asText()
}
</code></pre>

<p>And of course, you should use them:</p>

<pre><code>data.forEach {
    println(it["permalink"]?.asText())

    val location = Location(it["location"])
    val priority = Priority(it["priority"])
    createMention(location, priority)
}

fun createMention(
    location : Location,
    priority : Priority
) = Mention(
        authorTags = authorTags,
        locContinent = location.continent,
        locCountry = location.country,
        locCity = location.city,
        locRegion = location.region,
        locLongitude = location.longitude,
        locLatitude = location.latitude,
        priorityId = priority.id,
        priorityName = priority.name,
        priorityColor = priority.color,
)
</code></pre>

<h1>Collection functions</h1>

<p>Don't know if it's possible, as most of the code doesn't compile as eg. mapper-declaration is absent. (code has to compile on code-review, so this question is actually of topic atm).</p>

<h2><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/map.html" rel="nofollow noreferrer">map</a></h2>

<p>However, data.forEach does nothing else then mapping, so:</p>

<pre><code>val mentions = mutableListOf&lt;Mention&gt;()
val data = response["response"]["data"]
data.forEach{
     //val newType = changeType(it)
     mensions.add(newType)
}
</code></pre>

<p>can be rewritten to:</p>

<pre><code>val mentions = response["response"]["data"].map{
     changeType(it)
     // or return@map changeType(it)
}
</code></pre>

<h2><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/join-to-string.html" rel="nofollow noreferrer">joinToString</a></h2>

<p>Kotlin has buildin functions to join a collection to a string:
    it["author"]["tags"]?.forEach {
        it?.asText()?.let {
            tags += it
        }
    }</p>

<p>can be rewritten as:</p>

<pre><code>val tags = it["author"]["tags"].joinToString(""){
    it?.asText()
}
</code></pre>
    </div>