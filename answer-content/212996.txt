<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>This is not how deleting objects work in Django</strong>.</p>

<p>The <code>__del__</code> method is a Python mechanism and is called when an object is garbage collected. This would be a huge mess if database rows were dropped anytime an object goes out of scope. This is also why calling <code>del object</code> doesn't seem to have any side effect: Django still caches the value somewhere, you just got rid of your variable.</p>

<p>Instead, you should use the <code>delete()</code> method on a model instance or on a queryset. But in fact none of this code is required as the <code>on_delete=models.CASCADE</code> will take care of that for you: as soon as a <code>User</code> object is deleted, the other linked objects will be deleted as well.</p>

<p>The only thing missing is to automatically delete the <code>User</code> instance when a <code>UserProfile</code> instance is deleted. This is better implemented <a href="https://docs.djangoproject.com/en/2.1/ref/signals/#post-delete" rel="nofollow noreferrer">using signals</a> as it will be called for both usages discussed earlier.</p>

<p>Alternatively, you can provide a method on your <code>UserProfile</code> model that will delete the underlying <code>User</code> and, thus, everything related to it:</p>

<pre><code>def delete_user(self):
    self.User.delete()
</code></pre>

<p>But you won't be able to use it for bulk deletions.</p>
    </div>