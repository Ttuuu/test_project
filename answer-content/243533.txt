<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Just a few remarks.</p>

<p>You constantly use <code>$_POST</code> across your code eg <code>$_POST['username']</code></p>

<p>Example:</p>

<pre><code>if (empty($_POST["username"])) {
    $errors[] = "Fill in username to sign up";
}
</code></pre>

<p>You should  collect the form fields to variables, sanitize them etc once, then reuse the variables in the rest of the code.</p>

<p>What I mean is something like this:</p>

<pre><code>&lt;?php

// init variables
$username = '';

// collect form fields
if (isset($_POST['username'])) {
    $username = trim($POST['username']);
}

// input validation
if (empty($username)) {
    echo "Username is empty";
}
?&gt;
</code></pre>

<p>You have this line:</p>

<pre><code>$username = trim( isset($_SESSION['username']) ? $_SESSION['username'] : "" );
</code></pre>

<p>but you are not doing anything with the variable ? And why trim a session variable ??? This makes no sense. Trimming the username is something that should be done on the POST request. But the username should be fixed after login.</p>

<p>You have this code:</p>

<pre><code>$sql = "SELECT pw FROM users WHERE username = ?";
$stmt = mysqli_prepare($conn, $sql);
if ( !$stmt ) {

    echo mysqli_error($conn);
    die();

}
</code></pre>

<p>Note: instead of mysqli you could use PDO to make code  more portable.</p>

<p>It's a bad idea to print raw error messages, not only because it does not look professional but it is <strong>information disclosure</strong> that can be used to leverage possible vulnerabilities. Nobody should gain insight into your tables or PHP code. If something goes wrong, show a generic message, handle the error and make sure you get notified one way or the other, then fix the error. Having an application-wide error handler would be nice.</p>

<p>Still, this code looks strange to me:</p>

<pre><code>$stmt-&gt;fetch(); // Fetch results from a prepared statement into the bound variables
</code></pre>

<p>I haven't tested it, but what happens if no matching row is found ? You still try to fetch one row ? Have you tested your code with non-existent user names ?</p>

<p>The most interesting, and possibly the more critical thing you've not shown yet is the <strong>login form</strong>.</p>

<p>While this is not the most pressing issue here, I think you should consider learning a <strong>PHP framework</strong> to bring your skills up to date. The frameworks exist for a reason: to accelerate development, to produce reusable code, so that you don't reinvent the wheel and come up with poor solutions. </p>

<p>This is still the old way of coding. In 2020 I would not start a new project based on old development patterns. There is no added value and you are already accruing <strong>technical debt</strong> since the code can be considered outdated by today's standards.</p>

<p>Presentation could be improved too, just using tabulations would make the code more readable. This is important, because a proper outline of the code can make logical flaws or branching errors more visible. For example incorrectly nested ifs. I don't know how you feel, but I find it hard to parse poorly-formatted code, even when it's yours. You are tempted to skim code instead of concentrating on it because it is an eyesore.</p>

<p>I would like to end on a more positive note but I found out that many tutorials found online are outdated and dangerous. The worst is that the best ranking pages are those that promote bad/deprecated practices.</p>

<p>For instance when I type 'php secure login form' in a search engine this is what I get: <a href="https://itsourcecode.com/free-projects/php-project/secure-login-page-using-phpmysql/" rel="nofollow noreferrer">How to Create a Secure Login Page in PHP with MySQL</a>. Outdated code that contains <strong>SQL injections</strong>. This is exactly the stuff we are telling you to avoid.</p>

<pre><code>  $email = trim($_POST['email']);
  $upass = trim($_POST['password']);
  $h_upass = sha1($upass);
if ($upass == ''){
     ?&gt;    &lt;script type="text/javascript"&gt;
                alert("Password is missing!");
                window.location = "login.php";
                &lt;/script&gt;
        &lt;?php
}else{
//create some sql statement             
        $sql = "SELECT * FROM  `tblmember` WHERE  `email` =  '" . $email . "' AND  `password` =  '" . $h_upass . "'";
        $result = mysqli_query($conn, $sql);
</code></pre>

<p>The worst is that the code was posted less than a year ago and is not some relic of the venerable past boosted by 20 years of SEO.</p>

<p>Note to self: do not assume good page ranking = credibility.</p>

<p>So it's no wonder you are struggling to find decent tutorials. I have found other examples that weren't nearly as bad but used <code>mysql_escape_string</code> (deprecated, then removed in PHP7).</p>

<p>A more reasonable example: <a href="https://www.codingcage.com/2015/04/php-login-and-registration-script-with.html" rel="nofollow noreferrer">PHP Login and Registration Script with PDO and OOP</a>. But I still do not consider it satisfactory: it does not verify that the POST fields for username/passwords are set:</p>

<pre><code>if(isset($_POST['btn-signup']))
{
   $uname = trim($_POST['txt_uname']);
   $umail = trim($_POST['txt_umail']);
   $upass = trim($_POST['txt_upass']);
</code></pre>

<p>That means the resulting variables are unset. That may not be a vulnerability but that is not so great.</p>

<p>You cannot assume that the form being submitted will be complete and not tampered with. You have to verify that every expected element is there and do not make lazy assumptions. Any server on the net is going to be subjected to incessant automated attacks. Script kiddies are after the low-hanging fruit. So you have to be paranoid.</p>

<p>I don't know why it is so difficult to find a decent example. Maybe it's because developers are expected to use frameworks - <a href="https://www.tutsmake.com/laravel-6-custom-login-and-registration-example-tutorial/" rel="nofollow noreferrer">Laravel example</a></p>

<p>Yes there is a learning curve. But you will become more productive afterward and produce better.</p>

<p>You said you are building a social network, so this is an ambitious project and not a one-page script. It needs to be better structured. You need some kind of common code base.</p>

<p>In conclusion I think you should not even try to fix this code although it is good to understand the pitfalls. Relearn PHP, get up to speed with modern development tools.</p>
    </div>