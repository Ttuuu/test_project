<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>A <code>std::vector&lt;std::vector&lt;int&gt;&gt;</code> is an inefficient way to store a 2-dimensional array. Unfortunately, there is nothing in the standard C++ library that gives you an easy and safe 2-dimensional array.</p>

<p>However, in your case, in <code>main()</code> you could easily convert <code>mv</code> into a straightforward 2D array, like so:</p>

<pre><code>int mv[8][8] = {{...same as you already have...}};
</code></pre>

<p>But then you'd have to pass both a pointer to that array and its dimensions to any class/function that uses it. It is not too hard to write a 2D array class yourself though, or search for some external library that implements one for you. Or stick with this for now.</p>

<p>As for the design with the classes <code>Point</code> and <code>Astar</code>, comments on overloading and so on, and other suggestions, see below.</p>

<h2>Unnecessary hiding of variables</h2>

<p>If you have a <code>class</code> that has variables that you should be able to read and set at will, and there are no side-effects or restrictions, then why not make them public? It saves you writing lots of getters and setters. So:</p>

<pre><code>class Point {
    public:
    int x = -1;
    int y = -1;
    ...
};
</code></pre>

<p>Or just write <code>struct Point</code>, which will make everything public by default.</p>

<h2>Don't use initializer lists unnecessarily</h2>

<p>It looks like you are mixing two styles of default initialization of member variables. You should either write:</p>

<pre><code>int x = -1;
</code></pre>

<p>Or:</p>

<pre><code>int x{-1};
</code></pre>

<p>What you write is actually an initializer list of one element.</p>

<h2>Don't write an operator/constructor/destructor if it's equivalent to the default one</h2>

<p>Your copy constructor does exactly what the default copy constructor would do, so there is no point in writing it out. It is only a potential source of errors and inefficiencies.</p>

<p>The same also applies to the destructor and the assignment operator.</p>

<h2>Consider making <code>Point</code> part of <code>Astar</code></h2>

<p>Your <code>Point</code> class is specifically made for the A* algorithm. It then makes sense have it part of the namespace of the <code>Astar</code> class. Just move it inside the latter:</p>

<pre><code>class Astar {
    public:
    class Point {
        ...
    };

    ...
};
</code></pre>

<p>However, the class <code>Astar</code> is problematic in itself:</p>

<h2>Don't conflate the algorithm and its input</h2>

<p>Your class <code>Astar</code> is both the map and the methods to perform the A* algorithm. In a real application, the map is some datastructure used by many algorithms, and you want the A* algorithm to work on that datastructure. So it is much more natural to have a <code>class Map</code>, and a function <code>Astar(...)</code> that takes a <code>Map</code>, and the start and endpoints as arguments, and returns the resulting path.</p>

<h2>Have a single function that calculates and returns a path</h2>

<p>Your class requires you to do things in three stages:</p>

<ul>
<li>construct <code>Astar</code> and have it copy the map data</li>
<li>call <code>search()</code> to have it calculate the path</li>
<li>call <code>path()</code> to retrieve the path</li>
</ul>

<p>This is quite cumbersome. You typically want a single function that performs all these steps in one go, something that looks like:</p>

<pre><code>std::vector&lt;Point&gt; Astar(const Map &amp;map, const Point &amp;start, const Point &amp;end);
</code></pre>

<p>And those <code>Point</code>s there should just be something that looks like <code>std::pair&lt;int, int&gt;</code>, and not contain any of the variables used by the A* algorithm internally.</p>

<p>The above function can signal that it didn't find a path by returning an empty vector.</p>

<h2>Avoid returning raw pointers</h2>

<p>Your function <code>path()</code> returns a <code>std::vector&lt;Point *&gt;</code>. It looks like a return by value, but this vector contains raw pointers to the data held by a variable of <code>class Astar</code>. However, you now introduce a potential issue: if the <code>class Astar</code> variable goes out of scope, the path vector now points to invalid memory. There are several solutions to this:</p>

<ul>
<li>Return a pointer/reference to the vector inside <code>class Astar</code> (this still can be problematic, but now it is much more clear that it is just a pointer)</li>
<li>Return a deep copy (<code>std::vector&lt;Point&gt;</code>)</li>
<li>Use <code>std::shared_ptr()</code></li>
</ul>

<h2>Avoid writing <code>this-&gt;foo</code></h2>

<p>Just write <code>foo</code> directly. For example, in <code>Astar::search()</code>, just call <code>is_valid(x, y)</code> instead of <code>this-&gt;is_valid(x, y)</code>.</p>

<h2>Minor style issues</h2>

<p>You are putting spaces around the <code>-&gt;</code> operator, but not around <code>.</code>. It is very uncommon to do that, just write <code>foo-&gt;bar</code> without spaces.</p>

<p>Instead of <code>map_x</code> and <code>map_y</code>, write <code>width</code> and <code>height</code>. When iterating over the map coordinates, use <code>x</code> and <code>y</code> as iterators instead of <code>i</code> and <code>j</code>.</p>
    </div>