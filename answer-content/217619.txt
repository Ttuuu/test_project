<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>One role</h2>

<p>Be careful to do only what the functions should. </p>

<p>The function is called <code>compareVersions</code> however what it does is validate and compare versions. </p>

<p>The potential throw is the result of validation and has nothing to do with comparing the values.</p>

<p>As you have not called the function <code>validateAndCompareVersions</code> you have over stepped its role.</p>

<h2>How to throw</h2>

<p>If (and try to avoid throwing exceptions), if you must throw, throw correctly. </p>

<p>In this case the first throw should be a <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError" rel="nofollow noreferrer"><code>RangeError</code></a> and the message should make sense.</p>

<p>You have very poor error message  <code>"Problem comparing versions: not a valid number";</code> The first part is redundant, exception contains a trace that will locate the "problem" and the "Problem" is implied in the fact that this is an exception.</p>

<p>"not a valid number" The arguments are version strings, "1.0.0" is not a number. The error should indicate the problem explicitly.</p>

<pre><code> throw new RangeError("Invalid version string: '" + (isNaN(v1) ? v1 : v2) + "'");
</code></pre>

<p>The second exception is a little better, but could be improved</p>

<pre><code> throw new RangeError("Invalid operator: " + o);
</code></pre>

<h2>How to catch</h2>

<p>Only catch what is thrown for you. Higher level catchers will handle the rest.</p>

<p>Having the throws in the function means you must add additional support code outside the function. Try catches break the flow of the code, not having a try catch means that a input error will halt the app.</p>

<pre><code>try {
    compareVersions(a,b,type);
} catch(e) {
    if (e.name === "RangeError") {
        // do what is needed to prevent app from stopping
    } else {
        throw e; // rethrow for development cycle or high level catchers
    }
}
</code></pre>

<p>You may need to be a little more specific, you can either extend an existing error or define a new error. Extending is the JS way so using the name property</p>

<pre><code>// in function
const error = new RangeError("Invalid version string: '" + (isNaN(v1) ? v1 : v2) + "'");
error.name = "InvalidVersionStr";
throw error;

// outside function
try {
    compareVersions(a,b,type);
} catch(e) {
    if (e.name === "InvalidVersionStr") {
        // do what is needed to prevent app from stopping
    } else {
        throw e; // rethrow for development cycle or high level catchers
    }
}
</code></pre>

<h2>Validate or normalize</h2>

<p>It is best to avoid exceptions. </p>

<p>In JavaScript we can pretend we have a 3 state Boolean, <code>true</code>, <code>false</code>, and <code>undefined</code>. We can use the 3rd state to signal an error without needing to break flow or halt execution. You can return undefined with <code>return;</code></p>

<p>Then you calling function need only handle the undefined</p>

<pre><code> const versionResult = compareVersions(a, b, type);
 if (versionResult === undefined) { /* put the spanner here */ }
</code></pre>

<p>Better yet the function should assume all is good and just return true or false.</p>

<p>Validate the version strings at the source and deal with it when you get it (that is where the problem actually is)</p>

<p>You can either validate the version string or normalize the string</p>

<pre><code>function normaliseVersionStr(ver) {
    return /^\d*\.\d*\.\d*$|^\d*$/.test(ver) ? ver : "0";
}
function validateVersionStr(ver) {  // returns false if string not valid, else true
    return /^\d*\.\d*\.\d*$|^\d*$/.test(ver);
}

// Good strings returned as they are
normaliseVersionStr("1.0.0")
normaliseVersionStr("1")
normaliseVersionStr("1.000.0")

// Bad string returned as version 0
normaliseVersionStr("1.0.0A")
normaliseVersionStr("1.")
normaliseVersionStr("1.0")
normaliseVersionStr("")
</code></pre>

<h2>Alternative solution</h2>

<p>Now that you can trust the arguments you get you can write a better function as you dont need to bother with all the possible edge cases.</p>

<p>There are many ways to do this, and they depend on what you define as same, greater, less. I will assume the following</p>

<pre><code> 01 == 1 == 1.0.0 == 01.0.0 == 1.00.00
 0.01.0 == 0.1.0
 0.0.1 &lt; 0.1.0
 2.0.1 &lt; 2.1.0
 1.9.0 &lt; 2
</code></pre>

<p>If we then pad the strings to match (each version str) parts sizes, and remove leading zeros. </p>

<pre><code> 1 and 1.0.0 become 100 and 100
 1 and 2 become 1 and 2
 1 and 0.0.1 become 100 and 1
 1.99.0 and 1 become 1990 and 1000
</code></pre>

<p>Then use <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval" rel="nofollow noreferrer"><code>eval</code></a> to do the final operation. If you don't like <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval" rel="nofollow noreferrer"><code>eval</code></a>, you can use <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" rel="nofollow noreferrer"><code>new Function</code></a></p>

<h2>Example</h2>

<p>It is assumed that the operator is defined in the source (not as an user input). If the operator is a user input string then you should validate or normalize that string before calling the function.    </p>

<p>An invalid operator will throw an exception.</p>

<pre><code>// logical operator optional. Default "=="
// "==", "&lt;", "&gt;", "&lt;=", "&gt;="
// "=" is considered to be "=="
// can also use "!=", "!==", "==="
// strA, strB must be valid version strings
function compareVersionStrings(strA, strB, operator = "==") {    
    const a = strA.split("."), b = strB.split(".");
    const len = Math.max(a.length, b.length);
    var valA = a.shift(), valB = b.shift(), i = 1;
    while (i &lt; len) {
        const vA = a[i] !== undefined ? a[i] : "";
        const vB = b[i] !== undefined ? b[i] : "";
        const digits = Math.max(vA.length, vB.length);
        valA += vA.padStart(digits, "0");
        valB += vB.padStart(digits, "0");
        i++;
    }
    valA = valA.replace(/0*\d$/,"");
    valB = valB.replace(/0*\d$/,"");
    operator = operator === "=" ? "==" : operator;
    return eval(`${valA} ${operator} ${valB}`);
    // or
    return (new Function(`return ${valA} ${operator} ${valB})`)();
}
</code></pre>
    </div>