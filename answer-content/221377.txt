<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Barring any compiler heroics, you are computing <code>n*n</code> a total of <span class="math-container">\$n^3\$</span> times.  You might want to cache that result.</p>

<pre><code>const int nn = n*n;
</code></pre>

<hr>

<p><code>B[j + n_times_i]</code> is a linearly increasing address location, given that <code>j</code> increases by 1 for each middle loop, and and <code>i</code> increases once for each outer loop, which is <code>n</code> increases of <code>j</code>.  Taking advantage of that, you can skip the <code>j + n*i</code> calculation, and <code>B[ ]</code> indexing.</p>

<pre><code>int *pB  = &amp;B;
// ... loops &amp; calculation of temp omitted for brevity.
      *pB++ = temp;
</code></pre>

<hr>

<p>Result:</p>

<pre><code>const int nn = n*n;
int *pB = B;

for (int i = 0; i &lt; n; i++) {
    for (int j = 0; j &lt; n; j++) {
        temp = 0;
        for (int k = 0; k &lt; nn; k += n) {
            temp += A[i+k] * A[j+k];
        }
        *pB++ = temp;
    }
}
</code></pre>

<hr>

<p>You <em>may</em> find that you can get additional speed by using pointer arithmetic for <code>A[i+k]</code> and <code>A[j+k]</code>.</p>

<pre><code>int *pAi = A + i;
int *pAj = A + j;
for (k=0; k&lt;n; k++) {   // Note: n.  The nn variable is no longer needed.
    temp += *pAi * *pAj;
    pAi += n;
    pAj += n;
}
</code></pre>

<p>But, youâ€™ll need to profile to find out.  It depends on the number of free registers you have ... and the compiler/optimizers these days are pretty darn good.</p>
    </div>