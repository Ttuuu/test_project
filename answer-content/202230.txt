<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Java has some useful functions to search for set bits in the <a href="https://docs.oracle.com/javase/7/docs/api/java/lang/Integer.html" rel="nofollow noreferrer">Integer</a> class, including <a href="https://docs.oracle.com/javase/7/docs/api/java/lang/Integer.html#numberOfLeadingZeros(int)" rel="nofollow noreferrer">numberOfLeadingZeros</a>. Of course, being in the <code>Integer</code> class (and there is no equivalent in the <code>Byte</code> class), it counts the leading zeros of an <code>int</code> instead of a <code>byte</code>, so it returns 24 too much. That's easy to work around by subtracting 24 though, and using this function means we can get rid of the function that converts a byte to a string.</p>

<p>I would also avoid allocating a temporary array just to hold the XORed addresses, it just doesn't seem to add much to the code, and I would also make it more explicit that 20 is indeed the size of the array and not some arbitrary number.</p>

<p>So you can write it like this:</p>

<pre><code>private int findBucket(byte[] address) {
    for (int i = 0; i &lt; address.length; i++) {
        int temp = (address[i] ^ nodeAddress[i]) &amp; 0xFF;

        if (temp != 0) {
            return i * 8 + Integer.numberOfLeadingZeros(temp) - 24;
        }
    }

    return -1;
}
</code></pre>
    </div>