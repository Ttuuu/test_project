<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<pre><code>  public static ulong GreatestCommonDivisor(ulong x, ulong y)
    {
      if (x == 0) { return y; }
      if (y == 0) { return x; }

      var g = ((int)CountTrailingZeros(x | y));

      x &gt;&gt;= ((int)CountTrailingZeros(x));

      do
      {
        y &gt;&gt;= ((int)CountTrailingZeros(y));

        if (x &gt; y)
        {
          var z = x;

          x = y;
          y = z;
        }

        y = (y - x);
      } while (0 != y);

      return (x &lt;&lt; g);
    }
</code></pre>
</blockquote>

<p>This can be done a lot easier and with fewer iterations by using Euclid's algorithm:</p>

<pre><code>static ulong gcd(ulong x, ulong y)
{
  if (x == 0) { return y; }
  if (y == 0) { return x; }

  ulong d = 0;

  while (x &gt; 0)
  {
    d = x % y;
    if (d == 0)
      return y;
    x = y;
    y = d;
  }

  return 1;
}
</code></pre>

<hr>

<p>I haven't studied your implementation of the initialization in details, but at first sight it looks a lot more complicated than the implementation provided in <a href="https://web.archive.org/web/20140401082840/http://web.eecs.utk.edu/~vose/Publications/random.pdf" rel="nofollow noreferrer">this paper</a>. It seems that you're trying to avoid floating point numbers?</p>

<hr>

<pre><code>int count = 10000;
  Dictionary&lt;string, long&gt; stats = new Dictionary&lt;string, long&gt;
  {
    {"A", 0},
    {"B", 0},
    {"C", 0},
  };

  for (int i = 0; i &lt; count; i++)
  {

     var rng = Pcg32XshRr.New(0, 1);


    var generator = ProbabilisticEnumerator
        .New(
            elementWeights: new Dictionary&lt;string, int&gt; {
        { "A", 1 },
        { "B", 2 },
        { "C", 4 }
            },
            randomNumberGenerator: rng
        )
        .Take(500);

    var summary = generator
        .GroupBy(item =&gt; item)
        .Select(item =&gt; new
        {
          Element = item.Key,
          Count = item.Count(),
        })
        .OrderBy(item =&gt; item.Element);

    foreach (var item in summary)
    {
      stats[item.Element] += item.Count;
      //Console.WriteLine($"{item.Element} | {item.Count}");
    }
  }

  Console.WriteLine();
  foreach (var entry in stats)
  {
    Console.WriteLine($"{entry.Key} : {entry.Value / count}");
  }
</code></pre>

<p>When I run this distribution 100000, I get an average distribution as:</p>

<pre><code>A : 70
B : 169
C : 261
</code></pre>

<p>I initialize like this: <code>Pcg32XshRr.New(0, 1);</code> which caused it to start the same sequence each time, but trying with this initialization: <code>var rng = Pcg32XshRr.New(DateTime.Now.Ticks, DateTime.Now.Ticks / 10000);</code> it gets worse:</p>

<pre><code>A : 83
B : 145
C : 270
</code></pre>

<p>I would expect it to be more like:</p>

<pre><code>A: 71 (1 / 7) * 500
B: 142
C: 285  
</code></pre>

<p>Or maybe I misunderstand the concept?.</p>

<hr>

<blockquote>
<pre><code>  var count = unchecked((ulong)elementWeights.Count);
</code></pre>
</blockquote>

<p>This seems strange. By default a C# assemblies are compiled unchecked, so it should not be necessary, unless you compile with the check flag set? (But if I try, running it in a checked environment, <code>Pcg32XshRr.Sample()</code> throws an <code>OverflowException</code> in this line:</p>

<blockquote>
  <p><code>uint threshold = ((((uint)(-exclusiveHigh)) % exclusiveHigh));</code></p>
</blockquote>

<hr>

<blockquote>
  <p><code>IEnumerable&lt;TElement&gt;, IEnumerator&lt;TElement&gt;</code></p>
</blockquote>

<p>There is rarely reasons for implementing both these interfaces, and I don't see the need in this class either. <code>IEnumerable&lt;T&gt;</code> should be sufficient and can cover most needs.</p>

<hr>

<blockquote>
<pre><code>            elementWeights: new Dictionary&lt;string, int&gt; {
        { "A", 1 },
        { "B", 2 },
        { "C", 4 }
</code></pre>
</blockquote>

<p>Requiring input data in this way may be a little cumbersome in real life, because you most often will have the data and the probabilities in separate sets, so I would take two arguments - a data set and its corresponding probabilities. You should then of course check the length etc... </p>

<hr>

<p>I think, the one class do too much, and I would split it all into more classes in order to make it all a little more SOLID. A design could be as the below, but there may be others as well:</p>

<pre><code>public interface IUniformRandomGenerator
{
  double Next(int max);
}

public interface IBiasedRandomGenerator
{
  int Next { get; }
}

public class IBiasedRandomGenerator : IRandomGenerator
{
  public BiasedRandomGenerator(IList&lt;double&gt; probabilities, IUniformRandomGenerator uniformGenerator)
  {
    // TODO Initialize
  }

  public int Next
  {
    get
    {
      return default;
    }
  }
}

public class BiasedRandomEnumerator&lt;TElement&gt; : IEnumerable&lt;TElement&gt;
{
  private readonly IList&lt;TElement&gt; m_elements;
  private readonly IBiasedRandomGenerator m_random;

  public BiasedRandomEnumerator(IList&lt;TElement&gt; elements, IList&lt;double&gt; probabilities, int seed)
  {
    ValidateInput(elements, probabilities);

    m_elements = elements;
    m_random = new BiasedRandomGenerator(probabilities, new UniformRandomGenerator(seed));
  }

  public BiasedRandomEnumerator(IList&lt;TElement&gt; elements, IBiasedRandomGenerator random)
  {
    m_elements = elements;
    m_random = random;
  }

  private void ValidateInput(IList&lt;TElement&gt; elements, IList&lt;double&gt; probabilities)
  {
    // TODO
  }

  public IEnumerator&lt;TElement&gt; GetEnumerator()
  {
    while (true)
    {
      yield return m_elements[m_random.Next];
    }
  }

  IEnumerator IEnumerable.GetEnumerator()
  {
    return GetEnumerator();
  }
}
</code></pre>

<p>In this way each class has only one responsibility, and the interfaces secures loose couplings between them. I have experimented a little with the names, but I won't defend them to the end of times.</p>
    </div>