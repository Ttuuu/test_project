<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<pre><code>double matrix[dimension][dimension];
</code></pre>
  
  

<pre><code>double array[dimension * dimension];
</code></pre>
  
  

<pre><code>double matrix[dimension][dimension];
</code></pre>
  
  

<pre><code>    double subMatrix[dimension - 1][dimension -1];
</code></pre>
  
  

<pre><code>    double array2[(dimension - 1) * (dimension - 1)];
</code></pre>
</blockquote>

<p>None of those are legal C++, because <code>dimension</code> isn't a constant-expression.</p>

<hr>

<p>We have a signed/unsigned comparison here:</p>

<blockquote>
<pre><code>    for(int k = 0; k &lt; str.length(); k++) {
</code></pre>
</blockquote>

<p>We can easily eliminate the compiler warning by using a more appropriate type:</p>

<pre><code>    for (std::size_t k = 0;  k &lt; str.length();  ++k) {
</code></pre>

<p>But a better fix, given we only use <code>k</code> to index <code>str</code>, is to use a range-based loop:</p>

<pre><code>    for (auto const c: str) {
</code></pre>

<hr>

<p>When using <code>operator&gt;&gt;</code> on a stream, we must always check that it succeeded, before we depend on the result:</p>

<pre><code>std::size_t dimension;
std::cin &gt;&gt; dimension;
if (!std::cin) {
    std::cerr &lt;&lt; "Input failed\n";
    return EXIT_FAILURE;   // needs &lt;cstdlib&gt;
}
if (dimension == 0) {
    std::cout &lt;&lt; "1\n";    // empty matrix determinant
}
</code></pre>
    </div>