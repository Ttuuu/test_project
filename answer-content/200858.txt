<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ol>
<li><p>You should use default initialization for your members, see <a href="https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Rc-in-class-initializer/" rel="nofollow noreferrer" title="CoreGuildlines C.45">1</a></p>

<pre><code>    SubsetIterator() = default;
...
private:
    size_t currentId_{0};
    Owner * parent_{nullptr};
</code></pre></li>
<li><p>Your <code>SubsetIterator</code> could use <code>constexpr</code> all around, as you only hold literal types.</p></li>
<li><p>You should changing the <code>size_t</code> of the <code>SubsetIterator</code> to a template argument <code>size_type</code> and pass that from the container. It might be that your class is used by a container that has a different <code>size_type</code> thatn <code>size_t</code></p></li>
<li><p>It is slightly unexpected that your operator++ invalidates at the end of the range. There is not even a warning, you silently accept every bogus input.</p></li>
<li><p>I dont get the template arguments of your constructor</p>

<pre><code>template &lt;bool Tmp = OwnsIds, typename std::enable_if_t&lt;!Tmp, int&gt; = 0&gt;
SubsetIterable(IdsContainer ids, Container &amp; items) : ids_(*ids), items_(items) {}
</code></pre>

<p>Why default to type <code>int</code> and <code>= 0</code> ? There is no need for that or maybe  am just not seeing it.</p>

<pre><code>template &lt;bool Tmp = OwnsIds, typename std::enable_if_t&lt;!Tmp&gt;&gt;
SubsetIterable(IdsContainer ids, Container &amp; items) : ids_(*ids), items_(items) {}
</code></pre>

<p>Generally i would say that your owning constructor should take an rvalue rference rather than just stealing the range. That would both be much more obvious and let the compiler do its job.</p></li>
</ol>
    </div>