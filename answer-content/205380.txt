<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I see a number of things that may help you improve your code.</p>

<h2>Format your code</h2>

<p>This code is messy and difficult to read.  It has inconsistent indentation, and very little whitespace, making it hard to read and understand.  There are abundant examples here of C++ code that is well formatted.  </p>

<h2>Eliminate global variables where practical</h2>

<p>Having routines dependent on global variables makes it that much more difficult to understand the logic and introduces many opportunities for error.  Eliminating global variables where practical is always a good idea.  In your code, there's no reason that <code>board</code> or <code>N</code> couldn't be members of the <code>TicTacToe</code> class instead, properly encapsulating.</p>

<h2>Simplify your code</h2>

<p>The code is full of duplicated code and inefficiency.  Duplicated code is a sign that you either need to refactor (for example by creating a new function) or rewrite the logic in a more compact form.  For example, there is no reason that horizontal and vertical checks couldn't be done within the same loop.  Also, only the player that just made a move could possibly win, so there's no point in checking squares which aren't marked with the current player's token.</p>

<h2>Use better names</h2>

<p>The variable name <code>board</code> is OK, but the name <code>flag</code> is not.  The first name explains something about what the variable means within the context of the code, but the latter is only confusing.  Also <code>check_board</code> is vague and unhelpful.  What is it checking?  What does it return?  Comments would help, but it's important to use descriptive names first.</p>

<h2>Sanitize user input better</h2>

<p>The only thing the code currently checks for is a space that's already occupied, but it does not verify that the proposed move is within bounds.  </p>

<h2>Eliminate "magic values"</h2>

<p>The values of <code>1</code> and <code>2</code> are sprinkled through the code, but they really ought to be a named constant instead, and specifically a named constant static member of the class.</p>

<h2>Fix the bug</h2>

<p>The "opposite diagonal check" has these lines (formatting fixed):</p>

<pre><code>for (int i = N - 1; i &gt; 1; i--) {   //Opposite diagonal check
    for (int j = 1; j &lt; N - 1; j++) {
        if (board[i + 1][j - 1] == 1 &amp;&amp; board[i][j] == 1
</code></pre>

<p>The first time through the loop <code>i - N - 1</code>, but the check is looking at <code>board[i + 1][j - 1]</code> which will be <code>board[N][0]</code> the first time through the loop.  That's out of the boundary of the board and thus, a bug.</p>

<h2>Think of the user</h2>

<p>What happens if there is a tie game?  The board is full, but neither player has won.  The code doesn't check for or recognize this state, but it should, to avoid a frustrating experience for a user.</p>

<h2>Study other code</h2>

<p>One way to become a better programmer is to ask for a review of your code.  You've just done that, so good job!  Another way that helps is to read other people's code.  Look at other implementations of this game on Code Review and carefully read the answers.  It's a very simple way to learn a lot of good information.</p>
    </div>