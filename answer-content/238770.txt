<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Try to avoid doing sneaky value changes in what is otherwise a logical evaluation. Not that it doesn't work, but condensing these steps into one another detracts from readability.</p>

<pre><code>// Yours

do
{
    list.Add(number % outputBase);
} while ((number /= outputBase) != 0);

// My suggestion

do
{
    list.Add(number % outputBase);
    number /= outputBase;
} while (number != 0);
</code></pre>

<hr>

<p>Avoid defaulting to publically accessible methods. In <code>AllYourBase</code>, only <code>Rebase</code> should be public, the others can be made private.</p>

<p>This helps consumers of your static class know which method to call as they can't use the methods they shouldn't call directly.</p>

<hr>

<p>The validation logic can do with some descriptive error messages. You test very specific circumstances but then don't actually report back <em>which</em> part of the validation failed.</p>

<p>Try to provide a meaningful message in your exception, such as <code>base cannot be zero or negative</code> or <code>digit values exceed input base</code>.</p>

<hr>

<p>There also seems to be a disconnect in your validation itself:</p>

<pre><code>if (inputBase &lt;= 1)
    throw new ArgumentException(nameof(inputBase));

if (outputBase &lt;= 1)
    throw new ArgumentException(nameof(outputBase));

if (inputBase &lt;= 0 &amp;&amp; outputBase &lt;= 0)
    throw new ArgumentException(nameof(inputBase), nameof(outputBase));
</code></pre>

<p>It's unclear as to why you first check for <code>&lt;= 1</code> and then <code>&lt;= 0</code>. It makes sense to not allow any base below 2, so the first two tests make sense.</p>

<p>There is no additional case that the third test will catch. If the third validation fails, then either the first or second validation has already failed and thus the third validation will never be run.</p>

<p>I think you need to revisit your test logic as the third test doesn't add anything of value. Additionally, I suggest commenting your validation logic to explain the intention, <em>especially</em> when you are using magic values like <code>1</code> or <code>0</code> and where the intention is not trivially readable.</p>

<hr>

<p>The method names in <code>AllYourBase</code> can be improved.</p>

<ul>
<li>None of the private methods (see previous point) should have <code>Rebase</code> prepended to them. Their name should stand on its own.</li>
<li><code>RebaseIsException</code> implies a boolean return value, but it's <code>void</code></li>
<li><code>RebaseSolution</code> is a confusing name. Methods take an imperative form (= command), and "to rebase a solution" isn't understandable. You presumably mean "the actual solution for the <code>Rebase</code> method", but that's not a good name.</li>
</ul>

<p>My suggested renames are:</p>

<ul>
<li><code>RebaseIsException</code> =&gt; <code>ValidateInput</code></li>
<li><code>RebaseIsDigitsEmptyOrZero</code> =&gt; <code>IsEmptyOrZero</code></li>
<li><code>RebaseSolution</code> =&gt; <code>CalculateRebasedDigits</code></li>
</ul>

<p>These methods are being using in <code>Rebase</code>, and their names were chosen to specifically highlight their responsibility as part of the <code>Rebase</code> superlogic.</p>

<pre><code>// My suggestion

public static int[] Rebase(int inputBase, int[] digits, int outputBase)
{
    ValidateInput(inputBase, digits, outputBase);

    return IsEmptyOrZero(digits) 
               ? new int[] { 0 } 
               : CalculateRebasedDigits(inputBase, digits, outputBase);
}
</code></pre>

<hr>

<p>Your unit tests are overall clear and readable. </p>

<p>What I'd change, though, is the naming. Currently, your test name describes the values you're arranging, but it's generally more meaningful to describe the expected behavior.</p>

<p>If I see a test called <code>Both_bases_are_negative</code> pass, that suggests to me that both bases being negative is a happy path. It obviously shouldn't be, so the test name should reflect that e.g. <code>ThrowsException_WhenBothBasesAreNegative</code>.</p>

<p>Similarly, <code>Leading_zeros</code> can be renamed to <code>IgnoresLeadingZeroes</code>. These are just two random examples of how you should introduce a description of the desired behavior.<br>
As you may notice, I prefer to cut down on the amount of underscores in a test name, but that's personal preference.</p>

<hr>

<p>You have a lot of unit tests that test the same thing with different values. xUnit has a better approach for this: <strong>theories</strong>. Very simply put, a theory is a fact with parameters; so you can run the same test for different values.</p>

<p>As an example, you can reduce these three facts:</p>

<pre><code>[Fact]
public void Binary_to_multiple_decimal()
{
    var inputBase = 2;
    var digits = new[] { 1, 0, 1, 0, 1, 0 };
    var outputBase = 10;
    var expected = new[] { 4, 2 };
    Assert.Equal(expected, AllYourBase.Rebase(inputBase, digits, outputBase));
}

[Fact]
public void Decimal_to_binary()
{
    var inputBase = 10;
    var digits = new[] { 4, 2 };
    var outputBase = 2;
    var expected = new[] { 1, 0, 1, 0, 1, 0 };
    Assert.Equal(expected, AllYourBase.Rebase(inputBase, digits, outputBase));
}

[Fact]
public void Trinary_to_hexadecimal()
{
    var inputBase = 3;
    var digits = new[] { 1, 1, 2, 0 };
    var outputBase = 16;
    var expected = new[] { 2, 10 };
    Assert.Equal(expected, AllYourBase.Rebase(inputBase, digits, outputBase));
}
</code></pre>

<p>to a single theory:</p>

<pre><code>[Theory]
[InlineData(2,  new[] { 1, 0, 1, 0, 1, 0 }, 10, new[] { 4, 2 })
[InlineData(3,  new[] { 1, 1, 2, 0 },       16, new[] { 2, 10 })
[InlineData(10, new[] { 4, 2 },             2,  new[] { 1, 0, 1, 0, 1, 0 })
public void Rebases_toOutputBase(int inputBase, int[] inputDigits, int outputBase, int[] expectedResult)
{
    var actual = AllYourBase.Rebase(inputBase, inputDigits, outputBase);

    Assert.Equal(expectedResult, actual);
}
</code></pre>

<p>There are ways to further improve this by using <code>MemberData</code> or <code>ClassData</code> attributes, which allows you to further abstract your test cases, but the general outset is the same: it prevents copy/pasting of structurally identical tests.</p>
    </div>