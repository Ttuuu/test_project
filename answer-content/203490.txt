<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>1. Review</h3>

<ol>
<li><p>There is no docstring. What does the function <code>find_intersections</code> do? The text in the post is pretty clear, so you could use this as the basis of a docstring. I would make it explicit that the intervals are <em>open</em> (if that's what you really intend), since in Python intervals are normally half-open.</p></li>
<li><p>There seems to be some uncertainty about whether the input <code>intervals</code> is supposed to be already sorted. On the one hand, if it's already sorted then there's no point in calling <code>sorted</code>. But on the other, if it's not sorted then returning a range of indexes is not very useful, as these are indexes into <code>_times</code>, not into <code>intervals</code>.</p>

<p>I recommend picking one possibility or the other: if <code>intervals</code> is supposed to be sorted, then don't sort it (you might assert that it is already sorted); but if not, then translate the returned indexes so that they refer to <code>intervals</code>.</p></li>
<li><p>If there is no intersection, <code>find_intersections</code> prints a message. But if the caller is already printing some output, it would be inconvenient (at best) to have this kind of message appear in the middle of the output. Better to leave the printing of messages (or not) up to the caller.</p></li>
<li><p>If there is an intersection, <code>find_intersections</code> returns a range of indexes. But if there are no intersection, <code>find_intersections</code> returns <code>None</code>. It is not a good idea to return an exceptional value like this, because it would be easy for the caller to forget to check for the exceptional value, and to write something like this:</p>

<pre><code>result = find_intersection(intervals, new_interval)
print(f"Number of intersections = {len(result)}.")
</code></pre>

<p>which would fail with:</p>

<pre><code>TypeError: object of type 'NoneType' has no len()
</code></pre>

<p>What they should have written is:</p>

<pre><code>result = find_intersection(intervals, new_interval)
if result is None:
    print("Number of intersections = 0.")
else:
    print(f"Number of intersections = {len(result)}.")
</code></pre>

<p>but this is very long-winded. In this case a simple improvement would be to return an empty range of indexes.</p></li>
<li><p>If you're going to use NumPy, then you might as well use it wherever possible. So instead of <code>itertools.chain.from_iterable</code>, use <a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.reshape.html#numpy.reshape" rel="noreferrer"><code>numpy.reshape</code></a>; instead of <code>sorted</code>, use <a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.sort.html#numpy.sort" rel="noreferrer"><code>numpy.sort</code></a>; and so on.</p></li>
</ol>

<h3>2. Revised code if intervals are unsorted</h3>

<p>If <code>intervals</code> is unsorted (as suggested by the call to <code>sorted</code>), then there's no point in sorting it. Sorting costs \$O(n\log n)\$ whereas comparing the query interval with every element of <code>intervals</code> only costs \$O(n)\$.</p>

<p>So in this case we can take advantage of the fact that the open interval \$(a, b)\$ overlaps with the open interval \$(c, d)\$ if and only if \$a &lt; d\$ and \$c &lt; b\$, and write:</p>

<pre><code>def find_intersection(intervals, query):
    """Find intersections between intervals.
    Intervals are open and are represented as pairs (lower bound,
    upper bound).

    Arguments:
    intervals: array_like, shape=(N, 2) -- Array of intervals.
    query: array_like, shape=(2,) -- Interval to query.

    Returns:
    Array of indexes of intervals that overlap with query.

    """
    intervals = np.asarray(intervals)
    lower, upper = query
    return np.argwhere((lower &lt; intervals[:, 1]) &amp; (intervals[:, 0] &lt; upper))
</code></pre>

<h3>3. Revised code if intervals are sorted</h3>

<p>If <code>intervals</code> is already sorted, as suggested by returning indexes into the sorted array, then take advantage of the <code>side</code> argument to <a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.searchsorted.html#numpy.searchsorted" rel="noreferrer"><code>numpy.searchsorted</code></a> and the floor division operator, <code>//</code>:</p>

<pre><code>def find_intersection(intervals, query):
    """Find intersections between intervals.
    Intervals are open and are represented as pairs (lower bound,
    upper bound).

    Arguments:
    intervals: array_like, shape=(N, 2) -- Array of intervals.
    query: array_like, shape=(2,) -- Interval to query.

    Returns:
    Array of indexes of intervals that overlap with query.

    """
    endpoints = np.reshape(intervals, -1)
    lower, upper = query
    i = np.searchsorted(endpoints, lower, side='right')
    j = np.searchsorted(endpoints, upper, side='left')
    return np.arange(i // 2, (j + 1) // 2)
</code></pre>
    </div>