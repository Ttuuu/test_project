<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The local variables make this very verbose:
each variable is declared, initialized, re-assigned, and referenced.
(They each appear 3-4 times in the code.)
You could instead accumulate values in a list.</p>

<p>Creating an array that may contain <code>null</code> values,
then filtering out the <code>null</code> values in a second step feels like a waste that's easy to avoid.
You could instead accumulate non-null values in a list.</p>

<p>Using <code>StringJoiner</code> is efficient to join a string from multiple parts.
Then at the end the <code>filePath.toString() + "/"</code> is an inefficient string concatenation that could have been easily avoided by appending an empty string to <code>filePath</code>.</p>

<p>And instead of using <code>StringJoiner</code>, you could use <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/String.html#join-java.lang.CharSequence-java.lang.CharSequence...-" rel="nofollow noreferrer"><code>String.join</code></a>.</p>

<p>Consider this alternative:</p>

<pre><code>private String generateFullQualifiedS3KeyPrefix(DataStream dataStream, Options options) {
    List&lt;String&gt; values = new ArrayList&lt;&gt;();

    if (dataStream != null) {
        values.add(dataStream.getEnvironmentName());
        values.add(dataStream.getApplicationName());
        values.add(dataStream.getStreamName());
    }

    if (options != null) {
        values.add(String.valueOf(options.getYear()));
        values.add(String.format("%02d", options.getMonth()));
        values.add(String.format("%02d", options.getDate()));
        values.add(options.getGroupById());
    }

    values.add("");

    return String.join("/", values);
}
</code></pre>
    </div>