<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I see a number of things that may help you improve your code.</p>

<h2>Separate interface from implementation</h2>

<p>The interface goes into a header file and the implementation (that is, everything that actually emits bytes including all functions and data) should be in a separate <code>.cpp</code> file.  In this case virtually everything in <code>datetime.h</code> and all <code>static</code> functions in <code>detail.h</code> should actually not be <code>static</code> but should instead be split into <code>.h</code> and <code>.cpp</code> files instead.  The same is true for both the <code>log_level</code> operator functions in <code>lwlog.h</code>.</p>

<h2>Make sure you have all required <code>#include</code>s</h2>

<p>The code uses <code>std::string</code> in <code>datetime.h</code> but doesn't <code>#include &lt;string&gt;</code>.  Also, carefully consider which <code>#include</code>s are part of the interface (and belong in the <code>.h</code> file) and which are part of the implementation per the above advice.</p>

<h2>Be careful with signed and unsigned</h2>

<p>In the current <code>string_to_numeric_vec()</code> routine, the loop integers <code>i</code> is a signed <code>int</code> value, but it's being compared with quantity <code>format_string_tokens_vec.size()</code> which returns a <code>std::size_t</code>.  Better would be to declare <code>i</code> as <code>std::size_t</code>.</p>

<h2>Fix the bugs</h2>

<p>Right now, the <code>remove_duplicates_in_vec</code> routine incorrectly reverses the order of the passed parameters so the message printed says "That's a for message test you." which is clearly not what was intended.  Also, if we call it like this:</p>

<pre><code>lwlog::print("That's a {0} message {1} you. \n\n", str1, "{1}");
</code></pre>

<p>It prints "That's a test message test you." which is also suspect.</p>

<h2>Reconsider the approach</h2>

<p>The use of the <code>regex</code> and <code>unordered_set</code> and <code>vector</code> variables in this seem overly complicated to me.  A lot of wasted work is done as well, such as setting up all of the variables in <code>print_formatted</code> instead of just the ones that are actually used.  Further, the use of variadic templates instead of variadic functions means that there is considerable code bloat.  On my 64-bit Linux box using <code>gcc</code> with <code>-O2</code> optimizations, adding these five lines adds over 11120 bytes to the size of the executable.</p>

<pre><code>    lwlog::print("{0}\n", 1);
    lwlog::print("{0}\n", 1.0f);
    lwlog::print("{0}\n", 1u);
    lwlog::print("{0}\n", 1l);
    lwlog::print("{0}\n", "no");
</code></pre>

<p>Also, this code is not thread safe.  If I were writing this, I would probably start with something like <a href="https://en.cppreference.com/w/cpp/io/basic_osyncstream" rel="noreferrer"><code>std::basic_osyncstream</code></a>.</p>

<h2>Use <code>const</code> where practical</h2>

<p>There are a few places, such as the <code>reg</code> declaration in <code>print</code> that would be better as <code>static const</code>.</p>

<h2>Avoid relative paths in <code>#include</code>s</h2>

<p>Generally it's better to omit relative path names from <code>#include</code> files and instead point the compiler to the appropriate location.</p>

<pre><code>#include "lwlog/lwlog.h"
</code></pre>

<p>For gcc, you'd use <code>-I</code>. This makes the code less dependent on the actual file structure, and leaving such details in a single location: a Makefile or compiler configuration file.</p>

<h2>Omit <code>return 0</code> at the end of <code>main</code></h2>

<p>In both C and C++, the compiler will automatically create the code that is the exact equivalent of <code>return 0;</code> so it can safely be omitted.</p>
    </div>