<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<hr>

<p>As slepic in his comment, I also wonder why you use an enumerator in the first and <code>foreach</code> in the second place?</p>

<hr>

<p>You can eliminate <code>null</code> checks in the versions that call other overrides:</p>

<blockquote>
<pre><code>public static int DistinctCount&lt;TSource&gt;(this IEnumerable&lt;TSource&gt; source) =&gt;
        source?.DistinctCount((IEqualityComparer&lt;TSource&gt;)null) ?? throw new ArgumentNullException(nameof(source));
</code></pre>
</blockquote>

<p>can be reduced to:</p>

<pre><code>public static int DistinctCount&lt;TSource&gt;(this IEnumerable&lt;TSource&gt; source) =&gt; DistinctCount(source, (IEqualityComparer&lt;TSource&gt;)null);
</code></pre>

<p>And the other to:</p>

<pre><code>public static int DistinctCount&lt;TSource&gt;(this IEnumerable&lt;TSource&gt; source, Func&lt;TSource, bool&gt; predicate) =&gt; DistinctCount(source, predicate, null);
</code></pre>

<hr>

<p>Do you really need <code>num</code>? Couldn't you just return <code>set.Count</code>?</p>

<hr>

<p>By using <code>ToHashSet&lt;T&gt;()</code> directly as show below I only find a minor loss (if any) in performance compared to your versions:</p>

<pre><code>  public static class ExtensionsReview
  {
    public static int DistinctCount&lt;TSource&gt;(this IEnumerable&lt;TSource&gt; source) =&gt; DistinctCount(source, (IEqualityComparer&lt;TSource&gt;)null);

    public static int DistinctCount&lt;TSource&gt;(this IEnumerable&lt;TSource&gt; source, IEqualityComparer&lt;TSource&gt; comparer)
    {
      if (source is null)
      {
        throw new ArgumentNullException(nameof(source));
      }

      return source.ToHashSet(comparer).Count;
    }

    public static int DistinctCount&lt;TSource&gt;(this IEnumerable&lt;TSource&gt; source, Func&lt;TSource, bool&gt; predicate) =&gt; DistinctCount(source, predicate, null);

    public static int DistinctCount&lt;TSource&gt;(
        this IEnumerable&lt;TSource&gt; source,
        Func&lt;TSource, bool&gt; predicate,
        IEqualityComparer&lt;TSource&gt; comparer)
    {
      if (source is null)
      {
        throw new ArgumentNullException(nameof(source));
      }

      if (predicate is null)
      {
        throw new ArgumentNullException(nameof(predicate));
      }

      return source.Where(predicate).ToHashSet(comparer).Count;

    }
  }
</code></pre>

<hr>

<p>According to your tests, I think you should test reference types (classes) with override of <code>Equals()</code>/<code>GetHashCode()</code> (and implementation of <code>IEquatable&lt;T&gt;</code>) with and without a custom comparer.</p>
    </div>