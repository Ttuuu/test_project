<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>It would be good if your function could work for more than 3 trips. </p>

<p>And for larger chains of trips it becomes important to make it efficient. It is not efficient to search for the next trip by scanning the whole array. This will make the solution have <em>O(nÂ²)</em> time complexity. So I would suggest creating a <code>Map</code> first, so that you can access a trip by its <code>from</code> property in constant time:</p>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>function sortByLinked(trips, origin = "JFK") {
    const map = new Map(trips.map(trip =&gt; [trip.from, trip]));
    const result = [];
    for (let trip; trip = map.get(origin); origin = trip.to) {
        result.push(trip);
        map.delete(origin);
    }
    return result;
}

const trips = [{from: "DEN",to: "JFK"},{from: "SEA",to: "DEN"},{from: 'JFK', to: 'SEA'}];
const sorted = sortByLinked(trips, "JFK");
console.log(sorted);</code></pre>
</div>
</div>

    </div>