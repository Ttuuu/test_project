<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Code to the interface, not the implementation. It should be very rare to see <code>HashMap</code> or <code>HashSet</code> other than immediately following the keyword <code>new</code>.</p>

<blockquote>
<pre><code>        Queue&lt;Integer&gt; frontier = new LinkedList&lt;&gt;();
</code></pre>
</blockquote>

<p>is good.</p>

<blockquote>
<pre><code>        HashMap&lt;Integer,HashMap&lt;Integer,Integer&gt;&gt; map = new HashMap&lt;&gt;();
</code></pre>
</blockquote>

<p>should be changed to</p>

<pre><code>        Map&lt;Integer,Map&lt;Integer,Integer&gt;&gt; map = new HashMap&lt;&gt;();
</code></pre>

<hr>

<p><code>run</code> is not static: <code>bfs</code> is static. Why?</p>

<p>I would favour making the code more OO: make <code>map</code> a field of the class; add a method <code>addEdge</code> to do the updates to <code>map</code>; make <code>bfs</code> non-static and remove <code>map</code> from its parameters; and rename <code>bfs</code> to something which tells you <em>what</em> it does rather than <em>how</em> it does it, such as <code>processQuery</code>.</p>

<hr>

<p>The input parsing is quite ugly because it doesn't take into account the clear statement of the specification that there will be N-1 edges in the graph. With the refactors suggested in my previous point, it can be as simple as</p>

<pre><code>    private void run() {
        Scanner sc = new Scanner(System.in);

        int n = sc.nextInt();
        for (int i=0;i&lt;n-1;i++) {
            int src = sc.nextInt();
            int dst = sc.nextInt();
            int dist = sc.nextInt();
            addEdge(src,dst,dist);
        }

        int count = sc.nextInt();
        for (int i=0;i&lt;count;i++) {
            int src = sc.nextInt();
            int dst = sc.nextInt();
            processQuery(src,dst);
        }
    }
</code></pre>

<hr>

<blockquote>
<pre><code>        Queue&lt;Integer&gt; frontier = new LinkedList&lt;&gt;();
        frontier.add(src);
        Queue&lt;Integer&gt; weights = new LinkedList&lt;&gt;();
        weights.add(0);
</code></pre>
</blockquote>

<p>As far as I can see, this is a brittle implementation of</p>

<pre><code>Queue&lt;Pair&lt;Integer,Integer&gt;&gt; frontierWithWeights = new LinkedList&lt;&gt;();
</code></pre>

<p>Implementing a pair class would be worthwhile for the improved clarity; even abusing <code>Map.Entry&lt;Integer,Integer&gt;</code> would make the code easier to understand.</p>

<p>But actually that's unnecessary. Provided that you store the number of vertices, <code>weights</code> could be an <code>int[]</code>.</p>

<p><code>visited</code> is completely unnecessary because the spec guarantees that the edges form a spanning tree.</p>

<hr>

<p>An alternative approach, which would be faster for some use cases, would be to run the search to completion once such that each query can be processed in constant time.</p>
    </div>