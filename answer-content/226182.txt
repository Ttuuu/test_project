<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The problem with inheriting from <code>str</code> in the cell is that it gives you much more unwanted options than you might want. Your <code>Cell</code> can be represented as a <code>str</code>, but it's not a <code>str</code>, which is the main idea behind inheritance. If we look at all the possible values of <a href="https://www.w3schools.com/python/python_ref_string.asp" rel="nofollow noreferrer">functions</a> of <code>str</code>, I think we can see it's an overkill to inherit <code>str</code>. I think it'd be a better idea to override the <code>__str__</code> function of your <code>Cell</code> object.</p>

<p>The <code>type_</code> parameter in <code>Cell</code> could use more documentation, especially since it's a string. If I was to use your code, I couldn't figure out what I'm supposed to do with this parameter without reading your code. You should consider using docstring (even though I now realise <code>Cell</code> is more of an "internal" class, I think it'd be useful).</p>

<p>Regarding the <code>LatexTable</code> class, I would maybe consider separating the arguments validation from the actual table construction code this way :</p>

<pre><code>def __init__(self, values, **kwargs):
    if kwargs.get('transpose', False):
        self.n_cols = len(values[0])
        self.rows = values
    else:
        self.n_cols = len(values)
        self.rows = zip(*values)

    self.columns = kwargs.get('columns', map(str, range(self.n_cols)))
    self.alignments = kwargs.get('alignments', "l" * self.n_cols)
    self.types = kwargs.get('types', "v" * self.n_cols)

    self.validate_parameters()

    self.preamble = ["\\begin{{tabular}}{{{}}}".format(
        self.alignments)]
    if kwargs.get('top_rule', True):
        self.preamble.append("\\toprule")

    self.postamble = ["\\end{tabular}"]
    if kwargs.get('bottom_rule', True):
        self.postamble = ["\\bottomrule"] + self.postamble


def validate_parameters():
    if len(self.columns) != self.n_cols:
        raise ValueError("columns does not have the same length as the values ({} for the values vs {} for the columns)".format(
            self.n_cols, len(self.columns)))

    if len(self.alignments.replace("|", "")) != self.n_cols:
        raise ValueError("alignments does not have the same length as the values ({} for the values vs {} for the alignments)".format(
            self.n_cols, len(self.alignments)))

    if len(self.types) != self.n_cols:
        raise ValueError("types does not have the same length as the values ({} for the values vs {} for the types)".format(
            self.n_cols, len(self.types)))
</code></pre>

<p>This way, the construction code is less cluttered with the validation, which shouldn't change much. I also re-arranged the code so that we "load" all the parameters from <code>kwargs</code> at the beginning. We might argue that this way we do operations that aren't necessary if there's a validation error, but the cost is so small I think the increase in readability is worth it.</p>

<p>The one thing I would change about the unit tests are the methods names. I read a great book about unit testing (I sadly can't remember the name it's been years) but there's one thing that struck me and it was the methodology of naming your tests this way : </p>

<pre><code>method_whatsbeingtested_expectedresult
</code></pre>

<p>This way, when a test fails, you can know right on what's going wrong and you basically don't have to read the unit test to understand where your code failed. Your code is small enough that it might not make a very big difference, but I think it's a good way of writing unit tests.</p>
    </div>