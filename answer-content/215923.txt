<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<pre><code>public class Vars {

    ...

    public static BigDecimal LastPI = ZERO.plus();
    public static BigDecimal PI = new BigDecimal( "0.0", MathContext.DECIMAL128 );
    public static BigDecimal Count = new BigDecimal("0");

    public static ArrayList&lt;BigDecimal&gt; PIAvgs = new ArrayList&lt;&gt;( 1000000 );

    public static boolean shouldStop = false;
</code></pre>
</blockquote>

<p>Why?</p>

<p>Firstly, why are the variables deliberately placed in a different scope to the code which operates on them?</p>

<p>Secondly, why are they <code>static</code>? For that matter, why is everything in <code>BDFuncs</code> static?</p>

<p>Thirdly, why the inconsistency in the capitalisation? <code>ALL_CAPS</code> in Java convention is reserved for constants; other fields should be in <code>lowerCamelCase</code>.</p>

<hr>

<blockquote>
<pre><code>    public static void nextCicle() {
</code></pre>
</blockquote>

<p>FWIW the correct spelling is <em>cycle</em>.</p>

<blockquote>
<pre><code>        synchronized ( piLock ) {
            LastPI = PI.plus();
</code></pre>
</blockquote>

<p>Why <code>.plus()</code>? That method literally does nothing.</p>

<blockquote>
<pre><code>            if ( shouldSubstract() ) PI = PI.subtract( getCicleTerm() );
            else PI = PI.add( getCicleTerm() );
</code></pre>
</blockquote>

<p>Why doesn't the term include its sign, so that you always add? That would be more mathematically coherent and would make it easier to understand the code because it would remove the requirement to call the methods in the right order.</p>

<blockquote>
<pre><code>            updateAverage();
            Count = Count.add( ONE );
</code></pre>
</blockquote>

<p>This seems like the appropriate place to ask why <code>Count</code> is a <code>BigDecimal</code> rather than just an <code>int</code>.</p>

<hr>

<p>If you want to minimise the errors then as a rule of thumb you should add the terms in increasing size, i.e. starting with the last one. This is a problem for iterative refinement: serious calculation would not just iterative refinement.</p>

<hr>

<blockquote>
<pre><code>    private static void updateAverage() {
        PIAvgs.add( average( LastPI, PI ) );
        for ( int i = PIAvgs.size() - 2; i &gt;= 0; i-- ) {
            PIAvgs.set( i, average( PIAvgs.get( i ) , PIAvgs.get( i + 1 ) ) );
        }
    }
</code></pre>
</blockquote>

<p>It's not clear to me from reading the code that it actually has the same tree structure as defined in the question. Comments giving the invariants might clarify this - or maybe it is not, in fact, the case.</p>

<hr>

<p>Finally, let me propose some reading for you:</p>

<ul>
<li><a href="https://en.wikipedia.org/wiki/Series_acceleration#Euler's_transform" rel="nofollow noreferrer">Euler's transform</a></li>
<li><a href="https://en.wikipedia.org/wiki/Van_Wijngaarden_transformation" rel="nofollow noreferrer">Van Wijngaarden's improvement</a></li>
</ul>
    </div>