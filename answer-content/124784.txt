<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First, things my compiler complains about with warnings turned on:</p>

<ul>
<li>As PellMel has already said, you haven't declared the return type of <code>main</code>. It's good practice to do so.</li>
<li>In <code>calculating.c</code> you forgot to include <code>ctype.h</code>. This header contains declarations for <code>isspace</code> and <code>isdigit</code> among others.</li>
<li>In addition, you forgot to include <code>stdio.h</code> in <code>stack.c</code>, where you use <code>printf</code>.</li>
</ul>

<p>So on to running your program. The first thing I noticed was the following line:</p>

<blockquote>
<pre><code>sh: cls: command not found
</code></pre>
</blockquote>

<p>In your program, you use <code>system("cls")</code> to clear the screen. This is unfortunately not cross platform compatible, as the <code>cls</code> command is Windows specific. Let me quote <a href="https://codereview.stackexchange.com/a/123411/64958">this post</a> by @Edward on the topic.</p>

<blockquote>
  <p>There are two reasons not to use <code>system("cls")</code> or <code>system("pause")</code>. The first is that it is not portable to other operating systems which you may or may not care about now. The second is that it's a security hole, which you absolutely <strong>must</strong> care about. Specifically, if some program is defined and named <code>cls</code> or <code>pause</code>, your program will execute that program instead of what you intend, and that other program could be anything.</p>
</blockquote>

<p>The most common library for cross platform advanced console manipulation is <a href="https://www.gnu.org/software/ncurses/" rel="nofollow noreferrer">ncurses</a>. There is a Windows version available from <a href="http://gnuwin32.sourceforge.net/packages/ncurses.htm" rel="nofollow noreferrer">here</a>.</p>

<p>On the other hand, I don't think clearing the screen is necessary at all from a user experience perspective. Think of any interactive interpreter you might have used: <code>python</code>, <code>irb</code>, or even <code>cmd</code>. After one line of input is received, a new one can be entered without the screen being cleared. This is useful because the user might want to look at their previous calculations when making new ones. Therefore, I think an interaction between user and program should look more similar to this:</p>

<pre><code>Calculator by luckystrrrike. Type quit to exit.
expression&gt; 2 * 3 =
= 6
expression&gt; 6 + 1 =
= 7
expression&gt; quit
</code></pre>

<p>Alternatively, a user could also press <kbd>Ctrl</kbd><kbd>C</kbd> to exit the program.</p>

<p>If you choose to go down the route of making the calculator more "interpreter like", adding line history etc seems like the next step. Line history is where pressing up on the keyboard scrolls through previously entered lines, which could be really helpful, e.g. if you typed something out wrong. You could implement this by yourself, but fortunately there is a library readily available for this as well called <a href="http://gnuwin32.sourceforge.net/packages/readline.htm" rel="nofollow noreferrer">readline</a>.</p>

<p>Turning to the expression syntax, I wonder why they have to be terminated by <code>=</code> instead of a newline. For a user (at least me), newlines are a more intuitive terminator than the equals sign, but YMMV.</p>

<p>Overall, writing a calculator is an interesting project to learn about parsing I've done myself. I think you've done a good job.</p>
    </div>