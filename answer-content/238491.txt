<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Use the <code>-u</code> and <code>-e</code> switches to bash, when possible, because they help to find bugs.  Your log decoder may return errors that you want to ignore (making <code>-e</code> unhelpful) but <code>-u</code> is safe here.</p>

<p>Move the <code>echo … exit</code> pattern into a function:</p>

<pre><code>die() { printf "%s\n" "$@" &gt;&amp;2; exit 1; }
</code></pre>

<p>Quotes aren't needed on the left-hand side of <code>[[</code> tests.  For "die unless foo" assertions, consider writing them in the form <code>foo || die "test failed"</code>:</p>

<pre><code>[[ -z $cmd ]] &amp;&amp; die "…"
</code></pre>

<p><code>(( $# == 1 || $# &gt; 2 ))</code> is more clearly written in the affirmative, as <code>(( $# == 0 || $# == 2 ))</code></p>

<p>Collect the file list once instead of twice.  Use globbing instead of <code>find</code> to get proper handling of filenames with spaces in them.  Include contributing variables in error messages.  Do a <code>cd</code> first so that you don't need to decompose filenames later.  <code>((</code> expressions return false when zero so there's usually no need to explicitly write <code>x == 0</code>:</p>

<pre><code>shopt -s nullglob
pushd "$log_dir" || die "can't chdir to $log_dir"
declare -a in=( *.cbllog )
popd || die "can't return to original working directory"
(( ${#in} )) || die "no cbllog files in $log_dir"
…
for path in "${in[@]}"; do
</code></pre>

<p>Your command detector has a bug if <code>cbl-log</code> is an alias or function.  Use <code>type -P</code> instead.  If you truncate using <code>read</code> instead of <code>head</code>, the assignment doubles as an emptyness test:</p>

<pre><code>read cmd &lt; &lt;( type -P {./,}cbl-log ) || die "cbl-log should be in PATH or current directory"
</code></pre>

<p>Your basename implementation has a bug if <code>log_dir</code> contains globbing characters.  This is obsoleted by the <code>pushd</code> above but something like <code>file=${path##*/}</code> or <code>file=$( basename "$path" )</code> would work.</p>

<p><code>mkdir -p</code> is a no-op when the directory exists; no need to test for that yourself.</p>

<p>You'll need execute permission on <code>$out_dir</code> along with write.</p>

<p>Putting it all together:</p>

<pre class="lang-bsh prettyprint-override"><code>    #!/bin/bash -u 
    die() { printf "%s\n" "$@" &gt;&amp;2; exit 1; }

    (( ${#} == 0 || ${#} == 2 )) || die "Usage:    cbldecode"  "          cbldecode &lt;source directory&gt; &lt;target directory&gt;"
    log_dir=${1:-$PWD}
    out_dir=${2:-"decoded"}
    read cmd &lt; &lt;( type -P {./,}cbl-log ) || die "cbl-log should be in PATH or current directory"

    pushd "$log_dir" || die "can't chdir to $log_dir"
    shopt -s nullglob
    declare -a in=( *.cbllog )
    popd || die "can't return to original working directory"
    (( ${#in} )) || die "no cbllog files in $log_dir"

    mkdir -p "$out_dir"
    [[ -w $out_dir &amp;&amp; -x $out_dir ]] || die "insufficient permissions on $out_dir"

    for basename in "${in[@]}"; do 
        "$cmd" logcat "$log_dir/$basename" "$out_dir/${basename%.cbllog}"
    done
</code></pre>

<p>For faster conversion, add <code>&amp;</code> to the <code>cbl-log</code> invocation, or adapt the script to send basenames to <code>xargs -P</code>.</p>
    </div>