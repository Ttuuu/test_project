<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here are some suggestions:</p>

<h2>Keep file handlers in one function.</h2>

<p>First off, the <code>get_text_file()</code> and <code>lines_list()</code> methods:</p>

<blockquote>
<pre><code>def get_text_file(self):
    file = open('C:/Users/PC/Documents/skychallenge_skyphrase_input.txt', 'r')
    return file

def lines_list(self):
    text = self.get_text_file()
    line_list = text.readlines()
    return [line.split() for line in line_list]
</code></pre>
</blockquote>

<ol>
<li><p>It's generally a bad idea to pass files outside of a function... it poses some questions: Who will close the file? When? And how? Instead, <em>open and close it in the same function</em> so that the file can be <em>contained</em>.</p></li>
<li><p>Since the <code>lines_list()</code> method is only reading text off from <code>get_text_file()</code> (and nothing else), it may be better to simply write <em>one</em> function which reads handles and reads lines off the file. (The splitting of lines, <code>line.split()</code>, can be done in <code>phrases_validation()</code>.)</p></li>
</ol>

<p>With these points in mind, we could define <code>get_text_lines()</code> as:</p>

<pre><code>def get_text_lines(self):
    with open('C:/Users/PC/Documents/skychallenge_skyphrase_input.txt', 'r') as file:
        line_list = file.readlines()

    return line_list
</code></pre>

<p>Notice that the use of the <a href="https://stackoverflow.com/questions/3012488/what-is-the-python-with-statement-designed-for"><code>with</code> statement</a>. This automatically closes the file when the block-scope is exited.</p>

<p>Using the above function implies modifying <code>phrases_validation()</code>:</p>

<pre><code>def phrases_validation(self):
    # ...
    for line in get_text_lines():   # call function here
        # ...
        words = line.split()        # split lines here
        for word in words:          # iterate through split line here
            # ...
</code></pre>

<h2>The Validation Algorithm</h2>

<p>I've tried annotating the meat of your <code>phrases_validation</code>:</p>

<blockquote>
<pre><code># iterate through lines...
for line in get_text_lines():

    new_line = []  # container to store 1s and 0s

    # iterate through words...
    words = line.split()
    for word in words:

        exam = line.count(word)

        # append 0 if word is duplicated
        if exam &gt; 1:
            new_line.append(0)

        # append 1 if word is not duplicated
        else:
            new_line.append(1)

    # increment validated_phrases if no duplicates
    if 0 in new_line:
        validated_phrases += 0
    else:
        validated_phrases += 1
</code></pre>
</blockquote>

<p>Some general suggestions:</p>

<ol>
<li>Opt for readability. Since only <code>0</code> and <code>1</code> are being used, this implies a <em>binary</em> domain, and thus can be substituted with <code>False</code> and <code>True</code> respectively.</li>
<li><p><code>validated_phrases += 0</code> This can be removed since nothing is added. Simply do</p>

<pre><code>if 0 not in new_line:
    validated_phrases += 1
</code></pre></li>
</ol>

<p>Some possible improvements to the algorithm:</p>

<h3>Using the <code>any</code> built-in function.</h3>

<p>The <code>any</code> built-in function takes a list and tests for truth. If any of the elements are <a href="https://stackoverflow.com/questions/39983695/what-is-truthy-and-falsy-in-python-how-is-it-different-from-true-and-false"><em>Truthy</em></a>, <code>any</code> returns <code>True</code>, else <code>False</code>. Your inner loop can make use of the <code>any</code> function:</p>

<pre><code>for line in get_text_lines():
    words = line.split()

    has_duplicates = any(words.count(word) &gt; 1 for word in words)
    if not has_duplicates:
        validated_phrases += 1
</code></pre>

<p>Here, a <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer">comprehension</a> was used: <code>words.count(word) &gt; 1 for word in words</code>.</p>

<p>This generates an iterable of <code>True</code>/<code>False</code> values: <code>True</code> if <code>words.count(word) &gt; 1</code> and <code>False</code> otherwise. We then check whether there are any duplicates and if not, increment <code>validated_phrases</code>.</p>

<p>(To keep track of the number of duplicates, you can use the <code>sum</code> function instead. This will add the <code>True</code> values, counting the number of duplicates.)</p>

<h3>Using the <code>set</code> class.</h3>

<p>Indeed, there are a couple more ways to check for duplicates. <code>list.count</code> has a time-complexity with an upper-bound of <span class="math-container">\$O(n)\$</span> (with <span class="math-container">\$n\$</span> being the length of the list), i.e. it searches the entire list, which may be slow when the list grows to sizes of thousands or millions.</p>

<p>One other way to check for duplicates would be to obtain a container of <em>unique</em> words, and check whether it has the same length as the list of words in the line. We can use <code>set</code> to obtain the unique words.</p>

<pre><code>for line in get_text_lines():
    words = line.split()

    unique_words = set(words)
    has_duplicates = len(unique_words) != len(words)
    if not has_duplicates:
        validated_phrases += 1,
</code></pre>

<p>I'm not entirely sure about the complexity of <code>set(words)</code> but <a href="https://stackoverflow.com/questions/1115313/cost-of-len-function">the <code>len</code> function has a time complexity of <span class="math-container">\$O(1)\$</span></a> which can be <em>really fast</em> in the long run.</p>

<h3>Using the <code>collections.Counter</code> class.</h3>

<p>Another way that might be of interest would be to use <code>Counter</code> from the <code>collections</code> module.</p>

<pre><code>for line in get_text_lines():
    words = line.split()

    counter = Counter(words)
    has_duplicates = any(counter[word] != 1 for word in counter)
    if not has_duplicates:
        validated_phrases += 1
</code></pre>

<p><sup><em>(For this, remember to add <code>from collections import Counter</code> at the top of your script.)</em></sup></p>

<h2>Try not to rely on <code>__str__</code>.</h2>

<p>In your code, the main algorithm, <code>phrases_validation()</code>, is only called when <code>str(text)</code> or <code>text__str__()</code> is called (this is implicitly called by <code>print(text)</code>).</p>

<p>It's creative... but prefer to directly call <code>phrases_validation()</code>:</p>

<pre><code>validator = SkyphrasesValidation()
print(validator.phrases_validation())
</code></pre>

<p>(And call <code>str()</code> on it if needed.) This is more explicit to readers that you're calling the <code>phrases_validation()</code> method.</p>

<p>Generally, the <code>__str__</code> magic method should be overloaded when you're trying to display a class' members contents. Unfortunately, <code>SkyphrasesValidation</code> doesn't have any members.</p>

<p>The variable name <code>text</code> can be interpreted in several ways. Is it a text file? A string?  Consider a more descriptive name instead. (<code>validator</code> was used in the example above.)</p>

<h2>Class?</h2>

<p>The class could have been substituted with one/two functions. But sticking with a class... since the <code>self</code> argument is rarely used, consider making the methods <a href="https://stackoverflow.com/questions/3012488/what-is-the-python-with-statement-designed-for">static</a> or instead, place <code>get_text_lines()</code> <em>outside</em> of the class and pass the lines of text to <code>phrases_validation()</code> as an argument.</p>

<p>Hope this helps!</p>
    </div>