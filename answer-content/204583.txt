<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ol>
<li>There's no reason to ascribe a type to <code>memo</code>.</li>
<li>Don't expose the memoization logic outside the call. Instead, create a shim function that creates the memoization vector for you.</li>
<li>You can then define the memoized function inside the shim function, preventing people from accidentally calling it.</li>
<li>Since the <code>memo</code> variable isn't used after the top-most recursive call, you can just pass in the reference directly, without creating a variable.</li>
<li>As mentioned in the comments, the <code>map(|x| x)</code> call is not needed here.</li>
<li>Write <em>some</em> kind of automated tests.</li>
</ol>



<pre><code>fn fib(number: usize) -&gt; usize {
    fn fib_memo(n: usize, memo: &amp;mut [Option&lt;usize&gt;]) -&gt; usize {
        memo[n].unwrap_or_else(|| {
            let result = {
                if n &gt; 1 {
                    fib_memo(n - 1, memo) + fib_memo(n - 2, memo)
                } else {
                    1
                }
            };
            memo[n] = Some(result);
            result
        })
    }

    fib_memo(number, &amp;mut vec![None; number + 1])
}

fn main() {
    let number = 46;
    let r = fib(number);
    println!("{}", r);
    assert_eq!(2971215073, r);
}
</code></pre>

<p>That being said, I'd point out that this memoized version of Fibonacci is not the most efficient â€” you don't need to keep every previous value forever. Instead, check out numerous ways of being more efficient:</p>

<ul>
<li><a href="https://codereview.stackexchange.com/q/130042/32521">Implement a generic Fibonacci sequence in Rust without using Copy trait</a></li>
<li><a href="https://stackoverflow.com/q/31798737/155423">How to swap two variables?</a></li>
<li><a href="https://stackoverflow.com/q/40965230/155423">How to avoid excessive cloning in Rust?</a></li>
<li><a href="https://stackoverflow.com/q/27760022/155423">Is it possible to use a fold with a Vec?</a></li>
</ul>

<p>One possible implementation of that:</p>

<pre><code>fn fib(n: usize) -&gt; usize {
    fn fib_memo(n: usize, memo: &amp;mut [usize; 2]) -&gt; usize {
        let [a, b] = *memo;
        let c = a + b;
        if n == 0 {
            c
        } else {
            *memo = [b, c];
            fib_memo(n - 1, memo)
        }
    }

    if n &lt; 2 {
        1
    } else {
        fib_memo(n - 2, &amp;mut [1, 1])
    }
}
</code></pre>

<p>Or a non-recursive variant:</p>

<pre><code>fn fib(n: usize) -&gt; usize {
    if n &lt; 2 {
        1
    } else {
        let mut memo = [1, 1];
        let mut n = n - 2;

        loop {
            let [a, b] = memo;
            let c = a + b;

            if n == 0 {
                return c;
            }

            memo = [b, c];
            n -= 1;
        }
    }
}
</code></pre>
    </div>