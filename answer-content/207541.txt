<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Missing includes</h1>

<p>I think you need to include <code>&lt;stdio.h&gt;</code> and <code>&lt;stdlib.h&gt;</code> for successful compilation.</p>

<h1>Always check that allocations succeed</h1>

<p>Look at</p>

<blockquote>
<pre><code>*buffer = malloc(16);
(*buffer)[0] = 0;
</code></pre>
</blockquote>

<p>If <code>malloc()</code> returns a null pointer, then the assignment to its first element is <strong>undefined behaviour</strong>.  Your program could crash, destroy your system, or (if you're unlucky) appear to work.</p>

<h1>Always check that input succeeds</h1>

<p>If <code>getchar()</code> returns <code>EOF</code>, we should stop reading.  Note that by storing the result in a <code>char</code>, we lose the ability to distinguish <code>EOF</code> from valid input.</p>

<h1>Avoid output-only parameters</h1>

<p>Why do we return <code>void</code>, and instead write our result to a supplied pointer argument?  I could understand accepting an argument if we were to re-use a buffer passed in, but we just discard it.  I'd write this as</p>

<pre><code>/* caller must release allocated memory with free() */
char *scan(void)
</code></pre>

<h1>Be careful of overflow</h1>

<p>If an input line reaches 255*16 = 4080 characters, <code>size++</code> will overflow to zero.  Then our <code>realloc()</code> acts as <code>free()</code>, and we find ourselves accessing memory out of bounds.  I recommend using <code>size_t</code> for the length of allocated memory - allocation will fail before we reach the limits of <code>size_t</code>.</p>

<h1>Consider increasing the allocation increment</h1>

<p>This code reallocates every 16 chars.  This makes for a lot of allocations for really long lines.  One technique to avoid that, without hugely over-allocation for short lines, is to increase the increment as the buffer gets larger.  So instead of always increasing by 16, we might double the buffer size instead, or perhaps double it and add 32.  There are various strategies that can be used, with different performance implications (though the differences are likely small compared to the overhead of reading input at all).</p>

<hr>

<h1>Improved version</h1>

<pre><code>#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;

/* Read a line from standard input stream.

   Returns a buffer that must be released with free(),
   or a null pointer if none could be allocated.

   The result will end in a newline character if a
   full line was successfully read.
 */
char *scan(void)
{
    size_t capacity = 16;
    char *buffer = malloc(capacity);
    if (!buffer) {
        return NULL;
    }
    size_t i = 0;

    int c;                      /* current input character */
    while ((c = getchar()) != EOF) {
        if (i + 2 &gt; capacity) {
            /* ensure space for c and terminating NUL */
            capacity *= 2;
            char *newbuf = realloc(buffer, capacity);
            if (!newbuf) {
                /* allocation failed - undo the read, terminate string, and return */
                ungetc(c, stdin);
                buffer[i] = '\0';
                return buffer;
            }

            buffer = newbuf;
        }

        /* We have enough space; now store it */
        buffer[i++] = (char)c;
        if (c == '\n') {
            break;
        }
    }

    if (i == 0) {
        /* we didn't read anything */
        free(buffer);
        return NULL;
    }

    buffer[i] = '\0';
    return buffer;
}
</code></pre>

<h2>Demo</h2>

<pre><code>#include &lt;string.h&gt;
int main(void)
{
    char *s;
    while ((s = scan())) {
        printf("%04zu %s\n", strlen(s), s);
        free(s);
    }
}
</code></pre>
    </div>