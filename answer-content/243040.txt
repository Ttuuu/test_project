<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The principal problem of your code is that you want modularity but don't really have any:</p>

<ul>
<li>You use static variable, and they are use directly in your deck generator, this need to recompile the program for each type of card, suit, color and you can't have different type of deck at the same time.</li>
<li>You want unspecified number of colors but only handle two when printing the deck</li>
</ul>

<pre class="lang-rust prettyprint-override"><code>use std::fmt;

const WHITE_SUITS: [Suit; 2] = [
    Suit::new(SuitKind::DIAMONDS, '♦'),
    Suit::new(SuitKind::HEARTS, '♥'),
];

const BLACK_SUITS: [Suit; 2] = [
    Suit::new(SuitKind::CLUBS, '♧'),
    Suit::new(SuitKind::SPADES, '♤'),
];

const RANKS: [Rank; 13] = [
    Rank::ACE,
    Rank::TWO,
    Rank::THREE,
    Rank::FOUR,
    Rank::FIVE,
    Rank::SIX,
    Rank::SEVEN,
    Rank::EIGHT,
    Rank::NINE,
    Rank::TEN,
    Rank::JACK,
    Rank::QUEEN,
    Rank::KING,
];

fn main() {
    env_logger::Builder::new()
        .filter_level(log::LevelFilter::Info)
        .init();

    let deck = Deck::new(
        [
            (WHITE_SUITS.iter().copied(), Some('★')),
            (BLACK_SUITS.iter().copied(), Some('☆')),
        ]
        .iter()
        .cloned(),
        RANKS.iter().copied(),
    );
    println!("{}", deck);
}

struct Card {
    suit: Suit,
    rank: Rank,
}

#[derive(Debug, Copy, Clone)]
enum Rank {
    ACE = 0,
    TWO = 1,
    THREE = 2,
    FOUR = 3,
    FIVE = 4,
    SIX = 5,
    SEVEN = 6,
    EIGHT = 7,
    NINE = 8,
    TEN = 10,
    JACK = 11,
    QUEEN = 12,
    KING = 13,
    JOKER = 14,
}

impl AsRef&lt;str&gt; for Rank {
    fn as_ref(&amp;self) -&gt; &amp;'static str {
        match self {
            Rank::ACE =&gt; "A",
            Rank::TWO =&gt; "2",
            Rank::THREE =&gt; "3",
            Rank::FOUR =&gt; "4",
            Rank::FIVE =&gt; "5",
            Rank::SIX =&gt; "6",
            Rank::SEVEN =&gt; "7",
            Rank::EIGHT =&gt; "8",
            Rank::NINE =&gt; "9",
            Rank::TEN =&gt; "10",
            Rank::JACK =&gt; "J",
            Rank::QUEEN =&gt; "Q",
            Rank::KING =&gt; "K",
            Rank::JOKER =&gt; "J",
        }
    }
}

#[derive(Debug, Copy, Clone)]
enum SuitKind {
    DIAMONDS = 0,
    CLUBS = 1,
    HEARTS = 2,
    SPADES = 3,
    JOKER = 4,
}

#[derive(Debug, Copy, Clone)]
struct Suit {
    kind: SuitKind,
    repr: char,
}

impl Suit {
    const fn new(kind: SuitKind, repr: char) -&gt; Self {
        Self { kind, repr }
    }
}

impl fmt::Display for Rank {
    fn fmt(&amp;self, f: &amp;mut fmt::Formatter&lt;'_&gt;) -&gt; fmt::Result {
        writeln!(f, "{}", self.as_ref())
    }
}

struct Deck {
    deck: Vec&lt;Card&gt;,
}

impl Deck {
    fn new&lt;C, S, R, I&gt;(colors: C, ranks: R) -&gt; Self
    where
        C: IntoIterator&lt;Item = (S, Option&lt;char&gt;)&gt;,
        S: IntoIterator&lt;Item = Suit&gt;,
        R: IntoIterator&lt;Item = I::Item, IntoIter = I&gt;,
        I: Clone + Iterator&lt;Item = Rank&gt;,
    {
        log::info!("Starting genering cards.");

        let ranks = ranks.into_iter();
        let mut deck: Vec&lt;Card&gt; = Vec::with_capacity(54);

        for (suit, joker) in colors.into_iter() {
            for s in suit.into_iter() {
                for r in ranks.clone() {
                    deck.push(Card { suit: s, rank: r });
                }
            }
            if let Some(repr) = joker {
                deck.push(Card {
                    suit: Suit::new(SuitKind::JOKER, repr),
                    rank: Rank::JOKER,
                });
            }
        }

        log::info!("Generated {} cards.", deck.len());

        Self { deck }
    }
}

impl fmt::Display for Card {
    fn fmt(&amp;self, f: &amp;mut fmt::Formatter&lt;'_&gt;) -&gt; fmt::Result {
        let rank = self.rank.as_ref();
        let suit = self.suit.repr;

        writeln!(f, "┌────┐")?;
        writeln!(f, "│{:1.1} {:&gt;2.2}│", suit, rank)?;
        writeln!(f, "│    │")?;
        writeln!(f, "│{:&lt;2.2} {:1.1}│", rank, suit)?;
        writeln!(f, "└────┘")
    }
}

impl fmt::Display for Deck {
    fn fmt(&amp;self, f: &amp;mut fmt::Formatter&lt;'_&gt;) -&gt; fmt::Result {
        for c in &amp;self.deck {
            writeln!(f, "{}", c)?;
        }

        Ok(())
    }
}
</code></pre>

<p>This example is quite long:</p>

<ul>
<li>When you want print something always implement <a href="https://doc.rust-lang.org/std/fmt/trait.Display.html" rel="nofollow noreferrer"><code>Display</code></a>, this allow to auto implementation of trait like <a href="https://doc.rust-lang.org/std/string/trait.ToString.html" rel="nofollow noreferrer"><code>ToString</code></a></li>
<li>Add a lot of generic still limited</li>
<li>Improve style like use format option, use some trait from std</li>
<li>Now <code>Suit</code> have a <code>repr</code>, this allow to handle any color</li>
<li>Now the deck is generate without using any <code>const</code> directly</li>
<li>Replace static by <a href="https://stackoverflow.com/questions/52751597/what-is-the-difference-between-a-const-variable-and-a-static-variable-and-which"><code>const</code></a></li>
<li>I left it but there is not reason in your current code to specify variant value.</li>
<li>Now joker are giving along with colors, in a form of <code>Option&lt;char&gt;</code>, this allow handle any color of a joker and allow to add joker for only a selection of color.</li>
<li>Show example of <a href="https://docs.rs/log/0.4.8/log/" rel="nofollow noreferrer">logging</a> instead of just printing log directly on stdout (bad example because I wanted it's work on playground but setting log level in program is not the right way, it's the user that should set it)</li>
</ul>

<h1>What you could do next ?</h1>

<p>I didn't push further because that would take a lot of time but if you want more modularity, you will need to use <a href="https://doc.rust-lang.org/book/ch10-02-traits.html" rel="nofollow noreferrer"><code>trait</code></a>, for now, unless you add <code>Rank</code> variant and <code>SuitKind</code> variant you are limited to a specific type of deck. It hard to know in advance what type of trait you could need, you will need to see by yourself when you implement variant of card game what you could share and so use a trait to share behaviour.</p>
    </div>