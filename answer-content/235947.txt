<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Preliminaries: there's strategy, and there's tactics.<br>
A somewhat common procedure to tackle performance problems is to look at "inner" loops first - not entirely wrong, but the golden rule is<br>
<strong><em>measure</em></strong>.<br>
(And, when turning to others for support, provide measurement results and a test data generator or test data.)  </p>

<p>Some statements regarding <em>edit distance</em>:<br>
• difference in length gives a lower bound on insertions+deletions<br>
• accumulated differences in frequency gives a lower bound on 2*replacements+insertions+deletions</p>

<hr>

<p>Review proper using <em>m = len(str1)</em> and <em>n = len(str2)</em>:  </p>

<ul>
<li><a href="https://www.oracle.com/technetwork/java/javase/documentation/index-137868.html#styleguide" rel="nofollow noreferrer">Document your code. In the code.</a></li>
<li>design<br>
• I don't like heavyweight constructors<br>
 From the preparation possible, I'd prefer a constructor taking a <em>set of words</em> and<br>
• a "query function" with a word as a parameter (<code>String</code> rather than <code>char[]</code>) -<br>
 too bad returning a multipart result gets verbose, ugly or both in Java</li>
<li>program against interfaces, not implementations<br>
<code>List&lt;String&gt; closestWords;</code></li>
<li><code>dynamicEditDistance()</code>  

<ul>
<li>I can guess what's <em>dynamic</em> about it, but that's an implementation detail; such does <em>not</em> belong in a method name: <code>editDistance()</code></li>
<li>does not use any instance member: make it <code>static</code></li>
<li>with "the usual" cost model you don't need a full <em>m</em>×<em>n</em> array</li>
<li>If your edit cost is symmetric (<em>cost(insertion) == cost(deletion) &amp;&amp; cost(replace(a, b)) == cost(replace(b, a))</em>), you don't need <em>previous row(s)</em> <strong>and</strong> <em>previous column(s)</em>.</li>
<li>you iterate the first index in the outer loop and the second one in the inner:<br>
That's the sequence I'd arrange initialisation<br>
(I'd even use <code>j</code> in the 2nd loop)</li>
</ul></li>
<li>work currently done in <code>ClosestWords()</code>:  

<ul>
<li>code the way you think about the procedure/solution<br>
- I'd think <em><code>w</code> doesn't change, let's get the chars exactly once</em><br>
 (a nifty language system <em>might</em> be doing this for you)</li>
<li>prefer <code>List.clear()</code> over instantiation</li>
<li>(today,) I'd prefer redundantly checking for minimum distance over repeating the <code>add()</code>:</li>
</ul></li>
</ul>

<pre><code>          closestWords = new LinkedList&lt;&gt;();
          closestDistance = Integer.MAX_VALUE;
          char[] chars = w.toCharArray();
          for (String s : wordList) {
            int dist = editDistance(chars, s.toCharArray());
            if (dist &lt; closestDistance) {
              closestDistance = dist;
              closestWords.clear();
            }
            if (dist == closestDistance)
              closestWords.add(s);
          }
</code></pre>

<p>A "slightly" weirder approach is to handle words from the word list in order of length, first descending from <em>same length</em>, then above and increasing; terminating both when "more extremal length words" can't possibly have a smaller edit distance.<br>
Trying to avoid duplicating the code now extracted as <code>handleDistance()</code> "in line" got out of hand - not pleased, still.<br>
Don't do like I do (not documenting <code>tally</code> (, <code>words</code>) &amp; <code>init()</code>),<br>
do like I say (better than <code>handleDistance()</code> &amp; <code>query()</code>, still)</p>

<pre><code>    final Comparator&lt;String&gt; tally = new Comparator&lt;String&gt;() { @Override
            public int compare(String l, String r) {
                if (l.equals(r))
                    return 0;
                final int ll = l.length(), rl = r.length();
                return ll &lt; rl ? -1
                    : rl &lt; ll ? 1
                      : l.compareTo(r);
            }
        };
    String[] words;
    void init(Collection&lt;String&gt; allWords) {
        words = allWords.toArray(NOSTRINGS);
        Arrays.sort(words, tally);
    }
    /** handles the distance between one pair of &lt;code&gt;String&lt;/code&gt;s
     *  updating &lt;code&gt;closestDistance&lt;/code&gt; and &lt;code&gt;closestWords&lt;/code&gt;
     * @param chars chars of the query &lt;code&gt;String&lt;/code&gt;
     * @param s &lt;code&gt;String&lt;/code&gt; from &lt;code&gt;words&lt;/code&gt;
     */
    void handleDistance(final char[] chars, String s) {
        // System.out.println("&gt;&gt;&gt;" + s + '&lt;');
        final int dist = editDistance(chars, s.toCharArray());
        if (dist &lt; closestDistance) {
            closestDistance = dist;
            closestWords.clear();
        }
        if (dist == closestDistance)
            closestWords.add(s);
    }

    /** queries &lt;code&gt;words&lt;/code&gt; for lowest edit distance to &lt;code&gt;w&lt;/code&gt;
     *  updating &lt;code&gt;closestDistance&lt;/code&gt; and &lt;code&gt;closestWords&lt;/code&gt;
     * @param w &lt;code&gt;String&lt;/code&gt; to find closest words to
     * @return closest words
     */
    public Collection&lt;String&gt; query(String w) {
        final char[] chars = w.toCharArray();
        int sameLength = Arrays.binarySearch(words, w, tally);
        if (0 &lt;= sameLength) {
            closestDistance = 0;
            return closestWords = Collections.singletonList(words[sameLength]);
        }
        closestDistance = Integer.MAX_VALUE;
        sameLength = -sameLength; // insert index + 1
        for (int i = sameLength ; 0 &lt;= --i ; ) {
            final String s = words[i];
            if (closestDistance &lt;= chars.length - s.length())
                break;
            handleDistance(chars, s);
        }
        for (int i = sameLength ; ++i &lt; words.length ; ) {
            final String s = words[i];
            if (closestDistance &lt;= s.length() - chars.length)
                break;
            handleDistance(chars, s);
        }
        return closestWords;
    }
</code></pre>
    </div>