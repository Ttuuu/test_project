<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><a href="https://docs.microsoft.com/en-us/dotnet/api/system.threading.tasks.task.run?view=netframework-4.8" rel="nofollow noreferrer"><code>Task.Run</code></a> schedules the work specified by the lambda to be executed on the thread pool.
Scheduling the work and managing the thread pool is costly in terms of CPU time, allocations and possible thread starvation. <code>Task.Run</code> is useful for CPU-bound tasks but usually a smell in asynchronous code in web applications. Most of the time it hints at misunderstanding of async vs. parallel.
As <code>context.Response.Redirect("/Maintenance")</code> is not async by itself, there is no need to block/wait/schedule work. Instead, you can synchronously instruct the response to redirect and return a premade, completed task:</p>

<pre><code>context.Response.Redirect("/Maintenance")
Task.CompletedTask
</code></pre>

<p>or return a result directly</p>

<pre><code>Task.FromResult(response)
</code></pre>
    </div>