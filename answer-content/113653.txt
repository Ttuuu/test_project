<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Descriptive names</strong></p>

<p>The function signature is:</p>

<pre><code>bayesian(R, v, m, C)
</code></pre>

<p>But then you go a long way describing these single letter parameters in the docstring:</p>

<pre><code>:param R: Average rating for this business
:param v: Number of ratings for this business
:param m: Minimum ratings required
:param C: Mean rating across the entire list
</code></pre>

<p>Most usually, descriptive code is preferred over descriptive comments / docstrings for the simple reason that having two things (code / comments) instead of one (code) doubles the maintenance effort, and if code and comments get out of sync, the code becomes extremely confusing.</p>

<p><strong>Built-ins</strong></p>

<pre><code>names = set()
filtered_list = []
for business in full_list:
    if business.name not in names:
        filtered_list.append(business)
        names.add(business.name)

return filtered_list
</code></pre>

<p>Becomes:</p>

<pre><code>return list(set(business))
</code></pre>

<p>The code does not care about the order of the restaurants as far as I can see, so the fact that <code>set</code> changes order should not be a problem.</p>

<p><strong>Function for input</strong></p>

<p>Getting user input is a detail, when looking at the main structure of the program in <code>main</code> we don't care about it, so just use a function.</p>

<pre><code>while input_value is not 'n':
    lat = input('Lat: ')
    lng = input('Long: ')
    locations.append((lat, lng))
    input_value = raw_input('Would you like more points? (y/n) ')
</code></pre>

<p><strong>No <code>input</code> in Python 2</strong></p>

<p>It automatically evaluates the input, it is dangerous to execute anything the user enters and universally considered bad practice. Use <code>int(raw_input(x))</code></p>

<p><strong>The overload</strong></p>

<p><code>+</code> means many things in Python, one of them is adding lists:</p>

<pre><code>full_list = []
full_list.extend(venues)
full_list.extend(businesses)
full_list.extend(places)
</code></pre>

<p>Becomes:</p>

<pre><code>full_list = venues + businesses + places
</code></pre>

<p>With a clear gain in clarity.</p>
    </div>