<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I finally came up with an idea that might work.</p>

<p>I created a <code>TreeMap&lt;Integer, List&lt;String&gt;&gt;</code>.</p>

<p>Here's the output from my last test run.  The first group is the <code>TreeMap</code> I created.  The second group is a <code>List&lt;Visitor&gt;</code> that I created from the map.  I just used the <code>Visitor</code> class <code>toString</code> method to output the <code>List</code>.</p>

<pre><code>1 [Out]
2 [In, Out]
3 [Out]
4 [In]
5 [In]
7 [Out]

Visitor [time=1, direction=Out]
Visitor [time=2, direction=Out]
Visitor [time=2, direction=In]
Visitor [time=3, direction=Out]
Visitor [time=4, direction=In]
Visitor [time=5, direction=In]
Visitor [time=7, direction=Out]
</code></pre>

<p>Here's the code.  It took me several hours to come up with this idea.  I don't envy anyone trying to come up with this in an interview.</p>

<p>Edited to add: I'm not sure what comments the OP is looking for.</p>

<p>The <code>createMap</code> method checks to see if a key, value pair exists indirectly.  If the value is null, the key, value pair doesn't exist.  So I create an <code>ArrayList&lt;String&gt;</code> and add the key, value to the map.  If the key, value pair exists, then I add the string to the value <code>List</code>.  Since the value is a <code>List</code>, I maintain the order of the input people.</p>

<p>The <code>createList</code> method is a little more complicated.  I iterate through the map keys, retrieving the <code>List&lt;String&gt;</code> value for each key.  If there's only one element in the <code>List</code> (one person), I put them through the door and set the default direction of the door.</p>

<p>If there's more than one element in the <code>List&lt;String&gt;</code> value, I iterate through the <code>List</code> twice.  Once with the default door direction, and once again with the opposite door direction.  Since the List for one time value is likely to be small, the double iteration is pretty short.</p>

<p>Worst case, when everyone arrives at the door at the same time, the cost of creating the map, and iterating through the map value is <code>3n</code>, which is effectively <code>n</code>.</p>

<pre><code>import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.TreeMap;

public class Doors {

    public static void main(String[] args) {
        int[] time = new int[] { 2, 3, 5, 1, 7, 4, 2 };
        String direction[] = new String[] { "In", "Out", 
                "In", "Out", "Out", "In", "Out" };
        Doors obj = new Doors();
        List&lt;Visitor&gt; visitors = 
                obj.findTime(time, direction);
        for (Visitor visitor : visitors) {
            System.out.println(visitor);
        }
    }

    public List&lt;Visitor&gt; findTime(int[] time, 
            String[] direction) {
        Map&lt;Integer, List&lt;String&gt;&gt; map =
                createMap(time, direction);
        printMap(map);
        return createList(map);
    }

    private void printMap(Map&lt;Integer, List&lt;String&gt;&gt; map) {
        Set&lt;Integer&gt; set = map.keySet();
        Iterator&lt;Integer&gt; iter = set.iterator();
        while (iter.hasNext()) {
            Integer key = iter.next();
            List&lt;String&gt; value = map.get(key);
            System.out.println(key + " " + value);
        }
        System.out.println();
    }

    private Map&lt;Integer, List&lt;String&gt;&gt; createMap(
            int[] time, String[] direction) {
        Map&lt;Integer, List&lt;String&gt;&gt; map = new TreeMap&lt;&gt;();
        for (int i = 0; i &lt; time.length; i++) {
            Integer key = time[i];
            List&lt;String&gt; value = map.get(key);
            if (value == null) {
                value = new ArrayList&lt;&gt;();
            }
            value.add(direction[i]);
            map.put(key, value);
        }
        return map;
    }

    private List&lt;Visitor&gt; createList(
            Map&lt;Integer, List&lt;String&gt;&gt; map) {
        List&lt;Visitor&gt; visitors = new ArrayList&lt;&gt;();
        String defaultDirection = "In";
        Set&lt;Integer&gt; set = map.keySet();
        Iterator&lt;Integer&gt; iter = set.iterator();
        while (iter.hasNext()) {
            Integer key = iter.next();
            List&lt;String&gt; value = map.get(key);
            if (value.size() == 1) {
                String s = value.get(0);
                Visitor visitor = new Visitor(key, s);
                visitors.add(visitor);
                defaultDirection = s;
            } else {
                createVisitors(visitors, defaultDirection, 
                        key, value);
                defaultDirection = changeDefaultDirection(
                        defaultDirection);
                createVisitors(visitors, defaultDirection, 
                        key, value);
            }
        }
        return visitors;
    }

    private void createVisitors(List&lt;Visitor&gt; visitors, 
            String defaultDirection, Integer key, 
            List&lt;String&gt; value) {
        for (int i = 0; i &lt; value.size(); i++) {
            String s = value.get(i);
            if (s.equals(defaultDirection)) {
                Visitor visitor = new Visitor(key, s);
                visitors.add(visitor);
            }
        }
    }

    private String changeDefaultDirection(
            String defaultDirection) {
        return defaultDirection.equals("In") ? "Out" : "In";
    }

    public class Visitor {

        private final Integer time;

        private final String direction;

        public Visitor(Integer time, String direction) {
            this.time = time;
            this.direction = direction;
        }

        public int getTime() {
            return time;
        }

        public String getDirection() {
            return direction;
        }

        @Override
        public String toString() {
            StringBuilder builder = new StringBuilder();
            builder.append("Visitor [time=");
            builder.append(time);
            builder.append(", direction=");
            builder.append(direction);
            builder.append("]");
            return builder.toString();
        }

    }

}
</code></pre>
    </div>