<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I would handle the data source a little different than you:</p>

<p>In your code behind for the control, you can initialize in the following way:</p>

<pre><code>public ManagerWindow()
{
  InitializeComponent();

  _viewSource = new CollectionViewSource();
  _viewSource.Source = InitializeView();
  _viewSource.Filter += ViewSource_Filter;
  MainGrid.ItemsSource = _viewSource.View;
}

private void ViewSource_Filter(object sender, FilterEventArgs e)
{
  string text = txtSearch.Text;
  QueueData data = e.Item as QueueData;
  e.Accepted = string.IsNullOrWhiteSpace(text) || (data != null &amp;&amp; (data.ImageCode.Contains(text) || data.Product.Contains(text)));
}

CollectionViewSource _viewSource;
</code></pre>

<p>Where <code>InitializeView()</code> is a method defined by you, that must return a collection (<code>List&lt;QueueData&gt;</code>) or something like that. But as you probably know it can be set in many other ways.</p>

<p>Notice that the <code>DataContext</code> for the data grid is not set - only the <code>ItemsSource</code>.</p>

<p>The change event for the text box should then look like:</p>

<pre><code>private void TextBox_TextChanged(object sender, TextChangedEventArgs e)
{
  _viewSource.View.Refresh();
}
</code></pre>

<hr>

<p>The performance problem is mainly a render/layout-problem caused by <code>"Auto"</code> setting for the grid row containing the data grid, so in the xaml for the control you must remove the <code>ScrollViewer</code> and define the grid as follows:</p>

<pre><code>  &lt;Grid Background="Transparent" FocusManager.FocusedElement="{Binding ElementName=txtSearch}"&gt;
    &lt;Grid.RowDefinitions&gt;
      &lt;RowDefinition Height="Auto"&gt;&lt;/RowDefinition&gt;
      &lt;RowDefinition Height="*"&gt;&lt;/RowDefinition&gt;
    &lt;/Grid.RowDefinitions&gt;
    &lt;Grid.ColumnDefinitions&gt;
      &lt;ColumnDefinition Width="*"&gt;&lt;/ColumnDefinition&gt;
      &lt;ColumnDefinition Width="*"&gt;&lt;/ColumnDefinition&gt;
    &lt;/Grid.ColumnDefinitions&gt;
</code></pre>

<p>Notice the second row definition:</p>

<pre><code>&lt;RowDefinition Height="*"&gt;&lt;/RowDefinition&gt;
</code></pre>

<p>Setting <code>Height="*"</code> instead of <code>"Auto"</code> is important because it will eliminate the need for the outer <code>ScrollViewer</code> and speed up the calculations of the dimensions of the data grid, when rendering (You may set it to a static value, but not <code>"Auto"</code>)</p>

<hr>

<p>The data grid should then be defined as:</p>

<pre><code>    &lt;DataGrid Grid.Row="1" Grid.ColumnSpan="2" Name="MainGrid"
              ScrollViewer.VerticalScrollBarVisibility="Auto"
              ScrollViewer.HorizontalScrollBarVisibility="Auto"
              ScrollViewer.CanContentScroll="True"
              EnableRowVirtualization="True"
          Sorting="MainGrid_Sorting"
          SelectionChanged="MainGrid_SelectionChanged"
          MouseDoubleClick="MainGrid_MouseDoubleClick"
          AutoGenerateColumns="False"
              AlternationCount="2"
          AlternatingRowBackground="DimGray"
          Margin="0,0,0,0"&gt;
</code></pre>

<p>Notice the missing <code>Binding</code> for <code>ItemsSource</code>.</p>

<p>With these changes everything should work smoothly and efficiently.</p>

<p>You may want to experiment with <code>EnableRowVirtualization="True/False"</code> to see which state is most smooth.</p>

<hr>

<p>You should remove the column header style on every column because they are the same and then define it in the <code>UserControl.Resources</code> as:</p>

<pre><code>&lt;Style TargetType="DataGridColumnHeader"&gt;
  &lt;Setter Property="Background" Value="#FF666666" /&gt;
  &lt;Setter Property="VerticalAlignment" Value="Center" /&gt;
&lt;/Style&gt;
</code></pre>
    </div>