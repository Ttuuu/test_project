<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>if you follow the logic of the code that you have presented it does not matter whether you exit on the first error or not, after the first error the <code>result</code> variable will always return false, so there is no need to keep looping regardless of the value of <code>exitOnFirstError</code>  except if you want to keep validating rows.</p>

<p>Personally I would make this a void method That calls the <code>ValidateRow</code> method, but, and here is the big thing to keep in mind, the <code>ValidateRow()</code> method should be the one calling  <code>InvalidRows.Add( row );</code> for rows that are not valid</p>

<p>let's say that we don't change the return types of any of the methods listed here it would look like this:</p>

<pre><code>public bool ValidateBatch( IEnumerable&lt;DataRow&gt; batch, bool exitOnFirstError = false )
{
    //return early if we find no datarows
    if( batch == null || batch?.Count() == 0 ) 
    { 
        logger.Error( MSG_NO_DATAROWS ); 
        return false; 
    }
    bool result = true;

    foreach( DataRow row in batch )
    {
        if( !ValidateRow( row )  )
        {
            result = false;
            if( exitOnFirstError )
            {
                return result;
            }
        }  
    }
    return result;
}
</code></pre>

<p>I also took your code and formatted it according to common formatting standards for C#, you should not one line a multi statement if block, it makes it hard to read.</p>
    </div>