<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Names</strong></p>

<p>Using the name <code>list</code> for a variable is legal but usually avoided because it hides the <code>list</code> builtin. The name <code>lst</code> would be a better candidate.</p>

<p>The function name <code>comp</code> could be improved as well. Maybe <code>get_best_elements</code> (even though I am not fully convinced).</p>

<p><strong>Tests</strong></p>

<p>Before going further, it may be wise to add tests so that you can easily be sure that we do not break anything.</p>

<p>A proper solution would involve a unit-test framework but for the time being, we can go for the simple:</p>

<pre><code>TESTS = (
    ([], []),
    ([[1,'a']], [[1, 'a']]),
    ([[1,'a'], [1,'a'], [1,'a'], [1,'a']], [[1,'a'], [1,'a'], [1,'a'], [1,'a']]),
    ([[1,'a'], [1,'b'], [1,'c'], [1,'d']], [[1,'d'], [1,'c'], [1,'b'], [1,'a']]),
    ([[1,'a'],[3,'b'],[7,'c'],[6,'d'],[4,'e'],[1,'f'],[7,'g'],[4,'h'],[6,'i']], [[7, 'g'], [7, 'c']]),
    ([[1,'a'],[3,'b'],[7,'c'],[6,'d'],[4,'e'],[1,'f'],[4,'h'],[6,'i']], [[7, 'c']]),
)

for test_input, expected_output in TESTS:
    output = get_best_elements(test_input)
    assert output == expected_output
print("OK")
</code></pre>

<p><strong>Style</strong></p>

<p>Parenthesis are not required in the return statements.
Also, the temporary variable is not really required.</p>

<p><strong>List comprehension</strong></p>

<p>The <code>new_list</code> could be defined with a list comprehension.</p>

<pre><code>def get_best_elements(lst):
    lst.sort(reverse = True)
    new_lst = [lst[y] for y in range(1, len(lst)) if lst[0][0] &gt; lst[y][0]]
    return [x for x in lst if x not in new_lst]
</code></pre>

<p><strong>Loop like a native</strong></p>

<p>I highly recommend <a href="https://nedbatchelder.com/text/iter.html" rel="noreferrer">Ned Batchelder's talk "Loop like a native"</a> about iterators. One of the most simple take away is that whenever you're doing <code>range(len(lst))</code>, you can probably do things in a better way: more concise, clearer and more efficient.</p>

<p>In our case, we'd have something like:</p>

<pre><code>def get_best_elements(lst):
    lst.sort(reverse = True)
    new_lst = [e for e in lst if e[0] &lt; lst[0][0]]
    return [x for x in lst if x not in new_lst]
</code></pre>

<p><strong>Another approach</strong></p>

<p>The last list comprehension can be quite expensive because for each element <code>x</code>, you may perform a look-up in the list. This can lead to a <code>O(nÂ²)</code> behavior.</p>

<p>Instead of filtering out elements that do not correspond to the biggest number, we could just keep the one that do correspond to the biggest number.</p>

<pre><code>def get_best_elements(lst):
    if not lst:
        return []
    lst.sort(reverse = True)
    big_n = lst[0][0]
    return [x for x in lst if x[0] == big_n]
</code></pre>

<p><strong>Sort a smaller numbers of elements</strong></p>

<p>You could use <code>max</code> to get <code>big_n</code>.</p>

<p>Also, we could perform the sorting on the filtered list so that we have fewer elements to sort:</p>

<pre><code>def get_best_elements(lst):
    if not lst:
        return []
    big_n = max(lst)[0]
    return list(sorted((x for x in lst if x[0] == big_n), reverse=True))
</code></pre>
    </div>