<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The big thing I would do here is add some classes to make this more object oriented and easier to read and understand. When I have super complex code that I have trouble understanding and I want to refactor it for readability, I sit down with what the code is supposed to be doing and then write what I wish the code would look like to do that. From there, I start adding or changing whatever needs to happen in the code base to make the code I wish I had the code I have. Doing so with this code (assuming I understand it all correctly), the <code>call</code> method ended up becoming something like:</p>

<pre><code>  def call(document_content, first_document_content)
    latest_pages = pages_from document_content
    original_pages = pages_from first_document_content

    original_pages.zip(latest_pages).each do |original_page, latest_page|
      original_page.row_elements.each do |row_element|
        # BR1: If an element exists in the first JSON, and doesn't in the last,
        # then it's been deleted
        original_page.delete(row_element) unless latest_page[row_element]

        # BR2: If an element exists in both versions, but it's offset has
        # changed, then it's been updated.
        unless row_element.offset == latest_page[row_element].offset
          original_page.update(latest_page[row_element])
        end
      end
    end
  end
</code></pre>

<p>and now I just start going through and implementing the methods required to reach that, so first line in this method, I need to add <code>pages_from</code>:</p>

<pre><code>private
def pages_from(document)
  document.form_json['pages'].map { |page| Page.new(page) }
end
</code></pre>

<p>And that makes up the totality of that file, now I just need to start going through the rest of the method and adding the classes and methods on those classes to achieve this goal:</p>

<pre><code>class Row
  # expose the underlying data, so we can modify it later as needed
  attr_reader :row_element

  def initialize(row_element)
    @row_element = row_element
  end

  def uuid
    @row_element['componentUuid']
  end

  def offset
    @row_element['offset']
  end
end

class Page
  def initialize(page)
    @page = page
    # still not happy with this block, but overall the code is a lot nicer,
    # so it can stay, for now
    @row_elements = page['floating_components'].map do |fc|
      next unless fc['element_origin'] == 'pdf'

      Row.new(fc['field_rows'][0]['row_elements'][0])
    end.compact.group_by(&amp;:uuid).transform_values(&amp;:first)

    @fields_to_remove = []
    @fields_to_update = []
  end

  def [](row)
    @row_elements[row.uuid]
  end

  def row_elements
    return to_enum(:row_elements) unless block_given?

    @row_elements.each_value do |row|
      yield row
    end
  end

  def delete(row)
    @fields_to_remove &lt;&lt; row
  end

  def update(row)
    delete row

    @fields_to_update &lt;&lt; row
  end
end
</code></pre>

<p>Not being able to run some examples and make sure everything was working correctly and not having the full scope of everything going on, there's probably some issues with this code, but it should at least get you pointed in a direction or thought process to help clean it up some. As for the performance of the code, that's not my forte, but my general philosophy is to write legible code first and then optimize as needed to meet the business needs</p>
    </div>