<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Having the undo in the global controller object is fine.  It implies that the undo action is global.  I probably would have saved the state of the robot to the queue each time a command is received.  Then undo is just restoring the state to what it was at a previous time.  It also makes going back 'n' moves at a time much cheaper.</p>

<p>It is generally considered more "Pythonic" to try to execute the move in a try block and catch the resulting failure instead of having a function that tells you if the move is legal.  Alternatively you can use <code>hasattr()</code> to check if the function you want to call is an attribute of this particular object before you call it.  Raising an exception in Python is much cheaper than in some other languages and is often used if it doesn't obfuscate the code.</p>

<p>I would think this application is a good candidate for using Python's multiple inheritance by creating mix-in classes.  These are classes that can be inherited from but cannot be instantiated on their own (since they do not have an <code>__init__</code> method).  So a MovingRobot would inherit from Robot (which can be instantiated and supplies the undo functionality) and Mover (which supplies state information about position).  Similarly FlyingRobot would inherit from both Robot and Flyer.</p>
    </div>