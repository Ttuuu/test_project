<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Repetition</h3>

<p>I would write only one function to locate zeros:</p>

<pre><code>def locate_zeros(matrix: IntegerMatrix) -&gt; Iterable[Position]:
    """Given an NxM matrix find the positions that contain a zero."""
    for row_num, row in enumerate(matrix):
        for col_num, element in enumerate(row):
            if element == 0:
                yield (col_num, row_num)
</code></pre>

<p>And use it in <code>zero_out</code> like this:</p>

<pre><code>    if row_num in (x[1] for x in zeros_positions) or col_num in (x[0] for x in zeros_positions):
        matrix[row_num][col_num] = 0
</code></pre>

<h3>Type hints</h3>

<p>Given that you specifically mentioned Python 3.5 and that you already have something like type hints on your functions, I suggest you go all the way with <a href="http://mypy-lang.org/" rel="nofollow">mypy</a> compatible type hints.</p>

<pre><code>from typing import List, Any,  Iterable, Tuple

Position = Tuple(int, int)
IntegerMatrix = List[List[int]]

def locate_zeros(matrix: IntegerMatrix) -&gt; Iterable[Position]:

def zero_out(matrix: IntegerMatrix) -&gt; IntegerMatrix:
</code></pre>

<p>This way you can statically check your code has the correct types like in natively statically types languages and give the user much more detailed information on the types.</p>
    </div>