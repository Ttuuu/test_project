<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Worksheet functions were not designed for this. User-defined worksheet functions were not made a feature of Excel to go and fetch data online - in my humble opinion, this is a terrible abuse of UDF's.</p>

<p>A function like this should be part of the definition of a class module that defines an object responsible for this task, and wrapped with an interface, say <code>ITickerPriceProvider</code>:</p>

<pre><code>Public Function GetTickerPrice(ByVal ticker As String) As Double
End Function
</code></pre>

<p>Then your code moves into a class module with <code>Implements ITickerPriceProvider</code>, and the signature becomes this:</p>

<pre><code>Option Explicit
Implements ITickerPriceProvider

Private Function ITickerPriceProvider_GetTickerPrice(ByVal ticker As String) As Double
    'your code
End Function
</code></pre>

<p>What gives? Now you can get fancy and write a macro that looks like this:</p>

<pre><code>Public Sub UpdateTickerPrices()

    Dim provider As ITickerPriceProvider
    Set provider = New WebTickerPriceProvider

    Dim updater As TickerSheetUpdater
    Set updater = New TickerSheetUpdater

    updater.UpdateTickerPrices provider, TickerPricesSheet

End Sub
</code></pre>

<p>And the <code>TickerSheetUpdater.UpdateTickerPrices</code> method is where you go and implement the code that locates ticker strings (your worksheet must have a column with those, right?), fetches the prices for each one, and updates the worksheet.</p>

<p>This is a job for a macro, not a UDF.</p>

<p>As a bonus, the <code>TickerSheetUpdater</code> class can be unit-tested because the dependencies are under control - and now if somebody cuts the network cable, you can handle errors gracefully, instead of having 200 UDF calls blowing up one after another.</p>

<hr>

<p>As for the implementation itself, I don't see any glaring issues. I would have named <code>IE</code> something like <code>browser</code>, <code>URL</code> would have been <code>url</code>, and there would have been an <code>On Error GoTo CleanFail</code> statement at the top, and a <code>CleanExit</code> label to ensure resources get cleaned up whether or not an error occurs:</p>

<pre><code>Private Function ITickerPriceProvider_GetTickerPrice(ByVal ticker As String) As Double
    On Error GoTo CleanFail

    'implementation here

CleanExit:
    Set browser = Nothing
    Set pageData = Nothing
    Exit Function

CleanFail:
    'handle errors
    Resume CleanExit

End Function
</code></pre>

<p>Turning <code>ScreenUpdating</code> off isn't going to help much, at least not with a UDF approach - the function isn't updating any cell values, it <em>is</em> a cell value.</p>

<p>However I'd try to see if there wouldn't be a way to remove this:</p>

<pre><code>Application.Wait Now + TimeSerial(0, 0, 5)
</code></pre>

<p>...or add a comment that explains <em>why</em> it's needed, and <em>why</em> it needs to be a whole 5 seconds - especially given you've just waited for a specific <code>ReadyState</code> on your <code>IE</code> object:</p>

<pre><code> Do Until IE.ReadyState &gt;= 4
        DoEvents
 Loop
</code></pre>

<p>What's <code>4</code> anyway? Make an <code>Enum</code> for the possible values, and use it instead of hard-coding a value like this. Why do you need to wait 5 seconds <em>after</em> the browser gets into that <code>ReadyState</code>? Could you keep loop-waiting for a later state value? An enum would help understanding what's going on and why here.</p>
    </div>