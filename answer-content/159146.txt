<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Some excellent answers here, but just to show how powerful Python can be, consider this one line solution (using a few tricks):</p>

<pre><code>    def list_print(list_in):
        print ', '.join([{len(list_in)-1:'and '}.get(index, '')+str(item) for index, item in enumerate(list_in)])
</code></pre>

<p>Please note that this is <em>not in line</em> with Python coding principles, which prefer longer code that is clearer to read, but one of the things I love about the language, coming from a C/C++ background, is how much you can do with just a little code.</p>

<p>Also, note that the results in English make sense with lists of 3 or more.  With a list of 2, you will get <em>'first item, and second item'</em> which is probably not what you want in that case</p>

<p>The tricks:</p>

<ol>
<li>using the string <em>join()</em> method to combine the elements of a list</li>
<li>using a <em>dict</em> to differentiate in-line between several cases (namely, the last item on the list or <em>not</em> the last item)</li>
<li>using the dict <em>get()</em> method to elegantly cover all cases except the last one</li>
<li>using <em>list comprehension</em> to create a new list in-place</li>
<li>using the <em>enumerate()</em> method to give easy access to both the index and the content of an iterable </li>
</ol>

<p>Again, this wouldn't be the preferred solution, but it showcases some of the other functionality.  In practice, I would prefer Graipher's solution, which as it happens can also be reduced to a single line, if one is so inclined, and also doesn't suffer from the comma limitation.  The only thing I would change on his code is to explicitly typecast the list elements as strings, just in case someone passes in an int or float (or whatever else!) as one of the elements. As written, such a situation would cause a TypeError exception because you cannot concatenate str and int objects.</p>
    </div>