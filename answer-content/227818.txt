<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>To make it nicer for your reviewers you could post as a complete and
runnable example:</p>

<pre><code>package main

import "fmt"

...

func main() {
    input := []int{1, 2, 3}
    output := permute(input)
    fmt.Printf("Input: %v\nOutput:\n", input)
    for _, x := range output {
        fmt.Printf("  %v\n", x)
    }
}
</code></pre>

<hr>

<p>With that out of the way, I'd simplify <code>permute</code> a bit:</p>

<pre><code>func permute(nums []int) [][]int {
    return backtrack(nums, []int{}, make([]bool, len(nums)), [][]int{})
}
</code></pre>

<p>In <code>backtrack</code> I'd consider <code>return</code>ing early for the first case, that
lets you remove one level of indentation for the rest:</p>

<pre><code>func backtrack(nums []int, tmp []int, invalid_pos []bool, res [][]int) [][]int {
    if len(tmp) == len(nums) {
        tmp2 := make([]int, len(tmp))
        copy(tmp2, tmp)
        return append(res, tmp2)
    }
    ...
}
</code></pre>

<hr>

<p>Regarding your question:  Well, what happens if you remove the <code>copy</code>
call?</p>

<pre><code>0 go % go run perm.go
Input: [1 2 3]
Output:
  [0 0 0]
  [0 0 0]
  [0 0 0]
  [0 0 0]
  [0 0 0]
  [0 0 0]
</code></pre>

<p>Clearly it does something and you cannot remove it just like that.  It
also has nothing to do with capturing iteration variables, the only ones
you have here are <code>i</code> and <code>num</code> - both aren't even part of the <code>copy</code>
call, plus, you're not capturing anything, there's no <code>func() {...}</code>
declaration anywhere that even <em>could</em> capture variables.</p>

<p>Variable capturing and the (most common?) problem with it comes only if you have a construction like this:</p>

<pre><code>for i := ... {
    x := func() {
        foo(i)
    }
}
</code></pre>

<p>The <code>i</code> in the anonymous function is the one from the loop - and since it's always the same variable, all the created functions reference ... the same variable!  That <em>can</em> be confusing since people might expect that on each iteration of the loop we're capturing that one value that <code>i</code> currently has.  Go <em>could've</em> done that, but I'm guessing mostly for performance reasons that's not being done and you've to explicitly make it happen yourself:</p>

<pre><code>for i := ... {
    j := i
    x := func() {
        foo(j)
    }
}
</code></pre>

<p>Now <code>foo</code> gets called with all the different values of <code>i</code>.</p>

<hr>

<p>Okay so that's that, now I'd just recommend simplifying this algorithm
to get rid of <code>invalid_pos</code>, <code>tmp</code> and the <code>res</code> parameter and do it all
functionally and recursively.  I'm saying that because the code right
now is pretty complex for the problem and yet it doesn't do everything
upfront that it could, like preallocating the <code>res</code> array to the final
length, so it seems this is more of a learning exercise.</p>

<p>Start with the base cases, empty list and one element, then consider the
one element longer list:</p>

<pre><code>func permute2(nums []int) [][]int {
    if len(nums) &lt;= 1 {
        return [][]int{nums}
    }
    result := [][]int{}
    for i, x := range nums {
        ...
    }
    return result
}
</code></pre>

<p>Don't optimise to early for reusing things, that can also follow once
the algorithm is in its most simple form; clarity comes first.</p>

<p>Hint:  You can do it without <code>copy</code> or manually instantiating any
more slices via <code>[]int{}</code>, just check out
<a href="https://golang.org/pkg/builtin/#append" rel="nofollow noreferrer"><code>append</code></a> and how to do
<a href="https://tour.golang.org/moretypes/7" rel="nofollow noreferrer">subslices</a>.  Take particular care to not simply <code>append</code> slices together without considering how the underlying data is going to be shared (that's why <code>append([]int{}, &lt;slice here&gt;)</code> might be necessary to prevent the slice from being modified).</p>

<hr>

<p>As a spoiler:</p>

<blockquote class="spoiler">
  <p> </p><pre>func permute2(nums []int) [][]int {
     if len(nums) &lt;= 1 {
         return [][]int{nums}
     }
     result := [][]int{}
     for i, x := range nums {
         without := append(append([]int{}, nums[:i]...), nums[i+1:]...)
         for _, y := range permute2(without) {
             result = append(result, append([]int{x}, y...))
         }
     }
     return result
 }</pre>
</blockquote>
    </div>