<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Both suffer (equal amounts) from the problem that when you call them, the compiler has to go instantiate a new function from the template. The code all ends up inlined after optimization, but it <em>does</em> make more work for the compiler than something like</p>

<pre><code>#define NELEM(x) (sizeof(x) / sizeof (x)[0])
</code></pre>

<p>The benefit of <code>array_size_2</code> is that if you try to call it as</p>

<pre><code>int *p = nullptr;
std::vector&lt;int&gt; v;
size_t a = array_size_2(p);  // ERROR
size_t b = array_size_2(v);  // ERROR
</code></pre>

<p>the compiler will reject the call as ill-formed. Whereas if you do the same thing with <code>array_size_1</code> or <code>NELEM</code>, you'll just get for example <code>sizeof(int*) / sizeof(int)</code> or <code>sizeof(vector&lt;int&gt;) / sizeof(int)</code>, which isn't meaningful.</p>

<p>So <code>array_size_2</code> saves you from accidentally writing something meaningless. Especially in cases like</p>

<pre><code>int foo(int a[]) {
    return array_size_1(a);  // OOPS!
}
</code></pre>

<p>where <code>int a[]</code> is just syntactic sugar for <code>int *a</code> and there's no actual array in existence at all.</p>
    </div>