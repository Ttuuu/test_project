<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>A bit late to the party, but I spotted a few mistakes in this otherwise interesting exercise and I thought I would highlight them.</p>

<p>Trying to run the given code as-is results in crashes. Here's why.</p>

<p>First and foremost, <code>std::vector</code> iterators get invalidated whenever an element is erased from the vectors, unless the erasure happens at the vector's very end. <strong>Solution</strong>: replacing std::vector with a container that guarantees iterator validity over erasures is a must. To this end, <code>std::list</code> might be used.</p>

<p>Then, you must take into account the fact that the connection's slot destroyer lambda body executes when the lambda itself is invoked, not when it's constructed, therefore the iterator of the slot to be destroyed can't be taken from the end of the container within the lambda's body, because by the time the lambda is invoked, other slots might have been added or removed from the container. <strong>Solution</strong>: take the slot's iterator before constructing the connection object and capture it in the lambda.</p>

<p>Fixing that, makes the code work as expected.</p>

<p>I would also implement the templated method <code>connect(S&amp;&amp; slot, T* instance)</code> in terms of the non-templated one, so avoid duplicating code.</p>
    </div>