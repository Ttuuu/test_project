<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Some suggestions:</p>

<ul>
<li>Upper case names are by convention reserved for exported variables.</li>
<li><a href="https://mywiki.wooledge.org/Quotes" rel="nofollow noreferrer">Use More Quotes™</a>, <a href="https://mywiki.wooledge.org/Quotes#Expand_argument_lists" rel="nofollow noreferrer">especially around <code>$@</code></a></li>
<li><a href="https://mywiki.wooledge.org/BashFAQ/050" rel="nofollow noreferrer">Use arrays for constructing commands</a></li>
<li>Variables are by default declared in the global scope. It would be better to declare the variables in the function <code>local</code>.</li>
<li>Use <code>getopt</code> to parse options - the default pattern is a bit wonky but it's easier to deal with for complex cases.</li>
<li>You can use <code>readarray</code> to read .hidden into an array in a single command.</li>
<li>The <code>return</code>s are redundant.</li>
<li><code>in $@</code>, or more correctly <code>in "$@"</code>, is redundant. <code>for argument</code> does the same thing.</li>
<li>You don't need semicolons if you put <code>then</code> on the next line like you already do with <code>do</code>.</li>
<li>You shouldn't have to use index variables. For example, both times <code>$F</code> is used you can instead use <code>FILES[${#FILES[@]}]=…</code></li>
<li><code>$*</code> and its accomplice <code>${name[*]}</code> <a href="https://mywiki.wooledge.org/WordSplitting" rel="nofollow noreferrer">split every argument on <code>$IFS</code></a>, and is therefore extremely rarely useful. Use <code>$@</code> and <code>${name[@]}</code> instead.</li>
</ul>
    </div>