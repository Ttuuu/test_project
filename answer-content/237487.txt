<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Design</strong><br></p>

<p>This is stage 1 of a project and there will be further stages with (presumably)  new requirements coming in later stages.</p>

<p>One of the things to think about when reviewing a design is how well it lends itself to extensions in the requirements.</p>

<p>So let's think about some possible additional requirements for this project</p>

<p>1) Add the knight and pawn pieces <br>
2) Allow for other pieces on the board (which will block moves)</p>

<p>So how would we fit these requirements into the current design?</p>

<p>Currently, ascertaining the valid moves is split between two classes</p>

<ul>
<li>The board, which asks the piece 'can you move here' for each location on the board.</li>
<li>The piece, which reports whether or not it can move there.</li>
</ul>

<p>In the current implementation, the code for checking a particular kind of move (diagonal, horizontal, vertical) is in the base Piece class. </p>

<p><strong>Add the Knight and Pawn</strong> <br>
We add the two new sub classes.  The pawn, especially, brings the current shape of checking each possible location and checking if it is valid into question. A pawn can move to one of three, maybe four places (one of two if we are ignoring other pieces). Checking every possible location to see if it is valid seems very wasteful.  The knight has a relatively small number of possible valid moves and the check for these is unrelated to the existing diagonal, horizontal, vertical checks.</p>

<p>We could just put the check in the Knight sub-class, say,  <em>IsKnightMove()</em>. 
This works but the irrelevant <em>IsDiagonalMove()</em>, <em>IsVerticalMove()</em>, <em>IsHorizontalMove()</em> routines in the base class sort of niggles. <br></p>

<p>As does the check every possible move to see if it is valid.</p>

<p>Say we have an initial chess board set up and want to find the valid moves for each piece.  Of the back-line pieces, only the knight can move, but we check every possible location for each piece and there is no way of pruning the checks because the possible moves are piece dependent.</p>

<p>So how can we change the shape to fix some of the problems? <br></p>

<p>If we make each piece responsible for generating a list of places to which it can move (passing in the current board state - not used yet but we reckon, <a href="https://en.wikipedia.org/wiki/You_aren%27t_gonna_need_it" rel="nofollow noreferrer">YAGNI</a> aside, that it is going to be needed) We can use our knowledge of how the pieces move to generate the possible moves and, if later needed, to adjust the checks based upon other pieces on the board. </p>

<pre><code>public interface IChessPiece
{
    BoardLocation CurrentLocation { get; set; }
    ChessPieceType Type { get; }
    IEnumerable&lt;Move&gt; GetValidMoves(ChessBoard board);
}

public class BoardLocation
{
    private const int BoardSize = 8;

    private static bool IsInRange(int pos)
    {
        return (pos &gt;= 1) &amp;&amp; (pos &lt;= BoardSize);
    }

    public BoardLocation(int row, int col)
    {
        if (!IsInRange(row))
        {
            throw new ArgumentOutOfRangeException("row");
        }
        if (!IsInRange(col))
        {
            throw new ArgumentOutOfRangeException("col");
        }
        Row = row;
        Column = col;
    }
    public int Row { get; }
    public int Column { get; }
}

public class Move
{
    public Move(IChessPiece piece, BoardLocation endingLocation)
    {
        Piece = piece ?? throw new ArgumentNullException("piece");
        EndingLocation = endingLocation ?? throw new ArgumentNullException("endingLocation");
    }
    public IChessPiece Piece { get; }
    public BoardLocation EndingLocation { get; }
}
</code></pre>

<p><strong>NOTES:<br></strong>
When writing code we can hit problems with <em>how much is enough</em> (YAGNI exists for a reason).  In the above, the board location is just a simple container for the row and column positions.  It could also be responsible for formatting the position for display e.g. e4 or we could leave this up to an external formatter so that we could use the older notation (KP4).  It could also be responsible for parsing an input string, or we could leave this to another class. The <em>Move</em> class could be omitted (just return a list of BoardLocations) but we may want to know the piece/move combinations.</p>

<p>In a lot of cases it comes down to a Matter of Personal Preference (MoPP (tm)).</p>

<p><strong>Finding valid moves</strong><br>
With this shape we can use knowledge of how each piece moves to generate the possible moves (optionally using the board state).  A pawn on d2 can now move to d3 or d4 (if nothing is in the way) or possibly take on c3 or e3 if there is something there or is taking <em>en passant</em></p>

<p>A knight can generate the 2 to 6 possible moves it can make</p>

<p>The King, Queen, Rook and Bishop can all generate their own possible moves in their respective classes.</p>

<p>Shared functionality?  The code for generating moves / checking if a move is valid can be shared but doesn't need to be in the base class, it could be in a shared utility class (again a MoPP, I don't like cluttering up a base class with code that is not used by all the sub classes).</p>

<pre><code>public abstract class ChessPiece : IChessPiece
{
    private BoardLocation _currentLocation;
    public BoardLocation CurrentLocation
    {
        get =&gt; _currentLocation;
        set =&gt; _currentLocation = value ?? throw new ArgumentNullException();
    }
    public abstract ChessPieceType Type { get; }
    public abstract IEnumerable&lt;Move&gt; GetValidMoves(ChessBoard board);
}

public class King : ChessPiece
{
    private readonly static int[][] MoveTemplates = new int[][]
    {
      new [] { 1, -1 },
      new [] { 1, 0 },
      new [] { 1, 1 },
      new [] { 0, -1 },
      new [] { 0, 1 },
      new [] { -1, -1 },
      new [] { -1, 0 },
      new [] { -1, 1 },

    };

    public override ChessPieceType Type =&gt; ChessPieceType.King;

    public override IEnumerable&lt;Move&gt; GetValidMoves(ChessBoard board)
    {
        return ChessMoveUtilities.GetMoves(board, this, 1, MoveTemplates);
    }
}

public class Queen : ChessPiece
{
    private readonly static int[][] MoveTemplates = new int[][]
    {
      new [] { 1, -1 },
      new [] { 1, 0 },
      new [] { 1, 1 },
      new [] { 0, -1 },
      new [] { 0, 1 },
      new [] { -1, -1 },
      new [] { -1, 0 },
      new [] { -1, 1 },

    };

    public override ChessPieceType Type =&gt; ChessPieceType.King;

    public override IEnumerable&lt;Move&gt; GetValidMoves(ChessBoard board)
    {
        return ChessMoveUtilities.GetMoves(board, this, board.Size, MoveTemplates);
    }
}

internal static class ChessMoveUtilities
{
    private static bool IsValid(ChessBoard board, BoardLocation current, int deltaRow, int deltaCol, out BoardLocation location)
    {
        location = null;
        var newRow = current.Row + deltaRow;
        if ((newRow &lt;= 0) ||(newRow &gt; board.Size)) return false;

        var newCol = current.Column + deltaCol;
        if ((newCol &lt;=0) || (newCol &gt; board.Size)) return false;

        location = new BoardLocation(newRow, newCol);
        return true;
    }

    internal static IEnumerable&lt;Move&gt; GetMoves(ChessBoard board, IChessPiece piece, int range, IEnumerable&lt;int[]&gt; mults)
    {
        if (board == null) throw new ArgumentNullException("board");
        if (piece == null) throw new ArgumentNullException("piece");
        if (range &lt; 1) throw new ArgumentOutOfRangeException("range");
        if (mults == null || !mults.Any()) throw new ArgumentException("mults");

        var ret = new List&lt;Move&gt;();

        foreach( var mult in mults)
        {
            for (var radius = 1; radius &lt;= range; radius++)
            {

                var deltaX = radius * mult[0];
                var deltaY = radius * mult[1];
                if(IsValid(board, piece.CurrentLocation, deltaX, deltaY, out BoardLocation newLocation))
                {
                    ret.Add(new Move (piece, newLocation));
                }
                else
                {
                    break;
                }
            }
        }
        return ret;

    }

}
</code></pre>

<p><strong>Notes:</strong><br>
It is possible (at the moment) to replace the individual classes for King, Queen, Rook and Bishop with instances of a common base class which takes in the ChessPieceType and MoveTemplates as parameters, but knowing about chess and thinking ahead, if we add in Castling and 'not moving into check' rules then the King and Rook need to be separate classes and merging the Queen and Bishop seems like overkill.</p>
    </div>