<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>pro</h2>

<ul>
<li>you respect Java naming conventions</li>
<li>you separate different parts in methods</li>
</ul>

<h2>contra</h2>

<h3>use of static methods</h3>

<p>Java is an <em>object oriented language</em> so the use of objects is encouraged.</p>

<p>in your code you'd need one more method to move the code from <code>main</code> to and then you would call that method on a new instance of your class:</p>

<pre><code>public static void main(String[] args) throws InterruptedException {
   new GameOfLife().run();
}

private void run() throws InterruptedException {
    for (int i = 0; i &lt; BOARD_HEIGHT; i++) {
        for (int j = 0; j &lt; BOARD_HEIGHT; j++) {
            board[i][j] = Cell.DEAD;
        }
    }
 //...
</code></pre>

<p>then you should remove the <code>static</code> key word from all methods except <code>main</code>. You could (and should) also  remove the <code>static</code> key word from most of your variables, except the constants.</p>

<h3>enums used in switch</h3>

<p>In Java enums are full featured class. That means it is possible benefit from polymorphism.</p>

<p>In your <code>printBoard()</code> method you have this:</p>

<blockquote>
<pre><code>           switch (board[i][j]) {
            case DEAD:
                System.out.print(DEAD_CELL_SYMBOL);
                break;
            case ALIVE:
                System.out.print(ALIVE_CELL_SYMBOL);
                break;
</code></pre>
</blockquote>

<p>when we change the enum <code>Cell</code> to this:</p>

<pre><code>private enum Cell {
    DEAD(DEAD_CELL_SYMBOL), ALIVE(ALIVE_CELL_SYMBOL);
    private final String symbol;
    Cell(String symbol){
      this.symbol = symbol;
    }
    String getSymbol(){
      return symbol;
    }
}
</code></pre>

<p>the code in <code>printBoard</code> would change to this:</p>

<pre><code>System.out.print(board[i][j].getSymbol()); // that replaces the whole switch!
</code></pre>

<hr>

<p>something similar is possible for the calculation of the next state.</p>

<p>you have a rather complicated list of <code>if</code>statements:</p>

<blockquote>
<pre><code>  if (liveNeighbours &lt; 2 &amp;&amp; boardArg[x][y] == Cell.ALIVE)
        return Cell.DEAD;
    else if ((liveNeighbours == 2 || liveNeighbours == 3) &amp;&amp; boardArg[x][y] == Cell.ALIVE)
        return Cell.ALIVE;
    else if (liveNeighbours &gt; 3 &amp;&amp; boardArg[x][y] == Cell.ALIVE)
        return Cell.DEAD;
    else if (boardArg[x][y] == Cell.DEAD &amp;&amp; liveNeighbours == 3)
        return Cell.ALIVE;
    else
        return Cell.DEAD;
</code></pre>
</blockquote>

<p>if you have a closer look at it this splits up in two parts:</p>

<ul>
<li>the cell is currently dead</li>
<li>the cell is currently alive</li>
</ul>

<p>this is perfectly eligible to be moved into the <code>Cell</code> enum since this removes one of the if cases.</p>

<p>the enum would change to this:</p>

<pre><code>private enum Cell {
    DEAD(DEAD_CELL_SYMBOL){
      @Override 
      Cell getNext(int liveNeigbours){
        return liveNeighbours == 3? ALIFE:DEAD; 
      }
    }, 
    ALIVE(ALIVE_CELL_SYMBOL){
      @Override 
      Cell getNext(int liveNeigbours){
        return liveNeighbours == 2|| liveNeighbours == 3? ALIFE:DEAD; 
      }
    };
    private final String symbol;
    Cell(String symbol){
      this.symbol = symbol;
    }
    abstract Cell getNext(int liveNeigbours); 
    String getSymbol(){
      return symbol;
    }
}
</code></pre>

<p>the code in <code>changeCell</code> would change to this:</p>

<pre><code> return boardArg[x][y].getNext(liveNeigbours); // replaces all the `if`s
</code></pre>
    </div>