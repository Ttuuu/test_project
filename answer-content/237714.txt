<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>As @JanKuiken mentioned, your idea is probably clever, but I can't understand what your code does either! Please add it to the question if possible!</p>

<ul>
<li><p>You need more spaces in your code!</p></li>
<li><p>Prefer <code>+=</code> and <code>-=</code> operators as they are more compact than assignments such as <code>x = x + 1</code>.</p></li>
<li><p><code>for variable in range(0, end)</code> is not necessary as <code>range</code> starts the sequence with 0 by default.</p></li>
<li><p>Use meaningful variable names</p></li>
<li><p>The variable <code>y</code> is declared unnecessarily.</p></li>
</ul>

<pre class="lang-py prettyprint-override"><code>a = 1
c = 0
z = 0
x = 1
k = 1
</code></pre>

<ul>
<li>The above part looks pretty bad. Change it to the below code</li>
</ul>

<pre class="lang-py prettyprint-override"><code>c = z = 0
a = x = k = 1
</code></pre>

<ul>
<li><p>The variable <code>f</code> outside the <code>for</code> loop is conflicting with the <code>f</code> inside the for loop. You can remove the use of <code>f</code> with <code>for b in range(math.ceil(row / 2)):</code></p></li>
<li><p><code>lis = [[0] * row for j in range(row)]</code> is faster!</p></li>
<li><p>To print the array, use</p></li>
</ul>

<pre class="lang-py prettyprint-override"><code>for i in lis: # Faster and smaller!
    print(*i, sep='\t')
</code></pre>

<p>Here's a glimpse of how your final code might look like:</p>

<pre class="lang-py prettyprint-override"><code>import math

row = int(input("Input number := "))

lis = [[0] * row for j in range(row)]

c = z = 0
a = x = k = 1

for b in range(math.ceil(row / 2)):
    if b == k:
        row -= 1
        x += 1
        z += 1
        k += 1

    for c in range(z, row):
        lis[b][c] = a
        a += 1

    for d in range(x, row):
        lis[d][row-1] = a
        a += 1

    for e in range(row-1, z, -1):
        lis[row-1][e-1] = a
        a += 1

    for f in range(row-2, z, -1):
        lis[f][z] = a
        a += 1

for i in lis:
    print(*i, sep='\t')
</code></pre>

<p>Here's how I'd have approached this problem:</p>

<pre class="lang-py prettyprint-override"><code>n = int(input('Enter the size of the grid: '))
result = [[0] * n for _ in range(n)]

# Ending points
ei, ej = n // 2, (n - 1) // 2

# 0: RIGHT, 1: DOWN, 2: LEFT, 3: UP
orient = 0

def fill(i: int, j: int, di: int, dj: int, val: int) -&gt; tuple:
    """
    'i' is the current row index
    'j' is the current column index
    'di' is the direction of the row (1: UP, -1: DOWN)
    'dj' is the direction of the column (1: RIGHT, -1: LEFT)
    'val' is the next value in the spiral
    """

    while 0 &lt;= i + di &lt; n and 0 &lt;= j + dj &lt; n:
        if result[i + di][j + dj] != 0:
            break

        i += di
        j += dj

        result[i][j] = val
        val += 1

    return i, j, val

# 'j' is -1 because the (0, 0) is yet to be filled
i, j = 0, -1
val = 1

while (i, j) != (ei, ej):
    if orient == 0: i, j, val = fill(i, j, 0, 1, val)
    if orient == 1: i, j, val = fill(i, j, 1, 0, val)
    if orient == 2: i, j, val = fill(i, j, 0, -1, val)
    if orient == 3: i, j, val = fill(i, j, -1, 0, val)

    orient = (orient + 1) % 4

for i in result:
    print(*i, sep='\t')
</code></pre>
    </div>