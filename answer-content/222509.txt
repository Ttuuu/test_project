<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Don't import the standard namespace</h1>
<p>Namespace <code>std</code> is a large, and growing, namespace.  Do you know every identifier in it?  Including the ones to be defined in C++20 and beyond?  Bringing all its names into the global namespace not only eliminates the benefits of using namespaces, but also has the potential to silently and subtly change the meaning of your program in future (e.g. by supplying an unambiguously better match for one of your function calls).</p>
<p>It's an especially bad practice in a header file, as now you're inflicting the breakage on <em>every single user</em> of that header file, with no way to correct it.</p>
<h1>Syntax errors</h1>
<p>This doesn't compile:</p>
<blockquote>
<pre><code>class BST {
    void BST::insert(Packet&amp; packet);
    void BST::insert(Node* &amp;p, Node *newNode);
};
</code></pre>
</blockquote>
<p>Remove the extra qualification from the members.</p>
<h1>Self-initialization</h1>
<p>It's useless to initialize <code>packet</code> using its own (uninitialized) value here:</p>
<blockquote>
<pre><code>Node() : packet(packet), rlink(nullptr), llink(nullptr) {}
</code></pre>
</blockquote>
<h1>Memory leak</h1>
<p>I'm not sure how you exercised the test program, but when I ran it with Valgrind, it immediately told me about this leak:</p>
<pre class="lang-none prettyprint-override"><code>==31705== HEAP SUMMARY:
==31705==     in use at exit: 144 bytes in 6 blocks
==31705==   total heap usage: 20 allocs, 14 frees, 74,208 bytes allocated
==31705== 
==31705== 144 (24 direct, 120 indirect) bytes in 1 blocks are definitely lost in loss record 6 of 6
==31705==    at 0x4835DEF: operator new(unsigned long) (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==31705==    by 0x10A276: BST::insert(Packet&amp;) (222481.cpp:54)
==31705==    by 0x10A744: main (222481.cpp:104)
</code></pre>
<p>If we're owning raw pointers, we need to be absolutely sure every <code>new</code> is paired with exactly one <code>delete</code>.  It's much better to use the smart pointers provided in <code>&lt;memory&gt;</code> than to try to do this on our own.</p>
<h1>Encapsulation</h1>
<p><code>Node</code> isn't part of the public interface.  If we make it a private struct within <code>BST</code>, then <code>BST</code> gets full access (not needing a <code>friend</code> declaration), but no other code does.  That's what we really want.</p>
<h1>Flexibility</h1>
<p><code>preorderTraversal()</code> hard-codes the action to take for each node (printing it).  What we want is to use the <em>Visitor pattern</em>, where we pass the action as a parameter to the call.</p>
<h1>Ease of use</h1>
<p>We've made the interface unnecessarily hard to use, by insisting that packets are passed by reference.  This means that the calling code is obliged to ensure that every packet outlives the tree.  If packets could be copied/moved to the tree, then it would be much easier for other code to use it.</p>
<h1>Clean output</h1>
<p>Is there any reason not to end the output with a newline?  It's very annoying when commands leave the next shell prompt dangling halfway across the terminal.</p>
<h1>Portability</h1>
<p>Don't use <code>std::system()</code> if you can avoid it:</p>
<pre class="lang-none prettyprint-override"><code>sh: 1: pause: not found
</code></pre>
<p>Even if such a program was present in my search path, how do you know what function it performs?  I'm guessing it's a program that waits forever (like <code>sleep inf</code> on a GNU system).  That sounds like a real obstruction to using the test (e.g. it will prevent <code>make test</code> from ever completing successfully).  Is that really what's desired?</p>
    </div>