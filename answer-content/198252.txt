<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You have to find out where the slow part is before you can speed it up. Just by looking at it, I would say it is either this part where you load the whole file into memory:</p>

<pre><code>$Validate = Get-Content -Path $File
</code></pre>

<p>Or it's this part where you scan through the in-memory array:</p>

<pre><code>$Scriptdone = $Validate | Where-Object {$_ -match $Scriptcompletedsuccess}
$Updatedone = $Validate | where-object {$_ -match $Updatecomplete}
$Failed = $Validate | Where-Object {$_ -match $FailedValidaton}
</code></pre>

<p>Or maybe both contribute to the slowness.</p>

<p>You should do some experiments to determine which part is slow. You could for instance comment out the <code>Get-Content</code> line, and just load in one of the files once at the beginning. Does that speed it up?</p>

<p>You can also try commenting out the scanning lines. Does that speed it up?</p>

<p>An observation:</p>

<p><code>$Scriptdone</code>, <code>$Updatedone</code>, <code>$Failed</code> appear to be mutually exclusive. You don't need to find <code>$Scriptdone</code> if <code>$Failed</code> is true, for instance. You could restructure your code like this to remove the redundant processing:</p>

<pre><code>$Failed = $Validate | Where-Object {$_ -match $FailedValidaton}

if($Failed){
    # ...
}
else {
    $Scriptdone = $Validate | Where-Object {$_ -match $Scriptcompletedsuccess}

    if($Scriptdone){
        #...
    }
    else {
        $Updatedone = $Validate | where-object {$_ -match $Updatecomplete}

        if($Updatedone){
            # ...
        }
        else {
            # ...
        }
    }
}
</code></pre>

<p>Some questions: </p>

<ul>
<li><p>Where do the lines you are looking for appear in the files? Can they be anywhere, or are they at some particular place (the beginning or the end for instance)? </p></li>
<li><p>How big are the files?</p></li>
</ul>

<p><strong>Edit:</strong></p>

<p>Based on the answers to those questions (see the comments), I have to say I don't understand why it is slow.</p>

<p>I don't think a Get-Content on 100 4MB files should take any time at all. I am sceptical that it is the cause. Since I don't know what what the source of the slowness is, I can't really suggest much except to do more experimentation to work out what it is.</p>

<p>I can just throw some random ideas out there.</p>

<ul>
<li><p>Try using the -Raw switch on the Get-Content to load the whole in one chunk:</p>

<p><code>$Validate = Get-Content -Path $File -Raw</code></p>

<p><code>$Scriptdone = $Validate -match $Scriptcompletedsuccess</code></p></li>
<li><p>Try using Select-String to search through the files:</p>

<p>Note: Delete the Get-Content line for this idea.</p>

<p><code>$Scriptdone = Select-String $Scriptcompletedsuccess $File | | Select-Object -First 1</code></p>

<p>The <code>Select-Object -First 1</code> is optional, but it should speed things up because the search will stop as soon as the first match is found.</p></li>
<li><p>My last idea is to try simplifying the regular expressions, just as an experiment. Sometimes some regular expressions can be slow. I don't think that should be the case with yours, but you never know.</p></li>
</ul>

<p>Ultimately you have to track down the source of the slowness before you can fix the problem.</p>
    </div>