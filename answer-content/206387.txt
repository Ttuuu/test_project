<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>My first time here providing code review on stackexchange. I randomly clicked a link and arrived here. Anyway, here's how I'd improve your code:</p>

<pre class="lang-python prettyprint-override"><code>#!/usr/bin/env python

import datetime

DATE_FORMAT = "%d/%m/%y"
DATE_FORMAT_FOR_HUMANS = "DD/MM/YY"
TIME_FORMAT = "%H:%M:%S"
TIME_FORMAT_FOR_HUMANS = "Hour:Minute:Second"


def prompt_for_user_input():
    return int(
        input(
            """Please choose one of these options below and type it in the prompt:
1 - To know the date ({DATE_FORMAT_FOR_HUMANS})
2 - To know the time ({TIME_FORMAT_FOR_HUMANS})
3 - To know both date and time. ({DATE_FORMAT_FOR_HUMANS} {TIME_FORMAT_FOR_HUMANS})
"""
        )
    )


def print_datetime_from_input(user_input, datetime_value):
    formatted_date = get_formatted_date(datetime_value)
    formatted_time = get_formatted_time(datetime_value)

    if user_input == 1:
        print(formatted_date)
    elif user_input == 2:
        print(formatted_time)
    elif user_input == 3:
        print(formatted_date, formatted_time)
    else:
        print("You didn't type in 1, 2 or 3!")


def get_formatted_time(datetime_value):
    return datetime_value.strftime(TIME_FORMAT)


def get_formatted_date(datetime_value):
    return datetime_value.strftime(DATE_FORMAT)


def main():
    now = datetime.datetime.now()

    print("Welcome to Date and Time!")

    user_input = prompt_for_user_input()
    print_datetime_from_input(user_input, now)


if __name__ == "__main__":
    main()
</code></pre>

<p>And here's why:</p>

<ul>
<li>It's good practice to separate logic into smaller functions as it makes it easier to run tests against smaller parts of a system. For the above, I could have wrote three separate tests, one that ensures that for a given user input, the right date gets displayed. Another test for the the formatting of the date and time, another one for the main execution. </li>
</ul>

<p>If you're curious about tests, I recommend you to search online <em>why do we write unit tests</em> and <em>how to write tests in python</em>. This helped me a lot in writing better code.</p>

<ul>
<li>Separating into smaller function helps for reusability. In the given example, I tried to separate the logic from the user input and the display.</li>
<li>I used an IDE to auto indent and format. The above follows PEP8.</li>
<li>I extracted the formats into <code>DATE_FORMAT</code> and <code>TIME_FORMAT</code>. Again, we are not reusing anything, but imagine you'd like to reuse the formats somewhere else. It also makes it easier to change the formats as you only need to change one line to see a different result.</li>
<li>I've split the input into multi line string which makes it easier for readability. I also moved the displayed format for the user beside the format used by the code to display it, this way, if you change one of the formats, you can update the prompt for the user more easily.</li>
<li>I've added a <code>main</code> function and a <code>if __name__ == "__main__":</code> condition to call main. In this case, it will execute the main function if the script is invoked directly. Imagine your script is called <code>ask_for_time.py</code>, you could now <code>import ask_for_time.DATE_FORMAT</code> and the <code>main</code> execution won't be executed on import time.</li>
<li>The first line <code>#!/usr/bin/env python</code> is called a shebang, it's used to tell the shell what to use to execute the script in case it is invoked directly (example: <code>./ask_for_time.py</code> instead of <code>python ask_for_time.py</code>.</li>
</ul>

<p>You should always try to use the <a href="https://en.wikipedia.org/wiki/Don%27t_repeat_yourself" rel="nofollow noreferrer">DRY principle</a>.</p>

<p>For the datetime formatting, you can refer to the following documentation: <a href="http://strftime.org/" rel="nofollow noreferrer">http://strftime.org/</a></p>

<p>As an exercise, I suggest you to try and write unit tests to make sure the code you write does what you intend it to do.
Good luck and have fun learning python ‚úåüèª</p>
    </div>