<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>All your code could be rewritten as:</p>

<pre><code>from numpy import random
from scipy.spatial import distance

def closest_node(node, nodes):
    closest_index = distance.cdist([node], nodes).argmin()
    return nodes[closest_index]

a = random.randint(1000, size=(50000, 2))

some_pt = (1, 2)

closest_node(some_pt, a)
</code></pre>

<hr>

<p>You can just write <code>randint(1000)</code> instead of <code>randint(0, 1000)</code>, the documentation of <a href="http://docs.scipy.org/doc/numpy/reference/generated/numpy.random.randint.html" rel="noreferrer"><code>randint</code></a> says:</p>

<blockquote>
  <p>If <code>high</code> is <code>None</code> (the default), then results are from <code>[0, low)</code>.</p>
</blockquote>

<p>You can use the <code>size</code> argument to <code>randint</code> instead of the loop and two function calls. So:</p>

<pre><code>a = []
for x in range(50000):
    a.append((np.random.randint(0,1000),np.random.randint(0,1000)))
</code></pre>

<p>Becomes:</p>

<pre><code>a = np.random.randint(1000, size=(50000, 2))
</code></pre>

<p>It's also much faster (twenty times faster in my tests).</p>

<hr>

<p>More importantly, <code>scipy</code> has the <code>scipy.spatial.distance</code> module that contains the <a href="http://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.distance.cdist.html#scipy.spatial.distance.cdist" rel="noreferrer"><code>cdist</code></a> function:</p>

<blockquote>
  <p><code>cdist(XA, XB, metric='euclidean', p=2, V=None, VI=None, w=None)</code></p>
  
  <p>Computes distance between each pair of the two collections of inputs.</p>
</blockquote>

<p>So calculating the <code>distance</code> in a loop is no longer needed.</p>

<p>You use the for loop also to find the position of the minimum, but this can be done with the <a href="http://docs.scipy.org/doc/numpy/reference/generated/numpy.ndarray.argmin.html" rel="noreferrer"><code>argmin</code></a> method of the <code>ndarray</code> object.</p>

<p>Therefore, your <code>closest_node</code> function can be defined simply as:</p>

<pre><code>from scipy.spatial.distance import cdist

def closest_node(node, nodes):
    return nodes[cdist([node], nodes).argmin()]
</code></pre>

<hr>

<p>I've compared the execution times of all the <code>closest_node</code> functions defined in this question:</p>

<pre><code>Original:
1 loop, best of 3: 1.01 sec per loop

Jaime v1:
100 loops, best of 3: 3.32 msec per loop

Jaime v2:
1000 loops, best of 3: 1.62 msec per loop

Mine:
100 loops, best of 3: 2.07 msec per loop
</code></pre>

<p>All vectorized functions perform hundreds of times faster than the original solution.</p>

<p><code>cdist</code> is outperformed only by the second function by Jaime, but only slightly.
Certainly <code>cdist</code> is the simplest.</p>
    </div>