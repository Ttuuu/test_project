<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The way you have divided the problem into subproblems seems fine, so I'll comment on the way you have solved each subproblem.</p>

<ul>
<li><p><code>toDigits</code>: With the strategy of using <code>show</code> to generate a string and then convert each element in that string back to a number, you could also use <code>read :: Read a =&gt; String -&gt; a</code> which takes a string (remember that <code>String</code> is an alias for <code>[Char]</code>, so <code>[c]</code> is a string with one character in it) and parses and returns a <em><code>Read a =&gt; a</code></em> which in this case is <code>Integer</code> (inferred from the type signature).</p>

<pre><code>toDigits :: Integer -&gt; [Integer]
toDigits
  | n &gt; 0 = map (\c -&gt; read [c]) (show n)
  | otherwise = []
</code></pre>

<p>Even though the function becomes less robust, I might still move the error handling of non-positive numbers out of it and handle errors earlier in the chain of function calls. This might look like:</p>

<pre><code>toDigits :: Integer -&gt; [Integer]
toDigits n = map (\c -&gt; read [c]) (show n)
</code></pre>

<p>A fancy name for the function <code>\c -&gt; [c]</code> is <code>return</code>. Doing a few transformations this function could look like:</p>

<pre><code>toDigits n = map (\c -&gt; read [c]) (show n)
toDigits n = map (\c -&gt; read (return c)) (show n)
toDigits n = map (\c -&gt; (read . return) c) (show n)
toDigits n = map (read . return) (show n)
toDigits = map (read . return) . show
</code></pre>

<p>with a final result of:</p>

<pre><code>toDigits :: Integer -&gt; [Integer]
toDigits = map (read . return) . show
</code></pre>

<p>Another strategy is to recursively remove the last digit from <code>n</code> using integer modulo / division. This has the peculiar side-effect that you'll generate the list backwards (because you start by adding the least significant digit). But since this is what you wanted after all, you're just saving a <code>reverse</code> here:</p>

<pre><code>toDigitsRev :: Integer -&gt; [Integer]
toDigitsRev n
  | n &lt;= 0 = []
  | otherwise = (n `rem` 10) : toDigits' (n `quot` 10)
</code></pre>

<p>Here, <code>rem</code> is remainder and <code>quot</code> is integer division. There's <code>mod</code> and <code>div</code>, but they only differ for negative integers. I like this solution better because converting something to <code>String</code> and then back seems a bit screwy. Still, it's very readable.</p>

<p>Another thing you could do here is to remove explicit recursion by using a higher-order function. In this case it might be <code>unfoldr :: (b -&gt; Maybe (a, b)) -&gt; b -&gt; [a]</code> which produces a list of values (the digits) by feeding an input (<code>n</code>) to a function again and again with one digit less each time.</p>

<pre><code>import Data.List (unfoldr)
import Data.Tuple (swap)

toDigitsRev :: Integer -&gt; [Integer]
toDigitsRev n = unfoldr next n
  where
    next 0 = Nothing
    next n = Just (swap (n `divMod` 10))
</code></pre>

<p>For example, <code>12345 `divMod` 10</code> produces both the division and the remainder, <code>(1234, 5)</code>. Unfortunately, <code>unfoldr</code> expects the digit to be in the first part (with type <em><code>a</code></em>) and the next <code>n</code> to be in the second part (with type <em><code>b</code></em>), so we <code>swap</code> the result into <code>(5, 1234)</code>. A final improvement we can do here is to eta-reduce the outer <code>n</code> and use <code>quotRem</code> instead of <code>divMod</code>:</p>

<pre><code>toDigitsRev :: Integer -&gt; [Integer]
toDigitsRev = unfoldr next
  where
    next 0 = Nothing
    next n = Just (swap (n `quotRem` 10))
</code></pre></li>
<li><p><code>doubleEveryOther</code>: It's very good to see that you employ both <code>map</code> and <code>zip</code> here, but since you also need to write a manually recursive helper function, <code>doubleAtEvenIndex</code>, the effort seems a bit lost. Here's how I'd do it using explicit recursion only:</p>

<pre><code>doubleEveryOther :: [Integer] -&gt; [Integer]
doubleEveryOther (x:y:xs) = x : y*2 : doubleEveryOther xs
doubleEveryOther xs = xs
</code></pre>

<p>With pattern matching you can match arbitrarily deep into a data type, so for lists, you can match lists with at least two elements. The fallback pattern <code>xs</code> matches both lists of one and zero elements.</p>

<p>How might a higher-order solution look like? You're already using <code>zip</code> and <code>map</code>, but rather than zipping the indices <code>[1..]</code> you could also zip the factors <code>[1,2,1,2,...]</code>:</p>

<pre><code>&gt; zip [1,2,3,4,5] [1,2,1,2,1]
[(1,1),(2,2),(3,1),(4,2),(5,1)]
</code></pre>

<p>and then <code>map (\(x,y) -&gt; x * y)</code> the result:</p>

<pre><code>&gt; map (\(x,y) -&gt; x * y) (zip [1,2,3,4,5] [1,2,1,2,1])
  [(1 * 1),(2 * 2),(3 * 1),(4 * 2),(5 * 1)]
= [1,4,3,8,5]
</code></pre>

<p>You can also write that as <code>map (uncurry (*))</code>, but something even neater is to use <code>zipWith (*)</code> which is a combination of <code>map</code> and <code>zip</code> where you save the intermediate tuple representation: You just take one element of each list and combine them using <code>(*)</code> to produce the zipped-with element.</p>

<p>Finally, if you <code>cycle [1,2]</code> you get an infinite list of <code>[1,2,...]</code> which <code>zipWith</code> will shorten to the point that it matches the length of the digits:</p>

<pre><code>doubleEveryOther :: [Integer] -&gt; [Integer]
doubleEveryOther digits = zipWith (*) digits (cycle [1,2])
</code></pre>

<p>If we wanted to eta-reduce <code>digits</code>, we'd have a bit of a problem since it's not the last argument to <code>zipWith</code>. Fortunately we're zipping with a commutative operator, so we might as well write</p>

<pre><code>doubleEveryOther :: [Integer] -&gt; [Integer]
doubleEveryOther digits = zipWith (*) (cycle [1,2]) digits
</code></pre>

<p>which is equivalent to</p>

<pre><code>doubleEveryOther :: [Integer] -&gt; [Integer]
doubleEveryOther = zipWith (*) (cycle [1,2])
</code></pre></li>
<li><p><code>sumDigits</code>: Excellent. The only thing I can think of improving here is to remove explicit recursion. What we're doing here is to sum the digits of each integer in the list and then sum the result of that. You already found <code>sum</code> and <code>map</code>, so combining those:</p>

<pre><code>sumDigits :: [Integer] -&gt; Integer
sumDigits ns = sum (map (\n -&gt; sum (toDigits n)) ns)
</code></pre>

<p>which can be eta-reduced as:</p>

<pre><code>sumDigits ns = sum (map (\n -&gt; sum (toDigits n)) ns)
sumDigits ns = sum (map (\n -&gt; (sum . toDigits) n) ns)
sumDigits ns = sum (map (sum . toDigits) ns)
sumDigits ns = (sum . map (sum . toDigits)) ns
sumDigits = sum . map (sum . toDigits)
</code></pre>

<p>giving</p>

<pre><code>sumDigits :: [Integer] -&gt; Integer
sumDigits = sum . map (sum . toDigits)
</code></pre></li>
<li><p><code>validate</code>: Excellent. The only thing I can think of improving here is to remove the <code>where</code>:</p>

<pre><code>validate :: Integer -&gt; Bool
validate creditCardNumber =
  sumDigits (doubleEveryOther (toDigitsRev creditCardNumber)) `mod` 10 == 0
</code></pre>

<p>You <em>could</em> eta-reduce this, too, but I don't think it looks any better:</p>

<pre><code>validate :: Integer -&gt; Bool
validate =
  (== 0) . (`mod` 10) . sumDigits . doubleEveryOther . toDigitsRev
</code></pre></li>
</ul>

<p>At this point your solution would look like:</p>

<pre class="lang-hs prettyprint-override"><code>toDigits :: Integer -&gt; [Integer]
toDigits = map (read . return) . show

toDigitsRev :: Integer -&gt; [Integer]
toDigitsRev = unfoldr next
  where
    next 0 = Nothing
    next n = Just (swap (n `quotRem` 10))

doubleEveryOther :: [Integer] -&gt; [Integer]
doubleEveryOther = zipWith (*) (cycle [1,2])

sumDigits :: [Integer] -&gt; Integer
sumDigits = sum . map (sum . toDigits)

validate :: Integer -&gt; Bool
validate creditCardNumber =
  sumDigits (doubleEveryOther (toDigitsRev creditCardNumber)) `mod` 10 == 0
</code></pre>

<p>The error handling that was removed from <code>toDigits</code> could be inserted back into <code>validate</code>, for which the name indicates that it actually does validation, and it could be extended to check that the input is not just a positive number but also has the exact amount of digits that a credit card has.</p>

<p>I hope this feedback was useful and not too low-level.</p>
    </div>