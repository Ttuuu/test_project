<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>A couple of observations:</p>

<ol>
<li><p>You said:</p>

<blockquote>
  <p>... there is an opinion that force-unwrapping should be avoided at any cost to not introduce an error-prone code which might crash the app.</p>
</blockquote>

<p>Obviously, “at any cost” is too strong. If it was to be avoided at all costs, it wouldn’t be part of the language. But avoid it if you reasonably can. But we use it all the time (e.g. <code>@IBOutlet</code> references). So use it where appropriate, but avoid it if you can (without contorting yourself too much).</p></li>
<li><p>You go on to say:</p>

<blockquote>
  <p>The idea behind having actions property force unwrapped instead of optional is because it’s actually not supposed to have a <code>nil</code> value, as it may get somewhat confusing: what is meant by <code>nil</code>?</p>
</blockquote>

<p>I’d buy that argument if you didn’t then have a constructor that accepted <code>nil</code> and then supplied that default “close” action.</p></li>
</ol>

<p>Personally, I’d embrace that it is optional and then have <code>setUpActions</code> handle the <code>nil</code> and empty scenarios. </p>

<p>Thus, perhaps:</p>

<pre><code>public struct Action {
    let title: String
    let action: (() -&gt; Void)?

    init(title: String, action: (() -&gt; Void)? = nil) {
        self.title = title
        self.action = action
    }
}

class DescriptionViewController: UIViewController {
    private var actions: [Action]? = nil

    // MARK: Lifecycle

    init(actions: [Action]? = nil) {
        self.actions = actions

        super.init(nibName: nil, bundle: nil)
    }

    required init?(coder aDecoder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }

    override func viewDidLoad() {
        super.viewDidLoad()

        let actionStackView = UIStackView(axis: .horizontal, spacing: 20)
        view.addSubview(actionStackView)
        actionStackView.fillSuperView()
        setUpActions(for: actionStackView)
    }

    func addAction(_ action: Action) {
        if actions == nil { actions = [] }
        actions!.append(action)
    }
}

// MARK: - Private methods

private extension DescriptionViewController {
    func setUpActions(for stackView: UIStackView) {
        if actions?.isEmpty ?? true {
            actions = [Action(title: "Close")]
        }

        actions?.map { action in
            CustomButton(title: action.title) { [weak self] in
                    action.action?()
                    self?.dismiss(animated: true)
                }
            }
            .forEach { stackView.addArrangedSubview($0) }
    }
}
</code></pre>

<p>A few observations in the above:</p>

<ul>
<li><p>Note, I’ve replaced the named tuple scenario with a custom type, <code>Action</code>. That seems better than repeating the tuple definition repeatedly.</p></li>
<li><p>I’ve also changed it to add that default “close” action if <code>nil</code> or <code>isEmpty</code>, though if you want it to only do that in the <code>nil</code> scenario, that’s a simple change, too.</p></li>
<li><p>You don’t need that <code>strongSelf</code> pattern in the “close” closure. <code>self?.dismiss(...)</code> achieves the same thing. Besides, if you did need that <code>strongSelf</code> pattern, since Swift 4.2, you’d just do:</p>

<pre><code>guard let self = self else { ... }
</code></pre>

<p>See <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0079-upgrade-self-from-weak-to-strong.md" rel="nofollow noreferrer">SE-0079</a>.</p></li>
<li><p>I’ve deferred the <code>setUpActions</code> until <code>viewDidLoad</code>, permitting a flow where you initialize it without any actions and then subsequently set the <code>actions</code> (but presumably still before you present it). </p>

<p>I’ve also simplified this, eliminating this concept of adding actions after the view controller has already been presented. Go ahead and keep that stuff if you need it, but it has a hint of code smell.</p>

<p>For example, in what situation will you have this presented and then subsequently add new actions. That might not be a great UX (where the user may be in the processing of trying to tap the screen and then everything shifts around as new buttons are added, possibly resulting on a tap on something other than what they originally intended).</p></li>
<li><p>As part of this refactoring, I’ve also removed the observer on <code>actions</code>. In general, one should hesitate to add observer to a collection. E.g. what if the app developer is adding one button at a time to the array. By the time they add the fifth button, the <code>setUpActions</code> actions will have been called five times. Sure, you probably won’t do that, but it’s the sort of thing that bites you later on, when you forget what’s going on. Admittedly, there are likely so few items that it matters, but as a general rule, be careful with observers on collections. Besides, it’s better to defer the building of UIKit controls until <code>viewDidLoad</code>.</p></li>
<li><p>I’ve tweaked this so that the <code>setUpActions</code> routine adds the <code>self?.dismiss(animated: true)</code> itself. That way, when the app developer adds their own actions, they don’t have to worry about dismissing the <code>DescriptionViewController</code> itself, but rather every button will, after running the supplied closure (if any) will automatically, dismiss the <code>DescriptionViewController</code>. Then, you can do things like:</p>

<pre><code>let actionSheet = DescriptionViewController()
actionSheet.addAction(Action(title: "Save") {
    // put save logic here
})

actionSheet.addAction(Action(title: "Cancel")) // no closure needed as we don't need to do anything
</code></pre>

<p>We can avoid the cruft of dismissing the <code>DescriptionViewController</code> from every added action.</p></li>
<li><p>By the way, you’ve said that you’ve omitted some 500 lines of code. Hopefully that’s an exaggeration or much of that code isn’t actually in the view controller (e.g. the <code>UIStackView</code> extension, the <code>CustomButton</code>, the <code>UIView</code> extension, etc.). But if you are saying that there are 500 more lines in the view controller, you might want to think creatively about refactoring that. (E.g. in the spirit of Dave DeLong’s <a href="https://m.youtube.com/watch?time_continue=2188&amp;v=YWVzCd5FYbs" rel="nofollow noreferrer">A Better MVC</a>.)</p></li>
</ul>
    </div>