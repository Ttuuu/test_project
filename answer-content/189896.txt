<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Variables</h3>
<p>You did a good job of naming your variables as what they are, but you didn't declare some.</p>
<p>Always turn on <code>Option Explicit</code>. You can have it automatically by going to Tools -&gt; Options in the VBE and checking the <strong>Require Variable Declaration</strong> option. This way if you have any variables not defined, the compiler will let you know.</p>
<p>When you don't define your variable, VBA will declare it as a <em>Variant</em> type that can hold any type of data. While this may be more flexible, it adds processing time to your macro as VBA decides or tests for the type. Additionally, since a Variant can be any type of data, you may miss out on valuable troubleshooting information on <em>Type Mismatch</em></p>
<p>Also, you can do better with the worksheets. Worksheets have a <code>CodeName</code> property - View Properties window (<kbd>F4</kbd>) and the <code>(Name)</code> field (the one at the top) can be used as the worksheet name. This way you can avoid <code>Sheets("Import")</code> and instead just use <code>Import</code>.</p>
<p>You also ran into the pitfall of VBA naming style. <a href="https://msdn.microsoft.com/en-us/library/1s46s4ew(v=vs.140).aspx" rel="nofollow noreferrer">Standard VBA naming conventions</a> have <code>camelCase</code> for local variables and <code>PascalCase</code> for other variables and names.</p>
<hr>
<p>You are missing a function <code>Find_End</code> which I assume just find the last row. So it would be something like this</p>
<pre><code>Dim inspectionLastRow As Long
inspectionLastRow = UniqueSheet.Cells(Rows.Count, 1).End(xlUp).Row
</code></pre>
<p>Now you have your loops. You have an <code>i</code> loop, a <code>x</code> loop and a <code>Z</code> loop. In this case I would give them more specific names -</p>
<pre><code>For inspectionIndex = 2 To inspectionLastRow
For importIndex = 2 To importLastRow
for uniqueIndex = 2 to uniqueLastRow
For targetColumn = 0 To 7
</code></pre>
<p>But with the last one, you are using it as a column so you'd be better off adjusting the array than the column -</p>
<pre><code> For z = 1 To 8
    Out_Sheet.Cells(i + 2, z).Value = Imp_Arr(i, z - 1)
</code></pre>
<p>When you have a string like this -</p>
<blockquote>
<pre><code>Imp_Arr(Unique_Sheet.Cells(x, 2) - 1, 3) = "MANUAL INPUT REQUIRED"
</code></pre>
</blockquote>
<p>I find it better to get that out of the way up top</p>
<pre><code>Const INPUT_REQUIRED As String = "MANUAL IMPORT REQUIRED"
</code></pre>
<hr>
<p>You have <em>a lot</em> of comments. Comments - <a href="http://blog.codinghorror.com/code-tells-you-how-comments-tell-you-why/" rel="nofollow noreferrer">"code tell you how, comments tell you why"</a>. The code should speak for itself, if it needs a comment, it might need to be made more clear. If not, the comment should describe <em>why</em> you're doing something rather than <em>how</em> you're doing it. Here are a <a href="http://programmers.stackexchange.com/a/254979/125931">few reasons</a> to avoid comments all together.</p>
<h3>Writing to sheet</h3>
<p>You have this chunk of code</p>
<blockquote>
<pre><code>Imp_Arr(Unique_Sheet.Cells(x, 2) - 1, 0) = Imp_Sheet.Cells(i, 3)
Imp_Arr(Unique_Sheet.Cells(x, 2) - 1, 1) = Imp_Sheet.Cells(i, 7)
Imp_Arr(Unique_Sheet.Cells(x, 2) - 1, 2) = Imp_Sheet.Cells(i, 8)
Imp_Arr(Unique_Sheet.Cells(x, 2) - 1, 3) = "MANUAL INPUT REQUIRED"
Imp_Arr(Unique_Sheet.Cells(x, 2) - 1, 4) = Imp_Sheet.Cells(i, 6)
Imp_Arr(Unique_Sheet.Cells(x, 2) - 1, 5) = Imp_Sheet.Cells(i, 4)
Imp_Arr(Unique_Sheet.Cells(x, 2) - 1, 6) = Imp_Sheet.Cells(i, 5)
</code></pre>
</blockquote>
<p>That is pretty difficult to follow, yeah? Rearrange your array and write it all at once -</p>
<pre><code> Imp_Sheet.Range(.Cells(i, 3), .Cells(i, 8)) = Imp_Arr
</code></pre>
<p>Or pull out dimensions of the array into new arrays to put them on the sheet.</p>
<hr>
<p>This <code>If</code> block doesn't need to be a block</p>
<blockquote>
<pre><code>If (Unique_Sheet.Cells(i, 1).Value = "") Then
  Exit For
End If
</code></pre>
</blockquote>
<pre><code> If IsEmpty(Unique_Sheet.Cells(i, 1)) Then Exit For
</code></pre>
    </div>