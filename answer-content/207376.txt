<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You said that you want your version compliant with the one from C++17. But with a backward compatibility (C++11, C++14) or do you only aim C++17 and above? (just to be sure) </p>

<ul>
<li><p>It would be better if you written full include guards instead the non-standard <code>#pragma</code> directive (<a href="https://stackoverflow.com/questions/1143936/pragma-once-vs-include-guards">more info</a>)</p></li>
<li><p>Maybe try to mimic <code>std::iterator_traits</code> for <code>iterator</code> and <code>const_iterator</code></p></li>
<li><p>Does <code>size_t</code> and <code>ptrdiff_t</code> the ones from <code>std::</code> or do you redefined them? maybe try to full-qualify them.</p></li>
<li><p>In C++17, I think <a href="https://en.cppreference.com/w/cpp/language/class_template_argument_deduction" rel="nofollow noreferrer">deduction guides</a> are <a href="https://en.cppreference.com/w/cpp/container/array/deduction_guides" rel="nofollow noreferrer">the solution</a> for your first question about construction from a variadic parameter pack.</p></li>
<li><p>Use your type aliases:</p>

<ul>
<li>Return type would be <code>iterator</code> and <code>const_iterator</code> instead of <code>T*</code> and <code>const T*</code></li>
<li>Same for <code>reference</code> and <code>const_reference</code> instead of <code>T&amp;</code> and <code>const T&amp;</code></li>
<li>Same <code>size_type</code> instead of <code>size_t</code></li>
<li>Same <code>pointer</code> and <code>const_pointer</code> instead of <code>T*</code> and <code>const T*</code></li>
</ul></li>
<li><code>empty()</code> can be made <code>[[nodiscard]]</code></li>
<li>In <code>operator[]</code> and <code>at()</code> the param type <code>size_t</code> would be replaced by <code>size_type</code></li>
</ul>
    </div>