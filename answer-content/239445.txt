<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<p>Is it well commented?</p>
</blockquote>
<p>Generally yes, the only place I might add more comments is to explain the fields in the structure.</p>
<blockquote>
<p>Is my solution portable?</p>
</blockquote>
<p>No, it will not port to Windows easily because of the use of <code>libbsd</code> and the use of the <code>unistd.h</code> header file.</p>
<p>To improve portability it is also important to get comfortable with the memory allocation functions <code>void* malloc(size_t size)</code>, <code>void* calloc( size_t num, size_t size )</code> and <code>void *realloc( void *ptr, size_t new_size )</code>. Use the standard C library function <code>char *fgets( char *restrict str, int count, FILE *restrict stream )</code> instead of <code>getline()</code>.</p>
<h1>Complexity of the Functions</h1>
<p>There are at least 2 sub-functions that could be pulled out of <code>main()</code>, the first is processing the command line arguments, and the second is handling the use input.</p>
<p>The function <code>rolldice(struct dice d)</code> is also too complex, there are 2 or 3 sub-functions in <code>rolldice</code> as well.</p>
<p>There is also a programming principle called the <a href="https://en.wikipedia.org/wiki/Single_responsibility_principle" rel="nofollow noreferrer">Single Responsibility Principle</a> that applies here. The Single Responsibility Principle states:</p>
<blockquote>
<p>that every module, class, or function should have responsibility over a single part of the functionality provided by the software, and that responsibility should be entirely encapsulated by that module, class or function.</p>
</blockquote>
    </div>