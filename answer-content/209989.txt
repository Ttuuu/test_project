<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Stack Overflow Exception</h3>

<p>You did not test your code appropriately because it throws the <code>StackOverflowException</code> for</p>

<pre><code>(x == y)
</code></pre>

<p>This is the rare case when this happens and is triggered by these two methods.</p>

<blockquote>
<pre><code>public static bool operator ==(Comparable&lt;T&gt; comp1, Comparable&lt;T&gt; comp2)
{
  return Compare(comp1, comp2) == 0;
}
</code></pre>
</blockquote>

<p>This calls the <code>Compare</code> method which in turn calls <code>comp1 == null</code> which means that <code>Compare</code> is called... and so on...</p>

<blockquote>
<pre><code>private static int Compare(Comparable&lt;T&gt; comp1, Comparable&lt;T&gt; comp2)
{
  if (comp1 == null)
  {
      return ((comp2 == null) ? 0 : -1);
  }
  return comp1.CompareTo(comp2);
}
</code></pre>
</blockquote>

<p>When implementing comparers or equalities you should <strong>always</strong> use <code>object.ReferenceEquals</code> for checking arguments against <code>null</code> and <strong>never</strong> <code>== null</code>.</p>

<hr>

<p>You should also use standard names for parameters like <code>x</code> &amp; <code>y</code> or <code>left</code> &amp; <code>right</code> and not <code>comp1</code> and <code>comp2</code>.</p>
    </div>