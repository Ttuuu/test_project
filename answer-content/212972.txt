<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ol>
<li>In such scenario it only obstructs code readability. No benefits.</li>
<li>You should use static block only if static field initialization is not enough (e.g. you should call several methods, or this methods throw checked exceptions).</li>
</ol>

<p>Just created 2 sample classes:</p>

<pre><code>public class Static {
    public static String s = "qwe";
}
</code></pre>

<hr>

<pre><code>public class StaticBlock {
    public static String s;
    static {
        s = "qwe";
    }
}
</code></pre>

<p>And using <code>javap -c</code> we can see bytecodes of this classes:</p>

<pre><code>Compiled from "Static.java"
public class Static {
  public static java.lang.String s;

  public Static();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."&lt;init&gt;":()V
       4: return

  static {};
    Code:
       0: ldc           #2                  // String qwe
       2: putstatic     #3                  // Field s:Ljava/lang/String;
       5: return
}
</code></pre>

<hr>

<pre><code>Compiled from "StaticBlock.java"
public class StaticBlock {
  public static java.lang.String s;

  public StaticBlock();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."&lt;init&gt;":()V
       4: return

  static {};
    Code:
       0: ldc           #2                  // String qwe
       2: putstatic     #3                  // Field s:Ljava/lang/String;
       5: return
}
</code></pre>

<p>As you can see, bytecodes are identical :)</p>

<p><strong>UPD</strong>: Its getting more interesting! If we add <code>final</code> modifier to our static field, bytecodes will be different.</p>

<pre><code>public class Static {
    public static final String s = "qwe";
}
</code></pre>

<hr>

<pre><code>public class StaticBlock {
    public static final String s;
    static {
        s = "qwe";
    }
}
</code></pre>

<p>We will have: </p>

<pre><code>Compiled from "Static.java"
public class Static {
  public static final java.lang.String s;

  public Static();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."&lt;init&gt;":()V
       4: return
}
</code></pre>

<hr>

<pre><code>Compiled from "StaticBlock.java"
public class StaticBlock {
  public static final java.lang.String s;

  public StaticBlock();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."&lt;init&gt;":()V
       4: return

  static {};
    Code:
       0: ldc           #2                  // String qwe
       2: putstatic     #3                  // Field s:Ljava/lang/String;
       5: return
}
</code></pre>

<p>I found a little bit of explanation in <a href="https://stackoverflow.com/questions/8354412/do-java-finals-help-the-compiler-create-more-efficient-bytecode">this question</a>.</p>
    </div>