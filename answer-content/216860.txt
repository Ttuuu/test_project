<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>If you use a list of tuples instead of a dictionary and reverse the order, you can simply iterate over it. Your <code>while</code> loop also becomes a lot easier to understand and there is no longer any need to outsource it to another function that returns the literal and its count.</p>

<p>Instead of manually adding strings (<a href="https://www.python.org/dev/peps/pep-0008/#programming-recommendations" rel="noreferrer">something you should basically never do in in Python</a>), use <code>str.join</code>.</p>

<pre><code>ROMAN_LITERALS = [(1000, 'M'), (900, 'CM'), (500, 'D'), (400, 'CD'), (100, 'C'),
                  (90, 'XC'),  (50, 'L'), (40, 'XL'), (10, 'X'), (9, 'IX'),
                  (5, 'V'), (4, 'IV'), (1, 'I')]

def decimal_to_roman(x):
    out = []
    for value, literal in ROMAN_LITERALS:
        while x &gt;= value:
            x -= value
            out.append(literal)
    return "".join(out)
</code></pre>

<p>Instead of the <code>while</code> loop you can also use integer division like you did:</p>

<pre><code>def decimal_to_roman(x):
    out = []
    for value, literal in ROMAN_LITERALS:
        n = x // value               # will be 0 if value is too large
        out.extend([literal] * n)    # will not do anything if n == 0
        x -= n * value               # will also not do anything if n == 0
    return "".join(out)
</code></pre>
    </div>