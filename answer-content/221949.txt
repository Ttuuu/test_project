<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>General remarks</h1>

<ul>
<li><code>value</code>, as a parameter name, isn't very descriptive,</li>
<li><p>The code considers that white spaces can only be <code>" "</code> or <code>"\n"</code> or <code>"\t"</code>. This a performance optimization and supposes prior knowledge of the contents of the string. More generally you could make the check this way:</p>

<pre><code>if char.isWhitespace {
    indices.append(index)
}
</code></pre></li>
<li><p><code>Array&lt;Int&gt;</code> is not the same as <code>[String.Index]</code> of <a href="https://developer.apple.com/documentation/foundation/indexset" rel="nofollow noreferrer">IndexSet</a>. A <code>String</code> can be traversed using <code>String.Index</code> and not and <code>Int</code>. </p></li>
</ul>

<h2>Performance</h2>

<p>The following codeis twice as fast in my tests, but doesn’t work with emoji :</p>

<pre><code>func whiteSpacesIndices(in str : String) -&gt; Array&lt;Int&gt; {
    var indices: Array&lt;Int&gt; = []
    let blanks: [UInt32] = [32, 10, 9]  //these values correspond to space, new line, and tabulation respectively.
    for (index, scalar) in str.unicodeScalars.enumerated() {
        if blanks.contains(scalar.value) {
            indices.append(index)
        }
    }
    return indices
}
</code></pre>

<p>You can learn more about the Unicode scalar representation <a href="https://docs.swift.org/swift-book/LanguageGuide/StringsAndCharacters.html#ID304" rel="nofollow noreferrer">here</a>.</p>

<h1>Free function or instance method?</h1>

<p>The <code>whiteSpacesIndices</code> function seems more like a property on strings. It is appropriate for a String to know about the indices of white spaces (and new lines) within itself:</p>

<pre><code>extension String {
    var whiteSpaceIndices: [Int] {
        var indices = [Int]()
        let blanks: [UInt32] = [32, 10, 9]
        for (index, scalar) in self.unicodeScalars.enumerated() {
            if blanks.contains(scalar.value) {
                indices.append(index)
            }
        }
        return indices
    }
}
</code></pre>

<p>And could be used like so:</p>

<pre><code>"Hello world!".whiteSpaceIndices    //[5]
"ä ö ü".whiteSpaceIndices           //[1, 3]
</code></pre>
    </div>