<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your implementation doesn't seem to bother if the RNA-sequence contains invalid characters like: <code>"UXGUGUUAUUA"</code>. Is that on purpose? I think, I would expect an exception or at least some reporting in a log.</p>

<hr>

<p>An alternative to a <code>switch</code>-statement is often a dictionary - especially if the cases are going to vary or maybe should be localized - because a dictionary can be loaded at runtime from a file or database:</p>

<pre><code>static readonly IDictionary&lt;string, string&gt; rnaProteinMap = new Dictionary&lt;string, string&gt;
{
  { "UAA", null },
  { "UAG", null },
  { "UGA", null },

  { "UCU", "Serine" },
  { "UCC", "Serine" },
  { "UCA", "Serine" },
  { "UCG", "Serine" },

  { "UUU", "Phenylalanine" },
  { "UUC", "Phenylalanine" },

  { "UUA", "Leucine" },
  { "UUG", "Leucine" },

  { "UAU", "Tyrosine" },
  { "UAC", "Tyrosine" },

  { "UGU", "Cysteine" },
  { "UGC", "Cysteine" },

  { "UGG", "Tryptophan" },

  { "AUG", "Methionine" },
};
</code></pre>

<p>Here more RNA-entries map to the same protein, but I don't think that's an issue in this context.</p>

<hr>

<blockquote>
  <p><code>private static string[] Codons(List&lt;string&gt; protein, IEnumerable&lt;string&gt; output)</code>
  I don't understand, why you have <code>protein</code> as an argument instead of just create it in <code>Codons()</code>?</p>
</blockquote>

<hr>

<p>Below, I have refactored your code using the same bits an pieces in another fasion:</p>

<pre><code>  private static IEnumerable&lt;string&gt; RnaToCodons(string strand, int k = 0) =&gt; strand.ToLookup(c =&gt; Math.Floor(k++ / (double)3)).Select(e =&gt; new String(e.ToArray()));

  private static bool TryGetProtein(string rna, out string protein)
  {
    protein = null;

    switch (rna)
    {
      case "UAA": case "UAG": case "UGA": 
        return false;
      case "UCU": case "UCC": case "UCA": case "UCG":
        protein = "Serine";
        break;
      case "UUU": case "UUC":
        protein = "Phenylalanine";
        break;
      case "UUA": case "UUG":
        protein = "Leucine";
        break;
      case "UAU": case "UAC":
        protein = "Tyrosine";
        break;
      case "UGU": case "UGC":
        protein = "Cysteine";
        break;
      case "UGG":
        protein = "Tryptophan";
        break;
      case "AUG":
        protein = "Methionine";
        break;
      default:
        // TODO log an invalid RNA
        return true;
        // OR throw new ArgumentException($"Invalid RNA sequence: {rna}", nameof(rna));
    }

    return true;
  }

  public static string[] Proteins(string strand)
  {
    List&lt;string&gt; proteins = new List&lt;string&gt;();

    foreach (var rna in RnaToCodons(strand))
    {
      if (!TryGetProtein(rna, out string protein))
        break;
      if (protein != null)
        proteins.Add(protein);
    }

    return proteins.ToArray();
  }
</code></pre>

<p>In TryGetProtein I return <code>true</code> for an invalid <code>RNA</code>-sequence after reporting it to the log in order to let the process proceed instead of terminate it with an exception. You should consider what to do in such situations.</p>

<p><code>RnaToCodons()</code> seems to be the bottleneck performance wise. You should try stress tests it with a huge RNA-string.</p>

<hr>

<p>Below is another solution that handles everything in one iteration:</p>

<pre><code>IEnumerable&lt;string&gt; Slice(string data, int size)
{
  if (size &lt;= 0) throw new ArgumentOutOfRangeException(nameof(size), "Must be greater than zero");


  char[] slice = new char[size];

  for (int i = 0; i &lt;= data.Length; i++)
  {
    if (i &gt; 0 &amp;&amp; i % size == 0)
    {
      yield return new string(slice);
    }

    if (i == data.Length)
      yield break;

    slice[i % size] = data[i];
  }

}

IEnumerable&lt;string&gt; Proteins(string strand)
{
  foreach (string rna in Slice(strand, 3))
  {
    if (rnaProteinMap.TryGetValue(rna, out string protein))
    {
      if (protein == null) yield break;
      yield return protein;
    }
    else
    {
      // throw, report an error or just let is pass, as you do?
    }  
  }
}
</code></pre>

<p>It uses the dictionary <code>rnaProteinMap</code> as shown above.</p>
    </div>