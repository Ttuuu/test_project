<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There's almost always a more elegant solution that "manually" iterating through an array. Instead of defining <code>attArray</code>, you can define a mapping object that maps element ids to <code>attObj</code> properties, or <code>attObj</code> properties to element ids.</p>

<pre class="lang-js prettyprint-override"><code>const attributeToIdMap = {
  strength: "suStr",
  dexterity: "suDex",
  ...
</code></pre>

<p>Demo: </p>

<p></p><div class="snippet" data-lang="js" data-hide="true" data-console="true" data-babel="false">
<div class="snippet-code snippet-currently-hidden">
<pre class="snippet-code-js lang-js prettyprint-override"><code>const attributeToIdMap = {
  strength: "suStr",
  dexterity: "suDex",
  stamina: "suSta",
  presence: "suPres",
  manipulation: "suMan",
  composure: "suCom",
  intelligence: "suInt",
  wits: "suWit",
  resolve: "suRes"
};

const attributes = {
  strength: 0,
  dexterity: 0,
  stamina: 0,
  presence: 0,
  manipulation: 0,
  composure: 0,
  intelligence: 0,
  wits: 0,
  resolve: 0
};

// Create the HTML for the demo
const root = document.body.appendChild(document.createElement('ul'));
for (const [attribute, id] of Object.entries(attributeToIdMap)) {
  const li = root.appendChild(document.createElement('li'));
  li.appendChild(document.createTextNode(attribute + ': '));
  const attributeElement = li.appendChild(document.createElement('span'));
  attributeElement.id = id;
}

// Loop through attributes
for (const [attribute, id] of Object.entries(attributeToIdMap)) {
  document.getElementById(id).textContent = attributes[attribute];
}</code></pre>
</div>
</div>


<p>Alternatively, since in this case the element ids can be derived from the attribute name, you can do away with the <code>attributeToIdMap</code> object and apply the transformation. With your current id setup, this probably isn't a great idea since the mapping isn't immediately obvious, but if the ids were renamed to something like <code>attribute + 'El'</code>, it would be immediately clear what each element belonged to.</p>

<pre class="lang-js prettyprint-override"><code>function getId(attribute) {
  return `su${attribute[0].toLocaleUpperCase()}${attribute.substring(1, 3)}`;
}
</code></pre>

<p>Demo:</p>

<p></p><div class="snippet" data-lang="js" data-hide="true" data-console="true" data-babel="false">
<div class="snippet-code snippet-currently-hidden">
<pre class="snippet-code-js lang-js prettyprint-override"><code>function getId(attribute) {
  return `su${attribute[0].toLocaleUpperCase()}${attribute.substring(1, 3)}`;
}

const attributes = {
  strength: 0,
  dexterity: 0,
  stamina: 0,
  presence: 0,
  manipulation: 0,
  composure: 0,
  intelligence: 0,
  wits: 0,
  resolve: 0
};

// Create the HTML for the demo
const root = document.body.appendChild(document.createElement('ul'));
for (const attribute of Object.keys(attributes)) {
  const li = root.appendChild(document.createElement('li'));
  li.appendChild(document.createTextNode(attribute + ': '));
  const attributeElement = li.appendChild(document.createElement('span'));
  attributeElement.id = getId(attribute);
}

// Loop through attributes
for (const [attribute, value] of Object.entries(attributes)) {
  document.getElementById(getId(attribute)).textContent = value;
}</code></pre>
</div>
</div>


<p>I have a few other concerns about your code as well:</p>

<ol>
<li><p>Nonstandard abbreviations don't help. You will spend much more time reading code than writing it. Abbreviating <code>att</code> means that someone unfamiliar with the context wonders does this mean "AT&amp;T", "attribute", "attrition"? Standard abbreviations like <code>min</code>, <code>max</code>, etc. are obviously fine.</p></li>
<li><p>Don't mix <code>var</code> and <code>let</code>. If you can, use <code>let</code> (or even <code>const</code>)</p></li>
<li><p>If possible, avoid <code>.innerHTML</code>. By using it you can open yourself up to XSS if the user is ever able to control the input. Prefer <code>.textContent</code>.</p></li>
</ol>
    </div>