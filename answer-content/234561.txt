<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Event Dispatching Thread</h2>

<p>Since Swing is not thread safe, all Swing UI component creation and modification should be done on the Event Dispatching Thread (EDT).  It isn’t a problem with this program, but you could run into it if you also created (say) a <code>javax.swing.Timer</code> in your initiation.</p>

<p>It is an easy change to create the GUI on the EDT.  Instead of <code>Gui gui = new Gui();</code> use:</p>

<pre><code>SwingUtilities.invokeLater(Gui::new);
</code></pre>

<h2>But I Won???</h2>

<p>Play a game, with these moves:</p>

<pre><code> O | X | O
---+---+---
 X |   | X
---+---+---
 O | X | O
</code></pre>

<p>And then put the final X in the center.  You win in two directions at once, but because <code>count == 9</code>, the game is a draw?</p>

<h2>Separate GUI / Logic</h2>

<p>It looks like you tried to separate the GUI from the game logic, but:</p>

<ul>
<li><code>TicTacToe</code> still accesses/manipulates <code>JButton</code> objects</li>
<li><code>TicTacToe</code> shows <code>JOptionPane</code> dialogs</li>
</ul>

<p>So, it is not separate from the Swing GUI; you could not reuse it in an SWT or JavaFX application.</p>

<p>The <code>TicTacToe</code> class should have functions something like:</p>

<ul>
<li><code>bool isValidMove(int x, int y)</code></li>
<li><code>void makeMove(int x, int y)</code></li>
<li><code>bool isGameOver()</code></li>
<li><code>Player getWinner()</code></li>
</ul>

<p>and the GUI should convert buttons into x, y locations, display messages, etc</p>

<h2><code>static</code></h2>

<p>Can you play a second game?  No.  There is no way to reset <code>count</code> for a new game.  It would continue to count above 9 with additional moves!</p>

<p>Can you play two games at once?  No!  There is only one <code>board</code> object.  Two simultaneous games would corrupt each other’s <code>board</code> and <code>count</code> variables!</p>

<p>Why are these variables <code>static</code>?  It prevents multiple <code>TicTacToe</code> objects from being created.  If you removed <code>static</code> from the variables, you could start a new game by creating a new <code>TicTacToe</code> object (and resetting the GUI).  </p>

<p><strong>Advanced:</strong> Also, you could allow the computer to experiment with different moves, and look several moves in the future, ... but only if you could create these extra <code>TicTacToe</code> boards which aren’t the ones being displayed in the UI.</p>

<h2>Simplify Logic</h2>

<pre><code>            if(count % 2 == 1) {
                button.setText("X");
            }
            if(count % 2 == 0) {
                button.setText("O");
            }
</code></pre>

<p>If <code>count % 2</code> is not <code>1</code>, it must be <code>0</code>.  Use an <code>else</code> clause:</p>

<pre><code>            if(count % 2 == 1) {
                button.setText("X");
            } else {
                button.setText("O");
            }
</code></pre>

<hr>

<p>This test is very verbose:</p>

<pre><code>        if(board[0][0] != null &amp;&amp; board[0][0].equals(board[1][1]) &amp;&amp; board[1][1].equals(board[2][2])) {
</code></pre>

<p>Who can win on any turn?  The player that just made a move, of course.  And their symbol is stored in <code>string</code> (a terrible variable name, by the way).</p>

<p>So if the above test was to pass, all the symbols would equal <code>string</code>, so you could write it a little more concisely as:</p>

<pre><code>        if(string.equals(board[0][0]) &amp;&amp; string.equals(board[1][1]) &amp;&amp; string.equals(board[2][2]) {
</code></pre>

<p>If you defined constants (or better, used <code>enum</code> if you are familiar with them):</p>

<pre><code>    public final static String PLAYER_X = "X";
    public final static String PLAYER_O = "O";
</code></pre>

<p>and explicitly set the contents of <code>board[][]</code> to either one of those objects, then you could safely test for object <strong>identity</strong>, instead of <strong>equality</strong>:</p>

<pre><code>        if(board[0][0] == player &amp;&amp; board[1][1] == player &amp;&amp; board[2][2] == player) {
</code></pre>
    </div>