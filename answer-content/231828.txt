<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I agree with what "Your Common Sense" said, but I would like to have better variable names. Names that make clear what a variable contains. Seen in isolation variable names like <code>$e</code>, <code>$array</code> and <code>$v</code> don't really convey what they contain. Abbreviated variable names don't make your code easier to read. Also <code>$errors</code> does contain errors, but more precisely it contains error messages. So, I would write this as:</p>

<pre><code>function convertToErrorMessages($errors)
{
    $errorMessages = [];
    foreach ($errors as $errorType =&gt; $error)
    {
        foreach ($error as $property =&gt; $values)
        {   
            $valueMessages = [];            
            foreach ($values as $value)
            {
                switch($errorType)
                {
                    case 'invalid':
                        $valueMessages[] = "$value is not a valid $property";
                        break;
                    case 'missing':
                        $valueMessages[] = "$value is a required $property".
                                           " - other functions have dependencies on it";
                        break;
                }
            }
            $errorMessages[$errorType][$property] = $valueMessages;
        }
    }
    return $errorMessages;
}
</code></pre>

<p>Note that I also collect all the value messages before assigning them to the error messages array. This prevents code repetition, especially when you have many error types. I also don't like long long lines, so I split those.</p>

<p>One thing I sometimes do when there are many nested braces, is leaving out braces that will never be useful. Like this:</p>

<pre><code>function convertToErrorMessages($errors)
{
    $errorMessages = [];
    foreach ($errors as $errorType =&gt; $error)
    foreach ($error as $property =&gt; $values)
    {   
        $valueMessages = [];            
        foreach ($values as $value)
        switch($errorType)
        {
            case 'invalid':
                $valueMessages[] = "$value is not a valid $property";
                break;
            case 'missing':
                $valueMessages[] = "$value is a required $property".
                                   " - other functions have dependencies on it";
                break;
        }
        $errorMessages[$errorType][$property] = $valueMessages;
    }
    return $errorMessages;
}
</code></pre>

<p>This might not be to everyones liking, but I think it is acceptable or even slightly easier to read.</p>

<p>I also had a look as "mickmackusa" solution. A lookup array can make sense, for instance when you're using multiple languages. Also, the idea to separate the configuration from the processor code is a valid one, but for now it only seems to complicate the code (PS: mickmackusa updated his answer and it looks a lot better now).</p>
    </div>