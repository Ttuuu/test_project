<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ol>
<li><p>I suggest using <code>isinstance</code> instead of <code>type</code> to check the types of variables. You can read about it in details here: <a href="https://stackoverflow.com/q/1549801/7851470">What are the differences between type() and isinstance()?</a>
So, for example, instead of writing:</p>

<pre><code>if type(x) in (int, float, np.float64):
</code></pre>

<p>you would write:</p>

<pre><code>if isinstance(x, (int, float)):
</code></pre>

<p>You can check that it works for <code>np.exp(1)</code> which is of type <code>np.float64</code>.</p></li>
<li><p>When the <code>x</code> is of type <code>range</code> the following check is redundant: </p>

<pre><code>if all([type(q) in (int, float) for q in y])
</code></pre>

<p>as the elements of <code>y</code> will be always integers. Also, there is no need to convert <code>range</code> to <code>list</code>. The following will also work:</p>

<pre><code>result = float(x[0]) if len(x) == 1 else np.array(x)
</code></pre></li>
<li><p>To check if a list is empty in Python we usually write:</p>

<pre><code>if not others:
</code></pre>

<p>instead of:</p>

<pre><code>if len(others) == 0:
</code></pre></li>
<li><p>Imports should be at the top of the script. Move the <code>import numpy as np</code> line there.</p></li>
<li><p>In the future, when you have a function that can accept variables of different types and its behavior depends on which type it gets, you could try using <a href="https://docs.python.org/3.6/library/functools.html#functools.singledispatch" rel="nofollow noreferrer"><code>singledispatch</code></a>. I could come up with the following implementation:</p>

<pre><code>from collections.abc import Iterable
from functools import singledispatch
from numbers import Real

import numpy as np


@singledispatch
def fixit(x):
    return None

@fixit.register
def _(x: Real):
    return float(x)


@fixit.register
def _(x: Iterable):
    y = np.array(x)
    if y.dtype in (np.int, np.float) and len(y.shape) == 1:
        return float(y[0]) if len(y) == 1 else y.astype(float)
    else:
        return None
</code></pre>

<p>I didn't check it thoroughly but for your test cases it works. (but looks a bit ugly)</p></li>
<li><p>A better way to solve your problem would be to convert immediately all the values to NumPy arrays of at least one dimension. We would require a <a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.atleast_1d.html" rel="nofollow noreferrer"><code>np.atleast_1d</code></a> function for that:</p>

<pre><code>def to_normalized_data(values):
    arrays = list(map(np.atleast_1d, values))
    sizes = set(map(np.size, arrays))
    has_bad_types = any(array.dtype not in (np.int32, np.float64) for array in arrays)
    if len(sizes) &gt; 2 or has_bad_types:
        return None
    max_size = max(sizes)
    singletons = [float(array[0]) for array in arrays if array.size == 1]
    iterables = [array.astype(float) for array in arrays if array.size == max_size]
    return singletons + iterables
</code></pre>

<pre><code>&gt;&gt;&gt; to_normalized_data(all_good_things)
[42.0,
 3.14,
 3.141592653589793,
 2.718281828459045,
 3.0,
 42.0,
 3.0,
 42.0,
 array([1. , 2.3, 2. ]),
 array([3.14, 1.  , 4.  ]),
 array([1., 2., 2.]),
 array([3., 1., 4.]),
 array([0., 1., 2.]),
 array([0., 1., 2.])]
&gt;&gt;&gt; sum(to_normalized_data(all_good_things))
array([149.13987448, 149.29987448, 156.99987448])
&gt;&gt;&gt; print(to_normalized_data(some_bad_things))
None
</code></pre></li>
</ol>

<hr>

<p><strong>Answering your comments:</strong>  </p>

<ol>
<li><blockquote>
  <p>For some reason my anaconda's numpy (1.17.3) returns int64 rather than
  int32 as you have in item 6</p>
</blockquote>

<p>Looks like this behavior is <a href="https://stackoverflow.com/q/36278590/7851470">OS-specific</a>. Probably a better way to check the types of the obtained arrays would be by using <a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.can_cast.html" rel="nofollow noreferrer"><code>np.can_cast</code></a>. So, instead of writing:</p>

<pre><code>has_bad_types = any(array.dtype not in (np.int32, np.float64) for array in arrays)
</code></pre>

<p>we could write:</p>

<pre><code>has_bad_types = not all(np.can_cast(array.dtype, np.float64) for array in arrays)
</code></pre></li>
<li><blockquote>
  <p>Item #6 doesn't reject two different lengths if no singletons are present. With <code>([1, 2, 3], [1, 2, 3, 4])</code> as input, the output is <code>[array([1., 2., 3., 4.])]</code> and <code>[1, 2, 3]</code> just falls through the cracks and disappears</p>
</blockquote>

<p>Welp, I missed this case... We can add it back as:</p>

<pre><code>if len(sizes) &gt; 2 or 1 not in sizes or has_bad_types:
</code></pre></li>
<li><blockquote>
  <p>also my original script tested if <code>len(x.shape) == 1</code> in order to reject ndm &gt; 1 arrays which item #6 doesn't, but that can be easily added back with something like testing for <code>set(map(np.ndim, arrays)) == set((1,))</code>. This is important because <code>np.size</code> won't distinguish between a length=4 1D array and a 2x2 array.</p>
</blockquote>

<p>Yep, that's right. Taking all the above into account, the final code could look like this:</p>

<pre><code>def to_normalized_data(values):
    arrays = list(map(np.atleast_1d, values))
    sizes = set(map(np.size, arrays))
    have_bad_types = not all(np.can_cast(array.dtype, np.float64) for array in arrays)
    have_several_dimensions = set(map(np.ndim, arrays)) &gt; {1}
    if len(sizes) &gt; 2 or 1 not in sizes or have_bad_types or have_several_dimensions:
        return None
    max_size = max(sizes)
    singletons = [float(array[0]) for array in arrays if array.size == 1]
    iterables = [array.astype(float) for array in arrays if array.size == max_size]
    return singletons + iterables
</code></pre></li>
</ol>
    </div>