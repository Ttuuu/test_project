<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><code>BfSource</code> isn't Brainfuck, it's an intermediate language that's easier to work with. Don't worry about <code>BfConst</code> more than about <code>Add</code>'s <code>Int</code> parameter. You can reuse the <code>Const</code> identifier, this is not a library.</p>

<pre><code>type BfSource = [BfCommand]

parseBf = optimiseBf . mapAccumL pairLoops []
  . mapAccumL countLoopLs 0 . mapMaybe char2bfc

...
char2bfc '[' = Just $ LoopL undefined -- a hack should look like one
...

countLoopLs n (LoopL _) = (n+1, LoopL n)
countLoopLs n b = (n, b)

pairLoops :: [Int] -&gt; BfCommand -&gt; ([Int], BfCommand)
pairLoops st     (LoopL x) = (x:st, LoopL x)
pairLoops (s:st) (LoopR _) = (st, LoopR s)
pairLoops st     b         = (st, b)

optimiseBf :: BfSource -&gt; BfSource
optimiseBf = head . head . filter ((&gt;1) . length) . group
  . iterate (unfoldr $ uncons . reduceBf)

reduceBf :: [BfCommand] -&gt; [BfCommand]
reduceBf (Add a : Add b : bs) = Add (a + b) : bs
...
reduceBf (LoopL _ : Add 1 : LoopR _ : bs) = BfConst 0 : bs

bf2asm :: Handle -&gt; BfCommand -&gt; IO ()
bf2asm handle = hPutStrLn handle . \case
  GoLeft x -&gt; "    " ++ if x == 1 then "inc rcx" else "add rcx, " ++ show x
  ...
  Add x -&gt; unlines
    [ "    mov al, [rcx]"
    , "    " ++ if x == 1 then "inc al" else "add al, " ++ show x
    , "    mov [rcx], al"
    ]
  ...
</code></pre>

<p><code>Sub</code> is superfluous. Just replace <code>Sub 1</code> with <code>Add (-1)</code>. So is one of <code>GoLeft</code> or <code>GoRight</code>.</p>
    </div>