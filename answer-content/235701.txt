<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Final version of the class, incorporating changes suggested by <code>CharlesNRice</code>, and removing the unnecessary callback method.</p>

<pre><code>public class TcpListenerEx : TcpListener
{
    #pragma warning disable 618
    [Obsolete("This method has been deprecated. Please use TcpListenerEx(IPAddress localaddr, int port) instead. https://go.microsoft.com/fwlink/?linkid=14202")]
    public TcpListenerEx(int port) : base(port) { }
    #pragma warning restore 618
    public TcpListenerEx(IPEndPoint localEP) : base(localEP) { }
    public TcpListenerEx(IPAddress localAddr, int port) : base(localAddr, port) { }

    /// &lt;summary&gt;
    /// Accepts a pending connection request as an asyncronous operation.
    /// &lt;/summary&gt;
    /// &lt;param name="cancellationToken"&gt;The token to be monitored for cancellation requests.&lt;/param&gt;
    /// &lt;returns&gt;
    /// The task object representing the asynchronous operation. The Result property on the task object
    /// returns a TcpClient used to send and receive data.
    /// &lt;/returns&gt;
    /// &lt;exception cref="OperationCanceledException"&gt;
    /// The listener was closed  due to the &lt;paramref name="cancellationToken"/&gt; transitioning to a
    /// Cancelled state.  If an inner exception is present it will contain the actual exception which
    /// was thrown by the underlying .Net libraries.  Where there is no inner exception, then the
    /// &lt;paramref name="cancellationToken"/&gt; was cancelled before awaiting a pending connection.
    /// &lt;/exception&gt;
    public async Task&lt;TcpClient&gt; AcceptTcpClientAsync(CancellationToken cancellationToken)
    {
        // Throw an OperationCancelledException if the supplied token is already cancelled
        // Will throw an ObjectDisposedException if the associated CancellationTokenSource is disposed
        cancellationToken.ThrowIfCancellationRequested();

        // Check that the CancellationToken can be cancelled and register a callback if it can
        // Will throw an ObjectDisposedException if the associated CancellationTokenSource is disposed
        CancellationTokenRegistration ctr = default;
        if (cancellationToken.CanBeCanceled)
            ctr = cancellationToken.Register(base.Stop);  // Base keyword included for clarity

        using (ctr)
        try
        {
            return await AcceptTcpClientAsync();
        }
        catch (Exception ex) when (cancellationToken.IsCancellationRequested)
        {
            // Depending on the exact state of the socket, ex could be one of three exceptions:
            //    * SocketException
            //    * ObjectDisposedException
            //    * InvalidOperationException
            //         or
            //    * An as yet unidentified Exception
            // Bubble up the exception as an InnerException of an OperationCancelledException
            throw new OperationCanceledException("AcceptTcpClientAsync() was cancelled.", ex, cancellationToken);
        }
        catch
        {
            // An exception caught without a cancellation request is bubbled to the caller
            throw;
        }
    }
}
</code></pre>
    </div>