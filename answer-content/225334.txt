<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>So far, your code has some general problems that are much more urgent than performance:</p>

<ol>
<li><p>You are <code>using namespace std;</code>.  This is an extremely bad habit and will ruin your life ("this is a contest and I write everything in main" is not an acceptable excuse).  See <a href="https://stackoverflow.com/q/1452721">Why is <code>using namespace std;</code> considered bad practice?</a>.</p></li>
<li><p>The <code>main</code> function is very long and a reader cannot tell at a glance what it does.  If you need so many comments, you should consider refactoring your code.  (Also, why do your comments end with <code>//</code>?)</p></li>
<li><p>You are not making enough use of the standard library.</p></li>
<li><p>There is too little space.  And the indentation is inconsistent.</p></li>
<li><p>The variable names are not helpful.  What is <code>sum1</code>?  <code>s3</code>?</p></li>
<li><p><code>j++</code> is being used instead of the correct <code>++j</code>.  See <a href="https://stackoverflow.com/q/484462">Difference between pre-increment and post-increment in a loop?</a>.</p></li>
</ol>

<p>Also, please avoid <code>std::endl</code> when not necessary.  Use <code>'\n'</code> instead.  See <a href="https://stackoverflow.com/q/213907">C++: <code>std::endl</code> vs <code>\n</code></a>.</p>

<p>And <code>str.erase()</code> is much less intuitive than <code>str.clear()</code>.  (In fact, I didn't know until today that <code>erase</code> can be invoked this way.)</p>

<p>Here's I would write the same code, at the very least: (30 seconds code, not tested comprehensively)</p>

<pre><code>#include &lt;iostream&gt;
#include &lt;numeric&gt;
#include &lt;string&gt;

int hash_code(const std::string&amp; pattern)
{
    // note: c - 'a' + 1 is not portable
    return std::accumulate(pattern.begin(), pattern.end(), 0,
                           [](int x, char c){ return x + (c - 'a' + 1); });
}

void search(const std::string&amp; string, const std::string&amp; pattern)
{
    const int pattern_hash = hash_code(pattern);
    for (std::size_t i = 0; i + pattern.size() &lt;= string.size(); ++i) {
        auto str = string.substr(i, pattern.size());
        if (hash_code(str) == pattern_hash)
            std::cout &lt;&lt; str &lt;&lt; " " &lt;&lt; i &lt;&lt; "\n";
    }
}

int main()
{
    int n;
    std::cin &gt;&gt; n;

    for (int i = 0; i &lt; n; ++i) {
        std::string string, pattern;
        std::cin &gt;&gt; string &gt;&gt; pattern;
        search(string, pattern);
    }
}    
</code></pre>

<p>(Also, the input style is quite strange, I have to admit, but that seems to be beyond your control.)</p>

<p>Incidentally, I don't think you properly implemented the sentence "If no match is found, print -1."</p>
    </div>