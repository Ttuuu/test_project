<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Main question</h2>

<blockquote>
  <p><em>Is this the best practice? Or can you somehow open a connection to a PHP script that communicates with the server in realtime and not close the connection for the duration of the game?</em></p>
</blockquote>

<p>A better approach would be to use <a href="https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API" rel="nofollow noreferrer">web sockets</a>. That way the function doesn't need to run continuously but instead the front-end code can respond to data coming back from the server. <a href="https://www.php.net/manual/en/book.sockets.php" rel="nofollow noreferrer">PHP supports sockets</a> and there are a few examples on the web - e.g. <a href="https://www.php.net/manual/en/sockets.examples.php" rel="nofollow noreferrer">in PHP documentation</a>, <a href="https://phppot.com/php/simple-php-chat-using-websocket/" rel="nofollow noreferrer">this chat application</a> (which actually I don't recommend parts of - e.g. the global variables).</p>

<p>For example:</p>

<pre><code>$(document).ready(function(){
    var websocket = new WebSocket("ws://exampleDomain.com/data_getter.php");
    websocket.onmessage = function(event) {
        var data = JSON.parse(event.data);
        //handle data
    };
</code></pre>

<p>The PHP code would likely need to utilize <a href="https://www.php.net/manual/en/function.socket-create.php" rel="nofollow noreferrer"><code>socket_create()</code></a> &amp;&amp; <a href="https://www.php.net/manual/en/function.socket-send.php" rel="nofollow noreferrer"><code>socket_send()</code></a>.</p>

<hr>

<h2>Other review points (about current code)</h2>

<p>The current code sets <code>ontimeout</code>:</p>

<blockquote>
<pre><code>xmlhttp.ontimeout = function (e) {
    // XMLHttpRequest timed out. Try sending another request
    updateData();
};
</code></pre>
</blockquote>

<p>this could be simplified to</p>

<pre><code>xmlhttp.ontimeout = updateData;
</code></pre>

<p>Bear in mind that the event target <code>e</code> would be passed as the first argument to <code>updateData</code> so if a different set of arguments was needed it would require additional work - e.g. using <code>Function.bind()</code>.</p>

<hr>

<p>With the ready statechange handler, the function <code>updateData()</code> only gets called when the status code is 200</p>

<blockquote>
<pre><code>xmlhttp.onreadystatechange = function() {
    if (this.readyState == 4 &amp;&amp; this.status == 200) {
</code></pre>
</blockquote>

<p>what if there is a different status code? Perhaps it wouldn't be wise to keep making requests to the server, but instead show an error message- e.g. invalid input (4xx) or server error (5xx).</p>
    </div>