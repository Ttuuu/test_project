<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Writing down all your basecases takes a lot of space. I would instead use a dictionary, which could even be a global constant.</p>

<p>I find using <code>n</code> as an argument for something that is not an integer to be misleading. A generic <code>x</code> or <code>s</code> or <code>roman_numeral</code> would be clearer, IMO.</p>

<p>Python has an official style-guide, <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">PEP8</a>. It recommends using four spaces as indentation.</p>

<pre><code>BASE_CASES = {"": 0, "M": 1000, "D": 500, "C": 100, "L": 50, "X": 10, "V": 5, "I": 1}

def roman(s):
    """Takes a roman number x as an argument and returns an integer.
    Assumes that the string is correctly written, i.e. it provides no error-checking.
    """
    if s in BASE_CASES:
         return BASE_CASES[s]

    # If a smaller number precedes a bigger number, 
    # then the smaller number is to be subtracted from 
    # the bigger number. Else, it has to be added:
    first, second = map(roman, s[:2])
    if first &lt; second:
        return second - first + roman(s[2:])
    else:
        return first + roman(s[1:])
</code></pre>

<p>Of course, using a recursive approach in Python is usually not the best idea, converting it to an iterative approach is much better (i.e. usually faster and not fraught with stack limit issues).</p>
    </div>