<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I think you understand the tradeoffs: you can either use <code>__file__</code> everywhere or trust the stack to rewind to the caller's frame of reference. The former looks redundant, but the latter makes your function kinda weird and may behave oddly if the user isn't aware of what's going on. For example, if they decorated your function, then they might get the file path relative to the decorator's file rather than the caller's file. There are ways around this (namely, taking an explicit argument for how far back the call stack to go), but it gets ugly fast.</p>

<p>Python doesn't have macros, so there's no super-clean way to create a function whose global closure is that of the caller rather than where that function is defined. There are, of course, ways to do this, but it adds complexity to the calling code which is what you're trying to avoid.</p>

<p>I'd argue that passing <code>__file__</code> each time doesn't break DRY, because even though that variable has the same name in every context, it means something different each time. You're not repeating yourself, you just have the different value in the same name each time. Doing this makes the calling code more explicit, reduces the opportunity for bugs, simplifies your code, and increases the usability of your function. E.g., the calling code could ask for the file path relative to a parent module if the project was set up such that, say, a function was imported and exposed via an <code>__init__.py</code> up a folder or two.</p>

<p>So in summary, I think the simpler approach that requires passing <code>__file__</code> doesn't break DRY and does conform to KISS.</p>
    </div>