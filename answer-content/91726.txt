<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>1. Stop writing classes</h3>

<p>The title for this section comes from <a href="https://www.youtube.com/watch?v=o9pEzgHorH0" rel="nofollow noreferrer">Jack Diederich's PyCon 2012 talk</a>.</p>

<p>A <em>class</em> represents a group of <em>objects</em> with similar behaviour, and an <em>object</em> represents some kind of persistent <em>thing</em>. So when deciding what classes a program is going to need, the first question to ask is, "what kind of persistent things does this program need to represent?"</p>

<p>In this case the persistent things are:</p>

<ol>
<li>collections of denominations of coins (represented by lists of numbers); and</li>
<li>caches of previously computed results (represented by dictionaries).</li>
</ol>

<p>There does not seem to be a need for any other class of object.</p>

<h3>2. Other review comments</h3>

<ol>
<li><p>If you limited all lines to a maximum of 79 characters, as recommended by the <a href="https://www.python.org/dev/peps/pep-0008/#maximum-line-length" rel="nofollow noreferrer">Python style guide (PEP8)</a>, we wouldn't have to scroll horizontally to read it here.</p></li>
<li><p>Trying to run the code in the post, I get <code>IndentationError</code>. Possibly a copy-paste problem?</p></li>
<li><p>There are docstrings for the classes but they do not explain how to use them. How do I construct instances of these classes? What methods may I call?</p></li>
<li><p>This assertion is too strong:</p>

<pre><code>assert all(type(d) == int for d in denominations)
</code></pre>

<p>The change-making algorithm works with other kinds of numbers than <code>int</code>, for example it works just fine with <a href="https://docs.python.org/3/library/fractions.html" rel="nofollow noreferrer">fractions</a>. See ยง5 below.</p></li>
<li><p>There are, in general, a very large number of ways of making change. So in the case of <code>AllPossibilitiesCoinChanger</code>, it's not a good idea to try to return them all as a list: this will soon fill the available memory. A better strategy is to <em>generate</em> the results one by one, to keep the memory usage bounded.</p></li>
<li><p>For the same reason, it makes no sense to try to cache the results of  <code>AllPossibilitiesCoinChanger</code>: this will fill the available memory. Caching these results doesn't even improve the runtime complexity: copying them out of the cache is no faster (asymptotically speaking) than generating them again.</p></li>
</ol>

<h3>3. Separation of concerns</h3>

<p>The logic for maintaining a cache of previously computed results (that is, for <a href="https://en.wikipedia.org/wiki/Memoization" rel="nofollow noreferrer"><em>memoization</em></a>) is mixed in with the logic for change-making. It would be better to <a href="https://en.wikipedia.org/wiki/Separation_of_concerns" rel="nofollow noreferrer">separate these concerns</a> for clarity, maintainability, and reuse.</p>

<p>Memoization is most elegantly done using a <a href="https://www.python.org/dev/peps/pep-0318/" rel="nofollow noreferrer"><em>decorator</em></a>, for example <a href="https://docs.python.org/3/library/functools.html#functools.lru_cache" rel="nofollow noreferrer"><code>@functools.lru_cache</code></a>.</p>

<h3>4. Revised implementation</h3>

<p>Instead of classes, write functions!</p>

<pre><code>from functools import lru_cache

def partitions(n, values):
    """Generate the ways of expressing n as a sum of items from the tuple
    values (with repetition, ignoring order).

    &gt;&gt;&gt; list(partitions(6, (1, 2, 5)))
    [(1, 1, 1, 1, 1, 1), (1, 1, 1, 1, 2), (1, 1, 2, 2), (1, 5), (2, 2, 2)]

    """
    if n == 0:
        yield ()
    elif not values:
        return
    else:
        first = values[0]
        if first &lt;= n:
            for p in partitions(n - first, values):
                yield (first,) + p
        yield from partitions(n, values[1:])

@lru_cache(maxsize=None)
def count_partitions(n, values):
    """Return the number of ways of expressing n as a sum of items from
    the tuple values (with repetition, ignoring order).

    &gt;&gt;&gt; # Partition numbers: https://oeis.org/A000041
    &gt;&gt;&gt; [count_partitions(i, tuple(range(1, 16))) for i in range(16)]
    [1, 1, 2, 3, 5, 7, 11, 15, 22, 30, 42, 56, 77, 101, 135, 176]

    """
    if n == 0:
        return 1
    elif not values:
        return 0
    else:
        first = values[0]
        count = count_partitions(n, values[1:])
        if first &lt;= n:
            count += count_partitions(n - first, values)
        return count

def partitionable(n, values):
    """Return True if it is possible to express n as a sum of items from
    the tuple values (with repetition).

    &gt;&gt;&gt; partitionable(11, (4, 5))
    False
    &gt;&gt;&gt; partitionable(59, (6, 7))
    True

    """
    return any(True for _ in partitions(n, values))
</code></pre>

<p>Notes:</p>

<ol>
<li><p>The docstrings contain <em>doctests</em>, small code examples that double as tests. These are runnable using the <a href="https://docs.python.org/3/library/doctest.html" rel="nofollow noreferrer"><code>doctest</code></a> module.</p></li>
<li><p>I've omitted <code>minimum_partitions</code>, but it should be clear from the above how I would write it.</p></li>
<li><p>The similarities in the code for <code>partitions</code> and <code>count_partitions</code> makes it tempting to try to combine them into a single algorithm. But this is hopeless, because <code>partitions</code> is a <em>generator</em> that is not memoized (as discussed in ยง2.6 above), whereas <code>count_partitions</code> is an ordinary function that <em>is</em> memoized. Even if we changed <code>partitions</code> to return a list, these functions are so simple that there would be as many differences as there are similarities, so that trying to combine them would just result in a mess that was hard to understand and maintain.</p></li>
</ol>

<h3>5. Fractions</h3>

<p>Here's an example to show why you might not want to insist that the values are <code>int</code>s:</p>

<pre><code>&gt;&gt;&gt; from fractions import Fraction
&gt;&gt;&gt; list(partitions(1, tuple(Fraction(1, i) for i in range(2, 5))))
[(Fraction(1, 2), Fraction(1, 2)),
 (Fraction(1, 2), Fraction(1, 4), Fraction(1, 4)),
 (Fraction(1, 3), Fraction(1, 3), Fraction(1, 3)),
 (Fraction(1, 4), Fraction(1, 4), Fraction(1, 4), Fraction(1, 4))]
</code></pre>
    </div>