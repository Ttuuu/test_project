<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Hello and thanks for sharing your code with us.</p>

<h1>Readability/Maintainability</h1>

<ol>
<li>Variables should only be declared when they are actually used (Unless you are having to work with different scopes). It can become difficult to keep track of what is what when everything is just declared at the top of our scope.  </li>
<li>We should try to stay away from deeply nested structures. Very rarely will you be forced to go even two scopes deep.</li>
<li>When catching exceptions, it is generally best to catch specific exceptions. Although, in this scenario we can afford to be a bit more liberal.<a href="https://stackoverflow.com/questions/21938/is-it-really-that-bad-to-catch-a-general-exception">Here you can find more details on exception handling</a></li>
</ol>

<p>Lets look at some refactored code to see what these changes might look like. Also, take note of various comments left throughout the code base.</p>

<pre><code>public static void main(String[] args) {
    System.out.println("\nYou will have to enter initial and final number between which all the armstrong numbers you want to generate\n");
    int start;
    int end;
    try {
        start = promptForNextNumber("\nEnter the initial number\n");
        end = promptForNextNumber("\nEnter the final number\n");
    } catch (InputMismatchException ex) {
        System.out.println("Input was not a valid integer.");
        return;
    }

    if (start == end) {
        System.out.println("both initial and final numbers are same, no range to generate armstrong numbers");
        return;
    }

    if (start &gt; end) {
        final String message = String.format(
                    "initial number is greater than final number so i will alter them and make a range from %s to %s", end, start);
        System.out.println(message);
        // This is a strange and not recommended way of handling this situation.
            // But if this functionality is apart of the requirement, by all means.
        int temp = start;
        start = end;
        end = temp;
    }

    ...
}
</code></pre>

<p>Take notice of the <code>promptForNextNumber(message)</code> method being called. In command line applications it is very common to prompt a user than collect input. We can capitalize on this pattern so that we do not repeat our selves. The method looks like this:</p>

<pre><code>private static int promptForNextNumber(final String message) {
    System.out.println(message);
    return scanner.nextInt();
}
</code></pre>

<ol start="4">
<li>Lets try to keep our functionality separate in their own methods, this way things can be easily reused if needed and gets rid of the giant mother block of code. Code is easier to understand when it is broken up into tinier chunks. We'll see examples of this in just a bit.  </li>
</ol>

<h1>Alternate Solution</h1>

<p>As @TorbenPutkonen has already pointed out, your algorithm for determining if a number is armstrong or not is a bit harder to follow than it should be. Although imperative programming gets the job done it can be on the more verbose side, even when done correctly. I would like to propose a functional solution:</p>

<pre><code>private static boolean isArmstrong(final String number) {
    final int length = number.length();
    final int sum = number.chars()
            .map(Character::getNumericValue)
            .map(digit -&gt; (int) Math.pow(digit, length))
            .sum();

    return sum == Integer.parseInt(number);
}
</code></pre>

<p>and an overload for easy type converting</p>

<pre><code>// Method overload for easy conversion from int to string.
private static boolean isArmstrong(final int number) {
    return isArmstrong(String.valueOf(number));
}
</code></pre>

<p>We now have methods for determining if a given number is an Armstrong number. Lets use them by first generating a range of numbers and then filtering that range with our new methods. After the filtering process, simply print the results.</p>

<pre><code>public static void main(String[] args) {
    ...


    IntStream.range(start, end)
            .filter(ArmstrongMainRevisioned::isArmstrong)
            .forEach(number -&gt; System.out.println("Number " + number + " is Armstrong"));
}
</code></pre>

<h1>Bringing It All Together</h1>

<p>This is just one of many possible ways this application could be written using these various mentioned techniques.</p>

<pre><code>import java.util.InputMismatchException;
import java.util.Scanner;
import java.util.stream.IntStream;

public class ArmstrongNumberGenerator {
    private static final Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) {
        System.out.println("\nYou will have to enter initial and final number between which all the armstrong numbers you want to generate\n");
        int start;
        int end;
        try {
            start = promptForNextNumber("\nEnter the initial number\n");
            end = promptForNextNumber("\nEnter the final number\n");
        } catch (InputMismatchException ex) {
            // Lets display a slightly more descriptive message describing why the given data was invalid.
            System.out.println("Input was not a valid integer.");
            return;
        }

        if (start == end) {
            System.out.println("both initial and final numbers are same, no range to generate armstrong numbers");
            return;
        }

        if (start &gt; end) {
            // String.format can be used to improve string readability when concatenating a lot of different strings.
            final String message = String.format(
                    "initial number is greater than final number so i will alter them and make a range from %s to %s", end, start);
            System.out.println(message);
            // This is a strange and not recommended way of handling this situation.
            // But if this functionality is apart of the requirement, by all means.
            int temp = start;
            start = end;
            end = temp;
        }

        IntStream.range(start, end)
                .filter(ArmstrongMainRevisioned::isArmstrong)
                .forEach(number -&gt; System.out.println("Number " + number + " is Armstrong"));
    }

    private static boolean isArmstrong(final String number) {
        final int length = number.length();
        final int sum = number.chars()
                .map(Character::getNumericValue)
                .map(digit -&gt; (int) Math.pow(digit, length))
                .sum();

        return sum == Integer.parseInt(number);
    }

    // Method overload for easy conversion from int to string.
    private static boolean isArmstrong(final int number) {
        return isArmstrong(String.valueOf(number));
    }

    // Helper method to display prompt while acquiring user input
    private static int promptForNextNumber(final String message) {
        System.out.println(message);
        return scanner.nextInt();
    }
}

</code></pre>
    </div>