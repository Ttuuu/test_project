<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ol>
<li><p>There are no docstrings. What do <code>homogeneous_type</code> and <code>binSearch</code> do?</p></li>
<li><p>In Python we rarely need to insist that lists be homogeneous. It often makes sense to have heterogeneous lists, provided that all elements support the required operations, for example it can be reasonable to have a list containing a mixture of <code>int</code> and <code>float</code>.</p></li>
<li><p>Checking that the list is homogeneous requires looking at every value to check that it is the required type. But if you are going to look at every value, you don't gain anything by doing a binary search, you might as well just call <code>list1.index(value)</code>.</p></li>
<li><p>Similarly, sorting the list requires looking at every element, so again, there is no point in sorting and then doing a binary search. Skipping the sort and calling <code>list1.index(value)</code> would be faster.</p></li>
<li><p>The binary search code maintains a <em>closed</em> interval <code>left &lt;= i &lt;= right</code> that contains the index of the value being searched for. But maintaining a closed interval requires some complexity when computing the middle index:</p>

<pre><code>midIndex, mod = divmod(left + right, 2)
midIndex = midIndex + 1 if mod else midIndex
</code></pre>

<p>It would be simpler to maintain a <em>half-open</em> interval <code>left &lt;= i &lt; right</code> by starting with <code>right = len(list1)</code>. Then the computation of the midpoint is simple:</p>

<pre><code>midIndex = (left + right) // 2
</code></pre>

<p>(In the half-open version of the code the loop condition needs to be <code>left &lt; right</code> rather than <code>left &lt;= right</code>, and you need to assign <code>right = midIndex</code> rather than <code>right = midIndex - 1</code>.)</p></li>
<li><p>On each iteration of the binary search loop there are <em>three</em> comparisons:</p>

<pre><code>list1[midIndex] == value:
list1[midIndex] &lt; value:
list1[midIndex] &gt; value:
</code></pre>

<p>This can be reduced to <em>one</em> comparison per iteration, like this:</p>

<pre><code>left, right = 0, len(list1)
while left &lt; right:
    mid = (left + right) // 2
    if value &lt; list1[mid]:
        right = mid
    else:
        left = mid + 1
if left &lt; len(list1) and value == list1[left]:
    return left
else:
    raise ValueError("not found")
</code></pre>

<p>Note that this version of the code works fine even if <code>list1</code> is the empty list, allowing you to remove the special case for <code>if not list:</code>.</p></li>
<li><p>Binary search is built into Python: see the <a href="https://docs.python.org/3/library/bisect.html" rel="noreferrer"><code>bisect</code></a> module.</p></li>
</ol>
    </div>