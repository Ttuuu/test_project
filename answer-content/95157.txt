<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1><code>select_conf</code></h1>
<p>In the <code>while</code> loop, you are going through the directory and printing out a list of all the file in the directory so that the user can select the configuration file that they would like to work with.</p>
<p>You are going to end up doing this every time you go through the loop. It would be a better idea to stick this right before the loop so you aren't re-scanning the directory for files each time.</p>
<hr>
<p>What if the user makes a mistake in their typing and accidently enters invalid input? Instead of exiting the program, you should just run the loop and ask for input again.</p>
<hr>
<pre><code>print('%s %s' % ((list.index(file)), file))
</code></pre>
<p>I believe that the first <code>%s</code> should be a <code>%d</code> or a <code>%i</code> because you are formatting a number, not a string.</p>
<hr>
<h1><code>select_section</code></h1>
<p>Same things as last section: don't just exit the program if the user enters invalid input; loop again and give them another chance. Also, put the scanning for sections outside the loop for the same reason as above.</p>
<hr>
<h1><code>edit_option</code></h1>
<p>Could this fail?</p>
<pre><code>Config.read(file)
</code></pre>
<p>You did some error catching around this call in <code>select_section</code>, but you didn't do it here.</p>
<hr>
<p>Same things go for this <code>while</code> loop as for the above ones.</p>
<hr>
<h1>The repeat loops</h1>
<p>You expressed a concern for these in your post.</p>
<p>Yes, you could move these to a function, but the function would require copious areguments.</p>
<p>Here is what I tried:</p>
<pre><code>def get_answer_loop(to_iterate, list, prompt, err_code):
    while True:
        for element in to_iterate:
            list.append(element)
            print('%s %s' % ((list.index(element)), section))
    
        try:
            choice = int(raw_input('\nPlease, ' + prompt + ': '))
            print('You selected: %s' % list[choice])
        except ValueError as e:
            print('Please, enter correct value: %s\n' %e)
            sys.exit(err_code) # either exit, or loop again as I recommended
    
        if answer('Is it OK? [y/n] '):
            logging.info('Selected %s section to work with.' % list[choice])
            return(list[choice], element) #element if needed; return if needed
</code></pre>
<p>Please excuse the naming.</p>
<hr>
<h1>General</h1>
<ul>
<li><p>Near the top of your code or in documentation about the application, you should create a list of all the exit codes and what errors go along with them.</p>
</li>
<li><p>At the end of those <code>while</code> loops where the user selects something, you don't need to have a <code>break</code> after a <code>return()</code>.</p>
</li>
</ul>
    </div>