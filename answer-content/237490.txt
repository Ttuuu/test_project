<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I saw it would be better if I post an answer instead of using comments. </p>

<p>For your <code>IsPrime</code> method, I see that you've covered most conditions, but you forgot to cover 0, 1, and -n cases, which you can just do with a small change on this line :</p>

<p><code>if (n % 2 == 0) return false;</code> </p>

<p>to </p>

<p><code>if (n &lt; 2 || n % 2 == 0) return false;</code></p>

<p>suggested : </p>

<pre><code>public static bool IsPrime(int n)
{
    if(n == 2) { return true; }

    if (n &lt; 2 || (n % 2 == 0)) { return false; }

    for (int x = 3; x * x &lt;= n; x += 2)
    {
        if (n % x == 0) { return false; }
    }

    return true;
}
</code></pre>

<p>For <code>GetDivisors</code>. I assume that you excluded <code>1</code> and <code>n</code> from the results, since it's already known that every natural number is divisible by 1 and itself, which is fine if you intended to use this code personally, but it is uncommon to do that, and it might even conflict with other developers code, as you don't want to assume everybody knows that! so it must be included to make the code more usable for others, and you must always consider what is common use, and what is not.</p>

<p>The technique in @gazoh answer is a really good one, and I would take it to the next level, but I have to note out that <code>Sort</code> and <code>ToArray</code> are expensive operations as I've mentioned in the comments. And I would avoid using them directly. </p>

<p>I've updated this method to : </p>

<pre><code>private static IEnumerable&lt;int&gt; GetDivisors(int n)
{
    if (n &lt;= 0) { yield return default; }

    int iterator = (int)Math.Sqrt(n);

    for (int i = 1; i &lt;= iterator; i++)
    {
        if (n % i == 0)
        {
            yield return i;                    

            if (i != n / i) { yield return n / i; }
        }
    }
}

public static IEnumerable&lt;int&gt; GetDivisors(int n, bool AscendingOrder = false)
{
    return !AscendingOrder ? GetDivisors(n) : GetDivisors(n).OrderBy(x =&gt; x);
}
</code></pre>

<p>I've used <code>IEnumerable&lt;int&gt;</code> to open more acceptable collections types rather than just sticking with an array. The overload is just to have an option to order the data, while the default is <code>unordered</code> data. This would make it optional, which would depend on usage, if you prefer performance over order, or order over performance. Then you can convert it to list or array or any collection. </p>

<p>For performance differences, I've used <code>BenchmarkDotNet</code> to test and compare this method performance and here is the results. </p>

<p><strong>Test 1 using <code>GetDivisors(2095133040)</code></strong></p>

<pre><code>|             Method |                 Mean |               Error |              StdDev |
|------------------- |---------------------:|--------------------:|--------------------:|
|           Original | 5,907,229,864.000 ns | 116,153,274.6298 ns | 155,061,285.3568 ns |
|            ByGazoh |       169,411.783 ns |       2,805.6563 ns |       2,487.1413 ns |
|   IEnumerable&lt;int&gt; |             6.637 ns |           0.1896 ns |           0.2107 ns |
|            OrderBy |            17.514 ns |           0.3013 ns |           0.2516 ns |
|            ToArray |       151,408.141 ns |       2,906.1875 ns |       2,854.2648 ns |
|             ToList |       363,424.079 ns |       5,318.8335 ns |       4,975.2401 ns |
|  ToArray + OrderBy |       154,249.309 ns |       2,370.8673 ns |       2,101.7121 ns |
|   ToList + OrderBy |       356,705.127 ns |       6,002.7773 ns |       5,321.3057 ns |
</code></pre>

<p><strong>Test 2 using <code>GetDivisors(1600)</code></strong></p>

<pre><code>|             Method |         Mean |      Error |     StdDev |
|------------------- |-------------:|-----------:|-----------:|
|           Original | 4,804.474 ns | 93.0708 ns | 91.4080 ns |     
|           ByGazoh  |   515.822 ns |  7.6545 ns |  7.1601 ns |     
|   IEnumerable&lt;int&gt; |     6.391 ns |  0.0966 ns |  0.0904 ns |     
|            OrderBy |    16.783 ns |  0.2839 ns |  0.2517 ns |     
|            ToArray |   422.570 ns |  6.3368 ns |  5.9274 ns |     
|             ToList |   463.575 ns |  8.0975 ns |  7.5744 ns |
|  ToArray + OrderBy | 1,662.728 ns | 26.8204 ns | 25.0878 ns |
|   ToList + OrderBy | 1,634.595 ns | 30.9492 ns | 28.9499 ns |
</code></pre>

<p><strong>ns = nano-second;</strong></p>

<p>Where </p>

<ul>
<li><code>OrderBy</code> = <code>Divisors.GetDivisors(n).OrderBy(x=&gt;x);</code></li>
<li><code>ToArray</code> = <code>Divisors.GetDivisors(n).ToArray();</code></li>
<li><code>ToList</code> = <code>Divisors.GetDivisors(n).ToList();</code></li>
<li><code>ToArray + OrderBy</code> = <code>Divisors.GetDivisors(n).OrderBy(x=&gt;x).ToArray();</code></li>
<li><code>ToList + OrderBy</code> =<code>Divisors.GetDivisors(n).OrderBy(x=&gt;x).ToList();</code></li>
</ul>

<p>Lastly, regarding your tests, I suggest you test each scenario separately.</p>

<p>Example : </p>

<pre><code>[TestMethod]
public void GetDivisors_15_IsEqual()
{
    Assert.AreEqual(new int[] { 3, 5 }, Divisors.Divisors(15));
}

[TestMethod]
public void GetDivisors_16_IsEqual()
{
    Assert.AreEqual(new int[] { 2, 4, 8 }, Divisors.Divisors(16));
}

[TestMethod]
public void GetDivisors_253_IsEqual()
{
    Assert.AreEqual(new int[] { 11, 23 }, Divisors.Divisors(253));
}

[TestMethod]
public void GetDivisors_24_IsEqual()
{
    Assert.AreEqual(new int[] { 2, 3, 4, 6, 8, 12 }, Divisors.Divisors(24));
}
</code></pre>

<p>Â the reason is simple, if you create a separate test for each scenario you have, it'll be easy to determine which part of your code needs adjustments, and it would make things easier for improving your code (say you want to simplify it without breaking the code). Also, it would be more easier to read and follow, and could give you a better view on the requirements, and the validation process of it. </p>

<p>If you don't detailed your tests, in smaller projects you might not have any issues, but in big projects, it'll be a pain in the neck.</p>

<p>I hope this would be useful. </p>
    </div>