<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Since your <code>Theme</code> class is a user defined class, you could do something like :</p>
<pre><code>public class Theme
{   // Cache the reflection once, then reuse it
    private static readonly PropertyInfo[] _properties = typeof(Theme).GetProperties();
    
    // properties 
    
    public Theme() { }
        
    
    public bool IsValid()
    {
        foreach(var property in _properties)
        {   
            var value = property.GetValue(this, null);

            if (value == null)
            {
                return false;
            }
        }
        
        return true;
    }
}
</code></pre>
<p>Or if you are into Linq (thanks Peter Csala):</p>
<pre><code>public bool IsValid() =&gt; _properties.All(property =&gt; property.GetValue(this, null) != null);
</code></pre>
<p>Then this should go like :</p>
<pre><code>public static void Load(Theme theme)
{
    if(!theme.IsValid()) { throw new IncompleteThemeException();    }
    
    AccentBrush = theme.AccentBrush; 
    //... etc..
}
</code></pre>
<p><strong>UPDATE :</strong>
@Blindy suggested to use <code>static</code> reflection and reuse it instead, to avoid creating multiple reflection instances. Which I mostly agree. So, I've updated the code so it can reuse the reflection instance (this including the Linq version as well). (Thanks to Blindy)</p>
    </div>