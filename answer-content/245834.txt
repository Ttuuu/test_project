<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The <code>Records</code> is a backup configuration that would be used if there is any issues on the configuration.</p>
<p>What I think you need is the following workflow:</p>
<ol>
<li>On server startup, read the <code>JSON</code> configuration, download the file, and store <code>JSON</code> values statically.</li>
<li>After server started up, if the <code>JSON</code> values have been changed, get the new values, compared them with the stored values, and execute the logic based on this comparison.</li>
</ol>
<p>So, to prepare that we need to add a child private class which would store the json config values. Next, add static instance of this new private class which would store the current settings and On the ConfigChanged just compare between the new file name and the current one. Then, just  load the settings from local or server or return the default values.</p>
<p>You need a separate method for loading the <code>Default</code> settings (which is the backup). So, at the end you'll have three methods for loading the configurations.</p>
<p>here is the changes you need (I have optout the rest of the code only included the changes).</p>
<pre><code>public class RecordManager
{
    private static JsonConfiguation _jsonConfig; 

    private class JsonConfiguation
    {
        public string RemoteFileName { get; set; }

        public bool LoadDefault { get; set; }

        public bool Reload { get; set; }

        public bool HasNewerFile(JsonConfiguation jsonConfiguation)
        {
            return !RemoteFileName.Equals(jsonConfiguation.RemoteFileName, StringComparison.InvariantCultureIgnoreCase);
        }

        public bool IsConfigFromServer =&gt; !LoadDefault &amp;&amp; !string.IsNullOrWhiteSpace(RemoteFileName);
    }


    
    public RecordManager(IConfiguration configuration, string localPath)
    {
        if(configuration == null) { throw new ArgumentNullException(nameof(configuration)); }
        
        if(localPath?.Length == 0) { throw new ArgumentNullException(nameof(localPath)); }
        
        _localPath = localPath;
        
        _configuration = configuration;
        
        if(_jsonConfig == null)
            _jsonConfig = GetConfigValuesFromJson();

        ChangeToken.OnChange(configuration.GetReloadToken, _ =&gt; ConfigChanged(), new object());
    }   

    private JsonConfiguation GetConfigValuesFromJson()
    {
        string configValue = _configuration["configKey"];
        
        if (string.IsNullOrWhiteSpace(configValue)) { throw new ArgumentNullException(nameof(configValue)); }

        var dcc = JsonConvert.DeserializeObject&lt;ConsulConfig&gt;(configValue);
        
        return new JsonConfiguation
        {
            RemoteFileName = dcc.remoteFileName, 
            LoadDefault = bool.TryParse(dcc.loadDefaultFlag?.ToString(), out bool loadDefaultFlag) ? loadDefaultFlag : false, 
            Reload = bool.TryParse(dcc.reloadConfig?.ToString(), out bool reloadConfig) ? reloadConfig : false
        };
    }

    
    private void ConfigChanged()
    {
        var configNew = GetConfigValuesFromJson();

        // fallback in case if something happened unexpectedly. 
        if (_jsonConfig == null)
        {
            _jsonConfig = configNew;
        }
       
        if(configNew.IsConfigFromServer)
        {
            // if both (the current downloaded and on the remote) are different, 
            // Redownload the file before going to the next step.
            // else just load the local config 

            _records = _jsonConfig.HasNewerFile(configNew) ? GetConfigFromServer() : GetConfigFromLocalFiles();
            _jsonConfig = configNew;
        }
        else
        {
            // here it will cover if the loadDefaultFlag is true or any other issue with the configuration (like missing values)
            // it will reload the default configuration (as a reset switch). 
            _records = GetDefaultConfiguration();
            _jsonConfig = configNew;
        }


        // if it requires to reload the configuration immediately
        // if not, it'll now reload the configuration, and it would be stored in this instance.
        if (configNew.Reload)
        {
            Save();
        }

    }

    private IEnumerable&lt;RecordHolder&gt; GetDefaultConfiguration()
    {
        // get the default config files already present in default "Records" folder
        // and return RecordHolder list back.
    }   

    private IEnumerable&lt;RecordHolder&gt; GetConfigFromServer()
    {
        // get the config files from the server 
        // and return RecordHolder list back.       
    }
    
    
    private IEnumerable&lt;RecordHolder&gt; GetConfigFromLocalFiles()
    {
        // get the config files from the secondary location 
        // and return RecordHolder list back.
    }               
}
</code></pre>
    </div>