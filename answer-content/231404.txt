<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I may or may not have seen a certain movie in the cinema, but the Batman in me wants to say this:</p>

<p><a href="https://i.stack.imgur.com/gaQ5L.jpg" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/gaQ5L.jpg" alt="enter image description here"></a></p>

<p>Not to mention that semicolons don't hurt either.</p>

<p>Also, per @Blindman67, it seems that you are pushing complexity down to the callers. It seems to me a number of callbacks would only want to run for a given <code>key</code>, forcing callers to check the <code>key</code> value is not good design.</p>

<p>For this part: </p>

<blockquote>
  <p>Is there a way to prevent the check on state every single time in
  setState() and stateEmpty()?</p>
</blockquote>

<p>I would declare <code>state</code> like <code>let state = {};</code>
Then you dont need to check in <code>setState</code>, because <code>state</code> is already an <code>Object</code>.
You would write <code>stateEmpty</code> like this:</p>

<pre><code>export const stateEmpty = () =&gt; {
  return !Object.keys(state).length;
}

export const getState = (key) =&gt; {
  return state[key]
}
</code></pre>

<p>This would save you 2 lines, and avoids the akward <code>null</code> value.</p>

<p>The Joker in me considers your <code>beforeSetStateCallbacks</code> and <code>afterSetStateCallbacks</code> as just two parts of the same coin. I have not tested this, but the below should be both possible and cleaner;</p>

<pre><code>let state = {};
const batch = [(key,value)=&gt;state[key] = value];

export const beforeSetState = (fn) =&gt; batch.unshift(fn);
export const afterSetState = (fn) =&gt; batch.push(fn);


export const setState = async (key, value) =&gt; {
  for (const f of batch){
    await f(key, value);
  }
}
</code></pre>

<p>In this vein, this question becomes easier:</p>

<blockquote>
  <p>How would you recommend to implement an "unlisten" function here?</p>
</blockquote>

<p>If the subscriber remembers the function they used to subscribe you could go like this, because now you dont care whether the caller listens to before or after.</p>

<pre><code>export const unhook = (fn) =&gt; batch.splice(0, batch.length, ...batch.filter(f=&gt;f!=fn));
</code></pre>

<p>The last item I want to mention is a <a href="https://en.wikipedia.org/wiki/Graceful_exit" rel="nofollow noreferrer">graceful exit</a>. Your code is short, because for one thing you trust that the caller will always provide a function for <code>fn</code>. Consider adding more type checks, otherwise the stack-trace will end frequently in your code.</p>
    </div>