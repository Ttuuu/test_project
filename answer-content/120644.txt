<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here's a single-pass way to do it. Check the <code>rotateClockwise</code> method. The rest is accessory, but might be worth checking too. In the spirit of object-oriented code reviewing, I made a class around your matrix. Further optimize for code length or performance as needed.</p>

<p>The idea is to consider the matrix as a series of concentric squares (or rings), starting with the outermost one. For each square, starting top left, save the value in temp. Go bottom left, store that value top left. Move the bottom right value bottom left. Etc. It's basically a 4-way swap. Do this for the square's corners, then the values beside them. I move clockwise on the squares between each set of 4 values to swap, but move the values themselves counter-clockwise (not that it matters, but it may help you understand the code). It's admittedly way more confusing than transpose + rotate rows/cols, but it's still another way to do it.</p>

<p>Just to help grasp the matrix indices...</p>

<ul>
<li><code>s</code> is the concentric square index. It therefore can be used as matrix index offset when moving towards inner squares (so it's 0 when doing the outermost square and has no effect then).</li>
<li><code>-1</code> are applied to <code>len</code>, the matrix order (matrix length). Needed to avoid out of bounds index issues.</li>
<li><code>i</code> is used to iterate on square sides. Goes from corner to next to last item.</li>
</ul>

<p>The class, with test <code>main</code>:</p>

<pre><code>/** Integer square matrix class. Clockwise rotation and pretty printing. */
public class IntSquareMatrix {

    private int[][] mat;

    /** Creates a matrix from given array. */
    public IntSquareMatrix(int[][] initialState) {
        mat = initialState;
    }

    /** Creates a matrix with continuous values for tests. */
    public IntSquareMatrix(int order) {
        mat = new int[order][order];
        for (int i = 0; i &lt; order; i++)
            for (int j = 0; j &lt; order; j++)
                mat[i][j] = i * order + j;
    }

    public void rotateClockwise() {
        int temp;
        final int len = mat.length;
        // For each concentric square around the middle of the matrix to rotate...
        // This value will be used as (m, n) offset when moving in.
        // Integer division by 2 will skip center if odd length.
        for (int s = 0; s &lt; len / 2; s++)
            // for the length of this ring
            for (int i = 0; i &lt; len - 2 * s - 1; i++) {
                temp = mat[s][s + i];
                mat[s][s + i] = mat[len - s - i - 1][s];
                mat[len - s - i - 1][s] = mat[len - s - 1][len - s - i - 1];
                mat[len - s - 1][len - s - i - 1] = mat[s + i][len - s - 1];
                mat[s + i][len - s - 1] = temp;
            }
    }

    /**
     * Calculates the maximum width of matrix values for nicer printing.
     * @return cell format String
     */
    private String cellFormat() {
        int absMax = 0;
        for (int[] row : mat)
            for (int val : row)
                if (Math.abs(val) &gt; absMax)
                    absMax = Math.abs(val);
        int cellWidth = (int) Math.log10(absMax) + 2; // account for negatives
        return "% " + cellWidth + "d "; // pad left with spaces
    }

    @Override
    public String toString() {
        String cellFormat = cellFormat();
        StringBuilder sb = new StringBuilder();
        for (int[] row : mat) {
            sb.append("[ ");
            for (int val : row)
                sb.append(String.format(cellFormat, val));
            sb.append("]\n");
        }
        return sb.toString();
    }

    // doesn't belong here, just a demo
    public static void main(String[] args) {
        for (int order = 2; order &lt;= 5; order++) {
            IntSquareMatrix mat = new IntSquareMatrix(order);
            System.out.println("Original:\n" + mat);
            mat.rotateClockwise();
            System.out.println("Rotated:\n" + mat);
        }
    }

}
</code></pre>

<p>Its output:</p>

<pre><code>Original:
[  0  1 ]
[  2  3 ]

Rotated:
[  2  0 ]
[  3  1 ]

Original:
[  0  1  2 ]
[  3  4  5 ]
[  6  7  8 ]

Rotated:
[  6  3  0 ]
[  7  4  1 ]
[  8  5  2 ]

Original:
[   0   1   2   3 ]
[   4   5   6   7 ]
[   8   9  10  11 ]
[  12  13  14  15 ]

Rotated:
[  12   8   4   0 ]
[  13   9   5   1 ]
[  14  10   6   2 ]
[  15  11   7   3 ]

Original:
[   0   1   2   3   4 ]
[   5   6   7   8   9 ]
[  10  11  12  13  14 ]
[  15  16  17  18  19 ]
[  20  21  22  23  24 ]

Rotated:
[  20  15  10   5   0 ]
[  21  16  11   6   1 ]
[  22  17  12   7   2 ]
[  23  18  13   8   3 ]
[  24  19  14   9   4 ]
</code></pre>
    </div>