<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Well I am also newbie on numpy, but your question interested me, so I did some profile check on your code also google some about numpy. Here is what I found</p>

<p><strong>The main reason why you numpy solution is so slow is because of <code>numpy.loadtxt</code></strong></p>

<hr>

<h2>Profiler Result</h2>

<p>Here is the profiler result from your <code>main_with_numpy</code> function</p>

<pre><code>1562753 function calls (1476352 primitive calls) in 1.624 seconds

   Ordered by: cumulative time

 ncalls  tottime  percall  cumtime  percall filename:lineno(function)
        1    0.004    0.004    1.624    1.624 gen_cylinder_pressure_data_from_csv.py:55(main_with_numpy)
        1    0.032    0.032    1.609    1.609 npyio.py:765(loadtxt)
        3    0.430    0.143    1.545    0.515 npyio.py:994(read_data)
    86401    0.144    0.000    0.452    0.000 npyio.py:982(split_line)
    86400    0.086    0.000    0.316    0.000 npyio.py:1019(&lt;listcomp&gt;)
172800/86400    0.228    0.000    0.243    0.000 npyio.py:966(pack_items)
...
</code></pre>

<p>And result from your <code>main_pure_python</code> function</p>

<pre><code>195793 function calls (195785 primitive calls) in 0.241 seconds

   Ordered by: cumulative time

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
        1    0.000    0.000    0.241    0.241 gen_cylinder_pressure_data_from_csv.py:76(main_pure_python)
        1    0.015    0.015    0.240    0.240 gen_cylinder_pressure_data_from_csv.py:31(write_data)
     8641    0.078    0.000    0.224    0.000 gen_cylinder_pressure_data_from_csv.py:7(get_data)
    86401    0.082    0.000    0.082    0.000 {method 'split' of 'str' objects}
        1    0.042    0.042    0.050    0.050 {method 'readlines' of '_io._IOBase' objects}
</code></pre>

<p><strong>Almost 8 times slower</strong> and check the <code>npyio.py:765(loadtxt)</code> cost most of the time</p>

<p>You used generator in your <code>main_pure_python</code> to read data, so to eliminate the effect from <em>loadtxt</em> so I check the part of the function <strong>after</strong> load data</p>

<p>Here is the result</p>

<p>With numpy</p>

<pre><code>2917 function calls in 0.008 seconds

   Ordered by: cumulative time

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
        1    0.000    0.000    0.008    0.008 gen_cylinder_pressure_data_from_csv.py:81(deal_data_numpy)
        1    0.004    0.004    0.006    0.006 npyio.py:1143(savetxt)
</code></pre>

<p>Without numpy</p>

<pre><code>9369 function calls in 0.011 seconds

   Ordered by: cumulative time

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
        1    0.009    0.009    0.011    0.011 gen_cylinder_pressure_data_from_csv.py:44(deal_data)
     7921    0.001    0.000    0.001    0.000 {method 'append' of 'list' objects}
      720    0.000    0.000    0.000    0.000 {built-in method builtins.max}
</code></pre>

<p>with numpy is slightly faster.</p>

<hr>

<h2>Why <code>numpy.loadtxt</code> is slow</h2>

<p>Sorry I can't help you review your numpy code. But I google about this question why <code>numpy.loadtxt</code> so slow.</p>

<p><a href="http://akuederle.com/stop-using-numpy-loadtxt" rel="nofollow noreferrer">Here is the original link</a></p>

<blockquote>
  <p>Seriously, stop using the numpy.loadtxt() function (unless you have a
  lot of spare timeâ€¦). Why you might ask? - Because it is SLOW! - How
  slow you might ask? - Very slow! Numpy loads a 250 mb csv-file
  containing 6215000 x 4 datapoints from my SSD in approx. 35 s!</p>
</blockquote>

<p><a href="https://stackoverflow.com/questions/18259393/numpy-loading-csv-too-slow-compared-to-matlab">Another relative links about this problem</a></p>

<p>So as mentioned in these links <code>pandas</code> might be better choice for you to read csv file or leave it to just pure python</p>
    </div>