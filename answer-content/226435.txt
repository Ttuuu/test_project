<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Answer to the Performance Issue</strong><br>
Anytime there are a list of variables named NAMEi where i is an integer, there is a strong chance that a container such as std::array or std::vector should be used. Sometimes using a table rather than multiple <code>if</code> statements can improve performance.</p>

<p>Indexing into an array will prevent the repetitive code that is currently in the solution:</p>

<pre><code>#include &lt;array&gt;

int main()
{
const int inputSize = 10;
const int frequencyCount = 6;
std::array&lt;int, inputSize&gt; inputValues;
std::array&lt;int, frequencyCount&gt; freqs;

    ...
}
</code></pre>

<p>The array <code>freqs</code> will contain the frequency of the occurrence, there are a couple of ways to index into the array <code>freqs</code>. One would be to subtract 80 from the input value.</p>

<p>This will reduce the multiple <code>if</code> statements into a simple increment of an item in an array. It will also reduce the amount of code necessary to print the frequencies.</p>

<p>When performance is an issue, prefer "\n" over <code>std::endl</code>. The use of <code>std::endl</code> flushes the output which may mean there is a system call for each use. A system call can add a great deal of time.</p>

<p>Remove the <code>do/while</code> loop in the error checking.</p>

<p><strong>Use the Container Classes Provided by C++</strong><br>
The code currently appears to be C rather than C++. It is using the old style C arrays, C++ supplies an <code>array</code> container class as part of the standard library. Using the <a href="http://www.cplusplus.com/reference/array/array/" rel="noreferrer">array</a> container class would allow you to use iterators instead of indexes, at least for printing. Here is a second <a href="https://en.cppreference.com/w/cpp/container/array" rel="noreferrer">reference</a>.</p>

<p><strong>Avoid Using Namespace STD</strong><br>
If you are coding professionally you probably should get out of the habit of using the "using namespace std;" statement. The code will more clearly define where cout and other functions are coming from (std::cin, std::cout). As you start using namespaces in your code it is better to identify where each function comes from because there may be function name collisions from different namespaces. The function cout you may override within your own classes. This <a href="https://stackoverflow.com/questions/1452721/why-is-using-namespace-std-considered-bad-practice">stack overflow question</a> discusses this in more detail.</p>

<p><strong>DRY Code</strong><br>
There is a programming principle called the <a href="https://en.wikipedia.org/wiki/Don%27t_repeat_yourself" rel="noreferrer">Don't Repeat Yourself Principle</a> sometimes referred to as DRY code. If you find yourself repeating the same code mutiple times it is better to encapsulate it in a function. If it is possible to loop through the code that can reduce repetition as well.</p>

<p><strong>Complexity</strong><br>
The function <code>main()</code> is too complex (does too much). As programs grow in size the use of <code>main()</code> should be limited to calling functions that parse the command line, calling functions that set up for processing, calling functions that execute the desired function of the program, and calling functions to clean up after the main portion of the program.</p>

<p>There is also a programming principle called the Single Responsibility Principe that applies here. <a href="https://en.wikipedia.org/wiki/Single_responsibility_principle" rel="noreferrer">The Single Responsibility Principle states</a>:</p>

<blockquote>
  <p>that every module, class, or function should have responsibility over a single part of the functionality provided by the software, and that responsibility should be entirely encapsulated by that module, class or function.</p>
</blockquote>

<p>There are at least 3 possible functions in <code>main()</code>.<br>
  - Get the user input<br>
  - Get process the frequencies<br>
  - Print the frequencies  </p>

<p><strong>Magic Numbers</strong><br>
There are Magic Numbers in the <code>main()</code> function (79 and 86), it might be better to create symbolic constants for them to make the code more readble and easier to maintain. These numbers may be used in many places and being able to change them by editing only one line makes maintainence easier.</p>

<p>Numeric constants in code are sometimes referred to as <a href="https://en.wikipedia.org/wiki/Magic_number_(programming)" rel="noreferrer">Magic Numbers</a>, because there is no obvious meaning for them. There is a discussion of this on <a href="https://stackoverflow.com/questions/47882/what-is-a-magic-number-and-why-is-it-bad">stackoverflow</a>.</p>
    </div>