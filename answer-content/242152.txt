<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This is accomplished more elegantly and minimally by:</p>

<ol>
<li>Fetching methods from relevant modules</li>
<li>Assigning these methods to the class, programmatically</li>
</ol>

<p>We can further ensure that methods are intended for the class by checking whether <code>self</code> is in the input signature, and can omit specific methods by name. Below accomplishes this:</p>

<pre class="lang-py prettyprint-override"><code>from inspect impport getfullargspec
from package_a import module_1a, module_2a
import package_b.module_1b

class Unifier():
    def __init__(self):
        pass

args = lambda x: getfullargspec(x).args
modules = (module_1a, module_2a, module_1b)  # extendable
to_exclude = ['_method_to_omit']

for module in modules:
    mm = get_module_methods(module)
    for name, method in mm.items():
        if name in to_exclude or 'self' not in args(method):
            continue
        setattr(Unifier, name, method)
</code></pre>

<p>Now <code>Main</code>, after inheriting <code>Unifier</code>, will have all <code>fn(self, ...)</code> methods from <code>module_1a, module_2a, module_1b</code> (except <code>def _method_to_omit</code>).</p>

<ul>
<li><code>get_module_methods</code> <a href="https://codereview.stackexchange.com/questions/242109/get-methods-in-module-python/#answer-242148">source</a></li>
<li>Method class assignment ideas derived from <a href="https://stackoverflow.com/questions/61739682/bound-method-class-fn-vs-bound-method-fn">this Q&amp;A</a></li>
</ul>
    </div>