<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>1) Use the <code>java.util.Deque</code> instead of the <code>java.util.Stack</code></p>

<pre><code>A more complete and consistent set of LIFO stack operations is provided by the Deque interface and its implementations, which should be used in preference to this class. For example:

   Deque&lt;Integer&gt; stack = new ArrayDeque&lt;Integer&gt;();
</code></pre>

<p>Source: <a href="https://docs.oracle.com/javase/9/docs/api/java/util/Stack.html" rel="nofollow noreferrer">https://docs.oracle.com/javase/9/docs/api/java/util/Stack.html</a></p>

<p>2) Remove the "Integer" from the ArrayList section and use the List interface in the left section.</p>

<pre class="lang-java prettyprint-override"><code>    List&lt;Integer&gt; indicesList = new ArrayList&lt;&gt;();
</code></pre>

<p>3) Instead of using the <code>java.lang.String#charAt</code> method, I suggest that you use an array and iterate on each instead.</p>

<pre class="lang-java prettyprint-override"><code>        char[] charArray = input.toCharArray();
        for (int i = 0; i &lt; charArray.length; i++) {
            char currentChar = charArray[i];

            if (st.isEmpty()) {
                if (currentChar == ')') {
                    indicesList.add(i);
                }
                if (currentChar == '(') {
                    st.push("(" + i);
                }
            } else {
                if ((currentChar == ')') &amp;&amp; st.peek().charAt(0) == '(') {
                    st.pop();
                }
                if (currentChar == '(') {
                    st.push("(" + i);
                }
            }
        }
</code></pre>

<p>4) Create methods to check the type of parentheses</p>

<pre class="lang-java prettyprint-override"><code>   //[...]
   public static String balanceParenthesis(String input) {
            if (st.isEmpty()) {
                if (isClosingParentheses(input.charAt(i))) {
                    indicesList.add(i);
                }
                if (isOpeningParentheses(input.charAt(i))) {
                    st.push("(" + i);
                }
            } else {
                if (isClosingParentheses(input.charAt(i)) &amp;&amp; isOpeningParentheses(st.peek().charAt(0))) {
                    st.pop();
                }
                if (isOpeningParentheses(input.charAt(i))) {
                    st.push("(" + i);
                }
            }
   //[...]
   }


    private static boolean isOpeningParentheses(char currentChar) {
        return currentChar == '(';
    }

    private static boolean isClosingParentheses(char currentChar) {
        return currentChar == ')';
    }
</code></pre>

<p>5) Instead of using "if and else", you can use if-else-if and extract similar logic in methods.</p>

<pre class="lang-java prettyprint-override"><code>            final boolean isDequeEmpty = st.isEmpty();
            final boolean isClosingParentheses = isClosingParentheses(currentChar);

            if (isDequeEmpty &amp;&amp; isClosingParentheses) {
                indicesList.add(i);
            } else if (isDequeEmpty &amp;&amp; isOpeningParentheses(currentChar)) {
                st.push("(" + i);
            } else if (!isDequeEmpty &amp;&amp; isClosingParentheses) {
                st.pop();
            } else if (!isDequeEmpty &amp;&amp; isOpeningParentheses(currentChar)) {
                st.push("(" + i);
            }
</code></pre>

<p>6) Use the <code>java.lang.StringBuilder</code> instead of the <code>java.lang.StringBuffer</code></p>

<pre><code>As of release JDK 5, this class has been supplemented with an equivalent class designed for use by a single thread, StringBuilder. The StringBuilder class should generally be used in preference to this one, as it supports all of the same operations but it is faster, as it performs no synchronization.
</code></pre>

<p>Source: <a href="https://docs.oracle.com/javase/9/docs/api/java/lang/StringBuffer.html" rel="nofollow noreferrer">https://docs.oracle.com/javase/9/docs/api/java/lang/StringBuffer.html</a></p>
    </div>