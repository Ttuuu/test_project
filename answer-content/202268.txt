<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Data types</h1>

<ul>
<li><p>Why not use a simple <code>point</code> struct instead of <code>std::pair&lt;int, int&gt;</code>? It doesn't have to do anything, just a simple one would suffice:</p>

<pre><code>struct point {
    int x = 0;
    int y = 0;
};
</code></pre>

<p>This would increase readability and generally might make the code more bug resistent. Remember, <code>std::pair&lt;int, int&gt;</code> can represent many different things: points, vectors, health + mana points, entry in a <code>std::map&lt;int, int&gt;</code> (which by itself can have many different meanings), exchange rate of apples for oranges, ...</p>

<p>Using a concrete type prevents that kind of confusion.</p></li>
<li><p>Similarly, one could make a type alias <code>polygon</code> for <code>std::vector&lt;point&gt;</code>, like</p>

<pre><code>using polygon = std::vector&lt;point&gt;;
</code></pre>

<blockquote>
  <p>A more advanced implementation could instead take a polygon as a range of points (= a pair of iterators), or use its own <code>polygon</code> class.</p>
</blockquote></li>
</ul>

<h1><code>perdot</code></h1>

<ul>
<li><p>The name doesn't match what it actually does. Yes, the perpendicular dot product is used internally, but the returned value isn't the result of it. The returned value only indicates whether the point is left of, right of or on the line - and the function name should reflect that, e.g. something like <code>determine_side</code>.</p></li>
<li><p>The return values seem kinda arbitrary. Why not use an enum instead, like</p>

<pre><code>enum class side {
    left,
    right,
    center
};
</code></pre></li>
<li><p>The order of the parameters seems kind of arbitrary and unintuitive. Why do the points of the "line" have to be passed as first and third parameter? With a simple help from the type system, this could be clarified a lot by introducing a small <code>line</code> helper struct:</p>

<pre><code>struct line {
    point from;
    point to;
};
</code></pre></li>
</ul>

<p>Putting all those fixes together (and refactoring the perpendicular dot product into its own helper function), we get:</p>

<pre><code>int perpendicular_dot_product(point a, point b, point c) noexcept {
    const auto ab_x = b.x - a.x;
    const auto ab_y = b.y - a.y;
    const auto ac_x = c.x - a.x;
    const auto ac_y = c.y - a.y;

    return ab_x * ac_y - ab_y * ac_x;
}


side determine_side(line l, point p) noexcept {
    const auto per_dot = perpendicular_dot_product(l.from, p, l.to);

    if(per_dot &lt; 0)
    {
        return side::right;
    }
    else if(per_dot &gt; 0)
    {
        return side::left;
    }

    return side::center;
}
</code></pre>

<p>Much nicer to read and much clearer in its intent, right?</p>

<h1><code>is_convex</code></h1>

<ul>
<li><p>Bug: If <code>n &lt;= 2</code> then the code likely doesn't work as intended, and might even access out of bounds memory. Please add checks for those cases.</p>

<blockquote>
  <p>Now the question becomes: What should happen in those cases? Always return <code>false</code>, or throw an exception?</p>
  
  <p>I think always returning <code>false</code> would be better in this case, since it is just a query whether the contained data set conforms to some criteria. YMMV.</p>
</blockquote></li>
<li><p>Also, there is another edge case if all points in <code>convex_polygon</code> are on a line. Currently, <code>is_convex</code> returns <code>true</code> for that case, but is this intended? I wouldn't assume so.</p></li>
</ul>

<p>Other than that, it seems to be working fine. It would need some adjustments for the changes mentioned above, though, and could be slightly simplified.</p>

<pre><code>bool is_convex(const polygon&amp; convex_polygon) noexcept
{
    const auto n = convex_polygon.size();
    if(n &lt;= 2) return false;

    auto sense = side::center;

    for(auto i = 0u; i &lt; n; ++i)
    {
        auto new_sense = determine_side(line{convex_polygon[i], convex_polygon[(i + 2) % n]}, convex_polygon[(i + 1) % n]);

        if(sense == side::center)
        {
            sense = new_sense;
        }
        else if(new_sense != side::center &amp;&amp; new_sense != sense)
        {
            return false;
        }
    }

    return sense != side::center;
}
</code></pre>

<h1><code>is_inside</code></h1>

<p>Not much to do here, other than adjusting for above changes and some slight simplification.</p>

<pre><code>bool is_inside(const polygon&amp; convex_polygon, const point p) noexcept
{
    const auto n = convex_polygon.size();

    const auto sense = determine_side(line{convex_polygon[n - 1], convex_polygon[0]}, p);
    if(sense == side::center)
    {
        return false;
    }

    for(auto i = 0u; i + 1 &lt; n; ++i)
    {
        auto new_sense = determine_side(line{convex_polygon[i], convex_polygon[i + 1]}, p);

        if(new_sense != sense)
        {
            return false;
        }
    }
    return true;
}
</code></pre>

<h1><code>p_inside</code></h1>

<p>Again, the name is weird: Why not use <code>count_points_inside</code>?</p>

<p>Other than that, the logic seems fine. It could however easily be simplified using an algorithm provided by the standard library: <code>std::count_if</code> (inside header <code>&lt;algorithm&gt;</code>).</p>

<pre><code>int count_points_inside(const polygon&amp; convex_polygon, const std::vector&lt;point&gt;&amp; points)
{
    return std::count_if(std::begin(points), std::end(points), [&amp;](auto p) { return is_inside(convex_polygon, p); });
}
</code></pre>

<blockquote>
  <p>Note how I <strong>didn't</strong> replace the type of <code>points</code> with <code>polygon</code> and used a <code>std::vector&lt;point&gt;</code> instead, since (at least for the human reader) there is a semantic difference between a polygon and a set of points.</p>
  
  <p>A better version would takes <code>points</code> as a range of points instead:</p>

<pre><code>template&lt;typename Iter, typename = std::enable_if_t&lt;std::is_same_v&lt;point, typename std::iterator_traits&lt;Iter&gt;::value_type&gt;&gt;
int count_points_inside(const polygon&amp; convex_polygon, Iter first, Iter last)
{
    return std::count_if(first, last, [&amp;](auto p) { return is_inside(convex_polygon, p); });
}
</code></pre>
  
  <p>(The <code>typename = std::enable_if_t&lt;...&gt;</code> part is only there to verify that the passed iterators point to <code>point</code>s. The code would work without that.)</p>
</blockquote>

<h1><code>main</code></h1>

<ul>
<li><p>Errors should be printed to <code>std::cerr</code> instead of <code>std::cout</code>.</p></li>
<li><p>Some better instructions for the user would be nice. Currently, the user only ever gets notified if something goes wrong and thus has no clue what actually is expected of him.</p></li>
<li><p>The entering procedures of <code>convex_polygon</code> and <code>points</code> could be refactored out into a helper function, since the logic overlaps quite a lot.</p></li>
<li><p>In the error case, a different return value should be used, like <code>1</code> (or <code>EXIT_FAILURE</code> from the <code>&lt;cstdlib&gt;</code> header, to be more descriptive) in order to indicate that the program didn't execute as planned.</p></li>
<li><p>The final <code>return 0;</code> statement could be removed, as the compiler will autogenerate that one. (If it isn't removed, <code>EXIT_SUCCESS</code> could be returned instead as a more descriptive value).</p></li>
</ul>

<h1>Q &amp; A</h1>

<ol>
<li><p>Generally, I try to pass everything but containers (including classes that contain containers as data members) and non-copyable types by value as default. I only switch to references if I either know that the type is very large, or performance measurements show that passing by reference is a performance benefit.</p>

<p>If in doubt, measure.</p></li>
<li><p><code>const</code> is used well for function parameters. However, local variables that aren't being changed can also benefit from being marked <code>const</code> (see snippets above, e.g. for <code>perpendicular_dot_product</code>).</p></li>
<li><p>See above. Other than that, some functions like <code>perpendicular_dot_product</code> or <code>determine_side</code> could be made <code>constexpr</code>, as esote mentions in his answer. This would allow the compiler to precalculate those calls at compile time if the values are known.</p></li>
<li><p>I'd suggest trying test-driven development (i.e. write test before writing the actual implementation). Other than that, know your edge cases, and test those specifically (that way, you're unlikely to get bugs like the ones in <code>is_convex</code>).</p></li>
</ol>
    </div>