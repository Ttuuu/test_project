<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>has a time complexity of O(n^2).</p>
</blockquote>

<p>I think you are incorrectly using "n" as if it is the size of the n×n matrix.</p>

<p>The "n" in O() notation refers to the total size of the input data.</p>

<p>So, for a m×m matrix, the "n" value for complexity would be m<sup>2</sup>.</p>

<p>Your algorithm is O(n).</p>

<hr>

<blockquote>
  <p>This code doesn't use extra memory</p>
</blockquote>

<p>Is there a specific reason for doing the swap trick the way you did rather than simply using the more obvious method with an <code>auto int temp;</code> on the stack?</p>

<p><code>auto</code> memory is allocated on a stack, so it exists only during the invocation of the function.
After that, it can be reused by other functions.
Unless a function is called recursively, there's no cumulative problem with using temporary stack space; that's what it's for.</p>

<p>And if an algorithm should ever actually require persistent storage, it would be done using <code>static</code> rather than <code>auto</code>.</p>

<hr>

<blockquote>
  <p>This is C using the Original K&amp;R C.</p>
</blockquote>

<p>The biggest drawback to using that is that you don't get the benefit of typechecking, which was introduced in C89.</p>

<p>The compiler won't notice any problem with this:</p>

<pre><code>swap(&amp;_matrix[i][j],&amp;_matrix[j][i]);
swap(_matrix[i][j],_matrix[j][i]);
swap("me", "you");
</code></pre>

<p>but at runtime things will fail.</p>

<p>I hope you are at least using <code>lint</code> on the source to check for such problems.</p>
    </div>