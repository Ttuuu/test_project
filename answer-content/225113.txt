<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Specific suggestions:</p>

<ol>
<li>It is idiomatic to wrap the stuff after <code>if __name__ == "__main__":</code> in a <code>main</code> function.</li>
<li>Rather than the generic <code>data</code> I would suggest figuring out exactly which information you want to attach to each <code>Tree</code> and creating fields for each of them rather than a fully generic <code>list</code> of stuff. This will make it much less painful to work with actual <code>Tree</code>s because you can use for example <code>tree.name</code> or <code>tree.counter</code> instead of <code>tree.data[0]</code> and <code>tree.data[1]</code>.</li>
<li>You can <code>enumerate</code> a <code>list</code> to loop over it without maintaining a separate index variable, as in <code>for index, child in enumerate(root.children):</code></li>
</ol>

<p>In general it'll be much easier to see how to improve this code once it's wired into a production use case rather than example code. The problem with writing code to an example "spec" is that the example inevitably doesn't completely fit the production use case - some crucial features will be missing and others will be superfluous. For example, storing the count of children separately. This information is already encoded in the length of the <code>children</code> <code>list</code>, so you are duplicating the information for no obvious reason. This could conceivably be useful if you're dealing with giant amounts of data, but if your application is sufficiently optimized that this is a real concern you probably should look into other languages or frameworks like numpy or pandas.</p>

<p>General suggestions:</p>

<ol>
<li><a href="https://github.com/ambv/black" rel="nofollow noreferrer"><code>black</code></a> can automatically format your code to be more idiomatic.</li>
<li><a href="https://github.com/timothycrosley/isort" rel="nofollow noreferrer"><code>isort</code></a> can group and sort your imports automatically.</li>
<li><p><a href="https://gitlab.com/pycqa/flake8" rel="nofollow noreferrer"><code>flake8</code></a> with a strict complexity limit will give you more hints to write idiomatic Python:</p>

<pre><code>[flake8]
max-complexity = 4
ignore = W503,E203
</code></pre>

<p>(The max complexity limit is not absolute by any means, but it's worth thinking hard whether you can keep it low whenever validation fails. For example, I'm working with a team on an application since a year now, and our complexity limit is up to 7 in only one place. Conversely, on an ugly old piece of code I wrote without static analysis support I recently found the complexity reaches 87!)</p></li>
<li><p>I would then recommend adding <a href="https://docs.python.org/3/library/typing.html" rel="nofollow noreferrer">type hints</a> everywhere and validating them using a strict <a href="https://github.com/python/mypy" rel="nofollow noreferrer"><code>mypy</code></a> configuration:</p>

<pre><code>[mypy]
check_untyped_defs = true
disallow_untyped_defs = true
ignore_missing_imports = true
no_implicit_optional = true
warn_redundant_casts = true
warn_return_any = true
warn_unused_ignores = true
</code></pre></li>
</ol>
    </div>