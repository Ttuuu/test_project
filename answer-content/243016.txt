<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>PHP</h2>

<h3>SQL injection vulnerabilities</h3>

<p>This code is wide-open to <a href="https://phpdelusions.net/sql_injection" rel="nofollow noreferrer">SQL injection attacks</a>. User input should be sanitized as supplied to the query using parameters (e.g. with <a href="https://www.php.net/manual/en/mysqli.prepare.php" rel="nofollow noreferrer"><code>mysqli_prepare()</code></a> and <a href="https://www.php.net/manual/en/mysqli-stmt.bind-param.php" rel="nofollow noreferrer"><code>bind_param()</code></a>).</p>

<h3>Indentation</h3>

<p>The indentation is somewhat consistent but then in some places it increases without a block-level change - e.g. in the PHP code most lines are indented with four spaces, which is very common, and then when <code>$sql</code> is declared it increases to eight spaces.</p>

<blockquote>
<pre><code>$conn = mysqli_connect($host, $user, $pass, $db); 
      $sql = "SELECT * FROM `foodtablebusiness` WHERE category = " . $categoryID; 
</code></pre>
</blockquote>

<h3>Fetching results</h3>

<p>Instead of using a while loop with <code>mysqli_fetch_assoc()</code> just to push into an array, use <a href="https://www.php.net/manual/en/mysqli-result.fetch-all.php" rel="nofollow noreferrer"><code>mysqli_fetch_all()</code></a> to get an array with one call.</p>

<h3>Selecting fields</h3>

<p>Additionally, the SQL query selects all fields - i.e. with <code>SELECT *</code>. Instead of selecting <code>*</code>, specify the field names needed in order to exclude any fields not needed in the front end.</p>

<h2>Javascript</h2>

<h3>Variable scope</h3>

<p>In this line:</p>

<blockquote>
<pre><code>ajaxRequest = createAJAXRequestToPopulateList(selector.options[selector.selectedIndex].value);
</code></pre>
</blockquote>

<p>it makes a global variable <code>ajaxRequest</code> because there is no <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/var" rel="nofollow noreferrer"><code>var</code></a>, <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let" rel="nofollow noreferrer"><code>let</code></a> or <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const" rel="nofollow noreferrer"><code>const</code></a> keyword before it. Use <code>const</code> to limit the scope to the function <code>addActivityItem</code>.</p>

<h3>Utilizing jQuery</h3>

<p>It appears that jQuery is used, given the usage of <a href="https://api.jquery.com/jQuery.ajax/" rel="nofollow noreferrer"><code>$.ajax()</code></a> (though if that is wrong then the following won't work). Presuming that is the case, then the other code can be simplified using jQuery utilities.</p>

<p>For example:</p>

<blockquote>
<pre><code>var selector = document.getElementById("categorySelector");
ajaxRequest = createAJAXRequestToPopulateList(selector.options[selector.selectedIndex].value);
</code></pre>
</blockquote>

<p>can be simplified to the following using the <a href="https://api.jquery.com/val/" rel="nofollow noreferrer"><code>.val()</code></a> method:</p>

<pre><code>const selector = $('#categorySelector');
const ajaxRequest = createAJAXRequestToPopulateList(selector.val());
</code></pre>
    </div>