<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The <strong>number one problem</strong> here is that you concatenate translated letters on to your string one at a time.  Since strings are immutable in .NET (and most right thinking languages), this means for the first translated character your program allocates space for a new string of length 1 (copying the previous 0-char string), for the second character it allocates space for a new string of length 2 (copying the previous 1-char string), for the third character it allocates space for a new string of length 3 (copying the previous 2-char string), and so on.  The end result is that for an input <em>n</em> characters long, your program will allocate 1 + 2 + 3 + ... + n = <span class="math-container">\$O(n^2)\$</span> space and, similarly, perform <span class="math-container">\$O(n^2)\$</span> operations!  A better structure is to use a .NET <code>StringBuilder</code> which is designed precisely for this piecemeal kind of string construction.  Using a <code>StringBuilder</code> your program will allocate <span class="math-container">\$O(n)\$</span> space and perform <span class="math-container">\$O(n)\$</span> operations -- that's a big saving when your input is of any non-trivial length.</p>
    </div>