<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here is a solution using the original format string, instead of the inverted format string suggested by Reindeerien.</p>

<hr>

<p>Your difficulty come in manually building up the original string parts from the spans of the original string.  If you maintained a list of the starting points (which is the start of the string and the end of every group), and a list of the ending points (which is the start of every group, and the end of the string), you could use these to retrieve the parts of the original string you want to keep:</p>

<pre><code>start = [0] + [m.end(i+1) for i in range(m.lastindex)]
end = [m.start(i+1) for i in range(m.lastindex)] + [None]
</code></pre>

<p>We can glue these parts together with a placeholder which we will substitute the desired value in:</p>

<pre><code>fmt = "{}".join(sentence[s:e] for s, e in zip(start, end))
</code></pre>

<p>Using <code>"{}"</code> as the joiner will create a string like <code>The {} is {} and I {} it</code>, which makes a perfect <code>.format()</code> string to substitute in the desired replacements:</p>

<pre><code>def repl(sentence, subject, color, verb=None):
    m = re.match(regex, sentence)
    start = [0] + [m.end(i+1) for i in range(m.lastindex)]
    end = [m.start(i+1) for i in range(m.lastindex)] + [None]
    fmt = "{}".join(sentence[s:e] for s, e in zip(start, end))
    return fmt.format(subject, color, verb)
</code></pre>

<p>If you dont mind being a little cryptic, we can even make this into a shorter 3-line function:</p>

<pre><code>def repl(sentence, subject, color, verb=None):
    m = re.match(regex, sentence)
    idx = [0] + [pos for i in range(m.lastindex) for pos in m.span(i+1)] + [None]
    return "{}".join(sentence[s:e] for s, e in zip(*[iter(idx)]*2)).format(subject, color, verb)
</code></pre>
    </div>