<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I asked a very similar question <a href="https://codereview.stackexchange.com/questions/234456/c-rest-http-client-abstraction/234493#234493">here</a></p>

<p>The thing that came out of it that I think you should think about is that there's no need to add Get / Post etc. to the interface. You can handle all that with extension methods. The answer to my question helped me with that. Here's the interface that I ended up with. Much simpler.</p>

<p><a href="https://github.com/MelbourneDeveloper/RestClient.Net/blob/c176ffc17f3814607159bdbe5991387215f8465d/RestClient.Net.Abstractions/IClient.cs#L9" rel="nofollow noreferrer">Code Reference</a></p>

<pre><code>/// &lt;summary&gt;
/// Dependency Injection abstraction for rest clients. Use the IClientFactory abstraction when more than one client is needed for an application.
/// &lt;/summary&gt;
public interface IClient
{
    /// &lt;summary&gt;
    /// Adapter for serialization/deserialization of http body data
    /// &lt;/summary&gt;
    ISerializationAdapter SerializationAdapter { get; }

    /// &lt;summary&gt;
    /// Sends a strongly typed request to the server and waits for a strongly typed response
    /// &lt;/summary&gt;
    /// &lt;typeparam name="TResponseBody"&gt;The expected type of the response body&lt;/typeparam&gt;
    /// &lt;typeparam name="TRequestBody"&gt;The type of the request body if specified&lt;/typeparam&gt;
    /// &lt;param name="request"&gt;The request that will be translated to a http request&lt;/param&gt;
    /// &lt;returns&gt;&lt;/returns&gt;
    Task&lt;Response&lt;TResponseBody&gt;&gt; SendAsync&lt;TResponseBody, TRequestBody&gt;(Request&lt;TRequestBody&gt; request);

    /// &lt;summary&gt;
    /// Default headers to be sent with http requests
    /// &lt;/summary&gt;
    IHeadersCollection DefaultRequestHeaders { get; }

    /// &lt;summary&gt;
    /// Default timeout for http requests
    /// &lt;/summary&gt;
    TimeSpan Timeout { get; set; }

    /// &lt;summary&gt;
    /// Base Uri for the client. Any resources specified on requests will be relative to this.
    /// &lt;/summary&gt;
    Uri BaseUri { get; set; }

    /// &lt;summary&gt;
    /// Name of the client
    /// &lt;/summary&gt;
    string Name { get; }
}
</code></pre>

<p>Here are the extension methods that add PostAsync, GetAsync and so on</p>

<pre><code>public static class CallExtensions
{
    public static Task&lt;Response&lt;TResponseBody&gt;&gt; SendAsync&lt;TResponseBody, TRequestBody&gt;(this IClient client, Request&lt;TRequestBody&gt; request)
    {
        if (client == null) throw new ArgumentNullException(nameof(client));
        return client.SendAsync&lt;TResponseBody, TRequestBody&gt;(request);
    }

    #region Get
    public static Task&lt;Response&lt;TResponseBody&gt;&gt; GetAsync&lt;TResponseBody&gt;(this IClient client)
    {
        return GetAsync&lt;TResponseBody&gt;(client, default(Uri));
    }

    public static Task&lt;Response&lt;TResponseBody&gt;&gt; GetAsync&lt;TResponseBody&gt;(this IClient client, string resource)
    {
        try
        {
            return GetAsync&lt;TResponseBody&gt;(client, resource != null ? new Uri(resource, UriKind.Relative) : null);
        }
        catch (UriFormatException ufe)
        {
            if (ufe.Message == "A relative URI cannot be created because the 'uriString' parameter represents an absolute URI.")
            {
                throw new UriFormatException(Messages.ErrorMessageAbsoluteUriAsString, ufe);
            }

            throw;
        }
    }

    public static Task&lt;Response&lt;TResponseBody&gt;&gt; GetAsync&lt;TResponseBody&gt;(this IClient client, Uri resource = null, IHeadersCollection requestHeaders = null, CancellationToken cancellationToken = default)
    {
        return SendAsync&lt;TResponseBody, object&gt;(client,
            new Request&lt;object&gt;(
                resource,
                default,
                requestHeaders,
                HttpRequestMethod.Get,
                client,
                cancellationToken));
    }
    #endregion

    #region Delete
    public static Task&lt;Response&gt; DeleteAsync(this IClient client, string resource)
    {
        return DeleteAsync(client, resource != null ? new Uri(resource, UriKind.Relative) : null);
    }

    public static async Task&lt;Response&gt; DeleteAsync(this IClient client, Uri resource = null, IHeadersCollection requestHeaders = null, CancellationToken cancellationToken = default)
    {
        var response = (Response)await SendAsync&lt;object, object&gt;(client,
        new Request&lt;object&gt;(
              resource,
            default,
            requestHeaders,
            HttpRequestMethod.Delete,
            client,
            cancellationToken));

        return response;
    }
    #endregion

    #region Put
    public static Task&lt;Response&lt;TResponseBody&gt;&gt; PutAsync&lt;TResponseBody, TRequestBody&gt;(this IClient client, TRequestBody requestBody)
    {
        return PutAsync&lt;TResponseBody, TRequestBody&gt;(client, requestBody, default);
    }

    public static async Task&lt;Response&lt;TResponseBody&gt;&gt; PutAsync&lt;TResponseBody, TRequestBody&gt;(this IClient client, TRequestBody requestBody, string resource)
    {
        return await PutAsync&lt;TResponseBody, TRequestBody&gt;(client, requestBody, resource != null ? new Uri(resource, UriKind.Relative) : null);
    }

    public static Task&lt;Response&lt;TResponseBody&gt;&gt; PutAsync&lt;TResponseBody, TRequestBody&gt;(this IClient client, TRequestBody requestBody = default, Uri resource = null, IHeadersCollection requestHeaders = null, CancellationToken cancellationToken = default)
    {
        return SendAsync&lt;TResponseBody, TRequestBody&gt;(client,
            new Request&lt;TRequestBody&gt;(
                resource,
                requestBody,
                headers: requestHeaders,
                HttpRequestMethod.Put,
                client,
                cancellationToken));
    }
    #endregion

    #region Post
    public static Task&lt;Response&lt;TResponseBody&gt;&gt; PostAsync&lt;TResponseBody, TRequestBody&gt;(this IClient client, TRequestBody requestBody)
    {
        return PostAsync&lt;TResponseBody, TRequestBody&gt;(client, requestBody, default);
    }

    public static Task&lt;Response&lt;TResponseBody&gt;&gt; PostAsync&lt;TResponseBody, TRequestBody&gt;(this IClient client, TRequestBody requestBody, string resource)
    {
        return PostAsync&lt;TResponseBody, TRequestBody&gt;(client, requestBody, resource != null ? new Uri(resource, UriKind.Relative) : default);
    }

    public static Task&lt;Response&lt;TResponseBody&gt;&gt; PostAsync&lt;TResponseBody, TRequestBody&gt;(this IClient client, TRequestBody requestBody, Uri resource, IHeadersCollection requestHeaders = null, CancellationToken cancellationToken = default)
    {
        return SendAsync&lt;TResponseBody, TRequestBody&gt;(client,
            new Request&lt;TRequestBody&gt;(
                resource,
                requestBody,
                requestHeaders,
                HttpRequestMethod.Post,
                client,
                cancellationToken));
    }
    #endregion

    #region Patch
    public static Task&lt;Response&lt;TResponseBody&gt;&gt; PatchAsync&lt;TResponseBody, TRequestBody&gt;(this IClient client, TRequestBody requestBody)
    {
        return PatchAsync&lt;TResponseBody, TRequestBody&gt;(client, requestBody, default);
    }

    public static Task&lt;Response&lt;TResponseBody&gt;&gt; PatchAsync&lt;TResponseBody, TRequestBody&gt;(this IClient client, TRequestBody requestBody, string resource)
    {
        return PatchAsync&lt;TResponseBody, TRequestBody&gt;(client, requestBody, resource != null ? new Uri(resource, UriKind.Relative) : default);
    }

    public static Task&lt;Response&lt;TResponseBody&gt;&gt; PatchAsync&lt;TResponseBody, TRequestBody&gt;(this IClient client, TRequestBody requestBody, Uri resource, IHeadersCollection requestHeaders = null, CancellationToken cancellationToken = default)
    {
        return SendAsync&lt;TResponseBody, TRequestBody&gt;(client,
            new Request&lt;TRequestBody&gt;(
                resource,
                requestBody,
                requestHeaders,
                HttpRequestMethod.Patch,
                client,
                cancellationToken));
    }
    #endregion
}
</code></pre>
    </div>