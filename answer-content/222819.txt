<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><p>The loop</p>

<pre><code>while pointer &gt;= len(players):
    pointer = pointer - len(players)
</code></pre>

<p>is a long way to say <code>pointer %= len(players)</code>.</p></li>
<li><p>You'd be in a better position factoring the computations into a function,</p>

<pre><code>def survivor(n):
    skip = 0
    players = [x for x in range (1, n+1)]
    pointer = 0
    while len(players) &gt; 1:
        pointer += skip
        while pointer &gt;= len(players):
            pointer = pointer - len(players)
        players.pop(pointer)
        skip += 1
    return players[0]
</code></pre>

<p>and adding an <code>if __name__ == '__main__'</code> clause. This way it is easy to generate first few results.</p></li>
</ul>

<hr>

<p>TL;DR</p>

<p>I did so, generated first 20 numbers,</p>

<pre><code>    1 2 2 2 4 5 4 8 8 7 11 8 13 4 11 12 8 12 2
</code></pre>

<p>and search this sequence in OEIS. </p>

<p>Surprisingly there was a <a href="https://oeis.org/search?q=1%2C2%2C2%2C2%2C4%2C5%2C4%2C8%2C8&amp;language=english&amp;go=Search" rel="nofollow noreferrer">match</a>. A closer inspection demonstrated that the problem is a <a href="https://en.wikipedia.org/wiki/Josephus_problem" rel="nofollow noreferrer">Josephus problem</a> with eliminating every <code>n</code>-th person. Try to prove, or at least convince yourself, that it is indeed the case.</p>

<p><a href="https://oeis.org/A007495/a007495_2.txt" rel="nofollow noreferrer">Further reading</a> revealed that there is a linear solution.</p>
    </div>