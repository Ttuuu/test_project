<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This is the textbook example of an inner join. The most canonical way to have your <code>id</code> columns being used for the matching, set them as an index first (here using <code>inplace</code> operations to save on extra variable names; depending on your use, you might prefer new copies instead):</p>

<pre><code>dat1.set_index('id', inplace=True)
dat2.set_index('id', inplace=True)
</code></pre>

<p>Then, the whole operation becomes this simple <a href="https://pandas.pydata.org/pandas-docs/stable/user_guide/merging.html#joining-on-index" rel="nofollow noreferrer">join on index</a>:</p>

<pre><code>&gt;&gt;&gt; overall_data = dat1.join(dat2, how='inner')
&gt;&gt;&gt; overall_data

    dat1  dat2
id
2     56    19
3     57    19
4     45    20
</code></pre>

<p>If you do <strong>not</strong> want to modify the original DataFrames, you can use utility function <a href="https://pandas.pydata.org/pandas-docs/stable/user_guide/merging.html#brief-primer-on-merge-methods-relational-algebra" rel="nofollow noreferrer">merge</a> instead, which performs the same operation, but needs the common column name specified explicitely:</p>

<pre><code>&gt;&gt;&gt;  pd.merge(dat1, dat2, how='inner', on='id')

   id  dat1  dat2
0   2    56    19
1   3    57    19
2   4    45    20
</code></pre>
    </div>