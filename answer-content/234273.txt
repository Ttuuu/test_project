<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You can use <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce" rel="nofollow noreferrer"><code>reduce</code></a> for this purpose. Group the objects into an aggregate object by some key which we can make a parameter to a function <code>mergeByKey</code>. This function takes any number of object arrays which are then flattened (change <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/flat" rel="nofollow noreferrer"><code>flat</code></a> to <code>[].concat(...objArrs)</code> for better browser compatibility) then <code>reduce</code>d into a single object. During grouping, object spreading updates the value for each unique key as you did. Finally, extract the array of values from the grouping object using <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_objects/Object/values" rel="nofollow noreferrer"><code>Object.values</code></a> which is the final result.</p>

<p>Time complexity of the original version was <code>O((n*longest_obj_length)^2)</code>, but the updated version is <code>O(n*longest_obj_length)</code>.</p>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>const mergeByKey = (key, ...objArrs) =&gt;
  Object.values(objArrs.flat().reduce((a, e) =&gt; {
    a[e[key]] = {...a[e[key]], ...e};
    return a;
  }, {}))
;

const constList = [
  { name: "jack", id: "1", designation: "hr" },
  { name: "mary", id: "2", designation: "it" },
  { name: "john", id: "3", designation: "fin" }
];

const apiList = [
  { name: "jack", id: "1", height: "10" },
  { name: "mary", id: "2", height: "20" }
];

console.log(mergeByKey("id", constList, apiList));</code></pre>
</div>
</div>

    </div>