<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Well, instead of reinventing the well, I have done a search and found:</p>

<ul>
<li><a href="https://stackoverflow.com/questions/21868368/units-of-measurement-in-c">Design patterns - Units of measurement in C++</a></li>
<li><a href="https://stackoverflow.com/questions/19910888/type-safe-physics-operations-in-c">C++11 - Type safe physics operations in C++</a></li>
<li><a href="https://www.codeproject.com/Articles/791511/%2fArticles%2f791511%2fUnits-of-measurement-types-in-Cplusplus-Using-comp" rel="nofollow noreferrer">Units of measurement types in C++. Using compile time template programming</a></li>
</ul>

<p>From those links, you can find other links like units from boost.</p>

<p>Some library are more complete than others and will allows to do unit conversions for example.</p>

<p>By the way, C++ already contains units for duration (seconds, minutes, hoursâ€¦)</p>

<p>As you have noticed, your approach don't scale well when adding other unit types and is relatively limited since you only support some unspecified unit for a given measurement (are you using SI or US units?). </p>

<p><del>Finally some of your operator seems to return incorrect type like <code>operator *</code> which seems to ignore LEN2, MASS2...</del> OK This one is used when multiplying by a number.</p>

<ul>
<li>In the constructor <code>dim(const TYPE value)</code> there is no point to specify <code>const</code>. In fact, you might want to prevent <code>TYPE</code> from being a reference.</li>
<li>You might consider making that constructor <code>explicit</code> to prevent unwanted conversion.</li>
<li>For * operator, you might want to provide an operator where the left hand-side is a number. It would need to be a free function. Because of commutativity, you could simply call existing member function that take a number on the right side.</li>
<li>For your comparison operators, you don't handle right-hand side the same way for all operators if left and right operator are not of the same type. For <code>==</code> and <code>&lt;</code> you will get a static assertion if the dimensions are different while for others (!=, &gt;, &lt;=, &gt;=), the function would not be defined (and the conversion constructor would not be used because it is explicit). </li>
</ul>
    </div>