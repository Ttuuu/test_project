<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>With extra <code>O(n)</code> space the complexity can be made <code>O(n)</code> only, without sorting that will take <code>O(nlogn)</code></p>
<p>Use a map and add a value for each key as (previousValue +1) or (previousValue - 1) based on array type A or B.
Also use a counter to track an absolute increase or decrease if at end the counter is 0. Then the two array has same number of occurrence else not.</p>
<p>[Edited: Added code]</p>
<p>A java implementation</p>
<pre><code>import java.util.HashMap;

public class Main {

    public static void main(String[] args) {

        HashMap&lt;Integer, Integer&gt; trackMap = new HashMap&lt;&gt;();
        int n = 6;
        int[] a = {4, 12, 4, 10, 6, 10};
        int[] b = {10, 12, 10, 4, 4, 6};
        int counter = 0;
        for (int i = 0; i &lt; n; i++) {
            if (!trackMap.containsKey(a[i])) {
                trackMap.put(a[i], 1);
                counter++;
            } else {
                int prevVal = trackMap.get(a[i]);
                trackMap.put(a[i], prevVal + 1);
                counter = counter + ((Math.abs(prevVal) &gt; Math.abs(prevVal + 1)) ? -1 : 1);
            }
            if (!trackMap.containsKey(b[i])) {
                trackMap.put(b[i], -1);
                counter++;
            } else {
                int prevVal2 = trackMap.get(b[i]);
                trackMap.put(b[i], prevVal2 - 1);
                counter = counter + ((Math.abs(prevVal2) &gt; Math.abs(prevVal2 - 1)) ? -1 : 1);
            }
        }
        System.out.println(counter == 0 ? "Lucky" : "Unlucky");
    }
}
</code></pre>
<p>Or instead if using counter, you cand finally iterate the hashMap if all value are zero then the person is lucky else not</p>
    </div>