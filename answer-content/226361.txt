<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3><code>random.randrange()</code></h3>

<p>It looks like these are just used as an argument to <code>random.choice()</code> for picking random coordinates.  <code>random.randrange(start, stop, step)</code> would work.  This also might be a good place to create a function that returns a random coordinate.</p>

<pre><code>X_START = 10
X_STEP = 90
X_LIMIT = width - 10

Y_START = 10
Y_STEP = 30
Y_LIMIT = 390

def random_coordinate():
    """return a random coordinate on the game grid."""

    x = random.rangrange(X_START, X_LIMIT, X_STEP)
    y = random.rangrange(Y_START, Y_LIMIT, Y_STEP)

    return x, y
</code></pre>

<p>Then when a random coordinate is needed in the program, call the function:</p>

<pre><code>point_xy = random_coordinate()
cherry_xy = random_coordinate()
poison_xy = random_coordinate()
</code></pre>

<h3>using <code>range()</code> to count down</h3>

<p>Instead of using:</p>

<pre><code>for i in range(1,len(player)):
    player[len(player)-i].undraw()
    ...
</code></pre>

<p>use:</p>

<pre><code>for i in range(len(player)-1, 0, -1):
        player[i].undraw()
        ... 
</code></pre>

<h3>functions</h3>

<p>On stack overflow, they recommended using functions, because they can make your code easier to read, understand, debug, etc.  The general rule of thumb (or guideline) it a unit of code should fit on one screen.  That way it can be seen all at once without needing to scroll up and down.  Your code has several comments that say what the next part of the code does.  That may be a good hint that that chunk of code could be a separate function.  ( comments starting with # &lt;- are explanations for you, I wouldn't  normally put them in )</p>

<pre><code>LINEX_START = 20
LINEX_STEP = 20
LINEY_START = 20
LINEY_STEP = 20


def main_window():
    win = GraphWin("SNAKE", width, height, autoflush = False)
    win.setBackground(color_rgb(15,15,15))

    return win       # &lt;- other functions will need win, so return it


def draw_grid(win):  # &lt;- need 'win' to draw the lines so it gets passed in

    for lineX in range(LINEX_START, WIDTH, LINEX_STEP)
        gridX = Line(Point(lineX,0),Point(lineX, GRID_HEIGHT))
        gridX.setOutline(color_rgb(25,25,25))
        gridX.draw(win)

    for lineY &lt;= GRIDHEIGHT:
        gridY = Line(Point(0,lineY),Point(WIDTH, lineY))
        gridY.setOutline(color_rgb(25,25,25))
        gridY.draw(win)

def draw_banner(win):
    UI = Rectangle(Point(0,400),Point(width,height))
    UI.setFill(color_rgb(102,51,0))
    UI.setOutline(color_rgb(102,51,0))
    UI.draw(win)

    snakeTitle = Text(Point(width/2,420),"SNAKE")
    snakeTitle.setTextColor("green")
    snakeTitle.setSize(20)
    snakeTitle.draw(win)

    scoreTitle = Text(Point(320,424),"SCORE")
    scoreTitle.setTextColor("white")
    scoreTitle.setSize(10)
    scoreTitle.draw(win)

def init_score(win):
    scoreUI = Text(Point(320,435),score)
    scoreUI.setTextColor("white")
    scoreUI.setSize(10)
    scoreUI.draw(win)

    return scoreUI

def make_player()
    player = [
        Rectangle(Point(x-20-radius,y-radius), Point(x-20+radius, y+radius)),
        Rectangle(Point(x-40-radius,y-radius), Point(x-40+radius, y+radius)),
        Rectangle(Point(x-60-radius,y-radius), Point(x-60+radius, y+radius)),
    ]

    return player
</code></pre>

<p>The same applies to <code>main()</code>.  Chunks of related code can be put into their own function.  This isn't tested, and doesn't include everything, but I hope it gives you some ideas.</p>

<pre><code>def update_score(score_UI, score):
    scoreUI.undraw()
    scoreUI = Text(Point(320,435),score)
    scoreUI.setTextColor("white")
    scoreUI.setSize(10)
    scoreUI.draw(win)


def update_player(player, win):
    """
    Grows the length of the player's body by 1 square and moves the
    snake forward one space.  All the trailing parts of the body follow
    the part ahead of them.
    """

    # generating new body blocks
    if len(player) &lt; MAXPLAYERLENGTH:
        player.append(player[-1].clone())

    # body following player
    player[0].undraw()
    for i in range(len(player)-1, 0, -1):
        player[i].undraw()
        player[i] = player[i-1].clone()
        player[i].draw(win)

    # update player's head coordinate
    player[0] = Rectangle(Point(x-radius,y-radius), Point(x+radius,y+radius))
    player[0].setFill("green")
    player[0].setWidth(2)
    player[0].draw(win)


def main():
    global timer
    score = 0
    bonus = 0
    ...

    point = random_coordinate()
    cherry = random_coordinate()
    poison = random_coordinate()

    win = main_window()    # &lt;- save return value
    make_grid(win)         # &lt;- to use it here
    show_banner(win)       # &lt;- and here

    player = make_player()
    score_UI = init_score()

    game = True
    while game:
        update_score(score_UI, score)

        update_player(player)
        move_player(player)

        handle_points(points, player)
        handle_cherries(cherries, player)
        handle_poison(poison, player)

etcetera
</code></pre>

<p>good luck.</p>
    </div>