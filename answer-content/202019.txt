<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<pre><code>        std::cout &lt;&lt; "Enter two numbers." &lt;&lt; std::endl;
</code></pre>

<p>You are looking to accept <em>integers</em>, not just numbers (i.e. \$1.0, 1e0, 0b1, 0x1\$).</p>

<p>Avoid <code>std::endl</code>.  <a href="https://en.cppreference.com/w/cpp/io/manip/endl" rel="nofollow noreferrer"><code>std::endl</code></a> inserts a newline character into an output sequence and flushes it as if by calling <code>stream.put(stream.widen('\n'))</code> followed by <code>stream.flush()</code>.  If you just want to insert a newline character, then stream <code>'\n'</code>.</p>

<pre><code>std::cout &lt;&lt; "Enter two integers:\n"; // can append it on C strings
</code></pre>

<hr>

<pre><code>        std::cin &gt;&gt; _a &gt;&gt; _b;
</code></pre>

<p>Think about how you want to handle inputs.  You are expecting 2 integers, but what if they pass you one integer? No integers (or send end-of-file)? For those cases, you should check if the value was read successfull (see 10.10 in your book).  </p>

<p>When a value cannot be extracted from the stream, the streamable types in C++ will typically set <code>std::ios::failbit</code>.  When <a href="https://en.cppreference.com/w/cpp/string/basic_string/operator_ltltgtgt" rel="nofollow noreferrer"><code>std::string</code></a> is the type being extracted, a failure to extract leaves the data in the string unchanged.  For other types, like the numeric types, the extraction operation will assign 0 on failure.</p>

<p>If the stream enters a fail state, you won't be able to extract from it until you <a href="https://en.cppreference.com/w/cpp/io/basic_ios/clear" rel="nofollow noreferrer"><code>clear()</code></a> the error flag.  Not clearing the error flag would result in an infinite loop once the stream entered the error state.</p>

<pre><code>        std::cin.clear();
</code></pre>

<p>What if the user enters more than 2 integers? Should you keep reading from the line? Doing this, you'll need to make sure both values are extracted, even if one failed.  Could you <code>ignore()</code> the remaining input until end of line? You were only expecting two integers, so this is an option.</p>

<pre><code>        std::cin.ignore(std::numeric_limits&lt;std::streamsize&gt;::max(), '\n');
</code></pre>

<hr>

<pre><code>        a = std::stoi(_a);
        b = std::stoi(_b);
        std::cout &lt;&lt; "You entered " &lt;&lt; a &lt;&lt; " and " &lt;&lt; b &lt;&lt; std::endl;
</code></pre>

<p>What happens if the extraction from <code>std::cin</code> fails? Either <code>_a</code>, <code>_b</code>, or both could be empty and <a href="https://en.cppreference.com/w/cpp/string/basic_string/stol" rel="nofollow noreferrer"><code>std::stoi</code> will throw <code>std::invalid_argument</code></a> when an empty string is encountered.</p>

<p><code>std::stoi</code> will truncate at the decimal separator and return the number to that point.  If you want to validate that the string represents an integer, you need to make sure <code>std::stoi</code> reads the full buffer.</p>

<pre><code>        std::size_t last_pos_read;
        a = std::stoi(_a, std::address_of(last_pos_read));
        if (last_pos_read != _a.length()) {
            throw std::invalid_argument("Not an integer.");
        }
</code></pre>

<p>Inexperience aside, the big lesson you should take from this review is to test! Test inputs of type integer (negatives, zero, positives, 16/32/64bit values), floating point (representable/nonrepresentable values), string/containers (empty/nonempty, small/large sizes). Test failures at different times, like an immediate failure or a failure after a successful loop.</p>
    </div>