<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I don't really see room for groundbreaking improvements, so this review is going to be nitpicky, brace yourself!</p>

<h3>Looping over pairs of values</h3>

<p>This loops over multiple lines, with two values per line:</p>

<blockquote>
<pre><code>for i in $(cut -d' ' -f1,2 /proc/mounts | grep -F " $mdir/")
</code></pre>
</blockquote>

<p>I think it would be much better to write this is a <code>while read</code> loop,
reading into a pair of variables with descriptive names.
That will make it easier to understand, and you will be able to get rid of the conditional processing in the loop body.</p>

<h3>Which commands don't need checking</h3>

<p>I don't know. I would use a very vanilla Linux installation as the benchmark.
I would look around in <code>docker run -it alpine</code>.
I just did, and I confirm that <code>modinfo</code> and <code>readlink</code> are both available,
so I think it's safe to assume they are there.</p>

<h3>Is it guaranteed that <code>/media</code> is the only place to find the mount points?</h3>

<p>I don't think so. Why not consider all mount points of block devices?</p>

<h3>Shortening long lines</h3>

<p>As you yourself noticed, there are a few long lines that would be good to shorten somehow.</p>

<hr>

<p>Here the path <code>/lib/modules/$(uname -r)/kernel/fs</code> is repeated,
and the pipeline segment <code>find ... -name "*.ko" -print0 | xargs -r -0 /sbin/modinfo</code> is repeated:</p>

<blockquote>
<pre><code>COMPREPLY=($(grep "^[[:space:]]$cur" /proc/filesystems) $(find "/lib/modules/$(uname -r)/kernel/fs" -name "*.ko" -print0 | xargs -r -0 /sbin/modinfo | sed -ne 's/^alias: *fs-//p' | grep "^$cur"))
...

local encodings=(/sys/module/nls_* $(find "/lib/modules/$(uname -r)/kernel/fs/nls" -name '*.ko' -print0 | xargs -r -0 /sbin/modinfo | sed -ne 's/^\(name\|alias\): *//p'))
</code></pre>
</blockquote>

<p>I would mitigate that with a variable and a helper function.</p>

<hr>

<p>Here there are simply many parameters to pass that make the line long:</p>

<blockquote>
<pre><code>COMPREPLY=($(compgen -W "$(printf '%q\n' "${mounts[@]}" "${devices[@]}" "${symlinks[@]}" "${symlinks[@]#/dev/}")" -- "$cur"))
</code></pre>
</blockquote>

<p>I would mitigate that by putting those arrays into another array with a descriptive name.</p>

<hr>

<p>Here I don't really see why not write the loop on multiple lines:</p>

<blockquote>
<pre><code>devices=($(for i in ${allowed[*]} "${removable[@]}"; do test -b "$i" &amp;&amp; echo "$i"; done | grep -vxF "$(cut -d' ' /proc/mounts -f1)"))
</code></pre>
</blockquote>

<h3>Variable naming</h3>

<p>Most of the names are great, except <code>i</code> in all the loops.
When iterating over elements instead of counting,
I really prefer using a name that describes the current item.</p>

<h3>Declaring <code>local</code> variables</h3>

<p>In some places you declared variables long before they were actually used.
I would delay the declaration as much as possible,
and definitely combine with initialization when possible.
That way I don't have to scan back in the code to see if the variable is <code>local</code> or not.</p>

<h3>Indentation</h3>

<p>The indentation is inconsistent, a mix of 3 or 4 spaces. I would use 4 consistently.</p>
    </div>