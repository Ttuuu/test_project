<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You currently have to loop over all exclude words to check if it is equal to the current word. If your <code>exclude</code> was a <a href="https://docs.python.org/3/library/stdtypes.html#types-set" rel="nofollow noreferrer"><code>set</code></a>, you could just do <code>if j in exclude</code>. This change alone should speed up your code a lot (how much depends on how large your list of exclude words actually is).</p>

<p>In addition, you could simplify getting the exclude words:</p>

<pre><code>from collections import Counter
form itertools import takewhile

THRESHOLD = 25

words = Counter(whatever_generates_your_words())
exclude = set(t[0] for t in takewhile(lambda t: t[1] &lt;= THRESHOLD,
                                      reversed(words.most_common())))
</code></pre>

<p>This uses the fact that <a href="https://docs.python.org/3/library/collections.html#collections.Counter.most_common" rel="nofollow noreferrer"><code>collections.Counter.most_common</code></a> is sorted by frequency, so reversing it starts with the least common words. <a href="https://docs.python.org/3/library/itertools.html#itertools.takewhile" rel="nofollow noreferrer"><code>itertools.takewhile</code></a> stops taking when the condition is no longer true, so you don't need to go through all words in the <code>Counter</code>.</p>

<p>For the filtering you should probably use some <a href="https://www.pythonforbeginners.com/basics/list-comprehensions-in-python" rel="nofollow noreferrer">list comprehensions</a>. All three of the following functions are doing the same thing:</p>

<pre><code>from itertools import filterfalse

def remove_nonfrequent(note):
    sentences = []
    for sentence in note.split('. '):
        sentence_ = []
        for word in sentence:
            if word not in exclude:
                sentence_.append(word)
        if sentence:
            sentences.append(" ".join(sentence))
    return ". ".join(sentences)

def remove_nonfrequent(note):
    return ". ".join(" ".join(filterfalse(exclude.__contains__,
                              sentence.split(" ")))
                     for sentence in note.split('. '))
                     if sentence)

def remove_nonfrequent(note):        
    return ". ".join(" ".join(word for word in sentence.split(" ")
                              if word not in exclude)
                     for sentence in note.split('. ') if sentence)
</code></pre>

<p>I personally prefer the last one, as it is the most readable one to me.</p>

<p>Note that Python has an official style-guide, <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">PEP8</a>, which recommends using 4 spaces as indentation and surrounding operators with spaces.</p>

<hr>

<p>Since you are using this function with <code>pandas</code> later, a different approach might actually be faster. There is a <a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.replace.html" rel="nofollow noreferrer"><code>pd.Series.replace</code></a> method that can take a dictionary of replacements. You can use it like this:</p>

<pre><code>from itertools import repeat

replacements = dict(zip((fr'\b{word}\b' for word in exclude), repeat("")))
df.NOTES.replace(replacements, regex=True, inplace=True)
df.NOTES.replace({r' +': ' ', r' +\.': '.'}, regex=True, inplace=True)
</code></pre>

<p>The first replace does all the word replacements (using <code>\b</code> to ensure only complete words are replaced), while the latter one fixes multiple spaces and spaces before a period.</p>
    </div>