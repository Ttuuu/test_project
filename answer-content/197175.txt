<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Comparing an optional value with <code>nil</code> as in</p>

<pre><code>return getValue == nil ? false : getValue!
</code></pre>

<p>is better done with the nil-coalescing operator <code>??</code>:</p>

<pre><code>return getValue ?? false
</code></pre>

<p>It is shorter, avoids the forced-unwrapping, accesses the variable only once, and clearly expresses the intent. 
(See also <a href="https://stackoverflow.com/q/29717210/1187415">When should I compare an optional value to nil?</a> on Stack Overflow.)</p>

<p>And now the intermediate variable is not needed anymore:</p>

<pre><code>return objc_getAssociatedObject(self, &amp;kResetPositionKey) as? Bool ?? false
</code></pre>

<hr>

<p>The keys for the associated objects </p>

<pre><code>var kReferenceViewKey: String = "ReferenceViewKey"
// ...
</code></pre>

<p>are global variables. To restrict their visibility, they can be made
“file private”</p>

<pre><code>fileprivate var kReferenceViewKey = "ReferenceViewKey"
// ...
</code></pre>

<p>or static properties, private to the extension:</p>

<pre><code>extension UIView: BJDraggable {

    private static var kReferenceViewKey = "ReferenceViewKey"
    // ...

}
</code></pre>

<p>Note also that the explicit type annotation is not necessary.</p>

<p>Only the <em>address</em> of the variable is needed as key for the associated
value, the type and value does not matter. You can even define it as
a single byte</p>

<pre><code>private static var kReferenceViewKey: UInt8 = 0
</code></pre>

<p>to save some memory.</p>

<hr>

<p>Here</p>

<pre><code>if view.tag == 122 || view.tag == 222 || view.tag == 322 || view.tag == 422 
</code></pre>

<p>“magic tag numbers” are used to identify the special views which were added earlier. That is error-prone, since the original <code>UIView</code> might use
the same tags by chance.</p>

<p>An alternative would be to create a custom <code>UIView</code> subclass for those
special views, or keep references to them in another (associated)
property.</p>

<hr>

<p>This</p>

<pre><code>func alteredFrameByPoints(_ point:CGFloat) -&gt; CGRect {
    var newFrame = self.frame
    newFrame.origin.x -= point
    newFrame.origin.y -= point
    newFrame.size.width += point * 2
    newFrame.size.height += point * 2
    return newFrame
}
</code></pre>

<p>can be simplified to</p>

<pre><code>func alteredFrameByPoints(_ point:CGFloat) -&gt; CGRect {
    return self.frame.insetBy(dx: -point, dy: -point)
}
</code></pre>

<p>and this function</p>

<pre><code>fileprivate func getNewRectFrom(rect:CGRect, byApplying insets:UIEdgeInsets) -&gt; CGRect {
    var newRect:CGRect = .zero
    let x = rect.origin.x + insets.left
    let y = rect.origin.y + insets.top
    let width = rect.width - insets.right
    let height = rect.height - insets.bottom
    newRect.origin.x = x
    newRect.origin.y = y
    newRect.size.width = width
    newRect.size.height = height
    return newRect
}
</code></pre>

<p>is exactly what </p>

<pre><code>UIEdgeInsetsInsetRect(rect, insets) // Swift &lt;= 4.1
rect.inset(by: insets)              // Swift &gt;= 4.2
</code></pre>

<p>already does.</p>
    </div>