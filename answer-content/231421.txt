<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>As you only modify value position within the slice and not modify its headers, you do not need to return a slice.</p>

<pre><code>//BubbleSort takes an []int {7,5,6,9,8} and returns {5,6,7,8,9}
func BubbleSort(arr []int) {
    keepRunning := true
    for keepRunning {
        keepRunning = false
        for i := 0; i &lt; len(arr)-1; i++ {
            a := arr[i]
            b := arr[i+1]
            if a &gt; b {
                arr[i], arr[i+1] = b, a
                keepRunning = true
            }
        }
    }
}
</code></pre>

<p><a href="https://play.golang.org/p/d6wrZ0DYIuG" rel="nofollow noreferrer">https://play.golang.org/p/d6wrZ0DYIuG</a></p>

<p>that is because slice headers are passed by value, but slice backing array is a pointer. Thus modifying value index does not require to pass around the headers, unlike <code>append</code>.</p>

<p>you could try to figure out how to implement it using a more agnostic API. </p>

<p>IE something like <code>BubbleSort(arr []interface{})</code> </p>

<p>then benchmark it against a standard <code>sort.Slice(interface{})</code>.</p>
    </div>