<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This reminds me of a Battleship gameboard parser that I once designed.  <a href="https://stackoverflow.com/a/47595575/2943403">https://stackoverflow.com/a/47595575/2943403</a>  a rare case where regex outperforms non-regex techniques.</p>

<p>I am going to recommend a class variable that is an associative array so that variable variables can be avoided.  By filling each subarray with the respective <code>$result</code> strings, you compress your required data into a single structure instead of having a collection of results and a win/draw incrementer.</p>

<pre><code>protected $outcomes = [
    'X' =&gt; [],
    'O' =&gt; [],
    'D' =&gt; []
];
</code></pre>

<p>Your <code>str_replace()</code>, <code>strlen()</code>, and subsequent modulus-based looping is definitely working too hard.  It will be far simpler to break the string into substrings by using:</p>

<pre><code>foreach (explode('\n', $input) as $result) {
</code></pre>

<p>Now that game results are properly separated, you can use a regular expression to concisely parse the string and return the outcome as a single letter.</p>

<p>A "branch reset" (<code>(?|...)</code>) is used so that the matching character is always <code>\1</code> throughout each branch versus <code>\1</code>, <code>\2</code>, <code>\3</code>, <code>\4</code>. The <code>x</code> pattern flag allows me to use spaces and comments to separate and explain pattern logic.</p>

<pre><code>public assessGames($input) {
    foreach (explode('\n', $input) as $result) {
        $outcome = preg_match(
            '~(?|
                ^(?:.{3}){0,2}(\S)\1{2}   #horizontal win
                |(\S)(?:.{2}\1){2}        #or vertical win
                |^(\S)(?:.{3}\1){2}       #or diagonalLTR win
                |^.{2}(\S)(?:.\1){2}      #or diagonalRTL win
              )~x',
            $result,
            $match
        )
        ? $match[1]  // X or O
        : 'D';
        $this-&gt;outcomes[$outcome][] = $result;
    }
}
</code></pre>

<p>Note, if you are parsing a high volume of games, you may like to refactor this approach to skip the explode&amp;iterate step and make a single <code>preg_match_all()</code> call.</p>

<p>Now that your outcomes are fully evaluated, then saved to the class variable, make as few trips to the database as possible.  I always discourage making looped trips to the db.  I don't know what utilities you have in your database class, but using a batch insert technique will be beneficial here.</p>

<p>If/When you need to know how many wins/losses/draws a player has, just count the elements in the class variable.</p>

<p>Granted, the four-part pattern that I have designed may seem like incomprehensible magic to someone who is not familiar with the syntax, but by studying the pattern explanation at regex101.com, you can learn the full meaning.  I have labeled each pattern to aid in understanding what each is doing.</p>

<p>Be sure to break your class functionality into separate methods so that each method has a "single responsibility".</p>
    </div>