<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>A note on terminology</h2>
<p>"Refactored enough" is only meaningful relative to the code's current state and how it was before; but "over-refactored" is kind of meaningless. I guess the only time that idea could even be applicable is if refactoring occupied too much time or too many corporate resources. Maybe you mean over-abstracted, but that's conjecture. Anyway.</p>
<h2>Type hints</h2>
<p><code>reporting_date</code> could stand to get a type hint, likely <code>: str</code> given your later usage of this variable.</p>
<h2>Pathlib</h2>
<p>Consider replacing <code>listdir</code>, <code>os.path.join</code> and <code>os.getcwd</code> with <code>pathlib.Path</code> equivalents, which are typically better-structured and have nice object representations for paths.</p>
<h2>Parsing</h2>
<p>Don't store the string representation of <code>reporting_date</code>. Do something in the constructor like <code>self.reporting_date = self.parse_date(reporting_date)</code>, where the latter is a static method to replace your current <code>reporting_date_check</code>. This method would not mutate member variables and would simply return the date once it's figured that out.</p>
<h2>Sets</h2>
<pre><code>        accepted_dates = [
            '31/12',
            '31/03',
            '30/06',
            '30/09'
        ]
</code></pre>
<p>should be a class static, initialized via set literal - something like</p>
<pre><code>class FxRates:
    ACCEPTED_DATES = {
        '31/12',
        '31/03',
        '30/06',
        '30/09',
    }
</code></pre>
<p>That said, the approach is a little backwards. You should not do string comparison on the string-formatted date. Parse it first, then do validation on its integer parts after. The accepted dates above can turn into a set of 2-tuples, <code>(day, month)</code>.</p>
<h2>Heredocs</h2>
<p>This:</p>
<pre><code>            print("""
            \n########## Warning ##########:
            \nThere are no FX Rates for {0}/{1}.
...
</code></pre>
<p>is problematic. You're packing a bunch of whitespace in there that you shouldn't. One solution is to move the string to a global constant to avoid the indentation; you should also replace the explicit <code>\n</code> with actual newlines in the string. Another solution is to keep the text where it is but replace it with a series of implicit-concatenated strings, one per line, i.e.</p>
<pre><code>print(
    "########## Warning ##########:\n"
    "There are no FX Rates for {0}/{1}.\n"
# ...
</code></pre>
    </div>