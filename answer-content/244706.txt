<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Improvement in function <code>isprime</code>:</strong></p>
<pre><code>for(let i = 2; i &lt;= number / 2; i++)
</code></pre>
<p>can be</p>
<pre><code>for(let i = 2; i &lt;= Math.round(Math.sqrt(number)) + 1 ; i++)
</code></pre>
<p>Otherwise, the best easy to understand approach(in accordance to my knowledge) is to use the <code>Sieve of Eratosthenes</code>. Your problem can be a subset of the following problem <a href="https://codereview.stackexchange.com/questions/80267/sieve-of-eratosthenes-javascript-implementation-performance-very-slow-over-a-c">Sieve of Eratosthenes JavaScript implementation - performance very slow over a certain number</a>. Credits of the code below goes to the owner of this post.</p>
<pre><code>function getPrimesUnder(number) {
  var start = new Date().getTime();

  var numbers = [2];
  var sqNum = Math.sqrt(number);
  var i, x;
  for (i = 3; i &lt; number; i = i + 2) {
    numbers.push(i);
  }
  for (x = 0; numbers[x] &lt; sqNum; x++) {
    for (i = 0; i &lt; numbers.length ; i++){
       if (numbers[i] &gt; numbers[x]) {
        if(numbers[i] % numbers[x] === 0){
          numbers.splice(i, 1)
        }
      }
    }
  }
  var end = new Date().getTime();
  var time = end - start;
  alert('Execution time: ' + time/1000 + ' seconds');
  return numbers;

} 
</code></pre>
<p>There is something much more efficient (<a href="https://stackoverflow.com/questions/453793/which-is-the-fastest-algorithm-to-find-prime-numbers">Which is the fastest algorithm to find prime numbers?</a>) known as <code>Sieve of Atkin</code>. You can do more research on it.</p>
    </div>