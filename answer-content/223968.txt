<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>A couple of things jump out immediately:
You are only inserting data from lines with the string "Stock:" and this word occurs in exactly the same position in each line.  Instead of asking for a search of the line you could check that a specific slice be checked. </p>

<pre><code># setup outside read loop
stock_str = " Stock: "
stock_pos = 21
stock_end = stock_pos + len(stock_str)
</code></pre>

<p>...</p>

<pre><code># right after you read a line
    if line[stock_pos:stock_end] != stock_str:
        continue
</code></pre>

<p>(An aside: I prefer to use <code>continue</code> to short circuit loops rather than creating another indent level that I have to look down to find the end of.  To me a <code>continue</code> says 'This path is uninteresting' and the interesting path is all at the same level.)</p>

<p>Another option for you is to use the <code>csv_reader</code> in the <code>csv</code> module, which is part of the standard library.  You can specify a field delimiter character as an option.  In your case that is the blank.  I don't think this will make your code faster, but as the reader returns a list of strings your code will be cleaner.</p>

<p>There is no need to copy the fields from the array to named variables. Use <code>field[8]</code> where you are using <code>field8</code>.  Actually those are terrible names which tell the reader of the code nothing about what you expect in the field.  Better names would be something like <code>stock_to = 8</code>, <code>stock_from = 6</code> and you would then be inserting <code>field[stock_from]</code>, <code>field[stock_to]</code> which immediately tells the reader what value is expected at that position.</p>

<p>You say you are writing to postgresql.  In that case you should not be creating a new string to be passed to the database for each row.  You should be using "prepared statements" where the variables are the only thing that changes with each insert call.  The parsing of the statement is thus done only once, when <code>prepare()</code> is called.  This will probably give you a good speed up.</p>

<p>You don't say how often you expect to run this code.  That influences how much time you should spend on speeding it up.  If it is to be run every hout then it will be worthwhile to optimize it more.  A once a week run, then the above changes are good enough and the expense of your time doing the optimization will not be recovered.</p>

<p>If you do want to optimize more you should profile the code (see the standard library profile module doc).  If that shows, as I suspect, that the insertion into the database is your slow step then you can set up threads, communicating with your read loop in the main thread through a synchronous queue or a message passing library like RabbitMQ.  The database will then have lots of data queued up to go to disk as long as you are reading from the input file. Check execution times with timeit() to be sure your code is getting faster and have a "standard" input file to run against.  Creating a threaded version of a database program is a lot of work but can give you significant speedup.</p>
    </div>