<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Collect the iterator into the new vector</h3>

<p>You don't need to loop over a range to populate a vector with elements. The <code>collect</code> method has enough information to construct a <code>Vec&lt;u64&gt;</code> on the spot. This also makes the <code>result</code> variable unnecessary.</p>

<pre><code>    pub fn new(length: u64) -&gt; QuickFind {
        QuickFind {
            items: (0..length).collect(),
        }
    }
</code></pre>

<h3>C-GETTER</h3>

<p>The <a href="https://rust-lang.github.io/api-guidelines/naming.html#c-getter" rel="nofollow noreferrer">convention for getter names</a> is <em>without</em> the prefix <code>get_</code>, unless <code>get</code> makes up the entire method name. <code>get_items(&amp;self)</code> becomes <code>items(&amp;self)</code>.</p>

<h3>Reconsider <code>usize</code> as the index type.</h3>

<p>There appear to be multiple conversions from <code>u64</code> to <code>usize</code> in the code. Indeed, <code>usize</code> is the common integral type for referring to a relative (non-negative) position of a value in memory. With that done, the only integer cast is in <code>new</code>, so as to turn the range (0..length) into a range of values rather than a range of indices.</p>

<h3>The final code:</h3>

<p><a href="https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=4b9df5a715adc1d86985f540207df20c" rel="nofollow noreferrer">Playground</a></p>

<pre><code>#[derive(Debug)]
pub struct QuickFind {
    items: Vec&lt;u64&gt;,
}

impl QuickFind {
    pub fn new(length: usize) -&gt; QuickFind {
        QuickFind {
            items: (0..length as u64).collect(),
        }
    }

    pub fn union(&amp;mut self, left_index: usize, right_index: usize) {
        let left_group_id = self.items[left_index];

        self.items[right_index] = left_group_id;
    }

    pub fn items(&amp;self) -&gt; &amp;[u64] {
        &amp;self.items
    }

    pub fn is_connected(&amp;self, left_index: usize, right_index: usize) -&gt; bool {
        self.items[left_index] == self.items[right_index]
    }
}
</code></pre>
    </div>