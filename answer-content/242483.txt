<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I've noticed a few things, which I'm going to elaborate in the following.</p>

<h2>Interfaces</h2>

<p>First off, your interface <code>Expense</code>.
It looks good so far, what I'd like to see is something like a structure in it, let it be alphabetically sorted or sort it optionals first or both, something like:</p>

<pre><code>export interface Expense {
    amount: number;
    createdAt: number;
    description: string;
    id: string;
    note?: string;
}
</code></pre>

<p>It increases readability and allows others to quickly parse all existing keys (it's a bit nitpicking here, but it can have a huge effect).</p>

<p>Next up:</p>

<pre class="lang-js prettyprint-override"><code>type PathParamsType = {
  id: string;
};
//component own props
type PropsType = RouteComponentProps&lt;PathParamsType&gt; &amp; {
  id: string;
};

interface StateProps {
    expenses: Expense[]
}

interface DispatchProps{
    addExpense : (expense : Expense) =&gt; any,
    removeExpense : (expenseId : string) =&gt; any
}

type Props = PathParamsType &amp; PropsType &amp; StateProps &amp; DispatchProps;
</code></pre>

<p>My two pain points here are, <code>PathParamsType</code> as well as <code>DispatchProps</code>.
PathParamsType is not speaking for it self, try to give variables or interfaces a very consice name. Also I thought, you accidentially declared <code>{ id: string; }</code> twice. There is some kind of repetition that could have been avoided. Please consider the following:</p>

<pre class="lang-js prettyprint-override"><code>interface WithId {
    id: string;
}

/* Maybe name ComponentProps to something more speaking. */
type ComponentProps = RouteComponentProps&lt;WithId&gt; &amp; WithId;
</code></pre>

<p>Also, you are declaring a props type below, why didn't you merge all in the first place. 
Something along the lines like: <code>type Props = RouteComponentProps&lt;WithId&gt; &amp; WithId /* &amp; so on ... */;</code>.</p>

<p><em>!!Side note!!</em> <strong>Avoid stuff like</strong>: <code>type Foo = { bar: string; foo: number; }</code> we have interfaces for that.</p>

<p>Your function typing seems also a bit odd to me.</p>

<pre><code>interface DispatchProps{
    addExpense : (expense : Expense) =&gt; any,
    removeExpense : (expenseId : string) =&gt; any
}
</code></pre>

<p><code>any</code> seems in appropriate here. If you don't return a value from a function use <code>void</code>. If that function <strong>never</strong> returns (e.g. you quit the application inside that function), use the keyword <code>never</code>. But please <em>don't</em> use <code>any</code>.</p>

<p>To sum the interface section up, your code from above could have looked a bit like this:</p>

<pre><code>interface WithId {
    id: string;
}

interface StateProps {
    expenses: Expense[];
}

interface DispatchProps{
    addExpense : (expense : Expense) =&gt; void;
    removeExpense : (expenseId : string) =&gt; void;
}

type Props = RouteComponentProps&lt;WithId&gt; &amp; WithId &amp; StateProps &amp; DispatchProps;
</code></pre>

<h2>React Component</h2>

<p>Let's get to the component itself.</p>

<pre class="lang-js prettyprint-override"><code>const EditExpensePage: React.FunctionComponent&lt;Props&gt; = (props): any =&gt; {
 /* ... */
}
</code></pre>

<p>The same as in the <code>DispatchProps</code> interface, a function does not return any. You actually broke the type system here. The following is fully compliant to your function/ variable typing.</p>

<pre class="lang-js prettyprint-override"><code>const IamBroken: React.FunctionComponent&lt;Props&gt; = (props): any =&gt; 5;
</code></pre>

<p>This works as IamBroken should be a functional component but the function itself returns any and any is 5 (hopefully that explanation helps, at least a bit). What you would have wanted instead is:</p>

<pre class="lang-js prettyprint-override"><code>const IamNotBroken = (props): React.FunctionComponent&lt;Props&gt; =&gt; 5; /* TypeScript: ERROR!!!! */
</code></pre>

<p>To apply the above pattern to your component (two solutions are available):</p>

<pre class="lang-js prettyprint-override"><code>/* Variant 1 */
const EditExpensePage = (props: Props) =&gt; {
 /* ... */
}

/* Variant 2 */
const EditExpensePage: React.FunctionComponent&lt;Props&gt; = (props) =&gt; {
 /* ... */
}
</code></pre>

<p>Both solutions are totally fine, if you ask me though, I prefer the first one, it's sleek and if needed the compiler is able to infere the <code>React.FunctionComponent</code> part.</p>

<h2>Component internals, functional programming</h2>

<p>Inside your component I've noticed a few things as well.
<code>let selectedExpense = GetSelectedExpense(props.match.params.id, props.expenses)</code>. From what I have seen, that you never re-assign selectedExpense. Therefore it's better to keep such variables as constants: <code>const selectedExpense</code>.</p>

<p>I see what you want to achieve with the GetSelectedExpense function. But there are better way's to achieve this in TypeScript/JavaScript. <a href="https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Array" rel="nofollow noreferrer">Have a look at Arrays over at MDN</a>. There are a few helpful methods for overall array handling. What you are looking for is something like <code>find</code>.
(<em>Side Note</em>: There is a powerful concept that is called <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment" rel="nofollow noreferrer">destructuring</a>, and it helps you to avoid to write <code>props.</code> over and over again).</p>

<pre class="lang-js prettyprint-override"><code>const { expenses, match } = props; /* Concept of destructuring, see my side note above */
const selectedExpense: Expense | undefined = expenses.find(expense =&gt; expense.id === match.params.id);
</code></pre>

<p>The <code>onSubmit</code> function could be improved in the following way. First, you want to avoid inline array functions as props (many linters are warning about possible performance issues). While that seems to be true, it also doesn't add to readability as well. Have a look at the following (I'm making use of the <a href="https://reactjs.org/docs/hooks-intro.html" rel="nofollow noreferrer">useCallback</a> hook):</p>

<pre class="lang-js prettyprint-override"><code>const { expenses, selectedExpense, removeExpense, addExpense, match } = props;
const selectedExpense: Expense | undefined = expenses.find(expense =&gt; expense.id === match.params.id);

const onSubmit = useCallback((expense) =&gt; {
    expenses.filter(exp =&gt; exp.id === selectedExpense).map(exp =&gt; removeExpense(exp.id));
    addExpense(expense);        
}, [removeExpense, addExpense, selectedExpense]);

return (&lt;ExpenseForm description={selectedExpense?.description} amount={selectedExpense?.amount} onSubmit={onSubmit}/&gt;);
</code></pre>

<p>Last but not least, your compose thingy at the end. It seems wrong and should be like this (because <code>compose</code> is coming from redux which shouldn't be abused to chain higher order components):</p>

<pre><code>export default withRouter(connect(mapStateToProps, mapDispatchToProps)(EditExpensePage));
</code></pre>
    </div>