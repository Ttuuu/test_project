<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>What do you think of this?</p>

<p>Add script functions to a function map like this:</p>

<pre><code>function_map["function name"] =
      MakeScriptFunction&lt;ReturnType, ArgumentTypes...&gt;(fn);
</code></pre>

<p>call them like this:</p>

<pre><code>//                  |arg 0       |arg 1|arg 2| arg 3|
function_map["foo"]({"foo string", 69.0,  666, false});

// or like this
function_map["foo"](variable_list);
</code></pre>

<hr>

<p>Demo that shows off construction, calling, and what happens if wrong argument numbers or types are provided. Note that you can do a non-exception implementation using <code>sizeof...(ArgumentTypes)</code> and <code>std::holds_alternative</code>.
<a href="https://godbolt.org/z/sdgMra" rel="nofollow noreferrer">https://godbolt.org/z/sdgMra</a></p>

<pre><code>#include &lt;functional&gt;
#include &lt;iostream&gt;
#include &lt;unordered_map&gt;
#include &lt;variant&gt;

using Variable = std::variant&lt;bool, int, double, std::string&gt;;
using VariableList = std::vector&lt;Variable&gt;;
using ScriptFunction = std::function&lt;Variable(VariableList const&amp;)&gt;;

template &lt;typename ReturnType, typename... ArgumentTypes,
          typename FunctionType = std::function&lt;ReturnType(ArgumentTypes&amp;&amp;...)&gt;&gt;
ScriptFunction MakeScriptFunction(FunctionType&amp;&amp; function) {
  return [function = std::move(function)](VariableList const&amp; argument_list) {
    auto argument_iter = argument_list.rbegin();
    return function(std::get&lt;ArgumentTypes&gt;(*argument_iter++)...);
  };
}

int main() {
  auto function_map = std::unordered_map&lt;std::string, ScriptFunction&gt;{};

  function_map["foo"] = MakeScriptFunction&lt;int, std::string, double, int, bool&gt;(
      [](auto&amp; s, auto d, auto i, auto b) {
        std::cout &lt;&lt; "inside foo, s=" &lt;&lt; s &lt;&lt; " d=" &lt;&lt; d &lt;&lt; " i=" &lt;&lt; i
                  &lt;&lt; " b=" &lt;&lt; b &lt;&lt; std::endl;
        return 420;
      });
  function_map["bar"] =
      MakeScriptFunction&lt;std::string&gt;([]() { return "barbarbar"; });

  // bad definition (mismatch of function and declared types) causes compile
  // error error: no match for call to '(main()::&lt;lambda()&gt;) (const int&amp;)' 16 |
  // return function(std::get&lt;ArgumentTypes&gt;(*argument_iter++)...);
  //   function_map["bad definition"] =
  //       MakeScriptFunction&lt;std::string, int&gt;([]() { return "barbarbar"; });

  // inline call
  function_map["foo"]({"foo string", 69.0, 666, false});

  // l value call
  auto foo_args = VariableList{"foo string", 69.0, 666, false};
  function_map["foo"](foo_args);

  // print out return value of a function
  std::visit([](auto&amp;&amp; v) { std::cout &lt;&lt; v &lt;&lt; std::endl; },
             (function_map["bar"])({}));

  // wrong order
  try {
    function_map["foo"]({"foo string", 69.0, false, 666});
  } catch (std::exception&amp; e) {
    std::cerr &lt;&lt; e.what() &lt;&lt; std::endl;
  }

  // wrong number of args
  try {
    function_map["foo"]({"foo string", 69.0, 666});
  } catch (std::exception&amp; e) {
    std::cerr &lt;&lt; e.what() &lt;&lt; std::endl;
  }
  return 0;
}

</code></pre>
    </div>