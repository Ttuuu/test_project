<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Style</h1>

<p>Your code mostly follows <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">PEP8</a> but is a bit more terse. Mostly:</p>

<ul>
<li>Using 4 spaces for indentation;</li>
<li>Putting a space after every coma;</li>
<li>Using two blank lines to separate top-level functions;</li>
</ul>

<p>should ease reading your code.</p>

<p>You also use camelCaseVariableNames from time to time, instead of snake_case.</p>

<p>Lastly, using an <a href="https://stackoverflow.com/q/419163/5069029"><code>if __name__ == '__main__'</code></a> would allow you to more easily test or reuse your module.</p>

<h1>Naming</h1>

<p>I find <code>is_sol</code> and derived functions kind of misleading as it does not test if it found a solution (as the name would suggest) but if a number could fit at a given position in the grid. Changing names to use wording such as test, check… and/or fits, find… could improve understanding at a glance.</p>

<h1>Looping</h1>

<p>Many times you iterate over indices to retrieve a value in a list. I suggest you have a look at Ned Batchelder's talk <a href="https://nedbatchelder.com/text/iter.html" rel="nofollow noreferrer">loop like a native</a> and try to iterate over the elements directly instead.</p>

<p>You also often use plain-Python <code>for</code> loops where list-comprehensions or generator expresions would faster: <a href="https://docs.python.org/3/library/functions.html#any" rel="nofollow noreferrer"><code>any</code></a> and <a href="https://docs.python.org/3/library/functions.html#all" rel="nofollow noreferrer"><code>all</code></a> are your friends here.</p>

<h1>Copying</h1>

<p>Instead of using the slow <code>deepcopy</code> you could leverage the fact that you know your data structure. You use a list of lists, so <code>copy</code> your inner lists into a new outer list. Timings on my machine indicates this is 40x faster:</p>

<pre><code>&gt;&gt;&gt; import timeit
&gt;&gt;&gt; timeit.timeit('deepcopy(mat)', 'from __main__ import mat; from copy import deepcopy')
48.071381973999905
&gt;&gt;&gt; timeit.timeit('[row.copy() for row in mat]', 'from __main__ import mat')
1.1098871960002725
</code></pre>

<h1>Proposed improvements</h1>

<pre><code>VALID_NUMBERS = range(1, 10)


def fits_in_row(value, grid, row):
    return all(element != value for element in grid[row])


def fits_in_column(value, grid, column):
    return all(row[column] != value for row in grid)


def fits_in_block(value, grid, row, column):
    block_row = (row // 3) * 3
    block_column = (column // 3) * 3
    return all(
            grid[block_row + i][block_column + j] != value
            for i in range(3) for j in range(3)
    )


def fits_in_cell(value, grid, row, column):
    return (
            fits_in_row(value, grid, row)
        and fits_in_column(value, grid, column)
        and fits_in_block(value, grid, row, column)
    )


def empty_cells_indices(grid):
    return [
            (i, j)
            for i, row in enumerate(grid)
            for j, element in enumerate(row)
            if element not in VALID_NUMBERS
    ]


def sudoku(grid):
    to_solve = [(grid, 0)]
    empty_cells = empty_cells_indices(grid)

    while to_solve:
        grid, guessed_cells = to_solve.pop()
        if guessed_cells == len(empty_cells):
            return grid

        row, column = empty_cells[guessed_cells]
        for value in VALID_NUMBERS:
            if fits_in_cell(value, grid, row, column):
                new = [row.copy() for row in grid]
                new[row][column] = value
                to_solve.append((new, guessed_cells + 1))


if __name__ == '__main__':
    mat = [
        [7, 0, 0, 0, 0, 9, 0, 0, 3],
        [0, 9, 0, 1, 0, 0, 8, 0, 0],
        [0, 1, 0, 0, 0, 7, 0, 0, 0],

        [0, 3, 0, 4, 0, 0, 0, 8, 0],
        [6, 0, 0, 0, 8, 0, 0, 0, 1],
        [0, 7, 0, 0, 0, 2, 0, 3, 0],

        [0, 0, 0, 5, 0, 0, 0, 1, 0],
        [0, 0, 4, 0, 0, 3, 0, 9, 0],
        [5, 0, 0, 7, 0, 0, 0, 0, 2],
    ]

    # mat = [
    #     [3, 0, 6, 5, 0, 8, 4, 0, 0],
    #     [5, 2, 0, 0, 0, 0, 0, 0, 0],
    #     [0, 8, 7, 0, 0, 0, 0, 3, 1],
    #     [0, 0, 3, 0, 1, 0, 0, 8, 0],
    #     [9, 0, 0, 8, 6, 3, 0, 0, 5],
    #     [0, 5, 0, 0, 9, 0, 6, 0, 0],
    #     [1, 3, 0, 0, 0, 0, 2, 5, 0],
    #     [0, 0, 0, 0, 0, 0, 0, 7, 4],
    #     [0, 0, 5, 2, 0, 6, 3, 0, 0]
    # ]

    import pprint
    pprint.pprint(sudoku(mat))
</code></pre>
    </div>