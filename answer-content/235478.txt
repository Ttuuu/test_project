<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Comments:</p>

<ol>
<li><p>Use type declarations!  These are (IMO) easier to read than docstring comments and they also make your code <code>mypy</code>-able.</p></li>
<li><p>Your <code>try/catch</code> block is just an indirect way of requiring that the parameter is at least 1 character long.  It's more clear IMO to just check the length explicitly, especially since you're already doing that as the next step.</p></li>
<li><p>Reassigning a different type to an existing variable is something you see a lot in quick-and-dirty Python scripts, but it's bad practice IMO (and mypy will treat it as an error unless you forward-declare it with a tricky <code>Union</code> type).  Just use a new variable name when you generate a new object with a new type.</p></li>
<li><p>Your regex already enforces the 63-character requirement.  DRY (Don't Repeat Yourself)!</p></li>
<li><p>Using Python's built-in <code>all</code> function is better than rolling your own <code>for</code> loop.</p></li>
</ol>

<pre><code>import re

def is_fqdn(hostname: str) -&gt; bool:
    """
    https://en.m.wikipedia.org/wiki/Fully_qualified_domain_name
    """
    if not 1 &lt; len(hostname) &lt; 253:
        return False

    # Remove trailing dot
    if hostname[-1] == '.':
        hostname = hostname[0:-1]

    #  Split hostname into list of DNS labels
    labels = hostname.split('.')

    #  Define pattern of DNS label
    #  Can begin and end with a number or letter only
    #  Can contain hyphens, a-z, A-Z, 0-9
    #  1 - 63 chars allowed
    fqdn = re.compile(r'^[a-z0-9]([a-z-0-9-]{0,61}[a-z0-9])?$', re.IGNORECASE)

    # Check that all labels match that pattern.
    return all(fqdn.match(label) for label in labels)
</code></pre>

<p>I echo Roland's suggestion about writing a unit test.  A function like this is really easy to write tests for; you'd do it like:</p>

<pre><code>def test_is_fqdn() -&gt; None:
    # Things that are FQDNs
    assert is_fqdn("homestarrunner.net")
    assert is_fqdn("zombo.com")

    # Things that are not FQDNs
    assert not is_fqdn("")
    assert not is_fqdn("a*")
    assert not is_fqdn("foo")  # no TLD means it's not a FQDN!
</code></pre>

<p>Note that the last assert in that test will fail...</p>
    </div>