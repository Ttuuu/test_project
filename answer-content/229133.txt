<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The "terminating" allocators work well for small programs like this; in larger projects or libraries, we want to do something better than terminate the program when allocation fails.  A common naming scheme (perhaps taken from Perl) is <code>malloc_or_die()</code> - that's slightly clearer about the behaviour.  It's usual to end your error message (and indeed program output generally) with a newline:</p>

<pre><code>    fprintf(stderr, "Could not allocate space for %s.\n", allocation_reason);
</code></pre>

<p>I'm not convinced that <code>ensure_allocation()</code> should be part of the interface of <code>"helpers.h"</code> - it could equally be a <code>static</code>-linkage function in the implementation.</p>

<p>I'm surprised you're rolling your own complex number type rather than using the standard complex numbers introduced by C99.</p>

<p><code>new_complex()</code> and <code>copy_complex()</code> are inconsistent in their approach: the former uses <code>set_complex()</code> to assign to the members, but the latter assigns directly.  Both styles work, but it's easier to read if they're consistent.  Alternatively, implement copy in terms of new:</p>

<pre><code>Complex copy_complex(Complex src) {
    return new_complex(src.real, src.imaginary);
}
</code></pre>

<p>Consider, though:</p>

<pre><code>Complex copy_complex(Complex src) {
    return src;
}
</code></pre>

<p>In other words, we can use plain <code>=</code> instead of calling a function.</p>

<p>It's not clear why the <code>infinity_limit</code> should be an integer type.  Since it's a limit on the magnitude of a floating-point value, it makes more sense for it simply to be a <code>double</code> itself and remove the cast.  I measured no impact on speed with this change.</p>

<p>When calling <code>calloc()</code> to create an array, it's better to use an actual element as argument to <code>sizeof</code>, rather than repeating the type name:</p>

<pre><code>char* buffer = terminating_calloc(buffer_size, sizeof *buffer, "complex format buffer");
</code></pre>

<p>That way, if we ever change the type of the buffer, we only have one place that needs to change.</p>

<p>We could avoid allocating the buffer at all, if we calculate each character and print immediately.  That obviously requires a little restructuring of the functions, but is better than returning a pointer that the caller must free.</p>

<p>I don't like the hard-coded output file name; I changed the code in my copy to print to <code>stdout</code> instead, so the user can redirect to any file.</p>

<p>No need to cast when dividing <code>image_width</code> by two - the result is also <code>size_t</code>.</p>

<p>The error messages ought to go to <code>stderr</code>, rather than <code>stdout</code> (this was correct in <code>ensure_allocation()</code>, so must just be an oversight in <code>main.c</code>).</p>

<p>Pedantry: <code>int main(void)</code> to make the declaration a prototype, not <code>int main()</code>.</p>
    </div>