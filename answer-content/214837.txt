<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I may not be considering all fringe cases (please enlighten me if this breaks with any realistic input), but all of the logic can be packed into a single <code>preg_replace_callback()</code> call.</p>

<ul>
<li><p>I start by declaring a 1-dimensional array which will contain all numeric counters.</p></li>
<li><p>My pattern <code>~^(#+)\K~m</code> says:<br>
From the start of each line, capture one or more hash symbols as capture group #1, then restart the fullstring match .  In doing so, my replacement string to be determined inside the custom function will not actually be replacing any characters, but adding new characters at the zero-length position marked by <code>\K</code>.  This spares you needing to match the rest of the line and adding that to the replacement.</p></li>
<li><p>Making <code>$levels</code> modifiable by reference with <code>&amp;</code> means that <code>$level</code> will be updated with each iteration of the regex matches.</p></li>
<li><p>After counting the elements in <code>$levels</code> and counting the length of the matched string, precise modifications can be done to <code>$levels</code> to provide the desired set of numbers.</p></li>
<li><p>The return value is a space followed by the dot-imploded <code>$levels</code> array.</p></li>
<li><p><code>array_slice()</code> avoids <code>pop</code>ing in a loop.</p></li>
<li>I don't think your <code>array_values()</code> call is necessary.</li>
</ul>

<p>Code: (<a href="https://3v4l.org/SjRfI" rel="nofollow noreferrer">Demo</a>)</p>

<pre><code>$headers = &lt;&lt;&lt;HEADERS
# Hello

## World

### Let's add

## Some headers

### Yay!

# Foo

## Bar

## Bar Again
HEADERS;

$levels = [];
echo preg_replace_callback(
        '~^(#+)\K~m',
        function($m) use (&amp;$levels) {
            $hashes = strlen($m[1]);
            $index = $hashes - 1;
            $reduction = sizeof($levels) - $hashes;
            if (!isset($levels[$index])) {
                $levels[$index] = 1;
            } else {
                ++$levels[$index];
            }
            if ($reduction &gt; 0) {
                $levels = array_slice($levels, 0, -$reduction);
            }
            return " " . implode('.', $levels);
        },
        $headers
    );
</code></pre>

<p>Output:</p>

<pre><code># 1 Hello

## 1.1 World

### 1.1.1 Let's add

## 1.2 Some headers

### 1.2.1 Yay!

# 2 Foo

## 2.1 Bar

## 2.2 Bar Again
</code></pre>
    </div>