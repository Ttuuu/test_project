<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I am not a C# programmer, but here is some general feedback:</p>

<p>You call <code>menu.MainMenu()</code> but there's no verb! Objects are nouns, methods should be verbs. Maybe name the method <code>DisplayMenu</code> or <code>DispatchUserAction</code> or something that indicates activity is happening? </p>

<p>Your <code>MainMenu</code> method doesn't appear to handle invalid input. What happens if the user hits return? EOF? "Abcde?"</p>

<p>The failure mode that I see just calls itself recursively. So can I crash your program by exhausting the stack with a series of 9's as input? Put in a <code>while true</code> loop, or something similar. Maybe loop and call an inner method, for small clear code.</p>

<p>The <code>Person</code> constructor also updates the id counter. Change that so the id is managed separately. Maybe take an optional parameter and force the id counter to be above that value if provided?</p>

<p>You have some awkward code to implement your search. Why is your comparison logic in the Menu class, or some 3rd party class? I think asking if a person's name matches a string is something that the Person class should handle:</p>

<pre><code>foreach (Person guy in people)  
     if (guy.isThisYou(target))
          etc.
</code></pre>

<p>I just noticed you handle all your returns to the main menu by recursion. Don't do that. Return and write a loop in the main menu. </p>

<p>You have a lot of patterns of interacting with the console for input and output. Make those into dedicated helper functions/methods. Examples: printing two newlines to separate "paragraphs" could be <code>NewParagraph()</code>; and writing a line then reading a line could be <code>GetInput (String prompt)</code></p>

<p>If possible, separate input and output streams into variables, and read and write against those stream variables. This will make it possible to code some test cases: construct the menu with string streams and compare the output against an expected value for the input.</p>
    </div>