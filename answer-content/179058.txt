<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>In order to satisfy the <em>O(N)</em> time-complexity, construct a <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set" rel="noreferrer"><code>Set()</code></a> in <em>O(N)</em> time and space complexity, then use a <code>while</code> loop which is considered <s>constant time relative to <em>N</em></s> <strong><em>O(N)</em> as well</strong> (thank you, <a href="https://codereview.stackexchange.com/questions/179037/given-an-array-of-integers-return-the-smallest-positive-integer-not-in-it/179058?noredirect=1#comment339944_179058">wchargin</a>), since the maximum possible number of iterations is equal to <em>N</em> and average performance of a <code>Set#has()</code> operation is <em>O(1)</em>. Because <em>O(N + N) = O(N)</em>, regarding time complexity, this solution is overall <em>O(N)</em> performance in both time and space:</p>

<pre><code>function solution(A) {
  const set = new Set(A);
  let i = 1;

  while (set.has(i)) {
    i++;
  }

  return i;
}
</code></pre>

<hr>

<p><sup>While this is a relatively simplistic and deceivingly elegant implementation, <a href="https://codereview.stackexchange.com/a/179053/73672">insertusernamehere's solution</a> is admittedly an order of magnitude faster, when using an array as a perfect hash table for non-negative integers instead.</sup></p>
    </div>