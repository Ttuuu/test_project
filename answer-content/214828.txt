<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<pre><code>public static Jpeg FromBitmapFrame(BitmapFrame bitmap, long quality)
{
  Jpeg jpeg;
  using (var stream = new MemoryStream())
  {
    JpegBitmapEncoder encoder = new JpegBitmapEncoder();
    encoder.QualityLevel = 90;
    encoder.Frames.Add(bitmap);
    encoder.Save(stream);
    jpeg = new Jpeg(stream.ToArray(), (uint)bitmap.Width, (uint)bitmap.Height, (uint)bitmap.DpiX, (uint)bitmap.DpiY);
  }
  return jpeg;
}
</code></pre>
</blockquote>

<p>Here it should be safe to return from inside the <code>using</code> statement:</p>

<pre><code>public static Jpeg FromBitmapFrame(BitmapFrame bitmap, long quality)
{
  using (var stream = new MemoryStream())
  {
    JpegBitmapEncoder encoder = new JpegBitmapEncoder();
    encoder.QualityLevel = 90;
    encoder.Frames.Add(bitmap);
    encoder.Save(stream);
    return new Jpeg(stream.ToArray(), (uint)bitmap.Width, (uint)bitmap.Height, (uint)bitmap.DpiX, (uint)bitmap.DpiY);
  }
}
</code></pre>

<hr>

<blockquote>
<pre><code>    private static ImageCodecInfo GetEncoder(ImageFormat format)
    {
        ImageCodecInfo[] codecs = ImageCodecInfo.GetImageDecoders();
        foreach (ImageCodecInfo codec in codecs)
        {
            if (codec.FormatID == format.Guid)
            {
                return codec;
            }
        }
        return null;
    }
</code></pre>
</blockquote>

<p>Using LINQ this can be reduced to a oneliner:</p>

<pre><code>private static ImageCodecInfo GetEncoder(ImageFormat format)
{
  return ImageCodecInfo.GetImageDecoders().FirstOrDefault(codec =&gt; codec.FormatID == format.Guid);
}
</code></pre>

<hr>

<blockquote>
<pre><code>public static byte[] Create(List&lt;BitmapFrame&gt; frames, long quality)
{
  List&lt;Jpeg&gt; jpegs = new List&lt;Jpeg&gt;();
  foreach (var frame in frames)
  {
    jpegs.Add(Jpeg.FromBitmapFrame(frame, quality));
  }
  return WrapJpegs(jpegs);
}
</code></pre>
</blockquote>

<p>Again LINQ can "modernize" this a little:</p>

<pre><code>public static byte[] Create(IEnumerable&lt;BitmapFrame&gt; frames, long quality)
{
  return WrapJpegs(frames.Select(frame =&gt; Jpeg.FromBitmapFrame(frame, quality)).ToList());
}
</code></pre>

<hr>

<blockquote>
  <p><code>jpegs.FindIndex(b =&gt; b.Data.Length == 0) &gt; -1</code></p>
</blockquote>

<p>LINQ:</p>

<pre><code>jpegs.Any(j =&gt; j.Data.Length == 0)
</code></pre>

<p>IMO easier to read.</p>

<hr>

<blockquote>
<pre><code>        MemoryStream tiffData = new MemoryStream();
        BinaryWriter writer = new BinaryWriter(tiffData);
</code></pre>
</blockquote>

<p>You need to wrap these in <code>using</code> statements:</p>

<pre><code>  using (MemoryStream tiffData = new MemoryStream()) // HDH Use using in order to clean up 
  using (BinaryWriter writer = new BinaryWriter(tiffData))
  {
     ...
    writer.Flush();
    return tiffData.ToArray();
  }
</code></pre>

<hr>

<blockquote>
<pre><code>    for (int i = 0; offset &gt; 0; i++)
      {
</code></pre>
</blockquote>

<p>The stop condition is confusing. Why not just use <code>jpegs.Count</code> because you actually iterate through all items anyway.</p>

<hr>

<p>In the main loop you declare this:</p>

<pre><code>var jpeg = jpegs[i];
</code></pre>

<p>But you use <code>jpegs[i]</code> several times in the loop. Be consistent.</p>

<hr>

<blockquote>
<pre><code>      uint[,] fields = new uint[,] {
                {254, 4, 1, 0}, // NewSubfileType
                {256, 4, 1, width}, // ImageWidth
</code></pre>
</blockquote>

<p>I think I would make a struct or class for these fields in order to be strict with types - hence avoiding the casting.</p>

<hr>

<blockquote>
<pre><code>      writer.Write((ushort)8);
      writer.Write((ushort)8);
      writer.Write((ushort)8);
</code></pre>
</blockquote>

<p>make a <code>const ushort bitsPerSample = 8;</code> for this - before the loop.</p>

<hr>

<p>The idea of having a <code>stream</code> as argument to the methods is good, but be aware that <code>BinaryWriter</code> disposes the stream, when it is disposed unless you use the constructor with the <code>leaveOpen</code> flag. </p>
    </div>