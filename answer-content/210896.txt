<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>What I see:</p>

<p>Like <a href="https://codereview.stackexchange.com/a/210868/137598">this answer states</a> you should not be printing as an recoverable error.  If your program needs to crash, then you can print, but printing when execution of the program should continue will unexpectedly fill the output stream with stderr symbols that the end user has no easy control of stopping. Instead, use return codes and possibly provide your own error function that returns the proper string of characters that need to be printed based upon the error code. That way they can choose to check the error code, do nothing, fix the problem, or crash on their own volition. </p>

<p>I'm not sure why you chose <code>uint16_t</code> as your list size type, but incase there are actually situations in which you want to do this, I would suggest instead using </p>

<pre><code>typedef uint16_t list_size_t;
</code></pre>

<p>so you could potentially do something like:</p>

<pre><code>#if defined MY_UINT64_DEFINED_VAR
typedef uint64_t list_size_t;
#elif defined MY_UINT32_DEFINED_VAR
typedef uint32_t list_size_t;
#elif defined MY_UINT16_DEFINED_VAR
typedef uint16_t list_size_t;
#endif
</code></pre>

<p>provided you can find a compiler variable or find the size of int or some other compile time definition to figure out the size type you want your system to use. </p>

<p>You also need to be able to iterate through list elements.  I suggest using a function like:</p>

<pre><code>void* list_get(list_size_t index)
</code></pre>

<p>which would then return the pointer to the element at the given index. </p>

<p>Another thing you might want to consider is namespace conflicts with:</p>

<pre><code>typedef struct list_s list_t 
</code></pre>

<p>Because of the lack of namespaces in C, such names can conflict with other names within the same scope and lead to a whole bunch of odd errors that may or may not be hard to track down.  list_t is such a generic name, I'm not sure it is appropriate to use directly here, you may want to not pollute the namespace with list_t, and instead keep it as struct list_s.  However there is another solution to this problem that also solves other potential namespace conflicts. </p>

<p>You may want to prefix all of your names with a sort of psuedo namespace specifier (which a lot of other C APIs do, like opengl, vulkan opencv's now defunct C api etc...)</p>

<p>I would recommend even doing this on macros as well, as they have the same problem (and this practice is also standard). </p>

<p>for example, lets say you decide to use "abc" as your pseudo namespace name. You would then change:</p>

<pre><code>bool    list_append(list_t* list, void* element);
</code></pre>

<p>to:</p>

<pre><code>bool    abc_list_append(abc_list_t* list, void* element);
</code></pre>

<p>yes, this is annoying, but if someone wants to use your library but wants multiple list types, or have multiple libraries called list but don't do the same thing, then they are out of luck.  If you use a "pseudo namespace" then they can avoid many of these conflicts. If however, this is only supposed to be used internally in another project or is never going to be released to be used as its own library, you do not have to worry about name-spacing these components to other people, though you may still find conflicts on your own. </p>
    </div>