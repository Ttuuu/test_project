<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Toward optimized functionality and design</h3>

<ul>
<li><p>since all crucial attributes <code>x</code>, <code>y</code>, <code>x_mean</code>, <code>y_mean</code> are initialized on <code>LinearReg</code> instance creation (within <code>__init__</code> method) - no need to duplicate and define them as class attributes (<code>x = [] ... y = []</code>), those should be removed as redundant</p></li>
<li><p><code>raise Error</code> - <code>Error</code> is not Python exception class. Use <code>Exception</code> or <code>ValueError</code></p></li>
<li><p><code>axis_mean(self, axis)</code> function does not use <code>self</code> context and deserves to be just a <strong><code>@staticmethod</code></strong></p></li>
<li><p><strong><code>sum_of_deviation_products/sum_of_x_deviation_squared</code></strong> functions <br>
<em>Substitute algorithm:</em> instead of going with external variable <code>result</code> + <code>range(len(..))</code> + <code>for</code> loop - apply a convenient combination of <code>sum</code> + <code>enumerate</code> functions:</p>

<pre><code>def sum_of_deviation_products(self):
    return sum((self.x[i] - self.x_mean) * (y - self.y_mean)
            for i, y in enumerate(self.y))
</code></pre>

<p>A good (or better) alternative would be <code>sum</code> + <code>zip</code> approach: <code>sum((x - self.x_mean) * (y - self.y_mean) for x, y in zip(self.x, self.y))</code></p></li>
<li><p><code>get_b_zero</code> method is redundant as it's just return a public attribute <code>self.b_zero</code> (which is accessed directly)</p></li>
<li><p><code>get_slope</code> method <br>
Instead of storing and reassigning <code>self.slope</code> attribute on each method invocation - as it's recalculated each time, it deserves to be a <em>computed attribute</em> using <strong><code>@property</code></strong> decorator:</p>

<pre><code>@property
def slope(self):
    return self.sum_of_deviation_products() / self.sum_of_x_deviation_squared()
</code></pre>

<p>Now, it's simply accessed with <code>self.slope</code>. </p></li>
<li><p><strong><code>fit_best_line</code></strong> method <br>
Instead of unreadable string concatenation like <code>... + "%.2f" % self.slope + "x + " + "%.2f" % self.b_zero</code> use flexible <strong><code>f-string</code></strong> formatting:</p>

<p><code>print(f"The best line equation is: {self.slope:.2f}x + {self.b_zero:.2f}")</code>.</p>

<p>The conciseness and flexibility are obvious.<br>
Also, in case if <code>b_zero</code> attribute/property happen to be only actual in context of <code>fit_best_line</code> call - it can be eliminated and declared as just local variable.</p></li>
</ul>

<hr>

<p>The final optimized approach:</p>

<pre><code>class LinearReg:
    def __init__(self, x, y):
        if len(x) != len(y):
            raise ValueError("Both axis must have the same number of values")

        self.x = x
        self.y = y
        self.x_mean = self.axis_mean(self.x)
        self.y_mean = self.axis_mean(self.y)
        self.b_zero = 0

    @staticmethod
    def axis_mean(axis):
        return sum(axis) / len(axis)

    def sum_of_deviation_products(self):
        return sum((self.x[i] - self.x_mean) * (y - self.y_mean)
                   for i, y in enumerate(self.y))

    def sum_of_x_deviation_squared(self):
        return sum((x - self.x_mean) ** 2
                   for x in self.x)

    @property
    def slope(self):
        return self.sum_of_deviation_products() / self.sum_of_x_deviation_squared()

    def fit_best_line(self):
        self.b_zero = self.y_mean - (self.slope * self.x_mean)
        print(f"The best line equation is: {self.slope:.2f}x + {self.b_zero:.2f}")
</code></pre>
    </div>