<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<pre><code>  private static List&lt;Integer&gt; topKFrequent(int[] nums, int k) {
</code></pre>
</blockquote>

<p>The specification as described explains why the input uses <code>int[]</code>, but doesn't seem to fix the return type. Why <code>List&lt;Integer&gt;</code>? I can see an argument for <code>int[]</code> (consistency with the input), and I can see an argument for <code>Set&lt;Integer&gt;</code> (encodes the constraint that the returned values will be distinct), but I can't see a reason for <code>List&lt;Integer&gt;</code>.</p>

<hr>

<blockquote>
<pre><code>    // freq map
    Map&lt;Integer, Integer&gt; freq = new HashMap&lt;Integer, Integer&gt;();
    for (int n : nums) {
      freq.put(n, freq.getOrDefault(n, 0) + 1);
    }
</code></pre>
</blockquote>

<p>Nice use of the recent API additions.</p>

<hr>

<blockquote>
<pre><code>    // bucket sort on freq
    List&lt;Integer&gt;[] bucket = new ArrayList[nums.length + 1];
    for (int i = 0; i &lt; bucket.length; i++)
      bucket[i] = new ArrayList&lt;&gt;();
    for (int key : freq.keySet()) {
      bucket[freq.get(key)].add(key);
    }
</code></pre>
</blockquote>

<p>Why the inconsistency over whether to use <code>{}</code> for a single statement <code>for</code> body?</p>

<p>The bucket sort is time-efficient, but as implemented it's not very memory-efficient. Have you considered doing a first pass over <code>freq</code> to find the maximum frequency, so that <code>bucket</code> can be allocated to the smallest possible size? Have you considered allocating <code>bucket[i] = new ArrayList&lt;&gt;();</code> on demand, the first time you encounter a frequency of <code>i</code>?</p>

<p>Iterating over a map's <code>keySet()</code> and then calling into the map is inefficient. When <code>HashMap</code> works well it's only a small constant factor inefficiency, but to illustrate the problem suppose that you were using <code>TreeMap</code>. Then <code>keySet()</code> takes <span class="math-container">\$O(m)\$</span> time (where <span class="math-container">\$m\$</span> is the number of entries in the map), but the <span class="math-container">\$m\$</span> calls to <code>get()</code> take a total of <span class="math-container">\$O(m \lg m)\$</span> time. Iterating over <code>entrySet()</code> takes <span class="math-container">\$O(m)\$</span> time and saves the extra work of looking up the entries by key.</p>

<hr>

<blockquote>
<pre><code>    // gather result
    List&lt;Integer&gt; res = new ArrayList&lt;&gt;();
    for (int i = bucket.length - 1; i &gt;= 0; i--) {
      res.addAll(bucket[i]);
      if (res.size() &gt;= k)
        break;
    }
</code></pre>
</blockquote>

<p>What about corner cases? If there are fewer than <code>k</code> distinct values in <code>nums</code>, should the method throw an exception or return all of the distinct values? If <code>res.size() &gt; k</code> should you discard some elements from the smallest bucket in order to return only <code>k</code>elements? The specification as quoted is unclear, so maybe you should push for clarification.</p>
    </div>