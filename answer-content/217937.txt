<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The the approach could be as follows (with the added assumption of no duplicates that you ignored in your sample):</p>

<p>1) Check if the first element is smaller than the second one. If so, either the inverted part was the single first element or the second part was inverted. Consequently return the minimum of the first and last element of the array.</p>

<p>2) If not but the last element is smaller than the second-to-last, the whole array was inverted and the last element is the minimum. (not sure if this is allowed)</p>

<p>3) If neither is the case, the first part of the array is decreasing, the second part is increasing and the minimum is the unique element a[i] with a[i-1] &gt; a[i] &lt; a[i+1]. That element can be found in O(log n) implementing a binary search as opposed to your idea of checking both sides again, leading to O(n log n).</p>
    </div>