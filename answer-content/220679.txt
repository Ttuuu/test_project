<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>One of the hardest piece of knowledge to learn as a developer is: <em>code duplication does not mean responsibility duplication</em>.</p>

<p>Having said this, you are testing different methods so it's ok to have more than one test. In this case, you are testing complementary (or were they supplementary? I never remember it) methods, so to test one, you need to have the other one working properly. </p>

<p>However, there are some code duplication that will bite you in the future (but since this question is from the past, you can tell me if I'm wrong or not).</p>

<ol>
<li>You are duplicating the way a User entity is created, so if you change its constructor, you will have to modify your tests, even though it might not matter in the actual logic you are testing. It happens something similar with the Account entity. To avoid this you can have a private method or to a public builder.</li>
<li>You are duplicating the way a User is created and persisted. The same problem as in point #1 happens. You probably don't care how or when is created, you just need it to be created and persisted properly. This applies also for the Account entity with a slight different: in the first test you need to make the code of save into the repo explicit since it's what you are testing.</li>
</ol>

<p>Besides all of this, when you are writing tests you need to tell the reader what's important and what's not and describe that accordingly. It's a balance between explicitness and abstraction. For instance in the example, I've written a method called createAccount to encapsulate the logic of creation and persistence of the Account entity. However, someone would say that if a developer reading the test needs to know what the arrange does, it has to move to the method implementation (a test should be self-explanatory and auto).</p>

<pre><code>@DisplayName("user exists -- account does not exist -- save persists")
@Test
void save_userExistsAndAccountDoesNotExist_accountIsSaved() {
    // Arrange
    User existingUser = createUser();
    Account createdAccount = makeAccount(existingUser);

    // Act
    repo.save(createdAccount);

    // Assert
    assertThat(repo.findById(createdAccount.getId())).contains(createdAccount);
}

@DisplayName("user exists -- account exists -- findById finds")
@Test
void findById_userExistsAndAccountExists_returnTheAccount() {
    // Arrange
    User existingUser = createUser();
    Account existingAccount = createAccount(existingUser);

    // Act
    Optional&lt;Account&gt; foundAccount = repo.findById(existingAccount.getId());

    // Assert
    assertThat(foundAccount).contains(existingAccount);
}

private User createUser(){
    return userRepo.save(new User("John", "Smith"));    
}

private Account createAccount(User existingUser){
    return repo.save(makeAccount(existingUser));
}

private Account makeAccount(User user){
    new Account(user, null);
}
</code></pre>
    </div>