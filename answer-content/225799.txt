<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><code>find_an()</code> looks like an internal function, used by <code>arithmetic_partial_sum()</code>.  If it is not for external use, it should be named with a leading underscore, to suggest it is private.</p>

<hr>

<p><code>arithmetic_partial_sum()</code> appears to handle only integer values, yet it return a floating-point value (<code>1275.0</code> in the built-in example).  It should return an integer, since it is adding up integers.  Use the Python3.x integer-division operator: <code>//</code>.</p>

<pre><code>    n = 1 + (an - a1) // d
    S = n * (a1 + an) // 2
</code></pre>

<p>Or, not assume the terms are integer, and use <code>float(...)</code> instead.</p>

<hr>

<p><code>geometric_partial_sum()</code> fails if the first 2 values are not  <code>int</code> values:</p>

<pre><code>&gt;&gt;&gt; geometric_partial_sum(f"1+{1/3}+{1/9}+{1/27}+{1/81}")
Traceback (most recent call last):
  File "&lt;pyshell#1&gt;", line 1, in &lt;module&gt;
    geometric_partial_sum(f"1+{1/3}+{1/9}+{1/27}+{1/81}")
  File "...\partial_sum.py", line 63, in geometric_partial_sum
    r = int(series[1]) / a1
ValueError: invalid literal for int() with base 10: '0.3333333333333333'
</code></pre>

<p>You should convert the terms to floating-point values, not integers:</p>

<pre><code>    a1 = float(series[0])
    r = float(series[1]) / a1
</code></pre>

<hr>

<p><code>find_an()</code> assumes <span class="math-container">\$a_n\$</span> is immediately after the <code>'.'</code> term, so will fail with:</p>

<pre><code>arithmetic_partial_sum("3+7+11+15+.+95+99")
arithmetic_partial_sum("3+7+11+15+19")
</code></pre>

<p>Why not just retrieve the last term?</p>

<pre><code>def find_an(parsed_series):
    return int(parsed_series[-1])
</code></pre>

<p>Now the following all succeed and return the correct values</p>

<pre><code>arithmetic_partial_sum("3+7+11+15+.+95+99")
arithmetic_partial_sum("3+7+11+15+...+95+99")
arithmetic_partial_sum("3+7+11+15+19")
</code></pre>

<hr>

<p>The <code>"""docstrings"""</code> for <code>arithmetic_partial_sum()</code> and <code>geometric_partial_sum()</code> appear unhelpful.  For example:</p>

<pre><code>&gt;&gt;&gt; help(arithmetic_partial_sum)
Help on function arithmetic_partial_sum in module __main__:

arithmetic_partial_sum(series)
    Returns the partial sum of an arithmetic series

    Formula:
        S = n( (a1 + an) / 2 )

    Find an:
        an = a1 + (n - 1)d

    Find n:
        n = 1 + ( (an - a1) / d )

    :param series: Arithmetic series to solve
</code></pre>

<p>The function is not returning <code>an</code> or <code>n</code>.  Even the formula is not particularly helpful.  <code>"""docstrings"""</code> should tell a user how to use the function.  For example (adding Python 3.6 type hints as well):</p>

<pre><code>def arithmetic_partial_sum(series:str) -&gt; int:
    """
    Returns the sum of an arithmetic series

    Example:
        s = arithmetic_partial_sum("1+3+5+.+99")  # returns 2500

    :param series: A string representing the arithmetic series to solve
    """
</code></pre>

<p>Now type <code>help(arithmetic_partial_sum)</code>:</p>

<pre><code>&gt;&gt;&gt; help(arithmetic_partial_sum)
Help on function arithmetic_partial_sum in module __main__:

arithmetic_partial_sum(series: str) -&gt; int
    Returns the sum of an arithmetic series

    Example:
        s = arithmetic_partial_sum("1+3+5+.+99")  # returns 2500

    :param series: A string representing the arithmetic series to solve
</code></pre>

<p>The user is told the function takes a string and returns an integer.  The format of the string should be clear from the example.</p>
    </div>