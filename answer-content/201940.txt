<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Right off the bat I want to say I love the way you broke everything out into separate classes. I also like that you included your test cases. Both of these will make the code easier to process.</p>
<hr>
<h1>Tests</h1>
<p>Since this is TDD, lets start with the classes <em>(note: I pulled in NUnit and FluentAssertions from nuget)</em>.</p>
<p>I love the use of the <code>TestCase</code> attribute. I don't love the default test name that NUnit gives you when you use it, though. I prefer to set the <code>TestName</code> property of the <code>TestCase</code> attribute, using <a href="https://github.com/nunit/docs/wiki/Template-Based-Test-Naming" rel="nofollow noreferrer">https://github.com/nunit/docs/wiki/Template-Based-Test-Naming</a> to see all the possibilities. I tend to use something like <code>TestName = {M} &lt;reason for this case&gt;</code></p>
<p><code>TestCase</code> also has an <code>ExpectedResult</code> property. You can change the methods to return your expected value, instead of using <code>.Should()</code> assertions. In your case, most of your tests would not benefit, as your expected results are complex types most of the time.</p>
<p>I love that you are also testing your error conditions. Users can clearly see what invalid state looks like.</p>
<hr>
<h1>Implementation</h1>
<p>Moving onto your implementation <em>(note: I created a <code>Coordinate</code> class with <code>X</code> and <code>Y</code> integer properties. I also created the named exceptions with a hardcoded <code>Message</code> based on your test cases)</em>.</p>
<p><strong>MarsRover</strong></p>
<p><code>Initialize</code> seems like a method that should be private and called by the constructor. Or, <code>Initialize</code> could be called by <code>Navigate</code> and take the input string as parameters. Definitely keep them as separate functions, but from a user perspective I prefer not to call <code>New</code> and <code>Initialize</code> both.</p>
<p><code>NavigationParameters</code> seems like an implementation detail. I don't know that I would want to expose it as a public property. There is a test that depends on the property (<code>MarsRoverShould.ParseAnInputCorrectly</code>), but that doesn't need to be about the <code>MarsRover</code> object; it could just as easily be scoped into the <code>NavigationParameters</code> object.</p>
<p><strong>MarsRoverNavigator</strong></p>
<p>I like the encapsulation of the moving and spinning movements.</p>
<p><strong>NavigationParameters</strong></p>
<p><code>PlateauDimenstions</code> should be spelled <code>PlateauDimensions</code>.</p>
<p><strong>MovingControl</strong>/<strong>SpinningControl</strong></p>
<p>I like the dictionary for determining which direction to travel.</p>
<p>I like the use of a circular list for <code>directions</code>. It's also a good use of extension methods to create a circular list for yourself. Any time of list should work though, it wouldn't have to be linked since it's fixed size the entire time.</p>
<p>Rather than searching <code>directions</code> each time you move, you could be storing the most recent state in the <code>SpinningControl</code>. There would still be an initial search at creation, but after that holding onto the currentDirection state, and just call <code>PreviousOrLast</code> or <code>NextOrFirst</code>.</p>
<p><strong>InputValidator</strong></p>
<p>You start off great with a bunch of constants. But there are other magic numbers later in the file.</p>
<p><code>currentDirection</code>, <code>command</code>, and <code>inputByLines</code> as static member variables put up a read flag for me. You only have one public method right now, but that could change in the future and suddenly the static state doesn't make sense. I'd prefer to see those passed as parameters everywhere.</p>
<p><code>allowedDirections</code> has the same list of characters as <code>SpinningControl</code>. I think those could be pulled out into a shared reference. Maybe a <code>CardinalDirections</code> class?</p>
<hr>
<h1>General Comments and Final Thoughts</h1>
<p>In general, member variables should be as generic as possible. For example, <code>Moving Control.MoveFunctions</code>: instead of using <code>Dictionary</code>, I would recommend <code>IDictionary</code>. Later if you need some change to the implementation, such as using a <code>ReadOnlyDictionary</code>, you can change the internal usage without affecting method signatures.</p>
<p>Again, I really like the way the classes/methods are broken out. And I love that tests are provided. Makes understanding the code from an outsider perspective that much easier.</p>
    </div>