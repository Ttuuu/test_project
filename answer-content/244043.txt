<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Welcome to Code Review. I run your code and the game works well, probably there is something you have to adjust about strategy, because it does not always choose the best move to win the match or at least tie. In your code there are some repetitions about method to check if the player or the computer wins like your code below:</p>
<pre><code>private static boolean playerWon(String[][] board) {}
private static boolean playerHasThreeInRow(String[][] board) {}
private static boolean playerHasThreeInCol(String[][] board) {}
private static boolean playerHasThreeInDiag(String[][] board) {}
private static boolean compWon(String[][] board) {}
private static boolean compHasThreeInRow(String[][] board) {}
private static boolean compHasThreeInCol(String[][] board) {}
private static boolean compHasThreeInDiag(String[][] board) {}
private static boolean tie(String[][] board) {}
</code></pre>
<p>You created separated methods for the player and the computer doing the same thing while computer is also a player and the only difference between human player and computer is that one use <code>X</code> and the other use <code>O</code>. You can rewrite your methods  to check if there is a winner in this way:</p>
<pre><code>private final static String[] THREE_X = {"X", "X", "X"};
private final static String[] THREE_O = {"O", "O", "O"};
    
private static boolean areThreeInRow(String[][] board, String s) {
    String[] threeOfS = s.equals("X") ? THREE_X : THREE_O; 
        
    return IntStream.range(0, 3)
            .mapToObj(i -&gt; board[i])
            .anyMatch(row -&gt; Arrays.equals(row, threeOfS));
}
    
private static boolean areThreeInColumn(String[][] board, String s) {
    String[] threeOfS = s.equals("X") ? THREE_X : THREE_O;
        
    return IntStream.range(0, 3)
            .mapToObj(j -&gt; new String[] {board[0][j], board[1][j], board[2][j]})
            .anyMatch(column -&gt; Arrays.equals(column, threeOfS));
}
    
private static boolean areThreeInDiagonal(String[][] board, String s) {
   String[] threeOfS = s.equals("X") ? THREE_X : THREE_O;
   String[] main = { board[0][0], board[1][1], board[2][2]};        
   String[] secondary = { board[0][2], board[1][1], board[2][0]};
       
   return Arrays.equals(main, threeOfS) || Arrays.equals(secondary, threeOfS);
}
    
private static boolean isTie(String[][] board) {
    for (int i = 0; i &lt; 3; i++) {
        for (int j = 0; j &lt; 3; j++) {
            if (board[i][j].equals(" ")) return false;
        }
    }
    return true;
}
</code></pre>
<p>I had created two static arrays <code>THREE_X</code> and <code>THREE_O</code> so if one of them is present on the board the match ends with a winner. I decided to add to the signature of the methods the parameter <code>s</code> representing the symbol (<code>X</code> or <code>O</code>) the player adopted. I decided to use the <code>IntStream</code> class and the function <code>anyMatch</code> to check if someone of the rows or the columns contains three equal symbols independently from the fact you are checking if human player or computer is the winner, passing from 7 different methods to only 4.</p>
<p>I rewrite the methods <code>playerWon</code> and <code>compWon</code> in this way:</p>
<pre><code>private static boolean symbolWon(String[][] board, String symbol) {
    return areThreeInColumn(board, symbol)   ||
           areThreeInDiagonal(board, symbol) || 
           areThreeInRow(board, symbol);
}

private static boolean playerWon(String[][] board) {
    String symbol = "X";
    
    return symbolWon(board, symbol);
}
    
private static boolean compWon(String[][] board) {
    String symbol = "O";
        
    return symbolWon(board, symbol);
}
</code></pre>
<p>You can choose to modify these methods passing the symbol assigned to human player and computer.</p>
<p>Minor changes: you have to close the <code>Scanner</code> resource to avoid memory leak : use the <a href="https://docs.oracle.com/javase/tutorial/essential/exceptions/tryResourceClose.html" rel="nofollow noreferrer">try with resources</a> statement. The followind code :</p>
<pre><code>public static void main(String[] args) {
    go();
}
</code></pre>
<p>It is correct and reminds to python, but it would better directly include the Scanner and its code inside the <code>main</code> .</p>
    </div>