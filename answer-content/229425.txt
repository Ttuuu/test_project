<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The main suggestion I have is to take the values from <code>sitesToBlock</code> and put them in the <a href="https://wiki.greasespot.net/Metadata_Block#.40match" rel="nofollow noreferrer"><code>@match</code></a> metadata key instead of detecting when to update the document content. There is an extensive guide about <a href="https://developer.chrome.com/extensions/match_patterns" rel="nofollow noreferrer">match patterns here</a>. With this approach there should not be any need to wait for the DOM to be loaded and check if the URL contains elements in <code>sitesToBlock</code>, though maybe that “news_website_1” loads slower than the one I tested with and that won’t work.</p>

<p>Other review points:</p>

<ul>
<li><strong>default to using <code>const</code></strong> instead of <code>let</code> when declaring variables unless re-assignment is mandatory. This helps avoid accidental re-assignment.</li>
<li><strong>use <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of" rel="nofollow noreferrer"><code>for...of</code></a> loops</strong> when possible- e.g. for iterating through <code>sitesToBlock</code> and there is no need for a counter variable (e.g. <code>i</code>) other than accessing the current element</li>
<li><strong><code>&lt;script&gt;</code> tags still executed</strong> - those tags outside the body tag (e.g. in the <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/head" rel="nofollow noreferrer">HTML <code>&lt;head&gt;</code> element</a>, or anywhere else) are still executed so it might make sense to remove those, otherwise the execution of a script could modify the document body after the user script has finished updating the document body, which likely would be undesirable. </li>
</ul>

<p>Below is the script as I would update it. I know the <code>domain</code> might include <code>www</code> or another sub-domain if the site redirects to one - I modified the regex to look specifically for a final dot followed by anything that isn’t a dot and an <a href="https://javascript.info/regexp-anchors" rel="nofollow noreferrer">end of string anchor</a> (i.e. <code>$</code>). </p>

<pre><code>// ==UserScript==
// @name         page blocker
// @namespace    http://tampermonkey.net/
// @version      0.1
// @description  block pages
// @author       Sᴀᴍ Onᴇᴌᴀ
// @match        *://*.news_website_1.com/*
// @match        *://*.news_website_2.com/*
// @grant        none
// ==/UserScript==

(() =&gt; { //IIFE arrow function
    'use strict';

    const regexToMatchTLD = /\.[^.]+$/;
    const domain = location.hostname.replace(regexToMatchTLD, '');; 
    document.body.innerHTML =`
          &lt;div style="direction: ltr; position: fixed; top: 0; z-index: 999999; display: block; width: 100%; height: 100%; background: red"&gt;
            &lt;p style="position: relative; top: 40%; display: block; font-size: 66px; font-weight: bold; color: #fff; margin: 0 auto; text-align: center"&gt;
              The website ${domain} successfully blocked !
            &lt;/p&gt;
          &lt;/div&gt;
    `;
})();
</code></pre>
    </div>