<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Firstly, I have to admit to not doing too much in the way of thinking up better variable names; in part because the algorithm was a little hard to follow without solving the problem myself.</p>

<p>The spacing is all over the place: I'm not a PEP 8 purist but you have -= with a space before on one line, with a space after on another, and neither on a third. I fixed all the things my IDE complained about, including a redundant import of itertools.</p>

<pre><code>   LIST = list(partitionfunc(n,k))
   for b in LIST:
      ...
</code></pre>

<p>Writing LIST to not shadow the builtin list is evil but it's also unecessary: you don't need to listify the generator to iterate over it. That becomes:</p>

<pre><code>   for b in partition(n, k):
      ...
</code></pre>

<p>I changed the partition from tuples to lists, since I thought that was more natural in Python for an homogenous sequence of arbitrary length.</p>

<p>There is a loop in valid_partitions:</p>

<pre><code>count = 0 #Max. number of tiles that can be placed on a row.
while True:
    count += 1
    total -=3
    if total &lt;= 3:
        break
    total-=1
</code></pre>

<p>I replaced this with:</p>

<pre><code>max_tiles = (p + 1) // 4
</code></pre>

<p>I made valid_partitions a generator, and lost some temporary variables like 'data'. I also changed the range() to start from 1 as the comment suggests.</p>

<p>There is a little logic in the function final that I felt was doing too much, so moved it into calculate_ways()</p>

<pre><code>for q in data:
    m = len(q)
    remain = w - sum(q) - m + 1
    n = 2*m -1 + remain
    total_variations+= calculate_ways(m,n)*count_permutations(q)
</code></pre>

<p>final() became:</p>

<pre><code>def total_variations(w):
    return sum(calculate_ways(q, w) * count_permutations(q) for q in valid_partitions(w)) + 1
</code></pre>

<p>Mayble the one liner is a little <em>too</em> dense, and one should keep the for loop.</p>

<p>calculate_ways() is now a bit opaque and could probably use tidying but at least it's all in one place now.</p>

<p>I added MIN_SIZE = 3. It's probably overkill to pass 3 around as a parameter but probably worth flagging as a magic number.</p>

<pre><code>from scipy import special
import time

MIN_SIZE = 3


def partition(n, k, min=MIN_SIZE):
    """n is the integer to partition, k is the
    length of partitions, min is the min partition element size"""
    if k == 1:
        if n &gt;= min:
            yield [n]
        return 0
    for i in range(min, n+1):
        for result in partition(n - i, k - 1, i):
            yield [i] + result


def valid_partitions(p):
    """Find all the valid partitions with length [1,max_tiles] that can be placed on the row with length p"""
    max_tiles = (p + 1) // 4
    for k in range(1, max_tiles+1):
        min_part = k * MIN_SIZE
        for n in range(min_part, p+1):
            for b in partition(n, k):
                if sum(b) + (len(b)-1) &lt;= p:
                    yield b


def count_permutations(array):
    """Counts how many possible permutations are there for the particular partition"""
    get_unique_elements = set(array)
    lengths = [array.count(x) for x in get_unique_elements]
    total_length = len(array)
    answer = 1
    for b in lengths:
        answer *= special.comb(total_length, b, exact=True)
        total_length -= b
    return answer


def calculate_ways(q, w):
    m = len(q)
    remain = w - sum(q) - m + 1
    n = 2*m - 1 + remain
    return special.comb(n - m + 1, n - 2*m + 1, exact=True)


def total_variations(w):
    return sum(calculate_ways(q, w) * count_permutations(q) 

if __name__ == '__main__':
    start = time.time()
    print('Answer: {}'.format(total_variations(50)))
    print(time.time()-start)
</code></pre>

<p>As always with Project Euler, there may be some deep mathematical insight that can optimise the algorithm. And there still are a lot of single letter variables; it's a start, though.   </p>
    </div>