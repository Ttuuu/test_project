<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You can simplify your <code>distance</code> function with the function <a href="https://docs.python.org/3.4/library/math.html#math.hypot" rel="nofollow"><code>math.hypot(x, y)</code></a>:</p>

<pre><code>dx = v2[0] - v1[0]
dy = v2[1] - v1[1]
return math.hypot(dx, dy)
</code></pre>

<p><code>math.hypot(x, y)</code> computes directly <code>math.sqrt(x*x + y*y)</code>. Morevoer, the CPython implementation should be based on the underlying C function <a href="http://en.cppreference.com/w/c/numeric/math/hypot" rel="nofollow"><code>hypot</code></a>; therefore, this function is safer than the naive implementation since it does its best to avoid overflows and underflows at an intermediate stage of the computation.</p>

<hr>

<p>From a design point of view, one thing I would probably do to avoid passing coordinates everywhere is to create at least two classes, <code>Point</code> and <code>Line</code>:</p>

<p>class Point:</p>

<pre><code>def __init__(self, x, y):
    self.x = x
    self.y = y
</code></pre>

<p>class Line:</p>

<pre><code>def __init__(self, start, end):
    self.start = start
    self.end = end
</code></pre>

<p>Then, I would have done a "generic" <code>distance</code> function that can compute the distance between a point and virtually anything. With Python 3.4 <a href="https://docs.python.org/3.4/library/functools.html?highlight=singledispatch#functools.singledispatch" rel="nofollow"><code>singledispatch</code></a> decorator, it would be something like this (I did not test the code, it is merely here to give you an idea):</p>

<pre><code>from singledispatch import singledispatch

@singledispatch
def distance(shape, point):
    pass

@distance.register(Point)
def _(arg, point):
    """distance from point ot point"""
    # implementation

@distance.register(Line)
def _(arg, point):
    """distance from point to line)"""
    # implementation
</code></pre>

<p>Unfortunately, this is only a design idea, not an optimization one, but it would at least help to write code easier to write, with an API based on actual types, and not on mere coordinates.</p>
    </div>