<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>context manager</h1>

<p>The <a href="https://docs.python.org/3.5/library/multiprocessing.html#using-a-pool-of-workers" rel="nofollow noreferrer">documentation</a> uses a <code>with</code> statement, instead of </p>

<pre><code>pool = Pool()
...
pool.close()
</code></pre>

<p>to make sure the <code>close</code> is run, even when there are exceptions</p>

<h1>variables</h1>

<p>Variables names are the primary means of commenting you code. I would make <code>glob.iglob('.somedir/**/*.data', recursive=True))</code> a variable. I would even use the <code>pathlib</code> module to make the code even more clear.</p>

<p>This also gives you the opportunity to test whether the <code>glob</code> gives you back the correct files.</p>

<h1>type annotations</h1>

<p>You can tell the functions which types it can expect.This does nothing at run-time, but can help your IDE detect small bugs, and act as additional documentation to the users of the function</p>

<h1>programming tools</h1>

<p>I use <a href="https://github.com/psf/black" rel="nofollow noreferrer"><code>black</code></a> as code formatter, <a href="https://isort.readthedocs.io/en/latest/" rel="nofollow noreferrer"><code>isort</code></a> to sort my imports, a linter <a href="https://github.com/klen/pylama" rel="nofollow noreferrer"><code>pylama</code></a>  and <a href="http://mypy-lang.org/" rel="nofollow noreferrer"><code>mypy</code></a> for static code analysis. All integrated into my IDE workflow.</p>

<p>For mypy, I use this rather strict configuration</p>

<pre><code>[mypy]
check_untyped_defs = true
disallow_any_generics = true
disallow_untyped_defs = true
ignore_missing_imports = true
no_implicit_optional = true
warn_redundant_casts = true
warn_return_any = true
warn_unused_ignores = true
</code></pre>

<hr>

<pre><code>import typing
from multiprocessing import Pool
from pathlib import Path


def work(file_name: typing.Union[str, Path]) -&gt; None:
    """&lt;doc-string&gt;"""
    # do work
    pass


if __name__ == "__main__":
    data_dir = Path(".somedir/")
    file_names = data_dir.glob("**/*.data")
    with Pool() as pool:
        pool.map(work, file_names)
</code></pre>
    </div>