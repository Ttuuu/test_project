<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Are you searching for letters (<code>'A'</code> and <code>'B'</code>) or strings (<code>"A"</code> and <code>"B"</code>)?  You title says "pair of Strings in a List", but your code's variables are <code>letter</code> and <code>letters</code>.</p>

<hr>

<p>You have hard-coded the search for the strings <code>"A"</code> and <code>"B"</code>.  Are these the only two you will look for?  Might you want to search for <code>"C"</code> and <code>"D"</code>?  Is the condition "all" or "none", in which case, you could also test for all or none of <code>"X"</code>, <code>"Y"</code> and <code>"Z"</code>!</p>

<hr>

<p>You have no early termination.  If you have 1,000,000,000 entries in the list, and both <code>"A"</code> and <code>"B"</code> are found in the first dozen entries, your <code>for (String letter : letters)</code> loop will still continue to the bitter end of the list.  This is wasting time.</p>

<p>You could break out of the loop if, when one of the letters is found it is determined the other has already been found:</p>

<pre><code>    for (String letter : letters) {
        if (letter.equals("A")) {
            iA = 1;
            if (iB == 1)
                break;
        } else if (letter.equals("B")) {
            iB = 1;
            if (iA == 1)
                break;
        }
    }
</code></pre>

<hr>

<p>Here is an "Elegant"(?) stream solution for an "all" or "none" search in a list of strings for a given search set of two or more strings:</p>

<pre><code>public static boolean allOrNone(Collection&lt;String&gt; strings, String... search_set) {
    return allOrNone(strings, new HashSet&lt;&gt;(Arrays.asList(search_set)));
}

public static boolean allOrNone(Collection&lt;String&gt; strings, Set&lt;String&gt; search_set) {
    long all = search_set.size();
    long occurrences = strings.stream().filter(search_set::contains)
                                       .distinct()
                                       .limit(all)
                                       .count();
    return occurrences == 0 || occurrences == all;
}
</code></pre>

<p>Notes:</p>

<ul>
<li>The <code>.filter(search_set::contains)</code> stage will only pass on <code>strings</code> which are in the <code>search_set</code> to the next stage of the pipeline.</li>
<li>The <code>.distinct()</code> stage will prevent duplicates from continuing down the pipeline.</li>
<li>The <code>.limit(all)</code> stage allows for early termination of the stream.  If <code>search_set</code> contains 2 items, when 2 items have made it past the <code>filter</code> &amp; <code>distinct</code> stages, we must have encountered all of the search items.</li>
<li>The <code>.count()</code> totals the number of strings which made it through all stages of the pipeline ... the unique strings found in the search set.</li>
</ul>
    </div>