<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>QuickSortArrAscDesc</h2>

<p><code>QuickSortArrAscDesc</code> does not work if there are repeat values.  Although there are clear improvements over the original, a couple of changes are causing the partitions from combing properly.</p>

<p><strong>Current</strong></p>

<blockquote>
<pre><code> varPivot = arrySource(Int((lngMin + lngMax) / 2), lngSortCol)
</code></pre>
</blockquote>

<p><strong>Original</strong></p>

<blockquote>
<pre><code> varMid = SortArray((lngMin + lngMax) \ 2, lngColumn)
</code></pre>
</blockquote>

<p>The Current code rounds of the index by surrounding it by <code>Int()</code>. e.g.  <code>Array(...)(1.5)</code> returns the 3rd element where <code>Array(...)(Int(1.5))</code> will return the 2nd element.  </p>

<p><strong>Current</strong></p>

<blockquote>
<pre><code>If i &lt; lngMax Then QuickSortArrAscDesc arrySource, lngSortCol, lngMax, j, boolAscending
</code></pre>
</blockquote>

<p><strong>Original</strong></p>

<blockquote>
<pre><code>If (i &lt; lngMax) Then Call QuickSortArray(SortArray, i, lngMax, lngColumn)
</code></pre>
</blockquote>

<p>The Current code is testing <code>i</code> but passing <code>j</code> in as a parameter.</p>

<blockquote>
<pre><code>If boolAscending Then
</code></pre>
</blockquote>

<p>This <code>If ...Else</code> clause was repeated twice which makes it difficult to compare the Ascending and Descending variations of the code.  I also found that the original was easier to read because it keep the <code>&lt;&gt;</code> consistent between the <code>i</code> and <code>j</code> loops.</p>

<h2>Refactored QuickSortArrAscDesc</h2>

<pre><code>Public Sub ReversibleQuickSort(ByRef arrySource As Variant, ByVal lngSortCol As Long, _
                               Optional lngMin As Long = -1, _
                               Optional lngMax As Long = -1, _
                               Optional boolAscending As Boolean = True)

 Dim varPivot As Variant, i As Long, j As Long, lngColTemp As Long
 Dim arrRowTemp As Variant

    If IsEmpty(arrySource) Then Exit Sub

    If InStr(TypeName(arrySource), "()") &lt; 1 Then Exit Sub

    If lngMin = -1 Then lngMin = LBound(arrySource, 1)

    If lngMax = -1 Then lngMax = UBound(arrySource, 1)

    If lngMin &gt;= lngMax Then Exit Sub

    i = lngMin
    j = lngMax

    varPivot = Empty
    varPivot = arrySource(((lngMin + lngMax) / 2), lngSortCol)

    Do While i &lt;= j
        If boolAscending Then
            Do While arrySource(i, lngSortCol) &lt; varPivot
                i = i + 1
            Loop
            Do While varPivot &lt; arrySource(j, lngSortCol)
                j = j - 1
            Loop
        Else
            Do While arrySource(i, lngSortCol) &gt; varPivot
                i = i + 1
            Loop
            Do While varPivot &gt; arrySource(j, lngSortCol)
                j = j - 1
            Loop
        End If

        If i &lt;= j Then
            For lngColTemp = LBound(arrySource, 2) To UBound(arrySource, 2)
                arrRowTemp = arrySource(i, lngColTemp)
                arrySource(i, lngColTemp) = arrySource(j, lngColTemp)
                arrySource(j, lngColTemp) = arrRowTemp
            Next
            arrRowTemp = Empty
            i = i + 1
            j = j - 1
         End If
    Loop

    If lngMin &lt; j Then ReversibleQuickSort arrySource, lngSortCol, lngMin, j, boolAscending
    If i &lt; lngMax Then ReversibleQuickSort arrySource, lngSortCol, i, lngMax, boolAscending
End Sub
</code></pre>

<h2>Test</h2>

<p>Test Data</p>

<p><a href="https://i.stack.imgur.com/vOq0R.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/vOq0R.png" alt="Test Data"></a></p>

<p>Excuse the funky test code. It isn't pretty but it was effective. </p>

<pre><code>Sub TestQuickSorts()

    Dim Values
    Dim items
    Values = [A2:C9]

    Debug.Print "QuickSortArray Results"
    [G2:I9].Clear: [g2].Formula = "=SortValues(A2:C9,3)"
    items = [I2:I9]
    items = WorksheetFunction.Transpose(items)
    Debug.Print "Ascending: "; Join(items)

    [G2:I9].Clear: [g2].Formula = "=SortValues(A2:C9,3,False)"
    items = [I2:I9]
    items = WorksheetFunction.Transpose(items)
    Debug.Print "Descending: "; Join(items)

    Debug.Print vbNewLine; "ReversibleQuickSort Results"
    ReversibleQuickSort Values, 3, , , True
    items = WorksheetFunction.Index(Values, 0, 3)
    items = WorksheetFunction.Transpose(items)
    Debug.Print "Ascending: "; Join(items)

    ReversibleQuickSort Values, 3, , , False
    items = WorksheetFunction.Index(Values, 0, 3)
    items = WorksheetFunction.Transpose(items)
    Debug.Print "Descending: "; Join(items)

End Sub
</code></pre>

<h2>Results</h2>

<p><a href="https://i.stack.imgur.com/i7iZK.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/i7iZK.png" alt="Immediate Window Results"></a></p>
    </div>