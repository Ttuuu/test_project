<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I guess what they were looking for was methods on classes. Also I recommend you download resharper and see what it says about your naming conventions as they are non standard. </p>

<p>A 'Classic OO' as I call it approach might look a bit like</p>

<pre><code> public class Product
    {
        public string Name { get; private set; }
        public decimal BasePrice { get; private set; }
        public bool IsImport { get; private set; }

        /// &lt;summary&gt;
        /// enum of book, food etc
        /// &lt;/summary&gt;
        public ItemType Type { get; private set; }

        /// &lt;summary&gt;
        /// constructor allows you to set properties
        public Product(string name, decimal basePrice, bool isImport, ItemType Type)
        {
        }

        /// &lt;summary&gt;
        /// business logic to work out sale price from private fields
        /// &lt;/summary&gt;
        /// &lt;returns&gt;&lt;/returns&gt;
        public decimal GetSalePrice()
        {
            //do calculation
        }
    }
</code></pre>

<p>Also, as another commenter notes. putting some inheritance in wouldn't hurt even though its not really required. The point of these interview tests is to demonstrate you know about stuff. Its assumed you will be able to solve the problem.</p>

<p>As a guide, I always include the following :</p>

<ul>
<li>Unit Tests - cannot stress this enough! Names match tests cases ie.
givenXThenY (TDD)</li>
<li>Classes with names matching business terms (DDD)</li>
<li>Methods on those classes (OO)</li>
<li>Service classes with business logic (SoA)</li>
<li>Interfaces for <strong>EVERYTHING</strong> (more OO/DI) also shows inheritance
knowledge*</li>
<li>injection of services into constructors via interfaces (DI)</li>
<li>ViewModel objects or some other separation of display (MVVM)</li>
<li>Repository object (repository patter/separation of datalayer)</li>
<li>At least one use of Generic Collections</li>
<li>At least one use of Linq</li>
<li>XML Comment everything (code readablity)</li>
<li>Method Names which describe what they do (Clean Coding)</li>
<li>More than one project per solution (not including test project)</li>
<li>Name projects like name spaces ie YourCompany.Example5.Models</li>
</ul>

<p>other stuff you can throw in if you think the question is angling for it</p>

<ul>
<li>Recursion</li>
<li>abstract classes/ more inheritance</li>
<li>the modulus operator % some tests angle for this, shows you know
maths?</li>
<li>async method and Task, multithreading</li>
</ul>

<p>*When I say <strong>EVERYTHING</strong> I mean Services AND Models, really you don't need both, but some people like one and some the other. A lot of these things are contradictory or double up on patterns. The point is not writing good code, its demonstrating you know about lots of patterns and coding practices etc</p>
    </div>