<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Some hints about Java standard coding practices:</p>

<p><strong>Declaring from Interface type instead of Class</strong> </p>

<p>In your code are present declarations like this below:</p>

<blockquote>
<pre><code> private ArrayList&lt;Measurement&gt; measurements = new ArrayList&lt;&gt;();
</code></pre>
</blockquote>

<p>Better use instead:</p>

<pre><code>private List&lt;Measurement&gt; measurements = new ArrayList&lt;&gt;();
</code></pre>

<p>It allows flexibility if you do not want to implement an ArrayList but maybe another type of list without correcting every declaration in your code.</p>

<p>I have seen in your code you have the following if-else block:</p>

<blockquote>
<pre><code>if (temp &gt;= total * 0.8 || temp &lt;= total * 1.2)
       return temp;
else if (temp &lt;= total * 0.8)
            return temp + (total * 0.8);
     else if (temp &gt;= total * 1.2)
            return temp + (total * 1.2);
return total / this.measurements.size();
</code></pre>
</blockquote>

<p>If you have an if branch ending with a return , you have no need to use the else for the other branch; refactoring these lines and with the help of local variables you can obtain:</p>

<pre><code>double a = total * 0.8;
double b = total * 1.2;
if (temp &gt;= a || temp &lt;= b) { return temp; }
if (temp &lt;= a) { return temp + a; }
if (temp &gt;= b) { return temp + b; }
return total / this.measurements.size();
</code></pre>

<p>You have no need of use <code>this</code> in instance methods like your code below:</p>

<blockquote>
<pre><code>public class Station {
    private ArrayList&lt;Measurement&gt; measurements = new ArrayList&lt;&gt;();
    Station() {}
    public void addNewMeasurement(Measurement measurement) {
        if (this.measurements.size() &gt;= 30)
            this.measurements.remove(0);
        this.measurements.add(measurement);
    }
}
</code></pre>
</blockquote>

<p>You can rewrite your code initializing measurements inside the constructor and eliminate the <code>this</code> keyword from your methods:</p>

<pre><code>public class Station {
    private List&lt;Measurement&gt; measurements;

    public Station() {
        this.measurements = new ArrayList&lt;Measurement&gt;();
    }

    public void addNewMeasurement(Measurement measurement) {
        if (measurements.size() &gt;= 30) {
            measurements.remove(0);
        }
        measurements.add(measurement);
    }
}
</code></pre>

<p>About the reading of xml files, you are not using one of the xml api Java offers, I'm including an example of how you can read the file you posted using the Java <a href="https://docs.oracle.com/javase/8/docs/api/org/w3c/dom/package-summary.html" rel="nofollow noreferrer">dom package</a> and extract for example the DATE and TIME tags:</p>

<pre><code>File file = new File("measurement.xml");
DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
DocumentBuilder builder = factory.newDocumentBuilder();
Document doc = builder.parse(file);
Node node = doc.getElementsByTagName("DATE").item(0);
String date = node.getTextContent();
node = doc.getElementsByTagName("TIME").item(0);
String time = node.getTextContent();
LocalDateTime dateTime = LocalDateTime.of(LocalDate.parse(date), LocalTime.parse(time));
System.out.println(dateTime.toLocalTime());
System.out.println(dateTime.toLocalDate());
</code></pre>

<p>You can start from this example to extract other tags inside the xml file, instead of using two distinct fields for memorizing date and time in your class <code>Measurement</code> you have only to store the <a href="https://docs.oracle.com/javase/8/docs/api/java/time/LocalDateTime.html" rel="nofollow noreferrer">LocalDateTime</a> object.</p>
    </div>