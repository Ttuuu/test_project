<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There are a couple easy gains to be had.</p>

<h1>Python Version</h1>

<p>Use Python 3. Python 2 is <a href="https://www.python.org/doc/sunset-python-2/" rel="nofollow noreferrer">end-of-life as of 2020-01-01</a>.
In Python 3,</p>

<pre class="lang-py prettyprint-override"><code># -*- coding: utf-8 -*-
</code></pre>

<p>is no longer needed: Python 3 is UTF-8 by default.</p>

<p>Python 3.6 introduced <a href="https://www.python.org/dev/peps/pep-0498/" rel="nofollow noreferrer">f-strings</a>, where the syntax is:</p>

<pre class="lang-py prettyprint-override"><code>x = 3
text = f"You have {x} items!"
</code></pre>

<p>Much clearer and shorter than the <code>.format()</code> syntax.
The <code>%</code> string formatting syntax should not be used at all anymore.
<code>f</code>-strings are also <em>f</em>ast.</p>

<h1><a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">PEP8</a></h1>

<p>PEP 8 is a collection of style guidelines. It is highly recommended to make use of them, otherwise other Python developers will never stop reminding you. Use an editor that can format or at least warn you automatically. For this, look into tools like <a href="https://www.pylint.org/" rel="nofollow noreferrer">Pylint</a> or <a href="https://black.readthedocs.io/en/stable/" rel="nofollow noreferrer">black</a>.</p>

<p>PEP8 examples relevant to your example:</p>

<ul>
<li>global variables are all <code>UPPERCASE</code></li>
<li>commas generally have trailing spaces: <code>["X", "O"]</code></li>
</ul>

<p>Another note (not part of PEP8) is that I highly prefer double quotes (<code>"</code>) over single-quotes (<code>'</code>).
This is because empty strings (your code has them) can be confusing with the latter style (<code>''</code>), whereas they are impossible to confuse with double quotes (<code>""</code>).</p>

<h1>Function attributes</h1>

<p>Functions attributes are</p>

<pre class="lang-py prettyprint-override"><code>def func(x):
    func.y = 3
</code></pre>

<p>That is, objects attached to the function object and accessible via dot notation, among other things. I don't think (and hope) that they are not part of any introductory books. Probably better to avoid them completely, especially when just starting. Thus, your <code>display_board</code> function would become (with PEP8-formatting through <code>black</code>):</p>

<pre class="lang-py prettyprint-override"><code>def display_board(board):
    """
    Takes the board list as an argument 
    and displays it as a Tic-Tac-Toe board 
    when the game is running

    """

    row3 = "{0:^5s}||{1:^5s}||{2:^5s}".format(board[7], board[8], board[9])
    row2 = "{0:^5s}||{1:^5s}||{2:^5s}".format(board[4], board[5], board[6])
    row1 = "{0:^5s}||{1:^5s}||{2:^5s}".format(board[1], board[2], board[3])
    spaces = "{0:5s}||{1:5s}||{2:5s}".format("", "", "")
    board = [row3, row2, row1]

    for row in board[:2]:
        print(spaces + "\n" + row + "\n" + spaces)
        print("=" * 20)
    print(spaces + "\n" + row1 + "\n" + spaces)
</code></pre>

<p>Much better and clearer!</p>

<p>Function attributes can introduce a nasty state.
This is definitely not what a function should do.
For a given input, the return should always be the same.
Functions can have <a href="https://softwareengineering.stackexchange.com/q/317245/363288">side effects</a>, but the return value should be perfectly predictable, i.e. <em>deterministic</em>.
But using function attributes, this principle can be violated (snipet uses <a href="https://ipython.org/" rel="nofollow noreferrer">ipython</a>):</p>

<pre class="lang-py prettyprint-override"><code>In [1]: def func(x):
   ...:     return func.y + x
   ...:

In [2]: func.y = 3

In [3]: func(2)
Out[3]: 5

In [4]: func.y = 5

In [5]: func(2)
Out[5]: 7
</code></pre>

<p>It is clear how <code>func(2)</code> should always return the same thing (whatever that may be).
If states are required, that is you need an object that "remembers", use classes and their version of functions, <em>methods</em>.</p>

<h1>Bare try/except</h1>

<p>Never leave an <code>except</code> statement naked, that is:</p>

<pre class="lang-py prettyprint-override"><code>try:   
    position = int(input("Choose your next position: (1-9)\n"))
    break
except:
    print('Invalid input. Try again!')
</code></pre>

<p>Should be:</p>

<pre class="lang-py prettyprint-override"><code>try:   
    position = int(input("Choose your next position: (1-9)\n"))
    break
except ValueError:
    print('Invalid input. Try again!')
</code></pre>

<p>since you only try to catch the failed conversion to <code>int</code> for invalid input.
In trying out your game, the <code>except</code> also caught <a href="https://docs.python.org/3/library/exceptions.html#KeyboardInterrupt" rel="nofollow noreferrer"><code>KeyboardInterrupt</code></a>, which is hugely confusing to the user. There has to be a way to exit the game anytime.</p>

<p>Specifying a specific exception (can also be multiple, separated by commas) is much clearer, easier to understand and your program will actually break when something unexpected (unexcepted?) happens. This is what you want to handle such cases properly. It is poor practice if you try to catch a specific exception to handle it, but also catch another, unrelated one and handle that case also, but of course entirely wrong. This is unpredictable behavior that will be hard to debug.</p>
    </div>