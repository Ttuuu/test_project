<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>General observations.</h3>
<p>Personally (so you can ignore) I prefer to be able to easily distinguish between types and objects. To this end type names always have an initial uppercase letter while objects (and functions) always have an initial lowercase letter. It is a relatively common convention (but not absolute).</p>
<p>Very Good. Nothing major. Think I found one minor bug. Some issues around the ownership of pointers that should be tightened up plus a few questions you should ask yourself.</p>
<h3>Code Review</h3>
<p>I don't add <code>inline</code> unless it is absolutely needed.</p>
<pre><code>inline bool IsHandled() const
</code></pre>
<p>In the class it is not needed.</p>
<p>Avoid <code>protected</code> on variables:</p>
<pre><code>protected:
    bool m_Handled = false;
</code></pre>
<p>It does not really provide any protection from accidental abuse (which is what the public/protected/private is about. You are giving your user an entry point to abuse your class.</p>
<p>If you add something in the constructor:</p>
<pre><code>    EventListener()
    {
        EventManager::AddListener(this);
    }
</code></pre>
<p>I would normally expect you to remove it in the destructor. Or have a very clear comment on why we don't need to remove it.</p>
<p>I would pass by R-Value reference here:</p>
<pre><code>    template&lt;class T&gt;
    void Listen(EventBehavior&amp; behavior)
</code></pre>
<p>I would wrtie like this:</p>
<pre><code>    template&lt;class T&gt;
    void Listen(EventBehavior&amp;&amp; behavior)
    {
        // STUFF

        // By using the &amp;&amp; above and the std::move()
        // here we are doing a move assignment (rather than
        // copy assignment). This "can" be more effecient than
        // a copy (depending on the type of "EventBehavior").
        m_RegisteredEvents[(size_t)T::GetStaticType()] = std::move(behavior);
    }
</code></pre>
<p>Rather than force a copy you could potentially move it into the destination array.</p>
<p>Why the old school assert?</p>
<pre><code>        ASSERT(std::is_base_of&lt;Event, T&gt;, "Can't listen to non Event!");
</code></pre>
<p>This assert is run time only. Also it is only enabled when the appropriate macro flags are set correctly. C++ has <code>static_assert()</code> a much better compiler time assert.</p>
<p>So when you set a "Behavior" you override the existing one. What happens if there was already one set (could we not chain them)? Why do we need to set <code>m_ListeningTo</code> to true (could we not have a default null behavior that just always returns false; this would make a check against true unnecessary!). Just some thoughts.</p>
<pre><code>        m_ListeningTo[(size_t)T::GetStaticType()] = true;
        m_RegisteredEvents[(size_t)T::GetStaticType()] = behavior;
</code></pre>
<p>Prefer to use C++ casts:</p>
<pre><code>        (size_t)event.GetEventType()
</code></pre>
<p>These C casts are very dangerous; there is no compiler checking.</p>
<pre><code>        static_cast&lt;std::size_t&gt;(event.GetEventType())
</code></pre>
<p>Also I see the above cast everywhere. It would probably be best to give this its own function so it is done in exactly one place (that way if you change the behavior you only need to do it once).</p>
<p>Passing by pointer.</p>
<pre><code>    static void Post(Event* event)
</code></pre>
<p>Please don't do that. Who is the owner? When I call this function am I supposed to pass a value created with new or the address of an object? I can't tell without reading the code in detail. If you want to force ownership transfer use <code>std::unique_ptr</code> if you want to pass objects use a reference. Pointers should be reserved for internal use where you can easily know the semantics and there is no questions.</p>
<p>Think this is a bug!</p>
<pre><code>         for (unsigned int i = 0; i &lt; m_EventBuffer.size(); i++)
         {
              for (EventListener* listener : m_Listeners)
              {
                  // STUFF
                        m_EventBuffer.erase(m_EventBuffer.begin() + i);
                        break;

                  // OK you just erased an item (and broke out the inner loop).
                  // But the outer loop has now moved all elements down one
                  // position and you are about to increment `i`.
                  //
                  // Does this not mean you are going to skip one of the events?
              }
         }
</code></pre>
<p>Seems like an un-needed test after the else?</p>
<pre><code>                   if (!m_EventBuffer[i]-&gt;IsHandled()) {
                       // ACTION 1
                   }
                   else if(m_EventBuffer[i]-&gt;IsHandled()) {
                       // ACTION 2
                   }
</code></pre>
<p>Ether it was handled or it was not handled previously.</p>
<p>Again a pointer.</p>
<pre><code>    static void AddListener(EventListener* listener)
</code></pre>
<p>But this time (opposite from last time) you are not passing ownership. If you are not taking ownership pass by reference so we know ownership is not being passed. You can internally take a pointer from the reference. But the caller needs to know that ownership is not being taken.</p>
<p>Why not just use the new range based for?</p>
<pre><code>        for (unsigned int i = 0; i &lt; m_EventBuffer.size(); i++)
        {
            delete m_EventBuffer[i];
        }
</code></pre>
<p>Like this:</p>
<pre><code>        for (auto item: m_EventBuffer)
        {
            delete item;
        }
</code></pre>
<p>This looks like it should be a <code>dynamic_cast</code>.</p>
<pre><code>bool keyPressed(const Event&amp; event)
{
    const KeyPressedEvent&amp; kpe = static_cast&lt;const KeyPressedEvent&amp;&gt;(event);
    //Do something
    return true;
}
</code></pre>
<p>There is no guarantee that the <code>Event</code> is a <code>KeyPressedEvent</code>. You want to do a dynamic_cast to make sure the code checks at runtime that this is the correct type. This will help during testing as it will help you identify bugs. Also will static_cast work if there is multiple inheritance at play?</p>
    </div>