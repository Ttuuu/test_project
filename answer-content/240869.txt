<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I rewrote some of your code, from your class Project:</p>

<blockquote>
<pre><code>public class Project {
    String id;
    Set&lt;Project&gt; dependencies = new HashSet&lt;&gt;();
    static Project withId(String id) {
        Project project = new Project();
        project.id = id;
        return project;
    }
     @Override
    public String toString() {
        return "Project{" + "id='" + id + '\'' + '}';
    }
}
</code></pre>
</blockquote>

<p>You defined an implicit default constructor taking no arguments that means it is possible to define a project with naming it and a factory constructor taking one <code>id</code> argument, you can instead define a constructor taking as argument <code>id</code> and you can rewrite your <code>toString</code> method using <code>String.format</code>:</p>

<pre><code>public class Project {

    private String id;
    private Set&lt;Project&gt; dependencies;

    public Project(String id) {
        this.id = id;
        this.dependencies = new HashSet&lt;Project&gt;();
    }

    @Override
    public String toString() {
        return String.format("Project{id='%s'}", id);
    }
}
</code></pre>

<p>I run your code without <code>equals</code> and <code>hash</code> methods and it is still fine.</p>

<p>I made some change to your method <code>buildableProjects</code>:</p>

<pre><code>Set&lt;Project&gt; buildableProjects(Set&lt;Project&gt; projectsToBeOrdered, Set&lt;Project&gt; satisfiedProjects) {
    Set&lt;Project&gt; buildableProjects = new HashSet&lt;&gt;();

    projectsToBeOrdered.forEach(project -&gt; {
        if (satisfiedProjects.containsAll(project.dependencies)) {
                buildableProjects.add(project);
            }
        });

    return buildableProjects;
}
</code></pre>

<p>You can use streams to abbreviate code:</p>

<pre><code>Set&lt;Project&gt; buildableProjects(Set&lt;Project&gt; projectsToBeOrdered, Set&lt;Project&gt; satisfiedProjects) {

    return projectsToBeOrdered.stream()
            .filter(p -&gt; satisfiedProjects.containsAll(p.getDependencies()))
            .collect(Collectors.toSet());
}
</code></pre>

<p>Your method <code>List&lt;Set&lt;Project&gt;&gt; resolveOrder()</code> instead of <code>null</code> for empty list can return <code>Collections.emptyList()</code></p>

<p>I'm used junit to rewrite your class <code>BuildOrderTest</code> to have a division between cases you are examining , below the code of the class I have rewritten:</p>

<pre><code>public class OrderTest {

    private BuildOrderResolver buildOrderResolver;
    private Project a, b, c, d, e, f;
    private List&lt;Set&lt;Project&gt;&gt; buildOrder;

    @BeforeEach
    void setUp() {
        buildOrderResolver = new BuildOrderResolver();
        a = new Project("a");
        b = new Project("b");
        c = new Project("c");
        d = new Project("d");
        e = new Project("e");
        f = new Project("f");
    }

    @Test
    void testAB() {
        a.getDependencies().add(b);
        buildOrder = buildOrderResolver.resolveOrder(new HashSet&lt;&gt;(asList(a, b)));
        System.out.println("testAB =" + buildOrder);
    }

    @Test
    void testABC() {
        a.getDependencies().add(b);
        b.getDependencies().add(c);
        buildOrder = buildOrderResolver.resolveOrder(new HashSet&lt;&gt;(asList(a, b, c)));
        System.out.println("testABC ="+ buildOrder);
    }

    @Test
    void testCDDBA() {
        c.getDependencies().add(d);
        d.getDependencies().add(b);
        d.getDependencies().add(a);
        b.getDependencies().add(f);
        a.getDependencies().add(f);

        buildOrder = buildOrderResolver.resolveOrder(new HashSet&lt;&gt;(asList(a, b, c, d, e, f)));
        System.out.println("testCDDBA ="+ buildOrder);
    }

    @Test
    void testCircularyDependency() {
        a.getDependencies().add(b);
        b.getDependencies().add(a);

        buildOrder = buildOrderResolver.resolveOrder(new HashSet&lt;&gt;(asList(a, b)));
        System.out.println("testCircularyDependency ="+ buildOrder);
    }
}
</code></pre>

<p>According to your description of the problem, it seems me really complicated to find a simple solution to this problem, it appears to me probably you should have to find a path in a graph without cycles with lot of costraints. If someone here had worked with this type of problems I'm curious too to see if there is a general method to solve them.</p>
    </div>