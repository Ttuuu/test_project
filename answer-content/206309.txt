<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Analyzing the problem, finding clues</h3>

<blockquote>
  <p>I used selection sort approach as selection sort makes minimum swap operation.</p>
</blockquote>

<p>Really? (I don't know.) More importantly, are you sure sorting is needed here?</p>

<blockquote>
  <p>My time complexity is <span class="math-container">\$O(n^2)\$</span>. Can I reduce it?</p>
</blockquote>

<p>When the time limit is exceeded,
and the program appears to work correctly for non-large inputs,
the typical cause of slowness is the algorithm.
It can be hard to find an efficient algorithm.
To figure out the trick, look for clues.
For example, look details in the question that are not used in the current algorithm.</p>

<blockquote>
  <p>You are given an unordered array consisting of consecutive integers âˆˆ [1, 2, 3, ..., n] without any duplicates.</p>
</blockquote>

<p>Take a closer look. What's in there that your solution is not using?</p>

<p>There's nothing in your implementation that benefits from integers being consecutive, without any duplicates.
That is, it's not benefitting from this constraint on the input:</p>

<p><span class="math-container">$$
1 \leq arr[i] \leq n
$$</span></p>

<p>In other words, the input consists of the numbers <span class="math-container">\$1, 2, 3, ..., n\$</span>, shuffled.
Given such input,
you can produce a correct ordering in <span class="math-container">\$O(n)\$</span>.
And as such, maybe sorting is not needed here after all.</p>

<p>This is still just a hint, without directly answering how to compute the minimum number of swaps.
But this observation must surely be part of the implementation.</p>

<p><em>(I suggest to stop reading here and try to come up with an algorithm that uses the above observation and implement a passing solution. Continue reading only if you need hints.)</em></p>

<h3>Alternative algorithm</h3>

<p>Consider this algorithm:</p>

<ul>
<li>Build an array of indexes of the values in the input: <code>indexes[arr[i] - 1] = i;</code>.</li>
<li>Iterate over the input array, and when <code>arr[i] != i + 1</code>, then swap <code>arr[i]</code> with  <code>arr[indexes[i]]</code>, and update the index of the original value of <code>arr[i]</code>.</li>
</ul>

<p>For example, for <code>[7, 1, 3, 2, 4, 5, 6]</code>, the content of <code>indexes</code> would be <code>[1, 3, 2, 4, 5, 6, 0]</code> (<code>indexes[7 - 1] = 0; indexes[1 - 1] = 1; indexes[3 - 1] = 2; ...</code>.</p>

<p>Then, the content of <code>arr</code> and <code>indexes</code> will go through these changes:</p>

<pre><code>i       = 0; 7 != 1 so swap it with 1 (the element that belongs here)
arr     = [7, 1, 3, 2, 4, 5, 6]
indexes = [1, 3, 2, 4, 5, 6, 0]

i       = 1; 7 != 2 so swap it with 2 (the element that belongs here)
arr     = [1, 7, 3, 2, 4, 5, 6]
indexes = [1, 3, 2, 4, 5, 6, 1]

i       = 2; 3 == 3 so no swap
arr     = [1, 2, 3, 7, 4, 5, 6]
indexes = [1, 3, 2, 4, 5, 6, 3]

i       = 3; 7 != 4 so swap it with 4 (the element that belongs here)
arr     = [1, 2, 3, 4, 7, 5, 6]
indexes = [1, 3, 2, 4, 5, 6, 4]
</code></pre>

<p>And so on, two more swaps (total 5) and 7 reaches the end.</p>

<h3>Bugs in questions</h3>

<p>I don't recall ever finding a bug in an online puzzle (and that should always be the very last thought on your mind),
but this puzzle has one.
The 3rd sample input <code>[1, 3, 5, 2, 4, 6, 8]</code> (Testcase 14) violates the constraint <span class="math-container">\$1 \leq arr[i] \leq n\$</span>. The 8 should be replaced with 7.
I worked around that by doing this when building <code>indexes</code>:</p>

<pre><code>if (arr[i] &gt; N) arr[i] = N;
</code></pre>
    </div>