<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<pre><code>public class Member {
    private LocalDateTime dateCreated;
    private String firstName;
    private String lastName;
    private String screenName;
    private String userID;
    private List&lt;Membership&gt; memberships = new ArrayList&lt;Membership&gt;();
</code></pre>
</blockquote>

<p>How many of those fields should be mutable? I would have thought that at least <code>dateCreated</code>, <code>userID</code> and <code>memberships</code> should be <code>final</code>.</p>

<hr>

<blockquote>
<pre><code>    public Member(String firstName, String lastName, String screenName, String userID) {
        super();
</code></pre>
</blockquote>

<p>There's no need to explicitly call <code>super()</code> for two reasons: firstly, the no-arg super-constructor is the default one; and secondly, the superclass doesn't have any other constructors from which to distinguish.</p>

<hr>

<blockquote>
<pre><code>        this.firstName = firstName;
        this.lastName = lastName;
        this.screenName = screenName;
        this.userID = userID;
</code></pre>
</blockquote>

<p>Validation? <code>firstName</code> and <code>lastName</code> could reasonably be empty or null (see <a href="https://www.kalzumeus.com/2010/06/17/falsehoods-programmers-believe-about-names/" rel="nofollow noreferrer">Falsehoods Programmers Believe About Names</a>), but <code>userID</code> at the very least surely needs to be non-trivial.</p>

<hr>

<p>Actually, that deserves to be a separate point. The treatment of names is simply wrong and will not survive contact with the real world without offending or confusing people whose names don't fit into the pigeonhole of "one first name and one last name". Not to mention that the usage given to those would be wrong if it assumes, for example, that the last name is a family name and more formal, whereas the first name is an individual name, and more intimate. Speaking as an expatriate, I have personal experience of the problems that can be caused by names from one culture not mapping well onto the naming schemes of another culture.</p>

<hr>

<blockquote>
<pre><code>        this.dateCreated = LocalDateTime.now();
</code></pre>
</blockquote>

<p>This creates a few problems. How are you going to set up reliable test fixtures? Will you need to serialise and deserialise, and if so how are you going to do that? And are you guaranteed a consistent timezone? I looked at the Java docs for this, and found them rather ambiguous.</p>

<hr>

<blockquote>
<pre><code>    protected void addMembership(Membership m) {
        memberships.add(m);
    }
</code></pre>
</blockquote>

<p>Do you have a specific use case in mind for which you will need to override this?</p>

<p>How about some validation that the membership is of the correct member?</p>

<hr>

<blockquote>
<pre><code>    public List&lt;Group&gt; getGroups() {
        List&lt;Group&gt; groups = new ArrayList&lt;&gt;();
        for(Membership membership : memberships) {
            groups.add(membership.getGroup());
        }
        return groups;
    }
</code></pre>
</blockquote>

<p>Looking at this raises a few questions in my mind:</p>

<ol>
<li>Should the return value be immutable (<code>Collections.unmodifiableList</code>) and documented as such, to prevent people changing the list in the belief that they're changing the underlying model?</li>
<li>Why <code>List</code>? Does the order matter?</li>
<li>Why not <code>Set</code>? Is it possible for one member to have multiple memberships in the same group?</li>
<li><code>Membership</code> contains additional information: the date of association. How would I get at that information with this API?</li>
</ol>

<hr>

<blockquote>
<pre><code>    public static void main(String[] args) {
        Member m = new Member("Les", "Wrigley", "Lesman", "lwrigley@gmail.com");
        System.out.println(m);
    }
</code></pre>
</blockquote>

<p>This is not a very useful test: about the only thing it verifies is that neither the constructor nor the <code>toString()</code> method throws an exception.</p>

<hr>

<p>My comments on <code>Group</code> are virtually identical to those on <code>Member</code>.</p>

<hr>

<blockquote>
<pre><code>    public Membership(Member m, Group g) {
        dateJoined = LocalDateTime.now();
        this.member = m;
        this.group = g;
        member.addMembership(this);
        group.addMembership(this);
    }

    ...

    public static void main(String[] args) {
        Member m = new Member("Les", "Wrigley", "Lesman", "lwrigley@gmail.com");
        Group g = new Group("Java Programming", "Questions related to programming in Java");
        Membership membership = new Membership(m,g);
</code></pre>
</blockquote>

<p>There is a general expectation that constructors will not have side-effects. However, it seems that the only way to add a member to a group is to call the <code>Membership</code> constructor. That will lead to code with statements which are just constructor invocations: <code>new Membership(m,g);</code> and which an incautious maintenance programmer might delete as unnecessary. If you care about OO purism then adding a member to a group should be a method of either <code>Member</code> or <code>Group</code> (or possibly both, with one passing the call on to the other). If you don't, a static method <code>Membership.create</code> will communicate more clearly that it has side-effects.</p>

<hr>

<blockquote>
<pre><code>    @Override
    public String toString() {
        String groupName = group.getTitle();
        String memberName = member.getLastName() + ", " + member.getFirstName();
</code></pre>
</blockquote>

<p>If this is intended for use in log messages then it should use <code>member.getUserID()</code> since that's unique. If it's intended for UI messages then it should use <code>member.getScreenName()</code>, since that's the whole purpose of screen names. I can't see any scenario where <code>member.getLastName() + ", " + member.getFirstName()</code> is the best option.</p>
    </div>