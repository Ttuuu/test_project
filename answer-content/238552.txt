<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><a href="https://codereview.stackexchange.com/a/238543/56343">John's answer</a> is correct on programming matters. I want to comment on the logic of your code.</p>

<p>I found the collision detection calculation difficult to interpret. Which point on the square is represented by <code>playerPosition</code>? The documentation for SFML says it's the upper-left corner (<a href="https://www.sfml-dev.org/documentation/2.5.1/classsf_1_1Transformable.php#a56c67bd80aae8418d13fb96c034d25ec" rel="noreferrer">although in a roundabout way</a>), but it could also reasonably be the center. I can see that <code>playerPosition.x + playerWidth</code> is the right edge of the player, but what does <code>playerPosition.x - playerWidth</code> represent? This is a random point off to the left of the player.</p>

<p>Giving parts of the calculation good names will make the logic much easier to understand and debug should the need arise.</p>

<pre><code>float playerLeftEdge = player.getPosition().x;
float playerRightEdge = playerLeftEdge + player.getSize().x;
float playerTopEdge = player.getPosition().y;
float playerBottomEdge = playerTopEdge + player.getSize().y;

float enemyLeftEdge = enemy.getPosition().x;
float enemyRightEdge = enemyLeftEdge + enemy.getSize().x;
float enemyTopEdge = enemy.getPosition().y;
float enemyBottomEdge = enemyTopEdge + enemy.getSize().y;

return playerRightEdge &gt; enemyLeftEdge &amp;&amp; playerLeftEdge &lt; enemyRightEdge &amp;&amp;
       playerTopEdge &lt; enemyBottomEdge &amp;&amp; playerBottomEdge &gt; enemyTopEdge;
</code></pre>

<p>Case in point regarding debugging, according to the documentation:</p>

<blockquote>
  <p>In addition to the position, rotation and scale, sf::Transformable provides an "origin" component, which represents the local origin of the three other components. Let's take an example with a 10x10 pixels sprite. By default, the sprite is positioned/rotated/scaled relatively to its top-left corner, because it is the local point (0, 0). But if we change the origin to be (5, 5), the sprite will be positioned/rotated/scaled around its center instead. And if we set the origin to (10, 10), it will be transformed around its bottom-right corner.</p>
</blockquote>

<p>So, the bottom edge coordinate will be greater than the top edge, requiring a reversal of the logic for y-coordinate collisions (hence my latest edit).</p>

<p>The logic in your code only works because the player and enemy have the same width, which may not always be true in future iterations of your game. Even if it never changes and <code>playerWidth</code> is always equal to <code>enemyWidth</code>, giving different names to conceptually different quantities makes for more understandable code.</p>
    </div>