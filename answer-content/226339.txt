<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Performance and readability are often a trade off. This <span class="math-container">\$O( n \log n)\$</span> solution just misses the <span class="math-container">\$O(n)\$</span> target, because we must sort the pre-filtered array, but it’s much easier to reason about a map/reduce in my opinion. </p>

<pre><code>Integer[] nums = {1,2,0};
//Integer[] nums = {3,4,-1,1};
//Integer[] nums = {1,2,4};
//Integer[] nums = {1};
//Integer[] nums = {0};

 Integer result = 
    Arrays.stream(nums)
        .filter(x -&gt; x &gt; 0)
        .sorted()
        .reduce(1, (prev, curr) -&gt; (prev == curr) ? curr + 1 : prev );

System.out.println(result);
</code></pre>

<p>I generally find it a bit strange that you’re using streams to generate what is essentially a loop (<code>forEach</code>) instead of turning the array into a stream and leveraging the power streams give you. </p>
    </div>