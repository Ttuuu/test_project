<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">


<h3>Quick-Glance nitpicks</h3>

<ul>
<li><code>elements</code> can (and should) be <code>final</code>. This reinforces the point that you're not changing that reference.</li>
<li>Always place braces around blocks. That's especially true for single-line if-blocks like the element size guard.
Somewhat interestingly inside <code>merge</code> you placed the braces in all if-blocks except the last.</li>
<li>You're inconsistent in the spacing for conditionals. In <code>merge</code> the inner if-statement's conditionals are surrounded by spaces, everywhere else, they are not. I personally prefer putting a space before the opening parenthesis of any condition, if only to distinguish it from a method invocation.</li>
</ul>

<h3>Density of semantics</h3>

<p>The swap calls in <code>merge</code> are rather heavy in what they do. There's a lot going on at once, relying on a conscious and full understanding of unary operators and how the method works.</p>

<p>If I were you, I'd consider extracting the incrementing of the indices to separate statements. That can also make the reasoning somewhat easier to understand, seeing that <code>leftIndex++</code> is in every branch of the tree:</p>

<pre><code>    while (leftIndex &lt; left.size()) {
        if (rightIndex == 0) {
            if (left.get(leftIndex).compareTo(right.get(rightIndex)) &gt; 0) {
                swap(left, leftIndex, right, rightIndex);
                rightIndex++;
            }
        } else if (right.get(0).compareTo(right.get(rightIndex)) &gt; 0) {
            swap(left, leftIndex, right, 0);
        } else {
            swap(left, leftIndex, right, rightIndex);
            rightIndex++;
        }
        leftIndex++;
    }
</code></pre>

<p>At this point it should also be clear that the first if-statements can be collapsed into a single statement.
  JS1 mentions that the in-place merge you are doing does not work for all cases.
  Unfortunately I can't tell you quite exactly why, but making the code easier to grasp should help troubleshooting and fixing this :)</p>

<h3>Optional List features</h3>

<p>You're making use of the <code>set</code> operation on Lists. 
It's important to be aware that <code>set</code> is an <strong>optional operation</strong>. 
Not all implementations of <code>List</code> provide an implementation and may throw <code>UnsupportedOperationExcpetion</code> instead.
Then again all the other features you could use to replace this are also optional (what with modification of Lists being optional)... </p>
    </div>