<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>In your action processing script, you should, before doing anything else, validate the input.  If anything is outside of the expected range of values, you should immediately return a failure response.</p>

<p>I will also urge you to write your query functions in object-oriented syntax rather than procedural because it is more brief and easier to read (IMO).</p>

<p>Since you are returning json, I recommend that you always return some sensibly keyed objects containing predictable data types for your javascript to handle.  You may consider <code>status</code>, <code>message</code>, and <code>data</code> as included keys no matter the outcome, this will make the javascript handling much cleaner.</p>

<p>The following rewrite will exercise reduced variable generation, and less complex &amp; more readable logic and queries.</p>

<p>The action processing script:</p>

<pre><code>if (empty($_POST["memberId"]) ||
    empty($_POST["cartId"]) ||
    !isset($_POST["newQuantity"]) ||
    !ctype_digit($_POST["memberId"]) ||
    !ctype_digit($_POST["cartId"]) ||
    !in_array($_POST["newQuantity"], [-1, 0, 1])
) {
    exit(json_encode(['status' =&gt; 'fail',
                      'message' =&gt; 'Missing/Invalid request data',
                      'data' =&gt; []]));
}

require 'connectDB.php';  // adjust this to OO style instead of procedure

if (!$_POST["newQuantity"]) {
    $query = "DELETE FROM tbl_cart WHERE id = ? AND member_id = ?";
} elseif ($_POST["newQuantity"] == 1) {
    $query = "UPDATE tbl_cart SET quantity = quantity + 1 WHERE id = ? AND member_id = ?";
} else {
    $query = "UPDATE tbl_cart SET quantity = quantity - 1 WHERE quantity &gt; 0 AND id = ? AND member_id = ?";
}
$stmt = $conn-&gt;prepare($query);
$stmt-&gt;bind_param('ii', $_POST["cartId"], $_POST["memberId"]);
$stmt-&gt;execute();
$stmt-&gt;close();

$stmt = $conn-&gt;prepare($conn, "SELECT p.id, p.price, c.quantity, c.id AS cartId 
                               FROM tbl_product AS p
                               INNER JOIN tbl_cart AS c on p.id = c.product_id
                               WHERE c.member_id = ?");
$stmt-&gt;bind_param('i', $_POST["memberId"]);
$stmt-&gt;execute();
$result = $stmt-&gt;get_result();
exit(json_encode(['status' =&gt; 'pass',
                  'message' =&gt; 'Shopping cart updated',
                  'data' =&gt; $result-&gt;fetch_all(MYSQLI_ASSOC)]));
</code></pre>

<p>Now you javascript can be adjusted to process these very useful, meaningful, and always-available values (which ALWAYS have the same data type) via:</p>

<ul>
<li><code>response.status</code> (string)</li>
<li><code>response.message</code>(string)</li>
<li><code>response.data</code>(an empty or multi-dimensional array)</li>
</ul>
    </div>