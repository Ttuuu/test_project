<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I don't know R, so I can't comment much on your code. </p>

<p>If we strip away the context, then it sounds like we could phrase your question as such:</p>

<blockquote>
  <p>Given a list of pairs
  <span class="math-container">$$L = \bigl[ (a_1,b_1), (a_2,b_2), ... (a_n,b_n)\bigr]$$</span>
  and a number <em>S</em>,
  find a list 
  <span class="math-container">$$C = \bigl[c_1, ... c_n\bigr]$$</span> 
  <span class="math-container">$$c_i ∈ \{first, second\} $$</span>
  that minimizes
  <span class="math-container">$$ \left| S -\sum_{i ∈ [1...N]} C_i(L_i)\right|$$</span></p>
</blockquote>

<p>(Is it guaranteed that there will be a C for which that difference is 0?)</p>

<p>Our total search space is then 2^n combinations  .
(for a version of the problem that represents one column of your data)</p>

<p>We can improve on your random method by searching that space systematically; just count up from 0 to n in binary and those digits are your candidate lists C.</p>

<p>That's still a O(2^n) process, the advantage is that you're never re-checking the same list by accident. I would bet that a O(log(n)) or O(n log(n)) algorithm exists; you could take this over to StackOverflow or the Math SE and probably get some suggestions. </p>
    </div>