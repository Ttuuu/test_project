<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This is the code review stack, so I've going to focus on that aspect and you've received some good suggestions on the implementation approach.</p>

<p>1) Name things for the problem or business domain, not the programming domain, so instead of using IntArrayProcessor for the class name, use a class name that encapsulates its <a href="https://www.oodesign.com/single-responsibility-principle.html" rel="nofollow noreferrer">Single responsibility</a>. This also applies to naming functions, so instead of <code>getSet</code> use something that makes the purpose of the function clear; e.g <code>deduplicate</code> or <code>getUniqueFoo</code>.</p>

<p>2) Use abstractions over primitive types, Java has excellent flexible  <a href="https://docs.oracle.com/javase/tutorial/collections/" rel="nofollow noreferrer">collections</a>, which the others have shown.  Using them.</p>

<p>3) Do not reinvent the wheel, another reason to use Java collections, learn what libraries are available for the platform you are using.</p>

<p>4) Every time you use a comment, think to yourself 'why?', what made it necessary to explain this snippet of code with a comment.  Can I modify the code, rename the variable to make the function of this code clear without the need for a comment.  I think nearly all your comments could be removed this way as redundant.  Comments should be a last resort not the first way to explain semantics of the code.</p>

<p>5) Decompose each function, it has four loops, extract these to separate functions which improve clarity, this will facilitate reuse and enable testing with TDD.</p>

<p>6) Use Test Driven Development, it really will make learning to code easier, it provides continuous feedback and once you start writing live code it will make you far more productive.</p>
    </div>