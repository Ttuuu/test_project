<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You say you're new to Python. Well, that's ok. And a <a href="https://en.wikipedia.org/wiki/Caesar_cipher" rel="noreferrer">Caeser Cipher</a> is a good place to start since it's complex enough for an absolute beginner while easy enough to understand what goes on, why and when.</p>

<p>One thing to keep in mind is that Python comes <a href="http://protocolostomy.com/2010/01/22/what-batteries-included-means/" rel="noreferrer">batteries included</a>. This means a lot of what you want to accomplish is already written, one way or another. You just have to know where to find it.</p>

<p>For example, take the first function of your program:</p>

<pre><code>def charSplit(str):
    return [char for char in str]
</code></pre>

<p>Simple enough. <code>charSplit('foo')</code> returns <code>['f', 'o', 'o']</code>.</p>

<p>Did you know we can do the same with <a href="https://www.tutorialspoint.com/python3/list_list.htm" rel="noreferrer"><code>list</code></a>? <code>list('foo')</code> returns <code>['f', 'o', 'o']</code> as well.</p>

<p>So, we're down 1 function. Let's create a new one. You're wrapping your code quite nicely here:</p>

<pre><code>if __name__ == "__main__":
</code></pre>

<p>This makes sure the code is only running when the file itself is called, not when it's imported by another file. How about taking it a step further to clean things up?</p>

<pre><code>def main():
    # all code that was previously behind the mentioned if-statement goes here

if __name__ == "__main__":
    main()
</code></pre>

<p>Everything above the <code>if</code> are <a href="https://www.python-course.eu/python3_global_vs_local_variables.php" rel="noreferrer">global variables</a>. I'm not a fan of global variables, so we'll get rid of them later. But let's assume for a moment you want to keep them around.</p>

<p>Since some of those are only read and never overwritten (pseudo-<a href="https://www.python.org/dev/peps/pep-0008/#constants" rel="noreferrer">constants</a>), it's usually preferred to CAPITALIZE them. Makes them easier to recognize.</p>

<p>How about another function? It may be a bit overkill here since the <code>main</code> function I wrote earlier already covers everything and the code only has one purpose, but code usually grows. Function-creep comes in and all of a sudden you have 300 lines of code in the same function. Better to split things up already, keeps things easier. Besides, it gives me an excuse to tell something about arguments.</p>

<pre><code>def caesar_cipher(inp, shift):
    """
    Take inp(ut) as string, shift as integer and return ciphered string.
    """
    # code here
</code></pre>

<p><code>s</code> wasn't a particularly descriptive variable name, so that's <code>inp</code> now (<a href="https://docs.python.org/3.5/library/functions.html#input" rel="noreferrer"><code>input</code></a> is already taken.) Can you see this growing? While we're at variable names, having both a <code>result</code> and <code>finalResult</code> is somewhat confusing. The entire construct is somewhat confusing.</p>

<pre><code># Iterates through result and adds each string to the empty string, "finalResult".
for l in result:
    finalResult += l
</code></pre>

<p>You're really just copying <code>result</code> here, so <code>finalResult</code> can go. Well, almost. We still need to go to a string, so we're interested in <code>''.join(result)</code>. That takes an empty string, and joins all parts of the <code>result</code> list into it.</p>

<p>I don't like the <code>while</code> loop. There's 3 reasons for this and I'm going to fix 2 now and 1 later. Why? To keep things simple and easy to follow.</p>

<p>It starts out like this:</p>

<pre><code>while found == False:
</code></pre>

<p>Did you know you can rewrite that to make it even more obvious what's going on?</p>

<pre><code>while not found:
</code></pre>

<p>Which, if you're familiar with other languages, reads like <code>while(!found)</code>. Python has the <code>not</code> operator, which returns True if the expression behind it is False.</p>

<p>The other end of the loop can be improved as well. You're printing the result of the cipher, while we may want to do something completely different with it. Perhaps the result should be used in a different function? That's not the cipher's problem. Let <code>main</code> figure that out. All in all, the code so far would look like this with the above taken into account:</p>

<pre><code># Imports the lowercase alphabet as a whole string.
from string import ascii_lowercase


LETTERS = list(ascii_lowercase)

def caesar_cipher(inp, shift):
    """
    Take inp(ut) as string, shift as integer and return ciphered string.
    """
    found = False
    strIndex = 0
    letterIndex = 0
    result = []

    while not found:
        # Checks if the string has been converted to the cipher.
        if len(result) == len(inp):
            found = True
        # Adds a space to the result variable if the string index is a space.
        elif inp[strIndex] == " ":
            result.append(" ")
            strIndex += 1
        # Checks if the string index is equal to the letter index.
        elif list(inp)[strIndex].lower() == LETTERS[letterIndex]:
            result.append(LETTERS[letterIndex - 1])
            strIndex += 1
        # 
        else:
            if len(LETTERS) - 1 == letterIndex:
                letterIndex = 0
            else:
                letterIndex += 1

    return(''.join(result))

def main():
    print(caesar_cipher("abcde test bla bla bla", -1))

if __name__ == "__main__":
    main()
</code></pre>

<p>We haven't actually <em>used</em> <code>shift</code> yet, but we'll need it to fix another problem in your code: it's a very limited Caesar cipher. After all, a proper Caesar cipher takes a shift parameter. How far should the text be shifter? 1 character? 2? 13? We can make this go round and round and round. That's one of the good things about a Caesar cipher.</p>

<p>I'm still not a fan of the <code>while</code> loop here, so let's fix 2 things at a time. If our algorithm is correct, we can simply iterate over the input and <em>know</em> the output is correct at the end without keeping track of a <code>found</code> variable. And while we're at it, let's try to remove the other variables that are just to keep track as well.</p>

<p>You made a good start with importing <code>ascii_lowercase</code>, so let's build on that. Did you know <code>string.ascii_lowercase</code> (just like <code>string.lowercase</code>) has an <code>index</code> function? It provides us with the position of a character in a string.</p>

<p>What if we use that index to retrieve a different value of the alphabet instead? After all, an index is just a number. We could modify that number to get a different character altogether.</p>

<blockquote>
  <p>For every character in the input, if the character is a letter, get a different letter from the alphabet instead.</p>
</blockquote>

<p>Oh, we can use a <a href="https://wiki.python.org/moin/ForLoop" rel="noreferrer"><code>for</code></a> loop instead of a <a href="https://wiki.python.org/moin/WhileLoop" rel="noreferrer"><code>while</code></a> loop!</p>

<pre><code># Imports the lowercase alphabet as a whole string.
from string import ascii_lowercase


LETTERS = list(ascii_lowercase)

def caesar_cipher(inp, shift):
    """
    Take inp(ut) as string, shift as integer and return ciphered string.
    """
    result = []

    for character in inp:
        if character in LETTERS:
            # If it's a letter, we cipher it
            result.append(LETTERS[ascii_lowercase.index(character) + shift])
        else:
            # If it's NOT a letter, we won't cipher it
            result.append(character)

    return(''.join(result))

def main():
    print(caesar_cipher("abcde test bla bla bla", -1))

if __name__ == "__main__":
    main()
</code></pre>

<p>See how much easier that is to read? Now we just need a minor modification to account for the limited length of the alphabet. After all, what happens if someone wants a shift of 40? Or 51? Please welcome the <a href="https://en.wikipedia.org/wiki/Modulo_operation" rel="noreferrer"><code>%</code> modulo</a> operator. Divide by the length of the alphabet (26) and return the remainder.</p>

<pre><code># Imports the lowercase alphabet as a whole string.
from string import ascii_lowercase


LETTERS = list(ascii_lowercase)

def caesar_cipher(inp, shift):
    """
    Take inp(ut) as string, shift as integer and return ciphered string.
    """
    result = []

    for character in inp:
        if character in LETTERS:
            # If it's a letter, we cipher it
            result.append(LETTERS[(
                ascii_lowercase.index(character) + shift
                ) % len(LETTERS)])
        else:
            # If it's NOT a letter, we won't cipher it
            result.append(character)

    return(''.join(result))

def main():
    print(caesar_cipher("abcde test bla bla bla", 51))

if __name__ == "__main__":
    main()
</code></pre>

<p>Now, compare this to the original version. Can you see how we got here? You started out right, and now we got something even better. And this can probably be improved even further, I'm fairly sure we don't need <code>result</code> to be a list in the first place. Have fun figuring that out :-)</p>
    </div>