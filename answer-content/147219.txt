<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>I'm asking for rather hard, destructive critics and review.</p>
</blockquote>

<p>Sure.</p>

<h3>Interface.</h3>

<p>I don't see the interface (ie class definition). So it becomes harder to review.</p>

<h3>Things I don't see</h3>

<p>I don't see any move semantics for your class.</p>

<p>Normally (since C++11) I would expect containers to implement move semantics. i.e. I would expect to see the following methods:</p>

<pre><code> Vector(Vector&amp;&amp; move) nothrow
 Vector&amp; operator=(Vector&amp;&amp; move) nothrow
 void swap(Vector&amp; other) nothrow
</code></pre>

<p>Also I don't see your code implementing the <a href="https://stackoverflow.com/q/4172722/14065">rule of three</a>. This means that your objects will not work correctly if there are any copies made (and C++ makes copies all the time).</p>

<p>To implement the rule of three you need to implement the following three methods:</p>

<pre><code>Vector(Vector const&amp;);
Vector&amp; operator=(Vector const&amp;);
~Vector();
</code></pre>

<h3>Code Review</h3>

<p>This is a dangerous interface. you are asking the user of your class to know and manually set the size. An important thing in C++ is to try and define interfaces that can not be used incorrectly.</p>

<pre><code>Vector::Vector(int vector[], int sizeT) {
</code></pre>

<p>I prefer the iterator version of the interface. Yes it is still just as dangerous <strong>but</strong> the utility functions add in C++14 will help you correctly identify the dangers and potentially generate compiler errors.</p>

<pre><code>template&lt;typename T&gt;
Vector::Vector(I begin, I end) {
</code></pre>

<p>Now when you use it.</p>

<pre><code>int data[23];
Vector   v(std::begin(data), std::end(data)); // will correctly size the vector
                                              // even if the size is changed.


void test(int* data, std::size_t s)
{
    Vector v(data, data + s); // still works (you just need to add).
}

int*     data = new data[23];
Vector   v(std::begin(data), std::end(data));  // will fail to compile
                                               // For the dangerous
                                               // situations it fails to compile.
                                               // which makes you look.
</code></pre>

<h3>Use of this-&gt; is discouraged</h3>

<p>I consider the use of <code>this-&gt;</code> dangerous as it hides errors. It also shows that you are being lazy in naming your local/member variables.</p>

<p>I know you are going to ask "how does it hide errors?".</p>

<p>The only reason that you need to use <code>this-&gt;</code> is when you have shadowed member variables. You then use <code>this-&gt;</code> to differentiate the member variables from the local variables. But it requires that everybody correctly identify the member/local variable. Any mistake will still silently compile. So this type of error can not be detected by the compiler.</p>

<p>On the other hand if you don't allow shadowed variables (and you can make the compiler detect shadowed variables and fail your compilation) now you have no situation where dropping the <code>this-&gt;</code> (or forgetting) it will <strong>NOT</strong> cause an error. Since it does not matter whether the <code>this-&gt;</code> is there or not why not just drop it.</p>

<h3>This is a funny Constructor.</h3>

<p>Not even sure why you would have this interface.</p>

<pre><code>Vector::Vector(Vector* v1) {
</code></pre>

<p>You normally have a copy constructor which looks like this:</p>

<pre><code>Vector::Vector(Vector const&amp; v1) {
</code></pre>

<p>But an interface that takes pointers is very rare (and for this type of situation is practically never done). You are leaking ownership information. Who ownes the pointer you pass? (Ownership semantics is very important in C++ as the owner of the object is the person responsible for deleting it. A pointer has no ownership information).</p>

<h3>Error:</h3>

<p>Additionally this interface is broken.</p>

<pre><code>Vector::Vector(Vector* v1) {
    this-&gt;array = v1-&gt;array;
    this-&gt;size = v1-&gt;size;
}
</code></pre>

<p>Consider this situation:</p>

<pre><code>{
    Vector   a(5);
    Vector   b(&amp;a);   // This is your copy (but the same would apply if
                      // you naively converted it to a standard copy
                      // constructor)
}
</code></pre>

<p>In the above case both object point at the same dynamically created object. Not a problem in itself. <strong>BUT</strong> they both think they own the object and thus will both delete it in there destructor this is illegal.</p>

<h3>Const methods</h3>

<p>A method that does not change the state of the object should be marked as <code>const</code>.</p>

<pre><code>int Vector::length() {
    return this-&gt;size;
}
</code></pre>

<p>This is both an indication to the compiler and also allows the object to be used in a context where you only have a const reference (quite common).</p>

<h3>Exceptions</h3>

<p>Yes you can throw anything. But normally you would throw an exception object that is derived from std::runtime_error.</p>

<p>In your code you are throwing an object of type <code>char const*</code>.</p>

<pre><code>int Vector::getAt(int idx) {
    if(idx &gt;= this-&gt;size) {
        throw "out of range";
    }
    return this-&gt;array[idx];
}
</code></pre>

<p>I would do it like this:</p>

<pre><code>int Vector::getAt(int idx) {
    if(idx &gt;= this-&gt;size) {
        throw std::out_of_range("Vector::at()");
    }
    return this-&gt;array[idx];
}
</code></pre>

<h3>Don't do checks for the user.</h3>

<p>Don't do uneeded checks for the user. Rather provide methods so that users can perform their own checks to validate there calls. You can provide a checked version of the interface as well.</p>

<p>The std::vector has two techniques for access elemements (just like you). <code>operator[]()</code> and <code>at()</code>. The only difference between the two is that <code>at()</code> validates the index and <code>operator[]()</code> does not.</p>

<pre><code>int&amp; Vector::operator[](const int index){

    // Would not expect this check.
    if(index &gt;= this-&gt;size) {
        throw "Vector::out of range";
    }

    return this-&gt;array[index];
}
</code></pre>

<p>The reason is that in most use cases you don't need to validate the range because you have already validated that your index is within the required range:</p>

<pre><code>for(int loop = 0;loop &lt; v.size(); ++loop) {
    // No need to check the range of `loop`
    // You have guranteed it is correct by the context it is used in.
    // Thus we use the unchecked range operator.
    std::cout &lt;&lt; v[loop] &lt;&lt; "\n";
}
</code></pre>

<h3>Do check the range where it is important.</h3>

<p>Here I would check the range.</p>

<pre><code>void Vector::deteleAt(int idx) {
    for(int i = idx; i &lt; this-&gt;length() - 1; ++i) {
        this-&gt;array[i] = this-&gt;array[i+1];
    }
    --this-&gt;size;
}
</code></pre>

<p>The line <code>--this-&gt;size;</code> is unchecked. If I delete a non existent element then it still reduces the size. Probably not what you want.</p>

<h3>Looks Fishy</h3>

<p>This is a very standard pattern for parent and children in a heap.</p>

<pre><code>//HEAP--------PRIORITY QUEUE
int Vector::parent(int idx) {
    if(idx &gt;= 0 &amp;&amp; idx &lt;= 2) {
        return this-&gt;array[0];
    }

    return this-&gt;array[idx/2];
}
</code></pre>

<p>The fact that you are special casing 1 and 2 makes me suspicious that there is underlying error you are trying to correct for.</p>

<p>Should not the parent be:</p>

<pre><code>parent = (child-1)/2    //   0   1   2
leftC  = parent*2 + 1   //   1   3   5
rightC = parent*2 + 2   //   2   4   6
</code></pre>

<h3>Use standard algorithms where you can</h3>

<pre><code>void Vector::swap(int firstIdx, int secondIdx) {
    int rotator = this-&gt;array[firstIdx];
    this-&gt;array[firstIdx] = this-&gt;array[secondIdx];
    this-&gt;array[secondIdx] = rotator;
}
</code></pre>

<p>There is a <code>std::swap()</code> this will swap two elements in the most efficient way possible. For integers your swap is probably the most efficient. But if you change what is held by your vector to some other complex object this may no longer be the most efficient technique (think move semantics).</p>

<h3>Printing</h3>

<p>When having a printing function, what you are actually doing is writing to a stream. So why not provide the opportunity to use different streams. So add a parameter that allows you to specify the stream (this can default to <code>std::cout</code>.    </p>

<pre><code>void Vector::print(){
    for(int i = 0; i &lt; this-&gt;size; ++i) {
        std::cout&lt;&lt;this-&gt;array[i]&lt;&lt;" ";
    }
    std::cout&lt;&lt;"\n";
}
</code></pre>

<p>Also the default way of printing something in C++ is to use the output operator <code>operator&lt;&lt;</code> so you may as welll write that so that it uses your print function.</p>

<pre><code>std::ostream&amp; operator&lt;&lt;(std::ostream&amp; s, Vector const&amp; output)
{
     output.print(s);
     return s;
}
</code></pre>
    </div>