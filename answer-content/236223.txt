<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>As <code>x ^ x == 0</code> on can do a homogeneous:</p>

<pre><code>return nx[0] ^ nx[1] ^ nx[2] ^ nx[3] ^ nx[4] ^ nx[5] == 0;
</code></pre>

<p>A char, a hex digit represent a nibble, 4 bits. As XORing does not influence other positions (like ADDing), one can do the checksum separately on the two nibbles:</p>

<pre><code>int
hex(char ch)
{
    // For ASCII
    return ch &lt;= '9' ? (int) ch - '0' : (ch &amp; 0xF) + 9;
}
</code></pre>

<p>The hex function should give a number 0 &lt;= x &lt; 16 for characters 0-9A-Fa-f, for ASCII based character encodings.</p>

<p><strong><em>After feedback to the non-validating hex function:</em></strong></p>

<pre><code>int
hex(char ch)
{
    char* digits = "0123456789ABCDEFabcdef";
    char* p = strchr(digits, ch);
    if (!p) {
        return -1;
    }
    int digit = p - digits;
    return digit &lt; 16 ? digit : digit - 6;
}
</code></pre>

<p>One might do more than returning -1. Or check it at the call site.</p>

<pre><code>bool
checksum_valid(char* card)
{
    if (strlen(card) != 6*2) {
        return false;
    }
    int crc0 = 0;
    int crc1 = 0;
    while (*card) {
        crc0 ^= hex(*card++);
        crc1 ^= hex(*card++);
    }
    return crc0 == 0 &amp;&amp; crc1 == 0;
}
</code></pre>

<p>Using <code>0 ^ x == x</code> and <code>x ^ x == 0</code>.</p>
    </div>