<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You have split your input code across multiple functions - whereas you should encapsulate your input function to provide a single valid output. The easiest way to explain this is to look at the <code>MainTest</code> Function</p>

<ul>
<li>The input is a single string</li>
<li>The <code>MainTest</code> function then has to parse that string</li>
<li>There is no error checking to see if the string or the parsing is
valid</li>
</ul>

<p>Inputs and Outputs of <code>MainTest</code> should be consistent with what it does.
Your examples are <code>Integer</code>/<code>Long</code> but your code uses <code>Double</code>. Happy this is just brevity for code example sake.</p>

<ul>
<li>Your input is string but it does number operations</li>
<li>Your output is string, but the answers inside are numbers</li>
<li>All conversions are implicit (see note earlier about no error
checking)</li>
</ul>

<p>A neat <code>MainTest</code> would be like (sticking with <code>Double</code> instead of <code>Long</code>)</p>

<pre><code>Public Function MainTest(ByVal a As Double, b as Double, c as Double) As Double
</code></pre>

<p>Similarly, you can modify <code>ReadFileLineByLineToString</code> to return the array. You can then just add to the array as you read each line!</p>

<pre><code>Public Function ReadFileLineByLineToString(path As String) As String()
</code></pre>

<p>Of course (arrays)</p>

<pre><code>Dim inputTests() As Variant
Dim outputTests() As Variant
</code></pre>

<p>Just before you call <code>expectedValue = MainTest(inputTests(cnt))</code>, <code>Split</code> <code>InputTests(cnt)</code> (e.g. <code>Inputs = split(InputTests(cnt), " ")</code> where <code>Inputs</code> is <code>String()</code> and <code>InputNums</code> = validated <code>Double(</code>) from <code>Inputs</code>) and check that you have the right number of elements and that they are numbers (basic error checking). You would then call <code>MainTest</code> as</p>

<pre><code>expectedValue = MainTest(InputNums(0), InputNums(1), InputNums(2))
</code></pre>

<p>There are many other places in your code where this sort of thinking can be applied. Consider using <code>Option Strict</code> and well as <code>Option Explicit</code>.</p>
    </div>