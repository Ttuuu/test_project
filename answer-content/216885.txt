<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I don't think this should be a class: it's a collection of <em>very</em> loosely related functions (they all do something with Outlook... beyond that...), but the only instance-level piece of data is this <code>Public sOutClassErrStr</code> string, which is constantly being appended to.</p>

<p>This is not a good <em>or</em> idiomatic approach to sane error handling, and is mixing concerns - conflating things like logging (presumably that's what that string is for?) and providing user feedback (<code>MsgBox</code>), and not bubbling any errors in the process.</p>

<p>No matter what you do, error state is going to be global, with <code>Err.Description</code> giving you the description for the current error, wherever you are in the project: exception made of <a href="https://www.everythingaccess.com/vbwatchdog.asp" rel="nofollow noreferrer">vbWatchDog</a> (no affiliation, but its author did contribute to <a href="http://www.github.com/rubberduck-vba/Rubberduck" rel="nofollow noreferrer">Rubberduck</a>, an open-source VBIDE add-in project I contribute to), every single attempt ever made at changing how error handling works in VBA (or VB6), has been doomed, cumbersome, bug-prone, confusing, and/or just plain wrong.</p>

<p>The function names are unclear and confusing. What is "out main" supposed to be doing? Looks like it's essentially a <em>factory method</em> to get/create an <code>Outlook.Application</code> instance. But, if this code is used in Outlook, then the global-scope <code>Application</code> identifier <em>already</em> holds a reference to that very object we're trying to get. Why the <code>Out</code> prefix though? Because "Outlook"? The class is already named <code>cOutlookFunctions</code>, so why have every single one of its members remind us "this is for Outlook!" ...if we didn't want Outlook functions, we wouldn't be using an <code>cOutlookFunctions</code> class in the first place!</p>

<p>That said, consider using <code>TypeName(Me)</code> to get the name of the current class, rather than hard-coding it.</p>

<p>Rule of thumb, avoid prefixes. They are useless and clutter up the code, making it harder to read than necessary. <code>c</code>-for-class serves no purpose, <code>s</code>-for-string either. Avoid disemvoweling, too. There is no reason to turn <code>Namespace</code> into <code>Nmspc</code>, other than to make it impossible to pronounce. Worse, if you don't code against the Outlook object model all that often, you might not even remember what it stands for when you get back to that code 6 months from now -- be it you, or your successor.</p>

<p>The effect of returning <code>Nothing</code> instead of bubbling errors up, is that you're taking the real source of the error, burying it in some string (whose value is lost forever once execution ends), and then forcing the caller to immediately check whether it got <code>Nothing</code>, otherwise they might very well be throwing error 91 at a completely unrelated place, well further down the execution path, far away from the source of the problem.</p>

<p>What you're trying to do, is much better handled with a "try" pattern.</p>

<pre><code>Public Function TryGetSomething(ByVal thing As String, ByRef outResult As Object) As Boolean

    Dim result As Boolean
    On Error GoTo TryFailed

    Set outResult = Things(thing)
    result = True

CleanExit:
    TryGetSomething = result
    Exit Function

TryFailed:
    result = False
    Set outResult = Nothing
    Resume CleanExit
End Function
</code></pre>

<p>Note the <code>out</code> prefix stands for "output" and <em>is</em> meaningful in this case - unlike an "out" prefix meaning "outlook", which is redundant. Structured like this, the client code can intuitively do:</p>

<pre><code>Dim something As Object
If TryGetSomething("thing", outResult:=something) Then
   'try succeeded: [something] holds the object reference we needed.
Else
   'try failed: write to log, pop MsgBox, etc.
End If
</code></pre>

<p>But, I'd probably move all these <code>TryXxxxx</code> functions to a standard module - there's no need to have a class to only hold methods that don't work with any instance state, especially if the class is meant to be a single-instance object.</p>

<p>As for the <code>sOutClassErrStr</code> "log" string, I'd remove it entirely, and use an actual <a href="https://codereview.stackexchange.com/q/64109/23788">logger</a> class instead, so that the logs are actually persisted or at least output to the immediate pane as soon as the entries are written - that way the information won't be lost if the host application crashes or execution is accidentally ended.</p>
    </div>