<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong><em>EDIT:</em></strong> <em>Thanks to @benrg pointing out a bug of the previous algorithm. I have revised the algorithm and moved it to the second part since the explanation is long.</em></p>

<p>While the other answer focuses more on coding style, this answer will focus more on performance.</p>

<h1>Implementation Improvements</h1>

<p>I will show some ways to improve the performance of the code in the original post.</p>

<ol>
<li>The use of <code>group</code> is unnecessary in the <code>for</code>-loop. Also note that if a house has a missing adjacent neighbour, its next state will be the same as the existing neighbour. So the loop can be improved as follows.</li>
</ol>



<pre><code>for i in range(len(in_states)):
    if i == 0:
        out_state = in_states[1]
    elif i == len(in_states) - 1:
        out_state = in_states[i - 1]
    else:
        out_state = in_states[i - 1] == in_states[i + 1]
    new_state.append(out_state)
</code></pre>

<ol start="2">
<li>It is usually more efficient to use list comprehensions rather than explicit for-loops to construct lists in Python. Here, you need to construct a list where: (1) the first element is <code>in_states[1]</code>; (2) the last element is <code>in_states[-2]</code>; (3) all other elements are <code>in_states[i - 1] == in_states[i + 1]</code>. In this case, it is possible to use a list comprehension to construct a list for (3) and then add the first and last elements.</li>
</ol>



<pre><code>new_states = [in_states[i-1] == in_states[i+1] for i in range(1, len(in_states) - 1)]
new_states.insert(in_states[1], 0)
new_states.append(in_states[-2])
</code></pre>

<p>However, insertion at the beginning of a list requires to update the entire list. A better way to construct the list is to use <code>extend</code> with a generator expression:</p>



<pre><code>new_states = [in_states[1]]
new_states.extend(in_states[i-1] == in_states[i+1] for i in range(1, len(in_states) - 1))
new_states.append(in_states[-2])
</code></pre>

<p>An even better approach is to use the unpack operator <code>*</code> with a generator expression. This approach is more concise and also has the best performance.</p>



<pre><code># state_gen is a generator expression for computing new_states[1:-1]
state_gen = (in_states[i-1] == in_states[i+1] for i in range(1, len(in_states) - 1))
new_states = [in_states[1], *state_gen, in_states[-2]]
</code></pre>

<p>Note that it is possible to unpack multiple iterators / generator expressions into the same list like this:</p>

<pre><code>new_states = [*it1, *it2, *it3]
</code></pre>



<p>Note that if <code>it1</code> and <code>it3</code> are already lists, unpacking will make another copy so it could be less efficient than <code>extend</code>ing <code>it1</code> with <code>it2</code> and <code>it3</code>, if the size of <code>it1</code> is large.</p>

<h1>Algorithmic Improvement</h1>

<p>Here I show how to improve the algorithm for more general inputs (i.e. a varying number of houses). The naive solution updates the house states for each day. In order to improve it, one needs to find a connection between the input states <span class="math-container">\$s_0\$</span> and the states <span class="math-container">\$s_n\$</span> after some days <span class="math-container">\$n\$</span> for a direct computation.</p>

<p>Let <span class="math-container">\$s_k[d]\$</span> be the state of the house at index <span class="math-container">\$d\$</span> on day <span class="math-container">\$k\$</span> and <span class="math-container">\$H\$</span> be the total number of houses. We first extend the initial state sequence <span class="math-container">\$s_0\$</span> into an auxiliary sequence <span class="math-container">\$s_0'\$</span> of length <span class="math-container">\$H'=2H+2\$</span> based on the following:</p>

<p><span class="math-container">$$
s_0'[d]=\left\{\begin{array}{ll}
s_0[d] &amp; d\in[0, H) \\
0      &amp; d=H, 2H + 1\\
s_0[2H-d] &amp; d\in(H,2H] \\
\end{array}\right.\label{df1}\tag{1}
$$</span></p>

<p>The sequence <span class="math-container">\$s_k'\$</span> is updated based on the following recurrence, where <span class="math-container">\$\oplus\$</span> and <span class="math-container">\$\%\$</span> are the exclusive-or and modulo operations, respectively:
<span class="math-container">$$
s_{k+1}'[d] = s_k'[(d-1)\%H']\oplus s_k'[(d+1)\%H']\label{df2}\tag{2}
$$</span></p>

<p>Using two basic properties of <span class="math-container">\$\oplus\$</span>: <span class="math-container">\$a\oplus a = 0\$</span> and <span class="math-container">\$a\oplus 0 = a\$</span>, the relationship (\ref{df1}) can be proved to hold on any day <span class="math-container">\$k\$</span> by induction:</p>

<p><span class="math-container">$$s_{k+1}'[d] = \left\{
\begin{array}{ll}
s_k'[1]\oplus s_k'[H'-1] = s_k'[1] = s_k[1] = s_{k+1}[0] &amp; d = 0 \\
s_k'[d-1]\oplus s_k'[d+1] = s_k[d-1]\oplus s_k[d+1]=s_{k+1}[d] &amp; d\in(0,H) \\
s_k'[H-1]\oplus s_k'[H+1] = s_k[H-1]\oplus s_k[H-1] = 0 &amp; d = H \\
s_k'[2H-(d-1)]\oplus s_k'[2H-(d+1)] \\
\quad = s_k[2H-(d-1)]\oplus s_k[2H-(d+1)] = s_{k+1}[2H-d] &amp; d\in(H,2H) \\
s_k'[2H-1]\oplus s_k'[2H+1] = s_k'[2H-1] = s_k[1] = s_{k+1}[0] &amp; d = 2H \\
s_k'[2H]\oplus s_k'[0] = s_k[0]\oplus s_k[0] = 0 &amp; d = 2H+1
\end{array}\right.
$$</span></p>

<p>We can then verify the following property of <span class="math-container">\$s_k'\$</span>
<span class="math-container">$$
\begin{eqnarray}
s_{k+1}'[d] &amp; = &amp; s_k'[(d-1)\%H'] \oplus s_k'[(d+1)\%H'] &amp; \\
s_{k+2}'[d] &amp; = &amp; s_{k+1}[(d-1)\%H'] \oplus s_{k+1}[(d+1)\%H'] \\
       &amp; = &amp; s_k[(d-2)\%H'] \oplus s_k[d] \oplus s_k[d] \oplus s_k[(d+2)\%H'] \\
       &amp; = &amp; s_k[(d-2)\%H'] \oplus s_k[(d+2)\%H'] \\
s_{k+4}'[d] &amp; = &amp; s_{k+2}'[(d-2)\%H'] \oplus s_{k+2}'[(d+2)\%H'] \\
       &amp; = &amp; s_k'[(d-4)\%H'] \oplus s_k'[d] \oplus s_k'[d] \oplus s_k'[(d+4)\%H'] \\
       &amp; = &amp; s_k'[(d-4)\%H'] \oplus s_k'[(d+4)\%H'] \\
\ldots &amp; \\
s_{k+2^m}'[d] &amp; = &amp; s_k'[(d-2^m)\%H'] \oplus s_k'[(d+2^m)\%H']  \label{f1} \tag{3}
\end{eqnarray}
$$</span></p>

<p>Based on the recurrence (\ref{f1}), one can directly compute <span class="math-container">\$s_{k+2^m}'\$</span> from <span class="math-container">\$s_k'\$</span> and skip all the intermediate computations. We can also substitute <span class="math-container">\$s_k'\$</span> with <span class="math-container">\$s_k\$</span> in (\ref{f1}), leading to the following computations:</p>

<p><span class="math-container">$$
\begin{eqnarray}
d_1' &amp; = &amp; (d-2^m)\%H' &amp; \qquad d_2' &amp; = &amp; (d+2^m)\%H' \\
d_1 &amp; = &amp; \min(d_1',2H-d_1') &amp; \qquad d_2 &amp; = &amp; \min(d_2', 2H-d_2') \\
a_1 &amp; = &amp; \left\{\begin{array}{ll}
s_k[d_1] &amp; d_1 \in [0, L) \\
0 &amp; \text{Otherwise} \\
\end{array}\right. &amp;
\qquad a_2 &amp; = &amp; \left\{\begin{array}{ll}
s_k[d_2] &amp; d_2 \in [0, L) \\
0 &amp; \text{Otherwise} \\
\end{array}\right. \\
&amp; &amp; &amp; s_{k+2^m}[d] &amp; = &amp; a_1 \oplus a_2 \label{f2}\tag{4}
\end{eqnarray}
$$</span></p>

<p>Note that since the sequence <span class="math-container">\$\{2^i\%H'\}_{i=0}^{+\infty}\$</span> has no more than <span class="math-container">\$H'\$</span> states, it is guaranteed that <span class="math-container">\$\{s_{k+2^i}\}_{i=0}^{+\infty}\$</span> has a cycle. More formally, there exists some <span class="math-container">\$c&gt;0\$</span> such that <span class="math-container">\$s_{k+2^{a+c}}=s_{k+2^a}\$</span> holds for every <span class="math-container">\$a\$</span> that is greater than certain threshold. Based on (\ref{f1}) and (\ref{f2}), this entails either <span class="math-container">\$H'|2^{a+c}-2^a\$</span> or <span class="math-container">\$H'|2^{a+c}+2^a\$</span> holds. If <span class="math-container">\$H'\$</span> is factorized into <span class="math-container">\$2^r\cdot m\$</span> where <span class="math-container">\$m\$</span> is odd, we can see that <span class="math-container">\$a\geq r\$</span> must hold for either of the divisibilty. That is to say, if we start from day <span class="math-container">\$2^r\$</span> and find the next <span class="math-container">\$t\$</span> such that <span class="math-container">\$H'|2^t-2^r\$</span> or <span class="math-container">\$H'|2^t+2^r\$</span>, then <span class="math-container">\$s_{k+2^t}=s_{k+2^r}\$</span> holds for every <span class="math-container">\$k\$</span>. This leads to the following algorithm:</p>

<hr>

<ul>
<li><strong>Input</strong>: <span class="math-container">\$H\$</span> houses with initial states <span class="math-container">\$s_0\$</span>, number of days <span class="math-container">\$n\$</span></li>
<li><strong>Output</strong>: House states <span class="math-container">\$s_n\$</span> after <span class="math-container">\$n\$</span> days</li>
<li>Step 1: Let <span class="math-container">\$H'\leftarrow 2H+2\$</span>, find the maximal <span class="math-container">\$r\$</span> such that <span class="math-container">\$2^r\mid H'\$</span> </li>
<li>Step 2: If <span class="math-container">\$n\leq 2^r\$</span>, go to Step 5. </li>
<li>Step 3: Find the minimal <span class="math-container">\$t, t&gt;r\$</span> such that either <span class="math-container">\$H'|2^t-2^r\$</span> or <span class="math-container">\$H'|2^t+2^r\$</span> holds.</li>
<li>Step 4: <span class="math-container">\$n\leftarrow (n-2^r)\%(2^t-2^r)+2^r\$</span></li>
<li>Step 5: Divide <span class="math-container">\$n\$</span> into a power-2 sum <span class="math-container">\$2^{b_0}+2^{b_1}+\ldots+2^{b_u}\$</span> and calculate <span class="math-container">\$s_n\$</span> based on (\ref{f2})</li>
</ul>

<hr>

<p>As an example, if there are <span class="math-container">\$H=8\$</span> houses, <span class="math-container">\$H'=18=2^1\cdot 9\$</span>. So <span class="math-container">\$r=1\$</span>. We can find <span class="math-container">\$t=4\$</span> is the minimal number such that <span class="math-container">\$18\mid 2^4+2=18\$</span>. Therefore <span class="math-container">\$s_{k+2}=s_{k+2^4}\$</span> holds for every <span class="math-container">\$k\geq 0\$</span>. So we reduce any <span class="math-container">\$n&gt;2\$</span> to <span class="math-container">\$(n-2)\%14 + 2\$</span>, and then apply Step 5 of the algorithm to get <span class="math-container">\$s_n\$</span>.</p>

<p>Based on the above analysis, every <span class="math-container">\$n\$</span> can be reduced to a number between <span class="math-container">\$[0, 2^t)\$</span> and <span class="math-container">\$s_n\$</span> can be computed within <span class="math-container">\$\min(t, \log n)\$</span> steps using the recurrence (\ref{f2}). So the ultimate time complexity of the algorithm is <span class="math-container">\$\Theta(H'\cdot \min(t, \log n))=\Theta(H\cdot\min(m,\log n))=\Theta(\min(H^2,H\log n))\$</span>. This is much better than the naive algorithm which has a time complexity of <span class="math-container">\$\Theta(H\cdot n)\$</span>.</p>
    </div>