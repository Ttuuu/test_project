<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Remarks</h2>

<ul>
<li>You have few whitespace and parenthesis issues,</li>
<li>Use named function expressions (<em>“named anonymous functions”</em>) instead of anonymous functions, as it could potentially make debugging easier. It's nicely elaborated on in <a href="https://kangax.github.io/nfe/#named-expr" rel="nofollow noreferrer">Juriy "kangax" Zaytsev's article</a>,</li>
<li>The way you declared <code>shortestWord</code> is very unintuitive and not so readable, declaring it first would be much better;</li>
<li>Instead of iterating once to check if array contains strings and once to filter everything else out, you could just do the latter and check if it didn't resulted in an empty array;</li>
<li><code>Object.prototype.toString.call(cv) !== '[object String]'</code> seem to me to be pretty overcomplicated, since you could just leverage <code>typeof</code>, which you actually did further in the code;</li>
<li>In <code>arr.filter(function(e, i, a)</code> <code>i</code> and <code>a</code> are unnecessary,</li>
<li>It's a good pattern to always use <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comparison_Operators#Identity_strict_equality_()" rel="nofollow noreferrer">identity / strict equality</a> operator (<code>===</code>) wherever possible,</li>
<li>In your <code>reduce()</code> you could get rid of entire <code>else if</code> if you changed <code>&lt;</code> to <code>&lt;=</code> in preceding <code>if</code>,</li>
<li>And most importantly: despite <em>de jure</em> both algorithms are \$O(n)\$, yours loops through the entire array three times, while it could do so only once.</li>
</ul>

<h2>Rewrite</h2>

<p>It's definitely not the shortest solution provided in here, but it's performing only one iteration throughout the array and it's the most performant one, as well (see the next section). Note, that it uses elements of ES6, although it could be easily ported back to previous versions of JavaScript, e.g. using Babel transpiler.</p>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="true">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>const findShortestWordAmongMixedElements = array =&gt; {
  let shortest = '';
  
  for (let element of array) {
    if (typeof element === 'string' &amp;&amp;
        (shortest === '' || element.length &lt; shortest.length)) {
      shortest = element;
    }
  }
  
  return shortest;
};

/* ===== */

console.log(
  findShortestWordAmongMixedElements([[], 0, null, undefined, 'aa', Infinity, true, 'a'])
);</code></pre>
<pre class="snippet-code-css lang-css prettyprint-override"><code>/* Console formatting */
.as-console-wrapper { top: 0; }</code></pre>
</div>
</div>


<h2>Benchmark</h2>

<p>Tested on Chrome 57 via <a href="https://jsbench.me/" rel="nofollow noreferrer">jsbench.me</a>.</p>

<ul>
<li>Joseph's solution: 361,383 ops/s ±0.32%,</li>
<li>Marc's solution: 1,894,558 ops/s ±2.72%,</li>
<li>My solution: 13,532,763 ops/s ±0.28%.</li>
</ul>

<p><a href="https://i.stack.imgur.com/mcXpZ.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/mcXpZ.png" alt="Benchmark"></a></p>
    </div>