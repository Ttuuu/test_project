<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Both Martin &amp; David have made good points, and I won't repeat them here.</p>

<p>But David said "<em>It is also common to reuse the Reader and not create a new one every time you need to perform a read operation.</em>"  This doesn't stress the point enough.  It is <strong>wrong</strong> to keep creating <code>BufferedReader</code> objects on the same input stream.  A <code>BufferedReader</code> is designed to reduce the overhead of continuously asking the operating system for more characters from the input stream; it does this by reading "as much as it reasonable can".  If you are running your program at the console, and entering responses by hand, this isn't much of a problem; the console will be waiting for you to enter more input.  But your teacher may have an automated system for running every students' solution, where the input is provided by redirecting standard input from a file.  Eg:</p>

<p>testdata1.txt:</p>

<pre><code>R
2
3
</code></pre>

<p>And running each students' solution like: <code>java MainClass &lt; testdata1.txt</code>, so when the first <code>BufferedReader</code> is opened ...</p>

<pre><code>    BufferedReader userInput = new BufferedReader(new InputStreamReader(System.in));
    String userChoice = userInput.readLine();
</code></pre>

<p>the <code>BufferedReader</code> could read <em>the entire file</em> (6 to 9 characters, depending on end-of-line), scan for and return the first line <code>"R\n"</code>, while leaving <code>"2\n3\n"</code> ready to be returned by the next calls to <code>userInput.readLine()</code>.  But instead, </p>

<pre><code>        BufferedReader rnRead = new BufferedReader(new InputStreamReader(System.in));
</code></pre>

<p>is created, and when it tries to read from <code>System.in</code>, it will discover that it is at the end-of-file!  Oops!  <code>rnRead</code> can't return what <code>userInput</code> has already read and has internally cached.</p>

<p>To summarize:  It is not just <em>common</em> to reuse the Reader; it <strong>is necessary</strong> to avoid <strong>incorrect operation</strong>.</p>

<hr>

<p>While Martin has suggested a much better GCD algorithm, let's concentrate on simply improving your implementation.</p>

<p>In this code, you use <code>gcd.get(gcd.size() - 1)</code> often:</p>

<pre><code>    int dem = (180 / gcd.get(gcd.size() - 1));
    if ((d / (gcd.get(gcd.size() - 1))) == 1) {
        System.out.print("Radical: pi / " + dem);
    } else {
        System.out.print("Radical: " + (d / (gcd.get(gcd.size() - 1))) + "pi / " + dem);
    }
</code></pre>

<p>It would be clearer to retrieve that value once, store it in a local variable, and just refer to that local variable:</p>

<pre><code>    int last_gcd = gcd.get(gcd.size() - 1);
    int dem = 180 / last_gcd;
    if (d / last_gcd == 1) {
        System.out.print("Radical: pi / " + dem);
    } else {
        System.out.print("Radical: " + (d / last_gcd) + "pi / " + dem);
    }
</code></pre>

<p>But if we are only using the last value of the <code>gcd</code> array, why are we storing the values in an <code>ArrayList</code>?  Why not skip the <code>ArrayList</code>, and just remember the last value?</p>

<pre><code>    int last_gcd = 1;
    for (int index = 0; index &lt; divisors.size(); ++index) {
        if (180 % divisors.get(index) == 0) {
            last_gcd = divisors.get(index);
        }
    }
</code></pre>

<p><strong>BONUS</strong>: This just fixed a bug.  If you entered <code>0</code> for the number of degrees, the <code>divisors</code> would be empty, and the <code>gcd</code> array would also be empty, so <code>gcd.get(gcd.size() - 1)</code> would blow up with an <code>IndexOutOfBoundsException</code>.  Now, <code>last_gcd</code> just stays with the initial value of <code>1</code>.</p>

<p>I'm not liking the two occurrences of <code>divisors.get(index)</code>.  We could probably fetch the value once, store it in a local variable (say <code>divisor</code>), then use the local variable in the <code>if(...)</code> test and the assignment.  Since looping over an array or <code>Collection</code> is so common, Java has a short-cut syntax for this:</p>

<pre><code>    int last_gcd = 1;
    for (int divisor : divisors) {
        if (180 % divisor == 0) {
            last_gcd = divisor;
        }
    }
</code></pre>

<p>But wait!  We are generating the list of <code>divisors</code>, and then using each value in the list exactly once.  Like above, why not skip the list, and just use each value as it is generated?</p>

<pre><code>    int last_gcd = 1;
    for (int pd = 1; pd &lt;= d; pd++) {
        if (d % pd == 0) {
            if (180 % pd == 0) {
                last_gcd = pd;
            }
        }
    }
</code></pre>

<p>Since we've gotten rid of the <code>divisors</code> list and <code>gcd</code> list, we can name the variable <code>gcd</code> instead of <code>last_gcd</code> (which makes more sense).  Combining the two <code>if</code> statements above into one, we arrive at:</p>

<pre><code>    int gcd = 1;
    for (int pd = 1; pd &lt;= d; pd++) {
        if (d % pd == 0  &amp;&amp;  180 % pd == 0) {
            gcd = pd;
        }
    }

    int dem = 180 / gcd;
    if (d / gcd == 1) {
        System.out.print("Radical: pi / " + dem);
    } else {
        System.out.print("Radical: " + (d / gcd) + "pi / " + dem);
    }
</code></pre>

<p>Again, see Martin's suggestion for a better <code>GCD(m,n)</code> computation.</p>

<hr>

<p>Separation of concerns.  Your <code>rtd</code> and <code>dtr</code> functions should simply convert between radicals and degrees; they should not be doing any input/output.  This allows you to <strong>test</strong> you functions, without trying to create an <code>InputStream</code> for the functions to read data from, or capturing <code>System.out</code> as an <code>StringWriter</code> so the output can be compared with expected output.</p>

<p>For instance, your <code>dtr()</code> function could become:</p>

<pre><code>public static String dtr(int d) {
    int gcd = 1;
    for (int pd = 1; pd &lt;= d; pd++) {
        if (d % pd == 0  &amp;&amp;  180 % pd == 0) {
            gcd = pd;
        }
    }

    int dem = 180 / gcd;
    if (d / gcd == 1) {
        return "pi / " + dem;
    } else {
        return (d / gcd) + "pi / " + dem;
    }
}
</code></pre>

<p>The main program would be responsible for reading the value of <code>d</code>, calling <code>dtr(d)</code>, and printing the results:</p>

<pre><code>    if (userChoice.contains("D") || userChoice.contains("d")) {  // But see David's improvement

        System.out.print("Degrees: ");
        int d = Integer.parseInteger( userInput.readLine() );
        System.out.println("Radical: " + dtr(d));
    }
</code></pre>

<hr>

<p>See also: <a href="https://docs.oracle.com/javase/10/docs/api/java/util/Scanner.html#nextInt()" rel="nofollow noreferrer"><code>Scanner.nextInt()</code></a> as an alternative to <code>Integer.parseInt(userInput.readLine())</code></p>
    </div>