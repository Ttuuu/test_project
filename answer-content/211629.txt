<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I can think of mutliple ways to improve this code.</p>

<p>First, error handling. In your case, not receiving data from your API call may cause your program to crash.</p>

<p>You will have to add an error variable in your state :</p>

<pre><code>this.state = {
    items: [],
    isLoading: true,
    error: ''
};
</code></pre>

<p>And add a <code>.catch</code> at the end of your <code>fetch</code> function (or use the new <code>async/await</code> syntax surrounded by a <code>try/catch</code> block).</p>

<p>You should also put your response formatting here instead of the rendering function, to avoid reformatting your data everytime your component is rerendered :</p>

<pre><code>fetch(`http://opentable.herokuapp.com/api/restaurants?city=${city}`)
    .then(res =&gt; res.json())
    .then(json =&gt; {
        this.setState({
            isLoading: false,
            items: Object.values(json.restaurants) //Data formatting
        });
    })
    .catch(error =&gt;{
        this.setState({
            isLoading: false,
            error // Sends the error object (or message, I am not sure about the exact syntax)
        });
    });
</code></pre>

<p>I also noticed that you set your <code>isLoading</code> state to <code>true</code> when you finished loading and to <code>false</code> in your initial state so I reversed it.</p>

<p>Now, the rendering.</p>

<p>JSX allows you to put <a href="https://reactjs.org/docs/conditional-rendering.html" rel="nofollow noreferrer">conditions inside your HTML</a>, making the syntax of your render way more readable and avoid code duplication :</p>

<pre><code>render() {
    const { isLoading, items, error } = this.state;

    return (
        &lt;div className="row"&gt;
            &lt;div className="col-md-6"&gt;
                &lt;div className="App"&gt;
                    &lt;div className="row"&gt;
                        &lt;div className="col-md-3"&gt;
                            {isLoading &amp;&amp; &lt;Spinner /&gt;}
                            {error &amp;&amp; &lt;div&gt;Error : {error}&lt;/div&gt;}
                            {!isLoading &amp;&amp; !items.length &amp;&amp; &lt;h2&gt;No Data&lt;/h2&gt;}
                            &lt;ul&gt; // Did you forget this node ?
                                {items.map(({ id, reserve_url, address, price, name }) =&gt; //Won't do anything if the items array is empty
                                    &lt;li key={id} style={{ listStyleType: "none" }}&gt;
                                        &lt;a
                                            href={reserve_url}
                                            style={{ color: "red" }}
                                            target="_blank"
                                        &gt;
                                            {name}
                                        &lt;/a&gt;{" "}
                                        | &lt;span style={{ fontStyle: "italic" }}&gt;{address}&lt;/span&gt;{" "}
                                        | Price rating:{" "}
                                        &lt;span style={{ color: "red" }}&gt;{price}&lt;/span&gt;
                                    &lt;/li&gt;
                                )}
                            &lt;/ul&gt;
                        &lt;/div&gt;
                    &lt;/div&gt;
                &lt;/div&gt;
            &lt;/div&gt;
        &lt;/div&gt;
    )
}
</code></pre>

<p>I also deconstructed your parameters in the <code>map</code> function.</p>

<p>Working example :</p>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="true">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>class App extends React.Component {
    constructor(props) {
        super(props);
        this.state = {
            items: [],
            isLoading: true,
            error: ''
        };
    }

    componentDidMount() {
        const urlParams = new URLSearchParams(window.location.search);
        const city = urlParams.get("city");

        fetch(`http://opentable.herokuapp.com/api/restaurants?city=London`) // Hard coded London
            .then(res =&gt; res.json())
            .then(json =&gt; {
                setTimeout(() =&gt; { //Just to see the loading element / spinner
                    this.setState({
                        isLoading: false,
                        items: Object.values(json.restaurants)
                    });
                }, 1500)
            })
            .catch(error =&gt;{
                this.setState({
                    isLoading: false,
                    error
                });
            });
    }

    render() {
        const { isLoading, items, error } = this.state;

        return (
            &lt;div className="row"&gt;
                &lt;div className="col-md-6"&gt;
                    &lt;div className="App"&gt;
                        &lt;div className="row"&gt;
                            &lt;div className="col-md-3"&gt;
                                {isLoading &amp;&amp; &lt;div&gt;Loading...&lt;/div&gt;}
                                {error &amp;&amp; &lt;div&gt;Error : {error}&lt;/div&gt;}
                                {!isLoading &amp;&amp; !items.length &amp;&amp; &lt;h2&gt;No Data&lt;/h2&gt;}
                                &lt;ul&gt;
                                    {items.map(({ id, reserve_url, address, price, name }) =&gt;
                                        &lt;li key={id} style={{ listStyleType: "none" }}&gt;
                                            &lt;a
                                                href={reserve_url}
                                                style={{ color: "red" }}
                                                target="_blank"
                                            &gt;
                                                {name}
                                            &lt;/a&gt;{" "}
                                            | &lt;span style={{ fontStyle: "italic" }}&gt;{address}&lt;/span&gt;{" "}
                                            | Price rating:{" "}
                                            &lt;span style={{ color: "red" }}&gt;{price}&lt;/span&gt;
                                        &lt;/li&gt;
                                    )}
                                &lt;/ul&gt;
                            &lt;/div&gt;
                        &lt;/div&gt;
                    &lt;/div&gt;
                &lt;/div&gt;
            &lt;/div&gt;
        )
    }
}

ReactDOM.render(&lt;App/&gt;, document.getElementById('root'))</code></pre>
<pre class="snippet-code-html lang-html prettyprint-override"><code>&lt;script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.5.2/umd/react.production.min.js"&gt;&lt;/script&gt;
&lt;script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.5.2/umd/react-dom.production.min.js"&gt;&lt;/script&gt;
&lt;div id='root'/&gt;</code></pre>
</div>
</div>

    </div>