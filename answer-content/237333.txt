<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Code review in order of appearance:</p>

<pre><code>public static String getAllExecTimes(MasterVO masterVO, boolean displayAll) {
</code></pre>

<p>Static methods should be avoided if you may expect them to contain state, such as hints on how to format the class. Why not create an object that performs the formatting?</p>

<p>Boolean parameters are not a good idea. They are pretty unreadable. But in this case it is worse, as the <code>displayAll</code> doesn't give any hint to a user what actually <strong>is</strong> displayed. What about an enum, e.g. <code>enum Display {DISPLAY_MAP_C_ONLY, DISPLAY_MAPS_A_B_C;}</code>? </p>

<pre><code>Map&lt;Integer, DurationVo&gt; durationMap = null;
Map&lt;Integer, Integer&gt; orderMap = null;
List&lt;Integer&gt; keys = null;
</code></pre>

<p>Never ever instantiate variables before they are needed in Java, and don't use the same variable reference for two different maps (A and C). This makes for very error prone code, especially if you are starting to assign <code>null</code> to the variables, which should almost <strong>never</strong> be necessary. <strong>Create separate methods</strong> when code is very similar or when variable names are starting to clash.</p>

<p>Why is there a <code>MasterVO</code> and a <code>DurationVo</code>? It's fine to choose all uppercase or camelcase, but please do so <strong>consistently</strong>.</p>

<pre><code>durationMap = masterVO.getMapA();
orderMap = masterVO.getOrderMap();
</code></pre>

<p>You know, a map is a mapping from a set of keys to values. However, you only have duration and order, and it isn't even clear which one is key and what is the value.</p>

<pre><code>keys = new ArrayList&lt;&gt;(orderMap.keySet());
keys.sort(new CustomComparator());
</code></pre>

<p>Now this is just not right. If you put the keys into a <code>TreeSet</code> instead then they will be ordered during insertion. Even better, why not use a <a href="https://docs.oracle.com/javase/8/docs/api/java/util/TreeMap.html" rel="nofollow noreferrer"><code>TreeMap</code></a> and sort then when you setup the <code>Map</code>?</p>

<pre><code>if (null != target) {
</code></pre>

<p>First of all, you should just write this as <code>if (target != null) {</code>; this is a well known anti-pattern for Java, it's just not needed and it hurts readability. It is item #1: "Yoda Conditions" for the "new jargon" article <a href="https://blog.codinghorror.com/new-programming-jargon/" rel="nofollow noreferrer">at coding horror</a>.</p>

<p>The bigger question is why you would allow <code>null</code> values in such a map in the first place. Even without knowing the design, I have the feeling that <code>null</code> values should be avoidable in this case, especially since keys without values are simply skipped in the resulting string.</p>

<pre><code>if (null != masterVO.getMapB()) {
</code></pre>

<p>Now whole maps seem to be missing in action. Use <code>Optional&lt;...Map&gt;</code> instead.</p>

<pre><code>private static final class CustomComparator implements Comparator&lt;Integer&gt; {

    public int compare(Integer first, Integer second) {
        return first.compareTo(second);
    }
}
</code></pre>

<p>Seriously, how does this custom comparator differ from normal integer ordering? Do you <em>need</em> to specify a specific comparator in that case? And why is it called <code>CustomComperator</code>? That name doesn't explain <strong>how</strong> it is custom.</p>
    </div>