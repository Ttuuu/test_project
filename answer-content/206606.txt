<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Look at your compiler's warnings</h2>

<p>When I try to compile your code, the compiler gives two warnings: <code>Rect::setPiece()</code> doesn't have a return statement, and <code>Rboard::getIndex()</code> is missing a return statement after the loop.</p>

<p>The first warning can be fixed by simply changing the return type of <code>Rect::setPiece()</code> to <code>void</code>. The second warning might be harmless; the assumption is that <code>Rboard::getIndex()</code> will always be called with values for <code>l</code> and <code>w</code> that match one of the rectangles. But what if it doesn't? Then the for loop will end, and a bogus value will be returned. If this is never supposed to happen, just throw an exception there: the compiler warning will go away, and if your code ever does the wrong things, you will hopefully get a helpful error message.</p>

<h2>Try to write more C++</h2>

<p>In general, your code looks very much like C with classes, and doesn't make good use of the features that the C++ language and its standard library provides. Try to find more C++-like ways to write your code. That doesn't mean "write templates, use inheritance, and overload every operator you possibly can", rather try to make better use of the STL, use features like range for, auto, and so on, to help you write more concise code.</p>

<h2>Use a proper random number generator</h2>

<p>If you can use C++11 or later, use the functions from <a href="https://en.cppreference.com/w/cpp/numeric/random" rel="nofollow noreferrer"><code>&lt;random&gt;</code></a> to generate random numbers, instead of using the rather bad <code>rand()</code> function from C.</p>

<p>While it is not so important for this particular code, <code>srand(time(NULL))</code> will only generate a new seed every second, which might be bad if your code is run multiple times per second, or multiple instances of the code are started in parallel. Also, <code>rand() % N</code> will, for most values of <code>N</code>, not give you a uniformly distributed random number. There are ways around both issues, but the C++11 RNG functions take care of this for you.</p>

<h2>Code style</h2>

<p>Every programmer has his/her own favourite way of formatting their source code.  While there is no right or wrong, you are using a very dense style, omitting spaces almost wherever possible. I would suggest you use spaces after punctuation (such as <code>;</code>), and spaces around operators (such as <code>=</code>, <code>&lt;</code>, and so on). For example this line:</p>

<pre><code>if((b.returnP(pp[i]).getL())!=(b.returnP(pp[i]).getW())){
</code></pre>

<p>It's hard to see that this is comparing the result of two function called. Just adding some spaces (and removing some superfluous parentheses) results in:</p>

<pre><code>if (b.returnP(pp[i]).getL() != b.returnP(pp[i]).getW()) {
</code></pre>

<p>And when you are initializing arrays, you can also put each element on its own line. So this line for example:</p>

<pre><code>int coords[4]={pc[j],pc[j+1],pc[j]+c-&gt;getState().returnP(pp[i]).getW()-1,pc[j+1]+c-&gt;getState().returnP(pp[i]).getL()-1};
</code></pre>

<p>Will become:</p>

<pre><code>int coords[4] = {
    pc[j],
    pc[j+1],
    pc[j]   + c-&gt;getState().returnP(pp[i]).getW() - 1,
    pc[j+1] + c-&gt;getState().returnP(pp[i]).getL() - 1,
};
</code></pre>

<p>Also, declare one variable per line, so:</p>

<pre><code>int l=p[i].getL(),w=p[i].getW(),area=p[i].getArea(),counter=0;
</code></pre>

<p>Becomes:</p>

<pre><code>int l = p[i].getL();
int w = p[i].getW();
int area = p[i].getArea();
int counter = 0;
</code></pre>

<h2>Use descriptive variable and function names</h2>

<p>It should be possible to determine what a variable or function does by looking at its name. There are some commonly used abbreviations, such as <code>i</code> for a loop index, <code>x</code>, <code>y</code> and <code>z</code> for coordinates, but otherwise you should not use abbreviations.</p>

<p>Instead of <code>l</code> and <code>w</code>, write <code>length</code> and <code>width</code>. Instead of <code>SQ</code>, write <code>array_elements</code>. Or better yet, <code>array_size</code>, and split the original <code>array_size</code> into <code>array_length</code> and <code>array_width</code>. This way, you'll be able to handle non-square boards.</p>

<p>Instead of <code>Rboard</code>, name your class either <code>RectangleBoard</code> or just <code>Board</code>. And what do <code>Rboard::pc()</code> and <code>Rboard::pp()</code> do? Even looking at the code I have no idea what those abbreviations mean.</p>

<h2>Move member variable initialization to the declaration</h2>

<p>It's generally best to move initialization of variables as close as possible to their declaration. For example, in <code>class Rect</code>, instead of initializing the private member variables inside the constructor, just write:</p>

<pre><code>class Rect {
private:
    int l = 0;
    int w = 0;
    ...
</code></pre>

<p>Here it is not too important, but if you have multiple constructors, or have a lot of member variables, it will become clear that this is better.
Here, you might get rid of the constructor altogether this way.</p>

<h2>Don't store redundant information</h2>

<p>Your <code>class Rect</code> stores the top-left and bottom-right coordinates of the rectangle, and its length and width. There is also nothing in that class that prevents these pieces of information from being in conflict with each other. Either store both coordinates, or one coordinate and the length and width. Your getters and setters should take care of calculating the required information if necessary.</p>

<h2>Avoid using an array to store coordinates</h2>

<p>Unless you are going to store manydimensional coordinates, it's usually better to just name the coordinates <code>x</code> and <code>y</code>, or in this case if you don't want to store width and height, <code>x1</code>, <code>y1</code>, <code>x2</code> and <code>y2</code>. The reason is that it's easy to make mistakes when you store the coordinates in an <code>int[4]</code>: did you store the coordinates in the aforementioned order or, was is <code>x1</code>, <code>x2</code>, <code>y1</code>, <code>y2</code>? Being explicit here avoids issues.</p>

<p>Even better is to define a <code>struct coordinate {int x; int y;}</code>, or use a library like <a href="https://glm.g-truc.net/%20GLM" rel="nofollow noreferrer">GLM</a> that provides you with various vector and matrix types, including all kinds of useful functions that operate on them.</p>

<h2>Use a single function to get/set multiple variables, if that is the typical use case</h2>

<p>Instead of having separate functions <code>setL(int l)</code> and <code>setW(int w)</code>, which you will always call in pairs, create a single function <code>set_size(int l, int w)</code>. Of course, if you use a struct for coordinates, then you will automatically write code like that.</p>

<h2>Use <code>std::vector</code> instead of arrays where appropriate</h2>

<p>In <code>class Rboard</code>, you declare an array <code>Rect p[SQ]</code>. You are not always using all elements. It makes much more sense to make this a <code>std::vector&lt;Rect&gt; p</code>. This way, you can add elements to the vector as needed, you don't have to have a member variable in <code>class Rect</code> to tell you whether the rectangle is in use or not.</p>

<h2>Avoid <code>if (foo) return true; else return false;</code></h2>

<p>Just directly <code>return foo</code>. For example <code>Rboard::canUse()</code> can be simplified to:</p>

<pre><code>bool Rboard::canUse(Rect n) {
    return n.getUse() == 0 &amp;&amp; inRange(n.getCoords()) &amp;&amp; !rectAtLoc(n.getCoords());
}
</code></pre>

<h2>Use const references where appropriate</h2>

<p>Passing large classes by value might result in expensive copies, and might even trigger some undesired behaviour, depending on how these classes are implemented. Use const references to avoid that. For example, <code>Rboard::canUse()</code> can be rewritten as:</p>

<pre><code>bool Rboard::canUse(const Rect &amp;n) {
    ... // no need to change anything in the implementation
}
</code></pre>

<h2>Use <code>std::list&lt;&gt;</code> instead of writing your own linked lists</h2>

<p>Your <code>class Rnode</code> implements a linked list. Let the STL do that for you! Remove the member variable <code>Rnode *next</code>, the function <code>setNext()</code>, and in <code>class Rsort</code> use <code>std::list&lt;Rnode&gt; nodes</code> instead of <code>Rnode *root</code>. Then instead of having to do thinks like <code>Rnode *newnode = new Rnode(...)</code> and <code>setNext(newnode)</code>, you can just write <code>nodes.push_back(...)</code>. As a bonus, this will take care of deleting the memory for you, which you forgot to do.</p>

<h2>Use <code>nullptr</code> instead of <code>NULL</code></h2>

<p><code>NULL</code> is C, <code>nullptr</code> is C++.</p>

<h2>Use <code>'\n'</code> instead of <code>std::endl</code></h2>

<p>When you want to end a line, output a <code>'\n'</code> instead of using <code>std::endl</code>. The latter is the same but also flushes the output, which might slow down your program.</p>

<h2>Optimize your <code>Rboard::display()</code> function</h2>

<p>Your function to display a board is quite inefficient: it has complexity O(<code>array_size</code>⁴). The reason is that for every position, you check every possible square if it is covering that position. It is better to create a 2D array that represents the board, and then for each square, draw it onto that representation, and at the end write out the whole array. This reduces the complexity to O(<code>array_size</code>²). For example:</p>

<pre><code>void Rboard::display() {
    char output[array_size][array_size];

    for (auto &amp;rect: p) {
         char piece = getRandom();

         for (int y = rect.tly(); y &lt; rect.bry(); y++) {
             for (int x = rect.tlx(); x &lt; rect.brx(); x++) {
                  output[y][x] = piece;
             }
         }
    }

    for (int y = 0; y &lt; array_size; y++) {
        cout.write(output[y], array_size);
        cout.put('\n');
    }
}
</code></pre>

<p>Note that the above function also no longer needs the member variable <code>char random</code> in <code>class Rect</code>.</p>

<h2>Use an <code>enum</code> for <code>Rect::use</code></h2>

<p>Instead of using an int to represent different states, make them explicit by using an <code>enum</code>, preferrably even an <code>enum class</code> if you can use C++11 or later. For example:</p>

<pre><code>class Rect {
    public:
    enum class UseType {
        UNUSED,
        USED,
        CONGRUENT_USE
    };

    private:
    UseType use = UseType::UNUSED;
    ...

    public:
    void setUse(UseType use) {
        this-&gt;use = use;
    }

    UseType getUse() {
        return use;
    }
</code></pre>

<p>Then later in the code, you can for example write <code>setUse(Rect::UseType::CONGRUENT_USE)</code>. That's very verbose, but it's clear from just that line of code what the intention is, whereas <code>setUse(2)</code> leaves the reader searching through the code to find out what <code>2</code> means. Also, you can now no longer accidentily set an invalid value, like <code>setUse(9)</code>.</p>
    </div>