<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>When you're writing a computer program in any language, one of your goals should be to eliminate duplicated code. Computers are good at doing the same task over and over again, even with slightly different data.</p>

<p>A. Romeu has pointed out that you can use Python's <code>in</code> operator to find if a character is one of a set of characters. But there are other places where Python includes language features that could greatly simplify your code.</p>

<p>For instance, take a look at your <code>operation()</code> function. Note that the code is repeated, with just the operator being different:</p>

<blockquote>
<pre><code>def operation(string, num1, num2):
    if string == '+':
        return num1 + num2
    if string == '-':
        return num1-num2
    if string == '*':
        return num1*num2
    if string == '/':
        return num1/num2
    if string == '^':
        return num1 ** num2
</code></pre>
</blockquote>

<p>The usual way to do something like this in Python is to pre-construct a <code>dict</code> mapping the items to functions performing those actions, then pull the functions out of the <code>dict</code>.</p>

<p>In this case, since you're using operators, and those can't be stored in a <code>dict</code>, you'll need to <code>import operator</code> to get the function versions of the operators. Then below the import statement you can say</p>

<pre><code>operations = {
    '+' : operator.add,
    '-' : operator.sub,
    '*' : operator.mul,
    '/' : operator.truediv}

def operation(operator, num1, num2):
    return operations[operator](num1, num2)
</code></pre>

<p>No more duplicated code!</p>

<p>As for your main code, there are a number of things to improve, but I want to focus on the duplicated code. You have lines saying:</p>

<pre><code>    number1 = Test4Num(char)[0]
    # ...
    end_number1 = Test4Num(char)[1]
</code></pre>

<p>so you have two calls to <code>Test4Num(char)</code>. Instead, use Python's multiple assignment feature (also called tuple assignment):</p>

<pre><code>    (number1, end_number1) = Test4Num(char)
</code></pre>

<p>This assigns to both <code>number</code> and <code>end_number1</code>.</p>

<p>Also I think your final <code>print()</code> is unnecessary; it prints out partial intermediate results just run together; you just want the end result, right?</p>
    </div>