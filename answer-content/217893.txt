<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<p>Is there anything that can be simplified or made even cleaner?</p>
</blockquote>
<p>Yes, don't invoke the Java compiler at runtime.</p>
<p>From your examples in a comment:</p>
<p><code>DynamicException.Create($"ExtractMethodName(memberName)}NotSupported", ...)</code></p>
<p>From an example on <a href="https://codereview.stackexchange.com/questions/177172/compiling-and-throwing-simple-dynamic-excepitons-at-runtime">your earlier post (in C#)</a></p>
<blockquote>
<p><code>throw ("SettingNotFoundException", $"Setting {fullName.ToString().QuoteWith("'")} not found.").ToDynamicException())</code></p>
<p><code>public BackgroundImageNotFoundException(string fileName) : base($"Where is the '{fileName}' image?") { }</code></p>
</blockquote>
<p>Replace these with:</p>
<ul>
<li><code>throw new MethodNotSupported(extractMethodName(memberName))</code></li>
<li><code>throw new UnsupportedOperationError(extractMethodName(memberName))</code></li>
<li><code>throw new IllegalStateException("Setting '" + fullName + "' not found")</code></li>
<li><code>throw new FileNotFoundException(fileName)</code></li>
</ul>
<p>If you look at the subclasses of <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/Exception.html" rel="noreferrer">Java's Exception</a> or <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/RuntimeException.html" rel="noreferrer">RuntimeException</a> (many of which also has a Kotlin version) you can probably find an already existing exception that does what you need, and you just need to add a message to it.</p>
<p>In a <a href="https://chat.stackexchange.com/transcript/message/40428901#40428901">chat message related to your C# post</a> you wrote:</p>
<blockquote>
<p>In order to be able to track down a bug you need two pieces of information: The name of the exception and a message. With a generic exception I could just throw an Exception but the name of the exception should already be strong enough to tell what caused it, the message is just a hint.</p>
<p>You should already know what happend by not even reading the message.</p>
</blockquote>
<p>I completely disagree with this. The message is not just a hint. To understand fully what happened and how to reproduce it you <strong>need to read the message.</strong></p>
<hr>
<p>As an extra bonus, here's how you define exceptions easily in Kotlin, and the approach I would recommend:</p>
<pre><code>class MyException(message: String) : Exception(message)
class SomeOtherException(message: String) : Exception(message)
class UsefulException(message: String) : Exception(message)
class AnotherUsefulException(message: String) : Exception(message)
</code></pre>
<p>Please note that all this can be defined in the same file.</p>
    </div>