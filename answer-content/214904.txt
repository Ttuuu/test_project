<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Solving this via a graph algorithm is probably the way to go. However your <code>find_all_paths</code> algorithm is not the right tool.</p>

<p>Instead, what you need to find are the connected components of this graph. Then, if two vertices are not in the same component, there is no way between them and you can return zero.</p>

<p>With this you can solve the actual connected part in linear time (on top of this you will still have the building of the graph, which will be quadratic in time because of the finding of the edges).</p>

<p>First, though, let's have a look at your graph building. It needs to process all combinations of <code>i</code> and <code>j</code>, not just the ones starting from an origin city, because otherwise cities that are connected via two or more hops will not be marked as connected.</p>

<p>Also, the <code>math</code> module, included in the standard library, also has a <code>gcd</code> function. After testing, that one seems to be about a factor two faster than your implementation.</p>

<pre><code>from collections import defaultdict
from math import gcd
from itertools import count

def build_graph(n, g):
    graph = defaultdict(set)  # don't care if we add a connection more than once
    for i in range(1, n + 1):
        if i not in graph:    # ensure even stand-alone nodes are in the graph
            graph[i] = set()
        for j in range(1, n + 1):
            if i != j and gcd(i, j) &gt; g:
                graph[i].add(j)
                graph[j].add(i)  # make connections bi-directional
    return graph
</code></pre>

<p>Now we need to implement a way to find all nodes, starting from one start node, for example depth-first search:</p>

<pre><code>def dfs(graph, start, visited):
    yield start
    visited.add(start)
    for node in graph[start]:
        if node in visited:
            continue
        yield from dfs(graph, node, visited)
</code></pre>

<p>With this implementation we could just directly solve the problem like this:</p>

<pre><code>def connectedCities(n, g, originCities, destinationCities):
    graph = build_graph(n, g)
    connected_cities = {i: set(dfs(graph, i, set())) for i in originCities}
    return [dest in connected_cities
            for orig, dest in zip(originCities, destinationCities)]
</code></pre>

<p>However, it still has hidden quadratic behaviour, since the depth-first search is performed starting from every origin city, resetting the visited <code>set</code> each time. Instead keep it around and give all nodes that you get from one starting node the same component label:</p>

<pre><code>def get_components(graph):
    assignments, visited = {}, set()
    for label, node in enumerate(graph):
        if node in visited:
            continue
        assignments.update(dict.fromkeys(dfs(graph, node, visited), label))
    return assignments
</code></pre>

<p>Example:</p>

<pre><code>graph = {1:[2,3], 2:[1], 3:[1], 4:[5], 5:[4]}
get_components(graph)
# {1: 0, 2: 0, 3: 0, 4: 3, 5: 3}
</code></pre>

<p>With some extra work the labels cold be made contiguous, but here it is enough that they are unique. Now, two cities have a connection, iff they are in the same component, i.e. if their assigned component label is the same:</p>

<pre><code>def connectedCities(n, g, originCities, destinationCities):
    graph = build_graph(n, g)
    component = get_components(graph)
    return [int(component[orig] == component[dest])
            for orig, dest in zip(originCities, destinationCities)]
</code></pre>

<p>This passes the three sample inputs given in the problem description. I don't have a HackerRank account so I can't test if it is fast enough, though.</p>

<p>In the end it is <span class="math-container">\$\mathcal{O}(n^2)\$</span> for the building of the graph, <span class="math-container">\$\mathcal{O}(n)\$</span> for finding the connected components and afterwards <span class="math-container">\$\mathcal{O}(q)\$</span>, with <span class="math-container">\$q\$</span> being the length of <code>originCities</code> and <code>destinationCities</code> for the querying.</p>

<hr>

<p>Here are two possible optimizations on this:</p>

<ol>
<li><p>Note that when we added an edge between <code>i</code> and <code>j</code>, we also added an edge between <code>j</code> and <code>i</code>, so <code>j</code> does not need to run over all values anymore, only those larger than <code>i</code> (since all other combinations have already been explored):</p>

<pre><code>def build_graph(n, g):
    graph = defaultdict(set)  # don't care if we add a connection more than once
    for i in range(1, n + 1):
        if i not in graph:    # ensure even stand-alone nodes are in the graph
            graph[i] = set()
        for j in range(i + 1, n + 1):
            if gcd(i, j) &gt; g:
                graph[i].add(j)
                graph[j].add(i)  # make connections bi-directional
    return graph
</code></pre></li>
<li><p>To avoid the recursion limit, implement the depth-first search using a stack of yet-to-be-visited nodes:</p>

<pre><code>def dfs(graph, start, visited):
    out = {start}
    visited.add(start)
    to_visit = graph[start]
    while to_visit:
        node = to_visit.pop()    # this actually modifies `graph`, careful...
        if node in visited:
            continue
        out.add(node)
        visited.add(node)
        to_visit |= graph[node] - visited
    return out
</code></pre></li>
</ol>
    </div>