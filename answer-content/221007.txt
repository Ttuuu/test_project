<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Do less writing</h2>

<p>You can half the code by using the fact <span class="math-container">\$x^{-n} = \frac{1}{x^n}\$</span></p>

<pre><code>if n &gt; 0:
    while n &gt; 0:
    ...
else:
    while n &lt; 0:
    ...
</code></pre>

<p>would become</p>

<pre><code>if n &lt; 0:
    # x**(-n) == 1 / x**n
    return 1 / old_code(x, -n)

return old_code(x, n)
</code></pre>

<p>(with old code being the code you have from the while loop down)</p>

<hr>

<p>Likewise <span class="math-container">\$(-x)^n = x^n\$</span> if n is even, otherwise <span class="math-container">\$-(x^n)\$</span>. This extra check can be done at the start rather than in the middle of a loop. Combining the two you get</p>

<pre><code>if n &lt; 0:
    power = -n
else:
    power = n

if x &lt; 0:
    base = -x
else:
    base = x

result = old_code(base, power)

if base != x and power % 2:
    # (-x)**n == -(x**n) if n is odd, otherwise x**n
    result = -result

if power != n:
    # x**(-n) == 1 / x**n
    result = 1 / result

return result
</code></pre>

<p>This probably could bit a little nicer, but hopefully it is very clear what is happening. From this you can write your code assuming both the base and power are positive.</p>

<hr>

<h2>Better algorithm</h2>

<p>We can improve the algorithm from O(n) to O(log n), where n is the power, using the idea from <a href="http://lafstern.org/matt/col3.pdf" rel="noreferrer">russian peasant exponentiation</a>. Alternatively you could implement <a href="https://en.wikipedia.org/wiki/Exponentiation_by_squaring" rel="noreferrer">exponentiation by squaring</a> for the same runtime complexity. We can derive the idea by the following observation</p>

<p><span class="math-container">$$x^n = \overbrace{x \times x \times x \times \cdots \times x}^{n}$$</span></p>

<p><span class="math-container">$$x^n = \overbrace{x \times x \times x \times \cdots \times x}^{n/2} \times \overbrace{x \times x \times x \times \cdots \times x}^{n/2}$$</span></p>

<p><span class="math-container">$$x^n = y \times y, y = \overbrace{x \times x \times x \times \cdots \times x}^{n/2}$$</span></p>

<p>We need to make a slight adjustment if n is odd, as n/2 wont be an integer</p>

<p><span class="math-container">$$x^n = x \times \overbrace{x \times x \times x \times \cdots \times x}^{\lfloor n/2 \rfloor} \times \overbrace{x \times x \times x \times \cdots \times x}^{\lfloor n/2 \rfloor}$$</span></p>

<p><span class="math-container">$$x^n = x \times y \times y, y = \overbrace{x \times x \times x \times \cdots \times x}^{\lfloor n/2 \rfloor}$$</span></p>

<p>We can then work out <span class="math-container">\$x^{n/2}\$</span> recursively until some easy to compute base case.</p>

<p>Note: To turn this into a loop we can do the same thing, but starting at lower powers and working up. See the pdf for how to continue.</p>

<p>All in all my suggested code would look something like this</p>

<pre><code>def pow(x, n):
    if n == 0:
        return 1
    if x == 1:
        # New easy check
        return 1
    if x == 0:
        if n &lt; 0:
            # builtin pow throws an exception rather than returning None
            raise ZeroDivisionError("...")
        return 0

    if n &lt; 0:
        power = -n
    else:
        power = n

    if x &lt; 0:
        base = -x
    else:
        base = x

    result = _pow(base, power)

    if base != x and power % 2:
        # (-x)**n == -(x**n) if n is odd, otherwise x**n
        result = -result

    if power != n:
        # x**(-n) == 1 / x**n
        result = 1 / result

    return result

def _pow(base, power):
    """Return base**power
    Assume base &gt; 0, power &gt; 0"""
    if power == 1:
        return base

    y = _pow(base, power // 2)
    result = y * y
    if power % 2:
        result *= base
    return result
</code></pre>
    </div>