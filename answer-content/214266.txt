<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>No overloaded population counts</h3>

<p>One point is that you should either (i) statically enforce your integer type to have 32 bits, or (ii) call the correct population count function depending on the integer width.</p>

<p>That is, the argument for <code>__builtin_popcount</code> is an <code>unsigned int</code>, but <code>__builtin_popcountl</code> takes an <code>unsigned long</code> and <code>__builtin_popcountll</code> takes an <code>unsigned long long</code>. So in particular, there is no overload for <code>__builtin_popcount</code>, but the functions for different widths are actually different.</p>

<h3>Portability</h3>

<p>As noted, the <code>__builtin_popcount</code> functions are specific to GCC. For portability, you can write the Hamming distance computation with the help of <code>std::bitset</code> as follows:</p>

<pre><code>template&lt;unsigned char size, typename... T&gt;
static constexpr int hamming_distance(T... v)
{
    return std::bitset&lt;size&gt;((... ^ v)).count();
}
</code></pre>

<p>In fact, it seems that (<a href="https://godbolt.org/z/5fAKzW" rel="nofollow noreferrer">on Compiler Explorer</a>) that the above creates object code identical to yours, so there should be absolutely no difference in performance.</p>
    </div>