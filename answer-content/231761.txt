<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><p>Do not cast the result of <code>malloc</code>. If your code does <code>#include &lt;stdlib.h&gt;</code>, the cast is redundant. If it does not, the cast just masks the warning, which may lead to hard to find bugs.</p></li>
<li><p>Prefer <code>sizeof(object)</code> to <code>sizeof(type)</code>. The latter leads to the double maintenance problem, in case the type is changed.</p></li>
<li><p>I strongly recommend to have a constructor-like function to create a node:</p>

<pre><code>struct node * create_node(int num)
{
    struct node * node = malloc(sizeof(*node));
    node-&gt;value = num;
    node-&gt;next = NULL;
    return node;
}
</code></pre>

<p>It will spare you plenty of trouble when the definition of <code>struct node</code> changes.</p></li>
<li><p>You should get a warning that <code>get</code> doesn't always return a value (if you do not, enable all warnings, or change the compiler). It is a very serious warning, and in real life the code with such a problem leads to some dire consequences. You <strong>must</strong> <code>return get(lst-&gt;next, pos);</code> in a recursive clause.</p>

<p>The fact that your <code>main</code> printed expected values is an unlucky coincidence.</p>

<p>What to return in the <code>IndexOutOfBound</code> situation is a different matter. Consider returning an error code along with the value.</p></li>
<li><p>Calling <code>length(lst)</code> at each level of recursion degrades performance to quadratic.</p></li>
<li><p>As a side note, rather than testing for <code>position &lt; 0</code>, consider passing a position as some unsigned type. <code>size_t</code> is the most obvious candidate.</p></li>
<li><p>Along the same line, a low level utility function such as <code>get</code> should refrain from printing anything.</p></li>
<li><p>I strongly advise agains recursion when an iterative solution is immediately available.</p></li>
</ul>
    </div>