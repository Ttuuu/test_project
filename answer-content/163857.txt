<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Overall</h2>

<p>Ohhhhh.</p>

<blockquote>
  <p>Is it well-formed? </p>
</blockquote>

<p>It compiles, so yes.</p>

<blockquote>
  <p>i.e. does it follow common C++ standard and patterns (for example, should private members be declared before public ones?</p>
</blockquote>

<p>Personally I think so.</p>

<pre class="lang-none prettyprint-override"><code>* Private Variables
* Public
    * Constuctor / Destructor
    * Copy Semantics
    * Move Semantics
    * Swap
    * Other Public Interface
    * Friends
* Private
    * Methods as appropriate
</code></pre>

<p>When reading the code I want to know the members so I can verify that the constructors initialize them all, as a result I usually put them first. But other people prefer to put all private stuff at the bottom.</p>

<blockquote>
  <p>Am I missing something regarding functionality?</p>
</blockquote>

<p>Yes. Quite a lot.</p>

<blockquote>
  <p>Is there maybe a bug in my code that I'm not seeing?</p>
</blockquote>

<p>Yes. It potentially leaks on assignment.</p>

<h2>Code Review</h2>

<h3>Constructing from object!</h3>

<pre><code>    unique_ptr(T&amp; t) {
       _ptr = &amp;t;
    }
</code></pre>

<p>That's exceedingly dangerous:</p>

<pre><code>{
    int x;
    unique_ptr&lt;int&gt;  data(x);
}
// Here the unique ptr calls delete on an automatic variable.
</code></pre>

<h3>Use member initializing list.</h3>

<p>You should always attempt to use the member initializer list for initializing members. Any non-trivial object will have its constructor called before the initializer code is called and thus it is inefficient to then re-initialize it in the code.</p>

<pre><code>    unique_ptr(unique_ptr&lt;T&gt;&amp;&amp; uptr)
        : _ptr(std::move(uptr.ptr))
    {
       uptr._ptr = nullptr;
    }
</code></pre>

<h3>Member variable Names</h3>

<p>Prefer not to use <code>_</code> as the first character in an identifier name.</p>

<pre><code>T* _ptr;  // Technically OK.
</code></pre>

<p>Even if you know all the rules of when to use them most people don't so they are best avoided. If you must have a prefix to identify members use <code>m_</code> - but if you name your member variables well then there is no need for any prefix (in my opinion prefixes makes the code worse not better, because you are relying on unwritten rules. If you have good well-defined names (see self-documenting code) then members should be obvious).</p>

<h3>NoExcept</h3>

<p>The move operators should be marked as <code>noexcept</code>. </p>

<p>When used with standard containers this will enable certain optimizations. This is because if the move is <code>noexcept</code> then certain operations can be guaranteed to work and thus provide the strong exception guarantee.</p>

<pre><code>    unique_ptr(unique_ptr&lt;T&gt;&amp;&amp; uptr) noexcept
                              //     ^^^^^^^^

    unique_ptr&lt;T&gt;&amp; operator=(unique_ptr&lt;T&gt;&amp;&amp; uptr) noexcept
                                            //     ^^^^^^^^
</code></pre>

<h3>Leak in assignment</h3>

<p>Note: Your current assignment potentially leaks. If <code>this</code> currently has a pointer assigned then you overwrite it without freeing.</p>

<pre><code>    unique_ptr&lt;T&gt;&amp; operator=(unique_ptr&lt;T&gt;&amp;&amp; uptr) {
       if (this == uptr) return *this;

       // Here you overwrite _ptr
       // But if it has a value then you have just leaked it.
       _ptr = std::move(uptr._ptr);

       uptr._ptr = nullptr;
       return *this;
    }
</code></pre>

<h3>Checking for <code>this</code> pessimization</h3>

<pre><code>    unique_ptr&lt;T&gt;&amp; operator=(unique_ptr&lt;T&gt;&amp;&amp; uptr) {
       if (this == uptr) return *this;
       _ptr = std::move(uptr._ptr);
       uptr._ptr = nullptr;
       return *this;
    }
</code></pre>

<p>Yes you do need to make it work when there is self assignment. But in real code the self assignment happens so infrequently that this test becomes a pessimization on the normal case (same applies for copy operation). There have been studies on this (please somebody post a link; I have lost mine and would like to add it back to my notes).</p>

<p>The standard way of implementing move is via swap. Just like Copy is normally implemented by Copy and Swap.</p>

<pre><code>    unique_ptr(unique_ptr&lt;T&gt;&amp;&amp; uptr) noexcept
        : _ptr(nullptr)
    {
        this-&gt;swap(uptr);
    }
    unique_ptr&lt;T&gt;&amp; operator=(unique_ptr&lt;T&gt;&amp;&amp; uptr) noexcept
    {
        this-&gt;swap(uptr);
        return *this;
    }
    void swap(unique_ptr&lt;T&gt;&amp; other) noexcept
    {
        using std::swap;
        swap(_ptr, other._ptr);
    }
</code></pre>

<p>Using the swap technique also delays the calling of the destructor on the pointer for the current object. Which means that it can potentially be re-used. But if it is going out of scope the <code>unique_ptr</code> destructor will correctly destroy it.</p>

<h3>Summary</h3>

<p>Good first try but still lots of issues.</p>

<p>Please read the article I wrote on <code>unique_ptr</code> and <code>shared_ptr</code> for lots more things you should implement.</p>

<p><a href="http://lokiastari.com/blog/2014/12/30/c-plus-plus-by-example-smart-pointer/" rel="noreferrer">Smart-Pointer - Unique Pointer</a><br>
<a href="http://lokiastari.com/blog/2015/01/15/c-plus-plus-by-example-smart-pointer-part-ii/" rel="noreferrer">Smart-Pointer - Shared Pointer</a><br>
<a href="http://lokiastari.com/blog/2015/01/23/c-plus-plus-by-example-smart-pointer-part-iii/" rel="noreferrer">Smart-Pointer - Constructors</a>  </p>

<p>Some things you missed:</p>

<ul>
<li>Constructor with <code>nullptr</code></li>
<li>Constructor from derived type</li>
<li>Casting to <code>bool</code></li>
<li>Checking for empty</li>
<li>Guaranteeing <code>delete</code> on construction failure.</li>
<li>Implicit construction issues</li>
<li>Dereferencing</li>
</ul>

<p>When you have read all three articles then the bare bones <code>unique_ptr</code> looks like this:</p>

<pre><code>namespace ThorsAnvil
{
    template&lt;typename T&gt;
    class UP
    {
        T*   data;
        public:
            UP()
                : data(nullptr)
            {}
            // Explicit constructor
            explicit UP(T* data)
                : data(data)
            {}
            ~UP()
            {
                delete data;
            }

            // Constructor/Assignment that binds to nullptr
            // This makes usage with nullptr cleaner
            UP(std::nullptr_t)
                : data(nullptr)
            {}
            UP&amp; operator=(std::nullptr_t)
            {
                reset();
                return *this;
            }

            // Constructor/Assignment that allows move semantics
            UP(UP&amp;&amp; moving) noexcept
            {
                moving.swap(*this);
            }
            UP&amp; operator=(UP&amp;&amp; moving) noexcept
            {
                moving.swap(*this);
                return *this;
            }

            // Constructor/Assignment for use with types derived from T
            template&lt;typename U&gt;
            UP(UP&lt;U&gt;&amp;&amp; moving)
            {
                UP&lt;T&gt;   tmp(moving.release());
                tmp.swap(*this);
            }
            template&lt;typename U&gt;
            UP&amp; operator=(UP&lt;U&gt;&amp;&amp; moving)
            {
                UP&lt;T&gt;    tmp(moving.release());
                tmp.swap(*this);
                return *this;
            }

            // Remove compiler generated copy semantics.
            UP(UP const&amp;)            = delete;
            UP&amp; operator=(UP const&amp;) = delete;

            // Const correct access owned object
            T* operator-&gt;() const {return data;}
            T&amp; operator*()  const {return *data;}

            // Access to smart pointer state
            T* get()                 const {return data;}
            explicit operator bool() const {return data;}

            // Modify object state
            T* release() noexcept
            {
                T* result = nullptr;
                std::swap(result, data);
                return result;
            }
            void swap(UP&amp; src) noexcept
            {
                std::swap(data, src.data);
            }
            void reset()
            {
                T* tmp = release();
                delete tmp;
            }
    };
    template&lt;typename T&gt;
    void swap(UP&lt;T&gt;&amp; lhs, UP&lt;T&gt;&amp; rhs)
    {
        lhs.swap(rhs);
    }
}
</code></pre>

<p>Test to make sure it compiles:</p>

<pre><code>struct X {}; 
struct Y: public X {}; 

int main()
{
    ThorsAnvil::UP&lt;X&gt;   x(new X); 
    ThorsAnvil::UP&lt;Y&gt;   y(new Y); 

    x   = std::move(y);                  // This should be valid
    ThorsAnvil::UP&lt;X&gt;   z(std::move(y)); // This should be valid

    // In both these cases x represents an X* which is a base pointer
    // that should be able to point at objects of type Y* as these
    // are derived from X
}
</code></pre>
    </div>