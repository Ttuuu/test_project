<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>A recursive solution, originally <a href="https://stackoverflow.com/a/8171776/592746">seen here</a>, but modified to fit your requirements (and look a little more JavaScript-y):</p>

<pre><code>function combinations(str) {
    var fn = function(active, rest, a) {
        if (!active &amp;&amp; !rest)
            return;
        if (!rest) {
            a.push(active);
        } else {
            fn(active + rest[0], rest.slice(1), a);
            fn(active, rest.slice(1), a);
        }
        return a;
    }
    return fn("", str, []);
}
</code></pre>

<p>Test:</p>

<pre><code>combinations("abcd")
</code></pre>

<p>Output:</p>

<pre><code>["abcd", "abc", "abd", "ab", "acd", "ac", "ad", "a", "bcd", "bc", "bd", "b", "cd", "c", "d"]
</code></pre>

<p><strong>Regarding the name</strong>: Don't name it <code>permutations</code>; a permutation is an arrangement of all the original elements (of which there should be <code>n!</code> total). In other words, it already has a precise meaning; don't unnecessarily overload it. Why not simply name it <code>combinations</code>?</p>
    </div>