<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Taking the  response from @Adam_Silenko as a new base (<code>j</code> is like a <em>previous circular index</em>) and doing some change to generalize the algorithm.</p>

<p>You have some options:</p>

<p>Using a switch statement to decrease the number of branch, with some magic formula:</p>

<pre><code>//...
for(int i = 0, j = slopeChanges.size() -1; i&lt;slopeChanges.size(); i++) {
  switch (2* slopeChanges.get(j) - slopeChanges.get(i)) {
    case 2* (-1)-( 0): count_neg10++; break;
    case 2* (-1)-( 1): count_neg11++; break;
    case 2* ( 0)-(-1): count_0neg1++; break;
    case 2* ( 0)-( 1): count_01++;  break;
    case 2* ( 1)-(-1): count_1neg1++; break;
    case 2* ( 1)-( 0): count_10++;  break;
  }
  j = i;
}
//...
</code></pre>

<p>Or, maybe more short and efficient, using a two dimensional array (and incrementing the value since an index can't be negative):</p>

<pre><code>// ...
int[][] count = new int[3][3];
for(int i = 0, j = slopeChanges.size() -1; i&lt;slopeChanges.size(); i++) {
  count[slopeChanges.get(j)+1][slopeChanges.get(i)+1]++;
  j = i;
}
// ...
</code></pre>

<p>Or even, mix the two methods, using a simple array where the index comes from a formula like in the first option.</p>

<p>After that, you surely have to encapsulate the logic of your algorithm (<code>counting</code> and <code>results</code>) into classes with a good interface, for usability.</p>
    </div>