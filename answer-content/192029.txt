<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Code review</h1>

<p>Peilonrays points out a mixup with the out-of-bounds testing that is valid. The statement <code>if j ...</code> must be within the loop <code>for k ...</code>. One of the results is that you add a different number of elements to <code>temp</code> depending on which boundary you're at. But there are better ways to avoid out-of-bounds indexing, see below.</p>

<p>Your biggest bug, however, is that you write the result of the filter into the image you are processing. Median filtering cannot be done in-place. When you update <code>data[i][j]</code>, you'll be reading the updated value to compute <code>data[i][j+1]</code>. You need to allocate a new image, and write the result there.</p>

<p>I would suggest not adding zeros for out-of-bounds pixels at all, because it introduces a bias to the output pixels near the boundary. The clearest example is for the pixels close to any of the corners. At the corner pixel, with a 3x3 kernel, you'll have 4 image pixels covered by the kernel. Adding 5 zeros for the out-of-bounds pixels guarantees that the output will be 0. For larger kernels this happens in more pixels of course. Instead, it is easy to simply remove the <code>temp.append(0)</code> statements, leading to a non-biased result. Other options are to read values from elsewhere in the image, for example mirroring the image at the boundary or extending the image by extrapolation. For median filtering this has little effect, IMO.</p>

<p>You set <code>temp = []</code> at the very beginning of your function, then reset it when you're done using it, in preparation for the next loop. Instead, initialize it once inside the main double-loop over the pixels:</p>

<pre><code>for i in range(len(data)):
   for j in range(len(data[0])):
      temp = []
      # ...
</code></pre>

<p>You're looping over <code>i</code> and <code>j</code> as image indices, then over <code>z</code> and <code>c</code> or <code>k</code> for filter kernel indices. <code>c</code> and <code>k</code> have the same function in two different loops, I would suggest using the same variable for that. <code>z</code> doesn't really fit in with either <code>c</code> or <code>k</code>. I would pick two names that are related in the way that <code>i</code> and <code>j</code> are, such as <code>m</code> and <code>n</code>. The choice of variable names is always very limited if it's just one letter. Using longer names would make this code clearer: for example <code>img_column</code>, <code>img_row</code>, <code>kernel_column</code>, <code>kernel_row</code>.</p>

<hr>

<h1>Out-of-bounds checking</h1>

<p>This concludes my comments on your code. Now I'd like to offer some alternatives for out-of-bounds checking. These tests are rather expensive when performed for every pixel -- it's a test that is done \$n k\$ times (with \$n\$ pixels in the image and \$k\$ pixels in the kernel). Maybe in Python the added cost is relatively small, it's an interpreted language after all, but for a compiled language these tests can easily amount to doubling processing time. There are 3 common alternatives that I know of. I will use <code>border = filter_size // 2</code>, and presume <code>filter_size</code> is odd. It is possible to adjust all 3 methods to even-sized filters.</p>

<h3>Separate loops for image border pixels</h3>

<p>The idea here is that the loop over the first and last <code>border</code> pixels along each dimension are handled separately from the loop over the core of the image. This avoids all tests. But it does require some code duplication (all in the name of speed!).</p>

<pre><code>for i in range(border):
   # here we loop over the kernel from -i to border+1
for i in range(border, len(data)-border):
   # here we loop over the full kernel
for i in range(len(data)-border, len(data)):
   # here we loop over the kernel from -border to len(data)-i
</code></pre>

<p>Of course, within each of those loops, a similar set of 3 loops is necessary to loop over <code>j</code>. The filter logic is thus repeated 9 times. In a compiled language, where this is the most efficient method, code duplication can be avoided with inlined functions or macros. I don't know how a Python function call compares to a bunch of tests for out-of-bounds access, so can't comment on the usefulness of this method in Python.</p>

<h3>A separate code path for border pixels</h3>

<p>The idea here is to do out-of-bounds checking only for those pixels that are close to the image boundary. For pixels within the border, you use a version of the filtering logic with out-of-bounds checking. For the pixels in the core of the image (which is the big majority of pixels), you use a second version of the logic without out-of-bounds checking.</p>

<pre><code>for i in range(len(data)):
   i_border = i &lt; border or i &gt;= len(data)-border
   for j in range(len(data[0])):
      j_border = j &lt; border or j &gt;= len(data)-border
      if i_border or j_border:
         # filtering with bounds checking
      else:
         # filtering without bounds checking
</code></pre>

<h3>Padding the image</h3>

<p>The simplest solution, and also the most flexible one, is to create a temporary image that is larger than the input image by <code>2*border</code> along each dimension, and copy the input image into it. The "new" pixels can be filled with zeros (to replicate what OP intended to do), or with values taken from the input image (for example by mirroring the image at the boundary or extrapolating in some other way).</p>

<p>The filter now never needs to check for out-of-bounds reads. When the filtering kernel is placed over any of the input image pixels, all samples fall within the padded image.</p>

<p>Since for this type of filtering it is necessary to create a new output image anyway (it is not possible to compute it in-place, as I mentioned before), this is not a huge cost: the original input image can now be re-used as output image.</p>

<p>This solution leads to the simplest code, allows for all sorts of boundary extension methods without complicating the filtering code, and often results in the fastest code too.</p>
    </div>