<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I think you need separate some parts of code.</p>

<ol>
<li><p>If you use ES5 with Decorators you can todo general determination Errors, and add for instance, function-condition in this Decorator.</p></li>
<li><p>You can apply mechanismes <a href="https://refactoring.guru/extract-method" rel="nofollow noreferrer">Extract Methods</a>, <a href="https://refactoring.guru/refactoring/techniques/simplifying-conditional-expressions" rel="nofollow noreferrer">Simplifying Conditional Expressions</a> and <a href="https://refactoring.guru/replace-magic-number-with-symbolic-constant" rel="nofollow noreferrer">Replace Magic Number with Symbolic Constant</a> from <code>sanitizeFolderOrFile</code>.</p></li>
</ol>

<p></p><div class="snippet" data-lang="js" data-hide="true" data-console="true" data-babel="true">
<div class="snippet-code snippet-currently-hidden">
<pre class="snippet-code-js lang-js prettyprint-override"><code>/* Decorator file */
 function determinationError(condition) {
   return function (target: any, propertyKey: string, descriptor: PropertyDescriptor) {
    const method = descriptor.value;
    descriptor.value = function () {
      try {
         condition.apply(this, arguments);
         method.apply(this, arguments);
      }
      catch(e) {
        console.error(e.message);
      }
    };
    return descriptor;
  };
}

//export determinationError;

/*enum MODE file */
 const MODE = {
     FILE: 'file',
     folder: 'folder'
  };

//export MODE;



/*file sanitizeFolderOrFile */


//determinationError = require('determinationError'); // require our decorator file
//MODE = require('MODE'); // require our MODE file

function isFileOrFolderCondition(mode) {
  if (mode !== MODE.FILE &amp;&amp; mode !== MODE.FOLDER) {
    throw new Error('It is not file or folder') ;
  }
}

  const replaceValues = [{
        value: '+\\&amp;',
        replacement: 'u'
    }, {
        value: 'äÄ',
        replacement: 'ae'
    }, {
        value: 'öÖ',
        replacement: 'oe'
    }, {
        value: 'üÜ',
        replacement: 'ue'
    }, {
        value: 'ß',
        replacement: 'ss'
    }, {
        value: ' \\`\\´\\?\\(\\)\\[\\]\\{\\}\\/\\\\$\\§\\"\\\'\\!\\=\\-\\.\\,\\;\\:&lt;&gt;\\|\\^\\°\\*\\+\\~\\%',
        replacement: '_'
    }];

function replacerAndToLowerCase(name) {
   replaceValues.forEach(function(element) {
        name = name.replace(new RegExp('([' + element.value + '])', 'g'), element.replacement);
    });

   return name.toLowerCase();
}

function sanitizeFile(fullName) {
   const ext = fullName.split('.').pop();
   let name = fullName.replace(new RegExp('(\.' + ext + ')', 'g'), '');
   name = replacerAndToLowerCase(name);
        
   return `${name}.${ext}`;
}


function sanitizeFolder(fullName) {
   return replacerAndToLowerCase(fullName);
}


//@determinationError(isFileOrFolderCondition)
function sanitize(mode, name) {
   if (mode === MODE.FILE) {
     return sanitizeFile(name);
   }
   
   return sanitizeFolder(name);
}


const fileName = sanitize(MODE.FILE, 'TeSäÄtTE.txt');
console.log('fileName', fileName);

const folderName = sanitize(MODE.FOLDER, 'SuperFolder???????');
console.log('folderName', folderName);</code></pre>
</div>
</div>


<hr>

<p><em>I added comment in Snippet when you can add Decorator and separate on files</em></p>
    </div>