<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>lambda</h3>

<p>If you want to give the function a name, then it shouldn't be a lambda.  They are generally good for very short functions to pass as an argument to another function.  For example, sorted(list_of_tuples, key=lambda t:t[1]) to sort on based on the second element of a tuple.</p>

<h3>comprehensions</h3>

<p>Long multi-line comprehensions can be hard to read. In 6 months will you remember why the range is (x-1, x+2) and what all the inequalities are checking.  For things like this, I find something like this more readable:</p>

<pre><code>def count_neighbors(x, y):
    '''
    Counts the number of living cells in the neighborhood of (x,y)
    '''
    xy = [(x-1, y+1), ( x, y+1), (x+1, y+1),
          (x-1, y  ),            (x+1, y+0),
          (x-1, y-1), ( x, y-1), (x-1, y+1)]

    return sum(universe(nx, ny) for nx,ny in xy if 0&lt;=nx&lt;size_grid_x and 0&lt;=ny&lt;size_grid_y)
</code></pre>

<h3>sum() takes an iterable</h3>

<p>So you don't need to make a list first. Just pass in the generator, a la:</p>

<pre><code>num_neighbours = sum(universe[i] for i in neighbors(x, y))
</code></pre>

<h3>logic</h3>

<p>I took awhile to understand the logic for setting <code>new_val</code>.  Add some comments to explain the logic.  Maybe rearrange it to make it easier to understand when you look at it in a year:</p>

<pre><code>if num_neighbors == 2:
    new_val = universe[x,y]     # no change

elif num_neighbors == 3:
    new_val = 1                 # birth (or no change if already a 1)

else:
    new_val = 0                 # death  
</code></pre>

<h3>numpy and scipy</h3>

<p>These libraries are full of functions for operating on arrays.  You could write this using np.where and scipy.ndimage.convolve like so:</p>

<pre><code>import numpy as np
from scipy.ndimage import convolve

... same setup for universe, beacon, etc...

kernel = np.array([[1,1,1],
                   [1,0,1],
                   [1,1,1]])

for i in range(100):
    neighbors = convolve(universe, kernel, mode='constant')

    alive = np.logical_or(np.logical_and(universe==1, neighbors==2), neighbors==3)

    universe = np.where(alive, 1, 0)

    arr.append(np.copy(universe))

... same plotting code ...
</code></pre>
    </div>