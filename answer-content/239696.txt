<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>For a beginner this is some good code. I would make some additional adjustments.</p>

<ul>
<li>One-line docstrings should be on one line, not over 3. And should end with a period.</li>
<li>You should only pass the marks to <code>percentage</code> and not rely on a global <code>student_marks</code>.</li>
<li>You can use <code>sum</code> to compute <code>total_marks</code>.</li>
<li>I'm not a fan of having <code>format</code> in the <code>percentage</code> function.</li>
<li>You should move all the main code into a main function, <code>if __name__ == '__main__':</code> should really only call this.</li>
<li>It's more idiomatic to use comprehensions than <code>map</code>, even more so when you have <code>list(map(...))</code>.</li>
<li>It's pretty rude to call a student a query. You can just use name.</li>
</ul>

<pre class="lang-py prettyprint-override"><code>def percentage(marks):
    """Find percentage of marks of the student."""
    return sum(marks) / len(marks)


def main():
    """Main code."""
    n = int(input())
    student_marks = {}
    for _ in range(n):
        name, *scores = input().split()
        student_marks[name] = [float(score) for score in scores]
    name = input()
    result = percentage(student_marks[name])
    print(format(result, '.2f'))


if __name__ == '__main__':
    main()
</code></pre>

<ul>
<li>You can use <code>statistics.mean</code> rather than a custom made <code>percentage</code>.</li>
<li><p>You can change the for loop into two comprehensions, a generator and dictionary comprehension.</p>

<p><strong>Note</strong>: I don't think comprehensions are better here, but are an 'as good' alternate.</p></li>
</ul>

<pre class="lang-py prettyprint-override"><code>import statistics


def main():
    """Main code."""
    _marks = (input().split() for _ in range(int(input())))
    student_marks = {
        name: [float(score) for score in scores]
        for name, *scores in _marks
    }
    result = statistics.mean(student_marks[input()])
    print(format(result, '.2f'))


if __name__ == '__main__':
    main()
</code></pre>
    </div>