<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2><code>stderr</code></h2>

<p>I don't know the requirements of the problem, but in a real program, error messages should be written to <code>stderr</code>:</p>

<pre><code>fprintf(stderr, "[ERROR] Whatever\n");
</code></pre>

<hr>

<h2><code>char *</code></h2>

<p>If CS50 allows it, use <code>char *</code> instead of <code>string</code>.  It's the same (CS50 writes a <code>typedef</code> in <code>&lt;cs50.h&gt;</code>), but you will have it more present.</p>

<p>Thanks to @TobySpeight for noting that it's not only something visual, but also the <code>typedef</code> (<code>string</code>) has problems when mixed with <code>const</code> (the behaviour is non-obvious; <code>const</code> is applied to the pointer, and not to the variable type).</p>

<hr>

<h2>Don't leave whitespace in a line ending</h2>

<pre><code>printf("%s \n", key);
</code></pre>

<p>This code will write a space at the end of a line, which is useless, and sometimes not good at all.</p>

<hr>

<h2>DRY</h2>

<p>Don't repeat yourself: the 5 loops are very similar.  In fact the inner loop of each one is identical and could be put inside a function.  Repetition usually leads to typos and bugs.</p>

<hr>

<h2>Compiler specific optimizations</h2>

<p>AFAIK, CS50 uses Clang, which can apply optimizations beyond what you could write in standard C.  To do that, you need to write code that only some compilers will understand (you can write that code inside <code>#if</code>s to support other compilers, or decide that your code will only support a specific set of compilers).  GCC, Clang, and possibly other compilers make use of <a href="https://gcc.gnu.org/onlinedocs/gcc/Common-Function-Attributes.html#Common-Function-Attributes" rel="nofollow noreferrer">function attributes</a> to tell the compiler that a function is able to be optimized more than what it may think.</p>

<p>For example, @chux told in his answer that <em>good</em> compilers know that even if you write <code>strlen</code> many times, as long as the string isn't modified in between, the compiler can reuse the length from the last call.  The compiler uses one of those attributes to know that (it isn't black magic). This is what the prototype for <code>strlen</code> might look like in Clang's libc:</p>

<pre><code>__attribute__((pure))
size_t strlen(const char *s);
</code></pre>

<p>Your function crack has the same property: if you call it twice without modifying the string, the return value will be the same (and it has no side effects).  You could write your prototype as:</p>

<pre><code>__attribute__((pure))
bool crack(const char *hash);
</code></pre>

<p>You could write a macro to support compilers that don't understand <code>__attribute__</code>:</p>

<pre><code>#if defined(__GNUC__)
#define pure__ __attribute__((pure))
#else
#define pure__
#endif
</code></pre>

<p>If you want other compilers to be able to optimize your functions as pure but use different constructions for that, you can extend this macro.  The usage would be:</p>

<pre><code>pure__
bool crack(const char *hash);
</code></pre>

<p>Note:  there are other attributes that would be applicable to that function.  I leave it to you to find them (read the link above).</p>

<hr>

<h2><code>static</code></h2>

<p>Functions that are private to a <code>.c</code> file should be declared <code>static</code>.  <code>crack</code> is one of those:</p>

<pre><code>__attribute__((pure))
static
bool crack(const char *hash);

...

static
bool crack(const char *hash)
{
        ...
}
</code></pre>
    </div>