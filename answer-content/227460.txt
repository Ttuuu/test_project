<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Along with @Linny's changes which improve the code quality. You could start using more numpy specific stuff to do things like check neighbours for zeros.</p>

<ol>
<li>In numpy matrix, unlike in list of lists... you can use this format for indexing: <code>seats[x][y] == seats[x, y]</code>.</li>
<li>The two for loops can be turned into slicing and summing: <code>(seats[neighbour_x-1:neighbour_x+1, neighbour_y-1:neighbour_y+1] == 0).sum()</code>. In the brackets, it gets the range of matrix, then creates a bool matrix where it satisfies the condition and sums the count.</li>
</ol>
    </div>