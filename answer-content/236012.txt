<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You chose to represent the “list of sequences” as a dictionary</p>

<blockquote>
<pre><code>var sequences: [Int: [Int]] = [:]
</code></pre>
</blockquote>

<p>and here you test if a sequence for the given index already exists, and then either append a new element or create the initial sequence for that index:</p>

<blockquote>
<pre><code>if var sequence = sequences[seq] {
    sequence.append(y)
    sequences[seq] = sequence
} else {
    sequences[seq] = [y]
}
</code></pre>
</blockquote>

<p>That can be greatly simplified by using a subscript with a default value:</p>

<pre><code>sequences[seq, default: []].append(y)
</code></pre>

<p>But actually, instead of representing the “list of sequences” as a dictionary I would represent it as an array (of arrays) instead:</p>

<pre><code>var sequences: [[Int]] = Array(repeating: [], count: n)
</code></pre>

<p>The number of sequences is a-priori known, so that there is no advantage of using a dictionary. Appending a new element to a sequences (query type 1) then becomes</p>

<pre><code>sequences[seq].append(y)
</code></pre>

<p>and for query type 2 we get</p>

<pre><code>lastAnswer = sequences[seq][index]
answerlist.append(lastAnswer)
</code></pre>

<p>without the need of forced-unwrapping for the dictionary subscripting.</p>

<p>This should also be more efficient, because (array) index lookups are faster than dictionary lookups.</p>

<p>Some more remarks:</p>

<ul>
<li>The type of a variable should not be part of the variable name, e.g. <code>answers</code> instead of <code>answerList</code>.</li>
<li><p>Multiple (related) assignments can be combined to a tuple assignment, e.g.</p>

<pre><code>let (queryType, x, y) = (query[0], query[1], query[2])
</code></pre></li>
<li><p>We know that the query type can only be 1 or 2, but a <code>fatalError()</code> in the default case helps to find programming errors.</p></li>
</ul>

<p>Putting it together, the function could look like this:</p>

<pre><code>func dynamicArray(n: Int, queries: [[Int]]) -&gt; [Int] {
    var sequences: [[Int]] = Array(repeating: [], count: n)
    var lastAnswer = 0
    var answers = [Int]()
    for query in queries {
        let (queryType, x, y) = (query[0], query[1], query[2])
        switch queryType {
        case 1:
            let seq = (x ^ lastAnswer) % n
            sequences[seq].append(y)
        case 2:
            let seq = (x ^ lastAnswer) % n
            let index = y % sequences[seq].count
            lastAnswer = sequences[seq][index]
            answers.append(lastAnswer)
        default:
            fatalError("Bad query type")
        }
    }
    return answers
}
</code></pre>

<hr>

<p>In addition, it seems that most of the time is spent while <em>reading the input data</em> into the <code>queries</code> array, done by the (HackerRank supplied template) code</p>

<blockquote>
<pre><code>guard let queriesRowTemp = readLine()?.replacingOccurrences(of: "\\s+$", with: "", options: .regularExpression) else { fatalError("Bad input") }

let queriesRow: [Int] = queriesRowTemp.split(separator: " ").map {
    if let queriesItem = Int($0) {
        return queriesItem
    } else { fatalError("Bad input") }
}
</code></pre>
</blockquote>

<p>Instead of removing trailing whitespace with a regular expression search we can split the input row and ignore empty components:</p>

<pre><code>guard let queriesRowTemp = readLine() else { fatalError("Bad input") }
let queriesRow: [Int] = queriesRowTemp.split(separator: " ",
                                             omittingEmptySubsequences: true).map {
    if let queriesItem = Int($0) {
        return queriesItem
    } else { fatalError("Bad input") }
}
</code></pre>

<p>In my test that cut the time to read 100000 queries down from 3.7 to 1.7 seconds.</p>
    </div>