<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There's a couple of things you can do to improve the R-style and the efficiency of your code.</p>

<p>Let's first look at your while loops:</p>

<p>After putting your comments before the code they correspond to, removing the unnecessary semicolons, and normalising your white space, the final while loop looks like this:</p>

<pre><code># Third pass loop, scaling the array according to the histogram (multiply each interval by the bin height)
ny &lt;- 1
while (ny &lt;= Ym) {
  nx &lt;- 1
  while (nx &lt;= Xm) {
    nb &lt;- 1
    while (nb &lt;= Nb) {
      if (Hxy[nx, ny] == nb) {
        Mxy[nx, ny] &lt;- Mb[nb] + (Mxy[nx, ny] - (nb - 1) * dM) * hb[nb]
        break
      }
      nb &lt;- nb + 1
    }
    nx &lt;- nx + 1
  }
  ny &lt;- ny + 1
}
</code></pre>

<p>We can rewrite this using a slightly more condensed form:</p>

<pre><code># Third pass loop, scaling the array according to the histogram (multiply each interval by the bin height)
for (ny in seq(Ym)) {
  for (nx in seq(Xm)) {
    for (nb in seq(Nb)) {
      if (Hxy[nx, ny] == nb) {
        Mxy[nx, ny] &lt;- Mb[nb] + (Mxy[nx, ny] - (nb - 1) * dM) * hb[nb]
        break
      }
    }
  }
}
</code></pre>

<p>The <code>break</code> in there isn't necessary, it just speeds things up a bit (Hxy isn't updated during the loop, and for any given (i,j), Hxy[i,j] == nb can only be true for one value of <code>nb</code>). So we can remove the <code>break</code>. But then we can also rearrange the loop; let's put the <code>nb</code> loop on the outside:</p>

<pre><code># Third pass loop, scaling the array according to the histogram (multiply each
# interval by the bin height)
for (nb in seq(Nb)) {
  for (ny in seq(Ym)) {
    for (nx in seq(Xm)) {
      if (Hxy[nx, ny] == nb) {
        Mxy[nx, ny] &lt;- Mb[nb] + (Mxy[nx, ny] - (nb - 1) * dM) * hb[nb]
      }
    }
  }
}
</code></pre>

<p>There are a few ways to vectorise this. You could:</p>

<ul>
<li><p>update each row in turn</p></li>
<li><p>update each column in turn</p></li>
<li><p>or update the whole matrix</p></li>
</ul>

<p>To update each column:</p>

<pre><code>for (nb in seq(Nb)) {
  for (ny in seq(Ym)) {
    # find those entries that need updating
    idx &lt;- which(Hxy[, ny] == nb)
    # compute the replacement value for those entries
    replacement &lt;- Mb[nb] + (Mxy[idx, ny] - (nb - 1) * dM) * hb[nb]
    # update the entries
    Mxy[idx, ny] &lt;- replacement
  }
}

# or alternatively:
for (nb in seq(Nb)) {
  for (ny in seq(Ym)) {
    Mxy[, ny] &lt;- ifelse(
      Hxy[, ny] == nb,
      # value if true
      Mb[nb] + (Mxy[, ny] - (nb - 1) * dM) * hb[nb],
      # value if false
      Mxy[, ny]
    )
  }
}
</code></pre>

<p>Importantly, a matrix is a vector. So you can actually update a whole matrix in a similar vectorised way (this uses a slightly different indexing syntax to typical matrix operations - in a 2d matrix you can index an entry by either two-coordinates (the row and column) or by one (by counting down each column in turn)):</p>

<pre><code>for (nb in seq(Nb)) {
  # which entries need updating:
  idx &lt;- which(Hxy == nb)
  # what value should they take:
  replacement &lt;- Mb[nb] + (Mxy[idx] - (nb - 1) * dM) * hb[nb]
  # update those values
  Mxy[idx] &lt;- replacement
}
</code></pre>

<p>[edit:]
Now, we still don't have a fully vectorised version of that loop.</p>

<p>How could that loop over <code>Seq(Nb)</code> be vectorised out?</p>

<p>For a given value of <code>nb</code> we find all entries in <code>Hxy</code> that match <code>nb</code> and we refer to their position in Hxy or Mxy by <code>idx</code>; so whereever we use <code>nb</code> in the definition of <code>replacement</code>, we could use <code>Hxy[idx]</code> instead (<code>Mb[Hxy[idx]]</code>, <code>Hxy[idx]</code>, <code>hb[Hxy[idx]]</code> are all vectors, because <code>idx</code> is a vector); so we have:</p>

<pre><code>for (nb in seq(Nb)) {
  # which entries need updating:
  idx &lt;- which(Hxy == nb)
  # what value should they take:
  replacement &lt;- Mb[Hxy[idx]] + (Mxy[idx] - (Hxy[idx] - 1) * dM) * hb[Hxy[idx]]
  # update those values
  Mxy[idx] &lt;- replacement
}
</code></pre>

<p>You can now throw away those index vectors:</p>

<pre><code># begone `for` loop
replacement &lt;- Mb[Hxy] + (Mxy - (Hxy - 1) * dM) * hb[Hxy]
Mxy &lt;- replacement
</code></pre>

<p>You've vectorised out the whole of that final loop.</p>

<hr>

<p>However, I suspect the main limitation on the speed of your code will be the first loop rather than the second or third; and I can't see how to readily vectorise the first loop.</p>

<p>You might want to split the code up into three functions, one for each of the loops, and time each of them; or use <code>profvis</code> to work out where your code spends most of its time (<a href="https://github.com/rstudio/profvis" rel="nofollow noreferrer">https://github.com/rstudio/profvis</a>)</p>

<hr>

<p>If it's of use, I modified your original code, putting the matrix computation bit into a function so I could play with it. The modified code looks like this:</p>

<pre><code>mandelbrot_array &lt;- function(
  # Max iterations
  n_iter,
  # x pixels
  n_row,
  # y pixels
  n_col
) {
  # Escape radius squared (much larger than 4, intentionally)
  Es &lt;- 10^3
  Xm &lt;- n_row
  Ym &lt;- n_col

  # initiate Mandelbrot array
  Mxy &lt;- matrix(rep(1, Xm * Ym), nrow = Xm, ncol = Ym)
  # Histogram index array
  Hxy &lt;- Mxy

  # Number of bins
  Nb &lt;- 40
  # Histogram heights vector
  hb &lt;- rep(0, Nb)
  # Bin boundaries, for later
  Mb &lt;- rep(0, Nb)
  mx &lt;- 1:Xm
  my &lt;- 1:Ym
  # Re(C) vector
  Cx &lt;- -0.5 + (-1 + mx / Xm * 2) * 1.6
  # Im(C) vector
  Cy &lt;- (-1 + my / Ym * 2) * 0.9

  # First pass loop, computing Mxy
  for (ny in seq(Ym)) {
    for (nx in seq(Xm)) {
      x0 &lt;- 0
      y0 &lt;- 0
      s &lt;- 1
      for (j in seq(n_iter)) {
        r &lt;- x0^2 + y0^2 #|z|^2
        if (r &lt; Es) {
          x1 &lt;- x0^2 - y0^2 + Cx[nx]
          y1 &lt;- 2 * x0 * y0 + Cy[ny]
        }
        else {
          x1 &lt;- x0
          y1 &lt;- y0
          break
        }
        x0 &lt;- x1
        y0 &lt;- y1
        if (r &gt; 0) {
          s &lt;- s + min(r, 1 / r)
        } # this is what we measure instead of escape count
      }
      Mxy[nx, ny] &lt;- s
    }
  }
  Mmax &lt;- max(Mxy)
  Mmin &lt;- min(Mxy)
  DM &lt;- Mmax - Mmin
  # Bin size
  dM &lt;- DM / Nb
  # Shifting the array values so they start with 0
  Mxy &lt;- Mxy - Mmin
  # Second pass loop, computing the histogram

  for (nb in seq(Nb)) {
    idx &lt;- which(
      Mxy &lt; (nb + 0.01) * dM &amp;
        Mxy &gt; (nb - 1.01) * dM
    )
    hb[nb] &lt;- hb[nb] + length(idx)
    Hxy[idx] &lt;- nb
  }

  # Normalizing the histogram
  hb &lt;- hb / max(hb)
  # computing the new bin boundaries
  for (nb in seq(Nb - 1)) {
    Mb[nb + 1] &lt;- Mb[nb] + dM * hb[nb]
  }
  # Third pass loop, has now been vectorised completely:
  Mxy &lt;- Mb[Hxy] + (Mxy - (Hxy - 1) * dM) * hb[Hxy]

  Mxy
}
<span class="math-container">```</span>
</code></pre>
    </div>