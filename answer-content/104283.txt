<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>naked <code>malloc</code> calls</h1>

<p>Note that <code>malloc()</code> simply allocates memory - you have no guarantees about what the newly allocated memory contains. For that reason it is better to write a function which both allocates and initializes an new object, i.e.:</p>

<pre><code>node* newNode(int v) {
  node* p = (node*) malloc( sizeof(node) );
  // assume malloc never fails
  p-&gt;val = v;
  p-&gt;next = NULL;
  return p;
}
</code></pre>

<p>Now use <code>newNode()</code> where you are using <code>malloc()</code> directly.</p>

<h1><code>make_ll</code></h1>

<p>First of all, does your <code>make_ll</code> work for len = 0?</p>

<p>For comparison, here is a recursive solution for <code>make_ll</code>:</p>

<pre><code>node* make_ll(int len) {
  if (len &lt;= 0) {
    return NULL;        // a list of length 0
  } else {
    node *tail = make_ll(len-1);
    node *head = newNode(len);
    head-&gt;next = tail;
    return head;
  }
}
</code></pre>

<p>And here is a way I would transform this into a loop which avoids double checking the exit condition:</p>

<pre><code>node* make_ll(int len) {
  if (len &lt;= 0) {
    return NULL;
  }
  node* head = newNode(len);
  node* last = head;
  for (; len &gt; 0; --len) {
    node* n = newNode(len);
    last-&gt;next = n;
    last = n; 
  }
  return head;
}
</code></pre>

<p>The idea is to keep track of the last node in the chain so you can update its <code>next</code> field when you create a new node.</p>
    </div>