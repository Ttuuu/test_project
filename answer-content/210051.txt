<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The code compiled with no warnings and ran properly on first time which is great.</p>

<p>Let's see what can be improved.</p>

<p><strong>Style</strong></p>

<p>The indentation of the code seems a bit weird. I do not know if this is how it looked originally or if it got broken when it was copied here.</p>

<p>Also, it may be worth adding some documentation describing the inputs you are expecting (in your case, 3 arrays of same size, the first one being 0-terminated).</p>

<p><strong>Do less</strong></p>

<p>You use the mask only to know whether <code>j</code> is to be incremented. Actually, you could rewrite:</p>

<pre><code>j += mask[i];
</code></pre>

<p>as</p>

<pre><code>    if (mask[i])
        j++;
</code></pre>

<p>which is more explicit but less concise.</p>

<p>The real benefic is when you realize than updating <code>filtered</code> can be done only when we have <code>mask[i]</code>. We can write:</p>

<pre><code>    if (mask[i])
    {
        filtered[j] = input[i];
        j++;
    }
</code></pre>

<p>or the equivalent:</p>

<pre><code>    if (mask[i])
        filtered[j++] = input[i];
</code></pre>

<p><strong>Null character</strong></p>

<p>Instead of <code>filtered[j] = 0;</code>, you could use the <a href="https://en.wikipedia.org/wiki/Null_character" rel="nofollow noreferrer">Null Character</a> which is equivalent here but more usual and write: <code>filtered[j] = '\0';</code>.</p>

<p><strong>Signature</strong></p>

<p>I am not sure if it is really useful to have the <code>filtered</code> value returned as it is already known by the calling function. Also, <code>filterArray</code> may be a better name.</p>

<p><strong>Going further</strong></p>

<p>Instead of definining a mask as an array of boolean, you could provide an array with the positions of the characters you are interested in.</p>

<p>In your case, you'd provide something like: <code>{3, 7, 8, 9, 10, 14 }</code>.</p>

<p>This could be less efficient because we'd perform a smaller number of iterations. Here, we'd iterate over 6 elements instead of 15.</p>

<p>The corresponding mask could be converted manually (which is what I did here) if it is for a known value or you could write a function to pre-process the mask. This seems to be relevant in your case as the same mask is used many times on different inputs.</p>
    </div>