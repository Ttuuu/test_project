<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Talk yourself through your "problem domain" and write it as you go. Say a little, write a little. The details will come along. Don't worry about them all at once. Make sure the little you write each time compiles.</p>

<p>For example</p>

<p><em>Well, there's a Person</em></p>

<pre><code>public Class Person {}
</code></pre>

<p><em>Is a Student a Person? Yes. Is a Person a student? Well, sometimes.</em></p>

<pre><code>public Class Student extends Person {}
</code></pre>

<p><em>What's the basic stuff of a Person/Student?  name, age, address, studentID, semester....</em></p>

<pre><code>public class Student extends Person () {
    public string Name;
    public string Age;
    public string Address;
    public string ID;
    public string semester;
}
</code></pre>

<p><em>Oh, some of those belong to all Persons, some are students only</em></p>

<pre><code>public class Person () {
        public string Name;
        public string Age;
        public string Address;
}

public class Student extends Person () {
        public string ID;
        public string semester;
}
</code></pre>

<p><em>Students take courses. I need a course class. Is a course a student? no. vice versa? no. Oh - a student takes a course. Or a student has courses - <strong>has means composition not inheritance</strong></em></p>

<pre><code>public class Student extends Person () {
            public string ID;
            public string semester;
            ArrayList courses;
 }
 public class Course {} // don't know what's inside this yet.
</code></pre>

<p><strong>OK, You get the idea.</strong></p>

<p><strong>Displaying</strong></p>

<p>Your basic idea of making strings of "label: value" is the right idea, but implemented wrong. And once implemented - use it!! </p>

<p>All objects have a <code>toString()</code> method. Override it. Then all you have to "say" to use it is <code>System.out.println(someStudent.toString())</code>  BAM! object oriented programming. Also, DO NOT use println in your toString(). toString() should build all the object information into a <em>single</em> formatted string and pass that. Then you use it as shown.</p>

<pre><code>// in the Person class
public override string toString(){
   string me = "";
   me += "Name: " + this.Name + "\n"  //new line
   me += "Age: " + this.Age + "\n";
   me += "Address: " + this.Address + "\n";
   return me;
}
</code></pre>

<p>Now, what class would this go into? Person. What about Student? The above already does most of what we need for Student too. Do we duplicate it in Student class? NO! Object Oriented Design to the rescue!  </p>

<pre><code>// in the Student class
public string toString(){
    string me = "";
    me += base.toString();
    me += "semester: " + this.semester + "\n";
    ......
    return me;
}
</code></pre>
    </div>