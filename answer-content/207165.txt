<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your code has a number of warnings when compiled under rustc. Those are free code review hints, listen to them!</p>

<p>You use <code>std::io::Error</code> for all your errors. This is dubious since many of your errors are not I/O related. Personally, I like to use <code>Error</code> from the <code>failure</code> crate. All other errors can be automatically converted to <code>failure::Error</code> by the <code>?</code> operator.</p>

<p>A block of code towards the end has a number of issues:</p>

<pre><code>let mut input_str = String::new();
let mut bytes_read: usize = 1;
while bytes_read != 0 {
    let mut is_copy = input_str.clone();
</code></pre>

<p>The way your code works, <code>input_str</code> is never modified. As such you are always cloning an empty string for every iteration of the loop. You should just create an empty string here, and get rid of <code>input_str</code> altogether.</p>

<pre><code>    bytes_read = 
    match br.read_line(&amp;mut is_copy)
    {
        Ok(num) =&gt; num,
        Err(err) =&gt; return Err(std::io::Error::new(std::io::ErrorKind::Other, "read_line failed...\n"))
    };
</code></pre>

<p>The whole point of the <code>read_line</code> function is that you can reuse the memory allocated in <code>String</code> between iterations of your loop. Since you don't do this, this is the wrong interface. Instead, use <code>for line in br.lines()</code> to get an iterator over the lines in the file:</p>

<pre><code>    let str_arc : Arc&lt;String&gt; = Arc::new(is_copy);
    tx.send(str_arc);
</code></pre>

<p>There is no reason to use an <code>Arc</code> here. You only need an <code>Arc</code> if both the sending and receiving threads are going to keep a reference to the String. However, that's not the case here. Here you can just send the <code>String</code> from one thread to another, no <code>Arc</code> required.</p>

<p>On a general note, this is a bad use of threading. Your program is going to be limited by how quickly it can read the data in from the disk. As such, you cannot get a speed boost by multi-threading it like this.</p>
    </div>