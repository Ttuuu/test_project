<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I started by running your program, and poking it a bit to see what happens if I misbehave. This is a good way to catch errors and edge cases. Here’s what I found:</p>

<ul>
<li><p><strong>ValueError if I give bad data for “Please enter the shift amount”.</strong></p>

<p>Examples:</p>

<pre class="lang-none prettyprint-override"><code>Please enter the shift amount (negative to decrypt) :
Traceback (most recent call last):
  File "caesarcr.py", line 49, in &lt;module&gt;
    offset = int(input('Please enter the shift amount (negative to '
ValueError: invalid literal for int() with base 10: ''
</code></pre>

<p></p>

<pre class="lang-none prettyprint-override"><code>Please enter the shift amount (negative to decrypt) : notanumber
Traceback (most recent call last):
  File "caesarcr.py", line 49, in &lt;module&gt;
    offset = int(input('Please enter the shift amount (negative to '
ValueError: invalid literal for int() with base 10: 'notanumber'
</code></pre>

<p></p>

<p>You should catch the ValueError, and either:</p>

<ul>
<li>Default the shift if I enter nonsense, or</li>
<li>Keep prompting me until I give valid input, or</li>
<li>End the program with an error message</li>
</ul>

<p></p>

<p>But a traceback is rarely a good form of error for an end-user.</p></li>
<li><p><strong>No output if I enter a number that isn’t 1 or 2 at “choice number”.</strong></p>

<p>I can repeat this with any choice of number; I just don’t get any output:</p>

<pre class="lang-none prettyprint-override"><code>Please input the text to be encrypted : hello world
Please enter the shift amount (negative to decrypt) : 3
The alphabet sets :
1. Lowercase ascii
2. Uppercase ascii

Please enter the choice number, or anything else to choose default alphabet
(all printable ascii characters): 3
The encrypted text is :
</code></pre>

<p></p>

<p>The problem is these branches here (comments mine):</p>

<pre><code>if str.isnumeric(choice):
    number = int(choice)
    if number == 1:
        # do stuff with lowercase ASCII
    elif number == 2:
        # do stuff with uppercase ASCII
  # else:
  #     What about input that falls down here?
else:
    # do stuff with mixed case
</code></pre>

<p></p>

<p>You need to add that missing <code>else:</code> branch.</p></li>
<li><p><strong>I get unchanged output if I use offset ≥ 100.</strong></p>

<p>Some examples:</p>

<pre class="lang-none prettyprint-override"><code>$ python3 caesarcr.py "hello world" 99 all
gdkkn~vnqkc

$ python3 caesarcr.py "hello world" 100 all
hello world

$ python3 caesarcr.py "hello world" 101 all
hello world
</code></pre>

<p></p>

<p>I suspect this is related to the fact that the length of <code>string.printable</code> is 100, and you’re failing to wrap around correctly. Perhaps it’s okay that shifting by 100 gives the same output, but after that it should reset – so offset by 101 is the same as offset by 1, etc.</p></li>
</ul>

<p></p>

<hr>

<p>Playtime over, time to dive into the code. A few items of note:</p>

<ul>
<li><p>Inside <code>shift()</code>, your calls to <code>str.upper()</code> and <code>str.lower()</code> can be rewritten as:</p>

<pre><code>message = message.lower()
message = message.upper()
</code></pre>

<p></p>

<p>That’s the more approach I see more often.</p></li>
<li><p>I think this line is the source of your wrap-around woes:</p>

<pre><code>shifted_alphabet = alphabet[amount:] + alphabet[:amount]
</code></pre>

<p></p>

<p>You should probably set <code>amount</code> to be <code>amount % len(alphabet)</code> before this line, then I think you’d be okay.</p></li>
<li><p>I’m not sure why 97 is the default shift length, or if it’s even appropriate to have a default shift. At the very least, there should be a comment to explain this choice.</p></li>
<li><p>It’s not clear why I can’t supply two arguments, say:</p>

<pre><code>$ python3 caesarcr.py 'hello world' 3
</code></pre>

<p></p>

<p>and have the script automatically use the full set of ASCII characters for me.</p></li>
<li><p>To break up the main() block, I’d wrap the interactive and command-line help in two different functions. Then you’d have:</p>

<pre><code>if __name__ == '__main__':
    if len(sys.argv) == 1:
        interactive_encrypt()
    elif len(sys.argv) &lt;= 4:
        command_line_encrypt()
    else:
        print_usage_message()
</code></pre>

<p></p>

<p>Within the command-line parser, you can tidy it up slightly by combining cases. For example:</p>

<pre><code>text = sys.argv[1]

if len(sys.argv) &gt;= 2:
    offset = int(sys.argv[2])
else:
    offset = 97

if len(sys.argv) &gt;= 3:
    mode = sys.argv[3]
else:
    mode = 'universe'
</code></pre>

<p></p>

<p>rather than, for example, getting <code>text = sys.argv[1]</code> for each length individually.</p></li>
</ul>
    </div>