<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Instead of using a <code>CHART[new_position]</code>, I'd recommend using <code>chr(new_position)</code> function instead. Good thing is you're using <code>odr()</code> already.</p>

<p>Your functions now look like [also as the first answer says, made some changes in way of iterating over elements because you don't need the index anyway]:</p>

<pre><code>def encode(text, rotations):
'''
Encodes the passed text, rotating `rotations` times
'''
encoded_text = ""
for character in text:
    new_position = ord(character) + (rotations % 26)
    if new_position &gt; 122:
        new_position = 97 + (new_position - 122)
    encoded_text += chr(new_position)
return encoded_text

def decode(text, rotations):
'''
Decodes the passed text, with the passed rotations 
'''
decoded_text = ""
for character in text:
    new_position = ord(character) - (rotations % 26)
    if new_position &lt; 97:
        diff = 97 - new_position
        new_position = 122 - diff
    decoded_text += chr(new_position)
return decoded_text
</code></pre>

<p>Not a big deal but you can also pass <code>(rotations % 26)</code> as a third parameter to <code>encode</code> and <code>decode</code> function and calculate <code>(rotations % 26)</code> in the <code>main</code> function. So that your functions look like:</p>

<pre><code>def encode(text, rotations, rem):
'''
Encodes the passed text, rotating `rotations` times
'''
encoded_text = ""
for character in text:
    new_position = ord(character) + rem
    if new_position &gt; 122:
        new_position = 97 + (new_position - 122)
    encoded_text += chr(new_position)
return encoded_text

def decode(text, rotations, rem):
'''
Decodes the passed text, with the passed rotations 
'''
decoded_text = ""
for character in text:
    new_position = ord(character) - rem
    if new_position &lt; 97:
        diff = 97 - new_position
        new_position = 122 - diff
    decoded_text += chr(new_position)
return decoded_text
</code></pre>

<p>And you call them up in main function like this:</p>

<pre><code>if __name__ == '__main__':

rem = (rotations % 26)
ROTATIONS = random.randint(3, 26)
ENCODED = encode(random.choice(WORDS), ROTATIONS, rem)
DECODED = decode(ENCODED, ROTATIONS, rem)
</code></pre>

<p>Happy Coding :)</p>
    </div>