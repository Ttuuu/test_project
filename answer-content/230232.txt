<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<pre><code>const axios = require('axios'),
      fs = require('fs'),
      redis = require('redis');
</code></pre>

<p>Personally, I discourage the use of a single <code>var</code>/<code>let</code>/<code>const</code> for declaring a variable. Firstly, they're not portable. Let's say you want to move <code>fs</code> somewhere else. Instead of copy-pasting the entire line, you end up copying that line <em>and tacking on</em> <code>var</code>/<code>let</code>/<code>const</code> anyways.</p>

<p>Next, say you already had <code>redis</code>. if you wanted to add <code>axios</code>, the Git changelog will look like:</p>

<pre><code>- const redis = require('redis');
+ const axios = require('axios'),
+       redis = require('redis');
</code></pre>

<p>or this:</p>

<pre><code>- const redis = require('redis');
+ const redis = require('redis'),
+       axios = require('axios');
</code></pre>

<p>Instead of just this:</p>

<pre><code>+ const axios = require('axios');
  const redis = require('redis');
</code></pre>

<p>or this:</p>

<pre><code>  const redis = require('redis');
+ const axios = require('axios');
</code></pre>

<p>You never touched redis, yet it's highlighted in the commit. This is because you had to add the <code>,</code>. This ends up being unnecessary noise in the commit, and annoying in code reviews and pull requests.</p>

<hr>

<p>Next up, I recommend a <code>const</code>-first policy. The priority should be <code>const</code> first, then <code>let</code> if the variable has to mutate (e.g. loop counters). Then <code>var</code> if you absolutely have to have a function-scoped variable defined in some nested block for whatever reason.</p>

<p>This block-scoped variables reduce cognitive overhead, avoiding having to remember that what variables exist in the upper scopes, and to avoid accidentally clobbering a variable elsewhere. Small change in process, but has big benefits down the line.</p>

<hr>

<p>Node.js has native support for <code>async</code>/<code>await</code>. So you no longer have to deal with the clunky syntax of promises.</p>

<p>Additionally, if you have functions that use the Node-style callback API (an async function that takes a callback whose first argument is an error and the second being the result), Node has <a href="https://nodejs.org/api/util.html#util_util_promisify_original" rel="nofollow noreferrer"><code>utils.promisify()</code></a> which returns a promise-based version of it.</p>

<hr>

<pre><code>for (let i = 0; i &lt; sites.length; i++) {
    getProducts(sites[i]).then(products =&gt; {
       products.forEach(product =&gt; {
           cache(product)
       });
    }).catch(err =&gt; console.log(err));
}
</code></pre>

<p>You can replace this with an <code>array.map()</code> and <code>Promise.all()</code>. Put the promises returned by <code>getProducts()</code> in an array, pass that array to <code>Promise.all()</code> which returns a promise, await that promise to listen for the completion.</p>

<hr>

<pre><code>setInterval(() =&gt; checkStock(), 5000);
</code></pre>

<p>I'd wait for <code>checkStock()</code> to complete first before launching the next run. You wouldn't want to hammer the site every 5 seconds. They might not respond in time, and your requests may accumulate. You might be rate-limited or worse, blocked, before you know it.</p>

<hr>

<p>Here's how I'd write it:</p>

<pre><code>const axios = require('axios')
const fs = require('fs')
const redis = require('redis')

const trackingF = fs.readFileSync("../tracking.json")
const proxiesF = fs.readFileSync("../proxies.json")

const client = redis.createClient()
const clientGetAsync = utils.promisify(client.get)

const toLower = x =&gt; x.toLowerCase()

const keywords = JSON.parse(trackingF).keywords.map(toLower)
const sites = JSON.parse(trackingF).sites.map(toLower)
const proxies = JSON.parse(proxiesF).proxies;

const rProxy = () =&gt; proxies[Math.floor(Math.random() * Math.floor(proxies.length))]

const getProducts = async url =&gt; {
  const response = await axios.get(`${url}/products.json`, rProxy())
  return response.data.products
}

const cache = async product =&gt; {
  try {
    const reply = await clientGetAsync(product.id)
    if (reply) return
    client.set(product.id, JSON.stringify(product))
    console.log("NEW PRODUCT: " + product.id)
  } catch (e) {
    console.error(e)
  }
}

const checkStock = async delay =&gt; {
  console.log("[MONITOR] CHECKING")

  const promises = sites.map(async site =&gt; {
    try {
      const products = await getProducts(site)
      await Promise.all(products.map(cache))
    } catch (e) {
      console.error(e)
    }
  })

  await Promise.all(promises)

  setTimeout(() =&gt; checkStock(delay), delay)
}

checkStock(5000).catch(e =&gt; console.error(e))
</code></pre>
    </div>