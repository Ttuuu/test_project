<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Since <code>lambda</code> expressions are hard to add types and decorators to, I'd start off by writing it like this:</p>

<pre><code>import numpy as np
from typing import Callable

def n_continued_fraction(
    a: Callable[[float], float], 
    b: Callable[[float], float], 
    err: float, 
    i_min: float = 3.0
) -&gt; float:

    def d(i: float) -&gt; float:
        if i == 0:
            return 1.0 / b(0)
        return 1.0 / (b(i) + a(i) * d(i - 1))

    def h(i: float) -&gt; float:
        if i == -1:
            return 0
        if i == 0:
            return a(0) / b(0)
        return (h(i - 1) * b(i) + h(i - 2) * d(i - 1) * a(i)) * d(i)

    def delta_h(i: float) -&gt; float:
        return h(i) - h(i - 1)

    i = i_min
    while np.abs(delta_h(i)) &gt; err * np.abs(h(i)):
        i += 1
    return h(i)
</code></pre>

<p>In terms of performance, note that Python doesn't do tail recursion optimization, so if the stack gets deep enough the script will exit.</p>

<p>However!  Defining functions with <code>def</code> opens up the possibility of using the power of decorators to memoize those inner functions, which might help you get around the recursion limitations; I'll leave experimenting with that as an exercise for the reader.  :)  <a href="https://www.geeksforgeeks.org/memoization-using-decorators-in-python/" rel="nofollow noreferrer">https://www.geeksforgeeks.org/memoization-using-decorators-in-python/</a></p>
    </div>