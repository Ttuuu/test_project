<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>On Observables</h1>

<p>My personal preference is to have as few <code>Subscription</code> objects and <code>subscribe()</code> invocations as possible. If I don't have mistakes in the refactored code, you can achieve a single <code>subscribe()</code> which does the same things as your code. I also got rid of <code>sub2</code>.</p>

<pre><code>this.offerSubscription = this.service
    .isPending$
    .flatMap(data =&gt; {
        this.amount = null;
        const offerObservable = data ?
            this.service.getPending() :
            this.service
                .amount$
                .flatMap((data: Amount) =&gt; {
                    this.amount = data;
                    return this.service.getOffer();
                });
        return offerObservable;
    })
    .subscribe((offer: Offer) =&gt; this.offer = offer);
</code></pre>

<h1>On TypeScript</h1>

<p><code>sub</code>, <code>sub2</code>, <code>isPending$</code> and <code>data</code> are pretty bad names because they don't describe the entities they hold. I recommend changing them.</p>

<p>At the bare minimum, specify the type of the input parameter in your arrow function to make the code more readable: <code>(data: Offer) =&gt; {...}</code> or better <code>(receivedOffer: Offer) =&gt; { ... }</code>.</p>
    </div>