<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First, I'd like to echo @Mat'sMug's distaste for your multi-lined <code>Dim</code> statements.  There's absolutely no reason to do this <em>at all</em> having them prefixed with <code>Dim</code> makes it completely obvious that I'm looking at a declaration block.  It took me a good minute to realize that it wasn't a continuation of <code>Sub</code> declaration, because the <code>Dim</code> literally disappears into a huge wall of code. You aren't saving any time typing it either - last time I checked, <code>Dim</code> and <code>, _</code> were both 3 characters, and the former is a <em>lot</em> easier to type on a qwerty keyboard.</p>

<hr>

<p>The other answers hint around the performance, but I'll just come right out and say it.  Your <code>Sub</code> should really be named the <code>AntiPerfWrap</code>.  First, every single call that <code>Application.Run</code> makes is late bound - <strong><em>even for Excel objects</em></strong>.  It has to be, because like <code>CallByName</code>, it is forced to call <code>IDispactch.GetIDsOfNames</code> <em>on itself</em>.  This is always slower than an early bound call - period, end of discussion.</p>

<hr>

<p>You always cache the <code>ActiveWorkbook</code> and <code>ActiveSheet</code> regardless of whether it is necessary or not.  I would guess that roughly 1% of all the code I've written requires this.  Same thing with <code>.Calculation</code>.  Same thing with <code>.EnableEvents</code>.  Do I write another <code>PerfWrapWithEvents</code> if I need that turned on?  Or maybe <code>PerfWrapWithEventsAllowCalculation</code>?  None of this work is free, and it seems like a jumbled collection of "this will make your code go faster anecdotes" collected from SO comments.  The cargo cult has found thier messiah in this wrapper.</p>

<hr>

<p><code>DoEvents</code> is not free.  In fact it's the complete opposite.  It <strong><em>yields the processor</em></strong> to every other thread that needs to clear it's event queue.  It also makes absolutely no sense to call <code>DoEvents</code> when you've explicitly disabled 95% of the functionality that would make the call useful.</p>

<hr>

<p>Brass tacks time - let's see how much overhead this wrapper really adds.  This is the called routine:</p>

<pre><code>Public Sub UnderTest()
    Dim i As Long
    For i = 1 To 10
        Debug.Print i
    Next
End Sub
</code></pre>

<p>And the baseline benchmark:</p>

<pre><code>Public Sub BenchmarkOne()
    Dim starting As Single
    starting = Timer

    Dim i As Long
    For i = 1 To 100
        Sheet1.UnderTest
    Next

    Debug.Print "Unwrapped: " &amp; Timer - starting
End Sub
</code></pre>

<blockquote>
  <p>Unwrapped: 0.8515625</p>
</blockquote>

<pre><code>Public Sub BenchmarkTwo()
    Dim starting As Single
    starting = Timer

    Dim i As Long
    For i = 1 To 100
        PerfWrap "Sheet1.UnderTest"
    Next

    Debug.Print "Wrapped: " &amp; Timer - starting
End Sub
</code></pre>

<blockquote>
  <p>Wrapped: 6.492188</p>
</blockquote>

<p><em>Ouch.</em></p>

<hr>

<p><strong>Conclusion</strong> - Burn it.  Burn it with fire.  The premise behind the code is that there is a common set of operations that you can do to "speed up" code.  In fact, this is <em>never</em> true.  In reality, you are turning off Excel functionality that can <em>slow down</em> code.  There's a big difference.  If you approach performance issues by looking outside of code that you've written, you're starting out looking in the wrong direction.  A catch-all "solution" for performance simply doesn't exist, so I wouldn't pretend to be providing it.  The best way to look at it is to imagine that any code under performance review to be copied and pasted in place of this...</p>

<blockquote>
<pre><code>If ArgumentsToPass &lt;&gt; vbNullString Then
    Application.Run SubNameToRun, ArgumentsToPass
Else
    Application.Run SubNameToRun
End If
</code></pre>
</blockquote>

<p>...then do a code review on the entire thing.  Ask yourself, "In the context of the full Sub, what is the reason for every single line of code other than part above"? I'm guessing that in roughly 99.99% of cases, there won't be a good answer for all of them.</p>
    </div>