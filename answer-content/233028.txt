<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I wish I had enough practice with decorators to be able to comment on most of this. I've never really <em>needed</em> to play with them, so I've kind of neglected them beyond simple memoization toys. This looks pretty cool, but I think all I can comment on are a few things along with the low-hanging PEP fruit since no-ones jumped on that yet :)</p>

<pre><code>len(closure)-1
</code></pre>

<p>This should <a href="https://www.python.org/dev/peps/pep-0008/#other-recommendations" rel="noreferrer">have spaces in there</a>:</p>

<blockquote>
  <p>Always surround these binary operators with a single space on either side: assignment (=), augmented assignment (+=, -= etc.), comparisons (==, &lt;, &gt;, !=, &lt;&gt;, &lt;=, &gt;=, in, not in, is, is not), Booleans (and, or, not).</p>
</blockquote>

<p>It doesn't explicitly mention <code>-</code>, but the "No:" examples after that bit above suggest that it should use spaces as well.</p>

<p>And on the other end,</p>

<pre><code>test = op.eq
</code></pre>

<p><em>Shouldn't</em> use spaces (from the link above again):</p>

<blockquote>
  <p>Don't use spaces around the = sign when used to indicate a keyword argument, or when used to indicate a default value for an unannotated function parameter.</p>
</blockquote>

<hr>

<p><code>break_</code> doesn't need a <code>return None</code> in there. That's implicit.</p>

<hr>

<p>Some of what you're documenting with doc-strings could be documented in other arguably cleaner ways.</p>

<p>For example, in <code>switch_construct</code> you have:</p>

<pre><code>* The dictionary contains two keys: "control" and "halt".
          - "control": the value governing the current switch instance. `case` blocks are tested against this value.
          - `halt`: value is used to implement break functionality. 
            &gt; `True`: break after execution of current function.
            &gt; Default: `False`.
</code></pre>

<p>You have a dictionary that should only take on certain keys. This sounds more like a job for a <a href="https://docs.python.org/3/library/dataclasses.html" rel="noreferrer"><code>dataclass</code></a> instead of a dictionary:</p>

<pre><code>from dataclasses import dataclass

@dataclass
class SwitchMetadata:
    """- "control": the value governing the current switch instance. `case` blocks are tested against this value.
       - `halt`: value is used to implement break functionality.
    """

    control: str
    halt: bool = False  # Makes the constructor allow halt to default to False

. . .

closure.append(SwitchMetadata(input_))

. . .

if test(value, closure[index].control) and not closure[index].halt

. . .

closure[enclosing.switch_index].halt = True
</code></pre>

<p>This gets rid of the need for string dictionary lookups and gives some type safety. Both of these decrease the chance you'll make silly typos since both allow for static checking by the IDE. The class definition also clearly communicates to the reader what the structure holds and what types the data should be.</p>
    </div>