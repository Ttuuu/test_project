<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>From the problem statement:</p>
<blockquote>
<p>Implement a function pingpong that returns the nth element of the
ping-pong sequence without using any assignment statements.</p>
<p>You may use the function num_sevens, which you defined in the previous
question.</p>
<p>Use recursion - the tests will fail if you use any assignment
statements.</p>
<p>Hint: If you're stuck, first try implementing pingpong using
assignment statements and a while statement. Then, to convert this
into a recursive solution, write a helper function that has a
parameter for each variable that changes values in the body of the
while loop.</p>
</blockquote>
<hr>
<p>Code should be correct, maintainable, robust, reasonably efficient, and, most importantly, readable.</p>
<hr>
<p>Your first solution makes far too much of a simple switch in the increment value with duplicated functions differing merely in the literal integer values 1 and -1. It requires a diff comparison to find the small, obscure differences between the largely duplicate <code>player1</code> and <code>player2</code> functions. Duplication of code hurts maintainability. The solution introduces an obscure player abstraction which is not part of the problem statement. It is not readable. Also, the solution uses multiple assignment statements for the player function variables: "the tests will fail if you use any assignment statements."</p>
<hr>
<p>While the problem statement did say you may use <code>num_sevens</code>, this problem asks "if k contains the digit 7". To count all occurences of digit 7 when we only care about the first occurence is inefficient.</p>
<hr>
<p>Your second solution, "code written without using mutual recursion", which you added later, is clearly incorrect. It uses multiple assignment statements: "the tests will fail if you use any assignment statements." For no apparent reason, you use the name toogle instead of switch and you complicate things by introducing a <code>toggleValue</code> variable.</p>
<pre><code>toggleValue := 1 ^ -1
increment := 1
. . .
        increment ^= toggleValue
</code></pre>
<p>The <code>toggleValue</code> variable is unnecessary and the toggle algorithm is obscure. Simplicity is a virtue.</p>
<pre><code>increment := 1
. . .
        increment *= -1 // switch
</code></pre>
<hr>
<p>The Problem Statement is an academic problem designed to discover if you have learned some fundamental programming concepts: recursion and no assignment statements. The Hint gives a detailed road-map to a solution. You did not answer the problem as stated so you get an F.</p>
<hr>
<p>Here is an example of the sort of solution that the problem statement likely expected:</p>
<blockquote>
<p>Use recursion. First try implementing pingpong using assignment
statements and a while statement. Then, to convert this into a
recursive solution, write a helper function that has a parameter for
each variable that changes values in the body of the while loop.</p>
</blockquote>
<pre><code>package main

import "fmt"

func digitSeven(x int) bool {
    if x &lt;= 0 {
        return false
    }
    if x%10 == 7 {
        return true
    }
    return digitSeven(x / 10)
}

func increment(incr int, x int) int {
    if x%7 == 0 || digitSeven(x) {
        return incr * -1
    }
    return incr
}

func pingpong(n int, i int, v int, incr int) int {
    if i &gt; n {
        return v
    }
    return pingpong(n, i+1, v+incr, increment(incr, i))
}

func PingPong(n int) int {
    return pingpong(n, 1, 0, 1)
}

func main() {
    for n := 1; n &lt;= 30; n++ {
        fmt.Println(n, PingPong(n))
    }
}
</code></pre>
<p>Playground: <a href="https://play.golang.org/p/8H6l-CpLlye" rel="nofollow noreferrer">https://play.golang.org/p/8H6l-CpLlye</a></p>
<p>Output:</p>
<pre><code>1 1
2 2
3 3
4 4
5 5
6 6
7 7
8 6
9 5
10 4
11 3
12 2
13 1
14 0
15 1
16 2
17 3
18 2
19 1
20 0
21 -1
22 0
23 1
24 2
25 3
26 4
27 5
28 4
29 5
30 6
</code></pre>
    </div>