<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>As mentioned in comments, you should be careful about which integer type you use. <code>int</code> is negative and if your function takes <code>int</code> as parameter, it will therefore be assumed that it can handle negative numbers. So <code>unsigned int</code> might have been a better choice.</p>

<p>More importantly, you should be aware that recursion is dangerous, ineffective and often hard to read. The compiler may not always be able to optimize away the recursive call - so-called <em>tail-call optimization</em> - and if it doesn't the function turns very slow and gives a peak in stack memory use.</p>

<p>In this specific case, the compiler should be able to recognize that the <code>else</code> is redundant and the recursive call ends up at the return statement where it should be in order to enable optimization.</p>

<p>Still, gcc gives me less efficient code for your recursive function than for a loop alternative, even though it could optimize away the recursive call. Disassembling your code and comparing it with this one:</p>

<pre><code>int countDigitsSane (int n){
  int digits=1;
  for(int i=n; i&gt;9; i/=10)
  {
    digits++;
  }
  return digits;
}
</code></pre>

<p>Then it gives me slightly worse code for the recursive alternative, <a href="https://godbolt.org/z/Ddzv9u" rel="nofollow noreferrer">https://godbolt.org/z/Ddzv9u</a>. The assembler generated is pretty unreadable with lots of compiler tricks, but writing the code as a plain readable loop is what makes such tricks possible. Usually, code that is easily read by humans is code that is easily optimized by the compiler.</p>

<p>So what was gained from recursion? The code turned slower and harder to read. The uncomfortable truth here is that recursion is mostly used for posing, when the programmer writes needlessly complicated code on purpose to show off.</p>

<p>In the real world where professionals write code with the purpose of making it safe, rugged and maintainable,  recursion should be avoided in general. There are very few actual uses for it outside artificial academic exercises - it should pretty much only be used in various specialized search/sort algorithms and never in ordinary application logic. High level language programmers may tell you otherwise, but that's because they don't have a clue about how actual machine code is generated.</p>
    </div>