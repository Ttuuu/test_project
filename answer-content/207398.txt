<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Regarding the standard compliance:</p>

<ol>
<li><code>empty</code> should better be <code>[[nodiscard]]</code></li>
<li><p>You are missing the deduction guide:</p>

<pre><code>template&lt;class T, class... U&gt; array(T, U...) -&gt; array&lt;T, 1 + sizeof...(U)&gt;
</code></pre>

<p>which also must result in an error if <code>(is_same_v&lt;T, U&gt; &amp;&amp; ...)</code> is <code>false</code> (e.g. via <code>enable_if</code> relying on there being no other deducible constructor).</p></li>
<li><p><code>tuple_element&lt;I, array&lt;T, N&gt;&gt;::type</code> must result in an error if <code>I &gt;= N</code> (e.g. using <code>static_assert</code>).</p></li>
<li><code>constexpr T&amp; get(array&lt;T, N&gt;&amp;&amp; arr) noexcept</code> should return a <code>T&amp;&amp;</code> (e.g. with <code>std::move</code>)</li>
<li>There should be an overload <code>constexpr const T&amp;&amp; get(const array&lt;T, N&gt;&amp;&amp; arr) noexcept</code>.</li>
<li>The specialization for <code>std::swap</code> is missing.</li>
<li>You must handle the case <code>N==0</code> correctly. Zero length arrays are not standard C++. Also for <code>N==0</code>, <code>begin()</code> and <code>end()</code> must return a unique value and the exception specification of <code>swap</code> must be non-throwing no matter the element type.</li>
</ol>

<p>Regarding the public data member: At least both libstdc++ and libc++ also use a public data member. There probably is no other way of doing it. They declare them with implementation-reserved identifiers like <code>__elemens_</code>. In any case programs are not allowed to use these additional members.</p>
    </div>