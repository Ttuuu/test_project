<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Checking over 100 million possibilities is going to be slow in any language. That being said, here are some ways to speed up the code a bit.</p>

<ul>
<li><p>There is no need to actually get the list of all combinations when you only need them one at a time. Especially when you have 100 million of them this will be very big in memory. Instead just use it as the generator <code>itertools.combinations</code> returns, you can simply iterate over it.</p></li>
<li><p>There is no need to copy the dataframe, you don't modify it anyway.</p></li>
<li><p>The most important thing is using vectorized functions wherever possible. <code>numpy</code> functions by default work on arrays. So instead of </p>

<pre><code>dfpct = df1.pct_change().apply(lambda x: np.log(x+1))
</code></pre>

<p>use</p>

<pre><code>dfpct = np.log1p(df1.pct_change())
</code></pre>

<p>The <a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.log1p.html" rel="nofollow noreferrer"><code>numpy.log1p</code></a> function is the same as <code>numpy.log(1 + x)</code>, but more accurate if <code>x</code> is close to zero.</p>

<p>Similarly, for the random weights:</p>

<pre><code>weights = np.random.rand(n)
weights /=  weights.sum()
</code></pre></li>
<li><p><code>numpy.sum</code> by default sums along all axis, so doing two <code>sum</code> in a row without specifying an axis is meaningless.</p></li>
<li><p>Don't use a bare <code>except</code> clause. This includes e.g. the user pressing <kbd>Ctrl</kbd>+<kbd>C</kbd> to abort the program (a very real possibility if your program is going to run 12 years), meaning they have to press that 150 million times. At least use <code>except Exception</code> and then you may as well print the error at least, so you know what is going wrong, by doing <code>except Exception as e</code>. You should also constrain the range of the <code>try..except</code> block as far as possible, e.g. only around the lines you know can cause problems. This is so you don't ignore unexpected errors.</p></li>
<li><p>Using <code>'Didnt work'</code> as a special value for when something went wrong is maybe not the best idea. Consider using <code>None</code> or <code>np.nan</code> instead.</p></li>
<li><p>Python has an official style-guide, <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">PEP8</a>. It recommends using <code>lower_case</code> for variables and functions and not to use unnecessary whitespace (of which you have a lot).</p></li>
</ul>

<p>With these mostly fixed, your code would look like this:</p>



<pre><code>import pandas as pd
from pandas_datareader import data
import datetime
import numpy as np
import random
import itertools
import requests
import time

time1 = time.time()
start = datetime.datetime(2015, 1, 1)
end = datetime.datetime(2019, 12, 31)
list2 = []
num = []

#################SP Download#######################

sptickers1 = ['MMM', 'ABT', 'ABBV', 'ABMD', 'ACN', 'ATVI', 'ADBE', 'AMD', 'AAP', 'AES', 'AFL', 'A', 'APD', ...]
dstocks = sptickers1[:13]
df = data.DataReader(dstocks, 'yahoo', start, end)['Close']
combinations = itertools.combinations(dstocks, 10)

for i in combinations:
    try:
        start_time = time.time()
        df1 = df[list(i)]
        dfpct = np.log1p(df1.pct_change())
        sdd = dfpct.std()
        sda = sdd * np.sqrt(250)
        var = dfpct.var()
        cov_matrix = dfpct.cov()
        dfer = df1.resample('Y').last().pct_change()
        er = dfer.mean()

        p_ret = []
        p_vol = []
        p_weights = []
        num_p = 1000
        for portfolio in range(num_p):
            n = len(i)
            weights = np.random.rand(n)
            weights /=  weights.sum()
            p_weights.append(weights)
            returns = np.dot(weights, er)
            p_ret.append(returns)
            p_var = cov_matrix.mul(weights, axis=0).mul(weights, axis=1).sum()
            p_sda = np.sqrt(p_var)*np.sqrt(250)
            p_vol.append(p_sda)

        data = {'Returns': p_ret, 'Volatility': p_vol}
        for counter, symbol in enumerate(dfpct.columns.tolist()):
            data[symbol+ ' Weight'] = [w[counter] for w in p_weights]

        portfolios = pd.DataFrame(data)
        rf = 0.02
        optimaln = ((portfolios['Returns']-rf)/portfolios['Volatility']).idxmax()
        optimal = portfolios.loc[optimaln].T 
        optimal1I = optimal.index.tolist()
        dictoptimal = portfolios.loc[optimal1I].to_dict(orient='records')
        list2.append(dictoptimal)

        end_time = time.time()
        print("total time taken this loop: ", end_time - start_time)
    except Exception as e:
        print('Didnt work', e)
        num.append('didnt work')
        continue

print(len(num))
fin = pd.DataFrame.from_dict(list2)
time2 = time.time()
print('program took ' + str(time2-time1) + ' Seconds')
</code></pre>

<p>This can probably be improved further, but at this point it is hard to follow what exactly your code does. In order to improve this, put independent things into their own function, which allows you to give them a clear name and <a href="https://www.python.org/dev/peps/pep-0257/" rel="nofollow noreferrer">docstring</a>, explaining what the function does. You should probably have at least a <code>optimal_portfolio</code> and a <code>random_weights</code> function.</p>

<p>Together with this you should also try to come up with more meaningful names than <code>sdd</code> and <code>sda</code> or <code>optimal</code>, <code>optimal1</code>, <code>optimal1I</code> and <code>dictoptimal</code>. <a href="https://martinfowler.com/bliki/TwoHardThings.html" rel="nofollow noreferrer">Naming things is hard, though</a>.</p>

<p>Once you have done that, you should <a href="https://docs.python.org/3/library/profile.html" rel="nofollow noreferrer">profile your code</a> to determine which function takes the longest to identify where you need to focus your attention next. The easiest way to do that is to run your script as <code>python -m cProfile -s cumtime script.py</code>.</p>
    </div>