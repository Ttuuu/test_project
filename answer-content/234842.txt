<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I really liked @JollyJoker's answer but it was not written in Pythonic enough format for my taste. I added some changes that take his core logic and improve upon it:</p>

<pre class="lang-py prettyprint-override"><code>from itertools import combinations

class Solution:
    def threeSum(self, nums: List[int]) -&gt; List[List[int]]:
        positive = sorted(n for n in nums if n &gt; 0)
        posSet = set(positive)
        negative = sorted(n for n in nums if n &lt; 0)
        negSet = set(negative)
        zeroes = nums.count(0)
        valid = {(a, b, -a-b) for (a,b) in combinations(positive, 2) if -a-b in negSet}
        valid.update((a, b, -a-b) for (a,b) in combinations(negative, 2) if -a-b in posSet)
        if zeroes &gt; 0:
            valid.update((-a, 0, a) for a in positive if -a in negSet)
            if zeroes &gt; 2:
                valid.add((0, 0, 0))
        return valid
</code></pre>

<p>Results:</p>

<p><em>Runtime: 340 ms, faster than 98.68% of Python3 online submissions for 3Sum.</em></p>

<p><em>Memory Usage: 16.6 MB, less than 77.86% of Python3 online submissions for 3Sum.</em></p>
    </div>