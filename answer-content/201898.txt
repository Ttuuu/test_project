<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>As stated by Gareth Rees, you need to reuse as much as the moving parts as possible. I do however not agree with his approach of flattening the board. Here is an alternative approach</p>

<p>You need to split up the code in more parts. One obvious part to split of is the solving of a single row, independent whether it is up, down, right or left.</p>

<h1>Solve a single row</h1>

<p>The way I approach this is with a slightly modified <code>pairwise</code> itertools recipe</p>

<pre><code>def pairwise_longest(iterable):
    """
    s -&gt; (s0,s1), (s1,s2), (s2, s3), ..., (s_n, None)

    adapted from https://docs.python.org/3/library/itertools.html#itertools-recipes
    """
    a, b = tee(iterable)
    next(b, None)
    return zip_longest(a, b)

def solve_row(row):
    merged = False
    row = filter(None, row)
    for a, b in pairwise_longest(row):
        if not merged and a == b:
            yield a + b
            merged = True
        elif not merged and a != b:
            yield a
        else:
            merged = False
</code></pre>

<p>This first filters out all 0's, so it doesn't need to do any fancy indexing, just pairwise iteration over the actual tiles</p>

<p>The functioning of this code can be easily tested independently</p>

<pre><code>assert tuple(solve_row([0,0,0,1])) == (1,)
assert tuple(solve_row([0,1,0,1])) == (2,)
assert tuple(solve_row([0,1,2,1])) == (1, 2, 1,)
assert tuple(solve_row([1,1,2,1])) == (2, 2, 1,)
assert tuple(solve_row([1,1,1,1])) == (2, 2,)
assert tuple(solve_row([1,1,1,0])) == (2, 1,)
assert tuple(solve_row([1,0,1,0])) == (2,)
</code></pre>

<p>This should be complemented by a function that pads the row with 0's</p>

<pre><code>def solve_pad(row):
    l = len(row)
    solved = tuple(solve_row(row))
    return solved + (0,) * (l-len(solved))

assert solve_pad([0,0,0,1]) == (1,0,0,0,)
assert solve_pad([0,1,0,1]) == (2,0,0,0,)
assert solve_pad([0,1,2,1]) == (1,2,1,0,)
assert solve_pad([1,1,2,1]) == (2,2,1,0,)
assert solve_pad([1,1,1,1]) == (2,2,0,0,)
assert solve_pad([1,1,1,0]) == (2,1,0,0,)
assert solve_pad([1,0,1,0]) == (2,0,0,0,)
</code></pre>

<p>In reality, this function will also need to be able to do the same in reverse</p>

<pre><code>def solve_pad(row, reverse=False):
    l = len(row)
    if reverse:
        row = reversed(row)
    solved = tuple(solve_row(row))
    if reverse:
        solved = tuple(reversed(solved))
        return (0,) * (l-len(solved)) + solved
    return solved + (0,) * (l-len(solved))
</code></pre>

<p>There are probably nicer ways to express the reversion, but this one works and I understand it without much problems.</p>

<pre><code>assert solve_pad([0,0,0,1], reverse=True) == (0,0,0,1,)
assert solve_pad([0,1,0,1], reverse=True) == (0,0,0,2,)
assert solve_pad([0,1,2,1], reverse=True) == (0,1,2,1,)
assert solve_pad([1,1,2,1], reverse=True) == (0,2,2,1,)
assert solve_pad([1,1,1,1], reverse=True) == (0,0,2,2,)
assert solve_pad([1,1,1,0], reverse=True) == (0,0,1,2,)
assert solve_pad([1,0,1,0], reverse=True) == (0,0,0,2,)
</code></pre>

<h1>The board</h1>

<p>To represent the whole board, I would use a <code>Board</code> class. Depending of the movement direction, you need to iterate over it row or column wise, and should be able to construct a new board when given columns or rows</p>

<pre><code>class Board:
    def __init__(self, situation):
        self.situation = tuple(map(tuple, situation))

    @classmethod
    def from_rows(cls, rows):
        return cls(rows)

    @classmethod
    def from_columns(cls, columns):
        rows = zip(*columns)
        return cls(rows)

    @property
    def shape(self):
        return len(self.situation), len(self.situation[0])

    @property
    def rows(self):
        yield from self.situation

    @property    
    def columns(self):
        yield from zip(*self.situation)

    def __repr__(self):
        def format_row(row, pad=5, sep='|'):
            return sep.join(f'{item:^{pad}}' for item in row)
        return '\n'.join(map(format_row, self.rows))
</code></pre>

<p>Adding the <code>__repr__</code> makes debugging a lot easier</p>

<pre><code>board = [
    [2,2,0,0],
    [2,2,0,0],
    [2,4,0,0],
    [2,4,0,8],
]
board = Board(board)
</code></pre>

<blockquote>
<pre><code>  2  |  2  |  0  |  0  
  2  |  2  |  0  |  0  
  2  |  4  |  0  |  0  
  2  |  4  |  0  |  8  
</code></pre>
</blockquote>

<h1>Move</h1>

<p>Moving the pieces then becomes rather easy: you need to see whether to use rows or columns, and which function to generate the solution board accordingly, and select whether to reverse the merge or not, and then just call the <code>solve_pad</code> method on each row or column</p>

<pre><code>def move(self, direction):
    if direction in {MoveDirection.LEFT, MoveDirection.RIGHT}:
        items = self.rows 
        func = Board.from_rows
    else:
        items = self.columns
        func = Board.from_columns
    reverse = direction in {MoveDirection.RIGHT, MoveDirection.DOWN}
    items_solved = (solve_pad(item, reverse=reverse) for item in items)
    return func(items_solved)
</code></pre>

<p>and can be used like this:</p>

<pre><code>board.move(MoveDirection.UP)
</code></pre>

<blockquote>
<pre><code>  4  |  4  |  0  |  8  
  4  |  8  |  0  |  0  
  0  |  0  |  0  |  0  
  0  |  0  |  0  |  0
</code></pre>
</blockquote>

<pre><code>board.move(MoveDirection.DOWN)
</code></pre>

<blockquote>
<pre><code>  0  |  0  |  0  |  0  
  0  |  0  |  0  |  0  
  4  |  4  |  0  |  0  
  4  |  8  |  0  |  8
</code></pre>
</blockquote>

<pre><code>board.move(MoveDirection.RIGHT)
</code></pre>

<blockquote>
<pre><code>  0  |  0  |  0  |  4  
  0  |  0  |  0  |  4  
  0  |  0  |  2  |  4  
  0  |  2  |  4  |  8
</code></pre>
</blockquote>

<pre><code>board.move(MoveDirection.LEFT)
</code></pre>

<blockquote>
<pre><code>  4  |  0  |  0  |  0  
  4  |  0  |  0  |  0  
  2  |  4  |  0  |  0  
  2  |  4  |  8  |  0
</code></pre>
</blockquote>

<p>This approach works for a rectangular and can be easily expanded to a hexagonal board if you find a decent name for the 3rd axis</p>
    </div>