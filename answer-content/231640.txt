<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Nice job using ENUMS üëç</p>

<p>I'm going to try to do the Code Review top-down.</p>

<p><strong>Don't shorten variable names</strong></p>

<p>The compiler doesn't care how long names are. I'm guessing the 'hm' in <code>hmInARowToWin</code> stands for 'howMany'. So  it should be changed to <code>howManyInARowToIn</code> or <code>amountInARowToWin</code>.</p>

<p><strong>Use 'final' keyword when possible</strong></p>

<p>Your scanner object is never going to change. So you could delcare it as final. You should then change the name to <code>SC</code> or <code>SCANNER</code>.</p>

<p><strong>Enums should begin with an upper-case letter and be UpperCamelCase</strong></p>

<p>This is just a naming standard. Java has common naming practices you should be following.</p>

<p>So <code>player</code> should be <code>Player</code>, <code>pole</code> should be <code>Pole</code>.</p>

<p><strong>Avoid magic Strings / magic numbers</strong></p>

<p>Lots to be said on this topic, tbh you can google 'magic strings' or 'avoid magic numbers' for more information but it boils down to maintainability. It's easier to make changes if the static String are declared as a class variable:</p>

<pre><code>private static final String WELCOME_MESSAGE = "Hi, lets play tik tak toe!";
</code></pre>

<p>It's also easier to spot typos if you only have one place to look (Developers are known for typos and generally magic Strings are things the users will see, which are very important to be correct).</p>

<p><strong>Use backslash as an escape character</strong></p>

<p>Change from: <code>"Pick x.length and y.length of area(print"+'"'+"x y"+'"'+"): "</code></p>

<p>to: <code>"Pick x.length and y.length of area(print\"x y\"): "</code></p>

<p><strong>Use plenty of methods to breakup your code into pieces</strong></p>

<p>This is a skill that takes some practice. Again a lot could be said here, but basically you want each of your methods to be doing only 1 thing.</p>

<p>Getting input from the user &amp; doing something with it should be put into a method.</p>

<p>Validating the input should be a method</p>

<p><strong>Use white space between conditions to increase readability</strong></p>

<p>Change:
<code>(Integer.parseInt(turn[0])&lt;=0||Integer.parseInt(turn[1])&lt;=0)</code></p>

<p>To:
<code>(Integer.parseInt(turn[0]) &lt;= 0 || Integer.parseInt(turn[1]) &lt;= 0)</code></p>

<p>Same goes for additions, make sure a whitespace comes before &amp; after the <code>+</code>.</p>

<p><strong>Use camel case for method names &amp; ensure method names make sense</strong></p>

<p><code>fillAreaNOTHING</code> should be renamed to <code>fillAreaNothing</code>. Then it should be renamed to <code>fillAreaWithNothing</code>, the javadoc would explain <code>nothing</code> is the class variable and/or use `{@link Pole#NOTHING} in the java doc.</p>

<p><strong>Use class variables strategically. Variables should be within the smallest scope possible</strong></p>

<p>Putting all variables at class level because it's slightly easier creates spaghetti üçù code and makes it really hard to follow. It also makes it harder / impossible to write methods that only do 1 thing.</p>

<p>Your <code>fillAreaWithNothing</code> method should take <code>area</code> as a parameter.</p>

<p><strong>Create Classes. Java is an Object Oriented language after all</strong></p>

<p>Your main method should be calling some kind of TicTacToe class. You'll also want to keep the non-related stuff out of that class, such as checking if a String is a number or not.</p>
    </div>