<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>A functional approach to breaking out of a loop is to use <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some" rel="nofollow noreferrer"><code>Array.some()</code></a>. It would be different than using <code>.reduce()</code> because the return value wouldn't be the resulting array, so the array would still need to be declared before the call to <code>.some()</code>. Then return a truthy value (i.e. when <code>result.length &gt; 3</code>) to break out of the loop. This means it isn't a one-liner, but still a functional approach.</p>

<p>With functional approaches, there is often going to be performance loss due to the fact that a function is being called for each item in the list. <a href="https://jsperf.com/while-vs-some/1" rel="nofollow noreferrer">Here is a modified jsperf</a>. Also, I would recommend going through <a href="http://reactivex.io/learnrx/" rel="nofollow noreferrer">these functional exercises</a> if you haven't already.</p>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>getPromise().then((json) =&gt; {
  let result = [];

  json.data.some((item) =&gt; {
    if (item.profile_path) {
      result.push(item);
    }
    return result.length &gt; 3; //break out of the loop once 4 results are found
  });
  console.log(' result: ', result);
});

//simulate getting JSON data
function getPromise() {
  return new Promise((resolve, reject) =&gt; {
    window.setTimeout(() =&gt; resolve(getJson()), 1200)
  });
}
function getJson() {
  return {
    data: Array(20).fill(0).map((value, index) =&gt;{
      let item = {
        'id': 'id' + index
      };
      if (index % 3 == 0) {
        item.profile_path = '/path' + index;
      }
      return item;
    })
  };
}</code></pre>
</div>
</div>

    </div>