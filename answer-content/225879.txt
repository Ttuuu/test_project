<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Good luck in your learning, very nice start, i was much poorer in my begining! Viewing your code i suggest a structural change besides what @RootTwo and @dariosicily told.</p>

<h2>The Spirit of  Functions</h2>

<p>Functions should be called with relevent paramenters. Currently when calling <code>draw_triangle</code> we need to pass the <code>a_turtle</code> parameter</p>

<pre><code>draw_triangle(a_turtle, length)
</code></pre>

<p>but it would be nicer if we could call it by</p>

<pre><code>draw_triangle(length)
</code></pre>

<p>directly.</p>

<h2>Nicer Functions With Global Variables</h2>

<p>By defining and using global variables, the above is achievable.</p>

<pre class="lang-py prettyprint-override"><code>brent = turtle.Turtle()
window = turtle.Screen()
</code></pre>

<p>Then modifying functions using the <code>global</code> keyword. The <code>global</code> keyword allows you to use global variables within functions</p>

<pre class="lang-py prettyprint-override"><code>def draw_polygon(length, sides):
    global brent
    for i in range(sides):
        brent.forward(length)
        brent.right(360 / sides)
</code></pre>

<p>The <code>draw</code> function</p>

<pre class="lang-py prettyprint-override"><code>def draw():
    global brent, window
    window.bgcolor("black")
    brent.shape("turtle")
    ...
</code></pre>

<p>Then no need to each time add the <code>a_turtle</code> parameter</p>

<h2>The Class Approach</h2>

<p>But, global variables might be a sign you need an OOP approach</p>

<p>This is an OOP approched by changing the above</p>

<pre class="lang-py prettyprint-override"><code>class Sierpinski:
    def __init__(self):
        self.brent = turtle.Turtle()
        self.window = turtle.Screen()

    def draw_polygon(self, length, sides):
        brent = self.brent
        for i in range(sides):
            brent.forward(length)
            brent.right(360 / sides)

    def draw_triangle(self, length):
        self.draw_polygon(length, 3)

    def draw_fractal_triangle(self, length, depth):
        brent = self.brent
        if (depth == 1):
            self.draw_triangle(length)
        else:
            for i in range(1, 4):
                self.draw_fractal_triangle(length/2, depth-1)
                brent.forward(length)
                brent.right(120)

    def draw(self):
        brent = self.brent
        window = self.window

        window.bgcolor("black")
        brent.shape("turtle")
        brent.color("yellow")
        length = 200
        brent.backward(length/2)
        self.draw_fractal_triangle(length, 5)
        window.exitonclick()
</code></pre>

<p>then to draw,</p>

<pre><code>s = Sierpinski()
s.draw()
</code></pre>

<p>you could also implement</p>

<pre class="lang-py prettyprint-override"><code>    def draw_polygon(self, length, sides):
        brent = self.brent
        for i in range(sides):
            brent.forward(length)
            brent.right(360 / sides)
</code></pre>

<p>as</p>

<pre class="lang-py prettyprint-override"><code>    def draw_polygon(self, length, sides):
        for i in range(sides):
            self.brent.forward(length)
            self.brent.right(360 / sides)
</code></pre>

<h2>More control</h2>

<p>Specifying the length and depth in the constructor might allow you to have more control, by changing values at one place, you modify it all</p>

<pre><code>class Sierpinski:
    def __init__(self):
        self.brent = turtle.Turtle()
        self.window = turtle.Screen()
        self.length = 200
        self.depth = 5
</code></pre>

<p>modifying in <code>draw</code></p>

<pre class="lang-py prettyprint-override"><code>    def draw(self):
        brent = self.brent
        window = self.window
        length = self.length
        depth = self.depth

        window.bgcolor("black")
        brent.shape("turtle")
        brent.color("yellow")

        brent.backward(length/2)
        self.draw_fractal_triangle(length, depth)
        window.exitonclick()
</code></pre>

<h2>Parameters</h2>

<p>You can let users pass their own value by passing the values as parameters</p>

<pre class="lang-py prettyprint-override"><code>class Sierpinski:
    def __init__(self, length, depth):
        self.brent = turtle.Turtle()
        self.window = turtle.Screen()
        self.length = length
        self.depth = depth
</code></pre>

<p>usage:</p>

<pre class="lang-py prettyprint-override"><code>s = Sierpinski(200, 5)
s.draw()
</code></pre>

<p>One last improvement could be adding parameters to <code>draw</code> instead of the class itself.</p>

<h2>Stack Overflow advice</h2>

<p>When writing codes,</p>

<p>leave a line after the last ``` symbol to prevent this</p>

<p><a href="https://i.stack.imgur.com/jrhcw.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/jrhcw.png" alt="code bug"></a></p>
    </div>