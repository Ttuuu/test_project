<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You can put the different parts of the building in a list and then iterate through this list, using the values in the list.</p>

<p>I would propose this structure:</p>

<pre><code>parts = [
    # x0  y0  z0    x1  y1  z1    block id          meta data  
    (( 1,  0,  1), (19,  4, 19), (block.STONE_BRICK, 0)), # Main structure
    (( 2,  1,  2), (18,  3,  5), (block.AIR        , 0)), # Hollowing out main structure interior
    # ... the other parts
]
</code></pre>

<p>You can then use this loop to build the parts:</p>

<pre><code>for (x0, y0, z0), (x1, y1, z1), (block, meta) in parts:
    mc.setBlocks(p.x + x0, p.y + y0, p.z + z0,
                 p.x + x1, p.y + y1, p.z + z1,
                 block, meta)
</code></pre>

<p>I would also advice you to follow a few style suggestions from <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">PEP8</a>, in this case I specifically mean that you should add empty lines after the imports:</p>

<pre><code>import mcpi.minecraft as minecraft
import mcpi.block as block

mc = minecraft.Minecraft.create()
p = mc.player.getTilePos()
</code></pre>

<p>and that you should always add spaces around operators and after <code>#</code>:</p>

<pre><code>mc.setBlocks(p.x+1, p.y, p.z+1 #...
</code></pre>

<p>to:</p>

<pre><code>mc.setBlocks(p.x + 1, p.y, p.z + 1 # ...
</code></pre>

<p>This simply eases the reading process.</p>
    </div>