<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I would recommend a process like this:</p>

<p>Code: (<a href="https://3v4l.org/RA6WL" rel="nofollow noreferrer">Demo</a>)</p>

<pre><code>$string1 = "abacadeee";
$string2 = "aabbccddee";

$counts2 = count_chars($string2, 1);

$tally = 0;
foreach (array_intersect_key(count_chars($string1, 1), $counts2) as $charcode1 =&gt; $count1) {
    $tally += min($counts2[$charcode1], $count1);
}
echo $tally;
</code></pre>

<p><code>count_chars()</code> lends itself beautifully to this task, so using array functions onward is a sensible choice.</p>

<p>It is important to try to minimize iterations and not perform any useless iterations.  By calling <code>array_intersect_key()</code> on the two <code>count_chars()</code> results, the <code>foreach()</code> loop is only going to iterate elements with keys which are shared between the two arrays.  In doing this, you don't need to check which array is smaller (which is otherwise how you would choose which array to iterate).</p>

<p><code>$tally</code> is incremented by the lesser of the two counts for each char.</p>

<p>p.s. calling <code>chr()</code> is irrelevant to your objective.</p>
    </div>