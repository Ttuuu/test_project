<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>A couple (basic) points:</p>
<h2>Validation of user input</h2>
<p><strong>Exception handling</strong> is not the way to go here. Exception handlers should be used to handle <em>unexpected</em> conditions. Since you are handling user input, it is expected that the user may enter invalid values so you should avoid exceptions rather than having to handle them (which is more expensive).</p>
<p>There are different ways of validating user input. To determine if a string is a number you have an <a href="https://stackoverflow.com/a/894271/6843158">example</a> on SO:</p>
<pre><code>var isNumeric = int.TryParse("123", out int n);
</code></pre>
<p>(you have many more options)</p>
<h2>Handling questions</h2>
<p>Not very fond of:</p>
<pre><code>if (Answer == "Yes" || Answer == "yes" || Answer == "Yep" || Answer == "yep" || Answer == "Correct" || Answer == "correct" || Answer == "True" || Answer == "true")
</code></pre>
<p>not only because your line is too long but too many possibilities = ambiguity and <strong>confusion</strong>. This is not user-friendly. A console application should minimize the number of <strong>keystrokes</strong> required to interact with the program. So if the answer is yes or no, then it should be enough to answer <kbd>Y</kbd> or <kbd>N</kbd>. To read a single character from the console you can use <code>Console.ReadKey().KeyChar</code>. I suggest you have a look at <a href="https://codereview.stackexchange.com/a/245207/219060">this recent post of mine</a> for suggestions about ergonomics.</p>
<h2>Case-insensitive response</h2>
<p>Don't do this:</p>
<pre><code>if (Answer2 == "Name" || Answer2 == "name" || Answer2 == "My name" || Answer2 == "my name" || Answer2 == "My Name" || Answer2 == "The name" || Answer2 == "The Name" || Answer2 == "the name")
</code></pre>
<p>Convert the response to lowercase (String.ToLower), then check if the answer is 'name'.</p>
<h2>String interpolation</h2>
<p>Maybe I am influenced by F-strings in Python but instead of concatenating variables like this you can do string interpolation:</p>
<pre><code>Console.Write("Ok, so your name is " + Name + " And you are " + Age + " Years old? ");
</code></pre>
<p>could be:</p>
<pre><code>string str = $"Ok, so your name is {Name} And you are {Age} Years old?";
Console.WriteLine(str);
</code></pre>
<p>This is not a problem here. But there are situations where interpolation could improve readability, at least you are aware of this option.</p>
<h2>Break up the code</h2>
<p>I would break up the code in small functions. This code is too long and does many different things. It is a bit boring to read and there is lots of scrolling required to find an offending line. Breaking up the code in dedicated functions makes it easier to identify the portion of code responsible for something.</p>
<p>The other goal would be to simplify the structure of your program. The more you <strong>nest control blocks</strong> (if, while etc), the more it is susceptible to logic errors. And it's harder to follow the execution stream.</p>
<p>For example checking for minimum age could be a separate function that returns a boolean value. If it returns false, then you can branch out early.</p>
<p><strong>Number validation</strong> should be made a function too. This is to avoid <strong>repetitive code</strong> and better separate functionality.</p>
<p>If you keep adding new functionality at some point the code will become unmanageable. Maybe you still have a good grasp on it but when you revisit it in 6 months ?</p>
<h2>Console formatting</h2>
<p>In your code you regularly switch the foreground color of the console:</p>
<pre><code>Console.ForegroundColor = ConsoleColor.Red;
...
Console.ForegroundColor = ConsoleColor.Black;
</code></pre>
<p>I would write a small function to print messages, with a parameter indicating the severity (default = normal).
Red for errors, Black for normal messages.
And if you want to customize the colors, there will be only one function to change instead of doing search &amp; replace over the whole code.</p>
<p>You'll make the code more flexible, less repetitive and reduce the number of lines of code. There is lots of repetition at present.</p>
<h2>Misc</h2>
<ul>
<li>Most imports are unneeded. Normally the only one you need here is <code>using System;</code> and maybe Threading but I am not convinced it is useful</li>
<li>Numbers should be constrained within a certain range. Normally you will want positive numbers only and they should make sense. Age of 1000 is not a realistic answer and it should be declined.</li>
<li>You have lots of sleeps, I don't believe they bring any added value. They just slow down the user. This is because you sometimes clear the screen afterward but then the user may not have the time to see their mistake if they entered something wrong.</li>
<li>If the user enters an invalid value it would be good to be more explicit, for example say: expecting a number between 1 and 100. Printing "Please try again" is not very helpful. It is frustrating when a program or a web form rejects your input (for example a password) but doesn't tell you why and leaves you guessing.</li>
</ul>
    </div>