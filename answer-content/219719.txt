<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>A quick search for "python tail call optimization" results in <a href="https://stackoverflow.com/a/18506625">this SO answer</a> which has a PyPI package, <a href="https://pypi.org/project/tco/" rel="nofollow noreferrer"><code>tco</code></a>. Converting your code to return lists rather than generators should be all you need.</p>

<blockquote>
  <p>recursion is the only way to do looping in a logic programming language</p>
</blockquote>

<p>This is wrong.</p>

<p>If you want it to stay as a generator, then you'll have to manually handle the stack. The following doesn't account for order so if you need that then you'll have to figure that out yourself.</p>

<pre><code>def evaluate_and(and_clauses, binds={}):
    stack = [(clauses, binds)]
    while stack:
        and_clauses, binds = stack.pop()
        if and_clauses == []:
            yield binds
        else:
            head, *tail = and_clauses
            possible = evaluate(head, binds)
            for p in possible:
                stack.append((tail, p))
</code></pre>
    </div>