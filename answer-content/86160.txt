<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>For this task I suggest to use as much as possible standard PHP functions, since in complex cases they've been proved to be more reliable than a simple regexp or a 'manual' explode/implode solution.
Unfortunately, there seems not to be a standard PHP 'reverse' function for parse_url(), except for those posted by users on parse_url official PHP manual page <a href="http://php.net/manual/en/function.parse-url.php" rel="nofollow">http://php.net/manual/en/function.parse-url.php</a>.</p>

<p>So, my solution is a blend of 3 standard PHP functions (parse_url + parse_str + http_build_query) + 1 user contributed function found on PHP manual page (unparse_url):</p>

<pre><code>function removeParam($key, $sourceURL) { // Removes parameter '$key' from '$sourceURL' query string (if present)
    $url = parse_url($sourceURL);
    if (!isset($url['query'])) return $sourceURL;
    parse_str($url['query'], $query_data);
    if (!isset($query_data[$key])) return $sourceURL;
    unset($query_data[$key]);
    $url['query'] = http_build_query($query_data);
    return unparse_url($url);
}

function unparse_url($parsed_url) { 
  $scheme   = isset($parsed_url['scheme']) ? $parsed_url['scheme'] . '://' : ''; 
  $host     = isset($parsed_url['host']) ? $parsed_url['host'] : ''; 
  $port     = isset($parsed_url['port']) ? ':' . $parsed_url['port'] : ''; 
  $user     = isset($parsed_url['user']) ? $parsed_url['user'] : ''; 
  $pass     = isset($parsed_url['pass']) ? ':' . $parsed_url['pass']  : ''; 
  $pass     = ($user || $pass) ? "$pass@" : ''; 
  $path     = isset($parsed_url['path']) ? $parsed_url['path'] : ''; 
  $query    = isset($parsed_url['query']) ? '?' . $parsed_url['query'] : ''; 
  $fragment = isset($parsed_url['fragment']) ? '#' . $parsed_url['fragment'] : ''; 
  return "$scheme$user$pass$host$port$path$query$fragment"; 
}
</code></pre>
    </div>