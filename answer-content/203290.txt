<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Hm, ok ... spending time on requirements is a step one can not jump over. </p>

<p><code>std::apply</code> is a generic solution to a function call to the unknown function with zero or more arguments of "anything".  (and yes 'ruds' was also right about <code>std::pair</code> not being handled by <code>is_tuple_like</code>) ... </p>

<p>One can possibly write some utilities to aid particular use cases.  Like (for example) passing arrays, or init lists and a such. Which again will result in transformations to tuples not changes of the <code>std::apply</code>. </p>

<p>As a quick sketch maybe something like this (not a flawless c++) :</p>

<pre><code>  struct apply_helper final {
    // static assert if F is Callable
    // might go here

       // apply the native array 
       template&lt; typename F, typename T, size_t N&gt;
       auto operator () 
        ( F invocable_, const T(&amp;array_)[N]) ;

       // apply the init list
       template &lt;typename F, typename T&gt;
       auto operator () 
        ( F invocable_, std::initializer_list&lt;T&gt; &amp;&amp; initlist_ ) ;

        // and so on ..
  } ;
</code></pre>

<p>HTH </p>
    </div>