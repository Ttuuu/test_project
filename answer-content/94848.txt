<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your code is properly formatted (except for one superfluous space), however, the lengthy expression</p>

<pre><code>((a == b + 1 || a == b - 1) || (a == c + 1 || a == c - 1)) &amp;&amp; ((b == c + 1 || b == c - 1)) 
|| ((b == c + 1 || b == c - 1) || (a == b + 1 || a == b - 1)) &amp;&amp; (a == c + 1 || a == c - 1)
</code></pre>

<p>is pretty hard to read. The best solution is to use either sorting or something smart as <a href="https://codereview.stackexchange.com/a/94838/14363">200_success</a> or <a href="https://codereview.stackexchange.com/q/94826/14363">rolfl</a> proposed. I try an advice for the case that no such solution is available.</p>

<hr>

<p>Note that you're doing something like</p>

<pre><code>if (x) {
     return false;
} else if (y) {
     return true;
}
return false;
</code></pre>

<p>This is actually always sort of wrong as you can do</p>

<pre><code>if (x) {
     return false;
} else {
     return y;
}
</code></pre>

<p>instead. You can also leave out the "else", but that's matter of style.</p>

<hr>

<p>As your lengthy condition is a disjunction and the action is trivial, you can simply split it like</p>

<pre><code>if (x) {
     return false;
} else if (y1) {
     return true;
} else if (y2) {
     return true;
}
return false;
</code></pre>

<p>Here, I avoided my above simplification to preserve symmetry.</p>

<hr>

<p>Let's look at the part denoted as <code>y1</code>, i.e.,</p>

<pre><code>((a == b + 1 || a == b - 1) || (a == c + 1 || a == c - 1)) &amp;&amp; ((b == c + 1 || b == c - 1)) 
</code></pre>

<p>now. The first part states that the distance of <code>a</code> and <code>b</code> is <code>1</code>, in other words <code>Math.abs(a - b) == 1</code>. You can use it to make your conditions slightly less repetitive.</p>

<hr>

<p>More importantly, observe the same expression appear later again, define some local variables to keep it short (with or without <code>abs</code>; the idea is independent):</p>

<pre><code>if (a == b || b == c || a == c) {
    return false;
}

boolean ab = a == b + 1 || a == b - 1;
boolean bc = b == c + 1 || b == c - 1;
boolean ac = a == c + 1 || a == c - 1;

return (ab | ac) &amp; bc || (bc | ab) &amp; ac;
</code></pre>

<p>My above naming is not the best, however, I consider it acceptable as the scope is very limited. Still, because of the asymmetry, it's a bit hard to tell if it's right.</p>

<p>You could rewrite it as</p>

<pre><code>return ab &amp; bc | ab &amp; ac | bc &amp; ac;
</code></pre>

<hr>

<p>Another simplification is possible by observing that shifting all value by the same distance doesn't change anything. So you could do something like</p>

<pre><code>a -= c;
b -= c;
c -= c; // i.e., c = 0
</code></pre>

<p>and simplify the other expression a bit. This isn't worth it here. By using the arithmetic, you make yourself susceptible to overflow just like <a href="https://codereview.stackexchange.com/a/94831/14363">here</a>.</p>

<hr>

<p>To add something funny, I propose this</p>

<pre><code>public static boolean consecutive(int a, int b, int c) {
    return 2 ==
        + (Math.abs(a - (long) b) == 1 ? 1 : 0)
        + (Math.abs(b - (long) c) == 1 ? 1 : 0)
        + (Math.abs(a - (long) c) == 1 ? 1 : 0);
}
</code></pre>

<p>It works simply by requiring exactly two of the distances to equal one. The case to long prevents overflow (and may be left out if you don't mind wrapping around <code>Integer.MAX_VALUE</code>).</p>
    </div>