<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This is a wonderful implementation! Very nice getting boilerplate viewmodel code out of the way. That being said, I have a few tiny bits I'd change in <code>ViewModelBase&lt;T&gt;</code> (and the appropriate changes to <code>IViewModel&lt;T&gt;</code> too) as such (I've commented my changes):</p>

<pre><code>/// &lt;summary&gt;
/// Base class to derive ViewModel implementations that encapsulate an Entity type.
/// &lt;/summary&gt;
/// &lt;typeparam name="T"&gt;The entity type.&lt;/typeparam&gt;
public abstract class ViewModelBase&lt;T&gt; : IViewModel&lt;T&gt; where T : class
{
    // Was protected, now private and accessed by property below.
    private readonly T entity;

    // I like my members read-only as much as possible.
    private readonly IDictionary&lt;string, Action&gt; propertyNotifications;

    /// &lt;summary&gt;
    /// Initializes a new instance of the &lt;see cref="ViewModelBase{T}"/&gt; class.
    /// &lt;/summary&gt;
    /// &lt;param name="entity"&gt;An instance of the entity type to encapsulate.&lt;/param&gt;
    protected ViewModelBase(T entity)
    {
        this.entity = entity;

        // Removed the ReflectTypeProperties() method and consolidated here so the member can be read-only.
        // Loads the names of all properties of the most derived type into a
        // Dictionary where each entry (property name) points to a delegate that
        // calls NotifyPropertyChanged() for the corresponding property.
        this.propertyNotifications = this.GetType().GetProperties()
            .Where(property =&gt; property.CanWrite)
            .Select(property =&gt; new KeyValuePair&lt;string, Action&gt;(
                property.Name,
                () =&gt; this.NotifyPropertyChanged(this, new PropertyChangedEventArgs(property.Name))))
            .ToDictionary(kvp =&gt; kvp.Key, kv =&gt; kv.Value);
    }

    /// &lt;summary&gt;
    /// Occurs when a property value changes.
    /// &lt;/summary&gt;
    public event PropertyChangedEventHandler PropertyChanged;

    // public property removes need for protected member and ToEntity() method.
    public T Entity
    {
        get
        {
            return this.entity;
        }
    }

    /// &lt;summary&gt;
    /// Notifies listener that the value of the specified property has changed.
    /// &lt;/summary&gt;
    /// &lt;param name="propertyName"&gt;The name of the property to notify about.&lt;/param&gt;
    public void NotifyPropertyChanged(string propertyName)
    {
        Action notify;

        // Removed need for extra null check as TryGetValue returns a bool. If successful, it should always have a non-null value per constructor.
        if (this.propertyNotifications.TryGetValue(propertyName, out notify))
        {
            notify();
        }
    }

    /// &lt;summary&gt;
    /// Notifies listener that the value of the specified property has changed.
    /// &lt;/summary&gt;
    /// &lt;typeparam name="TProperty"&gt;The type of the property (inferred).&lt;/typeparam&gt;
    /// &lt;param name="property"&gt;An expression that selects a property, like &lt;c&gt;() =&gt; PropertyName&lt;/c&gt;.&lt;/param&gt;
    public void NotifyPropertyChanged&lt;TProperty&gt;(Expression&lt;Func&lt;TProperty&gt;&gt; property)
    {
        this.NotifyPropertyChanged(PropertyName(property));
    }

    /// &lt;summary&gt;
    /// Returns the name of a property in a LINQ Expression such as '&lt;code&gt;() =&gt; Property&lt;/code&gt;'.
    /// Used for strongly-typed INotifyPropertyChanged implementation.
    /// &lt;/summary&gt;
    /// &lt;returns&gt;The name of a property in a LINQ Expression&lt;/returns&gt;
    protected static string PropertyName&lt;TProperty&gt;(Expression&lt;Func&lt;TProperty&gt;&gt; property)
    {
        // Combination and simplification of statements here.
        var body = property.Body as UnaryExpression;
        var memberExpression = (MemberExpression)(body == null ? property.Body : body.Operand);

        return memberExpression.Member.Name;
    }

    /// &lt;summary&gt;
    /// Notifies listeners when the property has changed.
    /// &lt;/summary&gt;
    /// &lt;param name="sender"&gt;The sender.&lt;/param&gt;
    /// &lt;param name="e"&gt;The &lt;see cref="PropertyChangedEventArgs"/&gt; instance containing the event data.&lt;/param&gt;
    private void NotifyPropertyChanged(object sender, PropertyChangedEventArgs e)
    {
        // This is for thread safety, in case the event subscribers are removed between statements.
        var propertyChanged = this.PropertyChanged;

        if (propertyChanged != null)
        {
            propertyChanged(sender, e);
        }
    }
}
</code></pre>
    </div>