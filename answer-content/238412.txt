<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Some initial comments:</p>

<ul>
<li>Good use of string slicing to extract each field, though ideally we should not need to make a copy of the string. I propose a different way of doing this below.</li>
<li><code>while len(temp):</code> works, but a more Pythonic way of writing this would be <code>while temp:</code> because <a href="https://docs.python.org/3/library/stdtypes.html#truth-value-testing" rel="nofollow noreferrer">any object can be tested for a truth value in Python, and non-empty strings evaluate to true</a>.</li>
<li>A popular new way of string interpolation introduced in Python 3.6 is the <a href="https://docs.python.org/3/reference/lexical_analysis.html#formatted-string-literals" rel="nofollow noreferrer">f-string</a>. So instead of <code>'tag: {}'.format(temp[0:2])</code> you could do <code>f'tag: {temp[0:2]}'</code> which I personally find much easier to read.</li>
</ul>

<p>To avoid copying the string <code>tlv</code> we can instead work with an iterator over the characters in the string, i.e. <code>iter(tlv)</code>. Then we can use <code>itertools</code>, a nice built-in library for working with iterators, specifically <a href="https://docs.python.org/3/library/itertools.html#itertools.islice" rel="nofollow noreferrer"><code>itertools.islice</code></a> to extract/consume chunks of arbitrary length from the iterator:</p>

<pre class="lang-python prettyprint-override"><code>from itertools import islice

TAG_FIELD_LENGTH = 2
LENGTH_FIELD_LENGTH = 3

def tlv_parser(tlv_string):
    it = iter(tlv_string)
    while tag := "".join(islice(it, TAG_FIELD_LENGTH)):
        length = int("".join(islice(it, LENGTH_FIELD_LENGTH)))
        value = "".join(islice(it, length))
        yield (tag, length, value)
</code></pre>

<p>Notes on the above:</p>

<ul>
<li>The strategy of parsing is very similar to yours, with the only difference being that we're working with an iterator of characters, and we're consuming from the iterator chunk by chunk so we don't need to calculate indices for field boundaries.</li>
<li>We're concatenating the characters in each iterator to a string with <code>"".join(...)</code>, i.e. <a href="https://docs.python.org/3/library/stdtypes.html#str.join" rel="nofollow noreferrer">str.join</a>.</li>
<li><code>:=</code> is the <a href="https://docs.python.org/3/whatsnew/3.8.html#assignment-expressions" rel="nofollow noreferrer">"walrus operator"</a> (introduced in Python 3.8) that binds values to variables as part of a larger expression, so we're binding the value of <code>"".join(islice(it, TAG_FIELD_LENGTH))</code> to <code>tag</code> and at the same time testing its truth value.</li>
<li>The <code>yield</code> keyword makes <code>tlv_parser</code> a <a href="https://docs.python.org/3/glossary.html#term-generator" rel="nofollow noreferrer">generator</a> of 3-tuples of (tag, length, value).</li>
</ul>

<p>Example usage:</p>

<pre class="lang-python prettyprint-override"><code>&gt;&gt;&gt; tlv = "01011Lorem ipsum02014dolor sit amet03027consectetur adipiscing elit"

&gt;&gt;&gt; for t in tlv_parser(tlv):
...     print(t)
... 
('01', 11, 'Lorem ipsum')
('02', 14, 'dolor sit amet')
('03', 27, 'consectetur adipiscing elit')

&gt;&gt;&gt; for tag, length, value in tlv_parser(tlv):
...     print(f"tag: {tag}")
...     print(f"length: {length}")
...     print(f"value: {value!r}\n")
... 
tag: 01
length: 11
value: 'Lorem ipsum'

tag: 02
length: 14
value: 'dolor sit amet'

tag: 03
length: 27
value: 'consectetur adipiscing elit'

</code></pre>
    </div>