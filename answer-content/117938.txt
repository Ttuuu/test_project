<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You're following good style conventions, that's a good sign. A lot of people don't do this consistently. (Note I'm not sure if you're a beginner, you said this was your first <em>game</em> but that was all). You do occasionally let lines run too long or have the wrong spacing. It's best if you read the <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow">PEP0008</a>, Python's official style guide. I have some general notes from reading through your code, but I've definitely missed things to be improved. On pep8online you can post your whole code in and get a breakdown of every part of your code that it finds in violation of PEP rules. It's not perfect, but will reveal some good rules for you to follow with tons of examples. I still recommend reading PEP0008 when you can.</p>

<p>You lay out colour constants at the start, but then you don't always use them. For instance, in <code>main_menu</code>, why use </p>

<pre><code>screen.fill((0,0,0))
</code></pre>

<p>and not</p>

<pre><code>screen.fill(BLACK)
</code></pre>

<p>At the risk of stating the obvious, constants are better to use as they're more readable to understand, and easier to change. If you decide that you want to adjust your colour palette to make the game look blue tinted, you could do that easily if all colours are set by your constant values.</p>

<p>In <code>draw_shield_bar</code> you use an <code>if</code> statement to ensure that <code>pct</code> is always 0 at the lowest. An alternative is to use <code>max</code>, which will return the maximum of values passed to it. ie. if you pass <code>max(pct, 0)</code> then it returns <code>pct</code> if it's 0 or higher, but otherwise will return 0. Your mileage may vary on which is more readable but I prefer:</p>

<pre><code>pct = max(pct, 0)
</code></pre>

<p>I presume <code>pct</code> is percent, but it's not a clear name. Try to avoid such shortened names, they usually just add confusion. A clear full word makes your code a lot more readable, and shaving those characters doesn't really get you much.</p>

<p>Also you declare <code>BAR_HEIGHT</code> and <code>BAR_LENGTH</code> locally in the function but they're named as if they're constants, with all uppercase letters. You should either make them constants at the top level, alongside your other constants like the colours that will eventually be in <code>constants.py</code> or just declare them as normal values that happen to always be the same. ie. <code>length = 100</code>. I suggest the former, as long as you can name them clearly.</p>

<p>In <code>draw_lives</code>, you calculate <code>img_rect.x</code> by using <code>30</code>. But since 30 isn't a variable, it's not at all clear what it corresponds to. This is known as a magic number, because the reason behind it is unknown to the reader. These should be avoided, instead you should have a named constant like <code>LIFE_SPACING</code> or something more appropriate so that it's much easier to follow what's happening.</p>

<p>Still on constants, you may like to use something called a Class constant. When you declare a class, you usually set its attributes in <code>__init__</code>, but you can also set constant attributes above <code>__init__</code>, in the class definition. Like this:</p>

<pre><code>class Explosion(pygame.sprite.Sprite):

    FRAME_RATE = 75

    def __init__(self, center, size):
        ...
</code></pre>

<p>This makes it easier to see that <code>FRAME_RATE</code> is constant across all <code>Explosion</code>s. It can still be accessed with <code>self.Explosion</code>, and can be additionally accessed with <code>Explosion.FRAME_RATE</code>, which can be useful when you want to get the value from outside a class instance context.</p>
    </div>