<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><code>extern crate argparse;</code> 2018 Rust edition doesn't require this, <a href="https://doc.rust-lang.org/stable/edition-guide/rust-2018/module-system/path-clarity.html?highlight=EXTERN#use-paths" rel="nofollow noreferrer">see</a>.</p>

<hr>

<pre class="lang-rust prettyprint-override"><code>return State {
    fizz: false,
    buzz: false,
    count: count,
    message: String::from(""),
}
</code></pre>

<p>Here <code>return</code> is not idiomatic and you can omit <code>count:</code>, more info <a href="https://rust-lang.github.io/rust-clippy/master/index.html#redundant_field_names" rel="nofollow noreferrer">here</a> and <a href="https://rust-lang.github.io/rust-clippy/master/index.html#needless_return" rel="nofollow noreferrer">here</a>.</p>

<p>Same thing <code>Game { state: State::new(count), limit: limit }</code>. Also, this time you did omit the return keyword, choice your style but you should be consistent.</p>

<hr>

<pre class="lang-rust prettyprint-override"><code>self.state.fizz = false;

if self.state.count % 3 == 0 {
    self.state.fizz = true;
    self.state.message.push_str("fizz");
}
</code></pre>

<p>This is also odd prefer use else branch:</p>

<pre class="lang-rust prettyprint-override"><code>self.state.fizz = if self.state.count % 3 == 0 {
    self.state.message.push_str("fizz");
    true
}
else {
    false
}; 
</code></pre>

<hr>

<p><code>self.state.message = String::from("");</code> maybe prefer use <code>clean()</code> to reuse previous allocate memory.</p>

<hr>

<pre class="lang-rust prettyprint-override"><code>if self.state.message.is_empty() {
    self.state.message = self.state.count.to_string();
} else if let Some(r) = self.state.message.get_mut(0..1) {
    r.make_ascii_uppercase();
}
</code></pre>

<p>As you already linked <a href="https://stackoverflow.com/a/38406885/7076153">it</a>, but I think the best is to avoid situation where you need to capitalized first letter. That could be done using the fact that <code>n % 3 == 0</code> and <code>n % 5 == 0</code> is only true for <code>n % 15</code> so you could add a if condition in your algorithm to remove this issue.</p>

<hr>

<pre class="lang-rust prettyprint-override"><code>if self.state.count != self.limit {
    if self.state.count &lt; self.limit {
        self.state.count += 1;
    } else {
        self.state.count -= 1;
    }
</code></pre>

<p>You just reinvent <a href="https://doc.rust-lang.org/std/ops/struct.Range.html" rel="nofollow noreferrer">Range</a> feature, there is a much better way to do this in rust, see end example.</p>

<hr>

<p><code>Some(self.state.clone())</code>, you could return a <code>&amp;str</code>, see <a href="https://stackoverflow.com/a/30423124/7076153">this</a> answer for how to do it.</p>

<hr>

<p>I have not much to say about <code>argparse</code>.</p>

<hr>

<p><code>let mut begin: u32 = 1;</code>, <code>let mut end: u32 = 100;</code>, <code>let game: Game = Game::new(Some(begin), Some(end));</code>, this is not useful <em>let</em> rust infer your variable type in general.</p>

<hr>

<p>Also, a general critic about your algorithm, your <code>State</code> is odd, there is no point to keep it in your <code>Game</code> iterator. The only thing you need to keep is <code>count</code>, and State neither use <code>count</code> <code>fizz</code> or <code>buzz</code>, you only use the string. So State is basically just a String and contains <code>count</code> that should belong to <code>Game</code> and two useless variable that you don't use. See my end example to see a better way to manage it.</p>

<hr>

<p>The following is an example of what you could have do, removing your strange algorithm but trying to keep your way.</p>

<pre class="lang-rust prettyprint-override"><code>use argparse::{ArgumentParser, Store, StoreTrue};

#[derive(Debug)]
enum State {
    Fizz,
    Buzz,
    FizzBuzz,
    None(u32),
}

use std::fmt;

impl fmt::Display for State {
    fn fmt(&amp;self, f: &amp;mut fmt::Formatter) -&gt; fmt::Result {
        match self {
            State::Fizz =&gt; write!(f, "Fizz"),
            State::Buzz =&gt; write!(f, "Buzz"),
            State::FizzBuzz =&gt; write!(f, "FizzBuzz"),
            State::None(n) =&gt; write!(f, "{}", n),
        }
    }
}

struct Game&lt;I&gt; {
    inner: I,
}

use std::iter::IntoIterator;

impl&lt;I&gt; Game&lt;I&gt;
where
    I: Iterator,
{
    fn new&lt;U&gt;(i: U) -&gt; Self
    where
        U: IntoIterator&lt;IntoIter = I, Item = I::Item&gt;,
    {
        Game {
            inner: i.into_iter(),
        }
    }
}

impl&lt;I&gt; Iterator for Game&lt;I&gt;
where
    I: Iterator&lt;Item = u32&gt;,
{
    type Item = State;

    fn next(&amp;mut self) -&gt; Option&lt;State&gt; {
        let n = self.inner.next()?;

        let state = if n % 15 == 0 {
            State::FizzBuzz
        } else if n % 3 == 0 {
            State::Fizz
        } else if n % 5 == 0 {
            State::Buzz
        } else {
            State::None(n)
        };

        Some(state)
    }
}

fn main() {
    let mut begin = 1;
    let mut end = 100;
    let mut verbose = false;

    {
        let mut ap = ArgumentParser::new();
        ap.set_description("Iterator based Fizzbuzz example writen in Rust");

        ap.refer(&amp;mut begin)
            .add_option(&amp;["--begin", "--start"], Store, "Where iteration begins");

        ap.refer(&amp;mut end)
            .add_option(&amp;["--end", "--stop"], Store, "Where iteration ends");

        ap.refer(&amp;mut verbose)
            .add_option(&amp;["-v", "--verbose"], StoreTrue, "How _noisy_ to be");

        ap.parse_args_or_exit();
    }

    if verbose {
        println!("begin -&gt; {}", begin);
        println!("end -&gt; {}", end);
    }

    let game = Game::new(begin..end);
    for state in game {
        println!("{}", state);
    }
}
</code></pre>
    </div>