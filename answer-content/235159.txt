<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Your situation</h2>
<p>Use closes the resource at the end of the block (lambda).<br>
This means that the stream is closed before returning it.</p>
<h2>The problem with reading lines</h2>
<p>The file needs to be closed once you have read the needed lines.<br>
The stream could close the file once the stream last item is reached.<br>
The problem with this approach is that functions like <code>limit</code>, <code>take</code>, <code>splititerator</code> etc. are making it possible that the last item is never reached.<br>
Therefor, you can do two things.
The first option is to let the caller close the file or sequence/stream/whatever you return.</p>
<p>The second option is to close inside your function, but then you need to do all the reading inside the function, so before you return from the function.</p>
<h2>Options</h2>
<p>You can read everything immediately by storing everything in a list using <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.io/java.io.-file/read-lines.html" rel="nofollow noreferrer">readlines</a>.
(This means you read the whole file into memory, which means you should not do this for huge, huge, huge files, you almost always can ignore this warning).</p>
<pre><code>fun readLines(path: String): List&lt;String&gt; = try{
    Paths.get(path).toFile().readLines()
} catch(ex: Exception) {
    ex.printStackTrace()
    emptyList&lt;String&gt;()
}
</code></pre>
<p>The other approaches work by moving the code you would normally do outside the function inside the function.</p>
<p>For example the <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.io/java.io.-file/for-each-line.html" rel="nofollow noreferrer">forEachLine</a>:</p>
<pre><code>fun forEachLine(path: String, action: (String)-&gt;Unit){
    try{
        Paths.get(path).toFile().forEachLine(action)
    } catch(ex: Exception) {
        ex.printStackTrace()
    }
}
</code></pre>
<p>With that function you could rewrite</p>
<pre><code>val t = readLines("somePath")
    .filter{ it.startsWith("ok:") }
t.forEach{ println(it) }
t.close()
</code></pre>
<p>with</p>
<pre><code>forEachLine("somePath"){
    if(it.startsWith("ok:")
        println(it)
}
</code></pre>
<p>If you have functions that operates on a sequence of strings, or want more than a simple forEach, you can access the sequence itself by using  <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.io/java.io.-reader/use-lines.html" rel="nofollow noreferrer">useLines</a>, but again move the reading inside the function:</p>
<pre><code>fun useLines(path: String, action: (Sequence&lt;String&gt;)-&gt;Unit){
    try{
        Paths.get(path).toFile().useLines(action)
    } catch(ex: Exception) {
        ex.printStackTrace()
    }
}
</code></pre>
<p>Can replace the former example with:</p>
<pre><code>useLines("somePath"){ lines-&gt;
    lines.filter{ it.startsWith("ok") }
       .forEach{ println("it") }
} 
</code></pre>
<p>NOTE: this function is not for extracting or returning the sequence.<br>
all the functions needs to be done in the lambda,until you come across a terminal operation, an operation that no longer returns a sequence.</p>
<p>NOTE: sequence is the Kotlin-version of streams with <a href="https://www.reddit.com/r/Kotlin/comments/edboro/jake_wharton_on_kotlin_vs_java_debate/fbprkaa?utm_source=share&amp;utm_medium=web2x" rel="nofollow noreferrer">lots of benefits</a>.</p>
<h1>Is closing required</h1>
<p>from the <a href="https://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html" rel="nofollow noreferrer">javadoc</a></p>
<blockquote>
<p>"...Generally, only streams whose source is an IO channel (such as those returned by Files.lines(Path, Charset)) will require closing ..."</p>
</blockquote>
<p>so yes.</p>
<h3>huge files</h3>
<p>You should not use readlines on huge files.<br>
What is a huge file?</p>
<p>The bible has around 31,000 lines which can have 20 bytes reference, so 620,000 bytes or roughly 0,5 mb.<br>
The bible has 3,000,000 characters which is roughly 12 mb.<br>
Acording to <a href="https://stackoverflow.com/a/15369204/3193776">this post</a>, Android has a memory limit from around 15mb (in the worst case).<br>
This means that reading the bible in it entirely would theoretically be OK.<br>
So, untill you run into problems, this is nothing to worry about.</p>
<h1>Edit:</h1>
<p>I don't completely know how flatmap in Java excactly works at the moment.<br>
There was a bug that flatmap was not lazy.
This means that calling <code>fileNames.flatMap(::readLines)</code> with the readLines from your code was calculating the complete list before moving on: <a href="https://stackoverflow.com/a/29230939/3193776">link</a>.<br>
This bug is fixed, so I don't know what it does at the moment.<br>
If it still works the same way, it always closes the file for you, but it does so because it always parses the complete file.</p>
<p>In every case, if you are returning the Java-stream, calling close on the returning Stream is enough to close the file.
With sequences, this is not possible, as sequences are not closeable (They also don't know about AutoCloseable/Closeable).</p>
    </div>