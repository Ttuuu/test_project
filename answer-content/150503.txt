<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>General</h2>

<p>In many places, your formatting and alignment are inconsistent. You also have typos in your comments and even a couple of typos in the <code>#endif</code> portion of the header include guards. All of this needs to be cleaned up because it looks sloppy and makes the code harder to read.</p>

<p>Adopt a consistent style—whatever it may be—and be disciplined about using it. Use a consistent number of blank lines between functions (unless you are separating them for some reason, and then use a consistent multiple of your normal number of blank lines), be consistent in whether or not you put spaces around operators, be consistent in your indentation, etc.</p>

<p>I also recommend that you outdent the accessibility specifiers (<em>e.g.</em>, <code>public:</code>, <code>private:</code>, etc.) in a class definition, and that you begin your comments with a leading space for readability. I would further recommend that you <em>always</em> use braces around <code>if</code>/<code>else</code> blocks, even if you only have one statement there at the moment. When you come along later and add code, it is too easy to forget to add the braces and <a href="https://www.imperialviolet.org/2014/02/22/applebug.html" rel="nofollow noreferrer">introduce a bug</a>.</p>

<p>Otherwise, you have a nice solid start here. You appear to have a lot of the basic idioms down, including include guards, virtual functions, const-qualified member functions, and so on. However, you are not using <a href="https://stackoverflow.com/questions/926752/why-should-i-prefer-to-use-member-initialization-list">member initialization lists</a>, and I believe that you should. It has no effect on efficiency in this case, since all of your members are <a href="https://stackoverflow.com/questions/146452/what-are-pod-types-in-c">POD types</a>, but it is nevertheless a good habit to get into.</p>

<p>Aside from these general comments, I have some further suggestions for improvements that I will present for each class implementation to hopefully make them more manageable. Even if I do not call something out again the next time that it appears, please try to carry knowledge forward!</p>

<h2>Point class</h2>

<ul>
<li><p>As mentioned above, this class definition needs to be better formatted. This first time, I'll give an example of what I think good formatting would look like:</p>

<pre><code>#ifndef Point_h
#define Point_h

class Point
{
public:
    Point();
    Point(int x, int y);

    int getX() const;
    int getY() const;

    void setX(int x);
    void setY(int y);

    void print() const;

private:
    int x, y;
};

#endif
</code></pre>

<p>Notice how I've standardized on the number of blank lines, outdented my accessibility specifiers, broke member functions up into logical groups, and so forth. This is significantly more readable.</p>

<p>The code file needs the same treatment applied. Also, I recommend placing documentation comments <em>above</em> the function definition, rather than out to the side. This makes things look much neater, especially where you have functions with multiple parameters (or parameters with long names). But consider whether you really need comments for these functions at all! It should be obvious by looking at the name that <code>Point::Point</code> is a constructor for class <code>Point</code>, so you can omit that. And <em>"function update X"</em> barely even makes sense. If you're going to write documentation comments, make them meaningful and professional looking. If they just restate things that are obvious from the name of the function, leave them off!</p></li>
<li><p>If you're going to use your current error-handling strategy, you should report them via <code>std::cerr</code>, rather than <code>std::cout</code>. But I don't think this is the best approach. In C++, you will generally want to <em>throw an exception</em> when you are passed an invalid parameter that you do not know how to deal with. The caller can then catch this exception and handle it however they want, including displaying an error message. This better preserves a division of responsibility: what if I want to use your <code>Point</code> class in a GUI or remote application where the output from <code>std::cerr</code> is not visible? If you used an exception-based error-handling strategy, I could catch the exception and present the error to the user however I wanted.</p>

<pre><code>void Point::setX(int x)
{
    if (x &lt; 0)
    {
        throw std::out_of_range("Invalid value for x");
    }
    else
    {
        this-&gt;x = x;
    }
}
</code></pre>

<p>If you didn't want to introduce the complexity of exceptions and feel that you can assign reasonable "default"/"fallback" values, then you could simply assert upon receiving an invalid parameter. This would allow the caller to fix their bug in a debugging build, without introducing any error-reporting overhead in release builds. This is more similar to what you have now:</p>

<pre><code>void Point::setX(int x)
{
    if (x &lt; 0)
    {
        assert(!"Invalid value for x; setting to default.");
        this-&gt;x = 0;
    }
    else
    {
        this-&gt;x = x;
    }
}
</code></pre></li>
<li><p>In keeping with the "separation of concerns" argument presented above, I would <em>not</em> have a <code>print</code> method as part of my <code>Point</code> class. A <code>Point</code> object should not know how to "print" itself. That's far beyond its level of abstraction. If you wanted to facilitate printing a <code>Point</code> object, you could simply define a <code>toString</code> method:</p>

<pre><code> // Obtain a formatted string that contains the x and y coordinates of this point.
 std::string Point::toString() const
 {
     std::stringstream ss;
     ss &lt;&lt; "x: " &lt;&lt; this-&gt;x
        &lt;&lt; " "
        &lt;&lt; "y: " &lt;&lt; this-&gt;y;
     return ss.str();
 }
</code></pre>

<p>Of course, since this method doesn't actually require access to any of the private members of <code>Point</code>, it would enhance encapsulation to make it a <a href="https://stackoverflow.com/questions/21028773/free-function-versus-member-function">free function</a>. By doing so, you could even make it work analogously to <a href="http://en.cppreference.com/w/cpp/string/basic_string/to_string" rel="nofollow noreferrer">the standard library's <code>to_string</code> family of functions</a>:</p>

<pre><code> std::string to_string(const Point&amp; pt)
 {
     std::stringstream ss;
     ss &lt;&lt; "x: " &lt;&lt; this-&gt;x
        &lt;&lt; " "
        &lt;&lt; "y: " &lt;&lt; this-&gt;y;
     return ss.str();
 }
</code></pre></li>
<li><p>I hesitate to mention this because it's somewhat advanced and probably not something you should think about when writing code, but I recently refactored usage of my own <code>Point</code> class to always pass <code>Point</code> objects by value, instead of by const-reference. The reason is that it is a very simple class with only two member variables. Most compilers will generate more efficient code if such types are passed by value, rather than by const-reference (which is usually implemented behind-the-scenes as by-pointer). This doesn't affect correctness, of course, and if you have no idea what I'm talking about, you can just ignore it. When in doubt, especially as a beginner, it is reasonable to always pass class types by const-reference, <a href="https://stackoverflow.com/questions/24543330/when-is-const-reference-better-than-pass-by-value-in-c11">unless you need a local copy</a>.</p></li>
</ul>

<h2>Shape class</h2>

<p>This class looks pretty good, aside from the formatting inconsistencies. I would personally put the destructor's declaration above the other member functions, since I like to have my member functions appear in the semi-standard order of: constructors, destructors, accessors, mutators, other member functions, overloaded operators, member variables.</p>

<h2>Circle class</h2>

<ul>
<li>The constructor's <code>l1</code> parameter is <em>very</em> poorly named. I have no idea what <code>l1</code> means. I <em>assume</em> it is the center point of the circle, but the parameter certainly doesn't make that clear. Rename it to something like <code>center</code> or <code>ptCenter</code>.</li>
<li>Your member variables are also very poorly named. It isn't 1970—there is no reason for single-character variable names. I personally like to append <code>m_</code> prefixes to my member variables, but I know not everyone likes that. Whether you use a prefix or not, definitely rename them to <code>radius</code> and <code>center</code>.</li>
<li><p>Constants should <strong>never</strong> be defined using macros in C++! Instead, you should declare a <code>static const</code> object instead, or a <code>const</code> object <a href="https://stackoverflow.com/questions/4422507/superiority-of-unnamed-namespace-over-static">in an unnamed namespace</a>.</p>

<p>Also note that the POSIX-compliant standard libraries provide an <code>M_PI</code> constant in the <code>&lt;cmath&gt;</code> header. You should check and see if this is available in your implementation, and if so, just use it. If it isn't, or you want to make sure that you are maximally compatible, you will need to define your own constant. But I recommend choosing a different name in order to avoid potential conflicts.</p></li>
</ul>

<h2>Polygon class</h2>

<ul>
<li><p>Don't leave stale, commented-out function definitions in the header file. This is completely fine while you're writing and debugging the code, but remove it before you check in the final results. It's just sloppy and confusing.</p>

<p>And if you are going to leave them, and have a very good documentation-related reason for doing so, you need to improve the associated comment beyond "no need". I <em>hope</em> they're not needed, as they're commented out! The more important question to be answering is <em>why</em> they are not needed.</p></li>
<li><p>There is no reason to include the <code>Shape.h</code> header in your <code>Polygon.cpp</code> file. You've already included it in the header, and the implementation does not depend on <code>Shape</code> <em>per se</em>. It requires only <code>Polygon</code> and <code>Point</code> (and, of course, <code>cmath</code>).</p></li>
<li><p>In C++, the standard library functions are always in the <code>std</code> namespace. The <code>c</code>-prefixed headers guarantee this, and the language standard says that they do not even have to provide these functions in the global namespace. Therefore, instead of <code>sqrt</code>, you should write <code>std::sqrt</code>.</p></li>
<li><p>It is a good habit to get into to declare all variables that you possibly can <code>const</code>. This rarely helps the optimizer, but it can help to prevent hard-to-find bugs. I'm of the opinion that <code>const</code> should have been the <em>default</em>, and we should have needed to use a <code>mutable</code> keyword to declare a non-const variable.</p></li>
<li><p>Also, the way you repeat yourself inside of the <code>getDist</code> function is confusing and hard to maintain. Introduce a separate variable to hold intermediate results. There is absolutely no cost at run-time for doing so; the optimizer eats stuff like this for lunch.</p></li>
<li><p>Finally, the <code>getDist</code> function shouldn't even <em>be</em> a member function of the <code>Polygon</code> class! Logically, the distance between two points has absolutely nothing to do with a polygon, and technically, the implementation of that function does not depend on any members of a <code>Polygon</code> class. Make it a free function instead, probably prototyped in the <code>Point</code> class's header, since it is logically related only to the <code>Point</code> type.</p>

<pre><code>double getDist(const Point &amp;p1, const Point &amp;p2)
{
    const double distX        = (p1.getX() - p2.getX();
    const double distXSquared = (distX * distX);
    const double distY        = (p1.getY() - p2.getY());
    const double distYSquared = (distY * distY);
    const double distXY       = std::sqrt(distXSquared + distYSquared);
    return distXY;
}
</code></pre></li>
</ul>

<h2>Rectangle class</h2>

<p>Again, the names you've chosen for your parameters here are <em>lousy</em>. I guess <code>l</code> and <code>r</code> are supposed to stand for "left" and "right", but that is anything but obvious if I'm looking only at the header and can't see the implementation. Furthermore, there's no penalty for long descriptive parameter names, so <em>use them</em>! Rename these <code>topLeft</code> and <code>bottomRight</code>. (Parameters can have the same name as member variables inside of the constructor, and if the clash bothered you anyway, you could use my strategy of prefixing member variables with something like <code>m_</code>.)</p>

<p>Also, the constructor should be using a member initialization list, as discussed above. Here, it actually <em>does</em> affect efficiency; your current code initializes the member variables twice. Note, though, that you can't (easily) initialize the <code>length</code> and <code>width</code> member variables in an initialization list, so you'll have to do it in the function body. There is no cost to this, though, because they are plain-old-ints.</p>

<p>Finally, inside the body of the function, you should be calling the constructor for the temporary <code>Point</code> object as you initialize it, rather than making a dummy copy and resetting both of its members.</p>

<p>Taking all of this into account, I would rewrite the constructor to look like this:</p>

<pre><code>Rectangle::Rectangle(const Point &amp;topLeft, const Point &amp;bottomRight)
   : topLeft(topLeft)
   , bottomRight(bottomRight)
{
    const Point tempPoint(bottomRight.getX(), topLeft.getY());
    length = getDist(topLeft, tempPoint);     // remember, getDist is now a free function in Point.h!
    width  = getDist(tempPoint, bottomRight);
}
</code></pre>

<p><em>Personally</em>, I like to use the <code>virtual</code> keyword in all derived classes, too. The compiler doesn't care about this. If a function is marked <code>virtual</code> in a parent class, it is always and perpetually <code>virtual</code> in all derived classes. But I'm forgetful and can't always see the parent class's definition, so I like to include it as a reminder. In C++11, you can even use <a href="https://stackoverflow.com/questions/13880205/is-the-override-keyword-just-a-check-for-a-overriden-virtual-method">the override specifier</a> to prevent errors!</p>

<h2>Triangle class</h2>

<ul>
<li><p>Again, I would annotate both <code>getArea</code> and <code>getPerim</code> with <code>virtual</code> and <code>override</code>.</p></li>
<li><p>This constructor's parameter names are a <em>little</em> bit better, but mostly by accident. How about naming them <code>vertex1</code>, <code>vertex2</code>, and <code>vertex3</code>? You already know they are "points" based on the type name—the more interesting thing to communicate is what <em>kind</em> of points? Well, they are the three vertices of the triangle!</p>

<p>Even worse than poorly-chosen parameter names are <em>inconsistent</em> parameter names! The names used in the Triangle.cpp file are different from the names used in the Triangle.h file! Very confusing and bad practice.</p></li>
<li><p>Here, too, the constructor should use an initialization list.</p></li>
<li><p>Standardize on a language for comments! In general, since code is written in English, I think comments should be in English, too. But if you're going to write comments in your native language, at least be consistent and do so for <em>all</em> comments!</p></li>
<li><p>Only <em>declare</em> variables at the point of <em>initialization</em>. There are no limitations on when a variable declaration can be introduced within a block, so there's no reason to declare them all at the top of the function like you're writing in old-school K&amp;R C. This also allows you to make heavy use of <code>const</code>, like I mentioned earlier.</p></li>
</ul>

<p>Here's the way I would have written the code:</p>

<pre><code>Triangle::Triangle(const Point &amp;vertex1, const Point &amp;vertex2, const Point &amp;vertex3)
   : vertex1(vertex1)
   , vertex2(vertex2)
   , vertex3(vertex3)
   , edgeA(getDist(vertex1, vertex2))   // comment goes here, if you need one
   , edgeB(getDist(vertex2, vertex3))
   , edgeC(getDist(vertex1, vertex3))
{ }

/* virtual */ double Triangle::getArea() const override
{   
    const double temp = sqrt(( edgeA + edgeB + edgeC) *
                             ( edgeA + edgeB - edgeC) *
                             ( edgeA - edgeB + edgeC) *
                             (-edgeA + edgeB + edgeC));
    return (temp * 0.25);
}
</code></pre>

<h2>Usage/Main function</h2>

<ul>
<li><p>Arrange your <code>#include</code>s in logical order, in increasing order of dependencies, much like I've done in my review here. For example:</p>

<pre><code>#include &lt;Point.h&gt;
#include &lt;Shape.h&gt;       // depends on Point
#include &lt;Circle.h&gt;      // depends on Shape
#include &lt;Polygon.h&gt;     // depends on Shape
#include &lt;Rectangle.h&gt;   // depends on Polygon
#include &lt;Triangle.h&gt;    // depends on Polygon
#include &lt;iostream&gt;
</code></pre></li>
<li><p>Don't use raw pointers! This is C++, so use a smart pointer class, such as <code>std::unique_ptr</code>. This will automatically call <code>delete</code> and save you a lot of headaches.</p>

<pre><code>std::unique_ptr&lt;Shape&gt; pRectangle(new Rectangle(a, b));
std::unique_ptr&lt;Shape&gt; pTriangle(new Triangle(o, a, b));
std::unique_ptr&lt;Shape&gt; pCircle(new Circle(o, 1));
</code></pre>

<p>or, if you wanted an array:</p>

<pre><code>std::unique_ptr&lt;Shape&gt; shapes[] = { make_unique&lt;Rectangle&gt;(a, b),
                                    make_unique&lt;Triangle&gt;(o, a, b),
                                    make_unique&lt;Circle&gt;(o, 1),
                                  };
</code></pre>

<p>better yet:</p>

<pre><code>std::array&lt;std::unique_ptr&lt;Shape&gt;, 3&gt; shapes =
    {
        std::unique_ptr&lt;Shape&gt; { new Rectangle(a, b)   },
        std::unique_ptr&lt;Shape&gt; { new Triangle(o, a, b) },
        std::unique_ptr&lt;Shape&gt; { new Circle(o, 1)      },
    };
</code></pre></li>
</ul>
    </div>