<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Before any criticism, great job. This is mature-looking code.</p>

<p>Alright, now some criticism ;)</p>

<ul>
<li><p>Single-line <code>if</code> and <code>for</code> loops are not good style in Python: always break the body out into its own indented block, even if it's only a single line; for example:</p>

<pre><code>for argshort, arglong, desc, options in argslist:
    arg_parser.add_argument(argshort, arglong, help=desc, **options)
</code></pre></li>
<li><p>Add <a href="https://www.python.org/dev/peps/pep-0257/" rel="nofollow noreferrer">docstrings</a> to your functions, to document what they do and their inputs/outputs (I prefer the <a href="https://sphinxcontrib-napoleon.readthedocs.io/en/latest/example_google.html" rel="nofollow noreferrer">Google format</a>, but you're free to choose whatever works best for you):</p>

<pre><code>def get_file_ext(f):
    """Retrieves the file extension for a given file path

    Args:
        f (file): The filepath to get the extension of

    Returns:
        str: The lower-case extension of that file path
    """
    file_name, file_ext = os.path.splitext(f.name)
    return file_ext.lower()
</code></pre></li>
<li><p>There are a couple more built-ins you could use. For example, <code>get_file_ext(f)</code> could be replaced by <code>Path(f.name).suffix</code> (using <a href="https://docs.python.org/3/library/pathlib.html" rel="nofollow noreferrer"><code>pathlib</code></a>, if you're using an up-to-date Python)</p></li>
<li><p>Unless there's some other good reason, use <code>json.dump(open(...), data, ...)</code> and <code>json.load(open(...))</code> rather than reading/writing the file yourself, like <code>json.loads(open(...).read())</code>. This way, you never need to store the JSON text in memory, it can get saved/read to/from disk lazily by the parser. It's also just cleaner. (Also, you don't need 'wb' mode, just 'w', since JSON is text, not an arbitrary byte stream.)</p></li>
<li><p>When you do want to manually open a file, it's better practice to use it as a context manager, which will automatically close the file at the proper time:</p>

<pre><code>with open(...) as output_file:
    output_file.write(...)
</code></pre></li>
<li><p><a href="https://stackoverflow.com/questions/419163/what-does-if-name-main-do">Wrap the body of your script in a <code>__main__</code> block</a>:</p>

<pre><code>if __name__ == '__main__':
    for ext in [...]: ...
</code></pre>

<p>or </p>

<pre><code>def main():
    for ext in [...]: ...

if __name__ == '__main__':
    main()
</code></pre></li>
</ul>

<p>That's more the style that's popular and standard in the Python community. You're clearly familiar with good coding, though, and it shows in your style. Good job, and welcome to Python!</p>
    </div>