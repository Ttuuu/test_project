<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Great question,</p>

<p>I do not like your <code>rotate</code> function;</p>

<ul>
<li>While the nested ternary seems brilliant, it reveals a violation of DRY ( you could do this with one map because every negative <code>n</code> has a positive equivalent</li>
<li>An <code>Array</code> function should either change the current array or make a new array, your function could do either depending on whether a shift is necessary or not</li>
<li>Rotation really is achieved by taking a part of the string and putting it on the other end, since JavaScripts provides <code>splice</code> and <code>shift</code> I would go with something like <a href="https://stackoverflow.com/questions/1985260/javascript-array-rotate">this</a></li>
<li>Minor, but your indentation is off in this function and elsewhere, it disturbs the reading flow </li>
</ul>

<p>I do like that you modify the <code>prototype</code> of <code>Array</code>. Most reviewers would complain but I have found 3rd party libraries to have sufficient guards nowadays that is no longer a problem.</p>

<p>Inside <code>diff</code>:</p>

<ul>
<li>I see no good reason to declare <code>getBaseIndex</code> with <code>var</code>, even worse is that you declared it as an anonymous function. Naming your variables with <code>s</code> and <code>l</code> is not great, but <code>getBaseIndex</code> does not convey at all what the function actually does</li>
<li><code>match &amp;&amp; (fi = i); // match starts from this index</code> shows you know JavaScript, but really an <code>if</code> statement is what you should use here</li>
<li>Same here: <code>s[i] !== l[i] ? ++i : match = !match;</code></li>
<li>From a naming perspective, spend the effort to have well written variables. <code>bix</code>, <code>fis</code>, <code>fss</code>, etc. etc. are too hard to parse for the reader</li>
<li>The commenting however, is great. Otherwise I would probably have given up on this review</li>
<li><code>isThisLonger = true;</code> &lt;- that semicolon just made all declarations under it globals (use <a href="http://jshint.com/" rel="nofollow noreferrer">http://jshint.com/</a>)</li>
<li>I like the idea of matching largest matches first, not sure about rotating. If I was asked to fix a bug in this code, I would steal that smart key idea and rewrite the whole thing.</li>
</ul>

<p>I wrote an alternative, it works slightly different. (I like that your code recognizes the word fox, whereas my code goes too far in finding commonalities)
I think for an extra bonus, the code should go for both the largest match and the largest mismatch, whatever is largest should go forward. My code has some idiosyncracies, feel free to adopt or ignore (like using <code>~</code> with <code>indexOf</code> or not always using curly braces with <code>if</code> statements.)</p>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>//The idea is that we try to match the original string, 
//and then we keep on trying to match smaller and smaller strings
//If we try to match 'Attempt', we will match 'Attempt', 'Attemp' ,
//'ttempt', 'Attem', 'ttemp' etc. till 't' 
String.prototype.largestMatch = function largestMatch( otherString ){

  if( otherString.length &lt; this.length )
    return otherString.largestMatch( this );
  
  var matchingLength = otherString.length,
      possibleMatch, index;

  while( matchingLength ){
    index = 0;
    while( index + matchingLength &lt;= otherString.length ){
      possibleMatch = otherString.substr( index, matchingLength );
      if( ~this.indexOf( possibleMatch ) )
        return otherString.substr( index, matchingLength );
      index++;
    }  
    matchingLength--;
  }
  return '';
};

String.prototype.diff = function( newValue ){
  
  var largestMatch = this.largestMatch( newValue ),
      preNew, postNew, preOld, postOld;
  
  if(!largestMatch){
    return '&lt;span class = "deleted"&gt;' + this + '&lt;/span&gt;&lt;span class = "inserted"&gt;' + newValue + '&lt;/span&gt;';
  } else {
    preNew = newValue.substr(0, newValue.indexOf( largestMatch ) ); 
    preOld = this.substr(0, this.indexOf( largestMatch ) ); 
    postNew = newValue.substr( preNew.length + largestMatch.length );
    postOld = this.substr( preOld.length + largestMatch.length );
    console.log( { old: this.toString(), new : newValue , preOld: preOld, match: largestMatch, postOld: postOld, 
                  preNew: preNew, match2: largestMatch, postNew: postNew} );
    return preOld.diff( preNew ) + largestMatch + postOld.diff( postNew );
  }
};

textOld.oninput = function(e){textNew.innerText = this.value;};
textNew.onfocus = function(e){this.select();};
myButton.onclick = function(e){textdiff.innerHTML = textOld.value.diff(textNew.value);};</code></pre>
<pre class="snippet-code-css lang-css prettyprint-override"><code>.deleted  {background-color : LightPink;
           text-decoration  : line-through}
.inserted {background-color : PaleGreen}</code></pre>
<pre class="snippet-code-html lang-html prettyprint-override"><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta charset="utf-8"&gt;
  &lt;meta name="viewport" content="width=device-width"&gt;
  &lt;title&gt;JS Bin&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;

  &lt;div&gt;
  &lt;textarea id="textOld" placeholder="Please type something here" rows = "4" cols = "25"&gt;The quick brown fox jumps over the lazy dog&lt;/textarea&gt;
  &lt;textarea id="textNew" placeholder="Please edit the previous text here" rows = "4" cols = "25"&gt;The quick brown coyote jumps over the lazy dog&lt;/textarea&gt;
  &lt;button id = myButton style = "display:block"&gt; Click to get diff&lt;/button&gt;
  &lt;p id="textdiff"&gt;&lt;/p&gt;
&lt;/div&gt;
  
  
&lt;/body&gt;
&lt;/html&gt;</code></pre>
</div>
</div>

    </div>