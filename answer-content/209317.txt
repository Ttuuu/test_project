<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li>There's a <a href="https://github.com/JuliaCollections/DataStructures.jl/blob/master/src/circular_buffer.jl" rel="nofollow noreferrer"><code>CircularBuffer</code></a> type in <code>DataStructures</code>, which does pretty much the same.  Have a look at its code for some inspiration.  Or reuse it, if it fits your needs and you don't hesitate to add that dependency.</li>
<li>Regarding the point before, I'd especially recommend to implement the common interfaces, and probably <code>iterate</code> as well.  <code>remember!</code> makes sense semantically, but <code>push!</code> is the standard name for this functionality.  You could implement <code>remember!</code> in terms of <code>push!</code> and export both, or just use <code>push!</code> and mention it in the docs.</li>
<li><p>There isn't really a need to be so specific about types.  I'd just use</p>

<pre><code>struct Memory{T}
   max_size::UInt32
   experiences::Vector{T}
end
</code></pre>

<p>Nothing is lost by generalizing in this way, since you never use information about the content.  But who knows, maybe you later want switch to different types for experiences, eg. <code>StaticVector</code>s.</p></li>
<li><p>I would doubt whether using <code>UInt32</code> saves more than it complicates.  <code>Int</code> is pretty much standard for everything of this kind: lengths, indices, offsets, etc.</p></li>
<li>Depending on the sizes of your use case, it might be better to preallocate <code>experiences</code> as <code>Vector{T}(undef, max_size)</code> and use just indexing (and keeping track of the actual length), instead of <code>push!</code>ing until full -- see the <code>DataStructures</code> implementation.  If not, calling <code>sizehint!(experiences, max_size)</code> might be good, if you expect to always exhaust the full capacity.</li>
<li><p>Instead of providing <code>sample</code>, I'd recommend <a href="https://docs.julialang.org/en/v1.0/stdlib/Random/#Hooking-into-the-Random-API-1" rel="nofollow noreferrer">hooking into <code>rand</code></a>, thereby getting more methods for free.  In the simplest case, this just consists of defining </p>

<pre><code>Random.rand(rng::Random.AbstractRNG, s::Random.SamplerTrivial{Memory{T}}) where {T} = rand(rng, s[].experiences)
</code></pre>

<p>which gives you all variations: <code>rand(m)</code>, <code>rand(m, N)</code> (corresponging to your <code>sample</code>), <code>rand(rng, m)</code>,  etc.  Especially the form with a provided RNG is relevant if you want to write reproducible experiments.  The <code>rand!</code> methods seem not to work by default, but can be added easily if you need them.  (If you switch to a preallocation + indexing solution, you need to make sure to sample only from <code>@view experiences[1:length]</code>.)</p>

<p>And note that you can directly sample from an array <code>a</code> using <code>rand(a)</code>.</p></li>
</ul>
    </div>