<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Two big concerns on the actual password security side:</p>
<p>You're enforcing hard-to-remember-but-easy-to-crack passwords. (Obligatory XKCD: <a href="https://xkcd.com/936/" rel="nofollow noreferrer">Correct Horse Battery Staple</a>)</p>
<p>Rather, the <a href="https://pages.nist.gov/800-63-3/sp800-63b.html" rel="nofollow noreferrer">current guidance from the National Institute of Science and Technology</a>, the standards body responsible for people writing commercial software in the United States is:</p>
<blockquote>
<p><strong>5.1.1.1 Memorized Secret Authenticators</strong></p>
<p>Memorized secrets SHALL be at least 8 characters in length if chosen by the subscriber. Memorized secrets chosen randomly by the CSP or verifier SHALL be at least 6 characters in length and MAY be entirely numeric. If the CSP or verifier disallows a chosen memorized secret based on its appearance on a blacklist of compromised values, the subscriber SHALL be required to choose a different memorized secret. No other complexity requirements for memorized secrets SHOULD be imposed. A rationale for this is presented in Appendix A Strength of Memorized Secrets.</p>
</blockquote>
<p>You have the 8 character minimum limit right, but rather than making sure users supply lower case, capitals, numbers, and non-alphanumeric symbols, you should be making a call to a service that has a list of known insecure passwords.  I use the <a href="https://haveibeenpwned.com/API/v2#PwnedPasswords" rel="nofollow noreferrer">Pwnd Passwords API call</a> to the database made available by Troy Hunt. If you want to be truly paranoid, download the hash files and import them into a database yourself so that you can check them while knowing that no information about their password is leaving your server.</p>
<p>Which brings me to the second big concern:</p>
<p><strong>Never show the user their password</strong> (unless they explicitly ask for it <em>while</em> they're typing/pasting it in).</p>
<p>Even on your own test system that you're setting up in a server at your own home that will never serve traffic to real customers.</p>
<p>After all, if you're the only one who will touch it, you can always reset the password. And if there are customers on the server, you don't know if they're in a coffee shop and there's a malicious person standing over their shoulder.  There's a reason why every password bar only shows dots instead of the plaintext password. Respect that and respect your users' privacy.</p>
<p>And besides, if the user ever does forget their password, you should be using a password reset system, not implying that they should have recorded it somewhere.  (And when building the password reset system, follow the <a href="https://www.owasp.org/index.php/Forgot_Password_Cheat_Sheet" rel="nofollow noreferrer">guidelines laid out by OWASP.</a></p>
<p>Remember, it's not your password, it's theirs... and they're likely reusing that password for their banking site and the rest of their online presence. You don't <em>want</em> to be responsible for that information, so don't ever let anyone, including them, be able to access it in plaintext after they have sent it to your server.</p>
    </div>