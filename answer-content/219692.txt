<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ol>
<li><p>Using a <code>std::ostringstream</code> to concatenate strings is like using a DeathStar to kill a sparrow.</p></li>
<li><p>Don't use <code>std::string</code> for the stored message. Copying it is not guaranteed to never throw, and you only need a very small sliver of its capabilities anyway.<br>
A <code>std::shared_ptr&lt;const char[]&gt;</code> fits the bill much better, though even that is overkill.</p></li>
<li><p>Avoid using <code>std::string</code> at all, so you don't risk short-lived but costly dynamic allocations. Prefer <code>std::string_view</code> for the interface.</p></li>
<li><p><code>BaseException</code> seems to be purely an implementation-help, adding storing of an arbitrary exception-message on top of <code>std::exception</code>. That's fine, only a pitty it wasn't already in the base.</p></li>
<li><p>Still, marking the additions as <code>protected</code> doesn't make any sense, <code>message</code> should really be <code>private</code>, and why shouldn't the ctors be <code>public</code>?<br>
If the aim of that exercise is forbidding objects of most derived class <code>BaseException</code>, just make the ctor pure virtual:</p>

<pre><code>// Declaration in the class:
virtual ~BaseException() = 0;
// Definition in the header-file:
inline BaseException::~BaseException() = default;
</code></pre></li>
</ol>

<p>Applying that:</p>

<pre><code>template &lt;class... Ts&gt;
auto shared_message(Ts... ts)
-&gt; std::enable_if_t&lt;(std::is_same_v&lt;Ts, std::string_view&gt; ... &amp;&amp;),
        std::shared_ptr&lt;const char[]&gt;&gt; {
    auto r = std::make_shared_default_init&lt;char[]&gt;(1 + ... + ts.size());
    auto p = &amp;r[0];
    ((std::copy_n(&amp;ts[0], ts.size(), p), p += ts.size()), ...);
    *p = 0;
    return r;
}

template &lt;class... Ts&gt;
auto shared_message(Ts&amp;&amp;... ts)
-&gt; std::enable_if_t&lt;!(std::is_same_v&lt;std::decay_t&lt;Ts&gt;, std::string_view&gt; ... &amp;&amp;),
        decltype(shared_message(std::string_view{ts}...))&gt;
{ return shared_message(std::string_view{ts}...); }

class BaseException : std::exception {
    decltype(shared_message()) message;
public:
    const char* what() const noexcept final override
    { return &amp;message[0]; }
    virtual ~BaseException() = 0;
    template &lt;class... Ts, class = decltype(shared_message(std::declval&lt;Ts&amp;&gt;()...))&gt;
    BaseException(Ts&amp;&amp;... ts)
    : message(shared_message(ts...))
    {}
};

inline BaseException::~BaseException() = default;
</code></pre>
    </div>