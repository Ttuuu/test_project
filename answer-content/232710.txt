<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>@l0b0 is right for (1.). The <a href="https://docs.python.org/3/library/exceptions.html#BaseException" rel="nofollow noreferrer">docs</a> say to inherit from <code>Exception</code> instead:</p>

<blockquote>
  <p>The base class for all built-in exceptions. It is not meant to be directly inherited by user-defined classes (for that, use Exception)</p>
</blockquote>

<p>I've also never seen <code>__module__</code> used in that case, but if you like to output better, I guess it works fine.</p>

<hr>

<p><code>letter_code</code> can make use of dictionary's <a href="https://docs.python.org/3/library/stdtypes.html?highlight=dict%20items#dict.items" rel="nofollow noreferrer"><code>items</code></a> method.</p>

<pre><code>zip(code_letter.keys(), code_letter.values())
</code></pre>

<p>Is roughly equivalent to</p>

<pre><code>code_letter.items()
</code></pre>

<p>And just to make it a little clearer what the dictionary comprehension is doing, I might also rename loop variables:</p>

<pre><code>letter_code = {letter: morse for morse, letter in code_letter.items()}
</code></pre>

<hr>

<p>You're using bare <code>except</code>s, which is generally a bad idea. If you accidentally typo some other catchable error into the <code>try</code>, you'll get <code>'Unknown value in string'</code> messages instead of a real error. Specify what exact error you want to catch. I'd also make use of the fact that stringifying a <code>KeyError</code> exception tells you what the bad key was. You can print out the exception to tell the user what went wrong exactly</p>

<pre><code>def morse_encode(string: str) -&gt; str:
    try:
        return ' '.join(letter_code[i.upper()] for i in string)

    except KeyError as e:
        raise EncodeError(f'Unknown value in string: {e}')

&gt;&gt;&gt; morse_encode("]")
EncodeError: Unknown value in string: ']'
</code></pre>

<p>And of course, <code>i</code> is a bad name for that loop variable. <code>i</code> suggests an index, but that's a letter, not an index. This reads much better</p>

<pre><code>' '.join(letter_code[char.upper()] for char in string)
</code></pre>
    </div>