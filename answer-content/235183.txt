<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Did you measure run time before implementing the multi threaded random number generator and analyser? I'm betting that combining the files takes a lot more time than you gain from concurrency (IO is slow). This would be premature optimization and a red flag.</p>

<p>The main method should not contain any logic other than parsing arguments to a format understood by the business logic. You should have the number generator, number analyser and number printer as a self contained classes and have the main method pass data between them. Study the single responsibility principle.</p>

<p>I think you were supposed to print two times: reading time and analysis time.</p>

<p>You read the numbers to memory and loop over them three times (so four loops). You should have been able to do the analysis while reading the numbers from the file (one loop). Again, did you measure the effect of the multi threaded analysis versus single threaded? The task did not specify upper limit to the file size so by reading the data to memory you created an unnecessary artificial limit from the JVM memory.</p>

<p>I was expecting some comments explaining <em>why</em> you chose to code as you did.</p>

<p><code>ListSplitter</code> does a lot of unnecessary copying. It should not extend <code>AbstractList</code> as a simple utility method would suffice. If you submit copied code, always try to copy good code. :)</p>

<p>You're creating a new instance of <code>Random</code> every time you create a random number. That's unnecessary and complete waste of time. The Random should be an instance variable.</p>

<p>Concatenating the separator to the number before writing is unnecessary waste of time as it creates a new immediately disposed string object. Write the number first and then write the separator (as a character, not string).</p>

<p>The if-statement in the file size checking that returns true or false only creates unnecessary cognitive load. Just write:</p>

<pre><code>return file.length() &gt; size;
</code></pre>

<p>Checking the number of bytes written by calling <code>file.length()</code> is quite expensive as it goes all the way to the file system to get the result. It also fails to take into account any buffering that may occur during the writing, possibly causin errors. It would be more efficient to simply keep an integer counter of the number of bytes written.</p>

<p>You're using <code>PrintWriter</code> to write the numbers but you are not using any special functionality from it. It gives the impression that you're not familiar with the IO-classes. You should use <code>BufferedWriter</code> instead to get the speed benefit of buffered writing (you need to count the written bytes manually now).</p>

<p><strong>Don't forget to specify the character encoding of the file!</strong> Even though you're only writing numbers and spaces and the resulting file will most likely always be ASCII-compatible, explicitely specifying it tells the reader you're not one of the people who cause character encoding problems in production by always relying on system default encoding.</p>

<p>This one is particularly bad copy-pasting as it is hard to read and very inefficient. You should first get the value to a variable and use it in the if-statement and assignment.</p>

<pre><code>if(listOfEntries.get(i).getKey().toString().length() &gt; longest) {
    longest = listOfEntries.get(i).getKey().toString().length();
</code></pre>
    </div>