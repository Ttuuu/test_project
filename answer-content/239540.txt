<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Even Windows uses '/' as a path separator nowadays.  </p>

<pre><code>const string Paths::BASE_PATH = "C:\\ProgramData\\BankAcount";
</code></pre>

<p>The last time you needed to use '\' as a path separator was 15 years ago.</p>

<pre><code>const string Paths::BASE_PATH = "C:/ProgramData/BankAcount";
</code></pre>

<p>If you really want to us the '\' then use the RAW character strings.</p>

<pre><code>const string Paths::BASE_PATH = R"(C:\ProgramData\BankAcount)";
</code></pre>

<hr>

<p>Member variables should always be private.</p>

<pre><code>class Account
{
protected:
    std::string name;
    std::string new_name;
    long long int balance;
    std::string account_num;
    std::string file_path;

    std::string pin, new_pin;

    char buffer[256];

   // STUFF
};
</code></pre>

<p>Do you trust a stranger that derived his class from your class to main the invariants of the class?</p>

<p>Members should be private and then you provide methods to mutate the state in a way that is logically consistent.</p>

<hr>

<p>OK. Have not read the whole class. But is this a string?</p>

<pre><code>    char buffer[256];
</code></pre>

<hr>

<p>All these methods on a class call <code>Account</code>.</p>

<p>A lot of methods don't seem to have anything to do with an account!</p>

<pre><code>// Not sure what this is to do with an account?
void createFolder() const;
void createLimitFiles();
void deleteFile(std::string file_to_delete);
void settings();
void mainMenu();
</code></pre>

<hr>

<p>The logging functions don't look like they belong in the account. But rather something that the account would use.</p>

<pre><code>void logTransactions(const std::string&amp; log_account_num, const std::string&amp; transaction_type, const int&amp; amount) const;
void log( bool note ) const;
void logInsideAccount(const std::string&amp; in_account) const;
</code></pre>

<p>Do you call a method to withdraw information. Then call the logging functions to record that? When you withdraw someting from the account should the account not simply tell the logger about the action so it can be logged.</p>

<p>If that is the case then you need to pass a logging object to the account (probably in the constructor).</p>

<hr>

<p>Modern Time formatting works with time and stream:</p>

<pre><code>time_t now      = time(nullptr);
string time_now = ctime(&amp;now);
tm* lock_time   = localtime(&amp;now);


lock &lt;&lt; lock_time-&gt;tm_mday &lt;&lt; " " &lt;&lt;  lock_time-&gt;tm_hour &lt;&lt; " " &lt;&lt;  lock_time-&gt;tm_min;
</code></pre>

<p>Can be replaced with:</p>

<pre><code>auto now = std::chrono::system_clock::now();
lock &lt;&lt; std::format("%e %I %M", now);
</code></pre>

<hr>

<p>This is very verbose:</p>

<pre><code>if ( ! file_in.good() )
{
    return;
}
</code></pre>

<p>A stream when used in a boolean context (like an if statement) will automatically convert itself to a bool based on its state (by calling <code>good()</code>).</p>

<pre><code>if (!file_in) {
    return;
}
</code></pre>

<hr>

<p>You are assuming that a line is less than 256 characters long.</p>

<pre><code>char bufferLine[256];
file_in.getline(bufferLine, 256);
</code></pre>

<p>It may be true now. But in the future when your class is modified do you trust the next person to read all the code and make sure it conforms to all your current standards? If this is a limit you want the next programmer to inforce you should put it as a constant that is named in the class.</p>

<p>But alternatively I would use a resizable string so it can read any size of line.</p>

<pre><code>std::string  line;
if (std::getline(file_in, line)) {
   // Correctly read a line of text from `file_in`
}
</code></pre>

<hr>

<p>This is broken.</p>

<pre><code>while (file_in.good() &amp;&amp; ! file_in.eof())
{
    c = file_in.get();
    existent_content.push_back(c);
}
</code></pre>

<p>The situation. You have one character left in the stream and the file is good. The above condition is good and you enter the loop.</p>

<p>You will read the last character. The state of the stream is still good and the EOF will NOT be set. This is because the EOF flag is not set until you read past the end of file. So you enter the loop again. But this time when you try and read a character it fails (and sets the EOF flag). But you still unconditionally add it to <code>existent_content</code>.</p>

<p>You can write it like this but you need to test that the read worked:</p>

<pre><code>while (file_in.good() &amp;&amp; ! file_in.eof()) {
    int c;
    if ((c = file_in.get()) != EOF) {
        existent_content.push_back(c);
    }
}
</code></pre>

<p>But this is still considered bad practice. You shoudl loop on a read working.</p>

<pre><code>int c;
while ((c = file_in.get()) != EOF) {
    existent_content.push_back(c);
}
</code></pre>

<hr>

<p>======</p>

<h2>Logging</h2>

<p>I would set up logging so that each action does its own logging. To do this it needs a logging object that knows what to do with the message. If you define your logging object as a class you can define different styles of logging.</p>

<pre><code>class SimpleMessageLogger
{
    public:
        virtual ~SimpleMessageLogger() {}
        virtual void log(std::string const&amp; message) = 0;
};

class SimpleMessageLoggerTOStdErr: public SimpleMessageLogger
{
    public:
        virtual void log(std::string const&amp; message) override
        {
            std::cerr &lt;&lt; time(nullptr) &lt;&lt; ": " &lt;&lt; message &lt;&lt; "\n";
        }
}

class SimpleMessageLoggerTOSystem: public SimpleMessageLogger
{
    public:
        virtual void log(std::string const&amp; message) override
        {
            // Call system logger
        }
}
</code></pre>

<p>Then your account needs to be set up to use a logger:</p>

<pre><code>class Account
{
    SimpleMessageLogger&amp; logger;
    int                  balance;

    public:
        Account(SimpleMessageLogger&amp; logger)
            : logger(logger)
            , balance(0)
        {}

        void withdraw(int amount) {
            if (balance &lt; amount) {
                logger.log("OverDrawn. We make money by charging fees");
            }
            balance -= amount;
            std::stringstream message;
            message &lt;&lt; "Withdrawal: From account 1123 Amount: " &lt;&lt; amount &lt;&lt; " New Balance: " &lt;&lt; balance;
            logger.log(message.str());
        }
}

int main()
{
    std::unique_ptr&lt;SimpleMessageLogger&gt; logger;
    // Decide what type of logger you want.
    logger = new SimpleMessageLoggerTOStdErr;

    Account. myAccount(*logger);

    myAccount.withdraw(1'000'000);
}
</code></pre>
    </div>