<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Overall, I think this code is a great first try. That said, it has a lot of room for improvement in terms of simplification and improving readability.</p>

<p><em>As an aside, I'm not sure if you have a strong motivation for using Visual Studio 2010, but if you don't, I would recommend considering using a more up to date version. Visual Studio 2017 was recently released.</em></p>

<p><strong>Naming Conventions</strong></p>

<p>The naming of the methods should be PascalCase, and should not be abbreviated.  For example, instead of <code>renderQuesAndAnswers</code>, use <code>RenderQuestionAndAnswers</code>. This improves readability and is consistent with C# conventions. </p>

<p>You also use Hungarian notation for the question class. I would also denote that it is a model. Instead of <code>clsQuestion</code>, it should simply be <code>QuestionModel</code>.</p>

<p>See <a href="https://msdn.microsoft.com/en-us/library/ms229045(v=vs.110).aspx" rel="noreferrer">https://msdn.microsoft.com/en-us/library/ms229045(v=vs.110).aspx</a> and <a href="https://msdn.microsoft.com/en-us/library/ms229043(v=vs.110).aspx" rel="noreferrer">https://msdn.microsoft.com/en-us/library/ms229043(v=vs.110).aspx</a> for reference. There are some great points in that documentation.</p>

<p><strong>Use C# Auto-Implemented properties</strong></p>

<p>The <code>Question</code> class can be greatly simplified using C# auto-implemented properties.  Use <code>public string Property { get; set; }</code> instead of creating you own backing fields.  See <a href="https://msdn.microsoft.com/en-us/library/bb384054.aspx" rel="noreferrer">https://msdn.microsoft.com/en-us/library/bb384054.aspx</a> for reference. I would also rename the Question property to QuestionText to avoid confusion.</p>

<p>With this, the Question class could be extremely simple:</p>

<pre><code>public class QuestionModel {
    public int QuestionId { get; set; }
    public string QuestionText { get; set; }
    public string Option1 { get; set; }
    public string Option2 { get; set; }
    public string Option3 { get; set; }
    public string Option4 { get; set; }
    public int Answer { get; set; }
}
</code></pre>

<p><strong>catch and throw</strong></p>

<pre><code>catch (Exception ex) {
    throw ex;
}
</code></pre>

<p>This is unnecessary. Without it, it will propagate the exception up, the same as manually rethrowing the exception.</p>

<p><strong>Remove Unneeded Controls</strong></p>

<p>You seem to have both a radio button list and 4 radio buttons. We really only need the radio button list. There are also a few panels that aren't needed.</p>

<p><strong>Use ViewState Instead Of Session</strong></p>

<p>Instead of using the session to store data between questions, we can use the ViewState. The ViewState doesn't persist the data on the server, but rather stores it on the client side. Since we don't need to make use of the internal state data (such as the current question), we can store it in the ViewState. Using ViewState also allows a user to have multiple question sessions going on at a time in separate windows, whereas the session data would otherwise be mixed between them.</p>

<p>We can also use properties to simplify this access. Instead of using strings to access the variables, we can implement the access in the property, which will prevent us from accidentally using the wrong key.  For example:</p>

<pre><code>private int QuestionNumber {
    get {
        return (int)ViewState["QuestionNumber"];
    }
    set {
        ViewState["QuestionNumber"] = value;
    }
}
</code></pre>

<p>We can also store the entire current question in the ViewState to avoid having to store individual properties of it, such as the answer index. We can do this by adding the <code>[Serializable]</code> attribute to the QuestionModel class. Note that if we do use the ViewState, we should also encrypt it to avoid disclosing the answers and other internal information. To do this, we can add <code>ViewStateEncryptionMode="Always"</code> to the Page directive on the .aspx file.</p>

<p>Also note that we'll need to find a way to provide access to the correct count to Results.aspx. For simplicity, we can use session data <em>for this specific case</em>:</p>

<pre><code>Session["CorrectCount"] = CorrectCount.ToString();
Server.Transfer("Results.aspx");
Session.Contents.Remove("CorrectCount");
</code></pre>

<p>Ideally, it would be great to have a result information class that we could serialize and pass through, which might include the percentage, which answers were right/wrong, etc.  <strong>Note:</strong> It <em>really</em> shouldn't be using the session at all here (see reasoning above), but the architecture of transferring the data is out of the scope of this question, so this is here for a proof of concept.</p>

<p><strong>Separate Data Access From Rendering</strong></p>

<p>Currently <code>renderQuestions</code> both handles data access as well as calling the rendering method. I would extract the data access to it's own method, something like:</p>

<pre><code>private QuestionModel GetQuestion(int index) {
    // Data Access Logic
}
</code></pre>

<p>This allows us to have a much cleaner render logic:</p>

<pre><code>private void RenderQuestion() {
    CurrentQuestion = GetQuestion(QuestionNumber);

    lblQuestion.Text = CurrentQuestion.QuestionText;

    rblOptions.Items.Clear();
    rblOptions.Items.Add(CurrentQuestion.Option1);
    rblOptions.Items.Add(CurrentQuestion.Option2);
    rblOptions.Items.Add(CurrentQuestion.Option3);
    rblOptions.Items.Add(CurrentQuestion.Option4);
}
</code></pre>

<p><strong>Only Handle Answer Checking on Next Click</strong></p>

<p>There's no good reason to check anything about the selected option when it's checked; we really only care when the user clicks next. This greatly simplifies the logic, as we can remove all of those methods, and implement all of the logic in the next button click method.  For example:</p>

<pre><code>protected void btnNext_Click(object sender, EventArgs e)
{
    if (rblOptions.SelectedIndex + 1 == CurrentQuestion.Answer) {
        CorrectCount++;
    }

    if (QuestionNumber == 4) {
        Server.Transfer("Results.aspx");
    }
    else {
        QuestionNumber++;
        RenderQuestion();
    }
}
</code></pre>

<p><strong>Putting It All Together</strong></p>

<p>With all of this, we end up with the following. Notice that we've reduced the size of the class by almost half and made it a lot more readable.</p>

<p><em>CodeBehind</em></p>

<pre><code>using System;
using System.Web;
using System.Data;
using System.Configuration;
using MySql.Data.MySqlClient;

namespace questions
{
    public partial class Question : System.Web.UI.Page
    {
        [Serializable]
        protected class QuestionModel
        {
            public int QuestionId { get; set; }
            public string QuestionText { get; set; }
            public string Option1 { get; set; }
            public string Option2 { get; set; }
            public string Option3 { get; set; }
            public string Option4 { get; set; }
            public int Answer { get; set; }
        }

        private int QuestionNumber { get { return (int)ViewState["QuestionNumber"]; } set { ViewState["QuestionNumber"] = value; } }
        private int CorrectCount { get { return (int)ViewState["CorrectCount"]; } set { ViewState["CorrectCount"] = value; } }
        private QuestionModel CurrentQuestion { get { return ViewState["CurrentQuestion"] as QuestionModel; } set { ViewState["CurrentQuestion"] = value; } }

        protected void Page_Load(object sender, EventArgs e) {
            Response.Cache.SetCacheability(HttpCacheability.NoCache);
            Response.Cache.SetExpires(DateTime.Now.AddSeconds(-1));
            Response.Cache.SetNoStore();

            if (!IsPostBack) {
                QuestionNumber = 1;
                CorrectCount = 0;
                RenderQuestion();
            }
        }

        private QuestionModel GetQuestion(int index) {
            MySqlConnection connection = null;
            var connectionString = ConfigurationManager.ConnectionStrings["conString"].ConnectionString;
            var query = "SELECT * FROM QUESTIONS WHERE QUESTION_ID=" + index;

            try
            {
                using (connection = new MySqlConnection(connectionString))
                {
                    connection.Open();

                    using (var command = new MySqlCommand(query, connection))
                    {
                        using (var adapter = new MySqlDataAdapter(command))
                        {
                            var dataTable = new DataTable();
                            adapter.Fill(dataTable);
                            if (dataTable.Rows.Count &gt; 0)
                            {
                                return new QuestionModel
                                {
                                    QuestionId = Convert.ToInt32(dataTable.Rows[0][0]),
                                    QuestionText = Convert.ToString(dataTable.Rows[0][1]),
                                    Option1 = Convert.ToString(dataTable.Rows[0][2]),
                                    Option2 = Convert.ToString(dataTable.Rows[0][3]),
                                    Option3 = Convert.ToString(dataTable.Rows[0][4]),
                                    Option4 = Convert.ToString(dataTable.Rows[0][5]),
                                    Answer = Convert.ToInt32(dataTable.Rows[0][6])
                                };
                            }
                            else
                            {
                                return null;
                            }
                        }
                    }
                }
            }
            finally
            {
                connection.Close();
            }
        }

        private void RenderQuestion() {
            CurrentQuestion = GetQuestion(QuestionNumber);

            lblQuestion.Text = CurrentQuestion.QuestionText;

            rblOptions.Items.Clear();
            rblOptions.Items.Add(CurrentQuestion.Option1);
            rblOptions.Items.Add(CurrentQuestion.Option2);
            rblOptions.Items.Add(CurrentQuestion.Option3);
            rblOptions.Items.Add(CurrentQuestion.Option4);
        }


        protected void btnNext_Click(object sender, EventArgs e)
        {
            if (rblOptions.SelectedIndex + 1 == CurrentQuestion.Answer) {
                CorrectCount++;
            }

            if (QuestionNumber == 4) {
                Session["CorrectCount"] = CorrectCount.ToString();
                Server.Transfer("Results.aspx");
                Session.Contents.Remove("CorrectCount");
            }
            else {
                QuestionNumber++;
                RenderQuestion();
            }
        }
    }
}
</code></pre>

<p><em>HTML</em></p>

<pre><code>&lt;form id="form1" runat="server"&gt;
    &lt;div&gt;
        &lt;h3&gt;Please choose the right answer&lt;/h3&gt;
    &lt;/div&gt;
    &lt;table class="style1"&gt;
        &lt;tr&gt;
            &lt;td class="style3"&gt;
                &lt;asp:Label ID="lblQuestion" runat="server" Text=""&gt;&lt;/asp:Label&gt;
            &lt;/td&gt;
            &lt;td class="style4"&gt;&amp;nbsp;&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td class="style2"&gt;Answers:&lt;/td&gt;
            &lt;td&gt;&amp;nbsp;&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td class="style2"&gt;
                &lt;asp:RadioButtonList ID="rblOptions" runat="server"&gt;&lt;/asp:RadioButtonList&gt;
            &lt;/td&gt;
            &lt;td&gt;&amp;nbsp;&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td class="style2"&gt;&amp;nbsp;&lt;/td&gt;
            &lt;td&gt;&amp;nbsp;&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td class="style2"&gt;
                &lt;asp:Button ID="btnNext" runat="server" onclick="btnNext_Click" Text="Next" /&gt;
            &lt;/td&gt;
            &lt;td&gt;&amp;nbsp;&lt;/td&gt;
        &lt;/tr&gt;
    &lt;/table&gt;
&lt;/form&gt;
</code></pre>
    </div>