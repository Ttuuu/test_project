<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>That's an interesting case. First, I thought that the function should be a function template for a pair of input iterators and an output iterator, as that's an idiomatic approach taken by many STL algorithms and what the function matches this pattern. But given that <code>\n</code> plays a crucial role here, passing iterators to an underlying <code>std::ifstream</code> doesn't make much sense (it consumes words, not lines).</p>

<p>Nevertheless, let me share my thoughts besides.</p>

<ul>
<li><p>Why does it have to be a static data member <code>s_bInComment</code>? I assume <code>removeComment</code> is static, too? This sounds like it's somewhat decoupled from the rest of the <code>Parser</code> class, which might have some instance-specific state. Maybe it makes things cleaner and more testable if you create a small class only for the removal of comments, which improves encapsulation and circumvents the <code>static</code> variable - non-<code>const</code>, <code>static</code> variables are too global for my taste, and they are generally thread-unsafe.</p></li>
<li><p>The function is very long, and it contains many nested branches. I think it's common sense that this is not very readable and should be split into smaller functions. If you give them meaningful names, you can even remove some of your comments (e.g. <code>hasPartialEndToken(str)</code> or <code>startsWithGlobalToken(str)</code>).</p></li>
<li><p>If you care about allocations and C++17 is available, you could change the way this functions passes its result back to the caller, i.e., via a <code>std::vector&lt;std::string_view&gt;</code>. The lifetime of the input argument is controlled by the caller, so it is probably sufficient to not copy the non-comment parts of the string into a result, but instead create a collection of views on the input. As <code>std::string::substr</code> and concatenating strings with <code>operator +</code> are possibly expensive operations, you might keep this option in mind (and of course, only go with it after you made sure that performance/memory footprint is important, you profiled your code and so on...)</p></li>
<li><p>Minor point, as this is not in your list of tested string: what should happen with something like <code>"a /* b \n c */ d # e"</code>, i.e., a multiline comment followed by a until-the-end-of-line comment?</p></li>
</ul>

<p>Last, a more general question - why aren't you using <code>&lt;regex&gt;</code>? The API is not famous for its ease of use, but you do a lot of manual work that could be outsourced to the standard library, and developers maintaining such a piece of code wouldn't be surprised to find some regular expressions in it. Here's a small class has the same functionality as the snippet you posted:</p>

<pre><code>class CommentRemover {
    public:
        std::string strip(const std::string&amp; input);

    private:
        bool isInComment = false;
        static const std::regex restOfLine;
        static const std::regex partialInline;
        static const std::regex multiLineBegin;
        static const std::regex multiLineEnd;
};
</code></pre>

<p>with the actual <code>std::regex</code> objects being defined as</p>

<pre><code>const std::regex CommentRemover::restOfLine{"(//|#)"};
const std::regex CommentRemover::partialInline{"(/\\*.*?\\*/)"};
const std::regex CommentRemover::multiLineBegin{"(/\\*.*(?!\\*/))"};
const std::regex CommentRemover::multiLineEnd{"(/\\*.*(?!\\*/))"};
</code></pre>

<p>and the implementation of the member function looks like</p>

<pre><code>std::string CommentRemover::strip(const std::string&amp; input)
{
    std::smatch match;
    // Save some typing below:
    const auto search = [&amp;match, &amp;input](const std::regex&amp; re){
        return std::regex_search(input, match, re); };

    if (isInComment &amp;&amp; search(multiLineEnd)) {
        isInComment = false;
        return strip(match.suffix().str());
    } else if (search(partialInline))
        return match.prefix().str() + strip(match.suffix().str());
    else if (search(restOfLine))
        return match.prefix().str();
    else if (search(multiLineBegin)) {
        isInComment = true;
        return match.prefix().str();
    }

    return input;
}
</code></pre>

<p>This is not a prime example for readability, and the regex specifications are admittedly cryptic. But I think it reduces the likelihood of bugs due to less code and no manual looping/indexing. Plus, it allows for concentrating the complexity of the operation into the regex definitions and the <code>if</code>-<code>else if</code> ordering.</p>
    </div>