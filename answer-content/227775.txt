<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I wanted to give a more full answer, but I can't fully commit to it, so here are a few things:</p>

<ul>
<li><p>Instead of having <code>Wrong</code> built into the result type, you would rather want <code>Maybe Val</code>, or better yet, <code>Either String Val</code> or <code>Either Error val</code>, since there are multiple possible causes for failure.</p></li>
<li><p>I'm a little skeptical about <code>Fun (Val -&gt; Val)</code>: This seems to serve two purposes:</p>

<ol>
<li><p>The final result of <code>interp</code> could be a lambda.</p>

<p>Theoretically it must always be, but for a practical purpose, perhaps, you've decided that integers are different from functions. And that if one were to return a value that hasn't reduced to an integer, then rather produce a Haskell function that can resume evaluation later.</p>

<p>The drawback is that you can't further transform the structure hidden away in a <code>Fun (Val -&gt; Val)</code> in the same way as you can with a <code>Term</code>; you can only reduce it further using <code>interp</code>. For example, you can only pretty-print the result if it's an integer, or a failure.</p></li>
<li><p>As an intermediate representation of a term being evaluated. But since any lambda reduction rule provides another term, <code>Term</code> should be an excellent intermediate representation.</p></li>
</ol></li>
<li><p>When you express an intermediate state as <code>Fun (Val -&gt; Val)</code>, it also contains an implicit <code>Env</code>, which is in some sense a reader monad pattern. Typically you might represent this with <code>Control.Monad.Reader</code> instead.</p></li>
<li><p>I think keeping an <code>Env</code> might be neat - I've seen several examples of people building quite advanced lambda calculus interpreters that do this. But when I first thought how I'd make it myself, I thought of</p>

<pre><code>interp (App (Lam x body) arg) = subst x body arg
interp (App (Var x) _arg) = Left ("Free variable " ++ show x)
</code></pre>

<p>since, if I encountered a <code>Var x</code> on the left-hand side of an application, I'd know that it hadn't been substituted by an outer reduction. But I'm not wise enough to say which is better here, that was just my first thought.</p></li>
<li><p>I'd rename <code>Cons</code> to <code>Num</code> or <code>Int</code>: <code>Cons</code> seems a bit contrived for constant, and <code>Const</code> is a bit vague, since you really mean integer constant. But what constant is there about a lambda term? I mean, theoretically it could also be a function if the interpreter allowed it.</p></li>
<li><p>If your intermediate representation was <code>Term</code> and not <code>Val</code>, and your interpreter was monadic (e.g. for handling errors) you could merge <code>add</code> into <code>apply</code>, since <code>Add</code> is just a special-case function application:</p>

<pre><code>interp (App (Lam x body) arg) = subst x body arg
interp (App (Var x) _arg) = Left ("Free variable " ++ show x)
interp (Add e1 e2) = add &lt;$&gt; interp e1 &lt;*&gt; interp e2

add (Int m) (Int n) = return (Int (m + n))
add x y = Left ("Cannot add non-integers " ++ show x ++ " and " ++ show y)
</code></pre>

<p>Pretty-printing <code>m</code> and <code>n</code> here is possible because <code>Term</code>'s structure is not hidden within a Haskell <code>-&gt;</code> function.</p></li>
<li><p>You have two things that could be expressed in terms of monads: Making <code>Env</code> implicit using a reader monad, and handling errors using <code>Either</code>. This could be expressed as</p>

<pre><code>type Env = Map Var Term
type Interpreter = Env -&gt; Term -&gt; Either String Term
</code></pre>

<p>or rather using <a href="http://hackage.haskell.org/package/transformers-0.5.6.2/docs/Control-Monad-Trans-Reader.html" rel="nofollow noreferrer"><code>Control.Monad.Trans.Reader</code></a>:</p>

<pre><code>type Env = Map Var Term
type Interpreter a = ReaderT Env (Either String) a
</code></pre>

<p>which is <a href="http://hackage.haskell.org/package/transformers/docs/src/Control.Monad.Trans.Reader.html#ReaderT" rel="nofollow noreferrer">equivalent under the hood</a>, but it means you can do stuff like:</p>

<pre><code>interp (Add e1 e2) = add &lt;$&gt; interp e1 &lt;*&gt; interp e2
</code></pre></li>
</ul>

<blockquote>
  <p>I don't care about alpha renaming</p>
</blockquote>

<p>I'm not sure how to interpret this, but the following thought comes to mind:</p>

<p>It is idiomatic to model your data type as close to the domain, so the fact that <code>Lam "x" (Var "y")</code> passes type-check but can not evaluate (unless there's some kind of initial environment that catches free variables) is a problem. One way to address this I've seen is e.g. <a href="https://en.wikipedia.org/wiki/De_Bruijn_index" rel="nofollow noreferrer">de Bruijn indexing</a> as performed e.g. by <a href="https://jameshfisher.com/2018/03/15/a-lambda-calculus-interpreter-in-haskell/" rel="nofollow noreferrer">James Fisher</a> which is one way to say that he also doesn't care about alpha renaming by never having the need. One could even convert freely between one interpretation with variables and another without, depending on which representation is most convenient for a given purpose.</p>
    </div>