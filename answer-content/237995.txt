<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Overview</h2>

<p>Potentially not very efficient.</p>

<p>I have seen other Matrix libraries not do the actual computation until the value is needed. So what is passed around is a Matrix wrapper that contains references to the original matrixes and the operations on them. You can then delay the actual work till it is needed. Then if you multiply by the null matrix you can can optimize out all the numeric operations.</p>

<p>I will assume you know how to do the basic maths of matrix manipulation. I will look at the interfaces and idioms.</p>

<h2>Code Review</h2>

<p>Nice:</p>

<pre><code>template &lt;class T, uint n&gt;
using rowVector = Matrix&lt;T, 1, n&gt;;

template &lt;class T, uint m&gt;
using colVector = Matrix&lt;T, m, 1&gt;;
</code></pre>

<hr>

<p>So the only way to initialize the matrix is via a vector?</p>

<pre><code>    explicit Matrix(const std::vector&lt;T&gt; matrixValue);
                    ^^^^^^^^^^^^^^^^^^^^
                    Note: passing by value.
                          You are making a copy. Probably want to pass
                          by const reference (see below)             

    explicit Matrix(std::vector&lt;T&gt; const&amp; matrixValue);
    explicit Matrix(std::vector&lt;T&gt;&amp;&amp;      matrixValue); // don't forget move semantics.
</code></pre>

<p>I would have liked to be able to initialize it via iterators</p>

<pre><code>    template&lt;typename I&gt;
    explicit Matrix(I begin, I end);
</code></pre>

<p>That way I can simply read the data from a file:</p>

<pre><code>    std::ifstream    file("Matrix.file");
    Matrix&lt;int, 5, 6&gt;  data(std::istream_iterator&lt;int&gt;{file}, std::istream_iterator&lt;int&gt;{});
</code></pre>

<hr>

<p>I like this:</p>

<pre><code>    int getRows()const;
    int getColoumns() const;
</code></pre>

<p>But some people will complain that you should use unsigned int (i.e. std::size_t).</p>

<hr>

<p>Yes you need this:</p>

<pre><code>    T&amp; operator()(const uint row, const uint col);
</code></pre>

<p>But you also need the const version. A lot of time you may pass a const reference of the matrix to a function. You should still be able to read data from the matrix.</p>

<pre><code>    T const&amp; operator()(const uint row, const uint col) const;
</code></pre>

<p>If you want to fo whole hog you can add the <code>[]</code> operators. A tiny bit more work but doable.</p>

<pre><code>    // Define inside Matrix so the template stuff
    // Is already available.
    struct Row
    {
        Matrix&amp;   parent;
        int       row;
        Row(Matrix&amp; parent, int row) : parent(parent), row(row) {}
        T&amp;       operator[](int col)       {return parent(row, col);}
    }
    Row operator[](int row){return Row(*this, row);}

    // Very similar for the const version.
</code></pre>

<hr>

<p>Fair:</p>

<pre><code>    Matrix&lt;T,m,n&gt; operator=(std::vector&lt;T&gt; matrixIntializationValue);
</code></pre>

<p>But if you define this. Then you also need to define the standard assignment operator. Otherwise you can't do simple Matrix assignment.</p>

<hr>

<p>You don't need all this template stuff if you define this inside the class declaration.    </p>

<pre><code>    template&lt;class T, uint m, uint n&gt; friend std::ostream&amp; operator&lt;&lt;(std::ostream&amp; os, const Matrix&lt;T,m,n&gt;&amp; matrix);
</code></pre>

<p>By doing it inside the class you make everything much simpler to read.</p>

<hr>

<p>Why are you storing the data as a vector of vectors?</p>

<pre><code>std::vector&lt;std::vector&lt;T&gt;&gt; data;
</code></pre>

<p>You have this wrapper class for managing all the interactions. You can use a more effecient storage method internally because you have wrapped the object and limit access to the implementation.</p>

<p>Simply use a single vector of data.</p>

<pre><code>std::vector&lt;T&gt; data;
</code></pre>

<p>It makes initialization easy. Access will be quicker (less look-ups and data locality will mean that data will already be in the processor cache).</p>

<hr>

<p>Since <code>m</code> and <code>n</code> are defined at compile time. This runtime check should not be required. You simply make the zero sized versions invalid and you get a compile time error.</p>

<pre><code>template&lt;class T, uint m, uint n&gt;
Matrix&lt;T,m,n&gt;::Matrix(): rows(m), cols(n)
{
    // Compile time check.
    static_assert(m &gt; 0 &amp;&amp; n &gt; 0);
</code></pre>

<hr>

<p>No need for this loop:</p>

<pre><code>    data.resize(rows);
    for (auto&amp; colData : data)
        colData.resize(cols);

    ----
</code></pre>

<p>Simply do the declaration in the initializer list:</p>

<pre><code>template&lt;class T, uint m, uint n&gt;
Matrix&lt;T,m,n&gt;::Matrix()
     : rows(m)
     , cols(n)
     , data(rows, std::vector&lt;T&gt;(cols))
{}
</code></pre>

<hr>

<p>Stop using: <code>this-&gt;</code></p>

<pre><code>    return this-&gt;rows;
</code></pre>

<p>Its not very C++. It also causes errors. Not for the compiler but for developers. The only reason you need <code>this-&gt;</code> is when you have shadowed a variable and need to distinguish between the local and the object variable. Unfortunately when you miss <code>this-&gt;</code> off the compiler can't tell you have made a mistake.</p>

<p>But by using distinct names you know which variable you are using and the compiler can warn you about shadowed variables (turn on the warning and make it an error). This will reduce the number of programmer mistakes in your code.</p>

<p>Well named and distinct variables will produce better code and less mistakes.</p>

<hr>

<p>You don't need this check:</p>

<pre><code>template&lt;class T, uint m, uint n&gt;
Matrix&lt;T,m,n&gt; Matrix&lt;T,m,n&gt;::operator+(Matrix&amp; other)
{
</code></pre>

<p>Did you not make sure that this addition can only happen with very specific types in the class definition? This means that Matrixes of the wrong size would generate a compile time error and thus you don't need a runtime error.</p>

<pre><code>    if ((this-&gt;rows == other.getRows()) &amp;&amp; (this-&gt;cols == other.getColoumns()))
    {
</code></pre>

<hr>

<pre><code>template&lt;class T, uint m, uint n&gt;
std::ostream&amp; operator&lt;&lt;(std::ostream &amp;os, const Matrix&lt;T,m,n&gt; &amp;matrix)
{
</code></pre>

<p>Can the data ever be empty?  </p>

<pre><code>    if(!matrix.data.empty())
</code></pre>

<p>Don't you guarantee in the constructor that this never happens?</p>

<hr>

<p>Don't use <code>std::endl</code> when <code>"\n"</code> will do.</p>

<pre><code>            os &lt;&lt; std::endl;
</code></pre>

<p>The difference is that <code>endl</code> will force a stream flush. Manually flushing the stream is almost always (I say almost because somebody will point out an obscure situation were it would be nice) the wrong thing to do. You should never be using it until you can show with testing that it is worth the flush.</p>

<p>When people complain about the speed of the C++ streams this is one of the main culprits. Excessive flushing of the stream is one of the main slowdown people see. When you stop doing it the C++ streams are about the same speed as C streams.</p>
    </div>