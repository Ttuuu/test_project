<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><strong>Docstrings</strong>: You should include a <a href="https://www.python.org/dev/peps/pep-0008/#documentation-strings" rel="nofollow noreferrer">docstring</a> at the beginning of every method, class, and module you write. This will help any documentation identify what your code is supposed to do.</li>
<li><strong>Unnecessary Methods</strong>: You have a method, <code>intro</code>, specifically for printing the introduction to your program. It's only two print statements. It's unnecessary in my opinion to have a method just for this purpose, especially when you're not passing anything to be formatted within the prints. Just print what you want without using a method.</li>
<li><strong>String Formatting</strong>: This one is a personal preference. I like to use <code>f""</code> instead of <code>.format()</code>, because it allows me to directly implement variables into the strings, without having to chain a method onto the end.</li>
<li><strong><code>_</code> in loops</strong>: You don't use <code>step</code> in <code>for step in range(steps):</code>. You can use an underscore to make it clear that the variable used in the loop is not necessary, and should be ignored.</li>
<li><strong>Method Names</strong>: At first glance, the name <code>open_window</code> looks like it just opens the window. Instead, it creates and returns a new window. So <code>setup_window</code> would be a better name, since it's more appropriate about what the method does.</li>
</ul>

<p><strong><em>Updated Code</em></strong></p>

<pre><code>"""
Module Docstring:
Explanantion about this program goes here
"""

from random import random
import math
from graphics import *

def setup_window():
    """
    Sets up and returns the window
    """
    win = GraphWin("2-Dimensional random walk", 500, 500)
    win.setCoords(-100, -100, 100, 100)
    win.setBackground("white")
    return win

def walk_n_steps(steps, win):
    """
    Walks `n` steps and returns the new points
    """
    point_x = 0
    point_y = 0
    for _ in range(steps):
        x_new, y_new = walk_one_step(point_x, point_y)
        draw_line(win, point_x, point_y, x_new, y_new)
        point_x, point_y = x_new, y_new
    return point_x, point_y

def draw_line(win, point_x, point_y, x_new, y_new):
    """
    Draws a lines from (point_x, point_y) to (x_new, y_new)
    """
    step = Line(Point(point_x, point_y), Point(x_new, y_new))
    step.setWidth(2)
    step.setFill("black")
    step.draw(win)

def walk_one_step(point_x, point_y):
    """
    Walks one step, and returns the new points
    """
    angle = random() * 2 * math.pi
    point_x = point_x + math.cos(angle)
    point_y = point_y + math.sin(angle)
    return point_x, point_y

def output(steps, point_x, point_y):
    """
    Prints the number of steps simulated, the starting point and
    the ending point
    """
    print(f"\nSteps simulated: {steps}")
    print("Start point: 0, 0")
    print(f"End point: {point_x}, {point_y}\n")

def main():
    """
    Main method for collecting user input, walking steps, and outputing
    the results
    """
    print("\nThis program simulates n steps on a 2-dimensional random walk")
    print("and outputs the end point.")
    win = setup_window()
    steps = int(input("How many steps do you want to simulate? &gt;&gt; "))
    point_x, point_y = walk_n_steps(steps, win)
    output(steps, point_x, point_y)
    win.getMouse()

if __name__ == "__main__":
    main()
</code></pre>
    </div>