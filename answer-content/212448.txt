<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Depending on how exactly you define your "files" there's 2 main options here.<br>
1) Keep parsers entirely split without trying to force them into the same interface<br>
2) Use a common file interface to pass onto both parsers</p>

<p>Option 1 is probably the simplest one. Just implement the factory as follows:</p>

<pre><code>public class ParserFactory{
    public ParserFromJson creatJSONParser(){
        return new ParserFromJson();
    }
    public ParserFromXML creatXMLParser(){
        return new ParserFromXml();
    }
}
</code></pre>

<p>Or since you know beforehand which class you want, just instanciate that without a factory.</p>

<hr>

<p>The other option is to modify the separate parsers to just take a more general File instead of your specific JSON / XML file formats.</p>

<pre><code>public interface Parser {
  public Parser read(File t){};
}

public class ParserFromJson implements Parser {
  @Override
  public Data read(File jsonFile){...};
}
</code></pre>

<p>That way you don't need the cast anymore:</p>

<pre><code>Data output = ParserFactory.create(JSON).read(jsonfile);
</code></pre>

<hr>

<p>That last option still requires you to first figure out which type you need to pass to the factory. You could try to go a step further and have the factory decide which parser to use for a specific file.</p>

<pre><code>public class ParserFactory{
    public Parser create(File file){
        if(file.getName().endsWith(".xml"){
            return new ParserFromJson();
        } 
        if (file.getName().endsWith(".json"){
            return new ParserFromXml();
        }
        throw new UnknowFileFormatException("No parser known to handle {}",filegetName());
     }
}
</code></pre>

<p>That way you can just call it as follows:</p>

<pre><code>Data output = ParserFactory.create(jsonfile).read(jsonfile);
</code></pre>

<p>You could also store the file directly in the Parser when you create it so you can call it as <code>ParserFactory.create(jsonfile).read();</code> instead but I'm already feeling we're overdesigning everything for this simple example.</p>

<p>Check what it's going to be used for and decide how much effort you should put in generalising these parsers. Sometimes option 1 is all you need to get things done so you can put time and effort in more important tasks instead.</p>
    </div>