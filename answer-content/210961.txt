<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This looks like a really fascinating project. I've only played with toy particle systems â€“ never anything as useful as this! But I do have some thoughts that might be helpful.</p>
<h1>Performance</h1>
<p>It's hard to say for sure where the slowdown is because it's not possible for me to profile the code based just on what's here. But that's something you should do. Run it in a profiler and see where the slowdowns are rather than guessing.</p>
<p>That said, I see some things that I frequently find to be performance issues. As mentioned in the comments, the number of allocations that the code does might be an issue. Stack allocations may be faster in some cases than heap allocations. So if you break up the code in <code>move()</code> into 4 different functions, you can allocate <code>t1</code>-<code>t4</code> on the stack rather than the heap. It might improve the speed since a stack allocation is generally just a pointer addition.</p>
<p>Your <code>accelerate()</code> function is recursive. You might be able to increase the speed by making it loop instead of recursing.</p>
<p>But if you want to get real performance gains I recommend one or more of the following:</p>
<ol>
<li>Write a <a href="https://en.wikipedia.org/wiki/SIMD" rel="nofollow noreferrer">SIMD</a> version of the code that operates on more than one particle at a time.</li>
<li>Write a multi-threaded version of the code that does the calculations for multiple particles on different threads. (You can do this along with #1 to get even more speed.)</li>
<li>Run the simulation on the GPU. This is likely to yield even better performance than combining 1 &amp; 2 as GPUs have thousands of cores instead of just dozens.</li>
</ol>
<h1>Data Hiding</h1>
<p>All the members of your <code>tree</code> class are <code>public</code>. That's usually a bad idea because it means that any other code in your application can reach in and change values inside the object, potentially leaving it in an invalid state. It also make debugging harder because you can't narrow down where a member variable was changed. Traditionally, it makes sense to make your member variables private and have accessors to retrieve or change them. The accessors can be written in the header so they get inlined and are just as fast as if they were public. But by having accessors you can, for example, put a breakpoint in a single place and figure out where a variable is changed. It would appear that your <code>cloud</code> and <code>obj</code> classes suffer from the same problem.</p>
<p>Also, if you make the objects immutable (so they can be read but not changed or written to), it makes moving to multiple threads much easier. But there are other implications to doing that, such as needing to create new values rather than updating existing ones, which may or may not be a performance issue.</p>
<h1>Naming</h1>
<p>You really need to expand on your variable names. 1 and 2 letter names are too hard to read. You get it exactly right with names like <code>moment</code> and <code>total_mass</code>, so it's a little odd that  arguments to your functions have names like <code>a</code> and <code>i</code>. Why do that?</p>
<p>Your class names are better than 1 character variable names, but could be expanded. For example, <code>tree</code> is a Barnes-Hutt tree. Why not call it that (or at least something like <code>BHTree</code>) to distinguish it from a typical binary search tree or a red-black tree?</p>
<p>The class name <code>obj</code> is exceedingly unhelpful. Every piece of data in your program is either a <a href="https://en.wikipedia.org/wiki/Passive_data_structure" rel="nofollow noreferrer">POD</a> or an object, so as a class name <code>obj</code> is entirely free from meaning. Why not call it <code>particle</code>? Or <code>body</code>?</p>
<p>Most of your function names are pretty good with the exception of <code>COM()</code>. It's only called in one place, so there's no excuse for not just writing out <code>center_of_mass()</code>.</p>
<h1>Data Structures</h1>
<p>It looks like there are several bits of data within a particle that need to be updated in sync and that go together. For example, the position, velocity and acceleration of the particle. That should be a <code>struct</code> or <code>class</code> unto itself. And instead of manually keeping all three in sync by doing this:</p>
<pre><code>    i-&gt;tpos = i-&gt;ppos = i-&gt;pos; // tpos/v/a stores the value of the new pos/v/a, ppos stores the value from the previous itteration
    i-&gt;tv = i-&gt;pv = i-&gt;v;
    i-&gt;ta = i-&gt;pa = i-&gt;a;
</code></pre>
<p>You could do something like this:</p>
<pre><code>struct movement {
    float3 pos;
    float3 velocity;
    float3 acceleration;
};
...
new_movement = movement;
prev_movement = movement;
</code></pre>
<p>So now you only have 2 assignments instead of 6. It's easier to read and it makes clear that position, velocity, and acceleration are all properties of the same object and that you have a next, current, previous relationship between them.</p>
    </div>