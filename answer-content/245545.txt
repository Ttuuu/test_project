<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Very good implementation, commented and easy to understand. There is no much to improve but I am providing you my suggestions.</p>
<p><strong>Configuration</strong></p>
<ul>
<li><code>Viewer</code> and <code>Writer</code> cannot start without the configuration file, in that case it's better to provide a message to the user and exit gracefully</li>
<li>The logic to read the configuration file is duplicated, so it's better to move it in its own class</li>
</ul>
<hr>
<p><strong>Exception handling</strong></p>
<ul>
<li>There are many operations with files but the exceptions are ignored</li>
</ul>
<p>In your case you could handle exceptions in two ways: stop the application or ignore it.
For example if the Viewer cannot read a message from a file is better to stop the application:</p>
<pre class="lang-java prettyprint-override"><code>try (BufferedInputStream stream = new BufferedInputStream(new FileInputStream(file))) {
// ...
} catch (IOException e) {
    throw new RuntimeException("Error: unable to read the message in: "+file.getName());
}
</code></pre>
<p>The main will catch the runtime exception, print the error message and exit.</p>
<pre class="lang-java prettyprint-override"><code>public static void main(String[] args) {
    try {
        Viewer viewer = new Viewer();
        viewer.view();
    } catch (Exception e) {
        System.out.print("Error: " + e.getMessage());
    }
}
</code></pre>
<p>The second way is easier, for example if the <code>Writer</code> cannot write to a file we can just print a warning and continue:</p>
<pre class="lang-java prettyprint-override"><code>try (BufferedWriter br = new BufferedWriter(new FileWriter(newMessage))) {
// ...
} catch (IOException e) {
    System.out.println("Warning: cannot write to file " + newMessage);
}
</code></pre>
<hr>
<p><strong>Encapsulation</strong></p>
<p>The chat message has its own format: a nickname (sender), a date and content. But this format is not clearly represented in a schema. Creating a class for the message will make it more evident and easier to change or extend.</p>
<p>Having more classes also means that you will need to build a <code>jar</code> file instead of running the <code>.class</code> directly. If your requirement is to keep the whole application inside a single <code>.class</code> file then you can put more classes in the same file.</p>
<hr>
<p><strong>Mismatch between name and behaviour</strong></p>
<p>The method <code>printMessage</code> does more than printing a message to the console, it reads a file, parse it and finally prints it to console. It can be improved by splitting that logic.</p>
<hr>
<p><strong>Minor changes</strong></p>
<ul>
<li>Use Java 8 <code>LocalDateTime</code> and <code>Instant</code> instead of <code>Date</code> (more readable)</li>
<li>Let the user quit the chat in order to gracefully exit and close the <code>Scanner</code></li>
</ul>
<hr>
<p>This is the code refactored:</p>
<pre class="lang-java prettyprint-override"><code>public class ConfigFileReader {
    private String saveDir;
    private Integer currentMessagesCount;
    
    public ConfigFileReader(String fileName) {
        Properties config;
        try (BufferedInputStream stream = new BufferedInputStream(new FileInputStream(fileName))) {
            config = new Properties();
            config.load(stream);
        } catch (IOException e) {
            throw new RuntimeException("Cannot read config file");
        }
        // Read save_dir property or set it to the local folder if not found
        saveDir = config.getProperty("save_dir",".");
        // Read current_messages_count property or set it to 1 if not found
        currentMessagesCount = Integer.parseInt(config.getProperty("current_messages_count","1"));
    }
    
    public String getSaveDir() {
        return saveDir;
    }

    public Integer getCurrentMessagesCount() {
        return currentMessagesCount;
    }
    
}
</code></pre>
<p>The ChatMessage class:</p>
<pre class="lang-java prettyprint-override"><code>public class ChatMessage {
    private String sender;
    private String content;
    private String date;
    
    public ChatMessage(String sender, String content) {
        this.sender = sender;
        this.content = content;
        this.date = now();
    }
    
    public ChatMessage(String sender, String content, String date) {
        this.sender = sender;
        this.date = date;
        this.content = content;
    }
    
    // Returns current date and time
    private String now() {      
        return LocalDateTime.now()
                .format(DateTimeFormatter.ofPattern("dd.MM.yyyy HH:mm"));
    }

    // Write message to file in currentDir
    public void saveToFile(File currentDir, String fileName) {
        File newMessage = new File(currentDir, fileName);
        // Create file
        try {
            newMessage.createNewFile();
        } catch (IOException e) {
            throw new RuntimeException("Cannot create file "+ fileName);
        }
        // Write message in the file
        try (BufferedWriter br = new BufferedWriter(new FileWriter(newMessage))) {
            br.write("nickname: " + this.sender + "\n");
            br.write("date: " + this.date + "\n");
            br.write("content: " + this.content + "\n");
        } catch (IOException e) {
            throw new RuntimeException("Cannot write to file "+ fileName);
        }
    }
    
    public static ChatMessage fromFile(File file) {
        ChatMessage result = null;
        try (BufferedInputStream stream = new BufferedInputStream(new FileInputStream(file))) {
            Properties currentMessage = new Properties();
            currentMessage.load(stream);
            String date = currentMessage.getProperty("date");
            String nickname = currentMessage.getProperty("nickname");
            String content = currentMessage.getProperty("content");
            result = new ChatMessage(nickname,content,date);
        } catch (IOException e) {
            throw new RuntimeException("Error: unable to read the message in: "+file.getName());
        }
        return result;
    }

    public String getSender() {
        return sender;
    }

    public String getDate() {
        return date;
    }

    public String getContent() {
        return content;
    }
}
</code></pre>
<p>The Writer:</p>
<pre class="lang-java prettyprint-override"><code>public class Writer {
    public static void main(String[] args) {
        System.out.print("Your nickname: ");
        String nickname = scanner.nextLine();

        try {
            new Writer(nickname).chat();
        } catch (Exception e) {
            System.out.print("Error: " + e.getMessage());
        } finally {
            scanner.close();
        }
    }

    private static Scanner scanner = new Scanner(System.in);
    private String nickname;
    // directory in which messages get stored
    // initialized by file named config
    private File currentDir;

    public Writer(String nickname) {
        this.nickname = nickname;
        String saveDir = new ConfigFileReader("config").getSaveDir();

        currentDir = new File(saveDir, "current");

        // create current dir if not exists
        if (!currentDir.exists()) {
            currentDir.mkdirs();
        }
    }

    public void chat() {
        System.out.println("Start chatting or type quit to exit.");
        while (true) {
            System.out.print(nickname + " &gt; ");
            String newContent = scanner.nextLine();

            if (newContent.strip().equalsIgnoreCase("quit"))
                break;

            // long millis_bygone = new Date().getTime();
            // String fileName = new Long(millis_bygone).toString();
            // Java 8
            String fileName = String.valueOf(Instant.now().toEpochMilli());

            ChatMessage message = new ChatMessage(nickname, newContent);
            try {
                message.saveToFile(currentDir, fileName);
            } catch (Exception e) {
                System.out.println("Warning: cannot write to file " + fileName);
            }
        }
    }
}
</code></pre>
<p>And finally the <code>Viewer</code>:</p>
<pre class="lang-java prettyprint-override"><code>public class Viewer {
    public static void main(String[] args) {
        try {
            new Viewer().view();
        } catch (Exception e) {
            System.out.print("Error: " + e.getMessage());
        }
    }

    // contains all messages within two sub-dirs
    private File saveDir;
    // contains messages that have to be displayed
    private File currentDir;
    // contains messages that don't have to be displayed
    private File archiveDir;
    // determines the maximal amount of messages in the current directory
    private int currentMessagesCount;
    // last message read into program
    private File lastMessage;

    public Viewer() {
        // Read configuration file
        ConfigFileReader cfReader = new ConfigFileReader("config");
        
        currentMessagesCount = cfReader.getCurrentMessagesCount();
        saveDir = new File(cfReader.getSaveDir());

        currentDir = new File(saveDir, "current");
        archiveDir = new File(saveDir, "archive");
        lastMessage = new File("no last message");

        // create save directories if don't exist
        if (!saveDir.exists()) {
            saveDir.mkdir();
        }
        if (!currentDir.exists()) {
            currentDir.mkdir();
        }
        if (!archiveDir.exists()) {
            archiveDir.mkdir();
        }

        File[] messages = currentDir.listFiles();
        Arrays.sort(messages);
    }

    public void view() {
        printAllMessages();
        while (true) {
            try {
                Thread.sleep(500);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            printNewMessage();
            checkLimit();
        }
    }

    // prints all messages immediately
    private void printAllMessages() {
        File[] messages = currentDir.listFiles();

        if (messages.length == 0) {
            return;
        }

        Arrays.sort(messages);
        for (int i = 0; i &lt; messages.length; i++) {
            ChatMessage message = ChatMessage.fromFile(messages[i]);
            printMessage(message);
        }

        lastMessage = messages[messages.length - 1];
    }

    // prints newest if there is a more recent than last read message
    private void printNewMessage() {
        File[] messages = currentDir.listFiles();
        Arrays.sort(messages);

        if (messages.length == 0) {
            return;
        }

        // add all new messages to a list and print it out reversively
        List&lt;File&gt; newMessages = new ArrayList&lt;&gt;();
        for (int i = messages.length - 1; i &gt;= 0; i--) {
            if (!messages[i].toString().equals(lastMessage.toString())) {
                newMessages.add(messages[i]);
            } else {
                break;
            }
        }

        while (newMessages.size() &gt; 0) {
            File currentMessage = newMessages.get(newMessages.size() - 1);
            ChatMessage message = ChatMessage.fromFile(currentMessage);
            printMessage(message);
            newMessages.remove(currentMessage);
            lastMessage = currentMessage;
        }

    }

    private void printMessage(ChatMessage message) {
        System.out.println(message.getDate() + " (" + message.getSender() + ")");
        System.out.println(message.getContent());
        System.out.println();
    }

    // checks if there are too much messages in currentDir
    private void checkLimit() {
        File[] messages = currentDir.listFiles();
        Arrays.sort(messages);
        int numOfSuperfluousMessages = messages.length - currentMessagesCount;
        if (numOfSuperfluousMessages &gt; 0) {
            for (int i = 0; i &lt; numOfSuperfluousMessages; i++) {
                messages[i].renameTo(new File(archiveDir, messages[i].getName()));
            }
        }
    }
}
</code></pre>
    </div>