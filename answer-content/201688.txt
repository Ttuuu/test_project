<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ol>
<li><p>The formula can be simplified:</p>

<ol>
<li>for the first four checkboxes, if any of the items are checked, multiple the number checked by 0.5 and add 0.5</li>
<li>Then add 1 if the fifth checkbox is checked.<br><br></li>
</ol>

<p>So it might be simpler to just have a reference to the first for checkboxes and then the 5th checkbox. For the first for, one can use <a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/getElementsByName" rel="nofollow noreferrer"><code>document.getElementsByName('foo')</code></a> to get a <a href="https://developer.mozilla.org/en-US/docs/Web/API/NodeList" rel="nofollow noreferrer">NodeList</a>, and then put those nodes in an array using <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from" rel="nofollow noreferrer"><code>Array.from()</code></a> and use <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice" rel="nofollow noreferrer"><code>Array.slice()</code></a> to get the first four checkboxes.</p>

<pre><code>var firstFourBars = Array.from(document.getElementsByName('foo')).slice(0, 4);
</code></pre>

<p><sub>For the record - I did consider using a CSS selector identical to that of <a href="https://codereview.stackexchange.com/a/201690/120114">the answer</a> by <a href="https://codereview.stackexchange.com/users/9357/200-success">@200_success</a> (i.e. <code>input[name=foo]:not(#bar5):checked</code>) but because the NodeList returned by <a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelectorAll" rel="nofollow noreferrer"><code>document.querySelectorAll()</code></a> is not live, that DOM query would need to be run each time. See point #3 for more details.</sub></p></li>
<li><p>Event delegation can be used to avoid adding a click handler to each checkbox in the HTML. The code below utilizes <a href="https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener" rel="nofollow noreferrer"><code>document.addEventListener()</code></a> to call the <code>calculateTotalCost</code> whenever a click occurs. Because of this change, that <a href="https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#The_event_listener_callback" rel="nofollow noreferrer">function receives a reference to the event as the first argument</a>. This allows changes based on any click anywhere but conditional logic dependent on <code>event.target</code> could be added.</p></li>
<li>DOM references can be stored in variables at the start of the script, so as to avoid multiple lookups (e.g. <code>var printCost</code>)</li>
<li><p>One other simplification:</p>

<blockquote>
<pre><code>var totalCost = 0;
var printCost = document.getElementById('calculatedCost');
totalCost = 100 * checkboxCount();
</code></pre>
</blockquote>

<p>There is little point in setting <code>totalCost</code> to <code>0</code> and then assigning it <code>100 * checkboxCount()</code>. Just assign it the latter product:</p>

<pre><code>var totalCost = 100 * checkboxCount();
</code></pre></li>
</ol>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>document.addEventListener('DOMContentLoaded', function() { //Wait for DOM to be ready
  //cache DOM references
  var printCost = document.getElementById('calculatedCost');
  var firstFourBars = Array.from(document.getElementsByName('foo')).slice(0, 4);
  var bar5 = document.forms["calculator"].elements["bar5"];

  document.body.addEventListener('click', calculateTotalCost);
  // helper function for filter
  function isChecked(checkbox) {
    return checkbox.checked;
  }

  function checkboxCount() {
    var count = firstFourBars.filter(isChecked).length;
    if (count) {
      count = count * 0.5 + 0.5;
    }
    if (bar5.checked) {
      count += 1;
    }
    return count;
  }

  function calculateTotalCost(event) {
    //could conditionally execute based on event.target
    var totalCost = 100 * checkboxCount();
    printCost.innerHTML = "$" + totalCost;
  }

});</code></pre>
<pre class="snippet-code-html lang-html prettyprint-override"><code>&lt;form id="calculator"&gt;

  &lt;fieldset&gt;
    &lt;label&gt;&lt;input type="checkbox" name="foo" id="bar1"&gt;Bar 1&lt;/label&gt;
    &lt;label&gt;&lt;input type="checkbox" name="foo" id="bar2"&gt;Bar 2&lt;/label&gt;
    &lt;label&gt;&lt;input type="checkbox" name="foo" id="bar3"&gt;Bar 3&lt;/label&gt;
    &lt;label&gt;&lt;input type="checkbox" name="foo" id="bar4"&gt;Bar 4&lt;/label&gt;
    &lt;label&gt;&lt;input type="checkbox" name="foo" id="bar5"&gt;Bar 5&lt;/label&gt;
  &lt;/fieldset&gt;

  &lt;span id="calculatedCost"&gt;&lt;/span&gt;
&lt;/form&gt;</code></pre>
</div>
</div>


<h2>Edit</h2>

<p>I forgot to mention that in the modified code above, it waits for the DOM to be ready before before querying it (notice the first line <code>document.addEventListener('DOMContentLoaded', function() { //Wait for DOM to be ready</code>). Not only does it prevent attempts to access DOM elements before they exist, but the variables are scoped to the callback function instead of the global namespace. </p>
    </div>