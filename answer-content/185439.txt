<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Feedback</h2>

<p>The code looks like it works well and utilizes the API in a good manner. The form markup looks very simplistic. The JavaScript code uses the fetch API in a good way and handles the image arrays appropriately. As far as tips for looping through the results, see the last suggestion below.</p>

<h2>Suggestions</h2>

<p>Below are a few tips for cleaning up the Javascript a little. Most of the explanations are based on experience and reading posts like <a href="https://ilikekillnerds.com/2015/02/stop-writing-slow-javascript/" rel="nofollow noreferrer">this one</a>.</p>

<h3>Form submission handler</h3>

<p>The first part of the JavaScript starts by registering the <code>onsubmit</code> property to the form.</p>

<blockquote>
<pre><code>document.querySelector('form').onsubmit = function(e) {
</code></pre>
</blockquote>

<p>This approach works but if there was a need to have multiple functions applied when the form was submitted, that original function would need to be modified or wrapped in another function that would call it. A slightly different approach would be to utilize <a href="https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener" rel="nofollow noreferrer">Element.addEventListener()</a>, passing <code>'submit'</code> as the eventtype and the function as the listener</p>

<pre><code>document.querySelector('form').addEventListener('submit', function(e) { }
    e.preventDefault();
    //...
);
</code></pre>

<p>And instead of using <code>document.querySelector('form')</code> to select the form element, <code>document.forms[0]</code> could be used, <code>document.getElementById()</code> could be used if an <em>id</em> attribute is added to that form element, or even simpler, <code>document.body</code> can be used because the event is bubbled up through the DOM.</p>

<pre><code>document.body.addEventListener('submit', function(e) {
    e.preventDefault();
    //...
);
</code></pre>

<h3>DOM element references should be cached</h3>

<p>The code calls <code>document.getElementById()</code> each time the form is submitted to access the form fields. Instead of those lookups occurring each time the form is submitted, a more efficient approach would be to store those references in a variable outside the form submission handler. Since those don't change, <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const" rel="nofollow noreferrer">const</a> can be used.</p>

<pre><code>const searchtermElement = document.getElementById('st');
const sel = document.getElementById('numrequests');
const resultContainer = document.getElementById('result');
</code></pre>

<p>Then those can be used inside the form submission handler:</p>

<pre><code>let searchterm = searchtermElement.value.trim()
let numreq = sel.options[sel.selectedIndex].value
</code></pre>

<p>And actually those variables <code>searchterm</code>, <code>numreq</code> and <code>p</code> don't get reassigned so <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const" rel="nofollow noreferrer">const</a> can be used for those instead of <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let" rel="nofollow noreferrer">let</a>.</p>

<h3>Form Submit handler return values?</h3>

<p>There are a few <code>return</code> statements that return the value of assigning the inner HTML of the result element. That isn't necessary. If anything was returned, I would think a value equivalent to <code>false</code> should be returned, so as to avoid the default form submission handler, but there is already a call to <code>e.preventDefault()</code>.</p>

<h3>Looping through results</h3>

<p>Instead of calling <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach" rel="nofollow noreferrer">Array.forEach()</a> and appending to <code>txt</code>, <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map" rel="nofollow noreferrer">Array.map()</a> could be used to get an array of strings for the listing and then <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/join" rel="nofollow noreferrer">Array.join()</a> could be used to add the array elements as the inner HTML of the results container. See this in action in the snippet below. Notice that the function used in the call to <code>.map()</code> is split out to a separate function and <code>resp</code> is not defined there. Fortunately the third argument of the callback to <code>.map()</code> is a reference to the array so it can tell when the last element is processed.</p>

<p>Notice how the use of <code>.map()</code> allows the callback function to be moved outside of the code where it is called. With this approach, there is no access to the variable <code>txt</code>. Thus there is no dependency on that variable. This is loosely one aspect of the <a href="https://medium.com/@fleeboy/dependency-injection-in-javascript-9db9ea6e4288" rel="nofollow noreferrer">dependency injection principle</a> - one of the <a href="https://medium.com/@cramirez92/s-o-l-i-d-the-first-5-priciples-of-object-oriented-design-with-javascript-790f6ac9b9fa" rel="nofollow noreferrer">S.O.L.I.D. principles</a>.</p>

<p>One possible way to simplify that listing HTML code is to use a <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals" rel="nofollow noreferrer">template literal</a>. I will leave it as an exercise to the reader. Also, the function could return an element (e.g. from <a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/createElement" rel="nofollow noreferrer">document.createElement()</a>) but then the elements would need to be appended to the results container and any existing elements would need to be cleared.</p>

<h3>Measuring time taken to retrieve, parse and display results after each form submission</h3>

<p>Originally I was thinking of using a function like <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/now" rel="nofollow noreferrer"><code>Date.now()</code></a> to compute the time before and after the results have been fetched and processed. However, <a href="https://stackoverflow.com/a/1975103/1575353">this SO answer</a> suggests using the now standard API <a href="https://developer.mozilla.org/en-US/docs/Web/API/Performance.now" rel="nofollow noreferrer">performance.now()</a> (unless you need to support older browsers like IE 9 or earlier).</p>

<p>In the snippet below, I added a <code>&lt;div&gt;</code> to hold the time output below the form. Before the <code>fetch()</code> call, there time is stored in a constant:</p>

<pre><code>const startTime = performance.now();
</code></pre>

<p>And after the results are processed, that is used to calculate the number of milliseconds:</p>

<pre><code>timeOutputContainer.innerHTML = 'time taken: '+(performance.now() - startTime) + ' ms';
</code></pre>

<h3>Sanitizing data</h3>

<p>I must admit actually haven't dealt with sanitizing data much via JavaScript but I have found various techniques:</p>

<ul>
<li><p>While it was written back in 2012, <a href="http://shebang.brandonmintern.com/foolproof-html-escaping-in-javascript/" rel="nofollow noreferrer">this post</a> claims to have a foolproof technique (and it even discusses the code you have - see <a href="http://shebang.brandonmintern.com/foolproof-html-escaping-in-javascript/#hack-1-inline" rel="nofollow noreferrer">Hack #1</a>). </p>

<p>So with that approach, your code could be more like: </p>

<pre><code>function escapeOutput(str) {
    var div = document.createElement('div');
    div.appendChild(document.createTextNode(str));
    return div.innerHTML;
}
</code></pre></li>
<li><p>After reading <a href="http://wesbos.com/sanitize-html-es6-template-strings/" rel="nofollow noreferrer">this article</a> it looks like the <a href="https://github.com/cure53/DOMPurify" rel="nofollow noreferrer">DOMPurify</a> library can help along with those template literals mentioned above. <a href="https://jsfiddle.net/aelliott/nqvzbqdh/5/" rel="nofollow noreferrer">Try out my jsfiddle</a> after reading that blog post.</p></li>
</ul>

<p></p><div class="snippet" data-lang="js" data-hide="true" data-console="false" data-babel="false">
<div class="snippet-code snippet-currently-hidden">
<pre class="snippet-code-js lang-js prettyprint-override"><code>const searchtermElement = document.getElementById('st');
const sel = document.getElementById('numrequests');
const resultContainer = document.getElementById('result');
const timeOutputContainer = document.getElementById('timeOutput');

const noimage = '&lt;img src="img/noimage.gif"&gt;'
    
document.body.addEventListener('submit', function(e) {
  e.preventDefault()

  const searchterm = searchtermElement.value.trim()
  const numreq = sel.options[sel.selectedIndex].value

  const p = {
    category: 'vehicle/parts',
    oodlepartnerid: 'TEST',
    oodleexclude: 'ebay',
    searchterm: searchterm,
    numreq: numreq
  };

  const oodleurl = 'https://api.oodle.com/api/v2/listings?key=' + p.oodlepartnerid + '&amp;region=usa&amp;q=' + encodeURIComponent(p.searchterm) + '&amp;category=' + p.category + '&amp;num=' + p.numreq + '&amp;sort=ctime_reverse&amp;exclude_sources=' + p.oodleexclude + '&amp;format=json&amp;jsoncallback=none';
  const startTime = performance.now();

  fetch(oodleurl)
    .then(resp =&gt; {
      if (resp.status === 200) {
        return resp.json()
      } else {
        throw new Error('There was a problem with the API request.')
      }
    })
    .then(resp =&gt; {
      if (Array.isArray(resp.listings) &amp;&amp; resp.listings.length) {
        const listings = resp.listings.map(getListingOutput);
        resultContainer.innerHTML = listings.join();

      } else {
        resultContainer.innerHTML = 'There are no results to display.';
      }
      timeOutputContainer.innerHTML = 'time taken: '+(performance.now() - startTime) + ' ms';
    })
    .catch(function(error) {
      console.log('error', error)
    })

});

function getListingOutput(v, i, listings) {
  let listingHTML = '';
  if (Array.isArray(v.images) &amp;&amp; v.images.length) {
    listingHTML += (v.images[0].hasOwnProperty('src') ? '&lt;img src="' + v.images[0].src + '"&gt;&lt;br&gt;' : noimage + '&lt;br&gt;')
  } else {
    listingHTML += noimage + '&lt;br&gt;'
  }
  listingHTML += 'TITLE: ' + (v.hasOwnProperty('title') &amp;&amp; v.hasOwnProperty('url') ? '&lt;a href="' + escapeOutput(v.url) + '" target="_blank"&gt;' + escapeOutput(v.title) + '&lt;/a&gt;' : 'n/a') + '&lt;br&gt;'
  listingHTML += 'BODY: ' + (v.hasOwnProperty('body') ? escapeOutput(v.body) : 'n/a') + '&lt;br&gt;'
  listingHTML += 'CITY: ' + (v.location.hasOwnProperty('name') ? escapeOutput(v.location.name) : 'n/a') + '&lt;br&gt;'
  listingHTML += 'STATE: ' + (v.location.hasOwnProperty('state') ? escapeOutput(v.location.state) : 'n/a') + '&lt;br&gt;'
  listingHTML += 'COUNTRY: ' + (v.location.hasOwnProperty('country') ? escapeOutput(v.location.country) : 'n/a') + '&lt;br&gt;'
  listingHTML += 'PRICE: ' + (v.attributes.hasOwnProperty('price_display') ? escapeOutput(v.attributes.price_display) : 'n/a') + '&lt;br&gt;'
  listingHTML += 'POSTED: ' + (v.hasOwnProperty('ctime') ? epochToDate(v.ctime) : 'n/a') + '&lt;br&gt;'
  if (i + 1 !== listings.length) listingHTML += '&lt;hr&gt;';
  return listingHTML;
}

function escapeOutput(str) {
    var div = document.createElement('div');
    div.appendChild(document.createTextNode(str));
    return div.innerHTML;
}

function epochToDate(epoch) {
  if (epoch &lt; 10000000000) {
    epoch *= 1000
    var epoch = epoch + (new Date().getTimezoneOffset() * -1)
    return new Date(epoch).toLocaleDateString()
  }
}</code></pre>
<pre class="snippet-code-html lang-html prettyprint-override"><code>&lt;h1&gt;Javascript Experiments - fetch(ing) Data from the Oodle API&lt;/h1&gt;

&lt;form&gt;
  &lt;input id="st" type="text"&gt;
  &lt;select id="numrequests"&gt;
    &lt;option value="5" selected&gt;5&lt;/option&gt;
    &lt;option value="10"&gt;10&lt;/option&gt;
    &lt;option value="15"&gt;15&lt;/option&gt;
    &lt;option value="20"&gt;20&lt;/option&gt;
    &lt;option value="25"&gt;25&lt;/option&gt;
  &lt;/select&gt;
  &lt;input type="submit" value="Search It Up!"&gt;
&lt;/form&gt;
&lt;div id="timeOutput"&gt;&lt;/div&gt;
&lt;p id="result"&gt;&lt;/p&gt;</code></pre>
</div>
</div>

    </div>