<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There are some obvious possible simplifications for elegance, if not necessarily for speed.</p>

<p>The <code>while</code> condition should be written as a double-ended inequality:</p>

<pre><code>while 0 &lt; n &lt; pop_max:
    â€¦
</code></pre>

<p>The variable <code>j</code> is unused.  The convention is to use <code>_</code> as the name of a "throwaway" variable.</p>

<p>The <code>if</code>-<code>elif</code> chain can be eliminated with a smarter <code>randint()</code> call:</p>

<pre><code>for j in range(n):
    n += randint(-1, 2)
</code></pre>

<p>NumPy is overkill here, when all you want to know whether the population went extinct.  The built-in <a href="https://docs.python.org/3/library/functions.html#sum" rel="nofollow noreferrer"><code>sum()</code></a> function can do the counting for you.</p>

<p>Each simulation run is independent.  I'd put the code in a function for readability.</p>

<pre><code>from random import randint

def population(pop_max=100):
    n = 1
    while 0 &lt; n &lt; pop_max:
        for _ in range(n):
            n += randint(-1, 2)
    return n

iterations = 100000
print(sum(population() == 0 for _ in range(iterations)) / iterations)
</code></pre>
    </div>