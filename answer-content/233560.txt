<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1><code>ref</code> parameters</h1>

<p>Make sure you fully understand what <code>ref</code> does and when it's appropriate to use it.</p>

<p><code>ref</code> gives you an <em>alias to the variable passed into the method</em>, so only use <code>ref</code> when you need to modify <em>the original variable passed by the caller</em>.</p>

<p><code>List&lt;T&gt;</code> is already a reference type: anything passed to a <code>List&lt;T&gt;</code> parameter will already be a reference to an object of that type. You can happily modify the object via that reference without needing <code>ref</code>.</p>

<h1>Parameter types</h1>

<p>It's a good rule of thumb to accept the least specific type possible as a parameter.</p>

<p>Because you are only calling <code>Add</code> on the given lists, you don't actually require a concrete <code>List&lt;T&gt;</code> type to be passed. All lists that you'll ever be interested in implement <code>IList&lt;T&gt;</code> which has an <code>Add</code> method, so you should accept <code>IList&lt;T&gt;</code> instead.</p>

<p>You could go even further: <code>IList&lt;T&gt;.Add</code> is inherited from <code>ICollection&lt;T&gt;</code> so if you don't care about order then go ahead and loosen those parameter types to <code>ICollection&lt;T&gt;</code>.</p>

<h1>Method header</h1>

<p>Good on you for documenting your public methods! It's a great practice to get into; keep on doing it.</p>

<p>I do a have a few suggestions:</p>

<pre><code>/// &lt;summary&gt;
/// Deconstructs a tuple and stores each indivdual value into a provided non-null List
/// &lt;/summary&gt;
/// &lt;typeparam name="T1"&gt;type of tuple element&lt;/typeparam&gt;
/// &lt;param name="value"&gt;Instance which calls this method&lt;/param&gt;
/// &lt;param name="List1"&gt;instance of a List which holds type T1 &lt;/param&gt;
</code></pre>

<p>You (rightly) specify in the summary that the list must be non-null, but you don't actually check for <code>null</code> anywhere: your code will crash if <code>null</code> is passed.</p>

<p>Common convention in C# is to perform argument validation at the start of the method and throw an appropriate <code>ArgumentException</code> (or one of its child types):</p>

<pre><code>public static void Deconstruct&lt;T1&gt;(this Tuple&lt;T1&gt; value, List&lt;T1&gt; List1)
{
    if (List1 is null) throw new ArgumentNullException(nameof(List1));
    // ...
}
</code></pre>

<p>You could claim, "What's the difference? It'll just crash anyway with an ArgumentNullException instead!"</p>

<p>The difference is:</p>

<ol>
<li>The exception is more clear to the user that <em>they</em> got the argument wrong, and</li>
<li>By performing validation at the start you fail <em>fast</em>, rather than at some point in the middle. Imagine what happens in your <code>Deconstruct&lt;T1, T2&gt;</code> if the first list is non-null but the second one is null -- you'll have modified only one of the given lists! Who gets to clean up the state of your now half-modified input arguments?</li>
</ol>

<p>While we're at it, change that parameter name from <code>List1</code> to <code>list</code>. C# convention dictates <code>camelCase</code> for parameter names, and the <code>1</code> is redundant for this overload.</p>

<h1>Deconstruction</h1>

<pre><code>public static void Deconstruct&lt;T1, T2&gt;(this ValueTuple&lt;T1, T2&gt; value, ref List&lt;T1&gt; List1, ref List&lt;T2&gt; List2)
{
    var (a, b) = value;
    List1.Add(a);
    List2.Add(b);
}
</code></pre>

<p>You gain nothing by doing <code>var (a, b) = value;</code>. It just adds an unnecessary deconstruction of <code>value</code>. You can already access the individual elements using the <code>ItemN</code> fields:</p>

<pre><code>public static void Deconstruct&lt;T1, T2&gt;(this ValueTuple&lt;T1, T2&gt; value, IList&lt;T1&gt; list1, IList&lt;T2&gt; list2)
{
    list1.Add(value.Item1);
    list2.Add(value.Item2);
}
</code></pre>

<p>I might also suggest using a slightly different name from <code>Deconstruct</code>, since the compiler <a href="https://docs.microsoft.com/en-us/dotnet/csharp/deconstruct#deconstructing-user-defined-types" rel="noreferrer">sometimes gives special meaning to methods called <code>Deconstruct</code></a>. It wouldn't <em>actually</em> do anything special in this case because it doesn't meet all the requirements, but it might still mislead or confuse someone who's familiar with that feature. Maybe name them <code>DeconstructToLists</code> or something -- it avoids that ambiguity while making it more clear what it does and what its side effect is.</p>

<hr>

<p>Aside from that, I don't mind the repeatedness of the code. C# does not have first-class support for iterating over generic type arguments so any attempt to generalize your code will certainly result in a mess of reflection and boxing. There is such a small, finite set of generic flavours of <code>Tuple</code> and <code>ValueTuple</code> that I wouldn't invest the time in generalizing it further.</p>
    </div>