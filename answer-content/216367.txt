<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Not sure if there is any advantage of having 4 classes (<code>CardClub, CardSpade, CardHeart, CardDiamond</code>) with one property Rank, </p>

<p>compared to </p>

<p>a <code>Card</code> class with 2 properties, <code>Suit (of Type Suit enum) and Rank (of Type Rank enum)</code>.</p>

<p>Have a <code>CardFactory</code> class, that has a static method </p>

<pre><code>Card CreateCard(Suit suit, Rank rank) =&gt; new Card(suit, rank);
</code></pre>

<p>We could have a <code>HandTestDataGenerator</code> class with a static method for generating test hands:</p>

<pre><code>public static IList&lt;Card&gt; CreateCards(Dictionary&lt;Suit, List&lt;Rank&gt; cards) =&gt;
    cards.SelectMany(x =&gt; x.Value.Select(rank =&gt; new Card(x.Key, rank));
</code></pre>

<p>Now for each test data, create a static method in <code>HandTestDataGenerator</code> like:</p>

<pre><code>IList&lt;Card&gt; GenerateLowPairHand()
{
    var lowPairHand = new Dictionary&lt;Suit, List&lt;Rank&gt;&gt;();
    lowPairHand.Add(Suit.Club, new List&lt;Rank&gt;{ Rank.Ace, Rank.Three });
    //Add other suits and ranks here
    return CreateCards(lowPairHand);
}
</code></pre>

<p>From TestMethod, call </p>

<p><code>SuperCard[] testHand = HandTestDataGenerator.GenerateLowPairHand();</code></p>
    </div>