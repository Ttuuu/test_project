<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I wanted to write a comment, but it got a bit too long, so I made it into an answer.</p>

<p>First of all: This question is lacking context. What is it used for, what does it do, how is it used? You could have explained this in your question. However, I did follow your link and found out that this is a tiny part of an app that: "... scrapes equity data from iextrading API, does statistical analytics, and returns daily price target articles for ~8000 equities in NYSE, NASDAQ and CBOE markets in HTML forms.". Oh! Not my area of expertise.</p>

<p>I can't run your code, so I can't say whether the code achieves its final purpose, but I will assume it does. I will restrict myself to looking at your code and make some comments.</p>

<p>Your class file starts with:</p>

<pre><code>date_default_timezone_set("America/New_York");
ini_set('max_execution_time', 0);
ini_set('memory_limit', '-1');
set_time_limit(0);

require_once __DIR__ . "/HTMLviewEQ.php";
</code></pre>

<p>I don't understand what this is doing here? Clearly this is not a file that is meant to be run as a stand alone entity. Why then, is this here? I see you do this in all your class files. In case you want to change the default time zone, you'll have to change it everywhere. Does that make sense? Why not put this in 1 central location in your app?</p>

<p>Whenever I look at new code I try to understand the intent behind it. In the case of a single PHP class, the first real line is always a good start. It is:</p>

<pre><code>class HTMLviewEQ extends EQ implements ConstEQ
</code></pre>

<p>Now I get that <code>EQ</code> means <code>Equity</code>, that's what the whole program is about. Given the <code>HTMLview</code> part, I think this class must have something to do with HTML output. However the class names <code>EQ</code> and <code>ConstEQ</code> don't give much away.</p>

<p>Let me see what methods there are:</p>

<pre><code>public static function getBaseHTML($array, $page_id, $class_obj)
public static function getCandlestickChart($arr)
public static function getMobileEquilibrium($arr)
public static function getQuoteHTML($a)
public static function getEquilibriumHTML($arr)
</code></pre>

<p>Well, they all 'get' something, that's obvious. I have no idea what 'BaseHTML' could be? The only thing I really understand is the 'CandlestickChart'. That must return a chart, and although it doesn't say, that must be in HTML.</p>

<p>Since it looks like all method output HTML, I wonder why this class is called <code>HTMLviewEQ</code>. It doesn't produce a 'view' by itself. It is probably only used to construct one?</p>

<p>Argument names like <code>$array</code>, <code>$arr</code> or <code>$a</code>, don't really tell me what they represent. Worse, I don't even know if they contain the same content, or not. I don't think so, otherwise you would have used the same name. These names are basically meaningless. The same is true for <code>$class_obj</code>. The only meaningful argument is <code>$page_id</code>, if only I knew what pages you're talking about.</p>

<p>Names are very important in any programming language. They allow you to tell the reader what they represent and, with that, what your code does. Good names are: <code>customerName</code>, <code>CurrencySymbol</code> and <code>ClockTicks</code>. Bad names are: <code>myConst</code>, <code>bksp</code>, <code>symb</code> and <code>strObj</code>. </p>

<p>One of my personal hangups are unnecessary abbreviations. Why should I have to guess what a name stands for? When I encounter: <code>$dt</code>, <code>$comp</code>, <code>$fd</code> and <code>$ld</code> in your code I have to look up what they mean. Why? What's wrong with <code>$currentDate</code>, <code>$companyName</code>, <code>$firstChartDate</code> and <code>$lastChartDate</code>? Slightly longer names won't make any difference to the speed with which the code is executed, but they make a big difference to the reader.</p>

<p>At this point this class, and its methods, don't make any sense to me. They're not 'talking'. For all I know you could have just thrown a few overly big functions together to make this class. I can't see any design or structure to it.</p>

<p>I will have to accept that I can't understand the code, and look at what is going on in each method.</p>

<p><code>getBaseHTML()</code> is <strong>BIG</strong>. Line wrap on! Basically it's <em>way</em> too big. This is not good programming. This method doesn't do one thing, it does lots of things. This is not a good way to produce HTML. Code and text are completely mixed up in one big code-slurry. It's inflexible, and difficult to understand. </p>

<p>Now I don't want to say: You have to use a <a href="http://acmeextension.com/best-templating-engine/" rel="nofollow noreferrer">templating package</a>, but this is the opposite. PHP code, text and HTML are all mixed together here. Oh, there's some Javascript too. It doesn't make sense and is very difficult to maintain.</p>

<p>To start I would separate the text from the HTML, and probably put it in a database or a separate file. Earmark them. Something like:</p>

<pre><code>$articleText = ['highlight'    =&gt; "{companyName}: Seven price sets are being approximated for {wrappedSymbol} lowest supports, {wrappedSymbol} average equilibriums and {wrappedSymbol} highest resistances. Each set has a \"percentage\", which indicates that if {wrappedSymbol} has been outperforming or downperforming during that day.",
                'abstract'     =&gt; "{wrappedSymbol} - {companyName}: Equilibrium price is important for {wrappedSymbol} institutional trading/investing, {wrappedSymbol} retail trading/investing and other types of short/long positions. They provide supplementary perspectives to traders for {wrappedSymbol} day/swing trading, {wrappedSymbol} low/high frequency trading, {wrappedSymbol} put/call option forecasting, {wrappedSymbol} forward/reverse trading/investing and {wrappedSymbol} algorithmic trading. Average equilibrium price is necessary for {wrappedSymbol} Buy/Sell/Hold decision makings and {wrappedSymbol} rating for analyst coverages and equity due diligence. They are also beneficial for {wrappedSymbol} trading volume forecasting, {wrappedSymbol} daily volatility approximating, {wrappedSymbol} resistance and support evaluating, {wrappedSymbol} stop loss calculations, among other quantitative advantages. Static charts cannot provide such information to trading and investing entities.",
                'legalWarning' =&gt; "All {symbol} information are connected to delayed 60-seconds data pipelines from version 1.0 API at https://api.iextrading.com/1.0/, in addition to other financial and economical data. All computations are automatic, currently independent of all news, sentiments, external parameters and internal corporate factors. This page is only an alpha prototype and is only updated a few times per hour based on our dynamic indices and latest quote scraped from that API. It may not be accessible at all times, and inadvertent or unknown inaccuracies exist. All information are provided under \"AT YOUR OWN FULL RISKS\" and \"NO LIABILITIES, UNDER NO CIRCUMSTANCES\" terms. Trade Safe and Happy Investing!"];
</code></pre>

<p>And then use these strings to create your HTML output. In the end proper templating is most flexible, but something like this will do for now. You can easily edit these string, and you could even write an UI for that. HTML can be used to structure content, whereas the text should conveys meaning. These are two different things.</p>

<p>There's lots of other things to say about your code, but let me stop here. I'll summarize:</p>

<ul>
<li>Class files should only contain a class, nothing else.</li>
<li>PHP names should be meaningful: <code>$quoteAmount</code> instead of <code>$a</code>.</li>
<li>Methods should not be overly long and do one thing.</li>
<li>Separate HTML from texts. Don't mix everything up. </li>
</ul>

<p>OOP is more than just a bit of syntax, it's a method. A way to structure your thoughts and code. You're clearly not yet thinking in object and classes. To you they must seem more like a hindrance than a tool. </p>

<p>I always found <a href="https://phptherightway.com/" rel="nofollow noreferrer">PHP The Right Way</a> a good starting point to learn more. You can find everything there, from a <a href="https://phptherightway.com/#code_style_guide" rel="nofollow noreferrer">Code Style Guide</a>, <a href="https://phptherightway.com/#coding_practices" rel="nofollow noreferrer">Coding Practices</a>, to <a href="https://phptherightway.com/#templating" rel="nofollow noreferrer">Templates</a> and <a href="https://phptherightway.com/#security" rel="nofollow noreferrer">Security</a>. A lot of essential resources at your fingertips!</p>

<p>And when you're tired of it all, you could have a look at <a href="http://www.phpthewrongway.com" rel="nofollow noreferrer">PHP The Wrong Way</a>. To counterbalance it all a bit.</p>
    </div>