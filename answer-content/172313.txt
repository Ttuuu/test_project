<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You should rewrite your <code>TokenType</code> enum. I'd add a field <code>raw</code> (you might need to come up with a different name to better suit your needs) of type <code>String</code>. It would contain <code>"+"</code>, <code>"-"</code>, <code>"*"</code> and <code>"/"</code> for <code>TokenType.OP_PLUS</code>, <code>OP_MINUS</code>, <code>OP_MUL</code> and <code>OP_DIV</code> respectively. You could then have a <code>Map&lt;String, TokenType&gt;</code> to quickly look up the relevant <code>TokenType</code>s and get rid of that huge <code>switch</code>.</p>

<p>I'd also structure your tokens differently. Instead of only having a <code>TokenType</code> I'd create specific <code>interface</code>s for them. Say, for <code>OP_EQ/GT/LT</code> tokens. They in some way or another compare the parameters and alter them. You could have a <code>interface ComparisonToken</code> (symbolic name, feel free to come up with a better one) in which you'd have a method <code>compare(ExpressionAST lhs, ExpressionAST rhs)</code>. That'd make your at least a little bit easier and allow you to simplify <code>ComparisonExpressionAST</code>'s <code>evaluate</code> method. The same goes for <code>OP_PLUS/MINUS/DIV/MUL</code>.</p>

<p>In <code>TokenStream</code> in <code>peek(int)</code> you have the following code:</p>

<pre><code>    try {
        return expression.substring(pos, pos + n);
    } catch (StringIndexOutOfBoundsException e) {
        return "";
    }
</code></pre>

<p>but you actually could (and IMO it would be better to) write</p>

<pre><code>    return expression.substring(pos, Math.min(expression.length(), pos + n);
</code></pre>

<p>The same goes to <code>next(int)</code> (but remember to increment pos by <code>Math.min(...)</code>, not <code>n</code>)</p>
    </div>