<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I have some suggestions for you, good job on the code!</p>
<h2>Always add the empty diamond operator, even if defined in the left-hand side</h2>
<p>If you don’t add the diamond, Java will use the old raw types instead of the generic types; those are only kept for compatibility.</p>
<p>Here is a good explanation with more details: <a href="https://stackoverflow.com/a/4167148/12511456">https://stackoverflow.com/a/4167148/12511456</a></p>
<p><strong>Before</strong></p>
<pre class="lang-java prettyprint-override"><code>cache = new HashMap(capacity);
</code></pre>
<p><strong>After</strong></p>
<pre class="lang-java prettyprint-override"><code>cache = new HashMap&lt;&gt;(capacity);
</code></pre>
<h2>Check if the value is present in a Map</h2>
<p>Since you are using both <code>java.util.Map#containsKey</code> and <code>java.util.Map#get</code>, you can save some computation by using the <code>get</code> only and check if the value is null.</p>
<p>But, keep in mind this technique won’t work if you allow the map to have a null key :).</p>
<p><strong>Before</strong></p>
<pre class="lang-java prettyprint-override"><code>if (cache.containsKey(key)) {
   Node node = cache.get(key);
   //[...]
}
</code></pre>
<p><strong>After</strong></p>
<pre class="lang-java prettyprint-override"><code>Node node = cache.get(key);
if (node != null) {
   //[...]
}
</code></pre>
<h2>Return the value as soon you have it, instead of storing it in a variable</h2>
<p>I must admit that this method is not a favorite of every programmer, and can be hated, since you will have to use multiple return in the same block of code.</p>
<p>In my opinion, adding multiple returns shorten the code, reduce the <a href="https://blog.codinghorror.com/flattening-arrow-code/" rel="nofollow noreferrer">arrow code</a>, make shorter stack traces (by leaving the method faster, you get fewer lines) and block invalid states before they reach your code (<a href="https://refactoring.com/catalog/replaceNestedConditionalWithGuardClauses.html" rel="nofollow noreferrer">guard clauses</a>).</p>
<p>Examples:</p>
<p><strong>Before</strong></p>
<pre class="lang-java prettyprint-override"><code>public int get(int key) {
   int value = -1;

   Node node = cache.get(key);
   if (node != null) {
      remove(node);
      append(node);
      value = node.value;
   }

   return value;
}
</code></pre>
<p><strong>After</strong></p>
<pre class="lang-java prettyprint-override"><code>public int get(int key) {
   Node node = cache.get(key);

   if (node == null) {
      return -1;
   }

   remove(node);
   append(node);

   return node.value;
}
</code></pre>
<h2>Extract some of the logic to methods.</h2>
<p>To reduce the size of your methods, you can extract the logic blocks in methods.</p>
<p><strong>Before</strong></p>
<pre class="lang-java prettyprint-override"><code>public void put(int key, int value) {
   Node currentNode = cache.get(key);

   if (currentNode != null) {
      remove(currentNode);
      currentNode.value = value;
      append(currentNode);
   } else {
      if (cache.size() == capacity) {
         cache.remove(tail.prev.key);
         remove(tail.prev);
      }

      Node node = new Node(key, value);
      append(node);
      cache.put(key, node);
   }
}
</code></pre>
<p><strong>After</strong></p>
<pre class="lang-java prettyprint-override"><code>public void put(int key, int value) {
   Node currentNode = cache.get(key);

   if (currentNode != null) {
      updateNodeValue(value, currentNode);
   } else {
      createNewNode(key, value);
   }
}

private void createNewNode(int key, int value) {
   if (cache.size() == capacity) {
      cache.remove(tail.prev.key);
      remove(tail.prev);
   }

   Node node = new Node(key, value);
   append(node);
   cache.put(key, node);
}

private void updateNodeValue(int value, Node currentNode) {
   remove(currentNode);
   currentNode.value = value;
   append(currentNode);
}
</code></pre>
<h1>Refactored code</h1>
<pre class="lang-java prettyprint-override"><code>public class LRUCache {
   private final Node head = new Node(0, 0);
   private final Node tail = new Node(0, 0);
   private final Map&lt;Integer, Node&gt; cache;
   private final int capacity;

   public LRUCache(int capacity) {
      this.capacity = capacity;
      cache = new HashMap&lt;&gt;(capacity);
      head.next = tail;
      tail.prev = head;
   }

   public int get(int key) {
      Node node = cache.get(key);

      if (node == null) {
         return -1;
      }

      remove(node);
      append(node);

      return node.value;
   }

   public void put(int key, int value) {
      Node currentNode = cache.get(key);

      if (currentNode != null) {
         updateNodeValue(value, currentNode);
      } else {
         createNewNode(key, value);
      }
   }

   private void createNewNode(int key, int value) {
      if (cache.size() == capacity) {
         cache.remove(tail.prev.key);
         remove(tail.prev);
      }

      Node node = new Node(key, value);
      append(node);
      cache.put(key, node);
   }

   private void updateNodeValue(int value, Node currentNode) {
      remove(currentNode);
      currentNode.value = value;
      append(currentNode);
   }

   private void remove(Node node) {
      node.prev.next = node.next;
      node.next.prev = node.prev;
   }

   private void append(Node node) {
      Node headNext = head.next;
      head.next = node;
      headNext.prev = node;
      node.prev = head;
      node.next = headNext;
   }

   private class Node {
      Node prev, next;
      int key, value;

      Node(int key, int value) {
         this.key = key;
         this.value = value;
      }
   }
}
</code></pre>
    </div>