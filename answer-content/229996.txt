<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Style</h1>

<p>I suggest you check PEP0008 <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">https://www.python.org/dev/peps/pep-0008/</a> the official Python style guide while writing your code and the following goes accordingly:</p>

<ul>
<li><strong>Docstrings:</strong> Python Docstring is the documentation string which is string literal, and it occurs in the class, module, function or method definition, and it is written as a first statement. Docstrings are accessible from the doc attribute for any of the Python object and also with the built-in help() function can come in handy. I suggest you include docstrings to your functions indicating what they do and what they return instead of writing a comment above each function.</li>
<li><p><strong>Python naming conventions:</strong> </p>

<p><code>def getCombinations(elementTupleParam, rParam):</code></p>

<p><code>def partialCombinations(prevTuple, prevVisitedIndex):</code></p>

<p>Function names should be lowercase, with words separated
by underscores as necessary to improve readability same goes for
parameter names.</p></li>
<li><strong>Descriptive variable names:</strong> <code>thisIndex</code> <code>thisTuple</code> <code>prevTuple</code> are examples of bad non-descriptive names. Names should reflect the significance of the variable/function/parameter they represent and the less ambiguous they are, the more readable is your code.</li>
</ul>

<h1>Code</h1>

<ul>
<li><strong>Global variables:</strong> are bad in Python and programming languages in general and are advised against. I suggest enclosing variables inside functions. The reason they are bad that they may allow functions to have hidden/hard to detect side effects leading to an increased complexity potentially leading to Spaghetti code. Examples of good use of global variables include: algorithm optimization - caching and memoization. </li>
<li><p>There is a built-in Python library <code>itertools</code> that does the same functionality using <code>itertools.combinations()</code> which saves you the effort of implementing the thing yourself.</p>

<p><strong>Code can be shortened into the following:</strong>
And according to GZO's comment, there is no need for the warpper function <code>get_combinations()</code>, use <code>combinations()</code> directly. I included it just for the sake of the example.</p>

<pre><code>from itertools import combinations


def get_combinations(n: list, r: int):
    """Return combinations iterator."""
    return combinations(n, r)


if __name__ == '__main__':
    print(list(get_combinations([2, 3, 4], 2)))
</code></pre></li>
</ul>

<p><strong>Check these references(regarding global variables):</strong></p>

<ul>
<li><p><a href="https://softwareengineering.stackexchange.com/questions/148108/why-is-global-state-so-evil">https://softwareengineering.stackexchange.com/questions/148108/why-is-global-state-so-evil</a></p></li>
<li><p><a href="https://stackoverflow.com/questions/19158339/why-are-global-variables-evil">https://stackoverflow.com/questions/19158339/why-are-global-variables-evil</a></p></li>
</ul>
    </div>