<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The other answers are fine. Here is a mathematical analysis of the problem you're trying to solve.</p>

<p>If this code is, for some reason, used in a performance-critical scenario, you can calculate the sum to <span class="math-container">\$m\$</span> in <span class="math-container">\$O(1)\$</span> time.</p>

<p>Notice that:</p>

<p><span class="math-container">$$
\begin{align}
1-2+3-4+5-6\dots m &amp;= -\sum_{n=1}^{m}n(-1)^n \\
&amp;= \sum_{n=1}^{m}n(-1)^{n-1} \\
&amp;= \frac{1}{4}-\frac{1}{4}(-1)^m(2m+1) \; ^*
\end{align}
$$</span></p>

<p>* There was a typo in my original comment.</p>

<p>Because you only want to see every 10th result, we can substitute <span class="math-container">\$m=10u\$</span> where <span class="math-container">\$u\in\mathbb{Z}\$</span>. This is fortunate because for all integers <span class="math-container">\$(-1)^{10u} \equiv 1\$</span>. Therefore:</p>

<p><span class="math-container">$$
\begin{align}
\frac{1}{4}-\frac{1}{4}(-1)^{10u}(20u+1) &amp;= \frac{1}{4}-\frac{1}{4}(20u+1) \\
&amp;= \frac{1}{4}-\frac{20u+1}{4}\\
&amp;= \frac{(1-1)-20u}{4} \\
&amp;= -5u
\end{align}
$$</span></p>

<p>Look familiar? It results in <span class="math-container">\$-5\$</span>, <span class="math-container">\$-10\$</span>, <span class="math-container">\$-15\$</span>, ...</p>

<p>This fact is obvious from the output, but now knowing the series that produces it, we can calculate the final result for any such <span class="math-container">\$m\$</span> quickly, and every 10th value even easier.</p>

<p>We can avoid computing the exponent <span class="math-container">\$(-1)^m\$</span> because <span class="math-container">\$(-1)^{m} = 1\$</span> for even values of <span class="math-container">\$m\$</span> and <span class="math-container">\$-1\$</span> for odd values.</p>

<p>I'm not as familiar with Python, but here's an example:</p>

<pre><code>def series(m):
    alt = 1 if m % 2 == 0 else -1
    return int(1/4 - 1/4 * alt * (2 * m + 1))

def series_progress(m):
    return -5 * m

m = 134

for i in range(1, m // 10):
    print(series_progress(i))

print(series(m))
</code></pre>

<p>This avoids the costly computation for the final result. If we just needed the result it would be <span class="math-container">\$O(1)\$</span>, but because we give "progress reports" it is more like <span class="math-container">\$\lfloor\frac{n}{10}\rfloor\in O(n)\$</span>.</p>
    </div>