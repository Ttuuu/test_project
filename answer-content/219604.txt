<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You can shorten this:</p>

<pre><code>public static boolean isAvailable(String host, int portNr) {

    boolean isAvailable;

    try (var ignored = new Socket(host, portNr)) {
        // Successful connection means the port is taken
        isAvailable = false;
    } catch (IOException e) {
        // Could not connect
        isAvailable = true;
    }

    return isAvailable;
}
</code></pre>

<p>Keep in mind that on Linux, <a href="https://stackoverflow.com/questions/33703965/how-can-i-run-a-spring-boot-application-on-port-80#33704078">all ports up to 1024</a> can only be bound by root, meaning that <code>isAvailable</code> does not tell you whether you can actually bind your server to the returned port.</p>

<p>Here's a similar way using <a href="https://docs.oracle.com/javase/8/docs/api/java/net/ServerSocket.html" rel="nofollow noreferrer">ServerSocket</a> that has worked for my server application to find out whether I'm able to bind to a socket:</p>

<pre><code>public static boolean canBind(String host, int portNr) {
    boolean canBind;
    var address InetAddress.getByName(host);

    try (var ignored = new ServerSocket(portNr, 0, address)) {
        canBind = true;
    } catch (IOException e) {
        canBind = false;
    }
    return canBind;
}
</code></pre>

<p>This is how you might use <code>canBind</code> to find a bindable port for your server (all this assumes a Java version of 10 or later):</p>

<pre><code>public static void main(String... args) {

    var host = "0.0.0.0";

    var portRange = closedRange(8080, 9020);
    var portMaybe = portRange.stream()
            .filter(portNr -&gt; canBind(host, portNr))
            .findFirst();

    portMaybe.ifPresentOrElse(port -&gt; {
        var address = new InetSocketAddress(host, port);
        startServer(address);

    }, () -&gt; System.err.println("Could not find port to bind to in this range: "
            + portRange));
}

private static List&lt;Integer&gt; closedRange(int startInclusive, int endInclusive) {
    return IntStream.rangeClosed(startInclusive, endInclusive)
            .boxed()
            .collect(Collectors.toList());
}
</code></pre>
    </div>