<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>When ever you encounter multiple conditions that you see growing, that should be a clear indication that a strategy pattern could help. You start by doing the following.</p>

<p>Create a simple enum for your status codes.</p>

<pre><code>public enum MessageStatusCodes{
 case12= 12,
        case13= 13,
        case22 = 22,
        case120 = 120
}
</code></pre>

<p><strong>Create your interface that will instruct your concrete strategy classes how to handle your messages</strong></p>

<pre><code>public interface IMessageStrategy{
void Process(Message);

}
</code></pre>

<p>Here your Message class will become your context object.</p>

<pre><code>public class Message
{
public Guid ID { get; private set; }
public string MessageIn { get; private set; }
public string MessageOut { get; private set; }
public MessageStatusCodes StatusCode { get; set; } //EDIT could be changed during message lifecycle
public Message(Guid id, string messageIn, string messageOut, MessageStatusCodes statusCode){
ID=id;
MessageIn=messageIn;
MessageOut=messageOut;
StatusCode = statusCode;
LoadStrategies();
}

private static Dictionary&lt;MessageStatusCodes, IMessageStrategy&gt; messageStrategies;
private void LoadStrategies()
{
    messageStrategies = new Dictionary&lt;MessageStatusCodes,IMessageStrategy&gt;();
    messageStrategies.Add(MessageStatusCodes.case12, new DeleteMessageStrategy() );

}

 public void Process()
{     
        return messageStrategies[StatusCode].Process(this);
}
}
</code></pre>

<p>Then you start by creating your concrete classes that implement the different actions or strategies that you want to perform for each condition. 
For example, the Delete message action could be a strategy.</p>

<pre><code>public class DeleteMessageStrategy : IMessageStrategy {

public void Process(Message){
//do something based on delete status code
}
}
</code></pre>

<p>Then you call your Message like so</p>

<pre><code>Message message = new Message(....);
message.Process();
</code></pre>

<p>And then your code will process the message with respect to the status code passed in.</p>

<p>When you're ready to expand, you implement new strategies and add those new strategies to your Message class so its aware of them.</p>

<p>You can really expand on this template I have shown here. Take a look at my post, I did something very similar and had questions and came to codereview for answers</p>

<p><a href="https://codereview.stackexchange.com/questions/39844/preserving-dry-while-using-an-interface-abstract-class-and-delegate">My Code Review Question</a></p>
    </div>