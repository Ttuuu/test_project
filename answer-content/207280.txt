<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li>Please note that I am not actually reviewing your code, but guiding you towards hopefully better design, so that you can fix the issues yourself</li>
<li>In that same vein, the code snippets I am including do not contain a full solution, but only the hints towards it.</li>
</ul>

<hr>

<p>These kinds of transformations are very easy if you start to decompose them.</p>

<p>For example, you have two different rules for dealing with string data type and list data type, so let's create two different entities to deal with them.</p>

<p>(Here I chose functions as top-level entities, you can create classes too)</p>

<pre><code>def convert_string(key, value):
    return f"{key} == '{value}'"   # I am assuming you want value in quotes
</code></pre>

<p>Similarly, define one for lists. (Hint: You should define one entity for dict and list function should only call and compose dict function)</p>

<p>How do you choose which entity to call? Simple, call another entity. </p>

<pre><code>def choose_function(key, value):
    # Your logic here
    # returns func
</code></pre>

<p>And finally, a composing function, which is also your main function.</p>

<pre><code>def convert(params):
    str_list = []
    for key, value in params.items():
        str_list.append(choose_func(key, value)(key, value))
    return ' and '.join(str_list)}
</code></pre>

<hr>

<p>Why it would be better than your solution?</p>

<ul>
<li><p>It is much easier to test. Your problem statement is pretty much easy, but these kinds of problems could become very big with lots of complex rules in the long run, where unit testability gives you the confidence to make changes</p></li>
<li><p>You divide the problem statement into individual sub-pieces and another sub-problem deal with how to merge those solutions. That would eliminate lots of your <code>_first</code> variables. It also makes it easier in the long run.</p></li>
<li><p>Code readability</p></li>
</ul>
    </div>