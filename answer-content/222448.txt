<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The natural way to tackle this problem (as in many similar games) is starting from the final position.</p>

<p>Let <code>B[k]</code> be the maximum score that Player 1 can get if the game starts with only the last <code>k</code> stones left. <code>B[1]</code>, <code>B[2]</code>, <code>B[3]</code> are initial values that can be computed directly (just take all remaining stones), and then you can fill in <code>B[4], B[5], B[6], ...</code> in this order, since <code>B[k]</code> only depends on <code>B[k-1], B[k-2], B[k-3]</code>; so you can write your code as a loop <code>for k=4,5,6,..., a.length</code>. The resulting algorithm is linear, without no recursion, branching, or approximations required. </p>

<p>Instead, it looks like you are trying to compute the entries <code>B[i]</code> starting from <code>B[a.length]</code>. This leads to a more complicated structure where you make recursive calls, and re-compute the same values <code>B[i]</code> multiple times, as pointed out also by @vnp's answer.</p>

<p>Once you have figured out how to fill the <code>B</code> array in this way, a further improvement is realizing that you only need to keep the last three values <code>B[k], B[k-1], B[k-2]</code> at each step (and possibly also the partial sum <code>a[k-2] + ... + a[a.length]</code>). This gives a solution in <span class="math-container">\$O(1)\$</span> space.</p>

<p>If you want to compare with another famous function in which f(n) depends on its previous values, what you wrote is like computing Fibonacci numbers recursively via <code>return fibonacci(n-1) + fibonacci(n-2)</code>. What I suggest above is computing iteratively <code>f[0], f[1], f[2], ...</code> starting from <code>f[0]</code>.</p>
    </div>