<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I will describe what I came to on my own at the moment.</p>
<h1>Advantages</h1>
<p>The task of one place to configure <code>NavigationService</code> and <code>NavigationView</code> really creates a convenience for making changes. But it only applies to registering <code>ViewModel</code> for <code>NavigationService</code> and elements for <code>NavigationView</code>. The process turns into a single line.</p>
<pre><code>private void ConfigureNavService()
{
    _navigationService.Configure&lt;ShellViewModel, ShellPage&gt;();
    _navigationService.Configure&lt;MainViewModel, MainPage&gt;();
    _navigationService.Configure&lt;SettingsViewModel, SettingsPage&gt;();
}

private void ConfigureNavView()
{
    AddNavItem&lt;MainViewModel&gt;("Home", Symbol.Home);
}
</code></pre>
<p>Also, the presence of logic for calculating the key and extracting it, again, in one place <code>Navigation Config</code>. Convenient to change. You don't need to edit different parts of the code.</p>
<pre><code>public static string ConvertToKey&lt;TViewModel&gt;() =&gt; typeof(TViewModel).FullName;
public static string GetPageKey(NavigationViewItem item) =&gt; item.Tag.ToString();
</code></pre>
<h1>Disadvantages</h1>
<p>The negative side of the resulting implementation is the mixing of classes. Initially independent, independent <code>Navigationservice</code> and <code>ShellViewModel</code> begin to depend on <code>NavigationConfig</code> and use it not only for configuration, but also in normal work to create and retrieve a key. I mean the methods <code>ConvertToKey()</code>, <code>GetPageKey()</code> required in: <code>NavigationConfig.AddNavItem()</code>, <code>NavigationService.Configure()</code>, <code>NavigationService.NavigateTo()</code>, <code>ShellViewModel.OnItemInvoked()</code>, <code>ShellViewModel.IsMenuItemForPageType()</code>.</p>
<p>Not to say that it is difficult to track such connections, but it will take time.</p>
<h1>Changes</h1>
<p>I keep the principle of one place, but in terms of levels.</p>
<p>Previously, the configuration process was delayed until the <code>ShellViewModel.InitializeNavigation()</code> (calling <code>NavigationConfig</code>). The following changes occur. <code>NavigationConfig</code> has been removed. Registering valid pages and creating elements for <code>NavigationView</code> are different levels. They are not in the same place.</p>
<ul>
<li>Creating <code>NavigationItem</code> is given to <code>XAML</code>markup. That is, where
<code>NavigationView</code> (<code>ShellPage</code>) is defined there and the elements are described
navigations.</li>
</ul>
<pre><code>&lt;NavigationView.MenuItems&gt;
    &lt;NavigationViewItem x:Uid="ShellPage_MenuItem_Home" Icon="Home" Tag="Mergerify.ViewModels.MainViewModel" /&gt;
&lt;/NavigationView.MenuItems&gt;
</code></pre>
<ul>
<li>Pages are registered in <code>ViewModelLocator</code>.</li>
</ul>
<pre><code>private ViewModelLocator()
{
    SimpleIoc.Default.Register&lt;IActivationService, ActivationService&gt;();
    SimpleIoc.Default.Register&lt;INavigationService, NavigationService&gt;();

    Register&lt;ShellViewModel, ShellPage&gt;();
    Register&lt;MainViewModel, MainPage&gt;();
    Register&lt;SettingsViewModel, SettingsPage&gt;();
}

private void Register&lt;TViewModel, TView&gt;() where TViewModel : class
{
    SimpleIoc.Default.Register&lt;TViewModel&gt;();
    NavigationService.Configure&lt;TViewModel, TView&gt;();
}

</code></pre>
<p>What happened to static methods?</p>
<ul>
<li><code>GetPageKey()</code>. Required to obtain a key located in the
<code>NavigationItem</code>. Because now the navigation elements are in
<code>ShellPage</code>, method moved to <code>ShellViewModel</code>. And that's the only thing
the place where this method is required.</li>
<li><code>ConvertToKey()</code>. <code>NavigationService</code> contains the <code>_pages</code> dictionary with valid
it has a method for adding new pages <code>Configure ()</code>. Therefore, it is
the only place that knows what the key looks like. For check of the pages created
method <code>Configure&lt;TViewModel, TView&gt;()</code>. With its help, registration takes place
without need to know what the key looks like. From here, the <code>ConvertToKey()</code> method
became private and is located in the <code>NavigationService</code>.</li>
</ul>
<h1>Conclusion</h1>
<p>The described changes made it possible to remove the mixing of classes. Each uses only what he needs and does not associate with the other as it was before. However, the original goal of a single location differs somewhat from the new implementation of a single location by level.</p>
<p>At the moment, one bug of the changes made has been found. It consists in the fact that the key for <code>NavigationItem</code> fits into the element's markup manually. At the moment, I switched to reducing the key with <code>Type.FullName</code> to <code>Type.Name</code>. Then it is enough to write the name from <code>ViewModel</code> in the navigation elements. For example, instead full name I write only name <code>MainViewModel</code>.</p>
    </div>