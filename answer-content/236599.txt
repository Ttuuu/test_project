<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>@Joop Eggen has already made some good suggestions based around your original code.  You've made some slight modifications in response to comments to the parameters of your function, however your code still doesn't really make sense in some ways.</p>

<blockquote>
<pre><code>for (int i = 0; i &lt; 100; i++) {
</code></pre>
</blockquote>

<p>It's unclear why you'd want to perform this operation 100 times.  If it doesn't work the first time, it's not going to work the 100th, you're not changing anything based  on <code>i</code>, so unless the list is getting updated whilst you're processing on it by another thread this seems like a waste.</p>

<blockquote>
<pre><code>if(decisionFound){
    if(conditionFound){
        // do something
        break;
    }
}
</code></pre>
</blockquote>

<p>As it stands, if <code>conditionFound</code> is true, then <code>decisionFound</code> must be true.  There's no reason for you to check <code>decisionFound</code> here.</p>

<p>One thing I don't agree with @Joop Eggen about is that using <code>BiPredicate</code> helps your code.  To me, this:</p>

<blockquote>
<pre><code>String decision = decisionMap.get("is_success");
String decisionAction = decisionMap.get("action");

BiPredicate&lt;String, String&gt; isApplicable = (d, a) -&gt; "N".equalsIgnoreCase(d) &amp;&amp; "Z".equalsIgnoreCase(a);
</code></pre>
</blockquote>

<p>simply makes it harder to know what <code>a</code> and <code>d</code> are when looking at the logic.  There's no requirement at the moment to have these temporary variables, what's wrong with just putting it in an old fashioned if statement?</p>

<pre><code>if ("N".equalsIgnoreCase(decisionMap.get("is_success")) 
    &amp;&amp; "Z".equalsIgnoreCase(decisionMap.get("action"))) {
</code></pre>

<p>Whilst I agree that it would be better to return the decision and let the caller decide what to do with the value I would probably go with several filters as I think it makes the code easier to follow:</p>

<pre><code>decisionTree.stream()
        .filter(Objects::nonNull)
        .filter(m -&gt; code.equalsIgnoreCase(m.get("code")))
        .filter(m -&gt; "N".equalsIgnoreCase(m.get("is_success")))
        .filter(m -&gt; "Z".equalsIgnoreCase(m.get("action")))
        .findFirst()
        .ifPresent(m -&gt; destination.append(m.get("destination")));
</code></pre>

<p>You could return the result of <code>findFirst</code> if you decide you don't want to do the append processing in your <code>doAction</code> method.</p>

<p>For what it's worth, some of the strings being used seem like they could benefit from being in constants/enums 'code', 'is_success', 'action', 'N', 'Z'.  If these get out of step between the caller and the code it's going to stop working.</p>
    </div>