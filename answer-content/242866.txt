<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>As said in the comment I've managed to remove my 3 layout and only using one layout with <code>ConstraintLayout</code></p>

<p>So I've got the following code:</p>

<p><strong>Adapter</strong>:</p>

<pre class="lang-kotlin prettyprint-override"><code>class HomeAdapter(private val requestManager: RequestManager)
: RecyclerView.Adapter&lt;RecyclerView.ViewHolder&gt;() {

    var data: List&lt;ImageObject&gt; = listOf()

    override fun getItemCount(): Int = data.size

    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): RecyclerView.ViewHolder {
        return HomeViewHolder.from(parent)
    }

    override fun onBindViewHolder(holder: RecyclerView.ViewHolder, position: Int) {
        val item = data[position]
        (holder as HomeViewHolder).bind(item, requestManager)
    }

    class HomeViewHolder(itemView: View): RecyclerView.ViewHolder(itemView) {

        private val title: TextView = itemView.findViewById(R.id.title)
        private val description: TextView = itemView.findViewById(R.id.description)
        private val imageView: ImageView = itemView.findViewById(R.id.image)

        fun bind(imageObject: ImageObject, requestManager: RequestManager){
            title.text = imageObject.author
            description.text = imageObject.id
            requestManager.load(imageObject.url).into(imageView)
        }

        companion object {
        fun from(parent: ViewGroup): HomeAdapter.HomeViewHolder {
            val view = LayoutInflater.from(parent.context).inflate(R.layout.item_image, parent, false)
            return HomeAdapter.HomeViewHolder(view)
        }
    }

    }
}
</code></pre>

<p><strong>ItemDecoration</strong>:</p>

<pre class="lang-kotlin prettyprint-override"><code>class ItemDecorationExoplayerVertical(private val padding: Int): RecyclerView.ItemDecoration() {

    override fun getItemOffsets(outRect: Rect, view: View, parent: RecyclerView, state: RecyclerView.State) {
        super.getItemOffsets(outRect, view, parent, state)

        val position = parent.getChildAdapterPosition(view)
        val totalSpanCount = getTotalSpanCount(parent)
        val column = position % totalSpanCount

        outRect.left = padding - column * padding / totalSpanCount // padding - column * ((1f / totalSpanCount) * padding)
        outRect.right = (column + 1) * padding / totalSpanCount // (column + 1) * ((1f / totalSpanCount) * padding)
        outRect.bottom = padding
        if (position &lt; totalSpanCount) outRect.top = padding

    }

    private fun getTotalSpanCount(parent: RecyclerView): Int {
        return (parent.layoutManager as? GridLayoutManager)?.spanCount ?: 1
    }

}
</code></pre>

<p><strong>Utils</strong>:</p>

<pre class="lang-kotlin prettyprint-override"><code>fun updateUI(recyclerView: RecyclerView) {
    val nbCol = PreferencesHelper.readColNumber()
    val gridLayoutManager = (recyclerView.layoutManager as GridLayoutManager)
    if(gridLayoutManager.spanCount != nbCol) {
        gridLayoutManager.spanCount = nbCol
        recyclerView.adapter?.notifyItemRangeChanged(0, recyclerView.adapter?.itemCount ?: 0)
    }
} 
</code></pre>
    </div>