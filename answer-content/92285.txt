<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This is really very good in my opinion. I like your use of interfaces, and an abstract base class seems to be the right design choice to me. </p>

<p>The double checks here bother me a little bit though. </p>

<blockquote>
<pre><code>    while (upperRows.Count &gt; 0 || lowerRows.Count &gt; 0)
    {
        if (upperRows.Count &gt; 0)
        {
            CheckLocation(upperRows.Pop());
        }
        if (lowerRows.Count &gt; 0)
        {
            CheckLocation(lowerRows.Pop());
        }
    }
</code></pre>
</blockquote>

<p>Unfortunately, I don't see a way to do it that wouldn't add an extra loop and given a loop would be much more inefficient than accessing the property repeatedly, I think it's good. </p>

<hr>

<p>Properties should be PascalCased. You have a couple that are camelCased here. </p>

<blockquote>
<pre><code>protected Stack&lt;Point&gt; upperRows { get; set; }

/// &lt;summary&gt;
/// Used to 'jump' to a walkable position after the crawler is no longer able to move left or right, without having to backtrack.
/// &lt;/summary&gt;
protected Stack&lt;Point&gt; lowerRows { get; set; }
</code></pre>
</blockquote>

<hr>

<p><code>CheckLeft</code>, <code>CheckRight</code>, etc. make sense, but this one's name could be better IMO. </p>

<blockquote>
<pre><code>/// &lt;summary&gt;
/// Check if the point (pt.X, pt.Y - 1) should be walked. If it should, add it to the lowerRows stack.
/// &lt;/summary&gt;
/// &lt;param name="pt"&gt;The point whose 'bot' will be checked.&lt;/param&gt;
protected void CheckBot(Point pt)
</code></pre>
</blockquote>

<p>The doc comment seems to be at odds with the name <code>CheckBot</code>. I would expect this to check on the current location of the crawler. Which, on further inspection, is exactly what it does. So, the comment is a bit misleading. It's not obvious what this method does by either its name or comment. </p>

<hr>

<p>The doc comments are great to have by the way. Did you know that you can reference types in them? </p>

<pre><code>/// Check if the &lt;see cref="Point" /&gt; (pt.X + 1, pt.Y) should be walked through. If it should, move the crawler there and check its surroundings.
</code></pre>

<ul>
<li><a href="https://msdn.microsoft.com/en-us/library/5ast78ax.aspx" rel="nofollow">Recommended doc comment tags</a></li>
<li><a href="https://msdn.microsoft.com/en-us/library/acd0tfbe.aspx" rel="nofollow"><code>see</code> tag example</a></li>
</ul>
    </div>