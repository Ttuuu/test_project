<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>A rotation is a <a href="https://en.wikipedia.org/wiki/Modular_arithmetic" rel="nofollow noreferrer">modular arithmic</a> operation. </p>

<p>The <em>congruent</em> value of any number <code>n</code> is <code>(n % size + size) % size</code>.</p>

<blockquote>
<pre><code>public static int[] LeftRotation(int numberOfLeftRotations, int[] a, int[] b) {
        int n1 = numberOfLeftRotations, n2 = numberOfLeftRotations;
        for (int i = 0; i &lt; numberOfLeftRotations; i++) {
            a[a.length - n1] = b[i];
            n1--;
        }
        for (int i = 0; i &lt; a.length - numberOfLeftRotations; i++) {
            a[i] = b[n2];
            n2++;
        }
        return a;
    }
</code></pre>
</blockquote>

<p>So the above code could be rewritten as below to allow for:</p>

<ol>
<li>both left and right rotations with <code>k</code> number of  rotations</li>
<li>both positive and negative rotations (left and right rotations are complements)</li>
<li>rotations with <code>k &gt; source.length</code></li>
</ol>

<p>code</p>

<pre><code>    public class Rotate
    {
        public static &lt;T&gt; T[] leftFrom(T[] source, int k)
        {
            if (source == null)
                throw new IllegalArgumentException("source");
            @SuppressWarnings("unchecked")
            T[] target = (T[]) new Object[source.length];
            if (target.length == 0) return target;
            for (int i = 0; i &lt; target.length; i++)
            {
                target[i] = source[mod(i + k, target.length)];
            }
            return target;
        }

        public static &lt;T&gt; T[] rightFrom(T[] source, int k)
        {
            if (source == null)
                 throw new IllegalArgumentException("source");
            @SuppressWarnings("unchecked")
            T[] target = (T[]) new Object[source.length];
            if (target.length == 0) return target;
            for (int i = 0; i &lt; target.length; i++)
            {
                target[i] = source[mod(i - k, target.length)];
            }
            return target;
        }

        public static &lt;T&gt; void left(T[] source, int k)
        {
            T[] target = leftFrom(source, k);
            System.arraycopy(target, 0, source, 0, target.length);
        }

        public static &lt;T&gt; void right(T[] source, int k)
        {
            T[] target = rightFrom(source, k);
            System.arraycopy(target, 0, source, 0, target.length);
        }

        private static int mod(int a, int n)
        {
            assert n &gt; 0;
            return (a % n + n) % n;
        }
    }
</code></pre>

<p>Examples</p>

<pre><code>        import java.lang.reflect.Array;
        import java.util.Arrays;

        public void Examples()
        {
            Integer[] source = new Integer[] { 0, 1, 2 };

            // rotate left
            areEqual(new[] { 0, 1, 2 }, Rotate.leftFrom(source, 0));
            areEqual(new[] { 1, 2, 0 }, Rotate.leftFrom(source, 1));
            areEqual(new[] { 2, 0, 1 }, Rotate.leftFrom(source, 2));
            areEqual(new[] { 0, 1, 2 }, Rotate.leftFrom(source, 3));
            // rotate left overflow (k ~ k % source.length)
            areEqual(new[] { 1, 2, 0 }, Rotate.leftFrom(source, 4));
            // rotate left retrograde (rotate left k ~ rotate right (-k))
            areEqual(new[] { 2, 0, 1 }, Rotate.leftFrom(source, -1));

            // rotate right
            areEqual(new[] { 0, 1, 2 }, Rotate.rightFrom(source, 0));
            areEqual(new[] { 2, 0, 1 }, Rotate.rightFrom(source, 1));
            areEqual(new[] { 1, 2, 0 }, Rotate.rightFrom(source, 2));
            areEqual(new[] { 0, 1, 2 }, Rotate.rightFrom(source, 3));
            // rotate right overflow (k ~ k % source.length)
            areEqual(new[] { 2, 0, 1 }, Rotate.rightFrom(source, 4));
            // rotate right retrograde (rotate right k ~ rotate left (-k))
            areEqual(new[] { 1, 2, 0 }, Rotate.rightFrom(source, -1));

            // rotate and assign
            areEqual(new[] { 0, 1, 2 }, source); // unchanged so far
            Rotate.left(source, 1);
            areEqual(new[] { 1, 2, 0 }, source);
            Rotate.right(source, 1);
            areEqual(new[] { 0, 1, 2 }, source);
        }

        static void areEqual(int[] a, int[] b)
        {
            assert Arrays.equals(a, b);
        }
</code></pre>
    </div>