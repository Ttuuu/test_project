<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I think the code is incomplete. It's possible to build a <code>Graph</code> but there is no way to process it as there are no methods returning the state of a <code>Graph</code>.</p>

<p>To be able to evaluate the shown code I'm going to extend it by two methods:</p>

<pre><code>/**
 * Returns true if a node with the given name was added.
 */
public boolean hasNode(String name) {
    return nodes.containsKey(name);
}


/**
 * Returns true if an edge form source node to destination node (identified by their names) was added.
 */
public boolean hasEdge(String src, String dest) {
    HashSet&lt;String&gt; adjList = nodes.get(src); 
    return adjList != null &amp;&amp; adjList.contains(dest);
}
</code></pre>

<p>Let's use a simple example to show some shortcomings:</p>

<pre><code>public static void main(String[] args) {
    Graph g = new Graph();
    g.addNode("A");
    g.addEdge("A", "B");

    System.out.println(g.hasNode("A")); // true
    System.out.println(g.hasNode("B")); // false
    System.out.println(g.hasEdge("A", "B")); // true
}
</code></pre>

<p><strong>egdes to missing nodes</strong><br>
The method <code>addEdge</code> verifies that a source node is already present. But it doensn't verify if the destination node is present, too. Thus it's possible to <code>addEdge</code> from an already added node to an unknown node.<br>
Whereas <code>hasNode("B")</code> will state that there is no node <code>"B"</code> in the <code>Graph g</code>, <code>hasEdgde("A", "B")</code> will return <code>true</code> which is at least misleading. I think  it's inconsistent as I would expected this implies there is a node <code>"B"</code> also present in the <code>Graph g</code>.</p>

<p><strong>directed graph</strong><br>
Since <code>addEdge</code> adds an edge from a source node to a destination node it's more precise to speak of a directed graph. Otherwise</p>

<pre><code>g.hasEdge("B", "A");
</code></pre>

<p>needs to return <code>true</code>. But actually it isn't.</p>

<p><strong>readding a node is possbile</strong><br>
Another point: It's possible to add already added nodes again.</p>

<pre><code>g.addNode("A");
</code></pre>

<p>This results in replacing the current node by a new one. There is no exception and <code>hasNode("A")</code> will still return <code>true</code>. But all edges from the previous node to other nodes are lost.</p>

<pre><code>System.out.println(g.hasEdge("A", "B")); // false
</code></pre>

<p>This should be prevented.</p>

<p><strong>readding an edge</strong><br>
Readding an edge doesn't throw an exception. But it doesn't add an edge actually. It's impossible since a node is storing it's edges in a <code>Set</code>. A <code>Set</code> will not add an already present element once again. As long as there is no need to know how many times an edge from a node to another was add this isn't severe.</p>

<p>Some further hints:</p>

<ul>
<li>You can declare <code>nodes</code> as <code>Map&lt;String, Set&lt;String&gt;&gt;</code>. Since you're using interface methods only, there is no need to use the implementation types.</li>
<li>When adding a node calling first <code>nodes.containsKey(name)</code> and then on success calling <code>nodes.put(name, new HashSet&lt;String&gt;())</code> has double complexity as the element within the map has to be looked up twice. But sinnce adding a node several times shouldn't be possible we can write</li>
</ul>

<p>instead:</p>

<pre><code>public void addNode(String name) {
    Set&lt;String&gt; node = nodes.get(name);
    if (node != null)
        throw new RuntimeException("addNode - node already exist");
    nodes.put(name, new HashSet&lt;String&gt;());
}
</code></pre>
    </div>