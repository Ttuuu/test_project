<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Don’t use comments to explain what a variable holds. Instead, use descriptive variable names. For instance, use <code>delimiter</code> instead of <code>dlm</code>. The former is much easier to read. </p>

<p>Use camelCase when naming methods like <code>countDelimiters</code> and variables like <code>numColumns</code>.</p>

<p>In Java, it’s conventional to put the open curly brace on the same line as the preceding code, not on a line by itself.</p>

<p>In Java, it’s conventional to put <code>else</code> or <code>finally</code> on the same line as the <code>}</code> that precedes it.</p>

<p>In Java, it’s conventional to use whitespace after commas and on either side of operators and equals signs. This makes them easier to read.</p>

<p>In Java, it’s conventional to put a space in between <code>if</code> or <code>for</code> or <code>while</code> and the <code>(</code> that follows it. This makes them visually distinct from method calls.</p>

<p>In Java, it’s conventional to put the array designation next to the variable type, not the variable name. So prefer <code>final char[] chararr</code> to <code>final char chararr[]</code>.</p>

<p>Please don’t squish the <code>if</code> code onto one line and spread out the <code>else</code> code. If you have a trivial <code>if</code> block and no <code>else</code>, it’s arguably ok to put it all on one line. Otherwise, use vertical space.</p>

<p>Closeable resources need to always be closed when you’re done with them. Keeping a local instance of a <code>Reader</code> open is a problem, because if the client never calls <code>readLine()</code>, your reader never gets closed. Also, if you call <code>readLine</code> more than once, the reader will already be closed. Save the <code>filename</code> in the instance and make a new reader when you need it.</p>

<p>It’s somewhat confusing to switch from a <code>separator</code> to a <code>delimiter</code>. Also, you misspelled <code>separator</code>.</p>

<p>You can use chained constructors to pass default values so you’re only writing your constructor code once.</p>

<p>All kinds of things can go wrong when reading a file. If you want to check if the file exists when you make a <code>RawFile</code> instance, that’s fine, but it might not exist when somebody tries to read from it later. Is it really worth checking at construction time?</p>

<p>Errors should be logged to <code>System.err</code> or a logging framework. Don’t swallow the exception - the stack trace should also be logged. You can accomplish that with <code>e.printStackTrace(System.err);</code></p>

<p>Make methods and variables as private as you can. <code>countDelimiters</code> should almost certainly be <code>private</code>, not <code>default</code>. </p>

<p>Variables that don’t get reassigned should be made <code>final</code> to reduce cognitive load and make your intent clear to the reader.</p>

<p><code>countDelimiters</code> isn’t wrong, but it would be easier to read if written using Streams.</p>

<p><code>try-with-resources</code> is more canonical in modern Java than <code>try-finally</code>.</p>

<p>Variables should be declared as close to where they’re used as possible, and in the minimum scope possible. </p>

<p>You don’t need to check if <code>rawline</code> is null. The stream won’t give you null lines.</p>

<p>Streaming the lines of the file directly would be preferable to using readers.</p>

<p>It’s cleaner to inline the <code>Consumer&lt;String&gt;</code> rather than define it and then call <code>forEach()</code>.</p>

<p>Given that you’re saving state between each line, and that you’re really operating on “X columns” rather than “X lines”, you should consider using a <code>Scanner</code> rather than parsing by line.</p>

<p>If you applied all of my suggestions above, your code might look something like:</p>

<pre><code>import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Stream;

final class RawFile {

    private final String filename;
    private final char delimiter;
    private final int expectedDelimitersPerLine;
    private int currentDelimiters; // this is a counter used while looping the file

    RawFile(final String filename, final int numColumns) {
        this(filename, numColumns, ' ');
    }

    RawFile(final String filename, final int numColumns, final char delimiter) {
        this.filename = filename;
        this.delimiter = delimiter;
        this.expectedDelimitersPerLine = numColumns - 1;
    }

    private int countDelimiters(final String line) {
        return (int) line.chars().filter(c -&gt; c == this.delimiter).count();
    }

    List&lt;String&gt; readline() throws IOException {
        final List&lt;String&gt; recordList = new ArrayList&lt;String&gt;();
        final StringBuffer lineBuffer = new StringBuffer();

        try (final Stream&lt;String&gt; lines = Files.lines(Paths.get(this.filename))) {
            lines.forEach(rawline -&gt; {
                final int delimiters = this.countDelimiters(rawline);
                this.currentDelimiters = this.currentDelimiters + delimiters;
                if (delimiters == this.expectedDelimitersPerLine) {
                    recordList.add(rawline);
                    this.currentDelimiters = 0;
                } else if (this.currentDelimiters &gt;= this.expectedDelimitersPerLine) {
                    lineBuffer.append(rawline);
                    recordList.add(lineBuffer.toString());
                    this.currentDelimiters = 0;
                } else {
                    lineBuffer.append(rawline);
                }
            });
        }
        return recordList;
    }

}
</code></pre>
    </div>