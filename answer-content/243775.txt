<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>A good first step is always to look at the BibTeX output and trying to resolve all the errors that appear. In your case, I get</p>
<blockquote>
<pre><code>This is BibTeX, Version 0.99d (TeX Live 2020)
The top-level auxiliary file: main.aux
The style file: acspat.bst
Database file #1: ref.bib
achemso 2019-02-14 v3.12a
1 is an integer literal, not a string, for entry Sheem1997
while executing---line 1932 of file acspat.bst
You can't pop an empty literal stack for entry Sheem1997
while executing---line 1932 of file acspat.bst
1 is an integer literal, not a string, for entry Lenssen2003
while executing---line 1932 of file acspat.bst
You can't pop an empty literal stack for entry Lenssen2003
while executing---line 1932 of file acspat.bst
You can't pop an empty literal stack for entry Langhals2003
while executing---line 1932 of file acspat.bst
1 is an integer literal, not a string, for entry Shimizu2002
while executing---line 1932 of file acspat.bst
You can't pop an empty literal stack for entry Shimizu2002
while executing---line 1932 of file acspat.bst
(There were 7 error messages)
</code></pre>
</blockquote>
<p>That's a lot of repetition, but basically BibTeX reports two issues for every entry:</p>
<pre><code>1 is an integer literal, not a string, for entry Sheem1997
while executing---line 1932 of file acspat.bst
You can't pop an empty literal stack for entry Sheem1997
while executing---line 1932 of file acspat.bst
</code></pre>
<p>Where are these coming from? The <code>1 is an integer literal</code> is caused by</p>
<pre><code>FUNCTION { format.assignees } {
  assignee duplicate$ empty$
    { pop$ }
    { " AND" ";" find.replace.upper
      duplicate$
      duplicate$
      #-1 #1 substring$
      ")" = % &lt;--------- After this comparison, a `1` (which represents "true" is at the top of the stack
            % not the string you duplicated earlier
      #1 #1 substring$
      "(" =
      and
        { paren }
        {  }
      if$
      output
      next.punct.period 'next.punct.int :=    
    }
  if$   
}
</code></pre>
<p>To fix this, add a <code>swap$</code> between <code>")" =</code> and <code>#1 #1 substring$</code> to get the string above the number (aka boolean) again.</p>
<p>This leaves the "You can't pop an empty literal stack". Look at</p>
<pre><code>FUNCTION { format.type.patent } {
  type empty$
    { "Patent" }{ type }
  if$ output
}

FUNCTION { format.type.number.patent } {
   number empty$
    { }
    {
      format.type.patent " " number * * output
      next.punct.comma 'next.punct.int :=
    }
  if$
}
</code></pre>
<p>Especially the line</p>
<pre><code>format.type.patent " " number * * output
</code></pre>
<p>This tries to concatenate " " and number to the string left on the stack by <code>format.type.patent</code>, but because <code>format.type.patent</code> ends with <code>output</code>, the string is no longer on the stack but already printed.</p>
<p>To fix this, change <code>format.type.patent</code> to</p>
<pre><code>FUNCTION { format.type.patent } {
  type empty$
    { "Patent" }{ type }
  if$
}
</code></pre>
<p>to avoid the premature output. (You might want to rename the function name because it no longer behaves like the other <code>format.</code> functions)</p>
    </div>