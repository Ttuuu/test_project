<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>A Python solution can be much more succinct than what you wrote.</p>

<ul>
<li><strong>Reading the file:</strong> The file is a degenerate CSV file with double-quoted values.  You can use the <a href="https://docs.python.org/3/library/csv.html" rel="nofollow noreferrer"><code>csv</code></a> module to split on commas and discard the double-quotes.</li>
<li><strong>Opening the file:</strong> You can use the <a href="https://docs.python.org/3/library/fileinput.html" rel="nofollow noreferrer"><code>fileinput</code></a> module to avoid hard-coding the filename.  The program will either open the filename given as a command-line argument, or read from <code>stdin</code>.</li>
<li><strong>Generating triangle numbers:</strong> You used the given formula ½<em>n</em>(<em>n</em>+1), but if you want to generate the triangle numbers in sequence, you can just add 1+2+3+…, as per the definition.  Calling <code>sorted(list(set(…)))</code> is superfluous, since each appended number should be unique and increasing — if you initialize <code>triangles = [0]</code> instead of <code>triangles = [0, 1]</code>.</li>
<li><p><strong>Binary search:</strong> Using a binary search overcomplicates the solution.  A linear search is not necessarily that bad, if the list is short — as it will be in this case.  Furthermore, you could have just used a <a href="https://docs.python.org/3/library/stdtypes.html#set-types-set-frozenset" rel="nofollow noreferrer"><code>set</code></a>, whose <code>in</code> operator works in O(1) time, instead of a list.  Writing less code means fewer opportunities to introduce bugs.</p>

<p>Personally, I wouldn't even bother pre-generating the triangular numbers.  Testing whether a number is triangular can be done using a simple arithmetic loop — the sort of thing that a CPU is very good at doing.  For small numbers, it's likely to be even faster than looking up entries in a data structure, since the CPU doesn't have to access memory to perform arithmetic.</p>

<p>If I had to test a large number <em>t</em> for triangularity in O(1) time, I'd use the formula in this form:</p>

<p><span class="math-container">$$\lfloor \sqrt{2t} \rfloor \lceil \sqrt{2t} \rceil \stackrel{?}{=} 2t$$</span></p>

<p>… verifying that <span class="math-container">\$\sqrt{2t}\$</span> is not integer.</p></li>
<li><strong>Scoring:</strong> Use the built-in <a href="https://docs.python.org/3/library/functions.html" rel="nofollow noreferrer"><code>sum()</code></a> function with a <a href="https://docs.python.org/3/tutorial/classes.html#generator-expressions" rel="nofollow noreferrer">generator expression</a>.  The words appear to be all uppercase already; no need to <code>.lower()</code>.  I would use <a href="https://docs.python.org/3/library/functions.html#ord" rel="nofollow noreferrer"><code>ord()</code></a> to convert letters to numbers.</li>
<li><strong>Counting words that meet the criterion:</strong> Again, use the <code>sum()</code> function, which will treat <code>True</code> values as <code>1</code>, effectively acting as a counter.  In my solution below, <code>print(sum(is_triangular(score(w)) for w in words(fileinput.input())))</code> effectively summarizes the purpose of the entire program in one line.</li>
</ul>

<p>With those suggestions, the solution can just consist of a few one-liner functions, and a loop.  It would be a good idea to write <a href="https://docs.python.org/3/library/doctest.html" rel="nofollow noreferrer"><code>doctest</code>s</a> to verify that the behavior is consistent with the examples given in the challenge.</p>



<pre><code>import csv
import fileinput
from itertools import count

def is_triangular(number):
    """
    Test whether number is of the form n(n+1)/2.

    &gt;&gt;&gt; is_triangular(1)
    True
    &gt;&gt;&gt; is_triangular(55)
    True
    &gt;&gt;&gt; is_triangular(56)
    False
    """
    counter = count(1)
    while number &gt; 0:
        number -= next(counter)
    return number == 0

def score(word):
    """
    Calculate the word value by converting 'A'=1, 'B'=2, ..., 'Z'=26, and
    adding.  Characters must all be uppercase letters.

    &gt;&gt;&gt; score('SKY')
    55
    """
    return sum(ord(c) - (ord('A') - 1) for c in word)

def words(fileinput):
    return next(csv.reader(fileinput))

if __name__ == '__main__':
    print(sum(is_triangular(score(w)) for w in words(fileinput.input())))
</code></pre>
    </div>