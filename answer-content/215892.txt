<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>When running your program with the <a href="https://blog.golang.org/race-detector" rel="nofollow noreferrer">Go race detector</a>, it found no race conditions. That's good!</p>

<p>Given this, I would consider your "execution scheduling" valid.</p>

<blockquote>
  <p>Is it appropriate to use defined-size channels here?</p>
</blockquote>

<p>Sure. In this case you make the buffer large enough such that it will not be blocked. You can read more about the difference between buffered and unbuffered channels <a href="https://golang.org/doc/effective_go.html#channels" rel="nofollow noreferrer">here</a>.</p>

<h2>Benchmark through <a href="https://golang.org/pkg/testing/#hdr-Benchmarks" rel="nofollow noreferrer"><code>testing</code></a></h2>

<blockquote>
  <p>Is there a better/more effective way to achieve this task?</p>
</blockquote>

<p>For benchmarking, it is recommended to use the utilities provided by the <code>testing</code> package.</p>

<p>A lot of this code is boilerplate benchmarking code. With the <code>testing</code> package you can be more confident in the accuracy of your benchmarks, especially since you're using goroutines.</p>

<p>(I will leave switching to the <code>testing</code> package for you.)</p>

<h2>Performance bias</h2>

<pre><code>sites[site]+pages[page]
</code></pre>

<p>Adding strings through the <code>+</code> operator <a href="https://stackoverflow.com/q/1760757/6789498">is slow</a>. This could bias your results (ie if you have lots of very long strings), but that also depends on how many sites and pages you test with.</p>

<p>Without knowledge of your full usage, it's hard to tell.</p>

<h2>Accuracy</h2>

<pre><code>time.Since(begin).Nanoseconds() / 1000000 // convert to milliseconds
</code></pre>

<p>I would instead use <code>.Seconds()</code>. Any variation on the scale of milliseconds would be meaningless. From testing with one site and two pages, I received response times of 10288 (10s) and 8128 ms (8s) and an end time of 30073 ms (30s).</p>

<p>Rather than converting to <code>int64</code> I would keep the type as <code>float64</code>.</p>

<h2>String formatting</h2>

<p>With the details above:</p>

<pre><code>fmt.Println("End.")
fmt.Println(fmt.Sprintf("%d ms", time.Since(begin).Nanoseconds()/1000000))
</code></pre>

<p>Should instead be converted to:</p>

<pre><code>fmt.Printf("End.\nTotal time: %.0fs\n", time.Since(begin).Seconds())
</code></pre>

<p>And</p>

<pre><code>fmt.Printf("Url : %v\nResponse Time : %d ms\n\n", benchmark.url, benchmark.time)
</code></pre>

<p>Should instead be:</p>

<pre><code>fmt.Printf("Url: %s\nResponse Time: %.0fs\n\n", benchmark.url,
    benchmark.time)
</code></pre>

<p>(Notice I use <code>%s</code> rather than <code>%v</code>.)</p>

<h2>Variable naming</h2>

<p>Variables can have shorter names, especially in shorter functions where their purpose is clear.</p>

<ul>
<li><code>totalExecTimeChan</code> becomes <code>timeChan</code></li>
<li><code>totalExecTime</code> becomes <code>time</code></li>
<li><code>BenchmarkTry</code> becomes <code>tries</code></li>
</ul>

<p>I would argue that the names <code>tc</code> and <code>t</code> would be equally fine for the first two.</p>

<p>Capitalization matters in Go. The variable <code>BenchmarkTry</code> and the type <code>PageBenchmark</code> would be exported. In this case it does not make a difference, but for larger programs and packages it would be important.</p>

<h2>Miscellaneous</h2>

<ol>
<li><p>This cast is not needed.</p>

<pre><code>totalExecTime := int64(0)
</code></pre>

<p>With the switch to <code>float64</code>, it can instead be:</p>

<pre><code>totalExecTime := 0.0
</code></pre></li>
<li><p>Some of your comments extend beyond the 80-character column. It is useful to stay within 80 characters when viewing things split across your screen. Instead, move comments to the line before the code. (Some of these comments are superfluous, but you're learning so that's okay.)</p></li>
<li><p>Store <code>len(sites)*len(pages)</code> in a constant, rather than recomputing it each time.</p></li>
</ol>

<h2>Conclusion</h2>

<p>Here is the code I ended up with:</p>

<pre><code>package main

import (
    "fmt"
    "net/http"
    "time"
)

const tries = 1000

type pageBenchmark struct {
    url  string
    time float64
}

func execBenchmark(url string, benchmarks chan pageBenchmark) {
    // prevent blocking goroutine
    timeChan := make(chan float64, tries)
    time := 0.0

    // start all requests
    for i := 0; i &lt; tries; i++ {
        go execHTTPRequest(url, timeChan)
    }

    // catch new values from execHTTPRequest()
    for i := 0; i &lt; tries; i++ {
        // wait to get value from goroutine
        time += &lt;-timeChan
    }

    benchmarks &lt;- pageBenchmark{url, time / tries}
}

// exec HTTP request and attach exec time to channel
func execHTTPRequest(url string, timeChan chan float64) {
    begin := time.Now()
    _, _ = http.Get(url)
    timeChan &lt;- time.Since(begin).Seconds()
}

func main() {
    sites := [...]string{
        // sites
    }

    pages := [...]string{
        // pages
    }

    const length = len(sites) * len(pages)

    // set size to prevent blocked goroutine
    benchmarks := make(chan pageBenchmark, length)

    begin := time.Now()

    fmt.Println("Beginning!\n")

    // start all the goroutines
    for site := range sites {
        for page := range pages {
            go execBenchmark(sites[site]+pages[page], benchmarks)
        }
    }

    // catch and print benchmarks
    for i := 0; i &lt; length; i++ {
        b := &lt;-benchmarks
        fmt.Printf("Url: %s\nResponse Time: %.0fs\n\n", b.url, b.time)
    }

    // print total execution time
    fmt.Printf("End.\nTotal time: %.0fs\n", time.Since(begin).Seconds())
}
</code></pre>

<p>Hope this helps!</p>
    </div>