<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The major algorithmic optimization can be done by removing the prime number test entirely. Simply finding the factors in order and exhausting each only produces primes. Here is some modified code for reference.</p>

<pre><code>static long LargestPrimeFactorOf(long n)
{
    long factor = 2;
    Console.Write("Largest factor of {0} is: ", n);

    while (n &gt; 1)
    {
        if (n % factor == 0)
        {
            n /= factor;
        }
        else
        {
            factor++;
        }
    }
    Console.WriteLine(factor);
}
</code></pre>

<p>As you can see, I'm simply recursively dividing by the number <code>factor</code> until it can't be perfectly divided anymore (this avoids false-positives by <code>factor</code>'s multiples). As a result only prime numbers are operated over our number <code>n</code>.</p>

<p>This algorithm takes on average <strong>0.11 milliseconds</strong> over 20,000 runs on an Intel i5 2.2GHz processor, 8GB RAM system.</p>
    </div>