<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I don't think there is a better than <span class="math-container">\$O(n)\$</span> and <span class="math-container">\$O(1)\$</span> to this problem. </p>

<p>However you can simplify the code a little (trivial) by subtracting from the expected total.</p>

<pre><code>const findVal = nums =&gt; vals.reduce((t, v) =&gt; t - v, nums.length * (nums.length + 1) / 2);
</code></pre>

<p>Or</p>

<pre><code>function findVal(nums) {
    var total = nums.length * (nums.length + 1) / 2;
    for (const v of nums) { total -= v }
    return total;
}
</code></pre>

<p>BTW</p>

<p>The extra brackets are not needed when calculate the total</p>

<pre><code>(x * (x + 1)) / 2 === x * (x + 1) / 2
</code></pre>
    </div>