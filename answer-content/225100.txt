<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Of your questions, I think</p>

<blockquote>
  <ol start="4">
  <li>Should I have kept with the array, instead of creating a vector from it?</li>
  </ol>
</blockquote>

<p>is the most fundamental. Changing data structures might be a <a href="https://en.wikipedia.org/wiki/Code_smell" rel="nofollow noreferrer"><em>code smell</em></a>. In C++ Arrays are immutable and the reasons for using them often involve execution speed via static allocation at compile time and idempotency in concurrent execution.</p>

<p><strong>Function Design</strong></p>

<p>The encapsulation of the array as a vector avoids the quagmire of shared access in a concurrent environment. But the original array data type already solves that.</p>

<p>On the other hand, conversion to a vector does not preserve the performance profile of the underlying data type. </p>

<p>To put it another way, in the absence of knowledge about the reasons for using arrays in the part of the system that is calling <code>rotate</code>, working with the arrays rather than vectors is a conservative engineering choice.</p>

<p><strong>Alternative design</strong></p>

<p>Arrays make the problem one of pointer manipulation. One feature of the array abstraction is built in pointers.</p>

<pre><code>// Pseudo code
// one indexed array
rotate(array, n){
  print(array[n+1] to array.length + 
        array[1] to array[n];
}
</code></pre>

<p><strong>Context</strong></p>

<p>Coming from Javascript, the use of iteration and mutation rather than pointers is not surprising because iteration works on both arrays (as defined in ECMAscript) and the node lists returned by the API's of various browsers. Because node lists can be live, array methods don't always work but iteration always will.</p>

<p><strong>Validation</strong></p>

<p>The code does not validate the value of <code>n</code> relative to the length of the array. There's a design decision about what should happen when the <code>array</code> and <code>n</code> are incompatible. Is printing a message enough? Is something more heavyweight required?</p>

<p><strong>Extending the problem</strong></p>

<p>Adding left rotation doesn't make the code better. So long as shifting left is not part of the specification, it only makes the code more complex. Eliminating the extension removes several of your questions and simplifies the code. Engineering wise: <a href="https://en.wikipedia.org/wiki/You_aren%27t_gonna_need_it" rel="nofollow noreferrer">YAGNI</a>. </p>

<p>Building the simplest thing that might work, provides more time for fundamental design practices including testing, data validation, and error handling. </p>

<p><strong>Types</strong></p>

<p>The code may break if tested against types other than <code>int</code>. As specified the problem can't assume that it won't be fed other data types. The vector could be <code>&lt;T&gt;</code> (generic). This might be a place where the <a href="https://en.wikipedia.org/wiki/Robustness_principle" rel="nofollow noreferrer">Robustness principle/Postel's Law</a> might be relevant.</p>

<p><strong>Remarks</strong></p>

<p>Keep in mind that it's ok to write C++ code that looks like it was written by someone without years of C++ experience. Haskell and Javscript are rarely used for problems where C++ excels. They are so very different. C++'s idioms don't translate to either very well...but it's probably good to reason about types in C++ based on Haskell experience.</p>
    </div>