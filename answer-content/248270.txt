<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You should not use <code>==</code>/<code>!=</code> to compare to singletons like <code>None</code>, instead use <code>is</code>/<code>is not</code>.</p>
<p>Here is one way to restructure your conditions. This reduces the amount of nesting, which hopefully increases the overall readability.</p>
<pre><code>import math

def independent_cascade_model(G: nx.Graph, seed: list, beta: float=1.0):       
    informed_nodes = {n: None for n in seed}
    updated = True
    while updated:
        updated = False
        for u, v, diffusion_time in G.edges(nbunch=informed_nodes, data='diffusion_time'):
            if informed_nodes.get(u, math.nan) &lt;= diffusion_time:
                # node is already set up properly
                continue
            elif random.random() &gt;= beta:
                continue
            elif informed_nodes.get(v, math.inf) &gt; diffusion_time:
                informed_nodes[v] = diffusion_time
                updated = True
    return informed_nodes
</code></pre>
<p>Here I also used <code>dict.get</code> with the optional default argument set in such a way that the conditions are the right way around for missing data.</p>
<pre><code>&gt;&gt;&gt; n = 10             # works for any numeric n
&gt;&gt;&gt; math.nan &lt;= n    
# False

&gt;&gt;&gt; import sys
&gt;&gt;&gt; n = sys.maxsize    # works for any numeric n except for inf
&gt;&gt;&gt; math.inf &gt; n
# True
</code></pre>
<p>Just make sure you don't run into <code>math.inf &gt; math.inf</code> -&gt; <code>False</code> or <code>math.inf &gt; math.nan</code> -&gt; <code>False</code></p>
<p>You should also add a <a href="https://www.python.org/dev/peps/pep-0257/" rel="nofollow noreferrer">docstring</a> to your function explaining what it does and what the arguments are.</p>
    </div>