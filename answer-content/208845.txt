<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Overall, this seems fairly well written. But you said to be relentless and blunt, so here's what I really think! ðŸ˜‰</p>
<blockquote>
<p>If you want to investigate it more, or even test it, all dependencies and a test_main.c are ready made in the following Github repo: click here. Litterally just download and press make.</p>
</blockquote>
<p>Ugh. This seems to me to straddle the line in the <a href="https://codereview.stackexchange.com/help/how-to-ask">rules for the site</a>:</p>
<blockquote>
<p>Be sure to embed the code you want reviewed in the question itself; you can leave supporting, but non-essential, code in links to other sites.</p>
</blockquote>
<p>I wouldn't consider missing <code>#includes</code> to  be "supporting but non-essential code". If your actual code is separated into a header and a source file, you should post them both separately here rather than inlining the header and omitting the includes.</p>
<h1>Style</h1>
<p>I have to say that while I am one of  these people who likes to line things up to some degree, you've gone overboard with aligning things, in my opinion. For me, it's actually harder to read with your formatting. I don't think that every variable and function declaration throughout the code needs the same spacing. Furthermore, the spacing on functions that go longer than you like makes it look like another function declaration on the next line, but an invalid one. If you're going to wrap the arguments, it's tradition to either indent them one level, or line them up with the function arguments on the previous line.</p>
<p>You should avoid declaring variables until you need them. If a person reading your code wants to know what type a variable is, it's easier to find if it's close to its first  use. Likewise, if you want to change a type, it's easier to do if it's near where it's used.</p>
<h1>Naming</h1>
<p>I think your function names could be shorter. There's a lot of redundant words in their names. For example, <code>hashtable_alloc_table()</code> could just be <code>hashtable_alloc()</code>, and <code>hashtable_insert_entry()</code> could just be <code>hashtable_insert()</code>. (What else would you be inserting into a hash table? A dinner plate?)</p>
<p>Adding <code>t_</code> to the front of every type is unnecessary. Types are obviously types from the context in which they're used. If you must add something, make it a suffix of <code>_t</code> like every other C programmer so it's consistent. Also, what's the purpose of giving <code>struct</code> names a prefix of <code>s_</code>? Are you ever going to write the type as <code>struct s_whatever</code> instead of <code>t_whatever</code>? If not, just give  it the  same name, so it's:</p>
<pre><code>typedef struct foo {
    // fields
} foo;
</code></pre>
<p>In <code>hashtable_alloc_table()</code>, the argument is called <code>size</code>, but the units aren't clear. My assumption on reading the declaration was that it was going to be in bytes. But it's actually the number of entries to hold. As such, I would name it <code>numEntries</code> rather than <code>size</code> because <code>size</code> is ambiguous.</p>
<p>The difference between <code>hashtable_dealloc_table()</code> and <code>hashtable_destroy_table()</code> is surprising given their names. It seems like <code>hashtable_dealloc_table()</code> should be renamed to <code>hashtable_shrink_table()</code> or something more in line with what it's doing.</p>
<p>The name <code>hashtable_check_load_factor()</code> is also misleading. I wouldn't expect a function which is named "check " to change anything. I would call it something like <code>hashtable_set_appropriate_load_factor()</code> or something like that so that a caller knows that it may change the hash table.</p>
<p>Finally, what does the prefix <code>ft</code> stand for? It's not at all clear from the code you posted. A comment about its meaning somewhere might be appropriate.</p>
<h1>Memory Leak in <code>hashtable_alloc_table()</code></h1>
<p>There's a memory leak in 'hashtable_alloc_table()<code>. If the table is allocated, but the bucket list isn't, it returns </code>NULL`, but it never frees the table. That memory  is now considered in-use by the OS making it unavailable to be re-used.</p>
<h1>Redundancy</h1>
<p>Why have the caller pass in a pointer to a pointer to <code>hashtable_realloc_table()</code>, and then return a pointer to a hash table? You should do one or the other. A pointer  to a pointer allows you to change the value of the pointer the caller uses, so you don't need to also return the new one. You can simply delete the old one and replace it with the new one.</p>
<h1>Comments</h1>
<p>I think you have too much info in your function comments. Why should I care which functions you call from that function? I shouldn't need to know that info. I shouldn't need to know which headers include the functions that any given function depends on. They should simply be included at the top of the file (which they aren't here).</p>
<p>The problem with comments is that they can get out of date with the code. That has happened with your <code>hashtable_realloc_table()</code> function. It says that it "Grows the hash table by half", but it actually doubles the hash table size. Perhaps it used to only grow it by half, but now it doubles it?</p>
<p>I have no idea what "search tags" are in this context, and it seems unnecessary. I either already know what to search for or I don't. If I search for the function name, I'll find the function definition, so I don't need the tag.</p>
<h1>Standard Library</h1>
<p>You say:</p>
<blockquote>
<p><em>Note: I implement my own standard library functions</em></p>
</blockquote>
<p><b>Oh <i>Heck</i> no!</b> The original implementors of the standard library <a href="https://en.wikipedia.org/wiki/C_standard_library#Concepts,_problems_and_workarounds" rel="nofollow noreferrer">made  all kinds of mistakes in how they designed</a> the standard library functions. Your implementations likely have all those same mistakes plus a whole bunch more due to the fact that you're a beginner at this. It's an interesting exercise to learn the language, but you shouldn't use them in real code.</p>
    </div>