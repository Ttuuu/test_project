<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>In general I find this implementation is OK. It uses internally two dictionaries as it should or rather must so there is not much to get wrong. </p>

<hr>

<p>What I do not like is the underscore naming convention for the generic parameters and their abbrevaited names.</p>

<hr>

<p>I wouldn't let this class implement the <code>IDictionary</code> interface as technically it needs two of them: <code>TKey --&gt; TValue</code> and <code>TValue --&gt; TKey</code>. This however will lead to problems with the default indexer when <code>TKey</code> and <code>TValue</code> are of the same type you would have two identical indexers and it would be ambiguous which one should be used.</p>

<p>At this point I also have to say that your API is incomplete because even though it uses two dictionaries, it doesn't allow me to get <code>TKey</code> by <code>TValue</code> as there is only one <code>TryGetValue</code> method. So your claim that it's bi-directional is <strong>false</strong>.</p>

<hr>

<p>Instead, I would just call it <code>Mapping</code> and implement only APIs that you need. If you need dictionaries then I think it'd be cleaner if you added such methods as <code>ToXYDictionary</code> and <code>ToYXDictionary</code>. With your custom class you can implement whatever behavior you desire. As long as you use the <code>IDictionary</code> interface you should be consistent with its behaviour (see your comment <code>Add</code> vs <code>this[]</code>).</p>

<hr>

<p><code>Remove</code> doesn't have to check whether any of the keys exists. Just remove them both and return the result. It's guaranteed that there are always two keys.</p>
    </div>