<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>When you represent three towers using three variables, it's hard to generalize the code.  What you want is an array of three elements:</p>

<pre><code>puts "How many discs would you like to start with?"
discs = gets.to_i
final = discs.downto(1).to_a
towers = [nil, final.dup, [], []]
</code></pre>

<p>This allows you to write a function to handle moves in general.  (Note that you neglected to check whether the source tower actually contains any discs.)</p>

<pre><code>def move(towers, from, to)
  if from &lt;= 0 || towers[from].nil?
    puts "No such tower: #{from}\n"
  elsif to &lt;= 0 || towers[to].nil?
    puts "No such tower: #{to}\n"
  elsif towers[from].empty?
    puts "Tower #{from} has no discs to move!\n"
  elsif from == to
    puts "You can't put the same disc where you got it from!\n"
  elsif !towers[to].empty? &amp;&amp; towers[from].last &gt; towers[to].last
    puts "Invalid move. You can't place a bigger tile on top of a smaller one."
    puts "Try again!\n"
  else
    towers[to] &lt;&lt; towers[from].pop
    return true
  end
end
</code></pre>

<p>The main loop then becomes much simpler.  Also, you should structure the loop with the proper termination condition rather than <code>while true</code>.</p>

<pre><code>moves = 0
while towers[2] != final &amp;&amp; towers[3] != final
  puts "Here is how the game board looks right now:"
  1.upto(3) { |t| puts "Tower #{t}: #{towers[t]}" }

  puts "Please select what tower you want to chose from:"
  select = gets.to_i
  puts "Please select what tower you want to place disc:"
  destination = gets.to_i

  if move(towers, select, destination)
    moves += 1
  end
end
puts "You win the game! You did it in #{moves} moves!"
</code></pre>
    </div>