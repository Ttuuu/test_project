<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><p>You have a lot of inconsistantcies.</p>
<ul>
<li><p><code>import string</code> <code>from string import ...</code> But then only using <code>import secrets</code>.</p>
<p>I would only use <code>import string</code>.</p>
</li>
<li><p>You do <code>[:index]</code> but also <code>[index + 1 :]</code>.</p>
</li>
<li><p>You do <code>index + 1</code> but you also do <code>password_length-len(password)</code>.</p>
</li>
<li><p>You start <code>generate_password</code> using a one argument per line style, and then don't for the rest of the arguments.</p>
</li>
</ul>
</li>
<li><p>You should move <code>"!@#$%^&amp;*"</code> into a constant, as you've duplicated it.</p>
</li>
<li><p>You can use <a href="https://docs.python.org/3/library/random.html#random.choices" rel="nofollow noreferrer"><code>random.SystemRandom.choices</code></a> rather than <code>generate_characters</code>. <a href="https://docs.python.org/3/library/random.html#random.SystemRandom" rel="nofollow noreferrer"><code>SystemRandom</code></a> uses <a href="https://docs.python.org/3/library/os.html#os.urandom" rel="nofollow noreferrer"><code>os.urandom</code></a> which is "suitable for cryptographic use."</p>
<pre class="lang-py prettyprint-override"><code>import random

srandom = random.SystemRandom()


def generate_characters(character_set, character_amount):
    return srandom.choices(character_set, k=character_amount)
</code></pre>
</li>
<li><p>You can use <a href="https://docs.python.org/3.8/library/random.html#random.sample" rel="nofollow noreferrer"><code>random.SystemRandom.sample</code></a> to replace <code>shuffle</code>.</p>
</li>
<li><p>Your current method is really inefficent it runs in <span class="math-container">\$O(n^2)\$</span> time.
As you're building a new list every iteration.</p>
<pre class="lang-py prettyprint-override"><code>"".join([input_str[:index], input_str[index + 1 :]])
</code></pre>
<p>Instead change <code>input_str</code> to a list and use a similar algorithm by swapping the current index with the selected. Also known as the <a href="https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle" rel="nofollow noreferrer">Fisherâ€“Yates shuffle</a>.</p>
<pre class="lang-py prettyprint-override"><code>def shuffle(input_str):
    output = list(input_str)
    for i in range(len(input_str)):
        index = srandom.randrange(i, len(input_str))
        output[i], output[index] = output[index], output[i]
    return "".join(output)
</code></pre>
</li>
<li><p>I'm not a fan of passing so many keyword arguments to <code>generate_password</code>.
I would instead make it take tuples of (subset, amount) and build the password that way.</p>
<p>You can loop over these arguments so that the code is simple too.</p>
<pre class="lang-py prettyprint-override"><code>def generate_password(password_length, *subsets):
    password = "".join(
        generate_characters(subset, minimum)
        for subset, minimum in subsets
    )
    superset = "".join(subset for subset, _ in subsets)
    password += "".join(generate_characters(superset, password_length - len(password)))
    return shuffle(password)
</code></pre>
</li>
</ul>
<pre class="lang-py prettyprint-override"><code>import string
import random
import argparse

srandom = random.SystemRandom()


def generate_password(password_length, *subsets):
    password = "".join(
        "".join(srandom.choices(subset, k=minimum))
        for subset, minimum in subsets
    )
    superset = "".join(subset for subset, _ in subsets)
    password += "".join(srandom.choices(superset, k=password_length - len(password)))
    return "".join(srandom.sample(password, len(password)))


if __name__ == "__main__":
    ...

    generated_password = generate_password(
        args.password_length,
        (args.subset_lower, args.min_lowercase),
        (args.subset_upper, args.min_uppercase),
        (args.subset_numeric, args.min_numeric),
        (special, args.min_special),
    )
    print("Password:", generated_password)
</code></pre>
    </div>