<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>It has taken me a while, but I think I understand what you are doing now.  And I’ve got some improvements.  I’m only going to consider your code that passes 100%.  (Your code that doesn’t work properly in all cases is not appropriate for review on Code Review.)</p>

<hr>

<p>First, you compute <code>len(s)-1</code> in many places.  You should compute it once and store it in a local variable. </p>

<hr>

<p>You compute the letter counts and store it in:</p>

<ul>
<li><code>linker["%s%s" % (len(s)-1, i)]</code> and</li>
<li><code>linker["%s%s" % (0, i)]</code></li>
</ul>

<p>These are really 2 separate dictionaries, both counting characters from each end of the string.  It takes time to create the tuple, format it into the string, and then use that string as the dictionary key.</p>

<p>Why not simply use two dictionaries?  Say <code>forward[i]</code> and <code>backward[i]</code>?</p>

<hr>

<pre><code>d1 = dict()
d2 = dict()
</code></pre>

<p>You unconditionally create these dictionaries, and then throw them away in most cases.  Creating dictionaries takes time.  Use an <code>else:</code> clause and only create them when needed.</p>

<hr>

<pre><code>result[k] = ...
if result[k] == 0:
    del result[k]
</code></pre>

<p>You do a calculation, create a dictionary entry, look up the dictionary entry, test it for zero, and delete the entry if it was.  Seems like we can make some large gains here.</p>

<pre><code>temp = ...
if temp != 0:
    result[k] = temp
</code></pre>

<hr>

<pre><code>if list(result.values())[0] == list(result.values())[1]:
</code></pre>

<p>Take a dictionary, create a view of values only, convert it to a list, take only the first element from the list, and then...  Take the same list, create another view of values, convert it into another (identical) list, and take the second value from the list.  Finally, compare the two values.</p>

<p>Very inefficient!</p>

<p>How about:</p>

<pre><code>x, y = result.values()
if x == y:
</code></pre>

<hr>

<p>To count the middle elements between i &amp; j only, you do evaluate <code>everything - forward[i] - backward[j]</code>.</p>

<p>I don’t think you need <code>everything</code> or <code>backward[ ]</code> at all.  You could just use <code>forward[j] - forward[i]</code>.</p>
    </div>