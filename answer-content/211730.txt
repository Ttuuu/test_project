<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><a href="https://codereview.stackexchange.com/a/211671/16504">RobH's review</a> covers syntax and style well so I won't go into that. Instead I'd like to give my take on feedback given by <a href="https://codereview.stackexchange.com/a/211704/16504">Svek</a> and <a href="https://codereview.stackexchange.com/a/211716/16504">BittermanAndy</a>. </p>

<h2>Separation Of Concerns</h2>

<p>I think Svek's commentary about the <code>CreateObjects</code> method is spot on, but I don't think it goes far enough. The need for such a method in the first place hints that the <code>ExploreTheHouseForm</code> class is doing to much. With the current implementation, each of the rooms is a field on the form. This effectively makes the <code>ExploreTheHouseForm</code> the house itself. As such it would be more aptly named <code>ExplorableHouseForm</code>.</p>

<p>In general (and this becomes ever more important as you get into more complex projects) we want to separate the presentation of the data from the data itself.</p>

<p>The form <em>is the UI</em> it already has the duty to present the data to the user. It shouldn't also <em>be the data</em>. I would much rather the house be constructed elsewhere and passed to the form's constructor:</p>

<pre><code>    public ExploreTheHouseForm(Location initialRoom)
    {
        InitializeComponent();
        MoveToLocation(initialRoom);
    }
</code></pre>

<p>With this simple change, you can remove all the individual <code>Location</code> fields from <code>ExploreTheHouseForm</code> with the exception of <code>currentLocation</code>. Also, if you desire, you can use the same form to explore any number of different houses without further modification.</p>

<h2>Immutability</h2>

<p>A fair amount of BittermanAndy's advice (as of the time of this writing, his post was updated at least once since I started) was to try to make your <code>Location</code> class immutable. Since with the overall design as it is, locations need to reference each other, you run into a chicken &amp; egg scenario preventing immutability where each <code>Location</code> needs their neighbors to be created before them. I don't see a way around this, however if you have your locations implement an interface, and write your form to consume the interface rather than <code>Location</code> you can get much of the same benefit of actual immutability.</p>

<pre><code>public interface ILocation
{
    public string Name { get; }
    public IList&lt;ILocation&gt; Exits {get;}
    public string Description { get;}
}
</code></pre>

<p>In <code>ILocation</code> we only specify the <code>get</code> portions of the properties. This means to consumers of <code>ILocation</code> the properties are effectively read-only even if the implementing classes implement the <code>set</code>. We also declare <code>Exits</code> as a collection of <code>ILocation</code> rather than <code>Location</code> so that accessed members are also read-only to consumers.  </p>

<p>You don't have to change much about <code>Location</code> itself:</p>

<pre><code>public abstract class Location: ILocation
{
    ...
    //private field to back Exits property. 
    private IList&lt;ILocation&gt; _exits;

    public IList&lt;ILocation&gt; Exits {
       get
       {
           // AsReadOnly so that consumers are not allowed to modify contents.
           // there are other ways of accomplishing this that may be better overall, but ExploreTheHouseForm accesses Exits by index so we can only change it so much. 
           return _exits?.AsReadOnly();
       }
       set{ _exits = value;}
    }
}
</code></pre>

<p>Updating <code>ExploreTheHouseForm</code> is also straight forward, simply change the type of the field <code>currentLocation</code> the <code>Location</code> parameters of <code>ExploreTheHouseForm</code>, <code>MoveToLocation</code>, and <code>ShowGoThroughExteriorDoorButton</code> to <code>ILocation</code>:</p>

<pre><code>    ...
    private ILocation _currentLocation;
    ...
    public ExploreTheHouseForm(ILocation initialRoom)
    {
        InitializeComponent();
        MoveToLocation(initialRoom);
    }
    ...
    private void MoveToLocation(ILocation location)
    ... 
    private void ShowGoThroughExteriorDoorButton(ILocation location)
</code></pre>

<p>The overall impact of this is that the locations are mutable during construction (by some factory) but once construction is complete, all you work with the read-only <code>ILocation</code></p>

<pre><code>// GenerateHouse returns the entry point of the house.

public ILocation GenerateHouse()
{
    // Configure the locations
    var livingRoom = new RoomWithDoor("living room", "an antique carpet", "an oak door with a brass knob");
    var kitchen = new RoomWithDoor("kitchen", "stainless steel appliances", "a screen door");
    var diningRoom = new Room("dining room", "a crystal chandelier");
    var frontYard = new OutsideWithDoor("front yard", false, livingRoom.DoorDescription);
    var backYard = new OutsideWithDoor("back yard", true, kitchen.DoorDescription);
    var garden = new Outside("garden", false);

    // Configure the exits
    livingRoom.Exits = new List&lt;ILocation&gt;() { diningRoom };
    kitchen.Exits = new List&lt;ILocation&gt;() { diningRoom };
    diningRoom.Exits = new List&lt;ILocation&gt; { livingRoom, kitchen };
    frontYard.Exits = new List&lt;ILocation&gt; { backYard, garden };
    backYard.Exits = new List&lt;ILocation&gt; { frontYard, garden };
    garden.Exits = new List&lt;ILocation&gt; { frontYard, backYard };

    // Configure exterior doors
    livingRoom.DoorLocation = frontYard;
    frontYard.DoorLocation = livingRoom;
    kitchen.DoorLocation = backYard;
    backYard.DoorLocation = kitchen;
    // return entry point.
    return livingRoom;

}
</code></pre>

<h2>Location Connectivity</h2>

<p>I agree with the other reviews and comments that pulling the concept of the location connection into a separate class/set of classes would allow for a better design. Locations can have any number of exits, and it is a property of the exit, not the location if that exit is an open archway, a door, or just an abstract dividing line (outdoor location to outdoor location) Comintern does a good job of covering this in <a href="https://codereview.stackexchange.com/a/211727/16504">their review</a> so I won't go into it further. </p>
    </div>