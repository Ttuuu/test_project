<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Bugs</h2>

<h3>Colorama Not Initialized</h3>

<p>Colorama should be initialized, to ensure proper operation:</p>

<pre><code>import colorama

colorama.init()
</code></pre>

<h3>Clear Screen</h3>

<blockquote>
  <p>sh: cls: command not found</p>
</blockquote>

<p>On non-Windows machines, <code>cls</code> is not defined</p>

<p>Instead, simply use colorama to clear the screen.</p>

<pre><code>def clear():
    print(colorama.ansi.clear_screen())
</code></pre>

<h3>Play again</h3>

<pre><code>Do you want to play again? &lt;Y&gt;es or &lt;N&gt;oY 
Do you want to play again? &lt;Y&gt;es or &lt;N&gt;oN 
Do you want to play again? &lt;Y&gt;es or &lt;N&gt;oy 
Do you want to play again? &lt;Y&gt;es or &lt;N&gt;on 
Do you want to play again? &lt;Y&gt;es or &lt;N&gt;o 
</code></pre>

<p>No answer seems to provide the expected behaviour, due to:</p>

<pre><code>while play_again != 'y' or play_again != 'n':
</code></pre>

<p>always being <code>True</code>.  You need the <code>and</code> conjunction, not <code>or</code>.</p>

<hr>

<h2>Unused variables</h2>

<pre><code>toh = TowerOfHanoi(n1, 1, 2, 3)
</code></pre>

<p><code>toh</code> is never used after this point.  So, why store it in a variable?</p>

<hr>

<h2>Global variables</h2>

<pre><code>a = [i for i in range(1, n1 + 1)]
b = []
c = []

toh = TowerOfHanoi(n1, 1, 2, 3)
</code></pre>

<p><code>a</code>, <code>b</code>, and <code>c</code> are used inside the <code>TowerOfHanoi</code> class, but are not passed to the class.  Instead they are globals variables that must be properly initialized corresponding to the value <code>n1</code> passed to the <code>TowerOfHanoi</code> constructor.</p>

<p>These lists should be created by the class itself, based on the argument passed to the constructor.  Moreover, they should be members of the class, not globals.</p>

<hr>

<h2>Code Duplication</h2>

<p>This code:</p>

<pre><code>    for i in a1:
        s = ' ' * (m - i + 1)
        h = Fore.RED + s + '██' * i + s + Style.RESET_ALL

        x.append(h)
</code></pre>

<p>is replicated 3 times, with <code>a1</code> changing to <code>b1</code> and <code>c1</code>, and <code>x</code> changing to <code>y</code> and <code>z</code>.  Perhaps you could refactor this into its own function, taking the rod list as input, and generating &amp; returning the lists internally?</p>

<pre><code>    def rod_images(self, rod):
        # Fill rod with required 0's at top
        rod = [0] * (self.n - len(rod)) + rod

        image_rows = []
        for i in rod:
            spaces = ' ' * (self.n - i + 1)
            row = Fore.RED + spaces + '██' * i + spaces + Style.RESET_ALL
            image_rows.append(row)

        return image_rows
</code></pre>

<p>Then you could simply write:</p>

<pre><code>    def parser(self, a1, b1, c1):

        x = self.rod_images(a1)
        y = self.rod_images(b1)
        z = self.rod_images(c1)

        # ... etc ...
</code></pre>

<hr>

<h2>Zero, One &amp; Many</h2>

<p>In programming, there are 3 important numbers: zero, one, and many.  How many rods do you have?  More than one, so ... you have many rods.  Many items are stored in containers, such as lists, not individual variables.  So instead of this:</p>

<pre><code>    self.r1 = r1
    self.r2 = r2
    self.r3 = r3
</code></pre>

<p>write something like:</p>

<pre><code>    self.rods = [r1, r2, r3]
</code></pre>

<p>Then, instead of</p>

<pre><code>    print(' ' * self.n + str(self.r1)
          + ' ' * (self.n * 2 + 1) + str(self.r2)
          + ' ' * (self.n * 2 + 1) + str(self.r3))
</code></pre>

<p>you can take advantage of the fact that you are doing something with each item in the list, in order.  In this case, you are converting each item to a string, and then joining them together with a bunch of spaces in-between:</p>

<pre><code>    print(' ' * self.n
          + (' ' * (self.n * 2 + 1)).join(str(rod) for rod in self.rods)
</code></pre>

<p>But ... that still looks ugly.  What you are really doing is printing out 3 values, each centred in a <code>n * 2 + 2</code> character wide field:</p>

<pre><code>    width = self.n * 2 + 2
    print((f"{{:^{width}}}"*3).format(*self.rods))
</code></pre>

<p>With 3 disks, this creates the format string <code>"{:^8}{:^8}{:^8}"</code> which centres the 3 values each in 8 character wide fields.</p>

<p>A similar method could be used to centre the discs when printing, as long as the colour/style codes are removed from the disc "values" and moved to the format string itself, so they don't mess up the character counts for automatic centring.</p>

<h2>Unnecessary Default Arguments</h2>

<p>Calling <code>solve()</code>, with no arguments, is only done from <code>__init__()</code>.  So the only time the default arguments are used is that one call.  So why complicate the method with default arguments which must be set via a number of <code>if _ is None:</code> tests?  Simply use:</p>

<pre><code>self.solve(self.n, self.r1, self.r2, self.r3, 0, 1, 2)
</code></pre>

<p>in the <code>__init__()</code> method, and remove the default arguments and default argument substitution code.</p>
    </div>