<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>It seems like you want to find a solution for <code>a²+b²=c²-1</code> with some added constraints, like <code>a&lt;=b&lt;=c</code>, <code>a+b+c&lt;=n</code>, etc. by trying <em>all</em> possible combinations of <code>a</code>, <code>b</code>, and <code>c</code> and testing whether they satisfy all your conditions at once. This is pretty wasteful.</p>

<p>Instead of <code>itertools.product</code>, you can use a generator expression with three regular <code>for</code> loops. This has several advantages:</p>

<ul>
<li><p>you could move some of the <code>if</code> clauses up after the first or second loop, i.e. you don't have to run the other loops if those conditions already fail at this point, e.g.</p>

<pre><code> for x in ... if test(x) for y in ... if test(y) ...
</code></pre></li>
<li><p>you can use the values of your previous variables in the lower and upper bounds for the later variables (in your case this replaces most of your <code>if</code> conditions)</p></li>
<li>you can basically <em>calculate</em> the value for <code>c</code> from <code>a</code> and <code>b</code> without testing all possible values</li>
</ul>

<p>This is how I'd do it:</p>

<pre><code>gen = ((a, b, int(c))
       for a in range(2, v_max_n + 1, 2)
       for b in range(a, min(v_max + 1, n - a - a), 2) # use a for lower and upper bounds
       for c in [(a ** 2 + b ** 2 + 1)**0.5]           # just a single candidate for c
       if  c % 1 == 0)                                 # whole-numbered c found?
</code></pre>

<p>Note that the calculation of <code>c</code> using <code>very_large_number**0.5</code> might be imprecise with <code>float</code>; using <code>decimal</code> might work, though. However, even with those optimizations, testing much fewer values than your original loop (on the order of O(n²) instead of O(n³)), it might not be feasible to find solution for large values of <code>a</code>, <code>b</code> and <code>c</code>.</p>

<p>Also note that I did not thoroughly test this for off-by-one errors, since performance was the main concern.</p>

<p>Another thing that you might try: Invert the loops for <code>a</code> and for <code>b</code>, i.e. instead of testing all <code>b</code> for each <code>a</code>, no matter how large the difference, test all <code>a</code> up to <code>b</code> first. This does not decrease the number of combinations to test, but it seems to yield much more valid combinations in the "smaller" number much faster. Like this (upper bound for <code>b</code> can probably be reduced):</p>

<pre><code>       for b in range(2, v_max + 1, 2)
       for a in range(2, b+1, 2)
</code></pre>
    </div>