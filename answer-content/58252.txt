<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your algorithm doesn't scale.  In <a href="https://codereview.stackexchange.com/a/48185/9357">this answer</a>, I've outlined the three common strategies for finding the largest prime factor of a number, only one of which is reasonably efficient.  You've chosen Option 2 (testing largest candidates first, then check for primality).  However, you start at \$\lfloor\frac{n}{2}\rfloor\$ rather than \$\lceil\sqrt{n}\rceil\$, which is even less efficient, and furthermore it incorrectly produces <code>Nothing</code> whenever <code>n</code> is already prime.</p>

<p>Here's a Haskell implementation of Option 3 (testing smallest candidates first):</p>

<pre><code>largestPrimeFactor :: Integer -&gt; Maybe Integer
largestPrimeFactor n
  | n &lt;= 1    = Nothing
  | otherwise = Just $ largestPrimeFactor' n (2 : [3, 5..])
  where
    largestPrimeFactor' n pseudoprimeCandidates@(c:cs)
      | c * c &gt;= n = n
      | m == 0     = largestPrimeFactor' d pseudoprimeCandidates
      | otherwise  = largestPrimeFactor' n cs
      where
        (d, m) = divMod n c
</code></pre>

<p>Personally, I'd avoid contaminating the output with <code>Maybe</code>, since <code>Nothing</code> will only result from obviously illegal input anyway.</p>

<pre><code>largestPrimeFactor :: Integer -&gt; Integer
largestPrimeFactor n
  | n &lt;= 1    = error "largestPrimeFactor n where n &lt;= 1"
  | otherwise = largestPrimeFactor' n (2 : [3, 5..])
  where
    largestPrimeFactor' n pseudoprimeCandidates@(c:cs)
      | c * c &gt;= n = n
      | m == 0     = largestPrimeFactor' d pseudoprimeCandidates
      | otherwise  = largestPrimeFactor' n cs
      where
        (d, m) = divMod n c
</code></pre>
    </div>