<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Bug: Infinite loop</h3>

<p>If your program runs on a list that ends in an odd number, it will run forever in an infinite loop.  For example, try this input:</p>

<pre><code>1
3
1 2 3
</code></pre>

<p>The problem is with the termination condition of your loop:</p>

<pre><code>while(ptr1!=ptr5-&gt;next)
</code></pre>

<p><code>ptr5</code> is the last element of the original linked list (e.g. node <code>3</code>), and you are trying to terminate your loop when you have iterated through each element (get past node <code>3</code>).  However, if the last element is an odd number, it will be moved to the end of the list, and <code>ptr1</code> will never actually "get past ptr5".  Instead, it will only catch up to it, move it, and then keep iterating through the odd numbers of the list over and over.</p>

<p>I made some minor edits to your program to fix the problem, although your algorithm is still overly complicated and you should think about simpler ways of solving the same problem:</p>

<pre><code>void segregate(struct Node**head_ref)
{   int len=0,count=0;
    struct Node* ptr1=*head_ref;
    struct Node* ptr2=*head_ref;
    struct Node* prev=NULL;
    while(ptr2-&gt;next!=NULL)
    {
        if((ptr2-&gt;data)%2==0) count++;
        ptr2=ptr2-&gt;next;
        len++;
    }
    if(ptr2-&gt;data%2==0)  count++;
    if(count==len+1||count==0)  return;
    struct Node* ptr5=ptr2;
    while(ptr1!=ptr5-&gt;next)
    {
        if((ptr1-&gt;data%2)==0)
        { if(flag==0) {
        *head_ref=ptr1;
        flag=1;}
            prev=ptr1;
            // I added this termination condition
            if (ptr1 == ptr5)
                break;
            ptr1=ptr1-&gt;next;
        }
        else
        {
          if(prev!=NULL)  prev-&gt;next=ptr1-&gt;next;
            ptr2-&gt;next=ptr1;
            ptr2=ptr2-&gt;next;
            // I added this termination condition
            if (ptr1 == ptr5) {
                ptr2-&gt;next=NULL;
                break;
            }
            ptr1=ptr1-&gt;next;
            ptr2-&gt;next=NULL;
        }
    }
}
</code></pre>

<h3>Example of a simpler solution</h3>

<p>This solution assumes that you actually need to create a new sorted list instead of just printing out the answer.  It iterates through the original list and places each element into one of two lists.  Then it joins the two lists and returns the joined list.</p>

<pre><code>void segregate(struct Node**head_ref)
{
    struct Node *evenList = NULL;
    struct Node *evenTail = NULL;
    struct Node *oddList  = NULL;
    struct Node *oddTail  = NULL;

    // Separate nodes into two lists.
    for (struct Node *p = *head_ref; p != NULL; p = p-&gt;next) {
        if ((p-&gt;data) % 2 == 0) {
            if (evenTail != NULL)
                evenTail-&gt;next = p;
            else
                evenList = p;
            evenTail = p;
        } else {
            if (oddTail != NULL)
                oddTail-&gt;next = p;
            else
                oddList = p;
            oddTail = p;
        }
    }

    // Terminate odd list with NULL.
    if (oddList != NULL)
        oddTail-&gt;next = NULL;
    // Place odd list at the end of the even list.
    if (evenList != NULL)
        evenTail-&gt;next = oddList;
    else
        evenList = oddList;

    *head_ref = evenList;
}
</code></pre>
    </div>