<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First of all well done, this is not bad for a first program :D</p>

<h1>Good</h1>

<ul>
<li>Usage of functions</li>
<li>Using correct datatypes (dictionary for example)</li>
</ul>

<h1>Some Improvements in random order</h1>

<ul>
<li><p>Read <a href="https://www.python.org/dev/peps/pep-0008/" rel="noreferrer">PEP8</a>, the python style guide!</p></li>
<li><p>fix your indentation </p>

<p><a href="https://www.python.org/dev/peps/pep-0008/#indentation" rel="noreferrer">it is standard to use <code>4</code> spaces indentation in python</a></p></li>
<li><p>Prettify your code for better readability</p>

<blockquote>
<pre><code>stock={'banana':6,
'apple':0,
'orange':32,
'pear':15,}
</code></pre>
</blockquote>

<p>this maybe subjective but that is worse to read then this</p>

<pre><code>stock={
       'banana': 6,
       'apple': 0,
       'orange': 32,
       'pear': 15
      }
</code></pre></li>
<li><p>uppercase can be simplified</p>

<blockquote>
<pre><code>def uppercase(x):
    return x[0].upper()+x[1:]
</code></pre>
</blockquote>

<p><a href="https://docs.python.org/2/library/stdtypes.html#str.capitalize" rel="noreferrer">There is a builtin function for this</a></p>

<pre><code>&gt;&gt;&gt; print("apple".capitalize())
Apple
</code></pre></li>
<li><p>Remove tripple quotes if they are not neccesary</p>

<blockquote>
<pre><code>name=input('''What is your name?
''')
</code></pre>
</blockquote>

<p>There is no need to let this be over 2 lines, secondly maybe add a space for better UX</p>

<pre><code>name=input('What is your name? ')
</code></pre></li>
<li><p>Use <code>str.format()</code> or <code>f"strings"</code> over old style formatting</p>

<p>You use old style formatting alot <code>"%s" % "somestring"</code> </p>

<p>it is better to use the new style formatting <code>"{}".format("somestring")</code></p>

<p><a href="https://realpython.com/python-string-formatting/" rel="noreferrer">See String format best practises</a></p></li>
<li><p>Use a <code>if __name__ == "__main__"</code> guard</p>

<p><a href="https://stackoverflow.com/questions/419163/what-does-if-name-main-do">It will make your script importable while also being able to run from the CLI</a></p>

<pre><code>if __name__ == '__main__':
    name=input('What is your name? ')
    print('Hi, {}, welcome to my fruit store. Here is the menu:'.format(name))
    menu()
    ask_fruit(117)
</code></pre></li>
<li><p>Avoid Magic numbers</p>

<blockquote>
<pre><code>money=117
</code></pre>
</blockquote>

<p>Why <code>117</code>? Because numbers can't have an explanation it is called a magic number</p>

<p>Instead you can make it a <code>global</code></p>

<pre><code>STARTING_MONEY = 117
</code></pre></li>
<li><p>Instead of empty <code>print()</code> use <code>\n</code></p></li>
<li><p>Python doesn't really suit itself for recursion (recursion depth restrictions, memory consumption)</p>

<blockquote>
<pre><code>def ask_fruit(money):
fruit=input('''What fruit do you want?
''')
print()
if fruit in stock:
  if stock[fruit]&gt;0:
    ask_amount(fruit,money)
  else:
    print('''Sorry, %ss are out of stock
    '''%(fruit))
    ask_fruit(money)
else:
  print('''Sorry, we don\'t have that, look at the menu.
  ''')
  ask_fruit(money)
</code></pre>
</blockquote>

<p>Can be rewritten iterative</p>

<pre><code>def ask_fruit(money):
    while True:
        fruit=input('What fruit do you want? ')
        print()
        if fruit in stock:
            if stock[fruit] &gt; 0:
                ask_amount(fruit, money)
            else:
                print('Sorry, {}s are out of stock'.format(fruit))
                continue
        else:
            print("Sorry, we don't have that, look at the menu.")
            continue
</code></pre></li>
</ul>
    </div>