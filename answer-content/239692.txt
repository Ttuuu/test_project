<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This is just a quick answer. I don't know exactly what other constraints you have, but it feels very clumsy to have to do something like this:</p>

<pre><code>path = Path.from_str("foo[bar]")
assert path.get(Test) == 2
path.set(Test, 3)
assert path.get(Test) == 3
</code></pre>

<p>I would instead consider for <code>Path</code> to take the object the path will be taken off and be a wrapper for <code>__getitem__</code> and <code>__setitem__</code> (and probably <code>__delitem__</code> as well, for completeness sake), so that this snippet could become:</p>

<pre><code>test = PathWrapper(Test)
assert test["foo[bar]"] == 2
test["foo[bar]"] = 3
assert test["foo[bar]"] == 3
</code></pre>

<p>This has the advantage that it would also work as a class decorator, so you can add this functionality to classes already upon definition if wanted. Implementation left as an exercise ;)</p>

<p>The tests for the internal representation of some common paths would then probably use some <code>PathWrapper._internal_model</code> property or something.</p>

<p>In addition, as soon as your tests become more than three cases or so, I would recommend going for a more programmatic way. For most of your cases an array of input and expected output would be fine to iterate over, but not for the cases where you modify the path. It might be worth it to at least use the <code>unittest</code> module, which does not add too much overhead (code wise). For the <code>doctest</code> module you probably have too many test cases already.</p>
    </div>