<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This isn't a complete review: I'm going to start by focusing on just one function. And I may come across as pretty critical, so let me also say that this all looks pretty cool. What follows are my (pretty strong) opinions but bear in mind that I haven't coded any games lately. <em>You have,</em> so you have my admiration.</p>

<h2><code>EnemyCode.getRandomColor()</code></h2>

<ul>
<li><p>Why is this class called <code>EnemyCode</code>? Most classes contain code. Surely simply <code>Enemy</code> is sufficient.</p></li>
<li><p>The color you're going to return is called <code>temp</code>. This is better (barely) than a single-letter variable name, in that I know the variable is "temporary"... But in fact, I already know it's temporary, because it was declared inside of a function, and will soon go out of scope. For a more useful name, tell me what the variable represents; how about <code>generatedColor</code>?</p></li>
<li><p>You have an <code>int</code> variable called <code>randNum</code> that is <em>never used as an int</em>. Cast it to a byte at declaration, so that I have a better idea what you're doing with it.</p></li>
<li><p><code>randNum</code> is generated semi-randomly; a random number is passed through a filter, so that I have to perform arithmetic to figure out what's going on with it. Why not pull this out into a function (and simplify it as you do so)?</p></li>
</ul>



<pre class="lang-csharp prettyprint-override"><code>/// &lt;summary&gt;Returns one of { 0, 51, 102, 153, 204, 255 }&lt;/summary&gt;
byte getRandomByte()
{
    return (byte)(Random.Range(0,5)*51);
}
</code></pre>

<ul>
<li><p><code>getRandomColor()</code> is actually divided into two parts. First, generate a random color. Second, recursively ensure this color is unused. And one function that does two things will be clearer when it's written as two functions doing one thing each: perhaps <code>getRandomColor()</code> and <code>getRandomUnusedColor()</code>.</p></li>
<li><p>You'll note that I'm not matching behavior exactly with my implementation of <code>getRandomByte()</code>. Your code as originally posted goes by increments of 50 and not 51. The advantage of 51 is that it can generate 255 exactly; this prevents the possibility of generating (0, 255, 250) for one enemy and (0, 250, 255) for another. Those would pass the "duplicate color check" code, but  would appear identical to the player. There is also the issue of weighting; both case 2 and case 6 can produce <code>R,G,B = 0,0,255</code>, so solid blue is twice as likely as some of the other colors.</p></li>
<li><p>Now that <code>getRandomColor()</code> <em>only</em> generates the color, and doesn't perform any additional logic, you can return straight from the <code>switch</code> branch. I prefer <code>case x: return y</code> to <code>Foo answer... case x: answer=y; break... return answer</code>. That's <em>if</em> you keep that <code>case</code> statement in your code at all; more on that later.</p></li>
<li><p>I am dismayed to find that Unity does not have a generic <code>FindObjectsOfType&lt;T&gt;</code>. The first thing I would do is write one:</p></li>
</ul>



<pre class="lang-csharp prettyprint-override"><code>IEnumerable&lt;T&gt; FindObjectsOfType&lt;T&gt;()
{
    return FindObjectsOfType(typeof(T)).Cast&lt;T&gt;();
}
</code></pre>

<ul>
<li>You've got two <code>for</code> loops, and at first I wasn't sure what they were for. As a rule, <code>foreach</code> is clearer (and usually easier to use!) than <code>for</code>, and LINQ is usually clearer (and even easier!) than <code>foreach</code>. With our new helper function, we can write:</li>
</ul>



<pre class="lang-csharp prettyprint-override"><code>Color32 getRandomUnusedColor()
{
    var enemyColors = FindObjectsOfType&lt;EnemyCode&gt;().Select(enemy =&gt; enemy.color);
    var playerColors = FindObjectsOfType&lt;Controler&gt;().Select(player =&gt; player.color);
    var usedColors = enemyColors.Concatenate(playerColors).ToHashSet();

    Color32 generatedColor;

    do
    {
        generatedColor = getRandomColor();
    } while (usedColors.Contains(generatedColor));

    return generatedColor;
}
</code></pre>

<ul>
<li><p>That code has the advantage of not using <code>.ToString()</code> to compare structs, which feels pretty odd. Based on my testing I believe it will work as expected, but that would be a good thing to verify on your own (if it does not, you could fix it by writing a <code>Color32Comparer</code> and supplying it as the second parameter to <code>Contains</code>).</p></li>
<li><p>That code also has the advantage of only calling <code>FindObjectsOfType</code> twice per call, as opposed to 2*(N+1) times per call, where N is the number of color collisions. Another possible optimization would be to statically maintain the set of in-use colors, so that you don't need to call <code>FindObjectsOfType</code> at all.</p></li>
<li><p>One way to make your color generation code simpler (and less weighted toward primary colors):</p></li>
</ul>



<pre class="lang-csharp prettyprint-override"><code>private const byte MAXIMUM_OPACITY = 0xFF;
Color32 getRandomColor()
{
    return new Color32(
        r: getRandomByte(),
        g: getRandomByte(),
        b: getRandomByte(),
        a: MAXIMUM_OPACITY);
}
</code></pre>

<ul>
<li><p>This introduces the possibility of black and white, which you may not want to see. One way to rectify that is to manually add black and white to the <code>usedColors</code> blacklist. However, some of these colors are barely distinguishable... perhaps you would like to be even more restrictive about possible outputs from <code>getRandomByte()</code>? Or perhaps you would like <em>even more</em> control over which colors are generated? You might replace <em>all</em> of the color generation code with a static "palette" collection of colors, and remove the randomness. "First enemy will be purple, second enemy will be dark green"... and so on. </p></li>
<li><p>Switching to a fixed palette would have another advantage: a clear exception state. Currently, if you have (by my math) 33 enemies on screen and try to spawn a 34th, the duplicate color check code will loop infinitely (or blow the call stack). That sets off alarm bells for me. On the other hand, if you've got a <code>static readonly Queue&lt;Color32&gt; ENEMY_PALETTE</code>, you can easily check for that:</p></li>
</ul>



<pre class="lang-csharp prettyprint-override"><code>Color32 getRandomColor() // better yet, something like "getNextEnemyColor()"
{
    if (!ENEMY_PALETTE.TryDequeue(out var nextColor))
    {
        throw new InvalidOperationException("Failed to assign color: Too many enemies");
    }
    return nextColor;
}
</code></pre>

<p>Not directly related, but possibly useful: <a href="http://jsfiddle.net/benj2240/zv4fc9xa/" rel="nofollow noreferrer">Here is the jsfiddle</a> I whipped up to see what different color generation algorithms might do, and <a href="https://dotnetfiddle.net/1qyjmu" rel="nofollow noreferrer">here is the DotNetFiddle</a> I whipped up to test <code>FindObjectsOfType&lt;T&gt;</code> and <code>.Contains(structInstance)</code>.</p>
    </div>