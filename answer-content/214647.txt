<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Starting with your questions.</p>

<pre><code>// Is there a shorthand for this?
// (so that I don't have to declare an interface?)
private interface CalcAction {
    public void apply();
}
</code></pre>

<p>If you don't want to declare such interface you can yust use one from the standard library such as <a href="https://docs.oracle.com/javase/7/docs/api/java/lang/Runnable.html" rel="nofollow noreferrer">Runnable</a>. The only difference would be that its method is called run instead of apply. Also when defining an interface all its methods are by definition <strong><code>public abstract</code></strong>. You don't have to type that explicitly.</p>

<pre><code>// Do I need to treat non-ascii characters differently?
// It seems to work as-is
</code></pre>

<p>No need as long as you are using proper encoding such as UTF-8.</p>

<pre><code>public static void main(String[] args) {
    // this feels strange
    new Frame();
}
</code></pre>

<p>Correct. There are two problems with this code.</p>

<ul>
<li>Class should not be responsible for construction of its dependencies. It should just declare what it needs to function and let the caller deal with it. This is just application of <a href="https://en.wikipedia.org/wiki/Dependency_inversion_principle" rel="nofollow noreferrer">Dependency Inversion Principle</a> (One of <a href="https://en.wikipedia.org/wiki/SOLID" rel="nofollow noreferrer">SOLID Principles</a>). I.E. Having configurable dependencies.</li>
<li>Constructor should not do any work except initialization of the new object. Having code in the constructor prevents you from properly using composition and would make point above very painful.</li>
</ul>

<p>With these two points applied the main method might look something like this.</p>

<pre><code>public static void main(String[] args) {
    new Frame(
        new JLabel(),
        new Calculator()
    ).start();
}
</code></pre>

<p><strong>Minor remarks</strong></p>

<p>When you need empty string just use literal <strong><code>""</code></strong> no need for <code>new String()</code>.</p>

<p>Instead of simple anonymous classes such as.</p>

<pre><code>button.addActionListener(new ActionListener() {
    @Override
    public void actionPerformed(ActionEvent e) {
        action.apply();
        updateScreen();
    }
});
</code></pre>

<p>Just use lambda.</p>

<pre><code>button.addActionListener(e -&gt; {
    action.apply();
    updateScreen();
});
</code></pre>

<p>Assertions are turned off by default and they have to be anabled explicitly. When you have a state that is wrong, invalid or for whatever reason exceptional, throw exception.</p>

<pre><code>private BigDecimal applyOp(Operation op, BigDecimal a, BigDecimal b) {
    switch (op) {
        case NONE:
            throw new IllegalStateException("NONE cannot be applied!");
        case ADD:
            return a.add(b, ARITH_ROUND);
        case SUB:
            return a.subtract(b, ARITH_ROUND);
        case MUL:
            return a.multiply(b, ARITH_ROUND);
        case DIV:
            return a.divide(b, ARITH_ROUND);
        case EQUALS:
            return a;
    }
    return null;
}
</code></pre>
    </div>