<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Performance improvements:</p>

<pre><code># Checks if the provided UTF-8 is complete (doesn't end mid-sequence).
sub is_complete_utf8 {
   my $utf8 = shift;

   # This will be used against a reversed string.
   state $incomplete_seq = qr/
      ^
      (?: (?&amp;lead_of_2)
      |   (?&amp;lead_of_3)
      |   (?&amp;lead_of_4)
      |   (?&amp;cont_byte) (?: (?&amp;lead_of_3)
                        |   (?&amp;lead_of_4)
                        |   (?&amp;cont_byte) (?&amp;lead_of_4) ))

      (?(DEFINE)
         (?&lt;lead_of_1&gt; [\x00-\x7F] )
         (?&lt;cont_byte&gt; [\x80-\xBF] )
         (?&lt;lead_of_2&gt; [\xC0-\xDF] )
         (?&lt;lead_of_3&gt; [\xE0-\xEF] )
         (?&lt;lead_of_4&gt; [\xF0-\xF7] )
         (?&lt;invalid&gt;   [\xF8-\xFF] )
      )
   /x;

   return reverse(substr($utf8, -4)) !~ $incomplete_seq;
}
</code></pre>

<p>Notes:</p>

<ul>
<li>Adjust to handle invalid UTF-8 as desired.</li>
<li>I started by writing a version that used a pattern that looked for complete sequences, but it handled invalid UTF-8 poorly. If invalid seqences are to be considered complete, it's cleaner and simpler to match incomplete sequences.</li>
<li>There's no performance benefit to using <code>qr//</code> here; I did that for readability.</li>
<li>Performance could benefit from creating a class equivalent to <code>(?&amp;lead_of_2) | (?&amp;lead_of_3) | (?&amp;lead_of_4)</code> and one equivalent to <code>(?&amp;lead_of_3) | (?&amp;lead_of_4)</code>.</li>
<li>Performance would benefit from writing this function in C instead of using the regex engine.</li>
</ul>

<p>Comments on your code:</p>

<ul>
<li>This sub is expected to return a scalar (something true or false). And while your sub does that when it's invoked in scalar context, it produces surprising results in list context. Replace <code>return</code> with <code>return 0;</code>.</li>
<li>Is <code>1;</code> really better than <code>return 1;</code>?</li>
<li>The name of the sub was hard to understand. I reversed the sense of the function (now returns true if complete instead of true if incomplete) to provide a better name. (You could use <code>is_incomplete_utf8</code>, but that could lead to double-negation in the caller.)</li>
<li>There is a such as excessive commenting :)</li>
<li>It might be more useful to return a number indicating how many bytes to remove to get only complete sequences.</li>
<li><code>/aas</code> is useless in your code.

<ul>
<li><code>/aa</code> affects some built-in characters classes (e.g. <code>\s</code>) and <code>\b</code>.</li>
<li><code>/s</code> affects <code>.</code>.</li>
</ul></li>
</ul>
    </div>