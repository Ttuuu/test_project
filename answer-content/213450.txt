<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Simplifying <code>func arrayToTree()</code></h3>

<p>This</p>

<blockquote>
<pre><code>   var nodes = [TreeNode?]()
   for num in 0..&lt;self.count{
       if let num = self[num]{
           nodes.append(TreeNode(num))
       }
       else{
           nodes.append(nil)
       }
   }
</code></pre>
</blockquote>

<p>creates a new array by <em>mapping</em> each element in <code>self</code> (an optional <code>Int</code>) to a new element (an optional <code>TreeNode</code>). That can be simplified to</p>

<pre><code>let nodes = self.map { $0.map { TreeNode($0) } }
</code></pre>

<p>where the outer <code>Array.map</code> maps the given array to a new array, and the inner <code>Optional.map</code> maps an optional <code>Int</code> to an optional <code>TreeNode</code>.</p>

<p>The</p>

<blockquote>
<pre><code>   var i = 0
   repeat {
       // ...
       i += 1
   } while i &lt; (self.count) / 2
</code></pre>
</blockquote>

<p>loop can be simplified to</p>

<pre><code>for i in 0..&lt;self.count/2 {
    // ...
}
</code></pre>

<p>The forced unwrapping </p>

<blockquote>
<pre><code>   return nodes.first!
</code></pre>
</blockquote>

<p>cannot crash â€“ the <code>nodes</code> array cannot be empty at this point. I would still suggest to avoid it since later code changes might break the logic. It also makes it easier for future maintainers of the code to verify its correctness. </p>

<p>Actually the preceding code just results in an empty <code>nodes</code> array if the given list is empty. Therefore we can remove the initial <code>guard</code> and replace it by</p>

<pre><code>guard let first = nodes.first else {
    return nil
}
return first
</code></pre>

<p>at the end of the method. This can be further shortened to</p>

<pre><code>return nodes.first.flatMap { $0 }
</code></pre>

<p>Putting it together, the function would look like this:</p>

<pre><code>func arrayToTree() -&gt; TreeNode? {

    let nodes = self.map { $0.map { TreeNode($0) } }
    for i in 0..&lt;self.count/2 {
        nodes[i]?.left = nodes[2 * i + 1]
        if self.count &gt; 2 * i + 2 {
            nodes[i]?.right = nodes[2 * i + 2]
        }
    }

    return nodes.first.flatMap { $0 }
}
</code></pre>

<h3>An alternative implementation</h3>

<p>What you have is a way to create a <code>TreeNode</code>, and that is what <em>initializers</em> methods are for. Therefore I would put the code in a </p>

<pre><code>public convenience init?(values: [Int?])
</code></pre>

<p>of the <code>TreeNode</code> class instead of an <code>Array</code> extension method. The usage would be</p>

<pre><code>let list = [3, 9, 20, nil, nil, 15, 7]
if let tree = TreeNode(values: list) {
    // ...
}
</code></pre>

<p>And the task calls for a recursive implementation:</p>

<pre><code>public convenience init?(values: [Int?], offset: Int = 0) {
    guard offset &lt; values.count, let value = values[offset] else {
        return nil
    }
    self.init(value)
    self.left = TreeNode(values: values, offset: 2 * offset + 1)
    self.right = TreeNode(values: values, offset: 2 * offset + 2)
}
</code></pre>

<h3>Making it generic</h3>

<p>With the above changes it is now easy to replace <code>Int</code> by an arbitrary value type:</p>

<pre><code>public class TreeNode&lt;T&gt; {
    public var val: T
    public var left: TreeNode?
    public var right: TreeNode?
    public init(_ val: T) {
        self.val = val
        self.left = nil
        self.right = nil
    }

    public convenience init?(values: [T?], offset: Int = 0) {
        guard offset &lt; values.count, let value = values[offset] else {
            return nil
        }
        self.init(value)
        self.left = TreeNode(values: values, offset: 2 * offset + 1)
        self.right = TreeNode(values: values, offset: 2 * offset + 2)
    }
}
</code></pre>
    </div>