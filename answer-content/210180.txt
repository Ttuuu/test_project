<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Code</strong></p>

<ul>
<li><code>base_change</code> is not good name for function. It's suggest change. At <a href="https://en.wikipedia.org/wiki/Needleman%E2%80%93Wunsch_algorithm" rel="nofollow noreferrer">wikipedia</a> they use <code>Indel (INsertion or DELetion)</code> names.</li>
<li><code>first_seq</code> and <code>second_seq</code> strings could be lists. In this case <code>mutate</code>/<code>deletion</code>/<code>base_change</code> function can do its stuff <em>in-place</em></li>
<li><code>_first_seq</code> and <code>_second_seq</code> changes after every call <code>generate</code> method. No need to cache these variables, because of they not use in future by public method of class</li>
<li><em>numpy</em> simplify code</li>
</ul>

<p><strong>Design</strong></p>

<ul>
<li>you have two main public functionalities: <code>mutate</code> and <code>generate</code> methods. <code>generate</code> mess presentation layer and logic one. Generally it's not good idea. Imho better design <code>generate</code> (<code>needleman_wunsch</code>) to calc only logic (without first row and column with <code>first_seq</code>, <code>second_seq</code>). Additional method <code>print_needleman_wunsch_matrix</code> could add these lines if needed.</li>
</ul>

<p>Example code (without <em>design</em> warning, additionally i exchange <em>tabulate</em> for <em>pandas</em> but this no needed)</p>

<pre><code>import numpy as np
import pandas as pd
from random import choice, choices, randrange

def needleman_wunsch(first, second, match=1, mismatch=-1, gap=-1):
    tab = np.full((len(second) + 2, len(first) + 2), ' ', dtype=object)
    tab[0, 2:] = first
    tab[1, 1:] = list(range(0, -len(first) - 1, -1))
    tab[2:, 0] = second
    tab[1:, 1] = list(range(0, -len(second) - 1, -1))
    is_equal = {True: match, False: mismatch}
    for f in range(2, len(first) + 2):
        for s in range(2, len(second) + 2):
            tab[s, f] = max(tab[s - 1][f - 1] + is_equal[first[f - 2] == second[s - 2]],
                            tab[s - 1][f] + gap,
                            tab[s][f - 1] + gap)
    return tab


def mutate(seq, rounds=3):
    mutate_seq = seq.copy()
    for change in choices((deletion, insertion), k=rounds):
        pos = randrange(len(mutate_seq))
        change(mutate_seq, pos)
    return mutate_seq


def deletion(seq, idx):
    seq.pop(idx)


def insertion(seq, idx):
    seq.insert(idx, choice("ACTG".replace(seq[idx], "")))


def main():
    first_seq = choices("ACTG", k=5)
    second_seq = mutate(first_seq)
    data = needleman_wunsch(first_seq, second_seq)
    print(pd.DataFrame(data))


if __name__ == '__main__':
    main()
</code></pre>
    </div>