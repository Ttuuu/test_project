<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Conditions</strong></p>
<p>In general something like "if a then true else false" can be simplified as "a". So your first function could be simplified as:</p>
<pre><code>(defun multiple-of-3-or-5p (n)
  "predicate for multiple of 3 or 5"
  (or (= 0 (rem n 3)) (= 0 (rem n 5))))
</code></pre>
<p><strong>Cond with only two cases</strong></p>
<p>A <code>cond</code> with only two cases is written preferibly as an <code>if</code>. For instance:</p>
<pre><code>(defun sum35 (n)
  "sum all multiples of 3 or 5 up to n (including n)"
  (if (= n 0)
      0
      (+ (if (multiple-of-3-or-5p n) n 0) (sum35 (- n 1)))))
</code></pre>
<p><strong>Use the operators 1+ and 1- instead of adding or subtracting 1</strong></p>
<p>The usual way of writing <code>(- n 1)</code> is <code>(1- n)</code>.</p>
<p><strong>Recursion and Iteration</strong></p>
<p>Common Lisp has a very powerful iteration construct, <code>loop</code> (see for instance <a href="http://www.gigamonkeys.com/book/loop-for-black-belts.html" rel="nofollow noreferrer">here</a> for a detailed
discussion), that can make
simpler to write cases like in the last two functions. For instance:</p>
<pre><code>(defun sum35 (n)
  "sum all multiples of 3 or 5 below n"
  (loop for i below n
        when (multiple-of-3-or-5p i) sum i))

; (sum35 1000)
</code></pre>
<p>Analogously,</p>
<pre><code>(defun predicate-sum35 (predicate n)
  "sum integers up to n (including n) that match the predicate"
  (loop for i below n
        when (funcall predicate i) sum i))

; (predicate-sum35 #'multiple-of-3-or-5p 1000)
</code></pre>
<p>(note the use of <code>#'</code> to get a function).</p>
<p>Finally, to answer your last two questions:</p>
<ol>
<li><p>The “natural” way in Common Lisp is to exclude the last value, as in all predefined functions that specify a range (for instance to get a substring with the first two characters of <code>"foo"</code>, you can write <code>(subseq "foo" 0 2)</code>, that returns <code>"fo"</code>,
with the index starting from 0).</p>
</li>
<li><p>A primitive function does not exists. You can obtain a list of this kind very easily by using <code>loop</code>, for instance: <code>(loop for i below 1000 collect i)</code>.</p>
</li>
</ol>
<p><strong>Edited</strong></p>
<p>As suggested in a comment by @slepic, the algorithm is not the best one, since it checks for all the numbers from 0 to <em>n</em>, while one could simply sum directly all the multiples. Here is a possible solution:</p>
<pre><code>(defun sum35 (n)
  (flet ((sum-m (k)
           (loop for i from k below n by k sum i)))
    (+ (sum-m 3) (sum-m 5) (- (sum-m 15)))))
</code></pre>
<p>Or you can use a direct formula, like that in another comment.</p>
    </div>