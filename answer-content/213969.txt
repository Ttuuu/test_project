<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I think it's better to simply give an error if it's invoked as the wrong user (or even better, not provide the function at all, similar to hiding admin programs away from non-root users in <code>/sbin</code> rather than <code>/bin</code>).  That allows a user to then consider whether they are typing into the right terminal (and any other issues), and if appropriate, issue their own <code>sudo</code> or <code>fakeroot</code>.</p>

<p>Consider this version (with the single Bashism removed, to make a portable script, and with shellcheck errors addressed):</p>

<pre><code>supervisor() {
    if [ "$(id -nu)" != lx ]
    then
        echo "supervisor: can only be run by user 'lx'" &gt;&amp;2
        return 1
    fi

    command supervisor "$@"
}
</code></pre>

<p>I removed the use of the pointless inner shell - that just serves to expand arguments a second time (similar to using <code>$*</code> instead of <code>"$@"</code>) which probably isn't what you want.  Instead, I use the <code>command</code> builtin to make the shell find a non-function version of <code>supervisor</code>.</p>

<hr>

<p>If you really must invoke <code>sudo</code> from within the script, then we can simplify a bit.  If users are allowed to <code>sudo</code> an arbitrary command (which they should be able to, if they can <code>sudo su</code>), then we can make the function invoke it like this:</p>

<pre><code>sudo -u lx -- supervisor "$@"
</code></pre>

<p>That seems cleaner than creating a shell and funnelling arguments through it.</p>
    </div>