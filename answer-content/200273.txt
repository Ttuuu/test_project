<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There is a practical limit to take into account when it comes to using recursive functions: the size of the call stack.</p>

<p>If the depth of the nested arrays is not limited, you can not use a recursive solution in javascript because most of the time you cannot assume that the interpreter has tail call optimizations: <a href="https://stackoverflow.com/questions/37224520/are-functions-in-javascript-tail-call-optimized">https://stackoverflow.com/questions/37224520/are-functions-in-javascript-tail-call-optimized</a>.</p>

<p>So any recursive solution will fail because of the memory if the input array is very nested.</p>

<p>Therefore I would prefer an iterative solution that does not use a stack.
(The iterative solutions that use a stack have the same problems than recursion)</p>

<pre><code>function flatten(array) {
    let i = 0;
    while (i != array.length) {
        let valueOrArray = array[i];
        if (! Array.isArray(valueOrArray)) {
            i++;
        } else {
            array.splice(i, 1, ...valueOrArray);
        }
    }
    return array;
}
</code></pre>

<p>Please note that this function modifies its input.</p>

<p>As pointed out by Blindman67, this function will never end if there are cyclic references in the argument. This seems correct because it is impossible to flatten an array with cyclic references in a finite time. However one could detect the cyclic reference and throw an error. </p>

<p>Of course you can use a recursive solution but you should specify in the documentation of your function a limit for the depth of the nested array.</p>
    </div>