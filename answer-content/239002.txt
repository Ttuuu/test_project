<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Nomenclature</h2>

<p>Function names should be snake_case per PEP8, i.e. <code>address_parsing</code>.</p>

<h2>Type hinting</h2>

<p>For function parameters and return values mainly, type hinting will help define your signatures. For example, <code>delayseconds</code> would probably become <code>delay_seconds: float</code>, and <code>gdf_obj: dict</code> if you don't know a lot about the structure of the dictionary. So:</p>

<pre><code>def address_parsing(gdf_obj: dict, delay_seconds: float) -&gt; dict:
</code></pre>

<h2>Retries:</h2>

<pre><code>    try:
        return geocode_with_delay(address)
    except GeocoderTimedOut:
        return geocode_with_delay(address)
</code></pre>

<p>Effectively this will ignore up to one <code>GeocoderTimedOut</code> and retry, but if it occurs twice the exception will fall through. A saner way to represent this is:</p>

<pre><code>TRIES = 2
# ...

for retry in range(TRIES):
  try:
    return geocode_with_delay(address)
  except GeocoderTimedOut as e:
    print('Geocoder timed out')
raise e
</code></pre>

<h2>Temporary variables</h2>

<p>The expression</p>

<pre><code>round(delayseconds * gdf_obj.shape[0] / 60, 2)
</code></pre>

<p>is complex enough that it should be assigned to a variable. That said, you're better off using Python's actual time-handling features:</p>

<pre><code>from datetime import timedelta
# ...

est_time = timedelta(seconds=delayseconds * gdf_obj.shape[0])
print(f'Estimated time: {est_time}')  # will do pretty formatting
</code></pre>
    </div>