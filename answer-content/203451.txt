<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>For a junior hire, I may have accepted the answer, but I would have pointed out the short comings while discussing the answer, and see if the candidate could adjust the code accordingly.</p>

<p>I agree with Edward's assessment that you should use <code>std::domain_error</code> for the exception, and that the <code>Area</code> method should be <code>const</code>.</p>

<h3>Missing Virtual Destructor</h3>

<p>As a matter of C++ OOP hygiene, all base classes with virtual methods should also include a virtual destructor. Without it, if framework code destroyed the <code>Shape</code>, the destructor of the derived class would not get called.</p>

<pre><code>struct Shape {
    virtual double Area() const = 0;
    virtual ~Shape () = default;
};
</code></pre>

<p>It is true that a virtual destructor may incur some additional overhead. But if the framework code needs to destroy polymorphic types, solutions avoiding the virtual destructor are much more cumbersome to implement.</p>

<h3>Rule of Three</h3>

<p>The proposed solution uses <code>new</code> to dynamically allocate the chosen implementation object which may differ based on which constructor was invoked. However, your implementation violates the Rule of Three. In your case, this means it is not safe to copy, nor assign to, a <code>Triangle</code>.</p>

<blockquote>
  <p>The <strong><em>Rule of Three</em></strong> is that if you implement one of <em>destructor</em>, <em>copy constructor</em>, or <em>assignment operator</em>, you most likely need to implement all three.</p>
</blockquote>

<p>While discussing the proposed solution, I might ask the candidate what might happen if the <code>Triangle</code> object was copy constructed, and then both the copy and the original are destructed. Given the current design, I would expect the candidate to determine that a proper copy constructor that performs a deep copy would have to be implemented.</p>

<p>A similar question regarding assignment would be asked if the candidate did not realize a somewhat similar problem occurs if a <code>Triangle</code> is assigned to a different <code>Triangle</code> (which would also induce a memory leak). Given the current design, I would expect the candidate to determine that a proper assignment operator that frees the existing pointer and then performs a deep copy would have to be implemented.</p>

<p>This might then lead to a question about the copy and swap idiom for assignment operators, which might lead to questions about how to implement a proper swap function for a class.</p>

<h3>Rule of Zero</h3>

<p>Another way to obey the Rule of Three is to rework your <code>Triangle</code> so that it does not need to implement a destructor. I might challenge the candidate to maintain the dynamic allocation, but lose the destructor without leaking memory. I would expect the candidate to come up with using a single element container or, more conventionally, a smart pointer.</p>

<h3>Avoid <code>new</code></h3>

<p>However, another way to avoid implementing a destructor would be to avoid dynamic allocation altogether. Edward's answer is a clear technique to achieving this. However, if you want the area to be computed when needed rather than during construction, then you just need some method to let the area calculation logic choose the right formula.</p>

<ul>
<li><p><strong>Use lambdas and <code>std::function</code></strong><br>
This is a close cousin of your choice to use polymorphism, minus the complexity of actually defining derived classes. Instead, you define lambdas within your constructor that get stashed into the <code>Triangle</code>, and invoked when the area is queried.</p>

<pre><code>class Triangle : Shape {
    std::function&lt;double()&gt; area_;
    static double area(double a, double am) { return (a * am)/2; }
    static double area(double a, double b, double c) {
        double s = (a + b + c)/2;
        return std::sqrt(s*(s-a)*(s-b)*(s-c));
    }
public:
    Triangle(double base, double height)
    : area_{[base,height](){return area(base,height);}} {}
    Triangle(double a, double b, double c)
    : area_{[a,b,c](){return area(a,b,c);}} {
        double s = a + b + c;
        if ((s &gt; 2*a) &amp;&amp; (s &gt; 2*b) &amp;&amp; (s &gt; 2*c)) return;
        throw std::domain_error(
            "Any two sides of a triangle must be longer than one");
    }
    double Area() const override { return area_();}
};
</code></pre></li>
<li><p><strong>Use an <code>if</code> check</strong><br>
Change your area calculation logic to decide which formula to use. You don't need to store a flag for such a check. Instead, you can query how many inputs are available.</p>

<pre><code>class Triangle : Shape {
    std::vector&lt;double&gt; in_;
    static double area(double a, double am) { return (a * am)/2; }
    static double area(double a, double b, double c) {
        double s = (a + b + c)/2;
        return std::sqrt(s*(s-a)*(s-b)*(s-c));
    }
public:
    Triangle(double base, double height)
    : in_{base, height} {}
    Triangle(double a, double b, double c)
    : in_{a, b, c} {
        double s = a + b + c;
        if ((s &gt; 2*a) &amp;&amp; (s &gt; 2*b) &amp;&amp; (s &gt; 2*c)) return;
        throw std::domain_error(
            "Any two sides of a triangle must be longer than one");
    }
    double Area() const override {
        return (in_.size() &lt; 3
                ? area(in_[0], in_[1])
                : area(in_[0], in_[1], in_[2]));
    }
};
</code></pre></li>
</ul>

<h3>What is <code>Triangle</code>?</h3>

<p>From the formulation of the question, it is not clear if <code>Triangle</code> is meant to represent a <code>Shape</code>. I would hope the candidate would point out that the specification of a base and height does not actually define a triangle, but a class of triangles that have a side with a specific length, and each having the same area. If the outcome of this question is that the <code>Triangle</code> class is only ever used to compute an area, then Edward's approach is absolutely the correct one to use.</p>

<h3>Negative Inputs?</h3>

<p>It is unclear if the asker intended to allow negative inputs. If negative inputs themselves do not invalidate the input, then absolute values would have to be used to validate the sum of lengths and to compute the area.</p>
    </div>