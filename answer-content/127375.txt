<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<pre><code>db_data = {}

def create_info(db_data, …):
    …
    return db_data

new_db_data = create_info(db_data, …)
</code></pre>

<p>This feels plain wrong. Either your <code>create_info</code> function mutates data, or it generates some; but not both. Judging by the name, your function should create the dictionary it returns:</p>

<pre><code>def create_info(data):
    …
    code = …
    return {'code': code}

db_data = create_info(my_dict)
print(db_data)
</code></pre>

<hr>

<p>If you want to avoid passing <code>data</code> as a parameter to <code>split_join</code> and not use a <code>lambda</code> altogether, you can still define a nested function which will capture the needed variables:</p>

<pre><code>def create_info(data):
    def split_join(field):
        return '_'.join(data.get(field).split()) if field in data else None
    …
    code = …
    return {'code': code}

db_data = create_info(my_dict)
print(db_data)
</code></pre>

<hr>

<p>You can avoid calling <code>split_join</code> several times by using <code>map</code>:</p>

<pre><code>def create_info(data):
    def split_join(field):
        return '_'.join(data.get(field).split()) if field in data else None
    name, first_name, last_name = map(split_join, ('name', 'first_name', 'last_name'))
    code = '_'.join(filter(None, [name, first_name, last_name])).lower()
    return {'code': code}

db_data = create_info(my_dict)
print(db_data)
</code></pre>

<p>What is interesting with that, is that you can feed the result of <code>map</code> directly to the <code>filter</code>:</p>

<pre><code>def create_info(data):
    def split_join(field):
        return '_'.join(data.get(field).split()) if field in data else None

    code = '_'.join(
            filter(
                None,
                map(split_join, ('name', 'first_name', 'last_name'))
            )
    )
    return {'code': code.lower()}

db_data = create_info(my_dict)
print(db_data)
</code></pre>

<hr>

<p>Last improvement would be to not rely on <code>None</code> being generated when there is no data available, but <code>''</code> instead, since you’re only manipulating strings:</p>

<pre><code>def create_info(data):
    def split_join(field):
        return '_'.join(data.get(field, '').split())

    code = '_'.join(
            filter(
                bool,
                map(split_join, ('name', 'first_name', 'last_name'))
            )
    )
    return {'code': code.lower()}

db_data = create_info(my_dict)
print(db_data)
</code></pre>

<hr>

<p><strong>Update</strong> According to your comment:</p>

<p>You can obviously remove the need for a nested function by switching back to a <code>lambda</code>:</p>

<pre><code>def create_info(data):
    code = '_'.join(
            filter(
                bool,
                map(lambda field: '_'.join(data.get(field, '').split()),
                    ('name', 'first_name', 'last_name')
                )
            )
    )
    return {'code': code.lower()}

db_data = create_info(my_dict)
print(db_data)
</code></pre>

<p>But readability is becoming worse. In any case, it is often recommended to convert <code>map</code> + <code>lambda</code> into an explicit list-comprehension or generator expression instead. I’m choosing the generator expression here because we won't need an intermediate list:</p>

<pre><code>def create_info(data):
    code = '_'.join(
            filter(
                bool, (
                    '_'.join(data.get(field, '').split())
                    for field in ('name', 'first_name', 'last_name')
                )
            )
    )
    return {'code': code.lower()}

db_data = create_info(my_dict)
print(db_data)
</code></pre>
    </div>