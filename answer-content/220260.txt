<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Overview</h3>
<p>Terrible C++ but OK C.</p>
<p>Modern C++ has a completely different style when used to what you have written here. Though perfectly legal C++ this is not what you would expect to see and this makes it harder to maintain and implement.</p>
<h3>Improvements</h3>
<p>You tightly bind your interface to a specific implementation (an Array of Arrays of distance). You should abstract your design so that the algorithm can be applied to any type that matches the interface.</p>
<p>There are lots of standard types that would help you in this implementation. You should have a look to see what is useful</p>
<h3>Efficiency</h3>
<p>There are some definite improvements in efficiency that you can implement here. Your current algorithm is at least <code>O(N^2)</code> could be worse but I stopped looking. I would probably want it to be <code>O(n.log(n))</code>.</p>
<h3>Code Review</h3>
<p>These are C headers</p>
<pre><code>#include &lt;stdio.h&gt; 
#include &lt;limits.h&gt; 
</code></pre>
<p>C++ has its own set of headers use them (cstdio and climits). They put all the functions correctly into the standard namespace (<code>std::</code>).</p>
<p>Don't include headers you don't need:</p>
<pre><code>#include &lt;iostream&gt;
</code></pre>
<p>BUT you should need it.Prefer the C++ streams to the C io interface because of its type safety.</p>
<hr>
<p>Avoid macros:</p>
<pre><code>#define N 9 // Number of Nodes in the graph
</code></pre>
<p>All (most) the use of macros have better alternatives in C++. Macros should be reserved for what they are good at (identifying platform dependencies and providing the appropriate different functionalities for these platforms). Unless you are writing low level platform independent code you should not be touching these.</p>
<pre><code>constepxr int N = 9;  // N is a terrible name (find a better one).
</code></pre>
<hr>
<p>This is your main issue in complexity.</p>
<pre><code>int minDistance(int distance[], bool visitedSet[])
{
    for (int v = 0; v &lt; N; v++)   // Loop over all the nodes.
    ...
    return min_index;
}
</code></pre>
<p>You are doing a full sweep of all the nodes each time. If you had simply used a form of sorted list (as the algorithm tells you) then you reduce the overall complexity a lot.</p>
<hr>
<p>Stop abusing the comma operator. It's not cool.</p>
<pre><code>    int min = INT_MAX, min_index;       // Not technically the comma operator but same principle.

    min = distance[v], min_index = v;
</code></pre>
<p>The point of writing code in a high level language is so that it is easy for other humans to understand. By cramming everything on one line you are doing the exact opposite (making it hard to read and therefore understand and therefore maintain).</p>
<p>Every coding standard I have ever read is one variable modification per line. One declaration per line. It does not hurt to use an extra line here.</p>
<hr>
<p>Prefer to always put sub blocks inside '{}`</p>
<pre><code>for (int v = 0; v &lt; N; v++)
    if (visitedSet[v] == false &amp;&amp; distance[v] &lt;= min)
        min = distance[v], min_index = v;
</code></pre>
<p>Seriously: I mean seriously you think that make</p>
<pre><code>for (int v = 0; v &lt; N; v++) {
    if (visitedSet[v] == false &amp;&amp; distance[v] &lt;= min) {
        min = distance[v];
        min_index = v;
     }
}
</code></pre>
<p>Three extra lines. I mean I would add the <code>{</code> on their own lines (so 5) but you young people like to cram things together.</p>
<p>Your killing me:</p>
<pre><code>    if (parent[s] == -1)
        return;
</code></pre>
<p>OK. I understand why you did (I was young once too). You saved a line and 5 character strokes. It looks safe. And in this case it is.</p>
<p>The trouble is that this is a bad habit that can (and will) get you into trouble. And when it does you will not spot that error for fucking days. The problem is that without the braces only one statement is valid as part of the sub block. But what happens if there is an extra statement hidden there that you can see?</p>
<pre><code> if (something)
     doStuff(data);
</code></pre>
<p>Looks innocent.</p>
<pre><code> #define doStuff(data)   doStuffStart(data);doStuffEnd(data)
</code></pre>
<p>Now you are fucked. And there are bad programmers out there so don't say people don't do that. They absolutely do and they will screw you one you least expect it. So be safe get in good habits and this will never burn you.</p>
<pre><code> if (something) {
     doStuff(data);
 }
</code></pre>
<hr>
<p>Recursion is a nice tool:</p>
<pre><code>void displayPath(int parent[], int s)
{
    displayPath(parent, parent[s]);
}
</code></pre>
<p>But it is dangerous and you can burn yourself. Prefer to use a loop if you can. Use recursion for trees where there is no other choice. I mean the compiler will also try and turn this into a loop for you. But because you added the print at the end tail recursion optimization can't kick in.</p>
<hr>
<p>Sure that works:</p>
<pre><code>    printf("***** Dijkstra's Shortest Path Algorithm ***** \n\n");
    printf("\n\n");
</code></pre>
<p>But filed under bad habit. Use the type safe C++ variants. Use of <code>std::cout</code> consistently means you can un bind the C++ streams from the C streams and gain impressive speed gains from the stream library. If you use both C and C++ versions you can unbind them as you will have buffering issues.</p>
<hr>
<p>Why use platform specific code:</p>
<pre><code>    system("pause");  // Also you are actually calling another program.
</code></pre>
<p>Much simpler and easier to do:</p>
<pre><code>    std::cout &lt;&lt; "Press Enter to exit\n";
    std::cin.ignore(numeric_limits&lt;streamsize&gt;::max(), '\n');
</code></pre>
<p>Now you have not created another separate processes just to check if you have hit enter.</p>
<hr>
<p>Don't need this in C++</p>
<pre><code>    return 0;
</code></pre>
<p>If there is no way to have an error then don't use it (the compiler will add the appropriate <code>return 0</code> for you.</p>
<p>Normally people put this at the end as an indciation that somewhere else in <code>main()</code> there is a <code>return 1</code> so when I see this I start looking for the error exit condition.</p>
<h3>Dijkstra</h3>
<pre><code>// 1 You want a start and an end.
//   This way you can stop once you have found the best path from start to end
//   There could be thousands of nodes we don't even look at:
//
// 2 Abstract your graph representation from the implementation.
//   There are only a few methods you need to interrogate the graph.
//
// 3 The working list needs to be sorted by cost.
//   You can implement this in many ways but a good algorithm should 
//   probably only cost you log(n) to keep it sorted.
//   probably a lot less.
// 
// 4 The working set. You should be able to check it quickly.
//   std::set or std::hash_set would be good.
//
void dijkstra(Graph g, int Start, int End)
{
    WorkingSet  working;   // List of Node with cost sorted by cost.
    NodeSet     finished;  // List of nodes we have processed.

    working.addNode(Start, 0); // No cost to get to start.
    
    for( (node, cost) = working.popHead(); node != End; (node,cost) = working.popHead())
    {
        // If we have already processed this node ignore it.
        if (finished.find(node))
        {    continue;
        }
    
        // We have just removed a node from working.
        // Because it is the top of the list it is guaranteed to be the shortest route to
        // the node. If there is another route to the node it must go through one of the
        // other nodes in the working list which means the cost to reach it will be higher
        // (because working is sorted). Thus we have found the shortest route to the node.
    
        // As we have found the shortest route to the node save it in finished.
        finished.addNode(node,cost);
    
        // For each arc leading from this node we need to find where we can get to.
        foreach(arc in node.arcs())
        {
            dest = arc.dest();
            if (NOT (finished.find(dest)))
            {
                // If the node is already in finished then we don't need to worry about it
                // as that will be the shortest route other wise calculate the cost and add
                // this new node to the working list.
                destCost = arc.cost() + cost;
                working.addNode(dest,destCost); // Note. Working is sorted list
            }
        }
    } 
}
</code></pre>
<hr>
<p>Starting point:</p>
<p>I have not tried this and it will probably take some tweaking.</p>
<pre><code> use NodeId      = int;
 use Cost        = int;
 use WorkingItem = std::pair&lt;NodeId, Cost&gt;;
 use Order       = [](WorkingItem const&amp; lhs, WorkingItem const&amp; rhs) {return lhs.second &gt; rhs.second;};
 use WorkingSet  = std::priority_queue&lt;WorkingItem, std::vector&lt;WorkingItem&gt;, Order&gt;;

 use NodeSet     = std::set&lt;NodeId&gt;; 
</code></pre>
    </div>