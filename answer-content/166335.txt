<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Style</h3>

<p>There's a standard coding style recommendation for Python called <a href="http://www.python.org/dev/peps/pep-0008/" rel="noreferrer">PEP8</a>.
It's strongly recommended to follow that as much as possible.</p>

<h3>Avoid assigning to a different type</h3>

<p>This statement assigns a simple value to a variable that was originally list:</p>

<blockquote>
<pre><code>action = action[0]
</code></pre>
</blockquote>

<p>This is a bad practice that makes it harder to understand the code.
It's better to use a different name,
and avoid reassigning a value to a different type.</p>

<h3>Unnecessary conditions</h3>

<p>Instead of this:</p>

<blockquote>
<pre><code>if hydration &lt; 0:
    hydration = 0
    return hydration
else:
    return hydration
</code></pre>
</blockquote>

<p>It would be simpler and better like this:</p>

<pre><code>if hydration &lt; 0:
    hydration = 0

return hydration
</code></pre>

<h3>Fragile menus</h3>

<p>The menu handling in <code>Menu</code> and in <code>CraftingList</code> is very fragile.
The text presented to the user is a hard-coded text.
The code that uses these menus checks the choice by hard-coded values,
such as <code>"1"</code>, <code>"2"</code>, and so on.
The problem with this is that if you later need to make a change to a number in the text, you have to remember to change everywhere it is used.
The worst is if you need to insert a new menu option in the middle,
let's say position 3, and then you have to shift all other options and all the code that uses them.
You may also mistake a condition by using the incorrect number that doesn't correspond to the intended choice.</p>

<p>It would be better to encapsulate the menu choices in a data type,
let's call it a <code>MenuItem</code>.
Each <code>MenuItem</code> instance could have a number by which users can select them,
and a text that is displayed.
The menu could be built from the list of <code>MenuItem</code> instances,
instead of a hardcoded text.
And then the code checking the selected value could be <em>intention revealing</em>, for example:</p>

<pre><code>if craft == items.bow_drill:
    # ...
elif craft == items.bone_knife:
    # ...
</code></pre>

<p>And so on.
This kind of approach will eliminate the hard-coding,
and many potential errors in future modifications, oversight,
and improve the readability.</p>

<h3>Magic values</h3>

<p>There are many values that appear at multiple places in the code,
for example the names of the scenes like <code>Top of the Mountain</code>.
The problem with that is if one day you decide to make a small change,
you have to remember to make that change in multiple places.
It's better to create constants for such hardcoded values,
so the concrete values are written at one place,
and whenever you need to use it,
you refer to it using the constant.</p>

<h3>Don't repeat yourself</h3>

<p>This chunk of code appears twice:</p>

<blockquote>
<pre><code>itemscanbeobtained.remove('Berries')
itemscanbeobtained.remove('Mushrooms')
itemscanbeobtained.remove('Dead Hare')
itemscanbeobtained.append('Dead Birds')
itemscanbeobtained.append('Bait')
itemscanbeobtained.append('Bird Nest')
for i in range(random.randint(0, 3)):
    retlist.append(random.choice(itemscanbeobtained))
return retlist
</code></pre>
</blockquote>

<p>It would be better to avoid such duplication of logic by extracting to a helper function.
Note that in Python you can define functions within functions,
so when a block of code is duplicated within a function and never used outside,
then the helper function could be inside the function that uses it.</p>
    </div>