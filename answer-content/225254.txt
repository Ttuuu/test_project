<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li>Unless you know of the top of your head every instance that automatic semicolon insertion can fail (there are a few) you should use semicolons.</li>
<li>Always use <code>{}</code> to delimit a statement block, even if it is one line. It is very easy to overlook the missing <code>{}</code> if you make changes and its not easy to spot the error when you look for the bug.</li>
<li>The array <code>r</code> can be a constant</li>
<li>The variable line in he loop can be a constant;</li>
<li><code>r</code> is a very poor name, maybe <code>result</code> would be better?</li>
<li><code>inThere</code> is a very poor name, maybe <code>headingFound</code> has more meaning?</li>
<li><code>getLines</code> has no meaning, maybe <code>sectionByHeadingId</code> ( I don't know what it represents so the section part is a guess)</li>
<li><p>You are accessing a global scoped object <code>data</code> try to avoid such access by passing the array as a argument</p></li>
<li><p>Avoid undue complication. </p>

<ul>
<li>Don't execute statement if not needed. The statement <code>if (inThere)</code> can be  <code>} else if (inThere)</code> </li>
<li>Don't repeat the same return if there is a shorter way. Replace the inner return with <code>break</code>, </li>
<li>Don't test a state you know. You test  <code>if(line.id === headingId) {</code> then in the following <code>else</code> you check its state again <code>else if (line.id !== headingId</code> The first statement has already determined if the line is heading id you can only get to the else if <code>line.id !== headingId</code> is true</li>
</ul></li>
</ul>

<h2>Example</h2>

<p>Rewrites your code</p>

<pre><code>function sectionByHeadingId(sections, headingId) {
    const result = [];
    var headingFound = false;
    for (const line of sections) {
        if (line.isHeading) {
            if (line.id === headingId) { 
                headingFound = true;
            } else if (headingFound) { 
                break;
            }
        } else if (headingFound) { 
            result.push(line);
        }
    }
    return result;
}
sectionByHeadingId(data, 9);
</code></pre>

<h2>Example2</h2>

<p>An alternative and simpler solution by using <code>Array.findIndex</code> to find the start of the section you want. Then you need only push lines till the next heading or end of array</p>

<pre><code>function sectionByHeadingId(sections, headingId) {
    const result = [];
    var idx = sections.findIndex(line =&gt; line.id === headingId) + 1;
    while (sections[idx] &amp;&amp; !sections[idx].isHeading) { 
        result.push(sections[idx++]);
    }
    return result;
}
</code></pre>
    </div>