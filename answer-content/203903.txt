<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'm not yet very comfortable with Python style and so on, so I'm going to focus only on speeding up the code.</p>

<p><strong>First of all, the indexing</strong></p>

<p><code>img[x]</code> extracts a line from the image. Then <code>img[x][y]</code> extracts a pixel from that line. In contrast, <code>img[x,y]</code> directly extracts a single pixel from the image. Thus, we can rewrite your indexing expressions reduces the amount of work to be done:</p>

<pre><code>pdfx[x,y] = (img[x, y + stepsize] - img[x, y - stepsize]) / (2*stepsize) # partial with relation to x
pdfy[x,y] = (img[x + stepsize, y] - img[x - stepsize, y]) / (2*stepsize) # partial with relation to y
</code></pre>

<p>Let's time the difference:</p>

<pre><code>import timeit
timeit.timeit("imgs = findiff(sample_img, 1)", number=30, globals=globals())
</code></pre>

<p>The original code gives 3.46 seconds, the code with changed indexing gives 2.37 seconds. That is a significant difference!</p>

<p><strong>Next, let's remove the double loop</strong></p>

<p>You should always leverage the vectorized operations in Numpy. In this case it is not difficult. The lines of code become longer, but with practice one immediately sees what is being computed. This is the modified function:</p>

<pre><code>def findiff(image, stepsize):
    # Padding to handle the boundaries when incrementing with step size
    padded_img = np.pad(image, pad_width=stepsize, mode='constant', constant_values=0)
    img = padded_img.astype(float)
    pdfx = (img[stepsize:-stepsize, 2*stepsize:] - img[stepsize:-stepsize, 0:-2*stepsize]) / (2*stepsize) # partial with relation to x
    pdfy = (img[2*stepsize:, stepsize:-stepsize] - img[0:-2*stepsize, stepsize:-stepsize]) / (2*stepsize) # partial with relation to x
    img_lst = []
    img_lst.append(pdfx)
    img_lst.append(pdfy)
    return img_lst
</code></pre>

<p>Note the computation of <code>pdfx</code> and <code>pdfy</code>. Here we do exactly the same computations as before, but we extract an array containing all the elements that appear on the left hand side of the minus operator as you go through the original loop, and another array containing all the right hand side elements. Note that <code>img[stepsize:-stepsize, stepsize:-stepsize]</code> is the original image before padding (since we add <code>stepsize</code> pixels to each side). On the LHS we want to index pixels <code>stepsize</code> elements to the right, that is <code>img[stepsize:-stepsize, (stepsize:-stepsize)+stepsize] == img[stepsize:-stepsize, 2*stepsize:]</code>. On the RHS we want to index pixels <code>stepsize</code> elements to the left which we obtain in a similar way.</p>

<p>The modified function runs in 0.021 seconds. That is two orders of magnitude faster than the loop code!</p>

<p>Note that the output images now are of the same size as the input image, not of the size of the padded input image as before. This is more useful in general. But if it is desired to output images with padding then it is possible to instead do:</p>

<pre><code>pdfx = np.zeros(shape=(M, N))
pdfx[stepsize:-stepsize, stepsize:-stepsize] = ...
</code></pre>

<p>Another change in the code above is the use of <code>pad_width=stepsize</code> in the call to <code>np.pad</code>, so that the indexing works correctly for step sizes larger than 1.</p>
    </div>