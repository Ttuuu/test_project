<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Overview</h2>
<p>You are passing a <code>std::vector&lt;&gt;</code> to be sorted. There are lots of container types that could be used in its place (<code>std::array</code>, C-Array, <code>std::dequeue</code>, <code>std::string</code> etc).</p>
<p>It is more traditional to allow sorting via iterators. You pass the beginning and end of the iterator sequence you want to sort.</p>
<pre><code>template&lt;typename I&gt;
void sort(I begin, I end);
</code></pre>
<p>This way you can use the sort on any of the above types of container.</p>
<hr>
<p>Threads are relatively expensive to start. You better have a lot of data too sort before you split that sort across multiple threads. You may get some benefit from using <code>std::async</code> rather than <code>std::thread</code> as the runtime should manage a pool of threads for handling async actions (thus the threads will be-reused and thus not cost as much to spin up).</p>
<p>But this will depend on the sophistication of the current runtime and will only be beneficial if you are using lots of async actions that can re-use threads from the pool (with only 5 threads not much re-use but with a larger program that does a lot of sorting that balance may change).</p>
<hr>
<h2>Code Review</h2>
<p>The old #define is no longer used for constants. Macros should be reserved for Hardware/OS/Compiler variations. The language has better alternatives for most other uses of macros.</p>
<pre><code>#define NUM 1048576*2
</code></pre>
<p>On this case:</p>
<pre><code>constexpr int My_NUM = 1048576*2; // Has explicit type information associated.
                                  // Is not a text replacement which
                                  // could lead to unexpected errors.
</code></pre>
<p>What is the result of:</p>
<pre><code>    int test1 = sizeof NUM;
    int test2 = sizeof My_NUM;
</code></pre>
<hr>
<p>If the parameter is never <code>nullptr</code> then don't use pointers.</p>
<pre><code>int sort(std::vector&lt;int&gt;* vec);
void run(std::vector&lt;int&gt;* vec, int left, int right);
void merge(std::vector&lt;int&gt;* vec, int left, int mid, int right);
</code></pre>
<p>Generally you should never be using pointers in C++. There is usually a better way to do it (when you get advanced then pointers come back but lets stay away from them until you master the rest of the language).</p>
<p>In this case passing by reference is a better choice:</p>
<pre><code>int sort(std::vector&lt;int&gt;&amp; vec);
void run(std::vector&lt;int&gt;&amp; vec, int left, int right);
void merge(std::vector&lt;int&gt;&amp; vec, int left, int mid, int right);
</code></pre>
<p>Though as mentioned above using iterator would even better (and more idiomatic).</p>
<pre><code>template&lt;typename I&gt;
int sort(I begin, I end);
template&lt;typename I&gt;
void run(I begin, I end);
template&lt;typename I&gt;
void merge(I begin, I mid, I end);
</code></pre>
<hr>
<p>Misspelled:</p>
<pre><code>    srand(time(NULL));

    // Should be
    std::srand(std::time(nullptr));
</code></pre>
<hr>
<h2>Minor optimizations:</h2>
<pre><code>    std::thread t1(run, pvec, 0, 0.25*size);
    std::thread t2(run, pvec, 0.25*size+1, 0.5*size);
    std::thread t3(run, pvec, 0.5*size+1, 0.75*size);
    std::thread t4(run, pvec, 0.75*size, size-1);
                                  ///  ^ missing +1 is this a bug?
    t1.join();
    t2.join();

    // Why are you waiting on t3 and t4 before starting the merge.
    // If t1 and t2 are finished then start the merge operation.
    // You can then wait on t3 and t4 once this has started.

    t3.join();
    t4.join();

    std::thread t5(merge, pvec, 0, 0.25*size, 0.5*size);
    merge(pvec, 0.5*size+1, 0.75*size, size-1);
    t5.join();

    merge(pvec, 0, 0.5*size, size-1);

    // If a function can only return one value
    // Why have it?    
    return 1;
}
</code></pre>
<hr>
<p>You create temporary vectors every recursive call to merge:</p>
<pre><code>void merge(std::vector&lt;int&gt;* pvec, int left, int mid, int right){

    std::vector&lt;int&gt; leftvec;
    std::vector&lt;int&gt; rightvec;
</code></pre>
<p>This can get very expensive. Why not create the temporary vectors once (up in sort() then re-use parts at every level. This will make the code more efferent overall.</p>
<hr>
<p>Copying is fine for simple objects (like int). But what if you want to sort a vector of large objects? Then copying (the result of a push) is very expensive. So you should prefer to try and move objects.</p>
<pre><code>        leftvec.push_back(pvec[0][i]);
        rightvec.push_back(pvec[0][i]);

        leftvec.push_back(std::move(pvec[0][i]));
        rightvec.push_back(std::move(pvec[0][i]));
</code></pre>
<p>If you already have the containers pre-built (as suggested by the last option for optimizing) then you can simply move the objects between containers.</p>
<pre><code>        std::move(pvec[0][i], destination);
</code></pre>
<hr>
<p>You could use a standard algorithm for this:</p>
<pre><code>    while(ileft &lt; leftvec.size()){
        pvec[0][left+index] = leftvec[ileft++];
        index++;
    }

    while(iright &lt; rightvec.size()){
        pvec[0][left+index] = rightvec[iright++];
        index++;
    }

    /// Why not

    std::move( std::begin(leftvec) + iLeftm std::end(leftVec), std::begin(pvec) +  left+index);
    std::move( std::begin(rightvec) + iLeftm std::end(rightvec), std::begin(pvec) +  left+index);
</code></pre>
    </div>