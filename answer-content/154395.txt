<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You only <em>need</em> three switch blocks here, with 11 cases:</p>

<pre><code>case 1:
    if (compareResult.Score == 0 || compareResult.Score &lt;= 100)
    {
        passCapturedFinger(countOf.ToString());
        selectFingerXml(Convert.ToInt32(txtXml.Text));
        if (txtString.Text != null)
        {
            fmd1 = Fmd.DeserializeXml(txtString.Text);
        }
        CompareResult compare = Comparison.Compare(anyFinger, 0, fmd1, 0);
        if (compare.ResultCode != Constants.ResultCode.DP_SUCCESS)
        {
            _sender.Reset = true;
            throw new Exception(compare.ResultCode.ToString());
        }
        else
        {
            selectFingerCredentials(Convert.ToInt32(txtXml.Text));
            SendMessage(Action.SendMessage, "Fingerprint Matched on the count of " + countOf);
        }
    }
    break;
case 2:
case 3:
case 4:
case 5:
case 6:
case 7:
case 8:
case 9:
case 10:
    if (compareResult.Score == 0 || compareResult.Score &lt;= 100)
    {
        passCapturedFinger(countOf.ToString());
        selectFingerXml(Convert.ToInt32(txtXml.Text));
        fmd1 = Fmd.DeserializeXml(txtString.Text);
        CompareResult compare = Comparison.Compare(anyFinger, 0, fmd1, 0);
        if (compare.ResultCode != Constants.ResultCode.DP_SUCCESS)
        {
            _sender.Reset = true;
            throw new Exception(compare.ResultCode.ToString());
        }
        else
        {
            selectFingerCredentials(Convert.ToInt32(txtXml.Text));
            SendMessage(Action.SendMessage, "Fingerprint Matched on the count of " + countOf);
        }
    }
    break;
default:
    _sender.Reset = true;
    throw new Exception(compareResult.ResultCode.ToString());
</code></pre>

<p>You're <em>allowed</em> to have case-fallthrough in C# <strong>if</strong> that case has <strong>no code</strong> associated with it.</p>

<p>Even better: the only difference between <code>case 1</code> and the rest is that you check <code>txtString.Text != null</code> in <code>case 1</code>, apply that to the other cases and you can make it an <code>if</code>/<code>else</code>:</p>

<pre><code>if (countOf &gt;= 1 &amp;&amp; countOf &lt;= 10)
{
    // Code for case 1-10
}
else
{
    // Code for default
}
</code></pre>

<p>Why make it overly complex?</p>

<p>Besides that, why do you violate SRP so <em>drastically</em>? You should be breaking your code into methods with a single purpose/responsibility each, not creating one massive <em>super</em>-method.</p>
    </div>