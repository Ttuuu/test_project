<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Too many arrays</h1>

<p>You have some poor array techniques that will be thrashing GC and adding additional processing load that can be avoided.</p>

<p>For example you add tiles to the array by recreating the array. That means that you need to keep both the old and new copies in memory and itterate over each tile when all you want to do is add 4 new tiles.</p>

<p>You add four tile using the following.</p>

<blockquote>
  <p>frontier = [ ...frontier, ...this.getTilesAdjacentTo(currentTile) ]</p>
</blockquote>

<p>If you have 1000 tiles the above will need to store 1004 tile references (the original and the new 4) and iterate over all 1004. To complete the line you need to allocate space for double the array size 2008 tile references, for which half are dumped after the line is executed.</p>

<p>Much better can be done using </p>

<pre><code> frontier(...this.getTilesAdjacentTo(currentTile));
</code></pre>

<p>Now there is no GC hit and you need only iterate the 4 new tiles</p>

<p>Looking at the function <code>getTilesAdjacentTo</code> you create all four tiles that you hold in an array then  you iterate them again, making a second array, that you return and immediately dump. </p>

<h2>Keep it DRY</h2>

<p>The functions <code>getTilesAdjacentTo</code> and <code>getTilesDiagonalTo</code> are almost identical and constitute repeated code.</p>

<p>Use one function and pass arguments that control diagonal or not and pass the array you want to add the tiles to so that you can add them directly.</p>

<h2>Clear exit for loops</h2>

<p>The main while loop in <code>searchAroundTile</code> has the loop exits inside the loop block, and are not required. </p>

<p>Modern JavaScript has a lot of optimization that happens as the code runs. When you create a loop that has no termination clause 'while(true)' some engines will mark the function that contains that loop as "DO NOT OPTIMIZE" Always provide a clear exit that the engine can deal with in the exit clause of any loop.</p>

<p>Your code looks something like </p>

<pre><code>const frontier = [tile]
while(true) {
  currentTile = frontier.shift();
  if(!currentTile)   // ref A
    break;

  // ... more code

  if(!frontier.length) // ref B
    break;
}
</code></pre>

<p>The statement at <code>// ref A</code> will never be true as the statement as <code>// ref B</code> ensures that.</p>

<p>You can remove the exit statements and just check the array length, removing 4 lines of unneeded code.</p>

<pre><code>const frontier = [tile]
while(frontier.length) {
  currentTile = frontier.shift();
  // ... more code
}
</code></pre>

<p>Applying the above points the functions <code>searchAroundTile</code>, <code>getTilesAdjacentTo</code> and <code>getTilesDiagonalTo</code> can be changed to </p>

<pre><code>searchAroundTile: function  *(tile, type = 'pathableOnly') {
    const visitedTiles = [];
    const diagonalTiles = [];
    const frontier = [tile];
    var costStep = 0;
    var currentTile;
    while (frontier.length) {
        currentTile = frontier.shift();
        if (currentTile.cost &lt;= costStep) {
            if (!visitedTiles.some(tile =&gt; tile.x === currentTile.x &amp;&amp; tile.y === currentTile.y) &amp;&amp; 
            (currentTile === tile || type === 'all' || this.isPathable(currentTile))) {
                this.getTilesAdjacentTo(frontier, currentTile);
                this.getTilesAdjacentTo(diagonalTiles, currentTile, true);
                visitedTiles.push(currentTile);
            }
        } else {
            frontier.unshift(currentTile);
            frontier.push(...diagonalTiles);
            costStep += 1;
            yield visitedTiles;
        }
    }
    yield visitedTiles;
},

// define the offset somewhere
const offsets = {down: [0, 1], up: [0,-1], ... and so on

getTilesAdjacentTo(arr, tile, diagonal = false) {
    const makeTile = (offsets) =&gt; {
        const x = tile.x + offsets[0], y = tile.y + offsets[1];
        if(x &gt;= 0 &amp;&amp; x &lt; this.size.x &amp;&amp; y &gt;= 0 &amp;&amp; y &lt; this.size.y) { 
            arr.push({x, y, cost});
        }
    }
    const cost = (tile.cost || 0) + 1 + (diagonal ? 0.5 : 0);
    if(diagonal){
        makeTile(offsets.downLeft);
        makeTile(offsets.upLeft);
        makeTile(offsets.downRight);
        makeTile(offsets.upRight);
    }else{
        makeTile(offsets.down);
        makeTile(offsets.up);
        makeTile(offsets.right);
        makeTile(offsets.left);
    }
}
</code></pre>

<h2>Visited tiles</h2>

<p>You are using method <code>Array.some</code> to check for visited tiles. This is very inefficient. There two simple ways to change the CPU cost of each visited check from O(n), where n is the number of tiles, to n(1)</p>

<ol>
<li><p>If the number of visited tiles is close to the total number of tiles. Use a array to mark visited tiles. Eg create array <code>const visited= new Uint8Array(this.size.x * this.size.y);</code> and then as a tile is visited mark the location  <code>visited[tile.x + tile.y * this.size.x] = 1;</code> you then only need to check <code>if(visited[tile.x + tile.y * this.size.x])</code> to know if you have visited that tile.</p></li>
<li><p>If the size of the map is very large an the number of tiles you visit small in comparison you can save some memory and use a <code>Set</code> to mark the visited tiles. EG create the set  <code>const visited = new Set();</code> and then add the unique index as you visit tiles <code>visited.add(tile.x + tile.y * this.size.x);</code> and to check you use <code>if(visited.has(tile.x + tile.y * this.size.x)){</code></p></li>
</ol>

<h2>The search.</h2>

<p>The function <code>calculateRange</code> does not feel right to me, but you have not provided enough context to check the logic against the abstract need. "Does not feel right" is not of much help to you so I will leave it as is.</p>
    </div>