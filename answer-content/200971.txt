<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ol>
<li><p>C++ is not Java. While there is a valid use-case for classes treated as namespaces with a type-name, that's only for traits-classes used with templates, and not for general consumption.</p></li>
<li><p>I don't know why, but you seem quite attached to "a class for everything" and "everything in a class". You know C++ is multi-paradigm, and OOP isn't always the best tool for the job?<br>
Wrapping everything leads to useless boilerplate, which not only has to be written, but read too!</p></li>
<li><p>There are exactly two cases for prefering <code>std::string const&amp;</code> over <code>std::string_view</code> in C++17:</p>

<ol>
<li><p>You need the zero-terminator. Unfortunately, there's no corresponding view offering that too.</p></li>
<li><p>You have a pre-existing interface and need to maintain compatibility.</p></li>
</ol>

<p>Does either of those apply to you?</p></li>
<li><p><code>splitString()</code> might be better off returning a <code>std::vector&lt;std::string_view&gt;</code> referencing the input-string instead, avoiding most of the allocations. If necessary, decoupling from the passed string is easy, and only eats the savings from before.</p></li>
<li><p>Using iostreams is quite heavy-weight. Try to avoid it unless performance really doesn't matter to you at all.</p></li>
<li><p>Don't return a <code>const T</code> (<code>const T&amp;</code> is fine). In ancient times before move-semantics, it was used to inhibit using the return-value directly, but we are beyond that silliness.</p></li>
<li><p>There's an implicit conversion from <code>const char*</code> to <code>std::string</code>, no need to coerce it.</p></li>
</ol>
    </div>