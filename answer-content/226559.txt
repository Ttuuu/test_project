<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>Is my algorithm slow because it has problems?</p>
</blockquote>

<p>Yes. The fundamental problem is that it always processes <em>every</em> character of the input.</p>

<p>There are some obvious improvements which don't address this fundamental problem:</p>

<ul>
<li>Since the common prefix can't be more than <code>min_len</code>, truncate both strings to <code>min_len</code> before encoding them.</li>
<li><code>bin</code> returns a string, so <code>str(bin(...))</code> is overkill.</li>
<li><p><code>bin(int(a[::-1].encode('hex'), 16) ^ int(b[::-1].encode('hex'), 16))</code> is also overkill: what you care about is the position of the lowest set bit of <code>int(a[::-1].encode('hex'), 16) ^ int(b[::-1].encode('hex'), 16)</code>. You can extract the lowest set bit directly from the integer as</p>

<pre><code>differences = int(a[::-1].encode('hex'), 16) ^ int(b[::-1].encode('hex'), 16)
least_significant_difference = differences ^ (differences - 1)
</code></pre>

<p>(That actually gives a binary number which is all <code>1</code>s from the lowest set bit to the least significant bit).</p>

<p>Then you can either convert to string and find the length, or take the logarithm base 2.</p></li>
</ul>

<p>But the fundamental problem is still there: the fastest code is the code which isn't executed, and when the prefix is very short then a simple loop from the start which compares characters is hard to beat. If you really have to beat it, I think you're probably looking at writing some C which coerces a pointer to (16-bit?) characters into a pointer to 64-bit integers and uses that to compare a block of characters at a time. Beware endianness.</p>
    </div>