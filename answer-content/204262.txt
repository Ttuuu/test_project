<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I share my code for finding peak in a 1D array. It achieves very good performance.</p>

<pre><code>def peak(a):
    n = len(a)//2
    if len(a) == 2:
       if a[0]&gt;a[1]:
          return a[0]
       else:
          return a[1]
    if a[n-1] &gt; a[n]:
       return peak(a[:n])
    elif a[n+1] &gt; a[n]:
       return peak(a[n+1:])
    else:
       return a[n]
</code></pre>

<p>The only difference in contrast with the answers provided up to now is that I consider as a base scenario the case where the length of the array is 2. This is due to the reason that every time you check the middle element of the array with its neighbors. So if you try to do this when <code>len(array)&lt;=2</code> the index would be out of bounds. </p>

<p>Moreover, I always keep the part of the array with the higher neighbor so when you end up in a condition where <code>len(array)=2</code> the bigger of the two elements will always be the local peak of the array.</p>
    </div>