<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>To help with readability, I'd just import <code>datetime.datetime</code> and then alias it, that way you aren't typing <code>datetime.datetime</code> all over the place:</p>

<pre class="lang-py prettyprint-override"><code>from datetime import datetime as dt

def time_converter(time):
    midday_dt = dt.strptime('12:00','%H:%M')
    time_dt = dt.strptime(time, '%H:%M')

    if time_dt &gt;= midday_dt:
        if time_dt &gt;= dt.strptime('13:00','%H:%M'):
            hours, minutes = clamp_to_twelve(time_dt, midday_dt)
            time = f'{hours}:{minutes}'
        time += ' p.m.'
    else:
        if time_dt &lt; dt.strptime('10:00','%H:%M'):
            time = time[1:]
        if is_midnight(time_dt):
            hours, minutes = clamp_to_twelve(time_dt, midday_dt)
            time = f'{hours}:{minutes:02d}'
        time += ' a.m.'
    return time

def clamp_to_twelve(time_dt, midday_dt):
    clamp_dt = time_dt - midday_dt
    minutes, seconds = divmod(clamp_dt.seconds, 60)
    hours, minutes = divmod(minutes, 60)
    return [hours, minutes]

def is_midnight(time_dt):
    return (time_dt &gt;= dt.strptime('00:00','%H:%M') and
        time_dt &lt;= dt.strptime('00:59','%H:%M'))

if __name__ == '__main__':
    assert time_converter('12:30') == '12:30 p.m.'
    assert time_converter('09:00') == '9:00 a.m.'
    assert time_converter('23:15') == '11:15 p.m.'
</code></pre>

<p>Next, if you are just unpacking the <code>list</code> returned from <code>clamp_to_twelve</code>, I would just return a <code>tuple</code>:</p>

<pre class="lang-py prettyprint-override"><code>def clamp_to_twelve(time_dt, midday_dt):
    clamp_dt = time_dt - midday_dt
    minutes, seconds = divmod(clamp_dt.seconds, 60)
    hours, minutes = divmod(minutes, 60)
    return hours, minutes
</code></pre>

<p>This saves you from having to construct the list, as well as the additional overhead of over-allocating memory to take into account the mutable <code>list</code>.</p>

<p>As a last optimization, you could refactor your <code>if</code> statements to not be nested. Because you are using <code>if if</code> rather than <code>if elif</code>, all of your statements are executed within the nested blocks:</p>

<pre class="lang-py prettyprint-override"><code>def time_converter(time):
    midday_dt = dt.strptime('12:00','%H:%M')
    time_dt = dt.strptime(time, '%H:%M')

    if time_dt &gt;= dt.strptime('13:00', '%H:%M'):
        hours, minutes = clamp_to_twelve(time_dt, midday_dt)
        time = f'{hours}:{minutes} p.m.'

    elif time_dt &gt; midday_dt:
        time += ' p.m.'

    elif time_dt &lt; dt.strptime('10:00', '%H:%M'):
        time = f'{time[1:]} a.m.'

    elif is_midnight(time_dt):
        hours, minutes = clamp_to_twelve(time_dt, midday_dt)
        time = f'{hours}:{minutes} a.m.'

    else:
        time += ' a.m.'

    return time
</code></pre>

<p>The only issue being that the order is quite important, since <code>time_dt &gt; midday_dt</code> and <code>time_dt &gt;= dt.strptime('13:00', '%H:%M')</code> are not mutually exclusive. However, you do get a slight time bump because of the separation of blocks of code:</p>

<pre class="lang-py prettyprint-override"><code>python -m timeit -s "from file import time_converter, time_converter_2; times = ['12:30', '09:00', '11:15']" '(time_converter(t) for t in times)'
1000000 loops, best of 3: 0.275 usec per loop

python -m timeit -s "from file import time_converter, time_converter_2; times = ['12:30', '09:00', '11:15']" '(time_converter_2(t) for t in times)'
1000000 loops, best of 3: 0.277 usec per loop
</code></pre>

<p>Emphasis on <em>slight</em>. Depends on what you find more readable.</p>
    </div>