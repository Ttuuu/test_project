<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<p>I apologize in advance that this answer does not contribute much to the actual functions of your code; However, I firmly believe that writing code that is easy for others to read/understand is an important element of feedback from any code review.</p>
</blockquote>
<p>At first glance, I would note that there can be a little bit more adherence to <a href="https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/inside-a-program/coding-conventions" rel="nofollow noreferrer">C# Coding Conventions</a>.</p>
<p><em>(Aside) I admit it is a bit of a discipline thing (think of setting a table for dinner... The fork and knife shouldn't be upside down with the handles faced away from the diner -- it's not functionally "wrong" but you'll get a weird face from people when they find out you were responsible -- it doesn't conform to conventions).</em></p>
<p>In particular here are a few bits that standout the most to me:</p>
<p><strong>Exessive spacing.</strong><br>
Your "excessive" spacing (really just one too many)<br>
makes the code a l i t t l e  h a r d e r  t o  r e a d.</p>
<p>For example:</p>
<pre><code>public Matcher ( int n )
public int Match( byte [] input, int position, uint hash, out int matchDistance, bool look )
</code></pre>
<p>Should look more like this:</p>
<pre><code>public Matcher(int n)
public int Match(byte[] input, int position, uint hash, out int matchDistance, bool look)
</code></pre>
<p><strong>Proper case and underscore for your private fields</strong><br>
Here we have a private field called <code>Hash</code></p>
<pre><code>private Entry [] Hash;
</code></pre>
<p>Which according to naming conventions should be</p>
<pre><code>private readonly Entry[] _hash; // note the underscore and lower case
</code></pre>
<p><em>Note: I have also added a <code>readonly</code> to it which according to your code is what you should do.</em>
You could alternatively do a property, such as:</p>
<pre><code>public Entry[] Hash { get; private set; } // note properties are capitalized
</code></pre>
<p><em>Note: Don't do this with your code "as-is", since your <code>Hash</code> object is currently a private one -- you will have an accessibility problem. I just added this as an example of a property declaration since I noticed you had none.</em></p>
<p><strong>Validating arguments.</strong><br>
This is something that you may or may not require in every method as sometimes this can get a little out of hand. However, for the case of a constructor and key (usually every publicly exposed) methods, I will state that you MUST do it.</p>
<pre><code>public Matcher(int n)
{
    // throw an error if passed zero or negative values
    if (n &lt; 0) throw new ArgumentException("must be greater than zero", nameof(n));

    _hash = new Entry[n*5];
}
</code></pre>
<hr>
<h2>Hmmmm... smelly code.</h2>
<p>I am not familiar with RFC 1951, so I hesitate to dive into the efficiencies or accuracy of your code. But asides from some of the coding convention related issues I noted earlier, there are a few sections that look like bad / smelly code (again, I cannot be certain about the results due to my lack of knowledge with RFC 1951).</p>
<p><strong>Two infinite while loops.</strong><br>
Let's start here...</p>
<pre><code>private void Rehash( byte[] input, int position, uint hash, int length )
{
    while ( true ) // &lt;----!?
    {
        uint hashIndex = hash % (uint) Hash.Length;
        Entry e = Hash[ hashIndex ]; 

        while ( true )  // &lt;----!?
        {
            ...
</code></pre>
<p>I'm sure others will tend to agree that this doesn't sit right. It's quite unusual to see a <code>while(true)</code> at all. To be blunt, it feels like a lazy design attempt, but the reason it stands out to me is because it is inside a method which name suggests a singular task / operation (<code>Rehash</code>). If the method name was something like <code>RehashForeverAndEver</code> then I would probably have glossed over this and just assumed the infinite loop was intended.</p>
<p><strong>Use of public fields.</strong><br>
I'm looking at this private nested class <code>Entry</code>, that you have...</p>
<pre><code>private class Entry
{ 
    public int Position, Length;
    public Entry Next;
    public Entry( int position, int length, Entry next )
    {
        Position = position;
        Length = length;
        Next = next;
    }
}
</code></pre>
<p>I generally hesitate when I see the use of public fields. Due to the -- let's call it -- stigma behind the use of them. It throws off some heavy code smell. I would carefully reconsider the design of this class.</p>
<blockquote>
<p>I was about to note areas of possible optimizations with how you are handling the <code>byte[]</code> operations, but I'm going to hold off, as I think that this post is plenty long now. I encourage you to break down your code into small concise methods and re-post just the methods that you feel need code review (it would very likely yield you a more focused review and profitable feedback).</p>
</blockquote>
    </div>