<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<pre><code>template &lt;typename... Args&gt;
void insert(const Key&amp; key, Args&amp;&amp;... args) {
    auto resPtr = std::make_unique&lt;Resource&gt;();
    if (!resPtr-&gt;loadFromFile(resourcesDir + std::forward&lt;Args&gt;(args)...)) {
        msgErrorLoading(std::forward&lt;Args&gt;(args)...);
        ///* todo: should I e.g. "throw ErrorLoadingResource" here? */
    }
    resources.emplace(key, std::move(resPtr));
}
</code></pre>

<p>The template parameter pack seems a little overcomplicated here. If all the arguments are concatenated into a <code>std::string</code>, it might be better to just take a single string argument and let the user do the concatenation.</p>

<p>It might be nice to have a <code>Resource</code> constructor that takes the file path so we don't need a separate function call.</p>

<hr>

<pre><code>template &lt;typename... Args&gt;
ResourceHolder&amp; operator+=(const ResourceInserter&lt;Key, Args...&gt;&amp; inserter) {
    insert(std::move(inserter.key), std::move(std::get&lt;Args&gt;(inserter.args)...));
    return *this;
}
</code></pre>

<p>This also seems a little unnecessary. Mathematical operators are best used for mathematical operations.</p>

<p>In <code>ResourceManager</code> it also looks like the code using <code>+=</code> is longer than the code that calls <code>insert</code> directly (and we have to have that <code>ResourceInserter</code>).</p>

<p>The use of <code>std::move</code> looks fine here.</p>

<hr>

<pre><code>inline const Resource&amp; operator[](const Key&amp; key) const {
    return get(std::move(key));
}
</code></pre>

<p>Functions defined in the class body are already inline, so we don't need to specify it.</p>

<p>The argument is a <code>const&amp;</code> so there's no need to <code>std::move</code> it.</p>

<p>Perhaps <code>operator[]</code> is also unnecessary, since we can just call <code>get</code>.</p>

<hr>

<pre><code>explicit ResourceInserter(Key&amp;&amp; key, Args&amp;&amp;... args)
        : key{std::forward&lt;Key&gt;(key)}
        , args{std::forward&lt;Args&gt;(args)...}
{}
</code></pre>

<p><code>Key</code> and <code>Args</code> aren't actually template parameters (of the function) here, so we don't need to use <code>std::forward</code>. Since these are "sink arguments" (we're storing a copy of them locally), we can take them by value and then move them into place:</p>

<pre><code>explicit ResourceInserter(Key key, Args... args)
        : key{std::move(key)}
        , args{std::move(args)...}
{}
</code></pre>

<hr>

<p>It might be better to put the loading of resources somewhere in the game logic, rather than in <code>ResourceManager</code>. (We might want to separate the construction of the <code>ResourceManager</code> from the loading at some point).</p>

<hr>

<p>I don't think that hard-coding the resource IDs (as an <code>enum</code> or a constant variable) is necessarily a problem for a small game.</p>

<p>The alternative would be to load the resource IDs from a data file (i.e. add a json or xml asset list). Then we could change the resources without recompiling (but it's more work to code and maintain).</p>
    </div>