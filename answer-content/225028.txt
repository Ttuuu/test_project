<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Test-Driven Development</h2>

<p>In Test-Driven Development (<a href="https://en.wikipedia.org/wiki/Test-driven_development" rel="nofollow noreferrer">TDD</a>) you write your new code and with accompanying unit test. You might even want to create the unit test upfront, causing it to fail to test your <em>test harness</em>. After implementation of the new code, running the test should now succeed. With this practice, you should not have the need to create generic unit tests. Just test each piece of new code you implement.</p>

<h2>Legacy and Boiler-Plate Code</h2>

<p>That being said, perhaps you are working with legacy code for which you want to create boiler-plate tests in retrospect. I do see a use case for your generic unit tests when the scope and body of these classes / methods under test is very strict and clear.</p>

<h3>auto-generate unit tests</h3>

<p>But even then, you don't want to write unit tests that cover an entire class. Ideally, you don't even want to write these tests, but prefer to have them generated automatically. The way I would tackle this problem is to use <a href="https://docs.microsoft.com/en-us/visualstudio/modeling/code-generation-and-t4-text-templates?view=vs-2019" rel="nofollow noreferrer">Text-Templating and Code Generation</a> to automatically generate unit tests at design time with the granularity of a unit test for each property you test. As a final note, you should not create these tests with the purpose of increasing <em>code coverage</em>. Instead they should be able to find properties where the expected pattern was incorrectly implemented or even forgotten.</p>
    </div>