<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I think this is a good start. It's straightforward and easy to read. The data is immutable, which makes it less error prone. Here are some things I would change.</p>
<h1>Is It Complete?</h1>
<p>I notice that your circle doesn't have a location. Why not? In most of the code that I've dealt with where I have a shape, there's almost always a location or position for where the circle is in space. This is usually necessary because I often need to draw it, intersect it, hit test against it, etc. I would suggest creating a <code>Point</code> or <code>Coordinate</code> class and using an object of that class as the location of the <code>Circle</code>.</p>
<h1>Careful With Overloads</h1>
<p>The ability to overload the basic math operators is a nice feature of C++. However, it can be confusing if the meaning of those overloads isn't obvious from looking at the class definition. It's not immediately obvious to me what it means to add 2 circles. There are places where adding and subtracting shapes makes sense (<a href="https://en.wikipedia.org/wiki/Constructive_solid_geometry" rel="noreferrer">constructive solid geometry</a>), but the results are very different from what's happening here. I think the overloads you have are likely to confuse future readers of the code. I would make regular methods with names like <code>addRadiuses()</code> and <code>subtractRadiuses()</code> instead.</p>
<h1>Avoid <code>using namespace std</code></h1>
<p>It's been said frequently that one should avoid using <code>using namespace std</code>. I'll let <a href="https://stackoverflow.com/questions/1452721/why-is-using-namespace-std-considered-bad-practice">the experts explain it</a>.</p>
<p>I also don't think naming a <code>namespace</code> after yourself is too useful. The name of a namespace should tell what it's for and hint at what it might contain. I don't know what <code>corey</code> should contain.</p>
    </div>