<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I can't say it would be more Pythonic, but we can reduce your number of <code>re.sub()</code> calls from 3 down to 2.</p>

<p>First, we just eliminate all of the invalid letters:</p>

<pre><code>valid_chars = re.sub('[^-/_ 0-9a-zA-Z]', '', field_value)
</code></pre>

<p>Then, replace occurrences of one or more <code>'-'</code>, <code>'/'</code>, <code>'_'</code> and <code>' '</code> characters with a single underscore, convert to title case, and return:</p>

<pre><code>return re.sub('[-/_ ]+', '_', valid_chars).title()
</code></pre>

<p>Since the <code>try ... except</code> block is unconditionally re-raising the raised exception, it is not really adding much, and could probably be eliminated.</p>

<p>When using a regex over and over, it is usually more efficient to compile the regular expression once, and then reuse the compiled regular expression object.</p>

<pre><code>INVALID_CHARS = re.compile('[^-/_ 0-9a-zA-Z]')
UNDERSCORE_CHARS = re.compile('[-/_ ]+')

def correct_invalid_char(field_value):
    """
    Correct field values by replacing characters, removing non-alphanumeric,
    non-numeric characters, duplicate underscores, and changing to title case.
    """

    valid_chars = INVALID_CHARS.sub('', field_value)
    return UNDERSCORE_CHARS.sub('_', valid_chars).title()
</code></pre>

<p>A quick "Hello world"-ish test:</p>

<pre><code>&gt;&gt;&gt; correct_invalid_char('Hello EMPEROR / ***WoRlD_-=-_lEaDeR***')
'Hello_Emperor_World_Leader'
</code></pre>
    </div>