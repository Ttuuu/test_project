<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>code is error-prone, buggy, or just kind of "weird" </p>
</blockquote>

<ul>
<li><code>const Int* mem</code> instead of a range (pair of iterators to check for out of bounds access)</li>
<li>Using C style casts (even for calculations, they can cause issues with signed operations, unexpected casts and silent dynamic casts), but your usage is fine since it's restricted code, not a generic code</li>
<li>Using an array of struct for OpCode -&gt; (InputLength, OutputLength, String) conversion would put all details in one place, outside of "logic"</li>
<li>Using <code>getline</code> for reading from file would have made more sense to me</li>
<li>Edit: read one statement wrong and reviewed: "Applying <code>[[fallthrough]]</code> insonsistently". <strong>My bad</strong></li>
<li>Yoda conditions (tools and even compilers warn of assignment inside checks, so it is kinda irrelevant now)</li>
</ul>

<blockquote>
  <p>Is there some better way of structuring the input that I haven't thought of?</p>
</blockquote>

<p>Sadly, the input needs to be in the execute loop. Checking for <code>EOF</code> is straightforward and can be done before clearing the error flags.</p>

<blockquote>
  <p>Still, if <code>v(2) = v(1) + v(0)</code> is possible, I'd like to know how.</p>
</blockquote>

<p>This is very much possible. Lots of libraries use Expression Templates (like Eigen v3) but the use-case is usually extreme performance. Essentially, you overload the <code>operator+</code> to result in something that is assignable to the output of <code>operator()</code> which is itself a different overload as compared to <code>operator() const</code>. In your case, 2 <code>operator()</code>: one const (and essentially the rvalue function) and one non-const (the lvalue function) would resolve your issue, but that's not possible with lambdas (AFAIK). You'd need to create a class that has the possible overloads (and lambdas are technically syntactic sugar, check <a href="https://cppinsights.io/" rel="nofollow noreferrer">cppinsights.io</a>)</p>

<blockquote>
  <p>Should I have used enum class or enum for both?</p>
</blockquote>

<p>I'd say yes to enum class, because it protects from silly errors like assigning to and from integers, among the enums, etc. Strong type system usually make code self-documenting. But people complain about needing casts everywhere.</p>

<blockquote>
  <p>friend ostream&amp; operator&lt;&lt;: is this a good way to create a debug-ready output format?</p>
</blockquote>

<p>Usually, this is a good idea, but it lacks fine-grain control. For large projects, people use logging libraries with to classify what details they'd prefer (and more functions to dump extra info for debugging vs status reports). For your use-case, perfectly fine choice.</p>

<blockquote>
  <p>I tried std::string_view but it seems you can't make one from a char *</p>
</blockquote>

<p><code>string_view</code> allows creation from <code>char*</code> if the size is provided. Not many people will complain about your usage of <code>const std::string&amp;</code></p>

<blockquote>
  <p>Is there some compiler switch I can turn on, or another tool I could use to easily detect index-out-of-range errors while debugging?</p>
</blockquote>

<p>There are multiple sanitizers (available for both Clang and GCC) called ASan, MemSan, TSan, UBSan, TySan, etc. and which check for errors at runtime (some can report issues at compile time too). There's <code>clang-tidy</code> which is really nice tool for refactoring and automatic fixing errors. There are some tools associated with MISRA-C++ too but I don't know (rather never bothered to find) any that are free. Using the <code>vector.at</code> operator instead of index access will throw for bad access.</p>

<blockquote>
  <p>I would like to store them in-line in Instruction, and save on allocation, since the maximum size is only 3. Is there a typical solution to this kind of problem?</p>
</blockquote>

<p>Use <code>std::basic_string&lt;Type&gt;</code> to get small_vector_optimization for free. More seriously, there are several header only classes that create a vector on the stack of a max size and keep track of the used size providing a <code>std::vector</code> like API and a <code>std::array</code> like allocation pattern.</p>

<h2>Use C++ ecosystem</h2>

<p>Using the stdlib with C++ will only get you through so far. C++ doesn't come batteries included ala python, so you need to use libraries to fill the gap based on your preferences.</p>

<p>As such, for iterators, you can use Boost.Iterators.function_input_iterator or MS.GSL.span or rangesv3.ranges.view_facade as library helpers for features.</p>

<p>For input/output formatting, I'd recommend using a csv reader (<code>csv::CVSReader</code> or <code>io::CSVReader</code>) and fmtlib for output.</p>

<p>You can use <code>std::pmr::vector</code> with a stack (arena) allocator to still use <code>std::vector</code> or use Boost.Container.static_vector for storing the operands.</p>

<p>For the core logic, you can actually use a grammar parser to do the heavy lifting (PEGTL, Boost.Spirit). This is actually optional based on your aims because it changes the focus from language to library for the main objective.</p>

<p>If you're planning to do regular C++, then go the library route. I'd recommend to use Conan, Build2 (my personal recommendations) or others to manage the libraries. I'd more strongly recommend you to check <a href="https://fffaraz.github.io/awesome-cpp" rel="nofollow noreferrer">Awesome C++</a> which incidentally contains all the major "optional" libraries I tend to use (Boost, Abseil, Catch2, units, date, ranges, coro, Eigen)</p>

<p>Disclaimer: I'm unaffiliated with all these libraries (and links), just use them</p>
    </div>