<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The company was likely looking for code that demonstrates object-oriented modeling. You have Product objects, but the description also mentions Taxes and Receipts. A more complete model might look like the following:</p>

<pre><code>public interface Product
{
    string Description { get; }
    decimal Price { get; }
    bool IsImport { get; }
    bool IsFoodBookOrMedical { get; }
}

public interface ReceiptItem
{
    Product Product { get; }
    decimal Quantity { get; }
}

public interface ProductTax
{
    decimal Rate { get; }
    string Description { get; }
    bool IsApplicableTo(Product product);
}

public interface ReceiptCalculator
{
    IList&lt;ProductTax&gt; Taxes { get; } // List of taxes that need to be considered in the calculation
    IList&lt;ReceiptItem&gt; Items { get; }

    decimal TotalBeforeTax();
    decimal TotalTax();
    decimal Total();
}
</code></pre>

<p>Importantly (<em>other reviewers/commenters also take note</em>): in this model, <code>ProductTax</code> objects are responsible for deciding if they are applicable to a given product, and Products have no knowledge about Taxes. Adding/removing taxes from the calculation becomes possible through ReceiptCalculator's Taxes property, and different ReceiptCalculators could be created with different sets of tax considerations (e.g. for different states or countries).</p>

<p>Creating a taxonomy of Products based on tax classifications is not a good approach. If flag properties like <code>IsImport</code> and <code>IsBookFoodOrMedical</code> change frequently or grow to be too numerous, it would be better to generalize those into an <code>ISet&lt;...&gt;</code> property of some flag type. In a real system you don't want to have to make a change to your class hierarchy every time a tax is introduced or changed; you'd want to handle that by changing data. If a new tax is introduced that requires a different classification, all you have to do is tag the products that are applicable and create a ProductTax instance to look for it. (Implementing this would be worthwhile exercise.)</p>
    </div>