<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Let's talk about numbers.</p>

<pre><code>import Numbers_1_Intro_1, Numbers_1_Intro_2
import Lesson_1_Part_1
import Personal_Pronouns_Intro_1, Personal_Pronouns_Intro_2
import Greetings_Intro_1, Greetings_Intro_2, Greetings_Intro_3
import Greetings_Conversation_1, Greetings_Conversation_2
</code></pre>

<p>Remember when I said <a href="https://codereview.stackexchange.com/a/203743/52915">this</a>?</p>

<blockquote>
  <p>You can't put 50 questions/answers in the code itself, it becomes a mess. A royal mess. Don't even try.</p>
</blockquote>

<p>You made a good start by extracting the data from the main code. That was a very good first step. Now we need to make a couple more steps before this turns into a royal mess anyway. Because what happens when you've reached 50 lessons? What are your imports going to look like?</p>

<p>So, the golden rule about numbers is we shouldn't be using numbers. Huh? Yes. Part of this is not to use <a href="https://stackoverflow.com/q/47882/1014587">magic numbers</a>. If you ever see <code>get_adjusted_data(original_data * 42 - 2)</code> in someone's code, that's bad. But there're more ways for numbers to be bad. Like in your imports.</p>

<pre><code>import Lesson_1_Part_1, Lesson_1_Part_2, Lesson_2_Part_1, Lesson_2_Part_2, Lesson_3_Part_1, Lesson_3_Part_2, Lesson_4_Part_1, Lesson_4_Part_2, Lesson_5_Part_1, Lesson_5_Part_2
</code></pre>

<p>What's in those files that you need one for each lesson? Can't you reuse the code? And what would that look like?</p>

<p>Hard to say without taking a look at those files, but let's use another part of your code where the same thing goes wrong as an example. For example, your lessons.</p>

<p>Instead of creating <code>lesson_1</code>, <code>lesson_2</code>, etc., create <code>lessons[]</code> and append the lessons to the list (like they did <a href="https://codereview.stackexchange.com/a/204118/52915">here</a> with <code>answers.append(answer))</code>, using the index of the list to access different lessons. Your <code>letter</code>, <code>lesson</code> and <code>number</code> variable names all contain numbers. That's going to cost you in maintainability eventually.</p>

<pre><code>def letters_1():
    all_buttons_forget()
    letters = Letters(1)
    letters_1_button.config(relief = SUNKEN, bg = "gold")

def letters_2():
    all_buttons_forget()
    letters = Letters(2)
    letters_2_button.config(relief = SUNKEN, bg = "gold")

def letters_3():
    all_buttons_forget()
    letters = Letters(3)
    letters_3_button.config(relief = SUNKEN, bg = "gold")

def letters_4():
    all_buttons_forget()
    letters = Letters(4)
    letters_4_button.config(relief = SUNKEN, bg = "gold")
</code></pre>

<p>And your buttons do the same thing:</p>

<pre><code>letters_2_button = Button(
    current_frame, text = "Letters 2",
    font=("Helvetica", 25), command = letters_2)
letters_2_button.grid(column = 0, columnspan = 1, row = 2,
                      sticky = (tkinter.W, tkinter.E))
</code></pre>

<p>I don't have the time to fully understand what global magic is going on here, but could we possibly do something like this instead?</p>

<pre><code>def all_buttons_forget(colour):
    for button in letters_buttons[num]:
        button.config(relief = RAISED, bg = colour)

def create_button(num):
    # Figure out max amount of buttons per row and column based on number
    # Beware of the magic numbers
    # Set these in a constant somewhere, or as member variable of the class it goes under
    # Assuming 6 buttons per col_span, 5 per row
    calculated_col = (num // 6)
    calculated_col_span = calculated_col + 1
    calculated_row = num % 5

    # Font should be in a constant as well
    Button(
            current_frame, text = "Letters {0}".format(num),
            font=("Helvetica", 25), command = commands[num])
        letters_buttons[num].grid(column = calculated_col, columnspan = calculated_col_span, row = calculated_row,
                              sticky = (tkinter.W, tkinter.E))

def create_letter(num, rel, colour):
    all_buttons_forget("gray95")
    letters[num] = Letters(num)
    letters[num].button.config(relief = rel, bg = colour)

create_button(4)
create_letter(4, SUNKEN, "gold")
</code></pre>

<p>Functions and variables should <strong>never</strong> have indexes in their name. Sometimes a number is hard to avoid, but indexes aren't. Using indexes in a variable indicates you're using the wrong datatype.</p>

<p>Instead, put them in a <a href="https://docs.python.org/3/library/stdtypes.html#list" rel="nofollow noreferrer">list</a>, a <a href="https://docs.python.org/3/library/stdtypes.html#dict" rel="nofollow noreferrer">dictionary</a>, an <a href="https://docs.python.org/3/library/enum.html" rel="nofollow noreferrer">enum</a>, anything.
Such containers are indexable, iterable, searchable and a lot more useful than a lot of individual functions. Also a lot easier to maintain. Say you got 50 `lett</p>

<p>Take an interest in modulo operators <code>%</code> and how integer division works <code>//</code> in Python 3. Pass arguments around. Set a couple as constant in the class or globally so you can remember what it means.</p>

<p>Those colours for example. You could make a dictionary:</p>

<pre><code>COLOURS = {
    'active' : "gold",
    'inactive': "gray95"
}

create_letter(4, SUNKEN, COLOURS['active'])
</code></pre>

<p>Perhaps you want to set <code>SUNKEN</code> as part of the <code>'active'</code> configuration as well? Use a nested dictionary:</p>

<pre><code>CONFIGS = {
    'active':
        {'rel': SUNKEN, 'colour': "gold"},
    'inactive':
        {'rel': RAISED, 'colour': "gray95"}
}

create_letter(4, CONFIGS['active']['rel'], CONFIGS['active']['colour'])
</code></pre>

<p>Can we improve this even further? Absolutely. We could simplify the configuration, or put your entire configuration in a JSON. Plenty of options. But that's for another review.</p>

<p>It's all a bit rough around the edges and your code hangs so together it's impractical to rewrite it all (especially since you really should be combining this advice with Linny's, so it's going to look different anyway).
But I hope to convey the idea here. It still isn't as good as I'd like it, but hey, we're taking steps here. Never try to run the entire race in one step.</p>

<p>And remember. If you can make this piece of code more generic, you can do the same to the rest of your code. Including your imports.</p>
    </div>