<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Review</h3>

<ul>
<li>You have redundant code. Store <code>position + velocity</code> in a variable.</li>
<li>Use well-known variable names when the code is of a mathematical nature. Distance <code>x</code> Velocity <code>v</code> A clamped area <code>[a,b]</code>.</li>
<li>It is not clear from your description what should happen if the distance is so far away from the boundaries, that when reflecting the movement you are still out of bounds, but on the other side.</li>
<li><code>.x(max - ((position + velocity) % max))</code> This does not correspond to your description of 

<blockquote>
  <p>the next position should be equal to the amount the object would be beyond the boundary subtracted from the boundary</p>
</blockquote></li>
</ul>

<h3>Proposed Solution</h3>

<ul>
<li>Use mathematical variable names.</li>
<li>Allow <em>damped bouncing</em> when the distance is too far out of bounds (Damped bouncing reflects the value <code>x</code>, alternating around the boundaries until it is clamped with the area <code>[a,b]</code>).</li>
<li>Make both <code>0</code> and <code>max</code> a variable, respectively <code>a</code> and <code>b</code>.</li>
</ul>



<pre><code>public TwoVector&lt;Double&gt; getNextPositionAndVelocity(double x, double v, double a, double b)
{
    assert a &lt; b;
    double xn = x + v;

    // the loop allows for damped bouncing
    while (true) {
        if (xn &lt; a) {
            xn = a - xn;
            v = Math.abs(v);
        }
        else if (xn &gt; b) {
            xn = b - (xn - b);
            v = -Math.abs(v);
        }
        else {
            break;
        }
    }

    return TwoVector.&lt;Double&gt;builder().x(xn).y(v).build();
}
</code></pre>
    </div>