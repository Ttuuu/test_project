<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I am glad to see that you separated the components of the program into different source files.  Here's my suggestions:</p>

<h1>Game Object</h1>

<p>Avoid <code>using namespace sf;</code>.  Especially in a header.  The problem of using-directives are especially apparent with third-party libraries â€” the source of the names is obfuscated and there's the risk of name clashing.  For someone who doesn't know a lot about SFML (like me), I can see immediately what <code>sf::RenderWindow</code> is, but <code>RenderWindow</code> makes me wonder.</p>

<p>The virtual destructor is missing.</p>

<p>What's wrong with the indentation here?</p>

<pre><code>protected:
Vector2f position;
float speed;
RenderWindow&amp; m_window;
</code></pre>

<p>You should use member initializer clauses here:</p>

<pre><code>GameObject::GameObject(float startX, float startY, sf::RenderWindow&amp; window)
    : position{startX, startY}
    , speed{0.3}
    , m_window{window}
{
}
</code></pre>

<p>I don't see why the constructor shouldn't be taking a 2D vector directly.</p>

<p>Protected members in the base class are like "global variables" to the inheritance hierarchy.  I much prefer a pure interface:</p>

<pre><code>class GameObject {
public:
    virtual ~GameObject() {}
    virtual void Draw() = 0;
    virtual void Update() = 0;
};
</code></pre>

<p>It is not common to capitalize function names, but that's purely a matter of style.</p>

<h1>Paddle</h1>

<p>You don't use the I/O library, so omit <code>#include &lt;iostream&gt;</code>.</p>

<p><code>shapeWidth</code> and <code>shapeHeight</code> should be <code>static constexpr</code>.  The constructor can be inherited.</p>

<p>Now the downside of having protected members in the base class is evident: <code>paddleShape</code> stores the position, resulting in data duplication.  You have to make sure the two sets of data are synchronized, which adds clutter to the code.  The code looks better like this:</p>

<pre><code>Paddle::Paddle(sf::Vector2f position, RenderWindow&amp; window)
{
    paddleShape.setSize(sf::Vector2f(shapeWidth, shapeHeight));
    paddleShape.setPosition(position);
}
</code></pre>

<p>And if <code>RectangleShape</code> has constructors, you should use them.</p>

<p>The move functions should be defined in class.</p>

<h1>Ball</h1>

<p>Similarly, <code>radius</code> should be a <code>static constexpr</code>.  <code>pi</code> should probably be global (possibly in a namespace) until we have C++20 <code>std::numbers::pi</code>.</p>

<p>The calculation of <code>ballAngle</code> can be written like this: (where <code>engine</code> is a suitable random number engine)</p>

<pre><code>static const auto angle_min = std::acos(0.7);
static const auto angle_max = std::acos(-0.7);

std::uniform_real_distribution&lt;float&gt;{angle_min, angle_max} rdist;
ballAngle = rdist(engine);
if (std::bernoulli_distribution bdist{0.5}; bdist(engine))
    ballAngle = 2 * pi - ballAngle;
</code></pre>

<h1>Game (logic)</h1>

<p>You can use <code>std::optional</code> instead of <code>std::unique_ptr</code>:</p>

<pre><code>std::optional&lt;Paddle&gt; player1;
std::optional&lt;Paddle&gt; player2;
std::optional&lt;Ball&gt; ball;
</code></pre>

<p>and then, in <code>RestartGame</code>,</p>

<pre><code>player1.emplace(40, m_windowHeight / 2, m_window);
player2.emplace(m_windowWidth - 50, m_windowHeight / 2, m_window);
ball.emplace(m_windowWidth / 2, m_windowHeight / 2, m_window);
</code></pre>

<p>This also makes your code exception safe.  Not particularly important in this case, I guess, but consider readability and semantic accuracy.</p>

<h1>Main</h1>

<p>The main code has zero reason to use dynamic memory.  Use a local variable:</p>

<pre><code>Game game(window, windowWidth, windowHeight);
game.Run();
</code></pre>
    </div>