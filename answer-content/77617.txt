<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Intro</strong><br>
This is really a nice to have question. The class seems to be good structured and well commented. But, it is a lot of code to review, so let us start.  </p>

<p><strong>General</strong>  </p>

<ul>
<li><p>based on the <a href="http://msdn.microsoft.com/en-us/library/ms229002.aspx" rel="nofollow noreferrer">naming guidelines</a> input parameter should be named using <code>camelCase</code> casing.  </p></li>
<li><p>you should use braces <code>{}</code> for single <code>if</code> statements also. This will make your code less errorprone. If you don't want to use them, you should be consistent with your style. In your code you are using them sometimes but most of the time you aren't using them.  </p></li>
<li><p>comments should describe <strong>why</strong> something is done. <strong>What</strong> is done should be described by the code itself by using meaningful names for methods, properties etc.<br>
So comments like <code>// Create the class</code> are just noise which should be removed.  </p></li>
</ul>

<p><strong>Convert</strong>  </p>

<ul>
<li>It would be better to name the methods using the conventions of the NET <code>System.Convert</code> class, like <code>ToXXX()</code> or/and <code>FromXXX()</code>.  </li>
<li><p><code>SQLToCSharp()</code> returns a string and by the name of the method one could assume that he will get the string representation of a C# class, but this method will instead return on success the filename of the generated and written class. To solve this issue you should consider to add a class <code>CSharpCode</code> which is returned. This class should have a static <code>Empty</code> property to reflect the case that the returned object isn't a good one.  </p>

<pre><code>public class CSharpCode
{
    public string Name { get; private set; }
    public string NameSpace { get; private set; }
    public string Content { get; private set; }

    public CSharpCode(string name, string nameSpace, string content)
    {
        Name = name;
        NameSpace = nameSpace;
        Content = content;
    }

    private static CSharpCode instance = new CSharpCode();
    public static CSharpCode Empty { get { return instance; } }

    private CSharpCode() { }
    public override bool Equals(object obj)
    {
        if (obj == null) return false;

        if (this.GetType() != obj.GetType()) return false;

        // safe because of the GetType check
        CSharpCode other = (CSharpCode)obj;

        if (!Object.Equals(Name, other.Name)) return false;
        if (!Object.Equals(NameSpace, other.NameSpace)) return false;
        if (!Object.Equals(Content, other.Content)) return false;

        return true;
    }
    public override int GetHashCode()
    {
        unchecked // Overflow is fine, just wrap
        {
            int hash = 17;

            if (Name != null) { hash = hash * 23 + Name.GetHashCode(); }
            if (NameSpace != null) { hash = hash * 23 + NameSpace.GetHashCode(); }
            if (Content != null) { hash = hash * 23 + Content.GetHashCode(); }

            return hash;
        }
    }

    public override string ToString()
    {

        IList&lt;string&gt; values = new List&lt;string&gt;();
        if (!String.IsNullOrWhiteSpace(NameSpace))
        {
            values.Add(NameSpace);
        }
        if (!String.IsNullOrWhiteSpace(Name))
        {
            values.Add(Name);
        }
        if (values.Count != 0)
        {
            return String.Join(".", values);
        }

        return base.ToString();
    }
} 
</code></pre>

<p>Now we can refactor the methods, but I prefer to pass a <code>DataTable</code> over a connectionstring and tablename. So, we will just do both.   </p>

<pre><code>public static CSharpCode ToCSharpCode(string connectionString, string tableName)
{
    DataTable table = Query.QueryToDataTable(connectionString, "SELECT TOP 1 * FROM [{0}]", tableName);
    return ToCSharpCode(table);
} 

public static CSharpCode ToCSharpCode(DataTable dataTable)
{
    return Code.DatatableToCSharp(dataTable);
} 
</code></pre>

<p>The <code>ClassToSQL()</code> method does not belong to <code>Convert</code> class, because it doesn't convert the <code>classCollection</code> but saves them in a database. It would be better to change it to return a <code>DataTable</code>. This <code>DataTable</code> could then be saved using another method which should live inside the <code>Query</code> class.  </p>

<pre><code>public static DataTable FromType&lt;T&gt;(params T[] classCollection) where T : class
{
    return Map.ClassToDatatable&lt;T&gt;(classCollection);
}
</code></pre></li>
</ul>

<p><strong>Code</strong>  </p>

<ul>
<li><p><code>CreateCodeFile()</code><br>
The creation of the <code>CodeGeneratorOptions</code> should be extracted to a separate method. This improves the readability of the <code>CreateCodeFile()</code> method.  </p>

<pre><code>private static CodeGeneratorOptions GetDefaultOptions()
{
    CodeGeneratorOptions codeOptions = new CodeGeneratorOptions();
    codeOptions.BlankLinesBetweenMembers = false;
    codeOptions.VerbatimOrder = true;
    codeOptions.BracingStyle = "C";
    codeOptions.IndentString = "\t";
    return codeOptions;
}  
</code></pre></li>
<li><p>if we add a <code>string FromCodeNameSpace()</code> method, we can simplify the <code>CreateCodeFile()</code> method and if we want to, we can just remove it.  </p>

<p>By using a <code>MemoryStream</code> instead of a <code>FileStream</code> we will speed up the creation of the code.  </p>

<pre><code>private static string FromCodeNamespace(CodeNamespace codeNamespace)
{
    // CodeGeneratorOptions so the output is clean and easy to read
    CodeGeneratorOptions codeOptions = GetDefaultOptions();

    string code = String.Empty;

    using (MemoryStream memoryStream = new MemoryStream())
    using (TextWriter textWriter = new StreamWriter(memoryStream, new UTF8Encoding(false, true)))
    using (CSharpCodeProvider codeProvider = new CSharpCodeProvider())
    {
        codeProvider.GenerateCodeFromNamespace(codeNamespace, textWriter, codeOptions);
        code = Encoding.UTF8.GetString(memoryStream.ToArray());
    }

    // Correct our little auto-property 'hack'
    return code.Replace("//;", "");
} 
</code></pre>

<p>now the <code>CreateCodeFile()</code> method is as simple as  </p>

<pre><code>private static void CreateCodeFile(string filename, CodeNamespace codeNamespace)
{
    string code = FromCodeNamespace(codeNamespace);
    File.WriteAllText(filename, code);
}  
</code></pre>

<p>Next we will extract the creation of the <code>CodeNamespace</code> to a separate method.  </p>

<pre><code>private static CodeNamespace ToCodeNameSpace(DataTable table)
{

    CodeTypeDeclaration classDeclaration = CreateClass(table.TableName);

    foreach (DataColumn column in table.Columns)
    {
        classDeclaration.Members.Add(CreateProperty(column.ColumnName, column.DataType));
    }

    string namespaceName = new StackFrame(2).GetMethod().DeclaringType.Namespace;

    CodeNamespace codeNamespace = new CodeNamespace(namespaceName);
    codeNamespace.Types.Add(classDeclaration);

    return codeNamespace;
}  
</code></pre>

<p>which simplifies the <code>DatatableToCSharp()</code> method to   </p>

<pre><code>public static string DatatableToCSharp(DataTable table)
{
    string className = table.TableName;

    if (string.IsNullOrWhiteSpace(className))
    {
        return "// Class cannot be created: DataTable.TableName must have a value to use as the name of the class";
    }

    CodeNamespace codeNamespace = ToCodeNameSpace(table);

    // Generate code
    string filename = string.Format("{0}.{1}.cs", codeNamespace.Name, className);
    CreateCodeFile(filename, codeNamespace);

    // Return filename
    return filename;
}
</code></pre>

<p>but this wasn't the goal. We wanted to get a method which returns a <code>CSharpCode</code> object. So let us introduce a <code>CSharpCode FromDataTable(DataTable table)</code> method  </p>

<pre><code>public static CSharpCode FromDataTable(DataTable table)
{
    if (string.IsNullOrWhiteSpace(table.TableName))
    {
        return CSharpCode.Empty;
    }

    string className = table.TableName;

    CodeNamespace codeNamespace = ToCodeNameSpace(table);

    string code = FromCodeNamespace(codeNamespace);

    return new CSharpCode(className, codeNamespace.Name, code);
}  
</code></pre>

<p>now the new <code>CSharpCode Convert.ToCSharpCode()</code> method will be refactored to  </p>

<pre><code>public static CSharpCode ToCSharpCode(DataTable dataTable)
{
    return Code.FromDataTable(dataTable);
}  
</code></pre>

<p>which can be saved using  </p>

<pre><code>private const string noTableName = "Class cannot be created: DataTable.TableName must have a value to use as the name of the class";
public static string ExportAsCodeFile(DataTable table)
{
    CSharpCode csharpCode = Convert.ToCSharpCode(table);
    if (csharpCode == CSharpCode.Empty) { throw new ArgumentOutOfRangeException(noTableName); }

    String fileName = csharpCode.ToString() + ".cs";
    System.IO.File.WriteAllText(fileName, csharpCode.Content);
    return fileName;
}
</code></pre></li>
</ul>

<p><strong>Map</strong>  </p>

<ul>
<li><p><code>ClassToDataRow()</code><br>
This method does <strong>not</strong> need any <code>ref</code> parameter. Please read <a href="https://stackoverflow.com/users/22656/jon-skeet">Jon Skeet's</a> <a href="https://stackoverflow.com/a/635934/2655508">answer</a> on StackOverflow   </p>

<p>By inverting the conditions and using <code>continue</code> like already explained in <a href="https://codereview.stackexchange.com/users/41243/rubberduck">RubberDuck's</a> <a href="https://codereview.stackexchange.com/a/77532/29371">answer</a> we can remove horizontal spacing. We will do this by extracting the checks to a separate method  </p>

<pre><code> private static bool IsColumnByNameInvalid(DataColumnCollection columns, string propertyName)
{
    return !columns.Contains(propertyName) || columns[propertyName] == null;
}  
</code></pre>

<p>We should also check the state of the row before we add it. There is no sense in adding a row where no columns are filled.  </p>

<pre><code>private static void ClassToDataRow&lt;T&gt;(DataTable table, T classObject) where T : class
{
    bool rowChanged = false;
    DataRow row = table.NewRow();
    foreach (PropertyInfo property in typeof(T).GetProperties())
    {
        if (IsColumnByNameInvalid(table.Columns, property.Name)) { continue; }

        rowChanged = true;
        row[property.Name] = property.GetValue(classObject, null);

    }

    if (!rowChanged) { return; }
    table.Rows.Add(row);
} 
</code></pre></li>
</ul>
    </div>