<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I see some things that you might want to use to improve your code.</p>

<h2>Use an early bailout</h2>

<p>If the passed number <code>x</code> is less than 9, the routine can immediately return <code>0</code>.</p>

<h2>Eliminate multiples of 2</h2>

<p>Since 9 and 2 have no common factors, you can speed up the operation (on average) by shifting the incoming <code>x</code> to the right until the least significant bit is non-zero.</p>

<h2>Eliminate unused variables</h2>

<p>With a minor restructuring of the code, you can eliminate most of the variables and make the code shorter, faster and easier to read.</p>

<h2>Consider implementing a test program</h2>

<p>You have apparently already done some testing, but posting the test with the code to be reviewed may help others review the code properly.  </p>

<h2>Putting it all together</h2>

<p>Here's what I came up with using all of these suggestions:</p>

<pre><code>#include &lt;stdio.h&gt;
#include &lt;assert.h&gt;

int isDivby9(int x)
{
    while (0 == (x &amp; 1)) {
        x &gt;&gt;= 1;
    }
    if(x&lt;9)
        return 0;

    int divby8 = x &gt;&gt; 3;
    while(divby8 &gt;= 9) {
        divby8 -= 9;
    }
    return divby8 == (x &amp; 7);
}

int main()
{
    for (int i=1; i &lt; 1000000; ++i) 
        assert(isDivby9(i) == (i%9 == 0));
}
</code></pre>

<h2>Results</h2>

<p>On my machine (64-bit Linux box), the original code runs in 2.3 seconds, and the version above completes in 1.5 seconds; a considerable improvement in performance with identical mathematical results.  By comparison, the straightforward approach in @Edenia's answer takes 18.8 seconds on the same machine.  </p>

<p>All were compiled with gcc 4.9.2 with -O2 optimizations.</p>

<h2>Updated algorithm</h2>

<p>I couldn't stop thinking about this question because I knew there was a better algorithm, but just couldn't think of it.  I finally came across <a href="https://stackoverflow.com/questions/21897554/design-dfa-accepting-binary-strings-divisible-by-a-number-n">this superb answer</a> to a similar question on StackOverflow.  With that excellent answer, I translated a finite state machine implemention into C and came up with this:</p>

<pre><code>#include &lt;limits.h&gt;

struct state {
    int nextstate[2];
};
int isDivby9 (int num)
{
    static const int HIGH_BIT = INT_MAX - (INT_MAX &gt;&gt; 1);
    static const struct state states[9] = { 
        {{0, 1}}, {{2, 3}}, {{4, 5}}, 
        {{6, 7}}, {{8, 0}}, {{1, 2}}, 
        {{3, 4}}, {{5, 6}}, {{7, 8}}
    };
    if (num &lt; 0) 
        num = -num;        
    int s = 0;
    for ( ; num ; num &lt;&lt;= 1) {
        s = states[s].nextstate[(num &amp; HIGH_BIT) ? 1 : 0];
    }
    return s==0;
}
</code></pre>

<p>Each bit, starting from the MSB, drives the state machine to the next state.  The state is held in variable <code>s</code> and the branches for the <code>0</code> and <code>1</code> bits are the the two <code>nextstate</code> entries.  It works well (including for negative numbers and zero) and is very fast.  In fact, on my machine, this routine takes 0.045 seconds.  </p>

<h2>Updated results</h2>

<p>In more concise timing tests on my machine, and adjusting all routines to also work correctly on negative numbers, here's what I found on this machine:</p>

<pre><code>  861092 modulus operator
 1152840 JS1
 1581770 gnasher729
 2479987 Simon
 8961866 Edward DFA function
</code></pre>

<p>So the <code>%</code> operator is fastest, followed by @JS1's routine, followed by @gnasher729's, followed by @Simon's followed by the DFA routine (by a wide margin!)</p>

<p>Naturally, this might differ on different machines with different architectures, so as always, timing routines on your own actual hardware is recommended.</p>

<p>I learned some things that might well be useful for the next time I work on synthesizing my own logic or on an embedded microprocessor without a multiply instruction. </p>
    </div>