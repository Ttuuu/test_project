<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Naming and Style</strong>  </p>

<ul>
<li>Based on the <a href="http://msdn.microsoft.com/en-us/library/ms229002.aspx" rel="nofollow noreferrer">naming guidlines</a> method names should be using <code>PascalCase</code> casing.  </li>
<li>you should not prefix the variablenames with the datatype -&gt; <code>listOfParsedExpressions</code>  </li>
<li>variable names should be meaningful so you or <strong>Mr.Maintainer</strong> will understand them in 6 months also -&gt; <code>const int TKNLGHT = 4;</code>  </li>
<li>you should use braces <code>{}</code> for single <code>if</code> statements also. This will make your code less errorprone.  </li>
</ul>

<p><strong>Ternary expressions</strong>  </p>

<p>You shouldn't use them like you do.  </p>

<blockquote>
<pre><code>public static bool IsSeparator(char a)
{
    return (a == ';') ? true : false; 
}  
</code></pre>
</blockquote>

<p>can be expressed as  </p>

<pre><code>public static bool IsSeparator(char a)
{
    if (a == ';') 
    { 
        return true;
    }
    else
    { 
        return false;
    }
}  
</code></pre>

<p>which in turn is just  </p>

<pre><code>public static bool IsSeparator(char a)
{
    return (a == ';');
} 
</code></pre>

<p>which is more readable.  </p>

<p><strong>Simplification</strong></p>

<blockquote>
<pre><code>public static bool IsOperator (char a)
{
    switch (a)
    {
        case '+':
            return true;
        case '-':
            return true;
        case '*':
            return true;
        case '/':
            return true;
        case '%':
            return true;
        case '=':
            return true;
        default:
            return false;
    }
}  
</code></pre>
</blockquote>

<p>can be reduced to  </p>

<pre><code>public static bool IsOperator(char a)
{
    return "+-*/=".Contains(a);
}
</code></pre>

<p><strong>ExpressionParser</strong>  </p>

<ul>
<li><p>Instead of incrementing the <code>bufferPointer</code> variable in multiple places, you should consider to either di it at one place (one method) only or change the <code>parseNextToken()</code> method to take a <code>char</code> as input parameter, where I prefer the later.  </p></li>
<li><p>Instead of returning a <code>Tuple</code> you should add 2 properties where the lists can be accessed.  </p></li>
<li><p>in the currents state there is no advantage of having a <code>IsLeftBracket</code> <strong>and</strong> a <code>IsRightBracket</code> check in the <code>parseNextToken()</code> method.  </p></li>
<li><p>you should add a <code>ParsedSubstringType.InvalidToken</code> for the result beeing more clear  </p></li>
</ul>

<p><strong>Refactoring</strong>  </p>

<p>I am not 100% happy with this, but it is a start  </p>

<p>First we need a method to get the <code>ParsedSubstringType</code> of a given <code>char</code>  </p>

<pre><code>private ParsedSubstringType GetTokenType(char c)
{
    if (ParserHelper.IsNameChar(c))
    {
        return ParsedSubstringType.Name;
    }
    if (ParserHelper.IsNum(c))
    {
        return ParsedSubstringType.Num;
    }
    if (ParserHelper.IsWhiteSpace(c))
    {
        return ParsedSubstringType.WhiteSpace;
    }
    if (ParserHelper.IsLeftBracket(c) || ParserHelper.IsRightBracket(c))
    {
        return ParsedSubstringType.Bracket;
    }
    if (ParserHelper.IsOperator(c))
    {
        return ParsedSubstringType.Operator;
    }
    if (ParserHelper.IsSeparator(c))
    {
        return ParsedSubstringType.Separator;
    }
    return ParsedSubstringType.Invalid;
}
</code></pre>

<p>as you can see, I have already added <code>Invalid</code> to the enum.  </p>

<p>Next we add a method to check if it is a possible compound expression (a name or num)  </p>

<pre><code>private bool IsPossibleCompoundExpression(ParsedSubstringType currentType)
{
    return (  
              currentType == ParsedSubstringType.Name ||  
              currentType == ParsedSubstringType.Num  
           );
}  
</code></pre>

<p>but, keeping in mind there could be the possibility (because the input is faulted), that a number would be followed by a name or opposite, we need to check if the lasttype is the same as the current.  </p>

<p>I have added another value to the enum: <code>NotSet</code> indicating especial the same  </p>

<p>The <code>StringBuilder charBuffer</code> is now local to the method.</p>

<p>and the former <code>parseExpression()</code>  method  where I added an input parameter   </p>

<pre><code>private void ParseExpression(String expression)
{
    StringBuilder charBuffer = new StringBuilder(expression.Length);

    listOfParsedExpressions.Clear();
    listOfParsedTypes.Clear();

    Boolean lastExpressionWasCompound = false;
    ParsedSubstringType lastType = ParsedSubstringType.Invalid;

    foreach (Char token in expression)
    {
        ParsedSubstringType currentType = GetTokenType(token);

        if (IsPossibleCompoundExpression(currentType, lastType))
        {
            if (lastType == ParsedSubstringType.NotSet || currentType != lastType)
            {
                listOfParsedExpressions.Add(charBuffer.ToString());
                listOfParsedTypes.Add(lastType);
                charBuffer.Clear();
            }

            charBuffer.Append(token);
            lastExpressionWasCompound = true;
            lastType = currentType;
            continue;
        }

        if (lastExpressionWasCompound)
        {
            listOfParsedExpressions.Add(charBuffer.ToString());
            listOfParsedTypes.Add(lastType);
            charBuffer.Clear();
            lastExpressionWasCompound = false;
        }

        if (currentType == ParsedSubstringType.Invalid &amp;&amp; SkipInvalidChars)
        {
            continue;
        }

        listOfParsedTypes.Add(currentType);

        String parsedExpression = currentType == ParsedSubstringType.WhiteSpace ? String.Empty : token.ToString();

        listOfParsedExpressions.Add(parsedExpression);

    }

    if (charBuffer.Length &gt; 0)
    {
        listOfParsedExpressions.Add(charBuffer.ToString());
        listOfParsedTypes.Add(lastType);
    }
}
</code></pre>

<p><strong>ParserHelper</strong>  </p>

<p>Setting aside what already been said about the tenary method.  </p>

<ul>
<li>the decimal separator differs from country to country. Using of the <code>CultureInfo</code> is recommended.  </li>
<li><p>redunant <code>else</code> to be removed. If the condition is true, the else part is never reached and can therfor be removed.     </p>

<pre><code>if(condition) return true;
else return (true or false);
</code></pre></li>
</ul>

<p>These and the above implemented the class looks like  </p>

<pre><code>public static class ParserHelper
{
    public static bool IsNameChar(char a)
    {
        return a == '_' || char.IsLetter(a);
    }
    private static char decimalSeparator = CultureInfo.CurrentCulture.NumberFormat.NumberDecimalSeparator[0];
    public static bool IsNum(char a)
    {
        return  (a == decimalSeparator) || char.IsDigit(a);
    }

    public static bool IsLeftBracket(char a)
    {
        return (a == '(');
    }

    public static bool IsRightBracket(char a)
    {
        return (a == ')');
    }

    public static bool IsOperator(char a)
    {
        return "+-*/%=".Contains(a);
    }

    public static bool IsSeparator(char a)
    {
        return (a == ';');
    }

    public static bool IsWhiteSpace(char a)
    {
        return char.IsWhiteSpace(a);
    }
}
</code></pre>

<p>You could also turn this into extension methods.  </p>
    </div>