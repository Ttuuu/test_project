<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Not at all functional.</h1>

<ol>
<li><p>Functional means no side effects. </p>

<p>You have <code>console[method]</code>, <code>new pg.Pool</code> and <code>pool.query</code> each of which are side effects. </p></li>
<li><p>Functional means using pure functions.</p>

<ul>
<li><p>A pure function must be able to do its thing with only its arguments.</p>

<p><code>logResult</code> and <code>makePool</code> require global references.</p></li>
<li><p>A pure function must always do the same thing for the same input. </p>

<p><code>runQuery</code>, <code>closePool</code>,  and <code>makePool</code> depend on the database state not the arguments for the result and are not pure. </p>

<p>Because you pass impure functions to <code>Effect</code> you can not predict its behavior and thus it is impure as well.</p></li>
</ul></li>
</ol>

<p>Now you may wonder how to fix these problems and make your code functional.</p>

<p>The best way to picture the problem is to imagine that each function must run on a isolated thread and rely only on its arguments to create a result. The arguments must be transportable and not rely on an external state (Remember the function is totally isolated)</p>

<p>If you break these rules even once in a mile of code you break the tenet that must be maintained to get the benefit that functional programming offers.</p>

<p>There is no half way functional, it's all or nothing.</p>
    </div>