<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Generate Hashmap</h1>

<p>There is a data structure that's well optimized for this task: <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow noreferrer"><code>collections.Counter</code></a>. It will take any iterable and generate a dictionary with keys being elements of your iterable and values are the number of occurrences:</p>

<pre class="lang-py prettyprint-override"><code>from collections import Counter

x, y = 'fairy tales', 'rail safety'
c1, c2 = Counter(x), Counter(y)

c1
Counter({'a': 2, 'f': 1, 'i': 1, 'r': 1, 'y': 1, ' ': 1, 't': 1, 'l': 1, 'e': 1, 's': 1})
</code></pre>

<p>And they also do equivalence testing:</p>

<pre class="lang-py prettyprint-override"><code>c1 == c2
True
</code></pre>

<h1>Filtering strings</h1>

<p>This could be done in a generator expression using the <code>str.isalnum</code> function, removing the need for regex:</p>

<pre class="lang-py prettyprint-override"><code>from typing import Iterator

def clean_string(s: str) -&gt; Iterator[str]:
    """
    yields lowercased strings that are alphanumeric characters
    only
    """
    yield from (c for c in s.lower() if c.isalnum())
</code></pre>

<p>Which can directly be consumed by <code>Counter</code></p>

<pre class="lang-py prettyprint-override"><code>from collections import Counter

x, y = "Iâ€™m a jerk but listen", "Justin Timberlake"

c1, c2 = Counter(clean_string(x)), Counter(clean_string(y))

c1 == c2

True
</code></pre>

<p>Alternatively, you can use the builtin <code>filter</code> and return that, which <code>Counter</code> can also consume:</p>

<pre class="lang-py prettyprint-override"><code>def clean_string(s: str) -&gt; Iterable[str]:
    """
    returns a filter object which yields only 
    alphanumeric characters from a string
    """
    return filter(str.isalnum, s.lower())
</code></pre>

<p>Fitting this into your <code>__main__</code> loop with a function to check string1 against string2:</p>

<pre class="lang-py prettyprint-override"><code>def is_anagram(s1: str, s2: str) -&gt; bool:
    """
    returns a boolean based on equivalence-testing the Counters
    of two strings. The strings are filtered to only include alphanumeric
    characters
    """
    return Counter(clean_string(s1)) == Counter(clean_string(s2))

if __name__ == "__main__":
    ~snip~
    for string1 in strings_one:
        for string_two in strings_two:
            anagram = is_anagram(string1, string2)

            if anagram:
                # print things here
</code></pre>
    </div>