<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Nice code.</p>

<p>Some comments :)</p>

<h2>Too Defensive</h2>

<p>You wrote:</p>

<blockquote>
  <p>The <code>Roll()</code> method will be the stereotype die with six sides.
  Hardcoded, as someone might change the value for D6 to 8 and cause
  problems. This method will always roll a six-sided die.</p>
</blockquote>

<p>What if someone changes the underlying value of D2 to 3? Won't that be a major surprise?</p>

<p>My take about this approach is: don't write idiot proof code, otherwise you'd be chasing your tail. Write code that an average programmer could understand.</p>

<p>In your code, there's a convention that the die enum name <em>has to be</em> the same as its underlying <code>int</code> value. That's a design decision you took. It's a valid design decision. Stick to it.</p>

<p>In addition, if, for some reason, you choose to change your implementation of the underlying enum value, you'll have to remember that the logic is also implemented, hard coded, in your <code>Roll()</code> method. In other words, you break DRY.</p>

<h2>O/CP</h2>

<p>When you have an <code>enum</code> in your code, it should be a well defined, closed group of values that usually share something. The "closed" part is essential.</p>

<p>Take weekdays, for instance. There won't be any additional weekday. There's no eighth value that can be added. Therefore, we can have them as an <code>enum</code>.</p>

<p>Take card suites. There are only four of them. I think my point is clear.</p>

<p>When we declare an <code>enum</code>, we say something like: "these are the only values of this group."</p>

<p>However, in your code, you declare (only) the following values as possible die/dice:</p>

<p>2, 3, 4, 6, 8, 10, 12, 20, 100</p>

<p>What if someone would want to have your cool engine to be applied on a card suite? It's 13 cards in a suite. And you don't have 13 as a value in your <code>enum</code>.</p>

<p>In programming, there's a very important principle named <a href="https://en.wikipedia.org/wiki/Open%E2%80%93closed_principle" rel="noreferrer">Open/Closed Principle</a>. I think that your <code>enum</code> is not aligned with O/CP, because if you'd want to use your random engine on a "die" with 13 values, then you'd have to add <code>D13</code> to your <code>enum</code>, rebuild and redeploy your solution. When you're aligned with O/CP - you provide a way to extend your program ("open to extensions") without rebuilding it ("closed to modifications").</p>

<p>So maybe there's no need to wrap those values in an <code>enum</code> in the first place? Simply write a class that takes the number of edges the "die" has in its constructor, and you're done.</p>

<p>It's not as "pretty" as an <code>enum</code>, but it sure is more extensible.</p>

<h2>Deferred Execution</h2>

<p>You write:</p>

<blockquote>
  <p>The principle is simple: it will do a deferred execution until the
  time is up, which can either be a matter of seconds or a matter of
  clock ticks.</p>
</blockquote>

<p>I'm not sure what you mean by that. It's not that the code runs on a different thread. Maybe I'm missing something because I haven't been coding in C# for a long while, but this code sure seems to be blocking.</p>

<p>I think that the added value of those methods (<code>MaxTime</code> and <code>MaxTicks</code>) is low, and it's pretty much up to the consuming developer to implement them as needed.</p>

<p>In addition to all that, there's sometime a confusion between wall-clock time (which is how things are implemented in your code) and processing time. In a multi-threaded program (or in a multi-processed system), your program, or your executing thread, is sometimes paused so that other processed/threads are executed.<br>
Having this point in mind, you might end up executing far less iteration than expected.<br>
Example: usually you get 10000 iterations in 300 ticks, but in a busy system you get only 500 under the same 300 ticks. The numbers are imaginary, but you get the idea.<br>
For doing the actual measurements, you can read <a href="https://stackoverflow.com/q/23182781/17772">this</a>.</p>

<p>Again, I think that adding those measurements to your code somehow increases complexity and have a low value.</p>

<h2>Calculating Min/Max</h2>

<p>It's mostly a matter of style, but I tend to use the SDK's provided functions when possible.<br>
In your code:</p>

<pre><code>if (Max &lt; value) { Max = value; }
</code></pre>

<p>Can be replaced with:  </p>

<pre><code>Max = Math.Max(Max, value)
</code></pre>

<p>To me, this is easier to understand the intention of the code using the built-in <code>Math.Max()</code> method.</p>

<p>Cheers :)</p>
    </div>