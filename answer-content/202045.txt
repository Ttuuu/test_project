<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Includes</h1>

<p>The interface needs only <code>&lt;stdbool.h&gt;</code> - the rest of the standard headers only need to be included in the implementation file.</p>

<h1>Interface</h1>

<p>The declaration isn't very helpful:</p>

<pre><code>struct Argument Argument_new(char**,char*,char*,char*,char*,char**,char*,bool*,char*);
</code></pre>

<p>What does each argument mean?  What are the valid ranges of each argument?  This is where users will look for documentation, but they find nothing.</p>

<h1>Memory allocation</h1>

<p>Match the allocation to the type we're assigning <em>to</em>, so we don't have to go back and check whether the types match:</p>

<pre><code>self.names = malloc(namesCount * sizeof *self.names);
</code></pre>

<p>And we <em>must</em> test whether we got a valid pointer back from <code>malloc()</code>!</p>

<h1>Dead code</h1>

<p>This block looks incomplete; should it be finished, or removed?</p>

<pre><code>    if(false/*not match(*names,"^-{1,2}(?!-)")*/){
        //error
</code></pre>

<h1><code>sizeof</code> or <code>strlen()</code></h1>

<p>This probably isn't what you meant:</p>

<pre><code>    self.help=malloc(sizeof(strlen(help))+1);
</code></pre>

<p><code>sizeof strlen(help)</code> is <code>sizeof (size_t)</code>.  You probably meant simply</p>

<pre><code>    self.help = malloc(strlen(help)+1);
</code></pre>

<h1>Don't forget to clean up</h1>

<p>At the same time as you write a "constructor" that does lots of <code>malloc()</code>, you should be writing the corresponding clean-up function, that knows how to <code>free()</code> all these allocations.</p>
    </div>