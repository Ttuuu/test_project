<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I would make the bool operator explicit (and const)</p>

<p>The explicit will prevent the object being auto converted to bool in situations where you don't want it too. This may break with <code>int</code> type but is usually a better work match.</p>

<pre><code>explicit operator bool() const  { return !!_i;                    }
</code></pre>

<p>I know how the <code>!!</code> works but it is obscure and a lot of people will raise an eyebrow. At least write a comment about it.</p>

<hr>

<p>These methods should be const</p>

<pre><code>operator int()    const { return static_cast&lt;int&gt;(_i);    }
operator double() const { return static_cast&lt;double&gt;(_i); }
//                ^^^^^
</code></pre>

<p>They do not change the state of the class.</p>

<hr>

<p>All the assignment operator methods are defined wrong.</p>

<pre><code>jd_int operator+=(jd_int jdi) { return _i += jdi._i; }

// Should be:

jd_int&amp; operator+=(jd_int const&amp; jdi) { _i += jdi._i; return *this; }
</code></pre>

<p>The <code>op=</code> is modifying the current object. Thus you should return a reference (not an object). Consequentially the return should return <code>*this</code>. There is no need to pass the input parameter by value (this could cause an unrequited copy). Rather pass the parameter by const reference to avoid this.</p>

<hr>

<p>All the simple operator could be done better</p>

<pre><code>jd_int operator+ (jd_int jdi) { return _i +  jdi._i; }

// Should be:

jd_int operator+ (jd_int const&amp; jdi) { return jd_int(*this) += idi; }
</code></pre>

<p>Pass the parameter by const reference. Then use the op-assignment to do the work.</p>

<hr>

<p>You define all the operators as members of the class. Personally I would also do this. But there is an argument for making the free standing functions.</p>

<pre><code>id_int + int  =&gt; works.             (int will be converted to id_int then addition done)
int + id_int  =&gt; fails to compile.
</code></pre>

<p>If you convert the above members into free standing functions then you will get either side to auto convert. </p>

<hr>

<p>The freestanding friend functions.</p>

<pre><code>friend bool operator&lt; (jd_int lhs, jd_int rhs);
...
friend std::ostream&amp; operator&lt;&lt;(std::ostream&amp; os, const jd_int jdi);
friend std::istream&amp; operator&gt;&gt;(std::istream&amp; is, jd_int jdi);
</code></pre>

<p>You declare them in the function and then define them later. Why? These are trivial functions define them inside the class. Splitting the declaration and definition does not provide any benefit.</p>

<p>Also pass the parameters by const reference when you can.</p>

<pre><code>friend bool operator&lt; (jd_int const&amp; lhs, jd_int const&amp; rhs)         {return (lhs._i &lt;  rhs._i); }
...
friend std::ostream&amp; operator&lt;&lt;(std::ostream&amp; os, jd_int const&amp; jdi) {return os &lt;&lt; idi._i;}
friend std::istream&amp; operator&gt;&gt;(std::istream&amp; is, jd_int&amp; jdi)       {return is &gt;&gt; idi._i;}
</code></pre>

<hr>

<p>I think you are missing a couple of operations (<code>binary and</code> and <code>binary or</code> sprint to mind).</p>

<hr>

<p>I hate it when people use underscore as the first character of an identifier.</p>

<pre><code>int _i;
</code></pre>

<p>There are some complex rules around its usage. Not everybody knows these rules exactly so something best avoided. Also why <code>i</code> why not <code>value</code> at least that is a bit more meaningful.</p>
    </div>