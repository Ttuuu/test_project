<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First of all, I don’t think this is reasonable:</p>

<blockquote>
  <p>if unique values length is same as arr length, return 0</p>
</blockquote>

<p>If your array consists of unique values only (e.g. <code>[1, 2, 3, 4]</code>), its mode is not unique, rather there is multiple modes (in this case <code>[1, 2, 3, 4]</code>). How you define what <em>mode</em> exactly means depends on your application so I’m going to ignore this for now.</p>

<hr>

<p>Let’s look at your code. I’ll list some observations:</p>

<ul>
<li><strong>Function name</strong>. A name like <code>meanEqualsMode</code> would more clearly describe what the function does</li>
<li><strong>Unused variables</strong>. There are a few unused variables. Line 3 uses three arguments for the <code>map</code> function’s callback, but the callback is only ever called with one argument: The current array element. You also never use <code>i</code> and <code>a</code>.</li>
<li><strong>Single-letter variable names</strong>. This style of naming problematic for a variety of reasons. Most importantly, it’s harder to reason about your own code. For example, in line 21, the <code>reduce</code> function has <code>a</code> and <code>c</code> as callback arguments. <code>sum</code> and <code>count</code> would be better names.</li>
<li><strong>Separation of concerns</strong>. Your <code>meanMode</code> function does multiple things. It calculates the mode <em>and</em> the mean. Instead, use separate functions to calculate the mode and mean separately. If your applications uses the check for equality of mode and mean a lot, this would be a third function calling the other two. I’ve done that in the updated code below.</li>
<li><strong>Predictable results</strong>. You state that <code>meanMode</code> should return whether the mode and the mean are equal; however, it actually returns a <code>Number</code> (<code>1</code> or <code>0</code>). A comparison function (e.g. a function containing the words <em>is</em>, <em>equal</em>, or similar) should always return a boolean value (<code>true</code> or <code>false</code>). This again makes it easier to reason about your code. Just reading <code>meanEqualsMode([2, 3, 5])</code> should tell you what the result of that function will be without the need to look at the actual implementation.</li>
</ul>



<pre><code>function meanEqualsMode(array) {
  const mode = arrayMode(array);
  const mean = arrayMean(array);

  return mode === mean;
}

function arrayMode(array) {
  const frequencies = new Map();

  for (const value of array) {
    const currentCount = frequencies.has(value) ? frequencies.get(value) : 0;
    frequencies.set(value, currentCount + 1);
  }

  let highestCount = 0;
  let mostOccurringValue;

  for (const [value, count] of frequencies) {
    if (count &gt;= highestCount) {
      highestCount = count;
      mostOccurringValue = value;
    }
  }

  return mostOccurringValue;
}

function arrayMean(array) {
  return array.reduce((sum, value) =&gt; sum + value) / array.length;
}
</code></pre>

<p>Now, answering some of your questions:</p>

<blockquote>
  <p>Was using a counts variable necessary?</p>
</blockquote>

<p>Yes and no. In order to calculate the mode of a list of numbers, you need to know the number of occurrences for each number. However, it is possible to determine the mode <em>while</em> counting the occurences; thus, allowing you to calculate the mode without explicitly storing the occurences. To keep the code simple, I opted for not combining these steps.</p>

<blockquote>
  <p>Are all variable keywords (const &amp; let) optimal?</p>
</blockquote>

<p>Probably not. You are using <code>const</code> and <code>let</code>. There is very, very little reason to also still use <code>var</code> at all. Most variables are assigned only once and can be defined using <code>const</code>. Some variables have to be declared using <code>let</code> because they’re (re-)assigned later.</p>

<blockquote>
  <p>Is it wise to include comments to describe what the code does?</p>
</blockquote>

<p>Yes. Take my code for example. Is there something you don’t understand? Then it could’ve maybe explained with a comment. You used a <code>reduce</code> function in your code which I often find hard to read. You need to ask yourself: Is my code dealing with a complex problem that needs explaining or is it just written in a hardly readable fashion? A complex problem is best explained with comments. Code which is hard to read and thus hard to reason about is better fixed by making it more readable and obvious.</p>

<blockquote>
  <p>Was declaring the mode variable before assigning its value the best way? Its value depends on a condition</p>
</blockquote>

<p>No, it wasn’t. The mode of a list of numbers always exists although it might not be unique. Therefor its value does not logically depend on a condition.</p>
    </div>