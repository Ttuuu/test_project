<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I've never used pygame, but I can make suggestions regarding the rest of your code.</p>

<hr>

<p>In your main file, you have two functions, both of which contain the line <code>global grid</code> at the top. Since some external <code>grid</code> is a dependency of the function, it should be explicitly passed in as a parameter instead:</p>

<pre><code>global_grid = []

def create_array(grid):
    for row in range(0, amount):
    ...

create_array(global_grid)
</code></pre>

<p>Why? Now <code>create_array</code> can be tested entirely independently of anything else going on. You can create some test grid to do testing with in a REPL, pass the grid to <code>create_array</code>, and have it do its thing. With how you have things set up now though, to do any testing you need to actually alter the code by changing the global <code>grid</code>.</p>

<p>If you look at <code>create_array</code>, why does it even need to know about <code>grid</code> though? All it's doing is appending data to it; and it seems likely that it's assuming <code>grid</code> is already empty. It would make much more sense to have something like this where it just has its own <code>grid</code>:</p>

<pre><code># Arguably, "amount" should be a parameter as well
def create_array():
    grid = [] # No more global reference, instead create a local

    for row in range(0, amount):
        placeholder = [] # "row# may be a more appopriate name
        for column in range(0, amount):
            cell = square(row, column, column*size + column, row*size + row, amount, size)
            placeholder.append(cell)
        grid.append(placeholder)

    return grid # Now return the local

global_grid = create_array() # Assign the return of the function
</code></pre>

<p>Ideally, each function should explicitly take as parameters any data that it needs to operate, and explicitly <code>return</code> any data that represents its purpose. With this new version, the function can be tested by running it and examining the output in the REPL. You aren't needlessly altering any global data that other function calls later on may be effected by.</p>

<p>And the same goes for <code>check</code>. What if you want to test its checking ability by throwing random data at it? If all your functions rely on the same global, and you're altering that global for every test, you're also potentially changing the behavior of any other function that's relying on the global <code>grid</code>. Change it to:</p>

<pre><code>def check(grid):
    #Create old gird tamplate
    old_grid = copy.deepcopy(grid)
    ...
</code></pre>

<p>And pass in the grid you want checked when you want to call it.</p>

<p>I'll just mention as an aside that the expensive <code>copy.deepcopy(grid)</code> call can be entirely avoided if you use immutable data structures. This is a prime case where immutability is superior. In languages like Clojure and Haskell that use immutable structures as the default, creating copies of data is very cheap. When I write a Conway's Game of Life implementation in Clojure, I never have to manually create a deep copy of the grid, because every time I "alter" the grid, I'm making a cheap copy of it automatically. Unfortunately, I don't think Python has very good support for immutable data structures (unless a good library is available, which I wouldn't doubt actually). It's something to keep in mind though when working on projects like this.</p>

<hr>

<pre><code>try:
    if old_grid[cell.row][previous_column].alive:
        alive += 1
except:
    pass
</code></pre>

<p>This is <em>literally</em> one of the worst things you could possibly do. In this particular case, only a limited number of things can go wrong, but you are setting yourself up for excruciating debugging if you completely throw away any error you may receive.</p>

<p>Let's say in the future you add a function call in there, but you haven't sufficiently tested the new function. One day, it breaks due to some unforeseen circumstance, and throws an exception. Normally, the exception would cause the program to crash, it tells you what's wrong, you read the error and fix the problem, and get it working again. With how you have it now, <code>try...except: pass</code> will <em>silence</em> any error that you receive; regardless of its source or reason. As someone that's been bit by exception swallowing before (via Clojure's <code>future</code>s), I can tell you it is the worst debugging and programming experiences you can have. Everything suddenly stops working in weird ways, yet you have no errors indicating what's wrong. It's awful. Don't do that to yourself.</p>

<p>I'm assuming you're doing this to simplify out of bounds checks. Using exceptions to handle bounds checks will likely be slower that the alternative of just not checking out of bounds cells in the first place. I'm going into brain lock on how to better approach this in Python, but iterating over the indices of the grid and using the <code>min</code> and <code>max</code> functions that account for the width/height of the grid would be better. You could also create a <code>is_inbounds</code> function that returns if a given coordinate is valid in the grid or not, and use the check.</p>

<p>At the <strong><em>very</em></strong> least, if you wanted to keep using the "ask for forgiveness instead of permission" approach, you should specify what type of exception you're catching:</p>

<pre><code>try:
    if old_grid[cell.row][previous_column].alive:
        alive += 1

except IndexError as e: # Specify that you only want to catch IndexErrors
    pass
</code></pre>

<hr>

<pre><code>def is_in_range(self, x, y):
  if x in range(self.x, self.x + self.size + 1) and y in range(self.y, self.y + self.size + 1):
    return True
  else:
    return False
</code></pre>

<p>Would be more succinctly written as</p>

<pre><code>def is_in_range(self, x, y):
  return x in range(self.x, self.x + self.size + 1) and
         y in range(self.y, self.y + self.size + 1)
</code></pre>

<p>Or, to take advantage of Python allowing comparison chaining:</p>

<pre><code>def is_in_range(self, x, y):
  return (self.x &lt;= x &lt;= self.size) and
         (self.y &lt;= y &lt;= self.size)
</code></pre>

<hr>

<pre><code>if event.type == pygame.KEYDOWN:
    if event.key == pygame.K_SPACE:
        gameStarted = True
</code></pre>

<p>Is the same as:</p>

<pre><code>if event.type == pygame.KEYDOWN and event.key == pygame.K_SPACE:
    gameStarted = True
</code></pre>

<p>If you had an <code>elif</code> or <code>else</code> after one of the condtions and needed to handle false cases, it would be different. Here though, you only care if they're both true (<code>and</code>).</p>

<hr>

<p>Those are the major things that stuck out to me. I hope that helped.</p>
    </div>