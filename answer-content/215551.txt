<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ol>
<li>All of your methods on <code>Node</code> are useless. Just use <code>Node.val</code> and <code>Node.next</code> like you already are.</li>
<li><code>insert_after_key</code> is likely to insert the data multiple times if there are multiple keys. Given how <code>insert_before_key</code> works differently you should <em>test</em> you code with <code>unittest</code>s.</li>
<li>Your code fails silently. I don't recommend this.</li>
<li>You can remove the looping from all your functions if you add add a <code>_iter</code> function.</li>
<li>You can remove the need to loop to fine the key in most of your functions if you add a <code>_find_key</code> function, which returns the previous and next node.</li>
<li>I'd implement (5) using <code>pairwise</code> (itertools recipe) and use the <code>_iter</code> function.</li>
<li>You can simplify <code>append</code> if you use the <code>tail</code> itertools recipe.</li>
<li>You don't seem to have much code to handle empty lists.</li>
</ol>



<pre><code>import collections
import itertools


def pairwise(iterable):
    "s -&gt; (s0,s1), (s1,s2), (s2, s3), ..."
    a, b = itertools.tee(iterable)
    next(b, None)
    return zip(a, b)


def tail(n, iterable):
    "Return an iterator over the last n items"
    # tail(3, 'ABCDEFG') --&gt; E F G
    return iter(collections.deque(iterable, maxlen=n))


class Node:
    def __init__(self, data, next=None):
        self.val = data
        self.next = next


class SingleLinkedList(object):
    def __init__(self, data):
        self.head = data

    def __repr__(self):
        return '-&gt;'.join(str(n) for n in self._iter())

    def __len__(self):
        return sum(1 for _ in self._iter())

    def _iter(self):
        node = self.head
        while node is not None:
            yield node
            node = node.next

    def append(self, data):
        if not self.head:
            self.head = Node(data)
            return

        last, = tail(self._iter(), 1)
        last.next = Node(data)

    def _find_key(self, key):
        if self.head is None:
            raise IndexError('Key not found')
        if key == self.head.value:
            return None, self.head

        for prev, curr in pairwise(self._iter()):
            if curr.val == key:
                return prev, curr
        raise IndexError('Key not found')

    def insert_before_key(self, key, data):
        prev, curr = self._find_key(key)
        if prev is None:
            self.head = Node(data, self.head)
        else:
            prev.next = Node(data, curr)

    def insert_after_key(self, key, data):
        _, node = self._find_key(key)
        node.next = Node(data, node.next)

    def delete(self, key):
        prev, curr = _find_key(key)
        if prev is None:
            self.head = curr.next
        else:
            prev.next = curr.next

    def search(self, key):
        _, node = _find_key(key)
        return node

    def reverse(self):
        cur = self.head
        prev = None
        while cur:
            nxt = cur.next
            cur.next = prev
            prev = cur
            cur = nxt
        self.head = prev
</code></pre>
    </div>