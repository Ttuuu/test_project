<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Not a copy</h2>

<pre><code>// make a copy
let {groups} = this.state
</code></pre>

<p>You comment that the line following makes a copy. This is not the case, you are just creating a new reference named <code>groups</code> to the array..</p>

<h2>Use <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const" rel="nofollow noreferrer"><code>const</code></a></h2>

<p>As you do not change the reference you should define <code>groups</code> as a constant.</p>

<pre><code>const {groups} = this.state;
// or
const groups = this.state.groups;
</code></pre>

<h2><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/push" rel="nofollow noreferrer"><code>Array.push</code></a> rather than <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/concat" rel="nofollow noreferrer"><code>Array.concat</code></a></h2>

<p><code>Array.concat</code> creates a new array, it is more efficient to just <code>Array.push</code> a new item to the existing array</p>

<pre><code>groups[gIndex].items = items.concat({id: itemId});
// can be
groups[gIndex].items.push({id: itemId});
</code></pre>

<h2><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find" rel="nofollow noreferrer"><code>Array.find</code></a> rather than <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex" rel="nofollow noreferrer"><code>Array.findIndex</code></a></h2>

<p>You find the index of the group you want to modify. This complicates the code. If you use <code>Array.find</code> it will return the <code>group</code> and you don't need to index into <code>groups</code> each time.</p>

<pre><code>const gIndex= groups.findIndex(g=&gt; g.id == groupId);
// becomes 
const group = groups.find(group =&gt; group.id == groupId);
</code></pre>

<h2>Common tasks in functions</h2>

<p>Between the two functions you repeat some code. I would imaging that other functions also need to access <code>groups</code> by id, make changes, and set the state of the new content. It would be best to provide functions to do that.</p>

<pre><code>getGroupById(id) { return this.state.groups.find(group =&gt; group.id === id) },
updateGroups() { this.setState({groups: this.state.groups}) },
</code></pre>

<h2>Good naming</h2>

<p>The functions <code>addItem</code> and <code>removeItem</code> do not indicate that they are related to adding/removing from a group. Better names could be <code>removeItemFromGroup</code>, <code>addItemToGroup</code></p>

<h2>Be consistent</h2>

<p>Good code style is consistent. Whether or not you use semicolons you should avoid doing it sometimes, do it always or never. (best option is use them)</p>

<h2>Rewrite</h2>

<p>Using the above points you could rewrite the code as the following.</p>

<p>Added two functions to do the common task of getting by group id and updating the state with groups.</p>

<p>I assume that the <code>groupId</code> will exist as the code you have given indicates this to be so, if the <code>groupId</code> does not exist your code would throw, and so would the following code.</p>

<pre><code>getGroupById(id) { return this.state.groups.find(g =&gt; g.id === id) },
updateGroups() { this.setState({groups: this.state.groups}) },
removeItemFromGroup(groupId, id) {
    const group = this.getGroupById(groupId);
    group.items = group.items.filter(item =&gt; item.id !== id);
    this.updateGroups();
},
addItemToGroup(groupId, id) {
    this.getGroupById(groupId).items.push({id});
    this.updateGroups();
},    
</code></pre>

<p>If <code>items</code> are unique per group you can avoid the using <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter" rel="nofollow noreferrer"><code>Array.filter</code></a> and having to create a new array by splicing the item out of the array using <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice" rel="nofollow noreferrer"><code>Array.splice</code></a></p>

<pre><code>removeItemFromGroup(groupId, id) {
    const items = this.getGroupById(groupId).items;
    const itemIdx = items.findIndex(item =&gt; item.id === id);
    itemIdx &gt; -1 &amp;&amp; items.splice(itemIdx, 1);
    this.updateGroups();
},
</code></pre>

<p>Or if items are not unique, or unique only sometimes you could iterate over the array removing them as you encounter them.</p>

<pre><code>removeItemFromGroup(groupId, id) {
    const items = this.getGroupById(groupId).items;
    var i = items.length;
    while (i--) { items[i].id === id &amp;&amp; items.splice(i, 1) }
    this.updateGroups();
},
</code></pre>

<h2>Safer</h2>

<p>The next example guards the function from trying to modify items if the group does not exist.</p>

<pre><code>getGroupById(id) { return this.state.groups.find(g =&gt; g.id === id) },
updateGroups() { this.setState({groups: this.state.groups}) },
removeItemFromGroup(groupId, id) {
    const group = this.getGroupById(groupId);
    if (group) {
        group.items = group.items.filter(item =&gt; item.id !== id);
        this.updateGroups();
    }
},
addItemToGroup(groupId, id) {
    const group = this.getGroupById(groupId);
    if (group) {
        group.items.push({id});
        this.updateGroups();
    }
},   
</code></pre>

<p>And just in case you don't want to duplicate items in a group.</p>

<pre><code>// Only adds items if if it does not already exist in the group.
addItemToGroup(groupId, id) {
    const group = this.getGroupById(groupId);
    if (group &amp;&amp; !group.items.some(item =&gt; item.id === id)) {
        group.items.push({id});
        this.updateGroups();
    }
}, 
</code></pre>
    </div>