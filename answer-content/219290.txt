<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The optimal solution to this is significantly simpler than what you have. We'll get to that in a second. First, let's examine your code:</p>

<ul>
<li><code>Cop</code> should not begin with a capital letter. Variables should be <code>snake_case</code>. Furthermore, <code>cop</code> is a bad name. At the least it should be <code>copy</code> (don't shorten names, it only makes things less clear--unless the shortening is a broadly understood acronym like HTML). But copy of <em>what</em>? From that name, I can't tell. I have to go hunting for the initialization of it (and all of the mutations to it) to figure out what it actually does. What are <code>J</code>, <code>Q</code>, and <code>W</code>? Again, they should be lowercase. But also, letters make awful variable names (except for maybe <code>i</code> and <code>j</code> for numeric loop variables). 
n</li>
<li>Your code either has or is precariously close to an off by one issue with all of the <code>+1</code>ing that you're doing. Why is it <code>print(count + 1)</code> and not <code>print(count)</code>?</li>
<li><code>count = count + len(K)</code> should be <code>count += len(K)</code></li>
<li><code>[[1 for i in range(num)]]</code> can just be <code>[[1] * num]</code></li>
<li>PEP8 your code. It is messy and has little whitespace, which makes it hard to follow.</li>
<li><code>con</code> is a poorly named function. What does that even mean? Clearly it doesn't count anything because you have to use it in a loop to get the answer to the problem.</li>
<li>Why are you maintaining <code>Q</code> as a list to only use it in <code>T = list(set(Q))</code>? <code>Q</code> should just be a set from the start, that's more efficient.</li>
<li>There's no need to do the <code>list</code> in <code>T = list(set(Q))</code>. You can iterate over <code>T = set(Q)</code> (without the need to create a <code>list</code>).</li>
<li>You need to comment this code. The fact that you need to spend a paragraph explaining how your code works is a pretty good sign of this. It would take a long time for me to walk through this an understand how each piece works. Comment things that aren't clear. Comment why not how. Add docstrings to functions. I wouldn't even know how to just use your code to get the answer to the problem. I assume setting <code>num</code>, but it's unclear to me if that gives the answer for 5 or 4, given that you do <code>range(num)</code> which is exclusive not inclusive (it's <code>[0, 1, 2, 3, 4]</code>)</li>
</ul>

<p>That's a not exhaustive list of issues with your code as it exists. But, we need to start from scratch, because what you have is <em>way</em> too complicated for the task at hand. If we take a step back and rethink the problem, we can come up with a much more elegant solution.</p>

<p>Let's start by looking at the problem:</p>

<blockquote>
  <p>It is possible to write five as a sum in exactly six different ways:</p>

<pre><code>4 + 1
3 + 2
3 + 1 + 1
2 + 2 + 1
2 + 1 + 1 + 1
1 + 1 + 1 + 1 + 1
</code></pre>
  
  <p>How many different ways can one hundred be written as a sum of at least two positive integers?</p>
</blockquote>

<p>Here's a question: can we write out all of the ways to write <em>four</em> as a sum? Sure, it looks like:</p>

<pre><code>3 + 1
2 + 2
2 + 1 + 1
1 + 1 + 1 + 1
</code></pre>

<p>Hmm, that looks suspiciously similar to the list above. Let's rewrite the sums for five. I'll put the parts that are unique to five in parenthesis:</p>

<pre><code>(4 + 1)
(3 + 2)
3 + 1 (+ 1)
2 + 2 (+ 1)
2 + 1 + 1 (+ 1)
1 + 1 + 1 + 1 (+ 1)
</code></pre>

<p>We should notice a pattern here. Namely, the sums for five are the sums for four with <code>+ 1</code> added and an additional 2 new ways. The 2 new ways are just combinations of the first sum of four <code>+ 1</code>. <code>3 + 1 + 1</code> if you merge the <code>1 + 1</code> is <code>3 + 2</code> and <code>3 + 1 + 1</code> if your merge the <code>3 + 1</code> is <code>4 + 1</code>.</p>

<p>Similarly, we can write the sums for four as the sums of three with some extras added on:</p>

<pre><code>(3 + 1)
(2 + 2)
2 + 1 (+ 1)
1 + 1 + 1 (+ 1)
</code></pre>

<p>This pattern continues all the way down to one where there is only one sum: <code>1</code> itself.</p>

<p>Hopefully, this pattern is hinting to you that there is a recurrence relation we could take advantage of. Namely, if we know the number of sums for 5 is the number of sums for 4 plus some extras. This goes all the way down to 1. This should hint to you that a recursive solution may be appropriate. However, there's a catch. While we can implement it recursively, it turns out that the dependency chain isn't linear. Each answer depends on every answer before it. Because of this, even though you could compute the answer recursively, it would be inefficient, because it would require recomputing the answer for every number below. But we're really close.</p>

<p>As an aside, there are other (perhaps more natural) phrasings of this problem, which may make this <code>+1</code> structure more obvious. Consider you have <code>n</code> pennies. How many unique groups of all <code>n</code> pennies can you make (each group is like one of the terms in the addition). For example, if <code>n = 5</code> then a group of 4 pennies and a group of 1 pennies (one of the sums for 5) is like 4 + 1.</p>

<p>The efficient solution recalls that we can take a dynamic programming approach where we memoize answers to smaller problems. We can do so by accumulating a list of the previous answers <code>num_ways_to_sum</code> and build this up from 1 up to the desired number:</p>

<pre class="lang-py prettyprint-override"><code>def count_number_of_ways_to_sum(target_sum):
    """
    Compute the number of unique ways (order does not matter) of summing to target_sum
    using numbers from 1 to target_sum, exclusive.
    """
    if target_sum &lt;= 1:
        raise ValueError('there are no numbers greater than 0 less than the target sum')

    # ith index contains the answer to the (i + 1)th subproblem
    num_ways_to_sum = [0] * (target_sum + 1)

    # There is only 1 way to sum to 1
    num_ways_to_sum[0] = 1

    # Consider sums involving numbers in [1, target_sum)
    for i in range(1, target_sum):
        # Every subproblem j &gt;= i depends on i
        for j in range(i, target_sum + 1):
            # The number of ways to sum j includes all the ways to sum i 
            # with all the ways to sum (j - i) appended (like the parenthesis)
            num_ways_to_sum[j] += num_ways_to_sum[j - i]

    return num_ways_to_sum[target_sum]
</code></pre>

<p>Note a few things:</p>

<ul>
<li>We document and properly name the function</li>
<li>We are careful with domain. We <code>raise ValueError</code> when we are given an impossible <code>target_sum</code>. (1 has no solution, because there are no counting numbers less than 1 but greater than 0)</li>
<li>We name variables appropriately. It is clear what <code>num_ways_to_sum</code> is. We may even consider renaming <code>i</code> and <code>j</code>, although the comments perhaps make them clear enough (and given that they are only used over 3 lines, this information is close together and intelligible as a single unit.</li>
<li>We comment!</li>
<li>We use python standard library features appropriately (like <code>list</code>s, <code>range</code>, etc.)</li>
</ul>

<p>Now, you should definitely test this with the <code>unittest</code> package.</p>
    </div>