<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I don't have much experience with JavaScript, so I apologize if my suggestions aren't idiomatic (or runnable) JS. Here are a few things I see.</p>

<h2>Consistent spacing</h2>

<p>You switch between tabs of two spaces and four spaces. It's not clear to me why.</p>

<h2>Use braces for multi-line for loops</h2>

<p>Your second for loop is missing curly braces. It makes things easier to read to include curly braces if the for loop has code that spans multiple lines.</p>

<h2>Use the boolean directly</h2>

<p>You can assign the boolean value of an expression directly to a variable.</p>

<pre><code>if ($costume.length &gt; 1) {
    costume_exists = true;
} else {
    costume_exists = false;
}

if ($mp.length &gt; 0) {
    playing_exists = true;
} else {
    playing_exists = false;
}
</code></pre>

<p>Becomes:</p>

<pre><code>costume_exists = $costume.length &gt; 1;
playing_exists = $mp.length &gt; 0;
</code></pre>

<h2>Use <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals" rel="nofollow noreferrer">template literals</a></h2>

<p>You can embed expressions into template strings directly. The parenthesis around the expression look to be unnecessary.</p>

<pre><code>breakdown = ('&lt;h3&gt;' + $band + " " + $year + '&lt;/h3&gt;' +
    '&lt;i&gt;' + getOrdinal($prize) + ' Prize' + '&lt;/i&gt;&lt;br&gt;&lt;br&gt;' +
    '&lt;b&gt;Music:&lt;/b&gt; ' + $ge_music + '&lt;br&gt;' +
    '&lt;b&gt;Presentation:&lt;/b&gt; ' + $ge_visual + '&lt;br&gt;' +
    '&lt;b&gt;Costume:&lt;/b&gt; ' + $costume + '&lt;br&gt;&lt;br&gt;' +
    '&lt;b&gt;Total Points:&lt;/b&gt; ' + $total + '&lt;br&gt;&lt;br&gt;' +
    '&lt;b&gt;Costumer:&lt;/b&gt; ' + $costumer + '&lt;br&gt;' +
    '&lt;b&gt;Costume/Set Designer:&lt;/b&gt; ' + $designer + '&lt;br&gt;' +
    '&lt;b&gt;Music Arranger:&lt;/b&gt; ' + $arranger + '&lt;br&gt;' +
    '&lt;b&gt;Choreographer:&lt;/b&gt; ' + $choreographer + '&lt;br&gt;')
</code></pre>

<p>Becomes:</p>

<pre><code>breakdown = `&lt;h3&gt;{$band} {$year}&lt;/h3&gt;
    &lt;i&gt;{getOrdinal($prize)} Prize&lt;/i&gt;&lt;br&gt;&lt;br&gt;
    &lt;b&gt;Music:&lt;/b&gt; {$ge_music}&lt;br&gt;
    &lt;b&gt;Presentation:&lt;/b&gt; {$ge_visual}&lt;br&gt;
    &lt;b&gt;Costume:&lt;/b&gt; {$costume}&lt;br&gt;&lt;br&gt;
    &lt;b&gt;Total Points: {$total}&lt;br&gt;&lt;br&gt;
    &lt;b&gt;Costumer:&lt;/b&gt; {$costumer}&lt;br&gt;
    &lt;b&gt;Costume/Set Designer:&lt;/b&gt; {$designer}&lt;br&gt;
    &lt;b&gt;Music Arranger:&lt;/b&gt; {$arranger}&lt;br&gt;
    &lt;b&gt;Choreographer:&lt;/b&gt; {$choreographer}&lt;br&gt;`
</code></pre>

<p><strong>Edit:</strong> If <code>getOrdinal()</code> is breaking in the template, a hacky way to get around this is define <code>const prizeOrd = getOrdinal($prize);</code> then use <code>{prizeOrd}</code> in its place.</p>

<h2>Reduce nesting</h2>

<p>You can reduce nesting by inverting and combining your if-statements.</p>

<pre><code>table.rows[i].cells[j].onclick = function() {
    if (this.cellIndex == 7) {
        if (!this.innerHTML.includes(icon)) {
            // code
        }
    }
}
</code></pre>

<p>Becomes:</p>

<pre><code>table.rows[i].cells[j].onclick = function() {
    if (this.cellIndex != 7 || this.innerHTML.includes(icon)) {
        return;
    }

    // code
}
</code></pre>

<p>More nesting can be reduced, like the <code>table != null</code> check.</p>

<h2>Avoid unneeded duplication</h2>

<p>A lot of your lines are taken up by constructing separate (but very similar) strings depending on a few conditions. With template literals, we can use one string with inner expressions.</p>

<p>Define a string for the music portion as such:</p>

<pre><code>music = $year &lt; 1991 &amp;&amp; costume_exists
    ? `&lt;b&gt;Music:&lt;/b&gt; {$ge_music}&lt;br&gt;`
    : `&lt;b&gt;Music Playing:&lt;/b&gt; {$mp}&lt;br&gt;`;
</code></pre>

<p>I can't verify if that's valid syntax for JS, but you get the gist. Likewise with the costume portion.</p>

<p>It's not the exact same behavior, but this seems to be what you're going for:</p>

<pre><code>breakdown = "breakdown"

if ($year &gt; 1991 &amp;&amp; !costume_exists &amp;&amp; !playing_exists) {
    alert(`No point breakdowns for {$year} are available.`);
    return;
}

music = $year &lt; 1991 &amp;&amp; costume_exists
    ? `&lt;b&gt;Music:&lt;/b&gt; {$ge_music}&lt;br&gt;`
    : `&lt;b&gt;Music Playing:&lt;/b&gt; {$mp}&lt;br&gt;`;

costume = custume_exists
    ? `&lt;b&gt;Costume:&lt;/b&gt; {$costume}&lt;br&gt;&lt;br&gt;`
    : '';

breakdown = `&lt;h3&gt;{$band} {$year}&lt;/h3&gt;
    &lt;i&gt;{getOrdinal($prize)} Prize&lt;/i&gt;&lt;br&gt;&lt;br&gt;
    {music}
    &lt;b&gt;Presentation:&lt;/b&gt; {$ge_visual}&lt;br&gt;
    {costume}
    &lt;b&gt;Total Points: {$total}&lt;br&gt;&lt;br&gt;
    &lt;b&gt;Costumer:&lt;/b&gt; {$costumer}&lt;br&gt;
    &lt;b&gt;Costume/Set Designer:&lt;/b&gt; {$designer}&lt;br&gt;
    &lt;b&gt;Music Arranger:&lt;/b&gt; {$arranger}&lt;br&gt;
    &lt;b&gt;Choreographer:&lt;/b&gt; {$choreographer}&lt;br&gt;`

swal({
    title: 'Point Breakdown',
    html: breakdown
})
</code></pre>

<h2>JavaScript after loading</h2>

<blockquote>
  <p>This function below (used on a timeout due to my page loading time) displays information on my site.</p>
</blockquote>

<p>Normally, you would do this <a href="https://stackoverflow.com/a/807895/6789498">as such</a>:</p>

<pre><code>window.onload = function ...
</code></pre>

<p>This also should work consistently, whereas using a pre-defined timeout duration may not work with extremely slow internet.</p>

<h2>Use <code>const</code></h2>

<p>You can use the <code>const</code> keyword instead of <code>var</code> for the <code>icon</code> variable.</p>

<pre><code>const icon = "&lt;/i&gt;";
</code></pre>

<p>Given that this is JavaScript, it will make zero difference performance-wise. But, if the value isn't meant to be changed, this gives an indication to those who read your code.</p>

<h2>Performance</h2>

<p>Currently you iterate over all cells in the table, <span class="math-container">\$O(mn)\$</span>. I am not familiar enough with JavaScript to suggest something with better performance.</p>

<p>However I would certainly look into this if your tables become large.</p>

<h2>Conclusion</h2>

<p>Here is the code I ended up with:</p>

<pre><code>window.onload = function() {
    const table = document.getElementById("bands");

    const icon = "&lt;/i&gt;";

    if (table != null) {
        for (var i = 0; i &lt; table.rows.length; i++) {
            for (var j = 0; j &lt; table.rows[i].cells.length; j++) {
                table.rows[i].cells[j].onclick = function() {
                    if (this.cellIndex !== 7 || this.innerHTML.includes(icon)) {
                        return;
                    }

                    const $row = $(this).closest("tr");
                    const $year = $row.find(".year").text();
                    const $prize = $row.find(".prize").text();
                    const $band = $row.find(".band").text();
                    const $mp = $row.find(".mp").text();
                    const $ge_music = $row.find(".ge_music").text();
                    const $vp = $row.find(".vp").text();
                    const $ge_visual = $row.find(".ge_visual").text();
                    const $costume = $row.find(".costume").text();
                    const $total = $row.find(".total").text();
                    const $costumer = $row.find(".costumer").text();
                    const $designer = $row.find(".designer").text();
                    const $arranger = $row.find(".arranger").text();
                    const $choreographer = $row.find(".choreographer").text();

                    const costume_exists = $costume.length &gt; 1;

                    const playing_exists = $mp.length &gt; 0;

                    var breakdown = "breakdown"

                    if ($year &gt; 1991 &amp;&amp; !costume_exists &amp;&amp; !playing_exists) {
                        alert(`No point breakdowns for {$year} are available.`);
                        return;
                    }

                    const music = $year &lt; 1991 &amp;&amp; costume_exists
                        ? `&lt;b&gt;Music:&lt;/b&gt; {$ge_music}&lt;br&gt;`
                        : `&lt;b&gt;Music Playing:&lt;/b&gt; {$mp}&lt;br&gt;`;

                    const costume = custume_exists
                        ? `&lt;b&gt;Costume:&lt;/b&gt; {$costume}&lt;br&gt;&lt;br&gt;`
                        : '';

                    breakdown = `&lt;h3&gt;{$band} {$year}&lt;/h3&gt;
                        &lt;i&gt;{getOrdinal($prize)} Prize&lt;/i&gt;&lt;br&gt;&lt;br&gt;
                        {music}
                        &lt;b&gt;Presentation:&lt;/b&gt; {$ge_visual}&lt;br&gt;
                        {costume}
                        &lt;b&gt;Total Points: {$total}&lt;br&gt;&lt;br&gt;
                        &lt;b&gt;Costumer:&lt;/b&gt; $costumer&lt;br&gt;
                        &lt;b&gt;Costume/Set Designer:&lt;/b&gt; {$designer}&lt;br&gt;
                        &lt;b&gt;Music Arranger:&lt;/b&gt; {$arranger}&lt;br&gt;
                        &lt;b&gt;Choreographer:&lt;/b&gt; {$choreographer}&lt;br&gt;`

                    swal({
                        title: 'Point Breakdown',
                        html: breakdown
                    })
                }
            }
        }
    }
};
</code></pre>

<p>I have no way to verify that it works, but it looks like it should.</p>

<p>Hope this helps!</p>
    </div>