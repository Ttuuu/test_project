<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>A slight change to the answer:</p>

<pre><code>def normalize_text4(text):
    output: List[str] = []
    punctuation_filter = str.maketrans('', '', string.punctuation)
    for token in nltk.word_tokenize(text, preserve_line=True):
        token = token.translate(punctuation_filter)
        if token:
            output.append(token.lower())
    return output
</code></pre>

<p>Usage with <code>preserve_line=True</code> is a bit faster, and with the punctuation removed, the result is the same as with the default <code>preserve_line=False</code>.
As most of the time is spent in <code>word_tokenize</code>, this is the first you want to optimize, though I haven't looked farther than this.</p>

<p>Here is the measurement (same as above):</p>

<pre><code>times = []
base = None
for fct in (normalize_text, normalize_text2, normalize_text3, normalize_text4):
    for i in range(1000):
        start = time.time()
        tokens = fct(t)
        end = time.time()
        times.append(end - start)

    avg = np.mean(times)
    if not base:
        base = avg
    print(f'{fct.__name__:15}: {avg * 1000:4.3} ms, {avg / base * 100:6.4} %')
</code></pre>

<p>and the results (on my Windows 10 notebook):</p>

<pre><code>normalize_text : 4.88 ms,  100.0 %
normalize_text2: 4.86 ms,  99.44 %
normalize_text3: 4.64 ms,  94.93 %
normalize_text4: 3.85 ms,  78.88 %
</code></pre>

<p>The results vary, with the percentage somewhere between 74 and 82%, but this is a typical outcome.</p>

<p><strong>EDIT:</strong><br>
Something I noticed afterwards, and that I don't have an explanation for: if you run <code>normalize_text4</code> <em>before</em> any of the other scripts (that use <code>preserve_line=False</code>) instead of after them, it is quite a bit faster:</p>

<pre><code>normalize_text4: 1.81 ms,  41.07 %
normalize_text : 4.42 ms,  100.0 %
normalize_text4: 3.57 ms,  80.76 %
</code></pre>

<p>(I changed the script to have <code>normalize_text</code> as base like before)<br>
I would guess that some caching is happening that is counter-productive in this (constructed) case. </p>
    </div>