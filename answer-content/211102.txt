<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>If you don't need the <code>Car</code>, you can also flatMap to have the features and then distinct them before searching.</p>

<pre><code>cars.stream()
  .flatMap(car -&gt; car.getAmounts().stream())
  .map(Feature::getType)
  .distinct() // As spotted by @Pimgd in the comments this is useless
  .anyMatch(lookForTypes::contains);
</code></pre>

<p>But if you want to improve the readability of your code you should better consider to move a part of this "logic" into your objects :</p>

<pre><code>cars.stream()
  .anyMatch(car -&gt; car.hasAtLeastOneFeature(lookForTypes);

// ...

Car {
  boolean hasAtLeastOneFeature(List&lt;Integer&gt; features) {
    // Note that I renamed getAmounts to getFeatures
    return getFeatures().stream()
      .anyMatch(feature -&gt; features.contains(feature.getType());
  }
}
</code></pre>
    </div>