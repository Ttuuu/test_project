<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You storing the value in <code>std::array&lt;value_type, 4&gt;</code> which is fine. But if you change your mind on the storage type you have to change this in like 10 places. To make this easier it is a good idea to abstract the storage type and then use this storage type in all places.</p>

<pre><code>    using Storage                = std::array&lt;value_type, 4&gt;;
    using iterator               = Storage::iterator;
    using const_iterator         = Storage::const_iterator;
    using reverse_iterator       = Storage::reverse_iterator;
    using const_reverse_iterator = Storage::const_reverse_iterator;
    using size_type              = Storage::size_type;
</code></pre>

<p>Now if you change the underlying storage type you only have to change it in one place.</p>

<hr>

<p>What does it mean to increment/decrement an ip address?</p>

<pre><code>    /**
     * @brief Prefix increment operator.
     */
    void operator++();
</code></pre>

<p>What scenario does this make sense?</p>

<hr>

<p>If there is a test for equality:</p>

<pre><code>bool operator==(const ip::address &amp;first, const ip::address &amp;second);
</code></pre>

<p>Then I would expect a test for inequality.</p>

<hr>

<p>If there is an output operator:</p>

<pre><code>std::ostream&amp; operator&lt;&lt;(std::ostream&amp; output, const ip::address &amp;address);
</code></pre>

<p>Then I would expect an input operator.</p>

<hr>

<p>The standard exceptions (except <code>std::exception</code> itself) already implement <code>what()</code>. You should inherit from one of these rather than <code>std::exception</code> (probably <code>std::runtime_error</code>.</p>

<pre><code>class invalid_format_exception : public std::exception
{
    std::string invalid_format_;
public:
    invalid_format_exception(const std::string &amp;invalid_format);
    char const* what() const override;
};
</code></pre>

<p>This becomes:</p>

<pre><code>struct invalid_format_exception: std::runtime_error
{
    using std::runtime_error::runtime_error;  // Pull runtime_error constructor into this class.
};
</code></pre>

<hr>

<p>Are you sure that the IP address is always stored in big endian form?</p>

<pre><code>data_[0] = value &gt;&gt; 24 &amp; 0xFF;
data_[1] = value &gt;&gt; 16 &amp; 0xFF;
data_[2] = value &gt;&gt; 8 &amp; 0xFF;
data_[3] = value &amp; 0xFF;
</code></pre>

<p>I would double check and also add a big comment that that is what you expect.</p>

<hr>

<p>The increment operator looks complicated.<br>
I think it can really be simplified by using some existing functions you have identified.</p>

<pre><code>void ip::address::operator++()
{
    uint32_t value = (*this);    // convert to 32 bit number
    ++value;                     // Add 1
    (*this) = address(value);    // convert back to address and copy/move
}
</code></pre>

<hr>

<p>Functions that simply forward calls just put them in the class and forget about them. There is nothing to maintain and it need not take up multiple lines in the source file:</p>

<pre><code>ip::address::iterator ip::address::begin()
{
    return data_.begin();
}

ip::address::const_iterator ip::address::end() const
{
    return data_.end();
}

// I would just do the following the header:


    iterator       begin()        {return data_.begin();}
    iterator       end()          {return data_.end();}
    const_iterator begin() const  {return data_.begin();}
    const_iterator end()   const  {return data_.end();}
</code></pre>

<p>You are of course missing a few:</p>

<pre><code>    const_iterator   cbegin() const {return data_.cbegin();}
    reverse_iterator rbegin()       {return data_.rbegin();}

     // You can add the end() versions.
</code></pre>
    </div>