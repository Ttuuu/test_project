<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><p>Starting cross-out from <code>size_t multiple = 2 * i</code> is a serious pessimization. Every multiple of <code>i</code> with other factor less than <code>i</code> has already been crossed out during previous passes, which dealt with these smaller primes. You should start with <code>size_t multiple = i * i</code>.</p></li>
<li><p>Notice that computing <code>i * i</code> eliminates the need to compute <code>sqrt</code>. The outer loop written as</p>

<pre><code>for (size_t i = 2; i * i &lt; crossedOut.size(); ++i)
</code></pre>

<p>terminates in a very natural way. It may also be beneficial to store the square in a variable:</p>

<pre><code>for (size_t i = 2; (square = i * i) &lt; crossedOut.size(); ++i) {
    crossOutMultiplesOf(square, i, crossedOut);
}
</code></pre>

<p>Now, passing both <code>i</code> and its square seems redundant. OTOH <em>not</em> passing the square forces the callee to recompute it. This is a very rare situation in which I'd advocate against factoring the loop into a function. Consider</p>

<pre><code>for (size_t i = 2; (square = i * i) &lt; crossedOut.size(); ++i) {
    for (size_t multiple = square; multiple &lt; crossedOut.size(); multiple += i) {
        crossedOut[multiple] = true;
    }
}
</code></pre></li>
</ul>
    </div>