<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here are a few comments:</p>

<ul>
<li>In <code>pandas</code> it is customary to use <code>df</code> as a generic name for a dataframe. It is well understood and a lot shorter than <code>dataframe</code>, which is why I will use it in the rest of this answer.</li>
<li>Use <code>_</code> only as an unused placeholder. If you want to do something with the object, give it a name. Even a single character name like <code>s</code> for a string is more meaningful than <code>_</code>.</li>
<li>You don't need to initialize variables before using them. <code>longest = ''</code> is unneeded. </li>
<li><p>The first for loop could be implemented using the built-in <a href="https://docs.python.org/3/library/functions.html#max" rel="nofollow noreferrer"><code>max</code></a> function using the <code>key</code> parameter:</p>

<pre><code>longest = max(dataframe['SMILES'], key=len)`.
</code></pre></li>
<li><p>But <code>pandas</code> has <a href="https://pandas.pydata.org/pandas-docs/stable/user_guide/text.html" rel="nofollow noreferrer">vectorized string methods</a>. Instead of <code>max</code>, you can use</p>

<pre><code>longest = df.SMILES[df.SMILES.str.len().idxmax()]
</code></pre></li>
<li><p>Instead of <code>str.join</code>ing a generator of zeros, use string multiplication:</p>

<pre><code>zeros_as_str = "0" * (len(longest) - len(smi))
</code></pre></li>
<li><p>But what you really want to do is to use <a href="https://docs.python.org/3/library/stdtypes.html#str.ljust" rel="nofollow noreferrer"><code>str.ljust</code></a>, which is also vectorized by <code>pandas</code>. This makes the whole function a lot shorter (and probably faster, too, because the iteration does not necessarily happen in Python anymore). You also don't actually need the longest string, you just need its length:</p>

<pre><code>def generate_standard():
    df = pd.read_csv('solubility.csv', usecols=['SMILES','Solubility'])
    longest = df.SMILES.str.len().max()
    df["standard"] = df.SMILES.str.ljust(longest, "0")
    return df, longest
</code></pre></li>
<li><p>Python has an official style-guide, <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">PEP8</a>. It recommends using a space after a comma in a tuple, but no spaces around the <code>=</code> when using it for keyword arguments.</p></li>
</ul>
    </div>