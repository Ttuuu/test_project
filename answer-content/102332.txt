<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<pre><code>    int wWidth = 660;
    int wHeigth = 660;
</code></pre>
</blockquote>

<p>If you never change these, you may as well make them constants.  </p>

<pre><code>    const int wWidth = 660;
    const int wHeight = 660;
</code></pre>

<p>Then it's clear that they aren't intended to change.  </p>

<p>I also fixed the spelling of "height".  </p>

<blockquote>
<pre><code>    Simple_window sw(centerScreen, 660, 660, "Chapter 12 Exercise 3");
</code></pre>
</blockquote>

<p>You just created variables for this.   Why not use them?  </p>

<pre><code>    Simple_window sw(centerScreen, wWidth, wHeight, "Chapter 12 Exercise 3");
</code></pre>

<p>Then you can change one value and have it propagate through.  </p>

<blockquote>
<pre><code>    int tlx = sw.x_max() - 650;
    int tly = sw.y_max() - 650;
</code></pre>
</blockquote>

<p>Same thing here.  </p>

<pre><code>    const int FRAME_SIZE = 10;
    const int TOP_LEFT_X = sw.x_max() - wWidth + FRAME_SIZE;
    const int TOP_LEFT_Y = sw.y_max() - wHeight + FRAME_SIZE;
</code></pre>

<p>This would also save you a comment, as it is much more obvious what this does.  </p>

<blockquote>
<pre><code>        for(size_t j=0; j &lt; numOfColumns; ++j){
</code></pre>
</blockquote>

<p>It won't make a functional difference if both are 8, but this should be </p>

<pre><code>        for (size_t j = 0; j &lt; numOfRows; ++j) {
</code></pre>

<p>Otherwise if you change one value without changing the other (e.g. if you wanted a 12x8 checkerboard), it won't draw the board as you designate it.  </p>

<blockquote>
<pre><code>            if ((i+j) % 2 == 0) r-&gt;set_fill_color(Color::red);
            else r-&gt;set_color(Color::white);
</code></pre>
</blockquote>

<p>It's more robust in the face of future edits to write this as </p>

<pre><code>            if ((i + j) % 2 == 0) {
                r-&gt;set_fill_color(Color::red);
            } else {
                r-&gt;set_color(Color::white);
            }
</code></pre>

<p>Also consider </p>

<pre><code>            r-&gt;set_fill_color(((i + j) % 2 == 0) ? Color::red : Color::white);
</code></pre>

<p>Which is more direct.  </p>

<blockquote>
<pre><code>    for(size_t k=0; k &lt; rects.size(); ++k) sw.attach(*rects[k]);
</code></pre>
</blockquote>

<p>Why do this separately?  Instead, put it in the <code>j</code> loop, at the end.  </p>

<pre><code>            sw.attach(*r);
</code></pre>

<p>Note that you can do this even if you put it in <code>rects</code> as well.  </p>

<p>For this code, you don't need <code>rects</code> at all.  Perhaps you're planning on using it later, but you don't really need it now.  </p>

<p>In C++, when you use the <code>new</code> operator, the memory remains allocated until you explicitly <code>delete</code> it.  You may want to use <a href="https://stackoverflow.com/a/106614">smart pointers</a>.  Those would work more like you think, with garbage collection when there are no references left.  </p>

<p>Also, if you hadn't used <code>new</code> but instead created a local variable that would have been automatically destroyed, putting it in <code>rects</code> wouldn't have worked.  The <code>rects</code> vector would have just contained a bunch of references to memory that no longer represented what it had when it was created.  </p>
    </div>