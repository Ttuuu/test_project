<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>In places where the type is obvious (or irrelevant) then feel free to use <code>var</code> instead of the type name. Also, consider not naming your variable after the type; this is also generally not necessary.</p>

<p>I also don't think that you need to make <code>props</code> a list.</p>

<p>A trailing ampersand in the querystring is <a href="https://stackoverflow.com/questions/6663362/is-a-trailing-ampersand-legal-in-a-url">perfectly legal</a>, so no need to special case it. You can handle it with <code>String.Join</code> though (see my last version below).</p>

<p>Lastly, since you're already using Linq I figure you can go all of the way. You can merge some of your checks into the <code>Where</code> check as well to simplify this. </p>

<pre><code>public static string ToQueryString(this object obj)
{

    var qs = new StringBuilder("?");

    var objType = obj.GetType();

    objType.GetProperties()
           .Where(p =&gt; Attribute.IsDefined(p, typeof(QueryStringAttribute)) &amp;&amp; p.GetValue(obj, null) != null)
           .ForEach(p =&gt; qs.Append($"{Uri.EscapeDataString(p.Name)}={Uri.EscapeDataString(p.GetValue(obj).ToString())}&amp;"));

    return qs.ToString();
}
</code></pre>

<p>I ended up keeping the <code>ToList</code> here so I could use the <code>ForEach</code>, but removing that and just looping is fine too.</p>

<pre><code>public static string ToQueryString(this object obj)
{

    var qs = new StringBuilder("?");

    var objType = obj.GetType();

    var properties = objType.GetProperties()
                            .Where(p =&gt; Attribute.IsDefined(p, typeof(QueryStringAttribute)) &amp;&amp; p.GetValue(obj, null) != null);

    foreach (var prop of properties)
    {
        var name = prop .Name;
        var value = prop .GetValue(obj);

        qa.Append($"{Uri.EscapeDataString(name)}={Uri.EscapeDataString(value)}&amp;"));
    }
    return qs.ToString();
}
</code></pre>

<p>Ultimately, I think the cleanest method is to use <a href="https://msdn.microsoft.com/en-us/library/dd783876(v=vs.110).aspx" rel="noreferrer"><code>String.Join</code></a> and pass the enumerable as the argument. It gets a little long, but there are plenty of ways to change the styling if you don't like that.</p>

<pre><code>public static string ToQueryString(this object obj)
{

    return string.Join("&amp;", obj.GetType()
                               .GetProperties()
                               .Where(p =&gt; Attribute.IsDefined(p, typeof(QueryStringAttribute)) &amp;&amp; p.GetValue(obj, null) != null)
                               .Select(p =&gt; $"{Uri.EscapeDataString(p.Name)}={Uri.EscapeDataString(p.GetValue(obj).ToString())}"));
}
</code></pre>
    </div>