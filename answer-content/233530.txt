<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I would take the show(Int-&gt;[Char]) shortcut instead of going the zero-prefixing read([Char]-&gt;Int) roundabout:</p>

<pre><code>count[from,to]=
 sum[1|
  i&lt;-[from..to],
  let s=show i,
  any(==2)[length g|g&lt;-group s],
  s==sort s]
</code></pre>

<p>Or a little more efficiently assembled:</p>

<pre><code>sorted [a, b] = a &lt;= b
sorted (a:b:c) = sorted [a, b] &amp;&amp; sorted (b: c)
sorted _ = True
duplicate s = [ ] &lt; [2 | [_,_] &lt;- group s]
good s = sorted s &amp;&amp; duplicate s
count [min, max] = sum [1 | i &lt;- [min..max], good(show i)]
</code></pre>

<p>Or single-scanned:</p>

<pre><code>good (pair, span, max, rest) = 
   if rest == 0 then pair || span == 2 else
    let (q, r) = quotRem rest 10
     in case compare r max of
      GT -&gt; False
      EQ -&gt; good (pair, span + 1, r, q)
      LT -&gt; good (pair || span == 2, 1, r, q)
count min max =
 sum [1 | i &lt;- [min..max], good(False, 0, 9, i)]
</code></pre>

<p>When referencing the original codeadvent instead of the codereview specification, this diverts to a calculation of 4795 feasible passwords in one million combinations:</p>



<pre class="lang-hs prettyprint-override"><code>import Data.List
main=print$sum[1|i&lt;-[1000000..1999999],s&lt;-[tail.show$i],s/=nub s,s==sort s]
</code></pre>

<p><a href="https://tio.run/##y0gszk7Nyfn/PzO3IL@oRMElsSRRzyezuIQrNzEzz7agKDOvRKW4NDfasCbTRjfa0AAM9PQMLcEgVqcYKFqSmJmjV5yRX66SCRTQt80rTVIo1im2tS0GGVkc@/8/AA" rel="nofollow noreferrer" title="Haskell – Try It Online">Try it online!</a></p>

<p>If 000000 and its likes are no legal six-digit numbers the password space reduces to 2919 in 900000:</p>



<pre class="lang-hs prettyprint-override"><code>import Data.List
main=print$sum[1|
 i&lt;-[100000..999999],
 s&lt;-[show$i],s/=nub s,s==sort s]
</code></pre>

<p><a href="https://tio.run/##y0gszk7Nyfn/PzO3IL@oRMElsSRRzyezuIQrNzEzz7agKDOvRKW4NDfasIZLIdNGN9rQAAT09CzBIFaHS6EYKFqckV@ukhmrU6xvm1eapFCsU2xrWwwyrzj2/38A" rel="nofollow noreferrer" title="Haskell – Try It Online">Try it online!</a></p>

<p>But the codeadvent challenge asks to count (&gt;=2) group occurrences upfront and then upon success to count the exactly (==2) group occurrences in an unambiguous range:</p>



<pre class="lang-hs prettyprint-override"><code>puzzle=[156218..652527]
v(0,_)2_=[1,1];v(0,_)1x=x;v(0,_)_[_,z]=[1,z]
v(n,m)s x=let(q,r)=quotRem n 10 in case compare r m of
 GT-&gt;[0,0];EQ-&gt;v(q,r)(s+1)x;LT-&gt;v(q,r)1$v(0,0)s x
instance Num a=&gt;Num[a]where
 (+)=zipWith(+); (*)=zipWith(*); (-)=zipWith(-);
 abs=map abs; signum=map signum; fromInteger=repeat.fromInteger;
main=print$sum[v(i,9)0[0,0]|i&lt;-puzzle]
</code></pre>

<p><a href="https://tio.run/##TZDfS8MwEMff@1fcwx6aLR1NoVOJ2ZuIIIIy8KGUEsttCzZpl6S1FP/32m7KfLrv537fHaX7xKoax6YdhgpFxtJNwm7X602apMlNHnRhTAuSFFOEspxfkPWi/5VFVtAhn6PDnGyoJg56UaEPT9QScWpr/4YaDLAYlIFSOoSy1o20CBY01PsAHnfRNotpnPOH12jbnStDt2Kk58@7PwdbzBPjuX2gjPPSlAgvrQYptpPJZP51RIsBhCsiBtW8K3@cJIdweeXlzNGVI8IDkB9OaNnMloNTB9PqM18kh72t9ZPxeEArLDYo/fqfiwdaKiMaq4xfuGmRLlT0jsTng77VfXR5bT6OPw" rel="nofollow noreferrer" title="Haskell – Try It Online">Try it online!</a></p>
    </div>