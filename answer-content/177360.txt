<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Normally I take the time to study Mike Brant's answers (because they are so frequently educational to me), but this time it was <em>tl;dr</em>.</p>

<p>If this was my project, I'd specifically/exclusively target the "long" strings with regex to reduce overall handling in the task.  My pattern uses <code>\S{40,}</code> to target only 40 or more non-white-space characters as your method does.  If you wish to be more specific about valid characters (perhaps exclude punctuation), you might use a character class or negated character class, but I can't make a call on that give your posted information.</p>

<p>Yes, regex is notoriously less efficient than simple string functions, but the substring targeting advantage in using it in this case may likely tip the scale.</p>

<p>Code: (<a href="http://sandbox.onlinephpfunctions.com/code/25e90872c4117db7ddd169787c9ca269582e2fad" rel="nofollow noreferrer">Demo</a>)</p>

<pre><code>function chunkify($m) {
    return wordwrap($m[0], 8, " ", true);
}

$text = "Thisis39charactersandshouldstaytogether Thisisover39characterssoitmustbechunked!";
echo preg_replace_callback('/\S{40,}/', 'chunkify', $text);
</code></pre>

<p>Like your method would produce, this is the output:</p>

<pre><code>Thisis39charactersandshouldstaytogether Thisisov er39char actersso itmustbe chunked!
</code></pre>

<p>*notice the difference if you change <code>\S</code> to <code>\w</code>.</p>

<p>Depending on the length and content of your input string, this will be a better approach because you don't have to explode on every space, process each element, and implode.  This approach seem very clean and direct to me.</p>

<p>If you like one-liners, here is the equivalent:</p>

<pre><code>echo preg_replace_callback('/\S{40,}/', function($m) { return wordwrap($m[0], 8, " ", true); }, $text);
</code></pre>

<p>If you want variable control:</p>

<pre><code>$min_length=40;
$chunk_size=8;
echo preg_replace_callback('/\S{'.$min_length.',}/', function($m) use ($chunk_size) { return wordwrap($m[0], $chunk_size, " ", true); }, $text);
</code></pre>

<p>Please do some realist benchmarks with the input strings that may hit your code and let me know how this fairs (I'm curious).</p>
    </div>