<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Review of your Godbolt-fu: <a href="https://godbolt.org/z/doD3Ld" rel="noreferrer">https://godbolt.org/z/doD3Ld</a></p>

<ul>
<li><p>You can change the language from "C++" to "C" via the dropdown in the upper right corner of the source-code-editor pane.</p></li>
<li><p>You wanted to be using "gcc (trunk)", not "gcc (modules)", anyway.</p></li>
</ul>

<hr>

<p>The biggest contributor to running time <em>must</em> be that <code>uint8_t digit</code> is being provided as a runtime parameter instead of a compile-time parameter. But your benchmark only ever calls <code>LongNumConstMult</code> with <code>9</code>, <code>8</code>, <code>7</code>, and <code>3</code>. You should benchmark what happens if you write four different versions of the code: one with <code>static const int digit = 9;</code> at the top, one with <code>static const int digit = 8;</code>, and so on. Maybe that won't meet your design requirements, but it will give you a nice bound on what kind of improvement might be possible.</p>

<p>I infer that maybe you only need to handle 10 different digits. In that case, you could implement the runtime-parameterized <code>LongNumConstMult</code> as</p>

<pre><code>void LongNumConstMult(uint8_t *V, size_t N, uint8_t digit)
{
    switch (digit) {
        case 0: return LongNumSetTo0(V, N);
        case 1: return;  // no-op
        case 2: return LongNumConstMult2(V, N);
        case 3: return LongNumConstMult3(V, N);
        [...]
        case 8: return LongNumConstMult8(V, N);
        case 9: return LongNumConstMult9(V, N);
    }
}
</code></pre>

<p>I predict that "one branch at the beginning, followed by many constant multiplications in a loop" might well beat "many non-constant multiplications in a loop."</p>

<hr>

<blockquote>
  <p>It's fine for the solution to use intrinsics or other specialized techniques</p>
</blockquote>

<p>What about making <code>V</code> an array of <code>uint16_t</code>, <code>uint32_t</code>, <code>uint64_t</code>, or even <code>__uint128_t</code>? Even if <code>V</code> remains <code>uint8_t</code>, could you type-pun it to load 8 or 16 bytes at a time and do the multiplication at that width? (What is the native width of your machine?)</p>

<hr>

<p>Here's some code that's in C++, so not directly applicable to your case, but you might find it useful: <a href="https://quuxplusone.github.io/blog/2020/02/13/wide-integer-proof-of-concept/" rel="noreferrer">https://quuxplusone.github.io/blog/2020/02/13/wide-integer-proof-of-concept/</a>
The code itself uses some x86 compiler intrinsics that may be relevant to your interests.</p>
    </div>