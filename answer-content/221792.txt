<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You are not describing the business logic, so for class <code>User</code> that you provided it's possible to give only very general recommendations.</p>

<p>Do not use Authentication in the Model, it's not understandable. Use it in controller or even better in Route:</p>

<pre><code>Route::group(['middleware' =&gt; ['web', 'auth']], function () {
   //put here all routes that need of authenticated user 
});
</code></pre>

<p>It will redirect Guests to login page.</p>

<p>The methods for models Course, Lesson, Classroom and Notification are more proper to put into appropriate models. In model class User remain just methods for foreign keys where you used hasMany() relation.</p>

<p>Basing on structure as I offer you'll get data from Models using Controllers and not like now using one 'global' model.</p>

<p>Method <code>courseEntries()</code> is good in controller for getting users with course entries as:</p>

<pre><code>$usersWithCourseEntries = User::with('courseEntries')-&gt;get();
</code></pre>

<p><a href="https://laravel.com/docs/5.8/eloquent-relationships#one-to-many" rel="nofollow noreferrer">Refer to</a>.
Also remember, this query will return from DB all users who have course entries and there may be a huge number of results.</p>

<p>Using this method <em>in model</em> as you made:</p>

<pre><code>public function lastCourseEntry() {
        $this-&gt;courseEntries()-&gt;orderBy('last_interaction', 'DESC')-&gt;first();
    }
</code></pre>

<p>may drive your program to fail. Maybe it's a <em>bottleneck</em> that gives you 4 seconds query execution, but it's just assumption. I didn't try it.</p>

<p>Next:</p>

<p>If you need data returned by some method, for example, <code>coursesEntriesEnded()</code> and in the same controller the data like <code>lastCourseEntryEnded()</code> as last record of data set and similar operations for other models you may not to call these both methods and use something like this to get data from collection that you already have:</p>

<pre><code>$courseModel = new Course();
$endedCourses = $courseModel-&gt;coursesEntriesEnded;
$lastCourseEntryEnded = $endedCourses-&gt;orderBy('last_interaction')-&gt;last();
</code></pre>

<p>it will reduce the DB queries count.</p>

<p>Of course this review is not complete, but for deeper analysis it's needed to know tasks, business logic and to see the rest code of app.</p>
    </div>