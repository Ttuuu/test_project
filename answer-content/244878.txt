<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Seems like you already incorporated a few of the suggestions from back when this was on StackOverflow, e.g. changing the inner loop to <code>max</code>. However, you do so in a very inefficient way:</p>
<ul>
<li>you create a slice of the list, O(n) time and space</li>
<li>you get the <code>max</code> of that slice, O(n) time</li>
<li>you get the <code>index</code> of that element, O(n) time</li>
</ul>
<p>Instead, you can get the <code>max</code> of the <code>range</code> of indices, using a <code>key</code> function for comparing the actual values at those indices:</p>
<pre><code>largest = max(range(0, lastUnsortedInteger+1), key=arr.__getitem__)
</code></pre>
<p>This way, this step has only O(n) time (for Python 3).</p>
<p>Some other points:</p>
<ul>
<li>the <code>an</code> parameter (the length of the array/list) is not necessary, you can use <code>len</code></li>
<li>in my opinion, it is a bit simpler looping from first to last index, and using <code>min</code> instead of <code>max</code> accordingly</li>
<li>since the swap is a single line now and only used once, we could inline this directly into the sorting function</li>
<li>the function modifies the list in-place, so no <code>return</code> is needed and might lead users to expect that the function does not modify the list but create a sorted copy instead</li>
<li>technically, <code>arr</code> is not an array but a <code>list</code>, and you might prefer <code>snake_case</code> to <code>camelCase</code> (it's "Python" after all)</li>
</ul>
<p>My version:</p>
<pre><code>def selection_sort(lst):
    for i in range(len(lst) - 1):
        k = min(range(i, len(lst)), key=lst.__getitem__)
        lst[i], lst[k] = lst[k], lst[i]
</code></pre>
<p>Needless to say, for all practical purposes you should just use <code>sorted</code> or <code>sort</code>.</p>
    </div>