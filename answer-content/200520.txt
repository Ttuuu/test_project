<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Instead of hardcoding the compression scheme (and possibly compressing a <code>.tar.gz</code> file using BZIP2 as you do), you should try to infer that information. Note that <code>tarfile</code> let you open a compressed file without knowing the compression scheme using <code>tarfile.open(filename, 'r:*')</code> but there is no equivalent for writing the archive.</p>

<p>Since the compression scheme understood by the <code>tarfile</code> module are usual extensions of the files, inspecting the <a href="https://docs.python.org/3/library/pathlib.html#pathlib.PurePath.suffixes" rel="nofollow noreferrer">suffixes</a> of <code>output_path</code> should be enough:</p>

<pre><code>def get_compression(filename):
    suffixes = Path(filename).suffixes
    tar, *compression = (s.lstrip('.') for s in suffixes)

    if tar == 'tgz':
        if compression:
            raise RuntimeError('Too much suffixes, cannot infer compression scheme from {}'.format(''.join(suffixes)))
        return 'gz'

    if tar != 'tar':
        raise RuntimeError('Not a tar archive')

    if not compression:
        return ''

    try:
        compression, = compression
    except ValueError:
        raise RuntimeError('Too much compression scheme: {}'.format(', '.join(compression))) from None
    else:
        return compression
</code></pre>

<p>Now you can use <code>compression = get_compression(output_path)</code> and then open the tar file using <code>tarfile.open(&lt;name&gt;, 'r:{}'.format(compression))</code> and open the file for writing using <code>tarfile.open(&lt;name&gt;, 'w:{}'.format(compression))</code>.</p>

<p>Note that I used <code>RuntimeError</code> here but you should probably come up with something less generic.</p>
    </div>