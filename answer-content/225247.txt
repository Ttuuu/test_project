<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Review</h3>

<ul>
<li>Your function skips until the heading is found and than takes element until the next heading. Perhaps we could split these methods up to make them <strong>reusable</strong>. </li>
<li>Try to avoid <code>var</code> (undesired scope), prefer <code>let</code> or <code>const</code> instead.</li>
<li>Prefer a Tree data structure over flat list for hierarchical data.</li>
</ul>

<h3>Refactored for Reusability</h3>

<p>Skip items while a predicate is true.</p>

<pre><code>  function skipWhile(items, predicate) {
    let ok = false;
    return items.filter((value, index, array) =&gt; {
      if (!ok &amp;&amp; !predicate(value)){
        ok = true;
      }
      return ok;
    });
  };
</code></pre>

<p>Take items while a predicate is true.</p>

<pre><code>  function takeWhile(items, predicate) {
    let ok = true;
    return items.filter((value, index, array) =&gt; {
      if (ok &amp;&amp; !predicate(value)){
        ok = false;
      }
      return ok;
    });
  };
</code></pre>

<p>The OP method:</p>

<pre><code> function getLines (headingId) {
    let lines = skipWhile(data, v =&gt; v.id != headingId);
    lines.shift(); // we don't want the heading
    lines = takeWhile(lines, v =&gt; !v.isHeading);
    return lines;
  }
</code></pre>

<p>And verification:</p>

<pre><code>  console.log(getLines(9).map(x =&gt; x.description))
</code></pre>

<p>Yielding:</p>

<blockquote>
  <p>(3) [ "Blah 7" , "Blah 8" , "Blah 9" ]</p>
</blockquote>

<p>You could also create these methods as prototype extensions on <code>Array</code> or refactor them to become generator functions (with <em>yield</em> syntax). I am sure these methods could get optimized for performance somehow.</p>
    </div>