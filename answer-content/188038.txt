<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I've actually written a script to do the same thing myself. My tips:</p>

<h1>Advice</h1>

<ul>
<li><p>I wouldn't use <code>git branch</code>, its output is only meant to be human readable (in git parlance, it's part of git's <a href="https://git-scm.com/book/en/v2/Git-Internals-Plumbing-and-Porcelain" rel="nofollow noreferrer">porcelain</a>). A better suited command is <a href="https://git-scm.com/docs/git-for-each-ref" rel="nofollow noreferrer"><code>git for-each-ref</code></a> which outputs its data in a machine readable format (part of git's 'plumbing').</p></li>
<li><p>I'd also be more explicit about which branch you care about being merged into. I believe by default <code>git branch --merged</code> will show you all branches already merged into the current branch. That works if you're on <code>master</code> or whatever your main/trunk/integration branch is. But, if you happen to be on a different branch, you'll end up deleting a bunch of branches that you didn't mean to.</p></li>
<li><p>There's also no need to save the branch names to a file, just operate on them iteratively.</p></li>
<li><p>Make sure you're not deleting your main branch (it will show as merged into itself).</p></li>
<li><p>I also wouldn't just willy-nilly delete the branches without asking the user first.</p></li>
<li><p>I'd also use bash's ability to stop immediately when any command has an error.</p></li>
</ul>

<h1>Putting it all together</h1>

<p>Stop the script immediately on any command failure:</p>

<pre><code>set -e
</code></pre>

<p>To get the "main" branch of your repo you can do:</p>

<pre><code>main_branch=$(git rev-parse --abbrev-ref HEAD)
</code></pre>

<p>To get the local branches that have been merged into your main branch:</p>

<pre><code>git for-each-ref --merged "${main_branch}" --format '%(refname:short)' 'refs/heads/'
</code></pre>

<p>Now you'll want to iterate over that list. Git branch names are usually safe from oddball characters that might mess with shell parsing, so we could probably do:</p>

<pre><code>for branch in $(git for-each-ref --merged "${main_branch}" --format '%(refname:short)' 'refs/heads/') ; do
  # something here
done
</code></pre>

<p>I've found to be more explicit that we're dealing with one entry per line, and to take the entire line as the branch name no matter what characters we might find there, the following form is better:</p>

<pre><code>while read branch ; do
  # something here
done &lt; &lt;(git for-each-ref --merged "${main_branch}" --format '%(refname:short)' 'refs/heads/')
</code></pre>

<p>Now, what code do we put inside the loop? Well, first we'll want to make sure we don't delete the main branch:</p>

<pre><code>  test "${main_branch}" = "${branch}" &amp;&amp; continue
</code></pre>

<p>Build the delete branch command</p>

<pre><code>  cmd="git branch -d '${branch}';"$'\n'
</code></pre>

<p>Ask the user about running the delete command (<a href="http://compgroups.net/comp.unix.shell/fixing-stdin-inside-a-redirected-loop/400460" rel="nofollow noreferrer">make sure we read from the terminal</a> since we're inside the while loop which is reading from the <code>git for-each-ref</code> command):</p>

<pre><code>  read -p "${cmd}Execute(y/N)? " run &lt; /dev/tty
</code></pre>

<p>Only if the user responded with exactly 'y' do we run the command:</p>

<pre><code>  test "${run}" = "y" &amp;&amp; eval "${cmd}"
</code></pre>

<h1>The whole shebang</h1>

<pre><code>#!/usr/bin/env bash

set -e

main_branch=$(git rev-parse --abbrev-ref HEAD)

while read branch ; do
done &lt; &lt;(git for-each-ref --merged "${main_branch}" --format '%(refname:short)' 'refs/heads/')
  test "${main_branch}" = "${branch}" ] &amp;&amp; continue

  cmd="git branch -d '${branch}';"$'\n'
  read -p "${cmd}Execute(y/N)? " run &lt; /dev/tty
  test "${run}" = "y" &amp;&amp; eval "${cmd}"
done &lt; &lt;(git for-each-ref --merged "${main_branch}" --format '%(refname:short)' 'refs/heads/')
</code></pre>

<h1>Notes:</h1>

<p>Now, if those local branches that you deleted had remote branches that should also be deleted, you'd want to do something like:</p>

<pre><code># Get the remote name of the main branch, probably just 'origin'
remote=$(git config "branch.${main_branch}.remote")

# Then inside the loop, you'd do something like this:
git push --delete "${remote}" "${branch}"
</code></pre>

<p>But it's a little more complicated because you'd want to first find out if this branch even has a remote set up, what the actual remote branch name is (could be different from the local), if its <code>HEAD</code> is at (or an ancestor of) the local branch, etc.</p>
    </div>