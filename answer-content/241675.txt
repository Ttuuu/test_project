<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I am a javascript beginner, let me know the ways how I can improve my answer; every suggestion is welcome. </p>

<p>The problem can be divided in two parts:</p>

<ol>
<li>Part 1 : how to calculate number of pairs from a set of elements</li>
<li>Part 2 : given one string , extract all the substrings inside the
main string and find calculate the number of pairs of strings that
are anagrams one of the other.</li>
</ol>

<h2>Part1</h2>

<p>The number of the pairs from a set of <code>n</code> elements can be calculated with the formula npairs = n! / (2 * (n - 2)!) = (n * (n - 1)) / 2, below one function to calculate the number of pairs:</p>

<pre><code>function countPairs(n) {
    return (n * (n - 1)) / 2;
}
</code></pre>

<p>The <code>countPairs</code> function will return the numbers of pairs from a set of <code>n</code> elements and it is used in the part2.</p>

<h2>Part2</h2>

<p>To store anagrams you can use a <code>Map</code> structure storing anagrams and their occurrences , so if you have for example two strings <code>ab</code> and <code>ba</code>  the <code>map['ab']</code> will be <code>2</code>. Once you stored all the substrings inside your <code>map</code> you will iterate over it to return the sum of the pairs found. So for example if you have in your map  <code>map['ab'] = 3</code> (three substring anagrams found) the number of pairs will be determined calling <code>countPairs(3)</code>. If you have for example <code>map['cc'] = 1</code> then it is not possible to create pairs and it will excluded from the calculus of the sum of the pairs. Below the <code>sherlockAndAnagrams</code> function:</p>

<pre><code>function sherlockAndAnagrams(s) {
    const map = new Map();
    const n = s.length;
    for (let i = 0; i &lt; n; ++i) {
        for (let j = i; j &lt; n; ++j) {
            const sub = s.substring(i, j + 1);
            const key = sub.split('').sort().join('');
            if (map.has(key)) {
               map.set(key, map.get(key) + 1); 
            } else {
               map.set(key, 1);
            }
        }
    }  //done , substrings stored in the map

    //Check all map values and calculate number of pairs 
    //for every key with an associate value &gt; 1
    let result = 0;
    for (const [key, value] of map) {
        if (value &gt; 1) {
         result += countPairs(value);    
        }
    }
    return result;
}
</code></pre>

<p>I tried it on the Hackerrank site, passing all tests.</p>
    </div>