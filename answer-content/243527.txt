<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>When accessing array elements, don't use the clunky <code>*(board + i)</code> notation. Use <code>board[i]</code>. (You're already doing this in some places, and you should be consistent.)</p>

<p>Eliminate the use of global <code>i</code> and <code>j</code> variables as loop variables. Use local variables instead. This can help with optimization, and avoids problems where a function called while in a loop in another function can mess up the latter's looping.</p>

<p>There is no verification that the <code>startPos</code> string in <code>initialPosition</code> is long enough. You can read past the end of it. If the string is not long enough, you can either set the rest of the elements to 0 (false) and continue, or report an error. Rather than computing the index into <code>startPos</code> all the time, you can increment the pointer with <code>*startPos++</code>. This would also make it easier to check for reaching the end of the string.</p>

<p>You need to clarify to yourself if your <code>board</code> matrix is row major or column major. Your usage in most of the code has it as column major, but your <code>printArray</code> function will display it transposed, with the columns running horizontally. While this is not apparent with a square board, you can see the difference when <code>width</code> does not equal <code>height</code>.</p>

<p>For readability, in <code>emptyBoard</code> your initialization of the board elements should be <code>board[i][j] = false;</code>. You don't need to use the <code>c</code> local variable. And you should check the value returned by <code>malloc</code> for errors (it can return NULL). The two loops here can be combined into one, by initializing each new allocated <code>board[i]</code> element when it is allocated.</p>

<p><code>printArray</code> can be simplified with <code>puts(board[i][j] == 0 ? "   " : " o ");</code>. Or, since <code>board[i][j]</code> is a <code>bool</code> (which will have a value of 0 or 1), you can use an array reference to pick which string to output.</p>

<p>The <code>step</code> function can make use of a bool's <code>0</code> or <code>1</code> values by using addition instead of if statements.  <code>neighbors += board[i][j];</code> The assignments to the new board elements should use the predefined <code>true</code> and <code>false</code> macros rather than typecasting integer values. Then we can compress that big nested if chunk with one line:</p>

<pre><code>newboard[i][j] = neighbors == 3 || (neighbors == 2 &amp;&amp; board[i][j] == true);
</code></pre>

<p>The way to avoid having all those <code>if</code> checks when updating the board is to create board with a border around it. This border (top, left, bottom, and right) will be one extra row/column that is always 0. It is never written to. So during the board you can access adjacent elements without having to check for out-of-bounds array accesses. Appropriate changes to your loop indexing would need to be made (e.g., looping from 1 to width inclusive).</p>

<p>In <code>wait</code>, the typical way to compute the end time is as an offset from the already saved <code>now</code>, so you'd have <code>int then = now + (CLOCKS_PER_SEC * s);</code>. This avoids a second call to a library function that will probably return the same value, and avoid longer delays if the value returned has increased (possibly because the system is busy and some other process was using the CPU).</p>

<p>The indentation of the string passed to <code>initialPosition</code> is slightly off. This string could be potentially be stored in a static or global variable, or read from input (a file or from the command line).</p>

<p>Note that many console windows these days do not support the ANSI escape sequences. A comment to explain what they are doing would be helpful for future readers. I remember what the <code>J</code> escape sequence is, but not <code>H</code>.</p>
    </div>