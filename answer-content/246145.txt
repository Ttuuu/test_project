<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'm looking at just the view model for this review... You can make this code better by getting rid of all the relays and subjects. These are supposed to be rarely used but you are using them for every property it seems.</p>
<p>The key here though is to isolate each piece of output and provide it with its own subscription.</p>
<p>Also, I noticed that most of the code in the view model isn't getting used, so I removed the unused bits.</p>
<pre class="lang-swift prettyprint-override"><code>class PatientCaregiversViewModel π {
    struct Action {
        let fetchCaregivers: Observable&lt;Void&gt;
        let inviteCaregiver: Observable&lt;Void&gt;
    }

    struct State {
        let emptyDataSetState: Observable&lt;DataState&gt;
        let invitTapped: Observable&lt;Void&gt;
    }

    let dataProvider: AlternateCaregiverRemoteRepo

    init(dataProvider: AlternateCaregiverRemoteRepo) {
        self.dataProvider = dataProvider
    }

    func configure(action: Action) -&gt; State {
        let caregivers = Observable.merge(action.fetchCaregivers, Observable.just(()))
            .flatMapLatest { [dataProvider] in dataProvider.getAllCaregivers() }
            .share(replay: 1)

        let emptyDataSetState = Observable.merge(
            action.fetchCaregivers.map { DataState.loading(title: "Loading Caregivers", message: "Please wait while we load caregivers for you.") },
            caregivers.map { _ in DataState.failed(title: "Failed to get Caregivers", message: "Failed to get Caregivers") } // this seems quite wrong. Why aren't you inspecting the emission of getAllCaregivers() to see if the data is correct? Why aren't you using the information for anything?
        )

        let inviteTapped = action.inviteCaregiver
        return State(emptyDataSetState: emptyDataSetState, invitTapped: inviteTapped)
    }
}
<span class="math-container">```</span>
</code></pre>
    </div>