<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Although I don't know C#, I can make some observations based on other C-family languages.</p>
<p>Firstly, the code appears incomplete.  I'll have to assume that this is the body of a function declared to accept an array <code>A</code> and return a boolean.</p>
<hr>
<pre><code>Array.Sort(A);
</code></pre>
<p>Obviously, sorting is O(<em>n</em> log <em>n</em>) in the general case, so the method can't scale better than that.</p>
<hr>
<pre><code>if(A[0] == 1 &amp;&amp; A.Length == 1) return 1;
if(A[0] != 1) return 0;
</code></pre>
<p>There's no need to test <code>A[0]</code> twice, if we swap the order of these tests.  But we do need to check that <code>A</code> is not empty before accessing <code>A[0]</code>.</p>
<hr>
<pre><code>int n = 0;
</code></pre>
<p>What's <code>n</code> for?  It's assigned but never used.</p>
<hr>
<pre><code>for(int i = 0; i &lt; A.Length; i++)
{    
    if(i &lt; A.Length - 1)
    {
         /// code
    }
}
</code></pre>
<p>That simplifies to</p>
<pre><code>for(int i = 0;  i &lt; A.Length - 1;  i++)
{
     /// code
}
</code></pre>
<hr>
<p>The whole loop and the prior tests (for the <code>A.Length &lt;= 1</code> cases) simplifies to just</p>
<pre><code>for (int i = 0;  i &lt; A.Length;  i++)
    if (A[i] != i+1)
        return 0;
return 1;
</code></pre>
<p>No need for those <code>A[0]</code> checks at all.</p>
<hr>
<h1>My version:</h1>
<pre><code>Array.Sort(A);
for (int i = 0;  i &lt; A.Length;  ++i)
    if (A[i] != i+1)
        return 0;
return 1;
</code></pre>
<hr>
<h1>Algorithm improvements</h1>
<p>As other answers hint, to get O(<em>n</em>) speed (at a cost of O(<em>n</em>) memory use), we'll want to allocate a bitmap of size <code>A.Length</code>, and populate the entries as we go.  We can exit early whenever we see an out-of-range value or a repeated value (i.e. an already set bit).  If no value causes early exit, then we must have seen every integer in the range exactly once.</p>
<p>That would look something like:</p>
<pre><code>// UNTESTED!
int N = A.Length;
bool[] b = new bool[N];
for (int i = 0;  i &lt; N;  ++i) {
     int x = A[i] - 1;
     if (x &lt; 0 || x &gt;= N || b[x])
         return 0;
     b[x] = true;
}
return 1;
</code></pre>
    </div>