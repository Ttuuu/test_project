<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Since you tagged this question with <code>typescript</code>, I would say you could benefit greatly from making your keyboard and scale representations into classes.</p>

<hr>

<p>Since there are different keyboard layouts, I wonder if it makes sense to generalize the functionality on creating a keyboard based on standard keyboard configurations?</p>

<p>Your current logic to build keys seems basically hard-coded for standard 88 key keyboard. There is an odd mix of work that is happening before the main loop where keys are populated (setting the octave 0 keys) and after that main loop (setting the octave 8 key). I would strive to set all key values within the loop so this logic isn't disjointed like it currently is.</p>

<hr>

<p>In both pieces of logic, you might consider "rotating" the array of 12 notes to get to an appropriate starting position for working with the array based on the values input.  This could make your array interaction logic much cleaner, by avoiding the need to look for boundary conditions on the array (i.e. when you need to go back to index 0);</p>

<hr>

<p>You also have some fragility in your code around data input.  You really don't have anything here that validates or handles edge cases in input data (for example what if values like <code>a</code>, <code>ABm</code>, are passed to <code>getScale()</code>?). </p>

<p>Code like this:</p>

<pre><code>if(scaleName.indexOf("m") &gt; -1){
</code></pre>

<p>might be better to be made more specific like this:</p>

<pre><code>if(scaleName.indexOf("m") === 1) {
</code></pre>

<p>as there is only one index value where <code>m</code> should ever be encountered.</p>

<p>Alternately, I would consider a regex like <code>/^([A-G]b?)(m?)$/</code> to be able to validate the input string and capture the components of the string in one pass.</p>

<hr>

<p>I don't understand the need for both <code>KEYS</code> and <code>KEYS_NORMALIZED</code> in the scale code.  This is just the same array rotated, and considering you will have to rotate or transform the array given the specific input scale, why have two arrays that hold the same values?</p>

<hr>

<p>Some variable names seem confusing. For example:</p>

<ul>
<li>In the "piano" code, your <code>KEYS</code> constant might better be called <code>notes</code> or <code>keyNotes</code> or similar since this array is not the representation of the physical "keys" on the keyboard.</li>
<li>In <code>getScale()</code>, <code>keys</code> array is not dealing with the key of the scale or keys on a keyboard, but rather the notes in the scale, so perhaps <code>notes</code> might be a better name.</li>
<li>In <code>getScale()</code> the <code>major/minorSemiTones</code> variables might better be named <code>major/minroSemiToneIntervals</code>.</li>
</ul>

<hr>

<p>Putting it all together might yield something like:</p>

<pre><code>class Keyboard {
     static readonly standardKeyboardConfig = {
         49: {
             startKey: 'C',
             startOctave: 0,
             octaveBoundary: 'C'
         }
         61: {
             startKey: 'C',
             startOctave: 0,
             octaveBoundary: 'C'
         },
         76: {
             startKey: 'E',
             startOctave: 0,
             octaveBoundary: 'C'
         },
         88: {
             startKey: 'A',
             startOctave: 0,
             octaveBoundary: 'C'
         }
     }
     static readonly defaultKeyCount = 88;
     static readonly keyNotes = ["C", "Db", "D", "Eb", "E", "F",
         "Gb", "G", "Ab", "A", "Bb", "B"];
     readonly keys: string[];

     constructor(keyCount: number) {
         keyCount = keyCount || Keyboard.defaultKeyCount;
         if (keyCount in Keyboard.standardKeyboardConfig === false) {
             throw new RangeError('Invalid keyboard specified');
         }

         let config = Keyboard.standardKeyboardConfig[keyCount]; 
         let startKey = config.startKey;

         // first rotate the array of notes if needed
         let keyNotes = Keyboard.keyNotes;
         if(startKey !== keyNotes[0]) {
             let index = keyNotes.indexOf(startKey);
             keyNotes = keyNotes.slice(index, keyNotes.length)
                              .concat(keyNotes.slice(0, index));
         }

         // now build out keys with octave values
         let octave = config.startOctave;
         let octaveLength = keyNotes.length;
         let octaveBoundary = config.octaveBoundary;
         for (i = 0; i &lt; keyCount; i++) {
             let noteIndex = i % octaveLength;
             let note = keyNotes[noteIndex];
             if (i &gt; 0 &amp;&amp; note === octaveBoundary) {
                 octave++;
             }
             this.keys.push(note + octave);
         }
     }
}

// usage for default keyboard (a piano)
let piano = new Keyboard();
let keys = piano.keys;

class Scale {
    static readonly majorSemiToneIntervals = [2,2,1,2,2,2];
    static readonly minorSemiToneIntervals = [2,1,2,2,1,2];
    static readonly regex = /^([A-G]b?)(m?)$/;
    static readonly allNotes = ["A", "Bb", "B", "C", "Db", "D", "Eb",
        "E", "F", "Gb", "G", "Ab"];
    readonly name: string;
    readonly tonic: string;
    readonly isMinor: boolean = false;
    readonly notes: string[];

    constructor (scaleName: string) {
        // validate scale name and capture components
        let match = Scale.regex.match(scaleName);
        if(match === null) {
            throw new RangeError('Invalid scale name.')
        };           
        this.name = match[0];
        this.tonic = match[1];
        let intervals = Scale.majorSemiToneIntervals;
        if(match[2].length === 1) {
            this.isMinor = true;
            intervals = Scale.minorSemiToneIntervals;
        }

        // rotate the allNotes array
        let notes = Scale.allNotes;
        let index = notes.indexOf(this.tonic);
        if (index !== 0) {
            let notes = notes.slice(index, notes.length)
                             .concat(notes.slice(0, index));
        }

        // build notes for scale based on intervals;
        this.notes.push(notes[0]);
        noteIndex = 0;
        intervalIndex = 0;
        while (intervalIndex &lt; intervals.length) {
            this.notes.push(notes[noteIndex]);
            noteIndex = noteIndex + intervals[intervalIndex];
            intervalIndex++;
        }
    }   
}

// usage
let scale = new Scale('C');
let notesInScale = scale.notes;         
</code></pre>

<p>Is this more code?  Yes.  But, this code is more reusable, less fragile, and does not pollute the global namespace as your current code examples do.  All logic is encapsulated within the classes.</p>
    </div>