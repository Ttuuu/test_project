<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>It is indeed very simple and straightforward. The time complexity is however <span class="math-container">\$(O(\sqrt n)\$</span>. A binary search variation will do it in <span class="math-container">\$O(\log n)\$</span> time. Along the lines of the pseudocode:</p>

<pre><code>    while lo &lt; hi
        mid = lo + (hi - lo)/2
        square = mid * mid
        if square == n
            return true
        if square &lt; mid
            lo = mid
        else
            hi = mid
    return false
</code></pre>

<p>Depending on the expected magnitude of <span class="math-container">\$n\$</span> it may or may not worth the effort. In the interview setting (no restrictions on <span class="math-container">\$n\$</span>) I would go for the binary search.</p>

<hr>

<p><code>if</code> inside a tight loop usually hurts performance. Consider</p>

<pre><code>    while (n &gt; 0) {
        n -= i;
        i += 2;
    }
    return n == 0;
</code></pre>
    </div>