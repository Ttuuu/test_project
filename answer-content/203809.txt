<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Command-line tool behavior</h2>

<p>Don't contaminate <code>stdout</code>, which should be solely for the string-processing result.  Error messages and status reports should go to <code>stderr</code>.</p>

<p>In the usage message, what does <code>input</code> mean?  Is it a filename?  I think that <code>string</code> would be clearer.  Similarly, <code>maxwidth</code> would be clearer than <code>[n]</code>.  Note that by convention, the square brackets mean that it's an optional parameter, which it isn't.</p>

<p>Calling <code>exit(1)</code> from <code>main()</code> is overkill — <code>return 1</code> would suffice.</p>

<p>You can parse <code>argv[2]</code> as an integer using <code>atoi()</code>.  <code>COL_BOUND</code> is not a compile-time constant, so it should be named with lowercase.  Note that if <code>COL_BOUND</code> is 0, then you'll get an infinite loop, so some validation would be nice.</p>

<h2>Whitespace behavior</h2>

<p>What exactly is the specification of this program?  Here are three sample runs (with space (<code>␣</code>) and NUL (<code>␀</code>) characters made visible):</p>

<pre class="lang-none prettyprint-override"><code>$ ./fold "␣hello␣␣␣␣world" 5
hell
o␣␣␣␣
world
␀
Original string split into 4 parts (bound was 5)
$ ./fold "␣hello␣␣␣␣␣␣world" 5
hell
o␣␣␣␣
wor
ld␀
Original string split into 4 parts (bound was 5)
$ ./fold "␣␣hi␣mom" 2

hi
m
om
␀
Original string split into 5 parts (bound was 2)
</code></pre>

<p>The behavior is weird in certain ways:</p>

<ul>
<li>I see that the policy is to print each line with no leading whitespace.  But then why is the first line "hell" rather than "hello"?  Why does it print "wor" instead of "world"?  Why does it print "m","om" rather than "mo","m"?</li>
<li>If excess whitespace is considered insignificant, then in the third run, why is there an empty line at the beginning?</li>
<li>Sometimes there is trailing whitespace, sometimes there isn't.</li>
<li>You actually print the NUL character at the end.  (This bug is due to your <code>i &lt;= length(argv[1])</code> test, which should be <code>&lt;</code> instead.)  Sometimes that NUL character becomes its own extra line of output.</li>
</ul>

<h1>Implementation</h1>

<p>By convention, <code>main()</code> should be defined after the helper functions, so that you don't have to write forward declarations.</p>

<p>Your <code>length()</code> function is just a reimplementation of the standard <code>strlen()</code> function.  You call it every time you go through the main <code>while</code> loop, which is very inefficient.  Ideally, you should perform this task without measuring the length at all — it's possible to analyze the string in one single forward pass, stopping when you reach the NUL terminator.</p>

<p>Other than the useless <code>length()</code> function, all of the code is in <code>main()</code>, which makes it one very complex function.  One of the causes of your buggy behavior is that you try to do whitespace analysis (with <code>printed</code>) while printing, when it's clearly too late.</p>

<p>You have a <code>//print remaining characters</code> epilogue loop, which is not only ugly and repetitive, but also makes it hard to handle degenerate cases correctly (such as when the input is an empty string).</p>

<h2>Suggested solution</h2>

<p>I'd define a <code>nextline()</code> function to find the start and end of the next line.  Its design is vaguely inspired by the <a href="https://www.freebsd.org/cgi/man.cgi?strsep%283%29" rel="nofollow noreferrer"><code>strsep(3)</code> function in BSD's C library</a>.  Then, <code>main()</code> would just be responsible for handling the command-line parameters and printing the output.</p>

<pre><code>#include &lt;ctype.h&gt;
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;

/**
 * Finds the start and end of the next line, to be terminated at whitespace,
 * up to a certain length.
 *
 * First, s is adjusted to skip any leading whitespace.  Then, a suitable
 * line-breaking point is found and returned, such that the line is at most
 * maxlen characters long, and trailing whitespace is dropped.
 */
char *nextline(char **const s, size_t maxlen) {
    // Skip leading whitespace
    while (**s &amp;&amp; isspace(**s)) {
        (*s)++;
    }

    // Find last whitespace within the remaining string length and within
    // maxlen characters, but ignoring extraneous consecutive whitespace
    char *lastspace = *s + maxlen;
    for (char *p = *s; p &lt;= *s + maxlen; p++) {
        if (*p == '\0') {
            return p;
        }
        if (isspace(*p) &amp;&amp; !isspace(*(p - 1))) {
            lastspace = p;
        }
    }
    return lastspace;
}

int main(int argc, char *argv[]) {
    if (argc &lt; 3) {
        fprintf(stderr, "Usage: %s string maxwidth\n", argv[0]);
        return 1;
    }

    char *start = argv[1];
    int width = atoi(argv[2]);
    if (width &lt;= 0) {
        fprintf(stderr, "maxwidth must be positive\n");
        return 1;
    }

    int linecount = 0;
    for (char *end; end = nextline(&amp;start, width), *start; start = end) {
        // Temporarily NUL-terminate the line to print it
        char termchar = *end;
        *end = '\0';
        puts(start);
        *end = termchar;
        linecount++;
    }

    fprintf(stderr, "Split string into %d parts (bound was %d)\n",
            linecount, width);
}
</code></pre>
    </div>