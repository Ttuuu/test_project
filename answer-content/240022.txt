<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The next big improvement is also an algorithmic one. Rather than rotating a permutation <code>n</code> times, to check for fixed points, we can instead look the distribution of <code>(index-value) % n</code>. If two different elements of the permutation have the same value <code>x</code> for this, it means that rotating by <code>x</code> will produce 2 fixed points. This means that for each permutation, rather than doing <code>n</code> rotations (<code>O(n^2)</code>), we can instead hash all values of this quantity, and check for colsions (<code>O(n)</code>). </p>

<p>The result is </p>

<pre><code>def rotfixtest(sequence: List[int], points: int):
    """
    Tests if a sequence has `points` fixed points.
    """
    n = len(sequence)
    offsets = Counter()
    for index, value in enumerate(sequence):
        offsets[(index - value) % n] += 1
    most_common = offsets.most_common(1)
    if most_common[0][1] &gt;= points:
        return False
    return most_common[0][0]

def test(number: int) -&gt; Union[Tuple[int, str], Tuple[int, str, List[int]]]:
    """
    Run numerous tests for this code.
    """
    for f in perms(number):
        rotations = rotfixtest(f, 2)
        if rotations:
            return number, 'Counterexample found:', f, rotations
    return number, 'no counterexamples found'
</code></pre>
    </div>