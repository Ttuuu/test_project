<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><code>calcpath</code> should be <code>calc_path</code> <a href="https://www.python.org/dev/peps/pep-0008/#function-and-variable-names" rel="nofollow noreferrer">as per PEP8</a>. This seems like it's a name decided on by the challenge, but I thought I'd mention it.</p>

<hr>

<pre><code>_map = {"d": 1, "u": -1, "l": -1, "r": 1}
</code></pre>

<p>This should have a better name. "map" indicates that it's a mapping between things, but doesn't give any more information than that.</p>

<p>I'd change it to something like:</p>

<pre><code>DIRECTION_CHAR_TO_OFFSET = {"d": 1, "u": -1, "l": -1, "r": 1}
</code></pre>

<p>Capitalized to indicate that it's a constant. I'd also move it outside of <code>calc_path</code>. Its definition isn't dependent on anything within the function, and that function is quite long, so I think moving some stuff out would be a good idea.</p>

<p>Arguably, a <code>Enum</code> would be a better fit here as well if you wanted to be strict. Using strings as keys opens the door for accidental mistypes, although the only opportunity for it here is in the definition of <code>DIRECTION_CHAR_TO_OFFSET</code> since all the data is supplied by the challenge.</p>

<hr>

<p>The <code>replace("?", "{}")</code> bit should be taken out of the loop for performance reasons. It likely won't make any noticeable difference, but that part is entirely reliant on <code>s</code> which doesn't change, so there's no point in recalculating it repeatedly. There's also no reason to do a slice copy of the string before calling <code>replace</code> on it. <code>replace</code> returns a new string. Strings are immutable, so it can't modify <code>s</code>:</p>

<pre><code>move_mask = s.replace("?", "{}")
. . .
while True:
    . . .
    ss = move_mask.format(*moves)
</code></pre>

<hr>

<p>[AJ's <code>for</code> suggestion is a much better idea than what I'm about to propose. Just go with what he suggests. I'm going to keep this section though to indroduce <code>:=</code> in case you don't know about it.]</p>

<p>You can get rid of that <code>try</code> if you make use of Python 3.8's <a href="https://www.python.org/dev/peps/pep-0572/#syntax-and-semantics" rel="nofollow noreferrer">assignment expression</a>, and <code>next</code>'s second argument:</p>

<pre><code>while moves := next(move_combinations, None):
    . . .
</code></pre>

<p>When <code>move_combinations</code> is exhausted, <code>next</code> will return <code>None</code> which will end the loop. This isn't <em>exactly</em> equivalent as your original version since it isn't returning directly from the loop. It does behave the same though since there is nothing after the loop. I added a <code>return None</code> at the bottom though to comply with PEP8.</p>

<p>I won't say that I completely recommend this way since it requires the latest Python and uses new, fancy features. It does help reduce some bulk though.</p>

<hr>

<pre><code>DIRECTION_CHAR_TO_OFFSET.get(move)
</code></pre>

<p>Can simply be</p>

<pre><code>DIRECTION_CHAR_TO_OFFSET[move]
</code></pre>

<p>Again, this isn't exactly equivalent, but it acts the same here. I'd say though that using <code>[]</code> <em>is</em> better in this scenario. <code>get</code> will return <code>None</code> on a bad lookup (should one be allowed to happen due to a typo or something). With <code>None</code> returned, you'll attempt to add <code>None</code> to <code>current_x</code>, which will cause:</p>

<pre><code>TypeError: unsupported operand type(s) for +=: 'int' and 'NoneType'
</code></pre>

<p>Using <code>[]</code> though will cause a <code>KeyError</code>:</p>

<pre><code>KeyError: 'a'
</code></pre>

<p>I think the latter gives more useful debugging information than the former.</p>

<hr>

<pre><code>if current_x &lt; 0 or current_x &gt; 4:
    break
elif current_y &lt; 0 or current_y &gt; 4:
    break
</code></pre>

<p>This can make use of operator chaining if you're willing to add some negation to the condition:</p>

<pre><code>if not 0 &lt;= current_x &lt;= 4:
    break
elif not 0 &lt;= current_y &lt;= 4:
    break
</code></pre>

<p>And since those both result in the same operation, they can be combined:</p>

<pre><code>if not (0 &lt;= current_x &lt;= 4 and 0 &lt;= current_y &lt;= 4):
    break
</code></pre>

<p>I adjusted the condition a bit using one of <a href="https://en.wikipedia.org/wiki/De_Morgan%27s_laws" rel="nofollow noreferrer">DeMorgan's Laws</a>:</p>

<blockquote>
  <p>not (A and B) = not A or not B</p>
</blockquote>

<hr>

<hr>

<pre><code>import itertools
import numpy as np

DIRECTION_CHAR_TO_OFFSET = {"d": 1, "u": -1, "l": -1, "r": 1}

def calc_path(s):
    q_count = s.count("?")
    move_mask = s.replace("?", "{}")

    move_combinations = itertools.product(DIRECTION_CHAR_TO_OFFSET.keys(), repeat=q_count)

    while moves := next(move_combinations, None):
        arry = np.array([[0]*5 for i in range(5)])
        arry[0][0] = 1  # start at 0, 0

        current_x = 0
        current_y = 0

        ss = move_mask.format(*moves)

        for move in ss:
            if move in "lr":
                current_x += DIRECTION_CHAR_TO_OFFSET[move]
            elif move in "du":
                current_y += DIRECTION_CHAR_TO_OFFSET[move]

            if not (0 &lt;= current_x &lt;= 4 and 0 &lt;= current_y &lt;= 4):
                break
            elif arry[current_x][current_y]:
                break
            else:
                arry[current_x][current_y] = 1

        # check for completion
        if (current_x, current_y) == (4, 4):
            return ss

    return None

assert calc_path("???rrurdr?") == "dddrrurdrd"
assert calc_path("drdr??rrddd?") == "drdruurrdddd"
assert calc_path("??ddd??lrlddd?") == None
</code></pre>
    </div>