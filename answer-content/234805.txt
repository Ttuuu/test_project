<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>After getting user input, you check it by doing <code>decision == "Yes"</code>. This is pretty exact text to expect from the user. I'd at least upper-case their input, and unless you really needed them to be specific, only keep the first letter:</p>

<pre><code>decision = input("You guessed wrong, do you want to continue? Yes or No ")
std_decision = decision[:1].upper()  # [:1] discards all but the first letter

if std_decision == "Y":
   . . .
</code></pre>

<hr>

<p>In <code>coin_flip_game</code> you have</p>

<pre><code>guess_count = 1  #guesses set to 1 so that program considers 1st guess
</code></pre>

<p>Then later:</p>

<pre><code>if user_input != random_flip():
    guess_count += 1
    guesses.append(user_input)
    first_try = False
else:
    winner = True
</code></pre>

<p>You're only increasing <code>guess_count</code> if the guess was wrong. Regardless of if they were right or wrong though, they still made a guess. I think it makes more sense to add to the <code>guess_count</code> regardless, and start it at <code>0</code>.</p>

<p>But then you're also only adding to <code>guesses</code> on wrong answers too. If you change it to append to <code>guesses</code> on both right and wrong answers, you'll have this:</p>

<pre><code>guess_count = 0

. . .

guess_count += 1
guesses.append(user_input)

if user_input != random_flip():
    first_try = False

else:
    winner = True
</code></pre>

<p>Notice now though that <code>guess_count</code> will always be equal to the length of <code>guesses</code>, so it isn't needed. If you need to find out how many guesses were made, you can just do <code>len(guesses)</code>. <code>first_try</code> also isn't necessary. To check if it was their first guess or not, you can do:</p>

<pre><code>if len(guesses) == 0:
    . . .
</code></pre>

<p>Or, more idiomatically:</p>

<pre><code>if not guesses:  # "If no(t) guesses (have been made)"
    . . .
</code></pre>

<p>I think that whole game loop part should be taken out into it's own function though; beyond what you've already done. I'd have a function that returns a list of guesses made until a correct guess was made. With how you have it set up now, I'm going to disregard cancelling since that will require some broader changes to accommodate, and it's highly unlikely that the user will have to guess more than a few times.</p>

<pre><code>def guess_loop() -&gt; List[str]:
    guesses = []

    while True:  # We're just going to return, so we don't need a condition
        user_input = user_choice()
        guesses.append(user_input)

        if user_input == random_flip():
            return guesses  # Returning guesses means we won

        else:
            print("You guessed wrong. Try again.")

def coin_flip_game():
    print("Lets start! Begin by choosing:")
    guesses = guess_loop()

    if len(guesses) == 1:
        print("Congratulations, you guessed correctly on your first try!")

    else:
        print("Congratulations! After", len(guesses), "you guessed correctly!")
        print("Your guesses were: ", guesses)
</code></pre>

<p>The bulky bit was taken out so it can be dealt with as an isolated bit of code. To know the outcome of the game, all I care about (besides cancelling, which could be handled by returning <code>None</code>) is the list of guesses they made until they won. I can get all the information I need from just that. Needing to mix in <code>winner</code>, and <code>cancel</code> flags can suggest that that code should be moved out. By the time you're managing two or three flags to control execution in one block of code, it can become hard to follow.</p>

<hr>

<p><code>user_choice</code> can be cleaned up too. Again, you're using a condition to control a loop when I think returning directly from the loop leads to cleaner looking code:</p>

<pre><code>def user_choice():
    while True:
        user_input = input("Heads or Tails?").capitalize()  # Capitalize to give the user some leeway

        if user_input in {"Heads", "Tails"}:
            return user_input

        else:
            print("Invalid input.")
</code></pre>

<hr>

<p>After the above and some small formatting touchups, I'm left with:</p>

<pre><code>import random
from typing import List


def random_flip() -&gt; str:
    return random.choice(["Heads", "Tails"])


def user_choice() -&gt; str:
    while True:
        user_input = input("Heads or Tails?").capitalize()  # Capitalize to give the user some leeway

        if user_input in {"Heads", "Tails"}:
            return user_input

        else:
            print("Invalid input.")


def guess_loop() -&gt; List[str]:
    guesses = []

    while True:  # We're just going to return, so we don't need a condition
        user_input = user_choice()
        guesses.append(user_input)

        if user_input == random_flip():
            return guesses  # Returning guesses means we won

        else:
            print("You guessed wrong. Try again.")


def coin_flip_game() -&gt; None:
    print("Lets start! Begin by choosing:")
    guesses = guess_loop()

    if len(guesses) == 1:
        print("Congratulations, you guessed correctly on your first try!")

    else:
        print("Congratulations! After", len(guesses), "you guessed correctly!")
        print("Your guesses were: ", guesses)

coin_flip_game()
</code></pre>

<p>The <code>-&gt;</code> bits are <a href="https://docs.python.org/3/library/typing.html" rel="nofollow noreferrer">type hints</a> for the return type of the function. I think they're handy to have to make it clearer what type of data is being dealt with.</p>
    </div>