<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Avoid translating Pythonisms</h1>

<blockquote>
  <p>Dijkstra's algorithm really exploits nested dictionaries and weak typing which I used as an excuse to try out std::optional.</p>
</blockquote>

<p>No, <a href="https://en.wikipedia.org/wiki/Dijkstra%27s_algorithm" rel="nofollow noreferrer">Dijkstra's algorithm</a> does not require nested dictionaries nor weak typing. Maybe the Python implementation you are translating used these things, but maybe just because it was convenient in Python.</p>

<p>I strongly advise you to try to write idiomatic C++ code, not idiomatic Python translated to C++. What is convenient in Python might not be the best fit for C++, especially not when it comes to performance. I recommend you try to implement Dijkstra's using a <a href="https://en.cppreference.com/w/cpp/container/priority_queue" rel="nofollow noreferrer">priority queue</a>.</p>

<p>Furthermore, putting everything into <code>main()</code> is bad practice. It's better to organize your code into functions and classes as appropriate, and that's true even in Python.</p>

<h1>Use of typedefs</h1>

<p>It's always a good idea to give a name to things, including types, that you use in multiple places in your code. However, in this case I think it would be better to create a <code>class WeightedGraph</code> that contains all the information about a graph with weighted edges. Then you can add member functions to this graph to add and remove vertices and edges, and a member function <code>get_shortest_path()</code> that uses Dijkstra's to calculate the shortest path between two given vertices and returns the list of vertices.</p>

<h1>Use of <code>std::optional</code></h1>

<p>While it's possible to use <code>std::optional</code> here to represent the parent of a vertex, it might not be necessary. If you represent vertices by their name, then an empty string for the name might be used as the equivalent of <code>None</code>. And a more idiomatic C++ implementation of this algorithm would probably store each vertex's parent vertex using a pointer, in which case the <code>nullptr</code> would be the equivalent of <code>None</code>.</p>
    </div>