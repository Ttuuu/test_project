<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This is just a simple mathematical supplement to Martin York's answer and not a review, <em>per se</em>, however it's too long and detailed for a comment. I'm hoping it's useful anyway, even if limited in scope.</p>

<h2>File size prediction</h2>

<p>If we consider the (decimal) numbers from 1 to 999 inclusive, and if we assume that the newline character is a single character, let's calculate the file size:</p>

<pre><code>range  count  char/each  total
1-9        9          2     18
10-99     90          3    270
100-999  900          4   3600
</code></pre>

<p>From this, it's pretty easy to see that there's a pattern.  If <span class="math-container">\$i\$</span> is the power of ten (technically <span class="math-container">\$\lfloor\log_{10} i\rfloor\$</span>), then the equation that governs the number of bytes including newline for the half-open range <span class="math-container">\$[1,10^{k})\$</span> is </p>

<p><span class="math-container">$$
\displaystyle f(k) = \sum_{i=0}^{k} (2+i)(9)10^{i}
$$</span></p>

<p>If we start from 0, we just add two bytes, and the equation becomes</p>

<p><span class="math-container">$$
\displaystyle f(k) = 2 + \sum_{i=0}^{k} (2+i)(9)10^{i}
$$</span>
The closed form is
<span class="math-container">$$
2+\sum_{i=0}^n (2+i)(9)10^i = \frac{10^{n + 1}(9n + 17) + 10}{9}
$$</span></p>

<p>Calculating this for various values of <span class="math-container">\$k\$</span>:
<span class="math-container">$$
\begin{eqnarray}
f(1)=290 \\
f(2)=3890 \\
f(3)=48890 \\
f(4)=588890 \\
f(5)=6888890 \\
f(6)=78888890 \\
f(7)=888888890 \\
f(8)=9888888890 \\
f(9)=108888888890 \\
f(10)=1188888888890 \\
f(11)=12888888888890 \\
f(12)=138888888888890 \\
f(13)=1488888888888890 \\
f(14)=15888888888888890 \\
f(15)=168888888888888890 \\
f(16)=1788888888888888890 \\
f(17)=18888888888888888890 \\
f(18)=198888888888888888890 \\
f(19)=2088888888888888888890 \\
f(20)=21888888888888888888890 \\
\end{eqnarray}
$$</span>
So a quick approximation is </p>

<p><span class="math-container">$$
f(k) \approx (k+1.9)\times 10^{k+1}
$$</span></p>

<p>In other words, you'd need <span class="math-container">\$2\times 10^{16}\$</span> MiB to store all of the numbers <span class="math-container">\$[0,10^{20})\$</span>.</p>

<h2>Write duration prediction</h2>

<p>To my knowledge, 1400 Mb/s as <a href="http://www.dailytech.com/Samsung+PCI+Express+SSD+for+Ultrabooks+Enters+Mass+Production/article31769.htm" rel="nofollow noreferrer">quoted in this 2013 article</a> is among the fastest quoted rates for a Solid State Drive (SSD) using PCIe.  That works out to <span class="math-container">\$1.5\times 10^{13}\$</span> seconds, or <span class="math-container">\$4.3\times10^9\$</span> hours, <span class="math-container">\$1.8\times 10^8\$</span> days, or <span class="math-container">\$495440\$</span> years.</p>

<p>So even with astonishingly large arrays of the fastest available PCIe devices, it would still take almost a half million years to write the file, even if the numerical formatting performed by the <code>std::ostream</code> were instant (that is, if it took no time at all).  </p>

<p>For reference, a half million years ago would put us in the Paleolithic period just before the time that our ancestors had figured out how to regularly use fire.  Archaeologists are still debating how fast their computer I/O went.</p>
    </div>