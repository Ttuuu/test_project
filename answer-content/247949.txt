<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<pre><code>public class AesGenericEncryptionService
</code></pre>
<p>That's not a very good name. The AES method itself already performs "generic" encryption. I'm also not sure if you would currently name anything "generic" if it doesn't perform authenticated encryption (encryption + MAC) such as AES/GCM. See the bottom of my answer for such an implementation. If you'd use this "generic encryption" for transport mode security then you are vulnerable to plaintext / padding oracle attacks as well as undetected change of the plaintext during transit.</p>
<pre><code>private readonly byte[] m_IV;
</code></pre>
<p>Storing a static IV makes this object single use. That's not something that is wrong in particular, but it is something to keep in mind. You would wonder if a single method call would not achieve the same. Key + IV reuse makes a cipher vulnerable after all.</p>
<pre><code>rijAlg.Mode = CipherMode.CBC;
</code></pre>
<p>I'm glad that you are setting this explicitly, contrary to the other answer. Using defaults for cryptographic methods leads to unreadable code, where the reader has to guess which mode has been used.</p>
<pre><code>rijAlg.KeySize = m_Key.Length * 8;
</code></pre>
<p>This, on the other hand, is directly the same as just assigning the key, the key size will be set automatically.</p>
<pre><code>rijAlg.BlockSize = m_IV.Length * 8;
</code></pre>
<p>This is dangerous, as Rijndael accepts different block sizes, while AES doesn't. So if you allow this then you've named your class incorrectly. And again, it's not really needed. You should instead make sure that your IV is always 128 bits if you want AES.</p>
<hr>
<p>In general, this class is just hiding detail from <code>RijndaelManaged</code>. It does this in such a way that using the actual class is possibly a better idea (as I've found out when I wrote my own "wrapper" classes).</p>
<p>Finally, <code>RijndaelManaged</code> is, as the name suggests, the managed version of AES, i.e. executed byte code instead of using a native implementation. In general, I'd prefer just <code>Aes.Create()</code> so you can use the hardware acceleration that the native implementation provides (on a system with AES-NI or something supported &amp; similar anyway). It can fall back on <code>RijndaelManaged</code> where required.</p>
<hr>
<p>Here is a new <a href="https://docs.microsoft.com/en-us/dotnet/api/system.security.cryptography.aesgcm?view=netcore-3.1" rel="nofollow noreferrer">AES / GCM implementation</a> by Microsoft. Note that it provides "one shot" encryption like your class. However, it only uses the key as field, not the nonce (which replaces the IV).</p>
    </div>