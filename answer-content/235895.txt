<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There are a couple of obvious (but minor) contributors to inefficiency here:</p>

<ul>
<li><p>You search an increasing number of <code>stick</code> positions for each particle. If I understand the code correctly, once a particle has "stuck" to a position, no other particle will ever "stick" there, and you can remove the original position from the set.</p></li>
<li><p>You could <em>use</em> a <code>set</code> instead of a <code>list</code>. I don't know whether this would be an optimization or a pessimization. My guess is the latter.</p></li>
<li><p>You are using a lot of <code>list</code>s in places you could use <code>tuple</code>s. For example, </p></li>
</ul>

<hr>

<pre><code>positi = [A , B]
</code></pre>

<p>could be just</p>

<pre><code>positi = (A, B)
</code></pre>

<p>And then instead of doing list accesses back into the thing you just built, you can just write what you mean:</p>

<pre><code>stick.remove((A, B))
for site in ((A+1, B), (A-1, B), (A, B+1), (A, B-1)):
    if site not in stick:
        stick.append(site)
canvas[A, B] = 1
</code></pre>

<p>If you made <code>stick</code> a <code>set</code>, then you would eliminate that condition because <code>set</code>s are uniqued automatically:</p>

<pre><code>stick.remove((A, B))
for site in ((A+1, B), (A-1, B), (A, B+1), (A, B-1)):
    stick.add(site)
canvas[A, B] = 1
</code></pre>

<hr>

<p>Finally, your "take care of overflow" part is doing a lot of redundant tests. Consider rewriting it as</p>

<pre><code>    x = np.random.randint(4)
    if x == 0:
        if (A &lt; h-1): A += 1
    elif x == 1:
        if (B &lt; h-1): B += 1
    elif x == 2:
        if (A &gt; 0) : A -= 1
    else:
        if (B &gt; 0): B -= 1
</code></pre>

<p>However, fundamentally, if you <em>must</em> use this brute-force algorithm and it <em>must</em> be fast, you should probably switch to a compiled language and/or a language that supports simultaneous multithreading.</p>
    </div>