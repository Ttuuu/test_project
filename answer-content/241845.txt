<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Overall Impression</h2>
<p>This code would be difficult to maintain especially if someone else had to pick up where the original coder had left off. This due primarily to the use of macros, multiple goto's and global variables.</p>
<p>A second consideration is that as the program uses more memory to contain the buffer, performance might be impacted.</p>
<p>A third consideration also about the performance is that the program will perform better if it reads a large block of text from the input file and then processes that text using string or character manipulation rather then using charater based input.</p>
<h2>Global Variables</h2>
<p>Even though the variables the global namespace is protected from the variables <code>exitval</code>, <code>spaceword</code>, <code>keyword</code>, <code>buf</code> and <code>bufsize</code> by the use of static, programming within the file is still using the variables as global variables. This makes the code harder to write, read and debug because without searching the whole program it's not clear where the variables are modified. Use local variables whenever possible, and pass necessary information into functions as needed.</p>
<h2>Use of Macros</h2>
<p>It's clear why the code has a macro (<code>CHECKBUF</code>) in it, it is to reduce code repetition which is good, however, it would be better to use a function rather than a macro. One of the drawbacks of using macros is that they are very difficult to debug because the code in them is not expanded in the debugger. Another drawback is that they tend to hide things if memory allocation , goto's or <code>exit()</code> statements are in them, this code has 2 out of 3 of those hidden items in the macro.</p>
<h2>Portability</h2>
<p>The C programming language is very portable as long as the C programming standard is followed, and not some other standard such as <code>POSIX</code>. Two of the header files in this code (<code>err.h</code> and <code>unistd.h</code>) are not portable to Windows with out additional work being done to port that code or the associated libraries.</p>
<p>More portable code would write error messages and warning messages to <code>stderr</code> and not use <code>err()</code>, <code>warn()</code> or <code>errc()</code>. You could write your own portable library that recreates these functions, it might be a very good learning experience that you could share here on code review.</p>
<p>Another library function you could consider writing because it isn't portable is <code>getopt()</code>. I think this might even be a better learning experience.</p>
<h2>The Use of Goto's</h2>
<p>There is sometimes a need to use goto's in error handling code, but that is pretty rare. To use multiple goto's for flow control in a function is to return to the original versions of BASIC and FORTRAN which didn't have many of the modern programming constructs. This used to be known as speghetti code. Blocks of code can be nested inside if statements, if the blocks of code ae too large or complex they can become functions. In the C programming language the <code>break;</code> statement can be used to exit a logic block. In the case of the <code>getword()</code> function perhaps it would be better to have it call two function that process the text, one for the <code>-k</code> switch and one for the <code>-w</code> switch.</p>
    </div>