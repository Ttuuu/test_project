<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your code is too big for me to do a <em>full</em> review, but here are some random observations:</p>

<p>First, the standard miscellany.</p>

<ul>
<li>Good on you for not <code>using namespace std;</code> anywhere!</li>
<li>Consider using <code>#pragma once</code> instead of the <code>#ifndef</code>/<code>#define</code> dance you're currently doing. (It's not standard but it's a lot more foolproof. Numbers such as your <code>110720182013</code> may change — and noise up your git logs when they do — but <code>#pragma once</code> endures.)</li>
<li>Ending every program with <code>std::cin.get();</code> is a MSVC-ism. Learn to run your programs in the Command Prompt (a.k.a. Terminal) and you won't need to mess around with <code>cin.get()</code> anymore.</li>
</ul>

<hr>

<p>Now the naming. <em>Most</em> of your identifiers are inappropriate for a real codebase. For example, you have a vector that in a real program would be called something like <a href="https://en.wiktionary.org/wiki/neighbor" rel="noreferrer"><code>neighbors</code></a> or <code>outgoing_passages</code>; you call it <a href="https://en.wiktionary.org/wiki/broom" rel="noreferrer"><code>brooms</code></a>.</p>

<p>Some of your identifiers are at least plausibly related by abbreviation to their actual meanings; for example <code>int tar</code>, which from context clearly means something like <code>int target</code>. But you should still write them out! Remember, we write our C++ code for <em>people</em>, not for machines. (Machines are totally happy reading machine code.) So <code>rnd_room</code> should be <code>random_room</code>; <code>rnumber</code> should be <code>room_number</code> (or just <code>room</code>?), <code>tar_rooms</code> should be <code>target_rooms</code> (or <code>path</code>?), and so on.</p>

<hr>

<p>Consider introducing a type alias</p>

<pre><code>using RoomNumber = int;
</code></pre>

<p>so that you don't have to use unexplained <code>int</code> for so many different purposes.</p>

<hr>

<p>Your helpdoc could <em>maybe</em> productively be rewritten to use a <code>R"(raw string)"</code> literal, which first appeared in C++11. I intensely dislike raw strings because of the <code>R".*(regex).*"</code> issue, but I also dislike having to manually place <code>\n</code> and <code>\"</code> in page-long C strings, so... in this case I'd consider it.</p>

<p>Speaking of your helpdoc, it's a copy of <a href="https://en.wikipedia.org/wiki/Gregory_Yob" rel="noreferrer">Gregory Yob</a>'s original, which is cool and all, but that means it is not an accurate description of what your program <em>actually does!</em></p>

<blockquote>
  <p>The wumpus lives in a cave of rooms. Each room has 3 tunnels leading to other rooms. (Look at a dodecahedron to see how this works — if you don't know what a dodecahedron is, ask someone).</p>
</blockquote>

<p>Your code doesn't actually do this! To see one way to implement "randomly numbered rooms on a dodecahedron," you could do <a href="https://www.ticalc.org/archives/files/fileinfo/251/25143.html" rel="noreferrer">this</a>. (Step 1: hard-code a map of a dodecahedron. Step 2: assign the numbers 1 through 20 to the vertices, at random.)</p>

<hr>

<pre><code>int get_random(int min, int max)
{
    std::random_device rd;
    std::mt19937 mt(rd());
    std::uniform_int_distribution&lt;int&gt; distribution(min, max);
    return distribution(mt);
}
</code></pre>

<p>This is an antipattern. Better would be:</p>

<pre><code>int get_random(int min, int max)
{
    static std::mt19937 mt = []() {
        std::random_device rd;
        return std::mt19937(rd());
    }();
    std::uniform_int_distribution&lt;int&gt;(min, max);
    return distribution(mt);
}
</code></pre>

<p>This way you only create the <code>random_device</code> once per <em>run of the program</em>, instead of once per <em>random number generated.</em> Your intuition here should be that creating a <code>random_device</code> is equivalent to <code>open("/dev/urandom")</code>; so you don't want to do it often if you don't need to.</p>

<hr>

<pre><code>neigbour_rooms
</code></pre>

<p>Spell-check! (Protip: If you use full English words, instead of <code>tar</code> and <code>rnd</code> and such, then you can pretty much <em>literally</em> run spell-check on your code.)</p>

<hr>

<pre><code>struct Room {
    Room(int rnum)
        :wumpus{ false }, pit{ false }, bat{ false }, player{ false }, rnumber{ rnum }
    {
        brooms.push_back(nullptr);
        brooms.push_back(nullptr);
        brooms.push_back(nullptr);
    }
    int rnumber;
    std::vector &lt;Room*&gt; brooms;         //pointer to 3 rooms next to this room
    bool wumpus;
    bool pit;
    bool bat;
    bool player;
};
</code></pre>

<p>Two things about this struct. First, every constructor you write (regardless of number of parameters) should be <code>explicit</code>, unless you <em>deliberately</em> want to enable implicit conversion for some reason. Second, C++11 and later support in-line initializers for member data, so you should actually write it like this:</p>

<pre><code>struct Room {
    explicit Room(int r) : room_number(r), neighbors(3, nullptr) {}
    int room_number;
    std::vector&lt;Room*&gt; neighbors;
    bool has_wumpus = false;
    bool has_pit = false;
    bool has_bat = false;
    bool has_player = false;
};
</code></pre>

<p>Notice that with the vector renamed to <code>neighbors</code>, we no longer need the long comment explaining about "brooms"! This is what people mean by "self-documenting code."  I've renamed the other members accordingly. Notice that <code>some_room.pit</code> is relatively clear, but <code>some_room.has_pit</code> is <em>100% unambiguous.</em> Strive for 100%!</p>

<hr>

<pre><code>int Dungeon::current_room()
{
    return player_room;
}
</code></pre>

<p>This is an interesting bit of code, because here we have a one-line function that claims to return "dungeon current room" but actually returns "player room." One or the other of these names is lying to us!</p>

<p>I think what it's actually returning is the room the <em>player</em> is currently in. (Why the <code>Dungeon</code> should care what room the player is in, I'm not sure.) The method should probably be named <code>player_room</code>, at which point we realize that the member variable <code>player_room</code> might as well be <code>public</code>.</p>

<p>(Or, if we're going the full OOP getters-and-setters route here, the private member variable should be named with a sigil such as <code>player_room_</code> or <code>m_player_room</code>, and orthogonally, the member function <code>int player_room() const</code> should have that <code>const</code>.</p>

<hr>

<p>There's more, but that's a good stopping point for now, anyway.</p>
    </div>