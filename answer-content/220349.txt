<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<pre><code>private readonly ProductRepository prodRep = new ProductRepository();
private readonly UserRepository userRep = new UserRepository();
private readonly CarRepository carRep = new CarRepository();
private readonly RegistryRepository regRep = new RegistryRepository();
</code></pre>
</blockquote>

<p>From a very pragmatic point of view, there's nothing inherently wrong with newing up your dependencies like this - especially since they're just default constructors <em>without any side-effects</em>.</p>

<p>From an architectural point of view, there's now absolutely no way to bring up that form without having it work with the MySQL database: the form is <em>tightly coupled</em> with its dependencies, and in a maintainable, testable code base, you want exactly the opposite of that.</p>

<p>The main problem is in the form's constructor:</p>

<blockquote>
<pre><code>    var product = prodRep.Get();

    var listUsers = userRep.GetAll();
</code></pre>
</blockquote>

<p>Turning a blind eye on the extraneous vertical whitespace and the uselessness of these local variables, what's happening here is that the form's constructor is <em>side-effecting</em>, and has a very significant chance of throwing exceptions - two things that directly and severely contradict best practices.</p>

<p>When I do this:</p>

<pre><code>using (var form = new FormTest())
{

}
</code></pre>

<p>I expect to get a <code>FormTest</code> instance to work with, <em>period</em>.</p>

<p>What's happening is, I <em>may</em> get a <code>FormTest</code> instance to work with, and I'm hitting a MySQL database, synchronously at that. If anything goes wrong in any of these hidden repository dependencies, I'm not getting a <code>FormTest</code> instance. Instead I get an unhandled exception I had no reason to expect.</p>

<p>So, <em>when</em> should the initial load happen then, if not in the form's constructor? Forms have a <code>Load</code> event (see <a href="https://docs.microsoft.com/en-us/dotnet/framework/winforms/order-of-events-in-windows-forms" rel="nofollow noreferrer">order of events in Windows Forms</a>) that's exactly for this. Handle the form's <code>Load</code> event, and move the database work there.</p>

<pre><code>public FormTest()
{
    InitializeComponent();
    Load += FormTest_Load;
}

private void FormTest_Load(object sender, EventArgs e)
{
    products = prodRep.Get();
    listUsers = userRep.GetAll();
}
</code></pre>

<p>The constructor is invoked by the WinForms designer: having it do database work means everytime the designer is loaded, you're hitting the database. Don't do this.</p>

<hr>

<p>A constructor should do as little work as possible, and tells its caller what it needs, what its dependencies are.</p>

<pre><code>private readonly ProductRepository _products;
private readonly UserRepository _users;
private readonly CarRepository _cars;
private readonly RegistryRepository _registries;

public FormTest(ProductRepository products, UserRepository users, CarRepository cars, RegistryRepository registries)
    : this()
{
    _products = products;
    _users = users;
    _cars = cars;
    _registries = registries;
}
</code></pre>

<p>We're still <em>tightly coupled</em> with concrete types, but at least now the dependencies are explicit. What's missing is a <em>unit of work</em> abstraction:</p>

<pre><code>private readonly IUnitOfWork _context;

public FormTest(IUnitOfWork context)
    : this()
{
    _context = context;
}
</code></pre>

<p>But that's still leaving the form responsible for running the entire show: it's a <em>Smart UI</em> that knows how everything works and does everything.</p>

<p>The form doesn't need to know about repositories or a unit of work; the form needs products, users, cars, registries: it needs a <em>model</em> object that encapsulates the data it wants to <em>present</em>:</p>

<pre><code>private readonly AppModel _model;

public FormTest(AppModel model)
    : this()
{
    _model = model;
}
</code></pre>

<p>The object responsible for creating the form, is also responsible for populating that <em>model</em>: let's call it the <em>presenter</em>. The presenter's own dependencies include the <em>unit of work</em>, and its job is to update the model as needed, and respond to whatever happens in the <em>view</em> - the form.</p>

<p>So if there's a button on the form that can create a new product, its <code>Click</code> handler should be as simple as this:</p>

<pre><code>public event EventHandler CreateItem;
private void CreateProductButton_Click(object sender, EventArgs e)
{
    CreateItem?.Invoke(sender, e);
}
</code></pre>

<p>The role of a form isn't to run the entire show and know everything that needs to happen for new data to end up in the database: the role of a form is strictly to <em>present the model to the user</em>, and provide an interface for the user to interact with it.</p>

<p>So the <em>presenter</em> would handle that <code>CreateItem</code> event, by hitting the database through the repositories (asynchronously?), and then updating the model accordingly - and the view should have data bindings against the model, so no code whatsoever should be needed for this in the view.</p>

<p>Look into the <em>Model-View-Presenter</em> UI pattern if this sounds interesting.</p>
    </div>