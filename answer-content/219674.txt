<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This code makes great use of the keywords <code>let</code> and <code>const</code> where appropriate. Some of the functions are a little on the long side, so those could potentially be split up into smaller functions. The repeated calls to functions like <code>this.load.image</code> could be done in a loop over arrays if pre-defined arrays were setup.</p>

<hr>

<p>Did you consider using element references, which was mentioned in <a href="https://codereview.stackexchange.com/a/212334/120114">blindmanâ€™s answer to your previous question <em>Tip Calculator in pure JS</em></a>?</p>

<hr>

<p>In the method <code>gameState.collisionMethod()</code> there is a line in both cases that could be pulled outside of the conditional blocks: <code>gameState.fallDownCaller(player);</code></p>

<hr>

<p>In the method <code>gameState.fallDownCaller()</code> the object passed to <code>this.time.adddEvent()</code> is the same and could be declared in one spot above (or else in a separate function). </p>

<hr>

<p>Instead of using a <code>switch</code> statement in <code>displayMedal()</code>,  a mapping of color names to hex values could be used. </p>

<p>For example:</p>

<pre><code>const colorToHexMap = {
    bronze: '#cd7f32',
    silver: '#c0c0c0',
    gold:   '#ccac00',
};
</code></pre>

<p>Then use it with the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/in" rel="nofollow noreferrer">in</a> operator:</p>

<pre><code>if (color in colorToHexMap) {
    medalColor = colorToHexMap[color];
}
</code></pre>
    </div>