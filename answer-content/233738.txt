<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<pre><code>fn main() {
    let mut input = String::new();
    match io::stdin().read_to_string(&amp;mut input) {
        Ok(v) =&gt; v,
        Err(_) =&gt; panic!("Unable to read input"),
    };
</code></pre>

<p>If you are just going to panic, use <code>unwrap</code> or <code>expect</code> method on Result. </p>

<pre><code>    let mut orbits = HashMap::new();
    input
        .lines()
        .map(|l| l.split(")").collect::&lt;Vec&lt;&amp;str&gt;&gt;())
        .for_each(|o| {
            orbits.insert(o[1].to_string(), o[0].to_string());
        });
</code></pre>

<p>I'd do:</p>

<pre><code>    let mut orbits : HashMap&lt;_,_&gt; = input
        .lines()
        .map(|l| l.split(")").collect::&lt;Vec&lt;&amp;str&gt;&gt;())
        .map(|o| {
            (o[1].to_string(), o[0].to_string())
        })
        .collect();
</code></pre>

<p>You can <code>collect()</code> into many things including hashmaps.</p>

<pre><code>    let num_orbits = orbits
        .iter()
        .map(|k| path(k.0, &amp;orbits))
        .map(|p| p.len())
        .sum::&lt;usize&gt;();
</code></pre>

<p>I generally prefer to put the variable on the let: <code>let num_orbits: usize</code>, instead of in the <code>::&lt;&gt;</code></p>

<pre><code>    let mut you_path = path("YOU", &amp;orbits);
    let mut san_path = path("SAN", &amp;orbits);

    while you_path.get(you_path.len() - 1) == san_path.get(san_path.len() - 1) {
        you_path.pop();
        san_path.pop();
    }
</code></pre>

<p>There is a <code>last()</code> method that you can use here insetad of the <code>.get()</code></p>

<pre><code>    println!(
        "Number of orbits: {}, Number of jumps: {}",
        num_orbits,
        (you_path.len() + san_path.len())
    );
}

fn path(from: &amp;str, orbits: &amp;HashMap&lt;String, String&gt;) -&gt; Vec&lt;String&gt; {
</code></pre>

<p>You could have all of this operate on <code>&amp;str</code> if you use lifetimes, but thats a little more advanced.</p>

<pre><code>    let mut p = Vec::new();
    let mut inner = from;
    loop {
        match orbits.get(inner) {
            Some(v) =&gt; {
</code></pre>

<p>Use <code>while let Some(v) = orbits.get(inner) {</code>.
This will loop until orbits.get returns <code>None</code>.</p>

<pre><code>                p.push(v.to_string());
                inner = v;
            }
            None =&gt; break,
        };
    }
    p
}
</code></pre>
    </div>