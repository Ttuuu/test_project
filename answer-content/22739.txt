<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ol>
<li><p>The original list is not changing.  List has a subList(int fromIndex, int toIndex) method.  So there is no need to clone the items in the list, or to write your own "deepClone" method.</p></li>
<li><p>Recursion is a technique most often associated with functional programming, so there are a few things I'd do to make this example more "functional."</p></li>
</ol>

<p>2.a. Replace tempList with an immutable list, call it "inList" for input-list:</p>

<pre><code>final List&lt;Integer&gt; inList;
{
    List&lt;Integer&gt; tempList = new ArrayList&lt;Integer&gt;();
    tempList.add(1);
    tempList.add(2);
    tempList.add(3);
    tempList.add(4);
    tempList.add(5);
    tempList.add(6);
    inList = Collections.unmodifiableList(tempList);
}
</code></pre>

<p>2.b. @Yuushi had a lot of really good suggestions, but for this specific example, I'm not excited about his stylistic choice of making evenList() return void.  We can make it a function, that evaluates to something, and for that, we want to keep closer to your original signature, just a slightly more generic version with Lists replacing ArrayLists (this accommodates the Unmodifiable list and is generally better style):</p>

<pre><code>List&lt;Integer&gt; evenList (List&lt;Integer&gt; tList)
</code></pre>

<p>OK, now here's the recipe for a recursive function like this one that takes the place of a loop in imperative programming:</p>

<p>How to write a recursive function.</p>

<ol>
<li><p>determine simplest possible input and output types for your method signature.</p></li>
<li><p>(Optional) define invalid input conditions (throw exceptions for invalid input)</p></li>
<li><p>define termination conditions (how to know from the input when you are done)</p></li>
<li><p>define what to return when termination condition is reached</p></li>
<li><p>(Optional) Sometimes you may have a special return for the pre-termination condition?</p></li>
<li><p>define what to return in all other cases</p></li>
</ol>

<p>Like a loop, you want to define your exit condition up front, but unlike a loop, a tail-recursive function "unrolls" from the outside-in, like winding up a top and letting it go.  So the exit condition of the loop will also be the creation condition for your first return value.</p>

<pre><code>List&lt;Integer&gt; evenList (List&lt;Integer&gt; tList) {
  if (evenList.length() &lt; 1) {
      return new ArrayList&lt;Integer&gt;();
  }
  // TODO: You have to handle the case where evenList.length() == 1
  // Since this is homework, I can't just give you the whole answer.
  // Without that case, there is a bug.
</code></pre>

<p>Replacing mutable variables with final ones is more functional.  <a href="http://glenpeterson.blogspot.com/2013/01/ternary-operator-in-java.html" rel="nofollow">Using the ?: operator instead of if/else</a> for evaluation - this is more functional as well.</p>

<pre><code>  final int keeperIdx = (evenList.length() % 2) == 0 ?
                        evenList.length() - 2 :
                        evenList.length() - 1;

  // Here is the recursive call, passing a slice of the original list.
  // parameters to subList are first zero-based index inclusive, and last
  // index exclusive.
  // prepend the result of this recursive eventList() call to your output.
  return evenList(tList.subList(0, keeperIdx))
             .add(0, tList.get(keeperIdx));
}
</code></pre>

<p>I did not test this code, and I left out one necessary condition (clearly marked with a TODO).  I hope that it shows enough of the concepts for you to get it working.  I'm assuming that your teacher wants to teach you some functional programming concepts, so I tried to lean as far in that direction as Java will comfortably go.  I hope it helps!</p>

<p>P.S.  There is a small chance that I got confused and am returning your result in reverse order.  See if you can mentally figure out whether that's the case, and what three characters to delete if it is.</p>
    </div>