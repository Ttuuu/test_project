<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Generalities and trivialities:</h2>
<p>I recommend <code>#include</code>ing all wanted system headers before any private headers.  This avoids any possibility of changing the meaning of any system header by defining a macro that happens to be meaningful to it.</p>
<p><code>static</code> functions and variables generally should <em>not</em> be declared in header files, unless you actually want every file that includes the header to provide (for functions) or have (for variables) its own copy.  In your code, this applies to the <code>resize()</code> and <code>getPriority()</code> functions.  If you want to prototype those then put each prototype near the top of the C file where the corresponding function definition appears.</p>
<p>The string constant for <code>MSG_REALLOC</code> contains a trailing space character that you probably did not intend.</p>
<p>There's no point in <code>deleteStack()</code> setting its argument to <code>NULL</code>, as the caller will not see any effect of it.</p>
<p>On the other hand, you never call <code>deleteStack()</code> or <code>printStack()</code>.  Inasmuch as this is a program, not a reusable library, it is wasteful to define functions that you never call.</p>
<p>You do not declare the type of <code>main()</code>.  It does default to <code>int</code>, which is the required type, but failing to declare that is poor style.</p>
<p>It looks like you could replace much of function <code>getOperand()</code> with a call to <code>strtod()</code>.</p>
<h2>Regarding <code>ValType</code>:</h2>
<p>If you see value in defining the value data type as a macro -- and I think that may be a bit overkill -- then at least define it <em>conditionally</em>.  The point of using a macro would be to make it easy to switch to a different type, and you've gone only half way on that.  If you make the definition(s) conditional, then it would not be necessary to modify the header at all to change type.  For example:</p>
<pre><code>#idndef ValType
#define ValType double
#endif

#ifndef
#define ValType_IOSPECIF "%f"
#endif
</code></pre>
<p>Note in the above example code that I have changed the default definition of <code>ValType_IOSPECIF</code>.  The result is the correct form, per the standard, for a <code>printf()</code> field descriptor for a <code>double</code> (there is none specific to <code>float</code> because <code>float</code> arguments to <code>printf()</code> are automatically promoted to <code>double</code>, as a consequence of those falling among <code>printf()</code>'s variable arguments).  Note also that <code>printf()</code> and <code>scanf()</code> are asymmetric in this particular regard, so if you needed to support both then you would need separate macros for the two contexts.</p>
<h2>Regarding function <code>transformToRPN()</code>:</h2>
<p>Function <code>transformToRPN()</code> does not just transform an expression, it <em>inputs</em> one.  At minimum, therefore, the function is poorly named, but it's questionable that these two behaviors are combined in a single function.</p>
<p>In function <code>transformToRPN()</code>, you have an <code>else</code> block whose sole contents is an <code>if/elseif/else</code> tree, and moreover, that conditions in that inner tree test the same variable that those on the outer tree do.  I recommend merging the inner tree into the outer tree for clarity and symmetry.</p>
<p>Function <code>transformToRPN()</code> receives a pointer to a buffer into which to record an RPN transformation of the input expression, but it does not receive the size of that buffer, and it performs no bounds checking.  It would be extremely easy for a user to intentionally cause a buffer overrun, which is a favorite cracking tactic.</p>
<p>Function <code>transformToRPN()</code> assigns the return value of <code>getchar()</code>, an <code>int</code>, to a variable of type <code>char</code>.  If <code>char</code> happens to be a signed type, then this produces implementation-defined behavior for some possible inputs.  Whether <code>char</code> is signed or unsigned, you cannot distinguish one possible input char from an <code>EOF</code>.</p>
<p>Moreover, the <code>while()</code> loop seems unlikely to terminate, because at the end of the stream <code>getchar()</code> returns <code>EOF</code>, which normally has value <code>-1</code>, and <em>always</em> has a value outside those that can result from converting a valid <code>char</code> value, including 0, to type <code>unsigned char</code>.  The loop will terminate only if <code>getchar()</code> returns <code>0</code>.</p>
    </div>