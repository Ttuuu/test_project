<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Displaying the grid</h1>

<p>Personally, I would move displaying the grid into a separate function, such as <code>display_grid</code>:</p>

<pre><code>def display_grid() -&gt; None:
    for row in game:
        print(row)
</code></pre>

<p>This removes the need to keep having to write the loop over and over.</p>

<h1>Picking the player</h1>

<p>Another personal preference is that I would have the user input both the row and column as the input, and just split what they inputed to get the values. Removes the need to have multiple input calls, and makes the game a little easier to play.</p>

<pre><code>def pick_player(current_player: int) -&gt; (int, int):
    row, col = input(f"Player {current_player} Turn!\nEnter row and column of choice: ").split()
    if row.isdigit() and col.isdigit():
        row, col = int(row), int(col)
        if game[row - 1][col - 1] == 0:
            game[row - 1][col - 1] = current_player
        else:
            print("Position already taken! Skipping turn!")
        return row, col
</code></pre>

<h1>Checking the board</h1>

<p>Instead of having three separate functions to check the board, you should group all the conditionals into one function. Now, I did a bit of fixing and this function, <code>check_win</code>, checks all the ways the game can be won.</p>

<pre><code>def check_win():
    return any([
        game[0][0] == game[1][1] == game[2][2] != 0,
        game[0][2] == game[1][1] == game[2][0] != 0,
        any([row.count(row[0]) == len(row) and row[0] != 0 for row in game]),
        any([len(set([game[i][j] for i in range(3)])) == 1 and game[0][j] != 0 for j in range(3)])
    ])
</code></pre>

<p>You can use <code>any</code> to determine if <em>any</em> of the elements in an iterable are <code>True</code>. The last line in this functions does the vertical checking. Spent a good deal trying to make this one line, and it looks pretty good. Basically, the <code>set</code> call removes all duplicates and retains the single values. For example, <code>set([1, 1, 2])</code> results in <code>{1, 2}</code>.</p>

<p>With this information, if the length of the <code>set</code> is <em>one</em>, and the single value <em>isn't</em> <code>0</code>, then a winner has been found. That's all that line is doing.</p>
    </div>