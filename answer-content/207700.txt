<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Efficiency and potential problems</h1>
<p>You could use a <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map" rel="nofollow noreferrer">Map</a> but as you are counting word occurrences using an object is a little more efficient.</p>
<h2>Efficiency</h2>
<p>Your code can be improved as it is highly inefficient with each word needing to create a new object and fill its properties from the previous one, then add or update then next word. You need only create one object and add properties to it as you find them.</p>
<pre><code>function mapMagazine (text) {
    return text.split(' ')
        .reduce((map, word) =&gt; (
            map[word] = map[word] ? map[word] + 1 : 1, map            
        ), {});
}
</code></pre>
<p>or using <code>forEach</code>,</p>
<pre><code>function mapMagazine (text) {
    const map = {};
    text.split(' ').forEach(w =&gt; map[w] = map[w] ? map[w] + 1 : 1);
    return map;
}
</code></pre>
<p>or the (slightly) more performant version using a <code>for</code> loop</p>
<pre><code>function mapMagazine (text) {
    const map = {};
    for (const w of text.split(' ')) { map[w] = map[w] ? map[w] + 1 : 1 }
    return map;
}
</code></pre>
<h2>Problems</h2>
<p>I do however see that your code would suffer from problems with a sting such as <code>"A is a, as an a at the beginning,  a capitalised A."</code> (Note it has a double space in it) It would return with some of the following properties...</p>
<pre><code>{
    A : 1,
    "a," : 1,
    a : 2,
    "A." : 1,
    "beginning," : 1,
    "" : 1,  // empty string from splitting two spaces
     .. and the rest
 }
</code></pre>
<p>I would imagine you would want something a little more like.</p>
<pre><code>{
    a : 5,
    beginning : 1,
     .. and the rest
 }
</code></pre>
<p>To do this you need a slight mod to the function. The text should be converted to lowercase, split can use a <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp" rel="nofollow noreferrer">RegExp</a> to split into words on white spaces or groups of white spaces, and a check for empty string that can result if the text is ended on a white space such as a full stop.</p>
<p>BTW does the function really map magazines?</p>
<pre><code>function mapWords(text) {
    const map = {};
    for (const word of text.toLowerCase().split(/\W+/)) { 
        word !== "" &amp;&amp; (map[word] = map[word] ? map[word] + 1 : 1);
    }
    return map;
}
</code></pre>
    </div>