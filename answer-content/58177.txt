<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Java Native Solution</strong></p>

<p>The solution Java offers for <a href="http://software-talk.org/blog/2013/12/java-image-manipulation-bufferedimage/#Java%20add%20two%20BufferedImages%20opaque" rel="nofollow">adding two BufferedImages</a> should be faster than anything that you will program yourself:</p>

<pre><code> /**
  * prints the contents of buff2 on buff1 with the given opaque value.
  */
 private void addImage(BufferedImage buff1, BufferedImage buff2,
         float opaque, int x, int y) {
     Graphics2D g2d = buff1.createGraphics();
     g2d.setComposite(
             AlphaComposite.getInstance(AlphaComposite.SRC_OVER, opaque));
     g2d.drawImage(buff2, x, y, null);
     g2d.dispose();
 }
</code></pre>

<p><strong>Your Code</strong></p>

<p>As I said, if you remove the unnecessary <code>x3</code> checks, you would at least save two comparisons for each loop of y2 (and those can really add up).</p>

<p>You can also move the <code>onheight - 1</code> and <code>onwidth - 1</code> computations outside the loop. </p>

<p>If most of the time the smaller image does fit into the larger image, you can also remove the bounds check completely. Create two new methods. One for when the image fits - no bound checks necessary - and one for when it does not fit (here you obviously still need the check). Then in your main method, you check once if the image would fit and use the quicker method without bounds check. If it does not fit, you use the method with bounds check. </p>

<p>If the smaller image does not fit most of the time, you could also first crop the smaller image (if it does not fit), so that it does always fit. I doubt that it will be faster, but it is worth a try.</p>
    </div>