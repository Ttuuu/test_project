<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Style</h1>
<p>You've done a great job of style from a technical point of view.</p>
<ul>
<li>You're following PEP-8 guidelines.</li>
<li>The functions have type-hints</li>
<li>The functions have docstrings</li>
</ul>
<p>Defects:</p>
<ul>
<li><p>The docstrings aren't very useful:</p>
<pre class="lang-none prettyprint-override"><code>&gt;&gt;&gt; help(get_factors)

Help on function get_factors in module __main__:

get_factors(number: int) -&gt; List[List[int]]
    Returns all the factors of a number.
</code></pre>
<p>This doesn't explain what the factors are going to be.  A list of list of integers, yes, but no clue what that means, or to expect that <code>[1, x]</code> will be excluded.</p>
</li>
<li><p>the <code>determine_factors</code> method is a wall of code, with not a single comment insight describing how it is supposed to work.</p>
</li>
</ul>
<h1><code>is_perfect()</code></h1>
<p>This is actually pretty close to perfect.  :-)</p>
<h1><code>get_factors()</code></h1>
<p>You are (without any indication to the caller) omitting <code>[1, x]</code> (should be at least mentioned in the docstring.</p>
<p>You are finding all factors from <code>2</code> up to (and including!) <code>number</code>, which means the last pair generated is <code>[number, 1]</code>.  Why do you skip generating <code>[1, number]</code> by starting at <code>2</code>, yet continue up to <code>number + 1</code>?</p>
<p>How does <code>factors[:len(factors) // 2]</code> remove duplicates, when it is using truncating integer division, and you can have an odd number of factor pairs?</p>
<p>Why bother generating the factor pairs if you are just going to discard half of them anyway?  Just iterate from <code>2</code> up to (and including) <code>isqrt(number)</code>.  Way more efficient.</p>
<h1><code>determine_factors()</code></h1>
<p>I have no idea how this function works.  <code>simplified += ...</code> and <code>remainder += ...</code>?  Multiplication of factors is not additive, so this doesn't make sense.</p>
<p>Moreover, the function doesn't work.  <code>-54</code> and <code>-96</code> return nothing:</p>
<pre class="lang-none prettyprint-override"><code>&gt;&gt;&gt; solve(-54)
&gt;&gt;&gt; solve(-96)
</code></pre>
<h1>A better algorithm</h1>
<p>Instead of computing all of the factors of <code>number</code>, determine the prime factorization of <code>number</code>.  For instance:</p>
<p><span class="math-container">$$ \sqrt {96} = \sqrt { 2^5 * 3^1 } $$</span></p>
<p>Any odd power will result in that factor to the power of 1 under the square root.  After removing those, you've got primes raised to even powers, which can all be divided by two, and moved out from the square-root:</p>
<p><span class="math-container">$$ \sqrt {96} = \sqrt { 2^4 } * \sqrt {2^1 * 3^1} = 2^2 * \sqrt {2^1 * 3^1} $$</span></p>
    </div>