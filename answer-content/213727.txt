<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The design may sound fine as long as you’re using a single <code>default_factory</code> throughout your application; but this design permit more than that and does not handle it properly.</p>

<p>You could have two parts of your application (say two <code>tornado.web.RequestHandler</code> or two <code>threading.Thread</code>) that uses your singleton like:</p>

<pre><code># part 1
cache = ThreadSafeSingletonCache(int)
cache.set(username, user_id)
count = cache.get('count')
cache.set('count', count + 1)
…

# part 2
cache = ThreadSafeSingletonCache(dict)
settings = cache.get(username)
…
</code></pre>

<p>This may not be <em>how</em> you use it, but it is something you <em>can</em> do. So, in this scenario, what could possibly go wrong? Well, both parts could start executing "at the same time", run the <code>cache = …</code> line one after the other and then, either <code>count</code> can be a <code>dict</code> instead of an <code>int</code> or <code>settings</code> can be an <code>int</code> instead of a <code>dict</code>.</p>

<p>There are various ways to solve this, but having to specify the internal type held by your singleton <em>at each instantiation</em> is not one of them. Ideally you want either:</p>

<ol>
<li>to let the singleton aspect out of the cache and let the calling code decide on its own if it needs a single instance or not (using global objects, shared state, or whatever…);</li>
<li>to specify a single time which kind of object is stored in the cache, ideally in a setup phase before spawning threads/IO loop;</li>
<li>to specify the kind of queried objects at the <code>get</code> call, like a regular <code>dict.get</code> call.</li>
</ol>

<p>Implementing the first solution is very easy, just drop the <code>__new__</code> method and call it a day, it is not your problem anymore. The second one could use an init like:</p>

<pre><code>def __init__(self, default_factory=None):
    factory = self.default_factory
    if factory is None:
        if default_factory is None:
            raise RuntimeError('must specify a factory at first instantiation')
        self.default_factory = default_factory
    elif default_factory is not None:
        raise RuntimeError('should not specify a default factory more than once')
</code></pre>

<p>Of course, you’ll need to define the <code>default_factory = None</code> argument at class level for this to work. This implementation is not wrapped into locks because this could allow a call with and without <code>default_factory</code> to compete and run into a <code>RuntimeError</code> anyway. So the first call <strong>must</strong> be done in a race-condition-free part of the code.</p>

<p>The last solution is by far my favorite as it is the most versatile and the least surprising: just mimic <code>dict.get</code> and ask for either a default value or a default constructor.</p>

<hr>

<p>Also for this particular class, I would implement <code>__getitem__</code> and <code>__setitem__</code> for ease of use. And, for stylistic reasons, recommend the <a href="http://code.activestate.com/recipes/66531-singleton-we-dont-need-no-stinkin-singleton-the-bo/" rel="nofollow noreferrer">Borg pattern</a>. <em>e.g.</em>:</p>

<pre><code>class ThreadSafeCache:
    __shared_state = {
        'default_factory': None,
        '_lock': threading.Lock(),
        '_cache': {},
    }
    def __init__(self, default_factory=None):
        self.__dict__ = self.__class__.__shared_state

        factory = self.default_factory
        if factory is None:
            if default_factory is None:
                raise RuntimeError('must specify a factory at first instantiation')
            self.default_factory = default_factory
        elif default_factory is not None:
            raise RuntimeError('should not specify a default factory more than once')
</code></pre>
    </div>