<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I made some modifications to your <code>View</code> class and created this GUI.</p>

<p><a href="https://i.stack.imgur.com/uNKv9.png" rel="noreferrer"><img src="https://i.stack.imgur.com/uNKv9.png" alt="Life GUI"></a></p>

<p>I couldn't get the <code>Game</code> class to cycle through generations.  Maybe I missed something.  I didn't see where the <code>Game</code> class needed any changes.</p>

<p>Here are the changes I made to your <code>View</code> class.</p>

<ol>
<li><p>I started the GUI on the <a href="https://docs.oracle.com/javase/tutorial/uiswing/concurrency/dispatch.html" rel="noreferrer">Event Dispatch Thread</a> (EDT) by calling the <code>SwingUtilities</code> <code>invokeLater</code> method.  This ensures that the Swing components are created and updated on the EDT.</p></li>
<li><p>I put the painting code in the <code>paintComponent</code> method.  I called <code>super.paintComponent</code> to maintain the Swing paint chain.  I removed all code that wasn't painting code.</p></li>
<li><p>I put <code>@Override</code> annotations on all of the methods I overrode.  That way, the compiler will possibly tell me if there's a problem with my method calls.</p></li>
<li><p>I scaled the <code>JPanel</code> to a more reasonable size.  Some of us still have tiny monitors.  I got rid of most of the magic numbers.</p></li>
</ol>

<p>Here's the <code>View</code> class code.</p>

<pre><code>import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;

import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.SwingUtilities;

public class View extends JPanel implements Runnable {

    private static final long serialVersionUID = 1L;

    private boolean[][] grid;

    private int margin;
    private int squareWidth;

    private Game game;

    public View() {
        this.game = new Game(10, 10);
        this.game.randomGrid(0.2);
        this.grid = game.getGrid();

        this.margin = 50;
        this.squareWidth = 32;
        int width = squareWidth * 10 + margin + margin;
        this.setPreferredSize(new Dimension(width, width));
    }

    @Override
    public void run() {
        JFrame frame = new JFrame("Conway's Game of Life");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        frame.getContentPane().add(new View());
        frame.pack();
        frame.setLocationByPlatform(true);
        frame.setVisible(true);

        Thread thread = new Thread(new Timer(game, this));
        thread.start();
    }   

    public void setGrid(boolean[][] grid) {
        this.grid = grid;
    }

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);

        int generation = game.getGen();
        String text = "Generation: " + generation;
        g.setColor(Color.BLACK);
        g.drawString(text, 10, 30);

        g.setColor(Color.red);
        for (int j = 0; j &lt; grid.length; j++) {
            for (int i = 0; i &lt; grid[j].length; i++) {
                int x = margin + (squareWidth * i);
                int y = margin + (squareWidth * j);
                g.drawRect(x, y, squareWidth, squareWidth);
                if (grid[j][i]) {
                    g.fillRect(x, y, squareWidth, squareWidth);
                }
            }
        }

    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(new View());
    }

} 
</code></pre>

<p>I created a new Timer class to update the GUI every 5 seconds.  Since the GUI never changed, I put a <code>System.out.println</code> method in the timer loop to make sure it was running.</p>

<p>You can change the 5 second delay if you wish.</p>

<pre><code>import javax.swing.SwingUtilities;

public class Timer implements Runnable {

    private volatile boolean running;

    private Game game;

    private View view;

    public Timer(Game game, View view) {
        this.game = game;
        this.view = view;
        this.running = true;
    }

    @Override
    public void run() {
        while (running) {
            sleep(5000L);
            game.newGen();
            updateView();
//          System.out.println("running");
        }
    }

    private void sleep(long duration) {
        try {
            Thread.sleep(duration);
        } catch (InterruptedException e) {
            // Deliberately left empty
        }
    }

    private void updateView() {
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                view.setGrid(game.getGrid());
                view.repaint();
            }
        });
    }

    public synchronized void setRunning(boolean running) {
        this.running = running;
    }

}
</code></pre>
    </div>