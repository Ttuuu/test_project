<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There is no general rule for using <code>IEnumerable</code> or not but there is one that says that you should use the most abstract representation of something because it gives you the most felxibility in what you can pass to such method because there would be fewer restrictions. </p>

<p>This means if you are iterating a collection and you do this only once then <code>IEnumerable&lt;T&gt;</code> is perfect because there is virtually nothing more general than this. However, if you plan to use <code>Add</code> or <code>Count</code> or iterate a collection multiple times then something meterialized would be more appropriate like <code>IList&lt;T&gt;</code> or <code>ICollection&lt;T&gt;</code>.</p>

<blockquote>
<pre><code>public int CountPlayerScoreBySum(IEnumerable&lt;Answer&gt; playerAnswers, 
    IEnumerable&lt;QuestionAnswer&gt; correctAnswers)
{
    var sum = 0;
    foreach (var userAnswer in playerAnswers)
    {
        var correctAnswer = correctAnswers
            .Where(a =&gt; a.IdQuestion == userAnswer.IdQuestion)
            .FirstOrDefault();

        if (correctAnswer != null) {
            if (userAnswer.IdAnswer == correctAnswer.IdAnswer)
                sum += 1;
        }
    }

    return sum;
}
</code></pre>
</blockquote>

<p>Here, e.g. the first argument is ok, it's iterated only once but <code>correctAnswers</code> is used multiple times inside the loop so it probably should be something like <code>IList&lt;T&gt;</code> to make it more predictible and to inform the caller that you are going to use it more then once because it might otherwise execute some lengthly query.</p>

<p>You could also materialize it inside the method but this is not always a good idea and to make such decisions requires to take a look at the big picture and the entire design. Sometimes it's acceptable, another time it might not be the case.</p>

<p>So the bottom line is, don't <em>stupidly</em> use any type because some book says so but rather look carefully which type is the simplest one you can use and gives you the required felxibility at the same time. You have to decide in on case by case basis. You'll mostly end up with <code>IEnumerable&lt;T&gt;</code> anyway but make it a sensible decision and not <em>I've heard that...</em>.</p>
    </div>