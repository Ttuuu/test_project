<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Overall this looks fine. There are some small things that I would note, though.</p>

<ul>
<li><p>If you deconstruct the return value from <code>ValidateAndParseInsutrctions</code> (typo, btw) like so:</p>

<pre><code>var (valid, instructions) = ValidateAndParseInstructions(...);
</code></pre>

<p>you can have shorter assignments afterwards:</p>

<pre><code>if (!valid) return string.Empty;

var xLength = instructions.Plateau.XTotalLength;
var yLength = instructions.Plateau.YTotalLength;
// ...
</code></pre>

<p>which reads a bit nicer.</p></li>
<li><p>I don't really see the need for <code>SetStartingPosition</code>. You're not setting a position, you're creating and returning a <code>Position</code>. This method is basically a wrapper around the <code>Position</code> constructor.</p></li>
<li><p>I don't like how <code>Move</code> sometimes mutates the input <code>currentPosition</code> and sometimes returns a new <code>Position</code>. If I were you, I'd make <code>Position</code> immutable and always return a new one. As pointed out in the comments, if you were to make the class immutable, it would also be a good idea to rename it to <code>Location</code>.</p></li>
<li><p>In this piece of code:</p>

<pre><code>var lookupValue = DirectionLookup
            .FirstOrDefault(lookup =&gt; lookup.FacingDirection == currentPosition.FacingDirection.ToCharArray().FirstOrDefault() 
                                   &amp;&amp; lookup.Instruction == instruction);
</code></pre>

<p>you have the problem of mixing <code>char</code> (your method input) and <code>string</code> (your lookup). You should decide whether you want to represent instructions as <code>char</code> or <code>string</code> and then stick to it.</p>

<pre><code>var lookupValue = DirectionLookup.FirstOrDefault(lookup =&gt;
                  lookup.FacingDirection == currentPosition.FacingDirection
               &amp;&amp; lookup.Instruction == instruction);
</code></pre></li>
<li><p>Related to that, I'm wondering if it makes sense to replace the literals with <code>const</code> values (e. g. <code>private const string Move = "M";</code>).</p></li>
<li><p>I just saw that your <code>Navigate</code> method takes an <code>IList&lt;string&gt;</code> instead of an <code>IEnumerable&lt;string&gt;</code> like your problem statement says. As you do not need anything from the <code>IList&lt;T&gt;</code> interface, I'd say you can simply accept an <code>IEnumerable&lt;string&gt;</code> here.</p></li>
</ul>
    </div>