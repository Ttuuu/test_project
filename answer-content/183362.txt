<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Instance method vs. class method vs. function:</h3>
<p>You declared a constructor function <code>Calculator</code> whose instances all come with their own individual <code>calculate</code> method. Since the <code>calculate</code> method doesn't rely on other instance properties, it should probably be a class method instead.</p>
<p>In JavaScript, a class method is simply a property of the constructor function:</p>
<pre><code>function Calculator() { ... }

Calculator.calculate = function(sum) { ... };
</code></pre>
<p>Using class syntax, this is equivalent to:</p>
<pre><code>class Calculator { 
  ...
  static calculate(sum) { ... }
}
</code></pre>
<p>However, unless your <code>Calculator</code> will have additional properties later on, a simple <code>function calculate(sum) { ... }</code> instead of a class will do the job just fine.</p>
<h3>Instance properties and side effects:</h3>
<p>Within your calculate method, you create new instance properties such as <code>this.sumArr</code>, <code>this.newSum</code> and <code>this.summ</code> holding the result of the calculation. This is called a side effect. Pure functions without such side effects are easier to understand and debug.</p>
<p>Also, those property names are not very descriptive.</p>
<h3>Consistency:</h3>
<p>For different inputs, the values of <code>this.summ</code> and the return values of <code>calculate(sum)</code> are inconsistent:</p>
<pre><code>sum         calculate(sum)  this.summ 
-------------------------------------
undefined   TypeError       0
""          undefined       0
"1 x 1"     undefined       0
"1 + x"     NaN             NaN
</code></pre>
<p>Filtering your operands with <code>number &gt; 0</code> leads to strange effects such as returning <code>NaN</code> for inputs with a zero such as <code>0 + 1</code> and returning <code>1</code> for input <code>bla - bla + 3 + 2</code>.</p>
<h3>Parsing:</h3>
<p>Instead of <code>parseInt(str)</code> I recommend using the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Arithmetic_Operators#Unary_plus_()" rel="nofollow noreferrer">unary plus operator</a> <code>+str</code> which is "the fastest and preferred way of converting something into a number" according to MDN.</p>
<p>To split an expression into operands and operator, I recommend using robust regular expressions. A regular expression makes it much easier to understand which input strings will be accepted as valid and which input strings will be rejected.</p>
<h3>Implementation:</h3>
<p>First, the available operations are declared. Then, the input is parsed. For valid input, the result of the operation is returned. For invalid (non-matching) input, <code>undefined</code> is returned:</p>
<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>function calculate(expression) {
  const operations = {
    '+': (left, right) =&gt; left + right,
    '-': (left, right) =&gt; left - right,
  };
  const [match, left, op, right] = expression.match(/^(\d+) (\+|\-) (\d+)$/) || [];
  return match ? operations[op](+left, +right) : undefined;
}

// Example:
console.log(calculate("3 + 7")); // 10
console.log(calculate("3 - 7")); // -4</code></pre>
</div>
</div>

<p>Replacing above regular expression with e.g. a much more refined <code>^\s*([\+\-]?(?:\d*[.])?\d+)\s*(\+|\-)\s*([\+\-]?(?:\d*[.])?\d+)\s*$/</code> allows you to capture floating point numbers, negative numbers and whitespace. To support more operations, simply append them to the <code>operations</code> object literal, e.g. <code>'*': (left, right) =&gt; left * right</code> and add <code>\*</code> to the operator capture group within the regular expression.</p>
    </div>