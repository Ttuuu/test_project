<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>To get this code to compile I had to add the <code>Sort</code> namespace definition:</p>

<pre><code>namespace Sort
{
    template &lt;typename RandomIt, typename Compare = std::less_equal&lt;&gt;&gt;
    void QuickSort(RandomIt first, RandomIt last, Compare compare = Compare());

    template &lt;typename RandomIt, typename Compare&gt;
    RandomIt Partition(RandomIt first, RandomIt last, Compare compare);

    template &lt;typename RandomIt, typename Compare&gt;
    RandomIt MedianOf3(RandomIt first, RandomIt last, Compare compare);
}
</code></pre>

<p>And I had to remove the default argument from the redeclaration of <code>Sort::QuickSort</code>:</p>

<pre><code>template &lt;typename RandomIt, typename Compare = std::less_equal&lt;&gt;&gt;
void Sort::QuickSort(RandomIt first, RandomIt last, Compare compare)
</code></pre>

<p>Review requests should have issues like that already accounted for.</p>

<hr>

<p>The performance of the <code>Partition()</code> function can be improved by doing fewer swaps.  The current loop swaps when <code>*j</code> &lt; <code>*pivot</code>, without considering whether <code>*i</code> is less or greater than <code>*pivot</code>.  Instead, we can use two iterators, and advance them towards each other, swapping only when the ascending iterator points to an item greater than pivot <em>and</em> the descending iterator points to one smaller than pivot.  The tricky bit is to avoid the iterators passing each other without terminating.</p>
    </div>