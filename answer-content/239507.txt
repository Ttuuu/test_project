<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The problem of your code is the way you generate triangles. You just create three <strong>independent</strong> random numbers. In theory, you could always end up rolling numbers that don't end up in a valid triangle and thus your code would not even terminate. That is, because triangle side lengths are <strong>dependent</strong>.</p>

<p>To always create a valid triangle, you can instead roll two angles and one side and then use the <a href="https://en.wikipedia.org/wiki/Law_of_sines" rel="nofollow noreferrer">law of sines</a> to calculate the remaining sides.</p>

<p>The sum of angles in a triangle is 180 degrees (or pi radians). So the first angle <em>alpha</em> is randomly selected between <em>(0, pi)</em>, the second angle <em>beta</em> is then between <em>(0, pi-alpha)</em> and the third angle <em>gamma</em> is gained by simple arithmetics: <em>gamma = pi - alpha - beta</em></p>

<p>Or in code:</p>

<pre><code>alpha = random.uniform(0, math.pi)
beta  = random.uniform(0, math.pi - alpha)
gamma = math.pi - alpha - beta
</code></pre>

<p>If we know two sides and the angle in between, <a href="https://www.mathsisfun.com/algebra/trig-area-triangle-without-right-angle.html" rel="nofollow noreferrer">we can easily calculate the area</a>. Since your inequality uses twice the area, we can drop the factor of <em>0.5</em>.</p>

<pre><code>double_area = side_b * side_c * sin_alpha
</code></pre>

<p>Some micro-optimisations: math.sin is an expensive function (time-wise), so we save the result in a variable. Same goes for floating point division. Multiplication is faster, so once again, we save the result to use multiplication later on.</p>

<p>Lastly: Since you already know how often you want to execute the loop, you can use a for-loop instead of a while-loop although frankly, I don't know how well this goes in terms of memory consumption.</p>

<pre><code>import math
import random
import time


max_side_length = 100000000
n_max_tries     = 10000000
n_successes     = 0

time_start      = time.time()

for k in range(n_max_tries):
    alpha                   = random.uniform(0, math.pi)
    beta                    = random.uniform(0, math.pi - alpha)
    gamma                   = math.pi - alpha - beta

    side_a                  = random.randint(1, max_side_length)
    sin_alpha               = math.sin(alpha)
    side_a_over_sin_alpha   = side_a / sin_alpha

    side_b                  = side_a_over_sin_alpha * math.sin(beta)
    side_c                  = side_a_over_sin_alpha * math.sin(gamma)

    double_area             = side_b * side_c * sin_alpha

    if side_a * side_b * side_c &gt; double_area:
        n_successes += 1

time_end = time.time()

print("successes: ", n_successes, " / ", n_max_tries, " (", n_successes/n_max_tries, ")")
print("time: ", time_end-time_start)
</code></pre>

<p>I didn't do excessive timings because I couldn't be bothered, but this code runs on my machine in about 37.8s, while three runs of your code averaged on 109.8s, resulting in an optimistic speed-up factor of around 3.</p>

<p><strong>Disclaimer:</strong> I can somewhat write in python but I'm probably violating this famous pep-8. Yet, I strongly encourage you to give reasonable names to your variables as it makes the code more easy to understand. Not only for others, but also for yourself, when you look at it 2 weeks later. </p>
    </div>