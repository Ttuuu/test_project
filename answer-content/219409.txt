<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">


<h3>Frame challenge</h3>

<blockquote>
  <p>I was trying to avoid "complexity", so get rid of 3rd part libs</p>
</blockquote>

<p>Although it's not strictly code review, I would like to start by challenging this goal. There are many many official Microsoft libraries with dependencies on Newtonsoft.Json. (See <a href="https://softwareengineering.stackexchange.com/a/347972/13258">this answer on our software engineering sister site</a>).</p>

<hr>

<h3>Core code</h3>

<blockquote>
<pre class="lang-cs prettyprint-override"><code>    public static string ObjectToJson(object o, Type t, Type[] pTypes = null)
</code></pre>
</blockquote>

<p>This absolutely needs documentation comments explaining what <code>t</code> and <code>pTypes</code> are for. As a maintenance programmer this signature is unhelpful on two counts:</p>

<ol>
<li>I have no idea why I need to pass types at all. If <code>ObjectToJson</code> needs the type of the object for some reason it can call <code>o.GetType()</code>.</li>
<li>The names are not helpful. I'm guessing that <code>t</code> is the type of <code>o</code>, but that's a pure guess. As for <code>pTypes</code>, is that Hungarian notation for "<em>pointer to type</em>"? That has no place in C# code unless you're using <code>unsafe</code> and actual pointers (and even there the name should tell you what the variable is for and not just what its type is).</li>
</ol>

<p>With respect to point 1, I would suggest that in addition to improving the names and adding documentation you consider two further refactorings: either making <code>t</code> an optional parameter with default <code>null</code> and calling <code>o.GetType()</code> if necessary; or changing the signature to <code>public static string ObjectToJson&lt;T&gt;(T obj, IEnumerable&lt;Type&gt; whateverPTypesShouldBeCalled)</code> so that the compiler can infer the type but the caller can impose a supertype if that's necessary for some bizarre reason. (In case you don't know: you can use <code>typeof(T)</code> with <code>T</code> a type variable to get a <code>Type</code> object).</p>

<hr>

<blockquote>
<pre class="lang-cs prettyprint-override"><code>        DataContractJsonSerializer serializer = (pTypes != null ? new DataContractJsonSerializer(t, pTypes) : new DataContractJsonSerializer(t));
</code></pre>
</blockquote>

<p>Might it make more sense to use <code>new DataContractJsonSerializer(t, pTypes ?? Enumerable.Empty&lt;Type&gt;())</code>?</p>

<hr>

<blockquote>
<pre class="lang-cs prettyprint-override"><code>        MemoryStream mStrm = new MemoryStream();
        ...
        using (var sr = new StreamReader(mStrm, Encoding.UTF8))
</code></pre>
</blockquote>

<p>This is inconsistent: . I would favour the approach of always using <code>using</code> with <code>IDisposable</code>, even when you know that it doesn't use any unmanaged resources.</p>

<p>A comment explaining why <code>Encoding.UTF8</code> is correct would be an improvement.</p>

<hr>

<blockquote>
<pre class="lang-cs prettyprint-override"><code>    public static object JsonToObject(string json, Type t, Type[] pTypes = null)
    {
        DataContractJsonSerializer serializer = (pTypes != null ? new DataContractJsonSerializer(t, pTypes) : new DataContractJsonSerializer(t));
        using (var stream = new MemoryStream(Encoding.UTF8.GetBytes(json)))
        {
            return serializer.ReadObject(stream);
        }
    }
</code></pre>
</blockquote>

<p>I think all of the comments on <code>ObjectToJson</code> apply equally to <code>JsonToObject</code> with one exception: this time the signature makes a much stronger argument for use of generics. As it stands you probably have to cast the return value almost every time you use this method.</p>

<hr>

<h3>Usage example</h3>

<p>This is again marginally off-topic, so I won't do a detailed review of the example usage code, but I think it's important to address a couple of points.</p>

<blockquote>
<pre class="lang-cs prettyprint-override"><code>    private WebRequest createRequest(string pAction, string pFormValues)
</code></pre>
</blockquote>

<p>Every caller of this method is expected to compose <code>pFormValues</code>. That's the antithesis of <a href="https://en.wikipedia.org/wiki/Don%27t_repeat_yourself" rel="nofollow noreferrer">Don't Repeat Yourself</a>. The method which factors out the commonalities of requests should be the one place which composes the query string, and unlike the example</p>

<blockquote>
<pre class="lang-cs prettyprint-override"><code>            string formValues =
                "&amp;playerId=" + this.LogonInfo.userId.ToString() +
                "&amp;createdBy=" + pMyGames.ToString() +
                "&amp;tookPartIn=" + pGamesITookPartIn.ToString() +
                "";
</code></pre>
</blockquote>

<p>it should take care to escape the values.</p>

<hr>

<blockquote>
<pre class="lang-cs prettyprint-override"><code>            WebRequest request = createRequest("myGamesList", formValues);
            HttpWebResponse response = (HttpWebResponse)request.GetResponse();
            using (StreamReader sr = new StreamReader(response.GetResponseStream()))
            {
                string responseText = sr.ReadToEnd();

                if (responseText.Contains("\"errType\":"))
</code></pre>
</blockquote>

<p>Again, I would hope that the web service on the other end is consistent enough that handling the response can be done in one place rather than being repeated for every single call. And I would hope that it uses HTTP well enough that you don't have to do heuristic guessing to figure out whether there was a problem. Instead of looking for <code>"errType":</code> it should switch on <code>response.StatusCode</code>.</p>

<hr>

<blockquote>
<pre class="lang-cs prettyprint-override"><code>        WebRequest request = WebRequest.Create(this.ServerUrl + "?action=" + pAction);

        request.Method = "POST";
        request.ContentType = "application/x-www-form-urlencoded";
        request.ContentLength = pFormValues.Length;
</code></pre>
</blockquote>

<p>I find it bizarre that the form values are split between the URL and the request body.</p>
    </div>