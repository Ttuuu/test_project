<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Review</h3>

<ul>
<li>Your system is timespan based. This is fine, but I would opt for a time-indexed system completely independant of any time unit. You could then provide a callback function that provides the timespan for a single time unit <code>() =&gt; Time.deltaTime;</code> or alternatively with the index as argument, so you could skew time if you desire to <code>(index) =&gt; index * Time.deltaTime;</code>. I like being independant from actual time and work with discrete time instead. It allows flexibility in defining time. </li>
<li>The easing functions look alright, I would only refactor <code>Animate</code> and its nested class <code>ActionSequence</code>.</li>
<li>The fields of <code>ActionSequence</code> should be (almost-)immutable properties, or at least unmodifiable from a public perspective. State should only change through methods, this enforces integrity and encapsulation.</li>
<li><code>Next</code> should have a circular incrementation <code>CurrentIndex = CurrentIndex + 1 % Length;</code></li>
<li><code>ActionSequence</code> should know whether is has completed, based on <code>CurrentIndex</code>, <code>Length</code> and <code>Repeat</code>.</li>
<li><code>Animate.Update</code> should be cleaned up. Much of the behavior should be forwared to a <code>sequence</code> instance. This would provide better encapsulation.</li>
<li>These <code>goto Done;</code>, <code>continue;</code> statements should be refactored because you have made some spaghetti code here. It's hard to read method <code>Update</code> like this.</li>
<li><code>_sequences.RemoveAt(i);</code> should be replaced by having a flag on a sequence <code>IsCompleted</code>. I would not modify the instance assignmens in the array. Using LINQ with <code>Where(!IsCompleted)</code> reads much better.</li>
<li>You might want to think about a recursive structure where an action migth have 0 or more sequences, each containing 1 or more actions. You'd be able to design much more complex scenarios.</li>
</ul>
    </div>