<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You solution look fine so far (maybe to much empty lines, but that's just peanuts ;)).</p>

<p>If you are intested in a more object oriented approach, I'll show you an alternative solutions. It looks (and is) quite overengineert for such a simple problem - but for real problems it is often a good choice :).</p>

<p>First, abstract the 4 mathematical operations and it's attributes. That allows to define it once and use it gernerally.</p>

<p><strong>Class Operation</strong></p>

<pre><code>public class Operation
{
    public Operation(string name, string op, Func&lt;double, double, double&gt; action)
    {
        this.Name = name;
        this.Operator = op;
        this.Calc = action;
    }

    public string Name { get; }
    public string Operator { get; }
    public Func&lt;double, double, double&gt; Calc { get; }   
}
</code></pre>

<p>Note that <code>Func&lt;double, double, double&gt;</code> is a so called delegate that can handle methods like variables. <code>(a, b) =&gt; a + b</code> is a lamda expression which is shorthand for <code>private double Add(a, b) { return a + b; }</code>.</p>

<p><strong>Model definition</strong></p>

<p>Here we define the available operations. </p>

<pre><code>// define the available operations
var operations = new Operation[]
{
    new Operation("addition", "+", (a, b) =&gt; a + b),
    new Operation("subtraction", "-", (a, b) =&gt; a - b),
    new Operation("multiplication", "*", (a, b) =&gt; a * b),
    new Operation("division", "/", (a, b) =&gt; a / b),
};
</code></pre>

<p><strong>Generic processing code</strong></p>

<p>The actually proccing code is generic and uses only the abstractions:</p>

<pre><code>// loop over all operations
foreach (var o in operations)
{
    // and print a generic info message
    Console.WriteLine($"Type \"{o.Operator}\" for {o.Name}.");
}

var opName = Console.ReadLine();
// try to get the operation based on the name
var op = operations.FirstOrDefault(o =&gt; o.Operator == opName);

// print error if operation is not available
if (op == null)
{
    Console.Write("Invalid Operator!");
    Environment.Exit(-1);
}

Console.Write("Now, Give me number one: ");
// try to parse the input and print an error if number is not valid
if (!double.TryParse(Console.ReadLine(), out var num1))
{
    Console.WriteLine("Invalid Number!");
    Environment.Exit(-1);
}

Console.Write("Now give me number two: ");
if (!double.TryParse(Console.ReadLine(), out var num2))
{
    Console.WriteLine("Invalid Number!");
    Environment.Exit(-1);
}

// use the delegate of the operation to do the actual calculation
Console.WriteLine(op.Calc(num1, num2));
</code></pre>

<p>The nice thing about that approch is that</p>

<ul>
<li>Any changes to the operations (e.g. adding new ones) does not require to understand the processing code</li>
<li>The processing code is not redundant (changes has to be done once).</li>
</ul>

<p>Compare the necessary changes of the following use cases with your solution:</p>

<ul>
<li>Adding a new operation '%'. How many locations must be adjusted?</li>
<li>Change the text of the string that "Type "[op]" for [Name]" How many locations must be adjusted?</li>
</ul>
    </div>