<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>RE60K has already critiqued your algorithm, so I'll just leave some minor comments on the code style. These comments won't help you beat the time limit, but they are good habits to get into if you're going to take a coding interview someday, for example.</p>

<p>Your <code>class Solution</code> has only public members. Classes with all public members are frequently defined as <code>struct</code>s instead.</p>

<p>In fact, your class has no data members! Classes with no data members should probably just be free functions. See <a href="https://quuxplusone.github.io/blog/2020/05/28/oo-antipattern/" rel="nofollow noreferrer">The "OO" Antipattern</a>.</p>

<p>Alternatively, you could keep the class as a sort of "namespace" for these two functions, but mark both functions <code>static</code>, so that you don't waste CPU cycles passing around a <code>this</code> pointer that you'll never use. In this case, you should also mark <code>maxScoreUtil</code> as <code>private</code> because it should never be called by anyone outside the class itself.</p>

<p><em>Alternatively</em>, notice that your current code is paying for a <code>this</code> pointer <em>and also</em> paying to pass <code>dp</code> as the last argument to <code>maxScoreUtil</code>! It should only ever pay for one or the other. If <code>dp</code> always points to the same vector, maybe <code>dp</code> should be a data member of <code>class Solution</code>.</p>

<p>In all of these cases, the elements of <code>cardPoints</code> are not intended to be modified, so you should mark that parameter as <code>const</code>.</p>

<p>To summarize: Right now your code's skeleton is</p>

<pre><code>class Solution {
public:
    int maxScoreUtil(int left, int right,vector&lt;int&gt;&amp; cardPoints, int k,vector&lt;vector&lt;int&gt;&gt;&amp; dp);
    int maxScore(vector&lt;int&gt;&amp; cardPoints, int k);
};
</code></pre>

<p>but it should probably be either</p>

<pre><code>class Solution {
    static int maxScoreImpl(int left, int right, const vector&lt;int&gt;&amp; cardPoints, int k, vector&lt;vector&lt;int&gt;&gt;&amp; dp);
public:
    static int maxScore(const vector&lt;int&gt;&amp; cardPoints, int k);
};
</code></pre>

<p>or</p>

<pre><code>static int maxScoreImpl(int left, int right, const vector&lt;int&gt;&amp; cardPoints, int k, vector&lt;vector&lt;int&gt;&gt;&amp; dp);
int maxScore(const vector&lt;int&gt;&amp; cardPoints, int k);
</code></pre>

<p>or arguably</p>

<pre><code>class Solution {
    vector&lt;vector&lt;int&gt;&gt; dp;
    vector&lt;int&gt; cardPoints;
    int maxScoreImpl(int left, int right, int k);
public:
    static int maxScore(vector&lt;int&gt; cardPoints, int k) {
       int n = cardPoints.size();
       Solution s{ vector&lt;vector&lt;int&gt;&gt;(n+1, vector&lt;int&gt;(n+1, -1)), std::move(cardPoints) };
       return s.maxScoreImpl(0, n-1, k);
    }
};
</code></pre>

<hr>

<p>Notice that I've quietly changed your <code>maxScoreUtil</code> to <code>maxScoreImpl</code> (for "implementation"); that's the usual convention for an internal implementation function. "Util" (for "utilities") is more often used as a namespace or class name for <em>general-purpose</em> utility functions.</p>

<hr>

<pre><code>    if(k == 0 || left == cardPoints.size() || right &lt; 0)
        return 0;
</code></pre>

<p>Surely this should say <code>... || right &lt; left</code>. Also, here and on the next line, you should get in the habit of curly-bracing any time you indent. It'll save you a lot of debugging someday. Consider the difference between</p>

<pre><code>if (failed) {
    puts("oops, exiting");
    exit(0);
}
</code></pre>

<p>and</p>

<pre><code>if (failed)
    puts("oops, exiting");
    exit(0);
</code></pre>
    </div>