<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ol>
<li><p>You have a stateful model that has three states: Pausing, Running, Stopped.
I would represent this with a <a href="https://en.wikipedia.org/wiki/State_pattern" rel="nofollow noreferrer">State-pattern</a>. For me there is too much micro-handling (isPauseRequested, !Thread.currentThread().isInterrupted()) as the concept of the model is the handling of these states.</p></li>
<li><p>As a matter of symmetry I avoid using volatile variables. I currently heard about the concept of "single source of truth" (<a href="https://en.wikipedia.org/wiki/Single_source_of_truth" rel="nofollow noreferrer">SSOT</a>) as you have TWO sources that have dependencies: the lock object and the volatile variable. Even for the sake of efficiency I would use the lock object to express the "monitor" for all elements that should be handled in the monitor.</p></li>
<li><p>(Optional as you want to follow my path) Even if some literature says something else (I know about that) I
prefer synchronized methods. That has for me following reasons:
First I want the developer using my objects to know about
synchronization BESIDE potential documentation. Second I do not
explicitly want to allow other developers using MY objects in THEIR
synchronization purposes as I see this as semantically wrong. THEIR
implementation should fail (mostly dead locks) because MY
implementation is responsible for MY objects and using developers should not take over this responsibility.</p></li>
<li><p>As your model is composing the elements to provide the expected functionality I would locate any synchronization mechanisms there as well. Your ResumableModel becomes the monitor. You the either make all model-method synchronized or move the lock-object to the ResumableModel. This depends on if you follow my path or not.</p></li>
</ol>
    </div>