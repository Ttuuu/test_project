<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'm not sure a class is exactly what you want - a chart is already an object with the properties/methods you want. You want to create a sub that takes the arguments you need, like</p>

<pre><code>Sub CreateChart(ByVal targetRange As Range, ByVal PosTopLeft As String, byval PosBottomLeft As String, ByVal lastColumn As Long, ByVal chartType As XlChartType)
    Dim strRange As String
    Dim rngChart As Range
    Dim myChart As Chart
    lngstartrow = Sheets(ToPrint.Worksheet.Name).Range(PosTopLeft).Row
    lngendrow = Sheets(ToPrint.Worksheet.Name).Range(PosBottomLeft).Row

    Sheets(ToPrint.Worksheet.Name).Activate
    Sheets(ToPrint.Worksheet.Name).Range(.Cells(lngstartrow, 1), (.Cells(lngendrow, lastColumn))).Select

    Select Case XlChartType
        Case xlLine
            Set myChart = ActiveSheet.Shapes.AddChart(xlLine, 500, 200).Chart
        Case xlColumnClustered
            Set myChart = ActiveSheet.Shapes.AddChart(xlColumnClustered, 500, 10, , 175).Chart
    End Select
End Sub
</code></pre>

<p>And then you can have some variable that picks the number of series by the type of chart, then add all the series with a loop. You can also have a string that picks the title based on case.</p>

<p>The key is to combine as many parts of the process into a single process. Combining something a little like this -</p>

<pre><code>Case xlLine
    numberofseries = 2
Case xlColumnClustered
    numberofseries = 3

For i = 1 To numberofseries
    .SeriesCollection(i).Name = .Cells(lngstartrow - 1, i + 1).Value
Next
</code></pre>

<p>So your case statements don't have to do very much, all they need to do is assign the proper variables to be used in the next parts.</p>
    </div>