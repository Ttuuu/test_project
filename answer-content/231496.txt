<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Welcome to the wonderful world of C programming where you have to do everything yourself.</p>

<p>The C programming language is basically a high level assembly language, there is no garbage collection and the programmer has to manage the memory themselves.</p>

<h2>The Good</h2>

<p>Before I start discussing what can be improved, I'll mention the good things:<br>
 - The code is quite readable<br>
 - No casts from <code>malloc()</code> to the receiving variable<br>
 - The code follows the Single Responsibility and KISS principles, lots of nice small functions, although the function <code>struct Mesh generate_mesh(double* coordinates, int num_nodes, int num_elements)</code> could have 2 sub-functions to implement it, each of the for loops could be a function.<br>
 - There is only one Magic Number, and that one is forgivable, the <code>5000000</code> used to initalize the variable <code>num_elements</code></p>

<h2>Error Checking</h2>

<p>The allocation functions <code>malloc()</code>, <code>calloc()</code> and <code>realloc()</code> have been known to fail. This happens less often now than historically because computers generally have more memory than they used to, but there are still cases of limited memory such as in embedded programming. </p>

<p>When an allocation function fails it returns <code>NULL</code>. Reference through a NULL pointer causes unknown behavior, and generally the program will terminate without an explanation. It is a good habit to test the results of the allocation before using the pointer in code:</p>

<pre><code>    double* coordinates = malloc(num_nodes * sizeof(double));
    if (!coordinates)
    {
        fprintf(stderr, "Allocation of coordinates failed, exiting program\n");
        exit(EXIT_FAILURE);
    }

    for (int i=0; i &lt; num_nodes; i++)
    {
        coordinates[i] = (double) rand() / RAND_MAX;
    }
</code></pre>

<p>There are other ways to handle this error, you might want to learn about <a href="https://en.wikipedia.org/wiki/Setjmp.h" rel="nofollow noreferrer">setjmp and longjmp</a>. There is a discussion about setjmp and longjmp in this <a href="https://stackoverflow.com/questions/14685406/practical-usage-of-setjmp-and-longjmp-in-c">stackoverflow question</a>. There are problems using <code>exit()</code> in some cases.</p>

<h2>Prevent Memory Leaks</h2>

<p>As mentioned above, C doesn't have garbage collection, the programmer is responsible for de-allocating memory through the use of <code>free()</code>. If this program was part of a larger more complex program there would be memory leaks because none of the allocated memory is ever freed. This could lead to other memory allocation failing.</p>

<p>In reference to the edit, you could <code>free</code> the <code>nodes</code> array after the content of the <code>nodes</code> were copied into the <code>elements</code>.</p>

<h2>Prefer <code>calloc</code> Over <code>malloc</code> for Arrays</h2>

<p>The function <a href="https://en.cppreference.com/w/c/memory/calloc" rel="nofollow noreferrer">calloc(size_t num, size_t size)</a> is generally preferred over <code>malloc(size_t size)</code> for arrays. The first parameter is the number of items to allocate, the second number is the size of the items. The parameters obviously make sense for arrays. One of the benefits of <code>calloc()</code> is that it zeros out each element of the array when the memory is allocated.</p>

<p>When allocating memory the code become more maintainable when the <code>sizeof()</code> function contains the variable the memory is being assigned to rather than the actual type. This allows the programmer or maintainer t change the type of the variable without having to change the code of the allocation itself. An example is :</p>

<pre><code>    double* coordinates = calloc(num_nodes, sizeof(*coordinates));
    if (!coordinates)
    {
        fprintf(stderr, "Allocation of coordinates failed, exiting program\n");
        exit(EXIT_FAILURE);
    }
</code></pre>

<p>In the code above changing the type of the variable <code>coordinates</code> automatically changes the size of the items being allocated.</p>
    </div>