<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here are some things that may help you improve your code.</p>

<h2>Don't abuse <code>using namespace std</code></h2>

<p>Putting <code>using namespace std</code> at the top of every program is <a href="https://stackoverflow.com/questions/1452721/why-is-using-namespace-std-considered-bad-practice">a bad habit</a> that you'd do well to avoid.  </p>

<h2>Rethink your object design</h2>

<p>Right now, the <code>Solver</code> object simply holds two dozen static strings.  It has no intelligence and does not, in any sense, <em>know</em> anything about the cube it purports to solve.  A better solver might keep a <em>model</em> of the scrambled cube to track its state.</p>

<h2>Don't optimize blindly</h2>

<p>First, we should keep in mind what Donald Knuth has said about optimization: </p>

<blockquote>
  <p>"The real problem is that programmers have spent far too much time worrying about efficiency in the wrong places and at the wrong times; premature optimization is the root of all evil (or at least most of it) in programming."</p>
</blockquote>

<p>Your particular program probably spends 99% of its time doing I/O, so the performance differences among possible alternatives is probably best approximated as zero.  If what you're really after is a better algorithm, then that's a different problem.</p>

<h2>Don't use <code>std::endl</code> if <code>'\n'</code> will do</h2>

<p>Using <code>std::endl</code> emits a <code>\n</code> and flushes the stream.  Unless you really need the stream flushed, you can potentially improve the performance of the code by simply emitting <code>'\n'</code> instead of using the potentially more computationally costly <code>std::endl</code>.</p>

<h2>Use string concatenation</h2>

<p>The code currently includes these lines:</p>

<pre><code>cout&lt;&lt;"-----------------------------------------------"&lt;&lt;endl;
cout&lt;&lt;"|            Cube Solver 2x2 v1.0             |"&lt;&lt;endl;
cout&lt;&lt;"|            Developed by Pavan P             |"&lt;&lt;endl;
cout&lt;&lt;"-----------------------------------------------"&lt;&lt;endl&lt;&lt;endl;
cout&lt;&lt;"Enter the Sequence in small letters: ";
</code></pre>

<p>Each of those is a separate call to <code>operator&lt;&lt;</code> but they don't need to be.  Another way to write that would be like this:</p>

<pre><code>std::cout &lt;&lt;
    "-----------------------------------------------\n"
    "|            Cube Solver 2x2 v1.0             |\n"
    "|            Developed by Pavan P             |\n"
    "-----------------------------------------------\n"
    "Enter the Sequence in small letters: ";
</code></pre>

<p>This reduces the entire sequence to a single call to <code>operator&lt;&lt;</code> because consecutive strings in C++ (and in C, for that matter) are automatically concatenated into a single string by the compiler.</p>

<h2>Omit <code>return 0</code></h2>

<p>When a C or C++ program reaches the end of <code>main</code> the compiler will automatically generate code to return 0, so there is no need to put <code>return 0;</code> explicitly at the end of <code>main</code>.  </p>

<p><strong>Note:</strong> when I make this suggestion, it's almost invariably followed by one of two kinds of comments:  "I didn't know that." or "That's bad advice!"  My rationale is that it's safe and useful to rely on compiler behavior explicitly supported by the standard.  For C, since C99; see ISO/IEC 9899:1999 section 5.1.2.2.3:</p>

<blockquote>
  <p>[...] a return from the initial call to the <code>main</code> function is equivalent to calling the <code>exit</code> function with the value returned by the <code>main</code> function as its argument; reaching the <code>}</code> that terminates the <code>main</code> function returns a value of 0.</p>
</blockquote>

<p>For C++, since the first standard in 1998; see ISO/IEC 14882:1998 section 3.6.1:</p>

<blockquote>
  <p>If control reaches the end of main without encountering a return statement, the effect is that of executing return 0;</p>
</blockquote>

<p>All versions of both standards since then (C99 and C++98) have maintained the same idea.  We rely on automatically generated member functions in C++, and few people write explicit <code>return;</code> statements at the end of a <code>void</code> function.  Reasons against omitting seem to boil down to <a href="https://stackoverflow.com/questions/2581993/what-the-reasons-for-against-returning-0-from-main-in-iso-c/2582015#2582015">"it looks weird"</a>.  If, like me, you're curious about the rationale for the change to the C standard <a href="https://stackoverflow.com/questions/31394171/what-was-the-rationale-for-making-return-0-at-the-end-of-main-optional">read this question</a>.  Also note that in the early 1990s this was considered "sloppy practice" because it was undefined behavior (although widely supported) at the time.  </p>

<p>So I advocate omitting it; others disagree (often vehemently!)  In any case, if you encounter code that omits it, you'll know that it's explicitly supported by the standard and you'll know what it means.</p>
    </div>