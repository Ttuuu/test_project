<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Review</h2>

<ol>
<li><h3>Using meaningful names</h3>

<p>Yes, it's your teacher who named the variables, I guess. But I think, if you choose better names (say "list" and "value"), and explain him why you think a name that make sense is better, you're in the right way.</p></li>
<li><h3>Adopt const-correctness</h3>

<p>When value don't change, you should mark it as  <code>const</code>. <a href="https://isocpp.org/wiki/faq/const-correctness" rel="nofollow noreferrer">Here</a>, you have a full chapter of the C++ FAQ about what, how and where you have to care about this.</p></li>
<li><h3>Don't be redundant in your conditions</h3>

<p>As <a href="http://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines.html#es87-dont-add-redundant--or--to-conditions" rel="nofollow noreferrer">explained in the Core Guideline</a>, comparing a pointer to <code>nullptr</code> in a condition, not only is useless, but it's also much more verbose. A pointer can (and should) be used directly in a condition. So, instead of <code>if(l == nullptr)</code> write <code>if(!l)</code>.</p></li>
<li><h3>Return early and clearly</h3>

<p>Moving special (and short) case at the to to trying to <a href="https://arne-mertz.de/2016/12/early-return/" rel="nofollow noreferrer">return early</a> can make your code <a href="https://softwareengineering.stackexchange.com/questions/18454/should-i-return-from-a-function-early-or-use-an-if-statement">more readable</a>. You're almost there. You already return early for empty list. However, you can go further, shifting to the top, the case when the actual list begin with a value to remove.</p>

<p>Once you placed all special return case at the top, you don't have to wrap the rest of your code in nested braces since previous cases already returned.</p></li>
<li><h3>Code with style</h3>

<p>You can always use the coding style which you are comfortable, just as you can enjoy cooking with boxing gloves. You'll get only benefits using <a href="https://isocpp.org/wiki/faq/coding-standards" rel="nofollow noreferrer">one of large adopted styles</a>. You can also find a <a href="https://stackoverflow.com/questions/2434213/links-to-official-style-guides">lot of resources</a> about coding style on <a href="https://stackoverflow.com/questions/tagged/coding-style%20c%2b%2b">SO</a>, about why, how and when.</p></li>
<li><h3>Improve resource management</h3>

<p>Even if the memory will be cleaned up <a href="https://stackoverflow.com/questions/677812/is-there-a-reason-to-call-delete-in-c-when-a-program-is-exiting-anyway">by the program termination</a>, it's a good habit to <code>delete</code> resource that you allocated once you don't need it anymore. Because, yes, the OS <em>normally</em> will clean not released memory, but then, it don't call destructor.</p>

<p>I'll add, without talking about memory that you allocated yourself, what become node that you skipped but don't delete memory ? In fact, in your code, all  the given list leak since you return a copy instead of modifying the list. The caller have to manage himself memory that he allocated, it's not impossible, but state it clearly.</p>

<p>Also, when you can give a try to <a href="https://www.fluentcpp.com/2017/08/22/smart-developers-use-smart-pointers-smart-pointers-basics/" rel="nofollow noreferrer">smart pointer</a> and if don't know how they work, <a href="https://www.internalpointers.com/post/beginner-s-look-smart-pointers-modern-c" rel="nofollow noreferrer">there's a nice article</a> about them.</p></li>
<li><h3>Future improvements</h3>

<p>I guess you're student and don't learn already about classes and templates, in a near future you'll have to rewrite this code wrapping it in a class, using template parameter for the data type, ... In fact, the only purpose of this kind of code is learning, you already have a good simply linked list in the C++ standard called <a href="https://en.cppreference.com/w/cpp/header/forward_list" rel="nofollow noreferrer">std::forward_list</a>.</p></li>
</ol>
    </div>