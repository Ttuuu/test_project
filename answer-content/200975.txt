<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Lots of code there, I'll just pick a few things.</p>

<ul>
<li>Return value from <code>main</code> should be <code>0</code> on success and then something
else in case any of those error cases were hit.  In general it makes
sense to keep to this convention so that e.g. typical shell operations
that operate on the exit status will work.</li>
<li>There are a couple of hard-coded field lengths, in addition those
lengths are not defined as constants, so might easily get out of sync.
I'd suggest at least defining and reusing constants for the lengths,
or using the <code>sizeof</code> operator consistently on the actual arrays where
possible.</li>
<li>There are a few <code>strcpy</code>s where it's not immediately clear to me that
they're safe (won't overwrite more memory than was allocated) - using
<code>strncpy</code> might be a good habit.  For <code>format_string</code> that goes
doubly as it's in no way obvious that this function is safe.</li>
<li><code>get_cpu_usage</code> supports exactly four CPU(core)s - for a general
purpose program it'd be much better if it could deal with any number
of them, or at least up to a fixed maximum.</li>
<li>I guess for the wifi interface and some of the other paths it might be
fine to make them a configuration value, since auto-detecting the
intended interface might be a hassle.  Then again, as a critique I'd
much rather see those discovered on startup than having to supply them
myself.</li>
<li><code>bool</code> as well as <code>int</code> are used to indicate a boolean value, I'd pick
and stick with one or the other really (apart from <code>main</code> and library
functions of course). </li>
<li><code>make_urls</code> isn't necessary, you can concatenate strings with the
preprocessor/via normal string constants as in
<code>#define WEATHER_URL "http...id=" LOCATION "&amp;appid=" KEY "&amp;units=imperial"</code>.</li>
<li>I don't even have most of the headers under the wifi block installed -
in the interest of greater portability I'd lean on the side of using
an external program here (and thus reusing code) and just fork a new
process for that.  A quick search suggests a few ways to get the wifi
SSID for example.  I actually did the same as you with ALSA though to
display volume, but IMO that's more portable as well.  Similarly
there's something to be said to do the for other things here too, like
a combination of <code>curl</code> and e.g. <code>jq</code> to do JSON parsing and so on.
Of course that all depends on your objectives.</li>
<li>Edit: Come to think of it, I had to check the linked list again:
Good that it uses the embedding pattern, but in <code>add_link</code> the code
should really not be traversing the list till the end on every call.
Either keep the list in reverse order (not checked if that's viable),
or just add them up like a stack and reverse the list in one single
loop at the end.  That might not matter in a small program, just in
general.</li>
</ul>

<p>So, overall looks good, in particular the error macros are a really
nice touch.</p>
    </div>