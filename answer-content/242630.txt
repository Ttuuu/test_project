<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This might be totally over engineered compared to what you need.</p>

<p>Depending on what you input data actually is there are fast or faster metodes to find the difference.</p>

<p>Untested pseudo code ahead</p>

<p>All tests should start with a size comparison as that is a fast way to find out that they are not equal.
If you have large data structures and small keys you want to compare then make a new list with just the values you want to compare.
Using a kind of metode IntroSort a variant of QuickSort to quickly find out if they are equal.
Depth is 2 times the Log2(size A).</p>

<pre><code>bool IntroEqual (A,B, depth)
  if (size A != size B) // different size so not equal
    return false 

  if (size A &lt;= 16)
    insertion_sort(A)
    insertion_sort(B)
    return A == B

  if (dictionary size is small)
    return count_sort(A) == count_sort(B)

  pivot = cleverly selected
  PA = partition(A, pivot)
  PB = partition(B, pivot)

  depth = depth - 1;
  if (depth == 0) // using introspection we now know that we selected bad pivots.
    return sort(A) == sort(B)

  return IntroEqual (PA low, PB low) &amp;&amp; IntroEqual (PA high, PB high)
</code></pre>
    </div>