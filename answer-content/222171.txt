<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your code could be rewritten:</p>

<pre><code>var settings = new JsonSerializerSettings { 
     TypeNameHandling = TypeNameHandling.All,
     SerializationBinder = knownTypesBinder // &lt;- see security risk below
};
var client = JsonConvert.DeserializeObject&lt;Models.Entities.Client&gt;(jsonResponse);
return client; // &lt;- strongly-typed
</code></pre>

<ul>
<li>Make sure both server and client use the <code>settings</code></li>
<li>If you have declared  <code>public ClientType Type { get; set; }</code> just to enable two-phase serialisation (base entity - concrete entity), you should remove it from the code.</li>
<li>The two-phase serialisation hack can be replaced with a strongly-typed serialisation using <code>TypeNameHandling = TypeNameHandling.All</code>. <a href="http://gigi.nullneuron.net/gigilabs/deserializing-derived-types-with-json-net/" rel="nofollow noreferrer">Example</a></li>
</ul>

<hr>

<p>As suggested in the comments, we need to address the security aspect also. Hence, <code>knownTypesBinder</code> is used to mitigate a <a href="https://www.alphabot.com/security/blog/2017/net/How-to-configure-Json.NET-to-create-a-vulnerable-web-API.html" rel="nofollow noreferrer">security risk</a>.</p>

<pre><code>// based on https://www.newtonsoft.com/json/help/html/SerializeSerializationBinder.htm
var knownTypesBinder = new KnownTypesBinder
{
    KnownTypes = new List&lt;Type&gt; { typeof(Customer), typeof(Account) }
};

public class KnownTypesBinder : ISerializationBinder
{
    public IList&lt;Type&gt; KnownTypes { get; set; }

    public Type BindToType(string assemblyName, string typeName)
    {
        return KnownTypes.SingleOrDefault(t =&gt; t.Name == typeName);
    }

    public void BindToName(Type serializedType, out string assemblyName, 
        out string typeName)
    {
        assemblyName = null;
        typeName = serializedType.Name;
    }
}
</code></pre>
    </div>