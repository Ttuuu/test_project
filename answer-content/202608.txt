<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>A few considerations about the style of the code.</p>

<p><strong>Generalized booleans</strong></p>

<p>In Common Lisp the only value “false” is <code>NIL</code>, every other value is considered “true”. So, if you want to check if <code>node</code> is different from <code>NIL</code>, you can simply write:</p>

<pre><code>while node
</code></pre>

<p><strong>Introduction of variables</strong></p>

<p>It is wrong to introduce (and assign) a variable with <code>setq</code>. In fact if you compile the function an error like <code>undeclared free variable temp</code> should be produced.</p>

<p>Local variables can be introduced by several constructs. The simplest one is <code>let</code>, like in:</p>

<pre><code>(let ((new-variable1 initial-value1)
      (new-variable2 initial-value2))
  body-where-the-new-variables-can-be-used)
</code></pre>

<p>Then, to assign a variable, as well as any part of a modifiable data structure, the primitive <code>setf</code> should be used instead of <code>setq</code>.</p>

<p><strong>Properties of <code>append</code></strong></p>

<p>It is easy to prove that the following equalities hold:</p>

<pre><code>(append NIL x) ≡ (append x NIL) ≡ x
</code></pre>

<p>so the expression:</p>

<pre><code>(if (null temp)
    (setq temp (list j))
    (setq temp (append temp (list j))))
</code></pre>

<p>is simply equal to:</p>

<pre><code>(setf temp (append temp (list j)))
</code></pre>

<p>So a correct and simplified version of the function (with more conventional indentation) could be:</p>

<pre><code>(defun breadth-print (node)
  "breadth first printing of a list of trees"
  (loop while node
    do (let ((temp nil))
         (loop for i in node 
               do (format t "~a " (car i))
                  (mapcar #'(lambda (j) (setf temp (append temp (list j))))
                          (cdr i)))
         (setf node temp)
         (format t "~%"))))
</code></pre>

<p>Note the initial comment that explains the meaning of the function: it specifies that the function accepts a list of trees (so the initial tree should be given as argument as an element inside a list).</p>

<p>The inner loop has two objectives: printing the “cars” of the elements of <code>node</code>, and appending all their “cdrs” (as lists) to produce the new list for the next top-level iteration, through the variable <code>temp</code>.</p>

<p>If decoupled, these tasks can be performed in a more compact (and simplified) way.</p>

<p><strong>Printing lists</strong></p>

<p>An entire list of elements separated by space can be printed in a single <code>format</code> expression with the <code>"~{~a ~}"</code> string parameter. For instance, to print all the cars of a list <code>l</code>, one could write:</p>

<pre><code>(format t "~{~a ~}~%" (mapcar #'car l))
</code></pre>

<p><strong>Concatenating lists obtained by mapping a function</strong></p>

<p>In Common Lisp there is a primitive function to map a list-returning function to a list, and concatenating (“appending”) the results. It is <code>mapcan</code> (see <a href="http://www.lispworks.com/documentation/HyperSpec/Body/f_mapc_.htm#mapcan" rel="nofollow noreferrer">reference</a>). For instance, if you want to concatenate all cdrs of a list <code>l</code> of lists:</p>

<pre><code>(mapcan #'cdr l)
</code></pre>

<p><strong>A compact definition of <code>breadth-print</code></strong></p>

<p>We can now give a more simplified version of the function:</p>

<pre><code>(defun breadth-print (node)
  "breadth first printing of a list of trees"
  (loop for n = node then (mapcan #'cdr n)
        while n
        do (format t "~{~a ~}~%" (mapcar #'car n))))
</code></pre>

<p>Note the use of <code>for variable = expression1 then expression2</code>, that initializes <code>variable</code> to <code>expression1</code> the first time the loop is executed, and then assigns the value of <code>expression2</code> in the subsequent steps of the loop.</p>

<p>If we change the function to accept a single tree, as per the comments, this could become:</p>

<pre><code>(defun breadth-print (node)
  "breadth first printing of a tree"
  (loop for n = (list node) then (mapcan #'cdr n)
        while n
        do (format t "~{~a ~}~%" (mapcar #'car n))))
</code></pre>

<p>With similar considerations, we could define a simplified version of <code>breadth-print-childs</code> (again with a parameter that is a tree, not a list of trees):</p>

<pre><code>(defun breadth-print-childs (node)
  (loop for n = (list node) then (mapcan #'cdr n)
        while n
        do (loop for i in n
                 do (format t "~a, ~{~a ~}~%" (car i) (mapcar #'car (cdr i))))))
</code></pre>

<p>As a final note, since <code>mapcan</code> modifies the argument, unless the argument is a fresh tree created every time the function is called, it is preferable to copy the argument at the beginning of the function, like in:</p>

<pre><code>(defun breadth-print (node)
  "breadth first printing of a tree"
  (loop for n = (list (copy-tree node)) then (mapcan #'cdr n)
  ...

(defun breadth-print-childs (node)
  (loop for n = (list (copy-tree node)) then (mapcan #'cdr n)
  ...
</code></pre>

<p>I'll stop here, for now, since I do not have time to discuss about the other functions. Take this as an exercise for you to rewrite them in a similar way.</p>
    </div>