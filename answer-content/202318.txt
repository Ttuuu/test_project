<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There are lots of nice things in your code for a beginner, congratulations.</p>
<h2>Configuration file</h2>
<p>Right now, you obfuscated your API key so that we don't have it, that's logical.</p>
<p>But it shouldn't be hardcoded in your code either. This is a bad practice for multiple reasons</p>
<ol>
<li>What if I want to use your code? I'd be using <em>you</em> API key, this is danngerous. I should be able to set mine without having to recompile</li>
<li>Your API key would be stored in your source control (if you have one) <em>and</em> could be accessible to anyone decompiling your code. If there are costs related to Maps API, things could go wrong very quickly.</li>
</ol>
<p>An API key should always be in some sort of configuration file. Either an <code>app.config</code>, <code>web.config</code> or some other external configuration manager.</p>
<h2>Code repetition</h2>
<p>Between the two overrides of <code>GetSuburbName</code>, there are parts of code that are duplicated. You did a good job of extracting <code>FindSuburbName(GeoCodeResponse result)</code> as a private method though.</p>
<p>I would go a little further. The only difference between the two methods is the parameters list so, as an example, I'd change :</p>
<pre><code>if (!string.IsNullOrEmpty(location))
{
    using (var clientService = new HttpClientService&lt;GeoCodeResponse&gt;("https://maps.googleapis.com"))
    {
        var param = new Dictionary&lt;string, string&gt;();
        param.Add("address", location);
        param.Add("components", "country:AU");
        param.Add("result_type", "locality");
        param.Add("key", GoogleApiKey);
        var apiResult = clientService.GetAPI("maps/api/geocode/json", param);
        return FindSuburbName(apiResult);
    }
}
return string.Empty;
</code></pre>
<p>To :</p>
<pre><code>if (!string.IsNullOrEmpty(location))
{
    var param = new Dictionary&lt;string, string&gt;();
    param.Add("address", location);
    param.Add("components", "country:AU");
    param.Add("result_type", "locality");
    param.Add("key", GoogleApiKey);

    return FindSuburbName(param);
}
return string.Empty;
</code></pre>
<p>Then, you could have your API call in the common method.</p>
<h2>C# tips</h2>
<p>You can use the Dictionary Initializer if you have a recent version of C#.</p>
<p>As an example :</p>
<pre><code>var param = new Dictionary&lt;string, string&gt;();
param.Add("address", location);
</code></pre>
<p>becomes :</p>
<pre><code>var param = new Dictionary&lt;string, string&gt;
{
    {"address", location},
    //etc
}
</code></pre>
<p>Regarding this line :</p>
<pre><code>var component = addressObj.AddressComponents.Where(x =&gt; x.Types.Contains("locality")).FirstOrDefault();
</code></pre>
<p>There is an override for <code>FirstOrDefaut</code> that takes a Predicate (a condition), which means your code could be :</p>
<pre><code>var component = addressObj.AddressComponents.FirstOrDefault(x =&gt; x.Types.Contains("locality"));
</code></pre>
<p><strike>@FabienH.</strike> @FabianH. already pointed out the other points I wanted to cover regarding C#.</p>
    </div>