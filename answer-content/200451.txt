<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First, <code>size_t</code> should be <code>std::size_t</code> everywhere.</p>

<p>Why don't the raw pointer/array cases have <code>release()</code>? Granted, it won't really change any ownership in reality, but it could conceptually.</p>

<pre><code>static ptr_type make(size_t count) { return new T[count]; }
static ptr_type make()             { return new T;        }
</code></pre>

<p>I'm not sure this interface is a good idea as is. This only supports <code>T</code>s with default constructors. What about constructor arguments:</p>

<pre><code>template &lt;typename... Args&gt;
static ptr_type make(Args&amp;&amp;... args)
{
    return new T{std::forward&lt;Args&gt;(args)...};
}
</code></pre>

<p>But of course, if you do that, it conflicts with the <code>make(std::size_t)</code> overload. So you'd need a different name for that, like <code>make_n()</code> or something, maybe with an interface like:</p>

<pre><code>template &lt;typename... Args&gt;
static ptr_type make_n(std::size_t count, Args&amp;&amp;... args)
{
    return new T[count]{std::forward&lt;Args&gt;(args)...};
}
</code></pre>

<p>However, what about the difference between <code>T{...}</code> and <code>T(...)</code>? Now you need overloads for those cases, too.</p>

<p>Now, as for the overall idea, I'm not a committee member, but I can tell you with absolute certainty that this will never be accepted.</p>

<p>First, what <em>actual</em> problem in use is this supposed to solve? What is an actual use case where this is necessary and offers a significant improvement? I can't think of any situation where this will be useful. Certainly not one that's generalizable, which is mandatory for a standard library addition.</p>

<p>Generally speaking, memory management should be handled by containers, and containers use allocators, and this has no allocator support whatsoever.</p>

<p>Even worse, it <em>hides</em> the allocation method from client code... which is disastrous because you need to know how something was allocated to know how to DEallocate it. As it is, your interface offers a "handy" way to allocate memory, but no way to free it, and in fact goes out of its way to make code <em>less</em> safe by stripping ownership from smart pointers with the <code>release()</code> function.</p>

<p>In summary, I see no general gain from this, and plenty of dangerous drawbacks.</p>
    </div>