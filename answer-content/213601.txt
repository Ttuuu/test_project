<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>... so what's going on?</h3>

<blockquote>
<pre><code>$ (grep ^#include file.c | grep -o '"[^"]\+"' | read -a myarr; echo $myarr)
(nothing is printed)
$ (grep ^#include file.c | grep -o '"[^"]\+"' | mapfile myarr; echo $myarr)
(nothing is printed)
</code></pre>
</blockquote>

<p>Why doesn't this work? Because <a href="https://www.gnu.org/software/bash/manual/html_node/Pipelines.html" rel="nofollow noreferrer"><em>"each command in a pipeline is executed in its own subshell"</em></a>. As the page explains, you could enable the <code>lastpipe</code> option to have the last element of the pipeline run in the current process. (The page doesn't mention that this will only work when you use it in a script, where job control is not active (as mentioned <a href="https://www.gnu.org/software/bash/manual/html_node/The-Shopt-Builtin.html#The-Shopt-Builtin" rel="nofollow noreferrer">here</a>). It won't work in an interactive shell.)</p>

<h3>Keep pipelines as short as possible</h3>

<p>It's good to use the fewest possible processes in pipelines.
Multiple <code>grep</code> in a pipeline are points to look at with suspicion.
You can make the first <code>grep</code> work a little harder,
using a stricter pattern, and then you can achieve the same result with 2 processes instead of 3:</p>

<pre><code>grep '^#include .*"' file.c | cut -d'"' -f2
</code></pre>
    </div>