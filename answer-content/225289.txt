<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'm always leery of the claim that problems require brute force algorithms. There is, for example, a formula for directly calculating the Nth <a href="https://en.wikipedia.org/wiki/Fibonacci_number" rel="noreferrer">Fibonacci number</a>.</p>

<p>In the case of this problem, there is a much simpler way to perform the calculation that does not require O(n^2) time. Each element of the array pairs with every other element exactly twice - once as the most significant part, and once as the least significant part. These two parts can be calculated separately in one pass.</p>

<p>The low part is the sum of the elements times the number of elements.</p>

<p>The high part is the sum of (the "offset" for each element times the sum of the elements). The offset is the digit base raised to the number of digits (expressed generally, but this problem always uses base 10). So for a two digit number (11 or 22) the offset is 100.</p>

<pre><code>function concatenationsSum2(a) {
    var lowSum = 0;
    for (var i = 0; i &lt; a.length; i++)
        lowSum += a[i];

    var sum = lowSum * a.length;

    for (var i = 0; i &lt; a.length; i++) {
        var size = a[i].toString().length;
        var offset = iPower(10, size);
        sum = sum + lowSum * offset;
    }

    return sum;
}

function iPower(base, power) {
    var result = 1;
    for (var i = 1; i &lt;= power; i++)
        result *= base;

    return result;
}
</code></pre>

<p>And from there, we can simplify even further by combining the two parts.</p>

<pre><code>function concatenationsSum3(a) {
    var lowSum = 0;
    var offsetSum = 0;
    for (var i = 0; i &lt; a.length; i++) {
        lowSum += a[i];

        var size = a[i].toString().length;
        var offset = iPower(10, size);
        offsetSum += offset;
    }

    return lowSum * a.length + lowSum * offsetSum;
}
</code></pre>
    </div>