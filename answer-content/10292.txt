<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Yes, I would have written this completely differently (so I decided to do just that).  I'll follow my solution with a hopefully scientific analysis of both solutions.  Finally I'll give some personal recommendations.</p>

<p>Note: The reason for the in-depth analysis is that I was already interested in pagination and thinking about an implementation for a framework that I am writing.</p>

<h2>Model</h2>

<pre><code>/** Model the data for pagination.
 */
class ModelPaginator
{
    /** Get the links for pagination.
     *  @param page \int The page number for the current page.
     *  @param numberOfPages \int The total number of paginated pages.
     *  @param context \int The number of context pages surrounding the current,
     *  first and last pages.
     *  @return \array An array with the ranges of pages for pagination.
     */
    public function getLinks($page, $numberOfPages, $context)
    {
        // Sanitize the inputs (I am trying to follow your example here, I would
        // throw exceptions if the values weren't as I expected).
        $numberOfPages = max($numberOfPages, 1);
        $context       = min(max($context, 0), $numberOfPages - 1);
        $page          = min(max($page, 1), $numberOfPages);

        return array_unique(
            array_merge(range(1, 1 + $context),
                        range(max($page - $context, 1),
                              min($page + $context, $numberOfPages)),
                        range($numberOfPages - $context, $numberOfPages)));
    }
}
</code></pre>

<h2>View</h2>

<pre><code>/** A simple view for paginator links.
 */
class ViewPaginatorLinks
{
    protected $separator;

    /** Construct the paginator.
     *  @param separator \string Separator between gaps.
     */
    public function __construct($separator=' ... ')
    {
        $this-&gt;separator = $separator;
    }

    /** Write the pagination links.
     *  @param links \array The links array.
     *  @param currentPage \int The current page.
     */
    public function write($links, $currentPage)
    {
        $currentPage = min(max($currentPage, 1), end($links));

        echo 'Page ' . $currentPage . ' of ' . end($links) . ': ';
        $previousPage = 0;

        foreach ($links as $page) {
            if ($page !== $previousPage + 1) {
                $this-&gt;writeSeparator();
            }

            $this-&gt;writeLink($page);
            $previousPage = $page;
        }
    }

    /*******************/
    /* Private Methods */
    /*******************/

    /** Write the link to the paginated page.
     *  @param page \array The page that we are writing the link for.
     */
    private function writeLink($page)
    {
        echo '&lt;a href="?p=' . $page . '" target="_self"&gt;' . $page . '&lt;/a&gt;' .
            "\n";
    }

    /// Write the separator that bridges gaps in the pagination.
    private function writeSeparator()
    {
        echo '&lt;span&gt;' . $this-&gt;separator . '&lt;/span&gt;' . "\n";
    }
}
</code></pre>

<h2>Usage</h2>

<pre><code>$numberOfPages = 29;
$currentPage = 13;
$context = 1;

$Model = new ModelPaginator;
$View = new ViewPaginatorLinks;

$View-&gt;write($Model-&gt;getLinks($currentPage, $numberOfPages, $context),
             $currentPage);
</code></pre>

<h1>Analysis</h1>

<p>I'll be going through some metrics thanks to <a href="http://github.com/sebastianbergmann/phploc" rel="nofollow noreferrer">PHPLOC</a>.  I added the maximum line length to these metrics.</p>

<p><strong>Your Solution</strong></p>

<pre><code>Lines of Code (LOC):                                117
  Cyclomatic Complexity / Lines of Code:           0.37
Comment Lines of Code (CLOC):                        34
Non-Comment Lines of Code (NCLOC):                   83

Maximum Line Length                                 120
</code></pre>

<p><strong>My Solution</strong></p>

<pre><code>Lines of Code (LOC):                                 97
  Cyclomatic Complexity / Lines of Code:           0.03
Comment Lines of Code (CLOC):                        34
Non-Comment Lines of Code (NCLOC):                   63

Maximum Line Length                                  80
</code></pre>

<h2>Lines of Code</h2>

<p>My solution has 20 fewer lines.  This could well be due to removing quite a few blank lines.  However, measured in characters it is 2905 characters long against your 4089. So there is definitely a large difference in typing required.</p>

<h2>Cyclomatic Complexity</h2>

<p>This is a measure of how complex the code is (see <a href="http://en.wikipedia.org/wiki/Cyclomatic_complexity" rel="nofollow noreferrer">wikipedia</a>).  Highly complex code is normally harder to maintain and contains more bugs.  My code is a factor of 10 less complex.  This is due to the flatness of my code.  See Jeff Atwood's <a href="http://www.codinghorror.com/blog/2006/01/flattening-arrow-code.html" rel="nofollow noreferrer">Flattening Arrow Code</a> blog.</p>

<h2>Comments</h2>

<p>The number has remained the same according to PHPLOC, but it seems to be counting blank lines.  Manually I can only count 14 in your code versus 27 in mine, even though the number of lines of code were reduced in my solution.  Proportionally the commenting in my solution is much higher.  At the highest level of abstraction (class, function definitions) I have comments where you have virtually none.  My comments cover input parameters to functions and can be used in automatic documentation tools like <a href="http://www.doxygen.nl/" rel="nofollow noreferrer">Doxygen</a> or <a href="http://www.phpdoc.org/" rel="nofollow noreferrer">PHPDocumentor</a>.</p>

<h2>Line Length</h2>

<p>Firstly, I am unsure whether the formatting of your code here is exactly as it was.  I'll assume the true maximum line length of your code is 120 characters.  These days monitors can handle 120 characters wide.  However when you are editing two or three files side by side they can't.  You also end up with large blank areas for showing the long lines (unless you are ok with it wrapping).</p>

<h2>Performance</h2>

<p>I ran each code 100, 000 times with no output being echoed (the buffer was cleared after each iteration).</p>

<p>There were a few different configurations that I tested as far as object creation and usage:</p>

<ul>
<li>Creating objects within each loop: Your code was 21% faster.</li>
<li>Creating the objects outside of the loop: Your code was 10% faster.</li>
<li>Creating the objects outside the loop, getting the model data and running only the view code in the loop:  Mine was 27% faster.</li>
</ul>

<p><strike>Your code has the better performance</strike>, but the 100, 000 iterations only took <strike>5.8</strike> 4.2 seconds (<strong>see edit below</strong>) on my not very fast machine.  <strike>I think the performance difference is probably due to my split of Model and View.</strike>  I would only consider changing this split if the code was running on a site with enormous traffic and it was shown by profiling that real gains could be had from changing the pagination.</p>

<p><strong>Edit:</strong> The performance gains from your solution were troubling me.  With some profiling I was able to see that the View was wasting a lot of time dispatching the calls with <code>$this-&gt;writeSeparator</code> and <code>$this-&gt;writeLink</code>.  Replacing these calls with their code (seeing as they were only 1 line anyway) led to a large performance gain.  My code was faster by 10%, 18% and 59%.  Worst case performance is 4.2s for 100 000 iterations (context = 1).</p>

<h1>Real Recommendations</h1>

<p>The following line should not have $p in it.  <strong>Globals</strong> are bad practice and will only make you look bad.</p>

<p><code>if (!$page || $p &lt; 1) { $page = 1; }</code></p>

<p><strong>Comments</strong> belong with the code they are commenting on.  A blank line after a comment only distances it from that.</p>

<p>I think your code was missing a '}' for the end of your function.</p>

<p><strong>Mixed indentation</strong> for if/elseif removes the visual cues for grouping.  Instead of:</p>

<pre><code>if () {
} else if () {
}
</code></pre>

<p>Use:</p>

<pre><code>if () {
}
elseif () { // elseif is equivalent to else if
}
</code></pre>

<p>Similarly I would avoid one line <code>if</code> and <code>if</code>/<code>else</code> statements </p>
    </div>