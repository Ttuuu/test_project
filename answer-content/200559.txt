<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Code review</h1>
<h2>Fail</h2>
<p>You should ensure your code is at least able to be parsed before you ask for review. I will assume it an oversight (that even your code formater was glaringly pointing out) and review assuming the missing token.</p>
<h2>Incomplete</h2>
<p>As an exercise the real complexity is in the <code>graph</code> and the <code>neighbors</code> function for which there is no code to evaluate.</p>
<p>The <code>Queue</code> implementation is missing, JS Arrays are queues, using <code>push</code> and <code>shift</code> to move items through the (abstracted) "queue".</p>
<h2>Poor style</h2>
<p>The code can be written better.</p>
<ul>
<li>Use <code>const</code> for variables that don`t change</li>
<li>Its a little noisy. Remove redundant code eg <code>while(foo.length &gt; 0)</code> the <code>length</code> property will never be &lt; 0 so <code>while(foo.length)</code> does the same with less</li>
<li>Use appropriate iterators, <code>for(;;)</code> loops only when you need the index, else use the <code>for(of)</code> loop</li>
<li>There is really no need for the variables <code>current</code> and <code>neighbors</code> however <code>neighbors</code> can be argued to help with readability (see rewrite)</li>
<li>The comments are of no useful value.
<ul>
<li>Never add comments without relevance to the code. Why the many <code>// 1</code>?</li>
<li>Don't state the obvious. <code>// 1 (for break condition)</code></li>
<li>Comment must be consistent with the naming and abstractions used. <code>// 1 (for adjacency list)</code> don't you mean neighbours?</li>
</ul>
</li>
<li>Bad indentation is the worst possible readability error you can introduce into your source code. If assessing code, unindented blocks are an automatic fail and there is no argument that can ever justify such poor style.</li>
<li>There is a <strong>syntax error</strong>, the code will not even make it past the parser. A basic requirement for code review. I am not going to point it out as your runtime environment will tell you.</li>
</ul>
<h2>Rewrite</h2>
<p>Two acceptable options of the many possible.</p>
<pre><code>function graphBFS(graph, start) {
    const queue = new Queue();
    const visited = new Set([start]);
    queue.enqueue(start);
    while (queue.length) {
        const neighbors = graph.neighbors(queue.dequeue());
        for (const neighbor of neighbors) {
            if (!visited.has(neighbor)) {
                queue.enqueue(neighbor);
                visited.add(neighbor);
            }
        }
    }
}
</code></pre>
<p>Or as</p>
<pre><code>function graphBFS(graph, start) {
    const queue = [start], visited = new Set(queue);
    while (queue.length) {
        for (const item of graph.neighbors(queue.shift())) {
            if (!visited.has(item)) {
                queue.push(item);
                visited.add(item);
            }
        }
    }
}    
</code></pre>
<p>The latter I would score higher as it demonstrates a higher level of understanding of the problem being solved, reduced dependency and thus more portable and reusable, and reduced use of abstraction in favor of consistency.</p>
<p>EG If the function were to be change to depth first you need only change the function <code>graph.neighbors</code> and not rename <code>neighbor</code> 4 times due to strong coupling with the abstract. An <code>item</code> of <code>neighbors</code> is still meaningful as an <code>item</code> of <code>roots</code> (Or whatever you call the forward edge traverse)</p>
    </div>