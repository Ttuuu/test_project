<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>running the posted code through the compiler results in:</p>

<pre><code>gcc -ggdb -Wall -Wextra -Wconversion -pedantic -std=gnu11 -c "untitled.c"

untitled.c: In function ‘main’:
untitled.c:14:13: warning: format ‘%s’ expects argument of type ‘char *’, but argument 2 has type ‘char (*)[20]’ [-Wformat=]
     scanf("%s", &amp;firstName);
            ~^   ~~~~~~~~~~

untitled.c:17:13: warning: format ‘%s’ expects argument of type ‘char *’, but argument 2 has type ‘char (*)[20]’ [-Wformat=]
     scanf("%s", &amp;lastName);
            ~^   ~~~~~~~~~

untitled.c:23:27: warning: conversion to ‘int’ from ‘size_t {aka long unsigned int}’ may alter its value [-Wconversion]
     int numOfWhitespace = strlen(firstName) - 1;
                           ^~~~~~

untitled.c:25:14: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘size_t {aka long unsigned int}’ [-Wformat=]
     printf("%d ", strlen(firstName));
             ~^    ~~~~~~~~~~~~~~~~~
             %ld

untitled.c:27:23: warning: conversion to ‘int’ from ‘size_t {aka long unsigned int}’ may alter its value [-Wconversion]
     numOfWhitespace = strlen(lastName) - 1;
                       ^~~~~~

untitled.c:29:14: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘size_t {aka long unsigned int}’ [-Wformat=]
     printf("%d\n", strlen(lastName));
             ~^     ~~~~~~~~~~~~~~~~
             %ld
</code></pre>

<p>strongly suggest correcting all the above problems</p>

<p>regarding:</p>

<pre><code>scanf("%s", &amp;firstName);
</code></pre>

<p>When calling any of the <code>scanf()</code> family of functions, 1) always check the returned value (not the parameter values) to assure the operation was successful.  2) when using the input format specifier: '%s' and/or '%[...]', always include a MAX CHARACTERS modifier that is 1 less than the length of the input buffer because those specifiers always append a NUL char to the input.  This avoids any possibility of a buffer overrun and the resulting undefined behavior.</p>

<p>regarding:</p>

<pre><code>int numOfWhitespace = strlen(firstName) - 1;`
</code></pre>

<p>the function: <code>strlen()</code> returns a <code>size_t</code>, so the variable: <code>numOfWhitespace</code> should be declared as <code>size_t</code>, not <code>int</code></p>

<p>regarding:</p>

<pre><code>printf(" ");
</code></pre>

<p>the function: <code>printf()</code> is very expensive in CPU cycles.  better to use:</p>

<pre><code>putc( ' ', stdout );
</code></pre>

<p>regarding this kind of statement;</p>

<pre><code>printf("%d ", strlen(firstName));
</code></pre>

<p>the function <code>strlen()</code> returns a <code>size_t</code>, so the output format specifier should be <code>%lu</code></p>

<p>Note: in C, referencing an array name degrades to the address of the first byte of the array, so given the above comments,  this:</p>

<pre><code>scanf("%s", &amp;firstName);
</code></pre>

<p>should be:</p>

<pre><code>if( scanf("%19s", firstName) != 1 )
{
    fprintf( stderr, "failed to input first name\n" );
    exit( EXIT_FAILURE );
}
</code></pre>

<p>where <code>exit()</code> and <code>EXIT_FAILURE</code> are from the header file: <code>stdlib.h</code></p>

<p>the above should be enough to enable you to correct the problems.</p>

<p>for ease of readability and understanding:  insert an appropriate space: inside parens, inside braces, inside brackets, after commas, after semicolons, around C operators</p>
    </div>