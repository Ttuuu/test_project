<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'm concentrating on...</p>

<p><strong>Naming</strong></p>

<pre><code>private IHashStrategy iHashStrategy;
</code></pre>

<p>The name <code>iHashStrategy</code> tells nothing about the purpose of the field. It simply repeats the name of the type. The field is used for hashing the URLs so <code>urlHashStrategy</code> would be a more descriptive field name.</p>

<p>Since the <code>IHashStrategy</code> class is in <code>hashalgorithm</code> package, nothing in their names suggest that the interface is specific to hashing URLs (I'm assuming this is the case because the interface contains a very specific <code>getHashFromUrl(String)</code> method). <code>UrlHashStrategy</code> would be a better name. I personally do not prefer the I-prefix in interfaces as it is not something that is done in the Java standard libraries. I would probably separate the hashing completely from the fabrication of shortened URLs. That way the domain (and possible URL path prefixes) could be configured separately from the hash algorithm. The ShortenedUrl class would then contain the original URL and the hash only.</p>

<pre><code>public UrlShortener(IHashStrategy instanceOfConcreteHashStrategy) {
</code></pre>

<p>The parameter name <code>instanceOfConcreteHashStrategy</code> is incredibly long considering that it provides absolutely no additional information. :) An object that is passed around is always a pointer to an instance of a concrete class and the type can already be inferred from the parameter type. A plain <code>urlHashStrategy</code> would be a big improvement in the naming.</p>

<pre><code>public List&lt;Url&gt; getListOfShortenedUrlForUser(String userId) {
</code></pre>

<p>I find repeating the return type in the method name redundant. If the <code>Url</code> class had a more descriptive name this could be <code>List&lt;ShortenedUrl&gt; getShortenedUrls(String userId)</code>. The plural implies that the method returns a collection.</p>

<pre><code>public void addNewEntryForUser(String url,String userId) {
</code></pre>

<p>You're not adding a generic entry. This would be more descriptive as <code>shortenUrl(String url,String userId)</code>. Unless you're planning on adding anonymous URL shortening, there is no point in repeating the ForUser part. And even if you planned, the method can be overloaded with different parameters. This is also a method that probably would benefit from returning the shortened URL as a return value.</p>

<pre><code>private boolean checkExistenceForShortenedUrl(String shortenedUrl) {
...
while(checkExistenceForShortenedUrl(shortenedUrl)) {
</code></pre>

<p>The <code>checkExistenceForShortenedUrl</code> name does not imply anything about the return value. It just states that something is checked. If renamed <code>isDuplicate</code> the name would signal a boolean return value and the code would be more fluent: <code>while (isDuplicate(shortenedUrl)) {</code>. But the whole concept of duplicate hashes is pretty novel. Most URL shorteners use the same hash for a given URL.</p>

<p>Calling the operation of shortening a URL "hashing" is misleading, as hashing is a stable operation: the same input always produces the same output. So calling a hash algorithm in a loop with same input until it produces a different output would be a never-ending loop. If you're intent on providing different shortened URLs for the same long URL for different users, you're looking for a <strong>random number generator</strong>, not a hashing strategy.</p>

<pre><code>public class Url {
</code></pre>

<p>This class does not represent a URL. Since a URL is a very specific concept (and Java already has a URL class) the name is very confusing. When your method returns a <code>Url</code> the reader expects it to be a URL, not a container for two URLs and a TTL. This should be renamed to <code>ShortenedUrl</code>. I would also offload the TTL to the registry class that keeps track of the URLs that have been shortened by different users. Once you separate these two  responsibilities you can also easily reuse the hashes and use the same instance for all users who want to pass the latest meme around.</p>

<p>Once you have removed the TTL from the ShortenedUrl class, the responsibility of storing return values for a given time starts to sound a lot like a cache. If the personalized TTL for a shortened URL is not an important feature, you could replace the TTL management with a ready made cache that covers your URL shortener.</p>
    </div>