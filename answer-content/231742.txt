<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Unless this is just for learning, always remember that adding yet another smart-pointer will seriously hinder interaction with anyone expecting a different one.</p>

<p>The Design:</p>

<ol>
<li><p>The maker-function is mandatory:</p>

<ol>
<li>Cannot use a different allocator.</li>
<li>Cannot generally be used to allow sharing across DLL boundaries, as DLLs (in contrast to SOs) don't do symbol unification.</li>
<li>Cannot be used with already-allocated resources, or those needing different deallocation.</li>
</ol></li>
<li><p>Your shared-pointers must always point to the full object. Interior pointers are not allowed, nor are base-pointers.</p></li>
<li><p>You don't allow for weak pointers at all.</p></li>
<li><p>As an aside, the overhead of using atomic reference-counts is small enough that the standard library eschews the complication of adding single-threaded shared-pointers. Consider whether that's really the part you should save on.</p></li>
</ol>

<p>The Implementation:</p>

<ol>
<li><p>Using in-class-initializers allows you to simplify the ctors.</p></li>
<li><p>You could use aggregate-initialization with <code>Pair</code>, no need for a custom ctor.</p></li>
<li><p>Explicitly testing for self-assignment is a bad idea, as it pessimises the common case. Anyway, it's completely useless in a ctor!</p></li>
<li><p>You should know that <code>-&gt;</code> binds stronger than anything but scope-resolution <code>::</code>. If you need to, there are many places to look up <a href="https://en.cppreference.com/w/cpp/language/operator_precedence" rel="nofollow noreferrer">the operator precedence rules</a>.</p></li>
<li><p>Your move-assignment-operator leaks the assignee's state. Fix it by just doing an unconditional swap instead.</p></li>
</ol>
    </div>