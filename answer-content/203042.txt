<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your iteration technique is a bit clumsy for Python:</p>

<ul>
<li>In <code>prime_factor()</code>, the <code>while i &lt; len(primes):</code> loop would be better written as <code>for prime in primes:</code>.</li>
<li>In <code>compute_factorial_value()</code>, the <code>for key in factorial:</code> loop would be better written as <code>for prime, exponent in factorial.items():</code>.</li>
<li>Overall, you would be slightly better off using a <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow noreferrer"><code>collections.Counter</code></a> rather than a <code>dict</code> for storing prime factorizations.  The benefit is that every value in a <code>Counter</code> is implicitly 0, so you don't have to worry about non-existent keys.</li>
</ul>

<p>Clarity could be improved as well:</p>

<ul>
<li>It's baffling that in an exercise whose goal is to compute the fractorial of a number, there is no <code>fractorial(<em>n</em>)</code> function.</li>
<li>It's customary to organize the code to put the more primitive helper functions first, before defining the functions that rely on them.  Therefore, <code>main()</code> should appear last.</li>
<li>The <code>update_fractorial()</code> and <code>compute_fractorial_value()</code> functions are actually not specific to fractorials, and should therefore be named more generically.</li>
</ul>

<h2>Suggested rewrite</h2>

<pre><code>from collections import Counter

def prime_factors(number):
    assert number &lt;= 22
    factors = Counter()
    for prime in [2, 3, 5, 7, 11, 13, 17, 19]:
        while number % prime == 0:
            number //= prime
            factors[prime] += 1
    return factors

def update_factors(factors, new_factors):
    for factor in new_factors:
        factors[factor] = max(factors[factor], new_factors[factor])

def multiply_factors(factors):
    value = 1
    for prime, exponent in factors.items():
        value *= prime ** exponent
    return value

def fractorial(n):
    factors = Counter()
    for i in range(2, n + 1):
        update_factors(factors, prime_factors(i))
    return multiply_factors(factors)

if __name__ == '__main__':
    print(fractorial(int(input())))
</code></pre>

<h2>Simpler solution</h2>

<p>As @hjpotter92 noted, the fractorial is simply the LCM of all numbers up to <em>n</em>.  The answer can be computed with much less code.  Note that <a href="https://docs.python.org/3/library/functools.html#functools.reduce" rel="nofollow noreferrer"><code>functools.reduce()</code></a> is a more elegant shorthand for a particular kind of loop.  (In case you consider using the built-in <a href="https://docs.python.org/3/library/math.html#math.gcd" rel="nofollow noreferrer"><code>math.gcd()</code></a> to be cheating, you can <a href="https://en.wikipedia.org/wiki/Euclidean_algorithm#Implementations" rel="nofollow noreferrer">easily reimplement it using the Euclidean Algorithm</a>.)</p>

<p>Note that the challenge says that you should be prepared to accept an input file with multiple lines, which you haven't supported.  I've used <a href="https://docs.python.org/3/library/fileinput.html" rel="nofollow noreferrer"><code>fileinput.input()</code></a> to help with that.</p>

<pre><code>import fileinput
from functools import reduce
from math import gcd

def fractorial(n):
    lcm = lambda a, b: a * b // gcd(a, b)
    return reduce(lcm, range(1, n + 1))

def main():
    for line in fileinput.input():
        n = int(line)
        print('Fractorial ({0}) = {1}'.format(n, fractorial(n)))

if __name__ == '__main__':
    main()
</code></pre>
    </div>