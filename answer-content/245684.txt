<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Welcome to the code review community. The code looks clean, and follows the PEP8 style guide. Here are a few suggestions/modifications you can make though:</p>
<ol>
<li><p><a href="https://stackoverflow.com/a/19158418/1190388">Do not use global variables</a>.</p>
</li>
<li><p>Instead of calling <code>agenda()</code> at the end, put it inside <a href="https://stackoverflow.com/q/419163/1190388">the <code>if __name__</code></a> block.</p>
</li>
<li><p>Since you're working with python 3.8+, you may also add type hinting for function arguments.</p>
</li>
<li><p>For user input/validation, you can make use of a while loop:</p>
<pre><code> from typing import List

 def read_user_input_from_options(message: str, valid_inputs: List = None):
     """
     Show `message` in the console while asking for user input.

     If `valid_inputs` is not provided, returns the value from user as is.
     """
     if valid_inputs:
         valid_inputs = map(lambda x: x.upper(), valid_inputs)
     while True:
         user_input = input(message)
         if not valid_inputs:
             return user_input
         user_input = user_input.upper()
         if user_input in valid_inputs:
             return user_input
         print("Invalid option chosen. Try again.")
</code></pre>
<p>The above is an example suited for your case, where all the input option you need are capitalised alphabets. It can be extended to support other validators as per requirements.</p>
</li>
<li><p>Use multiline strings. Makes it more readable. It is more a personal preference than rules to live by.</p>
</li>
<li><p>You can map the option to a function call (see below):</p>
<pre><code> def quit_program():
     print("Have a nice day!")
     return


 def main():
     OPTION_TO_FUNCTION = {
         "A": look_at_agenda,
         "B": create_task,
         "C": clear_list,
         "D": quit_program,
     }
     option = read_user_input_from_options(
         """
         What would you like to do?
         A - look at agenda
         B - create task
         C - clear list
         D - quit
         """,
         valid_inputs=["a", "b", "C", "d"],
     )
     return OPTION_TO_FUNCTION[option]()
</code></pre>
<p>where <code>main</code> is the function called from inside your <code>if __name__ == "__main__"</code> block.</p>
</li>
<li><p>Make use of a class to keep the state of current execution. This would accompany my point about avoiding globals as well.</p>
</li>
</ol>
    </div>