<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This is how I see things...</p>

<ul>
<li>Throwing <code>ArgumentException</code> insinde a <code>try/catch</code> that at the same time <em>swollows</em> it is pointless. You use <code>ArgumentException</code> to inform the user that he called your API in a wrong way. This is not something one should hangle because he won't see it until he looks at the logs. The app should crash in this case.</li>
<li>The message of the <code>ArgumentException</code> is too generic. When it happens, the user already knows something is wrong. Tell him how to fix that by giving him a hint what the correct path should be and what path he actually used.</li>
<li>The way you are handling exceptions that might be thrown by the json-serializer is unexpected (non-standard) because the user will wonder why he got a <code>null</code> without noticing anything. <code>public</code> library APIs should always <code>throw</code> unless they are called <code>TryDoSomething</code> and <code>return</code> a <code>bool</code>.</li>
<li>Yet another flaw of this <em>pattern</em> is that it doesn't help anyone to find the source of the exception. You neither add the filename to it nor the object that it tried to de/serialize. This is very important piece of information and should be included. </li>
</ul>

<p>So, what you can/should do instead is to <code>throw</code> a new exception that adds more information about what happened e.g.:</p>

<pre><code>public T RestoreObject&lt;T&gt;(string path)
{
    if (!fileSystem.Path.IsPathFullyQualified(path))
            throw new ArgumentException($"Invalid path: '{path}'. It must by fully qualified.", nameof(path));

    try
    {    
        string json = fileSystem.File.ReadAllText($"{path}.json");
        return JsonConvert.DeserializeObject&lt;T&gt;(json);
    }
    catch (Exception ex)
    {
        throw new JsonStorageException($"Could not restore object '{typeof(T).Name}' from '{path}'.", ex);
    }
}
</code></pre>

<p>You'll be happy to see the type and file name when something goes wrong.</p>
    </div>