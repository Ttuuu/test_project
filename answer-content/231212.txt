<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<pre><code>class Graph:
    def __init__(self):
        self.graph = {}
        self.rev_graph = {}
        self.num_vertices = 0
</code></pre>
</blockquote>

<p>This looks reasonable. Note that the PEP8 style guide wants you to add a blank line after each method.</p>

<hr>

<blockquote>
<pre><code>    def addEdge(self, tail, head):
        if tail in self.graph:
            self.graph[tail].append(head)
        else:
            self.graph[tail]=[head]
        if head in self.rev_graph:
            self.rev_graph[head].append(tail)
        else:
            self.rev_graph[head] = [tail]
</code></pre>
</blockquote>

<p>The failure to update <code>self.num_vertices</code> here does not look reasonable. I suspect that the reason is that <code>num_vertices</code> shouldn't be a property of the class.</p>

<hr>

<blockquote>
<pre><code>    def dfs(self, visited, start_node, stack):
        visited[start_node] = True
        if start_node in self.graph:
            for i in self.graph[start_node]:
                if not visited[i]:
                    self.dfs(visited, i, stack)
            # del self.rev_graph[start_node]
        stack.append(start_node)
</code></pre>
</blockquote>

<p>In future, please remove commented code before submitting the code for review.</p>

<p>I could use a comment to explain the purpose of <code>stack</code>, and why it adds in post-order rather than pre-order.</p>

<hr>

<blockquote>
<pre><code>    def dfs_counter(self, visited, start_node, delim='  '):
        l1 = sum(visited)
        visited[start_node] = True
        if start_node in self.rev_graph:
            # print(delim, 'rev graph neighbors: ', start_node, self.rev_graph[start_node])
            for i in self.rev_graph[start_node]:
                if not visited[i]:
                    self.dfs_counter(visited, i, 2*delim)
        l2 = sum(visited)
        return l2 - l1
        # print(stack)
</code></pre>
</blockquote>

<p><code>sum(visited)</code> is expensive: too expensive to use in this method, which is called inside a loop. If you refactor to track the sum directly then I expect you'll see a notable speedup.</p>

<p><code>2*delim</code> probably isn't really desirable: it should probably be <code>delim + '  '</code>.</p>

<hr>

<blockquote>
<pre><code>    def find_scc_lens(self):
        self.num_vertices = len(set(list(self.graph.keys()) + list(self.rev_graph.keys())))
</code></pre>
</blockquote>

<p>It should be possible to do this without using <code>list</code>.</p>

<blockquote>
<pre><code>        visited = [False]*self.num_vertices
</code></pre>
</blockquote>

<p>This is buggy. <code>num_vertices</code> is the number of vertices, <em>not</em> the largest vertex. Consider the graph</p>

<pre><code>g = Graph()
g.addEdge(2, 3)
g.addEdge(3, 2)
</code></pre>

<p>The output should be either <code>[2]</code> (vertices with no edges don't exist) or some permutation of <code>[1, 1, 2]</code> (with vertices <code>0</code> to <code>3</code>).</p>

<blockquote>
<pre><code>        stack = []
        self.dfs(visited, 0, stack)
        # stack = stack[::-1]
        # print(stack)
        # del(self.graph)
</code></pre>
</blockquote>

<p>This is also buggy. What about vertices which aren't reachable from <code>0</code>? Even if you add documentation saying that this method only works for connected graphs, that doesn't rule out</p>

<pre><code>g = Graph()
g.addEdge(1, 2)
g.addEdge(2, 1)
g.addEdge(1, 0)
</code></pre>

<blockquote>
<pre><code>        visited = [False] * self.num_vertices
        scc_lengths = []
        for k,i in enumerate(stack[::-1]):
            if not visited[i]:
                # print("rev graph node count", k, i)
                scc_lengths.append(self.dfs_counter(visited, i))
        return scc_lengths
</code></pre>
</blockquote>

<p>In order to validate the correctness of this implementation, it would be immensely useful to have a comment which says which algorithm it implements (and ideally links to reference material).</p>
    </div>