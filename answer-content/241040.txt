<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You've got a bit of a nightmare of lengths.  You should be using explicit lengths for everything, and to heck with NUL termination.  </p>

<p>Lets look at some cases:</p>

<pre><code>    ret = read(fd,&amp;temp,256);
    temp[ret]='\0';
</code></pre>

<p>Well, <code>temp</code> is of size 256.  (And you should write <code>sizeof(temp)</code> instead of <code>256</code>.)  This means, if you read 256 bytes, you write a null into the 257th byte in the buffer, and smash memory.</p>

<pre><code>    temp[strlen(temp)] = '\0';
</code></pre>

<p>This finds the first NUL in temp, by offset, and then overwrites it with a NUL.  A useless statement.  And you should instead know how many bytes you have in temp.
Then use memchr instead of strchr, memcpy instead of strcpy and strcat, etc...</p>

<pre><code> int readline2(int fd, char* buf){
</code></pre>

<p>This is trying to reproduce the prototype of read(), but you forgot the buffer length altogether.  This makes your function more comparable to gets() then fgets().  gets() is one of the large security holes in C.  Don't be like gets().</p>

<p>Edit:
One more thing.
If you pass in an fd for a terminal, and it is in raw mode, you might get just a couple characters, not a complete line.
This is sometimes known as a "short read".
You need to keep reading until you get a line.
For testing, this can be easily simulated by reading only a few bytes at a time.</p>
    </div>