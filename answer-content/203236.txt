<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Some thoughts about your implementation:</p>

<p>As stated by @mtj, <code>executeAsync()</code> doesn’t actually retry.</p>

<p>Don’t ever catch <code>Throwable</code>. You do want to catch <code>Exception</code>, but <code>Throwable</code> is things like <code>OutOfMemoryError</code>. You’re not able to handle those, and shouldn’t try.</p>

<p>You should separately handle an <code>InterruptedException</code>. Right now that just goes into your <code>AggregateException</code> and gets ignored. You should actually interrupt what you’re doing and return if an <code>InterruptedException</code> gets thrown from <code>sleep()</code>.</p>

<p><code>retry</code> is not a great variable name. Perhaps <code>attempt</code> would be better?</p>

<p>As a general design point, I think you’d be better served with a wrapper class than a static method. That would let you use the rest of the <code>concurrent</code> API, such as executors, etc. Such a class might look something like:</p>

<pre><code>import java.time.Duration;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.Callable;

public final class RetryingCallable&lt;V&gt; implements Callable&lt;V&gt; {

    private final Callable&lt;V&gt; callable;
    private final Duration retryInterval;
    private final int retryCount;

    public RetryingCallable(final Callable&lt;V&gt; callable, final Duration retryInterval, final int retryCount) {
        this.callable = callable;
        this.retryInterval = retryInterval;
        this.retryCount = retryCount;
    }

    @Override
    public V call() throws Exception {

        final List&lt;Exception&gt; exceptions = new ArrayList&lt;&gt;();
        for (int attempt = 0; attempt &lt; this.retryCount; attempt++) {
            if (attempt &gt; 0) {
                this.sleep(exceptions);
            }

            try {
                return this.callable.call();
            } catch (final Exception e) {
                exceptions.add(e);
            }
        }
        throw new AggregateException(exceptions);
    }

    private void sleep(final List&lt;Exception&gt; exceptions) throws AggregateException {
        try {
            Thread.sleep(this.retryInterval.toMillis());
        } catch (final InterruptedException e) {
            exceptions.add(e);
            Thread.currentThread().interrupt();
            throw new AggregateException(exceptions);
        }
    }

}
</code></pre>
    </div>