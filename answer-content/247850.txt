<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The sort is not in the loop, so your algorithm is "just" <code>O(n^2)</code> because the loop dominates, the <code>O(n * log(n))</code> of the sort is neglegable (for big n).
You can solve the problem in <code>O(n * log(n))</code> and without sorting or destroying the input.</p>
<ol>
<li><p>Walk through the trips and build a Map <code>location =&gt; {liftUps, dropOffs}</code> (<code>O(n)</code> in time, <code>O(n)</code> in memory)</p>
</li>
<li><p>Iterate the map and build an array of <code>{location, liftUps, dropOffs}</code> (<code>O(n)</code> in time, <code>O(n)</code> in memory)</p>
</li>
<li><p>sort the array by location (this is now the slowest part of the algorithm: <code>O(n * log(n))</code> in time, <code>O(1)</code> in memory)</p>
</li>
<li><p>iterate the array adding liftUps and subtracting dropOffs for each location to an aggregate integer that starts at zero. (<code>O(n)</code> in time, <code>O(1)</code> in memory)</p>
</li>
<li><p>whenever you surpass capacity return false; return true if the loop finishes</p>
</li>
</ol>
<pre><code>const carPooling = (trips, capacity) =&gt; {
    let i = 0;
  const map = new Map();
  for (i = 0; i &lt; trips.length; ++i) {
    const passangers = trips[i][0];
    const start = trips[i][1];
    const end = trips[i][2];
    
    if (map.has(start)) {
        map.set(start, map.get(start) + passangers);
    } else {
        map.set(start, passangers);
    }
    
    if (map.has(end)) {
        map.set(end, map.get(end) - passangers);
    } else {
        map.set(end, -passangers);
    }
  }
  
  const list = new Array(map.size);
  i = 0;
  for (const [location, exchange] of map) {
    list[i++] = {location: location, exchange: exchange}
  }
  
  list.sort((a, b) =&gt; a.location - b.location);
  
  let occupied = 0;
  for (i = 0; i &lt; list.length; ++i) {
    occupied += list[i].exchange;
    if (occupied &gt; capacity) {
        return false;
    }
  }
  
  return true;
}

console.log(carPooling([[2,1,5],[3,3,7]], 4));
console.log(carPooling([[3,2,7],[3,7,9],[8,3,9]], 11));
</code></pre>
    </div>