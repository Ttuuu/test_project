<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>A few things I can spot, in no particular order:</p>

<ul>
<li>As <a href="https://codereview.stackexchange.com/questions/111789/node-bot-to-send-out-reminder-emails-if-a-team-member-doesnt-submit-their-weekl#comment206260_111789">Dan Pantry suggested</a>, it's probably better if you precompile your files using babel (i.e. add a build step) and run it normally with node. Normally there wouldn't be an issue, but if run in a cron multiple times, the penalty can stack up.</li>
<li>DRY: <code>const cl = console.log.bind(console)</code></li>
<li>In some of the cases, you're using the normal version (<code>readFile()</code> and in some, you're using the sync version (<code>readFileSync()</code>), in a CLI, there's nothing wrong with using sync operations. But pick one and stay consistent.</li>
<li>Always <code>reject()</code> with an instance of <code>Error</code>. Just like you should always <code>throw</code> and instance of <code>Error</code>.</li>
<li>Don't nest <code>.then()</code> inside of a Promise constructor or other <code>.then()</code>s. Chain promises by returning. (i.e. <code>new Promise(...).then()</code> and not <code>new Promise(... .then() ...)</code>).</li>
<li>Be consistent with your naming convention. I sometimes see <code>error</code> and sometimes <code>err</code>.</li>
<li>Have a look into <code>async</code> functions and <code>await</code>.</li>
<li>If you only have one statement, an arrow function can be shortened from <code>(param) =&gt; { return doSomethingWith(param); }</code> to <code>(param) =&gt; doSomethingWith(param);</code> to <code>param =&gt; doSomethingWith(param);</code>.</li>
<li>Promise constructors should generally be used at the <em>lowest possible level</em>. Promisify all of the callback-based functions, and construct functions on top of those Promise-returning functions.</li>
<li><code>class Foo {} export default Foo</code> can be shortened to <code>export default class Foo {}</code>.</li>
<li><code>{foo: foo, bar: bar}</code> can be shortened to <code>{foo, bar}</code>.</li>
<li>Your <code>storeToken()</code> method has absolutely no guarantee of success. (<code>writeFile</code> is async, and you're returning before it's done, you don't know if it failed or not).</li>
<li>Stay consistent with your object key naming and quoting.</li>
</ul>
    </div>