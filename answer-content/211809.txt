<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I only want to point out some things that are perhaps of minor relevance here, I think, since I am pushing the limits. But it might still be valuable to know.</p>

<p>Using the STL here, and in the way you did, it very wasteful, both in terms of memory consumption as well as time. Take for instance the repeated assignments to <code>curr_row</code>. Those are all copy operations. That means there is a lot of heap operations (allocation/freeing) going on there. You can optimise that by making <code>curr_row</code> a pointer and just switch what it points to.</p>

<p>But, in fact, you can avoid <code>curr_row</code> entirely - and with it the <code>if-else</code> construct - if you chose to use an array of vectors and an index <code>crow</code> to alternate between them:</p>

<pre><code>  vector &lt;int&gt; row[2] = {{1}, {}};
  int crow = 0;

  // loop through all the rows
  for (int i = 1; i &lt; (n_num + 1); i++) {
      SetRow(row[crow], row[(crow+1)&amp;1], i);
      crow ^= 1;
      ...
  }
</code></pre>

<p>To give you an idea of the difference, here is a <code>valgrind</code> output for <code>1000</code> rows</p>

<blockquote>
  <p>==690== HEAP SUMMARY:<br>
  ==690==     in use at exit: 0 bytes in 0 blocks<br>
  ==690==   total heap usage: 1,025 allocs, 1,025 frees, 2,097,128 bytes allocated</p>
</blockquote>

<p>Compared to using array of vectors</p>

<blockquote>
  <p>==694== HEAP SUMMARY:<br>
  ==694==     in use at exit: 0 bytes in 0 blocks<br>
  ==694==   total heap usage: 25 allocs, 25 frees, 91,128 bytes allocated</p>
</blockquote>

<p>In a next step, you might ask yourself: <em>"Do I really need the assets that the <code>vector</code> class provides?"</em> </p>

<p>As you see, you can calculate the total need of space in advance. Using direct array access is a lot faster than clearing and pushing into vectors. Plus, using arrays opens up the opportunity to reduce calculations exploiting the symmetry of the triangle.</p>

<p>After taking user input (and issues about that have already been raised), you can set yourself up like this:</p>

<pre><code>  int *buffer = new int[2 * n_num];
  buffer[0] = 1;
  buffer[n_num] = 1;
  int crow = 0;

  cout &lt;&lt; "1" &lt;&lt; endl;
</code></pre>

<p>This is a contiguous memory block, twice the size of the maximum size of columns you will need. (Rooming two rows of the triangle as before)</p>

<p>Of course, <code>SetRow</code> needs to look a little different now:</p>

<pre><code>void SetRow(int* buf, int crow, int row, int ncol) {
    int b0 = ncol * ((crow+1)&amp;1);
    int b1 = ncol * crow;
    int i = 1, lim = row/2 + 1;
    for (; i &lt; lim; i++) {
        buf[b0 + i] = buf[b1 + i - 1] + buf[b1 + i];
        buf[b0 + row - i] = buf[b0 + i];
    }
    buf[b0 + row] = 1;
}
</code></pre>

<p>the values <code>b0</code> and <code>b1</code> are simply pre-calculated offsets into the buffer, and <code>lim</code> only runs up to half the triangle because assignment to the new row is done symmetrically from the left and the right towards the middle.</p>

<p>The first entry is skipped (it is always <code>1</code>) and the last is manually inserted.</p>

<p>Printing now needs an ordinary for-loop.</p>

<pre><code>  // loop through all the rows
  for (int i = 1; i &lt; (n_num + 1); i++) {
    SetRow(buffer, crow, i, n_num);
    crow ^= 1;

    int b0 = crow * n_num;
    for(int j = 0; j &lt;= i; j++) {
      cout &lt;&lt; buffer[b0 + j] &lt;&lt; ' ';
    }
    cout &lt;&lt; endl;
  }
</code></pre>

<p>And don't forget to <code>delete[]</code> the buffer once you're finished.</p>

<p>Primitive timing using OS <code>time</code> functionality for <code>30000</code> rows:</p>

<ul>
<li>vector based:  

<blockquote>
  <p>./pascal  25.37s user 0.12s system 95% cpu 26.678 total </p>
</blockquote></li>
<li>array based:  

<blockquote>
  <p>./pascal4  1.88s user 0.00s system 61% cpu 3.073 total</p>
</blockquote></li>
</ul>

<p>Heap summary (1000 rows):</p>

<blockquote>
  <p>==771== HEAP SUMMARY:<br>
  ==771==     in use at exit: 0 bytes in 0 blocks<br>
  ==771==   total heap usage: 4 allocs, 4 frees, 82,752 bytes allocated</p>
</blockquote>

<p>These are values for my computer, of course, but the difference should be obvious.</p>

<p>As I said, I have been pushing the limits. I hardly think anyone would want to print out 30000 rows of the <em>Pascal Triangle</em>, but I wanted to make aware of the differences</p>
    </div>