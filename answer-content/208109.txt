<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>In this loop <code>object.otherarray.array</code> you use <code>id</code> property to to ensure to have necessary match. So I assume this <code>item.fields.image.sys.id === asset.sys.id</code> always should have only one match. And it resulted in the following code:</p>

<pre><code>object.array.forEach((item) =&gt; {
    item.fileds.image.fields = object.otherarray.array.filter(
        (asset) =&gt; item.fields.image.sys.id === asset.sys.id
    )[0].fields;
});
</code></pre>

<p>Some explanation:</p>

<pre><code>object.otherarray.array.filter(
        (asset) =&gt; item.fields.image.sys.id === asset.sys.id
    )[0];
</code></pre>

<p>is an equivalent of your <code>item.fields.image.sys.id === asset.sys.id</code>. In other words, firstly we find necessary asset. Then when we have it we can use <code>fields</code> property to assign it to <code>item.fileds.image.fields</code>.</p>

<p>I also have another variant of my remake:</p>

<pre><code>object.array.forEach((item) =&gt; {
    const imageId = item.fields.image.sys.id;
    item.fileds.image.fields = object.otherarray.array
        .filter((asset) =&gt; imageId === asset.sys.id)
        [0].fields;
});
</code></pre>

<p>While it is more verbose version, it is more clear and structive so I would recommend to use this one.</p>

<p>I am open to your comments as I suppose I could not understand your correctly.</p>

<p><strong>Edit</strong>: as @MarcRohloff said, you can use <code>find</code> instead of <code>filter</code>. But note, that `find has poor support in browsers:</p>

<pre><code>object.array.forEach((item) =&gt; {
    const imageId = item.fields.image.sys.id;
    item.fileds.image.fields = object.otherarray.array
        .find((asset) =&gt; imageId === asset.sys.id)
        .fields;
});
</code></pre>
    </div>