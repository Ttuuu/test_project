<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Simply reading the code already has a few things which stand out to me
(in general this all goes towards the style described in
<a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">this document</a>, which is
standard to follow for Python code):</p>

<ul>
<li><code>Compress_7z</code> should start lower-case and probably should also say
<code>compress_7zip</code>.  I'm agreeing that the literal "7" would be
appropriate here, given the format name.</li>
<li><code>DAC</code> is a bad variable name, as you've to read the docstring to even
begin to understand what this parameter is doing.  A better name might
be, well, <code>delete_files_after</code> perhaps.</li>
<li>The rest of the parameters should also all be lower-case.</li>
<li>Try and apply consistent formatting, or use an IDE or
<a href="https://black.readthedocs.io/en/stable/" rel="nofollow noreferrer">command-line tool</a> to do it
for you (right now there's no whitespace after some of the commas for
example, also some of the quotes are single and some are double for no
good reason).</li>
<li>The docstring is not very standard, though at least it mentions the
value range of the parameters, which is obviously good.</li>
</ul>

<p>Next up, actual functionality:</p>

<p>Shelling out to the <code>7z</code> utility is of course an option, although there
are also pure Python libraries for this as far as I can see.  The reason
I point this out is that for one the command-line utility might not be
installed and e.g. <code>pip</code> or a similar tool for Python might make it
easier to handle the dependency.</p>

<p>Since you've already settled on it though, a few more points about the
current implementation:</p>

<ul>
<li><code>chdir</code> in a library function is almost certainly a bad idea.  It's
completely not expected that "compress these files" also means "change
my current working directory".  Instead make sure that the function
works without by specifying file names reliably (that is, using
absolute path names, or by specifying the working directory <em>for the
invoked process only</em>).</li>
<li>Using strings as error values is a big no.  Use exceptions, or if you
absolutely do not want to do that, a properly structured return
value.  Right now you couldn't distinguish the return value of the
tool from the strings <code>"Path does not exist"</code> and that's generally to
be avoided.</li>
<li>If the compression level is a string the <code>list.txt</code> file will not be
cleaned up.  That's why you generally want to handle exceptions
properly, look up how
<a href="https://docs.python.org/3/tutorial/errors.html" rel="nofollow noreferrer"><code>try</code>, <code>catch</code> and <code>finally</code> work</a>
for that.</li>
<li>Finally it seems like the <code>subprocess.Popen</code> invocation is too much
work.  If you don't have to communicate with the invoked process,
simply run it and wait for the result. <code>time.sleep</code> is an extremely
wasteful way of accomplishing the same.  Instead I think you might
just be able to use <code>subprocess.run</code> with the <code>cwd</code> argument (see
above) and be done with it.  You don't need <code>shell=True</code> either, since
the invocation doesn't use any shell features at all.</li>
</ul>
    </div>