<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This answer is predominantly an extension of <a href="https://codereview.stackexchange.com/a/245465/47529">Peilonrayz's answer</a>. When you look at what your functions actually do, they fall into one of two categories:</p>
<ul>
<li>A direct 1:1 lookup</li>
<li>A range-based search</li>
</ul>
<p>You can simplify these even further by doing something like this:</p>
<ol>
<li>Create a simple method to lookup a value in a range (<code>class RangeLookup</code>)</li>
<li>Fix <code>average_apr</code> to realize that your <code>&gt;= 1.0</code> case is actually the same as your <code>else</code> case</li>
<li>Replace 1:1 lookups with <code>some_dictionary.get(user_input, default_value)</code></li>
<li>Replace range-based searches with <code>some_range_lookup.get_value_for_point(user_input)</code></li>
</ol>
<p>I ended up with something like this:</p>
<pre class="lang-py prettyprint-override"><code>class RangeLookup:
    def __init__(self, delimiters, default_value):
        self.default = default_value
        self.ranges = sorted(
            delimiters, key=lambda delim: delim[0]
        )

    def get_value_for_point(self, point):
        for (delimiter, value, inclusive) in self.ranges:
            if delimiter &gt; point or (
                inclusive and delimiter &gt;= point
            ):
                return value

        return self.default

_loan_term_lookup = RangeLookup(
    [(18, 5, True), (24, 4, True), (48, 3, True)], 0
)
def loan_term(user_input):
    return _loan_term_lookup.get_value_for_point(user_input)

_loan_reason_lookup = {
    0: 3.5,
    1: 2.0,
    2: 1.5,
    3: 2.5,
    4: 1.5,
    5: 2.0,
    6: 0.5,
}
def loan_reason(user_input):
    return _loan_reason_lookup.get(user_input, 0.0)

_job_security_lookup = {
    0: 1.0,
    1: 2.0,
    2: 3.0,
    3: 4.0,
    4: 5.0,
}
def job_security(user_input):
    return _job_security_lookup.get(user_input, 0.0)

_average_apr_lookup = RangeLookup(
    [
        (-1.0, 5, True),
        (-0.6, 4, True),
        (0.5, 3, False),
        (1.0, 2, True),
    ],
    1,
)
def average_apr(user_input):
    return _average_apr_lookup.get_value_for_point(
        user_input
    )

_monthly_expenses_lookup = RangeLookup(
    [
        (0.1, 5, False),
        (0.2, 4, False),
        (0.3, 3, False),
        (0.4, 1, False),
    ],
    0,
)
def monthly_expenses(user_input):
    return _monthly_expenses_lookup.get_value_for_point(
        user_input
    )

_monthly_surplus_lookup = RangeLookup(
    [
        (0.2, 5, False),
        (0.35, 4, False),
        (0.45, 3, False),
        (0.6, 2, True),
    ],
    1,
)
def monthly_surplus(user_input):
    return _monthly_surplus_lookup.get_value_for_point(
        user_input
    )
</code></pre>
    </div>