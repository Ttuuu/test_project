<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I think you are too concerned with the implementation right now. </p>

<p>The last part of the question </p>

<blockquote>
  <p>... recommended ... for scalability and unit-testability?</p>
</blockquote>

<p>is the most important one.</p>

<p>Let's imaging you were to write the test for this feature. You would start off by designing the API that the user of the functionality would ultimately consume. Secondly as far as the tests go ... they could careless how it is implemented 'under the hood' it only cares that it meets the requirements performance just being on possible requirement. Many times asymptotic complexity doesn't even play a critical role unless <code>n</code> is large. Take for example Strassen matrix multiplication it is only practical for larger matrices.</p>

<p>For scalability I'm assuming you mean maintainability and extensibility. The best way to achieve that is to use the <a href="https://en.wikipedia.org/wiki/Dependency_inversion_principle" rel="nofollow noreferrer">dependency inversion principle</a> (DIP) so that you are not depending on either a list or a dict but instead on the correct abstraction.</p>

<p>One possible abstraction is that the rules represent a validation.</p>

<pre><code>interface IValidator&lt;T&gt;
{
   bool IsValid(T item);
}
</code></pre>

<p>Your test would look as follows.</p>

<pre><code>[Test]
void NoRulesEverythingIsFalse()
{
    var rules = new Rules();
    Assert.False(rules.IsValid(""));
}

[Test]
void SingleRule()
{
    var rules = new Rules(new[] 
    {
        new LinkedRule("abc", "Only abc is allowed.")
    });
    Assert.True(rules.IsValid("abc"));
    Assert.AreEqual(
        rules.GetLinkForRule("abc"),
        "Only abc is allowed.");
    Assert.False(rules.IsValid("123"));
}
</code></pre>

<p>Now with this you can implement it however you want as long as your test pass. Feel free to add a performance test if it is required.</p>

<pre><code>// LinkedRule.cs
struct LinkedRule {
    string Rule { get; set; }
    string Link { get; set; }
}
</code></pre>

<pre><code>// Rules.cs
class Rules : IValidator&lt;string&gt;
{
    private Dictionary&lt;string, LinkedRule&gt; RulesToLinks { get; }

    public RuleValidator(IEnumerable&lt;LinkedRule&gt; linkedRules)
    {
        RulesToLinks = linkedRules.ToDictionary(
            x =&gt; x.Rule);
    }

    public bool IsValid(string rule) =&gt;
        RulesToLinks.Keys.Contains(rule);

    public string GetLinkForRule(string rule) =&gt; RulesToLinks[rule];

    // ...
}

</code></pre>
    </div>