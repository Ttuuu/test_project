<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>Is it ok to have an async void method?</p>
</blockquote>

<p>Referencing <a href="https://msdn.microsoft.com/en-us/magazine/jj991977.aspx" rel="noreferrer">Async/Await - Best Practices in Asynchronous Programming</a></p>

<p>As already stated in the OP <code>async void</code> should be avoided as much as possible. </p>

<p>The one exception to that rule being for event handlers, which can be the loophole to achieving the desired behavior while still having the ability to catch and handle any thrown exceptions.</p>

<p>Create an event </p>

<pre><code>event EventHandler QueryReportCallbackEvent = delegate { };
</code></pre>

<p>to be raised by the timer callback</p>

<pre><code>private void QueryReportTimerCallback(object state) {
    QueryReportCallbackEvent(this, EventArgs.Empty);
}
</code></pre>

<p>The event handler allows <code>async void</code>, so now you can safely do</p>

<pre><code>private async void QueryReportCallbackEventHandler(object sender, EventArgs e) {
    if (await semaphoreQueryReportSlim.WaitAsync(10))
        await queryReportsCore();
}
</code></pre>

<blockquote>
  <p>Is it ok to have await inside Parallel.ForEach?</p>
</blockquote>

<p><strong>NO!!!!</strong></p>

<p>The async lambda </p>

<pre><code>async (configuration) =&gt; ...
</code></pre>

<p>will be converted to <code>async void</code> which takes us right back to what was said in the beginning. <em><code>async void</code> BAD!!!</em></p>

<p>Instead refactor that lambda out into its own method that returns a <code>Task</code></p>

<pre><code>private async Task HandleReport(MachineConfiguration configuration) {
    if (configuration.IsConnectionValid) {
        var queryReport = new QueryReport(configuration, ReportConfigurations, fileContainer, applicationConfiguration, logger);
        await QueryAReport(configuration, queryReport);
    }
}
</code></pre>

<p>and this will now allow for the use of <code>Task.WhenAll</code> with all the machine configurations retrieved from the query.</p>

<pre><code>var tasks = machineConfigurations
                .Where(x =&gt; x.QueryReport)
                .Select(configuration =&gt; HandleReport(configuration));

await Task.WhenAll(tasks);
</code></pre>

<p>This actually removes the need for the <code>Paralell.ForEach</code>.</p>

<p>Here is the complete code for what was described above.</p>

<pre><code>//CTOR
public MyClass() {
    QueryReportCallbackEvent += QueryReportCallbackEventHandler;
    var QueryReportTimer = new Timer(QueryReportTimerCallback, null, TimeSpan.Zero, TimeSpan.FromSeconds(15));
}

event EventHandler QueryReportCallbackEvent = delegate { };

private void QueryReportTimerCallback(object state) {
    QueryReportCallbackEvent(this, EventArgs.Empty);
}

private async void QueryReportCallbackEventHandler(object sender, EventArgs e) {
    if (await semaphoreQueryReportSlim.WaitAsync(10))
        await queryReportsCore();
}

private async Task queryReportsCore() {
    try {
        if (machineConfigurations != null) {
            var tasks = machineConfigurations
                            .Where(x =&gt; x.QueryReport)
                            .Select(configuration =&gt; HandleReport(configuration));

            await Task.WhenAll(tasks);
        }
    } catch (Exception e) {
        logger.LogError(e, e.Message);
    } finally {
        semaphoreQueryReportSlim.Release();
    }
}

private async Task HandleReport(MachineConfiguration configuration) {
    if (configuration.IsConnectionValid) {
        var queryReport = new QueryReport(configuration, ReportConfigurations, fileContainer, applicationConfiguration, logger);
        await QueryAReport(configuration, queryReport);
    }
}
</code></pre>

<p>Lastly take note of how the functions were broken down into smaller chunks that allowed for cleaner, more easy to read code.</p>
    </div>