<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I noticed in your method <code>copyFile</code>, you are including input of filenames from stdin:</p>

<blockquote>
<pre><code>public void copyFile() throws IOException {
    String outputFile;
    String sourceToCopy;
    String sourceToAppend;
    try (BufferedReader reader = new BufferedReader(new InputStreamReader(System.in))) {
        System.out.println("Enter a filename for the output:");
        outputFile = reader.readLine();
        System.out.println("Enter the path of the file to be copied");
        sourceToCopy = reader.readLine();
        System.out.println("Enter the path of the file to be appended");
        sourceToAppend = reader.readLine();
    }
    //other method
}
</code></pre>
</blockquote>

<p>It is correct, but in this way if you are taking filenames from other source different from stdin like another file you cannot more use this method. A possible alternative is passing filenames as parameters and put the reading block from stdin outside the method:</p>

<pre><code>public class NewSolution {
    public static void main(String[] args) throws IOException {
        String outputFile;
        String sourceToCopy;
        String sourceToAppend;

         try (BufferedReader reader = new BufferedReader(new InputStreamReader(System.in))) {
             System.out.println("Enter a filename for the output:");
             outputFile = reader.readLine();
             System.out.println("Enter the path of the file to be copied");
             sourceToCopy = reader.readLine();
             System.out.println("Enter the path of the file to be appended");
             sourceToAppend = reader.readLine();
         }

         FileProcessor fileProcessor = new FileProcessor();
         fileProcessor.copyFile(sourceToCopy, sourceToAppend, outputFile);
    }
}
</code></pre>

<p>Because in your method <code>copyFile</code> you are not doing operations of data contained in the file but a simple copy, you could write your method using <a href="https://docs.oracle.com/javase/8/docs/api/java/nio/file/Files.html" rel="nofollow noreferrer">Files</a> like below:</p>

<pre><code>public static void copyFile(String sourceToCopy, String sourceToAppend, String outputFile) throws IOException {

        Files.copy(Paths.get(sourceToCopy), Paths.get(outputFile), StandardCopyOption.REPLACE_EXISTING);
        Files.copy(Paths.get(sourceToAppend), new FileOutputStream(outputFile, true));
}
</code></pre>

<p>Using this new version of method your class <code>Solution</code> can be rewritten in this way:</p>

<pre><code>public class NewSolution {
    public static void main(String[] args) throws IOException {
        String outputFile;
        String sourceToCopy;
        String sourceToAppend;

         try (BufferedReader reader = new BufferedReader(new InputStreamReader(System.in))) {
             System.out.println("Enter a filename for the output:");
             outputFile = reader.readLine();
             System.out.println("Enter the path of the file to be copied");
             sourceToCopy = reader.readLine();
             System.out.println("Enter the path of the file to be appended");
             sourceToAppend = reader.readLine();
         }
         FileProcessor.copyFile(sourceToCopy, sourceToAppend, outputFile);
    }
}
</code></pre>

<p>Below the new version of class <code>FileProcessor</code>:</p>

<pre><code>public class FileProcessor {

    public static void copyFile(String sourceToCopy, String sourceToAppend, String outputFile) throws IOException {

        Files.copy(Paths.get(sourceToCopy), Paths.get(outputFile), StandardCopyOption.REPLACE_EXISTING);
        Files.copy(Paths.get(sourceToAppend), new FileOutputStream(outputFile, true));
    }
}
</code></pre>
    </div>