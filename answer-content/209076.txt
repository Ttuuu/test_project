<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Async would be better.</h2>

<p>How time flies, the promise API was the bees knees, but now it looks old and messy. Async functions are the way to go.</p>

<p>This review is just a quicky as I found points and there is a very basic example that address the following points.</p>

<hr>

<ul>
<li>Transformer?</li>
</ul>

<p>I don't understand why you transform the data after you get it (example you change <code>forks_count</code> to <code>forks</code>, and so on). This looks like a  unnecessary step as you only use the data to fill a card and then you dump it.</p>

<ul>
<li><code>Promise.all</code> for related data.</li>
</ul>

<p>Only use <code>Promise.all</code> when the various data items you are waiting on are dependent on each other.</p>

<ul>
<li>Promise is dead, Long live Async.</li>
</ul>

<p><code>async functions</code> are much better than <code>Promise</code>. Async functions let you use promises without the need to create promises, define the callback functions that service the them, and write <code>then</code> over and over again. async functions are a promise without all the pleading...</p>

<ul>
<li>Markup where it belongs.</li>
</ul>

<p>Use a HTML <code>&lt;template&gt;</code> element to define the card. Javascript strings are not the place for HTML, and adding content to the page via markup and <code>element.innerHTML</code> is about the slowest way to add content to a page.</p>

<p>HTML is designed to hold data. Use an element's <code>data</code> property to associate data to content. Eg the <code>&lt;li&gt;</code> elements have the property <code>data-field</code> which holds the name of data field it will display <code>&lt;li data-field="forks_count"&gt;Watchers:&lt;/li&gt;</code></p>

<ul>
<li>Construct the page, then fill it.</li>
</ul>

<p>Laying out the page as you get data makes the page feel sluggish, prevents the client navigating any existing content as reflows and new content move everything about.</p>

<p>Use placeholders for the cards and always give feedback (spinners show errors).</p>

<ul>
<li>Don't repeat yourself (DRY)</li>
</ul>

<p>The array <code>frameworks</code> repeats the same API url <code>"https://api.github.com/repos/"</code> for each item (very easy to miss a typo in repeated code). Each item also repeats the framework name 3 times.</p>

<h2>Example</h2>

<p>This is a very basic example using async. The <code>HTML</code> and the array <code>frameworks</code> is now stored as markup. </p>

<p>The function <code>createCard</code> handles the request and parses the JSON. When the data is ready, using a template it fills relevant fields and returns the new card. </p>

<p>The card is added to the DOM when the  async function resolves, or there is an error.</p>

<p>The entry point is the outer function <code>addCards</code> that will add cards to the array of <code>elements</code>. (there is no vetting)</p>

<pre><code>function addCards(elements) {
  async function createCard({name, ext = ""}) {
    const card = document.importNode(frameworkCard.content, true);        
    const fields = card.querySelectorAll("li");
    const fillEl = (qry, prop, el=card.querySelector(qry))=&gt;el &amp;&amp; Object.assign(el, prop);

    const data = await (await fetch("https://api.github.com/repos/" + name + ext)).json();
    fillEl("img", {src : `img/${name}.png`});
    fillEl(".card-title", {textContent : name});
    for (const el of fields) { el.textContent += data[el.dataset.field] }
    return card;
  }        
  for (const el of elements) {
    createCard(el.dataset)
      .then(card =&gt; (el.textContent = "", el.appendChild(card)))
      .catch(() =&gt; el.textContent = "Error");
  }
}
addCards(document.querySelectorAll(".card-container"));
</code></pre>

<h2>Where the cards will go.</h2>

<p>The array of elements that are the placeholders for the cards. They also contain the data that is required to make the API calls for that card.</p>

<pre><code>&lt;div class="card-container" data-name="angular" data-ext=".js"&gt;Loading&lt;/div&gt;    
&lt;div class="card-container" data-name="ember" data-ext=".js"&gt;Loading&lt;/div&gt;
&lt;div class="card-container" data-name="react"&gt;Loading&lt;/div&gt;
&lt;div class="card-container" data-name="vue"&gt;Loading&lt;/div&gt;
</code></pre>

<h2>The template</h2>

<p>that is used to create a card. It is automatically not part of the page layout thus does not incur overhead until you import it and add it to the DOM.</p>

<pre><code>&lt;template id="frameworkCard"&gt;
    &lt;img height="180" width="200"&gt;
    &lt;h5 class="card-title"&gt;&lt;/h5&gt;
    &lt;ul class="list-group list-group-flush"&gt;
        &lt;li data-field="forks_count"&gt;Watchers:&lt;/li&gt;
        &lt;li data-field="stargazers_count"&gt;Stars:&lt;/li&gt;
        &lt;li data-field="open_issues_count"&gt;Commits:&lt;/li&gt;
    &lt;/ul&gt;
&lt;/template&gt;
</code></pre>
    </div>