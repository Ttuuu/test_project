<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Let's break this down.</p>
<ol>
<li>You have two locks for single object that guarding same fields.</li>
</ol>
<p>It's generally bad practice, and it doesn't make sense as second lock(transferLock) is used only in single operation. It won't guard for other operations.</p>
<p>It could possibly work if you have a static read-only lock for transfer with the following semantics: add/sub/get are global read lock and transfer is global write lock, then yu should acquire read lock on transfer on regular operations and write-lock on transfer op, but that would allow on;y single transfer at a time, and that's definitely not what you are trying to achieve.</p>
<ol start="2">
<li>Your locks leak outside of your main class (reed aren't private/protected).</li>
</ol>
<p>This could lead to uncontrolled use from outside, say future versions of code could misuse locks. I can see that they have package level visibility, that's semi ok, but Account#add,Accound#sub, Account#getBallance are public and not guarded by locks, so that destroys the purpose of haveing locks package-private.</p>
<p>I'd suggest put all usage of locks inside instance methods mentioned above, and add another method:</p>
<pre><code>class Account{
public void transfer(Account other, int amount) { ... }
}
</code></pre>
<p>Then all logic related to locking would be in a single, controlled place.</p>
<ol start="3">
<li>Lock ordering. If you are using granular locks, so no single lock for all accounts and you need to lock several objects you should have STRICT lock order.</li>
</ol>
<p>You are trying to achieve this with <code>tryLock</code> and while loop, this COULD actually work if you have used your rw <code>lock</code>, but it would be possible to deadlock as you are acquiring other locks then. And it's not really performant to wait in spin-loop here, you can wait forever.</p>
<p>I'd suggest to user your rw-lock but first, sort two accounts by accountId, then take write locks in order of account ids from lower to higher.</p>
<pre><code>//pseudocode
if (acc1.id&lt;acc2.id) {
  acc1.lock.writeLock().lock()
  acc2.lock.writeLock().lock()
}else{
  acc2.lock.writeLock().lock()
  acc1.lock.writeLock().lock()
}
</code></pre>
<p>It could be actually combined with tryLock, but it could take a while to acquire such locks.</p>
<ol start="4">
<li>Minor thing, it's preferable to call <code>unlock()</code> inside <strong>finally</strong> block, so no objects would stick in a locked state.</li>
</ol>
    </div>