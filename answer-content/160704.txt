<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>What you have shown is an \$O(n^2)\$ solution in that you use nested loops to determine the results.</p>

<p>I would suggest an \$O(2n)\$ approach:</p>

<pre><code>function main(numbers) {
    // one iteration to get product of whole array
    var arrayProduct = numbers.reduce(function(product, value) {
        return product * value;
    }, 1);

    // one iteration to map new array values by dividing 
    // full array product by current value
    return numbers.map(function(value) {
        return arrayProduct / value;
    });
}
</code></pre>

<p>You could probably use for loops instead of <code>Array</code> functions to micro-optimize this, but if I put myself into the position of someone who might grade such an algorithmic challenge  as this. I would probably be happier to see code like this, as it still meets the requirement to optimize the performance to \$O(2n)\$, while providing code that is more readable.  In other words, I would rather see the <code>reduce()</code> and <code>map()</code> calls in a production code base unless I had a use case where I really needed to squeeze every drop of performance out of this function.</p>

<p>ES6 version:</p>

<pre><code>const main = (numbers) =&gt; {
    const arrayProduct = numbers.reduce( (product, value) =&gt; product * value, 1);
    return numbers.map( (value) =&gt; arrayProduct / value );
}
</code></pre>

<p>One could also easily foresee a case where larger arrays could easily hit up against the <code>Number.MAX_SAFE_INTEGER</code> value in javascript (\$2exp53\$), so one might consider throwing an error at some point to abort the operation.</p>

<pre><code>const main = (numbers) =&gt; {
    const arrayProduct = numbers.reduce(
        (product, value) =&gt; {
            const product = product * value;
            if (product &gt;= Number.MAX_SAFE_INTEGER) {
                throw new RangeError('Product has reached Number.MAX_SAFE_INTEGER');
            }
            return product;
        },
        1
    );
    return numbers.map( (value) =&gt; arrayProduct / value );
}
</code></pre>
    </div>