<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your code is quite well-written, but in an old-fashioned, C-like way. With modern C++ you can be a lot more general and expressive.</p>

<h2>Be more general</h2>

<p>If you look at your code, you'll see that your function could also be invoked with arguments of a different type. For instance, if I change its signature to:</p>

<pre><code>void findSeq(const std::vector&lt;double&gt; &amp;vect);
</code></pre>

<p>it still works, even if I don't change anything inside the function. I could change the type more radically:</p>

<pre><code>void findSeq(const std::string &amp;vect);
</code></pre>

<p>and I still don't have to change anything else in your code.</p>

<p>That means you can be more general. Make your function a <a href="https://en.cppreference.com/w/cpp/language/templates" rel="noreferrer">template</a>:</p>

<pre><code>template &lt;typename Container&gt;
void findSeq(const Container&amp; container);
</code></pre>

<p>And you'll be able to use it on every type compatible with your code.</p>

<p>But you can be yet more general. Finding the longest subsequence is something I might not want to do on the whole container. I may want to specify the range inside which I need to find the longest subsequence. The canonical way to do it in C++ is to rely on <a href="https://en.cppreference.com/w/cpp/iterator" rel="noreferrer">iterators</a>:</p>

<pre><code>template &lt;typename Iterator&gt;
void findSeq(Iterator first, Iterator last);
</code></pre>

<p>For this, you'll need to change your code. It might prove hard if you're a beginner, but it's a good exercise.</p>

<h2>Be more expressive</h2>

<p>A good way to improve your code's expressiveness is to say what you're doing. You can do this with comments, with good variable names, and also by using named algorithms. There are a lot of them (and they're extremely well implemented) in the standard library (<code>#include [&lt;algorithm&gt;][3]</code>).</p>

<p>For instance there's an algorithm that looks for the position in a range where a predicate applied to two adjacent elements becomes true: <a href="https://en.cppreference.com/w/cpp/algorithm/adjacent_find" rel="noreferrer"><code>std::adjacent_find</code></a>. That comes handy when you want to detect a change of direction.</p>

<p><a href="https://en.cppreference.com/w/cpp/language/lambda" rel="noreferrer">Lambda functions</a> are another way to be more expressive. They're small, anonymous functions you can declare and define where they're used. They match very well with standard algorithms, which often come in the following form:</p>

<pre><code>std::algorithm(Iterator first, Iterator last, Function fn);
</code></pre>

<p>So, here's a more modern implementation of your algorithm:</p>

<pre><code>// taken from Toby Speight's answer
template&lt;typename T&gt;
int sign(T a, T b) {
    return (a &gt; b) - (a &lt; b);
}

template &lt;typename Iterator&gt;
auto lss(Iterator first, Iterator last) {
    if (std::distance(first, last) &lt; 2) return std::make_pair(first, last);
    auto direction = sign(*first, *std::next(first));
    Iterator lss_begin = first, lss_end = first; 
    while (first != last) {
        auto change = std::adjacent_find(first, last, [&amp;direction](auto l, auto r) {
            if (sign(l, r) != direction) {
                direction = sign(l, r);
                return true;
            }
            return false;
        });
        if (std::distance(lss_begin, lss_end) &lt; std::distance(first, change)) {
            lss_begin = first;
            lss_end   = change;
        }
        first = change;
    }
    if (lss_end != last) ++lss_end;
    return std::make_pair(lss_begin, lss_end);
}
</code></pre>
    </div>