<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Protect state</h1>
<p>There is a fundamental overriding principle in programing that if correctly followed ensures that your code will work. <strong>Encapsulate and protect the objects state so that you can trust its integrity</strong>.</p>
<p>You have exposed the objects state yet provide no means to ensure that the state is maintained in such a way that your code will run as expected.</p>
<p>The following actions are all possible and all make the whole object unusable. You have no systematic way to determine if the state of heap is safe to use. Yet you continue to try and perform actions on a broken state, and will eventually throw an unknown error</p>
<pre><code>const heap = new Heap();
heap.insert("ABC"); 
heap.queue.pop(); 
heap.queue.push(-100); 
heap.queue.length = 0; 
heap.queue = "monkey bread";
heap.exch(0,1000);
</code></pre>
<p>A good object means that there is NO WAY to corrupt the state of the object. That if the state cannot be maintained a predefined known list of errors will be thrown.</p>
<p>techniques to protect state</p>
<ul>
<li>Use closure to hide data that is not relevant to the user of the object.</li>
<li>Use setters to ensure only valid values can be set.</li>
<li>Use getters and setters to create read only and write only values.</li>
<li>Avoid the <code>this</code> token as it can be hijacked and means any code that uses the token can corrupt state.</li>
</ul>
<h2>Performance</h2>
<p>After making state trustable you must address performance. I am often down voted for putting too much emphasis on performance, yet when a new app or framework comes out the reviews always make a point off performance. Poor performance is an app killer.</p>
<p>Performance starts at the very lowest level and is a mind set as much as a style. You should always be thinking, is there a faster way. You should also test and know what style are performant as in JavaScript it is not always evident.</p>
<ul>
<li><p>Inline is faster than function calls. It is a balancing act between readability and performance, but when readability is marginal always go for the inline option.</p>
<p>You have <code>while(2*k &lt;= this.n())</code> but could be <code>while(2 * k &lt; queue.length)</code> Note queue should not be exposed.</p>
</li>
<li><p>Don't repeat calculations</p>
<p>In swim you repeat the same calculation 3 times <code>Heap.flr(k/2)</code>. It should be calculated once and stored as a variable. You do the same in other functions.</p>
</li>
<li><p>Don't pass known values</p>
<p>You call <code>sink</code> and <code>swim</code> with argument <code>k</code>, which are always the same value (either <code>1</code> or <code>queue.length - 1</code>). There is no need to pass a known value.</p>
</li>
<li><p>Integers are faster than doubles</p>
<p>Javascript does not have a definable integer type, but internally to take advantage of hardware performance Javascript <code>Number</code> can be a variety of types from uint32 to double. All bitwise operators use uint32 and will coerce doubles to uint32. Integers can be up to 2 times faster than doubles (more depending on the platform)</p>
<p>You have <code>Heap.flr(k/2)</code> that will convert odd values of <code>k</code> to a double, then floor it in <code>flr</code> which converts it back to integer. Also you require two allocations to the call stack just to complete the operation. <code>k &gt;&gt; 2</code> does the same thing, avoids the intermediate double and requires no use of the call stack.</p>
<p>Learn binary math and how to use bitwise operators in javascript as they provide significant performance benefits when working with integers. Note that Javascript integers are signed 32 bit values.</p>
</li>
<li><p>Warning about destructuring</p>
<p>Though you have not used destructuring, it is nowadays common to perform a swap using destructing. eg <code>[queue[a], queue[b]] = [queue[b], queue[a]]</code> and as a syntax it is very nice, but it is also currently extremely slow (About 10 times slower). You can get the same performance doing <code>{const swap = [queue[b], queue[a]]; const swapped = [swap[1], swap[0]]; queue[a] = swapped[0]; queue[b] = swap[1]}</code> to give a hint at how it's performed under the hood.</p>
<p>I am sure this problem will be addressed soon and performance will follow standard styles, but for now be wary of destructuring in terms of performance.</p>
</li>
</ul>
<h2>Consistency</h2>
<p>Try to be consistent with JavaScript. If you access an array item outside the range you get <code>undefined</code>. However in your code you return <code>false</code> It makes more sense to return <code>undefined</code> when the queue is empty.</p>
<h2>The rewrite</h2>
<p>The rewrite addresses some more performance issues. The swim function can perform a lot of swaps, while in reality you are only looking for a place to put a new value. Rather than add the new value to the queue, locate the new position and use splice to insert it. This save a lot of data movements. Thus <code>swim</code> is passed the value to swim up and be inserted</p>
<p><code>sink</code> can also be improved by starting at 0, same with the <code>queue</code>, there is no need to hold an unused item at the start.</p>
<p>Removing the first item from <code>queue</code> means testing if there are items becomes <code>if(queue.length)</code></p>
<p>If the <code>queue</code> is empty then undefined is returned. This eliminates the need to add conditional code to test for empty.</p>
<p>As <code>sink</code> is only called to shift a value from the queue, it may as well shift that value as well simplifying the <code>delMax</code> function now called <code>shift</code></p>
<p>The code is much safer this way as it can not be misused, and performs a lot faster. It also reduces the source code size by half thus making it much easier to understand.</p>
<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>function Heap() {
    const queue = [];
    function sinkAndShift() {
        var k = 0, k2 = 1;
        while (k2 &lt; queue.length) {
            if (queue[k] &lt; queue[k2]) { 
                const tmp = queue[k]; // don't use destructuring.
                queue[k] = queue[k2];
                queue[k2] = tmp;
            } else { break }
            k2 = (k = k2) * 2;
        }
        return queue.shift();
    }
    function swim(val) {
        var k = queue.length - 1; 
        while (k &gt; 0 &amp;&amp; val &gt; queue[k]) { k &gt;&gt;= 1 }
        queue.splice(k, 0, val);
    }    
    return Object.freeze({
        set value(k) {
            if (isNaN(k)) { throw new RangeError("Must be a number '" + k + "'") }
            swim(Number(k));
        },         
        shift() { return sinkAndShift() },
        get max() { return queue[0] },    
        get length() { return queue.length  },
    });
}

// usage

const heap = new Heap();
// or 
//const heap = new Heap;
// or 
//const heap = Heap();


heap.value = 100; // same as insert
heap.value = 101; // adds second value
heap.value = 102; 
heap.value = 103; 

console.log(heap.length); // outputs 4;
console.log(heap.max); // outputs 103;
console.log(heap.shift()); // outputs 103;
console.log(heap.length); // outputs 3;
console.log(heap.shift()); // outputs 102;
console.log(heap.shift()); // outputs 101;
console.log(heap.shift()); // outputs 100;
console.log(heap.shift()); // outputs undefined;

heap.value = "Monkey bread"; // will throw a range error</code></pre>
</div>
</div>

    </div>