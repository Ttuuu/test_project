<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Efficiency</h2>

<p>Your <code>is_prime_number()</code> is a very expensive test, and it should not need to exist at all.  Rather, the algorithm to factorize the number should just naturally produce only prime factors, never composite factors.</p>

<p>Your <code>sum_prime_factors()</code> is also very inefficient, because it always tries factors up to <code>floor(sqrt(number))</code> — even after <code>number</code> has been reduced by <code>number = number / factor</code>.</p>

<p>Another relatively minor inefficiency is that you should be using integer division (the <code>//</code> operator) rather than floating-point division (the <code>/</code> operator).</p>

<h2>Style</h2>

<p><code>sum_prime_factors()</code> should be broken up, so that it is a generator that yields prime factors.  Then, you can call the built-in <code>sum()</code> function on its outputs.</p>

<p><code>print_output()</code> should be named <code>prime_reduction()</code>, and it should return a pair of numbers rather than printing them.  It should also be modified to use a loop rather than calling itself recursively, because recursion is slower and risks overflowing the stack.</p>

<p>The main loop (the last statement of the program) is an abuse of list comprehensions — it should be a loop instead.  As a matter of style, you shouldn't use a list comprehension if the resulting list is to be discarded.  Furthermore, in this case, a "4" as input is skipped and does not cause the program to terminate.  Rather, the program ends due to the EOF rather than the "4".</p>

<h2>Suggested solution</h2>

<pre><code>from itertools import chain, count
from math import floor, sqrt
import sys

def prime_factors(n):
    limit = floor(sqrt(n))
    for f in chain([2], count(3, 2)):
        while n % f == 0:
            yield f
            n //= f
            limit = floor(sqrt(n))
        if f &gt; limit:
            if n &gt; 1:
                yield n
            break

def prime_reduction(n):
    for i in count(1):
        s = sum(prime_factors(n))
        if s == n:
            return s, i
        n = s

if __name__ == '__main__':
    for n in map(int, sys.stdin):
        if n == 4:
            break
        print(*prime_reduction(n))
</code></pre>
    </div>