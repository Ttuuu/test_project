<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First I will comment on the coding, then I will suggest an alternative solution</p>

<h1>Variable naming</h1>

<p>Ideally you want your variable names to express what the purpose of a variable is. <code>nameid</code> and <code>df2</code> are partly understandable, <code>namead</code> is not.</p>

<h1>Exception</h1>

<p>Never just do <code>try-except</code>. Always try to be as specific as possible on the exception. In the creation of <code>nameid</code> you except a <code>KeyError</code>, and in the other case a <code>IndexError</code>. Then use it like that</p>

<h1><code>collections.defaultdict</code> or <code>dict.setdefault</code></h1>

<p>Instead of trying and getting the <code>KeyError</code>, it is easier to use </p>

<pre><code>nameid = defaultdict(list)
for i in df2.index:
    nameid[df2.loc[i, 'Name']].append(df2.loc[i, 'People ID'])
</code></pre>

<p>would work</p>

<h1>iteration</h1>

<p>apart from the fact that you want to prevent iteration as much as possible when using pandas (or numpy), in Python in general, there is almost always a better way than to iterator over the index. In this particular case, you can use <code>DataFrame.iterrows</code>. If the column labels had been valid python identifiers, <code>DataFrame.itertuples</code> would have been even better</p>

<pre><code>nameid = defaultdict(list)
for _, row in df2.iterrows():
    nameid[row['Name']].append(row['People ID'])
</code></pre>

<p>with <code>_</code> being the convention for the name of a variable you don't need</p>

<h1>set</h1>

<p>later you do</p>

<pre><code>for i in nameid.keys():
    nameid[i] = list(set(nameid[i]))
</code></pre>

<p>Why not use set from the start, and why the conversion to list afterwards?</p>

<pre><code>nameid = defaultdict(set)
for _, row in df2.iterrows():
    nameid[row['Name']].add(row['People ID'])
</code></pre>

<p>does all you need</p>

<h1><code>len</code></h1>

<p>the next part</p>

<pre><code>namead = {}

for i in nameid.keys():
    paceholder = ['Nothing']
    try:
        paceholder.append(nameid[i][1])
        namead[i] = nameid[i]
    except:
        pass
</code></pre>

<p>uses list indexing <code>[1]</code> and expects lists with only 1 element to throw an Exception. This can be expressed a lot simpler with a dict expression. Later it seems the actual ids are not even needed since you only use the keys, so a set expression does the trick.</p>

<pre><code>namead = {
    name
    for name, ids in nameid.items()
    if len(ids) &gt; 1
}
</code></pre>

<h1>pandas indexing</h1>

<pre><code>dupes = [i for i in df2.index if df2.loc[i, 'Name'] in namead.keys()]
for i in duperevs:
    df2.loc[i, 'Name'] += ' ' + str(df2.loc[i, 'People ID'])
</code></pre>

<p><code>pandas.Series</code> as an <code>isin</code> function, so there is no need to make an intermediate list of keys whose name has more id's</p>

<pre><code>dupes = df2["Name"].isin(namead)
df2.loc[dupes, "Name"] += " " + df2["People ID"].astype(str)
</code></pre>

<p>works too</p>

<h1>Alternative approach</h1>

<p>You can also use <a href="https://pandas.pydata.org/pandas-docs/stable/generated/pandas.core.groupby.SeriesGroupBy.nunique.html" rel="nofollow noreferrer"><code>groupby.nunique</code></a></p>

<pre><code>dupes = df2.groupby(['Name'])["People ID"].nunique()
</code></pre>

<p>This is a <code>Series</code> with the <code>Name</code> as index, and the number of unique <code>People ID</code>s as value. Then you can filter those with a value &gt; 1, and check against the name</p>

<blockquote>
<pre><code>Name
Jane Doe    1
John Doe    2
Name: People ID, dtype: int64
</code></pre>
</blockquote>

<pre><code>dupes_idx = df2["Name"].isin(dupes[dupes&gt;1].index)
</code></pre>

<p>Now you just need to append the <code>People ID</code>  to the <code>Name</code></p>

<pre><code>df2.loc[dupes_idx, "Name"] += " " + df2["People ID"].astype(str)
</code></pre>

<p>This was tested on</p>

<pre><code>data = [
    ["John", "Doe", 1],
    ["John", "Doe", 1],
    ["John", "Doe", 2],
    ["Jane", "Doe", 1],
    ["John", "Doe", 2],
    ["Jane", "Doe", 1],
    ["John", "Doe", 1],
]

df2 = pd.DataFrame(data, columns=['First Name', 'Last Name', 'People ID'])
</code></pre>

<blockquote>
<pre><code>First Name    Last Name   People ID   Name
0     John    Doe     1   John Doe 1
1     John    Doe     1   John Doe 1
2     John    Doe     2   John Doe 2
3     Jane    Doe     1   Jane Doe
4     John    Doe     2   John Doe 2
5     Jane    Doe     1   Jane Doe
6     John    Doe     1   John Doe 1
</code></pre>
</blockquote>
    </div>