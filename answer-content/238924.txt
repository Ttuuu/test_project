<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1><code>WebDriverWait</code></h1>

<p>Your intuition about <code>time.sleep()</code> not being ideal here is correct. A better alternative is to use the <a href="https://selenium-python.readthedocs.io/waits.html#explicit-waits" rel="nofollow noreferrer">Selenium <code>WebDriverWait</code> API</a> to wait for elements of interest to appear/disappear. More specifically,</p>

<ul>
<li>after entering a query in the query field, we want to wait for the list elements to show up in the DOM so we can retrieve the first element</li>
<li>after clearing the query field, we want to wait for any of the aforementioned list elements to disappear from the DOM, as a sanity check to ensure we've reset the page to a state that is ready for our next query</li>
</ul>

<p>For waiting for the elements to show up in the DOM, we can use <a href="https://selenium-python.readthedocs.io/api.html#selenium.webdriver.support.expected_conditions.presence_of_all_elements_located" rel="nofollow noreferrer"><code>presence_of_all_elements_located</code></a>:</p>

<pre class="lang-python prettyprint-override"><code>first_element = WebDriverWait(driver, 5).until(
    EC.presence_of_all_elements_located(
        (By.XPATH, "//div[@class='_0ea0377c _4343c2a0 _50f34a35']")
    )
)[0]
ticker = first_element.text
</code></pre>

<p>For waiting for any of the above elements to disappear from the DOM, we can use <a href="https://selenium-python.readthedocs.io/api.html#selenium.webdriver.support.expected_conditions.staleness_of" rel="nofollow noreferrer"><code>staleness_of</code></a> or <a href="https://selenium-python.readthedocs.io/api.html#selenium.webdriver.support.expected_conditions.invisibility_of_element_located" rel="nofollow noreferrer"><code>invisibility_of_element_located</code></a>:</p>

<pre class="lang-python prettyprint-override"><code>WebDriverWait(driver, 5).until(EC.staleness_of(first_element))
</code></pre>

<p></p>

<pre class="lang-python prettyprint-override"><code># also works, but we're repeating ourselves a bit here
WebDriverWait(driver, 5).until(
    EC.invisibility_of_element_located(
        (By.XPATH, "//div[@class='_0ea0377c _4343c2a0 _50f34a35']")
    )
)
</code></pre>

<h1>Query field: retrieve once then reuse</h1>

<blockquote>
  <pre class="lang-python prettyprint-override"><code>for isin in isin_list:
    try:
        WebDriverWait(driver, 5).until(EC.element_to_be_clickable((By.XPATH, "//input[@name='yfin-usr-qry']"))).send_keys(f"{isin}")
</code></pre>
</blockquote>

<p>We only need to wait for the search query field to become clickable once. So we can move the <code>WebDriverWait</code> line outside of the loop and save its return value (reference to the query field element) in <code>query_field</code>:</p>

<pre class="lang-python prettyprint-override"><code>query_field = WebDriverWait(driver, 5).until(
    EC.element_to_be_clickable((By.XPATH, "//input[@name='yfin-usr-qry']"))
)
for query in queries:
    try:
        query_field.send_keys(query)
    # ...
</code></pre>

<h1>Incorrect assumption about modal always appearing</h1>

<blockquote>
  <pre class="lang-python prettyprint-override"><code>driver.find_element_by_xpath("//button[@type='submit' and @value='agree']").click()
</code></pre>
</blockquote>

<p>This appears to handle a pop-up modal by clicking past it, but I don't think the modal shows up all the time. When I ran the original script the above line threw a <code>NoSuchElementException</code>.</p>

<p>To handle the case when the modal doesn't appear, ignore <code>NoSuchElementException</code> when it is raised from that line:</p>

<pre class="lang-python prettyprint-override"><code>try:
    driver.find_element_by_xpath(
        "//button[@type='submit' and @value='agree']"
    ).click()
except NoSuchElementException:
    pass
</code></pre>

<h1>Use <code>None</code> to represent the absence of a value</h1>

<blockquote>
  <p>If there is no suggestion the code should write <code>f"nan_{what_ever_the_entry_was}"</code>.</p>
</blockquote>

<p>I would highly recommend against doing this. Instead, use <code>None</code> to represent the absence of a value (see <a href="https://docs.python.org/3/library/typing.html#typing.Optional" rel="nofollow noreferrer"><code>typing.Optional</code></a>). </p>

<p><code>get_ticker_symbols</code> would then return a <code>List[Optional[str]]</code>, which is a clear way of expressing in the function signature that it is possible for a search query to return an "empty" result.</p>

<p>As for the current function signature,</p>

<blockquote>
  <pre class="lang-python prettyprint-override"><code>def get_ticker_symbols(isin_list: List) -&gt; List:
</code></pre>
</blockquote>

<p>this can be improved by specifying the types of elements in each list:</p>

<pre class="lang-python prettyprint-override"><code>def get_ticker_symbols(queries: List[str]) -&gt; List[Optional[str]]:
</code></pre>

<p>Also, <code>isin_list</code> is not a very descriptive name and it almost sounds like a boolean, which is misleading, so I'd go with something like <code>queries</code> instead.</p>

<h1>Specify the exceptions you are handling</h1>

<p>Avoid using bare <code>except</code> clauses, which catch all exceptions and can obscure/hide real issues or bugs. Instead, specify the exception you are handling:</p>

<pre class="lang-python prettyprint-override"><code>try:
    # some code that could throw a `TimeoutException`,
    # e.g. `presence_of_all_elements_located`
except TimeoutException:
    # ...
</code></pre>

<h1>Close resources after use</h1>

<p>It's a good idea to call <code>close()</code> or <code>quit()</code> on the WebDriver to exit the browser once we're done using it. That said, if we invoke the WebDriver as a context manager, we don't have to worry about this:</p>

<pre class="lang-python prettyprint-override"><code>with webdriver.Chrome(options=options) as driver:
    driver.get("https://finance.yahoo.com/")
    # ...
</code></pre>

<p>Selenium allows us to invoke the WebDriver as a context manager as shown above, which means we don't need to call <code>driver.close()</code> or <code>driver.quit()</code> explicitly because it will be done for us when the flow of execution leaves the indented block.</p>

<h1>Refactored version</h1>

<pre class="lang-python prettyprint-override"><code>#!/usr/bin/env python3

from typing import List, Optional

from selenium import webdriver
from selenium.common.exceptions import NoSuchElementException, TimeoutException
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.support.ui import WebDriverWait


options = Options()
options.add_argument("start-maximized")
options.add_argument("disable-infobars")
options.add_argument("--disable-extensions")
options.add_argument("headless")


def get_ticker_symbols(queries: List[str]) -&gt; List[Optional[str]]:
    with webdriver.Chrome(options=options) as driver:
        driver.get("https://finance.yahoo.com/")

        try:
            driver.find_element_by_xpath(
                "//button[@type='submit' and @value='agree']"
            ).click()
        except NoSuchElementException:
            pass

        query_field = WebDriverWait(driver, 5).until(
            EC.element_to_be_clickable(
                (By.XPATH, "//input[@name='yfin-usr-qry']")
            )
        )
        ticker_list = []
        for query in queries:
            try:
                query_field.send_keys(query)
                first_element = WebDriverWait(driver, 5).until(
                    EC.presence_of_all_elements_located(
                        (
                            By.XPATH,
                            "//div[@class='_0ea0377c _4343c2a0 _50f34a35']",
                        )
                    )
                )[0]
                ticker = first_element.text
            except TimeoutException:
                ticker = None

            ticker_list.append(ticker)
            # web_element.clear() doesn't fire any keyboard events, and
            # as a result the change to the text field isn't registered
            # as we would expect. So as a workaround, we delete the query
            # via Keys.BACKSPACE
            query_field.send_keys(Keys.BACKSPACE * len(query))
            WebDriverWait(driver, 5).until(EC.staleness_of(first_element))

    return ticker_list


if __name__ == "__main__":
    queries = ["GB00BD2ZT390", "bmw", "dasdas", "nike", "GB00BK8FL363"]
    print(get_ticker_symbols(queries))
</code></pre>

<hr>

<h1>Alternative solution: Use undocumented API</h1>

<p>This is a bit out of scope for this code review, but I do think it deserves a mention. Simply put, there is an even better way of doing all of this without using Selenium or other web scraping libraries.</p>

<p>Using something like Chrome Developer Tools, we can track the XHRs made when typing in the search field and figure out which API call is providing the data we care about.</p>

<p>In this case it's an <a href="https://developer.yahoo.com/api/" rel="nofollow noreferrer">undocumented API</a> <code>https://query1.finance.yahoo.com/v1/finance/search</code> which we can call directly with <a href="https://requests.readthedocs.io/" rel="nofollow noreferrer"><code>requests</code></a>:</p>

<pre class="lang-python prettyprint-override"><code>#!/usr/bin/env python3

import requests

from typing import Any, Dict, Optional, List


def get_ticker_symbols(queries: List[str]) -&gt; List[Optional[str]]:
    def get_params(query: str) -&gt; Dict[str, Any]:
        return {
            "q": query,
            "lang": "en-US",
            "region": "US",
            "quotesCount": 1,
            "newsCount": 0,
            "enableFuzzyQuery": False,
        }

    ticker_list = []
    with requests.Session() as session:
        for query in queries:
            response = session.get(
                "https://query1.finance.yahoo.com/v1/finance/search",
                params=get_params(query),
            )
            response.raise_for_status()
            quotes = response.json()["quotes"]
            ticker_symbol = quotes[0]["symbol"] if quotes else None
            ticker_list.append(ticker_symbol)

    return ticker_list


if __name__ == "__main__":
    queries = ["GB00BD2ZT390", "bmw", "dasdas", "nike", "GB00BK8FL363"]
    print(get_ticker_symbols(queries))
</code></pre>
    </div>