<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You aren't doing much heavy lifting here, but there are a few small things that can be improved:</p>

<p><code>self.SENT_END</code> and <code>self.DELAYED_SENT_START</code> are both lists. This means <code>x in self.SENT_END</code> is an <code>O(n)</code> operation. In other words, we must look over the entire list to see if the element is in there. The data structure you want here is a set, which has <code>O(1)</code> lookup time for membership tests. All you have to do is initialize them like so: <code>self.SENT_END = {".", ":", "?", "!"}</code> (The <code>{}</code> are special syntax for the almost equivalent notation: <code>set([".", ":", "?", "!"])</code></p>

<p>You use <code>re.search</code> a lot. Regexes are usually rather expensive to run. For example, since you're working on some sort of text corpus, it's a pretty safe assumption that <code>&lt;</code> and <code>&gt;</code> don't occur unless the word is tag. Furthermore, we may even be able to go as far as to say that the first letter must be a <code>&lt;</code>. If you are comfortable making these assumptions, doing <code>word[0] == '&lt;'</code> (or the slightly slower <code>'&lt;' in word</code>) will almost certainly be faster than the regex. That said, if you truly need the regex (maybe your second regex is more complicated, I don't really understand what you're trying to achieve with it), try using precompiled regexes. This way, you don't have to pay the cost of parsing the regex each time you want to use it:</p>

<pre><code>self.SKIP_LETTERS_REGEX = re.compile(r"[{}{}{}]".format(self.Lowercase_Letter,
                                     self.Uppercase_Letter, self.Titlecase_Letter))
</code></pre>

<p>Then you can use it like <code>self.SKIP_LETTERS_REGEX.search(word)</code>.</p>

<p>This all said, there aren't really many moving parts here. You could try profiling individual bits, but likely you'll hit a wall of "this is as fast as you can get this to run with cpython." If speed is really critical, consider running with <a href="https://www.pypy.org/" rel="nofollow noreferrer">pypy</a>, which is capable of jitting your code and typically is a free performance boost.</p>

<p>If all else fails, you aren't doing too much here, so it wouldn't be hard to port to something lower level like C++ (sans regexes you could accomplish this with <code>iostream</code> and <code>std::unordered_map</code>), but only do that if you identify this as a severe bottleneck via profiling.</p>

<p>Some notes on code style:</p>

<ul>
<li>You don't need to inherit from <code>(object)</code> in Python 3. You also don't need to call <code>super()</code> either (and <code>super</code> in python 3 is simply <code>super().__init__()</code>)</li>
<li>Consider making your all caps variables just regular constants and not part of the class</li>
<li>This doesn't really seem like it needs to be encapsulated in a class. A few top level functions could achieve the last result</li>
<li>Good comments</li>
<li><code>train()</code> gets a little bit deep and is hard-ish to follow with all of the continues. Consider breaking it up (although this might affect performance) to make more clear what it actually does</li>
</ul>

<p>And as a final note on performance, save your code now. Ideally, track it in git. Then, as you make changes, run it with <code>timeit</code>. You can do <code>python3 -m timeit</code> to time your program. Confirm you've measurably improved performance with your changes before committing them.</p>
    </div>