<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I would be more mindful of the space that you have around operators. PEP8 recommends <a href="https://www.python.org/dev/peps/pep-0008/#other-recommendations" rel="nofollow noreferrer">single spaces around operators unless you want to help distinguish different operator precedences</a>. I find, for example, <code>self.card_no%13</code> to read very poorly. It isn't easy to readily see that there's a <code>%</code> operator in there. It looks like it's a part of the name. I also think a line like <code>print('*'*40)</code> would be much clearer with spacing:</p>

<pre><code>print('*' * 40)
</code></pre>

<hr>

<p>In <code>introduction</code>, you're calling <code>int</code> on user input outside of a <code>try</code>. Making sure you're accounting for bad user input is important. You don't want to have the whole thing crash just because the user accidentally typed in <code>10a</code> instead of <code>10</code>.</p>

<hr>

<pre><code>if winner_check==True:
    break
elif winner_check == False and choice == 1:
    choice = player_choice()
else:
    pass
</code></pre>

<p>This has a few notable things:</p>

<ul>
<li><p><code>== True</code> and <code>== False</code> are unnecessary. Just negate the condition or use the condition directly.</p></li>
<li><p>In the <code>elif</code>, <code>check_winner</code> <em>must</em> be false. If it was true, the previous condition would have triggered.</p></li>
<li><p>The <code>else</code> is useless. You do not need an <code>else</code> unless you need some code to run when all other conditions are false. You're just <code>pass</code>ing though, which is a no-op.</p></li>
<li><p>Note the inconsistency of your spacing. Within two lines of each other, you have <code>winner_check==True</code> and <code>winner_check == False</code>. Even if you didn't want to follow PEP8, you should at least be consistent.</p></li>
</ul>

<p>I'd write this as:</p>

<pre><code>if winner_check:
    break

elif choice == 1:
    choice = player_choice()
</code></pre>

<hr>

<p>At the bottom you have:</p>

<pre><code> del winner_check,player_hand,dealer_hand,cards,player_score,dealer_score,player_total,dealer_total,temp
</code></pre>

<p>I'm not sure why though. You are not required to delete references when you're done with them. That data will be freed when it goes out of scope. You only need to use <code>del</code> if for some reason you really don't want a variable to be in scope later on, within the same scope.</p>

<hr>

<p>I say this a lot, but don't write a plain <code>except:</code> unless you have a very good reason (like you want to do a catch-all to log errors, and can handle arbitrary catastrophic failure):</p>

<pre><code>try:
    choice = int(input('Do you want to Hit(1) or Stay(2)?'))
except:
    . . .
</code></pre>

<p>You're using the <code>try</code> to catch a <code>ValueError</code> from <code>int</code>, so that's what you should be catching:</p>

<pre><code>try:
    choice = int(input('Do you want to Hit(1) or Stay(2)?'))
except ValueError:
    . . .
</code></pre>

<p>You don't want to accidentally catch an error that was caused by a programming error.</p>

<hr>

<p>On the subject of spacing, look at <code>win_check</code>. It's one giant block of text. Not only are you missing spaces around the operators (including <code>,</code>), you're missing empty lines. I would write this function as:</p>

<pre><code>def win_check(player_total, dealer_total, bet, balance, choice):
    temp = Bank(bet, balance)

    if player_total == 21:
        print('Congrats! You won!')
        balance = temp.transaction_win()
        return True, balance

    elif dealer_total == 21 and choice == 2:
        print('Sorry, you lost your bet')
        balance = temp.transaction_loss()
        return True, balance

    elif player_total &gt; 21:
        print('Bust! Sorry, you lost your bet')
        balance = temp.transaction_loss()
        return True, balance

    elif dealer_total &lt; 21 and dealer_total &gt; player_total and choice == 2:
        print('Sorry, you lost your bet')
        balance = temp.transaction_loss()
        return True, balance

    elif dealer_total &gt; 21 and choice == 2:
        print('Congrats! You won!')
        balance = temp.transaction_win()
        return True, balance

    else:
        return False, balance
</code></pre>

<p>Yes, this is much bulkier. It has breathing room though for your eyes to rest at while reading. I found that my eyes kept losing their place while scanning over the function. There weren't any good "landmarks" to reference.</p>

<p>Also note how you repeatedly return <code>True, balance</code>. I'm drawing a blank at the moment, but there's almost definitely a clean way of reducing that redundancy.</p>

<hr>

<p>I question the need for the <code>Bank</code> class. You only ever use it once inside of <code>win_check</code>. Are you really gaining anything from using them? Why not just subtract from the <code>balance</code> that was passed it? Needlessly wrapping code in a class just muddies its purpose. If all you need to do is add or subtract a number, just use <code>+</code> or <code>-</code>.</p>

<p>It may be worth it if you passed the <code>Bank</code> object around instead of using it solely in the one function. That would only make sense though if the <code>bet</code> never changed.</p>

<hr>

<p>All imports should be at the very top unless you have a good reason to do otherwise (like you're doing importing in a <code>try</code> because you aren't sure what modules are available.</p>

<hr>

<p>This isn't at all a real concern, but I'll just mention that in:</p>

<pre><code>if choice not in [1,2]:
</code></pre>

<p>The <code>[1, 2]</code> should really be a set. It won't make any real difference here, but it's a good habit to get into. Use the correct structure for the job. Just change it to <code>{1, 2}</code>.</p>

<hr>

<p>Python 3 has <a href="https://www.python.org/dev/peps/pep-0498/" rel="nofollow noreferrer">f-strings</a> that make string interpolation easier. Instead of writing:</p>

<pre><code>'Available balance: {}'.format(balance)
</code></pre>

<p>Write:</p>

<pre><code>f'Available balance: {balance}'  # Note the f
</code></pre>

<p>That reads much nicer.</p>

<hr>

<hr>

<p>I don't think I can justify avoiding going downstairs for Thanksgiving any longer ðŸ˜‰.</p>

<p>Good luck and happy (early) Thanksgiving.</p>
    </div>