<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>One way is to the sequence <code>0,1,2,3,4,5</code> or <code>...(N-1)</code> and using these as row coords in a sparse-matrix (CSR) representation:</p>

<pre><code>from scipy.sparse import csr_matrix

N = 6

csr_matrix(([1]*6, ([0,3,1,4,2,5], [0,1,2,3,4,5] ))).toarray()

array([[1, 0, 0, 0, 0, 0],
       [0, 0, 1, 0, 0, 0],
       [0, 0, 0, 0, 1, 0],
       [0, 1, 0, 0, 0, 0],
       [0, 0, 0, 1, 0, 0],
       [0, 0, 0, 0, 0, 1]], dtype=int64)
</code></pre>

<p>and for general N:</p>

<pre><code>csr_matrix(([1]*N, ([0,3,1,4,2,5], list(range(N)) ))).toarray()

array([[1, 0, 0, 0, 0, 0],
       [0, 0, 1, 0, 0, 0],
       [0, 0, 0, 0, 1, 0],
       [0, 1, 0, 0, 0, 0],
       [0, 0, 0, 1, 0, 0],
       [0, 0, 0, 0, 0, 1]], dtype=int64)
</code></pre>

<p>and a roundrobin iterator to generate the low/hi values:</p>

<pre><code>from itertools import chain, zip_longest, cycle

# If you know N is even, you can get away with this...
N = 6
[x for its in zip(range(N//2), range(N//2, N)) for x in its]
# [0, 3, 1, 4, 2, 5]

# But in the general case, N could be odd, and you need to handle one of the iterators being exhausted first and yielding None...
N = 7
[x for its in zip_longest(range(N//2), range(N//2, N)) for x in its if x is not None]
# [0, 3, 1, 4, 2, 5, 6]
</code></pre>

<p>(It turned out writing that roundrobin iterator was a world of pain. Could be less grief to use bitwise arithmetic, or imperative code like the other answers.)</p>
    </div>