<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong><em>Current code review:</em></strong></p>

<ol>
<li><code>(int)Math.pow(2,len)</code> could be replaced with <code>1 &lt;&lt; len</code>;</li>
<li>Traverse binary representation of number without any other manipulations using <a href="https://docs.oracle.com/javase/tutorial/java/nutsandbolts/op3.html" rel="nofollow noreferrer">bitwise and bit shift operators</a>;</li>
</ol>

<p>So, code can look like:</p>

<pre><code>for (int i = 1; i &lt; limit; i++) {
    int sum = 0;
    int cur = i;
    for (int j = 0; j &lt; len; j++) {
        // tests if least significant bit is set
        if ((cur &amp; 1) == 1) {
            sum += arr[j];
        }
        // shift to test next bit on next loop iteration
        cur = cur &gt;&gt; 1;
    }
    // do something with sum
}
</code></pre>

<p><strong><em>About time complexity improvement:</em></strong></p>

<p>In your case, for every subset of numbers, we count its sum from 'scratch', but, imagine we have two subsets - one includes 1st,3rd and 5th numbers, and second only 1st and 3rd. Knowing sum of first subset, we can easily evaluate sum of second: just add 5th number to it. So, think about following idea: make recursion function <code>void getSums(int ind, int prevSum)</code>, where <code>prevSum</code> is that already precounted sum of some subset, which contains elements with index &lt; <code>ind</code>. We start with <code>getSums(0, 0)</code> and then we have 2 choices: add element on <code>ind</code> index or not. </p>

<p>Code can look like:</p>

<pre><code>void getSums(int ind, int prevSum) {
    if(id == arr.length) {
        sums.add(prevSum);
        return;
    }
    int sumIncludingInd = prevSum + arr[ind];        
    getSums(ind + 1, sumIncludingInd, sums, arr);
    int sumNotIncludingInd = prevSum;     
    getSUms(ind + 1, sumNotIncludingInd, sums, arr);
}
</code></pre>

<p>Time complexity in your case will be O(n * 2<sup>n</sup>), since we have 2<sup>n</sup> subsets and, to get the sum, <code>n</code> summing operations should be done.
In recursive approach, on each step you need to do only one summing operation(or zero), which is <code>O(1)</code>. So, overall time complexity will be O(2<sup>n</sup>).</p>
    </div>