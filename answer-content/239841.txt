<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Couple of small things:</p>

<p>Use emplace_back rather than push_back when you just have the parameters for the constructors:</p>

<pre><code>longList.push_back(Task{ taskInput });

// This is better written as:

longList.emplace_back(taskInput);
</code></pre>

<p>The difference between the two:</p>

<ul>
<li><p><code>push_back(Task{ taskInput });</code>.<br>
This creates a "<code>Task</code>" object as an input parameter. It then calls <code>push_back()</code>. If the <code>Task</code> type object is movable (it is) then it is moved into the list otherwise it is copied into the list.</p></li>
<li><p><code>emplace_back(taskInput);</code><br>
This creates an object in place in the list. This means the <code>Task</code> object in the list is created at the point and place it is needed without needing to copy anything.</p></li>
</ul>

<p>The <code>emplace_back()</code> is preferred (but only very slightly). This is because if the object being put in the container is not movable then it will be copied (copies can be expensive). So it is preferred to create the object in place.</p>

<p>Now. Since the paramer 'taskInput' is never going to be used again we could also use <code>std::move()</code> to move the string to the constructor so potentially avoiding a copy of the string.</p>

<pre><code>longList.emplace_back(std::move(taskInput));
</code></pre>

<hr>

<p>Prefer the range based for for looping over containers:</p>

<pre><code>for (std::list&lt;Task&gt;::iterator it = longList.begin(); it != longList.end(); ++it) {
    std::cout &lt;&lt; it-&gt;taskName &lt;&lt; std::endl;
}
</code></pre>

<p>Can be simplified to:</p>

<pre><code>for (auto const&amp; task: longList) {
    std::cout &lt;&lt; task.taskName &lt;&lt; "\n";
}
</code></pre>

<p>So what is happening here?<br>
The range based for works with any object that can be used with <code>std::begin(obj)</code> and <code>std::end(obj)</code>. These methods by default simply call the <code>begin/end</code> method on <code>obj</code>.</p>

<p>So:</p>

<pre><code>for (auto const&amp; item: cont) {
    // CODE
}
</code></pre>

<p>Can be considered as shorthand for:</p>

<pre><code>{
    auto end = std::end(cont);
    for (auto iter = std::begin(cont); iter != end; ++iter) {
        auto const&amp; item = *iter;

        // CODE
    }
}
</code></pre>

<hr>

<p>Prefer to use <code>"\n"</code> rather than <code>std::endl</code>.</p>

<p>The difference here is that <code>std::endl</code> flushes the stream (after adding the '\n') character. It is usually ill advised to manually flush stream (unless you have done the testing). This is because humans are bad at deciding when a stream needs to be flushed and the code will flush the stream if it needs to be flushed automatically.</p>

<p>One of the biggest complaints from beginners about C++ is that <code>std::cout</code> is not as fast as printing to <code>stdcout</code> in C. The main culprit of this is usually down to inappropriate flushing of the std::cout buffer. Once that is fixed the speed of these streams are nearly identical.</p>

<hr>

<p>Don't copy strings if you just need a refeence:</p>

<pre><code>   std::string shortlistedTaskName = shortList.back()-&gt;taskName;
</code></pre>

<p>This copies the string into <code>shortlistedTaskName</code>. If you just need a short reference to the value use a reference.</p>

<pre><code>   std::string&amp; shortlistedTaskName = shortList.back()-&gt;taskName;
      //     ^^^   This is a reference to the object on the right.
</code></pre>

<hr>

<pre><code>    for (it; it != longList.end(); ++it) {
         ^^   Does nothing.

    // write like this.
    for (; it != longList.end(); ++it) {
</code></pre>

<hr>

<p>Don't use <code>NULL</code>. This is old school C for a <code>null</code> pointer. Unfortunately it is actually the number <code>0</code> and can thus accidentally be assigned to numeric types. Which is confusing as they are not pointers.</p>

<p>In C++ we use <code>nullptr</code> to refer to the <code>null</code> pointer. It can only be assigned to pointer objects and thus is type safe.</p>

<hr>

<p>Don't use <code>NULL</code> to represent nothing.</p>

<pre><code>    char userChoice = NULL;
</code></pre>

<p>That is not a concept in C++. Here <code>userChoice</code> is a variable. It exists and will always have a value. The trouble is that <code>char</code> is a numeric type so assigning <code>NULL</code> too <code>userChouce</code> gave it the integer value of <code>0</code> which is the same as the char value '\0'.</p>

<p>You can leave it unassigned or put a default value it in. In this context since you are about to read into it I would just leave it unassigned.</p>

<pre><code>    char userChoice;
</code></pre>

<p>As long as you write into it before reading its value everything is OK.</p>

<hr>

<p>Reading from a stream can fail.</p>

<pre><code>std::cin &gt;&gt; userChoice;
</code></pre>

<p>Reading a stream can fail. Even the std::cin input can get an EOF signal which means nothing more can be read.</p>

<p>So always check the result of the read.</p>

<pre><code>if (std::cin &gt;&gt; userChoice) {
    // Something was successfully read into the character.
}
</code></pre>

<hr>

<p>I don't see why you need this loop.</p>

<pre><code>        while (true) {
            if (userChoice == 'Y' || userChoice == 'y') {
                return it;
            }
            else if (userChoice == 'N' || userChoice == 'n') {
                break;
            }
            else std::cout &lt;&lt; "Please enter Y or N." &lt;&lt; std::endl;
            break;
        }
</code></pre>

<p>You could simplify this to:</p>

<pre><code>        if (userChoice == 'Y' || userChoice == 'y') {
            return it;
        }
        else if (userChoice != 'N' &amp;&amp; userChoice != 'n') {
            std::cout &lt;&lt; "Please enter Y or N." &lt;&lt; "\n"
        }
</code></pre>

<hr>
    </div>