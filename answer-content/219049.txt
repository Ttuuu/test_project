<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Just to complement the answers from above with one own full example version: <a href="https://wandbox.org/permlink/IdsAwDRKsSdNhvB2" rel="nofollow noreferrer">Live</a>
The comments are in the code</p>

<pre><code>#include &lt;algorithm&gt;
#include &lt;cassert&gt;
#include &lt;iostream&gt;
#include &lt;iterator&gt;
#include &lt;vector&gt;

template&lt;typename Container&gt;
void print(const Container&amp; c)
// helper function for printing container elements
{
  std::cout &lt;&lt; "[ ";
  std::copy(begin(c), end(c), std::ostream_iterator&lt;typename Container::value_type&gt;(std::cout, " "));
  std::cout &lt;&lt; "]";
  std::cout &lt;&lt; std::endl;
}

template&lt;typename Iter&gt;
void shift(Iter first, Iter last, std::size_t n)
// helper function for left-shiting n-elements in range [first, last)
// uses std::rotate from algorithm-STL
{
  auto nn = n % std::distance(first, last);   // invariant: shifting c.size() times provides the initial sequence
  auto new_first = first;
  std::advance(new_first, nn);                  // new first
  std::rotate(first, new_first, last);
}

template&lt;typename Container&gt;
void left_shift(Container&amp; c, std::size_t n)
// helper function for left-shifting n-elements in container c
{
  shift(begin(c), end(c), n);
}

template&lt;typename Container&gt;
void right_shift(Container&amp; c, std::size_t n)
// helper function for right-shifting n-elements in container c
{
  shift(rbegin(c), rend(c), n);
}

template&lt;typename Iter&gt;
typename Iter::value_type
mmin(Iter first, Iter last)
//
// Assuming non-empty sequence
//
// finds Minimum within sorted shifted container c with log-n complexity
// Assumption:
// 1) container c containes no duplicates
// 2) container c is sorted in asceding order initially: c[n] &lt; c[n+1] (strict &lt; because no duplicates according to 1)
//
// if the sorted container c is shifted
// then there is position k, for which: c[k] &gt; c[k+1]
// -&gt;
// it's not hard to show that: min = c[k+1] is the requested minimum
// and the searched position k for which c[k] &gt; c[k+1]
// is within range [start, end), for which: c[start] &gt; c[end-1];
//
// for example:
// Initial sorted container:
// 0 1 2 3 4 5 6 7 8 - position
// 1 2 3 4 5 6 7 8 9 - elements
//
// shifting to left
// 3 4 5 6 7 8 9 1 2 - c[6] &gt; c[7] = min(c)
//
// shifing to right:
// 7 8 9 1 2 3 4 5 6 - c[2] &gt; c[3] = min(c)
//
// Algorithm for finding minimum:
// we are doing binary search for c[k] &gt; c[k+1] within range [start, end) with c[start] &gt; c[end-1]
// starting from 2 Ranges: 
//  Range1: [start=first, end=(first+last)/2)
//  Range2: [start=(first+last)/2, last)
//
//  and repeating recursively with [first, last) = one of {Range1, Range2} with c[first] &gt; c[last-1]
{
  auto d = std::distance(first, last);

  assert(1 &lt;= d);

  auto p = first + d/2;

  return (d == 1) ? *first   // 1 element
                  : (
                      (*first &gt; *std::next(first)) ? *std::next(first)  // if pivot is beyond minimum
                                                   : (

                                                        (*p &gt; *std::next(p)) ?  *std::next(p)  // minimum
                                                                             : ( (*p &gt; *std::prev(last)) ? mmin(p, last)  // recursive search within new range
                                                                                                         : mmin(first, p) // via divide and conquer
                                                                               )

                                                      )
                      );
}


template&lt;typename SortedShiftedContainer&gt;
typename SortedShiftedContainer::value_type
mmin(const SortedShiftedContainer&amp; c)
{
  return mmin(begin(c), end(c));
}


int main()
{
  std::vector&lt;int&gt; v{1, 2, 3, 4, 5};
  std::cout &lt;&lt; "Initial array : ";
  print(v);

  for (std::size_t n = 1; n &lt;= v.size(); ++n)
  {
    auto vv{v};
    left_shift(vv, n);
    std::cout &lt;&lt; "min = " &lt;&lt; mmin(vv) &lt;&lt; ", ";
    std::cout &lt;&lt; "for left-shifted " &lt;&lt; n &lt;&lt; " elements : ";
    print(vv);
  }

  for (std::size_t n = 1; n &lt;= v.size(); ++n)
  {
    auto vv{v};
    right_shift(vv, n);
    std::cout &lt;&lt; "min = " &lt;&lt; mmin(vv) &lt;&lt; ", ";
    std::cout &lt;&lt; "for right-shifted " &lt;&lt; n &lt;&lt; " elements : ";
    print(vv);
  }


}
</code></pre>
    </div>