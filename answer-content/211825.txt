<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I have added some improvement of my own after some further researching, though I am still welcoming further suggestions/improvements to my code.</p>

<pre><code>using System;
using System.Collections.Generic;
using UnityEngine;
using System.Linq;

public class ObjectPool : Singleton&lt;ObjectPool&gt; {

    private HashSet&lt;GameObject&gt; objectPool;

    private void Awake() {
        objectPool = new HashSet&lt;GameObject&gt;();
    }

    /// &lt;summary&gt;
    /// Add a gameobject to the object pool.
    /// &lt;/summary&gt;
    /// &lt;param name="objToPool"&gt;The gameobject to add to the object pool.&lt;/param&gt;
    /// &lt;param name="deactivateObj"&gt;Deactivate this gameobject upon storing into the object pool.&lt;/param&gt;
    public void AddToPool(GameObject objToPool, bool deactivateObj = true) {
        objectPool.Add(objToPool);

        // If we need to deactivate this gameobject.
        if (deactivateObj) {
            // Set it to not active.
            objToPool.SetActive(false);
        }
    }

    /// &lt;summary&gt;
    /// Fetch a gameobject from the pool, with the gameobject containing the desired component.
    /// &lt;/summary&gt;
    /// &lt;typeparam name="T"&gt;The type of the component.&lt;/typeparam&gt;
    /// &lt;param name="removeFromPool"&gt;True if the fetched gameobject needs to be removed from the pool.&lt;/param&gt;
    /// &lt;returns&gt;The respective gameobject. (Null if none is found)&lt;/returns&gt;
    public GameObject FetchObjectByComponent&lt;T&gt;(bool removeFromPool = true) where T : MonoBehaviour {
        GameObject fetchedObject = null;

        // Foreach game object in the object pool
        foreach (var gameObj in objectPool) {
            // If this gameobject has the desired component.
            if (gameObj.GetComponent&lt;T&gt;() != null) {
                // Fetch this object.
                fetchedObject = gameObj;
                // End loop (an object with the desired component is found.)
                break;
            }
        }

        // If an object is fetched and we need to remove it from the pool.
        if (fetchedObject != null &amp;&amp; removeFromPool) {
            // Remove the fetched object from the pool.
            objectPool.Remove(fetchedObject);
        }

        return fetchedObject;
    }

    /// &lt;summary&gt;
    /// Fetch an array of gameobjects that contains the desired component.
    /// &lt;/summary&gt;
    /// &lt;typeparam name="T"&gt;The type of the component the gameobject must contain.&lt;/typeparam&gt;
    /// &lt;param name="maxSize"&gt;The max size of the array returned. (Negative for limitless)&lt;/param&gt;
    /// &lt;param name="removeFromPool"&gt;True to remove the respective fetched gameobject from the object pool.&lt;/param&gt;
    /// &lt;returns&gt;The respective fetched game objects.&lt;/returns&gt;
    public GameObject[] FetchObjectsByComponent&lt;T&gt;(int maxSize = -1, bool removeFromPool = true) where T : MonoBehaviour {

        HashSet&lt;GameObject&gt; temp = new HashSet&lt;GameObject&gt;();

        // For counting how many objects we already have in the temporary list.
        int i = 0;
        // Go through the object pool.
        foreach (var obj in objectPool) {
            // If we have already reached the max array size.
            if (i &gt;= maxSize) {
                // Exit loop.
                break;
            }
            // If the current object contains the desired component.
            else if (obj.GetComponent&lt;T&gt;() != null) {
                // Add to the temporary list.
                temp.Add(obj);
                // An object has been added.
                ++i;
            }
        }

        var fetchedObjects = temp.ToArray();

        // If we need to remove the fetched objects from the object pool, remove.
        if (removeFromPool) {
            RemoveObjectsFromPool(fetchedObjects);
        }

        return fetchedObjects;
    }

    /// &lt;summary&gt;
    /// Fetch an array of gameobject based on the given condition.
    /// &lt;/summary&gt;
    /// &lt;param name="condition"&gt;The condition to check on when fetching gameobjects.&lt;/param&gt;
    /// &lt;param name="maxSize"&gt;The maximum size of the array returned. (Negative for limitless.)&lt;/param&gt;
    /// &lt;param name="removeFromPool"&gt;True to remove the respective fetched gameobject from the object pool.&lt;/param&gt;
    /// &lt;returns&gt;The respective fetched game objects.&lt;/returns&gt;
    public GameObject[] FetchObjectsByCondition(Func&lt;GameObject, bool&gt; condition, int maxSize = -1, bool removeFromPool = true) {
        HashSet&lt;GameObject&gt; temp = new HashSet&lt;GameObject&gt;();

        // For counting how many objects we already have in the temporary list.
        int i = 0;
        // Go through the object pool.
        foreach (var obj in objectPool) {
            // If we have already reached the max array size.
            if (i &gt;= maxSize) {
                // Exit loop.
                break;
            }
            // If the current object meets the condition.
            else if (condition(obj)) {
                // Add to the temporary list.
                temp.Add(obj);
                // An object has been added.
                ++i;
            }
        }

        var fetchedObjects = temp.ToArray();

        // If we need to remove the fetched objects from the object pool
        if (removeFromPool) {
            RemoveObjectsFromPool(fetchedObjects);
        }

        return fetchedObjects;
    }

    /// &lt;summary&gt;
    /// Fetch a gameobject with the given condition.
    /// &lt;/summary&gt;
    /// &lt;param name="condition"&gt;The condition based on to fetch the gameobject&lt;/param&gt;
    /// &lt;param name="removeFromPool"&gt;True to remove this gameobject from the object pool.&lt;/param&gt;
    /// &lt;returns&gt;The fetched gameobject by the respective condition. (Null if none is found.)&lt;/returns&gt;
    public GameObject FetchObjectByCondition(Func&lt;GameObject, bool&gt; condition, bool removeFromPool = true) {

        GameObject fetchedObject = null;

        // Loop through the object pool.
        foreach (var obj in objectPool) {
            // If this object's condition meets the given condition.
            if (condition(obj)) {
                // Fetch this object.
                fetchedObject = obj;
                // Stop loop (object is found.)
                break;
            }
        }

        // Remove this object pool if required.
        if (removeFromPool &amp;&amp; fetchedObject != null){
            objectPool.Remove(fetchedObject);
        }

        return fetchedObject;
    }

    #region Util

    private void RemoveObjectsFromPool(GameObject[] objectsToRemove) {
        // For each given object.
        foreach (var gameObject in objectsToRemove) {
            // Remove the given object from the object pool.
            objectPool.Remove(gameObject);
        }
    }

    #endregion
}
</code></pre>

<p>I have changed from using a <code>List&lt;T&gt;</code> to using a <code>HashSet&lt;T&gt;</code> since I read up that HashSet has been proven to be faster than a list.<br> (though it takes away the functionality of being able to access a list through it's index, but I do not need the functionality.)</p>

<h1>EDIT</h1>

<p><strong>(Further improvement)</strong></p>

<pre><code>using System.Collections.Generic;
using UnityEngine;

public class ObjectPool&lt;T&gt; {

    private Dictionary&lt;T, HashSet&lt;GameObject&gt;&gt; objectPools;

    public ObjectPool() {
        objectPools = new Dictionary&lt;T, HashSet&lt;GameObject&gt;&gt;();
    }

    /// &lt;summary&gt;
    /// Add the object to the respective object pool
    /// &lt;/summary&gt;
    /// &lt;param name="type"&gt;The type of object to add.&lt;/param&gt;
    /// &lt;param name="obj"&gt;The object to add into the object pool.&lt;/param&gt;
    /// &lt;param name="deactiveObj"&gt;True to deactive this object when adding to the pool.&lt;/param&gt;
    public void AddToObjectPool(T type, GameObject obj, bool deactiveObj = false) {
        // Get the respective object pool.
        var pool = FetchObjectPoolByType(type);
        // Add the object to the pool
        pool.Add(obj);

        if (deactiveObj) {
            obj.SetActive(false);
        }
    }

    /// &lt;summary&gt;
    /// Fetch the first inactive object in the object pool by type.
    /// &lt;/summary&gt;
    /// &lt;param name="type"&gt;The type of object to fetch.&lt;/param&gt;
    /// &lt;returns&gt;An inactive object based on the given type. (Null if none was found)&lt;/returns&gt;
    public GameObject FetchObjByType(T type) {
        // Get the respective bullet pool.
        var pool = FetchObjectPoolByType(type);

        return FetchAnyInactiveObjIfExists(pool);
    }

    #region Util

    private static GameObject FetchAnyInactiveObjIfExists(HashSet&lt;GameObject&gt; pool) {
        GameObject fetchObj = null;

        // Loop through the pool
        foreach (var obj in pool) {
            // If this object is not active.
            if (!obj.activeInHierarchy) {
                // Fetch this object
                fetchObj = obj;
                // Stop loop, an inactive object is fetched.
                break;
            }
        }

        return fetchObj;
    }

    private HashSet&lt;GameObject&gt; FetchObjectPoolByType(T type) {
        // If the pool does not exists yet.
        if (!objectPools.ContainsKey(type)) {
            // Create it
            objectPools.Add(type, new HashSet&lt;GameObject&gt;());
        }

        // Return the pool with given type.
        return objectPools[type];
    }

    #endregion
}
</code></pre>

<p>Rather than dumping everything into a single <code>HashSet</code> pool I have decided to use generic implementation to further separate into different object pools of respective types.<br>
Also, I am now using an Object Pool manager to manage the different instances of ObjectPool.</p>
    </div>