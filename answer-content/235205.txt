<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Indeed, your <code>sortby</code> <em>when used in the style shown, with data members,</em> will not be quite as fast as if you used the STL with a lambda. Look at the difference in assembly between</p>

<pre><code>struct Date {
    int year, month, day;
};

void test1(std::array&lt;Date, 100&gt;&amp; a) {
    sortby(a, &amp;Date::month);
    sortby(a, &amp;Date::year);
}

void test2(std::array&lt;Date, 100&gt;&amp; a) {
    sortby(a, [](const auto&amp; x){ return x.month; });
    sortby(a, [](const auto&amp; x){ return x.year; });
}
</code></pre>

<p>In <code>test1</code>, the difference between <code>&amp;Date::month</code> and <code>&amp;Date::year</code> is encoded in the runtime <em>value</em> of the member pointer. In <code>test2</code>, the difference is encoded in the compile-time <em>type</em> of the lambda. So <code>test2</code> instantiates two different template instantiations, whereas <code>test1</code> calls the same instantiation twice with different inputs. (But if both calls are inlined, the optimizer <em>might</em> be able to hide the difference.)</p>

<p>However, this is not the fault of your <code>sortby</code> helper; it's the fault of using member pointers instead of custom lambdas. You can observe the same differences happening if you call <code>std::sort</code> with a function pointer, versus calling <code>std::sort</code> with an instance of some bespoke type such as <code>std::less&lt;&gt;</code> or <code>std::greater&lt;&gt;</code>.</p>

<hr>

<p>You pass <code>Member&amp;&amp; m</code> by forwarding reference, but then you use it as an lvalue (without forwarding it again). I think I've mentioned before: if you don't intend to forward an argument, then you shouldn't be using a forwarding reference with it. In this case, you just need to look at the value of the member-pointer <code>m</code> without modifying it, so <code>const Member&amp; m</code> would be appropriate. Or, since member data pointers and custom lambdas are both going to be small trivial types, and member function pointers are also trivial types (if slightly larger), we should seriously think about taking <code>Member m</code> directly by value.</p>

<p>Notice that you already take <code>Comparison comp</code> by value.</p>

<p>The comment about using <code>std::begin(c)</code> over <code>c.begin()</code> is accurate. If you want your <code>sortby</code> template to work for C-style arrays, then you should use <code>std::begin(c)</code>. Remember, you can't pass arrays <em>by value</em> (they decay to pointers) — but you can certainly pass arrays <em>by reference</em>, and that's what you're doing here when you <code>sortby</code> an array "in place."</p>

<p>The vast majority of lambdas you write should just take <code>[&amp;]</code>. I don't see any benefit to writing <code>[&amp;m, &amp;comp]</code> when it ends up meaning the same thing as <code>[&amp;]</code>.</p>

<p>So I'd write your helper like this:</p>

<pre><code>template&lt;class Container, class Member, class Comparison = std::less&lt;&gt;&gt;
void sortby(Container&amp; c, Member m, Comparison comp = Comparison()) {
    using std::begin; using std::end;
    std::sort(begin(c), end(c), [&amp;](const auto&amp; a, const auto&amp; b) {
        return comp(std::invoke(m, a), std::invoke(m, b));
    });
}
</code></pre>

<p><code>using std::begin;</code> is the "<code>std::swap</code> two-step," familiar to anyone who's used <code>std::swap</code> before. It means "consider using <code>std::begin</code> for unqualified calls, but if someone has provided a better-matching ADL version of <code>begin</code>, then we'll happily use that version instead." This is certainly overkill — I mean we could just write <code>std::begin(c), std::end(c),</code> — but the two-step is how all the <a href="http://eel.is/c++draft/iterator.range#1.sentence-2" rel="nofollow noreferrer">standard customization points</a> are meant to be used as far as I know, so we might as well stick to it.</p>

<p>Vice versa, I would personally shy away from using the two-step in <code>main</code> —</p>

<pre><code>using os::algo::sortby;
</code></pre>

<p>This seems more confusing than helpful. Are you expecting that someone else <em>might</em> provide a better-matching ADL <code>sortby</code>? If not, then <code>sortby(x,y,z)</code> will always mean <code>os::algo::sortby(x,y,z)</code>... and if it <em>is</em> <code>os::algo::sortby</code>, <a href="https://www.gsarchive.net/mikado/webopera/mk212d.html" rel="nofollow noreferrer">why not say so?</a></p>
    </div>