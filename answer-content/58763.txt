<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here is my idea: use an optional parameter, and use built-in libraries. Much clearer and simpler to understand. This works with 3 parameters, but also works with any # of parameters.</p>

<pre><code>public static Integer min(Integer... numbers) {
    if (numbers.length == 0) return 0;
    // wanted this: assert numbers.length &gt; 0;, but does not work
    return Collections.min(Arrays.asList(numbers));
}
</code></pre>

<p>Calling with:</p>

<pre><code>System.out.println(min(2,1,3)); 
</code></pre>

<p>gives 1.</p>

<p>I tried to find a solution using generics but cannot get it to work.</p>

<p><strong>Edit</strong>: Use <code>IllegalArgumentException</code> (thanks @SimonAndr√©Forsberg!):</p>

<pre><code>public static Integer min(Integer... numbers) {
    if (numbers.length == 0) throw new IllegalArgumentException("Cannot have 0 arguments, i.e. min()");
    return Collections.min(Arrays.asList(numbers));
}
</code></pre>

<p><strong>Edit</strong>: The reason this solution works is that <code>Integer... numbers</code> allows for the program calling it to specify any number of arguments (even 0), and inside <code>min</code> here, it is treated as an array, which we can find the minimum of that array using <code>Collections.min</code> and <code>Arrays.asList</code>. </p>
    </div>