<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li>You open your file but never close it, please use the <a href="https://docs.python.org/3/reference/compound_stmts.html#the-with-statement" rel="noreferrer"><code>with</code></a> statement to manage you files life automatically;</li>
<li>You don't need <code>struct</code> to convert an <code>int</code> to a single <code>byte</code>: you can use the <a href="https://docs.python.org/3/library/stdtypes.html#int.to_bytes" rel="noreferrer"><code>int.to_bytes</code></a> method instead;</li>
<li><code>frames = []; for item in xcontent: frames.append(…transform…(item))</code> cries for a list-comprehension instead; same for <code>buff = bytes(); for item in splitData: buff += …change…(item)</code>: use <a href="https://docs.python.org/3/library/stdtypes.html#bytes.join" rel="noreferrer"><code>b''.join</code></a>;</li>
<li>You shouldn't need to search for delimiters and comments using your regex since all you are interested in are the hexadecimal numbers (<code>r'0x\d{2}'</code>), but this would require a little bit of preprocessing to extract "logical lines" from the C code;</li>
<li>You shouldn't need to read the whole file at once. Instead, reading it line by line and processing only the handful of lines corresponding to a single expression at once would help getting rid of the "search for delimiters" regex.</li>
</ul>

<p>Proposed improvements:</p>

<pre><code>import re


HEX_BYTE = re.compile(r'0x\d{2}')


def find_array_line(file_object):
    """
    Yield a block of lines from an opened file, stopping
    when the last line ends with a semicolon.
    """
    for line in file_object:
        line = line.strip()
        yield line
        # In Python 3.8 you can merge the previous 2 lines into
        # yield (line := line.strip())
        if line.endswith(';'):
            break


def read_array_line(filename):
    """
    Yield blocks of lines in the file named filename as a
    single string each.
    """
    with open(filename) as source_file:
        while True:
            line = ''.join(find_array_line(source_file))
            if not line:
                break
            yield line
        # In Python 3.8 you can write the loop
        # while line := ''.join(find_array_line(source_file)):
        #     yield line


def convert_arrays(filename):
    """
    Consider each block of lines in the file named filename
    as an array and yield them as a single bytes object each.
    """
    for line in read_array_line(filename):
        yield b''.join(
                int(match.group(), 0).to_bytes(1, 'big')
                for match in HEX_BYTE.finditer(line))


if __name__ == '__main__':
    print(list(convert_arrays('c_like_code.txt')))
</code></pre>
    </div>