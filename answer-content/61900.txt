<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You don't talk about if the score can decrease or if it is possible for the score to jump over one of the difficulty ranges. If neither of these things are possible, the logic to set the difficulty can become very simple by using an <code>enum</code>.</p>

<pre><code>enum Difficultly { Normal, Hard, Harder, Hardest }

class State
{
  private Difficultly _currentDifficultly = Difficultly.Normal;
  private int _score = 0;

  public void UpdateDifficulty()
  {
    switch(_currentDifficulty)
    {
      case Normal:
        if (_score  &gt;= 100)
        {
          _currentDifficulty = Difficulty.Hard;
        }
        break;
      case Hard:
        if (_score  &gt;= 500)
        {
          _currentDifficulty = Difficulty.Harder;
        }
        break;
      //...
    }
  }
}
</code></pre>

<p>However, as you can see, this gets very repetitive very fast. An alternative would be to construct a table that defines the data points.</p>

<pre><code>Dictionary&lt;Difficulty, Tuple&lt;int, Difficulty&gt;&gt; _difficultyTransitions = new Dictionary&lt;Difficulty, Tuple&lt;int, Difficulty&gt;&gt;()
{
  { Difficulty.Normal, new Tuple&lt;int, Difficulty&gt;(100, Difficulty.Hard)},
  { Difficulty.Hard, new Tuple&lt;int, Difficulty&gt;(500, Difficulty.Harder)},
  { Difficulty.Harder, new Tuple&lt;int, Difficulty&gt;(1500, Difficulty.Hardest)},
  { Difficulty.Hardest, new Tuple&lt;int, Difficulty&gt;(int.MaxValue, Difficulty.Hardest)},
};

public void UpdateDifficulty()
{
  var transition = difficultyTransitions[_currentDifficulty];
  if (_score &gt;= transition.Item1)
  {
    _currentDifficulty = transition.Item2;
  }
}
</code></pre>
    </div>