<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Well, I don't know if your code could be better or faster but the code could be a lot shorter by using some <code>Linq</code>-"magic".</p>
<p>Your code could use some level of input-parameter-validation because the methods in question are <code>public</code> which means anybody who uses these methods can pass whatever he/she wants, even <code>null</code> which would blow each method and would expose implementation details.</p>
<p>I don't know if the requirement is meant to be that passing <code>Ronald Chris MAC DONALDS</code> returns as lastname <code>MacDonalds</code> but for me this doesn't sound correct.</p>
<p>Instead of splitting the fullname twice and then splitting the lastname again, you should consider to just pass a <code>string[]</code> to the methods.</p>
<p>You could consider to have one <code>public</code> method where you pass the fullname and get a <code>Tuple&lt;string, string&gt;</code> so you would need only one parameter validation because you can make the other methods <code>private</code>.</p>
<p>Because a lastname contains only UpperCase letters we can take the passed <code>string[]</code> and take each <code>string</code> in this array which contains only upper-case letters, we will leave the first char because it allready is uppercase and take the remaining chars as lower-case chars. Last we join them using a space char like so</p>
<pre><code>private static string GetLastName(string[] nameParts)
{
    return string.Join(" ", nameParts.Where(s =&gt; s.All(c =&gt; char.IsUpper(c)))
                                     .Select(s =&gt; s[0] + s.Substring(1).ToLowerInvariant()));
}  
</code></pre>
<p>For the firstname we know that not all chars are upper-case chars. So we take each <code>string</code> inside the passed array and check if any char is a lower-case char, and then join the found strings by using a space char like so</p>
<pre><code>private static string GetFirstName(string[] nameParts)
{
    return string.Join(" ", nameParts.Where(s =&gt; s.Any(c =&gt; char.IsLower(c))));
}  
</code></pre>
<p>Last but not least we need to call these 2 methods after some proper validation like so</p>
<pre><code>public static Tuple&lt;string, string&gt; GetNormalizedNames(string fullName)
{
    if (fullName == null) { throw new ArgumentNullException(nameof(fullName)); }
    if (string.IsNullOrWhiteSpace(fullName)) { return Tuple.Create("", ""); }

    var nameParts = fullName.Split(' ');

    return Tuple.Create(GetFirstName(nameParts), GetLastName(nameParts));
}  
</code></pre>
<p>which we then call like so</p>
<pre><code>var firstNameLastNameTuple = GetNormalizedNames(fullName);
Console.WriteLine("Name: " + firstNameLastNameTuple.Item1);
Console.WriteLine("Last name: " + firstNameLastNameTuple.Item2);  
</code></pre>
<p>The whole code is now easier to read and therefor easier to maintain. Sure linq is only syntactic sugar and won't be faster than iterating over the chars by "hand" but the benefit is less and easier to read code.</p>
    </div>