<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>It's strange that you're using vectors instead of <code>std::complex</code> to represent your complex numbers.  I think you'll find that using the standard complex-number class will simplify your code.</p>

<p>It's much more efficient and accurate to square a number by simply multiplying rather than going via the much more general <code>std::pow()</code>.  Of course, with <code>std::complex</code>, you don't need to do this squaring yourself, as the <code>std::abs()</code> function is provided to do that for you.</p>

<p>It's also more efficient to compare the squared magnitude against the square of the bound, rather than to compute the square root of the magnitude (so use <code>std::norm()</code> rather than <code>std::abs()</code>).</p>

<p>These changes make for a much more natural version of the code (it's easier to see how it corresponds to the Mandelbrot algorithm):</p>

<pre><code>#include &lt;complex&gt;

constexpr int height = 40, width = 80;

std::complex&lt;double&gt; coord_to_complex(double i, double j)
{
    double real = (4*i) / (width - 1) - 2.0;
    double imaginary = (2.2 * j) / (height - 1) - 1.1;

    return {real, imaginary};
}

bool is_in_mandelbrot(const std::complex&lt;double&gt; c)
{
    auto z = c;

    for (int t = 0;  t &lt;= 1000;  ++t)
    {
        z = z * z + c;

        if (std::norm(z) &gt; 4)
            return false;
    }

    return true;
}
</code></pre>

<hr>

<p>You can save some memory allocations by reserving space for the output:</p>

<pre><code>std::string ret = "";
ret.reserve((width+1) * height);
</code></pre>
    </div>