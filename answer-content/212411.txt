<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Little bit late but let me add <em>another</em> alternative solution, t3chb0t already took care of your code.</p>

<p>You have extension methods for <code>IComparable&lt;T&gt;</code> and <code>Char</code>, this forces you to write your <em>business logic</em> in code instead of a (pseudo) high-level language which resembles your business rules. If you do not want to use a regular expression (I'd use it) then you should try to match 1:1 the language of your requirements:</p>

<pre><code>StringValidator.Validate(str)
    .LengthIsInRange(6, 16)
    .ContainsOnly(Matches.LetterOrDigits, Matches.Hyphen).HasAtMost(1, Matches.Hyphen)
    .StartsWith(Matches.Letter)
    .DoesNotEndWith(Matches.Hyphen);
</code></pre>

<p>This is simple enough to be self-describing. Does it hurt performance? Maybe but it's seldom a problem in LoB applications and business rules can become incredibly convoluted. Is it a problem? Measure it, for performance critical code it's easy to write an extension method (for <code>StringValidator</code>) to perform a specific task. </p>

<p>Note that I'm using an hypothetical <code>Matches.LetterOrDigits()</code> function with <code>string -&gt; bool</code> signature instead of, let's say, <code>Char.IsLetterOrDigit()</code> with <code>char -&gt; bool</code>. Why? Because not every <em>character</em> (OK, I won't repeat this again...) is a single <code>Char</code> then you have to compare strings (few examples: <kbd>à</kbd> or <kbd>dž</kbd> or <kbd>𠀑</kbd>).</p>

<p>Your <strong>requirements are, probably, vague</strong> and your code broken regardless the interpretation you picked. What do they mean with <em>letter</em>? An US-ASCII Latin character? In that case your code is wrong because <kbd>ā</kbd> (LATIN SMALL LETTER A MACRON) is accepted. Is is a <em>letter</em> everything in the <em>Letter</em> Unicode category (or even just in the <em>Latin Extended</em> Unicode block)? Your code is wrong again because <kbd>ā</kbd> (LATIN SMALL LETTER A + COMBINING MACRON) is rejected. This very example can be solved normalizing the string before starting the validation but it's not always that easy.</p>

<p>Imagine that instead of a single validation rule you have...1,000 of them. Or 10,000. I'm not a fan of extension method for primitive types (especially when they're trivial) but the <em>mistake</em> (IMHO) is to work with a <strong>too low level of abstraction</strong>: you do not want to <em>extend</em> <code>String.Length</code> to replicate what <code>&gt;</code> does: you want to extend <code>String</code> to support high level composable and chainable assertions.</p>

<p>Note: <code>ContainsOnly()</code> may even accept regexes, pseudo code:</p>

<pre><code>static ContainsOnly(this StringValidator validator, ...string[] matches) =&gt; ...

static class Matches {
    public static string LetterOrDigit = "a-zA-Z0-9";
}
</code></pre>

<p>Composition should now be fast enough even when you cannot really ignore performance (and you can always have a <code>MatchRegEx()</code> extension method).</p>

<hr>

<p>How to extend this? In previous example I assumed a pseudo-implementation like this:</p>

<pre><code>public StringValidator LengthInRange(int min, int max) {
    if (IsValid) {
        IsValid = Value.Length &gt;= min &amp;&amp; Value.Length &lt;= max;
    }

    return this;
}
</code></pre>

<p>You can easily extend it to run all validators to generate a list of errors:</p>

<pre><code>var result = StringValidator.Validate(str)
    .LengthIsInRange(6, 16)
    .StartsWith(Matches.Letter)
    .DoesNotEndWith(Matches.Hyphen);

if (result.HasErrors)
    Console.WriteLine(String.Join(Environment.NewLine, result.Errors));
</code></pre>

<p>Or to throw an exception:</p>

<pre><code>StringValidator.Validate(str)
    .LengthIsInRange(6, 16)
    .StartsWith(Matches.Letter)
    .DoesNotEndWith(Matches.Hyphen)
    .ThrowIfInvalid();
</code></pre>

<p>I think you've got the point.</p>
    </div>