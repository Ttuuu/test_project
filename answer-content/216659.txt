<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Although most of the code is not shown, which makes the code much harder to review, by the way, here are some observations that may help you improve your code.</p>

<h2>Use <code>const</code> where practical</h2>

<p>The <code>saveRooms</code> member function of <code>RoomBuilder</code> does not appear to alter the underlying object and therefore should be declared <code>const</code>.</p>

<pre><code>bool RoomBuilder::saveRooms() const {
    // code here
}
</code></pre>

<h2>Don't hardcode file names</h2>

<p>In maintaining this code later, the name of the output file might be something that could be placed elsewhere.  Right now, it appears to have a Windows-centric name but if you wanted to port this to Mac or Linux, it would probably be better to pick out the file name as a named compile-time constant like this:</p>

<pre><code>constexpr const char *roomFileName{"DefaultMapRoomBuilder.klvl"};
</code></pre>

<p>That way both the <code>loadRooms</code> and <code>saveRooms</code> could refer to exactly the same file without having to type the filename twice.  Better might be to pass the file name as a parameter to both functions.</p>

<h2>Don't write getters and setters for everything</h2>

<p>There are a lot of functions like <code>Item::setPosition</code> and <code>Item::getPosition</code> that suggest you're attempting to write Java in C++.  Don't do that.  If other classes truly <em>require</em> unfettered access to the details of another class, just make it a <code>struct</code> and directly set and fetch the contents.  </p>

<h2>Use appropriate data structures</h2>

<p>In the description of your code, you write that the rooms have a fixed number of tiles, but your code does not seem to reflect this directly, using a <code>std::vector</code> instead of a <code>std::array</code>.  If you're relying on a fixed size (as the code appears to do) then use a fixed size data structure as well.  If not, then the code would need to be altered to somehow account for variable sized data.  </p>

<h2>Rethink item numbering</h2>

<p>The current code contains these lines:</p>

<pre><code>int tIndex = 0;
for(int x = 0; x &lt; 32; x++){
    for(int y = 0; y &lt; 18; y++){
        rooms.at(roomIndex).setTile(x, y, tiles[tIndex]);
        tIndex++;
    }
}
</code></pre>

<p>This probably works just fine for you, but the usual order of storing this is the other way around.  That is, the <em>inner</em> loop would more typically be the <code>x</code> loop.</p>

<h2>Use standard library functions</h2>

<p>Here's how I would write <code>saveRooms</code>:</p>

<pre><code>bool RoomBuilder::saveRooms() const {
    std::ofstream out{roomFileName};
    std::copy(rooms.begin(), rooms.end(), std::ostream_iterator&lt;Room&gt;(out, "\n"));
    return static_cast&lt;bool&gt;(out);
}
</code></pre>

<p>There's a lot going on here in just a few lines.  First note that I'm using the C++11 <a href="http://www.stroustrup.com/C++11FAQ.html#uniform-init" rel="nofollow noreferrer">uniform initialization syntax</a> to initialize the variable.  </p>

<p>The last line takes advantage of the fact that <code>std::ofstream</code> has an <code>explicit operator bool()</code> that returns the state of the stream.  (Some people would write <code>return !!out;</code> but I think my version is more clear in intent.)  </p>

<p>The <code>std::copy</code> is an elegant function that allow you to use an already defined extractor for <code>Room</code>.  Here's one way to write that as a <code>friend</code> function of <code>Room</code>:</p>

<pre><code>friend std::ostream&amp; operator&lt;&lt;(std::ostream&amp; out, const Room&amp; r) {
    out &lt;&lt; "Tiles: ";
    std::copy(r.tile.begin(), r.tile.end(), std::ostream_iterator&lt;int&gt;(out, " "));
    out &lt;&lt; '\n';
    std::copy(r.items.begin(), r.items.end(), std::ostream_iterator&lt;Item&gt;(out, "\n"));
    return out &lt;&lt; "END_OF_ROOM";
}
</code></pre>

<p>This, in turn, relies on a similar function for <code>Item</code>:</p>

<pre><code>friend std::ostream&amp; operator&lt;&lt;(std::ostream&amp; out, const Item&amp; item) {
    return out &lt;&lt; "Items: \nID: " &lt;&lt; item.id &lt;&lt; " " &lt;&lt; item.pos.x &lt;&lt; " " &lt;&lt; item.pos.y;
}
</code></pre>

<p>I have exactly reproduced the behavior of the original in which the "Items:" line is repeated for each item.  If this were my code, I'd probably either change that to only write it once, or eliminate it entirely, since the "ID:" string is enough to uniquely identify the item in this context.</p>

<h2>Rethink the interface</h2>

<p>In the same logic as the rewritten function above, in reality, I probably wouldn't have <code>loadRooms</code> and <code>saveRooms</code> functions, but instead define <code>ostream</code> and <code>istream</code> functions like the ones described above for <code>Item</code> and <code>Room</code>.</p>

<h2>Do more error handing</h2>

<p>If the input file is malformed, there is very little error checking in the existing code.  I'd suggest instead that the code <code>throw</code> if an error is found in the formatting or contents of the input file.</p>

<h2>Avoid pointless complexity</h2>

<p>The use of <code>lines</code> in <code>loadRooms()</code> makes little sense and only contributes complexity to the code.  One could much more simply read and process each line directly from the file.</p>
    </div>