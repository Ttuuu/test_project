<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>dfhwze has addressed the structural and other issues with the code, so I will focus on eliminating the <em>pyramid of doom</em> in <code>AllPasswordCodes</code>:</p>

<blockquote>
<pre><code>    private static IEnumerable&lt;byte[]&gt; AllPasswordCodes {
        get {
            for (char a = '0'; a &lt;= '9'; a++) {
                for (char b = '0'; b &lt;= '9'; b++) {
                    for (char c = '0'; c &lt;= '9'; c++) {
                        for (char d = '0'; d &lt;= '9'; d++) {
                            yield return new[] { (byte) a, (byte) b, (byte) c, (byte) d };
                        }
                    }
                }
            }
        }
    }
</code></pre>
</blockquote>

<p>It can be done in a single loop in the following way:</p>

<pre><code>public static IEnumerable&lt;Byte[]&gt; GetAllPasswords()
{
  for (int i = 0; i &lt; 1e4; i++)
  {
    yield return Encoding.ASCII.GetBytes(i.ToString("0000"));
  }
}
</code></pre>

<p>It's maybe a few milliseconds slower, but IMO more maintainable. </p>

<p>Alternatively you can do:</p>

<pre><code>public static IEnumerable&lt;Byte[]&gt; GetAllPasswords()
{
  for (int i = 0; i &lt; 1e4; i++)
  {
    yield return new byte[] 
    {
      (byte)('0' + i / 1000),
      (byte)('0' + i % 1000 / 100),
      (byte)('0' + i % 100 / 10),
      (byte)('0' + i % 10)
    };
  }
}
</code></pre>

<p>Which seems to have same performance as the original.</p>

<p>As shown I've changed it from a property to a method, because IMO a property shouldn't execute code in this way to return. Alternatively you could make a class implementing <code>IEnumerable&lt;T&gt;</code>:</p>

<pre><code>  class PasswordEnumerator : IEnumerable&lt;byte[]&gt;
  {
    public IEnumerator&lt;byte[]&gt; GetEnumerator()
    {
      for (int i = 0; i &lt; 1e4; i++)
      {
        yield return new byte[] 
        {
          (byte)('0' + i / 1000),
          (byte)('0' + i % 1000 / 100),
          (byte)('0' + i % 100 / 10),
          (byte)('0' + i % 10)
        };
      }
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
      return GetEnumerator();
    }
  }
</code></pre>
    </div>