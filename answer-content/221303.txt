<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I really like @Justin's answer, but I'm new here so I unfortunately cannot comment or upvote yet. So instead I'll take this opportunity to detail his answer in relation to your question.</p>

<p>The first thing to note, the methodologies of your (@enoy) solution and @Justin's is entirely different. Your solution is recreating the longest substring of the given string, then returning the length of the recreation. @Justin's solution is using simple math. To lay out the steps:</p>

<ol>
<li>Create a beginning index, start at 0.</li>
<li>Traverse from the beginning index until the current letter and the previous letter are no longer the same. Record the index of the last letter that was repeating as an end index.</li>
<li>Subtract the two indexes</li>
<li>store the length in a variable, maybe called longest_length.</li>
<li>replace the beginning index with the end index + 1 (plus one because you want the rest of the input string and none of the previous substring)</li>
<li>repeat steps 2 and 3.</li>
<li>store the max of the longest_length and the length that was just found.</li>
<li>keep repeating 5 - 7 until the end of the input string</li>
<li>return longest_length</li>
</ol>

<p>So with the steps lain out and clear, to answer your question:</p>

<blockquote>
  <p>What could be improved?</p>
</blockquote>

<p>If all you care about is the length of the longest substring, there shouldn't be a reason for you to recreate the substring in order to find its length. In terms of complexity, your space complexity is broken down like this:</p>

<ul>
<li><code>substrings = []</code> - Since you're simply splitting the input string into substrings and storing them all into an array, this will always have a space complexity of <span class="math-container">\$n\$</span>, where <span class="math-container">\$n\$</span> is the length of the input string.</li>
<li><code>current_substring = ""</code> - If the entire input string is repeating, this can potentially be as large as <span class="math-container">\$n\$</span>, where <span class="math-container">\$n\$</span> is the length of the input string.</li>
<li><code>lengths = []</code> - If the entire input string does not have a single repeating substring, this can potentially be as large as <span class="math-container">\$n\$</span>, where <span class="math-container">\$n\$</span> is the length of the input string.</li>
</ul>

<p>So all in all, you have a big O space complexity of <span class="math-container">\$O(3n)\$</span> or <span class="math-container">\$O(n)\$</span> (for something small like this I prefer not to simplify constants).</p>

<p>Where as @Justin's solution breaks down as so:</p>

<ul>
<li><code>begin_index</code> - Only stores a single value at any given time.</li>
<li><code>end_index</code> - Only stores a single value at any given time.</li>
<li><code>longest_length</code> - Only stores a single value at any given time.</li>
</ul>

<p>So you can see how much smaller this is already, and in terms of big O space complexity, it's <span class="math-container">\$O(3)\$</span> or simplifies to <span class="math-container">\$O(1)\$</span>.</p>

<p>All that was space complexity though, as for time complexity:</p>

<p>Let's start with your code breakdown again:</p>

<ul>
<li>You traverse the input string once, to split each substring and record their lengths, so that time complexity is <span class="math-container">\$n\$</span>, where <span class="math-container">\$n\$</span> is the length of the input string.</li>
<li>You then have to traverse your array <code>lengths</code>, and find the max using the <code>max</code> function, and if there's no repeating substring, that can potentially be <span class="math-container">\$n\$</span>, where <span class="math-container">\$n\$</span> is the length of the input string.</li>
</ul>

<p>So all in all, the time complexity is <span class="math-container">\$O(2n)\$</span></p>

<p>For @Justin's:</p>

<ul>
<li>Traverse the list once, checking the max length of each substring as they're built so that's <span class="math-container">\$n\$</span>, where <span class="math-container">\$n\$</span> is the length of the input string.</li>
</ul>

<p>It's unavoidable, traversing the list at least once when doing anything involving comparisons, but you can see how work could have been combined into one loop, rather than two separate ones here.</p>

<p>And on closing notes, @Justin's solution can be easily adapted to store the substring simply with a variable named <code>longest_substring = input_string[begin_index:end_index]</code> if the <code>longest_length</code> variable changes. This is much smaller space than having an array of all substrings. </p>

<p>Here is @Justin's answer I was talking about (which got deleted) -</p>

<pre><code># Function to return the ending index for the 
# largest valid subsring starting from index i
def end_of_uniform_substring(string, n, i): 
    i += 1
    while (i &lt; n):  
        current = string[i] 
        previous = string[i - 1] 
        #if the current character in the string 
        #is equal to the previous character
        if (current == previous):
            i += 1
        else: 
            break
    return i - 1

# Function to return the length of the  
# longest substring of consecutive 
# repeating letters in string   
def largest_substring(string, n): 
    length = 0
    i = 0
    while (i &lt; n): 
        # Valid substring exists from  
        # index i to end 
        end = end_of_uniform_substring(string, n, i) 
        # Update the length
        length = max(end - i + 1, length) 
        i = end + 1
    return length
</code></pre>

<p>Hope this helps!</p>
    </div>