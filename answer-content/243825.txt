<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>It is doubtful that the program is so long that it can't all be included, but you have made an effort to comply with the <a href="https://codereview.stackexchange.com/help/how-to-ask">Code Review guidelines</a>. Just be aware that comments such as <code>// more logic here</code> or <code>// ...</code> will sometimes get the question votes to close.</p>
<p><strong>Complexity</strong><br>
You're a Java programmer so I'm going to assume you understand object oriented programming principles. While the C programming language isn't object oriented, some of the principles can be applied such as the Single Responsibility Principle as applied to functions and modules. Therefore the current function is too complex because it does too much. Input should be in either in the calling function or <code>next_token()</code> should consist of 2 functions, one that does input and one that parses the input for tokens.</p>
<p><strong>Error Handling</strong><br>
There are 2 kinds of errors that can occur in this program, the first is memory allocation errors and the second is input errors. The <code>Xalloc()</code> functions can fail if the system has insufficient memory, while this is rare on modern computers it can still happen, especially in an embedded environment with limited memory. A call to any of the memory allocation functions should always be followed by a test to see if the pointer to the memory is <code>NULL</code> or not. If the pointer is <code>NULL</code> then the memory allocation failed and somewhere in the code the program has to decide what to do, including reporting the memory allocation error.</p>
<pre><code>char* next_token() {
    char* buf = malloc(BUF_SIZE * sizeof(*buf));
    if (buf == NULL)
    {
        fprintf(stderr, "Memory allocation failed in next_token");
        return buf;
    }

    char cc;

    // consume leading whitespaces
    while (isspace(cc=getchar())) ;

    buf[0] = cc;
    int i=1;
    int nofs = 1;
    while (!isspace(cc=getchar())) {
        if (i &gt;= BUF_SIZE*nofs) {
            // gracefully extend buffer size
            nofs++;
            buf = realloc(buf, BUF_SIZE*nofs*sizeof(*buf));
            if (buf == NULL)
            {
                fprintf(stderr, "Memory allocation failed in next_token");
                return buf;
            }

        }
        buf[i] = cc;
        i++;
    }
    // trim buffer
    buf = realloc(buf, (i+1)*sizeof(*buf));
    if (buf == NULL)
    {
        fprintf(stderr, "Memory allocation failed in next_token");
        return buf;
    }

    buf[i] = '\0';
    return buf;
}
</code></pre>
<p>Please note that in the above code I changed <code>sizeof(char)</code> to <code>sizeof(*buf)</code>. This makes the code more maintainable because the type of <code>buf</code> can be changed and the memory allocations don't require additional editing.</p>
<p>Input errors: If the user types in a <code>CTRL-D</code> on a Unix or Linux system the program will encounter an EOF (end of file) character. It currently can't handle that. This <a href="https://stackoverflow.com/questions/47119083/does-isspace-accept-getchar-values">stackoverflow</a> question covers that in more detail.</p>
<p><strong>Character Input is Slow</strong><br>
Character input using <code>getchar()</code> is slower than using buffered input and processing character input rather than processing strings after they have been read is slower. Grab as many characters as you can using a fixed size buffer and a call to <a href="http://www.cplusplus.com/reference/cstdio/fgets/" rel="nofollow noreferrer">fgets(char *buffer, int buffer_size, FILE *stream)</a>. The function <code>fgets()</code> reads a line at a time <code>buffer_size</code> can be 1K, 2K or 4K or larger + 1 (most lines will be less than 1K). This reduces the memory allocation involved and reads the input faster. You will need a pointer that points to the string starting point after the token. Using <code>fgets()</code> in the main program or in a function that calls the tokenizer will also allow you to handle the EOF situation since <code>fgets()</code> only reads until the end of the file as well as the end of the line.</p>
    </div>