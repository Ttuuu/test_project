<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>A minor modification:</p>

<pre><code>function solution(A) {
    const size = A.length;
    let sum = 0;

    for (let int of A){
        sum += int;
    }

    return (((size + 1)*(size + 2))/2) - sum
}
</code></pre>

<p>Note that I've kept the function name because it is what the exercises/tests in Codility use.</p>

<p>As noted in the lesson material, the input N is an integer within the range [0..100,000]; so <span class="math-container">\$O(n)\$</span> or <span class="math-container">\$O(N\log{N})\$</span>  are acceptable time complexities. 
The dominant operation in this function is <code>sum += int;</code> (repeated in the loop N times). Other than that, we have a constant number of other operations, not e.g. <a href="https://www.quora.com/How-can-we-check-for-the-complexity-log-n-and-n-log-n-for-an-algorithm" rel="nofollow noreferrer">a nested loop where the input or another variable of the same order is halved in each iteration of the loop</a>, which would be <span class="math-container">\$O(N\log{N})\$</span> time complexity. So both of our solutions are <span class="math-container">\$O(n)\$</span>  complexity.</p>
    </div>