<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Bug</strong></p>

<p><code>strlen("\x80\x80\x80\x80\x80\x80\x80")</code> does not return the expected 7.  The <code>do</code> loop does not distinguish between <code>'\0'</code> and <code>'\x80'</code>.</p>

<p><code>strlen("\x80\x80\x80")</code> returns 0, 1, 2  or 3 depending on alignment.</p>

<p>These render  the function broken.</p>

<p><strong>Why <code>int32_t</code>?</strong></p>

<p>Certainly <code>int32_t*</code> marches down the sting at a 4x clip rather than a plodding <code>char *</code>.  Yet for a 16-bit <code>int</code> machine, <code>int32_t*</code> may be slower.  For a 64-bit machine, <code>int64_t*</code> could even be faster.   I'd expect a <code>unsigned *</code> to work fast or even fastest.  I guess that is why <code>strlen()</code> is a library function - each implementation is expected to use its own optimal approach.</p>

<p><strong>Minor: Clearly use unsigned mask constants</strong></p>

<p>With bit masking, shifts and subtraction, using unsigned math has less review concerns.</p>

<p><code>0x01010101</code> --&gt; <code>0x01010101u</code>.</p>

<p><strong>Portability</strong></p>

<p><code>while(... &amp; (sizeof(uint32_t)-1))</code> is a reasonable alignment test but not a <em>specified</em> correct one.  Conversion of a pointer to an integer need not follow the usual linear expectations.  I do not know of any implementation where this will not work, but it is not C specified.</p>

<p>Notes:<br>
<code>uint32_t</code> is an optional type.  A <a href="https://codereview.stackexchange.com/q/215113/29485">unicorn</a> platform may not have it defined.<br>
<code>uintptr_t</code> is also an <em>optional</em> type.</p>

<p>Could use something like </p>

<pre><code>#include &lt;stdint.h&gt;
#ifndef UINTPTR_MAX
  #error "You are kidding me? An implementation without uintptr_t!" 
#endif
</code></pre>

<p><strong>Comment nit</strong></p>

<p><code>Mask off high bit</code> should be "Mask off high bits" or "Mask off each byte high bit", ...</p>

<pre><code>/* Mask off high bit */
i &amp;= HIGH_MASK;
</code></pre>
    </div>