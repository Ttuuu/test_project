<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Prefer C++ headers (<code>&lt;cmath&gt;</code> rather than <code>&lt;math.h&gt;</code>); we'll then use <code>std::abs()</code> and <code>std::sqrt()</code> - or better, <code>std::hypot()</code>.</p>

<p>The <code>std::abs()</code> calls seem premature - we can defer them to within the <code>(sum &gt;= 20)</code> condition.</p>

<p>Prefer to give names to the values used in <code>dirImg</code>.  For example:</p>

<pre><code>enum orientation : unsigned char
{
     None,
     Vertical,
     Horizontal,
};
</code></pre>

<p>The indexing in the loop might be easier to read if we just offset from <code>index</code>; it might also be slightly more efficient if the compiler can't reason about the <code>(cols Â± 1) * i)</code> for us:</p>

<pre><code>  for (std::size_t i = 1; i&lt;rows - 1; i++) {
       for (std::size_t j = 1; j&lt;cols - 1; j++) {
           auto const index = i*cols + j;

           // leading and trailing diagonal differences are common
           int com1 = smoothImg[index + cols + 1] - smoothImg[index - cols - 1];
           int com2 = smoothImg[index - cols + 1] - smoothImg[index + cols - 1];

           int gx = com1 + com2 + smoothImg[index + 1] - smoothImg[index - 1];
           int gy = com1 - com2 + smoothImg[index + cols] - smoothImg[index - cols];

           auto sum = static_cast&lt;short&gt;(std::hypot(gx, gy));

           gradImg[index] = sum;
           if (sum &gt;= 20) {
               dirImg[index] = std::abs(gx) &gt;= std::abs(gy) ? Vertical : Horizontal;
           }
       }
   }
</code></pre>

<p>What's special about the threshold value <code>20</code>?  Perhaps that should be a parameter to the function.</p>

<p>Remember to <code>delete[]</code> what you <code>new[]</code> - or better, use standard containers or smart pointers so that we don't need to remember, and so the storage is reclaimed even on a non-local exit (e.g. due to a later <code>std::bad_alloc</code>).</p>

<p>Consider spreading the work across processor cores, e.g. by applying <code>#pragma omp parallel for</code> to the <code>i</code> loop.</p>

<p>Be careful if you use the outputs - we've left a lot of the values uninitialised, especially in <code>dirImg</code>.</p>
    </div>