<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The implementation is easy to understand but the model can be improved.</p>
<h2>Input validation</h2>
<p>As said by @Martin Frank it's very important to validate the input for a file system. For example:</p>
<pre class="lang-java prettyprint-override"><code>public void mkdir(String path){
    if(path==null) {
        throw new IllegalArgumentException("Input cannot be null");
    }
    // ...
}
</code></pre>
<h2>Bug</h2>
<pre><code>String[] queries = path.substring(1).split("/");
</code></pre>
<p>This line cuts the first letter of the <code>path</code> and then splits it. If you call <code>mkdir("newFolder")</code> the result is a folder called <code>ewFolder</code>. You can't assume that all the users will use an absolute path.</p>
<h2>Duplicated code</h2>
<p>Parsing the path is duplicated many times, this is an indicator that you should move the logic into its own method.</p>
<h2>Polymorphism</h2>
<p>Using a single class <code>Inode</code> to model a file and a directory has the following issues:</p>
<ul>
<li>Why a directory has <code>fileContent</code>?</li>
<li>Why a file has children?</li>
<li>How to add another entity like a symbolic link?</li>
</ul>
<p>The class is going to became too complex and hard to test. Create multiple classes that extend <code>Inode</code>.</p>
<h2>Encapsulation</h2>
<p>The instance variables (<code>fileContent</code>, <code>children</code>, etc.) of <code>Inode</code> shouldn't be public. Consider these points:</p>
<ul>
<li>What if you want to change the <code>children</code> to a <code>LinkedList</code>?</li>
<li>What if you want to store an image instead of text?</li>
</ul>
<p>You'll need to change almost every methods of <code>FileSystem</code>! To fix this issue make the state of <code>Inode</code> private and provide access only via methods (<strong>Encapsulation</strong>).</p>
<p>Consider this design:</p>
<pre class="lang-java prettyprint-override"><code>abstract class Inode {
    private String name;

    public Inode(String name) {
        this.name = name;
    }

    public abstract boolean isDirectory();

    // methods to get the name, rename, etc..
}
</code></pre>
<p>These are the classes <code>File</code> and <code>Directory</code>.</p>
<pre class="lang-java prettyprint-override"><code>class File extends Inode {
    public File(String name) {
        super(name);
    }

    @Override
    public boolean isDirectory() {
        return false;
    }
}

class Directory extends Inode {
    private HashMap&lt;String, Inode&gt; children;

    public Directory(String name) {
        super(name);
        children = new HashMap&lt;&gt;();
    }

    @Override
    public boolean isDirectory() {
        return true;
    }
    public boolean contains(String nodeName) {
        return children.containsKey(nodeName);
    }
    // methods to query children. Do not return the HashMap!
}
</code></pre>
<p><strong>In this way you can easily change the HashMap to another data structure without impacting the <code>FileSystem</code></strong>.</p>
<p>A file that contains text will extends from <code>File</code>:</p>
<pre class="lang-java prettyprint-override"><code>class TextFile extends File{
    private StringBuilder content;
    
    public TextFile(String name) {
        super(name);
        content = new StringBuilder();
    }
    // methods to get and add content
}
</code></pre>
<h2>Separation of Concerns</h2>
<p>The method <code>ls</code> does too many things:</p>
<ol>
<li>Move the current directory to the given path <strong>-&gt;</strong> move this logic in a method (e.g. <code>cd</code>)</li>
<li>List the files <strong>-&gt;</strong> this is the purpose of the method</li>
<li>Sort the files <strong>-&gt;</strong> don't assume that a user always wants a sorted output, this can be a parameter</li>
</ol>
<p>Same for the methods <code>addContentToFile</code> and <code>readContentFromFile</code>, they are too  high-level for a file system. Usually a file system provides only low-level methods to manage files like create/delete and write/read bytes.</p>
<p>You can move the high-level features from the file system to other classes.</p>
<h2>Minor change</h2>
<ul>
<li>In Java variable names start with a lowercase letter. <a href="https://www.oracle.com/java/technologies/javase/codeconventions-namingconventions.html" rel="nofollow noreferrer">Java Naming Conventions</a></li>
</ul>
    </div>