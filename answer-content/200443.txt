<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The algorithm that you have implemented right now just raises an <code>IndexError</code>.</p>

<p>I'll suggest a slightly different way to do is that will have <code>O(n)</code> speed and <code>O(1)</code> memory, where <code>n</code> is the side length of the matrix.</p>

<p>Correct me if I'm wrong, but I think that's the fastest you can get.</p>

<pre><code>def sum_of_diags(matrix):
    # Perhaps add some type checking first,
    # check whether the matrix is empty

    size = len(matrix[0])
    if size == 1:
        # What do you want to do with a single-element matrix?
        return matrix[0][0]*2

    # Just initializing the sum and adding to it
    # reduces the space complexity from O(n) to O(1)
    diag_sum = 0

    for i in range(size):
        # First, we sum over the main diagonal
        # from [0, 0] to [size, size]
        diag_sum += matrix[i][i]

        # Second, we sum over the other diagonal,
        # going from [0, size] to [size, 0]
        diag_sum += matrix[i][size-i-1]
    return diag_sum
</code></pre>

<p>Test it:</p>

<pre><code>&gt;&gt; m = np.arange(1, 9).reshape((3, 3))
&gt;&gt; m
array([[1, 2, 3],
   [4, 5, 6],
   [7, 8, 9]])

&gt;&gt; sum_of_diags(m)
30
</code></pre>
    </div>