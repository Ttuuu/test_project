<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Edge cases</h3>
<p>As some comments have pointed out, your current code doesn't handle length-0 arrays, or length-1 arrays, or arrays where all elements are equal (e.g. <code>[5, 5, 5, 5, 5]</code>). In all of these cases, your <code>while</code>-loop at the very beginning of the method will hit an "array index out of bounds" exception. This needs to be fixed.</p>
<h3>Logic flow</h3>
<p>Conceptually, the method proceeds through the array comparing elements until one of two things happens:</p>
<ol>
<li>It finds elements that are out of order. (Return <code>false</code>.)</li>
<li>It reaches the end of the array. (Return <code>true</code>.)</li>
</ol>
<p>In this scenario, I think it helps to think of returning <code>false</code> as the "exceptional" case and returning <code>true</code> as the "default" case. Instead of having two <em>separate</em> <code>return true</code> statements, we can put one <code>return true</code> statement at the very bottom of the method. So if we haven't returned <code>false</code> earlier in the method, we will return <code>true</code> "by default".</p>
<p><strong>Post-acceptance edit:</strong> Another simplification to the flow is possible. Your code uses a loop to pass over any duplicates at the start of the array, and <em>then</em> picks whether the sorting order should be ascending or descending by comparing the two elements after those leading duplicates. It is much simpler to pick the sorting order by comparing the <em>first</em> and <em>last</em> elements of the array (an idea which I borrowed/stole from <a href="https://codereview.stackexchange.com/users/49476/sanastasiadis">sanastasiadis</a>'s answer <a href="https://codereview.stackexchange.com/a/230766/192133">here</a>). This means we don't need special handling for duplicates at all.</p>
<h3>Style</h3>
<p>This code caught my eye:</p>
<pre><code>      while (arr[i] == arr[i + 1])  //  same elements at the beginning
         i++;
</code></pre>
<p>Yes, if the the body is only one line, then technically you <em>can</em> write <code>if</code>s and <code>for</code>s and <code>while</code>s without using brackets (<code>{</code> and <code>}</code>). And in some ways it does look cleaner. But it is also risky. If the code where you use that style gets edited later, it is very easy for someone to make a typo like this:</p>
<pre><code>while (a == b)
    foo();
    bar();
</code></pre>
<p>...where it <em>looks</em> like <code>bar()</code> is called as part of the loop, but it's actually called <em>after</em> the loop. For this reason, I recommend that you get into the habit of always using brackets.</p>
<p>Also, I would prefer to use <code>i + 1 &lt; n</code> instead of <code>i &lt; n - 1</code> for the comparisons, because we're already using <code>i + 1</code> in a lot of places and I think it makes the code easier to read if we just use that more. It gives the reader one concept to grasp, instead of two. But maybe that's just me.</p>
<h3>Putting it all together</h3>
<pre><code>   public static boolean isSorted(int[] arr)
   {
      int n = arr.length;

      if (n == 0 || arr[0] &lt;= arr[n-1])   //  candidate for ascending, non-decreasing
      {
         for (int i = 0; i + 1 &lt; n; i++)
         {
            if (arr[i] &gt; arr[i + 1])
            {
               return false;
            }
         }
      }
      else  //  candidate for descending, non-increasing
      {
         for (int i = 0; i + 1 &lt; n; i++)
         {
            if (arr[i] &lt; arr[i + 1])
            {
               return false;
            }
         }
      }

      return true;
   }
</code></pre>
    </div>