<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>For me it is a bit weird to see an enum representing a resource, even if it is in memory. It's not wrong or anything, but currently even the loading takes place during construction of the enum. Furthermore, as mentioned in a comment, I can see where another icon needs to be tested / substituted. In that case it might make sense to update the file name for a specific configuration.</p>

<p>That aside, I would do more of a code review rather than giving a good solution, because that's been taken care of.</p>

<p>First of all, I'd put empty lines around the <code>value</code> field declaration and in between the methods and constructors. That would improve readability by a lot.</p>

<hr>

<pre><code>public enum MessageIcons {
</code></pre>

<p>I would not use plural <code>MessageIcons</code> but just <code>MessageIcon</code>. That way you get <code>MessageIcon.PLAIN</code> which reads better than <code>MessageIcons.PLAIN</code>. I hope you agree, because this is how it is used everywhere that I've seen.</p>

<pre><code>PLAIN(-1),
</code></pre>

<p>Maybe it's a leftover from before, but it seem strange that you start counting with <code>-1</code>. Generally we don't number enums at all; it is just not required. And otherwise you can simply call the <code>ordinal()</code> method on the enum value. But before you do, read up on the documentation of it (!).</p>

<pre><code>private final Map&lt;Integer, Icon&gt; icons = Map.of(...);
</code></pre>

<p>If you would create a map for enums then there is absolutely no need to use an <code>Integer</code>. It is much more simple to directly use enum values themselves, giving you a <code>Map&lt;MessageIcons, Icon&gt;</code>.</p>

<p>Remember that each enum is really a singleton. What you are doing here is to create 5 separate maps, one for <code>PLAIN</code>, one for <code>ERROR</code>, etc.! If you create a map (which is one option to create a two way table for a value -&gt; enum on top of enum -&gt; value) then it should be <code>static</code>.</p>

<pre><code>-1,new ImageIcon("Plain.png"),
</code></pre>

<p>There should be a space after the comma. That's common code style as well.</p>

<pre><code>MessageIcons(int value){
</code></pre>

<p>Generally the constructor of an enum is only used for the enumerated enum values. So generally you should make it <code>private</code>. This and the next method <code>getIcon</code> also do not have a space between the closing parenthesis and the brace. That's almost universal for Java and other C-like languages.</p>
    </div>