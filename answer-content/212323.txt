<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Functions, functions, functions. They make your life a lot easier, because they allow you to give a clear name to things and even add a <a href="https://www.python.org/dev/peps/pep-0257/" rel="nofollow noreferrer"><code>docstring</code></a> to it to add even more description of what the function does. It also means that instead of having to read a whole block of code it is usually enough to read the name of the function to know what is happening (if it is a good name, of course, <a href="https://martinfowler.com/bliki/TwoHardThings.html" rel="nofollow noreferrer">one of the harder problems in computer science</a>).</p>

<p>Now, let's get to defining some functions. Ideally each function is responsible for one thing, and one thing only (the <a href="https://en.wikipedia.org/wiki/Single_responsibility_principle" rel="nofollow noreferrer">Single Responsibility Principle</a>).</p>

<p>First, a function that asks for user input, with a given message and a type:</p>

<pre><code>def get_user_input(message, type=str):
    """Ask the user for input using `message`.
    Enforce that the input is castable to `type` and cast it.
    """
    while True:
        try:
            return type(input(message))
        except ValueError:
            print (f"Please input a {type}.")
</code></pre>

<p>Note that in your case calling <code>str</code> on <code>input</code> is not necessary in Python 3, since it always returns a <code>str</code>. But here we need it to allow accepting arbitrary types.</p>

<p>Next, I would keep your products and quantities as a dictionary of <code>product_name: quantity</code> key-value pairs. This even allows you to aggregate items if I enter an item multiple times:</p>

<pre><code>def add_item(shopping_list):
    """Add an item to the shopping list.
    If the item already exists in the list, add the quantity to it.
    """
    name = get_user_input("Input the product name: ")
    quantity = get_user_input("Input the product quantity: ", int)
    shopping_list[name] += quantity
</code></pre>

<p>This would normally lead to a <code>KeyError</code> whenever <code>name</code> is not already in the dictionary, but will work out fine if <code>items</code> is a <a href="https://docs.python.org/3/library/collections.html#collections.defaultdict" rel="nofollow noreferrer"><code>collections.defaultdict(int)</code></a>.</p>

<p>Printing the shopping list is also easy:</p>

<pre><code>def print_list(shopping_list):
    for name, quantity in shopping_list.items():
        print(name, "x", quantity)
</code></pre>

<p>And emailing the list to someone should also be a function:</p>

<pre><code>def email_to(shopping_list, from_email, password, *recipients):
    email = EmailMessage()
    email['Subject'] = "Shopping List"
    email['From'] = from_email
    email['To'] = recipients
    message = "\n".join(f"{name} x {quantity}" for name, quantity in shopping_list.items())
    email.set_content(message)

    try:
        s = smtplib.SMTP_SSL('smtp.gmail.com', 465)
        s.ehlo()
        s.login(from_user, password)
        s.send_message(email)
        s.quit()
        print ("\nThe email has been sent.")
    except Exception as e:  
        print ("\nAn error occurred:", e)
</code></pre>

<p>This function could probably be split up further to allow e.g. using a different provider than GMail.</p>

<p>Note that catching all exceptions with a bare <code>except</code> means also e.g. the user pressing <kbd>Ctrl</kbd>+<kbd>C</kbd>, which you usually don't want to do. Instead at least catch only <code>Exception</code> and be more specific if you can. You should also print to the user <em>which</em> exception occurred, for which you can use the <code>as</code> keyword.</p>

<p>Then your main calling code becomes:</p>

<pre><code>import smtplib
from email.message import EmailMessage
from getpass import getpass
from collections import defaultdict

if __name__ == "__main__":
    name = input("Name: ")
    n = get_user_input(f"Hi, {name}!\nHow many products do you want to add to the shopping list? ", int)
    shopping_list = defaultdict(int)
    for _ in range(n):
        add_item(shopping_list)
    print_list(shopping_list)

    email = input("Email: ")
    password = getpass("Password: ")
    recipient = input("Recipient's email: ")
    email_to(shopping_list, email, password, recipient)
</code></pre>

<hr>

<p>As you can see, almost all functions actually take <code>shopping_list</code> as a first argument. So you could also make this into a class:</p>

<pre><code>class ShoppingList:
    def __init__(self):
        self.items = defaultdict(int)

    def __str__(self):
        return "\n".join(f"{name} x {quantity}" for name, quantity in self.items.items())

    def add_item(self, name, quantity):
        self.items[name] += quantity

    def email_to(self, from_email, password, *recipients):
        ...

if __name__ == "__main__":
    name = input("Name: ")
    n = get_user_input(f"Hi, {name}!\nHow many products do you want to add to the shopping list? ", int)
    shopping_list = ShoppingList()
    for _ in range(n):
        name = get_user_input("Input the product name: ")
        quantity = get_user_input("Input the product quantity: ", int)
        shopping_list.add_item(name, quantity)
    print(shopping_list)

    email = input("Email: ")
    password = getpass("Password: ")
    recipient = input("Recipient's email: ")
    shopping_list.email_to(email, password, recipient)
</code></pre>
    </div>