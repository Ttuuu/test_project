<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Cudos to <a href="https://codereview.stackexchange.com/a/219143/93149">Austin Hastings</a> for spelling out how counting, for each bit, the number of times it is set solves the problem.<br>
I was thinking of bit-bashing code, Python for lack of ECMAScript prowess:</p>

<pre><code>''' bit-wise modular arithmetic: mod 3 '''


def bits_mod_3(a):
    ''' Return the bits in A "mod 3". '''
    one, two = bits_0_mod_3(a)
    return one &amp; ~two, two &amp; ~one


def bits_0_mod_3(a):
    ''' Return the bits in A "mod 3":
     0 for no bit set, 3 for natural multiple of 3. '''
    one, two = 0, 0
    for v in a:
        one, carry = one ^ v, one &amp; v
        two, carry = two ^ carry, two &amp; carry
        one |= carry  # carry from bit 2 means 4: congruent 1 mod 3
        # above the way I think about the approach, "simplified" below
        # carry = one &amp; v
        # one = (one ^ v) | two &amp; carry
        # two ^= carry
        # alternatively, one could code "a mod-3 counter" directly:
        # one = one &amp; ~v | ~(one | two) &amp; v
        # two = two &amp; ~v | carry
    return one, two


def once(a):
    """ Return "bits in A with a count of 1 mod 3". """
    return bits_mod_3(a)[0]


if __name__ == '__main__':
    print(once((13, 12, 12, 3, 3, 3, 12)))
</code></pre>
    </div>