<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ol>
<li><p><code>std::ofstream logFile("log.txt");</code> the name should be configurable. Or at least have current time/date as a part of its name; otherwise you'll overwrite your log file each time you launch your program.</p>
</li>
<li><p>You should have an option to print messages to console.</p>
</li>
<li><p>The pop-from-queue implementation in <code>processEntries</code> is bugged.</p>
<pre><code>while (!exit) {
     std::unique_lock lock(queueMutex);

     condVar.wait(lock, [this]{return !messagesQueue.empty();});
     ....
 }
</code></pre>
</li>
</ol>
<p>Now, when will it leave the wait if exit is called but no more messages are being forwarded? To make a proper wait, make <code>exit</code> part of the condition (you'll also have to lock the mutex whenever you change <code>exit</code>, so just make it a bool instead of atomic).</p>
<ol start="4">
<li><p>You should force-flush the stream once every few seconds. At times people want to see the log during run and they won't be able to if it isn't flushed. Without flushing you may also lose lots of log-information during crashes - like 16KB of text. However, force-flushing every message like you do with <code>std::endl</code> is a poor idea in terms of performance.</p>
</li>
<li><p><code>log(std::string_view entry)</code> there is a general debate as to what is faster, copy a string or move a string - it surely depends on the size of the string... regardless, you should have a version that doesn't use a <code>string_view</code> but a <code>string</code> so you don't make an extra allocation in the queue. It improves health of memory fragmentation.</p>
</li>
<li><p>Normally, I'd expect a logger to print information "when" (time), "what"(log level - info, warning, error), and "who" (source of message) in addition to the message itself. It is important for logging.</p>
</li>
<li><p>You lack message filtration options depending on log-level as well as desired verbose level.</p>
</li>
</ol>
<p>To implement 6 and 7, consider separating logger into two classes - one for writing log to file/console and another that wraps functionality and generates the messages - with former begin the shared state across all units while the latter being copied and modified for each unit so it can store private information of "who" sends the message as well as some configuration regarding importance of the log message.</p>
    </div>