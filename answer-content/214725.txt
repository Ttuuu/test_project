<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>Should I use an extension instead of classical class to encapsulate "formatter", "serializers", etc? </p>
</blockquote>

<p>No, it should not be an extension to the numeric type. </p>

<p>A couple of observations:</p>

<ul>
<li><p>This formatter should really work with a variety of types (<code>Double</code>, <code>Float</code>, <code>Decimal</code>, etc.), so burying it inside a particular numeric type’s definition isn’t right. Theoretically you could consider an extension to a protocol, e.g. <code>Numeric</code>, instead, but attaching it to a particular type is certainly not right.</p></li>
<li><p>Formatters often have properties of their own. E.g. for a currency formatter, you’d probably have a locale for number formatting, currency symbol, preferred decimal places for that currency, etc., so that speaks to having the formatter as a type, itself, not just some computed property for the numeric type that is being displayed. It also affords the idea of having a single instance of a formatter that you use repeatedly for every underlying object that needs to be displayed.</p></li>
<li><p>Note, once you realize that you’re likely to want to configure a formatter once and use it repeatedly, it no longer makes sense to make the value a property of this formatter type. It should be a parameter that we pass to our method for creating a string representation.</p></li>
<li><p>By the way, formatters are not just “represent this object as a string”, but also “parse this string into an object” (and sometimes even “is this a valid substring for this type” which you might use to validate input as the user enters it). Once you consider formatters in this context, the notion of burying this in the underlying numeric types starts to run afoul of the “single responsibility principle”. A formatter is, effectively, an object for translating model objects to and from presentations in the UI.</p></li>
<li><p>For all of the aforementioned reasons, Foundation has a long tradition of separating data types and their formatters. See <a href="https://developer.apple.com/documentation/foundation/formatter" rel="nofollow noreferrer"><code>Formatter</code></a>. And there are a <a href="https://developer.apple.com/documentation/foundation/data_formatting" rel="nofollow noreferrer">litany of existing formatters</a>. You should have a fairly compelling reason before deviating from this well established pattern.</p></li>
<li><p>Needless to say, I wouldn’t advise writing your own currency formatter at all when there are existing formatters that do the job very well. As Apple says:</p>

<blockquote>
  <p>Before you decide to create a custom formatter, make sure that you cannot configure the public subclasses to satisfy your requirements.</p>
</blockquote>

<p>I’d suggest just using <code>NumberFormatter</code> with a <code>numberStyle</code> of one of the currency types (e.g. <code>.currency</code>, <code>.currencyAccounting</code>, etc.).</p>

<p>But I assume this is for illustrative purposes only.</p></li>
<li><p>While your code snippet was a “formatter”, you mention serialization.</p>

<p>That’s a different situation where you are often serializing objects with multiple properties of different types. And the serialization is often being handled by an existing serializer objects (e.g., for encoding, <code>JSONEncoder</code> and <code>PropertyListEncoder</code>, etc.). To support serialization for your custom types, you define your type to conform to the <code>Codable</code> protocol.</p></li>
<li><p>While presentation and parsing of values in the UI is often handled by separate formatter objects, it’s worth noting that there are a few string representations that we might add to our custom types for debugging purposes. For example, we might conform to <a href="https://developer.apple.com/documentation/swift/customstringconvertible" rel="nofollow noreferrer"><code>CustomStringConvertible</code></a> so that we can <code>print</code> our values.  Value types (<code>struct</code>) have a decent default string representation, but especially for reference types (<code>class</code>) it can be nice to customize this. </p>

<p>But don’t be tempted to use <code>description</code> as a backdoor for formatting strings in your UI. As <a href="https://developer.apple.com/documentation/swift/customstringconvertible" rel="nofollow noreferrer">Apple says</a>, </p>

<blockquote>
  <p>Accessing a type’s <code>description</code> property directly or using <code>CustomStringConvertible</code> as a generic constraint is discouraged.</p>
</blockquote>

<p>But for diagnostic purposes, this can be useful. Also see <a href="https://developer.apple.com/documentation/swift/customdebugstringconvertible" rel="nofollow noreferrer"><code>CustomDebugStringConvertible</code></a>.</p></li>
</ul>
    </div>