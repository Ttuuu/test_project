<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here are some suggestions that may help you improve your code.</p>

<h2>Be careful with signed and unsigned</h2>

<p>In a few places, the code compares an <code>int</code> <code>x</code> or 'y' with <code>std::size_t</code> values <code>width</code> and <code>height</code>.  For consistency, it would be better to declare <code>x</code>  and <code>y</code> also as <code>std::size_t</code>.  Even better, see the next suggestion.</p>

<h2>Eliminate unused code</h2>

<p>The <code>createSourceNode</code> function is unused and can be eliminated.  Code that isn't used doesn't need to be written or maintained, which leads to better overall code quality.</p>

<h2>Write portable code</h2>

<p>As noted in the comments:</p>

<blockquote>
  <p>Are you using MSVC? This is their non-standard extension that allows non-lvalues to be passed as lvalue-references.</p>
</blockquote>

<p>This is very easy to fix by changing the constructor.  Instead of this: </p>

<blockquote>
<pre><code>ZeroTileOutsideException(std::string&amp; error_message)
</code></pre>
</blockquote>

<p>use this:</p>

<pre><code>ZeroTileOutsideException(std::string error_message) 
</code></pre>

<p>Now it complies with standards, and should still work just fine in MSVC.  By avoiding non-portable extensions, you make your code easier to port and maintain for years to come.</p>

<h2>Eliminate unused variables</h2>

<p>The variable <code>n</code> in the constructor for <code>SlidingTilePuzzleNode</code> is defined but never used.  Since unused variables are a sign of poor code quality, you should seek to eliminate them.  Your compiler is probably smart enough to warn you about such things if you know how to ask it to do so.</p>

<h2>Use <code>const</code> where practical</h2>

<p>Generally, this code does a good job of using <code>const</code>, but it should also be applied to the <code>ostream&lt;&lt;</code> operator as in:</p>

<pre><code>std::ostream&amp; operator&lt;&lt;(std::ostream&amp; out, const SlidingTilePuzzleNode&amp; node) 
</code></pre>

<p>This will require some changes to the code implementing it, but really should be possible to print the node without altering it.  That also leads directly to the next suggestion.</p>

<h2>Provide <code>const</code> versions of access methods</h2>

<p>In addtion to the two <code>operator[]</code> functions you already have, I'd suggest adding these:</p>

<pre><code>int SlidingTilePuzzleNodeRowSelector::operator[](std::size_t x) const
{
        return m_node-&gt;m_state.at(m_offset_index + x);
}

const SlidingTilePuzzleNodeRowSelector&amp; SlidingTilePuzzleNode::operator[](std::size_t y) const
{
        return m_row_map.at(y);
}
</code></pre>

<p>This allows you to use the same handy notation in a <code>const</code>-correct way.</p>

<h2>Rethink the class interface</h2>

<p>It's generall a bad idea to provide direct access to internal class data structures, and especially bad in a public interface.  The non-<code>const</code> versions of the functions mentioned above should be <code>private</code>, for instance.  Another useful thing to do would be to make <code>SlidingTilePuzzleNodeRowSelector</code> a private class inside <code>SlidingTilePuzzleNode</code>.  See <a href="https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#Rc-private" rel="nofollow noreferrer">C.9</a> for more detail on that principle.</p>

<h2>Don't use an <code>exception</code> for unexceptional events</h2>

<p>Users do all kinds of interesting things when interacting with computers, and in this case, it's not at all exceptional that a user would attempt an invalid move.  For that reason, I would suggest instead that a return value from the various <code>slide</code> methods indicating success or failure would make more sense.</p>

<h2>Check the logic</h2>

<p>I think there's is a problem with the logic of the moves.  If we start with this:</p>

<pre><code> 1  2  3  4
 5  6  7  8
 9 10 11 12
13 14 15  0
-----------
</code></pre>

<p>And then mov "u" (for Up), the reult is this:</p>

<pre><code>u
 5  6  7  4
 1  2  3  8
13 14 15  0
 9 10 11 12
-----------
</code></pre>

<p>That's not typically how <a href="https://en.wikipedia.org/wiki/Sliding_puzzle" rel="nofollow noreferrer">sliding puzzles</a> actually work.  If yours is intended to work this way, a bit more documentation for the user or as comments in the code at least, might be needed.</p>
    </div>