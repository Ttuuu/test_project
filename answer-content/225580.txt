<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>In general, the code looks nice.  It is structured and well-formatted.</p>

<p>It is probably a bad idea to have more than 80 characters in each line, because this may happen:</p>

<p><a href="https://i.stack.imgur.com/jqlRl.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/jqlRl.png" alt="line wrapping"></a></p>

<p>Also, put the body of a control statement on a separate line.  For example, instead of</p>

<pre><code>for(size_t i=0; i &lt; bytes_read; i++) std::cout &lt;&lt; (int)bd[i] &lt;&lt; " ";
</code></pre>

<p>do</p>

<pre><code>for (size_t i=0; i &lt; bytes_read; i++)
  std::cout &lt;&lt; (int)bd[i] &lt;&lt; " ";
</code></pre>

<p>(more on this loop later.)</p>

<h1>General design</h1>

<p>It seems that you are using a translation unit as a "module" and use global <code>static</code> variables for implementation.  Requiring the user to set <code>first_read</code> manually feels wrong.  What you are developing is a class that wraps the functionalities.</p>

<p>Also, your <code>read_reserve</code> function is way too complex.  A rule of thumb is that if a function is longer than about 10 lines, it is doing too much.  In your case, the <code>exact</code> parameter should be a separate function:</p>

<pre><code>class Reader {
public:
    Reader(std::istream&amp; i)
        :is{i}
    {
        init();
    }

    std::streamsize read      (char* dst, std::streamsize length);
    std::streamsize read_exact(char* dst, std::streamsize length);

    // for the test
    void print_reserve(std::ostream&amp; os);

private:
    void init();
    std::streamsize read_count(char* dst, std::streamsize length);

    std::istream&amp; is;

    static constexpr std::size_t reserve_size = 4;
    std::array&lt;char, reserve_size&gt; reserve{};
};

void Reader::init()
{
    read_count(reserve.data(), reserve_size);
}
</code></pre>

<p>This way, the user does not need to bother with <code>first_read</code>.  They simply create a <code>Reader</code> object when they want to read something.  The implementation also doesn't have to check for <code>first_read</code> each time.</p>

<h1>Code</h1>

<p>Now let's go through the code and figure out some possible improvements.</p>

<hr>

<blockquote>
<pre><code>#include &lt;iostream&gt;
#include &lt;array&gt;
#include &lt;vector&gt;
#include &lt;fstream&gt;
#include &lt;cstring&gt;
</code></pre>
</blockquote>

<p>It is considered good practice to sort the <code>#include</code>s in alphabetical order, so that you can easily figure out whether a particular header is included.  Like:</p>

<pre><code>#include &lt;array&gt;
#include &lt;cstring&gt;
#include &lt;fstream&gt;
#include &lt;iostream&gt;
#include &lt;vector&gt;
</code></pre>

<p>In particular, you forgot <code>#include &lt;cstddef&gt;</code> for <code>std::size_t</code>.</p>

<blockquote>
<pre><code>#define RESERVE_SIZE 4
static std::array&lt;char, RESERVE_SIZE&gt; reserve = {0,0,0,0}; // buffer for holding bytes at end of stream
static bool first_read = true; // true if first read and reserve buffer is empty
</code></pre>
</blockquote>

<p>In C++, don't use <code>#define</code> for constants.  Use <code>constexpr</code> instead.</p>

<pre><code>constexpr std::size_t reserve_size = 4;
</code></pre>

<p>The initialization of <code>reserve</code> can be a simple <code>{}</code> instead of <code>= {0,0,0,0}</code>.  In my opinion, that's clearer.</p>

<hr>

<blockquote>
<pre><code>// helper function to print output
void data_printer(std::string msg, char * bd, size_t bytes_read) {
  std::cout &lt;&lt; msg &lt;&lt; bytes_read &lt;&lt; ": ";
  for(size_t i=0; i &lt; bytes_read; i++) std::cout &lt;&lt; (int)bd[i] &lt;&lt; " ";
  std::cout &lt;&lt; std::endl;
}
</code></pre>
</blockquote>

<p>Don't take <code>msg</code> by value.  Take by const reference instead.  Also, I don't see why <code>bd</code> is a non-const pointer.  <code>size_t</code> should be <code>std::size_t</code>.  Prefer <code>++i</code> over <code>i++</code>.  In C++, <a href="https://stackoverflow.com/q/103512">avoid C-style casts</a>.  <a href="https://stackoverflow.com/q/213907">Use <code>'\n'</code> instead of <code>std::endl</code></a> when flushing is not needed.  Something along the lines of:</p>

<pre><code>// helper function to print output
void data_printer(const std::string&amp; msg, const char * bd, std::size_t bytes_read)
{
  std::cout &lt;&lt; msg &lt;&lt; bytes_read &lt;&lt; ": ";
  for (std::size_t i = 0; i &lt; bytes_read; ++i)
    std::cout &lt;&lt; static_cast&lt;int&gt;(bd[i]) &lt;&lt; ' ';
  std::cout &lt;&lt; '\n';
}
</code></pre>

<p>I would put a space after the <code>for</code> keyword, but that is a matter of taste, I guess.</p>

<p>Also, the STL algorithms can be used here: (needs <code>#include &lt;algorithm&gt;</code> and <code>#include &lt;iterator&gt;</code>)</p>

<pre><code>// helper function to print output
void data_printer(const std::string&amp; msg, const char* bd, std::size_t bytes_read)
{
  std::cout &lt;&lt; msg &lt;&lt; bytes_read &lt;&lt; ": ";
  std::copy_n(bd, bytes_read, std::ostream_iterator&lt;int&gt;{std::cout, " "});
  std::cout &lt;&lt; '\n';
}
</code></pre>

<p>In fact, I feel that <code>msg</code> doesn't fit in here well.  And it would be nice if you take a <code>std::ostream&amp;</code> parameter instead of always outputting to <code>std::cout</code>.  Also, this function may deserve an <code>inline</code>.  I may write the function like this:</p>

<pre><code>void print_data(std::ostream&amp; os, const char* data, std::size_t cnt)
{
    std::copy_n(bd, bytes_read, std::ostream_iterator&lt;int&gt;{std::cout, " "});
}
</code></pre>

<p>and let the user handle the message and/or newline.  It would be even nicer if we write an I/O manipulator so that we can use it like</p>

<pre><code>std::cout &lt;&lt; "bytes read: " &lt;&lt; print_data(bd, bytes_read) &lt;&lt; '\n';
</code></pre>

<p>The implementation is left as an exercise to the reader.  (oops)</p>

<hr>

<blockquote>
<pre><code>// helper function to read and return # of bytes read
size_t read_count(std::ifstream &amp; myFile, char * dst, size_t length) {
  myFile.read(dst, length);
  return myFile.gcount();
}
</code></pre>
</blockquote>

<p>Nice little function.  Also a good candidate for <code>inline</code>.  <code>myFile</code> can be any <code>std::istream</code>, not just <code>std::ifstream</code>.  It may be better to use <code>std::streamsize</code> instead of <code>std::size_t</code> here:</p>

<pre><code>// helper function to read and return # of bytes read
std::streamsize read_count(std::istream&amp; myFile, char* dst, std::streamsize length)
{
  myFile.read(dst, length);
  return myFile.gcount();
}
</code></pre>

<p>Also, stream operations can be chained, but I'm not sure whether <code>return myFile.read(dst, length).gcount()</code> is more readable.</p>

<hr>

<p>Initialization code:</p>

<blockquote>
<pre><code>myFile.read(reserve.data(), RESERVE_SIZE);
</code></pre>
</blockquote>

<p>As I wrote above, since you wrote <code>read_count</code>, why not use it?</p>

<hr>

<p>Non-exact reading code, part one:</p>

<blockquote>
<pre><code>if(length &gt;= RESERVE_SIZE) {
  std::memcpy(dst, reserve.data(), RESERVE_SIZE);
  myFile.read(dst + RESERVE_SIZE, length - RESERVE_SIZE);
  myFile.read(reserve.data(), RESERVE_SIZE);
  if(myFile.gcount() != RESERVE_SIZE) throw std::runtime_error("not enough data in file :(");
  return length;
}
</code></pre>
</blockquote>

<p>Here, the logic is actually simpler than it seems to be: emit the cached data, read the remaining characters and emit immediately, and then read and cache specified amount of data.  It would be nice if you place a comment explaining this.  Also, <code>std::copy</code> is easier to work with than <code>std::memcpy</code>, and it increments the pointer for you.  (<code>std::copy</code> automatically calls <code>std::memcpy</code> for trivial types, so there is no performance quality.)  And since you have written <code>read_count</code>, use it.  I am starting to feel that the if statement deserves its own function:</p>

<pre><code>void read_ensure(char* dest, std::streampos size)
{
    if (read_count(dest, size) != size)
        throw std::runtime{"not enough data in file :("};
}
</code></pre>

<p>then you can use it to make the code more readable:</p>

<pre><code>if (length &gt;= reserve_size) {
    dst = std::copy(reserve.begin(), reserve.end(), dst);
    read_count(dst, length - reserve_size);
    read_ensure(reserve.data(), reserve_size);
}
</code></pre>

<p>The return statement is common to both branches, so don't repeat it.</p>

<hr>

<p>Non-exact reading code, part two:</p>

<blockquote>
<pre><code>else { // RESERVE_SIZE &gt; length
  std::memcpy(dst, reserve.data(), length);
  // since some of the reserve buffer was consumed, shift the unconsumed bytes to beginning of array
  // then read from file to fill up reserve buffer
  std::memmove(reserve.data(), reserve.data() + length, RESERVE_SIZE - length);
  myFile.read(reserve.data() +  RESERVE_SIZE - length, length);
  if(myFile.gcount() != length) throw std::runtime_error("not enough data in file :(");
  return length;
}
</code></pre>
</blockquote>

<p>We can use <code>std::copy</code> here since we know the direction: (<code>std::copy</code> is likely to call <code>std::memmove</code> internally)</p>

<pre><code>else {
    std::copy(reserve.begin(), reserve.end(), dst);
    std::copy(reserve.begin() + length, reserve.end(), reserve.begin());
    read_ensure(reserve, length);
}
</code></pre>

<hr>

<p>Exact reading code, part one:</p>

<blockquote>
<pre><code>if(length &gt;= RESERVE_SIZE) {
  // use "dst" as a temporary buffer, since it's already allocated
  // it is not a good idea to allocate a temp buffer of size length, as length can be large
  std::memcpy(dst, reserve.data(), RESERVE_SIZE);
  size_t n_read = read_count(myFile, dst + RESERVE_SIZE, length - RESERVE_SIZE);
  size_t n_bufferable = n_read + RESERVE_SIZE;
  if(n_bufferable &lt; length) {
    std::memcpy(reserve.data(), dst + n_bufferable - RESERVE_SIZE, RESERVE_SIZE);
    return n_bufferable - RESERVE_SIZE;
  } else {
    std::array&lt;char, RESERVE_SIZE&gt; temp_buffer = {0,0,0,0};
    size_t temp_size = read_count(myFile, temp_buffer.data(), RESERVE_SIZE);
    std::memcpy(reserve.data(), dst + n_bufferable - (RESERVE_SIZE - temp_size), RESERVE_SIZE - temp_size);
    std::memcpy(reserve.data() + RESERVE_SIZE - temp_size, temp_buffer.data(), temp_size);
    return n_bufferable - (RESERVE_SIZE - temp_size);
  }
}
</code></pre>
</blockquote>

<p>You are actually leaking the reserved bytes.  You rely on the user to not read them, but are users always careful?  It may be beneficial to <code>std::fill</code> the remaining bytes to zero, but that depends on your case.</p>

<hr>

<p>Exact reading code, part two:</p>

<blockquote>
<pre><code>else { // length &lt; RESERVE_SIZE
  std::vector&lt;char&gt; temp_buffer(length, '\0');
  size_t return_value = read_count(myFile, temp_buffer.data(), length);
  // n_bufferable is at most RESERVE_SIZE*2 - 1 = 7
  std::memcpy(dst, reserve.data(), return_value);
  std::memmove(reserve.data(), reserve.data() + return_value, RESERVE_SIZE - return_value);
  std::memcpy(reserve.data() + (RESERVE_SIZE - return_value), temp_buffer.data(), return_value);
  return return_value;
}
</code></pre>
</blockquote>

<p>Well, using <code>std::vector</code> seems a little bit strange here.  <code>reserve_size</code> is a small number, and since you are using it in other places, so why not use <code>std::array</code>?</p>

<hr>

<blockquote>
<pre><code>// example function usage
int main() {
  std::ofstream outfile("/tmp/temp.bin", std::ios::out | std::ios::binary);
  std::array&lt;char, 30&gt; mydata = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29};
  outfile.write(mydata.data(), 30);
  outfile.close();

  std::cout &lt;&lt; "test1" &lt;&lt; std::endl;
  std::ifstream infile("/tmp/temp.bin", std::ios::in | std::ios::binary);
  std::vector&lt;char&gt; buffer(100, '\0');
  size_t bytes_read;
  char * bd = buffer.data();
  bytes_read = read_reserve(infile, bd, 3, true); data_printer("bytes read: ", bd, bytes_read); data_printer("reserve: ", reserve.data(), RESERVE_SIZE);
  bytes_read = read_reserve(infile, bd, 3, false); data_printer("bytes read: ", bd, bytes_read); data_printer("reserve: ", reserve.data(), RESERVE_SIZE);
  bytes_read = read_reserve(infile, bd, 5, true); data_printer("bytes read: ", bd, bytes_read); data_printer("reserve: ", reserve.data(), RESERVE_SIZE);
  bytes_read = read_reserve(infile, bd, 5, false); data_printer("bytes read: ", bd, bytes_read); data_printer("reserve: ", reserve.data(), RESERVE_SIZE);
  bytes_read = read_reserve(infile, bd, 100, false); data_printer("bytes read: ", bd, bytes_read); data_printer("reserve: ", reserve.data(), RESERVE_SIZE);
  infile.close();

  std::cout &lt;&lt; "test2" &lt;&lt; std::endl;
  first_read = true;
  std::ifstream infile2("/tmp/temp.bin", std::ios::in | std::ios::binary);
  bytes_read = read_reserve(infile2, bd, 28, false); data_printer("bytes read: ", bd, bytes_read); data_printer("reserve: ", reserve.data(), RESERVE_SIZE);
  bytes_read = read_reserve(infile2, bd, 3, false); data_printer("bytes read: ", bd, bytes_read); data_printer("reserve: ", reserve.data(), RESERVE_SIZE);
  infile2.close();
}
</code></pre>
</blockquote>

<p><code>out</code> is implied for <code>std::ofstream</code>, and <code>in</code> is implied for <code>std::ifstream</code>, so omit them.  Initializing <code>mydata</code> like that is no fun; <code>std::iota</code> is better.  Also, it may be better to use scopes instead of manually calling <code>close</code>.  The reading tests are a lot of duplicate code and may deserve a helper function.  Also, the three parts can probably be extracted into their own functions.  This is just a test, so it doesn't really matter too much, though.</p>
    </div>