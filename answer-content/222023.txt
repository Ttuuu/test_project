<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I've played around with your code to try to understand it, frankly. After a long sequence of changes, I ended up with the following:</p>

<pre><code>(defn primes [n]
  (let [mark (fn [i di v]
               (reduce
                 (fn [w i] (assoc w i di))
                 v
                 (range i (count v) di)))
        [answer &amp;_] (reduce
                      (fn [[ps v :as both] i]
                        (if (= (v i) 1)
                          [(conj ps i) (mark (* i i) i v)]
                          both))
                      (let [init-v (-&gt;&gt; (repeat 1) (take n) (vec))]
                        [[] init-v])
                      (range 2 n))]
    answer))
</code></pre>

<ul>
<li>I've got rid of the <code>dec</code>s in all the accesses to the vector <code>v</code>.</li>
<li>I've captured the <code>recur</code>s, in the <code>mark</code> and <code>step</code> functions,
in <code>reduce</code>s.</li>
<li>Since the <code>step</code> function is no longer recursive, I've unwrapped it
into its one call.</li>
</ul>

<p>The new <code>mark</code> function is a little faster. But the <code>step</code> equivalent is going to be slower, since it generates a new pair-vector for every prime. </p>

<p>The main problem here is space - your vector <code>v</code> is the size of your candidate range of numbers. I've come across a cute algorithm that gets round this, though at some cost in speed, spent on laziness. </p>
    </div>