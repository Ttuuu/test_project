<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>The Good</h2>
<p>In the class Expression you put the public interfaces first and then the private variables even though when C++ defaults the section immediately following <code>class CLASSNAME {</code> to private. This is very helpful for programmers that may have to maintain your code and can be considered a best practice.</p>
<p>You use an enum to indicate the token type.</p>
<h2>Avoid <code>using namespace std;</code></h2>
<p>If you are coding professionally you probably should get out of the habit of using the <code>using namespace std;</code> statement. The code will more clearly define where <code>cout</code> and other identifiers are coming from (<code>std::cin</code>, <code>std::cout</code>, std::string). As you start using namespaces in your code it is better to identify where each function comes from because there may be function name collisions from different namespaces. The identifier<code>cout</code> you may override within your own classes, and you may override the operator <code>&lt;&lt;</code> in your own classes as well. This <a href="https://stackoverflow.com/questions/1452721/why-is-using-namespace-std-considered-bad-practice">stack overflow question</a> discusses this in more detail.</p>
<h2>Symbolic Constants</h2>
<p>You have 2 static variables <code>static string valid,whites;</code> in the class <code>Expression</code>, it might be better to create these as <code>const</code> and initialize them in the class rather than initializing them almost as globals.</p>
<pre><code>class Expression{
    ...
private:
    const std::string valid = "+*/-^~0123456789";
    const std::string whites = " \t\v\n";
    ...
};
</code></pre>
<p>There are Magic Numbers in the <code>Expression::Token Expression::getToken()</code> function (5), it might be better to create symbolic constants for them to make the code more readable and easier to maintain. These numbers may be used in many places and being able to change them by editing only one line makes maintainence easier.</p>
<p>Numeric constants in code are sometimes referred to as <a href="https://en.wikipedia.org/wiki/Magic_number_(programming)" rel="nofollow noreferrer">Magic Numbers</a>, because there is no obvious meaning for them. There is a discussion of this on <a href="https://stackoverflow.com/questions/47882/what-is-a-magic-number-and-why-is-it-bad">stackoverflow</a>.</p>
<h2>Horizontal and Vertical Spacing</h2>
<p>It is common to put spaces between operands and operators in expressions. This makes the code more readable and easier to maintain by yourself or others.</p>
<pre><code>                    while (num2-- &gt; 0)
</code></pre>
<p>This includes the <code>comma</code> operator in function definitions and function calls.</p>
<pre><code>Expression::Value solve(Expression::Value a, Expression::Value b, char symbol){
</code></pre>
<p>As @slepic noted, long lines may make the code less readable.</p>
<p>Here is a more readable version of the function <code>solve()</code>:</p>
<pre><code>Expression::Value solve(Expression::Value a, Expression::Value b, char symbol){
    long long num1=a,num2=b;
    switch (symbol){
        case '+':
            return !(abs(num1+num2) &gt; std::numeric_limits&lt;int&gt;::max()) ?
                a + b :
                throw std::runtime_error("Wrong expression [Two big(or low) numbers generated for the type int].");

        case '-':
            return !(abs(num1-num2) &gt; std::numeric_limits&lt;int&gt;::max()) ?
                a - b :
                throw std::runtime_error("Wrong expression [Two big(or low) numbers generated for the type int].");

        case '*':
            return !(abs(num1*num2) &gt; std::numeric_limits&lt;int&gt;::max()) ?
                a * b :
                throw std::runtime_error("Wrong expression [Two big(or low) numbers generated for the type int].");

        case '/':
            return !b ?
                a / b :
                throw std::runtime_error("Wrong expression [dividing with 0].");

        case '^':
            {
                auto b_th_power_of = [num2] (long long x) mutable
                {
                    if (!num2) return static_cast&lt;long long&gt;(1);
                    if (num2 &lt; 0) return static_cast&lt;long long&gt;(0); long long temp=1;
                    while (num2-- &gt; 0)
                    {
                        temp *= x;
                    }
                    return temp;
                };
                num2 = b_th_power_of(num1);
                return !(abs(num2) &gt; std::numeric_limits&lt;int&gt;::max()) ?
                num2 :
                    throw std::runtime_error("Wrong expression [Two big(or low) numbers generated for the type int].");
            }
        default: throw std::runtime_error("Undefined error occured."); //Za svaki slucaj
    }
}
</code></pre>
<p>*Note: It is common to put the opening brace <code>{</code> of a function on the next line so that it lines up with the closing brace <code>}</code>. This makes it easier to read and follow the logic. *</p>
<h2>Testing the Code</h2>
<p>A good practice in testing is to include failures to make sure the failure handling code executes as well as the other code. Has the exception handling been tested?</p>
<h2>Separate Classes From Other Code</h2>
<p>If this was a more complicated problem with multiple classes this would be more noticeable, but classes should be define in other files from main. Amoung other things this allows the classes to be reused. The class <code>Expression</code> should have a header file <code>Expression.h</code> and an implementation file <code>Expression.cpp</code>. Most modern editors will do this for you if you indicate you want to create a new class. This also decreases the amount of code in any single file, and allows classes to be mainted separately from other code. As long as the class header file is not touched, bugs can be fixed in the class implementation file. This also reduces the number of include files any single implementation file needs to include (improves build times).</p>
<h2>Extend Ability</h2>
<p>The function <code>Expression::Value Expression::evaluate()</code> is not as extendable as it could be, the <code>if then else if</code> logic could be replaced by a <code>switch / case</code> statement. This would allow the <code>TokenType</code> enum to be extended if necessary. An alternate implementation would be to use <code>std::map</code> and a function for each `TokenType. The map would be identified by the enum and then execute the function.</p>
<pre><code>Expression::Value Expression::evaluate(){
    Token t=getToken();
    switch (t.type())
    {
        case unaryOp:
        {
            Value a=evaluate();
            if (t.start &amp;&amp; mText.find_first_not_of(whites, processed_size) != std::string::npos)
            {
                throw std::runtime_error("Wrong expression [Too many characters on the right side]");
            }
            return a - (2 * a);
        }
        case binaryOp :
        {
            Value a=evaluate();
            Value b=evaluate();
            if (t.start &amp;&amp; mText.find_first_not_of(whites, processed_size) != std::string::npos)
            {
                throw std::runtime_error("Wrong expression [Too many characters on the right side].");
            }
            return solve(a,b, t.symbol());
        }
        case operand :
            return t.value();
    }
}
</code></pre>
    </div>