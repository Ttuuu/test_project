<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Overall a solid approach.</p>

<p>Here's a few options to consider though:</p>

<p>First of all, you could eliminate the separate <code>curry</code> function and just use the <code>generateCurry</code> function directly, after all, it's already curried itself ;)</p>

<p>An approach that's maybe a bit more in line with Luas metaprogramming philosophy would be to replace your memoized function with a table that generates missing keys on the flies using the <code>__index</code> metamethod, so you'd write code like <code>curry[4](print)</code></p>

<p>Choosing code generation was probably the right choice. For one you say that you care more about the speed of the curried function than the speed of curry; but even then, Lua has one of the quickest parsers among all scripting languages and memoization can get you a long way too.</p>

<p>The one critical thing in your code is that you interpolation strings a lot. Repeated string interpolation and concatenation in Lua are slow because 1) it needs to constantly allocate new space and 2) it needs to hash every intermediate result.</p>

<p>A better solution would be either <code>string.rep(str, n, sep)</code>, which repeats a string <code>n</code> times and puts <code>sep</code> in between each pair of strings; or <code>table.concat(tab, sep)</code> which concatenates all the values of a sequence with <code>sep</code> in between.</p>

<p>Both of these are implemented in C and only hash the end result once all the strings are concatenated together. It also lets Lua allocate space for the entire result string from the start, though I am not sure if it does that for <code>string.concat</code>.</p>

<p>Even this would only be an issue with very large numbers of arguments though, and even then only for the first time, since you cache the generated functions.</p>

<p>Overall I'd say it's a pretty solid implementation.</p>

<hr>

<p>I quickly whipped up an example of how I'd do it, mostly out of boredom, but maybe you can steal the one or other useful idea from it ;)</p>

<pre><code>local function seq(n, ...)
    if n&gt;0 then
        return seq(n-1, n, ...)
    else
        return ...
    end
end

local curry = setmetatable({}, {
    __index = function(self, key)
        if type(key) == 'number' then
            self[key] = assert(load(table.concat{
                "local fn = ...; return "
                .. string.rep("function(arg_%i) return ", key):format(seq(key))
                .. "fn("
                .. string.rep("arg_%i", key, ", "):format(seq(key))
                .. ")"
                .. string.rep(" end", key)
            }))
            return self[key]
        end
    end
})
</code></pre>

<hr>

<p>Further reading on Lua otimizations:</p>

<ul>
<li><a href="http://lua-users.org/wiki/OptimisationTips" rel="nofollow noreferrer">http://lua-users.org/wiki/OptimisationTips</a></li>
<li><a href="https://www.lua.org/gems/sample.pdf" rel="nofollow noreferrer">https://www.lua.org/gems/sample.pdf</a></li>
<li><a href="http://wiki.luajit.org/Numerical-Computing-Performance-Guide" rel="nofollow noreferrer">http://wiki.luajit.org/Numerical-Computing-Performance-Guide</a></li>
<li><a href="http://wiki.luajit.org/NYI" rel="nofollow noreferrer">http://wiki.luajit.org/NYI</a></li>
</ul>
    </div>