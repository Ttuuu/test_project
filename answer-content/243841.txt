<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I think a functional style is a good choice. Provided you have the right sort of algorithmic complexity, I don't think you should worry about performance until it shows itself to be necessary.</p>
<p>That being said, I think there's room for improvement if you're aiming to be functional, or at least doing things in another way that has other benefits. An idea of functional programming is to write small functions which you then compose.</p>
<p>Something I don't like about your reformat function is that it joins the array at the end (and also less directly in the reduce), but the array is the better representation of what you want. Supposing I want to go back to the array, then I have to do a split, and know the right thing to split on, that's a bit sad. It's basically an example of a function doing too many things, its responsible for both parsing the string and using that to transform it, better to have a parser and a transformer, distinct functions.</p>
<p>It is better I feel to have a function which gets the array, and then your reformat function calls that and then does the joins.</p>
<p>Another thing is that I think you can make some things a bit more abstract so that you can reuse them. For instance your reduce is basically concerned with taking an array of arrays, and grouping up the ith term of each subarray. This is something that turns up very often and is called zip.</p>
<p>Of course what all answers provided so far are missing is handling of the the string not being well formed to do this operation, but I guess we are just assuming it is, which is sometimes right.</p>
<pre><code>function zip(arrs) {
    const [firstArr, ...otherArrs] = arrs;
    return firstArr.map((v, i) =&gt; otherArrs.reduce((acc, arr) =&gt; [...acc, arr[i]], [v]));
}

function parseToArray(str, mainSep, subSep) {
    const doubleSplit = str.split(mainSep).map((s) =&gt; s.split(subSep));
    return zip(doubleSplit);
}

function reformat(str, mainSep, subSep) {
    return parseToArray(str, mainSep, subSep)
        .map((s) =&gt; s.join(mainSep))
        .join(subSep || " ");
}

console.log(reformat("HEL-CAS|MAD-STO|XXX-YYY", "|", "-"));
console.log(reformat("1:2:3_one:two:free_ONE:TWO:THREE_I:II:III", "_", ":"));
console.log(reformat("abcdefgh.ABCDEFGH", ".", ""));
</code></pre>
    </div>