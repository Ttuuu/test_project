<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I see a number of things that may help you improve your program.  Since the existing review covered a lot of good points, this review will cover the parts not already mentioned.</p>

<h2>Use the correct form for <code>main</code></h2>

<p>There are exactly two allowed version of <code>main</code>, according to the standard, and yours isn't one of them.  This code has this:</p>

<pre><code>int main(int argc, const char * argv[]) {
</code></pre>

<p>But we need to remove the <code>const</code> here.  See <a href="https://stackoverflow.com/questions/2108192/what-are-the-valid-signatures-for-cs-main-function/">this question</a> for details.</p>

<h2>Use whitespace to make code more readable</h2>

<p>Code lines like this:</p>

<pre><code>if(argc &lt;= 2)return -1;
</code></pre>

<p>are generally more readable if they include a little more whitespace.  I'd write that like this:</p>

<pre><code>if(argc &lt; 2) {
    return -1;
}
</code></pre>

<p>Note that we only need <code>argc</code> to be <em>at least</em> two -- exactly 2 arguments is just fine and <strong>not</strong> an error.</p>

<h2>Don't make pointless copies</h2>

<p>The first few lines of the code are these:</p>

<pre><code>int main(int argc, const char * argv[]) {
    if(argc &lt;= 2)return -1;

    char file_name[100];
    strncpy(file_name, argv[1], 100);
    FILE* fp = fopen(file_name, "read");
    if(!fp)return -1;
</code></pre>

<p>First, 100 is an awfully arbitrary limit that might not be an entire path.  Second, and most importantly, there's no need for the copy at all.  This could all be reduced to this:</p>

<pre><code>int main(int argc, char * argv[]) {
    if(argc &lt; 2) {
        return -1;
    }
    FILE *in = fopen(argv[1], "r");
    if (!in) {
        return errno;
    }
</code></pre>

<p>The read mode is "r" and not "read".  Note that we return <code>errno</code> (which is set by <code>fopen</code>) on error to give a slightly higher chance that the user can figure out what went wrong.</p>

<h2>Don't do more work than needed</h2>

<p>There's no real reason to seek to the end of the file to find out how big it is.  Instead, one could parse the file character at a time and just look for the special <code>EOF</code> (end of file) token while parsing.</p>

<h2>Don't leak memory</h2>

<p>The buffer is allocated with this line</p>

<pre><code>char* buffer = malloc(sizeof(char) * elements_num);
</code></pre>

<p>But there is no corresponding call to <code>free()</code> so this creates a memory leak.  Also <code>sizeof(char)</code> is defined by the standard to be 1, so multiplying it here is pointless.</p>

<h2>Write more concise Python</h2>

<p>One could write this, as the current program does:</p>

<pre><code>list = []
list.append((1,1,1))
list.append((2,2,2))
</code></pre>

<p>Or it could be written instead like this:</p>

<pre><code>list = [(1,1,1), (2,2,2)]
</code></pre>

<p>I'd prefer the latter form, perhaps limiting the output line length to no more than 70 or so characters.</p>

<h2>Don't convert numbers from text only to convert them back</h2>

<p>There's no need to convert the input text to a number only to then re-convert to text on output.  Instead, write each character directly as a character.</p>

<h2>Use a state machine for parsing</h2>

<p>A parser can often be implemented as an explicit state machine.  Such parsers are often easier to reason about and to debug and augment.  For that reason, I'd suggest writing this as a state machine.</p>

<h2>Don't hardcode file names</h2>

<p>Since there's only one output file, why not let the user specify its name instead of hardcoding it?  Even better, don't use file names or handlers at all.  Simply read from <code>stdin</code> and write to <code>stdout</code> and let the user redirect the files as needed.  This gives the user complete control and allows you to simplify the code.</p>

<h2>Eliminate "magic numbers"</h2>

<p>There are a few numbers in the code, such as <code>2</code> and <code>100</code> that have a specific meaning in their particular context.  By using named constants instead, the program becomes easier to read and maintain.  For cases in which the constant is not used to size a static array, use <code>#define</code>; otherwise use <code>const</code>.</p>

<h2>An example</h2>

<p>Here's one alternative using all of these suggestions:</p>

<pre><code>#include &lt;stdio.h&gt;
#include &lt;ctype.h&gt;

int main(void) {
    printf("list = [");
    enum { openparen, num, comma, closeparen, error } state = openparen;
    // expected number of additional numbers beyond the first
    const int expected = 2;
    int numbers = expected;
    for (char ch = getchar(); ch != EOF; ch = getchar()) {
        if (isspace(ch)) {
            continue;
        }
        switch (state) {
            case openparen:
                if (ch == '(') {
                    putchar(ch);
                    state = num;
                } else {
                    state = error;
                }
                break;
            case num:
                if (isdigit(ch)) {
                    putchar(ch);
                    if (numbers == 0) {
                        numbers = expected;
                        state = closeparen;
                    } else {
                        state = comma;
                    }
                } else {
                    state = error;
                }
                break;
            case comma:
                if (isdigit(ch)) {
                    putchar(ch);
                } else if (ch == ',' &amp;&amp; numbers) {
                    putchar(ch);
                    --numbers;
                    state = num;
                } else {
                    state = error;
                }
                break;
            case closeparen:
                if (isdigit(ch)) {
                    putchar(ch);
                } else if (ch == ')') {
                    putchar(ch);
                    putchar(',');
                    state = openparen;
                } else {
                    state = error;
                }
                break;
            default:
                fprintf(stderr, "Error in input data.\n");
                return 1;
                break;
        }
    }
    printf("]\n");
    return 0;
}
</code></pre>
    </div>