<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>To take into account the case where there is some zero values in the array, it's best to avoid divisions.
To make this efficiently, you can do two passes, one computing the product of elements before and one computing the product of elements after.</p>

<p>Pure python:</p>

<pre><code>def products_of_others(a):
     L = len(a)
     r = [1]*L
     after = before = 1
     for i in range(1,L):
         before *= a[i-1]
         r[i] = before
     for i in range(L-2,-1,-1):
         after *= a[i+1]
         r[i] *= after
     return r
</code></pre>

<p>Numpy:</p>

<pre><code>def products_of_others(a):
     after = numpy.concatenate([a[1:], [1]])
     before = numpy.concatenate([[1], a[:-1]])
     a = numpy.cumprod(after[::-1])[::-1]
     b = numpy.cumprod(before)
     return a * b
</code></pre>
    </div>