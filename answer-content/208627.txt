<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2><a href="https://stackoverflow.com/q/1452721/3964927">Avoid <code>using namespace std</code></a></h2>

<p>This can cause name collisions because it adds every name in the <code>std</code> namespace to the global namespace. For a small program like this one it's unlikely that you'll run into any problems (then again, <a href="https://stackoverflow.com/q/31593548/3964927">maybe not</a>) but it's best to get into the habit of using the <code>std::</code> prefix on names in the <code>std</code> namespace.</p>

<p>Alternatively, you can introduce <a href="http://en.cppreference.com/w/cpp/language/namespace#Using-declarations" rel="noreferrer">using declarations</a> like <code>using std::cout;</code> to add specific names to the global namespace.</p>

<h2>Avoid <code>std::endl</code> in favor of <code>\n</code></h2>

<p><a href="https://stackoverflow.com/q/213907/3964927"><code>std::endl</code> flushes the stream, which can cause an unnecessary loss in performance.</a> In <code>printBoard()</code> you use <code>std::endl</code> three times but you can easily replace some of those uses with <code>\n</code>.</p>

<h2>Use a class for the Tic Tac Toe board</h2>

<p>Instead of using a 3x3 array it's better to create a class to hold the state of the Tic Tac Toe board, with functions to set or get the value of a place on the board, determine whether or not the board is filled, etc. This allows you to hide implementation details which may change later on -- for example, if your compiler supports C++11 or will do so in the future you may want to change your internal representation of the board to use <a href="https://en.cppreference.com/w/cpp/container/array" rel="noreferrer"><code>std::array</code></a>. If you have a class for the Tic Tac Toe board the external interface would not change, only the code that implements the functionality.</p>

<p>Here's what that class might look like:</p>

<pre><code>class Board {
    int board[3][3];
public:
    typedef int value_type;

    // More modern alternative to typedef:
    //using value_type = int;

    Board() {
        for (std::size_t i = 0; i &lt; 3; i++) {
            for (std::size_t j = 0; j &lt; 3; j++) {
                board[i][j] = 0;
            }
        }
    }

    // Gets the value of a board place
    int place(std::size_t x, std::size_t y) const {
        // Might want to check coordinates and throw an exception (e.g. std::out_of_range) if coordinate(s) are invalid
        return board[x][y];
    }

    // Sets the value of a board place
    // It would probably be better to throw an exception (e.g. std::out_of_range) instead of printing to std::cout
    bool place(std::size_t x, std::size_t y, int value) {
        if (x &gt; 2 || x &lt; 0) {
            cout &lt;&lt; "Invalid x coordinate. Try again.\n";
            return false;
        } else if (y &gt; 2 || y &lt; 0) {
            cout &lt;&lt; "Invalid y coordinate. Try again.\n";
            return false;
        } else if (board[x][y] != 0) {
            cout &lt;&lt; "Place is already filled. Try again.\n";
            return false;
        } else {
            board[x][y] = value;
            return true;
        }
    }

    bool is_filled() const {
        for (int i = 0; i &lt; 3; i++) {
            for (int j = 0; j &lt; 3; j++) {
                // Return immediately once we find a non-filled place
                if (board[i][j] == 0) return false;
            }
        }

        // All places were found to be filled
        return true;
    }
};
</code></pre>

<p>(Note the use of <code>std::size_t</code> for the coordinate type and the <code>typedef</code> for the <code>int</code> value type, which mimic practices from the standard library.)</p>

<p>You would no longer need <code>initBoard()</code> since the <code>Board</code> constructor performs the initialization, and some of your other functions would become member functions of the class. In some cases you can improve the performance of these functions -- e.g. you can keep a count of how many places are filled by incrementing the count each time a new place is filled by <code>Board::place()</code>, and then <code>Board::is_filled()</code> simply has to check if that count equals 9 rather than checking every place in the board (the performance gain is negligible for such a tiny board but the principle is important).</p>

<h2>Overload <code>operator&lt;&lt;</code> for printing the board</h2>

<p><code>printBoard()</code> only prints to <code>std::cout</code>. You can overload <code>operator&lt;&lt;</code> in order to insert the board into any <code>std::ostream</code>. Using the above <code>Board</code> class the code would look like this:</p>

<pre><code>std::ostream&amp; operator&lt;&lt;(std::ostream&amp; os, Board board) {
    os &lt;&lt; "-----\n";

    for (int i = 0; i &lt; 3; i++) {
        for (int j = 0; j &lt; 3; j++) {
            os &lt;&lt; board.place(i, j) &lt;&lt; " ";
        }

        os &lt;&lt; '\n';
    }

    os &lt;&lt; "-----" &lt;&lt; std::endl;

    return os;
}
</code></pre>

<p>(Note the replacement of some of the <code>std::endl</code> uses with '\n`.)</p>

<p>To print the board to <code>std::cout</code> you'd simply use <code>std::cout &lt;&lt; board;</code>, and you can use the same function to print the board to a different <code>std::ostream</code> such as a <code>std::fstream</code> (for writing to a file).</p>

<h2>Make your code DRYer</h2>

<p>In some cases you can make your code DRYer. For example, the code in the <code>if</code> and <code>else</code> sections is very similar here:</p>

<pre><code>if (playerOnesTurn) {            
    cout &lt;&lt; "Player 1's turn" &lt;&lt; endl;
    do {
        cout &lt;&lt; "Enter x coordinate: "; cin &gt;&gt; x;
        cout &lt;&lt; "Enter y coordinate: "; cin &gt;&gt; y;
    } while (!fillPlace(board, x, y, 1));
 } else {
    cout &lt;&lt; "Player 2's turn" &lt;&lt; endl;
    do {
        cout &lt;&lt; "Enter x coordinate: "; cin &gt;&gt; x;
        cout &lt;&lt; "Enter y coordinate: "; cin &gt;&gt; y;
    } while (!fillPlace(board, x, y, 2));
 }
</code></pre>

<p>You can put that in a function like this:</p>

<pre><code>// Capture Board by reference so we modify the original Board, not a copy
void player_move(Board&amp; board, int player) {
    cout &lt;&lt; "Player " &lt;&lt; player &lt;&lt; "'s turn" &lt;&lt; endl;

    std::size_t x, y;

    do {
        cout &lt;&lt; "Enter x coordinate: "; cin &gt;&gt; x;
        cout &lt;&lt; "Enter y coordinate: "; cin &gt;&gt; y;
    } while (!board.place(x, y, player));
}
</code></pre>

<hr>

<p>Here's a demo program with some of the changes I suggested:</p>

<pre><code>#include &lt;iostream&gt;
#include &lt;ostream&gt;

using namespace std;

class Board {
    int board[3][3];
public:
    typedef int value_type;

    // More modern alternative to typedef:
    //using value_type = int;

    Board() {
        for (std::size_t i = 0; i &lt; 3; i++) {
            for (std::size_t j = 0; j &lt; 3; j++) {
                board[i][j] = 0;
            }
        }
    }

    // Gets the value of a board place
    int place(std::size_t x, std::size_t y) const {
        // Might want to check coordinates and throw an exception (e.g. std::out_of_range) if coordinate(s) are invalid
        return board[x][y];
    }

    // Sets the value of a board place
    // It would probably be better to throw an exception (e.g. std::out_of_range) instead of printing to std::cout
    bool place(std::size_t x, std::size_t y, int value) {
        if (x &gt; 2 || x &lt; 0) {
            cout &lt;&lt; "Invalid x coordinate. Try again.\n";
            return false;
        } else if (y &gt; 2 || y &lt; 0) {
            cout &lt;&lt; "Invalid y coordinate. Try again.\n";
            return false;
        } else if (board[x][y] != 0) {
            cout &lt;&lt; "Place is already filled. Try again.\n";
            return false;
        } else {
            board[x][y] = value;
            return true;
        }
    }

    bool is_filled() const {
        for (int i = 0; i &lt; 3; i++) {
            for (int j = 0; j &lt; 3; j++) {
                // Return immediately once we find a non-filled place
                if (board[i][j] == 0) return false;
            }
        }

        // All places were found to be filled
        return true;
    }
};

bool checkWin(Board&amp; board, int player) {
    // horizontal
    for (int i = 0; i &lt; 3; i++) {
        if (board.place(i, 0) == player &amp;&amp; board.place(i, 1) == player &amp;&amp; board.place(i, 2) == player) return true;
    }

    // vertical
    for (int i = 0; i &lt; 3; i++) {
        if (board.place(0, i) == player &amp;&amp; board.place(1, i) == player &amp;&amp; board.place(2, i) == player) return true;
    }

    // diagonal
    if ((board.place(0, 0) == player &amp;&amp; board.place(1, 1) == player &amp;&amp; board.place(2, 2) == player) ||
        (board.place(0, 2) == player &amp;&amp; board.place(1, 1) == player &amp;&amp; board.place(2, 0) == player))
        return true;

    return false;
}

// TODO implement function if the game is a tie before the last move

std::ostream&amp; operator&lt;&lt;(std::ostream&amp; os, Board board) {
    os &lt;&lt; "-----\n";

    for (int i = 0; i &lt; 3; i++) {
        for (int j = 0; j &lt; 3; j++) {
            os &lt;&lt; board.place(i, j) &lt;&lt; " ";
        }

        os &lt;&lt; '\n';
    }

    os &lt;&lt; "-----" &lt;&lt; std::endl;

    return os;
}

// Capture Board by reference so we modify the original Board, not a copy
void player_move(Board&amp; board, int player) {
    cout &lt;&lt; "Player " &lt;&lt; player &lt;&lt; "'s turn" &lt;&lt; endl;

    std::size_t x, y;

    do {
        cout &lt;&lt; "Enter x coordinate: "; cin &gt;&gt; x;
        cout &lt;&lt; "Enter y coordinate: "; cin &gt;&gt; y;
    } while (!board.place(x, y, player));
}

int main() {
    Board board;
    std::cout &lt;&lt; board;

    // should be a bool, not an int
    // alternatively, just use an int which is 1 when it's player 1's turn and 2 when player 2's turn
    bool playerOnesTurn = true;

    while (true) {
        player_move(board, playerOnesTurn ? 1 : 2);

        playerOnesTurn = !playerOnesTurn;

        if (board.is_filled()) {
            cout &lt;&lt; "The game is a tie.\n";
            break;
        }

        std::cout &lt;&lt; board;

        if (checkWin(board, 1)) {
            cout &lt;&lt; "Player 1 has won\n";
            break;
        } else if (checkWin(board, 2)) {
            cout &lt;&lt; "Player 2 has won\n";
            break;
        }
    }

    return 0;
}
</code></pre>

<p>I left a few other minor tips in the comments and I didn't make all the changes I suggested (e.g. I did not remove <code>using namespace std</code>).</p>
    </div>