<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>What I need is to optimize this code to be as fast as possible.</p>
</blockquote>

<p>That's premature. Start by making the code correct. For example, you do a multiplication of <code>x*x</code> in your primality check, but that can overflow.  </p>

<p>Once you have the code correct, then <strong>run the code through a profiler to find out where the slow parts are</strong> and attack those one at a time.</p>

<p>What you will discover is that you are spending a huge amount of time checking to see if numbers are primes. </p>

<p>Let's think about this a bit.  You want the divisors of a positive 32 bit integer, so it is between 1 and around two billion.  If the number is composite then its largest prime factor will be less than 45000.  <strong>But there are only about 5000 primes less than 45000</strong>.  Calculate them all <em>once</em> and put them in a sorted list. You can then binary search that list very quickly, or build a more optimized lookup.</p>

<p>The algorithm now becomes:</p>

<ul>
<li>If the number is less than 45000, just check to see if it is on the list; that's binary-searchable.</li>
<li>If the number is greater than 45000, check to see if it is divisible by any prime.  That does a maximum of about 5000 checks and you don't waste any time checking non-primes.</li>
</ul>

<p>Now let's think about it harder. </p>

<p>What is your algorithm for finding divisors? </p>

<ul>
<li>Do an expensive test to see if a number is prime; if it is, it only has two divisors.</li>
<li>Otherwise, check every possible divisor up to its square root.</li>
</ul>

<p>This algorithm is incredibly expensive.  We've seen that we can make the first part cheaper. Can we make the second part cheaper?</p>

<p>Yes. A far better algorithm is:</p>

<ul>
<li>Determine the prime factorization of the number</li>
<li>The divisors are all possible products of prime factors</li>
</ul>

<p>The trick here is that <em>for composite numbers, determining prime factors can be sped up</em>.</p>

<p>Let's see how.  Suppose you want the prime factors of 36.</p>

<p>We start by noting that 36 is divisible by 2.  Now comes the trick.  <strong>The prime factors of 36 are 2, followed by the prime factors of 18</strong>.  We just made the problem <em>smaller</em>. </p>

<p>18 is divisible by 2 as well, so the prime factors of 36 are 2, 2, and the prime factors of 9.  Again, we've made the problem smaller.</p>

<p>What are the prime factors of 9?  2 doesn't work, so we bump up to 3.  3 works.  So the prime factors of 36 are 2, 2, 3 and the prime factors of 3.  </p>

<p>What are the prime factors of 3? <strong>We do not start again at 2, because we know that we've already taken out all possible 2s</strong>.  We start at 3, and get down to 1, and we're done. The prime factors of 36 are 2, 2, 3, 3.</p>

<p>That solves the first problem. The second problem is then <strong>generate all possible products</strong>.  The way to do this is to generate all possible combinations of 0, 1 and 2 as follows:</p>

<pre><code>0 0 is 1 * 1 = 1
0 1 is 1 * 3 = 3
0 2 is 1 * 3 * 3 = 9
1 0 is 2 * 1 = 2
1 1 is 2 * 3 = 6
1 2 is 2 * 3 * 3 = 18
</code></pre>

<p>and so on.  Generate all possible combinations of products, put their results in an array, and sort that ascending.</p>

<p>This algorithm is more complicated but it is typically much faster when the numbers get big.</p>
    </div>