<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>To Your Questions</h1>
<blockquote>
<ol>
<li>Is there a benefit to using Classes? Right now I don't see the benefit of having a handle, like, <code>player1 = new Player(arg,arg,etc...)</code>, <code>player2 = new Player(arg,arg, etc...)</code>...</li>
</ol>
</blockquote>
<p>Maybe there are benefits, but I can't think of any serious ones now.</p>
<p>The current version is similar to the <a href="https://en.wikipedia.org/wiki/Factory_method_pattern" rel="nofollow noreferrer">factory pattern</a>, where the creation of an object is abstracted by a factory - in this case <code>addPlayer</code>:</p>
<pre><code>const player = addPlayer('Harry Potter');
</code></pre>
<hr>
<blockquote>
<ol start="2">
<li>Is there a better way to store to Local Storage? I don't think storing each player with their own key and having a ton of entries is a good idea.</li>
</ol>
</blockquote>
<p>I think storing all players under one key is sufficient and the easiest to manage. But you can get the best of both worlds:</p>
<p>Currently you are saving an array of players. Instead you could save a map where the key is a unique attribute of the player (maybe the name or an id) and the player itself. The benefit would be that you do not need to loop through an array to find a player:</p>
<pre><code>function getPlayersFromStorage(key) {
  /* ... read from storage ... */;
  /* return has the form:
     {
        playername: player
     }
  */
}

const players = getPlayersFromStorage(localStorageKey);
const harryPotter = players["Harry Potter"];
</code></pre>
<p>This is only necessary if you need to find players directly.</p>
<hr>
<blockquote>
<ol start="3">
<li>In my function <code>addPlayer()</code> should I be calling <code>savePlayersToStorage</code> in my <code>localStorageUtils.js</code>?</li>
</ol>
</blockquote>
<p>It depends. Currently the method name <code>addPlayer</code> does not represent what the method does. When I first read the name I thought: <em>"Ah ok, this methods put a player in some collection or maybe the local storage"</em>. But then I read the following line and get confused:</p>
<blockquote>
<pre><code>players.push(addPlayer(newPlayer));
</code></pre>
</blockquote>
<p>A better name for <code>addPlayer</code> would be <code>createPlayer</code> and I would not call <code>savePlayersToStorage</code> in it, to have smaller and side effect free functions.</p>
<h1>Change Persistenz</h1>
<blockquote>
<p>I am currently using local storage to store my data. In the future I will use a better persistence strategy</p>
</blockquote>
<p>Currently, only the <code>main.js</code> depends on localStorage, and knows the implementation details, which would make it easier to change it in the future. However, to make it easier to change, especially as the code grows and more files depend on the persistence implementation, it should be abstracted as much as possible:</p>
<pre><code>class LocalStorage {
    getAll() { /* ... */ }
    getByName() { /* ... */ }
    save()  { /* ... */ }
}

class OtherStorage {
    getAll() { /* ... */ }
    getByName() { /* ... */ }
    save()  { /* ... */ }
}
</code></pre>
<p>When your different storage strategies share the same interface they are easy interchange able:</p>
<pre><code>// Main.js

const storage = new LocalStorage('my-storage-key');
# const storage = new OtherStorage(/* dependencies */);

function main() {
    const players = storage.getAllPlayers();
    const harryPotter = storage.getPlayerByName('Harry Potter');

    const newPlayer = createPlayer('Ron Weasley');
    const storage.save(newPlayer);
}
</code></pre>
<h1>Read from Store</h1>
<blockquote>
<pre><code>function getPlayersFromStorage(localStorageKey) {
 if (localStorage.getItem(localStorageKey === null)) {
   localStorage.setItem(localStorageKey);
 }
 let players = JSON.parse(localStorage.getItem(localStorageKey));

 return players;
}
</code></pre>
</blockquote>
<p>When reading from the store we set an item if the key does not exists with <code>localStorage.setItem(localStorageKey)</code>. To set an item is not the responsibility for <em>reading</em> data. Instead we could add some logic which is related for reading. For example if there is stored data under the given key:</p>
<pre><code>function getPlayersFromStorage(localStorageKey) {
    const fromStore = localStorage.getItem(localStorageKey);
   
    if (fromSore) {
        return [];
    }
    
    return JSON.parse(fromStore);
}
</code></pre>
    </div>