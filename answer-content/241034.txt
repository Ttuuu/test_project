<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Treating users like adults</h2>

<p>This is personal opinion, but</p>

<blockquote>
  <p>[!]Enlarge window as much as possible for easier observations</p>
</blockquote>

<p>is the kind of thing that I'm sure users can figure out, and is better left unstated.</p>

<h2>Artificial hangs</h2>

<p>This kind of sleep:</p>

<pre><code>sleep(2)
</code></pre>

<p>after a prompt is not what I consider good user interface design. It's halfway between 'press any key to continue', which can be useful if the user needs to pause and look at stuff; and to simply not sleep and get on with life. In this case I think the latter is more appropriate.</p>

<h2>Internet test</h2>

<p>It doesn't appear that this is actually used for anything. Why is it here? You say</p>

<blockquote>
  <p>I forgot to incorporate the internet test into the main function</p>
</blockquote>

<p>but I'm not convinced that it should be incorporated, or exist at all. The standard thing for a script like this is to assume that the internet is accessible, and if network calls fail, error or retry as appropriate.</p>

<p>Even if you did want to test within the program that the network is available, there is a better thing to do - try a connection to <code>tradingview.com</code>. It's what you actually care about.</p>

<h2>Expression complexity</h2>

<pre><code>    results = pandas.concat([df[df["Symbol"].str.contains(search_str.upper())], df[df["Company"].str.contains(search_str,case=False)]])
</code></pre>

<p>should be broken up onto multiple lines.</p>

<h2>Iterating over a list</h2>

<p>Why is this:</p>

<pre><code>for li in list(df.columns):
</code></pre>

<p>cast to a list? You can probably just iterate over <code>columns</code> directly.</p>

<h2>Shadowing</h2>

<p>In this:</p>

<pre><code>    max = df[li].str.len().max()
</code></pre>

<p>do not name a variable <code>max</code>, since there is already a built-in with the same name.</p>

<h2>Element selection</h2>

<p>It's very doubtful that this:</p>

<pre><code>html = list(soup.children)[3]
body = list(html.children)[3]
div = list(body.children)[5]
</code></pre>

<p>(etc.) is the best way to select these elements. Go back through the webpage and identify, based on the attributes of the elements and the structure of the DOM, the most specific and simple way to identify what you need. For example, the collection of <code>tr</code> for the main table can be accessed via the CSS selector</p>

<pre><code>#js-screener-container tbody &gt; tr
</code></pre>

<p>This, and this alone, should be enough to select all of the <code>tr</code> that you're interested in if you pass it to <code>soup.select</code>.</p>

<p>You'll want to similarly reduce your other selected elements to use more meaningful paths through the DOM.</p>

<h2>String interpolation</h2>

<p>It can simplify your <code>format</code> call here; note the leading <code>f</code>:</p>

<pre><code>f"""
    ISO Code: {response.country.iso_code}
    Country Name: {response.country.name}
    etc
"""
</code></pre>

<h2>Set membership</h2>

<pre><code>if choice in ["1", "2", "3"]
</code></pre>

<p>can be</p>

<pre><code>if choice in {"1", "2", "3"}
</code></pre>

<p>It's technically higher-performance although you certainly won't see a difference. Also it captures your meaning better: "If the choice is in this set of things, where the order doesn't matter".</p>

<h2>IP?</h2>

<p>What is this program actually doing, other than looking up stocks? Why is there an <code>ip_info</code> feature? This seems like it has absolutely nothing to do with stocks and should be a separate script.</p>
    </div>