<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>From an object-oriented point of view there is a better way you can handle this scenario.</p>
<h1>Feature Envy</h1>
<p>Currently the code snipped has a Code Smell that is called <a href="http://wiki.c2.com/?FeatureEnvySmell" rel="noreferrer">Feature Envy</a>:</p>
<blockquote>
<p>The whole point of objects is that they are a technique to package data with the processes used on that data. A classic [code] smell is a method that seems more interested in a class other than the one it is in. The most common focus of the envy is the data.</p>
<p>â€” Martin Fowler, Refactoring: Improving the Design of Existing Code, Chap. 3, p. 80</p>
</blockquote>
<p>The class <code>CredentialsValidator</code> only interacts with data from <code>ValidationCredentialsRequest</code> by accessing it via all the getters:</p>
<blockquote>
<pre class="lang-java prettyprint-override"><code>nonNull(credentials.getUsername())
&amp;&amp; !credentials.getHostname().isEmpty()
/* ... */
</code></pre>
</blockquote>
<p>Instead, this logic could be in <code>ValidationCredentialsRequest</code>, and <code>CredentialsValidator</code> only interacts with the validation methods instead of the getters:</p>
<blockquote>
<pre class="lang-java prettyprint-override"><code>public boolean validateCredentialsRequest(ValidationCredentialsRequest credentialsRequest) {
   switch (credentialsRequest.getCredentialType()) {
       case TYPEA:
           return credentialsRequest.isTypeAValid();
       case TYPEB:
           return credentialsRequest.isTypeBValid();
       case TYPEC:
           return credentialsRequest.isTypeCValid();
   }
   return true;
}
</code></pre>
</blockquote>
<blockquote>
<pre class="lang-java prettyprint-override"><code>class ValidationCredentialsRequest {
   /* ... */

   public boolean isTypeAValid() {/* ... */ }

   public boolean isTypeBValid() {/* ... */ }

   public boolean isTypeCValid() {
       if (newCredential) {
           return nonNull(username)
               &amp;&amp; !username().isEmpty()
               &amp;&amp; nonNull(password)
               &amp;&amp; !password.isEmpty();
       }
       return nonNull(credentialsId);
   }

}
</code></pre>
</blockquote>
<h1>Polymorphism</h1>
<p><a href="https://en.wikipedia.org/wiki/Polymorphism_(computer_science)" rel="noreferrer">Polymorphism</a> is a concept where one thing can be something else at the same time: for example, a <code>Shape</code> can be a <code>Rectangle</code> at the same time.</p>
<p>With <code>Polymorphism</code> we can achieve that we no longer need the switch case. This would have the advantage that we don't have to change the <code>CredentialsValidator</code> class when adding new validation logic:</p>
<pre class="lang-java prettyprint-override"><code>class CredentialsValidator {
    
    public boolean validateCredentialsRequest(ValidationCredentialsRequest credentialsRequest) {
        return credentialsRequest.isValid();
    }
    
}
</code></pre>
<p>From here all different "shapes" of <code>ValidationCredentialsRequest</code> need to share the same interface - all need the <code>isValid</code> method:</p>
<pre class="lang-java prettyprint-override"><code>abstract class ValidationCredentialsRequest {
    /* ... */
    abstract boolen isValid();
}

class TypeARequest extends ValidationCredentialsRequest {
    /* ... */
    public boolean isValid() { /* ... */ }
}

class TypeBRequest extends ValidationCredentialsRequest {
    /* ... */
    public boolean isValid() { /* ... */ }
}

class TypeCRequest extends ValidationCredentialsRequest {
    /* ... */
    public boolean isValid() {
        if (newCredential) {
            return nonNull(username)
                &amp;&amp; !username().isEmpty()
                &amp;&amp; nonNull(password)
                &amp;&amp; !password.isEmpty();
        }
        return nonNull(credentialsId);
    }
}
</code></pre>
<p>Now when a new kind of <code>ValidationCredentialsRequest</code> is needed, we just have to create a new "form" of it, and it works without changing the <code>CredentialsValidator</code>.</p>
<h1>Edit</h1>
<h2>Use in Main</h2>
<p>In the code for the main you provided nothing needs to be changed.</p>
<p>But if you would like to add the <em>Polymorphism</em> to your code, you need to change it where you create the <code>ValidationCredentialsRequest</code> objects. There you would create the different "shapes" of <code>ValidationCredentialsRequest</code> instead of <code>ValidationCredentialsRequest</code> itself.</p>
    </div>