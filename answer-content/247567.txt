<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Some minor comments to get started</p>
<ul>
<li>As <code>str_to_int</code> is intended to be an implementation of <code>int</code> you can name it as such. Either <code>int_</code> or plain <code>int</code> would be fine as names.</li>
<li>The <code>0</code> in <code>num_str[0 - (i + 1)]</code> is not needed.</li>
<li>Appending and prepending to a string in a loop has not entirely obvious quadratic time complexity. It won't matter much for short strings and adding single characters at a time, but be careful in choosing the right data structure.</li>
<li><code>num = num + x</code> is more commonly written as <code>num += x</code></li>
<li>If you don't use the loop variable, you can leave it out by replacing it with an underscore. <code>for _ in range(length):</code></li>
</ul>
<hr>
<p>The code to convert a string to an int is unnecessarily limited. A KeyError is raised on a test like <code>x = str(10**16); str_to_int(x)</code>.</p>
<p>Replacing the dictionary with <code>pow</code> will fix this.</p>
<pre><code>10 ** (k - 1)  # or you can write pow(10, k - 1)
</code></pre>
<p>Which in the code becomes</p>
<pre><code>def str_to_int(num_str):
    # Deleted dec_places
    char_digit = {'0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9}
    num = 0
    length = len(num_str)
    for i in range(length):
        x = char_digit[num_str[-(i + 1)]] * 10 ** i  # simplified from 10 ** ((i + 1) - 1)
        num += x
    return num
</code></pre>
<hr>
<p><code>int_to_str</code> does a bit more work than it needs to. If you remove the line <code>num = num - x</code> you'll find the results are still the same.</p>
<p>There is a slightly better approach you can take. Instead of multiplying up <code>div</code>, you could instead divide down <code>num_int</code>. The advantage of the suggested approach is that you will always be dividing and and modding by 10, rather than increasing powers of 10. This (should) be a bit faster overall, since it is easier to do arithmetic with small numbers.</p>
<p>Modifying your current code to use this method might look like:</p>
<pre><code>def str_(num_int):
    word = ""
    char_digit = {0: '0', 1: '1', 2: '2', 3: '3', 4: '4', 5: '5', 6: '6', 7: '7', 8: '8', 9: '9'}
    length = calculate_length(num_int)
    for i in range(length):
        x = num_int % 10
        num_int //= 10
        word = char_digit[x] + word
    return word
</code></pre>
<p>You can use the same idea to simplify <code>calculate_length</code>. But even better, you don't need to calculate the length anymore, since you can stop when <code>num_int</code> has had all its digits divided out. You will need a special case for <code>0</code> though.</p>
<pre><code>def str_(num_int):
    if num_int == 0:
        return '0'
    word = ""
    char_digit = {0: '0', 1: '1', 2: '2', 3: '3', 4: '4', 5: '5', 6: '6', 7: '7', 8: '8', 9: '9'}
    while num_int:
        x = num_int % 10
        num_int //= 10
        word = char_digit[x] + word
    return word
</code></pre>
<hr>
<p><code>int</code> has had a good bit more time spent on it, and as such has a little more robustness and functionality. You might consider whether you want to handle any of these cases.</p>
<ul>
<li>Negative numbers.</li>
<li>Bases other than base 10.</li>
<li>Whitespace around the number ('  777 \t').</li>
<li>Underscore as a separator ('10_000').</li>
<li>A leading '+' ('+42')</li>
</ul>
    </div>