<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>It might actualy be faster if you:</p>

<p>1) Avoid calling <code>Math.Max</code> if you can decide without evaluating the arguments (at least in some cases anyway).</p>

<p>2) Avoid repeating expressions.</p>

<p>3) Avoid writes when value is not changing.</p>

<pre><code>using System;

class Solution {
    public int solution(int[] A) {
        var lastAddend = 0;
        var accumulator = 0 ; 
        var maxSliceSum = A.Length &gt; 0 ? A[0] : 0 ;
        foreach(var addend in A)
        {
            // (1)+(2) var maxLastPair = Math.Max(addend, lastAddend + addend);
            // addend &gt;= lastAdded + addend  -&gt;  0 &gt;= lastAddend
            var maxLastPair = 0 &gt;= lastAddend ? addend : lastAddend + addend;
            // (2) accumulator = maxLastPair &gt; accumulator + addend ? maxLastPair : accumulator + addend;
            accumulator = Math.Max(maxLastPair, accumulator + addend);
            // (3) maxSliceSum = Math.Max(maxSliceSum, accumulator);
            if (accumulator &gt; maxSliceSum) maxSliceSum = accumulator;
            lastAddend = addend;
        }
        return maxSliceSum;
    }
}
</code></pre>

<p>EDIT:</p>

<p>This can actualy be optimized further:</p>

<p>Here you can see that <code>addend</code> is always component of <code>maxLastPair</code>:</p>

<pre><code>var maxLastPair = 0 &gt;= lastAddend ? addend : lastAddend + addend;
</code></pre>

<p>So let me split it:</p>

<pre><code>var lastAddendIfPositive = lastAddend &gt; 0 ? lastAddend : 0;
var maxLastPair = lastAddendIfPositive + addend;
</code></pre>

<p>Now let me replace the usage on the next line, and get rid of <code>maxLastPair</code> variable:</p>

<pre><code>accumulator = Math.Max(lastAddendIfPositive + addend, accumulator + addend);
</code></pre>

<p>This is actualy the same as:</p>

<pre><code>accumulator = Math.Max(lastAddendIfPositive, accumulator) + addend;
</code></pre>

<p>Now you see you save lastAddend to only use it if it is positive, so change the last loop line:</p>

<pre><code>lastAddendIfPositive  = addend &gt; 0 ? addend : 0;
</code></pre>

<p>And so you get rid of the first statement in the loop.</p>

<p>And we can actualy replace the <code>Math.Max()</code> with a conditional, as the function is so trivial that it is only meaningful as callback, otherwise it is just an unnecesary function call.</p>

<p>Now you can see that <code>lastAddendIfPositive</code> is only used if it is greater than <code>accumulator</code> and so we can get rid of this variable as well.</p>

<p>The final result looks like this:</p>

<pre><code>class Solution {
    public int solution(int[] A) {
        var accumulator = 0 ; 
        var maxSliceSum = A.Length &gt; 0 ? A[0] : 0 ;
        foreach(var addend in A)
        {
            accumulator += addend;
            if (accumulator &gt; maxSliceSum) maxSliceSum = accumulator;
            if (addend &gt; 0) {
              if (addend &gt; accumulator) accumulator = addend;
            } else {
              if (accumulator &lt; 0) accumulator = 0;
            }
        }
        return maxSliceSum;
    }
}
</code></pre>

<p>EDIT2:
Btw im not sure about this line:</p>

<pre><code>var maxSliceSum = A.Length &gt; 0 ? A[0] : 0 ;
</code></pre>

<p>Your specification sais the input array is non empty. So you better throw exception if it is empty. Returning zero seems rather odd, because sum of empty set of values is rather undefined than it is zero.</p>
    </div>