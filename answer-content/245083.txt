<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Make helper functions <code>private</code></h1>
<p>Member functions that are not part of the public API should be marked <code>private</code>.
You should know that by now :)</p>
<h1>Use <code>uint64_t</code> instead of <code>size_t</code></h1>
<p>There is no guarantee that <code>size_t</code> is big enough for the calculations you are doing. While you might only need 32 bits to store the results, you need to do the calculations using 64 bit integers (because you are multiplying two numbers that are each up to 30 bits in size). So to be safe, I would use <code>uint64_t</code>. You could use <code>uint32_t</code> as well, but then you need to explicitly cast to <code>uint64_t</code> before doing the multiplications inside <code>numDecodings()</code>.</p>
<p>Use <code>size_t</code> for sizes and counts, but not for other purposes.</p>
<h1>Make the <code>decode()</code> functions <code>constexpr</code></h1>
<p>I see you made <code>MOD</code> <code>constexpr</code>, which is great, but you can make the <code>decode()</code> functions <code>constepxr</code> as well.</p>
<h1>Naming things</h1>
<p><code>a_num_ast</code> and <code>b_num_ast</code> are weird looking names. I'm guessing by <code>a_num_ast</code> you mean "<strong>a</strong> variable that can hold a <strong>num</strong>ber or an <strong>ast</strong>erisk". But you shouldn't try to encode the type in the variable name. Just use <code>a</code> and <code>b</code> here.</p>
<p>What does <code>decodes_dp</code> mean? I would try to give it a better name. Use nouns for variables. Perhaps <code>number_of_possibilities</code>, or <code>num_decodings</code> (although that almost clashes with the function name).</p>
<h1>Use <code>std::array</code> for fixed-length vectors</h1>
<p>This avoids unnecessary heap allocations. So:</p>
<pre><code>std::array&lt;uint64_t, 3&gt; decodes_dp{1, decode(message[0]), 0};
</code></pre>
<h1>Remove unnecessary modulo operations</h1>
<p>In the following expression:</p>
<pre><code>decodes_dp[index % 3] = (
        decodes_dp[(index - 1) % 3] * decode(message[index - 1]) % MOD +
        decodes_dp[(index - 2) % 3] * decode(message[index - 2], message[index - 1]) % MOD
    ) % MOD;
</code></pre>
<p>Since you already need to use <code>uint64_t</code> for the result of the multiplications to not wrap, you don't need the modulo operations inside the outermost parentheses.</p>
<h1>Consider using <code>switch</code>-statements</h1>
<p>Your <code>decode()</code> functions can be rewritten as follows:</p>
<pre><code>inline uint64_t Solution::decode(const char a) {
    switch(a) {
        case '0':
            return 0;
        case '*':
            return 9;
        default:
            return 1;
    }
}

inline uint64_t Solution::decode(const char a, const char b) {
    switch(a) {
        case '0':
            return 0;
        case '1':
            return b == '*' ? 9 : 1;
        case '2':
            switch(b) {
                case '0'...'6':
                    return 1;
                case '*':
                    return 6;
                default:
                    return 0;
            }
        case '*':
            return decode('1', b) + decode('2', b);
        default:
            return 0;
    }
}
</code></pre>
<p>It's more compact and avoids repeating a lot of <code>if (a_num_ast ...)</code>, making it easier to see the structure of your code.</p>
    </div>