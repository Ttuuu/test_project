<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Don't do this:</p>
<pre><code>*c = realloc(*c, sizeof(**c) * (*capacity));
</code></pre>
<p>Once you have error handling that's more sophisticated than <code>exit(1)</code>, this will become a liability.  You need a temporary:</p>
<pre><code>char *tmp = realloc(*c, new_capacity);
if (!tmp) {
    /* error handling - c is still valid */
    /* ... */
}
*c = tmp;
*capacity = new_capacity;
</code></pre>
<hr>
<p>If you always initialize the data pointer to start as a null pointer, you don't need to use <code>malloc()</code> instead of <code>realloc()</code>.  <code>String_allocate_space</code> would be easier to write if it accepts a pointer to a <code>struct String</code>; that makes it closer to the object-oriented version:</p>
<pre><code>void String_init(struct String* string)
{
    string-&gt;data = NULL;
    string-&gt;size = string-&gt;capacity = 0;
}

void String_allocate_space(struct String* string)
{
    size_t new_capacity = string-&gt;capacity ? 2 * string-&gt;capacity : 16;
    char *tmp = realloc(string-&gt;data, new_capacity);
    if (!tmp) {
        /* error handling - c is still valid */
        exit(1);                /* TODO: improve error reporting */
    }
    string-&gt;data = tmp;
    string-&gt;capacity = new_capacity;
}
</code></pre>
<p>I've also incorporated a change above to start with a larger initial size (16) instead of 1.  That lets us skip the first 4 reallocations for free.</p>
<hr>
<p>The <code>read()</code> method has a flaw that will become apparent when you try to read another value into a string - unlike <code>std::string</code>, reading with <code>&gt;&gt;</code> will <em>append</em> to it, instead of <em>replacing</em> it.  We need to reset <code>size</code> at the beginning:</p>
<pre><code>void String_read(struct String* string)
{
    string-&gt;size = 0;
    int ch;
    while (ch = getc(stdin)) {

        if (!isalpha(ch))
            break;

        add_character(string, ch);
    }
    add_character(string, '\0');
}
</code></pre>
<p>Also, the logic is slightly wrong - we want to finish when we see a space, rather than any non-alpha (which could be digits or punctuation characters).  (Well done for remembering that <code>getch()</code> returns <code>int</code> rather than <code>char</code> - that's one common error avoided).</p>
<pre><code>void String_read(struct String* string)
{
    string-&gt;size = 0;
    int ch;
    while ((ch = getc(stdin)) != EOF &amp;&amp; !isspace(ch)) {
        add_character(string, (char)ch);
    }
    add_character(string, '\0');
}
</code></pre>
<hr>
<p>When we free the string, we don't need a loop.  Instead, we have a single <code>free()</code>.  It's a good idea to reset the <code>size</code> and <code>capacity</code> so that the string object is consistent - it can be used again and/or freed again without harm:</p>
<pre><code>void String_free(struct String* string)
{
    free(string-&gt;data);
    string-&gt;data = NULL;
    string-&gt;size = string-&gt;capacity = 0;
}
</code></pre>
<p>This is an important concept in object-oriented programming - objects have <strong>invariants</strong> that they guarantee are true at the start and end of every (public) operation.  In this case, the invariants are that</p>
<ul>
<li><code>data</code> points to valid storage of at least <code>capacity</code> if <code>capacity &gt; 0</code> and is a null pointer otherwise.</li>
<li><code>size</code> is not greater than <code>capacity</code>.</li>
</ul>
<hr>
<p>We can improve the printing so that it outputs any embedded NUL characters, just like C++ strings do:</p>
<pre><code>void String_print(struct String* string)
{
    if (fwrite(string-&gt;data, 1, string-&gt;size, stdout) != string-&gt;size) {
        exit(1);                /* TODO: improve error reporting */
    }
}
</code></pre>
<p>Note that this will now print the trailing NUL we added.  We no longer need that to mark the end of string, so we can remove that line.</p>
<hr>
<h1>Modified code</h1>
<pre><code>#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;ctype.h&gt;

struct String {
    char* data;
    size_t size;
    size_t capacity;
};

void String_init(struct String* string)
{
    string-&gt;data = NULL;
    string-&gt;size = string-&gt;capacity = 0;
}

void String_allocate_space(struct String* string)
{
    size_t new_capacity = string-&gt;capacity ? 2 * string-&gt;capacity : 1;
    char *tmp = realloc(string-&gt;data, new_capacity);
    if (!tmp) {
        /* error handling - c is still valid */
        exit(1);                /* TODO: improve error reporting */
    }
    string-&gt;data = tmp;
    string-&gt;capacity = new_capacity;
}

void add_character(struct String* string, char ch)
{
    if (string-&gt;size == string-&gt;capacity) {     // if current letter exceeds capacity
        String_allocate_space(string);
    }
    string-&gt;data[string-&gt;size++] = ch;    // append it
}

void String_read(struct String* string)
{
    string-&gt;size = 0;
    int ch;
    while ((ch = getc(stdin)) != EOF &amp;&amp; !isspace(ch)) {
        add_character(string, (char)ch);
    }
}

void String_print(struct String *restrict string, FILE *restrict stream)
{
    if (fwrite(string-&gt;data, 1, string-&gt;size, stream) != string-&gt;size) {
        exit(1);                /* TODO: improve error reporting */
    }
}

void String_free(struct String* string)
{
    free(string-&gt;data);
    string-&gt;data = NULL;
    string-&gt;size = string-&gt;capacity = 0;
}

int main()
{
    struct String string;

    String_init(&amp;string);
    String_read(&amp;string);
    String_print(&amp;string, stdout);
    String_free(&amp;string);
}
</code></pre>
    </div>