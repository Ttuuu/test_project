<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You are too enamored of the <code>Trie</code> class. Ask yourself, "what am I doing?" I believe the answer looks something like this:</p>
<blockquote>
<p>In order to "solve" word-generation board games, I am trying to write code that can:</p>
<ol>
<li><p>Given a 'context' string and two numeric 'limits' indicating the maximum number of before/after cells, plus a list of 'tile' characters possibly including match-any-letter wildcard values, generate the sequence of all possible words that can be built starting with, ending with, or surrounding the context string.</p>
</li>
<li><p>Compute a score for each generated word, using a provided "base" scoring mechanism and possibly a position-based mechanism for additional "word" or "letter" scores. (E.g., "Double Letter Score" or "Triple Word Score")</p>
</li>
</ol>
</blockquote>
<p>Notice that the word "trie" never appears in those requirements. This is because the trie is an implementation detail, rather than a part of the solution. In simple OO terms, your WordList object might "has-a" trie, but it doesn't "is-a" trie.</p>
<p>What you have, I think, is a <code>Lexicon</code> (which is a way of saying "WordList" without using the word 'list'). And you're going to ask that Lexicon one question to start with: what words can you make with this fixed part and these variable parts?</p>
<pre><code># Board like _ _ _ _ _ _ _ A N D _ _ with tiles [a,e,f,m,q,r,t]
lex.generate_words(fixed='and', max_before=7, max_after=2, tiles='aefmqrt')
</code></pre>
<p>(Obviously you would also call with fixed='a', fixed='n', fixed='d' going crossways.)</p>
<p>Once you have a sequence of words coming from the <code>Lexicon</code>, you will want to score the words. You will need to somehow map the words to positions on the board, and then to scoring. For example, if your <code>fixed='an'</code> you might generate "banana" two ways (b[an]ana vs. ban[an]a), and the <code>Lexicon</code> should report that, and your scoring algorithm should account for it so you can try to match the "Double Word Score" in whatever position.</p>
<p>So I think you will need a scoring mechanism that is sensitive to the board location, and also to the rules of the game. (Official Scrabble(tm) has different scoring rules than Words-with-Friends, for example.)</p>
<p>When you get particularly advanced, you might also want to ask the <code>Lexicon</code> for matches involving multiple fixed parts:  _ _ _ A N D _ _ R A M _ _. I'll leave that as an exercise for the coder.</p>
    </div>