<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I think your code generally looks good.</p>

<h3>Comments</h3>

<p>I recommend annotating functions with what the structure of their argument(s) and result are, especially when not just simple arrays, at the top of the function, rather than relying on code comments to reveal this.</p>

<h3>Take benefit of dyadic functions</h3>

<p>If you define <code>Insert</code> and <code>Pop</code> as dyadic functions both code and usage can be simplified. You can even let <code>⍬</code> be the default left argument, allowing easy initialisation of a tree.</p>

<pre><code>Insert←{ ⍝ Insert item ⍵ into leftist tree ⍺, returning the resulting tree
    ⍺←⍬              ⍝ default to init
    1 ⍵ ⍬ ⍬ Merge ⍺ 
}
</code></pre>

<pre><code>h←Insert 2
h Insert←10
h Insert←9

s←Insert 3
s Insert←6
</code></pre>

<h3>Full variable names or not?</h3>

<p>This is a personal style thing. Some people prefer mathematical-looking single-letter variables, others like full variable names that obviate comments. However, at least be consistent. (I've also moved the first element of <code>⍵</code> to become <code>⍺</code>, as per above.)</p>

<pre><code>Pop←{ ⍝ Pop off smallest element from a leftist tree
    0=≢⍺:⍬
    (value left right)←⍵
    (left Merge right) value
}
</code></pre>

<h3>Unnecessary naming</h3>

<p><code>⍺</code> and <code>⍵</code> are well understood to be the left and right arguments. I don't think renaming them <code>t1</code> and <code>t2</code> brings much, other than the ability to create matching <code>keyN</code> variables. However, here you only ever use <code>key2</code> once, and its definition is very simple, and in fact as short or shorter than any appropriate name, so you might as well use it inline, freeing up <code>key</code> to only apply to <code>⍵</code>:</p>

<pre><code>Merge←{ ⍝ Merge leftist trees ⍺ and ⍵
    0=≢⍺:⍵ ⋄ 0=≢⍵:⍺                              ⍝ If either is a leaf, return the other
    (key left right)←1↓⍺
    key&gt;1⌷⍵:⍵∇⍺                                  ⍝ Flip to ensure smallest is root of merged
    merged←right∇⍵                               ⍝ Merge rightwards
    (⊃left)≥⊃merged:(1+⊃merged) key left merged  ⍝ Right is shorter
    (1+⊃left) key merged left                    ⍝ Left is shorter; make it the new right
}
</code></pre>
    </div>