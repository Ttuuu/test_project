<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You should use try-with-resources when you create a <code>Scanner</code>, and should only ever open a <code>Scanner</code> on <code>System.in</code> in your main program.  If you do this, you can pass the required size as an argument to the <code>MagicSquare</code> constructor:</p>

<pre><code>public static void main(String[] args) {
    try(Scanner sc = new Scanner(System.in)) {
        byte size = sc.nextByte();
        MagicSquare m = new MagicSquare(size);
        m.printSquare();
    }
}
</code></pre>

<p>I’ve left construction of the magic square in the constructor (seems appropriate), but moved printing of the square to the main program.  After all, you might not always want to print the magic square.</p>

<hr>

<p>You have numerous inefficiencies in your implementation:</p>

<p>You use <code>square.length</code> and (worse!) <code>square[0].length</code> when you could simply use <code>size</code> if you stored the magic square’s size as a <code>size</code> member.</p>

<p>You are testing <code>x &lt; square.length &amp;&amp; y &lt; square.length</code> before resetting <code>square[x][y] = 0;</code>.  The <code>x</code> and <code>y</code> values should always be valid if you reach this step of the <code>solve()</code> method.  But there is one small possibility of them becoming invalid.  After filling in the last square...:</p>

<pre><code>if (x == square.length &amp;&amp; y == square.length-1 &amp;&amp; isMagic()) {
    return true;
}
</code></pre>

<p>If it turns out <code>isMagic()</code> returns <code>false</code>, the method continues, loops over all values looking for an unused one (there aren’t any), and exits the method, returning <code>false</code>, but only after resetting <code>square[x][y] = 0;</code> which is why the check for invalid coordinates is required.  If instead you used:</p>

<pre><code>if (x == square.length &amp;&amp; y == square.length-1) {
    return isMagic();
}
</code></pre>

<p>... then the method always returns immediately, whether or not the completely filled in square is magic or not.  Now, the <code>if</code> guarding <code>square[x][y] = 0;</code> becomes unnecessary.</p>

<hr>

<p>But the real issue comes from your algorithm as a whole.  You loop over <span class="math-container">\$N^2\$</span> squares, and for each square try each of the <span class="math-container">\$N^2\$</span> values, and for each value check each of the <span class="math-container">\$N^2\$</span> squares to see if the value is already used.  This is an <span class="math-container">\$O(N^6)\$</span> algorithm!</p>

<p>The usage check can be reduced to <span class="math-container">\$O(1)\$</span> by storing a “used” flag for each number:</p>

<pre><code>boolean used[] = new boolean[size*size+1];
</code></pre>

<p>or</p>

<pre><code>BitSet used = new BitSet(size*size + 1);
</code></pre>

<p>Then, simply checking <code>used[value]</code> or <code>used.get(value)</code> will return whether the value has been used or not.  Set the flag for the value when you store it in the <code>square[][]</code>, and clear it when you replace the value.  That one change will reduce your time complexity from <span class="math-container">\$O(N^6)\$</span> to <span class="math-container">\$O(N^4)\$</span>.</p>

<hr>

<p>The next speed up can come from the observation that, if you take a solved NxN magic square, and erased one row and one column, you could trivially recreate the erased values.  If you know <code>N-1</code> values in a row or column, the remaining value must be the desired total less the sum of the filled in values.  <code>1 + 8 + ? = 15</code> ... the missing value is <code>15-(1+8)=6</code>!  Of course, since you are generating candidate values, you need to ensure the computed value is (a) possible, and (b) unused.</p>

<hr>

<p>Adding up numbers takes time.  Why keep adding the values?  You could keep a running total for each row and column:</p>

<pre><code>square[x][y] = value;
row_sum[x] += value;
col_sum[y] += value;
</code></pre>

<p>... of course, you need to subtract the value out when backtracking, or replacing with a different candidate value.</p>

<hr>

<p>Magic Squares are horizontally, vertically, and rotationally symmetric.  In a 4x4 magic square, there are only 3 unique locations the number “1” may appear in.  The remaining 13 locations would all correspond to simple rotations or mirroring of the square.  This would reduce the possible 4x4 squares from <code>16!</code> permutations down to <code>3*15!</code> ... an 81% reduction.  However, you are not finding all permutations; you stop once the first magic square is found, so this reduction in search space likely won’t produce much savings, if any.</p>

<hr>

<p>While an 8x8 magic square seems huge, it is still within the realm of possibility.  The <code>magicNumber</code>, however, would be 260 which is too large for a <code>byte</code>.   Limiting the values themselves to a <code>byte</code> restricts the square to 15x15, and may be reasonable, but the sum should probably be an <code>int</code>. </p>

<hr>

<p>This code ordering seems reversed!</p>

<pre><code>    if (isValidRow(x) &amp;&amp; isValidCol(y)) {
            square[x][y] = i;
</code></pre>

<p><code>square[x][y]</code> should be filled in before the <code>isValid</code> checks are done.  Otherwise, an invalid state will prevent updating the square to a valid value. </p>

<p>“Invalid”, in this case, only happens if the sum becomes too large, and subsequent values will only make matters worse, but if the code is relying on that, it should break out of the candidate values loop once an invalid state is reached, instead of continuing with the next value. </p>
    </div>