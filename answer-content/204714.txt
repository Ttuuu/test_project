<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You need to stop iterating over indexes and <a href="https://nedbatchelder.com/text/iter.html" rel="noreferrer">loop like a native</a>. A first rewrite with that in mind would yield:</p>

<pre><code>def gemstones(collection):
    collection = [''.join(set(rock)) for rock in collection]
    biggest_rock = max(collection, key=len)

    count = 0
    for mineral in biggest_rock:
        for rock in collection:
            if mineral not in rock:
                break
        else:
            count += 1
    return count
</code></pre>

<p>This version make use for the <a href="https://docs.python.org/3/tutorial/controlflow.html#break-and-continue-statements-and-else-clauses-on-loops" rel="noreferrer"><code>for...else</code></a> construct. But the <a href="https://docs.python.org/3/library/functions.html#all" rel="noreferrer"><code>all()</code></a> builtin would be more expressive:</p>

<pre><code>def gemstones(collection):
    collection = [''.join(set(rock)) for rock in collection]
    biggest_rock = max(collection, key=len)

    count = 0
    for mineral in biggest_rock:
        if all(mineral in rock for rock in collection):
            count += 1

    return count
</code></pre>

<p>And counting a condition in a for-loop can be more efficient using <a href="https://docs.python.org/3/library/functions.html#sum" rel="noreferrer"><code>sum()</code></a>:</p>

<pre><code>def gemstones(collection):
    collection = [''.join(set(rock)) for rock in collection]
    biggest_rock = max(collection, key=len)

    return sum(
        all(mineral in rock for rock in collection)
        for mineral in biggest_rock
    )
</code></pre>

<p>Other than that, you won't have more gemstones than the amount of minerals in the <em>smallest</em> rock, so why doing extra work by using the biggest one to start with?</p>

<hr>

<p>But you are going back and forth between strings and sets when the problem clearly calls for set intersection repeated on several elements of an array. Luckily, the <a href="https://docs.python.org/3/library/stdtypes.html#frozenset.intersection" rel="noreferrer"><code>set.intersection</code></a> method accept a variable number of arguments. Just make sure to catch any error thrown in case the original collection is empty:</p>

<pre><code>def gemstone(collection):
    rocks = map(set, collection)
    try:
        minerals = next(rocks)
    except StopIteration:
        return 0  # If the collection is empty, there is no gemstones
    return len(minerals.intersection(*rocks))
</code></pre>
    </div>