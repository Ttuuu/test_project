<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Review</h1>

<p>There are 3 answers already, yet none have addressed the flaws or reviewed your code. </p>

<p>Thus I will give a detailed review and an alternative solution</p>

<p>Your solution has bugs that make a estimation of complexity impossible.</p>

<p>To help review your code I have numbered the lines. See <strong>Snippet (B)</strong> for line numbers</p>

<h2>Flaws AKA bugs</h2>

<p>There are many cases where your code can not run. 3 different errors the last is the worst type of error <strong>uncatchable</strong>.</p>

<ol>
<li><code>solution([-1,-2])</code> will throw an error.</li>
<li><code>solution([1,2e100])</code> will throw an error.</li>
<li><code>solution([1,2**31])</code> will crash the page after a long hangup on all but the top end machines.</li>
</ol>

<p>Your code is not <span class="math-container">\$\mathcal{O}(n^2)\$</span> but rather it is incomplete or if run on a perfect machine <span class="math-container">\$\mathcal{O}(\infty)\$</span> (and same storage) as that is the largest number that the function <code>Math.max</code> can return. </p>

<p>Or if you have a max value less than the array size max then the complexity is <span class="math-container">\$\mathcal{O}(2^{m+1})\$</span> where <span class="math-container">\$m\$</span> is the max value in the array.Thus the complexity for input <code>[1,2**32-1]</code> is a whopping <span class="math-container">\$\mathcal{O}(n^{33})\$</span> and storage of <span class="math-container">\$\mathcal{O}(n^{32})\$</span></p>

<h2>By the lines</h2>

<p>The following numbered items (bold numbers <strong>1</strong>) refer to your source code by line number</p>

<ul>
<li><strong>1</strong> <code>A</code> is a very poor name, <code>arr</code>, <code>array</code>, <code>nums</code>, <code>numbers</code> or many more. Even <code>a</code> would be better as we do not capitalize variable names unless they are instantiatable objects defined as functions or using the class syntax. </li>
<li><strong>2</strong> <code>len</code> should be a constant. eg <code>const len</code> as it  is not to be reassigned at any point in the code.</li>
<li><strong>3</strong>, <strong>16</strong> and <strong>17</strong>. The <code>if</code> statements can be rearranged to reduce complexity.</li>
<li><strong>4</strong> <code>max</code> should be a constant. Its almost 2019 and the spread operator <code>...</code> has been available for 4 years, Use it!!! Line <strong>4</strong> becomes <code>const max = Math.max(...A);</code></li>
<li><strong>5</strong> Use constant <code>const range =</code>. You create an array of indexes from 0 to max. Which is a major problem, (See intro above) The irony is that you can (and do) calculate all the values from 0 to max via the for loop on the next line making line <strong>7</strong>.  <code>A.include(range[i])</code> is identical to <code>A.include(i)</code></li>
<li><strong>6</strong> <code>range.length</code> is the same as <code>max</code> so use the shorter form <code>for (let i = 0; i &lt; max; i ++) {</code></li>
<li><strong>7</strong> Use the shorter form for not true <code>if (! A.includes(range[i])) {</code></li>
<li><strong>8</strong> Use the shorter form is truthy. All numbers  <code>!== 0</code> are truthy <code>true</code> thus this line can be <code>if (range[i]) {</code></li>
<li><strong>9</strong> Could be <code>return i;</code></li>
<li><strong>11</strong> and line <strong>13</strong> the continue is not needed as you are at the bottom of the for loop at those lines already.</li>
<li><strong>16</strong> Use the strict equality operator <code>len === 1</code>. use the shorter not form of  <code>val &lt; value || val &gt; value</code> as <code>val !== value</code>, making the line <code>} else if (len === 1 &amp;&amp; A[0] !== 1) {</code></li>
<li><strong>18</strong> Use the strict equality operators, There is no need for the  () around each clause <code>} else if (len === 1 &amp;&amp; A[0] === 1) {</code></li>
</ul>

<h2>General points.</h2>

<ul>
<li><p>If you <code>return</code> inside a statement block, you should not include the <code>else</code> at the end as It will never be used. Thus lines <strong>16</strong> and <strong>17</strong> do not need the <code>else</code> and can be moved down one line (away from the closing <code>}</code>)</p></li>
<li><p>Though not a must it is cleaner to put spaces after <code>for</code>, <code>if</code>, <code>else</code> etc, before else, between <code>){</code></p></li>
<li><p>When you find you are needing to search a set of values repeatedly it pays to consider using a Map or Set to find the matches as they use a hash to lookup values and have a complexity of <span class="math-container">\$\mathcal{O}(1)\$</span> for the search, however to create the lookups is <span class="math-container">\$\mathcal{O}(n)\$</span>. Thus using a Map or Set you can easily reduce complexity from <span class="math-container">\$\mathcal{O}(n^2)\$</span> to <span class="math-container">\$\mathcal{O}(n)\$</span>. There is a storage penalty meaning you can go from <span class="math-container">\$\mathcal{O}(1)\$</span> to <span class="math-container">\$\mathcal{O}(n)\$</span>. </p></li>
</ul>

<h2>Rewriting you code</h2>

<p>Using a Set to remove the <span class="math-container">\$\mathcal{O}(n)\$</span> overhead of each <code>Array.includes</code></p>

<p>The Set <code>positiveInts</code> can be created as we iterate the array, saving a little complexity.</p>

<p>I assume array items are less than or equal to <code>Number.MAX_SAFE_INTEGER</code> </p>

<h3>Snippet (A)</h3>

<pre><code>function solution(array) {
    var min = 1;
    if (array.length === 1) {
        min = array[0] === 1 ? 2 : min;
    } else if (array.length) {
        const positiveInts = new Set();
        for (const val of array) {
            if (val &gt; 0) {
                positiveInts.add(val);
                if (val === min) {                        
                    while (positiveInts.has(min)) { min ++ }
                }
            }
        }
    }
    return min;
}
</code></pre>

<h2>Snippet (B)</h2>

<pre><code>/*lines*/
/* 1*/function solution(A) {
/* 2*/    var len = A.length;
/* 3*/    if(len &gt; 1){
/* 4*/        let max = Math.max.apply(null, A);
/* 5*/        let range = Array.from(Array(max).keys());
/* 6*/        for(let i = 0; i &lt; range.length; i++){
/* 7*/            if(A.includes(range[i]) === false){
/* 8*/                if(range[i] &gt; 0){
/* 9*/                    return range[i];
/*10*/                }
/*11*/                continue;
/*12*/            }
/*13*/            continue;
/*14*/        }
/*15*/        return max + 1;
/*16*/    }else if(len == 1 &amp;&amp; (A[0] &lt; 1 || A[0] &gt; 1)){
/*17*/        return 1;
/*18*/    }else if((len == 1) &amp;&amp; (A[0] == 1)){
/*19*/        return 2;
/*20*/    }
/*21*/    return 1;
/*22*/}
</code></pre>
    </div>