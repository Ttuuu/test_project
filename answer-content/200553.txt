<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your <code>dice_outcomes</code> function is not generic enough. It works for you with your use case but consider the following call:</p>

<pre><code>list(dice_outcomes(3))
</code></pre>

<p>the result is surprising:</p>

<pre><code
</code></pre>

<p>This is because your <code>yield output</code> always return the same list; these are 216 references to the <em>same</em> list (bonus points if you are able to understand why this is always <code>[min] * num</code>). Using the rolls in a <code>for</code> loop as you do work because you transform the list each time and don't store a reference, but some use-case make your function buggy.</p>

<p>But all in all, this is not necessary to come with a fix (such as <code>yield tuple(output)</code>) because you are just reinventing <a href="https://docs.python.org/3/library/itertools.html#itertools.product" rel="nofollow noreferrer"><code>itertools.product</code></a>. You could instead write:</p>

<pre><code>def dice_outcomes(num, min=1, max=6):
    yield from itertools.product(range(min, max+1), repeat=num)
</code></pre>

<hr>

<p>Now about your class and <code>for</code> loops… the way you add dice rolls to already existing rolls feels really off. Especially given how you wrote a function to generate rolls from several die in the first place.</p>

<p>Besides, you can feed a generator to a <code>Counter</code> and it will happily count the occurences of each values:</p>

<pre><code>self.outcomes = Counter(map(roll_handler, dice_outcomes(num, MIN, MAX)))
</code></pre>

<p>This means that:</p>

<ol>
<li>You don't need the <code>add</code> method;</li>
<li>You would need to add <code>num</code> and possibly <code>min</code> and <code>max</code> as parameters;</li>
<li>You can compute the <code>sample_space</code> in <code>__init__</code>.</li>
</ol>

<p>Given how simple <code>dice_outcomes</code> is now and how tied the class and <code>sample_space_report</code> are, you could combine everything in this class:</p>

<pre><code>from fractions import Fraction
from collections import Counter
from itertools import product


class AbilityScoreStats:
    def __init__(self, roll_handler, num_die, min_roll=1, max_roll=6):
        max_roll += 1  # Account for excluded upper bound and off-by-one substraction
        self.sample_space = (max_roll - min_roll) ** num_die
        self.outcomes = Counter(
            roll_handler(roll)
            for roll in product(range(min_roll, max_roll), repeat=num_die)
        )

    def print_report(self, title):
        print(f'    {title}:')

        prob_sum = 0
        for outcome, occurrences in self.outcomes.items():
            probability = Fraction(occurrences, sample_space)
            prob_sum += probability
            print(f'{outcome}: {probability} ({float(probability):.2%})')
        print(f'Validation sum = {prob_sum}')
</code></pre>

<p>Usage being:</p>

<pre><code>standard = AbilityScoreStats(lambda roll: sum(roll) - min(roll), 4)
classic = AbilityScoreStats(sum, 3)
heroic = ability_score_stats(lambda roll: sum(roll) + 6, 2)

standard.print_report('Standard')
classic.print_report('Classic')
heroic.print_report('Heroic')
</code></pre>

<hr>

<p>Now, there is still two issues:</p>

<ul>
<li>The <code>prob_sum</code> variable validating the computed values shouldn't be left once you have tested your function;</li>
<li>A class not used as storage having only 2 functions, one of them is <code>__init__</code> should be replaced by a function:</li>
</ul>



<pre><code>from fractions import Fraction
from collections import Counter
from itertools import product


def ability_score_stats(title, roll_handler, num_die, min_roll=1, max_roll=6):
    max_roll += 1  # Account for excluded upper bound and off-by-one substraction
    sample_space = (max_roll - min_roll) ** num_die
    outcomes = Counter(
        roll_handler(roll)
        for roll in product(range(min_roll, max_roll), repeat=num_die)
    )

    assert sample_space == sum(outcomes.values())

    print(f'    {title}:')
    for outcome, occurrences in outcomes.items():
        probability = Fraction(occurrences, sample_space)
        print(f'{outcome}: {probability} ({float(probability):.2%})')


if __name__ == '__main__':
    ability_score_stats('Standard', lambda roll: sum(roll) - min(roll), 4)
    ability_score_stats('Classic', sum, 3)
    ability_score_stats('Heroic', lambda roll: sum(roll) + 6, 2)
</code></pre>

<p>I somehow left the validation so you can still check that the computations are the same. But you can disable the check by running <code>python -O your_script.py</code>.</p>
    </div>