<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This looks like a handy tool to have around, maybe we can make it even better.</p>

<h1>Style</h1>

<p>As per the official Python Style Guide (often known by his nickname PEP8), keyword-arguments of functions should have no whitespace around the <code>=</code>.</p>

<h1>Matrix size</h1>

<p>numpy arrays have a property called <a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.ndarray.shape.html" rel="nofollow noreferrer"><code>.shape</code></a> which describes their number of rows and number of cols (in case of a 2D array at least). So</p>

<pre><code>self.rows = len(self.matrix)
self.cols = len(self.matrix[0])
</code></pre>

<p>could become</p>

<pre><code>self.rows, self.cols = self.matrix.shape
</code></pre>

<p>Since your code only works for 2D matrices, it's maybe also a good idea to check for that. The <a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.ndarray.ndim.html" rel="nofollow noreferrer"><code>.ndim</code></a> attribute can be of help here.</p>

<h1>Type checking</h1>

<p><code>type(matrix[0]) in (str,int,float)</code> should instead be <code>isinstance(matrix[0], (str, int, float))</code>.</p>

<h1>Checking <code>None</code></h1>

<p>The <a href="https://www.python.org/dev/peps/pep-0008/#programming-recommendations" rel="nofollow noreferrer">official recommendation</a> is to always use <code>if sth is None:</code> when checking for <code>None</code>.</p>

<h1>String joining</h1>

<blockquote>
<pre><code>row = [str(x) for x in row]
body += ' &amp; '.join(row) + '\\\\' + '\n'
</code></pre>
</blockquote>

<p>could be done in a single line:</p>

<pre><code>body += ' &amp; '.join(str(x) for x in row) + '\\\\' + '\n'
</code></pre>

<p>This means you also don't have to reassign <code>row</code> to be something different than it was before.</p>

<h1>String formatting</h1>

<p>Since you said you're using Python 3.6, maybe have a look at <a href="https://realpython.com/python-f-strings/" rel="nofollow noreferrer">f-strings</a> for even more concise string formatting syntax. No matter if you choose to do this, maybe at least get rid of the old-style <code>%</code> formatting in <code>augmented(...)</code> by escaping <code>{</code> and <code>}</code> using a leading <code>\</code>.</p>

<h1>Function output</h1>

<p>I find it preferable if you'd let the user decide what he wants to do with what your function returns. So instead of printing and copying the formatted matrix code, maybe just return <code>body</code> and let the caller decide how to proceed from here. You could even define a "convenience" function (<code>to_clipboard</code>) that basically only does <code>pyperclip.copy(...)</code>, although this is likely not necessary. Another idea would be to make at least the <code>copy</code> part opt-in via a "flag" bool parameter.</p>

<h1>Class</h1>

<p>Maybe a class is not the right tool here. A possible alternative would be to move what's done in <code>__init__</code> into a "private" (read name starts with <code>_</code>) helper function and get rid of the class.</p>

<hr>

<h1>Missing backslash</h1>

<p>There seems to be a little bug in both of your functions (see how bad code duplication is ;-)): <code>body +='\end ...</code> is likely missing an additional <code>\</code>.</p>

<h1>Unused argument</h1>

<p>If I'm not mistaken, the <code>choosen_brackets</code> argument of <code>augmented</code> is not used in the function.</p>

<h1>Typo</h1>

<p><code>choosen_brackets</code> should likely be <code>chosen_brackets</code></p>
    </div>