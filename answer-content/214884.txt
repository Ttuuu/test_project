<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Optimisations</h1>

<p>Based on your snippet, I assume you are writing in ES5 and not ES6. So I'm gonna use ES5 syntax below.</p>

<p>See code below, explanations are in comments. My focus in more in the <a href="https://en.wikipedia.org/wiki/Don%27t_repeat_yourself" rel="nofollow noreferrer">DRY</a> and <a href="https://en.wikipedia.org/wiki/Separation_of_concerns" rel="nofollow noreferrer">SoC</a> principles:</p>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>/*
1. Use objects to store elements so that:
    - they can be easily accessed and looped
    - we can easily add more subjects to calculate without writing more codes
    - we don't have to keep revisiting the DOM on every calculation
2. Use `.querySelectorAll` for:
    - shorter code
    - easily understood because of CSS syntax and better readability
*/
var inputs = {
  physics: document.querySelectorAll('#physics input'),
  history: document.querySelectorAll('#history input')
};

var outputs = {
  physics: document.querySelector('#physicsAverage'),
  history: document.querySelector('#historyAverage')
};

var calculator = document.querySelector('#calculator');


/*
1. Wrap all calculations into one function.
2. Here, it's called `calculate`.
*/
calculator.addEventListener('click', calculate);


/*
1. Split operations into separate functions so that:
    - the code is DRY.
    - it follows the Separation of Concern (SoC) principle.
*/

function calculate(){
  var subject;

  // Loop over the `inputs` object for its keys
  for (subject in inputs){
    // Wrap the actual calculations into one function (SoC).
    // So that you don't have to write repeating code (DRY).
    calculateScoreOf(subject);
  }
}

function calculateScoreOf(subject){
  var tests = inputs[subject];
  var output = outputs[subject];
  
  // No need for `count` variable in your original code.
  // The `.length` property already has the value
  var testCount = tests.length;
  
  // Use `Array.prototype.map` instead of for-loop to get all values
  // For better readability and SoC.
  var scores = Array.prototype.map.call(tests, getInputValue);
  
  // Use NaN checking for incomplete assessment indication instead of count checking (DRY)
  var hasNaN = scores.some(isNaN);
  
  var scoreTotal,
      scoreAverage;

  if (hasNaN)
    output.value = 'Incomplete assessment!';
  else {
    // Use `.reduce` to sum scores instead of hard-coding the addition (DRY and SoC)
    scoreTotal = scores.reduce(sumScores, 0);
    scoreAverage = scoreTotal/testCount;

    // Use `.toFixed` to set decimal place.
    output.value = scoreAverage.toFixed(2);
  }
}

function getInputValue(input){
  // Returns NaN if invalid input
  return parseFloat(input.value);
}

function sumScores(a, b){
  return a + b;
}</code></pre>
<pre class="snippet-code-html lang-html prettyprint-override"><code>&lt;form&gt;
  &lt;p id="physics"&gt;
    Physics:
    &lt;input type="number"&gt;
    &lt;input type="number"&gt;
    &lt;input type="number"&gt;
    &lt;output id="physicsAverage"&gt;&lt;/output&gt;
  &lt;/p&gt;
  &lt;p id="history"&gt;
    History:
    &lt;input type="number"&gt;
    &lt;input type="number"&gt;
    &lt;input type="number"&gt;
    &lt;output id="historyAverage"&gt;&lt;/output&gt;
  &lt;/p&gt;
  &lt;button type="button" id="calculator"&gt;Calculate&lt;/button&gt;
&lt;/form&gt;</code></pre>
</div>
</div>


<h1>Links</h1>

<ol>
<li><a href="https://en.wikipedia.org/wiki/Don%27t_repeat_yourself" rel="nofollow noreferrer">Don't Repeat Yourself (DRY)</a></li>
<li><a href="https://en.wikipedia.org/wiki/Separation_of_concerns" rel="nofollow noreferrer">Separation of Concerns (SoC)</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...in" rel="nofollow noreferrer"><code>for...in</code> loop</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelectorAll" rel="nofollow noreferrer"><code>.querySelectorAll</code></a> and <a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelector" rel="nofollow noreferrer"><code>.querySelector</code></a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map" rel="nofollow noreferrer"><code>Array.prototype.map</code></a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some" rel="nofollow noreferrer"><code>Array.prototype.some</code></a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce" rel="nofollow noreferrer"><code>Array.prototype.reduce</code></a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/isNaN" rel="nofollow noreferrer"><code>isNaN</code></a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toFixed" rel="nofollow noreferrer"><code>.toFixed</code></a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/parseFloat" rel="nofollow noreferrer"><code>parseFloat</code></a></li>
</ol>

<h1>Extra: Code in ES6</h1>

<p></p><div class="snippet" data-lang="js" data-hide="true" data-console="true" data-babel="false">
<div class="snippet-code snippet-currently-hidden">
<pre class="snippet-code-js lang-js prettyprint-override"><code>const inputs = {
  physics: [...document.querySelectorAll('#physics input')],
  history: [...document.querySelectorAll('#history input')]
};

const outputs = {
  physics: document.querySelector('#physicsAverage'),
  history: document.querySelector('#historyAverage')
};

const calculator = document.querySelector('#calculator');

calculator.addEventListener('click', calculate);

function calculate(){
  for (const subject in inputs)
    calculateScoreOf(subject);
}

function calculateScoreOf(subject){
  const tests = inputs[subject];
  const output = outputs[subject];
  const testCount = tests.length;
  
  const scores = tests.map(el =&gt; parseFloat(el.value));
  const hasNaN = scores.some(isNaN);

  if (hasNaN)
    output.value = 'Incomplete assessment!';
  else {
    const scoreTotal = scores.reduce((a, b) =&gt; a + b, 0);
    const scoreAverage = scoreTotal/testCount;
    output.value = scoreAverage.toFixed(2);
  }
}</code></pre>
<pre class="snippet-code-html lang-html prettyprint-override"><code>&lt;form&gt;
  &lt;p id="physics"&gt;
    Physics:
    &lt;input type="number"&gt;
    &lt;input type="number"&gt;
    &lt;input type="number"&gt;
    &lt;output id="physicsAverage"&gt;&lt;/output&gt;
  &lt;/p&gt;
  &lt;p id="history"&gt;
    History:
    &lt;input type="number"&gt;
    &lt;input type="number"&gt;
    &lt;input type="number"&gt;
    &lt;output id="historyAverage"&gt;&lt;/output&gt;
  &lt;/p&gt;
  &lt;button type="button" id="calculator"&gt;Calculate&lt;/button&gt;
&lt;/form&gt;</code></pre>
</div>
</div>

    </div>