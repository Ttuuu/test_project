<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>From the high level I don't see anything wrong in your constructor. But I have some improvement to propose:</p>

<p><strong>Use interface</strong></p>

<p>Your <code>NewsSpider</code> is an abstract class with one empty method. If you want to force the implementation of the <code>crawl</code> method make it abstract. And if your class has no implementations, make it an interface. </p>

<pre><code>interface NewsSpider {
    void crawl();
}
</code></pre>

<p>But interfaces with single methods are also <em>function interfaces</em>. In this case You can replace your <code>NewsSpider</code> with <code>Runner</code> because it also provide one method that returns nothing. But I guess you would at least returns a set of news. So your news spider can be seen has a <code>Supplier&lt;News&gt;</code>.</p>

<p><strong>Inversion of control</strong></p>

<p>Instead of creating the <code>NYTImeSpider</code> and <code>BBCSpider</code> inside the <code>SpiderFacade</code> pass a list or varargs of <code>NewsSpider</code> :</p>

<pre><code>public SpiderFacade(NewsSpider... spiders) {
    this.spiderList = Arrays.asList(spiders);
}
</code></pre>

<p>By doing so you improve the evolvability of your code because you can easily provide another spider. You also improve the testability because you can pass mocks to your facade to test his behavior. </p>

<p><strong>Composite</strong></p>

<p>I have the feeling that what you are building is more a <em>composite</em> than a <em>facade</em>. With the composite your program will be much more modular because you can use a single crawler or many with the same interfaces.</p>

<pre><code>CompositeSpider implements Supplier&lt;Set&lt;News&gt;&gt; {
   // ...
   CompositeSpider(Supplier&lt;Set&lt;News&gt;&gt;... components) {
       this.components = Arrays.asList(components);
   }

   public Set&lt;News&gt; get() {
        // get and aggregate news from all components
   }      
} 
</code></pre>

<p>By doing that you increase the modularity. You can later create another implementation that remove duplicates and compose all of them.</p>

<pre><code>Set&lt;News&gt; uniqueNews = new DuplicatesPruner(
    new CompositeSpider(
        new NYTimeSpider(),
        new BBCSpider()
    )
).get();
</code></pre>

<p>And because all the crawlers share the same interfaces you can easily switch them and pass them to another service:</p>

<pre><code>class NotificationService {
    void sendNews(Function&lt;Set&lt;News&gt;&gt; crawler)
}

class AsyncNewsService {
    CompletableFuture&lt;Set&lt;News&gt;&gt;&gt; fetch(Function&lt;Set&lt;News&gt;&gt; crawler)
}
</code></pre>
    </div>