<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>.. I'm pretty set on breaking the checks into 5 different functions because I'm specifically practicing making functions short and single-purposed ...</p>
</blockquote>

<p>I can not agree that you can avoid sanity during study. If you do not need 5 functions - you should not use them. If you want to practice in making functions - find corresponding usage for it that will make sense.</p>

<blockquote>
  <p>.. But I'm not at all set on my 5 if statements in the <code>find_winner_or_tie</code> method. Does somebody know a more elegant solution for the <code>find_winner_or_tie</code> method so it doesn't have 5 if statements in it? ..</p>
</blockquote>

<p>You have over complicated everything.</p>

<pre class="lang-py prettyprint-override"><code>self.letter_dict
</code></pre>

<p>looks like it have to be used for presentation (in the view if we talk about MVC). You have no need to use it at all and can get rid of it simply.</p>

<pre class="lang-py prettyprint-override"><code>self.row_index_of_move
self.column_index_of_move
</code></pre>

<p>again, it can help during presentation. During computation you have all data in the arguments so you can pass it deeper and didn't store useless data.</p>

<pre class="lang-py prettyprint-override"><code>self.game_outcome
</code></pre>

<p>yet another class property you are using just to transfer data, in this case back to caller. Use <code>return</code> statement instead and return tuple of 2 objects if you needed.</p>

<blockquote>
  <p>.. Does somebody know a more elegant solution for the <code>find_winner_or_tie</code> method ..</p>
</blockquote>

<p>You can try to think in terms of patterns and ask yourself "what presentation of the pattern will cover all cases at once?". I suggest that list of coordinates can describe any win case. It's creation will have same loops as you already have but they will be used for <code>patterns</code> generation.</p>

<pre class="lang-py prettyprint-override"><code>patterns = []
for i in range(3):
    patterns.append( tuple(itertools.product(range(3), [i])) )
    patterns.append( tuple(itertools.product([i], range(3))) )
patterns.append( zip(range(3), range(3)) )
patterns.append( zip(range(3), range(2, -1, -1)) )
</code></pre>

<p>You can generate patterns during initialization and this is the only think I'd like to see as the field of <code>GameOutcome</code> class. Main purpose - caching, so readonly property will be awesome.</p>

<p>Function <code>check_...</code> will simply check every pattern, if all symbols are the same - victorious and return symbol from any pattern coordinates.</p>

<pre class="lang-py prettyprint-override"><code>for pattern in patterns:
    a, b, c = [self.state_of_game.board[row][col] for row, col in pattern]
    if a == b == c != ' ':
        return (True, a)
return (False, None)
</code></pre>
    </div>