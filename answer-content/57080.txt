<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You have several different options for this:</p>

<h3>Guava</h3>

<p>Google's Guava Library introduces the idea of a <a href="http://code.google.com/p/guava-libraries/wiki/NewCollectionTypesExplained">Multiset</a> which is capable of counting the occurrences, and also provides a couple of other features.</p>

<h3>Java 8</h3>

<p>If you are using Java 8 (which I highly recommend if you have the ability to do so), your <code>tokenFound</code> method can simply be this:</p>

<pre><code>occurrences.merge(token, 1, (oldValue, one) -&gt; oldValue + one);
</code></pre>

<p>Or this:</p>

<pre><code>occurrences.compute(token, (tokenKey, oldValue) -&gt; oldValue == null ? 1 : oldValue + 1);
</code></pre>

<p>Note that as of Java 7, you can initialize the map with the "diamond operator":</p>

<pre><code>Map&lt;Token, Integer&gt; occurrences = new HashMap&lt;&gt;();
</code></pre>

<h3>Without Java 8, no libraries</h3>

<p>If you are unable to use Java 8 and don't want to add Guava as a third party library to your project, there are a small part you can do to simplify your existing code:</p>

<pre><code>Integer previousValue = occurrences.get(token);
occurrences.put(token, previousValue == null ? 1 : previousValue + 1);
</code></pre>

<p>More specifically:</p>

<ul>
<li>Using the <code>new Integer</code> constructor is not necessary, Java automatically uses <em>boxing</em> to do this. For Integer values close to zero, this will actually save you a little bit because Java keeps some integers cached.</li>
<li>You don't need the <code>newNumberOfOccurs</code> variable as it's only used once.</li>
</ul>
    </div>