<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>1. Review</h3>

<ol>
<li><p>In Python it is helpful to write a <em>docstring</em> for each function or class that you define, explaining what it does, what arguments it takes, and what it returns. Docstrings can be accessed from the interactive interpreter using the built-in <a href="https://docs.python.org/3/library/functions.html#help" rel="nofollow noreferrer"><code>help</code></a> function. For <code>getNumberFromStringAndMappingInfo</code> there is a comment which could be used as the basis for a docstring.</p></li>
<li><p><code>solveCryptarithmeticBruteForce</code> does nothing if the puzzle has no solution. This would be easy to miss in a long list of solutions. It would be better to print something like "no solution".</p></li>
<li><p>Python programmers generally follow the <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">Python style guide</a> when choosing names. According to this guide, functions and variables should have names using <code>lower_case_with_underscores</code> (and not <code>mixedCase</code> as in the code in the post). You're not obliged to follow this convention but if you do then it will make it easier to collaborate with other Python programmers.</p></li>
<li><p>In Python we don't use "<a href="https://en.wikipedia.org/wiki/Hungarian_notation" rel="nofollow noreferrer">Hungarian</a>" naming, in which a name indicates the type of the object named. That's because Python is a "<a href="https://docs.python.org/3/glossary.html#term-duck-typing" rel="nofollow noreferrer">duck-typed</a>" in which the type of an object is not as important as the set of methods it supports. In general we find that code is clearer if names are chosen to be simple and readable rather than cluttered with details.</p></li>
<li><p>In Python we don't need to indicate for each argument to a function whether it is used for input or output. That's because functions can easily return a <em>tuple</em> of results, so there is no need for functions to modify their arguments in order to return multiple results.</p></li>
<li><p><code>inPossibleNumsAsStr</code> is built into Python as <a href="https://docs.python.org/3/library/string.html#string.digits" rel="nofollow noreferrer"><code>string.digits</code></a>.</p></li>
<li><p>The puzzles are represented by two lists, one of which gives the addends for each puzzle, and the other gives the results for each puzzle in the same order:</p>

<pre><code>inListNumsAsStringArray = [ ['BASE', 'BALL'], 
                            ['SEND', 'MORE'] ]
inResultsArray = [ 'GAMES',
                'MONEY' ]
</code></pre>

<p>This kind of data organization is hard to follow and error-prone. It's just about ok here where you only have two puzzles, but imagine having a hundred puzzles â€” how would you check that puzzle 57 had been entered correctly and not accidentally mixed up with puzzles 56 and 58?</p>

<p>The approach I would take would be to represent the puzzles like this:</p>

<pre><code>PUZZLES = '''
BASE + BALL = GAMES
SEND + MORE = MONEY
'''
</code></pre>

<p>The advantages of this representation are that it is clear what it means (no need for complex documentation) and it keeps each puzzle on one line, so that adding and removing puzzles is easy. The data structure can easily be processed by splitting each line into its constituent pieces, like this:</p>

<pre><code>for puzzle in PUZZLES.strip().splitlines():
    addition, result = puzzle.split(' = ')
    addends = addition.split(' + ')
    solveCryptarithmeticBruteForce(addends, result, string.digits)
</code></pre></li>
<li><p>The initial letters (that must be non-zero) might include duplicates. So it would make sense to remove duplicates in the same way as you do with <code>uniqueStrs</code>.</p></li>
<li><p>The function <code>getNumberFromStringAndMappingInfo</code> translates a string by mapping each character through a dictionary. But this can be done using the built-in <a href="https://docs.python.org/3/library/stdtypes.html#str.translate" rel="nofollow noreferrer"><code>str.translate</code></a> method. The way you use this is to call <a href="https://docs.python.org/3/library/stdtypes.html#str.maketrans" rel="nofollow noreferrer"><code>str.maketrans</code></a> to make the translation table. So instead of:</p>

<pre><code>for tup in itertools.permutations(inPossibleNumsAsStr, len(uniqueStrs)):
    dictCharAndDigit = {}
    for i in range(len(uniqueStrs)):
        dictCharAndDigit[uniqueStrs[i]] = tup[i]            
</code></pre>

<p>I would write:</p>

<pre><code>for perm in itertools.permutations(inPossibleNumsAsStr, len(uniqueStrs)):
    decipher_table = str.maketrans(uniqueStrs, ''.join(perm))
    def decipher(s):
        return s.translate(decipher_table)
</code></pre>

<p>and then instead of:</p>

<pre><code>result = getNumberFromStringAndMappingInfo(inResultStr, dictCharAndDigit)
</code></pre>

<p>I would write:</p>

<pre><code>result = int(decipher(inResultStr))
</code></pre>

<p>This would avoid the need for the <code>getNumberFromStringAndMappingInfo</code> function.</p></li>
<li><p>Instead of building a string <code>strFromStrList</code> that concatentates the addends and result, and then turning this into a set in order to eliminate duplicates, build the set directly. That is, instead of:</p>

<pre><code>strFromStrList = ''
for numStr in inListNumsAsString:
    strFromStrList = strFromStrList + numStr
strFromStrList = strFromStrList + inResultStr  
</code></pre>

<p>I would write:</p>

<pre><code>letters = set(result)
for addend in addends:
    letters.update(addend)
letters = ''.join(letters)
</code></pre>

<p>And this could be made even shorter using <a href="https://docs.python.org/3/library/itertools.html#itertools.chain" rel="nofollow noreferrer"><code>itertools.chain</code></a>:</p>

<pre><code>letters = ''.join(chain(result, *addends))
</code></pre></li>
<li><p>Similarly, <code>nonZeroLetters</code> could be constructed like this:</p>

<pre><code>initial_letters = ''.join(set(chain(result[0], (a[0] for a in addends))))
</code></pre></li>
<li><p>The sum of the deciphered addends can be computed using the built-in function <a href="https://docs.python.org/3/library/functions.html#sum" rel="nofollow noreferrer"><code>sum</code></a>. Instead of:</p>

<pre><code>testResult = 0
for numStr in inListNumsAsString:
    testResult = testResult + getNumberFromStringAndMappingInfo(numStr, dictCharAndDigit)        
</code></pre>

<p>I would write:</p>

<pre><code>deciphered_sum = sum(int(decipher(addend)) for addend in addends)
</code></pre></li>
</ol>

<h3>2. Revised code</h3>

<pre><code>from itertools import chain, permutations
from string import digits

def solve_cryptarithm(addends, result):
    """Print a solution to the cryptarithm, if any exists.
    Arguments are the list of addends and the result of the sum.
    For example:

    &gt;&gt;&gt; solve_cryptarithm(['SEND', 'MORE'], 'MONEY')
    SEND(9567) + MORE(1085) = MONEY(10652)

    """
    letters = ''.join(set(chain(result, *addends)))
    initial_letters = ''.join(set(chain(result[0], (a[0] for a in addends))))
    for perm in permutations(digits, len(letters)):
        decipher_table = str.maketrans(letters, ''.join(perm))
        def decipher(s):
            return s.translate(decipher_table)
        if '0' in decipher(initial_letters):
            continue # leading zeros not allowed
        deciphered_sum = sum(int(decipher(addend)) for addend in addends)
        if deciphered_sum == int(decipher(result)):
            def fmt(s):
                return f"{s}({decipher(s)})"
            print(" + ".join(map(fmt, addends)), "=", fmt(result))
            break
    else:
        print(" + ".join(addends), "=", result, " : no solution")
</code></pre>
    </div>