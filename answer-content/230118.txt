<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><em>I usually try to stay away from these aspects of C++, so maybe take what I say with a grain of salt.</em></p>

<hr>

<p>From what I can see, your implementation heavily relies on <code>begin</code> and <code>end</code> being <a href="https://en.cppreference.com/w/cpp/experimental/ranges/iterator/RandomAccessIterator" rel="nofollow noreferrer">random access iterators</a>. If I'm not mistaken, your implementation should also work (see notes on complexity below) for <a href="https://en.cppreference.com/w/cpp/experimental/ranges/iterator/BidirectionalIterator" rel="nofollow noreferrer">bidirectional iterators</a> as present e.g. in <code>std::list</code>. A minor change should allow the implementation to work with these iterators as well:</p>

<ul>
<li><code>end - beg &gt; 1</code> would have to become <code>std::distance(beg, end) &gt; 1</code>. <code>std::distance</code> has linear complexity for birectional iterators and constant complexity for random access iterators. (See <a href="https://en.cppreference.com/w/cpp/iterator/distance" rel="nofollow noreferrer"><code>std::distance</code></a>).</li>
</ul>

<p>and you should be good to go. This is the <em>simplest</em> change that I could think of, but I'm pretty sure that there are more efficient solutions for this check.</p>

<p><em>Note on complexity: As <a href="https://codereview.stackexchange.com/users/188857/">@L.F.</a> pointed out in a comment, quicksort is not a suitable algorithm for bidirectional iterators with regards to complexity, though. Nevertheless, not all hope is lost since at least <code>std::list</code> has its own method <code>std::list::sort</code> which according to the <a href="https://en.cppreference.com/w/cpp/container/list/sort" rel="nofollow noreferrer">documentation</a> allows you to perform sorting within the <span class="math-container">\$\mathcal{O}(n\log{}n)\$</span> complexity class for compares.</em></p>

<p>You could also use the following iterator functions to express some of the parts of your code in a different way:</p>

<ul>
<li><code>auto piv = end; --piv;</code> could become <code>auto piv = std::prev(end);</code> (See <a href="https://en.cppreference.com/w/cpp/iterator/prev" rel="nofollow noreferrer"><code>std::prev</code></a>)</li>
<li><code>++index_small;</code> could become <code>std::advance(index_small, 1);</code> (See <a href="https://en.cppreference.com/w/cpp/iterator/advance" rel="nofollow noreferrer"><code>std::advance</code></a>)</li>
</ul>

<p>These are not strictly necessary though, since bidirectional iterators also support <code>operator++</code> and <code>operator--</code>.</p>

<p>You can check an example with <code>std::list</code> on <a href="http://cpp.sh/7r2io" rel="nofollow noreferrer">cpp.sh</a>.</p>
    </div>