<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<pre><code>        private List&lt;Node&gt; children;
</code></pre>
</blockquote>

<p>Your logic would become a lot easier if you changed this to </p>

<pre><code>        private List&lt;Node&gt; children = new ArrayList&lt;&gt;();
</code></pre>

<p>A large number of null checks would disappear.  This would increase the amount of memory used, but it is unclear how much of a difference that would make.  </p>

<blockquote>
<pre><code>        public Node(List&lt;Node&gt; children, int value)
</code></pre>
</blockquote>

<p>This seems like a solution in search of a problem.  Your caller should not need to know about <code>Node</code> at all, so this always be called with <code>null</code>.  </p>

<pre><code>        public Node(int value)
</code></pre>

<p>This way, you support the natural path.  The caller only needs to know that the tree holds integers.  It does not need to know anything about how it holds them.  </p>

<blockquote>
<pre><code>        if (root.value != intArray[0]) { throw new RootsNotEquals(); }
        else
</code></pre>
</blockquote>

<p>You don't need an <code>else</code> here.  The <code>throw</code> ends the current method.  </p>

<p>If you are going to put brackets around your single statement in control structures, you should do so consistently.  You sometimes use the more common single statement form and sometimes this one.  You should pick one.  </p>

<p>Incidentally, the java standard is to write control structures like </p>

<pre><code>        if (root.value != intArray[0]) {
            throw new RootsNotEquals();
        }
</code></pre>

<p>If you write them like this every time, you will tend to use less vertical space than you do with your mixture of all on the same line and all on separate lines.  </p>

<blockquote>
<pre><code>            if (intArray.length &gt;= 1) { intArray = Arrays.copyOfRange(intArray, 1, intArray.length); }
            add(root, intArray);
</code></pre>
</blockquote>

<p>This seems silly.  You call <code>add</code> even if it's unnecessary despite checking the right condition immediately before it.  Why not </p>

<pre><code>        if (intArray.length &gt;= 1) {
            intArray = Arrays.copyOfRange(intArray, 1, intArray.length);
            add(root, intArray);
        }
</code></pre>

<p>This will save you a method call that will end up being a no-op.  </p>

<p>You also might consider doing the length check at the beginning of the method.  Because if the length is 0, then <code>intArray[0]</code> will throw an exception.  So you'd never reach the code that does the check.  </p>

<p>I also think that this method's behavior is rather silly.  In order to add multiple, you need to pass in the root value.  As a password?  In the real world, if you received a requirement like this, it would be natural to push back and ask for the requirement to be removed.  Perhaps it exists here for didactic purpose.  </p>

<blockquote>
<pre><code>        for (int i = 0; i &lt; intArray.length; i++)
</code></pre>
</blockquote>

<p>Why?  At the end of the iteration, you have </p>

<blockquote>
<pre><code>            break;
</code></pre>
</blockquote>

<p>So this only ever does one iteration.  Just take it out.  It does not actually accomplish anything and you never use <code>i</code>.  </p>

<blockquote>
<pre><code>                    if (index &lt;= tempRoot.children.size()-1) tempRoot = tempRoot.children.get(index);
</code></pre>
</blockquote>

<p>This will always be true, so it could be just </p>

<pre><code>                tempRoot = f;
</code></pre>

<p>And you could get rid of <code>index</code> entirely.  </p>

<blockquote>
<pre><code>                    if (intArray.length &gt;= 1) intArray = Arrays.copyOfRange(intArray, 1, intArray.length);
</code></pre>
</blockquote>

<p>Again, this will always be true.  </p>

<blockquote>
<pre><code>                    add(tempRoot, intArray);
</code></pre>
</blockquote>

<p>This could be </p>

<pre><code>                add(f, Arrays.copyOfRange(intArray, 1, intArray.length));
</code></pre>

<p>Note that this creates a new array each time.  You might be better off passing an <code>index</code> variable and changing your <code>[0]</code> to <code>[index]</code>.  </p>

<p>In <code>remove(int)</code>, you have </p>

<blockquote>
<pre><code>        if (!contains(r)) throw new NodeNotFound();
</code></pre>
</blockquote>

<p>Consider implementing a <code>findParentOf(int)</code> instead.  Because this essentially searches the tree, finds the element that you want, forgets the location of the element, and returns true or false.  Then you go off and find the element again.  You'd use it like </p>

<pre><code>        Node parent = findParentOf(r);
        if (r == null) {
            throw new NodeNotFound();
        }
</code></pre>

<p>And of course, you'd do this after checking if it's the root value (don't forget to check for null first).  </p>
    </div>