<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First of all, great that you used type annotations, as they're sometimes missing. However, there are some remarks:</p>

<ul>
<li>"edge" and "general"` condition are usually called "base case" and "recursive case"</li>
<li>"base case" and "recursive case" aren't commented in Haskell code, as they are everywhere</li>
<li><code>split</code> is generic enough to be defined at top-level</li>
<li><code>split</code> has a little bit of duplication that we can remove with a single <code>where</code> clause</li>
<li>functions are usually named in <code>camelCase</code> instead of <code>snake_case</code>, so we'd call it <code>quickSort</code>.</li>
</ul>

<p>If we apply that we end up with</p>

<pre><code>quickSort :: (Ord a) =&gt; [a] -&gt; [a]
quickSort []       = []
quickSort (x : xs) =
    let (lt, gt) = split x xs
    in  (quickSort lt) ++ [x] ++ (quickSort gt) 

split :: (Ord a) =&gt; a -&gt; [a] -&gt; ([a], [a])
split x [] = ([], [])
split x (h : hs)
    | h &lt;= x    = ( h : lt,     gt)
    | otherwise = (     lt, h : gt)
    where
        (lt, gt) = split x hs
</code></pre>

<p>That being said, <code>split</code> seems so helpful that there should be some function already in the standard library. And it turns out there is, namely <a href="https://hackage.haskell.org/package/base-4.12.0.0/docs/Data-List.html#v:partition" rel="nofollow noreferrer"><code>partition :: (a -&gt; Bool) -&gt; [a] -&gt; ([a],[a])</code> from <code>Data.List</code></a>:</p>

<pre><code>split :: (Ord a) =&gt; a -&gt; [a] -&gt; ([a], [a])
split x = partition (&lt;= x)
</code></pre>

<p>That's a lot cleaner than our own implementation. So how do we find <code>partition</code> if we don't know about it yet? We use <strong><a href="https://www.haskell.org/hoogle" rel="nofollow noreferrer">Hoogle</a></strong>. However, a query for <a href="https://www.haskell.org/hoogle/?hoogle=Ord%20a%20%3D%3E%20a%20-%3E%20%5Ba%5D%20-%3E%20%28%5Ba%5D%2C%5Ba%5D%29" rel="nofollow noreferrer"><code>Ord a =&gt; a -&gt; [a] -&gt; ([a],[a])</code></a> does not yield <code>partition</code>. It's sometimes a good idea to generalize the query a little bit, for example to <a href="https://www.haskell.org/hoogle/?hoogle=%5Ba%5D%20-%3E%20%28%5Ba%5D%2C%5Ba%5D%29" rel="nofollow noreferrer"><code>[a] -&gt; ([a],[a])</code></a>, as Hoogle also scans parts of the type signature. That way, we find <code>partition</code>.</p>

<p>If we're going for brevity, we can then inline <code>split</code> to gain</p>

<pre><code>-- | Sorts the given list in an ascending order.
quickSort :: (Ord a) =&gt; [a] -&gt; [a]
quickSort []       = []
quickSort (x : xs) =
    let (lt, gt) = partition (&lt;= x) xs
    in  (quickSort lt) ++ [x] ++ (quickSort gt)
</code></pre>

<p>but that's up to personal preference, as the compiler will inline <code>split</code> anyway.</p>
    </div>