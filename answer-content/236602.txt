<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Avoid <code>using namespace std</code></h1>

<p>It's a bad idea to import large namespaces such as <code>std</code> into the global namespace, and it could possibly even change the meaning of your code when a later standard adds new identifiers.  Reserve <code>using namespace</code> for those few namespaces specifically designed to be used that way (notably <code>std::literals</code>).</p>

<h1>Use <code>const</code> appropriately</h1>

<p>We don't want <code>alphabet</code> or <code>key</code> to be modified, so prevent accidents by declaring them as <code>const std::string</code>.</p>

<h1><code>getline()</code> can fail</h1>

<p>If the input stream is closed, <code>getline()</code> will read nothing, and the string will be empty.  That's probably acceptable for this program, but probably worth a comment to show that you've considered this.</p>

<h1>Use range-based <code>for</code></h1>

<p>We have an integer loop whose value is used only for indexing into the string:</p>

<blockquote>
<pre><code>for(size_t i{0}; i&lt;secretMessage.length(); ++i){
    // use secretMessage[i] here
</code></pre>
</blockquote>

<p>That's easier to read with modern range-based syntax:</p>

<pre><code>for (auto const c: secretMessage) {
    // use c here
</code></pre>

<h1>Use standard algorithms</h1>

<p>We can include <code>&lt;algorithm&gt;</code> to get some really useful functions from the standard library.  In particular, <code>std::find()</code> could replace the loop that searches in the alphabet.</p>

<h1>Reduce duplication</h1>

<p>Notice that there are two blocks of code that are almost identical, due to the symmetric nature of this cipher.  The only difference is that the role of alphabet and key are swapped.  This makes it a good candidate to extract as a function:</p>

<pre><code>std::string substitute(const std::string&amp; message,
                       const std::string&amp; from,
                       const std::string&amp; to)
</code></pre>

<p>Then we could just call it:</p>

<pre><code>auto encrypted = substitute(secretMessage, alphabet, key);
auto decrypted = substitute(encrypted, key, alphabet);
</code></pre>

<h1>Avoid linear search</h1>

<p>We can be more efficient with our lookup than simple linear search.  For example, we could construct a pair of <code>std::map&lt;char,char&gt;</code> from the alphabet and key.</p>

<h1>Clean up the plaintext</h1>

<p>I know this is just toy encryption, but for real code, we'd want to overwrite the decrypted text when we finish using it, to reduce the ability for an attacker to access it (e.g. from a core dump).  Remembering <code>&lt;algorithm&gt;</code>, we'd use <code>std::fill()</code> for this.</p>

<h1>Omit the return</h1>

<p>In <code>main()</code> (and only there), we can omit the <code>return</code> statement and the compiler will automatically return <code>0</code> for us.  It's a fairly common convention to omit the <code>return</code> if we don't have any non-zero (i.e. error) returns from <code>main()</code>.</p>
    </div>