<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Try to avoid using magic values. This one is a hack to avoid writing 2 methods.</p>

<blockquote>
<pre><code>private HttpResponseMessage TryCatch(Action action)
{
    return TryCatch(() =&gt; { action(); return "ActionToFunc"; });
}
</code></pre>
</blockquote>

<p>You are better of splitting your methods. Dispatch error handling to its own method <code>ResolveStatusCode</code> to avoid boiler-plate error handling. In addition, perform argument checks. Since your method is <code>private</code>, I would favor <code>Debug.Assert</code> over <code>ArgumentNullException</code>.</p>

<pre><code>    HttpResponseMessage TryCatch(Action operation)
    {
        try
        {
            Debug.Assert(operation != null, "invalid usage of API");
            operation();
            return Request.CreateResponse(HttpStatusCode.OK);
        }
        catch (Exception error)
        {
            return Request.CreateResponse(ResolveStatusCode(error));
        }
    }

    HttpResponseMessage TryCatch&lt;T&gt;(Func&lt;T&gt; func)
    {
        try
        {
            Debug.Assert(func != null, "invalid usage of API");
            var result = func();
            return Request.CreateResponse(HttpStatusCode.OK, result);
        }
        catch (Exception error)
        {
            return Request.CreateResponse(ResolveStatusCode(error));
        }
    }
</code></pre>
    </div>