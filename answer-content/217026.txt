<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Thanks for the updates. First things first, when writing in a new language, it's best to learn what the standard for code formatting is, and Python has PEP8 and snake_case. I recommend learning them and conforming to that standard.</p>

<p><strong>log.py</strong> - there's a standard logging package that comes with Python which can be used instead of rolling your own - and in main.py I see you import and instantiate it, but you use your own logger. Recommend spending a few mins reading the logging help pages.</p>

<p>At the top of each file you write <code>## imports ... ##</code> (or a derivative of) - you don't need to make a comment for what your code already states. Only use comments to explain why, not how - that's for the code to explain.</p>

<p>As for the imports, the method you use should be the newer Python3 style - <code>from package import class</code> (or method). You can take advantage of relative imports as well, which are imports from the files point of view. For instance, in <code>dbcontext.py</code> you have <code>from data.classes import Config, ...</code> in my IDE, I change this into <code>from .classes import Config, ...</code>. Have a look at the help pages about relative imports, and understand where you're executing your code from, everything should import from that dir tree.</p>

<p><strong>main.py</strong> most of the code there looks discord specific but as mentioned, update the logging to use Python's logging package. You're missing an entry point <code>if __name__ == "__main__":</code> - always use this as it helps to point out where your code execution begins, and if you use packages that utilise reflection on your code, it will start running it instead of creating the objects for reflection.</p>

<p><strong>api.py</strong> You create a class for what is a data structure. Here's a good tutorial on when to use classes - <a href="https://www.youtube.com/watch?v=o9pEzgHorH0" rel="nofollow noreferrer">https://www.youtube.com/watch?v=o9pEzgHorH0</a> "Stop Writing Classes", quite an amusing watch and can improve your coding skills. Most likely the API only needs a dictionary for these definitions, and you can create that inside <code>main.py</code> (or going all the way, extract them out into an .ini and use ConfigParser - for proper separation and conform to the Open/Close Principle).</p>

<p><strong>secret.py</strong> same as api.py<br>
<strong>translations.py</strong> I'm not sure about this static inheritance overwriting the variables, I'm sure there's a cleaner way to do this, but <em>shrug</em> okay. Simple is fine too.</p>

<p><strong>classes.py</strong> If you're using an <code>if</code> which will return either of two states, use a ternary. Also, 0 is nothing/false in Python - you can use a simple <code>if</code> check. To give an example of both suggestions:</p>

<pre><code>@property
def avgFrags(self):
    if self.battles == 0:
        return 0
    return round(self.frags / self.battles, 2)
</code></pre>

<p>becomes</p>

<pre><code>@property
def average_frags(self):
    return round(self.frags / self.battles, 2) if self.battles else 0
</code></pre>

<p>You can see that I renamed 'AvgFrags' to 'average_frags' - remember to name your variables/classes/method fully to make the intention clear. I'm not suggesting you go verbose - something like 'calculate_the_average_frags' would be excessive (<em>I'm sure you know I what I mean</em>). </p>

<p><strong>dbcontext.py</strong> The first function is connecting to the database, which is an expensive procedure in terms of time, especially when you're doing it hundreds of times. You should move the instantiation of the db object into your <code>__main__</code> and pass that when necessary into functions. Your connection string is verbose too - use unpacking to make this simple. For example:</p>

<pre><code>def connect():
    ''' Returns the MySQL connection '''
    mydb = mysql.connector.connect(
        host=Secret.dbAddr, user=Secret.dbUser, passwd=Secret.dbPwd, database=Secret.dbName)
    return mydb
</code></pre>

<p>(you also don't need a comment, it's obvious what it's doing) becomes (when your kwargs are named the same):</p>

<pre><code>def connect():
    return mysql.connector.connect(**Secret)
</code></pre>

<p>Further down, you're using fetchone() which is expensive too - the database will hold all the results in memory and maintain a thread with your script whilst you step through each answer. When you're writing to a database, if the dbadmin hasn't configured row locking properly (perhaps the db doesn't support it) - your loop can block other scripts from updating the table, a real traffic jam begins to pile up.<br>
Recommend to use <code>fetchall()</code> and process the rows into a list of dictionaries. See here for some code: <a href="https://codereview.stackexchange.com/questions/216769/identifying-tcp-and-udp-streams-using-a-database-populated-from-a-sniffer-tool/">Identifying TCP and UDP streams using a database populated from a sniffer tool</a><br>
Finally - all the functions in dbcontext really do look the same (DRY: Don't Repeat Yourself). It might be worth writing a basic select() and update() function which accepts (sql, values) and executes those so you remove the duplicated code from every function in this package file. </p>

<p><strong>getstats.py</strong> I notice in the functions that the start is the same again (DRY) - it gets the URL for a type of stats, with the authentication data and some specific IDs - this is more DRY which we can replace.<br>
We could create a helper which would handle the connection, authentication and query process, returning the result. It would be something like query_api(**kwargs) - where your function would unpack the named keyword arguments to determine what values are appropriate - like you have here:</p>

<pre><code>if ship is not None:
    url = api.sstats.format(
        reg=config.region, wgapi=Secret.api, accountID=player.id, shipID=ship.id)
else:
    url = api.pstats.format(
        reg=config.region, wgapi=Secret.api, accountID=player.id)
</code></pre>

<p>It would handle error responses and logging, and return the HTML response code (200,404, etc) to the caller along with any data which is necessary (such as your statistics function). Something like:</p>

<pre><code>return status_code, meta_data
</code></pre>

<p><strong>updatedb.py</strong> Your <code>GetShipsByType</code> function has a magic string in it (the URL). This violates the Open/Close Principle (from the SOLID Principles), which states code should be open for extension but closed for modification - if your URL changes, you'd need to go back into the code to edit the URL before you can make it work again.<br>
If you accidentally made an error, or unintentionally removed a line of code - do you have a backup or a git commit you can roll back? It's best to keep URLs and other magic numbers/strings outside the code, preferably in an .ini file.</p>

<p>To pick on the function a little more - you have some code which writes a dot to the screen when a new ship is being loaded. The Single Responsibility Principle states a function should do one, and only one thing.<br>
If there's a problem writing that dot to the console (perhaps you're running a detached graphical session where there is no frame buffer/GDI - I've had that experience before) and it crashes the entire script?<br>
I'm being a little dramatic with my point, but I'm sure you get what I mean. Hunting down bugs is much easier when a single function with 4 or 5 lines of code fails - then you only have to fix a single line (and not a chunk of code around the bug) and run your local tests again before committing/pushing into UAT.</p>

<p>You have a comment <code>#   Main</code> - which implies you're running updateDB.py - remember to include the entry point if you are executing this package.</p>

<pre><code>except:
    print("error")
    sys.exit(1)
</code></pre>

<p>When using Try/Catch - always catch the exception (run your code to see what exception it raises, and put that into the catch), that way other exceptions do not fail silently. Never let your code fail silently, even if it means adding another 10 lines to handle it. Either handle it or raise/throw it higher.<br>
Using sys.exit(error_code) is only needed if your software which is executing this script is checking the return level/errorlevel status. If you don't need it, log the error and raise a <code>RuntimeError("Could not load data file correctly")</code> instead of exiting silently, forcing the operator to scratch their head and mabye run <code>echo $?</code> or <code>echo %ERRORLEVEL%</code> to find out the status code, then look into your code for what that status code means? </p>

<p>That's about all I can come up with this short review - I hope this was helpful?<br>
Good Luck and keep up the coding!</p>
    </div>