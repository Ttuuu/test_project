<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2><a href="https://clean-code-developer.com/grades/grade-2-orange/#Single_Responsibility_Principle_SRP" rel="nofollow noreferrer">Single Responsibility</a></h2>

<p>your code is a <em>little bit*)</em> monolithic, you try to do all in one class</p>

<ul>
<li>creating a map</li>
<li>calculating path</li>
<li>drawing images</li>
</ul>

<p>this makes it really hard to understand your code! it would greatly improve readability if you would split your code into proper classes</p>

<p>*) honestly: the whole code is just <strong>ONE BIG</strong> monolith</p>

<h2>programm flaws</h2>

<p>you have already identified the source of your problems, it happens here</p>

<pre><code>// get the lowest f value and add it to the closed list, f calculated when neighbours are sorted
this.currentNode = this.openList.get(0);
</code></pre>

<p>this does not work because you do not sort the list by the f-value, 
as already declared in your question. But <strong>that part is essential</strong> to have an <strong>optimized path-finding algorithm</strong>, and that is why you have performance issues.  See <a href="https://stackoverflow.com/questions/5245093/how-do-i-use-comparator-to-define-a-custom-sort-order">this answer</a> for some more hints on how to sort a list according to custom properties.</p>

<p>instead of following your heuristic you now have programmed a <a href="https://en.wikipedia.org/wiki/Flood_fill" rel="nofollow noreferrer">Flood-Fill-Algorithm</a> that will inspect all fields (untill it finds the lucky target one)</p>

<h2>programm flaws 2</h2>

<p>when you expand your node (<code>addNeigborsToOpenList()</code>) and check the candidates, the algorithm says:</p>

<blockquote>
  <p>if the path (g) is better than any previous, then add it</p>
</blockquote>

<p>but you don't check that condition:</p>

<pre><code>node.g = node.parent.g + 1.; // Horizontal/vertical cost = 1.0
node.g += collisionMap[this.currentNode.y + y][this.currentNode.x + x]; // add movement cost for this square

// Add diagonal movement cost sqrt(hor_cost² + vert_cost²) + 0.4
if (x != 0 &amp;&amp; y != 0) {
    node.g += .4;   
}

// Add the node to the List &lt;--WRONG HERE:
this.openList.add(node);
</code></pre>

<h2>summary code flaws</h2>

<p>These bugs in your code prevent the efficent execution of your astar search, if you solve them your code will gain the desired performance.</p>

<h2>additional performance hints</h2>

<p>on top of this if you would also apply the guidance from <a href="https://codereview.stackexchange.com/users/58360/coderodde">coderodde</a> to optimize the new <em>flawless</em> code.</p>

<h2>other issues</h2>

<p>some very basic issues</p>

<ul>
<li>use a formatter and apply the java code style rules</li>
<li>apply java naming conventions (e.g. <code>boolean checkNeighbourHasBeenSearched()</code> should be renamed into <code>hasNeighbourHasBeenSearched()</code>)</li>
<li>primitive obseesion - why is <code>collisionMap</code> an array of <code>int</code> - should it not be an array of <code>Field</code> where each <code>Field</code> has the attribute <code>isAccessable</code></li>
<li>why do you suppress warnings when you could use proper data types (<code>@SuppressWarnings("unchecked")</code>)?</li>
<li><a href="https://clean-code-developer.com/grades/grade-4-green/#Tell_dont_ask" rel="nofollow noreferrer">tell - don't ask</a> (instead of writing comments give your methods proper names)</li>
<li><a href="https://codeburst.io/software-anti-patterns-magic-numbers-7bc484f40544" rel="nofollow noreferrer">magic numbers</a></li>
</ul>
    </div>