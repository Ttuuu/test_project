<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Ok, so here are some comments while I'm fixing up your code:</p>

<ul>
<li><p>In <code>sepInt</code>, you can combine <code>div</code> and <code>mod</code> into one computation using <code>quotRem</code></p></li>
<li><p>An efficient trick for building up a list in the "wrong order" is to build it up in reverse and then <code>reverse</code> it.</p></li>
<li><p>Don't write partial functions like <code>getStuff</code>.  That usually indicates a flaw in your code.  <code>getStuff</code> is partial because the list could be empty or full of <code>Nothing</code>s, in which case there is no way you could possibly retrieve an <code>a</code> from it.  Idiomatic Haskell code should never need partial functions.</p></li>
<li><p>You can replace <code>base10IntTOstring</code> with the <code>show</code> function, which converts any integer to its <code>String</code> representation.  However, if you still want to write the function yourself without using <code>show</code>, then it's much more efficient to use the <code>ord</code> and <code>chr</code> functions from <code>Data.Char</code> and do simple arithmetic to convert them to to the equivalent ASCII characters.</p></li>
<li><p>You shouldn't check things using functions like <code>null</code> or <code>isJust</code>.  Use <code>case</code> statements to pattern match on them.</p></li>
</ul>

<p>For example, this is NOT idiomatic Haskell:</p>

<pre><code>foo :: Maybe Int -&gt; Int
foo m = if (isJust m)
    then fromJust m
    else 0
</code></pre>

<p>Instead you would do:</p>

<pre><code>foo = case m of
    Just n  -&gt; n
    Nothing -&gt; 0
</code></pre>

<p>Same thing with list operations.  You do NOT do this:</p>

<pre><code>bar :: [Int] -&gt; Int
bar xs = if (null xs)
    then head xs
    else 0
</code></pre>

<p>Instead you do this:</p>

<pre><code>bar xs = case xs of
    x:_ -&gt; x
    []  -&gt; 0
</code></pre>

<p><code>case</code> statements are more efficient, safer, and they are statically checked by the compiler to make sure you don't extract a variable on the wrong branch.</p>

<ul>
<li>When you combine a list into a single value, you probably want a strict left fold like <code>foldl'</code>.</li>
</ul>

<p>When I combine all of those fixes, I get this:</p>

<pre><code>import Data.Char (chr, ord)
import Data.List (foldl')

sepInt :: Int -&gt; [Int]
sepInt n = reverse (go n)
  where
    go n = if n &gt;= 10
        then let (q, r) = quotRem n 10 in r:go q
        else [n]

base10IntTOstring :: Int -&gt; [Char]
base10IntTOstring = map (\n -&gt; chr (ord '0' + n)) . sepInt

charTOBase10Int :: Char -&gt; Int
charTOBase10Int c = ord c - ord '0'

stringTOBase10Int :: [Char] -&gt; Int
stringTOBase10Int cs = foldl' step 0 (map charTOBase10Int cs)
  where
    step acc elem = 10 * acc + elem
</code></pre>
    </div>