<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Efficiency</h1>

<h2><code>numOfDivisors()</code></h2>

<ul>
<li><p><code>numOfDivisors</code> and <code>exponent</code> do not need to be <code>long</code>.  Using <code>int</code> is sufficient, and should be slightly faster.</p></li>
<li><p><code>n</code> is a <code>long long</code>, where as <code>factor</code> is only a <code>long</code>.  So <code>factor</code> will be repeated promoted to a <code>long long</code> for the operations <code>n % factor</code> and <code>n /= factor</code>.  You might find a speed improvement by actually declaring <code>factor</code> as a <code>long long</code> to avoid the repeated type promotion.</p></li>
<li><p><code>factor</code> is only a <code>long</code>, so <code>factor * factor</code> is also only a <code>long</code>, and may overflow when looping <code>while (factor * factor &lt;= n)</code>.  Using a <code>long long</code> will avoid this, which may prevent the loop from running for <em>a long time</em> if <code>n</code> is prime and larger than a <code>long</code>.</p></li>
<li><p>If <code>n % factor == 0</code>, then the exponent counting inner loop is entered, and the first thing that is done is <code>n % factor</code>, which is already known to be zero.  Using a <code>do { ... } while (!(n % factor));</code> loop will prevent the redundant calculation.</p></li>
<li><p>The outer loop starts at <code>n=2</code>, and has an <code>if</code> statement to choose between incrementing <code>n</code> by <code>2</code>, or setting it to <code>3</code>.  If <code>2</code> was handled as a special case, then the loop could unconditionally increment by <code>2</code>, eliminating the <code>if</code> statement for another speed gain.  To handle the <code>2^exponent</code> case, simply count the number of trailing zeros in the binary representation of <code>n</code>.</p></li>
<li><p>Your factor finder is testing all odd numbers whose square is less than <code>n</code>.  You only need to test <code>factor</code> numbers which are prime.  Other than 2 &amp; 3, all prime numbers can be generated from <code>6k-1</code> and <code>6k+1</code>.  Or maybe use a prime sieve ... you are allowed 2MB of memory ...</p></li>
</ul>

<h2><code>iccanobif()</code></h2>

<p>You are computing...</p>

<pre><code>while (...) {
    a = inverted(a) + inverted(b);   // #1
    ...
    b = inverted(a) + inverted(b);   // #2
}
</code></pre>

<p>When you are executing statement #2, you've already computed <code>inverted(b)</code> during statement #1, above.  If you cached that value, you wouldn't need to invert it a second time.</p>

<p>Similarly, when computing statement #1 in subsequent loops, you've already computed <code>inverted(a)</code> during statement #2, below, on the previous iteration.  If you cached that value, you wouldn't need to invert it a second time.</p>

<h1>General</h1>

<p>Add vertical white space after <code>#include</code>s, after global variables, and between functions.</p>

<p>Add whitespace around operators.  Ie, <code>a += b;</code> instead of <code>a+=b;</code>.</p>

<p>Don't use <code>using namespace std;</code>.  Simply use:</p>

<pre><code>std::ifstream in("...");
std::ofstream out("...");
</code></pre>

<p><code>numOfDivisors()</code> should return the answer, not print the answer.</p>

<p><code>fibonacci()</code> should return the Fibonacci value, not print the value and call another function which also has the side-effect of additional printing.  Ditto for <code>iccanobif()</code>.</p>

<p><code>main()</code> is declare to return an <code>int</code>, but doesn't return anything.</p>

<p>If the above changes were made, then <code>in</code> and <code>out</code> don't need to be global variables; they could be made local to the <code>main</code> function:</p>

<pre><code>void main() {
   std::ifstream("siruri2.in");
   std::ofstream("siruri2.out");

   short requirement, ord;
   in &gt;&gt; requirement &gt;&gt; ord;

   long long n = requirement == 1 ? fibonacci(ord) : iccanobif(ord);

   int num_divisors = numOfDivisors(n);

   out &lt;&lt; n &lt;&lt; ' ' &lt;&lt; num_divisors;
}
</code></pre>
    </div>