<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I see a number of things that may help you improve your program.</p>

<h2>Decompose your program into functions</h2>

<p>All of the logic here is in <code>main</code> in one chunk of code.  It would be better to decompose this into separate functions.</p>

<h2>Don't loop on <code>eof()</code></h2>

<p>It's almost always incorrect to loop on <code>eof()</code> while reading a file.  The reason is that the <code>eof</code> indication is only set when an attempt is made to read something from the file when we're already at the end.  In this case, it means we have already executed the line <code>ls &gt;&gt; c;</code> and then called <code>t.push_back(c);</code>.  The problem is that if we're at the end of the file and we attempt to read one more <code>c</code> value, it will append an unwanted value to the end of the vector.  See <a href="https://stackoverflow.com/questions/5431941/why-is-while-feof-file-always-wrong">this question</a> for more details on why using <code>eof</code> is usually wrong.</p>

<h2>Omit <code>return 0</code></h2>

<p>When a C or C++ program reaches the end of <code>main</code> the compiler will automatically generate code to return 0, so there is no need to put <code>return 0;</code> explicitly at the end of <code>main</code>.  </p>

<h2>Allow the user to specify input file name</h2>

<p>The file name is currently hardcoded which certainly greatly restricts the usefulness of the program.  Consider using <code>argc</code> and <code>argv</code> to allow the user to specify file names on the command line.  </p>

<h2>Use standard algorithms</h2>

<p>An alternative is to use <code>std::copy</code> to read in a line of integers.  Here's one way to do that:</p>

<pre><code>while(getline(in, line))
{
    std::stringstream ls{line};
    std::vector&lt;int&gt; vec;
    std::copy(std::istream_iterator&lt;int&gt;(ls), 
              std::istream_iterator&lt;int&gt;(), 
              std::back_inserter(vec)
             );
    v.push_back(vec);
}
</code></pre>

<h2>Use a custom object</h2>

<p>An alternative would be to use your own class, <code>LinePair</code> and create a single-dimensional vector of those.  Here's how the <code>LinePair</code> object might be defined:</p>

<pre><code>#include &lt;iostream&gt;
#include &lt;iterator&gt;
#include &lt;fstream&gt;
#include &lt;vector&gt;

class LinePair {
public:
    friend std::ostream&amp; operator&lt;&lt;(std::ostream&amp; out, const LinePair&amp; lp) {
        constexpr char sep[]{" "};
        auto it{lp.data.begin()};
        out &lt;&lt; *it++ &lt;&lt; sep &lt;&lt; lp.data.size() - 1 &lt;&lt; '\n';
        std::copy(it, lp.data.end(), 
                  std::ostream_iterator&lt;int&gt;(out, sep));
        return out &lt;&lt; '\n';
    }
    friend std::istream&amp; operator&gt;&gt;(std::istream&amp; in, LinePair&amp; lp) {
        int a, len;
        in &gt;&gt; a &gt;&gt; len;
        if (in &amp;&amp; len) {
            lp.data.clear();
            lp.data.reserve(len+1);
            lp.data.push_back(a);
            for ( ; len &amp;&amp; in &gt;&gt; a; --len) {
                lp.data.push_back(a);
            }
        }
        return in;
    }
private:
    std::vector&lt;int&gt; data;
};
</code></pre>

<p>Now <code>main</code> is quite simple:</p>

<pre><code>int main(int argc, char *argv[])
{
    if (argc != 2) {
        std::cerr &lt;&lt; "Usage: readlines filename\n";
        return 1;
    }
    std::ifstream in{argv[1]};
    std::vector&lt;LinePair&gt; v;
    std::copy(std::istream_iterator&lt;LinePair&gt;(in), 
              std::istream_iterator&lt;LinePair&gt;(),
              std::back_inserter(v)
             );

    // now echo it back out
    std::copy(v.begin(), v.end(), 
              std::ostream_iterator&lt;LinePair&gt;(std::cout));
}
</code></pre>
    </div>