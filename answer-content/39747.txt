<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I prefer your approach much better than a recursive approach, especially when larger lists are being processed.</p>

<p>Some notes:</p>

<ul>
<li>I like the name <code>powerSet</code> as per @200_success</li>
<li>You do not need to check for <code>combination.length !== 0</code> if you start with <code>i=1</code></li>
<li>If you call the function <code>permutations</code>, then you should not call the list you build <code>combinations</code>, that is confusing</li>
<li>You could cache <code>list.length</code>, that is a common optimization</li>
</ul>

<p>With curly braces you can then have:</p>

<pre><code>function powerSet( list ){
    var set = [],
        listSize = list.length,
        combinationsCount = (1 &lt;&lt; listSize),
        combination;

    for (var i = 1; i &lt; combinationsCount ; i++ ){
        var combination = [];
        for (var j=0;j&lt;listSize;j++){
            if ((i &amp; (1 &lt;&lt; j))){
                combination.push(list[j]);
            }
        }
        set.push(combination);
    }
    return set;
}
</code></pre>

<p>without them it could look like this:</p>

<pre><code>function powerSet( list ){
    var set = [],
        listSize = list.length,
        combinationsCount = (1 &lt;&lt; listSize);

    for (var i = 1; i &lt; combinationsCount ; i++ , set.push(combination) )
        for (var j=0, combination = [];j&lt;listSize;j++)
            if ((i &amp; (1 &lt;&lt; j)))
                combination.push(list[j]);
    return set;
}
</code></pre>
    </div>