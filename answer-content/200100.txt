<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The kind of operation you’re doing is called <a href="https://pandas.pydata.org/pandas-docs/stable/merging.html" rel="nofollow noreferrer">a join</a>: you want to associate data from a <code>DataFrame</code> to data from another one based on a shared information on a given column.</p>

<p>To <a href="https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.join.html" rel="nofollow noreferrer">join a <code>DataFrame</code></a> to another one or to a <code>Series</code>, you need to respect a simple rule: either you join on index or a column is joined to an index; and they must be of similar nature. So in your case, since you need to join on the name of the account, one of your <code>DataFrame</code> must be indexed by this name. Since it is its purpose, you need to reindex <code>data_listofaccounts</code> by its <code>'Account Name'</code> column:</p>

<pre><code>data_listofaccounts = pd.read_csv(listofaccounts_csv)
data_listofaccounts = data_listofaccounts.set_index(['Account Name'])
</code></pre>

<p>Then, before joining, you can <a href="https://stackoverflow.com/questions/29370057/select-dataframe-rows-between-two-dates">filter out data that is out of your study range</a> so the join is performed on less data:</p>

<pre><code>filtered = data_entries[(start_date &lt;= data_entries['VOUCHER DATE']) &amp; (data_entries['VOUCHER DATE'] &lt;= end_date)]
</code></pre>

<p>And thus the data you’re interested in is accessed using:</p>

<pre><code>data_entries = pd.read_csv(entries_csv)
data_entries['VOUCHER DATE'] = pd.to_datetime(data_entries['VOUCHER DATE'], format="%m/%d/%Y")
data_listofaccounts = pd.read_csv(listofaccounts_csv)
data_listofaccounts = data_listofaccounts.set_index(['Account Name'])

start_date = datetime.date(2018, 4, 1)
end_date = datetime.date(2018, 10, 30)
date_mask = (start_date &lt;= data_entries['VOUCHER DATE']) &amp; (data_entries['VOUCHER DATE'] &lt;= end_date)
interesting = data_entries[date_mask].join(data_listofaccounts, on='DEBIT ACCOUNT')
</code></pre>

<p>And then each row of <code>interesting</code> will have all the information needed: the transaction date, the name of the account, its type and the amount spent.</p>

<hr>

<p>But this is all without taking into account the kind of operations you want to perform afterwards: <a href="http://pandas.pydata.org/pandas-docs/stable/groupby.html" rel="nofollow noreferrer">grouping by name and summing the amounts</a>. You can perform this operation directly before joining and it will simplify the process altogether:</p>

<pre><code>data_entries = pd.read_csv(entries_csv)
data_entries['VOUCHER DATE'] = pd.to_datetime(data_entries['VOUCHER DATE'], format="%m/%d/%Y")

start_date = datetime.date(2018, 4, 1)
end_date = datetime.date(2018, 10, 30)
date_mask = (start_date &lt;= data_entries['VOUCHER DATE']) &amp; (data_entries['VOUCHER DATE'] &lt;= end_date)

amount_per_account = data_entries[date_mask].groupby(['DEBIT ACCOUNT']).sum()
</code></pre>

<p>This will return a <code>DataFrame</code> indexed by the accounts names whose <code>'DEBIT AMOUNT'</code> column is the sum of each row pertaining to this account. You then just need to join with <code>data_listofaccounts</code> to know if this sum should be positive or negative based on the <code>'PARENT NODE'</code> column.</p>

<pre><code>summary = data_listofaccounts.join(amount_per_account, on='Account Name', how='outer').fillna(0)
debit_mask = (summary.Type == 'CURRENT LIABILITY') | (summary.Type == 'LONG TERM LIABILITY') | (summary.Type == 'EQUITY')
summary[debit_mask]['DEBIT AMOUNT'] = -summary[debit_mask]['DEBIT AMOUNT']
</code></pre>

<hr>

<p>Other improvements pertaining to coding style:</p>

<ul>
<li>you should define functions to organize your code</li>
<li>you should guard your code using <a href="https://stackoverflow.com/questions/419163/what-does-if-name-main-do"><code>if __name__ == '__main__'</code></a></li>
<li>you don't need to say that a variable contain some <code>data_</code>; same for namming a collection, you don't need to say what kind of collection hold the data (besides, in your case it is misleading as your <code>listofaccounts</code> is in fact a <code>DataFrame</code>); so <code>data_listofaccounts</code> =&gt; <code>accounts</code></li>
<li>you should follow <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">PEP8</a> namming conventions</li>
</ul>

<p>And to <code>pandas</code>:</p>

<ul>
<li>you can limit the amount of data retrieved from your CSVs by using the <a href="http://pandas.pydata.org/pandas-docs/stable/generated/pandas.read_csv.html" rel="nofollow noreferrer"><code>usecols</code></a> argument; this will lead to less data manipulation afterwards and thus more speed.</li>
</ul>
    </div>