<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>In <code>ClearNotExisting</code>, you log a message when something goes wrong, but it would probably make sense to record what went wrong (i.e. spit out some information about the exception).</p>

<hr>

<p>You have inline documentation in some places, but methods like <code>Complete</code> could really do with it (Will it throw if I call it multiple times? What is the return value? Can I make changes after calling <code>Complete</code>?). Personally, I'm of the opinion that any public API should have at least basic inline documentation, because otherwise I can't be sure that the person who wrote it knows what they were writing (which is usually the case with me).</p>

<hr>

<p>I'm not convinced that it is <code>DeleteNonExistingImagesInDB</code>'s responsibility to call <code>Complete</code> on the unit of work: what if you later decide to perform some other database maintenance task having called it? Then you transaction will be cut in two, and your unit-of-work will have become units-of-work.</p>

<hr>

<p>You should consider using a <code>HashSet</code> (or similar) to perform these checks:</p>

<pre><code>if (!Files.Where(f =&gt; f.FullName == image.Path).Any())
</code></pre>

<p>If the number of files is big, this will be slow. Such a replacement is trivial, will generally improve the scalability of this 'out of database' method, and will make the code clearer as well:</p>

<pre><code>HashSet&lt;string&gt; files = new HashSet&lt;string&gt;(d.GetFiles().Select(f =&gt; f.FullName));
if (!Files.Contains(image.Path))
</code></pre>

<p>You could also achieve this with a <code>Where</code> clause, and then use the <code>RemoveRange</code> method in <code>DeleteNonExistingImagesInDB</code>. This may be more efficient, as t3chb0t has suggested.</p>

<pre><code>_unitOfWork.Images.RemoveRange(images.Where(image =&gt; !Files.Contains(image.Path)));
</code></pre>

<p>Someone who knows how to use <code>DbContext</code>s seriously can probably suggest a solution that makes use of temporary tables and all that Jazz to avoid transferring the image information about and minimise the duration of the transaction, but I am not such a person.</p>

<hr>

<p>I find it a little unnerving that public instance method <code>DeleteNonExistingImagesInDB</code> takes the directory as a parameter: it would all too easy to call it with the wrong directory, and delete every record in the database (whereafter the cost would delete all the images, because the database is empty). This just feels wrong: it <em>looks</em> like it is meant to support multiple image directories, and feels like a general-purpose static method, but it is not.</p>

<hr>

<p>I would like to see a <code>null</code> check in <code>AgencyUnitOfWork..ctor</code>: it's meant to be injected, but that doesn't stop it being misused in some other fashion. Same with <code>Repository..ctor</code>.</p>

<hr>

<p>Your line-spacing is inconsistent in places (e.g. between <code>RemoveRange</code> and <code>AsQueryable</code>), which just makes the code that little bit more difficult to scan, and has a habit of changing over time, which just clutters commits and messes with the feel of the code.</p>

<hr>

<p>The exception message in <code>AsQueryable</code> is a bit off: I'm not sure that returning is really the problem, but it's good that the inner exception is there.</p>

<pre><code>throw new DataAccessException($"Cannot return IQueryable&lt;{typeof(TEntity)}&gt;.", e);
</code></pre>

<hr>

<p>If <code>AgencyUnitOfWork</code> is to support disposal of the underlying context, then you should consider having it formally implement <code>IDisposable</code>.</p>
    </div>