<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First, the most glaring thing I see is your use of catch-all exception handlers:</p>

<pre><code>def controller(expr):
    . . .
    # . . . All the Exceptions
    # are terminated, so the main loop keeps running. 
    . . .
    except Exception:
        return 'e'

. . .

res = controller(expr)

if res == 'e':
    print('error: invalid expression\n')
</code></pre>

<p>I have to <strong>strongly</strong> caution against this practice. You're treating every exception that may possibly come up as though it's caused by a runtime error stemming from bad user input. This is a very dangerous assumption, and <em>will</em> bite you eventually.</p>

<p>In this case, why is it such a big deal? Inside the <code>try</code>, you're calling three different functions, and all of those functions call several other functions. Lets say in the future you decide to modify one of the many functions that are called as a result of calling <code>controller</code>, and lets say you accidentally introduce a bug. In a normal workflow, you'd try to run <code>controller</code> as a test, it would fail horribly because you wrote something incorrect somewhere, and you can use the resulting stack trace to diagnose what caused the problem.</p>

<p>With how you have it here, you would run it... and it would complain about an invalid expression being entered. How much information does that give you about what happened? Throwing away the clues that help you debug a problem will only make your life more difficult once you start writing larger programs and start encountering hard-to-reproduce bugs.</p>

<p>The better way to approach this is to specify the exact exception that you expect to catch instead of using a catch-all <code>Exception</code>. If you expect a <code>ValueError</code> to be thrown if the expression was poorly formed, catch that. That way any other exception that may be raised will still come through. A broken program crashing is a good thing. Let it fail so you can fix it.</p>

<p>The same problem, but to a lesser extent can be seen in <code>isnum</code> (which I'd rename to at least <code>is_num</code>):</p>

<pre><code>def is_num(val):
    # Used as a helper function to check if the argument is a number.
    try:
        float(val)
        return True
    except Exception:
        return False
</code></pre>

<p><code>float</code> seems to only throw two types of exceptions; and only one of them seems relevant here. Change the catch to <code>except ValueError</code>. This isn't a big deal right now since only the call to <code>float</code> is inside the <code>try</code>, but if you add anything later you're opening yourself up to silent failings.</p>

<p>In this code, catch-all exceptions won't be the end of the world. They are a bad habit to get into though, and don't encourage a safe mindset. Be aware of what exceptions the code you're using can throw and react accordingly. Catching everything is just a band-aid. </p>

<p>I'd also space your code out a bit. I personally like empty lines after "bodies" of code, like the bodies of a <code>if...else</code>, or a <code>try...except</code>:</p>

<pre><code>def is_num(val):
    try:
        float(val)
        return True

    except Exception:
        return False

def controller(expr):
    try:
        if '=' in expr:
            return create_identifiers(expr)

        postfix_expr = get_postfix(expr)
        return postfix_eval(postfix_expr)

    except Exception:
        return 'e'
</code></pre>

<p>I like giving discrete parts some breathing room. I find it helps readability.</p>

<hr>

<pre><code>prec = {}
prec['!'] = 5
prec['^'] = 4
prec['/'] = 3
prec['*'] = 3
prec['+'] = 2
prec['-'] = 2
prec['('] = 1
</code></pre>

<p>This could be written as a literal, and I think it would be neater as a result:</p>

<pre><code>prec = {'!': 5,
        '^': 4,
        '/': 3,
        '*': 3,
        '+': 2,
        '-': 2,
        '(': 1}
</code></pre>

<hr>

<p>Your use of global <code>identifiers</code> isn't ideal. I'd prefer to pass a state around using an explicit parameter to any functions that require access to <code>identifiers</code>. That would make testing functions that use <code>identifiers</code> much easier. With how you have it now, whenever you want to test a function like <code>postfix_eval</code> that uses <code>identifiers</code>, you need to make sure to do <code>identifiers = some_test_state</code> before your call. If it were a parameter, its dependencies would be explicit, and it wouldn't require accessing a global mutable state.</p>

<hr>

<p>A lot of your functions start with some comments that describe the action of the function:</p>

<pre><code>def calc(op1, op, op2):
    # Performs the operation on the operands and returns the result.
</code></pre>

<p>This is a good habit to get in. Python has a standardized convention though to handle comments intended for the end-user of the function: <a href="https://www.python.org/dev/peps/pep-0257/" rel="nofollow noreferrer">docstrings</a>. Right after the function "signature", have a (triple) String literal instead of using <code>#</code> line comments. IDEs will grab this information and allow it to be accessed easier by callers.</p>

<pre><code>def calc(op1, op, op2):
    """ Performs the operation on the operands and returns the result. """
</code></pre>
    </div>