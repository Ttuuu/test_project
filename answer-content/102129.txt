<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You're basically doing a lot of unnecessary work.</p>

<p>For instance, you don't need to calculate the diagonals individually and then subtract. That's taking the task too literally, when all that matters is the result. So just add and subtract along the way.</p>

<p>And as ErikR says, the inner loops <em>really</em> aren't necessary, since you know the index you want. Your <code>if</code>s basically mean that the loops only do something <em>once</em> in their runs, namely when the index is a known value. So since you know that value, you don't need the loops at all.</p>

<p>Anyway, this is a good use case for <code>reduce</code>:</p>

<pre><code>function processData(input) {
  var rows = input.trim().split(/\n/),
      n = 1 * rows.shift(),
      sum;

  sum = rows.reduce(function (sum, row, i) {
    var values = row.split(/\s+/);
    return sum + (1 * values[i] - values[n - i - 1]);
  }, 0);

  return Math.abs(sum);
}
</code></pre>

<p>The above starts by <code>shift</code>ing the first line off the array, and converts it to a number by multiplying by 1. The multiplication makes JS coerce the string to a number.</p>

<p>A similar trick is used in the <code>reduce</code> callback. <code>1 * string</code> becomes a number, and <code>number - string</code> causes the second string to also be coerced into a number.</p>

<hr>

<p>Alternatively, you can read everything as one long array of values, and loop through them, only picking out the indices you want:</p>

<pre><code>function processData(input) {
  var values = input.trim().split(/\s+/), // split on all whitespace, including newlines
      n = 1 * values.shift(),
      sum = 0,
      i, offset;

  for(i = 0 ; i &lt; n ; i++) {
    offset = n * i;
    sum += values[i + offset] - values[offset + n - i - 1];
  }

  return Math.abs(sum)
}
</code></pre>

<p>We don't even need to multiply by 1 inside the loop in this one, since <code>string - string =&gt; number</code>.</p>

<p>The above can also be written like this, which is probably clearer (and maybe even be a teeny, tiny bit faster):</p>

<pre><code>function processData(input) {
  var values = input.trim().split(/\s+/),
      n = 1 * values.shift(),
      sum = 0,
      d1 = 0,     // first diagonal's starting index
      d2 = n - 1; // second diagonal's starting index

  while(d1 &lt; values.length) {
    sum += values[d1] - values[d2];
    d1 += n + 1; // move down 1 row, and right by 1 column
    d2 += n - 1; // move down 1 row, and left by 1 column
  }

  return Math.abs(sum)
}
</code></pre>
    </div>