<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I have only a few comments about your code, otherwise, it looks good. The string hashing algo you've devised should have an alright distribution and it is cheap to compute, though the constant <code>10</code> is probably not ideal (check the link at the end).</p>

<ol>
<li><p>I don't see a need for reinventing the wheel here. You should use <a href="http://www.cplusplus.com/reference/cstring/strlen/" rel="nofollow"><code>strlen()</code></a> to compute the length of strings. It will more than likely be a lot better optimized than your custom <code>stringLength()</code>.</p></li>
<li><p>However, you don't need to compute the string's length beforehand. <code>getHash()</code> can be optimized by using the null terminator in the string itself to infer its length. No need to do a pre-pass just to compute the length:</p>

<pre><code>static size_t getHash(const char* source)
{    
    if (source == NULL) {
        return 0;
    }

    size_t hash = 0;
    while (*source != '\0') {
        char c = *source++;
        int a = c - '0';
        hash = (hash * 10) + a;     
    } 
    return hash;
}
</code></pre></li>
<li><p>Two minor details: In C, you should add <code>void</code> to the parameter list of functions that take no arguments, so <code>main</code> should be <code>int main(void)</code>. Also, you don't need to explicitly <code>return 0</code> at the end of <code>main</code>. This function is treated specially by the compiler. If there's no explicit return, a <code>return 0</code> is added at the end of <code>main</code> by default.</p></li>
</ol>

<hr>

<p>If you are interested in knowing more about hash functions and algorithms, I recommend reading <a href="http://eternallyconfuzzled.com/tuts/algorithms/jsw_tut_hashing.aspx" rel="nofollow">this article</a>.</p>
    </div>