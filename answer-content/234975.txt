<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Unnecessary Import</h1>

<p><code>numpy</code> is not required for this challenge.  You are using none of its special capabilities.  The following:</p>

<pre><code>arry = np.array([[0]*5 for i in range(5)])
</code></pre>

<p>could easily and simply be replaced with</p>

<pre><code>arry = [[0] * 5 for _ in range(5)]
</code></pre>

<p>Notice the throw-away <code>_</code> variable being used for the unused loop comprehension variable.  If you don't use it, don't name it.</p>

<h1>StopIteration</h1>

<p>It is rarely necessary to use <code>try: ... except: ...</code> to catch the <code>StopIteration</code> exception.  You just need to use a loop structure.</p>

<pre><code>    move_combinations = itertools.product(_map.keys(), repeat=q_count)

    while True:
        arry = np.array([[0]*5 for i in range(5)])
        arry[0][0] = 1  # start at 0, 0

        current_x = 0
        current_y = 0

        try:
            moves = next(move_combinations)
        except StopIteration:
            return None

        ...
</code></pre>

<p>could be written much more simply as:</p>

<pre><code>    for move in itertools.product(_map.keys(), repeat=q_count):

        arry = [[0] * 5 for _ in range(5)]
        arry[0][0] = 1  # start at 0, 0

        current_x = 0
        current_y = 0

        ...

    return None
</code></pre>

<h1>Variable Names</h1>

<p><code>_map</code> is an odd local variable name.  A single leading underscore is used to signify private/protected object members.  Local variables are never visible in an outer scope, so do not need to be flagged as "private".  A trailing underscore is usually used to avoid name collisions, in which case the variable should be named <code>map_</code>.  But confusion may be better avoided by naming the variable not with its type but with its role; this dictionary mapping contains directions, so it may be better named <code>directions</code>.</p>

<p><code>arry</code> is also a poor name.  <code>visited</code> would be a better choice.</p>

<h1>True / False</h1>

<p>You are storing <code>0</code> and <code>1</code> in your <code>arry</code> matrix, and then testing for the truthiness of <code>arry[current_x][current_y]</code>.  It would be clearer to store <code>False</code> and <code>True</code> in these.</p>

<pre><code>visited = [[False] * 5 for _ in range(5)]

...

    ...
    elif visited[current_x][current_y]:
        break
    else:
        visited[current_x][current_y] = True
</code></pre>

<h1>Unnecessary Slicing</h1>

<p>Neither <code>s.replace(...)</code> nor <code>s[::].replace(...)</code> will modify the original <code>s</code> contents.  There is no need to use slicing to create a copy prior to the replace operation:</p>

<pre><code>        ss = s.replace("?", "{}").format(*moves)
</code></pre>

<p>(And as Carcigenicate mentioned, move it out of the loop)</p>

<h1>Magic Numbers</h1>

<p>The code is littered with 4's and 5's.  What if you want to change this to work with a 5x6 or 4x7 grid?  You need to correctly change a lot of numbers.  Perhaps you should pass in the size of the grid, instead of using hard-coded values:</p>

<pre><code>def calcpath(s, rows=5, columns=5):

    start = (0, 0)
    end = (columns - 1, rows - 1)

    ...

       visited = [[False] * columns for _ in range(rows)]
       current_x, current_y = start

       ...

           if current_x &lt; 0 or current_x &gt;= columns:
               break
           ...

       if (current_x, current_y) == end:
           ...

    ...
</code></pre>

<h1>Optimizations</h1>

<p>There should be several obvious checks you can make.  For the 5x5 grid case:</p>

<ul>
<li><code>len(s)</code> must be even</li>
<li><code>len(s)</code> must be &gt;= 8</li>
<li><code>len(s)</code> must be &lt; 25</li>
</ul>

<p>Moreover, the directed counts of the left-right and up-down moves will produce a reduced search space.</p>

<p>With <code>s = "???rrurdr?"</code>:</p>

<pre><code>&gt;&gt;&gt; print(*(sum(c == dir for c in s) for dir in "lrud?"))
0 4 1 1 4
</code></pre>

<p>There are 0 lefts, 4 rights, so we need to move +0 right to yield a net +4 right; there is 1 up and 1 down, so we need to move +4 down to yield a net +4 down.  We have 4 moves up for grabs, so they all need to be downs.  There is no point checking for combinations including up, left and right moves!</p>

<p>You can expand the logic of this for other cases: <code>"drdr??rrddd?"</code> has a net 4 right, 5 down, so the additional moves must include 1 up.  Then, it could add either a left/right pair, or an up/down pair, so you only need to check permutations of "ulr" and "uud", for a total of 12 possibilities, instead of your <span class="math-container">\$4^3\$</span> search space.</p>
    </div>