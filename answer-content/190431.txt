<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>For coding since 10 days, this program is really impressive. If I had to learn something new and complicated as C++, I'd probably make many more mistakes.</p>

<p>One thing that is always tricky is input and output. Especially input since you have to deal with funny users who enter <code>1,4</code> for the coordinates since they don't know that you expect <code>1 4</code>.</p>

<p>I tried this by accident, and your program responded with:</p>

<pre><code>Please enter the row and column
1,4
_|_|_|_|
a|_|_|_|
_|_|_|_|
_|_|_|_|



Your turn,Roland

Please enter the row and column
Position is taken
Please enter the row and column
Position is taken
Please enter the row and column
Position is taken
Please enter the row and column
Position is taken
...
</code></pre>

<p>So there is obviously something wrong. I solved this using the following code, which takes care of many possible edge cases:</p>

<pre><code>void play(Board &amp;board, Player &amp;player) {
    while (true) {
        std::cout &lt;&lt; "Please enter the row and column (1..4): ";

        // If a simple string cannot be read, something is seriously
        // broken. Stop the whole program.
        std::string line;
        if (!std::getline(std::cin, line)) {
            std::exit(std::cin.eof() ? 0 : 1);
        }

        // Let the user type the coordinates either as "1 4"
        // or as "1,4" or "1, 4" or any other variant.
        std::replace(line.begin(), line.end(), ',', ' ');

        int row, column;
        if (!(std::stringstream(line) &gt;&gt; row &gt;&gt; column)) {
            std::cout &lt;&lt; "Please enter two numbers\n";
            continue;
        }

        // Make sure that the coordinates are correct.
        // Otherwise the program may crash or do something entirely different.
        // This is called "undefined behavior" and it should frighten you.
        row--;
        column--;
        if (!(0 &lt;= row &amp;&amp; row &lt; 4 &amp;&amp; 0 &lt;= column &amp;&amp; column &lt; 4)) {
            std::cout &lt;&lt; "Please enter only numbers in the range 1..4\n";
            continue;
        }

        if (board.at(row, column) != '_') {
            std::cout &lt;&lt; "Position is already taken\n";
            continue;
        }

        board.playAt(row, column, player);
        return;
    }
}
</code></pre>

<p>As you can see, I also did some other changes to the code. But the most important idea here is to read the input line-by-line and then extract the coordinates from the line. In your current code, when I press Enter for many times before entering any number, the program will not give me any feedback.</p>

<p>A similar case is when entering the player data. I rewrote your code to:</p>

<pre><code>Player input(const std::string &amp;defaultName, char defaultSymbol) {
    std::string line;
    Player player;

    std::cout &lt;&lt; defaultName &lt;&lt; ", please enter your name: ";
    if (std::getline(std::cin, line) &amp;&amp; !line.empty()) {
        player.name = line;
    } else {
        player.name = defaultName;
    }

    std::cout &lt;&lt; player.name &lt;&lt; ", please enter a character to use: ";
    if (std::getline(std::cin, line) &amp;&amp; !line.empty()) {
        player.symbol = line[0];
    } else {
        player.symbol = defaultSymbol;
    }

    return player;
}
</code></pre>

<p>Here, I also changed from using the <code>&gt;&gt;</code> operator to using <code>std::getline</code> since that makes the program's behavior much more predictable. The operator <code>cin &gt;&gt; choice</code> in your code doesn't consume the Enter key for example. Therefore, when I changed the program to ask for <code>name1, choice1, name2, choice2</code>, the name2 was always entered automatically and was an empty string. This cannot happen when you consistently read all input as lines.</p>

<p>I also provided useful default values, so that the user can just press Enter four times in a row. The above function is called like this:</p>

<pre><code>int main() {
    Player p1 = input("Player 1", 'x');
    Player p2 = input("Player 2", 'o');
    Board board;

    ...
}
</code></pre>

<p>This looks really short and brief, just as the program in <code>main</code> should.</p>

<p>For all the above changes, you obviously have to know that these functions like <code>std::getline</code> or <code>std::replace</code> exist and that you need to include another header with <code>#include &lt;algorithm&gt;</code> at the top of your program. This cannot be expected from a beginner, therefore it's always good to ask, as you did here.</p>

<p>For reference, here is the complete program that I wrote based on your really good code.</p>

<pre><code>#include &lt;algorithm&gt;
#include &lt;cstdlib&gt;
#include &lt;iostream&gt;
#include &lt;sstream&gt;

class Player {
public:
    std::string name;
    char symbol{};
};

class Board {
    static constexpr int boardSize = 4;
    static constexpr int winLength = 4;
    char board[boardSize][boardSize]{};
public:
    Board() {
        for (auto &amp;row : board) {
            for (char &amp;cell : row) {
                cell = '_';
            }
        }
    }

    bool isWin(const Player &amp;player) const {
        auto symbol = player.symbol;
        return checkHorizontal(symbol)
               || checkVertical(symbol)
               || checkPrincipalDiagonal(symbol)
               || checkOtherDiagonal(symbol);
    }

    bool isDraw() const {
        for (auto &amp;row : board) {
            for (char cell : row) {
                if (cell == '_') {
                    return false;
                }
            }
        }
        return true;
    }

    int size() const { return boardSize; }

    char at(int row, int col) const { return board[row][col]; }

    void playAt(int row, int col, const Player &amp;player) {
        board[row][col] = player.symbol;
    }

private:
    bool checkHorizontal(char symbol) const {
        for (auto &amp;row : board) {
            int count = 0;
            for (char cell : row) {
                if (cell == symbol) {
                    count++;
                }
            }
            if (count == winLength) {
                return true;
            }
        }
        return false;
    }

    bool checkVertical(char symbol) const {
        for (int i = 0; i &lt; boardSize; i++) {
            int count = 0;
            for (auto &amp;row : board) {
                if (row[i] == symbol) {
                    count++;
                    if (count == winLength) {
                        return true;
                    }
                } else {
                    count = 0;
                }
            }
        }
        return false;
    }

    bool checkPrincipalDiagonal(char symbol) const {
        int count = 0;
        for (int i = 0; i &lt; boardSize; i++) {
            if (board[i][i] == symbol) {
                count++;
                if (count == winLength) {
                    return true;
                }
            } else {
                count = 0;
            }
        }
        return false;
    }

    bool checkOtherDiagonal(char symbol) const {
        int count = 0;
        for (int i = 0; i &lt; boardSize; i++) {
            if (board[i][boardSize - 1 - i] == symbol) {
                count++;
                if (count == winLength) {
                    return true;
                }
            } else {
                count = 0;
            }
        }
        return false;
    }
};

void print(const Board &amp;board) {
    for (int row = 0; row &lt; board.size(); ++row) {
        for (int col = 0; col &lt; board.size(); ++col) {
            std::cout &lt;&lt; '|' &lt;&lt; board.at(row, col);
        }
        std::cout &lt;&lt; "|\n";
    }
}

void play(Board &amp;board, Player &amp;player) {
    while (true) {
        std::cout &lt;&lt; "Please enter the row and column (1.." &lt;&lt; board.size() &lt;&lt; "): ";

        std::string line;
        if (!std::getline(std::cin, line)) {
            std::exit(std::cin.eof() ? 0 : 1);
        }
        std::replace(line.begin(), line.end(), ',', ' ');

        int row, column;
        if (!(std::stringstream(line) &gt;&gt; row &gt;&gt; column)) {
            std::cout &lt;&lt; "Please enter two numbers\n";
            continue;
        }

        row--;
        column--;
        if (!(0 &lt;= row &amp;&amp; row &lt; board.size() &amp;&amp; 0 &lt;= column &amp;&amp; column &lt; board.size())) {
            std::cout &lt;&lt; "Please enter only numbers in the range 1.." &lt;&lt; board.size() &lt;&lt; "\n";
            continue;
        }

        if (board.at(row, column) != '_') {
            std::cout &lt;&lt; "Position is already taken\n";
            continue;
        }

        board.playAt(row, column, player);
        return;
    }
}

Player input(const std::string &amp;defaultName, char defaultSymbol) {
    std::string line;
    Player player;

    std::cout &lt;&lt; defaultName &lt;&lt; ", please enter your name: ";
    player.name = std::getline(std::cin, line) &amp;&amp; !line.empty() ? line : defaultName;

    std::cout &lt;&lt; player.name &lt;&lt; ", please enter a character to use: ";
    player.symbol = std::getline(std::cin, line) &amp;&amp; !line.empty() ? line[0] : defaultSymbol;

    return player;
}

int main() {
    Player player1 = input("Player 1", 'x');
    Player player2 = input("Player 2", 'o');
    Board board;
    print(board);

    Player *turn = &amp;player1;
    while (true) {
        std::cout &lt;&lt; "Your turn, " &lt;&lt; turn-&gt;name &lt;&lt; ".\n";
        play(board, *turn);
        print(board);

        if (board.isWin(*turn)) {
            std::cout &lt;&lt; "Congrats, " &lt;&lt; turn-&gt;name &lt;&lt; ", you have won.\n";
            break;
        }

        if (board.isDraw()) {
            std::cout &lt;&lt; "The match is a draw!\n";
            break;
        }

        turn = turn == &amp;player1 ? &amp;player2 : &amp;player1;
    }
}
</code></pre>

<p>Feel free to change the two constants <code>boardSize</code> and <code>winLength</code>. A board size of 19 and a win length of 5 make an <a href="https://en.wikipedia.org/wiki/Gomoku" rel="noreferrer">interesting game</a>. Since these two meanings of <code>4</code> were not easily distinguishable in your code, it is good style to give such numbers meaningful names.</p>
    </div>