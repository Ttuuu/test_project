<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Congratulations on your Rustlings challenge. Your code seems fine and is easy to understand, however, as you said yourself, some parts of it don't seem idiomatic yet.</p>
<p>However, before I begin this review, I would like to mention that I consider myself a Rust beginner with a lot more experience in other languages. Keep that in mind while you read this review (and feel free to disagree and comment!).</p>
<h1>Use <code>clippy</code></h1>
<p>While <a href="https://github.com/rust-lang/rust-clippy" rel="nofollow noreferrer"><code>clippy</code></a> cannot work miracles, it can warn you about some lints. For example, the patterns in <code>split</code> are single character literals and thus should be written as <code>','</code>, not <code>","</code>.</p>
<h1>Reuse what you already have</h1>
<p>The longest line in your code is the <code>match</code> on <code>parse</code>'s result:</p>
<pre><code>// indentation removed for simplicity
match s.splitn(2, ",").collect::&lt;Vec&lt;&amp;str&gt;&gt;()[1].parse::&lt;usize&gt;()
</code></pre>
<p>However, we already have <code>s.split(...)</code>'s result at hand. We don't need to split it a second time:</p>
<pre><code>match s_as_vec[1].parse::&lt;usize&gt;()
</code></pre>
<p>If your concerned about the <code>n</code> in <code>splitn</code> then use <code>splitn</code> in your binding for <code>s_as_vec</code>. Note that the turbofish <code>::&lt;usize&gt;</code> isn't necessary, as <code>rustc</code> can infer its type by the use in <code>Person</code>.</p>
<h1>Use if-let when applicable</h1>
<p>Back to the explicit length check. Instead of</p>
<pre><code>if s_as_vec.len() &gt; 1
</code></pre>
<p>we can use <code>get(1)</code> and check whether the element exist via <code>if let</code>:</p>
<pre><code>if let Some(age) = s_as_vec.get(1) {
    match age.parse() {
        Ok(age) =&gt; Person { name, age },
        Err(_)  =&gt; Person::default
    }
}
</code></pre>
<p>This also prevents us from accidentally changing one of the index locations, e.g.</p>
<pre><code>if s_as_vec.len() &gt; 2 {
    match s_as_vec[3].parse() { // whoops, wrong number here
 ...
</code></pre>
<h1>Defer possible heavy operations if possible</h1>
<p>We don't need <code>name</code> to be a <code>String</code> unless we have a valid <code>age</code>. Therefore, we can have <code>let name = s_as_vec[0]</code> until we create the <code>Person</code>. This removes unnecessary allocations.</p>
<h1>All remarks above applied</h1>
<p>If we apply all remarks above, we end up with the following variant.</p>
<pre><code>impl From&lt;&amp;str&gt; for Person {
    fn from(s: &amp;str) -&gt; Person {
        let s_as_vec = s.splitn(2, ',').collect::&lt;Vec&lt;&amp;str&gt;&gt;();
        let name = s_as_vec[0];

        if name.is_empty() {
            Person::default()
        } else if let Some(age) = s_as_vec.get(1) {
            match age.parse() {
                Ok(age) =&gt; Person {name, age},
                Err(_) =&gt; Person::default()
            }
        } else {
            Person::default()
        }
    }
}
</code></pre>
<p>However, I personally would probably try to minimize the possible return paths and use a single <code>match</code> expression, but that's based on my Haskell experience:</p>
<pre><code>impl From&lt;&amp;str&gt; for Person {
    fn from(s: &amp;str) -&gt; Person {
        let parts = s.splitn(2, ',').collect::&lt;Vec&lt;&amp;str&gt;&gt;();

        match &amp;parts[..] {
            [name, age] if !name.is_empty() =&gt; age
                .parse()
                .map(|age| Person {
                    name: name.to_string(),
                    age,
                })
                .unwrap_or_default(),
            _ =&gt; Person::default(),
        }
    }
}
</code></pre>
    </div>