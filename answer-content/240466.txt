<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Typo</h2>

<p><code>seperated_msg</code> -&gt; <code>separated_msg</code></p>

<p><code>Retrievs</code> -&gt; <code>Retrieves</code></p>

<h2>Hex-able join</h2>

<p>This:</p>

<pre><code>    return (
            aes_cipher_text.hex()
            + ' ' + tag.hex()
            + ' ' + aes_cipher.nonce.hex()
            + ' ' + PKCS1_OAEP.new(recpient_public_key).encrypt(session_key).hex()
            + ' ' + pss.new(self.private_key).sign(SHA512.new(message)).hex()
    )
</code></pre>

<p>can be converted into a <code>join</code>, since everything there has <code>hex</code> called on it:</p>

<pre><code>pub = PKCS1_OAEP.new(recpient_public_key).encrypt(session_key)
priv = pss.new(self.private_key).sign(SHA512.new(message))
return ' '.join(
    part.hex() for part in (
        aes_cipher_text,
        tag,
        aes_cipher.nonce,
        pub,
        priv,
    )
)
</code></pre>

<p>I also think that <code>pub</code> and <code>priv</code> should be separated due to their length.</p>

<h2>Unpacking</h2>

<p>On the other end, in <code>decrypt_msg</code>, you should not be using array indices into <code>seperated_msg</code>. Instead,</p>

<pre><code>aes_cipher_text, tag, none, enc_session_key, signature = (
    value.encode().fromhex(value)
    for value in message.split(' ')
)
</code></pre>

<p>Somewhat similarly, this:</p>

<pre><code>    for message in self.get_emails():
        msg_body = self.read(message[0])
        if 'PUBLIC' in msg_body:
            yield message[1], msg_body
</code></pre>

<p>should unpack whatever <code>message</code> is into two different iteration variables.</p>

<h2>Boolean returns</h2>

<p><code>tag_status</code> and <code>sig_status</code> are not very Pythonic ways of capturing error information. If it's important to separate failure types in this way, rather than returning two different booleans, throw (potentially) two different custom exception types that <code>throw from e</code> (rethrow) <code>ValueError</code>.</p>

<h2>Statics</h2>

<p>These three have problems:</p>

<pre><code>class Keys:
    rsa_key_length = 4096
    my_private_key = None
    my_public_key =None
</code></pre>

<p>The first should be capitalized since it's a class constant. The second and third probably should not be statics, and should be instance variables instead.</p>

<h2>Symmetric nomenclature</h2>

<p>Rather than <code>load_keys</code> / <code>export_keys</code>, consider either <code>load_keys</code>/<code>save_keys</code> or <code>export_keys</code>/<code>import_keys</code>.</p>

<h2>Bundled context manager</h2>

<p>This:</p>

<pre><code>    with open('my_public_key.pem', 'wb') as fpub, \
            open('private_key.pem', 'wb') as fpri:
        fpub.write(public_key.export_key('PEM'))
        fpri.write(private_key.export_key('PEM', passphrase=passwd))
</code></pre>

<p>should be separated into two different <code>with</code> statements. Those two files are independent and should not share a context scope.</p>
    </div>