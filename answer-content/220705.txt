<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>For some of your class' issues I have a review already. Some time ago I wrote an article about <a href="https://phpdelusions.net/pdo/common_mistakes" rel="nofollow noreferrer">common mistakes in database wrappers</a>. </p>

<p>To list them briefly, </p>

<ul>
<li>the most grave problem, <strong>no support for prepared statements</strong>. In 2019 it cannot be excused. It's like starting your own bank and storing the money on the backyard. You will go bankrupt yourself and ruin your clients' money. Your query array must accept a query with placeholders and an array with data for them.</li>
<li>error reporting. <code>echo var_dump($e);</code> <strong>is definitely not</strong> the way errors should be reported. Instead of catching PDO exceptions just leave them be.</li>
<li>Connection is made every time anew which is also bad. If you have to work wth different connections, then write a distinct method that creates different connections on demand and holds them during the script execution, returning the same connection every time it is requested. </li>
</ul>

<p>There are other issues as well.</p>

<p>The most evident one is the code duplication, <em>on so many levels</em></p>

<ul>
<li>The code in InsertData, UpdateData, DeleteData is identical. Why use that many functions if you can use just one? </li>
<li>And even if you want separate functions, why duplicate so much code every time? Create a generic method that contains all the common code and then call it inside other methods. </li>
<li>and some code is duplicated within functions without any apparent reason. Why you are calling the SET NAMES query so many times? the charset should be set only once (and it must be done in the DSN, not in the query call).</li>
</ul>

<p>The code in the catch part for a transaction looks VERY strange. I suppose it is written out of some incorrect notion. <strong>There is not a single reason to reset the autoincrement</strong>, least it should be done for a failed transaction. Make your code for catch just this way</p>

<pre><code>   } catch (PDOException $e) {
        $conn-&gt;rollback();
        throw $e;
   }
</code></pre>

<p>and leave autoincrement alone.</p>

<p>the way you are using GetData() is rather strange. Why you are selecting the first row from the resultset? What if your code would expect several rows to be iterated over, but for the moment only one returned? </p>

<p>Let me suggest another code for this function</p>

<pre><code>public function getData($db2use, $query, $data = [], $Conf = [])
{
        // all the connection related stuff  should go into a dedicated method
        $conn = $this-&gt;connection($db2use, $conf = []);
        $stmt = $conn-&gt;prepare($query);
        $stmt-&gt;execute($data);
        return $stmt;
}
</code></pre>

<p>with this simple function you will be able to get everything you want from the query and even more. for example,</p>

<pre><code>$query  = "SELECT user FROM table_user WHERE unsername=?";
$user = $this-&gt;db-&gt;GetData('DatabaseName', $query, [$username])-&gt;fetchColumn();
</code></pre>

<p>the code is much simpler, both in the function and in the application and at the same time it is more flexible, for example it lets you use various fetch methods offered by PDO</p>

<p>To perform multuple queries in a transaction, have a distinct method that accepts an array of arrays each of the following structure</p>

<pre><code>$queries = [
    [
        'query' =&gt; "INSERT INTO table1 VALUES (null, ?,?,?)";
        'params' =&gt; [
                        [$name, $position, $salary],
                    ],
    ],
    [
        'query' =&gt; "UPDATE table2 SET category=? where id=?";
        'params' =&gt; [
                        [$category1, $id1],
                        [$category2, $id2],
                        [$category3, $id3],
                    ],
    ],
];
</code></pre>

<p>then you will be able to loop over queries and for each it will be possible to execute multiple sets of parameters, like this (based on the code from my <a href="https://phpdelusions.net/pdo_examples/insert" rel="nofollow noreferrer">multiple query execution example</a>)</p>

<pre><code>try {
    $conn = $this-&gt;connection($db2use, $conf = []);
    $conn-&gt;beginTransaction();
    foreach ($queries as $one)
    {
        $stmt = $conn-&gt;prepare($one['query']);
        foreach ($one['params'] as $params)
            $stmt-&gt;execute($params);
        }
    }
    $conn-&gt;commit();
}catch (Exception $e){
    $pdo-&gt;rollback();
    throw $e;
}
</code></pre>
    </div>