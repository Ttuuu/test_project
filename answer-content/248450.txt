<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This is a bit of an expansion from existing answers, applying some of the suggestions given before.</p>
<hr>
<p>First, pick a style of quotes. Dont flip-flop between single and double quotes.</p>
<p>Here are 2 examples of it:</p>
<pre><code>prompt("Please enter an egg weight in grams: ");
alert('Peewee');
</code></pre>
<p>Due to <strong>personal preferences</strong>, I will be sticking to single-quotes.</p>
<hr>
<p>Something that everybody forgot was that everything can be turned into a function:</p>
<pre><code>function getWeight()
{
    var eggWeight = prompt('Please enter an egg weight in grams: ');
    eggWeight = parseInt(eggWeight);
    while(isNaN(eggWeight))
    {
        eggWeight = prompt('This is not a valid number. Please enter an egg weight in grams: ');
        eggWeight = parseInt(eggWeight);
    }
    
    return eggWeight;
}

function getEggDesignation(eggWeight)
{
    if (eggWeight &gt; 69)
        return 'Jumbo';
    else if (eggWeight &gt; 63 &amp;&amp; eggWeight &lt;= 69)
        return 'Extra Large';
    else if (eggWeight &gt; 55 &amp;&amp; eggWeight &lt;= 63)
        return 'Large';
    else if (eggWeight &gt; 48 &amp;&amp; eggWeight &lt;= 55)
        return 'Medium';
    else if (eggWeight &gt; 42 &amp;&amp; eggWeight &lt;= 48)
        return 'Small';
    else
        return 'Peewee';
}

function calculateEggDesignation()
{
    var eggWeight = getWeight();
    
    var designation = getEggDesignation(eggWeight);
    
    alert(designation);
}
</code></pre>
<p>This way, if you want to, say, receive input from a known element, you can just change the function related to gathering input.</p>
<hr>
<p>You make absolutely no efforts at all to see if the <code>prompt()</code> was cancelled.</p>
<p>You can easily change it to detect if <a href="https://stackoverflow.com/a/12864637/">the result is <code>null</code></a>:</p>
<pre><code>function getWeight()
{
    var eggWeight = prompt('Please enter an egg weight in grams: ');
    if(eggWeight === null)
    {
        return false;
    }
    eggWeight = parseInt(eggWeight);
    
    while(isNaN(eggWeight))
    {
        eggWeight = prompt('This is not a valid number. Please enter an egg weight in grams: ');
        if(eggWeight === null)
        {
            return false;
        }
        
        eggWeight = parseInt(eggWeight);
    }
    
    return eggWeight;
}

function getEggDesignation(eggWeight)
{
    [...]
}

function calculateEggDesignation()
{
    var eggWeight = getWeight();
    if(eggWeight === false)
    {
        // alert('You cancelled the calculation');
        return;
    }
    
    var designation = getEggDesignation(eggWeight);
    
    alert(designation);
}
</code></pre>
<p>The <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Strict_equality" rel="nofollow noreferrer">strict equality (<code>===</code>) operator</a> is <strong>required</strong>, due to being possible to accept <code>0</code> as an input.</p>
<hr>
<p>Now, focusing on the <code>getEggDesignation()</code> function, you can see a non-elegant <code>if</code> lasagna. Yuck.</p>
<p>You can try to change it to use an object with the minimum weight per "designation":</p>
<pre><code>function getEggDesignation(eggWeight)
{
    var eggWeights = {
        70: 'Jumbo',
        64: 'Extra Large',
        56: 'Large',
        49: 'Medium',
        43: 'Small',
        0: 'Peewee'
    };

    var last_step = 0;
    var result = eggWeights[last_step];

    for(var k in eggWeights)
    {
        if(eggWeights.hasOwnProperty(k) &amp;&amp; eggWeight &gt;= k &amp;&amp; k &gt;= last_step)
        {
            result = eggWeights[k];
            last_step = k;
        }
    }
    
    return result;
}
</code></pre>
<p>Isn't it a beauty? üòç</p>
<p>An alternative could be:</p>
<pre><code>function getEggDesignation(eggWeight)
{
    var eggWeights = {
        70: 'Jumbo',
        64: 'Extra Large',
        56: 'Large',
        49: 'Medium',
        43: 'Small',
        0: 'Peewee'
    };
    
    var newWeight = Object.keys(eggWeights)
        .map(function(weight){ return +weight; })
        .sort()
        .filter(function(weight){ return eggWeight &gt;= weight; })
        .slice(-1);
    
    return eggWeights[newWeight];
}
</code></pre>
<p>Basically, it grabs the keys, converts to integers, sorts them (ascending), removes the ones that are higher than <code>eggWeight</code> and picks the last one.</p>
<p>This new value is then used to get the value from <code>eggWeights</code>.</p>
<p><strong>Warning:</strong> Depending on the execution environment, you may need a polyfill for <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys" rel="nofollow noreferrer"><code>Object.keys()</code></a>, for <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map" rel="nofollow noreferrer"><code>Array.prototype.map()</code></a> and for <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter" rel="nofollow noreferrer"><code>Array.prototype.filter()</code></a>. Possibly <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort" rel="nofollow noreferrer"><code>Array.prototype.sort()</code></a> if you intend to run this on <strong>very</strong> old browsers.</p>
<p><strong>For ES6:</strong></p>
<p>If your execution environment is recent enough, you can just use <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions" rel="nofollow noreferrer">arrow functions</a> and <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const" rel="nofollow noreferrer"><code>const</code></a>:</p>
<pre><code>function getEggDesignation(eggWeight)
{
    const eggWeights = {
        70: 'Jumbo',
        64: 'Extra Large',
        56: 'Large',
        49: 'Medium',
        43: 'Small',
        0: 'Peewee'
    };
    
    const newWeight = Object.keys(eggWeights)
        .map(weight =&gt; +weight})
        .sort()
        .filter(weight =&gt; eggWeight &gt;= weight})
        .slice(-1);
    
    return eggWeights[newWeight];
}
</code></pre>
<p>For compatibility sake, I will use the first alternative, despite needing a polyfill for <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty" rel="nofollow noreferrer"><code>Object.prototype.hasOwnProperty()</code></a> for <strong>very</strong> old browsers.</p>
<hr>
<p>Another thing I've noticed is that you do not validate the range of inputs at all.</p>
<p>I can say that my egg is a black hole (-10000) and you'll say it is a Peewee.</p>
<p>It's always good to verify if the value is <em>acceptable</em>.</p>
<p>Changing part of the <code>getWeight()</code> function:</p>
<pre><code>while(isNaN(eggWeight) || eggWeight &lt; 0)
{
    eggWeight = prompt('This is not a valid positive number. Please enter an egg weight in grams: ');
    [...]
}
</code></pre>
<hr>
<h1>The final code:</h1>
<p>This is the final implementation, after all the changes:</p>
<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>function getWeight()
{
    var eggWeight = prompt('Please enter an egg weight in grams: ');
    if(eggWeight === null)
    {
        return false;
    }
    eggWeight = parseInt(eggWeight);
    
    while(isNaN(eggWeight) || eggWeight &lt; 0)
    {
        eggWeight = prompt('This is not a valid positive number. Please enter an egg weight in grams: ');
        if(eggWeight === null)
        {
            return false;
        }
        
        eggWeight = parseInt(eggWeight);
    }
    
    return eggWeight;
}

function getEggDesignation(eggWeight)
{
    var eggWeights = {
        70: 'Jumbo',
        64: 'Extra Large',
        56: 'Large',
        49: 'Medium',
        43: 'Small',
        0: 'Peewee'
    };

    var last_step = 0;
    var result = eggWeights[last_step];

    for(var k in eggWeights)
    {
        if(eggWeights.hasOwnProperty(k) &amp;&amp; eggWeight &gt;= k &amp;&amp; k &gt;= last_step)
        {
            result = eggWeights[k];
            last_step = k;
        }
    }
    
    return result;
}

function calculateEggDesignation()
{
    var eggWeight = getWeight();
    if(eggWeight === false)
    {
        // alert('You cancelled the calculation');
        return;
    }
    
    var designation = getEggDesignation(eggWeight);
    
    alert(designation);
}

calculateEggDesignation();</code></pre>
</div>
</div>

    </div>