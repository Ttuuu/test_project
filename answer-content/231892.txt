<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<pre><code>solutionNaive :: String -&gt; String
solutionNaive xs = maximumBy (comparing length) $ map (takeWhileUnique S.empty) $ tails xs where
  -- Take elements from the list until the first duplicated element is encountered.
  takeWhileUnique _    []       = []
  takeWhileUnique seen (x : xs) = if x `S.member` seen
    then []
    else x : takeWhileUnique xs (x `S.insert` seen)
</code></pre>

<p>(Higher-order <code>foldr</code> could get rid of that explicit recursion, but it's not gainful.)</p>

<p>Your second solution does seem to require stateful arithmetic. We can still make it hurt less.</p>

<pre><code>-- |Return a maximum-length substring without repeating characters.
-- This is the more sophisticated O(n) implementation.
solution :: String -&gt; String
solution = spanExtract . maximumBy (comparing spanLength) . mapAccumL step (M.empty, 0) . zip [0..]
  where step (seen, curLeft) (curRight, x) =
    ( (M.insert x curRight seen, max curLeft $ maybe 0 (+1) $ M.lookup x seen)
    , (curLeft, curRight)
    )
</code></pre>
    </div>