<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong><code>token_add()</code></strong></p>

<ul>
<li>do not change the struct members before you know that your call will succeed, otherwise you'll end up with inconsistent state (e.g. you're overwriting <code>tokens-&gt;array</code> if <code>realloc</code> fails). That means keep the increment of <code>count</code> and the assignment of <code>array</code> until the end of the function.</li>
<li>Note that <code>strdup</code> is not a C standard function. </li>
</ul>

<p><strong><code>split_string()</code></strong></p>

<ul>
<li><p>you're creating a temporary copy in the local variables <code>token</code>. If you'd pass the pointer and the length to <code>token_add</code> and you could safe the program a string copy.</p></li>
<li><p>there is no need to have <code>delimpos</code> in <code>string_split</code> being <code>const</code>. Same goes for the parameter <code>count</code> and <code>charcount</code>. As a rule of thumb, dont use <code>const</code> for integer types, booleans and floating points.</p></li>
<li>Note: your comment in <code>test.c</code> states that values less than 0 mean unlimited matching, but your code doesn't contribute to that statement. If you have enough matches you'll eventually increment <code>delimcount</code> to match <code>-1</code>.</li>
<li>Separate the increment of <code>delimcount</code> from the comparison with <code>count</code>. Some will ask himself if this is correct and right now, I couldn't tell ;-)
Why don't you use <code>tokens-&gt;count</code>?</li>
<li>If a call to <code>tokens_add</code> failes, you're returning <code>NULL</code> from <code>split_string</code> without freeing the <code>Tokens</code> struct allocated before, leaking its memory.</li>
</ul>

<p><strong>misc</strong></p>

<ul>
<li>Provide more test cases. One test case for handling unlimited matching, one for restricted matching, one for empty delimiters. Best is to write down what your API supports and then add a test for every special case.</li>
</ul>

<p>For instance, if I test the following:</p>

<pre><code>    struct Tokens *tokens = string_split("Hello;world;!;", ";", 2);

    assert(tokens-&gt;count == 2);
    assert(strcmp("Hello", tokens-&gt;array[0]) == 0);
    assert(strcmp("world!", tokens-&gt;array[1]) == 0);
</code></pre>

<p>I receive: <code>test: test.c:22: test_2: Assertion 'tokens-&gt;count == 2' failed.</code></p>

<ul>
<li>you don't need the include in <code>tokens.h</code>, it's sufficient if you add it to <code>tokens.c</code></li>
</ul>
    </div>