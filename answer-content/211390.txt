<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>TL;DR</h1>

<ul>
<li>Style could better adhere to established standards.</li>
<li><code>insertAt</code> has bugs to resolve.</li>
<li>This class is missing basic add/remove functions which prevent it from being useful.</li>
<li>Writing a linked list class in JS only makes sense from an educational standpoint; primitive arrays are efficient, universal and offer more functionality with less code.</li>
</ul>

<hr>

<h1>Style</h1>

<h3>Spacing</h3>

<ul>
<li><p>Use a space between <code>)</code>s, <code>{</code>s and keywords, e.g. </p>

<pre><code>if(this.head === null){ 
</code></pre>

<p>is cleaner as </p>

<pre><code>if (this.head === null) {
</code></pre></li>
<li><p>Add vertical spacing between lines to group logical code blocks together and separate loop, conditional and function logic from declarations. For example,</p>

<pre><code>let curr = this.head;
while(curr !== null){
</code></pre>

<p>is easier to read as </p>

<pre><code>let curr = this.head;

while (curr !== null) {
</code></pre></li>
<li><p><code>this.size ++</code> is clearer as <code>this.size++</code>.</p></li>
<li><p>Be consistent--sometimes you use <code>}else{</code>, and sometimes you use </p>

<pre><code>}
else{
</code></pre></li>
<li><p>Your whitespace fixes can be done by putting the code into SE's Code Snippet and pressing "Tidy", then adding blank lines around blocks by hand. Generally, I don't see reason to deviate from this prescribed style.</p></li>
</ul>

<h3>Variable and function naming</h3>

<ul>
<li>Function names switch between <code>snake_case</code> and <code>camelCase</code>. All JS naming should be <code>camelCase</code>, except class names, which are <code>UpperCamelCase</code> (as you use).</li>
<li>Avoid single-letter variable names like <code>p</code> unless the meaning is obvious. In this case, something like <code>newNode</code> might be clearer.</li>
</ul>

<hr>

<h1>Functionality</h1>

<h3>Errors</h3>

<ul>
<li><code>throw "Wrong index";</code> is an unclear error message. What exactly is wrong with the index? Consider <code>throw "Index out of list bounds";</code> which more accurately describes the problem. </li>
<li><p>You may wish to reconsider using errors at all. I find throwing errors in JS generally less appropriate than return values because the calling code can stick to normal conditionals to handle control flow. </p>

<p>Also, not throwing errors is in keeping with JS's builtin library functions, which generally don't complain about invalid or missing input. For <code>insertAt</code>, for example, you could return <code>true</code> if the insertion was successful and <code>false</code> otherwise. If the user provides something silly as an index that causes a crash, they'll get an appropriate stack trace that likely explains the problem better than a hand-written error string.</p>

<p>If you do wish to stick with error throwing, ensure it is comprehensive. For example, <code>if (index &gt; this.size)</code> doesn't handle the case when <code>index &lt; 0</code> which could result in difficult-to-track-down bugs for the client who has to make design assumptions based on your throw.</p>

<p>Then, once you've covered that scenario, it begs the question whether you should now validate that the provided input is an integer number and throw an error message for that as well. </p>

<p>The point is, adding errors gives the client the illusion of a comprehensive and robust set of argument and function state restrictions, which is problematic if they aren't actually robust. Throwing no errors, assuming the client is behaving, and reporting <code>true</code>/<code>false</code> as to whether some function failed or not seems preferential.</p></li>
</ul>

<h3>Variable keywords</h3>

<ul>
<li>Use <code>const</code> when appropriate in place of <code>let</code>. This should apply to almost everything except for loop counters, accumulator variables and runner nodes. For example, <code>let out = [];</code> should be <code>const out = [];</code>. Even if the risk of bugs caused by accidental reassignment is low, this has semantic benefits.</li>
</ul>

<h3>Misleading function names</h3>

<ul>
<li><code>printList()</code> is a misleading name; it stringifies the list rather than printing. I recommend overriding <code>toString()</code> here.</li>
<li><code>insert()</code> usually refers to insertion at some specific element, which is the behavior your <code>insertAt()</code> function offers. With <code>insert()</code>, It's not obvious <em>where</em> the insertion is happening; one of <code>addFront</code>, <code>unshift</code> or <code>push</code> seem clearer, depending on which end of your list you decide the front to be. </li>
</ul>

<h3>Internal logic</h3>

<ul>
<li><code>insertAt</code> is not working correctly, placing items incorrectly, not at all, and neglecting to increment the size.</li>
<li>Consider adjusting your <code>insertAt</code> code to avoid using <code>return</code>s and <code>curr.next.next</code>, which is difficult to reason about and causing bugs.</li>
<li>In <code>printList</code>, pains are taken to conditionally add the <code>-&gt;</code> arrow only for non-last elements when you can simply walk the list and use <code>out.join("-&gt;")</code>.</li>
<li>Since your internal code relies only on <code>Node</code> objects, you can make your code cleaner by testing <code>while (curr)</code> instead of <code>while (curr === null)</code>. This is debatable, because it restricts your internal logic from distinguishing between <code>null</code> and <code>undefined</code> or other falsey values, but if you trust yourself to be consistent about it, I prefer the cleaner look.</li>
</ul>

<h3>Interface</h3>

<ul>
<li><p>As written, I find your provided function interface insufficient for typical linked list needs. It's not obvious what functionality this class offers over, say, a primitive array.</p>

<p>Consider <code>remove(item)</code>. This sort of function that takes an element and searches the structure for it is best used for hashes with random access. The whole point of linked lists is to offer fast insertion and removal of front and back elements, regardless of what those elements might be. Anything in the middle is of no concern, and libraries that offer access to these elements, such as Java's <a href="https://docs.oracle.com/javase/7/docs/api/java/util/LinkedList.html" rel="nofollow noreferrer">LinkedList</a> collection are generally considered to be flawed because clients may make false assumptions about the time complexity of provided operations.</p>

<p>Without constant time <code>front</code> and <code>back</code> adds, removals and peeks, I can't foresee a reason to use this class instead of a primitive array. <code>insert</code> is the only useful linked list function your interface offers (disregarding <code>isEmpty</code>, <code>printList</code>, etc as useful but trivial).</p></li>
</ul>

<hr>

<h1>Rewrites</h1>

<h3>Revision #1 (same functionality)</h3>

<p></p><div class="snippet" data-lang="js" data-hide="true" data-console="true" data-babel="false">
<div class="snippet-code snippet-currently-hidden">
<pre class="snippet-code-js lang-js prettyprint-override"><code>class LinkedList {
  constructor() {
    this.head;
    this.size = 0;
  }

  addFront(value) {
    const newNode = new Node(value);
  
    if (this.head) {
      newNode.next = this.head;
    } 
    
    this.head = newNode;
    this.size++;
  }
  
  insertAt(value, idx) {
    let curr = this.head;
    let prev;
    
    while (curr &amp;&amp; idx &gt; 0) {
      prev = curr;
      curr = curr.next;
      idx--;
    }
    
    if (prev) {
      prev.next = new Node(value);
      prev.next.next = curr;
      this.size++;
    }
    else {
      this.addFront(value);
    }    
  }
  
  remove(value) {
    let curr = this.head;
    let prev;
    
    while (curr) {
      if (curr.val === value) {
        if (prev) {
          prev.next = curr.next;
        }
        else {
          this.head = undefined;
        }
        
        this.size--;
        return true;
      }
      
      prev = curr;
      curr = curr.next;
    }
    
    return false;
  }
  
  length() {
    return this.size;
  }

  empty() {
    return !this.size;
  }
  
  toString() {
    const result = [];
    let curr = this.head;

    while (curr) {
      result.push(curr.val);
      curr = curr.next;
    }
    
    return result.join("-&gt;");
  }
}

class Node {
  constructor(val, nextNode=null) {
    this.val = val;
    this.next = nextNode;
  }
}

const list = new LinkedList();
list.remove(1123);
list.insertAt(21, 33);
list.remove(21);
list.addFront(12);
list.addFront(9);
list.addFront(13);
list.addFront(17);
list.remove(1123);
console.log(list.toString());
list.remove(12);
console.log(list.toString());
console.log(list.length(), list.empty());
list.insertAt(21, 2);
console.log(list.toString(), list.length());
list.insertAt(11, 0);
console.log(list.toString(), list.length());</code></pre>
</div>
</div>


<h3>Revision #2 (added front/back operations)</h3>

<p></p><div class="snippet" data-lang="js" data-hide="true" data-console="true" data-babel="false">
<div class="snippet-code snippet-currently-hidden">
<pre class="snippet-code-js lang-js prettyprint-override"><code>class LinkedList {
  constructor() {
    this.head;
    this.tail;
  }

  addFront(value) {
    const newHead = new Node(value);
  
    if (this.head) {
      newHead.next = this.head;
    } 
    else {
      this.tail = newHead;
    }
    
    this.head = newHead;
  }
  
  addBack(value) {
    if (this.tail) {
      this.tail.next = new Node(value);
      this.tail = this.tail.next;
    }
    else {
      this.head = this.tail = new Node(value);
    }
  }
  
  peekFront() {
    return this.head ? this.head.val : null;
  }
  
  peekBack() {
    return this.tail ? this.tail.val : null;
  }
  
  popFront() {
    if (this.head) {
      const value = this.head.val;
      this.head = this.head.next;
      
      if (!this.head) {
        this.tail = null;
      }
      
      return value;
    }
  }
    
  empty() {
    return !this.head;
  }
  
  toString() {
    const result = [];
    let curr = this.head;

    while (curr) {
      result.push(curr.val);
      curr = curr.next;
    }
    
    return result.join("-&gt;");
  }
}

class Node {
  constructor(val, nextNode=null) {
    this.val = val;
    this.next = nextNode;
  }
}

const list = new LinkedList();
list.popFront();
console.log(list.toString(), list.empty());
list.addBack(1);
console.log(list.toString(), list.empty());
list.popFront();
console.log(list.toString(), list.empty());
list.addFront(2);
console.log(list.toString());
list.addBack(3);
console.log(list.toString());
list.popFront();
console.log(list.toString());
list.addFront(4);
list.addBack(5);
console.log(list.toString());</code></pre>
</div>
</div>


<p>Note that there is no <code>popBack()</code> because this operation would be linear without doubly linked nodes. However, the class is sufficient to support both stacks and queues with all operations in constant time. Without the <code>tail</code> pointer, only a stack could be supported. Adding <code>popBack()</code> and double links would give you a <a href="https://en.wikipedia.org/wiki/Double-ended_queue" rel="nofollow noreferrer">deque</a> class.</p>

<h3>Revision #3 (supported a queue)</h3>

<p></p><div class="snippet" data-lang="js" data-hide="true" data-console="true" data-babel="false">
<div class="snippet-code snippet-currently-hidden">
<pre class="snippet-code-js lang-js prettyprint-override"><code>class Queue {
  constructor() {
    this.list = new LinkedList();
  }
  
  offer(value) {
    this.list.addBack(value);
  }
  
  poll() {
    return this.list.popFront();
  }
  
  peek() {
    return this.list.peekFront();
  }
  
  empty() {
    return this.list.empty();
  }
  
  toString() {
    return this.list.toString();
  }
}

class LinkedList {
  constructor() {
    this.head;
    this.tail;
  }

  addFront(value) {
    const newHead = new Node(value);
  
    if (this.head) {
      newHead.next = this.head;
    } 
    else {
      this.tail = newHead;
    }
    
    this.head = newHead;
  }
  
  addBack(value) {
    if (this.tail) {
      this.tail.next = new Node(value);
      this.tail = this.tail.next;
    }
    else {
      this.head = this.tail = new Node(value);
    }
  }
  
  peekFront() {
    return this.head ? this.head.val : null;
  }
  
  peekBack() {
    return this.tail ? this.tail.val : null;
  }
  
  popFront() {
    if (this.head) {
      const value = this.head.val;
      this.head = this.head.next;
      
      if (!this.head) {
        this.tail = null;
      }
      
      return value;
    }
  }
    
  empty() {
    return !this.head;
  }
  
  toString() {
    const result = [];
    let curr = this.head;

    while (curr) {
      result.push(curr.val);
      curr = curr.next;
    }
    
    return result.join("-&gt;");
  }
}

class Node {
  constructor(val, nextNode=null) {
    this.val = val;
    this.next = nextNode;
  }
}

const q = new Queue();
q.offer(1);
console.log(q.poll());
console.log(q.poll());

for (let i = 0; i &lt; 5; i++) {
  q.offer(i);
}

while (!q.empty()) {
  console.log(q.poll());
}</code></pre>
</div>
</div>


<p>After all that work, a <a href="https://jsperf.com/linkedlist-vs-primitive-array" rel="nofollow noreferrer">benchmark</a> shows that it's no faster than a primitive array. This is likely due to overhead from object creation, function calls and garbage collection, which counteracts the shifting necessary on the primitive array.</p>
    </div>