<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I can't understand your algorithm as written, but some very general advice applies:</p>

<ul>
<li>Use <a href="https://docs.python.org/3.7/library/string.html#string.Formatter.format" rel="nofollow noreferrer"><code>format()</code></a> or <a href="https://docs.python.org/3.7/library/string.html#template-strings" rel="nofollow noreferrer">template strings</a> to format strings.</li>
<li>Rather than creating dynamic dictionary keys, I would create variables <code>data_row</code>, <code>clust</code> (but see naming review below), etc. and assign to indexes in these lists. That way you get rid of the global variables (which are bad for reasons discussed at great length elsewhere), you won't need to format strings all over the place, <em>and</em> you won't need to do the <code>str()</code> conversions. You should also be able to get rid of the array initialization this way, something which is a code smell in garbage collected languages.</li>
<li>Can there really be <em>multiple</em> tab characters between columns? That would be weird. If not, you might get less surprising results using a single tab as the column separator.</li>
<li>Naming could use some work. For example:

<ul>
<li>In general, don't use abbreviations, especially not single letter ones or ones which shorten by only one or two letters. For example, use <code>index</code> (or <code>[something]_index</code> if there are multiple indexes in the current context) rather than <code>indx</code>, <code>idx</code>, <code>i</code> or <code>j</code>.</li>
<li><code>data</code> should be something like <code>character_table</code>.</li>
<li>I don't know what <code>obj</code> <em>is</em>, but <code>obj</code> gives me no information at all. Should it be <code>vowels</code>?</li>
</ul></li>
</ul>
    </div>