<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Take the following <code>Kernel</code> class:</p>

<pre><code>class Kernel
{
    protected $env;

    const ENV_TYPE_DEV = 'dev';
    const ENV_TYPE_PROD = 'prod';

    public function __construct($env = null)
    {
        $this-&gt;env = $env ?? self::ENV_TYPE_DEV;
    }

    /**
    * Loads the container configuration.
    */
    public function registerContainerConfiguration()
    {
        if ($this-&gt;env === self::ENV_TYPE_DEV) {
            $configuration = 'config-development.yml';
        } else {
            $configuration = 'config-production.yml';
        }

        return $configuration;
    }
}
</code></pre>

<p>The changes I made are as follows:</p>

<ul>
<li>Defined two constants so you can reference them rather than passing a direct string as the <code>$env</code>. This also gives you the option to change the values in the future without having to consider hardcoded versions of the values</li>
<li>Simplified your <code>if</code> statement (via the <a href="https://www.php.net/manual/en/migration70.new-features.php#migration70.new-features.null-coalesce-op" rel="nofollow noreferrer">null coalescing operator</a>) in your <code>__construct</code> to set the <code>$env</code> property to whatever is passed to <code>ENV_TYPE_DEV</code> as a default</li>
<li>In <code>registerContainerConfiguration</code> I removed your casts as they were redundant and turned the hard-coded string into the respective <code>const</code></li>
</ul>

<p>Then your <code>index.php</code> file:</p>

<pre><code>use Symfony\Component\HttpFoundation\Request;
// load vendor
require __DIR__.'/../vendor/autoload.php';

// autoloading done through composer
// error handling based on kernel env
// type that is passed.

// new kernel
$kernel = new Kernel(Kernel::ENV_TYPE_DEV);
$bootstrap = new Bootstrap;

// new request
$request = Request::createFromGlobals();
// loader interface
$config = $kernel-&gt;registerContainerConfiguration();
// response from
$response = $bootstrap-&gt;handle($request, $config, null);
</code></pre>

<p>The changes I made / suggest are as follows:</p>

<ul>
<li>You should have your error reporting work in conjunction with your environment that is defined in your <code>Kernel</code></li>
<li>You should autoload your classes through composer</li>
<li>I changed the hardcoded <code>dev</code> string to the defined constant</li>
</ul>

<p>In your <code>AddWorkoutDomain</code> class, I'd simplify the handle function:</p>

<pre><code>/**
  * Handle 
  * 
  * @param Workout $workout
  * @return array
  */
  public function handle(Workout $workout):array
  {
      // beggin transaction
      $this-&gt;repository-&gt;begginTransaction();

      $messages = array_merge($messages, $this-&gt;storeBase($workout), $this-&gt;storeNames($workout), $this-&gt;storeDescriptions($workout), $this-&gt;storeRounds($workout), $this-&gt;storeTags($workout));

      // commit transaction
      $this-&gt;repository-&gt;commitTransaction();

      return $messages;
  }
</code></pre>

<ul>
<li>Merged the <a href="https://www.php.net/manual/en/function.array-merge.php" rel="nofollow noreferrer"><code>array_merge</code></a> calls into one (pun intended...), as per the documentation, the second parameter can be a list of variables to merge, doesn't have to be one per function call</li>
</ul>

<h2>Miscellaneous</h2>

<ul>
<li>Opinionated but, you seem to have quite a few blank lines within your classes, I would reduce that down</li>
<li><p>In various places you check for <code>null</code> variables in long, drawn out, if statements:</p>

<pre><code>if(!is_null($workout-&gt;getOffset()) &amp;&amp; !is_null($workout-&gt;getLimit()) &amp;&amp; !is_null($workout-&gt;getState())){
    return $this-&gt;workoutService-&gt;getWorkoutList($workout);
}
</code></pre></li>
</ul>

<p>Consider the following:</p>

<pre><code>if (isset($workout-&gt;getOffset(), $workout-&gt;getLimit(), $workout-&gt;getState())) {

}
</code></pre>
    </div>