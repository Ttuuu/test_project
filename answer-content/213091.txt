<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Unnecessary undefined behavior</strong></p>

<p><code>ret = ret * 10 + (*buffer - '0');</code>  incurs signed integer overflow and <em>undefined behavior</em> (UB) when the final return value is expected to be <code>LONG_MIN</code>.</p>

<p>Various alternatives:</p>

<p>Best:<br>
Use <code>ret = ret * 10 - (*buffer - '0');</code> and then at the end negate when the sign was not <code>'-'</code>. This approach is a bit off-putting to read, yet is very well specified.</p>

<p>Good:<br>
Use <code>unsigned long ret</code> as the unsigned complement to <code>long</code> can accommodate <code>-LONG_MIN</code>.  This works for all but the most esoteric platforms.</p>

<p>Fair:<br>
Live with UB.  The UB is <em>usually</em> OK here.</p>

<p><strong>Detect digits by local encoding</strong></p>

<p><code>atoi()</code> works with the compiler encoding of <code>'0'</code> which is not specified to be ASCII.  Code can continue to use something <code>IS_ASCII_DIGIT(c)</code> if the goal is to convert input as if it was ASCII even if on a rare non-ASCII platform.  To be closer to <code>atoi()</code>, test as follows.</p>

<pre><code>// #define IS_ASCII_DIGIT(c) ((c &gt;= 48) &amp;&amp; (c &lt;= 57))
#define IS_DIGIT(c) (isdigit((unsigned char) (c))
// or 
#define IS_DIGIT(c) (((c) &gt;= '0') &amp;&amp; ((c) &lt;= '9'))
</code></pre>
    </div>