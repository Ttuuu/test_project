<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Not more readable with those method names, but in general it is better to split method into more, especially when code is nested like this. I would even go further and split into more than just 2 methods.</p>

<p>But try to name methods so that name clearly says, what method does.</p>

<p>Edit: </p>

<p>Some ideas of what I would change (starting right from <code>_b</code> and <code>_c</code> methods).</p>

<ul>
<li>You probably know, that names should be "camelcase", use no underscores and you added underscore just to quickly separate those.</li>
<li><p>Method is calculating data and printing them. Those are 2 things at once. What if you wanted to use data instead of printing them? what if you wanted to write them to file or return as part of http response? </p>

<ul>
<li>At first I would at least return <code>String</code> instead of printing it. Then you can do more things than just printing it. That would require renaming method as it doesn't print anymore. </li>
<li>That solution is still not ideal, because you are calculating 3 <code>int</code> numbers and instead you are returning <code>String</code>.
Instead you could create immutable class maybe called <code>MaxStringDistance</code> to contain those 3 numbers and instead of returning <code>String</code>, you return something like <code>new MaxStringDistance(first, second, max)</code>. </li>
<li>Now you are missing <code>String</code> representation, that you previously wanted. One way would be to override <code>toString</code> of your new class so that you can then just print that object to get same results as original code or create another method, that will construct the <code>String</code> (I think within that object is best place for it).</li>
<li>You can argue, that method is now "constructing" your <code>MaxStringDistance</code> object. Then it makes sense to put this static method inside <code>MaxStringDistance</code> method as "factory method". Not sure about the name.</li>
<li>Parameter name "s" is short and not very descriptive, try to name variables so that it clearly states what does it contain. It's true, that in this case there's not much to say about it.</li>
</ul>

<p>That is what I'd do regarding refactoring <code>_b</code> method just based on it's name and signature.</p></li>
</ul>

<p>Now let's take a look at <code>_c</code></p>

<ul>
<li>This method is definitely not printing anything, but returning <code>int</code>. This one really needs renaming, probably something like <code>calcualteCharDistance</code></li>
<li>Again single character parameters. I'd at least rename "j" to "position" because it seems like it represents character position in the string (+1 so that's why "position", not "index")</li>
<li>You probably won't be calling this method from anywhere else and can be set it's visibility to <code>private</code>.</li>
</ul>

<p>Somewhat improved code will look like this:</p>

<pre><code>public class MaxStringDistance {
    private final int first;
    private final int second;
    private final int max;

    //possibly private constructor
    public MaxStringDistance(int first, int second, int max) {
        this.first = first;
        this.second = second;
        this.max = max;
    }

    //getters if needed

    @Override
    public String toString() {
        return first + " " + second + " " + max;
    }

    public static MaxStringDistance fromString(String s) {
        int first = 0;
        int second = 0;
        int max = 0;
        for (int i = 0; i &lt; s.length(); i++) {
            int cur = calculateCharDistance(s, s.charAt(i), i + 1);
            if (cur &gt; max) {
                first = i;
                second = i + cur;
                max = cur;
            }
        }
        return new MaxStringDistance(first, second, max);
    }

    private static int calculateCharDistance(String s, char c, int position) {
        for (int i = position; i &lt; s.length(); i++) {
            if (c == s.charAt(i)) {
                return i - (position - 1);
            }
        }
        return 0;
    }

    public static void main(String[] args) {
        String userInput = new Scanner(System.in).nextLine();
        System.out.println(MaxStringDistance.fromString(userInput));
    }
}
</code></pre>
    </div>