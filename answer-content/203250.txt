<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p><strong>Should I make some checks for security or just the dimensions and size checks?</strong></p>
</blockquote>

<p>It would be simple to check the type of the file uploaded. For example, you could check if the type is an image. For example, if the user uploads a PNG file, <code>$_FILES['avatar']['type']</code> should be <code>image/png</code>, so a check for that value starting with <code>image</code> would be a simple conditional (e.g. using <a href="http://php.net/manual/en/function.strpos.php" rel="nofollow noreferrer"><code>strpos()</code></a> and looking for it to return <code>0</code>, or <a href="http://php.net/preg_match" rel="nofollow noreferrer"><code>preg_match('^image/', $_FILES['avatar']['type])</code></a>.</p>

<p>The HTML could also be updated to only accept certain file types. One technique for this is to add the <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-accept" rel="nofollow noreferrer"><code>accept</code></a> attribute to the input element with a value like <code>image/*</code> to limit the selectable files to images. While this does not prevent a user from selecting any file (or modifying a file to <em>look</em> like an image), it can act like a filter to the file selection dialog if the OS and browser support it. Read more about this in answers to <a href="https://stackoverflow.com/q/4328947/1575353"><em>Limit file format when using ?</em></a></p>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-html lang-html prettyprint-override"><code>&lt;input type="file" id="input" name="image" accept="image/*"&gt;</code></pre>
</div>
</div>


<p>One could also add a change handler to check the extension of the file submitted (bear in mind that the user can also change the extension of a file through the OS).</p>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>var allowedExtensions = ['jpg', 'gif', 'bmp', 'png', 'tif'];
document.addEventListener('DOMContentLoaded', function() {
  var fileInput = document.getElementById('input');
  fileInput.addEventListener('change', function(e) {
    var parts = this.value.split('.');
    if (allowedExtensions.indexOf(parts[parts.length - 1].toLowerCase()) &lt; 0) {
      this.value = ''; // clear value
      console.log('invalid extension');
    }
  });
});</code></pre>
<pre class="snippet-code-html lang-html prettyprint-override"><code>&lt;input type="file" id="input" name="image" accept="image/*"&gt;</code></pre>
</div>
</div>


<p>Combining one or both of those approaches with the server-side check would be a good approach. Bearing in mind that a user could alter the HTML attributes with tools like browser consoles, as well as submit a form manually with their own page or a tool like <a href="https://www.getpostman.com/" rel="nofollow noreferrer">Postman</a>, the server-side check should be utilized for optimal protection.</p>

<h1>Other Feedback</h1>

<h2>JavaScript</h2>

<h3>Variable <code>croppable</code></h3>

<p>It apppears that <code>croppable</code> is set to <code>true</code> in the <code>ready</code> function:</p>

<blockquote>
<pre><code>ready: function () {
    croppable = true;
    button.onclick = function () {
</code></pre>
</blockquote>

<p>While it would be <code>undefined</code> before that line, the <code>onclick</code> function wouldn't be set until after that is set to <code>true</code>, so the following block seems superflous in the <code>onclick</code> function:</p>

<blockquote>
<pre><code>if (!croppable) {
    return;
}
</code></pre>
</blockquote>

<p>This is because by the time the click handler is set on the button, that variable will have been set to <code>true</code> so the condition will never evaluate to a truthy value. </p>

<p>I also noticed in that onclick function that three variables (i.e. <code>croppedCanvas</code>, <code>roundedCanvas</code>, and <code>roundedImage</code>) are declared before the conditional <code>return</code>. There isn't really any reason to declare those variables before the condition. Then those variables can be declared whenever assigned.</p>

<h3>Cache DOM references</h3>

<p>DOM lookups aren't exactly cheap, so it may be better to store references to elements fetched via <code>document.getElementById()</code> as well as using the jQuery function in variables and referencing those variables later.</p>

<h3>Use consistent DOM lookups</h3>

<p>Much of the code uses jQuery to look up elements, but then there are other places using <code>document.getElementById()</code>. If you are going to have jQuery, it makes sense to use it for all DOM lookups - for the case of getting a single element (e.g. <code>image</code> and <code>button</code>) <a href="http://api.jquery.com/get/" rel="nofollow noreferrer"><code>.get()</code></a> can be used to access the element.</p>

<p>So these lines:</p>

<blockquote>
<pre><code>var image = document.getElementById('image'),
    button = document.getElementById('button');
</code></pre>
</blockquote>

<p>Can be simplified using jQuery and <code>.get()</code>:</p>

<pre><code>var image = $('#image').get(0),
    button = $('#button').get(0);   
</code></pre>

<h3>Variable name reused</h3>

<p>While moving <code>image</code> and <code>button</code> out of the onload callback I noticed that <code>image</code> was used for an <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/Image" rel="nofollow noreferrer"><code>Image</code></a> object and then inside the callback re-assigned to the element with <em>id</em> attribute <code>image</code>. It is wise not to re-use variables like that... Perhaps a better name for the variable referencing the element would be <code>imageElement</code>.</p>

<h2>PHP</h2>

<p>You state that <code>upload.php</code> contains the following:</p>

<blockquote>
<pre><code>if( isset($_FILES['avatar']) and !$_FILES['avatar']['error'] ){
  file_put_contents( "uploads/image.png", file_get_contents($_FILES['avatar']['tmp_name']) );
}
</code></pre>
</blockquote>

<p>Is there any error handling/response to the client as to to activity on the server? What happens if the write to <code>"uploads/image.png"</code> would fail?</p>
    </div>