<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ol>
<li><p>Abstract cant be instantiated so having a public constructor for them is pretty much useless as they are being created through derived classes and it makes more sense to have a <code>protected</code> constructor instead of a <code>public</code> one</p>

<blockquote>
<pre><code>public abstract class SpecialItem : Item
{
     public virtual int GetSpecialProperty { get; }
     public override string ToString() { return base.ToString() +"\nDamages/ArmorPts/HungryRestorePts: " +  GetSpecialProperty; }
     public SpecialItem(string name, int cost) : base(name, cost) { }
}
</code></pre>
</blockquote>

<p>Can become:</p>

<pre><code>public abstract class SpecialItem : Item
{
    public virtual int GetSpecialProperty { get; }
    public override string ToString() { return base.ToString() + "\nDamages/ArmorPts/HungryRestorePts: " + GetSpecialProperty; }
    protected SpecialItem(string name, int cost) : base(name, cost) { }
}
</code></pre></li>
<li><p>Virtual function without any functionality should rather be marked as abstract.</p>

<blockquote>
<pre><code>public virtual int GetSpecialProperty { get; }
</code></pre>
</blockquote>

<p>Can become:</p>

<pre><code>public abstract int GetSpecialProperty { get; }
</code></pre></li>
<li><p><code>Enviornement.NewLine</code> instead of <code>\n</code></p>

<blockquote>
<pre><code>public override string ToString()
{
    return base.ToString()
        + "\nFire Damages/Resistance: " + Fire
        + "\nWater Damages/Resistance: " + Water
        + "\nEarth Damages/Resistance: " + Earth
        + "\nWind Damages/Resistance: " + Wind;
}
</code></pre>
</blockquote>

<p>With C#6' interpolated strings can become:</p>

<pre><code>    return $"{base.ToString()} {Environment.NewLine} " +
           $"Fire Damages/Resistance:  {Fire} {Environment.NewLine} " +
           $"Water Damages/Resistance:  {Water} {Environment.NewLine} " +
           $"Earth Damages/Resistance:  {Earth} {Environment.NewLine} " +
           $"Wind Damages/Resistance:  {Wind} {Environment.NewLine}";
</code></pre></li>
<li><p>Redundant overriding</p>

<p>You are overriding the <code>ToString()</code> in <code>Armor</code>, <code>Weapon</code>, <code>Food</code> but you are doing nothing but calling the base method, so you can just remove it.</p>

<blockquote>
<pre><code>public override string ToString() { return base.ToString(); }
</code></pre>
</blockquote></li>
<li><p>Readonly properties</p>

<blockquote>
<pre><code>public int HungryRestorePts { get; private set; }
public int ArmorPts { get; private set; }
public int HungryRestorePts { get; private set; }
</code></pre>
</blockquote>

<p>Are rather readonly properties than properties with private sets, you are giving them value only in the constructor anyway with C#6 they can become :</p>

<pre><code>public int HungryRestorePts { get; }
public int ArmorPts { get; }
public int HungryRestorePts { get; }
</code></pre></li>
<li><p>Expression bodied properties </p>

<blockquote>
<pre><code>public override int GetSpecialProperty { get { return Damages; } }
</code></pre>
</blockquote>

<p>If you are using C# 6 it can be shorten to:</p>

<pre><code>public override int GetSpecialProperty =&gt; Damages;
</code></pre></li>
<li><p>Long constructors</p>

<p>Your <code>Armor</code> &amp; <code>Weapon</code> class have too much parameters making the initialization ugly also they seem like a immutable objects, you might want to apply the builder design pattern, you can check my answer on t3chb0t's <a href="https://codereview.stackexchange.com/q/133066/98577">question</a> <a href="https://codereview.stackexchange.com/a/150805/98577">here</a>, which if you configure properly can make your intialization a lot prettier + your objects will be immutable.</p></li>
</ol>

<p><strong>Update</strong></p>

<p>Implementing the builder pattern in your case might be difficult since you have inheritance going on, especially if you want to have a generic item builder. I will show you what I came up with tho I believe it can be made in a better way, for which I have an alternative solution.</p>

<h2>Builder pattern</h2>

<p><strong>Pros</strong></p>

<ol>
<li>Simplifies the creation of the item classes.</li>
<li>Provides full immutability (all of your properties can become get only).</li>
<li>Item properties can be set in any order.</li>
<li>Allows different type of object to be created using the same builder.</li>
</ol>

<p><strong>Cons</strong></p>

<ol>
<li>It will be hard to create good relation or hierarchy between the builders in order to avoid duplicate code (you will see what I mean in a second).</li>
</ol>

<p>Having that in mind I present you my Builder pattern</p>

<pre><code>public class BaseItemBuilder
{
    private string _name;
    private int _cost;

    public BaseItemBuilder WithNameAndCost(string name, int cost)
    {
        _name = name;
        _cost = cost;
        return this;
    }

    public Item Build()
    {
        return new Item(_name, _cost);
    }
}
</code></pre>

<p>Nothing fancy here. Simple builder to create objects of type <code>Item</code>.</p>

<p>Example usage:</p>

<pre><code>BaseItemBuilder baseItemBuilder = new BaseItemBuilder();
Item itemStone = baseItemBuilder
    .WithNameAndCost("Stone", 1)
    .Build();
Item itemPot = baseItemBuilder
    .WithNameAndCost("Red Pot", 2)
    .Build();
</code></pre>

<p>This looks pretty neat, but let's move to the next builder which can help you to create <code>ElementalItems</code>:</p>

<pre><code>public class ElementalItemBuilder
{
    private string _name;
    private int _cost;
    private int _fire;
    private int _water;
    private int _earth;
    private int _wind;
    private int _points;

    public ElementalItemBuilder WithNameAndCost(string name, int cost)
    {
        _name = name;
        _cost = cost;
        return this;
    }

    public ElementalItemBuilder WithFire(int fire)
    {
        _fire = fire;
        return this;
    }

    public ElementalItemBuilder WithWater(int water)
    {
        _water = water;
        return this;
    }

    public ElementalItemBuilder WithEarth(int earth)
    {
        _earth = earth;
        return this;
    }

    public ElementalItemBuilder WithWind(int wind)
    {
        _wind = wind;
        return this;
    }

    public ElementalItemBuilder WithPoints(int points)
    {
        _points = points;
        return this;
    }

    public TItem Build&lt;TItem&gt;() where TItem : ElementalsItem
    {
        return (TItem)Activator.CreateInstance(typeof(TItem), _name, _cost, _points, _fire, _water, _earth, _wind);
    }
}
</code></pre>

<p>Example usage:</p>

<pre><code>ElementalItemBuilder equipementItemBuilder = new ElementalItemBuilder();
Armor helmet = equipementItemBuilder
    .WithNameAndCost("Steel Helmet", 80)
    .WithPoints(30)
    .WithEarth(1)
    .WithFire(2)
    .Build&lt;Armor&gt;();

Weapon weapon = equipementItemBuilder
    .WithNameAndCost("Great Sword", 120)
    .WithPoints(80)
    .Build&lt;Weapon&gt;();

Armor chest = equipementItemBuilder
    .WithNameAndCost("Iron Chest", 200)
    .WithPoints(50)
    .WithEarth(2)
    .WithFire(3)
    .WithWater(4)
    .WithWind(3)
    .Build&lt;Armor&gt;();
</code></pre>

<p>This also looks pretty neat and as you can see the <code>Build()</code> method is generic which allows different types of <code>ElementlsItems</code> to be created with a single builder which was my original idea. The only thing I like about this design is the repetitive code :</p>

<pre><code>public class BaseItemBuilder
{
    private string _name;
    private int _cost;

    public BaseItemBuilder WithNameAndCost(string name, int cost)
    {
        _name = name;
        _cost = cost;
        return this;
    }
}
</code></pre>

<p>And:</p>

<pre><code>public class ElementalItemBuilder
{
    private string _name;
    private int _cost;

    public ElementalItemBuilder WithNameAndCost(string name, int cost)
    {
        _name = name;
        _cost = cost;
        return this;
    }
}
</code></pre>

<p>You can do something along the lines in the <code>BaseItemBuilder</code></p>

<pre><code>protected string _name;
protected int _cost;

public TBuilder WithNameAndCost&lt;TBuilder&gt;(string name, int cost) 
    where TBuilder : BaseItemBuilder
{
    _name = name;
    _cost = cost;
    return (TBuilder)this;
}
</code></pre>

<p>And later inherit the <code>BaseItemBuilder</code> from <code>ElementalItemBuilder</code> which will allow you to remove the duplicate code but you will have to specify the type argument upon invocation like this :</p>

<pre><code>BaseItemBuilder itemBuilder = new BaseItemBuilder();
Item itemStone = itemBuilder
    .WithNameAndCost&lt;BaseItemBuilder&gt;("Stone", 1)
    .Build();

itemBuilder = new ElementalItemBuilder();
Armor helmet = itemBuilder
    .WithNameAndCost&lt;ElementalItemBuilder&gt;("Steel Helmet", 80)
    .WithPoints(30)
    .WithEarth(1)
    .WithFire(2)
    .Build&lt;Armor&gt;();
</code></pre>

<p>Which pretty much solves the problem with the duplicate code.</p>

<h2>Type specific methods</h2>

<p><strong>Pros</strong></p>

<ol>
<li>Simplifies the creation of the item classes.</li>
<li>There is no duplicate code.</li>
<li>Item properties can be set in any order.</li>
<li>You can assign better names to each class' method.</li>
<li>You can have some methods in let's say class <code>Weapon</code> but not in <code>Armor</code> if you want to (you can do that with the builder pattern but it will require more work).</li>
<li>You don't need a constructor at all.</li>
</ol>

<p><strong>Cons</strong></p>

<ol>
<li>Doesn't provide fully immutable objects.</li>
<li>Requires a cast at the end of the expression (the creation of the item) or you will need to make the methods generic but this will require you specify the type argument all the time.</li>
<li>You don't have a constructor.</li>
</ol>

<p>Here is how it works:</p>

<pre><code>public class Item
{
    public string Name { get; private set; }
    public int Cost { get; private set; }

    public override string ToString()
    {
        return "Name: " + Name + "\nCost: " + Cost;
    }

    public TITem WithNameAndCost&lt;TITem&gt;(string name, int cost) where TITem : Item
    {
        Name = name;
        Cost = cost;
        return (TITem)this;
    }
}
</code></pre>

<p>One thing I want you to take a look at here is that there is no constructor at all, where in the builder pattern we still needed the long and ugly constructors in order for the <code>Activator</code> to work.</p>

<p>Example usage:</p>

<pre><code>Item itemStone = new Item()
    .WithNameAndCost&lt;Item&gt;("Stone", 1);

Item itemPot = new Item()
    .WithNameAndCost&lt;Item&gt;("Red Pot", 2);
</code></pre>

<p>Pretty neat and as you can tell it looks quite similar to the builder pattern.</p>

<p>Next up we have the elements class:</p>

<pre><code>public abstract class ElementalsItem : SpecialItem
{
    public int Fire { get; private set; }
    public int Water { get; private set; }
    public int Earth { get; private set; }
    public int Wind { get; private set; }

    public override string ToString()
    {
        return base.ToString()
               + "\nFire Damages/Resistance: " + Fire
               + "\nWater Damages/Resistance: " + Water
               + "\nEarth Damages/Resistance: " + Earth
               + "\nWind Damages/Resistance: " + Wind;
    }

    //you can make those generic to avoid casting
    //but that will require you to specify the
    //type arguments all the time which is not neat.
    public ElementalsItem WithFire(int fire)
    {
        Fire = fire;
        return this;
    }

    public ElementalsItem WithWater(int water)
    {
        Water = water;
        return this;
    }

    public ElementalsItem WithEarth(int earth)
    {
        Earth = earth;
        return this;
    }

    public ElementalsItem WithWind(int wind)
    {
        Wind = wind;
        return this;
    }
}

public class Weapon : ElementalsItem
{
    public int Damages { get; private set; }
    public override int GetSpecialProperty =&gt; Damages;

    public Weapon()
    {

    }

    public Weapon WithDamage(int damagePoints)
    {
        Damages = damagePoints;
        return this;
    }
}

public class Armor : ElementalsItem
{
    public int ArmorPts { get; private set; }

    public override int GetSpecialProperty =&gt; ArmorPts;

    public Armor WithDefense(int defensePoints)
    {
        ArmorPts = defensePoints;
        return this;
    }
}
</code></pre>

<p>Example usage:</p>

<pre><code>Armor helmet = (Armor) new Armor()
    .WithNameAndCost&lt;Armor&gt;("Steel Helmet", 80)
    .WithDefense(30)
    .WithEarth(1)
    .WithFire(2);

//With damage is type specific method so cast is not needed.
Weapon weapon = new Weapon()
    .WithNameAndCost&lt;Weapon&gt;("Great Sword", 120)
    .WithDamage(80);

Armor chest = (Armor) new Armor()
    .WithNameAndCost&lt;Armor&gt;("Iron Chest", 200)
    .WithDefense(50)
    .WithEarth(2)
    .WithFire(3)
    .WithWater(4)
    .WithWind(3);
</code></pre>

<p>Again, this looks really similar to the Builder pattern but in most cases it will require a cast which is not a big deal, but still.</p>

<p>You can pick whatever you like and you can of course adjust something if you don't like it.</p>
    </div>