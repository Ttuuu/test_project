<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You don't show how you actually call <code>TryLoad()</code>. So with that in mind here are some comments:</p>

<blockquote>
<pre><code>public static bool LoadedSuccessfully = true;
public static Exception LoadedWithException = null;

private static bool _isLoaded;
</code></pre>
</blockquote>

<p>What is the difference between <code>LoadedSuccessfully</code> and <code>_isLoaded</code>? The one is initially set to true, while the other is set to false, but they both indicate if the load was successful or not. I think you can remove one of them.</p>

<p>Another issue is that <code>LoadedSuccessfully</code> and <code>LoadedWithException</code> are public settable. If they are of any use - see next comment - I would change them to private settable properties instead.</p>

<p>These three fields have only meaning for the state of the object in the load process, because - as I read <code>OnDialogHostLoaded()</code> - you close the application in a following step in the load process, if loading the settings went wrong. In other words: you probably don't have a running application with <code>GlobalSettings.LoadedSuccessfully = false</code>. I think, I would remove these fields and reconsider the load process so you close the application immediately if <code>TryLoad()</code> fails like:</p>

<pre><code>void OnLoad() // Or what ever you call it
{
  try
  {
    GlobalSettings.Load();
  }
  catch (SettingsLoadingException ex)
  {
    // TODO: log and exit application
    // Maybe fire an event to let the main app notify user via UI
  }
  catch (Exception ex)
  {
    // TODO: log and exit application
    // Maybe fire an event to let the main app notify user via UI
  }
}
</code></pre>

<p>Here <code>TryLoad()</code> is renamed to just <code>Load()</code> because it doesn't return a boolean but only throws on failure:</p>

<pre><code>public static void Load()
{
  lock (Sync)
  {
    try
    {
      var fileExists = File.Exists(SettingsFilePath);

      var deserializer = new XmlSerializer(typeof(GlobalSettingsStorage));
      using (var reader = File.Open(SettingsFilePath, FileMode.OpenOrCreate, FileAccess.ReadWrite, FileShare.ReadWrite))
      {
        GlobalSettingsStorage settings = null;
        if (!fileExists)
        {
          settings = new GlobalSettingsStorage();
          deserializer.Serialize(reader, settings);
        }
        else
        {
          settings = (GlobalSettingsStorage)deserializer.Deserialize(reader);
        }

        _currentLanguage = new CultureInfo(settings.CurrentLanguageShortName);
        _pointsCount = settings.PointsCount;
      }
    }
    catch (InvalidOperationException ex) when (ex.InnerException is XmlException)
    {
      throw new SettingsLoadingException("XML settings file corrupted", ex);
    }
    catch (UnauthorizedAccessException ex)
    {
      throw new SettingsLoadingException("You do not have access to the settings file.", ex);
    }
    catch (Exception ex) when (ex is PathTooLongException || ex is DirectoryNotFoundException || ex is IOException)
    {
      throw new SettingsLoadingException("Failed to load settings file", ex);
    }
    catch (Exception ex)
    {
      throw new SettingsLoadingException("General exception occured", ex);
    }
  }
}
</code></pre>

<p>I've added a general catch clause to catch all unknown exceptions by, so that you can rethrow a <code>SettingsLoadeingException</code> for them as well.</p>

<hr>

<p>I imagine that the reason for having <code>LoadedSuccessfylly</code> is that you postpone handling a possible failure in <code>GlobalSettings.TryLoad()</code> to <code>OnDialogHostLoaded()</code>. IMO you handle the settings failure in the wrong place: what have loading the settings to do with loading the "dialog host"? </p>

<hr>

<p>You only catch specific exceptions. What happens to more general exceptions or special exceptions that don't meet the conditions in your catch clauses?</p>

<hr>

<blockquote>
<pre><code>        GlobalSettingsStorage settings = null;
        if (!fileExists)
        {
          settings = new GlobalSettingsStorage();
          deserializer.Serialize(reader, settings);
        }
        else
</code></pre>
</blockquote>

<p>Why is it necessary to save an empty settings file, if it doesn't exist when trying to load it? You somehow break the single responsibility principle here.</p>
    </div>