<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Line by line:</p>

<pre><code>def leader_step(max):
</code></pre>

<ul>
<li>Type hints (verified using a strict <code>mypy</code> configuration) would be really helpful to understand what this method actually does.</li>
<li>Since the application is called "Leader" that part of the function name is redundant - <code>step</code> should be enough to understand it in the application context.</li>
</ul>

<hr>

<pre><code>i = 0
</code></pre>

<ul>
<li>Usually, <code>i</code> is an index of some sort. But index into what? Is it counting towards <code>max</code>? Basically, I shouldn't have to read the entire function to understand what this variable is used for.</li>
</ul>

<hr>

<pre><code>psps = {0: 0}
</code></pre>

<ul>
<li>Should this be <code>pushups</code>?</li>
<li>I read this as "a pushup with some property (key) "0" has some value "0". This doesn't tell me much. Is this how many pushups I have performed in each set? Something else entirely?</li>
</ul>

<hr>

<pre><code>cnt = {0: 0}
</code></pre>

<ul>
<li>Should this be <code>count</code>? <code>counts</code>? Something else?</li>
<li>Is it incidental that this has the same value as <code>psps</code>? Or are these data structures related in some way?</li>
</ul>

<hr>

<pre><code>k = 1
</code></pre>

<ul>
<li>After going through this and re-reading it, this variable is telling us whether we're incrementing or decrementing another number. You can instead use <code>+= 1</code> and <code>-= 1</code> and remove this variable.</li>
</ul>

<hr>

<pre><code>while max + abs(k) &gt;= psps[i]:
</code></pre>

<ul>
<li>This is checking whether we've reached <code>max</code>, but you should be able to refactor this to something like <code>while pushups &lt;= max_pushups</code>.</li>
</ul>

<hr>

<pre><code>if psps[i] &gt;= max:      # decrease push-ups as they reach max
    k = -k
</code></pre>

<ul>
<li>That's not what this does. You are <em>negating</em> <code>k</code> here, <strike>for still unknown reasons.</strike> which will later result in decreasing another counter.</li>
</ul>

<hr>

<pre><code>i += 1
</code></pre>

<ul>
<li>Why is this incremented here? Especially when you refer to the old value (<code>i - 1</code>) <em>twice</em> below.</li>
</ul>

<hr>

<pre><code>psps[i] = k + psps[i-1]
</code></pre>

<ul>
<li>OK, so you're setting the "current" pushups "key" adding or subtracting <code>k</code> (still unknown) to/from the previous pushups value. At this point it very much looks like <code>psps</code> should be a <code>list</code> rather than a dictionary, since you keep incrementing the index and setting that.</li>
</ul>

<hr>

<pre><code>if psps[i] &lt; 1:         # game stops when you reach 1 push-up
</code></pre>

<ul>
<li>This is <code>True</code> when you've reached <em>zero,</em> not one. Is that a bug or an error in the comment?</li>
</ul>

<hr>

<pre><code>del psps[i]
break
</code></pre>

<ul>
<li>Rather than having to insert and then delete this index, I would refactor so that you <code>break</code> <em>before</em> inserting.</li>
</ul>

<hr>

<pre><code>cnt[i] = cnt[i - 1] + psps[i] # counting the sum of all push-ups
</code></pre>

<ul>
<li>Do you need all the intermediary values?</li>
</ul>

<hr>

<pre><code>del psps[0]
del cnt[0]
</code></pre>

<ul>
<li>So you don't actually want the initial values. If these were lists you could just use a slice like <code>psps[1:]</code> to get everything but the first element.</li>
</ul>

<hr>

<pre><code>return psps.values(), cnt.values()
</code></pre>

<ul>
<li>This reaffirms that both values should be lists, because the keys are thrown away at the end.</li>
</ul>
    </div>