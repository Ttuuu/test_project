<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>variable names</h1>

<p>Personally, I recommend to use the <a href="https://stackoverflow.com/a/27818703/3193776">Hungarian notation</a>.<br>
Don't search for the Hungarian notation or you would find not to use it ;-)<br>
On a serious note, the Hungarian notation is great, but it's overused and that's why you find websites advocating against it. But in GUI, you have the perfect place for it...</p>

<p>I don't exactly use these abbreviations inside the link, but it can give you ideas.<br>
When you use a standard abreviation like this for your names, recognizing the types will be very short and you will read over them if you don't need it. Also, making variable names shorter will make it easier to think about them.</p>

<p>Example, I always use rec for RecyclerView. this means I would change <code>recyclerView_ListOfItems</code> to <code>recListOfItems</code>. Also, I personally remove all the prepositions and change the name in a single noun instead. So I would change <code>ListOfItems</code> to <code>ItemList</code> so <code>recyclerView_ListOfItems</code> would become <code>recItemList</code>.</p>

<ul>
<li>fab -&gt; fabAdd<br>
<em><code>fab</code> doesn't tell you what its purpose. <code>fabAdd</code> does.</em></li>
<li>buttonIncrease -&gt; btnIncrease</li>
<li>editTextAmountOfPeople -&gt; etPeopleAmount<br>
<em>The type doesn't match the name!! either change the type to EditTextView or change <code>et</code> to <code>tv</code></em></li>
<li>btn_increasePeople -&gt; btnIncrease
<em>don't change names in the code and the XML. This can be confusing</em></li>
</ul>

<h1>use temporary variables</h1>

<p>When you use something twice after eachother and it takes some code or it is difficult for the computer (takes long/does work), store it in a temporary variable (A temporary variable is just a variable which lives short so is in a small function block).</p>

<pre><code>btnIncrease.setOnClickListener {
    if(etPeopleAmount.text.toString().toInt() &lt; 10) etPeopleAmount.text = (etPeopleAmount.text.toString().toInt() + 1).toString()
    else (Toast.makeText(this@MainActivity,"10 People Maximum",Toast.LENGTH_SHORT)).show()
}
</code></pre>

<p>when you store the people amount in an int, the code will become easier to read:</p>

<pre><code>btnIncrease.setOnClickListener {
    val peopleAmount = etPeopleAmount.text.toString().toInt()
    if(peopleAmount &lt; 10) etPeopleAmount.text = (peopleAmount + 1).toString()
    else (Toast.makeText(this@MainActivity,"10 People Maximum",Toast.LENGTH_SHORT)).show()
}
</code></pre>

<h1>Item adapter</h1>

<p>quick side-step to Item adapter</p>

<h3>MutableList</h3>

<p>Eveytime you change something in an adapter, you need to call <code>notifyDataSetChanged</code>.<br>
If you ask for a MutableList, the list can be changed so you promise you call the function on a change, which you don't.<br>
It's therefor way better to ask for a <code>List</code>, as a <code>List</code> can't change.<br>
(If you want to change the adapter, add functions which will replace the list and call <code>notifyDataSetChanged</code>)</p>

<h3><a href="https://kotlinlang.org/docs/reference/functions.html#single-expression-functions" rel="nofollow noreferrer">single-expression functions</a></h3>

<p>When the first word in the body of your function is <code>return</code>, you can simplify it.</p>

<pre><code>override fun getItemCount(): Int {
     return items.size
 }
 // can be simplified to
override fun getItemCount(): Int = items.size
//or even to
override fun getItemCount() = items.size
</code></pre>

<h3>onbindViewHolder</h3>

<pre><code>override fun onBindViewHolder(holder: ItemViewHolder, position: Int) {
    when(holder) {
        is ItemViewHolder -&gt; {
            holder?.itemDescription?.text = items.get(position).name
            holder?.itemValue?.text = items.get(position).value.toString()
        }
    }
}
</code></pre>

<p>You know that holder is an ItemViewHolder, as it is the only thing the parameter allows.
So let's remove the second check.</p>

<pre><code>override fun onBindViewHolder(holder: ItemViewHolder, position: Int) {
    holder?.itemDescription?.text = items.get(position).name
    holder?.itemValue?.text = items.get(position).value.toString()
}
</code></pre>

<p>Next holder cannot be null as <code>ItemViewHolder</code> doesn't have a question mark.<br>
This means the questionmark after <code>holder</code> can be removed</p>

<pre><code>override fun onBindViewHolder(holder: ItemViewHolder, position: Int) {
    holder.itemDescription?.text = items.get(position).name
    holder.itemValue?.text = items.get(position).value.toString()
}
</code></pre>

<p>Next, there are some functions that can use symbols instead of text, called <a href="https://kotlinlang.org/docs/reference/operator-overloading.html" rel="nofollow noreferrer">operator overloading</a>. Almost every get in Kotlin can therefor be replaced with [].</p>

<pre><code>override fun onBindViewHolder(holder: ItemViewHolder, position: Int) {
    holder.itemDescription?.text = items[position].name
    holder.itemValue?.text = items[position].value.toString()
}
</code></pre>

<p>Ok, now back to the activity</p>

<h1>Utility functions</h1>

<p>You should create functions for code that you reuse.<br>
After you did the former refactoring you read an <code>Int</code> from a <code>TextView</code> 3 times.<br>
(OK two, but <code>sumValue / peopleAmount</code> gives already a <code>Double</code> as <code>sumvalue</code> is a <code>Double</code> and if one of the values in a devision is a <code>Double</code>, it gives you a <code>Double</code>. change it and you have three).</p>

<pre><code>fun readInt(textview: TextView) : Int {
    textview.text.toString().toInt()
}
</code></pre>

<p>now you can refactor to:</p>

<pre><code>btnIncrease.setOnClickListener {
    val peopleAmount = readInt(etPeopleAmount)
    if(peopleAmount &lt; 10) etPeopleAmount.text = (peopleAmount + 1).toString()
    else (Toast.makeText(this@MainActivity,"10 People Maximum",Toast.LENGTH_SHORT)).show()
}
</code></pre>

<p><strong>extension function</strong><br>
We can improve or function by making it an extension function.<br>
This means that you can create a function for TextView which looks like it is created in the real class.</p>

<pre><code>fun TextView.readInt() : Int {
    //it acts like it's created inside the TextView class, so this refers to TextView
    return this.text.toString().toInt()
}
</code></pre>

<p>As you probably know, you don't have to call <code>this</code>, so the function can be changed to:</p>

<pre><code>fun TextView.readInt() : Int {
    return text.toString().toInt()
}
</code></pre>

<p>or even simpler:</p>

<pre><code>fun TextView.readInt() = text.toString().toInt()
</code></pre>

<p>so the code now becomes:</p>

<pre><code>btnIncrease.setOnClickListener {
    val peopleAmount = etPeopleAmount.readInt()
    if(peopleAmount &lt; 10) etPeopleAmount.text = (peopleAmount + 1).toString()
    else (Toast.makeText(this@MainActivity,"10 People Maximum",Toast.LENGTH_SHORT)).show()
}
</code></pre>

<p>You can now change the <code>Toast.makeText().show()</code> calls into an extension-function <code>shortToast(...)</code>.</p>

<p>I won't check the XML, as I don't find XML-layouts interesting ðŸ˜œ. I use <a href="https://medium.com/@v.souhrada/introduction-to-anko-for-android-part-1-6178d536cbe6" rel="nofollow noreferrer">Anko</a> for this.</p>
    </div>