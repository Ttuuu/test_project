<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First, I like how you have everything spaced out instead of crammed together. I definitely prefer over-spacing to under-spacing. I think though, in a few places it's a little much. For example:</p>

<pre><code>if usr_inp[0] not in dict_pos.keys():

    return False




x = dict_pos[usr_inp[0]]
y = int(usr_inp[1])

return x, y - 1
</code></pre>

<p>At some point, the spacing begins hurting readability. Once a function no longer fits on your screen all at once, you can no longer easily understand it in its entirety from a glance. Within functions, I like to at most have one empty line separating "parts". I also personally like the bodies of blocks to "hug" the "parent" of the block. For example, you have:</p>

<pre><code>if self.attack_like_queen():

    self.clears()

    return self.deck

elif self.move_like_queen():

    self.clears()

    return self.deck
</code></pre>

<p>I would actually get rid of most of that space:</p>

<pre><code>if self.attack_like_queen():
    self.clears()
    return self.deck

elif self.move_like_queen():
    self.clears()
    return self.deck
</code></pre>

<p>I like spacing, but I believe the indentation is enough to make each block distinct, and in this case, each line is simple enough that extra space around each line has little gain.</p>

<hr>

<p>In <code>move_bot</code>, mentioned above, I see a few odd things.</p>

<p>First notice how every block ends in <code>self.clears(); return self.deck</code>. There's no point in duplicating that same code over and over. You also use several <code>if...elif</code>s to do the same thing. Just "connect" the conditions using <code>or</code>. I'd write this closer to:</p>

<pre><code>def move_bot(self):
    self.is_queen_bot()

    can_move = self.can_move()  # No point in needlessly calling this multiple times

    if can_move:
        self.deck[can_move[1][0]][can_move[1][1]] = self.color
        self.deck[can_move[0][0]][can_move[0][1]] = ' '

    if self.attack_like_queen() or self.move_like_queen() or self.can_attack() or can_move:
        self.clears()
        return self.deck
</code></pre>

<p>You could also nest the entire second block inside of the <code>if can_move</code> instead of checking <code>can_move</code> twice. </p>

<p>Major things to note here:</p>

<ul>
<li><p>Instead of calling <code>self.can_move</code> over and over, just call it once and save the result. If that function had any overhead, you're making your program needlessly slow.</p></li>
<li><p>As mentioned before, all the previous separate conditions can be simple made into one longer one using <code>or</code>. This reads much nicer.</p></li>
</ul>

<p>One other thing: the <code>self.is_queen_bot()</code> call at the top seems non-sensical. Why is a predicate (it starts with <code>is_</code> which indicates that it's doing a check) being called, and the result is being ignored? The documentation for the function even says "Function check if checker is a queen". This is very confusing, because your function is <em>not</em> simply doing a check:</p>

<pre><code>if self.color == '●' and cur_check[0] == 7:

    self.queen_list_w.append(cur_check)  # Bam

    return True

elif self.color == '○' and cur_check[0] == 0:

    self.queen_list_b.append(cur_check)  # And bam

    return True
</code></pre>

<p>It's mutating a list! This is incredibly unexpected, and definitely makes your program more difficult to understand. Naming and proper documentation are <em>very</em> important. They're how people unfamiliar with your code can understand what's going on. Neither the name nor the documentation suggests that the function is mutative. What if in the future you forget this yourself (because it isn't obvious), and try to call <code>is_queen_bot</code> to help with some new functionality that you're adding? The hidden side effects will cause unexpected stuff to happen in the background, and you'll need to debug it.</p>

<p>To fix this:</p>

<ul>
<li><p>Change the name to <code>register_queen</code> or something. The function is not returning a checked status to the caller, so it should not start with <code>is</code>.</p></li>
<li><p>Correct the documentation to make it clearer what the intent of the function is.</p></li>
</ul>

<hr>

<p>You're using documentation-based typing. There's a cleaner way to tell the IDE and your users what types a function takes: <a href="https://docs.python.org/3/library/typing.html" rel="nofollow noreferrer">type hints</a>. For example, this function:</p>

<pre><code>def check_position(self, usr_inp):
    """
    Function checks whether coordinates are correct or not
    :param usr_inp: Coordinates
    :return: Coordinates
    :rtype: tuple
    """
</code></pre>

<p>It isn't immediately clear what a "Coordinates" is. Presumably a tuple, but it could be some custom class or <code>NamedTuple</code>. I'd change it though to:</p>

<pre><code>from typing import Tuple

Coordinates = Tuple[int, int]  # Make a type alias that says a "coordinate" is a tuple of two integers

def check_position(self, usr_inp: Coordinates) -&gt; Coordinates:
    """
    Function checks whether coordinates are correct or not
    """
</code></pre>

<p>Much cleaner. And, not only does this allow the IDE to know what a <code>Coordinate</code>, it allows your users to see it to. The less guessing and searching people have to do, the better.</p>

<p>In reality though, these hints are a lie, because your function actually returns <code>False</code> in many cases, and <code>Coordinates</code> in only one. This means it "optionally" returns <code>Coordinates</code>:</p>

<pre><code>from typing import Tuple, Optional

def check_position(self, usr_inp: Coordinates) -&gt; Optional[Coordinates]:
    """
    Function checks whether coordinates are correct or not
    """

    coordinates = self.__coordinates(usr_inp)

    if not coordinates:  # Again, used the saved data here instead
        print('Invalid letter')
        return None  # And return None instead of False to adhere to Optional

    elif coordinates[0] &lt; 0 or coordinates[1] &lt; 0:
        print('Your coordinates is negative1')
        print('Please enter correct coordinate1')
        return None

    elif coordinates[0] &gt; 8 or coordinates[1] &gt; 8:
        print('Your coordinates out from scope2')
        print('Please enter correct coordinate2')
        return None

    else:
        return coordinates  # I put this in an else because I personally prefer that, even if it's implied anyway
</code></pre>

<hr>

<p>In a couple places, you have:</p>

<pre><code>except IndexError:
    pass
</code></pre>

<p>I can not overstate how bad this is. Do not do this. Can you guarantee, with <em>100%</em> certainty, that <em>never</em> in the future will you accidentally typo code in there that will cause an <code>IndexError</code> unintentionally? You will make mistakes at some point, and throwing away exceptions like you are here will make your life miserable (I know, I've been there). I don't think I've ever run into a case where it's appropriate to catch an <code>IndexError</code>. I'm not saying there are no legitimate cases, but they're rare, and I don't believe that this is a good case here.</p>

<p>You appear to be catching them in case a check goes out of bounds off the board. Now, Python preaches an "It's easier to ask forgiveness than permission" ideology, but that doesn't mean that that thinking should be used in every case blindly. I would strongly encourage you do alter this code to first do a check to see the if the index is in bounds, <em>then</em> do the indexing. Indexing errors often appear as bugs, and again, you do not want to silence errors that will help you track down bugs. You'll find that your program will slowly begin acting more broken the more changes you make, but you won't get any errors indicating that anythings wrong. This is an awful place to be in, and I wouldn't wish that on you.</p>

<hr>

<p>Instead of writing <code>'●'</code> and <code>'○'</code> all over the code, I'd save these some in a variable and use the variable instead:</p>

<pre><code>BLACK_PIECE = '●'
WHITE_PIECE = '○'

. . .

if self.color == BLACK_PIECE and checkers[0] == 7:

    self.queen_list.append(checkers)

elif self.color == WHITE_PIECE and checkers[0] == 0:
</code></pre>

<p>Two major reasons:</p>

<ul>
<li><p>First, <code>'●'</code> and <code>'○'</code> are very close to what are known as <a href="https://en.wikipedia.org/wiki/Magic_number_(programming)#Unnamed_numerical_constants" rel="nofollow noreferrer">"Magic Numbers"</a>. No, they aren't numbers, but they're conceptually similar. <code>'●'</code> and <code>'○'</code> in code have little inherent meaning. You may be able to guess what they're for, but it may not be obvious is every context. <code>BLACK_PIECE</code> and <code>WHITE_PIECE</code> however are easy to understand labels that immediately tell the reader what they're for.</p></li>
<li><p>Second, pretend in the future you want to change what the pieces look like. What will be easier? Reassigning <code>BLACK_PIECE</code> and <code>WHITE_PIECE</code> to new characters, or altering every instance of <code>'●'</code> and <code>'○'</code> in your code. The former will definitely be simpler and leave less room for bugs to happen.</p></li>
</ul>

<hr>

<hr>

<p>I'd keep going, but honestly, I just got home from work and my brain's fried.</p>

<p>Good luck!</p>
    </div>