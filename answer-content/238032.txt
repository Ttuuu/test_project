<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Firstly, I think your overall approach is sensible. You work your way through the coin types, from highest to lowest, pulling out as many coins of that type as possible, and passing the remainder to the next stage. So, logically, you're on the right track.</p>

<p>But as you've probably noticed, there's a lot of duplication in your code. You need to think about what you're doing the same for each coin type, and pull that logic into its own function. Which will yield something like the following:</p>

<pre><code>def calculate_coins_of_denomination(change, denom):
    """
    Returns a tuple where the first value is the number of coins of the given denomination,
    and the second is the remainder

    Examples:

    calculate_coins_of_denomination(105, 100) =&gt; (1, 5)
    calculate_coins_of_denomination(100, 25) =&gt; (4, 0)
    """
    num_coins = change // denom
    return (num_coins, change - (num_coins * denom))
</code></pre>

<p>Once you've got this function in place, you can then call it repeatedly with each coin type, passing just the remainder to each successive function call:</p>

<pre><code>(num_dollars, change) = calculate_coins_of_denomination(change, 100)
(num_quarters, change) = calculate_coins_of_denomination(change, 25)
(num_dimes, change) = calculate_coins_of_denomination(change, 10)
(num_nickels, change) = calculate_coins_of_denomination(change, 5)
(num_pennies, change) = calculate_coins_of_denomination(change, 1)
</code></pre>

<p>Now you've got the values for <code>num_dollars</code> etc, it's just a question of printing your output in the desired format.</p>

<p>As a final note, avoid using profanity or insults in code comments, even for little experimental programs like these. The brief satisfaction that it yields does not justify the potential cost in terms of looking unprofessional or developing bad habits.</p>
    </div>