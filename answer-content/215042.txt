<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><a href="https://codereview.stackexchange.com/a/214913/59161">@Peter Taylor</a> is right. It was some strange enumerable/enumerator hybrid so I have turned it into a real <code>IEnumerator&lt;T&gt;</code> of itself because I think is makes it easier to use in various scenarios.</p>

<p>If I now want to have an <code>IEnumerable</code> I can use the new <code>AsEnumerable</code> extension and if I want to have a countdown then I can flip the value with new <code>ValueAsCountdown()</code> extension. The <code>State</code> has become <code>Position</code>.</p>

<p>It hasn't changed much but here's the full code (that I still need to document... later):</p>

<pre><code>public interface IInfiniteCounter : IEnumerator&lt;IInfiniteCounter&gt;
{
    /// &lt;summary&gt;
    /// Gets the min value of the counter.
    /// &lt;/summary&gt;
    int Min { get; }

    /// &lt;summary&gt;
    /// Gets the max exclusive value of the counter.
    /// &lt;/summary&gt;
    int Max { get; }

    /// &lt;summary&gt;
    /// Gets the total length of the counter.
    /// &lt;/summary&gt;
    int Length { get; }

    /// &lt;summary&gt;
    /// Gets the current value of the counter.
    /// &lt;/summary&gt;
    int Value { get; }

    /// &lt;summary&gt;
    /// Gets the relative position of the counter between min and max.
    /// &lt;/summary&gt;
    InfiniteCounterPosition Position { get; }
}

public class InfiniteCounter : IInfiniteCounter
{
    private int _value;

    public InfiniteCounter(int min, int max)
    {
        Min = min;
        Max = max;
        Reset();
    }

    public InfiniteCounter(int max) : this(0, max) { }

    public int Min { get; }

    public int Max { get; }

    public int Length =&gt; Max - Min;

    public int Value =&gt; _value + Min;

    IInfiniteCounter IEnumerator&lt;IInfiniteCounter&gt;.Current =&gt; this;

    object IEnumerator.Current =&gt; this;

    public InfiniteCounterPosition Position =&gt;
        _value == 0
            ? InfiniteCounterPosition.First
            : _value == Length - 1
                ? InfiniteCounterPosition.Last
                : InfiniteCounterPosition.Intermediate;

    public bool MoveNext()
    {
        if (Position == InfiniteCounterPosition.Last)
        {
            Reset();
        }

        _value++;

        return true;
    }

    public void Reset()
    {
        _value = -1;
    }

    public void Dispose()
    {
        // There is nothing to dispose.
    }
}

public static class IndexMath
{
    public static int Flip(this int value, int min, int max)
    {
        return (-(value - max + 1) % (max - min)) + min;
    }
}

public static class InfiniteCounterExtensions
{
    public static IEnumerable&lt;IInfiniteCounter&gt; AsEnumerable(this IEnumerator&lt;IInfiniteCounter&gt; counter)
    {
        while (counter.MoveNext())
        {
            yield return counter.Current;
        }
    }

    public static int ValueAsCountdown(this IInfiniteCounter counter)
    {
        return counter.Value.Flip(counter.Min, counter.Max);
    }
}

public enum InfiniteCounterPosition
{
    First,
    Intermediate,
    Last,
}
</code></pre>
    </div>