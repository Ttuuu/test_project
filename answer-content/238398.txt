<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Lines like <code>False -&gt; False</code> indicate that there is a better way.</p>

<pre><code>helper :: Int -&gt; [[Int]] -&gt; Bool
helper v [] = True
helper v xss = let (a, b) = splitAt v xss 
  in verify a &amp;&amp; length a `mod` v == 0 -- length a &lt;= v, so why not just length a == v?
  &amp;&amp; helper v (removeHead a [] ++ b)

removeHead :: [[Int]] -&gt; [[Int]] -&gt; [[Int]]
removeHead [] acc = acc
removeHead (x:xss) acc = removeHead xss
  $ acc ++ [tail x | not $ null $ tail x]
</code></pre>

<p>Left folds like <code>removeHead</code> can often be turned into right folds:</p>

<pre><code>removeHead :: [[Int]] -&gt; [[Int]]
removeHead [] = []
removeHead (x:xss) = [tail x | not $ null $ tail x] ++ removeHead xss
</code></pre>

<p><code>removeHead</code> needs no explicit recursion. <code>Data.List.NonEmpty</code> lets us avoid partial functions (and giving verify a name :) ).</p>

<pre><code>import Data.List.NonEmpty

solve :: Int -&gt; [Int] -&gt; Bool
solve v = helper v . NE.group . sort

helper :: Int -&gt; [NE.NonEmpty Int] -&gt; Bool
helper v [] = True
helper v xss =
  let (a, b) = splitAt v xss
      (straight, a') = unzip $ map NE.uncons a
  in all (==1) (zipWith subtract straight (tail straight))
  &amp;&amp; length a == v
  &amp;&amp; helper v (catMaybes a' ++ b)
</code></pre>
    </div>