<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Questions</h1>

<blockquote>
  <p>Is the factory function approach sound?</p>
</blockquote>

<p>Yes it is by far the best for objects that will have more than one long lived instance. Not so good for many short lived instances in which case use prototyped factory to reduce instantiation overheads, but lose some flexibility when protecting state.
For single instance object use a singleton.</p>

<h2>Freeze</h2>

<p>For added state safety freeze the returned object so that it can not have its state mutated</p>

<pre><code>return Object.freeze({add, remove, getFirst, getSize});
</code></pre>

<h2>Internal reference</h2>

<p>It is often the case that you need to reference the factory object from within the factory function. We can think of the factory functions closure as the object state and the returned object as the interface.</p>

<p>Because in JS the token <code>this</code> is unsafe we need to create a safe reference to the returned object that can be used from within the factory.</p>

<p>What that name is, is up to you, I would personally have called it <code>interface</code> however that is a reserved token in JS so I have taken to standardize the returned object name to <code>API</code> which works well and replaces the <code>this</code> token with the visually easier capitalized name.</p>

<p>Thus you can use the following (see below for details on getters)</p>

<pre><code>const API = Object.freeze({
    add, remove,
    get first() { return  values[1] },
    get size() { return values.length - 1 },
});

return API;
</code></pre>

<p>Then from within the factory you can acess the interface as follows</p>

<pre><code>// you had
if (getSize() &gt; 0) {
// becomes
if (API.size &gt; 0) {
</code></pre>

<hr>

<h2>Q2</h2>

<blockquote>
  <p>Are there any JavaScript best practices that I've violated or ignored?</p>
</blockquote>

<ul>
<li>Use const for variables that do not change.</li>
<li>Use object shorthand property notation. See below</li>
<li>Reduce GC overhead and by using preallocation and result object as optional argument. See below</li>
<li>Hoist var declarations to the top of the function.</li>
<li>Don't use line seperated declarations.  See below</li>
<li>Use getters and setters to simplify the interface.</li>
<li>Protect state and freeze the returned factory object.</li>
<li><code>null</code> is to be avoided. <code>undefined</code> is better. Ignoring the DOM <code>null</code> is seldom used in JS and represents a defined placeholder.</li>
<li>Use shorter function form that is arrow functions.</li>
<li>The JS author's regret was to tokenize <code>function</code> rather than <code>func</code> which spurred the push and adoption of arrow functions. Use common abbreviations when possible, less to read is quicker to read and easier to comprehend. Source code is not an english literature dissertation, you don't need to double space for examiners notes.</li>
<li>JS has one number type (double AKA 64 bit floating point), however almost all implementations have a variety of under the hood number types. Signed 32 integer is the fastest and can be forced by using any of the bitwise operators. If working with known integer types (eg indices) use bitwise operations to ensure internal number type is <code>int32</code></li>
<li>Don't add inferable names to variable names. You had <code>function getParentIndex(childIndex) { return Math.floor(childIndex / 2); }</code> is just as effective as <code>const parentIdx = idx =&gt; idx &gt;&gt; 1;</code> and makes one wonder why you need a function to perform a single operator?</li>
</ul>

<hr>

<h1>Q3</h1>

<blockquote>
  <p>Is my implementation flawed in any way?</p>
</blockquote>

<p>Not if the user of it is careful. </p>

<p>I do know that you can implement it without the need for the first item in the heap without adding complexity.</p>

<p>You do need to prevent your code from creating invalid states. Such as if you add a string as a number <code>heap.add("1")</code> your determination as to which is greater will false eg <code>"11" &gt; "2"</code> evaluates to false. To prevent that from happening you need to convert added values to Number type. (see rewrite) </p>

<p>Also you do not want to accept values that are not numbers. You can throw a range error or ignore such values.</p>

<p>You do not protect against removing more than available and thus you can mutate the state to unusable. You should first check if there is anything to remove before doing so (see rewrite)</p>

<hr>

<h2>More info on above notes</h2>

<h3>Line separated declarations</h3>

<p>Bad</p>

<pre><code>var valueIndex,
    parentIndex,
    parentValue;
</code></pre>

<p>Better        </p>

<pre><code>var valueIndex;
var parentIndex;
var parentValue;
</code></pre>

<p>Best    </p>

<pre><code>var valueIndex, parentIndex, parentValue;
</code></pre>

<h3>Shorthand property notation</h3>

<p>Shorthand notation reduces the source code size, and thus is a major player in reducing to occurance of bugs.</p>

<p>eg creating an object from defined variables</p>

<pre><code>var foo = someVal();
var bar = someOtherVal();

// old school ES notation
var obj = {foo : foo, bar : bar};

// ES6 + shorthand property notation
var obj = {foo, bar};
</code></pre>

<p>When you return the factory object    </p>

<pre><code>return {
    add: add,
    remove: remove,
    getFirst: getFirst,
    getSize: getSize,
};
</code></pre>

<p>You can return using shorthand     </p>

<pre><code>return {add, remove, getFirst, getSize};
</code></pre>

<h3>Memory smart functions.</h3>

<p>Memory smart functions aim to reduce the overhead that GC (Garbage collection) incurs by reducing needless memory allocations. It also has an additional benefit as it reduces the allocation and creation overheads associated with new objects and or arrays.</p>

<p>For example the function...</p>

<pre><code>function getChildIndices(parentIndex) {
    var leftChild = parentIndex * 2;

    return {
      leftChild: leftChild,
      rightChild: leftChild + 1,
    };
}
</code></pre>

<p>...creates and returns a new object each time it is called. You ate just interested in the 2 64bit numbers (if ints then 32bit numbers), but an object requires much more than 2 64bit values, and it need to invoke memory management, and when done with the object it is added to the GC workload.</p>

<p>You call it as follows</p>

<pre><code>  var childIndices = getChildIndices(lastValueIndex);  // creates new object
  var smallestNode = getSmallestNode(childIndices.leftChild, childIndices.rightChild);

  while (lastValue &gt; smallestNode.value) {
      swap(lastValueIndex, smallestNode.index);
      lastValueIndex = smallestNode.index;

      var childIndices = getChildIndices(lastValueIndex); // Creates it again each iteration
      smallestNode = getSmallestNode(childIndices.leftChild, childIndices.rightChild);
  }
</code></pre>

<p>The function can be changed to be able to remove that overhead using the following pattern</p>

<pre><code>function getChildIndices(parentIndex, result = {}) {  // result is the returning object. If not passed it is created
    var leftChild = parentIndex * 2;
    result.leftChild = leftChild;
    result.rightChild = leftChild + 1;
    return result;
}
</code></pre>

<p>Then your calling function uses it as follows    </p>

<pre><code>  const childIndices = getChildIndices(lastValueIndex);  // creates new object as default parameter
  var smallestNode = getSmallestNode(childIndices.leftChild, childIndices.rightChild);

  while (lastValue &gt; smallestNode.value) {
      swap(lastValueIndex, smallestNode.index);
      lastValueIndex = smallestNode.index;

      getChildIndices(lastValueIndex, childIndices); // reuses the object, saving time, memory and GC overhead
      smallestNode = getSmallestNode(childIndices.leftChild, childIndices.rightChild);
  }
</code></pre>

<h3>Read only properties using getters</h3>

<p>You have the following functions that are equivalent to getters (hint they have get at the start of the name)</p>

<pre><code>function getFirst() {
    return values[1];
}

function getSize() {
    return values.length - 1;
}

return {
    add: add,
    remove: remove,
    getFirst: getFirst,
    getSize: getSize,
};
</code></pre>

<p>Should be defined as getters    </p>

<pre><code>return Object.freeze({
    add, remove,
    get first() { return  values[1] },
    get size() { return values.length - 1 },
});
</code></pre>

<h2>A rewrite</h2>

<p>I have added some additional state protection to the interface. Done some renaming, and reduced memory management overheads. The whole thing is now 50 lines that easily fits a display meaning the whole function can be understood without any device interaction</p>

<pre><code>const MinHeap = () =&gt; {
    const heap = [undefined];
    const childIdxs = (idx, res = {}) =&gt; (res.right = (res.left = idx &lt;&lt; 1) + 1, res);
    const swap = (idxA, idxB) =&gt; {
        const temp = heap[idxA];
        heap[idxA] = heap[idxB];
        heap[idxB] = temp;
    }
    const smallestNode = (idxs, res = {}) =&gt; {
        res.idx = heap[idxs.left] &gt; heap[idxs.right] ? idxs.right : idxs.left;
        res.val = heap[res.idx];
        return res;
    }
    const API = Object.freeze({
        add(val) {
            if (isNaN(val)) { throw new RangeError("Can only add numeric values") }
            var idx, parentIdx, parentVal;
            heap.push(Number(val));
            idx = API.size;
            parentIdx = idx &gt;&gt; 1;
            parentVal = heap[parentIdx];
            while (parentVal &gt; val &amp;&amp; parentIdx &gt;= 1) {
                swap(parentIdx, idx);
                parentIdx = (idx = parentIdx) &gt;&gt; 1;
                parentVal = heap[parentIdx];
            }
        },
        remove() { // returns undefined if heap is empty
            if (API.size) {
                let lastVal = heap.pop();
                const first = heap[1];
                if (API.size &gt; 0) {
                    let lastIdx = 1;
                    const indices = childIdxs(lastIdx);
                    const smallest = smallestNode(indices);
                    heap[1] = lastVal;
                    while (lastVal &gt; smallest.val) {
                        swap(lastIdx, smallest.idx);
                        lastIdx = smallest.idx;
                        smallestNode(childIdxs(lastIdx, indices), smallest);
                    }
                }
                return first;
            }
        },
        get first() { return heap[1] },
        get size() { return heap.length - 1 },
    });
    return API;
}
</code></pre>
    </div>