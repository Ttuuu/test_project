<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You have a logical bug in the code. Imagine all jobs are finished and then shutdown is called. You'll never leave the <code>notifier.wait(...)</code>. </p>

<p>Also, if a job exists but shutdown is called you quit instantly without doing it - I do not think that this is a good idea. I think you should finish all jobs prior to quitting. Make a special hard reset routine for the immediate exit. Though, it probably requires usage of exceptions.</p>

<p>Also, consider what will happen if an exception is called inside the function <code>f</code>. In the thread pool one of the threads will die and kill the whole program - most likely. It is not good. It should somehow forward the error to the caller. To this end I have thread pool functionality divided - made a supplementary class for user that wraps whatever additional functionality is needed.</p>

<p>Technical issues:</p>

<ol>
<li><p><code>std::bind(f, args...)</code> should be <code>std::bind(f, std::forward&lt;Args&gt;(args)...)</code> to ensure perfect forwarding as otherwise you might end up with unnecessary copying of data.</p></li>
<li><p><code>numThreads</code> should be defaulted to <code>std::thread::hardware_concurrency</code> and I believe and <code>uint8_t</code> is getting too small for some of the latest processors. Additionally the ThreadPool should have the functionality to tell to its user how many threads it has.</p></li>
<li><p>I am not too fond of <code>std::future</code> - it is somewhat incomplete as Executors TS is still incomplete. Normally I'd expect that user would want to call the <code>push</code> task several times to complete a single operation. In which, case you generate multiple <code>std::future&lt;void&gt;</code>. It would be better to somehow to make it into a single wait instead of several. But I think I might be nitpicking - honestly I'd wait for Executor TS near completion and try to implement or get from somewhere something with the same interface as long as Executor TS is unavailable.</p></li>
<li><p>The declarations </p>

<pre><code>ThreadPool(const ThreadPool&amp; other) = delete; 
void operator=(const ThreadPool&amp; other) = delete;
</code></pre></li>
</ol>

<p>are redundant as the class already has a <code>std::mutex</code> that makes the whole class non-copyable and non-movable. Yeah, it isn't important.</p>
    </div>