<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>A delegate can be seen as method signature contract. You can define what sort of methods are you willing to work with. For example</p>

<ul>
<li>The method should accept type <code>x</code>, type <code>y</code> and type <code>z</code> as parameters</li>
<li>and should return with type <code>w</code></li>
</ul>

<p>Any method, which satisfy this contract, is a valid method from the delegate perspective.  </p>

<hr>

<pre><code>public delegate TType CreateObjectDelegate();
</code></pre>

<p>This delegate says that any method that has no parameter and will return with TType is a good one.</p>

<p>You can describe the same by using the <code>Func</code> class:</p>

<pre><code>Func&lt;TType&gt; CreateObjectDelegate
</code></pre>

<p>Whenever you want to call the <code>Register</code> method you just have to pass a method which satisfies this contract. For example (let's suppose <code>TType</code> is <code>int</code>):</p>

<pre><code>cacheProvider.Register("MyChild1Cache", () =&gt; 0);

Func&lt;int&gt; alternative1 = () =&gt; 1;
cacheProvider.Register("MyChild2Cache", alternative1.Invoke);

Func&lt;int, Func&lt;int&gt;&gt; alternative2 = i =&gt; () =&gt; i;
cacheProvider.Register("MyChild3Cache", alternative2.Invoke(2).Invoke);
</code></pre>
    </div>