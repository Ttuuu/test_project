<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>So I figured it out... mostly. What I had for my API was correct. I ended up just building the sum and average for stats by year in the angular controller and filter in ng-repeat html tag.</p>

<p>All of the above remains in place and returns stats per player/game, just like the image I posted in the original post. Then in my stat controller I added the following:</p>

<pre><code>$scope.getStatSum = function(stats, property) {
    return stats
    .map(function(x) { return x[property]; })
    .reduce(function(a, b) { return a + b; });
  };

$scope.getStatAverage = function(stats, property) {
    var originalLength = stats.length;
    return $scope.getStatSum(stats, property) / originalLength;
};
</code></pre>

<p>These two functions sum or average a property in a list of json data. stats is the list, and property is the string name of the property. To use these functions I need to have a json result list that has already been grouped by an attribute. In my case I need all the stats, normally individual to a player/game relationship, to be grouped by the game.team.year. My html that calls these functions looks like this:</p>

<pre><code>  &lt;tbody&gt;
      &lt;tr ng-repeat="(key, value) in displayedCollection  | groupBy: 'game.team.display_name'"&gt;
        &lt;td&gt;{{ key}} &lt;/td&gt;
        &lt;td&gt;{{ getStatSum(value, 'plate_apperences') }} &lt;/td&gt;
        &lt;td&gt;{{ getStatSum(value, 'at_bats') }} &lt;/td&gt;
        &lt;td&gt;{{ getStatSum(value, 'runs') }} &lt;/td&gt;
        &lt;td&gt;{{ getStatSum(value, 'hits') }} &lt;/td&gt;
        &lt;td&gt;{{ getStatSum(value, 'singles') }} &lt;/td&gt;
        &lt;td&gt;{{ getStatSum(value, 'doubles') }} &lt;/td&gt;
        &lt;td&gt;{{ getStatSum(value, 'triples') }} &lt;/td&gt;
        &lt;td&gt;{{ getStatSum(value, 'home_runs') }} &lt;/td&gt;
        &lt;td&gt;{{ getStatSum(value, 'runs_batted_in') }} &lt;/td&gt;
        &lt;td&gt;{{ getStatSum(value, 'walks') }} &lt;/td&gt;
        &lt;td&gt;{{ getStatSum(value, 'sacrifice_flies') }} &lt;/td&gt;
        &lt;td&gt;{{ getStatSum(value, 'fielders_choice') }} &lt;/td&gt;
        &lt;td&gt;{{ getStatSum(value, 'reached_base_on_error') }} &lt;/td&gt;
        &lt;td&gt;{{ getStatSum(value, 'total_bases') }} &lt;/td&gt;
        &lt;td&gt;{{ getStatSum(value, 'runs_created') }} &lt;/td&gt;
        &lt;td&gt;{{ getStatAverage(value, 'batting_average') | number: 3 }} &lt;/td&gt;
        &lt;td&gt;{{ getStatAverage(value, 'on_base_percentage') | number: 3 }} &lt;/td&gt;
        &lt;td&gt;{{ getStatAverage(value, 'slugging_percentage') | number: 3 }} &lt;/td&gt;
        &lt;td&gt;{{ getStatAverage(value, 'total_base_percentage') | number: 3 }} &lt;/td&gt;

      &lt;/tr&gt;
    &lt;/tbody&gt;
</code></pre>

<p>For my player stats by year this will now return something like this:</p>

<p><a href="https://i.stack.imgur.com/BGMj6.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/BGMj6.png" alt="enter image description here"></a></p>

<p>The only thing I have left to figure out is why some of the decimal values don't calculate. BA, OBP, SLG, and TBP will sometimes return as 0.000, or NAN. They shouldn't. I will get this worked out, but my original question on how to manipulate the API to return sorted results has been answered... do it on the front end!</p>
    </div>