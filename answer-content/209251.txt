<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First step is to look at the repeated code then copy an single into a method.
In this case a could method name would seem to be <code>CreateDataTable</code>.</p>

<p>What are the commonalities?</p>

<ul>
<li>A <code>ComboBox</code> that has checked items.</li>
<li>Get an <code>IQueryable</code> or <code>IEnumerable</code> depending on which is returned by the where clause</li>
<li>Creates a list of the text value from each checked item</li>
<li>Creates a <code>DataTable</code> using <code>ToStringDataTable(parameters</code></li>
</ul>

<p>Since the type in and type out is all the same, this makes it much easier to refactor out into a method. The question then is what input and what output?</p>

<p>Input = <code>ComboBox</code>, output = `DataTable'. This give the method signature needed:</p>

<pre><code>DataTable CreateDataTable(ComboBox cbo) {
}
</code></pre>

<p>Now put in those lines that are repeated and change the <code>*Status</code> to <code>cbo</code> and instead of assigning the <code>DataTable</code> just <code>return</code> the result of <code>ToStringDataTable(parameters)</code>.</p>

<pre><code>DataTable CreateDataTable(ComboBox cbo) {

    var checkedItems = cbo.CheckBoxItems.Where(x =&gt; x.Checked);
    List&lt;string&gt; parameterList = new List&lt;string&gt;();
    foreach (var i in checkedItms) {
        parameter.Add(i.Text);
    }

    return ToStringDataTable(parameters);
}
</code></pre>

<p>Now clean up the original method:</p>

<pre><code>public class Refactor {
  private void BtnLoadReport_Click(object sender, EventArgs e)
    {
        var db = new SQLDataMgr();

        var designStatusParameters = CreateDataTable(cboDesignStatus);
        var shopStatusParameters = CreateDataTable(cboShopStatus);
        var customerTypeParameters = CreateDataTable(cboCustomerType);
        var customerParameters = CreateDataTable(cboCustomer);
        var resellerParameters = CreateDataTable(cboReseller);
        var stateParameters = CreateDataTable(cboState);
        var projectManagerParameters = CreateDataTable(cboProjectManager);
        var salesRepresentativeParameters = CreateDataTable(cboSalesRepresentative);
        //Rest of the method
    }   
}
</code></pre>

<p>This could be further improved by using some additional LINQ chains if the items returned by the where clause supports them.</p>

<p>Example:</p>

<pre><code>List&lt;String&gt; parameters = cbo.CheckBoxItems.Where(x =&gt; x.Checked).Select(x =&gt; x.Text).ToList();
</code></pre>

<p>which would simplifying the method even further:</p>

<pre><code>DataTable CreateDataTable(ComboBox cbo) {

    List&lt;string&gt; parameterList = List&lt;String&gt; parameters = cbo.CheckBoxItems.Where(x =&gt; x.Checked).Select(x =&gt; x.Text).ToList();

    return ToStringDataTable(parameters);
}
</code></pre>
    </div>