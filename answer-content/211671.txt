<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I have a general rule: if I see string concatenation with a loop I assume it's not the best way of doing it. Let's look at this:</p>

<pre><code>foreach (Location exit in Exits)
{
    description += $"— {exit.Name}";
    if (exit != Exits[Exits.Length - 1])
    {
        description += "\r\n";
    }
}
</code></pre>

<p>I see this pattern a lot. What you need is <code>Select</code> with <code>string.Join</code>:</p>

<pre><code>var exitList = string.Join(Environment.NewLine, Exits.Select(exit =&gt; $"— {exit.Name}"));
</code></pre>

<p>I've used <code>Environment.NewLine</code> because I like using well-named constants. Random aside: <code>\r</code> is a Carriage Return and <code>\n</code> is a Line Feed. The terminology comes from physical printers. Another reason I prefer <code>Environment.NewLine</code> is that it means you don't have to know and remember that.</p>

<p><strong>Edit</strong></p>

<p>A comment notes that <code>Environment.NewLine</code> is different on Windows vs Linux/Unix. I think that's important to know and I really should have mentioned it the first time. As the comment exchange shows, it's really easy to get platforms and line-endings mixed up which I think illustrates the usefulness of the constant.</p>

<hr>

<p>The <code>Name</code> property of <code>Location</code> is only set in the constructor. You can use a read-only auto property instead of a private set one:</p>

<pre><code>public string Name { get; }
</code></pre>

<hr>

<p><code>Outside.Description</code> could be using string interpolation like the other Description properties.</p>

<hr>

<p>You're missing your access modifiers on your class declarations. MS guidelines state that they should always be specified.</p>

<hr>

<p>I'm not aware of a convention for it but <code>override public string</code> seems to be an odd order to me. I would expect the access modifier first: <code>public override string</code>. The main thing is to keep that consistent though.</p>
    </div>