<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This code is already quite good, just some pointers:</p>

<ul>
<li>You can use <code>addEventListener</code> for <code>onload</code> as well</li>
<li>You can put the Fade in code after your <code>var</code>, then you can re-use <code>body</code> instead of <code>document.querySelector('body')</code></li>
<li>Your indentation is huge, I would advise 4 or even 2 spaces, give that a shot</li>
<li>it would probably be better to randomize <code>numsToAssign</code> and then do a simple loop to assign <code>button[x]</code> the value of <code>numstoAssign[x]</code></li>
<li>Not a big fan of mixing <code>let</code> and <code>var</code>, if you are using <code>var</code> then you should that declare on the top of the block/scope to reflect what is happening from a hoisting perspective</li>
<li><p>Probably you could make a helper function that addresses 1 tile, and then call it twice</p>

<pre><code>            firstClickedTile.classList.add('matched');
            secondClickedTile.classList.add('matched');

            firstClickedTile.removeEventListener('click', matching);
            secondClickedTile.removeEventListener('click', matching);

            firstClickedTile.firstChild.style.filter = 'blur(0px)';
            secondClickedTile.firstChild.style.filter = 'blur(0px)';
</code></pre></li>
<li>I still don't understand why you need to remove all the listeners in <code>tilesClickDelayAndWinCheck</code></li>
</ul>

<p>The bigger take away is that for the next level, you should read up on Model View Controller, and try to write your game using that approach.</p>

<p>Also, as an exercise, a player should be able to play this game more than once. Which means you will need to be a bit more careful with state (you cannot keep adding <code>&lt;div id="winScreen"&gt;&lt;/div&gt;</code> every time the player wins.</p>
    </div>