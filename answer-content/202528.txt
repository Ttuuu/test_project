<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First of all, I've seen much worse programs from "professionals". So take my following hints as suggestions for improvement and not at all as criticism.</p>

<h2>Object-oriented thinking</h2>

<p>I'd introduce another class, <code>Guess</code>, consisting of the six numbers the user guessed, and give it a method <code>public static Guess fromConsole() { ... }</code>, responsible for doing the console dialogue, checking for validity and returning a valid <code>Guess</code>.</p>

<p>A minor suggestion : rename the <code>Lottery</code> class to <code>LotteryDraw</code>, as one instance doesn't represent a whole weekly lottery, but a single lottery draw (but as English isn't my native language, maybe my understanding of the word "lottery" is wrong...).</p>

<h2>Usage of the Java library</h2>

<p>You're already doing a good thing: you're declaring your fields and variables with a rather generic interface, e.g. <code>List</code>, and only create the instance with the implementation you want (<code>ArrayList</code>).</p>

<p>But you can make things much simpler by using the <code>Set</code> instead of the <code>List</code> interface. A <code>Set</code> doesn't contain a single element more than once, and it doesn't care about the insertion order. These features perfectly fit both the draw and the guess, and if you use a sorted set (interface <code>SortedSet</code>, implementation e.g. <code>TreeSet</code>), the numbers come out in the neat ascending order that you needed to create with the <code>Collections.sort()</code> call. And the comparison becomes a trivial one-liner:</p>

<pre><code>new TreeSet&lt;&gt;(draw).retainAll(guess).size();
</code></pre>

<p><code>a.retainAll(b)</code> removes from <code>a</code> all the elements not contained in <code>b</code>, so effectively computes the intersection (but modifies <code>a</code>, so it's a good idea to make a copy beforehand, what I did with <code>new TreeSet&lt;&gt;(draw)</code>). And then what remains is just returning the size of the result.</p>

<p>Creating the draw also becomes very easy:</p>

<pre><code>public void renewDraw() {
    draw = new TreeSet&lt;&gt;();
    while (draw.size() &lt; 6) {
        Integer number = new Integer(random.nextInt(49) + 1);
        // if number is already there, nothing happens.
        draw.add(number);
    }
}
</code></pre>

<h2>I/O instructions</h2>

<p>You already placed the I/O mostly into two methods, <code>guessNumbers()</code> and <code>printScore()</code>, so that's ok.</p>

<p>What I don't like, is the <code>checkInput()</code> method. It mixes business logic (numbers mustn't appear twice) with user output. Why is that bad? If you later want to give your game a fancy graphical user interface with e.g. Swing or SWT or publish it as a web service, you want to keep the business logic, but replace the console I/O, and that will be easier if they are separated rigorously. So you could e.g. have the <code>checkInput()</code> method return the information string in case of invalid data or <code>null</code> if everything is ok. Then another method (probably <code>guessNumbers()</code>) will only be responsible for presenting that to the console I/O.</p>

<h2>Local variables vs. method arguments vs. instance fields</h2>

<p>You declare nearly everything as instance fields. I typically use instance fields only for things that are needed to persist between calls of top-level methods, and describe a valid state of the instance.</p>

<p>E.g. <code>guessedNumber</code> is only used inside the <code>guessNumbers()</code> method and for communication into the <code>checkInput()</code> method. I'd make it a local variable inside the loop of <code>guessNumbers()</code>, and pass it to the <code>checkInput()</code> method as a parameter.</p>

<p>Another thing: when getting input from the user, you immediately put it into the instance field <code>guess</code>, so temporarily the instance has a <code>guess</code> filled with less than six numbers, something I'd not call a valid instance state. I'd instead use a local variable <code>inputGuess</code> inside the <code>guessNumbers()</code> method, and only assign the instance field when the input has been completed and validated. And by the way, as you don't clear the <code>guess</code> field at the beginning of the input, calling <code>play()</code> twice will not work as expected (not accept an input at all, or add another six numbers, depending on the implementation details). Using a local variable will avoid that problem. As a consequence, you'll then have to pass that local var to the <code>checkInput()</code> method as well: <code>private String checkInput(int guessedNumber, Set&lt;Integer&gt; guessSoFar) { ... }</code>.</p>

<h2>Summary</h2>

<p>This program isn't bad, but maybe I was able to show you a few aspects worth considering for improvement. It's based on my personal style that I developed in 20 years of Java experience.</p>
    </div>