<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I think this is what, in rugby, they would call a 'hospital pass'.</p>

<p>As someone who has fixed much code like this, I am going to hit some highlights only. If you manage to fix these highlights, I would love to see the revised code in another question for the second round. Because the job you have undertaken will take many passes to get right (but it will be worth it).</p>

<h2>Set yourself up for success</h2>

<blockquote>
  <p><em>[…] but the original author wants me to keep the select [...]</em></p>
</blockquote>

<p>If you are fixing and maintaining the code, then it must be written in a way that makes it easy for <strong><em>you</em></strong> to maintain. If you are fixing this and someone else must maintain it, then be that nice coder and make it easy for them to maintain. However, moving the user to view particular cells in a work process is a user requirement that you should keep in mind.</p>

<p><strong><code>Option Explicit</code></strong> at the top of every module. Just a reminder - you might already have it there.</p>

<p>Use <strong>Named Ranges</strong> in the sheets. It will make future maintenance so much easier. And it will make the current code easier to understand - <code>.Range("DateEntryDate")</code> is easier to understand than <code>.Range("$B$3")</code></p>

<h2>Exit early</h2>

<p>For performance reasons alone, always find the reasons not to run the code at the very start and exit. At the moment, if I make a change in $ABC$678023983, this code is going to fire and run. What a waste of time and cycles! Example:</p>

<pre><code>Private Sub Worksheet_Change(ByVal Target As Range)
Dim validRange as Range
    Set validRange = Intersect(Target, Me.Range("$B4:$B11")) '&lt;-- wow, a named range here would be good.
    If validRange is Nothing Then
        Exit Sub ' &lt;--- explicit exit, easy to see.
    End If

    If Target.Cells.Count &gt; 1 Then
        Exit Sub ' &lt;-- always manage the range size!
    End If

    ' … other code 
End Sub
</code></pre>

<h2>Qualify your ranges</h2>

<p>Most of the code is written with unqualified ranges (implied action on the active sheet).</p>

<pre><code>Range("A400:A411").EntireRow.Hidden = False
</code></pre>

<p>However, this assumes that the active sheet continues to be the sheet that the <code>_Change</code> event occurred in. Never make that assumption. Remember this code?</p>

<pre><code>Range("B101").Select
</code></pre>

<p>This means that the active cell will jump. With future modifications to the code or workbook, this may even jump to a different sheet.</p>

<p>In addition, the code calls some utility functions (e.g. <code>Hide_all</code>) - these may also alter the active sheet.</p>

<p>Having noted that, what is with <code>With wsDE</code>? There is an entire <code>With</code> block that in no way whatsoever that references the object (<code>wsDE</code>)!</p>

<h2>Code readability</h2>

<p>Don't use the line joiner, it can lead to confusion:</p>

<pre><code>        Case Is = "$B$4": Hide_All
            Select Case Range("B4")
                Case Is &lt;&gt; ""
                    Range("A100:A199").EntireRow.Hidden = False
                    Range("B101").Select
                    Sheet5.Visible = xlSheetVisible 'Confirmation-Incoming
                    Range("B5") = ""
                Case Else: Range("B5").Select
            End Select
</code></pre>

<p>Should be:</p>

<pre><code>        Case Is = "$B$4"
            Hide_All
            Select Case Range("B4")
                Case Is &lt;&gt; ""
                    Range("A100:A199").EntireRow.Hidden = False
                    Range("B101").Select
                    Sheet5.Visible = xlSheetVisible 'Confirmation-Incoming
                    Range("B5") = ""
                Case Else
                    Range("B5").Select
            End Select
</code></pre>

<p>All of a sudden, the indent levels and code scope is easier to understand. The <code>Else</code> becomes more obvious. Much easier to read.</p>

<p>Declare variables closer to where you are going to use them, and in the same scope. </p>

<pre><code>Dim Unique_Identifier As String
Dim Wire_Type As String
</code></pre>

<p>Took me a while to work out if they were actually used.</p>

<h2>What is next?</h2>

<p>If you address the above points you will end up with some slightly cleaner code. You will recognise yourself that it requires more work. However, you will have a cleaner foundation to figure out the remaining inefficiencies. One step at a time and you will get there!</p>
    </div>