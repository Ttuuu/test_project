<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>At the moment</p>
<ol>
<li>your edges have an identity.</li>
<li>There are three types.</li>
</ol>
<p>Abolishing both leads to a simpler implementation:</p>
<pre><code>struct Edge {
    Node* from;
    Node* to;
    double weight;
    // optional: enum EdgeType type;
};

std::unordered_set&lt;Edge&gt; edges;
</code></pre>
<p>Circular edges have both pointing to the same node.<br>
Bi-directional edges have a reversed duplicate.<br>
And normal directional edges are simple.</p>
<p>If you actually need to differentiate between those often enough, adding an enum to cache that info is simplicity itself.<br>
Until that day, revel in the simplicity of having only a single type.</p>
<p>If you save your nodes in a container, using indices might be a nice idea.</p>
<h3>Implementation:</h3>
<ol>
<li><p>Never import wholesale any namespace not designed for it, like <code>std</code>. Doing so can lead to conflicts which might silently or hopefully noisily break your code if the implementation changes even slightly.</p>
</li>
<li><p>The <code>Node</code>s you leak might be a concern, outside this toy-example. At the very least make sure Consider saving them in some container by value (careful of invalidation-rules), or managing them with smart-pointers.</p>
</li>
<li><p>Of more concern are the <code>Edge</code>s. If registering an <code>Edge</code> fails, it is leaked. Allocate them with <code>std::make_unique</code> instead, to ensure they are always properly owned.</p>
</li>
</ol>
    </div>