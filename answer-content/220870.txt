<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I think that part of the exercise is to make you re-invent the wheel just to learn that documentation is your friend, discovering something you just did already existed, in your case you really wrote everything also the <code>Math.Max</code>.</p>

<p>Part to become a good programmer is find a way to make your code reusable, so one BIG advice is refactor your code in a way that small functionality can be reused, in fact you could write your own separate function to do that.</p>

<pre><code>Class Math 
{
    static Int32 Max(Int32 a, Int32 b) =&gt; a &gt; b ? a : b;
}
</code></pre>

<p>But as i said an even bigger part of becoming a good programmer is learn to read the documentation, and avoid reinventing the wheel, because the wheel must be mantained, and could become hard. <a href="https://docs.microsoft.com/it-it/dotnet/api/system.math.max" rel="nofollow noreferrer">Framework doc</a></p>

<p>So, what about considering <code>System.Text.RegularExpressions</code> ?</p>

<p><a href="https://www.regular-expressions.info/" rel="nofollow noreferrer">Amazing resource to learn all the superpowers they come with</a></p>

<p>If i understood right <code>000000010000100000</code> should return <code>4</code>, the initial bytes and the end ones are not took in account since they are not surrounded by ones.</p>

<pre><code>using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.RegularExpressions;

namespace ConsoleApp
{
    class Program
    {
        static void Main(String[] args)
        {
            for (var i = 0u; i &lt;= 5000u; i++)
            {
                var binaryRepresentation = Convert.ToString(i, 2);
                Console.WriteLine($"{i} =&gt; {binaryRepresentation} : {GetLongestAmountOfConsecutiveZeros(binaryRepresentation)}");
            }
            Console.ReadKey();
        }

        static readonly Regex BinaryGapRegex = new Regex("1(0+)1", RegexOptions.CultureInvariant);
        private static Byte GetLongestAmountOfConsecutiveZeros(String bits)
        {
            var matches = BinaryGapRegex.Matches(bits).Cast&lt;Match&gt;();
            var successingMatches = matches.Where(x =&gt; x.Success);
            var successingMatchesWithGroup = successingMatches.Where(x =&gt; x.Groups[1].Success /* Group 0 is the whole match with also the ones, group one is just the brackets part*/);
            var eachGroupLength = successingMatchesWithGroup.Select(x =&gt; /* Will never be longet than 32 */ (Byte)x.Groups[1].Value.Length);
            var longestGroup = !eachGroupLength.Any() ? Byte.MinValue : eachGroupLength.Max();
            return longestGroup;
        }
    }
}
</code></pre>
    </div>