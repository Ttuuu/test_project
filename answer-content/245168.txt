<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Overview</h2>
<p>A couple of things I would note:</p>
<p>1: Your code only works for integers. Why do you care? You have shown you know about templates so it would be reasonable to make this sort any type of object that is comparable.</p>
<p>I suppose you acknowledge this in the comments:</p>
<pre><code> // Have Mergesort take template arguments, allowing it to sort user classes
</code></pre>
<p>But when you try this it will throw up questions around copy (the default and not bad for integers) against move (A better idea for complex/expensive objects).</p>
<p>2: Why only vectors. It is fine to internally use vectors for storage for the intermediate results. But the interface should not limit you to sorting one specific type of container.</p>
<p>Now you could templatize on the container type. But usually in C++ we abstract the container from the algorithm by using iterators. So I would have used iterators as the input to the sort (so that you can use any container simply passing the iterators to the algorithm).</p>
<p>3: You use an "Extra" <code>2x</code> the input size of memory compared the input data as temporary storage. You can do this with only <code>1x</code> extra memory and with a bit of work you only do the allocation once (doing the allocation again and again can be expensive).</p>
<p>4: You return a new array (with the sorted content). Why not sort the content in place. You don't need to force the creation of a new container. If the original user wants a new container then the user can make a copy and then use a sort in place algorithm. I think the creation of a new container is an extra unnecessary step that you are forcing your user to pay for that they may not want to.</p>
<p>You sort of mention this as an improvement:</p>
<pre><code> // Have Mergesort sort values in-place: leftVec and rightVec contains references 
</code></pre>
<p>But I don't think you can have l/r Vec be references when you do this.</p>
<h2>Comments</h2>
<blockquote>
<p>Back from a long C++ hiatus.</p>
</blockquote>
<p>Welcome Back.</p>
<blockquote>
<p>I thought to implement mergesort from memory</p>
</blockquote>
<p>Its a fun learning example. I like bubble sort my self.</p>
<blockquote>
<p>using containers and not based on CLRS's pseudocode and arrays.</p>
</blockquote>
<p>I had to look up what CLRS mean. You learn something new every day.</p>
<blockquote>
<p>The compiles and runs ok on the test cases.</p>
</blockquote>
<p>Good. That means you read the rules :-)</p>
<h2>Code review:</h2>
<p>If you are not modifying the orignal pass by const reference to catch mistakes.</p>
<pre><code>vector&lt;int&gt; Mergesort(vector&lt;int&gt; const&amp; vals, int clogLevel = 0)
                                  ^^^^^
</code></pre>
<hr>
<p>auto leftHalf = vector(vals.begin(), vals.begin() + r);
auto rightHalf = vector(vals.begin() + r, vals.end());</p>
<p>Worth mentioning this is a copy operation. For anything more complex a move would be better (but that would also require the original be modifiable which suggests a merge sort in place).</p>
<p>Note: There are specific move iterators that you can use.</p>
<hr>
<p>Remove Dead code:</p>
<pre><code>   // Debug print
   //clog("leftHalf: " + StrItems(leftHalf, false), true, clogLevel);
   //clog("rightHalf: " + StrItems(rightHalf, false), true, clogLevel);
</code></pre>
<p>That is what source control is for.</p>
<hr>
<p>How I hate redundant comments.</p>
<pre><code>// Returns a vector containing elements from leftHalf and rightHalf in ascending value
</code></pre>
<p>Don't explain what the code should do. That should be done using self documenting code (function/variable names). Your comments should explain things that are not easy to see be captured by the code (WHY).</p>
<p>The problem is that comments rot over time. So they need to be maintained with the code. If your comments rot to a point where they don't reflect the code which is wrong? What do you fix. So let the code explain how it does it let the comments explain why (or things that are not obvious in the code).</p>
<hr>
<p>Why are you testing the iterators here?</p>
<pre><code>   if (leftHalf.begin() == leftHalf.end()) return rightHalf;
   if (rightHalf.begin() == rightHalf.end()) return leftHalf; // Vice-versa
</code></pre>
<p>I think the more meaningful test is to simply test to see if it is empty.</p>
<pre><code>   if (leftHalf.empty())  return rightHalf;
   if (rightHalf.empty()) return leftHalf;
</code></pre>
<p>I believe that conveys the intent of the code much more clearly.</p>
<hr>
<p>I would simplify this:</p>
<pre><code>      if (*leftItr &lt; *rightItr) {
         mergedVec.push_back(*leftItr); 
         leftItr++;
      } else if (*leftItr &gt; *rightItr) {
         mergedVec.push_back(*rightItr);
         rightItr++;
      } else {
         // Both elements are equal: append both elements
         mergedVec.push_back(*leftItr);
         mergedVec.push_back(*rightItr);
         leftItr++;
         rightItr++;
      }


   // Like this:

      if (*leftItr &lt;= *rightItr) {
         mergedVec.push_back(*leftItr); 
         ++leftItr;
      }
      else {
         mergedVec.push_back(*rightItr);
         ++rightItr;
      }

 // PS:
 // prefer pre-increment over post.
 ++rightItr;
</code></pre>
<p>Most of the time they are equivalent. But now and then the pre-increment is slightly more efficient. Based on the standard way of implementing it.</p>
<p>see: <a href="https://stackoverflow.com/a/3846374/14065">How to overload the operator++ in two different ways for postfix a++ and prefix ++a?</a></p>
<hr>
<p>Again you are complicating this.</p>
<pre><code>   // If both vectors are exhausted of elements, return
   if (leftItr == leftHalf.end() &amp;&amp; rightItr == rightHalf.end())
      return mergedVec;

   // If leftHalf is exhausted, append the rest of elements from rightHalf; vice-versa
   if (leftItr == leftHalf.end())
      mergedVec.insert(mergedVec.end(), rightItr, rightHalf.end());
   else
      mergedVec.insert(mergedVec.end(), leftItr, leftHalf.end());


   // Simplify like this:

   mergedVec.insert(mergedVec.end(), rightItr, rightHalf.end());
   mergedVec.insert(mergedVec.end(), leftItr, leftHalf.end());
</code></pre>
<p>Yes one of those vectors will be empty. But inserting an empty range is not going to have a cost.</p>
<hr>
<p>Tiny bit generic for guards.</p>
<pre><code>#ifndef TEMPLATE_H
#define TEMPLATE_H
</code></pre>
<p>Put your code into your own namespace. Then add your namespace as part of your include guard.</p>
<hr>
<p>Never do this.</p>
<pre><code>using std::string;
using std::to_string;
using std::cout;
using std::vector;
using std::array;
</code></pre>
<p>Its bad in a source file. In a header file you can break other peoples code. Its simpler to just always use the prefix <code>std::</code> (its only 5 more characters). Don't be lazy.</p>
<hr>
<pre><code>   string repr = string(indentWidth * indentLevel, indentChar);
</code></pre>
<p>Sure you can build a string using append and addition. But I would personally use a <code>std::stringstream</code>. Just like a stream but does it into a string. Nice for building printable objects.</p>
<hr>
<p>A recent addition to the C++ language is range based for:</p>
<pre><code>   for (auto it = container.begin(); it != container.end(); it++) {
      repr.append(to_string(*it) + " ");
   }
</code></pre>
<p>This can be written as:</p>
<pre><code>   for(auto const&amp; val: container) {
       repr.append(to_string(val)) + " ");
   }
</code></pre>
<p>The range based for uses <code>std::begin()</code> and <code>std::end()</code> on the <code>container</code> object and assigns the result of the de-referenced object to the <code>val</code>.</p>
<pre><code>   for(Type val: container) {
        &lt;CODE&gt;
   }
</code></pre>
<p>Is syntactically equivalent to:</p>
<pre><code>   {
       ContainerType::iterator end  = std::end(container);
       ContainerType::iterator loop = std::begin(container);

       for(;loop != end; ++loop) {
           Type Val = *loop;

           &lt;CODE&gt;
       }
   } 
</code></pre>
<hr>
<h2>Example</h2>
<p>I have done a previosu code review on merge sort.</p>
<p><a href="https://codereview.stackexchange.com/a/137939/507">https://codereview.stackexchange.com/a/137939/507</a></p>
<p>At the end of my answer I provide a good implementation.</p>
    </div>