<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Looking at most of the queries, they appear to be almost the same, except for the values of some parameters. There is nothing wrong with having multiple queries to the database, but you can eliminate the repetitive queries by creating functions or classes for them.</p>

<p>I see two variations of the same basic query:</p>

<ul>
<li>Find by title</li>
<li>Find by entry_type</li>
</ul>

<p>A sample class:</p>

<pre><code>class MenuRepository {
    private $conn;

    public function __construct($conn) {
        $this-&gt;conn = $conn;
    }

    public function findByTitle($title) {
        $query = $this-&gt;conn-&gt;prepare("SELECT `title`, `slug_link` FROM `table_tudo` WHERE `title` = :title");
        $query-&gt;bindParam(':title', $title, PDO::PARAM_STR);
        $query-&gt;execute();

        return $query;
    }

    public function findByEntryType($entryType) {
        $query = $this-&gt;conn-&gt;prepare("SELECT `dropmenuList`, `slug_link` FROM `table_tudo` WHERE `entry_type` = :entry_type AND `dropmenuList` IS NOT NULL");
        $query-&gt;bindParam(':entry_type', $entryType, PDO::PARAM_STR);
        $query-&gt;execute();

        return $query;
    }
}
</code></pre>

<p>Now you eliminate the queries from your code, and just create an instance of your "menu repository" and call methods on it when needed:</p>

<p>So there is the abstraction you need to create. Two different functions that each have one copy of the query, and all you need to do is pass in different arguments each time:</p>

<pre><code>&lt;?php
$menuItems = new MenuRepository($conn);
$pageHome = $menuItems-&gt;findByTitle('PÃ¡gina Inicial');
$pageListDropDown = $menuItems-&gt;findByTitle('Lista de Items');
$pageList = $menuItems-&gt;findByEntryType('pagina');
?&gt;

&lt;?php foreach($pageHome as list($pageTitle, $pageSlug)) { ?&gt;
  &lt;li class="nav-item pr-2 navbarItem"&gt;
    &lt;a class="nav-link" href="?p=&lt;?php echo htmlentities($pageSlug, \ENT_QUOTES, 'UTF-8', false); ?&gt;"&gt;&lt;?php echo htmlentities($pageTitle, \ENT_QUOTES, 'UTF-8', false); ?&gt;&lt;/a&gt;
  &lt;/li&gt;
&lt;?php } ?&gt;

&lt;?php foreach($pageListDropDown as list($pageTitleLDD, $pageSlugLDD)) { ?&gt;
&lt;li class="nav-item dropdown pr-2 navbarItem "&gt;
  &lt;a class="nav-link dropdown-toggle" href="#" id="navbarDropdownMenuLink" role="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false"&gt;
    &lt;?php echo htmlentities($pageTitleLDD, \ENT_QUOTES, 'UTF-8', false); ?&gt;
  &lt;/a&gt;
  &lt;div class="dropdown-menu" aria-labelledby="navbarDropdownMenuLink"&gt;
    &lt;?php foreach ($pageList as list($pageTitleL, $pageSlugL)): ?&gt;
      &lt;a class="dropdown-item" href="?p=&lt;?php echo htmlentities($pageSlugL, \ENT_QUOTES, 'UTF-8', false); ?&gt;"&gt;&lt;?php echo htmlentities($pageTitleL, \ENT_QUOTES, 'UTF-8', false); ?&gt;&lt;/a&gt;
    &lt;?php endforeach; ?&gt;
  &lt;/div&gt;
&lt;/li&gt;
&lt;?php } ?&gt;
</code></pre>

<p>It reduces the boiler plate code for each query, and helps to de-clutter the the code that renders the HTML.</p>

<p>There is still some repetition here if the two menu titles and the entry types are need on other pages. Then it's just a matter of parameterizing those three things.</p>
    </div>