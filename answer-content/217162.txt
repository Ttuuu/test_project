<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>It looks like this code is very similar to <a href="https://codereview.stackexchange.com/q/214525/120114">the code you posted last month</a>, and in that review <a href="https://codereview.stackexchange.com/a/214574/120114">blindman67 recommended you consider eliminating the jQuery code</a>. While it isn't imperative that you do so it would perhaps simplify some code and decrease page load times - not that it would likely be a dramatic change but could be less.</p>

<p>You could consider moving anonymous/lambda functions/closures out to named functions - this would allow decreasing the nesting levels.</p>

<p>If you keep the jQuery code, perhaps the suggestions below will be helpful.</p>

<p>While that syntax of <code>$(document).ready()</code> still works with the latest jQuery version (i.e. 3.3.1 at the time of typing), but is deprecated and the recommended syntax is simply <code>$(function() {})</code><sup><a href="https://api.jquery.com/ready/" rel="nofollow noreferrer">1</a></sup>.</p>

<hr>

<p>I see this variable declaration:</p>

<blockquote>
<pre><code>var imageUrl = "https://i.imgur.com/RzEm1WK.png";
</code></pre>
</blockquote>

<p>That value is never re-assigned, so it could be declared with the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const" rel="nofollow noreferrer"><code>const</code></a> keyword and a common convention among developers is to name constants in all capital letters and separate words with underscores. Additionally that name is somewhat vague. Maybe a better name would be <code>DEFAULT_IMAGE_URL</code> or <code>FALLBACK_IMAGE_URL</code>.</p>

<hr>

<p>It is wise to cache DOM elements in variables instead of repeatedly querying the DOM<sup><a href="https://www.sitepoint.com/jquery-performance-dom-caching/" rel="nofollow noreferrer">2</a></sup> - e.g. </p>

<pre><code>const containerElement = $('.container');
</code></pre>

<p>If that element is the only container on the page, perhaps it would be appropriate to use an <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/id" rel="nofollow noreferrer"><em>id</em></a> attribute </p>

<pre><code>&lt;div id="container"&gt;&lt;/div&gt; &lt;!-- could still also have class="container"  --&gt;
</code></pre>

<p>and then select it in JavaScript with the <a href="https://api.jquery.com/id-selector/" rel="nofollow noreferrer">id selector</a>:</p>

<pre><code>const containerElement = $('#container');
</code></pre>

<p>Then that can be referenced later in the code - e.g.</p>

<pre><code>// below code will upload image onclick mask image

containerElement.click(function(e) {
    // filtering out non-canvas clicks
</code></pre>

<p>and </p>

<pre><code>containerElement.css('width', width + "px").css('height', height + "px").addClass('temp');
if (name.indexOf('mask_') !== -1) {
    var imageUrl1 = imageUrl;
 } else {
     var imageUrl1 = '';
 }
 var mask = containerElement.mask({...});
</code></pre>

<p>In order to use that in <code>drawText()</code> the scope would need to be widened (e.g. outside of the DOM-ready callback, or have that function moved).</p>

<p>Other elements used frequently that can be cached are <code>$('#fileup')</code>, <code>$(".container")</code>, etc.</p>

<hr>

<p>In function <code>json()</code> I see a <code>for</code> loop that starts like this:</p>

<blockquote>
<pre><code>for (let {
          src,
          x,
          y,
          name
      } of arr) {
      $(".container").css('width', width + "px").css('height', height + "px").addClass('temp');
</code></pre>
</blockquote>

<p>That first line inside the block will be updating the css of the container element once for each iteration of <code>arr</code>. It would be better to move that call outside the <code>for</code> loop in order to avoid excess function calls.</p>

<hr>

<p>Lower in function <code>json()</code> I see this line:</p>

<pre><code>fileup.onchange = function() {
</code></pre>

<p>But I don't see <code>fileup</code> declared as a variable, local to this code or function, which means this is utilizing a global variable. As <a href="https://stackoverflow.com/a/25325330/1575353">joews explains in this answer</a> to <a href="https://stackoverflow.com/q/25325221/1575353"><em>Why don't we just use element IDs as identifiers in JavaScript?</em></a> the <a href="http://w3c.github.io/html/browsers.html#named-access-on-the-window-object" rel="nofollow noreferrer">HTML5 spec</a> advises against using Named access.</p>

<blockquote>
  <p><strong><em><code>window</code></em><code>[</code><em><code>name</code></em><code>]</code></strong><br><br>
  Returns the indicated element or collection of elements.<br>
  As a general rule, relying on this will lead to brittle code. Which IDs end up mapping to this API can vary over time, as new features are added to the Web platform, for example. Instead of this, use <a href="https://dom.spec.whatwg.org/#dom-nonelementparentnode-getelementbyid" rel="nofollow noreferrer"><code>document.getElementById()</code></a> or <code>document.querySelector()</code>.<sup><a href="http://w3c.github.io/html/browsers.html#named-access-on-the-window-object" rel="nofollow noreferrer">3</a></sup></p>
</blockquote>

<p>Additionally, setting the <code>onchange</code> property of an element would overwrite any previous onchange handler. If there was a need to have multiple events then you can use <a href="https://developer.mozilla.org/en/docs/Web/API/EventTarget/addEventListener" rel="nofollow noreferrer"><code>Event.addEventListener()</code></a></p>

<hr>

<p>At the end of the first click handler on <code>$('.container')</code> I see:</p>

<blockquote>
<pre><code>setTimeout(() =&gt; {
  $('#fileup').click();
}, 20);
</code></pre>
</blockquote>

<p>This could be simplified using a <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind#Creating_a_bound_function" rel="nofollow noreferrer">Bound function</a>:</p>

<pre><code>const fileUp = $('#fileup'); //can be moved to top of DOM ready callback
setTimeout(fileUp.click.bind(fileUp), 20);
</code></pre>

<hr>

<p>The CSS has a few peculiar aspects. First, I see an empty ruleset for <code>.temp</code>. Also, some of the lines have unique indentation levels- some have tabs while others have two spaces, yet the majority have four spaces</p>

<blockquote>
<pre><code>.container {
    background: silver;
  position: relative;

}
.container img {
   position:absolute;
   top:0;
   bottom:250px;
   left:0;
   right:0;
   margin:auto;
   z-index:999;
}
</code></pre>
</blockquote>

<p>It would improve readability to make all indentation spacing uniform.</p>

<hr>

<p>In your review <a href="https://codereview.stackexchange.com/q/216247/120114"><em>Edit and delete uploaded images code inside script tag</em>
</a>, which also has very similar code to the code here, <a href="https://codereview.stackexchange.com/a/216251/120114">x539 recommended using template tags</a> and <a href="https://codereview.stackexchange.com/questions/216247/edit-and-delete-uploaded-images-code-inside-script-tag#comment419569_216251">you asked in comments how to make the styles change</a>. That can be done with JavaScript after the template is cloned - similar to the <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/template#Examples" rel="nofollow noreferrer">MDN example that modifies contents after cloning</a>. </p>

<p>Instead of inserting the cloned element immediately:</p>

<blockquote>
<pre><code>$('#demoTemplate').clone().insertAfter('#fileup');
</code></pre>
</blockquote>

<p>modify the sub-elements in-between. Use a traversal function like <a href="http://api.jquery.com/find/" rel="nofollow noreferrer"><code>.find()</code></a> to locate the elements to alter.</p>

<pre><code>const clone = $('#demoTemplate').clone();
clone.find('.edit').css({left: '3px'});
clone.id = layer.name; //make unique
clone.show();          //remove style="display: none"
clone.insertAfter('#fileup');
</code></pre>

<p><sup>1</sup><sub><a href="https://api.jquery.com/ready/" rel="nofollow noreferrer">https://api.jquery.com/ready/</a></sub></p>

<p><sup>2</sup><sub><a href="https://www.sitepoint.com/jquery-performance-dom-caching/" rel="nofollow noreferrer">https://www.sitepoint.com/jquery-performance-dom-caching/</a></sub></p>

<p><sup>3</sup><sub><a href="http://w3c.github.io/html/browsers.html#named-access-on-the-window-object" rel="nofollow noreferrer">http://w3c.github.io/html/browsers.html#named-access-on-the-window-object</a></sub></p>
    </div>