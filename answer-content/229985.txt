<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Review</h2>

<ul>
<li><code>LetterCombinations</code> returns an <code>IList&lt;string&gt;</code> but I see no reason to return a modifiable collection. Consider returning <code>IEnumerable&lt;string&gt;</code> instead.</li>
<li>A method's name should be a verb. Change <code>LetterCombinations</code> to <code>GetLetterCombinations</code>, <code>FindLetterCombinations</code> or <code>PermutateLetterCombinations</code>.</li>
<li>You did good by creating a private function that performs the recursion with intermediate parameters. This way, the user of this API only needs to think about the public endpoint. However, it could have used the same name as the public method. An overload would not resulted in a conflict. The postfix <code>*Function</code> is weird.</li>
<li>Prefer the use of <code>var</code> if the type can be read from code: <code>var lettersMap = new Dictionary&lt;char, char[]&gt;();</code></li>
<li>You are looking to get familiar with LINQ, however the next statement did not require the LINQ wrapper <code>Count()</code> of a string's <code>Length</code> property: <code>if (sb.Length == digits.Count())</code>.</li>
<li>Use more consistent indentation for your class members.</li>
<li>Having the opening curly brace on the same line is ok, but it's more a convention in Java than in C#, where the opening curly brace is usually on the next line.</li>
<li>See Jesse C. Slicer's answer to move the static data out of the method.</li>
</ul>

<hr>

<h2>Peculiarities</h2>

<p>Did you plan to return the empty <code>result</code> list or throw an exception on this edge case?</p>

<blockquote>
<pre><code>if (String.IsNullOrEmpty(digits)){
    return result;
    throw new ArgumentNullException(nameof(digits));
}
</code></pre>
</blockquote>

<p>The next line is followed by a loop over <code>values</code> but doesn't care whether the operation succeeded:</p>

<blockquote>
<pre><code>lettersMap.TryGetValue(digits[pos], out char[] values);
</code></pre>
</blockquote>

<p>Did you plan to write this instead?</p>

<pre><code>if (lettersMap.TryGetValue(digits[pos], out char[] values)) 
{
    // ..
}
</code></pre>

<p>You are using both <code>char</code> and <code>Char</code> in the next line. Is there a specific reason to use both these types?</p>

<blockquote>
<pre><code>Dictionary&lt;Char, Char[]&gt; lettersMap = new Dictionary&lt;Char, char[]&gt;();
</code></pre>
</blockquote>
    </div>