<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ol>
<li><p>The calculation in the post of the number of iterations is not correct. Since the returned list has 1,436,400 elements, there must have been exactly that many iterations that reached the <code>combos.append</code> line. Here's one mistake I spotted:</p>

<pre><code>for i in equal_letter_indxs2                    =&gt; 2 times
</code></pre>

<p>The list <code>equal_letter_indxs2</code> has \${4\choose2}=6\$ elements, not 2.</p></li>
<li><p>Python provides the module <a href="https://docs.python.org/3/library/timeit.html#timeit.timeit" rel="nofollow noreferrer"><code>timeit</code></a> for timing function calls and short pieces of code:</p>

<pre><code>&gt;&gt;&gt; from timeit import timeit
&gt;&gt;&gt; timeit(generate_1_digit_2_equal_letters_2_different_letters, number=1)
3.0850040439981967
</code></pre></li>
<li><p>Since the lists you are building are short, it makes sense to construct them by inserting elements. (For long lists this could lead to poor performance, but 5 elements is too short for this to matter.) This approach avoids the need to maintain a set of places that gets adjusted as you go through the choices, and so simplifies the logic:</p>

<pre><code>from itertools import combinations, permutations

LETTERS = 'bcdfghjklmnpqrstvwxz'
DIGITS = '2456789'

def aabc1(letters=LETTERS, digits=DIGITS):
    """Generate the distinct 5-character strings consisting of four
    letters (exactly one of which is repeated) and one digit.

    """
    for a, b, c in permutations(letters, 3):   # Three letters (a repeated).
        for i, j in combinations(range(4), 2): # Positions for letter a.
            for d in digits:                   # One digit.
                for k in range(5):             # Positions for the digit.
                    result = [b, c]
                    result[i:i] = a,
                    result[j:j] = a,
                    result[k:k] = d,
                    yield ''.join(result)
</code></pre></li>
<li><p>Since the loops are now all independent of each other, we can turn them into a single loop using <a href="http://docs.python.org/3/library/itertools.html#itertools.product" rel="nofollow noreferrer"><code>itertools.product</code></a>:</p>

<pre><code>from itertools import combinations, permutations, product

LETTERS = 'bcdfghjklmnpqrstvwxz'
DIGITS = '2456789'

def aabc1(letters=LETTERS, digits=DIGITS):
    """Generate the distinct 5-character strings consisting of four
    letters (exactly one of which is repeated) and one digit.

    """
    for (a, b, c), (i, j), d, k in product(
            permutations(letters, 3),  # Three letters (a repeated).
            combinations(range(4), 2), # Positions for the repeated letter.
            digits,                    # One digit.
            range(5)):                 # Positions for the digit.
        result = [b, c]
        result[i:i] = a,
        result[j:j] = a,
        result[k:k] = d,
        yield ''.join(result)
</code></pre>

<p>This is about 3 times as fast as the code in the post:</p>

<pre><code>&gt;&gt;&gt; timeit(lambda:list(aabc1()), number=1)
1.0679944080184214
</code></pre></li>
</ol>
    </div>