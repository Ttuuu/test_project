<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>A first go at the problem:</p>

<h2>Generating the states</h2>

<p>Since you are generating all possible bit patterns with a given number of bits, it's wasteful to first create a binary representation as a string, and then convert it back to integers digit by digit. As often <code>itertools</code> can help you here. Especially <a href="https://docs.python.org/3/library/itertools.html#itertools.product" rel="nofollow noreferrer"><code>itertools.product</code></a>. Your use case is basically one of the examples given in its documentation.</p>

<pre><code>from itertools import product

def generate_all_possible_states(size):
    states = np.empty((2**size, size))
    for i, value in enumerate(product((0, 1), repeat=size)):
        states[i, :] = value
    return states
</code></pre>

<p>The reimplementation also avoids the dynamically growing list and allocates a numpy array of appropriate size beforehand.</p>

<h2>Moving repeated computations</h2>

<p>You are calculating <code>exp</code> for every single scalar that you put in <code>density_func</code>. That is wasteful since it does not allow numpy to play its strengths, namely applying the same operation to a lot of values aka vectorization. Fortunately, there is an easy way out (ot the loop ;-)) and you can just compute <code>np.exp</code> on the whole <code>density_func</code> vector.</p>

<p>The first part of the sum can also be easily moved out of the loop.</p>

<pre><code>density_func = np.empty(2**size)
for i in range(2**size):
    density_func[i] = np.dot(np.dot(states[i], J), states[i])

density_func += np.dot(states, b)
density_func = np.exp(density_func)
# maybe a teeny-tiny bit faster:
# density_func = np.exp(density_func + np.dot(states, b))
</code></pre>

<p>The order of operation matters here. Intializing <code>density_func</code> to <code>np.dot(states, b)</code> and then adding the results in the loop like <code>density_func[i]  += np.dot(np.dot(states[i], J), states[i])</code> is consistently slower.</p>

<hr>

<h2>Preliminary timing</h2>

<p>As an example, for <code>size = 18</code>, your original implementation takes about <span class="math-container">\$5.5s\$</span> here on my machine. With just the two modifications above, you can get down to <span class="math-container">\$1.9s\$</span> (both with the same fixed seed for the random numbers). </p>

<ul>
<li><code>size = 20</code>: <span class="math-container">\$23.4s\$</span> vs. <span class="math-container">\$8.0s\$</span></li>
<li><code>size = 21</code>: <span class="math-container">\$47.9s\$</span> vs. <span class="math-container">\$16.4s\$</span></li>
</ul>

<p>Maybe I will have time to revisit this later on this week to update the answer with a proper analysis on how both of them scale for larger sizes. My strong intuition at this point would be that they both have a complexity of <span class="math-container">\$\mathcal{O}(2^n)\$</span> and the difference between them will actually remain a constant factor (<span class="math-container">\$\approx 3\times\$</span> faster).</p>

<hr>

<h3>Things that didn't work (so far)</h3>

<p>Things that I tried, that didn't work for me:</p>

<ol>
<li><p>Eliminating the magic of <code>np.dot</code> and explicitely using <code>np.inner</code> or <code>np.matmul</code> / <code>@</code> (in Python 3). <code>np.dot</code> seems to have some tricks up its sleeves and is still faster. Maybe I will have to read the doc more carefully.</p></li>
<li><p>Trying to compute the second part of the sum in a vectorized manner. I'm a little bit too tired at the moment to come up with a clever solution to this.</p></li>
</ol>
    </div>