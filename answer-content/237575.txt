<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>As other answers state, your iterative algorithm outperforms your recursive algorithm because the former remembers previous intermediate results (or at least one such result) while the latter doesn’t. Of course, one can write recursive algorithms that remember previous results.</p>

<p>For Fibonacci numbers that’s simple enough since you only need to remember one such result. Using the tuple unpacking syntax of C++17 for sake of readability:</p>

<pre><code>#include &lt;utility&gt;

namespace mynamespace {

namespace detail {

std::pair&lt;unsigned long long, unsigned long long&gt;
fibonacci_impl(unsigned long long n)
{
    if (n &lt;= 1)
        return { n, 0 };

    auto [fib1, fib2] = fibonacci_impl(n - 1);
    return { fib1 + fib2, fib1 };
}

} // end namespace detail

unsigned long long fibonacci(unsigned long long n)
{
    return detail::fibonacci_impl(n).first;
}

} // end namespace mynamespace
</code></pre>

<p><code>detail::fibonacci_impl</code> returns the result of <code>fibonacci(n)</code> <em>and</em> <code>fibonacci(n-1)</code> (as a <code>pair</code>) for reuse by the caller. A sufficiently smart compiler can optimize away the overhead of pair packing and unpacking to leave the function call overhead (see <a href="https://godbolt.org/z/YrNRwr" rel="nofollow noreferrer">compiler explorer</a>) as the only disadvantage of the recursive algorithm over its iterative counterpart.</p>

<h2>Addendum: Namespaces</h2>

<p>I enclosed the function declarations into their own namespace <code>mynamespace</code> and a sub-namespace <code>mynamespace::detail</code>.</p>

<p>If your program is more than trivial you should place your declarations (functions, classes or otherwise) into a separate namespace. For declarations that are meant to be used outside of your own program (e. g. a programming library) it’s highly recommended to do so to avoid name shadowing issues and confusion in general.</p>

<p>If your library declares stuff that is only meant to be used from inside this library, it’s customary to place it inside a sub-namespace whose name indicates its intended nature. Examples that I encountered for such sub-namespace names include: <code>detail</code>, <code>internal</code>, <code>implementation</code> or, shorter, <code>impl</code>.</p>
    </div>