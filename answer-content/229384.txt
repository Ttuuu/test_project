<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First: if you look into <code>StringBuilder.reverse()</code> you'll encounter some extra work for some Unicode symbols needing two chars for a symbol (called a <em>surrogate pair</em>), which should <em>not</em> be reversed.</p>

<p>But let's not consider that.</p>

<ul>
<li>Provide exactly the needed capacity for StringBuilder.</li>
<li><code>sb.append(' ')</code> is faster than for <code>" "</code>.</li>
<li><code>end - 1</code> not needed.</li>
</ul>

<p>So:</p>

<pre><code>public String reverseWords(String s) {
    int length = s.length();
    if (length &lt;= 1) {
        return s;
    }
    StringBuilder sb = new StringBuilder(length);
    int start = 0;
    int end = 0;
    while (start &lt; length) {
        while (end &lt; length &amp;&amp; s.charAt(end) != ' ') {
            ++end;
        }
        doReverse(s, start, end, sb);
        start = ++end;
    }
    return sb.toString();
}

private void doReverse(String s, int start, int end, StringBuilder sb) {
    if (start &gt; 0)
        sb.append(' ');
    while (end &gt; start){
        --end;
        sb.append(s.charAt(end));
    }
}
</code></pre>

<p>In general using toCharArray could be faster:</p>

<pre><code>public String reverseWords(String str) {
    char[] s = s.toCharArray();
    int length = s.length;
    if (length &lt;= 1) {
        return s;
    }
    int start = 0;
    int end = 0;
    while (start &lt; length) {
        while (end &lt; length &amp;&amp; s.charAt(end) != ' ') {
            ++end;
        }
        doReverse(s, start, end);
        start = ++end;
    }
    return new String(s);
}

private void doReverse(char[] s, int start, int end) {
    while (--end &gt; start){
        char ch = s[start];
        s[start] = s[end];
        s[end] = ch;
        ++start;
    }
}
</code></pre>

<p>If you would <em>inline</em> doReverse for extra speed, you would need a copy of the changing parameters.</p>

<pre><code>    // doReverse(char[] s, int start, int end)
    int end2 = end;
    while (--end2 &gt; start){
        char ch = s[start];
        s[start] = s[end2];
        s[end2] = ch;
        ++start;
    }
</code></pre>

<p>Now we should be twice as fast (wild guess).</p>
    </div>