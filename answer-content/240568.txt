<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First of all, there is a syntax error:</p>

<pre><code>if com_HP &gt; 50:  # &lt;-- if statement without body leads to indentation error
# some comment
if user_move == 1 and user_ammo &gt; 0:
    # some more code
</code></pre>

<p>Moreover there are a few style issues with your code:</p>

<p><strong>Comments</strong></p>

<p>Always indent your comments on the same level as the code you are referring to, otherwise it is very confusing.</p>

<pre><code># Declaration for replay_game function
def replay_game():
# Prompts user to play again and saves value in variable game_loop    
    game_loop = input("Would you like to play again? (Y/N)")
# If game_loop variable is equal to Y then replay     
    if game_loop == "Y" or "y":
        game_main()
</code></pre>

<p>Indent your comments like this:</p>

<pre><code># Declaration for replay_game function
def replay_game():
    # Prompts user to play again and saves value in variable game_loop    
    game_loop = input("Would you like to play again? (Y/N)")
    # If game_loop variable is equal to Y then replay     
    if game_loop == "Y" or "y":
        game_main()
</code></pre>

<p><strong>Paragraphs</strong></p>

<p>Please use paragraphs between functions, also when there is a comment in between. The official <a href="https://www.python.org/dev/peps/pep-0008/#blank-lines" rel="nofollow noreferrer">python style guide</a> states:</p>

<blockquote>
  <p>Surround top-level function and class definitions with two blank lines.</p>
</blockquote>

<p><strong>Avoid top level code</strong></p>

<p>Top level code is executed every time this module is loaded, which is probably not what you want when importing this module from another script. That's why you should surround your top level code with:</p>

<pre><code>if __name__ == '__main__':
    # Welcome user and prompt for their name
    print("Welcome to the duel!")
    user_name = input("What is your name? ")
    # Begin game function
    game_main()
</code></pre>

<p><strong>User input</strong></p>

<p>You don't handle the case of invalid user input, e.g. a user enters a name instead of a number. This can be handled with an extra function to get proper user input.</p>

<pre><code>def get_user_move():
    try:        
        user_move = int(input("..."))
    except ValueError:
        print("Invalid Input: Not a number!")        
    # validate input
    if user_move &lt; 0 or user_move &gt; 5:
        print("Invalid Input: Must be 1-5")
        # ask the player again
        return get_user_move()
    else:
        return user_move
</code></pre>

<p><strong>Structure</strong></p>

<p>Structure your game as a <code>class</code> e.g.</p>

<pre><code>class Game:
    def __init__(self, username):
        self.username = username
        self.user_potion = 0
        self.com_potion = 0
        # etc.

    def start(self):
        # prompt user to choose a move
        user_move = get_user_move()
        # Uses random to generate a random integer between 1 and 5
        com_move = random.randint(1,5)
        if user_move == 1:
            user_attack(com_move)
        if user_move == 2:
            user_block(com_move)
        # etc.

    def user_attack(com_move):
        # handle user attack

    # etc.    
</code></pre>

<p>In your main part you can now instantiate your game as an object and run the <code>start</code> method, e.g.</p>

<pre><code>if __name__ == '__main__':
    # Welcome user and prompt for their name
    print("Welcome to the duel!")
    user_name = input("What is your name? ")
    game = Game(user_name)
    game.start()
</code></pre>
    </div>