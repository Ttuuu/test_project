<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>as mentioned in the comments it might be helpful to <strong><a href="https://refactoring.guru/extract-method" rel="nofollow noreferrer">extract methods</a></strong> to remove redundant code - you might want to read a more detailed explanation on <a href="https://www.tutorialspoint.com/java/java_methods.htm" rel="nofollow noreferrer">"methods in java"</a> to gain basic knowledge on methods.</p>
<p>tl;dr</p>
<p><em>"A Java method is a collection of statements that are grouped together to perform an operation"</em></p>
<p>let's collect your your statements that all checks have in common</p>
<pre><code>Map&lt;String,String&gt; dtlLogMap = new HashMap&lt;&gt;(4);
dtlLogMap.put("transId",String.valueOf(record.getTransactionId()));
dtlLogMap.put("firstName",record.getFirstName());
dtlLogMap.put("validationName","VALID_FIRSTNAME_CHECK");
dtlLogMap.put("validationStatus","passed");
DetailedLogger.log(dtlLogMap);
</code></pre>
<p>we can extract a lot of stuff here into a method named <code>Map&lt;String,String&gt; createLog(Record record, String checkResult)</code> - noteworthy is, that we only group things together, that belong together - we do not (yet) extract the logging action - to maintain the <strong><a href="https://clean-code-developer.com/grades/grade-2-orange/#Single_Responsibility_Principle_SRP" rel="nofollow noreferrer">Single Responsibility-principle</a></strong>. That makes it also a lot easier to find proper method names (instead of creating an obfucasting method name <code>createAndPrintLog()</code>)</p>
<pre><code>private Map&lt;String,String&gt; createLog(Record record, String checkName, String checkResult){
    Map&lt;String,String&gt; logs= new HashMap&lt;&gt;(4);
    logs.put("transId",String.valueOf(record.getTransactionId()));
    logs.put("firstName",record.getFirstName());
    logs.put("validationName",checkName);
    logs.put("validationStatus",checkResult);
    return logs;
}
</code></pre>
<p>note that a method has parameters that let you control the output of the method: the parameters should be self-explaining (<a href="https://clean-code-developer.com/grades/grade-4-green/#Tell_dont_ask" rel="nofollow noreferrer"><strong>Tell - dont Ask</strong></a>)</p>
<p>we can now apply this method in your checks and remove redundant code</p>
<pre><code>...
if(record.isDetailedLoggingEnabled()){
    //here: method call instead of redundancy
    Map&lt;String,String&gt; dtlLogMap = createLogs(record,"VALID_FIRSTNAME_CHECK",  "Errored");
    dtlLogMap.put("errorCode",record.getErrorCode());
    DetailedLogger.log(dtlLogMap);
}
...
</code></pre>
<h2>use more methods to remove more reduncancy!</h2>
    </div>