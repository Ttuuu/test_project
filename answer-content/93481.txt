<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here's a step-by-step conversion from your code to the JS-only code of <a href="http://youmightnotneedjquery.com" rel="nofollow">youmightnotneedjquery.com</a>.</p>

<pre><code>function changeClass() {
    document.getElementById("message").className += " dropzone-wrap";
    document.getElementById("dragNdrop").className += " dropzone-content";
}
</code></pre>

<p>Your method here can only ever be used to add "<em>dropzone-wrap</em>" and "<em>dropzone-content</em>". Consider a different approach, where you provide the <code>DOM Element</code> and <code>CSS Classes</code> as parameters.</p>

<p>Consider two such methods - one to add the class (from <code>$.addClass()</code>), and one to remove it (<code>$.removeClass()</code>).</p>

<pre><code>// http://youmightnotneedjquery.com/#add_class
function addClass(el, className) {
    if (el.classList)
      el.classList.add(className);
    else
      el.className += ' ' + className;
}

// http://youmightnotneedjquery.com/#remove_class
function removeClass(el, className) {
    if (el.classList)
      el.classList.remove(className);
    else
      el.className = el.className.replace(new RegExp('(^|\\b)' + className.split(' ').join('|') + '(\\b|$)', 'gi'), ' ');
}
</code></pre>

<p>Note that I'd remove the class before adding it, as that code does not protect against long repeated classname strings.</p>

<p>Anyway, let's continue with your code:</p>

<pre><code>window.onload = function() {
    document.getElementById("ToggleTxTDrop").addEventListener( 'click' , changeClass );
}
</code></pre>

<p>Using <code>onload</code> works, but it isn't the right way to do it. With jQuery this should be <code>$(window).on('load', function() { ... });</code>... with native Javascript, it isn't much different (<code>.addEventListener</code>).</p>

<p>For the function code itself, create a handler method that uses the <code>addClass()</code> abstraction method to replace your old <code>changeClass()</code> functionality:</p>

<pre><code>function txtDropClicked(evt) {
    addClass(document.getElementById('message'), 'dropzone-wrap');
    addClass(document.getElementById('dragNdrop'), 'dropzone-content');
}

window.addEventListener('load', function() {
    document.getElementById("ToggleTxTDrop").addEventListener( 'click' , txtDropClicked );
});
</code></pre>

<p>Now we have your classes being added on click; let's update the onfocus handler in the same fashion:</p>

<pre><code>/* lets remove the previous classes when on focus */
function removeClassesOnFocus(evt) {
    // evt.target is the element that triggered the event. We bound to #message.
    removeClass(evt.target, 'dropzone-wrap');
    removeClass(evt.target.parentNode, 'dropzone-content');
}

// this bit really should wait for `window.load` too.
document.getElementById('message').addEventListener('focus', removeClassesOnFocus);
</code></pre>

<blockquote>
  <p>If the classes are there nothing should happen</p>
</blockquote>

<p>To address that, the <code>removeClassesOnFocus</code> function could be reworked to look up the element if it isn't provided.</p>

<pre><code>function txtDropClicked(evt) {
    removeClassesOnFocus(false);
    addClass(document.getElementById('message'), 'dropzone-wrap');
    addClass(document.getElementById('dragNdrop'), 'dropzone-content');
}

function removeClassesOnFocus(evt) {
    // evt.target is the element that triggered the event. We bound to #message.
    var message = (evt === false) ? document.getElementById('message') : evt.target;
    removeClass(message, 'dropzone-wrap');
    removeClass(message.parentNode, 'dropzone-content');
}
</code></pre>

<hr>

<p><strong>The full converted code:</strong></p>

<pre><code>// http://youmightnotneedjquery.com/#add_class
function addClass(el, className) {
    if (el.classList) { el.classList.add(className); }
    else { el.className += ' ' + className; }
}

// http://youmightnotneedjquery.com/#remove_class
function removeClass(el, className) {
    if (el.classList) { el.classList.remove(className); }
    else { el.className = el.className.replace(new RegExp('(^|\\b)' + className.split(' ').join('|') + '(\\b|$)', 'gi'), ' '); }
}

// When the txtDrop toggle is clicked, add these classes to the message and drag/drop thing.
function txtDropClicked(evt) {
    removeClassesOnFocus(false);
    addClass(document.getElementById('message'), 'dropzone-wrap');
    addClass(document.getElementById('dragNdrop'), 'dropzone-content');
}

// Removes the classes after the message receives focus.
function removeClassesOnFocus(evt) {
    // evt.target is the element that triggered the event. We bound to #message.
    var message = (evt === false) ? document.getElementById('message') : evt.target;
    removeClass(message, 'dropzone-wrap');
    removeClass(message.parentNode, 'dropzone-content');
}

// Attach the click handler to txtDrop toggle when the page loads.
window.addEventListener('load', function() {
    document.getElementById("ToggleTxTDrop").addEventListener( 'click' , txtDropClicked );
    document.getElementById('message').addEventListener('focus', removeClassesOnFocus);
});
</code></pre>

<p>It is worth noting that you can use inline functions as handlers, too - and not define <code>txtDropClicked</code> or <code>removeClassesOnFocus</code>. Either way, the point of each method is to perform a single task, and to do that in the most reusable manner possible.</p>
    </div>