<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>With regards to the last couple of lines, one thing you could do from a functional perspective is to bind the first argument like so:</p>

<pre><code>function bindFirst(func, firstArgument) {
    return function(...arguments) {
        return func(firstArgument, ...arguments);
    }
}

const addToHead = bindFirst(addItem, 'head');

addToHead('head_item_1', 100, 'img');
...
</code></pre>

<p>You could also use data structure like a Map and loop through it:</p>

<pre><code>let newItems = new Map([
    [
        'head',
        [{
            name: 'head_item_1',
            cost: 100,
            img: 'img'
        },
        {
            name: 'head_item_1',
            cost: 100,
            img: 'img'
        }]
    ], [
        'cape',
        [{
            name: 'cape_item_1',
            cost: 100,
            img: 'img'
        },
        {
            name: 'cape_item_1',
            cost: 200,
            img: 'img'
        }]
    ]
]);

items.forEach((items, slot) =&gt; {
    const addToSlot = bindFirst(addItem, slot);
    items.forEach(item =&gt; {
        addToSlot(item.name, item.cost, item.img);
    });
});
</code></pre>

<p>Have you considered that maybe <code>equipment</code> and <code>item</code> should be classes? A class called <code>Equipment</code> could have a method like <code>addItem(slot, item)</code> where <code>item</code> is an object of type <code>Item</code>, which has a constructor with a similar signature to your <code>addItem</code> function.</p>
    </div>