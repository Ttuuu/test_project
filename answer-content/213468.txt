<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Both Prewitt and Sobel filters are "separable".</p>

<p>To calculate the gradients (<code>gx</code> and <code>gy</code>), the original code effectively iterates over and sums a 2d kernel (i.e. <a href="https://en.wikipedia.org/wiki/Kernel_(image_processing)#Convolution" rel="nofollow noreferrer">convolution</a>). For the <a href="https://en.wikipedia.org/wiki/Prewitt_operator#Formulation" rel="nofollow noreferrer">Prewitt</a> and Sobel filters, each gradient kernel can be split into two 1D kernels, <a href="http://www.songho.ca/dsp/convolution/convolution2d_separable.html" rel="nofollow noreferrer">and we can do the calculation of each gradient in two passes</a>. For a <code>k</code> sized filter, this <a href="https://dsp.stackexchange.com/questions/36962/why-does-the-separable-filter-reduce-the-cost-of-computing-the-operator">reduces the work needed at each pixel from <code>k * k</code> to <code>2 * k</code></a>.</p>

<p>This does require some extra memory, but the following is around 4.8x faster.</p>

<pre><code>static void New_Version(benchmark::State&amp; state) {

  const int rows = 1000;
  const int cols = 1000;
  const int threshold = 20;

  auto to_index = [&amp;] (std::size_t x, std::size_t y)
  {
    return y * cols + x;
  };

  unsigned char *smoothImg = new unsigned char[cols*rows];
  short *scratch = new short[cols*rows](); // note: could just use gradImg instead.
  short *gx = new short[cols*rows]();
  short *gy = new short[cols*rows]();
  short *gradImg = new short[cols*rows];
  unsigned char* dirImg = new unsigned char[cols*rows];

  const short gxx[3] = { +1,  0, -1 };
  const short gxy[3] = { +1, +1, +1 };

  const short gyx[3] = { +1, +1, +1 };
  const short gyy[3] = { +1,  0, -1 };

  for (auto _ : state) {

    // x gradient: convolve in the x direction first
    for (std::size_t y = 0; y != rows; ++y) // note: need to calculate for the edge pixels too
      for (std::size_t x = 1; x != cols - 1; ++x)
        for (std::size_t o = 0; o != 3; ++o)
          scratch[to_index(x, y)] += smoothImg[to_index(x + o - 1, y)] * gxx[o];

    // x gradient: use the results of the first pass and convolve in the y direction
    for (std::size_t y = 1; y != rows - 1; ++y)
      for (std::size_t x = 0; x != cols; ++x)
        for (std::size_t o = 0; o != 3; ++o)
          gx[to_index(x, y)] += scratch[to_index(x, y + o - 1)] * gxy[o];

    // y gradient: convolve in the x direction first
    for (std::size_t y = 0; y != rows; ++y)
      for (std::size_t x = 1; x != cols - 1; ++x)
      {
        scratch[to_index(x, y)] = 0;
        for (std::size_t o = 0; o != 3; ++o)
          scratch[to_index(x, y)] += smoothImg[to_index(x + o - 1, y)] * gyx[o];
      }

    // y gradient: use the results of the first pass and convolve in the y direction
    for (std::size_t y = 1; y != rows - 1; ++y)
      for (std::size_t x = 0; x != cols; ++x)
        for (std::size_t o = 0; o != 3; ++o)
          gy[to_index(x, y)] += scratch[to_index(x, y + o - 1)] * gyy[o];

    // calculate magnitude and direction:
    const unsigned char v = 1;
    const unsigned char h = 2;
    const int t2 = threshold * threshold;
    for (std::size_t i = 0; i != cols * rows; ++i)
    {
      auto const x2 = gx[i] * gx[i];
      auto const y2 = gy[i] * gy[i];
      auto const sqr = x2 + y2;
      dirImg[i] = (sqr &gt;= t2) ? (x2 &gt;= y2) ? v : h : 0;
      gradImg[i] = std::sqrt((double)(sqr));
    }
  }
}
// Register the function as a benchmark
BENCHMARK(New_Version);
</code></pre>

<p>This could definitely be made neater and more general (e.g. the separable convolution could be abstracted to a separate function taking the image and 2 kernels).</p>

<p>Note that there are also other strategies for dealing with image edges (clamp samples to the edges, mirror, wrap, zero, etc.)</p>
    </div>