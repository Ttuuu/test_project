<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>It's not clear what benefit the code is receiving by using the Google Benchmark Library, there are other ways to measure the elapsed time of each of the merges. C++ provides time measurement functionality.</p>

<pre><code>    std::chrono::time_point&lt;std::chrono::system_clock&gt; start, end;
    start = std::chrono::system_clock::now();
    // execute merge here;
    end = std::chrono::system_clock::now();

    std::chrono::duration&lt;double&gt; elapsed_seconds = end-start;
    std::time_t end_time = std::chrono::system_clock::to_time_t(end);
</code></pre>

<p>The function <code>static const TestData&amp; get_test_data()</code> violates the Single Responsibility Principle because it is responsible for constructing the <code>TestData</code> struct as well as returning it. This may lead to a one time performance hit while the struct is being created.</p>

<p>It might be better if <code>main()</code> or a sub-function that main calls constructed the test data once and then passed the test data into each of the separate merge functions.</p>

<p>Creating the <code>result</code> vector with the sum of all the sizes of the contributory vectors will decrease or eliminate the number of memory allocations necessary when adding the data from the test vectors to the result.</p>

<p>Profiling each of the merge algorithms will help find bottle necks that you may be able to optimize out.</p>
    </div>