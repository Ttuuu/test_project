<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I am going to focus on these two lines of code:</p>

<pre><code>int infd = open(input.c_str(),O_RDONLY);
int outfd = open(output.c_str(),O_WRONLY|O_CREAT|O_EXCL,0664);
</code></pre>

<p>Since you are making a point of using modern C++ to reimplement <code>cp</code>, I would expect you to use the modern C++ way of writing files. Instead, you use POSIX functions that don't even have a namespace...</p>

<p>If you don't want to use the streams, at least consider using <code>std::fopen</code>. The only thing that you cannot do using functions from the Standard Library is to set file permissions, but you don't want to do this anyway. The user will have set the <code>umask</code> according to personal preferences, you don't need to deviate from that.</p>

<p>What happens if <code>input</code> doesn't exist? What happens in <code>output</code> cannot be created? To the user, the result is identical to a successful file copy. There is no way to know if the <code>cp</code> call succeeded. You should check the values of <code>infd</code> and <code>outfd</code>, which will be -1 in case of failure, and return an error code. You can even check <code>errno</code> and give the user some more information about why the file couldn't be opened or created.</p>

<p>Actually, if <code>output</code> cannot be created, you end up in a very long loop that ends with UB:</p>

<pre><code> auto num_written = 0; // This is an `int`.
 while(num_written &lt; num_to_write){
     num_written += write(outfd,buf.data()+num_written,count-num_written);
 }
</code></pre>

<p><code>write</code> returns -1 on failure (<code>outfd</code> being not valid is cause for failure of course), so <code>num_written</code> will be decremented by 1 until it overflows. <a href="https://stackoverflow.com/questions/16188263/is-signed-integer-overflow-still-undefined-behavior-in-c">Overflow is UB for signed integers</a>. Hopefully your implementation will lead to <code>num_written</code> to be very large at this point, breaking the loop.</p>
    </div>