<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Usually, we throw an exception if some pre-condition or assumption we've made about the code is violated. So unless <code>processResult</code> assumes/requires that the two string arguments will be equal to do its job, I wouldn't throw an exception.</p>

<p>When the program is as small as this, it could be okay to change the initial check to:</p>

<pre><code>if (args.length != 2 || lengthsEqual(args[0], args[1])) {
    throw new IllegalArgumentException("Need 2 string arguments of the same length");
}
</code></pre>

<p>Though, if the program will ever have to be altered to accommodate for strings of unequal length, then this will have to be changed. Generally, commercial code tries to be as reusable and extensible as reasonably possible to allow for quick extension and minimal introduction of bugs upon extending or altering code behaviour. Since we can't always predict the future, this is usually done by the programmer attempting to make a some assumption about where/how the code might have to be expanded in the future. If this program was under active development and intended to be developed upon for the foreseeable future, it might be a reasonable assumption that at some point in the future the program may have to handle two strings of differing length due to a new business requirement and, thus, we wouldn't put this exception here.</p>

<p>This is all highly contextual, and it's hard to make any meaningful decision with a single-purpose, one-time program like this. That being said, it's generally useful to keep an exception to as small a scope as you can so that you can more quickly pinpoint the potentially problematic code throwing the exception in the event of a bug, so I think it's okay to have two exceptions here, though maybe the first exception is better to be an <code>IllegalArgumentException</code> as well.</p>

<p><strong>Two potential issues:</strong></p>

<ul>
<li><p>I don't think there's any reason to use Integer.compare() instead of the <code>==</code> operator, since the return type of <code>length()</code> is a primitive <code>int</code> according to the Oracle JavaSE 7 documentation.</p></li>
<li><p>Check if <code>args.length != 2</code>, instead of checking it's less than 2 since somebody could supply too many strings as opposed to not enough.</p></li>
</ul>
    </div>