<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Welcome to CodeReview! Good first post.</p>

<h2>Comments</h2>

<p>Having comments is great. Your convention is a little odd - there's no need for triple hashes. A single hash at the beginning is more common.</p>

<h2>File handling</h2>

<p>Your intention was good, but the execution could be improved. Firstly, at this level, don't <code>except Exception</code>. It's too broad. Let exceptions be exceptional. You'll want to instead catch something more specific, in this case <code>FileNotFoundError</code>.</p>

<p>Another strategy for simplifying your code is, instead of opening the settings file twice, only open it once. Consider opening the file in <code>a</code> (append) mode, which will automatically create the file if it doesn't exist. Check the stream position, and if it's non-zero, the file has stuff, in which case you can seek to the beginning and try to read it. If the initial position is zero, then you know you have to write out defaults. Rather than writing out the default file contents in a pre-serialized format, write out the contents as serialized from an in-memory dictionary and don't read them back from the file. One 'gotcha' this avoids is that your existing file operations only explicitly close the file in two out of three cases.</p>

<h2>Python 3 niceties</h2>

<p>Rather than using the <code>%</code> string formatting operator, consider using interpolated, or "f" strings. That said, this:</p>

<pre><code>'%s' % self.get('res')['resolution']
</code></pre>

<p>shouldn't have a format call at all. If the resolution is numeric, simply call <code>str</code>.</p>

<h2>Stringly-typed options</h2>

<p><code>'True'</code>, as a string, should not exist once the settings file has been deserialized. It should be a grown-up boolean variable. Then, for one thing, this:</p>

<pre><code>if self.get('fullscreen')['fullscreen'] == 'True'
</code></pre>

<p>will simply be</p>

<pre><code>if self.get('fullscreen')['fullscreen']
</code></pre>

<h2>Control structures</h2>

<p>Somewhat heavy-handed use of return could be obviated:</p>

<pre class="lang-py prettyprint-override"><code>if event:
   if self.get('fullscreen')['fullscreen']:
      # ...
   else:
      # ...
else:
   # ...
</code></pre>

<p>No returns needed.</p>

<h2>Get</h2>

<p>Your <code>args</code> filtration could be simplified. Maybe use a dict for those mappings.</p>

<pre class="lang-py prettyprint-override"><code>arg_map = {
   'fs': 'fullscreen',
   'res': 'resolution',
   'resizex': 'rx',
   'resizey': 'ry',
   'fontfamily': 'fontf',
   'fontsize': 'fonts'
}

args = [arg_map.get(k, k) for k in args]
</code></pre>

<p>But why is this mapping occurring at all? Why doesn't <code>get</code> just accept the long-form arguments? Beyond that, why are you doing a prefix match on the configuration keys instead of the entire key?</p>

<h2><code>except: pass</code></h2>

<p>Never ever. Ever. For one thing, this renders Ctrl+C breaking impossible. Also, it defeats the entire purpose of the exception-handling system. If you know of a specific exception you're trying to address, catch that.</p>
    </div>