<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your <code>currentArary</code> [sic] shouldn't ever be empty. You should initialize it with <code>a[0]</code>, and from then on, if <code>a[i]</code> is not equal to <code>a[i-1]+1</code>, then you should set <code>currentArary</code> to <code>a[i]</code>. Waiting until the next iteration, and then putting what is now <code>a[i-i]</code> into the array, is needlessly opaque.</p>

<p>But since you're looking for consecutive integers, you don't need to store a copy of a subset of <code>a</code> at all; it's fully determined by the start element and the length.</p>

<pre><code>public static int[] getLongestAscending(int[] a) {
    int maxLength = 1;
    int maxStart = a[0];
    int curLength = 1;
    int curStart = a[0];
    for (int i = 1; i &lt; a.length; i++) {
        if ((a[i] != a[i-1]+1)||(i == a.length-1) {
            if (curLength &gt; maxLength) {
                maxLength = curLength;
                maxStart = curStart;
            }
            curLength = 1;
            curStart = a[i];
        } else {
            curLength++;
        }
    }
    return int[] array = IntStream.range(maxStart, maxStart+maxLength).toArray();
}
</code></pre>
    </div>