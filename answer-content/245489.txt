<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Unused Imports</h1>
<p>You don't use any of the imports in your code. Remove them.</p>
<h1><code>areMapEquals</code></h1>
<p>Dictionarys can be compared using the <code>=</code></p>
<pre><code>def areMapEquals(m1, m2):
    return m1 == m2
</code></pre>
<p>But at this point, this function is obsolete since you can now make this check in the <code>hasSameLetters</code> function. But eventually that function gets obsolete too, since you can do that calculation without a function too.</p>
<h1>Naming</h1>
<p>Functions and variables should be in <code>snake_case</code>, not <code>camelCase</code>.</p>
<h1>Counters</h1>
<p>Instead of creating a dict yourself, utilize the <code>collections.Counter</code> class, which does all of this for you. It also has it's own equal comparison, so you can reduce a lot of your code.</p>
<h1>Looping</h1>
<p>Your first loop is just for keeping track of the size. But if you look closely, <code>size</code> is always just one more than <code>i</code>, so just define size inside the second loop as such. This removes the need for the first loop, greatly increasing performance.</p>
<h1>Reuse variables</h1>
<p>You have <code>stringSize</code> (which should be <code>length</code>) which hold the size of the string, but you still have <code>len(s)</code> in your code. Just use that variable.</p>
<h1>Efficient Algorithms</h1>
<p>Here's something I wrote a while back that solve this very question:</p>
<pre><code>def count_anagrams(string: str) -&gt; int:
    """
    This counts the total amount of anagram substrings, given a string.

    @param str string - String to count anagrams.

    @return int - Number of anagrams.
    """
    n = len(string)
    _map = dict() 
    
    for i in range(n):
        substr = ''
        for j in range(i, n): 
            substr = ''.join(sorted(substr + string[j]))
            _map[substr] = _map.get(substr, 0)
            _map[substr] += 1

    return sum((v * (v - 1)) // 2 for v in _map.values())
</code></pre>
<p>While this doesn't utilize the <code>collections.Counter</code> class, it's still extremely efficient and gets the job done!</p>
    </div>