<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The <code>getInstance</code> methods are severely limiting the class and are a source of potential bugs. There is no reason that it shouldn't be possible, for example, to create two objects with that access two different database files:</p>
<pre><code>Morse morse1 = Morse.getInstance(Paths.get("file1"));
Morse morse2 = Morse.getInstance(Paths.get("file2"));
</code></pre>
<p>However in this example, <code>morse2</code> unexpectedly doesn't use <code>"file2"</code>, instead is the same instance as <code>morse1</code> which uses <code>"file1"</code>.</p>
<p>(EDIT: You should avoid setters, if you can. Immutable classes are usually preferable. If you, for example, want to change databases at runtime, it's preferable to create a new object using that other database, than changing an existing object.)</p>
<hr>
<p>The constructors should be structured differently, so that all the logic/validation only happens in a single one and the other constructors only call that one constructor with the default values.</p>
<p>EDIT: Currently you have two constructors that call <code>checkForDataBase()</code>, and another one that validates the separator. Instead you should have a single "main" constructor (probably <code>Morse(final Path dataBaseFile, final String separator, final Charset cs)</code>), than contains all the validation and have the others call that one using the default values for the missing parameters. For eaxmple:</p>
<pre><code>private final static String DEFAULT_SEPARATOR = " ";
private final static CharSet DEFAULT_CHARSET = StandardCharsets.UTF_8;

public Morse(final Path dataBaseFile, final String separator, final Charset cs) {
   // All validation and setting instance fields here
}

public Morse() {
  this(defaultDatabaseFile());
  // or: this(defaultDatabaseFile(), DEFAULT_SEPARATOR, DEFAULT_CHARSET)
}

public Morse(final Path dataBaseFile) {
  this(dataBaseFile, DEFAULT_SEPARATOR);
  // or: this(dataBaseFile, DEFAULT_SEPARATOR, DEFAULT_CHARSET)
}

public Morse(final Path dataBaseFile, final String separator) {
  this(dataBaseFile, separator, DEFAULT_CHARSET);
}
</code></pre>
<hr>
<p>Retrieving the default database file seems a bit convoluted, especially with the hard-coded class file name <code>"Morse.class"</code>, which easily can be overlooked, if the class is ever renamed.</p>
<p>Unless I'm mistaken (I don't like handling resources), it should be possible with:</p>
<pre><code>Paths.get(Morse.class.getResource("../Code.txt").toURI());
</code></pre>
<hr>
<p>The <code>assert</code> keyword is not for validating parameters. It is used during development to catch states than should never occur. <code>assert</code> would normally be disabled at production  runtime. Instead use <a href="https://docs.oracle.com/javase/8/docs/api/java/util/Objects.html#requireNonNull-T-" rel="nofollow noreferrer"><code>Objects.requireNonNull</code></a>.</p>
<hr>
<p><code>separator.contains(".")</code> is an unreliable way to check if a regular expression matches a period, because it is special character in regular expressions that matches any character. It probably would be better to check for <code>\.</code> (<code>"\\."</code> as a Java string). Or maybe not let the user directly assign a regular expression as the separator at all, but an array of chars/strings instead, from which you build a regular expression.</p>
<hr>
<p>Using <code>System.exit(1)</code> inside a utility class like this is unexpected and thus a bad idea. You should be throwing an exception here, which you could catch in <code>main()</code> and possibly use <code>System.exit()</code> there.</p>
<hr>
<p><code>checkForRegexValidity</code> seems unnesserily complex. There is no need to store the thrown exception. Just directly return <code>true</code> or <code>false</code>:</p>
<pre><code>private boolean checkForRegexValidity (String regex) {
    try {
        Pattern.compile(regex);
        return true;
    } catch (PatternSyntaxException exception) { 
        return false;
    }
}
</code></pre>
<hr>
<p>When encountering an exception when reading the database file, don't just print the stack trace and otherwise ignore the error. Personally I'd just let the exception go through and catch it outside this class. Actually you could just drop <code>checkForDataBase</code> and just have the IOException due to the missing file go through.</p>
<hr>
<p>During filling the map you are unnecessarily cleaning up and splitting the lines twice. With an additional <code>.map</code> step in the stream that can be avoided:</p>
<pre><code>return encodingSchema.stream().filter(s -&gt; !s.equals(""))
      .map(e -&gt; e.replaceAll(charSeparationRegex," ").strip().split("\\s+"))
      .filter(e -&gt; e.length &lt; 2) // also skip invalid lines
      .collect(Collectors.toMap(
                    e -&gt; e[0]
                    ,  e -&gt; e[1]
                    , (e1, e2) -&gt; e2
                    , HashBiMap::create)
            );
</code></pre>
<hr>
<p>I don't really see the point in using a <code>BiMap</code> here. If you where constantly adding or removing entries from it, then it would be certainly be a good idea, however in this case the map is static so I'd just create two normal maps.</p>
    </div>