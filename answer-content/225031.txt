<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I can't say much about the <code>Async</code> behavior of your solution, because I'm not that used to deal with asynchronous programming in F#, but at first sight it looks alright. Instead I'll concentrate on some other aspects.</p>

<hr>

<blockquote>
<pre><code>    let digitalIban =
        let rearrangedIban = iban.Substring(4) + iban.Substring(0,4)
        let replaceBase36LetterWithBase10String (s: string) (c: char) =
            s.Replace(c.ToString(), ((int)c - (int)'A' + 10).ToString())
        List.fold replaceBase36LetterWithBase10String rearrangedIban [ 'A' .. 'Z' ]
</code></pre>
</blockquote>

<p>This looks rather ineffective to me, because it iterates through the entire alphabet and query the entire <code>iban</code> string for each char in the alphabet instead of just iterate through the <code>iban</code> sequence:</p>

<pre><code>    let digitalIban =
        let replacer str ch =
            match ch with
            | d when Char.IsDigit ch -&gt; sprintf "%s%c" str ch
            | _ -&gt; sprintf "%s%d" str ((int)ch - (int)'A' + 10)

        iban.Substring(4) + iban.Substring(0,4) |&gt; Seq.fold replacer ""
</code></pre>

<hr>

<p>You could strengthen the relation between the validation and the database retrieval modules by defining a <code>IbanString</code>:</p>

<pre><code>type IbanString = 
    | IbanString of string

module IbanString =
    let toString = function IbanString(str) -&gt; str
</code></pre>

<p>The return value from <code>IbanValidation.validate</code> could then be:</p>

<pre><code>Result&lt;IbanString, ValidationError&gt;
</code></pre>

<p>and then <code>updateRequestWith</code> should only accept a <code>IbanString</code> instead of an arbitrary string:</p>

<pre><code>let updateRequestWith (context: DbContext.IbanDbContext) memberId (ibanValue: IbanString) = ...
</code></pre>

<p>In other situations when using <code>IbanValidation.validate</code> you know that the returned string is valid and encapsulated hence distinguishable from all other strings.</p>

<hr>

<blockquote>
<pre><code>type ValidationError =
    | IllegalCharacters
    | IncorrectLength
    | UnknownCountry
    | TypingError
</code></pre>
</blockquote>

<p>You could augment these values with some useful information:</p>

<pre><code>type ValidationError =
    | IllegalCharacters of char list
    | IncorrectLength of Actual:int * Required:int
    | UnknownCountry of string
    | TypingError of Message:string * Remainder:int
</code></pre>

<p>So for instance <code>checkCharacters</code> could be changed to:</p>

<pre><code>let private checkCharacters iban =
    match illegalCharacters.Matches(iban) with
    | col when col.Count &gt; 0 -&gt; Error (IllegalCharacters(col |&gt; Seq.map (fun m -&gt; m.Value.[0]) |&gt; Seq.toList))
    | _ -&gt; Ok iban
</code></pre>

<p>... giving some information about the invalid chars found.</p>
    </div>