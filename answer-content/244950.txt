<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>A first pass will see (as Vishesh suggests) collapsing one dimension, and properly unpacking the index tuple:</p>
<pre><code>import numpy as np

# Window size
W = 5

prices = np.arange(1, 10)  # npr.random([1000,1])*1000

max_array = np.zeros(prices.size-W)
for (index,), elem in np.ndenumerate(prices[:-W]):
    local_max = 0
    for i in range(1, W+1):
        price_return = prices[index + i] / elem
        local_max = max(local_max, price_return)
    max_array[index] = local_max
global_max = np.amax(max_array)
</code></pre>
<p>I've also replaced your random array with a simple one so that this is repeatable and verifiable. You should make your window size parametric or at least configurable via constant.</p>
<p>Unfortunately, none of the native Numpy options are great. Your best bet is to use Pandas:</p>
<pre><code>import numpy as np
import pandas as pd

# Window size
W = 5

rolled = (
    pd.Series(prices)
    .rolling(window=W)
    .min()
    .to_numpy()
)
max_array = prices[1-W:] / rolled[W-1:-1]
</code></pre>
<p>I have tested this to be equivalent. Note that you need to start with a rolling <em>minimum</em> in the denominator to get a maximum numerator.</p>
    </div>