<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Good</h1>

<p>I like most of what you've done so far as is:</p>

<ul>
<li>Using <code>[[</code> (double square brackets) for conditionals is a good practice.</li>
<li>Using <code>$()</code> for command substitution instead of the classic backticks is also a good modern shell practice.</li>
<li>Most of your variable substitutions are quoted.  This is a good habit in case the variable contains spaces it won't get broken up by shell parsing.</li>
</ul>

<h1>Could be better</h1>

<p>There are some minor things I'd improve:</p>

<ul>
<li>include the <code>#!</code> line at the top</li>
<li>typically you see folks add their <code>then</code>s to the end of the previous line like <code>if [[ cond ]]; then</code>.  Your outer loop could also be done as <code>while true; do</code>.</li>
<li>the comment gets sort of lost out on the right.  Why not put it on the line above?</li>
</ul>

<h1>Think about</h1>

<p>The script is getting invoked every second and chewing up some amount of CPU.  There's probably not much CPU being burned in this case, but one thing to consider is whether this sort of polling could be avoided.  Linux includes inotify as a function to let processes known when a file has changed so they don't have to constantly check the file themselves.  This is available in the shell through <a href="https://linux.die.net/man/1/inotifywait" rel="nofollow noreferrer"><code>inotifywait</code></a>.  If the file you're checking works with <code>inotifywait</code> you could avoid the <code>sleep</code>.</p>

<p>A bonus you get beyond conserving CPU from skipping <code>sleep</code> is that the script should run with lower latency.  Instead of needing to wait for up to a second to detect the change your script would be invoked within a small fraction of a second.</p>
    </div>