<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>(<em>"Rotation"</em> = <em>"shift"</em>.)</p>

<p>You can perform <strong><em>any</em></strong> rotation in constant time by devising a <strong><code>String</code></strong> wrapper that maintains the string itself and the index into that string which is to be considered as the head character of a rotation. Now, in order to rotate \$k\$ characters, just add \$k\$ to that internal offset and take the modulo of string length.</p>

<p>If you want to get a <strong><code>String</code></strong> out of that wrapper, just call its <strong><code>toString()</code></strong>. There is, however, an optimization: if the state of the wrapper is not "dirty", it returns the previous <strong><em>cached</em></strong> rotation. Otherwise, a new string will be created and the state marked as <strong>not dirty</strong>.</p>

<p>I had this in mind:</p>

<pre><code>import java.util.Objects;

public class StringRotation {

    private final String string;
    private int headIndex;
    private boolean dirty;
    private String lastCreatedString;

    public StringRotation(String string) {
        this.string = Objects.requireNonNull(string,
                                             "The input string is null.");
        this.dirty = true;
    }

    public StringRotation rotate(int rotationCount) {
        headIndex = mod(headIndex + rotationCount, string.length());
        dirty = true;
        return this;
    }

    public char charAt(int index) {
        checkIndexWithinBounds(index);
        return string.charAt(mod(headIndex + index, string.length()));
    }

    @Override
    public String toString() {
        if (!dirty) {
            return lastCreatedString;
        }

        int stringLength = string.length();
        StringBuilder sb = new StringBuilder(stringLength);

        for (int i = 0; i &lt; stringLength; ++i) {
            sb.append(charAt(i));
        }

        dirty = false;
        lastCreatedString = sb.toString();
        return lastCreatedString;
    }

    private void checkIndexWithinBounds(int index) {
        int stringLength = string.length();

        if (index &lt; 0) {
            throw new IndexOutOfBoundsException(
                    "The character index is negative: " + index);
        }

        if (index &gt;= stringLength) {
            throw new IndexOutOfBoundsException(
                    "The character index is too large: " + index + 
                    ". The length of this string is " + stringLength);
        }
    }

    private static int mod(int a, int q) {
        int ret = a % q;
        return ret &lt; 0 ? ret + q :  ret;
    }

    public static void main(String[] args) {
        for (int i = 0; i &lt; 10; ++i) {
            System.out.println(new StringRotation("hello").rotate(i));
        }

        System.out.println("---");

        for (int i = 0; i &gt; -10; --i) {
            System.out.println(new StringRotation("hello").rotate(i));
        }
    }
}
</code></pre>
    </div>