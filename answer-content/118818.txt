<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your algorithm can be summarized as follows:</p>

<blockquote>
  <ol>
  <li>Fetch the list of cookies and sort in ascending order.</li>
  <li>Initialize a counter to zero</li>
  <li><strong>If the smallest cookie is less than <em>K</em>,</strong>  then:
  
  <ul>
  <li>(a) Increment the counter and combine this cookie with the next smallest cookie (or return -1 if there are fewer than 2 cookies left)</li>
  <li>(b) Remove the two smallest cookies from the list and add the new cookie to the list</li>
  <li>(c) Sort the list in ascending order again</li>
  </ul></li>
  <li><strong>Otherwise,</strong> exit with the value of the counter</li>
  <li>Go back to step 3</li>
  </ol>
</blockquote>

<p>Your code is taking a long time to run because you are sorting the entire list at step 3(c). This is unnecessary; since the list is already sorted (apart from the new value being added), you can just do a binary search in \$\mathcal{O}(\log(n))\$ time to find the correct position in which to insert the combined cookie. This is going to be much faster than sorting, which typically takes \$\mathcal{O}(n\log(n))\$ time.</p>

<p>An even better approach would be to use a <a href="https://en.wikipedia.org/wiki/Binary_heap" rel="noreferrer">min-heap</a> data structure, which will keep track of the smallest element in a set in the most efficient way possible.</p>

<hr>

<h3>Addendum:</h3>

<p>I converted your code to use a <a href="http://docs.oracle.com/javase/1.5.0/docs/api/java/util/PriorityQueue.html" rel="noreferrer">PriorityQueue</a> data structure (Java's equivalent to a min-heap). I also created some test data using the following code:</p>

<pre><code>perl -e '$n=100000;$h=$n/2;print "$n $h\n";for $i(0..$n){$r = int(rand()*$n); print "$r ";};print "\n";' &gt; testdata.txt
</code></pre>

<p>Your original code took 1 minute to process 100,000 items. With a priority queue, this went down to 0.7 seconds. Here's my code:</p>

<pre><code>import java.util.*;

public class Solution2 {

  private static int getMinStepsToGetK(long k,PriorityQueue&lt;Integer&gt; newQueue){
    int count=0;
    while(newQueue.peek()&lt;k) {
      if(newQueue.size()&gt;=2) {
        count++;
        int tempFirst = newQueue.poll();
        int tempSecond = newQueue.poll();
        newQueue.offer(tempFirst+(tempSecond*2));
      }
      else {
        return -1;
      }
    }
    return count;
  }

  public static void main(String[] args) {
    Scanner scanObj = new Scanner(System.in);
    int numOfCookies = scanObj.nextInt();
    long minSweetness = scanObj.nextLong();
    PriorityQueue&lt;Integer&gt; newQueue = new PriorityQueue&lt;Integer&gt;();
    for(int i=0;i&lt;numOfCookies;i++) {
      newQueue.offer(scanObj.nextInt());
    }
    System.out.println(getMinStepsToGetK(minSweetness,newQueue));
  }

}
</code></pre>

<p><strong>Note:</strong> There's no need to create a new <code>Solution</code> object in order to access the <code>getMinStepsToGetK()</code> member function. Since it isn't needed externally, I declared it as a <code>private static</code> function.</p>
    </div>