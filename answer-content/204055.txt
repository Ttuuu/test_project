<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>I believe the time complexity is <span class="math-container">\$O(n^2)\$</span>, but I'd like to know for sure</p>
</blockquote>

<p>There's a general method for figuring out the time complexity for a piece of code, which is to annotate each line with the count of times it executes, and the average time it takes to execute, and then multiply and add. Before we do this it helps to rewrite the code so that just one thing is happening on each line.</p>

<pre><code>CODE                                   COUNT   TIME
=====================================  ======  ====
def rotate_image(img):                 
    n = len(img)                       1       t0
    indexes = range(n)                 1       t1
    rotated_image = []                 1       t2
    for _ in indexes:                  n       t3
        rotated_image.append([])       n       t4   (*)
    for i in indexes:                  n       t5
        for j in indexes:              n*n     t6
            k = n - j - 1              n*n     t7
            row = rotated_image[k]     n*n     t8
            entry = img[i][j]          n*n     t9
            row.append(entry)          n*n     t10  (*)
    return rotated_image               1       t11
</code></pre>

<p>Here <span class="math-container">\$t_0, t_1, \ldots, t_{11}\$</span> are constants giving the average time taken to execute each line of code (their exact values don't matter for the big-O analysis).</p>

<p>How do I know that these are all constants, and don't depend on <span class="math-container">\$n\$</span>? Well, I used my knowledge about how Python is implemented, but in cases of doubt I consulted the <a href="https://wiki.python.org/moin/TimeComplexity" rel="nofollow noreferrer">Time Complexity</a> page on the Python Wiki. This tells us, for example, that getting the length of a list takes <span class="math-container">\$O(1)\$</span> (and so <span class="math-container">\$t_0\$</span> is constant); that getting an item from a list takes <span class="math-container">\$O(1)\$</span> (and so <span class="math-container">\$t_8\$</span> and <span class="math-container">\$t_9\$</span> are constant). The two lines marked (*) have calls to <code>list.append</code>: the Time Complexity page tells us that these calls take <a href="https://en.wikipedia.org/wiki/Amortized_analysis" rel="nofollow noreferrer">amortized time</a> <span class="math-container">\$O(1)\$</span>. This means that the time taken by individual calls may vary, but on average it is constant.</p>

<p>So, adding all this up, the total time taken on input of size <span class="math-container">\$n×n\$</span> is <span class="math-container">$$T(n) = t_0 + t_1 + t_2 + t_{11} + n(t_3 + t_4 + t_5) + n^2(t_6 + t_7 + t_8 + t_9 + t_{10}).$$</span> If <span class="math-container">\$n≥1\$</span>, <span class="math-container">$$T(n) &lt; n^2(t_0 + t_1 + t_2 + t_3 + t_4 + t_5 + t_6 + t_7 + t_8 + t_9 + t_{10} + t_{11})$$</span> and so <span class="math-container">\$T(n) = O(n^2)\$</span>.</p>

<p>Using the same method, we can get lower bounds too. For all <span class="math-container">\$n≥0\$</span>, <span class="math-container">$$T(n) &gt; n^2(t_6 + t_7 + t_8 + t_9 + t_{10})$$</span> and so <span class="math-container">\$T(n) = Ω(n^2)\$</span>. Combining these two results, <span class="math-container">\$T(n) = Θ(n^2)\$</span>.</p>

<p>(Once you get comfortable with using this method, the result in simple cases like this will be obvious, and so you can skip the detail, but it's useful to know that you can produce the detail if needed in more complex cases.)</p>
    </div>