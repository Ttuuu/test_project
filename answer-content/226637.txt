<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ol>
<li><p>Strip out all your comments.</p>

<p>The best of them are just unbelievably redundant, as they just restate the code, using as many words as feasible.</p>

<p>A different Q&amp;A going more into the comments is "<em><a href="https://codereview.stackexchange.com/questions/90111/guessing-a-number-but-comments-concerning">Guessing a number, but comments concerning</a></em>".</p></li>
<li><p>Reduce <code>Node</code> to the bare necessities, and make it a private member of <code>List</code>.</p>

<p>It's an implementation-detail of it, and giving it an elaborate interface and its own invariants to maintain needlessly complicates things.</p>

<pre><code>struct Node {
    struct Node* link;
    T data;
};
</code></pre></li>
<li><p>Only application-code can have a good reason to interact directly with the user without explicit request. All other code should refrain from doing so, instead using exceptions, error-codes and error-values to delegate the choice to the caller.<br>
Composability, reusability and testability suffer if this basic point is violated.</p></li>
<li><p>Use the ctor-init-list to initialize the members, that's what it's for. Put the tear-down directly into the dtor, and you can implement <code>.clear()</code> by swapping with a temporary.</p></li>
<li><p>If you use pointers-to-pointers, you can dispense with all the special-casing.</p></li>
<li><p>Implement a proper iterator-interface:</p>

<ol>
<li>You can dispense with the band-aid of the internal iterator.</li>
<li>You can use standard algorithms. Use them to implement your convenience-functions, unless you drop them completely as redundant.</li>
<li>You can stop keeping track of any but the first node, only allowing insertion at the head or given an iterator.</li>
</ol>

<p>All those aspects simplify the implementation and make the abstraction more useful.</p></li>
<li><p>Keep to the standard interface where possible. While doing your own thing may be fun, the jarring inconvenience is unsupportable. This is not a fashion show.</p></li>
<li><p><code>pointer == nullptr</code> can be simplified to <code>!pointer</code>. Just like <code>pointer != nullptr</code> is nearly always equivalent to <code>pointer</code>, though where the exact type is important <code>!!pointer</code> works.</p></li>
</ol>
    </div>