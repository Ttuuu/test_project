<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>A bit late but looks good to me. You could use <code>Array.prototype.fill</code> instead of <code>arrayLengthN</code>, and perhaps a reducer as the function but that’s a matter of taste:</p>

<pre><code>// assignment as expression to avoid explicit returns
set = (obj, key, value) =&gt; (obj[key] = value, obj)

decode = (output, [group, {count, ...entries}]) =&gt;
  set(output, group, Object.entries(entries).reduce((acc, [key, values]) =&gt;
    set(acc, key, [].concat(...values.map((n, i) =&gt; Array(count[i]).fill(n))))
  , {}))
</code></pre>

<p>so you could <code>Object.entries(data).reduce(decode, {})</code>.</p>

<p>I used <code>concat</code> because in my node version there wasn’t support for <code>flat</code>.</p>

<p>I like this because all the “variable” names are argument names (although that’s  bit of a moot point).</p>
    </div>