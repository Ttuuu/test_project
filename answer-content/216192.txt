<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Another thing to keep in mind when doing security focused applications is <a href="https://en.wikipedia.org/wiki/Reverse_engineering#Reverse_engineering_of_software" rel="nofollow noreferrer">reverse engineering</a>.<br>
Using that, a potential attacker can simply analyze your compiled program and then binary patch it to circumvent any security measures you have put in place.
Of course in your case this is rather trivial because the source code is available. However even without the original source it can be possible to do so for example by looking for certain tell-tale strings.</p>

<p>Running your program gives some great hints about program flow via the strings <code>Access Denied!</code> and <code>Access Granted!</code> respectively. If one were to analyze your program it would be easy to find references to above strings to pinpoint the location in your code that needs to be patched.<br>
Ultimately your program comes down to this part:</p>

<pre><code>if (isMatch(sha256(key), storedKey)) {
    cout &lt;&lt; "Acces Granted!\n";
}
else {
    cout &lt;&lt; "Access Denied!\n";
}
</code></pre>

<p>Which when <a href="https://en.wikipedia.org/wiki/Disassembler" rel="nofollow noreferrer">disassembled</a> could look something like this:</p>

<p><a href="https://i.stack.imgur.com/soYvV.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/soYvV.png" alt="access denied"></a></p>

<p>Notice how you can see part of your <code>if</code> statement, namely the condition test and then a jump (JNZ) as well as the message <code>Access Denied!</code>. if you follow the jump you will get to this part:</p>

<p><a href="https://i.stack.imgur.com/3NXW8.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/3NXW8.png" alt="access granted"></a></p>

<p>Which just happens to be the "protected" part of your program. The attacker now only has to "patch" the jump to always jump to the right location of your program regardless of user input.</p>

<p>In order to protect against this you can read up on obfuscating programs and making them harder to <a href="https://en.wikipedia.org/wiki/Software_cracking" rel="nofollow noreferrer">"crack"</a>.</p>
    </div>