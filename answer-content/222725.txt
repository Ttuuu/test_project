<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Performance</h3>

<p>Your solution is a single pass with time complexity <span class="math-container">\$O(n)\$</span>. It's a small variation of the <a href="https://leetcode.com/problems/best-time-to-buy-and-sell-stock-ii/solution/" rel="nofollow noreferrer">proposed solution</a>. </p>

<h3>Conventions</h3>

<ul>
<li>use <code>static</code> when no instance state/operations are used</li>
<li>use a clear, non-abbreviated method name <code>CalculateMaximumProfit</code></li>
<li>always guard against bad user input in <code>public</code> methods</li>
<li>prefer the use of <code>var</code> when the type is obvious when reading the code</li>
<li>prefer whitespace between operands and operators <code>prices.Length - 1</code></li>
<li>clean up waisted whitespace (in this case, after the <code>return</code> statement)</li>
</ul>

<p>applied to your code:</p>

<pre><code> public static int CalculateMaximumProfit(int[] prices)
 {
     prices = prices ?? throw new ArgumentNullException(nameof(prices));
     var max = 0;
     for (var i = 0; i &lt; prices.Length - 1; i++)
     {
         if (prices[i] &lt; prices[i + 1])
         {
             max += prices[i + 1] - prices[i];
         }
     }
     return max;
 }
</code></pre>
    </div>