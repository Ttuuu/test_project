<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The crux of the problem comes to understanding how to split the work load into smaller more manageable problems. Firstly you should find the set of combinations that total the wanted result.</p>

<p>Say we have 4 10 sided dice, and we want to know the set of dice that can total 10 they would be:</p>

<pre><code>1117
1126
1135
1144
1225
1234
1333
2224
2233
</code></pre>

<p>To figure this out you allow the next item to be at least the same as the current value. So 1 &lt;= 1 &lt;= 1 &lt;= 7. This is a fairly easy function to create.</p>

<p>For each value in the set we want to find the <a href="https://en.wikipedia.org/wiki/Permutation#Permutations_of_multisets" rel="nofollow noreferrer">permutations of the multiset</a>. This is as 1117 can be any of:</p>

<pre><code>1117
1171
1711
7111
</code></pre>

<p>And so we can use the calculation from the Wikipedia page. We then want the total of all these permutations of the set. This results in the total amount of rotations of the dice to get the total. And then we just divide by the total amount of permutations of the dice.</p>

<hr>

<p>Using the following for finding the set:</p>

<pre><code>def sorted_dice_sigma_set(n, f, s):
    f += 1
    def inner(n, s, m):
        if n == 1:
            if s &gt;= m and s &lt; f:
                yield (s,)
        else:
            n -= 1
            for i in range(m, min(s, f)):
                for v in inner(n, s - i, i):
                    yield (i,) + v
    return inner(n, s, 1)
</code></pre>

<p>I get a chance of 0.0374894389 which <a href="https://www.wolframalpha.com/input/?i=10+10+sided+dice" rel="nofollow noreferrer">seems about right</a> in under a second. (This is for 10 10 sided dice totaling 50)</p>
    </div>