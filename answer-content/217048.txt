<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>If your data is strictly integer values, you can use <code>user.x_count in range(...)</code> to test whether or not the <code>user.x_count</code> value is a member of the <code>range(...)</code> set.  Ie)</p>

<pre><code>def getUsers(user_array):
    group1 = sum(1 for user in user_array if user.x_count in range(1, 11))
    group2 = sum(1 for user in user_array if user.x_count in range(11, 51))
    # ... etc ...
</code></pre>

<p>This unfortunately will require several passes through your <code>user_array</code> data, so will not work if that data is ephemeral, such as iterator or generator based.</p>

<p>A more complex method will categorize the <code>user.x_count</code> value into a group value, and then increment the appropriate group counter.  <code>bisect</code> will find an insertion index in a sorted array, so we can leverage this to turn a <code>user.x_count</code> into a group based on its corresponding insertion index.  This will function properly if floating point values are encountered.</p>

<pre><code>import bisect

def getUsers(user_array):
    thresholds = (0, 10, 50, 100, 200, 500, 1000)
    groups = [0] * (len(thresholds) + 1)

    for user in user_array:
        groups[bisect.bisect_left(thresholds, user.x_count)] += 1

    return groups[1:]
</code></pre>

<p>Notice there are no more group-specific variables, like <code>group1</code>.  Instead, all counters are created based on data, allowing you to add additional groups without modifying lines of code; you just modify <em>data</em>.</p>
    </div>