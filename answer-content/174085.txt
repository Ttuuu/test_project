<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The code looks pretty good, but a few things that can get you into trouble should be addressed:</p>

<p>Don't <code>#include &lt;bits/stdc++.h&gt;</code>. See <a href="https://stackoverflow.com/questions/25311011/how-does-include-bits-stdc-h-work-in-c#25311198">this answer on Stack Overflow</a> for an explanation of why. TL;DR - it includes <em>everything</em> and you don't need all that it includes. It's just making your compile times take much longer than they should.</p>

<p>There's no need to use <code>long long</code> for values up to and including 1,000,000. A 32-bit <code>long</code> will do just fine with plenty of room in case you go over.</p>

<p>You should avoid global variables. In a program of this size it's no big deal, but it's a bad habit to get into. If your program grows to a larger size, it can become very difficult to reason about why and where a global variable is being changed, making it harder to find and fix bugs or to extend the application's functionality.</p>

<p>Be careful creating such large arrays. In this case, because they are global, they are in your program's data segment rather than on the stack so it's not an issue. However, if you were to create them on the stack in this manner, there is a chance that you could end up with a stack overflow error. 1 million <code>bool</code>s will take up at least 1 Megabyte of memory. Many applications have a stack that is smaller than that, or only a little larger by default. </p>

<p>For readabliity, I recommend using more spaces in your code. In particular, I always leave a space before and after any operator. So your <code>main()</code> function would look more like this:</p>

<pre><code>int main()
{
    gencriba();
    int c;
    cin &gt;&gt; c;
    cout &lt;&lt; criba [ c ] &lt;&lt; endl;
    return 0;
}
</code></pre>

<p>It makes it easier to see at a glance what's a variable and how they're being operated on.</p>

<p>In terms of performance, the best optimization is usually a better algorithm. <a href="https://stackoverflow.com/questions/453793/which-is-the-fastest-algorithm-to-find-prime-numbers#453800">This Stack Overflow Question</a> asks which algorithms are fastest and has several answers.</p>
    </div>