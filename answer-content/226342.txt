<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here are some suggestions.</p>

<ul>
<li><p><code>__DYNAMICS_H__</code> is a reserved identifier because it contains consecutive underscores.  Use a non-reserved identifier like <code>DYNAMICS_H_</code>.  Also, this name is too common and may introduce name clashes.  One solution is to append a sequence of random characters.</p></li>
<li><p>I see no reason to make <code>Clonables</code> a friend of <code>Clonable</code>.  The latter doesn't have anything private.</p></li>
<li><p>Your <code>Clonables::m_clonables</code> owns the objects, so it should use <code>std::unique_ptr</code> instead of plain pointers.  This way, you don't need to care about the copy operations, move operations, or destructors.  The default constructor is also redundant.  Also, I don't see why you make the destructor of <code>Cloneables</code> private.</p></li>
<li><p><code>Instance</code> is effectively a global variable.  Global variables are generally discouraged in C++.  They should belong to the place where they are used.</p></li>
<li><p><code>AddClonable</code> should take a <code>std::string_view</code> or, in C++14, take a <code>std::string</code> by value and move it into the operation.  ALL-CAPS names are usually used for macros.  And <code>clone</code> should be <code>const Clonable*</code>.  First performing a <code>find</code> and then do <code>[]</code> is wasteful.  Use <code>emplace</code>:</p>

<pre><code>void AddClonable(std::string name, const Clonable* clone)
{
    m_clonables.emplace(std::move(name), clone);
}
</code></pre></li>
<li><p>In <code>Find</code>, the variable <code>clone</code> isn't really necessary.  The extra copy is avoidable in C++14 by using a template:</p>

<pre><code>template &lt;typename T&gt;
const Clonable* Find(const T&amp; name)
{
    auto it = m_clonables.find(name);
    if (it == m_clonables.end())
        return nullptr;
    else
        return it-&gt;second;
}
</code></pre>

<p><code>Create</code> is similar.</p></li>
<li><p>The <code>AddClonable</code> class feels questionable from a design perspective.</p></li>
</ul>

<p>These should be enough to get you started.</p>
    </div>