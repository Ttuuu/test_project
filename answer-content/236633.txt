<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your code, while it works, has a lot of room for improvement.</p>

<h1>Naming conventions</h1>

<p>Python has a best practice guide for style and naming conventions called <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">PEP 8</a>. Your variable names generally follow the lines of this guide, but <code>lenofalist</code> should be called <code>len_of_alist</code>. </p>

<h1>Duplicate code</h1>

<p>Your code has a lot of duplicate code. 5 lines out of 19 are copied and pasted, that's over 25%. It lowers readability and makes any change to your code harder, as it may have to be changed twice.</p>

<p>In your case, the <code>if ... else</code> construct can be avoided altogether by exiting the loop before the last element is reach if the length of the list is odd.</p>

<h1>Use <code>for</code> loops</h1>

<p>You use <code>while</code> loops. It works, but is not the best fit for your case. You have to initialize an index and increment it manually, which makes the code longer and more complicated than it needs to be. Also, using <code>i</code> instead of <code>index</code> for a loop counter is generally accepted, as it is very common.</p>

<pre><code>for i in range(0, len_of_alist, 2):
    # your code here
</code></pre>

<p>is functionally the same as your while loops, while being more concise and readable.</p>

<h1>Swapping elements</h1>

<p>In Python, you can swap the values of two variables using the following construct:</p>

<pre><code>a, b = b, a
</code></pre>

<p>Your way of using a temporary variable is more language agnostic, but the Python way is much cleaner.</p>

<h1>Make your code a function</h1>

<p>Let's imagine you want to swap neighboring elements of a list as part of a larger project. It would be far more convenient and clear having this code in a function and calling it where you need it instead of inserting your code snippet where needed.</p>

<p>If you are using Python 3.5 or higher, you can use a type hint to make sure your function is indeed working with a list.</p>

<h1>Putting it all together</h1>

<p>Here is my take on improving your code:</p>

<pre><code>def swap_neighbors(alist: list):
    for i in range(0, len(alist)-1, 2):
        alist[i], alist[i + 1] = alist[i + 1], alist[i]


my_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]
swap_neighbors(my_list)
</code></pre>

<p>As a side effect, there are no variables that need to be declared ahead, cleaning up the code even further.</p>
    </div>