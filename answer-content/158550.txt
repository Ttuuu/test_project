<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Observations and Suggestions</h1>

<ul>
<li><p>Operate on pi directly.</p></li>
<li><p>You can eliminate the <code>pi = 4 * number;</code>.</p></li>
<li><p>You are using more operations than are necessary.</p></li>
<li><p>I prefer <code>decimal</code> over <code>double</code> here for precision.<br>
<code>Decimal</code> is slower and at 6 digits of precision  I don't think <code>double</code> would get you in trouble.  More precision <code>double</code> could introduce errors which are not self correcting.</p></li>
<li><p>Do 2 iterations in one overall iteration of the loop and eliminate
the modulo operator <code>%</code></p></li>
<li><p>Eliminate the casting of <code>int</code> to <code>decimal</code></p></li>
<li><p>The average of + and - is going to be the best current estimate  </p></li>
<li><p>The answer will between + and - if no rounding error as been
introduced</p>

<pre><code>public static decimal PI3()
{   
    decimal pi = 4m, iteration = 3m;
    do
    {  
         pi -= 4m / iteration;
         iteration += 2m;
         pi += 4m / iteration;
         iteration += 2m;
         //Debug.WriteLine(pi);
    } while (Decimal.Round(pi, 5)  !=  3.14159m);
    return Decimal.Round(pi, 5);
}
</code></pre></li>
</ul>

<p>In reply to OP's question in comments:</p>

<p>Test this versus your solution or other proposed solutions:</p>

<pre><code>public static decimal PI4()
{
    decimal pi = 4m, iteration = 3m, piAvg;
    do
    {   
        pi = Decimal.Subtract(pi, Decimal.Divide(4m, iteration));
        piAvg = pi;
        iteration = decimal.Add(iteration, 2m);
        pi = Decimal.Add(pi, Decimal.Divide(4m, iteration));
        piAvg = Decimal.Divide(Decimal.Add(pi, piAvg), 2m);
        iteration = decimal.Add(iteration, 2m);
        if(decimal.Add(iteration, 1m) % 100000m == 0) {
            Debug.WriteLine(piAvg);
        }
    } while (Decimal.Round(piAvg, 10) != 3.1415926536m);      //3.1415926535897932384626433833
    return Decimal.Round(piAvg, 10);
}
</code></pre>
    </div>