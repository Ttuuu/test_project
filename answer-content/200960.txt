<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I can't give special improvements for performance in general, but I can give you a first impression of your code and some improvements I would take:</p>

<p><strong>playGame and endGame Method</strong></p>

<p>First for a plain true/false or a/b decision based on terminal input like you use it
in the methods <code>playGame()</code> and <code>endGame()</code> I would use <code>equalsIgnoreCase()</code> or something like that:</p>

<p>So I would turn</p>

<pre><code>switch (an)
{
    case "Higher":
    case "higher":
    case "H":
    case "h":
    {
        break;
    }

    ...
}
</code></pre>

<p>in something like</p>

<pre><code>if(an.equalsIgnoreCase("higher") || an.toLowerCase().startsWith("h"))
{
    ...
}
else if(an.equalsIgnoreCase("lower") || an.toLowerCase().startsWith("l"))
{
    ...
}
else
{
    ...
}
</code></pre>

<p>Maybe it is a personal opinion, but I think it is more readable...</p>

<p><strong>paint Method</strong></p>

<p>Moreover I wouln't call <code>System.out.print()</code> all the time like you do it in
your <code>paint()</code> method:</p>

<p>I would say the method <code>graphics()</code> shouldn't print the card string itself
to output stream, instead it should just return the string...</p>

<pre><code>String graphics(int card, int row) { ... }
</code></pre>

<p>This increases the reuse of this method and makes it possible to format
your output in your <code>paint()</code> method...</p>

<p>For example instead of writing</p>

<pre><code>for (int i = 0; i &lt; 8; i++)
{
    graphics(set[0], i);
    System.out.print("  ");
    graphics(set[1], i);
    System.out.print("  ");
    graphics(set[2], i);
    System.out.print("  ");
    graphics(set[3], i);
    System.out.println("");
}
</code></pre>

<p>I would write something like this</p>

<pre><code>for (int i = 0; i &lt; 8; i++)
{
    System.out.printf("%s  %s  %s  %s%n", graphics(set[0], i), graphics(set[1], i), graphics(set[2], i), graphics(set[3], i));
}
</code></pre>

<p><strong>graphics Method</strong></p>

<p>In addition, I would use a collection to store the string parts of each card something like a <code>Map</code> in your <code>graphics()</code> method...</p>

<pre><code>Map &lt;Integer, List &lt;String&gt;&gt; cards; // Each card is structured in a list of rows...
</code></pre>

<p>To access a specific row of a card to print it you just write something like</p>

<pre><code>String row = cards.get(numberOfCard).get(numberOfRow);
</code></pre>

<p>The usage of such a collection will simplify your <code>graphics()</code> method a lot!</p>

<p><em>This are also a few suggestions, in addition I would write a extra class for <code>Card</code> and seperate more the logic from the interface also for increasing readability... But this are just hints...</em></p>
    </div>