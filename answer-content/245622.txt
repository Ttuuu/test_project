<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>In addition to what Reinderien posted:</p>
<h1>Look at <code>std::forward_list</code></h1>
<p>Your linked list is a single-linked list, the closes equivalent in the standard library is <a href="https://en.cppreference.com/w/cpp/container/forward_list" rel="noreferrer"><code>std::forward_list</code></a>. You will notice from the documentation of <code>std::forward_list</code> that it doesn't implement a <code>push_back()</code>, and its <code>erase()</code> function only takes iterators, not indices. All this is to keep this data structure light and focused only on the properties that a single-linked list has: inserting and removing at the head is fast, and you can iterate over it in one direction. There is no <code>operator[]</code> overload.</p>
<p>Slower operations, like finding the node at a given index, are left to other functions such as <a href="https://en.cppreference.com/w/cpp/iterator/advance" rel="noreferrer"><code>std::advance()</code></a>. And this makes it clear that if you want to do something like access random elements, you are better off using a different data structure, such as a <code>std::vector</code>.</p>
<h1>Spelling</h1>
<p>There are some spelling errors in your code:</p>
<ul>
<li><code>LincedList</code> -&gt; <code>LinkedList</code></li>
<li><code>currectNode</code> -&gt; <code>currentNode</code> (and some variants)</li>
</ul>
<p>Maybe English is not your native language, that's fine. There are some tools that can help you find and fix common spelling errors in source code, like <a href="https://github.com/codespell-project/codespell" rel="noreferrer">codespell</a>. Consider running them on your code from time to time.</p>
<h1>Don't do bounds checking</h1>
<p>Well, you asked how to improve performance.
In C++ it is normal for standard containers to not do any bounds checking. The burden of bounds checking is placed on the caller. This avoids some overhead every time your functions are called.</p>
<p>Not throwing exceptions also allows code using your class to be compiled without exceptions enabled, which can have various benefits.</p>
    </div>