<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Avoid wildcard imports</h2>

<p>You should use import <code>tkinter as tk instead</code> of <code>from tkinter import Tk, Canvas</code>. This is a <a href="https://www.python.org/dev/peps/pep-0008/?#imports" rel="nofollow noreferrer">PEP8</a> recommendation where you can find the reason of this. Of course, in this case, you have to prefix your widgets with <code>tk</code>. For instance: <code>my_button = tk.Button(...)</code></p>

<h2>Remove useless comments</h2>

<p>To be honest, most of your comments (docstrings, to be exact) can be removed. Let us take an example:</p>

<pre><code>def double_click(self, event):
    '''  set flag when there is a double click '''
    self.double_click_flag = True
</code></pre>

<p>The docstring is just noisy. It does not bring any additional information when I read <code>self.double_click_flag = True</code>. That comment just repeats what the instruction already tells me. Avoid repeating yourself, even through comments.</p>

<p>The same is true when it comes to inline comments. Example:</p>

<pre><code>self.aw.bind('&lt;Button-1&gt;', self.clicked)  # bind left mouse click
</code></pre>

<h2>Use the main guard</h2>

<p>Sometimes we want to run some code only if the program was used by itself and not when it was imported from another module, for this reason it is good to use <a href="https://stackoverflow.com/questions/419163/what-does-if-name-main-do"><code>if __name__ == "__main__"</code></a>:</p>

<pre><code>def main():
    root = tk.Tk()
    window = tk.Canvas(root, width=400, height=400, bg='grey')
    mouse = MouseControl(window)
    window.place(x=0, y=0)
    window.mainloop()


if __name__ == "__main__":
    main()
</code></pre>

<h2>Simplify the handlers</h2>

<p>I find your handlers having unnecessary code. Simply take advantage of the button events themselves and get rid of all those unnecessary flags which are rather cumbersome in case you want to add more code in the future (because they play the role of global variables, which thing we do not like in programming). </p>

<p>Taking in consideration what has been said so far, here is your code cleaned:</p>

<pre><code>import tkinter as tk


class MouseControl:        
    def __init__(self, canvas):            
        self.canvas = canvas
        self.canvas.bind('&lt;Button-1&gt;', self.clicked)  
        self.canvas.bind('&lt;Double-1&gt;', self.double_click)  
        self.canvas.bind('&lt;ButtonRelease-1&gt;', self.button_released)  
        self.canvas.bind('&lt;B1-Motion&gt;', self.moved)  

    def clicked(self, event):      
        print('single mouse click event at ({}, {})'.format(event.x, event.y))

    def double_click(self, event):
        print('double mouse click event')

    def button_released(self, event):        
        print('button released')

    def moved(self, event):        
        print('mouse position is at ({:03}. {:03})'.format(event.x, event.y), end='\r')    

def main():
    root = tk.Tk()
    window = tk.Canvas(root, width=400, height=400, bg='grey')
    mouse = MouseControl(window)
    window.place(x=0, y=0)
    window.mainloop()


if __name__ == "__main__":
    main()
</code></pre>
    </div>