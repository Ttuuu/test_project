<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Since this question got over 1000 views within 24 hours I decided to completely rework the class addressing as many comments as possible</p>

<p>Further remarks for improvement are appreciated</p>

<p>Since editing the question would result in a rollback as mentioned by t3chb0t I decided to post the changes in a separate answer</p>

<pre><code>using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Text;

namespace com.stackexchange.codereview.datastruc
{
    /// &lt;summary&gt;
    /// File Bijection.cs
    /// 
    /// This class implements a Bijection (which can be thought of a bidirectional Dictionary)
    /// 
    /// Link to Discussion 
    /// https://codereview.stackexchange.com/questions/227445/bidirectional-dictionary
    ///
    /// Link to Source 
    /// https://github.com/pillepalle1/stackexchange-codereview/blob/master/datastruc/Bijection.cs
    ///
    /// &lt;/summary&gt;

    /*
     * Thanks to (see below) for their valuable input
     * ---------------+---------------------------------------------------------------------------
     * Henrik Hansen  | https://codereview.stackexchange.com/users/73941/henrik-hansen
     * dfhwze         | https://codereview.stackexchange.com/users/200620/dfhwze
     * t3chb0t        | https://codereview.stackexchange.com/users/59161/t3chb0t
     * Pieter Witvoet | https://codereview.stackexchange.com/users/51173/pieter-witvoet
     * JAD            | https://codereview.stackexchange.com/users/140805/jad
     * 
     * Remarks
     * -------------------------------------------------------------------------------------------
     * 
     * IDictionary has been removed as suggested by dfhwze . This does not cause a loss of functionality
     * due to the introduced properties .MappingXtoY and .MappingYtoX which provide read only access to
     * the internal Dictionaries
     * 
     * JAD and Pieter Witvoet seemed to be irritated by using a SortedDictionary rather than a Dictionary.
     * In the end it is a question of optimizing space or access time. Given that the structure maintains
     * two dictionaries, I first considered it reasonable to rather optimize space but it seems like that
     * the expected default behaviour is to optimize speed
     * 
     * Implementation of .Equals .GetHashcode .ToString has been changed given the remarks of Pieter Witvoet
     *
     */

    public class Bijection&lt;T_SetX, T_SetY&gt; : ICollection&lt;(T_SetX, T_SetY)&gt;
    {
        #region Exceptions the Structure might throw
        private static ArgumentException _xCollisionEx = new ArgumentException(String.Empty
            + "A collision occured in subset X when attempting to add the current element"
            + "You might want to: "
            + "- have a look at the property .CollisionHandlingProperty"
            + "- consider changing the implementation of x.Equals"
        );

        private static ArgumentException _yCollisionEx = new ArgumentException(String.Empty
            + "A collision occured in subset Y when attempting to add the current element"
            + "You might want to: "
            + "- have a look at the property .CollisionHandlingProperty"
            + "- consider changing the implementation of y.Equals"
        );

        private static Exception _internalError = new Exception(String.Empty
            + "[Bijection] Internal error / Inconsistent state"
        );
        #endregion

        private IDictionary&lt;T_SetX, T_SetY&gt; _x_to_y = null;                             // Mapping x to y (Get y given x)
        private IDictionary&lt;T_SetY, T_SetX&gt; _y_to_x = null;                             // Mapping y to x (Get x given y)

        public Bijection() :
        this(new Dictionary&lt;T_SetX, T_SetY&gt;(), new Dictionary&lt;T_SetY, T_SetX&gt;())
        {
        }

        public Bijection(IDictionary&lt;T_SetX, T_SetY&gt; dict)
        {
            _x_to_y = new Dictionary&lt;T_SetX, T_SetY&gt;();
            _y_to_x = new Dictionary&lt;T_SetY, T_SetX&gt;();

            foreach (T_SetX x in dict.Keys)
            {
                this.Add((x, dict[x]));
            }
        }

        private Bijection(IDictionary&lt;T_SetX, T_SetY&gt; x_to_y, IDictionary&lt;T_SetY, T_SetX&gt; y_to_x)
        {
            _x_to_y = x_to_y;
            _y_to_x = y_to_x;
        }

        /// &lt;summary&gt;
        /// Elements of set X
        /// &lt;/summary&gt;
        public IList&lt;T_SetX&gt; X =&gt; new List&lt;T_SetX&gt;(_x_to_y.Keys);

        /// &lt;summary&gt;
        /// Elements of set Y
        /// &lt;/summary&gt;
        public IList&lt;T_SetY&gt; Y =&gt; new List&lt;T_SetY&gt;(_y_to_x.Keys);


        public IReadOnlyDictionary&lt;T_SetX, T_SetY&gt; MappingXtoY =&gt; new ReadOnlyDictionary&lt;T_SetX, T_SetY&gt;(_x_to_y);
        public IReadOnlyDictionary&lt;T_SetY, T_SetX&gt; MappingYtoX =&gt; new ReadOnlyDictionary&lt;T_SetY, T_SetX&gt;(_y_to_x);


        #region Indexer and Inverse

        /*
         * The indexer remained because some users (including me) prefer to manage the object through indices
         * rather than calling the method .Add((x,y)) even though it is conceptually not entirely appropriate
         * 
         * The .Inverse has however been removed because it introduces the question on how to handle the prop
         * CollisionHandlingPolicy (is it supposed to be kept synchronous with its Inverse?) which then com-
         * plicates the code to an inappropriate extent.
         * 
         * This also removed the question of how to manage the inverse as mentioned by Pieter Witvoet
         * 
         * This introduces an asymmetrie and bias in favor of elements in X since elements cannot be added to
         * Y by using an indexer. This should however not cause a problem in practise, since both elements x
         * and y must be known when added to the collection as a tuple
         */

        public T_SetY this[T_SetX x]
        {
            get
            {
                return GetY(x);
            }
            set
            {
                Add((x, value));
            }
        }
        #endregion

        public T_SetX GetX(T_SetY y)
        {
            return _y_to_x[y];
        }

        public T_SetY GetY(T_SetX x)
        {
            return _x_to_y[x];
        }

        public void RemoveX(T_SetX x)
        {
            this.Remove((x, _x_to_y[x]));
        }

        public void RemoveY(T_SetY y)
        {
            this.Remove((_y_to_x[y], y));
        }

        /// &lt;summary&gt;
        /// Indicates the policy to be applied if an element cannot be added because it would break the bijection
        /// &lt;/summary&gt;
        public ECollisionHandlingPolicy CollisionHandlingPolicy
        {
            get
            {
                return _collisionHandlingPolicy ?? ECollisionHandlingPolicy.ThrowX_ThrowY;
            }
            set
            {
                _collisionHandlingPolicy = value;
            }
        }
        protected ECollisionHandlingPolicy? _collisionHandlingPolicy = null;

        #region Implementation of Interface System.ICloneable

        /*
         *
         * Attempting to implement this ICloneable led to a conflict that suggested to discard it
         * alltogether
         *
         * The problem is that creating a deep copy would require T_SetX and T_SetY to implement
         * System.ICloneable which would severly limit the flexibility. It could however be reason-
         * able for immutable types but then the issue of having to properly inform the user before-
         * hand
         *
         */

        #endregion

        #region Implementation of Interface ICollection&lt;T_SetX, T_SetY&gt;
        public int Count =&gt; X.Count;

        public bool IsReadOnly =&gt; false;

        public void Add((T_SetX, T_SetY) item)
        {
            if (this.Contains(item)) return;

            if (X.Contains(item.Item1))
            {
                switch (CollisionHandlingPolicy)
                {
                    case (ECollisionHandlingPolicy.ThrowX_ThrowY):
                    case (ECollisionHandlingPolicy.ThrowX_ResolveY): throw _xCollisionEx;

                    case (ECollisionHandlingPolicy.ResolveX_ThrowY):
                    case (ECollisionHandlingPolicy.ResolveX_ResolveY): _x_to_y.Remove(item.Item1); break;

                    default: throw _internalError;
                }
            }

            if (Y.Contains(item.Item2))
            {
                switch (CollisionHandlingPolicy)
                {
                    case (ECollisionHandlingPolicy.ThrowX_ResolveY):
                    case (ECollisionHandlingPolicy.ResolveX_ResolveY): _y_to_x.Remove(item.Item2); break;

                    case (ECollisionHandlingPolicy.ThrowX_ThrowY):
                    case (ECollisionHandlingPolicy.ResolveX_ThrowY): throw _yCollisionEx;

                    default: throw _internalError;
                }
            }

            _x_to_y[item.Item1] = item.Item2;
            _y_to_x[item.Item2] = item.Item1;
        }

        public void Clear()
        {
            _x_to_y.Clear();
            _y_to_x.Clear();
        }

        public bool Contains((T_SetX, T_SetY) item)
        {
            if (!X.Contains(item.Item1)) return false;
            if (!Y.Contains(item.Item2)) return false;
            if (!_x_to_y[item.Item1].Equals(item.Item2)) return false;

            return true;
        }

        public void CopyTo((T_SetX, T_SetY)[] array, int arrayIndex)
        {
            foreach (T_SetX x in X)
            {
                array[arrayIndex++] = (x, _x_to_y[x]);
            }
        }

        public bool Remove((T_SetX, T_SetY) item)
        {
            if (!this.Contains(item)) return false;

            _x_to_y.Remove(item.Item1);
            _y_to_x.Remove(item.Item2);
            return true;
        }

        public IEnumerator&lt;(T_SetX, T_SetY)&gt; GetEnumerator()
        {
            return new BijectionEnumerator(this);
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return new BijectionEnumerator(this);
        }
        #endregion

        #region Bijection Specific Nested Data Structures
        /// &lt;summary&gt;
        /// Enumerator for element-wise access to a bijection
        /// &lt;/summary&gt;
        public class BijectionEnumerator : IEnumerator&lt;(T_SetX, T_SetY)&gt;
        {
            private Bijection&lt;T_SetX, T_SetY&gt; _bijection = null;
            private List&lt;T_SetX&gt; _keys = null;
            private int _keyIndex;

            public BijectionEnumerator(Bijection&lt;T_SetX, T_SetY&gt; bijection)
            {
                _bijection = bijection;
                _keys = new List&lt;T_SetX&gt;(bijection.X);
                _keyIndex = 0;
            }
            public (T_SetX, T_SetY) Current
            {
                get
                {
                    return (_keys[_keyIndex], _bijection.GetY(_keys[_keyIndex]));
                }
            }

            object IEnumerator.Current
            {
                get
                {
                    return (_keys[_keyIndex], _bijection.GetY(_keys[_keyIndex]));
                }
            }

            public bool MoveNext()
            {
                return (_keyIndex &lt; (_keys.Count - 1));
            }

            public void Reset()
            {
                _keyIndex = 0;
            }

            public void Dispose()
            {
                // This enumerator does not occupy any ressources that need to be released
            }

        }
        #endregion

        #region Overrides
        public override string ToString()
        {
            StringBuilder b = new StringBuilder();

            b.Append("Count=" + this.Count);
            b.Append(' ');
            b.Append("[" + typeof(T_SetX).ToString() + " &lt;-&gt; " + typeof(T_SetY).ToString() + "]");

            return b.ToString();
        }
        public override int GetHashCode()
        {
            return Count;
        }
        public override bool Equals(object obj)
        {
            Bijection&lt;T_SetX, T_SetY&gt; obj_bijection = (obj as Bijection&lt;T_SetX, T_SetY&gt;);
            if (null == obj_bijection) return false;

            if (Count != obj_bijection.Count) return false;

            foreach (var t in this)
            {
                if (!obj_bijection.Contains(t)) return false;
            }

            return true;
        }
        #endregion
    }

    #region Bijection Specific External Data Structures
    /// &lt;summary&gt;
    /// Available policies on resolving a conflict caused by attempting to map an element a to b which already maps to c
    /// - Throw will cause an ArgumentException to be thrown
    /// - Resolve will remove the existing mapping and replace it by the one provided
    /// &lt;/summary&gt;
    public enum ECollisionHandlingPolicy
    {
        ThrowX_ThrowY,
        ThrowX_ResolveY,
        ResolveX_ThrowY,
        ResolveX_ResolveY
    }
    #endregion
}
</code></pre>

<p>I also added a property that allows the user to decide the behavior in case of a collision</p>

<p>Example on how to use the structure</p>

<pre><code>public static void Main(string[] args)
{
    Bijection&lt;int, string&gt; bijection = new Bijection&lt;int, string&gt;();

    bijection[1] = "frog";
    bijection.Add((2, "camel"));
    bijection.[3] = "horse";

    if(bijection.Y.Contains("frog"))
    {
        bijection.RemoveY("frog");
        EatFrog();
    }

    foreach(int i in bijection.X)
    {
        Console.WriteLine(bijection[i]);
    }

    foreach(var t in bijection)
    {
        Console.WriteLine(t.item2);
    }
}
</code></pre>

<p>That should cover most of the cases</p>
    </div>