<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>If you're not using C# 8's <a href="https://docs.microsoft.com/en-us/dotnet/csharp/nullable-references" rel="nofollow noreferrer">nullable references</a>, you should be checking for <code>null</code> whenever you're supplied with input.</p>

<ul>
<li>In the <code>ConsoleCommandHandler</code> constructor, throw <code>ArgumentNullException</code> if <code>logger</code> or <code>commands</code> is <code>null</code>.</li>
<li>In <code>ConsoleCommandHandler.TryHandleCommandAsync</code>, throw <code>ArgumentNullException</code> if <code>input</code> is <code>null</code>. Even though you're only ever passing non-empty strings from your entry point, this method is publicly visible which sends a signal that anybody could potentially use it differently in the future.</li>
</ul>

<p>In <code>ConsoleCommandHandler</code>, you create a <code>Dictionary</code> that maps command names to <code>ICommand</code>s. You would do this if you wanted constant-time lookup of commands from command names. But then you wrote <code>commands.Any(command =&gt; command.Key == header)</code> which will instead do a linear search over every key-value pair in the dictionary until it finds a matching key. This defeats the purpose of using a dictionary. Use <a href="https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.dictionary-2.trygetvalue?view=netframework-4.8" rel="nofollow noreferrer"><code>TryGetValue</code></a> to check-and-retrieve a value from a dictionary in one shot:</p>

<pre><code>    if (commands.TryGetValue(header, out var command)
    {
        await command.RunAsync(input.Substring(spacePosition + 1).Split(' '));
    }
    else
    {
        logger.LogWarning("'{0}' is not recognized as an internal command", header);
    }
</code></pre>

<p><code>TryHandleCommandAsync</code> really does two things -- it parses user input into a command + arguments, and then it finds/runs the associated command. It may be worth separating those concerns into methods. Then, if the format of those command strings ever changes then you'll know exactly where and what to change in the code.</p>

<p>Depending on how sophisticated your command line interface needs to be, consider a <a href="https://github.com/commandlineparser/commandline" rel="nofollow noreferrer">third-party library</a> that does all the gross string parsing stuff for you. For example, do you need to support commands or arguments that contain spaces? Your implementation currently doesn't.</p>
    </div>