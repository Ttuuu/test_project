<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Remove unnecessary imports</h2>

<p>You're importing parts of tkinter twice, Remove this line:</p>

<pre><code>from tkinter import Frame, Canvas, Scrollbar, Button
</code></pre>

<p>Then, whenever you need to use <code>Frame</code>, <code>Canvas</code>, etc, use <code>tk.Frame</code>, <code>tk.Canvas</code>, etc.</p>

<h2>Don't create your own event loop</h2>

<p>You have code that looks like this:</p>

<pre><code>while True:
    &lt;some code&gt;
    root.update()
</code></pre>

<p>Instead, call <code>mainloop</code> once, move <code>&lt;some code&gt;</code> into a function, and call it with <code>after</code> if you need it to run in a loop.</p>

<pre><code>def redraw():
    &lt;some code&gt;
    root.after(50, redraw)
root.mainloop()
</code></pre>

<h2>Don't continually delete and recreate items on a canvas</h2>

<p>You're continually deleting and recreating identical items on a canvas. This is inefficient and will eventually call tkinter to crash. The canvas widget does not re-use canvas ids, so each time you create a new object you get a new id. There is a limited number of ids that tkinter can manage.</p>

<p>Instead, create the items once, and then if you need to change them, change the existing items</p>

<pre><code>def draw():
    global block1, block2
    block1 = canvas1.create_rectangle(100, 100, size_x, size_y,
                                      fill='orange')
    block2 = canvas2.create_rectangle(100, 100, size_x, size_y,
                                      fill='blue')

def redraw():
    global block1, block2
    canvas1.itemconfigure(block1, ...)
    canvas2.itemconfigure(block2, ...)
</code></pre>

<h2>Group your layout code together</h2>

<p>Intermixing widget creation and widget layout makes the code hard to read.</p>

<p>Consider this:</p>

<pre><code>frame1 = Frame(root, bg='grey')
frame1.grid(row=0, column=0)
frame2 = Frame(root, bg='grey')
frame2.grid(row=0, column=1)
frame3 = Frame(root, bg='grey')
frame3.grid(row=0, column=2)
</code></pre>

<p>I recommend splitting this into two blocks:</p>

<pre><code>frame1 = Frame(root, bg='grey')
frame2 = Frame(root, bg='grey')
frame3 = Frame(root, bg='grey')

frame1.grid(row=0, column=0)
frame2.grid(row=0, column=1)
frame3.grid(row=0, column=2)
</code></pre>

<p>I think this makes the code much easier to read because I can see at a glance that you're creating three frames, and that each frame is going into a separate column. In the original code it's not nearly as easy to see this without closely reading the code.</p>

<h2>Use separate functions for scrolling in x and y direction</h2>

<p>Your use of an argument to specify x-axis or y-axis makes the code a little bit harder to understand. Instead, I recommend using two separate functions.</p>

<p>For example:</p>

<pre><code>def scroll_x(*args):
    global canvas1, canvas2
    canvas1.xview(*args)
    canvas2.xview(*args)

def scroll_y(*args):
    global canvas1, canvas2
    canvas1.yview(*args)
    canvas2.yview(*args)
...
yscrollbar = Scrollbar(frame3, orient='vertical', command=scroll_y)
xscrollbar = Scrollbar(frame3, orient='horizontal', command=scroll_x)
</code></pre>

<p>Notice how it makes the code much easier to read, since we can replace the complicated lambda with a much simpler command. </p>
    </div>