<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ol>
<li><p>You can use <code>dict.setdefault</code> rather than conditionally modifying the trie.
This has the benefit of only looking up the key once as opposed to a maximum of 3 times with your current code.</p>
</li>
<li><p>I'm not a fan of your terminology:</p>
<ul>
<li><code>table</code> makes me think 2d array rather than a tree.</li>
<li>I'd prefer <code>node</code> to <code>cur_level</code>.</li>
<li>What does <code>c</code> mean?</li>
<li>Why not just call it <code>_add_value</code>?</li>
</ul>
</li>
</ol>
<pre class="lang-py prettyprint-override"><code>def _add_value(root: Table, string: str) -&gt; None:
    node = root
    for char in string + _TERMINATOR:
        node = node.setdefault(char, {})
</code></pre>
<ol start="3">
<li><p>In <code>_extract_strings</code> I'd move <code>acc = []</code> after the function definition so the code isn't all over the place.</p>
</li>
<li>
<blockquote>
<p>In the recursive function, I'm using strings to keep track of the word "so far", and passing concatenated copies to the children for them to use. I was originally using lists so I could just append without creating a new object each time, but sharing the mutable list between recurses proved to be problematic. I'm also returning only endings from the lookup function then reconstructing the full word in find_matching. This necessitates string + for every found string though, which isn't great.</p>
</blockquote>
<p>When getting one value your code runs in <span class="math-container">\$O(l^2)\$</span> where <span class="math-container">\$l\$</span> is the maximum length of a string.
This is because each <code>cur_path + char</code> is an <span class="math-container">\$O(l)\$</span> operation and you do it <span class="math-container">\$l\$</span> times.</p>
<p>With the current algorithm I'd suggest following an 'eh, screw it' approach and just be happy that it's sufficiently fast. As manually dealing with the stack is <em>no fun</em>.</p>
<p>Personally I'm not a fan of <code>acc.append</code>, I'd instead use <code>yield</code> and <code>yield from</code>.</p>
<pre class="lang-py prettyprint-override"><code>def _extract_strings(table: Table) -&gt; Iterator[str]:
    def rec(cur_path: str, cur_level: Table):
        for char, child in cur_level.items():
            if char == _TERMINATOR:
                yield cur_path
            else:
                yield from rec(cur_path + char, child)
    return rec("", table)
</code></pre>
</li>
<li>
<blockquote>
<p>The lookup function _extract_strings makes use of recursion, because this seemed like a painful problem to solve iteratively. If I'm missing an obvious alternate way, I'd appreciate any tips there.</p>
</blockquote>
<p>Whilst manually building the stack is possible, it's not super simple. Given that the trie is unlikely to exceed Python's 1000 stack limit you can probably ignore this.<br>
As touched on before when building the stack we could easily build the result at the same time, changing the <span class="math-container">\$O(l^2)\$</span> performance to just <span class="math-container">\$O(l)\$</span>.</p>
<p>However as you should be able to see this is an abomination.
I don't think anyone wants to maintain this.</p>
<pre class="lang-py prettyprint-override"><code>def _extract_strings(table: Table) -&gt; Iterator[str]:
    stack = [iter(table.items())]
    stack_value = []
    while stack:
        try:
            key, value = next(stack[-1])
        except StopIteration:
            stack.pop()
            if stack_value:
                stack_value.pop()
            continue
        if key == '\0':
            yield ''.join(stack_value)
        stack_value.append(key)
        stack.append(iter(value.items()))


table = {
    'b': {'a': {'r': {'\0': {}}, 'z': {'\0': {}}}},
    'f': {'o': {'o': {'\0': {}}}},
}
for path in _extract_strings(table):
    print(path)
</code></pre>
</li>
<li><p>I'm not a fan of a lot of your empty lines. They seem random and not needed.</p>
</li>
<li><p>The trie would be better described in a class. A class, even with no sugar, would make your code easier to understand, as then you don't have to think "what is <code>_add_string</code>" and "how do I handle <code>table</code>".<br>
<a href="https://codereview.stackexchange.com/search?q=user%3A42401+trie">I've written a few tries over the years</a>, they may help if you decide to make it a class.</p>
<pre class="lang-py prettyprint-override"><code>trie = Trie()
trie.add('foo')
trie.add('bar')
trie.add('baz')
# Could use the following to add instead if you need a value
# trie['foo'] = ???

key = 'ba'
for value in trie[key]:
    print(key + value)
</code></pre>
</li>
<li>
<blockquote>
<p>The plan so far will be to have a call to <code>make_lookup_table_from_path</code> once when the shell is loaded, save the table in a variable outside of the main loop, then do lookups on the saved table (the more I write "table", the more I'm realizing that that's probably not the right word).</p>
</blockquote>
<p>Using a Trie here is a good solution.<br>
If you were rebuilding the table each time you call <code>find_matching</code> then a simple <code>str.startswith</code> would probably out perform this by miles.</p>
</li>
</ol>
<h1>Overall</h1>
<p>Your code's style seems a little odd. But otherwise it's good. I'd suggest using a class most of all.</p>
    </div>