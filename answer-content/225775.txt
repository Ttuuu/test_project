<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I recommend keeping the collection of instances of a class public until there is compelling reason to hide such information from the client, and I see no such motivation here. Furthermore, I'm not convinced that <code>Person</code> is a strong candidate for being a class; it has three properties and no methods.</p>

<p>In keeping the code as <a href="https://www.python.org/dev/peps/pep-0020/" rel="nofollow noreferrer">explicit</a> and simple as possible, I'd prefer a <code>namedtuple</code>, with a client-code scoped, external list containing all instances that need to be collected:</p>

<pre><code>from collections import namedtuple

Person = namedtuple('Person', 'name age height')
people = [
    Person(name='Jeff', age=20, height=1.6),
    Person('Bob', 39, 1.4),
    Person('Helen', 19, 1.3),
]

for person in people:
    print(f"{person.name} is {person.age}")
</code></pre>

<p>Here are the benefits of this approach:</p>

<ul>
<li>Everything is completely obvious for the client, who retains power over how to use the data, clarity and access to the list itself with all that it entails.</li>
<li>The documentation for <a href="https://docs.python.org/3/library/collections.html#collections.namedtuple" rel="nofollow noreferrer">named tuple</a> says "Named tuple instances do not have per-instance dictionaries, so they are lightweight and require no more memory than regular tuples." The data we're dealing here is basically a rudimentary C struct, so all we need is a lightweight named container.</li>
<li>Less code, fewer classes, reduced complexity.</li>
</ul>

<p>From a style standpoint, I recommend adhering to <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">PEP-8</a>--variables are <code>snake_case</code>.</p>
    </div>