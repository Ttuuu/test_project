<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Let us first check the overall style of that method.  </p>

<ul>
<li>The name of the method doesn't match the return type. The method is named <code>GetHeader</code> but it returns a <code>List&lt;string&gt;</code> hence <code>GetHeaders</code> would be a better name.  </li>
<li>Based on the <a href="https://msdn.microsoft.com/en-us/library/ms229002.aspx" rel="nofollow noreferrer">.NET Naming Guidelines</a> method-parameters should be named using <code>camelCase</code> casing hence <code>FileLines</code> should be <code>fileLines</code>.  </li>
<li>If the type of the right-hand-side of an assignment is obvious one should use <code>var</code> instead of the concrete type.  </li>
<li><strong>Stick to one coding style</strong>. Currently you are mixing styles in that method. <strong>Sometimes</strong> you place the opening braces <code>{</code> on the next line and sometimes you place it on the same line. <strong>Sometimes</strong> you use braces <code>{}</code> for single-line <code>if</code> statements and sometimes you don't. Omitting braces for single-line <code>if</code> statements should be avoided. Omitting barces can lead to hidden and therefor hard to find bugs.  </li>
</ul>

<hr>

<p>Now let's dig into the code.  </p>

<p>This</p>

<blockquote>
<pre><code>//Checks if there is a ':' and assumes that anything before that is the header except if it contains a date or a report id
if(Regex.IsMatch(header, @"\w{2,4}[/\-]\w{2,3}[/\-]\w{2,4}", RegexOptions.Compiled) || Regex.IsMatch(header, @"^\w+, \w{2}\d{5}-{0,1}\d{0,5}", RegexOptions.Compiled))
{
    continue;
}  
</code></pre>
</blockquote>

<p>can be removed completely because it will always evaluate to <code>false</code>.  </p>

<hr>

<p>The regexes you use for replacements and matching should be extracted to <code>private static</code> fields like e.g  </p>

<pre><code>private static Regex noBracketsRegex = new Regex(@".*?\(.*?\)", RegexOptions.Compiled);
</code></pre>

<p>and used like so  </p>

<pre><code>string nobrackets = noBracketsRegex.Replace(line, string.Empty);
</code></pre>

<hr>

<p>This  </p>

<blockquote>
<pre><code>string nobrackets = Regex.Replace(line, @".*?\(.*?\)", string.Empty, RegexOptions.Compiled);
if (line.IndexOf(':') != -1)
{
    string nobracks = Regex.Replace(line.Substring(0, line.IndexOf(':') + 1), @"\(.*?\)", string.Empty, RegexOptions.Compiled);
    if (nobracks.Split(' ').Length &lt; 5 &amp;&amp; nobracks.Length &gt; 6)
    {
        headers.Add(line.Substring(0, line.IndexOf(':') + 1));
        continue;
    }
}

//Checks if a string is larger then 5 words (not including brackets)
if (!(nobrackets.Split(' ').Length &lt; 5 &amp;&amp; nobrackets.Length &gt; 6))
    continue;
</code></pre>
</blockquote>

<p>should be reorderd. You do the <code>Regex.Replace()</code> althought it could be possible that the most inner <code>if</code> condition could be <code>true</code>. You should store the result of <code>line.IndexOf(':')</code> in a variable otherwise if <code>line</code> contains a <code>:</code> you are calling <code>IndexOf()</code> twice and if the most inner <code>if</code> returns <code>true</code> you call it three times. Switching the most inner condition to evaluating the fastest condition should be done as well.</p>

<hr>

<p>This  </p>

<blockquote>
<pre><code>string[] word = line.Split(' ');
</code></pre>
</blockquote>

<p>should be renamed to <code>words</code>.  </p>

<hr>

<p>This  </p>

<blockquote>
<pre><code>for (int i = 0; i &lt; word.Length &amp;&amp; caps; i++)
{
    char[] char_array = word[i].ToCharArray();

    if (!letter.All(l =&gt; char.IsUpper(l)))
    {
        caps = false;
        continue;
    }
    if (caps)
        lastCapWordIndex++;
}  
</code></pre>
</blockquote>

<p>doesn't buy you anything. You already checked <code>letter.All(l =&gt; char.IsUpper(l))</code> some lines above and if it returned <code>true</code> you <code>continue;</code> the moste outer loop. Hence it will return in this loop always <code>true</code> hence <code>lastCapWordIndex</code> will always be <code>0</code>. In addition a simple <code>break;</code> would be sufficiant because looping condition checks for <code>caps</code> being <code>true</code>.  </p>

<p>The following   </p>

<blockquote>
<pre><code>if (lastCapWordIndex &gt; 0)
{
    for (int i = 0; i &lt; lastCapWordIndex; i++)
    {
        header += " " + word[i];
    }
    headers.Add(header.Trim());
    continue;
}  
</code></pre>
</blockquote>

<p>can be removed as well because <code>lastCapWordIndex</code> won't ever be <code>true</code> like stated above.</p>

<hr>

<p>This  </p>

<blockquote>
<pre><code>//final check for string with less then 4 characters
string[] tempH = headers.ToArray();
headers = new List&lt;string&gt;();
foreach (string h in tempH)
{
    if (h.Length &gt; 4)
    {
        headers.Add(h);
    }
}
return headers;  
</code></pre>
</blockquote>

<p>can be simplified by using a little bit of Linq like so  </p>

<pre><code>return new List&lt;string&gt;(headers.Where(s =&gt; s.Length &gt; 4));  
</code></pre>

<p>In addition the comment you placed above is lying because you check for strings which are less then 5 characters.  </p>

<hr>

<p>Implementing the mentioned points will lead to  </p>

<pre><code>private static Regex noBracketsRegex = new Regex(@".*?\(.*?\)", RegexOptions.Compiled);
private static Regex noBracksRegex = new Regex(@"\(.*?\)", RegexOptions.Compiled);
private List&lt;string&gt; GetHeaders(List&lt;string&gt; fileLines)
{
    var headers = new List&lt;string&gt;();
    foreach (string line in fileLines)
    {
        string header = string.Empty;

        int colonIndex = line.IndexOf(':');
        if (colonIndex != -1)
        {
            string nobracks = noBracksRegex.Replace(line.Substring(0, colonIndex + 1), string.Empty);
            if (nobracks.Length &gt; 6 &amp;&amp; nobracks.Split(' ').Length &lt; 5)
            {
                headers.Add(line.Substring(0, colonIndex + 1));
                continue;
            }
        }

        string removedBracketsLine = noBracketsRegex.Replace(line, string.Empty);
        //Checks if a string is larger then 5 words (not including brackets)
        if (!(removedBracketsLine.Length &gt; 6 &amp;&amp; removedBracketsLine.Split(' ').Length &lt; 5))
        {
            continue;
        }

        //Checks if the string is in all CAPS
        char[] letters = removedBracketsLine.ToCharArray();
        if (letters.All(l =&gt; char.IsUpper(l)))
        {
            headers.Add(line);
            continue;
        }

        //Checks if the string is 5 words or less
        string temp = noBracksRegex.Replace(line, string.Empty);
        if (temp.Split(' ').Length &lt; 6)
        {
            headers.Add(line);
        }

    }
    return new List&lt;string&gt;(headers.Where(s =&gt; s.Length &gt; 4));
}
</code></pre>

<p>The naming of the <code>Regex</code> could use a facelift but you should do it yourself because you know the meaning of them.</p>
    </div>