<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ol>
<li><p>You should make effort to follow the guidelines listed in <a href="https://www.python.org/dev/peps/pep-0008/" rel="noreferrer">PEP-8</a>, the official style guide for Python.</p>

<ul>
<li><p>The imports should be separated into three distinct categories, the first being standard library imports, then related third-party imports, and finally local project imports. The categories are separated by a single blank line. I'm assuming <code>colorclass</code> is <a href="https://pypi.org/project/colorclass/" rel="noreferrer">colorclass on PyPi, current version 2.2.0</a>. If that's the case, the imports should be:</p>

<pre><code>from time import gmtime, strftime

from colorclass import Color
from colorclass import disable_all_colors, enable_all_colors, is_enabled
</code></pre></li>
<li><p>Each top-level function or class definition should be preceded by two blank lines. This is done to make each definition visually distinctive.</p></li>
<li><p><code>OutputHelper</code>, being the name of a class, correctly follows the PascalCase naming convention, but <code>OutputHelper.Terminal()</code> should be <code>OutputHelper.terminal()</code>, as functions and method names should follow the snake_case naming convention.</p></li>
</ul></li>
<li><p>In Python 3, <a href="https://docs.python.org/2/reference/datamodel.html#new-style-and-classic-classes" rel="noreferrer">all classes are new style classes</a>, so the explicit <code>object</code> superclass is completely unnecessary.</p></li>
<li><p>The name <code>OutputHelper.Terminal()</code> does not adequately summarize what the method does. To me, that sounds almost like a 'terminal factory' method that spits out a unique <code>Terminal</code> instance each time it's called. Since what it really does is log something, why not call it <code>OutputHelper.log()</code>?</p></li>
<li><p>In a similar vein, why is the class called <code>OutputHelper</code>? Of course, it interacts with the output stream, and of course, it's a 'utility' in a way, but <code>Logger</code> is far more accurate.</p></li>
<li><p>Stdout is not for debugging. You should write these kinds of messages to stderr instead (<code>sys.stderr</code>).</p></li>
<li><p>The numbers one through six don't have any significance, they're pretty much arbitrary values for log severity. It makes sense to give them a unique name, which not only makes them easier to remember, but also reduces the chance of typos.</p>

<pre><code>from enum import IntEnum

# ...

class LogLevel(IntEnum):
    GOOD = 1
    INFO = 2
    LOW = 3
    MEDIUM = 4
    HIGH = 5
    CRITICAL = 6
</code></pre>

<p>to be used as:</p>

<pre><code>Logger.log(LogLevel.GOOD, "All dependencies up to date.")
</code></pre></li>
<li><p>Talking about the output itself, that could use some work too. 'LOW / MEDIUM / HIGH'? What, exactly? Probably severity, so I suggest you change it to 'LOW / MEDIUM / HIGH SEVERITY ERROR' instead.</p></li>
<li><p>In <code>OutputHelper.__init__()</code>:</p>

<pre><code>if color:
    disable_all_colors()
</code></pre>

<p>If <code>color</code> is a boolean flag*, shouldn't this be a negation? Surely you'd only <em>disable</em> the colors if colors are not supported, not the other way around.</p></li>
<li><p><code>leader</code> doesn't have to be initialized as an empty string, since you already deal with the <code>else:</code> case.</p></li>
<li><p>There's something funny about the current concept of domains. You say each <em>module</em> could log for a single domain, which suggests you instantiate multiple loggers and point them at one domain. That's fine, but you could achieve the same with a simple function, and just have the domain be an argument. Is a module tied strictly to one instance?*</p>

<p>Even if you need the class, <code>arguments.domains</code> (plural, in the second snippet), suggests one instance logs to multiple domains. Though the code you showed us doesn't confirm that, it may hold true for the complete program. Or it may just be a typo. Either way, you should look into that.</p></li>
<li><p>I'm sure you're aware there's the standard library <a href="https://docs.python.org/3/library/logging.html" rel="noreferrer"><code>logging</code></a> module.</p></li>
</ol>

<p>I end up with something like this:</p>

<pre><code>from enum import IntEnum
from sys import stderr
from time import gmtime, strftime

from colorclass import Color
from colorclass import disable_all_colors, enable_all_colors, is_enabled


class LogLevel(IntEnum):
    GOOD = 1
    INFO = 2
    LOW_SEVERITY_ERROR = 3
    MEDIUM_SEVERITY_ERROR = 4
    HIGH_SEVERITY_ERROR = 5
    CRITICAL_ERROR = 6


class Logger:
    def __init__(self, color_supported, domain):
        if not color_supported:
            disable_all_colors()
        self.domain = domain

    def log(self, level, message):
        if level == LogLevel.GOOD:
            leader = Color('{green}[GOOD]{/green}')
        elif level == LogLevel.INFO:
            leader = Color('{cyan}[INFO]{/cyan}')
        elif level == LogLevel.LOW_SEVERITY_ERROR:
            leader = Color('{yellow}[LOW]{/yellow}')
        elif level == LogLevel.MEDIUM_SEVERITY_ERROR:
            leader = Color('{magenta}[MEDIUM]{/magenta}')
        elif level == LogLevel.HIGH_SEVERITY_ERROR:
            leader = Color('{red}[HIGH]{/red}')
        elif level == LogLevel.CRITICAL_ERROR:
            leader = Color('{red}[!!CRITICAL!!]{/red}')
        else:
            leader = '[#]'

        print('[{}] [{}] {} {}'.format(
            strftime("%H:%M:%S", gmtime()),
            self.domain,
            leader,
            message
            ),
        file=stderr
        )
</code></pre>

<hr>

<p>* Bonus points: Add a docstring. Every public function should include a summary in the form of a docstring (triple quoted multiline string literal, but that's a mouthful), which lists the various arguments the function accepts, what it does and what it returns. Both type and value restraints should be mentioned in the docstring.</p>
    </div>