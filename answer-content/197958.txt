<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>The Ouroboros</h1>

<p>Your code is way too complex for the task </p>

<p>The most obvious improvement is to remove the functions <code>find</code>, <code>findPreviouse</code>, and <code>count</code></p>

<h2>Why</h2>

<ul>
<li>Rather than hold the data each list item has, hold the current link. This means you dont need to find the item each time you move along the list</li>
<li>You can know the remaining number of links by counting each link removed so there is no need for the function <code>count</code>.</li>
<li>If you remove the next link in the sequence rather than the current you don't need to find the previous link as you already have that, thus you dont need <code>findPreviouse</code>.</li>
</ul>

<h2>Some more points</h2>

<ul>
<li>When doing a simple countdown use a <code>while</code> loop. eg <code>while (n--) {</code> is much simpler than <code>for (let i = n; i &gt; 0; i--) {</code></li>
<li>Don't test for conditions if there is no need. In <code>remove</code> you have <code>if (!(prevNode.next == this.head)) {</code> which I can not work out why you have it there. Also it should have been written as <code>if (prevNode.next !== this.head) {</code></li>
<li>You should use <code>const</code> when ever possible, only if the variable has to change should you use <code>var</code> or <code>let</code></li>
<li>Always use <code>===</code> or <code>!==</code> never use <code>==</code> or <code>!=</code></li>
<li>If you are defining a object use the prototype or define the properties as an object. Creating a list of unrelated function names and then adding them to the object at creation is a mess, a source of bugs from the inevitable naming conflicts.</li>
</ul>

<p>eg</p>

<pre><code>function LList() {
    this.head = new Node("head");
    this.head.next = this.head;    
}
LList.prototype = {
    remove(item) {
        // function body
    },
    findPrevious(item) {
        // function body
    },
    display() {
        // function body
    },
    count() {
        // function body
    },
    // and so on...
};
</code></pre>

<h2>Rewrite</h2>

<p>I think that the <code>LList</code> and <code>Node</code> objects are overkill for this problem. A simple ad-hock object can hold the item position and link to the next. You only need to hold the current node, and to determine when you have two left just count off each item as they are removed. </p>

<pre><code>function survivor(number, step) {
    var i = 0, current;
    const add = pos =&gt; {
        const link = {pos};
        if (current) {                 // check if not first item
            link.next = current.next;  // insert link to tail
            current.next = link;
        } else { link.next = link }    // first link points to self
        current = link;                // Hold current as head
    }
    const stepOverAndRemove = (link, n) =&gt; {
        while (--n) { link = link.next }   // do this n-1 times
        return link.next = link.next.next; // remove next link and return link after that
    }

    while (i &lt; number) { add(i++) }  // create list
    current = current.next;          // move to the start

    // remove every `step` item until only two remain
    while (number-- &gt; 2) { current = stepOverAndRemove(current, step) }

    // return the position of the remaining two        
    return [current.pos, current.next.pos];
}
</code></pre>
    </div>