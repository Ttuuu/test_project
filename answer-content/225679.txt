<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Additionally to the great answer of dfhwze, I'll provide an alternative implementation that includes some of the suggestions.</p>

<p>Primary, I would implement each case separatly and create / dispose the actual dialog each time the method Show is called:</p>

<pre><code>public interface IFolderPicker
{
    string Show();
}

public class VistaFolderPicker : IFolderPicker
{
    private const string SelectATargetFolder = "Select a target folder";
    private const string CDrive = @"C:\";

    public string Show()
    {
        var vistaFolderBrowserDialog = new CommonOpenFileDialog
        {
            Title = SelectATargetFolder,
            IsFolderPicker = true,
            DefaultDirectory = CDrive,
            AllowNonFileSystemItems = false,
            EnsurePathExists = true,
            Multiselect = false,
            NavigateToShortcut = true
        };

        using (vistaFolderBrowserDialog)
        {
            return vistaFolderBrowserDialog.ShowDialog() == CommonFileDialogResult.Ok
                ? vistaFolderBrowserDialog.FileName
                : null;
        }
    }
}

public class XPFolderPicker : IFolderPicker
{
    private const string SelectATargetFolder = "Select a target folder";

    public string Show()
    {
        xpFolderBrowserDialog = new WinForms.FolderBrowserDialog
        {
            Description = SelectATargetFolder
        };

        using (xpFolderBrowserDialog)
        {
            return xpFolderBrowserDialog.ShowDialog() == WinForms.DialogResult.OK
                ? xpFolderBrowserDialog.SelectedPath
                : null;
        }
    }
}

var folderPicker = CommonFileDialog.IsPlatformSupported
   ? new VistaFolderPicker()
   : new XPFolderPicker()
</code></pre>
    </div>