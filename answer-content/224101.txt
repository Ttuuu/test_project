<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Guard Arguments</h3>

<ul>
<li><code>put</code> does not check for <code>e == null</code>. <strong>Are null values allowed?</strong> If not, add an argument guard <code>if (e == null) throw new NullPointerException();</code>.</li>
</ul>

<hr>

<h3>Naming Conventions</h3>

<ul>
<li>Call your class <code>BlockingStack</code> to conform to Java naming guidelines concerning concurrent collections.</li>
<li><code>max</code> should be called <code>capacity</code>. A collection's capacity is its maximum size. As suggested in another answer, make it final. Also, since you set it in the constructor, there is no reason for the magic number <code>16</code>. It will always be overriden.</li>
<li>The constructor takes a parameter <code>size</code> which you store to <code>max</code>. There is no reason to use different names. Both should be called <code>capacity</code> anyway.</li>
</ul>

<hr>

<h3>Threading</h3>

<ul>
<li>You silently catch <code>InterruptedException</code>. <strong>This is bad design</strong>. Exceptions should propagate up the call stack for callers to handle. </li>
<li>Also, on exception, notify other threads waiting on the condition before throwing the exception up the call stack. </li>
<li>Prefer <code>lockInterruptibly()</code> over <code>lock()</code>. <a href="https://dzone.com/articles/what-are-reentrant-locks" rel="nofollow noreferrer">Discussed here</a></li>
<li>The specification dictates fairness is optional. Let the consumer of the class specify a <code>boolean fair</code> in the constructor. </li>
</ul>

<hr>

<h3>Refactored Code</h3>

<pre><code>public class BlockingStack&lt;E&gt; {

  private final Stack&lt;E&gt; stack;
  private final int capacity;
  private final ReentrantLock lock;
  private final Condition notEmpty;
  private final Condition notFull;

  public BlockingStack(int capacity) {
    this(capacity, false);
  }

  public BlockingStack(int capacity, boolean fair) {
    if (capacity &lt;= 0)
      throw new IllegalArgumentException();
    this.capacity = capacity;
    stack = new Stack&lt;&gt;();
    lock = new ReentrantLock(fair);
    notEmpty = lock.newCondition();
    notFull = lock.newCondition();
  }

  public void push(E e) throws InterruptedException {
    if (e == null)
      throw new NullPointerException();
    lock.lockInterruptibly();
    try {
      while (stack.size() == capacity) {
        notFull.await();
      }
      stack.push(e);
      notEmpty.signalAll();
    } catch (InterruptedException error) {
      notFull.signal();
      throw error;
    } finally {
      lock.unlock();
    }
  }

  public E pop() throws InterruptedException {
    lock.lockInterruptibly();
    try {
      while (stack.size() == 0) {
        notEmpty.await();
      }
      E item = stack.pop();
      notFull.signalAll();
      return item;
    } catch (InterruptedException error) {
      notEmpty.signal();
      throw error;
    } finally {
      lock.unlock();
    }
  }
}
</code></pre>
    </div>