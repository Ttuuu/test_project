<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">

<h2>Makefile review</h2>
<p>We're missing the instruction to tell Make to remove partial results from failing rules; all Makefiles should somewhere contain</p>
<pre class="lang-make prettyprint-override"><code>.DELETE_ON_ERROR:
</code></pre>
<p><code>makeiso</code> is never up to date.  We don't want to re-run it unless the binary has changed, so I'd write:</p>
<pre class="lang-make prettyprint-override"><code>makeiso: $(RESULTING_ISO)

$(RESULTING_ISO): $(BINDIR)/$(BINARY)
    $(info )
    $(info $(MESSAGE_BEGIN)Making an ISO...$(MESSAGE_END))
    cp $(BINDIR)/$(BINARY) $(ISODIR)/boot/
    grub-mkrescue $(ISODIR) -o $(RESULTING_ISO)
</code></pre>
<p>Why does <code>clean</code> depend on having built the binary?  I think it should have no dependencies.  We could also use the built-in <code>$(RM)</code> rather than writing <code>rm -f</code>.</p>
<p>There's a lot of repetition in the compilation rules:</p>
<blockquote>
<pre class="lang-make prettyprint-override"><code>boot.o: ${SRCDIR}/boot.s
    ${info ${MESSAGE_BEGIN}boot.s is compiling...${MESSAGE_END}}
    ${AS} $&lt; -o $@

kernel.o: ${SRCDIR}/kernel.c
    ${info }
    ${info ${MESSAGE_BEGIN}kernel.c is compiling...${MESSAGE_END}}
    ${CC} ${CFLAGS} -c $&lt; -o $@

string.o: ${SRCDIR}/string.c ${SRCDIR}/string.h
    ${info }
    ${info ${MESSAGE_BEGIN}string.c is compiling...${MESSAGE_END}}
    ${CC} ${CFLAGS} -c $&lt; -o $@
</code></pre>
</blockquote>
<p>We're duplicating much of what's built-in to make. If we add <code>$(SRCDIR)</code> to the <code>vpath</code>, then we can replace those three rules with just:</p>
<pre class="lang-make prettyprint-override"><code>string.o: string.h
</code></pre>
<p>(Note that there are many more header dependencies not yet mentioned in the rules - but instead of writing them by hand, we should make ourselves a dependency generator here.)</p>
<p>If we really need the fancy printing, then we could override the built-in rules; e.g. for the C sources:</p>
<pre class="lang-make prettyprint-override"><code>%.o: %.c
        $(info )
        $(info $(MESSAGE_BEGIN)$&lt; is compiling...$(MESSAGE_END))
        $(COMPILE.c) $(OUTPUT_OPTION) $&lt;
</code></pre>
<p>The link line can easily be make to work with the built-in rules:</p>
<pre class="lang-make prettyprint-override"><code>LDFLAGS =+ -T linker.ld
LDLIBS += -lgcc
${BINDIR}/${BINARY}: boot.o kernel.o string.o vga.o terminal.o
    $(LINK.o) $^ $(LDLIBS) -o $@
</code></pre>
    </div>