<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Pass a <code>std::ostream</code> to <code>Chunkster()</code> instead of a filename</h1>

<p>The goal of your <code>class Chunkster</code> is to convert the format of one stream to another, it shouldn't have to open and close files. Just pass a <code>std::ostream</code> to the constructor instead of a filename and open mode. This makes your class simpler and at the same time more flexible, because now you could have it write to a <code>std::stringstream</code> or any other type that inherits from <code>std::ostream</code>.</p>

<h1>Be more thorough handling errors</h1>

<p>There is some attempt at error handling in your code, but it falls short. For example, <code>write()</code> returns a boolean to indicate whether the output stream is still good, but <code>flush()</code> and <code>flushIfFull()</code> do no such thing. Either have all functions that potentially do I/O return something indicating success, or add a separate function that can be used to check the current error state, perhaps a <code>bool Chunkster::good()</code>.</p>

<p>Another issue is that <code>write()</code> returns success if you give it a string longer than 255 characters. You should return an error in this case.</p>

<h1>Move <code>class Block</code> into <code>class Chunkster</code></h1>

<p>Since a <code>Block</code> is only a utility class for <code>Chunkster</code>, and not meant to be used by anything else but a <code>Chunkster</code>, it is better to move this into <code>Chunkster</code> itself, so it doesn't pollute the global namespace. So it would look like:</p>

<pre><code>class Chunkster {
    ...

    private:
    class Block {
        ...
    } current;
};
</code></pre>

<p>If you really want to keep them separate, I recommend you put both <code>Block</code> and <code>Chunkster</code> in their own namespace.</p>

<h1>Avoid clearing <code>data</code> unnecessarily</h1>

<p>Every time you flush a block, you the call <code>reset()</code>, which fills the block with zero bytes. However, in normal use, you would fill the whole block with new strings, so all zeroes are overwritten. It might be more efficient to just zero the unused bytes of a block right before calculating the checksum.</p>

<h1>Avoid writing multiple implementations of a function for different versions of C++</h1>

<p>In <code>sumcalc()</code>, you have two implementations, one for C++20 where you use spans, and one for earlier versions of C++, and you use <code>#ifdefs</code> to select which version to use at compile time. I would avoid doing this, because there is absolutely no difference in performance here, and the non-span version works just as well on C++20.</p>

<p>In general, set a minimum C++ version for your project, and code against that. The only time you should use <code>#ifdefs</code> to provide alternative implementations is when you want to provide a different <em>interface</em> for your classes, so it is easier to use with newer versions of C++. For example, if your minimum version was C++11, then it would make sense to provide a version of <code>write()</code> that takes a const reference to a <code>std::string</code>, and then also provide a <code>write()</code> function that takes a <code>std::string_view</code>, but only compile that one conditionally.</p>

<p>Code duplication can lead to errors. For example, depending on whether or not you have spans, you use a different initial value for the accumulation: <code>std::uint32_t{}</code> for the span version, <code>id</code> for the other version.</p>
    </div>