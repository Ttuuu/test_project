<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Overview</h2>

<p>I don't like that a <code>LL</code> is a <code>node</code>.<br>
A linked list contains nodes. But the list itself is not a node.</p>

<p>The LL missed the rule of three.</p>

<pre><code>LL  x;
LL  y(x); // You did not define a copy constructor
          // But this is still allowed (look up rule of three).
          // Normally this is an advantage. BUT if your class
          // contains RAW owned pointers then this will probably cause UB
          // because both x and y will try and delete the same list.
</code></pre>

<p>Most of the linked list functionality for manipulating list would break unless used in very specific ways. So these function should all be private and only used internally.</p>

<p>So I think this code is very broken.</p>

<h2>Compiler Warnings:</h2>

<pre><code>x2.cpp:59:14: warning: unused parameter 'head' [-Wunused-parameter]
LL(node* head, node* tail) : head(nullptr), tail(nullptr) { printf("LL constructor with assignments \n"); }
         ^^^^        ^^^^
                     ^
x2.cpp:150:11: warning: unused variable 'tmp' [-Wunused-variable]
node* tmp;
      ^^^
</code></pre>

<p>Well the unused arguments look like a bug.<br>
The unused variables is just sloppy and should be removed.</p>

<p>But this tells me you compile without warning tunred on. <strong>TURN THE ON NOW</strong>. Not just for this project but make your default projects settings have a higher warning level and you will catch errors like this.</p>

<p>Personally I treat all warnings as errors (There is a flag to do this in VS). I would advice everybody to do the same. C++ warnings are usually a logical error in your thinking. Fix the code so your code is warning free.</p>

<hr>

<h2>Codes Review</h2>

<h3>C Headers?</h3>

<p>Why are we include C headers in C++ code?</p>

<pre><code> #include &lt;stdio.h&gt;
</code></pre>

<hr>

<h3>Windows specific.</h3>

<pre><code> #pragma once
</code></pre>

<p>Sure if you don't want anybody else to use your code and never plan on working on other platforms. I would bet most professional developers (OK I guess I don't have any number on "most" so its hyperbolic but there are a few (not an insignificant)) use Linux.</p>

<p>Learn to use macro guards (until we add better modules to the language and we can stop using this frail old hangover from the 60s).</p>

<hr>

<h3>Const over constexpr</h3>

<pre><code>const int UnkD = 999;//Variable for node() default constructor init
</code></pre>

<p>The <code>constexpr</code> has been part of the language for a while now. I think the standard advice is to use <code>contexpr</code> where you can and <code>const</code> if not (when creating global state). </p>

<p>Its good that is non mutable :-)</p>

<h3>Node</h3>

<pre><code>class node {
</code></pre>

<p>A node of <code>int</code> is not very interesting. You should have <code>templated</code> this. That way the data object could have been any type. OK my following comments may assume you have templated this (as I assume you will in the long term). That makes the review more interesting.</p>

<p>Secondly its sort of standard to name "user" types with an upper case first letter. This helps you spot variables and types more easily in the code.</p>

<p>Note: "sort of" there is no one true standard. But this is a common practice.</p>

<h3>Constructors</h3>

<p>Stop adding us-less comments.</p>

<pre><code>// Default Constructor (I moved it so you could see it)
node() : data(UnkD), prev(nullptr), next(nullptr) { printf("default node() ctor called... \n"); } 
</code></pre>

<p>I know its a default constructor. Comments rote over time. Unless they are meaningful and useful in some way they will cause confusion when they become out of sync with the code.</p>

<hr>

<p>Less printing in constructors. At least put them in macros for debugging.</p>

<pre><code>    node() : data(UnkD), prev(nullptr), next(nullptr)
    {
    #if defined(DEBUG)
        printf("default node() ctor called... \n");
    #endif
    }
</code></pre>

<hr>

<p>This one is a tiny bit long for a single line.</p>

<pre><code>    node(const int &amp; d,node* p,node* n): data(d), prev(p), next(n) { printf("node() ctor with args called... \n"); } //Constructor With Args
</code></pre>

<p>But that's mostly to do with the print. If you take that out I would not have cared that it was one line.</p>

<hr>

<p>You were using the initializer list above. Why have you not used it here?</p>

<pre><code>    node(const node&amp; rhs) {
        printf("node() copy ctor called... \n"); 
        data = rhs.data;
        prev = rhs.prev;
        next = rhs.next;
    }; //Copy Constructor  Again with the useless comment.
</code></pre>

<p>Here you have let the members be default constructed then copied over them. OK sure if the data type is <code>int</code> the default construction is going to usually be no action. But think into the future when its not an int type. You are pauing to initialize the data object then the first thing you do in the code is copy over it using the assignment operator. That seems like a waste.</p>

<p>Be consistent and always use the initializer list:</p>

<pre><code>    node(const node&amp; rhs)
        : data(rhs.data)
        , prev(rhs.prev)
        , next(rhs.next)
    {
    #if defined(DEBUG)
        printf("node() copy ctor called... \n"); 
    #endif
    };
</code></pre>

<hr>

<p>Learn the copy and swap idiom.</p>

<pre><code>    node &amp; operator = (const node&amp; rhs) { //Copy Operator
        printf("Copy Operator");
        if (this != &amp;rhs) {
            data = rhs.data;
            prev = rhs.prev;
            next = rhs.next;
        }
        return *this;
    }
</code></pre>

<p>I would have written like this:</p>

<pre><code>    node&amp; operator=(node const&amp; rhs)
    {
        node tmp(rhs)             // Copy
        rhs.swap(*this);          // Swap
        // Note there is no test for self assignment.
        // This will help because you have no test
        // Optimizes the normal behavior (usually not a self assignment)
        // Does pessimism because self assignment (but that is so rare not a concern)
        return *this;
    }
    void swap(node&amp; other) noexcept
    {
        using std::swap;
        swap(data,    other.data);
        swap(prev,    other.prev);
        swap(next,    other.next);
    }
    friend void swap(node&amp; lhs, node&amp; rhs)
    {
        lhs.swap(rhs);
    }
</code></pre>

<hr>

<p>Why did you leave out the move semantics for a node?</p>

<pre><code>    node(node&amp;&amp; rhs) noexcept
        : data{}
        , prev(nullptr)
        , next(nullptr)
    {
        rhs.swap(*this);
    }
    node&amp; operator=(node&amp;&amp; rhs) noexcept
    {
        rhs.swap(*this); 
        return *this;
    }
</code></pre>

<h3>Why is the destructor not next to constructor?</h3>

<pre><code>    ~node() { printf("~node() dtor called...\n"); delete[] this; };
</code></pre>

<p>Place the construction/destruction all in the same place. So you can see it all works together.</p>

<h3>Getters/Setters</h3>

<p>Normally I say these are bad. But property bag so a resonable implementation. Though I would not particularly bother myself here.</p>

<pre><code>    void set_data(int x) { data = x; }
</code></pre>

<p>If you had templatized the data type. Then I would make sure you have a copy and move version of <code>set_data()</code> (snake case!! is this python?).</p>

<p>When returning data you are not modifying the state.</p>

<pre><code>    int get_data() { return this-&gt;data; }
</code></pre>

<p>Thus you method should be marked <code>const</code>. That way if your node is passed by const reference into a function you could still use the fundtion to get the value out.</p>

<p>If you had templatized the data type. Then I would return by reference (and a version for const reference) to avoid an extra copy. Not really an issue when simply returning an int but for larger types returning by value would cause a copy.</p>

<pre><code>    int&amp;       get_data()       { return data; }
    int const&amp; get_data() const { return data; }
</code></pre>

<hr>

<p>Sure pretty standard.<br>
Would not bother myself.</p>

<pre><code>    void set_prev(node* node) { prev = node; }
    void set_next(node* node) { next = node; }
    node* get_prev() { return this-&gt;prev; }
    node* get_next() { return this-&gt;next; }
</code></pre>

<h3>Try not to use <code>this-&gt;</code></h3>

<p>You don't need to use <code>this-&gt;</code> in a method. The compiler will get them member (unless you have shadowed it by declaring a local variable of the same name).</p>

<p>BUT shadowing is bad practice. It means you have been lazy in naming your variables and leads to you having to differentiate the two with <code>this-&gt;</code>. The trouble here is that if you use the wrong name the compiler can't tell its the wrong one and thus you get no warnings. If you make sure the names are all distinct you can't make this type of error.</p>

<p>And bonus the compiler will warn you about shadowing.</p>

<hr>

<h2>LL</h2>

<p>LL is not a node.</p>

<pre><code>class LL: public node {
</code></pre>

<p>The LL contains a list of nodes but is not one itself.</p>

<hr>

<p>Same comments as above on printing.</p>

<pre><code>    LL() : head(nullptr), tail(nullptr) { printf("LL deault constructor \n"); }
    LL(node* head, node* tail) : head(nullptr), tail(nullptr) { printf("LL constructor with assignments \n"); }
</code></pre>

<hr>

<p>Same comment as above put the destructor close to the constructor so we can see we are creating and correctly destroying the object in the same area of the file.</p>

<pre><code>    ~LL() {
        printf("LL destructor \n");
        while (head)
        {
            node* tmp = head-&gt;get_next();
            delete[] tmp;
        }
    }
</code></pre>

<p>That defiantly looks wrong.</p>

<ol>
<li>There is no removing links for the chain.</li>
<li>There is no moving of head forward.</li>
<li>You are using <code>delete[]</code> to delete a single item.</li>
</ol>

<hr>

<p>You missed the rule of three here.</p>

<p>If you do not define a copy constructor or copy assignment operator then the compiler will generate one for you. The compiler generated version of these functions does a simple shallow copy of the object (which is normally perfect).</p>

<p>But when your object contains RAW pointers this means both object now contain the same pointers. The problem arises when these pointers are owned by the object. This means that the object should be calling delete on the destructor which means both object will call delete on the points (a double delete on a pointer is UB).</p>

<h3>List Interface.</h3>

<p>The internals (or how head/tail are implemented) is an internal part of <code>LL</code> yet here you are leaking the abstraction of <code>node</code> out of the list. </p>

<pre><code>    void set_head(node* node) { head = node; }
    void set_tail(node* node) { tail = node; }
    node* get_head() { return this-&gt;head; }
    node* get_tail() { return this-&gt;tail; }

    //Create and Destroy Fucntions
    node* create_node(int d);
    void delete_list(node* list);
    void delete_selected(node* list, int selection);

    //Add and Remove Node Functions
    node* push_front(node* list, node* node);
    node* push_back(node* list, node* node);
    node* pop_front(node* list);
    void pop_back(node* list);
    void append_before(node* list, node* node, int selection);
    void append_after(node* list, node* node, int selection);

    //View List Functions
    void front_list(node* list);
    void back_list(node* list);
    void print_fwd(node* list);
    void print_bwd(node* list);
    void list_selected(node* list, int selection);
</code></pre>

<p>When interacting with a linked list I would be more inclined to add values of the data type (int until you upgrade node to be templated). I should simply be able to add values to the list and remove values from the list (and retrieve from the ends I suppose).</p>

<p>I definately would not be allowing the customer to crate and pass pointers around.</p>

<p>My interface would have looked like:</p>

<pre><code>    void push_front(T const&amp; value);    // copy a value to the front.
    void push_front(T&amp;&amp; value);         // move a value to the front.
    void push_back(T const&amp; value);     // copy a value to the back.
    void push_back(T&amp;&amp; value);          // move a value to the back.

    T const&amp; get_front() const;         // get a const reference to the front
    T&amp; get_front();                     // get a reference to the front
    T const&amp; get_back() const;          // get a const reference to the front
    T&amp; get_back();                      // get a reference to the front

    void pop_front();                   // pop the front of the list.
    void pop_back();                    // pop the back of the list.

    bool empty() const;                 // check if the list is empty.
    std::size_t size() const;           // get the size of the list.

   // Ignore iterators for version 1 we can do those after you fix up this
</code></pre>

<h2>       // version and make it better.</h2>

<p>This should be a private member.</p>

<pre><code>node* LL::create_node(int d) { return new node{ d, nullptr, nullptr }; }
</code></pre>

<hr>

<p>This is a bug. Same reason as the destructor.</p>

<pre><code>void LL::delete_list(node* list) {
    while (list)
    {
        node* tmp = list;
        list = list-&gt;get_next();
        delete[] tmp;
    }
    printf("List Deleted. \n");
}
</code></pre>

<p>Note when you have repeated code like this (here and destructor). Then you should be re-using function. Basically the destructor should call this not have the same code repeated. Taht way when you fix an error you only need to fix it in one place.</p>

<hr>

<pre><code>    // You are not checking that list does not slip of the end of the list.
    while (count != (selection - 1)) {
        list = list-&gt;get_next();
        count++;
    }
</code></pre>

<p>If list becomes <code>nullptr</code> then calling <code>get_next()</code> will be UB.</p>

<hr>

<p>Wrong version of delete.    </p>

<pre><code>    //delete[] tmp;
</code></pre>

<p>It should be</p>

<pre><code>    delete tmp;
</code></pre>

<hr>

<p>This function assumes that <code>list</code> is the head of the list.</p>

<pre><code>node* LL::push_front(node* list, node* node) {
    if (!list) { return node; }

    node-&gt;set_next(list);
    list-&gt;set_prev(node);  // If list is not the head this overwrites a value.
    list = node;
</code></pre>

<p>You also make no effort to update <code>tail</code>. </p>

<hr>
    </div>