<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>A faster <code>isprime</code> check</strong></p>

<p>Checking even numbers before and then only looping over only odd numbers makes this twice as fast.</p>

<pre><code>def isprime(n):
    if n &lt; 2:
        return False
    if n % 2 == 0 and n != 2:
        return False
    for i in range(3,int(math.sqrt(n)),2):
        if n % i == 0:
            return False
    return True
</code></pre>

<p><strong>An even faster <code>isprime</code> check</strong></p>

<p><a href="https://primes.utm.edu/notes/faq/six.html" rel="nofollow noreferrer">All primes (past 2 and 3) are of the forms 6n+1 and 6n-1</a>.</p>

<pre><code>def isprime(n):
    # The same as above

primes = []
for i in range(6,MAX,6):
    if isprime(i+1):
        primes.append(i+1)
    elif isprime(i-1):
        primes.append(i-1)
</code></pre>

<p><strong>An extremly fast prime checker</strong></p>

<p>If you need to make several test in a row, the <a href="https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes" rel="nofollow noreferrer">Sieve of Erastothenes</a> is the best method</p>

<pre><code>MAX = 1000 # depends on your needs
def eratosthenes(n):
    # Taken from Rosetta Code
    multiples = set()
    for i in range(2, n+1):
        if i not in multiples:
            print(i)
            multiples.update(range(i*i, n+1, i))

primes = eratosthenes(MAX)
def is_prime(n,primes):
    return n in primes
</code></pre>

<p>If you  are really really desperate about performance <a href="https://stackoverflow.com/questions/2068372/fastest-way-to-list-all-primes-below-n">look here for faster-than-you-can-imagine implementations of the sieve of Eratostenes</a>.</p>
    </div>