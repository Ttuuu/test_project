<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The first issue is formatting. Here's your code reformatted to look nice.</p>

<pre><code>def comp(nums, i, j, exps, op):
    nums0 = []
    for x in range(0, len(nums)):
        if not (x == i or x == j):
            nums0.append(nums[x])

    if op == '+':
        tmp = nums[i] + nums[j]
    elif op == '*':
        tmp = nums[i] * nums[j]
    elif op == '-':
        tmp = nums[i] - nums[j]
    elif op == '/':
        if nums[j] &lt; 0.0001 and nums[j] &gt; -0.0001:
            tmp = 100000
        else:
            tmp = nums[i] * 1.0 / nums[j]
    elif op == '^':
        return comp(nums, j, i, exps, '-')
    elif op == '%':
        return comp(nums, j, i, exps, '/')

    exps.append(str((nums[i], op, nums[j])))
    nums0.append(tmp)
    return nums0

def cal(nums, exps):
    if len(nums) == 1:
        return nums[0] &gt; 23.9999 and nums[0] &lt; 24.0001;
    pairs = {}
    for i in range(0, len(nums)):
        for j in range(i+1, len(nums)):
            tmp_key = str((min(nums[i], nums[j]), max(nums[i], nums[j])))
            # print tmp_key
            if pairs.has_key(tmp_key):
                continue
            # print 'put ' + tmp_key
            pairs[tmp_key] = ''
            for op in '+', '-', '*', '/', '^', '%':
                nums0 = comp(nums, i, j, exps, op)
                if cal(nums0, exps):
                    print(str(exps))
                exps.pop()
</code></pre>

<p>I removed the semicolons, added proper spacing and removed useless parentheses. I also put brackets on the <code>print</code> so it works on Python 3, but that's optional.</p>

<p>Further, there are a lot of trivial non-formatting touch-ups:</p>

<ul>
<li><code>has_key</code> is long deprecated; use the <code>in</code> operator.</li>
<li><code>range(0, x)</code> is just <code>range(x)</code>.</li>
<li><code>for i in range(len(vals))</code> is better as <code>for i, _ in enumerate(vals)</code></li>
<li>List comprehensions are great.</li>
<li><code>not (x == i or x == j)</code> just looks cleaner as <code>x != i and x != j</code></li>
<li><code>x &lt; upper_bound and x &gt; lower_bound</code> is just <code>lower_bound &lt; x &lt; upper_bound</code>.</li>
<li><code>x * 1.0 / y</code> is just <code>x / float(y)</code>, which is just <code>x / y</code> with <code>from __future__ import division</code></li>
<li><code>itertools.combinations</code> is your friend</li>
<li><code>(min(x, y), max(x, y))</code> is <code>tuple(sorted((x, y)))</code></li>
<li>Dead comments are rotting comments. Remove them.</li>
<li><code>pairs</code> is being used as a <code>set</code>, so use a <code>set</code>.</li>
<li>Move values down to where they're used; don't leave them hanging... especially if you might just discard them first.</li>
<li>Recursion in <code>comp</code> seems to be doing more harm than good. Moving your strange division to another function deals with this better.</li>
<li>Throw an error for unknown operators</li>
<li>Get rid of <code>tmp</code> in <code>comp</code> by moving the operation to another function</li>
<li>Your naming is poor. Try to write meaningful names.</li>
<li><code>exps</code> doesn't need to hold strings. Tuples would do just as well, if not better. The same goes for <code>pairs</code>.</li>
</ul>



<pre><code>from __future__ import division

from itertools import combinations

def strange_div(lhs, rhs):
    if -0.0001 &lt; rhs &lt; 0.0001:
        return 100000
    else:
        return lhs / rhs

def do_op(op, lhs, rhs):
    if op == '+':
        return lhs + rhs
    elif op == '*':
        return lhs * rhs
    elif op == '-':
        return lhs - rhs
    elif op == '^':
        return rhs - lhs
    elif op == '/':
        return strange_div(lhs, rhs)
    elif op == '%':
        return strange_div(rhs, lhs)
    raise ValueError("Unknown operator: {!r}".format(op))

def compute_step(operands, x_idx, y_idx, method, op):
    method.append((operands[x_idx], op, operands[y_idx]))
    new_operands = [num for x, num in enumerate(operands) if x != x_idx and x != y_idx]
    new_operands.append(do_op(op, operands[x_idx], operands[y_idx]))
    return new_operands

def find_close_calculations(operands, method):
    if len(operands) == 1:
        return 23.9999 &lt; operands[0] &lt; 24.0001

    pairs = set()
    for (i, lhs), (j, rhs) in combinations(enumerate(operands), 2):
        tmp_key = tuple(sorted((lhs, rhs)))
        if tmp_key in pairs:
            continue
        pairs.add(tmp_key)

        for op in '+', '-', '*', '/', '^', '%':
            stepped = compute_step(operands, i, j, method, op)
            if find_close_calculations(stepped, method):
                print(str(method))
            method.pop()
</code></pre>

<p>Then we see <code>find_close_calculations</code> is doing</p>

<pre><code>if find_close_calculations(stepped, method):
    print(str(method))
</code></pre>

<p>which is really a bit odd as it means <code>find_close_calculations([24], [])</code> won't print anything, it means we have a meaningless return value from calling it and it means we have to pass a strange second argument. Better would be to extract the recursive component out from the result-giving. Another fancier option is to generate <code>operands</code> differently.</p>

<pre><code>def find_close_calculations(operands):
    if len(operands) == 1:
        if 23.9999 &lt; operands[0] &lt; 24.0001:
            yield []
        return

    pairs = set()
    for (i, lhs), (j, rhs) in combinations(enumerate(operands), 2):
        tmp_key = tuple(sorted((lhs, rhs)))
        if tmp_key in pairs:
            continue
        pairs.add(tmp_key)

        for op in '+', '-', '*', '/', '^', '%':
            stepped = compute_step(operands, op, i, j)
            for method in find_close_calculations(stepped):
                method.append((lhs, op, rhs))
                yield method
</code></pre>

<p>This gives a generator of methods, rather than printing them, which is much more useful. Printing the output is thus done with</p>

<pre><code>for method in find_close_calculations([3, 9, 10, 7]):
    print(method)
</code></pre>

<p>Since <code>new_operands</code> is an expensive copy anyway, you can simplify the chain by just passing a value and deleting more trivially:</p>

<pre><code>def compute_step(operands, op, lhs, rhs):
    new_operands = operands.copy()
    new_operands.remove(lhs)
    new_operands.remove(rhs)
    new_operands.append(do_op(op, lhs, rhs))
    return new_operands

def find_close_calculations(operands):
    ...
    for lhs, rhs in combinations(operands, 2):
        ...
            stepped = compute_step(operands, op, lhs, rhs)
            ...
</code></pre>

<p>A little longer, but much more obvious of intent.</p>
    </div>