<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Let's show how to split the model up and remove all the UI elements.</p>

<p>First of all, we want to play a card game, so let's define the cards:</p>

<pre><code>public enum Card {
    ACE, KING, QUEEN, JACK, JOKER;
}
</code></pre>

<hr>

<p>We have some kind of account with points:</p>

<pre><code>
import java.util.function.Predicate;

public final class Account {
    private int balance;

    public Account(int startingBalance) {
        this.balance = startingBalance;
    }

    public int getBalance() {
        return balance;
    }

    public void withdraw(int loss) {
        balance -= loss;
    }

    public void deposit(int gain) {
        balance += gain;
    }

    public boolean test(Predicate&lt;Integer&gt; test) {
        return test.test(balance);
    }

    @Override
    public String toString() {
        return String.format("Account has %d points", balance);
    }
}
</code></pre>

<p>So that god rid of that part of the equations, we don't want anything in the machine description itself if we can separate it out. Note that we don't supply a "setter".</p>

<hr>

<p>Now we have multiple things resulting from a single spin. Somehow we must present them in the GUI, but without directly calling the GUI. Tricky? Not that tricky, just use a <em>listener</em> interface that the GUI classes can implement:</p>

<pre><code>import java.util.List;

public interface SpinListener {
    void showCardSpin(List&lt;Card&gt; cards);
    void showResult(String result);
}
</code></pre>

<hr>

<p>Fine, now let's implement the game:</p>

<pre><code>import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Collections;
import java.util.EnumSet;
import java.util.List;
import java.util.Random;

public final class FruityMacFruitMachine {
    // in the end just a list of all the cards as an unmodifiable constant value
    private final static List&lt;Card&gt; CARDS =
            Collections.unmodifiableList(new ArrayList&lt;Card&gt;(EnumSet.allOf(Card.class)));
    private static final int CARD_COUNT = 3;

    private static final int LOSS_PER_JOKER = 25;
    private static final int WINNINGS_FOR_THREE_OF_A_KIND = 50;
    private static final int WINNINGS_FOR_TWO_OF_A_KIND = 20;

    // I'm a security buff, secure randoms are *more* random than Random
    private final Random random = new SecureRandom();
    private final Account account;
    private SpinListener listener;

    // we create the machine with an account and a listener for the results
    public FruityMacFruitMachine(Account account, SpinListener listener) {
        this.account = account;
        this.listener = listener;
    }

    // create a card spin, clearly a separate method
    private List&lt;Card&gt; cardSpin(int amountOfCards) {
        List&lt;Card&gt; drawnCards = new ArrayList&lt;Card&gt;(amountOfCards);
        for (int i = 0; i &lt; amountOfCards; i++) {
            drawnCards.add(CARDS.get(random.nextInt(CARDS.size())));
        }
        return drawnCards;
    }

    // the spin and all the followup moves
    public void spin() {
        // take a spin
        List&lt;Card&gt; draw = cardSpin(CARD_COUNT);
        // the GUI should not change the draw, right?
        listener.showCardSpin(Collections.unmodifiableList(draw));

        // check for jokers by iterating over the cards,
        // filtering out the jokers and then counting them
        int jokers = (int) draw.stream().filter(card -&gt; card == Card.JOKER).count();
        if (jokers &gt;= 1) {
            // we reuse the loss, no need to calculate twice!
            int loss = LOSS_PER_JOKER * jokers;
            account.withdraw(loss);
            listener.showResult(String.format("%d joker(s): you lose %d points", jokers, loss));
            return;
        }

        // we now count the distinct cards
        int distinctCards = (int) draw.stream().distinct().count();

        // all cards are distinct -&gt; no luck
        if (distinctCards == CARD_COUNT) {
            listener.showResult("No luck, draw again");
            return;
        }

        // we just declare the variables in advance
        // and then initialize them in the if / else code blocks
        int gain;
        String result;
        if (distinctCards == 1) {
            gain = WINNINGS_FOR_THREE_OF_A_KIND;
            result = "Three of a kind";
        } else if (distinctCards == 2) {
            gain = WINNINGS_FOR_TWO_OF_A_KIND;
            result = "Two of a kind";
        } else {
            throw new IllegalStateException();
        }
        account.deposit(gain);
        listener.showResult(String.format("%s: you win %d points", result, gain));
    }
}
</code></pre>

<hr>

<p>Now here is a console implementation of the game:</p>

<pre><code>
public static void main(String[] args) {
    Account account = new Account(100);
    FruityMacFruitMachine game = new FruityMacFruitMachine(account, new SpinListener() {
        @Override
        public void showCardSpin(List&lt;Card&gt; cards) {
            System.out.println(cards);
        }

        @Override
        public void showResult(String result) {
            System.out.println(result);
        }
    });
    while (account.test(x -&gt; x &gt;= 50 &amp;&amp; x &lt; 200)) {
        game.spin();
        System.out.println(account);
        System.out.println();
    }
    System.out.println("Thank you for playing, come again");
}

</code></pre>

<p>Up to you go create a GUI around it by implementing the listener and some model / view for the <code>Account</code>.</p>
    </div>