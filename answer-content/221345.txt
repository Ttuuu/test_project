<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>At first glance, you code appears to have a lot of complicated and repetitive sections.  That's a <a href="https://en.wikipedia.org/wiki/Code_smell" rel="noreferrer">bad smell</a>, and often a hint that you should either split the repetitive parts off into a function or otherwise reorganize your code to get rid of the repetition.  (Sometimes, one option can be to just simplify the code until the repetitive parts become trivial.)</p>

<p>A lot of the complexity in the repetitive parts of your code seems to come from your decision to store the grid as a dictionary of dictionaries.  There's a couple of ways to simplify that:</p>

<ul>
<li><p>In Python, dictionary keys can be tuples.  So you can just do:</p>

<pre><code>visited = {}
# ...
if (row, col) not in visited:
    # do something
    visited[row, col] = True
else:
    # do something else
</code></pre>

<p>(Also, you shouldn't name your dictionary <code>dict</code>, both because it's <a href="https://docs.python.org/3/library/stdtypes.html#dict" rel="noreferrer">the name of the dictionary type in Python</a> and also because it's an uninformative name that doesn't explain what you're using the dictionary for.  Call its something meaningful like <code>visited_cells</code> or just <code>visited</code> instead.)</p></li>
<li><p>Also, since you're really only using the dictionary as a set, why not make it one?  The code can look exactly the same as above, except that you'll start with <code>visited = set()</code> instead of <code>visited = {}</code>, and mark cells as visited with <code>visited.add((row, col))</code>.</p></li>
<li><p>Alternatively, instead of using a dictionary or a set, you could just use a two-dimensional array (implemented e.g. as a list of lists) of booleans, initialized to all <code>False</code>, something like this:</p>

<pre><code>visited = [[False] * cols for row in range(rows)]
# ...
if not visited[row][col]:
    # do something
    visited[row][col] = True
else:
    # do something else
</code></pre>

<p>I suspect this is what the exercise is actually expecting you to do.  However, I do rather like your idea of using a dictionary (or a set) instead, and I'm only mentioning this alternative for the sake of completeness.</p></li>
</ul>

<p>One advantage of using a dictionary or a set to store the visited cells is that it means you don't actually need to care about the boundaries of the grid, since the dictionary can accommodate arbitrary large or small coordinates.  In particular, you don't actually need to adjust the input coordinates from one-based to zero-based indexing (and back again for output), so you can just eliminate those parts of your code.</p>

<hr>

<p>Another way to reduce the repetitiveness of your code is to observe that all the sections for handling movement in different directions look basically the same, except for the index (row or column) being changed and the step size (+1 or -1) it's being changed by.  If you defined a dictionary that mapped the N/S/E/W direction letters to the corresponding coordinate offsets, something like this:</p>

<pre><code>directions = {
    'N': (-1, 0),
    'S': (+1, 0),
    'W': (0, -1),
    'E': (0, +1),
}
</code></pre>

<p>then you could combine all those sections into a single one, something like this:</p>

<pre><code>row = start_row
col = start_col
visited = {(row, col)}  # loop below assumes current square is always marked as visited

for compass_heading in instructions:
    row_step, col_step = directions[compass_heading]

    while (row, col) in visited:
        row += row_step
        col += col_step

    visited.add((row, col))
</code></pre>

<p>(Note that I renamed a few of your variables here.  You should not use variables named <code>startRow</code> and <code>startCol</code> to store the <em>current</em> row and column, since that's just plain misleading, and in any case variable names in Python should be written in <code>snake_case</code> instead of <code>camelCase</code>.  And <code>a</code> is just an awful variable name, so I renamed it to <code>instructions</code>.  You already have a variable named that, but it's completely unnecessary and unused.  You could just <a href="https://stackoverflow.com/questions/9532576/ignore-part-of-a-python-tuple">use the dummy variable <code>_</code> in the list assignment</a> instead.)</p>

<hr>

<p>As for making the code faster, I see no obvious trivial opportunities there.  Using a single set instead of a dictionary of dictionaries is probably somewhat faster, perhaps even twice as fast if your running time is dominated by dictionary lookups, but not <em>orders of magnitude</em> faster.  A list of lists of booleans <em>might</em> be even faster for small grids, but the time to initialize it scales with the size of the grid, whereas the time to set up a single-element set (or dictionary) is basically constant.  Anyway, I'd suggest first focusing on cleaning up your code, and only worrying about optimization if it's still too slow after that.</p>

<p>If it is, a good starting point is to focus on worst-case performance, i.e. to think about how a sneaky test case designed might make your code run as slowly as possible, and try to find ways to counter that.</p>

<p>In particular, the worst case input for your algorithm (with or without the improvements I suggested above) is something like <code>NSNSNSNSNSNSNSNSNSNSNSNSNS...</code>, which forces the robot to move back and forth over an increasingly long stretch of visited cells, leading to an O(<em>n</em>²) execution time.</p>

<p>One way to avoid that would be to store a dictionary of "signposts" recording, for each move we make, where we ended up on the grid after that move.  That way, the next time the robot finds itself in the same square and moving in the same direction, it can skip all the cells in between.  Also, since the movement rules are symmetric, we can also leave behind "backwards" signposts recording where the robot came from as it entered each cell, allowing us to skip the intervening cells in the opposite direction as well.</p>

<p>A quick sketch of how to implement that might look something like this:</p>

<pre><code># look-up table of (row_step, col_step, opposite_heading) for each compass heading
directions = {
    'N': (-1, 0, 'S'),
    'S': (+1, 0, 'N'),
    'W': (0, -1, 'E'),
    'E': (0, +1, 'W'),
}

row = start_row
col = start_col
visited = {(row, col)}  # loop below assumes current square is always marked as visited
signposts = {}

for compass_heading in instructions:
    last_row = row
    last_col = col
    row_step, col_step, opposite_heading = directions[compass_heading]

    while (row, col) in visited:
        if (row, col, compass_heading) in signposts:
            # we've been this way before!
            row, col = signposts[row, col, compass_heading]
        row += row_step
        col += col_step

    visited.add((row, col))

    signposts[last_row, last_col, compass_heading] = (row, col)
    signposts[row, col, opposite_heading] = (last_row, last_col)
</code></pre>

<p>Note that, as written, the <code>signposts</code> dictionary always grows linearly with the size of the input.  You may obtain some additional speed and memory savings by removing old signposts as they become unnecessary.</p>

<p>In particular, we can safely remove any signposts we encounter as soon as we've used them, since they will either become useless or get overwritten anyway.  We can also safely remove any <em>backwards</em> signposts that we pass, since those also become useless.  With those changes, the optimized inner loop would look something like this:</p>

<pre><code>    while (row, col) in visited:
        if (row, col, compass_heading) in signposts:
            # follow and remove signposts; any that are still valid will be restored below
            row, col = signposts.pop((row, col, compass_heading))
            del signposts[row, col, opposite_heading]
        row += row_step
        col += col_step
</code></pre>

<p>However, note that the set of visited cells will still grow linearly, and that meandering paths like, say, <code>NESWNESWNESWNESWNESW...</code> can still leave behind a linearly growing number of signposts, so the worst-case memory consumption is still linear even with this optimization.</p>

<p>Ps. <a href="https://tio.run/##fVOxjuIwEO39FXNQhCy5CHTdniiuQNfRUGyxQshLzGKtE@dsA0JRvp2bSRwbWAlXzrPf@L03k/riDrr6db2OYWL0eWudqDPYaeV3uq61lU6ksNcGBN8d8LCsubVwELyQ1ScrpBE7J3VlYQENA1zJKnmFyc95BrMMknWSZj28Jnjq4VWA3whGiAjJMsBLDxMB7yDcMmYdN26LUvGxuf9Cud2XrKwzx6BltFqu30bwAvPZjLGeEuisJ4UC7CTJZ0EeKIkuhLQFGIPSuoYPobAA@j6WwsLuaIyoHNh/R24ESAtcnfnFQsnNFxbhFnw9ZuVnhRm6Lh00QDn6CLc@QpAV3Gp/7fwrbgejpDdAvXCSTNCzpoX6C4hNen94fMO6OrWRlZvsR381EZqHSy3sjS6hwdfajE5Vm@f5KO2554NUAmJq5Mfb763Qkvt4I3tMoKOEpCKJ1hhHT3XhVwUYUeqTiFd/I3oBd@AOqBHWSaXgxJUs4EzbD4EU67TBpnQtvCs96KFBGCrmta4nT5SmdxUKoSL1PbIeW7BhN2/CdBH6FnCSMV2ELgZ8aAzcpT9E72POeVFE0ak/jMKGWcrCCH0ztsEQYoUH/hNjRPteHhUMwv8YI0/0T7g7Bz/QwnBlGBZo/K69OYxjAU3YdwFcr/8B" rel="noreferrer" title="Python 3 – Try It Online">Here's a simple online demo</a> of the signpost-optimized algorithm I describe above, with some debug print statements added.  Feel free to play around with it to see how it works.</p>
    </div>