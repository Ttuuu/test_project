<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>How safe is my code?</p>
</blockquote>

<p>I would suggest if you protect the login form from</p>

<ul>
<li>CSRF (<a href="https://en.wikipedia.org/wiki/Cross-site_request_forgery" rel="nofollow noreferrer">Cross site request forgery</a>) Attacks by generating a unique code for each session and assigning it to a hidden field in the form, and check every post request whether it matches the one from the session or not.</li>
</ul>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-html lang-html prettyprint-override"><code>&lt;input type = "hidden" name="token" value="' . $_SESSION['csrf_token'] . '"&gt;</code></pre>
</div>
</div>


<p>Example: ignore naming convention</p>

<pre><code>   class token {

     public static function generate_csrf_token() {
           if (!isset($_SESSION['csrf_token'])) {
              $_SESSION['csrf_token'] = bin2hex(random_bytes(32));
           }
        }

    public static function check_csrf_token($token) {
        return $token === $_SESSION['csrf_token'];
    }
 }
</code></pre>

<p>Then you want to check when the form is submitted and compare both token.</p>

<ul>
<li><p>Timing attacks, disable logins requests under a second, mostly bots and robots.</p>

<p>

</p><pre><code>    //Gets the value when the page loads and set it in a session
    $start = microtime(true);

    if (!isset($_SESSION['microtime'])) {
     $_SESSION['microtime'] = $start;
    }
</code></pre>

<p>and after the login button is clicked, check and perform the same and then compare the time</p>

<pre><code>if (isset($_POST['submit'])) {
   $finish = microtime(true);
   $seconds_passed = $finish - $_SESSION['microtime'];
   if ($seconds_passed &lt; 1) {

?&gt;
</code></pre>

<ul>
<li><p>Limit requests from an ip, so for example say, 3 requests maximally allowed per a second, to protect from lots of attack.</p></li>
<li><p>Putting captcha and login attempts will be useful.</p></li>
<li><p>Session Hijacking multiple things:</p></li>
</ul></li>
</ul>

<p>Have an identification method that is making each user unique (perhaps hashing user agent and ip) and check every request if they match to see if the current user is the same. And have a session requests tracker that would re-assign a new session id after 25 requests for example. </p>

<pre><code> if (!isset($_SESSION['session_clicked_times'])) {
            $_SESSION['session_clicked_times'] = 1;
        } else {
            if (($_SESSION['session_clicked_times']) &gt;= 25) {
                $_SESSION['session_clicked_times'] = 0;
                session_regenerate_id(true);
            }
            $_SESSION['session_clicked_times'] += 1;
        }
</code></pre>

<p>Also generate a new id once logged in, and so on.</p>

<p>This code:</p>

<pre><code> if( $RowCount == 0 ){
   // error   
  } else{ // User exists

      if(password_verify($_POST['password'], $user['password'])){

     //login

      } else {
         //error
        }      
    }  
}
</code></pre>

<p>to just this (since they both handle the same thing in your case)</p>

<pre><code> if( $RowCount == 0 || !password_verify($_POST['password'], $user['password']) ){
       // error   
      } else { 
       //login
    }
</code></pre>
    </div>