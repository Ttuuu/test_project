<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Good job separating concerns</h2>

<p>Your tetris game-board model, piece and UI code is nicely separated in classes, so each one has its own responibility. Well done!</p>

<h2>Don't use magic values, use Enum</h2>

<pre><code> public Piece(int f)
</code></pre>

<p>This switches on a magic value of <code>f</code>. <code>Piece</code> is a excellent candidate for <code>Enum</code>!</p>

<pre><code> public enum Piece {  L, J, T, Z, I, ... }
</code></pre>

<p>Enum works as class as well, so you can add a constructor:</p>

<pre><code> public Piece ( int x1, int y1, int x2, .... ) 
</code></pre>

<p>Then the enum becomes:</p>

<pre><code> public enum Piece {

     L (0,7,0,8....);
     J (....)
 }
</code></pre>

<p>Your <code>gameBoard</code> can store which type of <code>Piece</code> it contains:</p>

<pre><code>private Piece gameBoard[][]=new Piece[boardHeight][boardWidth];
</code></pre>

<p>The color of a <code>Piece</code> could also be stored in the <code>Piece</code> itself, so you don't need magic lookup methods.</p>

<h2>Use Java naming conventions</h2>

<p>For example, take a look here: <a href="https://www.geeksforgeeks.org/java-naming-conventions/" rel="nofollow noreferrer">https://www.geeksforgeeks.org/java-naming-conventions/</a></p>

<p>This method <code>turn_AroundX1</code> should be called <code>turnAroundX1</code></p>

<h2>Don't duplicate <code>boolean</code>s.</h2>

<pre><code> if(tmp==4) {
        return true;
    }
    return false;
</code></pre>

<p>If tmp = 4, the code is: </p>

<pre><code>  if(true) {
            return true;
        }
        return false;
</code></pre>

<p>Better to rewrite to:</p>

<pre><code>return (tmp == 4);
</code></pre>

<h2>Use proper variable names &amp; simplest interface as possible.</h2>

<p>I saw this:</p>

<pre><code>ArrayList&lt;Integer&gt; arrayList = new ArrayList&lt;Integer&gt;();
</code></pre>

<p>What does this 'arrayList' contain? That would be a better variable name.</p>

<p>Also, the rest of the code doesn't care how the <code>List</code> is implemented, as long as it behaves like a list. It is best practice to write:</p>

<pre><code>List&lt;Integer&gt; listOfAwesomeThings = new ArrayList&lt;Integer&gt;();
</code></pre>
    </div>