<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>In addition to butt's comments:</p>

<h1>Avoid repetition</h1>

<p>There are lots of places in the code where you are unnecessarily repeating yourself, in particular when it comes to types. For example, take this line:</p>

<pre><code>Quaternion&lt;int&gt; quat = normalize(Quaternion&lt;int&gt;(axisX, axisY, axisZ, degrees));
</code></pre>

<p>You are writing <code>Quaternion&lt;int&gt;</code> on both sides of the declaration. You can easily get rid of one by using <code>auto</code>. But why are you explicitly constructing a copy of the quaternion in the first place? You can just use <code>*this</code>, and then the whole line reduces to:</p>

<pre><code>auto quat = normalize(*this);
</code></pre>

<p>In this line:</p>

<pre><code>std::vector&lt;int&gt; mat = std::vector&lt;int&gt; {...};
</code></pre>

<p>You also repeat the type twice. Either use <code>auto</code> on the left, or just write:</p>

<pre><code>std::vector&lt;int&gt; mat {...};
</code></pre>

<p>In fact, if you want to <code>return</code> a quaternion, and the compiler already knows the return type of a member function, then you don't need to explicitly specify this a second time. For example, <code>operator+()</code> can be written as:</p>

<pre><code>template&lt;typename T&gt;
inline Quaternion&lt;T&gt; Quaternion&lt;T&gt;::operator+(const Vector4&lt;T&gt;&amp; rhs) const
{
    return {m_data[0] + rhs.x, m_data[1] + rhs.y, m_data[2] + rhs.z, m_data[3] + rhs.w};
}
</code></pre>

<p>Also, butt already mentioned the template specializations, this is another case of unnecessary repetition.</p>

<p>Another thing is that you don't have to write <code>Quaternion&lt;T&gt;</code> inside the definition of <code>class Quaternion</code>, you can omit the <code>&lt;T&gt;</code>. A lot of repetition can be avoided if you would define all member functions inside <code>class Quaternion</code> instead of putting them in <code>"Quaternion.inl"</code>, but if you think it is better to have those separated then you'll have to live with it.</p>

<h1>Make functions that don't use member variables <code>static</code></h1>

<p>A function that does not access member variables should be made <code>static</code>, so it can be used without needing an instance of the class. For example:</p>

<pre><code>inline Quaternion&lt;T&gt; normalize(const Quaternion&lt;T&gt;&amp; vector) const;
</code></pre>

<p>This should be written as:</p>

<pre><code>static inline Quaternion normalize(const Quaternion&amp; vector);
</code></pre>
    </div>