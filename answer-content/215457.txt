<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Naming &amp; <a href="https://blog.codinghorror.com/code-smells/" rel="nofollow noreferrer">Type Embedded in Name</a></h1>

<p>Avoid placing types in method names; it's not only redundant, but it forces you to change the name if the type changes.</p>

<blockquote>
<pre><code>class Server {
    // ..
    private int serverID;
</code></pre>
  
  

<pre><code>class Customer {
    // ..
    private final int customerID;
</code></pre>
</blockquote>

<p>When you see the class <code>Server</code> as a domain, it is semantically the same when you use <code>id</code> instead of <code>serverID</code> and the same for <code>Customer</code></p>

<pre><code>class Server {
    // ..
    private int id;
</code></pre>

<h1><a href="http://www.cs.mun.ca/~donald/bsc/node13.html" rel="nofollow noreferrer">Data Encapsulation</a></h1>

<p>Data encapsulation, sometimes referred to as data hiding, is the mechanism whereby the implementation details of a class are kept hidden from the user.</p>

<blockquote>
<pre><code>class EventManager {
    Server[] servers;    
    PriorityQueue&lt;Event&gt; events;    
    Statistics statistics = new Statistics();    
    RandomGenerator gen;
</code></pre>
</blockquote>

<p>Currently <code>EventManager</code> reveals its implementation at <a href="https://docs.oracle.com/javase/tutorial/java/javaOO/accesscontrol.html" rel="nofollow noreferrer">package-private</a> scope, but these members get never accessed and do not need to be visible outside of the class and should be <code>private</code>.</p>

<h1><a href="https://refactoring.guru/preserve-whole-object" rel="nofollow noreferrer">Preserve Whole Object</a></h1>

<blockquote>
<pre><code>public EventManager(int numServers, int numCustomer,
                        int seed, double arrivalRate, double svcRate, double restRate) {
    // ..
    this.gen = new RandomGenerator(seed, arrivalRate, svcRate, restRate);
    // ..
</code></pre>
</blockquote>

<p>Since the client already knows all variables of a <code>RandomGenerator</code>, he/she could directly pass in the object.</p>

<pre><code>public EventManager(int numServers, 
                    int numCustomer,
                    RandomGenerator randomGenerator) {
    //..
    this.gen = randomGenerator;
    // ..
</code></pre>

<p>This has multiple benefits</p>

<ul>
<li>smaller parameter list, cleaner</li>
<li><a href="https://martinfowler.com/articles/injection.html" rel="nofollow noreferrer">Inversion of Control Containers and the Dependency Injection pattern</a></li>
<li>easier for testing since you could pass in your own <code>RandomGenerator</code></li>
<li>if constructor of <code>RandomGenerator</code> changes, constructor of <code>EventManager</code> do not need to change.</li>
</ul>

<h1>Redundant initialization</h1>

<blockquote>
<pre><code>class Server {

    // ..
    private Event served = null;

    private Event wait = null;
</code></pre>
</blockquote>

<p>Initializing fields with <code>null</code> is redundant since the <a href="https://docs.oracle.com/javase/specs/jls/se7/html/jls-4.html#jls-4.12.5" rel="nofollow noreferrer">default value of a reference type is <code>null</code></a>. So the above is equivalent to</p>

<pre><code>class Server {

    // ..
    private Event served;

    private Event wait;
</code></pre>

<h1>Use of <code>Static</code></h1>

<blockquote>
<pre><code>class Server {
    private static int counter = 1;
    // ..

    public Server() {
        this.serverID = counter;
        counter++;
    }
</code></pre>
  
  

<pre><code>class Customer {
    private static int counter = 1;

    public Customer(double time) {
        this.customerID = counter;
        this.time = time;
        counter++;
    }
</code></pre>
</blockquote>

<p>A <code>static</code> variable is not bad at all but in this case it is against <a href="http://www.cs.mun.ca/~donald/bsc/node13.html" rel="nofollow noreferrer">Data Encapsulation</a>, because all instances of  <code>Server</code>\ <code>Customer</code> share the static variable <code>counter</code>. </p>

<p>Imagine you involve these classes into some jUnit tests. If a test depends on a id, you will never know which id a customer has, because jUnit executes tests in unpredictable order.  Tests should not depend on other tests, but as this stands, these tests would change the behavior of other ones.</p>

<h2>Use a <a href="https://en.wikipedia.org/wiki/Factory_method_pattern" rel="nofollow noreferrer">Factory</a></h2>

<p>Create a Factory for <code>Customer</code> and <code>Server</code> that tracks the ids and passes them through the constructor.</p>

<p>Simple example:</p>

<pre><code>class CustomerFactory {
    private int nextId;

    public CustomerFactory(int startId) {
        nextId = startId;
    }

    Customer createBy(double time) {
        return new Customer(time, nextId++);
    }
}

class Customer {
    private final int id;

    private final double time;

    Customer(double time, int id) { /* .. */ }
}
</code></pre>

<h1><a href="https://www.martinfowler.com/bliki/TellDontAsk.html" rel="nofollow noreferrer">Tell, Don't Ask</a></h1>

<blockquote>
  <p>Tell-Don't-Ask is a principle that helps people remember that object-orientation is about bundling data with the functions that operate on that data.</p>

<pre><code>class EventComparator implements Comparator&lt;Event&gt; {

    public int compare(Event e1, Event e2) {
        if (e1.getTime() &lt; e2.getTime()) {
            return -1;
        } else if (e1.getTime() &gt; e2.getTime()) {
            return 1;
        } else if (e1.getCustomerID() &lt; e2.getCustomerID()) {
            return -1;
        } else if (e1.getCustomerID() &gt; e2.getCustomerID()) {
            return 1;
        } else {
            System.out.println("Bug with code, please check");
            return 0;
        }
    }
}
</code></pre>
</blockquote>

<p>Instead of <em>asking</em> for <code>time</code> and <code>customerID</code>, <em>tell</em> <code>e1</code> to operate with some data:</p>

<pre><code>public int compare(Event e1, Event e2) {
    if (e1.isBefore(e2)) {
        return -1;
    } else if (e1.isAfter(e2)) {
        return 1;
    } else if (e1.hasSmallerIdThen(e2)) {
        return -1;
    } else if (e1.hasBiggerIdThen(e2)) {
        return 1;
    } else {
        System.out.println("Bug with code, please check");
        return 0;
    }
}
</code></pre>

<h1><a href="//stackoverflow.com/q/5506373#5506438">@Override</a></h1>

<blockquote>
<pre><code>class Event {
    // ..

    public abstract Event getNextEvent(Server[] servers, RandomGenerator gen);

    public abstract void updateStatistics(Statistics statistics);
</code></pre>
</blockquote>

<p>These methods get overridden by multiple classes and none of them uses <code>@Override</code>. It gives you as a programmer safety from the compiler's check that you really override a method and on the other hand it helps me as a reader to see at a glance which methods of the superclass get overridden.</p>

<pre><code>@Override
public Event getNextEvent(Server[] servers, RandomGenerator gen) {
</code></pre>

<hr>
    </div>