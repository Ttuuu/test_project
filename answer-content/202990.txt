<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>In no particular order, a few suggestions to make the code more Pythonic.</p>

<h3><code>return</code> from generator</h3>

<p>You do not need to <code>raise StopIteration</code> in a generator, you can simply return. So this:</p>

<pre><code>if not list1:
    print("list is empty")
    raise StopIteration
if ...
</code></pre>

<p>Could have been a bit simpler as:</p>

<pre><code>if not list1:
    print("list is empty")
elif ...
</code></pre>

<h3>Use an <code>Exception</code> for exceptions</h3>

<p>It is generally bad practice to put <code>prints</code> into your computation routines.  Instead consider using exceptions.</p>

<pre><code>if not list1:
    raise ValueError("list is empty")
</code></pre>

<p>Then catch the exception like:        </p>

<pre><code>try:
    for j in find_pairs_sum_n(l, 10):
        print(j)
except ValueError as exc:
    print(exc)
</code></pre>

<h3>You don't need history</h3>

<p>Since the values you are evaluating are already unique by putting them into a <code>set()</code>, you don't need history.  Instead, only do the evaluation for numbers which are &lt; 1/2 of <code>n</code>.</p>

<h3>Mid value check only once</h3>

<p>For the mid-value check I suggest you do it only once (ie, not in the loop).  Additionally if you use <code>collections.Counter</code> instead of the <code>set()</code> you don't need to do the <code>list.count()</code> because you already have the counts.</p>

<h3>Consider using a generator expression</h3>

<p>Now that we have simplified the loop somewhat, it can be pretty cleanly written as a <a href="https://docs.python.org/3/reference/expressions.html#generator-expressions" rel="nofollow noreferrer">generator expression</a>:</p>

<pre><code>yield from ((x, n-x) for x in values if x &lt;= threshold and (n - x) in values)
</code></pre>

<h3>Full code listing</h3>

<pre><code>from collections import Counter

def find_pairs_sum_n(values, n):
    values = Counter(values)
    non_ints = {x for x in values if not isinstance(x, int)}

    if non_ints:
        raise ValueError(
            "Found non-integers in values: {}".format(non_ints))

    threshold, n_odd = divmod(n, 2)
    if not n_odd:
        if values[threshold] &gt; 1:
            yield threshold, threshold
        threshold -= 1

    yield from (
        (x, n-x) for x in values if x &lt;= threshold and (n - x) in values)


list1 = [1, 1, 2, 1, 9, 9, 5, 5, 2, 3, 745, 8, 1, -11, 21]
list2 = [1, 1, 1, 1, 9, 9, 9, 9, 2, 8, 8, 8, 2, 2, 0, 0, 0, 4, 5, 6]
list3 = ["dog", "cat", "penguin", 9, 1]
list4 = []

for l in (list1, list2, list3, list4):
    try:
        for j in find_pairs_sum_n(l, 10):
            print(j)
    except ValueError as exc:
        print(exc)
    print('---')
</code></pre>

<h3>Results:</h3>

<pre><code>(5, 5)
(1, 9)
(2, 8)
(-11, 21)
---
(1, 9)
(2, 8)
(4, 6)
---
Found non-integers in values: {'dog', 'penguin', 'cat'}
---
---        
</code></pre>
    </div>