<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Leveraging the standard library is the best way to obtain cross-platform code, so you're on the right track. The problem is that your doesn't compile with one of the compilers I've tested it with (clang 8). Using auto would make your code simpler and avoid problematic conversions:</p>

<pre><code>double time_in_seconds() {
    // now compiles with both clang 8 and gcc 9
    auto tp = std::chrono::time_point_cast&lt;std::chrono::microseconds&gt;(std::chrono::high_resolution_clock::now());
    auto tmp = std::chrono::duration_cast&lt;std::chrono::microseconds&gt;(tp.time_since_epoch());
    auto time_micro = tmp.count();
    return time_micro / 1000000.0;
}
</code></pre>

<p>Besides, there is no need for those intermediary, ill-named variables <code>tp</code> and <code>tmp</code>. If your function is contained in an implementation file (<code>.cpp</code>), where it should be, importing the <code>std::chrono</code> namespace is perfectly fine, and it becomes quite readable:</p>

<pre><code>double time_in_seconds() {
    using namespace std::chrono;
    return duration_cast&lt;microseconds&gt;(system_clock::now().time_since_epoch()).count() / 1000000.0;
}
</code></pre>

<p><code>auto</code> would also be a better choice for the return type:</p>

<pre><code>auto time_in_seconds() {
    using namespace std::chrono;
    return duration_cast&lt;microseconds&gt;(system_clock::now().time_since_epoch()).count()
           / 1000000.0l; // long double literal
}
</code></pre>

<p><code>auto</code> here avoids any discrepancy between the promotion done in the arithmetic operation (the division by 1.000.000) and the promotion to the return type. For instance:</p>

<pre><code>long double foo() { // seemingly long double precision
    return some_integer / 100.01f; // actually float precision
}
</code></pre>

<p>A last improvement I think of is the use of enhanced literals:</p>

<pre><code>auto time_in_seconds() {
    using namespace std::chrono;
    return duration_cast&lt;microseconds&gt;(system_clock::now().time_since_epoch()).count() 
           / 1'000'000.0l; // you can separate thousands with '
}
</code></pre>
    </div>