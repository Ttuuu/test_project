<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>What stands out to me is the use of <code>when</code> in <code>BinOp</code> instead of object oriented patterns. The <code>eval</code> and <code>probabilities</code> methods could be replaced with lambda properties and/or by overriding abstract methods.</p>

<p>For example:</p>

<pre><code>enum class BinOp(val sym: String, val eval: (Boolean, Boolean) -&gt; Boolean) {
    // For the eval property use a lambda
    And("and", { a, b -&gt; a &amp;&amp; b }) {
        override fun probabilities(prob: Double, rnd: Random): Pair&lt;Double, Double&gt; =
            sqrt(prob).let { Pair(it, it) }
    },
    // .. or reference an existing method
    Xor("xor", Boolean::xor) {
        override fun probabilities(prob: Double, rnd: Random): Pair&lt;Double, Double&gt; {
            val pm = if (rnd.nextBoolean()) +1.0 else -1.0
            return if (prob &lt; 0.5) {
                val a = 0.5 + pm * sqrt(0.25 - 0.5 * prob)
                Pair(a, a)
            } else {
                val a = 0.5 + pm * sqrt(0.25 - 0.5 * (1.0 - prob))
                Pair(a, 1.0 - a)
            }
        }
    };

    abstract fun probabilities(prob: Double, rnd: Random): Pair&lt;Double, Double&gt;
}
</code></pre>

<hr>

<p>Here a quick example how to group the methods together:</p>

<pre><code>typealias booleanOperation = (Boolean, Boolean) -&gt; Boolean
typealias probabilityCalc = (Double, Random) -&gt; Pair&lt;Double, Double&gt;


fun andEval(a: Boolean, b: Boolean) = a &amp;&amp; b 
fun xorEval(a: Boolean, b: Boolean) = a xor b 


fun andProb(prob: Double, rnd: Random) = 
    sqrt(prob).let { Pair(it, it) } 

fun xorProb(prob: Double, rnd: Random): Pair&lt;Double, Double&gt; {
    val pm = if (rnd.nextBoolean()) +1.0 else -1.0
    return if (prob &lt; 0.5) {
        val a = 0.5 + pm * sqrt(0.25 - 0.5 * prob)
        Pair(a, a)
    } else {
        val a = 0.5 + pm * sqrt(0.25 - 0.5 * (1.0 - prob))
        Pair(a, 1.0 - a)
    }
}


enum class BinOp(val sym: String, val eval: booleanOperation, val probabilities: probabilityCalc) {
    And("and", ::andEval, ::andProb),
    Xor("xor", ::xorEval, ::xorProb);
}
</code></pre>
    </div>