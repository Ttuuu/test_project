<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Extracting each digit of a number is very similar to the operations performed by the JDK when a number is converted to a String. As many smart people must have spent time optimising this, I used the same code as used by Integer.toString().</p>
<p>As they did, I used a lookup table to avoid arithmetic operations where the range of input values was small.</p>
<p>This takes a third of the time on my machine as the original code.</p>
<p>It is certainly not easier to read or understand, trading clarity for speed.</p>
<pre><code>package org.example;


public class Luhn {
   /*
    * A table which translates integers from 0..99 to the 10s place digit
    * with the 'Luhn' function applied to it
    */
    static final int[] LuhnDigitTens = {
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
            4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
            6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
            8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
            1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
            3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
            5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
            7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
            9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
    } ;

    static final int[] DigitOnes = {
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9,
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9,
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9,
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9,
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9,
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9,
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9,
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9,
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9,
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9,
    };

    static final int[] Luhn = {
          0, 2, 4, 6, 8,
          1, 3, 5, 7, 9
    };
    public static void main(String[] args) {
        // check results are the same
        for (int i = 0; i &lt; 176248300; i++) {
            if (validate2(i) != validate(i)) {
                throw new RuntimeException("Different at " + i);
            }
        }
        long start = System.currentTimeMillis();
        for (int i = 0; i &lt; 176248300; i++) {
            validate(i);
        }
        System.out.println(System.currentTimeMillis() - start);
        start = System.currentTimeMillis();
        for (int i = 0; i &lt; 176248300; i++) {
            validate2(i);
        }
        System.out.println(System.currentTimeMillis() - start);
    }

    public static boolean validate(int id){
        int totalSum = 0;
        while(id&gt;0){
            totalSum += id%10;
            id /= 10;
            if(id&gt;0){
                totalSum += getLuhn(id%10);
                id /= 10;
            }
        }
        return (totalSum%10 == 0);
    }

    private static int getLuhn(int id){
        id *= 2;
        return id%10 + id/10;
    }

    public static boolean validate2(int i){
        int q, r;
        int totalSum = 0;
        i = -i;
        // Generate two digits per iteration
        while (i &lt;= -100) {
            q = i / 100;
            r = (q * 100) - i;
            i = q;
            totalSum += DigitOnes[r];
            totalSum += LuhnDigitTens[r];
        }

        // We know there are at most two digits left at this point.
        q = i / 10;
        r = (q * 10) - i;
        totalSum += r;

        // Whatever left is the remaining digit.
        if (q &lt; 0) {
            totalSum += Luhn[-q];
        }

        return (totalSum%10 == 0);
    }
}
</code></pre>
    </div>