<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Review</h3>

<ul>
<li><code>GetTimeSlotForAll</code> does 2 distinct things: (1) it loads time slots by people (2) it slices time slots to get shared free time. Each of these operations should have its own method. (<a href="https://en.wikipedia.org/wiki/Single_responsibility_principle" rel="nofollow noreferrer">single responsibility principle</a>)</li>
<li><code>GetTimeSlotForAll</code> should return <code>IEnumerable&lt;TimePeriod&gt;</code> rather than <code>List&lt;TimePeriod&gt;</code> because it's intended to enumerate upon, not to change its content.</li>
<li><code>Utiliies</code> is missing his second <code>t</code>.</li>
</ul>

<hr>

<h3>Reduce complexity</h3>

<p><code>CheckHourIntersections</code> is way too complex. An interval intersection with an included end date takes the max start and min end date, provided the start is smaller than or equal to the end.</p>

<blockquote>
<pre><code>private static void CheckHourIntersections(
    TimePeriod firstSlot, TimePeriod secondSlot, List&lt;TimePeriod&gt; result)
{
    if (/*edge case: overlap ..*/)
    {
        result.Add(new TimePeriod(secondSlot.Start, firstSlot.End));
        return; 
    }
    if (/*edge case: contains ..*/)
    {
        result.Add(new TimePeriod(firstSlot.Start, firstSlot.End));
        return; 
    }
    if (/*edge case: contained by ..*/)
    {
        result.Add(new TimePeriod(firstSlot.Start, secondSlot.End));
        return; 
    }
}
</code></pre>
</blockquote>

<p>simplified:</p>

<pre><code>private static void CheckHourIntersections(
    TimePeriod source, TimePeriod target, List&lt;TimePeriod&gt; result)
{
    // check all the different interval intersections
    var start = source.Start &gt;= target.Start ? source.Start : target.Start;
    var end = source.End &lt;= target.End ? source.End : target.End;

    if (end &gt;= start)
    {
        result.Add(new TimePeriod(start, end));
    }
}
</code></pre>

<p><code>SameDay</code> is too complex. <code>DateTime.Date</code> gives a <code>DateTime</code> instance that represents the start of that day corresponding to the specified instance.</p>

<blockquote>
<pre><code>public bool SameDay(TimePeriod other)
{
    return this.Start.Year == other.Start.Year 
        &amp;&amp; this.Start.Month == other.Start.Month &amp;&amp;
    this.Start.Day == other.Start.Day;
}
</code></pre>
</blockquote>

<p>simplified: </p>

<pre><code>public bool SameDay(TimePeriod other)
{
    return Start.Date == other.Start.Date;
}
</code></pre>
    </div>