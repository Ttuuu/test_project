<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>If you want to do more things in the main thread when <code>active</code> is <code>true</code> or when it is <code>false</code>, then the first version would be recommendable. </p>

<p>Bear in mind that checking for <code>active</code> being <code>true</code> or <code>false</code> is done <em>quicker</em> in the first version since it's made on the main thread. In the second version, the checking isn't done until the background thread starts executing. By then, <code>active</code> may have changed in value from when the async call was made.</p>

<p>Here is a sample test that illustrates the behaviour of concurrent code:</p>

<pre><code>var i = 0
for _ in 0..&lt;10 {
    i += 1
    let str = "\(i)\t="
    DispatchQueue.main.async {
        print("Back", str, i)
    }
    print("Main", str, i)
}
print("------------")
</code></pre>

<p>It may print in the console:</p>

<blockquote>
<pre><code>Main 1    = 1
Main 2    = 2
Main 3    = 3
Main 4    = 4
Main 5    = 5
Main 6    = 6
Main 7    = 7
Main 8    = 8
Main 9    = 9
Main 10   = 10
------------
Back 1    = 10
Back 2    = 10
Back 3    = 10
Back 4    = 10
Back 5    = 10
Back 6    = 10
Back 7    = 10
Back 8    = 10
Back 9    = 10
Back 10   = 10
</code></pre>
</blockquote>

<p>(The order of the lines that are printed asynchronously, may vary).</p>

<p>This is the difference between checking the value of a variable on the main thread or asynchronously.</p>

<hr>

<p>If you are aiming for conciseness, here are a couple of versions that use <a href="https://developer.apple.com/documentation/swift/optional/1539476-map" rel="nofollow noreferrer">Optional map</a> and are similar in functionality to your versions respectively:</p>

<p>1)</p>

<pre><code>UIApplication.shared.keyWindow.map { w in
    active?
        DispatchQueue.main.async { w.startIndicatingActivity() }
        :
        DispatchQueue.main.async { w.stopIndicatingActivity()  }
}
</code></pre>

<p>2)</p>

<pre><code>DispatchQueue.main.async {
    UIApplication.shared.keyWindow.map {
        active ? $0.startIndicatingActivity() : $0.stopIndicatingActivity()
    }
}
</code></pre>
    </div>