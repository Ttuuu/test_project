<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>Are there any tricks that I could learn from this?</p>
</blockquote>

<p>This sometimes defeats the purpose of an exercise, but it's worth knowing about ways to reduce the amount of boilerplate. Notice how much typing you have to perform in order to define so many almost-identical functions, e.g. all the comparison operators, all the arithmetic operators. With the <a href="https://en.wikipedia.org/wiki/Curiously_recurring_template_pattern" rel="nofollow noreferrer">CRTP</a>, you can drastically outsoure the repetitive funtionality into base class templates.</p>

<p>Luckily, getting started with this is easy if you allow for a dependency on <a href="https://www.boost.org/doc/libs/1_70_0/libs/utility/operators.htm" rel="nofollow noreferrer">Boost operators</a>:</p>

<pre><code>#include &lt;boost/operators.hpp&gt;

class jd_int : private boost::totally_ordered&lt;jd_int, boost::integer_arithmetic&lt;jd_int&gt;&gt; {
public:
    jd_int() = default;
    jd_int(int i)             : _i{i}                   { }

    jd_int&amp; operator+=(jd_int jdi) { _i += jdi._i; return *this; }
    jd_int&amp; operator-=(jd_int jdi) { _i -= jdi._i; return *this; }
    jd_int&amp; operator*=(jd_int jdi) { _i *= jdi._i; return *this; }
    jd_int&amp; operator/=(jd_int jdi) { _i /= jdi._i; return *this; }
    jd_int&amp; operator%=(jd_int jdi) { _i %= jdi._i; return *this; }

    friend bool operator&lt; (jd_int lhs, jd_int rhs) { return lhs._i &lt; rhs._i; }
    friend bool operator==(jd_int lhs, jd_int rhs) { return lhs._i == rhs._i; }

private:
    int _i;

    friend std::ostream&amp; operator&lt;&lt;(std::ostream&amp; os, const jd_int jdi);
    friend std::istream&amp; operator&gt;&gt;(std::istream&amp; is, jd_int jdi);
};
</code></pre>

<p>The base class here defines the missing comparison operators based on the two provided, same for the non-mutating arithmetic operators. Implementing these base-classes yourself is probably an excellent exercise, too.</p>

<blockquote>
  <p>Is there anything I could improve on?</p>
</blockquote>

<p>If the compiler-generated special member functions are fine, don't specify them. This is the case, no need to implement the copy or move-ctor.</p>

<p>And, as pointed out in the comments and by @MartinYork, not all operators that clients would expect are present. Example: shouldn't  the following compile?</p>

<pre><code>jd_int i = 42;

+i; // this is called "unary plus"

jd_int j = -i;  // ... and "unary minus"
</code></pre>
    </div>