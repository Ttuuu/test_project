<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Having <code>visited</code> as a property of a node feels a bit like a leaky abstraction because it embeds the needs of a particular tree operation into the more general abstraction of graphs and nodes.</p>

<p>To me, a node is a data structure that has some pointers to zero or more children and perhaps stores a value - depending on the semantics of a particular graph. Consider an acyclic graph with all values at stored at leaves versus various cyclic graphs with values stored at each node.</p>

<p>In the cyclic graph case depth first search is not directly applicable until an appropriate starting node has been selected and though the concept of <code>visited</code> may make sense for some cyclic graph algorithms, it wouldn't in the case of other algorithms such as Dijkstraâ€™s shortest path.</p>

<p>To separate concerns, a depth first search algorithm might create it's own object consisting of a generalized node object and a <code>visited</code> field...or use any of many other data structure approaches.</p>

<p>Without isolation algorithms operating on the graph must walk it a second time to clear the <code>visited</code> field. If there is concurrency, then graph algorithms must lock the entire data structure and the depth first search should have transaction semantics.</p>
    </div>