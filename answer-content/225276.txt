<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Modular division is a well-known concept to almost everyone who has done any programming. In my opinion delegating it to a <code>is_divisible_by</code> function is not needed and only introduces unnecessary overhead by generating an additional function call. It's not like you are ever going to use any other implementation than using modular division. Instead I would simply inline it.</p>

<p>While I am a fan of clear variable names, and <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">PEP8</a> recommends against single letter variables, using <code>n</code> for a generic number (and <code>i</code> for a generic counting integer) is IMO acceptable and helps keeping lines short.</p>

<p>Your <code>FACTORS</code> variable is only needed for the order, since it is just the keys of the dictionary. <a href="https://docs.python.org/3/whatsnew/3.7.html" rel="nofollow noreferrer">Since Python 3.7</a> the order of dictionaries is guaranteed to be insertion order (implemented since CPython 3.6), so you also don't need it for the order if you are using a modern version of Python.</p>

<p>You have a spelling error in <code>raindrops</code> (but at least it is also present when calling it).</p>

<p>The <code>convert</code> function can be a bit simplified by using <code>or</code>.</p>

<pre><code>SOUNDS = {3: "Pling", 5: "Plang", 7: "Plong"}

def raindrops(n):
    return [sound for d, sound in SOUNDS.items() if n % d == 0]

def convert(n):
    return "".join(raindrops(n)) or str(n)
</code></pre>

<p>You could also get rid of the dictionary altogether and just use a list of tuples:</p>

<pre><code>SOUNDS = [(3, "Pling"), (5, "Plang"), (7, "Plong")]

def convert(n):
    return "".join(sound for d, sound in SOUNDS if n % d == 0) or str(n)
</code></pre>

<p>Instead of having a lot of testcases, which takes a lot of manual typing to setup, group similar testcases together and use <a href="https://docs.python.org/3/library/unittest.html#distinguishing-test-iterations-using-subtests" rel="nofollow noreferrer"><code>unittest.TestCase.subTest</code></a>:</p>

<pre><code>class RaindropsTest(unittest.TestCase):
    def test_known_results(self):
        test_cases = [(1, "1"), (3, "Pling"), ...]
        for n, expected in test_cases:
            with self.subTest(n=n, expected=expected)):
                self.assertEqual(convert(n), expected)
</code></pre>

<p>For successful test cases this reports as one test case, but if it fails the additional information passed as keyword arguments is shown (here purposefully broken by supplying the wrong expected output):</p>

<pre><code>======================================================================
FAIL: test_known_results (__main__.RaindropsTest) (expected='5', n=5)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/tmp/test.py", line 15, in test_known_results
    self.assertEqual(convert(n), expected)
AssertionError: 'Plang' != '5'
- Plang
+ 5


----------------------------------------------------------------------
Ran 1 test in 0.000s

FAILED (failures=1)
</code></pre>
    </div>