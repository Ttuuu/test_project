<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I see a number of things that may help you improve your program.</p>

<h2>Don't violate <code>const</code></h2>

<p>The <code>calculate_median</code> routine takes a <code>const</code> array, makes a duplicate and then sorts the original!  I think you meant to sort the duplicated array instead.</p>

<h2>Understand pointers</h2>

<p>In <code>main</code> there's this line:</p>

<pre><code>int numbers[] = { 1,7,3,4,5,6,7,8,9 }; // 9 elements  
// other stuff
struct Result result = calculate_values(&amp;numbers, len);
</code></pre>

<p>The problem is that <code>&amp;numbers</code> is not really what you want.  With an array, the name is already effectively a pointer to the array, so you don't need <code>&amp;</code> at the front in this context.</p>

<h2>Don't leak memory</h2>

<p>The <code>intdup</code> function allocates and copies the passed array, but then that memory is never freed.  I'd suggest freeing the memory again as soon as the function is done with the duplicate array.</p>

<h2>Think about naming</h2>

<p>The variables <code>len</code> and <code>mean</code> are good because they suggest the significance of these variables in the context of the program.  However, <code>result</code> and <code>numbers</code> are a little generic.  I'd suggest perhaps <code>summaryData</code> and <code>testArray</code> as possible replacement names.</p>

<h2>Eliminate unused variables</h2>

<p>The <code>tmp</code> variable within <code>calculate_median</code> is never used.  Since unused variables are a sign of poor code quality, you should seek to eliminate them.  Your compiler is probably smart enough to warn you about such things if you know how to ask it to do so.</p>

<h2>Think about efficiency</h2>

<p>This suggestion is last for a reason.  It's important to have a <em>correct</em> program first, and then optimize for space/time efficiency.  In this case, a productive approach is suggested by the wording of the question itself:</p>

<blockquote>
  <p>Write <strong>a function</strong> that takes an array of 'ints' as its input and finds the smallest and largest elements. It should also compute the median and mean. Use a <code>struct</code> holding the result as the return value.</p>
</blockquote>

<p>It says to write <em>a function</em> and that's a good strategy for this.  Since you're sorting the array anyway to get the median, you could also use the sorted array to easily get the min and max values from that sorted array.  The mean could be calculated the same way you're currently doing it, but this would reduce the number of times that the array would need to be traversed.  </p>
    </div>