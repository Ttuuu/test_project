<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>For each rectangular area between minArea and maxArea I [test recursively] if all given rectangles fit in the rectangular area.</p>
</blockquote>

<p>My first comment is that this subproblem seems like a perfect application for <a href="https://en.wikipedia.org/wiki/Dancing_Links" rel="nofollow noreferrer">Dancing Links</a>.
It won't solve your entire problem (the "area minimization" problem), but it will very quickly solve your subproblem (the "can I fit all the rectangles into this other rectangle" problem).</p>

<hr>

<p>It is weird that your <code>markRectangle</code> function returns a value (the value of <code>field</code>, which is just its first parameter), but your <code>removeRectangle</code> function returns void. I would expect both of them to return void.</p>

<hr>

<p>Let's see how you compute "each rectangular area between minArea and maxArea". Slightly reformatted for whitespace:</p>

<pre><code>private ArrayList&lt;Point&gt; calcPossibleAreas() {
    ArrayList&lt;Point&gt; possibleAreas = new ArrayList&lt;Point&gt;();
    ArrayList&lt;Point&gt; factors = new ArrayList&lt;Point&gt;();
    for (int i = getMinArea(); i &lt;= getMaxArea(); ++i) {
        factors = calcFactors(i);
        for (int j = 0; j &lt; factors.size(); ++j) {
             possibleAreas.add(new Point(factors.get(j).x, factors.get(j).y));
        }
    }
    return possibleAreas;
}
</code></pre>

<p>Calculating <code>getMaxArea()</code> every time through the loop is silly. <em>Also</em>, you set <code>factors</code> to <code>new ArrayList&lt;Point&gt;()</code> at the top of the function, and then immediately throw away that value by assigning it a new value inside the loop. So at the bare minimum, I'd expect</p>

<pre><code>private ArrayList&lt;Point&gt; calcPossibleAreas() {
    ArrayList&lt;Point&gt; possibleAreas = new ArrayList&lt;Point&gt;();
    int maxArea = getMaxArea();
    for (int i = getMinArea(); i &lt;= maxArea; ++i) {
        ArrayList&lt;Point&gt; factors = calcFactors(i);
        for (int j = 0; j &lt; factors.size(); ++j) {
             possibleAreas.add(factors.get(j));
        }
    }
    return possibleAreas;
}
</code></pre>

<p>And then (AFAIK) you can use Java 5's <code>for</code>-each loop:</p>

<pre><code>private ArrayList&lt;Point&gt; calcPossibleAreas() {
    ArrayList&lt;Point&gt; possibleAreas = new ArrayList&lt;Point&gt;();
    int maxArea = getMaxArea();
    for (int i = getMinArea(); i &lt;= maxArea; ++i) {
        for (Point factor : calcFactors(i)) {
             possibleAreas.add(factor);
        }
    }
    return possibleAreas;
}
</code></pre>

<p>But all that <code>calcFactors</code> is expensive; <em>and</em> you wind up with a lot of 2xN rectangles that can't possibly be filled. So I would rather write it like this:</p>

<pre><code>private ArrayList&lt;Point&gt; calcPossibleAreas() {
    ArrayList&lt;Point&gt; possibleAreas = new ArrayList&lt;Point&gt;();
    int minWidth = 0;
    int maxWidth = 0;
    int minHeight = 0;
    int maxHeight = 0;
    int minArea = 0;
    for (Rectangle r : rectangleList) {
        minWidth = Math.max(minWidth, r.width);
        minHeight = Math.max(minHeight, r.height);
        maxWidth += r.width;
        maxHeight += r.height;
        minArea += r.width * r.height;
    }
    int maxArea = Math.min(maxWidth * minHeight, minWidth * maxHeight);
    for (int x = minWidth; x &lt;= maxWidth; ++x) {
        for (int y = minHeight; y &lt;= maxHeight; ++y) {
            if (minArea &lt;= x * y &amp;&amp; x * y &lt;= maxArea) {
                possibleAreas.add(new Point(x, y));
            }
        }
    }
    // Now sort possibleAreas so we'll try the smaller rectangles first.
    Collections.sort(possibleAreas, new Comparator&lt;Point&gt;() {
        @Override
        public int compare(Point lhs, Point rhs) {
            int la = (lhs.x * lhs.y), ra = (rhs.x * rhs.y);
            return (la &lt; ra) ? -1 : (la &gt; ra);
        }
    });
}
</code></pre>

<hr>

<p>Of course, <code>calcPossibleAreas()</code> is just a preliminary step that will be very fast compared to <code>placeRectangles()</code>. So <a href="https://en.wikipedia.org/wiki/Amdahl%27s_law" rel="nofollow noreferrer">Amdahl's Law</a> says that you (and I ;)) should spend time optimizing <code>placeRectangles()</code> rather than <code>calcPossibleAreas()</code>. I would recommend looking at some way to eliminate the <code>O(w*h)</code> writes to <code>field[][]</code> — is there some way you can express "all these positions are filled" without actually doing the <code>O(w*h)</code> writes? Vice versa, is there some way you can test "is this a valid placement for my current rectangle" without doing <code>O(w*h)</code> reads?</p>

<p>Rather than looking for <em>places to put</em> each <em>rectangle</em>, it might be better to look for <em>ways to fill</em> each point in the target. Pretend you have your set of rectangles, plus just enough "spare" 1x1 rectangles to fill up the empty spaces. If you try to fill all the points in the target, working downward from the upper left corner, then you have to try each rectangle in only one position — and you can skip rectangles that are too wide or tall to fit — and if none of your rectangles fit, <em>and</em> you're out of spare 1x1s, then you know it's time to backtrack. (This is essentially how Dancing Links would do it.)</p>
    </div>