<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This will depend on whether or not all of the indicators you're interested in passing have the same generic type arguments. If they do then iSR5's solution is the simplest.</p>
<p>If not then you'll need a more complicated solution. On one hand I notice that you're not using any of the outputs of <code>ComputeNextValue</code>; you're only providing inputs to the indicators. Then one possible solution would be to define an interface with the void counterpart of <code>ComputeNextValue</code> which only takes an input and produces no output:</p>
<pre><code>public abstract class IndicatorBase&lt;TInput, TOutput&gt; : IIndicatorBase&lt;TInput&gt;
    where TInput : struct
    where TOutput : struct
{
    public abstract TOutput ComputeNextValue(TInput input);
    public abstract void Reset();

    void IIndicatorBase&lt;TInput&gt;.ComputeNextValue(TInput input) =&gt;
         ((IndicatorBase&lt;TInput, TOutput&gt;)this).ComputeNextValue(input);
}

public interface IIndicatorBase&lt;TInput&gt;
    where TInput: struct
{
    void ComputeNextValue(TInput input);
}
</code></pre>
<p>Then <code>ImportAndPreload</code> can become this: (I'm not sure what <code>BinanceKline</code> is, but the input type you're supplying to each indicator is the type of <code>BinanceKline.Close</code>, so that'd be the generic type argument for <code>IIndicatorBase</code>)</p>
<pre><code>private void ImportAndPreload(string symbol, KlineInterval interval, params IIndicatorBase&lt;TypeOfBinanceKlineDotClose&gt;[] indicators)
{
    ...

    // Preload indicators
    for (int i = 0; i &lt; candles.Count; i++)
    {
        foreach (var indicator in indicators)
        {
            indicator.ComputeNextValue(candles[i].Close);
        }
    }
}

...

ImportAndPreload(symbol, interval, macd, stoch, rsi, ema);
</code></pre>
<p>This will support any indicator whose input is the type of <code>BinanceKline.Close</code>.</p>
    </div>