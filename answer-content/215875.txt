<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><p><code>power</code> is suboptimal. Check out <a href="https://en.wikipedia.org/wiki/Exponentiation_by_squaring" rel="nofollow noreferrer">exponentiation by squaring</a>. That said, I would rather avoid <code>power</code> completely. Consider instead</p>

<pre><code>    unsigned long long power_factor = 1;

    for (unsigned int i = strlen(s), j = 0; i-- &gt; 0; j++) {
        ....
        unsigned long long const t = index * power_factor;
        power_factor *= base;
    }
</code></pre></li>
<li><p><code>indexOf</code> may signal the failure via <code>errno</code>, just like your other functions. That would allow it to return an unsigned value, thus getting rid of the unpleasant <code>(unsigned long long) index</code> cast.</p></li>
<li><p>Dynamic allocation of the resulting string (and the dry run to determine the required length) seem unnecessary. The longest possible result is obtained with base 2, and the resulting length is limited by <code>sizeof(unsigned long long) * CHAR_BITS</code> (realistically 64).</p></li>
<li><p>Consider filling <code>out</code> buffer from right to left, to avoid the reversal.</p>

<p>EDIT: (sketchy) filling <code>out</code> from right to left:</p>

<pre><code>int main()
{
    ....
    char out[sizeof(unsigned long long) * CHAR_BITS + 1];
    char * result = ullong2str(out + sizeof(out), n, dest);
    ....
}

char * ullong2str(char * end, unsigned long long n, unsigned int base)
{
    *--end = 0;
    do {
        *--end = alphabet[n % base];
        n /= base;
    }
    return end;
}
</code></pre></li>
</ul>
    </div>