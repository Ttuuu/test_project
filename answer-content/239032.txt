<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>PEP-8</h1>

<ul>
<li>Class names should be <code>CapWords</code>, so instead of <code>rectangle</code> you should have <code>Rectangle</code>.</li>
<li>Commas should be followed by 1 space.  You've mostly followed this, except in <code>s1 = rectangle({'p1': (1,1), 'p2': (2,2)})</code></li>
</ul>

<h1>Bugs</h1>

<ul>
<li>The formula for "area" is not twice the sum of width &amp; height.</li>
<li>I don't know what "surrounding" is, but the formula for perimeter is not width times height.</li>
<li>The midpoint (centre?) of a rectangle should be within the bounds of the rectangle.  Consider the rectangles with corners (10, 10) and (12, 12).  The centre would be (11, 11), not (1, 1) as calculated.</li>
</ul>

<h1>Awkward initialization</h1>

<p>This code:</p>

<pre><code>        names = list(dct.keys())
        coords = list(dct.values())
        start = [names[0], coords[0]]
        end = [names[1], coords[1]]
        self.start = start
        self.end = end
</code></pre>

<p>relies on the dictionary's ordering of keys.  It can break in Python 3.6 and earlier (CPython 3.5 and earlier).  It does not enforce the key names <code>p1</code> and <code>p2</code>; any two keys will work.  And <code>self.start[0]</code> and <code>self.end[0]</code> are never used, so storing the key names in these entries is unnecessary.</p>

<p>The code could simply and safely read:</p>

<pre><code>         self.start = dct['p1']
         self.end = dct['p2']
</code></pre>

<p>with suitable modifications of the usage of <code>self.start</code> and <code>self.end</code>.</p>

<h1>Class with no methods</h1>

<p>A class should have methods.  Without any methods, you'd be better off with a <code>namedtuple</code> for constant data, or a <code>dict</code> for mutable data.</p>

<p>So let's give your class some methods:</p>

<pre><code>    def width(self):
        return self.end[0] - self.start[0]

    def height(self):
        return self.end[1] - self.start[1]
</code></pre>

<p>As mentioned by <a href="https://codereview.stackexchange.com/a/239031/100620">Peilonrayz</a>, you may wish to use <code>abs(...)</code> here. </p>

<p>You can use these methods externally:</p>

<pre><code>print('width: ', s1.width())
print('height: ', s1.height())
</code></pre>

<p>as well as in other members of this class:</p>

<pre><code>    def area(self):
        return (self.width() + self.height()) * 2    # Note: Formula is still incorrect
</code></pre>

<h1>An Over-Engineered Solution</h1>

<p>Do not submit this as your home-work solution!  You would likely fail or be expelled!  This illustrates some advanced concepts like the <a href="https://docs.python.org/3/library/dataclasses.html?highlight=data#module-dataclasses" rel="noreferrer"><code>@dataclass</code></a> and the <a href="https://docs.python.org/3/library/typing.html?highlight=namedtuple#typing.NamedTuple" rel="noreferrer"><code>NamedTuple</code></a>, type hints and the <a href="https://docs.python.org/3/library/typing.html" rel="noreferrer"><code>typing</code></a> module, as well as read-only <a href="https://docs.python.org/3/library/functions.html?highlight=property#property" rel="noreferrer"><code>@property</code></a> attributes, a <a href="https://docs.python.org/3/library/functions.html?highlight=classmethod#classmethod" rel="noreferrer"><code>@classmethod</code></a>, and <code>"""docstrings"""</code>.  You may find these interesting to study in your free time.</p>

<pre><code>from typing import NamedTuple
from dataclasses import dataclass

class Point(NamedTuple):
    x: float
    y: float

@dataclass
class Rectangle:
    """A class for calculations on a Rectangle"""

    p1: Point
    p2: Point

    @classmethod
    def from_dict(cls, dct):
        """
        Constructs a Rectangle from a dictionary with "p1" and "p2" keys.
        These keys must contain a tuple or list of two numeric values.
        """
        return Rectangle(Point._make(dct['p1']), Point._make(dct['p2']))

    @property
    def width(self):
        """
        Computes the width of the rectangle.
        """
        return abs(self.p2.x - self.p1.x)

    @property
    def height(self):
        """
        Computes the height of the rectangle.
        """
        return abs(self.p2.y - self.p1.y)

    @property
    def area(self):
        """
        Incorrectly computes the area of the rectangle.
        """
        return (self.width + self.height) * 2     # Note: still the incorrect formula

s1 = Rectangle.from_dict({'p1': (1,1), 'p2': (2,2)})
print('point one: ', s1.p1)
print('point two: ', s1.p2)
print('width: ', s1.width)
print('height: ', s1.height)
print('area: ', s1.area)
</code></pre>

<p>Output:</p>

<pre><code>point one:  Point(x=1, y=1)
point two:  Point(x=2, y=2)
width:  1
height:  1
area:  4
</code></pre>
    </div>