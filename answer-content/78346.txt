<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ol>
<li><p>A common convention is to prefix class members with <code>_</code> so it's easier to see what a local variable is and what's a class member. In your case it would be <code>_tcpClient</code> or even <code>_TcpClient</code>.</p>
</li>
<li><p>This is a static method which indicates that it's possibly part of a static class. This is almost always a bad idea. <code>static</code> means it's global and global state is bad because it can get you into all kinds of trouble once your program grows in complexity.</p>
</li>
<li><p>You have a <code>StopWatch</code> but you're not actually using it.</p>
</li>
<li><p>I assume you use the <code>Substring</code> because the buffer is larger than the actual data received so you find the end by looking for the first <code>\0</code>. <a href="https://msdn.microsoft.com/en-us/library/38b953c8%28v=vs.110%29.aspx" rel="nofollow noreferrer"><code>GetString()</code> provides an overload</a> which allows you to specify offset and length so this becomes unnecessary.</p>
</li>
<li><p><a href="https://msdn.microsoft.com/en-us/library/system.net.sockets.tcpclient.getstream%28v=vs.110%29.aspx" rel="nofollow noreferrer"><code>MSDN</code></a> stipulates that you must close the <code>NetworkStream</code> once you are done with it because the client will not release it. Given that streams are <code>IDisposable</code> it would be best wrapped in a <code>using</code> block.</p>
</li>
<li><p><code>TcpClient</code> is <code>IDisposable</code> as well so should be wrapped in a <code>using</code> block to make sure it gets cleaned up properly.</p>
</li>
<li><p>The method is recursive and there is no way to bail out because in case of error it calls itself again. This means your call stack is growing indefinitely and will fall over at some point. Each call will also allocate a new receive buffer every time.</p>
<p>A while loop with a break condition would probably be the better choice.</p>
</li>
</ol>
<p>So in total the refactored code could look like this:</p>
<pre><code>private static void ReceivePortMessages() 
{
    byte[] receiveBuffer = new byte[10025];
    while (!_QuitProcessing)
    {
        int requestCount = 0;
        _TcpListener.Start();
        Debug.Print(" &gt;&gt; Listener Started");
        using (var tcpClient = _TcpListener.AcceptTcpClient())
        {
            Debug.Print(" &gt;&gt; Accepted connection from client");

            using (var networkStream = tcpClient.GetStream())
            {
                while (!_QuitProcessing)
                {
                    try
                    {
                        requestCount = requestCount++;
                        var bytesRead = networkStream.Read(receiveBuffer, 0, (int)tcpClient.ReceiveBufferSize);
                        if (bytesRead == 0)
                        {
                            // Read returns 0 if the client closes the connection
                            break;
                        }

                        string dataFromClient = System.Text.Encoding.ASCII.GetString(receiveBuffer, 0, bytesRead);

                        XmlDocument xm = new XmlDocument();
                        xm.LoadXml(string.Format("&lt;root&gt;{0}&lt;/root&gt;", dataFromClient));
                        XmlElement root = xm.DocumentElement;
                        string rootName = root.FirstChild.Name;
                        RouteInboundXML(rootName, dataFromClient, sw);
                    }
                    catch (Exception ex)
                    {
                        Debug.Print("ReceivePortMessages: " + ex.ToString());
                        break;
                    }
                }
            }
            Debug.Print(" &gt;&gt; stopped read loop");
        }
        _TcpListener.Stop();
    }
}
</code></pre>
<p>It's still not ideal because the <code>Read</code> will block unless data is there to be received or the connection is closed. So if the other side stops sending data but keeps the connection alive you still have no nice way to bail out.</p>
    </div>