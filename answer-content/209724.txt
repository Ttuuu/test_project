<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Code Review (or its absence)</h2>

<p>There are way too many problems to talk about. This is definitely not idiomatic C++14, let alone C++98. Please grab a book from <a href="https://stackoverflow.com/questions/388242/the-definitive-c-book-guide-and-list">this list</a>. The algorithm you are searching for though is called "stable partition".</p>

<h2>Better solution</h2>

<p><a href="https://codereview.stackexchange.com/users/36120/emily-l">Emily's</a> <a href="https://codereview.stackexchange.com/posts/209722/revisions">answer</a> is already great. Use it if you need to just solve the problem.</p>

<h2>Alternative solution</h2>

<p>Here is the C++14 solution with standard library:</p>

<pre><code>#include &lt;iostream&gt;
#include &lt;iterator&gt;
#include &lt;vector&gt;
#include &lt;algorithm&gt;

using in_iterator = std::istream_iterator&lt;int&gt;;
using out_iterator = std::ostream_iterator&lt;int&gt;;

void iteration(int count) {
    std::vector&lt;int&gt; values(count);
    std::copy_n(in_iterator{std::cin}, count, 
                values.begin());

    std::stable_partition(values.begin(), values.end(), 
                          [](auto x) {return x % 2 == 0;});

    std::copy(values.begin(), values.end(), 
              out_iterator{std::cout, " "});
}

int main() {   
    int test_count = 0;
    std::cin &gt;&gt; test_count;
    for (; test_count &gt;= 0; --test_count) {
        int value_count = 0;
        std::cin &gt;&gt; value_count;
        iteration(value_count);
        std::cout &lt;&lt; '\n';
    }
}
</code></pre>

<p>I believe everything happening in <code>main()</code> is fairly obvious.</p>

<pre><code>std::vector&lt;int&gt; values(count);
std::copy_n(in_iterator{std::cin}, count, 
            values.begin());
</code></pre>

<p>Those two lines initialize the <code>values</code> vector, by first creating the vector to hold <code>count</code> elements, then copying <code>count</code> elements from <code>std::cin</code> into <code>values</code>.</p>

<p>The next statement is just invocation of the algorithm from standard library.</p>

<p>The last line of the <code>iteration</code> function just copies the whole of the <code>values</code> into the <code>std::cout</code> stream.</p>

<p>Solution with linked list will be the same, just way more lengthier. One can also reimplement the stable partition too, if you feel like it.</p>
    </div>