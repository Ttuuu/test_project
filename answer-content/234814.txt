<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>so basically what you have is a set of key-value pairs (query param name and value) where the value may be specified or not and the end result is a String concatenation of the pairs.</p>

<p>this is a classic case for <code>Map&lt;String, String&gt;</code></p>

<p>I would convert of all the <code>_QUERY</code> constants to have the names of the query params, then I would populate the map with the (possibly null) arguments:</p>

<pre><code>private static final String NUMBER_OF_DAYS_AHEAD_QUERY = "cnt";
private static final String CITY_QUERY = "q";
...

private Map&lt;String, String&gt; queryMap = new HashMap&lt;&gt;();

private void initQueryMap(String city, String language, String units, Integer numberOfDaysAhead) {
    queryMap.put(CITY_QUERY, city);
    queryMap.put(NUMBER_OF_DAYS_AHEAD_QUERY, String.valueOf(numberOfDaysAhead));
    ...
}
</code></pre>

<p>now it is a simple matter of iterating over the map entries, filtering non-null values and producing the "key=value" string pattern. it is easily achievable with stream processing. I will leave that to you.</p>

<p><strong>EDIT</strong></p>

<p>Here's how to create a query string from the map:</p>

<pre><code>    String queryStr = queryMap.entrySet().stream()
        .filter(ent -&gt; ent.getValue() != null)
        .map(ent -&gt; ent.getKey() + "=" + ent.getValue())
        .collect(Collectors.joining("&amp;"));
</code></pre>
    </div>