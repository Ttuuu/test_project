<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Did dome upgrades, but only for <code>'test_1'</code> case, you can update <code>'test2'</code> case similarly.
For me this function run in 13.54 sek vs 26.16 sek for your original code.</p>

<pre><code>func1 &lt;- function(dataC, PR, DB, MT){

  ## Retrieve the coordinates x and y of the current cell
  c1 &lt;- dataC[[1]]
  c2 &lt;- dataC[[2]]

  ## Retrieve the coordinates x and y of the previous cell
  c3 &lt;- dataC[[3]]
  c4 &lt;- dataC[[4]]

  ## Initialize the coordinates x and y of the new cell
  newc1 &lt;- -999
  newc2 &lt;- -999

  a1 &lt;- c((c1 - PR), (c1 - 1))
  a2 &lt;- c((c2 - PR), (c2 - 1))
  a3 &lt;- c((c2 - 1), (c2 + 1))
  a4 &lt;- c((c2 + 1), (c2 + PR))
  a5 &lt;- c((c1 - 1), (c1 + 1))
  a6 &lt;- c((c1 + 1), (c1 + PR))


  xx &lt;- c(a1, a2, a3, a4, a5, a6)
  xx &lt;- seq(min(xx), max(xx))
  gg &lt;- expand.grid(xx, xx, KEEP.OUT.ATTRS = F)
  gg &lt;- as.matrix(gg)
  gg1 &lt;- gg[, 1]
  gg2 &lt;- gg[, 2]

  ff2 &lt;- function(matC) {
    y1 &lt;- raster::extract(r, matC)
    mean(y1, na.rm = T)
  }

  cgrid &lt;- function(x, y) {
    gg[gg1 &gt;= x[1] &amp; gg1 &lt;= x[2] &amp; gg2 &gt;= y[1] &amp; gg2 &lt;= y[2], ]
  }

  if (MT == "test_1") {
    ## cells at upper-left corner
    V1 &lt;- ff2(cgrid(x = a1, y = a2)) * sqrt(2) * DB
    ## cells at upper-middle corner
    V2 &lt;- ff2(cgrid(x = a1, y = a3)) * DB
    ## cells at upper-right corner
    V3 &lt;- ff2(cgrid(x = a1, y = a4)) * sqrt(2) * DB
    ## cells at left corner
    V4 &lt;- ff2(cgrid(x = a5, y = a2)) * DB
    V5 &lt;- 0 ## cell at middle corner
    ## cells at right corner
    V6 &lt;- ff2(cgrid(x = a5, y = a4)) * DB
    ## cells at bottom-left corner
    V7 &lt;- ff2(cgrid(x = a6, y = a2)) * sqrt(2) * DB 
    ## cells at bottom-middle corner
    V8 &lt;- ff2(cgrid(x = a6, y = a3)) * DB
    ## cells at bottom-right corner
    V9 &lt;- ff2(cgrid(x = a6, y = a4) ) * sqrt(2) * DB
  }

  ## Build the matrix of cell selection
  V &lt;- c(V1, V2, V3, V4, V5, V6, V7, V8, V9)
  tot &lt;- sum(1/V[-5], na.rm = TRUE)
  mat_V &lt;- matrix((1/V)/tot, nrow = 3, ncol = 3, byrow = TRUE)
  mat_V[5] &lt;- V5

  while ((newc1 == -999 &amp;&amp; newc2 == -999) || (c3 == newc1 &amp;&amp; c4 == newc2)) {

    ## Test if the new cell is the previous cell
    if (c3 == newc1 &amp;&amp; c4 == newc2) {
      mat_V[choiceC[1], choiceC[2]] &lt;- NaN
      ## print(mat_V)
    }

    ## Find the maximum value in the matrix
    choiceC &lt;- which(mat_V == max(mat_V, na.rm = TRUE), arr.ind = TRUE)

    ## If there are several maximum values
    if (nrow(choiceC) &gt; 1) choiceC &lt;- choiceC[sample.int(nrow(choiceC), 1L), ]

    ## Find the new cell relative to the current cell 
    newC &lt;- c(x = c1 + (choiceC[1] - 2), y = c2 + (choiceC[2] - 2))
    newC &lt;- matrix(newC, ncol = 2)

    newc1 &lt;- newC[[1]]
    newc2 &lt;- newC[[2]]

  }
  return(newC)
} 
</code></pre>
    </div>