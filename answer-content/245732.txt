<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Use C++17 aligned <code>new</code> or <code>aligned_malloc()</code></h1>
<p><code>_aligned_malloc()</code> is a Windows-specific, non-portable function. Luckily, C++17 added the portable <code>aligned_malloc()</code> without an underscore. It also introduces a variant of <code>new</code> that allows aligned allocation. The latter would look like so:</p>
<pre><code>#include &lt;new&gt;
...
MemoryBlock::MemoryBlock(size_t size, size_t alignment):
    p_rawMem((void *)new(std::align_val_t(alignemnt)) char[size]),
    ...
{
}
</code></pre>
<h1>Unnecessary special case for <code>p_remainingMemSize == 0</code></h1>
<p>Why is this a special case in <code>p_addCurrentMemLocation</code>? Just adding <code>delta</code> to the current pointer is perfectly fine. A pointer that points just beyond the end of an array or an allocated memory region is still a valid pointer.</p>
<h1>Consider avoiding the check for <code>delta == 0</code></h1>
<p>An <code>if</code>-statement is not free, especially not if the branch predictor cannot correctly predict the result of the condition. If <code>delta</code> is zero, then the rest of the code still works correctly, and it's just two additions and a subtraction.</p>
<h1>Don't use floating point math</h1>
<p>You should not need to use floating point math to calculate how much to advance <code>p_currentMemLocationOffset</code> inside <code>getMemoryWith()</code>. Depending on which processor your code is running on, converting to <code>double</code> and back to <code>size_t</code> can be an expensive operation. Furthermore, <code>double</code> has less precision than <code>size_t</code> on 64-bits machines, so the result might be wrong if very large memory blocks are used.</p>
<p>Instead of <code>ceil(p_CurrentMemLocationOffset / (double)alignment)</code>, use the fact that integer division rounds down, and compensate for this by adding <code>alignment - 1</code> first:</p>
<pre><code>p_addCurrentMemLocation((((p_currentMemLocationOffset + alignment - 1) / alignment) * alignment) - p_currentMemLocationOffset);
</code></pre>
<p>Alternatively, use the modulo operation to determine how much to add:</p>
<pre><code>p_addCurrentMemLocation((alignment - p_currentMemLocationOffset % alignment) % alignment);
</code></pre>
<p>The latter will be especially fast if the compiler can deduce that <code>alignment</code> is always a power of two.</p>
<h1><code>char *</code> vs. <code>void *</code></h1>
<p>It's probably easier to use <code>char *</code> internally for the pointers, since you are doing arithmetic on them. And if you do that, the only time you need to cast is when returning from <code>getMemoryWith()</code>.</p>
    </div>