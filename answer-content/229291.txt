<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<pre><code>       if (Hashes.TryGetValue(tempHash, out List&lt;int&gt; key))
       {
           Commits.Add(commitNumber, Commits[key[0]]);
           Hashes[tempHash].Add(commitNumber);
</code></pre>
</blockquote>

<p>Be consistent: you've already got an alias for <code>Hashes[tempHash]</code>, so use it.</p>

<p>Also, on the subject of names, why <code>tempHash</code> instead of just <code>hash</code>? And <code>key</code> for the value of a <code>KeyValuePair</code> is a tad confusing.</p>

<hr>

<blockquote>
  <p>I also tried to measure performance of methods and it seems like calculating hash of big array is a problem and adding to <code>SortedList&lt;int,List&lt;int&gt;&gt;</code> is a problem as well.</p>
</blockquote>

<p>Well done for profiling. Both of those problems seem to me to have the same solution: don't do it.</p>

<p>The hash can be updated incrementally. FWIW, real solutions do this using a Merkle tree. To make this robust you need to do something about the <code>FilesSet</code> property. You should only expose the data in read-only form (e.g. as <code>IReadOnlyList&lt;int&gt;</code>), and if you have a setter it should take a defensive copy and recalculate the hash from scratch. But I'd be strongly tempted to remove the property and the <code>Update</code> method and replace them with an indexer. </p>

<p>As to the second: why use <code>SortedList</code>? What advantage does it give here over a <code>Dictionary</code>?</p>

<p>Aside from those points, I think the design is back to front. It would be simpler to do things the way version control systems actually do it: the commit version (tag) references the hash, and the hash references the data.</p>
    </div>