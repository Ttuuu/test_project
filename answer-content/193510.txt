<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>This code comes before the AJAX call. Is it right?</p>
</blockquote>

<p>I would suggest adding the message to the DOM via the success callback - that way, if an error occurs then the message isn't displayed on the page.</p>

<h1>Other feedback</h1>

<h2>Javascript</h2>

<h3>Cache DOM lookups</h3>

<p>I would suggest you cache DOM references - e.g. store <code>$('#messageBox')</code>, <code>$('#send')</code>, <code>$('.context')</code> in variables (or better yet, <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const" rel="nofollow noreferrer">constants</a> if you are using <a href="/questions/tagged/ecmascript-6" class="post-tag" title="show questions tagged 'ecmascript-6'" rel="tag">ecmascript-6</a>), preferably in a DOM-ready callback, because DOM-lookups aren't exactly cheap....</p>

<h3>Accessing elements by class name can return multiple</h3>

<p>Also: <code>$('.context')</code> is equivalent to <code>document.getElementsByClassName()</code>... which returns multiple elements. While methods like <a href="http://api.jquery.com/scrollTop/" rel="nofollow noreferrer"><code>.scrollTop()</code></a> and <a href="http://api.jquery.com/innerHeight/" rel="nofollow noreferrer"><code>.innerHeight()</code></a> operate for the first matched element, it would be more appropriate to select an element by id (i.e. with <a href="http://api.jquery.com/id-selector/" rel="nofollow noreferrer">an id selector</a>).</p>

<h3><code>$(document).ready()</code> with nested <code>$(window).load()</code></h3>

<p>I don't believe it is necessary to add the window load callback within the DOM ready callback. Also, bearing in mind that you posted this code a couple years ago, <a href="https://api.jquery.com/load-event/" rel="nofollow noreferrer"><code>.load()</code></a> is now deprecated as of jQuery version 1.8, because there is a new method <a href="https://api.jquery.com/load/" rel="nofollow noreferrer"><code>.load()</code></a> in the AJAX section. </p>

<p>Note that in the line below, <code>displayMessage()</code> is called and does not return a function, so the call to <code>$(window).load()</code> appears superfluous:</p>

<blockquote>
<pre><code>$(window).load(displayMessage(lastTimestamp));
</code></pre>
</blockquote>

<p>To really make that function <code>displayMessage</code> an onload handler, one could make a <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind#Partially_applied_functions" rel="nofollow noreferrer">partially applied function</a> using <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind" rel="nofollow noreferrer">Function.bind()</a> :</p>

<pre><code>$(window).load(displayMessage.bind(null, lastTimestamp));
</code></pre>

<h2>PHP</h2>

<h3>Separate endpoints</h3>

<p>It would be wise to separate the code in the <code>display</code> function into two different endpoints - one for fetching messages (which should perhaps use the <code>GET</code> HTTP verb), and one for creating a new post (which can stay as a <code>POST</code> or a <code>PUT</code> request). That way <code>display</code> isn't concerned with creating messages, so as to adhere to the <a href="http://deviq.com/separation-of-concerns/" rel="nofollow noreferrer">Separation of Concerns</a> principle.</p>

<h3>Laravel code?</h3>

<p>It looks like some of the Laravel <code>DB</code> facade and Eloquent methods (e.g. <code>findAll()</code>) are used, which makes me believe this is a Laravel controller method. If that is the case, it would be wise to access POST data via the <a href="https://laravel.com/docs/5.6/requests" rel="nofollow noreferrer">Request object</a>. Then lines like </p>

<blockquote>
<pre><code>$text = DB::Escape($_POST['text']);
</code></pre>
</blockquote>

<p>Can be updated to use the <a href="https://laravel.com/api/5.6/Illuminate/Http/Request.html#method_input" rel="nofollow noreferrer"><code>Request::input()</code></a> method:</p>

<pre><code>$text = DB::Escape($request-&gt;input('text'));
</code></pre>

<p>Or using the <a href="https://laravel.com/docs/5.6/requests#retrieving-input" rel="nofollow noreferrer">dynamic input style</a>:</p>

<pre><code>$text = DB::Escape($request-&gt;text);
</code></pre>
    </div>