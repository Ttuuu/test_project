<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Prepare for a random grab-bag of solicited and unsolicited advice.</p>

<h2>Shebang</h2>

<p>It's typically preferred to use</p>

<pre><code>#!/usr/bin/env python3
</code></pre>

<p>so that a non-system, e.g. a virtualenv-based, Python binary can kick in automatically when needed. The script can be opinionated about which version of Python it's running, but shouldn't be when it comes to which interpreter binary should be used.</p>

<h2>Clock speed</h2>

<p>Firstly: as you'll no doubt already know, it's not meaningful to hard-code the clock speed. You could do a trivial parse of <code>/proc/cpuinfo</code> which would tie you to Linux, or you could import a third-party library which is able to do this in a platform-agnostic manner.</p>

<p>Even then: once you have the processor frequency, that's only loosely correlated with actual execution speed. Python is a multi-architecture interpreter. Different CPUs have very different capabilities in terms of branch lookahead, etc. which make it so that an advanced 1GHz CPU will beat the pants off of a cheap, consumer-grade 2GHz CPU ten times out of ten.</p>

<p>Another big factor is the entire idea of how much gets done in one instruction cycle based on the instruction set - x86_64 (CISC) versus Arm (RISC) being a huge gap.</p>

<p>That's also not accounting for the fact that you're running a multi-process operating system and time-sharing the CPU, so the number of actual cycles consumed will be less than expected given the amount of real-time duration measured.</p>

<p>All of that said: don't worry about the frequency; instead just print the output of <code>import platform; platform.processor()</code>. The cycle estimate is unfortunately baloney.</p>

<h2>Formatting standards</h2>

<p>PEP8 linters will tell you that:</p>

<ul>
<li><code>segmentedSieve</code> should be <code>segmented_sieve</code> (and so on for <code>statsOnly</code>, etc.)</li>
<li>there should only be one blank line before <code># get sieving primes recursively,</code></li>
<li><code>m30_wheel</code> should be <code>M30Wheel</code> due to being a class</li>
<li>etc.</li>
</ul>

<h2>Reduce <code>print</code> calls</h2>

<pre><code>print("sieve size:", end=' ')
ss = len(memoryview(sieve))
print(ss//1024, "KB") if ss &gt; 1024 else print(ss, "bytes")
</code></pre>

<p>can be</p>

<pre><code>ss = len(memoryview(sieve))
size = f'{ss//1024} KiB' if ss &gt; 1024 else f'{ss} bytes'
print(f'sieve size: {size}')
</code></pre>

<p>Also note that <code>KB</code> is not a unit. <code>kB</code> is 1000 bytes, and <code>KiB</code> is 1024 bytes.</p>

<h2>Don't exponentiate needlessly</h2>

<p>I don't trust Python to convert <code>n ** 0.5</code> to a more efficient <code>sqrt</code> automatically. Just call <code>sqrt</code>.</p>

<h2>Use Numpy</h2>

<p>Operations like this:</p>

<pre><code>       sieve[i * i // 2::i] = [False] * ((n - i * i - 1) // (2 * i) + 1)
</code></pre>

<p>where array segments are copied over - can be made much more efficient through the use of Numpy. Numpy is built exactly for this kind of thing - fast array operations for numerical work.</p>

<h2>Type hints</h2>

<p>You're concerned about performance, and that's fine - type hints do not incur a performance hit. So something like this:</p>

<pre><code>def update_new_mult(self, multiple, wheel_index, wheel):
</code></pre>

<p>can be made more self-documenting by adding some PEP484, possibly:</p>

<pre><code>def update_new_mult(self, multiple: int, wheel_index: int, wheel: M30Wheel) -&gt; None:
</code></pre>

<h2>Immutability</h2>

<p>Something like</p>

<pre><code>    self.gaps             = [4,2,4,2,4,6,2,6, 4,2,4,2,4,6,2,6]  # 2 loops for overflow
</code></pre>

<p>is written once and read many times, so use a tuple, not a list. Past that: since it's only calculated during initialization, you really shouldn't be hard-coding these values. Calculate them in a simple loop based on your <code>wheel_primes</code>. This will improve maintainability if ever you change your modulus.</p>

<h2>In-place subtraction</h2>

<pre><code>n = n - 7  # adjust for wheel starting at 7 vs. 0
</code></pre>

<p>should be</p>

<pre><code>n -= 7  # adjust for wheel starting at 7 vs. 0
</code></pre>

<h2>Combined division and modulation</h2>

<pre><code>    return (n//30 &lt;&lt; 3) + self.wheel_indices[n % 30]
</code></pre>

<p>should use <code>divmod(n, 30)</code> to get both the quotient and remainder at the same time.</p>

<h2>Magic numbers</h2>

<p>30 should be stored in a constant, for the same reasons that you should be calculating <code>gaps</code> - what if it changes? And for third parties, or you in three years, it isn't immediately evident what <code>30</code> means.</p>

<p>The same goes for basically every number in these lines:</p>

<pre><code>    n = n - 7  # adjust for wheel starting at 7 vs. 0
    return (n//30 &lt;&lt; 3) + self.wheel_indices[n % 30]

    return 30 * (i &gt;&gt; 3) + self.wheel_primes[i &amp; 7]
</code></pre>

<p>I don't know where 7 comes from, but I suspect that it should be calculated from <code>(1 &lt;&lt; 3) - 1</code> based on its usage as a mask.</p>

<h2>Name collisions</h2>

<p>Don't call a variable <code>sqrt</code>. It's common enough that there's a bare import of that symbol from <code>math</code>.</p>
    </div>