<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>implementation</strong></p>

<ol>
<li>The biggest thing that jumped out at me is your <code>all</code> function takes a callback instead of returning a <code>Promise</code> like <code>Promise.all</code> would do. (EDIT: it looks like the interview asked that of you, so that makes sense then. A section has been added below.)</li>
<li>When your handling the <code>reject</code> branch of each promise (in the <code>.then</code> call), there's no reason to do anything fancy. As soon as you encounter an error, you can immediately reject the outer promise (or in your case, callback with an <code>Error</code></li>
<li><code>allPromisesChecked</code> and <code>allPromisesPassed</code> gets a little verbose but as long as it works it kinda doesn't matter</li>
</ol>

<p>This interested me so I took a shot at implementing it. Here's my code -</p>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>// Promise.all polyfill
function all(promises) {
  return new Promise(function(resolve,reject) {
    var count = promises.length
    var result = []
    var checkDone = function() { if (--count === 0) resolve(result) }
    promises.forEach(function(p, i) {
      p.then(function(x) { result[i] = x }, reject).then(checkDone)
    })
  })
}

// delay helper for creating promises that resolve after ms milliseconds
function delay(ms, value) {
  return new Promise(function(pass) {
    setTimeout(pass, ms, value)
  })
}

// resolved promises wait for one another but ensure order is kept
all([
  delay(100, 'a'),
  delay(200, 'b'),
  delay(50, 'c'),
  delay(1000, 'd')
])
.then(console.log, console.error) // [ a, b, c, d ]

// check that error rejects asap
all([
  delay(100, 'a'),
  delay(200, 'b'),
  Promise.reject(Error('bad things happened')),
  delay(50, 'c'),
  delay(1000, 'd')
])
.then(console.log, console.error) // Error: bad things happened</code></pre>
</div>
</div>


<p><strong>time</strong></p>

<p>This took me about 10 minutes. If someone already has experience with Promises, I would expect someone could come up with a working solution in less than 30 minutes. If you've never seen Promises before, maybe 60 minutes?</p>

<hr>

<p><strong>using a callback</strong></p>

<p>Re-reading the question, I see that my original answer is an actual polyfill of Promise.all, not what the interview asked of you.</p>

<p>Here's a dramatically simplified function that is essentially useless except for answering the interview question.</p>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>// Promise.all wannabe
// ([Promise], (bool-&gt; void)) -&gt; void
function all(promises, callback) {
  var count = promises.length
  promises.forEach(function(p, i) {
    p.then(
      function() { if (--count === 0) callback(true) },
      function() { callback(false) }
    )
  })
}

// delay helper for creating promises that resolve after ms milliseconds
function delay(ms, value) {
  return new Promise(function(pass) {
    setTimeout(pass, ms, value)
  })
}

// basic boilerplate to check an answer
function checkAnswer(label, promises) {
  all(promises, function(result) {
    console.log(label, result)
  })
}

// resolved promises wait for one another but ensure order is kept
checkAnswer('example1', [
  delay(100, 'a'),
  delay(200, 'b'),
  delay(50, 'c'),
  delay(1000, 'd')
]) // [ a, b, c , d ]

// check that error rejects asap
checkAnswer('example2', [
  delay(100, 'a'),
  delay(200, 'b'),
  Promise.reject(Error('bad things happened')),
  delay(50, 'c'),
  delay(1000, 'd')
]) // Error: bad things happened</code></pre>
</div>
</div>


<p><strong>remarks</strong></p>

<p>So in hindsight, I do have some more critique to offer. Considering the function only has to return <code>true</code> or <code>false</code>, there's no reason to make it complex. Basically you just have to count the <code>resolve</code> branches until it reaches the count of <code>promises</code> provided as input. If a <code>reject</code> happens, you can immediately return <code>false</code>. There's no need for <em>any</em> other code.</p>

<hr>

<p><strong>back from the future (4 years later)</strong></p>

<p>Functions have taught me a lot over the recent years. Small functions that do one thing are always better than big functions that do many. The design for this implementation starts with the simple idea of combining two promises into an array of two values. We'll call it <code>and</code> -</p>

<pre class="lang-js prettyprint-override"><code>const and = (px, py) =&gt; // &lt;-- two promises: "p of x" and "p of y"
  px.then(x =&gt; py.then(y =&gt; [ x, y ])) // two values: "x" and "y"

const all = (promises = []) =&gt;
  promises.reduce
    ( (pr, px) =&gt;
        and(pr, px) // &lt;-- two promises: "p of r" and "p of x"
          .then(([ r, x ]) =&gt; // &lt;-- two values: "r" and "x"
            [ ...r, x ]) // &lt;-- result: append "x" to "r"
    , Promise.resolve([]) // &lt;-- initial result, "p of empty"
    )
</code></pre>

<p>Already we're done implementing <code>all</code> and behaviour is the same -</p>

<pre class="lang-js prettyprint-override"><code>all([
  delay(100, 'a'),
  delay(200, 'b'),
  delay(50, 'c'),
  delay(1000, 'd'),
])
.then(console.log, console.error)
// [ a, b, c, d ]

all([
  delay(100, 'a'),
  delay(200, 'b'),
  Promise.reject(Error('bad things happened')),
  delay(50, 'c'),
  delay(1000, 'd'),
])
.then(console.log, console.error)
// Error: bad things happened
</code></pre>

<p>Expand the snippet below to verify the result in your browser -</p>

<p></p><div class="snippet" data-lang="js" data-hide="true" data-console="true" data-babel="false">
<div class="snippet-code snippet-currently-hidden">
<pre class="snippet-code-js lang-js prettyprint-override"><code>const and = (px, py) =&gt;
  px.then(x =&gt; py.then(y =&gt; [ x, y ]))

const all = (promises = []) =&gt;
  promises.reduce
    ( (pr, px) =&gt;
        and(pr, px).then(([ r, x ]) =&gt; [ ...r, x ])
    , Promise.resolve([])
    )

const delay = (ms, x) =&gt;
  new Promise(r =&gt; setTimeout(r, ms, x))

all([
  delay(100, 'a'),
  delay(200, 'b'),
  delay(50, 'c'),
  delay(1000, 'd'),
])
.then(console.log, console.error) // [ a, b, c, d ]

all([
  delay(100, 'a'),
  delay(200, 'b'),
  Promise.reject(Error('bad things happened')),
  delay(50, 'c'),
  delay(1000, 'd'),
])
.then(console.log, console.error) // Error: bad things happened</code></pre>
</div>
</div>


<p>But we can do better. Putting <code>x</code> and <code>y</code> in an array <code>[]</code> is an extra "thing". And the operation we are using in reduce, <code>[ ...r, x ]</code> is also a well-known function -</p>

<pre class="lang-js prettyprint-override"><code>const and = (px, py) =&gt;
  px.then(x =&gt; py.then(y =&gt; [ x, y ])) // hard-coded []

const all = (promises = []) =&gt;
  promises.reduce
    ( (pr, px) =&gt;
        and(pr, px)
          .then(([ r, x ]) =&gt;
            [ ...r, x ]) // &lt;-- is known as "append"
    , Promise.resolve([])
    )
</code></pre>

<p>Instead of locking <code>x</code> and <code>y</code> in an array, <code>[ x, y ]</code>, we could specify any behaviour we want, ie <code>doSomething(x, y)</code> -</p>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>const and = (doSomething, px, py) =&gt;
  px.then(x =&gt; py.then(y =&gt; doSomething(x, y)))

const myFunc = (a, b) =&gt;
  (a + b) * 100

and(myFunc, Promise.resolve(1), Promise.resolve(2))
  .then(console.log, console.error) // 300</code></pre>
</div>
</div>


<p>This implementation of <code>and</code> is well known by another name. <code>lift2</code> allows us to take an ordinary function (eg <code>append</code>) and use it in (ie "lift it into") the Promise context -</p>

<pre class="lang-js prettyprint-override"><code>// complete polyfill for Promise.all

const lift2 = (f, px, py) =&gt;
  px.then(x =&gt; py.then(y =&gt; f(x, y)))

const append = (a = [], x = null) =&gt;
  [...a, x]

const all = (promises = []) =&gt;
  promises.reduce
    ( (pr, px) =&gt; lift2(append, pr, px)
    , Promise.resolve([])
    )
</code></pre>

<p>Expand the snippet to verify the results in your browser -</p>

<p></p><div class="snippet" data-lang="js" data-hide="true" data-console="true" data-babel="false">
<div class="snippet-code snippet-currently-hidden">
<pre class="snippet-code-js lang-js prettyprint-override"><code>const lift2 = (f, px, py) =&gt;
  px.then(x =&gt; py.then(y =&gt; f(x, y)))

const append = (a = [], x = null) =&gt;
  [...a, x]

const all = (promises = []) =&gt;
  promises.reduce
    ( (pr, px) =&gt; lift2(append, pr, px)
    , Promise.resolve([])
    )

const delay = (ms, x) =&gt;
  new Promise(r =&gt; setTimeout(r, ms, x))

all([
  delay(100, 'a'),
  delay(200, 'b'),
  delay(50, 'c'),
  delay(1000, 'd'),
])
.then(console.log, console.error) // [ a, b, c, d ]

all([
  delay(100, 'a'),
  delay(200, 'b'),
  Promise.reject(Error('bad things happened')),
  delay(50, 'c'),
  delay(1000, 'd'),
])
.then(console.log, console.error) // Error: bad things happened</code></pre>
</div>
</div>


<hr>

<p><strong>why is it named <code>lift2</code>?</strong></p>

<p>It's called <code>lift2</code> because the function we lifted (<code>append</code> in this example) expects <em>two</em> arguments. In <em>typed</em> languages, it's common to see <code>lift3</code> and <code>lift4</code> variants -</p>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>const lift3 = (f, px, py, pz) =&gt; // &lt;-- 3 promises
  px.then(x =&gt; py.then(y =&gt; pz.then(z =&gt; 
    f(x,y,z) // &lt;-- 3 values
  )))

const lift4 = (f, pw, px, py, pz) =&gt; // &lt;-- 4 promises
  pw.then(w =&gt; px.then(x =&gt; py.then(y =&gt; pz.then(z =&gt; 
    f(w,x,y,z) // &lt;-- 4 values
  ))))
  
const p = x =&gt; // &lt;-- helper for demo
  Promise.resolve(x) 

const add = (...numbers) =&gt;
  numbers.reduce((a, b) =&gt; a + b, 0)

lift3(add, p(1), p(2), p(3))
  .then(console.log, console.error) // 6

lift4(add, p(1), p(2), p(3), p(4))
  .then(console.log, console.error) // 10</code></pre>
</div>
</div>


<p>But JavaScript is a <em>dynamic</em> language and so we do not need such strict implementations. We can implement <code>liftN</code> which accepts a <a href="https://en.wikipedia.org/wiki/Arity#Varying_arity" rel="nofollow noreferrer">variadic</a> function -</p>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>const append = (a = [], x = null) =&gt;
  [...a, x]

const lift2 = f =&gt;
  (px, py) =&gt; px.then(x =&gt; py.then(y =&gt; f(x, y)))

const liftN = (f, ...promises) =&gt;
  promises
    .reduce(lift2(append), Promise.resolve([])) // &lt;-- !
    .then(values =&gt; f(...values))

const p = x =&gt; // &lt;-- helper for demo
  Promise.resolve(x) 

const add = (...numbers) =&gt;
  numbers.reduce((a, b) =&gt; a + b, 0)

liftN(add, p(1))
  .then(console.log, console.error) // 1

liftN(add, p(1), p(2))
  .then(console.log, console.error) // 3

liftN(add, p(1), p(2), p(3))
  .then(console.log, console.error) // 6

liftN(add, p(1), p(2), p(3), p(4))
  .then(console.log, console.error) // 10</code></pre>
</div>
</div>


<p>Notice <code>!</code> above. <code>liftN</code> is essentially the variadic version of <code>all</code>. The two can be used interchangeably -</p>

<pre class="lang-js prettyprint-override"><code>const all = (promises = []) =&gt;
  promises.reduce(lift2(append), Promise.resolve([]))

const liftN = (f, ...promises) =&gt;
  all(promises).then(values =&gt; f(...values))
</code></pre>

<pre class="lang-js prettyprint-override"><code>all([ p(1), p(2), p(3), p(4) ])
  .then(nums =&gt; add(...nums))
  .then(console.log, console.error) // 10

liftN(add, p(1), p(2), p(3), p(4))
  .then(console.log, console.error) // 10
</code></pre>

<pre class="lang-js prettyprint-override"><code>liftN
  ( console.log
  , delay(100, 'a')
  , delay(200, 'b')
  , delay(50, 'c')
  , delay(1000, 'd')
  )
  .catch(console.error) // [ a, b, c, d ]

liftN
  ( console.log
  , delay(100, 'a')
  , delay(200, 'b')
  , Promise.reject(Error('bad things happened'))
  , delay(50, 'c')
  , delay(1000, 'd')
  )
  .catch(console.error) // Error: bad things happened
</code></pre>

<p>Expand the snippet below to verify the results in your browser -</p>

<p></p><div class="snippet" data-lang="js" data-hide="true" data-console="true" data-babel="false">
<div class="snippet-code snippet-currently-hidden">
<pre class="snippet-code-js lang-js prettyprint-override"><code>const append = (a = [], x = null) =&gt;
  [...a, x]

const lift2 = f =&gt;
  (px, py) =&gt; px.then(x =&gt; py.then(y =&gt; f(x, y)))

const all = (promises = []) =&gt;
  promises.reduce(lift2(append), Promise.resolve([]))

const liftN = (f, ...promises) =&gt;
  all(promises).then(values =&gt; f(...values))

const delay = (ms, x) =&gt;
  new Promise(r =&gt; setTimeout(r, ms, x))

liftN
  ( console.log
  , delay(100, 'a')
  , delay(200, 'b')
  , delay(50, 'c')
  , delay(1000, 'd')
  )
  .catch(console.error) // [ a, b, c, d ]

liftN
( console.log
, delay(100, 'a')
, delay(200, 'b')
, Promise.reject(Error('bad things happened'))
, delay(50, 'c')
, delay(1000, 'd')
)
.catch(console.error) // Error: bad things happened</code></pre>
</div>
</div>

    </div>