<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The function is implicitly public, takes an implicitly <code>ByRef</code> parameter that has no reason to not be passed <code>ByVal</code>, and returns an implicit <code>Variant</code> that should be explicit.</p>

<p>It's also side-effecting, which makes it unusable as an actual UDF.</p>

<p><code>ThisWorkbook.Worksheets("Scripting Worksheet")</code> suggests the procedure is using a purposely-made bogus (hidden?) sheet just for that. So why does that sheet need to be dereferenced 3 times in the same scope? Give it a meaningful code name, and use it!</p>

<pre><code>Public Function AdvancedEvaluate(ByVal expression As String) As Variant
    With ScriptingSheet.Range("A1")
        .Formula = expression
        AdvancedEvaluate = .Value
        .ClearContents
    End With
End Function
</code></pre>

<p>Now, that's the exact same logic, just more explicit and unnoticeably more efficient in the handling of object references.</p>

<p>To the extent that the idea is to somehow get Excel's calc engine to do the work, other than getting the Excel devs to lift the 255-char limitation in the object model, I think that's as good as it's going to get. It's not a UDF though: in Excel a <em>User-Defined Function</em> refers to a function that can be invoked from a cell - but this function will only ever return an error value to Excel; VBA code can merrily consume it though.</p>
    </div>