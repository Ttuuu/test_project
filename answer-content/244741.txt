<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>In addition to what Reinderien said:</p>
<h1>Move <code>class Trie</code> inside <code>class StreamChecker</code></h1>
<p>Your <code>class Trie</code> is not a generic class, but rather a specialized trie implementation specifically for <code>StreamChecker</code>. You can move it inside <code>class StreamChecker</code>, so that it is clear that they belong to each other, and so that <code>class Trie</code> does not pollute the global namespace:</p>
<pre><code>class StreamChecker {
    class Trie {
        ...
    };

    Trie trie_stream;
    ...
};
</code></pre>
<h1>Store <code>Trie</code>s by value</h1>
<p>Your <code>class Trie</code> has a memory leak: it calls <code>new Trie()</code>, but there is no corresponding <code>delete</code> in sight. You could write a destructor that iterates over <code>alphabet_map</code> and calls <code>delete</code> on the values, or even use <code>std::unique_ptr</code> to track ownership of the memory, but there is no need for this at all. After all, <code>std::map</code> already takes care of managing the memory necessary to store the keys and values. So remove that pointer and write:</p>
<pre><code>class Trie {
    std::unordered_map&lt;char, Trie&gt; alphabet_map;
    ...
    void insert(const std::string &amp;word) {
        if (word.empty()) {
            return;
        }

        Trie *temp_trie = this;

        for (auto letter: word) {
             temp_trie = &amp;temp_trie-&gt;alphabet_map[letter];
        }

        temp_trie-&gt;is_word = true;
    }
};
</code></pre>
<p>Note that in <code>search()</code> you need to do similar modifications, but there you do need to explicitly check whether the <code>letter</code> is present in the <code>alphabet_map</code>.</p>
    </div>