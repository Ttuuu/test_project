<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>nested methods</h1>

<p>Why do you nest the <code>get_max_shape</code> etcetera in the <code>pad</code>? There is no need to do this.</p>

<h1>get_max_shape</h1>

<p>Here you use recursion and a global variable. A simpler way would be to have a generator that recursively runs through the array, and yields the level and length of that part, and then another function to aggregate this results. That way you can avoid passing </p>

<pre><code>def get_dimensions(array, level=0):
    yield level, len(array)
    try:
        for row in array:
            yield from get_dimensions(row, level + 1)
    except TypeError: #not an iterable
        pass
</code></pre>

<blockquote>
<pre><code>[(0, 3), (1, 3), (2, 3), (2, 1), (2, 2), (1, 1), (2, 1), (1, 2), (2, 2), (2, 1)]
</code></pre>
</blockquote>

<p>The aggregation can be very simple using <code>collections.defaultdict</code>:</p>

<pre><code>def get_max_shape(array):
    dimensions = defaultdict(int)
    for level, length in get_dimensions(array):
        dimensions[level] = max(dimensions[level], length)
    return [value for _, value in sorted(dimensions.items())]
</code></pre>

<blockquote>
<pre><code>[3, 3, 3]
</code></pre>
</blockquote>

<h1>creating the result</h1>

<p>Instead of <code>r = np.zeros(dims, dtype=dtype) + pad_value</code> you can use <a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.full.html#numpy.full" rel="nofollow noreferrer"><code>np.full</code></a></p>

<p>You iterate over all possible indices, and check whether it is present in the original array. Depening on how "full" the original array is, this can save some time. It also allows you to do this without your custom <code>get_item</code> method to get the element at the nested index</p>

<pre><code>def iterate_nested_array(array, index=()):
    try:
        for idx, row in enumerate(array):
            yield from iterate_nested_array(row, (*index, idx))
    except TypeError: # final level
        for idx, item in enumerate(array):
            yield (*index, idx), item
</code></pre>

<blockquote>
<pre><code>[((0, 0, 0), 0),
 ((0, 0, 1), 1),
 ((0, 0, 2), 2),
 ((0, 1, 0), 3),
 ((0, 2, 0), 4),
 ((0, 2, 1), 5),
 ((1, 0, 0), 6),
 ((2, 0, 0), 7),
 ((2, 0, 1), 8),
 ((2, 1, 0), 9)]
</code></pre>
</blockquote>

<h2>slice</h2>

<p>an even better way, as suggested by@hpaulj uses slices:</p>

<pre><code>def iterate_nested_array(array, index=()):
    try:
        for idx, row in enumerate(array):
            yield from iterate_nested_array(row, (*index, idx))
    except TypeError: # final level            
        yield (*index, slice(len(array))), array
</code></pre>

<blockquote>
<pre><code>[((0, 0, slice(None, 3, None)), [0, 1, 2]),
 ((0, 1, slice(None, 1, None)), [3]),
 ((0, 2, slice(None, 2, None)), [4, 5]),
 ((1, 0, slice(None, 1, None)), [6]),
 ((2, 0, slice(None, 2, None)), [7, 8]),
 ((2, 1, slice(None, 1, None)), [9])]
</code></pre>
</blockquote>

<h1>padding</h1>

<pre><code>def pad(array, fill_value):
    dimensions = get_max_shape(array)
    result = np.full(dimensions, fill_value)
    for index, value in iterate_nested_array(array):
        result[index] = value
    return result
</code></pre>

<blockquote>
<pre><code>array([[[ 0,  1,  2],
        [ 3, -1, -1],
        [ 4,  5, -1]],

       [[ 6, -1, -1],
        [-1, -1, -1],
        [-1, -1, -1]],

       [[ 7,  8, -1],
        [ 9, -1, -1],
        [-1, -1, -1]]])
</code></pre>
</blockquote>
    </div>