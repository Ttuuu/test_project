<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>regarding:</p>
<pre><code>scanf("%s",sn);
</code></pre>
<p>To avoid any possible buffer overflow, should include a MAX characters modifier that is 1 less than the length of the input buffer ( 1 less because the <code>%s</code> input format conversion specifier always appends a NUL byte to the input.</p>
<p>Should check the returned value to assure the operation was successful.  Note: the <code>scanf()</code> family of functions returns the number of successful 'input format conversions'</p>
<p>Suggest:</p>
<pre><code>if ( scanf("%19s",sn) != 1 )
{
    fprintf( stderr, "scanf for the input string failed\n" );
    exit( EXIT_FAILURE );
}
</code></pre>
<p>For ease of readability and understanding:</p>
<p>Please consistently indent the code.  Indent after each opening brace '{'.  Unindent before each closing brace ']'.  Suggest each indent level be 4 spaces.  1 or 2 space indents will 'disappear' when using variable width fonts.</p>
<p>Please follow the axiom:</p>
<pre><code>*only one statement per line and (at most) one variable declaration per statement.*
</code></pre>
<p>Therefore,</p>
<pre><code> {a = i; 
 break;}
</code></pre>
<p>would be much better written as:</p>
<pre><code> {
     a = i; 
     break;
 }
</code></pre>
<p>regarding:</p>
<pre><code>#include &lt;math.h&gt;
</code></pre>
<p>Nothing in that header file is being used by the OPs program. Therefore, that statement should be removed.</p>
<p>if the user enters a value larger than 2147483647 (aka: 2^31 -1) then the <code>int</code> result overflows, resulting in a negative value being printed  I.E. results in undefined behavior  Suggest 1) limit the user input to 10 characters + the NUL terminator, 2) check for the result becoming negative</p>
<p>regarding the function:</p>
<pre><code>int ascton (int a)
</code></pre>
<p>This whole function can be reduced to:</p>
<pre><code>a -= '0';
</code></pre>
<p>suggest, before operating on each character the user input, to first check that char is a digit.  Suggest:</p>
<pre><code>#include &lt;ctype.h&gt;
....
int main( void )
{
    ...
    if( ! isdigit( sn[i] )
    {
        fprintf( stderr, "input contains characters other than digits\n" );
        return -1;
    }
    ....
</code></pre>
<p>the function: <code>lent()</code> can be reduced to:</p>
<pre><code>int lent (char a [20] )
{
    return (int)strlen( a );
}
</code></pre>
    </div>