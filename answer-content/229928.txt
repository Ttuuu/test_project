<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Typo</h2>

<p><code>lenght</code> is spelled <code>length</code>.</p>

<h2>Magic numbers</h2>

<p>What does <code>95</code> signify? You'll want to put this in a named <code>#define</code> or a <code>const</code>.</p>

<h2>Allocation failure</h2>

<p>After calling <code>malloc</code>, always check that you've been given a non-null pointer. Allocation failure does happen in real life.</p>

<h2>Indentation</h2>

<p>You'll want to run this through an autoformatter, because your <code>if</code> block has wonky indentation and needs more columns to the right.</p>

<h2>Inaccessible statement</h2>

<pre><code>
    return random_password;

    free(random_password);
</code></pre>

<p>This <code>free</code> will never be called; delete it.</p>

<h2><code>Random</code></h2>

<p>The larger conceptual problem with this program is that it uses a very cryptographically weak pseudorandom number generator. This is a large and fairly complex topic, so you'll need to do some reading, but asking for random data from an entropy-controlled system source will already be better than using C <code>rand</code>.</p>

<p>That aside: you aren't calling <code>rand</code>, you're calling <a href="https://linux.die.net/man/3/random" rel="noreferrer"><code>random</code></a>:</p>

<blockquote>
  <p>The random() function uses a nonlinear additive feedback random number generator employing a default table of size 31 long integers to return successive pseudo-random numbers in the range from 0 to RAND_MAX. The period of this random number generator is very large, approximately 16 * ((2^31) - 1). </p>
</blockquote>

<p>It's probably not appropriate for cryptographic purposes. Have a read through this:</p>

<p><a href="https://stackoverflow.com/questions/822323/how-to-generate-a-random-int-in-c/39475626#39475626">https://stackoverflow.com/questions/822323/how-to-generate-a-random-int-in-c/39475626#39475626</a></p>
    </div>