<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>The Question</h2>
<blockquote>
<p>Could anyone advise a better way to create [cookies]?</p>
</blockquote>
<p>Like your code already uses, <a href="http://php.net/manual/en/function.setcookie.php" rel="nofollow noreferrer"><code>setcookie()</code></a> is the traditional way of setting cookies. And yes, since the cookie data is sent in a header, there must be a response, otherwise the browser/user won't really be able to receive the cookie.</p>
<h2>General Feedback</h2>
<h3>Passing instance/member variables to method</h3>
<p>Why pass <code>$this-&gt;timeout</code> to <code>makeCurlRequest</code> from the <code>checkVote</code> method? If the method was called outside this class (and the scope of the method changed to  <code>protected</code> for sub-classes or <code>public</code> for anywhere else in the code) then it might make sense to accept that parameter.</p>
<blockquote>
<pre><code>$result = $this-&gt;makeCurlRequest($urlRequest, $this-&gt;requestTimeout);
</code></pre>
</blockquote>
<p>Since that method is not static, it could simply refer to <code>$this-&gt;requestTimeout</code> instead of accepting the parameter for it.</p>
<h3>Misleading Method Name</h3>
<p>The method <code>makeCurlRequest</code> appears to check if the curl function <code>curl_version()</code> exists and then either makes a cURL request or utilizes <code>file_get_contents()</code>. Thus the method might not always make a cURL request and a better name might be <code>makeRequest</code>. The code in the block when the <code>curl_version()</code> function does exist <em>could</em> be moved to a new method called <code>makeCurlRequest</code>.</p>
<h3><code>return</code> from <code>makeCurlRequest()</code></h3>
<p>The method <code>makeCurlRequest</code> has two <code>return</code> statements. One is in the <code>else</code> block, and the other is at the end of the method - i.e. <code>return $requestData;</code>. That variable,<code>$requestData</code>, appears to be the response from the API when the <code>curl_version()</code> function exists (and thus the cURL request is made), yet in the <code>else</code> block, <code>$requestData</code> is assigned a <a href="http://php.net/manual/en/language.types.resource.php" rel="nofollow noreferrer">resource</a> from <a href="http://php.net/manual/en/function.stream-context-create.php" rel="nofollow noreferrer"><code>stream_context_create()</code></a>. While this code likely functions correctly, it could be confusing to a teammate who had to update it. A more appropriate name for the return value from the call to <code>stream_context_create()</code> might be something like <code>$streamContext</code>. Then it might be simpler to either assign the return value from the call to <code>file_get_contents()</code> to <code>$requestData</code> and utilize the <code>return</code> of that variable at the end of the method, or when making the curl request, return the response at the end of that block.</p>
<h3>Redundant <code>return false</code></h3>
<p>In <code>isVoteCookieSet()</code> There is an <code>else</code> block to the nested <code>if</code> statement that contains <code>return false;</code>. That could be removed, since the last line of the method does the same thing.</p>
<h3>Constants for Response codes</h3>
<p>It would be wise to define (class) <a href="http://php.net/manual/en/language.constants.php" rel="nofollow noreferrer">constants</a> for the response codes, like the ones below. While there currently appears to only be one place in your code where that value appears, there may arise a need to have it appear in other logic and thus it would be useful to reuse the constant(s). Then if the value would ever need to be updated (e.g. if the API ever changes) then it can be updated in your code in one spot.</p>
<pre><code>const RESPONSE_VOTE_PLACED_IN_PAST_24_HOURS = 3;
const RESPONSE_VOTE_NOT_PLACED_IN_PAST_24_HOURS = 2;
</code></pre>
<p>That way, the code lines like below:</p>
<blockquote>
<pre><code>if ($result == 3) {
</code></pre>
</blockquote>
<p>Can be updated like this:</p>
<pre><code>if ($result == self::RESPONSE_VOTE_PLACED_IN_PAST_24_HOURS) {
</code></pre>
<p>Which would hopefully allow somebody else reading your code to have a better idea of what that logic means. Though if those names are too long, feel free to shorten them.</p>
    </div>