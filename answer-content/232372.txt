<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'm going to review each lib separately, so there might be duplicates.</p>

<h1>Hash Library</h1>

<h2>Returns</h2>

<p>In your <code>generate_hash</code> method, you have this section of code:</p>

<pre><code>...
    return salt, pw_hash
else:
    return False
</code></pre>

<p>The else is unnecessary here, as the first return will exit the method. It should look like this instead:</p>

<pre><code>...
    return salt, pw_hash
return False
</code></pre>

<h2>Types</h2>

<p>In some methods, you use types to display what parameters are accepted and what values are returned, but in other methods you do not. I would recommend being consistent to one idea: using types or not using them. My personal preference is using types to have as much description about the methods I write.</p>

<p>When returning two different types of values in a method, use <code>Union</code>. It allows you to do something like this:</p>

<pre><code>def get_master_password(self) -&gt; Union[str, None]:
</code></pre>

<p>This says it will either return a string, or None. You can describe this possible behavior in the method docstring.</p>

<h2>Asserts</h2>

<p>Instead of using try and catches, you can assert <em>with</em> an error message as such:</p>

<pre><code>assert pw == pw2, 'Passwords do not match. Try again'
</code></pre>

<h2>Naming</h2>

<p>Personally, I see <code>pw</code> and <code>pw2</code> as less than desirable variable names. Names like <code>password</code> and then <code>confirm_password</code> can be more descriptive. The same when working with files, you use <code>ff</code> when <code>with open(...) as file</code> is more clear.</p>

<h2>Inheritance</h2>

<p>Subclassing from <code>object</code> isn't required, as it's a python 2 feature. You don't need to inherit from object to have new style in python 3. All classes are new-style. <a href="https://stackoverflow.com/questions/54867/what-is-the-difference-between-old-style-and-new-style-classes-in-python">Here</a> is a StackOverflow post that explains what new-style is.</p>

<h2>Init Method</h2>

<p>If you don't need an <code>init</code> method, don't bother writing one. It's unnecessary code.</p>

<hr>

<h1>AES Library</h1>

<p>Nothing much to review, just going to reiterate not having to inherit from object when creating a new class and the possible use of types. For example:</p>

<pre><code>def encrypt_data(self, data):
</code></pre>

<p>can be</p>

<pre><code>def encrypt_data(self, data: str) -&gt; str:
</code></pre>

<p>(I'm assuming the data passed is a string)</p>

<hr>

<h1>SQL Library</h1>

<h2>Reserved Names</h2>

<p>I wouldn't use <code>id</code> within this program, as it's a reserved name in python. A fix most python developers use (from what I've seen) is <code>_id</code> or <code>id_</code>. You use <code>_id</code> in some parts of your program, so I would recommend using it everywhere.</p>

<p>The same goes with <code>open</code>. I would suggest a method like <code>connect_to_database</code>.</p>

<h2>Types</h2>

<p>Again, types.</p>

<h2>Docstring Formatting</h2>

<p>Just some food for thought about your docstrings. This is your <code>edit_database</code> docstring:</p>

<pre><code>"""
Broken function to update a field of a row in the table
:param id: primary key id for WHERE clause
:param data: edited field data to replace in current db entry
:param field: either desc (description) or pass_hash (password hash of entry)
:return: True om success, false om fail
"""
</code></pre>

<p>It's a little clunky and slightly hard to read since it's one block of code. Personally, I would separate the method description, parameters accepted, and values returned:</p>

<pre><code>"""
Broken function to update a field of a row in the table

:param id: primary key id for WHERE clause
:param data: edited field data to replace in current db entry
:param field: either desc (description) or pass_hash (password hash of entry)

:return: True om success, false om fail
"""
</code></pre>

<p>Now everything looks neater and you can differentiate the parts of the docstring.</p>

<hr>

<h1>Main Logic</h1>

<h2>String Formatting</h2>

<p>This</p>

<pre><code>print('Initializing database ... %s' % database_file)
</code></pre>

<p>can be</p>

<pre><code>print(f'Initializing database ... {database_file}')
</code></pre>

<p>Using <code>f""</code> strings allows you to directly place variables in your strings without having to use <code>%s</code> or <code>.format(...)</code>.</p>

<h2><code>or</code> in parameters</h2>

<p>This</p>

<pre><code>def get_input(_type: str or int, _prompt: str):
</code></pre>

<p>can be</p>

<pre><code>def get_input(_type: Union[str, int], _prompt: str) -&gt; Union[str, int]:
</code></pre>

<p>It utilizes <code>typing</code>s <code>Union</code> instead of using a built in keyword such as <code>or</code>.</p>
    </div>