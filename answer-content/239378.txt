<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Is it worth parallelising?</h1>

<p>When you are parallelizing code you have to ask yourself if it's worth doing that. Parallel code doesn't magically give a speedup, because there are various things that can actually slow you down when using parallelism, for example:</p>

<ul>
<li>Spawning and waiting for threads itself costs some time.</li>
<li>Threads might be fighting for resources, like locks, but even just memory access might cause contention.</li>
<li>Code that is not <a href="https://en.wikipedia.org/wiki/Embarrassingly_parallel" rel="nofollow noreferrer">trivially parallelizable</a> might require more computations when parallelized than when running single-threaded.</li>
</ul>

<p>In the case of transposing matrices, there are almost no computations involved, the work is completely dominated by reading and writing to memory. A good single-threaded implementation, which reads sequentially as much as possible, will likely be able to saturate the memory bus on typical desktop machines.</p>

<p>In your implementation, you have a huge overhead just from starting all the async work items: you call <code>async()</code> more often than there are elements in the matrix. So that alone will make this horribly slow. Most good parallel algorithms try to limit the number of threads to the number of CPU cores or hardware threads that are available.</p>

<p>Even if you didn't parallelize, but kept the structure of the code the same (just not use <code>async()</code>), then the recursive divide-and-conquer approach will cause a non-sequential memory access pattern.</p>

<h1>Code review</h1>

<h2>Nested <code>std::vector&lt;&gt;</code>s are not efficient containers for matrices</h2>

<p>While it's convenient to declare a 2D matrix using <code>std::vector&lt;std::vector&lt;T&gt;&gt;</code>, it is not very efficient, since there is a lot of indirection. It is more efficient to declare a single <code>std::vector&lt;T&gt;</code> of size <code>n * n</code>, and index the vector using <code>[row * n + col]</code>, or use a C++ library that provides proper matrix classes.</p>

<h2>Use <code>std::swap()</code></h2>

<p>The standard library provides <a href="https://en.cppreference.com/w/cpp/algorithm/swap" rel="nofollow noreferrer"><code>std::swap()</code></a>, which swaps two variables for you.</p>
    </div>