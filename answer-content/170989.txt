<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">


<p>Here is a slightly convoluted algorithm that yields the same result as yours but is faster. It takes advantage of Java's native support for arrays instead of using an internal <code>String</code>:</p>

<pre class="lang-java prettyprint-override"><code>private static char[] getYOURCharArray(char[] array) {
    char[] distinctChars = new char[0];
    char[] distinctCharsInOriginalOrder = new char[array.length];

    for (int i = 0; i &lt; array.length; i++) {
        int binarySearchResult = Arrays.binarySearch(distinctChars, array[i]);

        if (binarySearchResult &lt; 0) {
            char[] updatedDistinctChars = new char[distinctChars.length + 1];
            int insertionPointForNewChar = -(binarySearchResult + 1);

            System.arraycopy(distinctChars, 0, updatedDistinctChars, 0, insertionPointForNewChar);
            updatedDistinctChars[insertionPointForNewChar] = array[i];
            System.arraycopy(distinctChars, insertionPointForNewChar, updatedDistinctChars, insertionPointForNewChar + 1, distinctChars.length - insertionPointForNewChar);

            distinctChars = updatedDistinctChars;
            distinctCharsInOriginalOrder[distinctChars.length - 1] = array[i];
        }
    }

    return Arrays.copyOf(distinctCharsInOriginalOrder, distinctChars.length);
}
</code></pre>

<p>Using <code>Arrays.binarySearch(char[], char)</code> to look for a <code>char</code> in a <code>char[]</code> seems to be faster than searching for a <code>char</code> in a <code>String</code> using <code>String.indexOf(int)</code>. On the other hand, <code>Arrays.binarySearch(char[], char)</code> requires the <code>char[]</code> to be sorted, which is why we need a second <code>char[]</code> that stores all distinct characters in the order they were first encountered in the original <code>char[]</code>, assuming the returned <code>char[]</code> must fulfill this requirement (if it doesn't, then the array <code>distinctCharsInOriginalOrder</code> is actually not needed and you can return <code>distinctChars</code> directly at the end of this method, which might speed up the process a little bit). To ensure that <code>distinctChars</code> stays sorted, it is important to insert new <code>char</code>s at the correct position when updating <code>distinctChars</code>, which is why two calls to <code>System.arraycopy</code> are needed.</p>

<p>I did some simulations with random <code>char</code> arrays, each containing 100000 random characters. Here are the results of a set of 10 simulations:</p>

<pre class="lang-none prettyprint-override"><code>With String: 9.183 seconds
With char arrays: 2.404 seconds

With String: 4.159 seconds
With char arrays: 2.075 seconds

With String: 4.721 seconds
With char arrays: 2.116 seconds

With String: 4.758 seconds
With char arrays: 2.056 seconds

With String: 4.517 seconds
With char arrays: 2.056 seconds

With String: 4.707 seconds
With char arrays: 2.038 seconds

With String: 4.803 seconds
With char arrays: 2.049 seconds

With String: 4.706 seconds
With char arrays: 2.024 seconds

With String: 4.683 seconds
With char arrays: 2.045 seconds

With String: 4.549 seconds
With char arrays: 2.052 seconds
</code></pre>

<p>I have no idea why the first simulation with the <code>String</code> algorithm takes twice as long as all the others. It was like that every time I ran the program, even when I switched the order of the two tests (meaning the first <code>String</code> algorithm still took twice as long as the others, even when the <code>char[]</code> algorithm was tested first). Maybe I did something wrong, or the JVM does something mysterious here.</p>

<p>Apparently, the larger the original <code>char</code> array, the greater the difference between the performance of the two algorithms. Here are the results of 10 simulations with 500000 random characters:</p>

<pre class="lang-none prettyprint-override"><code>With String: 20.44 seconds
With char arrays: 4.474 seconds

With String: 21.344 seconds
With char arrays: 3.489 seconds

With String: 22.064 seconds
With char arrays: 3.315 seconds

With String: 22.155 seconds
With char arrays: 3.351 seconds

With String: 22.325 seconds
With char arrays: 3.386 seconds

With String: 22.149 seconds
With char arrays: 3.335 seconds

With String: 22.175 seconds
With char arrays: 3.352 seconds

With String: 22.16 seconds
With char arrays: 3.343 seconds

With String: 22.502 seconds
With char arrays: 3.362 seconds

With String: 22.122 seconds
With char arrays: 3.351 seconds
</code></pre>
    </div>