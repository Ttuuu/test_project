<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>General</h2>

<p>Please ensure code compiles when posting it here. Or state a specific justification why it doesn't. (e.g. <code>Print()</code> was missing a <code>&lt;&lt;</code>)</p>

<h2>Putting it all together</h2>

<p>There are quite a few specific comments under your question, which I have incorporated and added a few more in a proposed alternative solution below. It is quite different in approach, technique and style. None of these are "must have", but you can take your pick.</p>

<h2>Parsing - how flexible</h2>

<p>The most challenging part of any parsing is the question, how flexible / tolerant does it have to be? How consistent is the file format?</p>

<p>Probably the simplest way to parse anything in C++ is to use <code>std::getline</code>. You were already using it, but were you aware of the second version? 
If your parsing requirements are not very pedantic or in need of lightspeed performance you could use <a href="https://en.cppreference.com/w/cpp/string/basic_string/getline" rel="nofollow noreferrer">the overloaded version</a> of <code>std::getline</code> which accepts a delimiter. I have shown below how that can be used. </p>

<p>It makes the code <em>much</em> simpler, but it's slightly less tolerant. e.g. double spaced gap is not good. </p>

<h2>Printing</h2>

<p>The common idiom for making objects "printable" in C++ is to implement the <code>&lt;&lt;</code> operator. This is best done using a <code>friend</code> function inside the class as shown. </p>

<p>You should almost always use <code>'\n'</code> and not <code>std::endl</code>, because the latter flushes the stream buffer, and that is often not needed. The <code>'\n'</code> line ending will also adapt to the local machine.  </p>

<h2>Return "nothing"</h2>

<p>In case of parsing failures, you were previously returning an "empty" <code>ConfigUnit</code> (correct term is <a href="https://en.cppreference.com/w/cpp/language/value_initialization" rel="nofollow noreferrer">value initialized</a>). I have shown a, probably cleaner alternative, using C++17 <code>std::optional</code>. </p>

<p>Note how in <code>main()</code> I call <code>get_config_unit()</code> assign it to <code>maybe_unit</code> (a common idiom to use <code>maybe_*</code>) then check for the <code>-&gt; bool</code> conversion <em>in the same if statement parens</em>. This is using the <a href="https://en.cppreference.com/w/cpp/language/if" rel="nofollow noreferrer">C++17 if statement "init-statement"</a>. Then I "dereference" the <code>std::optional&lt;config_unit&gt; maybe_unit</code> using the <code>*</code> operator. </p>

<p>This all makes for very terse syntax and stops variables and the "maybeness" leaking out.  </p>

<h2>Use of exceptions</h2>

<p>We can have a long debate about exceptions, there are several schools of thought. However, something I think most people agree on is that exceptions shouldn't be thrown during the "normal, expected case". They should be, well... "exceptional". </p>

<p>Your code was throwing and catching the <code>eof</code> flag. i.e. every invocation of the programme was throwing. This is probably bad. </p>

<p>I double checked the "file bits" and they didn't seem very useful to me, e.g. <code>bad_bit</code> doesn't get set if file is not found (perhaps the most common mode of failure), only <code>fail_bit</code> gets set. But that also gets set for <code>eof</code>. So I did it differently without exceptions. </p>

<h2>RAII</h2>

<p>Look it up: "Resource acquisition is initialisation"  (and what is not stated, is that when objects go out of scope they clean up after themselves). It is a key C++ feature. It means you don't have to call <code>file.close()</code>. When the object goes out of scope at end of function its destructor will be called, which will clean up. </p>

<p>This also means we don't have to have "one common exit point". Maybe that's what you were trying to achieve with your <code>try .. catch</code> block? It's not required. The right stuff just happens (because the <code>std::</code> classes are well written). </p>

<p>This was my test file "music.txt":</p>

<pre><code>CH_THRESHOLD 100
ba pram 314
SOME-PARAM2 3000
Too_many_spaces  999
</code></pre>

<p>And here is the suggested code:</p>

<pre><code>#include &lt;fstream&gt;
#include &lt;functional&gt;
#include &lt;iostream&gt;
#include &lt;sstream&gt;
#include &lt;string&gt;
#include &lt;vector&gt;

struct config_unit {
  std::string parameter;
  std::string value;

  friend std::ostream&amp; operator&lt;&lt;(std::ostream&amp; ostream, const config_unit&amp; cu) {
    return ostream &lt;&lt; "Parameter: '" &lt;&lt; cu.parameter &lt;&lt; "'\t"
                   &lt;&lt; "Value: '" &lt;&lt; cu.value &lt;&lt; "'" &lt;&lt; '\n';
  }
};

std::optional&lt;config_unit&gt; get_config_unit(const std::string&amp; line) {
  std::istringstream       ss(line);
  std::string              field;
  std::vector&lt;std::string&gt; fields;
  while (getline(ss, field, ' ')) fields.push_back(field);
  if (fields.size() != 2) return std::nullopt;
  return config_unit{fields[0], fields[1]};
}

int main() {
  std::string   filename{"music.txt"};
  std::ifstream fstream(filename);
  if (fstream.fail()) {
    std::cerr &lt;&lt; "couldn't open file '" &lt;&lt; filename &lt;&lt; "\n";
    return EXIT_FAILURE;
  }
  std::string line;
  while (std::getline(fstream, line)) {
    if (auto maybe_unit = get_config_unit(line); maybe_unit) {
      std::cout &lt;&lt; *maybe_unit;
    }
  }
  return EXIT_SUCCESS;
}

</code></pre>

<p>And here is the output produced given the above input:</p>

<pre><code>Parameter: 'CH_THRESHOLD'   Value: '100'
Parameter: 'SOME-PARAM2'    Value: '3000'
</code></pre>
    </div>