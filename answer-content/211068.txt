<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The code will crash with an out of bounds exception if given a zero-length array.</p>

<p>You are playing a little loose with the array endpoints.  If you get to <code>mid=0</code>, and it turns out that <code>arr[mid] &gt; arr[mid+1]</code>, then you will check <code>arr[mid] &gt; arr[mid-1]</code>, which will be reading <code>arr[-1]</code> which is the element at <strong>the other end</strong> of the array.  Fortunately, if <code>arr[0] &gt; arr[1]</code>, then the array must be monotonically decreasing, and the last value will be the smallest, but relying on that is tricky behaviour.</p>

<p>Your code is recursively executing <code>return search(...)</code>, Python does not do tail-recursion-optimization.  This could could easily be re-written to use a loop, which would be faster and doesn’t require any additional stack space.  For example, something like:</p>

<pre><code>while low &lt; high:
    mid = low + (high - low) // 2

    if arr[mid-1] &lt; arr[mid] &lt; arr[mid+1]:
        return arr[mid]

    if arr[mid] &gt; arr[mid+1]:
        high = mid
    else:
        low = mid + 1

return arr[low]
</code></pre>

<p>You <code>search(mid+1, high)</code>. Why don’t you <code>search(low, mid-1)</code>?  Seems asymmetrical. </p>

<p>Minor nit: You algorithm will fail if the array can have equal elements, such as 5, 50, 10, 10, 10, 10, 5.  It will find “10” at the mid-point and on both sides, at which point it will drift to the larger indexes, and eventually declare “10” as the maximum.</p>
    </div>