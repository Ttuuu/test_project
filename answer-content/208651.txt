<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Ok... I am not sure how to show you all of the refactorings I did in a way that will make sense, so I'm just going to post the refactored classes and go from there. </p>

<h2>Main:</h2>

<pre><code>public static void main(String[] args) {

    Scanner input = new Scanner(System.in);
    Players[] players = new Players[4];
    Card[] deck = Dealer.getDeckOfCards();

    System.out.println("Un-shuffled Cards.");
    Dealer.showCards(deck);
    Card[] shuffledCards = Dealer.shuffleCards(deck);
    System.out.println("Shuffled Cards.");
    Dealer.showCards(shuffledCards);

    for(int i = 0; i &lt; players.length; i++) {
        System.out.println("Enter Player Name: ");
        players[i] = new Players(input.nextLine());
    }

    Players[] playersWithCards = Dealer.dealCards(players, shuffledCards);

    System.out.println("---------------------------------------------");

    for(Players player : playersWithCards) {
        System.out.println(player.getName());
        player.showPlayerCards();
    }

}
</code></pre>

<h2>Players:</h2>

<pre><code>class Players {

    private String name;
    private Card[] cards = new Card[13];

    Players(String name){
        this.name = name;
    }
    void showPlayerCards(){
        System.out.println("---------------------------------------------");
        for (Card card : cards){
            //you had been checking here if this was null, but there was no need for that check
            System.out.printf("%s  of %s\n", card.rank, card.suit);
        }
        System.out.println("---------------------------------------------");
    }
    void receiveCard(Card card, int position){
        cards[position] = card;
    }
    String getName(){
        return name;
    }

}
</code></pre>

<h2>Dealer (formerly DeckOfCards)</h2>

<pre><code>class Dealer {
    private static final int SIZE = 52;
    private static Card[] deckOfCards = new Card[SIZE];

    static Card[] getDeckOfCards() {

        int count = 0;

        String[] suits = {"Diamonds", "Clubs", "Hearts", "Spades"};
        String[] ranks = {"King", "Queen", "Jack", "Ten", "Nine", "Eight", "Seven", "Six", "Five", "Four", "Three", "Deuce", "Ace"};

        for (String s : suits) {
            for (String r : ranks) {

                Card card = new Card(s, r);
                deckOfCards[count] = card;
                count++;
            }
        }

        return deckOfCards;

    }

    static Card[] shuffleCards(Card[] deckOfCards) {
        Random rand = new Random();
        int j;
        for (int i = 0; i &lt; SIZE; i++) {
            j = rand.nextInt(SIZE);
            Card temp = deckOfCards[i];
            deckOfCards[i] = deckOfCards[j];
            deckOfCards[j] = temp;
        }
        return deckOfCards;
    }

    static void showCards(Card[] deckOfCards) {
        System.out.println("---------------------------------------------");
        int count = 0;
        for (Card card : deckOfCards) {
            System.out.printf("%s of %s\t", card.rank, card.suit); //use print f with \t (tab character)
            count++;
            if (count % 4 == 0)
                System.out.println();
        }
        System.out.println("---------------------------------------------");
    }

    static Players[] dealCards(Players[] players, Card[] deck) {
        int numOfCardsPerPlayer = deck.length / players.length;
        for (int i = 0; i &lt; deck.length; i++) {
            int positionInHand = i % numOfCardsPerPlayer;
            players[i % players.length].receiveCard(deck[i], positionInHand);
        }

        return players;
    }
}
</code></pre>

<h2>and Card:</h2>

<pre><code>class Card {
    String suit;
    String rank;

    Card(String cardSuit, String cardRank){
        this.suit = cardSuit;
        this.rank = cardRank;
    }
}
</code></pre>

<ol>
<li><p>The first thing I did after refactoring your <code>Main</code> to use loops whenever possible was to ensure that you weren't unnecessarily making code <code>public</code>. All of your <code>classes</code> are in the same <code>package</code>, so you can make them <code>package-private</code> by removing the <code>public</code> modifiers. This is just generally considered good practice so that when you start working on projects with many classes, (some of which may have the same name) you are limiting conflicts.</p></li>
<li><p>Probably the single biggest difference between your code and the way I refactored it was that I changed <code>DeckOfCards</code> to a <code>Dealer</code>, and made it static. In programming, an abstraction of a <code>DeckOfCards</code> is really just an <em>array</em> of cards, like <code>Card[] deck = Dealer.getDeckOfCards();</code>. It seemed to me that most of the tasks you were calling from <code>DeckOfCards</code> were really the job of a <code>Dealer</code>, so I changed the code to reflect that, passing in the values created in the driver class as the program progresses. (For example in the line <code>Card[] shuffledCards = Dealer.shuffleCards(deck);</code>) If you look at this class, you'll see that all of its methods are static, which is really just a preference thing. If you wanted to make a constructor like <code>Dealer dealer = new Dealer();</code> for a dealer and view it more as an entity than a doer, you could. </p></li>
</ol>

<p>I'm sure I probably missed some stuff so if you have any questions let me know. All in all I think you did a really good job for a new developer.</p>
    </div>