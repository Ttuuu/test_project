<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Whitespace is very important for readability. For posting to Stack Exchange sites I recommend replacing tabs with spaces, because otherwise the site does that for you and the tabstops might not match. Here, though, the whitespace is so crazy that I think you need to look at configuring your IDE to pretty-print the code. Reformatting so that I can understand the structure:</p>

<blockquote>
<pre><code>public class d3 {
    public static void main(String[] args){
        String Search="loop";
        String[] letters = Search.split("") ;
        int counter;

        String[] words={"pole","pool","lopo","book","kobo"};

        for(int i=0;i&lt;words.length;i++)
        {
            counter=0;
            String ssplit[] = words[i].split("");
            for(int j=0;j&lt;words[i].length();j++)
            {
                if(letters.length==ssplit.length)
                {
                    for(int k=0;k&lt;letters.length;k++)
                    {
                        if(letters[j].equals(ssplit[k]))
                        {
                            counter++;
                            ssplit[k]="*";
                            break;
                        }
                    }
                    if (counter == 4)
                    {
                        System.out.println(words[i]);
                    }
                }
            }
        }
    }
}
</code></pre>
</blockquote>

<hr>

<h3>Names</h3>

<p>Java convention is that camel-case names which start with a capital letter are types (classes, interfaces, etc), so <code>Search</code> as the name of a variable is unexpected.</p>

<p><code>counter</code> is not entirely uninformative, but a better name would tell me <em>what</em> it counts. Similarly, it would be helpful to distinguish which variables relate to the search query and which to the items searched. The best convention I've seen there is PHP's <code>needle</code> and <code>haystack</code>, so I would suggest <code>needleLetters</code> and <code>haystackWords</code>.</p>

<hr>

<h3>foreach statement</h3>

<p>Instead of <code>for(int i=0;i&lt;words.length;i++) ... words[i]</code> you can use <code>for (String word : words) ... word</code>. This removes a variable and simplifies the naming, making it easier to see what the code does.</p>

<hr>

<h3>Decomposing strings</h3>

<p><code>String</code> has a method <code>toCharArray()</code>. I think it would make more sense to use that than <code>split("")</code>.</p>

<hr>

<h3>Don't put something in a loop which can go outside it</h3>

<blockquote>
<pre><code>            for(int j=0;j&lt;words[i].length();j++)
            {
                if(letters.length==ssplit.length)
                {
                    ...
                }
            }
</code></pre>
</blockquote>

<p>could be rewritten</p>

<pre><code>            if(letters.length==ssplit.length)
            {
                for(int j=0;j&lt;ssplit.length;j++)
                {
                    ...
                }
            }
</code></pre>

<p>Executing the test once is more efficient, and it's also easier to understand because the maintainer doesn't have to reason about loop invariants to work out what might have changed the second time the test is executed.</p>

<p>Since there's nothing after this test in the loop body, an alternative would be</p>

<pre><code>            if(letters.length!=ssplit.length)
            {
                continue;
            }

            for(int j=0;j&lt;ssplit.length;j++)
            {
                ...
            }
</code></pre>

<hr>

<h3>Beware hard-coded constants</h3>

<p>Why</p>

<pre><code>                    if (counter == 4)
                    {
                        System.out.println(words[i]);
                    }
</code></pre>

<p>? That's a bug. The comparison should be with <code>letters.length</code>. Also, it would make more sense to move the test outside the loop over <code>j</code>.</p>

<hr>

<h3>Use advanced data structures</h3>

<blockquote>
<pre><code>            for(int j=0;j&lt;words[i].length();j++)
            {
                for(int k=0;k&lt;letters.length;k++)
                {
                    if(letters[j].equals(ssplit[k]))
                    {
                        counter++;
                        ssplit[k]="*";
                        break;
                    }
                }
            }
</code></pre>
</blockquote>

<p>takes time proportional to <code>words[i].length() * letters.length</code>. If you use <code>java.util.HashMap&lt;Character, Integer&gt;</code> to store a per-character count, you can generate a representation for each word in time proportional to the length of the word, and you can compare the representations of two words in time proportional to the length of each word. In this toy example it doesn't matter, but for real applications the difference between <span class="math-container">\$O(n^2)\$</span> and <span class="math-container">\$O(n)\$</span> can be the difference between a project being feasible and not. The first place to look for optimisations is always the algorithm.</p>
    </div>