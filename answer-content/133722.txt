<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You can do this manually with a counter along these lines (kind of messy):</p>

<pre><code>function getAddresses(members, callback) {
  var addressList = [];
  var count = 0;

  for (var i = 0; i &lt; members.length; i++) {
    service.member.info({
      name: members[i],
      company: "Cerberus",
    }, function(body) {
      addressList[i] = body.address;
      count++;

      if (count === members.length) {
        callback(addressList);
      }
    });
  }
}
</code></pre>

<p>There are also libraries for this sort of thing, like <a href="https://www.npmjs.com/package/async" rel="nofollow">async</a>:</p>

<pre><code>var async = require('async');

function getAddresses(members, callback) {
  async.map(members, function (member, callback) {
    service.member.info({
      name: member,
      company: "Cerberus",
    }, function (body) {
      callback(null, body.address);
    });
  }, callback);
}
</code></pre>

<p>But <a href="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Promise" rel="nofollow">promises</a> are really the best option if you’re able to use them consistently throughout your project, with a library like <a href="http://bluebirdjs.com/docs/getting-started.html" rel="nofollow">bluebird</a>:</p>

<pre><code>var bluebird = require('bluebird');

// This only works if the callback is really (err, body)
bluebird.promisifyAll(service.member);

function getAddresses(members) {
  return bluebird.map(members, function (member) {
    return service.member.infoAsync({
      name: member,
      company: "Cerberus",
    }).then(function (body) {
      return body.address;
    });
  })
}
</code></pre>

<p>They could take some learning, but they’re <em>the future of asynchronicity in JavaScript</em> or something, since right now you can do this (or you could, if <code>service.member.info</code> returned a promise) – note how close it is to your original loop:</p>

<pre><code>var bluebird = require('bluebird');

var getAddresses = bluebird.coroutine(function* (members) {
  var addressList = [];

  for (var i = 0; i &lt; members.length; i++) {
    var body = yield service.member.info({
      name: members[i],
      company: "Cerberus",
    });

    addressList.push(body.address);
  }

  return addressList;
});

// or, to run the loop in parallel:

var getAddresses = bluebird.coroutine(function* (members) {
  var operations = [];

  for (var i = 0; i &lt; members.length; i++) {
    operations.push(
      service.member.info({
        name: members[i],
        company: "Cerberus",
      })
    );
  }

  return (yield operations).map(body =&gt; body.address);
});
</code></pre>

<p>and one day, that might be simplified to this, but not yet:</p>

<pre><code>async function getAddresses(members) {
  var addressList = [];

  for (var i = 0; i &lt; members.length; i++) {
    var body = await service.member.info({
      name: members[i],
      company: "Cerberus",
    });

    addressList.push(body.address);
  }

  return addressList;
}
</code></pre>
    </div>