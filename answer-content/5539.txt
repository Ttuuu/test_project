<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There's no way any solution in c or c++ could be better than assembly (unless of course, it was horribly written). The answer with the assembly language from Jerry Coffin above...</p>

<pre><code>memcpyi80 proc dest:ptr byte src:ptr byte
    mov esi, src   ; load source address
    mov edi, dest  ; load destination address
    mov ecx, 20    ; initialize count register (80/4)
    rep movsd      ; perform transfer
memcpyi80 endp
</code></pre>

<p>cannot be improved upon, in my opinion, unless it's possible to use a smaller number larger operands. Naturally the memory addresses need to be aligned properly. The <code>rep movsd</code> instruction is the only part of the code that does any work, automatically incrementing the count register until the operation is complete.</p>

<p>What you might try is to pass the count as a separate parameter and then split the data into as many parts as you have cores, and call the function with a separate thread for each part.</p>
    </div>