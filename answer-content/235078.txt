<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>there was an issue with the code, I was obligated to add the <code>SQLException</code> to the method, since the code was not compiling otherwise.</p>

<p><strong>Before</strong></p>

<pre class="lang-java prettyprint-override"><code>//[...]
private void showGridDetails() {}
//[...]
</code></pre>

<p><strong>After</strong></p>

<pre class="lang-java prettyprint-override"><code>//[...]
private void showGridDetails() throws SQLException {}
//[...]
</code></pre>

<p>For the review, here what I suggest:</p>

<h2>SQL</h2>

<p>I suggest that you put an example of the table with false data and the name / kind (MySQL, Oracle, PostgreSQL) of the database that you are using, so we can have a better understanding of it.</p>

<h2>Code</h2>

<h3>Method <code>showGridDetails</code></h3>

<p>1) Extract the variable <code>selectQuery</code> into two constants, this will be better since it will make the code shorter and the string wonâ€™t be recreated each time the method is called.</p>

<pre class="lang-java prettyprint-override"><code>public static final String FIRST_QUERY = "SELECT * FROM table1 WHERE orig_setting = 1";
public static final String SECOND_QUERY = "SELECT * FROM table1 WHERE curr_setting = 1";
</code></pre>

<p>2) In my opinion, when I have multiples <code>java.lang.AutoCloseable</code> to chain, I prefer to have multiples <code>try</code>.</p>

<p><strong>Before</strong></p>

<pre class="lang-java prettyprint-override"><code>try (Connection connection = DriverManager.getConnection("DB Settings");
   Statement stmt = connection.createStatement();
   ResultSet resultSet = stmt.executeQuery(FIRST_QUERY);) {
                // [...]
} catch (Exception e) {
    throw e;
}
</code></pre>

<p><strong>After</strong></p>

<pre class="lang-java prettyprint-override"><code>try (Connection connection = DriverManager.getConnection("DB Settings")) {
    try (Statement stmt = connection.createStatement()) {
        try (ResultSet resultSet = stmt.executeQuery(FIRST_QUERY)) {
                    //[...]
        }
    }
} catch (Exception e) {
    throw e;
}
</code></pre>

<p>3) Instead of using the <code>Statement</code> and passing the parameter, I suggest that you use the <code>java.sql.PreparedStatement</code>. In my opinion, the <code>java.sql.PreparedStatement</code> is a better choice even if the parameter is hardcoded. This will offer better performances and security (SQL injection), if the parameter changes and comes from the user, external source, etc.</p>

<p>If you want more arguments, I suggest <a href="https://stackoverflow.com/questions/3271249/difference-between-statement-and-preparedstatement">Difference between Statement and PreparedStatement</a> on stackoverflow.</p>

<p>Examples: <a href="https://docs.oracle.com/javase/tutorial/jdbc/basics/prepared.html" rel="nofollow noreferrer">https://docs.oracle.com/javase/tutorial/jdbc/basics/prepared.html</a></p>

<pre class="lang-java prettyprint-override"><code>try (Connection connection = DriverManager.getConnection("DB Settings")) {
    try (PreparedStatement stmt = connection.prepareStatement(FIRST_QUERY)) {
        stmt.setInt(1, 1);

        try (ResultSet resultSet = stmt.executeQuery()) {
            while (resultSet.next()) {
                paramsDO = new Params();
                paramsDO.setParamId(resultSet.getInt("PARAM_ID"));
                paramsDO.setParam1(resultSet.getString("PARAM_1"));
                paramsDO.setParam2(resultSet.getString("PARAM_2"));
                paramsDO.setParam3(resultSet.getString("PARAM_3"));
                paramsDO.setParam4(resultSet.getString("PARAM_4"));
                paramsDO.setParam5(resultSet.getString("PARAM_5"));
                paramsDO.setParam6(resultSet.getString("PARAM_6"));
                paramsDO.setParam7(resultSet.getString("PARAM_7"));
//              key is the primary key(param_id)
                gridData.put(new Integer(paramsDO.getParamId()), paramsDO);
            }
        }
    }
} catch (Exception e) {
    throw e;
}

</code></pre>

<p>4) The creation of a new <code>Integer</code> is useless, since the <code>Params#paramId</code> is already an int.</p>

<p><strong>Before</strong></p>

<pre class="lang-java prettyprint-override"><code>gridData.put(new Integer(paramsDO.getParamId()), paramsDO);
</code></pre>

<p><strong>After</strong></p>

<pre class="lang-java prettyprint-override"><code>gridData.put(paramsDO.getParamId(), paramsDO);
</code></pre>

<p>5) Since the method is throwing the exception, both of the <code>catch</code> can be removed.</p>

<p>6) The initialisation of the variable <code>paramsDO</code> to null is useless, since it's updated (in the start &amp; second query).</p>

<p>7) You can use the <code>java.sql.Connection</code> for multiples statements.</p>

<pre class="lang-java prettyprint-override"><code>try (Connection connection = DriverManager.getConnection("DB Settings")) {
    try (PreparedStatement stmt = connection.prepareStatement(FIRST_QUERY)) {
        stmt.setInt(1, 1);

        try (ResultSet resultSet = stmt.executeQuery()) {
            while (resultSet.next()) {
                paramsDO = new Params();
                paramsDO.setParamId(resultSet.getInt("PARAM_ID"));
                paramsDO.setParam1(resultSet.getString("PARAM_1"));
                paramsDO.setParam2(resultSet.getString("PARAM_2"));
                paramsDO.setParam3(resultSet.getString("PARAM_3"));
                paramsDO.setParam4(resultSet.getString("PARAM_4"));
                paramsDO.setParam5(resultSet.getString("PARAM_5"));
                paramsDO.setParam6(resultSet.getString("PARAM_6"));
                paramsDO.setParam7(resultSet.getString("PARAM_7"));
                        // key is the primary key(param_id)
                gridData.put(paramsDO.getParamId(), paramsDO);
            }
        }
    }

    // This could return ~900 records
    // from this query, the 9th field is set based on the paramId
    try (PreparedStatement stmt = connection.prepareStatement(SECOND_QUERY)) {
        stmt.setInt(1, 1);
        try (ResultSet resultSet = stmt.executeQuery()) {
            while (resultSet.next()) {
                int currParamId = resultSet.getInt("PARAM_ID");
                paramsDO = gridData.get(currParamId);
                if (paramsDO != null)
                    paramsDO.setParam8(resultSet.getString("PARAM_8"));
            }
        }
    }
}
</code></pre>

<p>8) For the comments, I suggest that you use the <code>block-comment (/**/)</code> for the comments with more than one line.</p>

<p><strong>Edited code</strong></p>

<pre class="lang-java prettyprint-override"><code>
public static final String FIRST_QUERY = "SELECT * FROM table1 WHERE orig_setting = ?";
public static final String SECOND_QUERY = "SELECT * FROM table1 WHERE curr_setting = ?";

private void showGridDetails() throws SQLException {
    Params paramsDO;
    Map&lt;Integer, Params&gt; gridData = new HashMap&lt;&gt;();

        /*
          This could return ~1000 records
          In the Params object, 8 fields out of 9 are set with one field(param_id) being the primary key
        */
          try (Connection connection = DriverManager.getConnection("DB Settings")) {
            try (PreparedStatement stmt = connection.prepareStatement(FIRST_QUERY)) {
                stmt.setInt(1, 1);

                try (ResultSet resultSet = stmt.executeQuery()) {
                    while (resultSet.next()) {
                        paramsDO = new Params();
                        paramsDO.setParamId(resultSet.getInt("PARAM_ID"));
                        paramsDO.setParam1(resultSet.getString("PARAM_1"));
                        paramsDO.setParam2(resultSet.getString("PARAM_2"));
                        paramsDO.setParam3(resultSet.getString("PARAM_3"));
                        paramsDO.setParam4(resultSet.getString("PARAM_4"));
                        paramsDO.setParam5(resultSet.getString("PARAM_5"));
                        paramsDO.setParam6(resultSet.getString("PARAM_6"));
                        paramsDO.setParam7(resultSet.getString("PARAM_7"));
                        // key is the primary key(param_id)
                        gridData.put(paramsDO.getParamId(), paramsDO);
                    }
                }
            }

            /*
             This could return ~900 records
             from this query, the 9th field is set based on the paramId
            */
             try (PreparedStatement stmt = connection.prepareStatement(SECOND_QUERY)) {
                stmt.setInt(1, 1);
                try (ResultSet resultSet = stmt.executeQuery()) {
                    while (resultSet.next()) {
                        int currParamId = resultSet.getInt("PARAM_ID");
                        paramsDO = gridData.get(currParamId);
                        if (paramsDO != null)
                            paramsDO.setParam8(resultSet.getString("PARAM_8"));
                    }
                }
            }
        }
    }
<span class="math-container">```</span>
</code></pre>
    </div>