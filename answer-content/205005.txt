<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>don't change the input unless explicitly stated</h1>

<p><code>partial.sort()</code> works in-place. This might cause some nasty surprises for someone who uses this function and did not expect this.</p>

<p>The reason you sort this is also only to take the last element. <code>max(partial)</code> would suffice here. If partial is sorted, you can work with a different algorithm using the sortedness</p>

<h1>set comprehension</h1>

<p>a set comprehension is nice, but here a <code>set(range(partial[-1] + 1))</code> would suffice</p>

<h1><code>set.difference</code></h1>

<p>there is no need to cast <code>partial</code> to a <code>set</code></p>

<p>so the complete method reduces to </p>

<pre><code>return set(range(max(partial) + 1)).difference(partial)
</code></pre>

<h1>alternative method</h1>

<p>If <code>partial</code> is sorted, you can work with 2 iterators</p>

<pre><code>from itertools import count

def compare_to_complete_generator(partial):
    complete_iterator = count()
    partial_iterator = iter(partial)

    element_complete= next(complete_iterator)
    element_partial = next(partial_iterator)

    while True:
        while element_partial != element_complete:
            yield element_complete
            element_complete = next(complete_iterator)
        element_complete = next(complete_iterator)
        try:
            element_partial = next(partial_iterator)
        except StopIteration:
            return

list(compare_to_complete(partial))
</code></pre>

<blockquote>
<pre><code>[0, 5, 7, 9]
</code></pre>
</blockquote>

<p>For large lists, this has the advantage that you don't have to look for the <code>max</code> and construct a set with <code>max</code> elements. This also accepts any sorted iterable or iterator, not just lists. if the input is not sorted, you can use <code>sorted</code>, but then you lose the advantages of this method.</p>
    </div>