<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Inconsistent style</h3>

<p>The <code>getMin</code> function checks if the stack is empty, and the <code>top</code> function doesn't.
This inconsistency is confusing.
I'm not sure which way is better, but it's good to be consistent.</p>

<h3>Unnecessary and over-eager input validation</h3>

<p><code>push</code> checks if the parameter is a number, and quietly does nothing if it isn't.
If non-numbers should not be allowed, then it would be better to throw an exception than quietly ignore.
In any case, this check is not required by the exercise.</p>

<h3>Naming</h3>

<p>Instead of <code>repo</code>, it would be more natural to call it <code>stack</code>.
With the <code>push</code> and <code>pop</code> methods of JavaScript arrays,
the illusion is perfect.</p>

<h3>Building from common building blocks</h3>

<p>The second solution builds a secondary storage with the minimum values,
and makes some effort to avoid duplicates.
I'm not sure the extra effort is worth the added complexity.
It would be simpler to not try to avoid duplicates,
and simply add the pair of current and minimum values on every push.
Then, it becomes easy to see that an implementation is possible without reimplementing a stack: under the hood you can use a stack,
and the public methods simply encapsulate the transformations necessary for the underlying storage of value pairs.</p>

<pre><code>var MinStack = function() {
    this.stack = [];
};

MinStack.prototype.push = function(x) {
    const min = this.stack.length ? Math.min(this.getMin(), x) : x;
    this.stack.push([x, min]);    
};

MinStack.prototype.pop = function() {
    this.stack.pop()[0];
};

MinStack.prototype.top = function() {
    return this.stack[this.stack.length - 1][0];
};

MinStack.prototype.getMin = function() {
    return this.stack[this.stack.length - 1][1];
};
</code></pre>
    </div>