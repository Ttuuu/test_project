<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your code is fairly clean and easy to read and follow. But you should definitely think about not repeating yourself. Even just a single or two line - when you feel encouraged to copy/paste - don't! Make a method and call that from where needed.</p>

<hr>

<p>When you do something like this:</p>

<blockquote>
<pre><code>    EmployeeDataGridView.ColumnCount = 8;
    EmployeeDataGridView.Columns[0].Name = "Employee Name";
    EmployeeDataGridView.Columns[1].Name = "Zip Code";
    EmployeeDataGridView.Columns[2].Name = "Age";
    EmployeeDataGridView.Columns[3].Name = "Monthly Gross Pay";
    EmployeeDataGridView.Columns[4].Name = "Department ID";
    EmployeeDataGridView.Columns[5].Name = "Developer Type";
    EmployeeDataGridView.Columns[6].Name = "Annual Taxes";
    EmployeeDataGridView.Columns[7].Name = "Annual Net Pay";   
</code></pre>
</blockquote>

<p>there is obviously better ways that is easier to maintain - an array and a loop for  instance:</p>

<pre><code>  DataGridView employeeDataGridView = EmployeeDataGridView;

  string[] headers =         
  {
    "Employee Name",
    "Zip Code",
    "Age",
    "Monthly Gross Pay",
    "Department ID",
    "Developer Type",
    "Annual Taxes",
    "Annual Net Pay",
  };

  employeeDataGridView.ColumnCount = headers.Length;

  for (int i = 0; i &lt; headers.Length; i++)
  {
    employeeDataGridView.Columns[i].Name = headers[i];
  }
</code></pre>

<p>This is easier to maintain. A new column is just inserted in the <code>headers</code> list, and reordering can be done there too - in one place.</p>

<hr>

<blockquote>
<pre><code>//Method to determine developer type
string typeName;
public string SetDevType(int id)
{
  if (id == 1)
  {
    typeName = "Object-Oriented";
  }
  else if (id == 2)
  {
    typeName = "Scripts";
  }
  else { typeName = "Unknown"; }
  return typeName;
}
</code></pre>
</blockquote>

<p>Here the <code>typeName</code> field is placed outside the method. Why that? And you could use an <code>switch-case</code> statement instead of the <code>if</code>'s:</p>

<pre><code>public string SetDevType(int id)
{
  switch (id)
  {
    case 1:
      return "Object-Oriented";
    case 2:
      return "Scripts";
    default:
      return "Unknown";
  }
}
</code></pre>

<hr>

<p>user2156791 shows a good way to refactor the initialization of the grid, but it can be done even "tighter":</p>

<pre><code>private IEnumerable&lt;Employee&gt; LoadEmployees(string filePath)
{
  //Read from JSON file
  string JSONstring = File.ReadAllText(filePath);
  return JsonConvert.DeserializeObject&lt;IEnumerable&lt;Employee&gt;&gt;(JSONstring);
}

private void InitializeGrid(Func&lt;IEnumerable&lt;Employee&gt;, IEnumerable&lt;Employee&gt;&gt; employeeSelector)
{
  try
  {
    EmployeeDataGridView.Rows.Clear();

    IEnumerable&lt;Employee&gt; employees = LoadEmployees(@"JSON.json");
    if (employees == null)
      throw new NullReferenceException("Unable to read from the data source file");

    foreach (Employee employee in employeeSelector(employees))
    {
      string[] row =
      {
        employee.Name,
        employee.Zip,
        employee.Age.ToString(),
        string.Format("{0:C}", employee.Pay),
        employee.DepartmentId.ToString(),
        SetDevType(employee.DepartmentId),
        string.Format("{0:C}",
        employee.CalculateTax(employee.Pay)),
        string.Format("{0:C}", AnnualPay(employee.Pay) - employee.CalculateTax(employee.Pay))
       };

      EmployeeDataGridView.Rows.Add(row);
    }
  }
  catch (Exception ex)
  {
    MessageBox.Show(ex.Message);
  }
}

private void LoadAllButton_Click(object sender, EventArgs e)
{
  InitializeGrid(employees =&gt; employees);
}

private void FTEmployeeButton_Click(object sender, EventArgs e)
{
  InitializeGrid(employees =&gt; from emp in employees
                              where emp.GetTaxForm == "W2"
                              select emp);
}

private void ContractEmployeeButton_Click(object sender, EventArgs e)
{
  InitializeGrid(employees =&gt; from emp in employees
                              where emp.GetTaxForm == "1099"
                              select emp);
}
</code></pre>

<p>Here everything is only done in one place, and it's easy to maintain and extent or change. Because the data source is always the same a selector <code>delegate</code> is provided to <code>InitializeGrid()</code> instead of the entire source.</p>

<p>Futher: when interacting with the user through event handlers you should care about handling exceptions and errors and display appropriate messages to the user. A <code>try-catch</code> around everything is a place to start.</p>
    </div>