<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Welcome to CodeReview! I'll start by saying thank you for posting a somewhat-complex package of code. At first blush, your code appears to be written in the generally-accepted style and appears well organized and somewhat documented.</p>

<h1>Functionality</h1>

<p>Before I actually review the code, I'll point out that I tried to play the game. Here's my experience:</p>

<pre><code>Your color is: ○
     1 2 3 4 5 6 7 8

A   | |●| |●| |●| |●|   A
B   |●| |●| |●| |●| |   B
C   | |●| |●| |●| |●|   C
D   | | | | | | | | |   D
E   | | | | | | | | |   E
F   |○| |○| |○| |○| |   F
G   | |○| |○| |○| |○|   G
H   |○| |○| |○| |○| |   H

     1 2 3 4 5 6 7 8
Choose you checkerf1
Enter coordinatese1
Choose you checkerf1
Enter coordinatese2
Test Error
Your color is: ●
     1 2 3 4 5 6 7 8

A   | |●| |●| |●| |●|   A
B   |●| |●| |●| |●| |   B
C   | |●| |●| |●| |●|   C
D   | | | | | | | | |   D
E   | |○| | | | | | |   E
F   | | |○| |○| |○| |   F
G   | |○| |○| |○| |○|   G
H   |○| |○| |○| |○| |   H

     1 2 3 4 5 6 7 8
</code></pre>

<p>So I have some comments on the actual operation of the game :-). </p>

<h2>Playability</h2>

<p>First, the game board does not color black/white squares. This makes it harder to play, since the alternating colors help with distinguishing different rows/columns, as well as providing a visual crutch for understanding move possibilities.</p>

<p>Next, the coordinate system is perfectly functional, but not at all intuitive. I'd suggest you consider some alternatives, like labelling the individual checkers with letters A-L instead of circles. Similarly, you might consider enumerating the possible destinations for movement. Either explicitly (redraw the board with 1..4 markers) or implicitly (draw a compass rose with 1..4 on it alongside the board).</p>

<h2>Input/Output</h2>

<p>The prompt needs to include a space at the end. Otherwise, you get what I got:</p>

<pre><code>Choose you checkerf1
</code></pre>

<p>There is no indication of a help system. If someone doesn't know how to play checkers, or doesn't remember, how do they get help? Where are the rules of play?</p>

<p>If I enter a bad move, as I did, there's no rebuff message. Instead, just a new prompt. You should explain that my move is invalid, and either print a rule summary ("You must move 1 space diagonally, or jump over an enemy piece diagonally") or print an enumeration of valid moves for the piece.</p>

<p>I don't know what a <code>Test Error</code> is. But I'm pretty sure that it shouldn't be appearing during gameplay.</p>

<h1>Naming</h1>

<p>I have two comments on your file naming. First, instead of <code>game_loop.py</code> you should have named the file <code>checkers.py</code> or <code>main.py</code> (or <code>__main__.py</code>). Because there's nothing obvious about what game this is, just looking at the file names. I mean, <code>deck_and_cheez.py</code>? What game did you start writing before you switched to checkers?</p>

<p>Second, there just isn't that much code in these files:</p>

<pre><code>aghast@laptop:~/Code/so/checkers$ wc -l *py
  312 bot.py
  692 deck_and_cheez.py
   58 game_loop.py
 1062 total
</code></pre>

<p>Why not just move all the code into <code>checkers.py</code>? This isn't java, there's no requirement to have a bunch of little files laying around.</p>

<h1><code>game_loop.py</code></h1>

<h2>Structure</h2>

<p>Everything in this file should be in a function. Possibly a different function in a different class, but definitely in a function. The standard idiom for python scripts is this:</p>

<pre><code>def main():
    ... all the stuff that isn't in a function ...

if __name__ == '__main__':
    main()
</code></pre>

<p>Use this idiom. It makes it possible to do a bunch of things, including writing unit tests, that will benefit you. It doesn't cost much (just one line, and some tabs), and pays off quickly.</p>

<h2>Modularity</h2>

<p>What do I learn from this code? (I deleted some vertical space for convenience.) </p>

<pre><code>colors = ['○', '●']
deck = deck_and_cheez.Deck(random.choice(colors))
checker_pos = deck_and_cheez.CurrentChecker()
ALLIES = None
ENEMY = None

while True:
    print(f'Your color is: {deck.color}')
    deck.print_current_deck()

    if ALLIES is None:
        ALLIES = deck.color
    elif ENEMY is None:
</code></pre>

<p>Three things. First, is that your <code>deck_and_cheez.Deck</code> class is broken. Second, your <code>deck_and_cheez.CurrentChecker</code> class is even worse! Third, you aren't taking a broad enough view.</p>

<h2>class Deck</h2>

<p>A class is supposed to be self-sufficient. If you give it the required arguments at creation time, the returned instance will stand alone.</p>

<p>Let's look:</p>

<ul>
<li><p>Naming: checkers is a "board game". A better name for <code>Deck</code> would be <code>GameState</code> or <code>Board</code>. In English, a deck is either a floor on a ship, or an alias for a pack of cards. Poker and Pinochle are played with a Deck, while Checkers and Chess are played with a Board.</p></li>
<li><p>From the <code>colors = [...]</code> variable, you don't have a <code>Deck.COLORS</code> that provides this data to callers. Yet, this is a pretty important part of the <code>Deck</code> so why isn't it there?</p></li>
<li><p>From the <code>Deck(random.choice(colors))</code>, it seems you don't need to tell <code>Deck</code> what both colors are (you only pass in one color). Thus, I sense there is a second copy of the <code>colors = [...]</code> over in the <code>Deck</code> class somewhere. (In fact, it's worse. See below.)</p></li>
<li><p>The code to set <code>ALLIES</code> and <code>ENEMY</code> is determining the value of the random choice you passed in as a parameter. And the two "constants" are only used to determine whose turn it is to play. This could be a part of <code>Deck</code>. It also could be implemented in code, just by writing <code>player_turn() ; computer_turn()</code>.</p></li>
</ul>

<h3>Suggestions</h3>

<p>I don't think you need to "specify" a player color on creation of a new <code>Deck.</code> I think you should just randomly pick one, and make it available to users of the class:</p>

<pre><code>deck = Deck()
player_color, bot_color = deck.player_colors
</code></pre>

<p>Once you have the colors allocated inside <code>Deck,</code> you can write a method that cycles the player-turn tracking without having to pass in any parameters:</p>

<pre><code>deck.end_turn()
</code></pre>

<p>You should provide a mechanism for determining the end of the game. That could be a method on <code>Deck</code> or an exception raised by the turn handlers. Doing this makes the game loop clearer.</p>

<pre><code>while deck.in_progress:
</code></pre>

<p>or</p>

<pre><code>try:
    while True:
        player_turn()
        robot_turn()
except GameOver:
    pass
</code></pre>

<h2>class CurrentChecker</h2>

<p>This class is so low-key that I almost didn't catch it. Your usage model is that you create an instance of the class:</p>

<pre><code>checker_pos = deck_and_cheez.CurrentChecker()
</code></pre>

<p>and then later, during the human-player handling, you update it:</p>

<pre><code>checker = input('Choose you checker').upper()

if deck.check_position(checker):
    if deck.check_checker_pos(checker):
        current_checker = checker_pos.coord(checker)
</code></pre>

<p>Problematically, you are calling methods on the deck class before you update the <code>current_checker</code> instance.</p>

<h3>Suggestions</h3>

<p>This class doesn't do anything. Either delete it and just put all the functionality in the <code>Deck</code> class, or make it an internal class of the <code>Deck</code>. </p>

<p>Since you have most of the functionality implemented in <code>Deck</code> already, I suggest just deleting this class and letting the deck handle everything.</p>

<h2>Narrow View</h2>

<p>In your main loop, you are doing a bunch of things: </p>

<ul>
<li>Tracking the current-player</li>
<li>Invoking the player or bot turn code</li>
<li>Implementing the move input mechanics</li>
<li>Looping to validate input</li>
<li>Updating the state of the <code>Deck</code> at each turn</li>
</ul>

<p>To me, this says you need to work on the <code>Deck</code> class (see above), and also create another class or two. You need some code to handle player input mechanics and input validation logic. You need code to handle the simple gameplay mechanics. </p>

<p>I'd suggest creating a Player class, similar to the Bot class. Then you could just invoke the "play_turn()" method on two different objects.</p>

<p>The current-player problem can be solved by just calling players in sequence, as shown above. </p>

<p>The move mechanics and input validation are both part of the player interface. You could actually write different classes with different mechanics, and try them. Or make them play options, if you find that different people like different mechanics.</p>

<p>There should be no reason to update the deck state at the end of the turn. The deck should know enough about game play to update itself (it's just to track whose turn it is...).</p>

<h1>deck_and_cheez.py</h1>

<p>First, what's with the name? Why <code>and_cheez</code>?</p>

<h2>class Deck</h2>

<p>You have methods in this class that begin with <code>__</code>. Don't do this.</p>

<h3>print_current_deck</h3>

<p>Your <code>numbers</code> list should just be a string.</p>

<p>Your loop could use <code>enumerate</code> to eliminate the <code>letter_count</code> variable. </p>

<p>I'd suggest just hard-coding 10 print statements. It would be about the same length and would make the output more clear:</p>

<pre><code>print(f"\t 1 2 3 4 5 6 7 8\n")

print(f"A\t{'|'.join(self.deck[0])}\tA")
print(f"B\t{'|'.join(self.deck[1])}\tB")
...
</code></pre>

<p>But really, it isn't the job of this class to communicate with the user. So instead of printing anything, just join the strings with a newline and return the resulting string:</p>

<pre><code>return "\n".join(f"\t 1 2 3 4 5 6 7 8\n",
        f"A\t{'|'.join(self.deck[0])}\tA",
        ...)
</code></pre>

<h3>__coordinates</h3>

<p>Delete the '__'.</p>

<p>Rename this to express what it does: <code>parse_user_coordinates</code></p>

<p>Use <a href="https://docs.python.org/3/library/stdtypes.html?highlight=str%20index#str.index" rel="nofollow noreferrer"><code>str.index</code></a> to parse the input. It produces a more compact function:</p>

<pre><code>row = "ABCDEFGH".index(usr_inp[0].upper())
col = "12345678".index(usr_inp[1])

return (row, col)
</code></pre>

<p>This will raise an exception if either input character is not matched. I think that's a good way to return control to the code that's driving the user interface, but you may want to catch the exception and do something different.</p>

<h3>check_position</h3>

<p>This is redundant with the method above. You print error messages, but it isn't the job of this class to communicate with the user. Better, IMO, to return a value or raise an exception.</p>

<h3>calculate_possible_moves</h3>

<p>I don't understand this method. You spend a fair amount of code computing two variables that are local to the method. Then you return, without storing, processing, or returning those variables. </p>

<p>The code is not dead -- there are two references to this method. But I think it isn't doing anything.</p>

<h3>calculate_possible_move_for_check</h3>

<p>This function is described as "calculate". But your return values are boolean. This is not a calculation at all.</p>

<p>You use the color of the checker to determine a direction of movement. This means that the code applies to "men" but not to queens. <em>That</em> in turn suggests to me that you probably want to make the individual pieces members of a class, instead of just character strings. </p>

<p>Finally, the board is fixed in size. You should pre-compute the results of this function and store them in static data. That reduces the function to a lookup.</p>

<h3>attack</h3>

<p>You can use <a href="https://docs.python.org/3/tutorial/controlflow.html?highlight=unpacking" rel="nofollow noreferrer">unpacking</a> to assign multiple variables:</p>

<pre><code>u_x, u_y = *usr_inp
</code></pre>

<p>There are three possibilities for a square. You check two of them to make sure the third is true:</p>

<pre><code>if self.deck[u_x][u_y] != ' ' and self.deck[u_x][u_y] != self.color:
</code></pre>

<p>Just test for what you want:</p>

<pre><code>if self.deck[u_x][u_y] == self.color:
</code></pre>

<p>Checking for ' ' and for self.color at a target address suggests that your class needs more methods:</p>

<pre><code>if self.deck[u_x - 1][u_y + 1] == ' ':  # Up right
</code></pre>

<p>Could become:</p>

<pre><code>target = self.up_right_of(usr_inp)
if self.is_empty(target):
</code></pre>

<p>With function <code>self.is_enemy_of(color, location)</code> available as well.</p>

<p>If you write methods for the various directions, you can iterate over the methods, which should shorten this code a lot. Instead of separate sections for x+1, y-1 and x-1,y-1 and ..., just make a tuple and iterate over it:</p>

<pre><code>for direction in self.up_right_of, self.up_left_of, self.down_right_of, self.down_left_of:
    target = direction(usr_inp)
</code></pre>

<h3>move</h3>

<p>You behave in different ways based on some attribute of the data. That is a key indicator that you need a class. I suggest making two classes: "men" and "queens", and defining the <code>__str__</code> method to return the current string values.</p>

<p>This code is too complex:</p>

<pre><code>if self.color == '●' and cur_check in self.queen_list_w or self.color != '●' and cur_check in self.queen_list_b:
</code></pre>

<p>You check for (color is black) or (color is not black). That's always going to be true. Just delete the color discrimination, and check for membership in the queen lists.</p>

<p>But really, just make classes for the pieces and delete all this code.</p>

<h1>bot.py</h1>

<h2>class Bot</h2>

<p>There's a lot of redundant data stored in this class. You've got the deck, the checkers, enemy checkers, queens. All of which is also in the deck.</p>

<p>I suggest that you look hard at how you are using the data, and implement methods in the Deck class to provide that data instead.
This would mean data being in just one place, eliminating a source of error.</p>

<p>I'm going to skip further review of this, since I think the suggestion to create objects for the pieces and move the data back into the Deck class will change this class pretty much everywhere.</p>
    </div>