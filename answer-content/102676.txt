<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Your approach misses a few products</h1>

<p>For instance, replace the last row of your matrix with <code>99 99 99 99 ...</code>.
Clearly the maximal product should be <code>99*99*99*99 = 96059601</code>, but your approach doesn't find this solution. </p>

<p>You can only find this solution, when <code>i = 19</code>. But than you receive an <code>IndexError</code>, because your simultaneously calculate the product of <code>matrix[19,0] - matrix[22,0]</code>. </p>

<p>One way of handling this would be to compute each direction separately, each one with each own direction. </p>

<p>But of course you could put it back into a loop. For instance like this: </p>

<pre><code>for i in range(20):
    for j in range(20):

        for direction in ((0,1), (1,0), (1,1), (-1,-1)):
           try:
              product = 1
              for l in range(4):
                 product *= raw_matrix[i + direction[0]*l][j + direction[1]*l]
              if product &gt; initial_max:
                  initial_max = product
           except IndexError:
               pass

print initial_max
</code></pre>

<h1>No need for numpy-arrays</h1>

<p>I would get rid of numpy-arrays. Not really necessary, since you never use any matrix/vector operations. A standard 2D-list should be quite enough. 
The parsing of the matrix can also a bit simplified using List Comprehensions. </p>

<pre><code>raw_matrix = '''\
08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08
...
01 70 54 71 99 99 99 99 16 92 33 48 61 43 52 01 89 19 67 48'''

matrix = [map(int, line.split()) for line in raw_matrix.split('\n')]
</code></pre>

<p>Notice. I import the matrix as a multi-line string. Then I extract each line by splitting at new-lines. Then each line gets split by spaces and mapped to ints. </p>

<h1>Variable naming</h1>

<p>Well, kinda obvious. What does <code>S</code> stand for, why call the matrix <code>raw_matrix</code>. 
<code>raw_matrix</code> would be good name instead of <code>S</code>, because the matrix is still in raw form (string). And call the parsed matrix simply <code>matrix</code>. </p>

<p>Others renaming I would prefer: <code>i -&gt; row</code>, <code>j -&gt; column</code>, <code>initial_product -&gt; max_product</code>. </p>

<p>So all in all, here a improved version of your code: </p>

<pre><code>raw_matrix = '''\
08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08
49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00
81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65
52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91
22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80
24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50
32 98 81 28 64 23 67 10 26 38 40 67 59 54 70 66 18 38 64 70
67 26 20 68 02 62 12 20 95 63 94 39 63 08 40 91 66 49 94 21
24 55 58 05 66 73 99 26 97 17 78 78 96 83 14 88 34 89 63 72
21 36 23 09 75 00 76 44 20 45 35 14 00 61 33 97 34 31 33 95
78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92
16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57
86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58
19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40
04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66
88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69
04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36
20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16
20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54
01 70 54 71 99 99 99 99 16 92 33 48 61 43 52 01 89 19 67 48'''

matrix = [map(int, line.split()) for line in raw_matrix.split('\n')]

max_product = 0

for row in range(20):
    for column in range(20):
        for direction in ((0,1), (1,0), (1,1), (-1,-1)):
            try:
                product = 1
                for l in range(4):
                    product *= matrix[row + direction[0]*l][column + direction[1]*l]
                if product &gt; max_product:
                    max_product = product
            except IndexError:
                pass

print max_product
</code></pre>
    </div>