<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>(I wrote this months ago and forgot to post it, so it may no longer matter, but I'll post it anyway.)</p>

<p><code>wordsArray</code> is used for two different things. At first it's an array of words, but then it becomes an array of the words' values. This tends to be confusing, so it's better to use a new variable.</p>

<p>The first loop in <code>solution</code> goes through a list and collects an output value for each value in the list. Python has a special kind of loop for this: a <em>list comprehension</em>. It makes calculating <code>wordValues</code> very easy:</p>

<pre><code>wordValues = [calculate_total(w) for w in wordsArray]
</code></pre>

<p><code>open</code>'s mode defaults to <code>'r'</code>, so you don't need to specify it.</p>

<p>Apparently <code>calculate_total</code> expects each word to end (and also begin?) with <code>"</code>. Instead of skipping them in the loop, you can just remove them by <code>word[1:-1]</code> or <code>word.strip('"')</code>.</p>

<p><code>alphabet</code> is written out by hand instead of calculated. You could generate it automatically. But there's already a built-in function that does almost what <code>alphabet</code> does: <code>ord</code> returns the Unicode codepoint for a character. Can you find a way to use that to calculate the value of each letter?</p>

<p>Instead of iterating over the indexes of <code>word</code>, you can iterate over its characters directly, without mentioning the indexes:</p>

<pre><code>for c in word:
    total += alphabet[c.lower()]
</code></pre>

<p>But there's an even easier way: this loop computes the sum of a sequence of values. There's a built-in function for this: <code>sum</code>.</p>

<p>With <code>ord</code>, <code>sum</code> and a comprehension, it's possible to write <code>calculate_total</code> in one line.</p>
    </div>