<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><p>Use <code>std::vector&lt;std::string&gt;</code> instead C-style array for <code>possibleAnswers</code> and then pass a reference to the vector into the <code>checkInput</code> function.</p></li>
<li><p>If you will use <code>std::vector</code> you can use just <a href="http://en.cppreference.com/w/cpp/algorithm/find" rel="nofollow noreferrer"><code>std::find</code></a> to check if the input appears in the <code>possibleAnswers</code>.</p></li>
<li><p>Consider making <code>possibleAnswers</code> constant<sup>1</sup>. It is never change, is not it?</p></li>
<li><p>The <code>sizeof</code> operator returns a value of type <a href="https://en.cppreference.com/w/cpp/types/size_t" rel="nofollow noreferrer"><code>std::size_t</code></a> but you use <code>int length</code> to hold it. You should use <code>std::size_t</code> instead of <code>int</code> for the loop counters <code>i</code> inside the <code>checkInput</code> fucntion as well. Note that <code>int</code> is not guaranted to be large enough to hold a size of any object type (an array of <code>std::string</code> in your case).</p></li>
<li><p>It is a good habit to prefer pre-increment over post-increment all things being equal in C++ since the first usually is <a href="https://stackoverflow.com/questions/24901/is-there-a-performance-difference-between-i-and-i-in-c">faster</a>.</p></li>
<li><p>Do not comment your code too much. Anyone perfectly knows that <code>*</code> means <em>dereference</em>:</p>

<blockquote>
<pre><code>// dereference possibleAnswers pointer to the
//ith position of the array
if (input == *pointerPossibleAnswers)
</code></pre>
</blockquote>

<p>Make it a rule: "<em>Comments shouldn't say <strong>what</strong> happens in code, they should say <strong>why</strong> this is happens</em>".</p></li>
<li><p>You can easily restructure your code to get rid of the <code>isAsking</code> flag variable. All you have to do is explicitly return <code>input</code> when it equals to one of the possible answer.</p></li>
</ul>

<hr>

<p><sub><sup>1</sup> As mentioned @πάντα ῥεῖ in the comments if you'll decide to use to make <code>possibleAnswers</code> constant you may want to use <a href="https://en.cppreference.com/w/cpp/container/array" rel="nofollow noreferrer"><code>std::array</code></a>. But in this case you have to use templates to pass different sized arrays to the <code>possibleAnswers</code> function.</sub></p>
    </div>