<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Instead of asking <em>'did I use pattern X correctly?'</em>, I would ask <em>'does pattern X provide a good solution to my problem?'</em>. And to answer that question, you need to consider the requirements of your program. <em>Why</em> do you think this program needs strategies, services and factories?</p>

<h3>Model classes</h3>

<ul>
<li>Regarding your model classes, why do answers reference questions by their id? Note how this makes things more cumbersome for the caller: <code>Main</code> has to do extra work to match answers to questions.</li>
<li>Why do questions refer to their correct answer with a char? Not only is that inconsistent with the use of ids, it's also error-prone because it depends on the order in which answers are returned. Such labeling is probably best left to the UI layer, anyway.</li>
<li>Read-only properties don't need a private setter anymore: <code>{ get; }</code> is sufficient nowadays.</li>
</ul>

<p>I would go for the following (I've left out constructors for brevity's sake, and ids because they don't seem to be necessary):</p>

<pre><code>public class Question
{
    public string Content { get; }
    public IReadOnlyCollection&lt;Answer&gt; AvailableAnswers { get; }
    public Answer CorrectAnswer { get; }
}

public class Answer
{
    public string Content { get; }
}
</code></pre>

<p>Note that the <code>Answer</code> class now only contains a string, so you could remove it and store a collection of answer strings in <code>Question</code> directly, together with the index of the correct answer.</p>

<h3>Services</h3>

<ul>
<li>Why split questions and answers into two 'services'? Questions and answers are often, if not always, used together, so this split is making things more difficult than they need to be. It's also more error-prone, because now you need to keep two separate services in sync. I would merge these into a single question repository.</li>
<li>Both calculation 'service' implementations do the same work, more or less. I'd probably create some kind of <code>Result</code> class, that can be used to keep track of how many questions a user answered correctly and incorrectly. That'll give these calculation algorithms a higher-level overview, and reduces code duplication.</li>
<li>I'm not really sure whether abstracting the scoring mechanism is really useful, but I don't know what your plans are with this program, so I can't say much about that. That hard-coded <code>10</code> in <code>CalculationAnswerBySubtracting</code> does look problematic though - certainly that should be configurable?</li>
</ul>

<h3>Factories and constants</h3>

<ul>
<li>That factory class doesn't add any value over using <code>new</code> directly. If it's intended to simulate a DI container: normally you ask a container for a concrete implementation of an 'abstract' interface, not the other way around.</li>
<li>Those constants are verbose but don't really clarify anything. <code>Answers.A</code> and <code>'A'</code> are both equally vague ways to reference an answer. Labeling questions like this is a UI detail that shouldn't leak into the rest of the program. Besides, with these constants you pretty much hard-coded a limit of 4 answers per question, which seems like an unnecessary restriction.</li>
<li><code>AskQuestion</code> doesn't use those constants, and because their values are lower-case, not upper-case, this can result in seemingly valid inputs being rejected (try pressing shift + A instead of just hitting the A key).</li>
</ul>

<h3>Other notes</h3>

<ul>
<li>Personally I don't like those <code>Service</code> and <code>Factory</code> suffixes. I would use names like <code>IQuestionRepository</code> and <code>IScoreCalculator</code> - more descriptive, less cluttered.</li>
<li>In <code>foreach (var question in userAnswers)</code>, <code>question</code> isn't actually a <code>Question</code> but a key-value pair, so that name is a bit misleading. A dictionary is probably not the best way to pass this information around anyway - it doesn't preserve order, and you don't need its lookup functionality, you just need a collection of question-answer pairs.</li>
<li><code>GetAsnwers</code> 'returns' results by modifying one of its arguments... why doesn't it just return its results, which is how most programmers would expect it to work?</li>
<li>Using <code>Question</code> as a key in a dictionary, without overriding <code>Equals</code> and <code>GetHashCode</code>, can cause problems. Because right now you're not doing any key lookups with different (but equal) <code>Question</code> instances (no key lookups at all, in fact) the current code works fine, but this could easily cause problems in the future.</li>
</ul>
    </div>