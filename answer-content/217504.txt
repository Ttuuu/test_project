<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Hello and Welcome to Code Review!
There are two main concerns I have with your solution:
</p><hr>
<strong>Side Effects</strong>

<p>Your program has side effects outside of its scope: <code>Arrays.sort(arr)</code> When you call this function you are sorting the array object whose reference you have been passed. This means you are sorting the array that exists outside of your method scope, thus transforming any array you have been passed. </p>

<p>Since <code>Arrays.sort()</code> causes side effects, I'd recommend using <code>Arrays.copyOf()</code> to make a local copy, then sort the local copy.</p>

<p></p><hr>
<strong>Over-copying</strong>

<p>You use <code>Arrays.copyOf()</code> inside your for loop, meaning you are frequently copying and making new arrays. These memory operations are expensive, and unnecessary.</p>

<p>You copy a range, but check only the end points of the range. Would it not make more since to simply check the values that would otherwise become those endpoints? Essentially, while looping, maintain two indeces, the head and tail pointers(i and i+k-1), and check those values rather than creating a new copy. </p>

<p>A good way to view this approach: We are essentially maintaining a abstract sliding range of k elements, and starting at 0, we slide our range along the array, checking each endpoint for a minimum without the need to create concrete copies.</p>

<hr>

<p>With the above I reduced your solution to the below</p>

<pre class="lang-java prettyprint-override"><code>static int maxMin(int k, int[] arr) {
    int arrLen = arr.length;
    //1)Make Sorted Local Copy to prevent Side Effects
    int[] localArr = Arrays.copyOf(arr, arrLen);
    Arrays.sort(localArr);

    int minUnfairness = Integer.MAX_VALUE;
    //2)Loop while maintaining two pointers
    // NOTE: we use J instead to prevent side effects on the int k
    int i = 0;
    int j = k - 1;
    while(j &lt; arrLen){
        int tempMinUnfairness = localArr[j] - localArr[i];
        if ( tempMinUnfairness &lt; minUnfairness ) {
            minUnfairness = tempMinUnfairness;
        }
        i++;
        j++;
    }
    return  minUnfairness;
}
</code></pre>
    </div>