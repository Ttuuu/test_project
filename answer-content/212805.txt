<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First, I would not use Strings here to represent class types. Say you accidentally typo a class name:</p>

<pre><code>new Player("Hero", "Theif") // Whoops
</code></pre>

<p>Now <code>setAttributes</code> silently "fails" and doesn't set anything. You could manually handle bad cases like this, but now you're handling bad data at runtime that could have been caught at compile time.</p>

<p>If you have a limited set of options, create an <code>enum</code>:</p>

<pre><code>public enum PlayerClass {
    WARRIOR, PRIEST, MAGE, ... 
}
</code></pre>

<p>Then use it like:</p>

<pre><code>private PlayerClass player_class;

. . .

if(this.player_class == WARRIOR)) { ...
</code></pre>

<p>The immediate benefits are IDEs can help auto-complete enum names so typos are difficult to cause, <em>and</em>, if you do typo a name, it will fail with an error at compile time instead of having code-dependent effects at runtime.</p>

<p>This doesn't answer your main question, but it's an important point. Don't use Strings to mark "members of a set", like you're using in this case to mark members of the player class set.</p>

<hr>

<p>I'd refactor your class a bit to make dealing with class stats easier. I think <code>Player</code> is too big, with too many fields. I would create a <code>Stats</code> class:</p>

<pre><code>class Stats {
    public int hp;
    public int mp;
    public int strength;
    public int agility;
    public int resilience;
    public int deftness;
    public int charm;
    public int magical_mending;
    public int magical_might;

    // Copy constructor to make copying stats easier
    public Stats(Stats other) {
        this(other.hp, other.mp,
             other.strength, other.agility, other.resilience, other.deftness,
             other.charm, other.magical_mending, other.magical_might);
    }

    // This part sucks, but it's necessary in POD classes
    public Stats(int hp, int mp,
                 int strength, int agility, int resilience, int deftness,
                 int charm, int magical_mending, int magical_might) {

        this.hp = hp;
        this.mp = mp;
        this.strength = strength;
        this.agility = agility;
        this.resilience = resilience;
        this.deftness = deftness;
        this.charm = charm;
        this.magical_mending = magical_mending;
        this.magical_might = magical_might;
    }
}
</code></pre>

<p>Then create a mapping between class types and instances of stats:</p>

<pre><code>// "of" requires Java 9
Map&lt;PlayerClass, Stats&gt; classToStats = Map.of(
    PlayerClass.WARRIOR, new Stats(26, 4, 18, 4, 18, 5, 4, 0, 0),
    PlayerClass.PRIEST, new Stats(19, 14, 9, 14, 9, 9, 7, 18, 0)
    // ...
);
</code></pre>

<p>And use it in the player constructor:</p>

<pre><code>public class Player {
    private String name;
    private PlayerClass playerClass;
    private Stats stats;

    public Player(String name, PlayerClass playerClass) {
        this.name = name;
        this.playerClass = playerClass;

        // Using the copy constructor of Stats to prevent multiple players getting the same mutable stat object
        this.stats = new Stats(classToStats.get(playerClass));
    }

}
</code></pre>

<p>There's going to be bulk <em>somewhere</em> that decides what stats each class have. You just need to find how you can organize the bulk so it's readable and easier to deal with.</p>

<p>The main issue with this design choice is <code>hp</code> and <code>mp</code> are now a part of <code>Stats</code>, which feels a little odd since these are "fluid" values that can change often. Now to damage the player, you need to alter <code>player.stats.hp</code>. It may be better to change <code>hp</code> and <code>mp</code> in <code>Stats</code> to <code>maxHp</code> and <code>maxMP</code> (since you'd likely need to track those values anyways), then give <code>Player</code> back <code>hp</code> and <code>mp</code> fields that you alter as needed.</p>

<hr>

<p>And just a note, Java uses camelCase, not snake_case.</p>
    </div>