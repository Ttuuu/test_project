<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The answers so far do not address the big design issues properly</p>

<h1>Separate I/O from the internal data model</h1>

<p>You have a horrible mix between internal data representation and concrete I/O formatting. <code>grid</code> contains extra grid characters for output, on the other hand there is <code>drawGrid</code> handling the extra grid lines. This would not make it difficult to do a different output (graphic?) but also causes enormous pain in column indexing. The data representaion shall contain only cell values in a 3x3 matrix (you may stick to character representation). Drawing separators shall be pusehd to <code>drawGrid</code>.</p>

<pre><code>grid = [[" "," "," "],
        [" "," "," "],
        [" "," "," "]]
</code></pre>

<p>Before adapting <code>drawGrid</code> we have a look at the names which are not reflecting reality. the loop <code>for rows in grid:</code> shall be <code>for row in grid:</code> because it is a single row. likewise <code>for row in rows:</code> should be <code>for part in row:</code> as there are several data/spacing/separation parts in there. That said we change <code>drawGrid</code> to (still not perfect)</p>

<pre><code>def drawGrid(grid):
    #Show the grid to the user.
    for row in grid:
        print("+---+---+---+")
        print("| " + " | ".join(row) + " |")
    print("+---+---+---+")
</code></pre>

<p>We also have to remove all the column indexing offset stuff as grid is now a real representation of our data. Also we have to remove the spacing from the data values like <code>" X "</code> used to test/set values.</p>

<hr>

<p>Note: even in your representation it should not have been </p>

<pre><code>grid = [["|","   ","|", "   ","|", "   ","|"],
</code></pre>

<p>but</p>

<pre><code>grid = [["| "," "," | ", " "," | ", " "," |"],
</code></pre>

<hr>

<p>Note: whenever you have string literals used more than once define a variable and use that one in all tests and assignments. in case of a typo you are more likely to get an interpreter NameError while misspelled literals may cause really ugly bugs. so e. g. do</p>

<pre><code>player1 = " X "
# if player == " X ":
#     #Determine what to do based on the column selected.
#     if selectedColumn == 1:
#         #Check to see if a player is in the spot selected.
#         if row[selectedColumn] == " O " or row[selectedColumn] == " X ":
if player == player1:
    #Determine what to do based on the column selected.
    if selectedColumn == 1:
        #Check to see if a player is in the spot selected.
        if row[selectedColumn] == player2 or row[selectedColumn] == player1:
</code></pre>

<p>throughout your code</p>

<hr>

<p>after removing spacing (17 string constants) and column index offsets (12 times) we also hav to fix column indexing to be 0-based. If you have to present indexing to the user 1-based then do so. but always keep all internal indices 0-based so you can use them directly as list indices. We convert the user input immediately</p>

<pre><code>def getRow():
    # ...
    return row - 1

def getColumn():
    # ...
    return column - 1
</code></pre>

<p>we also fix all the column indices in <code>checkWinner</code> (where we find 9 winning cases which is one to many).</p>

<h1>Do not repeat yourself</h1>

<p>now we have a close look at <code>editGrid</code> as it looks now.</p>

<pre><code>def editGrid(grid, selectedRow, selectedColumn, player):
    row = grid[selectedRow]
    #Determine which player is editing the
    #grid.      
    if player == "X":
        #Determine what to do based on the column selected.
        if selectedColumn == 0:
            #Check to see if a player is in the spot selected.
            if row[selectedColumn] == "O" or row[selectedColumn] == "X":
                print("\nA player is already there.\n")
            else:
                row[selectedColumn] = player
        elif selectedColumn == 1:
            if row[selectedColumn] == "O" or row[selectedColumn] == "X":
                print("\nA player is already there.\n")
            else:
                row[selectedColumn] = player
        elif selectedColumn == 2:
            if row[selectedColumn] == "O" or row[selectedColumn] == "X":
                print("\nA player is already there.\n")
            else:
                row[selectedColumn] = player
    else:
        #Determine what to do based on the column selected.
        if selectedColumn == 0: 
            #Check to see if a player is in the spot selected.
            if row[selectedColumn] == "O" or row[selectedColumn] == "X":
                print("\nA player is already there.\n")
            else:
                row[selectedColumn] = player
        elif selectedColumn == 1:
            if row[selectedColumn] == "O" or row[selectedColumn] == "X":
                print("\nA player is already there.\n")
            else:
                row[selectedColumn] = player
        elif selectedColumn == 2:
            if row[selectedColumn] == "O" or row[selectedColumn] == "X":
                print("\nA player is already there.\n")
            else:
                row[selectedColumn] = player
</code></pre>

<p>there is not only to completely identical big clauses in the if-else but also inside the different cases are identical. the whole function collapses to</p>

<pre><code>def editGrid(grid, selectedRow, selectedColumn, player):
    row = grid[selectedRow]
    if row[selectedColumn] == "O" or row[selectedColumn] == "X":
        print("\nA player is already there.\n")
    else:
        row[selectedColumn] = player
</code></pre>

<p>while the big clauses were identical from the start the smaller cases did differ only because of the bad data representation.</p>

<h1>Avoid error prone repetition of constants</h1>

<p>now let's have a closer look at <code>checkWinner</code>. there is one diagonal checked twice, we delete that one. the cause for this error is editing by copy paste and altering values. with a little python list slicing and comprehension we can make this code shorter and thus less error prone</p>

<pre><code>def checkWinner(grid, player):
    flat = [cell for row in grid for cell in row]
    lines = grid + [flat[i::3] for i in (0,1,2)] + [flat[0::4]] + [flat[2::2][:3]]
    win = any(all(cell==player for cell in line) for line in lines)
    if win:
        print("\n" + player + "wins!")
    return win
</code></pre>

<h1>Again - do not repeat yourself</h1>

<p>okay, let's go further down the road. we find two functions <code>getRow</code> and <code>getColumn</code> where one is an obvious copy of the other. <code>getColumn</code> even prompts for a row <code>"Pick a row (1, 2, 3): "</code>. <strong>you shall not repeat yourself</strong> . While other cases of repeated code were cased by an initially bad choice regarding internal representation, this is a case without an excuse. as the functions are implemented one could safely call <code>getRow</code> for getting a column and vice versa. So we delete <code>getColumn</code> without replacement. If we wan to prompt for "Row" or "Column" we make that a parameter.</p>

<h2>some smaller repeated code</h2>

<p>we continue into <code>main</code> where we replaced the calls to <code>getColumn</code></p>

<pre><code>if numberOfTurns % 2 != 0:
    print("\nX's Turn")
    #Set who goes this turn and what
    #marker to use.
    player = "X"
    #Get input.
    row = getRow()
    column = getRow()
else:
    print("\nO's Turn")
    #Set who goes this turn and what
    #marker to use.
    player = "O"
    #Get input.
    row = getRow()
    column = getRow()
</code></pre>

<p>there we again see a lot of repeated code the only thing differing is the player. we refactor and pull some code outside the clause</p>

<pre><code>if numberOfTurns % 2 != 0:
    #Set who goes this turn and what
    #marker to use.
    player = "X"
else:
    player = "O"
print("\n" + player + "'s Turn")
#Get input.
row = getRow()
column = getRow()
</code></pre>

<p>still there is an if clause which we could make shorter. there are numerous techniques to toggle/select/cycle values from a limited set. here i am tempted to use a very lazy one (as the number of iterations is small)</p>

<pre><code>player = "_XOXOXOXOX"[numberOfTurns]
print("\n" + player + "'s Turn")
#Get input.
row = getRow()
column = getRow()
</code></pre>

<p><strong>unfortunately we find a big bug - if <code>editGrid</code> fails we switch user (and run out of player indices)</strong>. we fix that later.</p>

<p>we continue with</p>

<pre><code>if isWon == False and isTie == False:
    #Keep track of how many spaces
    #are taken up.
    tokenCounter = 0
    for rows in grid:
        for space in rows:
            #Determine if all there spaces
            #are taken up.
            if space == "X" or space == "O":
                tokenCounter += 1
    #Determine if there was a tie.
    if tokenCounter == 9 and isWon == False:
        isTie = True
        print("\nIt is a tie!\n")
</code></pre>

<p>first <code>isTie</code> will always be false here. A tied game would not have continued and the current tie status is still to be checked. Also there is something like a token counter already up to date (<code>numberOfTurns</code>). Again there is a superflous check <code>isWon == False</code> when the counter reaches 9. This could be reduced to</p>

<pre><code>if not isWon and numberOfTurns == 9:
    isTie = True
    print("\nIt is a tie!\n")
</code></pre>

<p>However there is good reason to have detecting a tie not depend on some variable intended for different use. it shall be a function (so you could e. g. detect a tie also before the grid is full).</p>

<pre><code>def isTied(grid):
    return all(" " not in row for row in grid)
</code></pre>

<p>we use like</p>

<pre><code>if not isWon and isTied(grid):
    isTie = True
    print("\nIt is a tie!\n")
</code></pre>

<hr>

<h1>Proper error handling</h1>

<p>so now the big bug. if we cannot place the player in <code>editGrid</code> we switch user. if something is an error report it to the caller. that does not mean to print something to the screen but to return an error condition or raise an error. Output to console shall be done from main only. so we refactor <code>editGrid</code> to return success and remove the print</p>

<pre><code>def editGrid(grid, selectedRow, selectedColumn, player):
    row = grid[selectedRow]
    if row[selectedColumn] == " ":
        row[selectedColumn] = player
        return True
    return False
</code></pre>

<p>while in <code>main</code> we check the success, print the error and repeat the input.</p>

<pre><code>player = "_XOXOXOXOX"[numberOfTurns]
while True:
    print("\n" + player + "'s Turn")
    #Get input.
    row = getRow()
    column = getRow()
    print()
    #Edit the gird with the values given.
    if editGrid(grid, row, column, player):
        break
    print("\nA player is already there.\n")
#Draw the edited grid.
drawGrid(grid)
</code></pre>

<h1>No I/O from core functions</h1>

<p>We already did remove a print from <code>editGrid</code>. We now do that for others as well. When you do print from core functions you either</p>

<ul>
<li>mix user I/O with core</li>
<li>do error/warning messages</li>
</ul>

<p>the first definitely do not belong there, this shall be done in main or in a UI. for the latter if no user interaction is required this could be logging. if requred it should be done on the dedicated UI. getting the message there could be via return values or more pythonic via raised exceptions.</p>

<p>so we remove the print from <code>checkWinner</code></p>

<pre><code>def checkWinner(grid, player):
    flat = [cell for row in grid for cell in row]
    lines = grid + [flat[i::3] for i in (0,1,2)] + [flat[0::4]] + [flat[2::2][:3]]
    win = any(all(cell==player for cell in line) for line in lines)
    return win
</code></pre>

<p>and move it to the UI (<code>main here)</code></p>

<pre><code>isWon = checkWinner(grid, player)
#Check the status of the game.
if isWon:
    print("\n" + player + "wins!")
</code></pre>

<p>finally we end up with</p>

<pre><code>#!/usr/bin/env python3

def drawGrid(grid):
    #Show the grid to the user.
    for row in grid:
        print("+---+---+---+")
        print("| " + " | ".join(row) + " |")
    print("+---+---+---+")

def editGrid(grid, selectedRow, selectedColumn, player):
    row = grid[selectedRow]
    if row[selectedColumn] == " ":
        row[selectedColumn] = player
        return True
    return False

def checkWinner(grid, player):
    flat = [cell for row in grid for cell in row]
    lines = grid + [flat[i::3] for i in (0,1,2)] + [flat[0::4]] + [flat[2::2][:3]]
    win = any(all(cell==player for cell in line) for line in lines)
    return win

def isTied(grid):
    return all(" " not in row for row in grid)

#Ask the user which column to occupy.
def getRow():
    while True:
        #Catch any invalid data.
        try:
            row = int(input("Pick a row (1, 2, 3): "))
            #Check the validity of the input
            #data.
            while row &lt; 1 or row &gt; 3:
                print("Please enter an integer bewteen 1 and 3. Try again.")
                row = int(input("Pick a row (1, 2, 3): "))
            return row-1
        except ValueError:
            print("Please input an integer between 1 and 3. Try again.")

def main():
    print("Welcome to Tic Tac Toe\n")
    #Assume the user wants to play.
    userChoice = "y"
    while userChoice.lower() == "y":
        #Form the grid
        grid = [[" "," "," "],
                [" "," "," "],
                [" "," "," "]]
        drawGrid(grid)
        #Set the default number of turns.
        numberOfTurns = 1
        isWon= False
        isTie = False
        #Run until someone wins or it ties.
        while isWon == False and isTie == False:
            #Catch any errors with the input.
            player = "_XOXOXOXOX"[numberOfTurns]
            while True:
                print("\n" + player + "'s Turn")
                #Get input.
                row = getRow()
                column = getRow()
                print()
                #Edit the gird with the values given.
                if editGrid(grid, row, column, player):
                    break
                print("\nA player is already there.\n")
            #Draw the edited grid.
            drawGrid(grid)
            #Determine if the programs needs to terminate.
            isWon = checkWinner(grid, player)
            #Check the status of the game.
            if isWon:
                print("\n" + player + "wins!")
            if not isWon and isTied(grid):
                isTie = True
                print("\nIt is a tie!\n")

            #Next players goes.
            numberOfTurns += 1
        print("Round over!\n")
        userChoice = input("Do you want to play another round? (y / n) ")
        while userChoice.lower() != "y" and userChoice.lower() != "n":
            print("Please type \"y\"  or \"n\". Try again.")
            userChoice = input("Do you want to play another round? (y / n) ")
        print()
    print("Bye!")

if __name__ == "__main__":
    main()
</code></pre>

<p>we have</p>

<ul>
<li>eliminated a bad data model</li>
<li>removed duplicate code</li>
<li>fixed a serious bug (and a smaller one)</li>
<li>got a separation between user interface and core functionality</li>
</ul>

<p>Todos left:</p>

<ul>
<li>write some test cases</li>
<li>extract game logic from main

<ul>
<li>still to complex</li>
<li>make it testable</li>
</ul></li>
<li>improve some code (now locally)</li>
</ul>
    </div>