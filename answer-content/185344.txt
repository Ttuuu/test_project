<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><p>Kudos for figuring out the correct algorithm.</p>

<p>However you can streamline it by <em>not</em> using a <code>v</code> vector:</p>

<p>You correctly treated an operation <code>a, b, k</code> as a pair of operations: add <code>k</code> from <code>a</code> to the end, and subtract <code>k</code> from <code>b+1</code> to the end. Now, instead of storing them in <code>v</code>, collect decoupled operations in a vector of their own. Sort it by index. <code>std::partial_sum</code> it, and find the maximum in the resulting array.</p>

<p>This will drive the space complexity down from \$O(n)\$ to \$O(m)\$, and change the time complexity from \$O(n+m)\$ to \$O(m\log m)\$. According to constraints, the time complexity seems to be better. One should also keep in mind that accesses to <code>v</code> could be all over the place with no particular order, and a well crafted sequence of operations may incur too many cache misses. I didn't profile though.</p></li>
<li><p>It is possible that spelling the loop out (rather than using <code>for_each</code> and lambda) would improve readability.</p></li>
<li><p>The algorithm would fail if <code>k</code> was allowed to be negative. Even it is not the case, it still is a good habit to initialize <code>max</code> and <code>x</code> to <code>v[0]</code>, and start the loop at <code>v.begin() + 1</code>.</p></li>
</ul>
    </div>