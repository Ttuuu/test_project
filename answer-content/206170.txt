<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Programming 8-bitters in C is tricky, particularly when dealing with antique ones like Z80. The things you absolutely must consider are:</p>

<ul>
<li>Keep to 8 bit arithmetic whenever possible.</li>
<li>Ensure that no bitwise arithmetic is done on signed <code>int</code> types. This means that you need to understand the common <a href="https://stackoverflow.com/questions/46073295/implicit-type-promotion-rules">Implicit type promotion rules</a> of C.</li>
<li>32 bit arithmetic should be avoided like the plague. And let's not even mention floating point.</li>
</ul>

<p>If you don't keep the above in mind, then the theoretic efficiency of the algorithm be damned. Thus you cannot allow a PC programmer to design it, because they don't understand how an 8-bit MCU works.</p>

<hr>

<p>Regarding your posted code: </p>

<ul>
<li><p>It suffers from using lots of 16 bit arithmetic, that the compiler cannot likely optimize well.</p></li>
<li><p><code>((flash[idx + 1]) &lt;&lt; 8);</code> invokes undefined behavior, if <code>flash</code> is an <code>uint8_t</code> with the MSB set. This is a bug caused by implicit integer promotion to <code>int</code>.</p></li>
<li><p>Using signed hex literals on a 8/16 bit MCU is dangerous, because up to <code>0x7FFF</code> they are of type <code>int</code>, but above that they are of type <code>unsigned int</code>. Therefore, you should make a habit of always appending an <code>u</code>/<code>U</code> suffix to them.</p></li>
</ul>

<p>Assuming that <code>flash</code> is an array of <code>const uint8_t</code> corresponding to something in flash memory, and assuming that the 6 middle bits should be preserved, not zero-out, then you should do something like this:</p>

<pre><code>// assuming Z80 Little Endian:
uint8_t lo = flash[idx];
uint8_t hi = flash[idx+1];

uint8_t lo_shift = (lo &amp; B_MASK) &lt;&lt; 3;
uint8_t hi_shift = (hi &amp; R_MASK) &gt;&gt; 3;

lo = (lo &amp; 0xE0u) | hi_shift;
hi = (hi &amp; 0x07u) | lo_shift;

uint16_t color = ((uint16_t)hi&lt;&lt;8) | lo;
</code></pre>

<p>This will allow the compiler to perform as much arithmetic as possible on 8 bit integers. There are implicit promotions to <code>int</code>, but such promotions are not dangerous, as we don't shift data in/out of the sign bit of a 16 bit <code>int</code>. And the <code>u</code> suffix will kill off any accidental promotions, since it guarantees <code>uint16_t</code> in case of 16 bit arithmetic.</p>

<p>To get rid of "magic numbers":</p>

<pre><code>#define R_MASK 0xF8u
#define B_MASK 0x1Fu

uint8_t lo = flash[idx];
uint8_t hi = flash[idx+1];

uint8_t lo_shift = (lo &amp; B_MASK) &lt;&lt; 3;
uint8_t hi_shift = (hi &amp; R_MASK) &gt;&gt; 3;

lo = (lo &amp; (uint8_t)~B_MASK) | hi_shift;
hi = (hi &amp; (uint8_t)~R_MASK) | lo_shift;

uint16_t color = (uint16_t)hi &lt;&lt; 8 | lo;
</code></pre>
    </div>