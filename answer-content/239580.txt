<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>the posted code is ignoring the returned values from <code>scanf()</code> <code>fscanf()</code>, and <code>system()</code>  </p>

<p>Critical success/fail information is contained in those returned values, so the code should be checking those returned values</p>

<p>Please read <a href="https://stackoverflow.com/questions/5431941/why-is-while-feof-file-always-wrong">why while(!feof(ed)) is always wrong</a></p>

<p>suggest replacing:</p>

<pre><code>while(!feof(ed))
    {
        fscanf(ed, "%d %f ", &amp;list[*loc].empid, &amp;list[*loc].hrswrkd);
</code></pre>

<p>with:</p>

<pre><code>while( fscanf(ed, "%d %f ", &amp;list[*loc].empid, &amp;list[*loc].hrswrkd) == 2 ) {
</code></pre>

<p>Much better to use the returned value from <code>fscanf()</code> to control the loop</p>

<p>regarding:</p>

<pre><code>ed = fopen("Employee Data.txt", "r");
if(loc != NULL)
</code></pre>

<p>What about when the call to <code>fopen()</code> fails?</p>

<p>in function: <code>menu2()</code>  the call to <code>readfile()</code> should contain a parameter that indicates the max number of 'slots' that can be filled, so the array of <code>structs bus bslist[SIZE];</code> is not overflowed. </p>

<p>regarding:</p>

<pre><code>else{
                goto end;
</code></pre>

<p>a <code>goto</code> is (almost) always a bad idea.  Suggest fixing the code logic so no <code>goto</code> is needed</p>

<p>Please do not use  for indenting as everyone's editor can be set for different tab widths.  Strongly suggest using 4 spaces where there are current  characters</p>

<p>regarding:</p>

<pre><code>system("pause");
system("cls");
</code></pre>

<p>the shell commands: <code>pause</code> and <code>cls</code> are not portable. so if you want this code to run on anything but Windows, please use more generic methods</p>

<p>regarding:</p>

<pre><code>case 5:
            main();
            break; 
</code></pre>

<p>DO NOT call the function: <code>main()</code>  rather use some kind of looping construct</p>

<p>regarding:</p>

<pre><code>end:
        exit(0);
</code></pre>

<p>do you really want to exit the whole program?</p>

<p>regarding:</p>

<pre><code>fflush(stdin);
</code></pre>

<p>The function: <code>fflush()</code> is for output streams, not input streams.  The C standard specifically states using <code>fflush()</code> on a input stream is undefined behavior.  Some compilers, like <code>visual c</code> allow it, but such deviations from the C standard should not be used.  Suggest:</p>

<pre><code>int ch;
while( (ch = getchar()) != EOF &amp;&amp; ch != '\n' ){;}
</code></pre>

<p>regarding:</p>

<pre><code> printf("Welcome to the Employee menu menu.\n\n");
 printf("Please select an option:\n\n1: Add Employee information\n2: View Employee information\n3: Update Employee information\n4: Delete Employee information\n5: Return to login menu\n6: Exit\n");
</code></pre>

<p>it is best to honor the right margin, amongst other reasons, so the code can easily be printed.</p>

<p>Suggest:</p>

<pre><code>printf("Welcome to the Employee menu.\n\n");
printf("Please select an option:\n\n"
    "1: Add Employee information\n"
    "2: View Employee information\n"
    "3: Update Employee information\n"
    "4: Delete Employee information\n"
    "5: Return to login menu\n"
    "6: Exit\n");
</code></pre>

<p>which makes it much more readable and does honor the right margin</p>

<p>For ease of readability and understanding:  </p>

<ol>
<li>follow the axiom: <em>only one statement per line and (at most) one variable declaration per statement.</em>  </li>
<li>separate code blocks: <code>for</code> <code>if</code> <code>else</code> <code>while</code> <code>do...while``switch</code> <code>case</code> <code>default</code> via a single blank line.  </li>
<li>separate functions by 2 or 3 blank lines (be consistent)</li>
</ol>
    </div>