<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'm pretty sure you implemented the necessary features in a standard hash table. If you want the hash table to populate only unique values then you need to change your <code>insert</code> method by looking up the value before inserting it.</p>

<p>Here are some things you did incorrectly or can do better in my opinion:</p>

<pre><code>table = [None] * 256
</code></pre>

<p><code>table</code> is static right now, which means that any instance of the class will have the same table variable. You need to initiate it in <code>__init__</code>.</p>

<pre><code>def get_value(self, key):
</code></pre>

<p><code>get_value</code> is a method that should not be called by the user of the class. I recommend making is private by changing its name to <code>_get_value</code>.</p>

<pre><code>def insert(self, key):
    val = self.get_value(key)
    if self.table[val] == None:
        self.table[val] = key
    else:
        if type(self.table[val]) == list:
            self.table[val].append(key)
        else:
            self.table[val] = [self.table[val], key]
</code></pre>

<p>Why starting with a single value and only after that changing to a list? I recommend starting with a list right from the start. As said by python's module <code>this</code>: </p>

<blockquote>
  <p>Special cases aren't special enough to break the rules.</p>
</blockquote>

<p>That way, you can start with a table of empty lists right from the start, this will simplify your insert and lookup methods.</p>

<pre><code>def delete(self, key):
    val = self.get_value(key)
    if self.table[val] != None:
        if type(self.table[val]) == list:
            i = self.table[val].index(key)
            self.table[val][i] = None
</code></pre>

<p>Making the value None can be dangerous - what if the user inserts lot's of values and then removes all of them? the <code>lookup</code> method will then take much more time than required. Although it takes more time, I still think <code>list.remove</code> is the right thing to do here.</p>

<pre><code>    ...
    else:
        KeyError()
</code></pre>

<p>You need to <code>raise</code> the KeyError. Also - it's better to put in the error the right message. something like:
<code>raise KeyError("key {key} can't be found.".format(key=key)</code></p>
    </div>