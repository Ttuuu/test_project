<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You should consider using consistent indentation when writing code - it makes it much easier for people to read (not only for other maintainers, but for you as well). For example</p>

<pre><code>let loop = 0;
for (; loop &lt; 155; loop++) {
let n = 00;
// ...
zz ="00";
        if (loop &gt; 0 ) {
        x+=loop;
    console.log('one loop ' + loop );
</code></pre>

<p>should be something like</p>

<pre><code>let loop = 0;
for (; loop &lt; 155; loop++) {
  let n = 00;
  // ...
  zz ="00";
  if (loop &gt; 0 ) {
    x+=loop;
    console.log('one loop ' + loop );
</code></pre>

<p>Lots of IDEs provide an automatic tidying function.</p>

<p>In this section, since you aren't using <code>str2</code>, <code>str3</code>, or <code>str4</code>, you may as well remove those assignments from the inside of the loop here, since they aren't used and only add to cognitive overhead.</p>

<p>Best to always declare variables before you use them - you have a number of variables which are not declared, which will either assign to properties of the global object (in sloppy mode), or will throw an error (in strict mode). (Consider always using strict mode so that these sorts of potential bugs can be fixed early.) Specifically, lines like:</p>

<pre><code>str1 = "https://site.com/content/2018/02/"; /* groups 1-155*/
</code></pre>

<p>where you use a variable for the first time should be prefixed with <code>const</code>, <code>let</code>, or <code>var</code>:</p>

<pre><code>const str1 = "https://site.com/content/2018/02/"; /* groups 1-155*/
</code></pre>

<p>If you're going to use ES2015 syntax to declare some variables like <code>let</code> (which is great, you should), don't use <code>var</code> anywhere; <code>var</code> has numerous potential gotchas which can cause bugs, and doesn't really have anything positive going for it (other than compatibility with ancient browsers - but if you need that sort of compatibility, use <a href="https://babeljs.io/" rel="nofollow noreferrer">Babel</a> to transpile to ES5 automatically - best to keep source code in readable, pretty, modern syntax).</p>

<p>When you have a <code>for</code> loop, if you need to declare a variable at the beginning that's then used inside that loop, you should put the declaration inside the <code>for</code> loop declaration. That is:</p>

<pre><code>let loop = 0;
for (; loop &lt; 155; loop++) {
</code></pre>

<p>should be</p>

<pre><code>for (let loop = 0; loop &lt; 155; loop++) {
</code></pre>

<p>You have</p>

<pre><code>let n = 00;
let x = 000;
</code></pre>

<p>Leading zeros have no effect in numeric literals. Those are equal to</p>

<pre><code>let n = 0;
let x = 0;
</code></pre>

<p>You declare the <code>zz</code> variable 3 times, but you only have one binding for it - duplicate variable declarations with <code>var</code> are ignored. If you just want <em>assignment</em>, then <em>only</em> use the assignment operator with <code>=</code>.</p>

<p>The <code>x</code> variable starts at 0 and gets <code>loop</code> assigned to it once, on every iteration:</p>

<pre><code>let x = 0;
// ...
if (loop &gt; 0) {
  x += loop;
</code></pre>

<p>So, it's equivalent to <code>loop</code>. Best to just remove that variable completely, since it isn't doing anything useful - use the one <code>loop</code> variable completely. The <code>if (loop &gt; 0) {</code> test is superfluous too, since the tests inside that block <code>if(x &gt;= 9){</code> <code>if(x &gt;= 99){</code> are only fulfilled if <code>loop</code> is greater than 0 anyway.</p>

<p>Use meaningful variable names. It is very difficult to tell at a glance what <code>loop</code>, <code>n</code>, <code>x</code>, <code>z</code>, or <code>zz</code> are meant to represent. Maybe call them <code>group</code> (the number that goes from 1 to 155) and <code>subgroup</code> (the number that goes from 1 to 11) instead.</p>

<p>The main block there is meant to ensure that the <code>zz</code> variable for padding the string has the right number of zeros. But there's a much easier way to do that, without creating extra variables: just use <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/padStart" rel="nofollow noreferrer"><code>String.prototype.padStart</code></a>. When you need to construct</p>

<pre><code>000_01
154_12
</code></pre>

<p>from variables 0 and 1, and from variables 154 and 12, add the leading zeros by calling <code>padStart(length, '0')</code> on them:</p>

<pre><code>`${String(group).padStart(3, '0')}_${String(subgroup).padStart(2, '0')}`
</code></pre>

<p>Or, without a template literal:</p>

<pre><code>String(group).padStart(3, '0') + '_' + String(subgroup).padStart(2, '0')
</code></pre>

<p>The loop over <code>subgroups</code> (or <code>n</code> in your original code) assigns a variable and increments it every iteration, breaking after a condition. This is a prime spot to be refactored into a <code>for</code> loop instead:</p>

<pre><code>for (let subgroup = 1; subgroup &lt;= 12; subgroup++) {
</code></pre>

<p>Since the <code>str1</code> never changes, and nor does the <code>ext</code>, you may as well declare them outside of the loop, rather than re-declare them every time there's another iteration:</p>

<p>In full:</p>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>'use strict';

const str1 = "https://site.com/content/2018/02/"; /* groups 1-155*/
const ext = ".jpg"
for (let group = 0; group &lt; 155; group++) {
  console.log('one loop ' + group);
  for (let subgroup = 1; subgroup &lt;= 12; subgroup++) {
    console.log(`${str1}${String(group).padStart(3, '0')}_${String(subgroup).padStart(2, '0')}${ext}`);
  }
}</code></pre>
</div>
</div>

    </div>