<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Because I don't think you will add some binary prettifier, I would rename <code>ICodeStringPrettifier</code> and <code>CodeStringPrettifier</code> to <code>ICodePrettifier</code> and <code>ICodePrettifier</code>. It makes the names a little bit shorter and other developers wouldn't need to guess if there will be a <code>CodeBinaryPrettifier</code> as well.  </p>

<hr>

<p>To make the remaining code a little bit more pretty how about using some <code>Linq</code> ? 
The start of the method could look like so  </p>

<pre><code>public CodeString Prettify(CodeString original)
{
    var originalPosition = original.CaretPosition.StartColumn;
    var originalNonSpacePosition = original.Code
                                           .Take(originalPosition)
                                           .Count(c =&gt; c != ' ');

    _module.DeleteLines(original.SnippetPosition.StartLine);
    _module.InsertLines(original.SnippetPosition.StartLine, original.Code);
    var prettifiedCode = _module.GetLines(original.SnippetPosition);
</code></pre>

<p>In this way we can remove the <code>originalCode</code> as well. </p>

<p>As VisualMelon stated in his/her answer extracting the second loop to a separate method would shorten the <code>Prettify()</code> method as well. Another way could be to not count <code>prettifiedNonSpacePosition</code> but to decrease the <code>originalNonSpacePosition</code> and check if it equals <code>0</code> to break out of the loop like so  </p>

<pre><code>    var index = 0;
    for (var i = 0; i &lt; prettifiedCode.Length; i++)
    {
        if (prettifiedCode[i] != ' ')
        {
            originalNonSpacePosition--;
            if (originalNonSpacePosition == 0)
            {
                index = i;
                break;
            }
        }
    }
</code></pre>
    </div>