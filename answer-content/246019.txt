<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Global state</h2>
<p>This:</p>
<pre><code># Counter for the id of each item (folders and urls)
ID = 1
</code></pre>
<p>has issues. It will prevent your code from being re-entrant. Instead, this should either be passed around in your function parameters, or made a member of a class.</p>
<h2>Type hints</h2>
<pre><code>def indexer(item, index):
</code></pre>
<p>could stand to get some type hints. Probably <code>index: int</code>, return value is <code>-&gt; int</code>, and <code>item</code> is a <code>: dict</code>. However,</p>
<ol>
<li>You're better off using <code>Dict[str, ???]</code> - I don't know what the values are; and</li>
<li>You're even better off representing the item not as a dictionary, but as a more strongly-typed class instance - maybe a <code>@dataclass</code>, or at least a named tuple - to gain confidence that your data are valid and your code is correct.</li>
</ol>
<h2>Enums</h2>
<p>Another aspect of strengthening your types is to reframe this:</p>
<pre><code>item.get("type") in ["url", "folder"]:
</code></pre>
<p>as an <code>Enum</code>. Also, you shouldn't <code>in</code>-compare to a list; do it to a <code>set</code> literal instead, i.e. <code>{'url', 'folder'}</code>. This will work equally well for strings or enums.</p>
<h2>Generators</h2>
<p>Consider replacing this:</p>
<pre><code>    data = []
    for child in node:
        data.append(folder)
    return data
</code></pre>
<p>with</p>
<pre><code>for child in node:
    yield folder
</code></pre>
<p>It's easier to write, and will use up less memory - though the last bit will only matter if you're processing millions of these.</p>
<h2>Returns from main</h2>
<pre><code>def main(bookmarks_file):
    return bookmarks
</code></pre>
<p>This means that your <code>main</code> isn't really a <code>main</code>; something else (that you unfortunately haven't shown) is calling it. This method needs to be renamed, and your <em>actual</em> <code>main</code> needs to call it.</p>
    </div>