<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Efficiency</h1>
<p>There are several parts in your program that all take time:</p>
<ul>
<li>Reading two files.</li>
<li>Allocating memory (input vectors and output vector).</li>
<li>Performing the XOR loop.</li>
<li>Writing one file.</li>
</ul>
<p>Reading and writing are probably the most expensive parts, because they require IO, but that part can not be removed. Another aspect is parsing and formatting, which might be improved a bit, but I wouldn't bother with this at the moment. For the future, an as you mentioned yourself, memory-mapping the raw bytes would probably be the fastest way.</p>
<p>Allocating memory and the algorithm are a different beast. You run through the input files to build up the two vectors. Then, you run through the vectors and perform an algorithm on the pairwise elements. Finally, you discard the two vectors again. The relevant point to observe is that you only need each element once and exactly in the order that they occur in the input file. So, you can simplify this part by just reading two elements and then writing the result of the XOR. That way, you only need two local variables and no memory allocation for the vectors. This is the first optimization I'd try.</p>
<p>Concerning your question what performance to expect, my gut feeling is similar to yours, that 4s is too long. However, this depends a lot on the computer you use. What you could do to find out is to write a benchmark. Simply write 1M zeros and ones to a file and measure how long that takes. Similarly, just read the files, immediately discarding each value. Compare that to reading and storing the data in a vector as well. With these numbers, you should get a better feeling what to expect and also which part takes how much time.</p>
<h1>Further Notes</h1>
<ul>
<li>It's not really clear what your code expects as input format and output format. You are using <code>istream_iterator&lt;char&gt;</code>, which takes single characters. However, it still skips whitespace. I guess you don't expect any whitespace within the files, but that isn't obvious.</li>
<li>Another aspect of this is that you blow up a <code>char</code> to a <code>int</code>. This quadruples the memory requirement without any benefit. Further, and that's really bad, you take a letter (like "1" or "0"), then treat it as integer (with ASCII encoding, that's 49 and 48) and finally write integers to the output. This is confusing and I'm not even sure it is what you intended. It also makes me wonder if you have tests. If you don't get it right, it's useless if it runs fast!</li>
<li>When opening the output file fails, you output a message and blindly continue doing something that can never succeed. You should have thrown an exception there.</li>
<li>The same applies to opening the input files. If that fails, throw an exception.</li>
<li>The case that the two files have different numbers of elements is not really handled. Again, throw an exception.</li>
<li>Don't create objects/variables that you only need much later. In this case, this applies e.g. to the output vector. It applies to the output file as well, although this could be defended, because it avoids costly operations that can't succeed anyway (see comment above). It also applies to the iterators used in the loops.</li>
<li>You are sometimes documenting what your code does, like "Open result file", "creating iterator" and "printing all elements". This isn't helpful, since anyone can see what that does. In the third case, it is even a lie, because nothing is printed! This is typical beginners' behaviour and will vanish automatically once you're more familiar with the language, so don't worry about it too much. As a general rule, the "what?" comments are useless. The "how?" comments are sometimes important, though you should strive to make it clear from the code. The most important ones are the "why?" comments, because those document decisions you made.</li>
<li>Look up "range based <code>for</code> loops" (<code>for (auto e : some_vector) {...}</code>), which would reduce your code a bit.</li>
</ul>
    </div>