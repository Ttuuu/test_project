<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>more simply api, way not exist.</p>

<p>1.) wrong return type - <code>MODULEENTRY32</code>. really impossible return structure, which not fit generic register size. when compiler view <code>T fn(..) { * }</code> it silently change this to <code>void fn(T* t, ...) {*}</code> and in your code <code>Entry</code> will be copied, what really not need. you must not try return <code>MODULEENTRY32</code> but pass pointer to it as function argument.</p>

<p>2.) you lost error value. the <code>GetModule</code> can fail by different reasons - can not exist process with such id (<code>STATUS_INVALID_CID</code>), you can fail open target process (<code>STATUS_ACCESS_DENIED</code>), module can simply not exist in process. without returned error value - you can not know reason why function fail. really the best practice always return win32 error code (or <code>NTSTATUS</code>) from function.</p>

<p>3.) why you use module name as ansi string ? this is always bad and error design. use unicode name format. and you will be not need convert it (i already not say that if module name (this is rarely and never for system modules) use non english chars - it can not have correct ansi name at all(and depend from system locale - you encode it on self comp in one locale, on another comp - can be another locale. but ansi name depend from it).</p>

<p>4.) so signature of function must be <code>ULONG GetModule(DWORD th32ProcessID, MODULEENTRY32* Entry, PCWSTR szModule)</code></p>

<p>5.) use <code>wcscmp</code> is wrong here. we need case insensitive compare. - <code>_wcsicmp</code></p>

<p>6.) <em>Return the module base 0x0 if we don't find any module</em> - how i say - we need return appropriate error code in this case, instead set base address at 0 (we can left it undefined). client code must check not base address for 0, but error code for 0 (<code>NOERROR</code>).</p>

<p>7.) not forget about 32-64 bit issues here (are your and target process have some bit-ness)</p>

<p>so code can look like:</p>

<pre><code>ULONG GetModule(DWORD th32ProcessID, MODULEENTRY32* Entry, PCWSTR szModule)
{
    HANDLE hSnapshot = CreateToolhelp32Snapshot(TH32CS_SNAPMODULE, th32ProcessID);

    if (hSnapshot != INVALID_HANDLE_VALUE)
    {
        ULONG dwError = ERROR_NOT_FOUND;

        Entry-&gt;dwSize = sizeof(MODULEENTRY32);

        if (Module32FirstW(hSnapshot, Entry))
        {
            do 
            {
                if (!_wcsicmp(Entry-&gt;szModule, szModule))
                {
                    dwError = NOERROR;
                    break;
                }
            } while (Module32NextW(hSnapshot, Entry));
        }

        CloseHandle(hSnapshot);

        return dwError;
    }

    // return RtlGetLastNtStatus(); 
    // this is much more better compare GetLastError();
    return GetLastError();
}
</code></pre>

<p>and usage:</p>

<pre><code>MODULEENTRY32 Entry;
if (ULONG dwError = GetModule(*, &amp;Entry, L"*"))
{
    // error, dont touch Entry
}
else
{
    //ok, use Entry
}
</code></pre>
    </div>