<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>One of the reasons your script is slow is that you're building an array:</p>

<pre><code>primes.append(attempt)
</code></pre>

<p>Over time, the array will become quite large and the performance degrades. Since the answer you're looking for is a singular value, why not optimize out the need to have an array:</p>

<pre><code>def is_prime(n):
    if n &lt; 2:
        return False
    i = 2
    while (i * i &lt;= n):
        if n % i == 0:
            return False
        i = i + 1
    return True

def n_prime(n):
    i = 2
    while n &gt; 0:
        if is_prime(i):
            n = n - 1
            if n == 0:
                return i
        i = i + 1
    return -1

    print n_prime(10001)
</code></pre>

<p>In your routine, you implement <code>is_prime(n)</code> by checking if it's divisible by primes you've found before it. Whereas, I've reduce the complexity by checking to see n is divisible by the integers in 2..sqrt(n). i.e. I'm lazily checking with non-primes as well, but, I've optimize the search by only checking up to sqrt(n).</p>

<p>Then we just iterate call <code>is_prime(i)</code> in a loop until we've encountered n-primes.</p>

<p>For your specific problem, the answer is 104743.</p>
    </div>