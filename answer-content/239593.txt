<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Wrong compare</strong></p>

<p><code>fgetc()</code> returns an <code>int</code> with the value of <code>EOF</code> or something in the <code>unsigned char</code> range.  Although <code>EOF</code> is commonly -1, it is not specified as so.</p>

<pre><code>    int c = fgetc(fp);
    // if(c == -1)
    if(c == EOF)
</code></pre>

<p><strong>Useless cast</strong></p>

<p>The 2nd cast is not needed as <code>c</code> is in the <code>unsigned char</code> range so there is no value change.  Before the <code>~</code> is applied, the <code>(unsigned char)c</code> is converted to <code>int</code>.  No value nor type change --&gt; cast not needed.</p>

<pre><code>// result += (unsigned char)~(unsigned char)c;
result += (unsigned char)~c;
</code></pre>

<p>The first cast not needed either <em>there</em>.  <code>result += (unsigned char)~c;</code> is same as <code>result = result + (unsigned char)~c;</code>.  Both <code>result</code> and <code>(unsigned char)~c</code> are promoted to <code>int</code> before the addition.  The cast in <code>(unsigned char)~c</code> does not affect the end result.</p>

<p>A cast is useful just before the assignment to quiet <code>int</code> to <code>unsigned char</code> warnings.  Suggest the following:</p>

<pre><code>// result += (unsigned char)~c;
result = (unsigned char) (result + ~c);
</code></pre>

<p><strong>Clarity</strong></p>

<p>Alternative that, IMO, is more clear.</p>

<pre><code>// hchk == (unsigned char)-1
hchk == UCHAR_MAX
</code></pre>

<p><strong>Strange format specifier choice</strong></p>

<p>Unclear why code uses <code>"%hx"</code>.  Usually that is for <code>unsigned short</code>.</p>

<pre><code> unsigned char hchk;
 ...
// printf("%hx\n", hchk);
printf("%hhx\n", hchk);
// or
printf("%x\n", hchk);  // the hh is not truly needed, but it does add some clarity
</code></pre>

<p><strong>Wrong error test</strong></p>

<p>"on failure, the fgetpos function returns nonzero"</p>

<pre><code>// if(fgetpos(fp, &amp;pos) == -1)
if(fgetpos(fp, &amp;pos))
</code></pre>

<p>Note: good use of <code>fsetpos(), fgetpos()</code>, versus <code>fseek(), ftell()</code>.  Unclear why code uses <code>fseek()</code> elsewhere.</p>

<p><strong>Performance</strong></p>

<p><code>header_checksum()</code> calls <code>fgetc()</code> to perform a checksum.  There is non-trivial overhead per call.  Consider re-write with a block of memory, say 256 or 4096, and <code>fread()</code>.</p>

<p>The back and forth of reading <em>Global checksum</em> looks easy to do in one pass.</p>

<p><strong><code>main()</code> has too many details</strong></p>

<p>I'd recommend making more helper functions.</p>

<p><strong>Minor</strong></p>

<p><code>(size_t)size</code> relies on <code>SIZE_MAX &gt;= LONG_MAX</code>.  Common, but not certain.  File sizes are not limited to <code>SIZE_MAX</code>.</p>
    </div>