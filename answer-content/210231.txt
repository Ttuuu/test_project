<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here are a number of things that may help you improve your program.</p>

<h2>Eliminate global variables where practical</h2>

<p>Having routines dependent on global variables makes it that much more difficult to understand the logic and introduces many opportunities for error.  For this program, it would be easy and natural to wrap nearly all of the global variables in a <code>struct</code> to make it clear which things go together.  Then all you need is to pass around a pointer to that <code>struct</code>.  In some case, such as <code>x</code>, it could simply be put as a local variable into functions that uses that variable.  Even better, in the case of <code>t</code>, it can be eliminated entirely because <code>time(NULL)</code> will do what you need.</p>

<h2>Eliminate unused variables</h2>

<p>This code declares variables <code>px</code> and <code>py</code> but then does nothing with them.  Your compiler is smart enough to help you find this kind of problem if you know how to ask it to do so.</p>

<h2>Use more whitespace to enhance readability of the code</h2>

<p>Instead of crowding things together like this:</p>

<pre><code>for(y=0;y&lt;=row;y++){
    for(x=0;x&lt;=col;x++){
</code></pre>

<p>most people find it more easily readable if you use more space:</p>

<pre><code>for(y = 0; y &lt;= row; y++) {
    for(x = 0;x &lt;= col; x++) {
</code></pre>

<h2>Don't Repeat Yourself (DRY)</h2>

<p>There is a <em>lot</em> of repetitive code in this and some peculiar variables such as <code>space_1</code> through <code>space_9</code>.  This could be greatly improved by simply using an array <code>space[9]</code> and using index variables to step through those spaces.  A similar thing could be done with the overly long <code>f_evaluate_turn()</code> function.</p>

<h2>Return something useful from functions</h2>

<p>The way the functions are currently written, most return <code>void</code> but this prevents simplifying the code.  For example, instead of this:</p>

<pre><code>f_player_turn();
f_evaluate_turn();
if(game_over == 0){
    f_AI_turn();
    f_evaluate_turn();
}
</code></pre>

<p>You could write this if each turn evaluated itself and returned <code>true</code> if the game is not yet over:</p>

<pre><code>if (f_player_turn()) {
    f_AI_turn();
}
</code></pre>

<h2>Use better naming</h2>

<p>Some of the names, such as <code>game_over</code> and <code>running</code> are good because they are descriptive, but others, such as <code>sx</code> don't give much hint as to what they might mean.  Also, using the <code>f_</code> prefix for all functions is simply annoying and clutters up the code.</p>

<h2>Use a better random number generator</h2>

<p>You are currently using </p>

<pre><code>which = rand() % 3;
</code></pre>

<p>There are a number of problems with this approach. This will generate lower numbers more often than higher ones -- it's not a uniform distribution.  Another problem is that the low order bits of the random number generator are not particularly random, so neither is the result.  On my machine, there's a slight but measurable bias toward 0 with that.  See <a href="http://stackoverflow.com/questions/2999075/generate-a-random-number-within-range/2999130#2999130">this answer</a> for details, but I'd recommend changing that to something like those shown in the link.  It doesn't matter a great deal in this particular application, but it's good to know generally.</p>

<h2>Create and use smaller functions</h2>

<p>This code could be much shorter and easier to read, understand and modify if it used smaller functions.  For example, using a function like this consistently would greatly improve the readability of the code:</p>

<pre><code>void place(int x, int y, char ch) {
    switch (ch) {
        case ' ':
            attron(COLOR_PAIR(BG));
            mvprintw(y, x, " ");
            attroff(COLOR_PAIR(BG));
            break;
        case 'X':
            attron(COLOR_PAIR(Xs));
            mvprintw(y, x, "X");
            attroff(COLOR_PAIR(Xs));
            break;
        case 'O':
            attron(COLOR_PAIR(Os));
            mvprintw(y, x, "O");
            attroff(COLOR_PAIR(Os));
            break;
    }
}
</code></pre>
    </div>