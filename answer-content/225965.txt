<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Review</h3>

<ul>
<li>I see no reason to have 3 constructors, each invoking the other, when two of them are private and only called by another constructor. Keep it simple.</li>
<li>You check for  <code>if (Nodes == null)</code> in the constructor. Is there a scenario where this reference could have already been created upfront?</li>
<li>Constructor arguments should be camel cased.</li>
<li>There is no point in initializing <code>idName</code> and <code>name</code> because they get overwritten by the constructor chain.</li>
<li>Call <code>OnPropertyChanged</code> with <code>nameof(IsChecked)</code> rather than <code>"IsChecked"</code>. Or perhaps with a lambda <code>OnPropertyChanged(x =&gt; x.IsChecked)</code>. This avoids nasty typo's and is more robust against future changes.</li>
<li>Property <code>Nodes</code> has a public setter. Check the value against null, and navigational integrity (nodes can not be descendants, ancestors, self or children of a different parent).</li>
<li>Property <code>Parent</code> should not have a public setter. Private would do fine here. This way, you avoid consumers messing with the navigational integrity of the tree.</li>
<li><code>PropertyChanged?.Invoke(this, args)</code> is a cleaner way of invoking the event.</li>
<li>Method <code>GetNode</code> does not use any instance state or behavior, so it should be made <em>static</em>.</li>
<li>Method <code>GetParent</code> is void, which is uncommon for a method named <code>Get*</code>. Its method body is also empty, which is even more uncommon :) What is the purpose of this method?</li>
<li>Method <code>Add</code> is public and accepts a parameter. I bet the parameter is not allwoed to be null. Check it against null and throw an appropriate exception.</li>
<li>Finish the implementation of the class. Don't throw <code>NotImplementedException</code> for methods you should definitely implement.</li>
</ul>
    </div>