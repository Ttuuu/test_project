<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'm pretty happy that you've gone the extra mile to take a simple exercise and make it your own. That truly shows a lot of programming potential and initiative. While python code isn't restricted to any type of casing, let's use the more conventional <code>snake_case</code> for this review.</p>

<p>There are a few times where you print a menu with multiple options. One idea to improve your code would be to write a reusable method that handles the redundancies of a numbered menu:</p>

<pre><code>def numbered_menu(options):
    print("Do you want to:\n")
    for i, option in enumerate(options):
        print(f"\t{i + 1}. {option}")
    input("&gt; ")

# usage example
numbered_menu(["Celsius to Fahrenheit", "Fahrenheit to Celsius", "Exit"])
</code></pre>

<p>This method makes it easy to make a <code>numbered_menu</code> any time you need to print a bunch of options a user can choose from. There are a few fancy python things that may seem new to a reader, so let's break them down. The method <code>enumerate</code> is a convenient method that allows us to iterate with both the index and item of a list; <code>i</code> is the index, and <code>option</code> is the item in the list. Here we want to print the number of the option and the option itself, so <code>enumerate</code> is exactly what we want.</p>

<p>Another tricky doodad is the <code>f""</code> string. The <code>f</code> is short for <em>formatted string</em>. Assuming you are using at least python 3.6, a formatted string allows you to write python code directly in a string. That braced <code>{i+1}</code> executes like python code embedded when the string is formatted. This line is equivalent to:</p>

<pre><code>print(str(i + 1) + ". " + option)
</code></pre>

<p>However, many would argue that the f-string syntax is more pythonic.</p>

<p>While we're at it...</p>

<pre><code>def menu(options):
    user_choice = None
    while user_choice not in options:
        print("Do you want to:\n")
        for key, (option, action) in options.items():
            print(f"{key}. {option}")
            user_choice = input("&gt; ")
    return options[user_choice][1]

# usage example
menu({
    "1": ("Celsius to Fahrenheit", CtoF_Calc),
    "2": ("Fahrenheit to Celsius", FtoC_Calc),
    "q": ("Exit", lambda *args: None) # because q is the first letter in exit
})()
</code></pre>

<p>We have achieved python zen. With a fully declarative menu, we can make user menus with minimalist code. This is a dictionary of of tuples. The <code>.items()</code> method is similar to <code>enumerate</code>, but this one gives us the dict keys on the left and the dict values on the right. Since our dict values are tuples the <code>(option, action)</code> syntax destructures the tuples.</p>
    </div>