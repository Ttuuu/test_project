<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>General</h1>
<p>I like the presentation.  It's easy to read, with good use of whitespace and <em>useful</em> comments.</p>
<hr>
<h1>Width</h1>
<p>It's inconvenient to have to recompile to use a larger width <code>HugeInt</code>, and impossible to mix sizes.  Consider making <code>numDigits</code> a template parameter (and use an unsigned type for it - perhaps <code>std::size_t</code>).</p>
<p>If we template the width, then we'll have a bit of work to do to support promotions between different width values, but you'll find that good exercise.</p>
<h1>Conversions</h1>
<p>If this were my code, I think I'd make the <code>char*</code> constructor <code>explicit</code>.  The one taking <code>long int</code> seems reasonable to accept as implicit.</p>
<p>Consider adding an <code>explicit operator bool()</code> to allow idiomatic tests such as <code>if (!num)</code>.</p>
<h1>Comparisons</h1>
<p>Implementing the relational operators in terms of subtraction misses an opportunity: if we find a difference in the high-order digits, there's no need to examine the rest of the number.  I'd consider writing a simple <code>&lt;=&gt;</code> function, and using that to implement the public comparisons.  (In C++20, you'll be able to implement <code>operator&lt;=&gt;()</code> and the compiler will then produce all the rest for you).</p>
<h1>Streaming</h1>
<p>We're missing an operator <code>&gt;&gt;</code> to accept input from a standard stream.</p>
<p>When streaming out, we might be able to produce two digits at a time if we carefully manage leading zeros - that will reduce the number of divisions by around 50%.</p>
<hr>
<h1>Missing <code>std::</code> qualifier</h1>
<p>A lot of the C Standard Library identifiers are missing their namespace prefix (e.g. <code>std::abs</code>, <code>std::strlen</code>, etc).  These should be specified, as these names are not guaranteed to also be in the global namespace.</p>
<h1>Overflow bug</h1>
<blockquote>
<pre><code>long int xp{std::abs(x)};
</code></pre>
</blockquote>
<p>On twos-complement systems, <code>LONG_MIN</code> is greater in magnitude than <code>LONG_MAX</code>, so we fail to convert <code>LONG_MIN</code> correctly.</p>
<h1>Internationalisation</h1>
<p>This loop embodies a specific locale convention:</p>
<blockquote>
<pre><code>for (int j = i - 1; j &gt;= 0; --j) {
    if (j &lt; i - 1) {
        if ((j + 1) % 3 == 0) // show thousands separator
        {
            oss &lt;&lt; ','; // thousands separator
        }
    }
</code></pre>
</blockquote>
<p>That's fine for European English, but isn't a good match for Indian English, for example.  I believe we can get information from the locale's <code>std::numpunct</code> facet, but I don't know the details.</p>
<p>I worry that writing separators by default (and with no option to disable) may be a poor choice unless we update our string-to-number conversion to be able to ignore separators - I'm much more comfortable when a round-trip will work.</p>
<h1>Input handling</h1>
<p>I know it's only meant to be illustrative, but here we need to check the status of <code>std::cin</code> before repeating the loop:</p>
<pre><code>do {
    std::cout &lt;&lt; "Enter a non-negative integer (0-200): ";
    std::cin &gt;&gt; inum;
} while (inum &lt; 0 || inum &gt; 200);
</code></pre>
<p>If I give <code>-1</code> as input (and nothing else), the program enters an infinite loop, because the closed stream never changes <code>inum</code> to an acceptable value.  For a simple program like this, perhaps it's simplest to arrange the stream to throw on EOF, and possibly on other errors.</p>
    </div>