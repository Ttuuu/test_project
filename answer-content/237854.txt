<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Repetition</h1>

<p>You write:</p>

<pre><code>discriminant = b ** 2 - 4 * a * c
</code></pre>

<p>followed by:</p>

<pre><code>    if discriminant == 0:
        x_one = (-b + sqrt(b ** 2 - 4 * a * c)) / (2 * a)   # x_one
        ...
    if discriminant &gt; 0:
        x_one = (-b + sqrt(b ** 2 - 4 * a * c)) / (2 * a)  # x_one
        ...
        x_two = (-b - sqrt(b ** 2 - 4 * a * c)) / (2 * a)  # x_two
        ...
</code></pre>

<p>Any reason why you don't use <code>sort(discriminant)</code>?</p>

<p>This continues in <code>quadratic_function</code>, with:</p>

<pre><code>if b ** 2 - 4 * a * c &gt;= 0:
    ...
    x1 = (-b + sqrt(b ** 2 - 4 * a * c)) / (2 * a)
    x2 = (-b - sqrt(b ** 2 - 4 * a * c)) / (2 * a)
</code></pre>

<h1>Repetition (reprise)</h1>

<pre><code>    a = float(eval(input("insert a: ").replace("pi", str(pi))))
    b = float(eval(input("insert b: ").replace("pi", str(pi))))
    c = float(eval(input("insert c: ").replace("pi", str(pi))))
</code></pre>

<p>Looks like you could use a common function here:</p>

<pre><code>def query_float(prompt):
    return float(eval(input(prompt).replace("pi", str(pi))))

    a = query_float("insert a: ")
    b = query_float("insert b: ")
    c = query_float("insert c: ")
</code></pre>

<h1>Repetition (reprise, reprised)</h1>

<pre><code>        if eval(fraction(x_one)) % 1 == 0:
            print("x1 is : ", x_one)
        else:
            print("x1 is : ", fraction(x_one))
</code></pre>

<p>This block of code appears 3 times (once with <code>x_two</code>).  In the process of executing the block, it calls <code>fraction(x_one)</code>, which is a time-consuming search function, looping through up to 100 divisors, trying to find one that works.  Then, the resulting fraction expression is evaluated, and if it is not an integer, <code>fraction(x_one)</code> is again called, despite having been already computed moments earlier!</p>

<p>If <code>fraction()</code> simply returned the "value", instead of "value/1", when <code>factor == 1</code>, then the caller would simply:</p>

<pre><code>        print("x1 is : ", fraction(x_one))
</code></pre>

<h1>Stop or Continue</h1>

<p>It is unclear why the user would answer <code>"a"</code> or <code>"b"</code> to the question <code>input("Stop?: ")</code>.  </p>
    </div>