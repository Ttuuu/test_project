<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The following is a profiling run of all of the methods I've seen above, with some improvements to the I/O.</p>

<pre><code>from io import StringIO
from timeit import timeit
from sys import stdout, stderr
import numpy as np


def justin(n):
    a = []

    for i in range(n):
        a.append([])
        a[i].append(1)

        for j in range(1, i):
            a[i].append(a[i - 1][j - 1] + a[i - 1][j])
        if n != 0:
            a[i].append(1)

    for i in range(n):
        print("   " * (n - i), end=" ", sep=" ")

        for j in range(0, i + 1):
            print('{0:5}'.format(a[i][j]), end=" ", sep=" ")
        print()


def josay(n):
    def generate_pascal():
        p = []
        for i in range(n):
            line = [1]
            if i:
                prev_line = p[-1]
                for j in range(1, i):
                    line.append(prev_line[j - 1] + prev_line[j])
                line.append(1)
            p.append(line)
        return p

    def print_pascal(p, end=" ", sep=" "):
        for i, line in enumerate(p):
            print("   " * (n - i), end=end, sep=sep)
            for e in line:
                print('{0:5}'.format(e), end=sep, sep=sep)
            print()

    print_pascal(generate_pascal())


def neufeld_pascals_triangle(n):
    row = [1]
    yield row
    for _ in range(n - 1):
        row = [1] + [x + y for x, y in zip(row[:-1], row[1:])] + [1]
        yield row


def neufeld(n):
    for i, r in enumerate(neufeld_pascals_triangle(n)):
        print(("   "*(n-i) + "{:6}"*(i+1)).format(*r))


def neufeld_stdout(n):
    for i, r in enumerate(neufeld_pascals_triangle(n)):
        stdout.write(('   '*(n-i-1) + '{:&lt;6}'*(i+1) + '\n').format(*r))


def neufeld_noenum(n):
    for r in neufeld_pascals_triangle(n):
        i = len(r)
        stdout.write(('   '*(n-i) + '{:&lt;6}'*i + '\n').format(*r))


def neufeld_fmt(n):
    fmt = '   '*n
    for r in neufeld_pascals_triangle(n):
        fmt = fmt[3:] + '{:&lt;6}'
        stdout.write((fmt + '\n').format(*r))


def neufeld_onewrite(n):
    fmt = '   '*n
    msg = ''
    for r in neufeld_pascals_triangle(n):
        fmt = fmt[3:] + '{:&lt;6}'
        msg += fmt.format(*r) + '\n'
    stdout.write(msg)


def neufeld_strio(n):
    fmt = '   '*n
    msg = StringIO()
    for r in neufeld_pascals_triangle(n):
        fmt = fmt[3:] + '{:&lt;6}'
        msg.write(fmt.format(*r) + '\n')
    stdout.write(msg.getvalue())


def tri_rishav(n):
    for y in range(n):
        numerator, denominator = y, 1
        cur = 1
        row = [None] * (y + 1)
        for x in range(y + 1):
            row[x] = cur
            cur = (cur * numerator) // denominator
            numerator -= 1
            denominator += 1
        yield row
def rishav_strio(n):
    fmt = '   '*n
    msg = StringIO()
    for r in tri_rishav(n):
        fmt = fmt[3:] + '{:&lt;6}'
        msg.write(fmt.format(*r) + '\n')
    stdout.write(msg.getvalue())


def tri_numpy(n):
    row = []
    for _ in range(n):
        new_row = np.ones(1 + len(row), np.int32)
        new_row[1:-1] = row[1:] + row[:-1]
        row = new_row
        yield row
def numpy_strio(n):
    fmt = '   '*n
    msg = StringIO()
    for r in tri_numpy(n):
        fmt = fmt[3:] + '{:&lt;6}'
        msg.write(fmt.format(*r) + '\n')
    stdout.write(msg.getvalue())


def tri_onearray(n):
    row = np.ones(n, np.int32)
    x = n - 1
    for y in range(n):
        yield row[x: x+y+1]
        row[x: x+y] += row[x+1: x+y+1]
        x -= 1
def onearray_strio(n):
    fmt = '   '*n
    msg = StringIO()
    for r in tri_onearray(n):
        fmt = fmt[3:] + '{:&lt;6}'
        msg.write(fmt.format(*r) + '\n')
    stdout.write(msg.getvalue())


methods = ((n, globals()[n]) for n in (
    'justin', 'josay', 'neufeld',
    'neufeld_stdout', 'neufeld_noenum', 'neufeld_fmt', 'neufeld_onewrite',
    'neufeld_strio', 'rishav_strio',
    'numpy_strio', 'onearray_strio'))


def profile():
    # IMPORTANT - run redirecting stdout to /dev/null !
    first = None
    for name, method in methods:
        method = globals()[name]
        n = 50

        def run():
            method(n)
        reps = 200
        stdout.flush()
        dur = timeit(run, number=reps) / reps
        if first is None:
            first = dur
            rel = 0
        else:
            rel = first/dur - 1
        print(f'n={n} method={name:16} {1e3*dur:5.3f}ms speedup={rel:7.2%}',
              file=stderr, flush=True)


def print_test():
    for name, method in methods:
        method(6)
        print(name)


profile()
# print_test()
</code></pre>

<p>This yields the following results:</p>

<pre class="lang-none prettyprint-override"><code>n=50 method=justin           7.276ms speedup=  0.00%
n=50 method=josay            6.956ms speedup=  4.60%
n=50 method=neufeld          2.110ms speedup=244.85%
n=50 method=neufeld_stdout   1.947ms speedup=273.78%
n=50 method=neufeld_noenum   1.951ms speedup=273.02%
n=50 method=neufeld_fmt      1.925ms speedup=277.90%
n=50 method=neufeld_onewrite 1.577ms speedup=361.45%
n=50 method=neufeld_strio    1.555ms speedup=367.87%
n=50 method=rishav_strio     1.714ms speedup=324.50%
n=50 method=numpy_strio      2.687ms speedup=170.80%
n=50 method=onearray_strio   2.529ms speedup=187.66%
</code></pre>

<p>Of note:</p>

<ul>
<li>It was quite interesting to me that neither Rishav's computed method nor Numpy vectorization are able to beat Neufeld's simple, array-based method</li>
<li>Building up the printed output in memory before writing it to stdout is much faster than writing to stdout on each iteration, especially if you avoid <code>print</code></li>
</ul>
    </div>