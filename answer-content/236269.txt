<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I believe this will solve your problem:</p>

<pre><code># Using ternary operator to condense the print's
two_sum = lambda s, target: print('yes') if any(map(lambda x: target-x in s and s.count(x)&gt;1, s)) else print('no')

# If s.count(x) is 1, it means the subtraction resulted in the same element took that time for the operation, which we don't want to happen. So the count must be greater then 1

two_sum([-8, 3, 5, 1, 3], -5)
# Output is "yes"

two_sum([2], 4)
# Output is "no"
</code></pre>

<p>So, we wrapped the function in a lambda, used another lambda in the map call and preserved all items in the list, checking if the output matches another element besides the one took in for the calculation.</p>

<h2>Benchmark</h2>

<p>I was wondering if @Juho's answer provided a faster function, so I benchmarked both.</p>

<p>So:</p>

<pre class="lang-py prettyprint-override"><code>two_sum = lambda s, target: any(map(lambda x: target-x in s and s.count(x)&gt;1, s))

is_2sum = lambda s, target: any(target - s[j] in s[j+1:len(s)] for j in range(len(s)))

# The print's aren't necessary for the benchmark.
</code></pre>

<p>Then, I ran both at Google Colab with the following code:</p>

<pre class="lang-py prettyprint-override"><code>two_sum = lambda s, target: any(map(lambda x: target-x in s and s.count(x)&gt;1, s))

is_2sum = lambda s, target: any(target - s[j] in s[j+1:len(s)] for j in range(len(s)))

test_function = two_sum
# test_function = is_2sum

if __name__ == "__main__":
    import timeit
    setup = "from __main__ import test_function"
    average=0
    for i in range(0,100):
      average=average+timeit.timeit("test_function([-8, 3, 1, 5, 1, 3], -5)", setup=setup, number=1000000)
    print(average/100)
</code></pre>

<p>The method <code>timeit.timeit()</code> will run each function 1.000.000 times, then I record the outputs of 100 iterations (so, we actually ran the function 100.000.000 times) and take the average.</p>

<h3>Results:</h3>

<p>For the function <code>two_sum</code>:<br>
First run: <code>0.9409843384699957</code><br>
Second run: <code>0.948360692339993</code>  </p>

<p>For the function <code>is_2sum</code>:<br>
First run: <code>0.9963176720300112</code><br>
Second run: <code>0.998327726480004</code>  </p>

<p>As you can see, there is an increase in performance for <code>two_sum</code> function, whether this comes from the use of <code>map()</code> and avoiding lists operations, I don't know, but it's a bit faster.</p>
    </div>