<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Incomplete code</h2>

<p>Your question's code is missing so much information there is not much to review.</p>

<p>Because of this I can only review the code in regard to exactly the logic your function performs. </p>

<h2>Style points</h2>

<ul>
<li><p>Don't add code that is not needed. Eg </p>

<ul>
<li><p>The variable <code>input</code> is a copy of <code>element</code> having two names for the same reference will lead to confusion, mistakes and bugs.</p></li>
<li><p>You add a function to form submit, and all it does is call validateForm. Set the listener to <code>validateForm</code> eg <code>form.addEventListener('submit', validateForm)</code> and avoid the middle man.</p></li>
</ul></li>
<li><p>Good code does not repeat AKA is DRY (Don't Repeat Yourself). </p>

<p>Examples of repeated code;</p>

<ul>
<li><p>You call <code>errorMessage</code>, with the same 3 last arguments five times. Create a function and just pass the first argument, let the function call <code>errorMessage</code> with the rest of the arguments.</p></li>
<li><p>You repeat the same statement <code>if (creditOptionChecked()) {</code> three times. Again hand the repetitive source code to a function..</p></li>
</ul></li>
<li><p>Variables that do not change and/or should not change should be declared as constants. eg <code>const value = element.value;</code> rather than <code>let value = element.value;</code></p></li>
<li><p><code>Array.from</code> requires an array like argument. Array like arguments are all iterable thus you do not need to create an array before you iterate. The line <code>Array.from(inputElements).forEach(element=&gt; {</code> can be written as <code>inputElements.forEach(element =&gt; {</code> or <code>for (const element of inputElements) {</code></p>

<p>Array iterators (example <code>Array.forEach</code>) are not as efficient as <code>for</code> or <code>while</code> loops. Using <code>for</code> or <code>while</code> loops when you can also gives you a better sense of the code complexity, while using a little less memory and power.</p></li>
</ul>

<h2>Example</h2>

<p>Rewriting your function to be compatible with the original under all possible unknown states using the above points.</p>

<pre><code>form.addEventListener("submit", e =&gt; {
    var input;
    const error = valid =&gt; errorMessage(valid, input, input.value, e);
    const optError = valid =&gt; creditOptionChecked() &amp;&amp; error(valid);
    for (input of inputElements) {
        if (input === name) { error(isValidName) }
        else if (input === email) { error(isValidEmail) }
        else if (input === creditNumber) { optError(isValidCreditCard) }
        else if (input === zip) { optError(isValidZipCode) }
        else if (input === cvv) { optError(isValidCvv) }
        else if (input == fieldSetActivity) { validateCheckboxes(e) }
    }
});
</code></pre>

<p>There are some improvements that can be made depending on the unknowns, maybe needing no <code>if</code> statements at all, but I likely waste both of our times if I speculate.</p>
    </div>