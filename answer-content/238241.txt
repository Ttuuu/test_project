<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your <code>applyOperator</code> consists solely of a switch statement.  Rather than having them all assign to <code>firstNum</code>, then returning the value, you might as well directly return the result...</p>
<pre><code>private static int applyOperator(char operand, int firstNum, int secondNum){
    switch (operand) {
        case '*':
            return firstNum * secondNum;
        case '/':
            return firstNum / secondNum;
        case '+':
            return secondNum;
        case '-':
            return -secondNum;
    }
    return firstNum;
}
</code></pre>
<p>This flags up some non-intuitive behaviour, both +- operators ignore the first number and only operate on the second number.  This is because half of the behaviour sits in the calling method.  The default behaviour for an unknown operator is also to simply return the first number. This might be acceptable for your because of the challenge parameters, however consider throwing an exception on an unknown operator...</p>
<h1>Bug?</h1>
<p>The following test fails:</p>
<pre><code>assertEquals(6, ArithmethicalStatments.calc("-3*-2"));
</code></pre>
<p>Maybe the question sets restrictions on the values that can be used, however, assuming you're supposed to be able to use negative numbers, the way you're handling the '-' operator breaks this (the result for the above comes back as '-2').</p>
<p>The calculator basically consists of number tokens, separated by operators.  So, you can get a number (which consists of any number of '-', followed  by numerals), then a single character operator, then back to a number etc.</p>
<p>Each token could be separated by white space, again this doesn't work currently, adding spaces means that "5 + 3" resolves to 5, rather than 8....combined with the lack of errors reported this is confusing.</p>
    </div>