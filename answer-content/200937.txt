<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>A few things that I noticed, not necessarily in order:</p>

<ul>
<li><p>The globally locked and secured <code>total</code> is an unnecessary bottleneck. The aggregation you're performing is really well-suited for subresult aggregation. Instead of <code>updateScore</code> which can only ever be entered by one thread, you should have a running aggregate as you traverse the node hierarchy.</p></li>
<li><p>Node should not know about <code>NodeHandler</code>. You're tightly coupling these two together through a static method, which makes your code hard to test. Instead of a static class, use dependency-injection</p></li>
<li><p>Your termination condition isn't perfectly secure against premature termination. Also the <code>getTotal</code> is basically busy-waiting. You also only ever have multiples of seconds when running this task, which doesn't bode well for smaller node-structures.</p></li>
<li><p>Declaring <code>rawJson</code> as a member-variable is not a good solution. The compiler may or may not notice that it's in fact a local variable and may or may not correctly free the memory you're not using anymore.</p></li>
<li><p>Java EE has a <a href="https://javaee.github.io/javaee-spec/javadocs/javax/json/stream/JsonParser.html" rel="nofollow noreferrer">JsonParser</a> implementation since Java 1. That implementation crucially allows directly streaming the JSON access, so long as you're using forward access only. This allows you to keep a minimal memory-footprint. Look into <a href="https://javaee.github.io/javaee-spec/javadocs/javax/json/Json.html#createParser-java.io.InputStream-" rel="nofollow noreferrer"><code>Json.createParser(InputStream)</code></a></p></li>
<li><p>Since you're creating tasks from your initial task, the <a href="https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ForkJoinPool.html" rel="nofollow noreferrer"><code>ForkJoinPool</code></a> and the use of <a href="https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ForkJoinTask.html#invoke()" rel="nofollow noreferrer"><code>ForkJoinTask</code>s</a> is the "correct" model to use here. With this knowledge we can rewrite your program to be significantly more idiomatic and probably quite a bit faster :) This also allows you to not need to think about the termination condition of your operation.</p></li>
</ul>
    </div>