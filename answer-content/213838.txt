<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I really like your program because it is well structured and very readable.</p>

<h1>Bug</h1>

<p>There is a bug in <code>ThreeInARow()</code>. For</p>

<pre><code>+---+---+---+
|   |   |   |
+---+---+---+
| X | X | X |
----+---+---|
| O | O |   |
+---+---+---+
</code></pre>

<p>it returns <code>' '</code> (space) and the game continues.</p>

<h1>Declaration and Initialization</h1>

<p>If you don't have to support ancient compilers I would recommend to declare variables where you initialize them, e.g. <code>/* ... */ char answer = getchar();</code> instead of <code>char answer; /* ... */ answer = getchar();</code>.</p>

<h1>Naming</h1>

<p><code>board_state.win</code> signals if the game has ended (also in case of a draw) and therefore should be renamed to something like <code>finished</code> or <code>ended</code>.</p>

<p>Personally, I like to use a verb in my function names because I think it's clearer what the function does (get, set, write, initialize, etc.).</p>

<h1>Comments</h1>

<p>Some comments state the obvious:</p>

<pre><code>// Initialises Random Number Generator
srand((unsigned)time(0));
</code></pre>

<p>or repeat what is already expressed by the variable or function name:</p>

<pre><code>//------------------------------------------------------------------------------------
// Player One Move
//------------------------------------------------------------------------------------
void PlayerOneMove(struct game_data *game) {
</code></pre>

<p>My advice: Prefer expressive code over comments, because over the lifetime of a program (with bugfixes, refactorings and new features) comments and code tend to get out of sync.</p>

<h1>DRY</h1>

<p>You could refactor</p>

<pre><code>if (game.turn == 0) {
    PlayerOneMove(&amp;game);
    game.turns++;
    game.turn = 1;
}
else {
    RandomComputerMove(&amp;game);
    game.turns++;
    game.turn = 0;
}
</code></pre>

<p>to</p>

<pre><code>if (game.turn == 0)
    PlayerOneMove(&amp;game);
else
    RandomComputerMove(&amp;game);
game.turns++;
game.turn = !game.turn;
</code></pre>

<h1>Error handling</h1>

<p>Currently you handle all errors locally by calling <code>exit(EXIT_FAILURE);</code>. That works well for this program and keeps the error handling code small.<br>
For larger programs you might prefer returning error codes and handling the errors in the main loop because it gets harder to reason about a program with many functions that might call <code>exit()</code>.</p>

<h1>Usability</h1>

<p>I like your example where <code>1 1</code> places a <code>Z</code> on the board. IMHO something like <code>1 2</code> would be a little bit more helpful because it shows that the order is <code>&lt;row&gt; &lt;column&gt;</code>.</p>

<h1>Code Style</h1>

<p>I don't see <a href="https://en.wikipedia.org/wiki/Camel_case" rel="nofollow noreferrer">PascalCase</a> (<code>GameEventDrawn()</code>) very often for function names in C. Usually snake_case or lowerCamelCase are used.  </p>

<p>Last not least I want to repeat myself:<br>
I really like how readable your program is.  </p>
    </div>