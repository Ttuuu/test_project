<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>A <a href="https://codereview.stackexchange.com/questions/208315/merging-k-sorted-linked-lists#comment402359_208315">comment</a> suggests that you can get <span class="math-container">\$\mathcal{O}(n\log{m})\$</span>, where <span class="math-container">\$n\$</span> is the total number of elements in all lists and <span class="math-container">\$m\$</span> is the number of lists.  How would you get <span class="math-container">\$\mathcal{O}(n\log{m})\$</span>?  The answer is to maintain a container of sorted lists.  Two possible containers are a <code>SortedSet</code> (e.g. <code>TreeSet</code>) or a <code>PriorityQueue</code> (implemented with a heap).  Both have <span class="math-container">\$\mathcal{O}(\log{m})\$</span> insertions and removals.  You would perform <span class="math-container">\$\mathcal{O}(n)\$</span> insertions and removals (i.e. one for each element of the lists).  <span class="math-container">\$\mathcal{O}(n\log{m})\$</span> overall.  </p>

<p>Your current code is <span class="math-container">\$\mathcal{O}(n\cdot m)\$</span>, so <span class="math-container">\$\mathcal{O}(n\log{m})\$</span> would be an improvement asymptotically.  </p>

<p>Consider </p>

<pre><code>    public ListNode mergeKLists(final ListNode[] listNodes) {
        PriorityQueue&lt;ListNode&gt; lists = new PriorityQueue&lt;&gt;(Arrays.asList(listNodes));

        // create a dummy head so as to have the same logic for the first node as the others
        ListNode head = new ListNode(0);
        ListNode current = head;
        for (ListNode node = lists.poll(); node != null; node = lists.poll()) {
            current.next = new ListNode(node.val);
            current = current.next;

            if (node.next != null) {
                lists.add(node.next);
            }
        }

        return head.next;
    }
</code></pre>

<p>The <code>for</code> loop will run <span class="math-container">\$n\$</span> times (once for each element in the lists).  The <code>poll</code> and <code>add</code> operations will each take <span class="math-container">\$\mathcal{O}(\log{m})\$</span> time.  So <span class="math-container">\$\mathcal{O}(n\log{m})\$</span> overall.  The creation of the <code>PriorityQueue</code> will take <span class="math-container">\$\mathcal{O}(m\log{m})\$</span>, so that's <span class="math-container">\$\mathcal{O}((n + m)\log{m})\$</span>.  If we assume that none of the lists are empty, then <span class="math-container">\$m &lt;= n\$</span>, so <span class="math-container">\$\mathcal{O}(n\log{m})\$</span>.  </p>

<p>We <code>return head.next</code> to avoid the problem of checking on each iteration if we are inserting the first element of the list.  The <code>head</code> itself is not part of the list that we are creating, just a placeholder.  Another alternative would be to create the first element outside the list.  </p>

<p>This code assumes that none of the entries in <code>listNodes</code> are null.  If they can be, you'd need additional checking for that case.  It also assumes that <code>ListNode</code> is comparable by <code>val</code>.  If not, you'd have to pass a <code>Comparator</code> to the <code>PriorityQueue</code> constructor to implement that behavior.  The <code>SortedSet</code> version is similar, with the same limitations.  </p>

<p>With a <code>Comparator</code> and capacity set, null checking, without a dummy head, and with <code>current</code> declared as part of the loop declaration (for better scoping, as <code>current</code> is not used outside the loop):  </p>

<pre><code>    public ListNode mergeKLists(final ListNode[] listNodes) {
        PriorityQueue&lt;ListNode&gt; lists = new PriorityQueue&lt;&gt;(listNodes.length,
                new Comparator&lt;ListNode&gt;() {

                    int compare(ListNode a, ListNode b) {
                        return Integer.compare(a.val, b.val);
                    }

                });

        for (ListNode node : listNodes) {
            if (node != null) {
                lists.add(node);
            }
        }

        if (lists.isEmpty()) {
            return null;
        }

        ListNode head = new ListNode(lists.poll().val);
        for (ListNode node = lists.poll(), current = head; node != null; node = lists.poll()) {
            current.next = new ListNode(node.val);
            current = current.next;

            if (node.next != null) {
                lists.add(node.next);
            }
        }  

        return head;
    }
</code></pre>

<p>I think that the dummy head is actually easier, but you may find this form more readable.  </p>

<p>I haven't tested this, so beware of syntax errors, etc.  </p>
    </div>