<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I see a few things that may help you improve your program.</p>

<h2>Avoid <code>pow</code> for <code>float</code></h2>

<p>The use of <code>pow</code> converts the argument to a <code>double</code> and returns a <code>double</code>.  If you're casting the result to a <code>float</code> anyway, the use of <code>std::powf</code> would be more appropriate.  But see the next suggestion for an even better approach.</p>

<h2>Prefer multiplication to <code>pow</code> with small, fixed integral powers</h2>

<p>The content of the <code>pdf</code> function could be rewritten like this instead:</p>

<pre><code> return 1.0f/((u+1)*(u+1));
</code></pre>

<h2>Usealittlemorewhitespace</h2>

<p>With everything crowded together on the line, it's hard to read and understand some lines like this:</p>

<pre><code>float gammath = (gamma[i]/Q)*(G-Q*(K-1));
</code></pre>

<p>I'd write it like this instead:</p>

<pre><code>float gammath{gamma[i] / Q) * (G - Q * (K - 1)};
</code></pre>

<p>This also uses the C++11 uniform initialization syntax, which I prefer.</p>

<h2>Use <code>constexpr</code> where appropriate</h2>

<p>Any time you can make a numerical constant or expression <code>constexpr</code> is one more opportunity for compiler optimization.  In this case, virtually everything in <code>main</code>, including <code>du</code>, <code>K</code>, <code>gamma</code>, <code>G</code>, and <code>Q</code> can be made <code>constexpr</code> simply by adding that keyword in front of the declaration.  With that, the compiler is free to evaluate expressions like this:</p>

<pre><code>G - Q * (K - 1)
</code></pre>

<p>once at compile-time rather than at runtime.  It can save quite a bit of time if you use it.</p>

<h2>Move invariants out of the loop</h2>

<p>The value of the expression listed above does not change within the loop (or within the program at all, as presented).  Smart compilers can usually optimize that by themselves, but doing it manually may give you insight.  For example, we can make a constant of that expression outside the loop:</p>

<pre><code>constexpr auto m{G - Q * (K - 1)};
</code></pre>

<p>Now the inner <code>if</code> boils down to <code>if (m &gt; 0)</code> but since it's invariant within the loop, move it outside.  Now we have the encapsulating <code>if</code> <em>outside</em> and the <code>for</code> loop <em>inside</em> which makes a lot more sense.</p>

<h2>Use C++11 threading features</h2>

<p>The calculations for each value of <code>gamma</code> are completely independent.  For that reason, they could easily be calculated in parallel.  Here's a way to do that:</p>

<pre><code>int main() {
    constexpr float du = 0.0001;
    constexpr int K = 3;
    constexpr float gamma[4] = {0.31622777, 0.79432823, 1.99526231, 5.01187234};
    constexpr int G = 50;
    constexpr int Q = 2;
    constexpr auto m{G - Q * (K - 1)};
    std::vector&lt;std::future&lt;float&gt;&gt; chunks;
    if (m &gt; 0) {
        for (int i = 0; i &lt; 4; i++) {
            float gammath{gamma[i] / Q * m};
            chunks.push_back(std::async(integ, gammath, K, du));
        }
    }
    std::mutex cout_mutex;
    for (int i=0; i &lt; 4; ++i) {
        std::lock_guard&lt;std::mutex&gt; lock(cout_mutex);
        std::cout &lt;&lt; gamma[i] &lt;&lt; '\t' &lt;&lt; 1 - chunks[i].get() &lt;&lt; '\n';
    }
}
</code></pre>

<p>This requires <code>&lt;future&gt;</code>, <code>&lt;mutex&gt;</code>, and <code>&lt;vector&gt;</code> as <code>#include</code>s.</p>

<h2>Parallelize the recursive integrals</h2>

<p>If there are 100,000 steps in the integral, why do that with a single core?  If you have a multicore machine like I do, you could divide that work among multiple cores by using the same kind of <code>std::async</code> technique shown above.  This would dramatically speed the results (and can be divided among as many cores as you have).  I did not implement that, but the code above should give a hint as to how to do such a thing generically.</p>

<h2>Use <code>static</code> for functions which can have file scope</h2>

<p>If the <code>pdf</code>, <code>cdf</code> and <code>integ</code> functions are never used outside the file in which they're defined, the compiler can get quite clever about inlining code and other optimizations.  For that reason, I'd recommend making those functions <code>static</code> if at all possible.</p>

<h2>Results</h2>

<p>I didn't have the patience to run this at the <code>du</code> value in the program (0.0001) so I ran it at 50 times that at 0.005 to speed up testing.  Obviously, that's an option if you can accept the lower resolution, but I just did it to speed up timing tests.</p>

<p>The original (with the modified value of <code>du</code>) took 1.06 seconds, while the modified version took 0.723s.  At full resolution (<code>du = 0.0001</code>) the results took 30 minutes and 3 seconds on the same 64-bit 8-core Linux machine.</p>
    </div>