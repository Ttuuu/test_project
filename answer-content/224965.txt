<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Preface</h1>

<p>This is great code.  Your solution is more than <span class="math-container">\$10^{42}\$</span> times nicer than the given solutions on the linked page that promote crap like <code>#include &lt;bits/stdc++.h&gt;</code>.  You are already much better than them in this regard.</p>

<h1>The algorithm</h1>

<p>Making use of the STL, your algorithm can be simplified like this:</p>

<pre><code>std::vector&lt;long long&gt; subsetSums(const std::vector&lt;int&gt;&amp; set)
{
    std::vector&lt;long long&gt; subset_sums{0};
    subset_sums.reserve(std::size_t(1) &lt;&lt; set.size()); // to prevent iterator invalidation
    for (int num : set)
        std::transform(subset_sums.begin(), subset_sums.end(),
                       std::back_inserter(subset_sums),
                       [=](number_t prev_sum){ return prev_sum + num; });
    return subset_sums;
}
</code></pre>

<p>(You need <code>#include &lt;algorithm&gt;</code> for <code>std::transform</code> and <code>#include &lt;iterator&gt;</code> for <code>std::back_inserter</code>)  Here, we first push <code>0</code> to the list of sums.  Then, for each element <span class="math-container">\$x\$</span>, we add <span class="math-container">\$x\$</span> to the previous sums and push these new sums.  Therefore:</p>

<ol>
<li><p>The initial list of sums is <code>{0}</code>.</p></li>
<li><p>For the first element <code>5</code>, the list becomes <code>{0, 5}</code>, where <code>5 = 0 + 5</code>.</p></li>
<li><p>For the second element <code>4</code>, the list becomes <code>{0, 5, 4, 9}</code>, where <code>{4, 9} = {0, 5} + 4</code>.</p></li>
<li><p>For the third element <code>3</code>, the list becomes <code>{0, 5, 4, 9, 3, 8, 7, 12}</code>, where <code>{3, 8, 7, 12} = {0, 5, 4, 9} + 3</code>.</p></li>
</ol>

<h1>Miscellaneous</h1>

<p>The common practice is to put a space between <code>#include</code> and the header name, as in <code>#include &lt;iostream&gt;</code>.  And simply delete <code>using namespace std;</code> rather than commenting it out to show you are following good practiceÂ :)</p>

<p>You use <code>int</code> for the original numbers, and <code>long long</code> for the sums.  Don't mix different data types.  Write a type alias like</p>

<pre><code>using number_t = long long;
</code></pre>

<p>And use it consistently throughout your code.  This makes it clear what these types are used for.</p>

<p><code>i</code> should really be of an unsigned type.  And <code>isPowerOf2</code> should also operate on an unsigned type.  The <code>isPowerOf2</code> function can be made <code>constexpr</code>.  And I prefer a looser layout with more spaces and less parentheses:</p>

<pre><code>constexpr bool isPowerOf2(std::size_t x)
{
  /* First x in the below expression is for the case when x is 0 */
    return x &amp;&amp; !(x &amp; (x - 1));
}
</code></pre>

<p><code>1 &lt;&lt; set.size()</code> potentially overflows.  <code>std::size_t(1) &lt;&lt; set.size()</code> is better.  For me, it may be better to extract a function and check for overflow:</p>

<pre><code>// returns 2^n
template &lt;typename T, std::enable_if_t&lt;std::is_integral_v&lt;T&gt; &amp;&amp; is_unsigned_v&lt;T&gt;, int&gt; = 0&gt;
constexpr T power2(T n)
{
    assert(n &lt; std::numeric_limits&lt;T&gt;::digits);
    return T(1) &lt;&lt; n;
}
</code></pre>

<p>Passing a <code>std::vector</code> by value may cause unnecessary copies.  Pass by <code>const</code> reference instead.</p>

<p><code>return 0;</code> can be omitted for the <code>main</code> function.</p>

<h1>The future</h1>

<p>C++20 provides us with <a href="https://en.cppreference.com/w/cpp/header/bit" rel="nofollow noreferrer">bit manipulation utilities</a>.  We can replace <code>isPowerOf2(i)</code> with <code>std::ispow2(i)</code> (after you make <code>i</code> unsigned).  The aforementioned <code>power2</code> function can also be improved with concepts:</p>

<pre><code>// returns 2^n
template &lt;std::UnsignedIntegral T&gt;
constexpr T power2(T n)
{
    assert(n &lt; std::numeric_limits&lt;T&gt;::digits);
    return T(1) &lt;&lt; n;
}
</code></pre>

<p>The algorithm can also be simplified with the <a href="https://ericniebler.github.io/range-v3/" rel="nofollow noreferrer">Ranges library</a> and <a href="https://en.cppreference.com/w/cpp/utility/functional/bind_front" rel="nofollow noreferrer"><code>std::bind_front</code></a>:</p>

<pre><code>std::vector&lt;number_t&gt; subsetSums(const std::vector&lt;number_t&gt;&amp; set)
{
    std::vector&lt;number_t&gt; subset_sums{0};
    subset_sums.reserve(std::size_t(1) &lt;&lt; set.size());
    for (int num : set)
        ranges::push_back(subset_sums,
            subset_sums | ranges::view::transform(std::bind_front(ranges::plus, num)));
    return subset_sums;
}
</code></pre>
    </div>