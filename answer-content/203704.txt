<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The code can be made quite a bit more readable by moving parts of the logic into a separate class. Also, sorting the candidates by length is not helpful, even harmful in certain situations. If the shortest candidate word is the only valid subsequence, you still need to test all others. The only thing you 'gain' from sorting is an increase in time complexity. The main method could look like this:</p>

<pre><code>def longest_subsequence(string, words):
    sequences = Sequences(string)
    best = ""
    for word in words:
        if len(word) &gt; len(best) and word in sequences:
            best = word
    return best
</code></pre>

<p>Preprocessing has moved into the <code>Sequences</code> constructor and look-ups are now performed by the <code>in</code> operator. The inner workings of the <code>sequences</code>-object don't matter for now, as long as preprocessing is done in linear time and look-ups are fast, i.e. do not require an exhaustive search.</p>

<p>You could just move your preprocessing code (<code>s_dict_first = {}; for i,s in ...</code>) into the constructor of <code>Sequences</code> and your implementation of <code>isSubstringPresent</code> into the <code>in</code>-operator and be done, but we can do better. Instead of locating only the first character using a dictionary and then falling back to an exhaustive search, we can create dictionaries for all characters.</p>

<p>This can be done efficiently by walking the string backwards, starting with an empty dictionary. As we walk, we record the last (actually the next, since we're walking backwards) occurrence of each character. We then store all these dictionaries in a list.</p>

<pre><code>class Sequences:
    """Fast lookups for subsequences in a fixed string"""

    def __init__(self, string):
        """Constructor, preprocessing in O(n) time"""
        n = len(string)
        self.next = [None] * (n+1)
        self.next[n] = {}
        for i in range(n,0,-1):
            self.next[i-1] = { **self.next[i], string[i-1]: i }

    def __contains__(self, string):
        """Fast lookup"""
        i = 0
        for char in string:
            if char not in self.next[i]: return False
            i = self.next[i][char]
        return True
</code></pre>

<p>If we later want to look up the word <code>apple</code>, we go to the first dictionary and query it for the first occurrence of the character <code>a</code>, which might be at position 10. We then grab the 10th dictionary from the list of dictionaries and query it for a <code>p</code>, so we get the position of the first <code>p</code> that comes after position 10. We continue until either a query fails or the entire word was found.</p>
    </div>