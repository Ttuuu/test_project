<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Puzzels. Love them.</p>

<p>This is a <code>O(n)</code> problem. But just to make it more fun, we can also do it in <code>O(1)</code> space (no extra space). </p>

<pre><code>#include &lt;functional&gt;
#include &lt;iostream&gt;
</code></pre>

<p>Your test for is a vowel is fine but you miss the upper case letters. You can make it a single look-up (assuming ASCII-like coding in 8-bit chars):</p>

<pre><code>bool isVowel(unsigned char x)
{
    static char vowelTest[] = {
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, // A E I O
                0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // U
                0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, // a e i o
                0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // u
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};

    return vowelTest[x];
}
bool isConst(unsigned char x)
{
    return !isVowel(x);
}
</code></pre>

<p>To make things easier, I am going to use an auxiliary function. This steps along the array until we find the type of character we want.</p>

<pre><code>char* findNext(char* data, std::function&lt;bool(unsigned char)&gt; test)
{
    while(test(*data))
    {   ++data;
    }
    return data;
}
</code></pre>

<p><strong>The re-arrange function.</strong></p>

<p>We need to maintain two cursors (one for vowels and one for constants). We will keep these in an array (which means we can programmatically switch between them). We keep track of how far we are through the string in <code>str</code>.</p>

<pre><code>void rearange(char* str)
{
    char*   data[2]     = { findNext(str, isVowel), findNext(str, isConst)};
    bool    vowelNow    = false;

    // While we are still in the sting.
    while(*str)
    {
        // If we have the correct value under the correct cursor.
        if (data[vowelNow] == str)
        {
            // Then just move the cursor.
            data[vowelNow]       = findNext(data[vowelNow]+1, isConst);
        }
        else
        {
            // The characters are not in the correct place.
            std::swap(*data[0], *data[1]);

            // Now both pointers point at the wrong type of characters.
            // So move them both forward.
            data[0]     = findNext(data[0]+1, isVowel);
            data[1]     = findNext(data[1]+1, isConst);
        }

        // Move forward the start point.
        // And switch the type of letter we are looking for.
        ++str;
        vowelNow    = !vowelNow;
    }
}

int main()
{
    char val[] = "abed";
    std::cout &lt;&lt; val &lt;&lt; "\n";
    rearange(val);
    std::cout &lt;&lt; val &lt;&lt; "\n";
}
</code></pre>

<p>And the test run:<br>
    <a href="http://ideone.com/AouDPU" rel="nofollow noreferrer">http://ideone.com/AouDPU</a></p>
    </div>