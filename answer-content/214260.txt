<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ol>
<li>You have the wrong version of 99 bottles of beers</li>
<li>Global variables are bad except for constants (and some special cases)</li>
<li><code>print()</code> is equal to <code>print('')</code> but there are two other amazing solutions.</li>
<li>If you come from another language, forget all you know about loops</li>
</ol>

<hr>

<p>1.</p>

<p>Ok the first fix is easy, just add:</p>

<pre><code>No more bottles of beer on the wall, no more bottles of beer. 
Go to the store and buy some more, 99 bottles of beer on the wall.
</code></pre>

<p>to the end</p>

<p>2.</p>

<p>The second is very important for all your future projects. Use arguments instead of global variables. Using globals is only ok if you define constants of if your script is short, but as soon as your project grows, it will become unmanageable. Globals are also less performant than locals because locals can only be modified in the function itself, that permits the compiler to do assumptions which can't be done with globals. <strong>Avoid globals as much as possible.</strong></p>

<p>3.</p>

<pre><code>print('hello')
print('')
# is the same as
print('hello', end='\n') # '\n' is a newline which is the default
print()
# which is the same as
print('hello')
print()
# which is the same as
print('hello', end='\n\n')
# which is the same as
print('hello\n')
# which is the same as
print('he', end='llo')
print()
print()
</code></pre>

<p>In summary, either use <code>end='\n\n'</code> or append <code>\n</code> to your string.</p>

<p>4.</p>

<p>In Python, there is this concept of iterable, <code>for i in range(start, end, step)</code> is the way you do the classic looping over integers. <code>range(10)</code> is an iterator that will take all the values from 0 to 9, you know what, lists, tuple, dictionaries files, and even strings are iterables <code>for i in 'babar': print(i)</code>. That's why <code>while</code> loops are less used in python, it is because <strong>iterables are cool, don't use a while</strong>.</p>

<pre><code>def bottles():
    for i in range(99, 1, -1):
        print(f"{i} bottles of beer on the wall, {i} bottles of beer.")
        print(f"Take one down, pass it around, {i-1} bottles of beer on the wall\n")
    i -= 1
    print(f"{i} bottle of beer on the wall, {i} bottle of beer.")
    print("Take it down, pass it around, No more bottles of beer on the wall.\n")
    print("No more bottles of beer on the wall, no more bottles of beer.")
    i = 99
    print(f"Go to the store and buy some more, {i} bottles of beer on the wall.\n")
    bottles() # remove this line if you don't like beers

bottles()
</code></pre>

<hr>

<h3>Update:</h3>

<p>Apparently, OP can't use numbers, this version doesn't contain numbers:</p>

<pre><code>def bottles(count):
    for i in reversed(range(count+True)):
        s='s' if i-True else ''
        print(f"{i} bottle{s} of beer on the wall, {i} bottle{s} of beer.")
        if not i-True: break
        print(f"Take one down, pass it around, {i-1} bottle{s} of beer on the wall\n")
    print("Take one down, pass it around, no more bottles of beer on the wall\n")
    print("No more bottles of beer on the wall, no more bottles of beer.")
    print(f"Go to the store and buy some more, {count} bottles of beer on the wall.\n")
    bottles(count)  # If you don't want to go to the store and buy some more remove this line

bottles(99)
<span class="math-container">```</span>
</code></pre>
    </div>