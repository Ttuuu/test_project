<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>It is also recommended that I implement ... the non-generic <code>IComparable</code>.</p>
</blockquote>

<p>I don't see that recommendation in <a href="https://docs.microsoft.com/en-us/dotnet/api/system.icomparable-1?view=netframework-4.7.2" rel="noreferrer">the current doc for IComparable</a>. I would recommend against it: having the non-generic method turns compile-time errors into runtime errors, which are more expensive to find and fix.</p>

<hr>

<blockquote>
<pre><code>      private static int Compare(Comparable&lt;T&gt; comp1, Comparable&lt;T&gt; comp2) {
          if (comp1 == null) {
              return ((comp2 == null) ? 0 : -1);
          }
          return comp1.CompareTo(comp2);
      }
</code></pre>
</blockquote>

<p>For consistency, this requires that subclasses guarantee that <code>CompareTo(null)</code> returns a positive value, but that requirement isn't documented.</p>

<p>Perhaps a better solution would be:</p>

<pre><code>        private static int Compare(Comparable&lt;T&gt; comp1, Comparable&lt;T&gt; comp2) {
            if (comp1 == null) {
                return comp2 == null ? 0 : 0.CompareTo(comp2.CompareTo(comp1));
            }
            return comp1.CompareTo(comp2);
        }
</code></pre>

<p>That way the only requirement is that <code>CompareTo(null)</code> be consistent.</p>

<p>There may be a more elegant way of inverting the sense of a comparison, but that's the easiest one I can think of which doesn't fail on corner cases.</p>
    </div>