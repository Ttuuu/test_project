<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There are a bunch of small improvements you can make.</p>

<p>Since you aren't using <code>name</code> or <code>setName</code>, you can remove them and their <code>useState</code> call (consider a linter to warn on unused variables).</p>

<p>You have <code>&lt;form onSubmit={search}&gt;</code>, but the <code>search</code> function does <code>filter(event.target.value.toLowerCase())</code>. Forms don't have <code>.value</code>s, so this will throw an error when the button is pressed. Also, the <code>search</code> function could be confused with the <code>Search</code> component - the difference is only in capitalization, which isn't enough. The button doesn't do anything otherwise, because searching occurs when the input's <code>change</code> event fires.  You might consider removing the button completely - this way you can remove the <code>search</code> function and just call <code>filter</code>:</p>

<pre><code>&lt;form&gt;
    &lt;input onChange={event =&gt; filter(event.target.value)} /&gt;
&lt;/form&gt;
</code></pre>

<p>In your code, eveywhere you return JSX at the bottom of a function, there's no trailing <code>;</code> after the final <code>)</code>. This can result in bugs if you ever decided to put the fragment into a variable instead of returning immediately, due to automatic semicolon insertion. Since you're using semicolons everywhere else, consider using them everywhere they're appropriate as well. (again, linting will help with this)</p>

<p>Similarly to the <code>search</code> vs <code>Search</code> above, you also have a <code>persons</code> array and a <code>Persons</code> component. Maybe call the component <code>PersonsList</code> instead, since it creates a <code>&lt;ul&gt;</code>.</p>

<p>Rather than using <code>forEach</code> and conditionally pushing to an array outside, it may be a better idea to construct the array directly by <code>filter</code>ing for elements which match, then <code>.map</code>ping to the individual <code>&lt;li&gt;</code>s. Higher-order functions are great:</p>

<pre><code>const PersonsList = ({ persons }) =&gt; (
    &lt;ul&gt;
        {(
            persons
                .filter(person =&gt; person.show)
                .map(person =&gt; &lt;li&gt;{person.name} -- his/her telephone number: {person.phone}&lt;/li&gt;)
        )}
    &lt;/ul&gt;
);
</code></pre>

<p>In <code>addPerson</code>, if you want to check whether any items in an array match a condition, rather than setting a flag outside and conditionally reassigning it while iterating over an array, it's more appropriate to use <code>Array.prototype.some</code>:</p>

<pre><code>const alreadyExists = persons.some(person =&gt; person.name === name);
</code></pre>

<p>If you <em>were</em> to use your original code, at least <a href="https://stackoverflow.com/a/23465314">use strict equality</a> with <code>===</code> instead of loose equality <code>==</code>.</p>

<p>Also in <code>addPerson</code>, using <code>window.alert</code> is <a href="https://ux.stackexchange.com/questions/4518/should-alert-boxes-be-avoided-at-any-cost">almost never a good choice</a>. It's user-unfriendly, since it completely blocks them from using the rest of the page. It also prevents any other Javascript from executing until the alert is dismissed, which would be a problem if there were anything on the page other than this phone number component. Inform the user of the problem some other way. A very simple tweak would be to add <code>errorMessage</code> to the form's state:</p>

<pre><code>if (!alreadyExists)
    setPersons(persons.concat({ name, phone, show: true }));
else
    setNewFormInfo({ name, phone, errorMessage: `${name} is already added to the list!` });
</code></pre>

<p>and add to the form's JSX:</p>

<pre><code>{(errorMessage &amp;&amp; &lt;div className="error"&gt;{errorMessage}&lt;/div&gt;)}
</code></pre>

<p>In the <code>filter</code> function, there's no need to check if the input is empty - if it is, everything will be rendered anyway. Feel free to remove that part and make the code simpler.</p>

<p>Also in <code>filter</code>, since you're creating a <code>filtered</code> array by iterating over each element of <code>persons</code> and pushing an element to <code>filtered</code>, using <code>.map</code> would be more appropriate than <code>forEach</code> / <code>if</code> / <code>push</code>:</p>

<pre><code>function filter(nameToFilter) {
    const nameToFilterLower = nameToFilter.toLowerCase();
    setPersons(persons.map(person =&gt;
        ({
            ...person,
            show: person.name.toLowerCase().includes(nameToFilterLower),
        })
    ));
}
</code></pre>

<p>If you run the development version, you'll see the warning:</p>

<blockquote>
  <p>Warning: Each child in a list should have a unique "key" prop.</p>
</blockquote>

<p>Without such a prop, each element will have to be re-created each time. See <a href="https://stackoverflow.com/questions/34576332/warning-each-child-in-an-array-or-iterator-should-have-a-unique-key-prop-che">here</a> for an in-depth explanation. Since you're only adding items to the list, easiest fix would be to add <code>&lt;li key={name}</code>.</p>

<p>Putting all of the above together into a live Stack Snippet:</p>

<p></p><div class="snippet" data-lang="js" data-hide="true" data-console="true" data-babel="true">
<div class="snippet-code snippet-currently-hidden">
<pre class="snippet-code-js lang-js prettyprint-override"><code>const { useState } = React;

const Search = ({ filter }) =&gt; {
    return (
        &lt;div&gt;
            &lt;h1&gt;Search&lt;/h1&gt;
            &lt;form&gt;
                &lt;input onChange={event =&gt; filter(event.target.value)} /&gt;
            &lt;/form&gt;
        &lt;/div&gt;
    );
};

const PersonsList = ({ persons }) =&gt; (
    &lt;ul&gt;
        {(
            persons
                .filter(person =&gt; person.show)
                .map(({ name, phone }) =&gt; &lt;li key={name} &gt;{name} -- his/her telephone number: {phone}&lt;/li&gt;)
        )}
    &lt;/ul&gt;
);

const App = () =&gt; {
    const [persons, setPersons] = useState([
        { name: 'Arto Hellas', phone: '040-123456', show: true },
        { name: 'Ada Lovelace', phone: '39-44-5323523', show: true },
        { name: 'Dan Abramov', phone: '12-43-234345', show: true },
        { name: 'Mary Poppendieck', phone: '39-23-6423122', show: true }
    ]);

    const [{ name, phone, errorMessage = '' }, setNewFormInfo] = useState({ name: '', phone: '' });
    function addPerson(event) {
        event.preventDefault();

        const alreadyExists = persons.some(person =&gt; person.name === name);
        if (!alreadyExists)
            setPersons(persons.concat({ name, phone, show: true }));
        else
            setNewFormInfo({ name, phone, errorMessage: `${name} is already added to the list!` });
    }

    function filter(nameToFilter) {
        const nameToFilterLower = nameToFilter.toLowerCase();
        setPersons(persons.map(person =&gt;
            ({
                ...person,
                show: person.name.toLowerCase().includes(nameToFilterLower),
            })
        ));
    }

    return (
        &lt;div&gt;
            &lt;Search filter={filter} /&gt;
            &lt;h2&gt;Phonebook&lt;/h2&gt;
            &lt;form onSubmit={addPerson}&gt;
                &lt;div&gt;
                    name: &lt;input onChange={event =&gt; setNewFormInfo({ name: event.target.value, phone })} /&gt;
                    &lt;br /&gt;
                    number: &lt;input onChange={event =&gt; setNewFormInfo({ name, phone: event.target.value })} /&gt;
                &lt;/div&gt;
                &lt;div&gt;
                    &lt;button type="submit"&gt;add&lt;/button&gt;
                &lt;/div&gt;
                {(errorMessage &amp;&amp; &lt;div className="error"&gt;{errorMessage}&lt;/div&gt;)}
            &lt;/form&gt;
            &lt;h2&gt;Persons&lt;/h2&gt;
            &lt;PersonsList persons={persons} /&gt;
        &lt;/div&gt;
    );
};
ReactDOM.render(&lt;App /&gt;, document.getElementById("root"))</code></pre>
<pre class="snippet-code-css lang-css prettyprint-override"><code>.error {
  color: red;
}</code></pre>
<pre class="snippet-code-html lang-html prettyprint-override"><code>&lt;script crossorigin src="https://unpkg.com/react@16/umd/react.development.js"&gt;&lt;/script&gt;
&lt;script crossorigin src="https://unpkg.com/react-dom@16/umd/react-dom.development.js"&gt;&lt;/script&gt;
&lt;div id="root"&gt;&lt;/div&gt;</code></pre>
</div>
</div>


<blockquote>
  <p>Can I make persons a class?</p>
</blockquote>

<p>You <em>can</em>, but React <a href="https://reactjs.org/docs/hooks-faq.html#do-i-need-to-rewrite-all-my-class-components" rel="nofollow noreferrer">highly recommends</a> using hooks (and stateless functional components) when possible. They're easier to make sense of too, IMO.</p>

<blockquote>
  <p>in larger applications, each person would have methods and more variables</p>
</blockquote>

<p>If you want to encapsulate common functionality for <code>Persons</code>, you can easily do so by putting it into its own file and defining those functions you need inside that file (or by importing them), eg:</p>

<pre><code>// example helper function
const transformName = name =&gt; name.toUpperCase();
export const PersonsList = ({persons}) =&gt; 
  // ...
  &lt;li key={name} &gt;{transformName(name)} -- his/her telephone number: {phone}&lt;/li&gt;
  // ...
</code></pre>

<p>There are a <a href="https://reactjs.org/docs/hooks-faq.html#do-hooks-cover-all-use-cases-for-classes" rel="nofollow noreferrer">few rare cases</a> for which classes must still be used, but none of those circumstances are relevant here.</p>
    </div>