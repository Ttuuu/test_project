<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>I realized that while typing this, you should look into the <a href="https://en.wikipedia.org/wiki/Birthday_attack" rel="nofollow noreferrer">Birthday Attack</a>, which will probably much more elaborated than my answer, lol.</strong></p>

<p>Considering your have 36 bits of data, it means you have a total number of possibilities of <span class="math-container">\$2^{36} = 68719476736\$</span>. Based on the <a href="https://en.wikipedia.org/wiki/Pigeonhole_principle" rel="nofollow noreferrer">Pigeonhole principle</a>, if you compared the hashed of 68719476736 different strings, you'd get a collision.</p>

<p>So that's easy! All you need to do is run this (pseudocode): </p>

<pre><code>hashset = (new hashset that uses your hashing algorithm)
for(i = 0; i &lt; 68719476736 + 1; i++) {

    if hashset.contains(string(i)) break; 

    hashset.add(string(i));
}

print("This took " + i + " tried!")
</code></pre>

<p>With this, you're <strong>guaranteed</strong> to get a collision. <strong>But</strong> there's a problem. If every iteration took 100 milliseconds, you'd need about 217 years to get a solution. Tell your teacher your great-great-grandchildren will get back to you with a solution. You could also buy 2000 computers to run this in ~40 days.</p>

<p>My algorithm is pretty much guaranteed to finish (assuming none of the computers crash in any way), yours isn't. This is more of a lesson on "how to test things", which is valuable for developers. When you want to test something, try not to be random. The thing with your algorithm is that maybe you wouldn't ever get collisions. I understand that you kind of need randomness if you want this to finish running this one day.</p>

<p>So the question is, what could we do to make this better?</p>

<p>We could check about how many different strings we'd need to get a good enough chance there's a collision. It's kind of the <a href="https://en.wikipedia.org/wiki/Birthday_problem" rel="nofollow noreferrer">Birthday Problem</a> which gives us an easy way to calculate what are the chances n different persons have the same birthday in a group of m persons.</p>

<p>We can use the formula under <em>Approximation of number of people</em> and adapt it to our problem to understand that if we had 68719476736 + 1 strings in our possession (for example, every number between 1 and 68719476736 + 1), you'd need to pick 308652 of those to have about 50% chances of having a collision.</p>

<p>What you could try is randomly take 308652 numbers between 1 and 68719476736 + 1 and hash them to find a collision. Repeat this as long as you don't have a collision. </p>

<p>The pseudocode would look like this :</p>

<pre><code>generator = RandomBigIntGenerator()
numbers = []

for(i = 0; i &lt; 308652; i++) {
    numbers.add(generator.random(1,68719476736+1))
}

hashset = {} (With your hashing function)
for n in numbers {
    if hashset.contains(n) {
        print("yay done");
        break;
    }
    hashset.add(m);
}
</code></pre>

<p>All in all, you can hope to have collisions, but you need computing power.</p>

<p>In a code review point of view :</p>

<ul>
<li>You need to keep track of the strings you already tried, they give you valuable information that can actually help you find collision.</li>
<li>Don't be <em>too</em> random when you create your strings.</li>
<li>Understand that 68719476736 is a biiggg number, but still so much smaller than the <strong>1461501637330902918203684832716283019655932542976</strong> possible values the SHA1 have :)</li>
</ul>
    </div>