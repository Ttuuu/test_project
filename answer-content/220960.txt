<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Review</h2>

<p>Don't trust parameters of public methods purely on their name <code>orderedArray</code>. I will address how to handle this further in this answer.</p>

<blockquote>
  <p>private static string AddDashesBetweenConsecutiveNumbers(int[]
  orderedArray) {</p>
</blockquote>

<hr>

<p>You mentioned </p>

<blockquote>
  <p>but this code has some disadvantages, especially in readability of the
  LINQ expression</p>
</blockquote>

<p>We could create a generalized Linq extension to allow for processing adjacent values in a sequence. This greatly improves readability of the calling code. </p>

<hr>

<h2>Proposed Solution</h2>

<p><a href="https://codereview.stackexchange.com/questions/219412/group-list-into-elements-with-same-value/220462#220462">My linq extension</a> (see answers) could be used for this kind of problem. It is an <em>analytical function</em> that orders the source sequence, runs over it with look-behind to the previous item, and accepts a predicate for joining adjacent items in a result set as part of the outer multiset.</p>

<pre><code>public static class LinqExtension
{
    public static IEnumerable&lt;IEnumerable&lt;TSource&gt;&gt; JoinBy&lt;TSource, TOrderKey, TKey&gt;(
        this IEnumerable&lt;TSource&gt; source,
        Func&lt;TSource, TOrderKey&gt; orderBy,
        Func&lt;TSource, TKey&gt; keySelector,
        Func&lt;TKey, TKey, bool&gt; join) {
        var results = new List&lt;List&lt;TSource&gt;&gt;();
        var orderedSource = new List&lt;TSource&gt;(source).OrderBy(orderBy).ToArray();

        if (orderedSource.Length &gt; 0) {
            var group = new List&lt;TSource&gt; { orderedSource[0] };
            results.Add(group);
            if (orderedSource.Length &gt; 1) {
                for (int i = 1; i &lt; orderedSource.Length; i++) {
                    var lag = orderedSource[i - 1];
                    var current = orderedSource[i];
                    if (join(keySelector(lag), keySelector(current))) {
                        group.Add(current);
                    }
                    else {
                        group = new List&lt;TSource&gt; { current };
                        results.Add(group);
                    }
                }
            }
        }

        return results;
    }
}
</code></pre>

<p>Rendering could also be forwarded to a seperate method for readability and seperation of concerns.</p>

<pre><code>private static string Render(IEnumerable&lt;IEnumerable&lt;int&gt;&gt; adjacentValuesMultiSet) 
{
    if (adjacentValuesMultiSet == null) return string.Empty;
    return string.Join(", ", adjacentValuesMultiSet.Select(group
        =&gt; group.Count() == 1 
            ? group.Single().ToString() 
            : string.Format("{0}-{1}", group.First(), group.Last())));
}
</code></pre>

<p>Your method can be rewritten as</p>

<pre><code>private static string AddDashesBetweenConsecutiveNumbers(IEnumerable&lt;int&gt; values)
{
    if (values == null) return string.Empty;
    var adjacentValuesMultiSet = values.JoinBy(
        x =&gt; x, // &lt;- the order by clause
        x =&gt; x,  // &lt;- the target property to check
        (previous, current) =&gt; previous == current - 1); // &lt;- the predicate
    return Render(adjacentValuesMultiSet);
}
</code></pre>

<p>Test case</p>

<pre><code>public static void Main()
{
    int[] array = { 11, 10, 12, 13, 15, 16, 19 }; // &lt;-- unordered
    Console.WriteLine(AddDashesBetweenConsecutiveNumbers(array));
}
</code></pre>
    </div>