<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I don't really see the necessity for <code>pandas</code> here. If your input files are only 10KB large, just parse them using vanilla Python:</p>

<pre><code>from pprint import pprint

SENTINEL = object()

def read_last_line(f):
    """Read the last line of an open file.
    Note: file must be opened in binary mode!
    Leaves the file pointer at the end of the file."""
    # https://stackoverflow.com/a/18603065/4042267
    if "b" not in f.mode:
        raise IOError("File must be opened in binary mode!")
    f.seek(-2, 2)              # Jump to the second last byte.
    while f.read(1) != b"\n":  # Until EOL is found...
        f.seek(-2, 1)          # ...jump back, over the read byte plus one more.
    return f.readline()

def parse_row(row, sep):
    """Decode, strip and split a binary data row using sep."""
    return row.decode("utf-8").strip().split(sep)

def parse(f, header_names, footer_names, group_names, sep="|"):
    """Parse an open file into payloads.
    Each payload has a header and footer dictionary using the respective
    names as keys and a groups dictionary parsed from the file.
    Assumes that the file is ordered correctly, i.e. lines of the same
    payload follow each other and group names are unique.
    Group names must also not appear as footer names.
    """
    footer = dict(zip(footer_names, parse_row(read_last_line(f), sep)))
    f.seek(0)
    header = dict(zip(header_names, parse_row(next(f), sep)))

    def new_payload():
        return {"header": header, "footer": footer, "groups": {}}

    payload = new_payload()
    for row in f:
        group, *data = parse_row(row, sep)
        if group in payload["groups"]:
            # this group already exists, must be a new payload
            yield payload
            payload = new_payload()
        try:
            assert len(group_names[group]) == len(data)
            payload["groups"][group] = dict(zip(group_names[group], data))
        except KeyError:
            # probably reached the footer, but better make sure:
            try:
                next(f)
            except StopIteration:
                break
            else:
                raise
    yield payload

if __name__ == "__main__":
    group_names = {'A': ('A1ValueKey', 'A2ValueKey', 'A3ValueKey'),
                   'B': ('B1ValueKey', 'B2ValueKey', 'B3ValueKey')}
    header_names = ('HeaderKeyG', 'HeaderKey1', 'HeaderKey2', 'HeaderKey3')
    footer_names = ('FooterKeyG', 'FootKey1', 'FootKey2', 'FootKey3')

    with open("file1.usr", "rb") as f:
        for payload in parse(f, header_names, footer_names, group_names):
            pprint(payload)
</code></pre>

<p>This is even a generator, so it can deal with arbitrarily large files (although I would expect <code>pd.read_csv</code> to be more optimized and therefore be faster for large files, as long as the resulting dataframe still fits into memory).</p>

<p>You don't say if you need both the multi-level representation and the payloads, I assumed you only need the latter, for which I think this gives the same output as your code (up to ordering of the dictionaries, since I used Python 3.6):</p>

<pre><code>{'footer': {'FootKey1': 'Footer1',
            'FootKey2': 'Footer2',
            'FootKey3': 'Footer3',
            'FooterKeyG': 'FooterG'},
 'groups': {'A': {'A1ValueKey': 'Entry1',
                  'A2ValueKey': 'Entry2',
                  'A3ValueKey': 'Entry3'},
            'B': {'B1ValueKey': 'Entry1',
                  'B2ValueKey': 'Entry2',
                  'B3ValueKey': 'Entry3'}},
 'header': {'HeaderKey1': 'Header1',
            'HeaderKey2': 'Header2',
            'HeaderKey3': 'Header3',
            'HeaderKeyG': 'HeaderG'}}
{'footer': {'FootKey1': 'Footer1',
            'FootKey2': 'Footer2',
            'FootKey3': 'Footer3',
            'FooterKeyG': 'FooterG'},
 'groups': {'A': {'A1ValueKey': 'Eggs',
                  'A2ValueKey': 'Sausage',
                  'A3ValueKey': 'Bacon'},
            'B': {'B1ValueKey': 'Bread',
                  'B2ValueKey': 'Lettuce',
                  'B3ValueKey': 'Tomato'}},
 'header': {'HeaderKey1': 'Header1',
            'HeaderKey2': 'Header2',
            'HeaderKey3': 'Header3',
            'HeaderKeyG': 'HeaderG'}}
{'footer': {'FootKey1': 'Footer1',
            'FootKey2': 'Footer2',
            'FootKey3': 'Footer3',
            'FooterKeyG': 'FooterG'},
 'groups': {'A': {'A1ValueKey': 'aa', 'A2ValueKey': 'bb', 'A3ValueKey': 'cc'},
            'B': {'B1ValueKey': 'dd', 'B2ValueKey': 'ee', 'B3ValueKey': 'ff'}},
 'header': {'HeaderKey1': 'Header1',
            'HeaderKey2': 'Header2',
            'HeaderKey3': 'Header3',
            'HeaderKeyG': 'HeaderG'}}
{'footer': {'FootKey1': 'Footer1',
            'FootKey2': 'Footer2',
            'FootKey3': 'Footer3',
            'FooterKeyG': 'FooterG'},
 'groups': {'A': {'A1ValueKey': '4aa',
                  'A2ValueKey': '4bb',
                  'A3ValueKey': '4cc'},
            'B': {'B1ValueKey': '4dd',
                  'B2ValueKey': '4ee',
                  'B3ValueKey': '4ff'}},
 'header': {'HeaderKey1': 'Header1',
            'HeaderKey2': 'Header2',
            'HeaderKey3': 'Header3',
            'HeaderKeyG': 'HeaderG'}}
</code></pre>

<p>Note that I added some <a href="https://www.python.org/dev/peps/pep-0257/" rel="nofollow noreferrer">docstrings</a> and an <a href="https://stackoverflow.com/questions/419163/what-does-if-name-main-do"><code>if __name__ == "__main__":</code> guard</a>, although I'm pretty sure you already know about those.</p>
    </div>