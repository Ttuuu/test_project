<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Data Structure</h1>

<p>I think what you're looking for is simply just a <a href="https://msdn.microsoft.com/en-us/library/6sh2ey19(v=vs.110).aspx" rel="nofollow noreferrer"><code>List</code></a>.  Looking up the time complexities for <code>List</code>, we can <a href="http://c-sharp-snippets.blogspot.com/2010/03/runtime-complexity-of-net-generic.html" rel="nofollow noreferrer">see here</a>:</p>

<ul>
<li>Add O(1)  [note: amortized, the O(n) on 'beyond capacity' is negligible]</li>
<li>Remove/RemoveAt O(n)</li>
<li>Item[i]/Find(i) O(1)</li>
</ul>

<p>Just a note: you can verify these complexities in the MSDN(for example, going to <a href="https://msdn.microsoft.com/en-us/library/3wcytfd1(v=vs.110).aspx" rel="nofollow noreferrer"><code>List&lt;T&gt;.Add</code></a>, one of the remarks will tell you the complexities), but I found the above table to be a nice and succinct way of showing multiple collections.</p>

<p>Not to attack Heslacher's implementation, but I found <a href="https://msdn.microsoft.com/en-us/library/7w3e62a8(v=vs.110).aspx" rel="nofollow noreferrer"><code>IndexOf</code></a> to be O(n).  I'm always dubious of roll-your-own array implementations.</p>

<p>Based on your problem description, though, the two main things you're going to be using are <code>Add</code> and <code>Item[]</code>, and since those are O(1) I think List is an easy and efficient candidate.  </p>

<h1>Alternative - Unique Elements</h1>

<p>If you want to guarantee uniqueness(no duplicates), then there's <a href="https://msdn.microsoft.com/en-us/library/bb359438.aspx" rel="nofollow noreferrer"><code>HashSet&lt;T&gt;</code></a>.  <a href="https://stackoverflow.com/questions/183685/c-sharp-set-collection">Here's</a> an SO question on it.  The time complexities are essentially the same.  The catch is that if T hashes poorly and there's a lot of collision, the lookup is <em>up to</em> O(n)(this would mean all objects in the collection have the same hash and you essentially have an array).  Strings typically hash well, so this shouldn't be a problem.</p>

<h1>Code Review</h1>

<p>I hate to say it but I just don't have anything to review.  To be honest this question would do just as well or better on the Programmers SE.  You covered the coding style with Heslacher, so other than that your code is well-formed, easily understood and there's not a whole lot of it.  I could nitpick that <code>Pool</code> seems to be an <code>Add</code> and a <code>Get</code>, but the way you use it makes sense, and separating them would probably make the code more complex and ugly.  At this point I'm just rambling because this <em>is</em> the code review SE...but I got nothing.</p>

<p>I focused a bit on complexities because your original problem included space complexity(double the strings, double the memory), and time complexities may not actually make a huge difference at run-time for you.  So what you choose - array, list, hashset, etc - is really up to you and your environment.</p>
    </div>