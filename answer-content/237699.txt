<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Since I think this is worth more than just a comment on another answer, in your <code>codes_from_csv</code> you are (ab)using the new walrus operator. Assignment expressions are not the right thing to do here. What they do is assign local variables (outside of the function!), and then the values of those local variables (but not their names) are passed by position to the function.</p>

<p>A small example of how this can lead to unexpected results:</p>

<pre><code>def f(a, b):
    return a // b

# Normal positional arguments, order matters
f(3, 1)
# 3
f(1, 3)
# 0

# Keyword arguments, order does not matter, only name
f(a=3, b=1)
# 3
f(b=1, a=3)
# 3

# Using the walrus operator, variables are assigned,
# but are passed as positional arguments.
# The names of the (external) variables do not matter to the function!
f(a:=3, b:=1)
# 3
f(b:=1, a:=3)
# 0
</code></pre>

<p>In other words the last example is equivalent to:</p>

<pre><code>b = 1
a = 3
f(b, a)
# 0
</code></pre>

<p>This might be what you want, but since you are using the names of the arguments of the function, it probably isn't. In your code it just so happens to work because you use the same order as in the function definition. This might be a source of bugs at some future point, which could be very hard to find!</p>
    </div>