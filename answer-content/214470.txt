<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First, congratulations on getting it to work. Most falter earlier.<br>
Now, let's see what you can improve:</p>

<ol>
<li><p>Generally, you use multiple files to enable separate compilation, and in line with that you <em>don't</em> #include source-files, only header-files.</p></li>
<li><p>Please, please ensure your files are consistently lower-case, even if Windows doesn't care. It's not quite as bad for source-files as for header-files, as <em>nobody should #include them</em>.</p></li>
<li><p><code>using namespace std;</code> is plain evil. That namespace is not designed for inclusion, thus there is no comprehensive, fixed and reliable list of its contents.<br>
See "<a href="https://stackoverflow.com/questions/1452721/why-is-using-namespace-std-considered-bad-practice">Why is “using namespace std;” considered bad practice?</a>" for details.</p></li>
<li><p>You don't use anything from <code>&lt;iomanip&gt;</code>, so don't include it.</p></li>
<li><p><code>usrs</code> is pretty useless. Just use a <a href="https://en.cppreference.com/w/cpp/container/array" rel="nofollow noreferrer"><code>std::array&lt;User, 2&gt;</code></a> and be done with it. As a bonus, you no longer need a <code>std::list</code>.</p></li>
<li><p>Try to initialize variables on definition. As a bonus, you can use <code>auto</code>, thus avoiding error-prone repetition of useless trivia.</p></li>
<li><p>There are far simpler and more efficient ways to parse a number than creating and destroying a <code>std::stringstream</code>. For example <a href="https://en.cppreference.com/w/cpp/string/basic_string/stol" rel="nofollow noreferrer"><code>std::stoi()</code></a>.</p></li>
<li><p>Never assume input is valid. Even if it should have the right format, a surprise, it might still ask for an illegal operation.</p></li>
<li><p>A block is a full statement. Adding an additional semicolon is valid most of the time, because it is its own empty statement. You will get problems with <code>else</code>-branches though.</p></li>
<li><p>If you output single characters, prefer character literals to length-1 string-literals. It might be marginally more efficient.</p></li>
<li><p>It's acceptable to indent access-specifiers one level. But then all members should be indented two levels, not only those after the first access-specifier.</p></li>
<li><p>Use the ctor-init-list to initialise members, though prefer in-class-initialisers if you can. Inside a ctor-body is far too late for initialisation.</p></li>
</ol>

<p>That should be enough to point you in the right direction.</p>
    </div>