<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Memory Usage</h1>
<p>When reading from the file, you can assign create the list there instead of reading lines, splitting them, and appending to the list later in the program. It can be as easy as this</p>
<pre><code>with open('input.txt') as file:
    outages = [line.split("|") for line in file]
</code></pre>
<h1>Variable Naming</h1>
<p><a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">PEP-8</a> guidelines say that variables should be in <code>snake_case</code>. The only time you should use <code>PascalCase</code> is when dealing with classes. Since you're dealing with specific outages in London, you can simply remove London from the variable names, making them shorter.</p>
<pre class="lang-py prettyprint-override"><code>LonUndOutages -&gt; outages
LonUndStations -&gt; stations
LonUndLines -&gt; lines
</code></pre>
<h1>Creating Lists with Loops</h1>
<p>Like shown above, when you have</p>
<pre><code>my_list = []
for item in other_list:
    my_list.append(item)
</code></pre>
<p>This can be shortened to one line</p>
<pre><code>my_list = [item for item in other_list]
</code></pre>
<h1>Simplifying <code>if/else</code></h1>
<p>This</p>
<pre><code>if not Prob1Output:
    print("There were no stations affected by an outage on July 10, 2019")
else:
    print(Prob1Output)
</code></pre>
<p>can become this</p>
<pre><code>print("There were no stations affected by an outage on July 10, 2019" if not Prob1Output else Prob1Output)
</code></pre>
<p>Looks neater and less chunky.</p>
<h1>Formatting Strings</h1>
<p>You can directly include variables in your strings without having to type cast them, using <code>f""</code>. From this</p>
<pre><code>print("During the period between July 10, 2017 and November 15, 2017 there were " + str(len(LonUndStations))
      + " station(s) affected")
</code></pre>
<p>to this</p>
<pre><code>print(f"During the period between July 10, 2017 and November 15, 2017 there were {len(stations)} station(s) affected.")
</code></pre>
<h1>Too Many Comments</h1>
<p>Comments should mainly be used to describe code that may be hard to comprehend, like an algorithm, or why you chose to do something. Comments like this</p>
<pre><code>import datetime  # import built in datetime module for problem 2
with open('input.txt') as file:  # read the input file into a list of lines
    file_input = file.read().splitlines()

# split the file input on the pipe
LonUndOutages = []
for var in file_input:
    LonUndOutages.append(var.split("|"))
</code></pre>
<p>Anyone reading the code and see what it does, without the comments. Comments like these can decrease the readability of your code, as readers see more bulk when reading your code.</p>
    </div>