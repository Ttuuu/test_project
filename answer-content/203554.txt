<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>We can simplify <code>doesFileExist()</code> somewhat.  When we see code like <code>if (condition) return true; else return false;</code> we can turn that into <code>return condition;</code>.  In this case, we need to invert the condition, because the <code>return</code> statements are the other way around:</p>

<pre><code>bool doesFileExist(string name)
{
    ifstream file(name.c_str());
    return file;
}
</code></pre>

<p>We don't need a copy of <code>name</code> to modifiy, so we can accept a const reference, and there's no need to convert to a C-style string, as <code>std::ifstream</code> accepts a <code>std::string</code> filename (since C++11):</p>

<pre><code>bool doesFileExist(const std::string&amp; name)
{
    std::ifstream file(name);
    return file;
}
</code></pre>

<p>We can make it terser (to the point where we arguably no longer need a named function for it) by not naming the stream:</p>

<pre><code>bool doesFileExist(const std::string&amp; name)
{
    return std::ifstream{name};
}
</code></pre>

<hr>

<p>Having said all that, this function will only return true if the file is <em>readable</em>; if the file exists, but we don't have read permissions, then it will wrongly return false.  Also, the absence of a file at one moment in time is no guarantee that it will still not exist a few instructions later when we attempt to write to it.  The solution for that problem usually involves platform-specific code (e.g. POSIX <code>O_CREAT|O_EXCL</code>), so I won't go into detail here.</p>
    </div>