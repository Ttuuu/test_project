<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Remove the last item</h2>

<p>You are not going to avoid the stepping over each item at least once. However the replace and be avoided by removing the last item.</p>

<h2>One iteration</h2>

<p>Use a for loop,  building the string as you step over each item. Before the loop <code>pop</code> the last item, then after the loop <code>push</code> it back to keep the array intact.  You can then add the last item after the conjunction.</p>

<p>I will use <code>options</code> rather than <code>alternatives</code> as in the bottom example it is more semantically fitting.</p>

<pre><code>function toHumanReadable(options) {
    const toStr = opt =&gt; `"${Array.isArray(opt) ? `${opt[0]}" with "${opt[1]}` : opt}"`;
    const last = options.pop(); 
    var res = 'Consider using ';
    for (const opt of options) { res += toStr(opt) + ', ' }
    options.push(last);
    return res + `or ${toStr(last)} instead.`; 
}
const alt1 = [ "flex", "float" , ["background-size", "background-image" ] ];
const readable = toHumanReadable(alt1);
</code></pre>

<p>or you can make options an argument array, and don't need to push the last item back onto the array. It does mean an extra iteration.</p>

<pre><code>function toHumanReadable(...options) {
    const toStr = opt =&gt; `"${Array.isArray(opt) ? `${opt[0]}" with "${opt[1]}` : opt}"`;
    const last = options.pop(); 
    var res = 'Consider using ';
    for (const opt of options) { res += toStr(opt) + ', ' }
    return res + `or ${toStr(last)} instead.`; 
}

const alt1 = [ "flex", "float" , ["background-size", "background-image" ] ];
const readable = toHumanReadable(...alt1);
</code></pre>

<h2>Reusable</h2>

<p>I am guessing this is just one of a many similar human readable strings. To make the function reusable you can add some arguments</p>

<p>The next version requires two iterations, but does not need the replace. This time the last item is popped from a copy of the options array and the conjunction is added via joining the joined options and the last option.</p>

<pre><code>function toHumanReadable(options, open, close, conjunction) {
    options = options.map(opt =&gt; Array.isArray(opt) ? opt.join('" with "') : opt);
    const last = options.pop();
    return `${open} "${[options.join('", "'), last].join(`", ${conjunction} "`)}" ${close}`;
}

const alt1 = [ "flex", "float" , ["background-size", "background-image" ] ];
const readable = toHumanReadable(alt1, "Consider using", "instead.", "or");
</code></pre>

<h2>Example usage</h2>

<p></p><div class="snippet" data-lang="js" data-hide="true" data-console="true" data-babel="false">
<div class="snippet-code snippet-currently-hidden">
<pre class="snippet-code-js lang-js prettyprint-override"><code>setTimeout(()=&gt; { // just for snippet to put relevant code at top

  const alt1 = [ "flex", "float" , ["background-size", "background-image" ] ];
  const alt2 = [ "foo", ["bar","poo"], ["min-width", "max-height" ] ];
  log(toHumanReadable(alt1, sentenceTypes.anyOf));
  log(toHumanReadable(alt2, sentenceTypes.oneOf));
  log(toHumanReadable(alt1, sentenceTypes.allOf));   
},0);

function toHumanReadable(options, {open, close, conjunction}) {
    options = options.map(opt =&gt; Array.isArray(opt) ? opt.join('" with "') : opt);
    const last = options.pop();
    return `${open} "${[options.join('", "'), last].join(`", ${conjunction} "`)}" ${close}`;
}

const sentenceTypes = {
   create(name, open, close, conjunction) { this[name] = {open, close, conjunction} }
};
sentenceTypes.create("anyOf", "Consider using", "instead.", "or");
sentenceTypes.create("oneOf", "Use any one of", "to stay consistent.", "or");
sentenceTypes.create("allOf", "All the following", "are required.", "and");
function log(t){txt.appendChild(Object.assign(document.createElement("div"),{textContent:t}))}</code></pre>
<pre class="snippet-code-css lang-css prettyprint-override"><code>body {
font-family: arial;
font-size: small;
}</code></pre>
<pre class="snippet-code-html lang-html prettyprint-override"><code>&lt;div id="txt"&gt;&lt;/div&gt;</code></pre>
</div>
</div>

    </div>