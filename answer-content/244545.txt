<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Variable linkage</h2>
<pre><code>bb first;
</code></pre>
<p>looks like it's in a header file. That means every time you include it from a different module, it will be re-declared with its own separate address. That's unlikely to be what you want. Instead, declare it <code>extern</code>, and then define it once in a C file.</p>
<p>Beyond that, though: why declare it in the header at all? It's an implementation detail that you shouldn't expose to your users.</p>
<p>Further, it looks like absolutely everything - including your function bodies - is in the header. Maybe your theory is that inlining everything produces faster code than having a more standard .c/.h layout. If this library is to be included in another project as a .so/.dll there is some non-zero chance that that's the case, but if this library is included in-source with any kind of self-respecting compiler that has whole program optimization, that chance drops to zero. Basically, I would consider this premature optimization and would be surprised if it's worth doing this over having a separated .c that better isolates your design and reduces code re-declaration.</p>
<h2>Nested includes</h2>
<p>These:</p>
<pre><code>#include &lt;stdbool.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;sys/mman.h&gt;
#include &lt;errno.h&gt;
</code></pre>
<p>need to be trimmed down to only what's strictly necessary to declare the symbols in your <code>lalloc.h</code>. <code>errno</code> can definitely be removed; <code>stdbool</code> cannot; and I'm unsure about the others. The trimmed includes would be moved to the .c.</p>
<h2>stderr</h2>
<pre><code>    printf("%s", sys_errlist[errno]);
</code></pre>
<p>should likely be <code>fprintf</code>ed to <code>stderr</code> instead. Also, <code>fprintf</code> is not necessary; you can use <code>puts</code>/<code>fputs</code>.</p>
<h2>Mystery error codes</h2>
<pre><code>    exit(40);
</code></pre>
<p>should get a <code>#define</code>.</p>
<h2>Yes, goto is actually bad</h2>
<p>This:</p>
<pre><code>while (1) {
    tryGetNext:;
    // ...
}

if (frsize &lt; (size + sizeof(memblock))) {
    goto tryGetNext;
}
</code></pre>
<p>just demonstrates that your <code>while</code> has not adequately captured what you're <em>actually</em> looping over. An outer loop should include everything everything up to this <code>goto</code>; the existing <code>while</code> should become an inner loop and the <code>goto</code> should go away.</p>
<p>An example is:</p>
<pre><code>size_t frsize;
do {
    while (!sb-&gt;free) {
        if (sb-&gt;next == NULL) {
            /* Reached end of big block */
            return NULL;
        }
        sb = sb-&gt;next;
    }

    /* Remaining space in small block */
    frsize = sb-&gt;end - (((void*)sb) + sizeof(memblock));

    /* If there isn't enough space to fit a new small block
     * find another block that will fit one */
} while (frsize &gt;= size + sizeof(memblock));
</code></pre>
<p>It's not strictly equivalent because in the original version you skip a <code>free</code> check under certain conditions. I'm not clear on whether this is a problem.</p>
<h2>Pointer math</h2>
<pre><code>size_t frsize = sb-&gt;end - (((void*)sb) + sizeof(memblock));
</code></pre>
<p>seems a little awkward. Can you not just:</p>
<pre><code>size_t frsize = (sb-&gt;end - sb - 1)*sizeof(memblock);
</code></pre>
<p>I'm surprised that the original version - subtracting non-void and void pointers - is even allowed.</p>
<h2>Forever-loops</h2>
<p>You mix styles:</p>
<pre><code>do { } while (1);

while (1) { }
</code></pre>
<p>I don't love either. The clearest to me is usually <code>while (true) { }</code>, which is possible given that you have <code>stdbool</code>.</p>
<p>In the first case it shouldn't actually be a <code>while</code> loop;</p>
<pre><code>unsigned int ind = 0;
do {
    ind++;
} while (1);
</code></pre>
<p>I find would be cleaner as</p>
<pre><code>for (unsigned int ind = 0;; ind++)
</code></pre>
    </div>