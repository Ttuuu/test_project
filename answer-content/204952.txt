<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Spell-check: <code>ReleaseIamge</code> should presumably be <code>ReleaseImage</code>; <code>uique</code> should be <code>unique</code>.</p>

<hr>

<pre><code>    private static void ReleaseMemoryStream(int id)
    {
        MemoryStream ms = null;
        if (images.TryGetValue(id, out ms) &amp;&amp; ms != null)
        {
            images[id].Dispose();
            images[id] = null;
        }
    }
</code></pre>

<p>It's not entirely clear to me why <code>images[id] = null;</code> is not <code>images.Remove(id);</code> (or perhaps <code>images.TryRemove(id, out _);</code>).</p>

<hr>

<pre><code>            // If the dictionary is empty we can reset the currentId
            if (images.Count == 0)
            {
                currentId = 0;
</code></pre>

<p>This is too clever for my taste. Why not move the <code>currentId = 0</code> to <code>ReleaseAllImages()</code>? (Obviously that is dependent on not implementing my previous suggestion or my next suggestion).</p>

<hr>

<pre><code>            id = images.Where(item =&gt; item.Value == null).FirstOrDefault().Key;
</code></pre>

<p>Ugh. Linear scan (and inside a lock, at that). This could be replaced with a constant-time operation using a linked list of IDs which are available for recycling.</p>
    </div>