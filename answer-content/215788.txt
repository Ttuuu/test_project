<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>One could consider at least the following points:</p>

<ul>
<li><p>Instead of including <code>&lt;stdlib.h&gt;</code>, I'd include <code>&lt;cstdlib&gt;</code>.</p></li>
<li><p>In <code>getRandDart()</code>, it <em>might</em> in this case be more readable to do <code>static_cast&lt;double&gt;(rand()) / RAND_MAX;</code> instead of multiplying by <code>1.0</code>.</p></li>
<li><p>In the for loop, all of <code>x</code>, <code>y</code> and <code>d</code> can be const, so I'd make them const. This has the potential to protect the programmer from unintended mistakes, and can sometimes allow the compiler to optimize better.</p></li>
<li><p>When you increment by one (in <code>countInSquare += 1;</code>), it makes more sense to use the <code>++</code> operator, i.e., to just write <code>++countInSquare</code>. This is more idiomatic and protects us from unintended mistakes: ++ conveys the meaning of increment (by one), whereas with <code>+=</code> we might accidentally write <code>+= 2;</code> and that would be perfectly valid (but not what we wanted).</p></li>
<li><p>Regardless of the above point, notice that during the for-loop, it holds that <code>iteration == countInSquare</code>. So strictly speaking, the variable <code>countInSquare</code> is unnecessary and could be replaced by just <code>iteration</code> when needed.</p></li>
<li><p>You could consider making the number of iterations and the second operand of the <code>%</code> operand constants to allow for easier modification and perhaps to slightly improve readability.</p></li>
<li><p>Instead of typing <code>(4.0 * countInCircle / countInSquare)</code> twice, we could make a function that takes the two variables as parameters. This would allow us to save some typing, and again to protect us from unintended mistakes. </p></li>
</ul>
    </div>