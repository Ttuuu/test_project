<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I see a number of things that may help you improve your code.</p>

<h2>Fix the typo</h2>

<p>It's probably a cut-and-paste error rather than a real error, but in the posted version of the code, the <code>Screen::RenderScr()</code> function is missing the closing brace.</p>

<h2>Use consistent formatting</h2>

<p>The code as posted has inconsistent indentation which makes it hard to read and understand. Pick a style and apply it consistently. </p>

<h2>Don't use <code>system("cls")</code></h2>

<p>There are two reasons not to use <code>system("cls")</code> or <code>system("pause")</code>.  The first is that it is not portable to other operating systems which you may or may not care about now.  The second is that it's a security hole, which you absolutely <strong>must</strong> care about.  Specifically, if some program is defined and named <code>cls</code> or <code>pause</code>, your program will execute that program instead of what you intend, and that other program could be anything.  First, isolate these into a seperate functions <code>cls()</code> and <code>pause()</code> and then modify your code to call those functions instead of <code>system</code>.  Then rewrite the contents of those functions to do what you want using C++.  For example, if your terminal supports <a href="http://en.wikipedia.org/wiki/ANSI_escape_code" rel="noreferrer">ANSI Escape sequences</a>, you could use this:</p>

<pre><code>void cls()
{
    std::cout &lt;&lt; "\x1b[2J";
}
</code></pre>

<h2>Eliminate "magic numbers"</h2>

<p>This code is littered with "magic numbers," that is, unnamed constants such as 10, 21, etc.  Generally it's better to avoid that and give such constants meaningful names.  That way, if anything ever needs to be changed, you won't have to go hunting through the code for all instances of "21" and then trying to determine if this <em>particular</em> 21 means the width of the screen or some other constant that happens to have the same value.</p>

<h2>Use include guards</h2>

<p>There should be an include guard in each <code>.h</code> file.  That is, start the file with:</p>

<pre><code>#ifndef SCREEN_H
#define SCREEN_H
// file contents go here
#endif // SCREEN_H
</code></pre>

<p>That way you don't have to (and shouldn't!) have constructs like these:</p>

<pre><code>#ifndef Map_h
#include "Map.h"
#endif 
</code></pre>

<h2>Use only necessary <code>#include</code>s</h2>

<p>The <code>#include &lt;stdlib.h&gt;</code> line in <code>MainChar.cpp</code> is not necessary and should be removed.  Generally speaking, you should seek only have necessary <code>#include</code>s in your code.</p>

<h2>Make data members <code>private</code></h2>

<p>All of the data members of the classes are currently <code>public</code>, which is not a good design.  If you need accessors, you could use simple <code>const</code> ones accessor functions that allow for safe access to a classes internal data.  Better yet is to make it so that other classes never need to know or care about the internal functioning of the class.</p>

<h2>Rethink your class design</h2>

<p>The <code>Map</code> class should use a constructor to fill in the data rather than a help function, since a <code>Map</code> without data is pretty useless.  Similarly, think about minimizing data sharing (as mentioned above) and what a minimal but sufficient interface might be.</p>

<h2>Think about the user</h2>

<p>There is no obvious way to gracefully exit the program.  I'd suggest addding to the <code>switch</code> in <code>main()</code> to control when the program is done.  </p>

<h2>Use whitespace to improve readability</h2>

<p>Lines like this:</p>

<pre><code>for (int i=0;i&lt;21;i++)
</code></pre>

<p>become much easier to read with a little bit of whitespace:</p>

<pre><code>for (int i = 0; i &lt; 21; i++)
</code></pre>

<h2>Pass by const reference where practical</h2>

<p>The first argument to <code>RenderScr</code> is a <code>Map</code> but that causes the entire map to be duplicated.  Better would be to make it <code>const Map &amp;</code> because it is not modified and it doesn't need to be duplicated.  </p>

<h2>Omit <code>return 0</code></h2>

<p>When a C++ program reaches the end of <code>main</code> the compiler will automatically generate code to return 0, so there is no reason to put <code>return 0;</code> explicitly at the end of <code>main</code>.</p>
    </div>