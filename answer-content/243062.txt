<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Overall, that looks good to me. A few nitpicks, however, follow:</p>

<p><strong>Advice 1</strong></p>

<pre><code>#include&lt;iostream&gt;
#include&lt;unordered_map&gt;
#include&lt;vector&gt;
#include&lt;string&gt;
</code></pre>

<p>I would put a space between <code>e</code> and <code>&lt;</code>. Also, I would sort the rows alphabetically, so that we get:</p>

<pre><code>#include &lt;iostream&gt;
#include &lt;string&gt;
#include &lt;unordered_map&gt;
#include &lt;vector&gt;
</code></pre>

<p><strong>Advice 2: One template per file</strong></p>

<p>I would extract away the <code>main</code> and put the entire disjoint set template into its own file; call it <code>DisjointSet.hpp</code> to begin with.</p>

<p><strong>Advice 3: Protect your header files from multiple inclusion</strong></p>

<p>I would most definitely put the header guards in <code>DisjointSet.hpp</code> so that it looks like this:</p>

<pre><code>#ifndef COM_STACKEXCHANGE_RUSIRU_UTIL_HPP
#define COM_STACKEXCHANGE_RUSIRU_UTIL_HPP
.
. Your funky DisjointSet.hpp code here. :-)
.
#endif // COM_STACKEXCHANGE_RUSIRU_UTIL_HPP
</code></pre>

<p><strong>Advice 4: "Package" your code into namespaces</strong></p>

<p>I have a habit of putting my data structures into relevant namespaces in order to avoid name collisions with other people's code:</p>

<pre><code>namespace com::stackexchange::rusiru::util {
    template&lt;class T&gt;
    class DisjointSet {
        ...
    };
}
</code></pre>

<p><strong>Advice 5: Remove minor noise</strong></p>

<pre><code>unordered_map&lt; T, T&gt; parent; 
unordered_map&lt; T, int&gt;rank;
</code></pre>

<p>I would write:</p>

<pre><code>unordered_map&lt;T, T&gt; parent;
unordered_map&lt;T, int&gt; rank;
</code></pre>

<p>Note the placement of spaces!</p>

<p><strong>Advice 6: Arbitrary method naming scheme</strong></p>

<p>Essentially, you have <code>makeSet</code>, <code>is_connected</code>, <code>Union</code>. That's three different method naming schemes right there; choose one and stick to it. For example, <code>makeSet</code>, <code>isConnected</code>, <code>union</code>.</p>

<p><strong>Advice 7: Printing booleans to <code>stdout</code></strong>:</p>

<p>You can do <code>cout &lt;&lt; std::boolalpha &lt;&lt; ...;</code> in order to print <code>true</code>/<code>false</code>.</p>

<p><strong>Advice 8: Don't pollute your namespace</strong></p>

<p>Generally speaking, <code>using namespace std;</code> is not what you may see in professional C++ code. Consider using individual <code>use</code>s such as:</p>

<pre><code>using std::cout;
using std::endl;
</code></pre>

<p><strong>Putting all together</strong></p>

<p>Overall, I had this in mind:</p>

<p><strong><code>DisjointSet.hpp</code></strong></p>

<pre><code>#ifndef COM_STACKEXCHANGE_RUSIRU_UTIL_HPP
#define COM_STACKEXCHANGE_RUSIRU_UTIL_HPP

#include &lt;iostream&gt;
#include &lt;string&gt;
#include &lt;unordered_map&gt;
#include &lt;vector&gt;

namespace com::stackexchange::rusiru::util {

    using std::boolalpha;
    using std::cout;
    using std::endl;
    using std::string;
    using std::unordered_map;
    using std::vector;

    template&lt;typename T&gt;
    class DisjointSet {

    private:

        unordered_map&lt;T, T&gt; parent;
        unordered_map&lt;T, int&gt; rank;

        // find the root
        T root(T i) {
            if (i != parent[i]) parent[i] = root(parent[i]);
            return parent[i];
        }

    public:

        // initialize the parent map
        void makeSet(T i) {
            parent[i] = i;
        }
        // check for the connectivity
        bool isConnected(T p, T q) {
            return root(p) == root(q);
        }
        // make union of two sets
        void union(T p, T q) {

            T proot = root(p);
            T qroot = root(q);

            if (proot == qroot) return;

            if (rank[proot] &gt; rank[qroot]) {
                parent[qroot] = proot;
            }
            else {
                parent[proot] = qroot;
                if (rank[proot] == rank[qroot]) rank[qroot]++;
            }
        }
    };
}

#endif // COM_STACKEXCHANGE_RUSIRU_UTIL_HPP
</code></pre>

<p><strong><code>main.cpp</code></strong></p>

<pre><code>#include "DisjointSet.hpp"
#include &lt;iostream&gt;
#include &lt;string&gt;
#include &lt;vector&gt;

using std::boolalpha;
using std::cout;
using std::endl;
using std::string;
using std::vector;
using com::stackexchange::rusiru::util::DisjointSet;

int main() {
    vector&lt;string&gt; arr = { "amal", "nimal", "kamal", "bimal", "saman" };
    DisjointSet&lt;string&gt; dis; // create a disjoint set object

    for (const string x : arr) {
        dis.makeSet(x); // make the set
    }

    dis.union("amal", "kamal"); // create connections
    dis.union("kamal", "nimal");

    cout &lt;&lt; boolalpha &lt;&lt; dis.isConnected("amal", "nimal") &lt;&lt; endl; // check the connectivity.
    cout &lt;&lt; dis.isConnected("bimal", "amal") &lt;&lt; endl;
    return 0;
}
</code></pre>
    </div>