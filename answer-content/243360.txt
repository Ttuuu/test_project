<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Specific suggestions</h2>

<ol>
<li>Usually when you find yourself numbering variables it's time to put all of them in an iterable of some sort. In your case I would simply inline <code>my_img1</code> etc. into <code>image_list</code>.</li>
<li>Usually names like <code>images</code> would be used instead of <code>image_list</code>. Python is a duck typed language, so it doesn't really matter which type of iterable you use for the code which does the iterating.</li>
<li><p>Rather than running the main code like <code>root.mainloop()</code> the Pythonic way to do it is this:</p>

<pre><code>if __name__ == "__main__":
    main()
</code></pre>

<p>This ensures that the code doesn't run when importing from your file, making it possible to import into a bigger program.</p></li>
<li>Importing <em>everything</em> from a module is considered an antipattern - it makes it easier to end up with name collisions and it makes it harder to see at a glance where something was imported from.</li>
<li>Refer to existing data structures whenever possible. One example is <code>if image_number == 5</code>, which would be better as <code>if image_number == len(image_list)</code>.</li>
<li>Avoid doing unnecessary work. For example, you create an object and assign it to <code>button_forward</code>, then you check whether you have to create a <em>different</em> object to assign to the same variable, in which case the original work was wasted (or in the worst case, had detrimental side effects). I would instead use an <code>if</code>/<code>else</code> to assign <code>button_forward</code> only once.</li>
<li><code>global</code>s are considered a big code smell these days. A preferable pattern is to pass around exactly the values which each function/method needs. That way the code is much easier to debug. In fact, this is pretty much the perfect example of something which should be encapsulated in one or more classes. That way you have a natural place to keep track of state like <code>image_number</code>, and won't have to pass it around between methods.</li>
<li>It doesn't seem like a stretch that the images would be the user input to this application. If so it would be better to provide them using <a href="https://docs.python.org/3/library/argparse.html" rel="nofollow noreferrer"><code>argparse</code></a>.</li>
</ol>

<h2>Tool support suggestions</h2>

<ol>
<li><a href="https://github.com/ambv/black" rel="nofollow noreferrer"><code>black</code></a> can automatically format your code to be more idiomatic. It'll do things like adjusting the vertical and horizontal spacing, while keeping the functionality of the code unchanged.</li>
<li><p><a href="https://gitlab.com/pycqa/flake8" rel="nofollow noreferrer"><code>flake8</code></a> can give you hints to write idiomatic Python. I would start with this configuration:</p>

<pre><code>[flake8]
max-complexity = 4
ignore = W503,E203
</code></pre></li>
</ol>
    </div>