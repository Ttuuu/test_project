<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>thanks for sharing your code.</p>

<p>There are a few things I wanted to talk about.</p>

<ol>
<li>You shouldn't try / except an <code>IndexError</code> as a form of control flow.</li>
</ol>

<p>An <code>IndexError</code> here would be the programmer's mistake, you should make sure that your code can't even raise an <code>IndexError</code> in the first place by using correct conditions in your loops. You can also removed the try/except sections completely and your code still behaves the same way.</p>

<ol start="2">
<li>Recursion</li>
</ol>

<p>BubbleSort is an inefficient sorting algorithm when dealing with large inputs. The sheer number of comparisons done with larger inputs will cause some serious problems if you recursively call the function.</p>

<p>With the example input you gave, your function gets called <strong>568</strong> times. I tried sorting a list of double the size and got this</p>

<pre><code>RecursionError: maximum recursion depth exceeded in comparison
</code></pre>

<p>Using a more straightforward iterative approach would be much more efficient.</p>

<pre><code>def bubble_sort(details):  
    """compares two consecutive integers in a list and shifts the smaller one to left """
    for i in range(len(details) - 1):
        swapped = False
        for j in range(len(details) - 1):
            if details[j] &gt; details[j+1]:
                temp = details[j]
                details[j] = details[j+1]
                details[j+1] = temp
                swapped = True

        if not swapped:
            break

    return details


sort_me = [11,127,56,2,1,5,7,9,11] * 100 # give it a large input
print sort_me
print bubble_sort(sort_me)
</code></pre>

<p>A few additional things, </p>

<ul>
<li><p>Consider implementing a version that doesn't modify the original list, think <code>sorted(list)</code> vs <code>list.sort()</code>.</p></li>
<li><p>Your current implementation sorts the method in place but also returns the same list. If your method is mutating the list, consider not having a return value (or returning <code>None</code> instead).</p></li>
</ul>

<p>Hopefully this was useful for you!</p>
    </div>