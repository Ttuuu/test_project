<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There are several areas for improvement.</p>

<ul>
<li>First of all, it violates the <a href="https://en.wikipedia.org/wiki/Liskov_substitution_principle" rel="nofollow noreferrer">Liskov substitution principle</a>. I am guilty for doing it too, so I cannot blame you too much but if you want your code to follow the best practices, it's better to make your class not extend PDO but either 

<ul>
<li>make a PDO instance a property of your class publicly accessible through a property or a method.    </li>
<li>or - if you want to have a class with PDO's functionality but a different constructor, you have to re-create in your class all the functionality supported by PDO. Although sounds too laborious, it is not that hard as it seems but it pays back in the future. </li>
</ul></li>
<li><p>Next, error reporting for the connection is rather inflexible. An exception is a precious thing that can be handled in many different ways, logging included. So I would rather re-throw a new exception, like </p>

<pre><code>try {
    parent::__construct($dsn, $user, $pass, $options);
} catch (PDOException $e) {
    throw new \PDOException($e-&gt;getMessage(), (int)$e-&gt;getCode());
}
</code></pre>

<p>so it won't expose the connection credentials in the stack trace but still it can be caught elsewhere or simply logged if a corresponding PHP configuration directive says so.</p></li>
<li>Connection encoding is better to be set in the DSN, as it's going to be more generic and supported by all drivers.</li>
<li>reading the configuration right in the class violates the <a href="https://en.wikipedia.org/wiki/Single_responsibility_principle" rel="nofollow noreferrer">Single responsibility principle</a>. I would make this class to accept an array of parameters, as to where these parameters are taken from - an <code>.ini</code>, <code>.yml</code> or <code>.env</code> file - is a distinct matter.    </li>
<li>"Facilitate maintenance" option is somewhat defeated by the hardcoding of the configuration file name. What if you want to change it in the future as well? A typical web application has dozens of configuration options, it's just impractical to put them in different files whose names are hardcoded in different modules. To make a maintainable application it's better to have a distinct module for configuration that will supply different options to all other modules.  </li>
<li>And all the hassle related to protecting the configuration should be delegated elsewhere. After all, database credentials are not only settings that have to be protected - there are admin email, salt, API keys, etc. </li>
<li>protecting an ini file adding .php as one of its extensions is too risky. It would work merely by accident (It would work only under Apache web-server if a certain configuration option is set). Why not to name it straight <code>settings.php</code> and thus make sure it will be always interpreted as PHP as long as it is called through a web-server with PHP support? </li>
<li>I would also add a possibility to add/override the PDO options</li>
</ul>

<p>So I would make your class </p>

<pre><code>class DB
{
    protected $connection;
    public function __construct($config)
    {
        $dsn = "mysql:host=$config[host];dbname=$config[dbname];charset=$config[charset]";

        $options = array(
            PDO::ATTR_PERSISTENT =&gt; FALSE,
            PDO::ATTR_EMULATE_PREPARES =&gt; FALSE,
            PDO::ATTR_ERRMODE =&gt; PDO::ERRMODE_EXCEPTION,
        );
        if (isset($config['options'])) {
            $options = array_merge($options, $config['options']);
        }

        try {
            $this-&gt;connection = new \PDO ($dsn, $config['user'], $config['pass'], $options);
        } catch (\PDOException $e) {
            throw new \PDOException($e-&gt;getMessage(), (int)$e-&gt;getCode());
        }
    }
    public function conn() {
        return $this-&gt;connection;
    }
}
</code></pre>

<p>used as</p>

<pre><code>$db = new DB($config);
$stmt = $db-&gt;conn()-&gt;query('SELECT * FROM users');
</code></pre>
    </div>