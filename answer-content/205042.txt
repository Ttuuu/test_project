<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This logic handling is much simpler and reflects the cyclical nature of matchups</p>

<pre><code>    enum Choices
    {
        Rock = 0,
        Paper = 1,
        Scissors = 2
    }

    enum Winner
    {
        Draw,
        User,
        Com
    }

    static readonly int ChoicesCount = Enum.GetNames(typeof(Choices)).Length;
    static Winner Matrix(Choices player, Choices opponent)
    {
        return (Winner) (((int) player - (int) opponent + ChoicesCount) % ChoicesCount);
    }
</code></pre>

<p>You could even make <code>ChoicesCount</code> a <code>const int</code> but I find it more maintainable if it just calculates from <code>Choices</code>.</p>

<p>Rock-Paper-Scissors-Lizard-Spock, as brought up in a comment would be implemented by adding 2 more options to <code>Choices</code>, and then modifying <code>Matrix</code> to subtract 2 if the result would be above 2.</p>
    </div>