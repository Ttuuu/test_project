<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This is about the most efficient strategy you can get when it comes to uniqueness checking on a string, as far as I know. It can get pretty crazy with memory inefficiency with bigger data types, but it's still O(N) time.</p>

<p>But unless you are specifically dealing with ASCII-only strings, be careful with hardcoding the size of your filter array. Go will try to parse the string into single Unicode code points, also called <a href="https://golang.org/ref/spec#Rune_literals" rel="nofollow noreferrer">runes</a>. You can find an example of that <a href="https://golang.org/doc/effective_go.html#for" rel="nofollow noreferrer">here</a>, which explicitly shows how characters can span multiple bytes.</p>

<p>Based on the answer to <a href="https://stackoverflow.com/questions/10229156/how-many-characters-can-utf-8-encode/10229225">this SO question</a>, UTF-8 encoding can be anywhere from 1-4 bytes. Using the same strategy, a bool array that handles all 4 possible bytes would be of size </p><pre>2<sup>32</sup> = 4,294,967,296</pre>

<p>Yikes, over 4GB of almost entirely unused memory. The most memory-efficient way I can think of approaching that would be a 256-way tree, where you track each byte encountered by creating nodes for each byte in the rune, and check for the rune by checking for existence of each node in order.</p>

<p>Is it still linear time? Well, existence is easy because the depth of the 256-way tree is <em>at most</em> 4, given the maximum number of bytes in a UTF-8 character, so we check for at most 4 things, which is constant. Same kind of logic applies to setting node values when we encounter unique runes. Since these are done per rune, it's still O(N), more memory efficient, and handles all UTF-8 characters.</p>

<p>I've actually never worked with Go before, thanks for inspiring me to research a bit :)</p>
    </div>