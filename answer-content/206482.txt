<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Consider searching for 20 free locations, where index 19 is in <code>used_mem</code>.</p>

<ul>
<li>You start at 0, and after finding 19 unused locations, you stumble on
index 19 being used.</li>
<li>your outer loop restarts the search at 1, and you find 18 unused locations, before (again) finding location 19 is used.</li>
<li>you try starting at 2, 3, 4 ... and so on up to 19 ... all futile attempts.</li>
<li>finally you advance to starting at 20, which finally has a chance of succeeding.</li>
</ul>

<p>Clearly you are doing a lot of useless work.  Once you find a used location, instead of advancing the outer loop starting location by 1, you should advance the starting location to be 1 more than the used location.  After starting at 0, and finding 19 empty locations and discovering location 19 is used, you should immediately start the next iteration at 20.</p>

<p>But we are still testing every index; we can do better.</p>

<p>If locations 5, 10, and 15 are used, using the above strategy, you would start at 0, find index 5 is used, continue from 6, find location 10 is used, continue from 11, find location 15 is used, continue from 16 ...</p>

<p>What if instead, when we start at 0, we jump ahead 19 locations and work backwards?  We check 19, 18, 17, 16 ... and find index 15 is used, so we start at 16, jump ahead by 19 to index 35, and work backwards to 16.  We haven’t needed to test indexes 0 through 14.</p>

<p>Actually, we only need to work backwards until 20; we’ve already tested 16 through 19 inclusive.</p>

<p>Clearly, <code>for i in range(256)</code> is not going to be useful, because it can’t skip at all. You’ll need while loops and manage your own loop counters.  Or use iterators where you can advance it manually using a construct like <code>next(islice(iterator, n, n))</code>.</p>

<p>Implementation left as an exercise for student.  Bed is calling.</p>
    </div>