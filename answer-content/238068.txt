<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Good things:</h2>

<ul>
<li>There is a very descriptive docblock above the function that documents the arguments.</li>
<li><code>const</code> is used for things that don't change, whereas <code>let</code> is used for values that can be re-assigned.</li>
</ul>

<h2>Suggestions</h2>

<ul>
<li>When inserting at the end, just use <code>Array.push()</code> instead of <code>Array.splice()</code>. This not only simplifies the syntax but also should be faster (see this <a href="https://jsperf.com/splice-vs-push/12" rel="nofollow noreferrer">jsperf</a>).</li>
<li>For <a href="/questions/tagged/performance" class="post-tag" title="show questions tagged 'performance'" rel="tag">performance</a> reasons it would be wise to use a <code>for...of</code> loop instead of a <code>forEach()</code> to iterate over the items in <code>source</code> - especially for large arrays. Functional programming is nice but it has drawbacks - especially when performance is concerned. Consider that each iteration has a call to <code>cmp</code> so calling an extra function for each element in <code>source</code> could lead to a lot of extra overhead. With such a change the variable <code>insertAtEnd</code> could likely be removed if a <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/label" rel="nofollow noreferrer">label</a> outside the outer <code>for</code> loop was added and that label was used with a <code>continue</code> statement instead of the <code>break</code>.</li>
</ul>
    </div>