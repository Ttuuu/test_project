<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Firstly, on documentation: the standard term for the object you're searching for is <a href="http://mathworld.wolfram.com/Prime-GeneratingPolynomial.html" rel="noreferrer">prime-generating polynomial</a>. "Prime polynomial" is often used as a synonym for "irreducible polynomial", and while there is a relationship between reducibility and generation of primes it's best to use standard terms in documentation where possible.</p>

<hr>

<blockquote>
<pre><code>from math import sqrt; from itertools import count, islice
import itertools
from itertools import product
</code></pre>
</blockquote>

<p>This looks a bit untidy. It's not very Pythonic to put multiple statements on a line separated by <code>;</code>. The <code>import itertools</code> is unnecessary, because you explicitly import all of the itertools methods that you use. The two <code>from itertools import</code> statements can be combined into one.</p>

<hr>

<blockquote>
<pre><code>#is n prime?
def isPrime(n):
    #https://stackoverflow.com/questions/4114167/checking-if-a-number-is-a-prime-number-in-python
    return n &gt; 1 and all(n%i for i in islice(count(2), int(sqrt(n)-1)))
</code></pre>
</blockquote>

<p>This is a reasonable way to check a single number for primality if the number isn't too large, but since you're checking lots of numbers and you mention this as a performance concern, I would suggest that you think about building a sieve of Eratosphenes for smallish numbers (up to say 10 million or 100 million) and using probabilistic primality testing for numbers larger than that. Perhaps <a href="https://en.wikipedia.org/wiki/Baillie%E2%80%93PSW_primality_test" rel="noreferrer">BPSW</a>.</p>

<hr>

<blockquote>
<pre><code>#find P(x) using the polyList to represent the polynomial
def findSingleValue(polyList, x):

    #https://stackoverflow.com/questions/18093509/how-can-i-create-functions-that-handle-polynomials
    return sum((a*x**i for i,a in enumerate(polyList)))
</code></pre>
</blockquote>

<p>The name suggests a search, but it's actually an evaluation. I'd call it something like <code>evalPoly(coeffs, x)</code>. The evaluation can be made more efficient using <a href="https://en.wikipedia.org/wiki/Horner%27s_method" rel="noreferrer">Horner's method</a>, which can be written as a <code>reduce</code> call.</p>

<p>It would be worth adding a docstring to document the order of the coefficients: constant term first (<code>a_0, ..., a_n</code>) or last (<code>a_n, ..., a_0</code>).</p>

<hr>

<blockquote>
<pre><code>#is the polynomial prime for x &lt;= p - 1?
def isPolyPrime(polyList, prime):
    #polyValue = 0
    for x in range(prime - 1):
        polyValue = sum((a*x**i for i,a in enumerate(polyList)))
</code></pre>
</blockquote>

<p>Why is this duplicating the contents of <code>findSingleValue</code> rather than calling it?</p>

<blockquote>
<pre><code>        if not isPrime(polyValue):
            return False

    return True
</code></pre>
</blockquote>

<p>Why not use <code>all(...)</code>?</p>

<hr>

<blockquote>
<pre><code>#generate the next combo, given the previous combo
def genCombo(combo, LB, HB):
    deg = len(combo)
    combo = list(combo)
    index = deg - 1
    while index &gt;= 0:
        if combo[index] &lt; HB:
            combo[index] += 1
            index = -1
        elif combo[index] == HB:
            combo[index] = LB
        index -= 1
    combo = tuple(combo)
    return combo
</code></pre>
</blockquote>

<p>I'd half expect <code>permtools</code> to have a built-in method for this. Alternatively it can be done with (untested code) <code>itertools.product(range(LB, HB+1), deg)</code>.</p>

<hr>

<blockquote>
<pre><code>#main function
def verifyPrime():

    prime = int(input("Enter the prime number you want to find a poly for: "))
    LB = int(input("Enter the lower bound: "))
    HB = int(input("Enter the higher bound: "))
    deg = int(input("Enter the degree of the polynomial: "))
    lowDegPoly= input("Press n if you do not want to include lower degree polynomials: ")
</code></pre>
</blockquote>

<p>This could use a refactor: one method to do the work, and then the main method just does the I/O.</p>

<hr>

<blockquote>
<pre><code>    allCombosNum = (abs(HB - LB))**deg - 1
</code></pre>
</blockquote>

<p>I think this has an out-by-one error.</p>

<hr>

<blockquote>
<pre><code>    combo = ()

    #create the first combo - this is used as the basis to generate more combos
    for x in range(deg):
        combo += (LB,)
</code></pre>
</blockquote>

<p>My suggestion above would make this unnecessary, but... <code>tuple(repeat(LB, deg))</code>?</p>

<hr>

<blockquote>
<pre><code>        polyList = []
        polyList.append(prime)
        for coef in combo:
            polyList.append(coef)
</code></pre>
</blockquote>

<p>I think this is <code>polyList = [prime] + list(combo)</code></p>

<hr>

<blockquote>
<pre><code>        #now has a list of the prime and coefs; p + a1*x + a2*x^2 + ...
        isGoodPoly = isPolyPrime(polyList, prime)
        if isGoodPoly and not(lowDegPoly == "n" and combo[deg - 1] == 0):
            goodPolyList.append(polyList)
</code></pre>
</blockquote>

<p>There's a potential performance improvement here. If <code>lowDegPoly == "n"</code> then it's more efficient to avoid generating and testing polynomials of lower degree.</p>

<hr>

<blockquote>
<pre><code>        primeList = []
        for x in range(prime - 1):
            primeList.append(findSingleValue(item, x))
</code></pre>
</blockquote>

<p><code>primeList = [findSingleValue(item, x) for x in range(prime - 1)]</code></p>

<hr>

<blockquote>
<pre><code>    verifyPrime()

verifyPrime()
</code></pre>
</blockquote>

<p>That recursive call is rather inelegant, and the direct invocation of the main method is not considered best practice. It would be better to replace these lines with</p>

<pre><code>if __name__ == "__main__":
    while True:
        verifyPrime()
</code></pre>
    </div>