<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Quick review turned into a snake game</h1>

<p>Some important points missed by the other answers</p>

<ul>
<li><p>Always use <code>requestAnimationFrame</code> to render any animation.</p></li>
<li><p>Keyboard <code>Event.keyCode</code> is a depreciated property and should not be used. Use <code>Event.code</code> or <code>Event.key</code></p></li>
<li><p>To make the game more portable encapsulate the whole thing into a function.</p></li>
<li><p>Use a settings constant at the top of the code to keep all the game settings in one place, This makes it easier to make modifications and fine tune the game play.</p></li>
<li><p>Use lookups and mapping to simplify complex sets of conditions </p></li>
<li><p>The naming is too verbose. Names should be the minimum needed to understand, in context, what the name holds. eg <code>getRandomInt</code> the <code>get</code> is implied <code>randomInt</code> is better and does not clutter up code. <code>getBetweenInt</code> gives little information on what it does. <code>randomIntBetween</code> would be better.</p></li>
<li><p>DONT!!! use statement blocks without delimiting them. You invite very hard to spot bugs when later you make modification and forget the delimit the blocks.</p>

<p>e.g.:</p>

<pre><code>// Never do
if (foo) bar = 0;

for (i = 0; i &lt; 10; i ++) something(i);

// Much safer to delimit them

if (foo) { bar = 0 }   // NOTE that the ; is not needed if the line ends with }

for (i = 0; i &lt; 10; i ++) { something(i) }
</code></pre></li>
<li><p>Use <code>===</code> or <code>!==</code>, they are faster and much safer. Forget that JS even has <code>==</code> or <code>!=</code> and never use them again.</p></li>
<li><p>Put spaces between operators and spaces after commas.</p></li>
<li><p>Use <code>const</code> (This has been pointed out in the other answers but needs to be reinforced.)</p></li>
</ul>

<p>The following line is an example of the above 4 points</p>

<p>You have...</p>

<blockquote>
<pre><code>let posMatch=(pos1,pos2)=&gt;{
    if(pos1.x==pos2.x&amp;&amp;pos1.y==pos2.y) return true;
}
</code></pre>
</blockquote>

<p>... is much easier to read as.</p>

<pre><code>const posMatch = (pos1, pos2) =&gt; {
    if (pos1.x === pos2.x &amp;&amp; pos1.y === pos2.y) { return true }
}
</code></pre>

<p>However the function has two return types, <code>true</code> and <code>undefined</code>  it can be improved and provide a consistent return type.</p>

<pre><code>const posMatch = (pos1, pos2) =&gt; pos1.x === pos2.x &amp;&amp; pos1.y === pos2.y;

// I would go further 
const isPointSame = (p1, p2) =&gt; p1.x === p2.x &amp;&amp; p1.y === p2.y;
</code></pre>

<h2>Game code design.</h2>

<p>Realtime games offer a special coding challenge. They need to be performant which for JavaScript has some particular requirements.</p>

<h3>Jank, performance, and managed memory in JS</h3>

<p>Jank is when the browser hangs for a moment and can destroy the play-ability of a game, the most common cause of jank is JS games is memory management. </p>

<p>Performance in JS is always a challenge, as it is much slower than native code. Poor performance means there is less you can do in a given time. Poor performance will not cause jank.</p>

<p>JS manages all the memory for you, when you create an object the memory need is allocated from free RAM. When you grow an array it new memory every time it doubles in size again from RAM.</p>

<p>There are another types of allocation, from the heap, or context stack (depending on the JS engine that all have different names and methods) but generally heaps or stacks are much faster than normal allocation and release. This is because the JS engine knows when a particular entry in a heap is free and does not have to mess about checking is its safe to delete.</p>

<p>Every variable you create gets memory from the heap. For example <code>var A = {b:0}</code> the object <code>{b: 0}</code> get memory from RAM the variable <code>A</code> (the reference to the object) gets its memory from the heap.</p>

<p>Generally manage memory allocation is fast and not too noticeably, it will not cause jank and will not impact performance that for small allocations</p>

<p>When you no longer need the memory, ie you dereference an object, or reduce an array length by more than half, that memory remains unusable until it is cleaned up. </p>

<p>The part of JS that cleans up memory is call garbage collection (GC) and it is the cause of the jank and can reduce performance. The reason is that freeing memory is very complicated. You don't tell it what is free, it must work it out by checking all the references and determining if they are still in scope.</p>

<p>Though the heap is a lot faster when deleting, its down side is that it is slower at allocations. Creating a new heap/context allocation is the complicated part and is the source of poor performance in JS. Every time you call a function there is a heap allocation.</p>

<p>To reduce Jank and increase Performance in JS games you need to reduce the frequency of heap assignments, and limit how much work GC must do.</p>

<ul>
<li>Reduce the number of function calls.</li>
<li>Reduce the number of new scopes</li>
<li>Generally function scope variables are quicker than many nested block scope variables as block scope variables require heap allocation each time they enter scope. However this is a very small overhead and only needs attention if you are pushing for max performance.</li>
<li>DON'T Delete, reuse, is the number ONE rule for reducing jank.</li>
</ul>

<p>Some examples</p>

<pre><code>function test(a) { return a === "something" }  // when called needs a new context allocation
if(test(value)) { ... do something }  // The value is copied to the new context and needs heap allocation

// Much faster as
if(a === "something") { ...do something }  // No heap context allocation needed

var array = [1,2,3,4,5,6,7,8];
var c = 0;
array.forEach((a)=&gt; c += a); // THe callback needs a new context for each item in the array

// Much faster as
for(const a of array) { c += a }  // there is no context created for each item
                                  // But for each item you do need a new heap allocation for the const a

// Very slightly faster (&lt; 0.5%)                                      
var a;
for(a of array) { c += a }   // As a is already declared it does not require heap allocation.



// A standard object as a function                                   
function MyObj(value){
    this.value = value;
}

var obj = new MyObj("abc");  // is allocated memory
// do something with it

// done with it and get a new one
obj = new MyObj("def"); // Old one still exists and new one needs new allocation
                        // At some unknown time the old one will get removed by GC and 
                        // cause a performance hit then

// rather than create a new one reuse it
obj.value = "def"; // only need a new heap allocation and there is no GC overhead
</code></pre>

<h2>To a rewrite.</h2>

<p>Games are exercises in performance. The balance between readability and performance is hard to master and will depend on the game requirements (note that the game should run on the slowest target device)</p>

<p>I have written the following with a mind to medium performance, with a favor to code readability, as the game is not really taxing the system </p>

<h2>The singleton</h2>

<p>From the top the first thing is to encapsulate all the game code with a singleton</p>

<pre><code>;(() =&gt; {  // If a line starts with ( always put a ; before it
    // code in here
})();  // This bit calls the function and runs all the code in its own private scope.
</code></pre>

<h2>Utilities</h2>

<p>Define utility functions, some variations on what you used</p>

<pre><code>    // Replacement random function for you getRandomInt and getBetweenInt
    // Random int has 3 signitures
    // randInt(); // returns 0 or 1
    // randInt(number); // returns integer from 0 to number - 1
    // randInt(numberA, numberB) // returns integer from numberA to numberB - 1
    // Use bitwise or to floor the returned number         
    const randInt = (min = 2, max = min + (min = 0)) =&gt; Math.random() * (max - min) + min | 0;
    const randItem = array =&gt; array[Math.random() * array.length | 0];
    const point = (() =&gt; {
        function Point(x = 0, y = 0) { this.x = x; this.y = y }
        Point.prototype = {  // p is used to denote a point, Can have post fix number
            isSame(p) { return this.x === p.x &amp;&amp; this.y === p.y },
            as(x, y = x.y + ((x = x.x), 0)) { return (this.x = x, this.y = y, this) },
            add(p) { this.x += p.x; this.y += p.y },
        }
        return (x, y) =&gt; new Point(x, y);
    })();
</code></pre>

<p>The other answer suggested that you use <code>Array.some</code> For performance code you should not do that as it is a lot slower and has a GC cost. GC cost means you add to the likelihood of the game jank. Creating your own <code>some</code> function with callback is faster than <code>Array.some</code>        </p>

<pre><code>    const arrayAny = (predicate, array, count = array.length) =&gt; {
        for (const item of array) {
            if ( predicate(item) === true ) { return true }
            if (!(--count)) { break }
        }
        return false;
    }
</code></pre>

<h2>Settings in one place</h2>

<p>Now collect all the magic numbers and settings        </p>

<pre><code>    const settings = { // settings should alway have the units and limits in the comments
        tiles : 10,  // in pixels, size of a block, AKA multiplier from question


        snakeBodyMin : 5, // start number body parts
        snakeMoveEvery : 15, // number of frames between snake moves
        newGameWaitFrameCount : 60, // in frames 1/60th second
        foodScore : 1,
        foodColor : "yellow",
        backgroundColor : "gray", 
        snakeColor : "white",
</code></pre>

<h2>Lookups and mapping</h2>

<p>To simplify the many condition and switch yoou have the following maps out the moves and provides a way to do many of the conditions via a named object. </p>

<pre><code>        directions : "up,down,left,right".split(","),
        moves : {   // mapping
            up : {name : "up", key : "ArrowUp", op : "down",  vec : point(0, -1)},
            down : {name : "down", key : "ArrowDown", op : "up", vec : point(0, 1)},
            left : {name : "left", key : "ArrowLeft", op : "right", vec : point(-1, 0)},
            right : {name : "right", key : "ArrowRight", op : "left",  vec : point(1, 0)},
        },
    }
</code></pre>

<h2>UI</h2>

<p>Here is a better keyboard handler that will map <code>settings.directions</code> to the keyboard.        </p>

<pre><code>    const keys = (() =&gt; {
        const keys = {any : false};
        for (const name of settings.directions) { keys[settings.moves[name].key] = false }
        function keyEvent(event) {
            if (keys[event.code] !== undefined) {
                keys[event.code] = event.type === "keydown";
                event.preventDefault();
                if (event.type === "keydown") { keys.any = true }

            }
        }
        addEventListener("keydown", keyEvent);
        addEventListener("keyup", keyEvent);
        focus(); // get focus
        return keys;
    })();
    keys.reset = () =&gt; {
        for (const keyName of settings.direction) { keys[settings.moves[keyName].key] = false }
    };
</code></pre>

<h2>Game objects</h2>

<p>Next you define all the game objects and variables</p>

<h2>Canvas becomes <code>playfield</code></h2>

<pre><code>    const ctx = canvas.getContext("2d");
    const playfield = (() =&gt; {
        const size = settings.tiles;
        const API = {
            columns : canvas.width / size,
            rows : canvas.height / size,
            fillBox(point, col = ctx.fillStyle) {
                ctx.fillStyle = col;
                ctx.fillRect(point.x * size, point.y * size, size, size);
            },
            isInside(p) { return ! (p.x &lt; 0 || p.x &gt;= API.rows || p.y &lt; 0 || p.y &gt;= API.columns) },
        };
        return API;
    })();
</code></pre>

<h2>One instance of food</h2>

<pre><code>    const food = (() =&gt; {
        const col = settings.foodColor;
        const pos = point();
        return {
            reset() { // for performance dont use recursion
                var searching = true;   // Though not needed, some optimiser do not optimise code wrapped in a
                                        // loop with not exit condition eg while(true) so always include
                                        // an exit condition even if you dont need or use it
                while (searching) {
                    pos.x = randInt(playfield.columns);
                    pos.y = randInt(playfield.rows);
                    if (! snake.isOverPoint(pos)) {
                        searching = false;
                        break;
                    }
                }
            },
            draw() { playfield.fillBox(pos, col) },
            isAt(point) { return pos.isSame(point) },
        };
    })();
</code></pre>

<h2>The snake</h2>

<p>To reduce GC hits the snake body array will never have items removed. A <code>length</code> variable will determin how many items are used. If there is a need for more body parts they are created if needed, else existing ones are reused. The will in effect decrease overaly memory use as you will not have deleted items taking up memory while they wait for JC.       </p>

<p><strong>Update</strong> There was a bug in the first post of this example that let the snake double back on its self if you quickly pressed two keys between moves.</p>

<p>To fix I added a <code>pendingDir</code> that holds the next direction until the next time the snake moves.        </p>

<p>I also forgot to bind the <code>point</code> in the function <code>snake.isOverPoint</code> that prevented the snake running over its self. </p>

<pre><code>    const snake = (() =&gt; {
        const col = settings.snakeColor;
        const body = [point()];
        const head = point(); // just a temp to do tests
        var length;
        const moves = settings.moves;
        var dir;
        var pendingDir;
        var index = 0;
        const each = cb =&gt; {index = 0; while (index &lt; length) { cb(body[index++]) } };
        return {
            isOverPoint(point) { return arrayAny(point.isSame.bind(point), body, length) },
            set direction(value) { pendingDir = dir.op !== value ? moves[value] : dir },
            reset() {
                var i;
                dir = moves[randItem(settings.directions)];

                length = settings.snakeBodyMin;
                body[0].as(playfield.columns / 2 | 0, playfield.rows / 2 | 0);
                for (i = 1; i &lt; length ; i++) {
                    if (body[i] === undefined) { body[i] = point() }
                    body[i].as(body[i-1]).add(moves[dir.op].vec);
                }
            },
            draw() {
                ctx.fillStyle = settings.snakeColor;
                each(playfield.fillBox);
            },
            update(canMove) {
                for (const dirName of settings.directions) { 
                    if (keys[moves[dirName].key]) { snake.direction = dirName } 
                }
                if (!canMove) { return }
                if (pendingDir !== undefined) { 
                    dir = pendingDir;
                    pendingDir = undefined;
                }

                head.as(body[0]).add(dir.vec);
                if (!snake.isOverPoint(head) &amp;&amp; playfield.isInside(head)) {
                    if (food.isAt(head)) {
                        length += 1;
                        if (body.length &lt;= length) { body.push(point()) }
                        game.score = settings.foodScore;
                        body.unshift(body.pop().as(head));
                        food.reset();
                    } else { body.unshift(body.pop().as(head)) }
                } else { game.state = "gameOver" }
            },
        };
    })();
</code></pre>

<h2>Game and state wraps it up</h2>

<p>To manage the game create a game state object that has all the different game states, eg play, game over, get ready, etc       </p>

<p>All you do is name the next state and it will state as needed.         </p>

<pre><code>    const game = (() =&gt; {
        var frameCount;
        var score = 0;
        var started = false;
        var currentName = ""; // not used ATM
        var current = null;
        var nextState;

        const game = {
            set score(value) {
                if (value === 0) { score = 0 }
                else { score += value }
                scoreElement.textContent = score;
            },
            set text(value){
                if (value === "") {
                    textElement.classList.add("hide");
                } else {
                    textElement.classList.remove("hide");
                    textElement.textContent = value;
                }
            },        
            newGame() {
                game.score = 0;
                snake.reset();
                food.reset();
                ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);
                food.draw();
                snake.draw();
                nextState = "play";
                game.state = "waitForFrames";
                game.text = "Get ready";

            },
            gameOver() {
                nextState = "newGame";
                game.state = "waitForFrames";
                game.text = "Game Over";
            },
            play() {
                ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);
                snake.update(frameCount % settings.snakeMoveEvery === settings.snakeMoveEvery -1);
                food.draw();
                snake.draw();
            },
            waitForFrames() {
                if (frameCount &gt;= settings.newGameWaitFrameCount) {
                     game.state = nextState;
                }
            },
            set state(stateName) {
                frameCount = 0;
                if (game[stateName] !== undefined) {
                    current = game[stateName];
                    currentName = stateName;
                } else {
                    current  = game.newGame;
                    currentName = "newGame";
                }
                game.text = "";
                if (!started) {
                    requestAnimationFrame(game.mainLoop);
                    started = true;
                }

            },
            mainLoop() {
                current();
                frameCount += 1;
                requestAnimationFrame(game.mainLoop)
            }
        }
        return game;
    })();
    // all done so start a new game;
    game.state = "newGame";
})();
</code></pre>

<h2>Try it.</h2>

<p>as a running example</p>

<p></p><div class="snippet" data-lang="js" data-hide="true" data-console="true" data-babel="false">
<div class="snippet-code snippet-currently-hidden">
<pre class="snippet-code-js lang-js prettyprint-override"><code>;(() =&gt; {
    const randInt = (min = 2, max = min + (min = 0)) =&gt; Math.random() * (max - min) + min | 0;
    const randItem = array =&gt; array[Math.random() * array.length | 0];
    const point = (() =&gt; {
        function Point(x = 0, y = 0) { this.x = x; this.y = y }
        Point.prototype = {  // p is used to denote a point, Can have post fix number
            isSame(p) { return this.x === p.x &amp;&amp; this.y === p.y },
            as(x, y = x.y + ((x = x.x), 0)) { return (this.x = x, this.y = y, this) },
            add(p) { this.x += p.x; this.y += p.y },
        }
        return (x, y) =&gt; new Point(x, y);
    })();
    const arrayAny = (predicate, array, count = array.length) =&gt; {

        for (const item of array) {
            if ( predicate(item) === true ) { return true }
            if (!(--count)) { break }
        }
        return false;
    }
    const settings = { // settings should always have the units and limits in the comments
        tiles : 10,  // in pixels size of a block. AKA multiplier from question
       
        snakeBodyMin : 5, // start number body parts
        snakeMoveEvery : 15, // number of frames between snake moves
        newGameWaitFrameCount : 60, // in frames 1/60th second
        foodScore : 1,
        foodColor : "yellow",
        backgroundColor : "gray",
        snakeColor : "white",
        directions : "up,down,left,right".split(","),
        moves : {   // mapping
            up : {name : "up", key : "ArrowUp", op : "down",  vec : point(0, -1)},
            down : {name : "down", key : "ArrowDown", op : "up", vec : point(0, 1)},
            left : {name : "left", key : "ArrowLeft", op : "right", vec : point(-1, 0)},
            right : {name : "right", key : "ArrowRight", op : "left",  vec : point(1, 0)},
        },
    }
    const keys = (() =&gt; {
        const keys = {any : false};
        for (const name of settings.directions) { keys[settings.moves[name].key] = false }
        function keyEvent(event) {
            if (keys[event.code] !== undefined) {
                keys[event.code] = event.type === "keydown";
                event.preventDefault();
                if (event.type === "keydown") { keys.any = true }

            }
        }
        addEventListener("keydown", keyEvent);
        addEventListener("keyup", keyEvent);
        focus(); // get focus
        return keys;
    })();
    keys.reset = () =&gt; {
        for (const keyName of settings.direction) { keys[settings.moves[keyName].key] = false }
    };

    canvas.style.background =  settings.backgroundColor;
    const ctx = canvas.getContext("2d");
    const playfield = (() =&gt; {
        const size = settings.tiles;
        const API = {
            columns : canvas.width / size,
            rows : canvas.height / size,
            fillBox(point, col = ctx.fillStyle) {
                ctx.fillStyle = col;
                ctx.fillRect(point.x * size, point.y * size, size, size);
            },
            isInside(p) { return ! (p.x &lt; 0 || p.x &gt;= API.rows || p.y &lt; 0 || p.y &gt;= API.columns) },
        };
        return API;
    })();
    const food = (() =&gt; {
        const col = settings.foodColor;
        const pos = point();
        return {
            reset() { // for performance dont use recursion
                var searching = true;   // Though not needed, some optimiser do not optimise code wrapped in a
                                        // loop with not exit condition eg while(true) so always include
                                        // an exit condition even if you dont need or use it
                while (searching) {
                    pos.x = randInt(playfield.columns);
                    pos.y = randInt(playfield.rows);
                    if (! snake.isOverPoint(pos)) {
                        searching = false;
                        break;
                    }
                }
            },
            draw() { playfield.fillBox(pos, col) },
            isAt(point) { return pos.isSame(point) },
        };
    })();
    const snake = (() =&gt; {
        const col = settings.snakeColor;
        const body = [point()];
        const head = point(); // just a temp to do tests
        var length;
        const moves = settings.moves;
        var dir;
        var pendingDir;
        var index = 0;
        const each = cb =&gt; {index = 0; while (index &lt; length) { cb(body[index++]) } };
        return {
            isOverPoint(point) { return arrayAny(point.isSame.bind(point), body, length) },
            set direction(value) { pendingDir = dir.op !== value ? moves[value] : dir },
            reset() {
                var i;
                dir = moves[randItem(settings.directions)];

                length = settings.snakeBodyMin;
                body[0].as(playfield.columns / 2 | 0, playfield.rows / 2 | 0);
                for (i = 1; i &lt; length ; i++) {
                    if (body[i] === undefined) { body[i] = point() }
                    body[i].as(body[i-1]).add(moves[dir.op].vec);
                }
            },
            draw() {
                ctx.fillStyle = settings.snakeColor;
                each(playfield.fillBox);
            },
            update(canMove) {
                for (const dirName of settings.directions) { if (keys[moves[dirName].key]) { snake.direction = dirName } }
                if (!canMove) { return }
                if (pendingDir !== undefined) { 
                    dir = pendingDir;
                    pendingDir = undefined;
                }
                
                
                head.as(body[0]).add(dir.vec);
                
                if (!snake.isOverPoint(head) &amp;&amp; playfield.isInside(head)) {
                    if (food.isAt(head)) {
                        length += 1;
                        if (body.length &lt;= length) { body.push(point()) }
                        game.score = settings.foodScore;
                        body.unshift(body.pop().as(head));
                        food.reset();
                    } else { body.unshift(body.pop().as(head)) }
                } else { game.state = "gameOver" }
            },
        };
    })();
    const game = (() =&gt; {
        var frameCount;
        var score = 0;
        var started = false;
        var currentName = ""; // not used ATM
        var current = null;
        var nextState;
        
        const game = {
            set score(value) {
                if (value === 0) { score = 0 }
                else { score += value }
                scoreElement.textContent = score;
            },
            set text(value){
                if (value === "") {
                    textElement.classList.add("hide");
                } else {
                    textElement.classList.remove("hide");
                    textElement.textContent = value;
                }
            },        
            newGame() {
                game.score = 0;
                snake.reset();
                food.reset();
                ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);
                food.draw();
                snake.draw();
                nextState = "play";
                game.state = "waitForFrames";
                game.text = "Get ready";
                 
            },
            gameOver() {
                nextState = "newGame";
                game.state = "waitForFrames";
                game.text = "Game Over";
            },
            play() {
                ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);
                snake.update(frameCount % settings.snakeMoveEvery === settings.snakeMoveEvery -1);
                food.draw();
                snake.draw();
            },
            waitForFrames() {
                if (frameCount &gt;= settings.newGameWaitFrameCount) { game.state = nextState }
            },
            set state(stateName) {
                frameCount = 0;
                if (game[stateName] !== undefined) {
                    current = game[stateName];
                    currentName = stateName;
                } else {
                    current  = game.newGame;
                    currentName = "newGame";
                }
                game.text = "";
                if (!started) {
                    requestAnimationFrame(game.mainLoop);
                    started = true;
                }
               
            },
            mainLoop() {
                current();
                frameCount += 1;
                requestAnimationFrame(game.mainLoop)
            }
        }
        return game;
    })();
    // all done so start a new game;
    game.state = "newGame";
})();</code></pre>
<pre class="snippet-code-css lang-css prettyprint-override"><code>body {
   font-family : arial;
}
canvas {
  position : absolute;
  top : 0px;
  left : 0px;  
  background : gray;
  z-index :-1;
}
#scoreElement {
  position : absolute;
  top : 4px;
  left : 4px;
}
#textElement {
  position : absolute;
  top : 60px;
  left : 0px;  
  width :160px;
  text-align : center;
}
.hide {
   display : none;
}</code></pre>
<pre class="snippet-code-html lang-html prettyprint-override"><code>&lt;canvas id="canvas" width="160" height="160"&gt; &lt;/canvas&gt;
&lt;div id="scoreElement"&gt;&lt;/div&gt;
&lt;div class ="hide" id="textElement"&gt;dsdfsdfsf&lt;/div&gt;</code></pre>
</div>
</div>

    </div>