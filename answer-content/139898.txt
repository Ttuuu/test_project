<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Put business logic in functions</h3>

<p>The first thing that I would do is create a function.  Then <code>main</code> becomes </p>

<pre><code>int main(){
    int x1, v1, x2, v2;
    std::cin &gt;&gt; x1 &gt;&gt; v1 &gt;&gt; x2 &gt;&gt; v2;

    if (kangaroos_meet(x1, v1, x2, v2)) {
        std::cout &lt;&lt; "YES";
    } else {
        std::cout &lt;&lt; "NO";
    }
}
</code></pre>

<p>Now we only write each output option once.  You could use the ternary operator to reduce this to just one <code>cout</code>, but I find this form more readable.  </p>

<p>Also, <code>main</code> only does input and output.  The "problem" is entirely handled in the <code>kangaroos_meet</code> function.  </p>

<p>I removed <code>using namespace std;</code>, as it uses more characters than just writing <code>std::</code> three times.  Which I find more readable anyway.  </p>

<p>I removed <code>return 0;</code> as modern compilers will insert it for you.  </p>

<h3>Bug</h3>

<p>In your original code, you will loop forever if the kangaroos have different starting points but the same velocity.  </p>

<h3>Simplify logic</h3>

<p>You have separate logic depending on which kangaroo is further ahead.  You can simplify this with a recursive call.  </p>

<pre><code>bool kangaroos_meet(int x1, int v1, int x2, int v2) {
    if (x1 &lt; x2) {
        // if the second kangaroo is ahead of the first
        // switch so that the one ahead is first
        return kangaroos_meet(x2, v2, x1, v1);
    }

    if (x1 == x2) {
        // if already at the same location, true
        return true;
    }

    // x1 &gt; x2 because it's not less than or equal
    if (v1 &gt;= v2) {
        // If the first kangaroo is ahead and as fast or faster
        // then the second kangaroo will never catch up
        return false;
    }

    do {
        x1 += v1;
        x2 += v2;
    } while (x1 &gt; x2);

    return x1 == x2;
}
</code></pre>

<p>By calling the function recursively, we save having two sets of logic.  Now we just have one set of logic that handles the case where the first kangaroo is ahead of or tied with the second.  If that's not the case, we simply switch the two kangaroos.  </p>

<p>This fixes the problem of equal speed kangaroos, but now we need to check that the kangaroos aren't already at the same location.  And we need to check that before we compare velocities, as we removed the check that the first kangaroo is ahead of the second.  </p>

<p>Adding "or equal to" to the velocity comparison handles same speed kangaroos correctly.  </p>

<p>The <code>while</code> loop is essentially the same, although we can make it a <code>do</code>/<code>while</code>.  We already know that <code>x1 &gt; x2</code> for the first iteration.  We don't have to check.  </p>

<p>Then we check to see if they met or if the second one passed the first.  This is the same check as in your original code.  </p>
    </div>