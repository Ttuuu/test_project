<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>General style points</h2>
<ul>
<li><p>No need to split the <code>str</code> into an <code>array</code>, you can access the character directly using bracket notation. eg <code>str[i] === "&gt;"</code></p>
</li>
<li><p>If you want a number to cycle over a range use the remainder operator <code>%</code> to do that. Example  to add 1 <code>memory[pointer] = (memory[pointer] + 1) % 255</code> and to subtract <code>memory[pointer] = (memory[pointer] + 254) % 255</code>.</p>
<p>However as you want to simulate memory as bytes you may as well use a typed array that has an Unsigned Char. The bytes in the array behave the same as they would on the VM that runs BF commands. Example <code>const memory = new Uint8Array(1024)</code></p>
</li>
<li><p>Not sure why you throw overflow for "&lt;" when you don't throw the same error <code>&gt;</code>. <code>&lt;</code> should just cycle to highest byte in memory.</p>
</li>
<li><p>Use "const" for variables that do not change.</p>
</li>
<li><p>Use <code>===</code> and <code>!==</code> rather than <code>==</code> and <code>!=</code></p>
</li>
<li><p>Don't double space (every other line empty). It makes the code hard to read as it will not fit to one screen.</p>
</li>
<li><p>Naming is rather poor.</p>
<p>-<code>result</code> could be better as "output"</p>
<ul>
<li><code>str</code> maybe <code>commands</code> or <code>program</code></li>
<li><code>i</code> maybe <code>programCounter</code> or <code>commandIndex</code>. I am old school so would use <code>pc</code></li>
</ul>
</li>
<li><p>Rather than index into an array over and over, as you do with array[i], store it in a variable <code>const command = array[i];</code> and then <code>if(command === "&gt;") {</code> makes the code more compact and easier to follow.</p>
</li>
</ul>
<h2>Design.</h2>
<p>You can use a lookup to get the action required for each command. (see example <code>commandList</code>) rather than one long <code>if() {}else if()...</code>. This is a lot quicker to run as you don't need to step over <code>else if</code> statements to find the matching block. Also make it easy to add or change commands, and easier to read.</p>
<h2>The Bug</h2>
<p>As I pointed out in the comments there is a bug. You have not implemented the "[" command correctly. This is a big issue as many programs will fail. To solutions are non trivial.</p>
<p>There are two solutions.</p>
<ol>
<li>When you need to skip ahead search for the matching close. This can cost a lot of performance.</li>
<li>Compile the code and locate matching open and close <code>[</code> and <code>]</code> so that you can quickly locate the match and move to it if required.</li>
</ol>
<h2>Ease of use</h2>
<p>The input and output would be better as strings rather than arrays. Makes the BF easier to use.</p>
<h2>The halting problem.</h2>
<p>There is a fundamental requirement you have missed. You can never know if the program you are running will exit.</p>
<p>As JavaScript is blocking this means there is no way to stop the execution if the bf code goes into infinite loop. You should protect against this problem.</p>
<p>The easiest is to put a limit on the number of instructions, and throw error if reached.</p>
<p>Or you could have the commands execute on a timer.</p>
<h2>Example</h2>
<p>The function name is <code>bfVM</code> for brainFuckVirtualMachine and requires a compiled program. (as that is how I fixed your bug).</p>
<p>I included the compiler, all it does is find matching blocks and maps them to each other. returns a compiled object.</p>
<p>And two programs as testing fodder.</p>
<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>// Run two comnpiled BF programes.
setTimeout(() =&gt; {
console.log(bfVM(helloWorld))
console.log(bfVM(addNums))
},0);
/* Old school naming pc is program counter, ptr is a pointer, and
   inPtr is input pointer */
function bfVM(compiled, input) {
    const program = compiled.program;
    const blocks = compiled.blocks;
    const RAM = compiled.RAM;
    const memory = new Uint8Array(RAM);
    const commandList = {
        "&gt;"(){ ptr = (ptr + 1) % RAM },
        "&lt;"(){ ptr = (ptr + RAM - 1) % RAM },
        "+"(){ memory[ptr]++ },
        "-"(){ memory[ptr]-- },
        "."(){ output += String.fromCharCode(memory[ptr]) },
        ","(){ memory[ptr] = input.charCodeAt(inPtr++) },
        "["(){ pc = !memory[ptr] ? blocks.get(pc)[0] : pc },
        "]"(){ pc = memory[ptr] ? blocks.get(pc)[0] : pc  },
    };    
    
    var cycles = 0, ptr = 0, pc = 0, inPtr = 0, output = ""; 
    while (pc &lt; program.length &amp;&amp; cycles++ &lt; MAX_CYCLES) {
        const cmd = commandList[program[pc]];
        cmd &amp;&amp; cmd();
        pc ++;        
    }
    if (cycles=== MAX_CYCLES) { throw new Error("Cycle limit reached at PC: " + pc)  }
    return output;
}

const MAX_CYCLES = 1024 * 1024;  // Limit of execution steps.
function compileBF(program, RAM) {
    var pc = 0;
    const blocks = new Map();
    const blockStack = [];
    while (pc &lt; program.length) {
        if (program[pc] === "[") {
            blocks.set(pc, [])
            blockStack.push(pc);
        } else if(program[pc] === "]") {
            const open = blockStack.pop();
            const block = blocks.get(open);
            if (block === undefined) {
                throw new Error("Syntax error: No matching block for ']' at " + pc);
            }
            block[0] = pc;
            blocks.set(pc, [open]);
        }
        pc++;
    }
    if (blockStack.length) {
       throw new Error("Syntax error: Block missmatch at " + pc);
    }
    return {program, blocks, RAM};
}

const nums = ["", "+", "++", "+++", "++++", "+++++", "++++++", "+++++++", "++++++++", "+++++++++"]
const toASCIINum = "++++++++[&lt;++++++&gt;-]&lt;"
const helloWorld = compileBF(("++++++++[&gt;++++[&gt;++&gt;+++&gt;+++&gt;+&lt;&lt;&lt;&lt;-]&gt;+&gt;+&gt;-&gt;&gt;+[&lt;]&lt;-]&gt;&gt;.&gt;---.+++++++..+++.&gt;&gt;.&lt;-.&lt;.+++.------.--------.&gt;&gt;+.&gt;++."), 14)
const addNums = compileBF(nums[5]+"&gt;"+nums[4]+"[&lt;+&gt;-]"+toASCIINum+".",2);</code></pre>
</div>
</div>

    </div>