<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>IMPORTANT!!!</h3>
<p>Not a Python tip, but rather a <strong>MUST</strong> when it comes to sensitive information (quote from <a href="https://codereview.stackexchange.com/questions/185106/bitcoin-wallet-address-and-private-key-generator#comment353071_185106">@nzall</a>'s comment):</p>
<blockquote>
<p>Those private keys <strong>should NEVER, EVER be posted in a location even
as remotely public as a code review site</strong>. More, <strong>replacing</strong> them
<strong>is not enough</strong>. For all purposes, you should now view the original keys as compromised and must NEVER EVER EVER use them again for
bitcoin storage. Doing so runs high risk of losing the bitcoins stored
in them</p>
</blockquote>
<p>I just made this tip a bit more <em>seeable</em> for everybody.</p>
<hr>
<p>Another three small observations, in addition to what <a href="https://codereview.stackexchange.com/a/185108/61966">@Graipher</a> said.</p>
<p>In Python you can "chain" comparison operations which just means they are "<em>and</em>"ed together.</p>
<pre><code>if random_int &gt;= 1 and random_int &lt; curve_order:
    return random_int
</code></pre>
<p>In your case, it'd be like this:</p>
<pre><code>if 1 &lt;= random_int &lt; curve_order:
    return random_int
</code></pre>
<p>Read more about it <a href="https://docs.python.org/3/reference/expressions.html#not-in" rel="noreferrer">here</a></p>
<hr>
<p>More, I'd recommend you use <code>.format()</code> when it comes to printing:</p>
<pre><code>print("Private Key: " + private_key_hex)
print("Public Key: " + public_key_hex)
print("Private Key (WIF Format): " + private_key_wif_hex)
</code></pre>
<p>Could be:</p>
<pre><code>print("Private Key: {}".format(private_key_hex))
print("Public Key: {}".format(public_key_hex))
print("Private Key (WIF Format): {}".format(private_key_wif_hex))
</code></pre>
<hr>
<p>You should also have two blank lines between your functions (instead of a single one)</p>
<p>This:</p>
<pre><code># ...
from binascii import hexlify, unhexlify

def random_secret_exponent(curve_order):
    while True:
        random_hex = hexlify(dev_random_entropy(32))
        random_int = int(random_hex, 16)
        if random_int &gt;= 1 and random_int &lt; curve_order:
            return random_int

def generate_private_key():
    curve = ecdsa.curves.SECP256k1
    se = random_secret_exponent(curve.order)
    from_secret_exponent = ecdsa.keys.SigningKey.from_secret_exponent
    return hexlify(from_secret_exponent(se, curve, hashlib.sha256).to_string())

# ...
</code></pre>
<p>Should be:</p>
<pre><code># ...
from binascii import hexlify, unhexlify


def random_secret_exponent(curve_order):
    while True:
        random_hex = hexlify(dev_random_entropy(32))
        random_int = int(random_hex, 16)
        if random_int &gt;= 1 and random_int &lt; curve_order:
            return random_int


def generate_private_key():
    curve = ecdsa.curves.SECP256k1
    se = random_secret_exponent(curve.order)
    from_secret_exponent = ecdsa.keys.SigningKey.from_secret_exponent
    return hexlify(from_secret_exponent(se, curve, hashlib.sha256).to_string())


# ...
</code></pre>
<p>For more details / suggestions / improvements regarding your code layout, you could take a look at <a href="https://www.python.org/dev/peps/pep-0008/#code-lay-out" rel="noreferrer">PEP8</a>, Python's official style guide.</p>
    </div>