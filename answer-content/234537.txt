<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>For a new user of C you really aren't doing too bad, you're not using global variables which is very good. The functions are small and well defined. The program as a whole is well organized so that function prototypes are not required.</p>

<p>This program could have a few more function and that would simplify <code>main()</code>:</p>

<ul>
<li>A function that asks the user for input and performs error checking on the input before returning values, this would also localize the variables for input in the function   </li>
<li>There are some basic linked list operations that are not here that might be helpful <code>insert_node()</code>, <code>delete_node()</code> and <code>append_node()</code> <code>find_node()</code>, other functions such as <code>replace()</code> can utilize these basic functions  </li>
<li>It might be good to have a function that prints a title and then calls <code>printlist()</code> which would reduce the amount of code in <code>main()</code>  </li>
<li>A function to initialize the linked list  </li>
</ul>

<h2>Missing Error Checking</h2>

<p>There are two places where error checking in this program, first, it is generally a best practice to error check all user input before using the input values. Users can make mistakes when entering data, they may just hit the enter key without entering data, they may enter a string instead of a number, they may enter a number that is not in the list which could cause problems while searching the list.</p>

<p>The second place where error checking is necessary is after any memory allocation in the C programming language, some or most high level languages will throw exceptions if memory allocation fails. In C programming if memory allocation fails the call to <code>malloc()</code>, <code>calloc()</code> or <code>realloc()</code> returns NULL. It is very important to check the value returned to make sure it is not NULL before using the memory, access through a NULL pointer causes unknown behavior. This can cause a number of problems including the crashing of the program or the corruption of data in the program.</p>

<pre><code>node_t *create_new_node(int val) {
    node_t *result = malloc(sizeof(node_t));
    if (result == NULL)
    {
        fprintf(stderr, "malloc failed in create_new_node()\n");
        return result;
    }
    result-&gt;val = val;  // Unknown behavior here if malloc() failed
    result-&gt;next = NULL;
    return result;
}
</code></pre>

<h2>Include Files That Are Not Necessary</h2>

<p>The code contains <code>#include &lt;string.h&gt;</code> however, no functions defined in this include file are utilized. The `#include  statement copies the contents of the file into the current file, it will increase the compile time and if you are using an editor that also creates a makefile it may add an unnecessary dependency to the makefile. There may also be collisions with functions defined in the code. Basically don't include files you don't need.</p>

<h2>Return From Main</h2>

<p>The C compiler is smart enough to add <code>return 0;</code> at the end of this program, if the code does contain multiple returns from <code>main()</code> such as program failure when <code>malloc()</code> fails the code will be more readable if <code>return EXIT_FAILURE;</code> or <code>return EXIT_SUCCESS;</code>. These macros are included from <code>stdlib.h</code> which is already included in this program.</p>

<h2>Readability</h2>

<p>The code would be more readable and easier to maintain if there were spaces between operators and operands <code>for (int i=0; i&lt;25; i++) {</code> versus <code>for (int i = 0; i &lt; 25; i++) {</code>. It would also make the code more readable and maintainable if the <code>25</code> in the for loop was a symbolic constant</p>

<pre><code>#define LIST_SIZE 25

...

    for (int i = 0; i &lt; LIST_SIZE; i++) {
        tmp = create_new_node(i);
        if (tmp == NULL)
        {
            return EXIT_FAILURE;
        }
        tmp-&gt;next = head;
        head=tmp;
    }
</code></pre>
    </div>