<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Its not thread safe!</p>

<p>Looks like you can still create instances manually (though you would have to derive a class that can use the protected constructor) or copy the one created by <code>getInstance()</code>.</p>

<p>Why not use the classic Singleton pattern?</p>

<pre><code>class ImGUIManager
{
     public:
         static ImGUIManager&amp; getInstance()
         {
             static ImGUIManager instance;   // static member
                                             // Correctly constructed on first use.
                                             // Will be deleted on exit.
             return instance;
         }
         // PUT YOUR INTERFACE HERE

     private:
         ImGUIManager(){} // Make sure the constructor is private.
         // Delete the copy and move constructors.
         ImGUIManager(ImGUIManager const&amp;)            = delete;
         ImGUIManager&amp; operator=(ImGUIManager const&amp;) = delete;
         ImGUIManager(ImGUIManager&amp;&amp;)                 = delete;
         ImGUIManager&amp; operator=(ImGUIManager&amp;&amp;)      = delete;
};
</code></pre>

<p>Some References:</p>

<p><a href="https://stackoverflow.com/a/1008289/14065">C++ Singleton design pattern</a>  </p>
    </div>