<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I don't know Kotlin or how OpenStreetMap works so I'm probably the worst person to answer your question but since nobody has answered I'll give it a shot.</p>

<pre><code>var data = mutableListOf(OpeningMonthsRow())
for (rule in rules) {
    if (rule.dates != null) {
        // month based rules, so we need OpeningMonthsRow objects that will be created
        // and added later rather than a single catch-all row
        data = mutableListOf()
    }
}
</code></pre>

<p>This code seems to be checking if the <code>dates</code> property on a <code>rule</code> is not null and if so set data to a new <code>mutableListOf()</code>. The <code>any()</code> operator could be used to simplify this comparison:</p>

<pre><code>data = if (rules.any { it.rule != null }) mutableListOf() else mutableListOf(OpeningMonthsRow())
</code></pre>

<p>Which could make it easier to read.</p>

<pre><code>private fun getIndexOfOurMonthsRow(monthRows: List&lt;OpeningMonthsRow&gt;, startMonth: Int, endMonth: Int): Int {
    for ((index, row) in monthRows.withIndex()) {
        if (row.months.start == startMonth) {
            if (row.months.start == endMonth) {
                return index
            }
        }
    }
    return -1
}
</code></pre>

<p>This <em>might</em> be a potential bug; <code>row.months.start == startMonth</code> and <code>row.months.start == endMonth</code>; should the second be <code>row.months.end</code>? Additionally, <code>indexOfFirst</code> could be useful here (and use the predicate to match the object's properties.)</p>

<pre><code>private fun isRulesetToStreetCompleteSupported(ruleset: ArrayList&lt;Rule&gt;): Boolean {
        for (rule in ruleset) {
            if (reduceRuleToStreetCompleteSupported(rule) == null) {
                return false
            }
        }
        if (includesMonthsRangeCrossingNewYearBoundary(ruleset)) {
            // strictly speaking this kind of ranges are supported, but not in an obvious way
            return false
        }
        if (areOnlySomeRulesMonthBased(ruleset)) {
            // StreetComplete can handle month based rules, but requires all of them to be month based
            return false
        }
        if (rulesAreOverridingOtherRules(ruleset)) {
            // this kind of opening hours specification likely require fix
            // anyway, it is not representable directly by SC
            return false
        }
        return true
    }
</code></pre>

<p>I would combine the <code>return false</code> seconds together, and collapse the loop. It could look like (and put comments on each statement):</p>

<pre><code>private fun isRulesetToStreetCompleteSupported(ruleset: ArrayList&lt;Rule&gt;): Boolean {
    return if (ruleset.any { reduceRuleToStreetCompleteSupported(it) == null })
       || includesMonthsRangeCrossingNewYearBoundary(ruleset))
       || areOnlySomeRulesMonthBased(ruleset)
       || rulesAreOverridingOtherRules(ruleset));
}
</code></pre>

<p>For <code>rulesAreOverridingOtherRules</code>, it has a triple <code>for</code> loop which can make the logic difficult to follow. This problem can be generalized to finding any overlap between <code>n</code> or more intervals. This link: <a href="https://stackoverflow.com/questions/3269434/whats-the-most-efficient-way-to-test-two-integer-ranges-for-overlap">https://stackoverflow.com/questions/3269434/whats-the-most-efficient-way-to-test-two-integer-ranges-for-overlap</a> gives some generic advice on how to approach such a problem.</p>

<p>I would then genericize the <code>*intersects</code> methods to have a single method which would check if there is an intersection on a generic date interval (or integer) and then create wrappers to convert the months/days/hours into that format.</p>

<p>For <code>emptyRule()</code>, I would remove the try block and just allow the <code>ParseException</code> to be thrown instead, as the stack trace information won't be thrown away.</p>

<p>There are a lot of null checks in the code; maybe the data can be cleaned or checked once and then re-converted into a different format where these checks are not required (e.g. making them a wrapper class that has methods to return object attributes conditionally.)</p>
    </div>