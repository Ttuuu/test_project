<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Instead of <code>str(random.getrandbits(128)).encode('ASCII')</code> I'd use <code>os.urandom(16)</code>. Much simpler, ought to be more random, shorter result, and a bit faster (at least for me). Or convert your random number to <code>bytes</code> directly, even faster (at least for me):</p>
<pre><code>&gt;&gt;&gt; timeit(lambda: str(random.getrandbits(128)).encode('ASCII'))
1.320366100000001
&gt;&gt;&gt; timeit(lambda: os.urandom(16))
0.7796178000000111
&gt;&gt;&gt; timeit(lambda: random.getrandbits(128).to_bytes(16, 'big'))
0.6476696999999945
</code></pre>
<p>From <a href="https://docs.python.org/3/library/os.html#os.urandom" rel="nofollow noreferrer">the doc</a>:</p>
<blockquote>
<p><code>os.urandom(size)</code><br>
Return a string of <em>size</em> random bytes suitable for cryptographic use.</p>
</blockquote>
<p>And to count zeros, perhaps use <code>digest()</code>, make an <code>int</code> from it and ask for its bit length:</p>
<pre><code>    hashvalue = hashlib.sha1(os.urandom(16)).digest()
    i = int.from_bytes(hashvalue, 'big')
    zeroes = 160 - i.bit_length()
</code></pre>
<p>Benchmark results (numbers are times, so lower=faster):</p>
<pre><code>0.56 zeroes_you
0.31 zeroes_me
0.29 zeroes_me2
0.26 zeroes_me3

0.60 zeroes_you
0.31 zeroes_me
0.28 zeroes_me2
0.24 zeroes_me3

0.57 zeroes_you
0.31 zeroes_me
0.28 zeroes_me2
0.24 zeroes_me3
</code></pre>
<p>Benchmark code:</p>
<pre><code>import hashlib
import random
import os
from timeit import repeat

def zeroes_you():
    randomInput= random.getrandbits(128)
    hashvalue = hashlib.sha1(str(randomInput).encode('ASCII')).hexdigest()
    b = bin(int(hashvalue, 16))
    c= b[2:].zfill(160)
    zeroes = str(c).index('1')

def zeroes_me():
    hashvalue = hashlib.sha1(os.urandom(16)).digest()
    i = int.from_bytes(hashvalue, 'big')
    zeroes = 160 - i.bit_length()

def zeroes_me2():
    randomInput = random.getrandbits(128)
    hashvalue = hashlib.sha1(randomInput.to_bytes(16, 'big')).digest()
    i = int.from_bytes(hashvalue, 'big')
    zeroes = 160 - i.bit_length()
    
def zeroes_me3(randbits=random.getrandbits, sha1=hashlib.sha1, int_from_bytes=int.from_bytes):
    hashvalue = sha1(randbits(128).to_bytes(16, 'big')).digest()
    zeroes = 160 - int_from_bytes(hashvalue, 'big').bit_length()

for _ in range(3):
    for zeroes in zeroes_you, zeroes_me, zeroes_me2, zeroes_me3:
        t = min(repeat(zeroes, number=100000))
        print('%.2f' % t, zeroes.__name__)
    print()
</code></pre>
    </div>