<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Some of these branches can be eliminated. Let's see:</p>

<pre><code>if (heightsStack.Count &gt; 0)
{
  if (heightsStack.Peek() &lt; H[height])
  {
    blocksCounter++;
    heightsStack.Push(H[height]);
  }
}
else
{
  blocksCounter++;
  heightsStack.Push(H[height]);
}
</code></pre>

<p>Here, there are two conditions where we execute the two common lines: <code>heightsStack.Count &lt;= 0</code> or <code>heightsStack.Peek() &lt; H[height]</code>. Since <code>Count</code>  can't be negative, let's rewrite it as such:</p>

<pre><code>if (heightsStack.Count == 0 || heightsStack.Peek() &lt; H[height])
{
  blocksCounter++;
  heightsStack.Push(H[height]);
}
</code></pre>

<hr>

<pre><code>if (heightsStack.Count &gt; 0)
{
  while (heightsStack.Count &gt; 0 &amp;&amp; heightsStack.Peek() &gt; H[height])
  {
</code></pre>

<p>The first if-statement is redundant. If <code>heightStack.Count &gt; 0</code> is false, the while statement will be false as well. We would immediately fall through and end up at the if-statement in the section above. This if-statement would evaluate to true, since <code>heightStack.Count == 0</code> still. And it would execute the two common lines.</p>

<p>This would leave the body of the for-loop as follows:</p>

<pre><code>while (heightsStack.Count &gt; 0 &amp;&amp; heightsStack.Peek() &gt; H[height])
{
  heightsStack.Pop();
}
if (heightsStack.Count == 0 || heightsStack.Peek() &lt; H[height])
{
  blocksCounter++;
  heightsStack.Push(H[height]);
}
</code></pre>

<p>Note, that we only have one branch with the two common lines.</p>

<hr>

<p>There's one last thing. You're using a for-loop, and only using the looped variable to index directly. Instead, consider using a foreach loop:</p>

<pre><code>public int solution(int[] H)
{
  Stack&lt;int&gt; heightsStack = new Stack&lt;int&gt;();
  int blocksCounter = 0;

  foreach(int height in H)
  {
    while (heightsStack.Count &gt; 0 &amp;&amp; heightsStack.Peek() &gt; height)
    {
      heightsStack.Pop();
    }
    if (heightsStack.Count == 0 || heightsStack.Peek() &lt; height)
    {
      blocksCounter++;
      heightsStack.Push(height);
    }
  }
  return blocksCounter;
}
</code></pre>

<hr>

<p>As far as algorithm goes, you do what I would have come up with, so I have nothing more to say about that.</p>
    </div>