<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Welcome to Code Review!</p>

<p><strong>God function</strong><br>
You have all code in one function, the <code>main</code>. That's what sometimes is called a <a href="http://wiki.c2.com/?GodMethod" rel="nofollow noreferrer">God function</a>: It knows and does too much. Try splitting your code up into smaller, isolated pieces with clear tasks. If you look at the flow of your code, I'm sure you can find several of these tasks:</p>

<ul>
<li>Read values from a file into an array or list, </li>
<li>Print the menu</li>
<li>Register a user</li>
<li>Login a user</li>
</ul>

<p><strong>Don't use goto</strong><br>
Goto is mostly considered bad form. It's very easy to make so called <a href="https://en.wikipedia.org/wiki/Spaghetti_code" rel="nofollow noreferrer">spaghetti code</a>, which is very hard to maintain. There are a heap of other <a href="https://lonewolfonline.net/flow-control-control-structures/" rel="nofollow noreferrer">flow control</a> statements to use instead: for and while loops, switch statements, whatnot. For a CLI menu like you have, I'd say that the most common is to use a while loop:</p>

<pre class="lang-c# prettyprint-override"><code>var quit = false;
while (!quit)
{
    var input = readInput()
    if ("exit".eaquls(input))
    {
        quit = true;
    }
}
</code></pre>

<p><strong>Generics are your friend</strong><br>
You use the namespace <code>System.Collections</code> for the <code>ArrayList</code> class. I'd use  <code>List&lt;T&gt;</code> from <code>System.Collections.Generic</code> instead. It will let you specify the type of objects ending up in your list. User names for example are strings, but with ArrayList you can add numbers, other array lists, whatever. See e.g. <a href="https://stackoverflow.com/questions/2309694/arraylist-vs-list-in-c-sharp">here</a> for more on generics. You probably don't want this:</p>

<pre class="lang-c# prettyprint-override"><code>    ArrayList users = new ArrayList();
    users.Add(1);
    users.Add(new ArrayList());
    users.Add("test");
</code></pre>

<p>This is better:</p>

<pre class="lang-c# prettyprint-override"><code>var better = new List&lt;string&gt;();
better.Add("Alice");
better.Add("Bob");
</code></pre>

<p>Now the compiler will warn you ahead of time, before you try using an ArrayList as a user name.</p>
    </div>