<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>String parsing</h2>

<p>You are right that C++ slightly lacks some convenient features for string parsing. If you were not trying to count lines as well as find words, then a single while loop with:</p>

<pre><code>  inFile &gt;&gt; s;
</code></pre>

<p>would have sufficed, because streaming will terminate on whitespace by default. But because you want to count lines, you need the 2 loops and therefore you need to the <code>stream =&gt; str =&gt; stringstream =&gt; s</code> logic. You can gain some syntactic effeciencies, see code below. </p>

<p>However you do not need (most of) the "whitespace" logic, because, as mentioned, <code>stream &gt;&gt; s</code> will be delimited by (and will eliminate) whitespace. </p>

<p>I ended up with just a <code>if (!s.empty)</code> as the only check. </p>

<h2>Style</h2>

<ul>
<li>Try to get into the habit of not <code>using namespace std;</code>. This is <a href="https://www.geeksforgeeks.org/using-namespace-std-considered-bad-practice/" rel="nofollow noreferrer">considered bad practice</a>. Getting into this habit now will help you as you progress. </li>
<li><a href="https://accu.org/index.php/journals/2619" rel="nofollow noreferrer">Don't use <code>std::endl;</code></a> unless you explicitly want to flush the output buffer. </li>
<li>If you are not using <code>argv</code> and <code>argc</code> you can omit them from <code>main()</code>'s signature. This is cleaner and prevents "unused variable warnings in some IDE's and compiler (And you should have these warnings turned on with <code>-Wall -Wextra</code>).</li>
<li>Increment operator <code>++</code> should be used as <em>pre</em>-increment rather than <em>post</em> most of the time. get in the habit of doing that, it can be faster in some situations. <a href="https://google.github.io/styleguide/cppguide.html#Preincrement_and_Predecrement" rel="nofollow noreferrer">Almost always <code>++i</code> not <code>i++</code>.</a> </li>
</ul>

<h2>Linked list - memory</h2>

<p>You are using a self implemented linked list to store the unique words. More on that below. Here I would like to comment on how you implemented that list. </p>

<p>There are a few issues, but the biggest issue I can see, is that you are allocating <code>Node</code>s on the heap with <code>new</code> but you are never <code>delete</code>ing them. That means your application <strong>leaks memory</strong>. You can confirm this with a tool like <code>valgrind</code>. </p>

<p>The guidelines are:</p>

<ol>
<li>Never write <code>new</code> without writing <code>delete</code></li>
<li>Never write <code>new</code> or <code>delete</code> =&gt; instead <a href="https://www.quora.com/Why-are-the-%E2%80%98new%E2%80%99-and-%E2%80%98delete%E2%80%99-keywords-considered-bad-in-modern-C++" rel="nofollow noreferrer">use smart_pointers like std::unique_ptr</a></li>
<li>Don't implement you own containers, use the ones from the standard library</li>
</ol>

<h2>Choosing a container</h2>

<p>Firstly, as mentioned above, don't implement your own containers, let alone write <code>new and delete</code> yourself. Use the ones from the standard library. </p>

<ol>
<li>There is a rich choice. You could just use <a href="https://en.cppreference.com/w/cpp/container/list" rel="nofollow noreferrer"><code>std::list</code></a> or <code>std::forward_list</code>, which behave similarly to what you use here. More speficically it would be a <code>std::list&lt;std::pair&lt;std::string, int&gt;&gt;</code>. </li>
<li>You are doing a linear search for each word. Linked lists are slow at linear search because they have to "pointer-hop" through random parts of memory. For a linear search (and probably most of the time) you should be using a <code>std::vector&lt;std::pair&lt;std::string, int&gt;&gt;</code></li>
<li>Any linear search is the wrong solution for this problem because you are making the algorithm O(n^2), ie for each word found, you are walking through all the words found already. Use an "associative container" which optimises this process by using a <a href="https://en.wikipedia.org/wiki/Hash_table" rel="nofollow noreferrer">hash_map</a> under the hood. <code>std::unordered_map&lt;std::string, int&gt;</code> would be good and that's what I have used. </li>
</ol>

<p>Using <code>std::unordered_map</code> massively reduces your code both in lines of code, and also runtime. It makes it easier to understand and more robust and more maintainable. </p>

<h2>RAII</h2>

<p><a href="https://en.wikipedia.org/wiki/Resource_acquisition_is_initialization" rel="nofollow noreferrer">Resource Acquisition is initialisation</a> in an important concept in C++. Read up about it. In your code specifically, you don't need: <code>inFile.close();</code></p>

<h2>Bonus#1</h2>

<p>If you did want to "lowercase" and remove "non-alpha" characters, I have included that code, because it is non-obvious if you're new to C++ string fiddling. </p>

<h2>Bonus#2</h2>

<p>If you wanted to find out the "10 most common words", I have shown how you can easily achieve that by using <code>std::partial_sort_copy</code> to copy the top10 into a <code>std::vector</code>. </p>

<p>Hope that helps. Come back in the comments if I have misunderstood something, or you have questions. </p>

<p>Here is the refactored code:</p>

<pre><code>#include &lt;algorithm&gt;
#include &lt;fstream&gt;
#include &lt;iostream&gt;
#include &lt;sstream&gt;
#include &lt;string&gt;
#include &lt;unordered_map&gt;

int main() {
  std::string fileName;
  std::cout &lt;&lt; "Enter file name: ";
  getline(std::cin, fileName);
  std::ifstream inFile(fileName);

  int wordCount = 0;
  int lineNum   = 0;

  std::unordered_map&lt;std::string, int&gt; words;

  std::string str;
  while (getline(inFile, str)) {
    std::stringstream ss(str);
    while (ss) {
      std::string s;
      ss &gt;&gt; s;
      // bonus#1: lowercase and remove/erase non-alpha
      std::transform(s.begin(), s.end(), s.begin(),
                     [](unsigned char c) { return std::tolower(c); });
      s.erase(
          std::remove_if(s.begin(), s.end(),
                         [](unsigned char c) { return std::isalpha(c) == 0; }),
          s.end());
      if (!s.empty()) {
        ++wordCount;
        ++words[s];
      }
    }
    ++lineNum;
  }
  std::cout &lt;&lt; "Number of lines: " &lt;&lt; lineNum &lt;&lt; '\n';
  std::cout &lt;&lt; "Number of words: " &lt;&lt; wordCount &lt;&lt; '\n';

  std::cout &lt;&lt; "Word list\n";
  for (auto&amp; pair: words)
    std::cout &lt;&lt; pair.first &lt;&lt; " : " &lt;&lt; pair.second &lt;&lt; "\n";

  // bonus#2: top10 words
  std::vector&lt;std::pair&lt;std::string, int&gt;&gt; top10(10, {"", 0});
  std::partial_sort_copy(words.begin(), words.end(), top10.begin(), top10.end(),
                         [](auto&amp; a, auto&amp; b) { return a.second &gt; b.second; });
  std::cout &lt;&lt; "\nTop 10 words\n";
  for (auto&amp; pair: top10)
    std::cout &lt;&lt; pair.first &lt;&lt; " : " &lt;&lt; pair.second &lt;&lt; "\n";
}
</code></pre>
    </div>