<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1><code>id</code></h1>

<p>you shadow the builtin <code>id</code> with this name as variable</p>

<h1>itertuples</h1>

<p>a way to improve performance is using <code>itertuples</code> to iterate over the <code>DataFrame</code>: <code>for _, node, parent in df.itertuples():</code></p>

<h1>iterations</h1>

<p>You can do this in 1 iteration over the input with a nested loop over the ancestors:</p>

<pre><code>node_ancestors = defaultdict(set)
node_ancestors[0] = set([0])
node_descendants = defaultdict(set)
node_descendants[0] = set([0])
for _, node, parent in df.itertuples():
    node_ancestors[node].add(node)
    node_ancestors[node].update(node_ancestors[parent])

    for ancestor in node_ancestors[node]:
        node_descendants[ancestor].add(node)
</code></pre>

<p>Depending on how nested the tree is, this will be faster or slower than iterating over the whole input twice. You'll need to test it on your dataset.</p>

<h1>global vs local</h1>

<p>another speedup might be achieved by doing this in a function instead of the global namespace (<a href="https://stackoverflow.com/q/12590058/1562285">explanation</a>)</p>

<pre><code>def parse_tree(df):
    node_ancestors = defaultdict(set)
    node_ancestors[0] = set([0])
    node_descendants = defaultdict(set)
    node_descendants[0] = set([0])
    for _, node, parent in df.itertuples():
        node_ancestors[node].add(node)
        node_ancestors[node].update(node_ancestors[parent])

        for ancestor in node_ancestors[node]:
            node_descendants[ancestor].add(node)

    return node_ancestors, node_descendants   
</code></pre>
    </div>