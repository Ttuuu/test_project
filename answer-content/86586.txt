<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Some general remarks:</p>

<ul>
<li>The method name <code>removeAll</code> is misleading, as it does not remove
all elements from the array. I would call it for example <code>removeMatching</code>.</li>
<li>The method parameter is a closure, but acts as a predicate, so
<code>predicate</code> might be a better name.</li>
<li>The <code>counter</code> variable in the method is actually the array index
so you could call it <code>index</code>.</li>
<li>The method documentation can be improved (details at the end of
this answer).</li>
</ul>

<p>Your concrete problem about modifying the loop counter inside the
loop can easily be solved by traversing the array indices in 
reverse order:</p>

<pre><code>for var index = count - 1; index &gt;= 0; index-- { ... }
</code></pre>

<p>Using <code>stride()</code> allows you to have a <em>constant</em> loop variable: </p>

<pre><code>for index in stride(from: count - 1, through: 0, by: -1) { ... }
</code></pre>

<p>Putting it all together:</p>

<pre><code>extension Array {

    /// Removes all items that satisfy the predicate:
    mutating func removeMatching(predicate: (T) -&gt; Bool) {
        for index in stride(from: count - 1, through: 0, by: -1) {
            if predicate(self[index]) {
                removeAtIndex(index)
            }
        }
    }
}
</code></pre>

<p>An alternative implementation would be </p>

<pre><code>extension Array {

    /// Removes all items that satisfy the predicate:
    mutating func removeMatching(predicate: (T) -&gt; Bool) {
        self = self.filter { !predicate($0) }
    }
}
</code></pre>

<p>The first method removes the matching elements, while the second method
creates a new array and then replaces <code>self</code>. Which one is more 
efficient depends how many elements are actually removed in relation
to the array size.</p>

<p>Notice that in Swift 2, <code>Element</code> should be used in place of <code>T</code>.</p>

<p>As mentioned above, the inline method documentation can be improved
(I took this information from the SO thread <a href="https://stackoverflow.com/questions/27715933/swift-documentation-comments">Swift Documentation Comments</a>). Example:</p>

<pre><code>extension Array {
    /// Removes all items that satisfy the `predicate`
    ///
    /// :param: predicate A boolean predicate.
    mutating func removeMatching(predicate: (T) -&gt; Bool) {
        self = self.filter { !predicate($0) }
    }
}
</code></pre>

<p>Now "Option-Click" will show you </p>

<p><img src="https://i.stack.imgur.com/H66oM.png" alt="enter image description here"></p>

<hr>

<p><strong>Addendum:</strong> A <a href="https://developer.apple.com/documentation/swift/rangereplaceablecollection/3018275-removeall" rel="nofollow noreferrer"><code>removeAll(where:)</code></a> was added to the Swift Standard library in <strong>Swift 4.2,</strong> so there is no need to define your own method for that purpose anymore. </p>

<p>As explained in <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0197-remove-where.md" rel="nofollow noreferrer">SE-0197</a> this method is supposed to be both safe and efficient.</p>
    </div>