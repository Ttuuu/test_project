<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Unnecessary <code>else</code> after <code>return</code></h1>

<p>In the body of an <code>if</code>, if you end up returning something in that body, an <code>else</code> is not required. A return will exit the body of the function, so the code in the <code>else</code> won't be run. So, you can simply move the code in the <code>else</code> to the outside, after the <code>if</code>. This may have been confusing, but take a look at the updated code to see what I'm talking about.</p>

<h1><code>enumerate()</code></h1>

<p>Instead of using <code>range(len())</code>, use <code>enumerate()</code>. This will allow you to access both the index and the value at that position, and <code>enumerate</code> works for other iterables as well. It's useful here because instead of writing <code>arr[j]</code> over and over, you can simply write <code>value</code>, which is the value at <code>arr[j]</code>.</p>

<h1><code>_</code> for unused loop variables</h1>

<p>Also touching on <code>enumerate</code>- When you only want to use one of the values (in your code, you have both cases present), use an <code>_</code> in that place. This indicates to you and other readers that that variable is to be ignored, and isn't necessary.</p>

<h1>Parameter Spacing</h1>

<p>When using <code>:</code> in parameters, make sure there is <em>exactly one space</em> after the <code>:</code>.</p>

<h1>Operator Spacing</h1>

<p>Make sure to space out your operators when assigning and performing arithmetic on variables. It makes it much easier to read, and looks nicer.</p>

<h1><code>return True</code></h1>

<p>Instead of explicitly returning <code>true</code> if the <code>if</code> condition is true, simply return that condition. It will return the boolean value that is returned from that condition.</p>

<h1>function_naming</h1>

<p>I know you can't change the function names (assuming this is coming from a code challenge website), but remember that method names are to be in <code>snake_case</code>, not <code>camelCase</code> or <code>PascalCase</code>. This is in reference to <a href="https://www.python.org/dev/peps/pep-0008/#function-and-variable-names" rel="nofollow noreferrer">PEP-8 Method Naming Guidelines</a>. Thanks to <a href="https://codereview.stackexchange.com/users/120114/s%E1%B4%80%E1%B4%8D-on%E1%B4%87%E1%B4%8C%E1%B4%80">@SᴀᴍOnᴇᴌᴀ</a> for pointing this out to me.</p>

<p><strong><em>Updated Code</em></strong></p>

<pre><code>class Solution:

    def longestPalindrome(self, s: 'str') -&gt; 'str':
        if s == "":
            return ""
        ## Find all the substrings
        arr = []
        for i, value in enumerate(s):
            char = value
            arr.append(char)
            for j in range(i + 1, len(s) - 1):
                char += s[j]
                arr.append(char)

        ##Find the palindrome with a longest length
        max_length = 0
        for _, value  in enumerate(arr):
            if self.isPalindrome(value):
                if len(value) &gt; max_length:
                    max_length = len(value)
                    index = value
        return index


    def isPalindrome(self, s: 'str')-&gt;'str':
        return s == s[::-1]
</code></pre>
    </div>