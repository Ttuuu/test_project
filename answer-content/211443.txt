<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The <code>dplyr</code> package you are using here is perfect for this kind of aggregation work. Of particular interest here will be the functions</p>

<ol>
<li><code>ntile()</code> for creating a DECILE (1 through 10) vector added to your data via <code>mutate()</code></li>
<li><code>group_by()</code> for doing aggregation work per the newly created DECILE column</li>
<li><code>summarize</code> for aggregating data within each group</li>
</ol>

<p>In action, it gives:</p>

<pre><code>data &lt;- data.frame(NET_INCOME = sample(1000)) %&gt;%
  mutate(TAX = 0.15 * NET_INCOME)

report &lt;- data %&gt;%
  mutate(DECILE = ntile(NET_INCOME, 10)) %&gt;%
  group_by(DECILE) %&gt;%
  summarize(
    MAX_INCOME = max(NET_INCOME),
    NET_INCOME = sum(NET_INCOME),
    TAX        = sum(TAX),
    COUNT      = n(),
  ) %&gt;%
  mutate(
    PCT_INCOME = 100 * NET_INCOME / sum(NET_INCOME),
    PCT_TAX    = 100 * TAX / sum(TAX)
  ) %&gt;% print

#    DECILE MAX_INCOME NET_INCOME     TAX COUNT PCT_INCOME   PCT_TAX
#     &lt;int&gt;      &lt;dbl&gt;      &lt;int&gt;   &lt;dbl&gt; &lt;int&gt;      &lt;dbl&gt;     &lt;dbl&gt;
#  1      1        100       5050   757.5   100   1.008991  1.008991
#  2      2        200      15050  2257.5   100   3.006993  3.006993
#  3      3        300      25050  3757.5   100   5.004995  5.004995
#  4      4        400      35050  5257.5   100   7.002997  7.002997
#  5      5        500      45050  6757.5   100   9.000999  9.000999
#  6      6        600      55050  8257.5   100  10.999001 10.999001
#  7      7        700      65050  9757.5   100  12.997003 12.997003
#  8      8        800      75050 11257.5   100  14.995005 14.995005
#  9      9        900      85050 12757.5   100  16.993007 16.993007
# 10     10       1000      95050 14257.5   100  18.991009 18.991009
</code></pre>

<hr>

<p>For comparison, this is how we could do with basic R functions. Using</p>

<ol>
<li><code>quantile</code> and <code>findInterval</code> (an alternative is <code>cut</code>) for building a vector of deciles (1 through 10)</li>
<li><code>aggregate</code> to compute the sums per decile</li>
</ol>

<p>See for yourself:</p>

<pre><code>set.seed(1444)
net_income &lt;- sample(1000)
deciles &lt;- quantile(net_income, seq(1, 10) / 10)

data &lt;- data.frame(
  NET_INCOME = net_income,
  TAX        = 0.15 * net_income,
  DECILE     = findInterval(net_income, c(-Inf, deciles), rightmost.closed = TRUE),
  COUNT      = 1 
)

per_decile &lt;- aggregate(. ~ DECILE, data, FUN = sum)
per_total  &lt;- aggregate(. ~ 1,      data, FUN = sum)

data.frame(
  INCOME_THRESHOLD  = deciles,
  DECILE            = per_decile$DECILE,
  NET_INCOME        = per_decile$NET_INCOME,
  COUNT             = per_decile$COUNT,
  PCT_INCOME        = 100 * per_decile$NET_INCOME / per_total$NET_INCOME,
  TAX               = per_decile$TAX,
  PCT_TAX           = 100 * per_decile$TAX / per_total$TAX
)
</code></pre>
    </div>