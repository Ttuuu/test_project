<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The first thing I'd suggest is to learn to put algorithms in separate functions.  This allows your maintenance to be much simpler.  If a change is needed, as long as the parameters and the return type don't change, you don't have to worry about the rest of the program.</p>

<p>If you want to use different types with your algorithm, one way to go is to use generics.  The main caveat to this is that checking that the type used is appropriate(i.e. using strings would throw an error), becomes very complicated.</p>

<p>One of the most common mistakes people who are learning this algorithm make, is checking 3 times, once for each factor then both factors combined. if you check for both factors back to back this will automatically give you the combined factor.</p>

<p>You are using <code>int</code> to indicate a valid factor.  It would make more sense to use a <code>bool</code>.</p>

<p>Putting it all together, it can be simplified very greatly.  Something like this would work:</p>

<pre><code>template&lt;typename T&gt;
void FizzBuzz(T start, T end, T factor1, T factor2, T step)
{
    for (T i = start; i &lt; end; i += step)
    {
        bool fizz = (i % factor1) == 0;
        bool buzz = (i % factor2) == 0;
        if (!fizz &amp;&amp; !buzz)
        {
            cout &lt;&lt; i &lt;&lt; '\n';
        }
        else
        {
            if (fizz)
            {
                cout &lt;&lt; "Fizz";
            }
            if (buzz)
            {
                cout &lt;&lt; "Buzz";
            }
            cout &lt;&lt; '\n';
        }
    }
}
</code></pre>
    </div>