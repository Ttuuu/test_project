<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your implementation does the trick. For what it's worth, I would consider your implementation the current "traditional way". It is thread-safe. The static constructor is guaranteed to run only once, so you won't accidentally end up with two instances if two threads try to grab the instance for the first time simultaneously.</p>

<h1>Laziness</h1>

<p>There is one more thing you might want to consider though. Because of the way the static constructor works, it is executed the first time the class is referenced in the code. This means that the instance in your singleton is created, even when you don't try to grab the instance, but another static variable perhaps.</p>

<p>To fix this, you might want to make the creation of the instance lazy, so that it really only fires when you need it. To do this, you can use the <code>Lazy&lt;T&gt;</code> class.</p>

<h1>Sealed</h1>

<p>This is mostly a formality, but it's nice when trying to do it formally. The <code>sealed</code> keyword means that that class cannot be inherited from. The private constructor already ensured that, but this makes it more explicit.</p>

<h1>Readonly</h1>

<p>As Jesse mentioned in the comments, it's a good idea to make the instance field (lazy or not) <code>readonly</code>. This prevents you from accidentally mucking up your singleton instance from within the class.</p>

<pre><code>public sealed class Person
{
    private Person() { }
    private static readonly Lazy&lt;Person&gt; lazyPersonInstance = new Lazy&lt;Person&gt;(() =&gt; new Person());
    public static Person GetPersonInstance() 
    {
        return lazyPersonInstance.Value;
    }
}
</code></pre>

<p>Your method <code>GetPersonInstance</code> can also be a getter-property:</p>

<pre><code>    public static Person Instance =&gt; lazyPersonInstance.Value;
</code></pre>

<h1>Exceptions</h1>

<p>IEatBagels already posted an answer about throwing exceptions. I'll elaborate a bit on how it would work in this example. We're looking at the scenario where instantiating the singleton instance throws an exception.</p>

<p>In your code, this exception would be thrown when the static constructor is ran. As IEatBagels points out, when this happens, the type is broken for the rest of the "program". This means that you have one shot at creating your instance.</p>

<p>In my example, the initiation of the instance does not happen during the execution of the static constructor. All we do during static initialization - static constructor and static fields act similarly IIRC - is creating the <code>Lazy&lt;T&gt;</code> object with the factory method. This method is only executed when <code>lazyPersonInstance.Value</code> is called.</p>

<p>However, <code>Lazy&lt;T&gt;</code> caches exceptions. This means that if the factory method throws an exception, that exception will be rethrown on every subsequent call to <code>lazyPersonInstance.Value</code>. Without re-executing the factory method. So in the end, this is the same problem as the static constructor problem. The <code>Lazy&lt;T&gt;</code> docs have the following to say:</p>

<blockquote>
  <p>The Lazy stands in for an actual T that otherwise would have been initialized at some earlier point, usually during startup. A failure at that earlier point is usually fatal. If there is a potential for a recoverable failure, we recommend that you build the retry logic into the initialization routine (in this case, the factory method), just as you would if you weren't using lazy initialization.<br>
  <sub><a href="https://docs.microsoft.com/en-us/dotnet/api/system.lazy-1?view=netframework-4.8" rel="noreferrer">MSDN docs</a></sub></p>
</blockquote>

<p>So if you really must throw exceptions in your constructor, be sure to handle them in the factory method.</p>

<h2>Exceptions and thread-safety</h2>

<p>There's one more workaround for the problem of exceptions in constructors. <code>Lazy</code> has three thread-safety modes, defined in the enum <code>System.Threading.LazyThreadSafetyMode</code> which can be passed to the constructor of <code>Lazy&lt;T&gt;</code>.</p>

<ol>
<li><code>None</code>. No thread safety.</li>
<li><code>ExecutionAndPublication</code>. This is the default. This ensures that the factory method is executed only once, and that the object on <code>lazy.Value</code> is always the same across threads.</li>
<li><code>PublicationOnly</code>. This only ensures thread-safety on <code>lazy.Value</code>. It can happen that the factory method is executed simultaneously by multiple threads, but the resulting instance is still the same. The others are discarded. According to the <code>Lazy&lt;T&gt;</code> docs, <strong>Exceptions are not cached here</strong>. </li>
</ol>

<p>This leaves you, the implementer of the singleton with a decision: if there are exceptions that might be thrown, that can't be handled within the factory method, and that might not throw in subsequent attempts (weird, but might happen), you could consider loosening up some of the locking on <code>Lazy</code> to allow for this behaviour.</p>

<hr>

<p>For further reading, see <a href="https://csharpindepth.com/articles/singleton" rel="noreferrer">this blog post by Jon Skeet.</a></p>
    </div>