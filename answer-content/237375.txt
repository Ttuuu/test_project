<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li>One performance problem is the overhead of allocating and resizing a vector. Since you read the size up front, why not simply <code>reserve()</code> enough space?</li>
</ul>

<pre><code>    cin &gt;&gt; array_size;
    input_array.reserve(array_size);
</code></pre>

<ul>
<li><p>If you sorted the sequence, computing the median would become dead simple and very fast (O(1)). This may be a better approach. However, you can't sort the sequence once and then run different queries, because the subsequence applies to the unsorted sequence. I haven't thought this through completely, but when removing two elements from the sequence, there are several possible ways it can affect the median:</p>

<ul>
<li>If both elements are larger, the median becomes the previous value in the sorted sequence.</li>
<li>If both elements are smaller, the median becomes the next value in the sorted sequence.</li>
<li>If one element element is smaller and one is larger, the median remains the same.</li>
<li>If one element is equal to the median, it moves opposite to the other value.</li>
</ul>

<p>The problem here is that the "new" median can easily be one that's should be removed already, so this simple approach is not yet enough, but it might serve as a start to a better algorithm. In any case, what you need to keep in mind is the complexity and the variables that affect it. For your task, you have the number of values <code>n</code> and the number of queries <code>m</code>. Your algorithm is almost optimal for the case that <code>m = 1</code>. In order to improve the overall performance, you can actually optimize the performance for the case of <code>m &gt; 1</code>, even at the expense of the the <code>m = 1</code> case! Often, you can improve the performance by first sorting the data and then switching to a different (faster) algorithm for the actual work.</p></li>
</ul>
    </div>