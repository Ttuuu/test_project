<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Rather than sending comma-delimited strings, why not simply pass an array with value/key pairs eg:</p>

<pre><code>array(
   "field_str" =&gt; "foo",
    "field_int" =&gt; 100,
   "field_float" =&gt; 3.1415926535,
);
</code></pre>

<p>So you can pass values in mixed data types. This is more flexible. Then loop on the array and build a parameterized query.</p>

<p>But you still require validation of the field names and table names, it would be a good idea to enclose them in backticks or brackets.</p>

<p>The problem with this approach is that a hacker who finds a flaw could insert arbitrary data in any table, for example the table of <strong>users</strong>. Also, if the table name is prefixed with a dot, it could be possible to insert records to a table in another database. PDO will not protect against injection here.</p>

<p>To secure this function you need lots of validation and you are never sure you will cover all possibilities. That does not sound like a good idea overall.</p>

<p>Like suggested by @Your Common Sense, it would better to have a reusable function but provide the SQL query yourself.</p>

<p>You can still develop wrapper functions, for example a function to add/modify/delete a user. In this function you can put all the logic and table names to avoid repetition. It is actually a good idea to use some level of abstraction. There is the DRY rule (don't repeat yourself). Write functions for repeated stuff.</p>
    </div>