<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Everything looks great, and I can see what you are trying to achieve. </p>

<p>Only things I can recommend is to clean your code, make it as simple as possible, to make it easy to read and come back on later. </p>

<p>For example this line here:</p>

<p><code>while ((el = el.parentElement) &amp;&amp; !el.classList.contains(cls));</code></p>

<p>In the way it is used, it's okay, but it doesn't explain well what the intention is, instead, try to be more "if this, then", very straight forward. Instead of using a <code>while</code> you could use recursion instead, removing more confusion. </p>

<p>Another thing is, you may want to expand your variable names. You probably will put this code through a minifier either way, so no need to keep things short. </p>

<pre><code>function findAncestor(element, findClass) {
   if (element.classList.contains(findClass)) {
      return element;
   }
   if (!element.parentElement) {
      // Did we hit body?
      return false;
   }
   // We didn't find it, so check the parent.
   return findAncestor(element.parentElement, findClass);
}
</code></pre>

<p>Now we can read this function, and know exactly whats happening, without making any assumptions. </p>

<p>The next function is great, and works well, but we could make this more accessible using the <code>[hidden]</code> attribute along with a <code>.hidden</code> class, this is so we don't need to worry about compatibility. </p>

<p>We only want to use the parent as a light wrapper, from that parent we can find the child we actually want to show/hide</p>

<p><em>You can do a bit of reading on [hidden] here
<a href="https://www.paciellogroup.com/blog/2012/05/html5-accessibility-chops-hidden-and-aria-hidden/" rel="nofollow noreferrer">https://www.paciellogroup.com/blog/2012/05/html5-accessibility-chops-hidden-and-aria-hidden/</a></em> </p>

<pre><code>function openHolder() {
   var region = findAncestor(this, 'js-collapsible-region');
   var content = region.querySelector('.collapsible-area');

   if (content.classList.contains('hidden')) {
      content.classList.remove('hidden');
      content.removeAttribute('hidden');
   } else {
      content.classList.add('hidden');
      content.setAttribute('hidden', '');
   }
}
</code></pre>

<p>We also want to leave state out of the DOM if it isn't visual state (like we can check if something is hidden, but we could also track that another way).</p>

<p>We then simply need to add our even listeners on like we did before:</p>

<pre><code>var btn = document.getElementsByClassName('js-collapsible-btn');
for (var i = 0; i &lt; btn.length; i++) {
    // add click event to open holder
    btn[i].addEventListener('click', openHolder, false);
}
</code></pre>

<p>We can also change this to a "functional" approach to remove the loop (which we needed to handle manually)</p>

<pre><code>Array.from(document.getElementsByClassName('js-collapsible-btn'))
   .forEach(function(element) {
      element.addEventListener('click', openHolder, false);
   });
</code></pre>

<p>The last thing we should do, is instantly tell the screen reader is hidden but having the content marked as hidden to start with:</p>

<pre><code>&lt;div class="js-collapsible-region"&gt;
    &lt;h2&gt;Title&lt;/h2&gt;
    &lt;p&gt;Content goes here&lt;/p&gt;
    &lt;div&gt;
        &lt;button class="js-collapsible-btn"&gt;Click to show some text&lt;/button&gt;
    &lt;/div&gt;
    &lt;div class="collapsible-area hidden" hidden&gt;
        &lt;p&gt;Suprise&lt;/p&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;div class="js-collapsible-region"&gt;
    &lt;h2&gt;Title&lt;/h2&gt;
    &lt;p&gt;Content goes here&lt;/p&gt;
    &lt;div&gt;
        &lt;button class="js-collapsible-btn"&gt;Click to show some text&lt;/button&gt;
    &lt;/div&gt;
    &lt;div class="collapsible-area hidden" hidden&gt;
        &lt;p&gt;Suprise&lt;/p&gt;
    &lt;/div&gt;
&lt;/div&gt;
</code></pre>

<p>We also will need to change the styles to match </p>

<pre><code>.js-collapsible-region .collapsible-area {
    overflow: hidden;
}

.js-collapsible-region .collapsible-area.hidden {
    height: 0px !important;
}

.js-collapsible-region .collapsible-area:not(.hidden) {
    transition: height .3s linear;
}
</code></pre>

<p>You should note that the attribute <code>hidden</code> applies the styles <code>display: none</code>, which you may not want, so you can change your styles to override the way you want them to work. </p>

<p>Here is the resulting codepen <a href="https://codepen.io/anon/pen/KqgmNY" rel="nofollow noreferrer">https://codepen.io/anon/pen/KqgmNY</a></p>

<p>For some fun, since we are using ES6 with <code>classList</code> anyway, have a look at this version <a href="https://codepen.io/anon/pen/mwrmpL" rel="nofollow noreferrer">https://codepen.io/anon/pen/mwrmpL</a></p>
    </div>