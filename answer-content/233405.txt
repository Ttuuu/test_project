<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your function <code>f</code> should probably be a proper function, like all the others. There is no reason for it to be a <code>lambda</code>.</p>

<pre><code>def fuel(mass):
    return mass // 3 - 2
</code></pre>

<p>Instead of using recursion, you could use iteration in <code>partial_sum</code>:</p>

<pre><code>def total_fuel(mass):
    total_mass = 0
    while True:
        mass = fuel(mass)
        if mass &lt;= 0:
            break
        total_mass += mass
    return total_mass
</code></pre>

<p>The difference between the iterative and recursive approach is not really relevant here. The required fuel quickly vanishes even for really large masses (like <code>1e308</code>), so you never run into the stack size limit. However, timing wise the iterative approach is faster by up to about a factor three, probably due to the overhead of the additional function calls of the recursive solution:</p>

<pre><code>In [31]: %timeit partial_sum(1e308)
1.04 ms ± 9.28 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)

In [32]: %timeit total_fuel(1e308)
372 µs ± 6.47 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)
</code></pre>

<p>In Python 3.8+ this function can be shortened a bit more, as mentioned <a href="https://codereview.stackexchange.com/questions/233398/advent-of-code-2019-day-1/233405?noredirect=1#comment456229_233405">in the comments</a> by <a href="https://codereview.stackexchange.com/users/84718/409-conflict">@409_Conflict</a>:</p>

<pre><code>def total_fuel(mass):
    total_mass = 0
    while (mass := fuel(mass)) &gt; 0:
        total_mass += mass
    return total_mass
</code></pre>

<p>Files are directly iterable, there is no need to first read the whole file content into memory:</p>

<pre><code>def part_two():
    with open("../Inputs/day_1.txt") as file:
        return sum(total_fuel(int(mass)) for mass in file)
</code></pre>

<p>Note that usually you don't need the string to be a raw string, a simple <code>""</code> string suffices here.</p>

<p>You don't show in this case how you are calling it. but you should make sure to put it under a <a href="http://stackoverflow.com/questions/419163/what-does-if-name-main-do"><code>if __name__ == "__main__":</code> guard</a> to allow importing from this script without running the code.</p>

<p>It might also be worthwhile to add a <a href="https://www.python.org/dev/peps/pep-0257/" rel="nofollow noreferrer"><code>docstring</code></a> to each of your functions, or at least add a module docstring with the challenge description.</p>
    </div>