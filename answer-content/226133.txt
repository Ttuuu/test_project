<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>A <code>class Solution</code> with only public members can be written <code>struct Solution</code>.  But with only a single member function (that never uses the <code>this</code> pointer), why not a free function?</p>

<p>Presumably your <code>vector</code> is intended to be a <code>std::vector</code>, in which case we need <code>#include &lt;vector&gt;</code> and the correct namespace qualifier.</p>

<p>Don't pass a reference to a mutable object unless it's reasonable for the function to modify it.  In this case, we just want to copy from it, so pass a <code>const std::vector&lt;int&gt;&amp;</code> instead.</p>

<p>You're right that it's very inefficient to make many new containers, when we just want a view; that's exactly what iterator-pairs (aka <em>ranges</em>) are good for.  I'll not consider the first version any further.</p>

<p>There's no need to accept only vectors of <code>int</code> - we'd like to accept any ordered random-access container, of any element type.  That's easy enough, with a template:</p>

<pre><code>template&lt;typename RandomAccessIterator&gt;
TreeNode* makeBST(RandomAccessIterator start, RandomAccessIterator end){
</code></pre>

<p>There's a serious bug when <code>new TreeNode()</code> fails: all the allocated nodes further up the call tree will be leaked as the <code>std::bad_alloc</code> propagates upwards.  It's better to make the BST use smart pointers.  If you can't change that implementation, then we can achieve exception safety by holding each <code>root</code> in a smart pointer until after the potentially-throwing recursive calls:</p>

<pre><code>    auto root = std::make_unique&lt;TreeNode&gt;(*mid);
    root-&gt;left = makeBST(start, mid);
    root-&gt;right = makeBST(mid + 1, end);
    return root.release();
</code></pre>
    </div>