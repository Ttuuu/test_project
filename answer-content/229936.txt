<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>General feedback</h2>

<p>This code looks decent, though as <a href="https://codereview.stackexchange.com/a/229538/120114">Andrew's answer points out</a> many of the names are misleading. My biggest complaint is that semi-colons aren't used to terminate lines. While they are only required <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#Automatic_semicolon_insertion" rel="nofollow noreferrer">after a handful of statements</a>, it could lead to errors if somehow whitespace got removed. It is a good habit to default to terminating lines with them.</p>

<h2>Suggestions</h2>

<h3>method <code>nextAndResetIndices()</code></h3>

<p>There is a conditional block at the end of the method:</p>

<blockquote>
<pre><code>if (this.testDataIndex &gt; 6) {
  window.location.href = '/hs'
}
</code></pre>
</blockquote>

<p>Perhaps that check should be moved to the beginning of the method, otherwise the line above it (except for the line to increment <code>this.testDataIndex</code>) become useless. The line to increment <code>this.testDataIndex</code> could be combined into the conditional check if it is converted to a prefix increment operation:</p>

<pre><code>if (++this.testDataIndex &gt; 6) {
  window.location.href = '/hs'
}
</code></pre>

<h3>Arrow function Simplification</h3>

<p>The promise callbacks in <code>mounted()</code> can be simplified because arrow functions with a single statement don't need to have braces. Bear in mind that this means that the return value of the statement is always returned but for this purpose that wouldn't lead to any adverse affects for the last callback. Also, parentheses are not required around a single parameter.</p>

<p>This block:</p>

<blockquote>
<pre><code>fetch('http://127.0.0.1:8000/api/testdata', {
method: 'get'
})
.then((response) =&gt; {
return response.json()
})
// 'jsonData' refers to the json parsed response
.then((jsonData) =&gt; {
  this.testData = jsonData.data
})
</code></pre>
</blockquote>

<p>Can be simplified to the following:</p>

<pre><code>fetch('http://127.0.0.1:8000/api/testdata', {
  method: 'get'
})
.then(response =&gt; response.json())
// 'jsonData' refers to the json parsed response
.then(jsonData =&gt; this.testData = jsonData.data);
</code></pre>
    </div>