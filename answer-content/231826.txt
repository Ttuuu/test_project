<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Piece dictionary</h1>

<p><code>chrs</code> is a very generic name. Since this is all about chess, you should be more specific by calling it something like <code>PIECES</code> or <code>ELEMENTS</code>. I chose to capitalize the name because you are using it as a module level constant, <a href="https://www.python.org/dev/peps/pep-0008/#constants" rel="noreferrer">which according to PEP8 should have capitalized names</a>.</p>

<p>Also instead of <code>&lt;color prefix&gt;_&lt;piece name&gt;</code>, it might be more elegant to have a "two-stage" dictionary, like</p>

<pre><code>ELEMENTS = {
    'b': {
        'checker': u'\u25FB',
        'pawn': u'\u265F',
        'rook': u'\u265C',
        'knight': u'\u265E',
        'bishop': u'\u265D',
        'king': u'\u265A',
        'queen': u'\u265B',
    },
    'w': {
        'checker': u'\u25FC',
        'pawn': u'\u2659',
        'rook': u'\u2656',
        'knight': u'\u2658',
        'bishop': u'\u2657',
        'king': u'\u2654',
        'queen': u'\u2655'
    }
}
</code></pre>

<p>Using this approach would help you to get rid of all the string concatenation in order to access the correct elements of the dictionary. With this approach the access would be like <code>ELEMENTS[&lt;color prefix&gt;][&lt;piece name&gt;]</code>.</p>

<h1>Magic values</h1>

<p>There are a few magic values like <code>'B'</code>, <code>'W'</code>, or <code>'0'</code>. They should be replaced with module level constants or an <a href="https://docs.python.org/3/library/enum.html" rel="noreferrer"><code>Enum</code></a>. From my experience this helps to avoid typos and makes it easier to change those values.</p>

<h1>Numpy</h1>

<p>From the code shown in your question, I don't think Numpy is the right tool for the job here. Numpy can play its strengths mainly when applying uniform operations to larger "lumps" of numerical data. A 2-dimensional chessboard with 8x8 fields where you mainly perform operations at distinct locations is likely not a good match for this description. Since there is also quite some conversion between Python and Numpy data types, there is a good chance that this overhead will decrease the performance compared to plain Python code.</p>
    </div>