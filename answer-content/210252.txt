<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>In Java, the most efficient implementation of this will likely be </p>

<pre><code>public int searchInsert(int[] numbers, int target) {
    int index = Arrays.binarySearch(numbers, target);

    if (index &lt; 0) {
        index = -index - 1;
    }

    return index;
}
</code></pre>

<p>With that said, the place where I'd look first are your special cases.  Under what circumstances would <code>midIndex</code> be less than 0 or more than <code>numbers.length - 1</code>?  Never (if it was, <code>numbers[midIndex]</code> would throw an out of bounds exception).  And when will it be equal?  When we've found the edge, when <code>endIndex</code> will be less than <code>startIndex</code>.  </p>

<p>So simplify </p>

<pre><code>    while (startIndex &lt; endIndex) {
        midIndex = (endIndex - startIndex) / 2 + startIndex;
        if (numbers[midIndex] == target) {
            return midIndex;
        }

        if (numbers[midIndex] &lt; target) {
            startIndex = midIndex + 1;
        }
        else {
            endIndex = midIndex - 1;
        }
    }

    return startIndex;
</code></pre>

<p>This will do one extra assignment and outer loop comparison but save two comparisons on every iteration.  Since the assignment only involves registers and math, it should be quick (possibly quicker than the comparisons, which have to load the registers from cache if not memory).  </p>

<p>Without the extra checks, the code will update either <code>startIndex</code> or <code>endIndex</code> and make the same return.  Because <code>startIndex</code> will equal either <code>midIndex</code> or <code>midIndex + 1</code>, the same as was returned in the original code.  </p>
    </div>