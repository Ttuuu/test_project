<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Printing a menu of choices</h3>

<p>This is a poor way to present a menu of choices, and it doesn't fully work:</p>

<blockquote>
<pre><code>def pick_choice(choices):
    for x in choices:
        print(str(choices.index(x)+1) + ": " + x)
    while True:
        decision = None
        try:
            decision = int(input("ENTER 1-" + str(len(choices)) + ": "))
        except ValueError or decision not in range(1, len(choices)+1):
            print("That isn't an option.")
            continue
        if decision in range(1, len(choices)+1):
            return decision
</code></pre>
</blockquote>

<p>There are several issues here:</p>

<ul>
<li>Using <code>index</code> to find the index is inefficient. It would be better to use a counting loop. An even better technique is to use <code>enumerate</code>.</li>
<li>Checking if <code>decision</code> is within the range in the <code>except</code> statement doesn't work. It's also very unfortunate to duplicate logic, this range check appears again a few lines below.</li>
<li>Checking if a value is in a <code>range(...)</code> is inefficient, because it's a linear search.</li>
<li>The initialization <code>decision = None</code> is unnecessary.</li>
</ul>

<p>A better way to write that menu:</p>

<pre><code>def pick_choice(choices):
    for index, value in enumerate(choices):
        print("{}: {}".format(index + 1, value))

    while True:
        try:
            decision = int(input("ENTER 1-{}: ".format(len(choices))))
            if 1 &lt;= decision &lt;= len(choices):
                return decision

        except ValueError:
            pass

        print("That isn't an option.")
</code></pre>

<h3>Coding style in Python</h3>

<p>Python has a style guide called <a href="http://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">PEP8</a>.
The posted code violates several points in the guide,
I highlight some of them, I suggest to read through the document carefully.</p>

<ul>
<li>Instead of <code>value is False</code>, write <code>not value</code></li>
<li>Instead of <code>num is not 0</code>, write <code>num != 0</code> or <code>num &gt; 0</code> as appropriate</li>
<li>Instead of a <code>while</code> loop with a manual counter, as in <code>i = 0; while i &lt; len(players_normal): ...</code>, it's simpler to use <code>for i in range(len(players_normal)):</code></li>
<li>Instead of embedding a numeric value in a string like <code>doom</code> in this example: <code>"The doom counter sits at " + str(doom) + "..."</code>, it's recommended to use the <code>format</code> function: <code>"The doom counter sits at {} ...".format(doom)</code></li>
<li>When the counter variable in a loop is not used, as in <code>for x in range(0, int(player_count)): ...</code>, the convention is to name the variable <code>_</code></li>
</ul>

<p>Instead of iterating over indexes, it's better to iterate over list elements. For example instead of this:</p>

<blockquote>
<pre><code>i = 0
while i &lt; len(players_normal):
    print_slow(players_normal[i].get_name() + "'s SCORE IS: " + str(players_normal[i].score))
    i += 1
</code></pre>
</blockquote>

<p>This is simpler and better:</p>

<pre><code>for player in players_normal:
    print_slow("{}'s SCORE IS: {}".format(player.name, player.score))
</code></pre>

<h3>Object oriented programming</h3>

<p>In some places the program checks if a player is insane by <code>player in players_insane</code>.
It would be more natural if this state was part of the <code>Player</code> class.
It would be more efficient too,
because <code>players_insane</code> is a list,
and searching in a list is linear.</p>

<p>Also, it's impossible to guess the meaning of this:</p>

<blockquote>
<pre><code>if player.resources[4] == 0:
</code></pre>
</blockquote>

<p>What is resource number 4, and what does it mean when its value is 0?
A good object-oriented program would ideally read like a story, even without comments.</p>

<p>The same goes for this:</p>

<blockquote>
<pre><code>player.add([0, 0, 0, 2, 0, 0, 0])
</code></pre>
</blockquote>

<h3>Use list comprehensions</h3>

<p>This can be written more compactly with a list comprehension:</p>

<blockquote>
<pre><code>players_normal = []
for x in range(0, int(player_count)):
    players_normal.append(Player())
</code></pre>
</blockquote>

<p>Like this:</p>

<pre><code>players_normal = [Player() for _ in range(int(player_count))]
</code></pre>

<h3>Other style issues</h3>

<p>Instead of getters like <code>player.get_name()</code>,
it would be more natural to use <a href="https://docs.python.org/3/library/functions.html#property" rel="nofollow noreferrer">properties</a>.</p>

<hr>

<p>Consider this snippet:</p>

<blockquote>
<pre><code>player_count = "-1"
while player_count.isdigit() is False:
    player_count = input("How many people are playing Lugmere's Loss? ")
    if player_count.isdigit() is False:
        print("Please enter a number greater than 0.")
</code></pre>
</blockquote>

<p>The initialization of <code>player_count</code> is unnecessary, and the duplicated check of <code>player_count.isdigit()</code> can be avoided:</p>

<pre><code>while True:
    player_count = input("How many people are playing Lugmere's Loss? ")
    if not player_count.isdigit():
        print("Please enter a number greater than 0.")
</code></pre>
    </div>