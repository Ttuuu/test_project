<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Default_parameters" rel="nofollow noreferrer">Default Parameters</a></h1>

<p>When can compare the method signatures of the iterative approach and the functional one, we can see, that for the functional one we have to append the <code>0</code> on the first call.</p>

<p>If you want to avoid this - and in this case I think it makes sense - you can add a default parameter into the method signature: <code>const reachLastIndexOf = (arr, start = 0)</code></p>

<h1>Long Condition &amp; <a href="http://learnyouahaskell.com/syntax-in-functions" rel="nofollow noreferrer">Pattern Matching</a></h1>

<p>The condition <code>start === next || next &gt;= arr.length</code> is currently in on if-statement. The <code>||</code>-operator operates short-circuit - that means if the first operation is true, the compiler don't validates the second condition. When we split the disjuncture into to two if-statements, we can keep the same short-circuit behavior and create a more <a href="http://learnyouahaskell.com/syntax-in-functions" rel="nofollow noreferrer">pattern-matching</a> look and feel:</p>

<pre><code>if (start === next) return false 
if (next &gt;= arr.length) return false
</code></pre>

<p>The advantage is that you have a less logical operator. The less code, the fewer errors and at the same time the readability is increased.<br>
Please note that I have meant this more generally for conditions, even if in this context only a Boolean operator is avoided, the code is still more readable in my view than before.</p>

<h1>Readable Method Names</h1>

<p>For this algorithm we need to check if:</p>

<ul>
<li>an index exists (<code>arr[start] === undefined</code>)</li>
<li>an index stays on the same place (<code>start === next</code>)</li>
<li>an index is out of the array bound (<code>next &gt;= arr.length</code>) </li>
<li>an index reached the end (<code>next === arr.length - 1</code>)</li>
</ul>

<p>We all now what these checks are meaning but it would be much better if we wrap these into their own functions</p>

<pre><code>const reachLastIndexOf = (arr, start = 0) =&gt; {
    if (isIndexDefined(arr, start)) return false; 

    const next = start + arr[start];

    if (isStayingInTheSamePosition(start, next)) return false
    if (isOverArrayBound(next, arr)) return false
    if (isReachingTheEnd(next, arr)) return true
    return reachLastIndexOf(arr, next)
}
</code></pre>

<hr>

<p></p><div class="snippet" data-lang="js" data-hide="true" data-console="true" data-babel="true">
<div class="snippet-code snippet-currently-hidden">
<pre class="snippet-code-js lang-js prettyprint-override"><code>const reachLastIndexOf = (arr, start = 0) =&gt; {
  if (isIndexDefined(arr, start)) return false;

  const next = start + arr[start];

  if (isStayingInTheSamePosition(start, next)) return false
  if (isOverArrayBound(next, arr)) return false
  if (isReachingTheEnd(next, arr)) return true
  return reachLastIndexOf(arr, next)
}


const isIndexDefined = (array, index) =&gt; array[index] === undefined
const isStayingInTheSamePosition = (start, next) =&gt; start === next
const isOverArrayBound = (next, array) =&gt; next &gt;= array.length
const isReachingTheEnd = (next, array) =&gt; next === array.length - 1

console.log(reachLastIndexOf([2, 0, 1, 0], 0));</code></pre>
</div>
</div>

    </div>