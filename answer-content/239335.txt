<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Not sure about your full implementation, but from what I see, you could do a fluent API
something like : </p>

<pre><code>public class PhysicsProcess
{
    private readonly float _delta; 
    private readonly Vector2 _velocity;

    public PhysicsProcess(Vector2 velocity)
    {
        _velocity = velocity;
    }

    public PhysicsProcess Run()
    {
        // Run logic which would be saved on the global variable 
        return this;
    }

    public PhysicsProcess Jump() { ... }

    public PhysicsProcess Dash() { ... }

    public PhysicsProcess Friction() { ... }

    public PhysicsProcess Gravity() { ... }

    public void Apply()
    {
        // Your final logic which would take all arguments, and do the process you need.        
    }

}
</code></pre>

<p>then your usage would be something like : </p>

<pre><code>var process = new PhysicsProcess(velocity)
.Run()
.Jump()
.Dash()
.Friction()
.Gravity()
.Apply();
</code></pre>

<p>You can then extend or customize each process as fits your needs. You can also make <code>PhysicsProcess</code> as nested class and call it from a method from the parent class. There are many approaches and customization can be done with fluent APIs, just choose the approach that you see it would be more reasonable to the existing logic (technically, and business-wise).</p>

<p><strong>UPDATE</strong></p>

<p>As I mentioned, fluent API is an easy interface to use and customize. For that, you can also make it an extension like this : </p>

<pre><code>public static class Vector2Extensions
{
    public static PhysicsProcess Apply(this Vector2 velocity)
    {
        return new PhysicsProcess(velocity);
    }
}
</code></pre>

<p>now you can for instance add new method to your fluent API class say <code>Save()</code> for instance, which would return <code>Vector2</code>, then you could do something like this : </p>

<pre><code>moveVelocity.Apply()
    .Run()
    .Jump()
    .Dash()
    .Friction()
    .Gravity()
    .Save();
</code></pre>

<p>When you use this approach, it would make it more maintainable and easy to extend. </p>

<p>I hope this would make it more useful answer.   </p>
    </div>