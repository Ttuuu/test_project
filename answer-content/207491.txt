<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Recursion is usually a poor choice in Python.  Non-tail recursion is usually a poor choice in any language (and this is non-tail because we apply <code>+</code> to the result before returning it).</p>

<p>It's better to use the standard <code>bisect</code> module to find (once) the correct index at which to insert.  This module provides the <code>bisect()</code> function to locate the correct index, and also the <code>insort()</code> function that calls <code>bisect</code> and then inserts, exactly as we want:</p>

<pre><code>insert = bisect.insort
</code></pre>

<p>This will insert in place, rather than creating a new list, so not exactly equivalent to the existing code.</p>

<hr>

<p>As you say <em>"using only simple functions"</em>, let's suppose you can't use the Standard Library (that's a bad assumption in general - Python philosophy is that it "includes batteries" to make your code simpler).  Then we can use a similar method to write our own non-recursive version.</p>

<pre><code>def insert(lst, to_insert):
    """
    parameters : lst: sorted list (smallest to largest)
                 to_insert: value to add
    returns : copy of lst with the to_insert value added in sorted position
    """

    # binary search
    left = 0
    right = len(lst)

    while left != right:
        mid = left + (right-left) // 2
        if lst[mid] == to_insert:
            left = right = mid
        elif lst[mid] &lt; to_insert:
            left = mid + 1
        else:
            right = mid

    # now copy the list, inserting new element
    return lst[:left] + [to_insert] + lst[left:]
</code></pre>

<hr>

<p>Since the question states (without justification) that "recursion is mandatory", I recommend making the search recursive, but performing the insertion just once:</p>

<pre><code>#! untested
def insert(lst, to_insert, left=0, right=None):
    if right is None:
        right = len(lst)

    if left == right:
        return lst[:left] + [to_insert] + lst[left:]

    else:
        mid = left + (right-left) // 2
        if lst[mid] == to_insert:
            left = right = mid
        elif lst[mid] &lt; to_insert:
            left = mid + 1
        else:
            right = mid
        # move left or right, then
        return insert(lst, to_insert, left, right)
</code></pre>

<p>This is now tail-recursive, at least, and only reallocates the list elements once, rather than every level of recursion.</p>
    </div>