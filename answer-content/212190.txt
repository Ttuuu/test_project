<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>mat (const std::initializer_list &amp; ini)</h1>

<p>You forgot to allocate any memory.</p>

<h1>Rule of 0/5</h1>

<p>Your class should follow the rule of 5 which states you should define copy-constructor, copy-assignment operator, move-constructor, move-assignment operator and destructor if you define one of them. You are missing copy-assignment operator, move-constructor, and move-assignment operator. You code cannot be efficiently moved. Implicitly defined copy-assignment operator is incorrect because you are dealing with memory ownership and the default copy-assignment operator can leads to double freeing the memory. </p>

<p>You could also follow the rule of zero and delegate the responsibility of memory management to something like std::unique_ptr.</p>

<p>Since the size of your matrix are template parameters you could just allocate the data as part of your class rather then dynamically allocating the data. </p>

<pre><code>T data[n][m];
</code></pre>

<h1>mat (T * values) : data (values)</h1>

<p>In this constructor you are stealing the ownership of the allocated memory. This is bad style because you could accidentally free the memory from outside of the class or pass the same memory to multiple mat object, each will free the same memory. </p>

<p>You should allocate new memory and copy the values over.</p>

<h1>mat (const mat &amp; mat2)</h1>

<p>Could call fixed version of mat (T * values) instead to reduce code duplication.
Could also be done using <a href="https://en.cppreference.com/w/cpp/algorithm/copy_n" rel="nofollow noreferrer">std::copy_n</a></p>

<h1>~mat ()</h1>

<p>Should be delete[] data; since you are using new[].</p>

<h1>void fill (T val)</h1>

<p>Can be done using <a href="https://en.cppreference.com/w/cpp/algorithm/fill_n" rel="nofollow noreferrer">std::fill_n</a></p>

<h1>Row and column iterator</h1>

<p>You could provide row and column iterators and implement some of your functions using those iterator. That would make your code easier to understand and easier to spot error.</p>

<h1>operator *=, operator * (T val)</h1>

<p>Can be done using <a href="https://en.cppreference.com/w/cpp/algorithm/for_each_n" rel="nofollow noreferrer">std::for_each_n</a></p>

<h1>operator += (const mat &amp; other),  operator -= (const mat &amp; other)</h1>

<p>Can be done using <a href="https://en.cppreference.com/w/cpp/algorithm/transform" rel="nofollow noreferrer">std::transform</a></p>

<h1>operator += (T value)</h1>

<p>You are missing the version that add constant to matrix. Also what about matrix multiplication?</p>

<h1>print()</h1>

<p>Print should take in <a href="https://en.cppreference.com/w/cpp/io/basic_ostream" rel="nofollow noreferrer">std::ostream &amp;</a> that way you can print to files as well as std::cout.</p>
    </div>