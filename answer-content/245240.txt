<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First, I think you've flipped the assigning without noticing that you're assigning <code>null</code> values to the <code>meeting</code> properties (e.g <code>meeting.Id = mvm.Id;</code>) notice that you've already create a new instance of <code>Meeting</code> object, and yet, you replaced the actual values with the new instance values, while you are expected to do the opposite.</p>
<p>So, I assumed you meant to do this <code>mvm.Id = meeting.Id;</code>.</p>
<p>If you need to add the <code>Meeting</code> object to the model based on the <code>Type</code> property. You can do this :</p>
<pre><code>foreach (var meeting in meetingList)
{
    // if this element's Type property is null or empty
    // then skip and go to the next one
    // this condition will be applied on all meeting types 
    if(string.IsNullOrEmpty(meeting.Type)) { continue; }
    
    meetingviewmodel.Add(meeting);  
}
</code></pre>
<p>this will add all meeting objects that have defined Type, this will include System and Config types along with any other defined types.</p>
<p>if you only need to add System and Config types  meetings, and ignore the rest, you can do this :</p>
<pre><code>foreach (var meeting in meetingList)
{
    // if you want to only add System &amp; Config meetings 
    // you can use this condition
    if(!string.IsNullOrEmpty(meeting.Type) &amp;&amp; (meeting.Type == "System" || meeting.Type == "Config"))
    {
        meetingviewmodel.Add(meeting);
    }
}
</code></pre>
<p>or if you into LINQ :</p>
<pre><code>var meetingviewmodel = meetingList
            .Where(x=&gt; !string.IsNullOrEmpty(x.Type) &amp;&amp; (x.Type == "System" || x.Type == "Config"))
            .ToList(); 
</code></pre>
    </div>