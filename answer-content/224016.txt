<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>Can you process code like that in a single glance? That's my really my
  point.</p>
</blockquote>

<p>Yes, and it is in fact a way of expressing code that I miss in other languages, where the equivalent code feels needlessly verbose to me. This is the same for ternary operators when you are accustomized to <code>if</code>-expressions (as opposed to <code>if</code>-statements). And just like ternary operators, you can abuse the feature to produce unreadable code.</p>

<p>The example you give, however, is quite easy to read sequentially:</p>

<ul>
<li><p><code>bst-min</code> is given by an expression that depends on <code>bst</code>.</p></li>
<li><p><code>(and bst ...)</code>:  in case <code>bst</code> is nil, I can stop reading here because I know the result is nil. Like an <em>early return</em>, this remove burden on your brain by first taking care of corner cases. Otherwise, the result is whatever <code>...</code> returns. In <code>...</code> I can keep reading while assuming <code>bst</code> is non-nil. I also know from here that any recursive call may evaluate to <code>nil</code>.</p></li>
<li><p><code>(or (bst-min (node-l bst)) bst)))</code>: I would have added a newline before the second <code>bst</code>, but this is still readable; the min is given by a recursive call with the left node of <code>bst</code>; if however that value is nil, use <code>bst</code> instead.</p></li>
</ul>
    </div>