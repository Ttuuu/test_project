<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Idiomatic changes &amp; small changes:</p>

<ol>
<li>Indent with 4 spaces, not 2.</li>
<li>Variable and function names should be in <code>lower_snake_case</code>.</li>
<li>Unneeded parentheses is unidiomatic.</li>
<li>Use spaces around concatenation, so <code>"+abc</code> becomes <code>" + abc</code>.</li>
<li>Use a <code>if __name__ == '__main__':</code> guard to prevent your code from running when it’s not the initialised file.</li>
<li>Have two spaces around top level function definitions.</li>
<li>“You’re” has an apostrophe in it, but you should be using “your” instead. Because you aren’t a cheapest shipping method.</li>
</ol>

<p>Further changes:</p>

<ol>
<li>Use <code>if</code>, <code>elif</code> and <code>else</code> rather than just <code>if</code>.</li>
<li><p>You can make your code dry by merging <code>ground_cost</code> and <code>drone_cost</code> together.</p></li>
<li><p>You can simplify your code by using <code>sorted</code>.</p>

<p>You sort <code>g</code>, <code>d</code> and <code>p</code>. From this you can then iterate through the list and see how many are the same.</p>

<p>This makes <code>cost_calc</code> contain only three simple <code>if</code> statements.</p>

<p>You would have to add something like a <a href="https://docs.python.org/3/library/enum.html#enum.Enum" rel="nofollow noreferrer"><code>enum.Enum</code></a> to know what type each value is, when sorting.</p></li>
</ol>

<pre><code>import enum


def size_cost(value, sizes):
    for size, cost in sizes[:-1]:
        if value &gt; size:
            return cost
    return sizes[-1][1]


ground_costs = [
    (10, 4.75),
    (6, 4),
    (2, 3),
    (None, 1.5),
]
drone_cost = [
    (10, 14.25),
    (6, 12),
    (2, 9),
    (None, 4.5),
]


class Shipping(enum.Enum):
    GROUND = 'Ground'
    PREMIUM = 'Premium Ground'
    DRONE = 'Drone'


def cost_calc(weight):
    costs = [
        (Shipping.GROUND, size_cost(weight, ground_costs) * weight + 20),
        (Shipping.PREMIUM, 125),
        (Shipping.DRONE, size_cost(weight, drone_cost) * weight)
    ]
    costs.sort(key=lambda i: i[1])
    price = costs[0][1]
    costs = [s for s, p in costs if p == price]
    if len(costs) == 3:
        print("All shipping methods cost $125 according to your items weight")
    elif len(costs) == 2:
        print(
            "Your cheapest shipping method is "
            + costs[0].value
            + " shipping and "
            + costs[1].value
            + " shipping as they both cost $"
            + str(price)
        )
    else:
        print(
            "Your cheapest shipping method is "
            + costs[0].value
            + " shipping costing $"
            + str(price)
        )


if __name__ == '__main__':
    cost_calc(int(input()))
</code></pre>

<p>Output is also what you’d expect:</p>



<pre class="lang-none prettyprint-override"><code>&gt;&gt;&gt; cost_calc(1)
Your cheapest shipping method is Drone shipping costing $4.5
&gt;&gt;&gt; cost_calc(5)
Your cheapest shipping method is Ground shipping costing $35
&gt;&gt;&gt; cost_calc(1000)
Your cheapest shipping method is Premium Ground shipping costing $125
&gt;&gt;&gt; cost_calc(10 / 3)
Your cheapest shipping method is Ground shipping and Drone shipping as they both cost $30.0
&gt;&gt;&gt; cost_calc(105 / 4.75)
Your cheapest shipping method is Ground shipping and Premium Ground shipping as they both cost $125.0
</code></pre>

<p><strong>NOTE</strong>: <a href="https://github.com/Peilonrayz/Stack-Exchange-contributions/tree/master/code-review/223445" rel="nofollow noreferrer">Complete changes</a>.</p>
    </div>