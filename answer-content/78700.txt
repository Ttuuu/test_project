<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Naming</h2>

<p>I realize naming can be hard, but 'Auto-Review' is a name that conflicts a bit with the exiting UserScript on StackExchange called <a href="https://stackapps.com/questions/2116/autoreviewcomments-pro-forma-comments-for-se">AutoReviewComments</a></p>

<h2>Protocols</h2>

<p>There are a number of UserScript conventions you are failing to adhere to.</p>

<p>First up, for Firefox, you need to wrap the header section in to a "preserved" comment block:</p>

<pre><code>/** @preserve
// ==UserScript==
.....
// ==/UserScript==
*/
</code></pre>

<p>The preserve is required to keep the comment block after the javascript is processed. This allows the 'compiled' version to keep the references, and for FireFox to know what it is about still.</p>

<p>Other browsers may not have the same requirements.</p>

<p>Additionally, you need to specify <code>@grant</code> permissions too for GreaseMonkey to be happy. In your case, <code>none</code> is appropriate:</p>

<pre><code>// @grant   none
</code></pre>

<p>Once I made those modifications the userscript loaded up nicely in my FireFox.</p>

<h2>Usability</h2>

<p>There are four user-experience enhancements that I would suggest:</p>

<ol>
<li>NO POPUPS - popups are a horrible distraction</li>
<li>Scroll-to-inserted-content - after inserting the code blocks, scroll to the edit point and make it visible on the screen</li>
<li>Trigger a changed-event on the answer entry box - this will update the 'preview' of the answer. As it is currently, you have to manually change something in the answer box for the preview to update.</li>
<li>You should clear the checkboxes after processing them. Having to un-check each box is a PITA if you need to copy different blocks later.</li>
</ol>

<h2>Review</h2>

<ul>
<li><p>double-array-dereferencing is a micro-optimization that's unnecessary. You have the following code (copied here using your userscript):</p>

<blockquote>
<pre><code>for (i = 0; i &lt; checkboxes.length; i++) {
    if (!$(checkboxes[i]).prop('checked')) {
        continue;
    }

    var checkbox = $(checkboxes[i]);
    var line_data = (checkbox).data('line');
</code></pre>
</blockquote>

<p>That code double-dereferences <code>$(checkboxes[i])</code>. I presume this is because you don't want to carry the overhead of the variable if it is not checked. This is an early-optimization. The code would be simpler as:</p>

<pre><code>for (i = 0; i &lt; checkboxes.length; i++) {
    var checkbox = $(checkboxes[i]);
    if (!checkbox.prop('checked')) {
        continue;
    }

    var line_data = (checkbox).data('line');
</code></pre></li>
<li><p><code>var</code> declarations. JavaScript 'hoists' all variable declarations to the top of the function that contains it. Unlike other languages, JavaScript should not be coded with 'block-local' declarations. It is best practice to move all variable declarations to be the first items in the function. <a href="https://stackoverflow.com/a/1236270/1305253">This Stack Overflow answer</a> does a better job of explaining it than I would.</p></li>
</ul>
    </div>