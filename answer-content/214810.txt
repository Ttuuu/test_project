<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Specifics (Line-by-Line)</h2>
<blockquote>
<pre><code>struct color_RGB
{
    float R;
    float G;
    float B;
    float a;
};
</code></pre>
</blockquote>
<p>Inconsistent capitalization of members: <code>A</code> should be capitalized here, just like <code>R</code>, <code>G</code>, and <code>B</code>.</p>
<p>You also have strange naming conventions. You capitalize namespace and function names, but you lowercase structure names? You use underscores in structure names, but CamelCase in namespace and function names? Maybe you actually have a naming convention that calls for that, but it smells funny to me.</p>
<blockquote>
<pre><code>float Hue2RGB(float m1, float m2, float hue)
</code></pre>
</blockquote>
<ul>
<li>The naming is too cutesy. Don't use "2" to mean "to". Spell it out: <code>HueToRGB</code></li>
<li>What are <code>m1</code> and <code>m2</code>? Use descriptive names for your parameters.</li>
</ul>
<blockquote>
<pre><code>if (hue &lt; 0.0) { hue += 1.0; };
if (hue &gt; 1.0) { hue -= 1.0; };
</code></pre>
</blockquote>
<p>Are you sure that this logic is correct?</p>
<p>Consider instead:</p>
<pre><code>hue = std::clamp(hue, 0.0, 1.0);
</code></pre>
<p>This is not only easier to read and may be faster (depending on your optimizer), but more importantly, seems to be more correct.</p>
<p>You can also replace the implementations of <code>HueClamp</code> and <code>SLClamp</code> with this call to <a href="https://en.cppreference.com/w/cpp/algorithm/clamp" rel="noreferrer"><code>std::clamp</code></a>.</p>
<p>If you're not targeting C++17, then define it yourself in a header and use it. The definition is simple, and the boon to code readability is substantial:</p>
<pre><code>template &lt;class T&gt;
constexpr const T&amp; clamp(const T&amp; value, const T&amp; lowerBound, const T&amp; upperBound)
{
    return std::max(lowerBound, std::min(value, upperBound));
}
</code></pre>
<p>Of course, you don't even <em>use</em> <code>HueClamp</code> and <code>SLClamp</code> in the code, so I'm not sure what they're for. The client of the interface? Don't push those implementation details onto the client. Instead, handle whatever clamping needs to be done internally. The only reason you'd ever want to expose that complexity is if you were worried about the performance cost of possibly clamping a value that is already known to be within the appropriate bounds. You shouldn't worry about this, though. The cost of a simple clamp operation is <em>extremely</em> low, and, on the first attempt, correctness and simplicity matter more than speed.</p>
<blockquote>
<pre><code>else
    return m1;
</code></pre>
</blockquote>
<p>You should use curly braces here to create an explicit scope. You do everywhere else, so you should be consistent. Even if you weren't already doing it everywhere else in your code, I would highly recommend doing it everywhere to avoid introducing bugs during maintenance.</p>
<blockquote>
<pre><code>if (hue * 6.0 &lt; 1.0)
</code></pre>
</blockquote>
<p>(…and other places where the same pattern appears)</p>
<p>I recommend using parentheses to make operator precedence and associativity explicit. The comparison is done <em>after</em> the arithmetic operation here, so write it that way:</p>
<pre><code>if ((hue * 6.0) &lt; 1.0)
</code></pre>
<blockquote>
<pre><code>if (value &lt;= 0.0) { return_value = given_s + 0.1; }
else if (value &gt;= 1.0) { return_value = 1.0; }
</code></pre>
</blockquote>
<p>Line up similar expressions using horizontal whitespace. This not only makes the code look neater, but it helps to catch inadvertent bugs.</p>
<pre><code> if      (value &lt;= 0.0) { return_value = given_s + 0.1; }
 else if (value &gt;= 1.0) { return_value = 1.0;           }
</code></pre>
<p>Same thing here:</p>
<blockquote>
<pre><code>if (max == color.R &amp;&amp; max != color.G) { H += (color.G - color.B) / delta; }
if (max == color.G &amp;&amp; max != color.B) { H += 2 + (color.B - color.R) / delta; }
if (max == color.R &amp;&amp; max != color.R) { H += 4 + (color.R - color.G) / delta; }
</code></pre>
</blockquote>
<p>Line 'em up:</p>
<pre><code>if ((max == color.R) &amp;&amp; (max != color.G)) { H += 0 + (color.G - color.B) / delta; }
if ((max == color.G) &amp;&amp; (max != color.B)) { H += 2 + (color.B - color.R) / delta; }
if ((max == color.R) &amp;&amp; (max != color.R)) { H += 4 + (color.R - color.G) / delta; }
</code></pre>
<p>I even go so far as to add no-ops sometimes to ensure that things line up perfectly. Why? Because now you can see exactly what's happening, and immediately spot the differences between them. If one was <em>incorrectly</em> different, you'd be able to spot that at a glance. It's caught innumerable bugs for me.</p>
<blockquote>
<pre><code>H = H / 6.0;
</code></pre>
</blockquote>
<p>Use compound-assignment operators when possible to simplify expressions and reduce duplication:</p>
<pre><code>H /= 6.0;
</code></pre>
<blockquote>
<pre><code>float SLClamp(float value, float given_s)
{
    float return_value = 0.0;

    if (value &lt;= 0.0) { return_value = given_s + 0.1; }
    else if (value &gt;= 1.0) { return_value = 1.0; }



    return return_value;

}
</code></pre>
</blockquote>
<p>Too much whitespace here: what are all these blank lines for? Tighten this up, and be consistent.</p>
<blockquote>
<pre><code>float min = std::fmin(std::fmin(color.R, color.G), color.B);
float max = std::fmax(std::fmax(color.R, color.G), color.B);
</code></pre>
</blockquote>
<p>Also, this is C++, so don't use the C-style <code>f</code>-prefixed floating-point functions. They are necessary in C because that language doesn't support overloading. C++ does. It also supports templates for automatic type deduction, and so that's how the <code>std::min</code> and <code>std::max</code> functions are implemented. Lose the prefixes; retain the type-safety.</p>
<blockquote>
<pre><code>float H = 0, S = 0, L = ((min + max) / 2.0);
</code></pre>
</blockquote>
<p>Prefer <em>not</em> initializing multiple variables on a single line. Unless you're getting paid a bonus for writing the fewest lines of code, there is never a reason to write the above over:</p>
<pre><code>float H = 0;
float S = 0;
float L = ((min + max) / 2.0);
</code></pre>
<blockquote>
<pre><code>color_HSL HueShift(color_HSL color, float delta)
{
    return { color.H + delta, color.S, color.L };
}
</code></pre>
</blockquote>
<p>You should almost certainly be implementing wrap-around logic here, to make sure that the hue doesn't get out of bounds. If you don't want to wrap around, at least clamp the hue to be within range. Never return an object that represents an invalid value of that type.</p>
<h2>General</h2>
<ul>
<li><p>It looks more like you've translated the code from Lua into C. In C++, you can create <em>objects</em> that represent colors in a particular color space. Those objects can not only hold their own data members, but can also know how to create and convert themselves.</p>
</li>
<li><p>Why are you working with <code>float</code>s here? Single-precision floating-point values are almost never faster than double-precision floating-point values, so there's no advantage in paying the price for their reduced precision. This is especially a concern when you're doing a series of arithmetic manipulations. Prefer to use <code>double</code> by default in C or C++, unless you're targeting a specific embedded microcontroller where you <em>know</em> that single-precision floating-point operations are faster, <em>or</em> you are more concerned about packing values into memory in as efficient a representation as possible (and even in that latter case, do your calculations as <code>double</code>s and only convert to <code>float</code> at the end for the storage representation).</p>
<p>If you really couldn't decide which type to use, you could <code>typedef</code> it, or even template it. (Although the templates would make your code's implementation uglier and more difficult to write. It is probably not useful in this case, because I doubt you'll want to represent color values in a variety of ways.)</p>
</li>
<li><p>Your code completely lacks explanatory comments. Most of it is nicely self-documenting, since you've chosen the symbol names well (except for <code>m1</code> and <code>m2</code>—I still don't know what those refer to). However, the algorithms that actually do the conversion are <em>not</em> self-explanatory, and should have some explanation of <em>why</em> you're doing what you're doing, especially in functions like <code>Hue2RGB</code>.</p>
</li>
</ul>
<h2>Reworked Version</h2>
<pre><code>struct HSLColor
{
   static const double MinH =   0.0;
   static const double MaxH = 360.0;
   
   static const double MinS = 0.0;
   static const double MaxS = 1.0;
   
   static const double MinL = 0.0;
   static const double MaxL = 1.0;
   
   double H;
   double S;
   double L;
   
   HSLColor(double h, double s, double l);
   HSLColor(const HSLColor&amp; hsl) = default;
   HSLColor(const RGBColor&amp; rgb);
   
   void HueShift(double delta);
   void MakeComplementary()
   // ...etc.
};

struct RGBColor
{
   static const double MinR = 0.0;
   static const double MaxR = 1.0;
   
   static const double MinG = 0.0;
   static const double MaxG = 1.0;
   
   static const double MinB = 0.0;
   static const double MaxB = 1.0;
   
   static const double MinA = 0.0;
   static const double MaxA = 1.0;

   double R;
   double G;
   double B;
   double A;
   
   RGBColor(double r, double g, double b, double a = MaxA);
   RGBColor(const RGBColor&amp; rgb) = default;
   RGBColor(const HSLColor&amp; hsl);
};
</code></pre>

<pre><code>/////////////
// HSLColor
/////////////

HSLColor::HSLColor(double h, double s, double l);
   : H(h)    // NOTE: Could also consider clamping and/or
   , S(s)    //        range-checking these values
   , L(l)    //        here in the constructor.
{ }

HSLColor::HSLColor(const RGBColor&amp; rgb)
{
   const auto min   = std::min(std::min(rgb.R, rgb.G), rgb.B);
   const auto max   = std::max(std::max(rgb.R, rgb.G), rgb.B);
   const auto delta = (max - min);
   
   this-&gt;L = ((min + max) / 2.0);
   
   if ((this-&gt;L &gt; 0.0) &amp;&amp; (this-&gt;L &lt; 0.5))
   {
      this-&gt;S = (delta / (min + max));
   }
   else if ((this-&gt;L &gt; 0.5) &amp;&amp; (this-&gt;L &lt; 1.0))
   {
      this-&gt;S = (delta / (2.0 - max - min));
   }
   else
   {
      this-&gt;S = 0.0;
   }
   
   if (delta &gt; 0.0)
   {
      if ((max == rgb.R) &amp;&amp; (max != rgb.G)) { this-&gt;H += (0 + (rgb.G - rgb.B) / delta); }
      if ((max == rgb.G) &amp;&amp; (max != rgb.B)) { this-&gt;H += (2 + (rgb.B - rgb.R) / delta); }
      if ((max == rgb.R) &amp;&amp; (max != rgb.R)) { this-&gt;H += (4 + (rgb.R - rgb.G) / delta); }
      
      this-&gt;H /= 6.0;
      this-&gt;H *= HSLColor::MaxH;
      this-&gt;H = std::clamp(this-&gt;H, HSLColor::MinH, HSLColor::MaxH);
   }
   else
   {
      this-&gt;H = 0.0;
   }
}

void HSLColor::HueShift(double delta)
{
   // TODO: Decide whether this should implement wrap-around semantics for hue,
   //       or whether clamping to be within the allowed range is appropriate.
   this-&gt;H = std::clamp((this-&gt;H + delta), HSLColor::MinH, HSLColor::MaxH);
}

void HSLColor::MakeComplementary()
{
   this-&gt;HueShift(180.0);
}

// ...etc.


/////////////
// RGBColor
/////////////

namespace {

double HueToRGB(double m1, double m2, double hue)
{
   hue = std::clamp(hue, HSLColor::MinH, HSLColor::MaxH);
   if ((hue * 6.0) &lt; 1.0)
   {
      return (m1 + (m2 - m1) * hue * 6.0);
   }
   else if ((hue * 2.0) &lt; 1.0)
   {
      return m2;
   }
   else if ((hue * 3.0) &lt; 2.0)
   {
      return (m1 + (m2 - m1) * ((2.0 / 3.0) - hue) * 6.0);
   }
   else
   {
      return m1;
   }
}

}

RGBColor::RGBColor(double r, double g, double b, double a /* = MaxA */)
   : R(r)     // NOTE: Could also consider clamping and/or
   , G(g)     //        range-checking these values
   , B(b)     //        here in the constructor.
   , A(a)
{ }

RGBColor::RGBColor(const HSLColor&amp; hsl)
{
   const auto hue = (hsl.H / 360.0);
   const auto m2  = (hsl.L &lt;= 0.5) ? (color.L * (color.S + 1.0))
                                   : (color.L + color.S - (color.L * color.S));
   const auto m1  = ((hsl.L * 2.0) - m2);;
   
   this-&gt;R = HueToRGB(m1, m2, hsl.H + (1.0 / 3.0));
   this-&gt;G = HueToRGB(m1, m2, hsl.H);
   this-&gt;B = HueToRGB(m1, m2, hsl.H - (1.0 / 3.0));
   this-&gt;A = 1.0;
}
</code></pre>
<p>I haven't implemented all the mutating member functions here that you have in your code, but I think you can get the idea on how to do that.</p>
<p>If you want to implement <code>ToXxx</code> functions that return a new, mutated object (rather than modifying the current one), you can easily expand this to do so.</p>
<p>You could also add "named constructors" (static <code>FromXxx</code> functions) that allow you to create an object of a particular type. The standard C++ constructors work well for creating an RGBColor by converting an HSLColor, for example, but they don't work as well for creating an HSLColor that is hue-shifted. This is where named constructors are useful.</p>
<p>There are certainly ways of optimizing the performance of this code, as there always is for branchy arithmetic code. But hold off on that until your performance profiler tells you that there is an actual bottleneck. Compilers are surprisingly good at optimizing this stuff nowadays anyway, so unless you have a really advanced understanding of machine-level implementation details, you are unlikely to be able to beat it.</p>
    </div>