<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>If you are willing to use additional packages, then this could be cleanly handled by performing a rolling apply on your vector. For instance, you could compute if the rolling minimum of your vector with window length 6 equals the rolling maximum with the same window length:</p>

<pre><code>library(RcppRoll)
as.numeric(roll_min(mydata$ta, 6) == roll_max(mydata$ta, 6))
# [1] 0 0 0 0 0 1 1 0
</code></pre>

<p>All we need to do is add 0 for the first 5 elements (which have been removed from this calculation), yielding our one-liner:</p>

<pre><code>mydata$qc1 &lt;- c(rep(0, 5), roll_min(mydata$ta, 6) == roll_max(mydata$ta, 6))
mydata
#    ta qc1
# 1   1   0
# 2   1   0
# 3   1   0
# 4   4   0
# 5   5   0
# 6   2   0
# 7   2   0
# 8   2   0
# 9   2   0
# 10  2   0
# 11  2   1
# 12  2   1
# 13 13   0
</code></pre>

<p>You could also wrap this into a function to allow variable window sizes:</p>

<pre><code>window.repeat &lt;- function(vals, window.size) {
  c(rep(0, window.size), roll_min(vals, window.size+1) == roll_max(vals, window.size+1))
}
</code></pre>
    </div>