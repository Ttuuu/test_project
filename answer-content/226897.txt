<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Disclaimer: there will be a lot of links to my own site because I am helping people with PHP for 20+ years and got an obsession with writing articles about most common issues. </p>

<p>I don't know much about restful stuff or whether it does matter, but there are many other areas of improvement. Let's review some of them</p>

<h3>The selectData() function</h3>

<p>First of all, the <code>selectData()</code> function is a wrapper for a SELECT query using <a href="https://phpdelusions.net/pdo/cargo_cult_prepared_statement" rel="noreferrer"><em>cargo cult</em> prepared statements</a> which makes it essentially <strong>insecure</strong>. It's a placeholder that makes your prepared query secure, not just a magical call to prepare().</p>

<p>Another thing is that <a href="https://phpdelusions.net/pdo/common_mistakes#select" rel="noreferrer">gibberish <code>selectData()</code> syntax</a>. Honestly, what are you trying to bargain here for? Spare yourself typing a few SQL keywords, seriously? Making it gibberish out of a precious almost-natural-English sentence, convenient and compatible? 
Look, you are already abusing the <code>$where</code> parameter by weird <code>"1 ORDER BY item_name ASC"</code> statement. Last but not least: such a syntax makes it harder to use prepared statements.<br>
Come on. Let's keep it SQL.</p>

<p>Also, it seems that <code>selectData()</code> connects every time of it's own. Although it is not a problem for a primitive atomic API that always perform just a single SQL query per HTTP request, <em>no API would remain thus</em>. It will grow up to perform many queries per request and having each query to connect of its own will become a problem. Your script should always create just a single connection per single HTTP request and use it for all queries. So create a $conn variable as shown <a href="https://phpdelusions.net/pdo_examples/connect_to_mysql" rel="noreferrer">here</a> and then use it for all database interactions in your code. </p>

<p>Also, I suppose that <code>selectData()</code> always returns a simple 2-dimensional list, which severely cripples the <a href="https://phpdelusions.net/pdo#fetchcolumn" rel="noreferrer">PDO's great ability to return the requested data in many different formats</a>. So, instead make this function to return a PDO statement from which you'll be able to get the resulting data. So it will work as a sort of that "obj" thingy, but in a much more versatile way. </p>

<p>Given all the above, create a <a href="https://phpdelusions.net/pdo/pdo_wrapper#function" rel="noreferrer">PDO helper function</a> like this: </p>

<pre><code>function pdo($pdo, $sql, $args = NULL)
{
    if (!$args)
    {
         return $pdo-&gt;query($sql);
    }
    $stmt = $pdo-&gt;prepare($sql);
    $stmt-&gt;execute($args);
    return $stmt;
}
</code></pre>

<p>So it keeps the SQL syntax intact yet makes all your queries <em>safe</em> and result sets versatile. </p>

<p>Let's rewrite some your functions to this new format</p>

<pre><code>function getShoppingList($conn){
    $sql = "SELECT id, item_name as name, in_use_quantity as 'in_use',
               spare_quantity as spare, target_quantity as target, 
               CEILING(target_quantity - in_use_quantity - spare_quantity) as buy, 
               updated 
            FROM items 
            WHERE target_quantity - in_use_quantity - spare_quantity &gt; 0
            ORDER BY item_name ASC";
    return pdo($conn, $sql)-&gt;fetchAll();
}

function getSingleItem($conn, $id) {
    $sql = "SELECT id, item_name as name, in_use_quantity as 'in_use', 
              spare_quantity as spare, target_quantity as target,
              FORMAT(CEILING(target_quantity - in_use_quantity - spare_quantity),2)
              as buy, updated 
           FROM items
           WHERE id = ?";
    return pdo($conn, $sql, $id)-&gt;fetch();
}

function insertItem($conn, $itemName, $inUseQuantity=0, $spareQuantity=0, $targetQuantity=0){
    $sql = "INSERT INTO `items` 
            (`id`, `item_name`, `in_use_quantity`, `spare_quantity`, `target_quantity`, `updated`) 
            VALUES (NULL, ?,?,?,?, CURRENT_TIMESTAMP())";
    pdo($conn, $sql, [$itemName, $inUseQuantity, $spareQuantity, $targetQuantity]);
    return  $conn-&gt;lastInsertId();
}
</code></pre>

<p>a couple notes:</p>

<ul>
<li><code>getSingleItem()</code> returns a <em>single item</em>, not a multidimensional array</li>
<li>although you can designate the row format as a parameter in <code>fetch()</code> or <code>fetchAll()</code>, it would be most convenient to set up the default fetch mode in the beginning. So you would only define it explicitly in case you will need some different format. Therefore n need for that ever-present "obj" parameter.</li>
<li>notice the brand new <code>insertItem()</code>. Neat, eh?</li>
<li>all your queries are <strong>secure</strong> now</li>
</ul>

<p>Now you can rewrite all other functions to this format. </p>

<h3>The router part</h3>

<p>There are some repetitions in the router part that could be optimized</p>

<pre><code>switch ($_GET['action']) {
     case "getShoppingList":
        $response = getShoppingList();
        break;

    case "getSingleItem":
        $response = getSingleItem($_GET['id']);
        break;

    case "getAllItems":
        $response = getAllItems();
        break;

    case "insert":
        if (!isset($_GET['in_use'])) {
            $response = insertItem($_GET['itemName']);
        } elseif (isset($_GET['spare'], $_GET['target'])) {
            $response = insertItem(
                $_GET['itemName'], $_GET['in_use'], $_GET['spare'], $_GET['target']
            );
        }

    case "update":
        if (isset($_GET['field'])) {
            $response = updateSingleItemField($_GET['id'], $_GET['field'], $_GET['value']));
        } else {
            $response = updateItem(
                $_GET['id'], $_GET['in_use'], $_GET['spare'], $_GET['target']
            );
        }

    case "delete":
        $response = deleteItem($_GET['id']);

}
echo json_encode($response);
</code></pre>

<h3>The code formatting</h3>

<p>In your question, one has to scroll A LOT to read the code. And in my answer you have all the code visible. Please do not torture yourself or anyone else by making that awhul horizontal scrollbar. </p>
    </div>