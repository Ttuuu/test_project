<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I would separate out the Reading of lines from a file to it's own method.  A nice way to report back progress is the <a href="https://docs.microsoft.com/en-us/dotnet/api/system.iprogress-1?view=netframework-4.8" rel="nofollow noreferrer">IProgress</a> interface.  That way we can just calculate the progress and report it back.  You can make this more complex than just the percentage but I just passed back the percentage. if you want line count you can do the code for that.  But just beware reporting back to the dispatcher can eat up time.  It's why I only push back when the percentage changed.  Also stream are going to be buffered so the percentage will be a tad off but with large files it's close enough from my experience. </p>

<p>I personally like the extra brackets on using statements but I also always put brackets on single line if.  That to me is a personal preference and you should base it on your coding guidelines.  </p>

<p>This method is similar to <a href="https://docs.microsoft.com/en-us/dotnet/api/system.io.file.readlines?view=netframework-4.8" rel="nofollow noreferrer">File.ReadLines</a> but since we needed Progress I created this method.</p>

<pre><code>private static IEnumerable&lt;string&gt; FileReadLines(string file, IProgress&lt;int&gt; progress)
{
    var fileSize = new FileInfo(file).Length;
    using (var fileStream = File.OpenRead(file))
    {
        using (var reader = new StreamReader(fileStream))
        {
            Int? previousProgress = null;
            while (!reader.EndOfStream)
            {
                var line = reader.ReadLine();
                if (line != null)
                {
                    if (progress != null)
                    {
                        var percentDone = (int)Math.Round((reader.BaseStream.Position * 100d) / fileSize, 0);
                        if (previousProgress != percentDone)
                        {
                            progress.Report(percentDone);
                            previousProgress = percentDone;
                        }
                    }
                    yield return line;
                }
            }
        }
    }
}
</code></pre>

<p>Now I moved the array of top level domains into a static field and change it to a hashset.  Plus I calculated the depth of domains.</p>

<pre><code>private static readonly HashSet&lt;string&gt; _topLevelDomains = new HashSet&lt;string&gt;(new[] {
        ".travelersinsurance", ".accountants", "...."}); // did not include them all here to save ones and zeros
private static int _maxDomainLevel = _topLevelDomains.Max(d =&gt; d.Count(x =&gt; x == SplitChar));
private const char SplitChar = '.';
</code></pre>

<p>Now I created a method to take a line from the file and return back keyvaluepairs based on the potential matches in the top level domain hashset. </p>

<pre><code>private static IEnumerable&lt;KeyValuePair&lt;string, string&gt;&gt; GetDomains(string domain)
{
    var domainParts = domain.Split(SplitChar);
    int start;
    if (domainParts.Length &lt;= _maxDomainLevel)
    {
        start = 1;
    }
    else
    {
        // only need to match on part of the string since we can eliminate any that have more parts than in the top level domain
        start = domainParts.Length - _maxDomainLevel;
    }
    for (var i = start; i &lt; domainParts.Length; i++)
    {
        var range =  domainParts.Length - i;
        // build up the domain from the subparts
        var key = SplitChar + string.Join(SplitChar, Enumerable.Range(i, range)
            .Select(x =&gt; domainParts[x]));
        var value = domainParts[i - 1] + key;
        yield return new KeyValuePair&lt;string, string&gt;(key, value);
    }
}
</code></pre>

<p>Now that we have all the pieces we can write some PLINQ code to process it all in parallel </p>

<pre><code>public static void ParseFile(string inputfile, string outputFile, IProgress&lt;int&gt; progress)
{
    var domains = FileReadLines(inputfile, progress)
        .AsParallel()
        .Where(x =&gt; x.Contains('.'))
        .Select(x =&gt; GetDomains(x).FirstOrDefault(kv =&gt; _topLevelDomains.Contains(kv.Key)))
        .Select(kv =&gt; kv.Value)          
        .Where(x =&gt; x != null)
        .Distinct();
    File.AppendAllLines(outputFile, domains);
}
</code></pre>

<p>Now you can call it like so.  My example I was putting progress to console but you would also push it to the dispatcher.  </p>

<pre><code>ParseFile(@"c:\temp\source.txt", @"c:\temp\output.txt", new Progress&lt;int&gt;(l =&gt; Console.WriteLine(l)));
</code></pre>

<p>I, obviously, don't have a 60Gig file but I believe with using PLINQ and changing the top level domains to be a hash set will be quicker.   If you want total control then I would use a producer/consumer like the TPL DataFlow but I think it's over kill for this. </p>
    </div>