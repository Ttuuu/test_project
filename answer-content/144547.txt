<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><p>Initialing an attribute empty and then mutating it in a function is hard to understand.
Instead make the functions create the object, and then assign it to the attribute.</p></li>
<li><p>Your comments <code># {{{</code> are abnormal, but are A-OK.
But I'd reduce the amount of lines between them and other code.
So they 'hug' the functions.</p></li>
<li><p><code>map</code> is disliked by many.
So try to use comprehensions instead.<br>
Also your usage of it in the <code>__init__</code> is <em>bad</em>.
You don't use <code>map</code> for side effects, you use it to change the data.
<code>a = map(lambda x: 2*x, range(10))</code> is OK, but what you're doing is not.
Instead use a for loop.</p></li>
<li><p>Some of your variables are unreasonably long.
If you make a dict of parents, then you can just call it parents.
Rather than <code>_tree_space_parents</code>.
This makes code easier to read too:</p>

<pre><code>self._parents[node] = self.get_parents(node, self._node_pool)
</code></pre></li>
<li><p>You go on new lines inconsistently.
Look at <code>get_children_to_visit</code> and you'll see the <code>nodes</code>' list comprehension doesn't go on a new line after the return data, the first loop, but does in the middle of the second loop.
You also write <code>immediate_children</code> as if it's a comprehension, which is confusing as it's passed a single value.
And <code>children_to_visit.append</code>'s brackets are miss-matched, one finishes after the subtraction, the other on a new line.
Also if you look at <code>explore_deeper</code> comprehension you'll see it's yet another style.</p>

<p>This removes consistency and makes the code <em>significantly</em> harder to read.</p></li>
<li><p>If you can return straight away, do.
reading <code>var = [...]; return var</code> is slower than <code>return [...]</code> and takes up more lines.</p></li>
<li><p><code>get_all_roots</code> should utilize <code>filter</code> not <code>map</code> if you were to pick one of the two.
Instead you can just make it a list comprehension which is readable whichever you pick.</p></li>
<li><p>You can iterate through sets, and so there is no need to change one to a list in <code>get_children_to_visit</code>.
And you definitely don't need to pop from the new list.</p></li>
<li><p>You can merge <code>branch_off</code> and <code>explore_deeper</code> to keep the changes to <code>depths</code> in the same function.</p>

<p>You can then go onto change what was <code>branch_off</code> to a single comprehension that's added to <code>depths</code>.
After this you can loop through the lengeth <code>len(branches)</code> and add one to them.
This can make the code easier to understand then using <code>izip</code>.</p></li>
<li><p>You should change <code>embark</code> to contain the for loop, and to create and return <code>depths</code>.
This keeps the logic in one function and makes it more readable.
Rather than having to jump between <code>__init__</code> and <code>embark</code>.</p></li>
<li><p>You can change <code>enumerate_lucky_triples</code> to use a comprehension, rather than a for.
This can be done by passing the comprehension to <code>sum</code>.
After that you can make the other part of the function a comprehension too.
It's easier to filter all the single occurrences if you pass <code>list_of_random_int</code>
to <code>Counter</code> as then you can just add <code>if amount &gt; 1:</code>.
You can also change the two ifs to a single comparison.
This is as if <code>amount</code>, <code>multiples[multiple]</code>, is 2 you add 0, otherwise 1.
This is equivalent to <code>amount != 2</code>.
And so you can merge this all into a single comprehension.
So you're left with two comprehensions passed to <code>sum</code>s.</p></li>
<li><p>Using the above you can remove <em>all bar one</em> class attributes.
This keeps privates, actually private.
And leaves only <code>lucky_triple_count</code>, which is the classes 'return'.</p>

<p>I'd later go on to change the class to only be private functions, as there is now no longer as much of a need on the class.</p></li>
</ul>

<p>Using the above you can change your code to be <em>much more readable</em>.
I'd always aim for readability before performance, and normally over it too.
And so you can achieve:</p>

<pre><code>from collections import Counter

class _LuckyTriples(object):
    def __init__(self, list_of_random_int):
        node_pool = set(list_of_random_int)
        parents, children = self.build_relationships(node_pool)
        roots = self.build_roots(node_pool, parents)
        depths = self.build_depths(roots, children)
        self.lucky_triple_count = self.count_lucky_triples(list_of_random_int, depths,
                                                           parents, children)

    def build_relationships(self, node_pool):
        parents, children = {}, {}
        for node in node_pool:
            parents[node] = [
                parent
                for parent in node_pool
                if parent &lt; node and node % parent == 0
            ]
            children[node] = [
                child
                for child in node_pool
                if child &gt; node and child % node == 0
            ]
        return parents, children

    def build_roots(self, node_pool, parents):
        return [
            node
            for node in node_pool
            if not parents[node]
        ]

    def get_children_to_visit(self, nodes, depths, children_):
        nodes = [
            subbranch
            for branches in nodes
            for subbranch in branches
        ]
        children = []
        for node in nodes:
            immediate_children = set(children_.get(node))
            descendants = set()
            for node in immediate_children:
                descendants.update(children_.get(node))
            children.append(list(immediate_children - descendants))

        depths += [depths[0] for subbranch in children for _ in range(len(subbranch) - 1)]
        for i in range(sum(len(child) for child in children)):
            depths[i] += 1
        return children, depths

    def build_depths(self, roots, children_):
        depths_ = []
        for root in roots:
            children, depths = [[root]], [1]
            while any(children):
                children, depths = self.get_children_to_visit(children, depths, children_)
            depths_.extend(depths)
        return depths_

    def count_lucky_triples(self, numbers, depths, parents_, children_):
        lucky_triple_count = sum(sum(range(1, depth - 1)) for depth in depths)
        lucky_triple_count += sum(
            len(parents_[multiple]) + len(children_[multiple]) + (amount != 2)
            for multiple, amount in Counter(numbers).items()
            if amount &gt; 1
        )
        return lucky_triple_count


def lucky_triples(l):
    return _LuckyTriples(l).lucky_triple_count
</code></pre>
    </div>