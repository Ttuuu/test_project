<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The Python program looks fairly good. I wouldn't call it bloated, but there are a few structural problems related to the <code>Arduino</code> class. They boil down to:</p>

<ul>
<li>Interpreting the data received from the Arduino is done in the <code>Arduino</code> class, which will make it harder to reuse the code it the future, and makes the code harder to quickly read and understand.</li>
<li>The helper functions <code>_has_digits</code> and <code>_check_for_overflowed_digits</code> are only really useful in the <code>Arduino</code> class, so they should be static methods of the class.</li>
<li>In the program's current state, there is little reason for the <code>Arduino</code> class to exist. Instead, a single function would work just as well.</li>
</ul>

<h2>Interpreting the received data separately from reading it</h2>

<p>In any program, you want each piece of code separated so that each piece only deals with the particular problem it is trying to solve. This helps to make it easier to reason about what a program is doing, as well as improve the ability for code to be reused in the future.</p>

<p>When looking at this program, the <code>start_control</code> is in violation of this idea. The method is performing two distinct actions:</p>

<ul>
<li>Reading data from the serial port until a complete chunk of data is received.</li>
<li>Interpreting the data received from the first action.</li>
</ul>

<p>Having these two tasks defined in the same function causes some problems. The first is that in order to figure out how the data is interpreted, you must also understand how the data is extracted from the serial port. In this program, you need to interpret the different branches of the if/else structure to figure out which path is executed when a complete chunk of data is available. The second problem is that it ties the function to exactly one way of interpreting the data, which is impossible to change without also changing the <code>start_control</code> function. In addition, it is impossible to reuse the code extracting data from the serial port without some nasty copy and pasting.</p>

<p>To fix this, place your interpreting code in a function:</p>

<pre><code>def interpret_data(data):
   state_vector = _compute_state_vector(data)
   control_input = compute_input(state_vector)
   print(control_input)
</code></pre>

<p>and pass the function as a parameter to the <code>Arduino</code> class:</p>

<pre><code>class Arduino():
    def __init__(self, action, port, baud_rate, timeout):
        self.interpret_func = action
        self.serial = serial.Serial(port, baud_rate, timeout = timeout)

    def start_control(self):

        last_line_recieved = ""

        try:
            while True:
                serial_bytes = self.serial.readline()
                decoded_line = str(serial_bytes.decode('utf8'))

                # Read from serial until we capture the whole line of data
                if (len(serial_bytes) != 0) and (b'\n' in serial_bytes):

                    # Sometimes digits overflow from one line onto the next
                    overflowed_digits = _check_for_overflowed_digits(decoded_line)
                    if overflowed_digits is not None:
                        last_line_recieved += overflowed_digits

                    # Use the data interpret function given in the constructor:
                    self.interpret_func(data)

                    # Reset the variable
                    last_line_recieved = ""

                elif len(serial_bytes) != 0:
                    last_line_recieved += decoded_line

                else:
                    pass

        except KeyboardInterrupt:
            print("You have quit reading from the serial port.")
            pass

if __name__ == "__main__":
    arduino = Arduino(interpret_data,
                      "/dev/cu.usbmodem14101", baud_rate = 9400, timeout = 0)
    arduino.start_control()
</code></pre>

<h2>Use static methods</h2>

<p>This one is fairly self-explanatory. Since <code>_has_digits</code> and <code>_check_for_overflowed_digits</code> are only used in the <code>Arduino</code> class, and do not modify the any of the <code>Arduino</code> class's variables, they should be static methods of the class:</p>

<pre><code>class Arduino():
    @staticmethod
    def _has_digits(string):
        # implementation here
    @staticmethod
    def _check_for_overflowed_digits(string):
        # implementiation here

    # rest of Arduino class
</code></pre>

<p>Of course, you will need to prepend <code>self</code> in front of these methods when you call them.</p>

<h2>Consider removing the <code>Arduino</code> class</h2>

<p>This is more of a stylistic choice than anything else, but it in the way it is currently being used, the <code>Arduino</code> class doesn't provide any more utility than just having the function</p>

<pre><code>def read_from_serial(action, port, baud_rate, timeout)
</code></pre>

<p>. Objects and classes are used to preserve data across function calls. Right now, the object is created, used once, and then never touched again. The data reuse properties that using an class provides is unused, making the <code>Arduino</code> class somewhat unneeded. If you were to connect to the same port multiple times after disconnecting from it, it may make sense to use an object to hold the data.</p>

<h1>Other Observations</h1>

<ul>
<li>The serial port needs to be closed when you are done using <code>serial.close()</code>. In your case, it would probably go in the <code>except KeyboardInterrupt:</code> clause in the program.</li>
<li><code>start_control</code> isn't a great name for the function. Consider using <code>run_read_loop</code> or something similar.</li>
</ul>
    </div>