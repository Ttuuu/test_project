<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Naming things</h1>

<p>Try to give proper names to things, such that they follow the usual conventions, are concise, unambiguous and to the point. There are a few things I would change:</p>

<ul>
<li>Rename <code>cards</code> to <code>deck</code>, to signify that it isn't just a random bunch of cards, but the actual deck you are drawing from.</li>
<li>The function <code>hand()</code> is quite misnamed, it's not about managing just one hand of cards, but rather it implements the whole game. So perhaps <code>play_blackjack()</code> would be better?</li>
<li>The function <code>convert()</code> has a very generic name, that doesn't tell anything about what it is converting from or to. It would be better named <code>convert_card_to_value()</code>.</li>
</ul>

<p>In general, variables describe things, so their names should usually be a noun, whereas functions describe actions, so they should be verbs.</p>

<h1>Try to reorganize the code into classes</h1>

<p>Classes make it easier to organize your code. I can think of at least three classes that you should make: <code>Card</code>, <code>Deck</code> and <code>Hand</code>.</p>

<p>A <code>Card</code> is quite simple, it just is the color and number of the card, and has a member function to convert it to a value.</p>

<p>A <code>Deck</code> is a collection of cards, with member functions like <code>shuffle()</code>, <code>draw()</code> and so on.</p>

<p>A <code>Hand</code> is also a collection of cards, but has member functions <code>add()</code> and <code>get_value()</code>. The latter is important: you can't just add values of cards together to get the total value of a hand. Think about drawing an ace, 9, king in that order. Your current code converts card values the moment they are drawn, and only checks aces against the total so far. So your method would count this as 11 + 9 + 10 = 30, whereas the correct value is 1 + 9 + 10 = 20.</p>

<h1>Avoid infinite recursion</h1>

<p>Your code recursively calls itself indefinitely. While this might seem harmless at first, the problem is that you are using more and more stack space, until after enough games played you get a stack overflow. The proper way to deal with this is to structure some parts of your code as loops. For example, you want to have a function to play one game of blackjack, and that function should be called in a loop like so:</p>

<pre><code>def another_game():
     while True:
          answer = input('Would you like to play again?').lower()
          if answer == 'yes':
              return True
          elif answer == 'no':
              return False
          else
              print('Please enter yes or no.')

...

print('Hello!')

while True:
    play_game();
    if not another_game():
        break

print('Goodbye!')
<span class="math-container">```</span>
</code></pre>
    </div>