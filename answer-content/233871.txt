<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>1) The variable "scanner" is not used.</p>

<pre class="lang-java prettyprint-override"><code>Scanner scanner = new Scanner(System.in)
</code></pre>

<p>2) Instead of building a string in a loop (padding), I suggest that you use a <code>java.lang.StringBuilder</code></p>

<pre class="lang-java prettyprint-override"><code>        StringBuilder stringBuilder = new StringBuilder(scanner2.nextLine());

        /*In case the text has less than 36 characters,
        the String gets filled up with "x"*/
        while (stringBuilder.length() &lt; 36) {
            stringBuilder.append('x');
        }
</code></pre>

<p>3) Instead of concatening a string in the <code>java.io.PrintStream#println(java.lang.String)</code>, you can use <code>java.io.PrintStream#printf(java.lang.String, java.lang.Object...)</code> Instead.</p>

<pre class="lang-java prettyprint-override"><code>        //[...]
        //Case that text is too long
        if (textLength != 36) {
            text = substring(text, 0, 36);
            System.out.printf("Text too long. The following part of the text will be encrypted: %s\n", text);
        }
        //[...]
</code></pre>

<p>4) In the rotate method, you can directly return the array.</p>

<pre class="lang-java prettyprint-override"><code>    //This method rotates the "grille" clockwise 45 degrees
    public static int[][] rotate(int[][] a1) {

        return new int[][] {
                { a1[5][0], a1[4][0], a1[3][0], a1[2][0], a1[1][0], a1[0][0] }, { a1[5][1], a1[4][1], a1[3][1], a1[2][1], a1[1][1], a1[0][1] },
                { a1[5][2], a1[4][2], a1[3][2], a1[2][2], a1[1][2], a1[0][2] }, { a1[5][3], a1[4][3], a1[3][3], a1[2][3], a1[1][3], a1[0][3] },
                { a1[5][4], a1[4][4], a1[3][4], a1[2][4], a1[1][4], a1[0][4] }, { a1[5][5], a1[4][5], a1[3][5], a1[2][5], a1[1][5], a1[0][5] } };
    }

</code></pre>

<p>5) In the <code>creategrille</code> method, i suggest that you create a method to generate the expression <code>(int) ((Math.random()) * 4 + 1)</code></p>

<pre class="lang-java prettyprint-override"><code>
    //This method creates a random grille
    public static int[][] creategrille() {
    //[...]
        int[][] a2 = {
                { generateRandomTimeFourPlusOne(), generateRandomTimeFourPlusOne(), generateRandomTimeFourPlusOne() },
                { generateRandomTimeFourPlusOne(), generateRandomTimeFourPlusOne(), generateRandomTimeFourPlusOne() },
                { generateRandomTimeFourPlusOne(), generateRandomTimeFourPlusOne(), generateRandomTimeFourPlusOne() } };

    //[...]
    }

    //[...]
    private static int generateRandomTimeFourPlusOne() {
        return (int) ((Math.random()) * 4 + 1);
    }
    //[...]
</code></pre>

<p>6) In the <code>substring</code> method, the <code>out</code> variable is useless, return directly an empty String in the first check and use a <code>java.lang.StringBuilder</code> in the loop; to build the result.</p>

<pre class="lang-java prettyprint-override"><code>    public static String substring(String str, int start, int end) {
        if (start &gt; end) {
            return "";
        }

        if (start &lt; 0) {
            start = 0;
        }

        if (end &gt; str.length() - 1) {
            end = str.length();
        }

        StringBuilder out = new StringBuilder();

        while (start &lt; end) {
            out.append(str.charAt(start));
            start = start + 1;

        }

        return out.toString();
    }
</code></pre>

<p>7) In my opinion, you should rename the method <code>substring</code> to <code>safeSubstring</code>.</p>

<h1>Edited code</h1>

<pre class="lang-java prettyprint-override"><code>    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.println("Enter text without spaces:");

        StringBuilder stringBuilder = new StringBuilder(scanner.nextLine());

            /*In case the text has less than 36 characters,
            the String gets filled up with "x"*/
        while (stringBuilder.length() &lt; 36) {
            stringBuilder.append('x');
        }

        String text = stringBuilder.toString();

        //Case that text is too long
        if (text.length() != 36) {
            text = safeSubstring(text, 0, 36);
            System.out.println("Text too long. The following part of the text will be encrypted: " + text);
        }

        char[][] out = encrypt(text);

        for (int line = 0; line &lt; out.length; line++) {

            for (int column = 0; column &lt; out[line].length; column++) {
                System.out.print(out[line][column] + " ");
            }

            System.out.println();
        }

    }

    //This method rotates the "grille" clockwise 45 degrees
    public static int[][] rotate(int[][] a1) {

        return new int[][] {
                { a1[5][0], a1[4][0], a1[3][0], a1[2][0], a1[1][0], a1[0][0] }, { a1[5][1], a1[4][1], a1[3][1], a1[2][1], a1[1][1], a1[0][1] },
                { a1[5][2], a1[4][2], a1[3][2], a1[2][2], a1[1][2], a1[0][2] }, { a1[5][3], a1[4][3], a1[3][3], a1[2][3], a1[1][3], a1[0][3] },
                { a1[5][4], a1[4][4], a1[3][4], a1[2][4], a1[1][4], a1[0][4] }, { a1[5][5], a1[4][5], a1[3][5], a1[2][5], a1[1][5], a1[0][5] } };
    }

    //This method creates a random grille
    public static int[][] creategrille() {

        int[][] a2 = {
                { generateRandomTimeFourPlusOne(), generateRandomTimeFourPlusOne(), generateRandomTimeFourPlusOne() },
                { generateRandomTimeFourPlusOne(), generateRandomTimeFourPlusOne(), generateRandomTimeFourPlusOne() },
                { generateRandomTimeFourPlusOne(), generateRandomTimeFourPlusOne(), generateRandomTimeFourPlusOne() } };

        int[][] a3 = {
                { (a2[2][0]) % 4 + 1, (a2[1][0]) % 4 + 1, (a2[0][0]) % 4 + 1 }, { (a2[2][1]) % 4 + 1, (a2[1][1]) % 4 + 1, (a2[0][1]) % 4 + 1 },
                { (a2[2][2]) % 4 + 1, (a2[1][2]) % 4 + 1, (a2[0][2]) % 4 + 1 } };
        int[][] a4 = {
                { (a3[2][0]) % 4 + 1, (a3[1][0]) % 4 + 1, (a3[0][0]) % 4 + 1 }, { (a3[2][1]) % 4 + 1, (a3[1][1]) % 4 + 1, (a3[0][1]) % 4 + 1 },
                { (a3[2][2]) % 4 + 1, (a3[1][2]) % 4 + 1, (a3[0][2]) % 4 + 1 } };
        int[][] a5 = {
                { (a4[2][0]) % 4 + 1, (a4[1][0]) % 4 + 1, (a4[0][0]) % 4 + 1 }, { (a4[2][1]) % 4 + 1, (a4[1][1]) % 4 + 1, (a4[0][1]) % 4 + 1 },
                { (a4[2][2]) % 4 + 1, (a4[1][2]) % 4 + 1, (a4[0][2]) % 4 + 1 } };
        int[][] a1 = {
                { a2[0][0], a2[0][1], a2[0][2], a3[0][0], a3[0][1], a3[0][2] }, { a2[1][0], a2[1][1], a2[1][2], a3[1][0], a3[1][1], a3[1][2] },
                { a2[2][0], a2[2][1], a2[2][2], a3[2][0], a3[2][1], a3[2][2] }, { a5[0][0], a5[0][1], a5[0][2], a4[0][0], a4[0][1], a4[0][2] },
                { a5[1][0], a5[1][1], a5[1][2], a4[1][0], a4[1][1], a4[1][2] }, { a5[2][0], a5[2][1], a5[2][2], a4[2][0], a4[2][1], a4[2][2] } };

        System.out.println("The grille:");

        for (int line = 0; line &lt; a1.length; line++) {

            for (int column = 0; column &lt; a1[line].length; column++) {
                System.out.print(a1[line][column] + " ");
            }
            System.out.println();
        }

        System.out.println("");
        System.out.println("Program is using '1' as holes in the grille.");
        System.out.println("");

        return a1;
    }

    private static int generateRandomTimeFourPlusOne() {
        return (int) ((Math.random()) * 4 + 1);
    }

    public static char[][] encrypt(String text) {
        int[][] a1 = creategrille();
        /*The text now gets split up to substrings with length 9.
        Then the grille gets filled up with the chars.*/

        String text1 = safeSubstring(text, 0, 9);

        int[] ar = { 0, 9, 18, 27, 36 };
        char[][] out = new char[6][6];

        int i = 0;
        while (i &lt; 4) {
            int a = 0;
            int b = 0;
            int x = 0;

            while (x &lt; text1.length()) {
                if (a1[a][b] == 1) {
                    out[a][b] = text1.charAt(x);
                    x = x + 1;
                    if (b &lt; 5) {
                        b = b + 1;
                    } else if (a &lt; 5) {
                        a = a + 1;
                        b = 0;
                    }
                } else if (b &lt; 5) {
                    b = b + 1;
                } else if (a &lt; 5) {
                    a = a + 1;
                    b = 0;
                }

            }
            i = i + 1;
            int m = ar[i];
            int n = m + 9;
            text1 = safeSubstring(text1, m, n);
            a1 = rotate(a1);

        }

        return out;
    }

    //Method to divide String into smaller substrings.
    public static String safeSubstring(String str, int start, int end) {
        if (start &gt; end) {
            return "";
        }

        if (start &lt; 0) {
            start = 0;
        }

        if (end &gt; str.length() - 1) {
            end = str.length();
        }

        StringBuilder out = new StringBuilder();

        while (start &lt; end) {
            out.append(str.charAt(start));
            start = start + 1;

        }

        return out.toString();
    }
</code></pre>
    </div>