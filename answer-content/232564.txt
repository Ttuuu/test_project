<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Handle edge cases</h3>

<p>If the given <code>numbers</code> array is empty then the first loop will do nothing, but</p>

<pre><code>computedNumbers.append(numbers[count - 1] * numbers[0])
</code></pre>

<p>aborts with a runtime exception. The correct result in this case would be to set <code>computedNumbers</code> to an empty array as well.</p>

<h3>Better loops</h3>

<p>This</p>

<pre><code>var i = 0
while i &lt; count - 1 {
    // ...
    i = i + 1
}
</code></pre>

<p>is shorter and better done as</p>

<pre><code>for i in 0 ..&lt; count - 1 {
    // ...
}
</code></pre>

<p>The advantages are</p>

<ul>
<li>The scope of <code>i</code>  is limited to the loop.</li>
<li><code>i</code> is a <em>constant.</em></li>
<li>The range of <code>i</code> is clearly seen right at the start of the loop.</li>
</ul>

<p>In this particular case we iterate of adjacent array elements, which is conveniently by by <code>zip()</code>ping the array with a shifted view of itself:</p>

<pre><code>var computedNumbers = zip(numbers, numbers.dropFirst()).map(*)
computedNumbers.append(numbers[count - 1] * numbers[0])
</code></pre>

<p>If we append the first element to the shifted view then the complete operation reduces to</p>

<pre><code>let computedNumbers = zip(numbers, [numbers.dropFirst(), numbers.prefix(1)].joined()).map(*)
</code></pre>

<p>Note that this handles also the case of an empty array gracefully.</p>

<h3>Use constants if possible</h3>

<p>The <code>numbers</code> array is never mutated, therefore it should be declared as a <em>constant</em> with <code>let</code>:</p>

<pre><code>let numbers = [3, 1, 4, 2]
</code></pre>

<p>Using a constant </p>

<ul>
<li>makes it clear to the reader that this value is never mutated,</li>
<li>helps to avoid unintentional mutation,</li>
<li>possibly allows better compiler optimization.</li>
</ul>

<h3>Make it a function</h3>

<p>If we put the functionality in a separate function then</p>

<ul>
<li>it becomes reusable,</li>
<li>test cases can be added more easily,</li>
<li>we can give it a meaningful name,</li>
<li>we can add documentation.</li>
</ul>

<p>In our case the function would simply be</p>

<pre><code>/// Compute an array where each element in the numbers array is multipled by
/// the next following element. The last element is multiplied by the first element.
/// - Parameter numbers: An array of integers.
func circularAdjacentProducts(of numbers: [Int]) -&gt; [Int] {
    return zip(numbers, [numbers.dropFirst(), numbers.prefix(1)].joined()).map(*)
}
</code></pre>

<p>and would then be used as</p>

<pre><code>let numbers = [3, 1, 4, 2]
let computedNumbers = circularAdjacentProducts(of: numbers)
print(computedNumbers)
</code></pre>

<h3>Make it generic on the element type</h3>

<p>The same operation could be done with an array of floating point values (<code>Float</code> or <code>Double</code>), or with other integer types (e.g. <code>Int16</code>) as long as the multiplication does not overflow. Therefore we can generalize it to array of type <code>[T]</code> where <code>T</code> conforms to a protocol which required a multiplication operation.</p>

<p>A possible choice is the <a href="https://developer.apple.com/documentation/swift/numeric" rel="noreferrer"><code>Numeric</code></a> protocol which is adopted by all floating point and integer types:</p>

<pre><code>func circularAdjacentProducts&lt;T: Numeric&gt;(of numbers: [T]) -&gt; [T] {
    return zip(numbers, [numbers.dropFirst(), numbers.prefix(1)].joined()).map(*)
}
</code></pre>

<p>Example:</p>

<pre><code>let floats = [3.3, 1.1, 4, 2.2]
let computedFloats = circularAdjacentProducts(of: floats)
print(computedFloats) // [3.63, 4.4, 8.8, 7.26]
</code></pre>

<h3>Make it generic on the collection type</h3>

<p>The next possible generalization is to apply this operation not only to arrays, but to arbitrary collections:</p>

<pre><code>extension Collection where Element: Numeric {
    func circularAdjacentProducts() -&gt; [Element] {
        return zip(self, [dropFirst(), prefix(1)].joined()).map(*)
    }
}
</code></pre>

<p>Example with an <code>ArraySlice</code>:</p>

<pre><code>let numbers = Array(1...10).dropFirst(3)
print(numbers) // [4, 5, 6, 7, 8, 9, 10]
let computedFloats = numbers.circularAdjacentProducts()
print(computedFloats) // [20, 30, 42, 56, 72, 90, 40]
</code></pre>
    </div>