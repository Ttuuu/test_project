<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Unfortunately most of my points are about redundancy rather than cool speed tips, but removing clutter generally helps improve speed anyway (not massively, but enough). If you want to skip straight to the 'cool' tip, it's the <em>Finally</em> paragraph(s).</p>

<p><strong>Firstly:</strong> your <code>toRadix</code> function is defined as taking two arguments, <code>N</code> and <code>radix</code>, which I believe is a mistake (I might be wrong, I don't usually use Javascript).</p>

<p><strong>Secondly:</strong> <code>Math.abs</code> and <code>Math.floor</code> appear to be redundant since the index you're passing starts at 0 and adds 1 each time, meaning the value is never negative and always an integer. (That should speed things up and remove some clutter)</p>

<p><strong>Thirdly:</strong> <code>strv</code> appears to just be an alias for charset and as you never appear to modify <code>strv</code> you could just be operating charset directly.</p>

<p><strong>Fourth:</strong> Do what @pimgd said about using do loops rather than while loops. In normal languages it wouldn't make a massive difference, but Javascript is a scripting language without a proper optimiser so it helps to use the proper constructs.</p>

<p><strong>Finally:</strong> This is the potential cool speed up tip. Instead of keep appending to <code>HexN</code> every turn of the loop, save the values you would be appending to an array and then concatenate them at the end. This is better in two ways: it saves memory and it reduces the amount of processing that must be done.</p>

<p>Every time the loop runs the line <code>HexN = strv.charAt(R) + HexN;</code> you are actually creating a new string (the result of the <code>+</code> operation) and destroying an old one (<code>HexN</code>). This is happening many times per second, which means a large amount of string allocation and destruction is taking place. By just adding <code>strv.charAt(R)</code> (or better yet, <code>charset.charAt(R)</code> as mentioned earlier) to an array and then doing the concatenation at the end, you are only doing the string creation and destruction once per call to <code>toRadix</code>. Aside from the obvious not having to do so many memory accesses, certain browsers actually specifically optimise string concatenation as mentioned <a href="https://stackoverflow.com/questions/7299010/why-is-string-concatenation-faster-than-array-join">here</a>.</p>
    </div>