<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Thanks for sharing your code.</p>

<h1>General coding</h1>

<p>You declare member variables of the same type in one line. This is an unusual way to do it. It is certainly not a problem as long as you are the only one working on your code. But when You join a team it is important to negotiate that with the others...</p>

<h1>Naming</h1>

<p>Finding good names is the hardest part in programming. So always take your time to think carefully of your identifier names.</p>

<h3>Naming Conventions</h3>

<p>It looks like you already know the
<a href="http://www.oracle.com/technetwork/java/codeconventions-135099.html" rel="nofollow noreferrer">Java Naming Conventions</a> but you don't strictly follow them. </p>

<ul>
<li><p>Variables should begin with a lowercase letter but you have quite a lot starting with upper case.</p></li>
<li><p>methods should start with a <em>verb</em> that points to what will be done in the method. E.g. your method <code>Board.adjacent(Tile tile)</code> should better be named <code>Board.findAdjacentOf(Tile tile)</code>.</p></li>
<li><p>Variables holding a <code>boolean</code> or methods returning a <code>boolean</code> should start with <em>is</em>, <em>has</em>, <em>can</em> or alike. </p></li>
</ul>

<h1>Functional Programming</h1>

<h3>FP is about immutable, independend data</h3>

<p>Any book about <em>functional programming</em> states that it is all about <em>flow of stateless independend data</em>. The main idea of FP is that you have <em>immutable data</em> having no relationship to each other which you process to create other <em>immutable data</em>. That means in turn that you cannot transcript anything to a <em>functional program</em> that depends on state or where the data have some sort of <em>dependency</em> to each other. </p>

<p>However, one of that books on FP (teaching <em>closure</em>) stated that you create "pearls of FP code* to be integrated in your "ordinary" program.</p>

<p>The problem I have with your code in this respect is that the <code>Tile</code> objects your functional code works on are <em>mutable</em>, that means they have <em>state</em> that changes during the programs runtime. 
E.g. your methods <code>updateValues()</code> and <code>makeTiles()</code> violate the FP principle of working on and with immutable data.
As a rule of thumb: if you cannot replace <code>.forEach()</code> the behavior you want to implement might not be suitable to be solved with a FP approach.</p>

<p>For your program that means that you have parts that <em>look like</em> FP (because you use Java8s "functional API") but they are not.</p>

<h3>be consequent with you coding style.</h3>

<p>On the other hand you have some places in your code where you miss to use a FP approach.
E.g. the <code>adjacent</code> method could be implemented in an FP way like this:</p>

<pre><code> private static final int X = 0,Y = 1; // avoid "magic numbers"
 private static final int[][] neighborOffsets // does not change during program runtime
    = {{-1, 0}, {0, -1}, {-1, -1}, {-1, 1}, {1, -1}, {1, 0}, {0, 1}, {1, 1}}; // show that these are "pairs", not individual independend values

 private boolean isInGrid(int neighborIndex){ // helper method
    return 0&lt;=neighborIndex &amp;&amp; 25&gt; neighborIndex);
 }

 List&lt;Tile&gt; adjacent(Tile tile) {
   return  Straem.of(neighborOffsets)
                 .filter(offset-&gt; isInGrid(tile.getX()+offset[X]) &amp;&amp; isInGrid(tile.getY()+offset[Y]))
                 .map(offset-&gt; tiles[tile.getX()+offset[X]][tile.getY()+offset[Y]])
                 .collect(Collectors.toList());
 }
</code></pre>

<p>The difference to your "flawed" functional approaches in <code>updateValues()</code> and <code>makeTiles()</code> is that here a <em>new collection</em> is created and the state of the existing data is not changed.</p>

<h1>Conclusion</h1>

<p><em>Functional Programming</em> is just another tool in the programmers tool box, but its a very special that is useful only in certain situations. Nails are not useless just because you found a screwdriver next to your hammer...</p>
    </div>