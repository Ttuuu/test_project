<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>My initial issues were: speed &amp; readability and as it turned out, issues with working with <code>__toString</code>.</p>

<p>First, a problem with my initial approach:</p>

<p>If my <code>SomeBaseClass</code> at some point needed to re-write the <code>__toString</code> function it inherited from <code>Identifiable</code>, then the initial functionality of me going through a collection of same <code>SomeBaseClass</code> would fall through, basically it won't be an <code>Identifiable</code> anymore because the functionality was re-written.</p>

<p>What I did, based on @KIKO's suggestion and it yielded me no bugs so far is create an interface that inherits <code>IdentifiableInterface</code>, like such:</p>

<pre><code>/**
 * Interfaces that contains a single method in regards to an object's unique &amp; persistent identity.
 *
 * @internal Mostly used by objects that are inside containers (as such, they're of the same intent, but differ) where comparison between these objects is needed.
 */
interface IdentifiableInterface
{
    /**
     * Retrieves the object's identifier.
     *
     * @internal Do note that this is the object identifier which is meant for identification in the broader scope. You might have a, say, "suggestion identifier" which is specific to the Suggestions Module.
     *
     * @return string
     */
    public function getUniqueObjectIdentifier();
}
</code></pre>

<p>then, in my scoped (sub-module) functionality, I'm working with <code>SuggestionInterface</code> that represents each object that will be in my collection:</p>

<pre><code>use Sprout\SproutIdentity\Interfaces\IdentifiableInterface;

interface SuggestionInterface extends IdentifiableInterface
{
}
</code></pre>

<p>Which basically makes any <code>SuggestionInterface</code> object also implement <code>getUniqueObjectIdentifier</code> and by nature, telling the users that this object and the likes of it are meant to be in a collection and that this state of being a member of a collection is important.</p>

<p>Although I pat myself on the back here, I think it's an elegant way to, through comments and inheritance (with which I kind of agree when it comes to interfaces) you can tell so much about your system.</p>

<p>In the end, here is how I compute a collection of <code>SuggestionInterface</code>s identity from a helper function:</p>

<pre><code>public static function computeArrayIndetity( $array )
{
    $identity = '';

    foreach( $array as $array_item ) {
        $identity .= $array_item-&gt;getUniqueObjectIdentifier();
    }

    return md5( $identity );
}
</code></pre>

<p>The result?</p>

<pre><code>10000 iterations:
new approach - 0.0005820830663045
old approach - 0.0020218133926392

100000 iterations:
new approach - 0.005621083577474 
old approach - 0.019490500291189
</code></pre>

<p>Of course, it's like comparing apples to pears when you see what one does and what the other does, it's like "duh", but I just wanted to showcase how I went from a complicated, slower method that was well intended to a more elegant, simpler and way faster result.</p>

<p>Although the speed is clearly better, the byproduct the new approach creates is non-existent and there will be no bugs due to <code>__toString</code>.</p>

<p>It does require the developer to setup that function and therefore it defeats the purpose of automation but I'll make a helper function that they can use to instantly generate names without having to think about it.</p>
    </div>