<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You might be able to save the overhead of constructing a new generator on each call, with something like:</p>

<pre><code>static std::mt19937 default_generator(std::random_device{}());

static int getInt(int min, int max)
{
    return std::uniform_int_distribution{min, max}(default_generator);
}
</code></pre>

<p>But, given that most uses require several values from a single distribution and there's rarely a need to use more than one generator, is this header really worth its cognitive load?  Each function is a one-liner, and even less if the distribution can be re-used over several calls.</p>

<p>We'd also expect to have versions for longer or unsigned integer types, and for <code>double</code> and other floating-point types.  It probably makes more sense for it to be a template:</p>

<pre><code>#include &lt;random&gt;
#include &lt;type_traits&gt;

template&lt;typename T&gt;
inline T getUniformRandom(T min, T max)
{
    static std::mt19937 default_generator(std::random_device{}());
    if constexpr (std::is_integral_v&lt;T&gt;) {
        return std::uniform_int_distribution{min, max}(default_generator);
    } else if constexpr (std::is_floating_point_v&lt;T&gt;) {
        return std::uniform_real_distribution{min, max}(default_generator);
    }

    static_assert(0, "getUniformRandom requires an arithmetic type");
    return min+max;             // just to eliminate compiler warnings
}
</code></pre>

<p>Alternatively, use <code>std::enable_if</code> instead of <code>if constexpr</code>:</p>

<pre><code>#include &lt;random&gt;
#include &lt;type_traits&gt;

template&lt;typename T&gt;
inline std::enable_if_t&lt;std::is_integral_v&lt;T&gt;, T&gt; getUniformRandom(T min, T max)
{
    static std::mt19937 default_generator(std::random_device{}());
    return std::uniform_int_distribution{min, max}(default_generator);
}

template&lt;typename T&gt;
inline std::enable_if_t&lt;std::is_floating_point_v&lt;T&gt;, T&gt; getUniformRandom(T min, T max)
{
    static std::mt19937 default_generator(std::random_device{}());
    return std::uniform_real_distribution{min, max}(default_generator);
}
</code></pre>
    </div>