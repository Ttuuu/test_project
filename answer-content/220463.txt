<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I would use <em>regular expressions</em> to make a simple calculator that can only perform one binary operation. There is less overhead with <em>tokenizing</em> and <em>casting</em>. If you do decide to keep making calculator more and more complex, I suggest using the <a href="https://stackoverflow.com/questions/2842809/lexers-vs-parsers">lexer-parser</a> approach instead.</p>

<pre><code>using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.Globalization;
using System.Text.RegularExpressions;

public class Program
{
    public static void Main()
    {
        Console.WriteLine("1+4 = " + Evaluate("1+4"));
        Console.WriteLine("1-4 = " + Evaluate("1-4"));
        Console.WriteLine("1*4 = " + Evaluate("1*4"));
        Console.WriteLine("1/4 = " + Evaluate("1/4"));

        Console.ReadKey();
    }

    public static decimal Evaluate(string expression) 
    {
        var tokens = Regex.Match(expression, @"^(?&lt;leftoperand&gt;\d+)(?&lt;operator&gt;[+-/*])(?&lt;rigthoperand&gt;\d+)$");
        var leftoperandToken = tokens.Groups["leftoperand"];
        var operatorToken = tokens.Groups["operator"];
        var rigthoperandToken = tokens.Groups["rigthoperand"];

        if (!leftoperandToken.Success) {
            throw new FormatException("left operand could not be parsed");
        }

        if (!operatorToken.Success) {
            throw new FormatException("operator could not be parsed");
        }

        if (!rigthoperandToken.Success) {
            throw new FormatException("right operand could not be parsed");
        }

        // at this point, the operands can be safe-casted to integers

        var left = int.Parse(leftoperandToken.Value);
        var right = int.Parse(rigthoperandToken.Value);
        var result = 0m;

        switch (operatorToken.Value) {
            case "*":
                result = left * right;
                break;
            case "/":
                result = Convert.ToDecimal(left) / right;
                break;
            case "-":
                result = left - right;
                break;
            case "+":
                result = left + right;
                break;
            default:
                // a little bit forward-compatible
                throw new FormatException(operatorToken.Value + " is an invalid operator");
        }

        return result;
    }
}
</code></pre>
    </div>