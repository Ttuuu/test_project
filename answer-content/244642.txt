<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I've been thinking about this idea of "who owns the interface?" recently; hence my finding this post. I think something that might be missing from the conversation is another diagram from Uncle Bob's Clean Architecture.</p>
<p>You can ignore the details of the particular interfaces and classes in the below image, as nobody is required to design systems exactly the way Uncle Bob says. However, the idea this image conveys adds some detail to the onion diagram provided in the question.</p>
<p><a href="https://i.stack.imgur.com/443j1.jpg" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/443j1.jpg" alt="Clean Architecture diagram showing dependency coupling such that all dependencies cross boundaries in the same direction, ensuring outer-layer components depend on stable inner-layer components"></a></p>
<p>The idea relates to the <a href="https://en.wikipedia.org/wiki/Package_principles" rel="nofollow noreferrer">Packaging Principles</a>.</p>
<p><strong>Regarding the outer layers of the onion:</strong></p>
<ul>
<li>Components become more concrete as you approach the outer layers of the onion diagram.</li>
<li>Concrete packages are unstable and tend to contain mostly concrete components.</li>
<li>Concrete packages depend on stable packages/components.</li>
</ul>
<p><strong>Regarding the inner layers of the onion:</strong></p>
<ul>
<li>Components become more abstract as you approach the inner layers of the onion diagram.</li>
<li>Abstract packages tend to contain mostly abstract components.</li>
<li>Abstract packages depend on their own abstract interfaces (they own).</li>
</ul>
<p>Dependencies tend to point inward toward the stable package/components.</p>
<p>The <em><strong>Views</strong></em> section in this diagram, for example, I think would be similar to the <code>Button</code> example given in the question. The <em><strong>Views</strong></em> package is concrete and has stable dependencies on the <em><strong>Use Case Boundaries</strong></em> abstract components. The <em><strong>Views</strong></em> package itself, being concrete, doesn't need interfaces that it owns in order to abstract away the other layers of the application; otherwise, you would need another concrete adapter layer to call the stable abstractions or you could risk the inner layer of the onion depending on the outer layer.</p>
<p>If a view layer uses a library or framework, then the framework will be mostly abstract and talk to interfaces it owns - it has its own stable abstractions - that the <em>Views</em> layer would import and depend on by calling or implementing its abstract types.</p>
<p>So I think who owns the interface depends on how abstract (stable) or concrete (unstable) a group of interacting components are and who depends on them.</p>
    </div>