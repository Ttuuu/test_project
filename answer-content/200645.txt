<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The #1 improvement you can make for code readability is adding comments. Plain code, even the most expressive plain code, rarely makes any sense on its own. In addition to comments, a use case showing the code in action is <em>very</em> helpful. Tests, too.</p>

<p>As for the code itself:</p>

<pre><code>bool must_be_2x2(std::vector&lt;std::vector&lt;std::string&gt;&gt;&amp; letters)
</code></pre>

<p>Vectors of vectors are rarely a good idea, and never a good idea for matrices. If you want a 2×2 matrix, you have to allocate <em>three</em> vectors: the vector for the matrix itself, then one vector per row. If you fail to properly allocate every row vector, you'll probably end up triggering UB.</p>

<p>Plus, accessing elements is slow. When you want to access an element of a vector of vectors, first the base vector has to be accessed and loaded... then the row vector has to be accessed or loaded. That's twice as many dives into main memory, which is <em>painfully</em> slow. And cache misses are more likely because a vector of vectors takes up more memory.</p>

<p>You can see the headaches yourself right in the code of <code>must_be_2x2()</code>... which, by the way, I think you have messed up the logic. A 2×2 matrix done as a vector of vectors would look like <code>{ { a, b }, { c, d } }</code>. There are at least three ways to have a matrix less than 2×2:</p>

<ol>
<li><code>{ { a, b } }</code>: a 1×2 matrix.</li>
<li><code>{ { a }, { b } }</code>: a 2×1 matrix.</li>
<li><code>{ { a, b }, { c } }</code> or <code>{ { a }, { c, d } }</code>: a ragged row matrix with 2 rows, and one row with 2 elements while the other row has 1 element.</li>
</ol>

<p><code>must_be_2x2()</code> ultimately "correctly" detects all 3 failure conditions (and I put "correctly" in quotes because it <em>doesn't</em> correctly work, but we'll get to that)... but it only seems to do so by a fluke. If I pass in a 1×2 matrix like case 1, this function will <em>not</em> return <code>false</code>... it will throw an exception. That's because you check the size of row 1 and row 2... but you never check that there are actually 2 rows. If there are 0 rows, calling <code>letters.at(0)</code> or <code>letters.at(1)</code> will throw; if there is only 1 row, calling <code>letters.at(1)</code> will throw.</p>

<p>So for the function to work the way I <em>think</em> you want it to work - and I'm only guessing at that because, as mentioned, no comments to explain the intention - you would first need to test <code>letters.size()</code>... and only <em>then</em> check <code>letters.at(0).size()</code> and <code>letters.at(1).size()</code>.</p>

<p>But there are a couple of other bugs in the function.</p>

<p>First, you should take the parameter by <code>const</code> reference, not non-<code>const</code> reference. You're not changing the input.</p>

<p>Second, <code>MIN_SIZE</code> shouldn't be an <code>int</code>. Vector's <code>size()</code> returns the vector's <code>size_type</code>, which will be unsigned, so you will be comparing signed and unsigned types... which is a big no-no.</p>

<p>Third, and most concerning: you are testing the size of each row as <code>letters.at(N).size() &gt; MIN_SIZE</code>. That means that a 2×2 matrix will <em>fail</em>. Because <code>2 &gt; 2</code> is not true. I think you really meant to use <code>&gt;=</code>.</p>

<p>The "fixed" function might look like this:</p>

<pre><code>bool must_be_2x2(std::vector&lt;std::vector&lt;std::string&gt;&gt; const&amp; letters)
{
    constexpr std::vector&lt;std::vector&lt;std::string&gt;&gt;::size_type MIN_SIZE = 2;
    // or for less typing:
    // constexpr decltype(letters.size()) MIN_SIZE = 2;

    if (letters.size() &gt;= MIN_SIZE &amp;&amp; letters.at(0).size() &gt;= MIN_SIZE &amp;&amp; letters.at(1).size() &gt;= MIN_SIZE)
    {
        return true;
    }

    return false;
}
</code></pre>

<p>But as I said, this still smells, because if you are dealing with matrices, vectors of vectors is a terrible structure. It's bloated, it's slow, and it's extra work because you have to maintain that each row is the same size.</p>

<p>When you need a multidimensional matrix in C++, the best solution is almost always to use a flat array or vector, and calculate the offsets yourself. You could wrap it in a class for easier use. To give the basic idea:</p>

<pre><code>template &lt;typename T&gt;
class matrix2d
{
public:
    matrix2d(std::size_t rows, std::size_t cols) :
        _elements(rows * cols),
        _rows{rows},
        _cols{cols}
    {}

    auto element(std::size_t row, std::size_t col) -&gt; T&amp;
    {
        return _elements[_calculate_offset(row, col)];
    }

    auto rows() const noexcept { return _rows; }
    auto cols() const noexcept { return _cols; }

private:
    auto _calculate_offset(std::size_t row, std::size_t col) noexcept
    {
        return (row * _cols) + col;
    }

    std::vector&lt;T&gt; _elements;
    std::size_t _rows;
    std::size_t _cols;
};
</code></pre>

<p>With a matrix class like this (obviously filled out with all the useful methods you'll need), you should see <em>significant</em> performance gains. And your code can be much simpler. The bottom line is: don't use vectors of vectors - they're almost always the wrong choice.</p>

<pre><code>std::string matrix_vector_to_string(std::vector&lt;std::vector&lt;std::string&gt;&gt;&amp; matrix)
</code></pre>

<p>This function "works"... but is <em>highly</em> inefficient.</p>

<p>First, again, you should take the parameter by <code>const</code> reference.</p>

<p>But the real issue is that you are repeatedly concatenating strings. Each time you do this, you could be triggering a new memory allocation, copying the whole string, then a deallocation.</p>

<p>Instead, it might be worthwhile to figure out in advance how much memory in total you're going to need. For that you'll need two loops:</p>

<pre><code>std::string matrix_vector_to_string(std::vector&lt;std::vector&lt;std::string&gt;&gt; const&amp; matrix)
{
    auto size = std::string::size_type{0};
    for (auto&amp;&amp; row : matrix)
        for (auto&amp;&amp; elem : row)
            size += elem.size();

    std::string str;
    str.reserve(size);
    for (auto&amp;&amp; row : matrix)
        for (auto&amp;&amp; elem : row)
            str += elem;

    return str;
}
</code></pre>

<p>On to the next function.</p>

<pre><code>bool alphabet_only(std::vector&lt;std::vector&lt;std::string&gt;&gt;&amp; letters)
</code></pre>

<p>Now, this function - like the previous function - "works", but it is extremely inefficient. First you construct a string of all the strings in the matrix concatenated, and then check that everything in that is a letter. But... why? Why create the concatenated string? Why not just check the letters in the matrix?</p>

<pre><code>bool alphabet_only(std::vector&lt;std::vector&lt;std::string&gt;&gt; const&amp; letters) noexcept
{
    for (auto&amp;&amp; row : letters)
    {
        for (auto&amp;&amp; elem : row)
        {
            for (auto c : elem)
            {
                if (!std::isalpha(static_cast&lt;unsigned char&gt;(c)))
                    return false;
            }
        }
    }

    return true;
}
</code></pre>

<p>On to the next function:</p>

<pre><code>bool equal_length(std::vector&lt;std::vector&lt;std::string&gt;&gt;&amp; letters)
</code></pre>

<p>This function's name isn't exactly clear. What it's doing is verifying that every row of the matrix is the same length. The only reason this is necessary at all is because you're using a vector of vectors.</p>

<pre><code>bool is_vowel(std::string element) noexcept
</code></pre>

<p>This function has a lot of problems.</p>

<p>First of all, the parameter should probably be passed by <code>const</code> reference, not by value.</p>

<p>Second, it can't really be <code>noexcept</code>. Inside the function you construct an array of 5 strings. The string constructors are not <code>noexcept</code>. (One would <em>hope</em> that the string uses the small-string optimization. But one shouldn't rely on it like this.)</p>

<p>Which leads to the question of why you're dealing with strings at all. As far as I can tell, you're dealing with only ASCII characters. You don't need strings for this. This function could take a <code>char</code>, and do the test using a static <code>array&lt;char, 5&gt;</code>. <em>That</em> would be <code>noexcept</code>, and a <em>lot</em> faster.</p>

<pre><code>std::string find_vowel_square(std::vector&lt;std::vector&lt;std::string&gt;&gt;&amp; letters)
</code></pre>

<p>Once again, this "works", but is not particularly efficient. It's a brute force search, which is bad enough, but what's <em>particularly</em> bad is that it's a brute force search over a <em>vector of vector of strings</em>. I don't think you could have chosen a more inefficient data structure if you'd tried.</p>

<p>Changing to a better data structure alone - like a <code>vector&lt;char&gt;</code> (possibly wrapped in a matrix class) instead of <code>vector&lt;vector&lt;string&gt;&gt;</code> - should net you significant benefits. In the worst case scenario, with a large enough data set that it won't all in cache, and a string without SSO, you could be looking at a speed-up of several <em>thousand</em> times.</p>

<p>But changing to a more efficient algorithm would be the biggest gain (especially because doing that would automatically mean changing to a better data structure). You don't need to read the entire matrix in to search for sub-matrices. In fact, you don't really need to store any part of the matrix at all.</p>

<p>All you need to do is create a vector of flags (call it <code>flags</code>) of the size of one matrix row. Then you read the first matrix row, and for each element that is a vowel, set the corresponding flag in the flag vector. Then for each subsequent row <code>i</code>, start by setting another flag (not one in the vector, call it <code>previous_is_vowel_column</code>) to false, then for each character <code>j</code>, if it is a vowel <em>and</em> <code>flag[j]</code> is true <em>and</em> <code>previous_is_vowel_column</code> is true... you're done. The result is <code>to_string(i - 1) + '-' + to_string(j - 1)</code>. Otherwise, you set to <code>previous_is_vowel_column</code> to true if the current character is a vowel and <code>flag[j]</code> is true, and set <code>flag[j]</code> to true if the current character is a vowel, and move on. If you get to the end without a success, then you return the fail message.</p>
    </div>