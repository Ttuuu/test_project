<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Kudos to you! This is a nice little script, easy to read and to understand. However, there is no reason to reach for <code>expr</code>. Most shells (including <code>dash</code> or even <code>busybox sh</code>) can interpret arithmetic expressions on their own:</p>

<pre><code>WARNING=$(($total / 5))
CRITICAL=$(($total / 10))
</code></pre>

<p>Also, in <code>[</code> <code>]</code> expressions, I'd use quotes around variables, to make sure that they don't contain any spaces. In this case, we can be sure that they won't contain some, but it's still good practice to use them:</p>

<pre><code>if [ "$available" -lt "$CRITICAL" ]; then
    ...
elif [ "$available" -lt "$WARNING" ]; then
    ...
fi
</code></pre>

<p>Other than that, I'd write the <code>-u</code> comment as a direct negative instead of a positive:</p>

<pre><code># Don't use `-u critical', as it will keep the notification even after -t ms
# and will cause notifications to queue up.
</code></pre>

<p>This comment still contains the same message: "don't use <code>-u critical</code>", but it's much more direct.</p>

<p>Since no <a href="https://en.wikipedia.org/wiki/Bash_(Unix_shell)#Portability" rel="nofollow noreferrer">bashism are used</a>, we can even change the shebang to <code>#!/bin/sh</code>. By the way, some of those remarks were also found by <a href="https://www.shellcheck.net/" rel="nofollow noreferrer">ShellCheck</a>, but it rightfully marks them as info level only.</p>
    </div>