<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This is probably not a good idea:</p>

<pre><code>Public Shared ReadOnly NonceBitSize As Integer = 128
</code></pre>

<p>as the default nonce for GCM is 12 bytes or 96 bits. A different size nonce requires additional calculations and may not always be supported by API's (although they generally do).</p>

<hr>

<p>The iteration count for key derivation is on the low side, say 40K is more recommended, but the actual value should simply be as high as you can manage within your limitations.</p>

<hr>

<pre><code>If String.IsNullOrEmpty(secretMessage) Then Throw New ArgumentException("Secret Message Required!", "secretMessage")
</code></pre>

<p>Generally we think that empty messages are OK (when it comes to the encryption layer). Now you could not send a message that is only protected for integrity / authenticity. it's good that you test for <code>null</code> of course.</p>

<hr>

<pre><code>Dim payload = New Byte(salt.Length + nonSecretPayload.Length - 1) {}
</code></pre>

<p>After this I would presume that you first copy the <code>salt</code> and then the <code>nonSecretPayload</code>, instead of the other way around. The name <code>payload</code> is confusing, because you would expect this to include the payload that also needs to be encrypted.</p>

<hr>

<pre><code>generator.Init(PbeParametersGenerator.Pkcs5PasswordToBytes(password.ToCharArray()), salt, Iterations)
</code></pre>

<p>the reason why the password is delivered as a character array is that you can zero an array. Commonly password interface elements will also return a char array for the same reason. Converting it from string doesn't make all that much sense - at least not at this level.</p>

<hr>

<p>There is no need to convert back and forth to a <code>KeyParameter</code>. Once you have a <code>KeyParameter</code>, use it, possibly as private method from several public methods.</p>

<hr>

<pre><code> Catch unusedInvalidCipherTextException1 As InvalidCipherTextException
                    Return Nothing
</code></pre>

<p>This is a big no-no. Never return <code>Nothing</code> or similar and sweep the exception under the carpet. If you don't know what to do, then wrap the exception in a more generic exception.</p>

<hr>

<p>During decryption you're passing the length of the <code>nonSecretPayload</code> and you're never returning the data itself. That's a weird decision: you need to do handle the contents of this payload some way or another. It's not clear how you would retrieve or handle it currently.</p>

<hr>

<p>Other protocol related notes:</p>

<ul>
<li>Your scheme doesn't include a version number. You could use one of those to upgrade to a different scheme (or to up the iteration count) later on.</li>
<li>In general, if you derive the wrong key then decryption would fail. As such, there is no pressing need to include the salt in the additional authenticated data. I would not call that <em>wrong</em> though.</li>
<li>Currently you need to know the size of the AAD in advance; you could think of a way to send the AAD length within your protocol.</li>
<li>You could derive both the key and nonce as you're using a random salt anyway. Again, I would not call that wrong in any sense.</li>
</ul>

<hr>

<p>Conclusion: there is nothing particularly wrong if you use this for password based encryption, but there are a lot of small things that can be adjusted, with the version indicator and the nonce size being the main issues. The exception handling is not up to par.</p>

<p>I'd strongly recommend to write a small protocol description, so you can show what you implement without others having to read through your code to find out.</p>
    </div>