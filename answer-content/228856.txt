<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Naming</strong></p>

<p>I have two problems with your naming: </p>

<p>First, you don't use underscores to separate words. Instead of <code>uniquepattern</code>, use <code>unique_pattern</code>. </p>

<p>Second, your names don't actually tell me anything! Functions, particularly non-method functions, should include a verb unless the verb is implicitly <code>get</code> or <code>is</code>. And implicit <code>is</code> needs to be used with some caution.</p>

<p>So rather than <code>unique_pattern</code>, the name should be some phrase reflective of what your function does. Since you mention "scaffold names", perhaps that function should be <code>group_scaffold_names_by_unique_pattern</code>?</p>

<p>Or maybe the unique pattern has another name? Like <code>prefix</code>? (See my question in the comments.) So perhaps it should be <code>group_scaffold_names_by_prefix</code>?</p>

<p>Is that long? Yes. Does it says what happens? Also, yes. Clarity for the win!</p>

<p><strong>Redundancy. Repetition. Duplication. Multiple Copies.</strong></p>

<p>In coding, if you find yourself typing something for the second time, STOP! Whatever this is needs to be stored once and referenced from different places. Write a function. Store text in a variable. Create a class. Do whatever it takes, but DON'T REPEAT YOURSELF. (This is called the "DRY" principle.)</p>

<p>This code is repeated:</p>

<pre><code>    pattern_name = re.search(r"[A-Z]{1}[a-z]{2}", name)
</code></pre>

<p>What does it do? Well, it appears to be used to extract the first matching pattern as the "key" for each name in the list.</p>

<p>So let's write a function for this:</p>

<pre><code>def extract_key(name):
    """ Extract unique pattern from a scaffold name. 
        Apparently, patterns are just the first three characters,
        so don't use regexes, just grab the substring.
    """        
    return name[:3]
</code></pre>

<p><strong>Use the standard library</strong></p>

<p>You have a separate function that pulls out the keys (unique patterns) from the names, and returns a uniquified list of them, which you apparently use only to initialize the keys of a dictionary.</p>

<p>Instead of doing that, just use <a href="https://docs.python.org/3/library/collections.html?highlight=collections%20defaultdict#collections.defaultdict" rel="nofollow noreferrer"><code>collections.defaultdict</code></a> to create a dictionary that starts with empty lists:</p>

<pre><code>import collections

groups = collections.defaultdict(list)
</code></pre>

<p>With that code, you can be sure that <code>groups[key]</code> is a list (unless you explicitly override it with some non-list value). So let's write your function again:</p>

<pre><code>import collections
from typing import Dictionary, Iterable, List

def group_scaffold_names_by_prefix(names: Iterable[str]) -&gt; Dictionary[str, List[str]]:
    """ Given a list of scaffold names, return a dictionary that
        groups them together by their prefix.
    """
    groups = collections.defaultdict(list)

    for name in names:
        groups[extract_key(name)].append(name)

    return groups
</code></pre>
    </div>