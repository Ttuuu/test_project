<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>All in all, it's not a bad implementation at all. The bulk of my comments will focus on idiomatic golang stuff, and some small tweaks you can make to the <code>main</code> function. As I usually do here, I'll go through it line by line</p>

<pre><code>func main() {
    const numPhilos = 5
</code></pre>

<p>OK, so you're starting out defining an untyped constant in your <code>main</code>. That's perfectly valid, and it doesn't make much of a difference, but generally speaking, I'd define my constants outside of functions. This makes it easier to centralise your constants, see what constants are used in the file/package (if you're exporting them), and makes it easier to break up your code into smaller functions further down the line. Moving on:</p>

<pre><code>var forks [numPhilos]chan bool
</code></pre>

<p>OK, so arrays can be used in go, but it's generally recommended you don't. The rule of thumb is: use slices if you can. Next:</p>

<pre><code>for i := 0; i &lt; numPhilos; i++ {
    forks[i] = make(chan bool, 1)
    forks[i] &lt;- true
}
</code></pre>

<p>Again, no real issues here, only, you're assigning a channel to an index in an array, and then writing to it, accessing the array again. I'd use a scoped variable instead. Next:</p>

<pre><code>var wg sync.WaitGroup
for i := 0; i &lt; numPhilos; i++ {
    wg.Add(1)
    go philos(i, forks[(i-1+numPhilos)%numPhilos], forks[(i+numPhilos)%numPhilos], &amp;wg)
}   
wg.Wait()
</code></pre>

<p>Right, short of what I pointed out in the comment about <code>forks[(i+numPhilos)%numPhilos]</code> being the same as <code>forks[i]</code>, this all works, but there's quite a few things we can improve:</p>

<ul>
<li>you're creating a <code>var wg sync.WaitGroup</code>, and passing pointers to it. Good, but why not create a pointer literal. It's safer (less likely to pass by value accidentally), and code is easier to read IMO</li>
<li>You're incrementing <code>i</code>, and accessing <code>forks</code>, knowing full well that the <code>len(forks)</code> won't be exceeded. After all, your loop is the same as the one you used to initialise <code>forks</code>. So why not loop over <code>forks</code> to begin with?</li>
<li><code>wg.Add(1)</code> is incrementing the waitgroup for each routine, but you clearly know beforehand how many routines you're going to spin up. You can add that total number of routines to your waitgroup outside of the loop.</li>
<li>I don't like the names <code>numPhilos</code> and <code>philos</code> for a func.</li>
<li>You're passing the waitgroup as a last argument. It's more common to see <code>context.Context</code> as the first argument, and things like a waitgroup (controlling the runtime and routines) as first arguments, rather than last</li>
</ul>

<p>Last line:</p>

<pre><code>fmt.Println("Everybody finished eating")
</code></pre>

<p>This should not be the end of your program. You should close the channels!</p>

<p>Now, let's put all of this together:</p>

<pre><code>const numPhilos = 5

func main() {
    // create slice, not an array - set capacity to numPhilos
    forks := make([]chan bool, 0, numPhilos)
    for i := 0; i &lt; numPhilos; i++ {
        // create channel in local scope
        ch := make(chan bool, 1)
        ch &lt;- true // write to channel directly
        forks = append(forks, ch) // append to forks slice
    }
    // I prefer literals, because I can create a pointer type directly
    wg := &amp;sync.WaitGroup{}
    // add 1 for each channel in forks
    wg.Add(len(forks))
    for i, ch := range forks {
        // forks[i] is now ch, get the left one using the method you are using already
        go philos(wg, i, forks[(i+numPhilos-1)%numPhilos], ch)
    }
    wg.Wait()
    // close channels
    for _, ch := range forks {
        close(ch)
    }
    // done
    fmt.Println("Everybody finished eating")
}
</code></pre>
    </div>