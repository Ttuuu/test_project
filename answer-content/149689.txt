<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>For this kind of queue I often use something like this</p>
<pre><code>std::mutex mtx;
std::condition_variable cv;

void push(T* elem) {
    if(elem == nullptr) {
        return;
    }
    std::unique_lock&lt;std::mutex&gt; lck(mtx);
    q.push(elem);
    cv.notify_one();
}

T* next() {
    T* elem = nullptr;

    std::unique_lock&lt;std::mutex&gt; lck(mtx);
    cv.wait(lck, !q.empty());

    if(!q.empty()) {
        elem = q.front();
        q.pop();
    }
   
    return elem;
}
</code></pre>
<p>The consumers lock on the empty queue, and when something is pushed one is awakened for each push'ed. That way you don't waste CPU cycles waiting when you don't have anything to process, but there is a certain cost to locking and the task switch.</p>
<p>So measure your performance.</p>
    </div>