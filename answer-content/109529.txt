<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Gareth has a lot of good points, though I disagree about raising an error. <code>str.find</code> doesn't raise an error when it doesn't find the search term, it returns -1. Errors aren't always the best way to signal absence or failure. In your case, returning a boolean is a datatype mismatch. If you're going to return a different type, return <code>None</code>, to indicate no result. Alternatively, return <code>''</code>. Which is a string type, but empty. And of length zero, so when turned to a boolean it would be False anyway. eg. <code>if unique_char("banbanana"):</code> would be evaluated as <code>False</code>.</p>

<p>Also note you don't need to put brackets around the value that you return, <code>return False</code> works fine.</p>

<p>This may be irrelevant for your use case but one problem with this approach is that you're processing the whole string before you start looking for unique characters. Instead, why not check each string as it comes. </p>

<p>So, you'd want a set to store characters found to be duplicates. Then you just want to loop over the string, testing first for previously found duplicates, then checking if the new character is a duplicate. You can save time by ignoring all characters before the current one, as you've already found all of them to have duplicates. So this is how it could look:</p>

<pre><code>def unique_chars(s):
    """Return the first non-repeated character in the string s.

    Returns an empty string if no character is found"""

    dupes = set()
    for i, c in enumerate(s):
        if c in dupes:
            continue
        # Only search the characters ahead of this point
        if c in s[i + 1:]:
            dupes.add(c)
        else:
            return c
    return ''
</code></pre>
    </div>