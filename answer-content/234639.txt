<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I question if a hand <strong>is a</strong> deck of cards. Certain functionality that you have, like shuffling, viewing, and inserting to specific positions, doesn't seem to make much sense in the context of a hand. A hand may be a collections of cards, similar to a deck, but that doesn't mean one is the other.</p>

<p>Also, I don't think having <code>points</code> as an attribute is ideal. That's one thing that can become mismatched later if you refactor. It's a redundant field given a hand of cards can be easily checked when needed for a value. If it was an expensive calculation, then ya, caching the results may make sense. In this case though, I can't see performance being a concern.</p>

<p>I'd probably get rid of the <code>Hand</code> class altogether, and just make it a list of cards:</p>

<pre><code>class Player:
    def __init__(self, name, starting_cash=0):
        self.hand = []  # initialize an empty list
        self.in_game = True
        self.account = starting_cash
        self.victory_state = False
        self.name = name
</code></pre>

<p>Lists already have <code>insert</code> (and <code>append</code>) and <code>clear</code> methods, and can be trivially iterated to do whatever. </p>

<p>I'll admit, I'm biased from writing Clojure. I avoid writing collection-like-wrapper classes unless I found that there's specific, delicate states that I need. Usually, a basic collection like a dictionary or list already does mostly what you want, and wrapping it just complicates otherwise simple, easy to read operations.</p>

<p>To deal with <code>points</code>, I'd probably give the player <code>calculate_points</code> method (or have a standalone function) that calculates points as needed. Again, I don't think there's a ton of gain by caching that, and caching can lead to consistency problems. For example, your <code>clear</code> method doesn't reset <code>points</code>. If the user clears the deck, then tries to use <code>points</code> before calling <code>calculate_points</code>, they'll get an invalid result.</p>

<hr>

<p>I wouldn't have <code>Deck</code> accept a <code>type_of_deck</code> string. That leads to a couple problems:</p>

<ul>
<li><p>If the user typos the string, it will silently fail. </p></li>
<li><p>You'll need to remember to change the string in both the constructor and use-sites if you ever refactor. IDE refactoring won't be able to help you with that.</p></li>
</ul>

<p>Instead, I'd make the <code>__init__</code> just a basic setter, then have a <code>populate</code> method:</p>

<pre><code>class Deck:
    def __init__(self):
        self.cards = []

    def populate(self):
        self.clear()  # To avoid double-populating

        for suit in suits:
            for num in ranks:
                self.cards.append(Card(suit, num))
</code></pre>

<p>Then, the user can call <code>populate</code> instead of passing a string. You could also, either instead of populate, or along with it, have a "pseudo-constructor" class method:</p>

<pre><code>@classmethod
def new_populated(cls):
    new_deck = cls()  # Same as Deck()
    new_deck.populate()

    return new_deck

. . .

playing_deck = Deck.new_populated()  # instead of Deck('full')
</code></pre>

<p>I think it reads much better and will allow for less mistakes.</p>

<hr>

<p><code>insert_card</code> and <code>view_card</code> are more complicated than they need to be. You're having each doing multiple jobs based on a passed string. Trying to anticipate future needs and creating new features ahead of time can be helpful, but also remember: in many cases, <a href="https://en.wikipedia.org/wiki/You_aren%27t_gonna_need_it" rel="nofollow noreferrer">you aren't going to need those features</a>.</p>

<p>Look at your uses of both:</p>

<ul>
<li><p><code>insert_card</code> never uses the second parameter. Can you ever, within the context of a blackjack deck of cards, see ever needing to add a card to multiple positions (or really, would you <em>ever</em> add a card to a blackjack deck after the deck is formed?)</p></li>
<li><p><code>view_card</code> is only used once, and is used to view the "bottom" card of a hand. I think normal indexing of a list would suffice here.</p></li>
</ul>

<p>Unless you can think of a good reason to keep them as is, I'd get rid of <code>view_card</code> and  reduce <code>insert_card</code> down to a minimum simple line of code to do an insert.</p>

<p>Just like before, messing around with strings to dispatch behavior is messy and can lead to errors.</p>

<hr>

<hr>

<p>We're getting ready to do Christmas stuff now, so I need to go.</p>

<p>Good luck and Merry Christmas.</p>
    </div>