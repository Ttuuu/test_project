<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I have found a couple of things that could help you improve your code.</p>

<h2>Don't abuse <code>using namespace std</code></h2>

<p>Putting <code>using namespace std</code> at the top of every program is <a href="https://stackoverflow.com/questions/1452721/why-is-using-namespace-std-considered-bad-practice">a bad habit</a> that you'd do well to avoid.  I don't know that you've actually done that, but it's an alarmingly common thing for new C++ programmers to do.  </p>

<h2>Avoid the use of global variables</h2>

<p>I see that <code>name</code> is used but it's neither declared within the function nor passed to it, implying a global variable.  It's generally better to explicitly pass variables your function will need rather than using the vague implicit linkage of a global variable.  </p>

<h2>Eliminate unused variables</h2>

<p>This code declares a variable <code>event1</code> but then does nothing with it.  Your compiler is smart enough to help you find this kind of problem if you know how to ask it to do so.</p>

<h2>Don't use <code>system("cls")</code></h2>

<p>There are two reasons not to use <code>system("cls")</code> or <code>system("pause")</code>.  The first is that it is not portable to other operating systems which you may or may not care about now.  The second is that it's a security hole, which you absolutely <strong>must</strong> care about.  Specifically, if some program is defined and named <code>cls</code> or <code>pause</code>, your program will execute that program instead of what you intend, and that other program could be anything.  First, isolate these into a seperate functions <code>cls()</code> and <code>pause()</code> and then modify your code to call those functions instead of <code>system</code>.  Then rewrite the contents of those functions to do what you want using C++.  </p>

<h2>Fix your newline characters</h2>

<p>The string starting with "For some peculiar reason" contains <code>/n</code> which is two characters, but it's clear from the context that you intended <code>\n</code> which is a single newline character.</p>

<h2>Use a menu object or at least a common menu function</h2>

<p>In a number of places in your code, you have something like a menu.  Your code presents a couple of options and then asks the user to pick one based on an input number. Rather than repeating that code in many places, it would make sense to make it generic.  Only the prompt strings actually change, but the underlying logic of presenting the choices and asking for input are all the same.  It looks like you're a beginning programmer, and so perhaps you haven't learned about objects yet, but this kind of repeated task with associated data is really well-suited to <em>object-oriented programming</em> and that's something that C++ is very good at expressing.  </p>

<p>Specifically, here's how I might approach this.  I'd create a Menu object:</p>

<pre><code>class Menu
{
public:
    Menu(const string &amp;name, const string &amp;prompt, 
        const std::vector&lt;std::pair&lt;string, string&gt; &gt; &amp;choices 
        = std::vector&lt;std::pair&lt;string, string&gt; &gt;{});
    virtual ~Menu();
    const string&amp; getChoice() const;
    bool operator==(const string &amp;name) const;
private:
    static const string menuend;
    string _name, _prompt;
    std::vector&lt;std::pair&lt;string, string&gt; &gt; _choices;
};
</code></pre>

<p>Implementations are here:</p>

<pre><code>Menu::Menu(const string &amp;name, const string &amp;prompt, 
        const std::vector&lt;std::pair&lt;string, string&gt; &gt; &amp;choices) 
    : _name(name), _prompt(prompt), _choices(choices) 
{}

bool Menu::operator==(const string &amp;name) const
{
    return name==_name;
}

const string&amp; Menu::getChoice() const
{ 
    if (_choices.size() == 0) {
        cout &lt;&lt; _prompt;
        return menuend;
    }
    unsigned choice; 
    int i;
    do { 
        cout &lt;&lt; _prompt;
        i = 1;
        for (auto ch : _choices)
            cout &lt;&lt; i++ &lt;&lt; ": " &lt;&lt; ch.first &lt;&lt; '\n';
        cin &gt;&gt; choice; 
        --choice;
    } while (choice &gt;= _choices.size()); 
    return _choices[choice].second; 
}

Menu::~Menu() 
{}

const string Menu::menuend{"END"};
</code></pre>

<p>Finally, we can construct the game itself as a <code>std::vector</code> of these <code>Menu</code> objects:</p>

<pre><code>std::vector&lt;Menu&gt; game{  
    Menu("mainroad", 
            "You are on a road that heads west and east of your position.\n" 
            "Which way will you go?\n", std::vector&lt;std::pair&lt;string,string&gt; &gt;{
                {"Go West", "spider"}, 
                {"Go East", "brickhouse"}, 
                {"Wait for something to happen", "dragon"}}),
    Menu("spider", 
            "You travel down the road, about only 100 metres and you encounter \n" 
            "a giant spider with vicious poison coated fangs.\n" 
            "its hideous appearance causes your throat to dry and your knees to shake!\n"
            "What on earth will you do?\n\n", std::vector&lt;std::pair&lt;string, string&gt; &gt;{
                {"Attempt to attack the spider with your sword.","spiderattack"},
                {"Throw your sword in the off chance it might kill it.","throwsword"},
                {"RUN FOR YOUR LIFE!", "running"}}),
    Menu("spiderattack",
            "You viscously swing your sword at the spiders general direction.\n" 
            "The swing was so great, your arms jolts out of place,\n"
            "creating a surge of pain.\n" 
            "Your arm is now broken, and you fall to the ground in pain....\n" 
            "The spider launches 3 metres straight into your body...\n"
            "What on earth is it doing?\n" 
            "Oh My God! The spider is devouring everything....\n" 
            "All that remained was bones of the once mobile adventurer.\n"), 
    Menu("brickhouse",
            "After a mile walk, you arrive at an old brick house.\n" 
            "You walk slowly inside.\n" 
            "The door slams behind you and the room lightens up.\n" 
            "What on earth is going on...?\n\n" 
            "Unable to open the door, you look around for anything of use.\n" 
            "Nothing, not a single piece of furniture.\n" 
            "What will you do?\n", std::vector&lt;std::pair&lt;string, string&gt; &gt;{
                {"Wait for someone to save you.", "trapdoor"}, 
                {"Or Wait for someone to save you.", "library"}})
};
</code></pre>

<p>The game itself becomes entirely data-driven:</p>

<pre><code>void road() {
    auto menu = std::find(game.begin(), game.end(), "mainroad"); 
    while (menu != game.end())
        menu = std::find(game.begin(), game.end(), menu-&gt;getChoice());
}
</code></pre>

<p>If you need more than the plain <code>Menu</code> class provides, you can simply derive a new kind of class and put that into the <code>vector</code>.  It should also be obvious that this could very easily all be read as a script from a file, simply by defining an <code>ostream</code> extractor for the <code>Menu</code> class.</p>

<h2>Consider using a better random number generator</h2>

<p>You are currently using </p>

<pre><code>random1 = rand() % 2;
</code></pre>

<p>There are two problems with this approach. One is that the low order bits of the random number generator are not particularly random, so neither with <code>random1</code> be.  On my machine, there's a slight but measurable bias toward 0 with that.  The second problem is that it's not thread safe because <code>rand</code> stores hidden state.  A better solution, if your compiler and library supports it, would be to use the <a href="http://en.cppreference.com/w/cpp/numeric/random/uniform_int_distribution" rel="nofollow noreferrer">C++11 <code>std::uniform_int_distribution</code></a>.  It looks complex, but it's actually pretty easy to use.  One way to do that (<a href="http://www.stroustrup.com/C++11FAQ.html#std-random" rel="nofollow noreferrer">from Stroustrup</a>) is like this:</p>

<pre><code>int rand_int(int low, int high)
{
    static std::default_random_engine re {};
    using Dist = std::uniform_int_distribution&lt;int&gt;;
    static Dist uid {};
    return uid(re, Dist::param_type{low,high});
}
</code></pre>

<p>Note that this still stores state, but at least the distribution is correct.</p>
    </div>