<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The <code>Job</code> class has public members, so it's simpler to make it an aggregate:</p>

<pre><code>struct Job {
    int index;
    int time_slot;
    int profit;
};
</code></pre>

<p>Then, use <code>std::tie</code> to simplify the comparison operators: (operands to these operators should be marked as <code>const</code>, which you didn't)</p>

<pre><code>bool operator&lt;(const Job&amp; lhs, const Job&amp; rhs)
{
    return std::tie(lhs.time_slot, lhs.profit) &lt; std::tie(rhs.time_slot, rhs.profit);
}

// implement other operators in terms of &lt;
</code></pre>

<p>You <code>==</code> is not consistent with other comparison operators, which is confusing and likely to cause problems.</p>

<p>Also note that <code>if (condition) { return true; } return false;</code> should be changed to <code>return condition;</code> for clarity.</p>

<p>This is convoluted:</p>

<blockquote>
<pre><code>Job j1(1, 1, 3);
Job j2(2, 3, 5);
Job j3(3, 4, 20);
Job j4(4, 3, 18);
Job j5(5, 2, 1);
Job j6(6, 1, 6);
Job j7(7, 2, 30);
std::vector&lt;Job&gt; vect = { j1,j2,j3,j4,j5,j6,j7 };
</code></pre>
</blockquote>

<p>It should be simplified to</p>

<pre><code>std::vector&lt;Job&gt; vect {
    {1, 1, 3}, {2, 3, 5}, // ...
};
</code></pre>

<p>This:</p>

<blockquote>
<pre><code>auto order = [&amp;]() {
    auto it = vect.begin();
    while (it + 1 != vect.end()) {
        if (*it == *(it + 1)) {
            it = vect.erase(it);
            continue;
        }
        it++;
    }
};
order();
</code></pre>
</blockquote>

<p>should be</p>

<pre><code>vect.erase(std::unique(vect.begin(), vect.end()), vect.end());
</code></pre>

<p>(provided that I understand the code correctly).</p>

<p>And this:</p>

<blockquote>
<pre><code>std::for_each(vect.begin(), vect.end(), [](Job i) {std::cout &lt;&lt; i &lt;&lt; " "; });
</code></pre>
</blockquote>

<p>is a complicated way of writing</p>

<pre><code>for (const auto&amp; job : vect) {
    std::cout &lt;&lt; job &lt;&lt; ' ';
}
</code></pre>

<p>or</p>

<pre><code>std::copy(vect.begin(), vect.end(),
          std::ostream_iterator&lt;Job&gt;{std::cout, ' '});
</code></pre>
    </div>