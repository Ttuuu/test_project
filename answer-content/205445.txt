<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Login</h2>

<ol>
<li>Make a function <code>login</code> and move all the code to do with <code>logged_in1</code> into it.</li>
<li>Use <code>while not logged_in1</code> rather than <code>while logged_in1 == False</code>.</li>
<li>Rather than using <code>val == 'a' or val == 'b'</code> you can use <code>val in ('a', 'b')</code> .</li>
<li><p>Rather than nesting if's you can use a guard clause:</p>

<pre><code># bad
if username in ('User1', 'User2', 'User3', 'User4', 'User5'):
    # code
else:
    print('Incorrect username, try again')

# good
if username not in ('User1', 'User2', 'User3', 'User4', 'User5'):
    print('Incorrect username, try again')
    continue

# code
</code></pre></li>
<li><p>You can use <code>str.format</code> or f-strings (3.6+) to make your print easier to read.</p>

<pre><code>print('Welcome, {} you have been successfully logged in.'.format(username))
print(f'Welcome, {username} you have been successfully logged in.')
</code></pre></li>
<li><p>You can use <code>while True</code> and <code>break</code> from the loop if you login successfully.
Alternately as you have a function you can <code>return</code> out of the function.</p></li>
</ol>

<p>This changes your login code to:</p>

<pre><code>def login():
    while True:
        username = input('What is your username? ')
        password = input('What is your password? ')
        if username not in ('User1', 'User2', 'User3', 'User4', 'User5'):
            print('Incorrect username, try again')
            continue

        if password != 'password':
            print('Incorrect password, try again')
            continue

        print(f'Welcome, {username} you have been successfully logged in.')
        return username

user1 = login()
user2 = login()
</code></pre>

<h2>Roll</h2>

<ol>
<li>Reduce the amount of empty lines in <code>roll</code>.</li>
<li><p>You can use a turnery statement to reduce the amount of lines.</p>

<pre><code># from
if (die1 + die2) % 2 == 0:
    change = 10
else:
    change = -5

# to
change = 10 if (die1 + die2) % 2 == 0 else -5
</code></pre></li>
<li><p>You can calculate <code>points</code> in one go, so it's easier to know what it is.</p></li>
<li>It's easier to read <code>points += 1</code>, which is the same as <code>points = points + 1</code>.</li>
<li>It's common practice to put a space after commas in function calls.</li>
<li><code>return</code> is a keyword, rather than a function so you should remove the brackets.</li>
</ol>

<p>This changes <code>roll</code> to:</p>

<pre><code>def roll():
    die1 = random.randint(1, 6)
    die2 = random.randint(1, 6)
    change = 10 if (die1 + die2) % 2 == 0 else -5
    points = die1 + die2 + change
    if die1 == die2:
        points += random.randint(1, 6)
    return points
</code></pre>

<h2>Game</h2>

<ol>
<li>It's common in Python to use <code>snake_case</code>, so I suggest changing <code>Player1Points</code> to <code>player_1_points</code> or <code>player1_points</code>.</li>
<li>I'd change the code so that it returns a tuple of both the points scored and if they won for both players.</li>
</ol>

<h2>Winner</h2>

<ol>
<li>It'd be easier to make this code in the <code>main</code> function, and so I'd move the calls to <code>login</code> and <code>game</code> here.</li>
<li>It'd be simpler if you focus on just making <code>winner</code>, rather than <code>winner_user</code> and <code>winner_points</code>.</li>
</ol>

<p>Getting:</p>

<pre><code>def main():
    user1 = login()
    user2 = login()
    (player1, player1_win), (player2, player2_win) = game(user1, user2)
    if player1_win:
        winner = (player1, user1)
    else:
        winner = (player2, user2)
    print('Well done, {winner[1]} you won with {winner[0]} Points')
</code></pre>

<h2>Winner and Scoreboard</h2>

<ol>
<li>It'd be easier if you used an f-string to format the line to write to the file.</li>
<li>You should use <code>with</code> when using files.</li>
<li>You should add some more functions to get, mutate and write to the leaderboard.</li>
<li>You should add a <code>if __name__ == '__main__':</code> guard to ensure your code doesn't run when you don't want it to.</li>
</ol>

<hr>

<p>This gets the following code:</p>

<pre><code>import random
import time


def login():
    while True:
        username = input('What is your username? ')
        password = input('What is your password? ')
        if username not in ('User1', 'User2', 'User3', 'User4', 'User5'):
            print('Incorrect username, try again')
            continue

        if password != 'password':
            print('Incorrect password, try again')
            continue

        print(f'Welcome, {username} you have been successfully logged in.')
        return username


def roll():
    die1 = random.randint(1, 6)
    die2 = random.randint(1, 6)
    change = 10 if (die1 + die2) % 2 == 0 else -5
    points = die1 + die2 + change
    if die1 == die2:
        points += random.randint(1, 6)
    return points


def game(user1, user2):
    player1_points = 0
    player2_points = 0
    for i in range(1,5):
        player1_points += roll()
        print(f'After this round {user1} you now have: {player1_points} Points')
        time.sleep(1)
        player2_points += roll()
        print(f'After this round {user2} you now have: {player2_points} Points')
        time.sleep(1)

    player1_tiebreaker = 0
    player2_tiebreaker = 0
    if player1_points == player2_tiebreaker:
        while player1_tiebreaker == player2_tiebreaker:
            player1_tiebreaker = random.randint(1,6)
            player2_tiebreaker = random.randint(1,6)

    player1_win = (player1_points + player1_tiebreaker) &gt; (player2_points, player2_tiebreaker)
    return (player1_points, player1_win), (player2_points, not player2_win)


def add_winner(winner):
    with open('Winner.txt', 'a') as f:
        f.write('{winner[0]},{winner[1]}\n')


def get_leaderboard():
    with open('Leaderboard.txt', 'r') as f:
        return [line.replace('\n','') for line in f.readlines()]


def update_leaderboard(leaderboard, winner):
    for idx, item in enumerate(leaderboard):
        if item.split(', ')[1] == winner[1] and int(item.split(', ')[0]) &lt; int(winner[0]):
                leaderboard[idx] = '{}, {}'.format(winner[0], winner[1])
        else:
            pass
    leaderboard.sort(reverse=True)


def save_leaderboard(leaderboard):
    with open('Leaderboard.txt', 'w') as f:
        for item in leaderboard:
            f.write(f'{item}\n')


def main():
    user1 = login()
    user2 = login()
    (player1, player1_win), (player2, player2_win) = game(user1, user2)
    if player1_win:
        winner = (player1, user1)
    else:
        winner = (player2, user2)
    print('Well done, {winner[1]} you won with {winner[0]} Points')
    add_winner(winner)
    leaderboard = get_leaderboard()
    update_leaderboard(leaderboard, winner)
    save_leaderboard(leaderboard)


if __name__ == '__main__':
    main()
</code></pre>
    </div>