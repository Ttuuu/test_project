<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Sorting is not needed.  A Set may be a better data structure for the task.</p>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>const find2Unique2 = a =&gt; Array.from( a.reduce( 
    (once, x) =&gt; (once.delete(x) || once.add(x), once),
    new Set() 
))

console.log( find2Unique2( [2, 0, 6, 8, 10, 2, 6, 10] ) );</code></pre>
</div>
</div>


<p>I"m not sure how to solve this in constant space.  If you xor all of the terms together </p>

<pre><code>arr.reduce( (xor,x) =&gt; xor ^ x, 0 )
</code></pre>

<p>Then <code>result = a ^ b</code>, where <code>a</code> and <code>b</code> are your two unique terms.  If you can figure out <code>a</code>, then <code>b = result ^ a</code>.  Or you can find some other reduction, you'll have two equations and two unknowns, and an algebraic solution might be possible.  </p>

<p>For example, xor of the negated array combines with positive xor to uniquely identify a and b if they are two bits wide: </p>

<pre><code>  xor = arr.reduce( (xor,x) =&gt; xor ^ x, 0 )
  neg = arr.reduce( (xor,x) =&gt; xor ^ -x, 0 )

 a     b               xor   neg &amp; 0xF (high bits omitted for clarity)
 0     1     =&gt;          1  1111 
 0    10     =&gt;         10  1110 
 0    11     =&gt;         11  1101 
 1    10     =&gt;         11     1 
 1    11     =&gt;         10    10 
10    11     =&gt;          1    11 
</code></pre>

<p>But it doesn't work for larger values.  You could do multiple passes, with each pass xor-ing a right-shifted version of elements that could possibly match (if the last two bytes are <code>11</code> and <code>10</code>, you can skip numbers that don't end in those bits).   </p>

<p>I didn't implement this because it's pretty complicated and it doesn't seem like the right answer.  But maybe it gives you an idea.</p>
    </div>