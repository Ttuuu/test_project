<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li>You've used a readable idiomatic Java naming convention.</li>
<li>There is no point reassign p to player and e to enemy, use the full name on entry, make the parameters <code>final</code>.</li>
<li>Static methods are a code smell in OO programming, they will result is tightly coupled code.  They should be studiously avoided until you know the specific circumstances that make them necessary.</li>
<li>Follow the <em><a href="https://martinfowler.com/bliki/TellDontAsk.html" rel="nofollow noreferrer">tell don't ask idiom</a></em>, tell the player to attack the enemy and tell the enemy to attack the player which will minimise coupling if you use an interface.</li>
<li>Never use <code>while(true)</code>.  In this case I would use a <code>do { .. } while(...)</code> loop since you always want this loop to be performed once.  Use <code>while(...)</code> when   it could be <code>0..N</code> and <code>do { .. } while(...)</code> when the loop is <code>1..N</code>.

<ul>
<li>Use a single condition, probably the player's input or battling continues for your loop control for clarity.</li>
</ul></li>
<li>Put the health display inside the <code>Player</code> and <code>Enemy</code> classes (or a common base class) and show it during players and enemy turn.</li>
<li>Pass the gold &amp; experience as a parameter to the victory method on the player.</li>
</ul>

<p>Something like this:</p>

<pre><code>public void manage(Player player, Enemy enemy) {
    boolean battling = true;    
    do {
        player.turn(enemy);
        enemy.turn(player);
        battling = player.isAlive() &amp;&amp; enemy.isAlive();
        } while(battling);
    }
}
</code></pre>

<ul>
<li>In the <code>Player</code> and <code>Enemy</code> classes have a <code>Opponent</code> interface (follow the <a href="https://en.wikipedia.org/wiki/Interface_segregation_principle" rel="nofollow noreferrer">Interface Segregation Principle</a>) that includes a turn method to makes attack and takes damage. The instances of Player and Enemy sends damage to the opponent and reduces their karma.  Getting and Setting is a code smell that increases coupling.</li>
</ul>

<p>e.g.</p>

<pre><code>public turn(Opponent character) {  
    displayStatus();
    attack = chooseAttack();
    reduceMana(attack);
    character.damage(attack);
}

public damage(Attack attack) {    
    hp - hp - attack.damage;
}
</code></pre>
    </div>