<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'm not able to review the functionality of the code currently, but to address your concerns:</p>

<p>In <code>dequeue()</code>, rather than returning the node, add a parameter (pointer to <code>QueueNode</code>) to store that node in. This is similar to functions like <a href="https://linux.die.net/man/3/memcpy" rel="nofollow noreferrer"><code>memcpy(3)</code></a>, <a href="https://linux.die.net/man/3/strtoul" rel="nofollow noreferrer"><code>strtoul(3)</code></a> (<code>end</code> pointer), and so on. It allows you to return an error value however you wish.</p>

<pre><code>int dequeue(struct Queue *queue, struct QueueNode *out);
</code></pre>

<p>If the queue is empty, don't bother modifying <code>out</code>, and just return an error code.</p>

<p>I would also avoid printing &amp; <code>exit</code>ing from within the queue's functions upon error. Instead return some kind of error value and leave it for the user to check.</p>

<p>For example, consider if <code>malloc</code> fails. The user may want to check <code>errno</code>, or use a fallback data structure.</p>

<pre><code>int enqueue(struct Queue *queue, int num) {
    struct QueueNode *queuenode = malloc(sizeof(struct QueueNode));

    if(queuenode == NULL){
        return -1;
    }

    queuenode-&gt;data = num;
    queuenode-&gt;nextNode = NULL;

    if(!queue-&gt;priorNode){
        queue-&gt;priorNode = queuenode;
    }

    if(queue-&gt;lastNode){
        struct QueueNode* temp = queue-&gt;lastNode;
        queue-&gt;lastNode = queuenode;
        temp-&gt;nextNode = queue-&gt;lastNode;
    } else {
        queue-&gt;lastNode = queuenode;
    }

    return 0;
}
</code></pre>
    </div>