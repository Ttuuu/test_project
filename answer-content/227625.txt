<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Welcome to Code Review!  Here's some suggestions.</p>

<h1>Overall design</h1>

<p>You defined a class <code>movie</code>.  Despite its name, all it does is read a string from the configuration file <code>movies.txt</code>.  This is unnecessary â€” just write a function that reads a string.</p>

<p>The global variable <code>previousGuesses</code> contains the previous guesses.  This shows that the game is stateful.  This is a good use for classes:</p>

<pre><code>class Hangman_game {
public:
    // ...
private:
    std::string word;
    std::string guesses;
};
</code></pre>

<p>The <code>numOfSpaces</code> function can be replaced by <code>std::count</code>.  The <code>print</code> function is unnecessary.  And it is counter-intuitive that <code>guessedPreviously</code> modifies the <code>previousGuesses</code>.</p>

<p>You are using char arrays all over the place.  In C++, prefer <code>std::string</code> for actual strings.</p>

<h1>Code</h1>

<blockquote>
<pre><code>#include &lt;iostream&gt;
#include &lt;cstdlib&gt;
#include &lt;string.h&gt;
#include &lt;time.h&gt;
#include &lt;fstream&gt;
</code></pre>
</blockquote>

<p>Use <code>&lt;cstring&gt;</code> and <code>&lt;ctime&gt;</code>.  And sort the headers alphabetically:</p>

<pre><code>#include &lt;cstdlib&gt;
#include &lt;cstring&gt;
#include &lt;ctime&gt;
#include &lt;fstream&gt;
#include &lt;iostream&gt;
</code></pre>

<blockquote>
<pre><code>using namespace std;
</code></pre>
</blockquote>

<p>Do not use <code>using namespace std;</code>.  It is considered <a href="https://stackoverflow.com/q/1452721">bad practice</a> and will cause a lot of problems.  For example, you will have some trouble using common identifiers like <code>size</code>.</p>

<blockquote>
<pre><code>class movie {
    private:
        string name;
        int _size;

    public:
        movie(void);
        inline string getName(void) {
            return this-&gt;name;
        }
        inline int getSize(void) {
            return this-&gt;_size;
        }
};
</code></pre>
</blockquote>

<ol>
<li><p><code>inline</code> is redundant in a class.</p></li>
<li><p><code>(void)</code> is C-style and is not recommended in C++.  Use <code>()</code> instead.</p></li>
<li><p><code>this-&gt;</code> is unnecessary.</p></li>
<li><p><code>std::string</code> maintains the size, so <code>_size</code> should be removed.</p></li>
</ol>

<p><code>public:</code> and <code>private:</code> are usually not indented.  And as I said before, this class should not exist at all.</p>

<blockquote>
<pre><code>movie::movie(void) {
    ifstream fin;
    fin.open("movies.txt", ios::in);
    // int random_integer = rand();
    getline(fin, this-&gt;name);       //currently takes the first line as movie name. Randomising logic will be inserted....any hints??
    this-&gt;_size = name.size();
    fin.close();
}
</code></pre>
</blockquote>

<p>The same thing with compact code:</p>

<pre><code>std::ifstream fin{"movies.txt"}; // the default is "in"
std::getline(fin, name);
</code></pre>

<p>Also, <code>"movies.txt"</code> should not be hardcoded.</p>

<blockquote>
<pre><code>int numOfSpaces(string name) {
    register unsigned counter = 0;
    for (register int i = 0; i &lt; name.size(); i++) {
        if(name[i] == ' ') {
            counter++;
        }
    }
    return counter;
}
</code></pre>
</blockquote>

<p>The keyword <code>register</code> is completely ignored by the compiler.  Also, use</p>

<pre><code>std::count(name.begin(), name.end(), ' ')
</code></pre>

<p>instead.</p>

<blockquote>
<pre><code>bool guessedPreviously(char ch) {
    if(previousGuesses.find(ch) != -1) {        //if guess is found, return true
        return true;
    }
    previousGuesses += ch;
    return false;
}
</code></pre>
</blockquote>

<p>Use <code>std::string::npos</code> instead of <code>-1</code>.  The latter is counter-intuitive and may cause signedness warnings.</p>

<blockquote>
<pre><code>void print(char name[], int size) {
    for (register int i = 0; i &lt; size; i++) {
        cout &lt;&lt; name[i];
    }
    cout &lt;&lt; endl;
}
</code></pre>
</blockquote>

<p>You should never be using a <code>char[]</code>, but even if that is the case, use <code>std::cout &lt;&lt; std::string_view(name, size) &lt;&lt; '\n';</code>.  <a href="https://stackoverflow.com/q/213907">Don't use <code>std::endl</code>.</a></p>

<hr>

<p>The main function is too long and looks chaotic.  It should be broken into different functions.  And you are using a variable length array which is a non-standard extension and should not be used.  <code>std::string</code> should be used instead.  And there's quite a few problems.  <code>rand</code> is infamous for its low quality and should not be used.   Too many variables make the logic hard to understand.  Most of the loops should be replaced by standard algorithms.  <code>return</code> is better than <code>exit(0)</code>.  Use <code>++i</code> instead of <code>i++</code> in a discarded value expression.</p>

<h1>Improved version</h1>

<p>Here's a very rough version in which I fix the aforementioned problems, not tested extensively:</p>

<pre><code>#include &lt;algorithm&gt;
#include &lt;iomanip&gt;
#include &lt;iostream&gt;
#include &lt;limits&gt;
#include &lt;stdexcept&gt;
#include &lt;string&gt;
#include &lt;string_view&gt;

class Hangman {
public:
    Hangman(std::string_view w, int l)
        :word{w}, current(w.size(), '_'), lives{l}
    {
        if (w.find('_') != w.npos) {
            throw std::runtime_error{"underscore character not supported"};
        }
    }
    void run();

private:
    std::string word;
    std::string current; // the current state (e.g., "_an_man")
    int lives;           // number of lives left

    enum class State {
        none, win, fail
    };

    void display();
    State guess();
};

void Hangman::run()
{
    State state;
    do {
        display();
        state = guess();
    } while (state == State::none);

    display();
    if (state == State::win) {
        std::cout &lt;&lt; "Congratulations!  You win.\n";
    } else {
        std::cout &lt;&lt; "Game over.\n"
                  &lt;&lt; "The word is " &lt;&lt; std::quoted(word) &lt;&lt; '\n';
    }
}

void Hangman::display()
{
    std::cout &lt;&lt; "Word: " &lt;&lt; current &lt;&lt; "\n"
                 "Lives left: " &lt;&lt; lives &lt;&lt; "\n\n";
}

auto Hangman::guess() -&gt; State
{
    std::cout &lt;&lt; "Guess a letter: ";

    char c;
    std::cin &gt;&gt; c;
    if (!std::cin) {
        throw std::runtime_error{"input failure"};
    }

    if (current.find(c) != current.npos) {
        std::cout &lt;&lt; "You have already guessed this letter.\n\n";
        --lives;
    } else if (word.find(c) == word.npos) {
        std::cout &lt;&lt; "Bad guess.\n\n";
        --lives;
    } else {
        for (std::size_t i = 0; i &lt; word.size(); ++i) {
            if (word[i] == c)
                current[i] = c;
        }
        if (word == current)
            return State::win;
    }

    if (lives == 0)
        return State::fail;
    else
        return State::none;
}

int main()
{
    Hangman game{"derivative", 6}; // configuration
    game.run();
}
</code></pre>

<p>Example session:</p>

<pre class="lang-none prettyprint-override"><code>Word: __________
Lives left: 6

Guess a letter: a
Word: _____a____
Lives left: 6

Guess a letter: b
Bad guess.

Word: _____a____
Lives left: 5

Guess a letter: c
Bad guess.

Word: _____a____
Lives left: 4

Guess a letter: d
Word: d____a____
Lives left: 4

Guess a letter: e
Word: de___a___e
Lives left: 4

Guess a letter: f
Bad guess.

Word: de___a___e
Lives left: 3

Guess a letter: g
Bad guess.

Word: de___a___e
Lives left: 2

Guess a letter: h
Bad guess.

Word: de___a___e
Lives left: 1

Guess a letter: i
Word: de_i_a_i_e
Lives left: 1

Guess a letter: j
Bad guess.

Word: de_i_a_i_e
Lives left: 0

Game over.
The word is "derivative"
</code></pre>
    </div>