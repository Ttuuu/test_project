<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Consider the null case a bit more</h1>

<p>If the smart pointer hasn't been assigned, then you have a null pointer by default. That seems fine, but if I call <code>*sptr</code> on an instance, I will get a null reference, which is UB.</p>

<p>This code, then, relies on the caller never calling <code>operator*</code> when the smart pointer is in this (evidently acceptable) state. To check that, the caller will have to write something like:</p>

<pre><code>if(sptr())
   doThingWithReference(*sptr);
</code></pre>

<p>I would be inclined to make 2 changes, then: throw if the dereference operator is called when the pointer is null (exceptions are better than UB), and also to define a bool operator:</p>

<pre><code>explicit operator bool() const {
  return _ptr == nullptr;
}
</code></pre>

<p>You mention C++98 in a comment; this <code>explicit</code> version <a href="https://en.cppreference.com/w/cpp/language/explicit" rel="noreferrer">is only C++11</a> (even if you swapped nullptr for 0), prior to that you had to do <a href="https://www.artima.com/cppsource/safebool.html" rel="noreferrer">interesting things</a> to prevent a bool operator making way for int casting and so on.</p>

<h1>Assignment to a null smart pointer will add references to nothing</h1>

<p>Consider <code>SmartPtr&lt;A&gt; sptr_a = sptr_null</code>: you Release a reference in the sptr_a refcount, then assign the pointer to that in <code>sptr_null</code> (which is a null pointer), and then add 1 to the mutually held nothing.</p>

<p>If you then assign this again to a different smart pointer <code>sptr_a = sptr_b</code>, then the assignment operator will refuse to _release the old pointer (pointing to nothing), and refuse to copy in the new one, too. If you have received a SmartPtr as a return value and assigned it to such a pointer like this:</p>

<pre><code>SmartPtr&lt;A&gt; sptr_a = sptr_null;
sptr_a = GetJewel();
</code></pre>

<p>Then <code>sptr_a</code> will still have a null pointer and the jewel will be thrown away.</p>

<h1>Initialise your reference count</h1>

<p>At present, there is nothing to initialise the reference count itself to zero except some good luck. The compiler should have warned you about that.</p>
    </div>