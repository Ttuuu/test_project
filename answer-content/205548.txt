<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I read both your reference implementers. They look more like Java that has been literally translated to C++. Though it may work neither of these are very good implementations and as such yours suffers from the same problems.</p>

<h2>Design</h2>

<h3>Design of Hash</h3>

<p>Your hash seems to have a limit on the number of elements.</p>

<pre><code>if(size_v == capacity_v)
{
    throw std::length_error{"Capacity exceeded!\n"};
}
</code></pre>

<p>But there does not seem to be a need for this. Each bucket in the hash is basically a list of linked elements. So you can store as many members as you like per list. So there really is no need for a size.</p>

<p>Hashing function are hard to write. The version you use can be used as a reasonable one but under a few conditions. The main one is that the value you use to diveide by (and thus the number of buckets) should be a prime number.</p>

<pre><code>std::size_t HashMap::hash_func(int key)
{
    return key % capacity_v;  // here capacity should be prime.
}                             // This will give you a much larger chance of 
                              // of not creating some pattern and using some
                              // buckets more than others.
</code></pre>

<p>I know this does not sound important but there is some significant maths done on this problem (make this prime it will save you a lot of headaches.</p>

<p>Alternatively you can use <code>std::hash</code> to generate you a better number that is less likely to clash (that use the module operator on that to get the actual index number).</p>

<h3>Design of C++</h3>

<p>You use <code>std::shared_ptr</code> to link all the elements in the list together. Personally I would have used a pointer (its self contained and you can control all the uses). But there is an argument for using a smart pointer (just not std::shared_ptr).</p>

<p>In this situation there is no sharing of the pointer. Each pointer is owned by exactly one parent. So use <code>std::unique_ptr</code> this will handle all the management of the pointer without the extra overhead needed by shared pointer.</p>

<h3>Design of Interface</h3>

<p>Your interface is <code>put/get/erase</code>.</p>

<p>The only big issue I see is the <code>get()</code>. What happens when you get a key that does not exist? You return a magic value (which is a bit of a code smell). How do you distinguish the magic value from a real value (do you prevent the magic value from being inserted?).</p>

<p>There is a small issue around <code>put()</code>. What happens if you put a key that already exists. Simply overwrite it? Sure that works. Might be nice to warn in this situation.</p>

<p>To me the <code>put/get</code> design has an issue for me in that it requires a two phase update. If I want to modify a key I first have to get the value associated with the key manipulate and then put the value back. In C++ we usually perform a retrieve from a container via a reference. That way once you have the value you can manipulate it directly. Also this makes it more efficient as you are not re-calculating the location using a hash and search on a list.</p>

<pre><code> int&amp;  value = cont.get(23);
 value = value + 5; // update in place as we are using a reference.
</code></pre>

<p>It even looks really nice if you overload <code>operator[]</code> so it looks like a normal array accesses.</p>

<pre><code> int&amp;  value = cont[23];
 value = value + 5; // update in place as we are using a reference.

 // Or simply
 cont[23] += 5;
</code></pre>

<h2>Code Review</h2>

<p>I would have put this class as a private member of <code>HashMap</code>.  </p>

<pre><code>class HashEntry {}
</code></pre>

<p>It does not seem to be leaked by any of the <code>HashMap</code> interfaces (which is good) so it does not need to be exposed to the user. Also by making it private you can remove the <code>get/set</code> methods which are completely useless in this context.</p>

<p>Sure you can keep this simple first time and just use <code>int</code> as the key and value. But in C++ when we make containers we usually create them generically so anything can be the key or value. I would have a look at templates.</p>

<pre><code>    int key_v;
    int val_v;
</code></pre>

<p>OK. You can use a smart pointer to manage this chain.</p>

<pre><code>    // The smart pointer to handle multiple keys with same hash value.
    // This will be used to create a linkedlist.
    std::shared_ptr&lt;HashEntry&gt; next_v;
</code></pre>

<p>But <code>std::shared_ptr</code> is the wrong smart pointer. Use <code>std::unique_ptr</code>.</p>

<p>OK I see why you had to use <code>std::shared_ptr</code>. You don't use references anywhere in your code. Which means that all values are copied on return. <code>std::unique_ptr</code> is non copyable which would be an issue here. You still need to use <code>std::unique_ptr</code> but you need to return by reference to make this work.</p>

<pre><code>    std::shared_ptr&lt;HashEntry&gt; next() const
</code></pre>

<p>Prefer to use the initializer list.</p>

<pre><code>HashMap::HashMap(std::size_t capacity)
{
    capacity_v = capacity;      // put this in the initializer list.
    map_v.resize(capacity_v);
}
</code></pre>

<p>This function does not change the state of the container. You can also mark it const.</p>

<pre><code>std::size_t HashMap::hash_func(int key)
{
    return key % capacity_v;
}
</code></pre>

<p>OK. You do need to search the list to see if it exists and over-right on a push (would be nice to know if I did over-right).</p>

<pre><code>// The function to insert key-value pair
void HashMap::put(int key, int val)
{
        while(node)
        {
            if(node-&gt;key() == key)
            {
                node-&gt;set_val(val);
                return;
            }
            pre = node;
            node = node-&gt;next();
        }
</code></pre>

<p><strong>BUT</strong> I think it is a bad idea to add to the end.</p>

<pre><code>        pre-&gt;set_next(std::make_shared&lt;HashEntry&gt;(key, val));
</code></pre>

<p>There is a concept of locality of reference. If you have used something then you will probably use it again soon (or a value close it). So if you put the value at the front a subsequent get (or over-righting put) will not have to perform as long of a search. So I would put the new value at the beginning of the chain.</p>

<p>In this function:</p>

<pre><code>// Retrieve value based on key
int HashMap::get(int key)
{
</code></pre>

<p>I am not sure why you have this extra <code>if statement</code></p>

<pre><code>    if(node-&gt;next() == nullptr &amp;&amp; node-&gt;key() == key)
    {
        return node-&gt;val();
    }
</code></pre>

<p>Seems redundant to me.</p>
    </div>