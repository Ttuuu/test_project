<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First of all, this is a very nicely written code.</p>

<p>Before writing about the <code>cur</code> implementation, a few notes:</p>

<ul>
<li>I do not think <code>n</code> and <code>m</code> should be in main. It creates shadowing in the function.</li>
<li>I added type annotation to the return value of the function. Since it's a generator it should be: <code>Iterator[List[int]]</code>.</li>
</ul>

<p>So you said you do not like the way <code>cur</code> is implemented in your code, I thought of a way to take it out of the function declaration.<br>
I created a sub function that is recursive taken out the <code>cur</code> variable. This is how it turned out:</p>

<pre class="lang-py prettyprint-override"><code>def permutations_with_replacement(n: int, m: int) -&gt; Iterator[List[int]]:
    cur = []

    def permutations_with_replacement_rec(n_rec: int, m_rec: int) -&gt; Iterator[List[int]]:
        nonlocal cur

        if n_rec == 0:
            yield cur
            return

        for i in range(1, m_rec + 1):
            cur = cur + [i]
            yield from permutations_with_replacement_rec(n_rec - 1, m_rec)
            cur.pop()

    yield from permutations_with_replacement_rec(n, m)
</code></pre>

<p>Now notice that I needed to add a <code>pop</code> to the variable since now it keeps the elements after the call to the function.<br>
Also I needed to use the <code>nonlocal</code> term so the function will know the <code>cur</code> variable.</p>

<p>The full code (with tests):</p>

<pre class="lang-py prettyprint-override"><code>from itertools import product
from typing import Iterator, List

from sys import setrecursionlimit
setrecursionlimit(10 ** 9)


def permutations_with_replacement(n: int, m: int) -&gt; Iterator[List[int]]:
    cur = []

    def permutations_with_replacement_rec(n_rec: int, m_rec: int) -&gt; Iterator[List[int]]:
        nonlocal cur

        if n_rec == 0:
            yield cur
            return

        for i in range(1, m_rec + 1):
            cur = cur + [i]
            yield from permutations_with_replacement_rec(n_rec - 1, m_rec)
            cur.pop()

    yield from permutations_with_replacement_rec(n, m)


def test_permutations_with_replacement():
    n = 3
    m = 4
    assert set(product(list(range(1, m + 1)), repeat=n)) == set(tuple(i) for i in permutations_with_replacement(n, m))


def main():
    n = int(input("Please enter 'N': "))
    m = int(input("Please enter 'M': "))

    for i in permutations_with_replacement(n, m):
        print(*i)


if __name__ == '__main__':
    main()
</code></pre>
    </div>