<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ol>
<li>Missing includes:

<ul>
<li>You need an include for <code>std::size_t</code> (though you could just use <code>size_type</code> everywhere, and declare that as <code>using size_type = decltype(sizeof 0);</code>.</li>
<li>You use <code>std::move</code>, and thus need <code>&lt;utility&gt;</code>.</li>
</ul></li>
</ol>



<pre><code>namespace nonstd {

    template&lt;typename Ty&gt;
    class vector
</code></pre>

<ol start="2">
<li><p>If (nearly) everything is in the same namespace, it is conventional <em>not</em> to indent it.</p></li>
<li><p>Obviously, you forego allocator-support (for now?).</p></li>
<li><p>Using <code>Ty</code> instead of <code>T</code> is very unconventional. Following convention reduces cognitive load, allowing you to expend it elsewhere more profitably. I'll pretend you followed convention for the rest of the review.</p></li>
</ol>



<pre><code>    using iterator = Ty * ;
    using const_iterator = const Ty*;
</code></pre>

<ol start="5">
<li><p>The whitespace around the first <code>*</code> is misplaced. Consider auto-formatting, or just be a bit more careful to stay consistent.</p></li>
<li><p>Those aliases are good. You are missing myriad other useful (and necessary) ones though, namely <code>value_type</code>, <code>size_type</code>, <code>difference_type</code>, <code>reference</code>, <code>const_reference</code>, <code>pointer</code>, and <code>const_pointer</code>.<br>
And when you add reverse-iterator-support, <code>reverse_iterator</code> and <code>const_reverse_iterator</code>.</p></li>
</ol>



<pre><code>    vector();
    explicit vector(const size_t count);
    vector(const size_t count, const Ty&amp; val);
    vector(const vector&amp; other);
    vector(vector&amp;&amp; other);
    ~vector();

    vector&amp; operator=(const vector&amp; other);
    vector&amp; operator=(vector&amp;&amp; other);
</code></pre>

<ol start="7">
<li><p>There is no reason not to make the default-ctor <code>noexcept</code> and <code>constexpr</code>, even if that means not allocating <em>any</em> memory. Especially as passing a zero count to a ctor or invoking the move-ctor can <em>already</em> result in a 0-capacity vector.<br>
Also, the magic constant you chose is pretty arbitrary, and should be a (private) named constant if you decide to keep it.</p></li>
<li><p>Having <code>const</code> parameters in an API is at best irritating to the reader: It doesn't actually <em>do</em> anything.</p></li>
<li><p>You are missing constructors from <code>std::initializer_list&lt;T&gt;</code> and iterator-pair. At least copy-ctor and creating from initializer-list should then delegate to iterator-pair for code-reuse.</p></li>
<li><p>The move-ctor cannot throw by design, and should thus be marked <code>noexcept</code>.</p></li>
<li><p>Dito for move-assignment.</p></li>
</ol>



<pre><code>    size_t size() const;
    size_t capacity() const;
</code></pre>

<ol start="12">
<li><p>Both observers above could be <code>constexpr</code> if you have at least one <code>constexpr</code> ctor...</p></li>
<li><p>You are missing <code>empty()</code>, and <code>max_size()</code>.</p></li>
</ol>



<pre><code>    void push_back(const Ty&amp; val);
    void push_back(Ty&amp;&amp; val);
    void pop_back();
</code></pre>

<ol start="14">
<li><p>You are missing <code>emplace_back()</code>, which the first two should delegate to.</p></li>
<li><p>Also missing are <code>clear()</code>, <code>insert()</code>, <code>emplace()</code>, <code>erase()</code>, and <code>swap()</code>. The last one is crucial for a simple, efficient and exception-safe implementation of much of the class.</p></li>
</ol>



<pre><code>    Ty&amp; front();
    const Ty&amp; front() const;
    Ty&amp; back();
    const Ty&amp; back() const;
    Ty&amp; operator[](const size_t pos);
    const Ty&amp; operator[](const size_t pos) const;
</code></pre>

<ol start="16">
<li><p>All the mutable versions can be implemented by delegating to the <code>const</code> variant and applying a judicious <code>const_cast</code> to the result.<br>
Especially as you decided that "undefined behavior" means "throws exception" in your case.</p></li>
<li><p>Even though you gave the above observers the behavior of <code>at()</code>, you shouldn't leave it out.</p></li>
<li><p>You are missing <code>data()</code> completely. Yes, it behaves the same as <code>begin()</code> for you, but there you have it.</p></li>
</ol>



<pre><code>    iterator begin();
    const_iterator begin() const;
    iterator end();
    const_iterator end() const;
</code></pre>

<ol start="19">
<li>You are missing the reverse_iterator equivalents.</li>
</ol>



<pre><code>    Ty * buffer;
    iterator m_first;
    iterator m_last;
    iterator m_end;
</code></pre>

<ol start="20">
<li>Either <code>buffer</code> or <code>m_first</code> is redundant.</li>
</ol>



<pre><code>    void realloc(const size_t factor, const size_t carry);
    void alloc(const size_t cap);
</code></pre>

<ol start="21">
<li><p>Centralizing allocation to enforce policy and reduce repetition is a good idea. You aren't quite there though, and implementing the wrong signature. You need one private member for automatic growth <code>void grow(size_type n = 1)</code> and the rest should be public, so a consumer who <em>knows</em> can use it:</p>

<pre><code>void reserve(size_type n);
void resize(size_type n);
void shrink_to_fit();
</code></pre></li>
<li><p>Your current allocation-policy is "double plus constant" on reallocation. That's actually the worst one you could choose, as it makes it impossible to reuse any memory over multiple consecutive reallocations (all the returned memory from earlier together is never enough). For that, it should be below two, maybe <code>m_new = max(needed, m_old * 7 / 4)</code> for automatic reallocation.</p></li>
<li><p>You are missing assignment from <code>std::initializer_list&lt;T&gt;</code>, the more versatile <code>assign()</code>, </p></li>
</ol>

<p>Now only implementation-details:</p>

<pre><code>vector&lt;Ty&gt;::vector() : buffer(new Ty[10]), m_first(buffer), m_last(buffer), m_end(buffer + 10) {
// and many more
</code></pre>

<ol start="24">
<li>You are aware that <code>new T[n]</code> doesn't only reserve space for <code>n</code> <code>T</code>s, but also constructs them? That extra-work might be quite involved, and is most emphatically <em>not</em> expected. You should only allocate raw memory (by calling e. g. <code>void* operator new(std::size_t)</code>) and construct the members on demand as needed.</li>
</ol>



<pre><code>template&lt;typename Ty&gt;
vector&lt;Ty&gt;::~vector() {
    if (buffer != nullptr) {
        m_first = m_last = m_end = nullptr;
        delete[] buffer;
    }
}
</code></pre>

<ol start="25">
<li>Why do you guard against deleting a nullpointer? Also, why repaint the house when demolishing it?</li>
</ol>



<pre><code>template&lt;typename Ty&gt;
vector&lt;Ty&gt;&amp; vector&lt;Ty&gt;::operator=(const vector&lt;Ty&gt;&amp; other) {
    if (this == &amp;other) {
        return *this;
    }
    this-&gt;~vector();
    buffer = new Ty[other.capacity()];
    m_first = buffer;
    m_last = buffer + other.size();
    m_end = buffer + other.capacity();
    for (size_t i = 0; i &lt; size(); ++i) {
        buffer[i] = other[i];
    }
    return *this;
}

template&lt;typename Ty&gt;
vector&lt;Ty&gt;&amp; vector&lt;Ty&gt;::operator=(vector&lt;Ty&gt;&amp;&amp; other) {
    if (this == &amp;other) {
        return *this;
    }
    this-&gt;~vector();

    buffer = other.buffer;
    m_first = other.m_first;
    m_last = other.m_last;
    m_end = other.m_end;

    other.buffer = nullptr;
    other.m_first = other.m_last = other.m_end = nullptr;
    return *this;
}
</code></pre>

<ol start="26">
<li><p>Don't pessimise the common case, by optimising self-assignment.</p></li>
<li><p>Calling the dtor means the lifetime ended. Pretending it didn't causes Undefined Behavior.</p></li>
<li><p>Assignment should be transactional: Either succeed, or have no effect. Look into the <a href="https://stackoverflow.com/questions/3279543/what-is-the-copy-and-swap-idiom">copy-and-swap idiom</a>.</p></li>
<li><p>Move-assignment should be simple and efficient: Just <code>swap()</code>.</p></li>
</ol>



<pre><code>template&lt;typename Ty&gt;
void vector&lt;Ty&gt;::pop_back() {
    if (size() == 0) {
        throw std::exception("vector is empty");
    }
    (--m_last)-&gt;~Ty();
}
</code></pre>

<ol start="30">
<li><code>pop_back()</code> seems to be the only part of <code>vector</code> assuming you construct and destruct elements on demand. That mismatch can be explosive.</li>
</ol>
    </div>