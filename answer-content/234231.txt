<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<pre><code>Select Case ret
    Case Is = True

        Exit Sub
    Case Is = False

End Select
</code></pre>

<p>I would write a <code>Select Case</code> that will never have more than two conditions as an <code>If..Else</code> statement.</p>

<p>In this case, I prefer to wrap the <code>IsWorkBookOpen()</code> in its own <code>If</code> statement because you are going to exit the sub if it is triggered.   This will save you an indent level and eliminate the need for the <code>ret</code> variable.</p>

<pre><code>If IsWorkBookOpen(logWBpath) Then
    Dim msgCap As String
    msgCap = "The QC Log is currently open.  Please try again later or manually enter the data."

    MsgBox msgCap, vbInformation + vbOKOnly

    Exit Sub
End If
</code></pre>

<p>Adding white-space before and after your code blocks (e.g. If, Select, Sub, Function..) will make the code easier to read.</p>

<pre><code>If Len(QualityContWS.Range("Reviewer")) &gt; 0 Then
    Select Case LCase(Split(QualityContWS.Range("Reviewer"), " ")(0))
        Case Is = "hunter": Reviewer = "HMP"
        Case Is = "cindy": Reviewer = "CKK"
        Case Is = "zack": Reviewer = "ZJE"
        Case Is = "terri": Reviewer = "TJE"
    End Select
Else: Reviewer = ""
End If
</code></pre>

<p>Use with blocks to shorten references:</p>

<p>Before</p>

<pre><code>Dim qcComments As String

qcComments = QualityContWS.Range("C88") &amp; " " &amp; QualityContWS.Range("C89") &amp; " " &amp; QualityContWS.Range("C90") &amp; " " &amp; QualityContWS.Range("C91")

LogWorksheet.Range("J" &amp; dataRow) = qcComments &amp; ". " &amp; Reviewer
</code></pre>

<p>After</p>

<pre><code>With QualityContWS

    LogWorksheet.Range("J" &amp; dataRow) = WorksheetFunction.TextJoin(" ", True, .Range("C89:C91").Value, ". ", Reviewer)

End With
</code></pre>

<p>Good thing that these are going to be the only 4 employees who will never leave the company or you may need to rewrite a lot of code in the future.  Normally, I would recommend storing the employee information in a database and writing some lookup functions or an employee information class but I am sure you will be alright.</p>

<pre><code>Dim dataRow As Long
dataRow = LogWorksheet.Cells(Rows.Count, "B").End(xlUp).Row + 1
</code></pre>

<p>I'm really not a fan of having a lastrow variable unless absolutely necessary.  </p>

<p>As I have mentioned in answers to other questions of the OP, consider using Enumeration to reference you columns.</p>

<pre><code>Public Enum LogWorksheetColumns
    cA = 1
    cDateOf
    lnOfficerInitials
    cLnProcessor
    cBorrowerName
    cLnNumber
    cYesNo
    cReviewer
    cDateCleartoClose
End Enum

Sub PopulateData(...)
    '...
    Dim newRow As Range

    With LogWorksheet
        Set newRow = .Cells(.Rows.Count, "B").End(xlUp).Offset(1, -1)
    End With

    With QualityContWS
        newRow(cDateOf) = Format(.Range("P9"), "General Date")
        newRow(lnOfficerInitials) = GetLnProcessor(Split(QualityContWS.Range("lnOfficer").Value, " ")(0))
        newRow(cLnProcessor) = .Range("LnProcessor").Value
        newRow(cBorrowerName) = .Range("BorrowerName").Value
        newRow(cLnNumber) = .Range("LnNumber").Value
        newRow(cYesNo) = "No"
        newRow(cDateCleartoClose) = ....
    End With

    '...
End Sub
</code></pre>

<p><code>Rows.Count</code> needs to be qualified to a worksheet:</p>

<p><code>LogWorksheet.Cells(LogWorksheet.Rows.Count, "B").End(xlUp).Row + 1</code></p>
    </div>