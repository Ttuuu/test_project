<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<pre><code>string ROCK = "ROCK";
string PAPER = "PAPER";
string SCISSORS = "SCISSORS";  
</code></pre>

<p>These should be constants because the values won't change. You have some more magic strings which should be converted to constants as well.  </p>

<p>Well, naming things is hard but one should stick to some guidelines. If you don't have guidelines I would suggest using the <a href="https://msdn.microsoft.com/en-us/library/ms229002.aspx" rel="nofollow noreferrer">.NET Naming Guidelines</a>. What really is important about naming is that one can grasp at first glance what the code is about. Think about if you or <strong>Sam the maintainer</strong> is looking at the code in a few months, do you still know what the abbreviations are meant for?  </p>

<p>E.g  here  </p>

<pre><code>public void Comp_Choice()
{
    string[] comp_choices = { ROCK, PAPER, SCISSORS };
    Random rand = new Random();
    int rand_index = rand.Next(comp_choices.Length);
    txbxCompsChoice.Text = comp_choices[rand_index];
}  
</code></pre>

<p>you have at least 4 times used abbreviations for naming things. But this method has some more issues. Each time this method is called you are creating <code>string[] comp_choices</code> which could be done at class-level and used each time.  </p>

<p><code>Random</code> isn't really random and if not using .NET Core one should make it a class-level variable which is intialized inside the constructor or at class intialization, because it is initialized using the current time as seed. Meaning if e.g this method is called very fast in a row it would produce the same values.  </p>

<p>Based on the mentione naming guidelines methdos should be named using <code>PascalCase</code> casing and fields should be named using <code>camelCase</code> casing. <code>Snake_case</code> casing usually isn't used in .NET development.  </p>

<p>I would prefer the method in question returning a <code>string</code> than beeing <code>void</code>. </p>

<hr>

<p>Checking for a Draw could be made first because it is the easiest and can be the shortest piece of code. In addition if a Draw happens you only need to check if either the user <strong>or</strong> the computer has won. Hence I suggest to change the logic like so  </p>

<pre><code>if ((txbxPlayersChoice.Text == txbxCompsChoice.Text )
{
    txbxLeft.Text = txbxRight.Text = "DRAW";
}
else if ((txbxPlayersChoice.Text == ROCK &amp;&amp; txbxCompsChoice.Text == PAPER)
    || (txbxPlayersChoice.Text == PAPER &amp;&amp; txbxCompsChoice.Text == SCISSORS)
    || (txbxPlayersChoice.Text == SCISSORS &amp;&amp; txbxCompsChoice.Text == ROCK))
{
    txbxLeft.Text = txbxRight.Text = "You Lose"; 
    txbxCompScore.Text = txbxCompScore.Text + "X";
}
else 
{
    txbxLeft.Text = txbxRight.Text = "You Win"; 
    txbxPlayerScore.Text = txbxPlayerScore.Text + "X";
}
</code></pre>
    </div>