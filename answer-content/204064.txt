<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Played a bit with it... how do you like the following?</p>

<pre><code>fun &lt;T&gt; ungroupDuplicateValues(values: List&lt;T&gt;): List&lt;List&lt;T&gt;&gt; {
  val countPerValue = values.groupingBy { it }.eachCount()
  val maxCount = countPerValue.map { it.value }.max() ?: 0
  return (1..maxCount).map { index -&gt;
    countPerValue.filterValues { it &gt;= index }
        .map { it.key }
  }
}
</code></pre>

<p>Complexity (in regards to O-notation) should be similar to yours...</p>

<p>Or the following variant using <code>tailrec</code>:</p>

<pre><code>fun &lt;T&gt; ungroupDuplicateValues(values: List&lt;T&gt;) = ungroupDuplicateValues(values.toMutableList())

private tailrec fun &lt;T&gt; ungroupDuplicateValues(remainingValues : MutableList&lt;T&gt;, newValues : MutableList&lt;List&lt;T&gt;&gt; = mutableListOf()) : List&lt;List&lt;T&gt;&gt; {
  val values = remainingValues.distinct()
  newValues.add(values)
  values.forEach { remainingValues.remove(it) }
  return if (remainingValues.isEmpty()) newValues
         else ungroupDuplicateValues(remainingValues, newValues)
}
</code></pre>

<p>But don't ask me about the O-notation here. <code>tailrec</code> should be optimized, but as I still use a <code>forEach { remove }</code> it will probably still be <code>O(nÂ²)</code>.</p>

<p>If you rather prefer a direct assigned function (of the first shown solution), maybe the following is also ok for you:</p>

<pre><code>fun &lt;T&gt; ungroupDuplicateValues(values: List&lt;T&gt;) =
  values.groupingBy { it }.eachCount().let { countPerValue -&gt;
    (countPerValue.map { it.value }.max() ?: 0).let { maxCount -&gt;
      (1..maxCount).map { index -&gt;
        countPerValue.filterValues { it &gt;= index }
            .map { it.key }
      }
    }
  }
</code></pre>
    </div>