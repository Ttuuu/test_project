<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Global constants</h2>

<pre><code>sourcefile = 'wordlist'  # list of words
</code></pre>

<p>should be</p>

<pre><code>SOURCE_FILE = 'wordlist'  # list of words
</code></pre>

<h2>Looping instead of recursion</h2>

<pre><code>if response == 'yes' or response == 'y':
    main()
</code></pre>

<p>For a small number of replays this will have no noticeable ill effect, but if an obsessive user replays enough, they will eventually blow the stack. Replace this with a loop at the upper level in <code>main</code>.</p>

<h2>Function names</h2>

<pre><code>def getIndexPositions
</code></pre>

<p>should be</p>

<pre><code>def get_index_positions
</code></pre>

<p>and similar snake_case for your local variables.</p>

<h2>State passing</h2>

<p>Why are <code>guessed</code> and <code>list_masked_word</code> passed into <code>game</code>? They seem like they should just be initialized within <code>game</code> without being parameters.</p>

<h2>String interpolation</h2>

<pre><code>'You have', attempts, 'attempts to guess the word correctly'
</code></pre>

<p>is more easily expressed as</p>

<pre><code>f'You have {attempts} attempts to guess the word correctly'
</code></pre>

<h2>Loop syntax</h2>

<p>This:</p>

<pre><code>while (attempts != 0):
</code></pre>

<p>does not need parens. Also, rather than manually decrementing it, you can do</p>

<pre><code>for attempt in range(attempts, 0, -1):
</code></pre>

<h2>Typo</h2>

<p><code>Ooops</code> -&gt; <code>Oops</code></p>

<h2>Early-continue</h2>

<p>I find that this:</p>

<pre><code>    if len(guess) == 1:
        # lots of code...
    else:
        print()
        print('Enter only one letter!')
</code></pre>

<p>is more easily legible as</p>

<pre><code>    if len(guess) != 1:
        print()
        print('Enter only one letter!')
        continue

    # lots of code...
</code></pre>
    </div>