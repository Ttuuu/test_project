<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Thanks to <a href="https://codereview.stackexchange.com/questions/196756/a-structured-fizzbuzz#comment411895_196756">Lundin</a> for pointing out in the comments that the button bounce was improperly handled. This led to 'missed triggers', the system ignoring a button being pushed because it wasn't looking at that particular moment. Quite an unfortunate bug.</p>

<p>Quite easily fixed as well. There are a couple of methods to solve this, but in this case the easiest is by using a (somewhat ridiculous looking) latch and a dedicated handler for every input. Since the problem is most pressing for the manual reset button, the behaviour of switches won't change much if the same technique is used on them as well, I'll show how that's done.</p>

<p>A list of global variable names is introduced, which I'll name <code>GVL</code>. A new <code>GVL.reset_triggered</code> will be added which will be reset at the end of each <code>PLC_PRG</code> run. The top of <code>GVL</code> will carry an <a href="https://infosys.beckhoff.com/english.php?content=../content/1033/tc3_plc_intro/2529769099.html" rel="nofollow noreferrer">attribute 'qualified_only'</a> pragma to force the programs only to call the global variables by it's name inside the list (<code>GVL.reset</code> is valid while <code>reset</code> is not valid with this pragma, keeps it clean). Afterwards, a task handler is created for the manual reset and a few modifications to <code>PLC_PRG</code> are required to make it all fit again. Note how at the end of <code>PLC_PRG</code> the 'reset flag' is reset.</p>

<h3>GVL</h3>

<pre><code>{attribute 'qualified_only'}
VAR_GLOBAL
    reset_triggered : BOOL := FALSE;
    fizz: BOOL;
    buzz: BOOL;
END_VAR
</code></pre>

<h3>PLC_PRG (PRG)</h3>

<pre><code>PROGRAM PLC_PRG
VAR
    state : BOOL := FALSE;
    toggle_reset: BOOL := FALSE;

    i: USINT;
    reset_above : USINT := 90;

    fizzbuzz: FIZZBUZZ;
END_VAR
</code></pre>

<hr>

<pre><code>IF state THEN
    i := i+1;
    fizzbuzz(in:=i, fizz=&gt;GVL.fizz, buzz=&gt;GVL.buzz);
END_IF

IF GVL.reset_triggered THEN
    i := 0;
END_IF

IF toggle_reset AND i &gt;= reset_above THEN
    i := 0;
END_IF

IF GVL.reset_triggered THEN
    GVL.reset_triggered := FALSE;
END_IF
</code></pre>

<h3>MANUAL_RESET (PRG)</h3>

<pre><code>PROGRAM MANUAL_RESET
VAR
    reset : BOOL := FALSE;
END_VAR
</code></pre>

<hr>

<pre><code>IF reset THEN
    GVL.reset_triggered := TRUE;
    GVL.fizz := FALSE;
    GVL.buzz := FALSE;
END_IF
</code></pre>

<p><em>FIZZBUZZ (FB) has not changed.</em></p>

<p>Now, the manual reset is set-prioritized (not necessarily set-dominant) latched. With the new task running every 10 ms, all is fine again.</p>

<p>The <code>PLC_PRG.fizz</code> and <code>PLC_PRG.buzz</code> moved to respectively <code>GVL.fizz</code> and <code>GVL.buzz</code> and now they can be reset by the <code>MANUAL_RESET</code> task to fix another bug (the lights kept burning if they were before the reset was hit and the <code>PLC_PRG.state</code> was no longer active).</p>

<p>Just to be pedantic, the original code had a couple of semi-colons inconsistently placed behind <code>END_IF</code> statements. Those were not necessary.</p>

<hr>

<p>Is it clean code now? Not by a long shot. For starters, there is no proper separation of concerns. There should be a clear FizzBuzzer block, a clear HMI block and a clear LetsTestThisDeviceUnderTest block. That's insufficiently separated at the moment. Besides, I'm not convinced this is much prettier. Less buggy, by the looks of it. But not pretty.</p>
    </div>