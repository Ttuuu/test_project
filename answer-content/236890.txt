<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Missing behaviour</strong></p>

<blockquote>
<pre><code>public class GroupConversation extends Conversation {
    //...
    @Override
    public void addMessage(Message message) { }
}
</code></pre>
</blockquote>

<p><code>GroupConversation</code>'s <code>addMessage</code> doesn't delegate and it doesn't do anything else with the message.  This seems very suspect.</p>

<p><strong>UserManager</strong></p>

<p>It's generally a bad idea to provide direct access to an internal collection that your class depends on.</p>

<blockquote>
<pre><code>public HashMap&lt;Integer, User&gt; getAllUserList() {
    return userMap;
}
</code></pre>
</blockquote>

<p>By providing this method, it's possible for any client of your <code>userManger</code> to insert/remove items from the <code>userMap</code>.  This probably isn't something you want to happen.</p>

<p>I think it's also a little bit odd that you're returning a HashMap.  They key in the map seems to be an internal implementation detail, indeed your <code>MessageSystem</code> doesn't use the keys, it only uses the values.  It would be better to return something like an <code>UnmodifiableCollection</code> of the map's values.</p>

<p><strong>Friends</strong></p>

<p>The FriendShip request methods don't use any of the class members, (for example to validate that the users being friended both exist within the user manager).  The methods <em>could</em> be static.</p>

<p>Your friendship request functions both declare variables <code>user1</code> and <code>user2</code>.  These names hide the context from the request.  Why not call them <code>fromUser</code> and <code>toUser</code>.  Your friendship system as it stands seems incomplete.  You crate a request, but never do anything with it...</p>

<blockquote>
<pre><code>public void sendFriendshipRequest(User toUser){
    FrienshipRequest fr = new FrienshipRequest(this, toUser);
}
</code></pre>
</blockquote>

<p><strong>PrivateConversation</strong></p>

<blockquote>
<pre><code>public User getOtherParticipant(User user){
    if(participants.get(0)==user){
        return participants.get(1);
    }else if(participants.get(1)==user){
        return participants.get(0);
    }
    return null;
}
</code></pre>
</blockquote>

<p>It's unclear why this method would be required (the client can already get all of the participants).  If <code>user</code> isn't one of the participants, consider throwing an exception (seems like an invalid state).  Alternately, you could return an Optional to indicate the expectation that a user might not be returned.  This also looks suspect <code>participants.get(1)==user</code> are you meaning to do a reference comparison here?  It seems like two users should be equivalent if their <code>id</code> is the same.</p>

<p><strong>Map Iteration</strong></p>

<blockquote>
<pre><code>HashMap&lt;Integer, User&gt; friendsMap = user.getFriendsList();
for(Map.Entry&lt;Integer, User&gt; friendsMapEntry : friendsMap.entrySet()) {
    System.out.println(friendsMapEntry.getValue().getName());
}
</code></pre>
</blockquote>

<p>If you only care about the values in the map, then you can iterate over them rather than the entries.  Which makes the code a more concise/descriptive:</p>

<pre><code> user.getFriendsList()
     .values()
     .forEach(friend-&gt;System.out.println(friend.getName()));
</code></pre>
    </div>