<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Requirements</h2>

<blockquote>
  <p>You need Python 3.6+</p>
</blockquote>

<p>So at the least, you should add a shebang:</p>

<pre><code>#!/usr/bin/env python3
</code></pre>

<blockquote>
  <p>with numpy</p>
</blockquote>

<p>should go in a <code>requirements.txt</code>.</p>

<h2>Definition order</h2>

<p>You define <code>main</code> at the top. Call me old-fashioned, but I'm used to stricter languages where the referred symbols in a function need to be defined before that function. I still consider defining things in dependence order to be more legible, and suggest that <code>main</code> go at the bottom.</p>

<h2><code>Enum</code></h2>

<p>Use <code>unique</code> and <code>auto</code>:</p>

<pre><code>@unique
class PlayerFieldState(Enum):
    UNDISCOVERED = auto()
    EXPLODED_BOMB = auto()
    MARKED = auto()
</code></pre>

<p>I think it's probably inappropriate to represent the values 0-8 in that enum; they should be stored in a different variable. It looks like you're already going in that direction? given this: </p>

<pre><code>self.player_field: List[List[Union[int, PlayerFieldState]]]
</code></pre>

<p>In other words: why have an int-state union if your state captures ints?</p>

<h2>Numpy</h2>

<pre><code>    return field.tolist()
</code></pre>

<p>Why the <code>tolist</code> call? Wouldn't leaving the field as a Numpy array be a more efficient representation?</p>

<h2>Iterating coordinates</h2>

<p><code>get_neighbors</code> probably shouldn't return a list. Instead, make it a generator, and don't do iterative concatenation. Something like:</p>

<pre><code>    for xd in [-1, 0, 1]:
        xa = x + xd
        for yd in [-1, 0, 1]:
            ya = y + yd
            if self.is_on_field(xa, ya) and not (xd == 0 and yd == 0):
                yield xa, ya
</code></pre>

<p>The same goes for <code>get_adjacent_mines</code>.</p>

<h2>Boolean expressions</h2>

<pre><code>    if not self.is_on_field(x, y):
        return False
    return self.mine_field[x][y]
</code></pre>

<p>can be</p>

<pre><code>return self.is_on_field(x, y) and self.mine_field[x][y]
</code></pre>

<h2>Sets for validation</h2>

<pre><code>while value not in ["Y", "y", "N", "n", "yes", "no", "1", "0"]:
    value = input(message + " [y/n] ")
return value in ["Y", "y", "yes", "1"]
</code></pre>

<p>can be</p>

<pre><code>yes_vals = {"Y", "y", "yes", "1"}
no_vals = {"N", "n", "no", "0"}
while value not in yes_vals|no_vals:
    value = input(message + " [y/n] ")
return value in yes_vals
</code></pre>

<p>Your loop structure could also be simplified. Just do a <code>while True</code>, do one <code>input</code>, check for membership and return:</p>

<pre><code>yes_vals = {"Y", "y", "yes", "1"}
no_vals = {"N", "n", "no", "0"}
while True:
    value = input(message + " [y/n] ")
    if value in yes_vals|no_vals:
        return value in yes_vals
</code></pre>
    </div>