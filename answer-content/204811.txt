<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Object-oriented design</h2>

<p>This usage is awkward:</p>

<blockquote>
<pre><code>test = ProcessDataTables(df, "s1")
test.get_invalid_entries()
print(test.invalid_entries)
</code></pre>
</blockquote>

<p>Specifically:</p>

<ul>
<li>"ProcessDataTables" is a vague name that does not convey the object's purpose.  Furthermore, classes should be named as nouns, not verbs.  Also, why do you call it a "DataTable" instead of a "DataFrame", which is the PANDAS terminology?</li>
<li>"s1" is a cryptic shorthand for a set of validation rules.</li>
<li><code>.get_invalid_entries()</code> doesn't actually "get" anything, as its name implies.  Rather, it <em>sets <code>test.invalid_entries</code> as a side-effect</em>, which is really weird.</li>
</ul>

<p>I'd expect something more like this:</p>

<pre><code>s1_validator = DataFrameValidator(
    ID=re.compile(r'^[A-Za-z]{2}_[A-Za-z0-9_]+\.s1orig(?:_\d{4})?$'),
    content=re.compile(r'^(?:[ABC]+|[abc]+)$'),
)
print(s1_validator.invalid_entries(df))
</code></pre>

<p>Also, you defined the class using <code>class ProcessDataTables(object): …</code>, but this code is clearly intended for Python ≥ 3.6, since you used <a href="https://www.python.org/dev/peps/pep-0498/" rel="nofollow noreferrer">f-strings</a>.  In Python 3, the class <a href="https://stackoverflow.com/a/45062077/1157100">does not need to explicitly inherit from <code>object</code></a>.</p>

<h2>Implementation</h2>

<p><a href="https://pandas.pydata.org/pandas-docs/stable/text.html#testing-for-strings-that-match-or-contain-a-pattern" rel="nofollow noreferrer">PANDAS supports regex matching</a> using <code><em>series</em>.str.match(<em>regex</em>)</code>, so you don't need to write the <code>is_valid_…()</code> adapter functions.</p>

<p>Your regexes contain some superfluous capture groups.</p>

<pre><code>import re
import pandas as pd

class DataFrameValidator:
    def __init__(self, regexes={}, **kwargs):
        """
        Validator for PANDAS dataframes.  Requirements are specified as a
        dictionary (column names as keys, compiled regexes as values), or
        as named arguments.
        """
        self.regexes = dict(regexes, **kwargs)

    def invalid_entries(self, df):
        return {
            col: df.index[~df[col].str.match(regex)].tolist()
            for col, regex in self.regexes.items()
        }
</code></pre>

<p>Usage is as in the example above.</p>
    </div>