<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>Is this correct approach and is the above class safe from sql injections?</p>
</blockquote>

<p>Yes, it's safe (against SQL injection; if you give users complete control over table and column names, they may read data you do not want them to read).</p>

<p>But I would worry about performance a bit. For each <code>SELECT</code> query you want to perform, you actually have to perform 4 queries now.</p>

<p>The <code>verifyItemId</code> looks to be the most expensive - it fetches all items in the table -, but is luckily also completely unnecessary. You use prepared statements for the id, which is enough. If you do want an additional layer of security, you could additionally filter your input (for example, you know that ids can only be integers). You could use an <a href="https://codereview.stackexchange.com/questions/116922">input class</a> like this for example.</p>

<p>For the table and column check, this is a bit more difficult. Ideally, tables and columns should not be user supplied. But I have seen both in practice, so as defense in depth, it's not a bad idea to filter this at this level. I could think of two possible performance improvements:</p>

<ul>
<li>hardcode the table and column names, and check against that. This does mean that whenever you update your database schema, you need to update those hardcoded values as well.</li>
<li>perform the lookup once, and save it. That way, you only need to perform the additional query once per request instead of once per query.</li>
</ul>

<p>I would go with the first approach. It also gives you an additional level of security as you can filter more strictly. For example, you may not want a user to be able to read out the <code>user</code> table. Or if you do want to allow that, you definitely do not want them to be able to read out the <code>password</code> column (although this filtering likely has to take place at a higher level).</p>

<p><strong>Misc</strong></p>

<ul>
<li>don't echo or die in classes, it makes it hard to recover or show a custom error message. Just throw the exception.</li>
<li>pass the database connection to the <code>dbTools</code> class instead of creating it there. This way, you could pass different connections, eg when testing.</li>
<li><code>final</code> isn't a great name. <code>tables</code> would be better.</li>
<li>class names should start with an upper-case character. </li>
<li>you don't need one-time variables. Eg instead of assigning <code>$verifiedTable = $this-&gt;verifyTable($table);</code>, just assign <code>$this-&gt;verifiedTable = $this-&gt;verifyTable($table);</code> directly.</li>
</ul>

<p>You also use this structure quite often:</p>

<pre><code>        if(in_array($table, $final)) {
            $verifiedTable = $table;
        } else {
            throw new exception('Table doesn´t exists');
        }
        return $verifiedTable;
</code></pre>

<p>You can simplify this:</p>

<pre><code>        if(in_array($table, $final)) {
            return $table;
        } else {
            throw new exception('Table doesn´t exists');
        }
</code></pre>
    </div>