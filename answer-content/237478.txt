<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Tkinter is already in a loop. The window handler gets all messed up because of your own loop, which is called synchronously. Effectively you're running a loop in a loop and wonder why the outer loop takes so long to get to the next step. That's because of the inner loop taking so much time.</p>

<p>Long story short, your next window update will only commence once the <code>countdown</code> loop is finished.</p>

<p>There's mainly 2 ways of fixing that.</p>

<ol>
<li>Don't loop.</li>
<li>Use asynchronous (or threaded) loops instead.</li>
</ol>

<p>Basically, you'll need a function <code>start_countdown</code> which starts a threaded version of <code>countdown</code>. That would probably look something like this:</p>

<pre><code>import threading


class MyFirstGUI:
    # Init and rest of methods snipped for brevity
    def refresh(self):
        self.root.update()
        self.root.after(1000,self.refresh)

    def start_countdown(self):
        self.refresh()
        threading.Thread(target=countdown).start()
</code></pre>

<p>Now, the countdown will be calculated in a thread that doesn't halt the current loop (the Tkinter main window). With that as basis, see if you can rebuild your <code>countdown</code> method. You'll see it becomes more focussed on the actual calculations and less on the screen.</p>

<p>Please see <a href="https://stackoverflow.com/a/29158947/1014587">this answer on Stack Overflow</a> for the complete story on how to work with Tkinter and calls that would ordinarily block.</p>
    </div>