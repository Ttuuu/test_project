<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Minor problems and style points</h2>

<ul>
<li><p>The table has named columns set out already. This is problematic as the <code>for in</code> loop is alphabetic and thus you would be adding <code>Name, id, mark</code> which does not match the column headings.</p>

<p>It would be best to have the student fields defined as an array in the order that they are to be displayed. This can either be as dataset properties of the array or in the source code, or added to the dataset. The example has it in the source (be cause I am lazy)</p></li>
<li><p>Use <code>for of</code> rather than <code>for(;;)</code> and try to avoid ever using <code>for in</code> as it has a long list of caveats and problems associated with its use.</p></li>
<li><p>The function <code>markObtained</code>...</p>

<ul>
<li><p>...seems redundant in the example you give. The data can be accessed just as easily in one pass.</p></li>
<li><p>...the naming is confusing withing the <code>reduce</code> call. <code>names</code>, and <code>name</code> are both referring to the student <code>id</code>. This is especially problematic as the dataset has a field called <code>Name</code> (which should not be capitalized)</p></li>
<li><p>...creates an object indexed by id, the dataset you have shown is also an Object. Both are indexed via student id, yet you don't ever use the student id to lookup a student. markObtained would be best to return an array of student id's rather than copy the student references to a new object. See Example A</p></li>
</ul></li>
<li><p>The document fragment your create is not used, the last line is adding an empty fragment to the table.</p></li>
<li><p>A <code>table</code> has <code>insertRow()</code>, and <code>rows</code> have <code>insertCell()</code>, use them to add to the table rather than create them as DOM element via <code>document.createElement</code></p></li>
</ul>

<h2>Extract <code>ids</code></h2>

<p>From above points regarding the function <code>markObtained</code> The example creates an array of student ids that can be used to locate students in the original dataset. Also renames the variables so not to be confusing.</p>

<p>Example A</p>

<pre><code>const markObtained = Object.keys(students).reduce(function(ids, id) {
    if (students[id].mark&gt;=20) { ids[id] = id }
    return ids;
}, []);
</code></pre>

<h2>Adding to DOM</h2>

<p>You are appending to the table that is on the page. Each time you add a cell or row you are forcing a re flow.</p>

<p>You can either create the whole table in code and add it to the DOM when ready, or you can remove the table from the DOM, modify it and put it back see Example B.</p>

<p>If you remove and then put back it would be best to put the table within a container to ensure it goes where it belongs without undue fuss.</p>

<p>Example B</p>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>const students = {
    "24": {id: 24, name: "Zuali", mark: 30},
    "25": {id: 25, name: "Famkima", mark: 52},
    "27": {id: 27, name: "Duha", mark: 77},
    "28": {id: 28, name: "Rema", mark: 81},
    "29": {id: 29, name: "Sanga", mark: 47},
    "30": {id: 30, name: "Dari", mark: 23},
};

const PASS_MARK = 20;
const FIELDS = ["id", "name", "mark"];
updateStudentsTable(students);
 
function addPassed(table, students, pass = PASS_MARK) {
    for (const student of students) {
        if (student.mark &gt;= pass) {
            const row = table.insertRow();
            for (const field of FIELDS) {
                row.insertCell().textContent = student[field];
            }
        }
    }
}
function updateStudentsTable(students) {
    const table = document.querySelector("table");
    const par = table.parentElement;
    par.removeChild(table);
    addPassed(table, Object.values(students));
    par.appendChild(table);
}</code></pre>
<pre class="snippet-code-html lang-html prettyprint-override"><code>&lt;div&gt;
    &lt;table&gt;
        &lt;thead&gt;
            &lt;tr&gt;
                &lt;th&gt;Id&lt;/th&gt;&lt;th&gt;Name&lt;/th&gt;&lt;th&gt;Mark&lt;/th&gt;
            &lt;/tr&gt;
        &lt;/thead&gt;
    &lt;/table&gt;
&lt;/div&gt;</code></pre>
</div>
</div>

    </div>