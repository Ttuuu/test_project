<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I think using Regex will be too much for this little task. A simple split by <code>1</code>s should suffice.</p>

<pre><code>public static int ComputeLargestBinaryGap2(int value)
{
    return Convert
            // convert to binary
            .ToString(value, 2)
            // remove leading and trailing 0s, as per requirement
            .Trim('0')
            // split the string by 1s
            .Split(new [] { '1' })
            // find the length of longest segment
            .Max(x =&gt; x.Length);
}
</code></pre>

<p>We can also solve the problem from a mathematical approach, with logical operators and bit-shiftings :</p>

<pre><code>public static int ComputeLargestBinaryGap3(int value)
{
    // casting it to uint while keeping the same binary value, like reinterpret_cast&lt;unsigned int&gt;
    //var unsigned = BitConverter.ToUInt32(BitConverter.GetBytes(value), 0);
    var unsigned = unchecked((uint)value);
    // flag used to ignore counting trailing 0's
    var pastTrailing0 = false;

    int max = 0, count = 0;
    while(unsigned &gt; 0)
    {
        if ((unsigned &amp; 1) == 1)
        {
            if (count &gt; max)
                max = count;

            count = 0;
            pastTrailing0 = true;
        }
        else if (pastTrailing0)
        {
            count++;
        }

        unsigned = unsigned &gt;&gt; 1;
    }

    return max;
}
</code></pre>

<hr>

<p>EDIT: After this answer was posted, OP updated on his definition of "best", which leans toward readability. I'll add my comments on his code here :</p>

<ol>
<li><p>There is no benefit in declaring the variable, <code>regexp</code> , for the regular express, without giving a meaningful name to it, other than stating the obvious. It should be renamed to <code>binaryGap</code>.</p></li>
<li><p><code>valueAsBinary</code> is a quite misleading name. One would think it the value stored in the binary format, which is pretty much how every number is stored... However, it stores the binary string of <code>value</code>. Therefore, it should be renamed to <code>binaryString</code>, or <code>valueAsBinaryString</code>.</p></li>
<li><p>The <code>Match</code> class already have a <code>Length</code> property that could be used instead of the long way <code>match.Value.Length</code>. This property is cached, so we are not <em>re-measuring</em> the length of the string, as you can see <a href="http://referencesource.microsoft.com/#System/regex/system/text/regularexpressions/RegexCapture.cs,54" rel="noreferrer">here</a>.</p></li>
</ol>

<p>And, here is the final result :</p>

<pre><code>public static int ComputeLargestBinaryGap(int value)
{
    var binaryGap = new Regex("(?&lt;=1)(0+)(?=1)");
    var binaryString = Convert.ToString(value, 2);
    return 
        binaryGap.Matches(binaryString)
            .Cast&lt;Match&gt;()
            .Select(m =&gt; m.Length)
            .DefaultIfEmpty(0)
            .Max();
}
</code></pre>
    </div>