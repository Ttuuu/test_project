<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>iterators</h3>

<p>You can use an iterator</p>

<pre><code>def my_min(num_list):
    # empty lists
    if not num_list:
        raise ValueError('Empty list')

    list_iter = iter(num_list)
    minimum = next(list_iter)
    for num in list_iter:
        if num &lt; minimum:
            minimum = num            
    return minimum
</code></pre>

<p>In response to Mathias' comment, here is a version that works with an iterable:</p>

<pre><code>def my_min(seq):
    seq = iter(seq)

    try:
        minimum = next(seq)

        for num in seq:
            if num &lt; minimum:
                minimum = num            

        return minimum

    except StopIteration as e:
        pass

    raise ValueError('Empty list')
</code></pre>

<p>Improved based on @Wombatz comment:</p>

<pre><code>def my_min(seq):
    seq = iter(seq)

    try:
        minimum = next(seq)

    except StopIteration as e:
        raise ValueError('Empty list') from None

    else:
        for num in seq:
            if num &lt; minimum:
                minimum = num            

        return minimum
</code></pre>
    </div>