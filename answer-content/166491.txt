<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I wouldn't bother with a foreach loop because it will do more iterating than necessary.  I recommend halving the array at the desired position and squeezing the element-to-be-moved into the gap created.  Consider this much more concise method:</p>

<p>Code: (<a href="https://3v4l.org/hefOi" rel="nofollow noreferrer">Demo Link</a>)</p>

<pre><code>function moveKeyBefore($arr, $find, $move) {
    if (!isset($arr[$find], $arr[$move])) {
        return $arr;
    }

    $elem = [$move=&gt;$arr[$move]];  // cache the element to be moved
    $start = array_splice($arr, 0, array_search($find, array_keys($arr)));
    unset($start[$move]);  // only important if $move is in $start
    return $start + $elem + $arr;
}
$arr = ['foo1'=&gt;'bar', 'foo2'=&gt;'buzz', 'foo3'=&gt;'bazz'];
var_export(moveKeyBefore($arr, 'foo3', 'foo1'));
</code></pre>

<p>Output:</p>

<pre><code>array (
  'foo2' =&gt; 'buzz',
  'foo1' =&gt; 'bar',
  'foo3' =&gt; 'bazz',
)
</code></pre>

<p>Explanation:</p>

<p>First check that both of the nominated keys exist in the array, if not return the input array untouched.  <code>isset()</code> is very fast, certainly faster than <code>in_array()</code>.  Furthermore, the <code>!isset()</code> check will require both keys to exist otherwise the early return will be triggered.  This is as fast as this part gets.</p>

<p>Next, if both <code>$find</code> and <code>$move</code> exist in the array, my function will generate three array fragments:</p>

<ul>
<li><code>$elem</code> contains the associative array element declared by <code>$move</code>.</li>
<li><code>$start</code> contains the elements that precede <code>$find</code>.  <code>array_search()</code> returns the offset (numeric key) of the <code>$find</code> value in <code>$arr</code>.</li>
<li><code>$arr</code> is modified by <code>array_splice()</code> and contains all elements from find to the end.</li>
</ul>

<p>After the splice, when <code>$move</code> is in the <code>$arr</code> half, the union action bumps the duplicate element out.  When <code>$move</code> is in the <code>$start</code> half, the convenient "bump" is lost, this means that the <code>$move</code> element needs to be removed from its original location.  <code>unset()</code> can be used unconditionally because it doesn't error when the target element is not found.</p>
    </div>