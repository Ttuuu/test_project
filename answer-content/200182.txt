<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Disclaimer: I'm not a Ruby expert</p>

<h1>Type parameter</h1>

<p>The main thing that bothers me with you code is the <code>type</code> parameter given when constructing a <code>Product</code>'s instance. This goes against OO principles and leads to bad code for the following reason: you have to manage conditional explicitely in code with control structures (if, switch) instead of delegating this responsibility to the compiler/interpreter by using polymorphism.</p>

<p>Removing this would need to introduce a both <code>Book</code> class and a <code>GenericProduct</code> class which is basically representing all physical products but books.</p>

<h1>Common discount method</h1>

<p>Another thing is that the <code>discount</code> method is common to all products and differs only in the data (and not in the behavior). This can be implemented in <code>Product</code> and request the discount value in the constructor.</p>

<h1>Create local variable and directly return it</h1>

<p>This is useless and only introduce visual noise. You can directly return the value.</p>

<h1>Similitude between <code>Membership</code> and <code>Digital Product</code></h1>

<p>It looks like <code>Membership</code> is also a special kind of digital product and that a relationship between them can exist (they both require to send an email when shipping). However I'm not entirely sure about that so feel free to ignore the end of the resulting code listing.</p>

<h1>Reviewed code</h1>

<pre><code>class Product
  attr_reader :name, :description, :amount, :discount
  include Shipping
  include Discount

    def initialize(name, description, amount, discount)
        @name = name
        @description = description
        @amount = amount
        @discount = discount
    end 

    def discount
        return @discount
    end
end

class PhysicalProduct &lt; Product
    def initialize(name, description, amount)
        super(name, description, amount, 0.0)
    end

    def shipping
        create_shipping_label
        notify_buyer_product_without_taxes if free_of_taxes
    end
end

class GenericProduct &lt; PhysicalProduct
    def initialize(name, description, amount)
        super(name, description, amount)
    end

    def free_of_taxes
        return false
    end
end

class Book &lt; PhysicalProduct
    def initialize(name, description, amount)
        super(name, description, amount)
    end

    def free_of_taxes
        return true
    end
end

class DigitalProduct &lt; Product

    def initialize(name, description, amount, discount = 10.00)
        super(name, description, amount, discount)
    end

    def shipping
        notify_buyer_via_email
    end
end

class Membership &lt; DigitalProduct
    attr_reader :membership_status

    def initialize(name, description, amount)
        super(name, description, amount, 0.0)
    end

    def activate_membership()
        @membership_status = true;
    end

    def shipping
        super
        activate_membership
    end
end
</code></pre>
    </div>