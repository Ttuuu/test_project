<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Some remarks:</p>

<p>You have repetitive code eg:</p>

<pre><code>if (empty($_POST["username"])) {
</code></pre>

<p>You might as well define an array of fields to check and run validation in a loop.
Although you have only 3 items here...</p>

<p>There is a major <strong>flaw</strong>: you are not <strong>sanitizing</strong> the input fields:</p>

<pre><code>$stmt-&gt;bind_param("s", $_POST['username']);
</code></pre>

<p>At a minimum you should <strong>trim</strong> the text because it may contains whitespace (before and after). So if user 'admin' is already taken, I can register as 'admin ' for example (one space). That is not necessarily a direct <strong>vulnerability</strong>, it depends on the rest of the code, but you have <strong>inconsistent data</strong> and this will likely cause problems later. Usernames should not contain <s>whitespace</s> leading or trailing whitespace. Because you can have two different accounts the all look the same in print and on screen. That makes impersonation easy.</p>

<p>What you should do is assign the POST fields to variables, and then use variables in the rest of the code, after checking them and sanitizing them. Do not reuse <code>$_POST['whatever']</code> all across your code.</p>

<p>You should also test what happens if the HTTP request is tainted, for example if 
<code>$_POST['username']</code> is included twice in the POST request. Or if the field contains multiline input (or null characters). How will your code react ? Do you have error handling and logging ?</p>

<p>I note that you are not checking the <strong>length of input fields</strong>, including the password. What happens if the text is very large, larger than the corresponding table field ?</p>

<p>You should have a sensible <strong>password policy</strong> and not accept any password like 1234 or same as the username...</p>

<p>What you are showing is the registration form, but what would be interesting to see is the <strong>login page</strong>. That's the thing that should not be easy to trick or bypass.</p>

<p>If you use a modern development framework you can simplify your life, and your code will very probably be more secure.</p>

<p>In my opinion a page that does not have <strong>error handling</strong> is not secure, because you are not seeing what's going on and the code could also behave unpredictably.</p>

<p>Conclusion:</p>

<blockquote>
  <p>If I launched this on the web would you feel safe signing up with
  personal info ?</p>
</blockquote>

<p>No. There are simply not enough checks. The code is not robust. You should test it in adverse conditions. Try automated tools like SQLmap, Nikto and simulate an attack against yourself.</p>

<p>It is good that you are using parameterized queries, that's the least you could do in 2020. But that does not mean user input does not have to be checked and sanitized. You may be opening your site to other vulnerabilities. What is pretty much guaranteed is that users will use very weak passwords since you are accepting anything. Therefore many accounts will be susceptible to brute force attacks. And you will be blamed for facilitating a breach of personal data.</p>
    </div>