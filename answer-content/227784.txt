<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Besides your approach there are a few other alternatives to solve this problem: (1) collect segments of the input <code>text</code> (using values in <code>offsets</code>) and the tags into a <code>list</code>, then call <code>''.join(&lt;list&gt;)</code> at the end to generate the output; (2) split <code>text</code> into segments, create a format string using <code>'{}'.join(segments)</code>, then finally apply the format string to <code>tags</code> to generate the output.</p>

<p>Be aware that your approach consumes more memory and has a theoretical time complexity of <span class="math-container">\$O(n^2)\$</span> to join <span class="math-container">\$n\$</span> strings because memory reallocation is needed for each intermediate concatenated string. It could be more efficient in some cases on small <span class="math-container">\$n\$</span>s but will be less efficient when <span class="math-container">\$n\$</span> becomes larger. Therefore, this is not recommended by <a href="https://www.python.org/dev/peps/pep-0008/#id51" rel="nofollow noreferrer">PEP 8</a>:</p>

<blockquote>
  <ul>
  <li>Code should be written in a way that does not disadvantage other implementations of Python (PyPy, Jython, IronPython, Cython, Psyco,
  and such).</li>
  </ul>
  
  <p>For example, do not rely on CPython's efficient implementation of
  in-place string concatenation for statements in the form a += b or a =
  a + b. This optimization is fragile even in CPython (it only works for
  some types) and isn't present at all in implementations that don't use
  refcounting. In performance sensitive parts of the library, the
  ''.join() form should be used instead. This will ensure that
  concatenation occurs in linear time across various implementations.</p>
</blockquote>

<p><strong>EDIT</strong>: <a href="https://www.kaggle.com/miracle0/tag-insert-performance-comparison" rel="nofollow noreferrer">Here</a> is my version of performance measurements of various methods using the input format mentioned under the comment of <a href="https://codereview.stackexchange.com/a/227786/207952">this answer</a>, where <code>offsets</code> and <code>tags</code> are 'merged' into a single list of tuples. It can be seen that CPython's optimization of concatenation operation using <code>+</code> does take effect and the performance of <em>the best</em> concatenation-based method is on par with several <code>str.join</code>-based methods when the text length (the tag count equals to text length in the experiments) is less than 600, but eventually loses out due to its quadratic complexity. However, as PEP8 suggests, similar performance cannot be expected from other Python interpreters.</p>

<p>Performance measurements:</p>

<pre><code>  Mean exec time (us)           Text Length (equals to tag count)                  
Method                    150     300     450     600     750     900   
tag_insert_no_op         19.02   35.58   52.44   70.42   87.27   104.33 
tag_insert_concat1       52.14   109.22  171.93  238.59  302.76  369.56 
tag_insert_concat2       66.05   146.94  247.86  359.57  475.49  590.77 
tag_insert_concat3       63.04   139.67  238.23  342.51  453.53  599.11 
tag_insert_join1         65.18   127.26  194.70  256.11  311.22  371.54 
tag_insert_join1_local   51.53   99.95   147.47  197.71  245.54  290.79 
tag_insert_join1_extend  50.36   95.91   143.63  192.76  238.07  281.91 
tag_insert_join1_yield   55.01   103.39  155.92  210.74  256.53  306.94 
tag_insert_join1_yield2  52.82   101.89  155.55  208.33  255.97  305.05 
tag_insert_join2         61.59   118.39  175.99  234.68  287.70  341.65 
tag_insert_join3         60.82   120.61  177.78  238.28  286.85  343.49 
tag_insert_join3_iter    59.65   117.34  172.51  235.55  282.96  339.15 
tag_insert_format        64.98   124.01  184.88  245.21  302.68  362.70 
tag_insert_string_io     54.08   108.49  161.08  214.71  264.93  315.87 
</code></pre>
    </div>