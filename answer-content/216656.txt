<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Now, as has been said before: this is more of a codereview than a question. Nevertheless:</p>

<ol>
<li>You're defining <code>class Board:</code> without parantheses and <code>class Tictactoe()</code> with. No big deal reall, but a bit of inconsistency. I personally just put parens on every declaration. Rids you of having to think about it.</li>
<li>The variables <code>board</code>, <code>win_combinations</code> and <code>GameOver</code> are defined as class variables since they're declared in the body of the class definition itself. This means that should you for some reason instantiate two games at once they'll mess with each other. It would be better to put them into a constructor <code>__init__(self)</code> (the actual constructor is <code>__new__</code> but you hardly need to edit that so init is generally refered to as constructor). That way every instance has their own instances of these variables.</li>
<li>The names of the variables and general format doesn't conform to <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">PEP8</a>. Some things here are: Docstrings for classes to describe what they do etc.; variables named snake_case (except for globals/constants) and classes CamelCase; two lines between top level classes, functions etc.; double quotes rather than single quotes. Also the variables probably aren't supposed to be manipulated from outside the class so you could tell other programmers so by prefixing them with an underscore "_".</li>
<li>Maybe add some additional abstraction. The board in your case isn't only a board but also includes gamelogic like checking for a win etc.</li>
<li>You're using + for string concatenation/interpolation which is deprecated <code>print('Game over, player ' + choice + ' won the game')</code>. The more modern and also more efficient way would be to use an f-string f"Game over, player {choice} won the game".</li>
<li><p>The block</p>

<pre><code>def tie(self):
    list = []
    for x in self.board:
        if type(x) != int:
            list.append(x)
</code></pre>

<p>could be written as a list comprehension or generator expression: <code>list = [x for x in self.board if type(x) != int]</code>. Or using the <code>filter</code>method: <code>list = list(filter(lambda x: type(x) != int, self.board))</code>. You should also rename <code>list</code> to <code>list_</code> or an actual expressive name saying what it represents here. And in the same function you could just <code>return len(list) == 9</code> since that already is a boolean expression.</p></li>
</ol>

<p>That's it for the board class. Most of the stuff like format, not using class variables etc also applies to the TicTacToe class.</p>

<ol>
<li><code>resetGame(self)</code> should probably be a method on the class so you can do <code>self.reset_game()</code> or similar.</li>
<li>Typo in <code>corretChoice</code> -&gt; <code>correct_choice</code>.</li>
<li><code>b</code> is a really inexpressive variable name for the board. Why don't you name it <code>board</code>? Especially if it's used across the whole class (rather than being just a local variable) that would make the code a lot clearer.</li>
<li><p>You're catching everything here:</p>

<pre><code>try:
    x = int(input(self.choicePlayer1 + ' Where do you want to place your piece? '))
    break
except:
    print('Input has to be a number, try again')
</code></pre>

<p>which is really bad style. It will for example also catch stuff like keyboard interrupts. Since you want to catch errors in the conversion what you probably want is <code>except ValueError:</code>.</p></li>
</ol>

<p>And lastly not really an error but: if the user inputs anything other than <code>n</code> on the "play again?"-prompt it'll restart.</p>

<p>I also feel like the runGame method is way too large - I'll see if I can come up with a clearer solution and post it up here if I can.</p>

<p>EDIT:
I've tried my hand at refactoring you're code:</p>

<pre><code>import os

class Board():
    """Represents the game-board"""
    def __init__(self):
        self.board = [i for i in range(10)]
        self._win_combinations = [
            (1, 2, 3),
            (4, 5, 6),
            (7, 8, 9),
            (1, 5, 9),
            (3, 5, 7),
            (1, 4, 7),
            (2, 5, 8),
            (3, 6, 9)]
        self.game_over = False

    def draw_board(self):
        """Draws the board to the terminal"""
        print("=========")
        print(self.board[7], "|", self.board[8], "|", self.board[9])
        print(self.board[4], "|", self.board[5], "|", self.board[6])
        print(self.board[1], "|", self.board[2], "|", self.board[3])
        print("=========")

    def check_if_won(self, player):
        """Checks if the move the player just made, made him/her win the game"""
        for a, b, c in self._win_combinations:
            if self.board[a] == self.board[b] == self.board[c]:
                print(f"Game over, player {player} won the game")
                self.game_over = True

    def update(self, input, choice):
        """Update the current board"""
        self.board[input] = choice
        os.system("clear")
        self.draw_board()
        self.check_if_won(choice)

    def reset_board(self):
        """Resets the board"""
        self.board = [i for i in range(10)]

    def tie(self):
        """Stops the game if tie"""
        list_ = list(filter(lambda x: type(x) != int, self.board))
        return len(list_) == 9


class TicTacToe():
    def __init__(self):
        os.system("clear")
        self.board = Board()
        self.player_1_char = ""
        self.player_2_char = ""
        self.corret_choice = False
        self.get_player_char()

    def reset(self):
        """Resets the internal state to prepare for a new game"""
        self.player_1_char = ""
        self.player_2_char = ""
        self.board.reset_board()

    def get_player_char(self):
        """Ask the player what character he wants to use and verify choice"""
        while True:
            player_1_char = input("Do you want to play X or O? ")
            print()
            if player_1_char == "X":
                self.player_1_char = "X"
                self.player_2_char = "O"
                print("Starting player selected X")
                break
            elif player_1_char == "O":
                self.player_1_char = "O"
                self.player_2_char = "X"
                print("Starting player selected O")
                break
            else:
                print("ERROR - input has to be either X or O!")
        os.system("clear")

    def get_player_input(self, player_char):
        while True:
            while True:
                x = input(f"{player_char} Where do you want to place your piece?")
                if x.isdigit():
                    x = int(x)
                    break
                else:
                    print("Input has to be a number, try again")

            if x &gt; 0 and x &lt; 10 and type(self.board.board[x]) != str:
                self.board.update(x, player_char)
                break
            elif x == 10:
                quit()
            else: 
                print("Spot is taken, try again: ")

    def check_tie(self):
        if self.board.tie():
            self.board.game_over = True
            print("Game is a tie")
            return True
        return False

    def run(self):
        self.board.draw_board()

        while not self.board.game_over:
            self.correct_player_1 = False
            self.correct_player_2 = False

            self.get_player_input(self.player_1_char)
            if self.board.game_over:
                break
            if self.check_tie():
                break

            self.get_player_input(self.player_2_char)
            if self.board.game_over:
                break
            if self.check_tie():
                break


while True:
    TicTacToe().run()

    user_input = "a"
    while user_input not in "ny":
        user_input = input("Play again? (y/n)").lower()

    if user_input == "y":
        continue
    else:
        break
</code></pre>
    </div>