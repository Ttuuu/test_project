<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I haven't written JavaScript or dealt with Flask for a couple years, but here are some suggestions for the Python code:</p>

<ol>
<li><a href="https://github.com/ambv/black" rel="nofollow noreferrer"><code>black</code></a> can automatically format your code to be more idiomatic.</li>
<li><a href="https://github.com/timothycrosley/isort" rel="nofollow noreferrer"><code>isort</code></a> can group and sort your imports automatically.</li>
<li><p><a href="https://gitlab.com/pycqa/flake8" rel="nofollow noreferrer"><code>flake8</code></a> with a strict complexity limit will give you more hints to write idiomatic Python:</p>

<pre><code>[flake8]
max-complexity = 4
ignore = W503,E203
</code></pre>

<p>That limit is not absolute by any means, but it's worth thinking hard whether you can keep it low whenever validation fails. For example, I'm working with a team on an application since a year now, and our complexity limit is up to 7 in only one place. In your case <code>process_action</code> is a good place to start pulling things apart.</p></li>
<li><p>I would then recommend adding <a href="https://docs.python.org/3/library/typing.html" rel="nofollow noreferrer">type hints</a> everywhere and validating them using a strict <a href="https://github.com/python/mypy" rel="nofollow noreferrer"><code>mypy</code></a> configuration:</p>

<pre><code>[mypy]
check_untyped_defs = true
disallow_untyped_defs = true
ignore_missing_imports = true
no_implicit_optional = true
warn_redundant_casts = true
warn_return_any = true
warn_unused_ignores = true
</code></pre></li>
</ol>

<p>Assuming the above have been taken care of:</p>

<ol>
<li>Variable naming is incredibly important for maintainability. Unfortunately vacuous names like <code>data</code> are common, but I would recommend thinking about them and renaming them to something which is readable. In this case something like <code>request_parameters</code> might be appropriate.</li>
<li>Having two routes to the main page is a bit confusing. I would suggest avoiding future headaches by having only a single canonical URL per page.</li>
<li><a href="https://docs.python.org/3/library/http.html#http.HTTPStatus" rel="nofollow noreferrer">http.HTTPStatus</a> contains values for HTTP status codes, which is more readable than magic values.</li>
<li>Initializing a variable with <code>list()</code> rather than <code>[]</code> is unusual. I don't expect it will actually make any practical difference, but it does stand out a bit.</li>
<li>Rather than <code>print</code>ing I would recommend using <a href="https://docs.python.org/3/library/logging.html" rel="nofollow noreferrer"><code>logging</code></a> instead - it's much more flexible for when you want to move to more production-like log handling.</li>
<li><a href="https://docs.python.org/3.5/library/json.html" rel="nofollow noreferrer"><code>json.dumps</code></a> is preferable to manual string building. It handles things like escaping for you, and also makes it easy for you to deal with Python <code>dict</code>s and <code>list</code>s until the very end.</li>
<li><p>Try to aim for less nesting where possible. Returning early is one way to achieve this. For example,</p>

<pre><code>if 'user' in session:
    [lots of indented code]
else:
    return redirect(url_for("index"))
</code></pre>

<p>could instead be written as</p>

<pre><code>if 'user' not in session:
    return redirect(url_for("index"))
[lots of dedented code]
</code></pre>

<p>. The same technique can be easily applied to <code>validate_username</code>.</p></li>
<li><code>time.sleep</code> is not going to be accepted in production code. Not even for a millisecond. If for whatever reason things don't work when running with the breaks off, debug until it works with the breaks off.</li>
<li>You have some magic values like <code>45</code> in your code. Since it's not obvious what they mean they should either be changed to refer to some third-party constant or be pulled out to a variable or constant clearly indicating what they are.</li>
<li><code>username[len(username) - 1]</code> can be written <code>username[-1]</code>.</li>
<li><p><code>validate_username</code> is either very buggy or extremely confusing. First, it returns either <code>True</code>, <code>False</code> or <code>None</code>, but a method like this should never rely on type coercion. Second, it returns <code>True</code> if a <em>bunch</em> of things are wrong with the username, <code>False</code> in case of <code>ValueError</code>, and <code>None</code> in every other case. Third, since</p>

<pre><code>&gt;&gt;&gt; None is False
False
</code></pre>

<p>almost every weird username will be accepted as valid.</p></li>
</ol>

<p>In conclusion: like most Python code this could benefit from common language patterns and a thorough set of tests.</p>
    </div>