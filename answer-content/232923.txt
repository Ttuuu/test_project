<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Code review</h2>

<p>To start with, some points about your code:</p>

<ul>
<li><p><code>using namespace std;</code> is something I consider a code smell. It doesn't save much time and I find it clearer to see exactly where <code>cout</code> etc. are coming from. Additionally, it clutters your namespace although I myself haven't run into name collisions with the STL being an issue before.</p></li>
<li><p>It looks like your condition to exit the <code>while</code> loop is <code>tempDivMax == divMin</code>. Use this rather than <code>while (true)</code> to make it clearer what behaviour is intended.</p></li>
<li><p>You are also performing two iterations inside a single loop: num is being incremented from 1 until it succeeds and tempDivMax is being decremented until it equals divMin. Split these into separate loops! The code will be clearer to read and will be just as fast. The outer loop I would turn completely into a for loop <code>for (; tempDivMax != divMin; ++num) { ... }</code> and but the inner one I would make a while loop <code>while (tempDivMax &gt; divMin &amp;&amp; num % tempDivMax == 0) { ... }</code> since the long condition expression makes for some rough reading when condensed into a for loop.</p></li>
<li><p>Finally, define your constants before your working variables and declare them as <code>const</code>. I would even do this outside of the main function.</p></li>
</ul>

<p>This leaves you with:</p>

<pre><code>#include &lt;iostream&gt;

const int DIV_MIN = 1;
const int DIV_MAX = 20;

int main() {
    long long num = 1;
    int tempDivMax = DIV_MAX;
    for (; tempDivMax &gt; DIV_MIN; ++num) {
        tempDivMax = DIV_MAX;
        while (tempDivMax &gt; DIV_MIN &amp;&amp; num % tempDivMax == 0) {
            --tempDivMax;
        }
    }

    std::cout &lt;&lt; num &lt;&lt; std::endl;
    return 0;
}
</code></pre>

<h2>A "more elegant" solution...</h2>

<p>== Obligatory code below is untested ==</p>

<p>I'd imagine they're looking for something like this?</p>

<p>For something to be divisible by a number, it must have at least that number's prime factors. Furthermore, in any given number below 20, there can be a maximum of <span class="math-container">$$\lfloor{log_p(20)}\rfloor$$</span> copies of the prime factor <span class="math-container">$$p$$</span></p>

<p>The following snippet calculates the product of these.</p>

<pre><code>#include &lt;iostream&gt;

const int DIV_MAX = 20;
const int[] PRIMES = {2, 3, 5, 7, 11, 13, 17};

int main() {
  int result = 1;
  for (int p : PRIMES) {
    int tmp = 1;
    while (tmp &lt; DIV_MAX) tmp *= p;
    result *= tmp;
  }

  std::cout &lt;&lt; result &lt;&lt; std::endl;
  return 0;
}
</code></pre>
    </div>