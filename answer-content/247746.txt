<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>When entering passwords, you may want to opt for using the <a href="https://docs.python.org/3.8/library/getpass.html#getpass.getpass" rel="noreferrer"><code>getpass</code></a> library. It allows you (if the console supports it) to hide passwords as they're being typed. You'd use <code>getpass.getpass</code> just as you are using <code>input</code> to ask for the password. The only difference is, the password won't show in the console as it's typed.</p>
<hr>
<p>You're using recursion in <code>get_password</code> in order to ask the user again. This isn't a good idea. If the user fails too many times, your program can crash. Just use a loop:</p>
<pre><code>def get_password():
    while True:
        password = input('Enter password: ')
        if len(password) &gt;= 8:
            confirm_password = input('Confirm password: ')
            if password == confirm_password:
                credentials.append(password)
                return
            else:
                print('Password does not match with confirmation\n\n')
        else:
            print('Password too short (min 8 characters)\n\n')
</code></pre>
<p>I'm looping until correct input is entered, then I'm just returning from within the infinite loop.</p>
<p>And the same goes for the rest of your functions. Recursion is great when used properly, but it carries more problems than most other looping methods. Use it in cases where it's appropriate (like when the problem itself is recursive), not just for general looping.</p>
<hr>
<p><code>add_credentials</code> would be safer if it used a <code>with</code> block to close the file for you:</p>
<pre><code>def add_credentials_to_database():
    credentials_file = os.path.join(database_path, f'{credentials[0]}.txt')
    with open(credentials_file, 'w') as file:
        file.write(credentials[1])
    print('Account created successfully\n\n')
    initialize()
</code></pre>
<p>Now, even if an error were to happen half-way through the function, there's a greater chance that the file would be closed. Making a practice of using <code>with</code> also prevents you from forgetting to add a call to <code>file.close()</code>.</p>
<hr>
<p>At the top you have:</p>
<pre><code>credentials = []
database_path = "C:\\Users\\filip\\PycharmProjects\\database"
database = os.listdir(database_path)
</code></pre>
<p>A few things to note:</p>
<ul>
<li><p><code>credentials</code> shouldn't be a global here. Global mutable states (which <code>credentials</code> is) tend to complicate code and make it harder to understand. In this set up, I would probably make <code>credentials</code> a local variable of <code>initialize</code>, have <code>get_password</code> and the like to <code>return</code> the data instead of adding it to the list directly, and manually pass that data to <code>add_credentials_to_database</code>.</p>
</li>
<li><p><code>database_path</code> is a module-level constant, and as such should be in upper-case like <code>DATABASE_PATH</code> according to <a href="https://www.python.org/dev/peps/pep-0008/" rel="noreferrer">PEP8</a>.</p>
</li>
<li><p>Arguably <code>database</code> is also (effectively) constant, so it should also be in upper-case.</p>
</li>
</ul>
<hr>
<p>In <code>initialize</code>, I would get rid of the <code>int</code> conversion of <code>choose_option</code>. All the call to <code>int</code> is doing is allowing for a <code>ValueError</code> to be raised if the user enters in a dumb menu option like <code>"a"</code>. Just use the raw string value and compare against it:</p>
<pre><code>choose_option = input('0. Exit\n1. Login\n2. Sign up\n\nOption: ')
if choose_option == "1":
    . . .
</code></pre>
<p>If you actually needed it as an integer to do math on it or something, it would be different. It's simply an "indicator value" though, so the type of <code>choose_option</code> doesn't really matter, and keeping it as a string has less problems.</p>
<hr>
<hr>
<p>And my favorite projects that I still do whenever I learn a new language are:</p>
<ul>
<li>A na√Øve, bruteforce prime number finder (and then maybe a sieve). Fairly basic.</li>
<li>Conway's Game of Life. Harder, and has the potential to turn into a large project.</li>
<li>A Mandelbrot Set image generator. Even harder, and usually becomes a larger project.</li>
</ul>
    </div>