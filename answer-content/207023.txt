<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I was able to massively improve the performance by incorporating two changes:</p>

<ol>
<li>Work backwards, to avoid calling <code>pop(some_index)</code> mid-list. For a large <code>list</code>, mid-list pops are nasty.</li>
<li>Create a lookup table with the relevant <code>CellRanges</code> to inspect, as a <code>dict</code> keyed by the maximum row. Since I'm walking backwards, I want to be able to easily find all CellRanges that are in a row immediately above the one I'm working with.<br>
This same key works well for growing within a row, as any eligible CellRanges have to have the same <code>max_row</code> as the one being worked with.</li>
</ol>

<p>This approach actually entirely obviates the need for a mid-list pop, through the use of a <code>set</code> that stores which <code>CellRanges</code> have been used already. It's possible I could further modify the method to avoid popping.</p>

<p>The new performance graph:</p>

<p><a href="https://i.stack.imgur.com/QIp30.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/QIp30.png" alt="enter image description here"></a></p>

<p>There are considerably more recursions of the same input if the growth steps are not done in reverse (since only the last of the elements in the dict key will match). Adding in a reversal of the elements of <code>cr_dict</code> yields this graph:</p>

<p><a href="https://i.stack.imgur.com/FWHg4.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/FWHg4.png" alt="enter image description here"></a></p>

<p>With the same input, I can now process ~24,000 <code>CellRange</code> per second immediately (compared to ~15 in the original code).</p>

<pre><code>def collapse_cellranges(ranges: list):
    '''Attempt to combine the given CellRanges. Recursive, since a grown range
    may not be combinable with the constituents of the next range until that
    range has been processed too'''
    start_count = len(ranges)

    # Sort the input, to ensure a logical ordering of the CellRanges.
    ranges.sort(key=cellrange_sort_key)

    # Construct a dict with the relevant information for smart adjacency checks
    cr_dict = {}
    for cr in ranges:
        cr_dict.setdefault(cr.max_row, []).append(cr)
    # Reverse the lists once, rather than using reverse iterators each time.
    for val in cr_dict.values():
      val.reverse()
    # Consume a CellRange only once.
    used = set()

    kept = []
    while ranges:
        # Start from the end, to limit list reindexing.
        rg: CellRange = ranges.pop()
        while ranges and str(rg) in used:
            rg = ranges.pop()
        if str(rg) in used:
            break
        used.add(str(rg))

        # Attempt to grow `rg` horizontally
        row_merge_candidates = cr_dict.get(rg.max_row, [])
        for cr in row_merge_candidates:
            if str(cr) not in used and __range_is_adjacent(rg, cr):
                used.add(str(cr))
                rg = rg.union(cr)

        # Attempt to grow `rg` vertically
        while rg.min_row - 1 in cr_dict:
            grew = False
            col_merge_candidates = cr_dict.get(rg.min_row - 1, [])
            for cr in col_merge_candidates:
                if str(cr) not in used and __range_is_adjacent(rg, cr):
                    used.add(str(cr))
                    rg = rg.union(cr)
                    grew = True
            if not grew:
                break

        kept.append(rg)

    # Add the kept CellRanges back to the input list object.
    for cr in reversed(kept):
        ranges.append(cr)
    # Recurse if needed:
    kept_count = len(kept)
    if kept_count &gt; 1 and kept_count &lt; start_count:
        collapse_cellranges(ranges)
    else:
        return
</code></pre>

<p>(The implementation of <code>CellRange</code> as of openpyxl v2.5.9 is not hashable, so <code>str</code> is used to obtain a hashable representation.)</p>
    </div>