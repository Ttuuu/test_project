<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>There's too much state</h1>
<p>Each queue has four mutexes, four counters and two condition variables. That is way too much. You could do this with just a single mutex and condition variable.</p>
<p>In your <code>push()</code> function, you first have to hold a mutex at least once to check if there are empty slots (if not, you have to wait for a condition variable to be signalled, which means multiple calls the mutex lock and unlock functions), then you have to hold a mutex to update the write location, and then hold the mutex to increment the filled slots semaphore. Locking and unlocking a mutex, despite being quite optimized, is still not free.</p>
<p>Another issue is the duplication of information of the state of the queue. There's <code>m_filledSlots</code>, <code>m_emptySlots</code> (which should be the inverse), and the same information is also present in the difference between the read and write locations. And you have to keep everything updated.</p>
<p>If you just take one lock, check the read and write pointers to see how many free slots there are in the queue, wait for the condition variable if necessary, then update the read or write pointer, signal the variable if necessary, and then unlock, you have spent much less cycles than with this approach with semaphores.</p>
<h1>Making <code>pop()</code> return the value</h1>
<p>You can just write:</p>
<pre><code>T pop() {
    ...
    T value = m_data[m_readLoc++];
    ...
    return value;
}
</code></pre>
<p>Even though it looks like there is a temporary variable that would require an extra copy, the compiler can perform <a href="https://en.cppreference.com/w/cpp/language/copy_elision" rel="nofollow noreferrer">return value optimization</a> here, which is mandatory in C++17, and which most compilers have been doing already for much longer.</p>
<h1>Pointers moving when containers grow</h1>
<p>Indeed, a <code>std::vector</code> will move its contents in memory if it grows. However, there are other container classes that you can use that do guarantee that elements already in the container will keep their address, even if it needs to allocate more memory. Amongst them are <a href="https://en.cppreference.com/w/cpp/container/list" rel="nofollow noreferrer"><code>std::list</code></a> and <a href="https://en.cppreference.com/w/cpp/container/deque" rel="nofollow noreferrer"><code>std::deque</code></a>. There are also container adapter classes such as <a href="https://en.cppreference.com/w/cpp/container/queue" rel="nofollow noreferrer"><code>std::queue</code></a> that by default use a <code>std::deque</code> for storage, and thus inherit its properties.</p>
<h1>Signalling that production ended</h1>
<p>There are two common ways to do this. First is to add a flag variable to your blocking queue class that signals that the producers finished. This flag is set, and then the condition variable that the consumers listen for is broadcast to. Consumers should check this flag each time they want to dequeue an item. If it's set, they can terminate.</p>
<p>The other way is to have some way to enqueue an item that signals that no more data will be coming. If your queue contains pointers to objects, enqueueing a <code>nullptr</code> might suffice. Again, the condition variable should be broadcast, and a consumer should not actually pop this item from the queue, so that other consumers also get a chance to see it. Alternatively, you have to enqueue as many of these special items as there are consumer threads.</p>
<h1>Timeouts</h1>
<blockquote>
<p>Another issue is what if one partner does not respond for a while. I can't really free the queue since there is no guarantee that the partner wouldn't come back later and write into bad memory. What's the best way to handle it and abort the operation?</p>
</blockquote>
<p>I'm not sure what you mean by "partner". Is it a consumer or a producer thread? In any case, you can only delete the queue if no threads are left that could read or write from it. You could kill threads that don't respond in time, but it is very hard to do this in a safe way. The best way is to ensure these threads never take too much time to produce or consume an item to begin with.</p>
    </div>