<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>General points</h2>

<ul>
<li><p>I think that multi line declarations are poor practice and can easily lead to global declarations if you have a miss placed <code>;</code> and don't use the <code>"use strict"</code> directive.</p></li>
<li><p>As the DOM interface is rather verbose you can create some helper functions to reduce the amount of noise in your code and save yourself the trouble of having to repeat the same thing over and over.. </p></li>
<li><p>Avoid inserting HTML directly via JavaScript, it is incredibly slow compared to using <code>document.createElement</code>, <code>appendChild</code>, etc...</p></li>
<li><p>Do not change the cursor to a pointer if there is nothing to click. </p></li>
<li><p>Rather than have an empty box (it is meaningless) put a question mark in there and create a box around it via CSS rule border..</p></li>
</ul>

<h2>Helper functions</h2>

<p>Example of helper functions to do some common tasks. I never use jQuery and thus name the functions tag to $ and append to $$ to further reduce the code noise.</p>

<pre><code>const query = (qStr, parent = document) =&gt; parent.querySelector(qStr);
const style = (element, style) =&gt; (Object.assign(element.style, style), element);
const tag = (tag, props = {}) =&gt; Object.assign(document.createElement(tag), props);
const append = (parent, ...sibs) =&gt; sibs.reduce((p, sib) =&gt; (p.appendChild(sib), p), parent);
</code></pre>

<p><strong>Note</strong> that each function returns an element so can be used as an argument for tag and append. There are many more helpers you can create to reduce the code verbosity.</p>

<p>or when not using jQuery</p>

<pre><code>// $ creates tag, <span class="math-container">$$ appends elements
const query = (qStr, parent = document) =&gt; parent.querySelector(qStr);
const style = (element, style) =&gt; (Object.assign(element.style, style), element);
const $ = (tag, props = {}) =&gt; Object.assign(document.createElement(tag), props);
const $$</span> = (parent, ...sibs) =&gt; sibs.reduce((p, sib) =&gt; (p.appendChild(sib), p), parent);
</code></pre>

<h2>Example</h2>

<p>With these function you can then simplify your code to</p>

<pre><code>addImageCaption(query(".full-width-image-atf img"));  
function addImageCaption(img) {
    <span class="math-container">$$(img.parentNode,
        $$</span>(style($("div", {className:"image-caption-wrap"}), {background: "none"}), 
            $("span", {className:"image-caption", textContent: img.alt})
        )
    );
}
</code></pre>

<h2>Demo</h2>

<p><strong>Note</strong> that the CR snippet will not work when it contains the string $$</p>

<p></p><div class="snippet" data-lang="js" data-hide="true" data-console="true" data-babel="false">
<div class="snippet-code snippet-currently-hidden">
<pre class="snippet-code-js lang-js prettyprint-override"><code>"use strict";
 
setTimeout(()=&gt; addImageCaption(query(".full-width-image-atf img")), 0);

function addImageCaption(img) {
    append(img.parentNode,
        append(style($("div", {className:"image-caption-wrap"}), {background: "none"}), 
            $("span", {className:"image-caption", textContent: img.alt})
        )
    );
}


// DOM helpers 
const query = (qStr, parent = document) =&gt; parent.querySelector(qStr);
const style = (element, style) =&gt; (Object.assign(element.style, style), element);
const $ = (tag, props = {}) =&gt; Object.assign(document.createElement(tag), props);
const append=(par, ...sibs)=&gt;sibs.reduce((p, sib)=&gt;(p.appendChild(sib), p), par);</code></pre>
<pre class="snippet-code-css lang-css prettyprint-override"><code>img {width: 100%}
.full-width-image-atf .content-main-image {
  position: relative;
  color: #fff;
}

.full-width-image-atf .image-caption-wrap {
  position: absolute;
  top: 0;
  right: 0;
  display: flex;
  flex-flow: row-reverse;
  align-items: center;
  padding: 15px 20px;
}
.full-width-image-atf .image-caption-wrap:before {
  content: '?';
  padding-left: 5px;
  padding-right: 5px;
  border: 1px solid white;
}
.full-width-image-atf .image-caption {
  opacity: 0;
  padding-right: 10px;
}
.full-width-image-atf .image-caption-wrap:hover .image-caption {
  opacity: 1;
}
.full-width-image-atf .image-caption-wrap:hover {
  background: black !important;
  cursor: help;
}
.full-width-image-atf .content-main-image, .full-width-image-atf .content-main-image * { transition: 0.4s ease all }</code></pre>
<pre class="snippet-code-html lang-html prettyprint-override"><code>&lt;div class='full-width-image-atf'&gt;
  &lt;div class="content-main-image"&gt;
    &lt;img src="https://static.independent.co.uk/s3fs-public/thumbnails/image/2018/12/31/10/lion-face.jpg?w968h681" alt="This image is of a lion."&gt;
  &lt;/div&gt;
&lt;/div&gt;</code></pre>
</div>
</div>

    </div>