<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><em>I guess that my code needs a review too, because I am by far no good python programmer, but I wanted to share some of my ideas to solve your probelm that do not fit in a comment. So I hope at least the approach is some optimization to your code, if it is not the code itself.</em></p>

<hr>

<p>I looked a bit on the function and thought that there must be an easier way to calculate it. So what I do here is:</p>

<p><span class="math-container">$$\textrm{weighted_nutrients} = \frac{(m \odot c)^\top \cdot n}{m^\top \cdot c}=\frac{\{\sum_j^M(m_j \times c_j) \times n_{jk}\}_{k=1 \ldots M}}{\sum_j^M(m_j \times c_j)}$$</span></p>

<p>with <span class="math-container">\$m\$</span> being the amount of each foods (1 apple, 2 peaches, ... <span class="math-container">\$\rightarrow\$</span> <code>[1,2,...]</code>), <span class="math-container">\$M\$</span> being the amount of foods (67 foods available), <span class="math-container">\$c\$</span> the kcals, <span class="math-container">\$n\$</span> the nutrients and <span class="math-container">\$\odot\$</span> is element-wise multiplication. The result is a vector that needs to be summed up for the base value. It gets squared as the balance's numerator is the same. For the maximum in the balance, we can simply plug it in, as it is a vector from which a maximum can be chosen. The result looks in principle like this:
<span class="math-container">$$\textrm{SP} = \textrm{sum}(\textrm{weighted_nutrients})^2 \cdot \frac{0.5}{\max(\textrm{weighted_nutrients})} + 12$$</span>
Now as I write it, I think it looks even better like this:
<span class="math-container">$$\textrm{SP} = \frac{1}{2} \cdot \frac{\textrm{sum}(\textrm{weighted_nutrients})^2}{\max(\textrm{weighted_nutrients})} + 12$$</span></p>

<p>What should be done with this function now?</p>

<p>As you did, I wrote a function using itertools and a lot of possible combinations which luckily starts with the high calory foods, which give quite good results from the beginning. But as you found out yourself, you will be very old when/if the code ever finishes.
Therefore, I chose a genetic algorithm to solve the problem as for my untrained eyes, this looked like a nice way. On the other hand I always wanted to use a GA to solve a problem ... :D</p>

<pre><code>#!/usr/bin/env python3
import numpy as np
import itertools as it
from deap import base, creator, tools, algorithms
import random


def generate_function(skill_gain_multiplier=1, base_skill_gain=12):
    # read in the foods
    names, nutrients, calories = give_food()

    # define skill_point function
    def skill_points(amounts):
        numerator = (amounts * calories).dot(nutrients)
        denominator = amounts.dot(calories)
        weighted_nutrients = np.divide(numerator, denominator)
        base_value = np.sum(weighted_nutrients) ** 2
        balance_modifier = (
            0.5 * 1 / np.max(weighted_nutrients) * skill_gain_multiplier
        )
        result = base_value * balance_modifier + base_skill_gain
        return result

    # define calory check function
    def calory_check(amounts):
        calory_count = amounts.dot(calories)
        return calory_count

    return names, skill_points, calories, calory_check


def give_food():
    available = [
        "Fiddleheads/3/1/0/3/80",
        "Fireweed Shoots/3/0/0/4/150",
        "Prickly Pear Fruit/2/1/1/3/190",
        "Huckleberries/2/0/0/6/80",
        "Rice/7/1/0/0/90",
        "Camas Bulb/1/2/5/0/120",
        "Beans/1/4/3/0/120",
        "Wheat/6/2/0/0/130",
        "Crimini Mushrooms/3/3/1/1/200",
        "Corn/5/2/0/1/230",
        "Beet/3/1/1/3/230",
        "Tomato/4/1/0/3/240",
        "Raw Fish/0/3/7/0/200",
        "Raw Meat/0/7/3/0/250",
        "Tallow/0/0/8/0/200",
        "Scrap Meat/0/5/5/0/50",
        "Prepared Meat/0/4/6/0/600",
        "Raw Roast/0/6/5/0/800",
        "Raw Sausage/0/4/8/0/500",
        "Raw Bacon/0/3/9/0/600",
        "Prime Cut/0/9/4/0/600",
        "Cereal Germ/5/0/7/3/20",  # test
        "Bean Paste/3/5/7/0/40",
        "Flour/15/0/0/0/50",
        "Sugar/15/0/0/0/50",
        "Camas Paste/3/2/10/0/60",
        "Cornmeal/9/3/3/0/60",
        "Huckleberry Extract/0/0/0/15/60",
        "Yeast/0/8/0/7/60",  # test
        "Oil/0/0/15/0/120",
        "Infused Oil/0/0/12/3/120",
        "Simple Syrup/12/0/3/0/400",
        "Rice Sludge/10/1/0/2/450",
        "Charred Beet/3/0/3/7/470",
        "Camas Mash/1/2/9/1/500",
        "Campfire Beans/1/9/3/0/500",
        "Wilted Fiddleheads/4/1/0/8/500",
        "Boiled Shoots/3/0/1/9/510",
        "Charred Camas Bulb/2/3/7/1/510",
        "Charred Tomato/8/1/0/4/510",
        "Charred Corn/8/1/0/4/530",
        "Charred Fish/0/9/4/0/550",
        "Charred Meat/0/10/10/0/550",
        "Wheat Porridge/10/4/0/10/510",
        "Charred Sausage/0/11/15/0/500",
        "Fried Tomatoes/12/3/9/2/560",
        "Bannock/15/3/8/0/600",
        "Fiddlehead Salad/6/6/0/14/970",
        "Campfire Roast/0/16/12/0/1000",
        "Campfire Stew/5/12/9/4/1200",
        "Wild Stew/8/5/5/12/1200",
        "Fruit Salad/8/2/2/10/900",
        "Meat Stock/5/8/9/3/700",
        "Vegetable Stock/11/1/2/11/700",
        "Camas Bulb Bake/12/7/5/4/400",
        "Flatbread/17/8/3/0/500",
        "Huckleberry Muffin/10/5/4/11/450",
        "Baked Meat/0/13/17/0/600",
        "Baked Roast/4/13/8/7/900",
        "Huckleberry Pie/9/5/4/16/1300",
        "Meat Pie/7/11/11/5/1300",
        "Basic Salad/13/6/6/13/800",
        "Simmered Meat/6/18/13/5/900",
        # "Vegetable Medley/9/5/8/20/900", outdated values
        "Vegetable Medley/8/4/7/17/900",
        "Vegetable Soup/12/4/7/19/1200",
        "Crispy Bacon/0/18/26/0/600",
        "Stuffed Turkey/9/16/12/7/1500",
    ]

    all_names = []
    all_nutrients = []
    all_calories = []
    for item in available:
        name, *nutrients, calories = item.split("/")
        all_names.append(name)
        nutrients = [float(x) for x in nutrients]
        all_nutrients.append(nutrients)
        all_calories.append(float(calories))
    return np.array(all_names), np.array(all_nutrients), np.array(all_calories)


def brute_force(names, f, calory_check, cals):
    # create every possible combination
    combinations = it.product(range(2), repeat=len(names))

    best = 0.0
    cnt = 0
    for comb in combinations:
        # calculate value
        comb = np.array(list(comb))
        new = f(comb)
        # if better, replace best
        if new &gt; best and calory_check(comb):
            best = new
            print(
                [x for x in zip(names, comb) if x[1] != 0], new, comb.dot(cals)
            )
        # show current iteration ... of quite a few
        else:
            sys.stdout.write(f"\r{cnt}")
            sys.stdout.flush()
        cnt += 1


# the genetic algorithm is very simply based on the tutorials here:
#    https://deap.readthedocs.io/en/master/examples/index.html
def genetic_algorithm(
    fitness_function,
    cal_chk,
    array_size,
    population_size=300,
    max_iterations=250,
):
    creator.create("FitnessMax", base.Fitness, weights=(1.0,))
    creator.create("Individual", np.ndarray, fitness=creator.FitnessMax)

    toolbox = base.Toolbox()

    # Attribute generator
    toolbox.register("attr_bool", random.randint, 0, 1)

    # Structure initializers
    toolbox.register(
        "individual",
        tools.initRepeat,
        creator.Individual,
        toolbox.attr_bool,
        array_size,
    )
    toolbox.register("population", tools.initRepeat, list, toolbox.individual)

    def cxTwoPointCopy(ind1, ind2):
        """Execute a two points crossover with copy on the input individuals. The
        copy is required because the slicing in numpy returns a view of the data,
        which leads to a self overwritting in the swap operation. It prevents
        ::

            &gt;&gt;&gt; import numpy
            &gt;&gt;&gt; a = numpy.array((1,2,3,4))
            &gt;&gt;&gt; b = numpy.array((5.6.7.8))
            &gt;&gt;&gt; a[1:3], b[1:3] = b[1:3], a[1:3]
            &gt;&gt;&gt; print(a)
            [1 6 7 4]
            &gt;&gt;&gt; print(b)
            [5 6 7 8]
        """
        size = len(ind1)
        cxpoint1 = random.randint(1, size)
        cxpoint2 = random.randint(1, size - 1)
        if cxpoint2 &gt;= cxpoint1:
            cxpoint2 += 1
        else:  # Swap the two cx points
            cxpoint1, cxpoint2 = cxpoint2, cxpoint1

        ind1[cxpoint1:cxpoint2], ind2[cxpoint1:cxpoint2] = (
            ind2[cxpoint1:cxpoint2].copy(),
            ind1[cxpoint1:cxpoint2].copy(),
        )

        return ind1, ind2

    # cutoff function was needed, as initial guesses were all above 3000 kcal
    # and no solution could be found. with the smooth cutoff function, the results
    # are pushed below 3000 kcal, which is where they belong.
    # not sure if this is smart or just overshot :D
    def cutoff(individual):
        return 0.5 - 0.5 * np.tanh((cal_chk(individual) - 3000) / 5000)

    # return the cutoff value if higher than 3000
    # and the true value if lower
    def evalFit(individual):
        if cal_chk(individual) &lt;= 3000:
            return (fitness_function(individual),)
        else:
            return (cutoff(individual),)

    # toolbox.register("evaluate", evalOneMax)
    toolbox.register("evaluate", evalFit)
    toolbox.register("mate", tools.cxTwoPoint)
    toolbox.register("mutate", tools.mutFlipBit, indpb=0.05)
    toolbox.register("select", tools.selTournament, tournsize=3)

    # Creating the population
    def main():
        pop = toolbox.population(n=population_size)
        hof = tools.HallOfFame(5, similar=np.array_equal)
        stats = tools.Statistics(lambda ind: ind.fitness.values)
        stats.register("avg", np.mean)
        stats.register("std", np.std)
        stats.register("min", np.min)
        stats.register("max", np.max)

        pop, log = algorithms.eaSimple(
            pop,
            toolbox,
            cxpb=0.5,
            mutpb=0.5,
            ngen=max_iterations,
            stats=stats,
            halloffame=hof,
            verbose=True,
        )

        return pop, log, hof

    return main


if __name__ == "__main__":
    # generating the functions
    names, f, cals, calory_check = generate_function()

    # not recommended
    # brute_force(names, f, calory_check, cals)

    # probably better
    ga = genetic_algorithm(
        f, calory_check, len(names), max_iterations=500, population_size=500
    )
    pop, log, hof = ga()

    # printing the result
    print("\n########\n# DONE #\n########")
    for star in hof[1:]:
        [print(i, s) for i, s in zip(star, names) if i &gt; 0]
        print(f"which has {calory_check(star)} kcal")
        print(f"and gives a SP of {f(star)}\n---\n")
</code></pre>

<p>and the result is something like this:</p>

<pre><code>1 Vegetable Soup
1 Stuffed Turkey
which has 2700.0 kcal
and gives a SP of 87.34734734734735
---

1 Cereal Germ
1 Vegetable Soup
1 Stuffed Turkey
which has 2720.0 kcal
and gives a SP of 87.04413748413035
---

1 Bean Paste
1 Vegetable Soup
1 Stuffed Turkey
which has 2740.0 kcal
and gives a SP of 87.01479581771551
---

1 Flour
1 Vegetable Soup
1 Stuffed Turkey
which has 2750.0 kcal
and gives a SP of 86.9337837837838
---
</code></pre>

<p>87.347 is the highest I found so far. Sometime the algorithm gets stuck at a lower value, you may need to play around with the parameters of the GA to get a faster/better/more robust result. But as the code is very fast, maybe just run it multiple times and see which result is the highest.</p>
    </div>