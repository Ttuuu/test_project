<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your algorithm does seem to work, but it is very complex.  You are pushing <code>nullptr</code> onto the stack when a node has only one child, so you have to check for <code>x != nullptr</code> (which you do),   and if the top of the stack is <code>nullptr</code> (which again, you do).</p>

<p>A better approach would be:</p>

<ul>
<li>start with an empty vector</li>
<li>start with an empty stack</li>
<li>start with root as the current node</li>
<li>while you are at a valid node, or if the stack is not empty:

<ul>
<li>if you are at a valid node:

<ul>
<li>if it has a left child,

<ul>
<li>push the current node onto the stack</li>
<li>move to the left child.</li>
</ul></li>
<li>otherwise (it doesn't have a left child)

<ul>
<li>append its value to your vector</li>
<li>move to the right child (even if it doesn't exist)</li>
</ul></li>
</ul></li>
<li>otherwise (you have moved to a <code>nullptr</code>):

<ul>
<li>pop a node from the stack</li>
<li>append its value to your vector</li>
<li>move to the right child (even if it doesn't exist)</li>
</ul></li>
</ul></li>
</ul>

<p>Notice you never push a <code>nullptr</code> onto the stack.  You never need to push a node onto the stack unless you need to return to it.  When you do return to it, you immediately process it by appending its value and moving to its right child.</p>

<p>Also notice that an empty tree is no longer a special case.  </p>
    </div>