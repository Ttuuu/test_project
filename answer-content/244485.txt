<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First of all, to get that out of the way, I despise <code>var</code> and static imports. For me, it makes the code an unreadeable mess that looks like javascript. You would not be allowed to do that on my team.</p>
<p>Now regarding the concrete code:</p>
<ul>
<li>It is not a CSV reader. For real csv, you'd need a quote character and a way to escape the quote. Usually this is done via doubling the quote character in a quoted sequence. (This is so silly, that csv is a traditional example of how-not-to-design-a-file-format.)</li>
<li>Using an annotated constructor is severely limited. The csv-reader should rather expect a class adhering to the java bean standard (i.e. default constructer and getters/setters) to be of practical use. (OK, this invalidates the idea to practice working with annotations, but all of a sudden, you could use it for classes which have not specifically crafted for this csv-reader.) Maybe you could implement alternatives?</li>
<li>The delimiter char should be settable.</li>
<li>Instead of <code>s -&gt; s</code>, use <code>Function.identity()</code></li>
<li>I would recommend to extract the reflection-based analysis to some preparation stage, so that you don't have to repeat it for every single line in your data file. Take a few measurements, I wager that this is the second slowest part in the program right after file I/O.</li>
<li><code>e.printStackTrace()</code> - come on, there must be a better way to handle errors.</li>
<li>Making local variables <code>final</code> serves no purpose at all. We can plainly see that you don't set the values a second time, and even if you did, the reader would not care. Sometimes you need this for use in a lambda or inner class, but usually this is just noise.</li>
</ul>
    </div>