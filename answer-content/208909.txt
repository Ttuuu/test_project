<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There isn't a whole lot of code here, so I'll just point out what I see top-to-bottom. I'll note though that I'm exceedingly tired and don't fully understand what the problem you're solving is, so I'll just be commenting on aspects of language usage:</p>

<hr>

<p>Your file starts as <code>(require 'clojure.set)</code>. Every Clojure file should start with a call to the <a href="https://clojuredocs.org/clojure.core/ns" rel="nofollow noreferrer"><code>ns</code> macro</a> that creates a namespace matching your file's position under the source file of the project. If this file was at <code>PROJECTFOLDER/src/subfolder/my_file.clj</code>, the file should start with</p>

<pre><code>(ns subfolder.my-file)
</code></pre>

<p>This allows your file to be properly included by other files.</p>

<p>You have a call to <code>require</code> also though. This can neatly be added to the <code>ns</code> call:</p>

<pre><code>(ns subfolder.my-file
  (:require [clojure.set]))
</code></pre>

<p>You aren't even taking advantage of the <code>require</code> though; you can call <code>clojure.set/intersection</code> even without the require. With the require, you can write <code>set/intersection</code>. That's not as nice as it could be though. If you use <code>:as</code>, you can shorten the uses further:</p>

<pre><code>(ns subfolder.my-file
  (:require [clojure.set :as s])) ; Aliasing the set namespace as s

(s/intersection ...) ; Works!
</code></pre>

<hr>

<p><code>(def not-empty? (complement empty?))</code></p>

<p>You seem to already be familiar with functional languages. Do you know Haskell? While it's certainly OK to write this function like this, as a <code>complement</code> of another, after a lot of messing around, I've found it's better to just write it out fully in <em>most</em> cases:</p>

<pre><code>(defn not-empty? [coll]
  (not (empty? coll)))
</code></pre>

<p>Why? Because now when you <code>ctrl+q</code> it in a good IDE, you get a nice documentation summary that includes the parameter names. For a case like this, most people will immediately know what <code>not-empty?</code> does. For more complicated cases though, you may find that writing out the full <code>defn</code> leads to easier to understand code and generated documentation. Remember the mantra: "code is read more often than it's written". Don't make code harder to understand just to save a few keystrokes.</p>

<p>Really though, do you need this at all? <code>(not (empty? coll))</code> is arguably just as readable as <code>(not-empty? coll)</code>. You also only use it once, and can simply reverse the bodies of the <code>if</code> where it's used. I remember reading that negations (<code>not</code>) should be avoided when possible, as they're slightly hard to comprehend. Even if you did want to have the <code>if</code> bodies in that particular order, you could use <code>(if-not (empty? coll)...)</code> instead. </p>

<p>Nice idiomatic naming though. Your use of dash-naming and <code>?</code> suffixes are completely appropriate here and idiomatic.</p>

<hr>

<p><code>(def input-lines (line-seq (clojure.java.io/reader "input.in")))</code></p>

<p>Nothing overly wrong here. Of course, hard coding the file path right inside the <code>def</code> isn't necessarily ideal, but for a toy program like this, it's understandable.</p>

<p>This makes your program impossible to test on my end though, as I have no clue what data you're using. I'm unable to run your program, so I'll simply be "translating" between concepts that should be equivalent. </p>

<hr>

<p>Your IIFE (Immediately invoked function expression; a term from Javascript) is a little odd here. I can't say I've ever seen code like this. This has a few downsides:</p>

<ul>
<li><p>Lisp writers can get a little off-put by seeing <code>((</code>. Often, two opening brackets beside each other either means some fancy is going on, or you have a bug waiting to be run. In this case, it's the former, but it doesn't <em>look</em> ideal.</p></li>
<li><p>This entire chunk of code has no name associated with it at all! You have the entire main part of your program top-level as a self-calling anonymous function call. This gives no hints as to what this chunk of code is doing</p></li>
<li><p>Having top level expressions that do a lot of work is a problem when developing with a REPL. When I load this into IntelliJ, every time I reload the file, the whole thing runs! Ideally, you should be manually invoking code from the file instead of having the code in the file run when the file is simply loaded.</p></li>
</ul>

<p>I would, at the very least, change this to:</p>

<pre><code>(defn main-routine [ids seen-patterns]
  (when (empty? ids)
    (throw (Exception. "Didn't find match")))

  (let [[next-id &amp; other-ids] ids
        match-patterns (get-match-patterns next-id)
        matches (s/intersection match-patterns seen-patterns)]
    (if (not-empty? matches)
      (prn (apply str (filter #(not= \* %) (first matches))))
      (recur other-ids (apply conj seen-patterns match-patterns)))))

(defn main []
  (main-routine input-lines #{}))
</code></pre>

<p>Now you have a little more control regarding when your program actually executes.</p>

<hr>

<p>While straight recursion is usually fine, Clojure has <code>loop</code> that makes ""recursion"" simpler in some cases. Your code looks like it could be rewritten as:</p>

<pre><code>(defn main-routine [ids seen-patterns]
  (loop [[next-id &amp; other-ids] ids]
    (if next-id ; next-id will be nil if ids is empty
      (let [match-patterns (get-match-patterns next-id)
            matches (s/intersection match-patterns seen-patterns)]
        (if (not-empty? matches)
          (prn (apply str (filter #(not= \* %) (first matches))))
          (recur other-ids (apply conj seen-patterns match-patterns))))

      ; This should be a more specific exception.
      ; It also might just be appropriate to return nil, indicating failure.
      (throw (Exception. "Didn't find match")))))
</code></pre>

<p>The gain in this scenario isn't huge though, if there's any at all. I just wanted to point out the existence of <code>loop</code> since I often see it ignored, even though it's exceedingly helpful when doing complicated, multi-accumulator reductions.</p>

<hr>

<p>This is very good code though, especially for someone new to the language. Except for your lack of <code>ns</code> (and even that isn't necessary here), everything I saw is mostly nitpicking. I look forward to seeing more review requests from you.</p>
    </div>