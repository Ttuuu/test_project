<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>API</h2>

<p>I really don't like the returning of the cached value as <code>int[]</code>. Anyone who recieves this return value is free to modify it, and there is no indication that it might be returned multiple times. At the very least, this code should be returning an immutable view of the array (e.g. an <code>IReadOnlyList&lt;int&gt;</code>), but if you really want to cache the results, then I would probably clone the array every time it was returned.</p>

<p>I don't like that you have public methods which take the root nodes defaulted as <code>null</code> (e.g. <code>Delete</code>). It would be nicer to make these methods private (so they can't be used) and static (so they know the minimum necessary and can't accidently mess with state) without a default parameter, and provide public members which don't take a parameter, and pass the root to the parameterised methods. Of course, you may want to deliberately expose the capability, but in that case, it is possible for one <code>BSTree</code> to operate on another tree's <code>Node</code>s, and that is a receipe for confusion.</p>

<p>Generally, you are opening a serious can of worms when you expose implementation details like your <code>Node</code> class to the world, because anyone can modify a <code>Node</code> from the <code>BST</code> and ruin the data-structure: if you don't need to expose this information, then do not. If you want a data-structure that can support crazy usage, then you need to document it is as such. Any <code>Node</code>s that have been handed out may be invalidated the moment you perform any operation on the <code>BST</code>.</p>

<p>You might consider making your class generic, so that it can store any value, and not just integers.</p>

<h2>Correctness</h2>

<p>The <code>BreathFirstSearch</code> isn't a breadth-first search.</p>

<p>This code in <code>Delete</code> looks suspect:</p>

<pre><code>node.value = node.left.value;
node.left = node.left.left;
node.right = node.left.right;
</code></pre>

<p><code>Smalest</code> is over complicated, keeping track of the same piece of state in 2 variables. It looks wrong, since it will return <code>null</code> if the <code>root</code> has no left-child. This causes <code>Delete</code> to crash under some cirsumstances (e.g. replace the first call to <code>Delete</code> in your code with <code>Delete(18)</code>: boom.</p>

<p><code>Delete</code> is also unable to delete the root node.</p>

<h2>Error handling</h2>

<p>If a method is unable to perform it's task, it should be throwing an exception; it shouldn't not print to the console and it should not return cleanly. In <code>Insert</code>, for example, if trying to add the same value twice is explicitly forbidden, it should throw an exception. If it is allowed, and you just want to ignore this, then you should just return cleaning. A general purpose component should not be printing to the console: you have no idea what job it has in an application.</p>

<p>In <code>TraverseTree</code>, an unrecognise traversal method is surely exception worthy: it certainly does not warrant returning whatever <code>_treeTraversal</code> happens to contain. Throwing an exception forces the consuming code to address the problem up-front (which is good, because ignoring it makes no sense), stops there code proceeding under a false pretense (which may lead to data corruption), and gives them lots of useful information about where the program logic went wrong (e.g. stack trace, and more if there is a debugger handy).</p>

<h2>Printing</h2>

<p>Similarly, <code>PrintTraversedTree</code> assumes that the console is a good place to put stuff: much better, if you want to provide this functionality, to have <code>PrintTraversedTree</code> take a <code>TextWriter</code>, so that the caller can decide where the stuff should be printed. I'd question whether this method should be a member of the class: it has no concern with the classes internal state, and could just as well be a static method elsewhere.</p>

<p><code>Delete</code> even tells the console what it is doing: why? If the calling code wants to tell the console that it is delete a node, then it can do that itself: the BST should stick to being a BST.</p>

<h2>Naming and Spelling</h2>

<p>You might consider following microsoft's naming conventions (because everyone else does) for public members and types, which is to use <code>ProperCamelCase</code> for everything. <code>Node.value</code>, for example, would be <code>Node.Value</code>; <code>isLeaf</code> would be <code>IsLeaf</code>, etc.</p>

<p>There are numerous spelling errors in member names, variable names, inline documentation (nice to see, though it could be more useful), and comments.</p>

<p>I would consider renaming <code>Smalest</code> to <code>FindSmallestDescendent</code> or <code>FindLeftmostDescendent</code>, so that is clearer what is does.</p>

<h2>Don't Repeat Yourself</h2>

<p>The code to initialise <code>_treeTraversal</code> appears in 5 methods, and is every time identical. It should be in its own method, and need only called once from <code>Traverse</code>.</p>

<p>This appears all over the place:</p>

<pre><code>_treeTraversal[_treeTraversalIndex] = /*something*/;
_treeTraversalIndex++;
</code></pre>

<p>This could be another little method: it would make the code much tidier if it had calls to <code>Append(int)</code> instead of this everywhere, which hides away the complexity of the task, and makes the intention clear.</p>

<p>I'd also replace <code>_currentTraverseForm = -1;</code> everywhere with an <code>InvalidateTraversal()</code> method. This saves you having to put comments in explaining why this cryptic operation is occuring, and will make it much easier to change the behaviour in furture if you see fit to do so.</p>
    </div>