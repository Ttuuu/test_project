<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'm not fantastic with Typescript; so let's take a look at your Python:</p>

<h2>Credentials</h2>

<pre><code>app.config['SECRET_KEY'] = 'secret!'
</code></pre>

<p>This shouldn't be baked into your code. It should be in a secure wallet of some kind. Resources on the internet abound about how to accomplish this, either in Python or at the operating system level.</p>

<h2>Business logic vs. presentation</h2>

<pre><code>boards = [['' for i in range(9)] for i in range(9)]
</code></pre>

<p>This is a classic example of conflating presentation (a string to be shown to the user) with business logic (is a cell filled in?)</p>

<p>Consider using <code>Enum</code> instances, or maybe <code>Optional[bool]</code>.</p>

<h2>Logging</h2>

<p>Rather than</p>

<pre><code>print("Someone connected to websocket!")
</code></pre>

<p>use the actual <a href="https://docs.python.org/3.8/library/logging.html#module-email" rel="nofollow noreferrer">logging</a> facilities of Python. They don't need to have a complex configuration; using them will better-structure the output and allow for complex configurations in the future if you want.</p>

<h2><code>None</code> comparison</h2>

<pre><code>if (players['X'] == None):
</code></pre>

<p>should be</p>

<pre><code>if players['X'] is None:
</code></pre>

<p>also, parens are not necessary.</p>

<h2>Unpacking</h2>

<pre><code>[i,j] = object.values()
</code></pre>

<p>can be</p>

<pre><code>i, j = object.values()
</code></pre>

<p>That said: is <code>object</code> a <code>dict</code>? The order of values, after Python 2, is no longer non-deterministic, but (if I remember correctly) in insertion order. Generally it's a bad idea to rely on this order. You should rethink the way that these are stored and looked up. Can you rely on the key instead?</p>

<h2>Globals</h2>

<pre><code>
def togglePlayer():
    global turn
    turn = 'O' if turn == 'X' else 'X'

def updateWonBoards(i):
    global wonBoards
    global boards
    wonBoards[i] = boardWin(boards[i])

def updateLastPlayed(j):
    global lastPlayed
    global wonBoards
    lastPlayed = -1 if wonBoards[j] != '' else j
</code></pre>

<p>These globals should be in some kind of game state singleton class instead.</p>

<h2>Mutability</h2>

<pre><code>    lines = [
    [0, 1, 2],
    [3, 4, 5],
    [6, 7, 8],
    [0, 3, 6],
    [1, 4, 7],
    [2, 5, 8],
    [0, 4, 8],
    [2, 4, 6]
    ]
</code></pre>

<p>This should be a tuple of tuples, not a list of lists.</p>

<h2>Iteration</h2>

<pre><code>for i in range(0, len(lines)):
</code></pre>

<p>should just be</p>

<pre><code>for line in lines:
</code></pre>
    </div>