<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>In addition to G. Sliepen’s idea, you could use the STL’s <code>std::valarray&lt;double&gt;</code>.  This would let you replace something like</p>

<pre><code>for (int d = 0; d &lt; DIM; ++d) {
    p-&gt;x[d] += dt * (p-&gt;v[d] + a * p-&gt;F[d]);
    p-&gt;F_old[d] = p-&gt;F[d];
}
</code></pre>

<p>with something like</p>

<pre><code>p-&gt;F_old = p-&gt;F;
p-&gt;x += dt * (p-&gt;v + a * p-&gt;F);
</code></pre>

<p>It would also be possible to lay out a structure of arrays rather than an array of structures.  If there are more particles than dimensions, this could let you perform wider vector operations on all the x-coordinates, then all the y-coordinates and all the z-coordinates, rather than being limited to the width of the coordinate system.  That is, each <code>p</code> might have only two or three parallel computations, but if you have a number of <code>std::array&lt;std::valarray&lt;double&gt;, DIM&gt;</code> with the x-coordinates in <code>x[0]</code>, the y-coordinates in <code>x[1]</code> and the z-coordinates in <code>x[2]</code>, the velocities in <code>v[0]</code>, etc., that might look like:</p>

<pre><code>for (size_t i = 0; i &lt; x.size(); ++i) {
  F_old[i] = F[i];
  x[i] += dt * (v[i] + a * F[i]);
}
</code></pre>

<p>and be able to use the full width of your vector registers.  This would not, however, work as well if the computations are not so cleanly separable.</p>
    </div>