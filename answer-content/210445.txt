<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>1. Review</h3>

<ol>
<li><p>Some of the variable names could be improved:</p>

<p><code>complex_plane</code> is an array of <span class="math-container">\$z\$</span> values for each pixel in the image, so naming it <code>z</code> would help the reader relate it to the <code>z</code> in <code>douady_hubbard_polynomial</code>. </p>

<p><code>imaginary_axis</code> and <code>real_axis</code> are only used once in the very next line, so there is no need for them to have long and memorable names. I would use something short like <code>im</code> and <code>re</code>.</p>

<p><code>result</code> is an array of iteration counts, so it could be named something like <code>iterations</code>.</p>

<p><code>mask</code> is a Boolean array selecting pixels that have not yet diverged to infinity, so something like <code>not_diverged</code> or <code>live</code> would convey this better.</p></li>
<li><p>On each iteration, the iteration counts of the escaped pixels are incremented. This means that some pixels get incremented many times, for example a pixel that escapes on the first iteration gets its count incremented 256 times. It would be more efficient to set the iteration count for each pixel just once. A convenient time to do this is when it escapes.</p></li>
<li><p>As the number of iterations goes up, the number of pixels that have not escaped to infinity gets smaller and smaller. But the masking operations are always on the whole array. It would be more efficient to keep track of the <em>indexes</em> of the pixels that have not escaped, so that subsequent operations are on smaller and smaller arrays.</p></li>
</ol>

<h3>2. Revised code</h3>

<pre><code>im, re = np.ogrid[min_coordinate.imag: max_coordinate.imag: height * 1j,
                  min_coordinate.real: max_coordinate.real: width * 1j]
z = (re + 1j * im).flatten()
live, = np.indices(z.shape) # indexes of pixels that have not escaped
iterations = np.empty_like(z, dtype=int)
for i in range(iterations_count):
    z_live = z[live] = mapping(z[live])
    escaped = abs(z_live) &gt; threshold
    iterations[live[escaped]] = i
    live = live[~escaped]
iterations[live] = iterations_count - 1
return (iterations_count - iterations).reshape((height, width))
</code></pre>

<p>Notes</p>

<ol>
<li><p>This is about three times as fast as the code in the post.</p></li>
<li><p>Because we are maintaining an array of indexes, it is convenient to flatten the <code>z</code> array and then reshape <code>iterations</code> to two dimensions before returning it. If we left the array two-dimensional, there would need to be two arrays of indexes, <code>live_i</code> and <code>live_j</code>.</p></li>
<li><p>Pixels that don't escape are given the value <code>iterations_count - 1</code> in order to match the code in the post. It would make more sense to use <code>iterations_count</code> or a larger value here.</p></li>
<li><p>The subtraction <code>iterations_count - iterations</code> is only there so that the returned values match the code in the post. The subtraction could be omitted if you <a href="https://matplotlib.org/api/_as_gen/matplotlib.colors.Colormap.html#matplotlib.colors.Colormap.reversed" rel="noreferrer">reverse the colour map</a>.</p></li>
</ol>
    </div>