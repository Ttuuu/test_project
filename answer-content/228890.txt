<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Alternatives</h3>

<p>There are plenty of robust options for message queueing in C# that handle multithreading  gracefully as well as scaling to truly massive sizes.</p>

<p>The microsoft solution is <a href="https://docs.microsoft.com/en-us/dotnet/api/system.messaging.messagequeue?view=netframework-4.8" rel="noreferrer">MSMQ</a>.</p>

<p>There are plenty of free or commercial alternatives.
<a href="https://activemq.apache.org/" rel="noreferrer">ActiveMQ</a>
<a href="https://www.rabbitmq.com/" rel="noreferrer">RabbitMQ</a>
are a couple I have experience with. Both are useful with solid .NET libraries supporting them. Generally, I would use one of the existing MQ options. They are backed by persistence engines which store the queue data in databases so you can do useful things like replay blocks of messages to debug issues, and bulk process messages to test function under heavy load.</p>

<h3>Review</h3>

<p>The file writing sections are locked for exclusivity, which looks like the only place you are in resource contention so it seems threadsafe (you should always test it thoroughly of course :-) ).</p>

<p>If you are worried that some tasks will not complete, you can fire an async task with a cancellation token set to expire after some timeout (don't forget to set the task to throw on cancellation if you need notification).</p>

<p>Where you put the code for the facade and the queue is up to you, I'd leave them separate as much as possible, but that decision may not work in your case. Code it however you are comfortable.</p>

<p>I love NLog. It is incredibly powerful and flexible. I would use it for logging but again, it is up to you. If it seems to fit your needs, use it.</p>

<p>I hope some of this is useful.</p>
    </div>