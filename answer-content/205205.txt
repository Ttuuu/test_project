<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Declaring <code>qry As QueryDef</code> is unnecessarily limiting your function to Queries.  With a few changes the function could be ran against Queries or Tables.</p>

<blockquote>
<pre><code>Dim qry As Object 'QueryDef or TableDef
On Error Resume Next
Set qry = dbLocal.QueryDefs(argQuery)
On Error GoTo 0

If qry Is Nothing Then
    On Error Resume Next
    Set qry = dbLocal.TableDefs(argQuery)
    On Error GoTo 0
End If

....
If TypeName(qry) = "QueryDef" Then
    If IsArray(argParameters) Then
</code></pre>
</blockquote>

<p>I would separate this the If clause below to reduce the reduce the number of nesting levels.  </p>

<pre><code>If rs.RecordCount Then
    rs.MoveFirst
    rs.MoveLast
    rs.MoveFirst
</code></pre>

<p>The first <code>rs.MoveFirst</code> isn't needed. </p>

<pre><code>If rs.RecordCount = -1 Then
    rs.MoveLast
    rs.MoveFirst
End If
</code></pre>

<p>The function should only be set to null after you determine that there are no records. </p>

<pre><code>If rs.RecordCount = 0 Then
    Qlookup = Null
    Exit Function
End If
</code></pre>

<p>Since the function will now return <code>out</code> no matter what, I would move <code>Qlookup = out</code> to the last line before clean up.</p>

<p>There is some repeat code that can be eliminated by tweaking some of the If statements.</p>

<blockquote>
<pre><code>If rs.RecordCount &gt; 1 Or rs.Fields.Count &gt; 1 Then
    ReDim out(rs.RecordCount - 1, rs.Fields.Count - 1)
    For i = 0 To rs.RecordCount - 1
        For j = 0 To rs.Fields.Count - 1
            out(i, j) = rs.Fields(j).Value
        Next
        rs.MoveNext
    Next
ElseIf rs.Fields.Count &gt; 1 Then
    ReDim out(rs.RecordCount - 1)
    For i = 0 To rs.RecordCount - 1
        out(i) = rs.Fields(0).Value
        rs.MoveNext
    Next
Else
    Qlookup = rs.Fields(0).Value
End If
</code></pre>
</blockquote>
    </div>