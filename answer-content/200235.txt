<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>The only difference is that I got rid of the internal locks that implementation uses.</p>
  
  <p>Since a <code>ConcurrentQueue</code> is already thread safe, I can't figure out why they chose to use a lock in their implementation. </p>
</blockquote>

<p>From my understanding of the meaning of "<a href="https://msdn.microsoft.com/en-us/library/dd267265(v=vs.110).aspx#Thread%20Safety" rel="nofollow noreferrer">thread safety</a>":</p>

<blockquote>
  <p>All public and protected members of <code>ConcurrentQueue&lt;T&gt;</code> are thread-safe and may be used concurrently from multiple threads.</p>
</blockquote>

<p>A class being "thread safe" just means its members are, but only individually. So one method being called from many threads will not cause problems. Interacting with many members from many threads might not be "thread safe".</p>

<p>In some sense, the meaning of "thread safety" depends on your application.</p>

<p>If you look at the lock from the answer:</p>

<blockquote>
<pre><code>lock (_syncRoot)
{
    if (_promisesQueue.TryDequeue(out promise) &amp;&amp;
        !promise.Task.IsCanceled &amp;&amp;
        promise.TrySetResult(item))
    {
        return;
    }
    _bufferQueue.Enqueue(item);
} 
</code></pre>
</blockquote>

<p>All those statements in the block are combined together to be accessed only by one thread, which is something the "thread safety" of the class alone cannot guarantee.</p>

<p>The lock allows you to group code into a thread-safety-wise "atomic" block.</p>
    </div>