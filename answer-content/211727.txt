<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The other reviews covered many of the main points I'd raise, but there are a handful of others.</p>

<hr>

<p>Constructors in abstract classes should be <code>protected</code>, not <code>public</code>:</p>

<blockquote>
<pre><code>public Location(string name) =&gt; Name = name;    
</code></pre>
</blockquote>

<p>You can't create a new instance of the abstract class, so it is for all intents and purposes <code>protected</code> anyway.  Make the access modifier match the behavior.</p>

<hr>

<p>I'm not sure that I like some of the naming. For example, <code>CreateObjects()</code> gives only the slightest clue as to what it is doing. I'd probably go with something more along the lines of <code>GenerateMap()</code>. A couple of the member names are also a little ambiguous as to how they function - for example, which room is <code>IHasExteriorDoor.DoorLocation</code> relative to?</p>

<hr>

<p>Speaking of doors (keeping in mind that I'm not sure how much was proscribed by the exercise), I also think I find it a bit more natural to have the exits be the primary motive object.  It's more natural to me to think of "using a door" than it is to think of "leaving a room".  To me, a room is a static thing - it <strong><em>has</em></strong> exits, but you don't really use a room by leaving it.  I'd consider building your map from the standpoint of the connections between the locations instead of the locations themselves. Something more like this:</p>

<pre><code>public interface ILocation
{
    string Name { get; }
    string Description { get; }
}
</code></pre>

<hr>

<pre><code>public interface IExit
{
    // TODO: my naming sucks too.
    ILocation LocationOne { get; }
    ILocation LocationTwo { get; }
    // Takes the room you're exiting as a parameter, returns where you end up.
    ILocation Traverse(ILocation from);
}
</code></pre>

<hr>

<pre><code>public abstract class Location : ILocation
{
    private readonly IReadOnlyList&lt;IExit&gt; _exits;

    protected Location(string name, string description, IEnumerable&lt;IExit&gt; exits)
    {
        _exits = exits.ToList();
    }

    public IEnumerable&lt;IExit&gt; Exits =&gt; _exits;

    // ...other properties...
}
</code></pre>

<p>That lets you concentrate on the spatial relationships between the locations from a more natural direction (IMO and no pun intended). You'll likely find this to be more easily extensible down the road when you need to, say close or lock a door:</p>

<pre><code>public interface Door : IExit
{
    bool IsOpen { get; }
    bool IsLocked { get; }
}
</code></pre>
    </div>