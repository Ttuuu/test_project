<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<pre><code>public static class Hashing
{

    public static int SaltSize = 32;
</code></pre>
</blockquote>

<p>This is public, static, and not <code>const</code> or <code>readonly</code>. That means:</p>

<ol>
<li>"Anyone" can change it.</li>
<li>It's not thread-safe.</li>
<li>Hash validation is undermined.</li>
</ol>

<p>I see no reason for it to be public, and every reason for it to be <code>readonly</code> or <code>const</code>. Personally I'd favour <code>readonly</code> and initialised from <code>ConfigurationManager.AppSettings</code> so that an upgrade path can be built in which doesn't require recompiling the code.</p>

<hr>

<blockquote>
<pre><code>    public static string HashPassword(string passwordToHash, byte[] salt, int numberOfRounds)
    ...
    public static string HashPassword(string passwordToHash, int numberOfRounds)
    ...
    public static byte[] GenerateSalt()
    ...
    public static byte[] HashPassword(byte[] toBeHashed, byte[] salt, int numberOfRounds)
</code></pre>
</blockquote>

<p>Why expose everything? I would expect the only public method to be <code>HashPassword(string password)</code> (or maybe <code>HashPassword(SecureString password)</code>, although <code>SecureString</code> is such a nuisance to do anything with that I can understand not supporting it).</p>

<hr>

<blockquote>
<pre><code>        return Convert.ToBase64String(salt.Concat(hashedPassword).ToArray());
</code></pre>
</blockquote>

<p>Cryptography is an arms war: it's always worth thinking about the upgrade path. That means recording the parameters (name of hash, number of iterations, length of salt) in such a way that they can be extracted when it's time to validate.</p>

<hr>

<blockquote>
<pre><code>        using (var randomNumberGenerator = new RNGCryptoServiceProvider())
</code></pre>
</blockquote>

<p>I think it's better practice to use <code>RandomNumberGenerator.Create()</code> and leave the selection of the provider to the system-wide configuration.</p>

<hr>

<blockquote>
<pre><code>        using (var rfc2898DeriveBytes = new Rfc2898DeriveBytes(toBeHashed, salt, numberOfRounds))
</code></pre>
</blockquote>

<p>RFC 2898 was intended as a key derivation function, not a password validation mechanism. It's probably safe, but I'm leery of using it for a different purpose without including a reference to a respected cryptographer who says it's safe.</p>

<hr>

<blockquote>
<pre><code>public abstract class HashVerification
{
    public abstract string GetDatabaseHash(string username);

    public bool HashMatch(string username, string password)
</code></pre>
</blockquote>

<p>The guideline that one should favour composition over inheritance suggests that hash verification (<code>HashMatch</code>) should probably be in <code>Hashing</code>, and the database fetching should be independent of it.</p>

<hr>

<blockquote>
<pre><code>        var salt = Convert.FromBase64String(combinedHash).Take(Hashing.SaltSize).ToArray();

        var serverHash = Hashing.HashPassword(password, salt, username.Length * 100);
</code></pre>
</blockquote>

<p>Yikes! Why should people with shorter usernames get less protection? The number of rounds should be another thing that comes from a configuration file so that it can be increased over time, and it should be constant for everyone.</p>

<hr>

<blockquote>
<pre><code>        return combinedHash.Equals(serverHash);
</code></pre>
</blockquote>

<p><a href="/a/225011">Already addressed in an earlier answer</a>.</p>
    </div>