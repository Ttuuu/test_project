<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'm going to leave aside @200_success's very reasonable observation and assume the general approach you're taking is valid. That being said, I suspect your conversion approach is slower than operating directly on the array, and it's almost certainly more complex.</p>

<p>Variables which should not change after initial assignment should also be made <code>final</code>. In addition to documenting design intent, they make it easier to read the code because you know they won't change.</p>

<p>In idiomatic java, whitespace is put on both sides of operators such as <code>=</code>. Whitespace is put before <code>{</code>. Whitespace is not put between multiple <code>)</code>. There should be no whitespace between <code>int</code> and <code>[]</code>, and there should be whitespace between <code>[]</code> and the variable name. There should be whitespace after <code>,</code>.</p>

<p>Your comments are almost entirely noise. Comments are for explaining why design decisions were made in non-obvious cases, not what the decisions were. The reason is that it's very easy for comments and code to get out of synch, at which point somebody reading the code will not get an accurate picture of what's going on.</p>

<p>You declare size and then use it inconsistently. Referencing <code>x.length</code> directly is clear, succinct, and efficient. There's no reason for a variable.</p>

<p>Your conversion operation is overly verbose. Every time you get a new digit, multiply the old value by ten and add the new digit. You don't need to mess with powers at all. It might even be nice to break it out into its own method, since you're using it in both <code>plusOne</code> and <code>plusTarget</code>.</p>

<p>Likewise, your deconversion can be pulled out into its own method. Using String is readable, but not efficient. You can play with math to make the more efficient approach work for all numbers. Is the efficiency gain worth the tradeoff? Maybe not. Readability is probably more important unless you have a known bottleneck.</p>

<p>In <code>plusTarget</code>, your deconversion is overly complex. You can use a guard clause for the zero case which simply returns <code>new int[] { 0 };</code>  It would also be easier if you tracked negativity as a boolean and treated all numbers as positive, then did the <code>*= -1</code> at the end.</p>

<p>If you were to make all these modifications, your code might look more like:</p>

<pre><code>private static int[] plusOne(final int[] x) {
    int value = toInt(x);

    System.out.println("the value of the array after turning it to number: " + value);
    value++;
    System.out.println("value after adding one: " + value);

    return toIntArrayUsingMath(value);
}

private static int[] plusTarget(final int[] x, final int target) {
    int value = toInt(x);

    System.out.println("the value of the array after turning it to number: " + value);
    value += target;
    System.out.println("value after adding target: " + value);

    return toIntArrayUsingString(value);

}

private static int toInt(final int[] value) {
    int result = value[0];
    for (int i = 1; i &lt; value.length; i++) {
        result = (10 * result) + value[i];
    }
    return result;
}

private static int[] toIntArrayUsingMath(final int value) {
    if (value == 0) {
        return new int[] { 0 };
    }

    int absoluteValue = Math.abs(value);
    final int length = (int) Math.log10(absoluteValue) + 1;
    final int[] array = new int[length];

    for (int i = array.length - 1; i &gt;= 0; i--) {
        array[i] = absoluteValue % 10;
        absoluteValue = absoluteValue / 10;
    }

    if (value &lt; 0) {
        array[0] *= -1;
    }

    return array;
}

private static int[] toIntArrayUsingString(final int value) {
    if (value == 0) {
        return new int[] { 0 };
    }

    final boolean negativeValue = value &lt; 0;
    final String convert = Integer.toString(Math.abs(value));
    final int[] array = new int[convert.length()];

    for (int i = 0; i &lt; array.length; i++) {
        array[i] = Character.digit(convert.charAt(i), 10);
    }

    if (negativeValue) {
        array[0] *= -1;
    }

    return array;
}
</code></pre>
    </div>