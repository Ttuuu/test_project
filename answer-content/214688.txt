<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There are many places where you can improve on your code.</p>

<ul>
<li><p>In C++, you try to introduce variables as <em>late</em> as possible. So don't define all those <code>int</code> types in the beginning of your main program. It's only confusing and in general will lead to low maintainability and low performance. In fact, you will end up not needing them at all.</p></li>
<li><p>You don't need <code>&lt;iomanip&gt;</code> or <code>&lt;string&gt;</code> for anything, so don't include them.</p></li>
<li><p>Avoid doing <code>using namespace std</code> - this has been raised in many questions on the site. Similarly, you usually want to print <code>'\n'</code> instead of <code>std::endl</code>, which flushes the buffer. For more, see <a href="https://stackoverflow.com/questions/1452721/why-is-using-namespace-std-considered-bad-practice">here</a>.</p></li>
<li><p>Don't force the user of your program to know the internals of your program. If you can't open the file, consider printing something other than "Failed to find inFile". Sure, at least the author of the source code knows what <code>inFile</code> is (that's the name of a variable!), but maybe it would make more sense for the user to say "input file" (but OK, this is nitpicking :-)).</p></li>
<li><p>If your data set was huge, it would make a lot of sense to count the number of scores and to accumulate the score while reading. In this case, it might be a better idea to just read all the scores into a suitable container (<code>std::vector</code>) and then to process that. In addition, the if-else statements are a mess, as you would probably agree. It's hard to read, difficult to understand, and not easy to modify. So whenever you see a big cluster of if-else statements, ask yourself whether a data driven approach would make sense.</p></li>
<li><p>A line of code can't be any clearer than <code>cout &lt;&lt; "Max Score: " &lt;&lt; MaxScore &lt;&lt; endl;</code>. Thus, a comment like <code>// Printing Max score</code> is just too verbose. Prefer comments that answer the question "how" and not "what". Good code explains itself via e.g., good naming conventions.</p></li>
</ul>

<p>I'd rewrite your program as follows:</p>

<pre><code>#include &lt;iostream&gt;
#include &lt;fstream&gt;
#include &lt;vector&gt;
#include &lt;string&gt;
#include &lt;map&gt;
#include &lt;functional&gt;
#include &lt;algorithm&gt;
#include &lt;numeric&gt;
#include &lt;iterator&gt;

int main()
{
    std::ifstream inFile("indata6.txt");

    if (!inFile)
    {
        std::cout &lt;&lt; "Failed to find input file\n";
        return EXIT_FAILURE;
    }

    const std::map&lt;int, char, std::greater&lt;int&gt; &gt; grades = 
    { 
        { 90, 'A' },{ 80, 'B' },{ 70, 'C' },{ 60, 'D' } 
    };

    std::vector&lt;int&gt; scores { 
        std::istream_iterator&lt;int&gt;(inFile), 
        std::istream_iterator&lt;int&gt;{} };

    std::cout &lt;&lt; "Test Scores &amp; Grades\n";
    std::cout &lt;&lt; "--------------------\n";

    for(auto s : scores)
    {
        auto it = grades.lower_bound(s);
        std::cout &lt;&lt; s &lt;&lt; " ";

        if (it == grades.cend())
        {
            std::cout &lt;&lt; "F\n";
        }
        else
        {
            std::cout &lt;&lt; it-&gt;second &lt;&lt; "\n";
        }
    }

    const auto minmax = std::minmax_element(scores.cbegin(), scores.cend());

    std::cout &lt;&lt; "Max Score: " &lt;&lt; *(minmax.second) &lt;&lt; "\n"; 
    std::cout &lt;&lt; "Min Score: " &lt;&lt; *(minmax.first) &lt;&lt; "\n";
    std::cout &lt;&lt; "Avg Score: " &lt;&lt; (std::accumulate(scores.cbegin(), scores.cend(), 0.0) / scores.size()) &lt;&lt; "\n";
    std::cout &lt;&lt; "Number of Tests: " &lt;&lt; scores.size() &lt;&lt; "\n";
}
</code></pre>

<p>A few points from this program:</p>

<ul>
<li><p>Notice we first try to open the file. If it succeeds, great. If it doesn't, we exit early (with a proper exit code) and avoid possibly allocating memory etc. for variables we never ended up needing.</p></li>
<li><p>Instead of an if-else mess, we take a data-driven approach powered by <code>std::map</code>. In this way, we just initialize the map to hold the point thresholds for various grades, and then later on do suitable searches into this data structure. It's much easier to maintain!</p></li>
<li><p>We only read the scores once into a dynamic array (<code>std::vector</code>). This guy holds all the scores and allows us to iterate over it and use standard algorithms on it. Clean and nice.</p></li>
<li><p>At the end, we do just this: <a href="https://en.cppreference.com/w/cpp/algorithm/minmax_element" rel="nofollow noreferrer"><code>std::minmax_element</code></a> gives us the smallest and largest element of a range. Similarly, <a href="https://en.cppreference.com/w/cpp/algorithm/accumulate" rel="nofollow noreferrer"><code>std::accumulate</code></a> sums over all the elements, which we just divide by the number of elements, conveniently given to us by the <code>size()</code> method of the vector. </p></li>
<li><p>I would also encourage you to look at functions. You could further separate pieces of the logic into functions. For instance, a natural function would be one that reads an input file into a vector and spits that out.</p></li>
</ul>
    </div>