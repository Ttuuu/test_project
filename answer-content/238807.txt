<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Initial thoughts</h1>

<p>I must admit I hadn't heard of the <a href="https://ytdl-org.github.io/youtube-dl/index.html" rel="nofollow noreferrer">youtube-dl</a> program but it seems quite nifty. Perhaps it was what many of the websites I have seen for downloading YT videos use behind the scenes.</p>

<p>I tried using the script locally and found that the URL <strong>must contain an ampersand</strong> (i.e. have 2+ query string variables), otherwise the logic to look for a playlist parameter and remove it would lead to an empty string passed to the youtube-dl program. But some URLs I see from Youtube only have zero or one parameters (e.g. <a href="https://www.youtube.com/watch?v=DuB6UjEsY_Y" rel="nofollow noreferrer">https://www.youtube.com/watch?v=DuB6UjEsY_Y</a> and the equivalent sharing link: <a href="https://youtu.be/DuB6UjEsY_Y" rel="nofollow noreferrer">https://youtu.be/DuB6UjEsY_Y</a>). </p>

<p>Initially I was wondering why <code>$numberToUse</code> couldn't be set to <code>count($directoriesInUse) + 1</code> but then I realized that some of those directories could be deleted and that might lead to issues. Then I considered that if you could parse out a video id (which <a href="https://webapps.stackexchange.com/a/54448">seems to have remained the same since 2014</a>)  from the URL then that could be used instead of an integer for the sub-directory name.</p>

<h1>Suggestions</h1>

<h2>Use a mapping instead of a <code>switch</code></h2>

<p>The <code>switch</code> could be simplified:</p>

<blockquote>
<pre><code>switch($_GET['format']) {
    case 'bestvideo': case 'worstvideo': $formatExt = "MP4"; break;
    case 'bestaudio': $formatExt = "m4a"; break;
    case 'worstaudio': $formatExt = "webm";
        break;
    default:
        echo("Illegal video format '".$_GET['format']."'!");
        exit(1);
}
</code></pre>
</blockquote>

<p>A mapping could be defined of formats to extensions:</p>

<pre><code>const FORMAT_MAPPING = [
    'bestvideo' =&gt; "MP4",
    'worstvideo' =&gt; "MP4",
    'bestaudio' =&gt; "m4a",
    'worstaudio' =&gt; "webm"
];
</code></pre>

<p>Then if the query string is missing that key or that key does not exist in the mapping, show the error and exit early.</p>

<pre><code>if (!isset($_GET['format']) || !array_key_exists($_GET['format'], FORMAT_MAPPING)) {
    echo("Illegal video format '".$_GET['format']."'!");
    exit(1);
}
</code></pre>

<p>Otherwise just assign the value to <code>$formatExt</code>:</p>

<pre><code>$formatExt = FORMAT_MAPPING[$_GET['format']];
</code></pre>

<h2>Control structures not using statement groups</h2>

<p>While it may seem unlikely that there would be a need for multiple lines following <code>if</code>, <code>else</code> or <code>for</code> statements, it is best to put the statements to execute in a group (i.e. with curly braces/brackets). Then when you determine that you need to add a line to one of those statement groups, it eliminates any chance of logic error.</p>

<blockquote>
<pre><code>if($format === "bestaudio" or $format === "worstaudio" or $format === "worstvideo") {
        $response = exec('mkdir ./workers/'.$numberToUse.' &amp;&amp; cd ./workers/'.$numberToUse.'/ &amp;&amp; '.$ytcmd.' --no-playlist --format '.$format.' -o \'%(title)s.%(ext)s\' '.$url);
}
else {
        $response = exec('mkdir ./workers/'.$numberToUse.' &amp;&amp; cd ./workers/'.$numberToUse.'/ &amp;&amp; '.$ytcmd.' --no-playlist -o \'%(title)s.%(ext)s\' '.$url);
}
</code></pre>
</blockquote>

<h2><code>or</code> has lower precedence than <code>||</code> and others like assignment</h2>

<p>Note the <a href="https://www.php.net/manual/en/language.operators.precedence.php" rel="nofollow noreferrer">operator precedence</a> list and how <code>or</code> is at the end of the list, while logical or i.e. <code>||</code>, is above assignment and others:</p>

<p><a href="https://i.stack.imgur.com/pjFGX.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/pjFGX.png" alt="operator precedence"></a></p>

<p><a href="https://i.stack.imgur.com/tiCyx.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/tiCyx.png" alt="operator precedence end"></a></p>

<p>There is a <a href="https://www.php.net/manual/en/language.operators.precedence.php#117390" rel="nofollow noreferrer">good illustration of the difference in the user contributed notes by fabmlk</a>:</p>

<blockquote>
  <p>Watch out for the difference of priority between 'and vs &amp;&amp;' or '|| vs or':</p>

<pre><code>&lt;?php
$bool = true &amp;&amp; false;
var_dump($bool); // false, that's expected

$bool = true and false;
var_dump($bool); // true, ouch!
?&gt;
</code></pre>
  
  <p>Because 'and/or' have lower priority than '=' but '||/&amp;&amp;' have higher.</p>
</blockquote>

<p>So it is wise to get in the practice of using <code>||</code> unless you know you need <code>or</code> </p>

<h2>use <code>foreach</code> instead of <code>for</code></h2>

<p>Instead of this <code>for</code> loop:</p>

<blockquote>
<pre><code>for($i = 0; $i &lt; sizeof($directoriesInUse); $i++)
    $integerIDs[$i] = (int)explode("/", $directoriesInUse[$i])[2];
</code></pre>
</blockquote>

<p>A <a href="https://php.net/foreach" rel="nofollow noreferrer"><code>foreach</code></a> could be used </p>

<pre><code>foreach ($directoriesInUse as $i =&gt; $directory) {
    $integerIDs[$i] = (int)explode("/", $directory)[2];
}
</code></pre>

<p>One could also use <code>array_map()</code>. Instead of storing an array of integers, you could just keep track of the maximum number seen - using <a href="https://www.php.net/max" rel="nofollow noreferrer"><code>max()</code></a>. That would avoid the need to sort the array. This likely wouldnâ€™t be a major optimization unless there were a large number of directories. </p>

<h2>Logical flaw when no ampersand exists in URL</h2>

<p>As was mentioned above, this line doesn't work well when there is no ampersand in <code>$url</code></p>

<blockquote>
<pre><code>//url may contain &amp; for a playlist, so it will be removed here to prevent other issues.
$url = substr($url, 0, strpos($url, "&amp;"));
</code></pre>
</blockquote>

<p>This is because <a href="http://php.net/strpos" rel="nofollow noreferrer"><code>strpos()</code></a> "Returns <strong><code>FALSE</code></strong> if the needle was not found."<sup><a href="http://php.net/strpos" rel="nofollow noreferrer">1</a></sup>. I would update the code to only perform that alteration if the string actually contains an ampersand.</p>

<p><sup>1</sup><sub><a href="http://php.net/strpos" rel="nofollow noreferrer">http://php.net/strpos</a></sub></p>
    </div>