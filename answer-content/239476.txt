<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Overview</h2>
<p>One major issue.<br>
You take ownership of a pointer but don't implement the rule of three.</p>
<p>A series issue is that the code is not const correct. If a method does not modify the state of the object then it should be marked const. It is quite common for parameters to be passed as const reference in C++. If that is the case then you can only call const methods (since you don't have any then you can't call any).</p>
<p>An issue is that you pass parameters by value. This forces them to be copied. Most of the time you should pass by const reference to prevent a copy.</p>
<h2>Code Review</h2>
<p>That's relatively common guard name!</p>
<pre><code>#ifndef BINARYSEARCHTREE_H
#define BINARYSEARCHTREE_H
</code></pre>
<p>I would try an make it more unique, possibly by including the namesapce you put your code into the name of the guard.</p>
<hr>
<p>You did not put your code in a namespace.<br>
Should probably do that <code>BinarySearchTree</code> seems like having. ahigh probability of being defined by multiple people.</p>
<hr>
<p>Never do this.</p>
<pre><code>using namespace std;
</code></pre>
<p>Its terrible when people do this in a source file. But doing it in a header file can actually break other peoples code. Stuff like this will get you banned from contributing.</p>
<ol>
<li>Never ever ever do it in a header file.<br>
It not only affects your code but any code that includes your header.</li>
<li>Preferably don't even do it your own source files.</li>
<li>Limitted <code>using std::&lt;something&gt;;</code><br>
This can an be acceptable but prefer to limit its scope. But even this is not worth it.</li>
<li>The reason that the "Standard" namespace is called "std" is so that it is not a burden to use the prefix on objects and types. <code>std::vector&lt;int&gt;</code> is that so hard?</li>
</ol>
<p>Read details about the issues here:
<a href="https://stackoverflow.com/a/1453605/14065">Why is “using namespace std;” considered bad practice?
</a></p>
<hr>
<p>Your comments are horrible:</p>
<pre><code>    public:
        BinarySearchTree(); //constructor which creates an empty tree with a NULL root pointer
        ~BinarySearchTree(); //recursively deletes tree using postorder traversal by calling the Clear() method
        void Insert(string); //insert method is used to insert and also count occurences if while searching the tree we find that the given string already exists
        bool Search(string); //1st definition of search: this method will be used by main to search and display the contents of a node whose word is equal to the string
        bool Delete(string); //1st definition: deletes the node with the given string as its word, if it exists, by calling the 2nd Delete() definition and is only used by main
        void Preorder() {Preorder(root);} //For the traversal methods we use two definitions of each method, one that is called by main and one by the class,
        void Inorder() {Inorder(root);}   //as main does not have access to the root
</code></pre>
<p>Don't write this type of comment. A comment that only describes the code is worse than useless. This actually costs effort to maintain as you must make sure that the comments and code stay in sink over time (comment rot in old code bases is a real thing and is a problem).</p>
<p>Write comments to explain WHY. The code explains HOW. Use self documenting code (like you have). Using good variable and method names is the key to writing good maintainable code.</p>
<p>How not to writing bad comments should definitely be a course at university these days.</p>
<hr>
<p>You are passing parameters by value:</p>
<pre><code>        void Insert(string);
        bool Search(string);
        bool Delete(string);
</code></pre>
<p>This forces a copy of the object from the call location and creates a new value (as the parameter) in the function. What you should be doing is passing by const reference to prevent a copy.</p>
<pre><code>        void Insert(string const&amp;);
        bool Search(string const&amp;);
        bool Delete(string const&amp;);
</code></pre>
<p>If you want to get advanced. The insert operator you can pass by r-value reference and allow the Node to re-use the pointer you created externally rather than make a copy when creating the node object.</p>
<pre><code>        void Insert(string&amp;&amp;);
</code></pre>
<hr>
<p>OK. SO you have different methods to iterate over the tree.</p>
<pre><code>        void Preorder()  {Preorder(root);}
        void Inorder()   {Inorder(root);}
        void Postorder() {Postorder(root);}
</code></pre>
<p>But I don't understand how that helps me. I can't do anything by simply iterating over the tree. So what does this give me? Let me take a look at their implementation.</p>
<p>Ahhh. They all call <code>print()</code>. So you can print out the tree in different orders. Sure that is fine. But name the functions mroe appropriately.</p>
<pre><code>        void PreorderPrint()  {PreorderPrint(root);}
        void InorderPrint()   {InorderPrint(root);}
        void PostorderPrint() {PostorderPrint(root);}
</code></pre>
<hr>
<p>Lets look at the traversal of the tree for a second.</p>
<p>Rather than simply supporting printing why not allow the user to iterate over the tree and perform some action. You could pass a functor (or lambda) as a parameter that then gets executed on each value in the tree.</p>
<p>Or you could implement the visitor pattern.</p>
<hr>
<p>Personally I think this is fine.</p>
<pre><code>        Node* root;
</code></pre>
<p>You are explicitly making the <code>BinarySearchTree</code> the owner of the tree. But with that comes some extra responsibility that you need to take on (more of that in a second). Alternatively you can use a smart pointer to manage the memory:</p>
<pre><code>        std::unique_ptr&lt;Node&gt;  root;
</code></pre>
<p>This delegates the ownership of the memory to <code>unique_ptr</code> to manage correctly (which it does).</p>
<p>So what is the problem with your code?<br>
Your code ownes the pointer <code>root</code> <strong>BUT</strong> you don't implement the rule of three (or five). This means your code is fundamentally broken.</p>
<pre><code>{
    BinarySearchTree   t;
    t.Insert("Loki");

    BinarySearchTree   t2(t);  // Shallow copy of the tree created.
                               // Both t and t2 have the same value of root.
                               // i.e. both point at the same tree.
}
// Both t and t2 go out of scope.
// t2 destroyed and calls clear on tree (OK).
// t1 destroyed and calls clear on tree (this is an issue as this tree
//                                       was already deleted......)
</code></pre>
<p>So if you want to make this a pointer you must implement the rule of three (look it up, it is a very common idiom in C++).</p>
<p>The easiest way to solve this is simply to use <code>std::unique_ptr</code> for root and then the left and right pointers in <code>Node</code>. But the rest of this review assumes you want to keep ownership and implement the extra methods to solve this.</p>
<hr>
<p>If a method does not modify the tree then it should be marked const.</p>
<pre><code> // I think all these functions should be marked const.
        bool Search(string, Node*&amp;, Node*&amp;);
        void Preorder(Node*);
        void Inorder(Node*);
        void Postorder(Node*);
        void FindMinOfRight(Node*, Node*&amp;, Node*&amp;);
</code></pre>
<hr>
<p>You are using "OUT" parameters. This is pretty horrible to read. It is easy to return a value and it makes it obvious what the function does. You can return multiple values by creating a simple class or using a wrapper like <code>std::pair</code> or <code>std::tuple</code>.</p>
<pre><code>        bool Search(string, Node*&amp;, Node*&amp;);
        void FindMinOfRight(Node*, Node*&amp;, Node*&amp;);
</code></pre>
<p>I think you will find it will also make some of your code simpler.</p>
<hr>
<p>Not sure what this private section is for.</p>
<pre><code>    private:
</code></pre>
<p>Just remove it.</p>
<hr>
<p>The value <code>NULL</code> is no longer considered good practice. This is because it is a macro and is usually a number (not sure on the exact definition). But as a result it can be assigned to things it should not be able to assigned to and thus hide errors.</p>
<p>In modern C++ we use <code>nullptr</code> to represent the value 'null'. It has a specific type <code>std::nullptr_t</code>. This type is automatically convertible to another pointer type but will not auto convert into a numeric type and thus can not accidentally be passed to  methods that take <code>int</code> as parameter.</p>
<hr>
<p>Prefer to use an initializer liest.</p>
<pre><code>BinarySearchTree::BinarySearchTree()
{
    root = NULL;
}
</code></pre>
<p>I would write like this:</p>
<pre><code>BinarySearchTree::BinarySearchTree()
    : root(nullptr)
{}
</code></pre>
<p>In this situation it does not make any difference (as there are no constructors called). But in a lot of situations this can cause a lot of extra work. So it is best to use the initializer list and be consistent about its use to prevent accidentally incurring extra cost.</p>
<p>If we look at the node constructor:</p>
<pre><code>Node(string s)
{
    word = s;
    occurences = 1;
    right = left = NULL;
} //Node's constructor initialises node's values
</code></pre>
<p>Example of a bad comment above!</p>
<p>But if we look at what is actually happening here. The member <code>word</code> is default constructed, then in the body you are calling the assignment operator to update <code>word</code> with the value of <code>s</code>. Effectively your code is equivalent to:</p>
<pre><code>Node(string s)
    : word()        // Note word is defaulted constructed here.
{
    word = s;       // Now we call the assignment operator.
    // STUFF
}
</code></pre>
<p>The better way to do it is using the initializer list:</p>
<pre><code>Node(string s)
    : occurences(1)
    , word(s)
    , right(nullptr)
    , left(nullptr)
    , height(0)
{}
</code></pre>
<hr>
<p>Your function names are so good.<br>
Why are your variable names so bad!!!!!</p>
<pre><code>void BinarySearchTree::FindMinOfRight(Node* n, Node* &amp;m, Node* &amp;pm)
{
   // STUFF

    m = n; //min               // You could have saved yourself a comment
                               // and made the code more readable by nameing
                               // these two variable "better"!!!!
    pm = prev_n; //parent min
}
</code></pre>
<hr>
<p>This could be better:</p>
<pre><code>void BinarySearchTree::FindMinOfRight(Node* n, Node* &amp;m, Node* &amp;pm)
</code></pre>
<p>You don't need to return two values. You need to return a reference to the pointer that needs to be changed.</p>
<pre><code>Node*&amp; BinarySearchTree::FindMinOfRight(Node*&amp; n)
{
    auto nRef = std::ref(n);

    while(nRef-&gt;left) {
        nRef = nRef-&gt;left;
    }
    return *nRef;
}

// See below for usage:
</code></pre>
<hr>
<p>Please always put in the braces.</p>
<pre><code>    if(!n)
        return;
</code></pre>
<p>I would write this:</p>
<pre><code>    if(!n) {
        return;
    }
</code></pre>
<p>The number of time I have fixed problems because people forgot that adding an indent line is not enough to make it executed by the loop the conditional etc...</p>
<hr>
<p>OK this is fine:</p>
<pre><code>    Clear(n-&gt;left);
    Clear(n-&gt;right);
    delete n;
</code></pre>
<p>I disagree with @ALX23z that this is likely to cause a SO. Remember that most implementations are going to use <code>std::unique_ptr&lt;Node&gt;</code>. This results in exactly the same behavior.</p>
<p><strong>BUT</strong>. If you do want to do this optimally its not that hard to convert this from a recursive call into a serial call.</p>
<pre><code> void Clear(Node* n)
 {
     if (!node) {
         return;
     }

     // We are going to flatten the tree into a list.
     // by moving all the right nodes to the botomLeft as we go.
     // So:
     //     bottomLeft:  represents the current bottom left of our list.
     //     n:           The node we are about to delete.
     //                  If n has a right node then move it to the bottomLeft
     //                  and move the `bottomLeft` to a new point.
     //                  Now we can delete `n`
     //
     // We will eventually reach the end.
     // This is a simple serial deltion of the tree using a loop.

     Node* bottomLeft = n;
     while (bottomLeft-&gt;left) {
         bottomLeft = bottomLeft-&gt;left;
     }

     while (n) {
         bottomLeft-&gt;left = n-&gt;right;
         while (bottomLeft-&gt;left) {
             bottomLeft = bottomLeft-&gt;left;
         }
         Node* next = n-&gt;left;
         delete n;
         n = next;
     }
}
</code></pre>
<hr>
<p>You make this way to hard:</p>
<pre><code>void BinarySearchTree::Insert(string s)
</code></pre>
<p>I would re-write like this:</p>
<pre><code>void BinarySearchTree::Insert(string const&amp; s)
    root = Insert(s, root);
}

Node* BinarySearchTree::Insert(string const&amp; s, Node* n)
    if (n == nullptr) {
        return new Node(s);
    }
    if (s &lt; n.value) {
        n-&gt;left = Insert(s, n-&gt;left);
    }
    else if (n.value &lt; s) {
        n-&gt;right = Insert(s, n-&gt;right);
    }
    else {
        n-&gt;occurences++;
    }
    return n;
}
</code></pre>
<hr>
<p>Easy mistake:</p>
<pre><code>            prev_n-&gt;left = new Node(s);

        // This will NEVER be called.    
            if(!prev_n-&gt;left)
                cout&lt;&lt;"Memory allocation failed"&lt;&lt;endl;
</code></pre>
<p>If <code>new</code> fails (i.e. it can't allocate anything) then it throws an exception. It will never return <code>nullptr</code>.</p>
<hr>
<p>Nothing wrong here (apart from unholy bad comments).</p>
<pre><code>bool BinarySearchTree::Search(string s)
{
    Node* n = root;

    while(n)
    {
        if(s &gt; n-&gt;word)
            n = n-&gt;right;
        else
        {
            if(s &lt; n-&gt;word)
                n = n-&gt;left;
            else
            {
                cout&lt;&lt;"Word: "&lt;&lt;n-&gt;word&lt;&lt;" Occurences: "&lt;&lt;n-&gt;occurences&lt;&lt;endl;
                return true;
            }
        }
    }
    return false;
}
</code></pre>
<p>But I would simply write those <code>if else</code> blocks like they were all part of the same test.</p>
<pre><code>bool BinarySearchTree::Search(string s)
{
    Node* n = root;

    while(n)
    {
        if(s &gt; n-&gt;word) {
            n = n-&gt;right;
        }
        else if(s &lt; n-&gt;word) {
            n = n-&gt;left;
        }
        else
        {
            cout&lt;&lt;"Word: "&lt;&lt;n-&gt;word&lt;&lt;" Occurences: "&lt;&lt;n-&gt;occurences&lt;&lt;endl;
            return true;
        }
    }
    return false;
}
</code></pre>
<hr>
<p>Man you make this complicated:</p>
<pre><code>bool BinarySearchTree::Delete(string s)
</code></pre>
<p>Easier:</p>
<pre><code>bool BinarySearchTree::Delete(string const&amp; s) {
    bool result = false;
    root = Delete(s, root, result);
    return result;
}

Node* BinarySearchTree::Delete(string const&amp; s, Node* n, bool&amp; result) {
    if (n == nullptr) {
        return nullptr;
    }

    Node* retValue = n;

    if (s &lt; n.value) {
        n-&gt;left = Delete(s, n-&gt;left, result);
    }
    else if (n.value &lt; s) {
        n-&gt;right = Delete(s, n-&gt;right, result);
    }
    else {
         // Found the node we want to delete:
         result = true;

         if (node-&gt;left == nullptr &amp;&amp; node-&gt;right == nullptr) {
             retValue = nullptr
         }
         else if (node-&gt;left == nulltr) {
             retValue = node-&gt;right;
         }
         else if (node-&gt;right == nullptr) {
             retValue = node-&gt;left;
         }
         else {
            Node*&amp;   nodeToReplaceThis = FindMinOfRight(n-&gt;right);
            n-&gt;value = nodeToReplaceThis-&gt;value;
        
            n = nodeToReplaceThis;
            nodeToReplaceThis = n-&gt;right;  // Remember this is a reference
                                           // So we are effectively changing
                                           // what the parent node points at.

            // Note: No change in retValue.
            //       and n has been moved to the node we want to delete.
         }
         delete n;
    }
    return retValue;
}
</code></pre>
    </div>