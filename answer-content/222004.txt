<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Disclaimer: IÂ´m not an expert in redux / redux-saga. This post is not directly answering your questions. Rather, it is focused on code design / architecture and what is the most useful approach for the underlying problem.</p>

<p>For me, the main question is: Who is in charge of determining when the data is invalid?</p>

<p>Imho, there are at least three answers to this:</p>

<ol>
<li>The API / backend / server</li>
<li>The frontend application</li>
<li>One particular UI component</li>
</ol>

<p>If it is 1., then I would use HTTP cache headers like <code>Cache-Control: max-age=150</code>. This way, the backend can change the value without requiring to adapt the frontend. Also, it removes the need for any conditional code. The saga can always call the API and the browser does the caching.</p>

<p>If it is 2., then the saga should contain the conditional code to determine whether to fetch new data or to used cached values. Where to put the actual cache and how to do this is a question on its own with regards to frontend application architecture.</p>

<p>If it is 3., then the particular UI component should contain the conditional code and it should also contain / be in charge of the cached values.</p>
    </div>