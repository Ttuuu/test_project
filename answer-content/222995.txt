<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>- <code>__func__</code></strong></p>

<p><code>__func__</code> exists for a reason; use it instead of <code>const char *unit_name = #UNAME;</code>:</p>

<pre class="lang-c prettyprint-override"><code>cmc_test_log(__func__, current_test, true, false);
...
printf("| Unit Test Report : %-30s|\n", __func__);
</code></pre>

<hr>

<p><strong>- <code>printf("%s", NULL);</code></strong></p>

<p>Strictly speaking, that is Undefined Behaviour.  glibc has a trick, and prints <code>(null)</code> instead, but that trick is very unreliable, because if gcc decides to optimize <code>printf</code> into <code>puts</code>, then UB is invoked (read more: <a href="//stackoverflow.com/q/45738298"><em>Adding newline character to printf() changes code behaviour</em> on Stack Overflow</a>).</p>

<p>So this code is probably invoking UB, given that all arguments are known at compile time, and the format string ends in <code>\n</code> (<code>current_test</code> was defined here: <code>const char *current_test = NULL;</code> (Why <code>const</code> and <code>NULL</code>???)).</p>

<pre class="lang-c prettyprint-override"><code>#ifdef CMC_TEST_COLOR
        printf("UNIT_TEST %s %sABORTED\x1b[0m AT %s\n",
                        unit_name,
                        cmc_test_color[2],
                        current_test);
#else
</code></pre>

<hr>

<p><strong>- Differentiate <code>typedef</code>ed identifiers from variable names</strong></p>

<p>The easiest thing is to use <code>_s</code> for <code>struct</code>s (Or just don't <code>typedef</code> at all)  (not <code>_t</code>; it is reserved by <a href="https://pubs.opengroup.org/onlinepubs/9699919799/functions/V2_chap02.html" rel="nofollow noreferrer">POSIX</a>).  You did it once, but forgot to do it in one of the <code>typedef</code>s (<code>cmc_test_info</code>).</p>

<p>Solution:</p>

<pre class="lang-c prettyprint-override"><code>struct cmc_test_info_s {
    uintmax_t total;
    uintmax_t passed;
    uintmax_t failed;
    bool aborted;
    bool verbose;
};
typedef struct cmc_test_info_s cmc_test_info_s;
</code></pre>

<hr>

<p><strong>- Function-like macros</strong></p>

<p>Macros that behave like function calls should be named with lowercase to simulate functions, and help differentiate them of other macros that don't behave like functions:</p>

<pre class="lang-c prettyprint-override"><code>#define timer_calc(timer)   do                              \
{                                                           \
    struct timer_s  *t_ = timer;                            \
    double          diff;                                   \
                                                            \
    diff        = t_-&gt;stop - t_-&gt;start;                     \
    t_-&gt;result  = diff * 1000.0 / CLOCKS_PER_SEC;           \
} while (0)

#define CMC_CREATE_UNIT(UNAME, verbose, BODY)               \
void UNAME(void)                                            \
{                                                           \
...
                                                            \
}
</code></pre>

<p>Variables local to a macro should use names that are unlikely to be used in the calling function to avoid shadowing a variable (Imagine what would happen if the calling function called the macro this way: <code>timer_calc(t_);</code>).  The usual convention is to add a trailing underscore to names local to a macro.</p>

<hr>

<p><strong>- macros that depend on having a local variable with a magic name (source: <a href="https://www.kernel.org/doc/html/v4.10/process/coding-style.html#macros-enums-and-rtl" rel="nofollow noreferrer">Linux Kernel Coding Style</a>)</strong></p>

<pre class="lang-c prettyprint-override"><code>#define FOO(val) bar(index, val)
</code></pre>

<p>might look like a good thing, but it’s confusing as hell when one reads the code and it’s prone to breakage from seemingly innocent changes.</p>

<p>Easy solution:</p>

<pre class="lang-c prettyprint-override"><code>#define cmc_test_fail(tinfo, current_test)  do              \
{                                                           \
    struct cmc_test_info_s  tinfo_  = tinfo;                \
                                                            \
    tinfo_.failed++;                                        \
    if (tinfo_.verbose)                                     \
        cmc_test_log(__func__, current_test, false, false); \
                                                            \
} while (0)
</code></pre>
    </div>