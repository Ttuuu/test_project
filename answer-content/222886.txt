<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Design</h1>

<p>Your API allows consumers to navigate people by their relationships to other people. For this reason, it surprises me you define a person as a simple DTO. By making this decision, you require static classes to store the relationships and fishy extension methods to get the relationships.</p>

<blockquote>
<pre><code> public static IEnumerable&lt;Person&gt; Children(this Person person, Gender? gender = null)
 {
     List&lt;Person&gt; result = new List&lt;Person&gt;();
     IPersonRelationships personRelationships = FamilyGraph.Get(person); // &lt;- code-smell
     // .. 
 }
</code></pre>
</blockquote>

<p>You could make a much cleaner API by using best practices when dealing with family trees. <code>Person</code> should not be a DTO, but a node instead. This allows navigation amongst people without having to require static dependencies.</p>

<pre><code>public class Person
{
    public Person Father { get; private set; }
    public Person Mother { get; private set; }
    public Person Spouse { get; private set; }
    public IReadonlyCollection&lt;Person&gt; Children { get { /* .. */ }}

    // constructor, properties, and methods ..
}
</code></pre>

<p>Navigating the family tree becomes much simpler.</p>

<pre><code>var grandMotherOfSpouseOfFatherOfAria = Aria.Father.Spouse.Mother.Mother;
</code></pre>

<p>Classes like <code>Edge</code> and <code>Relationships</code> have no added value for the consumer of the API. If you should decide to keep using them, make them private to the API.</p>
    </div>