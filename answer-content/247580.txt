<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Fun project, but I feel like you have overengineered this quite a bit... Why not just build the url from the given values without all the <code>"@@"</code>? I see there is some difference between URLs, but my first suggestion would be to make them uniform and have a simple function that builds the url from the given components to reduce the complexity enormously.</p>
<p>But ok, let us focus on your code and how it can be improved.</p>
<p>I copied your code and it didn't run. in your function <code>replaceAllTagsToValue</code>, you are calling <code>.reduce</code> on a value, which will always be an object in your code. You cannot reduce an object so I don't know how this "works correctly" or, in fact, works at all. Nevermind that, I understand what you're trying to do! Let's have a look at my suggested edits:</p>
<pre class="lang-js prettyprint-override"><code>const translator = {
  "@@login@@":  (user) =&gt; user.login,
  "@@passwd@@": (user) =&gt; user.passwd,
  "@@ip@@":     (_, camera) =&gt; camera.ip,
  "@@stream@@": (_, camera, type) =&gt; camera.flux[type].stream,
  "@@port@@":   (_, camera, type) =&gt; camera.flux[type].port,
  "@@flux@@":   (_, camera, type, flux) =&gt; camera.flux[type][flux]
};

const makeCameraUrl = (user, camera, type, flux) =&gt;
  Object.entries(translator)
  .reduce(
    (url, [key, value]) =&gt; url.replace(key, value(user, camera, type, flux)),
    camera.url);

const user = json.users.view;
const camera = json.devices[102];
const type = "rtsp";
const flux = "hd";
makeCameraUrl(user, camera, type, flux);
// &gt; "rtsp://user:yyyyyy@192.168.0.102:554/1"
</code></pre>
<p>You are actually doing a lot of nice stuff:</p>
<ul>
<li>Properly using <code>const</code> for immutable values</li>
<li>Using arrow notation for simple one-line functions</li>
<li>Tricky higher-order array functions such as <code>reduce</code></li>
</ul>
<p>But there seems to be a problem with every one of those points. To start:</p>
<hr>
<h1>‚öõÔ∏è <code>const</code>antly changing</h1>
<p>In javascript, you have <em>four</em> ways of declaring (I know, JS is horrible) a variable: <code>var</code>, <code>let</code>, <code>const</code> or none of those to define a global. For the sake of brevity: <em><strong>never use var</strong></em> (it's weird) and <em><strong>never make globals</strong></em> (this pollutes your namespace and maybe even other people's code).</p>
<p>As for <code>let</code> and <code>const</code>, they function identically to eachother but with an important difference: <code>const</code> declares a variable (or a <em>constant</em>, rather) that is <em>immutable</em> -- it cannot be changed after declaration.</p>
<pre class="lang-js prettyprint-override"><code>const immutable = 1;
immutable = 2;
// &gt; TypeError: Assignment to constant variable.
</code></pre>
<p>You can't reassign it.</p>
<p>This is useful for technical reasons (your javascript engine could optimise your code under the hood), but also for reasons of readability and deliberateness. When you use <code>const</code>, you're telling me, the reader, <em>"I'm declaring a value here that I will not change later on, don't worry."</em> I know I can trust this because javascript wouldn't even let you re-assign it even if you tried. You start off your program with two <code>const</code>s, but then you drop it and create a <em><strong>global</strong></em> üò±:</p>
<pre class="lang-js prettyprint-override"><code>makeCameraUrl = function (camera, type, flux, user) {
  //...
}
</code></pre>
<p>You have now created a function that will take up memory forever until you explicitly remove it from the global scope, and maybe you have just overwritten some other global value with that name... Globals, like I said, are a nightmare and <em>I strongly advice against ever using them</em> (like this anyways). The simplest fix here is to just plonk a <code>const</code> before it and we're save again:</p>
<pre class="lang-js prettyprint-override"><code>const makeCameraUrl = function (camera, type, flux, user) {
  //...
}
</code></pre>
<hr>
<h1>üìè <code>let</code>s set this straight</h1>
<p>But then, you're suddenly using <code>let</code>...</p>
<pre class="lang-js prettyprint-override"><code>let cam_id = "102";
let url = makeCameraUrl(cameras_cfg.devices[cam_id], "rtsp", "hd", cameras_cfg.users.view);
</code></pre>
<p>The purpose of <code>let</code> is to create a <em>mutable</em> variable; its value can change at any time, in any place. Personally I think that's not a wise way to treat a value because we humans are dumb and history has shown us we are not good at keeping track of mutation of our variables.</p>
<p>But alright, if you <em>have</em> to change a value then go ahead and use <code>let</code>. But what I'm seeing here are values that never change. I know this because I read through the entire code, but I would have liked to know this from the start. When you use <code>let</code>, you're telling the reader <em>"Hey, I'm defining a value here but I'm going to change it later on."</em> When you never change a variable you've defined with <code>let</code>, you're lying ü§• -- and code should never lie.</p>
<p>Again, the simplest fix here is to just make it <code>const</code>:</p>
<pre class="lang-js prettyprint-override"><code>const cam_id = "102";
const url = makeCameraUrl(cameras_cfg.devices[cam_id], "rtsp", "hd", cameras_cfg.users.view);
</code></pre>
<hr>
<h1>üîÅ Consistency</h1>
<p>Not only did you use three ways of defining variables, you also use two ways of defining functions. Again, all these inconsistencies make your code have <a href="https://commadot.com/wtf-per-minute/" rel="nofollow noreferrer">a high amount of WTF/minute</a>.</p>
<p><img src="https://i2.wp.com/commadot.com/wp-content/uploads/2009/02/wtf.png" alt="WTF/minute as a measure of code quality"></p>
<p>It doesn't matter wich way you define functions, as long as you are deliberate about it. <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this" rel="nofollow noreferrer">In javascript there's only <em>one</em> reason to differentiate between function types</a> but that doesn't apply to your code, so I suggest you just use arrow functions like you did in the beginning:</p>
<pre class="lang-js prettyprint-override"><code>const makeCameraUrl = (camera, type, flux, user) =&gt; {
  //...
}
</code></pre>
<p>This code tells me there is nothing fancy going on besides a plain old function -- just how I like them.</p>
<p>This matter of consistency also applies to the way you name things. You use both <code>snake_case</code> and <code>camelCase</code>, but I couldn't really find a reason for the difference.</p>
<pre class="lang-js prettyprint-override"><code>const cameras_cfg = //...
const replaceAllTagsToValue =  //...

makeCameraUrl =  //...

let cam_id =  //...
let url = //...
</code></pre>
<p>If I'm right in this assumption (code that requires assumptions has a high rate of WTF/minute), please stick to either one to avoid such confusion. Again, doesn't matter which one, just stick to it after you choose (<a href="https://eslint.org/" rel="nofollow noreferrer">things such as casing and other issues of consistency can be alleviated by using code linters such as eslint</a>).</p>
<p>Personally I don't like either way of casing my variables but my preference would go to <code>camelCase</code> because that way I don't have to contort my hand to type underscores all the time. As for legibility, I'd say that <code>snake_case</code> is better. You choose.</p>
<pre class="lang-js prettyprint-override"><code>const cameraConfig = //...
const replaceAllTagsToValue =  //...

makeCameraUrl =  //...

let cameraId =  //...
let url = //...
</code></pre>
<p>On a side-note: I took the liberty to change some variables to better describe what they are:</p>
<ul>
<li><code>camera_cfg</code>... Luckily I know that cfg is short for <em>config</em>, but don't make me guess. Plase don't abbreviate your variable names -- we're not in the 1900's anymore üòã. Also, is it really a config? Are you using this json to allow for customisation, or are you just using it to store data?</li>
<li><code>cam_id</code>... Camper id? Camouflage id? I understand that you mean <em>camera</em>, but <em>the less I have to interpret what you mean, the better I understand what you actually mean.</em> Deliberateness is actually the most important part of programming; functioning code is merely a byproduct.</li>
</ul>
<hr>
<h1>ü•© The meat</h1>
<p>Now that the low hanging fruit is out of the way, let's look at the most important part (the meat) of your program:</p>
<pre class="lang-js prettyprint-override"><code>makeCameraUrl = function (camera, type, flux, user) {
    var url = camera.url;
    var Obj = {
        "@@login@@": user.login,
        "@@passwd@@": user.passwd,
        "@@ip@@": camera.ip,
        "@@stream@@": camera.flux[type].stream,
        "@@port@@": camera.flux[type].port,
        "@@flux@@": camera.flux[type][flux]
    };
    return replaceAllTagsToValue(Obj, url)
}
</code></pre>
<p>If I understand correctly, you're using an object to encode information about a camera, and putting that info into the camera's url and return it. That's a great idea, but the way you did it has a few nasty side-effects.</p>
<p>Creating an object in every function call (<code>Obj</code> in this case) is expensive, and <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Memory_Management" rel="nofollow noreferrer">the garbage collector</a> will make your browser hang a little everytime your single-use objects need discarding. My proposed solution is to <em>yoink</em> the object out of the function scope, and into the scope of the rest of the program. To keep the dynamic nature of the values of the object, I used functions:</p>
<pre class="lang-js prettyprint-override"><code>const translator = {
  "@@login@@":  (user) =&gt; user.login,
  "@@passwd@@": (user) =&gt; user.passwd,
  "@@ip@@":     (_, camera) =&gt; camera.ip,
  "@@stream@@": (_, camera, type) =&gt; camera.flux[type].stream,
  "@@port@@":   (_, camera, type) =&gt; camera.flux[type].port,
  "@@flux@@":   (_, camera, type, flux) =&gt; camera.flux[type][flux]
};
</code></pre>
<p>The way these functions are set up, allows you to just call them with predefined arguments (<code>makeCameraUrl(user, camera, type, flux)</code>) and always get the correct value back. The underscore (<code>_</code>) in some of these functions is a colloquial way of saying <em>"I'm not interested in this parameter."</em> It's quite universal between languages.</p>
<p>Lastly, I took the liberty to change your code a bit to make it run so your <code>makeCameraUrl</code> function does what I think you meant it should do:</p>
<pre class="lang-js prettyprint-override"><code>const makeCameraUrl = (user, camera, type, flux) =&gt;
  Object.entries(translator)
    .reduce(
      (url, [key, value]) =&gt; url.replace(key, value(user, camera, type, flux)),
      camera.url);
</code></pre>
<p>We loop over all <em>entries</em> of the <code>translator</code> object, which yields an array like this:</p>
<pre class="lang-js prettyprint-override"><code>[
  ["@@login@@",  () =&gt; /*...*/]
  ["@@passwd@@", () =&gt; /*...*/]
  ["@@ip@@",     () =&gt; /*...*/]
  ["@@stream@@", () =&gt; /*...*/]
  ["@@port@@",   () =&gt; /*...*/]
  ["@@flux@@",   () =&gt; /*...*/]
]
</code></pre>
<p>An entry is a two-element array with its first element being the key, and the second being its value.</p>
<p>We then <code>reduce</code> over these entries, starting with a default value of the camera's URL. I'm going to write out the lengthy version of what this reduce does:</p>
<pre class="lang-js prettyprint-override"><code>const makeCameraUrl = (user, camera, type, flux) =&gt;
  Object.entries(translator)
    .reduce(
      (url, [key, value]) =&gt; url.replace(key, value(user, camera, type, flux)),
      camera.url);

// Is the same as the following:

const makeCameraUrl = (user, camera, type, flux) =&gt;
  camera.url
    .replace("@@login@@",  translator["@@login@@"](user, camera, type, flux))
    .replace("@@passwd@@", translator["@@passwd@@"](user, camera, type, flux))
    .replace("@@ip@@",     translator["@@ip@@"](user, camera, type, flux))
    .replace("@@stream@@", translator["@@stream@@"](user, camera, type, flux))
    .replace("@@port@@",   translator["@@port@@"](user, camera, type, flux))
    .replace("@@flux@@",   translator["@@flux@@"](user, camera, type, flux));

// Is the same as the following:

const makeCameraUrl = (user, camera, type, flux) =&gt;
  camera.url
    .replace("@@login@@",  user.login)
    .replace("@@passwd@@", user.passwd)
    .replace("@@ip@@",     camera.ip)
    .replace("@@stream@@", camera.flux[type].stream)
    .replace("@@port@@",   camera.flux[type].port)
    .replace("@@flux@@",   camera.flux[type][flux]);
</code></pre>
<p>Quite elegant, if this was your intention.</p>
<hr>
<h1>üèÅ The end</h1>
<p>Hopefully you've learned some things form this answer (if not, sorry for the long post ü§∑). It's a good start, but keep my tips in mind and you'll be a JS guru in no time :)</p>
    </div>