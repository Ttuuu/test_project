<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The first obvious optimization would be to not call <code>Regex.Matches(string, string)</code> which compiles the regular expression <strong>every single time</strong>. Compiling the regex is an expensive operation.</p>

<p>Instead, create a <code>Regex</code> (which compiles the expression exactly once) and keep it around during your several thousand invocations. That should by itself do the trick (because, well, a few <em>thousand</em> matches is really no challenge to a modern computer).</p>

<p>Also, if you are desperate, you could do without regex. You could switch by string length, which only leaves you to distinguish between <code>x</code> and <code>y</code> (all others have distinct string lengths).<br>
Or, you could look at the first character (or the first, and another one, if you maybe have more keywords). Some minimal perfect hash generators (I forgot which one, gperf maybe?) apply that trick for very quickly matching a known set of keywords. Brackets are only possible in a particular context, so you don't really need to match for them all the time.</p>
    </div>