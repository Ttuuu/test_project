<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Invalid code</strong></p>

<p>In <code>while ((x = getc(file)) != EOF)</code>, where is <code>x</code> defined? <sup>1</sup></p>

<pre><code>error: 'x' undeclared (first use in this function)
</code></pre>

<p><strong>Use of uninitialized object</strong></p>

<p>The pointer <code>mes</code> is passed to <code>mpz_export()</code> without initialization/assignment.</p>

<pre><code>int *mes;
...
// Garbage value pass to  `mpz_export(void *rop, ...)`
mpz_export(mes, (size_t*) malloc(sizeof(size_t)), 1, sizeof(mes[0]), 0, 0,
...
r[i] = (char) mes[i];
</code></pre>

<p>The compiler warning hinted to this problem.  This implies code is not using a good compiler will all warnings enabled.  Save time.  Enable then all.</p>

<pre><code>warning: 'mes' may be used uninitialized in this function [-Wmaybe-uninitialized]
</code></pre>

<p>I suspect the following will fix</p>

<pre><code>//int *mes;
//int len = strlen(msg);
int len = strlen(msg);
int mes[len + !len]; // Insure VLA is at least size 1

// Unsure about mpz_export() repair needs.
// mpz_export(mes, (size_t*) malloc(sizeof(size_t)), 1, sizeof(mes[0]), 0, 0, dc);
mpz_export(   mes,           malloc(sizeof(size_t)), 1, sizeof mes    , 0, 0, dc);
</code></pre>

<p><strong>Passing by reference cheat</strong></p>

<p>The <code>mpz</code> library <strong>cheats</strong>.</p>

<p><code>typedef __mpz_struct mpz_t[1];</code> defines <code>mpz_t</code> as an array of 1. </p>

<p>Consider the following:</p>

<pre><code>extern void foo(mpz_t arg1);
mpz_t a;
foo(a);
</code></pre>

<p>In common C, one would <strong>not</strong> expect <code>a</code> to be modified by <code>foo()</code> as C is <em>pass by value</em> .  Yet since <code>a</code> is an array of <code>__mpz_struct</code>, <code>a</code> is converted from its value as an array to the addresses of <code>a[0]</code>.  It is that address that is passed by value to  <code>foo</code>.  Now <code>foo()</code> can change the caller's <code>a</code>.</p>

<p>To prevent/allow changing <code>mpz_t</code> augments, the <code>mpz</code> library uses <code>const</code>.</p>

<pre><code>//       can change,     can't change,    can't change,    can't change
mpz_powm (mpz_t rop, const mpz_t base, const mpz_t exp, const mpz_t mod)
</code></pre>

<p>But what should OP's function do?  Take advantage of the hidden "call-by-reference"?</p>

<p>Consider OP's <code>dec()</code></p>

<pre><code>void dec(mpz_t* m, mpz_t* c, mpz_t* d, mpz_t* n) {
  mpz_powm(*m, *c, *d, *n);
}
</code></pre>

<p>This should use <code>const</code> to indicate which may change.</p>

<pre><code>void dec_alt1(mpz_t* m, const mpz_t* c, const mpz_t* d, const mpz_t* n) {
  mpz_powm(*m, *c, *d, *n);
}
</code></pre>

<p>It is quite unnecessary to pass 4 <code>mpz_t*</code> pointers. Code could have been the following which is also passing 4 pointers.</p>

<pre><code>void dec_alt2(mpz_t m, const mpz_t c, const mpz_t d, const mpz_t n) {
  mpz_powm(m, c, d, n);
}
</code></pre>

<p>Alternatively, code could avoided the hidden "pass-by-reference":</p>

<pre><code>void dec_alt3(mpz_t *m, const mpz_t c, const mpz_t d, const mpz_t n) {
  mpz_powm(*m, c, d, n);
}
</code></pre>

<p><strong>Avoid casual sign changes</strong></p>

<p>Code could have easily called <code>mpz_set_si (mpz_t rop, signed long int op)</code> rather  than <code>mpz_set_ui (mpz_t rop, unsigned long int op)</code> and avoided a warning:</p>

<pre><code>warning: 
conversion to 'long unsigned int' from 'long int' may change the sign of the result [-Wsign-conversion]
</code></pre>

<p>This implies the compilation was not done with <code>-Wsign-conversion</code> or its equivalent. </p>

<p>Casual sign-ness changes are a source of bugs. Save time and enable the warning to help weed code of causal changes.  There are at least 4 in OP's code.</p>

<pre><code>long sd = 0;
sd = rand();
// mpz_set_ui(seed, sd);
mpz_set_si(seed, sd);
</code></pre>

<hr>

<p><sup>1</sup> This error make code not compilable, one of the reasons for closing the question.  Let us count this as a copy/paste error. Still, better to be certain that the code <em>posted</em> compiles, not just the code on your computer.</p>
    </div>