<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>At first glance, I see a a lot of good usage of the standard library. So, the remarks I have are rather small:</p>

<ul>
<li>in huffman(), you create a vector <code>nodes</code>, as you know exactly the amount of elements to store into it, I would reserve it. This reduces memory usage slightly and improves performance. (<code>nodes.reserve(freq.size())</code>)</li>
<li>In the same function, you don't seem to have handling for <code>size == 0</code>, most likely because of the simplification?</li>
<li>a small optimization in the for-loop, you can use <code>std::move()</code> on <code>x</code> and <code>y</code>.</li>
<li>In build_huffman_condings, you have <code>std::string accumulator =""</code>. It's better to write <code>= std::string{}</code>  as this doesn't require <code>strlen</code> to be called.</li>
</ul>

<p>On the more high level, I am wondering about the used datastructures, especially <code>std::map</code>. I know <code>std::unordered_map</code> ain't an ideal hash-map, though, it does perform better than <code>std::map</code> if you don't need ordering. I don't see in your code that need, hence I would recommend replacing it. (You can also use abseil ... for a better implementation, or as the values are small, boosts flat_map)</p>

<p>In short, your usage of the standard library looks fine.</p>
    </div>