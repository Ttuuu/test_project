<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here's how I'd clean up the ConfusionMatrix class. I don't know anything about this algorithm, but this should be equivalent code. You can calculate and set these read-only values at their declaration sites if you do them in order. So all parameters can be <code>val</code> and you don't need <code>lazy</code>, which wraps your property in a <code>Lazy</code> class. There are no custom getters and there are no setters, so the whole class is immutable and compact with no references to anything else once it's instantiated.</p>
<pre><code>class ConfusionMatrix(filter: BloomFilter, entriesInFilter: Array&lt;String&gt;, entriesNotInFilter: Array&lt;String&gt;) {
    private val inFilterCount = entriesInFilter.size
    private val notInFilterCount = entriesNotInFilter.size

    private val truePositiveCount = entriesInFilter.count { filter.maybeExists(it) }
    private val falseNegativeCount = entriesInFilter.size - truePositiveCount
    private val falsePositiveCount = entriesNotInFilter.count { filter.maybeExists(it) }
    private val trueNegativeCount = entriesNotInFilter.size - truePositiveCount

    val accuracyRate = (truePositiveCount + trueNegativeCount).toDouble() / (notInFilterCount + inFilterCount)
    val misclassificationRate = 1.0 - accuracyRate
    val truePositiveRate = truePositiveCount.toDouble() / inFilterCount 
    val trueNegativeRate = trueNegativeCount.toDouble() / notInFilterCount
    val falsePositiveRate = falsePositiveCount.toDouble() / notInFilterCount
    val falseNegativeRate = falseNegativeCount.toDouble() / inFilterCount

    fun printReport() {
        val dataRows = mapOf(
            "Accuracy" to accuracyRate,
            "Misclassification rate" to misclassificationRate,
            "True positive rate" to truePositiveRate,
            "True negative rate" to trueNegativeRate,
            "False positive rate" to falsePositiveRate,
            "False negative rate" to falseNegativeRate
        )
        val printer = Printer(dataRows)
        printer.print()
    }
}
</code></pre>
<p>Knowing nothing of the algorithm, I'd say BloomFilter is pretty clean, but you could more naturally write the declaration of <code>salts</code> like this:</p>
<pre><code>private val salts = (0..numberOfHashes).map { it.toString() }
</code></pre>
<p>or</p>
<pre><code>private val salts = (0..numberOfHashes).map(Int::toString)
</code></pre>
<p>The second form is usually preferred to lambdas when there's a function that exactly matches the required signature because it shows the type. Not really helpful here, but helpful in a chain of functional calls to make it more readable later.</p>
<p>In your main method, a couple of little tips...</p>
<p>When you want to do some sort of logging type of action without side effects as you are assigning something to a variable, you can use <code>also</code>. It kind of de-emphasizes it for someone reading your code, especially if it's some action that takes a few lines of code. It's not all that useful here since this is so simple, but might be handy for you in other situations.</p>
<pre><code>val confusionMatrix = ConfusionMatrix(filter, entriesInFilter, entriesNotInFilter)
    also { it.printReport() }
</code></pre>
<p>And there's a function for asserting something and throwing a runtime exception if it fails, so your last bit can be cleaned up:</p>
<pre><code>require(confusionMatrix.falseNegativeRate &gt; 0.0) {
    "This should not happen, if it does the implementation of the bloom filter is wrong."
}
</code></pre>
    </div>