<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Thanks for sharing your code.</p>

<p>It is a really good for the first attempt. </p>

<p>Nevertheless there is something to mention...</p>

<h1>Naming</h1>

<p>Finding good names is the hardest part in programming. So always take your time to think carefully of your identifier names.</p>

<h2>Choose your names from the problem domain</h2>

<p>You have some identifiers which are named after their technical implementation like this:</p>

<pre><code>Container container;
JButton increaseCookiesButton;
JButton button;
</code></pre>

<p>They should have names that reveal their task within your application. </p>

<pre><code>Container coockieDisplay;
JButton cookiesIncreaser;
JButton buildingImprover;
</code></pre>

<h2>Naming Conventions</h2>

<p>Please read (and follow) the <a href="http://www.oracle.com/technetwork/java/codeconventions-135099.html" rel="noreferrer">Java Naming Conventions</a></p>

<p>eg.:<br>
* Your <code>boolean</code> variables and methods returning a <code>boolean</code> should start with <code>is</code>, <code>has</code>, <code>can</code> or the like.
* Method names should start with a <em>verb</em>.
* Class and variable names should be <em>nouns</em>.</p>

<h2>Don't surprise your readers</h2>

<p>Also you have variable names that start with  <em>verbs</em> like</p>

<pre><code>JButton increaseCookiesButton;
Timer actualizeProgress = new java.util.Timer();
Timer getMoreBuildings = new java.util.Timer();
</code></pre>

<p>But according to the <a href="http://www.oracle.com/technetwork/java/codeconventions-135099.html" rel="noreferrer">Java Naming Conventions</a>, only <em>methods</em> should start with a verb. So they might better be named like this:</p>

<pre><code>JButton cookiesIncreaser;
Timer progressUpdater = new java.util.Timer();
Timer buildingsUnlocker = new java.util.Timer();
</code></pre>

<h1>Coding practice</h1>

<h2>Magic numbers</h2>

<p>You code has some literal numbers with special meaning like here:</p>

<pre><code>if (bakeryUnlocked == false
        &amp;&amp; clicker &gt;= 2) {
</code></pre>

<p>This should be extracted to <em>constants</em> with a name that expresses the meaning:</p>

<pre><code>private static final int MINIMUM_UPGRADE_LEVEL = 2;
// ...
if (bakeryUnlocked == false
        &amp;&amp; clicker &gt;= MINIMUM_UPGRADE_LEVEL) {
</code></pre>

<h2>Use of boolean</h2>

<p>At some places you compare a <code>boolean</code> variable with a literal <code>boolean</code> value:</p>

<pre><code>if (bakeryUnlocked == false
        &amp;&amp; clicker &gt;= 2) {
    bakery.unlock();
</code></pre>

<p>Don't do that use the boolean variable directly and use the <em>negation operator</em> if needed:</p>

<pre><code>if (!isBakeryUnlocked 
        &amp;&amp; clicker &gt;= 2) {
    bakery.unlock();
</code></pre>

<h2>Avoid unnecessary members</h2>

<p>You have a variable <code>container</code> which is a member in your class <code>CookieClicker</code>. But in <code>CookieClicker</code> you only need it to initialize its content. You never use it outside the constructor. Therefore it should be a <em>local variable</em> in the constructor.  </p>

<p>You use <code>container</code> in your other <em>(named inner)</em> class <code>Building</code>. But there you access the variable of <code>Building</code>s <em>outer class</em> <code>CookieClicker</code>. There are some cases where this is OK, especially when the accessing class is an <em>anonymous inner class</em>. But in this case you should pass the <code>container</code> as <em>constructor parameter</em> to <code>Building</code>:</p>

<pre><code>public CookieClicker() {
    container = getContentPane();
    container.setLayout(new GridLayout(5, 1));

    bakery = new Building("Bakery", 0, 1, 20, container);
    bakeryUnlocked = false;

    robot = new Building("Robot", 0, 5, 100, container);
    robotUnlocked = false;

    factory = new Building("Factory", 0, 10, 200, container);
// ...

public class Building {
    // ...
    // graphical variables
    JLabel label;
    JButton button;
    Container container;

    public Building(String name, int level, int productionRate, int costs, Container container) {
        //...
        // graphical variables
        this.container = container;
    //...
</code></pre>

<p>Same is true for the instances of <code>JButton</code> in this class.</p>

<h2>Oddball solutions</h2>

<p>You make a difference in your logic for the initial phase and after having <em>unlocked</em> the first building. Therefore you have <em>similar code</em> at two places. </p>

<p>I'd suggest to create one more instance of class <code>Building</code> to reuse its logic even for the initial phase.</p>

<h2>Tell! Don't ask! - avoid <em>feature envy</em></h2>

<p>When unlocking the buildings you acquire the Buildings <em>level</em> property and make a decision. But accessing an objects property violates the <em>information hiding principle</em> / <em>encapsulation</em>. The <code>Building</code> class should know itself how to make that decision and provide a method <code>hasReachedMinimumLevel()</code>:</p>

<pre><code>   // in Building
    public boolean hasReachedMinimumLevel() {
        return 2&lt;=level;
    }
   // ...
// in CoockieClicker
  if (!isRobotUnlocked &amp;&amp; bakery.hasReachedMinimumLevel()) {
     robot.unlock();
</code></pre>

<h1>OOP</h1>

<h2>Inheritance</h2>

<p>In OOP we inherit from a super class if we extend <em>its behavior</em>. This is: we override a method to do something more and/or something different then the same method in the super class.</p>

<p>Your class extends <code>JFrame</code> but does not change a <code>JFrame</code>'s <em>behavior</em>. You only <em>configure</em> its content. So your class should rather <em>use</em> a JFrame instead of extending it:</p>

<pre><code>public class CookieClicker  {
    // non graphical variables
    // ...
    public CookieClicker(JFrame theFrame) {
      container = theFrame.getContentPane();        
    // ...

    public static void main(String[] args) {
        JFrame theFrame = new JFrame();
        CookieClicker cookieClicker = new CookieClicker(theFrame);
        theFrame.setTitle("Cookie Clicker");
        theFrame.setSize(210, 200);
        theFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        theFrame.setVisible(true);
    }       
}
</code></pre>

<h2>avoid <em>procedural</em> approaches</h2>

<p><em>Procedural approaches</em> are not bad on their own.<br>
But Java is an <em>Object Oriented</em> programming language and if you want to become a good <em>Java</em> programmer you should start looking for more OO-like solutions.</p>

<p>But OOP doesn't mean to "split up" code into random classes.</p>

<p>The ultimate goal of OOP is to reduce code duplication, improve readability and support reuse as well as extending the code.</p>

<p>Doing OOP means that you follow certain principles which are (among others):</p>

<ul>
<li>information hiding / encapsulation</li>
<li>single responsibility</li>
<li>separation of concerns</li>
<li>KISS (Keep it simple (and) stupid.)</li>
<li>DRY (Don't repeat yourself.)</li>
<li>"Tell! Don't ask."</li>
<li>Law of demeter ("Don't talk to strangers!")</li>
</ul>

<p>A good example is the way you unlock the buildings.</p>

<p>You introduce <code>boolean</code> variables to track the building states. A more OO-ish approach would be to hold the locked buildings in a <code>List</code>. 
Then I'd remove the first element from that list and unlock it until the list is empty:</p>

<pre><code>Building dummyBuildingToAvoidAnotherOddBallSolution = new Building("",0,0,0){ // anonymous inner class
    @Override
    public int hasReachedMinimumLevel() {
        return 2 &lt;= clicker;
    }
}
List&lt;Building&gt; lockedBuildings = 
     new ArrayList&lt;&gt;(
        Arrays.asList(dummyBuildingToAvoidAnotherOddBallSolution, bakery, robot, factory));

buildingsUnlocker.scheduleAtFixedRate(new TimerTask() {
    private final int FIRST_IN_QUEUE = 0; // avoid "magic number", cannot be static in non-static inner class
    Building activeBuilding = lockedBuildings.remove(FIRST_IN_QUEUE);
    @Override
    public void run() {
       if(!lockedBuildings.isEmpty()) {
         if(activeBuilding.hasReachedMinimumLevel()) {
            activeBuilding = lockedBuildings.remove(FIRST_IN_QUEUE);
            activeBuilding.unlock();
         }
       }
    }
}, 0, 2000);
</code></pre>

<p>With that approach you don't need the <code>boolean</code> variables at all. The logic itself becomes shorter <em>and</em> is able to deal with more buildings without any further modification.</p>
    </div>