<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Seems strange to pass <code>base</code> and call the function <code>...hex...()</code>.</p>

<p>Easier to use <code>unsigned</code> rather than <code>int</code>.</p>

<p><code>if (!number)</code> block not needed if a <code>do {} while (number);</code> loop used.</p>

<p><code>char buffer[base];</code> is the wrong sized buffer.  Need is more like "log(INT_MAX, base) + 1".</p>

<hr>

<blockquote>
  <p>to make this code more efficient,</p>
</blockquote>

<p><strong>speed</strong>: Code is calling <code>putchar()</code> repetitively.   The amount of processing there can well exceed all OP's code.  Reducing I/O calls should be then the goal.  E.g. Call  <code>fputs()</code> once.</p>

<pre><code>// a fast version

int print_fast(unsigned number, unsigned base) {
  char buf[sizeof number * CHAR_BIT + 1];
  char *end = &amp;buf[sizeof buf] - 1;
  *end = '\0';
  do {
    end--;
    *end = "0123456789abcdef"[number % base];
    number /= base;
  } while (number);
  fputs(end, stdout);
  return (int) (&amp;buf[sizeof buf] - end - 1);
}
</code></pre>

<blockquote>
  <p>with fewer lines, </p>
</blockquote>

<p>See <a href="https://codegolf.stackexchange.com">Code Golf</a> for such.  Note that reducing lines often goes <em>against</em> efficiently.</p>

<pre><code>// A terse recursive solution

int print_terse(unsigned number, unsigned base) {
  int count = 1;
  if (number &gt;= base) {
    count += print_short(number / base, base);
  }
  putchar("0123456789abcdef"[number % base]);
  return count;
}
</code></pre>

<blockquote>
  <p>without using other standard functions.</p>
</blockquote>

<p>Not possible.  Some library I/O function needed.</p>

<hr>

<p>How about a full featured signed one?</p>

<p>Note the buffer needs to be 34 for a 32 bit <code>int</code>.</p>

<pre><code>#include &lt;assert.h&gt;
#include &lt;limits.h&gt;
#include &lt;stdio.h&gt;

int print_int(int number, int base) {
  assert(base &gt;= 2 &amp;&amp; base &lt;= 36);
  char buf[sizeof number * CHAR_BIT + 2];
  char *end = &amp;buf[sizeof buf] - 1;
  *end = '\0';

  // Form the negative absolute value
  // Negatives used to cope with `INT_MIN`
  int n = (number &gt; 0) ? -number : number;

  do {
    end--;
    *end = "0123456789abcdefghijklmnopqrstuvwxyz"[-(n % base)];
    n /= base;
  } while (n);

  if (number &lt; 0) {
    end--;
    *end = '-';
  }

  fputs(end, stdout);
  return (int) (&amp;buf[sizeof buf] - end - 1);
}

int main(void) {
  printf(" %d\n", print_int(0, 10));
  printf(" %d\n", print_int(INT_MAX, 36));
  printf(" %d\n", print_int(INT_MIN, 2));
  return 0;
}
</code></pre>

<p>Output</p>

<pre><code>0 1
zik0zj 6
-10000000000000000000000000000000 33
</code></pre>
    </div>