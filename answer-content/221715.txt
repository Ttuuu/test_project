<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>It's great that you provide a test program.  Although it doesn't yet test very much, running it under Valgrind uncovers a few wild accesses:</p>

<pre class="lang-none prettyprint-override"><code>==17803== Invalid write of size 4
==17803==    at 0x109773: Vector::resize(int) (221707.cpp:68)
==17803==    by 0x10938A: main (221707.cpp:103)
==17803==  Address 0x4d74c94 is 0 bytes after a block of size 20 alloc'd
==17803==    at 0x483650F: operator new[](unsigned long) (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==17803==    by 0x109508: Vector::Vector(int) (221707.cpp:11)
==17803==    by 0x1091FE: main (221707.cpp:92)
==17803== 
==17803== Invalid read of size 4
==17803==    at 0x1093CE: main (221707.cpp:105)
==17803==  Address 0x4d74c98 is 4 bytes after a block of size 20 alloc'd
==17803==    at 0x483650F: operator new[](unsigned long) (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==17803==    by 0x109508: Vector::Vector(int) (221707.cpp:11)
==17803==    by 0x1091FE: main (221707.cpp:92)
==17803== 
==17803== Invalid read of size 4
==17803==    at 0x1097FD: Vector::at(int) const (221707.cpp:77)
==17803==    by 0x109406: main (221707.cpp:106)
==17803==  Address 0x4d74ca8 is 20 bytes after a block of size 20 alloc'd
==17803==    at 0x483650F: operator new[](unsigned long) (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==17803==    by 0x109508: Vector::Vector(int) (221707.cpp:11)
==17803==    by 0x1091FE: main (221707.cpp:92)
==17803== 
</code></pre>

<p>One of the problems is that <code>resize()</code> doesn't allocate new capacity when necessary.  In fact, there seems to be quite some confusion between size and capacity throughout the code; <em>size</em> should be the number of objects we're logically storing, and <em>capacity</em> is how many we <em>could</em> store before we need to re-allocate.</p>

<p>When we do re-allocate, I would expect to use standard algorithms (<code>std::move()</code>) to copy the elements from old to new storage; there's no need to hand-code a loop.</p>

<p>I'd advise against writing <code>using namespace</code> - that defeats the very benefits that namespaces were invented to give us.</p>
    </div>