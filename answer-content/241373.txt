<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>Does this sound like a reasonable approach?</p>
</blockquote>

<p>What is your target system? Although I had a look at a gameplay video, I am not sure if sprites need dynamic loading. I guess not, so the answer is: Yeah, sure. If your target has enough resources (TM)</p>

<blockquote>
  <p>In particular I am still a little confused by the rule of 5, and when to use smart pointers.</p>
</blockquote>

<p>For rule of five; you can look it up on google: <a href="https://en.cppreference.com/w/cpp/language/rule_of_three" rel="nofollow noreferrer">An adequately informative result</a>. In case these do not make sense; I see you use a user-defined destructor, so you may need to implement user-defined copy constructor and user-defined copy assignment operator. Though I don't think you will move your Resources object, so no need for "rule of five" in this case.</p>

<p>What I would do in your case though is not to bother and just define constructor &amp; destructor since I would not use unique_ptr, and you are not using anything else that is not RAII-compatible.</p>

<p>Use unique_ptr if you have to and use shared_ptr otherwise for a "safe" start. If you utilise generic programming practices, you can easily change the declaration later on for some performance benefits and better declaration of your intent.</p>

<blockquote>
  <p>For example, here I have a <code>std::unique_ptr&lt;std::map&lt;UnitType, Spritesheet&gt;&gt;</code> - but would it be better to have a <code>std::map&lt;UnitType, std::unique_ptr&lt;Spritesheet&gt;&gt;</code> instead?</p>
</blockquote>

<p>I vote for neither since I see no need for pointers at all. My answer would change if had looked at your code (which you provided, yes).</p>

<p><strong>Other improvements:</strong></p>

<ul>
<li>Your function <code>void Resources::loadTextures()</code> seems unnecessarily long. You can define a list of strings and iterate over it for this redundant procedure.</li>
</ul>

<pre><code>textures-&gt;push_back(Texture::loadTexture(txDir + "unit_human_ballista.tga"));
textures-&gt;push_back(Texture::loadTexture(txDir + "unit_human_battleship.tga"));
textures-&gt;push_back(Texture::loadTexture(txDir + "unit_human_bowman.tga"));
textures-&gt;push_back(Texture::loadTexture(txDir + "unit_human_chariot_of_war.tga"));
</code></pre>

<p>would be easier to manage with</p>

<pre><code>std::list&lt;std::string&gt; t = { "unit_human_ballista.tga", "unit_human_battleship.tga", "unit_human_bowman.tga", "unit_human_chariot_of_war.tga" /* etc */ };
for ( auto it = t.begin(); it != t.end(); ++t ) {
    textures-&gt;push_back(Texture::loadTexture(txDir + *t));
}
</code></pre>

<ul>
<li><p>If you want to use range-based for loops, do it as you wish after you watch <a href="https://www.youtube.com/watch?v=OAmWHmwlMwI" rel="nofollow noreferrer">this wonderful presentation</a> specifically at 42 minutes mark.</p></li>
<li><p>Do these two functions need to be seperated?</p></li>
</ul>

<pre><code>void Resources::initTileSpritesheet(UnitType type, int txIndex)
void Resources::initTileSpritesheets()

</code></pre>

<p>You can combine them and get a single function that does the same thing. Please refer to <a href="https://www.youtube.com/watch?v=yFeVRX02jVQ" rel="nofollow noreferrer">this another great video</a>.</p>

<p>Same goes for <code>void Resources::initUnitSpritesheets()</code> and <code>void Resources::initUnitSpritesheet(int type, int txIndex)</code> [grunt] and the rest of your code, <strong>within reason</strong>.</p>

<p>[grunt] Actually I do not like this default-constructed-object-as-type approach in initUnitSpritesheets but I can't think of a better alternative. You can probably hear me grunting.</p>

<ul>
<li>Why do you use</li>
</ul>

<pre><code>std::unique_ptr&lt;std::vector&lt;Texture&gt;&gt; textures = std::make_unique&lt;std::vector&lt;Texture&gt;&gt;();
</code></pre>

<p>in the header file when you can initialize <code>textures</code> at the constructor?</p>

<ul>
<li><code>*unitSpritesheets.get();</code> at definition of getUnitSpritesheets()</li>
</ul>

<p>Either your code does not compile with this, or I am missing something. I think you meant</p>

<pre><code>return *unitSpritesheets;
</code></pre>

<p>See <a href="https://godbolt.org/z/nWPPlE" rel="nofollow noreferrer">this example</a>.</p>
    </div>