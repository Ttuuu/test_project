<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Some thoughts:</p>

<p>Use Interfaces when the implementation type does not matter. In your code, the fact that your <code>Map</code> is a <code>HashMap</code> is irrelevant, so prefer the <code>Map</code> interface. </p>

<p><code>-1</code> is a magic number. Use a constant to document what it's doing.</p>

<p>Use whitespace consistently. Just like <code>for</code> statements, <code>if</code> statements should have a blank space between the <code>if</code> and the <code>(</code>. There should also be whitespace before a <code>{</code> and after a <code>,</code> for readability.</p>

<p>Your comments are not contributing enough to offset the visual distraction they provide. </p>

<p>Your map's key is a string of length 1. It should probably be a character. And you definitely shouldn't label it a character in your variable names unless it is one.</p>

<p>Use <code>final</code> on variables which will not be reassigned as a statement of intent.</p>

<p>A <code>for</code> loop would more tightly constrain your indexing variable, which you're confusingly referring to as a <code>counter</code>.</p>

<p>You can use a guard clause to handle the simple case and then <code>continue</code>, rather than having a large nested <code>if</code> statement.</p>

<p>You're looking up <code>firstChar</code> three times. I agree that <code>containsKey</code> is clearer to read than a null check, but there's no reason to duplicate the other call. And you can use another constant to make clear what case you're trying to handle there too.</p>

<p>Note that you're destructively modifying the incoming array. In toy problems that's not a big deal, but if you're writing real code this is a very bad practice. It would be preferable to make a copy of the array and modify that instead.</p>

<p>If you were to apply all these changes, your code might look more like:</p>

<pre><code>private static final Integer ALREADY_SWAPPED = -1;
private static final Integer FIRST_OCCURRENCE = null;

public String[] firstSwap(final String[] strings) {
    final Map&lt;Character, Integer&gt; map = new HashMap&lt;&gt;();
    final String[] result = Arrays.copyOf(strings, strings.length);

    for (int i = 0; i &lt; result.length; i++) {
        final char firstCharacter = result[i].charAt(0);
        final Integer priorIndex = map.get(firstCharacter);

        if (priorIndex == FIRST_OCCURRENCE) {
            map.put(firstCharacter, i);
            continue;
        }

        if (priorIndex == ALREADY_SWAPPED) {
            continue;
        }

        final String temp = result[i];
        result[i] = result[priorIndex];
        result[priorIndex] = temp;
        map.put(firstCharacter, ALREADY_SWAPPED);
    }

    return result;
}
</code></pre>
    </div>