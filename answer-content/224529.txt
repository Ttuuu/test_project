<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Review</h3>

<ul>
<li>Don't use regions to group members by type. This is redundant grouping. (<a href="https://softwareengineering.stackexchange.com/questions/53086/are-regions-an-antipattern-or-code-smell">Regions pattern or anti-pattern?</a>)</li>
<li>Use proper naming conventions and casing of variables. <code>LockSync</code> is generally called <code>syncRoot</code>. <code>GetNewTokenSemaphore</code> indicates a method name, rename it to <code>newTokenMutex</code>. It's a mutex because you use the semaphore as a mutex.</li>
<li>Prefer <code>TryGetValue</code> over the two-phase <code>ContainsKey</code> + <code>Indexer</code> lookup on a <code>Dictionary</code>. Refactor <code>GetProjectSourceTokenInfo</code> and <code>GetLastSuccessfulTokenFetchTimestamp</code> to use this method instead.</li>
<li><code>GetMsiRestClientInfo</code> is a factory method, so rename it to <code>CreateMsiRestClientInfo</code>.</li>
<li><code>GetMsiRestClientInfo</code> creates instances of <code>HttpClient</code>. This class uses a socket connection and is <code>IDisposable</code> to manage its connection with it. But you never dispose instances of this class. Also, creating instances all the time might lead to an influx in socket connections. (<a href="https://aspnetmonsters.com/2016/08/2016-08-27-httpclientwrong/" rel="nofollow noreferrer">HttpClient Considerations</a>) I suggest to also provide a cache of instances, given the cookies and a dispose strategy.</li>
<li><code>RefreshToken</code> mixes sandbox (<code>return false</code>) with error-prone (<code>throw</code>) statements. There is no clear specification what this method should return when. It seems a mess.</li>
<li>Using <code>DateTime.Now</code> to validate cache expiration is bad practice. Prefer a strategy that does not rely on your system's local time. An option is to consider <code>StopWatch</code>.</li>
</ul>
    </div>