<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I tackled the book a time ago, skipped this chapter and came back now since this topic is highly/excessive used in the Qt Toolkit - even tho its a while ago.</p>
<p><em><strong>Anyhow, you asked for:</strong></em></p>
<blockquote>
<p>I'm especially concerned about my use of dynamic_cast, as that isn't
covered yet and I suspect there's a better way.</p>
</blockquote>
<p><em>Yes, by declaring the <code>compare</code> in the <code>Comparable class</code> itself, you made it pure virtual - I guess this wouldn't match the requirement since it really matters if you use it that way.</em></p>
<ol>
<li><p>I also rewrote the sort algorithm from the book working very efficient in here.</p>
</li>
<li><p>It is also a good idea to move the whole initialization and random generation into the class itself - probably declared as virtual in the interface class and I red somewhere it would be better to let the class handle the deletion or like recommended using a smart pointer.
I just did raw pointers with <code>delete</code> to test the classes.</p>
</li>
<li><p>I also used <code>std::swap</code> to swap vector entries, declared variables with <code>a{};</code> and <code>&lt;random&gt;</code> even tho the book is  intentionally <code>ante c++11</code> - this code compiles fine with the <code>c++17 compiler flag</code>.</p>
</li>
<li><p>To avoid unnecessary errors it is a good habit not to use <code>using namespace std;</code> because there are hundreds of questions in <code>stackoverflow</code> about it.
If you are fed up writing <code>std::cout</code> or <code>std::endl</code> f.e. just declare <code>using std::cout, std::endl;</code> instead of the whole namespace - but that's covered in the following chapter a bit. It's not wrong for small examples but not a good habit in projects.</p>
</li>
<li><p>I added a random test with random names from a list of 10.</p>
</li>
</ol>

<pre class="lang-c++ prettyprint-override"><code>#include &lt;iostream&gt;
#include &lt;vector&gt;
#include &lt;string&gt;
#include &lt;algorithm&gt; //std::swap()
#include &lt;random&gt;

using my_engine = std::random_device;


class Comparable
{
private:

public:
    virtual int getNumber() = 0;
    virtual std::string getName() = 0;
//rule of three
    Comparable() = default;
    virtual    Comparable &amp;operator=(const Comparable&amp; other) = default;
    virtual ~Comparable() = default;

    int compare(Comparable&amp; other);
};

class HighScoreElement : public Comparable
{
private:
    std::vector&lt;Comparable*&gt; _p_Vector;
    std::string _player{};
    int _score{};

public:
    std::string getName() override {return _player;}
    int getNumber() override {return _score;}
//rule of three
    virtual HighScoreElement &amp;operator=(const HighScoreElement&amp; other) = default;
    HighScoreElement(std::vector&lt;Comparable*&gt; p_Vector):_p_Vector(p_Vector){}
    HighScoreElement(std::string player, int score): _player(player), _score(score){}
    virtual ~HighScoreElement() = default;

    void setVector(std::vector&lt;Comparable*&gt;&amp; p_Vector){_p_Vector = p_Vector;}
    std::vector&lt;Comparable*&gt;&amp; getVector(){return _p_Vector;}
    void setNewElement(std::string name, int number);
    void getAllElements();

    std::string randomNames();
    int randomNumber(int size);
};

void sort(HighScoreElement &amp;team);
size_t findSmallestRemainingElement(HighScoreElement &amp;team, size_t index);

int main()
{

    std::vector&lt;Comparable*&gt; p_Vector;
    HighScoreElement *team1 = new HighScoreElement(p_Vector);
    int teamplayer{team1-&gt;randomNumber(20)};

    for(int i = 0; i &lt; teamplayer; ++i){
    team1-&gt;setNewElement(team1-&gt;randomNames(), team1-&gt;randomNumber(10));
    }

    std::cout &lt;&lt; "\n\n######## Random order test: ########" &lt;&lt; std::endl;
    team1-&gt;getAllElements();
    sort(*team1);
    std::cout &lt;&lt; "\n######## Sorted order test: ########" &lt;&lt; std::endl;
    team1-&gt;getAllElements();

    HighScoreElement *team2 = new HighScoreElement(p_Vector);
    for(int i = 0; i &lt; teamplayer; ++i){
    team2-&gt;setNewElement(team2-&gt;randomNames(), team2-&gt;randomNumber(10));
    }

    std::cout &lt;&lt; "\n\n######## Random order test: ########" &lt;&lt; std::endl;
    team2-&gt;getAllElements();
    sort(*team2);
    std::cout &lt;&lt; "\n######## Sorted order test: ########" &lt;&lt; std::endl;
    team2-&gt;getAllElements();

    delete team1;
    delete team2;

    return 0;
}

void sort(HighScoreElement &amp;team)
{
   std::vector&lt;Comparable*&gt; p_Vector = team.getVector();
   for(size_t i = 0; i &lt; p_Vector.size(); ++i){
       int index = findSmallestRemainingElement(team, i);
       std::swap(p_Vector[i], p_Vector[index]);
       team.setVector(p_Vector);
   }
}
size_t findSmallestRemainingElement(HighScoreElement &amp;team, size_t index)
{
   std::vector&lt;Comparable*&gt; p_Vector = team.getVector();
   int result{};

    size_t index_of_smallest_value = index;
    for(size_t i = index +1; i &lt; p_Vector.size(); ++i){
        result = p_Vector[i]-&gt;compare(*p_Vector[index_of_smallest_value]);
        if(result == -1){
            index_of_smallest_value = i;
            team.setVector(p_Vector);
        }
    }
    return index_of_smallest_value;
}

void HighScoreElement::setNewElement(std::string name, int number)
{
    _p_Vector.push_back(new HighScoreElement(name, number));
}

void HighScoreElement::getAllElements()
{
    for(size_t i = 0; i &lt; _p_Vector.size(); i++){
        std::cout &lt;&lt; _p_Vector[i]-&gt;getNumber() &lt;&lt; " &lt;-- ";
        std::cout &lt;&lt; _p_Vector[i]-&gt;getName() &lt;&lt; std::endl;
    }
}

std::string HighScoreElement::randomNames()
{
    std::string firstName[10]={"Jenny", "Sarah", "Belinda", "Mary", "Mark", "John", "Jack", "Jeff", "Peter", "Betty"};
    std::string lastName[10]={"Cunningham", "Johnson", "Stuard", "Furgeson", "Meyer", "Brown", "Brackston", "Harrison", "McCartney", "Harrington"};
    std::string name = firstName[randomNumber(9)] + " " + lastName[randomNumber(9)];
    return name;
}

int HighScoreElement::randomNumber(int size)
{
    my_engine engnSize;
    std::uniform_int_distribution&lt;int&gt; distSize(0,size);
    int number = distSize(engnSize);
    return number;
}

int Comparable::compare(Comparable &amp;other)
{
    //    std::cout &lt;&lt; this-&gt;getNumber() &lt;&lt; std::endl;
    //    std::cout &lt;&lt; other.getNumber() &lt;&lt; std::endl;
    int Number1 = this-&gt;getNumber(), Number2 = other.getNumber();
    std::string Name1 = this-&gt;getName(), Name2 = other.getName();

    //same as other return 0;1
    if(Number1 == Number2){
        //If same as check name
        if(Name1 == Name2){
            return 0;
        }else if(Name1 &gt; Name2){
            return 1;
        }else if(Name1 &lt; Name2){
            return -1;
        }else{
            return 99;
        }
        //grater than other return 1;
    } else if(Number1 &gt;= Number2){
        return 1;
        //less than other return -1;
    } else if(Number1 &lt;= Number2){
        return -1;
    }else{
        std::cout &lt;&lt; "Invalid Comparision" &lt;&lt; std::endl;
        return 99;
    }
}
</code></pre>
    </div>