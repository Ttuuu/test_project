<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <blockquote>
    <p>I have a confusion about this <code>temps[temps.size()/2]</code> when <code>temps.size()</code> is an odd number. How does the "vector::operator[]" handle floating point numbers?</p>
  </blockquote>
</blockquote>

<p>There are well defined rules to <a href="http://en.cppreference.com/w/cpp/language/implicit_conversion" rel="noreferrer">implicit conversions</a>.  <code>temps.size()</code> returns an unsigned integral type that represents the total count of elements in the container.  Dividing an unsigned integral by <code>2</code> (a signed integral), the implicit conversion rules for mixed expressions promotes the signed <code>2</code> to be unsigned. Division between two unsigned integrals results in an unsigned integral and any remaining fractional part is truncated.  So \$3/2 = 1\$ and the remaining \$.5\$ is truncated and discarded.</p>

<hr>

<pre><code>    std::vector&lt;double&gt; temps;
    for (double temp; std::cin&gt;&gt;temp; )
        temps.push_back(temp);
    // temps = ???
</code></pre>

<p><strong>Be aware of the possible states a type may represent.</strong>  What happens if someone runs the program and inputs no data?  <em>Boom</em>.  The mean cannot be calculated because division-by-zero is <strong><em>undefined behavior</em></strong>.  The median cannot be calculated as an empty set is consider an even-sized set.  <code>temps[0-1]</code> accesses results in an out-of-bound access, which is also <strong><em>undefined behavior</em></strong>.  Explicitly assert/validate your pre- and post-conditions.  Do not rely on assumptions.</p>

<hr>

<pre><code>    for (int x : temps) sum += x;
</code></pre>

<p><strong>Use <code>auto</code> to avoid redundant repetition of type names.</strong>  <code>temps</code> represents a container of <code>double</code>s.  You define <code>x</code> to be of type <code>int</code>, which results in a narrowing conversion that's likely to be a source of a bug (Test! Test! Test!).  The compiler already knows what type <code>x</code> should be.  Use <code>auto</code> and let the compiler do its job.</p>

<hr>

<p><strong>Don't state in comments what can be clearly stated through code.</strong>  When programming, the code states what is being done.  If you need to provide/document any reasoning regarding your intent, use comments then.</p>

<p><strong>Write functions. Lots of functions.</strong>  You've already split your program into single logical operations via comments.  Break up that monolithic <code>main</code> into parameterized functions.</p>

<pre><code>int main() {
    auto temperatures = read_temperatures(std::cin);
    const auto mean_temperature = mean(temperatures);
    const auto median_temperature = median(temperatures);

    report(std::cout, mean_temperature, median_temperature);
}
</code></pre>

<p>Now you can write the short and simple functions that are easy to read, test, and maintain.</p>

<p><strong>Get familiar with the standard algorithms found in <a href="http://en.cppreference.com/w/cpp/header/algorithm" rel="noreferrer"><code>&lt;algorithm&gt;</code></a> and <a href="http://en.cppreference.com/w/cpp/header/numeric" rel="noreferrer"><code>&lt;numeric&gt;</code></a></strong>.  Do you really need to sort the entire data set?  Would partial sorting (<a href="http://en.cppreference.com/w/cpp/algorithm/nth_element" rel="noreferrer"><code>std::nth_element</code></a>) suffice?  For even-sized data sets, you could pair up <code>std::nth_element</code> with <a href="http://en.cppreference.com/w/cpp/algorithm/min_element" rel="noreferrer"><code>std::min_element</code></a> to find the two values. As Vnp mentioned, <a href="http://en.cppreference.com/w/cpp/algorithm/accumulate" rel="noreferrer"><code>std::accumulate</code></a> is a candidate for summing up a range.</p>

<hr>

<p><strong>Use strongly defined types to represent your temperatures.</strong>  A raw <code>double</code> representing temperatures is not safe.  Numeric types that are conceptually incompatible may cause catastrophic mathematical errors.  The Mars Climate Orbiter failure is a famous catastrophe caused by taking an impulse result from the US system and using that result in SI calculations without any conversions.  So if you want to store temperatures, are you representing <code>Celsius</code>, <code>Fahrenheit</code>, <code>Kelvin</code>, or <code>Rankine</code>?  <em>Note</em> - You'll need an understanding of programming with objects to accomplish this.  If you haven't learned about objects yet, keep it in mind for when you do encounter them.</p>
    </div>