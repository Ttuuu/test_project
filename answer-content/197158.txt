<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>Go through the <a href="https://www.python.org/dev/peps/pep-0008/" rel="noreferrer">PEP-8 style guide</a>. You have inconsistent naming
  convention. A mixed case of <code>camelCase</code> and <code>snake_case</code> throws off
  the developer. Follow <code>snake_case</code> for variables and <code>camelCase</code> for
  class etc.</p>
</blockquote>

<p>The first thing that comes to mind is a loop:</p>

<pre><code>for pos in range(1, 8):
    try:
        temp = chessBoard[i + pos][j + pos]
        solutionMoves.append([i + pos, j + pos])
    except:
        break
</code></pre>

<p>which about covers the whole of your <code>try-except</code> blocks.</p>

<hr>

<p>However, with chess; I'd suggest using coordinate system to move around the board.</p>

<p>Design a class <code>Point</code> which takes \$ (x, y) \$ position and define the <code>__add__</code>, <code>__sub__</code>, <code>__neg__</code> etc. as follows (rough, modify as per your needs):</p>

<pre><code>class Point(tuple):
    def __add__(self, other):
        return Point(v + w for v, w in zip(self, other))

    def __radd__(self, other):
        return Point(w + v for v, w in zip(self, other))

    def __sub__(self, other):
        return Point(v - w for v, w in zip(self, other))

    def __neg__(self):
        return -1 * self

    def __mul__(self, s):
        return Vector(v * s for v in self)

    def __rmul__(self, s):
        return Vector(v * s for v in self)
</code></pre>

<p>Now, define your movement direction as a point vector:</p>

<pre><code>DIR_TOP_RIGHT = Point(1, 1)
</code></pre>

<p>when you want to move inside the board, just add a multiple of direction to the current point:</p>

<pre><code>current = Point(i, j)
new = current + (distance * DIR_TOP_RIGHT)
</code></pre>

<p>Next, define a method (inside a class <code>ChessBoard</code> which checks whether a point lies inside the board or not. This should be quite easy. This <code>ChessBoard</code> class should also be the one responsible for converting your <code>Point</code> object from \$ (1, 1) \$ format to <code>B1</code> etc.</p>
    </div>