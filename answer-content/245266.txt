<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Json.Net has support for collections built-in. You should be able to use the generic version of <code>DeserializeObject</code> like this:</p>
<pre><code>private Dictionary&lt;string, bool&gt; GetWorkflowNames()
{
    var appDataFolder = ConfigurationMgr.GetAppPath("App_Data");
    var jsonFilePath = Path.Combine(appDataFolder, "WorkflowNames.json");
    var jsonString = System.IO.File.ReadAllText(jsonFilePath);
    var workflowNames = JsonConvert.DeserializeObject&lt;List&lt;string&gt;&gt;(jsonString);
    return workflowNames.ToDictionary(name =&gt; name, _ =&gt; false);
}
</code></pre>
<p>There are still a few things I would clean up in your code:</p>
<p>Add a using for <code>System.IO</code> and use <code>File</code> without the namespace. You could also use a static using like this <code>using static System.IO.File;</code> and access <code>ReadAllText</code> directly but I generally dislike this unless the class is very focussed and heavily using <code>File</code>.</p>
<p>You'll notice that I introduced a local variable <code>jsonString</code> as I don't like hiding the file access in the call to deserialize the json. I try to stick rigidly to one thing happening per line. Simple and clear code is best when you want to maintain it 2 years later.</p>
<p>I'd also recommend using <code>.ToDictionary</code> as it shortens the code and makes it very obvious what you're doing. Having said that, I would have this return an <code>IEnumerable&lt;string&gt;</code> instead of a dictionary. It's not clear why this returns a dictionary and <code>GetWorkflowNames</code> sounds like it would be perfectly reasonable to return the list.</p>
    </div>