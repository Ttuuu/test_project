<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Another solution, with proper justification I hope.</p>

<p>First, we will consider rotating to the <em>right</em>.  Not a big deal, because shifting an array (of size <em>n</em>) by <em>d</em> position to the left is the same as shifting it <em>n-d</em> positions to the right. And conversely.</p>

<p>It will just make the explanations easier.</p>

<h1>Example : shift an array <em>a</em> of size 21, 6 positions to the right.</h1>

<h2>Poor <em>a[0]</em>, what shall we do with you?</h2>

<p>Consider <em>a[0]</em>. It it suppose to move to <em>a[6]</em>. Which moves to <em>a[12]</em>. Pushed into <em>a[18]</em>. Going to <em>a[3]</em> (because 18 + 6 = 24 = 21 + 3), etc.</p>

<p>So we follow a path which goes back to the initial position. It is the cycle (0, 6, 12, 18, 3, 9, 15, 0, 6, ....).</p>

<h2>Code for shifting <em>a[0]</em> and friends</h2>

<p>Here is the code (C-ish)</p>

<pre><code>int next = 0;
int saved = a[0];
do {
   next = (next + d) % n;
   swap (saved, a[next]);
} while (next != 0);
</code></pre>

<h1>Here comes the GCD</h1>

<p>But there are other cycles. Actually this is linked to the greatest common divisor.
There are exactly <em>gcd(d, n)</em> such cycles. And 0,1,...gcd(d,n-1) belong to different cycles.</p>

<p>So they are convenient starting points.</p>

<h1>Final code</h1>

<pre><code>int nb_cycles = gcd(d, n);

for (int start = 0; start &lt; nb_cycles; start++) {
   int next = start;
   int saved = a[start];
   do {
      next = (next + d) % n;
      swap (saved, a[next]);
   } while (next != start);
}
</code></pre>

<h1>Complexity</h1>

<ul>
<li>Linear time, as each element of the array is assigned exactly once.</li>
<li>In-place,  non recursive</li>
</ul>
    </div>