<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The <code>Iterator</code> is a second stage provision for API users. As such I will not comment on it.</p>
<p>The package name should not contain capitals. It is only a convention, but for java it is maintained relatively strict in the community, due to the hundreds of libraries.</p>
<p>Using <code>T[]</code> or rather <code>Object[]</code> requires some disregard to typing. I solved that by passing the class of T: <code>Integer.class</code> or such. Alternatively one could use <code>ArrayList&lt;T&gt;</code> instead of <code>T[]</code>. Then there is full generic typing.</p>
<p><code>protected</code> is a dubious choice for such a container class, but maybe a next task would be to add functionality in the form of a child class.</p>
<p>Now to the critics:</p>
<ul>
<li><code>limit</code> should rather be a parameter in the constructor, made two constructors, one with a default limit. As limit is redundant, equal to <code>array.length</code> you need not have it as field.</li>
<li>You can use <code>final</code> for unchanging fields.</li>
<li><code>index</code> and <code>pointer</code> are no-names, often unsuited for fields.</li>
<li>No display of really using circularity, start index and end index running around.
Delete in the middle is atypical for a circular array, should not go from 0 to length, and should actually delete <code>9</code> in <code>3 9 5</code>.
Here I represented circularity by a <code>size</code> to distinghuish empty from full, and a start index <code>consumeIndex</code> and an end index <code>produceIndex</code>. Modulo <code>array.length</code> is needed.</li>
<li><code>findIndex</code> used <code>==</code> but the Object wrappers are hideous: <code>Integer.valueOf(3) == Integer.valueOf(3)</code> (internal cache upto 128) but <code>Integer.valueOf(300) == Integer.valueOf(300)</code>. So use <code>equals</code>.</li>
</ul>
<p>So (not guaranteeing correctness):</p>
<pre><code>import java.lang.reflect.Array;

public class CircularArray&lt;T&gt; {

    public static final int DEFAULT_LIMIT = 5;
    private final Class&lt;T&gt; elementType;
    private final T[] array;
    private int consumeIndex = 0;
    private int produceIndex = 0;
    private int size = 0;

    public CircularArray(Class&lt;T&gt; elementType) {
        this(elementType, DEFAULT_LIMIT);
    }

    public CircularArray(Class&lt;T&gt; elementType, int limit) {
        this.elementType = elementType;
        array = (T[]) Array.newInstance(elementType, limit);
    }

    public void add(T data) {
        if (size == array.length) {
            throw new IllegalStateException("CircularArray is full");
        }
        array[produceIndex++] = data;
        if (produceIndex &gt;= array.length) {
            produceIndex = 0;
        }
        size++;
    }

    public void delete(T data) {
        // 4 5 9 11 1
        // delete 9
        int deleteIndex = findIndex(data);
        if (deleteIndex == -1) {
            return;
        }
        for (int index = deleteIndex; (index + 1) % array.length != produceIndex; ++index) {
            array[index] = array[(index + 1) % array.length];
        }
        produceIndex = (produceIndex - 1 + array.length) % array.length;
        --size;
    }

    private int findIndex(T data) {
        for (int i = 0; i &lt; size; i++) {
            int index = (consumeIndex + i) % size;
            if (array[index].equals(data)) {
                return index;
            }
        }
        return -1;
    }

}
</code></pre>
<hr>
<p><em><strong>Some test code</strong></em> <em>(as requested by comment)</em></p>
<pre><code>CircularArray&lt;Integer&gt; ca = new CircularArray&lt;&gt;(Integer.class);
ca.add(1);
ca.add(2);
ca.add(3);
ca.add(4);
ca.add(5);
try {
    ca.add(6);
    throw new IndexOutOfBoundsException("Overflow expected");
} catch (IllegalStateException e) {
    System.out.println("Expected overflow");
}
int i = ca.delete(3);
if (i != 2) {
    throw new IllegalStateException();
}
ca.delete(1);
ca.add(7);
ca.add(8)
int i = ca.findIndex(8);
if (i != 0) {
    throw new IllegalStateException();
}
</code></pre>
<p>This is not real testing, more demo, and unit tests are a different thing, with many scenarios. Also note that the code can be optimized, for instance for deleting the first element:</p>
<pre><code>    public void delete(T data) {
        // 4 5 9 11 1
        // delete 9
        int deleteIndex = findIndex(data);
        if (deleteIndex == -1) {
            return;
        }
        // Optimisation:
        if (deleteIndex == consumeIndex) {
            consumeIndex = (consumeIndex + 1) % array.length;
            return;
        }
</code></pre>
    </div>