<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Major stuff</strong></p>

<p><strong>Consider <code>const</code></strong></p>

<p>Design: <code>kth_largest()</code> has a side effect of re-arranging <code>array</code>. this is surprising and not part of "Finds the kth largest element of an array in O(n) time."  I'd expect code to do the job without the side effect</p>

<pre><code>// long kth_largest(size_t k, long *array, size_t n_elts) {
long kth_largest(size_t k, const long *array, size_t n_elts) {
</code></pre>

<p><strong>Small size error</strong></p>

<p>Code may call <code>err(1, NULL);</code> when <code>n_elts &lt; 5</code> as <code>malloc(0)</code> can return <code>NULL</code>.  I'd expect code to work for sizes 1 to 4 also.</p>

<p><strong>Doubtful O() claim</strong></p>

<p>"Finds the kth largest element of an array in O(n) time."    Perhaps when <code>n</code> &gt;&gt;&gt; <code>k</code>, but not in general.  I'd expect <code>O(n*k)</code>.  So perhaps</p>

<pre><code>Finds the kth largest element of an array in O(n) time when k &lt;&lt;&lt; n
otherwise O(n*k)
</code></pre>

<p><strong>No error check</strong></p>

<p>Do not trust user input follows the rules nor allocations always succeed.</p>

<pre><code>long *array = malloc(n_elts * sizeof(long));
if (array == NULL) {
  Handle_Error();
}


for (size_t i = 0; i &lt; n_elts; ++i) {
  // scanf("%ld", &amp;array[i]);
  if (scanf("%ld", &amp;array[i]) != 1) {
    Handle_Error();
  }
}
</code></pre>

<hr>

<p><strong>Minor stuff</strong></p>

<p><strong>object vs type</strong></p>

<p>Rather than size to the type, size ot the object.  Easier to code right, review and maintain.</p>

<pre><code>// qsort(a, n, sizeof(long), compare_longs);
qsort(a, n, sizeof *a, compare_longs);

// long *medians = malloc(n_sublists * sizeof(long));
long *medians = malloc(sizeof *medians * n_sublists);
</code></pre>

<p><strong>No need for floating point math</strong></p>

<p><code>i/2</code> will already have "floor" the quotient before the <code>floor()</code>.  Absolutely no need for <code>floor()</code> and with its potential loss if precision for large <code>i</code>.</p>

<pre><code>// return (size_t)(floor(i/2));
return i/2;
</code></pre>

<p><strong><code>size_t</code> is an unsigned type</strong><br>
<strong>Enable all warnings</strong></p>

<p><code>pos &gt;= 0</code> is always true below.  A well enabled compilers would have warned.</p>

<pre><code>size_t pos = -1;
...
assert(pos &gt;= 0);
</code></pre>

<p><strong>Match specifier and type</strong></p>

<p><code>"%zd"</code> does not match a <code>size_t</code>.  <code>"%zu"</code> does.  Also implies useful warnings were not enabled.  Save time - enable warnings.  See also <a href="https://stackoverflow.com/q/32916575/2410359">How to use “zd” specifier with <code>printf()</code>?</a>/</p>

<pre><code>// scanf("%zd", &amp;k);
// scanf("%zd", &amp;n_elts);
scanf("%zu", &amp;k);
scanf("%zu", &amp;n_elts);
</code></pre>

<hr>

<p><strong>Read until <code>EOF</code></strong></p>

<p>"I would read until EOF, but then I would have to deal with a growing array, I think." --&gt; Yes, good idea.  Confident this is up to D. Ben Knoble abilities, so will not post code.</p>

<p>Design idea: pass the <code>k</code> as an <code>argv[]</code> and the array via <code>stdin</code>.</p>
    </div>