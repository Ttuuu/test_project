<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Overall</strong></p>

<p>A quality effort.</p>

<p>I especially like function documentation in the header files, where others can see it.</p>

<hr>

<p><strong><code>#pragma once</code></strong></p>

<p><code>#pragma once</code> is not standard C.   For higher portability, use code guards.</p>

<hr>

<p>Mostly minor stuff follows</p>

<p><strong>Style</strong></p>

<p><code>char **word_to_guess = malloc(word_size * sizeof(word));</code> <em>looks</em> wrong.<br>
Suggest <code>char **word_to_guess = malloc(word_size * sizeof *word_to_guess);</code></p>

<p><strong>Trouble with letters with <em>locales</em></strong></p>

<p>Only important when outside C <em>locale</em>.</p>

<p>In various <em>locales</em> <code>letters[letter_pos]</code> will become UB as <code>letters[]</code> is only good for the usual 26.  Defensive coding would insure a valid index.</p>

<p>In such <em>locales</em> <code>letters[letter_pos]</code> can have a negative value while the "same" <code>current_letter</code> is positive.  Then <code>if (letters[letter_pos] == current_letter) {</code> will fail, even with the "same" letter.  </p>

<p>Perhaps cast:</p>

<pre><code>// if (letters[letter_pos] == current_letter) 
if (letters[letter_pos] == (char) current_letter) 
</code></pre>

<p><strong><code>len()</code> missing</strong></p>

<p><code>len(words)</code> needs a definition.</p>

<p><strong>Namespace</strong></p>

<p><code>rng.h</code> declares <code>init_rng</code> and <code>rand_to</code>.  Consider <code>rng_init()</code>, <code>rng_to()</code>.</p>

<p><strong>One too many types, maybe</strong></p>

<p><code>rand_to()</code> involves 3 types: <code>size_t, unsigned long, int</code>.  The selection of <code>(unsigned long)</code> seems arbitrary.  Recommend to use <code>size_t</code>.  Note this code is weak unless <code>RAND_MAX</code> is much larger than <code>max</code>.</p>

<pre><code>size_t rand_to(size_t max) {
  return (unsigned long) rand() / (RAND_MAX / max + 1);
  return (size_t) rand() / (RAND_MAX / max + 1);
}
</code></pre>

<p>Deeper: <code>size_t</code> is a tricky type as its rank is not defined in relationship to the other <em>unsigned types</em>.  <code>size_t</code> is often <code>unsigned long</code>, yet code should not rely on that.  In this case we know <code>[0 &lt;= rand() &lt;= INT_MIN &lt;= UINT_MAX]</code> and <code>[32767 &lt;= RAND_MAX &lt;= INT_MIN &lt;= UINT_MAX]</code> and so could be more careful with the below, which is not to far off your original code.  The care comes from <code>(size_t) rand()</code> could, in theory on a unicorn platform, truncate the value.  A <code>(unsigned)</code> cast will never lose info here and get us into the nicely behaviored <em>unsigned</em> math. It is not excessive, like <code>unsigned long</code> may be.  The division will push the math to wider unsigned types as needed.</p>

<pre><code>  return (unsigned) rand() / ((unsigned) RAND_MAX / max + 1u);
</code></pre>

<p><strong>Minor: <code>#include</code></strong></p>

<p>I'd expect <code>&lt;stdlib.h&gt;</code> in <code>rng.c</code>. IMO, the standard includes found in the matching <code>"rng.h"</code> should not be relied on.  As with such style issues: code to you  group's coding guidelines.</p>

<pre><code>#include "rng.h"
#include &lt;stdlib.h&gt;  // add
#include &lt;time.h&gt;
</code></pre>

<p><strong><code>include</code> twice detection.</strong></p>

<p>Take this idea or not: It is useful to detect if the matching header file suffers redundant inclusion as below.  Within xxx.c, and only here, I find including xxx.h twice nicely exercises this.</p>

<pre><code>#include "rng.h"
#include "rng.h"  // add
#include &lt;stdlib.h&gt;
#include &lt;time.h&gt;
</code></pre>
    </div>