<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>See below for comments on your overall approach, but taking the approach as a given, here are a few observations:</p>

<p>First, it seems unusual to pass <code>initialcounts</code> to <code>histogramcount</code> instead of making <code>histogramcount</code> self-contained.  Also, <code>histogramcount</code> is kind of a long name for such a simple function, and <code>take 10 (repeat 0)</code> is more succinctly written <code>replicate 10 0</code>.  Finally, the complex step of actually incrementing the count seems like it deserves its own function, so I might write:</p>

<pre><code>-- |Return counts of integers from 0 to 9
count :: [Integer] -&gt; [Int]
count = loop (replicate 10 0)
  where loop counts (x:xs) = loop (increment x counts) xs
        loop counts []     = counts

-- |Add one to a given count
increment :: Integer -&gt; [Int] -&gt; [Int]
increment x counts =
  let xint = fromIntegral x
      newcount = (counts !! xint) + 1
  in  take xint counts ++ [newcount] ++ drop (xint+1) counts
</code></pre>

<p>There's no particular reason to name <code>linefunctions</code>, and if you write:</p>

<pre><code>map ($ calculatedcounts) (map drawline [maxheight,maxheight-1..1])
</code></pre>

<p>a pair of maps like this simplifies to a single map:</p>

<pre><code>map (\height -&gt; drawline height calculatedcounts) [maxheigh,maxheight-1..1]
</code></pre>

<p>which might be more clearly written as a list comprehension anyway:</p>

<pre><code>[drawline h calculatedcounts | h &lt;- [maxheight,maxheight-1..1]]
</code></pre>

<p>giving:</p>

<pre><code>histogram :: [Integer] -&gt; String
histogram numbers =
  unlines $ [drawline h counts | h &lt;- [maxh,maxh-1..1]] ++ footer
  where counts = count numbers
        maxh = maximum counts
        footer = ["==========","0123456789"]
</code></pre>

<p>Note that Haskell code usually uses pretty short names for temporary variables.  It's also more common to use a <code>where</code> clause rather than a <code>let</code> clause when the variables being defined are just helpers, secondary to the main expression.  (Here, <code>counts</code> is arguable <em>not</em> secondary to the main expression, though that raises the question of whether or not we should separate out the function that graphs a set of 10 counts instead of combining it with the counting itself... hmm...)</p>

<p>The <code>drawline</code> function seems okay.  Again, maybe a list comprehension is clearer:</p>

<pre><code>drawline :: Int -&gt; [Int] -&gt; String
drawline level counts = [if x &gt;= level then '*' else ' ' | x &lt;- counts]
</code></pre>

<p>or maybe you want to go the route of being excessively clever:</p>

<pre><code>drawline :: Int -&gt; [Int] -&gt; String
drawline level = map (bool ' ' '*' . (&gt;= level))
</code></pre>

<p>Before doing that, we should revisit <code>increment</code>.  It's pretty terrible.  The take/drop pair can be replaced with the more efficient <code>splitAt</code> standard function which can simultaneously fetch the current count and get everything prepared to update the count, like so:</p>

<pre><code>-- |Add one to a given count
increment :: Integer -&gt; [Int] -&gt; [Int]
increment x counts =
  case splitAt (fromIntegral x) counts of
    (a,n:b) -&gt; a ++ (n+1):b
</code></pre>

<p>That's better, and fairly idiomatic.  Note the use of <code>a ++ (n+1):b</code> in place of <code>a ++ [n+1] ++ b</code>, too.  That's pretty standard.</p>

<p>After you complete next week's lesson, you may discover that <code>count</code> is a fold and rewrite it as:</p>

<pre><code>count :: [Integer] -&gt; [Int]
count = foldr increment (replicate 10 0)
</code></pre>

<p>Further down the line, you may become concerned about whether a left fold would have been better for efficiency purposes, but there's not much point in worrying about that now.</p>

<p>Putting it all together, including breaking <code>histogram</code> up into the counting and the plotting and pulling the <code>drawline</code> helper function into the <code>plot</code> function, I might rewrite your program as:</p>

<pre><code>-- |Plot histogram of counts
histogram :: [Integer] -&gt; String
histogram = plot . count

-- |Return counts of integers from 0 to 9
count :: [Integer] -&gt; [Int]
count = foldl (flip increment) (replicate 10 0)

-- |Add one to a given count
increment :: Integer -&gt; [Int] -&gt; [Int]
increment x counts =
  case splitAt (fromIntegral x) counts of
    (a,n:b) -&gt; a ++ (n+1):b

-- |Plot a vertical bar chart of counts
plot :: [Int] -&gt; String
plot counts =
  unlines $ [drawline h | h &lt;- [maxh,maxh-1..1]] ++ footer
  where drawline level = [if x &gt;= level then '*' else ' ' | x &lt;- counts]
        maxh = maximum counts
        footer = ["==========","0123456789"]

main = do
  putStr $ histogram [1,1,1,5]
  putStr $ histogram [1,4,5,4,6,6,3,4,2,4,9]
</code></pre>

<p>Finally, I'd run <code>hlint</code> on it.  It gives "No hints", but if I'd run it earlier, it would have mentioned <code>replicate 10 0</code> and recommended a <code>foldl</code> for the <code>count</code> version that used recursive <code>loop</code> calls.</p>

<p>Is this better than your original?  Well, I think so, of course, or I wouldn't be writing this.  I think the main improvements are:</p>

<ul>
<li>removing long names for things that aren't very important, like <code>linefunctions</code> or <code>initialcounts</code></li>
<li>giving top-level names to self-contained actions like <code>count</code>, <code>increment</code>, and <code>plot</code> that perform more well-defined operations than your original "histogramcount" and "drawline"</li>
</ul>

<p>Now, let's get back to your overall approach.  The main criticism I have is that, like many new Haskell programmers, you're still trying to get over the tendency to use Haskell as an alternate syntax for writing Python (or any other imperative programming language of your choice).  You've started with an array of counts:</p>

<pre><code>counts = [0] * 10    # Python syntax!
</code></pre>

<p>and you've looped over the input data, updating each count as you go:</p>

<pre><code>for c in data:
    counts[c] += 1
</code></pre>

<p>Unfortunately, Haskell isn't Python, so you've had to represent your running counts as a list.  It has to be passed around as an extra argument, and it not only provides inefficient <code>O(n)</code> access to individual elements but also requires creating an updated immutable copy for every processed data point using the abominable expression:</p>

<pre><code>take xint counts ++ [newcount] ++ drop (xint+1) counts
</code></pre>

<p>or its equally hideous cousin:</p>

<pre><code>case splitAt (fromIntegral x) counts of (a,n:b) -&gt; a ++ (n+1):b
</code></pre>

<p>Now, one "improvement" would be to switch from inefficient lists to an efficient <code>Vector</code> type to hold your counts.  Honestly, though, the resulting program would still be designed around your original imperative solution, and we aren't seriously concerned with efficiency here anyway.  If we need to process a few million data points, the fact that counting is slow isn't really the biggest issue as we try to generate hundreds of thousands of lines of vertical histogram output.</p>

<p>Instead, to really get a feeling for how Haskell programming is supposed to work, I'd suggest that you take a careful look at <code>Data.List</code> and try to imagine using the functions there as a pipeline of transformations on your data that gradual convert it from <code>[Integer]</code> to <code>String</code>.  See if you can do it without keeping track of any intermediate state, like counts or the current line "level" or anything like that.  As a hint, note that if you were to <code>sort</code> your data and then <code>group</code> it, you'd be close to having a set of required counts.</p>

<h2>SPOILERS</h2>

<p>Here's a super Haskelly solution to this problem.  Note how its just a pipeline of functional transformations composed together.  Read the pipeline from the bottom-up to understand how it works:</p>

<pre><code>haskellHistogram :: [Integer] -&gt; String
haskellHistogram =
    unlines      -- and print it as lines
  . reverse      -- flip it upside down
  . (['0'..'9']:) . (replicate 10 '-':)  -- add the header rows
  . takeWhile (any (=='*'))  -- take rows until we run out of stars
  . transpose    -- switch from horizontal rows of stars to vertical columns
  . map (  (++ repeat ' ')       -- extend with (infinite) spaces
         . flip replicate '*'    -- represent count as stars
         . (subtract 1)          -- drop the extra number we added
         . length                -- get the count
        )        -- for each group
  . group        -- group into 0s, 1s, 2s, etc.
  . sort         -- sort the input
  . ([0..9]++)   -- add one of each to ensure non-zero counts
</code></pre>

<p>I wrote that in one go, starting at the end of the pipeline and working my way backward, in about 5 minutes.  After it type checked and I tested it, I found I'd forgotten the <code>unlines</code> (because my type signature was wrong!) and the <code>subtract 1</code>, but it otherwise worked correctly.  That's what makes Haskell programming so much fun.</p>
    </div>