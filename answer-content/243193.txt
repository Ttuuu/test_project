<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>isPrime()</h1>

<h2>Complexity</h2>

<p>This function contains a simple loop that iterates up to <code>Math.sqrt(number)</code> times, so assuming <code>Math.sqrt(...)</code> can be computed in <span class="math-container">\$O(1)\$</span> time, the function has <span class="math-container">\$O(\sqrt N)\$</span> time complexity.</p>

<h2>Review</h2>

<p>This function is terribly inefficient. <code>Math.sqrt(number)</code> is computed <span class="math-container">\$\lfloor \sqrt N \rfloor\$</span> times, yet the value is a constant.  This should be moved out of the loop.</p>

<p>The function fails when given a negative number.  The square-root is returned as <code>NaN</code>, the <code>for</code> loop executes zero times, and <code>true</code> is returned.</p>

<p><code>2</code> is the only even prime number.  It can easily be called out as a special case (like you are doing for <code>0</code> and <code>1</code>, allowing the <code>for</code> loop to consider only odd numbers starting at 3, which should cut the function time in half.</p>

<hr>

<h1>Main Function - Outer loop</h1>

<h2>Complexity</h2>

<p>Consider this loop:</p>

<pre><code>    for (int nextPrime = 2; nextPrime &lt; number; nextPrime = getNextPrimeNumber(nextPrime)) {
        ...
    }
</code></pre>

<p>The <code>getNextPrimeNumber(int number)</code> is a simple function which increments a number by one, and tests whether or not it is prime.  These two can be combined into an equivalent simpler loop, which is easier to reason about:</p>

<pre><code>    for (int nextPrime = 2; nextPrime &lt; number; nextPrime++) {
        if (isPrime(nextPrime)) {
            ...
        }
    }
</code></pre>

<p>Now, we can see that this loop iterates <code>number - 2</code> times, so <code>isPrime(nextPrime)</code> is called <code>number - 2</code> times.  This gives us a time complexity of <span class="math-container">\$O(N^{3/2})\$</span> without considering the inner loop.</p>

<hr>

<h1>Inner Loop</h1>

<h2>Complexity</h2>

<p>The inner statement (the <code>while</code> loop) is executed for each prime number the outer loop finds.  From the <a href="https://en.wikipedia.org/wiki/Prime_number_theorem" rel="noreferrer">Prime Number Theorem</a>, we know that the number of primes <span class="math-container">\$Ï€(N)\$</span> is approximately <span class="math-container">\$\frac{N}{\log N}\$</span>.</p>

<p>Since the <code>while</code> loop is dividing the number by a constant factor, <code>p</code>, the prime number from the outer loop, it will execute a maximum of <span class="math-container">\$log_{p} N\$</span> times.  After each division, <code>isPrime(number)</code> is called.  This means <span class="math-container">\$log N\$</span> executions of a <span class="math-container">\$O(\sqrt N)\$</span> algorithm, so the inner statement is <span class="math-container">\$O(\log N \sqrt N)\$</span>.</p>

<p>Executed for each prime number, this gives <span class="math-container">\$O(\frac{N}{\log N} \log N \sqrt N)\$</span>, or <span class="math-container">\$O(N^{3/2})\$</span>.</p>

<p>Since both portions have <span class="math-container">\$O(N^{3/2})\$</span> complexity, the overall complexity is <span class="math-container">\$O(N^{3/2})\$</span>.</p>

<h2>Review</h2>

<p>The trial division <code>while(number % nextPrime == 0)</code> loop will exit once all of the factors of <code>nextPrime</code> have been divided out of <code>number</code>.  <code>isPrime(number)</code> can't become <code>true</code> while more than one factor of <code>nextPrime</code> exist, and since <code>isPrime()</code> is an "expensive" <span class="math-container">\$O(\log N)\$</span> operation, it would be more efficient to remove as many multiples of <code>nextPrime</code> as possible, and only then checking if the resulting <code>number</code> is prime.  In short, when the <code>while</code> loop executes one or more iterations, the <code>isPrime()</code> should execute once, but if the <code>while</code> loop executes 0 times, <code>isPrime()</code> shouldn't be executed at all.</p>

<hr>

<h1>Overall</h1>

<p>You've separated <code>isPrime()</code> out from determining the factors of <code>number</code>, but <code>isPrime()</code> determines whether a number is prime or not by doing trial divisions, and you need to do trial divisions to remove factors from number.  One function which does both operations would be more efficient:</p>

<ul>
<li>divide out as many factors of 2 as possible</li>
<li>starting with a divisor of 3, and increasing by 2:

<ul>
<li>if number can be divided by the divisor:</li>
<li>repeat as many times as possible:

<ul>
<li>number /= divisor</li>
</ul></li>
<li>stop, if number &lt; divisor * divisor</li>
</ul></li>
<li>if stopped, and number &gt; 1:

<ul>
<li>number is last factor</li>
</ul></li>
</ul>
    </div>