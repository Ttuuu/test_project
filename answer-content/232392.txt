<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<pre><code>def bigcommerce_api_v3_get_customers_by_shop(shop, options = {})
</code></pre>

<p>Since you are only extracting a couple values from <code>options</code> here, consider using keyword params instead. It makes it more obvious what specific keys are used by the method, without needing to dig into the method body.</p>

<hr>

<pre><code>raise if params['page'] || params['limit'] # prevent manual pagination attempt
</code></pre>

<p>You should raise a specific error here, or at least include a message. Currently, you'll just get a <code>RuntimeError</code> with no message, and would need go to that line in the source code to figure out what is the actual error</p>

<hr>

<pre><code>r1 = hubspot_get_request("https://api.hubapi.com/contacts/v1/contact/vid/#{vid}/profile", shop)
</code></pre>

<p>It's kinda nice to have URLs like this as constants. Of course, you do have to interpolate a value in there, but it can be done using the <code>%</code> operator as well (see <a href="https://stackoverflow.com/questions/28556946/percent-operator-string-interpolation">https://stackoverflow.com/questions/28556946/percent-operator-string-interpolation</a>):</p>

<pre><code># Note I changed #{} here to %{}
HUBSPOT_USER_PROFILE_PATH = "https://api.hubapi.com/contacts/v1/contact/vid/%{vid}/profile"
# ...
r1 = hubspot_get_request(
  HUBSPOT_USER_PROFILE_PATH % { vid: vid },
  shop
)
</code></pre>

<hr>

<pre><code>:name =&gt;  "#{shop.uid}customerdata",
</code></pre>

<p>You should use the shorter syntax for symbol keys, <code>name: "#{shop.uid}customerdata",</code></p>

<hr>

<pre><code>recursive = options.fetch(:recursive, nil)
</code></pre>

<p>Using <code>fetch</code> here is pointless, just use <code>options[:recursive]</code> which will return <code>nil</code> if the key isn't found anyway. But still, it's better to use keyword params anyway.</p>

<hr>

<p>This is as far as I'm gonna get right now, this is quite a long program and I have to head to work. But, those issues I outlined above are applicable in many parts of the program. </p>
    </div>