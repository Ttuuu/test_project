<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You are <em>not</em> allocating per se when when writing to the queue. <code>std::array</code> is backed by a plain <code>C</code>-array on the stack, that gets moved. </p>

<p>So you only ever allocate depending on the underlying container the <code>std::queue</code> is based on. By default this is a <code>std::deque</code>.</p>

<p>I do not really understand the need for the <code>std::array</code> in the type though. Why not just use a <code>std::string</code> and limit the size of it to 4096? There is even a constructor that does explicitely that <code>string (const char* s, size_t n)</code></p>

<p>Before I get to the Code there are some other things I would like to mention:</p>

<ol>
<li><p>why are you not useing std::copy instead of memcpy. The former works better with C++ and will in the end almost always end up as memcpy?</p></li>
<li><p>You do not need to define the special member functions. In fact you have forgotten 2 of then, aka copy assignment and copy constructor. Why do I say forgotten? Because there is no way to tell. So If you want your queue to be move only then you should actually <code>delete</code> those special member functions you dont want.</p></li>
<li><p>In your read function you never check whether the size you want to read is actually valid. Is that intendend? If so why? A <code>std::array</code> is not initialized so the memory in it that is not written by you will be random. You are not writing to it but you are copying it around. So you should actually take the minimum out of <code>size</code> and <code>queue.front().size()</code></p></li>
<li><p><code>std::string</code> has a member function <code>std::string::copy</code> that copyies a certain amount of chars to a buffer (<a href="http://www.cplusplus.com/reference/string/string/copy/" rel="nofollow noreferrer">http://www.cplusplus.com/reference/string/string/copy/</a>). I would suggest to use that for writing back to the buffer </p></li>
</ol>

<p>That leads me to the following:</p>

<pre><code>#include &lt;string&gt;
#include &lt;queue&gt;
#include &lt;vector&gt;

class simple_queue
{
private:
    static constexpr uint32_t max_msg_size = 4096;
    std::queue&lt;std::string, std::vector&lt;std::string&gt;&gt; char_queue;

public:  
   simple_queue(const simple_queue&amp;) = delete;
   simple_queue&amp; operator=(const simple_queue&amp;) = delete;

    uint32_t write(const char* const buff, const uint32_t size) noexcept
    {
        const uint32_t size_to_copy = std::min(max_msg_size, size);
        char_queue.emplace(buff, size_to_copy);
        return size_to_copy;
    }

    uint32_t read(char* const buff, const uint32_t size) noexcept
    {
        if (char_queue.empty())
        {
            return 0;
        }
        std::string&amp; msg = char_queue.front();
        const uint32_t size_to_copy = std::min(msg, size);
        msg.copy(buff, size_to_copy, 0);

        char_queue.pop();
        return size_to_copy;
    }
};
</code></pre>

<p>EDIT:</p>

<p>I forgot to mention, that now you should use a <code>std::vector</code> as backing of the queue as your are not storing a gargantuan array but rather a mall <code>std::string</code>. </p>

<p>Note that it actually ends up being the same. The <code>std::deque</code> based <code>std::array</code> implementation is backed by a linked list, so each array ends up in a node of a linked list, which is kind of similar to the separate allocation of the <code>std::string</code></p>
    </div>