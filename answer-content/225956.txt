<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The question asked by the OP boils down to  "How to make the macros work quicker".  To that end the only optimization that you commonly see that isn't included in the OP's macros is <code>Worksheet.DisplayPageBreaks</code>. </p>

<p>I have answered and tackled this problem several times and feel that timing a procedure goes hand in hand to the code optimizations and have tried to address both in the class below. </p>

<h2>VBACodeOptimizer:Class</h2>

<p>Uses my spin on Matt's factory method to time and optimize macros.  The purpose of the class is to save and restore the settings between one or more nested macros. The first macro may need to turn off the Optimizations where nested macros may need these settings turned on.</p>

<p>In retrospect it seems like many of the properties have an unclear usage.  For example: it is not clear where the <code>ScreenUpdating()</code> property is to used to store the return the original <code>Application.ScreenUpdating</code> value.</p>

<pre><code>VERSION 1.0 CLASS
Attribute VB_Name = "VBACodeOptimizer"

Attribute VB_PredeclaredId = True

Option Explicit

Private Type Members
    Calculation As XlCalculation
    CleanUpMessage As String
    EnableEvents As Boolean
    ScreenUpdating As Boolean
    TimeProcedure As Boolean
End Type

Private m As Members
Private WorksheetMap As New Scripting.Dictionary
Private StartTime As Double

Private Sub Class_Terminate()
    If Len(m.CleanUpMessage) &gt; 0 Then Debug.Print m.CleanUpMessage
    If m.TimeProcedure Then Debug.Print "Run Time in Seconds: "; getRunTime
End Sub

Public Function Self() As VBACodeOptimizer
    Set Self = Me
End Function

Public Function Create(Optional ByVal CleanUpMessage As String, Optional ByVal TimeProcedure As Boolean = True, Optional ByVal ApplyOptimizations As Boolean = True) As VBACodeOptimizer
    With New VBACodeOptimizer
        Set Create = .Self
        .CleanUpMessage = CleanUpMessage
        .TimeProcedure = TimeProcedure
        If TimeProcedure Then .setStartTime
        If ApplyOptimizations Then .Apply
    End With
End Function

Public Sub addWorksheet(ByRef Worksheet As Worksheet, Optional ByVal DisplayPageBreaks As Boolean = True)
    WorksheetMap.Add Worksheet, Worksheet.DisplayPageBreaks
    If DisplayPageBreaks Then Worksheet.DisplayPageBreaks = False
End Sub

Public Sub Apply()
    Dim item As Variant
    For Each item In WorksheetMap
        item.DisplayPageBreaks = False
    Next
End Sub

Public Function getRunTime(Optional Precision As Long = 2) As Double
    getRunTime = Round(Timer - StartTime, Precision)
End Function

Public Function getStartTime() As Double
    getStartTime = StartTime
End Function

Public Sub setStartTime()
    StartTime = Timer
End Sub

Public Sub Save()
    With Application
        'Save Events
        Calculation = .Calculation
        EnableEvents = .EnableEvents
        ScreenUpdating = .ScreenUpdating

        'Optimize Events
        .Calculation = XlCalculation.xlCalculationManual
        .EnableEvents = False
        .ScreenUpdating = False
    End With
End Sub

Public Sub Restore()
    With Application
        .Calculation = Calculation
        .EnableEvents = EnableEvents
        .ScreenUpdating = ScreenUpdating
    End With

    Dim item As Variant
    For Each item In WorksheetMap
        item.DisplayPageBreaks = WorksheetMap(item)
    Next
End Sub

Public Property Get Calculation() As XlCalculation
    Calculation = m_bCalculation
End Property

Public Property Let Calculation(ByVal Value As XlCalculation)
    m.Calculation = Value
End Property

Public Property Get CleanUpMessage() As String
    CleanUpMessage = m.CleanUpMessage
End Property

Public Property Let CleanUpMessage(ByVal Value As String)
    m.CleanUpMessage = Value
End Property

Public Property Get EnableEvents() As Boolean
    EnableEvents = m.EnableEvents
End Property

Public Property Let EnableEvents(ByVal Value As Boolean)
    m.EnableEvents = Value
End Property

Public Property Get ScreenUpdating() As Boolean
    ScreenUpdating = m.ScreenUpdating
End Property

Public Property Let ScreenUpdating(ByVal Value As Boolean)
    m.ScreenUpdating = Value
End Property

Public Property Get TimeProcedure() As Boolean
    TimeProcedure = m.TimeProcedure
End Property

Public Property Let TimeProcedure(ByVal Value As Boolean)
    m.TimeProcedure = Value
End Property
</code></pre>

<h2>Test</h2>

<p>This tests are show the basic use of the class but there are other nuances to it that can be useful.  One such use case would be use the <code>getRunTime()</code> function to support a "Do you wish to Continue" message.</p>

<pre><code>Sub Main()
    Dim CodeOptimizer As VBACodeOptimizer
    Set CodeOptimizer = VBACodeOptimizer.Create("Main")
    CodeOptimizer.addWorksheet Sheet1
    CodeOptimizer.addWorksheet Sheet2
    CodeOptimizer.addWorksheet Sheet3
    Macro1
    Macro2
End Sub

Sub Macro1()
    Dim CodeOptimizer As VBACodeOptimizer
    Set CodeOptimizer = VBACodeOptimizer.Create("Macro1")
    Application.Wait Now + TimeValue("0:00:01")
    Macro2
End Sub

Sub Macro2()
    Dim CodeOptimizer As VBACodeOptimizer
    Set CodeOptimizer = VBACodeOptimizer.Create("Macro2")
    Application.Wait Now + TimeValue("0:00:01")
End Sub
</code></pre>

<h2>Results</h2>

<p><a href="https://i.stack.imgur.com/V0RXZ.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/V0RXZ.png" alt="Immediate Window Results"></a></p>
    </div>