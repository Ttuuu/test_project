<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>As most of the points have been covered in the other answer I will just add some more.</p>

<h2>Alert is evil</h2>

<p>Do not use alert. There are only some very limited reasons to use them. This is not one of them. </p>

<p>Reasons not to use them.</p>

<ul>
<li>They are blocking and stop all Javascript from running while they are up.</li>
<li>They they prevent the client from navigating until they have been cleared.</li>
<li>They are annoying and require user interaction (in this case) when none is needed.</li>
<li>They can not be trusted. Clients can opt to have all alerts disabled so you can never be sure they are displayed.</li>
<li>They are ugly as sin.</li>
<li>They are too late. User interaction should never be a guessing game.</li>
</ul>

<p>For this type of interaction you are far better to predetermine if an item can be clicked and use the <code>cursor</code> to show if it can be clicked. A simple cursor as pointer <code>&lt;style&gt;.can-click { cursor: pointer; }&lt;/style&gt;</code> and a tooltip is all that is needed to indicate that the item can be clicked, rather than a page blocking intrusive pointless alert (I never return to a sites that do that).</p>

<p>If you must have a dialog the use a custom <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dialog" rel="nofollow noreferrer">dialog</a>. </p>

<pre><code>&lt;dialog id="noBreakdownsEl"&gt;
  &lt;p&gt;No point breakdowns for  &lt;span id="dialogYearEl"&gt;&lt;/span&gt;  are available.&lt;/p&gt;
&lt;/dialog&gt;
&lt;script&gt;
    setTimeout(() =&gt; {
        dialogYearEl.textContent = 1992;
        noBreakdownsEl.showModal();
    },1000);
&lt;/script&gt;
</code></pre>

<h2>Keep it D.R.Y. (Don't Repeat Yourself)</h2>

<p>You code is full of repeated code and data. As a programer, each repeated string of source code (especially data) should annoy you. It is very rare that you will need to repeat data, and if you are repeating source code, it should be in a function.</p>

<h2>HTML is for transport</h2>

<p>HTML is specifically designed for transport (eg from server to client over network) It is not a client side rendering language, you have the DOM API for that</p>

<p>Reasons not to add HTML via JS </p>

<ol>
<li>It is slow (very very slow). </li>
<li>It encourages you to add content into the code. This means that content changes require a full testing release cycle. Not something to take on lightly. </li>
<li>That only expert coders can make changes to content if markup in code (that's a HTML jockeys job)</li>
<li>Adding HTML ('element.innerHTML=foo') to a page resets all the event listeners. </li>
<li>Did I say it was SLOW....</li>
</ol>

<p>You should use <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/template" rel="nofollow noreferrer">template</a> element so you can store the HTML on the page where it belongs. See rewrite</p>

<h2>One handler.</h2>

<p>I don't know how many cells you have on the page, but you add an event handler for each (even the ones that can not be clicked)</p>

<p>You can use a single event listener that accepts a click on the table. You then use the event object passed to the listener to workout what to do with that click.</p>

<h2>Granular code is good code.</h2>

<p>You have one big function that does everything. This is not good as it make the code harder to read, debug, and most important modify.</p>

<p>Break the code into discrete functions that have a very clear job to do. Use functions to replace repeated sections of similar code.</p>

<p>The general rules of thumb for functions is</p>

<ol>
<li>Longer than a page is too long.</li>
<li>Does more than one thing? Would be better as two functions.</li>
<li>Don't go function crazy, creating a one line function used only once is too granular. A function should make the code smaller.</li>
</ol>

<h2>Rewrite</h2>

<p>As you call <code>swal</code> that expects markup I do not clone the template and just add the data to the elements. When all data elements are filled I then get the templates <code>innerHTML</code> that is passed to the function <code>swal</code> </p>

<p>However you should clone the template and add it directly to the page. Depending on what <code>swal</code> does of course.</p>

<p>I could not see any need for jQuery and added a helper <code>queryDOM</code> to make DOM API calls a little less verbose.</p>

<p>There is only one event listener on the table and it checks the target element for the added property <code>templateType</code> If the element has that property then it is processed.</p>

<p>I am also assuming that the number of cells are small (less than a few 100). If not then you should scan the cells (in function <code>addBandClick</code>) using a timeout event (a few at a time) so that you do not block the page.</p>

<p>The named items are taken from the template element as a data attribute <code>dataset.itemNames</code> however you could extract those names from the template elements saving some duplication in the markup.</p>

<p>Note this may not work as the click listener will be removed if you add any content as markup.</p>

<pre><code>const queryDOM = (qStr, element = document) =&gt; element.querySelector(qStr);
function itemText(row, name) {
    const cell = queryDOM("." + name, row);
    const text = cell ? cell.textContent : ""
    return name === "prize" ? getOrdinal(text) : text;
}
function bandHTML(cell) {
    const template = queryDOM("#template" + cell.templateType);
    for (const name of template.dataset.itemNames.split(",")) { 
        const element = queryDOM(`span [data-name="${name}"]`, template);
        element.textContent = itemText(cell.closestRow, name);
    }
    return template.innerHTML;
}
function bandClicked(event) {
    if (event.target.templateType) {
        swal({title: 'Point Breakdown', html: bandHTML(event.target)});
    }
}
function findClickableCells(table) {
    for (const row of  table.rows) {
        for (const cell of row.cells) {
            if (cell.cellIndex === 7 &amp;&amp; !queryDOM("i",cell)) {
                const year = Number(itemText(row, "year"));
                const costume = itemText(row, "costume") !== "";
                let type;
                if (year &gt; 1991 &amp;&amp; costume) { type = "A" }
                else if (costume) { type = "B" }
                else if (itemText(row, "mp") !== "") { type = "C" }                
                if (type) {
                    cell.templateType = type; // Must have, to be clickable
                    cell.classList.add("can-click");
                    ceil.closestRow = row;
                } else {
                    cell.title = `No point breakdowns for ${year} are available.`;
                }
            }
        }
    }
}

const table = queryDOM("#bands");
if (table) { 
    findClickableCells(table);
    table.addEventListener("click", bandClicked);
}
</code></pre>

<p>CSS class so that the client has feedback indicating what can be clicked.</p>

<pre><code>.can-click { cursor: pointer; }
</code></pre>

<p>HTML template example. You would create one for each display type. eg <code>id="templateA"</code>, <code>templateB</code>, <code>templateC</code></p>

<pre><code>&lt;template id="templateA" data-item-names="year,mp,costume,band,prize,band,ge_music,ge_visual,total,costumer,designer,arranger,choreographer"&gt;    
    &lt;h3&gt;&lt;span data-name="band"&gt;&lt;/span&gt; &lt;span data-name="year"&gt;&lt;/span&gt;&lt;/h3&gt;
    &lt;i&gt;&lt;span data-name="prize" Prize&lt;/i&gt;&lt;br&gt;&lt;br&gt;
    &lt;b&gt;Music:&lt;/b&gt; &lt;span data-name="ge_music"&gt;&lt;/span&gt;&lt;br&gt;
    &lt;b&gt;Presentation:&lt;/b&gt; &lt;span data-name="ge_visual"&gt;&lt;/span&gt;&lt;br&gt;
    &lt;b&gt;Costume:&lt;/b&gt; &lt;span data-name="costume"&gt;&lt;/span&gt;&lt;br&gt;&lt;br&gt;
    &lt;b&gt;Total Points: &lt;span data-name="total"&gt;&lt;/span&gt;&lt;br&gt;&lt;br&gt;
    &lt;b&gt;Costumer:&lt;/b&gt; &lt;span data-name="costumer"&gt;&lt;/span&gt;&lt;br&gt;
    &lt;b&gt;Costume/Set Designer:&lt;/b&gt; &lt;span data-name="designer"&gt;&lt;/span&gt;&lt;br&gt;
    &lt;b&gt;Music Arranger:&lt;/b&gt; &lt;span data-name="arranger"&gt;&lt;/span&gt;&lt;br&gt;
    &lt;b&gt;Choreographer:&lt;/b&gt; &lt;span data-name="choreographer"&gt;&lt;/span&gt;&lt;br&gt;
&lt;/template&gt;  
</code></pre>
    </div>