<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You don't really use <code>array[]</code>.  You store a value in <code>array[index]</code>, and then immediately read the value back out, and then never use that value again.  This results in unnecessary memory cycles.</p>

<pre><code>    array[index] = in.nextInt();
    prefixSum[index] = (prefixSum[index-1]+array[index]);
</code></pre>

<p>You could replace this with a temporary variable, and remove the array.</p>

<pre><code>    int element = in.nextInt();
    prefixSum[index] = prefixSum[index-1] + element;
</code></pre>

<p>As a minor efficiency boost, instead of adding the element to the <code>prefixSum[index-1]</code>, which involves an array lookup (another memory cycle), you could keep the running total in a local variable.</p>

<pre><code>int running_total = 0;
for (int index = 1; index &lt;= n; index++) {
    int element = in.nextInt();
    running_total += element;
    prefixSum[index] = running_total;
    ...
</code></pre>

<hr>

<p>You have two different ways of counting the sub-arrays that sum to a perfect square:</p>

<pre><code>count += isPerfectSquare(prefixSum[index]                ) ? 1 : 0;
count += isPerfectSquare(prefixSum[index]-prefixSum[prev]) ? 1 : 0;
</code></pre>

<p>The first is used when you are counting from the beginning of the list, the second when you start by excluding one or more elements from the beginning.</p>

<p>You could make the first method look more like the second, by adding a subtraction of <code>0</code>: </p>

<pre><code>count += isPerfectSquare(prefixSum[index]-      0        ) ? 1 : 0;
</code></pre>

<p>By design (or is it by coincidence?), <code>prefixSum[0]</code> actually contains the value <code>0</code>.</p>

<pre><code>count += isPerfectSquare(prefixSum[index]-prefixSum[ 0  ]) ? 1 : 0;
</code></pre>

<p>So if your second loop started with <code>for (int prev = 0;</code> instead of <code>for (int prev = 1;</code>, you could remove your first counting statement completely.</p>

<hr>

<p>Your outer nested loop runs one more time that necessary.  It runs while <code>prev &lt;= n</code>, where the inner loop starts at <code>index = prev+1</code> and runs while <code>index &lt;= n</code>.  On the last iteration of the outer loop, <code>prev == n</code>, so index starts at <code>index = n+1</code> and of course <code>index &lt;= n</code> is immediately false, so the inner loop doesn't run at all, which makes this last iteration of the outer loop pointless.  You could use <code>prev &lt; n</code> as the loop condition.</p>

<hr>

<p>The <code>count += isPerfectSquare(...) ? 1 : 0;</code> ternary operation isn't saving you much, and could be costing you some performance.  The ternary operation is an <code>if ... then ... else ...</code> statement, and the else part is <code>count += 0</code>, which is a no-op.  The following is clearer, and might even be faster.</p>

<pre><code>        if (isPerfectSquare(...)) {
            count++;
        }
</code></pre>

<hr>

<p>Improved code:</p>

<pre><code>int prefixSum[] = new int[n + 1];
int count = 0;
int running_total = 0
for (int index = 1; index &lt;= n; index++) {
    int element = in.nextInt();
    running_total += element;
    prefixSum[index] = running_total;
}
for (int prev = 0; prev &lt; n; prev++) {
    for (int index = prev+1; index &lt;= n; index++) {
        if (isPerfectSquare(prefixSum[index] - prefixSum[prev])) {
            count++;
        }
    }
}
System.out.println("count = " + count);
</code></pre>
    </div>