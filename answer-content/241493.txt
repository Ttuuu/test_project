<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Again, your code seems well written and easy to follow and understand. Except for the name <code>_nameList</code> (as mentioned in the comment by BCdotWEB) your naming seems ok.</p>

<p>Below, find my comments inline (<code>// HH: ...</code>) and my refactoring attempt:</p>

<pre><code>// HH: You need a mechanism to remove the name from the name list when the Robot dies (= is garbage collected). Implementing IDisposable could be the way to go.
public class Robot
{
  private static Random _random;
  private string _name; // HH: Use auto property for Name { get; private set; }
  private static readonly HashSet&lt;string&gt; _nameList = new HashSet&lt;string&gt;();
  public string Name =&gt; _name; // HH: Use auto property for Name { get; private set; }

  public Robot()
  {
    _random = new Random(); // HH: Instantiate this once when declaring it above. It gives no meaning to recreate a static member for each new instance of the object
    _name = GenerateRandomName();
  }

  public void Reset()
  {
    _nameList.Remove(_name); // HH: this needs to be done after GenerateRandomName() or else you could potentially create and use the same name again.
    _name = GenerateRandomName();
  }

  // HH: See my suggestion for an more readable approach. If you have to break the code into more lines, then IMO block style is more appropriate
  private static string GenerateRandomLetters() =&gt; new string(Enumerable.Repeat("ABCDEFGHIJKLMNOPQRSTUVWXYZ", 2)
    .Select(s =&gt; s[_random.Next(s.Length)]).ToArray());

  private static string GenerateRandomName()
  {
    string name;

    do
    {
      name = $"{GenerateRandomLetters()}{_random.Next(10)}{_random.Next(10)}{_random.Next(10)}";
    }
    while (_nameList.Contains(name)); // HH: You could just check: _nameList.Add(name) which will return false, if the name is already present in the set

    _nameList.Add(name);
    return name;
  }
}
</code></pre>

<hr>

<p>My version:</p>

<pre><code>  public class Robot : IDisposable
  {
    private static readonly Random _random = new Random();
    const string _nameChars = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    private static readonly HashSet&lt;string&gt; _namesInUse = new HashSet&lt;string&gt;();
    public string Name { get; private set; }

    public Robot()
    {
      Name = GenerateRandomName();
    }

    public void Reset()
    {
      Name = GenerateRandomName();
      _namesInUse.Remove(Name);
    }

    private static string GenerateRandomLetters()
    {
      return $"{_nameChars[_random.Next(_nameChars.Length)]}{_nameChars[_random.Next(_nameChars.Length)]}";
    }

    private static string GenerateRandomName()
    {
      string name;

      do
      {
        name = $"{GenerateRandomLetters()}{_random.Next(1000):000}";
      } while (!_namesInUse.Add(name));

      return name;
    }

    public void Dispose()
    {
      if (Name != null)
      {
        _namesInUse.Remove(Name);
        Name = null;
      }
    }
  }
</code></pre>
    </div>