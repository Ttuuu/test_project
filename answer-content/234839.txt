<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>If you want to see how performance is you need to get the user input out of the loop.  I'm assuming you don't want to measure the time it takes someone to type in or paste in the data elements.  </p>

<p>You don't need the variable <code>how_many</code> as it will always be the same as the <code>Count</code> of <code>which</code>, which by the way isn't a good name for a variable even something like results would be better name.</p>

<p>You also don't need the <code>context</code> array variable. Just need to store the current value not save each element as it loops through. </p>

<p>The variables <code>i, y, max, average, min</code> can all be declared in the loop scope and not need to be reset.</p>

<p>Calling <code>Count()</code> on  <code>which.Count()</code> is the Linq Count method, should just call the list Count property </p>

<p>I'm also assuming this is a beginner question and won't get into Console as input and validating the data coming from it is valid.  </p>

<p>I personally didn't want to type in all the data so I made the computer generate random data, if in debug mode</p>

<pre><code>    static void Main(string[] args)
    {
#if DEBUG
        var random = new Random();
        var inputs = "1000 1000".Split();
#else
        var inputs = Console.ReadLine().Split();
#endif
        var cities = Convert.ToInt32(inputs[0]);
        var days = Convert.ToInt32(inputs[1]);

        var data = new List&lt;int[]&gt;(cities);
        for (var i = 0; i &lt; cities; i++)
        {
#if DEBUG
            var cityData = Enumerable.Range(0, days)
                .Select(_ =&gt; random.Next(100))
                .ToArray();
#else
            var cityData = Console.ReadLine()
                .Split()
                .Select(x =&gt; Convert.ToInt32(x))
                .ToArray();
#endif
            if (cityData.Length != days)
            {
                Array.Resize(ref cityData, days);
            }
            data.Add(cityData);
        }

        var timer = new Stopwatch();
        timer.Start();
        var results = new List&lt;int&gt;();
        for (var i = 0; i &lt; cities; i++)
        {
            float max = float.MinValue;
            float average = 0;
            float min = float.MaxValue;
            for (var y = 0; y &lt; days; y++)
            {
                var content = data[i][y];
                average += content;
                if (content &gt; max)
                {
                    max = content;
                }
                if (content &lt; min)
                {
                    min = content;
                }
            }
            average = average / days;

            if (max - average &gt; average - min)
            {
                int position = i + 1;
                results.Add(position);
            }
        }

        Console.Write(results.Count + " ");
        Console.WriteLine(string.Join(" ", results));
        timer.Stop();
        Console.WriteLine();
        Console.WriteLine($"Total Processing Time: {timer.Elapsed}");
        Console.ReadKey();
    }
</code></pre>

<p>This code runs in less than a second on my machine.  I assume waiting for user input was what was taking the longest time in pervious one and not actually the processing of the data. </p>
    </div>