<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<pre><code>node_t *funzione(node_t *head){
</code></pre>
</blockquote>

<p>This is a weird name for a function to remove a node.  The naming should reflect what the operation does, not what it is.     </p>

<blockquote>
<pre><code>    int x;
    node_t *temp = head;
    node_t *curr = head;
</code></pre>
</blockquote>

<p>The way the rest of your function works, it assumes that <code>temp</code> points to the node after <code>curr</code> in the list, assigning them to the same node is asking for trouble.</p>

<blockquote>
<pre><code>    temp = (node_t *)malloc(sizeof(node_t));
    curr = (node_t *)malloc(sizeof(node_t));
</code></pre>
</blockquote>

<p>You don't need to <code>malloc</code> anything here, you're not doing anything with the memory.  Since <code>malloc</code> returns <code>void *</code>, casting it to <code>node_t*</code> would be unnecessary.</p>

<blockquote>
<pre><code>    printf("Inserisci il valore che vuoi eliminare: \n");
    scanf("%d", &amp;x);
</code></pre>
</blockquote>

<p>This would be better done in another method, with the value being passed in as a parameter to this method, to indicate what to remove.</p>

<blockquote>
<pre><code>    if (head == NULL)
        exit(0);
</code></pre>
</blockquote>

<p>This is pretty drastic.  If you're going to just abort the app like this, then it would be a good idea to print something to <code>stderr</code> to give an indication what happened.  Generally, consider wrapping if clauses in <code>{}</code>, even when they're single line.  I think it would be ok in this situation to return <code>head</code>, i.e. <code>NULL</code> in this situation, rather than exiting the program.  If the caller passed in a <code>head</code> of <code>NULL</code>, they're probably ok handling it coming back from the method.</p>

<blockquote>
<pre><code>    while(head-&gt;val == x){
        head = head-&gt;next;
        free(temp);
        temp = head;
    }
</code></pre>
</blockquote>

<p>This <code>free</code>s the memory allocated for <code>temp</code> above, however it doesn't free the actual node pointed to by <code>head</code> on the first pass.</p>

<blockquote>
<pre><code>    curr = head;
    temp = curr-&gt;next;

    while (temp != NULL){
        if (temp-&gt;val == x){
            if(temp-&gt;next != NULL){
                curr-&gt;next = temp-&gt;next;
                free (temp);
                temp = curr-&gt;next; 
            }
            else {
                curr-&gt;next = NULL;
</code></pre>
</blockquote>

<p>You stop pointing at <code>temp</code>, but never <code>free</code> it, or break out of the loop, so you'll just keep revisiting this assignment over and over again.</p>
    </div>