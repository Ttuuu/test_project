<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Know your standard library!  In this case, there's a heap container provided for us, called <code>std::priority_queue</code>.  If we use it, we can remove all of the heap management code we've reinvented, and focus on the algorithm itself.  Note that we will need to <code>pop()</code> and <code>push_back()</code> to reposition a thread when we assign work; this operation remains O(log <em>T</em>), and is likely much better than re-heapifying the entire heap at each iteration.</p>

<p>Remember that <code>std::pair</code> already has a <code>&lt;</code> operator that does exactly what we want, if we order it so that next free time is the first element and thread index the second.</p>

<p>The split between <code>main()</code> and <code>JobQueue</code> seems a bit stilted to me.  I'd expect <code>main()</code> to read the initial inputs and use them to create an appropriately-dimensioned <code>JobQueue</code>, and then to feed inputs to it.  And finally, to inspect the next starting time and to print it.  At present, <code>JobQueue</code> seems to have two responsibilities mixed together - it's both calculating and performing I/O and it's hard to separate the two (e.g. for unit testing).</p>

<p>I don't think there's any need to store the job values or the start times - we can simply return the start time from the <code>insert_job()</code> method and print it immediately.</p>

<p><del>To store times, <code>long long</code> could be overkill - for a range of 0 to 10⁹, we only need 30 bits, so we could use <code>uint_fast32_t</code> for those.</del>  For the number of workers, <code>std::size_t</code> is probably most appropriate, as we'll use that for capacity in our heap.</p>

<p>We need a range of 0 to 10¹⁴ for times, so <code>long long</code> could be overkill.  We could possibly get away with maintaining a single "epoch" value and only store the last few dozen bits in a <code>uint_fast32_t</code> in the pair - use one or more high-order bits to determine whether value is relative to the current epoch or to the previous one.  Remember that with each individual job limited to 10⁹ units, there's only two valid epochs to consider at any given time.</p>
    </div>