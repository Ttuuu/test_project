<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Some quick remarks:</p>

<ul>
<li><p><code>SendStatisticsToEmail()</code> is a <em>75 line</em> method with almost <em>a dozen arguments</em> and it does waaay too much. Split this method up into smaller methods -- for instance: one that gets the fileName, one that composes the body, etc. -- that do one single thing, and instead of passing so many arguments, pass a single class that has all these arguments as properties. </p>

<p>(See for instance <a href="https://softwareengineering.stackexchange.com/q/27798/123339">https://softwareengineering.stackexchange.com/q/27798/123339</a> on the "ideal" method length. Sure, this is personal and debatable, but once you need to scroll to read through the contents of a method you're probably on the wrong path and you'll need to refactor things.)</p>

<p>Case in point: your method contains ten lines that are dedicated to converting an image into bytes. This should clearly be a method of its own instead of being chucked in the middle of this overlong mess. Another example: on line 17 you say <code>var builder = new BodyBuilder();</code> and then you don't use <code>builder</code> until line 27. This indicates a severe lack of structure and program flow.</p>

<p>Even better: consider converting <code>SendStatisticsToEmail()</code> into a class with one <code>public</code> method and several <code>private</code> ones, instead of it being one method among many. You might even consider converting some of those <code>private</code> methods into classes of their own.</p></li>
<li><p>One of the lines in <code>SendStatisticsToEmail()</code> is 450 characters long. This is unreadable and impossible to maintain. Even if you were to introduce some line-breaks, it would still be far too hard to maintain. Also, your email's body should really contain better HTML than what you currently offer. </p>

<p>Instead, consider moving your email template to an embedded HTML file, with its variables to be filled in replaced by placeholders like <code>_ContentId_</code>. You read the embedded file into a string, and then have a method that loops through a <code>Dictionary&lt;string, string&gt;</code> where the keys are those placeholders and the values are the actual values.</p></li>
<li><p>Why is the <code>if (saveDateSent)</code> logic inside the <code>using (var client = new SmtpClient())</code> block? Ditto <code>if (sendNowButtonUsed)</code>. These do not belong there. The whole <code>using (var client = new SmtpClient())</code> should be a method or even a class of its own, and that should return a <code>bool</code> to indicate success or failure, and that <code>bool</code> should then be used to trigger the logic the <code>if (saveDateSent)</code> logic and the <code>if (sendNowButtonUsed)</code> logic (and the UI logic now residing in the <code>catch</code> block).</p></li>
<li><p>Avoid mixing UI elements into methods that should stay free of them. Sure, you need to report back on the success of sending an email to the user, but not from <em>inside</em> a convoluted method. Things like sending emails, calling the API etc. should be part of a service layer.</p></li>
</ul>
    </div>