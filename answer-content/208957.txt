<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Memoization</h3>

<p>Looking into memoization is a good idea - in this case it allows you to achieve <span class="math-container">\$O(n)\$</span> runtime performance instead of <span class="math-container">\$O(2^n)\$</span>. One way to add memoization is to create a wrapper method that takes the same arguments as <code>Decode</code>. This method first looks up the given arguments in a dictionary, and if they're present, it can return the memoized result. If not, it will call <code>Decode</code> and store its result in the dictionary before returning it.</p>

<p>However, I would recommend removing <code>NumDecodings</code> and rewriting <code>Decode</code> so it only takes a single <code>string</code> parameter. That will simplify memoization and make it a little more efficient. For example, <code>"412123"</code> and <code>"512123"</code> both have the same suffix (<code>"12123"</code>), but because the 'sub-calls' <code>("412123", 1, 1)</code> and <code>("512123", 1, 1)</code> use different arguments (and thus different memoization keys) you won't benefit from memoization across those different inputs.</p>

<h3>Other notes</h3>

<ul>
<li>Instead of passing the original input string and an offset and length, consider passing 'the rest of the string' instead. <code>Decode</code> can then call <code>Decode(s.Substring(1))</code> if the leading digit is a valid unit, and <code>Decode(s.Substring(2))</code> if the leading 2 digits are a valid unit.</li>
<li>There are various things in the current code that can be simplified:

<ul>
<li><code>if (i + len - 1 &gt;= s.Length)</code> to <code>if (i + len &gt; s.Length)</code></li>
<li><code>s.Substring(i, len)[0] == '0'</code> to <code>s[i] == '0'</code></li>
<li><code>else if (i + len - 1 == s.Length - 1</code> to <code>else if (i + len == s.Length</code></li>
<li><code>jump1 = i + len - 1 + 1</code> to <code>jump1 = i + len</code></li>
<li><code>jump2 = i + len - 1 + 2</code> to <code>jump2 = i + len + 1</code></li>
</ul></li>
<li>Moving <code>s.Substring(i, len)[0] == '0'</code> to an <code>else if</code> branch allows you to remove the <code>sub &lt; 27 &amp;&amp; sub &gt; 0</code> checks below.</li>
<li>Disabling code during development is normal, but it's a good idea to clean things up from time to time.</li>
<li>I would rename <code>Decode</code> to something more descriptive like <code>ValidDecodingsCount</code> - <code>Decode</code> implies that it actually decodes the given input, which is not the case. <code>jump1</code> and <code>jump2</code> aren't very descriptive names either, but it's a bit difficult to come up with better names. Maybe <code>rest1Combinations</code> and <code>rest2Combinations</code>?</li>
</ul>
    </div>