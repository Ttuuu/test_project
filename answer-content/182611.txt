<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>too vague &amp; hiding test cases</h3>

<blockquote>
<pre><code>[DataRow("Name", "A normal name", "A normal name", new string[] { "Name" })]
[DataRow("Name", null, null, new string[] { "Name" })]
[DataRow("Name", "", "", new string[] { "Name" })]
[DataRow("Name", "A normal name", "A normal name", new string[] { "Name" })]
[DataRow("Name", "A really very super duper long string to test the overall allowed length", "A really very super duper long string to test the overall allowed length", new string[] { "Name" })]
</code></pre>
</blockquote>

<p>Tests should be testing very specific things. This test however isn't doing that. I looks like it's not simply testing the <code>PropertyChanged</code> event. If it was, then a single <code>DataRow</code> would be enough to tell whether the event fires or not.</p>

<p>It seems to also test some conditions that might prevent it from firering. Such tests should be done separately because here it's not clear what conditions you are testing. </p>

<hr>

<h3>too many hardcoded strings</h3>

<p>Technically I find it's ok but to my taste there are too many hardcoded strings. I wouldn't say anything if it was just data but since they are property names I don't like them being strings.</p>

<p>You could use <code>nameof</code> to replace them with something more dynamic but then the test would not be very readable anymore.</p>

<hr>

<h3>extend <code>Assert</code> &amp; use expressions</h3>

<p>Instead it'd be a better idea to write an extension for the <code>Assert.That</code> property that you could use for testing the event in this way:</p>

<pre><code>Assert.That.PropertyChanged(
    new Customer(), 
    x =&gt; x.FirstName = "John", 
    x =&gt; x.FirstName,
    x =&gt; x.FullName
);
</code></pre>

<p>where the signature of the method is:</p>

<pre><code>public static void PropertyChanged&lt;T&gt;(
    this Assert assert, 
    T obj, 
    Action&lt;T&gt; setProperty,
    params Expression&lt;Func&lt;T&gt;&gt;[] changedProperties
)
{
    ...
}
</code></pre>

<p>now you can do the reflection magic here.</p>

<hr>

<p>This is just an idea but you could of course have a couple of such extensions. One very gneric and another one that e.g. assumes that the property being set always fires an event for it.</p>

<hr>

<h3>confusing naming</h3>

<blockquote>
<pre><code>foreach (var s in propChangedNames)
</code></pre>
</blockquote>

<p>If you must give variables single letter names then let them at least be derived from the main name. Here <code>p</code> or <code>pcn</code> would be appropriate. <code>s</code> does not stand for anything. The only exception is <code>x</code> in lambda expressions which stands for <em>current-item</em>.</p>

<hr>

<h3>misses the point</h3>

<blockquote>
  <p>although it could even be generalized with a templated method for all classes</p>
</blockquote>

<p>Then do this because otherwise you failed to reach the third goal which is:</p>

<blockquote>
  <p>Don't write a ton of very repetitive test code</p>
</blockquote>
    </div>