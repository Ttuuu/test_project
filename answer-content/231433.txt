<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Dependency Management</strong></p>

<p>The Scanner is a dependency in each of the 3 methods and may be difficult to unit test around. </p>

<p><strong>Magic Numbers</strong></p>

<p>Explicit numbers used should be wrapped in a constant to better explain its purpose. 0.45359237 is an example of this. It is difficult to understand what some of these numbers are used for unless you are deep in the implementation details.</p>

<p><strong>Object-Oriented Composition Opportunity</strong></p>

<p>We aren't really using object-oriented tools provided by Java. There is only one class used in a very procedural way.</p>

<p>I created a design to help practice object-oriented composition. Instead of one main class calling two methods within your single calculator class, my design creates three new classes. One base class called BMICalculation. Then two more specific subclasses that inherit from that base class called ImperialBMICalculation and MetricBMICalculation. In the constructor for the two subclasses, you will put the user prompt to get the height and weight information for the calculation of each type. Also during construction, you can calculate the BMI for the object and use it to populate a results string on each object. BMICalculation will have methods that will be overridden by the subclasses such as displaying the result of a particular calculation. This gives you the option to create many instances of BMI calculation objects or be able to attach the object to something like a person object.</p>

<p><strong>Conclusion</strong></p>

<p>Great start! I like the exception handling and attention to detail. I hope this feedback helps and I will leave my live code review below.</p>

<p>Live code review: <a href="https://youtu.be/RMJWdH2dQXU" rel="nofollow noreferrer">https://youtu.be/RMJWdH2dQXU</a></p>
    </div>