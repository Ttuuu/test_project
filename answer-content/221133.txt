<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>A basic recursive idea is to repeatedly reduce the problem to a simpler version of the same kind, until it reaches a base case which can no longer be reduced. Recursive solutions are often "simple" in the sense of not using many lines of code, so that's something to look for.</p>

<p>Let's see how this can be applied to this particular problem. Take the word "cow", with the permutations </p>

<blockquote>
  <p>cow, cwo,  ocw, owc,  wco, woc</p>
</blockquote>

<p>Notice how the first character stays the same, until all permutations of the "tail" has been covered. That's the reduction step you need: For each character in the string, make that the first character, and then call the function again with the <em>rest</em> of the characters. Keep track of the character selection order as that will be the word. Then remember to catch the base case: If there's no characters left in the string, we're done removing characters and the word is complete.</p>

<pre><code>def lexperm(s, word=''):
    if not s:
        print(word)
    for i, char in enumerate(s):
        lexperm(s[:i] + s[i+1:], word + char)
</code></pre>

<p>Notice how this doesn't require swapping or reversing anything, because we're removing all characters, in every order.</p>
    </div>