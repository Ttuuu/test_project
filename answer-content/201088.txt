<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>variable naming</h1>

<p><code>np_arr</code> is a bad name for a variable, especially if you use it in multiple places, each with a different meaning. Name the part, so for example in <code>fit_transform</code>, <code>samples</code> is a better name.
<code>self.unq</code> is also unclear, I would replace it with <code>self._categories</code></p>

<h1><code>_assure</code></h1>

<p>why not just use the built-in <code>assert</code>. If you really want to raise a <code>ValueError</code> instead of an <code>AssertionError</code>, make it a top-level function instead of putting it on the class.</p>

<h1>@property</h1>

<p>instead of </p>

<pre><code>class OneHotEncoder:
    def __init__(self):
        self.unq = np.array([])
        self.n_features = len(self.unq)

    def set_unq(self, unq):
        self.unq = unq
        self.n_features = len(unq)
</code></pre>

<p>you can use the <a href="https://docs.python.org/3/library/functions.html#property" rel="nofollow noreferrer"><code>@property</code></a> decorator</p>

<pre><code>class OneHotEncoder:
    def __init__(self):
        self._categories = None

    @property
    def categories(self):
        assert self._categories is not None, 'Fit the encoder first'
        return self._categories

    @categories.setter
    def categories(self, categories):
        self._categories = categories

    @property
    def n_features(self):
        return len(self.categories)
</code></pre>

<p>and then where you would use <code>self.set_unq(unq)</code>, you can do <code>self.categories = unq</code></p>

<h1>shape</h1>

<p>Is there any particular reason why the last axis must be length 1? I find shape <code>(n_samples,)</code> more intuitive than <code>(n_samples, 1)</code></p>

<h1>tests</h1>

<p>Did you test this code? 
in your  example code, <code>encoded</code> is </p>

<pre><code>array([[1., 1., 1., 1.],
       [1., 1., 1., 1.],
       [1., 1., 1., 1.],
       [1., 1., 1., 1.],
       [1., 1., 1., 1.],
       [1., 1., 1., 1.],
       [1., 1., 1., 1.]])
</code></pre>

<p>so something went wrong there (probably to do with the extra dimension).</p>

<h1>dtype</h1>

<p>For the encoded array, I would use <code>dtype=bool</code>, since it's a series of flags.</p>

<h1>examples</h1>

<p>including examples in the docstring might make it clearer what the goal of the method is</p>

<h1>DRY</h1>

<p>The code to fit the <code>np_arr</code> is used in 2 methods, you can refactor that out</p>

<p>In <code>inverse</code>, you have the code <code>np.argmax(np_arr, axis=-1).reshape(-1, 1)</code>, which is exactly what <code>inverse_to_lables</code> does, so use that method instead of repeating the code</p>

<h1>class</h1>

<p>Why do you need a class for this? All you use it for is passing around the categories of the encoding. passing them around as arguments seems a lot easier, then these 4 methods do about the same as your class</p>

<pre><code>def encode_index(index, n_categories: int=None):
    if n_categories is None:
        n_categories = len(np.unique(index))
    shape = (len(index), n_categories)
    encoding = np.zeros(shape, dtype=bool)
    encoding[range(len(index)), index] = True
    return encoding
</code></pre>

<p>takes a list of integers, and turns it into the encoded form</p>

<pre><code>encode_index([0,1,2,1])
</code></pre>

<blockquote>
<pre><code>array([[ True, False, False],
       [False,  True, False],
       [False, False,  True],
       [False,  True, False]])
</code></pre>
</blockquote>

<p>and it's inverse:</p>

<pre><code>def decode_index(encoding):
    return np.argmax(encoding, axis=-1)
</code></pre>

<p>the higher-level encoding can be done like this:</p>

<pre><code>def encode(samples, categories=None):
    cat, index = np.unique(samples, return_inverse=True)
    categories = categories if categories is not None else cat
    encoding = encode_index(index, len(categories))
    return encoding, categories

encode(list('abdefea'))
</code></pre>

<blockquote>
<pre><code>(array([[ True, False, False, False, False],
        [False,  True, False, False, False],
        [False, False,  True, False, False],
        [False, False, False,  True, False],
        [False, False, False, False,  True],
        [False, False, False,  True, False],
        [ True, False, False, False, False]]),
 array(['a', 'b', 'd', 'e', 'f'], dtype='&lt;U1'))
</code></pre>
</blockquote>

<p>and the inverse:</p>

<pre><code>def decode(encoding, categories):
    index = decode_index(encoding)
    return categories[index]
</code></pre>
    </div>