<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<pre><code>printf '%b' "dump_arguments()\\n----------------\\n$# arguments are being inspected"
</code></pre>
</blockquote>
<p>We could make that easier to read by making each line a separate argument, and ending the line properly (rather than requiring a separate command):</p>
<pre><code>punct=.
${1+false} true || punct=:
printf '%s\n'                                       \
       'dump_arguments()'                           \
       '----------------'                           \
       "$# arguments are being inspected$punct"
</code></pre>
<p>It seems odd to use <code>%s</code> here:</p>
<blockquote>
<pre><code>    printf '%s' "[$i]: '$1'"
</code></pre>
</blockquote>
<p>Why not use the format string more clearly?  And this allows us to modify to use <code>%q</code> if we have a suitable printf:</p>
<pre><code>    printf "[%d]: '%s'" "$i" "$1"
</code></pre>
<p>Perhaps even combine the type into a single print:</p>
<pre><code>    type=
    [ -z "$1" ] &amp;&amp; type=' (empty)'
    [ "$1" -eq "$1" ] 2&gt;/dev/null &amp;&amp; type=' (integer)'
    printf "[%d]: '%s'%s\n" "$i" "$1" "$type"
</code></pre>
<p>Is it intentional that strings such as <code>' 5'</code> (with leading and/or trailing spaces) are counted as integers?</p>
<blockquote>
<pre><code>    shift 1
</code></pre>
</blockquote>
<p>Normally written simply as</p>
<pre><code>    shift
</code></pre>
<p>That said, I think it's more natural to iterate over arguments using a <code>for</code> loop instead.</p>
<blockquote>
<pre><code>} &gt;&amp;2
</code></pre>
</blockquote>
<p>That's surprising, as the output isn't an error, but expected when calling the function.  It should be up to the caller to choose where stream 1 goes.</p>
<hr>
<h1>Modified code</h1>
<pre><code>#!/bin/sh

dump_arguments()
# string function - prints arguments (position and content)
# indicates empty arguments and integer numbers
{
    punct=${1+:}
    printf '%s\n'                                               \
           'dump_arguments()'                                   \
           '----------------'                                   \
           "$# arguments are being inspected${punct:-.}"
    i=1
    for v
    do
        if [ -z "$v" ]
        then type=' (empty)'
        elif [ "$v" -eq "$v" ] 2&gt;/dev/null
        then type=' (integer)'
        else type=
        fi
        printf "[%d]: '%s'%s\n" \
               "$i"   "$v" "$type"
        i=$((i+1))
    done
}
</code></pre>
    </div>