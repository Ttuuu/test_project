<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Notions in no particular order, not probably what you're expecting though:</p>

<p><strong>On the unpredictability of sleep</strong> </p>

<p>In the loop </p>

<pre><code>int waited = 0;
while(_active &amp;&amp; (waited &lt; _splashTime)) {
   sleep(100);
   if(_active) {
      waited += 100;
   }
}
</code></pre>

<p>Method <code>sleep</code> might not guarantee that the time slept is actually 100 ms. It might more or it might be less depending on the context and clock accuracy etc. It might be better if you relied on the system clock instead of a counter: </p>

<pre><code>long started = System.currentTimeMillis();
while(_active &amp;&amp; System.currentTimeMillis() - start &lt; _splashTime) {
   sleep(100);
}
</code></pre>

<p>If you end up using the <code>waited</code> counter, the <code>if(_active)</code> conditions might not be necessary.</p>

<p><strong>On initial values</strong></p>

<p>If you have no particular reason for defining the variables initial values on separate lines, you could define them in the same line </p>

<pre><code>int waited = 0;
boolean _active;
int _splashTime;
_active = true;
_splashTime = 500;
</code></pre>

<p>becomes</p>

<pre><code>int waited = 0;
boolean _active = true;
int _splashTime = 500;
</code></pre>

<p><strong>On naming</strong></p>

<p>I've seen underscore to denote instance variables and I after a quick skimming I thought <code>_active</code>and <code>_splashTime</code> were such. Instead they were local variables. Perhaps not using and underscore might be more conventional.</p>

<p>You use underscore on instance variables as well, which is OK though I'm not a big fan of it. </p>

<p>There's also some inconsistency with variable names with multiple words: compare <code>surfaceHolder</code> and <code>play_button</code>. In Java it's convetional that variable names are in camel-case without spaces; <code>playButton</code> would be better. </p>

<p>Names of classes usually begin with a capital letter e.g. <code>Template2d</code>,  <code>Menu</code>.</p>

<p><strong>On constants</strong> </p>

<p>It seems to me you're trying to declare a constant <code>_splashTime</code>. Why not just do so  with </p>

<pre><code>public class template2d extends Activity {
  private static final SPLASH_TIME_IN_MILLISECONDS = 500;
}
</code></pre>

<p><strong>On visibity</strong> </p>

<p>I would prefer if all instance variables would be either <code>private</code> or <code>final</code>.</p>

<p>It's at least not a bad idea to keep the scope of your variables as small as possible. In </p>

<pre><code>Canvas c;
while (_run) {
    c = null;
    try {
        c = _surfaceHolder.lockCanvas(null);
        synchronized (_surfaceHolder) {
            _panel.onDraw(c);
        }
    } finally {
        // do this in a finally so that if an exception is thrown
        // during the above, we don't leave the Surface in an
        // inconsistent state
        if (c != null) {
            _surfaceHolder.unlockCanvasAndPost(c);
        }
    }
}
</code></pre>

<p>The canvas variable <code>c</code> exists outside of the <code>while</code>-loop while it isn't used anywhere but in it. You could declare the variable inside the loop to limit it's scope </p>

<pre><code>while (_run) {
    Canvas c = null;
    try {
        c = _surfaceHolder.lockCanvas(null);
        synchronized (_surfaceHolder) {
            _panel.onDraw(c);
        }
    } finally {
        // do this in a finally so that if an exception is thrown
        // during the above, we don't leave the Surface in an
        // inconsistent state
        if (c != null) {
            _surfaceHolder.unlockCanvasAndPost(c);
        }
    }
}
</code></pre>

<p><strong>On order of things</strong></p>

<p>The contents of a class is usually in an order not unline the following</p>

<ol>
<li>The class signature </li>
<li>public static constants</li>
<li>private static constants</li>
<li>private static variables </li>
<li>private constants </li>
<li>private variables</li>
<li>constructors</li>
<li>public methods</li>
<li>private methods</li>
</ol>

<p>It makes the code harder to follow if there are instance variable declarations in more than one place. </p>

<p>Lately I've been experimenting on how it feels like when everything private is tucked down to the bottom of the class and I like it. Coding conventions trump personal preferences though. </p>

<p><strong>On doing just one thing</strong> </p>

<p>Each class and object should preferably do just one thing i.e. they should have a <a href="https://en.wikipedia.org/wiki/Single_responsibility_principle" rel="nofollow noreferrer">single responsibility</a>. At least the class <code>Panel</code> contain the responsibilities of drawing the surface and responding to events. These two things could be split into two different classes if it makes sense. </p>

<p><strong>On different ways of writing the same code</strong></p>

<p>In this code</p>

<pre><code>retry = true;
while (retry) {
    try {
        _thread.join();
        retry = false;
    } catch (InterruptedException e) {
        // we will try it again and again...
    }
}
</code></pre>

<p>You could achieve the same thing with a break statement to get rid of an extra variable</p>

<pre><code>while (true) { // or for(;;)
    try {
        _thread.join();
        break; 
    } catch (InterruptedException e) {
        // we will try it again and again...
    }
} 
</code></pre>

<p>or defining the logic in a method to describe your intent more clearly</p>

<pre><code>while(!hasThreadStopped) {
     // Retry until thread stops
} 
...

private boolean hasThreadStopped() {
    try {
        _thread.join();
        return true;
    } catch (InterruptedException e) {
        return false;
    }
}
</code></pre>
    </div>