<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>A couple of thoughts:</p>

<ol>
<li><p>You are conceiving the band as being something derived from the frequency. While this may be technically correct, from a user perspective, you generally choose a band and then choose a frequency within that band. So, I might have a model that reflects this:</p>

<pre><code>typealias RadioFrequency = Decimal

enum RadioBand {
    case am
    case fm
}

extension RadioBand {
    var allowedRange: ClosedRange&lt;RadioFrequency&gt; {
        switch self {
        case .am: return 520.0 ... 1610.0
        case .fm: return 88.3 ... 107.9
        }
    }
}

struct RadioStation {
    let name: String
    let band: RadioBand
    let frequency: RadioFrequency

    init?(name: String, band: RadioBand, frequency: RadioFrequency) {
        guard band.allowedRange ~= frequency else { return nil }

        self.name = name
        self.band = band
        self.frequency = frequency
    }
}
</code></pre>

<p>and</p>

<pre><code>guard let station = RadioStation(name: "KPCC", band: .fm, frequency: 89.3) else {
    // handle error here

    return
}
</code></pre></li>
<li><p>If you really wanted to compute the band from the frequency, you could do:</p>

<pre><code>enum RadioBand: CaseIterable {
    case am
    case fm
}

extension RadioBand {
    var allowedRange: ClosedRange&lt;RadioFrequency&gt; {
        switch self {
        case .am: return 520.0 ... 1610.0
        case .fm: return 88.3 ... 107.9
        }
    }

    static func band(for frequency: RadioFrequency) -&gt; RadioBand? {
        RadioBand.allCases.first { $0.allowedRange ~= frequency }
    }
}

struct RadioStation {
    let name: String
    let frequency: RadioFrequency
    var band: RadioBand? { RadioBand.band(for: frequency) }

    init?(name: String, frequency: RadioFrequency) {
        guard RadioBand.band(for: frequency) != nil else { return nil }

        self.name = name
        self.frequency = frequency
    }
}
</code></pre></li>
<li><p>Minor details in the above:</p>

<ul>
<li><p>I wouldn’t generally subclass <code>NSObject</code> unless there was a compelling reason to do so.</p></li>
<li><p>Whether you make it a <code>class</code> or <code>struct</code> is up to you, but we often we would lean towards value types and immutable properties unless otherwise needed.</p></li>
<li><p>I’m abstracting the frequency ranges for bands out of the <code>RadioStation</code> type. This is behavior of radio bands, not of individual radio stations, themselves.</p></li>
<li><p>The radio bands might be better represented as an enumeration rather than an integer that has only two values, either <code>0</code> or <code>1</code>.</p>

<p>In general, if you find yourself inserting comments to explain cryptic values (e.g. where you note that <code>1</code> represents “FM”), that’s a good sign that you should adopt an enumeration, which makes its intent clear. </p></li>
<li><p>Note, I made <code>RadioFrequency</code> to be <code>Decimal</code>, rather than <code>Double</code>. I did that because you really don’t need floating point math, but rather want to accurately represent decimal numbers.</p>

<p>FWIW, <code>Double</code> can introduce some strange behavior. Let’s say that you started at the lower bound of your AM frequencies and bumped it up by <code>0.1</code> ten times:</p>

<pre><code>var value: Double = 520.0
for _ in 0 ..&lt; 10 {
    value += 0.1
}

print(value, value == 521.0) // 521.0000000000002 false
</code></pre>

<p>The result is not 521. But, if you use <code>Decimal</code>, you get the expected behavior:</p>

<pre><code>var value: Decimal = 520.0
for _ in 0 ..&lt; 10 {
    value += 0.1
}

print(value, value == 521.0) // 521 true
</code></pre>

<p>See <a href="https://docs.oracle.com/cd/E19957-01/806-3568/ncg_goldberg.html" rel="noreferrer">What Every Computer Scientist Should Know About Floating-Point Arithmetic</a>.</p></li>
<li><p>I’d make the initializer failable in case the band didn’t match the frequency (or the band couldn’t be inferred from the supplied frequency).</p></li>
<li><p>I would not be inclined to have the <code>RadioStation</code> to have default values. That’s not a concept that makes sense. Sure, if you wanted your radio to default to a particular station, then fine, it would do that. But that’s not <code>RadioStation</code> behavior, but rather behavior of the radio.</p></li>
</ul></li>
<li><p>You said:</p>

<blockquote>
  <p>... imagine if you wanted 8 such objects, this would just get very clunky.</p>
</blockquote>

<p>If you had many, you might use collections. For example:</p>

<pre><code>let stations: [RadioStation]
</code></pre>

<p>Or you might wrap it in a custom type that indicated the functional intent. For example, let’s imagine that your radio had programmable presets, then the model might be:</p>

<pre><code>struct RadioPresets {
    var stations: [RadioStation]
}
</code></pre>

<p>It just depends upon what these various stations are for. But don’t shy away from simpler fundamental object types just because you might need multiple ones. If the concept of a single radio station makes sense (which it does, IMHO), then stick with a simple radio station object, and compose it into more complex objects/models as needed later.</p>

<p>But, as a generally programming principle, we generally prefer simple, cohesive types and compose complex objects from these simple objects (e.g. a collection of 8 radio stations).</p></li>
</ol>
    </div>