<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Separation of concerns</h3>

<p>The <code>start</code> method of an application should be responsible for initializing application-wide basic functionality and trigger the entry point of the application. This means it should deal with Dependency Injection, Application Resource Reservation and similar "global" concerns. Setting up the GUI is not the primary concern of that method.</p>

<p>Instead you'll want it to be something like:</p>

<pre class="lang-java prettyprint-override"><code>@Override
public void start(Stage primaryStage) {
   MainView view = new MainView();
   primaryStage.setScene(view.getScene());
   primaryStage.show();
}
</code></pre>

<p>This allows you to encapsulate the View into it's <strong>own</strong> proper class only responsible for the view.</p>

<h3>Setting up the View</h3>

<p>Your View setup intermingles domain logic (what's an Excercise?) with View logic (How are components laid out?). In addition there's a handful of simplifications to be had there.</p>

<ul>
<li><code>numberOfExercises</code> is a constant, treat it as one.</li>
<li>The <code>HBox</code> containing all the information about a single exercise <em>could</em> be extracted into a separate component that takes an <code>Exercise</code> as constructor argument and correctly deals with setting up description, solution and encapsulates the correctness checking.</li>
<li>Your <code>setOnAction</code> for the button seems rather complex. It could benefit a lot from being extracted into a separate method.</li>
</ul>

<h3>Formatting</h3>

<p>You seem to be following the old school of line-length considerations. Lines in this day and age can (and should) be longer than 80 characters. For one you're using 4 spaces for indentation, and secondly nowadays even the smaller screens are able to support 100-120 characters in width with relative ease.</p>

<p>Forcing the code to adhere to outdated styling regulations makes it hard to read that code.</p>

<h3>ToString is not a user-level representation</h3>

<p>Your code is currently using <code>toString</code> to display a domain object to the user. That's not how this should work. A user representation is usually one that contains less information than the whole object. In general you want to be able to <code>toString</code> an object for logging purposes, incorporating all information available in the object.</p>

<p>Note also that polymorphism makes it nearly trivial to make the code you've written display nonsensical data:</p>

<pre class="lang-java prettyprint-override"><code>public class SpecialExercise extends Exercise {
    public SpecialExercise() {
        super(0, 0, 0, "");
    }
    @Override
    public String toString() {
        // basically Object.toString()`
        return super.super.toString();
    }
}
</code></pre>
    </div>