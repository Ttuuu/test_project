<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I don't think that screen space is so limited that methods can't be separated by a blank line, and separation makes it slightly easier to see scope.</p>

<hr>

<blockquote>
<pre><code>    public delegate void NotifyCBR();
    private NotifyCBR notifyCbr_ = null;
</code></pre>
</blockquote>

<p>Is there any reason not to use <code>System.Action</code>?</p>

<hr>

<blockquote>
<pre><code>    private System.Collections.Generic.List&lt;T&gt; vector_;
</code></pre>
</blockquote>



<blockquote>
<pre><code>      dataSyncObject_ = new System.Object();
</code></pre>
</blockquote>

<p>Why the fully qualified names?</p>

<p>On the basis of coding to the interface, I think <code>vector_</code> should be typed as <code>IList&lt;T&gt;</code>.</p>

<hr>

<blockquote>
<pre><code>    private Object dataSyncObject_ = null;
</code></pre>
</blockquote>

<p>This is initialised to <code>new System.Object()</code> in the only constructor. You might as well inline it. As a matter of style, I believe it's generally preferred to use the keywords for core types:</p>

<pre><code>private object dataSyncObject_ = new object();
</code></pre>

<hr>

<blockquote>
<pre><code>    // Class Instantiation requires a Callback routine
    private NotifyVector() { }
</code></pre>
</blockquote>

<p>So why have the private constructor in the first place? Is it left over from a refactor?</p>

<p>Also, why does the public constructor not check that its argument is non-null?</p>

<hr>

<blockquote>
<pre><code>    // This member fuction invokes the callback routine
    public void Notify()
    {
      if (processing_ == false)
      {
        if (notifyCbr_ != null)
        {
          processing_ = true;
          ar_ = notifyCbr_.BeginInvoke(new AsyncCallback(this.EndNotify), null);
        }
      }
    }
</code></pre>
</blockquote>

<p>I consider it bad style to compare to <code>true</code> or <code>false</code>. These nested <code>if</code>s can be reduced to a single condition:</p>

<pre><code>  if (!processing_ &amp;&amp; notifyCbr_ != null)
</code></pre>

<p><code>processing_</code> may be volatile, but there's still a race condition. If you want to ensure that only one invocation is in progress at a time then you need to use some synchronisation technique: a separate lock, replacing it with a semaphore, ...</p>

<p>Is <code>ar_</code> necessary? As far as I can see, you don't monitor progress. Remember <a href="//en.wikipedia.org/wiki/YAGNI" rel="noreferrer">YAGNI</a>.</p>

<hr>

<blockquote>
<pre><code>    // Function used to implement the Async Notification/Callback
    void EndNotify(IAsyncResult ar)
    {
      // Retrieve the delegate.
      AsyncResult result = (AsyncResult)ar;
      NotifyCBR caller = (NotifyCBR)result.AsyncDelegate;

      // Call EndInvoke to complete/cleanup Async call 
      caller.EndInvoke(ar_);
      processing_ = false;
    }
</code></pre>
</blockquote>

<p>Since you're using VS17 I assume you're also using a recent version of C#. In that case, I'd move <code>EndNotify</code> into <code>Notify</code> to make its scope clear.</p>

<p>Why cast <code>ar</code> to <code>AsyncResult</code>?</p>

<p>With reference to my previous question about whether <code>ar_</code> is necessary, you could replace it here with <code>ar</code>.</p>

<p>Again, the access to <code>processing_</code> needs to be synchronised.</p>

<hr>

<p>The Begin/End style of async has fallen out of favour. On the other hand, in this use case I'm not sure that there's a better way of doing it with <code>async</code>/<code>await</code>. Forcing asynchronous execution of a synchronous method is either longwinded or hacky. E.g. (WARNING: untested code)</p>

<pre><code>    public void Notify()
    {
      lock (processingSyncObject_)
      {
        if (!processing_ &amp;&amp; notifyCbr_ != null)
        {
          processing_ = true;
          Task.Run(async () =&gt;
          {
            await Task.Delay(TimeSpan.FromTicks(1));
            notifyCbr_();
          }).ContinueWith(result =&gt;
          {
            lock (processingSyncObject_)
            {
              processing_ = false;
            }
          });
        }
      }
    }
</code></pre>

<hr>

<blockquote>
<pre><code>    // Threadsafe pop Objects from vector
    public bool PopObjects(ref System.Collections.Generic.List&lt;T&gt; inlist)
    {
      bool retval = false;
      lock (dataSyncObject_)
      {
        if (vector_.Count() &gt; 0)
        {
          inlist = vector_;
          vector_ = new System.Collections.Generic.List&lt;T&gt;();
          retval = true;
        }
      }
      return retval;
    }
  }
</code></pre>
</blockquote>

<p>This looks like an abuse of <code>ref</code>. The in value is unused, so it should be an <code>out</code> parameter.</p>

<p><code>Count()</code> has a special case for lists, but I would still prefer <code>Count</code> for a variable typed as <code>List&lt;&gt;</code> or <code>IList&lt;&gt;</code>.</p>

<p>I find early returns more readable than single returns and flag Booleans.</p>

<hr>

<p>I don't understand what the point of this class is. It has two completely separate functions: the notification and the list don't interact at all.</p>
    </div>