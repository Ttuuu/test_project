<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Review</h2>

<p>Keep in mind I am using an older version of .NET so my semantics can be somehow verbose.</p>

<hr>

<h2>Navigation</h2>

<p>You are lacking a reference back to the parent, which makes bottom-up navigation much harder. A <em>tree</em> that knows its parent allows for much more flexibility in navigation. </p>

<blockquote>
<pre><code>root.children.Add(new Tree()
{
    id = node.id,
    text = node.text,
    children = null   // &lt;- no parent reference ;-(
});
</code></pre>
</blockquote>

<pre><code>public class Tree
{
    public int? Id { get; set; }
    public string Text { get; set; }
    protected List&lt;Tree&gt; _children;
    protected Tree _parent;  // &lt;- added reference to parent :-)
}
</code></pre>

<p>Now, we can use <code>TreeExtensions</code> to nagivate a tree. The most basic tree traversal walkers are available. More could be added if required.</p>

<pre><code>public static class TreeExtensions
{
    public static IEnumerable&lt;Tree&gt; Descendants(this Tree value) {
        // a descendant is the node self and any descendant of the children
        if (value == null) yield break;
        yield return value;
        // depth-first pre-order tree walker
        foreach (var child in value.Children)
        foreach (var descendantOfChild in child.Descendants()) {
            yield return descendantOfChild;
        }
    }

    public static IEnumerable&lt;Tree&gt; Ancestors(this Tree value) {
        // an ancestor is the node self and any ancestor of the parent
        var ancestor = value;
        // post-order tree walker
        while (ancestor != null) {
            yield return ancestor;
            ancestor = ancestor.Parent;
        }
    }
}
</code></pre>

<hr>

<h2>Lexicon</h2>

<p>In computer science, many API's use the terminology below.</p>

<ul>
<li><code>descendant</code>: any child, grandchild, ..</li>
<li><code>descendantOrSelf</code>: any descendant or the specified node itself</li>
<li><code>ancestor</code>: any parent, grandparent, ..</li>
<li><code>ancestorOrSelf</code>: any ancestor or the specified node itself</li>
</ul>

<p>However, I tend to use family tree terminology.</p>

<ul>
<li><code>successor</code>: any child, grandchild, ..</li>
<li><code>descendant</code>: any successor or the specified node itself</li>
<li><code>predecessor</code>: any parent, grandparent, ..</li>
<li><code>ancestor</code>: any predecessor or the specified node itself</li>
</ul>

<hr>

<h2>Data Integrity</h2>

<p>Encapsulating the family members <code>_parent</code>, <code>_children</code> provides us with the capability of preserving the tree's integrity.</p>

<blockquote>
<pre><code>public class Tree
{
    public int? id { get; set; }
    public string text { get; set; }
    public List&lt;Tree&gt; children { get; set; }
}
</code></pre>
</blockquote>

<pre><code>public class Tree
{
    public int? Id { get; set; }
    public string Text { get; set; }
    protected List&lt;Tree&gt; _children;
    protected Tree _parent;

    public Tree Parent { get { return _parent; } }
    public Tree Root { get { return _parent == null ? this : _parent.Root; } }

    public IEnumerable&lt;Tree&gt; Children {
        get { return _children == null 
            ? Enumerable.Empty&lt;Tree&gt;() : _children.ToArray(); 
        }
    }
}
</code></pre>

<p>We could then have <code>Add</code> and <code>Remove</code> support with sufficient validation support to maintain integrity.</p>

<pre><code>public void Add(Tree child) {
    if (child == null)
        throw new ArgumentNullException();
    if (child._parent != null)
        throw new InvalidOperationException(
            "A tree node must be removed from its parent before adding as child.");
    if (this.Ancestors().Contains(child))
        throw new InvalidOperationException("A tree cannot be a cyclic graph.");
    if (_children == null) {
        _children = new List&lt;Tree&gt;();
    }
     Debug.Assert(!_children.Contains(child), "At this point, the node is definately not a child");
     child._parent = this;
    _children.Add(child);
}

public bool Remove(Tree child) {
    if (child == null)
        throw new ArgumentNullException();
    if (child._parent != this)
        return false;
     Debug.Assert(_children.Contains(child), "At this point, the node is definately a child");
     child._parent = null;
    _children.Remove(child);
    if (!_children.Any())
        _children = null;
    return true;
}
</code></pre>

<hr>

<h2>Builder</h2>

<p>I am not convinced an extension method is the way to go for this method. I would rather make a <code>Builder</code> class for it, but that's probably a matter of taste.</p>

<blockquote>
<pre><code>public static Tree BuildTree(this List&lt;TreeNode&gt; nodes)
{
    // method impl ..
}
</code></pre>
</blockquote>

<p>Determining the root node is not optimized. In one of your examples, there is a root in the input nodes. In another example, there is no root. If the former case, we could use that root as tree. In the latter, we could create the null-root.</p>

<blockquote>
<pre><code>// Create a NULL-root tree
Tree root = new Tree();
</code></pre>
</blockquote>

<pre><code>private static Tree FindTreeRoot(IList&lt;TreeNode&gt; nodes) {
    var rootNodes = nodes.Where(node =&gt; node.parent == null);
    if (rootNodes.Count() != 1) return new Tree();
    var rootNode = rootNodes.Single();
    nodes.Remove(rootNode);
    return Map(rootNode);
}

private static Tree Map(TreeNode node) {
    return new Tree {
        Id = node.id,
        Text = node.text,
    };
}
</code></pre>

<p>Building the tree could then become a recursive action. I am using a list, in order to remove the visited nodes from the ones that still need to be visited.</p>

<pre><code>public static Tree BuildTree(IEnumerable&lt;TreeNode&gt; nodes) {
    if (nodes == null) return new Tree();
    var nodeList = nodes.ToList();
    var tree = FindTreeRoot(nodeList);
    BuildTree(tree, nodeList);
    return tree;
}

private static void BuildTree(Tree tree, IList&lt;TreeNode&gt; descendants) {
    // Note: could be optimized further for performance
    var children = descendants.Where(node =&gt; node.parent == tree.Id).ToArray();
    foreach (var child in children) {
        var branch = Map(child);
        tree.Add(branch);
        descendants.Remove(child);
    }
    foreach (var branch in tree.Children) {
        BuildTree(branch, descendants);
    }
}
</code></pre>

<hr>

<h2>Proposed Solution</h2>

<p>This is an appendix of the classes used as an alternative/edited flow, with an example included.</p>

<pre><code>public class Program
{
    public static void Main()
    {
        //0       0       NULL
        //1       1       0
        //11      11      1
        //2       2       0
        //21      21      2
        //211     211     21
        //22      22      2
        //3       3       0
        var nodes = new List&lt;TreeNode&gt; { 
            new TreeNode { id =   0, text =   "0", parent = null },
            new TreeNode { id =   1, text =   "1", parent =    0 },
            new TreeNode { id =  11, text =  "11", parent =    1 },
            new TreeNode { id =   2, text =   "2", parent =    0 },
            new TreeNode { id =  21, text =  "21", parent =    2 },
            new TreeNode { id = 211, text = "211", parent =   21 },
            new TreeNode { id =  22, text =  "22", parent =    2 },
            new TreeNode { id =   3, text =   "3", parent =    0 }
        };

        var tree = TreeBuilder.BuildTree(nodes);

        Console.ReadKey();
    }
}

public class TreeNode
{
    public int id { get; set; }
    public string text { get; set; }
    public int? parent { get; set; }
}

public static class TreeBuilder
{
    public static Tree BuildTree(IEnumerable&lt;TreeNode&gt; nodes) {
        if (nodes == null) return new Tree();
        var nodeList = nodes.ToList();
        var tree = FindTreeRoot(nodeList);
        BuildTree(tree, nodeList);
        return tree;
    }

    private static void BuildTree(Tree tree, IList&lt;TreeNode&gt; descendants) {
        var children = descendants.Where(node =&gt; node.parent == tree.Id).ToArray();
        foreach (var child in children) {
            var branch = Map(child);
            tree.Add(branch);
            descendants.Remove(child);
        }
        foreach (var branch in tree.Children) {
            BuildTree(branch, descendants);
        }
    }

    private static Tree FindTreeRoot(IList&lt;TreeNode&gt; nodes) {
        var rootNodes = nodes.Where(node =&gt; node.parent == null);
        if (rootNodes.Count() != 1) return new Tree();
        var rootNode = rootNodes.Single();
        nodes.Remove(rootNode);
        return Map(rootNode);
    }

    private static Tree Map(TreeNode node) {
        return new Tree {
            Id = node.id,
            Text = node.text,
        };
    }
}

public static class TreeExtensions
{
    public static IEnumerable&lt;Tree&gt; Descendants(this Tree value) {
        // a descendant is the node self and any descendant of the children
        if (value == null) yield break;
        yield return value;
        // depth-first pre-order tree walker
        foreach (var child in value.Children)
        foreach (var descendantOfChild in child.Descendants()) {
            yield return descendantOfChild;
        }
    }

    public static IEnumerable&lt;Tree&gt; Ancestors(this Tree value) {
        // an ancestor is the node self and any ancestor of the parent
        var ancestor = value;
        // post-order tree walker
        while (ancestor != null) {
            yield return ancestor;
            ancestor = ancestor.Parent;
        }
    }
}

public class Tree
{
    public int? Id { get; set; }
    public string Text { get; set; }
    protected List&lt;Tree&gt; _children;
    protected Tree _parent;

    public Tree() {
        Text = string.Empty;
    }

    public Tree Parent { get { return _parent; } }
    public Tree Root { get { return _parent == null ? this : _parent.Root; } }
    public int Depth { get { return this.Ancestors().Count() - 1; } }

    public IEnumerable&lt;Tree&gt; Children {
        get { return _children == null ? Enumerable.Empty&lt;Tree&gt;() : _children.ToArray(); }
    }

    public override string ToString() {
        return Text;
    }

    public void Add(Tree child) {
        if (child == null)
            throw new ArgumentNullException();
        if (child._parent != null)
            throw new InvalidOperationException("A tree node must be removed from its parent before adding as child.");
        if (this.Ancestors().Contains(child))
            throw new InvalidOperationException("A tree cannot be a cyclic graph.");
        if (_children == null) {
            _children = new List&lt;Tree&gt;();
        }
         Debug.Assert(!_children.Contains(child), "At this point, the node is definately not a child");
         child._parent = this;
        _children.Add(child);
    }

    public bool Remove(Tree child) {
        if (child == null)
            throw new ArgumentNullException();
        if (child._parent != this)
            return false;
         Debug.Assert(_children.Contains(child), "At this point, the node is definately a child");
         child._parent = null;
        _children.Remove(child);
        if (!_children.Any())
            _children = null;
        return true;
    }
</code></pre>
    </div>