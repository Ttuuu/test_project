<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You don't really need a design pattern for determinants, just a better algorithm. Generally one of the easiest (and fastest) ways of calculating a matrix determinant is by using what is known as <a href="http://en.wikipedia.org/wiki/LU_decomposition" rel="nofollow">LU-Decomposition</a>. This factors a matrix into two matrices, a lower triangular and an upper triangular matrix. From these, the determinant can simply be calculated as the product of diagonal elements.</p>

<p>Note that you have to be careful when calculating determinants of large matrices; for a 100x100 matrix, it can easily overflow the maximum size of a <code>float</code> (or <code>double</code>). For this reason it's often better to calculate a log-determinant.</p>

<p>On to the actual code you've presented:</p>

<p><code>data</code> should be passed by <code>const&amp;</code> since it isn't (and shouldn't be) modified:</p>

<pre><code>float determinant(const std::vector&lt;Vector&gt;&amp; data)
</code></pre>

<p>Using a template int parameter to choose between determinant sizes is really odd, and is potentially easily misused. What if I use <code>Determinant::determinant&lt;2&gt;(...)</code> on a 3x3 matrix? It'll give me the wrong answer. You should generally try to make your code easy to use and hard to misuse. In this case, that means calculating the determinant size based on the row/column size of the passed parameter. Better yet would be creating a <code>matrix</code> class to encapsulate all of this information.</p>

<p>These days, it generally doesn't make a lot of sense to use <code>float</code> over <code>double</code> unless you really need the speed (and even then, it is often no faster, and can sometimes even be slower on modern hardware). Stick to using <code>double</code> by default.</p>
    </div>