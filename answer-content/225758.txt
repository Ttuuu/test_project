<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You could reduce your script to this: (untested)</p>

<pre><code>add_filter('woocommerce_get_price_html', 'change_product_price_html');
function change_product_price_html($product, $price) {
    $categories = ["17"];
    if (!is_shop() || !array_intersect_key(array_flip($product-&gt;get_category_ids()), array_flip($categories))) {
        return $price;
    }
    return "&lt;span class='woocommerce-Price-amount amount'&gt;Starting at &lt;/span&gt;{$price}";
}
</code></pre>

<ul>
<li><p>pass the <code>$product</code> into the custom function's scope as an argument to avoid the global declaration.</p></li>
<li><p>merge the un-prefixed return conditions into a single expression.</p></li>
<li><p>while only a benchmark executed on your system will tell the real truth, I am employing a key-based comparison between two arrays.  The downside is that it may do more work than it needs to (by finding multiple matches). The good news is, it is not going to perform multiple full array scans like a looped <code>in_array()</code> technique might.  I'm not going to be too pushy about how to best compare the two category arrays -- I just wanted to show an alternative.</p></li>
</ul>

<p>Alternatively, this will be an easier array-to-array comparison to read:</p>

<pre><code>if (!is_shop() || !array_intersect($product-&gt;get_category_ids(), $categories)) {
    return $price;
}
</code></pre>

<p>I assume you were calling your posted function like <code>change_product_price_html($price);</code>.</p>

<p>To add the <code>$product</code> variable as the first expected argument, call my custom function like this:</p>

<pre><code>change_product_price_html($product, $price);
</code></pre>
    </div>