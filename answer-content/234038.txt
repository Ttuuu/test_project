<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Testing your code</h2>

<p>To make your code testable, you should allow the code that uses this <code>Sack</code> to supply a custom random number generator.</p>

<p>In your unit test for the <code>Sack</code> class, you should create a custom <code>TestingRandom</code> class that derives from <code>Random</code> and overrides the <code>Next(int, int)</code> method. In your TestingRandom class you should ensure that the amount of requested randomness is exactly what you expect.</p>

<p>Given a set of 5 things, when you take them all out of the <code>Sack</code>, your random number generator must have generated randomness <code>5 * 4 * 3 * 2 * 1</code>. Not more, not less. This ensures that the distribution of objects returned by the <code>Sack</code> <em>can</em> be fair. It doesn't guarantee that, but it detects mistakes quickly.</p>

<h2>Performance</h2>

<p>Do you use this class to manage millions of objects? Because if you do, the <code>RemoveAt</code> call will make it very slow as that method needs to copy half of the array on average.</p>

<p>To improve performance, you can change the code so that it always removes the element at the end:</p>

<pre><code>var index = RandomIndex();
var obj = objects[index];
objects[index] = objects[objects.Count - 1];
objects.RemoveAt(objects.Count - 1);
return obj;
</code></pre>
    </div>