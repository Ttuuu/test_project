<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First I thought, nice cache, nothing can be added to it but then I stumbled over this <code>Get()</code> method which should be a <code>GetOrAdd()</code> method instead.</p>

<blockquote>
<pre><code>public object Get&lt;T&gt;(CacheKey key, Func&lt;T&gt; func)
{
    using (lockManager.EnterRead())
    {
        object existingValue;
        if (internalCache.TryGetValue(key, out existingValue))
            return existingValue;
    }

    using (lockManager.EnterWrite())
    {
        object existingValue;
        if (internalCache.TryGetValue(key, out existingValue))
            return existingValue;

        var newValue = func();
        internalCache.Add(key, newValue);
        return newValue;
    }
}
</code></pre>
</blockquote>

<p>Now it makes sense to first <code>EnterRead()</code> to check if the <code>key</code> is found. But basically you can just remove the first part and handle the check in the <code>EnterWrite()</code> lock. This would make the method more dry like so  </p>

<pre><code>public object GetOrAdd&lt;T&gt;(CacheKey key, Func&lt;T&gt; func)
{

    using (lockManager.EnterWrite())
    {
        object existingValue;
        if (internalCache.TryGetValue(key, out existingValue))
        {
            return existingValue;
        }

        var newValue = func();
        internalCache.Add(key, newValue);
        return newValue;
    }
}  
</code></pre>

<p>and now my favourite place to start the timer is found. It doesn't make sense to start the timer if nothing is in the cache, so I would start the timer just after <code>internalCache.Add(key, newValue);</code>.  </p>

<p><strong>Edit:</strong></p>

<p>Based on the <a href="https://codereview.stackexchange.com/questions/93937/memory-cache-implementation/93957?noredirect=1#comment171021_93957">comment</a> from <a href="https://codereview.stackexchange.com/users/22816/robh">RobH</a>  </p>

<blockquote>
  <p>Your first recommendation would kill throughput. ReaderWriter locks can have multiple read locks active but only one write lock.  </p>
</blockquote>

<p>if performance and throughput matters much, you shouldn't use this suggestion but you should at least name the method <code>GetOrAdd()</code>.  </p>

<p>If it is possible to change the <code>LockManager</code> to use a <code>UpgradeableReadLock</code> then the performance wise <code>EnterRead()</code> could be removed.  </p>

<p>See <a href="https://stackoverflow.com/questions/2494104/readerwriterlockslim-question">https://stackoverflow.com/questions/2494104/readerwriterlockslim-question</a></p>

<hr>

<p>What I would like to see is a <code>Count</code> property of the <code>IInternalCache</code> interface, so you could check this property in the constructor and start the timer if <code>Count &gt; 0</code>.   </p>

<p>Starting the timer which has an intervall of <code>5000 ms</code>, which is used in the public constructor, shouldn't be a problem if done in the constructor.   </p>

<p>Speaking about the constructor, I would add some vertical spaces like so  </p>

<pre><code>internal Cache(IInternalCache iternalCache, ITimer expirationTimer)
{
    if (iternalCache == null) throw new ArgumentNullException("iternalCache");
    if (expirationTimer == null) throw new ArgumentNullException("expirationTimer");

    this.internalCache = iternalCache;

    this.expirationTimer = expirationTimer;
    this.expirationTimer.Elapsed += ExpirationTimerElapsed;
    this.expirationTimer.Start();
}  
</code></pre>

<p>this looks more structured and it is easier to se what belongs together.  </p>

<hr>

<p>I would like to encourage you to always use braces <code>{}</code> for single statement <code>if</code> clauses to make your code less error prone.  </p>

<hr>
    </div>