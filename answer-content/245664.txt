<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>What would already improve this would be to use constants instead of numbers, like this:</p>
<pre class="lang-java prettyprint-override"><code>            int c = System.in.read();
            if (c == VK_ESC) {

                switch (System.in.read()) {
                case VK_O:
                    switch (System.in.read()) {
                    case VK_P:
                        return VK_F1;
</code></pre>
<p>That is, if the <code>VK_*</code> constants contain those, otherwise roll your own.</p>
<hr>
<p>Another solution would be to use a class to represent each key sequence and test whether the pressed keys match any of that. Something like this:</p>
<pre class="lang-java prettyprint-override"><code>public class KeySequence {
    protected int key = 0;
    protected int[] sequence = null;
    
    public KeySequence(int key, int... sequence) {
        super();
        
        // TODO: Validate key and sequence
        
        this.key = key;
        this.sequence = sequence;
    }
    
    public int getKey() {
        return key;
    }
    
    public int[] getSequence() {
        return sequence;
    }
    
    public boolean matches(int[] keys, int keyCount) {
        if (keyCount &lt; sequence.length) {
            // Can't match, too few keys.
            return false;
        }
        
        for (int index = 0; index &lt; sequence.length; index++) {
            if (sequence[index] != keys[index]) {
                return false;
            }
        }
        
        // keys started with sequence, so it matches.
        return true;
    }
}
</code></pre>
<p>With this your comment at the start of the function becomes logic:</p>
<pre class="lang-java prettyprint-override"><code>List&lt;KeySequence&gt; keySequences = new ArrayList();
keySequences.add(new KeySequence(VK_F1, VK_ESC, VK_O, VK_P));
keySequences.add(new KeySequence(VK_F2, VK_ESC, VK_O, VK_Q));
// ...
</code></pre>
<p>And then, you just gather keystrokes from the terminal and test whether or not a <code>KeySequence</code> matches:</p>
<pre class="lang-java prettyprint-override"><code>int[] keyBuffer = new int[16];
int keyCount = 0;

while ((keyBuffer[keyCount++] = System.in.read()) &gt;= 0) {
    for (KeySequence keySequence : keySequences) {
        if (keySequence.matches(keyBuffer, keyCount)) {
            return keySequence.getKey();
        }
    }
    
    if (keyCount &gt;= keyBuffer.length) {
        // TODO Handle that we've read too many keys.
    }
    
    if (keyCount &gt;= MAX_KEYS_IN_SEQUENCE) {
        // TODO Handle that we can't find anything.
    }
}
</code></pre>
<p>Error handling needs to be extended.</p>
    </div>