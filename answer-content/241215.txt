<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The code's pretty straightforward, but it could still be simplified a bit:</p>

<ol>
<li><p>There's no reason to have multiple levels of <code>while</code> loop; you already run your <code>write()</code> function in an inner loop until it's time to exit, so the outer loop only ever gets executed once.</p></li>
<li><p>The code to append to the file is duplicated.</p></li>
<li><p>The file deletion behavior is very strange and seems like a bug -- if the file exists, you delete it, but you do that after every line, making it impossible to write a multi-line file (but only in the case where the file existed when you started the editor).  Seems like you probably meant to only delete it once but forgot to update your <code>files</code> list?</p></li>
<li><p>The <code>write()</code> function doesn't necessarily always write something; sometimes it exits (which is generally considered bad form since it makes reuse and testing difficult).  It also has the extra responsibility of deleting the existing file, which is why that deletion is maybe happening more often than you meant it to.  Separating the setup from the core editing loop would make this much easier to reason about.</p></li>
<li><p><code>cprint</code> doesn't return a value, so assigning it to <code>title</code> and <code>controls</code> (which you don't use anyway) is confusing.</p></li>
<li><p>When an <code>if</code> block breaks the control flow (e.g. by <code>exit()</code> or <code>return</code> or <code>break</code>) it's not necessary to have everything else under an <code>else</code>.  In some cases the code may be more clear with a redundant <code>else</code> (e.g. when the two branches are similar in length and/or when you want to make it more obvious that they're mutually exclusive), but when the bulk of your code is indented unnecessarily it tends to make it harder to follow rather than easier.</p></li>
<li><p>It's generally better to use file handles as context managers (<code>with open ...</code>).  It makes it impossible to forget to close the file, and it makes it very obvious what you're doing while the file is open.</p></li>
<li><p>This is more of a note on the UX than the code, but I suggest (A) telling the user when you're deleting their file (and only doing it on startup rather than after every autosave) and (B) not having so many blank/repeated lines in the interface (it makes it harder to see what you've already entered).</p></li>
</ol>

<p>Below is the result of applying the above notes -- now there are two functions (<code>init</code> and <code>run</code>), with one in charge of everything that happens up front, and the other in charge of everything that happens on each subsequent input.</p>

<pre><code>import os
from termcolor import cprint


def init() -&gt; str:
    """
    Start the editor by prompting for a filename and printing
    usage information.  If the file already exists, remove it.
    Returns the filename.
    """
    filename = input("File name: ")
    if filename in os.listdir():
        print("Deleting existing file to give you a blank slate.")
        os.remove(filename)
    cprint("Ganesha Editor v1.0", "green")
    cprint("Type $exit to exit text editor. It autosaves.", "blue")
    print("Compose Something Below:")
    return filename


def run(filename: str) -&gt; bool:
    """
    Prompts for input and writes it to the file.  
    Returns True as long as it's still running, 
    returns False when it's time to exit.
    """
    text = input()
    if text == "$exit":
        return False
    with open(filename, "a") as autosave:
        autosave.write(text)
        autosave.write("\n")
    return True


if __name__ == "__main__":
    filename = init()
    while run(filename):
        pass
</code></pre>
    </div>