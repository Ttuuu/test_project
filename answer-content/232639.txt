<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Unfortunately there are several problems with your code. It only reason it works is because you are using <code>parseInt</code> which (as @wOxxOm shows) fulfills the original task requirements and thus ignores your broken attempts at cleaning the string.</p>

<h1><code>!char == " "</code></h1>

<p>This expression always returns <code>true</code>. Like in most programming languages negation (<code>!</code>) have a higher precedence than the comparison <code>==</code>, so <code>!char</code> is resolved to <code>false</code> (unless <code>char</code> were an empty string, which in this case it never is) and <code>false == " "</code> resolves to <code>true</code> (to be honest I'm not sure why, I'd have to look it up. JavaScript's rules for non-strict comparison (<code>==</code>) are quite complex.) </p>

<p>So it should be <code>char != " "</code> , or even better <code>char !== " "</code>. Always use strict comparison, unless you have a good reason not to.</p>

<h1><code>char.toLowerCase() === char.toUpperCase()</code></h1>

<p>This is a strange attempt to identify digits (and <code>+</code>/<code>-</code>). There are countless other characters that are not filtered by this.</p>

<h1>32-bit signed integer range</h1>

<p>You are missing the point of this rule. When the system is assumed not to be able to store integers outside the range, then that means a variable can't hold such a large/low number, so a comparison such as <code>output &gt; intMax</code> can never be true, since <code>output</code> can't physically contain a number larger than <code>intMax</code>.</p>

<h1>Don't reuse variables</h1>

<p>In <code>output = parseInt(output)</code> you change the type and the semantics of the variable <code>output</code>. This is confusing for the reader. And the name <code>output</code> for the original use of collecting the validated string wrong anyway.</p>

<h1>Don't leave out semicolons</h1>

<p>JavaScript's automatic semicolon insertion is nearly as complex as its non-strict comparison rules. By leaving out the semicolons you make the code more difficult to read because the reader then has an additional thing they need to consider.</p>

<h1>Finally</h1>

<p>The big problem here is you using <code>parseInt</code>. For one, as mentioned it's hiding the bugs in the code, and more importantly, you are missing the whole point of this exercise, which is to understand how string to number conversion actually works. </p>
    </div>