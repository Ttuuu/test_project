<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The representation (as a parallel pair of vectors) isn't as good as the alternative (a single vector of pairs), because:</p>

<ol>
<li>any time the vectors have to grow, there's two separate allocations rather than just one, and</li>
<li>whenever they are used, the data may be in different regions of memory (the code has poorer <em>spatial locality</em>).</li>
</ol>

<p>Consider instead writing</p>

<pre><code>using value_type = std::pair&lt;T, U&gt;;
std::vector&lt;value_type&gt; entries;
</code></pre>

<p>This will change the interface a little - in particular, <code>begin()</code> and <code>end()</code> will now give iterators that access these pairs.  That's more consistent with <code>std::map</code> interface, so I recommend that.</p>

<hr>

<p>We can reduce duplication a little: in the initializer-list constructor, we can simply call <code>add()</code> for each element rather than re-writing its body:</p>

<pre><code>template &lt;typename T, typename U&gt;
Dictionary&lt;T,U&gt;::Dictionary (std::initializer_list&lt;std::pair&lt;T,U&gt;&gt; store)
{
    for (std::pair&lt;T,U&gt; object : store) {
        add(object.first, object.second);
    }
}
</code></pre>

<p>On the other hand, if we've changed our representation as above, we simply have</p>

<pre><code>template &lt;typename T, typename U&gt;
Dictionary&lt;T,U&gt;::Dictionary (std::initializer_list&lt;std::pair&lt;T,U&gt;&gt; store)
{
    for (std::pair&lt;T,U&gt; object : store) {
        entries.push_back(object);
    }
}
</code></pre>

<hr>

<p>The indexing operator is surprising.  If <code>key</code> doesn't exist in the dictionary, then we have undefined behaviour (accessing <code>values</code> out of range).  That's a valid choice, but worthy of a comment (particularly as it diverges from the Standard Library interface).  Since it doesn't create as necessary, and only ever returns a <em>copy</em> of the value (rather than a reference) it probably ought to be declared <code>const</code>.</p>

<hr>

<p>We should probably check whether <code>key</code> already exists in <code>add()</code>.  We can then either ignore it, or update the existing value.  What we have at the moment is the worst possible choice - we add data that can never be used, which only serves to slow future operations.</p>

<hr>

<p>Some other useful accessors are missing - constant and/or reverse iterators spring to mind as an obvious example, as do methods of removing values.  A <code>swap()</code> member would also be very useful.</p>

<hr>

<p>The <code>has</code> function can be simplified a bit with the use of a standard algorithm: <code>std::any_of()</code> can replace the loop.</p>

<hr>

<h1>Algorithmic complexity</h1>

<p>Our <code>operator[]</code> uses linear search with <code>std::find()</code>.  Whilst this works, it will get slower in proportion to the number of elements contained - in "big O" notation, we say that it <em>scales as O(n)</em>.  Once we have the interface as we we want, we'll then want to look at changing the data structure to improve look-up times (and we might need to trade against insertion speed).  The good news is that storing items as pairs will work well with whatever storage we choose, and it will be much easier to change the implementation than with separate storage of keys and values.</p>

<p>It may well be worth moving to pair-based storage, and implementing the other review items, and then returning for a performance review of the new code.</p>
    </div>