<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'm glad to see you incorporated much of the feedback from the answers to your previous post. I see you added the colors into CSS, but dynamically. I believe those styles for the colors could exist with the static CSS. Actually the whole <code>addStyles()</code> function could likely be eliminated using conditional classes (e.g. if checkbox1 is checked, then add an extra class name to the element with id <code>outputArea</code> and add those styles when the class is applied - e.g.</p>
<pre><code>#outputArea.showLineNums pre{
    counter-reset: line;
}
#outputArea.showLineNums code{
    counter-increment: line;
}
#outputArea.showLineNums code::before {
    content: counter(line); 
    display: inline-block; 
    width: 2.5em; 
    border-right: 2px solid gray; 
    padding: 0.2em;
    margin-right: 0.5em; 
    color: gray;
}
</code></pre>
<hr>
<p>I see there is an <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions" rel="nofollow noreferrer">arrow function</a> in <code>highlightMultiLineComments()</code> as well as the <code>let</code> keyword. Those are  features of <a href="/questions/tagged/ecmascript-6" class="post-tag" title="show questions tagged 'ecmascript-6'" rel="tag">ecmascript-6</a> (A.K.A. ES-6) and there are some others that could be used - e.g. <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of" rel="nofollow noreferrer"><code>for...of</code> loops</a> could really simplify the syntax of <code>for</code> loops (though performance may suffer because they use iterators). Many modern JS programmers avoid using the <code>var</code> keyword unless a global variable is needed (which many programmers hold is bad practice anyway). A common recommendation is to use <code>const</code> as a default and then use <code>let</code> when you determine a value can be re-assigned (e.g. loop variables). For more information about ES-6 see <a href="https://developer.mozilla.org/en-US/docs/Archive/Web/JavaScript/New_in_JavaScript/ECMAScript_2015_support_in_Mozilla#Standard_library" rel="nofollow noreferrer">the MDN documentation</a> (including <a href="https://kangax.github.io/compat-table/es6/" rel="nofollow noreferrer">browser support</a>) as well as <a href="http://es6-features.org/" rel="nofollow noreferrer">http://es6-features.org/</a></p>
<p>The last two lines of that arrow function assigns and returns a single-use variable (i.e. <code>result</code>). Some may argue that the extra variable allocates extra memory though for a small case like this it is likely not going to make much of a difference. This might be something a linter would catch. If you haven't already done so, you may want to start using a linter - e.g. <a href="https://eslint.org/" rel="nofollow noreferrer">esLint</a>, <a href="https://jslint.com/" rel="nofollow noreferrer">jsLint</a>.</p>
<hr>
<p>The first line adds an event listener to the element with id <code>highlightButton</code> using <code>addEventListener()</code>. Then after that the <code>onkeydown</code> property is set on the element with id <code>Input</code>. The <code>keydown</code> event listener could be set using <code>addEventListener()</code>, which would allow multiple listeners to be added if necessary.</p>
<hr>
<p>Values in variables like <code>keywordsColor</code> don't appear to change so those could be put in constants - and a common convention is to use <code>ALL_CAPS</code> so anyone reading the code can tell the value doesn't change, and declare them at the top of your code (or in a separate file/<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules" rel="nofollow noreferrer">module</a>):</p>
<pre><code>const KEYWORDS_COLOR = '#0033cc';
const CONTROL_KEYWORDS_COLOR = '#009933';

const KEYWORDS = Object.freeze(['abstract', 'assert', ...]);
</code></pre>
<p>Then if you need to modify those values they can be found easily. If you want to ensure that a constant can't be modified (e.g. an array can't be modified via <code>.push()</code>)  the value can be wrapped in [<code>Object.freeze()</code>].</p>
<hr>
<p>The name of the checkboxes could be improved - e.g. instead of <code>checkbox1</code> and <code>checkbox2</code>, names like <code>includeLineNums</code> and <code>includeBGcolor</code> would be more descriptive and not much longer.</p>
<hr>
<p>The CSS has these padding rules under <code>header a</code>:</p>
<blockquote>
<pre><code>padding: 4px;
padding-left: 10px;
padding-right: 10px;
</code></pre>
</blockquote>
<p>Those can be combined into a single rule:</p>
<pre><code>padding: 4px 10px
</code></pre>
<p>The same applies to the ruleset for <code>.formText</code>:</p>
<blockquote>
<pre><code>padding-top: 2px;
padding-bottom: 2px;
</code></pre>
</blockquote>
<p>Can be combined to:</p>
<pre><code>padding: 2px 0;
</code></pre>
    </div>