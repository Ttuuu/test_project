<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>FetchMonthNumber</h2>

<p><code>Get</code> is a standard across most programming languages, where as, <code>Fetch</code> is a standard when playing with a dog.  But neither <code>GetMonthNumber</code> or <code>FetchMonthNumber</code> provide any context to the return value of the function. </p>

<blockquote>
<pre><code> FetchMonthNumber = ""
</code></pre>
</blockquote>

<p>The code above is unnecessary.  <code>FetchMonthNumber</code> is typed as a string and has a default value of <code>""</code>.</p>

<blockquote>
<pre><code>If monthName = January Then
    FetchMonthNumber = "01"
    Exit Function
End If
If monthName = February Then
    FetchMonthNumber = "02"
    Exit Function
End If
If monthName = March Then
    FetchMonthNumber = "03"
    Exit Function
End If
</code></pre>
</blockquote>

<p>Multiple <code>If</code> statements, in which, only one statement will trigger should be combined.</p>

<pre><code>If MonthName = January Then
    FetchMonthNumber = "01"
ElseIf MonthName = February Then
    FetchMonthNumber = "02"
ElseIf MonthName = March Then
    FetchMonthNumber = "03"
</code></pre>

<p>Consider using a <code>Select Case</code> when every case is triggered based on different variations of a value</p>

<pre><code>Select Case MonthName
Case January
    FetchMonthNumber = "01"
Case February
    FetchMonthNumber = "02"
    Exit Function
Case March
    FetchMonthNumber = "03"
</code></pre>

<p>Returning the Month number as long and using <code>Format(MonthNumber,"##")</code> will make it easier to change the formats.</p>

<h2>SaveAsPdf()</h2>

<blockquote>
<pre><code>Set presetSheet = ActiveWorkbook.Sheets(1)
</code></pre>
</blockquote>

<p><code>ActiveWorkbook</code> is best used in special situations when working with multiple workbooks.  Using <code>ThisWorkbook</code> ensures that the code will always reference the workbook that contains the code.</p>

<p><code>Sheets(1)</code> assumes that the project setup will never change.  Referring to worksheets by their code names will make the code more robust.  Renaming the worksheets will make the code easier to read.</p>

<blockquote>
<pre><code>Dim shell As Object
Set shell = CreateObject("WScript.Shell")

fileName = shell.SpecialFolders("MyDocuments") + "\" + shortName + ".pdf"
</code></pre>
</blockquote>

<p>Not a best practice but I wouldn't both with the <code>shell</code> helper variable.  You are not reusing it or testing where or not it is instantiated.</p>

<pre><code>fileName = CreateObject("WScript.Shell").SpecialFolders("MyDocuments") + "\" + shortName + ".pdf"
</code></pre>

<p>Alternately, you could use <code>Environ</code> to return the user directory.</p>

<pre><code>fileName = Environ("USERPROFILE") &amp; "Documents\" + shortName + ".pdf"
</code></pre>

<p>But why force users to save their files in a specific directory.  Consider setting the <code>InitialFilename</code> of the <code>Application.FileDialog(msoFileDialogSaveAs)</code> or <code>Application.GetSaveAsFilename()</code> and allowing the user to specify the file location.  </p>

<p>Better yet, I would use the <code>Application.FileDialog(msoFileDialogFolderPicker)</code> to save the file location on the presets worksheet.  I would then create a root directory ( e.g. Company PDFs) and subdirectories to file the pdfs by year.</p>

<p>Considering that the files are to be sent by emails and that they are basically time-sensitive signed documents, it may just be best to dump them in the <code>Environ("Temp")</code> where they will be cleaned up during system maintenance. </p>

<h2>ComposeFileName</h2>

<blockquote>
<pre><code>Dim year As String
</code></pre>
</blockquote>

<p>The code above changes all instances of <code>Year</code> to <code>year</code>.  Because, for some odd reason, the VBA will rename variables, subs or functions that share a name to match the case of the last declaration of that name.   I prefer to use <code>Of</code> to suffix all my date variables (e.g. YearOf, MonthOf, WeekOf, DateOf ...)/</p>

<p>Passing the worksheet as a parameter to <code>ComposeFileName</code> will make the code more versatile.  For instance, you decided to add a listbox to the preset sheet send multiple emails based on its selections.  Currently you would have to rewrite this subroutine but passing in the worksheet opens up a lot of possibilities.</p>

<blockquote>
<pre><code>If sheetName = PreSetting Then
    ComposeFileName = Year + "_" + sheetName + "_" + shortName
    Exit Function
End If
If sheetName = Expenses Then
    ComposeFileName = Mid(Year, 3) + "-" + FetchMonthNumber(ActiveSheet.Cells(4, 3).Value) + "_" + ExpensesName + "_" + shortName
    Exit Function
End If
If sheetName = VacationApplication Then
    ComposeFileName = Year + "_" + VacationApplicationName + "_(" + Format(Date) + ")_" + shortName
    Exit Function
End If
</code></pre>
</blockquote>

<p>Here is another instance where using a <code>Select Case</code> statement is easier to read and modify than multiple <code>If</code> statements.  </p>

<p>Remove the <code>Exit Function</code> clauses.  Not only do they clutter up the screen but they make it harder to modify the code.</p>

<blockquote>
<pre><code>ComposeFileName = Year + "_" + VacationApplicationName + "_(" + Format(Date) + ")_" + shortName
</code></pre>
</blockquote>

<p>The default format for <code>Format(Date)</code> is <code>MM/DD/YYYY</code>.  Forward slashes(<code>/</code>) are not permitted in filenames.  Here are some valid replacement options: <code>MMDDYYYY</code>, <code>MM.DD.YYYY</code> or <code>MM-DD-YYYY</code>.</p>

<p>As IvenBach mentioned, using named ranges and worksheet codenames will make your code easier to read and modify. </p>

<p>Use <code>+</code> to concatenate strings can lead to type mismatch errors and unexpected results.  Use <code>&amp;</code> instead.</p>

<p><a href="https://i.stack.imgur.com/QBRwo.png" rel="noreferrer"><img src="https://i.stack.imgur.com/QBRwo.png" alt="enter image description here"></a></p>

<h2>Store Dates as Numbers</h2>

<p>I'm not sure of the project setup but is in generally better to store dates as numbers and format their values as needed.  Consider that the preset tab has a cell for the Year and one for the Month name.  It may make more sense to use have the date in one cell and have to other cell reference the first.  The number format for the Year would be "YYYY" and for the Month would be "[$-de-DE] MMMM".<br>
Prefixing the number format with <code>[$-de-DE]</code> tells Excel to display the value in German.  The codes on  <a href="http://www.codedigest.com/CodeDigest/207-Get-All-Language-Country-Code-List-for-all-Culture-in-C---ASP-Net.aspx" rel="noreferrer">this page: Get All Language-Country Code List for all Culture in C#, ASP.Net</a> can be used with some modifications.  The actual CultureInfo code is <code>de-DE</code>.  <code>[$de-DE]</code> will prefix the display value with <code>de</code> to specify the German format.  Adding a dash <code>[$-de-DE]</code> will remove the prefix.  These number formats can also be used by the <code>WorksheetFunction.Text()</code>.</p>

<p><a href="https://i.stack.imgur.com/y03sN.png" rel="noreferrer"><img src="https://i.stack.imgur.com/y03sN.png" alt="enter image description here"></a></p>

<h2>Refactored Code</h2>

<p>Here is a rough rewrite using most of my suggestions:</p>

<pre><code>Sub SaveAsPdf()
    Dim TargetWorksheet As Worksheet
    Set TargetWorksheet = ActiveSheet

    Dim shortName As String
    shortName = GetPDFFileName(TargetWorksheet)

    Dim fileName As String
    fileName = Environ("USERPROFILE") &amp; "Documents\" &amp; shortName &amp; ".pdf"

    TargetWorksheet.ExportAsFixedFormat Type:=xlTypePDF, fileName:=fileName, Quality:=xlQualityStandard, IncludeDocProperties:=True, IgnorePrintAreas:=False, OpenAfterPublish:=False

    SendAsMail fileName, StaffEmailAdress, shortName

End Sub

Private Function GetPDFFileName(ByVal TargetWorksheet As Worksheet) As String

    Dim YearOf As Long
    YearOf = TargetWorksheet.Range("Year").Value

    Dim shortName As String
    shortName = presetSheet.Cells(3, 11).Value

    Dim Result As String

    Select Case TargetWorksheet.Name
    Case wsPreSetting.Name

        Result = YearOf &amp; "_" &amp; sheetName &amp; "_" &amp; shortName

    Case wsExpenses.Name

        Dim MonthOf As Long
        MonthOf = GermanMonthToNumber(TargetWorksheet.Range("Month").Value)
        Result = Mid(Year, 3) &amp; "-" &amp; Format(MonthOf, "##") &amp; "_" &amp; ExpensesName &amp; "_" &amp; shortName

    Case wsVacationApplication.Name

        GetPDFFileName = Year &amp; "_" &amp; VacationApplicationName &amp; "_(" &amp; Format(Date, "MMDDYY") &amp; ")_" &amp; shortName

    End Select

    GetPDFFileName = Result

End Function

Private Function GermanMonthToNumber(monthName As String) As Long
    Select Case monthName
        Case January
            GermanMonthToNumber = 1
        Case February
            GermanMonthToNumber = 2
        Case March
            GermanMonthToNumber = 3
        Case April
            GermanMonthToNumber = 4
        Case May
            GermanMonthToNumber = 5
        Case June
            GermanMonthToNumber = 6
        Case July
            GermanMonthToNumber = 7
        Case August
            GermanMonthToNumber = 8
        Case September
            GermanMonthToNumber = 9
        Case October
            GermanMonthToNumber = 10
        Case November
            GermanMonthToNumber = 11
        Case December
            GermanMonthToNumber = 12
    End Select

End Function
</code></pre>
    </div>