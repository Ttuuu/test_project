<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Prelude</h1>
<p>I think your code (sans bug) is fine. Your question is already a little nit-picky so my comments will mostly be nit-picks. I am not a Haskell expert either, so don't place too much authority in my comments. Evaluate them for yourself.</p>
<p>My comments are in a somewhat arbitrary order, but I've organized them with headers. The section pertaining specifically to your question is titled "What to do with the <code>case</code>".</p>
<p>The revised code is included at the end.</p>
<h1>The <code>Guess</code> datatype</h1>
<p>A datatype that is used precisely like this already exists, it's called <a href="https://hackage.haskell.org/package/base-4.12.0.0/docs/Data-Ord.html#t:Ordering" rel="nofollow noreferrer"><code>Ordering</code></a> and can be found in <code>Data.Ord</code> (although I believe it's included by default). No need to reinvent the wheel here. Especially because you'll see later that you can use already-made functions that work with <code>Ordering</code>.</p>
<h1>Input validation</h1>
<p>You correctly check that the input is a well-formed number, but you don't check that it's between the min and max value of the range. Here's an example of how this bug manifests itself.</p>
<pre><code>Guess the number between 1 and 1000 !
50
Guess more !
Guess the number between 50 and 1000 !
20
Guess more !
Guess the number between 20 and 1000 !
</code></pre>
<p>Notice how the value goes down. The fix, which I will put in the section addressing your questions about <code>Maybe</code>, is to add another case that deals with a well-formed, but invalid guess.</p>
<h1>Syntax and other small details</h1>
<p><code>min</code> and <code>max</code> are built-in functions, it's best not to shadow them. I would call them <code>minValue</code> and <code>maxValue</code>.</p>
<p>You can pattern match in function definitions so that you don't need to unpack <code>range</code> – you can instead have</p>
<pre class="lang-hs prettyprint-override"><code>askForNumber oracle tries (minValue, maxValue) = do
...
</code></pre>
<p>Function application has the highest precedence in Haskell, so you don't need parens around <code>(show min)</code>. <code>(oracle) &lt;$&gt; guess</code> doesn't need the parens either.</p>
<p><code>maybe value id = fromMaybe value</code>, so use that instead. You can get <code>fromMaybe</code> from <code>Data.Maybe</code>, but it might be included by default.</p>
<h1><code>oracle</code></h1>
<p>If you switch to using <code>Ordering</code>, you can nix your <code>compareToSecret</code> function and define <code>oracle = compare secret</code>.</p>
<h1>What to do with the <code>case</code></h1>
<p>I think it's kind of clunky to extract a value from a <code>Maybe</code> after you've cased on it, which is what you're doing right now. A big utility of <code>case</code> is knowing that your value must be of a certain form in each branch. In that branch, <code>guess</code> must be of the form <code>Just _</code>. While you as a programmer know this to be true, it's much more helpful to have the type system be able to prove this.</p>
<p>As I see it, there are two ways to handle your <code>case</code> statement.</p>
<p>The first is to have two nested <code>case</code> statements. The first branches on <code>guess</code>. If <code>guess</code> is <code>Nothing</code>, it prompts the user for another input. If <code>guess</code> is <code>Just g</code>, it cases on <code>oracle g</code>.</p>
<p>The second is to do a slight modification of what you're doing. Instead of <code>fmap</code>ping <code>oracle</code>, you can <code>fmap</code> the function <code>\g -&gt; (oracle g, g)</code>. This allows you to extract the guess safely without having to use <code>Maybe</code>. I believe this is what you were doing originally.</p>
<p>I prefer to avoid nesting <code>case</code>s when I can, so I opted for the second one.</p>
<p>If you would also like to validate the input (I chose to), then you will want to add a case at the beginning matching <code>Just (_, guess)</code> – i.e. one that ignores the comparison – to deal with invalid guesses. This pattern, however, will match both invalid and valid guesses. We need to add a guard that asserts that <code>guess &gt; max</code> or <code>guess &lt; min</code>. This looks like:</p>
<pre class="lang-hs prettyprint-override"><code>    ...
    Just (_, guess) | guess &lt; min || guess &gt; max -&gt; do
      putStrLn "Guess out of range"
      askForNumber oracle tries range
    ...
</code></pre>
<h1>Small note on using <code>oracle</code></h1>
<p>I use the function <code>\g -&gt; (oracle g, g)</code> which might feel slightly clunky. Indeed, there are a few alternatives, but I warn you that they are somewhat arcane. In general, I would avoid using "cute" or "slick" code like this unless you know everyone who sets eyes on the code will understand it.</p>
<p>All of the below are equivalent (for your use case):</p>
<pre><code>\g -&gt; (oracle g, g)    -- plain definition
oracle &amp;&amp;&amp; id          -- (&amp;&amp;&amp;) needs to be imported from Control.Arrow
(,) =&lt;&lt; oracle         -- using the Reader Monad
(,) &lt;$&gt; oracle &lt;*&gt; id  -- using the Reader Applicative
</code></pre>
<p>I would be most inclined to use <code>oracle &amp;&amp;&amp; id</code> because it'd be the most recognizable, but even it is a little arcane. I pretty much only included the last example because you'll see code that looks like <code>f &lt;$&gt; g &lt;*&gt; h &lt;*&gt; i …</code> a lot; it's a common idiom for other <code>Applicative</code>s (but I would advise against using it in this case). No matter what people say or do, there's nothing wrong with writing "plain" or "simple" Haskell.</p>
<h1>Revised code</h1>
<p>You'll find that not too much is different.</p>
<pre class="lang-hs prettyprint-override"><code>import System.Random  
import Text.Read (readMaybe)

main :: IO ()
main = do 
  gen &lt;- getStdGen
  let maxSecret = 1000
  let (secret, newGen) = randomR (1,maxSecret) gen :: (Int, StdGen)

  -- putStrLn $ show secret
  let oracle = compare secret
  askForNumber oracle 1 (1, maxSecret)

askForNumber :: (Int -&gt; Ordering) -&gt; Int -&gt; (Int, Int) -&gt; IO ()
askForNumber oracle tries range@(minValue, maxValue) = do
  putStrLn $ "Guess the number between " ++ show minValue ++ " and " ++ show maxValue ++ " !"
  guessInput &lt;- getLine
  let guessMaybe = readMaybe guessInput :: Maybe Int

  case (\guess -&gt; (oracle guess, guess)) &lt;$&gt; guessMaybe of 
    Nothing -&gt; do
      putStrLn "That is not a number"
      askForNumber oracle tries range
    Just (_, guess) | guess &lt; minValue || guess &gt; maxValue -&gt; do
      putStrLn "Guess out of range"
      askForNumber oracle tries range
    Just (LT, guess) -&gt; do
      putStrLn "Guess less !"
      askForNumber oracle (tries+1) (minValue, guess)
    Just (GT, guess) -&gt; do
      putStrLn "Guess more !"
      askForNumber oracle (tries+1) (guess, maxValue)
    Just (EQ, _) -&gt; do
      putStrLn "You win !"
      putStrLn $ "It took you " ++ (show tries) ++ " tries."
<span class="math-container">```</span>
</code></pre>
    </div>