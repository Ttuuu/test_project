<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There are some logical errors with this function as well as inefficient techniques. </p>

<ol>
<li><code>cutoff_index_start</code> should not be <code>cutoff_index_end + 1</code>-- rather it should be just <code>cutoff_index_end</code>. This is because subarray slicing does not include the elements at the upper bound endpoint, meaning your original code is skipping elements occurring at <code>index1</code>s. </li>
<li>The double for loop is unnecessary since you know the index at which your intervals are occurring. No need to check against every element in <code>input_distancelist</code>. </li>
<li><code>np.searchsorted</code> can take an array of values to insert. </li>
</ol>

<p>With all those points, the code simply becomes:</p>

<pre class="lang-py prettyprint-override"><code>def average_over_distance(input_datalist, input_distancelist, average_distance):

    output_average_list = []
    ratio_steps = int(input_distancelist[-1] / average_distance)

    distance_steps = range(0, (ratio_steps + 2) * average_distance, average_distance)

    breaks = np.searchsorted(input_distancelist, distance_steps)

    for index2, elements2 in enumerate(distance_steps[1:]):
        cutoff_index_start = breaks[index2]
        cutoff_index_end = breaks[index2 + 1]

        output_average_list.append(np.mean(input_datalist[cutoff_index_start:cutoff_index_end]))

    return output_average_list
</code></pre>

<p>You will notice slightly different results, this is due to numpy's float representation and the logical error I pointed out in #1 above.</p>
    </div>