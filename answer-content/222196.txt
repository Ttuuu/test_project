<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<pre><code>    public static IEnumerable&lt;AttributeCollection&lt;T&gt;&gt; EnumerateCustomAttributes&lt;T&gt;(this MemberInfo member) where T : Attribute
</code></pre>
</blockquote>

<p>I'm surprised that this method doesn't have a docstring, and I don't find its name very descriptive. What differentiates this from <code>GetCustomAttributes</code> is that it inherits, so I'd expect a name like <code>InheritedCustomAttributes</code>. (Perhaps there's an equally succinct name which makes it clear that it includes attributes defined directly on the member).</p>

<hr>

<blockquote>
<pre><code>            var queue = new Queue&lt;MemberInfo&gt;
            {
                member,
            };
</code></pre>
</blockquote>

<p>Is a queue the right data structure? Bearing in mind that you say</p>

<blockquote>
  <ul>
  <li>properties come before types</li>
  <li>classes come before interfaces</li>
  </ul>
</blockquote>

<p>I would have thought that you need to fill a priority queue in one pass (properties have priority over classes have priority over interfaces; and for properties and classes the nearer one has priority; priority between interfaces seems rather arbitrary) and then call <code>GetCustomAttributes</code> in a second pass.</p>

<hr>

<blockquote>
<pre><code>            // Helps to suppress duplicate results when same member is seen multiple times.
            var seenAttributeCollections = new HashSet&lt;AttributeCollection&lt;T&gt;&gt;();
</code></pre>
</blockquote>

<p>I'm not clear on why duplication is handled at the level of collections of attributes rather than individual attributes.</p>

<hr>

<blockquote>
<pre><code>                    if (type.IsSubclass())
                    {
                        if (type.BaseType.GetProperty(member.Name) is PropertyInfo otherProperty)
                        {
                            queue.Enqueue(otherProperty);
                        }

                        queue.Enqueue(type.BaseType);
                    }

                    foreach (var interfaceType in type.GetInterfaces())
                    {
                        if (interfaceType.GetProperty(member.Name) is PropertyInfo otherProperty)
                        {
                            queue.Enqueue(otherProperty);
                        }

                        queue.Enqueue(interfaceType);
                    }
</code></pre>
</blockquote>

<p>Firstly, I think it would be cleaner to extract a method <code>GetSupertypes</code> which returns the base class (if there is one) followed by the interfaces, so that the loops can be combined into one.</p>

<p>Secondly, I think there are a couple of problems with the <code>PropertyInfo</code> handling:</p>

<ol>
<li><code>member</code> is not necessarily a <code>PropertyInfo</code>. Should the signature of the method be changed? If not, should support be added for <code>MethodInfo</code> too?</li>
<li><p>Consider</p>

<pre><code>class T4 : T3
{
    public new string P1 { get; set; }
}
</code></pre>

<p>Should <code>T4.P1</code> inherit attributes from <code>T3.P1</code>?</p></li>
</ol>

<hr>

<blockquote>
<pre><code>public class AttributeCollection&lt;T&gt; : List&lt;T&gt;, IEquatable&lt;AttributeCollection&lt;T&gt;&gt; where T : Attribute
{
    private static readonly IEqualityComparer&lt;AttributeCollection&lt;T&gt;&gt; Comparer = EqualityComparerFactory&lt;AttributeCollection&lt;T&gt;&gt;.Create
    (
        // When either one is True then we consider both collections equal.
        equals: (x, y) =&gt; (x.Member == y.Member) || x.SequenceEqual(y)
    );
</code></pre>
</blockquote>

<p>To my comment above that I'm not clear on why duplication is handled at the level of collections of attributes rather than individual attributes, I <em>really</em> don't understand why the order would matter. If collections of attributes are the correct level, should they not at least be treated as sets and equality with <code>SetEquals</code>?</p>
    </div>