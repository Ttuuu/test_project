<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Use loops</h1>
<p>The game setup is not really conducive to optimization. Tic Tac Toe does not require a board, only each player's moves matter, which makes the game logic much simpler.</p>
<h2>Your code</h2>
<p>Anyways to your code.</p>
<p>Don't be shy of using standard loops to solve problems. To me it looks like you are finding ways to avoid the straight forward solution of iterating all the match arrays, checking for a match on each.</p>
<p>You are also offsetting the <code>match</code> indexes by 1, start at 0 to match the <code>board</code> array indexing.</p>
<p>Use an array rather than an object for <code>map</code>.</p>
<p>Also storing the board as a 2D array seams a bit odd. You need to convert it to a flat array, why not store it as such in the first place. Indexing from a 2D coordinate x,y to a flat index is quick, <code>boardFlat[x + y * 3]</code></p>
<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>'use strict';

const board = // as a string for the example  but could be a 2D array
  "xxx"+
  "xoo"+
  "xxx";

const matches = [[0,3,6],[1,4,7],[2,5,8],[0,1,2],[3,4,5],[6,7,8],[0,4,8][2,4,6]];

const solver = (board, matches) =&gt; {
  const counts = {x : 0, o : 0};
  var foundMatch;
  for (const match of matches) {
    counts.x = 0;
    counts.o = 0;
    for (const index of match) {
      const char = board[index];
      if (counts[char] !== undefined) {
        if (counts[char] === 2) { // pre-empt the 3
          foundMatch = match;
          break;
        }
        counts[char] += 1;
        if (!counts.x &amp;&amp; !counts.o) { break }
      } else { break }
    }
    if(foundMatch){
      console.log(`Match found at set: ${foundMatch}`);
      return;
    }
  }
  console.log(`No match found.`);
}

solver(board, matches)</code></pre>
</div>
</div>

<h2>Only moves matter.</h2>
<p>For TicTacToe the general solutions I see use the 2D array to hold the board as a sort of mirror of the game state. But the reality is that you need only store each players moves. You build the displayed board from the player moves.</p>
<p>Eliminating the board make the rest of the game logic much simpler. Checking for wins, draw, valid positions, blocking moves, winning moves only relate to player's current moves.</p>
<p>To simplify it even further, all moves can be represented as a single number using the first 9 bits to represent the 9 possible moves. The you need only do bit logic <code>(player.moves &amp; wins[0] === wins[0])</code> will be true if the player has the top row (see example)</p>
<h2>Example</h2>
<p>The example was going to be for another question but I never posted (Because its not finished), so with a slight mod I add it here as purely an example of moves only and bitwise logic to play the game. Its CPU V CPU only and is dumb, random moves unless there is a need to block, or a winning move.</p>
<p><strong>Update</strong> Quite day so added human player.</p>
<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>// Wait till all code has been run befor starting
setTimeout(()=&gt;game.state = game.states.start,0);
const options = {
    startPause : 2000,
    statePause : 1000,
    text : {
        start: `Tic Tac Toe` ,
        win : "## wins!", // ## is replaced with player name
        draw : "It's a draw.",
        turn : "Player ##'s turn", // ## is replaced with player name
        moves : {
            block : "blocking move",
            win : "winning move",
            random : "move",
        },
        playerA : "CPU X",
        playerB : "CPU O",
    }
}

/*===================================================================*/
/* Game rules in logic form */
const ticTacToe = {
    layout : "876543210",
    get positions() { return  [1,2,4,8,16,32,64,128,256] },
    wins : [7,56,448,273,84,292,146,73],
    moveStr(move) { return " @ " + (3-(Math.log2(move) % 3)) + "," + (3-(Math.log2(move)/3 | 0)) }, 
    isWin(moves) { return ticTacToe.wins.some(win =&gt; (moves &amp; win) === win ) },    
}

/*===================================================================*/
/* Manages players and their turns  */

const player = (name, as) =&gt; ({name, as, moves : 0, toString() { return this.name } });
const players = {
    playing : [player(options.text.playerA, "X"), player(options.text.playerB, "O")],
    turn : 0,
    get next() { return this.playing[(++this.turn) % 2] },
    get current() { return this.playing[this.turn % 2] },
    get opponant() { return this.playing[(this.turn + 1) % 2] },
    reset() { 
        this.playing[0].moves = 0;
        this.playing[1].moves = 0;
        this.turn = Math.random() * 2 | 0;
    },
}

/*===================================================================*/
/* handles board related stuff */
const board = {
    reset() { board.moves = ticTacToe.positions },
    get full() { return board.moves.length === 0 },
    get randomMove() { return board.moves.splice(Math.random() * board.moves.length | 0, 1)[0] },
    show(players) {
        const p1 = players.playing[0], p2 = players.playing[1], m1 = p1.moves, m2 = p2.moves
        return ticTacToe.layout.replace(/[0-9]/g, i =&gt; m1 &amp; (1 &lt;&lt; i) ? p1.as : m2 &amp; (1 &lt;&lt; i) ? p2.as : ".");
    },
    winningMove(moves){
        var index = -1;
        ticTacToe.wins.some(win =&gt;(index = board.moves.findIndex(move =&gt; ((moves | move) &amp; win) === win)) &gt; -1);
        if(index &gt; -1) { return board.moves.splice(index,1)[0] }
        return -1;
    },    
}
/*===================================================================*/
/* Plays the game */
const game = {
    states : { start: 1, nextMove: 2, win: 3, draw: 4, humansTurn: 5, waitForNext: 6},
    set humanPlaying(val) {
        this.humanFoe = true;
        board.reset(); 
        players.playing[0].name = "Man X";
        players.playing[0].isHuman = true;
        log("board", board.show(players));
    },
    set state(state) {
        clearTimeout(this.timerHdl);
        var next,time = options.statePause;
        switch(state){
            case game.states.humansTurn: 
                time = 100000;
                next = game.states.humansTurn;
                break;
            case game.states.waitForNext:    
                next = game.states.nextMove;
                time = options.startPause / 3;
                break;
            case game.states.nextMove:   
                next = game.playTurn();        
                break;                
            case game.states.start:
                log("status", options.text.start);
                players.reset()
                board.reset();                
                next = game.states.nextMove;
                break;
            case game.states.win: 
                log("status", options.text.win.replace("##",players.current)); 
                next = game.states.start;
                break;
            case game.states.draw: 
                log("status", options.text.draw);    
                next = game.states.start;     
        }
        this.timerHdl = setTimeout(() =&gt; game.state = next, time);
    },
    set humanPlays(move){
      const player = players.current
      if(player.isHuman){
        const moveIdx = board.moves.indexOf(move);
        if(moveIdx === -1) {
            log("status","INVALID move Man stupid... forfits game.");
            players.next;
            clearTimeout(this.timerHdl);
            this.timerHdl = setTimeout(() =&gt; game.state = game.states.win, 2000);
            return;
        }
        board.moves.splice(moveIdx,1);    
        log("info",   ticTacToe.moveStr(move))
        player.moves += move;
        log("board", board.show(players));        
        var nextState = game.states.waitForNext; 
        if (ticTacToe.isWin(player.moves)) { nextState = game.states.win }
        if (board.full) { nextState = game.states.draw }
        game.state = nextState;
      } else {
        log("status","Man caught cheating! forfits game.");
        players.next;
        clearTimeout(this.timerHdl);
        this.timerHdl = setTimeout(()=&gt; game.state = game.states.win, 2000);
      }
    
    },
    playTurn() {
        const player = players.next;
        if(player.isHuman) {
            log("board", board.show(players));   
            log("status", options.text.turn.replace("##",player));
            return game.states.humansTurn;
        
        }
 
        log("status", options.text.turn.replace("##",player));
        var moveStr =  player + "'s "; 
        var move = board.winningMove(player.moves);

        if (move === -1) {
            move = board.winningMove(players.opponant.moves);

            if (move === -1) {
                moveStr += options.text.moves.random; 
                move = board.randomMove;
             
        } else { moveStr += options.text.moves.block }
        } else { moveStr += options.text.moves.win }

        log("info", moveStr +  ticTacToe.moveStr(move))
       
        player.moves += move;
        
        log("board", board.show(players));        
        if (ticTacToe.isWin(player.moves)) { return  game.states.win }
        if (board.full) { return game.states.draw }
        return game.states.nextMove;
    },
}


/*===================================================================*/
/* Default display interface is to the console */
/* You need to config the ticTacToe.layout string for what you need */
const log = (type, ...args) =&gt; {
    if (type === "register") {
        log.board = args[0];
        log.status = args[1];
        log.info = args[2];
    } else if (type === "board") {
        log.board(...args);
    } else if (type === "info") {
        log.info(...args);
    } else {
        log.status(...args);
    }
}
log.info = log.status = log.board = console.log;




/*===================================================================*/
/* An interface to the display as the game is writen for the console */
log("register",showBoard, showStatus, showInfo); // point logger to new display
const displayTable = [b0,b1,b2,b3,b4,b5,b6,b7,b8];
function showBoard(posString) {
  var i = 9
  while (i--) { displayTable[i].textContent = posString[i] }
}
function showStatus(str) { statusContainer.textContent = str }
function showInfo(str) { infoContainer.textContent = str }



addEventListener("click",(e) =&gt; {
    if(game.humanFoe) {
        if(e.target.id[0] === "b") {
          game.humanPlays = 1 &lt;&lt; (8-Number(e.target.id[1]));
       }
    
    } else {
        toPlay.textContent = "Man V Machine";
        game.state = game.states.start;
        game.humanPlaying = true;
   }

});</code></pre>
<pre class="snippet-code-css lang-css prettyprint-override"><code>code {
   font-size : 20px;
   text-align: center;

}
#toPlay {
    position: absolute;
    bottom: 0px;
    font-size : 12px;
}
table {
    position: absolute;
    left: 42%;
    top: 60px;
    border-spacing: 0px;
    font-size : 28px;
    background : #eef;
}
td {
    padding : 0px 8px 0px 8px;
    cursor: pointer;

}
#infoContainer {
  font-size : 12px;
}
.allB {
  border : 1px solid black;
}
.topB {
  border-top : 0px;
}
.botB {
  border-bottom :  0px;
}
.leftB {
  border-left :  0px;
}
.rightB {
  border-right :  0px;
}</code></pre>
<pre class="snippet-code-html lang-html prettyprint-override"><code>&lt;code&gt;
&lt;div id="statusContainer"&gt;&lt;/div&gt;
&lt;table&gt;
&lt;tr&gt;&lt;td id="b0" class="allB topB leftB"&gt;-&lt;/td&gt;&lt;td id="b1" class="allB topB"&gt;-&lt;/td&gt;&lt;td id="b2" class="allB topB rightB"&gt;-&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="b3" class="allB leftB"&gt;-&lt;/td&gt;&lt;td id="b4" class="allB"&gt;-&lt;/td&gt;&lt;td id="b5" class="allB rightB"&gt;-&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="b6" class="allB leftB botB"&gt;-&lt;/td&gt;&lt;td id="b7" class="allB botB"&gt;-&lt;/td&gt;&lt;td id="b8" class="allB rightB botB"&gt;-&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;
&lt;div id="infoContainer"&gt;&lt;/div&gt;
&lt;div id="toPlay"&gt;Click board to play!&lt;/div&gt;
&lt;/code&gt;</code></pre>
</div>
</div>

    </div>