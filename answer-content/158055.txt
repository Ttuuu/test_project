<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You're inverting the caller/callee chain here. There are pro's and con's, but IMO more con's than pro's - <code>Application.Run</code> is a performance hit in the first place, and with the stringly-typed parameters you lose compile-time validation of your code... which I would do <em>anything</em> to try and preserve as much as possible.</p>

<p>Another downside is that it's not going to work on class methods, so you can't have an object that's responsible for interacting with a worksheet - may or may not be a problem, but utility code shouldn't be driving design decisions of its calling code that way.</p>

<hr>

<p>This declaration is annoying:</p>

<pre><code>Dim aWB As Workbook, _
    ActiveSH As Worksheet, _
    ScreenUpdateState As Boolean, _
    StatusBarState As Boolean, _
    CalcState As XlCalculation, _
    EventsState As Boolean, _
    DisplayPageBreakState As Boolean
</code></pre>

<p>You (or a maintainer) can't add a comment on any of those. This is probably going to break syntax highlighting in this post, but...</p>

<pre><code>Dim aWB As Workbook, _ 'a comment here is illegal
    ActiveSH As Worksheet, _
    ScreenUpdateState As Boolean, _
    StatusBarState As Boolean, _
    CalcState As XlCalculation, _
    EventsState As Boolean, _
    DisplayPageBreakState As Boolean
</code></pre>

<p>Here's how the VBE sees it:</p>

<p><img src="https://i.stack.imgur.com/Bi8ab.png" alt="compile error"></p>

<p>And if you manage to squeeze a legit comment in there, well you better hope you have <code>Option Explicit</code> specified:</p>

<pre><code>Dim aWB As Workbook, _
    ActiveSH As Worksheet, _
    ScreenUpdateState As Boolean 'oh, and this one is legal, but... _
    StatusBarState As Boolean, _
    CalcState As XlCalculation, _
    EventsState As Boolean, _
    DisplayPageBreakState As Boolean
</code></pre>

<p>I would simply avoid cramming multiple declarations in a single statement, there's no real reason to do that... and there <em>are</em> real reasons to avoid it:</p>

<p><img src="https://i.stack.imgur.com/AXIil.png" alt="Compile error: too many line continuations"></p>

<p>Variables should be declared close to their first use anyway, not in a wall of declarations at the top of the procedure.</p>

<p>FWIW with <a href="http://rubberduckvba.com" rel="noreferrer">Rubberduck</a> (a COM add-in for the VBE that I [and other fellow VBA reviewers] is [are] working on), that's a one-click fix:</p>

<p><img src="https://i.stack.imgur.com/zcoE7.png" alt="Inspection Results &gt; Fix &gt; Separate multiple declarations into multiple instructions"></p>

<p>That instantly turns the statement into this:</p>

<blockquote>
<pre><code>Dim aWB As Workbook
Dim ActiveSH As Worksheet
Dim ScreenUpdateState As Boolean
Dim StatusBarState As Boolean
Dim CalcState As XlCalculation
Dim EventsState As Boolean
Dim DisplayPageBreakState As Boolean
</code></pre>
</blockquote>

<hr>

<p>You don't need the the <code>aWB</code> local variable at all (a terrible name IMO), since you already have <code>ActiveSH</code> (which I'd probably rename to <code>originalActiveSheet</code>), and its <code>.Parent</code> member points to the originally active workbook.</p>

<hr>

<p>It's not clear why <code>SubNameToRun</code> and <code>ArgumentsToPass</code> are passed <code>ByRef</code> (implicitly), when <code>DispStatusBar</code> is explicitly <code>ByVal</code> - all parameters could very well be <code>ByVal</code> here.</p>

<p>Actually - and given the 30 optional parameters of <code>Application.Run</code> that would look <em>much</em> uglier, but <code>ArgumentsToPass</code> would make a much friendlier API if it were a <code>ParamArray</code> parameter; that way you could keep type safety for your arguments, which means you could pass arguments that can't be implicitly or explicitly converted to a <code>String</code> - e.g. a <code>Range</code> object.</p>

<p>Not being able to pass an object parameter is a serious showstopper limitation IMO.</p>

<hr>

<p>I think it's a nice idea, but it's way too limited. A more flexible solution would be a simple <code>ToggleWaitMode</code> procedure that toggles <code>ScreenUpdating</code>, <code>DisplayStatusBar</code>, <code>Calculation</code>, <code>EnableEvents</code>, allows specifying an optional <code>StatusBar</code> message, and heck, that toggles the <code>Cursor</code> to/from <code>xlWait</code> as well.</p>

<p>You could even wrap that toggle behavior in a class, encapsulate the state (although that's a <em>leaky abstraction</em>, these things are all global really), and use the <code>Class_Terminate</code> handler to revert back to original state, that way the calling code couldn't even "forget" to toggle it back:</p>

<pre><code>With WaitWorker.Init(statusText:="Please wait...", disableEvents:=True)

    'do stuff

End With
</code></pre>

<p>That way you don't need to do <code>Application.Run</code>, so it works with class module callers, and you're not passing a stringly-typed list of parameters either, so the caller can still do everything it wants: you're not <em>interfering</em> with the caller.</p>
    </div>