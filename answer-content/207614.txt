<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><p>Trust yourself. There is no chance to have an out-of-bounds access to any of your vectors. Testing it with <code>.at()</code> is a pure waste of cycles. Prefer <code>[]</code>.</p></li>
<li><p>Structuring code like</p>

<pre><code>    if (pointed_to.at(i)) {
        continue;
    } else {
        do_real_job;
    }
</code></pre>

<p>looks anti-idiomatic. Either drop <code>else</code> to un-indent:</p>

<pre><code>    if (pointed_to.at(i)) {
        continue;
    }
    do_real_job;
</code></pre>

<p>or negate the condition:</p>

<pre><code>    if (!pointed_to.at[i]) {
        do_real_job;
    }
</code></pre></li>
<li><p>The <code>print_permutations</code> interface requires an intimate knowledge of implementation, and forces the caller to allocate two vectors which are of no interest to her. Consider wrapping it in</p>

<pre><code>print_permutations(const string&amp; input) {
    size_t length = input.length();

    vector&lt;int&gt; positions(string_length);
    vector&lt;bool&gt; pointed_to(string_length, false);

    print_permutations(input, position, pointed_to, 0, length);
}
</code></pre>

<p>with an overloaded variant being private to implementation.</p></li>
<li><p><code>size_t string_length = input.length();</code> assumes that the type of the result of <code>string::length()</code> is <code>size_t</code>. Usually it is the case, but the only guarantee is that it is <em>some</em> unsigned integer type. You can use it as <code>std::string::size_type string_length</code>. In C++11 <code>auto string_length</code> works as well.</p></li>
<li><p><code>print_vector</code> is never used.</p></li>
</ul>
    </div>