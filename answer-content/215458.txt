<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You are distinguishing between <code>hasNextInt()</code> and <code>hasNextDouble()</code> in the input stream, but treating them identically afterwards.  <code>hasNextDouble()</code> will return <code>true</code> if the next token is an integer, because integers can be successfully parsed as a double too.</p>

<p>So your loop could be simplified into:</p>

<pre><code>double width = 0.0;

for(;;) {
    System.out.print("Enter width: ");
    if (input.hasNextDouble()) {
        width = input.nextDouble();
        if (width &gt; 0)
            break;
    }
    System.out.println("Input error. Try again.");
    input.nextLine();
}
</code></pre>

<p>A few notes:</p>

<ul>
<li><p>The unnecessary <code>validWidth</code> variable has been removed.  A <code>break</code> statement exits the infinite <code>for(;;)</code> loop, skipping over the "cleanup, try again" code.</p></li>
<li><p><code>.nextLine()</code> is used to cleanup after invalid input. This is important, because if the user enters <code>"one fish two fish red fish blue fish"</code> instead of say <code>-12</code>, your current approach will print out <code>"Input error. Try again"</code> 8 times.  Using <code>.nextLine()</code> discards everything up to and including the new line character.  Which brings us to zero and negative numbers.  If the user enters a valid integer/double, but not a positive one, your code didn't skip any tokens, where as my code (as mentioned above) will skip the remaining input up to and including the new line character.  Assuming the next character was a new line (as in the user entered <code>-12</code> and pressed the return key) the following <code>.hasNextDouble()</code> will skip over the new line (and any other blank space) looking for the next token, so the effect is approximately the same.</p></li>
<li><p><strong>But</strong> my code performs differently if the user enters <code>red 5</code>.  You original code will print <code>"Invalid input.  Try again."</code>, and then immediately consume the <code>5</code> as valid input, where as my code will discard the remainder of the line, and wait for the user to enter another line.</p></li>
</ul>

<p>Since you are using the code multiple places, putting it into a method is prudent.  Here is one using a <a href="https://docs.oracle.com/javase/10/docs/api/java/util/function/DoublePredicate.html" rel="nofollow noreferrer"><code>DoublePredicate</code></a> functional interface in order to validate the input according to the caller's requirements:</p>

<pre><code>double getDouble(Scanner input, String prompt, DoublePredicate validate) {
    double value = 0.0;

    for(;;) {
        System.out.print(prompt);
        if (input.hasNextDouble()) {
            value = input.nextDouble();
            if (validate.test(value))
                return value;
        }
        System.out.println("Input error. Try again.");
        input.nextLine();
    }
}
</code></pre>

<p>Which you could use with a lambda function like:</p>

<pre><code>    double width = getDouble(input, "Enter width: ", x -&gt; x &gt; 0);
</code></pre>
    </div>