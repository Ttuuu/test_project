<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Let us begin with some layout. This is a typical grid use case so that you won't have to manually manage grid. At the lowest level, a grid structure essentially places buttons by calculating coordinates. But this gets tedious over time, that's why a grid layout is provided. Also, it was a clever way of cheking win by being symbol agnostic. A normal tic tac toe game would have used checkwin(symbol) to determine win.</p>

<h2>On strings</h2>

<p>To escape <code>'</code> within <code>' '</code> you can use <code>"</code> instead. From</p>

<pre class="lang-py prettyprint-override"><code>'\'S TURN.'
</code></pre>

<p>to</p>

<pre class="lang-py prettyprint-override"><code>"'S TURN."
</code></pre>

<p>and you can also use string formatting to clear up some clutter.</p>

<pre class="lang-py prettyprint-override"><code>"PLAYER {}'S TURN.".format(turn)
</code></pre>

<h2>On layout</h2>

<p>Modifying your <code>create_button</code> function to this allows a grid structure</p>

<pre class="lang-py prettyprint-override"><code>def create_button(x, y):
    button = tk.Button(width=10, height=2, command=lambda: callback(button))
    button.grid(row=x, column=y)
    return button
</code></pre>

<p>Then we modify others since different layouts can't be mixed</p>

<pre class="lang-py prettyprint-override"><code>label_button = ttk.Button(
                        game, 
                        text="PLAYER {}'S TURN.".format(turn), 
                        style='Fun.TButton', width=20, 
                        state='disabled')
label_button.grid(row=0, column=1)
invalid = tk.Label(text='')
invalid.grid(row=4, column=1)
</code></pre>

<p>adding the buttons can be then done as</p>

<pre class="lang-py prettyprint-override"><code>buttons = []

buttons.append(create_button(1, 0))
buttons.append(create_button(1, 1))
buttons.append(create_button(1, 2))
buttons.append(create_button(2, 0))
buttons.append(create_button(2, 1))
buttons.append(create_button(2, 2))
buttons.append(create_button(3, 0))
buttons.append(create_button(3, 1))
buttons.append(create_button(3, 2))
</code></pre>

<p>You can use a loop for the row and <code>itertools.cycle</code> for the <code>0, 1, 2</code> if you want to simplify it.</p>

<h2>The <code>check_win</code> function</h2>

<ul>
<li>Simplifying if</li>
</ul>

<p>Adding a <code>()</code> to if statements allows you to write <code>or</code> without <code>\</code></p>

<pre><code>
if ... :
    ...

to

if (...):
    ...

</code></pre>

<p>thus the win_function can be simplified from</p>

<pre class="lang-py prettyprint-override"><code>if (buttons[0]['text'] == buttons[1]['text'] == buttons[2]['text'] != '') or \
(buttons[3]['text'] == buttons[4]['text'] == buttons[5]['text'] != '') or \
</code></pre>

<p>to</p>

<pre class="lang-py prettyprint-override"><code>def check_win():
    if (
        (buttons[0]['text'] == buttons[1]['text'] == buttons[2]['text'] != '') or
        (buttons[3]['text'] == buttons[4]['text'] == buttons[5]['text'] != '') or
        ...
        ):
        return True
    else:
        return False
</code></pre>

<ul>
<li>Simplifying values write-up </li>
</ul>

<p>This can also be further simplified by defining a function to replace <code>buttons[0]['text']</code></p>

<pre class="lang-py prettyprint-override"><code>def btext(i):
    return buttons[i]['text']
</code></pre>

<p>and using it</p>

<pre class="lang-py prettyprint-override"><code>def check_win():
    if (
        (btext(0) == btext(1) == btext(2) != '') or
        (btext(3) == btext(4) == btext(5) != '') or
        (btext(6) == btext(7) == btext(8) != '') or
        (btext(0) == btext(3) == btext(6) != '') or
        (btext(1) == btext(4) == btext(7) != '') or
        (btext(2) == btext(5) == btext(8) != '') or
        (btext(2) == btext(4) == btext(6) != '') or
        (btext(0) == btext(6) == btext(8) != '')
        ):
        return True
    else:
        return False
</code></pre>

<h2>On architecture</h2>

<p>A common pattern is the MVC (Model, View, Controller). While checking and updating gui directly works here, you might consider adding states in a structure like this:</p>

<pre class="lang-py prettyprint-override"><code>board = [
    ['', '', ''],
    ['', '', ''],
    ['', '', '']
]
</code></pre>

<p>Operations are done on this and the gui is updated according to this.</p>
    </div>