<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>overall structure</h3>
<p>I suggest splitting the program into two files.  Everything before <code>forward_loop()</code> processes the files and could be split out into a separate library. This will make it easier to test the functions as well as reuse them in other scripts.</p>
<p><code>Forward_loop()</code> and <code>reverse_loop()</code> don't really seem necessary.  Basically the former calls <code>load_file()</code> and the later calls <code>rev(load_file())</code>.</p>
<p>It's not clear what's the purpose of <code>overlay()</code>.  If it's a typical DNA processing function it should go in the library.  If it's only needed to enter data in the web form, then it should go in the main script.</p>
<p>The rest of the code seems to deal with processing command-line args, getting user input and doing the search using selenium. It can go in the main script, which import the library.</p>
<h3>try argparse</h3>
<p>Your code processes command line parameters in several places and multiple functions.  Try using <code>argparse</code> from the standard library.</p>
<pre><code>import argparse

def parse_args():
    parser = argparse.ArgumentParser()

    parser.add_argument('-f', '--forward', help="file for forward sequencing")
    parser.add_argument('-r', '--reverse', help="file for reverse sequencing")

    return parser.parse_args()
</code></pre>
<p>Calling it will return an object with attributes <code>forward</code> and <code>reverse</code> set to the argument or None.</p>
<p>It looks like you intend to let the user pick multiple sequences for the search. That can be split into another function.  Also, doc strings are good.</p>
<pre><code>def get_selection(sequences):
    """Lets the user select a subset of sequences from a list of sequences.

       Prints the sequences, one per row, with a row number and prompts the user to
       enter a space separated list or row numbers.

       Returns a list of the selected sequences or an empty list.
    """

    print(f'row  sequence')
    for number, sequence in enumerate(sequences, 1)):
        print(f'{number:3}  {sequence}')

    print('To select sequences for the search, enter the'
          'row numbers separates by spaces, e.g,. 0 2 3' )
    picks = input(': ').strip()

    return [sequence[int(i)] for i in picks.split()] if picks else []


def get_sequences(args):

    if args.forward:
        codons = load_file(args.forward)
        sequences = find_open_reading_frames(codons)
        forward_sequences = get_selection(sequences)

    if args.reverse:
        codons = rev(load_file(args.reverse))
        sequences = find_open_reading_frames(codons)
        reverse_sequences = get_selection(sequences)

    return forward_sequences, reverse_sequences

def main():
    args = parse_args()

    forward_sequences, reverse_sequences = get_sequences(args)

    driver = webdriver.Chrome()
    driver.get('https://blast.ncbi.nlm.nih.gov/Blast.cgi?PROGRAM=blastp&amp;PAGE_TYPE=BlastSearch&amp;LINK_LOC=blasthome')
    fill_box = driver.find_element_by_xpath('/html/body/div[2]/div/div[2]/form/div[3]/fieldset/div[1]/div[1]/textarea')
    fill_box.clear()
    fill_box.send_keys(overlay(forward_sequences, reverse_sequences))
    submit_button=driver.find_element_by_xpath(
        '/html/body/div[2]/div/div[2]/form/div[6]/div/div[1]/div[1]/input'
    )
    submit_button.click()

main()
</code></pre>
<p>I've run out of time, so this isn't tested. Hopefully you get the idea.</p>
    </div>