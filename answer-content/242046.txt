<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">


<p>I find it very confusing that you consider all of this assembly as <em>inline</em> assembly. I see the start and exit of a regular FASM assembly program, 2 things I don't expect to find in <em>inline</em> assembly.</p>

<p>Am I correct when I say that your high level language only uses single precision float variables? If not then variables like <em>numberOfRows</em>, <em>currentRow</em>, and <em>currentColumn</em> should be treated like dword integers for speed and frankly because that's what they truly are.</p>

<blockquote>
<pre class="lang-none prettyprint-override"><code>numberBeforeTheImmediatelyAboveOne dd ?
numberImmediatelyAbove dd ?
</code></pre>
</blockquote>

<p>While using descriptive names is encouraged, having source lines that are much longer than the visible screen's width makes reading a lot more difficult. Perhaps you could make use of FASM's line continuation character <code>\</code> ?</p>

<blockquote>
<pre class="lang-none prettyprint-override"><code>While currentRow &lt; numberOfRows | currentRow = numberOfRows
</code></pre>
</blockquote>

<p>Why the OR operator? Does your project not have the compound <code>&lt;=</code> operator?<br>
If available then simply write: <code>While currentRow &lt;= numberOfRows</code>.<br>
If not available then you could invert the condition to: <code>While numberOfRows &gt; currentRow</code>.</p>

<h2>This is wrong</h2>

<blockquote>
<pre class="lang-none prettyprint-override"><code>fld dword [numberToBePrinted]
fstp qword [esp]
</code></pre>
</blockquote>

<p>Here you convert a single precision float into a double precision float, but you forget to reserve space on the stack!</p>

<pre class="lang-none prettyprint-override"><code>sub esp, 8                  &lt;&lt;&lt;&lt; Making room on the stack
fld dword [numberToBePrinted]
fstp qword [esp]
</code></pre>

<h2>Optimizing for codesize where speed doesn't matter at all</h2>

<p>Why do you prefer those macros so much? <code>pushPointerToTheSystemStack numberOfRows</code> is just <code>push numberOfRows</code>. What could be simpler?</p>

<p>The <code>call</code> instruction can do some work for you. You don't need to use the <code>pushStringToTheSystemStack</code> macro:</p>

<pre class="lang-none prettyprint-override"><code>call howManyRowsString
db "How many rows of Pascal's triangle do you want to be printed?",10,0
howManyRowsString:
call [printf]
add esp, 4                  &lt;&lt;&lt;&lt; Don't you need to cleanup the stack with msvcrt ?

push numberOfRows           &lt;&lt;&lt;&lt; Simple
call theFloatSymbol
db "%f",0
theFloatSymbol:
call [scanf]
add esp, 8                  &lt;&lt;&lt;&lt; Don't you need to cleanup the stack with msvcrt ?
</code></pre>
    </div>