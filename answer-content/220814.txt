<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>As I told in <a href="https://codereview.stackexchange.com/a/220730/201170">another</a> <a href="https://codereview.stackexchange.com/a/220645/201170">answers</a>, your code is very C/C++ styled, it is not Pythonic. Try to avoid manual iteration with indices as much as possible. Python has an enormous standard library that contains many useful modules. I already recommended you an <a href="https://docs.python.org/3/library/itertools.html?highlight=itertools" rel="nofollow noreferrer">itertools</a> module. It contains pair of dozens generic functions to work with iterators. One of them - <a href="https://docs.python.org/3/library/itertools.html?highlight=itertools#itertools.permutations" rel="nofollow noreferrer">permutations</a> - do 90% of your work:</p>
<blockquote>
<p>Return successive r length permutations of elements in the iterable.</p>
<p><code>permutations('ABCD', 2) --&gt; AB AC AD BA BC BD CA CB CD DA DB DC</code></p>
<p><code>permutations(range(3)) --&gt; 012 021 102 120 201 210</code></p>
</blockquote>
<p>For list L, it returns all possible permutations iterator. If we will <a href="https://docs.python.org/3/library/stdtypes.html?highlight=join#str.join" rel="nofollow noreferrer">join</a> each permutation, we will get the needed search substring.</p>
<p>But next we will have a problem. Python has no built-in function or easy method to find indices of all found substrings in the string (it is strange, I hope they will add it to future Python versions). So you have to do it manually. You can run <code>string.find(substring)</code> in the loop and, after each found substring, to shorten the search range.</p>
<p>Here is the code for my solution:</p>
<pre><code>from itertools import permutations


class Solution(object):
    """
    Leetcode-XXXXX solution
    """

    def find_chained_substrings(self, S, L):
        result = []
        for perm in permutations(L):
            chained_string = ''.join(perm)
            i = S.find(chained_string)
            while i != -1:
                result.append((i, perm))
                i = S[i+len(chained_string):].find(chained_string)
        return result

    
waka = 'foobarwakatttpingpong-ongpingpt'
lst = ['foo', 'bar', 'waka']
lst2 = ['t', 'pingp', 'ong']
S = Solution()
S.find_chained_substrings(waka, lst2)
</code></pre>
<p>It will return:</p>
<p><code>[(12, ('t', 'pingp', 'ong')), (22, ('ong', 'pingp', 't'))]</code></p>
<p><strong>Note</strong>, that your Leetcode task needs only indices. I construct index-substring tuple for readability and simplier testing. If you want to make a Leetcode solution, replace this string:</p>
<p><code>result.append((i, perm))</code></p>
<p>with this:</p>
<p><code>result.append(i)</code></p>
<hr>
<p>P.S. I strongly recommend you to read the <a href="https://docs.python.org/3/library/index.html" rel="nofollow noreferrer">Python Standard Library</a> documentation. It will greatly improve your Python programming skill and will shift you from the C/C++ish style to Pythonic style.</p>
    </div>