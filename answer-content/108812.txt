<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li>Remove the extra <code>this.</code> whenever it isn't required. It makes your code cleaner and anyone writing in a good IDE can put their mouse over the variable to see where it's coming from, they don't need you to prefix every var with <code>this.</code></li>
<li>Use the <code>var</code> keyword to avoid declaring types when possible. This makes it easier to change your mind on types later and it helps your declaration lines line up. Keeps code <a href="https://en.wikipedia.org/wiki/Don%27t_repeat_yourself" rel="nofollow">DRY</a>.</li>
<li>Drop the Inst suffix on Action and Movement since you're already in an Instruction. It's redundant.</li>
</ul>

<p>Here's my suggestions in action, along with a few other improvements.</p>

<pre><code>using System;
using System.Collections.Generic;

namespace TuringMachineNS
{
    public class TuringMachine
    {
        byte[] tape;
        public bool hasTerminated;
        int currentIndex;
        int currentCard;
        List&lt;ControlCard&gt; cards;

        // Added "= null" to make cards optional, can eliminate other constructors
        public TuringMachine(int size, List&lt;ControlCard&gt; cards = null)
        {
            hasTerminated = false;
            tape = new byte[size];
            currentIndex = tape.Length / 2;

            // Null coalescing operator '??' will create empty list if needed.
            this.cards = cards ?? new List&lt;ControlCard&gt;();

            currentCard = 1;
        }

        public void NextInstruction()
        {
            // Combined both if statements into one since they lead to the same code. No performance hit due to 
            // short-cicuit evaluation.
            if ((currentCard == 0) || (currentIndex &gt; tape.Length || currentIndex &lt; 0))
            {
                hasTerminated = true;
                return;
            }

            var value = tape[currentIndex];
            var Inst = cards[currentCard].GetInstruction(value);
            ExecuteInstruction(Inst);
        }

        private void ExecuteInstruction(Instruction inst)
        {
            if (inst.Action == RWInstructions.WRITE0)
            {
                tape[currentIndex] = 0;
            }
            else if (inst.Action == RWInstructions.WRITE1)
            {
                tape[currentIndex] = 1;
            }

            if (inst.Movement == LRInstructions.MOVELEFT)
            {
                currentIndex--;
            }
            else if(inst.Movement == LRInstructions.MOVERIGHT)
            {
                currentIndex++;
            }

            currentCard = inst.NextCard;
        }

        public override string ToString()
        {
            var tapeString = string.Join("",tape);
            var secondLine = "";
            for (int i = 0; i &lt; this.currentIndex; i++)
            {
                secondLine += " ";
            }
            secondLine += "^";
            return $"{tapeString}\n{secondLine}\n";
        }
    }

    public class ControlCard
    {
        // Combined instructions into array. Equivalent code but allows for expansion. A dictionary
        // could also work well here if you want to allow arbitrary characters.
        Instruction[] Instructions;

        public ControlCard(Instruction zero, Instruction one)
        {
            Instructions = new Instruction[] { zero, one };
        }

        public Instruction GetInstruction(int value)
        {
            if (value == 0 || value == 1)
            {
                return Instructions[value];
            }
            else
            {
                // Throw an exception if value isn't zero or one
                throw new ArgumentOutOfRangeException("value", value, "value argument must be zero or one.");
            }
        }
    }

    public struct Instruction
    {
        // Dropped Inst suffix. You are already in an instruction object, 
        public RWInstructions Action;
        public LRInstructions Movement;
        public int NextCard;
    }

    public enum RWInstructions
    {
        WRITE1,
        WRITE0,
        UNCHANGED
    }

    public enum LRInstructions
    {
        MOVERIGHT,
        MOVELEFT,
        DONOTMOVE
    }
}
</code></pre>
    </div>