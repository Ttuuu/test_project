<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>It might be boring to hear it again, but I have to ask :)</p>

<ol>
<li>Why do you think your application need performance optimisations?</li>
<li>Is your bottle neck in these parts of code which you provided?</li>
<li>Maybe problem is with database/external service/network?</li>
<li>Have you measured processing and communication time? <a href="https://docs.microsoft.com/pl-pl/dotnet/api/system.diagnostics.stopwatch?view=netframework-4.8" rel="nofollow noreferrer">Stopwatch</a></li>
<li>Do you have some kind of monitoring of application, that shows
exactly that its performance is degrading? <a href="https://grafana.com/" rel="nofollow noreferrer">Grafana</a></li>
<li>Have you tried benchmarking? <a href="https://benchmarkdotnet.org/articles/overview.html" rel="nofollow noreferrer">BenchmarkDotNet</a></li>
<li>How about full GC?  <a href="https://prodotnetmemory.com/" rel="nofollow noreferrer">Pro .NET memory management</a></li>
<li>Have you tried profiling? <a href="https://github.com/microsoft/perfview" rel="nofollow noreferrer">PerfView</a></li>
</ol>

<p>If you're not sure if it's a problem, then don't do optimisations. As <a href="https://en.wikipedia.org/wiki/Donald_Knuth" rel="nofollow noreferrer">Donald Knuth</a> said </p>

<blockquote>
  <p>Programmers waste enormous amounts of time thinking about, or worrying about, the speed of noncritical parts of their programs, and these attempts at efficiency actually have a strong negative impact when debugging and maintenance are considered. We should forget about small efficiencies, say about 97% of the time: premature optimization is the root of all evil. Yet we should not pass up our opportunities in that critical 3%.</p>
</blockquote>

<p>Back to the code, it's my personal opinion, but I don't like LINQ, because of <a href="https://devblogs.microsoft.com/pfxteam/know-thine-implicit-allocations/" rel="nofollow noreferrer">implicit allocations</a> which lead to pressure on GC (you've made few of them). Also I don't get it, why you're invoking ToList() method? You operate on IEnumerables everywhere. If you invoke ToList() then you're allocating list and killing main feature of LINQ - laziness. Condition you wrote is really hard to read, I would work on that to simplify it somehow. I know it's not related with performance, but it's still code review :).</p>
    </div>