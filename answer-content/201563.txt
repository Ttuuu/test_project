<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>What's "C++2a-friendly" anyway?</h2>

<p>I'm not sure what you mean by C++2a-friendly. The spaceship operator isn't out yet, and will be part of the next standard. So it isn't C++2a-friendly, it's C++2a period, or what don't I understand?</p>

<p>If by C++2a-friendly you mean: using available features from the next standard (e.g concepts in gcc), I believe you can do a bit better than you do. For instance, type traits should be expressed as concepts, and overloads on concepts should allow for algorithm selection.</p>

<p>Here's an example of how it looks like in gcc, with -fconcepts enabled:</p>

<pre><code>#include &lt;iostream&gt;
#include &lt;iterator&gt;
#include &lt;vector&gt;
#include &lt;list&gt;

template &lt;typename T&gt;
concept bool RandomAccessIterator = requires (T a, T b, std::size_t n) {
    {a - b} -&gt; std::size_t;
    {a &lt; b} -&gt; bool;
    {a[n] } -&gt; typename std::iterator_traits&lt;T&gt;::value_type&amp;;
    // etc.
};

template &lt;typename Iterator&gt; // unconstrained template argument
bool is_long(Iterator, Iterator) {
    std::cout &lt;&lt; "Not a random access Iterator, couldn't compute distance!\n";
    return false;
}

template &lt;RandomAccessIterator Iterator&gt; // Iterator must satisfy the concept
bool is_long(Iterator f, Iterator l) {
    std::cout &lt;&lt; "computing distance...\n";
    return std::distance(f, l) &lt; 10 ? false : true;
}

int main() {
    std::vector&lt;int&gt; vec(20, 3);
    std::list&lt;int&gt; lst(18,5);
    std::cout &lt;&lt; std::boolalpha &lt;&lt; is_long(vec.begin(), vec.end()) &lt;&lt; std::endl;
    std::cout &lt;&lt; is_long(lst.begin(), lst.end());
}
</code></pre>

<h2>You can be more expressive</h2>

<p>I needed time to understand why <code>is_weak_ordering_v</code> is a condition to use <code>std::sort</code>, until I got that it truly means that the elements are totally ordered (<code>strong_ordering</code> is convertible to <code>weak_ordering</code>). It's the kind of little things that affect readability; <code>is_totally_ordered</code> would have been better in my opinion.</p>

<p>You can also be more expressive by using standard algorithms. For instance, </p>

<pre><code>            // ...
            auto current_min = mark;
            for (auto it = mark; it != last; ++it) {
                if (cmp(*it, *current_min) &lt; 0) {
                    current_min = it;
                }
            }
</code></pre>

<p>can be expressed as:</p>

<pre><code>auto current_min = std::min_element(mark, last, [&amp;cmp](const auto&amp; a, const auto&amp; b) {
    return cmp(a, b) &lt; 0;
});
</code></pre>

<h2>Can you really make topological sort standard?</h2>

<p>I'm skeptical. It means you have to rely on iterators as an abstraction over the set of elements and that, in turn, means: either that the edges are apparent in the elements lay-out (i.e: the range between iterators is already topologically sorted), or that the dependencies are hidden inside the elements, which seems really sub-optimal to me. </p>
    </div>