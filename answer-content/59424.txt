<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>General remarks</h3>

<p>The first line should be <code>#!/bin/bash</code>.</p>

<p>Don't use <code>`cmd`</code> style command substitution, it's deprecated. Use <code>$(cmd)</code> instead, it's better.</p>

<p>Tests like <code>[ "$var" = "$other" ]</code> are also deprecated. Use <code>[[ $var = $other ]]</code> instead. As you can see in this example, you can omit the double-quotes in this modern version.</p>

<p>The <a href="http://www.shellcheck.net/" rel="noreferrer">http://www.shellcheck.net/</a> site is great for checking your code for common mistakes.</p>

<h3>If there's <code>awk</code> in the pipeline, use it well</h3>

<p>When you have a pipeline like this:</p>

<blockquote>
<pre><code>head "$filename".lmps | grep atoms | awk -F' ' '{print $1}' &gt; "$filename".xyz
</code></pre>
</blockquote>

<p>That is, there is an <code>awk</code> in the pipeline, along with other operations that <code>awk</code> could do all by itself. This code is equivalent:</p>

<pre><code>awk -F' ' '/atoms/ {print $1} NR == 10 { exit }' "$filename".lmps &gt; "$filename".xyz
</code></pre>

<p>This is better, because instead of 3 processes (head + grep + awk), you've managed to do everything in just one process.</p>

<p>Note: some of your other pipelines with <code>awk</code> are not well-suited for this, for example:</p>

<blockquote>
<pre><code>awk '/Atoms/,/Bonds/' "$filename".lmps | head -n -2 | tail -n +3 &gt; coordinates.tmp
</code></pre>
</blockquote>

<p>This is different from the first case, because there's no easy way to do with <code>awk</code> the equivalent of <code>head -n -2</code>. Also, moving the <code>tail -n +3</code> logic inside the <code>awk</code> would be possible, but in this example too complicated, so it's ok to leave this statement as it is. It's only executed once per run, so using 3 processes instead of 2 is not a big problem.</p>

<h3>Reading multiple variables from a line</h3>

<p>You can simplify this:</p>

<blockquote>
<pre><code>while read line_masses
do
        mass=`echo $line_masses | awk -F' ' '{print $2}'`
        tag=`echo $line_masses | awk -F' ' '{print $1}'`
        # ...
</code></pre>
</blockquote>

<p>by writing like this:</p>

<pre><code>while read tag mass
do
        # ...
</code></pre>

<p>This is much better, as you just got rid of 2 extra processes per iteration.</p>

<p>You can do similarly for the outer loop as well:</p>

<pre><code>while read f1 f2 atag f4 f5 f6 f7
</code></pre>

<p>This will simplify your <code>if</code> statments in the <code>case $mass in</code>, like this:</p>

<pre><code>12.011150)
if [[ $tag = $atag ]]; then
    echo -e "C\t$f5\t$f6\t$f7" &gt;&gt; "$filename".xyz
fi
;;

1.007970)
if [[ $tag = $atag ]]; then
    echo -e "H\t$f5\t$f6\t$f7" &gt;&gt; "$filename".xyz
fi
;;
</code></pre>

<h3>Calculate once, save in variable to reuse</h3>

<p>Be careful with code like this:</p>

<blockquote>
<pre><code>while read line_atoms
do
    while read line_masses
    do
        if [ "$tag" == `echo $line_atoms | awk -F' ' '{print $3}'` ]; then
            echo -e "C\t`echo $line_atoms | awk -F' ' '{print $5,"\t",$6,"\t",$7}'`"
</code></pre>
</blockquote>

<p>A big problem here is repeated evaluation of those <code>echo $line_atoms | awk</code> commands for each mass line in the input, when it would have been more efficient to calculate these before starting the inner loop.</p>

<h3>Reduce nesting</h3>

<p>The main part of the script is wrapped inside this large <code>if</code> block:</p>

<blockquote>
<pre><code>if [ -r "$filename".lmps ]; then
    # do the main work
fi
</code></pre>
</blockquote>

<p>It would be better to reverse this logic, like this:</p>

<pre><code>if [ ! -r "$filename".lmps ]; then
    echo "Error:"$filename".lmps doesn't exits"
    exit 1
fi

# do the main work
</code></pre>

<p>Related to this, it's a good practice to <code>exit 1</code> to indicate an error to the caller.</p>

<p>Finally, you did some cleanup at the end of the script: </p>

<blockquote>
<pre><code># Gets rid of temporary files
rm *.tmp
</code></pre>
</blockquote>

<p>However, this is pointless if the input file did not exist. One more reason to exit early, so there's nothing to clean up.</p>
    </div>