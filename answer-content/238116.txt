<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>This program lists all palindrome days according to MM.DD.YYYY.</h2>

<p>The code makes all the valid month and day combinations (366 in all).<br>
It uses 4 pre-sorted lookup tables (embedded for speed) to obtain a chronological list.</p>

<p>In the MM.DD.YYYY format the most significant part of the year YYYY reflects in the day DD. This will be used for the outer loop.<br>
The outer loop runs through the T31 list so as to process all the possible day numbers.  </p>

<p>In the MM.DD.YYYY format the least significant part of the year YYYY reflects in the month MM. This will be used for the inner loop. However the number of iterations will vary depending on the day value being greater (a), equal (b) or smaller (c) than 30:</p>

<p>(a).The inner loop runs through the T7 list when the outer loop processes the day number 31. Stored as '31'.<br>
(b).The inner loop runs through the T11 list when the outer loop processes the day number 30. Stored as '30'.<br>
(c).The inner loop runs through the T12 list for every other day number that the outer loop processes.</p>

<p>The T31 list is an ordered list of the 2-characters ASCII representation of the numbers in the range [1,31].<br>
The T12 list is an ordered list of the 2-characters ASCII representation of the numbers in the set {1,2,3,4,5,6,7,8,9,10,11,12}. Months that have 29+ days. (For the purpose of this program February has 29 days.)<br>
The T11 list is an ordered list of the 2-characters ASCII representation of the numbers in the set {1,3,4,5,6,7,8,9,10,11,12}. Months that have 30+ days.<br>
The T7 list is an ordered list of the 2-characters ASCII representation of the numbers in the set {1,3,5,7,8,10,12}. Months that have 31 days.</p>

<pre><code>        2-chars    List    List
Number   ASCII     Entry   Order
---------------------------------
   1  -&gt;  '01' -&gt;  3130h    4th
   2  -&gt;  '02' -&gt;  3230h    8th
   3  -&gt;  '03' -&gt;  3330h   11th

  10  -&gt;  '10' -&gt;  3031h    1st
  11  -&gt;  '11' -&gt;  3131h    5th
  12  -&gt;  '12' -&gt;  3231h    9th

  20  -&gt;  '20' -&gt;  3032h    2nd
  21  -&gt;  '21' -&gt;  3132h    6th
  22  -&gt;  '22' -&gt;  3232h   10th

  30  -&gt;  '30' -&gt;  3033h    3rd
  31  -&gt;  '31' -&gt;  3133h    7th
</code></pre>

<p>The chronological ordering of the final result, which demands digits reversal, comes naturally from sorting these <strong>text-based</strong> tables.</p>

<pre><code>  mov   si, T31
  lodsw
Outer:
  push  si
  mov   si, T7
  cmp   ax, "31"
  je    @f
  mov   si, T11
  cmp   ax, "30"
  je    @f
  mov   si, T12
@@:
  mov   [String+3], ax  ;Day
  mov   [String+6], ah  ;Century
  mov   [String+7], al
  lodsw
Inner:
  mov   [String], ax    ;Month
  mov   [String+8], ah  ;Year
  mov   [String+9], al
  mov   dx, String
  mov   ah, 09h         ;Print string
  int   21h
  lodsw
  test  ax, ax
  jnz   Inner
  pop   si
  lodsw
  test  ax, ax
  jnz   Outer

  mov   ax, 4C00h       ;Exit to DOS
  int   21h

  ALIGN 2
T7:
  db '10011203050708'
  dw 0
T11:
  db '1001111203040506070809'
  dw 0
T12:
  db '100111021203040506070809'
  dw 0
T31:
  db '10203001112131021222031323041424051525061626071727081828091929'
  dw 0
String:
  db '..........',13,10,'$'
</code></pre>
    </div>