<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>In all, this is pretty well structured code and I had no problem reading and understanding it.  Whenever another programmer can read and understand your code, it's a good sign that you're on the right track.  So what's left is mostly small points that might improve your code.  Here's what I noticed in no particular order.</p>

<h2>Use the appropriate <code>#include</code>s</h2>

<p>This code uses <code>std::swap</code> which is actually defined in <code>&lt;algorithm&gt;</code> up to C++11, but <code>&lt;utility&gt;</code> in more recent versions of the standard.  You've included <code>&lt;stdlib.h&gt;</code> but in a C++ program that should actually be <code>&lt;cstdlib&gt;</code> which puts the various declarations into the <code>std::</code> namespace rather than in the global namespace.</p>

<h2>Use the right forms of <code>const</code></h2>

<p>The <code>LinkedList</code> class contains a <code>getSize()</code> function.  Right now that's declared as </p>

<pre><code>const int getSize()    // const will be ignored for this return type
</code></pre>

<p>but I think what you really meant was this:</p>

<pre><code>int getSize() const     // this call does not alter the underlying object
</code></pre>

<h2>Don't use variables that are not in scope</h2>

<p>The two <code>move</code> operators of the <code>LinkedList</code> class both refer to a member data pointer named <code>first</code> but no such variable is actually declared.  The three lines in those two functions that refer to <code>first</code> should simply be deleted.</p>

<h2>Think about temporary object usage</h2>

<p>The <code>LinkedList</code> class includes a number of member functions in which <code>remove(begin())</code> is called.  However, a close look shows that <code>begin()</code> returns a temporary of type <code>iterator</code>.  However, the <code>remove()</code> function takes a non-const <em>reference</em> to an <code>iterator</code> and so we have a problem.  One solution is to change <code>remove</code> to use move semantics.</p>

<p>Another problem is easily shown when using this common C++11 idiom to print all of the data members of the linked list:</p>

<pre><code>for (const auto &amp;val : mylist)
    std::cout &lt;&lt; val &lt;&lt; '\n';
</code></pre>

<p>The intent here is to print the values of all of the linked list values without modifying them (hence <code>const</code>) and without copying them (hence <code>&amp;</code>).  Unfortunately this won't work with the current version of the code.  The problem is once again the use of temporary values.  In particular, this effectively calls this operator:</p>

<pre><code>const int&amp; operator*() const { return p-&gt;data; }
</code></pre>

<p>But <code>p-&gt;data</code> isn't necessarily an <code>int</code> so the way to fix this is:</p>

<pre><code>typename TNode::value_type&amp; operator*() const { return p-&gt;data; }
</code></pre>

<h2>Write member initializers in declaration order</h2>

<p>The <code>Node</code> class has this constructor</p>

<pre><code>Node(const T &amp;data) : data(data), next(nullptr) {}
</code></pre>

<p>That looks fine, but in fact, <code>next</code> will be initialized <em>before</em> <code>data</code> because members are always initialized in <em>declaration</em> order and <code>next</code> is declared before <code>data</code> in this class. To avoid misleading another programmer, you should swap the order of those such that it says instead:</p>

<pre><code>Node(const T &amp;data) : next(nullptr), data(data) {}
</code></pre>

<p>This way the initialization actually proceeds from left to right as one might expect at first glance.</p>

<h2>Iterator increment operators should return a reference</h2>

<p>The code has two increment operators, a preincrement and a postincrement:</p>

<pre><code>void operator++() { p = p-&gt;next; }
void operator++(int) { p = p-&gt;next; }
</code></pre>

<p>However, consider the following use:</p>

<pre><code>for (auto it = ll.begin(); it != ll.end(); )
    std::cout &lt;&lt; *it++ &lt;&lt; '\n';
</code></pre>

<p>This will fail because <code>it++</code> returns <code>void</code> instead of a reference to a <code>LinkedListIterator</code>.  The preincrement is easy to fix:</p>

<pre><code>LinkedListIterator&amp; operator++() { p = p-&gt;next; return *this; }
</code></pre>

<p>The postincrement cannot be the same thing, though, because it is required to return the value <em>before</em> the increment.  In other words, if <code>int i = 5;</code> we would expect <code>std::cout &lt;&lt; ++i &lt;&lt; '\n';</code> to print "6" but <code>std::cout &lt;&lt; i++ &lt;&lt; '\n';</code> should print "5".  So to fix the postincrement we do this:</p>

<pre><code>LinkedListIterator operator++(int) { LinkedListIterator it(*this); p = p-&gt;next; return it; }
</code></pre>

<p>Note that this returns an actual <code>LinkedListIterator</code> <em>object</em> and not an <em>object reference</em> as with the preincrement operator.</p>

<h2>Consider making the iterators more general purpose</h2>

<p>As it stands, an attempt to sort an instance of this <code>LinkedList</code> using <code>std::sort</code> will fail:</p>

<pre><code>std::sort(ll.begin(), ll.end());
</code></pre>

<p>The problem is that <code>std::sort</code> expects to be able to check iterator traits (such as <a href="http://www.cplusplus.com/reference/iterator/RandomAccessIterator/" rel="noreferrer"><code>random_access_iterator_tag</code></a>) to tell the Standard Template Library (STL) which iterators can support which algorithms.</p>

<h2>Use <code>cbegin</code> and <code>cend</code></h2>

<p>The STL uses <code>cbegin</code> and <code>cend</code> as names for the constant versions of the iterator members.  This is convenient because it allows usage such as this:</p>

<pre><code>for (auto it = ll.cbegin(); it != ll.cend(); ++it)
    // do something with each member
</code></pre>

<p>This code can easily be modified to conform to this by simply renaming the two functions.</p>

<h2>Fix your copy constructors</h2>

<p>This code will cause a seg fault:</p>

<pre><code>#include &lt;iostream&gt;
int main()
{
    LinkedList&lt;std::string&gt; ll;
    ll.add("one");
    LinkedList&lt;std::string&gt; l2 = ll;
    l2.add("two");
    std::cout &lt;&lt; "The copy\n";
    for (auto it = l2.begin(); it != l2.end(); ++it)
        std::cout &lt;&lt; *it &lt;&lt; '\n';
    std::cout &lt;&lt; "The original\n";
    for (auto it = ll.begin(); it != ll.end(); ++it)
        std::cout &lt;&lt; *it &lt;&lt; '\n';
}
</code></pre>

<p>The problem is in the copy constructor:</p>

<pre><code>LinkedList(const LinkedList&amp; other)
{
    init();  // head is created and points to tail
    const_iterator i = other.begin();
    while (i != other.end())
    {
        add(*i);   // head now points to last added node
        i++;
    }

    head.reset(other.head.get());  // head now points to other's first node!
    tail.reset(other.tail.get());
}
</code></pre>

<p>Clearly those last two lines are not helpful, and we can also clean up the rest:</p>

<pre><code>LinkedList(const LinkedList&amp; other)
{
    init();  
    for (auto i = other.cbegin(); i != other.cend(); ++i)
        add(*i); 
}
</code></pre>

<p>Unfortunately, the move constructor has a similar problem, but I'll leave it to you to fix.  Generally speaking, you may want to instrument your code and make sure that you have exercised all member functions, ideally with a few different kinds of data (I tend to use <code>std::complex</code> and <code>std::string</code> as convenient and complete classes for testing container templates).</p>
    </div>