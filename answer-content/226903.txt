<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Danger!</p>

<blockquote>
<pre><code>           while (isdigit(str[ESC_CHAR_POS + num_digits])) {
</code></pre>
</blockquote>

<p>Promoting <code>char</code> to <code>int</code> (as argument to <code>isidigt()</code>) can sign-extend it.  We have to launder the argument through <code>unsigned char</code> on the way:</p>

<pre><code>            while (isdigit((unsigned char)(str[ESC_CHAR_POS + num_digits]))) {
</code></pre>

<p>We can make this a bit more readable with a function:</p>

<pre><code>static bool char_isdigit(char c) { return isdigit((unsigned char)c); }
</code></pre>

<hr>

<p>Several functions ought to have <code>static</code> linkage: <code>print_args()</code>, <code>shift_left_one_char()</code> and <code>escape()</code>.</p>

<hr>

<p><code>escape()</code> repeatedly calls <code>shift_left_one_char()</code> to modify the string in place.  This is very inefficient with long arguments, as we're repeatedly accessing the rightmost part of the string (and not even using <code>memmove()</code> for this, though a good compiler <em>might</em> spot the pattern).</p>

<p>A much more efficient strategy is to treat the arguments as read-only strings - print the literal text directly, and output the escapes as they are interpreted.  To get different escape-character behaviours, we would pass a function pointer to the interpreter.</p>

<hr>

<p>When processing <code>\c</code> escapes, there's no need to continue reading the rest of the input string - we can return immediately after terminating the output.</p>

<hr>

<p>When reading octal escapes, we can make the <code>num_digits</code> test part of the loop condition instead of using <code>break</code>, and we can avoid the inner <code>switch</code> by using C's guarantee that the digits <code>0</code>..<code>9</code> must have consecutive character values:</p>

<pre><code>    while (isdigit(str[ESC_CHAR_POS + num_digits]) &amp;&amp; num_digits++ &lt;= MAX_OCTAL) {
        octal *= 8;
        octal += str[ESC_CHAR_POS + num_digits] - '0';
    }
</code></pre>

<hr>

<p>When we read an octal number zero, we shouldn't truncate the string at that point.  We should output a literal <code>NUL</code> character and continue.</p>

<hr>

<p>We could change the return value from <code>echo()</code> and <code>echo_n()</code> to be simply <code>EXIT_SUCCESS</code> or <code>EXIT_FAILURE</code>.  That would simplify the frontend programs - they can simply</p>

<pre><code>return echo_n(actual_argc, args);
</code></pre>

<p>instead of</p>

<blockquote>
<pre><code>int err;
err = echo_n(actual_argc, args);
if (err &lt; 0) return EXIT_FAILURE;
return 0;
</code></pre>
</blockquote>
    </div>