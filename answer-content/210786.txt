<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Review</h1>
<p>There was a slight bug in your code. The last two arguments for <code>prune</code> were in the wrong order.</p>
<p>You have a lot of duplicated code. Good code is DRY (Don't Repeat Yourself)</p>
<p>The code is clean and style is consistent.</p>
<h2>Some points</h2>
<ul>
<li><p>I can not see the point of arguments as part of the singleton pattern. Not that there's is anything wrong with it, it just seems to add code for no benefit.</p>
</li>
<li><p>Default parameters should be set at the bottom of the call stack (the function where the arguments are used). This means that you don't need to repeat the defaults each time you pass on arguments and lets you use a shorter syntax.</p>
</li>
<li><p>You can reduce the source size by moving the three truncate functions into the returned singleton. No need to type their names twice.</p>
</li>
<li><p>Naming is somewhat poor,</p>
<ul>
<li>Don't name variables by their type. <code>int</code> ??? I assume you mean its an integer, but that gives no information as to what it does. Maybe <code>count</code>. Don't name variables by their type, that is inferred.</li>
<li><code>num</code> ??? LOL again, you are naming for what they are. Name for what the represent. Maybe <code>count</code>.</li>
<li><code>value</code> Is string or string like, but <code>value</code> implies a quantitative like property. A clearer name could be <code>str</code> or <code>string</code>.</li>
<li><code>truncate</code> truncates but internally you <code>prune</code> Be consistent when naming different parts of your code. <code>prune</code> may be better as <code>truncate</code>.</li>
</ul>
</li>
</ul>
<h2>Design</h2>
<p>You are mixing  function roles. Eg <code>truncate.words</code> calls <code>prune</code> and then appends <code>end</code>. Adding <code>end</code> is better done in <code>prune</code>. When you find yourself repeating code ask yourself why? Am I mixing roles?</p>
<p>Singletons provide great encapsulation, and I think are one of the best ways to maintain a trusted state. However that trust is only as strong as the weakest link. You can add one more level of encapsulation by freezing the singleton you return using <code>Object.freeze</code>, it also gives a small increase in performance.</p>
<h2>Rewrite</h2>
<p>Less code means less room for bugs. This is part of the DRY philosophy. The aim of the rewrite is to reduce repeated source code.</p>
<p>The first version is not as DRY as it could be (the repeated <code>(...args) =&gt; truncate(".", ...args)</code>) but there is a point where striving to DRY out code makes it more obscure.</p>
<p>The first example is preferable, the second example is just to demonstrate how code can become less clears as it is compressed.</p>
<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>const truncate = (() =&gt; {
  const truncate = (at, str = "", count = 1, end = "\u2026") =&gt;
    (at === "" ? str.substring(0, count) : str.split(at).splice(0, count).join(at)) + end;
  return Object.freeze({
    sentences: (...args) =&gt; truncate(".", ...args),
    words: (...args) =&gt; truncate(" ", ...args),
    characters: (...args) =&gt; truncate("", ...args),
  });
})();



const l=d=&gt;Log.appendChild(Object.assign(document.createElement("div"),{textContent: d}));
l(truncate.sentences("This is a sentence. There are many like it", 1, "."))
l(truncate.words("These are words but you won't see what's after this  foo", 10))
l(truncate.characters("This won't exceed 31 characters so ", 31, "!"))</code></pre>
<pre class="snippet-code-html lang-html prettyprint-override"><code>&lt;code id="Log"&gt;&lt;/code&gt;</code></pre>
</div>
</div>

<p>This example is on the border of too DRY</p>
<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>const truncate = (() =&gt; {
  const API = {}, types = [["sentences", "."], ["words", " "], ["characters", ""]];
  const trunc = (at, str = "", count = 1, end = "\u2026") =&gt;
    (at === "" ? str.substring(0, count) : str.split(at).splice(0, count).join(at)) + end;
  types.forEach(type =&gt; API[type[0]] = (...args) =&gt; trunc(type[1], ...args));
  return Object.freeze(API);
})();


const l=d=&gt;Log.appendChild(Object.assign(document.createElement("div"),{textContent: d}));
l(truncate.sentences("This is a sentence. There are many like it", 1, "."))
l(truncate.words("These are words but you won't see what's after this  foo", 10))
l(truncate.characters("This won't exceed 31 characters so ", 31, "!"))</code></pre>
<pre class="snippet-code-html lang-html prettyprint-override"><code>&lt;code id="Log"&gt;&lt;/code&gt;</code></pre>
</div>
</div>

    </div>