<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1><code>constexpr</code> is your friend</h1>
<p>You may feel like it's cheating, but C++ allows you to pre-compute the answers really easily with the <code>constexpr</code> keyword. A <code>constexpr</code> value must be known at compile-time, and a <code>constexpr</code> function, given a <code>constexpr</code> argument, will be executed at compile-time. It means that you can easily compute and store the 50 first terms of the fibonacci progression -and of the iccanobif progression for that matter- at compile-time. And you can of course calculate how many divisors they have. The beauty of it is that you don't need the most efficient algorithms: since all the work is done once and for all during compilation, being more readable and maintainable could very well be the right choice.</p>
<p>Here's a quickly-written <code>constexpr</code> answer to your problem: <a href="https://wandbox.org/permlink/qAtXS15Ir9c4vYgG" rel="nofollow noreferrer">https://wandbox.org/permlink/qAtXS15Ir9c4vYgG</a></p>
<h1>avoid duplicating code</h1>
<p>Copy-and-paste is an <em>anti-pattern</em> because it is hard to maintain: if you find an improvement in your <code>fibonacci</code> function, you'll need to replicate it in the <code>iccanobif</code> function; at some point, you'll forget to copy, or to modify your copy. That's why you should try to factorize your code. In this case, both functions share most of their code; the only thing <code>iccanobif</code> does in addition is to reverse the previous terms. So you can rewrite both functions into one that decides whether to reverse the previous terms according to a function parameter.</p>
    </div>