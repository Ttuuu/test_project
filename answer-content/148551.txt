<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>I have used too many if-else if statements</p>
</blockquote>

<p>I don't think so. Your code isn't deeply nested, and the if-else that exist mostly exist for a good reason. In some cases you could return directly instead of checking and returning true, eg this:</p>

<pre><code>if($data==""|| empty($data) || !isset($data) || $data==-1) {
    return true;
}
</code></pre>

<p>could be this:</p>

<pre><code>return $data==""|| empty($data) || !isset($data) || $data==-1;
</code></pre>

<p>which also has the benefit of explicitely returning false.</p>

<p><strong>Validation Functions</strong></p>

<p>Functions like <code>sanitize</code> and <code>basicSanitize</code> do not make sense. For someone using them it is completely unclear what they sanitize and when they should be used. </p>

<p>In this case, <code>htmlspecialchars</code> should be used on output in most situations. A name like <code>encodeForHTMLContext</code> would be more fitting, but it doesn't really belong in a validator but instead in an encoding class.</p>

<p><strong>Structure</strong></p>

<p>A basic validator class should only contain basic validator methods. If you add specific validator methods, the class will grow very quickly and be difficult to manage. </p>

<p>Those specific validation methods should be in the own validator. For example a <code>PersonValidator</code> may contain checks for age and sex.</p>

<p>A generic validator should have funcions that can be used by multiple specific validators, such as length check, alphanum check, empty check, and so on. </p>

<p><strong>Comments</strong></p>

<p>I would suggest PHPDoc style comments instead of your inline comments.</p>

<p><strong>Database interaction</strong></p>

<p>First, a database handler isn't a <code>query</code>, the variable name should be changed.</p>

<p>Also, you should think about injecting the handler to make your code more flexible. Personally, I would hand it over to the specific methods, there is no need for a field.</p>

<p>But I'm not too happy with a validator performing database interactions in general. Database queries should be located in the specific models or data access objects, so that all the database queries are in the same place (instead of all over the application). You could then pass that object which performs the actual check on to the validator and delegate the check to it, so your validation methods would still all be in the same place.</p>

<p>To give you a general idea, here is some (pseudo)code. Depending on the rest of your application, you may want to change it, but it does help to put all your query code in one place.</p>

<pre><code>class PersonDAO {

    // the database would be either passed via constructor 
    // or directly to the methods below

    public getByID($id) {...}
    // various other person related data methods

    public isUniqueEmail($email) { [perform the query]}
    // alternatively, you may want to use a generic getByEmail function and check the return value
}

class PersonValidator {

    public function isUniqueEmail($personDAO, $email) {
        return $personDAO-&gt;isUniqueEmail($email);
    }
}
</code></pre>
    </div>