<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You are not declaring any of your variables. This will</p>

<ul>
<li>throw errors, if the script is running in strict mode (which it should be - best to always use strict mode, it can turn hard-to-identify bugs into explicit errors that can be fixed)</li>
<li>Or, if you aren't running in strict mode, every undeclared variable will become implicitly global, as well as putting a property on the global object.</li>
</ul>

<p>Always declare variables. In modern Javascript, declare them with <code>const</code> whenever possible, and <code>let</code> when you must reassign them. For example:</p>

<pre><code>const oppDirArray = [1, 0, 3, 2]; // this will never be reassigned
// ...
let money = true; // this may be reassigned later
</code></pre>

<p>Most of your variables are on the top level. Even if they were declared properly, this is a potential code smell - <a href="https://softwareengineering.stackexchange.com/a/388055">variable scope should be as narrow as reasonable</a>, usually. For example, your</p>

<pre><code>speechLine = 0; // used for animations in the middle of a speech
</code></pre>

<p>sounds like it would probably be better if it were scoped only to a part of the code that handles animations or speech. The same thing can be said for most of your variables.</p>

<p>If you <em>don't</em> constrain the scope of your variables, figuring out what all a particular function has access to, <em>should</em> be able to access, and <em>should</em> be able to change given its responsibilities can become a messy headache.</p>

<p>If you're going to declare a variable, make sure to use it later. For example, you do <code>debugText = HUD.findByName('Debug Text');</code>, but then never reference <code>debugText</code> again. If it's really not being used anywhere, might as well just delete it. (If you <em>do</em> keep it, the <code>debugText</code> variable should only be used within its <code>initialize</code> function - if another part of the code needs to be able to see it, call <em>another</em> function within <code>initialize</code> to pass it around, instead of reassigning a global variable.) Same thing for most of the other variables in <code>initialize</code>.</p>

<p>Consider using a linter like <a href="https://eslint.org/" rel="nofollow noreferrer">eslint</a> to automatically prompt you to correct many of these potential mistakes.</p>

<p>In <code>Database.prototype.update</code>, instead of repeating <code>HUD.findByName('World Menu').script.worldMenu.changeState</code> multiple times, you can define a function that calls it with the desired argument, and you can save <code>HUD.findByName('World Menu')</code> in another variable:</p>

<pre><code>if (kb.wasPressed(buttonSt) &amp;&amp; isPlayerIdle) {
  const worldMenu = HUD.findByName('World Menu');
  const changeState = arg =&gt; worldMenu.script.worldMenu.changeState(arg);
  if(player.enabled) {
    changeState(true);
  } else if(worldMenu.enabled) {
    changeState(false);
  }
}
</code></pre>

<p>Commenting on the point of a variable is fine in general, though usually it'd be preferable for the point of a variable to be clearly indicated by a combination of its <em>scope</em> (hopefully narrow, discussed above) and its <em>name</em>. Don't be afraid to use descriptive names; being able to understand the code at a glance is more important than being concise. If you can't figure out a way to constrain the scope and create a name such that the meaning of the variable is obvious, a comment is not only fine, but it's probably <em>preferable</em> over the alternative. (But, that situation should be uncommon - <em>usually</em> you should be able to precisely name a variable or constrain its scope enough such that its meaning is obvious without a comment)</p>

<p>For example, rather than</p>

<pre><code>hasOldManDemo = false; // has the grandpa showed a demo at least once?
</code></pre>

<p>maybe use</p>

<pre><code>let oldManHasShownPokeballDemo = false;
</code></pre>

<p>Note that using grammar like the above results in logical checks looking extremely readable, eg:</p>

<pre><code>if (oldManHasShownPokeballDemo) {
  // Then the old man has shown the pokeball demo
}
</code></pre>

<p>Ideally, for organizational purposes such a variable would exist in an object indicating the map state that can be looked up when required, rather than being global.</p>

<p>I wouldn't worry much about naming conventions, given that you're already using <code>camelCase</code>, which is pretty common even for completely static variables. Better to get the fundamentals of script organization down than to worry about more opinionated subjects.</p>
    </div>