<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First of all, as per PEP8 I'd recommend you follow the <a href="https://www.python.org/dev/peps/pep-0008/#id34" rel="nofollow noreferrer">naming conventions</a>.</p>

<p>A couple of examples:</p>

<ul>
<li><code>updateStates</code> -&gt; <code>update_states</code> </li>
<li><code>defaultValue</code> -&gt; <code>default_value</code></li>
</ul>

<p>I think you were headed in the right direction, but instead of overriding the <code>__get__</code> and <code>__set__</code> methods, I would just override the <code>__add__</code> method, which would allow you to reuse the updateStates method from the first snippet. The <code>__add__</code> method allows you to override the behavior of the <code>+</code> operator (<a href="https://docs.python.org/3/reference/datamodel.html#object.__add__" rel="nofollow noreferrer">https://docs.python.org/3/reference/datamodel.html#object.<strong>add</strong></a>).</p>

<p>Instead of <code>int(value) != int</code> to check whether <code>value</code> is an integer, you should use <code>isinstance</code>, which is the preferred way to check for the type of the variable in Python3.</p>

<p>Below I wrote a snippet incorporating the suggestions. As you can see, I pretty much reused your code, just added the <code>__add__</code> method and the <code>isinstance</code> check.</p>

<pre><code>class OneDigitNumericValue:
    def __init__(self, default_val=5):
        self.value = default_val

    def __add__(self, other_value):
        if not isinstance(other_value, int):
            raise AttributeError("The value is not an integer.")

        new_value = self.value + other_value

        if not (0 &lt; new_value &lt; 9):
            raise AttributeError("The value is not between 0 and 9.")

        return OneDigitNumericValue(new_value)


    def __repr__(self):
        return str(self.value)

class Person:
    moods = {
        "happy": OneDigitNumericValue(),
        "angry": OneDigitNumericValue(),
        "sad": OneDigitNumericValue()
    }

    def update_states(self, state_updates: {}):
        for mood, val_change in state_updates.items():
            self.moods[mood] += val_change

p = Person()
p.update_states({"happy": 1, "angry": 1})
print(p.moods)
p.update_states({"happy": 10, "angry": 1}) # error
</code></pre>
    </div>