<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>One thing I don't see you address, is that <code>INotifyPropertyChanged.PropertyChanged</code> has the signature of:</p>

<pre><code>public delegate void PropertyChangedEventHandler(object sender, PropertyChangedEventArgs e);
</code></pre>

<p>where <code>object sender</code> should be the owner of the property (typically <code>this</code>). You don't provide the code for <code>ObservableObject</code>, but from your code above it seems that the owner of the property in the <code>BindableProperty</code> property (inheriting <code>ObservableObject</code>) is the <code>BindableProperty</code> and not the owner of the <code>BindableProperty</code>. If my assumptions are correct you break the ownership hierarchy, which may confuse the consumer of the <code>PropertyChanged</code> event, because it doesn't have access to the original source of the event.</p>

<hr>

<blockquote>
  <p><code>if (!EqualityComparer&lt;TValue&gt;.Default.Equals(m_value, value))</code></p>
</blockquote>

<p>Maybe you should provide a constructor that takes a custom <code>EqualityComparer&lt;T&gt;</code> (or <code>IEnqualityComparer&lt;T&gt;</code>as argument. The above seems a little rigid. </p>

<hr>

<blockquote>
  <p>Is it because this somewhat pollutes the view model's interface, with
  IBindableProperty instead of just TValue?</p>
</blockquote>

<p>IMO, yes. You pollute your code with a new layer of complexity and obfuscate a quite simple and well established workflow, just because it's irritating to write the same code again and again.</p>

<p>If you are using Visual Studio, you have the opportunity to write and use <a href="https://docs.microsoft.com/en-us/visualstudio/ide/code-snippets?view=vs-2019" rel="nofollow noreferrer">code snippets</a> to make your coding life easier:</p>

<p>The below creates a property that calls the <code>PropertyChanged</code> event:</p>

<pre><code>    &lt;?xml version="1.0" encoding="utf-8" ?&gt;
&lt;CodeSnippets  xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet"&gt;
    &lt;CodeSnippet Format="1.0.0"&gt;
        &lt;Header&gt;
            &lt;Title&gt;propnotify&lt;/Title&gt;
            &lt;Shortcut&gt;propnotify&lt;/Shortcut&gt;
            &lt;Description&gt;Code snippet for property and backing field in a property changed class&lt;/Description&gt;
            &lt;Author&gt;Henrik Hansen&lt;/Author&gt;
            &lt;SnippetTypes&gt;
                &lt;SnippetType&gt;Expansion&lt;/SnippetType&gt;
            &lt;/SnippetTypes&gt;
        &lt;/Header&gt;
        &lt;Snippet&gt;
            &lt;Declarations&gt;
                &lt;Literal&gt;
                    &lt;ID&gt;type&lt;/ID&gt;
                    &lt;ToolTip&gt;Property type&lt;/ToolTip&gt;
                    &lt;Default&gt;string&lt;/Default&gt;
                &lt;/Literal&gt;
                &lt;Literal&gt;
                    &lt;ID&gt;property&lt;/ID&gt;
                    &lt;ToolTip&gt;Property name&lt;/ToolTip&gt;
                    &lt;Default&gt;MyProperty&lt;/Default&gt;
                &lt;/Literal&gt;
                &lt;Literal&gt;
                    &lt;ID&gt;field&lt;/ID&gt;
                    &lt;ToolTip&gt;The variable backing this property&lt;/ToolTip&gt;
                    &lt;Default&gt;myVar&lt;/Default&gt;
                &lt;/Literal&gt;
            &lt;/Declarations&gt;
            &lt;Code Language="csharp"&gt;&lt;![CDATA[private $type$ m_$field$;
    public $type$ $property$
    {
        get { return m_$field$;}
        set 
    { 
      m_$field$ = value;
      OnPropertyChanged(nameof($property$));
    }
    }
    $end$]]&gt;
            &lt;/Code&gt;
        &lt;/Snippet&gt;
    &lt;/CodeSnippet&gt;
&lt;/CodeSnippets&gt;
</code></pre>

<p>Write "propnotify" in the editor and press TAB and then modify the yellow parts that are likely to change by tabbing between them. You may need to change some pieces to accommodate your style of naming etc. </p>
    </div>