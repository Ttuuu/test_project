<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Ok, you asked for it, so let's see what we can find.</p>

<ol>
<li>There's seriously no reason for your default-constructor or move-constructor to ever throw an exception, as they don't actually <em>need</em> to aquire any resources (<code>buffer != nullptr</code> is already not an invariant anyway).<br>
Actually, a move-constructor which can throw is nigh useless.<br>
Thus, <a href="http://en.cppreference.com/w/cpp/container/vector/vector" rel="noreferrer">in C++1z they will be marked <code>noexcept</code></a>, if neccessary dependent on allocator default-constructor.</li>
<li><p>I would change <code>makeSpaceAvailable</code> in two ways:</p>

<ul>
<li>Make it accept the new capacity, so one can pre-reserve as much as needed.</li>
<li>Split out the part actually doing the hard work of resizing, for reuse and so the rest can be easily inlined.</li>
</ul></li>
<li>For <code>validateIndex</code>, I would also split out the error-case into its own method, so the rest is more likely to be inlined.</li>
<li>Your copy-constructor depends on the element-type having a trivial default constructor.<br>
Otherwise, treating raw memory as initialized objects would invoke UB.</li>
<li><p>You special-cased move-assignment, so the assignment-operator accepting by value only handles copying. Considering you thus forego the advantage of only having one of them, consider optimizing that one too, by making the copy in the function instead:</p>

<pre><code>V&amp; operator=(V&amp;&amp; value) noexcept; // See question
V&amp; operator=(const V&amp; value) { swap(V(value)); return *this; }
</code></pre></li>
<li><p>The destructor is ... interesting. You are catching exceptions if thrown by the individual destructors or the deallocation-function, and then silently swallow them.<br>
Which is at best harmless (if the element-type's destructor is well-behaved and thus cannot throw, as is the deallocation-function).<br>
At worst, you masked a catastrophic error which will now wipe out much more, so don't do that.<br>
Simply remove all exception-handling there, and let the language call <code>std::terminate</code> due to trying to propagate an exception from a <code>noexcept</code>-function.</p></li>
<li>I suggest you delegate all the hard work from the non-const version of <code>at</code> to the <code>const</code> one, as the const-qualifiers are the only difference.</li>
<li>As you have <code>emplace</code>, there's no sense in re-implementing that functionality for <code>push</code>. Just delegate.</li>
<li>You decided to define the behavor of <code>pop</code> on underflow. That's a valid decision, though it certainly adds some overhead...</li>
<li>There are quite some members which could be <code>noexcept</code>-qualified.</li>
</ol>
    </div>