<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Naming</h1>

<p>The enum <code>Cell</code> defines <code>Empty</code>, <code>Circle</code> and <code>Cross</code>. This values aren't cells in terms of an object, they are more like types.</p>

<p>For example: <em>Empty</em> is not a cell, but a cell can be <em>empty</em></p>

<p>You can rename <code>Cell</code> to <code>CellType</code> to make it more clear.</p>

<h1>Comments</h1>

<p>Comments are a good documentation. You did a great job with the <code>&lt;summary&gt;</code>-tag. But the comments like <code>// Row 1</code>, <code>// Row 2</code>, <code>// Clm 3</code> are not so good..</p>

<p>Robert C. Martin, who wrote the book "Clean Code" and many more, sad</p>

<blockquote>
  <p><a href="https://www.goodreads.com/author/quotes/45372.Robert_C_Martin?page=2" rel="nofollow noreferrer">Donâ€™t Use a Comment When You Can Use a Function or a Variable</a></p>
</blockquote>

<h1>Introduce Methods</h1>

<p>We can wrap the if-statements into methods</p>

<pre class="lang-cs prettyprint-override"><code>bool IsFirstRowComplete(CellType cellType) {
    if (this.cells[0, 0] == cellType &amp;&amp; this.cells[0, 1] == cellType &amp;&amp; this.cells[0, 2] == cellType) {
        return true;
    }
    return false;
}

bool IsSecondRowComplete(CellType cellType) {
    if (this.cells[1, 0] == cellType &amp;&amp; this.cells[1, 1] == cellType &amp;&amp; this.cells[1, 2] == cellType) {
        return true;
    }
    return false;
}

// ...
</code></pre>

<h2>Make them less complex</h2>

<p>Since these methods return a Boolean we can return the boolean-expression itself</p>

<pre class="lang-cs prettyprint-override"><code>bool IsFirstRowComplete(CellType cellType) {
    return this.cells[0, 0] == cellType
           &amp;&amp; this.cells[0, 1] == cellType
           &amp;&amp; this.cells[0, 2] == cellType
}

bool IsSecondRowComplete(CellType cellType) {
    return this.cells[1, 0] == cellType
           &amp;&amp; this.cells[1, 1] == cellType
           &amp;&amp; this.cells[1, 2] == cellType
}

// ...
</code></pre>

<h2>Remove Duplication</h2>

<p>The new methods <code>IsFirstRowComplete</code> and <code>IsSecondRowComplete</code> looks very similar. We can extract the main logic and wrap it into its own method.</p>

<pre class="lang-cs prettyprint-override"><code>bool IsRowComplete(CellType cellType, int row) {
    return this.cells[row, 0] == cellType
           &amp;&amp; this.cells[row, 1] == cellType
           &amp;&amp; this.cells[row, 2] == cellType
}

// ...
</code></pre>

<p>If you like you can now wrap this method into <code>IsFirstRowComplete</code> and so on</p>

<pre class="lang-cs prettyprint-override"><code>bool IsFirstRowComplete(CellType cellType, int row) {
    return IsRowComplete(cellType, 0);
}

// ...
</code></pre>

<h2>Introduce more Methods</h2>

<p>We could finish here.. But we can make the code more clear if we wrap each check into a method</p>

<pre class="lang-cs prettyprint-override"><code>bool IsARowComplete(CellType cellType) {
    return IsFirstRowComplete(cellType, 0)
           || IsSecondRowComplete(cellType, 1)
           || IsThirdRowComplete(cellType, 2);
}

bool IsAColumnsComplete(CellType cellType) {
  return IsFirstColumnComplete(cellType, 0)
         || IsSecondColumnComplete(cellType, 1)
         || IsThirdColumnComplete(cellType, 2);
}

// ...
</code></pre>

<h1>After the Refactoring</h1>

<pre class="lang-cs prettyprint-override"><code>bool IsGameOver(CellType cellType) {
    return IsARowComplete(cellType)
           || IsAColumnComplete(cellType)
           || IsAHorizontalComplete(cellType)
}
</code></pre>

<h1>Maybe a Bug</h1>

<p>If the method <code>isGameOver</code> gets called with a <code>CellType</code> of type <code>Empty</code> it could return <code>true</code></p>

<p>So maybe you need to check if the <code>cellType</code> is not <code>Empty</code></p>
    </div>