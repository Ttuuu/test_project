<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>Disclaimer: <a href="http://rubberduckvba.com" rel="nofollow noreferrer"><strong>Rubberduck</strong></a> is a free, open-source VBIDE add-in project I manage and cheerlead, that's proudly &amp; actively maintained by members of this community. I have zero personal interests in your clicks, but I do own the project's website, contributed and/or reviewed the content, and I've written the articles on the project's blog - covers all links you'll find in this post (well, except the docs.microsoft.com one).</p>
</blockquote>

<hr>

<p>I like starting at the top:</p>



<blockquote>
<pre><code>Sub GenerateData()
</code></pre>
</blockquote>

<p>The procedure is <a href="http://rubberduckvba.com/Inspections/Details/ImplicitPublicMember" rel="nofollow noreferrer">implicitly Public</a>; in most other languages including VB.NET, a member without an explicit access modifier is <code>Private</code> - regardless of what the language defaults are, using explicit access modifiers everywhere is best practice.</p>

<p>Kudos for avoiding the <code>Sub A()</code> or <code>Sub Macro1()</code> trap and actually using a somewhat meaningful name for the procedure. "Generate data" is a bit vague, but naming a procedure that's well over 200 lines of code is never easy, because such procedures tend to do a lot of things: accurately naming smaller, more specialized procedures is much easier!</p>

<blockquote>
<pre><code>' Add headers data
With wks
    .Range("A1:K1") = Array("Test", "Temp", "Type", "Start", "FileName", "No", "End", _
    "Month", "Smart", "Errors", "ErrorCellAddress")
End With
</code></pre>
</blockquote>

<p>Whenever I encounter a comment like this ("below code does XYZ"), I see a missed opportunity for a procedure named <code>DoXYZ</code>. In this case, something like this:</p>

<pre><code>Private Sub AddColumnHeaders(ByVal sheet As Worksheet)
    sheet.Range("A1:K1") = Array( _
         "Test", "Temp", "Type", "Start", _
         "FileName", "No", "End", "Month", _
         "Smart", "Errors", "ErrorCellAddress")
End Sub
</code></pre>

<p>And just like that we've replaced 5 lines with one, and eliminated a comment that says <em>what</em> (always let <em>the code itself</em> say that, not comments), leaving room for a better comment that says <em>why</em>, if needed:</p>

<pre><code>AddColumnHeaders wks
</code></pre>

<p>But we could go one step further, and take a <code>Workbook</code> parameter instead, and <em>return</em> a new, worksheet with the column headers - and since the only code that needs a <code>Workbook</code> is the code that's creating the worksheet, we eliminate the need for a local <code>Workbook</code> variable:</p>

<pre><code>Dim sheet As Worksheet
Set sheet = CreateOutputSheet(ActiveWorkbook)
</code></pre>

<p>And the <code>CreateOutputSheet</code> function might look like this:</p>

<pre><code>Private Function CreateOutputSheet(ByVal book As Workbook) As Worksheet
    Dim sheet As Worksheet
    Set sheet = book.Worksheets.Add(After:=book.Worksheets(book.Worksheets.Count))
    AddColumnHeaders sheet
    Set CreateOutputSheet = sheet
End Function
</code></pre>

<p>Note that the <code>Type</code> argument is redundant when it's an <code>xlWorksheet</code> that you're adding; <a href="https://docs.microsoft.com/en-us/office/vba/api/excel.sheets.add" rel="nofollow noreferrer">it's the default</a>.</p>

<p>Also note, the crystal-clear distinction between <code>book</code> and <code>sheet</code>; compare to the single-character difference between <code>wks</code> and <code>wkb</code>. Vowels exist, and should be used: don't arbitrarily strip them from identifiers, we're not in 1985 anymore, variables <em>can</em>, and <em>should</em> have meaningful, pronounceable names.</p>

<blockquote>
<pre><code>' Early Binding - Add "Microsoft Scripting Runtime" Reference
    Dim FSO As New Scripting.FileSystemObject
' Set FolderPath
    Dim FolderPath As String
        FolderPath = "c:\Users\Desktop\Tryout\"
' Set Folder FSO
    Dim Folder As Scripting.Folder
        Set Folder = FSO.GetFolder(FolderPath)
</code></pre>
</blockquote>

<p>Note that adding a reference to the <code>Scripting</code> library isn't what makes the <code>FSO</code> early bound: while useful (informs of a dependency) that comment is somewhat misleading - if you declared the <code>FSO</code> with <code>As Object</code>, member calls against it would still be late-bound, even if the library is referenced. See <a href="https://rubberduckvba.wordpress.com/2019/04/28/late-binding/" rel="nofollow noreferrer">late binding</a> for more info.</p>

<p>Of particular note, <em>implicit</em> late binding, like you have here and in every single one of your <code>Range.Find</code> calls:</p>

<blockquote>
<pre><code>Set a = wksData.Columns("A:A").Find("  testtest         : ", LookIn:=xlValues)
</code></pre>
</blockquote>

<p><code>Range.Columns</code> returns a <code>Range</code> (early-bound), but doesn't take any parameters: the <code>("A:A")</code> argument list is going to <code>Range.[_Default]</code>, which returns a <code>Variant</code> - hence, any member call chained to it, can only be resolved at run-time. This means your <code>Range.Find</code> member call isn't validated at compile-time, you wrote it blindfolded without parameter quick-info, and if you made a typo, <code>Option Explicit</code> can't save you from it. <em>That</em> implicit late binding is pretty insiduous, and should be given much more importance and attention than this early-bound declaration.</p>

<p>Keep in mind that <code>Dim</code> statements aren't executable, and <code>As New</code> creates an <a href="http://rubberduckvba.com/Inspections/Details/SelfAssignedDeclaration" rel="nofollow noreferrer">auto-instantiated object</a> that will not behave the way you normally expect objects to behave. This <code>FSO</code> object is live and well for the entire duration of the procedure, and yet it's only used in one single instruction. Consider limiting its lifetime to a bare minimum. All variables should be as tightly scoped as possible, and no object needs to stick around if it's not needed.</p>

<p>Consider:</p>

<pre><code>Dim basePath As String
basePath = Environ$("USERPROFILE") &amp; "\Desktop\Tryout\"

Dim baseFolder As Scripting.Folder
With New Scripting.FileSystemObject
    Set baseFolder = .GetFolder(basePath)
End With
</code></pre>

<p>The indentation, somewhat consistent up to that point (I find the offset assignment vs declaration quite off-putting and rather hard to apply consistently, but that could be just me), starts going south  and feel pretty much random here. This is a definitive sign of indentation gone terribly wrong:</p>

<blockquote>
<pre><code>    End If
    End If
    End If
</code></pre>
</blockquote>

<p>These same-level <code>End If</code> tokens show up in multiple places, and that is a problem: if I quickly glance at the code top-to-bottom, I might miss the <code>For</code> loop buried in a bunch of declarations that really belong elsewhere, and I'll have to work very hard to locate the corresponding <code>Next</code> token, like I just did. Proper and consistent indentation is the solution, and you can use Rubberduck's <a href="http://rubberduckvba.com/indentation" rel="nofollow noreferrer">Smart Indenter</a> port, or any other VBIDE add-in that features an indenter for that.</p>

<p>These variables have a rather strong smell:</p>

<blockquote>
<pre><code>Dim a As Range, b As Range, c As Range, d As Range, e As Range, f As Range, g As Range, h As Range, l As Range
</code></pre>
</blockquote>

<p>Ignoring the fact that they are meaningless single-letter identifiers (and that using lowercase-L as a variable name is outright criminal), the sequence feels like it could just as well be <code>rng1</code>, <code>rng2</code>, <code>rng3</code>, and so on - and <em>that</em> is what's wrong with them: these variables are saying "we're all doing the same thing", and indeed, looking at how they're used, they're <em>literally</em> all the same.</p>

<p>Every single one of these blocks:</p>

<blockquote>
<pre><code>    'Find Testtest
    Set a = wksData.Columns("A:A").Find("  testtest         : ", LookIn:=xlValues)
    If Not a Is Nothing Then
        wks.Cells(BlankRow, 1).Value = a.Value
    End If
</code></pre>
</blockquote>

<p>Is identical, save what's being searched, and what column it's being written to: this block should be its own parameterized procedure. Whenever you find yourself selecting a block of code and hitting <kbd>Ctrl</kbd>+<kbd>C</kbd>, stop and think of how you can avoid duplicating code by introducing a small, specialized procedure.</p>

<p>This comment makes no sense:</p>

<blockquote>
<pre><code>    'Format of the data
    Dim BlankRow As Long
    BlankRow = wks.Range("A" &amp; wks.Rows.Count).End(xlUp).Row + 1
</code></pre>
</blockquote>

<p>Working out the row to write in wouldn't be needed if your <code>Range</code> happened to be a <code>ListObject</code> (aka table). With the <code>ListObject</code> API, you would be getting the table to dump the data into:</p>

<pre><code>Dim table As ListObject
Set table = wks.ListObjects("TableName")

Dim newRow As ListRow
Set newRow = table.ListRows.Add
</code></pre>

<p>And done. Now all you need to do is populate the <code>Range</code> of this <code>newRow</code>.</p>

<pre><code>Private Function PopulateIfFound(ByVal source As Range, ByVal value As String, ByVal row As ListRow, ByVal writeToColumn As Long, Optional ByVal writeAddressToNextColumn As Boolean = False) As Boolean
    Dim result As Range
    Set result = source.Find(value, LookIn:=xlValues)
    If Not result Is Nothing Then
        Dim cell As Range
        Set cell = row.Range.Cells(ColumnIndex:=writeToColumn)
        cell.Value = result.Value
        If writeAddressToNextColumn Then
            cell.Offset(ColumnOffset:=1).Value = result.Address
        End If
        PopulateIfFound = True
    End If
End Function
</code></pre>

<p>And now the repetitive searches would look like this:</p>

<pre><code>    Dim source As Range
    Set source = wksData.Range("A:A")

    PopulateIfFound source, "  testtest         : ", newRow, 1
    PopulateIfFound source, "  testflyy         : ", newRow, 2
    PopulateIfFound source, "  testflyy         : ", newRow, 3
    PopulateIfFound source, "  Started at: ", newRow, 4
    If Not PopulateIfFound(source, "SmartABC ", newRow, 9) Then
        PopulateIfFound source, "smarabcd_efg revision", newRow, 9
    End If
    If Not PopulateIfFound(source, "ERROR: ABC", newRow, 10, True) Then
        PopulateIfFound source, "ERROR: EFG", newRow, 10
    End If
</code></pre>

<p>I note that your searches include a dangerous amount of seemingly-arbitrary whitespace; this makes the code extremely frail, because a single missing or additional space is all it takes to make any of these searches fail.</p>

<p>This is interesting:</p>

<blockquote>
<pre><code>    ' Write filename in col E,F,G
    wks.Cells(BlankRow, 5).Value = File.Name
    wks.Cells(BlankRow, 6).Value = File.Name
    wks.Cells(BlankRow, 7).Value = File.Name
</code></pre>
</blockquote>

<p>I can see that it's writing the file name in 3 consecutive columns (<em>what</em>). What I'd like this comment to tell me, is <em>why</em> the file name needs to be in 3 places right next to each others. Strikes me as redundant/superfluous otherwise.</p>

<p>This shouldn't need to happen:</p>

<blockquote>
<pre><code>    ' Trim and tidy up Data

    'Trim Testtest RowA(1)
    wks.Cells(BlankRow, 1).Replace What:="testtest         : ", Replacement:="", LookAt:=xlPart, _
                                   SearchOrder:=xlByRows, MatchCase:=False, SearchFormat:=False, _
                                   ReplaceFormat:=False

    'Trim StartTime RowD(4)
    wks.Cells(BlankRow, 4).Replace What:="  Started at: ", Replacement:="", LookAt:=xlPart, _
                                   SearchOrder:=xlByRows, MatchCase:=False, SearchFormat:=False, _
                                   ReplaceFormat:=False
</code></pre>
</blockquote>

<p>You're the one writing to <code>wks.Cells(BlankRow, n)</code>: you shouldn't need to make another pass to clean up anything after the data was written - just clean it up <em>as you write it</em>. Everything that's happening from here on, up to <code>wkbData.Close False</code>, is reprocessing data that was already written. If your destination were a <code>ListObject</code>, you wouldn't need to worry about number formats, since the formatting would be identical for every row, and automatically carried onto any <code>newRow</code> you add to it, along with the formula for any calculated column.</p>

<p>This is a potential issue:</p>

<blockquote>
<pre><code>Dim StartDate As Long, EndDate As Long

With wks.Cells(BlankRow, 8)
    StartDate = DateSerial(Year(.value), Month(.value), 1)
    EndDate = DateSerial(Year(.value), Month(.value) + 1, 0)
End With
</code></pre>
</blockquote>

<p>Treat dates as <code>Date</code>. They're not strings, and they're not <code>Long</code> integers either. If you <em>really</em> want to use a numeric type for them, then use a <code>Double</code>. But <code>StartDate As AnythingButDate</code> is just wrong: since this is for filtering, a numeric value is more sane than a string, so kudos for that - I'd go with <code>Dim fromDateValue As Double</code> and <code>Dim toDateValue As Double</code>.</p>

<blockquote>
<pre><code>If ActiveSheet.FilterMode Then ActiveSheet.ShowAllData
</code></pre>
</blockquote>

<p>Because <code>ActiveSheet</code> is <code>Object</code>, these member calls are implicitly late-bound. This is bad, first because up to that point we didn't care at all what the <code>ActiveSheet</code> was (except for that part where we assume the opened workbook doesn't already have a <code>"Control"</code> sheet as its one and only worksheet... this may be a bad assumption; such assumptions are typically made explicit with <code>Debug.Assert</code> calls, e.g. <code>Debug.Assert wkbData.Worksheets.Count = 1</code>, and execution stops if the assertion isn't true).</p>

<p>I'd have an explicit reference to a proper <code>Worksheet</code> variable here: the code does not need to care what sheet is active, and shouldn't either.</p>

<p>Don't worry about performance. Worry about redundant and repetitive code. Once your code is all cleaned up, see how it runs. Identify what double-processing is being done, remove it.</p>

<p>As others have mentioned, the single largest bottleneck here, is I/O overhead: opening and closing workbooks is very expensive, and if that's what your code needs to do, then that's the overhead it needs to cope with. Consider implementing a <a href="https://rubberduckvba.wordpress.com/2018/01/12/progress-indicator/" rel="nofollow noreferrer">progress indicator</a> to make the long-running operation more bearable.</p>

<p><em>Maybe</em> replacing the <code>Range.Find</code> calls with some <code>WorksheetFunction.Index</code>/<code>WorksheetFunction.Match</code> combo might be faster, but that depends on what your data really looks like. Besides, the first thing to do is to constraint the search range to the actually meaningful cells in column A, rather than searching across the million-or-so cells in that column.</p>

<p>Toggling <code>Application.Calculation</code> to <code>xlCalculationManual</code> would stop Excel from recalculating dependents whenever you write a cell value; if you don't need to recalculate anything until you're completely done with a file, then that's a good idea - toggling calculation back to <code>xlCalculationAutomatic</code> will trigger a recalc, so no need to explicitly calculate anything.</p>

<p>Toggling <code>Application.EnableEvents</code> to <code>False</code> would stop Excel from raising <code>Workbook</code> and <code>Worksheet</code> events every time you write to a cell; if you have event handlers for worksheet <code>Change</code> events, this is a must. Otherwise, toggling it off can still make Excel work more on executing your VBA code and less on trying to keep the workbook in a consistent state.</p>

<p>Toggling <code>Application.ScreenUpdating</code> to <code>False</code> like you did helps a tiny little bit too, but since you're not constantly activating and selecting things, the effect is marginal.</p>

<p>Note that whenever you toggle this global <code>Application</code> state, you absolutely want to handle any &amp; all run-time errors that might happen while your procedure is running, such as to guarantee that whatever happens, whether it blows up or not, the global <code>Application</code> state is exactly what it was before you ran the procedure.</p>
    </div>