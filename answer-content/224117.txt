<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Neither you .htaccess file or your .php file would be Vulnerable to Xss Attacks as they are both server side scripts which would never be Shown to a user &amp; therefore would not be easily manipulated.</p>

<p>to add a layer of protection for your site against Xss look over the following snippet.  </p>

<p>In the .htaccess file that is in the main root directory of your website add the following module</p>

<pre><code>    &lt;IfModule mod_headers.c&gt;
       # Make sure proxies don't deliver the wrong content
          # Header always set Content-Security-Policy: upgrade-insecure-requests        // This one can be a pain in the A** to set up, which is why I commented it out.
         Header set Strict-Transport-Security "max-age=122112887284; includeSubDomains; preload"
         Header append Vary User-Agent env=!dont-vary
         Header always append X-Frame-Options SAMEORIGIN
         Header set X-XSS-Protection "1; mode=block"       // This is the Xss header you are looking for
         Header set X-Content-Type-Options nosniff
         Header set Access-Control-Allow-Origin "*"
         IndexIgnore *.zip *.css *.js *.pyt    
         Options -MultiViews -Indexes        

    &lt;/IfModule&gt;
    &lt;IfModule mod_security.c&gt;
         SecFilterEngine On
                # ^Turn the filtering engine On or Off
         SecFilterScanPOST On
                # ^Should mod_security inspect POST payloads
         SecFilterSelective "HTTP_USER_AGENT|HTTP_HOST" "^$"
                # ^Require HTTP_USER_AGENT and HTTP_HOST in all requests
         SecFilter "../"
                # ^Prevent path traversal (..) attacks
         SecFilter "&lt;[[:space:]]*script"
                # ^Weaker XSS protection but allows common HTML tags
         SecFilter "&lt;(.|n)+&gt;"
                # ^Prevent XSS atacks (HTML/Javascript injection)
         SecFilter "delete[[:space:]]+from"
         SecFilter "insert[[:space:]]+into"
         SecFilter "select.+from"
         SecFilter "drop[[:space:]]table"
                # ^Very crude filters to prevent SQL injection attacks
         SecFilterSelective ARG_PHPSESSID "!^[0-9a-z]*$"
         SecFilterSelective COOKIE_PHPSESSID "!^[0-9a-z]*$"
                # ^Protecting from XSS attacks through the PHP session cookie
         SecFilterDefaultAction "deny,log,status:500"
                # ^Action to take by default
    &lt;/IfModule&gt;
                # Block access to backup and source files.
                # These files may be left by some text editors and can pose a great security
                # danger when anyone has access to them.

    &lt;FilesMatch "(^#.*#|.(bak|config|dist|fla|inc|ini|log|psd|sh|sql|sw[op])|~)$"&gt;
         Order allow,deny
         Deny from all
         Satisfy All
    &lt;/FilesMatch&gt;
</code></pre>

<p>All Subsequent Folders &amp; directorys will inherit these rules unless otherwise specified.</p>

<p>The code that you have provided looks like it is from the 'www' or 'public_html' directories, Xss headers I believe should be set in the Main root directory to protect the entire web application.</p>

<p>you should also be using PhP PDO(Prepared statements) for any database connections &amp; making sure to sanitize/escape any input fields.
you can Add to this by researching and implementing php built in functions called <code>htmlentities();</code> &amp; <code>pdo_real_escape_string();</code> Note that the
<code>mysql_real_escape_string();</code> function is Now deprecated and should not be used anymore. </p>

<p>Another thing I noticed is according to this article: 
<a href="https://websistent.com/php-auto_prepend_file-and-auto_append_file/" rel="nofollow noreferrer">htAccess-Auto Prepend &amp; Auto Append</a></p>

<p>auto_prepend_file and auto_append_file directives do not work in the .htaccess file.</p>

<p>This is a very thorough article about .htaccess implementations &amp; is well worth a read:
<a href="https://www.viralpatel.net/21-very-useful-htaccess-tips-tricks/" rel="nofollow noreferrer">https://www.viralpatel.net/21-very-useful-htaccess-tips-tricks/</a></p>

<p>I Found 2 Other Sources that helps prevent Xss, or add an extra layer of annoyance to any potential Hacker if combined with the other Methods.</p>

<pre><code>  &lt;meta http-equiv=”window-target” content=”_top” /&gt; &amp;
   &lt;base target="_top"&gt;
</code></pre>

<p>The main use is to prevent a page from appearing inside another framed page:
Usually this means that the Web browser will force the page to go the top frameset.<br>
Although this <a href="https://stackoverflow.com/questions/1521195/does-window-target-meta-tag-work-for-busting-frames">Window-target meta</a> thread on StackOverflow Suggest's That The Top one is No longer supported By Browsers Anymore </p>

<p>They Do provide a Javascript Fallback which is;</p>

<pre><code>if (top != self) {
    top.location.href = self.location.href;
}
</code></pre>

<p>CSRF &amp; CSP would be worth a study also.</p>

<p>You can also use some of these tools online to automatically scan for vulnerabilities::<br>
<a href="https://geekflare.com/online-scan-website-security-vulnerabilities/#Pentest-Tools" rel="nofollow noreferrer">Pen-Test Tools</a><br>
<a href="https://observatory.mozilla.org/analyze" rel="nofollow noreferrer">Mozilla Observatory</a> is Another Very good one:
Hope this helps a little or Helps someone viewing it.</p>
    </div>