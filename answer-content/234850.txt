<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The main thing that's going to get you a speed boost is returning early from the search if there's no word that starts with what you have so far.</p>

<p>One simple way to do this is to keep a <code>HashSet</code> of all the prefixes of words in the dictionary. Or, better yet, a <code>HashMap</code> where the value indicates whether the prefix is actually a word or not.</p>

<pre><code>struct PrefixMap&lt;'a&gt;(HashMap&lt;&amp;'a str, bool&gt;);

impl&lt;'a&gt; PrefixMap&lt;'a&gt; {
    fn new(words: impl IntoIterator&lt;Item = &amp;'a str&gt;) -&gt; Self {
        let mut map = HashMap::new();
        for word in words {
            // note that this gets every prefix except the whole word
            for (ending, _) in word.char_indices() {
                map.entry(&amp;word[..ending]).or_insert(false);
            }
            map.insert(word, true);
        }
        Self(map)
    }

    fn is_word(&amp;self, word: &amp;str) -&gt; bool {
        self.0.get(word).copied().unwrap_or(false)
    }

    fn is_prefix(&amp;self, prefix: &amp;str) -&gt; bool {
        self.0.contains_key(prefix)
    }
}
</code></pre>

<p>Then, in the first part of <code>boggle_solve_help</code>, we can use <code>is_word</code> and <code>is_prefix</code> to determine whether to print the word or return early.</p>

<pre><code>if !dict.is_prefix(&amp;word) {
    return;
}

if word.len() &gt; 3 &amp;&amp; dict.is_word(&amp;word) {
    println!("{}", word);
}
</code></pre>

<p>While this isn't the most efficient thing possible, that simple step makes the program run almost instantly on my computer (less than a second). If you still want to improve more, look up <a href="https://en.wikipedia.org/wiki/Trie" rel="noreferrer">tries</a> for a memory efficient and quick way to do the same thing. Since creating the index of words takes a little while, you might try to cache it between runs using serde or something similar.</p>

<hr>

<p>Now for some more suggestions.</p>

<ol>
<li><p><strong>Derive <code>PartialEq</code>.</strong> Right now you implement <code>PartialEq</code> for <code>Coordinate</code> manually, but the same implementation can be done by adding <code>PartialEq</code> to the derive attribute.</p></li>
<li><p><strong>Use descriptive variable names.</strong> The main offenders are the arguments to <code>move_c</code> and later on <code>c</code> in <code>boggle_solve_help</code>. I know sometimes this is annoying, but even just changing <code>a</code> and <code>b</code> to <code>dy</code> and <code>dx</code> (calculus shorthand for "change in y/x") makes everything clearer. It's probably worth spelling out <code>height</code> and <code>width</code> to make it clear that that's what you mean.</p></li>
<li><p><strong>Don't forget to use <code>cargo fmt</code>.</strong> It's a simple step and will instantly make your code more standardized and easier to read for other Rust programmers.</p></li>
<li><p><strong>Encapsulate the grid into its own type.</strong> Right now, you're using <code>Vec&lt;Vec&lt;char&gt;&gt;</code> directly, which is fine, but means that lots of annoying details are strewn about the functions that use it. The type can still be <code>Vec&lt;Vec&lt;char&gt;&gt;</code> under the surface, but having a method like <code>grid.get(coordinate)</code> rather than <code>grid[coordinate.row as usize][coordinate.col as usize]</code> makes things easier to read and make sense of. As a plus, this will also silence Clippy's complaint about using <code>&amp;Vec&lt;_&gt;</code> instead of <code>&amp;[_]</code>.</p></li>
<li><p><strong>Consider switching to an iterative algorithm.</strong> You won't run into stack overflow here since you have a hard cap on how deep the recursion can go. Still, if you want a slightly faster algorithm, a depth-first search can be memory efficient and avoid the repeated <code>String</code> allocations you currently have (with <code>format!</code>).</p></li>
<li><p><strong>Bonus: don't show duplicate words.</strong> Right now, a word will be duplicated if can be spelled with a different path of letters on the board. For example, "trees" can be written three different ways near the bottom right corner of the board so it gets printed 3 times. It also shows up in a few other places. I might suggest keeping a <code>HashSet</code> of all the words you've found so far to eliminate duplicates.</p></li>
</ol>

<p>Here's the code after applying the early return and the first three of my suggestions. I'll let you figure out the other two.</p>

<pre><code>use std::collections::HashMap;
use std::fs;

const MAX_WORD_LEN: usize = 12;

#[derive(Clone, Debug, Copy, PartialEq)]
struct Coordinate {
    row: i64,
    col: i64,
}

impl Coordinate {
    // Returns a new coordinate if the move is valid. None otherwise.
    fn move_coord(&amp;self, dy: i64, dx: i64, height: i64, width: i64) -&gt; Option&lt;Coordinate&gt; {
        let height_range = 0..height;
        let width_range = 0..width;
        if height_range.contains(&amp;(self.row + dy)) &amp;&amp; width_range.contains(&amp;(self.col + dx)) {
            Some(Coordinate {
                row: self.row + dy,
                col: self.col + dx,
            })
        } else {
            None
        }
    }
}

// Keys consist of all prefixes of words
// Values say whether the prefix is a word
// Since we keep references rather than `String`s,
// the lifetime of the map can't exceed the lifetime of wherever
// the `&amp;str`s come from.
// If you decide to make this more persistent, using `String` rather than `&amp;str`
// might be appropriate.
struct PrefixMap&lt;'a&gt;(HashMap&lt;&amp;'a str, bool&gt;);

impl&lt;'a&gt; PrefixMap&lt;'a&gt; {
    // We can produce this from any iterator of `&amp;str`s.
    fn new(words: impl IntoIterator&lt;Item = &amp;'a str&gt;) -&gt; Self {
        let mut map = HashMap::new();
        for word in words {
            // note that this gets every prefix except the whole word
            for (ending, _) in word.char_indices() {
                map.entry(&amp;word[..ending]).or_insert(false);
            }
            map.insert(word, true);
        }
        Self(map)
    }

    fn is_word(&amp;self, word: &amp;str) -&gt; bool {
        self.0.get(word).copied().unwrap_or(false)
    }

    fn is_prefix(&amp;self, prefix: &amp;str) -&gt; bool {
        self.0.contains_key(prefix)
    }
}

fn boggle_solve(grid: &amp;Vec&lt;Vec&lt;char&gt;&gt;, dict: &amp;PrefixMap) {
    for (i, row) in grid.iter().enumerate() {
        for (j, ch) in row.iter().enumerate() {
            boggle_solve_help(
                grid,
                dict,
                ch.to_string(),
                Coordinate {
                    row: i as i64,
                    col: j as i64,
                },
                vec![Coordinate {
                    row: i as i64,
                    col: j as i64,
                }],
            )
        }
    }
}

fn boggle_solve_help(
    grid: &amp;Vec&lt;Vec&lt;char&gt;&gt;,
    dict: &amp;PrefixMap,
    word: String,
    coord: Coordinate,
    path: Vec&lt;Coordinate&gt;,
) {
    // Base case.
    // No more work if the string is long enough
    if word.len() &gt; MAX_WORD_LEN {
        return;
    }

    if !dict.is_prefix(&amp;word) {
        return;
    }

    if word.len() &gt; 3 &amp;&amp; dict.is_word(&amp;word) {
        println!("{}", word);
    }

    // For every possible direction the path can take, if it is valid, take it.
    for dy in -1..=1 {
        for dx in -1..=1 {
            match coord.move_coord(dy, dx, grid.len() as i64, grid[0].len() as i64) {
                Some(new_coord) if !path.contains(&amp;new_coord) =&gt; {
                    let mut new_path = path.clone();
                    new_path.push(new_coord);
                    let new_word = format!(
                        "{}{}",
                        &amp;word, &amp;grid[new_coord.row as usize][new_coord.col as usize]
                    );

                    boggle_solve_help(grid, dict, new_word, new_coord, new_path);
                }

                Some(_) =&gt; (),

                None =&gt; (),
            }
        }
    }
}

fn main() {
    let contents = fs::read_to_string("words_alpha.txt").unwrap();
    let dict = PrefixMap::new(contents.split_whitespace());

    let grid: Vec&lt;Vec&lt;char&gt;&gt; = vec![
        vec!['c', 's', 't', 'e', 't'],
        vec!['a', 'i', 'r', 'l', 's'],
        vec!['p', 'd', 'a', 'e', 's'],
        vec!['u', 'e', 'c', 's', 'e'],
        vec!['r', 'o', 't', 'r', 'i'],
    ];

    boggle_solve(&amp;grid, &amp;dict)
}
</code></pre>

<p>(<a href="https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=764730b00cd47c11c3a1da367e91e005" rel="noreferrer">playground</a> - but note that <code>words_alpha.txt</code> doesn't exist, so you can't run it)</p>
    </div>