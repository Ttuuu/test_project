<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Amount of boilerplate code</strong></p>

<p>As it is, there are lot of boilerplate that we must provide to set up everything. At a minimum, we need the following code:</p>

<pre><code>&lt;Procedure&gt; SomeProcedure
  On Error GoTo ErrTrap

'Actual Code

ExitProcedure:
    On Error Resume Next
    Exit Function

ErrTrap:
    Select Case Err.number
        &lt;specific Case handlers as needed&gt;
        Case Is &lt;&gt; 0
            Error_Handler.DisplayMessage "SomeProcedure", "SomeModule", Err.number, Err.description
            Resume ExitProcedure
        Case Else
            Resume ExitProcedure
    End Select
End &lt;Procedure&gt;
</code></pre>

<p>Using third party tools like MZ-Tools can help with setting up the template, but this is non-trival code. Of more significant concerns is the fact that we are forced to hard-code the names of the modules and procedures. I have seen far too many codebases where the error message reported an error in procedure "Foo" but actually came from "Bar" because it was copied'n'pasted or because the procedure got renamed but the error handler wasn't updated, and so on. </p>

<p>For a shrinkwrapped application where it is very important to have a high quality error handling, that is non-trivial undertaking. In this scenario, I would consider paying for a third party product such as <a href="https://www.everythingaccess.com/vbwatchdog.asp" rel="noreferrer">vbWatchDog</a> which provide you access to the names of modules &amp; procedures and also the stack trace as well. This can reduce the amount of boilerplate code considerably. </p>

<p>But buying a third party option is not always an option, unfortunately. In that scenario, there is very little we can do to avoid the amount but we could at least allay the naming problems by consistently using constants for both module and procedure names:</p>

<pre><code>Const ModuleName As String = "SomeModule"

&lt;Procedure&gt; SomeProcedure1
Const ProcedureName As String = "SomeProcedure1"

...

Error_Handler.DisplayMessage ProcedureName, ModuleName, Err.number, Err.description

...

End &lt;Procedure&gt;

&lt;Procedure&gt; SomeProcedure2
Const ProcedureName As String = "SomeProcedure2"

...

Error_Handler.DisplayMessage ProcedureName, ModuleName, Err.number, Err.description

...

End &lt;Procedure&gt;
</code></pre>

<p>Even though it paradoxically means <em>more</em> boilerplate, this gives you 2 benefits:</p>

<ol>
<li>Names are now closer to the declarations, so it's less likely to get forgotten when copying'n'pasting. </li>
<li>Because they are consistently declared, it's now possible to automate this dreary task using VBE's API to fix up the names before shipping and the code will still work. </li>
</ol>

<p><strong>Lack of live debugging support</strong></p>

<p>When analyzing an existing procedure that once worked but is now acting up, 
it is very useful to be able to go directly to the offending line, especially when it is a large procedure<sup>1</sup>. A common technique to make it easy to find the offending line is to make use of unreachable <code>Resume</code> as demonstrated in this simplified error handler:</p>

<pre><code>Select Case Err.Number
  Case 91
    ...
    Resume ExitProcedure
  Case Else
    MsgBox "derp"
End Select
Resume ExitProcedure
Resume 'for debugging
</code></pre>

<p>The key is that when you get a messagebox with <code>derp</code>, you would type <kbd>Ctrl</kbd> + <kbd>Break</kbd>. This will interrupt the <code>MsgBox</code> and you will be left at the <code>End Select</code>. You can then drag the yellow execution arrow over to the line where <code>Resume</code> is, then press <kbd>F8</kbd> once and you'll be on the line that caused the error. This is also useful in cases where the procedure may be called several times but errors only under certain circumstances. Instead of stepping through every single invocation, you can simply react to the fallthrough in the error handling and work from that context.</p>

<p><strong>Use of <code>Environ</code> function</strong></p>

<p>While <code>Environ</code> function provide quick and easy method for getting user's and computer's name, they can be tampered with and if the log is used in any manner of security auditing, this is a weak point. Therefore, if you have a scenario where being able to accurately point the blame (and not necessarily to actually blame but also to train or diagnose underlying hardware problems), you might want to consider using windows management classes instead, which provides similar level of convenience (e.g. it works on both 32/64 bit without needing to write conditional compilation switches and <code>Declare</code> statements). </p>

<p><strong>FreeFile As Variant</strong></p>

<p>You have this declaration:</p>

<pre><code>Dim fileNumber   As Variant: fileNumber = FreeFile
</code></pre>

<p>But <a href="https://docs.microsoft.com/en-us/office/vba/language/reference/user-interface-help/freefile-function" rel="noreferrer"><code>FreeFile</code> function returns an <code>Integer</code></a>. Why not declare it so? Note that the primary reason why <code>FreeFile</code> returns an variant is for support in VBScript which cannot have strong-typed variables. But we're using VBA, not VBScript, so we should strong-type even when we take the value from a variant-returning functions since it's documented to return an <code>Integer</code>. </p>

<p><strong>Unusual date/time formatting</strong></p>

<p>I applaud the eschewing of localized date/time format and using a format that will sort correctly even in the filesystem. However, I trip over the use of a underscore to separate the days from hours. Why not use ISO formats, which would be usually <code>yyyy-mm-dd hh-nn-ss</code> or <code>yyyymmddThhnnss</code>? Using ISO formats also means it can be easily parsed<sup>2</sup> whereas custom formats may require additional VBA code and string manipulation to parse.</p>

<p><strong>The usage of <code>Is</code> in <code>Select Case</code> expression</strong></p>

<p>I'm not a big fan of the optional <code>Is</code> mainly because it's superficial. It doesn't hurt to leave it in. The main reason to not make use of it would to be avoid confusion with the <code>Is</code> operator which actually doesn't apply here because the switch is on <code>Err.Number</code>, an integer, not an object. However, for consistency sake, it looks nicer to have all <code>Select Case</code> use the simplified <code>Case 4, 5, 10-15</code> rather than <code>Case Is 4, 5, 10-15</code> which will look good along with <code>Case foo Is bar</code>. </p>

<p><strong><code>Case Is &lt;&gt; 0</code> and <code>Case Else</code></strong></p>

<p>I feel this 2 predicates are almost redundant and actually ends up hiding a bigger flaw. As a rule, we should be in the error handler when <code>Err.Number &lt;&gt; 0</code>. However if we are here and <code>Err.Number = 0</code>, then something has seriously gone wrong -- we either forgot a <code>Exit &lt;procedure&gt;</code> before the definition of the error handler, or we inadvertently did a <code>GoTo</code> that jumped us into inside the error handler. If you really want to guard against those serious programming errors, I don't think the <code>Resume ExitProcedure</code> is the correct action. I'd rather be more explicit and do this:</p>

<pre><code>Case 0
  Debug.Assert False 'We should not be here without an actual error
Case Else
  'Generic error handling
</code></pre>

<p>That said, I'd probably just leave it at <code>Case Else</code> and be done with that. Less boilerplate that way and in the case where we accidentally enter there, the <code>Case Else</code> will display a error message with Error 0, which will be enough to tell us that we made a boneheaded mistake and need to fix the code.</p>

<p><strong>Unnecessary tie-in to the host</strong></p>

<p>Your error handling code is forever bound to Excel VBA projects because of dependencies on <code>Application.CustomProperties</code>. But is it really the responsibility of the error handler to know those details? I say no. I would prefer that the <code>Load</code> method took those as a parameters with a reasonable default that can be gotten from VBA (e.g. using VBA's project name in lieu of document's path which isn't as great but it is still a default that has no external dependencies). The same concerns applies to other properties obtained from <code>Application</code>. Why not just call <code>Load</code> at your application's startup and provide it with the values? Then the modules becomes a simple drop-in and will work in any VBA hosts, not just Excel; it's now a matter of configuring it from outside.</p>

<p><strong>No indication of whether a log failed.</strong></p>

<p>In the <code>DisplayMessage</code>, you have a <code>Resume Next</code>. You then have this block:</p>

<pre><code>If createLog Then
    Log module, procedure, number, description
End If
MsgBox msg, vbCritical, title
</code></pre>

<p>We don't know if the <code>Log</code> actually succeeded or not. Heck, we don't even know if we have a meaningful <code>msg</code>! Why can't we do something like...</p>

<pre><code>If createLog Then
  If Log(...) Then
    msg = msg &amp; "The error has been logged."
  End If 
  If Err.Number Then
    msg = msg &amp; "An error occurred during building the message and logging. Some information may be missing. A restart of the application is strongly recommended."
    End If
  End If
End If
</code></pre>

<p>The idea is that your error message should always accurately reflect the state. If you can't log, then you're likely in a very bad state and it does not make much sense for users to keep going. Perhaps the disk is full, or there's serious lack of memory and by some miracles, the OS has not yet realized it's time to panic. It's now a total chaos, so your message need to convey that information to the user, so they can panic before the kernel panics. ;-)</p>

<p><strong>Lack of handling around file lock conflicts</strong></p>

<p>You open the file for <code>Append</code> but that's it. What happens if 2 instances of Excel are running and they both attempt to log at same time? The last one to log would probably lose out and the log is lost. Since the log is usually quick (it should not take much more than few milliseconds), it makes sense to have a wait + retry as a simple mechanism to ensure that your log is successfully written. Or, you can opt to make log files not shared by appending an unique identifier so that everyone is making their own files even when writing to the shared folder. Either way, you need a way to handle this contingency. </p>

<p><strong><code>Name ... As</code> Instead of <code>FileCopy</code> &amp; <code>Kill</code></strong></p>

<p>Consider using <a href="https://docs.microsoft.com/en-us/office/vba/language/reference/user-interface-help/name-statement" rel="noreferrer"><code>Name</code> statement</a><sup>3</sup> in VBA to rename the file, which would allow you to do this as a single operation rather than <code>FileCopy</code> followed by <code>Kill</code>. This ensures that nobody else can smuggle in one more log message to the file being copied before it gets deleted. </p>

<hr>

<ol>
<li>A large procedure is also a potential code smell and may need some refactoring instead of better error handling.</li>
<li>To be fair, VBA does not understand the ISO 8601 format out of the build but it does understand the ODBC canonical formats. For that reason, I use ODBC canonical formats (that's <code>yyyy-mm-dd hh-nn-ss</code>). In other contexts, both formats are widely recognized and understood, however. </li>
<li>Easily one of worst name for a statement. Who'd thunk to rename a file by <code>Name</code>ing it?</li>
</ol>
    </div>