<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li>There is some duplication of code because you are handling two files.</li>
<li>When you need some data converted to <code>int</code> it would be best to do soon as you've read it to avoid sprinkling other logic with <code>int()</code> calls.</li>
<li>The two columns SIREN and NIC combined seem to form a sorting key to the file. You could simplify the <code>if elif...</code> part by performing the comparisons on <code>(SIREN, NIC)</code> tuples.</li>
</ul>

<p>To address the above, I propose to organize the code like this:</p>

<pre><code>def parse_file(file, variable):
    reader = csv.reader(file, delimiter=';')
    sir_s, nic_s, comp_s = set_up_file(reader, variable)
    for line in reader:
        key = int(line[sir_s]), int(line[nic_s])
        yield key, line[comp_s]

def test_variable(variable):
    with open('source.csv', 'r') as source, open('tested.csv', 'r') as tested:
        source_r = parse_file(source, variable)
        tested_r = parse_file(tested, variable)

        correct = 0
        try:
            line_s = next(source_r)
            line_t = next(tested_r)
            while True:
                key_s, comp_s = line_s
                key_t, comp_t = line_t
                if line_s == line_t:
                    correct += 1
                if key_s &gt;= key_t:
                    line_t = next(tested_r)
                if key_s &lt;= key_t:
                    line_s = next(source_r)

        except StopIteration:
            return correct
</code></pre>

<p>Note however that I've omitted the computation of <code>size</code>. This could be done by incrementing a variable after reading each line, but since lines are read at multiple places, and some may be left in the end if the other file ends first, it may be best to count the lines separately like you have done.</p>
    </div>