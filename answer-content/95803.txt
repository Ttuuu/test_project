<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ol>
<li>You are repeating yourself in <code>playturn</code> and in <code>compturn</code>.</li>
</ol>

<p>A large chunk of these two functions is exactly the same thing: checking to see if a square is empty or not.</p>

<p>I recommend creating a function call <code>is_available</code> which will take one argument that is an element of <code>coords</code>, and will return <code>True</code> if the space is empty and <code>False</code> if not.</p>

<p>Here is what I came up with:</p>

<pre><code>def is_available(coord):
    """
    @param(string) -- a coord from the coords array
    @return(boolean) -- True if the square is empty
                     -- False if the square is occupied
    """
    return coord != "[X]" &amp;&amp; coord != "[O]"
</code></pre>

<p>I did something a little different in this function than what you did that allowed me to reduce this function to one line. You were checking if the square was equal to it's default value ("[1]", "[3]", etc) and I checked that the square was not X and was not O.</p>

<p>Now, let's go back to <code>compturn</code>. Let's re-write it using <code>is_available</code>:</p>

<p>def compturn():</p>

<pre><code>'''
This function adds decision logic to the computers turn, picks a random number
and keeps looping until it picks a valid unchosen spot on the grid.
'''

wincondition()
goodroll = false
while not goodroll:
    choice1 = randint(0,2)
    choice2 = randint(0,2)
    if is_available(coords[choice1, choice2]):
        coords[choice1, choice2] = "[0]"
        goodroll = True

print('Computer choice is: ' , compchoice)
</code></pre>

<p>I also made a few more improvements to this function:</p>

<ol>
<li><p>I changed goodroll to use <code>True</code> and <code>False</code>, rather than "yes" and "no" because boolean comparisons are much, much faster than string comparisons.</p></li>
<li><p>I moved the final <code>print</code> statement out of the while loop so, in the case of an invalid move, the move won't be printed.</p></li>
<li><p>I go rid of the <code>else</code> part because, if the conditional before it was not <code>True</code>, then <code>goodroll</code> would not have been set and will remain <code>False</code>.</p></li>
</ol>

<p>You should use this same principle here for your <code>wincondition</code> function so you aren't being so repetitive there either.</p>

<hr>

<p>Your game does not handle ties. It will just asking for a place to go (or randomly generating a place to go in the case of the computer's turn) and the program will never exit.</p>

<p>You should add a function that checks for a tie.</p>

<hr>

<p><code>printmatrix</code> is not a descriptive name. You should call it <code>print_board</code>.</p>

<hr>

<p>Here:</p>

<pre><code>if iswon == 'yes':
    print ('The game is over! ' ,  whowon , ' won!')
    exit(0)
</code></pre>

<p>You use the function <code>exit</code>, but you never imported it anywhere.</p>

<p>At the top of your code, you should put:</p>

<pre><code>from sys import exit
</code></pre>
    </div>