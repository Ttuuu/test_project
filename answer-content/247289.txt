<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Since there's only two cases, the strategy pattern should be sufficient. Alternatively, creating an inverted view of the graph would allow you to implement <code>_add_end_node()</code> by calling <code>_add_start_node()</code> on the inverted graph view.</p>
<pre><code>class StartNodeStrategy:
    def create_node(self):
        return Node.create_start_node()
    def find_hanging(self,nodes):
        return [
            node.id_
            for node in nodes
            if not node.predecessor
        ]
    def fix_hanging(self,outer_node,inner_node):
        inner_node.add_predecessor(outer_node)
        outer_node.add_successor(inner_node)

class EndNodeStrategy:
    def create_node(self):
        return Node.create_end_node()
    def find_hanging(self,nodes):
        return [
            node.id_
            for node in nodes
            if not node.successor
        ]
    def fix_hanging(self,outer_node,inner_node):
        inner_node.add_successor(outer_node)
        outer_node.add_predecessor(inner_node)


def _add_outer_node(graph:Graph,strategy):
    
    outer_node = strategy.create_node()
    graph.add_node(outer_node)
    outer_node = graph.nodes[outer_node.id_]

    for inner_node in strategy.find_hanging(graph.nodes):
        strategy.fix_hanging(outer_node,inner_node)
</code></pre>
    </div>