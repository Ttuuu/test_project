<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>As this is <em>Code review</em> I'll provide general (but important) optimizations:</p>

<ul>
<li><p><strong><code>stop_words = [...]</code></strong>. To obtain a <strong>fast</strong> <em>membership testing</em> it should be defined as <a href="https://docs.python.org/3/library/stdtypes.html#set" rel="nofollow noreferrer"><code>set</code></a> object (not as list).<br>Here's <em>time performance</em> comparison:</p>

<pre><code>In [262]: %timeit 'here' in stop_words                                                                                       
1.83 µs ± 77.7 ns per loop (mean ± std. dev. of 7 runs, 100000 loops each)

In [263]: stop_words_set = set(stop_words)                                                                                   

In [264]: %timeit 'here' in stop_words_set                                                                                   
33.5 ns ± 1.97 ns per loop (mean ± std. dev. of 7 runs, 10000000 loops each)
</code></pre>

<p>33.5 <em>nanoseconds</em> against 1.83 <em>microseconds</em> is about <strong>54</strong> times faster.</p></li>
<li><p><strong><code>remove_nums</code></strong> function.<br>To prevent multiple regexp pattern generation/compilation - prepare precompiled regex pattern at once with <a href="https://docs.python.org/3/library/re.html?highlight=re%20compile#re.compile" rel="nofollow noreferrer"><code>re.complie</code></a> function. Also, use <code>+</code> quantifier to perform substitution for 2 and more digit occurrences at once:</p>

<pre><code>def remove_nums(arr): 
    pattern = re.compile(r'\d+')   
    # Return the array with numbers removed
    return [pattern.sub('', i) for i in arr]
</code></pre></li>
<li><p><strong><code>get_words</code></strong> function.<br>The whole sequence of subsequent traversals</p>

<pre><code>dirty_tokens = (data for data in no_integers if data not in stop_words)
# Ensure it is not empty
tokens = (data for data in dirty_tokens if data.strip())
# Ensure there is more than 1 character to make up the word
tokens = (data for data in tokens if len(data) &gt; 1)
</code></pre>

<p>can be effectively reduced to a single one <em>generator</em> expression:</p>

<pre><code>tokens = (data for data in no_integers 
          if data not in stop_words and len(data.strip()) &gt; 1)
</code></pre></li>
</ul>
    </div>