<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I have some suggestions to point out:</p>

<ol>
<li><code>import</code> statements should always go at the top. This saves from accidentally importing the same module twice in two separate sections of code; which you actually do. You import <code>collections</code> in your: <code>likeUpdate</code> function, and your <code>recommendLikes</code> function, your <code>recommendUser</code> function.</li>
<li><p>When creating filepaths, use <a href="https://docs.python.org/2/library/os.path.html#os.path.join" rel="nofollow"><code>os.path.join</code></a>. This uses the OS-specific separator:</p>

<pre><code>cleanLikesCSV = open(os.path.join(likeDir, i))
</code></pre></li>
<li><p>Pythonic variable names use the <code>underscores_in_names</code> style instead of <code>camelCase</code>. The same style applies to function/method names. The only aberration to this rule is class names which use <code>PascalCase</code>.</p></li>
<li><p>Use desriptive variable names. What is <code>Ab</code>? What about <code>aB</code>? <code>AB</code>? Those 3 examples were used one after the other in your <code>makeXY</code> function. It is very difficult (if not impossible in this case) to understand what those variables are supposed to do and hold.</p></li>
<li><p>This statement:</p>

<pre><code>Ab = (topLikes[0][1]-topLikes[1][1])
</code></pre>

<p>contains extraneous parentheses. You can remove them and not change the logic of the program.</p></li>
<li><p>Whitespace is your friend. Separate logical blocks of code with a single blank line. However, be careful you don't use <strong>TOO</strong> much whitespace. In your code you typically have 3-4 blank lines separating fuctions. This is too much; a single line will do.</p></li>
<li><p>You populate lists by first declaring them and then populating them using for loops. This can be compacted down to a single list comprehension:</p>

<pre><code># This is your current implementation
vectorList = []
for rows in vectorCSV:
    vectorList.append(makeLikeList(rows))

# This is how you SHOULD do it
vector_list = [makeLikeList(rows) for rows in vectorCSV]
</code></pre></li>
</ol>

<hr>

<p>My final point, which I chose to separate from the above list because of its importance, is: <strong>always use <code>with</code> syntax when dealing with files</strong>. </p>

<p>Currently, you use the <code>open()</code> syntax. This is technically correct. However, it brings with it a slew of possible places to introduce bugs into your code. The biggest bug is when you forget to call <code>close()</code> on the file.</p>

<p>You do this A LOT. You called the <code>open()</code> function 12 separate times while you only called the <code>close()</code> function 4 times. This means that you have open file pointers to at least 8 files when your code finishes.</p>

<p>To skip this bug, use the <code>with</code> syntax. The <code>with</code> keyword automatically closes any context manager (file object, etc.) once its block finishes. An example:</p>

<pre><code>with open('some_file.txt', 'r') as file:
    for line in file:
        print(line)

# Once the program gets here, file is now closed.
foo = 'Hello World!'
</code></pre>
    </div>