<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your approach could be made more robust by not hardcoding both the number of employees and their level in the heirarchy. You can do this by storing the employees in an array, where you can use loops or array methods to traverse, and using recursion to recursively climb the manager references.</p>

<pre><code>const isEmployeeOf = (employee, managerName) =&gt; {
  // If the current employee is directly under the manager.
  if (employee.manager &amp;&amp; employee.manager.name === managerName) return true

  // If we still need to look further, go one step up.
  if (employee.manager) return isEmployeeOf(employee.manager, managerName)

  // No more managers, must be false.
  return false;
}

const employees = [/* an array of all employees */]
employees.filter(employee =&gt; isEmployeeOf(employee, managerName))
</code></pre>

<p>However, this is inefficient as it needs to check all employees and climb the managerial hierarchy, both of which may not even belong to the manager you're looking for. </p>

<p>Instead, consider building a tree that you can traverse in a top-down manner (CEO downwards) to find your manager and gather its underlings. There are different kinds of tree structures as well as traversal methods, each with their own pros and cons. A good way to start with tree traversal is <a href="https://en.wikipedia.org/wiki/Depth-first_search" rel="nofollow noreferrer">Depth-First Traversal</a> which can easily be done using recursion.</p>
    </div>