<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Inefficient</h2>

<p>Your code has two major inefficiencies due to poor logic order and design </p>

<h2>Unneeded sort</h2>

<p>The sort in <code>isArrayValid</code> will be rather slow and not needed if you write to the <code>oneThroughNine</code> to mark numbers found. Before you mark the number found check if its been marked, if so then the game is invalid.</p>

<pre><code>function isArrayValid(array: row): boolean {
    const mustInclude = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]; // except for 0

    for (const val of array) {
        if (!mustInclude[val]) { return false }
        mustInclude[val] = 0; // mark the position as found
    }
    return true;    
}
</code></pre>

<h3>Processing when the result is known</h3>

<p>At the bottom of the main function you check rows, columns, and squares. The problem is that if one of the rows is invalid you will still end up checking the columns and squares even though you know that the game is invalid.</p>

<p>If you place the rows, columns, and squares in an array and test it with Array.every you can exit on the first bad set.</p>

<pre><code>return [rows, columns, squares].every(set =&gt; set.every(isArrayValid));
</code></pre>

<p>However...</p>

<h3>Don't create data before you need it,</h3>

<p>You create and hold the columns and square before you check rows, they may not be needed as rows may find an invalid game.</p>

<p>Nor do you need to keep each column and square. Check them as you create them, no point creating 9 columns if the first of them is invalid. Same with the squares</p>

<p>I also changed the name of <code>isArrayValid</code> to <code>isInvalid</code> to avoid having to use <code>!</code> each time the set is tested</p>

<pre><code>function isValidSudoku(sudoku: sudoku): boolean {
    if (sudoku.some(isInvalid)) { return false }

    for (let r = 0; r &lt; 9; r++) {
        const column = [];
        for (let c = 0; c &lt; 9; c++) { column.push(sudoku[c][r]) }
        if (isInvalid(column)) { return false }

    }
    const squareAnchors = [[0, 0], [3, 0], [6, 0], [0, 3], [3, 3], [6, 3], [0, 6], [3, 6], [6, 6]];

    for (const [x, y] of squareAnchors) {
        const square = [];
        for (let ix = 0; ix &lt; 3; ix++) {
            const row = sudoku[x + ix];
            for (let iy = 0; iy &lt; 3; iy++) { square.push(row[y + iy]) }
        }
        if (isInvalid(square)) { return false }
    }
    return true;
}
function isInvalid(set: row): boolean {
    const mustInclude = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]; // except for 0

    for (const val of set) {
        if (!mustInclude[val]) { return true }
        mustInclude[val] = 0; // mark the position as found
    }
    return false;    
}   
</code></pre>

<p>There are many other things that could be done to improve the code like</p>

<ul>
<li>Checking each value as you create the column and square arrays.</li>
<li>Using a bitfield rather than an array to mark of included values.</li>
<li>Have the input array as a single dimension (flat) so you don`t have to do all the double indexing and nested loops.</li>
</ul>

<p>But you would only do that if you had millions of games to check and needed every ounce of performance. The further optimizations are only going to give you a few percentage point improvement.</p>
    </div>