<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>something along these lines</p>

<pre><code>public static class DTExtensions
{
    public static List&lt;T&gt; ToList&lt;T&gt;(this System.Data.DataTable dt) where T : new()
    {
        var obj = dt.Rows.OfType&lt;System.Data.DataRow&gt;().Select(dr =&gt; dr.ToObject&lt;T&gt;()).ToList();
        return obj;
    }
    public static T ToObject&lt;T&gt;(this System.Data.DataRow dataRow) where T : new()
    {
        T item = new T();
        var itemType = item.GetType();
        foreach (System.Data.DataColumn column in dataRow.Table.Columns)
        {
            System.Reflection.PropertyInfo property = itemType.GetProperty(column.ColumnName);

            if (property != null &amp;&amp; dataRow[column] != DBNull.Value)
            {
                var result = Convert.ChangeType(dataRow[column], property.PropertyType);
                property.SetValue(item, result, null);
            }
        }

        return item;
    }
}


public class DataHandler
{
    private readonly string _ConnectionInfo = String.Empty;
    public DataHandler(string connectioninfo)
    {
        _ConnectionInfo = connectioninfo;
    }

    public async Task&lt;System.Data.DataTable&gt; DataAsync( string commandSQL, IEnumerable&lt;System.Data.SqlClient.SqlParameter&gt; listParameter=null)
    {
        System.Data.DataTable dt = new System.Data.DataTable("data");

        using (System.Data.SqlClient.SqlConnection connection = new System.Data.SqlClient.SqlConnection(_ConnectionInfo))
        {
            try
            {
                await connection.OpenAsync().ConfigureAwait(false);
            }
            catch (InvalidOperationException ex)
            {
                return null;
            }
            catch (System.Data.SqlClient.SqlException ex)
            {
                return null;
            }
            using (System.Data.SqlClient.SqlCommand command = new System.Data.SqlClient.SqlCommand(commandSQL, connection))
            {
                command.CommandType = System.Data.CommandType.StoredProcedure;
                if (listParameter != null &amp;&amp; listParameter.Any())
                {
                    command.Parameters.AddRange(listParameter.Where(p =&gt; p != null).ToArray());
                }
                using (var r = await command.ExecuteReaderAsync(System.Data.CommandBehavior.SequentialAccess).ConfigureAwait(false))
                {
                    dt.Load(r);
                }
                command.Parameters.Clear();
            }
            connection.Close();
        }

        return dt;
    }
}

public sealed class Employee
{
    public string EmpID { get; set; }
    public string FirstName { get; set; }
    public string LastName { get; set; }
}

public class EmployeeDBHandler
{
    private readonly DataHandler _DataHandler;
    public EmployeeDBHandler(DataHandler datahandler)
    {
        _DataHandler = datahandler ?? throw new System.ArgumentNullException("datahandler");
    }

    public async Task&lt;List&lt;Employee&gt;&gt; GetEmployees()
    {
        System.Data.DataTable dt = await _DataHandler.DataAsync("GetAllEmployee").ConfigureAwait(false);
        if (dt != null)
        {
            //OR look into using yeild
            //yield return employee
            //OR
            var list = dt.ToList&lt;Employee&gt;();
            return list;
        }
        return null;
    }

    public async Task&lt;List&lt;Employee&gt;&gt; FetchEmployee(int empid)
    {
        List&lt;Employee&gt; empList = new List&lt;Employee&gt;();
        var parameters = new List&lt;System.Data.SqlClient.SqlParameter&gt; { new SqlParameter("@EmpID", empid) };
        System.Data.DataTable dt = await _DataHandler.DataAsync("usp_FetchEmployeeDetails", parameters).ConfigureAwait(false);
        if (dt != null &amp;&amp; dt.Rows.Count&gt;0)
        {
            var list = dt.ToList&lt;Employee&gt;();
            return list;
        }
        return null;
    }
}

//  main program:
public class MainProgram
{
    public void DoSomeWork()
    {
        string sqlConnstr = @"Data Source=&lt;...&gt;; Initial Catalog=&lt;...&gt;; User ID=username; Password=password"; //Utils.GetDBConnection();
        var dbHandler = new DataHandler(sqlConnstr);
        var employeeHandler = new EmployeeDBHandler(dbHandler);

        var employees = employeeHandler.GetEmployees();
        if (employees != null)
        {
            //.....
        }
    }
}
</code></pre>
    </div>