<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Before going through advises just wanted to remind you can alternatively use <code>Aws\Sdk</code> class as a client factory.<br>
Sample usage:</p>

<pre><code>// The same options that can be provided to a specific client constructor can also be supplied to the Aws\Sdk class.
// Use the us-west-2 region and latest version of each client.
$sharedConfig = [
    'region' =&gt; 'us-west-2',
    'version' =&gt; 'latest'
];

// Create an SDK class used to share configuration across clients.
$sdk = new Aws\Sdk($sharedConfig);

// Create an Amazon S3 client using the shared configuration data.
$client = $sdk-&gt;createS3();
</code></pre>

<p>Observe <a href="https://docs.aws.amazon.com/sdk-for-php/v3/developer-guide/getting-started_basic-usage.html" rel="nofollow noreferrer"><code>AWS SDK for PHP</code></a> guide, just in case you hadn't yet.<br>They give a notation there:</p>

<blockquote>
  <p><strong>Note</strong></p>
  
  <p>We highly recommended that you use the Sdk class to create clients if
  you're using multiple client instances in your application. The Sdk
  class automatically uses the same HTTP client for each SDK client,
  allowing SDK clients for different services to perform nonblocking
  HTTP requests. If the SDK clients don't use the same HTTP client, then
  HTTP requests sent by the SDK client might block promise orchestration
  between services.</p>
</blockquote>

<hr>

<p>But, proceeding with your approach, you have a variation of <code>Singleton</code> pattern (restricts the instantiation of a class to a single object, which can be useful when only one object is required across the system).<br>In your case <code>S3Helper</code> acting as a <em>factory</em> producing/returning the same <code>S3Client</code> instance.</p>

<p>To prevent instantiation/cloning of <code>S3Helper</code> from the outer code you can <em>close</em> <code>__construct</code>, <code>__clone</code> (and even <code>__wakeup</code>) methods:</p>

<pre><code>class S3Helper {
    ...
    private function __construct() { }
    private function __clone() { }
</code></pre>

<p>To eliminate multiple <code>return</code> statements in your static <code>getClient()</code> method use the following condition (set <code>client</code> if it's not set yet):</p>

<pre><code>private static function getClient() {
    if (self::$client === null) {   # use strict comparison here
        $auth = self::getAuth();
        self::$client = new S3Client([
            'region' =&gt; 'eu-west-2',
            'version' =&gt; '2006-03-01',
            'endpoint' =&gt; $auth['endpoint'],
            'credentials' =&gt; [
                'key' =&gt; $auth['key'],
                'secret' =&gt; $auth['secret']
            ],
            'use_path_style_endpoint' =&gt; true
        ]);
    }
    return self::$client;
}
</code></pre>
    </div>