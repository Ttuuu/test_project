<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<pre><code>        this.BasketResponse = new SoapSimplifier(basketResponse).ToJObject();
</code></pre>
</blockquote>

<p>At this point you know you have a <code>JObject</code>: by storing it in a <code>dynamic</code> property you're losing information. I would say there's a case to at least consider storing it in a typed backing field.</p>

<hr>

<blockquote>
<pre><code>    public string FirstName { get { return this.BasketResponse.deliverydata.firstname; } }
    public string LastName { get { return this.BasketResponse.deliverydata.lastname; } }
    public string Tel { get { return this.BasketResponse.deliverydata.mobile; } }
    public string Email { get { return this.BasketResponse.deliverydata.email; } }
    public string Address1 { get { return this.BasketResponse.deliverydata.add1; } }
    public string PostCode { get { return this.BasketResponse.deliverydata.postcode; } }
</code></pre>
</blockquote>

<p>Given that this section of data is supposed guaranteed, IMO it makes sense to parse it to a <code>DeliveryData</code> object and then only store the dynamic part of the message as <code>dynamic</code>.</p>

<p>But even if you prefer to go <code>dynamic</code> all the way, this code is very WET. Since there's no compile-time checking of names, I would consider it obligatory to <em>at least</em> factor out <code>BasketResponse.deliverydata</code> as a private property.</p>

<hr>

<blockquote>
<pre><code>            if (valNode != null)
            {
                var nodeType = valNode.Attribute(Xsi + "type").Value;
                if (nodeType == "xsd:string")
                {
                    jo.Add(new JProperty(i.Element("key").Value, i.Element("value").Value));
                }
                else if (nodeType == "ns2:Map")
                {
                    jo.Add(new JProperty(i.Element("key").Value, XElementToJObject(valNode)));
                }
                else if (nodeType == "SOAP-ENC:Array")
                {
                    JArray ja = new JArray();
                    foreach (var node in valNode.Elements())
                    {
                        ja.Add(XElementToJObject(node));
                    }
                    jo.Add(new JProperty(i.Element("key").Value, ja));
                }
            }
</code></pre>
</blockquote>

<p>A <code>switch (nodeType)</code> might be clearer. It would also emphasise the lack of handling of the <code>default</code> case. Surely you want to <em>at least</em> log a warning if the node is none of the above?</p>
    </div>