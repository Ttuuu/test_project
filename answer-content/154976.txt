<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Note:</strong> You've posted a large chunk of code, so I might miss something during my review. Please excuse me for any mistake. Better documentation is appreciated.</p>

<p>I'm a C++ chess engine programmer, so I'll share my experience with you.</p>

<ul>
<li>The Python coding is fairly standard so this is ok</li>
<li>Your board representation is too slow for a chess engine, but acceptable for a chess GUI. <strong>If</strong> you would like to write your own chess engine, <strong>everything</strong> would have be rewritten.</li>
<li>You forgot to check whether the castling squares are attacked by the enemy pieces.</li>
<li>You forgot to implement promotions and under-promotions</li>
<li>You forgot to check for pinned pieces. For example, your program would move a knight away from it's king when it can't.</li>
<li>You only need to know whether the rooks and king have moved or not. You don't care your queen, knight and bishop. You only need rook and king because for castling. Therefore, the function <code>has_moved</code> is wrong.</li>
<li>How you check whether or not a piece has moved is too complex and unnecessary. Professional softwares do it with <strong>Zobrist hashing</strong>. Consider to hash your position. If you don't want to do it, use a simple dictionary. Stop looping and then looping.</li>
<li>How you find a piece is slow because it is a linear search. Fortunately, it's
not very important unless you want to code a chess engine (there're only 64 squares in chess). Professional softwares use <strong>bitboard</strong>.</li>
<li><code>in_danger</code> is wrong. You check whether your piece is being attacked by the enemy piece. But what if your piece is protected? A piece is really in danger if it's being attacked and <strong>unprotected</strong>.</li>
<li>Furthermore, a protected piece is in danger if it's being attacked by a less valuable piece. For example, your protected queen is being attacked by your opponent's pawn. You might want to check <a href="https://chessprogramming.wikispaces.com/Static+Exchange+Evaluation" rel="noreferrer">static exchange evaluation</a>.</li>
</ul>

<p>Overall, I don't think it works correctly for the chess rules. You should check your board generator against <a href="https://chessprogramming.wikispaces.com/Perft" rel="noreferrer">Perft</a>.</p>

<p>Too much two-dimensional looping. It's okay for chess because we have only 64 squares, but try to be smarter in your next project. This is an opportunity for you to learn hashing and dictionary.</p>

<p>On a 1-10 scale, if a commercial quality GUI (such as Chessbase's Fritz) is 10/10. I'd rate this attempt as <strong>1/10</strong>.</p>
    </div>