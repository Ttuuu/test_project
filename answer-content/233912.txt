<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>As you are inserting a single row in the <strong>insertItems</strong> method, there is no need to <strong>begin</strong>/<strong>set</strong>/<strong>end</strong> a transaction as a single SQL statement is a transaction. </p>

<p>You only need to <strong>begin</strong>/<strong>set</strong>/<strong>end</strong> transactions if doing multiple statements together e.g. in a loop, in which case you <strong>begin</strong> at the start of the loop, <strong>set</strong> when the loop has completed successfully and then <strong>end</strong>.</p>

<p>Processing a loop (or a stream of statements) within a transaction can be a large time saver as the disk is written to just the once for all the changes applied as opposed to the disk being written to for each statement.</p>

<p>Closing the database is also not necessary throughout an App for general CRUD operations. Opening the database is relatively intensive, which would have to be done for each iteration after the first as the first closes the database.</p>

<p>So insertItems could be :-</p>

<pre><code>    public long insertItems (
                             String itemCode, String brand, String desc) {
        SQLiteDatabase sq = this.getWritableDatabase();
        ContentValues cv = new ContentValues();
        cv.put(TableData.TableInfo.COL_ITEMS_ITEMCODE, itemCode);
        cv.put(TableData.TableInfo.COL_ITEMS_BRAND, brand);
        cv.put(TableData.TableInfo.COL_ITEMS_DESCRIPTION, desc);
        return sq.insert(TableData.TableInfo.TB_ITEMS, null, cv);
    }
</code></pre>

<ul>
<li>Note that the signature has been changed to return a long, this will be -1 if the row couldn't be inserted.</li>
<li>The signature has also been changed as there is no need to pass an instance of DatabaseOperations to the instance, instead <code>this.getWritableDatabase()</code> can be used to get the SQLiteDatabase.</li>
<li>Typically Try/Catch is not a good idea as it tends to introduce confusion 

<ul>
<li><em>e.g. why didn't attempt to insert a non-UNQIUE row not throw an exception (it results in no exception but the row is inserted so -1 is returned from the insert)</em></li>
</ul></li>
</ul>

<p>Along with the real potential optimization, doing the loop inside a single transaction :-</p>

<pre><code>    .........
    DatabaseOperations dop = new DatabaseOperations(ctx);
    dop.getWritableDatabase().beginTransaction();
    boolean alldone = true;
    for (int i = 0; i &lt; itemArray.length(); i++) {
        itemCode = itemArray.getJSONObject(i).getString("ITEMCODE");
        itemBrand = itemArray.getJSONObject(i).getString("BRAND");
        itemDesc = itemArray.getJSONObject(i).getString("DESCRIPTION");
        // if any row is not inserted then set alldone to indicate this.
        if (dop.insertItems(dop, itemCode, itemBrand, itemDesc) &lt; 0) alldone = false;
    }
    // You may wish to rollback if alldone is false, if so then use commented line 
    // instead of dop.getWritableDatabase().setTransactionSuccessful();
    //if (alldone) dop.getWritableDatabase().setTransactionSuccessful();
    dop.getWritableDatabase().setTransactionSuccessful();
    dop.getWritableDatabase().endTransaction();
</code></pre>

<h1>Timing Difference Example</h1>

<p>Using the original <strong>insertItems</strong> method as <strong>insertItems</strong> and the suggested <strong>insertItems</strong> method as <strong>insertItemsV2</strong> and the following code in an activity :-</p>

<pre><code>public class MainActivity extends AppCompatActivity {
    DatabaseOperations dop;


    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        int insertCount = 8000;

        dop = new DatabaseOperations(this);
        Log.d("DOPMASSINSERTV1","Starting mass insertItems");
        for (int i=0; i &lt; insertCount; i++) {
            dop.insertItems(dop,"ITEMCODE"+i,"BRAND"+i,"DESCRIPTION"+i);
        }
        Log.d("DOPMASSINSERTV1","mass insertItems completed");

        dop.getWritableDatabase().beginTransaction();
        Log.d("DOPMASSINSERTV2","Starting mass insertItemsV2");
        boolean alldone = true;
        for (int i=0; i&lt; insertCount; i++) {
            if (dop.insertItemsV2("ITEMCODEV2"+i,"BRANDV2"+i,"DESCRIPTIONV2"+i) &lt; 0) alldone = false;
        }
        if (alldone) dop.getWritableDatabase().setTransactionSuccessful();
        else {
            Log.d("DOPMASSINSERTV2","Rows not inserted!!!!");
        }
        dop.getWritableDatabase().endTransaction();
        Log.d("DOPMASSINSERTV2","mass insertItemsV2 completed");
    }
}
</code></pre>

<p>i.e. insertion of 8000 rows using first the original insertItems and then repeated (but with rows that will not result in a UNIQUE conflict (duplicate rows which won't be inserted)). A test run produces the following output in the log :-</p>

<pre><code>2019-12-12 21:38:15.180 D/DOPMASSINSERTV1: Starting mass insertItems
2019-12-12 21:39:07.275 D/DOPMASSINSERTV1: mass insertItems completed
2019-12-12 21:39:07.276 D/DOPMASSINSERTV2: Starting mass insertItemsV2
2019-12-12 21:39:08.574 D/DOPMASSINSERTV2: mass insertItemsV2 completed
</code></pre>

<p>As such the original took 52 seconds (8.6 minutes for 80000), the amended took about 1.3 seconds (13 seconds for 80000). So in this test case the amended process 1/40th of the time.</p>

<p>Increasing the count to 80000 and commenting out the line <code>dop.insertItems(dop,"ITEMCODE"+i,"BRAND"+i,"DESCRIPTION"+i);</code> so the original inserts are skipped. Results in :-</p>

<pre><code>2019-12-12 22:01:00.834 D/DOPMASSINSERTV1: Starting mass insertItems
2019-12-12 22:01:00.838 D/DOPMASSINSERTV1: mass insertItems completed
2019-12-12 22:01:00.868 D/DOPMASSINSERTV2: Starting mass insertItemsV2
2019-12-12 22:01:13.414 D/DOPMASSINSERTV2: mass insertItemsV2 completed
</code></pre>

<p>i.e. about 13 seconds to insert the 80000 rows.</p>
    </div>