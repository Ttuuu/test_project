<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your code is quite good, but could be more concise.</p>

<p>Specifically, I don't see why you would need all those <code>class</code>es and <code>enums</code>: a <code>track</code>, for instance, is adequately represented by the same <code>char</code> that is used for displaying it. Carts are only a bit more complicated, since you have to remember which direction it chose last, but a <code>std::pair&lt;char, char&gt;</code> is quite enough. Besides, actual chars are more expressive than <code>enum</code>s, for instance:</p>

<pre><code>char change_direction(char current) {
    switch (current) {
        case '&lt;': return '^';
        case '^': return '&gt;';
        case '&gt;': return '&lt;';
        default: throw bad_direction();
    }
}
</code></pre>

<p>'x' can be used to represent a crash.</p>

<p>It is also very simple to keep track of each track and cart position by maintaining two arrays representing the grid on which they are positioned.</p>

<p>So two <code>std::array</code>s are enough to represent all your data. The <code>tick</code> function can have the signature <code>std::vector&lt;int&gt; tick(const std::array&lt;char, N&gt;&amp; tracks, std::array&lt;std::pair&lt;char, char&gt;, N&gt;&amp; carts)</code>: it lets all carts advance once and returns a vector of the crashes that occurred during the turn.</p>

<p>You then have a really simple loop as your program:</p>

<pre><code>constexpr std::array&lt;char, N&gt; tracks { /* input */ };
std::array&lt;char, N&gt; carts { /* input */ };
constexpr auto is_cart = [](char c) { c != ' '; };
int nb_carts = std::count_if(carts.begin(), carts.end(), is_cart);

int first_crash_location = -1;
int last_cart_location = -1;
while (true) {
    std::vector&lt;int&gt; crashes = tick(tracks, carts);
    if (first_crash_location == -1 &amp;&amp; !crashes.empty())
        first_crash_location == *crashes.begin();
    nb_carts -= crashes.size();
    if (nb_carts == 1) {
        last_cart_location = std::distance(carts.begin(), 
                                 std::find_if(carts.begin(), carts.end(), is_cart));
        break;
}
</code></pre>

<p>That leaves only the <code>tick</code> function to be implemented. The only tedious thing is to iterate over the array of carts in the good order (row by row, beginning with the last row), but the general idea is:</p>

<pre><code>for each cell of cart_array in the good order:
    if there is a cart:
        position = compute_next_position(cart)
        clear cell
        if occupied(position, cart_array): add crash to result, clear position
        else: cart_array[position] = new_direction_cart(cart, position, track_array)
</code></pre>
    </div>