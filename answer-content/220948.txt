<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There are a lot of improvements that had to be made, the most important for you to understand are arrays, especially 2D arrays; for loops; and ternary operators. </p>

<pre><code>using System.Threading;
using static System.Console;

namespace Test1
{
    class Program
    {
        const int boardWidth = 7;
        const int boardHeight = 10;
        static bool[,] lines = new bool[boardWidth, boardHeight];
        static int nextLine = boardHeight - 1;
        static int nextLinePos = 0;
        static int nextLineMoving = 1;
        static int currentCupNumber = 3;
        static WinState winState = WinState.Undetermined;
        static void Main(string[] args)
        {
            while (winState == WinState.Undetermined)
            {
                UpdateGameState();
                ShowGameState();
            }
            Clear();
            if (winState == WinState.Won)
            {
                WriteLine("You have won the game!");
            }
            else
            {
                WriteLine("You have lost the game :(");
            }
            ReadKey();
        }
        static void ShowGameState()
        {
            Clear();
            for (int y = 0; y &lt; boardHeight; y++)
            {
                for (int x = 0; x &lt; boardWidth; x++)
                {
                    Write(lines[x, y] ? 'X' : 'O');
                }
                WriteLine();
            }
            SetCursorPosition(nextLinePos, nextLine);
            for (int i = 0; i &lt; currentCupNumber; i++)
            {
                Write('X');
            }
        }
        static void UpdateGameState()
        {
            if (KeyAvailable)
            {
                ReadKey();
                bool accept = false;
                if (nextLine == boardHeight - 1)
                {
                    accept = true;
                    for (int i = 0; i &lt; currentCupNumber; i++)
                    {
                        lines[i + nextLinePos, nextLine] = true;
                    }
                }
                else
                {
                    int align = 0;
                    for (int i = 0; i &lt; currentCupNumber; i++)
                    {
                        if (lines[i + nextLinePos, nextLine + 1])
                        {
                            align++;
                            accept = true;
                            lines[nextLinePos + i, nextLine] = true;
                        }
                    }
                    currentCupNumber = align;
                }
                nextLine--;
                if (nextLine == 0)
                {
                    winState = WinState.Won;
                }
                else if (accept == false)
                {
                    winState = WinState.Lost;
                }
            }
            else
            {
                nextLinePos += nextLineMoving;
                nextLineMoving = nextLinePos &gt;= boardWidth - currentCupNumber || nextLinePos == 0 ? nextLineMoving * -1 : nextLineMoving;
            }
            Thread.Sleep(200);
        }
    }
    enum WinState { Undetermined, Won, Lost }
}
</code></pre>
    </div>