<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>A way to avoid the if-else chains is to use double dispatch. Let the event data call the right <code>Consume</code> method of the event consumer. For this to work, the consumer methods need to be known to the event data. We can declare an interface for this:</p>

<pre><code>public interface IConsumer
{
    Consume(ISpecificEvent e);
    Consume(IOtherSpecificEvent e);
    ...
}
</code></pre>

<p>The event data is declared as:</p>

<pre><code>public interface IEvent
{
    void Raise(IConsumer consumer);
}
</code></pre>

<p>Now the consuming model implementing this interface can dispatch like this</p>

<pre><code>public void DispatchEvents(TypeThatContainsJsonEventData e)
{
    IEvent deserializedEvent = _eventSerializer.Deserialize(e);
    deserializedEvent.Raise(this);
}
</code></pre>

<p>And a specific event is implemented as:</p>

<pre><code>public class SpecificEventData : ISpecificEvent 
{
    public void Raise(IConsumer consumer)
    {
        consumer.Consume(this); // Automatically calls the matching overload!
    }
}
</code></pre>

<p>Note also that the overload resolution happens at compile time.</p>

<p>Since the event data knows which <code>Consume</code> method to call right away, no if-else chains or switch statements are needed. Of all the algorithms and programming techniques I know, this seems the most astonishing to me.</p>

<hr>

<p>Another option is to use C#7's pattern matching allowing you to switch on an object's type; however, while being slightly more elegant than an if-else chain, it is conceptually not any different from your option 1.</p>

<pre><code>public void DispatchEvents(TypeThatContainsJsonEventData e)
{
    var deserializedEvent = _eventSerializer.Deserialize(e);
    switch (deserializedEvent)
    {
        case ISpecificEvent specificEvent:
            Consume(specificEvent);
            break;
        case IOtherSpecificEvent otherSpecificEvent:
            Consume(otherSpecificEvent);
            break;
        ...
    }
}   
</code></pre>
    </div>