<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Things that stand out as particularly good:</p>

<ul>
<li>Test cases, including tests that unsolvable inputs get handled correctly.</li>
<li>Comments, including comments that describe the high level algorithm.</li>
<li>The algorithm description makes it clear how it's avoiding painting itself into a corner.</li>
<li>Testing, as early as possible, for inputs that break your function rather than discovering part way through is fantastic.</li>
</ul>

<p>Possible room for improvement:</p>

<ul>
<li>Test cases should specify their expected output. Ideally, you'd have a testing rig that automatically checks they give a satisfying output.</li>
<li>Think about how you handle failures. In python, I'd suggest that exceptions are the way to go. </li>
<li>Where you have multiple approaches to solving the same problem, that is a particularly good sign that it's time to split them out of a mega-function.</li>
<li>Many of your variable names could do with elaboration, especially the single letter ones.</li>
<li>Run the code through a Pep-8 style linter and ensure it's laid out in standard pythonic form. For example single line condition and response is discouraged.</li>
<li>This algorithm produces an output that is determinisitic and depending on its place in your game may be a little bit boring and predictable. Having the rotate mode mixes it up a bit, but that actually makes for an even more obvious pattern. It may be better to see whether you can introduce some random element. The easist option would be to do a random shuffle, and then swap out any letters that violate the rule.</li>
</ul>
    </div>