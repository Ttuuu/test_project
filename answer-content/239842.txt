<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Generating possible moves</h2>

<p>Assuming that the order of the elements in the output does not matter (e.g. <code>(2 3)(3 2)</code> and <code>(3 2)(2 3)</code> are equally valid outputs for the input <code>1 1</code>), it suffices to generate <em>some</em> permutation of <code>(1 2)(2 1)(¯1 2)(2 ¯1)(1 ¯2)(¯2 1)(¯1 ¯2)(¯2 ¯1)</code>.</p>

<p>Using the signs-and-offsets method you used, we want the equivalent of</p>

<pre><code>signs ← (1 1)(1 ¯1)(¯1 1)(¯1 ¯1)
offsets ← (1 2)(2 1)
</code></pre>

<p>There are multiple ways to generate such arrays. Pick the one that reads the best for you (and, if you're not sure you'll understand the code later, add some comments). Remember, it is always better to write down the raw arrays than to generate them <em>in a way you don't fully understand</em>.</p>

<pre><code>⍝ OP method: self outer product by pairing (,) on ¯1 1
signs ← , ∘.,⍨ ¯1 1
⍝ Example method 1: generate indexes then power of ¯1
signs ← , ¯1*⍳2 2
⍝ Example method 2: just write down the array
signs ← (1 1)(1 ¯1)(¯1 1)(¯1 ¯1)

⍝ OP method
offsets ← ((⊂⌽),⊂) 2 1
⍝ Example method 1
offsets ← (⌽¨,⊢) ⊂2 1
⍝ Example method 2
offsets ← (1 2)(2 1)
</code></pre>

<p>Of course, there are still other ways to get the <code>moves</code> array.</p>

<pre><code>⍝ Example method 1: extend a starting array with reversals and negations
⍝ I did not do "negation of one element" because it is hard to express
moves ← (⊢,-)(⊢,⌽¨) (1 2)(¯1 2)
⍝ Or if you insist...
moves ← (⊢,-)(⊢,⌽¨)(⊢,-@1¨) ⊂1 2

⍝ Example method 2: generate all moves from ¯2 to 2 in both directions and
⍝ filter those whose sum of absolute values is 3
⍝ assuming ⎕IO←1
tmp ← ,¯3+⍳5 5
moves ← ({3=+/|⍵}¨tmp)/tmp

⍝ Example method 3: you can always do this!
moves ← (1 2)(2 1)(¯1 2)(2 ¯1)(1 ¯2)(¯2 1)(¯1 ¯2)(¯2 ¯1)
</code></pre>

<h2>Nitpicking</h2>

<ul>
<li><code>(¯1 1)</code> at line 4 doesn't need parentheses, because array-forming a.k.a. stranding has higher precedence than function/operator evaluation in APL grammar.</li>
<li>At line 8, you're using two different symbols <code>^</code> (ASCII caret) and <code>∧</code> (Unicode wedge, or mathematical AND symbol) to indicate the same function "boolean AND". While <a href="https://aplwiki.com/wiki/Unicode" rel="noreferrer">APL implementations may accept both</a>, it is not consistent across implementations, so it is advised to always stick to one standard symbol.</li>
</ul>
    </div>