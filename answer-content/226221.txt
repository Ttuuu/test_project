<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Constants should be Constant</h2>

<p>You shouldn't be able to change constants; they should be fixed, non-modifiable values.  In Java, this means declaring them <code>final</code>.</p>

<p>If you create two instances of your class, you'll end up with two instances of <code>lightYear</code>, <code>hoursInDay</code> and so on.  But since these values are fixed compile-time constants, it doesn't make sense to have multiple copies of them.  You just need one copy of these constants, which means declaring them as <code>static</code>.</p>

<p>Things like hours in a day, and days in a year are also fairly general values.  They could be of use in other classes, so it makes sense to make these values sharable, which means <code>public</code>.</p>

<p>Finally, convention is to name constants with an UPPERCASE_NAME.</p>

<p>So ...</p>

<pre><code>public final static long MILES_PER_LIGHT_YEAR = 5878625541248L;

public final static int  HOURS_PER_DAY = 24;
public final static int  DAYS_PER_YEAR = 365;
public final static int  YEARS_PER_CENTURY = 100;
public final static int  YEARS_PER_MILLENNIUM = 1000; // Note: 2 N's
</code></pre>

<h2>Time Conversion</h2>

<p>As noted by @Sixsmith, the Hours to Days, Years, Centuries, and Millennium calculation is being repeated.  Unfortunately, they went a little far and added <code>System.out.println("Driving the fastest car in space</code> to their <code>hoursConversion()</code> function, so it is not general enough to use for the plane (or eventually, space probe).</p>

<p>Reducing the conversion code slightly produces a reusable function:</p>

<pre><code>public static void output_hour_equivalents(long hours) {

    long days = hours / HOURS_PER_DAY;
    if (days &gt; 0)
        System.out.println(hours + " hours is equivalent to " + days + " days.");

    long years = days / DAYS_PER_YEAR;
    if (years &gt; 0)
        System.out.println(days + " days is equivalent to " + years + " years.");

    long centuries = years / YEARS_PER_CENTURY;
    if (centuries &gt; 0)
        System.out.println(years + " years is equivalent to " + centuries + " years.");

    long millennia = years / YEARS_PER_MILLENNIUM;
    if (millennia &gt; 0)
        System.out.println(years + " years is equivalent to " + millennia + " millennia.");
}
</code></pre>

<p>You could, of course, add "weeks" and "months" to this without loss of generality.  I added tests at each conversion to avoid printing out a zero duration if given a small number of hours, like <code>output_hour_equivalents(10000)</code>.</p>

<h2>Duration for distance at speed</h2>

<p>The conversion from speed and lightyears, for the fastest class of an object, to duration can be moved into a general purpose function.  But we don't want to hard-code too much text.  We want to fly a plane, not drive one, so we should take in the object class, and the action we perform with it, as well as it's maximum speed and the distance to be traversed:</p>

<pre><code>public static void describe_fastest(String object, String action, double max_speed, long light_years) {
    long miles = light_years * MILES_PER_LIGHT_YEAR;
    long hours = (long)(miles / max_speed);

    // Capitalize the first letter of our action, for output. 
    action = action.substring(0, 1).toUpperCase() + action.substring(1);

    System.out.println(action + " the fastest " + object + " in space, would take you " + hours + " hours to travel " + light_years + " light years.");
    output_hour_equivalents(hours);
}
</code></pre>

<p>You can now use this in your method.  For example, from <code>main</code>, borrowing @Sixsmith's variable names:</p>

<pre><code>public static void main(String[] args) {

    long light_years = ...

    describe_fastest("car", "driving", carMph, light_years);
    describe_fastest("plane", "flying", planeMph, light_years);
    describe_fastest("space probe", "traveling in", spaceProbeMph, light_years);
}
</code></pre>

<h2>1 Light Year</h2>

<p>If you provide the value 1 for <code>light_years</code> you'll get something like:</p>

<blockquote>
  <p>Driving the fastest car in space ... to travel 1 light years.</p>
</blockquote>

<p>I hate that "1 light years."  It should be "1 light year."  Singular.  <code>MessageFormat</code> can help us here:</p>

<pre><code>private final static String MSG_FORMAT =
    "{0} the fastest {1} in space, would take you {2} hours to travel " +
    "{3} {3,choice,0#light years|1#light year|1&lt;light years}.";

public static void describe_fastest(String object, String action, double max_speed, long light_years) {
    long miles = light_years * MILES_PER_LIGHT_YEAR;
    long hours = (long)(miles / max_speed);

    // Capitalize the first letter of our action, for output. 
    action = action.substring(0, 1).toUpperCase() + action.substring(1);

    System.out.println(MessageFormat.format(MSG_FORMAT, action, object, hours, light_years));
    output_hour_equivalents(hours);
}
</code></pre>

<p>The format string constant is <code>private</code>, since it is unlikely that anyone else would re-use that string anywhere.</p>

<p>You can also add commas between groups of 3 digits, and other things to make the output a little more pleasing.  See <a href="https://docs.oracle.com/en/java/javase/12/docs/api/java.base/java/text/MessageFormat.html" rel="nofollow noreferrer"><code>MessageFormat</code></a> for details.</p>

<p>You can also make it output "hour" or "hours", "day" or "days", "year" or "years", "century" or "centuries", and "millennium" or "millennia" in the other messages.</p>

<p>Exercise left to student.</p>
    </div>