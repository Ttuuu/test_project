<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Coding style</h3>

<p>This is of course a matter of personal taste, but would split multiple statements like</p>

<blockquote>
<pre><code>var currentIndex = 0; var stringBuffer = ""; var separatedStrings:[String] = []
</code></pre>
</blockquote>

<p>into separate lines </p>

<pre><code>var currentIndex = 0
var stringBuffer = ""
var separatedStrings:[String] = []
</code></pre>

<p>I would also start new lines for nested code blocks, i.e.</p>

<blockquote>
<pre><code>if currentIndex == lastIndex { separatedStrings.append(stringBuffer) }
</code></pre>
</blockquote>

<p>becomes</p>

<pre><code>if currentIndex == lastIndex {
    separatedStrings.append(stringBuffer)
}
</code></pre>

<h3>Correctness</h3>

<p>Your function takes a separator of type <em>string (protocol)</em> as an argument, but actually works only for separators consisting of a single character. Example:</p>

<pre><code>let sampleString = "Do not be sorry. Be better."
print(sampleString.components(separatedBy: ". "))
// ["Do not be sorry. Be better."]
</code></pre>

<p>The reason is that here</p>

<blockquote>
<pre><code>if String(character) == separatorString
</code></pre>
</blockquote>

<p>a single character of the source string is compared with the separator.</p>

<p>Your method also behaves differently from the standard library version when called with an empty string, </p>

<pre><code>"".components(separatedBy: ".")
</code></pre>

<p>returns an empty array <code>[]</code> instead of a single-element array <code>[""]</code>. The reason is that the check</p>

<blockquote>
<pre><code>if currentIndex == lastIndex { separatedStrings.append(stringBuffer) }
</code></pre>
</blockquote>

<p>is never done for an empty input string. (Checking for the last iteration <em>inside</em> a loop always makes me suspicious.)</p>

<h3>Simplifications</h3>

<p>Instead of converting a character to a string for appending</p>

<blockquote>
<pre><code>stringBuffer += .init(character)
</code></pre>
</blockquote>

<p>you can append it directly:</p>

<pre><code>stringBuffer.append(character)
</code></pre>

<p>Keeping track of the current character position can be done with
<code>enumerated()</code></p>

<pre><code>for (currentIndex, character) in self.enumerated() {
    // ...
}
</code></pre>

<p>instead of incrementing <code>var currentIndex</code>.</p>

<h3>Efficiency</h3>

<p>The main bottleneck is the</p>

<pre><code>var lastIndex:Int
</code></pre>

<p>extension method. For Strings (and other collections which are not random accessible) determining <code>self.count</code> is a O(N) operation (N = number of characters). It requires traversing the entire string.</p>

<p>This method is called for each character in the source string, so that this contributes O(N^2) to the execution time.</p>

<p>It would also be more efficient to locate the next occurrence of the separator and append an entire substring to the result array, instead of appending single characters repeatedly.</p>

<h3>Alternative implementation</h3>

<p>Here is an alternative implementation, considering the above suggestions:</p>

<pre><code>func components&lt;T&gt;(separatedBy separatorString: T) -&gt; [String]
    where T: StringProtocol, Index == String.Index {
        var separatedStrings: [String] = []
        var pos = startIndex
        while let range = self[pos...].range(of: separatorString) {
            separatedStrings.append(String(self[pos..&lt;range.lowerBound]))
            pos = range.upperBound
        }
        separatedStrings.append(String(self[pos...]))
        return separatedStrings
}
</code></pre>
    </div>