<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Style</h1>

<p>There's a few inconsistent stylistic choices, mostly regarding whitespace.</p>

<pre><code> howMany=99                        // no spaces around "="
 let bottle = pluralizeBottles(i); // spaces around "="
</code></pre>

<h1>Let</h1>

<p>There's nothing <em>wrong</em> with the way you use <code>let</code>, but when talking about <code>let</code> you usually also talk about <code>const</code> since they're available since the same ES version.</p>

<p>You never mutate any of the variables you declare and initialize with <code>let</code>, which means they can all be changed to <code>const</code>.</p>

<pre><code>// old
let bottle = pluralizeBottles(i);

// new
const bottle = pluralizeBottle(i);
</code></pre>

<p>This is also true for the <code>for</code> loop.
By using <code>const</code>, you ensure that you never do an assignment to <code>it</code>.</p>

<pre><code>// old
for (let it of bottlesOfBeer()) {

// new
for (const it of bottlesOfBeer()) {
</code></pre>

<h1>Helper functions</h1>

<p>Do not put your helper functions inside the generator.
They will be created each time the generator is called -- there's no need for this.
Move them outside.
If you want to make them private, use modules (since we're talking about ES6), and just don't export them.</p>

<p>I'd also create more util functions.
For example, the following line is a bit too long and complex.
It's more complex than your <code>pluralizeBottles</code> function, so there's no reason why this shouldn't be extracted as well.</p>

<pre><code>let toTake = i &gt; 1 ? "one" : (i == 1 ? "it" : "no more");
</code></pre>

<h1>Usage of generators</h1>

<p>Your usage of generators is good.
This is the type of problem they're created for.</p>
    </div>