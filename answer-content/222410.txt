<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>BUG Report</strong><br>
The function <code>void insert_node_after(node_t * head_node, int insert_location, int val)</code> contains at least one bug, which is a typo and may contain more bugs in the <code>then</code> clause of the third if statement. The typo is</p>

<pre><code>        run == FALSE;
</code></pre>

<p>which should be an assignment statement with a single equal sign. The full context is shown below:</p>

<pre><code>        if (current-&gt;next == NULL)
        {
            /** Adds the node at the end if we reached the end **/
            node_t * new_node = (node_t *) malloc(sizeof(node_t));

            if (new_node == NULL)
                exit(1);

            current-&gt;next = (node_t *) malloc(sizeof(node_t));
            current-&gt;next-&gt;val = val;
            current-&gt;next-&gt;next = NULL;
            run == FALSE;
        }
        else
        {
            current = current-&gt;next;
        }
</code></pre>

<p><strong>Report Errors</strong><br>
The code checks for a failed call to <code>malloc(size_t)</code> in some instances and exits, however, it never reports that <code>malloc</code> failed so anyone using the program would wonder why the program failed. Prior to calling exit(1) it might be better to report the error to <code>stderr</code>. Note that the error check is not performed in <code>void push_front(node_t ** head_node, int val)</code>, and it is missing after the third <code>malloc</code> in <code>void insert_node_after(node_t * head_node, int insert_location, int val)</code>.</p>

<p><strong>Prefer setjmp and longjmp Over exit(1)</strong><br>
Some programs such as operating systems should never call <code>exit(int status)</code>. Many more programs may need to clean up things, such as closing files, detaching from databases or deleting memory. It might be better to <a href="http://www.cplusplus.com/reference/csetjmp/setjmp/" rel="nofollow noreferrer">call setjmp() in main() and then execute a longjmp</a> if <code>malloc(size_t)</code> fails. This is discussed in greater detail in this <a href="https://stackoverflow.com/questions/14685406/practical-usage-of-setjmp-and-longjmp-in-c">stackoverflow question</a>.</p>

<p><strong>Use System Defined Symbolic Constants Rather than Magic Numbers</strong><br>
The code already references stdlib.h, which contains the system defined constants <a href="https://stackoverflow.com/questions/8867871/should-i-return-exit-success-or-0-from-main">EXIT_SUCCESS and EXIT_FAILURE</a>. Since these constants are always defined in stdlib.h the code will be more portable if they are used, and it also makes the code more readable:</p>

<pre><code>main()
{
    ...
    return EXIT_SUCCESS;
}

exit(EXIT_FAILURE);
</code></pre>

<p><strong>Basic Principles When Writing Code</strong><br>
One of the earliest principles all programmers learn is <a href="https://en.wikipedia.org/wiki/Don%27t_repeat_yourself" rel="nofollow noreferrer">Don't Repeat Yourself</a>, usually shortened to DRY code. Basically anytime you have code that repeats it would be better to put it into a loop or a function where the code is reused.</p>

<p>A second principle that should be taught early but is part of more complex programming is the <a href="https://en.wikipedia.org/wiki/Single_responsibility_principle" rel="nofollow noreferrer">Single Responsibility Principle</a> which states that every module, class, or function should have responsibility over a single part of the functionality provided by the software, and that responsibility should be entirely encapsulated within the function, module or class. This reduces the size of functions which allows functions to be more readable, maintainable and easier to debug. It also allows the programmer to debug the code only once rather than multiple times.</p>

<p>The code to create and fill a node is repeated 5 times, it might be better to write a function that creates and fills a node:</p>

<pre><code>node_t * create_node(int val, node_t *next_node)
{
    node_t * new_node = malloc(sizeof(*new_node));
    if (new_node == NULL)
    {
        fprintf(stderr, "malloc for new_node failed.\n");
        exit(EXIT_FAILURE);  // replace with call to longjmp here.
    }

    new_node-&gt;val = val;
    new_node-&gt;next = next_node;

    return new_node;
}
</code></pre>

<p>In the function above sizeof(*new_node) was used for the size of the <code>malloc()</code> this allow the programmer to edit once to change the type of a variable rather than edit in two places this can prevent some programming errors when maintaining code.</p>

<p><strong>Keep It Simple</strong><br>
The function <code>void print_nodes(node_t * head)</code> contains a simpler loop to traverse the linked list. This might be better than using the variable <code>run</code> that is used in the other traversals of the linked list.</p>
    </div>