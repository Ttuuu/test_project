<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><em>disclaimer: "bad" is simply a way of saying it's not the best way.</em></p>

<p>If we were in the early 2000s this would probably be relatively clean code, however javascript has advanced a lot since then (current version: <a href="/questions/tagged/es6" class="post-tag" title="show questions tagged 'es6'" rel="tag">es6</a>)</p>

<p>Take some time to check what's <a href="http://es6-features.org/#Constants" rel="nofollow noreferrer">new</a>.</p>

<hr>

<p>Best practices today is to completely separate HTML / JS / CSS (unless you're using <a href="/questions/tagged/vue" class="post-tag" title="show questions tagged 'vue'" rel="tag">vue</a>, <a href="/questions/tagged/react" class="post-tag" title="show questions tagged 'react'" rel="tag">react</a>, <a href="/questions/tagged/angular" class="post-tag" title="show questions tagged 'angular'" rel="tag">angular</a>)</p>

<ul>
<li>Cleaner code</li>
<li>Logic separation</li>
<li>Reusability</li>
<li>Easier to maintain</li>
</ul>

<p>So the following should not appear in your HTML.</p>

<pre><code>/// bad
onclick="double_increment()"
</code></pre>

<pre><code>/// good
const button = document.getElementById("some_id");
button.addEventListener("click", double_increment);
</code></pre>

<hr>

<p>There is <strong>always</strong> a better alternative than <code>&lt;br/&gt;</code> and it's not <a href="https://en.wikipedia.org/wiki/Semantic_Web" rel="nofollow noreferrer">semantic</a></p>

<p>Don't use it.</p>

<hr>

<p><code>const</code> before <code>let</code> and <code>let</code> before <code>var</code></p>

<p>Always declare your variables with <code>const</code> by default. If you're ok with the variable mutating then use <code>let</code>. Don't use <code>var</code> unless you know what you're doing and you actually need it.</p>

<p><em>note: <code>push</code>ing an element to an array (declared with <code>const</code>) does not mutate the variable, just the array. Thus no error.</em></p>

<hr>

<p>Do <strong>not</strong> hardcode your html element id in your function.</p>

<pre><code>function Incrementer(name, value) {
   /// bad
   let mydiv = document.getElementById('mydiv'); 
}
</code></pre>

<p>It either needs to be sent via the parameter or accessed statically using <code>class</code></p>

<pre><code>class Incrementer {
   /// still bad though
   static target = "mydiv"
}
</code></pre>

<hr>

<p>Object methods should do what their name infers.</p>

<p>Here, the increment function is supposed to increment the variable, but it does more than that.</p>

<ol>
<li>Gets the text value of the span</li>
<li>Parses the text value</li>
<li>Increases by one</li>
<li>Updates the UI</li>
</ol>

<p>(1) is <em>hacky</em>
(2) completely unneeded
(3) the actual thing your function is supposed to do
(4) updates UI ? not what your function says it does</p>

<pre><code>/// bad
that.increment = function() {
        var i = parseInt(that.span.textContent) + 1;
        that.span.innerHTML = i;
}
</code></pre>

<pre><code>/// better
that.i = value;

//increments value
that.increment = function() {
        that.i++;
}

//updates UI
that.update = function(){
        that.span.innerHTML = that.i;
}

// Method that should be called on button click
that.handleOnClick = function(){
   that.increment();
   that.update();
}
</code></pre>

<hr>

<p>A <code>double_increment</code> function doesn't need to exist. Each Incrementer should add an event listener to the button click.</p>

<pre><code>/// bad
function double_increment() {
    incrementer1.increment();
    incrementer2.increment();
}
</code></pre>

<p><em>See next section add event listener for solution</em></p>

<hr>

<h1>Using class and working example</h1>

<p><a href="/questions/tagged/es6" class="post-tag" title="show questions tagged 'es6'" rel="tag">es6</a> has introduced <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes" rel="nofollow noreferrer"><code>class</code></a></p>

<blockquote>
  <p>JavaScript classes, introduced in ECMAScript 2015, are primarily syntactical sugar over JavaScript's existing prototype-based inheritance. The class syntax does not introduce a new object-oriented inheritance model to JavaScript.</p>
</blockquote>

<p>Thus your <code>Incremental</code> function should be a class instead.</p>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>class Incrementer {

  constructor(incrementId, options) {
  
    const {
      name  = "N/A",
      value = 0,
      target
    } = options;
  
    this.name     = name;
    this.counter  = value;
    this.view     = document.createElement("span");
    
    this.view.id = `#num_${name}`
    
    const button = document.getElementById(incrementId);
    button.addEventListener("click", ()=&gt;this.handleOnClick())

    this.update();        

    const container = document.getElementById(target);
    container.appendChild(this.view);
  }
  
  handleOnClick(){
    this.increment();
    this.update();
  }

  increment() {
    this.counter++;
  }

  update() {
    this.view.innerText = this.counter;
  }
}

const incrementer1 = new Incrementer(
  "increment", 
  {name: "Hello World", value: 3, target: "container"}
);

const incrementer2 = new Incrementer(
  "increment", 
  {name: "Hello World", value: 0, target: "container"}
)</code></pre>
<pre class="snippet-code-css lang-css prettyprint-override"><code>#container {
  display: flex;
  flex-direction: row;
  justify-content: space-evenly;
  align-items: center;
  background-color: darkblue;
}

#container &gt; span {
  padding: 10px;
  background-color: lightblue;
}</code></pre>
<pre class="snippet-code-html lang-html prettyprint-override"><code>&lt;button id="increment"&gt;Increment&lt;/button&gt;
&lt;div id="container"&gt;&lt;/div&gt;</code></pre>
</div>
</div>


<hr>
    </div>