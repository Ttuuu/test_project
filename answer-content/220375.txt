<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The first condition is a bit conservative:</p>

<blockquote>
<pre><code>if (root == null || (root.left == null &amp;&amp; root.right == null))
</code></pre>
</blockquote>

<p>Just <code>if (root == null)</code> would be enough, the rest of the implementation naturally handles the cases of <code>root.left == null &amp;&amp; root.right == null</code>.</p>

<hr>

<p>Evaluating <code>curr != root</code> for every node, when it's only useful for the first node is a bit ugly.
You could get rid of that by not adding <code>root</code> itself on the stack, but its children. (In the right order, and when not null.)</p>

<hr>

<p><code>head</code> is a misleading name for a variable that traverses all the nodes,
especially since the end result is effectively a linked list,
where "head" usually means the first element.
I'd rename this to <code>node</code>.</p>

<hr>

<p>All the <code>curr.right = null;</code> can be safely dropped,
because <code>curr.right</code> will either get overwritten with the intended value,
or it's <code>null</code> to begin with (in the very last node).</p>

<hr>

<p>An <span class="math-container">\$O(n)\$</span> solution exists without using a stack:</p>

<ul>
<li>When left is null and right is not, advance over right</li>
<li>When right is null and left is not, move left to right and advance over right</li>
<li>When both not null of <code>node</code>, then:

<ul>
<li>traverse through all the right descendants of <code>node.left</code>, and append at the end <code>node.right</code></li>
<li>move <code>node.left</code> to <code>node.right</code> and advance over it</li>
</ul></li>
</ul>
    </div>