<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Design</h2>

<p>The <a href="https://en.wikipedia.org/wiki/Single_responsibility_principle" rel="nofollow noreferrer">"Single Responsibility Principle"</a> says (paraphrasing) that a class should be responsible for only one thing. <code>TemporalBuffer</code> contains the circular buffer implementation, but also logic for dealing with time-stamps etc.</p>

<p>It would be cleaner to move the circular buffer implementation to a separate class (which would also make it easier to switch out one implementation for another if necessary).</p>

<p>I'd suggest defining your own iterator to go with the circular buffer class, which would allow operations like <code>find</code>, <code>remove</code> etc. using the <code>std::</code> algorithms.</p>

<h2>Code</h2>

<p>The <code>Sample</code> comparison operators don't seem to be used anywhere and could be confusing (it seems arbitrary to have the operator compare the timestamp instead of the data). It might be better to just compare timestamps directly where necessary.</p>

<p><code>AgeLimit</code>, <code>Head</code> and <code>Tail</code> are not useful typedefs. They hide the actual type of the variables, and imply a type difference that doesn't exist (head and tail are the exact same type). The <code>Clock</code> and <code>DataSet</code> declarations are fine. <code>TimePoint</code> and <code>Duration</code> are ok, though they don't save much typing and hide the relationship with the <code>Clock</code> type.</p>

<p><code>Clean</code> should probably use <code>IncrementIterator</code>.</p>

<p>The member initializer list can be used for all variables in the <code>TemporalBuffer</code> constructor, not just <code>mAgeLimit</code>.</p>

<p><code>startingBufferSize</code> should be a <code>std::size_t</code>, not an int and if it's set to <code>0</code> as an initial value, the program will crash. This needs to at least be checked in code with an assertion.</p>

<p>If I'm not mistaken, <code>AddSample</code> can use <code>IncrementIterator</code> to find the next head position, and compare it with <code>mTail</code> in place of those rather complicated <code>if</code> statements. The "growing" of the container should probably be in a separate function.</p>

<p><code>IncrementIterator</code> increments the iterator once using <code>std::next</code>, and then again using <code>it++</code>. This could be simplified. It would also be more flexible to model it after <code>std::next</code> and return a value, instead of altering a reference.</p>

<p><code>GetSamples()</code> and <code>GetRange()</code> should be <code>const</code>. This requires a <code>const</code> version of <code>IncrementIterator</code> that takes a <code>DataSet::const_iterator</code>. Certain variables (<code>auto</code> variables assigned from <code>mHead</code> and <code>mTail</code> in the const functions) may need explicit types, or a call to the <code>DataSet::const_iterator</code> constructor that takes a non-const iterator.</p>

<p>In the <code>for</code> loops in <code>GetSamples</code> and <code>GetRange</code>, the <code>IncrementIterator</code> call can be in the iteration expression in the loop header, rather than in the body of the loop.</p>

<p><code>GetNearest()</code> should also be <code>const</code>.</p>

<p>Prefer the c++11 facilities in the <code>&lt;random&gt;</code> header to calling <code>rand()</code>.</p>
    </div>