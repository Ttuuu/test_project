<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The overhead of creating a dictionary makes the solution less efficient for small lists.</p>

<p>This sequential alternative:</p>

<pre><code>for i,n in enumerate(nums):
    if target-n in nums:
        return (i,nums.index(target-n))
</code></pre>

<p>is about twice as fast in the best case scenarios (a small list with a match in the lower indexes) but it will lose out when there are more items in the list.</p>

<p>A more concise way to write the dictionary based approach (which happens to also run faster) would be this:</p>

<pre><code>match = dict()
for i,n in enumerate(nums):
    if n in match: return (i,match[n])
    match[target-n] = i
</code></pre>

<p>You can get further acceleration (for large lists) by filtering on the maximum range of eligible numbers:</p>

<pre><code>maxVal = target-min(nums)
minVal = target-max(nums)
match = dict()
for i,n in enumerate(nums):
    if  n &lt; minVal or n &gt; maxVal: continue
    if n in match: return (i,match[n])
    match[target-n] = i
</code></pre>

<p><em>note that this is going to be data dependent but on average it should provide an improvement</em></p>
    </div>