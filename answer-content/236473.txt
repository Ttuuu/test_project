<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Does this code work?  The _featureIndicatorFlagCache is set right away and is never cleared out.  So the check if it's null will always be false and send back just he default and never execute GetProjectFeatureIndicatorsStatusAsync.  </p>

<p>I assume you want to cache the call to GetProjectFeatureIndicatorsStatusAsync but you won't be able to store that in one property unless it's a dictionary as I assume the data it returns is based on projectId. </p>

<p>If you want an example of a simple caching you can use the <code>Lazy&lt;Task&lt;&gt;&gt;</code> in the dictionary.  The Lazy will only execute once and return the same task back to all the callers.  I would just use the ConcurrentDictionary as not have to deal with the locking myself. </p>

<pre><code>public static ConcurrentDictionary&lt;Guid, Lazy&lt;Task&lt;ProjectFeatureIndicatorMetadata&gt;&gt;&gt; _cache =
    new ConcurrentDictionary&lt;Guid, Lazy&lt;Task&lt;ProjectFeatureIndicatorMetadata&gt;&gt;&gt;();
</code></pre>

<p>The the cache method would look something like this</p>

<pre><code>public virtual Task&lt;ProjectFeatureIndicatorMetadata&gt; GetProjectFeatureIndicatorMetadata(
    Guid projectId)
{
    // This is optional just removes any tasks that have been faulted to re-execute 
    if (_cache.TryGetValue(projectId, out var result))
    {
        // IsFaulted will be false while task is in flight - this is what we want and don't want to block on it
        if (result.Value.IsFaulted)
        {
            // cast as dictionary to get remove that also checks the value along with the key
            var cacheDictionary = (IDictionary&lt;Guid, Lazy&lt;Task&lt;ProjectFeatureIndicatorMetadata&gt;&gt;&gt;) _cache;
            cacheDictionary.Remove(
                new KeyValuePair&lt;Guid, Lazy&lt;Task&lt;ProjectFeatureIndicatorMetadata&gt;&gt;&gt;(projectId, result));
            result = null;
        }
    }

    if (result == null)
    {
        result = _cache.GetOrAdd(projectId, id =&gt; new Lazy&lt;Task&lt;ProjectFeatureIndicatorMetadata&gt;&gt;(GetProjectFeatureIndicatorsStatusAsync(id)));
    }

    return result.Value;
}
</code></pre>
    </div>