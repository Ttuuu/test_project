<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Optimization</h3>

<p>You can achieve a significant perfomance improvement by using a so-called 'dirty rectangles' approach. Instead of calculating the color-distance of every single pixel every single time, you only need to recalculate the distance of pixels that have been modified. Every step, you're eliminating two genomes, so they will have to be fully recalculated. You're also mutating another genome, which only affects a single property of a single rectangle, so you only need to recalculate pixels affected by that change. All the other genomes are unaffected, so they don't need to be recalculated at all. Some quick testing shows that this can make things up to 10x faster.</p>

<h3>Design</h3>

<p>The <code>Chromosome</code>, <code>Genome</code> and <code>Genepool</code> classes are tightly coupled to <code>Form1</code>. They're also difficult to use correctly due to various implicit assumptions and a lack of protection against inconsistent state:</p>

<ul>
<li>Instead of depending on 'constants' in <code>Form1</code>, pass in the number of chromosomes and genomes via the relevant constructors: <code>new Genepool(genomeCount: 10, chromosomeCount: 32)</code>. The same goes for <code>Random</code> - pass it to the constructors or methods that need it. This makes dependencies clearly visible, and makes it easier to reuse these classes in a different context.</li>
<li>Instead of setting <code>Chromosomestring</code> and then having to call <code>DecodeChromosomeString</code>, create a <code>void Decode(string chromosomeString)</code> method. This forces a caller to provide the required data. And instead of calling <code>EncodeChromosomeString</code> and then fetching <code>Chromosomestring</code>, create a method <code>string Encode()</code> that returns that string directly. This clearly presents the resulting data to the caller.</li>
<li><code>Chromosome.Rectangle</code> and <code>Chromosome.RectangleColor</code> can easily go out-of-sync with the properties they depend on. All properties having public setters doesn't exactly make it easy to maintain a consistent state. Creating a rectangle or color upon request (such as <code>public Rectangle Rectangle =&gt; new Rectangle(X, Y, Width, Height);</code>) would simplify this.</li>
</ul>

<h3>Other notes</h3>

<ul>
<li>C# supports auto-properties, so you don't explicitly need to define a backing field: <code>public int X { get; set; }</code>. The setter can be left out or made private for read-only properties or properties that should only be modified from within the class itself. Nowadays it's also possible to initialize properties: <code>public string Name { get; set; } = "Unknown";</code>.</li>
<li>Why are all <code>Chromosome</code> properties of type <code>ulong</code>? There's a comment stating they'll only have values ranging from 0-255, so <code>byte</code> seems more appropriate. Otherwise, <code>int</code> is typically used by default.</li>
<li>You may want to document the purpose of <code>GrayEncode</code> and <code>GrayDecode</code>. Apparently Gray encoding reduces the frequency of 'radical' mutations?</li>
<li>Instead of doing <code>for (int i = 0; i &lt; constantName; i++)</code>, consider doing <code>for (int i = 0; i &lt; array.Length; i++)</code>. That'll work regardless of whether <code>array</code> was initialized using a constant or a more dynamic value.</li>
<li><code>Genepool</code> creates and contains a bunch of bitmaps, but <code>Form1.Evolve</code> disposes them. It's better to clearly define 'ownership'. In this case, <code>Genepool</code> creates and uses these images, so it should also dispose them (and so it should also implement <code>IDisposable</code> itself).</li>
<li>Why create new bitmaps instead of reusing old ones?</li>
<li><code>SolidBrush</code>es should be disposed. For common colors, you can use <code>Brushes.&lt;colorname&gt;</code> instead of creating a new brush.</li>
</ul>

<p><code>Genome.MutateGenome</code> can be simplified to:</p>

<pre><code>var chars = genomestring.ToCharArray();
var mutationIndex = r.Next(0, chars.Length);
chars[mutationIndex] = chars[mutationIndex] == '0' ? '1' : '0';
genomestring = new string(chars);
</code></pre>

<p><code>GenePool.SortScores</code> can be simplified to:</p>

<pre><code>scoredIndex = score
    .Select((score, index) =&gt; new { score, index })
    .OrderBy(scoring =&gt; scoring.score)
    .Select(scoring =&gt; scoring.index)
    .ToList();
</code></pre>

<p>The anonymous object (<code>new { score, index }</code>) lets you use more descriptive field names than <code>Key</code> and <code>Value</code>, but otherwise serves the same purpose.</p>
    </div>