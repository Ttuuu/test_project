<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>PHP</h3>

<p>Overall, the methods and functions look a bit long. Look at <code>ArticleController::getArticle()</code> - its more than 50 lines! Pretend you are a teammate who has to modify this code without being very familiar with it. </p>

<p>One way to improve things would be to split out blocks of code into separate methods - especially repeated code like the blocks that instantiate and save <code>Comment</code> objects. This adheres to the <strong>D</strong>on't <strong>R</strong>epeat <strong>Y</strong>ourself principle (i.e. <strong>D.R.Y</strong>). You might also aim to keep the indentation level to one and avoid using the <code>else</code> keyword, as recommended by Rafael Dohms in <a href="https://www.youtube.com/watch?v=GtB5DAfOWMQ" rel="nofollow noreferrer">this presentation about cleaning up code</a>.</p>

<hr>

<p>As was mentioned above, <code>addAnswer</code> and <code>addComment</code> both manipulate a Comment object in very similar ways - many of the common lines could be abstracted to a separate function. In the image below, blue lines represent identical lines that could be abstracted and the purple line is similar - could be abstracted to use a parameter.</p>

<p><a href="https://i.stack.imgur.com/nwYiu.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/nwYiu.png" alt="enter image description here"></a></p>

<p>Also note that the return formats are similar so that could also potentially be abstracted to a separate method.</p>

<hr>

<p>In the method <code>addComment()</code> I see the following:</p>

<pre><code>public function addComment(Request $request, $category, $id, $replyToId)
    {
        $status = 'error';
        $message = '';

        if (!$this-&gt;isGranted('ROLE_USER')) {
            echo 'ne e lognat'; exit;
            $message = 'Трябва да се логнете, за да добавите нов коментар!';
        } else {
</code></pre>

<p>When the condition in the <code>if</code> block evaluates to <code>true</code> then the string literal will be sent to the <code>echo</code> and the program will exit, thus making the next line (which sets <code>$message</code>) unreachable, and thus superfluous. </p>

<hr>

<p>I see a couple places like </p>

<blockquote>
<pre><code>$status = 'error';
</code></pre>
</blockquote>

<p>And then later on:</p>

<blockquote>
<pre><code>$status = "success";
</code></pre>
</blockquote>

<p>One could argue that those values should be stored in constants </p>

<hr>

<p>There are multiple places where a variable is created and assigned immediately before a return statement - e.g. :</p>

<p><code>addToFavourites()</code>:</p>

<blockquote>
<pre><code> $test = 'true';
return new JsonResponse($test);
</code></pre>
</blockquote>

<p><code>likeUnlikeAction()</code>:</p>

<blockquote>
<pre><code>$likes = $article-&gt;getLikes();
return new JsonResponse($likes);
</code></pre>
</blockquote>

<p>There is little point to assigning the value to a variable immediately before it gets used in a return statement. Just use the value in the return statement.</p>

<hr>

<h3>JS</h3>

<p>I see a lot of DOM lookups throughout the various javascript event handlers. Bear in mind that those are not cheap<sup><a href="https://channel9.msdn.com/Events/MIX/MIX09/T53F" rel="nofollow noreferrer">1</a></sup> so it is better to store DOM lookups in a variable (or constant if <a href="/questions/tagged/ecmascript-6" class="post-tag" title="show questions tagged 'ecmascript-6'" rel="tag">ecmascript-6</a> is used - see last section below for more information).</p>

<hr>

<p>Is there really only one element with the class <code>testt</code>? Would there ever be a case where multiple elements with that class would be appropriate? If not, perhaps an <em>id</em> attribute should be used instead (including referencing that element in the JavaScript code). </p>

<hr>

<p>I can't tell which version of jQuery is used but as of version 3.0<sup><a href="https://api.jquery.com/ready/" rel="nofollow noreferrer">2</a></sup> the following syntax is deprecated:</p>

<blockquote>
<pre><code>$( document ).ready(function() {
</code></pre>
</blockquote>

<p>and can be shortened to </p>

<pre><code>$(function() {
</code></pre>

<hr>

<p>Some places in the JavaScript could be simplified using <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind#Partially_applied_functions" rel="nofollow noreferrer">partially applied functions</a>- e.g.:</p>

<blockquote>
<pre><code>success: function(data)
            {
                loadComments(window.location.href + '/true', '', '');
            }
</code></pre>
</blockquote>

<p>could be simplified to something like:</p>

<pre><code>success: loadComments.bind(null, window.location.href + '/true', '', '')
</code></pre>

<hr>

<p>It appears that there are default parameters used on one JavaScript function definition: </p>

<blockquote>
<pre><code>function loadComments (url = '', category = '', article = '', step = 1) {
</code></pre>
</blockquote>

<p><a href="http://es6-features.org/#DefaultParameterValues" rel="nofollow noreferrer">This is a feature</a> of <a href="/questions/tagged/ecmascript-6" class="post-tag" title="show questions tagged 'ecmascript-6'" rel="tag">ecmascript-6</a>, which means that if you are going to use that standard, then you could start using other features like <a href="http://es6-features.org/#Constants" rel="nofollow noreferrer"><code>const</code></a> and <a href="http://es6-features.org/#Constants" rel="nofollow noreferrer"><code>let</code></a> instead of <code>var</code> for scoping variables, <a href="http://es6-features.org/#ExpressionBodies" rel="nofollow noreferrer">arrow functions</a>, etc.</p>

<p><sup>1</sup><sub><a href="https://channel9.msdn.com/Events/MIX/MIX09/T53F" rel="nofollow noreferrer">https://channel9.msdn.com/Events/MIX/MIX09/T53F</a></sub><br>
<sup>2</sup><sub><a href="https://api.jquery.com/ready/" rel="nofollow noreferrer">https://api.jquery.com/ready/</a></sub></p>
    </div>