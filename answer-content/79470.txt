<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>If you concatenate strings inside a loop it is much better to use a stringbuilder.  </p>

<hr>

<p>Instead of placing the whole code in a button click handler and accessing the textboxes, you should give this code an own method which is then called in the handler.  </p>

<hr>

<p>This <code>if</code> condition</p>

<blockquote>
<pre><code>for (int x = 0; x &lt; length; x++)
{
    if (i == j &amp;&amp; rows[j][i] == 0)
    {  
</code></pre>
</blockquote>

<p>can only be true for the first iteration so if you extract the swapping of the array elements to a separate method which is called before this loop, you won't need to check this for every iteration.  </p>

<hr>

<blockquote>
<pre><code>if (rows[j][i] != 0)
{
    d[x] = rows[j][x] / rows[j][i];
}
else
{
    d[x] = rows[j][x];
}  
</code></pre>
</blockquote>

<p>By just setting <code>d[x] = rows[j][x]</code> before the if statement you could reduce this to  </p>

<pre><code>d[x] = rows[j][x];
if (rows[j][i] != 0)
{
    d[x] =  d[x] / rows[j][i];
}
</code></pre>

<p>The same should be done for  </p>

<blockquote>
<pre><code>if (rows[y][i] != 0)
{
    f[g] = rows[y][g] - rows[i][g];
}
else
{
    f[g] = rows[y][g];
}  
</code></pre>
</blockquote>

<hr>

<p>This  </p>

<blockquote>
<pre><code>double val = 0;
int k = length - 2;
double[] result = new double[rows.Length];
for (int i = rows.Length - 1; i &gt;= 0; i--)
{
    val = rows[i][length - 1];
    for (int x = length - 2; x &gt; k; x--)
    {
        val -= rows[i][x] * result[x];
    }
    result[i] = val / rows[i][i];
    if (result[i].ToString() == "NaN" || result[i].ToString().Contains("Infinity"))
    {
        textBox2.Text += "No Solution Found!\n";
        return;
    }
    k--;
}  
</code></pre>
</blockquote>

<p>should be extracted to its own method and should be simplified by removing <code>k</code> and change the inner loop to  </p>

<pre><code>for (int x = length - 2; x &gt; i - 1; x--)  
</code></pre>

<hr>

<p>By extracting the splitting and converting of the <code>string[]</code> to a separate method, you gain in readability and separation of concerns.  </p>

<hr>

<p>Applying the mention points will lead to  </p>

<pre><code>private double[] SolveLinearEquations(string[] input)
{
    double[][] rows = new double[input.Length][];
    for (int i = 0; i &lt; rows.Length; i++)
    {
        rows[i] = (double[])Array.ConvertAll(input[i].Split(' '), double.Parse);
    }
    return SolveLinearEquations(rows);
}

private double[] SolveLinearEquations(double[][] rows)
{

    int length = rows[0].Length;

    for (int i = 0; i &lt; rows.Length - 1; i++)
    {
        if (rows[i][i] == 0 &amp;&amp; !Swap(rows, i, i))
        {
            return null;
        }

        for (int j = i; j &lt; rows.Length; j++)
        {
            double[] d = new double[length];
            for (int x = 0; x &lt; length; x++)
            {
                d[x] = rows[j][x];
                if (rows[j][i] != 0)
                {
                    d[x] = d[x] / rows[j][i];
                }
            }
            rows[j] = d;
        }

        for (int y = i + 1; y &lt; rows.Length; y++)
        {
            double[] f = new double[length];
            for (int g = 0; g &lt; length; g++)
            {
                f[g] = rows[y][g];
                if (rows[y][i] != 0)
                {
                    f[g] = f[g] - rows[i][g];
                }

            }
            rows[y] = f;
        }
    }

    return CalculateResult(rows);
}

private bool Swap(double[][] rows, int row, int column)
{
    bool swapped = false;
    for (int z = rows.Length - 1; z &gt; row; z--)
    {
        if (rows[z][row] != 0)
        {
            double[] temp = new double[rows[0].Length];
            temp = rows[z];
            rows[z] = rows[column];
            rows[column] = temp;
            swapped = true;
        }
    }

    return swapped;
}
private double[] CalculateResult(double[][] rows)
{
    double val = 0;
    int length = rows[0].Length;
    double[] result = new double[rows.Length];
    for (int i = rows.Length - 1; i &gt;= 0; i--)
    {
        val = rows[i][length - 1];
        for (int x = length - 2; x &gt; i - 1; x--)
        {
            val -= rows[i][x] * result[x];
        }
        result[i] = val / rows[i][i];

        if (!IsValidResult(result[i]))
        {
            return null;
        }
    }
    return result;
}

private bool IsValidResult(double result)
{
    return !(double.IsNaN(result) || double.IsInfinity(result));
} 
</code></pre>

<p>which can then be called like  </p>

<pre><code>double[] result = SolveLinearEquations(textBox1.Lines);  

textBox2.Clear();

textBox2.Text = ConvertToString(result);  
</code></pre>

<p>where <code>ConvertToString()</code> will look like  </p>

<pre><code>private string ConvertToString(double[] result)
{
    StringBuilder sb = new StringBuilder(1024);
    for (int i = 0; i &lt; result.Length; i++)
    {
        sb.AppendFormat("X{0} = {1}\r\n", i + 1, Math.Round(result[i], 10));
    }
    return sb.ToString();
}
</code></pre>
    </div>