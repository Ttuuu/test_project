<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>OMDG arrays to manipulate bits</h2>
<p>Bit manipulation is the most basic type of operation a computer can do. These days it can mess with 64 bit in one go. JS number (as signed int 32) is limited to 32 (to keep us in our place)</p>
<p>BTW JS has 8, 16, 32bit signed and unsigned arrays.</p>
<p>In JS you can write binary numbers with the <code>0b</code> prefix. Eg <code>0b111</code> is 7</p>
<p>To swap even odd, you shift all bits to the left <code>&lt;&lt; 1</code> (same as * 2) and mask out <code>&amp; 0b10101010</code> the odd bits. The for the even you shift all bits to the right <code>&gt;&gt; 1</code> similar to <code>/2</code>, mask out the even bits <code>&amp; 0b101010101</code> and add or or the result of the previous shift.</p>
<p>Example show two ways of doing the same thing.</p>
<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>const swapEvenOdd = char =&gt; ((char &lt;&lt; 1) &amp; 0b10101010) | ((char &gt;&gt; 1) &amp; 0b1010101);

const swapEvenOdd2 = char =&gt; ((char * 2) &amp; 170) + ((char / 2) &amp; 85);


console.log(swapEvenOdd(0b01100110).toString(2).padStart(8,"0"))
console.log(swapEvenOdd2(0b01100110).toString(2).padStart(8,"0"))</code></pre>
</div>
</div>

    </div>