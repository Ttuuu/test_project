<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Styles and conventions</h2>
<ul>
<li>The <code>using</code> should <strong>always</strong> be at the top of your file.</li>
<li>Variable names like <code>_f</code> means...? Facing? Face? Force (obviously not, but see where I'm going?)? Don't hesitate to use meaningful variable names. Instead of <code>_f</code>, the variable could be named <code>direction</code> since it's a <code>Direction</code> object.</li>
<li>The indentation of the <code>switch</code> is real bad. But I'd suspect it's because of how you pasted it here, not how your code looks. If the <code>switch</code> in the IDE looks like this, change it because it makes it impossible to read quickly.</li>
</ul>
<h2>OOP / Best practices</h2>
<ul>
<li>If I use a <code>Robot</code> object, I'd expect to be able to see what's its position. What I mean is that <code>_x</code> should be <code>X {public get; private set;}</code>. The same goes for the other properties.</li>
<li>In the <code>Helpers</code> class, <code>startIndex</code> and <code>endIndex</code> should be constants, not variables.</li>
<li>You shouldn't catch <code>Exception</code>. If you catch a specific exception, it shows you understand what could go wrong in the code, that's great.</li>
<li>Your <code>Main</code> "never finishes".</li>
<li>You sometimes check for <code>null</code> input, sometimes not. You should be consistent (a.k.a always use it, in my opinion) when accessing a <code>public</code> method.</li>
<li>I don't think it's the <code>CommandHandler</code>'s responsibility to decide if the robot can move or not (if the placement wasn't made). The <code>Robot</code> class itself should be able to ignore a movement if it isn't placed (or if it causes it to fall). This would also simplify a lot of your checks.</li>
<li>The whole <code>Command</code> pattern invites a <code>Factory</code> pattern. The advantage of doing this is that your <code>CommandHandler</code> class doesn't have the responsibility of knowing all the possible commands and the commands can be easily tested/mocked.</li>
<li>You can also take this "further" and have a <code>Robot</code> class that only maintains the state of the robot and <code>Command</code>s classes where you make the robot move. Once again, this makes testing easier. Like this :</li>
</ul>
<h1></h1>
<pre><code>public class Robot 
{
    public int? X { get; set; }
    public int? Y { get; set; }
    public Direction? Direction { get; set; }

    public bool IsPlaced() =&gt; X == null || Y == null || Direction == null;
}

public interface ICommand
{
    public void Execute(Robot robot);
    public bool Validate(Robot robot);
}

public class MoveCommand : ICommand
{
    public void Execute(Robot robot) { /*Here you can make the robot move*/ }
    public bool Validate(Robot robot) { /*Here you can validate if the command is valid for a robot*/ }
}

public class CommandFactory
{
    public ICommand Create(string command)
    {
        string[] args = Helpers.GetArrayFromSplitInput(command);
    
        switch (args[0]) 
        {
            case "move":
                return new MoveCommand();
            //...
        }
    }
}

public class CommandHandler : ICommandHandler
{
    private readonly CommandFactory commandFactory;

    //I'm skipping the ctor, but I'm sure you get the point

    public void Handle(string commandString)
    {
        ICommand command = commandFactory.Create(commandString);
    
        if (!command.Validate(robot)) return;
    
        command.Execute(robot);
    }
}
</code></pre>
    </div>