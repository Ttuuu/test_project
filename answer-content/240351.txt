<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Lookup for faces</h2>

<p>This:</p>

<pre><code>    if self._face == 1:
        face_str = 'A'
    elif self._face == 11:
        face_str = 'J'
    elif self._face == 12:
        face_str = 'Q'
    elif self._face == 13:
        face_str = 'K'
</code></pre>

<p>would be made simpler and faster if you were to keep a (static) lookup tuple, something like</p>

<pre><code>class Card:  # p.s. don't inherit from object if you're in 3.x
    FACES = (
        None,  # 0 doesn't have a face
        'A',
        *range(2, 11),  # 2 through 10
        *'JQK'
    )

    # ...
    FACES[self._face]
</code></pre>

<h2>Typo</h2>

<p><code>suite</code> is actually <code>suit</code>.</p>

<h2>Conflating presentation and logic</h2>

<p>This:</p>

<pre><code>Card(suite, face)
for suite in '♠♥♣♦'
</code></pre>

<p>shouldn't require that people outside of <code>Card</code> know the special suit characters. Instead, you should make an <code>enum.Enum</code> whose values are set to those characters, and pass that.</p>

<p>This could look like:</p>

<pre><code>class Suit(Enum):
    SPADE = "♠"
    HEART = "♥"
    CLUB = "♣"
    DIAMOND = "♦"

# ...

        self._cards = [Card(suit, face) for suit in Suit]
</code></pre>

<h2>Properties</h2>

<p>This:</p>

<pre><code>@property
def not_bust(self):
    return self._not_bust

@not_bust.setter
def not_bust(self, value):
    self._not_bust = value
</code></pre>

<p>is somewhat of a Java-ism. It's not buying you anything. You're better off just making <code>not_bust</code> a "public" member variable and doing away with the properties (private-by-underscore is more of a suggestion and is not enforced, anyway).</p>

<h2>Return-from-print</h2>

<p>This:</p>

<pre><code>                return print("action completed\n" + "-" * 20)
</code></pre>

<p>does not do what you think it does. <code>print</code> does not return anything, so you are always returning <code>None</code>, which is equivalent to:</p>

<pre><code>print("action completed\n" + "-" * 20)
return
</code></pre>

<h2>Input parsing</h2>

<p>This:</p>

<pre><code>            ans01 = {"yes": True, "no": False}.get(str(input("do you want to hit once more?(yes|no):")).lower(),
                                                   False)
</code></pre>

<p>is more complicated than it needs to be, and is equivalent to</p>

<pre><code>hit_again = input('do you want to hit once more?').lower() == 'yes'
</code></pre>

<p>Also note that you do not need to explicitly convert the return of <code>input</code> to a string, since it is already; and you need a better variable name.</p>

<h2>Set membership</h2>

<pre><code>    elif chosen == "stand" or chosen == "surrender":
</code></pre>

<p>can be</p>

<pre><code>elif chosen in {'stand', 'surrender'}:
</code></pre>

<h2>Booleans and early-return</h2>

<pre><code>        if a == b:
            return "draw"
        elif a &gt; b and a == 21:
            return "win with 21"
        elif a &gt; b and a != 21:
            return "bigger than host"
        else:
            return "lost"
</code></pre>

<p>can be</p>

<pre><code>if a == b:
    return 'draw'
if a &lt; b:
    return 'lost'
if a == 21:
    return 'win with 21'
return 'bigger than host'
</code></pre>

<p>Also, this:</p>

<pre><code>    if check.face == 1:
        return True
    else:
        return False
</code></pre>

<p>can be</p>

<pre><code>return check.face == 1
</code></pre>

<h2>Underscore variables</h2>

<pre><code>    for _ in players:
        if _.bet &lt;= 0:
</code></pre>

<p>should not use an underscore. Underscores, by convention, mean "I won't use this variable", but you do anyway. So just <code>for player in players</code>.</p>
    </div>