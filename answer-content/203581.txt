<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Globally, it works. I have to admit that I am a bit skeptic on your usage of 
a logger. Because a logger is dedicated to log, some can be asynchronous or 
use a buffer or are just disabled. Why don't you use the <code>System.out</code> ?</p>

<p>You have some tests and is a good thing. Sadly, you are only testing the 
<code>ToDoEngine</code> that most of the time delegate to your <em>actions</em> and your actions 
are mocks. The most complex part of your application (the one with the biggest 
number of conditions and branches) is the <code>ToDoView</code>. But this one is not 
tested and this is difficult to do because this class receive inputs and write 
to the console/logger.</p>

<p>A solution would be to create one abstraction for the "output" and another for 
the "input". But this still looks strange to me. </p>

<hr>

<p>After looking at a simple description of the MVC pattern, I have the feeling that 
your view is also your controller:</p>

<blockquote>
  <ul>
  <li>Model:      Represents problem data and operations to be performed on it.</li>
  <li>View :      Presents information from the Model to the user via the display.</li>
  <li>Controller: Interprets inputs from the user and adjust the Model or View 
            accordingly.</li>
  </ul>
  
  <p>-- <a href="https://twitter.com/coreload/status/980212512137166848/photo/1" rel="nofollow noreferrer">https://twitter.com/coreload/status/980212512137166848/photo/1</a></p>
</blockquote>

<p>Let's try to move the <code>Scanner</code> into the controller. This one will still change 
what is displayed to the user via the view:</p>

<pre><code>class ToDoController {
  ToDoView view;
  Scanner in;

  void start() {
    do {
      view.displayMenu();
      action = in.nextInt();
      switch (action) {
        case REGISTER:
          executeRegistrationCase();
        case LOGIN:
          executeLoginCase();
          break;
        default:
          view.showError("Invalid option");
          break;
      }
    } while ( action!=QUIT );
  }

}   
</code></pre>

<p>Because the <code>ToDoView</code> is now a <em>dumb component</em> you can live without testing it. 
The complexity is now in your controller that <em>Interprets inputs from the user 
and adjust the .. View accordingly.</em> </p>

<p>Another improvement that you can do is to create controllers for each use cases.
So that your <code>ToDoController</code> act more as a <em>front controller</em> and drive the 
whole application without knowing all the details. If we go deeper is this idea, 
you can end up by having one controller/action for each menu entry and each of 
them will change a shared model that is the <em>state</em> of your application. </p>

<p><strong>[1]</strong> Smart and Dumb components are mainly used in frontend development but the concept is not new.</p>

<p><strong>[2]</strong> Front controller is one of the J2EE patterns, "request dispatcher" is also used for the same purpose. They are dedicated to Web applications but can be reused in other kind of systems. <a href="http://www.oracle.com/technetwork/java/frontcontroller-135648.html" rel="nofollow noreferrer">http://www.oracle.com/technetwork/java/frontcontroller-135648.html</a></p>
    </div>