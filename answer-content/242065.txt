<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Naming</strong></p>

<p>Class name <code>Solution</code> does not describe the purpose of the class beyond it being a solution to some random assignment. For the sole purpose of archiving exercises I would name the package with the identifier of the assignment and use a more descriptive class name: <code>your.domain.codegym.exercise42.LetterCounter</code> and put the URL to the assignment in the JavaDoc (maybe package.html). BTW: If you haven't done already, I recommend setting up a GitLab repo for your exercises. One of my regrets is that I've lost so much code I wrote when I was young because broken hard disks and obsoleted hardware. We didn't have on-line repos then...</p>

<p>The parameter name <code>args</code> in the <code>countLetters</code> method does not tell what it is supposed to contain and it is misleading as the plural suffix 's' implies that the parameter would contain multiple values. The parameter should be named as <code>fileName</code>.</p>

<p><strong>Unnecessary object initialization</strong></p>

<p>The method <code>countLetters</code> does not rely on any member variable from the <code>Solution</code> class and the counter does not hold any state between invocations to <code>countLetters</code>. There is no need for the method to require a the Solution class to be instantiated. It could very well be a <code>public static void countLetters(...)</code>. If the assignment required that an object is to be initialized, then the requirement is a bit artificial.</p>

<p><strong>Inefficient algorithm</strong></p>

<p>The array that contains the english alphabet letters never changes. It should be a static field in the Solution class. As it is now, your code allocates a new array for the alphabet every time your method is called. But an array like this is also a very inefficient way to look for a letter. As the US-ASCII charset fits in 7 bits and the upper and lower case letters form two consecutive blocks in the <a href="http://www.asciitable.com/" rel="nofollow noreferrer">character table</a>. You can simply compare the character to first and last letter:</p>

<pre><code>if ((ch &gt;= 'A' &amp;&amp; ch &lt;= 'Z') || (ch &gt;= 'a' &amp;&amp; ch &lt;= 'z')) {
    count++;
}
</code></pre>

<p>Note that this approach does not work if the text in the file is in a character set that does not inherit US-ASCII. That would be very very rare these days.</p>

<p><strong>Multiple responsibilities</strong></p>

<p>The <code>countLetters</code> method is a utility method. It should have exactly one purpose so that it does not unnecessarily limit it's usability (also maintaining the <a href="https://en.wikipedia.org/wiki/Single-responsibility_principle" rel="nofollow noreferrer">single responsibility principle</a> helps in maintainability and testability). You should not implement exception handling beyond closing the resources you have acquired in the method. So instead of printing out the error message, you should just let the exception escape and let caller decide how to handle the error.</p>

<p>So the <code>countLetters</code> has three responsibilities: it counts the letters in a file, handles error logging and also implements output handling. Instead of printing the letter count the method should just return the number of letters and let the caller handle the output. Use long instead int. Files can be large.</p>

<pre><code>private long countLetters (String args) throws IOException {
    ...
    return count;
}
</code></pre>

<p><strong>Error handling</strong></p>

<p>For future reference, it is almost never correct to write errors to <code>System.out</code>. The correct stream for errors is <code>System.err</code>. And logging n exception simply with the exeption message causes trouble when you're trying to debug problems, because all the important information in the exception is in the stack trace. If you have to log an exception to the console, simply write <code>ex.printStackTrace();</code>. In the real world you would use a loging framework but still you would log the full stack trace, never just the message.</p>

<p>Add a check to see if the args array in the main method contains exactly one element. If you do not provide parameters to your program now you get an <code>ArrayIndexOutOfBoundsExceltion</code>.</p>

<p><strong>Monolithic code</strong></p>

<p>You've tried to not implement all your logic in the main method, but the attempt falls a bit short because the methods in the Solution class are all private. The only way to access the counter is is still via the main method only. Instead of implementing the main method to the <code>Solution</code>-class you should have two classes: one that implements the letter counting and one that has the main method, which invokes the letter counter class. I.e. separate the letter counting responsibility from the command line processing responsibility. This again follows the single responsiblity principle: the Solution-class is only responsible for counting. All other responsibilities are put into separate modules.</p>
    </div>