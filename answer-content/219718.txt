<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Algorithm</h1>

<p>This is not quite the Sieve of Eratosthenes. The true sieve touches only the multiples of each prime, so it has complexity <span class="math-container">\$n \log \log n\$</span>. Filtering copies the whole list repeatedly, which is equivalent to a different algorithm, <em>trial division</em>, with different complexity (probably <span class="math-container">\$n^2 / (\log n)^2\$</span>). That's a dramatic difference, which led Melissa O'Neill to write a <a href="https://www.cs.hmc.edu/~oneill/papers/Sieve-JFP.pdf" rel="nofollow noreferrer">slightly famous academic rant</a> about this.</p>

<p>But that's not a problem for an educational program. The rest of this review is about your implementation.</p>

<p>Recursing on each prime has depth <span class="math-container">\$\pi(n) \approx n / \log n\$</span>, which will overflow the stack for any large <span class="math-container">\$n\$</span>. Can you do it iteratively instead?</p>

<h1>Names</h1>

<p><code>iterable</code> is a misleading name: the function uses <code>len(iterable)</code>, but iterables don't necessarily support <code>len</code>. So it doesn't work on all iterables.</p>

<p><code>iterable</code> is also an uninformative name: it doesn't say what the argument <em>means</em>. It isn't just any iterable, it's a list of candidate primes, so it could be called <code>candidates</code>.</p>

<p>Similarly, <code>container</code> isn't just any container, it's a list of primes, so it should be called <code>primes</code>. Also, <code>sieve</code> modifies it, which is unusual enough that it requires a comment, and it could even appear in the name: it could be called <code>output_primes</code>.</p>

<h1>Interface</h1>

<p>Modifying an argument is confusing and error-prone. Why not build a list and return it?</p>

<p>Why does the caller need to provide a list of candidates? Wouldn't it be simpler to just pass <code>n</code> and have <code>sieve</code> take care of building the candidates?</p>

<p>If the recursive function needs a different interface from the caller, you can use one function to do the recursion, and wrap it with another that presents a clean interface to the caller.</p>

<h1>Innards</h1>

<p>Repetition: <code>container.append(iterable[0])</code> appears in both branches of the <code>if</code>. It could be moved before the <code>if</code>.</p>

<p>The program checks <code>len(iterable) != 1</code>, so what happens if <code>len(iterable) == 0</code>? Oops: it tries to use <code>iterable[0]</code> and crashes. It's generally safest to check for 0, not 1. This would also get rid of the repetition.</p>

<h1>Optimization</h1>

<p>Improving the algorithm will help a lot more than micro-optimizing. If you switch to the true Sieve of Eratosthenes and it still isn't fast enough, there are algorithmic improvements like the <a href="https://en.wikipedia.org/wiki/Sieve_of_Sundaram" rel="nofollow noreferrer">Sieve of Sundaram</a>.</p>

<p>Before optimizing, measure performance! Optimization is hard and it's easy to get it wrong, so let measurements guide you.</p>

<h1>Other</h1>

<p>This function should have a docstring saying what it does: <code>"Prime number sieve: Given a list of candidates, append the primes to output_primes."</code></p>

<p>Your question says the program uses <code>filter</code>, but it actually uses a list comprehension to do the same thing. This is not a problem with the program, just slightly confusing.</p>
    </div>