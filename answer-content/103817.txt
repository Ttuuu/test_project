<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<pre><code>    double s = 0;           // Our Root that will be returned

    for (unsigned int iter = 1; iter &lt; MAX_ITER; ++iter)
    {
        // stop if converged on root or error is less than tolerance
        if (std::abs(b-a) &lt; TOL)
        {
            std::cout &lt;&lt; "After " &lt;&lt; iter &lt;&lt; " iterations the root is: " &lt;&lt; s &lt;&lt; std::endl;
            return;
        } // end if
        ...
</code></pre>

<p>looks like a bug to me. If <code>lower_bound</code> and <code>upper_bound</code> are within a tolerance of each other, the function will claim that <code>0</code> is root after 1 iteration.</p>

<ul>
<li><p>A <code>crazy conditional statement</code> could and should be simplified. Join both <code>mflag</code> branches, both <code>!mflag</code> branches and realize a common expression into a function:</p>

<pre><code>(mflag &amp;&amp; somefunc(s-b, b-c, TOL) || !mflag &amp;&amp; somefunc(s-b, c-d, tol)
</code></pre>

<p>with</p>

<pre><code>static inline bool somefunc(double x, double y, double tol) {
    return std::abs(x) &lt; std::abs(y)*0.5 || std::abs(y) &lt; TOL;
}
</code></pre>

<p>Of course you need to come up with a descriptive name for <code>somefunc</code>. </p></li>
</ul>
    </div>