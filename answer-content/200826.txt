<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You've misspelt <code>std::size_t</code> throughout, and also <code>std::isdigit</code> (which is missing the necessary include of <code>&lt;cctype&gt;</code> - note also that passing plain <code>char</code> to the character classification functions is risky - cast to <code>unsigned char</code> first).</p>

<p>The in-place modification of your string involves copying increasing parts of it multiple times (even when the replacement string is of the same length).  You can avoid that quite simply by using <code>std::string::replace()</code> instead of <code>erase()</code>+<code>insert()</code>:</p>

<pre><code>            std::string sub = str.substr(i + 1, len);
            int num = std::stoi(sub) + 1;
            str.replace(i + 1, len, std::to_string(num));
</code></pre>

<p>This still leaves a lot of copying when the increment adds a digit (9, 99, 999, ...) - I think your test-case should include at least one of each.  To avoid that problem (and to make the usage more intuitive to the caller), it may be better to write a function that returns a copy of the string (so accept it by const reference):</p>

<pre><code>#include &lt;algorithm&gt;
#include &lt;cctype&gt;
#include &lt;string&gt;

std::string modifyDollarNumber(const std::string&amp; str)
{
    std::string result;
    result.reserve(str.length());
    auto out = std::back_inserter(result);

    auto pos = str.cbegin();
    while (pos != str.cend()) {
        auto dollar_pos = std::find(pos, str.cend(), '$');
        std::copy(pos, dollar_pos, out);
        // no more substitutions?
        if (dollar_pos == str.cend()) { break; }

        // copy the dollar sign
        result += '$';
        pos = dollar_pos + 1;

        // is it followed by a number?
        auto digit_end = std::find_if(pos, str.end(),
                           [](unsigned char c){ return !std::isdigit(c); });
        if (digit_end == pos) { continue; }

        // copy the incremented number
        auto num = std::stoul(std::string{pos, digit_end});
        result.append(std::to_string(num+1));
        pos = digit_end;
    }

    return result;
}
</code></pre>



<pre><code>#include &lt;iostream&gt;
int main()
{
    const std::string str = "$1 $-22 $027 $$ $";
    std::cout &lt;&lt; "Result : " &lt;&lt; modifyDollarNumber(str) &lt;&lt; '\n';
}
</code></pre>

<p>But if raw speed is more important than readability, you'll need to benchmark with some representative inputs to see which is best for you.</p>
    </div>