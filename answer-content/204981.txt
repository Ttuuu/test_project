<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Following problem can be solved using <em>Dynamic Programming</em> in a much efficient way, in term of lines of code and fastest time to perform computation. On top that , following code perform <em>memoization</em> to cache previously computed results.</p>

<pre><code>try:
    from functools import lru_cache
except ImportError:
    # For Python2
    # pip install backports.functools_lru_cache
    from backports.functools_lru_cache import lru_cache
class knapsack:
    """
    Maximize sum of selected weight.
    Sum of selected size is less than capacity.
    Algorithm: Dynamic Programming
    ----
    &gt;&gt;&gt;items = [(4, 12), (2, 1), (6, 4), (1, 1), (2, 2)]
    &gt;&gt;&gt;weight, size   = zip(*items)
    &gt;&gt;&gt;weight = list(weight)
    &gt;&gt;&gt;size = list(size)
    &gt;&gt;&gt;capacity = 15
    &gt;&gt;&gt;knapsack(size, weight).solve(capacity)

    &gt;&gt;&gt;(11, [1, 2, 3, 4])

    """
    def __init__(self, size, weight):
        self.size = size
        self.weight = weight
    @lru_cache()
    def solve(self, cap, i=0):
        if cap &lt; 0: return -sum(self.weight), []
        if i == len(self.size): return 0, []
        res1 = self.solve(cap,  i + 1)
        res2 = self.solve(cap - self.size[i], i + 1)
        res2 = (res2[0] + self.weight[i], [i] + res2[1])
        return res1 if res1[0] &gt;= res2[0] else res2
</code></pre>
    </div>