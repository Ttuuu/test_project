<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Reusable code</h2>

<p>You code is not very flexible, and the frequencies somewhat arbitrary and spanning a large 6 octaves. </p>

<p>You can encapsulate the code in a function that creates an object you use to play the random tone as needed, allowing you to add features as you need.</p>

<h3>Note friendly</h3>

<p>Consider using standard musical notes rather than random frequencies. </p>

<p>To get the frequency of a note you use the expression </p>

<pre><code>freq = 2 ** (note / 12) * 440;
</code></pre>

<p>where note is the number of semi tones from A4 440Hz. So to find C4 which is 3 notes up  <code>2 ** (3 / 12) * 440;</code></p>

<p>To get the closest note to a frequency you use </p>

<pre><code>note = Math.round(Math.log2(freq / 440) * 12);
</code></pre>

<h3>Basic example</h3>

<p>The example creates that object <code>randomNotes</code> and plays musical notes rather than random tones.</p>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>const randomNotes= (() =&gt; {
    
    /* Create the objects needed to play a tone */
    const audio = new AudioContext();
    const volume = audio.createGain(); 
    volume.gain.value = 0.5;
    volume.connect(audio.destination);
    
    /* Function to calculate frequency of a note starting at A4 and stepping semi tones*/    
    const freq = note =&gt; 2 ** (note / 12) * 440; // 440 is the frequency of A4
    const randomNote = () =&gt; notes[Math.random() * notes.length | 0]; // the bitwise Or does the same as Math.floor
    const notes = [-25, -2, 22, 46]; // Close to your 100, 400, 1600 and 6300

    /* Create and return the object that is the randomNote */    
    return {
        play(startIn = 1, playFor = 4) { // startIn and playFor is time in seconds
            const now = audio.currentTime;
            const oscillator = audio.createOscillator();
            oscillator.type = "sine";
            oscillator.connect(volume);            
            oscillator.frequency.value = freq(randomNote());
            oscillator.start(now + startIn);  
            oscillator.stop(now + startIn + playFor);  
        }
    };
})();</code></pre>
</div>
</div>


<p>Then to play a random note just call </p>

<pre><code>randomNotes.play();
</code></pre>

<p>or playing two tones</p>

<pre><code>randomNotes.play();
setTimeout(randomNotes.play, 6000);
</code></pre>

<p>or overlapping tones </p>

<pre><code>randomNotes.play();
setTimeout(randomNotes.play, 3000); // starts half way through the first
</code></pre>

<h3>Reusing the code</h3>

<p>The Advantages of using this approch is that it becomes very easy to extend the functionality. Say you want to add volume control, or be able to add notes to the random list, just add a setter to the object returned,</p>

<pre><code>// from above snippet
/* Create and return the object that is the randomNote */    
return {
    set volume(value) { volume.gain.value = value },
    set note(value) { notes.push(value) }

    // continue on from above snippet
    play(startIn = 1, playFor = 4) { ...
</code></pre>

<p>You can then set the volume in a more abstract way and add notes to the random set with ease.</p>

<pre><code>randomNotes.note = 12; // Add note A5 to the random set
randomNotes.volume = 0.8; // Increase the volume
</code></pre>

<h3>More sound.</h3>

<p>You will notice that there is a new oscillator created each time, and that the audio context's current time continues to tick. It is much more efficient to create one oscillator and change its frequency as needed and using timers to change the volume to start stop the sound. An oscillator can not restart after it has been stopped. </p>

<p>But this is not the best either as the audio context can chew some serious power and CPU even when not playing sound (On some audio hardware). Ideally you suspend the audio context and resume it as needed, in conjunction to using the gain control to start and stop the oscillator, as the audio context can sometimes be a little slow when suspending .</p>

<p>Personally I would create this type of thing using an audio buffer and just write the waveform directly to the buffer then play it.</p>
    </div>