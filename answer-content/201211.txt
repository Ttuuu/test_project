<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your problem statement is to find all primes up to a given input number.  This just screams for a sieve-based solution.  Now IF your problem statement was something like <a href="https://projecteuler.net/problem=7" rel="noreferrer">Project Euler Project 7</a>, which is to find the 10001st prime number, then a prime generator similar to what you've posted would be the better fit.</p>

<p>A couple of things to keep in mind, particularly since you are new to C#.  You need to find the right sized data type.  UInt64 covers really big numbers.  The problem is your solution required a List, which will cause memory issues before you get too far into the UInt32 numbers.</p>

<p>A more practical solution would be to scale your needs down to Int32 first.  This not only uses less memory, but will be faster.  Once you are happy there, then maybe step up to UInt32 and see how that goes.</p>

<p>I have already done such things with sieves from a hobbyist perspective.  You are free to look at it to pick up any ideas.</p>

<p><a href="https://codereview.stackexchange.com/questions/92366/sieve31-my-sieve-of-eratosthenes-returning-ienumerableint?rq=1">Sieve31</a></p>

<p><a href="https://codereview.stackexchange.com/questions/104736/sieve32fastv2-a-fast-parallel-sieve-of-eratosthenes">Sieve32FastV2</a></p>

<p>Both of the above do not return a List, but rather an IEnumerable.  It does keep a compressed internal list in memory, but not of numbers themselves but rather of bits associated with a numeric index.  Besides memory concerns, keep in mind an array is limited to int.MaxValue items.</p>

<p><strong>Other Code Comments</strong></p>

<p>In addition to what @202_accepted wrote, I add:</p>

<p>You mix and match <strong>var</strong> and explicit type declarations.  Actually, you only use <strong>var</strong> once.  I'd suggest for consistency, you stick to one style.</p>

<p>You may simplify <code>(isprime == true)</code> to be <code>(isprime)</code>.</p>

<p>A little whitespace for <code>i&lt;inputnumber</code> becomes easier with <code>i &lt; inputnumber</code>.</p>

<p>As your C# skills improve, you may find yourself breaking your app up into more modular pieces.  Rather than having everything in Main(), you may find a cleaner organization of the code by having it: (1) perform data inputs and validation, (2) run primary method (i.e. generate list of primes), and finally (3) output to console and/or text file.</p>
    </div>