<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<pre><code>// init
const arr = [1, 2, 3, 4, 5];
const K = 9;

// main
const getContiguousElementsSum = (arr, K) =&gt; {
</code></pre>
</blockquote>

<p>It seems to me to be unnecessarily confusing to alias variable identifiers like this.</p>

<hr>

<blockquote>
<pre><code>  if (arr.length === 0 || K &lt; 0) {
    return null;
  }
</code></pre>
</blockquote>

<p>I don't see this anywhere in the specification you've quoted. I would expect the function to handle <code>K === 0</code> by returning <code>[]</code>, and to give <code>[-1,-2,-3]</code> for <code>getContiguousElementsSum([-1,-2,-3,-4], -6)</code>.</p>

<p>Also, since the specification doesn't say anything about error cases, I would assume by default that it should throw something (probably <code>RangeError</code>) if no matching subarray can be found.</p>

<hr>

<blockquote>
<pre><code>  const found = arr.some(x =&gt; {
    sum += x;
    returnResult.push(x);
    return sum === K;
  });
</code></pre>
</blockquote>

<p>It would be kinder to the garbage collector to just track indexes and use <code>slice</code> when you find a match.</p>

<hr>

<blockquote>
<pre><code>  // recursive case
  return getContiguousElementsSum(arr.slice(1), K);
</code></pre>
</blockquote>

<p>The overall complexity of this implementation is <span class="math-container">\$O(n^2)\$</span>. It can be done quite easily in <span class="math-container">\$O(n \lg n)\$</span> in full generality using just arrays, and in <span class="math-container">\$O(n)\$</span> if you have an efficient set implementation, by using the property <span class="math-container">$$\sum_{i=a}^b A[i] = \left(\sum_{i=0}^a A[i]\right) - \left(\sum_{i=0}^{b-1} A[i]\right)$$</span>To build an array of <span class="math-container">\$\left(\sum_{i=0}^a A[i]\right)\$</span> takes linear time; then either convert it into a set or sort it; and for each element in the array of partial sums you need to test for the presence of that partial sum minus the target.</p>

<p>And, of course, it can be done in <span class="math-container">\$O(n)\$</span> time with just arrays if you're guaranteed that the elements are positive, as described in <a href="/a/213212/1402">janos' answer</a>.</p>
    </div>