<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ol>
<li><p>One class per file, and each with a dedicated header, is a pretty heavy-handed attempt at getting novices to modularize. As it is often the case, it is also counter-productive in this case.</p>
</li>
<li><p><code>Link</code> is an internal implementation-detail of <code>LinkList</code> and derived classes, aside from unfortunately and inadvertently being exposed by <code>.delete_at_pos()</code>.</p>
<p>Fix that one return, and make the class private.</p>
</li>
<li><p>As <code>Link</code> is an implementation-detail, there is no sense in trying and failing miserably to hide its details behind a dozen useless public members. Just expose them directly, the only one which <em>might</em> make sense to keep (though that is debatable) is the constructor.</p>
</li>
<li><p>Consider a more descriptive name for <code>LinkList</code>. Maybe <code>ForwardList</code>?</p>
</li>
<li><p>I wonder what <code>linksAddresses</code> is for, aside from taking up space.</p>
</li>
<li><p>There seems to be a lot of stubbed and half-done code left in <code>LinkList</code>. Other code is quite repetitive.</p>
</li>
<li><p>I suggest basing an LRU-cache on a <code>std::vector&lt;T&gt;</code> or if the items are heavy, a <code>std::vector&lt;std::unique_ptr&lt;T&gt;&gt;</code>. Also, just a single free function treating such a an LRU-cache might be good enough.</p>
</li>
<li><p>There is no reason to explicitly mention <code>nullptr</code> all the time for comparisons, this is C++ not Java or C#. Use <code>!</code> for negation as needed.</p>
</li>
</ol>
    </div>