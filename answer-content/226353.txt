<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I tried this in VS2019 and I needed to <code>#include &lt;string&gt;</code> in order to compile. </p>

<p>Then I get a warning for the line </p>

<blockquote>
<pre><code>long product_of_primes = 600851475143;
</code></pre>
</blockquote>

<p>which says</p>

<blockquote>
  <p>truncation from __int64 to long</p>
</blockquote>

<p>which means that <code>long</code> is not enough to hold that number. Since it's positive, I changed that to <code>unsigned long long</code>.</p>

<p>For the remaining review, I'll go through your code from top to bottom, trying to understand it. Whenever I find something, I'll point it out.</p>

<hr>

<p>If you change</p>

<blockquote>
<pre><code>  // Holds the prime factors.
  std::vector&lt;int&gt; primes;
</code></pre>
</blockquote>

<p>to</p>

<pre><code>std::vector&lt;int&gt; prime_factors;
</code></pre>

<p>you can get rid of the comment and the variable becomes self-explaining.</p>

<hr>

<p>The method</p>

<blockquote>
<pre><code>int get_prime_above(int i = 1)
</code></pre>
</blockquote>

<p>IMHO should not support a default value. As you see in your code, you're calling it with</p>

<blockquote>
<pre><code>int current_prime = get_prime_above(1);
</code></pre>
</blockquote>

<p>and seeing a call with the default value</p>

<pre><code>int current_prime = get_prime_above();
</code></pre>

<p>would not make sense to the reader.</p>

<p>Another open question is: which prime above <code>i</code> will the method return? Just any? The next? At this point of understanding and from the comment, I'd propose the name</p>

<pre><code>next_prime_after(int i)
</code></pre>

<p>At the same time, I'd change the parameter <code>i</code> to <code>minimum</code>.</p>

<hr>

<p>I stumbled over the line</p>

<blockquote>
<pre><code>while (target_number &gt; 1) {
</code></pre>
</blockquote>

<p>because I was expecting some other number increasing towards that target. However, your code reduces <code>target_number</code> to become 1. Given that <code>target_number</code> is a product of prime numbers, I would call it <code>product_of_primes</code> instead. Again, you can now remove the comment for that variable.</p>

<hr>

<p>Again, you need a comment to explain what a variable means:</p>

<blockquote>
<pre><code>// Does the target divide by the prime evenly?
long result = product_of_primes % (long)current_prime;
</code></pre>
</blockquote>

<p>Note that the comment asks a yes/no question, which is why I would expect a boolean. However, the <code>result</code> is a <code>long</code>. Also, the cast to <code>(long)</code> seems redundant. My proposal:</p>

<pre><code>bool is_divisor = 0 == product_of_primes % current_prime;
</code></pre>

<p>This also changes the conditional statement to</p>

<pre><code>if (!is_divisor) {
</code></pre>

<p>so the comment here is redundant, so it can be removed:</p>

<pre><code>// If not, move on to the next prime.
current_prime = next_prime_after(current_prime);
</code></pre>

<hr>

<p>In order to simplify the branch we have now:</p>

<pre><code>if (!is_divisor) {
    current_prime = next_prime_after(current_prime);
    continue;
}
</code></pre>

<p>you can initialize <code>current_prime</code> to <code>1</code> and then call <code>next_prime_after()</code> at the beginning of the loop like this:</p>

<pre><code>int current_prime = 1;
while (product_of_primes &gt; 1) {
    current_prime = next_prime_after(current_prime);
    bool is_divisor = 0 == product_of_primes % current_prime;
    if (!is_divisor) continue;
    ...
    current_prime = 1
</code></pre>

<hr>

<blockquote>
<pre><code>product_of_primes = (long)product_of_primes / (long)current_prime;
</code></pre>
</blockquote>

<p>This IMHO has redundant casts and can be simplified to</p>

<pre><code>product_of_primes = product_of_primes / current_prime;
</code></pre>

<blockquote class="spoiler">
  <p> This, however, will change the result from <code>71</code> to the correct value expected by Project Euler to complete the challenge.</p>
</blockquote>

<hr>

<blockquote>
<pre><code>current_prime = 1;
</code></pre>
</blockquote>

<p>IMHO, you don't need to restart at the beginning, since you'll not find prime factors lower than the one you already found.</p>

<p>However, it will not change performance significantly.</p>

<hr>

<p>Instead of reversing</p>

<blockquote>
<pre><code>std::reverse(prime_factors.begin(), prime_factors.end());
</code></pre>
</blockquote>

<p>you can simply get the last element of the vector</p>

<pre><code>std::cout &lt;&lt; "Largest prime: " + std::to_string(prime_factors.back()) &lt;&lt; std::endl;
</code></pre>

<p>or (my preferred option in this case) sort in descending order</p>

<pre><code>std::sort(prime_factors.begin(), prime_factors.end(), std::greater&lt;int&gt;());
</code></pre>

<p>---- <em>Dunno, the horizonal rulers stop working in this line</em></p>

<p>Woah, this is ugly:</p>

<blockquote>
<pre><code>if (current_number &lt;= minimum) {
  current_number++;
  continue;
</code></pre>
</blockquote>

<p>This can simply be replaced by</p>

<pre><code>int current_number = minimum + 1;
</code></pre>

<p>And in consequence the loop can be re-written as</p>

<pre><code>int next_prime_after(int minimum) {
    int current_number = minimum + 1;
    while (!is_prime(current_number)) {
        current_number++;
    }
    return current_number;
}
</code></pre>

<hr>

<p>In that same method, we probably get a performance benefit of a factor of 2 if you move to odd numbers. </p>

<pre><code>int next_prime_after(int minimum) {
    int current_number = minimum + 1;
    current_number += minimum % 2; // ensure odd number
    while (!is_prime(current_number)) {
        current_number += 2;
    }
    return current_number;
}
</code></pre>

<hr>

<p>A had a WTF moment here:</p>

<blockquote>
<pre><code>float result = ((float)number / (float)tmp);
// If the result has decimals, it doesn't divide equally
// so return false.
if (!has_decimals(result)) {
</code></pre>
</blockquote>

<p>Why? Because you already did a proper divisability check somewhere else (cited from the original code):</p>

<blockquote>
<pre><code>// Does the target divide by the prime evenly?
long result = target_number % (long) current_prime;
</code></pre>
</blockquote>

<p>That way, you can get rid of the whole method <code>has_decimals()</code>.</p>

<hr>

<blockquote>
<pre><code>for (int tmp = number - 1; tmp &gt; 1; tmp--) {
</code></pre>
</blockquote>

<p>When you learned dividing numbers in school, did you start by dividing an arbiotrary number like 56 by it's predecessor 55 to check if it is a prime factor? Certainly not. So let's not do it in your code as well. Go simple: check if 56 is divisable by 2.</p>

<p>Oh, and BTW: if you can't divide 56 by 2, you can also not divide it by anything &gt; 28, right? Make a huge performance impact of a factor ~10.</p>

<pre><code>bool is_prime(int number) {
    for (int divisor = 2; divisor &lt; number/2; divisor++) {
        bool is_divisor = 0 == number % divisor;
        if (is_divisor) {
            return false;
        }
    }
    return true;
}
</code></pre>

<p>This could be reduced to <code>sqrt(2)</code> instead of number/2 if you think about it.</p>

<p>Starting at 3 and testing odd numbers only will increase by another factor of 2:</p>

<pre><code>bool is_prime(int number) {
    if (number % 2 == 0) return false;
    for (int divisor = 3; divisor &lt; number/2; divisor+=2) {
        bool is_divisor = 0 == number % divisor;
        if (is_divisor) {
            return false;
        }
    }
    return true;
}
</code></pre>

<hr>

<p>For this Project Euler question, <code>int</code> prime factors see to be good enough. For general purpose factorization, you should consider at least <code>long</code>.</p>

<hr>

<h3>My final proposal for you</h3>

<pre><code>#include &lt;iostream&gt;
#include &lt;vector&gt;
#include &lt;algorithm&gt;
#include &lt;string&gt;
#include "fibonacci.h"
#include &lt;limits&gt;

int next_prime_after(long minimum);
bool is_prime(long number);

int main() {

    unsigned long long product_of_primes = 600851475143;
    std::vector&lt;int&gt; prime_factors;

    int current_prime = 1;
    while (product_of_primes &gt; 1) {
        current_prime = next_prime_after(current_prime);
        bool is_divisor = 0 == product_of_primes % current_prime;
        if (!is_divisor) continue;

        prime_factors.push_back(current_prime);
        product_of_primes = product_of_primes / current_prime;
        current_prime--;
    }

    std::sort(prime_factors.begin(), prime_factors.end(), std::greater&lt;int&gt;());
    std::cout &lt;&lt; "Largest prime: " + std::to_string(prime_factors[0]) &lt;&lt; std::endl;
}

/**
 * Get the next prime number above minimum.
 * @param minimum
 * @return
 */
int next_prime_after(long minimum) {
    long current_number = minimum + 1;
    current_number += minimum % 2; // ensure odd number
    while (!is_prime(current_number)) {
        current_number += 2;
    }
    return current_number;
}

/**
 * Is the given number a prime?
 * @param number
 * @return bool
 */
bool is_prime(long number) {
    if (number % 2 == 0) return false;
    for (long divisor = 3; divisor &lt; number/2; divisor+=2) {
        bool is_divisor = 0 == number % divisor;
        if (is_divisor) {
            return false;
        }
    }
    return true;
}
</code></pre>

<h3>Summary</h3>

<p>I hope you agree with my proposals and see that the resulting code is</p>

<ul>
<li>easier to read</li>
<li>bug fixed</li>
<li>faster by a factor of ~100 (measured using <code>QueryPerformanceCounter()</code>)</li>
</ul>
    </div>