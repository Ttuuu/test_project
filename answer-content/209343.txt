<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I have made some names a bit more obvious with respect to their purpose.</p>

<p>The inconvenience of using a parameter stack can be overcome, by creating a class <code>ViewingQuery</code> which encapsulates the sql query as well as its parameters.</p>

<p>This could be instantiated as an immutable object, which gets transformed by the <code>ViewingQueryComponent</code>s' <code>composeViewingQuery()</code> method.</p>

<p>The guard condition can be implemented within the <code>ViewingQuery</code> class.</p>

<p>An object of the <code>ViewingQuery</code> class named <code>compositeViewingQuery</code> shall be composed in the <code>SubjectInfoViewer</code> class.</p>

<p>The <code>composeViewingQuery()</code> in the <code>SubjectInfoViewer</code> shall transform the <code>ViewingQuery</code> and assign it to <code>compositeViewingQuery</code></p>

<p>Although this approach provides nice abstraction and better adheres to the single responsibility principle, it has an accidental complexity built into it.</p>

<p>The accidental complexity is that, <code>getViewTableModel()</code> is dependent on the state changed by <code>composeViewingQuery()</code>. Hence the sequence of invocation of these methods becomes important.</p>

<p>One way to overcome this accidental complexity, is by making the <code>composeViewingQuery()</code> method in the <code>SubjectInfoViewer</code> private, and calling it from <code>getViewTableModel()</code> and removing the attribute <code>compositeViewingQuery</code> at the cost of violating single responsibility principle. This move would also make testing hard.</p>

<p>Another way to overcome this accidental complexity, is by having the <code>composeViewingQuery()</code> method of <code>SubjectInfoViewer</code> return the compositeViewingQuery. Then remove the <code>getViewTableModel</code> method. This way, the client directly calls the <code>getSubjectDetails</code> method of DBGateway by passing the value returned from <code>composeViewingQuery</code>. This may be the best approach. </p>

<p>Also, the current solution can be improved by passing an instance of <code>ViewingQuery</code> as a parameter for <code>composeViewingQuery()</code> in order to improve readability.</p>

<p>The following is the refactored code:</p>

<p><strong>ViewingQuery.java</strong></p>

<pre><code>public class ViewingQuery {

private final List&lt;String&gt; parameterList;
private final String baseQuery;
private final String queryFilters;

ViewingQuery(){
    parameterList=new ArrayList&lt;&gt;();
    baseQuery="";
    queryFilters="";
}
ViewingQuery(List parameterList,String queryFilter,String baseQuery){
    this.parameterList=parameterList;
    this.baseQuery=baseQuery;
    this.queryFilters=queryFilter;
}

public ViewingQuery withFilter(String queryFilter,String ... parameters){
    if(!CheckHelper.checkEmpty(parameters)){
        List&lt;String&gt; newParameterList=getNewParameterList(parameters);
        return new ViewingQuery(newParameterList,this.queryFilters+" and "+queryFilter,this.baseQuery);
    }
    return this;
}

private List&lt;String&gt; getNewParameterList(String[] parameters) {
    List&lt;String&gt; newParameterList=new ArrayList&lt;&gt;();
    newParameterList.addAll(this.parameterList);
    newParameterList.addAll(Arrays.asList(parameters));
    return newParameterList;
}
public ViewingQuery withBaseQuery(String baseQuery,String ... parameters){
    List&lt;String&gt; newParameterList=getNewParameterList(parameters);
    return new ViewingQuery(newParameterList,this.queryFilters,baseQuery);
}   
public String getQuery(){
    if(CheckHelper.checkEmpty(baseQuery))
        return "";
    return baseQuery+queryFilters+" GROUP BY STATUS.Topic_Name,QUESTION_BANK.Question_Statement";
}
public List&lt;String&gt; getParameterList(){
    return parameterList;
}
</code></pre>

<p>}</p>

<p><strong>SubjectInfoViewer.java</strong></p>

<pre><code>public class SubjectInfoViewer {
private ViewingQueryComponent baseQueryComponent;
private final UserInterface ui;

public SubjectInfoViewer(UserInterface ui) {
    this.ui=ui;
    baseQueryComponent=new DefaultViewingQuery();
}    

public void changeBaseQueryComponent(ViewingQueryComponent baseQueryComponent){
    this.baseQueryComponent=baseQueryComponent;
}
public ViewingQuery composeViewingQuery(){
    return  new COFilter(ui.getCO(), 
            new USNFilter(ui.getUSN(), 
            new DifficultyFilter(ui.getDifficulty(), 
            new SectionFilter(ui.getSection(), 
            new DateFilter(ui.getInitialDate(),ui.getFinalDate(), 
            new ModuleFilter(ui.getModule(), 
            new SubjectFilter(ui.getSubject(), 
            baseQueryComponent))))))).composeViewingQuery();    
}
</code></pre>

<p>}</p>

<p><strong>ViewingQueryComponent.java</strong></p>

<pre><code>public interface ViewingQueryComponent {

ViewingQuery composeViewingQuery();
</code></pre>

<p>}</p>

<p><strong>DefaultViewingQuery.java</strong></p>

<pre><code>public class DefaultViewingQuery implements ViewingQueryComponent {
private String  sql=  
                "SELECT "
                + "TOPICS.Topic_Name AS \"Topic Name\", "
                + "TOPICS.Textbook_Name AS \"Textbook Name\", "
                + "TOPICS.Page_Number AS \"Page Number\", "
                + "MADE_FROM.Question_Statement AS \"Question Statement\", "
                + "QUESTION_BANK.Total_Marks AS \"Total Marks\", "
                + "ROUND((COUNT(DISTINCT STATUS.USN)/(SELECT SUM(STUDENT.USN) FROM STUDENT))*100,2) AS \"Total Students (%)\" "
                + "FROM "
                + "STATUS, "
                + "TEXTBOOK, "
                + "SUBJECT, "
                + "STUDENT, "
                + "DISTRIBUTE, "
                + "TOPICS LEFT JOIN (MADE_FROM,QUESTION_BANK) ON TOPICS.Topic_Name = MADE_FROM.Topic_Name AND QUESTION_BANK.Question_Statement=MADE_FROM.Question_Statement "
                + "WHERE "
                + "DISTRIBUTE.Topic_Name=TOPICS.Topic_Name and "
                + "TEXTBOOK.Textbook_Name=TOPICS.Textbook_Name and "
                + "STATUS.Topic_Name=TOPICS.Topic_Name and "
                + "STATUS.USN=STUDENT.USN ";

@Override
public ViewingQuery composeViewingQuery() {
    return new ViewingQuery().withBaseQuery(sql);
} 
</code></pre>

<p>}</p>

<p><strong>SectionViewingQuery.java</strong></p>

<pre><code>public class SectionViewingQuery implements ViewingQueryComponent{
private final String  sql;
private final String section;
public SectionViewingQuery(String section){
    this.section=section;
    sql=        "SELECT "
                + "TOPICS.Topic_Name AS \"Topic Name\", "
                + "TOPICS.Textbook_Name AS \"Textbook Name\", "
                + "TOPICS.Page_Number AS \"Page Number\", "
                + "MADE_FROM.Question_Statement AS \"Question Statement\", "
                + "QUESTION_BANK.Total_Marks AS \"Total Marks\", "
                + "(COUNT(DISTINCT STATUS.USN)/(SELECT SUM(STUDENT.USN) FROM STUDENT WHERE STUDENT.Section=?))*100 AS \"Total Students (%)\" "
                + "FROM "
                + "STATUS, "
                + "TEXTBOOK, "
                + "SUBJECT, "
                + "STUDENT, "
                + "DISTRIBUTE, "
                + "TOPICS LEFT JOIN (MADE_FROM,QUESTION_BANK) ON TOPICS.Topic_Name = MADE_FROM.Topic_Name AND QUESTION_BANK.Question_Statement=MADE_FROM.Question_Statement "
                + "WHERE "
                + "DISTRIBUTE.Topic_Name=TOPICS.Topic_Name and "
                + "TEXTBOOK.Textbook_Name=TOPICS.Textbook_Name and "
                + "STATUS.Topic_Name=TOPICS.Topic_Name and "
                + "STATUS.USN=STUDENT.USN ";
}
@Override
public ViewingQuery composeViewingQuery() {
    return new ViewingQuery().withBaseQuery(sql,section);
}  
</code></pre>

<p>}</p>

<p><strong>Filter.java</strong></p>

<pre><code>public abstract class Filter implements ViewingQueryComponent {

protected final ViewingQueryComponent vqc;    

Filter(ViewingQueryComponent vqc){    
    this.vqc=vqc;
}
</code></pre>

<p>}</p>

<p><strong>SubjectFilter.java</strong></p>

<pre><code>public class SubjectFilter extends Filter{

private final String subject;
private final String sql;

public SubjectFilter(String subject,ViewingQueryComponent vqc) {
    super(vqc);
    sql="TEXTBOOK.Subject_Name=?";
    this.subject=subject;
}

@Override
public ViewingQuery composeViewingQuery() {
    return vqc.composeViewingQuery().withFilter(sql, subject);
}
</code></pre>

<p>}</p>

<p>There's an inherent limitation in using the decorator pattern like this. The limitation is that you cannot selectively remove filters from existing filter chains dynamically, hopefully there might be an ideal solution that preserves the functional nature of the solution while over coming this limitation. </p>

<p>Perhaps the intercepting filter design pattern is more appropriate here instead of the decorator design pattern. Make the <code>SubjectInfoViewer</code> the <code>FilterManager</code> and implement, for every <code>Filter</code> the <code>hashCode</code> and <code>equals</code> methods as shown <a href="https://stackoverflow.com/questions/38198019/whats-a-suitable-implementation-of-equals-for-a-class-with-no-fields">here</a> as the state of the <code>Filter</code>s become irrelevant for every <code>composeViewingQuery</code> message passed from the <code>ui</code> so they can be easily removed in the <code>FilterChain</code>, if implemented as a <code>Set</code>.</p>

<p>But this pattern although will provide more flexibility than the decorator, it will need to pass unneeded parameters into the constructors of the filters just to remove the filters from the <code>FilterChain</code>. And this solution will possibly be feasible at the expense of sacrificing the declarative nature of the decorator solution</p>
    </div>