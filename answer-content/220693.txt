<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Interface</h2>

<p>When I see a method named <code>get…()</code>, I expect it to behave like a getter method: it should retrieve data, with no side-effects.  Your <code>getNext()</code>, though, has the side-effect of consuming one random element from the list.  Therefore, <code>next()</code> would be a more appropriate name than <code>getNext()</code>.</p>

<p>Once you rename it, you'll see that your <code>RandomStringChooser</code> should probably just implement the <a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Iterator.html" rel="nofollow noreferrer"><code>Iterator&lt;String&gt;</code></a> interface.  Java programmers instantly recognize an <code>Iterator</code> and know how one should behave.</p>

<p>Then, you'll see that the <code>Iterator</code> interface says that <code>next()</code> should throw <code>NoSuchElementException</code> when the elements have been exhausted — and that is what you should do too.  In fact, returning <a href="https://www.snopes.com/fact-check/licensed-to-bill/" rel="nofollow noreferrer">"NONE" as a special string to indicate a missing value is a bad practice</a>.  </p>

<p>Furthermore, if one of the input strings is in fact <code>null</code>, it shouldn't be the job of your <code>RandomStringChooser</code> to translate it to "NONE".</p>

<p>Consider changing the signature of the constructor to <code>public RandomStringChooser(String... words)</code>.  The code will continue to work the same way, but you would also have the option of invoking it as <code>new RandomStringChooser("wheels", "on", "the", "bus")</code>, with multiple string arguments.</p>

<h2>Efficiency</h2>

<p>Whenever you extract a random element from the list, you call <code>this.wordArray.remove(index)</code>.  Removing an element causes all of the subsequent elements to be copied over to fill the gap.  Therefore, if you randomly go through an <em>n</em>-element list, you will perform O(<em>n</em><sup>2</sup>) copy operations, which is quite poor for efficiency.</p>

<p>A better idea would be to implement a <a href="https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle" rel="nofollow noreferrer">Fisher-Yates shuffle</a>, which just swaps one pair of elements per output string.</p>

<h2>Miscellaneous</h2>

<p><code>wordArray</code> is poorly named: it's actually a <code>java.util.List</code>, not an array.</p>

<p>Your signposting comments are annoying noise to anyone who knows Java.</p>

<h2>Suggested implementation</h2>

<pre><code>import java.util.Arrays;
import java.util.Iterator;
import java.util.NoSuchElementException;
import java.util.Random;

public class RandomStringChooser implements Iterator&lt;String&gt; {

    private Random r;
    private String[] words;
    private int n;

    public RandomStringChooser(String... words) {
        this.r = new Random();
        this.words = Arrays.copyOf(words, words.length);
        this.reset();
    }

    /**
     * Makes all words eligible to be chosen again, even if they have been
     * previously returned by &lt;code&gt;next()&lt;/code&gt;.
     */
    public void reset() {
        this.n = this.words.length;
    }

    public boolean hasNext() {
        return this.n &gt; 0;
    }

    public String next() {
        if (!this.hasNext()) {
            throw new NoSuchElementException();
        }

        // Fisher-Yates shuffle
        int index = r.nextInt(this.n--);
        String word = this.words[index];
        this.words[index] = this.words[this.n];
        this.words[this.n] = word;
        return word;
    }

    /** This is a main method for testing the class */
    public static void main(String[] args) {
        System.out.println("It should print the words in the array in a random order and then NONE twice");
        RandomStringChooser sChooser = new RandomStringChooser(
            "wheels", "on", "the", "bus"
        );
        //This loop will output the words in `wordArray` in random order, then "NONE" twice
        for (int k = 0; k &lt; 6; k++) {
            System.out.println(sChooser.hasNext() ? sChooser.next() : "NONE");
        }
        //This loop will output the words in `wordArray` in random order, then stop
        sChooser.reset();
        for (int k = 0; k &lt; 4; k++) {
            System.out.println(sChooser.hasNext() ? sChooser.next() : "NONE");
        }
     }

}
</code></pre>
    </div>