<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><p>Put the logic where it belongs. The main loop should only adds characters to the word, while <code>Word</code> shall manage itself, e.g.:</p>

<pre><code>if (isalnum(ch)) {
    add_character(word, ch);
}
</code></pre>

<p>A possible implementation would be</p>

<pre><code>add_character(struct Word * word, char ch) {
    if (word-&gt;size == word-&gt;capacity) {
        expand_capacity(word);
    }
    word-&gt;signs[word-&gt;size++] = ch;
}
</code></pre>

<p>The same applies to the list of words.</p>

<p>As a side note, they logic of <code>reserve_space_for_letter</code> and <code>reserve_space_for_words</code> is identical, and it may be worthy of effort to unify expansion mechanism along the lines of</p>

<pre><code>void * expand_array(void * array, size_t capacity, size_t element_size);
</code></pre></li>
<li><p>The main logic could be streamlined:</p>

<pre><code>do {
    struct Word * word = get_empty_word_from_list(....);

    while (ch = getchar() &amp;&amp; isalnum(ch) {
        add_character(word, ch);
    }
    add_character(word, '\0');

    while ((ch = getchar()) != EOF &amp;&amp; !isalnum(ch)) {
        ;
    }
} while (ch != EOF);
</code></pre>

<p>Of course both inner loops would benefit if factored out into functions, say <code>read_word</code> and <code>skip_non_word</code>.</p></li>
</ul>
    </div>