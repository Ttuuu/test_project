<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Interesting problem.</p>

<p>I think your answer is quite a bit longer than it needs to be.  Consider rethinking what the solution entails, <em>essentially</em>.  Also, your code will be quite a bit more readable if you avoid nesting statement -- especially thing like loops nested inside conditionals, such as you have here:</p>

<pre><code>  } else {
        // Distribute (maxLen - size) in $(spacesCount) evenly
        for(let i = 0; i &lt; this.words.length - 1; i++) {
            this.spaces[i] = quotient + ((mod-- &gt; 0)? 1 : 0);
        }    
    }
</code></pre>

<p>You have the right idea to break the problem down into the subproblems of line breaks and justification, but trying to do so with objects, rather than simple functions, seems to have added complexity for you.</p>

<p>Consider this rewrite, which expresses the line breaking problem using recursion, and also takes advantage of es6 features.  It's about a third the size of the original, even with lots of intermediate variables which exist only for the sake of readability</p>

<pre><code>function fullJustify(words, maxLen) {
  return asLines(words, maxLen).map(x =&gt; justify(x, maxLen))
}

function asLines(words, maxLen, curLine=[], charCount = 0, lines = []) {

  if (!words.length)
    return lines.concat([curLine])

  const nextWord        = words[0]
  const remainingWords  = words.slice(1)
  const additionalChars = nextWord.length + (curLine.length ? 1 : 0)
  const nextCharCount   = charCount + additionalChars
  const breakLine       = nextCharCount &gt; maxLen

  if (breakLine)
    return asLines(words, maxLen, [], 0, lines.concat([curLine]))

  return asLines( remainingWords, maxLen, curLine.concat(nextWord),
    nextCharCount, lines )
}

function justify(words, len) {
  if (words.length == 1)
    return words[0] + ' '.repeat(len - words[0].length)

  const numPaddedWords  = words.length - 1
  const totalChars      = words.reduce((m, w) =&gt; m + w.length, 0)
  const extraChars      = len - totalChars
  const spaceBetween    = Math.floor(extraChars / numPaddedWords)
  const spacer          = ' '.repeat(spaceBetween)
  const extraSpaces     = extraChars - spaceBetween * numPaddedWords
  const leftPaddedWords = words.slice(1).map(
    (w, i) =&gt; spacer + (i &lt; extraSpaces ? ' ' : '') + w
  )
  return [words[0], ...leftPaddedWords].join('')
}
</code></pre>

<h2>additional improvement</h2>

<p>my <code>asLines</code> function above is still too complex for my taste, so i did one more improvement, using a few utility functions from ramda.js:</p>

<pre><code>function asLines(words, len, lines=[]) {

  if (!words.length) return lines

  let charCount    = -1  // bc the first word is not left-padded
  const fitsOnLine = w =&gt; (charCount += w.length + 1) &lt; len
  const nextLine   = takeWhile(fitsOnLine, words)
  const remaining  = drop(nextLine.length, words)
  return asLines(remaining, len, lines.concat([nextLine]))
}
</code></pre>
    </div>