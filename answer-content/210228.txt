<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Avoid numbered variables</h3>

<blockquote>
<pre><code>char space_1 = ' ';
char space_2 = ' ';
char space_3 = ' ';
char space_4 = ' ';
char space_5 = ' ';
char space_6 = ' ';
char space_7 = ' ';
char space_8 = ' ';
char space_9 = ' ';
int space_1y, space_1x;
int space_2y, space_2x;
int space_3y, space_3x;
int space_4y, space_4x;
int space_5y, space_5x;
int space_6y, space_6x;
int space_7y, space_7x;
int space_8y, space_8x;
int space_9y, space_9x;
</code></pre>
</blockquote>

<p>If you find yourself using numbered variables, you almost always should be using an array instead.  E.g. </p>

<pre><code>const int CELL_COUNT = 9;

typedef struct {
    int y;
    int x;
} Location;

char cells[CELL_COUNT] = "         ";
Location cell_locations[CELL_COUNT];
</code></pre>

<p>Even with the constant and type declaration, this is still shorter than your original.  And now you can refer to, e.g. <code>cell_locations[0].x</code> which is more self-documenting.  Instead of a naming convention, we have an enforceable type pattern.  A <code>Location</code> must have a <code>y</code> and an <code>x</code>.  There must be <code>CELL_COUNT</code> (9) <code>cell_locations</code>.  </p>

<p>You can move <code>Location</code> into a header file that you can reuse.  </p>

<p>Later, instead of </p>

<blockquote>
<pre><code>    space_1y = y + 1; space_1x = x + 1;
    space_2y = y + 1; space_2x = x + 3;
    space_3y = y + 1; space_3x = x + 5;
    space_4y = y + 3; space_4x = x + 1;
    space_5y = y + 3; space_5x = x + 3;
    space_6y = y + 3; space_6x = x + 5;
    space_7y = y + 5; space_7x = x + 1;
    space_8y = y + 5; space_8x = x + 3;
    space_9y = y + 5; space_9x = x + 5;
</code></pre>
</blockquote>

<p>We can say something like </p>

<pre><code>    int i = 0;
    for (int current_y = y + 1, n = y + line_len; current_y &lt; n; current_y += 2) {
        for (int current_x = x + 1, m = x + line_len; current_x &lt; m; x += 2) {
            cell_locations[i].y = current_y;
            cell_locations[i].x = current_x;
            i++;
        }
    }
</code></pre>

<p>And instead of nine </p>

<blockquote>
<pre><code>    if(space_1 == 'X'){
        attron(COLOR_PAIR(Xs));
    }else if(space_1 == 'O'){
        attron(COLOR_PAIR(Os));
    }
    mvaddch(space_1y, space_1x, space_1);
</code></pre>
</blockquote>

<p>We can say something like </p>

<pre><code>int determine_color_pair(char mark) {
    if (mark == 'X') {
        return Xs;
    }

    if (mark == 'O') {
        return Os;
    }

    return BG;
} 
</code></pre>

<p>and </p>

<pre><code>    for (int j = 0; j &lt; CELL_COUNT; j++) {
         attron(COLOR_PAIR(determine_color_pair(cells[j])));
         mvaddch(cell_locations[j].y, cell_locations[j].x, cells[j]);
    }
</code></pre>

<h3>Prefer descriptive names to comments</h3>

<blockquote>
<pre><code>void f_intro();                               // Print elaborate "animated" intro splash
</code></pre>
</blockquote>

<p>With proper naming, you won't need comments for things like this.  </p>

<pre><code>void display_intro();
</code></pre>

<p>or even </p>

<pre><code>void display_elaborate_pseudo_animated_intro_splash();
</code></pre>

<p>Although I think that's overkill.  But for a function that you only call once, that kind of name is possible.  </p>

<p>I'm not crazy about using an <code>f_</code> prefix to indicate a function.  Functions should generally have verb names, because they do things.  Variables have noun names, because they represent things.  It is more common to use prefixes to separate your code from other code that may be linked, e.g. <code>ttt_display_intro</code>.  Then if you link your Tic-Tac-Toe game with a text-based RPG (e.g. Zork or Rogue), you can have <code>display_intro</code> functions in both.  </p>

<p>In code examples, they often put comments on every variable for didactic purposes.  I find this unfortunate, as it gives people an unrealistic view of how comments should be used.  Comments should be used to explain <em>why</em> code does things rather than what the code is doing.  The code itself should mostly suffice for telling people what the code is doing.  </p>

<p>I find the practice of comments after code on the same line obnoxious.  I would much rather see </p>

<pre><code>// Takes the winning character and creates a splash screen declaring victory ('X', 'O', or 'T' for Tie)
void f_declare_winner(char symbol);
</code></pre>

<p>Note how that gets rid of the scroll bar.  </p>

<p>If the comment is not needed to appear in the left column, then you are probably better off without it.  </p>

<h3>Simplification</h3>

<blockquote>
<pre><code>    }else if(input == 'R' || input == 'r'){
        int r;
        r = rand() % 2;
        if(r == 0){
            // Pick 'X'
            choice_ptr = chose_x;
            slen = strlen(choice_ptr);
            x = col / 2 - slen / 2;
            mvprintw(y, x, choice_ptr);
            refresh();
            getch();
            return 'X';
        }else if(r == 1){
            // Pick 'O'
            choice_ptr = chose_y;
            slen = strlen(choice_ptr);
            x = col / 2 - slen / 2;
            mvprintw(y, x, choice_ptr);
            refresh();
            getch();
            return 'O';
        }
</code></pre>
</blockquote>

<p>This whole block can be removed.</p>

<p>Replace  </p>

<blockquote>
<pre><code>    input = getch();
    if(input == 'X' || input == 'x'){
</code></pre>
</blockquote>

<p>with </p>

<pre><code>    input = toupper(getch());
    if (input == 'R') {
        int r = rand() % 2;
        input = (r == 0) ? 'X' : 'O';
    }

    if (input == 'X') {
</code></pre>

<p>Now you don't have to duplicate the code.  </p>

<p>At the end of the function, </p>

<blockquote>
<pre><code>        f_setup();
</code></pre>
</blockquote>

<p>should probably be </p>

<pre><code>        return f_setup();
</code></pre>

<p>Or change things to use an infinite loop rather than a recursive call.  </p>

<pre><code>void display_prompt_and_wait_for_input(const char *choice_ptr) {
    int slen = strlen(choice_ptr);
    x = col / 2 - slen / 2;
    mvprintw(y, x, choice_ptr);
    refresh();
    getch();
}

// Prompt player to pick a side or pick random selection, returns char
char f_setup() {
    const char setup_str1[] = "Pick a side!";
    const char setup_str2[] = "Press 'X', 'O', or 'R' for Random!";
    char *chose_x = "You chose X's! Any key to continue...";
    char *chose_y = "You chose O's! Any key to continue...";

    for (;;) {
        clear();
        getmaxyx(stdscr, row, col);
        y = row / 2 - 1;
        int slen = strlen(setup_str1);
        x = col / 2 - slen / 2;
        mvprintw(y++, x, setup_str1);
        slen = strlen(setup_str2);
        x = col / 2 - slen / 2;
        mvprintw(y++, x, setup_str2);
        y++;
        refresh();

        int input = toupper(getch());
        if (input == 'R') {
            int r = rand() % 2;
            input = (r == 0) ? 'X' : 'O';
        }

        switch (input) {
            case 'X':
                display_prompt_and_wait_for_input(chose_x);
                return 'X';
            case 'O':
                display_prompt_and_wait_for_input(chose_y);
                return 'O';
            default:
                char *err_str = "Input error! Any key to continue...";
                display_prompt_and_wait_for_input(err_str);
        }
    }
}
</code></pre>
    </div>