<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>No, your code is not good enough.</p>

<p>It lacks the very basic API for an encryption and decryption module, which is to provide the secret and public key via a <code>public</code> method. This means that you cannot decrypt a message that was encrypted in a previous run of the program.</p>

<p>You should follow the Java Naming Conventions: Method names, field names, local variables and method parameters are all written in camelCase, starting with a lowercase letter.</p>

<p>The <code>throws Exception</code> is bad API design. Only throw those exceptions that are the fault of the caller. Since you are using predefined encryption algorithms, there cannot be any exception when doing the encryption. When decrypting though, there may be several exceptions being thrown (bad padding, invalid block size), which should all be covered by the unit tests you wrote. You did write them but just forgot to post them here, right?</p>

<p>Your code is missing the rationale for storing the AES key only in its encrypted form. That's a nice little trick to make it a single step more difficult to retrieve the private key, from an attacker's point of view. But then, after decrypting the private key and using it, you forgot to <code>destroy</code> it, therefore this hiding code doesn't really achieve much.</p>

<p>THERE IS NO NEED TO SHOUT IN THE COMMENTS: THIS IS CONSIDERED RUDE!!!1!!!!</p>

<p>While here, you should use an IDE or text editor that has an integrated spell checker, out of NECESITIES.</p>

<p>Using ECB sounds weak to me at first sight. I know that using ECB for AES is definitely weak, I'm not sure about using ECB with RSA.</p>

<p>For AES, I prefer <a href="https://en.wikipedia.org/wiki/Block_cipher_mode_of_operation#Counter_%28CTR%29" rel="nofollow noreferrer">counter mode</a> over CBC.</p>

<p>There may be more weaknesses that I didn't mention.</p>
    </div>