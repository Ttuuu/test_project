<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your solution is certainly neater than the other one. Programming challenge websites often contain horrible code.</p>

<p>There's a few things to improve though:</p>

<hr>

<p>Use the container index type for indexing into a container. This ensures the index values cover the necessary range.</p>

<p>In this case, we should use <code>std::size_t</code> instead of <code>int</code> for indexing the <code>std::string</code> (or <code>std::string::size_type</code> if we're being paranoid). This would mean rethinking the algorithm slightly (perhaps we need a <code>std::optional&lt;std::size_t&gt;</code>).</p>

<p>Note that for storing the difference between indices (i.e. word length) we should use <code>std::ptrdiff_t</code> (or <code>std::string::difference_type</code>).</p>

<hr>

<p>In C++ it's more idiomatic to use iterators, instead of indices. This makes it easier to genericize functions (e.g. finding the longest run satisfying an arbitrary precondition on an arbitrary sequence).</p>

<hr>

<p>I'd be inclined to implement this with an outer loop to iterate each word, and an inner loop to find the start and end points.</p>

<p>It's more verbose, but perhaps a bit easier to follow:</p>

<pre><code>#include &lt;algorithm&gt;
#include &lt;cctype&gt;
#include &lt;string&gt;

std::string get_longest_word(std::string const&amp; input)
{
    auto const is_in_word = [] (unsigned char c) { return std::isalpha(c); };

    auto max_word_length = std::string::difference_type{ 0 };
    auto max_word_start = input.end();
    auto max_word_end = input.end();

    for (auto i = input.begin(); i != input.end(); )
    {
        auto word_start = std::find_if(i, input.end(), is_in_word);

        if (word_start == input.end())
            break;

        auto word_end = std::find_if_not(word_start, input.end(), is_in_word);

        auto const word_length = std::distance(word_start, word_end);

        if (word_length &gt; max_word_length)
        {
            max_word_length = word_length;
            max_word_start = word_start;
            max_word_end = word_end;
        }

        i = word_end;
    }

    return std::string(max_word_start, max_word_end);
}
</code></pre>

<p>Which is on the way to becoming:</p>

<pre><code>template&lt;InputItT, PredicateT&gt;
std::pair&lt;InputItT, InputItT&gt; find_longest_run(InputItT begin, InputItT end, PredicateT predicate);
</code></pre>
    </div>