<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>As the "guy" in question, I'm happy to discuss my approach :) feel free also to file issues on <a href="https://github.com/dimo414/bash-cache" rel="nofollow noreferrer">GitHub</a> if you have feedback.</p>

<p>You are certainly correct that <a href="https://unix.stackexchange.com/q/125819/19157">decorating functions</a> as bash-cache does isn't necessary, but the intent is to simplify the development experience - to memoize a function all you have to do is make a call to <code>bc::cache</code>, and bash-cache (generally) handles the rest. No need to keep separate functions in sync or wrestle with naming schemes. Whether that's a feature or overkill is in the eye of the beholder, but I find it very flexible and expressive :)</p>

<p>As you've shown it's not too complicated to implement a reasonable caching mechanism in Bash, but the devil is really in the details. With bash-cache I've addressed a number of very subtle issues that most caching implementations fail to handle, including:</p>

<ul>
<li>stdout and stderr are both cached and preserved separately (your approach only caches stdout, other approaches merge the two streams with <code>&gt;&amp;</code>)</li>
<li>the return code of the function is also preserved, few other implementations I've seen do this (correctly)</li>
<li>avoids a <a href="https://stackoverflow.com/a/49552002/113632">common gotcha</a> with command substitutions (<code>$(...)</code>), which are actually lossy</li>
<li>stale cache data is regularly cleaned up in the background</li>
<li>caches are separated by user and <code>chmod</code>-ed to only be readable by that user; a global cache risks leaking sensitive data</li>
</ul>

<hr>

<p>Since this is CodeReview.SE, some tips on your approach:</p>

<ul>
<li>Be sure to consistently quote all variables, including arrays like <code>"$@"</code>; without quotes Bash will expand variables and arrays with word-splitting, which is rarely desirable and often leads to bugs. In your code it's likely that whitespace arguments will break things. It's a great idea to run any shell code through <a href="https://www.shellcheck.net/" rel="nofollow noreferrer">ShellCheck</a> and address the issues it flags.</li>
<li><code>file="/tmp/$(printf "%s" ${@})"</code> is unsafe, as it munges arguments together without a delimiter, e.g. it will treat  <code>foo 12 3</code> and <code>foo 1 23</code> as the same set of arguments. It also will fail if any arguments contain invalid filename characters (notably <code>/</code>), which is (part of) why bash-cache hashes the arguments.</li>
<li>It's probably a good idea to asynchronously delete the cache file when it's too old, instead of making multiple <code>date</code> calls in subshells to determine whether the file is still valid. I'd have to benchmark to be sure but I suspect it will be faster.</li>
<li><code>${1} ${@:2}</code> isn't necessary, just say <code>"$@"</code> (note the quotes)</li>
<li>Bash doesn't support nested/anonymous functions, so what you're doing in <code>bbusers</code> is actually just re-defining <code>_users</code> in the top-level namespace on every invocation, which isn't necessary or helpful. Just define <code>_users</code> as a normal function and then: <code>bbusers() { cache _users "$@"; }</code>.</li>
</ul>
    </div>