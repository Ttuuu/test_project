<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Review</h2>

<p>Your code is a mess and breaks about every async rule in the book.</p>

<p>JavaScript is slow but because Node.js is event driven it can still deliver a very efficient server solution. However if you start using synchronous IO calls you negate any benefit that <code>node.js</code> provides and in effect turn a high throughput server into a slow dinosaur.</p>

<p>General advice is DON'T use synchronous calls if there is an asynchronous alternative.</p>

<h2>???</h2>

<p>What are you waiting to do? in...</p>

<pre><code>(async () =&gt; {
    await SSG.start();
})();
</code></pre>

<p>You dont do anything after the function so in effect you have just made a complex version of</p>

<pre><code>SSG.start();
</code></pre>

<h2>Use modern syntax</h2>

<ul>
<li><p>When adding functions to an object use the function shorthand <code>saveStaticAssets: function () { ... },</code> becomes <code>saveStaticAssets() { ... },</code></p></li>
<li><p>Use object property shorthand if you have the variable names defined. eg <code>{funs: funs, params: params , content: content}</code> becomes <code>{funs, params, content}</code></p></li>
<li><p>Use parameter defaults  eg  <code>contentFiles: async function (dir, filelist) { /*...*/ filelist = filelist || [];</code> becomes <code>async contentFiles(dir, filelist = []) {</code></p></li>
</ul>

<h2>No need for Object <code>SSG</code></h2>

<p>You have created a module that contains a static single instance of SSG. There is no benefit gained by creating the object. All it does to force you to use a more verbose syntax when accessing references eg <code>this.foo</code> can be simply <code>foo</code></p>

<h2>Try Catch?</h2>

<p>Promises/Async come with error handling built in. You should not be using <code>try</code>, <code>catch</code> blocks in async and promise based code.</p>

<h2>Careful <code>console</code> may block</h2>

<p>The <a href="https://nodejs.org/api/console.html#console_console_log_data" rel="nofollow noreferrer">global console</a> can be synchronous and thus is a blocking IO operation (blocks events) that flies in the face of the ideal of node.js being a non blocking event driven server. </p>

<p>Avoid logging to the <code>console</code> for all but the most important information tracking (even if not blocking console noise is bad)</p>

<h2>Rewrite</h2>

<p>The rewrite assumes you only want the single static instance run once.</p>

<p>This rewrite is untested, somewhat of a guess as to your needs and is purely as example <em>only</em> It is not intended as a working alternative.</p>

<ul>
<li>Single error handler so stops on any error!!!</li>
<li>All functions are <code>async</code></li>
<li>Removed the redundant <code>SSG</code> wrapper on functions and properties.</li>
<li>Removed all synchronous <code>fs-extra</code> calls in favor of <code>async</code> versions. </li>
<li>Using <code>await</code> to idle execution when ever possible.</li>
<li>Uses <code>Promise.all</code> to handle <code>async</code> lists/arrays </li>
<li>Moved folder names to Object <code>FOLDERS</code></li>
<li>Created <code>REGS</code> to hold <code>regExp</code> that where mixed with code. It is frozen to prevent mutation.</li>
<li>Moved <code>const funs = require('./functions.js');</code> to local global scope.</li>
<li><strong>Note</strong> that this will exit before the final <code>fs.copy</code> is complete. If there is an error it will not be caught. Un-comment line below to <code>await</code> proper end.</li>
<li><code>start</code> and <code>contentFiles</code> may not work together at best possible performance (or at all) (I am assuming there is no dependency between files in <code>start</code> an the result of <code>contentFiles</code>)</li>
</ul>

<p>.</p>

<pre><code>const yaml = require('js-yaml');
const fs   = require('fs-extra');
const ejs  = require('ejs');
const funs = require('./functions.js');
const md   = require('markdown-it')({html: true, linkify: true, typographer: true});
const FOLDERS = {output: '../output/', content: '../content/', assets: '../assets/'};
const REGS = Object.freeze({
    match: {
        constent: /(\+Content[0-9]*\+|\+Content\+)([\s\S]*?)*(\+\+\+)/g,
        param: /\+Params\+([\s\S]*?)\+\+\+/g
    },
    replace: {content: /(\+Content[0-9]*\+|\+Content\+)/g}
});
start().catch(e =&gt; console.error(e));

async function contentFiles(directory, filelist = []) {
    const files = await fs.readdir(directory);
    return (await Promise.all(files.map(async file =&gt; 
        (await fs.stat(directory+ '/' + file)).isDirectory() ? 
            contentFiles(directory+ '/' + file, filelist) : 
            file
    )));
}
async function generateHTMLFile(file) {
    const contents = [], fstream = await fs.readFile(file, 'utf8');
    const content = fstream.match(REGS.match.content)[0].split('+++');
    var params = fstream.match(REGS.match.params);
    params = yaml.safeLoad(
         params[0].replace('+Params+', '').replace('+++', ''), 'utf8'
    );
    for (item of content) {
        contents.push(md.render(
            item.replace('+++', '').replace(REGS.replace.content, '')
        ));
    }
    return ejs.renderFile(
        '../templates/' + params.template + '.ejs', {funs, params, content}, {}
    );
}
async function saveHTML({html, url}) {
    const createDir = await fs.exists(FOLDERS.output);
    if (createDir) { await fs.mkdir(FOLDERS.output, {recursive: true}) }
    await fs.writeFile(FOLDERS.output + url + '.html', html);
}
async function start() {
    await Promise.all(
        (await contentFiles(FOLDERS.content)).map(async file =&gt;
            saveHTML(await generateHTMLFile(FOLDERS.content + file))
        )
    );
    fs.copy(FOLDERS.assets, FOLDERS.output);
    // return fs.copy(FOLDERS.assets, FOLDERS.output); // maybe return promise
}
</code></pre>
    </div>