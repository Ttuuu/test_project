<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Peter already pointed out the main problem with your code: you're doing linear searches when looking for child-nodes, which will blow up to <span class="math-container">\$O(n^2)\$</span> for worst-case inputs (very deep trees). Indeed, a lookup table that maps a parent ID to child IDs is much more efficient, and ensures that your method remains <span class="math-container">\$O(n)\$</span> for all sorts of input.</p>

<p>Another problem is that your method does not guard against cyclic inputs - it'll run indefinitely. You may want to throw an exception instead, or otherwise prevent the start item from being added to the stack again. It's also a good idea to document this behavior.</p>

<p>Other notes:</p>

<ul>
<li>There's no need to perform input validation in a separate method here: <code>Count</code> does not use <code>yield</code>, so the input validation will be performed immediately. Note that a modern alternative is to move the <code>yield</code>ing part to a local function instead of to a separate method.</li>
<li>When throwing argument-related exceptions, it's better to use <code>nameof(parameterName)</code> instead of <code>"parameterName"</code>. This lets the compiler protect you against typos, and works well with code refactoring tools.</li>
<li>I would rename <code>T</code> to <code>TKey</code>, <code>selfReference</code> to <code>keySelector</code> and <code>parentReference</code> to <code>parentKeySelector</code>. I think that better describes their purpose, and it's consistent with other Linq methods.</li>
<li>Use <code>var</code> to cut down on type name repetition: <code>var variableName = new LongTypeName(...);</code> is equivalent to <code>LongTypeName variableName = new LongTypeName(...);</code>.</li>
<li>As Peter already mentioned, there's no need for that <code>keys</code> set: you're only adding items with a known parent ID to the stack, so there's no point in verifying whether their parent ID is known.</li>
</ul>
    </div>