<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Yes, you can simplify this. Let's break down the algorithm needed for this:</p>

<ol>
<li>Chain all employees into one stream</li>
<li>Chunk this stream into 1000 employees

<ul>
<li>For each chunk get the salaries</li>
</ul></li>
<li>Distribute the salaries back again into the different companies</li>
</ol>

<p>The first part can be done using <a href="https://docs.python.org/3/library/itertools.html#itertools.chain.from_iterable" rel="nofollow noreferrer"><code>itertools.chain.from_iterable</code></a>. The second one can use e.g. <a href="https://stackoverflow.com/a/12186183/4042267">this <code>grouper</code> recipe</a>. And the final part can be easily done with <a href="https://docs.python.org/3/library/itertools.html#itertools.islice" rel="nofollow noreferrer"><code>itertools.islice</code></a> if we keep everything before as generators.</p>

<pre><code>from itertools import chain, islice
</code></pre>

<blockquote>
<pre><code>def grouper(iterable, n):
    it = iter(iterable)
    return iter(lambda: tuple(islice(it, n)), ())
</code></pre>
</blockquote>

<pre><code>def get_salaries(employees):
    respone = requests.post(url, json={"input": employees})
    return parse_respone(respone)

def employee_salaries_per_company(company_employees):
    all_employees = chain.from_iterable(company_employees)       
    salaries = chain.from_iterable(get_salaries(employees)
                                   for employees in grouper(all_employees, 1000))
    return [list(islice(salaries, n)) for n in map(len, company_employees)]
</code></pre>

<hr>

<p>Note that in english the plural of employee is employees and not emploices; and the plural of salary is salaries and not salarices.</p>
    </div>