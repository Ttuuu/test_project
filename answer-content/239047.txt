<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The storage of both points and queries is suboptimal - in both cases, they are plain unsorted arrays.  We could use better strategies for representing one or both.</p>

<p>As a simple example, consider keeping points as a list of rows in ascending order, with each row being a list of points.  Now, when we evaluate a query, we can quickly skip the rows that are before the bounding rectangle, and we can finish when we reach the first row that's after the rectangle.  Similarly, we can stop examining a row and quickly move to the next row when we reach the horizontal bound.</p>

<p>Further improvements in indexing rows and columns can be made, potentially leading to a quadtree representation, as used in most serious geospatial applications.</p>

<hr>

<p>Building a linked list of colours for each query involves a lot of small memory allocations, which can be a serious performance hit.  We could instead count distinct colours as we read the list of points, and then use a single array of that size to note the colours found (this can even be shared amongst all the queries).  We might consider keeping this array sorted (using <code>bsearch()</code> to find elements), though the cost/benefit trade-off to that is less clear-cut than in a case where we know we have many times more lookups than insertions.</p>

<hr>

<p>We're gaining nothing by reading all queries into an array and then executing them sequentially.  We could just execute each query immediately after we read it.</p>
    </div>