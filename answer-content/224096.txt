<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>General - it might be better to create a matrix class and your own vector class in a namespace.</p>

<p><strong>Allow The Tools to Help You Improve the Code</strong><br>
There are compiler settings that can help you improve your code, these can be specific the the c++ compiler you are using or they can be common. A common c++ compiler switch is -Wall which indicates a errors and warnings should be reported. When I compiled this program there was an error reported as well as many warnings.</p>

<p>1&gt;modeler.cpp<br>
1&gt;c:\users\pacmaninbw\modeler\modeler.cpp(145): warning C4244: 'initializing':   conversion from 'double' to 'float', possible loss of data<br>
1&gt;c:\users\pacmaninbw\modeler\modeler.cpp(151): warning C4244: 'initializing':   conversion from 'double' to 'float', possible loss of data<br>
1&gt;c:\users\pacmaninbw\modeler\modeler.cpp(157): warning C4244: 'initializing':   conversion from 'double' to 'float', possible loss of data
1&gt;c:\users\pacmaninbw\modeler\modeler.cpp(337): warning C4018: '&lt;': signed/unsigned mismatch<br>
1&gt;c:\users\pacmaninbw\modeler\modeler.cpp(400): warning C4018: '&lt;': signed/unsigned mismatch<br>
1&gt;c:\users\pacmaninbw\modeler\modeler.cpp(628): warning C4018: '&gt;': signed/unsigned mismatch<br>
1&gt;c:\users\pacmaninbw\modeler\modeler.cpp(821): warning C4244: 'argument': conversion from 'double' to 'float', possible loss of data<br>
1&gt;c:\users\pacmaninbw\modeler\modeler.cpp(822): warning C4244: 'argument': conversion from 'double' to 'float', possible loss of data<br>
1&gt;c:\users\pacmaninbw\modeler\modeler.cpp(178): error C4700: uninitialized local variable 'res' used<br>
1&gt;Done building project "modeler.vcxproj" -- FAILED.<br>
========== Build: 0 succeeded, 1 failed, 0 up-to-date, 0 skipped ==========</p>

<p>The error reported is in this function:</p>

<pre><code>float dotProduct(const Vector &amp;vec1, const Vector &amp;vec2) {

    float res;

    res += vec1.x * vec2.x + vec1.y * vec2.y + vec1.z * vec2.z;        // ERROR ON THIS LINE.
    if (isNearlyEqual(res, 0)) res = 0;

    return res;
}
</code></pre>

<p>The variable <code>res</code> is not initialized prior to being used. The variable <code>res</code> is being used because the <code>+=</code> operator says add the following to this variable. There are 2 ways to correct this, either change the <code>+=</code> to <code>=</code> or assign zero in the declaration of <code>res</code>.</p>

<pre><code>    float res = 0;
</code></pre>

<p>In C++ none of the variables on the stack (local variables in functions and methods) are initialized by the compiler. A good practice is to initialize the variable in the declaration.</p>

<p><em>Possible Floating Point Errors</em><br>
As you seem to be aware of with the <code>isNearlyEqual()</code> function due to the binary nature of computer data floating point numbers can't be completely represented on computers, there can always be some very small error. The error can be increased by switching back and forth between types, <code>int to double</code>, <code>double to int</code>, <code>float to double</code>, and <code>double to float</code>. This is why most financial institutions will use separate integers to represent dollars and cents.</p>

<p>It might be better to choose one of the two types for everything, either stick with <code>double</code> or stick with <code>float</code>. I generally use just <code>double</code> because it provides greater precision. The only time that a <code>float</code> variable might be a good choice is if it is a member of a class or struct and space is an issue.</p>

<p>When you do convert from one to the other use a static_cast to do the conversion, that will remove the warning messages and possibly improve accuracy.</p>

<p>Here are two references on floating point numbers and related errors, the <a href="https://docs.oracle.com/cd/E19957-01/806-3568/ncg_goldberg.html" rel="noreferrer">first</a> is why floating point numbers can be problems and the <a href="https://en.wikipedia.org/wiki/Floating_point_error_mitigation" rel="noreferrer">second</a> is on floating point error mitigation.</p>

<p><em>signed/unsigned mismatch</em><br>
In the <code>for loops</code> where an integer value is being compared to <code>container.size()</code> there is a type mismatch, <code>container.size()</code> is declared as <code>size_t</code> which is currently defined as <code>unsigned int</code>. It might be better to define loop control variables as <code>size_t</code> when they will be compared with <code>container.size()</code>.</p>

<p><strong>Avoid using "using namespace std;"</strong><br>
Names spaces were invented to prevent collisions of class and function names from different libraries and modules. This code already introduces a struct/type that could conflict with the <code>std</code> names space <code>(struct Vector)</code>. It would be better to get into the habit of prefixing objects from different namespaces with the namespace so that others can maintain the code if necessary. You might also want to make your Vector struct a class and create a namespace for it. A better discussion of this can be found on <a href="https://stackoverflow.com/questions/1452721/why-is-using-namespace-std-considered-bad-practice">stackoverflow.com</a>.</p>

<p><strong>Using inline Function Declarations</strong><br>
Using <code>inline</code> in function declarations is generally obsolete. The <code>inline</code> declaration was created as an optimization in the early years of C++. Most modern C++ compilers will properly inline functions as necessary when compiling with -O3. There are times when inlining is not optimal due to cache restrictions and other reasons.</p>

<p><strong>Debugging Code on Code Review</strong><br>
It is generally a good idea to remove debugging code before posting on Code Review, rather than just commenting it out. When you do comment out debugging code it might be better to comment out the for loops as well as the <code>cout</code> statements. This will improve the performance of the program. What might be even better is to move the debugging code that prints an entire matrix into a function where it can be called from multiple functions.</p>

<pre><code>float
(*matrixMultiplication(float firstMatrix[][10], float secondMatrix[][10], int rowFirst,
    int columnFirst,
    int rowSecond, int columnSecond))[10]{

        //cout &lt;&lt; "first matrix is :\n";
        // print(firstMatrix);

        //cout &lt;&lt; "second matrix is :\n";
        // print(secondMatrix);
        float(*resultantMatrix)[10] = new float[10][10]();
        int i, j, k;

        // multiplying firstMatrix and secondMatrix and storing in array resultantMatrix.
        for (i = 0; i &lt; rowFirst; ++i) {
        for (j = 0; j &lt; columnSecond; ++j) {
            for (k = 0; k &lt; columnFirst; ++k) {
                resultantMatrix[i][j] += firstMatrix[i][k] * secondMatrix[k][j];
            }
        }
        }

        //printing
        for (int l = 0; l &lt; sz; ++l) {
        for (int m = 0; m &lt; sz; ++m) {
            // cout &lt;&lt; " [ " &lt;&lt; l &lt;&lt; "] [" &lt;&lt; m &lt;&lt; " ] " &lt;&lt; resultantMatrix[l][m] &lt;&lt; " ";
        }
        //cout &lt;&lt; endl;
        }
        return resultantMatrix;
}
</code></pre>

<p>For performance reasons it would be better to use <code>"\n"</code> over <code>std::endl</code> especially in loops as shown above. <code>"\n"</code> just inserts a new line, <code>std::endl</code> flushes the output after the new line which means it is making a system call and that really does slow things down.</p>

<p><strong>Indentation</strong><br>
The code above is representative of all the code, a standard practice is to indent the inner loop of all nested loops. Indentation can be an indication of code complexity and can help a code author figure out where they need additional functions. Indentation also helps reviewers and maintainers of the code to read the code.</p>

<p><strong>Code Complexity and Readability</strong><br>
The following code is a little too complex and readability could be improved:</p>

<pre><code>float (*makeTranslationMatrix(float transX, float transY, float transZ))[10] {

    float (*myMatrix)[10] = new float[10][10];

    for (int i = 0; i &lt; sz; ++i) {
    for (int j = 0; j &lt; sz; ++j) {

        if (i == j) {
            myMatrix[i][j] = 1;

        } else {
            if (i == 0 &amp;&amp; j == 3) myMatrix[i][j] = transX;
            else if (i == 1 &amp;&amp; j == 3) myMatrix[i][j] = transY;
            else if (i == 2 &amp;&amp; j == 3) myMatrix[i][j] = transZ;
            else myMatrix[i][j] = 0;
        }

    }
    }
    return myMatrix;
}
</code></pre>

<p>In the <code>else</code> clause of the major if statement all of the subsidarary if statements could be made simpler by creating and outer if statement:</p>

<pre><code>        if (j == 3)
        {
            if (i == 0)
            {
                myMatrix[i][j] = transX;
            }
            else if (i == 1)
            {
                myMatrix[i][j] = transY;
            }
            else if (i == 2) 
            {
                myMatrix[i][j] = transZ;
            }
            else
            {
                myMatrix[i][j] = 0;
            }
        }
        else
        {
            myMatrix[i][j] = 0;
        }
</code></pre>

<p>This might also improve performance by removing one comparison if the compiler hasn't already optimized it out.</p>

<p>Note: For maintainability it might be better to always put braces <code>{}</code> after <code>if (condition)</code> and <code>else</code> so that maintainers can expand code as necessary without introducing new bugs.</p>

<p>The numbers 0, 1, 2 and 3 aren't clear, it may be better to create symbolic constants with names that indicate what the actual condition is.</p>
    </div>