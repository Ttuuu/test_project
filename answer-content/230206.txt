<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Style</h1>

<p>I suggest you check PEP0008 <a href="https://www.python.org/dev/peps/pep-0008/" rel="noreferrer">https://www.python.org/dev/peps/pep-0008/</a> the official Python style guide when you write your code and Flake8 for style enforcement. The following goes accordingly:</p>

<ul>
<li><strong>Blank lines:</strong> Surround top-level function and class definitions with two blank lines. Method definitions inside a class are surrounded by a single blank line. Extra blank lines may be used (sparingly) to separate groups of related functions. Blank lines may be omitted between a bunch of related one-liners (e.g. a set of dummy implementations). No blank lines are left between your function definitions.</li>
<li><p><strong>Docstrings:</strong> Python Docstring is the documentation string which is string literal, and it occurs in the class, module, function or method definition, and it is written as a first statement. Docstrings are accessible from the doc attribute for any of the Python object and also with the built-in help() function can come in handy. Whenever someone using your code is running <code>help(Heap)</code> this will print 'Constructor' which is invalid to what the help function is made for, you should include a description to the class. I suggest you run <code>help(list)</code> might give you some insights on how docstrings might look like. And none of your methods contain docstrings while they should.</p>

<pre><code>def heapSort(self):
    # Build a minheap.
</code></pre>

<p>instead of writing a comment, use a docstring:</p>

<pre><code>def heap_sort(self):
    """Build a min heap."""
</code></pre></li>
<li><p><strong>Space around binary operators:</strong> a space should be left on both sides of an operator (+-/*&amp;^**//==!=) <code>self.lis=lis</code> should be <code>self.lis = lis</code> <code>self.a=[]</code> should be <code>self.a = []</code> <code>if i==0:</code> should be <code>if i == 0:</code> ...</p></li>
<li><strong>Descriptive variable names:</strong>  <code>self.lis=lis</code> what is <code>lis</code>? if you're referring to <code>list</code> the common convention is when an identifier conflicts with a built-in function/type it should be written with a trailing underscore: <code>list_</code>
<code>self.a=[]</code> what is <code>a</code> a name should reflect the object it represents. <code>self.r=(i-1)//2</code> what is <code>r</code>? what is <code>i</code>? ...</li>
<li><strong>Variable names:</strong> method names should be <code>lower_case_with_underscores</code> as well as variable names. <code>def heapSort(self):</code> should be <code>def heap_sort(self):</code></li>
<li><strong>Comments:</strong>  <code>'''To swap value'''</code> in <code>heapify()</code> second line should be replaced with an inline comment <code># To swap value</code></li>
</ul>

<h1>Code</h1>

<ul>
<li><code>def __init__(self,lis):</code> a class with a single parameter is not a good class, only functions that pass stuff are sufficient.</li>
<li><code>self.r=(i-1)//2</code> instance attribute defined outside the constructor in <code>heapify()</code> method.</li>
<li><p><strong>main guard:</strong> Use <code>if __name__ == '__main__':</code> guard at the end of your script which allows your module to be imported without running the whole script.</p>

<pre><code>obj=Heap(xyz)
print(obj.heapSort())
</code></pre>

<p><strong>should be written:</strong></p>

<pre><code>if __name__ == '__main__':
    obj = Heap(xyz)
    print(obj.heapSort())
</code></pre></li>
</ul>
    </div>