<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>No comments on the algorithm itself. But I have many style improvements a interviewer probably looks for.</p>

<pre><code>int main() {
    ...
    return 0;
}
</code></pre>

<p>Unlike in C the statement <code>return 0</code> is automatically generated for <code>main</code>. So its common to omit it.</p>

<p>then this line in the main is problematic as well:</p>

<pre><code>unsigned int N = 0;
unsigned int M = 0;
cin &gt;&gt; N &gt;&gt; M;
</code></pre>

<p>You expect you get an unsigned integer from the input. But who says the user types it?</p>

<p>You should better read in as <code>std::string</code> and convert the result to integer after if possible:</p>

<pre><code>for (;;) {
    std::string input;
    std::cin &gt;&gt; input;

    if (is_convertible_to_integer(input)) { // write a function to check if is convertible to unsigned int
        // convert to int
        break;
    }
}
</code></pre>

<p>This can be probably in a function as well like <code>unsigned int read_unsigend_int();</code></p>

<p>Then a classic mistake in C++. Don't use <code>using namespace std</code>. It is not a good habit. Read about it here: <a href="https://stackoverflow.com/questions/1452721/why-is-using-namespace-std-considered-bad-practice">https://stackoverflow.com/questions/1452721/why-is-using-namespace-std-considered-bad-practice</a>.</p>

<p>The next thing I wonder. Do you really need unsigned int? Often it is not worth the hassle. It can introduce hard to spot errors: <a href="https://stackoverflow.com/questions/22587451/c-c-use-of-int-or-unsigned-int">https://stackoverflow.com/questions/22587451/c-c-use-of-int-or-unsigned-int</a></p>

<p>Then you create a class just for solving basically some computations. In this case I think its over-engineering. It could be simply solved by using free standing functions.
Unlike in some other Programming languages where everything is a class you can just use free standing functions.</p>

<p>However it is a good idea to wrap your functions and classes in its own namespace to prevent name clashes. So do something like:</p>

<pre><code>namespace good_range {

    // youre functions and classes
}
</code></pre>

<p>Another small thing:</p>

<pre><code>Solution(const unsigned int _N, const unsigned int _M) : N(_N), M(_M) {}
</code></pre>

<p>No need to use const here since you have the values by value copied anyway.</p>

<p>Also you should not use <code>std::endl</code> for a newline. I even saw it in many wrong books. <code>std::endl</code> gives you a newline and an expensive flushing operation of the buffer. Instead just use <code>\n</code>.</p>

<p>A opinion based thing. This line:</p>

<pre><code>    cout &lt;&lt; "[" &lt;&lt; left &lt;&lt; ", " &lt;&lt; right &lt;&lt; "] contains " &lt;&lt; last &lt;&lt; " and sum = " &lt;&lt; (left + right) &lt;&lt; endl;
</code></pre>

<p>I would split it into two:</p>

<pre><code>    cout &lt;&lt; "[" &lt;&lt; left &lt;&lt; ", " &lt;&lt; right &lt;&lt; "] contains " &lt;&lt; last 
        &lt;&lt; " and sum = " &lt;&lt; (left + right) &lt;&lt; endl;
</code></pre>

<p>why? It is easier to read and you have the option to open two source files on one screen next to each other. I personally stick usually with 80 spaces per line. But some people user 100 or 120. To see a discussion about it:</p>

<p><a href="https://stackoverflow.com/questions/276022/line-width-formatting-standard">https://stackoverflow.com/questions/276022/line-width-formatting-standard</a></p>
    </div>