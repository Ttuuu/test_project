<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<pre><code>public int? Value { get; }
</code></pre>
</blockquote>
<p>I really can't think of any situation where I would vant to store a <code>null</code> value in a search tree. But maybe I'm too narrow minded? What should the point be?</p>
<p>It is by the way impossible to set the value to <code>null</code>, because it is <code>readonly</code> and the only constructor takes not an <code>int?</code> but an <code>int</code>. So how would one could set a <code>null</code> value? And because you don't have a default constructor, you can't make a node without a value either.</p>
<p>In other words: you've made life a little more cumbersome by having a nullable value member on the node. Make it a normal <code>int</code> value.</p>
<hr>
<p>In general validation is good and in a lot of situation it's necessary, but it's even better to not allow an invalid data structure in the first place. You can do that by making the constructor of <code>BinaryTreeNode</code> private and the <code>Left</code> and <code>Right</code> members private settable:</p>
<pre><code>  public class BinaryTreeNode
  {
    public BinaryTreeNode Left { get; private set; }
    public BinaryTreeNode Right { get; private set; }

    public int? Value { get; }

    private BinaryTreeNode(int value)
    {
      Value = value;
    }
....
</code></pre>
<p>Then you just need a static method to create the root node:</p>
<pre><code>    public static BinaryTreeNode Create(int value) =&gt; new BinaryTreeNode(value);
</code></pre>
<p>and a member method that inserts a new value:</p>
<pre><code>public void Insert(int value)
{
  if (value &lt;= Value)
  {
    if (Left == null)
      Left = new BinaryTreeNode(value);
    else
      Left.Insert(value);
  }
  else
  {
    if (Right == null)
      Right = new BinaryTreeNode(value);
    else
      Right.Insert(value);
  }
}
</code></pre>
<p>In this way, you're in full control of the data structure, and you never need to check is validity.</p>
<hr>
<p>But if you insists on your approach, you can do it in the following way:</p>
<pre><code>public bool IsValid()
{
  return (Left == null || this.Value &gt;= Left.Value &amp;&amp; Left.IsValid())
    &amp;&amp; (Right == null || this.Value &lt; Right.Value &amp;&amp; Right.IsValid());
}
</code></pre>
<p>You don't need to collect any values, but only check if the value of the current node is greater than og equal to value of the left node and smaller than the value of right node.</p>
    </div>