<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Since you are a beginner, this is a good opportunity to learn about Python's standard library, its data structures and best practices.</p>

<p>Before starting, you should always separate user in-/output and the actual calculations, as recommended in other answers. I'm going to assume that from now on.</p>

<p>It is also not quite clear how to interpret your question. Should your code just note all duplicate items or should it remove them?</p>

<hr>

<p>Let's first look at the second possibility. One way to find out how often each element appears in a <code>list</code> is to use <a href="https://docs.python.org/3/library/stdtypes.html#typesseq-common" rel="nofollow noreferrer"><code>list.count</code></a>. With this we could do:</p>

<pre><code>def make_unique(x):
    return [v for v in x if x.count(v) == 1]
</code></pre>

<p>This uses a <a href="https://docs.python.org/3/library/collections.html#collections.defaultdict" rel="nofollow noreferrer">list comprehension</a> that works similar to a <code>for</code> loop but is more compact and slightly faster. However, the algorithm is not perfect, because <code>list.count</code> checks the whole list every time it is called, so this is <span class="math-container">\$\mathcal{O}(n^2)\$</span>.</p>

<p>If we don't care about the order, then we can just use a <a href="https://docs.python.org/3/library/stdtypes.html#set" rel="nofollow noreferrer"><code>set</code></a>, which is a lot faster since it only iterates through our list once, which makes it <span class="math-container">\$\mathcal{O}(n)\$</span>:</p>

<pre><code>def make_unique(x):
    return list(set(x))
</code></pre>

<p>Another alternative if we do want to keep the order is to use the <a href="https://docs.python.org/3/library/itertools.html#itertools-recipes" rel="nofollow noreferrer"><code>itertools</code> recipe</a> <code>unique_everseen</code>:</p>

<pre><code>from itertools import filterfalse

def unique_everseen(iterable, key=None):
    "List unique elements, preserving order. Remember all elements ever seen."
    # unique_everseen('AAAABBBCCDAABBB') --&gt; A B C D
    # unique_everseen('ABBCcAD', str.lower) --&gt; A B C D
    seen = set()
    seen_add = seen.add
    if key is None:
        for element in filterfalse(seen.__contains__, iterable):
            seen_add(element)
            yield element
    else:
        for element in iterable:
            k = key(element)
            if k not in seen:
                seen_add(k)
                yield element
</code></pre>

<p>It is a bit more complicated, because it also allows to define a <code>key</code> function which is used to determine if an object has been seen before. Internally it keeps a <code>set</code>, but it <code>yield</code>s elements in order. It also iterates over the list exactly once.</p>

<hr>

<p>If you want to get all elements that are repeated, you could also use <code>list.count</code>:</p>

<pre><code>def get_duplicates(x):
    return [v for v in x if x.count(v) &gt; 1]
</code></pre>

<p>However, storing seen elements is a better solution. To also keep track of how often you have seen them, you can store them in a <code>dict</code>:</p>

<pre><code>def get_duplicates(x):
    dupes = {}
    for v in x:
        if v in dupes:
            dupes[v] += 1
        else:
            dupes[v] = 1
    for v in x:
        if dupes[v] &gt; 1:
            yield v, dupes[v]
            dupes[v] = 0
</code></pre>

<p>This needs to make two passes over the list, just like your code. One to count all elements (you just set a flag), and one to yield them in order, together with how often they appeared. By setting the value to <code>0</code> afterwards, each value appears only once.</p>

<p>That first loop can be shortened a bit by using a <a href="https://docs.python.org/3/library/collections.html#collections.defaultdict" rel="nofollow noreferrer"><code>collections.defaultdict</code></a>, so we don't need to concern ourselves with the special case that a value is not yet in the dictionary:</p>

<pre><code>from collections import defaultdict

def get_duplicates(x):
    dupes = defaultdict(int)
    for v in x:
        dupes[v] += 1
    for v in x:
        if dupes[v] &gt; 1:
            yield v, dupes[v]
            dupes[v] = 0
</code></pre>

<p>This uses the fact that an <code>int</code> is by default <code>0</code>. However, we still need two passes. So, instead we can use a <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow noreferrer"><code>collections.Counter</code></a>, which was made for exactly this situation. You want to count how often each item appears.</p>

<pre><code>from collections import Counter

def get_duplicates(x):
    dupes = Counter(x)
    for v, c in dupes.items():
        if c &gt; 1:
            yield v, c
</code></pre>

<p>But this still iterates twice, once over the whole list to build the <code>Counter</code>, and once over all unique values in it. To avoid that we can use the method <a href="https://docs.python.org/3/library/collections.html#collections.Counter.most_common" rel="nofollow noreferrer"><code>Counter.most_common</code></a>, which returns the items from the counter, sorted from most common to least. Together with <a href="https://docs.python.org/3/library/itertools.html#itertools.takewhile" rel="nofollow noreferrer"><code>itertools.takewhile</code></a>, which keeps on taking items until the condition is false:</p>

<pre><code>from collections import Counter
from itertools import takewhile

def get_duplicates(x):
    return ((v, c)
            for v, c in takewhile(lambda t: t[1] &gt; 1, Counter(x).most_common()))
</code></pre>

<p>This returns a <a href="https://wiki.python.org/moin/Generators" rel="nofollow noreferrer">generator</a> (just like all functions with a <code>yield</code> are). You need to iterate over it to get all elements, either with:</p>

<pre><code>x = [1, 2, 2, 4, 2, 2, 6, 7, 2, 2, 5, 7]
for v, c in get_duplicates(x):
    print(f"{v} occurred {c} times")
</code></pre>

<p>You can also use <code>list</code> to exhaust the generator:</p>

<pre><code>dupes = list(get_duplicates(x))
</code></pre>

<p>This function is <span class="math-container">\$\mathcal{O}(n)\$</span> for the <code>Counter</code> and <span class="math-container">\$\mathcal{O}(k)\$</span> with <span class="math-container">\$k \le \frac{n}{2}\$</span> the number of elements that appear more than once. In total that gives you <span class="math-container">\$\mathcal{O}(n)\$</span> at worst.</p>

<hr>

<p>Now let's get to the first part of your function, asking the user for input. For this it makes sense to make a function that keeps on asking the user until they supplied a valid input. While your function guards against wrong input for the elements of the list, the user can enter anything for the length. Including <code>"foobar"</code>, which will crash the program.</p>

<pre><code>def ask_user(message, type_=None):
    while True:
        user_input = input(message)
        if type_ is None:
            return user_input
        try:
            return type_(user_input)
        except ValueError:
            print("Wrong Input")

if __name__ == "__main__":
    n = ask_user("Enter the number of elements", int)
    x = [ask_user(f"Enter the number {i}", int) for i in range(n)]
</code></pre>

<p>Note that I used <code>type_</code> instead of <code>type</code>, because that is a built-in function. Using a trailing underscore in that case is a common workaround.</p>
    </div>