<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There's really not much to say about this code, it is straightforward.</p>

<h3>Style</h3>

<p>These are only nitpicks.</p>

<ul>
<li>Generic dictionary keys are typically named <code>k</code> instead of <code>i</code> or <code>j</code>, but in a specific application a more descriptive name would be even better.</li>
<li>Collections should be named by their purpose in the application, not their type.</li>
<li>By convention, assignments and other binary operators should be surrounded by spaces: <code>a = b</code>, not <code>a=b</code>. See <a href="https://www.python.org/dev/peps/pep-0008/" rel="noreferrer">PEP 8</a> for reference, if you're not already aware of it. Following this style guide makes your code easier to read for others.</li>
</ul>

<h3>Code improvements</h3>

<p>When iterating over the keys and values of a dictionary at the same time, you can use </p>

<pre><code>for k, v in dic.items():
    # ... use k, v ...
</code></pre>

<p>instead of</p>

<pre><code>for k in dic:
    v = dic[k]
    # ...
</code></pre>

<p>The nested loop can be transformed to a dictionary comprehension like this:</p>

<pre><code>dic2 = {v: k for k, values in dic.items() for v in values}
</code></pre>

<p>You can remember that the order of <code>for</code> clauses in the comprehension is the same as the order of corresponding nested <code>for</code> loops.</p>

<h3>Potential pitfalls</h3>

<p>You should be aware that this transformation from a dictionary of lists to a reverse dictionary only works if all items in the original lists are unique. Counterexample:</p>

<pre><code>&gt;&gt;&gt; dic = {0: [1, 2], 1: [2, 3]}
&gt;&gt;&gt; {v: k for k, values in dic.items() for v in values}
{1: 0, 2: 1, 3: 1}  # missing 2: 0
</code></pre>

<p>To correct this, the output dictionary should have the same format as the input, namely mapping each of the items in the input lists to a <em>list</em> of corresponding keys.</p>

<p>If the input represents a directed graph (mapping nodes to lists of neighbours), this corresponds to computing the <em>transposed</em> or <em>reversed</em> graph. It can be done by using a <a href="https://docs.python.org/3/library/collections.html#collections.defaultdict" rel="noreferrer"><code>collections.defaultdict</code></a>. I don't see an easy way to write it as a comprehension in this case.</p>

<pre><code>from collections import defaultdict

graph = {0: [1, 2], 1: [2, 3]}

transposed_graph = defaultdict(list)
for node, neighbours in graph.items():
    for neighbour in neighbours:
        transposed_graph[neighbour].append(node)

# {1: [0], 2: [0, 1], 3: [1]}
</code></pre>
    </div>