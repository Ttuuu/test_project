<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The code is pretty easy to read (apart from the monster regexp, but I'm pleased you used raw-string quoting rather than filling it with backslashes!).</p>

<p>Some (mostly stylistic) comments:</p>

<ul>
<li><p>If <code>getRange()</code> is an internal function, then give it internal linkage (<code>static</code> keyword, or an anonymous namespace).  If it's intended to be user-visible, then it could use better argument names (perhaps <code>only</code>, <code>first</code>, <code>last</code>?).</p></li>
<li><p>I think that <code>if (!string.empty())</code> shows intent a little better than <code>if (string.length())</code>.</p></li>
<li><p>Avoid calling <code>std::stoi(value1)</code> twice.</p></li>
<li><p>Prefer to pass <code>pairs</code> to <code>parseRange()</code>, rather than working with a global variable.  Also it could be defined as <code>std::vector&lt;intRange&gt;</code>.</p></li>
<li><p>The big regexp could be split into several strings so that it can occupy several shorter lines, just as we do with ordinary string literals.</p></li>
<li><p>I'd invert the test so we can return early:</p>

<pre><code>std::smatch matches;
if (!std::regex_match(input, matches, rx)) {
    return false;
}

// matched (rest of comment omitted)
auto firstRange = getRange(matches[1], matches[2], matches[3]);
auto secondRange = getRange(matches[4], matches[5], matches[6]);

/* ... */

return true;
</code></pre></li>
<li><p>Generation of the result pairs could alternatively be done using <code>std::inner_product()</code>.  However, I think the nest of loops expresses it more clearly.</p></li>
<li><p>You forgot to <code>#include &lt;iostream&gt;</code> in the test program (preventing it compiling here).</p></li>
<li><p><code>inputs</code> doesn't need to be a vector; it can be deduced (<code>auto const inputs</code>) as an initializer list.</p></li>
</ul>
    </div>