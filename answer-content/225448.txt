<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Writing psuedo-code first, then turning it into code is great. However, we should then delete the pseudo-code.</p>

<p>The problem with comments like this is that they mainly just repeat the code. If we need a comment to explain <em>what</em> the code does, we should make the code clearer instead. Comments that explain <em>why</em> the code does something the way it does are more helpful.</p>

<p>Note also that if we change the code in the future, we would have to update all these comments too, which is twice the work.</p>

<p>Comments for documentation purposes tend to be structured according to the documentation tool in use (e.g. short description, purpose of arguments, return values, etc.). However, they are probably unnecessary for a small function that will be used internally in a project.</p>

<hr>

<p>Some issues with the code:</p>

<ul>
<li><p>Do we ever really expect <code>locationStart</code> to be after <code>locationCurrent</code>? Perhaps an assertion, or an exception would be more appropriate.</p></li>
<li><p>Otherwise <code>std::optional</code> would be a better choice for the return value.</p></li>
<li><p>We should use appropriate types for indexing. If the range of indices for <code>Iter</code> cannot be negative, and needs to cover the range of a standard container (e.g. <code>std::string</code>), we should use <code>std::size_t</code>, not <code>int</code>.</p></li>
<li><p>It's probably clearer to use the divide and remainder operators directly, instead of <code>std::div</code> (if that's what <code>div</code> is). Note that <code>std::div</code>, <code>std::ldiv</code>, and <code>std::lldiv</code> all use signed integer types, which probably don't cover the appropriate range.</p></li>
<li><p>The local <code>error</code> variable is unnecessary.</p></li>
<li><p>What is <code>80</code>? Perhaps this should be a function argument (or at least a named constant).</p></li>
<li><p>We can be more consistent with naming. (The function is <code>getErrorPosition</code>, but we're returning a <code>Point</code>. Perhaps <code>CharacterPosition</code> would be a better name than <code>Point</code>).</p></li>
<li><p>Although it's called <code>getErrorPosition</code>, this function is not specific to errors - it just gets the character position from the iterators. If we give it a more general name, then we can use it for other things too.</p></li>
</ul>

<hr>

<p>So I'd suggest something like this (though the doc comments are probably not needed):</p>

<pre><code>#include &lt;cassert&gt;
#include &lt;cstdlib&gt;
#include &lt;iterator&gt;

struct CharacterPosition
{
    std::size_t row;
    std::size_t column;
};

/// \brief Returns the character position (row / column) from its index.
/// \param index The distance of the character from start of the document.
/// \param lineLength The line length of the document (all lines must be this length for the returned character position to be correct).
/// \return Row and column of the character.
CharacterPosition getCharacterPosition(std::size_t index, std::size_t lineLength)
{
    return { index / lineLength, index % lineLength };
}

/// \brief Returns the character position (row / column) from its iterator position.
/// \param start An iterator pointing to the first character of the document.
/// \param current An iterator pointing to the current character (for which we will return the position).
/// \param lineLength The line length of the document (all lines must be this length for the returned character position to be correct).
/// \return Row and column of the character.
/// \pre The current iterator must not be positioned before the start iterator
template&lt;typename Iter&gt;
CharacterPosition getCharacterPosition(Iter start, Iter current, std::size_t lineLength)
{
    assert(start &lt;= current);

    auto distance = std::distance(start, current);

    return getCharacterPosition(distance, lineLength);
}
</code></pre>
    </div>