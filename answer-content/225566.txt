<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><strong>Docstring</strong>: You should include a <a href="https://www.python.org/dev/peps/pep-0008/#documentation-strings" rel="nofollow noreferrer"><code>docstring</code></a> at the beginning of every method/class/module you write. This will help documentation identify what your code is supposed to do.</li>
<li><strong>Simplify boolean comparison</strong>: Instead of evaluating <code>if found == False</code>, you should evaluate the variable itself, <code>if not found:</code>, since it contains a boolean value.</li>
<li><strong>Simplify variable addition</strong>: Instead of doing <code>x = x + 1</code>, you should do <code>x += 1</code>, since it's more compact and easier to read. You switch between these two in your program, but it good to stay consistent with one practice.</li>
<li><strong>Variable Naming</strong>: You did a good job of naming the variables <code>snake_case</code>, but the method names are lacking. <a href="https://www.python.org/dev/peps/pep-0008/#naming-conventions" rel="nofollow noreferrer">This</a> is a link to PEP-8 Naming Conventions, which can provide more insight.</li>
</ul>

<p><strong><em>Updated Code</em></strong></p>

<pre><code>"""
Module Docstring:
A description about your program goes here
"""

import random
import numpy as np

class Seats():
    """
    A class for containing an array of seats, finding seats,
    and counting good seats
    """
    def __init__(self, cs, ns):
        """
        Seats Class Init Method

        :param cs: The size of the grid of seats
        :param ns: The number of agents

        """
        self.cs = cs
        self.ns = ns 
        self.seats = np.zeros([self.cs, self.cs], dtype=int)  

    def found_seat(self):
        """
        Attempts to find an open seat in the array `self.seats`
        """
        found = False
        tries = 0
        while not found and tries &lt;= 3:
            x = random.randint(0, self.cs)
            y = random.randint(0, self.cs)
            if self.seats[x][y] &lt; 1:
                self.seats[x][y] = 1
                found = True
            else:
                tries += 1

    def good_seat(self, x, y):
        """
        Determines the amount of empty neighbors around the seat

        :param x: The X coordinate of the seat
        :param y: The Y coordinate of the seat

        """
        empty_neighbors = 0
        for neighbor_x in range(x - 1, x + 1):
            for neighbor_y in range(y - 1, y + 1):
                if self.seats[neighbor_x][neighbor_y] == 0:
                    empty_neighbors += 1

</code></pre>
    </div>