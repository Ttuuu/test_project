<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Consistency</h1>

<p>Your class does not seem consistent with itself.  If you create a <code>LinearReg</code> object:</p>

<pre><code>x = [1, 2, 3, 4, 5]
y = [2, 3, 2.5, 4, 3.5]
lr = LinearReg(x, y)
</code></pre>

<p>The constructor computes the mean of the <code>x</code> and <code>y</code> lists, and stores these for later computations.  These means are fixed; you cannot add additional data points, as the mean will not be recomputed.</p>

<p>If you call <code>lr.get_b_zero()</code>, you will return the value <code>0</code>, since the <code>b_zero</code> member has not been computed.</p>

<p>Each time you call <code>lr.get_slope()</code>, it recomputes the slope and stores the result.  If you have changed the <code>x</code> and <code>y</code> lists, the computed value will be different ... and incorrect since the mean values have not changed.</p>

<p>Each time you call <code>fit_best_line()</code>, it calls <code>get_slope()</code> which recomputes the slope (possibly incorrectly if the data has changed), and uses the result to compute (or recompute) and store the <code>b_zero</code> value.  And as a side effect, it prints the line equation.</p>

<p>If you want to use this class to get the best fit straight line, and use the slope &amp; intercept in other calculations, you must:</p>

<ul>
<li>Create the <code>LinearReg</code> object</li>
<li>Call <code>fit_best_line()</code> to compute the b_zero

<ul>
<li>Ignore the spurious, unnecessary print output</li>
</ul></li>
<li>Call <code>get_slope()</code> (unnecessarily recomputes the slope)</li>
<li>Call <code>get_b_zero()</code>.</li>
<li>Use the return values.</li>
</ul>

<p>I'm certain you'd agree this is somewhat awkward.  It would not work well in a large library.</p>

<h1>Stop Writing Classes</h1>

<p>See the YouTube video <a href="https://www.youtube.com/watch?v=5ZKvwuZSiyc" rel="nofollow noreferrer">Stop Writing Classes</a> for more detail.</p>

<p>You don't need a class for this; just a single function.  This function would:</p>

<ul>
<li>Compute the means</li>
<li>Compute the slope</li>
<li>Compute the b_zero</li>
<li>Return the above</li>
</ul>

<p>A class is unnecessary, because everything can be done in this one simple function call. No state needs to be maintained.</p>

<pre><code>from collections import namedtuple

LinearReg = namedtuple('LinearReg', 'x_mean, y_mean, slope, b_zero')

def linear_regression(x, y):

    if len(x) != len(y):
        raise ValueError("Both axis must have the same number of values")

    x_mean = sum(x) / len(x)
    y_mean = sum(y) / len(y)

    sum_x2_dev = sum((xi - x_mean) ** 2 for xi in x)
    sum_xy_dev = sum((xi - x_mean) * (yi - y_mean) for xi, yi in zip(x, y))

    slope = sum_xy_dev / sum_x2_dev
    b_zero = y_mean - slope * x_mean

    return LinearReg(x_mean, y_mean, slope, b_zero)
</code></pre>

<p>Usage:</p>

<pre><code>&gt;&gt;&gt; lr = linear_regression([1, 2, 3, 4, 5], [2, 3, 2.5, 4, 3.5])
&gt;&gt;&gt; lr.slope
0.4
&gt;&gt;&gt; lr.b_zero
1.7999999999999998
</code></pre>

<p>We can slightly beefed up the <code>namedtuple</code>, adding some convenience methods to it:</p>

<pre><code>class LinearReg(namedtuple('LinearReg', 'x_mean, y_mean, slope, b_zero')):

    def __str__(self):
        return f"The best line equation is: {self.slope:.2f}x + {self.b_zero:.2f}"

    def __call__(self, x):
        """
        Interpolation/extrapolation: return y-value for a given x-value
        """
        return self.slope * x + self.b_zero
</code></pre>

<p>And then we'd additionally have:</p>

<pre><code>&gt;&gt;&gt; str(lr)
'The best line equation is: 0.40x + 1.80'
&gt;&gt;&gt; lr(6)
4.2
</code></pre>

<h1>A Use Case for a Class</h1>

<p>If your <code>LinearReg</code> object allowed additional data points to be added, then you would have "state" which could be maintained in your object.  And then it would make sense to recompute the slope and b_zero values when requested.</p>
    </div>