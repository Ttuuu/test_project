<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First things first: <a href="https://docs.python.org/3/library/random.html#random.randint" rel="nofollow noreferrer"><code>random.randint()</code></a> is inclusive of it's second term, so (0, 5) can generate 5 (this is different than <code>range()</code>, for example, which is exclusive of the 2nd term). If you want to maintain the similarity with <code>range()</code>, there is <a href="https://docs.python.org/3/library/random.html#random.randrange" rel="nofollow noreferrer"><code>random.randrange()</code></a> which acts like you expect. This is reflected in the docs:</p>
<blockquote>
<p><code>random.randint(a, b)</code>:</p>
<p>Return a random integer N such that a &lt;= N &lt;= b. Alias for randrange(a, b+1).</p>
</blockquote>
<p>There are multiple ways to deconflict ships, the simplest is to just regenerate when you detect a conflict:</p>
<pre><code>import random

number_of_ships = 3
boardsize = 5

def generate_ships(number_of_ships, max_x, max_y):
    while True:
        ships = [(random.randint(0, max_x - 1), random.randint(0, max_y - 1)) for _ in range(number_of_ships)]
        if len(set(ship for ship in ships)) == number_of_ships:
            return ships  # return once we have a list of unique ships

ship_locations = generate_ships(number_of_ships, boardsize, boardsize)
</code></pre>
<p>In this case I just make a set of all ship coordinates and see if that set is the same length as the number of ships requested. If any share coordinates, the set will be short, so I regenerate the list.</p>
<p>I'm using a list comprehension, which is equivalent to:</p>
<pre><code>ships = []
for _ in range(number_of_ships):
    ships.append((random.randint(0, max_x - 1), random.randint(0, max_y - 1)))
</code></pre>
<p>It's worth noting <code>_</code> is not a special variable, but by convention shows I'm not using that value (I just want the code to repeat <code>number_of_ships</code> times.)</p>
<p>I ran a quick test and over 1 million attempts to generate ships there was a conflict about 13% of the time on a 5x5 board, which is generally consistent with the expected overlap rate for a 25 choose 3 problem. On an 8x8 that drops to 5%.</p>
<blockquote>
<p><code>if game_board[row][column] == "-" or game_board[row][column] == "X":</code></p>
<p><code>elif (row, column) == ship1 or (row, column) == ship2 or (row, column) == ship3</code></p>
</blockquote>
<p>These can both be simplified with <code>in</code> notation, which checks whether something is contained in a list, doubly so if you put the ships into a list like I showed above:</p>
<pre><code>if game_board[row][column] in "-X":  # If board shows either a dash or X
    ...
elif (row, column) in ship_locations:  # If ship at location
    ...
</code></pre>
<blockquote>
<p><code>if ships_left == 0:</code></p>
</blockquote>
<p>Numbers are truthy/falsey, so you can instead say</p>
<pre><code>if not ships_left:
    ...
</code></pre>
    </div>