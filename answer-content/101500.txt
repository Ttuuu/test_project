<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p><strong>Disclaimer:</strong> I'm not a Python programmer!</p>
</blockquote>

<hr>

<p>Your code isn't that bad. It's readable enough for me to understand it. B+ for readability!</p>

<hr>

<p>Currently, you have this function:</p>

<pre><code>def giveRange(numString:str):
    z=numString.split("-")
    if(len(z)==1):
        return [int(z[0])]
    elif(len(z)==2):
        return list(range(int(z[0]),int(z[1])+1))
    else:
        raise IndexError("TOO MANY VALS!")
</code></pre>

<p>Why don't you simply store the length in a variable?</p>

<p>Like this:</p>

<pre><code>length=len(z)
if(length==1):
    return [int(z[0])]
elif(length==2):
    return list(range(int(z[0]),int(z[1])+1))
else:
    raise IndexError("TOO MANY VALS!")
</code></pre>

<p>Now, you don't have to calculate the length twice, only once.</p>

<hr>

<p>The name <code>z</code> is a really bad name. Better names would be <code>numbers</code>, <code>pieces</code> or something similar.</p>

<hr>

<p>Looking at the definition of <a href="https://docs.python.org/3/library/itertools.html#itertools.chain" rel="nofollow"><code>chain()</code></a>, it seems to accept any iterable, which a <code>range()</code> happens to be. So, you probably don't need that <code>list()</code>, leaving this:</p>

<pre><code>return range(int(z[0]),int(z[1])+1)
</code></pre>

<hr>

<p>On your function <code>unpackNums</code> instead of creating an empty <a href="https://docs.python.org/3/tutorial/datastructures.html#sets" rel="nofollow"><code>set()</code></a>, you could use the a set comprehension:</p>

<pre><code>def unpackNums(numString:str):
    return {x for x in set(chain(*map(giveRange,numString.split(","))))}
</code></pre>

<hr>

<p>If you notice any inaccuracies, please comment.</p>
    </div>