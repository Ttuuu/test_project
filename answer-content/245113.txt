<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>One thing I don't see mentioned in spyr03's excellent review: I think it's unnecessarily inconsistent (and thus confusing) for you to use mixin classes to implement 100% of the <code>get_valid_moves</code> routine for <code>Rook</code>, <code>Bishop</code>, and <code>Queen</code>, but then reuse only half of that code for <code>King</code> (and open-code the other half).
If you're going to write</p>
<pre><code>class Queen(
    WalksStraightMixin, WalksDiagonallyMixin, WalksMultipleStepsMixin, Piece,
):                                            #######################
    def __str__(self):
        if self.color == Color.WHITE:
            return '♕'
        return '♛'
</code></pre>
<p>then you should also write</p>
<pre><code>class King(
    WalksStraightMixin, WalksDiagonallyMixin, WalksSingleStepMixin, Piece,
):                                            ####################
</code></pre>
<p>It's gratuitously confusing to have <code>WalksStraightMixin</code> and <code>WalksDiagonallyMixin</code> set values into <code>self.directions</code> that are then read by <code>King</code> itself. This is a tightly coupled dependency between the mixins and the implementation of <code>King</code>; consider how many places in the code you'd have to change if you wanted to rename <code>directions</code> to <code>possibleDirections</code>, or something like that.</p>
<hr>
<p>In real life, btw, I would consider your mixin idea to be much too complicated. We could "keep it simple" by manually implementing <code>get_valid_moves</code> for each class individually:</p>
<pre><code>class Piece:
    straight_directions = [...]
    diagonal_directions = [...]
    all_directions = straight_directions + diagonal_directions
    def get_single_step_moves_impl(directions): ...
    def get_multistep_moves_impl(directions): ...

class Rook(Piece):
    def get_valid_moves(self):
        return self.get_multistep_moves_impl(Piece.straight_directions)

class Queen(Piece):
    def get_valid_moves(self):
        return self.get_multistep_moves_impl(Piece.all_directions)

class King(Piece):
    def get_valid_moves(self):
        return self.get_single_step_moves_impl(Piece.all_directions)
</code></pre>
<p>Here, rather than inheriting from mixins — that might conceivably affect the behavior of the whole class — we limit our "different" effects to the smallest possible scope. The difference between <code>Queen</code>'s use of <code>get_multistep_moves_impl</code> and <code>King</code>'s use of <code>get_single_step_moves_impl</code> is clearly restricted to <code>get_valid_moves</code> only; <code>Queen</code> and <code>King</code> clearly don't differ in anything other than the behavior of <code>get_valid_moves</code> (not as presented above, anyway). This limitation-of-possible-effects makes it easier for the reader to reason about the code.</p>
    </div>