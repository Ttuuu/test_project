<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Main issues:</h3>

<ul>
<li>If the main purpose of this webserver is to call stored procedures, then I'd expect to see a <code>CallStoredProcedure</code> method somewhere. That should make it easier to understand the purpose of the code, and it lets you clean up <code>ProcessRequest</code>, so it can call procedures and prepare a response without getting bogged down in the details.</li>
<li>There's no documentation about what sort of requests this webserver can handle, and how they should be formatted. The same goes for responses. Maybe you've got documentation elsewhere? Personally I prefer to keep it close to the code itself, to increase the likelyhood that it will be kept in sync.</li>
<li>It's difficult to discern the meaning of <code>kind</code> and <code>code</code>. I'd use enums, or at least named constants, to make it apparent what values the code expects to handle, and what the meaning of those values is.</li>
</ul>

<h3>Inconsistencies:</h3>

<p>There are a lot of inconsistencies in your code:</p>

<ul>
<li>Some type names use an alias, others are written out fully.</li>
<li>Sometimes you're using C# aliases for basic types like <code>string</code> and <code>object</code>, sometimes not.</li>
<li>Sometimes an inner scope is indented and put on a separate line, sometimes it's put on the same line.</li>
<li>Sometimes an inner scope is surrounded by braces, sometimes not.</li>
<li>Some names are abbreviated, some are not.</li>
<li>Most parameter names are written in camelCase, as is usual, but a few are not.</li>
</ul>

<p>All of this makes the code harder to read and understand than it needs to be. Here's what I would change:</p>

<ul>
<li>Unless you have a specific reason for using namespace aliases the way you do, I'd do what everyone else does: <code>using System;</code>, <code>using System.Data;</code>, <code>using System.Data.SqlClient;</code>, and so on. With that, you don't need to write fully qualified names anywhere, which reduces clutter.</li>
<li>Most people use <code>string</code> and <code>object</code> for variables, parameters and the like, and <code>String</code> and <code>Object</code> when they're calling a static method on one of those types.</li>
<li>Always putting inner scopes on a separate line, and indenting them, makes control flow easier to see.</li>
<li>Regarding braces, some people recommend always use braces, no matter what, to prevent certain kinds of bugs. I think that's a bit excessive for conditional <code>return</code> and <code>throw</code> statements, but I do try to be consistent.</li>
<li><code>GetConnection</code>, <code>table</code>, <code>row</code>, <code>context</code>, <code>dataTable</code>, <code>collection</code>, <code>fileCollection</code> and so on should be easier to understand than <code>GetConn</code>, <code>t</code>, <code>r</code>, <code>ctx</code>, <code>dt</code>, <code>nvc</code> and <code>fc</code>, without being too long for comfort.</li>
<li>Fields, parameter names and local variables are normally written in camelCase. PascalCase is used for type, method and property names.</li>
</ul>

<h3>Other notes:</h3>

<ul>
<li>Duplicate type annotations can be removed by relying on type inference: <code>var table = new DataTable();</code> is equivalent to <code>DataTable table = new DataTable();</code>.</li>
<li><code>DataSet.Tables</code> and <code>DataTable.Rows</code> can be iterated directly with <code>foreach</code>.</li>
<li><code>IsReusable</code> can be simplified to <code>public bool IsReusable =&gt; true;</code>.</li>
<li><code>UnhandledException += new UnhandledExceptionEventHandler(LogException);</code> can be simplified to <code>UnhandledException += LogException;</code>.</li>
<li><code>"Unhandled exception: " + ex.ToString()</code> can be simplified to <code>$"Unhandled exception: {ex}"</code>.</li>
</ul>
    </div>