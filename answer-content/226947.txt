<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Lets move above JavaScript 101</h2>

<p>To OP, I first must address the quality of some parts of some of the given answers that concern me.</p>

<p>I am continually shocked at the misunderstanding of JavaScript here in Code Review, Sorry if I rub some the wrong way but please, we are professionals and our answers should reflect that fact.</p>

<h3>Issues</h3>

<ul>
<li><p>The naming critique is nit picking and not worthy of a mention as the abstract is not in the realm of natural language.</p></li>
<li><p>The critique of the nested ternaries is a worry, particularly in this problem as it deals with JS strings and alternatives ignore the need to avoid string building concatenation overhead. </p>

<p>I would expect a first year JS101 student to be thrown by nested ternaries, but not professionals, the ongoing emphasize in this forum on avoiding them makes it look like an undergrad hangout.</p></li>
<li><p>No one noticed the precision problem!!!! </p></li>
</ul>

<h2>The review</h2>

<p>I found your function to be of good quality, naming is kept simple and in line with what one would expect from a mathematician. Due to the nature of the problem I would not expect someone without that type of knowledge to modify or get near the function.</p>

<p>There are some simple style problems and can be DRY er</p>

<p>The only major issue is that there is no (implied or direct) accounting for the the precision issue, </p>

<h3>Number precision</h3>

<p>I am surprised that your function passes all the tests because the upper limit of the polynomial order is well above the floating point (Double) precision of JavaScript Numbers</p>

<p>Lets start with the most inefficient section of your code. The function you call <code>fac</code> that generates the factorial sequence. </p>

<p>The size of value grows very quickly with <code>f(n) = f(70) = 1.197857166996989e100</code> that is close enough to a google to be called a <code>1.2 google</code></p>

<p>If we consider that <code>Number.MAX_SAFE_INTEGER = 9.007199254740991e15</code> is 85 orders of magnitude below the 71st factorial any integer calculations around this range are going to produce rounding errors.</p>

<h3>Ambiguous results due to precedence</h3>

<p>This becomes even more pronounced as integer math seriously breaks down when we pass the precision limit.</p>

<p>For example lets strip out some of your code and look at the second line in the <code>for</code> loop. Substituting some constants to demonstrate the problem</p>

<pre><code>const fac = n =&gt; n &lt; 2 ? 1 : n * fac(n - 1);
const a = 3, b = 13, n = 23, i = 11;
const k = n - i;
const c = !b &amp;&amp; k &gt; 0 ? 0 : a**i * b**k * (k === 0 ? 1 : fac(n) / (fac(k) * fac(n - k)));
</code></pre>

<p>In this special case the last line assigning to <code>c</code> has some redundancy that one would naturally reduce to the following line</p>

<pre><code>const c1 = a**i * b**k *  fac(n) / (fac(k) * fac(n - k));
</code></pre>

<p>We have not changed the equation, we have simply removed a brackets that separated the ternary with clause <code>(k === 0 ? ...)</code> (BTW could have been <code>(!k ? ...)</code>.</p>

<p>However due to the way the rounding error is propagated the two lines <code>c</code>, <code>c1</code> will return two different values</p>

<pre><code>console.log(c) //  5.580277237278821e+24
console.log(c1) // 5.580277237278822e+24
console.log(c === c1) // false
</code></pre>

<p>The different is minor and inconsequential in the order we are using, ~1 billion apart, but as the result is a string and as there are many ways to correctly arrange the precedence of the calculations there are many results that are about correct yet would not pass a string comparison.</p>

<h3>Why did your function pass?</h3>

<p>For high order polynomials getting the correct answer, is either,</p>

<ol>
<li>Just pure luck, </li>
<li>The test is inclusive of all rounding errors (seriously doubt that)</li>
<li>The test expects that you use <code>BigInt</code> in the calculations to avoid loss of precision (maybe but as you have passed all tests, my guess is that this is not so)</li>
<li>You are never passed a polynomial above the precision range of a double that can not be optimized. eg <code>"(x+0)^204"</code> does not suffer precision problem as all but the first coefficients are 0 and the first is 1 with the result <code>"x^204"</code></li>
</ol>

<h2>Rewrite</h2>

<p>If we consider that option 4 is the reality of the problem then we have a handy optimization available by using a lookup for the factorial sequence rather than calculating it of each coff. Limiting it to <code>Number.MAX_SAFE_INTEGER</code> we can cover that range up to <code>fac(24)</code></p>

<p><strong>PLEASE NOTE</strong> that this is the upper limit and that as the order approaches 24 the chance of precision error increases depending on the size of the values of a and b. The order 24 represents the max order that may return reliable results, not the max order that will. eg <code>(12345235423875623537345x+1)^1</code> will likely fail.</p>

<p>Rewriting your function with some changes to address style and performance </p>

<ul>
<li>Use <code>Number</code> rather than <code>parseInt</code></li>
<li>Use constants for values that do not change</li>
<li>Use the name <code>p</code> (power) or <code>o</code> (order) to replace <code>n</code>. I opt for 'p' as <code>o</code> is too near <code>0</code> for me (bad eyesight)</li>
<li>Replace <code>x</code> with <code>name</code></li>
<li>Drop the unneeded assignment to <code>_</code> underscore in the destructure declaration. eg <code>const [ _, a, b] = [1,2,3]</code> can also be written as <code>const [ , a, b] = [1,2,3]</code> you do not need to define unwanted items</li>
<li>Rearrange the declarations a little. Assign the <code>String.match</code> to an array and then destructure to constants rather than variables.</li>
<li>Avoiding the string building overhead of concatenating strings by using an array, to hold the coefficients (as strings) that is joined on the return to avoid overhead due to the need to iterate and reassign each time you concat a string variable.</li>
<li>To further avoid the string building overhead  we need to create a coefficient string in one expression and push that to an array of strings. That means we have no choise but to use <strong>NESTED ternaries</strong></li>
<li>Use the less noisy <code>while</code> loop and move the top and bottom coefficient out of the loop and be handled as special cases.</li>
<li>Add tests for early exits possible when <code>a = 0</code>, <code>p = 1</code> (<code>p</code> formaly <code>n</code>), eg <code>"(x+0)^203"</code> will return <code>"x^203"</code> without iterating 203 pointless coefficient calculations</li>
<li>And some minor repeated calculations (and now a lookup) as stored constants rather than calculated. eg <code>k - n === i</code> so <code>fac(k - n)</code> can be <code>fac(i)</code> and fac(n) is the same each iteration so assign that to a constant <code>facN</code> before the loop.</li>
<li>Add the function <code>signed</code> that returns the partial formatted coefficient string, with arguments to deal with leading sign.</li>
<li>Add function <code>finalCoff</code> to handle the two cases when we tack on the last coff</li>
</ul>

Output change

<p>One change to the output as it makes no sense as it stands. When simplifying, eg <code>"0x^2 + 2"</code> becomes <code>"2"</code> however your function returns an empty string for <code>"0x^2 + 0"</code> becomes <code>""</code>. This is not what one would expect, at minimum a number is expected, thus the function will return "0" rather than ""</p>

<p>As you are running this in a test environment you will likely not be ablue to close over the array <code>facSeq</code> so I have placed it inside the function.</p>

<pre><code>function expandA(str) {
    const facSeq = [0,1,2,6,24,120,720,5040,40320,362880,3628800,39916800,479001600,6227020800,87178291200,1307674368000,20922789888000,355687428096000,6402373705728000,121645100408832000,2432902008176640000,51090942171709440000,1.1240007277776077e21,2.585201673888498e22,6.204484017332394e23];
    const finalCoff = n =&gt; n &lt; 0 ? n : (n ? "+" + n : "");
    const signed = (n, pow, plus = "+") =&gt; (
            n &lt; 0 ? 
                (pow ? (n === -1 ? "-" : n) : (!pow ? n : "-")) : 
                (n ? plus + (n &gt; 1 ? n : "") : "")
        ) + 
        (pow &gt; 1 ? name + "^" + pow : (pow === 1 ? name : ""));

    const mt = str.match(/\((-?\d*)([a-z])([-+]\d+)\)\^(\d+)/)
    const [ , a, name, b, p] = [,
        mt[1] ? mt[1] == '-' ? -1 : Number(mt[1]) : 1,
        mt[2], Number(mt[3]), Number(mt[4])];

    if (a === 0) { return "" + b ** p }
    if (p === 1) { return (a ? signed(a, p, "") : "") + finalCoff(b) }
    const facN = facSeq[p];
    var i = p, coffs = [signed(a ** p, p, "")];
    while (i-- &gt; 1) {
        const pos = p - i, cof = a ** i * b ** pos * facN / (facSeq[pos] * facSeq[i]);
        cof &amp;&amp; coffs.push(signed(cof, i));
    }
    return coffs.join("") + finalCoff(b ** p);
}
</code></pre>

<p>If you find that this does not work, because the polynomials you need all coffs for are in orders greater than 24. You can reinstate the <code>fac</code> function, modified to lookup first and calculate if needed. <strong>NOTE</strong> still returns "0" rather than ""</p>

<pre><code>function expandA(str) {
    const facSeq = [0,1,2,6,24,120,720,5040,40320,362880,3628800,39916800,479001600,6227020800,87178291200,1307674368000,20922789888000,355687428096000,6402373705728000,121645100408832000,2432902008176640000,51090942171709440000,1.1240007277776077e21,2.585201673888498e22,6.204484017332394e23];
    const fac = n =&gt; facSeq[n] ? facSeq[n] : (n &lt; 2 ? 1 : n * fac(n - 1));
    const finalCoff = n =&gt; n &lt; 0 ? n : (n ? "+" + n : "");
    const signed = (n, pow, plus = "+") =&gt; (
            n &lt; 0 ? 
                (pow ? (n === -1 ? "-" : n) : (!pow ? n : "-")) : 
                (n ? plus + (n &gt; 1 ? n : "") : "")
        ) + 
        (pow &gt; 1 ? name + "^" + pow : (pow === 1 ? name : ""));

    const mt = str.match(/\((-?\d*)([a-z])([-+]\d+)\)\^(\d+)/)
    const [ , a, name, b, p] = [,
        mt[1] ? mt[1] == '-' ? -1 : Number(mt[1]) : 1,
        mt[2], Number(mt[3]), Number(mt[4])];

    if (a === 0) { return "" + b ** p }
    if (p === 1) { return (a ? signed(a, p, "") : "") + finalCoff(b) }
    const facN = fac(p);
    var i = p, coffs = [signed(a ** p, p, "")];
    while (i-- &gt; 1) {
        const pos = p - i, cof = a ** i * b ** pos * facN / (fac(pos) * fac(i));
        cof &amp;&amp; coffs.push(signed(cof, i));
    }
    return coffs.join("") + finalCoff(b ** p);
}
</code></pre>

<h2>Performance</h2>

<p>using the second version function and testing for a even distribution of <code>(nx+n)^m</code> where m is <code>1 &lt;= m &lt;= 300</code> and n is <code>-1000 &lt; n &lt; 1000</code> there is a marginal performance benefit of 10%</p>

<p>If we avoid rounding errors by only passing zero for the first term <code>"nx"</code> n = 0 when <code>m &gt; 20</code> and only making 5% of calls in the range <code>m &gt; 20</code> the performance increases is near 40%</p>

<p>The first version will not handle a full range but has an even better performance and may well pass the test suit you use. (excluding the "0")</p>

<h2>Final</h2>

<p>I expect this will get some down votes, and please do if you feel it warranted. </p>

<p>If you do please do provide a comment regarding the reasoning for the benefit of the OP and others.</p>

<p>I am not going to enter into debate and reply to comments of such nature unless specifically asked a question (collection of words ending with ?)</p>
    </div>