<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<pre><code>#ifndef SingleLinkedList_h
#define SingleLinkedList_h
</code></pre>

<p>Most naming conventions reserve UPPERCASE to differentiate between preprocessor (Macro) variables from C++ language constructs/variables.  </p>

<p>The name of your include guard should aim to minimize the chance of clashes with names from other code.  Use differentiators like project name, physical path, logical path, author name, date, and/or GUIDs.</p>

<pre><code>// Exposition-only
#ifndef SNORLAXXX_CONTAINERS_SINGLE_LINKED_LIST_H_080418_INCLUDED
#define SNORLAXXX_CONTAINERS_SINGLE_LINKED_LIST_H_080418_INCLUDED
</code></pre>

<hr>

<pre><code>#include &lt;iostream&gt;
</code></pre>

<p>Do not include <code>&lt;iostream&gt;</code> in header files.  Most C++ implementations will inject static constructors into every translation unit that includes your header, whether or not IO facilities are needed.</p>

<hr>

<pre><code>    struct Node {
        T data;
        std::unique_ptr&lt;Node&gt; next = nullptr;
        Node(T x) : data(x), next(nullptr) {}
    };
</code></pre>

<p><code>std::unique_ptr&lt;&gt;</code> requires <code>&lt;memory&gt;</code>.</p>

<p>Constructors with a single non-default parameter should be declared with the function specifier <code>explicit</code> to avoid unintended implicit conversions.</p>

<p>A constructor should create a fully initialized object.  If I have both the <code>data</code> and the <code>next</code> pointer, I should be able to create an object without requiring the extra step of assignment to <code>next</code>. What if I want to construct <code>data</code> in place?  Is <code>T</code> guaranteed to be cheap to copy?</p>

<p><em>Update</em></p>

<pre><code>    // Exposition-only
    struct Node {
        T data;
        std::unique_ptr&lt;Node&gt; next = nullptr;

        // disable if noncopyable&lt;T&gt; for cleaner error msgs
        explicit Node(const T&amp; x, std::unique_ptr&lt;Node&gt;&amp;&amp; p = nullptr) 
        : data(x)
        , next(std::move(p)) {}

        // disable if nonmovable&lt;T&gt; for cleaner error msgs
        explicit Node(T&amp;&amp; x, std::unique_ptr&lt;Node&gt;&amp;&amp; p = nullptr) 
        : data(std::move(x))
        , next(std::move(p)) {}
    };
</code></pre>

<hr>

<pre><code>    void display(std::ostream &amp;str) const {
        for (Node* loop = head.get(); loop != nullptr; loop = loop-&gt;next.get()) {
            str &lt;&lt; loop-&gt;data &lt;&lt; "\t";
        }
        str &lt;&lt; "\n";
    }
</code></pre>

<p>This is one of your dependents on <code>&lt;iostream&gt;</code> that isn't necessary. A better approach is to create an interface to your data.  In the standard library, that is done through iterators.  You can also apply a visitor function to each element.</p>

<pre><code>// Exposition-only
public:
    template &lt;typename UnaryOp&gt;
    void for_each_element(UnaryOp f) const {
        for (auto current = head.get(); head; head = head-&gt;next.get()) {
            std::invoke(f, std::as_const(current-&gt;data));
        }
    }
</code></pre>

<p><code>display</code>, <code>display(str)</code>, and <code>operator&lt;&lt;</code> can now be standalone functions.  They can be placed in their own header and the user can selectively include it into their project if they really want output facilities.</p>

<hr>

<pre><code>    bool empty() const { return head.get() == nullptr; }
</code></pre>

<p><a href="https://en.cppreference.com/w/cpp/memory/unique_ptr/operator_bool" rel="nofollow noreferrer"><code>std::unique_ptr&lt;&gt;::operator bool()</code></a> exists.  You neither have to call <code>get()</code> or compare to <code>nullptr</code>.</p>

<hr>

<pre><code>template &lt;class T&gt;
SingleLinkedList&lt;T&gt;::SingleLinkedList(SingleLinkedList&lt;T&gt; const &amp;source) {
    for(Node* loop = source.head.get(); loop != nullptr; loop = loop-&gt;next.get()) {
        push(loop-&gt;data);
    }
}
</code></pre>

<p>Seems like a good use case for a visitor traverser.</p>

<p><em>Update</em></p>

<pre><code>// Exposition-only
template &lt;class T&gt;
SingleLinkedList&lt;T&gt;::SingleLinkedList(SingleLinkedList&lt;T&gt; const &amp;source) {
    source.for_each_element([&amp;](auto&amp;&amp; value) { push(value); });
}
</code></pre>

<hr>

<pre><code>    template &lt;class T&gt;
    SingleLinkedList&lt;T&gt;::~SingleLinkedList() {
        while (head != nullptr) {
            deleteHead();
        }
    }
</code></pre>

<p>The body of your destructor would be useful to the user if they ever wanted to <code>clear()</code> their list.</p>

<p>Think semantically, not just syntactically. You check to see if the list is empty here, but you also check again in <code>deleteHead()</code>. </p>

<pre><code>    // Exposition-only
private:
    template &lt;class T&gt;
    SingleLinkedList&lt;T&gt;::do_pop_front() {
        head = std::move(head-&gt;next);
    }

public:
    template &lt;class T&gt;
    SingleLinkedList&lt;T&gt;::~SingleLinkedList() {
        clear();
    }

    template &lt;class T&gt;
    void SingleLinkedList&lt;T&gt;::clear() {
        while (head) {
            do_pop_front();
        }
    }

    template &lt;class T&gt;
    void SingleLinkedList&lt;T&gt;::deleteHead() {
        if (empty()) { throw ... }
        do_pop_front();
    }
</code></pre>

<hr>

<pre><code>     using std::swap;
</code></pre>

<p>Requires <code>&lt;utility&gt;</code>.</p>

<hr>

<pre><code>template &lt;class T&gt;
int SingleLinkedList&lt;T&gt;::getSize() const {
    int size = 0;
    for (auto current = head.get(); current != nullptr; current = current-&gt;next.get()) {
        size++;
    }
    return size;
}
</code></pre>

<p>If you want your container to be usable with existing standard interfaces, follow the naming conventions (<code>size</code>).  You can read about the <a href="http://eel.is/c++draft/container.requirements#general" rel="nofollow noreferrer">Container requirements</a>.</p>

<p>Consider caching the size as a data member. It's simple\$^{1}\$ for your class to keep count as operations on your list happen. <em>Note - Splicing would become an \$O(n)\$ operation as it has to recalculate the size on splice.</em></p>

<p>Should <code>int</code> represent your size type?</p>

<p>\$^{1}\$"<em>There are 2 hard problems in computer science: cache invalidation, naming things, and off-by-1 errors.</em>" -- Leon Bambrick</p>

<hr>

<pre><code>template &lt;class T&gt;
void SingleLinkedList&lt;T&gt;::push(const T &amp;theData) {
    std::unique_ptr&lt;Node&gt; newNode = std::make_unique&lt;Node&gt;(theData);

    if (head == nullptr) {
        head = std::move(newNode);
        tail = head.get();
    }

    else {
        tail-&gt;next = std::move(newNode);
        tail = tail-&gt;next.get();
    }
}
</code></pre>

<p><code>std::move</code> requires <code>&lt;utility&gt;</code>.  The logic can be simplified.</p>

<pre><code>// Exposition-only.
template &lt;class T&gt;
void SingleLinkedList&lt;T&gt;::push(const T &amp;theData) {
    std::unique_ptr&lt;Node&gt; newNode = std::make_unique&lt;Node&gt;(theData);
    newNode-&gt;next = std::move(head); // new node takes ownership of existing nodes
    head = std::move(newNode);       // new node is now head
}
</code></pre>

<hr>

<pre><code>template &lt;class T&gt;
void SingleLinkedList&lt;T&gt;::insertTail(const T &amp;theData) {
    std::unique_ptr&lt;Node&gt; newNode = std::make_unique&lt;Node&gt;(theData);
    tail-&gt;next = std::move(newNode);
    tail = tail-&gt;next.get(); 
}
</code></pre>

<p>Singly-linked lists typically operate from one-end.  This leads to unusual behavior where insertion at the front or back is constant, but deletion at the front is constant while the back is linear (as <code>tail</code> needs to be updated).</p>

<hr>

<pre><code>template &lt;class T&gt;
void SingleLinkedList&lt;T&gt;::insertPosition(int pos, const T &amp;theData) {
    if (pos &gt; getSize() || pos &lt; 0) {
        throw std::out_of_range("The insert location is invalid.");
    }
</code></pre>

<p><code>std::out_of_range</code> requires <code>&lt;stdexcept&gt;</code>. Is <code>pos == getSize()</code> a valid state?</p>

<pre><code>    auto node = head.get();
    int i = 0;

    for (; node &amp;&amp; node-&gt;next &amp;&amp; i &lt; pos; node = node-&gt;next.get(), i++);
</code></pre>

<p>This could be a helper function that advances a node by \$pos\$ elements.</p>

<pre><code>    if (i != pos) {
       throw std::out_of_range("Parameter 'pos' is out of range.");
   }
</code></pre>

<p>Why would this ever be true if we know <code>pos</code> is in \$[0, getSize())\$?</p>

<pre><code>    auto newNode = std::make_unique&lt;Node&gt;(theData);

    if (node) {
        newNode-&gt;next = std::move(node-&gt;next);
        node-&gt;next = std::move(newNode);
    }
    else {
        head = std::move(newNode);
    }
</code></pre>

<p>So we're not inserting <em>at</em> the position but <em>after</em> the position.  Perhaps the function should be named <code>insert_after</code>?</p>

<hr>

<pre><code>template &lt;class T&gt;
void SingleLinkedList&lt;T&gt;::deleteTail() {
    ...
    auto current = head.get();
    Node* previous = nullptr;

    while (current-&gt;next != nullptr) {
        previous = current;
        current = current-&gt;next.get();
    }
</code></pre>

<p>Abstracting this into an adjacent find helper could be useful for this function, and <code>deleteSpecific()</code>.</p>

<pre><code>    tail = previous;
    previous-&gt;next = nullptr;
</code></pre>

<p>If you decide to allow operating on both ends of the list, I would simply this function.  <code>deleteHead</code> was simplified in the comment on the destructor.</p>

<pre><code>// Exposition-only
template &lt;class T&gt;
void SingleLinkedList&lt;T&gt;::deleteTail() {
    tail.reset();
    tail = node_adjacent_find(/* start@ */ head, next_points_to(nullptr));
}

template &lt;class T&gt;
void SingleLinkedList&lt;T&gt;::deleteSpecific(int delValue) {
    /* throw on empty... */
    auto current = head.get();
    while (true) {
        current = node_adjacent_find(current, next_value(delValue));
        if (!current) {
            return; // Why throw?
        }
        current-&gt;next = std::move(current-&gt;next-&gt;next);
        current = current-&gt;next.get();
    }
}
</code></pre>

<hr>

<pre><code>#include &lt;algorithm&gt;
#include &lt;cassert&gt;
#include &lt;iostream&gt;
#include &lt;ostream&gt;
#include &lt;iosfwd&gt;
#include "SingleLinkedList.h"
</code></pre>

<p>Organize your headers.  If you order them in logical groups - from implementation level to language level to system level - you can catch latent usage errors in your own code as soon as possible.  </p>

<ol>
<li>Prototype/Interface headers - matching .hpp that corresponds to a .cpp</li>
<li>Project headers - my_utils.hpp</li>
<li>Non-standard non-system headers - boost, eigen</li>
<li>Standard headers - iostream, cstdint, vector</li>
<li>System headers - May require configuration and out of order use because of dependencies.</li>
</ol>

<p>Order each of those logical subgroups by name (if possible) to allow readers to quickly parse through longer lists.</p>

<p>You don't need <code>&lt;algorithm&gt;</code>, <code>&lt;cassert&gt;</code>, <code>&lt;ostream&gt;</code>, or <code>&lt;iosfwd&gt;</code>.</p>

<hr>

<pre><code>int main(int argc, const char * argv[]) {
</code></pre>

<p>If you are not accepting command-line arguments, you can omit the parameters for <code>main</code>. (<code>int main() {</code>).</p>

<hr>

<pre><code>    SingleLinkedList&lt;int&gt; obj;
    obj.push(2);
    obj.push(4);
    obj.push(6);
    obj.push(8);
    obj.push(10);
    std::cout&lt;&lt;"---------------displaying all nodes---------------";
    std::cout &lt;&lt; obj &lt;&lt; std::endl;
</code></pre>

<p>Rather than memorizing the 25 or so operations, in-order, and how the internal state flows, just use a testing framework (<a href="https://github.com/catchorg/Catch2" rel="nofollow noreferrer">Catch2</a>).  Reduce your cognitive load, test more, and process useful information (what failed?).</p>

<pre><code>// Exposition-only
#define CATCH_CONFIG_MAIN

#include "SingleLinkedList.h"
#include "catch2/catch.hpp"

TEST_CASE( "single linked list operations", "[slist]" ) {
    SingleLinkedList&lt;int&gt; obj;
    for (int i = 2; i &lt; 11; i += 2) {
        obj.push(i);
    }

    SECTION( "get current size" ) {
        REQUIRE(obj.getSize() == 5);
    }
    ...
    SECTION( "inserting at end" ) {
        obj.insertTail(20);
        REQUIRE( obj.size() == 6 );
        // REQUIRE( obj.back() == 20 );
    }
    ...
    SECTION( "empty list throws on delete head" ) {
        obj.clear();
        REQUIRE( obj.empty() );
        REQUIRE_THROWS( obj.deleteHead() );
        REQUIRE_THROWS_AS( obj.deleteHead(), std::out_of_range );
    }
    ...
}
</code></pre>
    </div>