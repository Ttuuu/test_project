<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here are a few potential things that could be changed:</p>

<p><strong>Stack.java</strong></p>

<p>The <code>isEmpty()</code> method can be simplified, since your underlying data structure that you are using to implement a stack also exposes this method:</p>

<pre><code>public boolean isEmpty()
{
    return stack.isEmpty();
}
</code></pre>

<p>In Java, <code>pop()</code> generally returns the element that was popped, while here it simply removes the element. This necessitates a <code>peek()</code> + <code>pop()</code> combination, where the convention is just <code>pop()</code>. There is nothing really wrong with your approach, so this is just a matter of convention.</p>

<p>One thing though, <code>pop()</code> simply returns when the stack is empty - so there is no direct indication that the operation failed. That is, if the stack is misused, it does not directly indicate it, either using some kind of Exception or by returning false on failure. Generally, <code>pop()</code> "convention" in Java would throw an Exception on an empty stack.</p>

<pre><code>public String pop() throws StackException
{
    if(isEmpty())
        throw new StackException("pop on empty stack");

    return stack.remove(stack.size() - 1);
}

</code></pre>

<p><strong>Main.java</strong> and <strong>PostfixCalculator.java</strong></p>

<p>Moving the I/O work from PostfixCalculator class to your Main class. Ideally, the PostfixCalculator should only perform calculations and postfix related operations - getting the data to pass to it should be done elsewhere.</p>

<p>Therefore, the <code>changeNotation()</code> method could be modified to take in a String as input, rather than obtaining it itself, which ties the class to a particular input method. Deciding to read from a file or from the network rather than Standard Input should not trigger changes to the PostfixCalculator.</p>

<pre><code>public String changeNotation(String infix) { ... }
</code></pre>

<p>In addition, it is also possible to make these methods static, since you don't really need to save any state: the calculator simply takes in an input and returns an output.</p>

<p>Within <code>changeNotation()</code>:</p>

<pre><code>for(int i = 0; i &lt; infixNotation.length; i++)
{
   ...
}
</code></pre>

<p>A local variable can be introduced, since there are quite a lot of references to <code>infixNotation[i]</code> within the loop body, so this can be cleaned up. </p>

<p>There is one point where 'i' is referenced in the code, so converting to a for-each loop would require maintaining a counter, which is why just introducing a local variable would be better here.</p>

<pre><code>for(int i = 0; i &lt; infixNotation.length; i++)
{
    /* 's' could be changed to something more representative */
    String s = infixNotation[i];

    if(s.equals(" "))
        continue;

    ...
}
</code></pre>

<p>There is also quite a bit of if-else nesting, which makes the code a bit harder to follow:</p>

<pre><code>for(int i = 0; i &lt; infixNotation.length; i++)
{
    if(infixNotation[i].equals(" "))
    {
        continue;
    }
    else if(!infixNotation[i].equals("+") &amp;&amp; /* other conditions here */)
    {
        ...
    }
    else { ... } 

    ...
}
</code></pre>

<p>The <code>else if</code> isn't needed here, since the if-body's control flow will go back to the loop header check and cannot fallthrough. Therefore, it's fine to have that <code>else if</code> just be an <code>if</code>.</p>

<p>Towards the end of the method:</p>

<pre><code>System.out.println(postfixNotation);
return postfixNotation; 
</code></pre>

<p>I'm not sure whether the calculator should print to standard out, or do any I/O for that matter. Just return the result, and let the caller (in this case, main) to do what it wants, e.g. print to standard out, log to a file, etc.</p>

<p>As stated before, the I/O work should probably be moved to main.</p>

<pre><code>public class Main
{
    public static void main(String[] args)
    {
         /* 
          * Obviously, the user-interaction (printing a prompt, etc.) presented
          * here can be greatly improved upon :)
          */
         Scanner scan = new Scanner(System.in);
         String infix = scan.nextLine();

         PostfixCalculator calc = new PostfixCalculator();
         String postfix = calc.changeNotation(infix);
         System.out.println(postfix);

         /* or if using static methods */
         String postfix = PostfixCalculator.changeNotation(infix);
         System.out.println(postfix);
    }
}

</code></pre>
    </div>