<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Bug: singleton objects have no allocation record</h2>
<p>Since the garbage collector will try to set the <code>mark()</code> in a <code>SYMBOL</code> object, the <code>T_</code> object needs a dummy allocation record. <code>NIL_</code> doesn't need one since an <code>INVALID</code> object will not get marked.</p>
<p>pc9obj.c:</p>
<pre><code>object T_ = &amp;(1[(union uobject[]){{ .t = 0 },{ .Symbol = { SYMBOL, T, "T" } }}]),
       NIL_ = (union uobject[]){{ .t = INVALID }};
</code></pre>
<h2>Bug: using object fields for non-object data</h2>
<p>In the <code>pprintf()</code> and <code>pscanf()</code> functions, the <code>object</code> field in <code>OPERATOR</code> objects sometimes contains a <code>va_list *</code>! The garbage collector might fiddle with the memory around this address if it tries to set the (non-existant) <code>mark()</code>. The copious <code>(void *)</code> casts are a code smell. Better to use the <code>VOID</code> type object to hold this pointer.</p>
<h2>Missing functions</h2>
<p>There's <code>some</code> for 1 or more, <code>many</code> for 0 or more, <code>maybe</code> for 0 or 1.
But there's no function to match <em>n times</em>, or <em>n or more</em>, or <em>n up to m times</em> â€” these kind of quantifiers.</p>
<h2>Poor namespacing for internal symbols</h2>
<pre><code>enum parser_symbols {
  VALUE = SYM1, PRED, P, PP, NN, Q, R, FF, XX, AA, ID, USE, ATOM,
  SYM2
};
</code></pre>
<p>What are <code>P, PP, NN, Q, R, FF, XX, AA</code>? <code>VALUE</code> <code>PRED</code> and <code>ATOM</code> are better but still kinda vague.</p>
<h2>Short-circuit tests (and maybe actually test stuff)</h2>
<pre><code>int par_main(){
  return 
      obj_main(),
      test_env(), test_parsers(),
      test_regex(),
          test_pprintf(),
          test_pscanf(),
          0;
}
</code></pre>
<p>Bonus formatting error. Better to short-circuit the tests based on the return values.</p>
<pre><code>int par_main(){
  return  0
      ||  obj_main()
      ||  test_env()
      ||  test_parsers()
      ||  test_regex()
      ||  test_pprintf()
      ||  test_pscanf()
      ||  0;
}
</code></pre>
<p>Then the testing functions can return non-zero to stop producing output.</p>
    </div>