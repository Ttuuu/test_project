<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Lets have a look at the algorithm you are using, and see if we can tweak it.</p>

<p>First you get each vowel.
Then you reverse the list
Finally you get the index of each vowel and replace it with the next vowel in the list.</p>

<p>There is a bug here, list.index will return the index of the first occurrence of a vowel, so if you replace the word with "aapiple" you will see the bug in action.</p>

<p>The main area of interest is getting the index of each vowel, so lets do that.</p>

<pre><code>vowel_indexes = [index for index, letter in enumerate(s) if letter in vowels]
</code></pre>

<p>With the indexes, we can just swap the character at the first index, with the character at the last index. As a result we can avoid iterating with two pointers over the whole list again, we only need to go halfway with each one. (Small note, we don't need to swap the middle vowel if there are an odd amount of them, since it will just replace itself.)</p>

<pre><code>  halfway_point = len(vowel_indexes)/2
  first_half = vowel_indexes[:halfway_point]
  second_half = reversed(vowel_indexes[halfway_point:])

  new_word = list(s)
  for i, j in zip(first_half, second_half):
    new_word[i], new_word[j] = new_word[j], new_word[i]
</code></pre>

<p>And since we were given a string, it would be nice to return a string</p>

<pre><code>return "".join(new_word)
</code></pre>

<hr>

<p>The final code looks like this:</p>

<pre><code>vowels = "aeiou"

def reverseVowels(s):
  vowel_indexes = [index for index, letter in enumerate(s) if letter in vowels]

  halfway_point = len(vowel_indexes)/2
  first_half = vowel_indexes[:halfway_point]
  second_half = reversed(vowel_indexes[halfway_point:])

  new_word = list(s)
  for i, j in zip(first_half, second_half):
    new_word[i], new_word[j] = new_word[j], new_word[i]

  return "".join(new_word)
</code></pre>
    </div>