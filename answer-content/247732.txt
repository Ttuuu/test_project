<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I have not tried playing the game, but had a look at the code and I have some suggestions.</p>
<p><strong>Code readability suggestions</strong></p>
<p><code>boxSize[0]</code>  and <code>boxSize[1]</code> is used all over your code and not very readable. There is only one place where you actually use the variable <code>boxSize</code> without indexes, so I would do the opposite and define <code>width = 700</code> and <code>height=400</code>  so that you can refer to them where needed, and then in the one line that you used <code>boxSize</code> you change that to</p>
<p><code>ISPLAYSURF = pygame.display.set_mode((width, height), 0, 32)</code></p>
<p><strong>Readability 2</strong></p>
<p><code> ball['direction']=np.random.randint(295, 325)</code>
I think the numbers 295 and 325 refer to angles but they could be named to make that clearer.</p>
<p><strong>Readability 3</strong></p>
<p><code>ball['rad']</code></p>
<p>I think <code>rad</code> is short for <code>radius</code> but it's not a good name. Generally avoid short versions of words. Especially <strong>rad</strong> which in mathematics commonly refers to radians used to measure angles, which confused me while thinking about the direction of the ball.</p>
<p><strong>Readability 4</strong></p>
<pre><code>if keys[K_LEFT] and not (dimensions['paddle'].left &lt;= (dimensions['arena'].left+borderWidth)):
</code></pre>
<p><code>not &lt;=</code> is requivalent to just <code>&gt;</code> so it would be more readable to rather write</p>
<pre><code>if keys[K_LEFT] and (dimensions['paddle'].left &gt; (dimensions['arena'].left+borderWidth)):
</code></pre>
<p><strong>Logic 1</strong></p>
<pre><code>    if blinkerCount % blinkTime == 0:
        blinkerCount = 0
        blinkerState = not blinkerState
</code></pre>
<p>Since you're resetting <code>blinkerCount</code> to 0 every time, you don't need the modulo operation, you can just change the if-clause to <code>if blinkerCount == blinkTime</code> . The modulo operation would make sense if you didn't reset to 0.</p>
<p><strong>Logic 2</strong></p>
<pre><code>    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            pygame.quit()
            exit()
        elif event.type == pygame.KEYDOWN:
            if event.key == pygame.K_RETURN:
                sounds['gameOver'].stop()
                keyStatus = False
            elif event.key == pygame.K_ESCAPE:
                pygame.quit()
                exit()
</code></pre>
<p>Both <code>elif</code> here are redundant and can be replaced by just <code>if</code>.
Since <code>pygame.QUIT</code> and <code>pygame.KEYDOWN</code> are different things, an event cannot by definition be equal to both, so the "else" in the <code>elif</code> is not needed.</p>
<p><strong>Avoid repetition 1</strong></p>
<p>You are making many calls to
<code>pygame.draw.rect(DISPLAYSURF</code> which I would create a new function for, so that you don't have to repeat this over and over.</p>
<p>It would be something like</p>
<pre><code>def rectangle(color, _dimensions):
    pygame.draw.rect(DISPLAYSURF, colors[color], _dimensions)
</code></pre>
<p>and then in the other places of your code you can replace something like</p>
<p><code>pygame.draw.rect(DISPLAYSURF, colours['grey'], dimensions['arena'])</code></p>
<p>with just</p>
<p><code>rectangle('grey', dimensions['arena'])</code></p>
<p><strong>Avoid repetition 2</strong></p>
<pre><code>sounds = {
        'paddleHit': pygame.mixer.Sound(os.path.join(os.getcwd(), 'audio', 'paddle_hit.wav')), 
        'wallHit': pygame.mixer.Sound(os.path.join(os.getcwd(), 'audio', 'wall_hit.wav')), 
        'gameOver':pygame.mixer.Sound(os.path.join(os.getcwd(), 'audio', 'game_over.wav')),
        'levelUp': pygame.mixer.Sound(os.path.join(os.getcwd(), 'audio', 'level_up.wav'))
    }
</code></pre>
<p>See how 70% of each line here is identical to the other? This is where you want to create a function for this, like</p>
<pre><code>def get_sound(filename):
    return pygame.mixer.Sound(os.path.join(os.getcwd(), 'audio', filename))
</code></pre>
<p>so that you can replace the above with</p>
<pre><code>sounds = {
        'paddleHit': get_sound('paddle_hit.wav'), 
        'wallHit': get_sound('wall_hit.wav'), 
        'gameOver':get_sound('game_over.wav'),
        'levelUp': get_sound('level_up.wav')
    }
</code></pre>
<p>(It can be made even shorter if the keys were named same as the files)</p>
<p><strong>Code quality and readability</strong></p>
<pre><code>if ball['position']['y'] &lt; borderWidth+ball['rad']:
</code></pre>
<p>This kind of code is quite hard to read and surely a waste of space and time to write as well. I recommend you look up basic objects/classes, so that you can define a class <code>ball</code> and set its properties, so that you can instead write</p>
<p><code>if ball.y &lt; borderWidth+ball.radius:</code></p>
<p>See how much easier that is?</p>
    </div>