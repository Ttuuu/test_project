<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I think trying to implement a visitor pattern with static members is the wrong way to go, you should use an actual instance of the visitor and pass it around the data structure.</p>

<p>Also, I generally don't like the idea of one class making decisions based on the type of another, just feels wrong to me.</p>

<p>In all the descriptions of the visitor pattern I have seen, it was the responsibility of the objects in the hierarchy to pass the visitor object to their children, though I have always found it more convenient for the visitor to do its own propagation (different visitors may want different traversals - prefix, postfix, infix, etc).</p>

<pre><code>public interface IVisitor
{
    void Visit(Survey survey);
    void Visit(Section section);
    void Visit(Question question);
}

public abstract class SurveyPart
{
    // ...

    public abstract void Apply(IVisitor visitor);
}

public class Survey
{
    // ...

    public abstract void Apply(IVisitor visitor);
}

public class Question : SurveyPart
{
    // ...

    public override void Apply(IVisitor visitor)
    {
        visitor.Visit(this);
    }
}

public class Section : SurveyPart
{
    // ...

    public override void Apply(IVisitor visitor)
    {
        visitor.Visit(this);
    }
}
</code></pre>

<p>The render visitor can then be implemented as follows.</p>

<pre><code>public class RenderVisitor : IVisitor
{
    public RenderVisitor(TextWriter writer)
    {
        this.writer = writer;
    }

    void Visit(Survey survey)
    {
        writer.Write(...);
        VisitChildren(servey.Children);
    }

    void Visit(Section section);
    {
        writer.Write(...);
        VisitChildren(servey.Children);
    }

    void Visit(Question question);
    {
        writer.Write(...);
        VisitChildren(servey.Children);
    }

    void VisitChildren(List&lt;SurveyPart&gt; children)
    {
        depth++;

        foreach(SurveyPart child in children)
        {
            child.Apply(this);
        }

        depth--;
    }

    int depth;
    readonly TextWriter writer;
}
</code></pre>

<p>And used as:</p>

<pre><code>servey.Apply(new RenderVisitor(Console.Out));
</code></pre>
    </div>