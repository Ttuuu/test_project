<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>PEP 8</h1>
<p>The <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">Style Guide for Python Code</a> "gives coding conventions for the Python code ... intended to improve the readability of code and make it consistent across the wide spectrum of Python code."</p>
<p>Since a large majority of Python projects follow PEP-8 guideline, it behooves you to follow those conventions as much as possible (except when you shouldn't, as outlined in section 2 of the document).</p>
<p>These conventions include:</p>
<ul>
<li>using <code>snake_case</code> for variable names, instead of <code>mixedCase</code>.  Eg, <code>numberOfStreaks</code> should be named <code>number_of_streaks</code>.</li>
<li>imports should be followed by a blank line</li>
<li>functions should appear after import and before main code.  Eg) <code>number_of_streaks = 0</code>, <code>list_of_100 = []</code>, and <code>streaks = 0</code> should appear after <code>def toss():</code></li>
<li>the mainline code should be inside a "main-guard" (<code>if __name__ == '__main__':</code>) statement.</li>
</ul>
<h1>Correctness</h1>
<h2>Task</h2>
<s>
I fear you have interpreted the practice task incorrectly, or at least, implemented it wrong.
</s><p>The task is to check "if there is a streak of 6 'heads' or 'tails' in 100 coin tosses, not "how many" streaks occurred.  It asks for a percentage success rate.  If you had an unfair coin, with your code you may find several dozen streaks in each experiment, and well over 10,000 streaks in the course of the 10,000 experiments, which would lead to a "percentage success rate" that exceeds 100%, which is suspect.
</p>
<p>(Incorrect, but left in to support <a href="https://codereview.stackexchange.com/a/247988/100620">Heap Overflow's answer</a>)</p>
<h2>Math</h2>
<p><code>print('Chance of streak: %s%%' % (numberOfStreaks / 10000))</code></p>
<p>Simply dividing a count by the total possible does not yield a percentage; 95 / 100 = 0.95 ... you must multiply by 100 to compute the result as a percentage.</p>
<h1>WET -vs- DRY and locality of reference.</h1>
<p>Your code reads (roughly):</p>
<pre><code>listOf100 = []

# ...

for experiment ...:

    for flipCoin in range(100):
        listOf100.append(toss())

    ...

    listOf100 = []
</code></pre>
<p>You see the <code>listOf100 = []</code>?  WET stands for "Write Everything Twice".  In contrast, DRY stands for "Don't Repeat Yourself".  In general, with less code, the code is easier to understand and maintain.  If variables are defined near where they are used, the code is also easier to understand and maintain.</p>
<p>Let's DRY this code up.</p>
<pre><code># ...

for experiment ...:

    listOf100 = []
    for flipCoin in range(100):
        listOf100.append(toss())

    ...
</code></pre>
<p>Now, <code>listOf100 = []</code> exists only once, and it exists right before it is being used.</p>
<p>Now, as demonstrated in the other two answers, you can replace the initialization and repeated <code>.append()</code> with a more concise list comprehension.</p>
<h1>Magic Numbers</h1>
<p>I see several numbers in the code: <code>10000</code>, <code>100</code>, <code>listOf100</code>, <code>1</code>, <code>5</code>, <code>0</code>.  What do these numbers mean?</p>
<p>If you wanted to change the number of experiments from <code>10000</code> to <code>20000</code> how many changes would you have to make?  Two?</p>
<p>If you wanted to changed the number of tosses per experiment from 100 to 200, how many changes do you have to make?  Change a number once, and a variable name 6 times???  That seems awkward and unmaintainable.  And wrong, because there is also the comment.</p>
<p>Named constants go a long way to improving maintainability.</p>
<pre><code>NUM_EXPERIMENTS = 10_000

...

for experiementNumber in range(NUM_EXPERIMENTS):
   ...

print('Change of streak: %s%%' % (numberOfStreaks / NUM_EXPERIMENTS))
</code></pre>
<p>Finally, <code>5</code> is the length of the streak.  No, wait, 6 is the length of the streak.  Uh.  It would be nice to have a <code>STREAK_LENGTH = 6</code> named constant, and then the algorithm could use <code>if streak == STREAK_LENGTH - 1:</code>, with perhaps a comment explaining the "why".</p>
<h1>Unused variables</h1>
<p>The variable created in this statement:</p>
<pre><code>for experimentNumber in range(10000):
</code></pre>
<p>is never used anywhere.  It only serves two purposes.</p>
<ol>
<li>to make a syntactically valid <code>for</code> statement.</li>
<li>indicate this loop is executed once per experiment.</li>
</ol>
<p>The second reason is obsoleted by changing the magic number <code>10000</code> into the named constant <code>NUM_EXPERIMENTS</code>.  By convention, <code>_</code> is used as the throw-away variable, used only to satisfy syntactical reasons.  So this <code>for</code> statement could become:</p>
<pre><code>for _ in range(NUM_EXPERIMENTS):
</code></pre>
<p>Ditto for the <code>for flipCoin in range(100):</code> statement; it could become (say):</p>
<pre><code>    for _ in range(COIN_TOSSES_PER_EXPERIMENT):
</code></pre>
<h1>Formatting numbers</h1>
<p>Using the <code>%s</code> format code for a number is not a good habit to get into.  It may produce ok results here; you are dividing by 10,000 so likely will get a number with only 4 decimal points.  But if you were asked to perform a different number of experiments, such as 7, you could get a lot of digits after the decimal point.</p>
<p>Using the format code <code>%.4f</code> produces four digits after the decimal point, regardless of the actual number of experiments.</p>
<h1>Improved Code</h1>
<p>Others have answered with advanced -- or at best, tricky, and at worst, confusing -- methods of detecting the streaks including:</p>
<ul>
<li>string concatenation and substring searching</li>
<li>functional programming</li>
<li>converting head/tail coin values into same/different values</li>
</ul>
<p>In the spirit of the <a href="/questions/tagged/beginner" class="post-tag" title="show questions tagged 'beginner'" rel="tag">beginner</a> tag, let's investigate a clearer way.</p>
<p>You are currently testing <code>listOf100[listItem] == listOf100[listItem + 1]</code> to check if a coin face is the same as the next.  The <code>[listItem + 1]</code> is the awkward part here, necessitating stopping our loop one element before the end of the list.  Let's rethink this.  Instead of comparing two coins at a time, how about examining only one coin at a time?  Simply remember the whether the streak is currently heads or tails, and ask if the current coin matches that streak:</p>
<pre><code>    for coin_face in coin_tosses:
        if coin_face == current_streak_face:
            streak_length += 1
</code></pre>
<p>When we find a coin that doesn't match the current streak, we have to start the streak with one instance of the new face.</p>
<pre><code>        else:
            current_streak_face = coin_face
            streak_length = 1
</code></pre>
<p>Of course, we have to initialize our state variables.  The first coin won't match any previous value, so we should start off with some value which is neither heads nor tails.</p>
<pre><code>    current_streak_face = None
    streak_length = 0
</code></pre>
<p>Using this, we can create a simple coin streak detector function:</p>
<pre><code>def contains_a_streak(coin_tosses, minimum_length):

    current_streak_face = None
    streak_length = 0

    for coin_face in coin_tosses:
        if coin_face == current_streak_face:
            streak_length += 1
        else:
            current_streak_face = coin_face
            streak_length = 1

        if streak_length &gt;= minimum_length:
            return True

    return False
</code></pre>
<p>Notice that since we are initialize the <code>streak_length</code> to <code>1</code> when we find a different coin face, and adding <code>1</code> when we find a matching face, our <code>streak_length</code> counter is actually the length of the streak, and not one less.  No more 5 -vs- 6, confusion, which is a huge win for clarity.</p>
<p>Actually, there is nothing about this detector that is specific to coin tosses.  We could use it for dice rolls, win-loss streaks, and so on.  Just need to change some variable names ... and change the initial value from <code>None</code> to a different sentinel, so it could even properly detect a streak of <code>None</code> values at the start of a sequence of values.</p>
<pre><code>def contains_a_streak(iterable, minimum_length):

    current = object()   # a unique value that can't possibly match this first
    streak_length = 0

    for value in iterable:
        if current == value:
            streak_length += 1
        else:
            current = value
            streak_length = 1

        if streak_length &gt;= minimum_length:
            return True

    return False
</code></pre>
<p>Now, our code for one experiment could become:</p>
<pre><code>def coin_toss_experiment(number_of_tosses, streak_length):

    tosses = []
    for _ in range(number_of_tosses):
        tosses.append(toss())

    return contains_a_streak(tosses, streak_length)
</code></pre>
<p>As noted elsewhere, the list initialization and repeated appending could be replaced with list comprehension:</p>
<pre><code>def coin_toss_experiment(number_of_tosses, streak_length):

    tosses = [toss() for _ in range(number_of_tosses)]

    return contains_a_streak(tosses, streak_length)
</code></pre>
<p>(Actually, a generator expression might be even better, but since we're focusing at the <a href="/questions/tagged/beginner" class="post-tag" title="show questions tagged 'beginner'" rel="tag">beginner</a> level, we'll just note it in passing.  When you're a bit more comfortable with Python, look up what it is and what it would do for you, and why you might want to use one.)</p>
<p>We need to run multiple experiments to compute the streak success rate:</p>
<pre><code>def repeated_coin_toss_experiment(num_experiments, num_tosses, streak_length):
    successes = 0
    for _ in range(num_experiments):
        if coin_toss_experiment():
            successes += 1

    print(f"Chance of streak: {successes/num_experiments*100:.2f}%")
</code></pre>
<p>Finally, we need to run our experiment:</p>
<pre><code>if __name__ == '__main__':
    repeated_coin_toss_experiment(10_000, 100, 6)
</code></pre>
<p>If you want to change the number of tosses, you only have to change one number.  If you want to change the number of experiments, again, you just have to change one number.  Change the streak length?  Well, you get the idea.</p>
    </div>