<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your current code, if I understand it, starts by sieving each target without recognizing that if the target is less than the highest cache (or <code>_base</code>) then it is prime if and only if it in the cache.</p>

<p>One option is to keep your primes in a single cache (<code>_base</code>), make sure that the cache is high as your target, and check if your target is in your cache.</p>

<p>The rough code would have only two functions:  one ensures that base array is high enough, and the other returns the value.   Something like:</p>

<pre><code>const primes = [2, 3, 5];

function ensure_primes(until_n) {
    let n = primes.slice(-1) + 1;
    while (n &lt;= until_n) {
        if (primes.every(prime =&gt; n % prime != 0)) {
            primes.push(n)
        }
        n += 1;
    }
}

function is_prime(target) {
    ensure_primes(target);
    return target in primes
}
</code></pre>

<p>Is this what you were asking?</p>
    </div>