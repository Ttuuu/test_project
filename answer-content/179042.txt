<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>That's a nice simple solution, with two problems:</p>

<ol>
<li>It will give incorrect result when <code>A</code> contains all the values in the ranges <code>[1..1000000]</code> or <code>[1..999999]</code>, returning <code>undefined</code> instead of 1000001 and 1000000, respectively.</li>
<li>It doesn't meet the time complexity requirement, being \$O(n^2)\$ instead of \$O(n)\$.</li>
</ol>

<p>The first problem is easy to fix by adjusting the end condition of the loop.</p>

<p>The second problem is trickier, and the interesting part of the exercise.
Consider this algorithm, that's \$O(n)\$ in time and \$O(1)\$ in space:</p>

<ul>
<li>Loop over the elements of <code>A</code> from the start, and for each value <code>A[i]</code>, if <code>A[i] - 1</code> is a valid index in the array, then repeatedly swap <code>A[i]</code> and <code>A[A[i] - 1]</code> until <code>A[i]</code> is in its correct place (value equal to <code>i + 1</code>), or <code>A[i]</code> and <code>A[A[i] - 1]</code> are equal.

<ul>
<li>This should order the values to their right places such that <code>A[i] == i + 1</code>, when possible</li>
</ul></li>
<li>Loop over the elements again to find an index where <code>A[i] != i + 1</code>, if exists then the missing value is <code>i + 1</code></li>
<li>If the end of the loop is reached without returning a value, then the missing value is <code>A.length + 1</code>.</li>
</ul>

<p>Here's one way to implement this in JavaScript:</p>

<pre><code>var firstMissingPositive = function(nums) {
    var swap = function(i, j) {
        var tmp = nums[i];
        nums[i] = nums[j];
        nums[j] = tmp;
    };

    for (let i = 0; i &lt; nums.length; i++) {
        while (0 &lt; nums[i] &amp;&amp; nums[i] - 1 &lt; nums.length
                &amp;&amp; nums[i] != i + 1
                &amp;&amp; nums[i] != nums[nums[i] - 1]) {
            swap(i, nums[i] - 1);
        }
    }

    for (let i = 0; i &lt; nums.length; i++) {
        if (nums[i] != i + 1) {
            return i + 1;
        }
    }
    return nums.length + 1;
};
</code></pre>

<p>Note: to verify this, or alternative implementations work,
you could submit on <a href="https://leetcode.com/problems/first-missing-positive/description/" rel="noreferrer">leetcode</a>.</p>
    </div>