<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'm aware that another answer is already accepted, but my solution only takes 0.000022s and if I don't talk about it I will burst: ;-)</p>

<pre><code>public class FirstChallange {
    static char[] mapChars = new char[0x40];
    static {
        mapChars['0'] = '0';
        mapChars['1'] = '1';
        mapChars['2'] = '2';
        mapChars['3'] = '5';
        mapChars['4'] = '6';
        mapChars['5'] = '8';
        mapChars['6'] = '9';
    }
    public final static void main(String[] args) {
        long nanoStart = System.nanoTime();
        int maxNumber = 10000000;
        char[] digits = Integer.toString(maxNumber, 7).toCharArray();
        for (int i = 0; i &lt; digits.length; i++) {
            digits[i] = mapChars[digits[i]];
        }
        String lastNumber = new String(digits);
        long diffTime = System.nanoTime() - nanoStart;
        System.out.println(diffTime);
        NumberFormat dfmt = DecimalFormat.getNumberInstance();
        dfmt.setMaximumFractionDigits(6);
        System.out.println("last number: " + lastNumber);
        System.out.println("time: " + dfmt.format(diffTime / 1000000000d) + " s");
    }
}
</code></pre>

<p>Instead of brute forcing I'm making use of different bases. With three digits "forbidden" to be used, you essentially change your number base from 10 to 7, so instead of counting up a variable that is restricted to base 7 by skipping values that are outside it, you just do a conversion from one base to the other. You could do that by calculation yourself, but in order to get the correct value you need to do a remapping of the digits. The easiest way to do that is a string-replacemant, so I started with converting the decimal value to a <code>String</code> using the <code>toString</code> method that allows the specification of a radix.</p>

<p>This results to the text <code>150666343</code> that looks familiar to the expected result. If we forbid the digits <code>7</code>, <code>8</code> and <code>9</code> that would already be the solution but in our case digits "in the middle" are forbidden, so in order to get the result for this different set of digits, we have to map the digits <code>3</code> and <code>4</code> to <code>5</code> and <code>6</code> and the digits <code>5</code> and <code>6</code> to <code>8</code> and <code>9</code>.</p>

<p>That's it. Instead of iterating over a loop 180 million times you do it 9 times (plus some loops inside <code>toCharArray</code>, <code>toString</code> and <code>new String(char)</code>.</p>
    </div>