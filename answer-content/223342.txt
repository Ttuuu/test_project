<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>General points</h2>

<ul>
<li><code>if</code> statements that return should not be followed by an <code>else</code>. Eg <code>if (foo) { return bar } else if (bar) {..</code> The <code>else</code> is redundant.</li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof" rel="nofollow noreferrer"><code>typeof</code></a> is not a function it is an operator (language token). Thus <code>typeof(foo) === "foo"</code> is the same as <code>typeof foo  === "foo"</code></li>
<li>Use the function <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/isNaN" rel="nofollow noreferrer"><code>isNaN</code></a> to test if a value (number like) can not be parsed to a <code>Number</code>.</li>
<li>Use constants <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const" rel="nofollow noreferrer"><code>const</code></a> to define values that do not change. Eg you have <code>var updateArr = [];</code> could be <code>const updateArr = [];</code></li>
<li>You should always keep <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/var" rel="nofollow noreferrer"><code>var</code></a> declarations in one place at the top of the function. If you are defining block scoped variables in the code use <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let" rel="nofollow noreferrer"><code>let</code></a></li>
<li><p>Do not use the <code>arguments</code> object it has some odd quirks that can catch the unwary. Use ES6+ <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/rest_parameters" rel="nofollow noreferrer">rest parameters</a>, or any of the new ways of defining arguments. example using <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Default_parameters" rel="nofollow noreferrer">default parameters</a> <code>function slice(array, start = 0, end = array.length)</code> </p></li>
<li><p>Naming is poor and often too verbose. Keep names simple and short. Use the context of the code to add semantic meaning. </p>

<p>To pick an example the arguments  <code>startingPoint</code>, <code>endingPoint</code> does <code>point</code> add anything of value to the argument name?. Keep it short <code>start</code> as a noun is better than the gerund of start <code>starting</code> that implies start as a verb (General naming rule Verbs for functions, nouns for variables). </p>

<p>Both arguments would best be <code>start</code> and <code>end</code> within the context of the function their meaning is very clear.</p></li>
<li><p>You are duplicating content. eg You explicitly define 3 return arrays using two names <code>result</code>, <code>updateArr</code>. You should never do this.</p></li>
</ul>

<p>The code is very old school. Keep your skills up to date and always write using the latest language version.</p>

<p>You are repeating logic. Vetting the arguments, iterating the array (there are 3 for loops in the code!!) </p>

<h2>Compliance</h2>

<p>Your function failed many compliance tests that I performed.</p>

<p>I am not a big fan of unit testing as it is just as subject to error, omission, flawed assumptions as the code it is testing. </p>

<p>In this case despite the effort you put in to test the code, the testing is of no use as the assumptions you have made are incorrect, and the tests are incomplete.</p>

<p>I am surprised that you did not compare the result of your function to the result of <code>Array.slice</code> on the same array. That would be the better than testing against what you assume to be correct, would it not?</p>

<h3>Compliance failure list</h3>

<ol>
<li><p>Return same array in many cases. Eg <code>a = [1,2,3]; if (splice(a) === a) { /* failed */ }</code>
The returned array must never be the same array. Many people use <code>slice</code> as a replacement to the old <code>[].concat(array)</code> hack. </p></li>
<li><p>Returns incorrect length array. Eg <code>a = []; if (splice(a, 1, 2).length !== a.length) { /* failed */ }</code></p>

<p>This is due to several incorrect behaviors.</p></li>
<li>Fails to detect array like objects, or non arrays.</li>
<li>Crashes page due to not bounds checking arguments. Eg <code>slice([],0,Infinity)</code> starts an infinite loop that eventually crashes page due to memory error.</li>
</ol>

<p>There are other fail modes but they are force edge cases that will have varying results across browsers and versions.</p>

<h2>Example</h2>

<p>The example implements slice as best can be without actual being a property of the <code>Array</code> being sliced. </p>

<p>This forces the code to have to handle non array or array like arguments. It does its best to imitate slice if the array argument contains that method. Will throw a <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError" rel="nofollow noreferrer"><code>RangeError</code></a> if first argument is not an array or a <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError" rel="nofollow noreferrer"><code>ReferenceError</code></a> is first argument is missing.</p>

<p>It uses <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/instanceof" rel="nofollow noreferrer"><code>instanceof</code></a> to vet the first argument. </p>

<p>To vet the inputs it uses some helper functions at the top of the code. <code>vetPos</code> and <code>toPos</code> to convert relative position values to absolute positions as set out by the <a href="https://tc39.es/ecma262/#sec-array.prototype.slice" rel="nofollow noreferrer">spec</a>.</p>

<pre><code>function slice(array, start, end) {
    if (array instanceof Array) {
        const len = array.length;
        const toPos = v =&gt; Math.max(0, Math.min(len, v &lt; 0 ? len + v : v));
        const vetPos = v =&gt; toPos(isNaN(v) ? 0 : Math.floor(Math.abs(v)) * Math.sign(v));
        start = vetPos(start);
        end = vetPos(end === undefined ? len : end);
        let count = Math.max(0, end - start), idx = start, res;
        if (count === len) { res = [...array] } 
        else {
            res = [];
            while (count--) { res.push(array[idx++]) }
        }
        return res;
    }
    if (array &amp;&amp; typeof array.slice === "function") { return array.slice(start, end) }
    if (array) { throw new RangeError("First argument must be an array") }
    throw new ReferenceError("Missing first argument");
}
</code></pre>

<h2>Notes</h2>

<ul>
<li><p>Reference for compliance from <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice" rel="nofollow noreferrer">MDN <code>Array.slice</code></a> and the latest spec <a href="https://tc39.es/ecma262/#sec-array.prototype.slice" rel="nofollow noreferrer">ECMAScript 2020 (Draft) 'Array.prototype.slice'</a></p></li>
<li><p>Because your code was messed up due to tabs when you pasted to CR (Good reason to use spaces rather than tabs) I auto formatted the code so I could read it and thus may have missed some related style points.</p></li>
</ul>
    </div>