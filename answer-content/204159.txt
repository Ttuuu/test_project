<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Improving your whitespace removal</h2>

<p>In order to remove spaces, you are calling <code>string.replace</code> once for every occurrence of " " (space) in each string. An easier way to remove whitespace in a string is to use a <a href="https://www.w3schools.com/jsref/jsref_obj_regexp.asp" rel="nofollow noreferrer">regular expression</a> object with a global modifier, which will replace <em>all</em> matching characters in the string. Then, you can get rid of your while-loops, and your code becomes slightly easier to read.</p>

<pre><code>function findAnagram (firstWord, secondWord) {
    // "/ /g" is a regular expression object that finds all spaces in a string.
    secondWord = secondWord.replace(/ /g, "");
    firstWord = firstWord.replace(/ /g, "");
    ...
</code></pre>

<p>You can also use the <code>/\s/g</code> regular expression object to replace all whitespace including tabs, newlines, etc. </p>

<h2>Improving your algorithm</h2>

<p>Your version (with the fixes above) works fine, but has a complexity O(n^2).</p>

<p>One very simple, readable way to see if two strings are anagrams is to remove whitespace, sort the letters, and then compare the sorted strings. This brings our complexity down to (depending on implementation) O(nlog(n)). Example:</p>

<pre><code>// Returns the given string with whitespace removed.
function removeWhitespace(str) {
    return str.replace(/\s/g, '');
}

// Returns the given string sorted by character value.
function sortString(str) {
    return str.split('').sort().join('');
}

// Returns true if the given ASCII strings are anagrams of each other.
function isAnagram(str1, str2) {
    const trimmedStr1 = removeWhitespace(str1);
    const trimmedStr2 = removeWhitespace(str2);

    // If the strings have different lengths, there is no way for them to be anagrams.
    if (trimmedStr1.length != trimmedStr2.length) {
        return false;
    }

    // Characters should have the same capitalization before sorting.
    const sortedStr1 = sortString(trimmedStr1.toUpperCase());
    const sortedStr2 = sortString(trimmedStr2.toUpperCase());

    return sortedStr1 === sortedStr2;
}
</code></pre>

<p>For more examples of how to solve this problem, see <a href="https://codereview.stackexchange.com/questions/99247/determining-if-two-words-are-anagrams">this post</a>.</p>

<p>Of course, if you want to compare Unicode anagrams, that's a <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/localeCompare" rel="nofollow noreferrer">whole different story</a>.</p>
    </div>