<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<pre><code>foreach ( $available_containers as $v ){
  foreach ( $available_containers as $v2 ){
    foreach ($available_containers as $v3 ) {
      foreach ( $available_containers as $v4 ){
</code></pre>
</blockquote>

<p>When you have this many loops, it's time to think about replacing the nesting with recursion.</p>

<hr>

<blockquote>
<pre><code>        $all_configs = [
          [
            'size' =&gt; $v['size'],
            'configuration' =&gt; [ $v['size'] ],
            'price' =&gt; $v['price'],
          ],
</code></pre>
</blockquote>

<p>Yes, this is very inefficient.</p>

<ul>
<li>It considers each one-container solution <span class="math-container">\$N^3\$</span> times, where <span class="math-container">\$N\$</span> is the number of containers. </li>
<li>If the one container already meets the size requirement then it's inefficient to consider larger sets which include it.</li>
<li>If you've already considered <code>[#22707, #22704, #22708, #22705]</code> then there's no point considering <code>[#22704, #22707, #22708, #22705]</code>. The simple solution is to work with indices and iterate starting at the index of the previous selection.</li>
</ul>

<p>Again, a recursive approach would be preferable: it would kill three or four birds with one stone.</p>

<hr>

<blockquote>
<pre><code>        foreach ( $all_configs as $c ){
          if ( $c['size'] &gt;= $required_size ){
            $configuration[] = array(
              'configuration' =&gt; $c['configuration'],
              'size' =&gt; $c['size'],
              'price' =&gt; $c['price'],
            );
...

// Sort by price.
$sorted_configs = array_sort($configuration, 'price', SORT_ASC); // This function simply sorts all permutations by price
</code></pre>
</blockquote>

<p>I don't think you need both of those comments - in fact, neither says anything which isn't obvious from the code.</p>

<p>However, you also don't need to build an array of solutions or to sort, at least given the specification:</p>

<blockquote>
  <p>I need to find <strong>the</strong> cheapest configuration that meets the minimum required size</p>
</blockquote>

<p>(my emphasis). Just track the best found so far.</p>
    </div>