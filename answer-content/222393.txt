<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Don't <code>return</code> if there is an error, throw the error.</h2>

<pre><code>if(i&lt;0 || j&lt; 0) {
    throw new Error("Invalid Index");
}

if(i&gt;rowLimit || j&gt; columnLimit){
    throw new Error("Index out of bounds");
}
</code></pre>

<hr>

<h2>Don't assume an array has elements</h2>

<p>(i.e.: <code>let columnLimit= myArray[0].length-1;</code> will throw a <code>TypeError</code> if there are no elements in the list)</p>

<p>Play it safe.</p>

<pre><code>//get first element in list, 
//if it doesn't exist set it to a default empty array
const [column = []] = myArray;
const columnLimit = column.length;
</code></pre>

<hr>

<h2><code>const</code> before <code>let</code> and <code>let</code> before <code>var</code></h2>

<p>When declaring variables, always define them with <code>const</code> by default. You only use <code>let</code> when you expect that variable in question is likely to mutate. And never use <code>var</code> unless you have a good reason to.</p>

<p><em>Note: <code>const arr = []; arr.push(1)</code> mutates the array but not the variable</em></p>

<hr>

<blockquote>
  <p>am I covering all the edge cases ?</p>
</blockquote>

<p>Yes, you are.</p>

<p><em>Assuming that the two dimensional array has columns of equal length</em></p>

<hr>

<blockquote>
  <p>Just wanted to know if there is a better way to solve this problem</p>
</blockquote>

<p>There are only 8 elements max possible around a single element, and yet for every element you check to see if <code>(i,j) != (x,y)</code>.</p>

<p>To solve this "problem", simply add all values (even with (i,j))</p>

<p>Then before returning subtract the element at (i,j)</p>

<pre><code>for(let x = Math.max(0,i-1); x&lt;=Math.min(i+1,rowLimit); x++){
  for(let y = Math.max(0,j-1); y&lt;=Math.min(j+1,columnLimit); y++){
        sum+=myArray[x][y];
   }
 }

return sum - myArray[i][j]
</code></pre>

<p><em>Is this better? Well, it's 9 additional conditions VS an extra addition and subtraction.</em></p>
    </div>