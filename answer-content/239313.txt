<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1><code>long double</code></h1>
<p><code>long double</code> is a niche type with an inconsistent interpretation: sometimes it's a plain old 64bit <code>double</code>, sometimes 80bits extended-precision, sometimes (rarely) 128bit aka "quad". In the 80bit case, the actual storage requirement may be 10, 12 or 16 bytes. What you get depends on the targeted processor as well as the compiler and perhaps any special options given to the compiler. Such variations are not merely theoretical. For example, MSVC and GCC treat <code>long double</code> differently, even when they both target x86.</p>
<p>You can use it, but expect inconsistent results, even more than usual for floating point.</p>
<h1>Leading zeroes?</h1>
<p>The "no leading zeroes" invariant is easy to break:</p>
<pre><code>polynomial p = { "0x+1" };
</code></pre>
<p>Which gets printed back as <code>+ 1</code> instead of <code>1</code>.</p>
<p>You could argue that it's my fault for giving strange input intentionally, but it could be neater. Also, multiplication exacerbates the issue:</p>
<pre><code>polynomial q = p * p;
</code></pre>
<p>Now <code>q</code> has two leading zeroes.</p>
<p>Leading zeroes can also be created from scratch, for example:</p>
<pre><code>polynomial p = { "0.00000000000000001x+1" };
p = p * p;
p = p * p;
p = p * p;
p = p * p;
p = p * p;
p = p * p;
</code></pre>
<p>Due to the limited exponent range of whatever a <code>long double</code> turn out to be, eventually zeroes appear. I tried this with MSVC so <code>long double == double</code>, out of the 65 coefficients only the first 20 are non-zero. Of course, I'm using this strange example intentionally to cause the issue, it may not be a concern for your assignment.</p>
    </div>