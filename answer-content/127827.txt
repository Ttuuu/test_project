<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Just reviewing <code>peak1d</code>.</p>

<ol>
<li><p>It's not clear from the docstring what kind of object <code>array</code> is. If it might be a list, then the complexity is actually \$O(n)\$, because slicing a list makes a copy.</p>

<p>The copy in <code>array[:mid]</code> or <code>array[mid:]</code> can be avoided by maintaining search bounds instead:</p>

<pre><code>def peak1d(array):
    """Return a peak in array."""
    def peak(start, stop):
        mid = (start + stop) // 2
        if mid &gt; 0 and array[mid] &lt; array[mid-1]:
            return peak(start, mid)
        elif mid &lt; len(array) - 1 and array[mid] &lt; array[mid+1]:
            return peak(mid, stop)
        else:
            return array[mid]
    return peak(0, len(array))
</code></pre></li>
<li><p>Python doesn't do tail recursion elimination, so the function would be a bit faster if you eliminated the recursion:</p>

<pre><code>def peak1d(array):
    """Return a peak in array."""
    start, stop = 0, len(array)
    while True:
        mid = (start + stop) // 2
        if mid &gt; 0 and array[mid] &lt; array[mid-1]:
            stop = mid
        elif mid &lt; len(array) - 1 and array[mid] &lt; array[mid+1]:
            start = mid
        else:
            return array[mid]
</code></pre></li>
</ol>
    </div>