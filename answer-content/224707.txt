<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You'll need to use <code>by.x</code> to get around setting <code>x</code>'s key.</p>

<p>Also, note that <code>foverlaps</code> can merge on any number of keys, and then do the overlaps <em>only on the final two</em>. What that means here is that you can do the <code>x.Receiver == i.Receiver</code> filter up-front, which also simplifies the clean-up step.</p>

<pre><code>x = as.data.table(x)
x[ , end := DateTimePST]
y = as.data.table(y)

setkey(y, Receiver, Start, End)

result = foverlaps(x, y, by.x = c('Receiver', 'DateTimePST', 'end'), type = 'within')
result[ , end := NULL]

setDF(result)
</code></pre>

<p>I do find it a bit awkward/strange that you've got to define <code>end</code> when <code>by.x = c('Receiver', 'DateTimePST', 'DateTimePST')</code> would appear to be fine, and have filed <a href="https://github.com/Rdatatable/data.table/issues/3721" rel="noreferrer">a feature request</a>.</p>

<p>If you don't need <code>DateTimePST</code> in your output, you might find the non-equi-join version more compact / easier to read:</p>

<pre><code>y[x, on = .(Receiver == Receiver, Start &lt; DateTimePST, End &gt; DateTimePST)]
#    Station Receiver               Start                 End
# 1:  YBAAG4   102140 2014-11-08 13:11:36 2014-11-08 13:11:36
# 2:  YBCSSW   112568 2013-10-02 18:47:24 2013-10-02 18:47:24
# 3:  YBCSSW   112568 2016-09-22 08:01:16 2016-09-22 08:01:16
# 4:   YBBCD   121907 2017-11-22 12:53:55 2017-11-22 12:53:55
#    TagID
# 1: 20161
# 2: 23055
# 3: 45428
# 4:  2627
</code></pre>

<p>Note the order <code>y[x</code> -- we're using <code>x</code> to "look up" rows of <code>y</code>.</p>

<p>If you <em>do</em> need <code>DateTimePST</code>, it's just a bit of an ugly extension:</p>

<pre><code>y[x, c(.SD, list(DateTimePST=DateTimePST)),
  on = .(Receiver == Receiver, Start &lt; DateTimePST, End &gt; DateTimePST)]
</code></pre>

<p>Finally, we can think of this as adding columns to <code>x</code> by a non-equi-join with <code>y</code> by reversing the order:</p>

<pre><code>x[y, `:=`(Start = i.Start, End = i.End, Station = i.Station),
  on = .(Receiver == Receiver, DateTimePST &gt; Start, DateTimePST &lt; End)]
</code></pre>
    </div>