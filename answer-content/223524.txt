<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>In <code>calculate</code> I see a few things:</p>

<ul>
<li><p>I'd put the translation dictionary outside of the function. I think it makes more sense as a "global constant" than it does as something local to that function. That also gives you a way to check for the validity of an operator string for free if you ever need that:</p>

<pre><code>if some_string in operator_dict:
</code></pre></li>
<li><p>Your accumulation loop that splits the head off then iterates the rest could be made much neater by using a <a href="https://docs.python.org/2/library/functools.html#functools.reduce" rel="nofollow noreferrer">reduction</a>. If you don't supply an initial value for a reduction, it automatically uses the first element as the starting accumulator.</p></li>
<li><p>Your <code>return</code> could be simplified down to just returning the condition. I also wouldn't put the <code>return True</code> inside the <code>if</code> body, then not put the <code>return False</code> in an <code>else</code>.</p></li>
</ul>

<p>I'd write this closer to:</p>

<pre><code>from functools import reduce

OPERATOR_SYM_TO_FUNC = {"+": operator.add,
                        "-": operator.sub,
                        "*": operator.mul,
                        "/": operator.truediv}

def calculate(numbers, target, op_sym):
    op = OPERATOR_SYM_TO_FUNC[op_sym]

    total = reduce(op, numbers)

    return total == target
</code></pre>

<hr>

<p>In <code>solve_board</code>, I can't offhand see why you're returning <code>board</code> in this case. If <code>board</code> were immutable, ya, that would make sense. You're directly mutating the board that's passed in though. I think it creates necessary bulk, especially in lines like:</p>

<pre><code> is_solved, board = solve_board(board, instruction_array, size, number_groups)
</code></pre>

<p>The <code>board</code>s are the same, so there's not really any gain.</p>

<p>With how you have it, I would just return the boolean status. It may make sense however to make a copy of the input board, then mutate and return the copy. This prevents the original board from getting mutated by accident. If you chose to do that, instead of returning a <code>True</code>/<code>False</code> to indicate success, you could return the board on a successful solve, and <code>None</code> when the board is unsolvable.</p>

<p>I'll also point out that you have the lines:</p>

<pre><code>for i, j in product([row for row in range(size)],
                    [column for column in range(size)]):  # Product is from itertools library
</code></pre>

<p>I think instead of that comment, you should just use a qualified name:</p>

<pre><code>import itertools

for i, j in itertools.product([row for row in range(size)],
                              [column for column in range(size)]):
</code></pre>

<p>That's a little bulky, but your list comprehensions in there are unnecessary. <code>[row for row in range(size)]</code> is basically just <code>range(size)</code>. If you really wanted it as a strict list, it would likely be neater to use <code>list(range(size))</code> instead. Strictness likely isn't beneficial here though, so I'd just use ranges:</p>

<pre><code>for i, j in itertools.product(range(size), range(size)]):
</code></pre>
    </div>