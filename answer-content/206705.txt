<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<pre><code>Matrix(const std::vector&lt;T&gt; &amp;, std::size_t rows, std::size_t cols);
</code></pre>

<p>The first argument would better be accepted by-value, i.e.</p>

<pre><code>Matrix(std::vector&lt;T&gt; elements, std::size_t rows, std::size_t cols)
    : elements(std::move(elements)), rows(rows), cols(cols) {}
</code></pre>

<p>This way you cover construction both from lvalues and rvalues (the temporary <code>elements</code> is either move- or copy-constructed from the actual argument and then you only need to move from it.) Of course, you can have both:</p>

<pre><code>Matrix(std::vector&lt;T&gt; const &amp;elements, std::size_t rows, std::size_t cols)
    : elements(elements), rows(rows), cols(cols) {}
Matrix(std::vector&lt;T&gt; &amp;&amp;elements, std::size_t rows, std::size_t cols)
    : elements(std::move(elements)), rows(rows), cols(cols) {}
</code></pre>

<p>but in case of more than one potentially movable argument this gives you a combinatorial explosion of ctor overloads without any noticeable improvement.</p>

<p>Same goes for <code>set()</code>.</p>

<p>And you shouldn't pass arguments of scalar types (<code>std::size_t</code> is one example) by reference, by-value would be cheaper:</p>

<pre><code>T at(std::size_t, const std::size_t) const;
void &amp;at(std::size_t, std::size_t, T value);
</code></pre>

<p>(I've changed <code>value</code>'s type to the setter to <code>T</code> due to same considerations as above: now you can move from it.)</p>
    </div>