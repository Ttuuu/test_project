<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Using classes for this seems like a good idea, since you end up with a number of class instances, where each one represents a specific torrent.</p>

<p>In terms of the specific code, you're doing things slightly wrong in 2 ways.</p>

<p>Firstly, you don't need to pass instance parameters into the methods of a class. So you can access <code>info</code> and <code>file</code> as <code>self.info</code> and <code>self.file</code>, so your methods only need the <code>self</code> argument.</p>

<p>Secondly, I can see that you're doing this to try to cache the results of the method calls by overriding the methods in <code>__init__</code>, and while caching is good, this is a bad way of trying to achieve it.</p>

<p>There are 2 alternatives that spring to mind, depending on what you want to do:</p>

<p>If you always want the size and hash calculated when the class is instantiated, then do something similar to what you're doing now, but use different names for the data variables and the methods:</p>

<pre><code>def __init__(self, torrentfile):
    self.metainfo = bencode.bdecode(torrentfile.read())
    self.info = self.metainfo['info']
    self.files = self.metainfo['info']['files']
    self.md5hash = self.calculate_md5hash()
    self.size = self.calculate_size()

def calculate_md5hash(self):
    return hashlib.sha1(bencode.bencode(self.info)).hexdigest()

def calculate_size(self):
    filesize = 0
    for file in self.files:
        filesize += file['length']          
    return filesize
</code></pre>

<p>Alternatively, if you only want the hash and size calculated when the methods are specifically called, but you also want caching, use <a href="https://docs.python.org/3/library/functools.html#functools.lru_cache" rel="noreferrer">lru_cache</a></p>

<p><code>lru_cache</code> will cache the result of a function the first time it is run, and then simply return the result for future calls, providing the arguments to the function remain the same.</p>

<pre><code>from functools import lru_cache

class Torrent(object):

    def __init__(self, torrentfile):
        self.metainfo = bencode.bdecode(torrentfile.read())
        self.info = self.metainfo['info']
        self.files = self.metainfo['info']['files']

    @lru_cache()
    def md5hash(self):
        return hashlib.sha1(bencode.bencode(self.info)).hexdigest()

    @lru_cache()
    def size(self):
        filesize = 0
        for file in self.files:
            filesize += file['length']          
        return filesize
</code></pre>

<p>Then call the methods explicitly:</p>

<pre><code>print(torrentfile.md5hash())
print(torrentfile.size())
</code></pre>
    </div>