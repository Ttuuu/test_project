<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I guess you're already aware that you'll pay a performance cost for the benefit of hiding the implementation, as each method will be dispatched via a <code>std::function</code> object, and there will be no opportunity for inlining.</p>

<hr>

<p>It's no longer considered good practice to inherit from <code>std::iterator</code> (and it's deprecated since C++17).  Instead, simply declare the types directly in your class:</p>

<pre><code>using iterator_category = std::input_iterator_tag;
using value_type = T;
using difference_type = std::ptrdiff_t;
using pointer = T*;
using reference = T&amp;;
</code></pre>

<hr>

<p>Wrapping the other iterator categories is going to involve more work (you can probably use inheritance for each category to build on its parent category, so you shouldn't have to repeat too much).</p>

<hr>

<p><code>InputIteratorDelegate</code> doesn't need two template arguments, as <code>T</code> should always be <code>typename TIterator::value_type</code>.</p>

<hr>

<p>It's probably worth implementing <code>InputIteratorDelegate::swap()</code>, which will reduce duplication in your constructors and assignment operators.</p>
    </div>