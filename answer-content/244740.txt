<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Vectorization</h2>
<p>You already use Numpy, so this should not be too difficult for you.</p>
<p>For a set of calculations such as</p>
<pre><code>z2 = r2 + l2 * s + 1 / (c2 * s)
z4 = r4 + l4 * s + 1 / (c4 * s)
z5 = r5 + l5 * s + 1 / (c5 * s)
z7 = r7 + l7 * s + 1 / (c7 * s)
z9 = r9 + l9 * s + 1 / (c9 * s)
</code></pre>
<p>Put capacitances 2, 4, 5, 7, 9 all into one <code>ndarray</code>, and the same for the corresponding resistances and inductances. Then,</p>
<pre><code>z24579 = r24579 + l24579*s + 1/c24579/s
</code></pre>
<p>Unless you can think of a better name than what I've shown. This will both execute more quickly and require fewer lines of code.</p>
<h2>Admittance</h2>
<p>Since you have lines like this:</p>
<pre><code>z_a = 1/(1/(z1 + 1 / (1/z2 + 1 / (z3 + 1 / (1/z4 + 1/z5)))) + 1/z12)
</code></pre>
<p>Consider putting all of your impedances in one vector and reciprocating it so that you get a vector of admittances. You could then unpack the vector to <code>a1</code>, <code>a2</code>, etc. for the purposes of this calculation.</p>
<h2>Result caching</h2>
<blockquote>
<p>I would like to rewrite my model to detect which parameters have changed, and then only do the computations that are needed</p>
</blockquote>
<p>This is what <a href="https://docs.python.org/3/library/functools.html#functools.lru_cache" rel="nofollow noreferrer"><code>lru_cache</code></a> has specifically been designed to do. It is very (very) easy to use - try prepending <code>@lru_cache</code> and see if that gets you somewhere.</p>
<p>To benefit from this, you will probably have to split up your current function into three or four functions, since it is likely that the optimizer will modify at least some variables; so you will need partial caching. Each of the subroutines would need its own <code>@lru_cache</code>.</p>
    </div>