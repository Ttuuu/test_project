<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>G.Sliepen points out this problem:</p>
<pre><code>gl_object&lt;GL_BUFFER&gt; buffer(GL_TEXTURE_2D);
gl_object&lt;GL_TEXTURE&gt; texture;
</code></pre>
<p>Another possible way to avoid this issue is to define the <code>gl_object</code> constructor using variadic template arguments. These arguments are forwarded to a class template specialization for the specific object type:</p>
<pre><code>    template&lt;class... ArgsT&gt;
    gl_object(ArgsT&amp;&amp;... args):
        m_id(gl_object_impl&lt;T&gt;::create(std::forward&lt;ArgsT&gt;(args)...)) { }

    ~object_id()
    {
        if (m_id != GLuint{ 0 })
            gl_object_impl&lt;T&gt;::destroy(m_id);
    }
</code></pre>
<p>So we forward declare <code>gl_object_impl</code> in the header with <code>gl_object</code>:</p>
<pre><code>        template&lt;class T&gt;
        struct gl_object_impl;
</code></pre>
<p>And each object type provides a specialization along with the rest of the operations for that object:</p>
<pre><code>        template&lt;&gt;
        struct gl_object_impl&lt;GL_FRAMEBUFFER&gt;
        {
            static GLuint create()
            {
                auto id = GLuint{ 0 };
                glGenFramebuffers(1, &amp;id);
                return id;
            }

            static void destroy(GLuint id)
            {
                glDeleteFramebuffers(1, &amp;id);
            }
        };


        class gl_framebuffer : public gl_object&lt;GL_FRAMEBUFFER&gt; { ... };
</code></pre>
<hr>
<p>A few more things:</p>
<ul>
<li><p>Note that the use of <code>inline</code> on those functions isn't necessary. (Standard compiler settings allow the compiler to decide what to inline, because they're better at that than programmers).</p>
</li>
<li><p>The <code>GLuint</code> cast operator should be marked <code>explicit</code> to prevent accidents. (Personally I'd just delete it entirely, since we can do the same thing neatly and obviously with <code>.id()</code>.)</p>
</li>
</ul>
    </div>