<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I agree with all the points mentioned in the <a href="https://codereview.stackexchange.com/a/241649/98493">answer</a> by <a href="https://codereview.stackexchange.com/users/223083/alex-povel">@AlexPovel</a> and I am not going to repeat them.</p>

<p>One thing that struck me as odd is that you have this class called <code>FileOrganizer</code>, but all it does is give you convenience functions for dealing with paths. What it explicitly does <em>not</em> do is organize your files! That is left as stand-alone code outside of the class.</p>

<p>I would make the moving code part of the class. This means that your global file type data structures should probably be class attributes. Afterwards you could do:</p>

<pre><code>file_organizers = [FileOrganizer(path) for path in paths]
while True:
    for file_organizer in file_organizers:
        file_organizer.organize()
    time.sleep(5)
</code></pre>

<p>Currently you are also running a loop until the file copying has finished, checking every 10 seconds if the file is there yet. I would either go <a href="https://docs.python.org/3/library/asyncio-subprocess.html" rel="nofollow noreferrer">fully asynchronous</a> (and keep track of files currently being copied) or use <a href="https://docs.python.org/3/library/subprocess.html" rel="nofollow noreferrer"><code>subprocess.run</code></a> (Python 3.5+), which will only return once the command has completed.</p>

<p>The method could look something like this:</p>

<pre><code>import subprocess

class FileOrganizer:

    ...

    def move(self, file, destination):
        ... # get the right names
        subprocess.run(["cp", "-pa", file, destination])
        if os.path.exists(destination):
            os.remove(file)
        else:
            print(f"Moving {file} failed.")
        return destination

    def organize(self):
        # Get the files and directories in the root directory.
        root, directories, files = next(os.walk(self.directory_path))
        root = Path(root)
        # List the files in the directory
        files = (root.joinpath(file) for file in files if " " not in file)

        # Loop through the files and copy each one of them.
        for file in files:
            file_category = self.category_selector(file.suffix)
            location = self.locations.get(file_category)
            if location is None:
                print("{file_category} is not a valid category")
                continue
            prefix = self.get_prefix(file)
            destination_root = location.get(prefix)
            if destination_root is None:
                print(f"{prefix} is not a valid prefix")
                continue
            self.move(file, destination_root)
</code></pre>

<p>Note that I added some debug output so it gets easier to see what the script is doing. You might want to move that to a log file using the <a href="https://docs.python.org/3/library/logging.html" rel="nofollow noreferrer"><code>logging</code></a> module eventually.</p>
    </div>