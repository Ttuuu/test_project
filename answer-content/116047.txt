<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You should use generator comprehensions instead of appending all the time.</p>

<pre><code>def xor(m, k):
    return "".join(str(int(i) ^ int(k)) for i, j in zip(m, k))

def gen_random_key(n):
    return "".join(choice(["0", "1"]) for _ in range(n))
</code></pre>

<p>Also be careful with the name <code>xor</code>, as there is also <a href="https://docs.python.org/3/library/operator.html#operator.xor" rel="nofollow"><code>operator.xor</code></a> that it could conceivably be confused with.</p>

<p>Also note that when you don't care about the iteration variable's name, just use an underscore (<code>_</code>).</p>

<p>You could have slightly better names too - <code>num_bits</code> vs <code>n</code> as the parameter to <code>gen_random_key</code></p>

<p>If you're actually going to write tests, write full unit tests and don't put them into the <code>if __name__ == '__main__'</code> block.  Also make sure you cover the obvious cases at the very least - an empty string, a short string, a long string, as well as some tests that it fails when you expect it to.  Additionally, if you're testing that the implementation is correct you should either <code>assert</code> or raise <code>AssertionError</code>s.</p>
    </div>