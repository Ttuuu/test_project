<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Welcome to CodeReview StackExchange. I'm new here too, so I would try my best to review your code and give you an explanation about it. Take in consideration that all of this is my opinion.</p>

<p>First of all your code should explain itself. You do not need to put comments about everything that you do in your code. It's a good practice to comment your code. But, you should comment stuff that maybe hard to understand at first glance, that maybe for you or anyone else reading your code. Try to put yourself as an outsider. You would know what a piece of code is doing just by looking at it or if you come back in a year you would know what it does?</p>

<p>Secondly, you should not put comment to separate blocks of code (in your case multiple slashes). This would make your code a little but unreadable and extensive. When you read code, you want to scroll as little as possible to understand the code in question. And most of IDE and Editor now include a feature to collapse regions of code.</p>

<p>Third, You should use the correct <a href="https://en.cppreference.com/w/cpp/language/expressions#Literals" rel="nofollow noreferrer">C ++ Literals</a> for your code. All of your double statement where declared like int <code>double i = 20</code>. You should declare them like <code>double i = 20.0</code>.</p>

<p>Fourth, Try to use the <a href="https://en.cppreference.com/w/cpp/header" rel="nofollow noreferrer">C ++ STL</a> whenever possible. It offers the best C ++ feature and implementation of trivial stuff almost bug free. So you do not have the hassle of dealing with trivial and non-trivial problem.</p>

<p>I don't know If I have missed something, maybe someone else may point it out. If you have any question, just ask. I would gladly answer you with the best of my ability. This is the source code with the same functionality and some comments explaining the changes</p>

<pre><code>#include &lt;array&gt;
#include &lt;iostream&gt;
#include &lt;string&gt;

// I don't like to use `using namespace`. It help me read the code better and see where all the methods are comming from.

// Use global constants to avoid errors.
// And if you want to change it later you change the value once throughout your code base
constexpr std::size_t QUIZZES_COUNT = 2;

/*
 * Try to consolidate all your struct. You were having a struct named Student with fields
 * that can be included in a student record. Hence the elmination.
*/

class StudentRecord {
public:
    std::string name;
    char finalLetterGrade;

private:
    // Try to use standard containers where posible
    std::array&lt;double, QUIZZES_COUNT&gt; quiz;
    double midterm, finalExam;
    double finalGrade;

public:
    void inputQuizzes();
    void inputMidtermGrade();
    void inputFinalGrade();

    double* getQuizzes();
    double getMidterm();
    double getFinalExam();

    // If a method doesn't access a field of the class, that method could be static.
    static double calcPercent(double grade, double outOfTotalPts, double percentOfTotal);
    static char calcFinalLetterGrade(double finalGrade);

    // Since this method are only setters there is no need for them to return the value
    void setFinalNumericGrade(double newFinalGrade);
    void setFinalLetterGrade(char newFinalLetterGrade);
};

double* StudentRecord::getQuizzes() {
    /*
        C style arrays are basically pointer to memory too. So you could have done something like this

            double data[2];
            return data;

        This would have returned a pointer of data. Without the necesity to create an extra variable
    */
    return quiz.data();
}

double StudentRecord::getMidterm() { return midterm; }
double StudentRecord::getFinalExam() { return finalExam; }

double StudentRecord::calcPercent(double grade, double outOfTotalPts, double percentOfTotal) {
    return (grade / outOfTotalPts) * percentOfTotal;
}

void StudentRecord::setFinalNumericGrade(double newFinalGrade) {
    // Since this method are only setters there is no need for them to return the value
    finalGrade = newFinalGrade;
}

// This method is static because doesn't access any of the member of StudentRecord
char StudentRecord::calcFinalLetterGrade(double finalGrade) {
    if (finalGrade &gt;= 90.0)
        return 'A';
    // You don't need to prove `finalGrade &lt; 90` since it would automatically be qualified for the above if clause.
    else if (finalGrade &gt;= 80.0) 
        return 'B';
    else if (finalGrade &gt;= 70.0)
        return 'C';
    else if (finalGrade &gt;= 60.0)
        return 'D';
    else
        return 'F';
}

void StudentRecord::setFinalLetterGrade(char newFinalLetterGrade) {
    // Since this method are only setters there is no need for them to return the value
    finalLetterGrade = newFinalLetterGrade;
}

void StudentRecord::inputQuizzes() {
    // This method is unnecessary since they are only called once. Their code could be putted where they are called
    std::cout &lt;&lt; "Enter quiz grades : ";
    for (int i = 0; i &lt; QUIZZES_COUNT; i++) {
        std::cin &gt;&gt; quiz[i];
    }
}

void StudentRecord::inputMidtermGrade() {
    // This method is unnecessary since they are only called once. Their code could be putted where they are called
    std::cout &lt;&lt; "Enter midterm grade : ";
    std::cin &gt;&gt; midterm;
}

void StudentRecord::inputFinalGrade() {
    // This methods is unnecessary since they are only called once. Their code could be putted where they are called
    std::cout &lt;&lt; "Enter final grade : ";
    std::cin &gt;&gt; finalExam;
}

int main() {
    StudentRecord student;

    std::cout &lt;&lt; "Enter name : ";
    std::cin &gt;&gt; student.name;

    student.inputQuizzes();
    student.inputMidtermGrade();
    student.inputFinalGrade();

    // General iostream tip: Don't use std::endl since it flush the stream buffer. That have performance impact
    // Source: Video by Jason Turner https://www.youtube.com/watch?v=GMqQOEZYVJQ

    double* ptr = student.getQuizzes();
    for (int i = 0; i &lt; QUIZZES_COUNT; i++)
        std::cout &lt;&lt; "Quiz " &lt;&lt; i + 1 &lt;&lt; ": " &lt;&lt; ptr[i] &lt;&lt; '\n';


    std::cout &lt;&lt; "Midterm : " &lt;&lt; student.getMidterm() &lt;&lt; '\n';

    std::cout &lt;&lt; "Final Exam : " &lt;&lt; student.getFinalExam() &lt;&lt; '\n';

    // calculations //

    double quizSum = 0.0;
    for (int i = 0; i &lt; QUIZZES_COUNT; i++)
        quizSum += ptr[i];

    // All of this "random" numbers (20.0, 25.0, 50.0, 100.0) can be made into constant to make the code reader aware of their significance
    double quizPercent = StudentRecord::calcPercent(quizSum, 20.0, 25.0);
    double midtermPercent = StudentRecord::calcPercent(student.getMidterm(), 100.0, 25.0);
    double finalPercent = StudentRecord::calcPercent(student.getFinalExam(), 100.0, 50.0);

    double finalNumGrade = quizPercent + midtermPercent + finalPercent;

    student.setFinalNumericGrade(finalNumGrade);

    char letterGrade = StudentRecord::calcFinalLetterGrade(finalNumGrade);

    student.setFinalLetterGrade(letterGrade);

    std::cout &lt;&lt; "Name : " &lt;&lt; student.name &lt;&lt; '\n';
    std::cout &lt;&lt; "Final Grade : " &lt;&lt; student.finalLetterGrade &lt;&lt; '\n';

    return 0;
}
<span class="math-container">```</span>cpp
</code></pre>
    </div>