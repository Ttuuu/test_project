<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your code is, in my opinion, well-written. It is readable and to the point. There a few things that I would like to point out that would fix a few bugs and help you improve your style:</p>

<h2>1. Faulty Argument Checking</h2>

<p>For your minimal argument checking, you simply detect if the first argument contains <code>"help"</code> anywhere. Therefore, it would not be able to process files like <code>helpme.txt</code>, <code>whelp.xyz</code>, <code>helpless</code>, or any file containing the characters of <code>"help"</code> in that order. </p>

<p>I would suggest an alternative like checking for exactly the word <code>help</code> or counting the number of arguments (when an incorrect number of arguments is presented.</p>

<p>In addition to that, the program should not continue if it detects that a filename was not presented. Or if it should continue, maybe prompt the user for input?</p>

<h2>2. Simplification of Mapping Loop</h2>

<p>You are extracting the value already present in the map against the given character to an <code>Integer</code> object. Then while reassigning the frequency, you are incrementing it with a prefix operator. I would discourage against that because you will only need the next integer in this instance and there is no need to reassign the variable.</p>

<p>You are using a traditional indexed for-loop which </p>

<p>There exists a method called <a href="https://docs.oracle.com/javase/8/docs/api/java/util/Map.html#getOrDefault-java.lang.Object-V-" rel="nofollow noreferrer"><code>getOrDefault</code></a> available for <code>Map</code>s, which we can use get rid of the <code>if</code> statement completely and use a single <code>put</code> statement.</p>

<pre><code>for (char key : chars) {
    int frequency = map.getOrDefault(key, 0);
    map.put(key, frequency + 1);
}
</code></pre>

<h2>3. Readable printing statement</h2>

<p>If you are using Java 8 or above, use the functional programming features to make your code less verbose and more readable. I recommend using the <code>forEach</code> method.</p>

<h2>4. Assign consistent names</h2>

<p>When someone reads the method's name: <code>fileToCharList</code>, they will expect the return type to be a <code>java.util.List</code>, or one of its subclasses (like <code>ArrayList</code>, <code>LinkedList</code>, etc). If you want to return an array, rename the method <code>fileToCharArray</code> or simply <code>fileToChars</code>. This will help remove any possible ambiguity.</p>

<h2>5. Simplifying the reading loop</h2>

<p>Since all you do is read characters, there does not seem to be any special reason to proceed line-by-line. You will only skip over new lines with this approach. Instead, you could simply use a <code>FileReader</code> and keep on reading until <code>EOF</code> is reached (i.e. <code>-1</code> is returned).</p>

<h2>The suggested update</h2>

<p>Feel free to incorporate as much or as little of the changes I suggested. Here is the updated code for the complete picture:</p>

<pre><code>import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.Map;
import java.util.HashMap;

public class Main {
    public static void main(String[] args) {
        if (args[0].contains("help")) {
            System.out.println("usage: java Main filename.txt");
            return; // No need to continue
        }

        Map&lt;Character, Integer&gt; map = new HashMap&lt;&gt;();
        char[] chars = fileToChars(args[0]);
        for (char key : chars) {
            int frequency = map.getOrDefault(key, 0);
            map.put(key, frequency + 1);
        }

        map.forEach((key, value) -&gt; System.out.println(key + ": " + value));
    }

    private static char[] fileToChars(String fileName) {
        File file = new File(fileName);
        if (!file.exists()) {
            // Maybe do something here?
        }
        StringBuilder builder = new StringBuilder();
        try (FileReader reader = new FileReader(file)) {
            int input;
            while ((input = reader.read()) != -1) {
                // If you don't want to append certain characters
                // filter them out here.
                builder.append((char) input);
            }
        } catch (IOException ioe) {
            ioe.printStackTrace();
        }
        return builder.toString().toCharArray();
    }
}
</code></pre>

<hr>

<h2>Update: Using ArrayList instead of StringBuilder</h2>

<p>As <a href="https://codereview.stackexchange.com/users/33306/tinstaafl">tinstaafl</a> pointed out, using an <code>ArrayList</code> would lead to simpler code and better performance for larger files, I decided to modify the code again:</p>

<pre><code>// imports

public class Main {
    public static void main(String[] args) {
        // Same until this point

        Map&lt;Character, Integer&gt; map = new HashMap&lt;&gt;();
        List&lt;Character&gt; chars = fileToCharList(args[0]);
        for (char key : chars) {
            int frequency = map.getOrDefault(key, 0);
            map.put(key, frequency + 1);
        }

        map.forEach((key, value) -&gt; System.out.println(key + ": " + value));
    }

    private static List&lt;Character&gt; fileToCharList(String fileName) {
        File file = new File(fileName);
        if (!file.exists()) {
            // Maybe do something here?
        }
        List&lt;Character&gt; list = new ArrayList&lt;&gt;();
        try (FileReader reader = new FileReader(file)) {
            int input;
            while ((input = reader.read()) != -1) {
                // If you don't want to append certain characters
                // filter them out here.
                list.add((char) input);
            }
        } catch (IOException ioe) {
            ioe.printStackTrace();
        }
        return list;
    }
}
</code></pre>
    </div>