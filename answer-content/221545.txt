<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Not duplicating any of @Peilonrayz's code review points ...</p>

<hr>

<p>Stop reading entire files into memory when you can process the file line by line in one pass, and stop creating huge lists in memory which are then iterated over exactly once.  Both of these things creates a huge unnecessary memory pressure which can be avoided by looping and/or using generator expressions.</p>

<p>Using a simple loop over all lines in the file:</p>

<pre><code>def average_spam_confidence(filename):
    with open(filename) as file:
        count = 0
        total = 0
        for line in file:
            if line.startswith("X-DSPAM-Confidence: "):
                try:
                    total += float(line[20:])
                    count += 1
                except:
                    pass   # Line ended with garbage
        return total / count
</code></pre>

<p>No regex.  No reading entire file in memory.  No creating a list of individual confidence values to sum up afterwards.</p>

<p>Plus, we've fixed a bug!  If "<code>X-DSPAM-Confidence:</code>" appears in the middle of a line, instead of at the start as required by the problem text, we don't try to process it.</p>

<p>But perhaps you wanted a more functional way of programming, where you:</p>

<ol>
<li>find all the confidence lines,</li>
<li>extract the confidence values, and</li>
<li>compute the average</li>
</ol>

<p>... all as separate steps which you can compose together, and reuse to solve other problems.  Fear not!  We can do that too!  Enter generator expressions:</p>

<p>First, let's open the file, and read all the matching lines into a list, using list comprehension:</p>

<pre><code>with open(filename) as file:
    lines = [line for line in file if line.startswith("X-DSPAM-Confidence: ")]
</code></pre>

<p>That second statement loops through each line in the file, checks if the line begins with the desired text, and if so, includes it in the list that is being constructed.  We can later iterator over <code>lines</code> to further process each line individually.</p>

<p>That is almost what we want to do.  Well, that is exactly what we want to do, but we don't want to do it all at once.  If we change the <code>[...]</code> to <code>(...)</code>, we move from list comprehension to a generator expression.</p>

<pre><code>with open(filename) as file:
    lines = (line for line in file if line.startswith("X-DSPAM-Confidence: "))
</code></pre>

<p>Now, the second statement has done ... nothing.  We haven't read the first character of the file yet.  What we have returned is a generator expression, which when we ask for the first value will start reading lines until it finds one that matches, and then it will pause its execution and return that value.</p>

<p>Ok.  Let's extract just the confidence values:</p>

<pre><code>    values = [ line[20:] for line in lines ]
</code></pre>

<p>Whoops!  That's list comprehension.  It will loop over all the lines that the <code>lines</code> generator can produce, skip over the prefix and return the rest.  Again, change those <code>[...]</code> to <code>(...)</code>:</p>

<pre><code>    values = ( line[20:] for line in lines )
</code></pre>

<p>Better!  Now those are still strings, so we'll need to convert them into float point values.  Too easy.  Just <code>map</code> them:</p>

<pre><code>    confidences = map(float, values)
</code></pre>

<p><code>confidences</code> is a generator.  If you said <code>list(confidences)</code>, you'd create that in-memory list of float values for all the "<code>X-DSPAM-Confidence:</code>" values in the file.  And you could then <code>sum(...)</code> and <code>len(...)</code> the list of values to compute the average.  But we don't want to realize the list in memory, so ...</p>

<pre><code>def average(data):
    total = 0
    count = 0
    for value in data:
        total += value
        count += 1
    return total / count

average_confidence = average(confidences)
</code></pre>

<p>... we ask for values from the <code>confidences</code> generator, add them up one at a time, counting as we go.  When the generator is exhausted, the <code>for</code> loop ends, and we return the average.</p>

<p>Putting it all together:</p>

<pre><code>def average(data):
    total = 0
    count = 0
    for value in data:
        total += value
        count += 1
    return total / count

def average_spam_confidence(filename):
    with open(filename) as file:
        lines = (line for line in file if line.startswith("X-DSPAM-Confidence: "))
        values = ( line[20:] for line in lines )
        confidences = map(float, values)
        return average(confidences)
</code></pre>

<p>Or more simply:</p>

<pre><code>import statistics

def average_spam_confidence(filename):
    with open(filename) as file:
        values = (line[20:] for line in file
                            if line.startswith("X-DSPAM-Confidence: "))
        return statistics.mean(map(float, values))
</code></pre>

<p>Note: the non-generator solution was more robust converting the confidence value strings into floats, via a <code>try...except</code> block.  The generator expression solution shown above omits that.  The robustness may be improved by using a more precise matching when searching for the "<code>X-DSPAM</code>" lines (regex).  Alternately, a generator function could be used, which discards the non-float values.</p>

<pre><code>def map_to_float(data):
    for value in data:
        try:
            yield float(value)
        except:
            pass

confidences = map_to_float(values)
</code></pre>

<hr>

<p><strong>Note</strong> (from @Roland Illig's comment): Because generator expressions delay the execution of their operation, any resources they use must remain available until their processing has been finished.  They cannot be used to compute the average spam confidence if the file they are reading from is closed before the average has been computed.  In the above examples, the generator expressions are fully consumed within the body of the <code>with open(...) as file:</code> block, so the file was kept open.</p>

<p>This does not mean the generator expressions must all occur within the <code>with</code> statement.  They can be spread out across many functions, but their execution must be constrained to the interval when the file is open:</p>

<pre><code>def find_occurrences_in_file(input_file):
    """Return a generator for occurrences of X-DSPAM lines"""
    return (line for line in input_file if line.startswith("X-DSPAM-Confidence: "))

def retrieve_values(input_list):
    """Return a generator for float values from a list"""
    return map(float, (line.split()[-1] for line in input_list))

def average(input_list):
    """Compute average of a list/sequence/iterable/generator of values..."""
    return statistics.mean(input_list)

def average_spam_confidence(file_name):
    with open(file_name) as file:
        # File is open for this entire with statement.
        occurrences = find_occurrences_in_file(file)
        values = retrieve_values(occurrences)
        print(average(values))
        # File is closed here - but "average(...)" has exhaustively read
        # from all of the generators already.
</code></pre>
    </div>