<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Complexity</h1>
<p><code>std::sort</code> has at runtime complexity of at least <span class="math-container">\$\mathcal{O}(n \log{n})\$</span>, and requires that the given container type provides random access iterators (which are only few of them).</p>
<p>Also, other than further assumptions in the later code, it doesn't seem sorting is actually required.</p>
<pre><code>    auto iter = std::partition(in.begin(), in.end(), [&amp;](auto elem) { return !predicate(elem); });

    std::move(iter, in.end(), std::back_inserter(out));
    in.erase(iter, in.end());
</code></pre>
<blockquote>
<p>If stability is required, this could be adapted to:</p>
<pre><code>auto insert_pos = std::find_if(in.begin(), in.end(), predicate);

for(auto iter = insert_pos; iter != in.end(); std::advance(iter))
{
    if(predicate(*iter))
    {
        out.push_back(std::move(*iter));
    }
    else
    {
        *insert_pos = std::move(*iter);
        std::advance(insert_pos);
    }
}

in.erase(insert_pos, in.end());
</code></pre>
</blockquote>
<p>This has linear time complexity, and works with all containers that have random access iterators.</p>
<h1>Design</h1>
<p>Currently, the algorithms requires the following properties of the output container:</p>
<ul>
<li><p>It has to be of the exact same type as the input container (so transferring values from a <code>std::list</code> to a <code>std::vector</code> isn't possible).</p>
</li>
<li><p>Values can only ever be move to the back of <code>out</code>, requiring the container to have a <code>push_back</code> member function.</p>
</li>
</ul>
<p>Additionally, <code>Container</code> must provide random access iterators in order to use <code>std::sort</code>.</p>
<p>All these restrictions are not necessarily required: Conceptually, there shouldn't be a problem moving the values from any container to any position in another container.</p>
<p>To accomplish this, the algorithm could take an output iterator instead.</p>
<p>For a more generic solution, the following implementation could be used:</p>
<pre><code>template&lt;class Container, class OutIter, class UnaryPredicate&gt;
OutIter move_and_erase_if(Container&amp; in, OutIter out, UnaryPredicate&amp;&amp; predicate) {
    for(auto iter = std::find_if(in.begin(), in.end(), predicate);
        iter != in.end();
        iter = std::find_if(iter, in.end(), predicate)
    {
        *out = std::move(*iter);
        std::advance(out);
        iter = in.erase(iter);
    }

    return out;
}
</code></pre>
<p>However, this implementation has a worse runtime complexity than the original solution for <code>std::vector</code>/<code>std::deque</code>, since they don't have <span class="math-container">\$\mathcal{O}(1)\$</span> <code>erase</code> operations.</p>
<p>The solution would be to use the correct algorithm depending on the containers iterator type. This can be accomplished using SFINAE.</p>
<pre><code>template&lt;class Container, class OutIter, class UnaryPredicate&gt;
typename std::enable_if&lt;
    !std::is_base_of&lt;
        std::random_access_iterator_tag,
        typename std::iterator_traits&lt;typename Container::iterator&gt;::iterator_category
    &gt;::value,
    OutIter
&gt;::type move_and_erase_if(Container&amp; in, OutIter out, UnaryPredicate&amp;&amp; predicate)
{
    for(auto iter = std::find_if(in.begin(), in.end(), predicate);
        iter != in.end();
        iter = std::find_if(iter, in.end(), predicate)
    {
        *out = std::move(*iter);
        std::advance(out);
        iter = in.erase(iter);
    }

    return out;
}

template&lt;typename Container, typename OutIter, typename UnaryPredicate&gt;
typename std::enable_if&lt;
    std::is_base_of&lt;
        std::random_access_iterator_tag,
        typename std::iterator_traits&lt;typename Container::iterator&gt;::iterator_category
    &gt;::value,
    OutIter
&gt;::type move_and_erase_if(Container&amp; in, OutIter out, UnaryPredicate predicate)
{
    auto iter = std::partition(in.begin(), in.end(), [&amp;](auto elem) { return !predicate(elem); });

    out = std::move(iter, in.end(), out);
    in.erase(iter, in.end());

    return out;
}
</code></pre>
<blockquote>
<p>In C++17 or later, one could use <code>if constexpr</code> instead, simplifying the implementation.</p>
<pre><code>template&lt;typename Container, typename OutIter, typename UnaryPredicate&gt;
OutIter move_and_erase_if(Container&amp; in, OutIter out, UnaryPredicate predicate)
{
    if constexpr(std::is_base_of_v&lt;std::random_access_iterator_tag,
                 typename std::iterator_traits&lt;typename Container::iterator&gt;::iterator_category&gt;)
    {
        auto iter = std::partition(in.begin(), in.end(), [&amp;](auto&amp;&amp; elem) { return !predicate(elem); });
        
        out = std::move(iter, in.end(), out);
        in.erase(iter, in.end());
    }
    else
    {
        for(auto iter = std::find_if(in.begin(), in.end(), predicate);
            iter != in.end();
            iter = std::find_if(iter, in.end(), predicate))
        {
            *out = std::move(*iter);
            std::advance(out);
            iter = in.erase(iter);
        }
    }

    return out;
}
</code></pre>
</blockquote>
<h1>Userfriendlyness</h1>
<p>It would be nice to check at compile time whether <code>Container::value_type</code> matches <code>std::iterator_traits&lt;OutIter&gt;::value_type</code> and whether <code>UnaryPredicate</code> accepts an argument of type <code>Container::value_type</code>. This could be done with SFINAE or <code>static_assert</code>s.</p>
    </div>