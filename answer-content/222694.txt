<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The function takes around <span class="math-container">\$41\mu s\$</span> on average per run on my machine. About three quarters of it (around <span class="math-container">\$ 32\mu s\$</span>) are spent for <code>downsampling_indices = np.linspace(...)</code>. Add another <span class="math-container">\$1.5\mu s\$</span> for <code>round().astype(int)</code>, about <span class="math-container">\$1\mu s\$</span> for the actual sampling, plus some calling overhead, and you're there.</p>

<p>So if you would need to use the function several times, it would be best to precompute or <a href="https://docs.python.org/3/library/functools.html#functools.lru_cache" rel="nofollow noreferrer">cache</a>/<a href="https://wiki.python.org/moin/PythonDecoratorLibrary#Memoize" rel="nofollow noreferrer">memoize</a> sampling indices. If I understood your implementation correctly, the downsampling index computation is basically data independent and only depends on the length of the two sequences, so that might be actually viable.</p>

<p>For example you could have</p>

<pre><code>import functools

...

@functools.lru_cache()
def compute_downsampling_indices_cached(n_samples, data_sequence_len):
    """Compute n_samples downsampling indices for data sequences of a given length"""
    return np.linspace(0, data_sequence_len-1, n_samples).round().astype(int)
</code></pre>

<p>and then do</p>

<pre><code>def resample_cache(n_samples, data_sequence):
    downsampling_indices = compute_downsampling_indices_cached(n_samples, len(data_sequence))
    return [data_sequence[ind] for ind in downsampling_indices]
</code></pre>

<p>Note that I replaced <code>desired_time_sequence</code> by <code>n_samples</code> which would then have to be set to <code>len(desired_time_sequence)</code> since you don't care about the actual values in <code>desired_time_sequence</code>.</p>

<p>It might also be possible to benefit from <a href="https://docs.scipy.org/doc/numpy/reference/arrays.indexing.html" rel="nofollow noreferrer">NumPy's indexing</a> and use <code>return np.array(data_sequence)[downsampling_indices]</code> for larger inputs. You will have to check that yourself.</p>

<p>On my machine <code>resample_cache(...)</code> takes <span class="math-container">\$1.7\mu s\$</span>, which is about a decent 20x speed up.</p>
    </div>