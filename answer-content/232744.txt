<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Please, for the love of goodness, don't create your own superclass named <code>Object</code>, be more specific. The lower-case <code>object</code> is already a defined type and this is just confusing.</p>

<p>The multi-language name and category approach isn't scalable. I needed a similar solution recently, and what I tried was something like the following:</p>

<pre><code>class Language(models.Model):
    name = models.CharField(max_length=2)  # Create one "en" instance and one "bg" instance

class Text(models.Model):
    text = models.TextField()
    language = models.ForeignKey('Language', on_delete=models.CASCADE)

class Category(models.Model):
    names = models.ManyToManyField('Text')

    def name(self, language='en'):
        try:
            return self.names.get(language=language).text
        except Text.DoesNotExist:
            return self.names.get(language__name='en').text  # or whatever your default language is
</code></pre>

<p>You can then keep a language for each user, and when you want to look up the name, just do <code>category.name(request.user.language)</code>. You can thus easily add new languages and tweak translations in the future just by altering the database.</p>

<p>Anyway, back to reviewing your actual code. Since all your tags are simple boolean fields, it would have been much cleaner to keep these categories in their own table, create a many-to-many mapping, and simply do existence checks into your database. To make the types of businesses easily editable and addable, you could create a type system in your database itself, creating a kind of "virtual" inheritance system.</p>

<pre><code>class Business(models.Model):
    name = models.ManyToManyField('Text')
    author = ...
    ...
    kind = models.ForeignKey('BusinessType', null=True, on_delete=models.SET_NULL)
    tags = models.ManyToManyField('Tag')

class BusinessType(models.Model):
    name = models.CharField(max_length=100)  # e.g., 'Restaurant' or 'Sport Fitness'
    possible_tags = models.ManyToManyField('Tag')

class Tag(models.Model):
    base_name = models.CharField(max_length=100)  # e.g. 'bulgarian_kitchen'
    description = models.ManyToManyField('Text')
</code></pre>

<p>You still have access to all the same information, but it's all configurable through the database rather than through your code. E.g., to get a restaurant and check if it has an Italian kitchen,</p>

<pre><code>restaurant = Business.objects.get(name__language='en', name__text='YumBob', kind__name='Restaurant')
has_italian_kitchen = restaurant.tags.filter(base_name='italian_kitchen').exists()
</code></pre>

<p>or to find all beauty salons that offer laser epilation,</p>

<pre><code>epilators = Business.objects.filter(kind__name='Beauty Salon', tags__name='laser_epilation')
</code></pre>

<p><a href="https://stackoverflow.com/questions/5478432/making-a-django-form-class-with-a-dynamic-number-of-fields">You can also</a> <a href="https://jacobian.org/2010/feb/28/dynamic-form-generation/" rel="nofollow noreferrer">dynamically create forms</a>, etc. for each business type by instantiating a base Form and then adding boolean fields to it for each tag in <code>my_business.kind.possible_tags</code>. And, of course, you could create sidecar tables for particular business types to store additional, non-boolean fields. E.g.,</p>

<pre><code>class RestaurantExtraData(models.Model):
    business = models.OneToOneField('Business', primary_key=True, on_delete=models.CASCADE)
    num_seats = models.IntegerField()
</code></pre>

<p>This way, you minimize the amount of special code required for different businesses, but retain the ability to add extra information where necessary. All of this together avoids your need for the stacked if/else statements and the large quantities of hard-coded strings in your views and templates, and allows you to configure everything using data rather than code.</p>
    </div>