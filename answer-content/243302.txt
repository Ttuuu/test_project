<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This function will certainly do the job. Couple of nitpicks:</p>

<ul>
<li><p>You might consider replacing <code>el !== null &amp;&amp; el.length !== 0</code> with <code>el &amp;&amp; "nodeType" in el</code></p></li>
<li><p>Every time the elementFinder is called, you are defining a new function in memory called <code>checkerFn</code>, instead you can reuse it, but probably you'll have to pass <code>interval</code> and <code>maxTries</code> as a parameter to it:</p></li>
</ul>

<pre><code>const finder = function(){
   function elementFinder (..){
      ...
   }
   function checkerFn (..) {
      ...
   }
   return elementFinder;
}();
</code></pre>

<ul>
<li><p>Consider switching to <code>requestAnimationFrame</code> (<code>rAF</code>); for tasks/animations that does not have to be executed with sub-millisecond precision can be handled by <code>rAF</code>. The good thing with rAF is that if the tab is out of focus, it won't run.</p></li>
<li><p>If you are simultaneously searching for several elements at the same time, multiple <code>setTimeout</code>/<code>rAF</code> calls will have to be executed. For a couple of elements/tasks this is not an overhead, but if you have many, it makes sense to execute 1 <code>setTimeout</code>/<code>rAF</code> per 'tick' and process the tasks in there. For this you will need to modify your code to store tasks in some sort of ledger.</p></li>
<li><p>I see that you are using Promises, which is a great idea, perhaps to return a <code>thenable</code> from your function which you can execute other tasks once the element is available. The problem with Promises is that you cannot 'break' out of it, you'll have to add some sort of breaking mechanism to your code. Also if you want to seamlessly support evergreen and older browsers, you'll need a Promise polyfill. </p></li>
<li><p>Although Promises bring a lot of convenience, they certainly bring an overhead (see perf differences between Native Promises and <a href="http://bluebirdjs.com/docs/getting-started.html" rel="nofollow noreferrer">Bluebird's version</a>). If the sole purpose is to return a <code>thenable</code> for constructing chains, this can certainly be implemented using only <code>setTimeout</code>/<code>rAF</code>. This alleviates the need for polyfill for olderbrowsers.</p></li>
</ul>
    </div>