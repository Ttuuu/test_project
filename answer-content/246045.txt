<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>When compiling, always enable the warnings, then fix those warnings.  A run of the code through the <code>gcc</code> compiler results in:</p>
<pre class="lang-none prettyprint-override"><code>gcc -ggdb3 -Wall -Wextra -Wconversion -pedantic -std=gnu11 -c "untitled2.c" -o "untitled2.o" 

untitled2.c: In function ‘calculate_avg_density’:

untitled2.c:56:31: warning: conversion to ‘double’ from ‘long long unsigned int’ may alter its value [-Wconversion]
         avg_density += (rho[i]*distribution[i])/norm;
                               ^

untitled2.c:56:48: warning: conversion to ‘double’ from ‘long long unsigned int’ may alter its value [-Wconversion]
         avg_density += (rho[i]*distribution[i])/norm;
                                                ^

untitled2.c: In function ‘monte_carlo_sweeps’:

untitled2.c:65:13: warning: conversion to ‘int’ from ‘double’ may alter its value [-Wfloat-conversion]
     par.n = initial*LATTICE_SIZE-1;
             ^~~~~~~

untitled2.c: In function ‘main’:

untitled2.c:96:11: warning: conversion to ‘unsigned int’ from ‘time_t {aka long int}’ may alter its value [-Wconversion]
     srand(time(0));
           ^~~~

untitled2.c:88:14: warning: unused parameter ‘argc’ [-Wunused-parameter]
 int main(int argc, char **argv)
              ^~~~

untitled2.c: In function ‘monte_carlo_sweeps’:
untitled2.c:85:1: warning: control reaches end of non-void function [-Wreturn-type]
 }
 ^

Compilation finished successfully.
</code></pre>
<p>The statement: <code>Compilation finished successfully.</code> only means the compiler produced some workaround for each of the warnings.  That 'workaround' may (or may not) be what you want.</p>
<p>regarding:</p>
<pre><code>initial = atof(argv[1]);
</code></pre>
<p>Never access beyond <code>argv[0]</code> without first checking <code>argc</code> to assure the expected command line parameter was actually entered by the user.  If the expected number of command line arguments are not found, then output a <code>USAGE</code> message to <code>stderr</code>, similar to:</p>
<pre><code>fprintf( stderr, "USAGE: %s initialValue\n", argv[0] );
exit( EXIT_FAILURE );
</code></pre>
<p>in function: <code>monte_carlo_sweeps()</code></p>
<p>It is a bad idea to just run off the end of a non-void function and returning from a thread should be exited with:</p>
<pre><code>pthread_exit( NULL );
</code></pre>
<p>Regarding:</p>
<pre><code>srand(time(0));
</code></pre>
<p>This produces a compiler warning.  Suggest:</p>
<pre><code>srand( (unsigned)time( NULL ) );
</code></pre>
<p>for ease of readability and understanding:</p>
<ol>
<li>insert a blank line around code blocks: <code>for</code> <code>if</code> <code>else</code> <code>while</code> <code>do...while</code> <code>switch</code> <code>case</code> <code>default</code></li>
<li>insert 2 or 3 blank lines between functions (be consistent)</li>
<li>insert an appropriate space: inside parens, inside braces, inside brackets, after commas, after semicolons, around C operators</li>
</ol>
<p>it is best to not use 'global' variables.  Rather define them as 'local' variables within a function (like <code>main()</code> ) and pass pointers to them to sub functions that need them.</p>
<p>regarding:</p>
<pre><code>#define RAND (double)rand()/(double)RAND_MAX
</code></pre>
<p>it is best to place parens around the whole calculation so when <code>RAND</code> is invoked all the desired order of operations is not lost.</p>
<p>regarding;</p>
<pre><code>fp = fopen("data.dat", "a");
</code></pre>
<p>always check (!=NULL) the returned value to assure the operation was successful.  When not successful (==NULL) then call</p>
<pre><code>perror( "fopen to append data.dat failed" );
exit( EXIT_FAILURE );
</code></pre>
<p>where <code>exit()</code> and <code>EXIT_FAILURE</code> are exposed via:</p>
<pre><code>#include &lt;stdlib.h&gt;
</code></pre>
<p>regarding;</p>
<pre><code>pthread_create(&amp;id, NULL, monte_carlo_sweeps, (void *)&amp;betas[i]); 
</code></pre>
<p>there are going to be <code>CPUs</code> threads, each with a unique <code>thread_t ID</code></p>
<p>Should always check the returned value to assure the operation was successful.  Suggest:</p>
<pre><code>pthread_t id[ CPUs ];
</code></pre>
<p>and</p>
<pre><code>if( pthread_create(&amp;id[i], NULL, monte_carlo_sweeps, (void *)&amp;betas[i]) != 0 )
{
    perror( "pthread_create failed" );
    // cleanup then
    exit( EXIT_FAILURE );
}
</code></pre>
<p>at the end of <code>main()</code>, do NOT call:</p>
<pre><code>pthread_exit( NULL );
</code></pre>
<p>when waiting for the threads to complete.</p>
<p>because there are <code>CPUs</code> threads, do this instead:</p>
<pre><code>for( int i = 0; i &lt; CPUs; i++ )
{
    pthread_join( id[i], NULL );
}
</code></pre>
    </div>