<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>An <span class="math-container">\$O(n)\$</span> complexity and storage solution</h2>
<p>A post dredged from the deep past and has 7 answers. All of which are rather poor in terms of either complexity and/or storage.</p>
<p>There is a solution that is <span class="math-container">\$O(n)\$</span> complexity and <span class="math-container">\$O(n)\$</span> storage.</p>
<p><strong>Note</strong> Best case storage <span class="math-container">\$O(1)\$</span> eg <code>(pairwise[0, 0, 0, ..., 0], 0)</code>. Worst case <span class="math-container">\$O(n)\$</span> eg <code>(pairwise[0, 0, 0, ..., 0], 1)</code></p>
<p>Using a Map we can eliminate the costly overhead of iterating to find the second matching item. The map also stores an array indexes of the first item allowing for easy calculation of the smallest result. This removes the need to search for the lowest value.</p>
<pre><code>function pairWise(arr, pairSum) {
    const required = new Map();
    var sum = 0, i = 0;
    for (const val of arr) {
        if (required.has(val)) {
            const pair = required.get(val);
            sum += i + pair.ind[pair.use ++];
            if (pair.use === pair.ind.length) { required.delete(val) }
        } else {
            const req = pairSum - val;
            if (required.has(req)) { required.get(req).ind.push(i) }
            else { required.set(req, {ind: [i], use: 0}) }
        }
        i ++;
    }
    return sum;
}
</code></pre>
<p>To be fair at the time this question was posted knowledge of Map was limited as was its implementation. However JS <code>Object</code> also provides a way to create a map so the solution has always been easily implemented in JS</p>
<pre><code>// pre ES6 version
function pairWise(arr, pairSum) {
    var required= {}, sum = 0, i = 0, val, pair;
    while (i &lt; arr.length) {
        val = arr[i];
        if (required[val]) {
            pair = required[val];
            sum += i + pair.ind[pair.use ++];
            if (pair.use === pair.ind.length) { delete required[val] }
        } else {
            val = pairSum - val;
            if (required[val]) { required[val].ind.push(i) }
            else { required[val] = {ind: [i], use : 0} }
        }
        i ++;
    }
    return sum;
}
</code></pre>
    </div>