<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strike>This code is not correct. The <code>r[4]</code> and <code>c[4]</code> arrays you have are stored on the stack, which means that as soon as they go out of scope the data is no longer valid and you get undefined behavior because <code>rr</code> and <code>cc</code> now point to unused (and possibly overwritten) areas on the stack.</strike></p>

<p>If you wanted to do this correctly, you could ensure that the arrays are kept alive either by storing on the heap, static memory, or high enough on the stack that they will live as long as <code>rr</code> and <code>cc</code> are used.</p>

<p>After reading it again, I realized I made a mistake. While the temporary <code>r</code> and <code>c</code> arrays are initialized in their own scopes that are immediately exited, the arrays themselves live on the same stack with the rest of the function. Still, it's definitely a bad habit to have use variables after they've left the scope even if they're technically still on the stack, so I would make the same changes anyway.</p>

<p>For example, you could do:</p>

<pre><code>// Somewhere in a high enough scope (possibly the current one) or static
char r_1[4] = { 0, -1, 0, 1 };
char c_1[4] = { 1, 0, -1, 0 };

char r_2[4] = { -1, -1, 1, 1 };
char c_2[4] = { 1, -1, -1, 1 };

// In the current scope
char *rr;
char *cc;

if (cycle % 2 == 0) {
  rr = r_1;
  cc = c_1;
}
else {
  rr = r_2;
  cc = c_2;
}
</code></pre>
    </div>