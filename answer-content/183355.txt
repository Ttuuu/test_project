<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here are some comments:</p>

<ol>
<li><a href="https://stackoverflow.com/questions/14247373/python-none-comparison-should-i-use-is-or">You should not compare to <code>None</code> using <code>==</code>.</a> Always use <code>is</code> in this case.</li>
<li>Have a look at Python's official style-guide, <a href="https://www.python.org/dev/peps/pep-0008/" rel="noreferrer">PEP8</a>. It recommends surrounding operators with spaces for readability and (a consistent use of) four spaces for indentation.</li>
<li>You don't need your innermost loop, because you already know the value <code>j</code> needs to take for the sum to be the target number: <code>j = numbersum - (a + b + c + d + e + f + g + h + i)</code></li>
<li><code>range</code> has <code>0</code> as its implicit first argument, so you can just write <code>range(numbersum)</code>.</li>
<li><a href="https://stackoverflow.com/a/39680089/4042267">You should not use string addition here.</a> Rather accumulate the strings in a list and <code>''.join(x)</code> them to one string. Call <code>int</code> on the result of that.</li>
<li>Try to come up with a better name for <code>nr</code>. Maybe <code>number_reversed</code>?</li>
<li>Use <a href="https://www.digitalocean.com/community/tutorials/how-to-use-string-formatters-in-python-3" rel="noreferrer"><code>str.format</code></a>: <code>print("{} {} {}".format(div[ind], int(best)/div[ind], int(best)))</code>. Or, even simpler: <code>print(div[ind], int(best)/div[ind], int(best))</code>, because the <code>print</code> function separates its arguments with spaces.</li>
</ol>

<hr>

<p>You might want to try to come up with a better algorithm, though. Maybe something like this:</p>

<pre><code>import itertools

def is_ascending_or_descending(n):
    n = list(str(n))
    n_sorted = sorted(n)
    return n == n_sorted or n == n_sorted[::-1]

def smallest_sorted(n):
    for i in itertools.count(1):
        if is_ascending_or_descending(i * n):
            return i

if __name__ == "__main__":
    numbers = [...]
    for n in numbers:
        best = smallest_sorted(n)
        print(n, best, n * best)
</code></pre>

<p>This takes less than a second on my machine for the first two numbers. It takes a lot longer for the next number, though, so there should be an even better algorithm possible.</p>

<hr>

<p>Another way to go at it is generating an <code>i</code> and seeing if it is the right one for any of the numbers:</p>

<pre><code>def all_smallest_sorted(numbers):
    numbers = set(numbers)
    i = 1
    while numbers:
        found = set()
        for n in numbers:
            if is_ascending_or_descending(i * n):
                found.add(n)
                # yield n, i, i * n
                print(n, i, i * n)
        numbers -= found
        i += 1
</code></pre>

<p>After letting this run for a while, it found most of the integers. The ones it found are all below 34M. However, I had to stop the script at that point and it did not find them for some of the numbers:
<code>1089, 2178, 3267, 4356, 5445, 6534, 7623, 8712, 9801, 9898, 4107, 8214, 8991</code></p>
    </div>