<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Try this:</p>

<pre><code>$finalResult=[];
        array_map(function ($value) use (&amp;$finalResult){
            $result = array_values($value);
            return $finalResult[$result[0]] = $result[1];
        }, $array);

        return $finalResult;
</code></pre>

<p>I try avoiding fors as much as possible and rely on native functions. I started doing this since I read a book called refactoring to collections. This improved my code and the speed of my code.</p>

<p>Native functions are written in a memory effective way. </p>

<p>The function inside the array_map is called a closure. You can implement a closure anytime you need to do quick computations locally. </p>

<p>Your solution does the job right, but looks a little bit messy. I don't think there will be a speed issue with what you have though.</p>

<p>Edit:</p>

<pre><code> $array = [
            0 =&gt; ['level_id' =&gt; 1, 'level' =&gt; 'Trivial', 'description' =&gt; 'Foobar'],
            1 =&gt; ['level_id' =&gt; 2, 'level' =&gt; 'Moderate', 'description' =&gt; 'Foobar'],
            2 =&gt; ['level_id' =&gt; 3, 'level' =&gt; 'Challenging', 'description' =&gt; 'Foobar'],
            3 =&gt; ['level_id' =&gt; 4, 'level' =&gt; 'Formidable'],
        ];
</code></pre>

<p>Using this:</p>

<pre><code>$finalResult = [];
        array_map(function ($value) use (&amp;$finalResult) {
            $result = array_values($value);
            return sizeof($result) == 2 ?
                $finalResult[$result[0]] = $result[1]
                : $finalResult[$result[0]] = array_slice($value, 0, sizeof($value) - 1);
        }, $array);
</code></pre>

<p>You will always get the right answer no matter how many columns you have or how many combinations you have.</p>

<ul>
<li>sizeof($result) == 2 ? $finalResult[$result[0]] = $result[1] if teh array has 2 entries use the first as id and second as value</li>
<li>$finalResult[$result[0]] = array_slice($value, 0, sizeof($value) - 1); // if it has more than 2 entries then 2 entries remove the first (array_slice($value, 0, sizeof($value) - 1)). This does not cover the case where there is only one entry, but neither did yours. We should cover that as well like this:</li>
</ul>

<p>return sizeof($result) == 2 ?
                    $finalResult[$result[0]] = $result[1]
                    : sizeof($result) &gt;  2 ? $finalResult[$result[0]] = array_slice($value, 0, sizeof($value) - 1) : [];</p>

<p>Now for the for issue:</p>

<p>What a for does is basically iterating through every item of the array (no matter how long) and do something with it. Ideally, native functions use memory addresses to find one element at the time, do something with it and free the memory. I said ideally, because sometimes whoever write the code through a foe behind it. I will try to write a blog post about this since it sounds like a great issue to raise. </p>

<p>Mostly, what I can tell you after 12 years of programming is that you learn by doing. And you usually learn when something does not work out. I learned my lesson with for after a server failed with 503( was having timeout issues) when my db got to ~1 mil entries. </p>

<p>It is great that you want to learn and improve and I think that if you stick to what you're doing you're gonna get there. Just don't be afraid to test and try other things. Whenever I have a similar issue I go to the manual and check what I can use. If no such functions is in the manual I add it to my helpers file (that I import everywhere) and try it with lots of data. If it fails I go back and try other options.</p>
    </div>