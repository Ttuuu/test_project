<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your code seams massively over complex.</p>
<p>I do not see the need to sort the arrays as the overhead does not warrant the the benefit.</p>
<p>Assigning to the maps in the sort function is very inefficient. The sort function will be called many more times than there are items in the array.</p>
<p>I would say that <code>if (hashMapB.hasOwnProperty(difference)) {</code> is redundant as it can be assumed that objects within the environment of leetcode will not have enumerable properties higher in the prototype chain to worry about. Thus <code>if (hashMapB[difference] !== undefined)</code> would be more performant.</p>
<p>The long variable names makes your code hard to follow. Consider short names and use common abbreviations to reduce the length of lines.</p>
<p>JS will automatically insert semicolons, but there are many situations when the location of the inserted semicolon is not obvious. Inexperienced JS coders should always use semicolons. Experienced coders know its easier to include them.</p>
<p>You don't need to delimit single line statement blocks with <code>{}</code> however it is a source of future bugs when modifying code, as adding the <code>{}</code> can easily be overlooked and very hard to spot. Always delimit all statement blocks. eg <code>if (foo) bar =1</code> is better as <code>if (foo) { bar = 1 }</code></p>
<p>The link you provided is not a testable problem, rather it is just a leetcode discussion topic. I have nothing to test on apart from the limited arguments provided in the discussion. There are many question that the set of given inputs do not answer, writing the optimal solution is not possible. The example below is just a brute force solution of complexity <span class="math-container">\$O(nm)\$</span> where <span class="math-container">\$n\$</span> and <span class="math-container">\$m\$</span> are the length of the two input arrays.</p>
<h2>Example</h2>
<p>Comparing this function against yours and assuming that the values to sum are signed integers (not unsigned as that would allow the inner loop to be skipped if an items had a value greater than the sum (3rd arg)).</p>
<p>The example returns a result in 0.589µs against your functions 25.250µs (µs = 1/1,000,000 second)</p>
<p>I did not test it against very large data sets nor did I look too deeply for a less complex solution.</p>
<p>To avoid creating a new array each time a larger max sum is found I use a counter <code>foundCount</code> as an index of where to put new closer indexes in the <code>result</code> array. When the function is done I just trim the array by setting its length to the found count.</p>
<pre><code>function currentHighest(a, b, max) {
    const lenA = a.length, lenB = b.length, result = [];
    var i = 0, j, foundCount = 0, maxFound = -Infinity;
    while (i &lt; lenA) {
        j = 0;
        const pA = a[i], valA = pA[1];
        while (j &lt; lenB) {
            const pB = b[j], sum = valA + pB[1];
            if (sum &lt;= max &amp;&amp; sum &gt;= maxFound) {
                if (sum !== maxFound) { foundCount = 0 }    
                maxFound = sum;
                result[foundCount++] = [pA[0], pB[0]];
            }
            j++;
        }
        i++;
    }
    result.length = foundCount;
    return result;
}
</code></pre>
    </div>