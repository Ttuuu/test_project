<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<pre><code>#include &lt;stdio.h&gt;

void get_bits(unsigned long long* num, char * out, int bytes);

int main(void)
{
    long long x = 0;

    printf("Enter a number: ");
    scanf("%lli", &amp;x);

    char bits[sizeof(unsigned long long)+1] = {0};
    get_bits(&amp;x, bits, 4);

    printf("%d in binary %s\n", x, bits);

    return 0;
}

//assumes char array of length 1 greater than 
//number of bits
//EDIT: VERSION WITHOUT MEMCPY AS REMINDED BY @REINDERIEN
//REMOVED aliasing issue
void get_bits(unsigned long long * num, char *out, int bytes)
{
    unsigned long long filter = 0x8000000000000000;
   // unsigned long long *temp = num;

    if(bytes &lt;= 0) return;
    if(bytes &gt; 8) bytes = 8;

    filter = filter &gt;&gt; (8*(sizeof(unsigned long long)-bytes));
    //memcpy(&amp;temp, num, bytes);
    int bits = 8*bytes;
    for(int i=0;i&lt;bits;i++) {
        //if(filter &amp; temp)
        //if((filter &gt;&gt; i) &amp; *temp)
        if((filter &gt;&gt; i) &amp; *num)
            out[i] = '1';
        else
            out[i] = '0';

        //temp = temp &lt;&lt; 1;
    }
    out[bits] = '\0';
}
</code></pre>

<h2>EDIT</h2>

<p>Void* removed</p>

<h2>Improvements</h2>

<p>The posted code requires several loops, divisions, and modulus calculations. While it does solve the problem of representing an integer in binary, the utility may be limited by additional clock cycles.  </p>

<p>The code may be optimized and extended to use with other integer representations, including char, short, or long long (or long depending on the size of long).</p>

<p>One drawback of the posted code is the need to reverse bits.  Utilizing a mask to filter which bits are set in the number is more efficient.</p>

<h2>Alternative Solution</h2>

<p>The function get_bits will accept any integer representation.</p>

<p>It will "return," really populate, a character array with up to a 64-bit bit representation of the number.</p>

<p>It <em>NO LONGER</em> relies on memcpy from string.h.</p>

<h2>Inputs for get_bits</h2>

<p>unsigned long long* *num : a pointer to the memory address of the number to be represented in 
            binary</p>

<p>char *out : the address of a character array to store the bit representation.<br>
            NOTE: This should be of length 1 longer than the number of bits to 
            be represented</p>

<p>int bytes : number of bytes containing the number to represent in binary</p>

<h2>Implementation</h2>

<p>Based on the size of the data type of the number to be represented, a mask is established with the highest bit set.  This is the variable, filter, of type unsigned long long contained in 64-bits.  The input number passed as an unsigned long long*.  Using bit shifting, the filter is shifted to the right to align it with the highest bit of the number.</p>

<p>Ex. In hexadecimal, a 16-bit filter would be 0x8000, which in binary is 100000000000000.</p>

<p>Only a single for loop is performed to populate the output string.  In each iteration of the loop, a bit-wise AND is performed with filter and *temp.  The result of this expression is either 0 or non-zero.  The result is 0 only, when the highest order bit of temp is 0.  The position in the output string is set to 1 if non-zero or 0 otherwise.</p>

<p>At the end of each iteration the filter is shifted incrementally by 1 more bit to the right.</p>

<p>Ex. In binary, if temp is 1010, then temp &lt;&lt; 1 is 0100. (a suitable filter would be 1000 in binary). </p>
    </div>