<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Stacking the <code>using</code> statements</h2>

<p>I am particularly difficult to please with code that has nesting, and I highly prefer to stack the <code>usings</code> when it is possible.</p>

<pre><code>using (SqlConnection connection = ...)
{
    using (SqlCommand command = ...)
    {
        ...
    }
}
</code></pre>

<p>versus</p>

<pre><code>using (SqlConnection connection = ...)
using (SqlCommand command = ...)
{
   ...
}
</code></pre>

<h2>Exception Handling</h2>

<p>You should include exception handling into your code, as it will likely throw an exception sooner or later (such as getting disconnected, network issues, etc.)</p>

<pre><code>using (SqlConnection connection = ...)
using (SqlCommand command = ...)
{
    try
    {
        // open the connection, execute, etc
    }
    catch
    {
        // log and handle exception(s)
    }
}
</code></pre>

<h2>Using Lists not Arrays</h2>

<p>It would likely do you more harm than good to be using an array, especially in the context of maintainable code. I would recommend you switch to using Lists, like this:</p>

<pre><code>List&lt;SqlParameter&gt; p = new List&lt;SqlParameter&gt;();
p.Add(new SqlParameter("@type", newType.Text));
p.Add(new SqlParameter("@name", newName.Text));
p.Add(new SqlParameter("@image", newImage.Text));
p.Add(new SqlParameter("@id", id));
</code></pre>

<p>This will let you introduce more items into your parameters without having to do deal with the headaches of explicitly indexing.</p>

<p><em>Note: If you want to keep the same method signature for your</em> <code>GetExample()</code> <em>method, then don't forget to pass the parameters as an array --- you could use</em> <code>ToArray()</code> <em>to accomplish that.</em></p>

<hr>

<p>Here it all is together...</p>

<pre><code>string query = "UPDATE [guitarBrands] SET type = @type, name = @name, image = @image WHERE id = @id";

using (SqlConnection connection = new SqlConnection(ConfigurationManager.ConnectionStrings["brandsConnection"].ToString()))
using (SqlCommand command = new SqlCommand(query, connection)
{
    try
    {
        // open the connection, execute, etc
        List&lt;SqlParameter&gt; p = new List&lt;SqlParameter&gt;();
        p.Add(new SqlParameter("@type", newType.Text));
        p.Add(new SqlParameter("@name", newName.Text));
        p.Add(new SqlParameter("@image", newImage.Text));
        p.Add(new SqlParameter("@id", id));

        connection.Open();
        GetExample(command, p.ToArray());
        command.ExecuteNonQuery();
        command.Parameters.Clear();
    }
    catch
    {
        // log and handle exception(s)
    }
}
</code></pre>
    </div>