<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Use <code>elseif</code> for mutually exclusive conditions</h3>

<p>In <code>tekengalg</code> there are multiple <code>if</code> statements that cannot be <code>true</code> at the same time:</p>

<blockquote>
<pre><code>if ($arg1 == 0) {
    // ...
}
if ($arg1 == 1) {
    // ...
}
if ($arg1 == 2) {
    // ...
}
// ...
</code></pre>
</blockquote>

<p>That is, after <code>$arg1</code> is known to be 0, then there's no need to evaluate <code>$arg == 1</code>, and so on. Replace the second and later <code>if</code> with <code>elseif</code>.</p>

<h3>Avoid flag variables when possible</h3>

<p>In <code>doorgaan</code>, <code>$boolret</code> is set to <code>true</code> when an <code>'*'</code> is found.
Its value never changes again.
Instead of setting <code>$boolret = true</code>, you could <code>return true</code> at this point.
This will have two nice effects:</p>

<ul>
<li>Stop looping as soon as possible. It's pointless to continue in the loop, it won't change the outcome of the function.</li>
<li>Eliminate a variable. If the end of the loop is reached, that means we never returned because we haven't found <code>'*'</code>, so you can <code>return false</code>. No need for the variable <code>$boolret</code>.</li>
</ul>

<h3>Avoid deeply nested statements</h3>

<p>Deeply nested statements like this can be hard to read:</p>

<blockquote>
<pre><code>if (ctype_alpha($input)) {
    if (strlen($input) == 1) {
        // ...
    } else {
        echo "U heeft meer dan één letter gekozen." . PHP_EOL;
    }
} else {
    echo "dit is geen geldige letter voor galgje." . PHP_EOL;
}
</code></pre>
</blockquote>

<p>In particular, when the main branch of an <code>if</code> is a long piece of code, then by the time you read the <code>else</code>, you might not remember well what it was about.
In such cases it can be interesting to invert the conditions, making the code flatter, and perhaps easier to understand:</p>

<pre><code>if (!ctype_alpha($input)) {
    echo "dit is geen geldige letter voor galgje." . PHP_EOL;
    continue;
}

if (strlen($input) != 1) {
    echo "U heeft meer dan één letter gekozen." . PHP_EOL;
    continue;
}

// ...
</code></pre>

<h3>Use more helper functions</h3>

<p>I find the <code>echo "..." . PHP_EOL</code> boilerplate tedious... I would create a helper function that appends <code>PHP_EOL</code>, so I don't have to repeatedly type that.</p>

<h3>Use better names</h3>

<p>It's important to use names that describe the values they represent,
and help readers understand the code.
For example <code>$arg1</code> doesn't describe that it's the number of failed guesses.</p>
    </div>