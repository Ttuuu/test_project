<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>Is the API easy to understand/implement by another user</p>
</blockquote>

<p>It depends on how it will be used I think. Maybe the API is just what you need in your project, but another user might want to have a function like <code>lookAt(const glm::vec3 &amp;position)</code> to point the camera at a specific point, or perhaps wants to set the field of view of a perspective camera as an angle, instead of having to specify a "zoom" level.</p>

<p>In particular, some functions set something to an absolute value, like <code>setPosition()</code>, others only do relative changes, like <code>rotate()</code>. It would be nice to have both relative and absolute setters for all parameters.</p>

<blockquote>
  <p>Are there any obvious mistakes made regarding performance</p>
</blockquote>

<p>I don't see any big performance issues. However, consider that once you construct a <code>CameraController</code>, you cannot change the type of the camera (i.e., if you constructed a perspective one, it will always be a perspective camera). So <code>m_camera</code> is always the same during the lifetime of a <code>Camera</code>. If it was not a pointer, but an actual <code>Camera</code> instead, you wouldn't have to pay the price of indirection.</p>

<p>You can do this by making <code>CameraController</code> templated, like so:</p>

<pre><code>template&lt;typename CameraType&gt;
class CameraController {
    public:
    CameraController(const CameraType::Params &amp;params);
    ...

    private:
    CameraType m_camera;
};
</code></pre>

<p>To handle the constructor taking different types of parameters, you have to define the parameter structs inside the implementation of the <code>Camera</code> classes, like so:</p>

<pre><code>class PerspectiveCamera: public Camera {
    public:
    struct Params {
        ...
    };

    PerspectiveCamera(const Params &amp;params);
    ...
};
</code></pre>

<p>But perhaps even better, just forget about <code>class CameraController</code>, and move its functionality into the base <code>class Camera</code>.</p>

<blockquote>
  <p>Are there any missing features you would suspect to be in a camera controller</p>
</blockquote>

<p>As mentioned above, a <code>lookAt()</code> function, <code>setFOV()</code> and <code>setRotation()</code>. Also, rotating based on an axis and an angle works for simple rotations, but as soon as you are combining rotations in different axes, things get weird. For a first-person shooter, you probably want to separate the rotation into an angle for the compass direction you are looking at (yaw), one for whether you are looking up or down (pitch), and finally one for how your head is tilted (roll). You want to keep these three values, and construct the rotation matrix from them using <code>glm::gtx::euler_angles::eulerAngleYXZ</code>.</p>

<p>For some applications, for example where you want to be able to rotate a sphere by clicking on a point an dragging it to a new position, you probably want to use <a href="https://en.wikipedia.org/wiki/Quaternions_and_spatial_rotation" rel="nofollow noreferrer">quaternions</a> to represent the current rotation.</p>

<blockquote>
  <p>Is the API consistent regarding code style and practices</p>
</blockquote>

<p>Apart from possible different ways to structure your code as mentioned above, it looks fine. Good use of <code>const</code>, references (except for the <code>float</code>s) and smart pointers.</p>
    </div>