<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Prefer functions and const variables over macros</h1>

<p>While the <code>LEN</code> macro might be unavoidable, <code>MIN</code> and <code>MAX</code> can typically be implemented as functions. This avoids problems with side-effects, because in your macros one of the arguments is always evaluated twice.</p>

<p>For the constants, declare <code>static const</code> variables, like:</p>

<pre><code>static const char *FONT = "-*-*-medium-*-*-*-14-*-*-*-*-*-*-*";
static int ITEMW = 130;
...
</code></pre>

<h1>Don't write what you don't use</h1>

<p><code>MIN</code> and <code>MAX</code> are not used in the code you posted, so it's better to remove them completely.</p>

<h1>Use consistent naming</h1>

<p>In your code, you sometimes write things out completely, in other cases you are abbreviating things. While overly long names might be detrimental, with autocompletion nowadays it should not be a problem to write somewhat long names. Things I would change:</p>

<ul>
<li><code>DC</code> -&gt; <code>DrawContext</code></li>
<li><code>ScreenGeom</code> -&gt; <code>ScreenGeometry</code></li>
<li><code>win</code> -&gt; <code>window</code></li>
<li><code>cursx</code> -&gt; <code>cursorx</code></li>
</ul>

<p>If you use all lower-case names, you might consider using underscores to separate words for extra clarity, such as <code>cursor_x</code>.</p>

<p>Also, when you have a pointer to something, don't use <code>p</code> for the name of the pointer, but rather choose a name that describes what is being pointed to. So instead of:</p>

<pre><code>struct Menu *p;
</code></pre>

<p>Write:</p>

<pre><code>struct Menu *menu;
</code></pre>

<p>In places where this results in conflicts, like in <code>setcurrmenu()</code>, consider renaming one variable to make the distinction clear, like:</p>

<pre><code>static void
setcurrmenu(struct Menu *new_currmenu)
{
    ...
    currmenu = new_currmenu;
    ...
}
</code></pre>

<p>Some abbreviations are commonplace, and it's fine to keep those, like <code>x</code>, <code>y</code>, <code>w</code> and <code>h</code> for coordinates and dimensions, and <code>i</code> and <code>j</code> for loop counters, <code>n</code> and <code>len</code> for counts.</p>

<h1>Declare variables as close as possible to the place of use</h1>

<p>A long time ago compilers needed all local variables to be declared at the top of a function, however nowadays that is not necessary. Consider declaring them at the place where they are first used. Also, you can declare variables inside <code>for</code> and <code>while</code>-statements. For example, you can write:</p>

<pre><code>for (struct Menu *menu = currmenu, menu != NULL; menu = menu-&gt;parent) {
    size_t nitems = 0;
    for (struct Item *item = menu-&gt;list; item != NULL; item = item-&gt;next) {
         ...
         int y = nitems * geom.itemh;
         ...
</code></pre>

<p>Note that you are already doing that in some places.</p>

<h1>Avoid forward declarations</h1>

<p>Your code starts with a list of forward function declarations, followed by the actual function definitions. However, this means you are repeating yourself unnecessarily. You can avoid forward declarations by reordering your functions. For example, <code>main()</code> calls <code>parsestdin()</code>, so by writing the definition of <code>parsestdin()</code> before that of <code>main()</code> you don't need the forward declarations.</p>

<p>Only in rare cases, like two functions both calling each other, should you need forward declarations.</p>

<h1>Have the parsing function take a <code>FILE *</code> pointer</h1>

<p>Instead of always reading from <code>stdin</code>, you can make the parser take a <code>FILE *</code> argument to allow it to read from other sources. This is very easy to do and makes the function much more generic.</p>

<h1>Simplify parsing by using convenient standard library functions</h1>

<p>You are parsing the input lines byte by byte. You can simplify it by using standard library functions like <code>strspn()</code> and <code>strtok_r()</code>, or alternatively <code>scanf()</code>. Here are two alternatives, the first using <code>str*()</code> functions:</p>

<pre><code>while (fgets(buf, BUFSIZ, stdin) != NULL) {
    /* Get the indentation level */
    size_t level = strspn(buf, "\t");

    /* Get the label */
    char *s = buf + level;
    char *saveptr = NULL;
    char *label = strtok_r(s, " \t\n", &amp;saveptr);

    /* Get the output */
    char *output = strtok_r(NULL, "\n", &amp;saveptr);
    if (output == NULL)
        output = label;
</code></pre>

<p>The second alternative uses <code>scanf()</code>, using the <code>%n</code> conversion to get the size of each element of the line, instead of copying the elements to separate buffers:</p>

<pre><code>while (fgets(buf, BUFSIZ, stdin) != NULL) {
    int level;
    int labelend;
    int outputstart;
    int outputend = 0;

    if (sscanf(buf, "%*[\t]%n%*s%n %n%*[^\n]%n", &amp;level, &amp;labelend, &amp;outputstart, &amp;outputend) &lt; 2)
        err(1, "error parsing input");

    char *label = buf + level;
    buf[labelend] = '\0';

    char *output = label;
    if (outputend &gt; 0) {
        output = buf + outputstart;
        buf[outputend] = '\0';
    }
</code></pre>

<h1>Split parsing the textual input and building internal data structures</h1>

<p>You are doing both in <code>parsestdin()</code> at the moment. But consider that in the future, you might want to programmatically build menus. In that case it makes more sense to have a function like <code>addmenuitem()</code> to add an item to an existing <code>struct Menu</code>.</p>

<h1>Avoid global variables</h1>

<p>Global variables are convenient at first, but as your projects grow, they become a burden. For example, what if you want to have two menus visible at the same time? Start by moving the global variables into <code>main()</code>, and if functions called by <code>main()</code>, either directly or indirectly, access the previously global variables, ensure you pass pointers to the local variables to these functions as arguments and return variables.</p>

<p>For example, <code>parsestdin()</code> should not use the global variable <code>rootmenu</code>, but rather declare a local one and return it at the end:</p>

<pre><code>static struct Menu *
parsestdin(void)
{
    struct Menu *rootmenu;
    ...
    return rootmenu;
}
</code></pre>

<p>Some functions can return by value, for example <code>calcscreengeom()</code>. Other functions should get passed information as parameters; for example <code>drawmenu()</code> should get <code>currmenu</code>, <code>dpy</code> and <code>dc</code> as parameters.</p>
    </div>