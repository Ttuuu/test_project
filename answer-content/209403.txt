<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Plenty of good answers have been given I'll just point out that 10 million is actually not a lot.</p>

<p>The square sum of digits of 9999999 is 7*81=567 and this is the largest sum you can get. So to determine if any up to 7 digit number ends up as 1 or 89 cannot require more than 567 iterations of computing the sum of squared digits.</p>

<p>Meaning that brute force 567*10M=5.67 G iterations of computing sum of digits squared will solve it. Sum of digits squared using the trivial integer division approach is 7 divisions with remainder, 6 additions and 7 multiples, plus loop overhead call it 30 instructions, so in total you'd need 5.67*30~=16G instructions.</p>

<p>For a typical desktop computer with 4 GHz one core turbo and IPC of 2 (which is pessimistic for modern x86 CPUs) that amounts to 8 G instructions per second, <strong>which means brute force should take around two seconds</strong> if my math isn't completely of the charts wrong.</p>

<p>So you can do a bunch of clever stuff but it won't save you more than two seconds of CPU time over just brute forcing it. And you can do much worse than brute force as OPs solution doesn't complete after a whole minute by computing ineffective sums, allocating a bunch of memory left right and center, generating permutations and what not.</p>

<h1>Edit: To prove my point:</h1>

<p>I implemented the brute force soloution:</p>

<h2>pe.cpp</h2>

<pre><code>#include &lt;iostream&gt;

int ssd(int n){
  int ans = 0;
  while(n){
    int d = n%10;
    n = n/10;
    ans += d*d;
  }
  return ans;
}

int main(int, char**){
  int n89 = 0;
  for(int n = 2; n &lt; 10000000; n++){
    int s = ssd(n);
    while(s != 1 &amp;&amp; s != 89){
      s = ssd(s);
    }
    if(s==89){
      n89++;
    }
  }
  std::cout&lt;&lt;n89&lt;&lt;std::endl;
}
</code></pre>

<p>And ran it, producing the correct solution in under half a second:</p>

<pre><code>$ g++ -O3 pe.cpp -o pe &amp;&amp; time ./pe
8581146

real    0m0.423s
user    0m0.423s
sys     0m0.000s
</code></pre>

<p>On my machine:</p>

<pre><code>$ cat /proc/cpuinfo | grep "model name" | tail -n 1
model name  : Intel(R) Core(TM) i7-8700K CPU @ 3.70GHz
</code></pre>
    </div>