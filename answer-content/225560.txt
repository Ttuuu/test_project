<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This is a review of your 2nd review request, described as a rewrite for python3.</p>

<p>Summary: code looks great! Much better than the older version.
Many changes I suggested for the old already appear in the new.
Thank you for turning mangling double <code>__</code> into private single <code>_</code> prefix.</p>

<pre><code>        0,aaa,b,c,dd (Bit Mapping)
</code></pre>

<p>The explicit "bit mapping" remark is very helpful, thank you,
a definite improvement in clarity over v1.</p>

<pre><code>    """Enumeration of the different types a record may represent."""
    ...
    """Enumeration of codes directories may specify for their type."""
    ...
    """Initialize the _Common instance's attributes."""
    ...
    """Initialize the Serializer instance's attributes."""
</code></pre>

<p>These docstrings are obvious so they don't really help out.
Consider deleting them.
I am not keen to write comments or docstrings that are
redundant with what identifiers tell us, for fear the code will change
and the remarks will lag behind (DRY).
The code should tell what is specific,
and remarks should offer vague generalities that aid comprehension.</p>

<pre><code>@enum.unique
</code></pre>

<p>Thank you, that <em>is</em> helpful.</p>

<pre><code>    POINTER_LENGTH = _BitField(4, 3)
</code></pre>

<p>Thank you, this is a <em>much</em> better way of explaining the meaning of each bit.
Very clear.
The shifting and bit twiddling is similarly much improved,
and it enjoys appropriate use of descriptive identifiers.</p>

<pre><code>    def _write(file, buffer):
        ...
        while True:
</code></pre>

<p>This method works and is clear.
There is an "early out" <code>break</code> for the normal case of whole thing written.
That seems like a premature optimization.
The natural looping condition would be what the docstring explains:
loop until written.
If we took out the <code>break</code> then the normal case would
assign <code>buffer = buffer[written:]</code>, which works out to <code>buffer = []</code>.
Seems pretty cheap to execute.
Then the looping condition would ask if bytes remain,
notice it's empty, and terminate.</p>

<p>Separate item. I'm looking at
<a href="https://docs.python.org/3/library/io.html#io.RawIOBase.write" rel="nofollow noreferrer">https://docs.python.org/3/library/io.html#io.RawIOBase.write</a> .
It explains:</p>

<blockquote>
  <p><code>None</code> is returned if the raw stream is set not to block and no single byte could be readily written to it.</p>
</blockquote>

<p>The code correctly throws if that happens.
But it seems hard to provoke that -- it's not clear to me your file
will ever be set to non-blocking.
I am reluctant to ship code that never executed, even if it is simple.
Consider deleting that clause.
(Put another way, I have found it very embarrassing to ship
an untested syntax error <strong>in my error handler</strong>.)</p>

<pre><code>    """Serializer(destination) -&gt; Serializer instance"""
</code></pre>

<p>Sorry, I'm still not understanding that.
PEP-8 asks for an English sentence here,
and I agree with the standard's sentiment,
that a full sentence may be more broadly understood
than powerpoint bullet points.
The only sense I can make of this would be appropriate for the ctor,
which has a different (obvious) docstring, and in any event this
docstring would be obvious and convey nothing new,
as it simply says what a constructor does.</p>

<p>I'm looking at <code>def run()</code>.
Now, maybe there's some parallel construction reason for using <code>run</code>
in both Serializer and Deserializer that I'm not yet seeing.
But, just reading your (very nice) docstring,
<code>dump()</code> would be the natural verb to use here.</p>

<p>Using <code>Path</code> is very nice.
The expression <code>pathlib.Path(source)</code> is slightly verbose --
it is usual to <code>from pathlib import Path</code>.</p>

<pre><code>    def run(self, source, keep_zombies=True):
        """Dump the source file or directory contents onto the destination."""
</code></pre>

<p>This is the first docstring I found inadequate.
Your audience is developers wanting to correctly</p>

<ol>
<li>call your method</li>
<li>interpret its results</li>
</ol>

<p>I honestly don't know what this whole <em>zombies</em> concept is about.
(It makes me think of a forked child that called exit
but parent has not yet <code>wait4</code>ed,
and I'm not yet seeing how that would be relevant.)
Please have the docstring, or at least a comment,
offer some guidance about why I might choose
a non-default <code>keep_zombies</code> setting,
and what the return value is for.</p>

<pre><code>        if self._started:
            self._write(self._stream, self.NULL_BYTE)
</code></pre>

<p>Sorry, I'm sure this relates to the SERIALIZATION_FORMAT
spec above, but I'm not yet seeing how a NULL_BYTE
delimits one section from another.
That is, I find this code obscure, I don't see how it fits with the spec.</p>

<p>An alternate approach might have <code>separator</code> be an empty bytestring
or one that holds a NULL_BYTE, so we can unconditionally write out <code>separator</code>.</p>

<pre><code>        """Serialize a directory."""
        ...
        """Serialize a file."""
</code></pre>

<p>The docstrings are clear and helpful.
They should be unnecessary, redundant with the method name,
except that curiously the method starts "acquire" rather than "serialize".
Not sure what the motivation was.</p>

<pre><code>            paths = tuple(source.iterdir())
</code></pre>

<p>This is not pythonic.
An arbitrary number of directory entries will come back.
Prefer <code>list</code> over <code>tuple</code> in such a case.
Assign <code>[]</code> at end of exception handler.</p>

<pre><code>        except OSError:
</code></pre>

<p>I wouldn't mind a <code>#</code> comment about "permission error",
if that is the chief concern here.</p>

<p>Ok, the concept of "zombies" is starting to become clearer.
An alternate name might be "failed transfers",
or maybe "denied files" / "unreadable files".</p>

<pre><code>        """Record the directory header byte using the correct format."""
</code></pre>

<p>The last part seems redundant --
it's not like we would try to do it incorrectly.</p>

<p>We're writing many bytes,
so prolly plural would be appropriate: <code>def _write_dir_header_bytes</code></p>

<pre><code>                file.seek(0, io.SEEK_SET)
</code></pre>

<p>I don't understand what this does.
It appears to be a no-op.</p>

<p>There's a bunch of <code>seek</code>ing here.
It's not obvious to me why that's more convenient
than repeatedly <code>stat</code>ing the file to see if things changed.</p>

<pre><code>    def finished(self):
</code></pre>

<p>This is nice enough.
Consider using a prefix with such a boolean predicate: <code>is_finished()</code></p>

<h1>documentation</h1>

<p>Tell us about zombies and their use cases.</p>

<p>Tell us about racy behavior,
such as when we serialize <code>/var/log/messages</code> and syslogd is appending to it.</p>

<h1>tests</h1>

<p>Supply unit tests that exercise the code.</p>

<h1>algorithm</h1>

<p>Consider relying on <code>stat</code> for current size, rather than <code>seek</code>.
(Calling <code>stat</code> obviously doesn't change your current location.)</p>

<p>You have <strong>quite a few</strong> <code>if</code>s that can <code>raise</code>.
It seems "hard" to trigger some of those.
The caller <em>still</em> has to expect that a Bad Thing can happen at any point,
lightning might strike, the filesystem could explode.
Rather than doing checks and raising your own error,
consider letting some FS errors just naturally propagate up,
and the caller can figure out which ones are important for him to catch.</p>

<p>Or, perhaps you could wrap such an error handler around your layer
so several <code>try</code>s become just one.
One is <em>much</em> easier to test!</p>
    </div>