<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Overall Feedback</h1>

<p>In general, the code looks good and is fairly easy to read. Most of the methods are concise and would lend themselves well to unit tests. I like the use of <code>const</code> by default for variables and only using <code>let</code> for the iterator variable <code>c</code>. </p>

<p>I do have a few recommendations described below that should improve certain aspects of it.</p>

<h1>Recommendations</h1>

<h3>Make <em>id</em> attribute unique</h3>

<p>The <code>id</code> attribute “must be unique in the whole document”<sup><a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/id" rel="nofollow noreferrer">1</a></sup>, so if you reuse that component, make the value for that attribute unique. It could be a parameter, use a static value (e.g. <code>"id_" + count++</code>), etc.</p>

<h3>Avoid the Toll cost of crossing the DOM bridge</h3>

<p><a href="https://i.stack.imgur.com/ybMID.jpg" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/ybMID.jpg" alt="bridge toll"></a></p>

<blockquote>
  <p><em>”...DOM access is actually pretty costly - I think of it like if I have a bridge - like two pieces of land with a toll bridge,  and the JavaScript engine is on one side, and the DOM is on the other, and every time I want to access the DOM from the JavaScript engine, I have to pay that toll”</em><br>
      - John Hrvatin, Microsoft, MIX09, in <a href="https://channel9.msdn.com/Events/MIX/MIX09/T53F" rel="nofollow noreferrer">this talk <em>Building High Performance Web Applications and Sites</em></a> at 29:38, also cited in the <a href="https://books.google.com/books?id=ED6ph4WEIoQC&amp;pg=PA36&amp;lpg=PA36&amp;dq=John+Hrvatin+%22DOM%22&amp;source=bl&amp;ots=2Wrd5G2ceJ&amp;sig=pjK9cf9LGjlqw1Z6Hm6w8YrWOio&amp;hl=en&amp;sa=X&amp;ved=2ahUKEwjcmZ7U_eDeAhVMGDQIHSfUAdoQ6AEwAnoECAgQAQ#v=onepage&amp;q=John%20Hrvatin%20%22DOM%22&amp;f=false" rel="nofollow noreferrer">O'Reilly <em>Javascript</em> book by Nicholas C Zakas Pg 36</a>, as well as mentioned in <a href="https://www.learnsteps.com/javascript-increase-performance-by-handling-dom-with-care/" rel="nofollow noreferrer">this post</a></p>
</blockquote>

<p>In your code I see two occurrences of <code>d3.select('#stacked-svg-tasks')</code> and one of <code>d3.selectAll('#stacked-svg-tasks')</code>. The last expression obviously works but the difference between <a href="https://github.com/d3/d3-selection#select" rel="nofollow noreferrer"><code>.select()</code></a> and <a href="https://github.com/d3/d3-selection#selectAll" rel="nofollow noreferrer"><code>.selectAll()</code></a> is that the former uses <a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelector" rel="nofollow noreferrer"><code>document.querySelector()</code></a> whereas the latter uses <a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelectorAll" rel="nofollow noreferrer"><code>document.querySelectorAll()</code></a>, which returns a <a href="https://developer.mozilla.org/en-US/docs/Web/API/NodeList" rel="nofollow noreferrer">NodeList</a> instead of a single element - somewhat overkill for getting an element using the id attribute.</p>

<p>In the <a href="https://github.com/d3/d3-selection#select" rel="nofollow noreferrer">d3 documentation for <code>.select(selector)</code></a> we see the following:</p>

<blockquote>
  <p>If the <code>selector</code> is not a string, instead selects the specified node; this is useful if you already have a reference to a node<sup><a href="https://github.com/d3/d3-selection#select" rel="nofollow noreferrer">2</a></sup></p>
</blockquote>

<p>Because you are using VueJS and have <code>ref="stacked-svg-tasks"</code> on the <code>&lt;svg&gt;</code> tag in the template, you have a reference to the target node! You can use <a href="https://vuejs.org/v2/api/#ref" rel="nofollow noreferrer">$refs</a> instead of querying the DOM each time to select that element. </p>

<p>So lines like this</p>

<blockquote>
<pre><code>const svg = d3.select("#stacked-svg-tasks");
</code></pre>
</blockquote>

<p>Could be updated like this:</p>

<pre><code>const svg = d3.select(this.$refs['stacked-svg-tasks']);
</code></pre>

<p>I would recommend switching to camelCase or at least something without the hyphens - </p>

<pre><code>&lt;svg 
  ref="stackedSvgTasks"
</code></pre>

<p>Then the dot notation (instead of bracket notation) can be used like below:</p>

<pre><code>const svg = d3.select(this.$refs.stackedSvgTasks);
</code></pre>

<p>Additionally, that reference <code>svg</code> could be stored when the component is mounted (e.g. in the <code>mounted method</code>) and re-used in other methods.</p>

<hr>

<h3>Don't Repeat d3 chains over and over again</h3>

<p>I know that idiomatic d3.js code typically has chained calls to methods like <code>.selectAll()</code>, <code>.data()</code>, <code>.enter()</code>, etc. And in the <code>chartBuilder()</code> method I see quite a few of those redundant chains. There are at least a few places where those common chains could be abstracted to a method. For instance, if a method was added like:</p>

<pre><code>applyDataToGroup(element, dataMap) {
  return element
    .selectAll('g')
    .data(dataMap)
    .enter()
    .append("g");
}
</code></pre>

<p>Then that could be used to greatly simplify the assignment of <code>barChartGroup</code>, <code>taskGroups</code>and <code>stageGroups</code>:</p>

<pre><code>const barChartGroup = this.applyDataToGroup(this.svg, [this.tasks])
  .attr("class", "bar-chart-group")
  .attr(
    "transform",
    `translate(${this.barChartGroup.x},${this.barChartGroup.y})`
  );

const taskGroups = this.applyDataToGroup(barChartGroup, t =&gt; t)
  .attr("class", (t, i) =&gt; `bar${i}`)
  .attr("transform", (t, i) =&gt; `translate(${this.xPosOfTasks[i]},0)`);

const stageGroupDataMapping = t =&gt; this.reconstructedStageData(t.taskStages);
const stageGroups = this.applyDataToGroup(taskGroups, stageGroupDataMapping)
  .attr("transform", (s, i) =&gt; this.getPosOfStage(s, i))
  .append("rect")
  .attr("width", this.stageWidth)
  .attr("height", s =&gt; this.yScale(s.totalTime))
  .attr("fill", (d, i) =&gt; (i % 2 === 0 ? "#66ccff" : "#99ff66"))
  .attr("style", "stroke:rgb(150,150,150);stroke-width:2");
</code></pre>

<p>While it would require adding two lines (to declare the method) and a couple extra function calls, it could reduce those 27 lines to the 19 above. To make that method simpler each of those blocks could be abstracted into separate methods.</p>

<p><sup>1</sup><sub><a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/id" rel="nofollow noreferrer">https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/id</a></sub><br>
<sup>2</sup><sub><a href="https://github.com/d3/d3-selection#select" rel="nofollow noreferrer">https://github.com/d3/d3-selection#select</a></sub></p>
    </div>