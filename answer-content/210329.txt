<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>I'm creating a django</p>
</blockquote>

<p>You probably mean that you're creating a web application on top of Django.</p>

<p>Given this code:</p>

<pre><code>items = []
for vote in choice.vote_set.all():
    if vote.user not in items:
        items.append(vote.user)
</code></pre>

<p>you should instead be able to do</p>

<pre><code>items = set(v.user for v in choice.vote_set.all())
</code></pre>

<p>This achieves the same goal - creating a collection of unique entries. The only catch is that order will not be preserved. If that's important, you'll have to do something more clever.</p>

<p>This:</p>

<pre><code>types = {}
for user in items:
    if user.userprofile.typeOfPerson not in types:
        types[user.userprofile.typeOfPerson] = Vote.objects.filter(Choice=choice).count()
</code></pre>

<p>apparently makes an effort to avoid overwriting entries in a dictionary, but I'm not clear on whether that's necessary. If order doesn't matter, and if <code>items</code> all have equal priorities, then you can make this much more simple:</p>

<pre><code>n_votes = Vote.objects.filter(Choice=choice).count()
types = {u.userprofile.typeOfPerson: n_votes for u in items}
</code></pre>

<p>This also assumes that <code>Vote.objects.filter(Choice=choice).count()</code> doesn't vary at all over the course of the loop.</p>

<p>This:</p>

<pre><code>percent = 0
for type, value in types.items():
    percent += value
if percent == 0:
    percent = 1
</code></pre>

<p>can be:</p>

<pre><code>percent = max(1, sum(types.values()))
</code></pre>

<p>This:</p>

<pre><code>values = {}
for type, value in types.items():
    if type not in values:
        values[type] = value / percent * 100
</code></pre>

<p>can probably just be</p>

<pre><code>values = {t: v/percent * 100 for t, v in types.items()}
</code></pre>

<p>Again, it's not clear why all three of your loops are attempting to be careful in avoiding rewriting values, or what the priority system should be.</p>
    </div>