<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Note</strong>: After posting my answer I found out that the question <a href="https://stackoverflow.com/q/55216278">is a duplicate of this question</a>.</p>

<h1>Readability</h1>

<ol>
<li>If you have no values then your code will error when you try to interact with <code>high</code>. You should define <code>high</code> outside the loop.</li>
<li>You should use a function so it's easier to test your code.</li>
<li>You should use full words for variable names.</li>
</ol>

<pre><code>def largest_orig_pretty(values):
    max_no = 0
    highest = []
    for value in values:
        if value &gt; max_no:
            max_no = value
            highest = [value]
        elif value == max_no:
            highest.append(value)
    return highest
</code></pre>

<h1>Performance</h1>

<p>This however isn't shorter or faster than your code.</p>

<p>When optimizing Python it's almost guaranteed that all C functions are faster than the Python equivalent. And so we can test some changes out:</p>

<ul>
<li>Remove <code>max_no</code> to make your code smaller.</li>
<li>Remove <code>max_no</code> and use <code>iter</code> to not incur <span class="math-container">\$O(n)\$</span> memory.</li>
<li>Try using <code>collections.Counter</code>, in the hopes it's written in C.</li>
<li><p>Use <code>list.sort</code> to sort the input so we can just take the first elements that are the same.</p>

<p>I did this in multiple ways:</p>

<ul>
<li>Using a for loop. <code>largest_sort</code>.</li>
<li>Using a functional/iterator approach, but using <code>lambda</code>. <code>largest_sort_semifunctional</code>.</li>
<li>Using a functional/iterator approach, using <code>functools.partial</code> and <code>operator.eq</code>. <code>largest_sort_functional</code>.</li>
</ul></li>
<li>Using <code>sorted</code> to not mutate the input list. And otherwise using the same code as <code>largest_sort</code>.</li>
<li><p>Using <code>max</code> and build a new list using <code>list.count</code>.</p>

<p>Most of the answers in the duplicate question derive from this method.</p>

<ul>
<li><a href="https://stackoverflow.com/a/55216417">Allan's answer</a> is the same as my original one. <code>largest_max_count</code>.</li>
<li><a href="https://stackoverflow.com/a/55216309">Ev.Kounis's answer</a> suggests using a comprehension to build the output list.</li>
<li><a href="https://stackoverflow.com/a/55216401">Daweo's answer</a> suggested not using <code>list.count</code> and instead use a list comprehension. There are two varients one when they use <code>max</code> once and one where it's used on every iteration.</li>
</ul></li>
<li><a href="https://stackoverflow.com/a/55254044">Grijesh Chauhan's answer</a> suggested storing only the value and a count, rather than building a list.</li>
</ul>

<p>I have not tested the output of these functions, only the timings. The sample data is also uniform, and so may not accurately describe the expected timings if this assumption is not true.</p>

<p><sub><strong>Disclaimer</strong>, <a href="https://pypi.org/project/graphtimer/" rel="noreferrer"><code>graphtimer</code></a> was written and is maintained by me. It is only to produce the graph.</sub></p>

<pre><code>import collections
import itertools
import operator
import functools

import matplotlib.pyplot as plt
import numpy as np

from graphtimer import Plotter, MultiTimer


def largest_orig(values):
    max_no = 0
    for i in values:
        if i &gt; max_no:
            max_no = i
            high = [i]
        elif i == max_no:
            high.append(i)
    return high


def largest_orig_pretty(values):
    max_no = 0
    highest = []
    for value in values:
        if value &gt; max_no:
            max_no = value
            highest = [value]
        elif value == max_no:
            highest.append(value)
    return highest


def largest_no_max(values):
    if not values:
        return []
    highest = [values[0]]
    for value in values[1:]:
        if value &gt; highest[0]:
            highest = [value]
        elif value == highest[0]:
            highest.append(value)
    return highest


def largest_no_max_iter(values):
    values = iter(values)
    highest = [next(values)]
    for value in values:
        if value &gt; highest[0]:
            highest = [value]
        elif value == highest[0]:
            highest.append(value)
    return highest


def largest_counter(values):
    if not values:
        return []
    c = collections.Counter(values)
    k = max(c)
    return [k] * c[k]


def largest_sort(values):
    if not values:
        return []
    values.sort(reverse=True)
    value = values[0]
    for i, v in enumerate(values):
        if value != v:
            return [value] * i
    return values


def largest_sort_semifunctional(values):
    if not values:
        return []
    values.sort(reverse=True)
    value = values[0]
    return list(itertools.takewhile(lambda i: i == value, values))


def largest_sort_functional(values):
    if not values:
        return []
    values.sort(reverse=True)
    value = values[0]
    return list(itertools.takewhile(functools.partial(operator.eq, value), values))


def largest_sorted(values):
    if not values:
        return []
    values = sorted(values, reverse=True)
    value = values[0]
    for i, v in enumerate(values):
        if value != v:
            return [value] * i
    return values


# Same as https://stackoverflow.com/a/55216417
def largest_max_count(values):
    if not values:
        return []
    maximum = max(values)
    return [maximum] * values.count(maximum)


# Derived from Ev. Kounis' answer: https://stackoverflow.com/a/55216309
def largest_max_count_comprehension(values):
    if not values:
        return []
    maximum = max(values)
    return [maximum for _ in range(values.count(maximum))]


# Derived from Daweo's answer: https://stackoverflow.com/a/55216401
def largest_max_comprehension(values):
    if not values:
        return []
    return [value for value in values if value == max(values)]


# Derived from Daweo's answer: https://stackoverflow.com/a/55216401
def largest_max_comprehension_once(values):
    if not values:
        return []
    maximum = max(values)
    return [value for value in values if value == maximum]


# Grijesh Chauhan's answer: https://stackoverflow.com/a/55254044
def largest_grijesh_chauhan(iterable):
    max = None
    count = 0
    for index, value in enumerate(iterable):
        if index == 0 or value &gt;= max:
            if value != max:
                count = 0
            max = value
            count += 1
    return count * [max]


def main():
    fig, axs = plt.subplots()
    axs.set_yscale('log')
    axs.set_xscale('log')
    (
        Plotter(MultiTimer([
            largest_orig,
            largest_orig_pretty,
            largest_no_max,
            largest_no_max_iter,
            largest_counter,
            largest_sort,
            largest_sort_semifunctional,
            largest_sort_functional,
            largest_sorted,
            largest_max_count,
        ]))
            .repeat(10, 10, np.logspace(0, 5), args_conv=lambda n: list(np.random.rand(int(n))))
            .min()
            .plot(axs, title='Maximums')
    )
    fig.show()

    fig, axs = plt.subplots()
    axs.set_yscale('log')
    axs.set_xscale('log')
    (
        Plotter(MultiTimer([
            largest_orig_pretty,
            largest_sort,
            largest_max_count,
            largest_max_count_comprehension,
            largest_max_comprehension,
            largest_max_comprehension_once,
            largest_grijesh_chauhan,
        ]))
            .repeat(10, 10, np.logspace(0, 3), args_conv=lambda n: list(np.random.rand(int(n))))
            .min()
            .plot(axs, title='Maximums max count derived')
    )
    fig.show()


if __name__ == '__main__':
    main()
</code></pre>

<p>Resulting in the following timings:</p>

<p><a href="https://i.stack.imgur.com/qoKQA.png" rel="noreferrer"><img src="https://i.stack.imgur.com/qoKQA.png" alt="Timings of the functions"></a></p>

<p>The following is a comparison of the SO answers:</p>

<p><a href="https://i.stack.imgur.com/JKJlR.png" rel="noreferrer"><img src="https://i.stack.imgur.com/JKJlR.png" alt="Comparison of SO answers"></a></p>

<h1>Conclusion</h1>

<ul>
<li><p>[Performance] <code>sort</code> is the fastest method when there are ~10 or more elements in the list. Despite the <span class="math-container">\$O(n\log{n})\$</span> big-O time complexity it's the fastest as it's written in C.</p>

<p>It mutates the input which may not be desirable, and using <code>sorted</code> destroys the performance gain.</p>

<p>Using a plain <code>for</code> loop is faster than <code>itertools</code>.</p></li>
<li>[Performance] Using <code>max</code> and <code>list.count</code> is the fastest method if you are not allowed to mutate the list.</li>
<li>[Size] Using <code>max</code> and <code>list.count</code> results in the smallest amount of lines of code.</li>
</ul>

<p>And so depending on your need I'd use either <code>largest_max_count</code> or <code>largest_sort</code>.</p>
    </div>