<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The obvious solution, replacing all values, is <span class="math-container">\$O(n)\$</span> - the trick is to do it in <span class="math-container">\$O(1)\$</span>. With that in mind, your approach makes sense - store the new 'all' value, and customize <code>get</code> so it knows whether it should return the actual value for a key or the 'all' value.</p>

<p>I wouldn't use insertion time for that, however - that'll lead to hacks like <code>Thread.sleep</code>. A counter field that is only incremented when you call <code>setAll</code> should work just fine.</p>

<p>I would also wrap <code>V</code> in a custom class that stores both <code>V</code> and the last-modified-counter-value, so <code>get</code> doesn't need to perform two hash-map lookups in the worst case.</p>

<hr>

<p>With that, <code>get</code> would look something like this:</p>

<pre><code>public V get(K key) {
    VWrapper wrapper = super.get(key);
    if (wrapper.counter &lt; setAllCounter)
        return setAllVal;
    return wrapper.value;
}
</code></pre>

<p>In your example, at the end keys 1 and 2 would have a counter value of 0 (they were added before any <code>setAll</code> call), 3 has a counter value of 1 (it was added after the first <code>setAll</code> call) and <code>setAllCounter</code> is 1 (<code>setAll</code> has been called one time).</p>
    </div>