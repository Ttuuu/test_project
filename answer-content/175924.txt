<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You've got a good use of <code>match</code> and some solid iterator usage, very nice!</p>

<ol>
<li><p>Your closures don't need to be closures -- they don't capture any environment. You can just make them functions (even defined inside the other function, if you'd like). Normally, prefer to define closures at the site of use, instead of as variables ahead of the use. This allows type inference to work on them more effectively (probably why you had to specify types for the closure arguments and return values).</p></li>
<li><p><a href="https://doc.rust-lang.org/std/str/struct.Chars.html#method.as_str" rel="nofollow noreferrer"><code>Chars::as_str</code></a> allows you to get the remainder of the underlying string, so you don't need to iterate though all the remaining characters.</p></li>
<li><p>The <a href="https://doc.rust-lang.org/std/macro.format.html" rel="nofollow noreferrer"><code>format!</code> macro</a> allows you to build a string from components in a nicer way.</p></li>
<li><p>The code doesn't handle empty strings (<code>unwrap</code> makes this easy to find); there's no reason to not handle them.</p></li>
<li><p>You don't need to create a new <code>String</code> in <code>folder</code>, just mark the incoming <code>String</code> as mutable</p></li>
</ol>



<pre><code>fn pigify_one(word: &amp;str) -&gt; String {
    let mut chars = word.chars();

    let first_char = match chars.next() {
        Some(c) =&gt; c,
        None =&gt; return String::new(),
    };

    match first_char {
        'a' | 'e' | 'i' | 'o' | 'u' =&gt; format!("{}-hay", word),
        _ =&gt; format!("{}-{}ay", chars.as_str(), first_char),
    }
}

fn folder(mut current: String, next: String) -&gt; String {
    if !current.is_empty() {
        current.push(' ');
    }
    current.push_str(&amp;next);
    current
}

fn pigify(text: &amp;str) -&gt; String {
    text.split_whitespace()
        .map(pigify_one)
        .fold(String::new(), folder)
}
</code></pre>

<hr>

<p>I'm a big fan of <a href="https://crates.io/crates/itertools" rel="nofollow noreferrer">itertools</a>, which provides methods like <code>join</code>:</p>

<pre><code>extern crate itertools;

use itertools::Itertools;

fn pigify(text: &amp;str) -&gt; String {
    text.split_whitespace()
        .map(pigify_one)
        .join(" ")
}
</code></pre>

<p>See <a href="https://stackoverflow.com/questions/36941851/whats-an-idiomatic-way-to-print-an-iterator-separated-by-spaces-in-rust">What's an idiomatic way to print an iterator separated by spaces in Rust?
</a></p>
    </div>