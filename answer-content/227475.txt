<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Review</h2>

<p>Well done, there isn't much I would change in this implementation. I would grant you the <em>humble badge</em> for putting yourself as <code>LowLevel</code> employee :) </p>

<p>The lazy and null pattern are well implemented (except a small issue that could possibly introduce null -&gt; see minor issues). The chain of responsibility looks to be by the book. You've even used a visitor pattern between the handler and the employee. Each specific employee yields different behavior handling a phone call.</p>

<p>Minor issues</p>

<ul>
<li><code>IPhoneCall</code> as interface seems overkill to me. This is just a POCO.</li>
<li>Check arguments against null in public entry points such as <code>public PhoneCallHandler(Employee employee)</code>.</li>
<li><code>GetPhoneCall</code> could be written more compact: <code>return _employee.Resolve(phoneCall) || _nextCallHandler.GetPhoneCall(phoneCall);</code>.</li>
<li><code>RegisterNext</code> should not allow null, as this bypasses your <code>EndOfChainHandler.Instance</code> pattern to avoid null handling.</li>
</ul>
    </div>