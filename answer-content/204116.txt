<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your code works correctly now (as far as I can tell). But due to  </p>

<pre><code>int temp = Math.Max( FindLargestSmallerKey(num, root.left), FindLargestSmallerKey(num, root.right));
</code></pre>

<p>it always traverses the entire tree. This can be improved:</p>

<ul>
<li>If <code>root.key &lt; num</code> then <code>root.key</code> is a possible candidate for the result,
better candidates can only exist in the right subtree.</li>
<li>Otherwise, if <code>root.key &gt;= num</code>, keys less than the given bound can only 
exist in the left subtree.</li>
</ul>

<p>That leads to the following implementation:</p>

<pre><code>public static int FindLargestSmallerKey(uint num, BstNode root)
{
    if (root == null) {
        return -1;
    } else if (root.key &lt; num) {
        int tmp = FindLargestSmallerKey(num, root.right);
        return tmp != -1 ? tmp : root.key;
    } else {
        return FindLargestSmallerKey(num, root.left);
    }
}
</code></pre>

<p>This is faster because at each step, only one subtree is inspected instead of both, so that the time complexity is limited by the <em>height</em> of 
the tree. If the tree is <em>balanced</em> then the result is found in <span class="math-container">\$ O(\log N) \$</span>
time where <span class="math-container">\$  N \$</span> is the number of nodes.</p>

<p>The same idea can be used for an <em>iterative</em> solution:</p>

<pre><code>public static int FindLargestSmallerKey(uint num, BstNode root)
{
    int result = -1;
    while (root != null) {
        if (root.key &lt; num) {
            // root.key is a candidate, continue in right subtree:
            result = root.key;
            root = root.right;
        } else {
            // root.key is not a candidate, continue in left subtree:
            root = root.left;
        }
    }
    return result;
}
</code></pre>

<p>I would also add a more comprehensive set of unit tests. Start with
the simplest trees, for example</p>

<pre><code>   10       10      10        10
           /          \      /  \
          5            15   5    15
</code></pre>

<p>and call your function with <code>num</code> from 1 to 20. That would already 
have helped to find the flaws in your initial implementation.</p>
    </div>