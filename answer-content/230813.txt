<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Welcome to code review.</p>
<h1>Style</h1>
<p>Check <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">PEP0008</a> the official Python style guide for maintaining code within Python acceptable standards.</p>
<ul>
<li><strong>Class names:</strong> Apart from the fact that this is a bad use of classes, class names should be <code>UpperCaseCamelCase</code> which implies that since this
<code>delete_duplicates</code> is a class, then the name should be <code>DeleteDuplicates</code>.</li>
<li><strong>Method/function/variable names:</strong> should be lowercase and words separated by underscores ex: <code>flagarray=[]</code> is <code>flag_array = []</code></li>
<li><strong>Space around operators:</strong> a space should be left on both sides of a binary operator: <code>a=[]</code> is <code>a = []</code> and <code>flagarray=[]</code> is <code>flag_array = []</code></li>
<li><strong>Descriptive variable names:</strong> names should reflect the objects they represent and not names like <code>j</code>, <code>c</code>, <code>i</code> which are confusing because <code>j</code> could be a variable, a string, a number ...</li>
<li><strong>f-strings:</strong> (Python 3.6 +) are better used for combining strings and variables in a single statement. ex: <code>print(str(c)+"ocuurs"+str(len(ca))+"times")</code> can be <code>print(f'{c!s} occurs {len(ca)} times')</code></li>
</ul>
<h1>Code</h1>
<ul>
<li><strong>Functions:</strong> A function is a block of code which only runs when it is called. You can pass data, known as parameters, into a function. A function can return data as a result. Since this a bad use of classes because a class is usually used for an object with multi-attributes and multi-methods and this is not the case here, you might use a regular function.</li>
<li><strong>Augmented assignment:</strong> Python supports augmented assignments ex: <code>i=i-1</code> is <code>i -= 1</code>, <code>count=count+1</code> is <code>count += 1</code> ...</li>
<li><strong>Semicolons:</strong> are for combining multiple short statements on the same line, this <code>j=0;</code> (line 15) is an invalid use of semicolons.</li>
<li><strong>Comparison to True and False:</strong> is usually done using <code>if something:</code> and <code>if not something_else:</code> ex: <code>flagarray[i]==False:</code> is <code>if not flag_array[i]:</code>. Non-empty sequences and non-zero variables evaluate to <code>True</code> ex: <code>if  len(ca)&gt;0:</code> is <code>if ca:</code></li>
<li><strong>Inefficiency:</strong> If you need to print duplicates of a list you shouldn't be entering each of the list members manually (what if you have a list of size 10,000,000 items? will you be manually entering one by one?)</li>
<li><code>Counter()</code> You could use counter dict from the <code>collections</code> library for counting list members</li>
</ul>
<p><strong>An improved version:</strong></p>
<p><strong>If you want to get duplicates and print them:</strong></p>
<pre><code>from collections import Counter


def get_duplicates(numbers: list):
    """Return list duplicates."""
    num_duplicates = Counter(numbers)
    return {item for item in num_duplicates if num_duplicates[item] &gt; 1}


if __name__ == '__main__':
    list_of_duplicates = [1, 2, 2, 3, 4, 3, 5, 2, 7, 1, ]
    print(get_duplicates(list_of_duplicates))
</code></pre>
<p><strong>If you want to delete duplicates then use a <code>set</code></strong></p>
<pre><code>print(set(list_of_duplicates))
</code></pre>
<p><strong>output:</strong> <code>{1, 2, 3, 4, 5, 7}</code></p>
    </div>