<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You should add <code>"""docstrings""""</code> for each public class and method, describing what it does and how to use it.</p>

<hr>

<h1><code>class Node</code></h1>

<p>This class has members <code>value</code> and <code>next</code>, which are not for use outside of the linked list implementation.  You should rename these member to <code>_value</code> and <code>_next</code>, to indicate they are "private".</p>

<p>Actually, <code>Node</code> itself is an implementation detail of the <code>LinkedList</code>, so you could name it <code>class _Node</code>, and/or encapsulate it within the <code>LinkedList</code> class itself.</p>

<pre><code>class LinkedList:
    """
    A data structure providing O(1)-time insertion/deletion of items
    to/from the head and tail of the list.
    """

    class _Node:
        def __init__(self, value=None):
            self._value = value
            self._next = None

    # ... remainder of LinkedList class ...
</code></pre>

<p>Consider using <code>__slots__</code> to make you <code>Node</code> class faster and consume less memory:</p>

<pre><code>    class _Node:
        __slots__ = ('_value', '_next')

        def __init__(self, value=None):
            self._value = value
            self._next = None
</code></pre>

<hr>

<h1><code>class LinkedList</code></h1>

<p>Why are you storing <code>self._args = args</code> in the constructor?  It is never used later on, so is just wasted storage.  The <code>if</code> statement is unnecessary, if <code>args</code> is an empty list, iterating over it will iterate zero times.  Simply use:</p>

<pre><code>        for val in args:
            self.append(val)
</code></pre>

<hr>

<p>Your indexing is complex enough for a special comment describing how they work,
so they are complex enough to benefit from a common normalization function.  Then you wouldn't need to always test for two values (<code>if index == value or index == value - self.size:</code>); just the one normalized value can be used (<code>if index == value:</code>).</p>

<hr>

<h2>Iteration</h2>

<p>Something that is always done for collections is iterating over all elements.  You should define an <code>__iter__(self)</code> method which returns an iterator for the collection.</p>

<p>Since iteration over a collection can be non-deterministic if the collection changes during iteration, you should track the number of times the collection is modified (insert/remove), memorize that value in the iterator when it is first created, and fast-fail the iterator if the value changes.</p>

<hr>

<h2><code>__repr__(self):</code></h2>

<blockquote>
  <p>Called by the repr() built-in function to compute the “official” string representation of an object. If at all possible, this should look like a valid Python expression that could be used to recreate an object with the same value (given an appropriate environment). If this is not possible, a string of the form &lt;...some useful description...&gt; should be returned.</p>
</blockquote>

<p>Your repr method could use <code>values.append(repr(cur_node.value))</code> and <code>return 'LinkedList(' + ', '.join(values) + ')'</code> to return a more compliant representation.</p>

<p>Or you could rename the method to <code>__str__(self)</code>, and leave the body unchanged.</p>
    </div>