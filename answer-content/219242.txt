<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There are a few places that you could have simplified.</p>

<ul>
<li><p>To count items and loop to find the end you can  use <code>while(p.next) { p = p.next, i++ }</code> with <code>p</code> after the loop holding the tail.</p></li>
<li><p><code>%</code> is calculated before <code>+</code> and <code>-</code> so  <code>size - (k % size) - 1</code> is the same as <code>size - k % size - 1</code></p></li>
<li><p>The last <code>while</code> can reuse <code>i</code> and count <code>i</code> down to zero to find the new tail, cutting the list after the <code>while</code> loop. Avoiding the need <code>for if(i++ === aim)</code> and the variable <code>aim</code></p></li>
<li><p>The creation of the variable <code>size</code> could be avoided by using <code>i</code> instead</p></li>
</ul>

<h2>Two alternatives</h2>

<p>I assume that the rotation is never left. Eg the rotate value is negative.</p>

<p>First constructing the list can be simplified as</p>

<pre><code>const node = (value, next) =&gt; ({value, next});
const head = node(0, node(1, node(2, node(3, node(4, node(5, node(6)))))));
</code></pre>

<p><strong>Note:</strong> I do not use <code>null</code> see second example below for why. However <code>null</code> as you have used it is semantically correct.</p>

<h3>Example A</h3>

<p>Avoiding having to count the items if no rotation there is an early exit. Apart from that the function uses the same logic you have used to rotate the list.</p>

<pre><code>function rotateList(node, rotate) {
    var tail = node, n = node, count = 1;
    if (rotate &gt; 0) {
        while (n.next) { n = n.next, count ++ }
        if (rotate % count) {
            count -= rotate % count + 1;
            while (count--) { tail = tail.next }
            n.next = node;
            node = tail.next;
            tail.next = undefined;
        }
    }
    return node;
}
</code></pre>

<h3>Example B</h3>

<p>Just for fun the next version cuts the list using destructuring. Note that the right side has two values and the left, three. <code>tail.next</code> will automatically be assigned <code>undefined</code>. If I used <code>null</code> I would need the right side to be <code>[node, tail.next, null];</code></p>

<pre><code>function rotateList(node, rotate) {
    var tail = node, n = node, count = 1;
    while (n.next) { n = n.next, count ++ }
    if (rotate % count) {
        count -= rotate % count + 1;
        while (count--) { tail = tail.next }
        [n.next, node, tail.next] = [node, tail.next];
    }
    return node;
}
</code></pre>
    </div>