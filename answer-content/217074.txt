<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The code itself is rather clear. There are some smaller changes I would make</p>

<h1>tuple unpacking</h1>

<p>You can use tuple unpacking to do:</p>

<pre><code>for code, *_ in ndiff(str1, str2):
</code></pre>

<p>instead of:</p>

<pre><code>for x in ndiff(str_1, str_2):
    code = x[0]
</code></pre>

<h1>dict results:</h1>

<p>Instead of a counter for the additions and removals, I would keep it in 1 dict:     <code>counter = ({"+": 0, "-": 0})</code></p>

<pre><code>def levenshtein_distance(str1, str2, ):
    counter = {"+": 0, "-": 0}
    distance = 0
    for edit_code, *_ in ndiff(str1, str2):
        if edit_code == " ":
            distance += max(counter.values())
            counter = {"+": 0, "-": 0}
        else: 
            counter[edit_code] += 1
    distance += max(counter.values())
    return distance
</code></pre>

<h1>generators</h1>

<p>A smaller, less useful variation, is to let this method be a generator, and use the builtin <code>sum</code> to do the summary. this saves 1 variable inside the function:</p>

<pre><code>def levenshtein_distance_gen(str1, str2, ):
    counter = {"+": 0, "-": 0}
    for edit_code, *_ in ndiff(str1, str2):
        if edit_code == " ":
            yield max(counter.values())
            counter = {"+": 0, "-": 0}
        else: 
            counter[edit_code] += 1
    yield max(counter.values())

sum(levenshtein_distance_gen(str1, str2))
</code></pre>

<hr>

<h1>timings</h1>

<p>The differences in timings between the original and both these variations are minimal, and within the variation of results. This is rather logical, since for simple strings (<code>aaabbbc</code> and <code>abcabcabc</code>) 90% of the time is spent in <code>ndiff</code></p>
    </div>