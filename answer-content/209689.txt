<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Style</strong></p>

<p>Python has a style guide called <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">PEP 8</a>. It is a good habit to try to follow it.</p>

<p>In your case, that would mean fixing the missing whitespaces, removing parenthesis in <code>if(result)</code>.</p>

<p>Also, you could get rid of old commented code and add a proper <a href="https://www.python.org/dev/peps/pep-0257/" rel="nofollow noreferrer">docstring</a> if you want to describe the behavior of the function.</p>

<p><strong>Tests</strong></p>

<p>It could be a good idea to write tests before trying to improve your code.</p>

<p>I wrote a very simple code but you could get this chance to dive into unit testing frameworks:</p>

<pre><code>TESTS = [
    (1456734512345698, False),
    (4539869650133101, True),
    (1456734512345698, False),
    (5239512608615007, True),
]

for (card_number, expected_valid) in TESTS:
    valid = validate_credit_card_number(card_number)
    assert valid == expected_valid
</code></pre>

<p><strong>Useless test</strong></p>

<p>At the end of the function, you can return directly:</p>

<pre><code>return final_sum % 10 == 0
</code></pre>

<p><strong>Useless variables</strong></p>

<p>The <code>my_list</code> variable is not required.</p>

<p>Also, we can take this chance to get rid of the variables at the end of the function:</p>

<pre><code>return (sum(t_list) + sum(list2)) % 10 == 0
</code></pre>

<p><strong>Conversion of <code>card_number</code></strong></p>

<p>At the beginning of the function, you could convert the parts of <code>card_number</code> directly to integer so that you do it in a single place.
Also, that removed the need to the call of <code>list</code>. We just have:</p>

<pre><code>temp_list = [int(c) for c in str(card_number)]
</code></pre>

<p>And we can get rid of the line:</p>

<pre><code>list2 = [int (n) for n in list2]
</code></pre>

<p>At this stage, the code looks like:</p>

<pre><code>def validate_credit_card_number(card_number):
    temp_list = [int(c) for c in str(card_number)]

    list1 = temp_list[-2::-2]
    list1 = [2 * n for n in list1]

    list2 = temp_list[::-2]

    t_list = list1

    for el in list1:
        sum_res = 0

        if el &gt; 9:
            idx = list1.index(el)
            t_list.pop(idx)

            while el:
                rem = el % 10
                sum_res += rem
                el = el // 10
            t_list.insert(idx, sum_res)

    return (sum(t_list) + sum(list2)) % 10 == 0
</code></pre>

<p><strong>Yet another useless variable</strong></p>

<p><code>t_list</code> aliases <code>list1</code> (I am not sure if this is intended if if you were planning to have a copy of <code>list1</code>). Whenever you update the list through one variable, the other is affected as well. I highly recommend <a href="https://nedbatchelder.com/text/names1.html" rel="nofollow noreferrer">Ned Batchelder's talk about names and values</a>.</p>

<p>In your case, we can get rid of <code>t_list</code> completely without changing the behavior of the function.</p>

<p><strong>Simplify list logic</strong></p>

<p>You go through multiple steps to modify <code>list1</code> (or <code>t_list</code>) : <code>index</code>, <code>pop</code>, <code>index</code>. These steps are more expensive/complicated than required. At the end of the day, you do not care about <code>list1</code>, you just want its final sum. You could keep track of the sum directly:</p>

<pre><code>sum1 = 0
for el in list1:
    if el &gt; 9:
        sum_res = 0
        while el:
            rem = el % 10
            sum_res += rem
            el = el // 10
        sum1 += sum_res
    else:
        sum1 += el

return (sum1 + sum(list2)) % 10 == 0
</code></pre>

<p>We can take this chance to perform the multiplication in the loop to remove a list comprehension.</p>

<p>Also, we can initialise the sum with <code>sum(list2)</code> so that we don't have to add them at the end:</p>

<pre><code>def validate_credit_card_number(card_number):
    temp_list = [int(c) for c in str(card_number)]

    list1 = temp_list[-2::-2]
    list2 = temp_list[::-2]

    total_sum = sum(list2)
    for el in list1:
        el *= 2
        if el &gt; 9:
            sum_res = 0
            while el:
                rem = el % 10
                sum_res += rem
                el = el // 10
            total_sum += sum_res
        else:
            total_sum += el

    return total_sum % 10 == 0
</code></pre>

<p><strong>Math logic</strong></p>

<p>The code uses 10 (the base used for computations) everywhere except for one 9 which seems unexpected. You could write: <code>el &gt;= 10</code> instead.</p>

<p>Also, that check is not required because the logic applies exactly the same way for elements smaller than 10:</p>

<pre><code>for el in list1:
    el *= 2
    sum_res = 0
    while el:
        rem = el % 10
        sum_res += rem
        el = el // 10
    total_sum += sum_res
</code></pre>

<p>Also, you could use <code>el //= 10</code> but you can get the best ouf of the Python builtins by using <a href="https://docs.python.org/3/library/functions.html#divmod" rel="nofollow noreferrer"><code>divmod</code></a> returning both the quotient and the remainder:</p>

<pre><code>    while el:
        el, rem = divmod(el, 10)
        sum_res += rem
    total_sum += sum_res
</code></pre>

<p>Then, it becomes clear that the variable <code>sum_res</code> is not really required as we could use <code>total_sum</code> instead:</p>

<pre><code>    while el:
        el, rem = divmod(el, 10)
        total_sum += rem
</code></pre>

<p><strong>"Final" code</strong></p>

<pre><code>def validate_credit_card_number(card_number):
    temp_list = [int(c) for c in str(card_number)]

    list1 = temp_list[-2::-2]
    list2 = temp_list[::-2]

    total_sum = sum(list2)
    for el in list1:
        el *= 2
        while el:
            el, rem = divmod(el, 10)
            total_sum += rem

    return total_sum % 10 == 0

TESTS = [
    (1456734512345698, False),
    (4539869650133101, True),
    (1456734512345698, False),
    (5239512608615007, True),
]

for (card_number, expected_valid) in TESTS:
    valid = validate_credit_card_number(card_number)
    assert valid == expected_valid
</code></pre>

<p><strong>More simplification</strong></p>

<p>Thinking about it, things can still be simplified a lot.
What you are doing with the <code>while</code> loop can be performed using <code>str</code> conversion:</p>

<pre><code>total_sum = sum(list2)
for el in list1:
    total_sum += sum(int(c) for c in str(2 * el))
</code></pre>

<p>Going further (too far?), this leads to:</p>

<pre><code>def validate_credit_card_number(card_number):
    temp_list = [int(c) for c in str(card_number)]

    list1 = temp_list[-2::-2]
    list2 = temp_list[::-2]

    total_sum = sum(list2) + sum(sum(int(c) for c in str(2 * el)) for el in list1)
    return total_sum % 10 == 0
</code></pre>

<p>Edit:</p>

<p><strong>More simplification</strong></p>

<p>We are using <code>str</code> and <code>int</code> to get the digits of a number... which is known to be smaller than 18 (2 * 9).
A trick could be, once again, to use <code>divmod</code> returning the quotient and remainder and use sum on it.</p>

<pre><code>total_sum = sum(list2)
for el in list1:
    total_sum += sum(divmod(2 * el, 10))
</code></pre>

<p>or</p>

<pre><code>total_sum = sum(list2) + sum(sum(divmod(2 * el, 10)) for el in list1)
</code></pre>

<p><strong>Playing with indices</strong></p>

<p>Instead of splitting the list into 2 lists, we could iterate over the (reversed) list once and handle differently elements at odd positions and elements at even positions.</p>

<p>We'd get something like:</p>

<pre><code>def validate_credit_card_number(card_number):
    temp_list = [int(c) for c in str(card_number)]

    total_sum = 0
    for i, e in enumerate(reversed(temp_list)):
        if i % 2 == 0:
            total_sum += e
        else:
            total_sum += sum(divmod(2 * e, 10))

    return total_sum % 10 == 0
</code></pre>

<p>Or the more concise solution taking advantage of the fact that the <code>divmod</code> trick works for both cases:</p>

<pre><code>def validate_credit_card_number(card_number):
    total_sum = 0
    for i, c in enumerate(reversed(str(card_number))):
        e = int(c) * (2 if i % 2 else 1)
        total_sum += sum(divmod(e, 10))
    return total_sum % 10 == 0
</code></pre>

<p>or </p>

<pre><code>def validate_credit_card_number(card_number):
    return sum(sum(divmod(int(c) * (2 if i % 2 else 1), 10))
               for i, c in enumerate(reversed(str(card_number)))) % 10 == 0
</code></pre>
    </div>