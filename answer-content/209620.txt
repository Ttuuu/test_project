<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>1. Review</h3>

<ol>
<li><p>There is no docstring for <code>ChannelDict</code>. The text in the post would make a good start.</p></li>
<li><p>A <code>ChannelDict</code> is not a dictionary (it doesn't support the mapping interface, <code>__getitem__</code> and <code>__setitem__</code> and so on), so the name is a bit misleading.</p></li>
<li><p><code>ChannelDict</code> is not specialized for channels: it would work for any kind of object. A name like <code>RandomQueue</code> would make it easier for the reader to understand the purpose of the code.</p></li>
<li><p><code>ChannelDict</code> inherits from <a href="https://docs.python.org/3/library/queue.html#queue-objects" rel="nofollow noreferrer"><code>queue.Queue</code></a> but has a different interface for initialization (it takes an iterable of channels instead of a maximum size). Perhaps this is convenient for your use case but it makes the code a little harder to understand because you can't just say "it's just like a Queue except that it gets items in random order", you have to explain the difference in initialization and that you can't set a maximum size.</p></li>
<li><p>The algorithm for getting a random item from the queue takes time proportional to the number of items, because <code>get_free_channels</code> has to loop over all the items looking for any that are free.</p></li>
<li><p><code>ChannelStatuses.UNDERFUNDED</code> is declared but not used.</p></li>
</ol>

<h3>2. Revised code</h3>

<p>One way to efficiently pick a random item (instead of looping over all the items) is to keep the available items in a list, and to swap the randomly selected item with the last item in the list before popping the selected item.</p>

<pre><code>from queue import Queue
from random import randrange

class RandomQueue(Queue):
    """Variant of Queue that retrieves items in a random order."""
    def _init(self, maxsize):
        self.queue = []

    def _qsize(self):
        return len(self.queue)

    def _put(self, item):
        self.queue.append(item)

    def _get(self):
        queue = self.queue
        i = randrange(len(queue))
        queue[i], queue[-1] = queue[-1], queue[i]
        return queue.pop()
</code></pre>
    </div>