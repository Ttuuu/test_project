<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Since there aren't any loops in your code that aren't waiting for the user to provide some input, it's probably way premature to talk about efficiency. Is your code measurably slow? Does it leave you hanging? If not, unless you have an unusual need, save questions on efficiency for later.</p>

<p>So let's talk about some more important things: readability and maintainability. Here are some tips on ways to improve the readability and maintainability of your code. These aren't hard rules that you should never break (especially the one on comments); they are guidelines on ways to make your life easier that you should learn to bend when the guideline makes things awkward instead.</p>

<p>I hope this helps, even though it may be a lot to take in all at once. Feel free to ask follow-up questions and get other opinions.</p>

<h2>Avoid Redundancy</h2>

<p>Redundancy can show up in many forms. One example of it is in your declaration of arrays, using code like <code>int betType[11] = {35, 17, 8, 11, 5, 2, 1, 1, 2, 1, 1};</code>. Unless there's something very special about the number 11, there's no reason to call it out. Instead just say <code>int betType[] = {35, 17, 8, 11, 5, 2, 1, 1, 2, 1, 1};</code> which will automatically determine the size of the array for you.</p>

<p>When you later check your bounds with <code>while (betChoice &lt; 1 || betChoice &gt; 11) {</code>, you can instead use a calculated size (<code>_countof(betType)</code> or <code>sizeof(betType)/sizeof(betType[0])</code>), or even use a <code>std::vector&lt;int&gt;</code> instead of an <code>int[]</code>, and check against the vector's <code>size()</code>.</p>

<p>This will help you avoid magic numbers that don't mean much later. After all, if someone asks you what's special about 11, would you think it's the number of available bet types? But if they asked what betTypes.size() meant, it would be easy to answer.</p>

<p>Another way redundancy shows up is in large blocks of repeating code. For instance, <code>case 1</code> and <code>case 2</code> have almost the same code. In fact I had to read it a couple times to find the part that was different. Sometimes this can be best handled by refactoring similar parts of code into functions, and passing parameters to them that control how they differ. Sometimes it's better just to extract the parts that are identical into simpler functions, and use them. I'll touch on this more below, but I certainly don't have <em>the</em> answer.</p>

<h2>Avoid Obfuscation</h2>

<p>In the code commented <code>Displays a large dollar sign</code>, there are a lot of casts from <code>int</code> to <code>char</code> so that <code>cout</code> prints the value as a character. But the characters in question are not that unusual. Just use the actual character you want to show, for example replacing </p>

<pre><code>cout &lt;&lt; endl &lt;&lt; "       " &lt;&lt; (char)36 &lt;&lt; (char)36 &lt;&lt; (char)36 &lt;&lt; (char)36 &lt;&lt; (char)36;
</code></pre>

<p>with</p>

<pre><code>cout &lt;&lt; endl &lt;&lt; "       $$$$$"
</code></pre>

<p>This will not only be easier to type or update, it will be easier to read.</p>

<h2>Avoid Comments</h2>

<p>This recommendation is somewhat controversial, but it begins to target your question about functions. Instead of commenting what a line of code does, comment how a block of code does something unusual. When you're first starting out, everything seems unusual, but eventually you will see patterns and only need to comment on things that are not common patterns.</p>

<p>But then, instead of commenting what a block of code does, give it a name instead by putting it in a function. For example, you have several cases where you ask how much the user wants to bet on a number, then loop until they enter a valid number. You could extract this loop into a helper function like this:</p>

<pre><code>int getBetAmount(int bankAccount)
{
    int betAmount;
    cin &gt;&gt; betAmount;
    while (betAmount &lt; 1 || betAmount &gt; bankAccount)
    {
        cout &lt;&lt; endl &lt;&lt; "You have $" &lt;&lt; bankAccount &lt;&lt; " in your bank account: $";
        cin &gt;&gt; betAmount;
    }
    return betAmount;
}

int _tmain() {
    : : :
    case 1:
        : : :
        cout &lt;&lt; endl &lt;&lt; "How much would you like to bet on the number" &lt;&lt; betNumber &lt;&lt; "? $";
        betAmount = getBetAmount(bankAccount);
        : : :
    : : :
    case 2:
        : : :
        cout &lt;&lt; endl &lt;&lt; "How much would you like to bet on the numbers" &lt;&lt; betNumber &lt;&lt; " and " &lt;&lt; betNumber + 3 &lt;&lt; "? $";
        betAmount = getBetAmount(bankAccount);
        : : :
}
</code></pre>

<p>Find some other code that doesn't change much and extract that into functions as well. For example, the code commented <code>Checks if player won or lost their bet</code>, I see creating a function you'd call like this:</p>

<pre><code>case 1:
    : : :
    bankAccout = awardWinnings(betNumber == randomNumber, betAmount, betOdds, bankAccount);
    break;
case 2:
    : : :
    bankAccount = awardWinnings(betNumber == randomNumber || betNumber + 3 == randomNumber, betAmount, betOdds, bankAccount);
    break;
</code></pre>

<p>After you make these changes, ideally the parts that are different will start to stand out, and the parts that are the same will have good names that tell you what they do even if they don't have a comment. And then you can more easily avoid incorrect comments like <code>case 2</code>'s <code>Check if number is valid (between 1 and 36)</code> that actually checks for 33.</p>

<p>You can also avoid comments by naming constants. Instead of starting with <code>int bankAccount = 500</code> and then 500 lines later referencing 500 to figure out your overall winnings, perhaps declare <code>const int StartingBankAccount = 500;</code> and use the name instead of the number in both places. If you decide to change the initial account wealth, this also helps ensure your ending summary remains correct.</p>

<h2>Avoid Bad Dice</h2>

<p>While this is a toy program, and a person is unlikely to play long enough for it to matter, <code>rand() % max</code> is a flawed approach to generating random numbers. It's flawed in ways too subtle for me to explain (I understand it, but not well enough to explain it). However Stephan T. Lavavej knows it much better and explains it in a video called <a href="http://channel9.msdn.com/Events/GoingNative/2013/rand-Considered-Harmful" rel="noreferrer">rand() Considered Harmful</a>; watch it and use the approach he recommends if you want a more uniformly distributed random number.</p>
    </div>