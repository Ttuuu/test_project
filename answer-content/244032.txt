<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You've got some answers to your initial questions, which you seem to be happy with, so I'm not going to address them.  There are some things that I noticed about your code, however which I think are worth mentioning.</p>
<h1>Tests</h1>
<ul>
<li><strong>Naming</strong> Consider losing 'test' from the front of your test names.  All the methods are annotated and in test class.  Having the word test at the front of the method name just adds noise.  Consider instead adding some indicator as to what it is you're testing for / the expected value.  <code>maxAbilityScore_aboveLowerBound</code>.  This will make it easier possible at a glance to see what the test is validating.  It doesn't make a lot of difference on these tests, however larger tests (which you have in your github) will be clearer.</li>
<li><strong>Size</strong> Tests should be aimed at testing one thing.  How small 'one thing' is, can be open to interpretation.  I tend to come down on the side of smaller is better, because if something breaks it's usually pretty clear what / why.  <code>testRollParameters</code> is really testing the number of sides on the die and also the number of dice to roll.  These seem like two separate things, so I'd probably break the test up.  This might be too small for some people, however if I look at your github, the <code>testGetModifier</code> method contains 4 asserts, with two of them inside a <code>for</code> loop, wrapped in a <code>while</code> loop.  This feels like it's testing too much and the intention of the test is lost.  Things like parameterised tests and good naming can help maintain the intention if you need to the same test for a different set of inputs.</li>
</ul>
<h1>Magic Numbers</h1>
<p>Consider</p>
<pre><code>public static int computeModifier(int value) {
    return value/2 - 5;
}
</code></pre>
<p>It may be that 2 and 5 make perfect sense to you, or it may be that they are based on some formula from a book, in which case having them as actual numbers might make sense.  However, I'm left wondering why 5, why not 4 or 6.  If a constant would make sense here, consider using it to make the calculation clearer.</p>
<h1>Fail flag / YAGNI</h1>
<p>The way you're using a parameter to determine failure behaviour adds unnecessary complexity to your <code>isValidAbilityScoreInput</code> method. Every time you encounter an error condition you have <code>if(fail) throw... else return false</code>.  This makes the intention of the code harder to follow.  Personally, I would rather see two functions <code>isValidAbilityScoreInput</code>, which returns <code>true/false</code> and <code>validateAbilityScoreInput</code>, which throws an exception if it's invalid. This makes it clearer to the caller what behaviour to expect and simplifies the method implementation.  This might seem like it's duplicating code, however you could implement it in a way to reduce this duplication.  Also, as it stands your code base only ever calls the method with <code>fail</code> set to <code>true</code>, so you only really need the 'throws exception' version currently.  Worry about the non-throwing version at the point that you actually need it...</p>
<h1>There can be only one...or can there?</h1>
<p>The way you're validating abilities will only flag up the first failing item.  Consider:</p>
<pre><code>for (Entry&lt;AbilityName, Integer&gt; entry : values.entrySet()) {
   if (entry.getValue() &lt; ValueParameters.MIN_ABILITY_SCORE
            || entry.getValue() &gt; ValueParameters.MAX_ABILITY_SCORE) {
       throw new IllegalAbilityScoreException(entry.getKey().toString(), entry.getValue());
   }
}
</code></pre>
<p>The check stops as soon as there is an entry that is invalid.  You have a similar approach when checking for mandatory values.  This might be acceptable / desired behaviour, however consider if it's worth collecting a list of failing abilities so that they can all be put into the exception.</p>
    </div>