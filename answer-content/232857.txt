<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You code looks mostly good to me. Adding docstrings to it would definitly make it even better.</p>

<hr>

<p><em>Comments about the Jaipur class</em></p>

<p><strong>Smaller functions</strong></p>

<p>It could be a good idea to write small functions to have a higher level of abstractions without any consideration for the implementation details.</p>

<p>For instance, you have <code>self._pile.pop()</code> in various places. It may be easier to understand if it was moved in a <code>def draw_card()</code> method (an additional idea could be to add an optional argument for the number of cards). That method could be called in the initialisation step as well.</p>

<p>Also, the <code>if self._pile: self.market[self.draw_card()] += 1</code> could be moved in a <code>add_card_to_market()</code> method.</p>

<p><strong>Duplicated code</strong></p>

<p>Another way to remove duplicated code could be to consider what is actually different from one situation to another.
In the case "when player takes camel", only the way to get the number of cards picked is different. For every other aspect, the logic is the same. We could write:</p>

<pre><code>    # When player takes camel, all camels in market must be taken
    pick_count = self.market[picked_commodity] if picked_commodity == Commodity.CAMEL else 1
    self.market[picked_commodity] -= pick_count
    for i in range(pick_count):
        self.add_card_to_marker()

    return (picked_commodity, pick_count)
</code></pre>

<p><strong>Using the Python tools</strong></p>

<p>In <code>pick_commodity</code>, you iterate over the <code>self.market</code> keys and then retrieve the associated values.
You could use <a href="https://docs.python.org/3.8/library/stdtypes.html#dict.items" rel="noreferrer">https://docs.python.org/3.8/library/stdtypes.html#dict.items</a> to iterate over both keys and values.</p>

<pre><code>        market_list = []
        for c, n in self.market.items():
            if n &gt; 0:
                market_list += [c] * n
</code></pre>

<p>Also, another aspect of the Counter class you are using is that you do not need to initialise things to 0.</p>

<p><strong>The part with 'empty'</strong></p>

<p>I must confess that the part <code>len(['empty' for i in self.price_tokens.values() if not i]) &gt;= 3</code> got me really puzzled. Where is this <code>'empty'</code> string coming from ?</p>

<p>Here, you build a list where only the length will be relevant, not its content. You could use <code>None</code> as the content.</p>

<pre><code>`len([None for i in self.price_tokens.values() if not i]) &gt;= 3`
</code></pre>

<p>Another option would be to just use sum to get the same value:</p>

<pre><code>`sum(not i for i in self.price_tokens.values()) &gt;= 3`
</code></pre>

<hr>

<p><em>Comments about the Player class</em></p>

<p><strong>Iterating over a different object</strong></p>

<p>In <code>get_state</code>, you use <code>for i in Commodity</code> in various places.</p>

<p>I think it would be more natural to iterate over the other object you are considering (<code>self.hand</code> or <code>self._game.market</code>).</p>

<p>For instance:</p>

<pre><code>    market_costly = sum([self._game.market[i] for i in Commodity if Commodity.is_costly(i)])
    market_non_costly = sum([self._game.market[i] for i in Commodity if (not Commodity.is_costly(i)) and (not i == Commodity.CAMEL)])
    market_camel = sum([self._game.market[i] for i in Commodity if i == Commodity.CAMEL])
</code></pre>

<p>would become</p>

<pre><code>    market_costly = sum(n for c, n in self._game.market.items() if Commodity.is_costly(c))
    market_non_costly = sum(n for c, n in self._game.market.items() if not Commodity.is_costly(c) and i != Commodity.CAMEL)
    market_camel = sum(n for c, n in self._game.market.items() if i == Commodity.CAMEL)
</code></pre>

<p>Even though that last line can be simplified considerably:</p>

<pre><code>    market_camel = self._game.market[Commodity.CAMEL]
</code></pre>
    </div>