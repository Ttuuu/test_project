<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There are several ways to do this. Let's look at the alternatives:</p>

<h1>Iterating over a copy, removing from original</h1>

<p>This is a simple solution for the underlying problem of your first code: A <code>ConcurrentModificationException</code> is thrown because you iterate through the list and removing from it at the same time.</p>

<p>Easy solution is to create a copy of the list and iterate through that.</p>

<pre><code>for (Integer integer : new ArrayList&lt;&gt;(nums)) {
    if (integer &lt; 3) {
        nums.remove(integer);
    }
}
</code></pre>

<p>Down-sides of this approach:</p>

<ul>
<li>Creates a copy of the original list, which requires memory and an operation which performance depends on the type of the list (ArrayList, LinkedList, etc.)</li>
<li>Additionally, <code>nums.remove(value)</code> is a <span class="math-container">\$O(n)\$</span> operation. Making this loop overall <span class="math-container">\$O(n^2)\$</span></li>
</ul>

<h1>Java 8 Streams</h1>

<pre><code>List&lt;Integer&gt; filteredList = nums.stream().filter(i -&gt; i &gt;= 3).collect(Collectors.toList());
</code></pre>

<p>Down-sides:</p>

<ul>
<li>Does not actually modify the existing list, so if references to the list are spread around various variables, you still have some old elements that just shouldn't be in that list.</li>
<li>Creates various stream-related objects which might not be the most effective option.</li>
</ul>

<p>On the up-side, this is among the fastest for bigger lists.</p>

<p><strong>If you're not using Java 8:</strong></p>

<pre><code>List&lt;Object&gt; originalList;
List&lt;Object&gt; newList = new YourFavoriteListType&lt;&gt;();
for (Object obj : originalList) {
    if (shouldKeep(obj)) {
        newList.add(obj);
    }
}
</code></pre>

<h1>Java 8 method</h1>

<pre><code>nums.removeIf(i -&gt; i &lt; 3);
</code></pre>

<p>Java 8 introduced the default method <code>removeIf</code> on the <code>Collection</code> interface. This allows different implementations to have implementation-specific performance-optimized implementations of this method.</p>

<h1>Iterator.remove()</h1>

<pre><code>Iterator&lt;Integer&gt; it = nums.iterator();
while (it.hasNext()) {
    Integer integer = it.next();
    if (integer &lt; 3) {
        it.remove();
    }
}
</code></pre>

<p>The only down-side of this approach is that you need to switch your for-each to a <code>while</code>. However, this approach is the most efficient one, especially for <code>LinkedList</code> where it is <span class="math-container">\$O(n)\$</span> (it's <span class="math-container">\$O(n^2)\$</span> for <code>ArrayList</code> because it has to copy array data on each <code>remove(index)</code> call). This is the approach I would recommend in most cases.</p>

<p>Note: Instead of using a while-loop it can also be written as:</p>

<pre><code>for (Iterator&lt;Integer&gt; it = list.iterator(); it.hasNext(); ) {
    Integer integer = it.next();
    ...
</code></pre>

<h1>Conclusion</h1>

<p>If you want to mutate the existing list, <code>removeIf</code> is the solution I would go with. If you like functional programming and prefer a new list instead of mutating the existing one, then go with the <code>list.stream().filter(...).collect(Collectors.toList())</code> approach.</p>

<h1>See also</h1>

<p><a href="https://stackoverflow.com/questions/322715/when-to-use-linkedlist-over-arraylist">"When to use LinkedList over ArrayList?" on Stack Overflow</a></p>
    </div>