<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ol>
<li><p>Pointer-arithmetic on <code>void*</code> is an error in standard c. Yes, gcc/clang have an extension assuming that <code>sizeof(void) == 1</code>. Ramp up your warning-level and specify the standard.</p></li>
<li><p>That's an interesting method to swap two blocks of memory.</p>

<p>Using a variable length array invites undefined behavior though, as the amount of stack requested is pretty much unbounded.</p>

<p>Anyway, it would probably be a good idea to implement it directly, without such a buffer.</p>

<pre><code>void memswap(void* a, void* b, size_t n) {
    unsigned char *c = a, *d = b;
    while (n--) {
        unsigned char x = *c;
        *c++ = *d;
        *d++ = x;
    }
}
</code></pre></li>
<li><p>I somewhat expected all the elements to be between <code>mem_low</code> and <code>mem_hi</code>. You seem to have an element at <code>mem_hi</code>.<br>
At least if you sort a null terminated string, it just sorts the terminator too.</p></li>
</ol>

<p>Did you try to run your code? See it break a basic test-case <a href="https://coliru.stacked-crooked.com/a/6cf415d6ca237932" rel="noreferrer">live on coliru</a>.</p>
    </div>