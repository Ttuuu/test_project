<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Why does <code>Rotate</code> return the modified root node as both a pointer parameter, and return it by value?  It should do one or the other.  Everywhere you call that function you assign the returned node to <code>Root</code>, which is also passed in as the first parameter.</p>

<p><code>RB_fixup</code> has a lot of duplicated code.  You can eliminate that by setting a variable to specify if you're working with the LEFT or RIGHT branch.</p>

<p><code>rb_insert</code> leaks memory if a value is already in the tree, since it would allocate a node, not store the pointer anywhere, and not free it up.  It would be better to not allocate <code>z</code> until you know you're going to use it.  You also call <code>rb_search</code> to see if the node exists, then essentially do the same thing again (while increasing the counts).  These could be combined into only one walk down the tree, and another back up to increase the counts if the node is added.</p>

<p>There's also a little inconsistency there, as you use a less than comparison in <code>rb_insert</code> but a greater than comparison in <code>rb_search</code>.  This can be a bit confusing.</p>

<p>I don't see why you're using <code>NIL_T</code>.  Everywhere you're using it will work just as well using <code>NULL</code>.  You compare node pointers to see if they're pointing to this special node, but you never dereference it.</p>
    </div>