<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Before we even get started into optimizations, I would like to point out a couple of things. First- <strong>many</strong> permutations of operands + operators are going to behave identically. There isn't a whole lot we can do to skip these, but in practice it seems that "similar" permutations are composed of "similar" components. That is, a handful of permutations of operands + operators that differ by 1 operand or operator will often have very similar input-&gt;output mappings. Some times you can take advantage of this to speedup your search. Sometimes the best solution is to do a completely random search of permutations to avoid the problem completely (at the cost of trying duplicate permutations). I won't explore either option below, but I wanted to mention them for completeness.</p>

<p>Secondly, you are trying to create a (int-&gt;bool) input-&gt;output mapping for 100 unique values. Even if we never tried two permutations of operands + operators that produce the same mapping, there's still 2^100 unique mappings to explore. That is not something that we can reasonably brute force. For 5 operands chosen (with replacement) from your 8 and 5 constants each in the range [0-99] inclusive, we have <code>8^5 * 100^5 == 3.27*10^14 == 2^48</code> permutations. Unless we are astronomically lucky, you're going to need to at least double your operand + argument count anyways. We need something smarter.</p>

<p>We need to try to prune the search space, but in order to do that we need to be able to determine early on whether a permutations is worth pursing. In the process of  restructuring your code to support such a heuristic, we're also going to gain a small performance boost. The following line of code is executed over and over for all 100 indices, and isn't going to change when you change <code>opB</code>, <code>opC</code>, and so on.</p>

<pre><code>int val = op(index, A, opA);
</code></pre>

<p>This logic also applies to <code>val = op(val, B, opB);</code>, and the others. This isn't too bad- you're only losing a factor of 5 in performance, but it needs to be changed anyways to give our algorithm some foresight. We can reorder your loops to put the argument and operand together, and then compute the intermediate values immediately-</p>

<pre><code>for (int A=1; A &lt; 2; A++) {
    std::cout &lt;&lt; A &lt;&lt; std::endl;
    for (int opA = 0; opA &lt; 8; opA++) {
        int valA[100];
        // compute val for all indices
        // Loop over B, C, D
</code></pre>

<p>This will allow us to compute the intermediate value of <code>val</code> exactly once- every time it is changed, rather than every time we change <em>any</em> operand / operator.</p>

<p>Now how does this help us prune the search space? Notice that for any mapping our operand constant is... constant. Together with the operator, they make a new (unary) operator. We can take this further as well- since all our new operators are "chained" together, they can be seen as one big (unary) operator.</p>

<pre><code>input &lt;operator&gt; &lt;operand_constant&gt;  =&gt; output
input &lt;new_operator&gt; output
...
input &lt;new_operator_A&gt; &lt;new_operator_B&gt; =&gt; output
input &lt;combined_operator&gt; =&gt; output
</code></pre>

<p>The <code>index</code> itself is the only input and each index is unique, but each intermediate value/output might not be unique. Regardless of the <code>index</code> value, if two intermediate operations produce the same intermediate value, then both will produce the same output value. We can use this to prune the search space. </p>

<p>If two values in the array are identical, then their corresponding bits in the original array must both be the same. If they are not, immediately attempt the next operator / operand value. If you reduce your computations to unsigned chars spanning <code>[0, 255]</code> inclusive, the probability of having two equal intermediate values is roughly <code>0.999999999827</code>. There will likely be <em>many</em> intermediate values with the same value, allowing you to quickly prune bad branches in the search tree.</p>

<p>To quickly determine if two values in the array cause a conflict, use an external array of size 256. When you compute an intermediate value <code>v</code>, check that <code>array[v]</code> is either uninitialized, or matches the desired output (map 0-&gt;1 and 1-&gt;2 maybe, and leave 0 to indicate uninitialized) and set the array element accordingly. If it doesn't match, then there's a conflict.</p>

<p>You could probably optimize this further by using a linked list to store the unique values of the array (every time <code>array[v]</code> is uninitialized), and then only check that those values are correct- avoiding redundant computations. </p>

<p>Even with this pruning, I suspect this will probably still be intractable. 2^100 is a <em>huge</em> number. You'll likely need to find a second way to check for "dead-end" branches, and/or an algorithmic breakthrough.</p>
    </div>