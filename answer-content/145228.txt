<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><em>Note:</em> At some point, this review drifted into the realm of assembler and GMP. An actual review is at the end of this post, whereas the first section discusses the runtime-problems concerning <code>pow</code>, wrong data types and arbitrary large integers.</p>

<h1>No life time for run time</h1>

<blockquote>
  <p>Would there be any way (on my current machine) to get this to run in my lifetime?</p>
</blockquote>

<p>There's a great saying in carpentry: measure twice, cut once. It concerns cutting wood or other material, where you have to throw away your resources if you accidentally cut at the wrong place.</p>

<p>A similar saying is there for software engineers: <em>you can't optimize what you can't measure.</em> There are several ways to measure your code, e.g. benchmarking, profiling, or looking at the generated as­sembler to see how many instructions a certain part of your code will take.</p>

<p>Here, we will take the latter route, start with the assembler, take considerations step by step and see where we end up.</p>

<h2>A study in assembly</h2>

<p>Lets have a look at your code. Well, not yours, but the assembler the compiler generates. You can use <code>gcc -S -O3</code>. <a href="https://www.godbolt.org/#z:OYLghAFBqd5QCxAYwPYBMCmBRdBLAF1QCcAaPECAKxAEZSAbAQwDtQB9T5UgZ1QFdiyTCADkAenEBqAMIyAtACEAmvIDKAQRBSAiv0w8CeVCykAjAJ5SpGvFhYIqVKSdkZMUgEqYAbnkwA7lJqBEzIANbYAB7ICKzAmAB0AKQADBqSUggEBAAOPCCSaFjEvv4BiYZh4ZgxcWxJaAC24gCO%2BobGLDzitAAsAKwATEO04vg8ucSofmzymPwMmMTyU6i5qDyEXfKWu8T8BJjyAGYkwvJ4LPLIaRrJQwDMV8gM/FhSyY8yhvioiQgvtg7g9nixXu8PF8ZEYmklAY9gelQS83h9oU0mAQEACgSD0lcCFI1rkIAwTMApISbKQpOS2FSWETFLT6ZTqTJWRTGUSACIASk%2BAHZFHdrNZSgRBKYIBsAhANLS%2BoKHopiah5SypMrPkM1XKIJztSrHryvrz1fLeUr%2BfyvqLkUKzciCUypJirhAVSKxeK2TypExaWZadwpOh7b7rK9UBF2ESCJH0uKpETzVIYxEvUn7snxWdiFIIExPqapLR7YHSzJy6k63XK0xVarvQ6NCmUwWi2ZSxaK481T3oVJHvWGwPzM29a2ox3OyQi8he%2BXK0vhwMx6lV1PFDO83OD1IuxB0Mv%2B2rT%2BvN5WI3qW8K24en%2BK8CciyTi8HQ7T0LbZ8/nymQkTggB4hgAMQAeQAVQAOQtABJAAVMAwGSAYZBYEt0weAYGAjDCWCHMtcPw9DMLXEihjwgjMMvKiaPIlgwNpINzG/cM7QHf8AOSJ0eOfV8i1QiBbmo2h6z/fcALnICmRAsDsIY/Dg2XUj0FDNTqJU1M8DhLSBhOHgmJYwMvwzWkoHQAQzCWflRPJLNBXkVNbXEGQABlIJkABpNR2AABWwTx2DUbAZC4x9eP46TDzkggFJGJSLXU1ScO0jTdP09LDOMwjTLYkMixPGy7Ic2Nwi9KQXIINzPO8vzAuC0LwsigThWddsD3ixKhmS3UaNpWEoQYoyTJGVjLJK/hbMwezM0q5zXP5dyvN8/ygpCsKIpzFM%2BM6kEnVEflGDEAZRFIFgxFSC7UDEGs%2BEEYRdUeWgLoIa7jpO8IQA3U7RD6C6rtEG7SDu0QLoKVJSA%2BkHjtIOBYCQZpcjwJYyAoUTUCaVH0ZQYAAE56BONGjmIAoIDMT7SDMK4mGICwxDe0hmjhJlIJYBhGbh0gsExNglmp/BSmQIwfAManakwZBDhEURmcJTAGGphg8DMYh6YsGR3CZ97iD03WTuYNgQE4dhuFVswCkgE71iMEwClEeRIMeSGBCEERaCNs6gep8GogADgANnkIO%2BikYBkCXAnEloItcEIBdQXoNwcbR5YXq92R3s%2B21SB%2Bv7lYB32efByGQGh2GbrzouhhL0Gy5h3OTvF8muhAPogA" rel="nofollow noreferrer">On my platform, this results in the following "hot" section in <code>main</code></a>:</p>

<pre><code>.L6:
        add     rbx, 1
        cmp     rbx, 500000
        je      .L18
.L8:
        mov     rax, QWORD PTR .LC0[rip]
        movsd   xmm0, QWORD PTR [rsp+40]
        movq    xmm1, rax
        call    pow                        ; (1)
        mov     rax, QWORD PTR .LC0[rip]
        movsd   QWORD PTR [rsp+8], xmm0
        movsd   xmm0, QWORD PTR [rsp+48]
        movq    xmm1, rax
        call    pow                        ; (2)
        mov     rax, QWORD PTR .LC0[rip]
        movsd   QWORD PTR [rsp+16], xmm0
        movsd   xmm0, QWORD PTR [rsp+32]
        movq    xmm1, rax
        call    pow                        ; (3)
        mov     rax, QWORD PTR .LC0[rip]
        movsd   QWORD PTR [rsp+24], xmm0
        pxor    xmm0, xmm0
        cvtsi2sd        xmm0, rbx
        movq    xmm1, rax
        call    pow                        ; (4)
        movsd   xmm2, QWORD PTR [rsp+8]
        addsd   xmm2, QWORD PTR [rsp+16]
        movapd  xmm1, xmm0
        movsd   xmm0, QWORD PTR [rsp+24]
        addsd   xmm0, xmm2
        ucomisd xmm0, xmm1
        jp      .L6
        jne     .L6
</code></pre>

<p>Even though you might not know assembler, you can see those four calls to <code>pow</code>. The first thing you need to know is that <code>call</code> is slow compared to those other operations. Those four <code>call</code>s happen in the innermost loop. The compiler removed the <code>call</code> to <code>prop</code> and instead replaced it by its code (that's faster).</p>

<p><code>mov*</code> assigns values to registers, <code>add*</code> adds values, and so on. The registers with <code>xmm*</code> are double precision registers, meant for <code>double</code> variables. So we're basically calling <code>pow</code> with the right values and then add, subtract and modify our small little double values.</p>

<h2>Double trouble</h2>

<p>But wait a second. We're trying to solve a completely integral problem! Why does our generated program use those registers at all?</p>

<p>This should raise a red flag. And indeed, if we remember <a href="http://en.cppreference.com/w/c/numeric/math/pow" rel="nofollow noreferrer"><code>pow</code>'s signature</a>, it should be clear that it's not the right tool. It takes a double base and exponent, which indicates that it's suitable for terms like <span class="math-container">\$15.12151^{3.1415926}\$</span>. This is a total overkill for your problem.</p>

<h2>Using proper functions</h2>

<p>So let's use another <code>pow</code> version instead:</p>

<pre><code>long int pow4(long int x){
    return x * x * x * x;
}
</code></pre>

<p>Note that your compiler should create something like this from that:</p>

<pre><code>movq    %rdi, %rax
imulq   %rdi, %rax
imulq   %rax, %rax
ret
</code></pre>

<p>but if your compiler doesn't recognize this potential (micro) optimization, you can use</p>

<pre><code>long int pow4(long int x){
    const long int t = x * x;
    return t * t;
}
</code></pre>

<p>instead.</p>

<p>We also need to change <code>prop</code>:</p>

<pre><code>int prop(long int A, long int B, long int C, long int D) {
  return (pow4(A) + pow4(B) + pow4(C) == pow4(D));
}
</code></pre>

<p>Allright. Now, before I show the times of the new program, let's check the output of your old one:</p>

<pre>a = 1, b = 1, c = 1000, time = 114.156000s</pre>

<p>That's when I hit ^C. How does the one using <code>pow4</code> hold up?</p>

<pre>a = 1, b = 1, c = 1000, time = 0.296000s
a = 1, b = 1, c = 2000, time = 0.578000s
a = 1, b = 1, c = 3000, time = 0.859000s
a = 1, b = 1, c = 4000, time = 1.140000s
a = 1, b = 1, c = 5000, time = 1.421000s
a = 1, b = 1, c = 6000, time = 1.703000s
a = 1, b = 1, c = 7000, time = 1.984000s
a = 1, b = 1, c = 8000, time = 2.265000s
a = 1, b = 1, c = 9000, time = 2.546000s
a = 1, b = 1, c = 10000, time = 2.828000s
a = 1, b = 1, c = 11000, time = 3.109000s
a = 1, b = 1, c = 12000, time = 3.390000s
a = 1, b = 1, c = 13000, time = 3.687000s
a = 1, b = 1, c = 14000, time = 3.968000s
a = 1, b = 1, c = 15000, time = 4.250000s
a = 1, b = 1, c = 16000, time = 4.531000s</pre>

<p>Which is 0,2% of your original time, or a 500x speedup.</p>

<p><strong>However</strong>, this comes at a cost: <code>pow4(500000)</code> is too large for a <code>int64_t</code>, since <span class="math-container">\$\log_2(500000^4) \approx 76\$</span>. The greatest number you could check with a <code>uint64_t</code> is 65535, <span class="math-container">\$2^{16}-1\$</span>, which shouldn't be very surprising. As the standard does not provide <code>int128_t</code> or similar, you should make sure that your numbers don't exceed those bounds.</p>

<p>You can either write your own large integer logic for this, or use GMP.</p>

<h2>Proper bounds and parameter estimation</h2>

<p>Next up, you can increase the lower bounds of <code>b</code> and <code>c</code>, so that <span class="math-container">\$a \le b \le c\$</span>. And for <code>d</code>, well, if we have <code>a</code>, <code>b</code>, <code>c</code>, then there is only one solution for <code>d</code>. We can directly search for that solution with binary search.</p>

<p>The binary search makes a <span class="math-container">\$\mathcal O (n^3 \log n)\$</span> algorithm from your current <span class="math-container">\$\mathcal O (n^4)\$</span> one, which should provide a lot more speed than the previous speedup.</p>

<p>Even better, if you used the appropriate bounds for <code>a</code>, <code>b</code> and <code>c</code>, we can bound <code>d</code> by</p>

<p><span class="math-container">$$d^4 = a^4 + b^4 + c^4 \le c^4 + c^4 + c^4 = 3c^4$$</span></p>

<p>and therefore get</p>

<p><span class="math-container">$$c \le d \le \sqrt[4]{3}\,c.$$</span></p>

<p>With the proper binary algorithm,you can finish the first <code>a=1</code>,<code>b=1</code> case quickly:</p>

<pre>…
a = 1, b = 1, c = 481000, time = 0.031000s
a = 1, b = 1, c = 482000, time = 0.031000s
a = 1, b = 1, c = 483000, time = 0.031000s
a = 1, b = 1, c = 484000, time = 0.031000s
a = 1, b = 1, c = 485000, time = 0.031000s
a = 1, b = 1, c = 486000, time = 0.031000s
a = 1, b = 1, c = 487000, time = 0.031000s
a = 1, b = 1, c = 488000, time = 0.031000s
a = 1, b = 1, c = 489000, time = 0.031000s
a = 1, b = 1, c = 490000, time = 0.031000s
a = 1, b = 1, c = 491000, time = 0.031000s
a = 1, b = 1, c = 492000, time = 0.031000s
a = 1, b = 1, c = 493000, time = 0.031000s
a = 1, b = 1, c = 494000, time = 0.031000s
a = 1, b = 1, c = 495000, time = 0.031000s
a = 1, b = 1, c = 496000, time = 0.031000s
a = 1, b = 1, c = 497000, time = 0.031000s
a = 1, b = 1, c = 498000, time = 0.031000s
a = 1, b = 1, c = 499000, time = 0.031000s
a = 1, b = 1, time = 0.031000s</pre>

<p>Which brings us back into the realm of your lifetime.</p>

<h3>Exercise</h3>

<p>Write a function, that given <code>a</code>, <code>b</code> and <code>c</code> checks whether there exist a <code>d</code>, such that your property holds. It should return <code>-1</code> if there does not exist such a <code>d</code>, and the <code>d</code> otherwise.</p>

<p>Use that function in your code. Make sure that you need roughly <span class="math-container">\$\log d_{\text{max}}\$</span> iterations in that function.</p>

<h3>Important remark about integer sizes</h3>

<p>Keep in mind that <code>long int</code> is usually just a 64 bit integer, which means that the largest integer you can store is <span class="math-container">\$2^{63}-1\$</span>. Integer types with more bits have greater bounds, but are platform specific. Also, multiplication <em>can</em> be a tad slower, since multiplying 128bit numbers isn't as easy as multiplying 64bit numbers.</p>

<p>See the next section how to get multiplications down.</p>

<h1>An actual review</h1>

<p>Our <code>pow4</code> is now essentially two multiplications. However, we're still using <code>pow4</code> too often. After all, we don't need to recalculate <span class="math-container">\$a^4\$</span> in every iteration. The compiler happily does, since it doesn't optimize aggressively enough.</p>

<p>Which brings us to the actual review: your code is cleanly written, easy to read and to understand. Unfortunately, well-written, modular code often doesn't squeeze the last bit (heh) out of your hardware, unless your compiler/runtime is very smart (and thus often expensive).</p>

<p>So let's get back to the drawing board for a final review of your code:</p>

<h2>Includes</h2>

<pre><code>#include &lt;stdio.h&gt;
#include &lt;time.h&gt;
#include &lt;math.h&gt;
</code></pre>

<p>I would sort them by name, but that's fine. You don't include anything that's not necessary, nor did you forget something (and got saved by a non-standard compliant compiler).</p>

<h2>Declaration</h2>

<pre><code>int main() {
    long int a, b, c, d;
    clock_t t;
    t = clock();
</code></pre>

<p>Depending on whether you write ANSI-C or C99, I would defer declaration of variables as long as possible. For example, at the moment it's easy to accidentally change <code>c</code> to some bogus value, or forget a <code>{</code> and accidentally check the <code>prop</code> after the loops or similar:</p>

<pre><code>for (a = 1; a &lt; 100000; a++) 
    for (b = 1; b &lt; 300000; b++) 
        for (c = 1; c &lt; 500000; c++) 
            for (d = 1; d &lt; 500000; d++) 
                printf("inner loop");
                if (prop(a,b,c,d))
                    printf("FOUND IT!\na = %ld\nb = %ld\nc = %ld\nd = %ld\n", a, b, c, d);
</code></pre>

<p>Whoops. The <code>if</code> doesn't get checked, and you don't get a warning (in older compiler versions; new ones do warn about possible whitespace issues). If you declare your variables later (e.g. C99-style), errors like that cannot happen (although it introduces possible shadowing):</p>

<pre><code>for (long int a = 1; a &lt; 100000; a++) 
    for (long int b = 1; b &lt; 300000; b++) 
        for (long int c = 1; c &lt; 500000; c++) 
            for (long int d = 1; d &lt; 500000; d++) 
                printf("inner loop");
                if (prop(a,b,c,d))
                    printf("FOUND IT!\na = %ld\nb = %ld\nc = %ld\nd %ld\n", a, b, c, d);
</code></pre>

<p>This will now lead to a compiler error, since <code>a</code>, <code>b</code> and so on are out of scope. Either way, that depends on the language standard you want to use. Some people prefer one way, others the other one. Choose yours.</p>

<h2>Types</h2>

<p>Given that all values should be strictly greater than zero, <code>long int</code> is not the appropriate type, as it can be negative. We should accommodate that. However, instead of using <code>long unsigned int</code> through­out our code, let's use a type synonym in case we want to change it later to a type with a greater range:</p>

<pre><code> typedef long unsigned int Number;
</code></pre>

<p>You can probably come up with a better name.</p>

<h2>Cache results (by hand)</h2>

<p>One thing that strikes me most is that you recalculate <span class="math-container">\$a^4\$</span> and so on every time. We can easily treat this with more variables (using your declaration style):</p>

<pre><code>int main() {
    long int a, b, c, d;
    long int a4, b4, c4, d4; // new variables
    clock_t t;
    t = clock();

    for (a = 1; a &lt; 100000; a++) {
        a4 = pow4(a);                             // remember
        for (b = a; b &lt; 300000; b++) {
            b4 = pow4(b);                         // remember
            for (c = b; c &lt; 500000; c++) {
                c4 = pow4(c);                     // the fourth power
                for (d = c; d &lt; 500000; d++) {
                    d4 = pow4(d);                 // of this member
                    if (a4 + b4 + c4 == d4)
                        printf("FOUND IT!\na = %ld\nb = %ld\nc = %ld\nd = %ld\n", a, b, c, d);
…
</code></pre>

<p>Remember how I said that nicely written, modular code isn't often optimal? This is one of those un­fortunate examples where you have to help the compiler (unless you know exactly what optimization flags you have to use or your compiler is overly aggressive). The <code>prop</code> is gone, the calls to <code>pow4</code> are now in your loop.</p>

<p>But the compiler cannot make a mistake here anymore: it's now <em>very</em> clear that <code>a4</code> doesn't need to be recalculated 300000*500000*500000 times.</p>

<p>That being said, we should apply the other suggestions like the type synonym and the late declaration:</p>

<pre><code>typedef long unsigned int Number;

int main() {
    clock_t t;
    t = clock();

    for (Number a = 1; a &lt; 100000; a++) {
        const Number a4 = pow4(a);                         // remember
        for (Number b = a; b &lt; 300000; b++) {
            const Number b4 = pow4(b);                     // remember
            for (Number c = b; c &lt; 500000; c++) {
                const Number c4 = pow4(c);                 // the fourth power
                for (Number d = c; d &lt; 500000; d++) {
                    const Number d4 = pow4(d);             // of this member
                    if (a4 + b4 + c4 == d4)
                        printf("FOUND IT!\na = %ld\nb = %ld\nc = %ld\nd = %ld\n", a, b, c, d);
…
</code></pre>

<p>While <code>const</code> isn't necessary here, it will make sure that we don't change our cached results accidentally.</p>

<h2>The time has come</h2>

<p>Although our code is now more verbose, there is one small piece of code that repeats itself three times throughout your <code>main</code>:</p>

<pre><code>((double)(clock() - t))/CLOCKS_PER_SEC)
</code></pre>

<p>That's quite hard to read, isn't it? It's a perfect candidate for a function:</p>

<pre><code>static inline seconds_since(clock_t t){
    return ((double)(clock() - t))/CLOCKS_PER_SEC;
}
</code></pre>

<p>This changes your <code>printf</code> from</p>

<pre><code>printf("a = %ld, b = %ld, c = %ld, time = %fs\n", a, b, c, ((double)(clock() - t))/CLOCKS_PER_SEC);
</code></pre>

<p>to</p>

<pre><code>printf("a = %ld, b = %ld, c = %ld, time = %fs\n", a, b, c, seconds_since(t));
</code></pre>

<p>Ah. Much easier to read. That's what <code>inline</code> functions are for. Note that any sophisticated compiler should inline that function anyway, so you may also drop <code>inline</code> if you don't want to use C99.</p>
    </div>