<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Review</h2>
<blockquote>
<pre><code>Private Sub CopyPaste(rngSrc As Range, rngDest As Range)
</code></pre>
</blockquote>
<p>Prefixing variables with their type is a bit dated.   Of course there are times when it is invaluable such as working with forms where their is a designer and a code module.  Using simple meaningful names will make you code easier to read.</p>
<blockquote>
<pre><code>Private Sub CopyPaste(Source As Range, Destination As Range)
</code></pre>
</blockquote>
<p>There is no need to name temporary objects.</p>
<blockquote>
<pre><code>ActiveWorkbook.Sheets.Add.Name = "_wsDummy_Temp_"
Dim wsDummy As Worksheet
Set wsDummy = ActiveWorkbook.Sheets("_wsDummy_Temp_")
</code></pre>
</blockquote>
<p>It better to set your variables directly whenever possible.</p>
<blockquote>
<pre><code>Set wsDummy = ActiveWorkbook.Sheets.Add
</code></pre>
</blockquote>
<p>Since the worksheet is just temporary and the code is short, I would use a <code>With</code> block and eliminate the <code>wsDummy</code> variable altogether.</p>
<blockquote>
<pre><code>With ActiveWorkbook.Sheets.Add
    .Paste Link:=True
    &lt;more code&gt;
End With
</code></pre>
</blockquote>
<p>Worksheets are activated with <code>Range("A1")</code> selected whenever they are added.  So eliminate these lines:</p>
<blockquote>
<pre><code>wsDummy.Activate
wsDummy.Range("A1").Select
</code></pre>
</blockquote>
<p>Ay-ay-ay <code>rngSrcSrcRng!!  This variable is just an alias for </code>rngDummy`.   Pick a name and stick with it.   I take this concept to the extreme.  You will see the same names throughout all my code projects.
IMO, consistently using simple names like data ( array ), results ( array ), result (scalar value), r (row index) , c (column index), n (generic index), text ( simple string ), contents ( simple string usually file contents), source (source object such as a range) , destination (destination object such as a range), cell, target don't just make it easier to read and modify your code but it also makes it far quicker to write the code, in the first place.</p>
<p><code>vTransposed</code> isn't needed either.  It would be better to reuse <code>vSrcSrc</code> then to keep both variables in memory.</p>
<p>Clearing the contents of a temporary worksheet.  I'm guessing this is a remnant of code from your earlier attempts.</p>
<blockquote>
<pre><code>rngDummy.ClearContents
</code></pre>
</blockquote>
<p>After your macros complete <code>Application.DisplayAlerts</code> and <code>Application.ScreenUpdating</code> are automatically reset.  So these lines can be removed:</p>
<blockquote>
<pre><code>Application.DisplayAlerts = True
Application.ScreenUpdating = True
</code></pre>
</blockquote>
<p>It is best to set <code>Application.Calculation = xlCalculationManual</code> when changing values or formulas on a worksheet.</p>
<h2>Refactored Code</h2>
<pre><code>Private Sub CopyPaste(Source As Range, Destination As Range)
    Application.ScreenUpdating = False
    Application.DisplayAlerts = False
    
    Dim calculationMode As XlCalculation
    calculationMode = Application.Calculation
    
    Dim results As Variant

    Source.Copy
    With Worksheets.Add
        .Paste Link:=True
         With .Range("A1").CurrentRegion
            results = Application.ConvertFormula(.Formula, xlA1, xlA1, 1)
            Destination.Resize(.Columns.Count, .Rows.Count) = Application.Transpose(results)
        End With
        .Delete
    End With
    
    Application.Calculation = calculationMode
End Sub
</code></pre>
<h2>Alternate Approach</h2>
<p>A more efficient method create the formula array using <code>Range.Address(RowAbsolute:=True, ColumnAbsolute:=True, External:=True)</code>.  This will eliminate the need for a temporary worksheet and avoid the copy and pasting.</p>
<pre><code> Private Sub TransposeLink(Source As Range, Destination As Range)
    Application.ScreenUpdating = False
    Application.DisplayAlerts = False
    
    Dim calculationMode As XlCalculation
    calculationMode = Application.Calculation
    
    Dim results As Variant
    With Source
        ReDim results(1 To .Columns.Count, 1 To .Rows.Count)
        
        Dim r As Long, c As Long
        
        For r = 1 To .Rows.Count
            For c = 1 To .Columns.Count
                    results(c, r) = "=" &amp; .Cells(r, c).Address(RowAbsolute:=True, ColumnAbsolute:=True, External:=True)
            Next
        Next
        
        Destination.Resize(.Columns.Count, .Rows.Count).Formula = results
    End With
    
    Application.Calculation = calculationMode
End Sub
</code></pre>
    </div>