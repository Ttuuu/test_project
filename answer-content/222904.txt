<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You are using an iterative approach which is normally faster than a recursive. That's a good optimization.</p>

<hr>

<blockquote>
<pre><code>            if (array[i].CompareTo(pivotValue) &gt; 0)
            {
                continue;
            }
            Swap(ref array[i], ref array[startIndex]);
            startIndex++;
</code></pre>
</blockquote>

<p>Why not just:</p>

<pre><code>      if (array[i].CompareTo(pivotValue) &lt; 0)
      {
        Swap(ref array[i], ref array[startIndex]);
        startIndex++;
      }
</code></pre>

<hr>

<blockquote>
<pre><code>      pivotIndex = r.Next(startIndex, endIndex);
</code></pre>
</blockquote>

<p>The wiki is doing so but I don't see why instead of just taking the middle:</p>

<pre><code>pivotIndex = startIndex + (endIndex - startIndex) / 2;
</code></pre>

<p>You could measure on a larger data set to see if there is any average difference in performance?</p>

<hr>

<blockquote>
  <p><code>$"The res[i] {res[i]} was not greater than six"</code></p>
</blockquote>

<p>Strictly speaking: you are not finding values lesser than <code>6</code> but the six smallest values in the data set. (<code>n</code> or <code>k</code> is an index not a value)</p>
    </div>