<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There are several ways how you can process an XML using Linq2XML.</p>
<p>As I can understand you want to process only those XML files that are matching a given format. You can check this with XML native tools, like XSD or DTD schema definitions and validation or manually via XLinq.</p>
<p>If you want to check that with XLinq I would suggest to use the following methods:  <code>Descendants</code>, <code>Elements</code> and <code>Attributes</code>. Each returns those items where the predicate is met. If there is no match, then it will return an empty collection.</p>
<p>If you combine this logic with the <code>Any</code> extension method then you can turn your query operators into existence operators. If the queried collection's length is zero then it returns <code>false</code> otherwise <code>true</code>.</p>
<hr>
<p>I would suggest to break your logic into two sub-functions:</p>
<ul>
<li>Check whether or not the given xml meets the desired format</li>
<li>Process only that xml, which satisfies the preconditions</li>
</ul>
<hr>
<p>EDIT: To reflect new requirements</p>
<p>Check the presence of the Group element and act based on its existence:</p>
<pre><code>var xml = "&lt;Project&gt;&lt;Group&gt;&lt;Content Include = \"buildings\" /&gt;&lt;/Group&gt;&lt;/Project&gt;";
var xDocument = XDocument.Parse(xml);
var project = xDocument.Root;
var isGroupExist = project.Elements("Group").Any();
if (!isGroupExist)
{
    var group = new XElement("Group") { ... };
    project.AddAfterSelf(group);
}
//Process it
</code></pre>
    </div>