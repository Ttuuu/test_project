<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>According to PEP 8, the official Python style guide, <a href="https://www.python.org/dev/peps/pep-0008/?#function-and-variable-names" rel="nofollow noreferrer">function names should be <code>lower_case_with_underscores</code></a>.  Furthermore, this function parses the URL, rather than creating a parser object, so the function name should be a verb phrase rather than a noun phrase.</p>

<p>By <a href="https://tools.ietf.org/html/rfc1738" rel="nofollow noreferrer">RFC 1738</a>, the scheme and host portions of URLs are case-insensitive.  Also, it is allowable to include a redundant port number in the URL.</p>

<p>Imgur also also partners with certain other websites.  For instance, when you upload an image through the question editor Stack Exchange site, it will end up on <a href="https://i.stack.imgur.com" rel="nofollow noreferrer">https://i.stack.imgur.com</a>.</p>

<p>There is a lot of commonality in the various regexes.  Consider combining them all into a single regex.  Use named capture groups to avoid the magic group numbers.</p>

<p>A docstring with <a href="https://docs.python.org/3/library/doctest.html" rel="nofollow noreferrer">doctests</a> would be very beneficial for this function.</p>

<pre><code>import re

def parse_imgur_url(url):
    """
    Extract the type and id from an Imgur URL.

    &gt;&gt;&gt; parse_imgur_url('http://imgur.com/a/cjh4E')
    {'id': 'cjh4E', 'type': 'album'}
    &gt;&gt;&gt; parse_imgur_url('HtTP://imgur.COM:80/gallery/59npG')
    {'id': '59npG', 'type': 'gallery'}
    &gt;&gt;&gt; parse_imgur_url('https://i.imgur.com/altd8Ld.png')
    {'id': 'altd8Ld', 'type': 'image'}
    &gt;&gt;&gt; parse_imgur_url('https://i.stack.imgur.com/ELmEk.png')
    {'id': 'ELmEk', 'type': 'image'}
    &gt;&gt;&gt; parse_imgur_url('http://not-imgur.com/altd8Ld.png') is None
    Traceback (most recent call last):
      ...
    ValueError: "http://not-imgur.com/altd8Ld.png" is not a valid imgur URL
    &gt;&gt;&gt; parse_imgur_url('tftp://imgur.com/gallery/59npG') is None
    Traceback (most recent call last):
      ...
    ValueError: "tftp://imgur.com/gallery/59npG" is not a valid imgur URL
    &gt;&gt;&gt; parse_imgur_url('Blah') is None
    Traceback (most recent call last):
      ...
    ValueError: "Blah" is not a valid imgur URL
    """
    match = re.match(
        r'^(?i:https?://(?:[^/:]+\.)?imgur\.com)(:\d+)?'
        r'/(?:(?P&lt;album&gt;a/)|(?P&lt;gallery&gt;gallery/))?(?P&lt;id&gt;\w+)',
        url
    )
    if not match:
        raise ValueError('"{}" is not a valid imgur URL'.format(url))
    return {
        'id': match.group('id'),
        'type': 'album' if match.group('album') else
                'gallery' if match.group('gallery') else
                'image',
    }
</code></pre>

<p>Note that the regex above relies on the <a href="https://docs.python.org/3/library/re.html#regular-expression-syntax" rel="nofollow noreferrer"><code>(?aiLmsux-imsx:...)</code> feature</a> of Python 3.6, and the doctests rely on the <a href="https://docs.python.org/3/whatsnew/3.7.html" rel="nofollow noreferrer">predictable order of dictionary keys</a> in Python 3.6 / 3.7.</p>
    </div>