<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>bug</h1>

<p>You don't reset the <code>offset</code> when there is a mismatch, so <code>"123 easy as b("</code> also returns <code>True</code>. Just add:</p>

<pre><code>    else:
        offset = 0
</code></pre>

<h1>optional parameter <code>offset</code></h1>

<p>The caller of the function should not care about the offset if he wants to check whether a combination is part of the string. I would change the method signature to <code>def find_mutated_string2(combos, search, offset=0)</code>. Then your user doesn't need to worry about this</p>

<h1>in</h1>

<p>Python has the <code>in</code> statement.</p>

<p>Your code says</p>

<pre><code>    for mutant in combos[offset]:
        if mutant == char:
</code></pre>

<p>but actually mean: <code>if char in combos[offset]</code></p>

<p>Since <code>in</code> in a <code>list</code> traverses the list to look for a match, while set uses a lookup, defining the combos as <code>set</code>s helps here</p>

<pre><code>combos = [{"@", "A", "a"}, {"8", "B", "b"}, {"(", "[", "c"}]


def find_mutated_string2(combos, search, offset=0):
    for i, char in enumerate(search):
        if char in combos[offset]:
            if len(combos) == (offset + 1):
                return True
            else:
                return find_mutated_string2(combos, search[i+1:], offset+1)
        else:
            offset = 0
    return False
</code></pre>

<h1>match substring</h1>

<p>You could write a helper function that takes a substring and checks whether this matches the combo's</p>

<pre><code>def matches_combos(substring, combos):
    return len(substring) == len(combos) and all(
        char in combo for char, combo in zip(substring, combos)
    )
</code></pre>

<p>This can be easily tested:</p>

<pre><code>test_cases = {
    "abc": True,
    "Ab[": True,
    "abd": False,
    "ab": False,
    "abcd": False,
}
for substring, answer in test_cases.items():
    result = matches_combos(substring, combos)
    assert result == answer
</code></pre>

<h1>recursion</h1>

<p>If your string is long, you will run into the <a href="https://stackoverflow.com/q/3323001/1562285">recursion limit</a>. </p>

<pre><code>for i in range(10000):
    try:
        _ = find_mutated_string2(combos, "a"*i)
    except RecursionError:
        print(f"fails for string length: {i}")
        break
</code></pre>

<blockquote>
<pre><code>fails for string length: 5921
</code></pre>
</blockquote>

<p>for a recursionlimit of 3000</p>

<p>You can easily rewrite this proble iteratively</p>

<pre><code>def find_mutated_string3(combos, search):
    if len(search) &lt; len(combos):
        return False
    for i in range(len(search) - 2):
        substring = search[i : i + len(combos)]
        if matches_combos(substring, combos):
            return True
</code></pre>

<p>or using <code>any</code></p>

<pre><code>def find_mutated_string4(combos, search):
    if len(search) &lt; len(combos):
        return False
    return any(
        matches_combos(search[i : i + len(combos)], combos)
        for i in range(len(search) - 2)
    )
</code></pre>
    </div>