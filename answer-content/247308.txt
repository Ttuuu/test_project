<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Split classes into multiple files.</h1>
<p>For the same reason that libraries allow users to rent individual books, programmers should split classes into individual files. It allows for them to be more easily digested and modified in the future.</p>
<hr>
<h1>Allowing for valid user input</h1>
<p>Regarding this check <code>BookList.option != "q"</code> in <code>Display.Options()</code>, this only allows for lowercase input. Instead try using the following: <code>BookList.option.Equals("q", StringComparison.OrdinalIgnoreCase);</code>.</p>
<p>You will also need to update the switch case accordingly:</p>
<pre><code>case "q":
case "Q":
    Console.WriteLine("\nOkay then, good bye.");
    //other code here
</code></pre>
<hr>
<h1>Return values</h1>
<p>Instead of setting values in public variables when finding the result from a method, you should return it as a type instead.</p>
<p>For example, in the following method, you set <code>BookList.size_ok</code>, instead you should return this as a type from the method.</p>
<p>If you need to set a public variable, then you should set it from the result of the method.</p>
<pre><code>public static bool AskForHowManyBooks()
{
    var sizeOk = false;
    do
    {
        Console.Clear();
        Console.Write("How many books do you want to add to the list? --&gt; ");
        sizeOk = BookList.HowManyBooks(Console.ReadLine(), ref BookList.howMany, BookList.MAX_SIZE);
    } while (sizeOk);

    return sizeOk;
}
</code></pre>
<hr>
<h1>Parameter and variable naming</h1>
<p>Maybe work on improving your naming conventions. Names of functions and classes seem to be ok, but lots of your variables, fields and parameters aren't great. Names should be clear and concise, and should avoid bad practices such as hungarian notation.</p>
<p>An example of a bad parameter name in your code: <code>List&lt;Book&gt; list</code> in the <code>AddBook()</code> function.</p>
<p>For more information, checkout Microsoft's <a href="https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/inside-a-program/coding-conventions#naming-conventions" rel="noreferrer">guide on the matter</a>.</p>
<p>Another example of names that don't follow C# convention:</p>
<pre><code>public Book (string title_in, string author_in, int page_in)
{
    this.Title = title_in;
    this.Author = author_in;
    this.Page = page_in;
}
</code></pre>
<p>According to convention, the constructor arguments should be titled like so: <code>titleIn</code>.</p>
<p>EDIT: @Heslacher made a good point in the comments, you could even drop the <code>in</code> suffix. So the parameter would be called <code>title</code>.</p>
<hr>
<h1>Incorrect field placing?</h1>
<p>This sounds (or smells) like a code smell to me, but you may have a valid justification that I'm unaware of?</p>
<p>In booklist, you are storing the following fields:</p>
<pre><code>public static int bookNumber;
public static string bookTitle;
</code></pre>
<p>Surely these should be placed in book? Why would you have information about a specific book in a class relating to a list of books?</p>
<hr>
<h1>Use properties instead of fields</h1>
<p>Try moving the fields mentioned in the previous section to properties so they can be properly accessed outside the class.</p>
<p>It doesn't make sense for them to be static fields.</p>
<hr>
<h1>Use <code>var</code></h1>
<p>This is more of a preference, but the .NET world is leaning towards it being a convention.</p>
<p>When setting new varaibles (for example in this <code>foreach</code> loop):</p>
<p><code>foreach(Book book in list)</code></p>
<p>It may be worth it to use <code>var</code> instead of explicitly stating the type.</p>
<p>There are many benefits to this, for more information checkout <a href="https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/implicitly-typed-local-variables" rel="noreferrer">this article</a>.</p>
<hr>
<h1>Many methods can be made private.</h1>
<p>If you aren't accessing a method outside of the class, think about making it private.</p>
<p>About 30% of your methods could be made <code>private</code>, for example:</p>
<pre><code>public static string GetBookTitle(string bookTitle_in)
{
    do
    {
        bookTitle_in = Console.ReadLine();
    } while (string.IsNullOrEmpty(bookTitle_in));

    return bookTitle_in;
}
</code></pre>
    </div>