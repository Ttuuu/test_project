<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Along with what @Heslacher mentioned. </p>

<p>There are some areas also can be improved. </p>

<p>The <code>IsDigit</code> and <code>IsLowercaseLetter</code> methods can be improved, as you're not handling any exceptions inside them, 
while there is an existing <code>char.IsDigit</code> and <code>char.IsLower</code> extensions that can be used instead, which is better handled. 
I'm sure using the .NET built-in extensions would be better option than recreating your own. </p>

<p>Another important point is that you're validating the input implicitly only! So, you either will have to copy &amp; paste same condition on the constructor or any new method that will take an input to convert it to <code>IdNumber</code> or you'll stick with the implicit operator as a way of conversion. Both are not good practice. </p>

<p>What you want to do is to create a method to validate the input, which will help you to reuse it whenever needed. </p>

<p>example: </p>

<pre><code>// Validate Id
public bool IsValid(string idNumber)
{
    return
        string.IsNullOrEmpty(idNumber) ? throw new ArgumentNullException(nameof(idNumber))
      : idNumber.Length == 10 &amp;&amp; idNumber.All(x =&gt; char.IsDigit(x) || char.IsLower(x));
}
</code></pre>

<p>if the string is empty or null will throw <code>ArgumentNullException</code> otherwise will validate the input then return either true or false. you can see I used <code>char.IsDigit(x)</code> and <code>char.IsLower(x)</code> and that's because it has more validations at the back-scene, but most importantly, it checks the character Unicode which is important in your case as you always need a Numeric &amp; a lower-case Latin (English) Letter which it's already covered in them.   </p>

<p>With this method, you're eliminating the need of <code>IsLowercaseLetter(char c)</code> &amp;&amp; <code>IsDigit(char c)</code> custom methods.</p>

<p>Now, you'll need to design your constructor first, before even thinking of your implicit operators (these can be saved for last). </p>

<p>we can define two constructors: </p>

<pre><code>// store Id as string
private readonly string _idNumber;

// Auto Generate new id from Guid (just an example).
public IdNumber()
{
    _idNumber = Guid.NewGuid().ToString().Replace("-", "").Substring(0, 10).ToLower();
}

// Initiate the Id from the constructor.                
public IdNumber(string idNumber)
{
    if (string.IsNullOrEmpty(idNumber)) { throw new ArgumentNullException(nameof(idNumber)); }

    if (IsValid(idNumber))
    {
        _idNumber = idNumber;
    }
    else
    {
        throw new ArgumentException("id numer must have length 10 and must only have digits and lower case-letters");
    }
}
</code></pre>

<p>You added the ability to initiate a new Id via the constructors, either an auto generated Id, or a specific one, these two constructors will come in handy. </p>

<p>The <code>ToString()</code> should have null check, why ? it's a procedure were you expect the unexpected. (welcome to my world ;) ). </p>

<pre><code>// Override the ToString(), and validate the string with string.IsNullOrEmpty()
public override string ToString() =&gt; string.IsNullOrEmpty(_idNumber) ? throw new ArgumentNullException(nameof(_idNumber)) : _idNumber;
</code></pre>

<p>Now, the equality operations in <code>Equals()</code> and <code>==</code> and also <code>!=</code> in your code are treated the same (you're compare between objects values). Because of that, you can make <code>Equals()</code> main method of equality check, then just recall it in your other operators.  </p>

<pre><code>// Include conditions to cover null and string objects and use switch statement for better readability. (also easier to extend).
public override bool Equals(object obj)
{
        switch (obj)
        {
            case IdNumber other:
                return _idNumber == other._idNumber;
            case string other: 
                return string.IsNullOrEmpty(other) ? throw new ArgumentNullException(nameof(other)) : _idNumber == other;
            case null:
                throw new ArgumentNullException(nameof(obj));
            default:
                return false;
        }

}

// Call Equals()
public static bool operator ==(IdNumber m1, IdNumber m2) =&gt; m1.Equals(m2);

// Call Equals()
public static bool operator !=(IdNumber m1, IdNumber m2) =&gt; !m1.Equals(m2);
</code></pre>

<p>For the implicit operator, since we have already implemented our constructors and validation,(i told you it'll come in handy)  we can do this: </p>

<pre><code>// Cast string to IdNumber
public static implicit operator IdNumber(string value) =&gt; new IdNumber(value);
</code></pre>

<p>now, we can also add another implicit operator to do the reverse casting (from IdNumber to string), so we don't need to call <code>ToString()</code></p>

<pre><code>public static implicit operator string(IdNumber value) =&gt; value.ToString();
</code></pre>

<p>now you can cast back and forth between string and IdNumber directly. </p>

<p>we can now test them out :</p>

<pre><code>// test 1 : initiate IdNumber with a string (without using the constructor)
IdNumber id = "ab45jk23zz";

// test 2 : Initiate a new IdNumber via constructor
var id2 = new IdNumber("ab45jk23zz");

// test 3 : Initiate a new random IdNumber
var id3 = new IdNumber();

// test 4 : convert IdNumber ToString()
var test = id.ToString();

// test 5 : cast IdNumber to string
var test2 = (string)id;

// test 6 : cast string to IdNumber
var test3 = (IdNumber)test;

// Between IdNumber objects 
var equalityTest = id.Equals(id2);

// Between IdNumber objects 
var equalityTest2 = id == id2;

// Between IdNumber &amp; string 
var equalityTest3 = id.Equals("ab45jk23zz");

// Between IdNumber &amp; string
var equalityTest4 = id == "ab45jk23zz";
</code></pre>
    </div>