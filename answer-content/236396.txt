<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Tracking Players</h1>

<p>There are a few instances where I see you are iterating over <code>players</code> in order to retrieve values from multiple dictionaries (<code>player_currency_dict</code> and <code>player_statues</code>). This is a hint that maybe that information should be stored in the same dictionary of <code>players</code>. I'd also keep the players' last bet in there as well:</p>

<pre class="lang-py prettyprint-override"><code># should look like this
players = {'name': [amount, state, last_bet], ...}
</code></pre>

<p>This way, it's really easy to keep track of those three pieces of information. To build this, you can swap out your <code>get_player_names</code> and <code>start_currency</code> functions for one simple function:</p>

<pre class="lang-py prettyprint-override"><code>def get_player_dict(players):
    """
    Simply return a dictionary that holds players as keys and
    a list of [currency, state, last_bet]. This is a list so that you may
    edit those values
    """
    return {player: [100, 'Standby', 0] for player in players}
</code></pre>

<p>To get all of that information, you can use <code>dict.items()</code> in a loop like this:</p>

<pre class="lang-py prettyprint-override"><code># for keeping the list together
for name, status in players.items():
    # do things


# for full unpacking 
for name, (money, state, last_bet) in players.items():
    # do things
</code></pre>

<h2>Why keep the list together?</h2>

<p>I want to use a list because I can modify it in-place. This will be more clear later, but as a short example, I can do something like:</p>

<pre class="lang-py prettyprint-override"><code>sample = {'Steve': [100, 'Standby', 0]}

def bet_10(my_list):
    my_list[0] -= 10
    my_list[2] += 10

bet_10(sample['Steve'])
sample
{'Steve': [90, 'Standby', 10]}
</code></pre>

<h1>Displaying Game State</h1>

<p>There are some functions you define that focus on displaying information. While this is a good use-case for a function, some of the formatting can be trimmed down. First, if you are trying to fill a string with a value, you can use <code>ljust</code> or <code>rjust</code> to fill to the right or left, respectively:</p>

<pre class="lang-py prettyprint-override"><code>'abc'.ljust(7)
'abc    '

'abc'.rjust(7)
'    abc'
</code></pre>

<p>Also, magic numbers are usually a code smell. If you need to adjust them, I'd suggest passing them as parameters to make things a bit more flexible:</p>

<pre class="lang-py prettyprint-override"><code>def show_players(players, name=20, currency=10, state=10, bet=10):
    """
    Pass the players dict and the padding for the four values,
    or just use the defaults
    """
    sts = (n.ljust(v) for n, v in zip(
        ("Name", "Currency", "State", "Bet"), (name, currency, state, bet))
    )
    header = "   {} | {} | {} | {}".format(*sts)
    print(header)
    for i, (n, (c, s, l)) in enumerate(players.items(), start=1):
        print('_'*len(header))
        n = n.ljust(name)
        c = str(c).ljust(currency)
        s = s.ljust(state)
        l = str(l).ljust(bet)
        print(f"{i}. {n} | {c} | {s} | {l}")


# Example
show_players(players)
   Name                 | Currency   | State      | Bet
______________________________________________________________
1. Dante                | 100        | Standby    | 0
______________________________________________________________
2. Sam                  | 100        | Standby    | 0
______________________________________________________________
3. Kat                  | 100        | Standby    | 0
</code></pre>

<p>I might prefer to show all of the info, that way, at the end of each turn I can display the state of the game and re-use this every time</p>

<h1>The Game*</h1>

<p>The core workings of your game execute in global scope and don't leverage a lot of functions. This makes changing code a bit more difficult. In pseudo-code, I would imagine this game would look something like:</p>

<pre><code># Each Round
loop {
    # each iteration would be a turn
    foreach player in  players{
        # Each player that hasn't folded gets a chance to bet
        case {
            player -&gt; Raise
            player -&gt; Fold
            player -&gt; Call
            player -&gt; Check
        } 
    }

    if all(bets match or all-in){
        break loop
    } else {
        continue
    }

}

</code></pre>

<p>Hopefully the notation isn't too wonky. This will be the basic structure for breaking down your main script.</p>

<h1>Round Loop</h1>

<p>You will want a loop to track each round of play. Each round will have a <code>pool</code>, which is the total money being bet by all players. It will also need a <code>bid</code> amount which you've noted already as the highest bet. You can just use another <code>while</code> loop to go through the players until an end condition is hit:</p>

<pre class="lang-py prettyprint-override"><code>def play_round(players):
    """
    Loop over players in players dictionary and play
    a turn for each player. The win condition is defined by
    one of two criteria:
        For all players that have not folded they either:
            A) are All-In
            B) Have last_bet matching bid

    The pool (total) of money gambled is returned

    """
    bid, pool = 0, 0
    while True:
        for name, status in players.items():
            show_players(players)

            curr, state, last_bet = status
            # skip over non-eligible players
            if state == 'Fold' or state == 'Out':
                continue

            print(f"It is {name}'s turn!")
            print(f"The current bid is {bid}")

            # will need some sort of take_turn function
            player_bet = take_turn(name, status, bid)

            # add the appropriate bet to the pool of cash
            pool += player_bet
            # the bid is the max of the bid or the bet that was made
            bid = max(bid, player_bet)

        # Everyone's bet either matches current bid, is all-in, or has folded
        if all(
            curr==0 or last_bet==bid
            for curr, state, last_bet in players.values()
            if state != 'Fold'
        ):
            print('All bets match, ending round')
            break

    # return the pool to outer scope
    return pool
</code></pre>

<h1>Player Turns</h1>

<p>Each player will need a turn. This replaces the loop that gets each action (well, moves it more than replaces it) with a function. Really, there are four major actions a player can take: Check, Raise, Call, or Fold. Raise and Call will be pretty similar to one another, so that might be a function on its own. You can easily handle this with an <code>if/else</code> block:</p>

<pre class="lang-py prettyprint-override"><code>def take_turn(name, status, bid):
    """
    A player is allowed the option to do one of five things:
        Raise -&gt; Raise bid by integer amount
        Call -&gt; Bet the same as the bid
        Fold -&gt; Quit the hand
        Check -&gt; Bet nothing (only applicable if bid is 0)
        All-In -&gt; Bet everything they have

    Return amt to be added to the bid pool
    """

    # set opts as a dictionary for easy membership-testing
    # of user-selected options
    opts = {
        'c': 'check',
        'r': 'raise',
        'b': 'call',
        'a': 'all-in',
        'f': 'fold'
    }
    curr, state, last_bet = status
    if state == "All-In":
        print(f"Player {name} is already All-In")
        return 0

    while True:
        action = input(f"Which action would you choose? "
        f"({', '.join(map(': '.join, opts.items()))})").strip().lower()

        # This is a fast check to make sure inputs are valid
        # Loop again if not in options dictionary
        if action not in opts:
            print("Invalid option, please try again")
            continue

        # Otherwise, continue forward
        elif action == 'c':
            # If the player's last bet is not equal to the current one,
            # they are unable to check.
            if last_bet != bid:
                print(f"Cannot check, bid was raised to {bid}")
                continue

            print(f"Player {name} has checked")
            amt = 0

        elif action == 'a':
            print(f"Player {name} is going All-In")
            amt = all_in(status)

        elif action == 'f':
            status[1] = 'Fold'
            print(f"Player {name} has folded")
            amt = 0

        else:
            try:
                # We've abstracted Call and Raise into the same function
                # for ease of use
                amt = handle_action(name, status, action, bid)
            except (ValueError, TypeError):
                continue

        return amt
</code></pre>

<p>Now, we know we will want to return the bartered amount to the <code>round</code> loop so the money can be added to the <code>pool</code>. Here we just need to keep track of the current <code>bid</code> and the <code>player</code> itself. Now, the way <code>handle_action</code> is written depends on how the betting code is written, but in general, it's a way to handle two similar cases. Both are detailed below.</p>

<h2>Betting</h2>

<p>We will want a function for players to bet amounts of money. Using the general form from the example <code>bet_10</code> function, you could re-organize it into something like:</p>

<pre class="lang-py prettyprint-override"><code>def player_bet(player, amount):
    """
    use this to modify who bet what amount by deducting amount from the
    first value in the list representing the player in-place:

    &gt;&gt;&gt; players = {'Steve': [100, 'Standby', 0]}
    &gt;&gt;&gt; player_bet(players['Steve'], 50)
    &gt;&gt;&gt; players
    {'Steve': [50, 'Standby', 50]}

    &gt;&gt;&gt; player_bet(players['Steve'], 75)
    ValueError
     'Player does not have that amount to bet! Player has 50'
    """
    curr, state, last_bet = player
    if curr &lt; amount:
        raise ValueError(
            f"Player does not have that amount to bet! Player has {curr}"
        )
    elif state == 'All-In':
        raise TypeError("Player that is All-In cannot bet")

    # decrement held money
    player[0] -= amount
    # while increasing the amount that was bet
    player[2] += amount
</code></pre>

<p>Using the fact that we are passing in <code>player</code> by reference, we can edit the values in-place so that we don't have to return anything. I am raising an exception for not having enough money because I don't want players who may have mis-typed a number to accidentally go All-In. I also might want going all in to be a special case of betting for the purpose of being explicit. This could be a matter of taste, but an <code>all_in</code> function might look like:</p>

<pre class="lang-py prettyprint-override"><code>def all_in(player):
    """
    Take the amount that the player has left and
    return it, this is just in case we aren't immediately
    sure what the bet is going to be. Use a try-except so that
    going all-in is a bit more explicit and not accidental

    &gt;&gt;&gt; players = {'Steve': [100, 'Standby', 0]}
    &gt;&gt;&gt; initial_bet = 150
    &gt;&gt;&gt; pool = 150
    &gt;&gt;&gt;
    &gt;&gt;&gt; try:
    ...     player = players['Steve']
    ...     player_bet(initial_bet)
    ... except ValueError:
    ...     pool += all_in(player)

    &gt;&gt;&gt; pool
    250
    &gt;&gt;&gt; players
    {'Steve': [0, 'All-In', 100]}
    """
    curr, *_ = player
    # set held funds to zero
    player[0] -= curr
    # add that to bet funds
    player[2] += curr
    # set status to All In
    player[1] = 'All In'
    return curr
</code></pre>

<p>I want to return <code>currency</code> because I don't want to have to worry about how much a player has when I call that function.</p>

<h2><code>handle_action</code></h2>

<p>Now we can roll <code>Call</code> and <code>Raise</code> into a function that I've called <code>handle_action</code>:</p>

<pre class="lang-py prettyprint-override"><code>def handle_action(name, status, action, bid):
    """
    A function to help keep take_turn function from being too difficult to read,
    especially since Raise and Call are almost the same event
    """
    curr, state, last_bet = status

    # the if/elif statement here helps define two parameters
    # amt and message, and raise any exceptions otherwise
    if action == 'r':
        try:
            amt = int(
                input("Raise by how much? ")
            )
        # int function raises a TypeError on bad input
        except TypeError:
            print("Please input an integer amount of money")
            raise
        else:
            message = f"Player {name} has raised bet by {amt}"

    elif action == 'b':
        amt = bid - last_bet
        message = f"Player {name} has called current bet of {bid}"

    # Now, try the player_bet function since amt and message are set
    # and return amt only if player_bet was called successfully
    try:
        player_bet(status, amt)
        print(status)
        print(message)
    except ValueError as e:
        # Player will need to explicitly select 'a' as an option
        # to go all-in
        print(e)
        print(f"You do not have enough, if you want to go all-in, select 'a'")
        raise
    except TypeError as e:
        print(e)
        raise

    return amt

</code></pre>

<h1>Main Function</h1>

<p>You usually want a <code>main</code> function to run your program. In this case, <code>main</code> will be the game loop that runs each round. I've put as many comments as I can to try to be clear, this is already a pretty long answer as is:</p>

<pre class="lang-py prettyprint-override"><code>def main(players):

    while True:
        pool = play_round(players)

        # Show results after round
        show_players(players)
        print("Round Over")

        # If all remaining players folded for some reason, this will allow the program
        # to handle that case and skip the while loop
        is_winner = any(x not in ('Fold', 'Out') for _, x, _ in players.values())

        while is_winner:
            # I like to sanitize input by at least stripping off
            # possible leading/trailing whitespace someone may have inadvertently
            # entered
            winner = input("Who was the winner? ").strip()
            try:
                winner = players[winner]
                # Prevent cheating! People who are out or folded cannot win...
                if winner[1] in ('Fold', 'Out'):
                    print("That can't be! Must be a different winner...")
                    continue

                # add the pool to the winner's available cash pile
                winner[0] += pool
            except KeyError:
                # selected winner wasn't in the players dictionary
                print("Unrecognized player, please try again")
            else:
                break
        else:
            # if `is_winner` is False, the while loop will skip to
            # this else statement
            print("How on earth was there no winner??")

        play_again = input('Play Again? [y/n] ').lower().strip() == 'y'
        if not play_again:
            print("Ok, goodbye")
            sys.exit(0)

        # Mark players with no money left as out
        no_money_left = [name for name, (money, *_) in players.items() if not money]
        if no_money_left:
            l = '\n '.join(no_money_left)
            print(f"The following players are Out: {l}")
            for player in no_money_left:
                # sets state in-place
                players[player][1] = 'Out'

        # reset previous bets and states to default values for players
        # who are still in for the next round
        for player, status in players.items():
            _, state, _ = status
            status[2] = 0
            if state != 'Out':
                status[1] = 'Standby'
</code></pre>

<h1>if <strong>name</strong> == "<strong>main</strong>"</h1>

<p>Usually, most programs will want a <code>__name__ == "__main__"</code> guard. This guard will only be <code>True</code> if the program is called like <code>python poker.py</code> but <em>not</em> if it is imported like <code>from poker import main</code>. Also, it might be helpful to pass the players names as <code>sys</code> args:</p>

<pre class="lang-py prettyprint-override"><code>if __name__ == "__main__":
    import sys

    players = get_player_dict(sys.argv[1:])
    if not players:
        # since this is a cli-game anyways, might be helpful to display a 
        # use message if they called it with no players
        usage()
        sys.exit(0)

    main(players)
</code></pre>

<p>Where <code>usage</code> might look like:</p>

<pre class="lang-py prettyprint-override"><code>def usage():
    print("Call this script by passing the names of players as")
    print("sys-args like so:")
    print(" python poker.py Alice James Steve Laura ")
</code></pre>

<h1>Odds and Ends</h1>

<h2>Checking types of objects</h2>

<p>It is more pythonic to use <code>isinstance</code> rather than <code>type(obj) == &lt;type&gt;</code></p>

<pre class="lang-py prettyprint-override"><code>d = {}

# do this
if isinstance(d, dict):

# not this
if type(d) == dict:
</code></pre>

<p>And <code>is</code> is a keyword to stay away from, as it doesn't do exactly what you think it does, even though in this case it gives <code>True</code>, that's not always the case. Take this for example:</p>

<pre class="lang-py prettyprint-override"><code>a = []
b = []
a is b
False

# however
a == b
True
</code></pre>

<h2>Checking for emptiness of a container</h2>

<p>Checking to see if a <code>dict</code>, <code>list</code>, <code>set</code>, <code>tuple</code>, <code>string</code>, etc is empty should be done using its native <code>__bool__</code> implementation like this:</p>

<pre class="lang-py prettyprint-override"><code>d = {}

if not d:
   # empty
</code></pre>

<h2>Tracking an index in a loop</h2>

<p>Any time you see this kind of code:</p>

<pre class="lang-py prettyprint-override"><code>i = 0
for item in collection:
    # do something
    i += 1
</code></pre>

<p>It should be refactored to use <code>enumerate</code>:</p>

<pre class="lang-py prettyprint-override"><code>for i, item in enumerate(collection):
    # do something
</code></pre>

<h2>Multi-Line Statements</h2>

<p>Any time you have a statement that is going on for too long, you can use parentheses rather than <code>\</code> to wrap a long line:</p>

<pre class="lang-py prettyprint-override"><code>x = (1 + 2 + 3 + 4
+ 5 + 6 + 7)
</code></pre>
    </div>