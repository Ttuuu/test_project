<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Some comments:</p>

<ul>
<li>Converting to a binary string and then operating on the string is much slower and more laborious than operating on the bytes directly.</li>
<li>There is no need to collect all counts and then take the largest as we can just calculate the largest as we go.</li>
<li>Give your class and method appropriate names.</li>
<li>Check the precondition that the input is positive in the beginning of the method.</li>
</ul>

<p>Here is a streamlined but untested solution:</p>

<pre><code>class BinaryGapCalculator {
    static int binaryGap(final int n) {
        if (n &lt;= 0)
            throw new IllegalArgumentException("n must be positive; was " + n);
        final int start = Integer.lowestOneBit(n), end = Integer.highestOneBit(n);
        int curRun = 0, longestRun = 0;
        for (int bitmask = start; bitmask != end; bitmask &lt;&lt;= 1) {
            final int bit = n &amp; bitmask;
            if (bit == 0)
                ++curRun;
            else {
                longestRun = Math.max(longestRun, curRun);
                curRun = 0;
            }
        }
        return Math.max(longestRun, curRun);
    }
}
</code></pre>

<p>Regarding big-O, all solutions are technically O(1) because there are finitely many inputs. But if we were to pretend that an int could store arbitrarily many bits, the optimal solution would be θ(b) where b ~ log(n) is the number of bits of n. This is because the algorithm I wrote is θ(b) and the optimum must be at least as efficient as my algorithm; also there is no tighter bound than θ(b) because asymptotically, at least half of the input has to be seen. So my algorithm is optimal (up to a constant).</p>
    </div>