<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>While your approach might work, I consider it a <strong><em>hack</em></strong>. The preferred solution would be to <strong>create different models for <em>each</em> request</strong> so that the user does not have a chance of passing values that might not only not be required but even be forbidden.</p>

<p>Your new entities could be:</p>

<pre><code>class NewUser
{
    public string Name { get; set; }
}
</code></pre>

<p>Where there are is no <code>Id</code> if the AIP does not require it.</p>

<hr>

<p>It is a very bad idea to expose your database models to the caller. Create more specific models and map their properties to your database entities. </p>

<p>If you let the user the possibility of passing anything he wants, you would need to validate even more values to be sure he does not try to do something else than you want him to.</p>

<p>One such example could be when you have an API for updating <code>User.Name</code> but that user has a navigation property <code>Books</code> and the caller sends you some books too that will also get updated... just because he can. This might cause you a lot of trouble.</p>
    </div>