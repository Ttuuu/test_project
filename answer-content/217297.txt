<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your class has 4 methods:</p>

<ol>
<li><code>int[] LeftRotate(int, int[], int[])</code></li>
<li><code>int[] LeftRotate(int, int[])</code></li>
<li><code>int[] printArray(int[])</code></li>
<li><code>void main(String[])</code></li>
</ol>

<p>The second method is never called, and can be removed.</p>

<p>The first and third methods (and the second) all return an <code>int[]</code>, the <code>a</code> parameter, but the returned values are never assigned to anything.  This return value can be removed, and the methods declared to return <code>void</code>.</p>

<p>In the first method, you are looping over increasing <code>i</code> values, decrementing <code>n1</code>, and assigning to <code>a[a.length - n1]</code>.  This “double negative” makes the code harder to understand; decrementing <code>n1</code> increases the destination index value.  You already have a <code>i</code> index which in incrementing.  You could instead:</p>

<pre><code>for(int i = 0; i &lt; numberOfLeftRotations; i++) {
    a[a.length - numberOfLeftRotations + i] = b[i];
}
</code></pre>

<p>This is a little easier to understand; you are only changing <code>i</code>, increasing it, and adding it to a starting point for the destination.  We can make it a little clearer:</p>

<pre><code>int dest_start = a.length - numberOfLeftRotations;
for(int i = 0; i &lt; numberOfLeftRotations; i++) {
    a[dest_start + i] = b[i];
}
</code></pre>

<p>That is much more understandable.  Do the same for the second loop.</p>

<hr>

<p>The above is just a cleanup of your existing code.  We can restructure / refactor the code to make it better and easier to use.</p>

<p>When you want to left-rotate an array, you always need to create a new array for the destination.  You can make the left-rotate function create the destination array for the caller.</p>

<pre><code>int[] LeftRotate(int numberOfLeftRotations, int[] source) {
    int[] dest = new int[source.length];
    // ... copy rotated version from dest into source
    return dest;
}
</code></pre>

<p>And use it as:</p>

<pre><code>int[] b = LeftRotation(l, a);
</code></pre>

<p>In fact, this is probably what was intended for your second method.  The code to copy the rotated version from dest to source could just be a call of the first “helper” method:</p>

<pre><code>int[] LeftRotate(int numberOfLeftRotations, int[] source) {
    int[] dest = new int[source.length];
    LeftRotate(numberOfLeftRotations, dest, source);
    return dest;
}
</code></pre>

<p>Your first method should still be <code>void</code>, as it is not returning anything that wasn’t just passed to it.</p>

<hr>

<p>Copying sequential elements from one array to another is a common operation, and Java provides a method which does just that: <a href="https://docs.oracle.com/en/java/javase/12/docs/api/java.base/java/lang/System.html#arraycopy(java.lang.Object,int,java.lang.Object,int,int)" rel="noreferrer"><code>System.arraycopy()</code></a>.  Using this, your left rotation can be performed very efficiently in two statements:</p>

<pre><code>System.arraycopy(source, 0, dest, dest.length - numberOfLeftRotations, numberOfLeftRotations);
System.arraycopy(source, numberOfLeftRotations, dest, 0, dest.length - numberOfLeftRotations);
</code></pre>

<hr>

<p>Use better variable names.  <code>a</code> and <code>b</code> are unclear; <code>source</code> and <code>dest</code> give context to the reader.  <code>numberOfLeftRotations</code> is a very descriptive, but it is perhaps a little long.  <code>numLeftRotations</code> is just as clear and doesn’t result in lines becoming excessively long.  <code>numRotations</code> or <code>rotations</code> might be even better; the reader would know they are left rotations, because the variables are contained within a “left rotate” function.</p>

<p>Convention is for only Class names to begin with upper case letters; method names should not.  You should name the method <code>leftRotate</code>, not <code>LeftRotate</code>.</p>
    </div>