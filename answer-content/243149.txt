<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>As mentioned in the answer by Roland Illig, there is a module for that.</p>

<p>Example:</p>

<pre><code>from urllib.parse import urlparse

def get_domain_name(url: str) -&gt; str:
    """Return domain name from URL
    """
    parsed_uri = urlparse(url)
    return parsed_uri.hostname


get_domain_name('https://www.ucl.ac.uk/alumni/services')
</code></pre>

<p>Result:</p>

<pre>
'www.ucl.ac.uk'
</pre>

<p>NB: this requires a full URL with http/https scheme.</p>

<p>Third-level domain extensions are handled with no problems. This is the prefered approach. The Python philosophy is that there should be one obvious way of accomplishing a given task. It doesn't have to be more complicated.</p>

<p>if you know all domain names will end in .com and want to get rid of it, just add <code>.replace('.com', '')</code>.</p>

<p>A regular expression can also get the job done. Something like this will return <code>walmart</code>:</p>

<pre><code>^https://(?:www\.)?([a-z0-9_\-]+)\.com
</code></pre>

<p>Assuming that the URL always starts with <code>https://</code>, and the domain name ends in .com, with <code>www.</code> optional and not included in the <strong>capture group</strong>. </p>

<p>To explain this bit: <code>(?:www\.)?</code>
The rightmost question mark means the expression in parentheses is optional. <code>?:</code> means: match the expression but do not capture it.</p>

<p>This is not an all-purpose expression, it is adjusted to your circumstances and should be good enough for your needs but that's it.</p>

<p>Let's say you have more complicated cases with subdomains, as an example:</p>

<pre><code>url = 'www.subdomain.walmart.com'
</code></pre>

<p>Once you've got the full domain name, you could do some splitting then extract the relevant portions starting from the right, knowing that .com will be the last element:</p>

<pre><code>bits=url.split('.')
print(bits)
['www', 'subdomain', 'walmart', 'com']
print(bits[-2])
walmart
</code></pre>

<p>I think this is slightly more flexible than working with fixed lengths like you're doing.</p>

<p>As for reading/writing files have a look at <strong>context managers</strong> (using the <code>with</code> statement).</p>

<p>Your code is not very long but you would still benefit by keeping the parsing in one dedicated function (possibly two), out of your loop. That would make the whole code easier to read and maintain.</p>

<p>One remark regarding <code>www.</code>: at some point you will find that some sites do redirect to <code>ww1</code> or <code>ww2</code> or stuff like that. Not to mention other types of subdomains. It is not safe to assume that the domain name will always be prefixed with <code>www.</code> or nothing.</p>
    </div>