<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ol>
<li>Add type annotations.  (This is usually my first piece of advice to all new Python coders: start using type annotations and mypy.)  Adding some quick type annotations to your code and running <code>mypy</code> on it turned up the following bugs, which is a good demonstration of the sorts of mistakes that type checking can save you from:</li>
</ol>

<pre><code>hangman.py:18: error: Missing return statement
hangman.py:31: error: Name 'guess_word' is not defined
hangman.py:53: error: Name 'guess_word' is not defined
</code></pre>

<ol start="2">
<li><p>You probably want to use a <code>Set</code> rather than a <code>List</code> to track things like letters that have already been guessed (since you want it to be unique and you mostly want to check to see if things are in it).</p></li>
<li><p>Look for opportunities to create functions for discrete tasks.  "Get a letter from the user" is one that jumps out at me.  Creating a function that takes over the task of getting a guess and making sure it's in the expected format (i.e. a single upper-case letter) lets us remove a lot of code that has to repeatedly try to normalize that input.</p></li>
<li><p>Having tackled that, I see that there's a lot of code that tries to handle the case of the input being the complete word -- I'm not sure if that's a coding error or just confusion about the game design, but being as you're prompting the user to enter one letter at a time, it seems like we can get rid of all of this.</p></li>
<li><p>Your <code>dict</code> variable is unnecessary and badly named; you created it from an iterable but the only thing you're doing with it is converting it back to an iterable.  Just leave it as an iterable.  :)  The <code>wordlist</code> is unnecessary for the same reason.</p></li>
<li><p>Use whitespace and comments to offset individual blocks of code that do different things.</p></li>
<li><p>Again: delete unnecessary code.</p></li>
<li><p>From a design standpoint, I think your <code>game</code> function should either return a string representing the output or it should print it (and be solely in charge of the printing), not do some of the printing and return the rest for the caller to do.</p></li>
<li><p>Declare variables within the tightest scope possible.  Specifically, there's no reason to declare <code>slots</code> outside of the <code>game</code> function definition since it's only used within that function.  In this particular case it makes no functional difference, but it makes the code harder to read if you have to look outside the function to figure out where/how its state was initialized, and in a case where the function might be called multiple times you'd have to worry about keeping track of how changes to those shared variables affect different calls.  Better to avoid this if at all possible.</p></li>
</ol>

<p>Here's the updated script after making the edits (I implemented my own stub <code>Pick_Word</code> for testing):</p>

<pre><code>from typing import Set

class Pick_Word:
    @staticmethod
    def get_word() -&gt; str:
        return "foobar"

def get_guess(already_guessed: Set[str]) -&gt; str:
    """Prompt the user for a letter guess.
    Return value is guaranteed to be a single upper-case letter
    that's not in the already_guessed set."""
    while True:
        guess = input("Guess the letter: ").upper()
        if len(guess) == 1 and guess.isalpha() and guess not in already_guessed:
            return guess

def game(word: str) -&gt; None:
    """Run the hangman game with the given word."""
    word = word.upper()

    already: Set[str] = set()
    guess_num = 12
    slots = list('_' * len(word))

    # Let the game begin!
    print(' '.join(slots))

    while '_' in slots:
        # Get the next guess.
        guess = get_guess(already)
        already.add(guess)

        # Substitute the guess into matching slots.
        for i in range(len(word)):
            if word[i] == guess:
                slots[i] = guess

        # If the guess was a miss, subtract one turn.
        if guess not in word:
            guess_num -= 1

        print(' '.join(slots), '\n{} turns left'.format(guess_num))

        if guess_num == 0:
            print('Lose\nActual Word was: {}'.format(word.title()))
            return

    print('Win\nOnly {} more turns left over'.format(guess_num))

game(Pick_Word.get_word())
</code></pre>
    </div>