<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This class is much more complicated than it needs to be:</p>

<blockquote>
<pre><code>class BasicCoordinates
{
private:
    long long X;
    long long Y;

public:
    BasicCoordinates(const long long &amp; _X, const long long &amp; _Y)
    {
        X = _X;
        Y = _Y;
    }
    long long getX()
    {
        return X;
    }
    long long getY()
    {
        return Y;
    }

};
</code></pre>
</blockquote>

<p>A simple aggregate does the job and is more intuitive:</p>

<pre><code>struct Coordinates {
    long long x;
    long long y;
};
</code></pre>

<hr>

<p>This function is also quite convoluted:</p>

<blockquote>
<pre><code>bool StringContainsInteger(const std::string &amp; str)
// true : if the string contains an integer number (possibly starting with a sign)
// false: if the string contains some other character(s)
{
    std::string::size_type str_len = str.length();
    if (str_len == 0) return false;

    bool sign_present = (str[0] == '-' || str[0] == '+');
    if (str_len == 1 &amp;&amp; sign_present) return false;

    for (std::string::size_type i = 0; i &lt; str_len; i++)
    {
        if (i == 0 &amp;&amp; sign_present) continue;
        if (! std::isdigit((unsigned char) str[i])) return false;
    }

    return true;
}
</code></pre>
</blockquote>

<p>which is basically just:</p>

<pre><code>bool StringContainsInteger(std::string_view str)
{
    // C++20: str.starts_with('+') || str.starts_with('-')
    if (!str.empty() &amp;&amp; (str[0] == '+' || str[0] == '-')) {
        str.remove_prefix(1);
    }
    return std::all_of(str.begin(), str.end(),
                       [](unsigned char c) { return std::isdigit(c); });
}
</code></pre>

<p>(note that <code>std::string_view</code> is preferable to <code>const std::string&amp;</code> if all you want is read the characters in the string).</p>
    </div>