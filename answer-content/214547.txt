<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>In the general case, the answer to any question regarding sed is "use something else."  </p>

<p>Not that sed is not useful! It definitely is!  It's just that it's best for simple tasks that have compact, obvious solutions.  </p>

<p>In particular, Perl is good at replacing sed scripts, thanks to its more expressive regular expressions and uncomplicated access to conventional programming constructs.   It even comes with an automated tool to do the translation from sed to Perl, called <code>s2p</code>.</p>

<pre><code>perl -pli.bak -e'
    next unless s/^(\s*)(#\s*)?(?=server_names_hash_bucket_size)/$1/;
    tr/\d//d;
    s/;/64;/;
' nginx.conf
</code></pre>

<p>The newlines are optional and included for readability.  Line by line: </p>

<ol>
<li><ul>
<li><code>-p</code> means "print each line after running this code against it."  This should be familiar since sed works exactly the same way.   </li>
<li><code>-l</code> means "remove newlines before running the code and reinstate them before printing."  </li>
<li><code>-i.bak</code> means "edit in-place and save the original as <code>original.bak</code>".  </li>
<li><code>-e</code> means the same thing as in sed.</li>
</ul></li>
<li><ul>
<li>We're only interested in lines with <code>server_names_hash_bucket_size</code>, so skip to the next line if the replace fails (the unmodified line still prints; we're skipping the rest of this code but not the printing).  </li>
<li>We need to include lines that had no <code>#</code>, so make the <code>#</code> match optional with <code>?</code> after <code>(#\s*)</code>.   </li>
<li><code>(?=...)</code> is a lookahead; the text must exist but is not included in the left side of the substitution, so we don't need to include it on the right side.   Only the (optional) leading whitespace (<code>$1</code>) needs to be reinstated on the RHS.</li>
</ul></li>
<li><p><code>tr</code> works like <code>y</code> in sed.  This line is equivalent to <code>s/[0-9]//g</code> (as far as we're concerned.  Technically, there are digits other than 0-9 but they aren't going to appear in your nginx.conf.)</p></li>
<li><p>Same as sed.</p></li>
</ol>

<hr>

<p>You can simplify even further by recognizing that the only significant parts of a <code>server_names_hash_bucket_size</code> line, after you throw away the number, are the leading whitespace and terminal comments.  </p>

<p>Preserve the indent as before, throw away as many non-comment characters as possible (<code>[^#]*</code>) and rewrite the line in one replace operation:</p>

<pre><code>perl -pli.bak -e' s/^(\s*)(?:#\s*)?(server_names_hash_bucket_size)[^#]*/$1$2 64;/ ' nginx.conf
</code></pre>

<p><code>(?:</code> makes that group non-capturing, so the second capture (<code>$2</code>) will be <code>server_names_hash_bucket_size</code>.  </p>

<hr>

<p>At this point, we're back in "simple enough for sed" territory:</p>

<p><code>s/^\([[:blank:]]*\)\(#[[:blank:]]*\)*\(server_names_hash_bucket_size\)[^#]*/\1\3 64;/</code></p>
    </div>