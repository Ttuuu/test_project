<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here are a few mostly stylistic points.</p>

<pre><code>    def list_concatenator(your_list):
</code></pre>

<p>"list_concatenator" is a poor choice for a function name. I'd rather expect "concatenator" to be a class that provides concatenation. A function name is, more commonly, a verb, that tells what the function does (e.g. <code>sort</code>) or a noun describing what the function returns (e.g. <code>sqrt</code>). Besides, "concatenate a list" is a very vague description of the task at hand. Therefore I'd suggest to name your function like "join_with_serial_comma" or "oxford_comma_concat" or even "oxfordize" ;)</p>

<p>"your_list" is bad too (who's this "you" exactly?). It's just some list, so name it "some_list" or "a_list" or "lst". Moreover, since you're only using <code>len</code> and <code>[]</code> in your code, there's no reason to restrict your function to lists specifically, just make it accept any <a href="https://docs.python.org/3.7/glossary.html#term-sequence" rel="nofollow noreferrer">sequence</a> and name your argument like "sequence" or "seq"</p>

<pre><code>    items = len(your_list)
</code></pre>

<p>Again, poor variable naming. <code>items</code> is what the list contains (cf. <code>dict.items</code>), what you mean here is <code>length</code>, <code>size</code>, <code>number_of_items</code> and so on.</p>

<pre><code>    if items == 0:
        return 'Your list is empty'
</code></pre>

<p>An empty list is an exceptional situation for your function, and you can't and shouldn't return any value in this case. Much better option would be to raise an exception (<code>ValueError</code> would be a good choice), better yet, just remove this condition, the rest of the code is going to break anyways if the argument is empty (or not a sequence at all, for that matter). <a href="https://stackoverflow.com/questions/12265451/ask-forgiveness-not-permission-explain">Ask forgiveness, not permission</a>.</p>

<pre><code>    elif items == 1:
        return "'" + str(your_list[0]) + "'"
</code></pre>

<p>If the previous condition ends with <code>return</code> or <code>raise</code>, there's no need for <code>elif</code>, just <code>if</code> would be more readable.</p>

<pre><code>    elif items == 2:
        return "'" + str(your_list[0]) + ' and ' + str(your_list[1]) + "'"
</code></pre>

<p>As said in other posts, <code>format</code> or f-strings are usually more readable than concatenation.</p>

<pre><code>    else:
        your_list_split1 = (', '.join((map(str,your_list[:-1]))))
        return "'" + your_list_split1 + ', and ' + str(your_list[-1]) + "'"
</code></pre>

<p>Yet again, <code>your_list_split1</code> is a weird variable name, and doesn't reflect what the variable actually contains.</p>

<p>Since you always <code>return</code> from other branches, you can remove <code>else</code> here and reduce the indentation.</p>

<p>Comprehensions are usually more readable in python than <code>map</code>:</p>

<pre><code>    head = ', '.join(str(item) for item in sequence[:-1])
</code></pre>

<p>A more "pythonic" alternative to <code>-1</code> indexing would be an unpacking assignment:</p>

<pre><code>    *head, tail = seq
    head_joined = ', '.join(str(p) for p in head)
    return f'{head_joined}, and {tail}'
</code></pre>

<p>Hope this helps.</p>
    </div>