<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Thanks to the feedback of <a href="https://codereview.stackexchange.com/a/206660/40484">Pieter</a> and <em>Anon (answer since removed)</em>, here's the revised version of the above, should it be useful to others, or warrant further comment.</p>

<pre><code>using System.Collections.Generic;
using System.Linq;
using System.Diagnostics;
using System.Collections.Immutable;

namespace MyCompany.Collections.Generic
{
    public class ImmutableDictionaryEqualityComparer&lt;TKey, TValue&gt; : IEqualityComparer&lt;IImmutableDictionary&lt;TKey, TValue&gt;&gt;
    {
        readonly IEqualityComparer&lt;TKey&gt; keyComparer;
        readonly IEqualityComparer&lt;TValue&gt; valueComparer;

        public ImmutableDictionaryEqualityComparer() : this(null, null) { }
        public ImmutableDictionaryEqualityComparer(IEqualityComparer&lt;TKey&gt; keyComparer, IEqualityComparer&lt;TValue&gt; valueComparer)
        {
            this.keyComparer = keyComparer ?? EqualityComparer&lt;TKey&gt;.Default;
            this.valueComparer = valueComparer ?? EqualityComparer&lt;TValue&gt;.Default;
        }

        public bool Equals(IImmutableDictionary&lt;TKey, TValue&gt; x, IImmutableDictionary&lt;TKey, TValue&gt; y)
        {
            if (x == null || y == null) return (x == null &amp;&amp; y == null); //treat null == null, null != nonNull
            return BothHaveTheSameNumberOfItems(x, y)
                &amp;&amp; BothHaveIdenticalKeyValuePairs(x, y);
        }

        public int GetHashCode(IImmutableDictionary&lt;TKey, TValue&gt; obj)
        {
            //this is far from the most efficient formula for even distribution, but is good enough
            if (obj == null) return 0;
            long hashCode = obj.Count + 1;//if count is 0 ensure our hash code is different to when obj is null
            foreach (var key in obj.Keys)
            {
                hashCode += (key?.GetHashCode() ?? 1566083941) + (obj[key]?.GetHashCode() ?? 0); //assign a non-zero number to null keys (1566083941 used as an arbitrary number / also one which features often in other hashing algorithms) / treat null values as 0
                hashCode %= int.MaxValue; //ensure we don't go outside the bounds of MinValue - MaxValue
            }
            return (int)hashCode; //safe conversion thanks to the above %
        }

        private bool BothHaveTheSameNumberOfItems(IImmutableDictionary&lt;TKey, TValue&gt; x, IImmutableDictionary&lt;TKey, TValue&gt; y)
        {
            Debug.Assert(x != null);
            Debug.Assert(y != null);
            return x.Count == y.Count;
        }

        private bool BothHaveIdenticalKeyValuePairs(IImmutableDictionary&lt;TKey, TValue&gt; x, IImmutableDictionary&lt;TKey, TValue&gt; y)
        {

            Debug.Assert(x != null);
            Debug.Assert(y != null);
            Debug.Assert(x.Count == y.Count);
            return x.All(kvp =&gt; y.TryGetValue(kvp.Key, out var yValue) &amp;&amp; ValueEquals(kvp.Value, yValue));
        }
        private bool ValueEquals(TValue x, TValue y)
        {
            return valueComparer.Equals(x, y);
        }

    }
}
</code></pre>

<h1>Related Unit Test Class:</h1>

<p>(I haven't been able to write a test for the scenario which Pieter pointed out, since that scenario is no longer possible given the new design).</p>

<pre><code>using System.Collections.Generic;
using System.Collections.Immutable;
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace MyCompany.Collections.Generic.Test
{
    [TestClass]
    public class ImmutableDictionaryEqualityComparerTest
    {
        [TestMethod()]
        public void MatchingItemsMatchTest()
        {
            var instance = new ImmutableDictionaryEqualityComparer&lt;string, string&gt;();
            var a = (new Dictionary&lt;string, string&gt;() { { "One", "A" }, { "Two", "B" } }).ToImmutableDictionary();
            var b = (new Dictionary&lt;string, string&gt;() { { "Two", "B" }, { "One", "A" } }).ToImmutableDictionary(); //order doesn't matter
            Assert.IsTrue(instance.Equals(a, b));
            Assert.IsTrue(instance.Equals(b, a)); //test both ways round to ensure that equals is commutative (thanks https://english.stackexchange.com/a/471083/60075)
        }
        [TestMethod()]
        public void NonMatchingItemsDifferTest()
        {
            var instance = new ImmutableDictionaryEqualityComparer&lt;string, string&gt;();
            var a = (new Dictionary&lt;string, string&gt;() { { "One", "A" }, { "Two", "B" } }).ToImmutableDictionary();
            var b = (new Dictionary&lt;string, string&gt;() { { "One", "A" }, { "Two", "X" } }).ToImmutableDictionary();
            var c = (new Dictionary&lt;string, string&gt;() { { "One", "X" }, { "Two", "B" } }).ToImmutableDictionary();
            var d = (new Dictionary&lt;string, string&gt;() { { "One", "A" }, { "Two", "B" }, { "Three", "C" } }).ToImmutableDictionary();
            var e = (new Dictionary&lt;string, string&gt;()).ToImmutableDictionary();
            var f = (ImmutableDictionary&lt;string, string&gt;)null;
            Assert.IsFalse(instance.Equals(a, b));
            Assert.IsFalse(instance.Equals(b, a));
            Assert.IsFalse(instance.Equals(a, c));
            Assert.IsFalse(instance.Equals(c, a));
            Assert.IsFalse(instance.Equals(a, d));
            Assert.IsFalse(instance.Equals(d, a));
            Assert.IsFalse(instance.Equals(a, e));
            Assert.IsFalse(instance.Equals(e, a));
            Assert.IsFalse(instance.Equals(a, f));
            Assert.IsFalse(instance.Equals(f, a));
        }
        [TestMethod()]
        public void TwoNullsMakeARightTest()
        {
            var instance = new ImmutableDictionaryEqualityComparer&lt;string, string&gt;();
            var a = (ImmutableDictionary&lt;string, string&gt;)null;
            var b = (ImmutableDictionary&lt;string, string&gt;)null;
            Assert.IsTrue(instance.Equals(a, b));
            Assert.IsTrue(instance.Equals(b, a));
        }
        [TestMethod()]
        public void NullDoesNotMatchNonNullTest()
        {
            var instance = new ImmutableDictionaryEqualityComparer&lt;string, string&gt;();
            var a = (new Dictionary&lt;string, string&gt;() { { "One", "A" }, { "Two", "B" } }).ToImmutableDictionary();
            var b = (ImmutableDictionary&lt;string, string&gt;)null;
            Assert.IsFalse(instance.Equals(a, b));
            Assert.IsFalse(instance.Equals(b, a));
        }
    }
}
</code></pre>
    </div>