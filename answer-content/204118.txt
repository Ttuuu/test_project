<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Seems you already know how to use function, but still don't know how to use function with parameters, this will be a great tool for you to refractor your code.</p>

<p>I will give you some example about how to use function with parameters, list, loop and other useful skill for your code</p>

<p>For example:</p>

<pre><code>def create_widgets_in_first_frame():
    ...
    #These lines of code randomly select three wrong images for the wrong answers and adds the proper file path to all four options (including the correct answer)
    Image1 = ImagePath + random.choice(wronganswer)+ ".png"
    Image2 = ImagePath + random.choice(wronganswer)+ ".png"
    Image3 = ImagePath + random.choice(wronganswer)+ ".png"
    correctanswerImage = ImagePath + correctanswerText + ".png"
    #These four lines of code convert them to proper form for display in tkinter
    answer1 = PhotoImage(file=Image1)
    answer2 = PhotoImage(file=Image2)
    answer3 = PhotoImage(file=Image3)
    correctanswer = PhotoImage(file=correctanswerImage)
    ...

def create_widgets_in_second_frame():
    ...
    #These lines of code randomly select three wrong images for the wrong answers and adds the proper file path to all four options (including the correct answer)
    Image1 = ImagePath + random.choice(wronganswer)+ ".png"
    Image2 = ImagePath + random.choice(wronganswer)+ ".png"
    Image3 = ImagePath + random.choice(wronganswer)+ ".png"
    correctanswerImage = ImagePath + correctanswerText + ".png"
    #These four lines of code convert them to proper form for display in tkinter
    answer1 = PhotoImage(file=Image1)
    answer2 = PhotoImage(file=Image2)
    answer3 = PhotoImage(file=Image3)
    correctanswer = PhotoImage(file=correctanswerImage)
    ...

def create_widgets_in_third_frame():
    ...
    #These lines of code randomly select three wrong images for the wrong answers and adds the proper file path to all four options (including the correct answer)
    Image1 = ImagePath + random.choice(wronganswer)+ ".png"
    Image2 = ImagePath + random.choice(wronganswer)+ ".png"
    Image3 = ImagePath + random.choice(wronganswer)+ ".png"
    correctanswerImage = ImagePath + correctanswerText + ".png"
    #These four lines of code convert them to proper form for display in tkinter
    answer1 = PhotoImage(file=Image1)
    answer2 = PhotoImage(file=Image2)
    answer3 = PhotoImage(file=Image3)
    correctanswer = PhotoImage(file=correctanswerImage)
    ...

def create_widgets_in_forth_frame():
    ...
    #These lines of code randomly select three wrong images for the wrong answers and adds the proper file path to all four options (including the correct answer)
    Image1 = ImagePath + random.choice(wronganswer)+ ".png"
    Image2 = ImagePath + random.choice(wronganswer)+ ".png"
    Image3 = ImagePath + random.choice(wronganswer)+ ".png"
    correctanswerImage = ImagePath + correctanswerText + ".png"
    #These four lines of code convert them to proper form for display in tkinter
    answer1 = PhotoImage(file=Image1)
    answer2 = PhotoImage(file=Image2)
    answer3 = PhotoImage(file=Image3)
    correctanswer = PhotoImage(file=correctanswerImage)
    ...
</code></pre>

<p>The structure of your <code>create_widgets_in_xxxx_frame</code> functions are almost the same, and for this part, they are exactly the <strong>same</strong>, so we can define a function for it and just call it in the <code>create_widgets_in_xxxx_frame</code> functions.</p>

<p>The <code>wronganswer</code> and <code>correctanswerText</code> are variable in the <code>create_widgets_in_xxxx_frame</code> functions, and the <code>ImagePath</code> are constance for the functions, so we define a function with <code>wronganswer</code> and <code>correctanswerText</code> as parameters</p>

<pre><code>def generate_answers(wronganswer, correctanswerText):
    #These lines of code randomly select three wrong images for the wrong answers and adds the proper file path to all four options (including the correct answer)
    Image1 = ImagePath + random.choice(wronganswer)+ ".png"
    Image2 = ImagePath + random.choice(wronganswer)+ ".png"
    Image3 = ImagePath + random.choice(wronganswer)+ ".png"
    correctanswerImage = ImagePath + correctanswerText + ".png"
    #These four lines of code convert them to proper form for display in tkinter
    answer1 = PhotoImage(file=Image1)
    answer2 = PhotoImage(file=Image2)
    answer3 = PhotoImage(file=Image3)
    correctanswer = PhotoImage(file=correctanswerImage)
    return [answer1, answer2, answer3, correctanswer]
</code></pre>

<p>This means with different <code>wronganswer</code> and <code>correctanswerText</code>, the function will return different answers, so in all it looks like</p>

<pre><code>def generate_answers(wronganswer, correctanswerText):
    ...

def create_widgets_in_first_frame():
    ...
    answer1, answer2, answer3, correctanswer = generate_answers(wronganswer, correctanswerText)
    ...
...
</code></pre>

<p>Now let's have a look at the <code>generate_answers</code> function</p>

<pre><code>    Image1 = ImagePath + random.choice(wronganswer)+ ".png"
    Image2 = ImagePath + random.choice(wronganswer)+ ".png"
    Image3 = ImagePath + random.choice(wronganswer)+ ".png"
</code></pre>

<p>these are still exactly same code, how to just write one time and get three different images, now we need loop and array, we will use loop to run same code for 3 times and define a list to gather all these images we get from the loop </p>

<pre><code>Images = []
for i in range(3):# run 3 times
    image = ImagePath + random.choice(wronganswer)+ ".png"
    Images.append(image)
</code></pre>

<p>Now in the Images there are three items, we can unpack them using</p>

<pre><code>Image1, Image2, Image3 = Images
</code></pre>

<p>Or get particular item, for example get the first item <code>Image1 = Images[0]</code>
in python the first item is No.0 item, and etc.</p>

<p>So now the <code>generate_answer</code> function looks like this</p>

<pre><code>def generate_answers(wronganswer, correctanswerText):
    Images = []
    for i in range(3):
        image = ImagePath + random.choice(wronganswer)+ ".png"
        Images.append(image)
    Image1, Image2, Image3 = Images
    correctanswerImage = ImagePath + correctanswerText + ".png"
    #These four lines of code convert them to proper form for display in tkinter
    answer1 = PhotoImage(file=Image1)
    answer2 = PhotoImage(file=Image2)
    answer3 = PhotoImage(file=Image3)
    correctanswer = PhotoImage(file=correctanswerImage)
    return [answer1, answer2, answer3, correctanswer]
</code></pre>

<p>Now let's deal with the <code>answer1</code>, <code>answer2</code>, <code>answer3</code>
They are not that exactly the same, but almost, still we need loop and list for sure, but how to deal with that different <code>ImageX</code> part, then we need <code>Image1 = Images[0]</code> skill</p>

<p>In loop <code>for i in range(3)</code>, during the 3 times the loop run <code>i</code> equal <code>0</code>,<code>1</code>,<code>2</code>, separately</p>

<pre><code>answers = []
for i in range(3):
    answer = PhotoImage(file=Images[i])
    answers.append(answer)
</code></pre>

<p>so in finial, <code>generate_answer</code> function turn to be</p>

<pre><code>def generate_answers(wronganswer, correctanswerText):
    Images = []
    for i in range(3):
        image = ImagePath + random.choice(wronganswer)+ ".png"
        Images.append(image)
    correctanswerImage = ImagePath + correctanswerText + ".png"
    answers = []
    for i in range(3):
        answer = PhotoImage(file=Images[i])
        answers.append(answer)
    answer1, answer2, answer3 = answers
    correctanswer = PhotoImage(file=correctanswerImage)
    return [answer1, answer2, answer3, correctanswer]
</code></pre>

<p>Keep thinking, <code>answer = PhotoImage(file=Images[i])</code> and <code>correctanswer = PhotoImage(file=correctanswerImage)</code> are not so different, maybe we can just add <code>correctanswerImage</code> into <code>Images</code> first, and change the loop to <code>for i in range(4)</code> ^^, this will leave to you</p>

<p><code>ImagePath + random.choice(wronganswer)+ ".png"</code> we can just add path together, but in case that we forgot <code>/</code> or the <code>/</code> and '\' difference for different system, it is better to use <code>os.path.join</code></p>

<p>and for <code>random.choice(wronganswer)+ ".png"</code>, python3.x has format string, more elegant implement <code>f"{random.choice(wronganswer)}.png"</code></p>

<p>For all, my refractor is as this, just with skills I mentioned</p>

<pre><code>import os
def generate_answers(wronganswer, correctanswerText):
    images = [os.path.join(ImagePath, f"{random.choice(wronganswer)}.png") for _ in range(3)]
    images += [os.path.join(ImagePath, f"{correctanswerText}.png")]
    answers = [PhotoImage(file=images[i]) for i in range(4)]
    random.shuffle(answers)
    return answers
</code></pre>

<p>Then about your choices, you can refractor it to be</p>

<pre><code>answers = generate_answers(wronganswer, correctanswerText)
choices = []
for i in range(4):
    choice = Radiobutton(current_frame, image=answers[i], variable = var, value=i+1, command= Check_Answer)
    choice.image = answers[i]
    choices.append(choice)
</code></pre>

<p>Also I noticed you used <code>question = questionDirectory.get("question")</code> get is a good practice in dictionary but also, if the "question" not exist in your questionDirectory, the <code>question</code> will return <code>None</code>, I am sure you not wish question to be <code>None</code> to user so <code>setdefault</code> might be better choice</p>
    </div>