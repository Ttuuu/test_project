<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>I think my whole solution is \$O(N)\$ because both my methods are \$O(N)\$. Is that right?</p>
</blockquote>

<p>That's correct. You traverse the \$N\$ values twice,
the time complexity is \$O(N)\$.</p>

<blockquote>
  <p>I believe I used some space to generate the sums and it Is still \$O(N)\$. Is it right?</p>
</blockquote>

<p>Yes, you used extra \$O(N)\$ space.</p>

<blockquote>
  <p>Did I follow all the requirements in the problem? How can I improve this and make it faster?</p>
</blockquote>

<p>You followed the requirements, and apparently you got perfect score.
But you can do better, by using \$O(1)\$ instead of \$O(N)\$.</p>

<p>You don't need to store the sums in an array.
You can calculate the prefix sum as you go,
and return the index when <code>prefix == sum - prefix + A[i]</code>.
This also implies that you don't need <code>int res = -1;</code>, you can return the index immediately when you find it, and return -1 if the loop terminates without finding an equilibrium index.</p>

<pre><code>public int findEquilibriumIndex(int[] arr) {
    long sum = sum(arr);

    long prefix = 0;
    for (int index = 0; index &lt; arr.length; index++) {
        prefix += arr[index];
        if (prefix == sum - prefix + arr[index]) {
            return index;
        }
    }
    return -1;
}

public long sum(int[] arr) {
    long sum = 0;
    for (int value : arr) {
        sum += value;
    }
    return sum;
}
</code></pre>
    </div>