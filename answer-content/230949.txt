<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The question whether to use <code>(T) -&gt; Double</code> or <code>Comparator&lt;T&gt;</code> probably depends on your use case. If you have a scenario where you explicitly know, that your objects can always be mapped to a double, then it's fine to use <code>(T) -&gt; Double</code>. </p>

<p>On the other hand, once you have such a weighting function, then it's trivial to create a <code>Comparator</code> based on that. And (my gut says - I haven't researched it) the reverse (creating a weighting function out of a <code>Comparator</code>) may not be possible. That means a version using a <code>Comparator</code> would be more flexible.</p>

<blockquote>
  <p>Does this class seem useful? (Is it as useful as the name sounds?)</p>
</blockquote>

<p>I'm sure there is a scenario where this could be used, but I don't like the name either. Maybe something like <code>BestWeightHolder</code>?</p>

<blockquote>
  <p>Would this class benefit from implementing Kotlin's Collection interface?</p>
</blockquote>

<p>IMO, no, not directly. That actually touches one of my criticisms I have: You have several "utility" methods (<code>randomBest</code>, <code>firstBest</code> and possibly <code>contains</code>) which don't seem to fit into the purpose of the class IMO, especially since they can just as well be executed on the list returned by <code>toList</code>.</p>

<p>I think you should drop those methods and replace <code>toList</code> with an <code>asCollection</code> method, which returns not a copy of the list of best items, but a direct reference of your internal list limited to the <code>Collection</code> interface (or if you want to make sure it is not cast back to a <code>MutableList</code> and modified, an instance of a thin wrapper class that implements <code>Collection</code>). The user then can use <code>first()</code>, <code>random()</code>, <code>contains()</code>and more on that.</p>

<blockquote>
  <p>Any improvement suggestions that you can think of</p>
</blockquote>

<p>I'm not a big fan of the method name <code>next</code>. Methods of that name usually indicate a supplying method (as in an <code>Iterator</code>, for example). I'd suggest <code>add</code> or (following Java's <code>Integer/Long/DoubleSummaryStatistics</code> classes which have a similar function and which implement <code>Consumer&lt;T&gt;</code>) <code>accept</code>.</p>

<p>One tiny thing:</p>

<blockquote>
<pre><code>} else if (value &gt;= bestValue) {
</code></pre>
</blockquote>

<p>should use <code>==</code> instead of <code>&gt;=</code>.</p>

<p>And finally, personally, following Kotlin's pattern, I would consider implementing this as an immutable class.</p>
    </div>