<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>If you treated your 2 inputs as iterables instead of simply lists, you could think in terms of <code>for</code> loops with direct access to elements instead of using <code>__getitem__</code> all around. The second advantage being, obviously, that you can call the function using any iterable instead of only lists;Â so data that is in a file, for instance, can be processed with, <em>e.g.</em>:</p>

<pre><code>target = [4, 8, 15, 16, 23, 42]
with open(my_file) as f:
    common = sorted_lists_intersection(target, map(int, f))
</code></pre>

<p>without having to store the whole file in memory at once.</p>

<p>If you also make sure to turn your function into a generator, you can directly iterate over the results without having to store all of them at once in memory either; and you can still call <code>list</code> on the function if you truly need a list.</p>

<p>I propose the following implementation that have the same precondition than yours: the inputs must be sorted and should not contain duplicates:</p>

<pre><code>from contextlib import suppress


def intersect_sorted_iterables(iterable1, iterable2):
    iterator = iter(iterable2)

    with suppress(StopIteration):
        other = next(iterator)

        for element in iterable1:
            if element &gt; other:
                other = next(x for x in iterator if x &gt;= element)
            if element == other:
                yield element
</code></pre>

<p>This version will take advantage of <code>next</code> raising <code>StopIteration</code> to exit the loop when any of the iterable is exhausted, making it par with your <code>len</code> checks.</p>
    </div>