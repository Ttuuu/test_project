<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You biggest time waster appears to be this loop:</p>

<pre><code>    while f(x_k + alpha * p_k) &gt; f(x_k) + (alpha * c * (gradTrans  @ p_k))[0, 0]:
        alpha = ratio * alpha
</code></pre>

<p><code>f(x_k)</code>, <code>c</code>, <code>gradTrans</code>, and <code>p_k</code> are all constant in the loop, so you can compute <code>f(x_k)</code> and <code>c * (gradTrans @ p_k)</code> before the loop and use these computed values in the test expression, instead of recomputing the same values over and over.</p>

<pre><code>    fxk = f(x_k)
    offset = c * (gradTrans @ p_k)
    while f(x_k + alpha * p_k) &gt; fxk + (alpha * offset)[0, 0]:
        alpha = ratio * alpha
</code></pre>

<p>Doing so cuts the time roughly in half.</p>

<p>Similarly, <code>gradient(x_k)</code> is computed 3 times here:</p>

<pre><code>while abs((gradient(x_k)[0, 0])) &gt; 0.1 or abs((gradient(x_k))[0, 1]) &gt; 0.1:
    ...
    p_k = - gradient(x_k)
</code></pre>

<p>Again, compute once and store the result.</p>

<hr>

<p>You should probably use vectors instead of matrices:</p>

<pre><code>    x_k = np.array([10., 5.])
</code></pre>

<p>Which can be unpacked using tuple assignment:</p>

<pre><code>def f(x_k):
    x, y = x_k 
    return 100 * (y - x**2)**2 + (1 - x)**2
</code></pre>

<p>And using <code>10.</code> and <code>5.</code> in the above <code>x_k</code> initialization makes the arrays <code>float64</code> instead of <code>int32</code>, which allows you to use in-place addition operators:</p>

<pre><code>        x_k += alpha * p_k
</code></pre>

<p>instead of:</p>

<pre><code>        x_k = x_k + alpha * p_k
</code></pre>
    </div>