<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Python is a somewhat terse language.<br>
It has what it calls <a href="https://docs.python.org/3/library/operator.html#in-place-operators" rel="noreferrer">In-place Operators</a>. It is unusual to see them not used: change the likes of<br>
<code>change = (change % whatever)</code> to <code>change %= whatever</code></p>

<p>There are places where (almost) the same code reoccurs. There is <em>procedural abstraction</em>: once you give a <em>procedure</em> a (telling) name, you can use it in a terse way, time and again.<br>
If differences in <em>value</em> are all that makes code ranges just <em>almost</em> the same, introduce a <em>parameter</em>.</p>

<p>There are places where the same code appears once in every path in a nested conditional statement. Trivial fix if at the beginning or end: move before or after that statement.</p>

<pre class="lang-py prettyprint-override"><code>    nickels = change // 5
    if nickels != 0:  # this is to check if there is change at this point
        if nickels &gt; 1:
            print('{} Nickels'.format(nickels))
        else:
            print('{} Nickel'.format(nickels))
    change %= 5
</code></pre>

<p>(Well, "the" <em>pythonic</em> way may be <code>coins, change = divmod(change, denominations[d]</code>.)<br>
(Having been raised with %-formatting, if that, I don't have preferences re. <code>string.format()</code> vs. the misleadingly named <a href="https://docs.python.org/3/reference/lexical_analysis.html#formatted-string-literals" rel="noreferrer">formatted string literals</a>.)</p>
    </div>