<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Two focus areas for this review, first some style and code comments, and then a little discussion on a more optimal solution.</p>

<h2>Code and Style Comments</h2>

<ul>
<li><em>Mostly good and clean code</em> – I like to see clean, properly spaced, well named code, as it makes it a whole lot easier to understand (and easier for you to maintain in the long run).</li>
<li><em>Stick to <code>PascalCase</code></em> – This is already commented upon in another answer, but having equal naming and standards throughout your code really helps readability and eases the understanding of code. Which in turns, makes your code maintable.</li>
<li><em>Avoid magic numbers</em> – Within <code>GetSmallestEvenDivisibleNumber()</code> you use <code>2521</code>. This number pops out of nowhere in the context of the code. Not good. In addition, it introduces a bug if you try to find the solution for any range with <code>upperBound &lt; 10</code>.</li>
<li><em>Comment your code</em> – It is not given what the <code>IsEvenlyDivisible</code> method actually does, and I would spend some time commenting upon what it does. Something along the lines of <em>Checks whether <code>value</code> is a proper factor of all the numbers in the range <code>lowerBound</code> to <code>upperBound</code></em>.</li>
</ul>

<h2>Alternate Solution</h2>

<p>Most Euler problems have at least two major solution: The brute force solution, and an optimal solution. You've implemented the brute force of testing each and every number to see if it matches the criteria. In some cases the brute force can be improved somewhat, like skipping all the odd numbers, check for ending of 0 or 5, verify that the value is dividable by 3, and so on... This will usually lead to a somewhat faster solution, but when tackling the higher Euler Problems that'll not be enough.</p>

<p>Therefore it is a good idea to start looking for optimal solutions, and what is really asked for. In this case what is the number <code>2520</code>, and how have they derived at it? So what we now about that number:</p>

<ul>
<li>Is is dividable by the numbers in the range <code>1</code> through <code>10</code></li>
<li>By nature of previous statement, it also needs to be dividable by all of the factors of each of numbers in the range, so let us decompose the range:</li>
</ul>

<p>\begin{align}
1 &amp; \rightarrow 1 \\
2 &amp; \rightarrow 2 \\
3 &amp; \rightarrow 3 \\
4 &amp; \rightarrow 2 * 2 \\
5 &amp; \rightarrow 5 \\
6 &amp; \rightarrow 2 *3 \\
7 &amp; \rightarrow 7 \\
8 &amp; \rightarrow 2*2*2 \\
9 &amp; \rightarrow 3*3 \\
10 &amp; \rightarrow 2 * 5
\end{align}</p>

<ul>
<li>Grouping these factors we find that we have 3 * <code>2</code>'s, 2 * <code>3</code>'s, 1 * <code>5</code>, and 1 * <code>7</code>. Based upon these factors, we can compose any of the range, and as it turns out: \$ 2 * 2 * 2 * 3 * 3 * 5 * 7 = 8 * 9 * 5 * 7 = 2520\$</li>
</ul>

<p>In other words if you decompose each of the numbers of your range, and then count how many of each you need to create each of the numbers, this can be used to calculate the answer directly.</p>

<p>To help you get on the way for the range <code>1</code> through <code>20</code> let us decompose the final numbers as well:
\begin{align}
11 &amp; \rightarrow \mathbf{11} \\
12 &amp; \rightarrow 2 * 2 * 3 \\
13 &amp; \rightarrow \mathbf{13} \\
14 &amp; \rightarrow 2 * 7 \\
15 &amp; \rightarrow 3 * 5 \\
16 &amp; \rightarrow 2 * 2 * 2 * \mathbf{2} \\
17 &amp; \rightarrow \mathbf{17} \\
18 &amp; \rightarrow 2 * 3 * 3 \\
19 &amp; \rightarrow \mathbf{19} \\
20 &amp; \rightarrow 2 * 2 * 5  \\
\end{align}</p>

<p>I've <strong>bolded</strong> the numbers not already present in our set, and those are \$11 * 13 * 17 * 19 * 2 = 92738\$. So the end result will be: \$92738 * 2520 = 232792560\$.</p>

<p>So there you have yourself a new challenge: <em>Implement this alternate, but more efficient algorithm</em>. </p>
    </div>