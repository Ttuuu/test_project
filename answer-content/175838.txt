<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Avoid global variables</h3>

<p>There's no good reason for the variables <code>classes</code> and <code>grades</code> to be defined and manipulated in global scope.
For example, it would be better to pass <code>grades</code> into the <code>calculate</code> function as a parameter.</p>

<h3>Consider a table-driven solution</h3>

<p>The long if-else chain is tedious.
You could instead use a dictionary to map the grade notes to scores:</p>

<pre><code>score_map = {
    'A': 4,
    'C': 2,
    'C-': 1.7,
    'D': 1,
    # ... and so on
}
total = 0
for grade in grades:
    total += score_map[grade]
</code></pre>

<p>This approach also makes it easy to use a list-comprehension that's more compact than a for loop:</p>

<pre><code>return sum(score_map[grade] for grade in grades) / 6
</code></pre>

<h3>Usability</h3>

<p>Making the user enter the class names seems rather pointless.
The program simply prints them back, without doing anything interesting with them.</p>

<h3>Style</h3>

<p>The parentheses are redundant here:</p>

<blockquote>
<pre><code>while (y &lt;= 5):
</code></pre>
</blockquote>

<p>Instead of <code>y = y + 1</code> you can use the augmented assignment form <code>y += 1</code>.</p>

<p>Python has a style guide called <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">PEP8</a> with a utility to spot such issues.</p>
    </div>