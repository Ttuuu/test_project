<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ol>
<li><p>Keep your line-length under control. Horizontal scrolling is death on readability.</p></li>
<li><p><code>strprep()</code> is extremely inefficient, and even assuming the destination is big enough, you don't check whether allocation of your needless temporary buffer succeeds. Better to fix that:</p>

<pre><code>char *strprep(const char *prefix, char *dest) {
    size_t prefix_len = strlen(prefix);
    memmove(dest + prefix_len, dest, strlen(dest) + 1);
    memcpy(dest, prefix, prefix_len);
    return dest;
}
</code></pre></li>
<li><p>Assuming a user-supplied Buffer contains an empty string for no reason is certainly an <em>interesting</em> decision. It violates the principle of least surprise though, and leads to <strong>Undefined Behavior</strong> if the assumption proves unfounded.</p></li>
<li><p>I won't try to decipher what your cryptic single-character variables in <code>words()</code> are for. Do everyone (especially yourself) a favor and invest some more into finding good names.</p></li>
<li><p>Using <code>strlen()</code> to decide whether a string is empty? That's an \$O(n)\$ call where a primitive direct check is sufficient:</p>

<pre><code>if (!*dest) // dest is empty
</code></pre>

<p>Most optimizing compilers in hosted mode will succeed in lowering it to the above, but why write that much more and rely on it?</p></li>
<li><p>Actually, check for zero beforehand instead. No need to do so after failing to put it into words some other way.</p></li>
<li><p>Either your example code violates the contract of <code>words()</code>, or words is buggy. I suggest fixing <code>words()</code> to not assume the buffer is pre-filled with an empty string.</p></li>
<li><p>Consider merging multiple outputs into one request. Don't worry, due to adjacent string-literals being concatenated by the compiler, that need not result in one humungous string-literal.</p></li>
</ol>
    </div>