<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There are a number of things that could be improved with this code.  I hope you find these suggestions helpful.</p>

<h2>Specify which assembler</h2>

<p>Unlike C or Python, there are a great many variations in assembler syntax, even for the same architecture, such as the x86 of this code.  Generally, it's useful to note which assembler, which target processor and which OS (if any) in the comments at the top of the file.  In this case, it looked most like 16-bit TASM, so that's the compiler I used to test this code.</p>

<h2>Use an <code>ASSUME</code> directive</h2>

<p>The code would not assemble for me until I added an <code>ASSUME</code> directive. The <code>ASSUME</code> directive doesn't actually generate any code.  It simply specifies which assumptions the assembler should make when generating the output.  It also helps human readers of your code understand the intended context.  In this particular case, I added this line just after the <code>CODE SEGMENT</code> declaration:</p>

<pre><code>ASSUME CS:CODE, DS:DATA, ES:DATA
</code></pre>

<p>The <code>CS</code> and <code>DS</code> assumptions are obvious, but the <code>ES</code> assumption is less so. However, the code uses the <code>CMPSB</code> instruction and based on the context, this means an implicit assumption that <code>ES</code> also points to the <code>DATA</code> segment.  In my case, (emulated 16-bit DOS), I had to add a few statements to the start of the code to actually load the DS and ES segment registers appropriately.</p>

<h2>Avoid instructions outside any segment</h2>

<p>The <code>EXIT</code> code currently looks like this:</p>

<pre><code>EXIT:         
        CODE ENDS
        END
        RET
</code></pre>

<p>The problem is that the <code>CODE ENDS</code> closes the <code>CODE</code> segment and the <code>END</code> directive tells the assembler that there is no more code and thus the <code>RET</code> instruction may or may not be assembled, and may or may not actually be placed in the <code>CODE</code> segment.  You probably meant instead to do this:</p>

<pre><code>EXIT:         
        RET
        CODE ENDS
        END
</code></pre>

<h2>Eliminate convoluted branching</h2>

<p>Avoid needless branching.  They make your code harder to read and slower to execute.  For example, the code currently has this:</p>

<pre><code>        JA EXIT
        JE SAMELENGTH
        JB FIND

SAMELENGTH:
        CLD
        REPE CMPSB
        JNE RED
        JMP GREEN
        ; ... code elided
GREEN:  
        MOV BX, 0001H;  substring found
        JMP EXIT

RED:    
        MOV BX, 0000H;  substring not found
        JMP EXIT
EXIT:
</code></pre>

<p>This could be very much simplified:</p>

<pre><code>        JA EXIT
        JB FIND
        ;  fall through to same length
SAMELENGTH:
        XOR BX,BX      ; assume string not found
        CLD
        REPE CMPSB
        JNE EXIT
        INC BX         ; indicate that string was found
EXIT:
</code></pre>

<p>There are a number of such simplifications possible with little effort.</p>

<h2>Know your instruction set</h2>

<p>The code currently has this set of instructions</p>

<pre><code>        DEC DX
        CMP DX, 0000H
        JE RED
</code></pre>

<p>However, the <code>DEC</code> instruction already sets the <code>Z</code> flag, so the <code>CMP</code> instruction is not needed.</p>

<h2>Use <code>REPNE SCASB</code> as appropriate</h2>

<p>The code at the location <code>FIND</code> is largely the same as would have been done by using <code>REPNE SCASB</code>.  The only difference is in which registers are used.  The code you have isn't necessarily wrong, but it could probably be shorter.</p>

<h2>Avoid using <code>SP</code> as a general register</h2>

<p>Just after <code>CHECK</code>, the code saves a copy of the pointer (not an index as the comment falsely claims) to the <code>SP</code> register.  However, <code>SP</code> is a stack pointer, so this code can only be used in an environment in which the stack is not used.  That could be the case, but it makes the code much less portable to code it that way, especially because the <code>AX</code> or <code>BX</code> registers could just as easily have been used here.</p>

<h2>Consider using standard length lines</h2>

<p>The comments in the code are very long and the semicolon is right after the instruction. Neither of these things are necessarily wrong, but they are different from the usual convention which is to align the semicolon character in some column and making sure that lines are no more than 72 characters long (some use 78).  </p>
    </div>