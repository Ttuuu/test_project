<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Basics</strong>:</p>

<ul>
<li>Use a <code>point2d</code> struct to save the coordinates. It is better for the code: it is more cache friendly, and you can add methods to the structure that explain what are the functions, and you automatically impose the condition that the coordinate vectors are of appropriate size.</li>
<li>You don't need to return the whole vector of distances, just compute the average and return it.</li>
</ul>

<p><strong>To improve performance</strong>: the box idea is sufficient but implementation leaves a lot to be desired.</p>

<ul>
<li>The size of the box doesn't necessarily needs to be <code>cutoff</code> or <code>cutoff*1.1</code>. You might want it to be different depending on the density. For low density case, consider the box resolution to be <code>cutoff/sqrt(2)</code> so that points belonging to the same box are necessarily within the correct distance and you can skip the fine-distance filtration in this case. For high density case you can make the box small enough to contain just several points - so that the coarse box-based filtration is more accurate.</li>
<li>There is little need to arrange both sides into boxes, it is enough to arrange just one side into boxes and for each point from the other side simply find relevant boxes and then apply the fine cutoff filtration. Also now you can consider making the comparison not (box1 vs box2) but rather (point1 vs range_of_boxes2) for each row of boxes. It should be more cache friendly.</li>
<li>In the case when you have high point density compared to cutoff size, consider switching to "average square distance" from "average distance", as in this case it is much easier and faster (O(n) vs O(n^2)) to compute average distances points1 vs points2 (as long as all points are within the cutoff distance) - also it allows certain precomputation optimizations that are impossible with "average distance". If this is relevant I can elaborate.</li>
</ul>
    </div>