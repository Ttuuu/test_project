<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First on my Windows 10 computer in both Visual Studio 2015 and Visual Studio 2017 the console is killed by this line in the <code>update</code> function.</p>

<pre><code>    WriteConsoleOutputCharacter(hConsole, buf, nScreenWidth * nScreenHeight, { 0, 0 }, &amp;dwBytesWritten);
</code></pre>

<p>This may have to do with settings on my computer.</p>

<p>Second I get this warning message in both VS 2015 and 2017:</p>

<p>warning C4244: 'argument': conversion from 'time_t' to 'unsigned int', possible loss of data</p>

<p>on this line in the <code>genFood()</code> function.</p>

<pre><code>        srand(tim + rand());
</code></pre>

<p>It is generally not a good practice to ignore warning messages or disable warning messages.</p>

<p>Is there only one food item expected? That is all <code>genFood()</code> is placing in the buffer if food is represented by <code>*</code> (asterisk)?</p>

<p>The function <code>srand()</code> only needs to be called once per game after that <code>rand()</code> has been seeded and will generate different numbers each time. The call to <code>srand()</code> can probably be moved to <code>main()</code>.</p>

<p><strong>Class Versus Struct</strong><br>
C++ has other object types besides classes. One such object type is <code>struct</code>. In a <code>struct</code> by default all fields are public. A struct can also contain methods.</p>

<p>There is no reason to make <code>Snake_segment</code> a class, it has no methods, no constructor and no destructor.</p>

<p><strong>Constants</strong><br>
Having global constants such as <code>nFieldWidth</code> and <code>nFieldHeight</code> are good, however, to the person reviewing the code they look like variables. It might be better to make their names all CAPITALS to show that they are global constants.</p>

<p><strong>Complexity</strong><br>
This has been discussed in another answer, but there are clearly multiple functions in <code>main()</code> that should be in their own function. The code to get the user input including the <code>while(true)</code> loop should be in it's own function.</p>

<p>Another possible function is the initialization of the board.</p>

<p>The main game loop is also another good function.</p>

<p>As programs grow larger the main function becomes responsible for processing, each action of main should probably be encapsulated in a function. The primary job of main is:<br>
  - process any command line arguements<br>
  - set up for the main processing<br>
  - execute the main processing<br>
  - clean up after the program has finished<br>
  - handle any exceptions that are thrown (this might be handled any multiple levels in the program).</p>

<p><strong>Style</strong><br>
As mentioned in another answer, it might be better to have the <code>then</code> clause of an if statement on a second line and to wrap it in braces. This allows for additional code to be added at a later time without changing the structure of the program. </p>
    </div>