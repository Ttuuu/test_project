<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Valgrind reports a clean bill of health, but we get a handful of compiler warnings if we ask for them:</p>
<pre class="lang-none prettyprint-override"><code>gcc -std=c17 -fPIC -g -Wall -Wextra -Wwrite-strings -Wno-parentheses -Wpedantic -Warray-bounds      -Wconversion    214531.c    -o 214531
214531.c: In function ‘segstr’:
214531.c:42:20: warning: conversion to ‘size_t’ {aka ‘long unsigned int’} from ‘long int’ may change the sign of the result [-Wsign-conversion]
         *seg_len = delim_start - str;
                    ^~~~~~~~~~~
214531.c:50:12: warning: return discards ‘const’ qualifier from pointer target type [-Wdiscarded-qualifiers]
     return str;
            ^~~
214531.c: In function ‘main’:
214531.c:54:20: warning: initialization discards ‘const’ qualifier from pointer target type [-Wdiscarded-qualifiers]
     char *string = "This is sample text for testing in a sentence";
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
214531.c:68:44: warning: field precision specifier ‘.*’ expects argument of type ‘int’, but argument 3 has type ‘size_t’ {aka ‘long unsigned int’} [-Wformat=]
         printf("Word No. %u in sentence: %.*s\n", segment_num, segment_len, segment);
                                          ~~^~                  ~~~~~~~~~~~
</code></pre>
<p>I think that the second one (discarding <code>const</code>) is inevitable given that we want to allow calling with const strings and non-const strings (C++ can solve this with overloading, but that's not possible in C, and so we have the same problem as <code>strstr()</code> and similar).  It does mean that we need to be careful when we call <code>segstr()</code> that we ensure that we use the result consistently with the input.</p>
<p>It's probably better (particularly as this is intended for non-destructive reading) to use <code>const char*</code> as return type and require the caller to cast if writing is required - I think that's a fairly unlikely use-case.</p>
<hr>
<p>It seems from reading the code that tokenising an empty string gives back a single empty segment, rather than no segments at all (i.e. we never return <code>NULL</code> when <code>*seg_num</code> is zero).  I can see that either behaviour is reasonable, but the documentation should tell users what to expect.</p>
<p>Alternatively, if we return <code>NULL</code>, then there's no need for us to accept <code>seg_num</code>, and we can leave the counting (if required) to the caller.  That way, callers that don't need the counting don't pay the cost of it (both the runtime cost and the cognitive overhead).  As a compromise, we could interpret a null pointer passed as <code>seg_num</code> to indicate that counting isn't required.</p>
<pre><code>const char *segstr(const char *str, size_t *seg_len, char delim, unsigned int *seg_num)
{
    if (seg_num) {
        // we're keeping count
        if (*seg_num != 0) {
            // Check if we have reached the last segment
            str += *seg_len;
            if (str[0] == '\0') return NULL;

            // Proceed to the next segment
            ++str;
        }

        // Increment the segment number
        ++*seg_num;

    } else {
        // user does any counting - interpret zero seg_len to mean "first segment"
        str += *seg_len;
        if (str[0] == '\0') return NULL;
        if (*seg_len != 0) {
            ++str;
        }
    }

    // Find the delimiter
    const char *delim_start = strchr(str, delim);

    // Calculate the length of the segment
    if (delim_start) {
        // Difference between the delimiter and the start of the segment
        *seg_len = (size_t)(delim_start - str);
    } else {
        // We have reached the last segment
        // There is no delimiter, so use the remaining length
        *seg_len = strlen(str);
    }

    // Return the segment
    return str;
}
</code></pre>
<hr>
<p>Minor suggestions in the test program:</p>
<ul>
<li>It's best to initialize <code>segment</code> as we declare it</li>
<li>The <code>while</code> loop doesn't need to be infinite; we should loop while <code>segstr</code> returns non-NULL, and move the <code>if (!segment)</code> block to follow the loop.</li>
<li>Let's make <code>string</code> constant.</li>
</ul>

<pre><code>int main(void)
{
    const char *const string = "This is sample text for testing in a sentence";

    const char *segment = string;
    size_t segment_len = 0;
    unsigned int segment_num = 0;

    while ((segment = segstr(segment, &amp;segment_len, ' ', &amp;segment_num))) {
        printf("Word No. %u in sentence: %.*s\n", segment_num, (int)segment_len, segment);
    }

    puts("Printed all of the words in the sentence!");
}
</code></pre>
<p>Alternative (doing our own counting):</p>
<pre><code>    while ((segment = segstr(segment, &amp;segment_len, ' ', NULL))) {
        printf("Word No. %u in sentence: %.*s\n", ++segment_num, (int)segment_len, segment);
    }
</code></pre>
<hr>
<h2>Trivial</h2>
<ul>
<li>typo in comment: <code>has significance if it's value is</code>: the correct word here is <strong><code>its</code></strong>.</li>
</ul>
    </div>