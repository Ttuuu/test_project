<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your code is quite good, with some improvement margins:</p>

<h2>Be more expressive</h2>

<p>Uninitialized memory management isn't the best-known or the most often used area of C++. It does even look arcane to many C++ programmers. What I suggest is to make it more accessible:</p>

<ol>
<li><p>for "placement destructor call", there already is a standard function: <code>std::destroy_at</code>, which is arguably more readable than <code>pointer-&gt;~Type()</code>. And there's a range version (<code>std::destroy</code>) that would fit very well in your destructor.</p></li>
<li><p>for placement <code>new</code>, you could write a mirror function, <code>construct_at</code>.</p></li>
</ol>

<p>The your <code>remplace_at</code> would become very clear:</p>

<pre><code>std::destroy_at(_begin+pos);
construct_at (_begin+pos, std::forward&lt;Args&gt;(args)...);
</code></pre>

<p>I would also advise against negative array subscription, like <code>return _end[-1]</code> which, although correct, is unsettling. More generally, you should be consistent in the use of your <code>iterator</code>s: use either subscription or pointer-like syntax. My personal taste would be:</p>

<pre><code>// front()
return *_begin; // or better: return *begin() once you've defined it
// back()
return *std::prev(_end);
</code></pre>

<h2>Be more concise</h2>

<p>There's a lot of code repetition you could avoid.</p>

<p>You can now initialize your class variables where you declare them, so there is no need to do it in your default constructor, which can remain <code>default</code>:</p>

<pre><code> private:
  iterator _begin = nullptr;
  iterator _end   = nullptr;
  iterator _alloc = nullptr;
</code></pre>

<p>You can use <code>swap</code> to define your assignment operator and your value constructor, instead of doing it the other way around:</p>

<pre><code>fixed_buffer(fixed_buffer&amp;&amp; other) noexcept {
    swap(other, *this);
}

// ...

fixed_buffer&amp; operator= (fixed_buffer&amp;&amp; other) noexcept(is_noexcept_destructible) {
    // other is correctly destroyed at the end of this function, 
    // taking care of previous *this resources
    auto tmp = std::move(other);
    swap(tmp, *this); 
    return *this;
 }
</code></pre>

<p>You could have your pointers inside a <code>struct</code> to make it trivially swappable -you wouldn't even have to write <code>swap</code>then.</p>

<p>Macros should disappear from your code. If you want to avoid code duplication, write a function that computes the right message and pass its results to the exception's constructor:</p>

<pre><code>std::string out_of_range_message(std::size_t pos, std::size_t size, const std::string&amp; function_name);

// ...
// inside `at`
throw std::out_of_range(out_of_range_message(pos, size, __PRETTY_FUNCTION__));
</code></pre>
    </div>