<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You're right to be concerned about allocating memory in the function.  One obvious problem is that <code>malloc()</code> can return <em>a null pointer</em>, so we need to check for that before we think about using it:</p>

<pre><code>uint32_t* c = malloc(sizeof *c * num_chars);
if (!c) { return c; }
</code></pre>

<p>Making two passes over the input can be problematic, as then we have two pieces of code which need to agree closely, even for malformed input.  You might consider a single pass with occasional <code>realloc()</code>, to avoid overrunning the buffer.</p>

<p>Returning allocated memory can be inconvenient for the caller, and result in extra copying.  For example, the user may have a memory-mapped file, and would like the converted string to be written directly to that file, instead of receiving allocated memory which needs to be copied.  For this reason, I recommend an interface that allows the user to specify where to write the output, and how big that output space is (consider <code>snprintf()</code> as a possible model).</p>
    </div>