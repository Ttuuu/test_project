<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>If a <code>Member</code> can be owned by more groups that can correspond to <code>RulePart</code>s that can be either <code>Negated</code> or not, and that the <code>Negated</code> ownership take precedence over <code>!Negated</code>, I understand your code:</p>

<pre><code>public IEnumerable&lt;string&gt; GetRulePartMembers2(IEnumerable&lt;RulePart&gt; ruleParts, IEnumerable&lt;Group&gt; allGroups)
{
  IEnumerable&lt;string&gt; ExtractMembers(IEnumerable&lt;RulePart&gt; partialRuleParts, bool negated)
  {
    return partialRuleParts
      .Where(rp =&gt; rp.Negated == negated)
      .SelectMany(rp =&gt; rp.RulePartMemberImportIds)
      .SelectMany(importId =&gt;
      {
        Group group = allGroups.Single(g =&gt; g.ImportId == importId);
        var children = allGroups.Where(g =&gt; group.Children.Contains(g.ImportId));
        return group
        .Members
        .Union(ExtractMembers(group.RuleParts, negated)
              .Union(ExtractMembers(children.SelectMany(sg =&gt; sg.RuleParts), negated)))
        .Union(children.SelectMany(sg =&gt; sg.Members));
      });
  }

  return ExtractMembers(ruleParts, false).Except(ExtractMembers(ruleParts, true));       

}
</code></pre>

<p>If I test against your solution in the following way, I get the same result. I assume that the initial list of <code>RulePart</code>s is the gross list of all:</p>

<pre><code>  var groups = new[]
  {
    rootGroup,
    group01,
    group02,
    group03,
    group04,
    group05,
    group06,
    group07,
    group08,
  };

  var ruleParts = rootGroup.RuleParts; //groups.SelectMany(g =&gt; g.RuleParts).ToList();

  var expectedMembers = new List&lt;string&gt; { "member01", "member04", "member05", "member12" };

  RulePartTraverser traverser = new RulePartTraverser();

  Console.WriteLine(string.Join(", ", traverser.GetRulePartMembers(ruleParts, groups).OrderBy(m =&gt; m)));
  Console.WriteLine(string.Join(", ", traverser.GetRulePartMembers2(ruleParts, groups).OrderBy(m =&gt; m)));
</code></pre>

<p>I'm not convinced that my solution is more readable and clear than the yours - any more.</p>

<hr>

<p><strong>Update:</strong></p>

<p>In order to only iterate the rule parts once for both <code>Negated</code> and <code>!Negated</code> the following could be a solution:</p>

<pre><code>public IEnumerable&lt;string&gt; GetRulePartMembers2(Group rootGroup, IEnumerable&lt;Group&gt; allGroups)
{
  List&lt;string&gt; positiveMembers = new List&lt;string&gt;();
  List&lt;string&gt; negativeMembers = new List&lt;string&gt;();

  void AddMembers(RulePart rulePart, Group group)
  {
    if (rulePart.Negated)
      negativeMembers.AddRange(group.Members);
    else
      positiveMembers.AddRange(group.Members);
  }

  void ExtractMembers(IEnumerable&lt;RulePart&gt; partialRuleParts)
  {
    foreach (RulePart rulePart in partialRuleParts)
    {
      foreach (Group group in allGroups.Where(g =&gt; rulePart.RulePartMemberImportIds.Contains(g.ImportId)))
      {
        AddMembers(rulePart, group);
        ExtractMembers(group.RuleParts);

        foreach (Group childGroup in allGroups.Where(cg =&gt; group.Children.Contains(cg.ImportId)))
        {
          // This is the only thing that is not obvious: 
          // The members of a child group are added according to the rulePart of its parent?
          AddMembers(rulePart, childGroup);
          ExtractMembers(childGroup.RuleParts);
        }

      }
    }
  }

  ExtractMembers(rootGroup.RuleParts);

  return positiveMembers.Except(negativeMembers);
}
</code></pre>
    </div>