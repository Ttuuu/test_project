<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>General points</h2>

<ul>
<li><p>Move you constants and variable declarations to the top of the code. Keeping it all together make managing the development easier.</p></li>
<li><p>Game constants should be UPPER_CASE_SNAKE and don't put property names inside quotes</p></li>
</ul>

<p>eg </p>

<pre><code>const COLORS = {
  left: "#118c8b",
  right: "#f14d49",
  other: "#bca18d",
}
</code></pre>

<ul>
<li>The class syntax may seem convenient but you can build objects that encapsulate their working properties in such a way to avoid the need for the messy and semantically ambiguous <code>this</code> token (You have around 120 <code>this</code> tokens in your code)</li>
</ul>

<p>Example almost identical to your <code>Block</code> class but not a <code>this</code> in sight.</p>

<pre><code>function Block(x, y, size, type = "other") {
    const FILL_STYLE = COLORS[type];
    return {
        get x() { return x },
        get y() { return y },
        draw(ctx) {
            ctx.fillStyle = FILL_STYLE;
            ctx.fillRect(x, y, size, size);
            ctx.strokeRect(x, y, size, size);
        },
        move(addX, addY) {
            x += addX * size;
            y += addY * size;
        },
    };
}

const b = new Block(x, y, size, type);  // instantiate
// or you no longer need the new token
const b = Block(x, y, size, type);
b.move(1, 0);          // move right
filter(a =&gt; a &lt; b.y);  // access getter
</code></pre>

<ul>
<li>The way you define the shapes is a little over cooked and could be simplified with some additional code. Part of making a good game is being able to tune the game so ensuring that content is easily created and modified goes a long way to creating an engaging game.</li>
</ul>

<p>For example the following snippet build the pieces from strings</p>

<pre><code>const O_PIECE = "####";
const T_PIECE = "### # ";
const BAR_PIECE = "####";            
const Z_PIECE = " # ###";
const S_PIECE = " #### ";

const pieceData = [
  createPiece(O_PIECE,2),
  createPiece(T_PIECE,3),
  createPiece(S_PIECE,3),
  createPiece(Z_PIECE,2),
  createPiece(BAR_PIECE,4),      
];

function createPiece(layout, width, type = "other") {
    const height = layout.length / width;
    var i = layout.length;
    const build = []
    while(i--) { 
        if(layout[i] === "#") {
            const x = i % width;
            const y = i / width | 0;
            build.push([x, y]);
        }
    }
    return {
        builds: [build],
        type,
    };
}
</code></pre>

<h2>Build a resource</h2>

<p>Put your utility code together so that you can build a library of these as you develop other apps.</p>

<pre><code>const gMath = {};  // g for game maths
gMath.mod = (n, m) =&gt; (n % m + m) % m;
gMath.randInt = (min, max = min + (min = 0)) =&gt; Math.floor(Math.random() * (max - min) + min);
gMath.randItem = arr =&gt; arr[gMath.randInt(arr.length)];
</code></pre>

<h2>Rendering and timing</h2>

<p>Though this game does not require a high frame rate it is still best to have your rendering synced with the display. Using <a href="https://developer.mozilla.org/en-US/docs/Web/API/window/requestAnimationFrame" rel="nofollow noreferrer"><code>requestAnimationFrame</code></a> you can create a rendering loop that will run at 60fps (Frames per second)</p>

<p>To control the game render rate you use a frame counter and a render rate so that your game renders ever n frames</p>

<pre><code>requestAnimationFrame(mainLoop); // will start the animation loop when execution is idle
var frameCounter = 0;
var gameSpeed = 30; // Render every 30 frame or 1/2 second
var updateRender = true; // when true will re-render the game
function mainLoop(time) { // time is a high resolution time supplied by the DOM

    // call IO code here

    if (frameCounter % gameSpeed === 0) {
        updateGame(); // call the game update
        updateRender = true;
    }

    if (updateRender) {
        updateRender = false;
        draw(); // draw the game
    }


    frameCounter ++;
    requestAnimationFrame(mainLoop);
}
</code></pre>

<h2>Decouple the IO</h2>

<p>Try to keep the IO code separate from the game logic. Use IO events like keyboard and mouse/touch to set the state of an IO object. Use the IO objects interface to control the game</p>

<p>Example. The key states <code>IO.keys.</code> are true while the key is down and false if not. They remove the automatic repeating.</p>

<pre><code>const IO = {  
    keys: { // list only the keys you need
        ArrowLeft: false, 
        ArrowRight: false,
        ArrowDown: false,
        Escape: false,  // reset or end game
    },
    clear() {
        for(const key of Object.keys(IO.keys) { IO.keys[key] = false }
    },
    keyboard(event) {
        if (IO.keys[event.keyCode] !== undefined) {
            IO.keys[event.keyCode] = event.type === "keydown";
            event.preventDefault();
        }
    }
}
addEventListener("keydown", IO.keyboard);
addEventListener("keyup", IO.keyboard);
</code></pre>

<p>To use bind IO state to game actions so that you can reconfigure the IO without needing to go into the game code. Also allows you to bind additional IO types (like tap or click) to game actions.</p>

<pre><code>const GAME_DOWN = "ArrowDown"; // bind key to action
const GAME_LEFT = "ArrowLeft"; // bind key to action
const GAME_RIGHT = "ArrowRight"; // bind key to action
const KEY_REPEAT_RATE = 20; // every 20 frames 5 times a second
var rightRepeat = 0;
function doInput() {
    // Action while key is down
    if (IO.keys[GAME_LEFT]) {
        /* do stuff */
    }

    // Action only once per key down
    if (IO.keys[GAME_DOWN]) {
        IO.keys[GAME_DOWN] = false; // turn off key. 
        /* do stuff */
    }

    // Action repeats on key down
    if (IO.keys[GAME_RIGHT]) {
        if (rightRepeat === 0) {
            rightRepeat = keyRepeatRate;                
            /* do stuff */
        }
        rightRepeat--; // count down to next repeat
    } else {
        rightRepeat = 0; // reset repeat
    }

    // when changing levels clear the input state so if the user
    // is holding a key down it does not effect the new level or game
    IO.clear();
}
</code></pre>

<p>Don't forget that many devices are touch and do not have a keyboard. </p>

<h2>Encapsulate</h2>

<p>When it comes time to show off your game you will need it to be easily inserted into 3rd party pages.</p>

<p>To ensure there are no problems encapsulate the whole game so that it does not have content in the global scope. This can be done as a function that calls its self. IIF (immediately invoked function)</p>

<pre><code>;((container)=&gt; {
    "use strict";
    /* 
       All game code in here

    */
})(document.body);  // the container for your game
</code></pre>

<p>Part of the encapsulation is DOM content as well, you can not rely on the site hosting your game to supply content so try to make the game self reliant (Can run without linking to a site you host to supply content)</p>

<pre><code>const gDOM = {}; // g for game DOM 
gDOM.create = (tag, props = {}) =&gt; Object.assign(document.createElement(tag), props);
gDOM.append = (parent, ...children) =&gt; children.reduce((p, c) =&gt; (p.appendChild(c), p), parent);
</code></pre>

<p>Usage</p>

<pre><code>const styles = `
    tetris--score-display {
        /* add style stuff
    }
    /* and so on */
`;
gDOM.append(container, gDOM.create("style", {innerHTML: styles}));
const canvas = gDOM.create("canvas", {width: gameWidth, height: gameHeight});
const block = gDOM.create("canvas", {width: blockWidth, height: blockHeight}); 
const score = gDOM.create("div", {textContent: "Score:", className: "tetris--score-display"}); 
const level = gDOM.create("div", {textContent: "Level:", className: "tetris--level-display"}); 

const ctx = canvas.getContext("2d");
const bctx = block.getContext("2d");

gDOM.append(container, canvas, block, score, level);

// To set score or level
score.innerText = "Score: " + this.score;  // Note you had this.score.toString() the toString is autonomic
level.innerText = "Level: " + this.level;
</code></pre>

<h2>Responsive</h2>

<p>Make your game responsive to the space available. Fill as much of the space you get as possible, you don't want your game to be a tiny box on a 4K screen and worse you don't want your game to go outside the available view-able area.</p>

<p>Don't worry about performance as high res devices come with high end GPUs, but always set the canvas resolution to match the displayed size so you don't over cook the GPU.</p>
    </div>