<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Files</h1>

<p>Python is not Java, not every class needs it's own module. You can keep <code>Details</code>, <code>Virus</code> and <code>Person</code> in 1 file, <code>Display</code> can go in its own file, since that serves another purpose</p>

<h1>Programming tools</h1>

<p>You can let the IDE help you a lot by using a few tools. I myself use <code>black</code> as code formatter, <code>isort</code> to sort the imports, <code>pylama</code> with the linters <code>mccabe</code>,<code>pep8</code>,<code>pycodestyle</code>,<code>pyflakes</code> to check the code quality, <code>mypy</code> for the static type analysis and <code>py.test</code> for unit tests. All these tools nicely integrate in most common python IDEs</p>

<p>This is my <code>setup.cfg</code></p>

<pre><code>[pylama]
linters = mccabe,pep8,pycodestyle,pyflakes,mypy,isort

[pylama:*/__init__.py]
ignore=W0611

[pylama:pydocstyle]
convention = google

[pylama:mccabe]
max-complexity = 2

[pydocstyle]
convention = google

[isort]
multi_line_output=3
include_trailing_comma=True
force_grid_wrap=0
use_parentheses=True
line_length=79

[mypy]
check_untyped_defs = true
disallow_any_generics = true
disallow_untyped_defs = true
ignore_missing_imports = true
no_implicit_optional = true
warn_redundant_casts = true
warn_return_any = true
warn_unused_ignores = true

[mypy-tests.*]
disallow_untyped_defs = false
check_untyped_defs = false

[tool:pytest]
junit_family = xunit2
testpaths = tests
</code></pre>

<p>My project directory looks like this</p>

<pre><code>project_name/
- data/
    - raw/
    - processed/
- docs/
    - build/
    - source/
- notebooks/
    - 20200402 analysis interference.ipynb
    - ...
- output/
    - analysis1/
        - ...
- src/
    - package_name/
        - sub_module/
            - __init__.py
            - module1.py
            - module2.py
        - __init__.py
        - module1.py
        - module2.py
        - ...
- tests/
    - data/
    - conftest.py
    - test_feature1.py
    - ...
-.gitignore
- requirements_dev.txt
- requirements.txt
- setup.cfg
- setup.py
</code></pre>

<h1>Documentation</h1>

<p>Some docstring (PEP-257) would help users of your package to know what's going on. That includes you if you revisit this project a few months later.</p>

<h1>Type analysis</h1>

<p>I use type annotations for 2 reasons. It serves as additional documentation, and helps the IDE spot bugs for you, especially combined with a strict <code>mypy</code> configuration.</p>

<h1>Argument defaults</h1>

<p>You allow creating a person with a empty <code>id</code>, but do it nowhere. Why allow this feature? Then you would also not need to do this:</p>

<pre><code>    if discrete_location:
        self.dl_x,self.dl_y = discrete_location
    else:
        raise Exception()
</code></pre>

<p>That can be prevented as well by removing the default argument for <code>discrete_location</code>, and either removing the default for <code>id</code> as well or moving <code>id</code> to the back, or instructing python to get all arguments as keyword arguments.</p>

<h1>builtin sum</h1>

<p>You can use <code>sum</code> and the fact that a boolean counts as 1:</p>

<pre><code>def get_infected_count(self):
    infected_people = 0
    for person in self.persons:
        if person.infected:
            infected_people+=1
    return infected_people
</code></pre>

<p>can become</p>

<pre><code>def get_infected_count(self):
    return sum(person.infected for person in self.persons)
</code></pre>

<h1>generators</h1>

<pre><code>def get_infected_indices(self,infected_table):
    #returns the linear indices of those infected
    linear_indices=[]
    for i,row in enumerate(infected_table):
        for j,col in enumerate(row):
            if col:
                linear_indices.append(j+i*self.details_instance.num_people_1d)
    return linear_indices
</code></pre>

<p>can become a lot clearer as a generator</p>

<pre><code>def get_infected_indices(self,infected_table):
    """The linear indices of those infected."""
    for i, row in enumerate(infected_table):
        for j, col in enumerate(row):
            if col:
                yield j+i*self.details_instance.num_people_1d
</code></pre>

<h1>more functional programming</h1>

<p>Each iteration you follow these steps:</p>

<pre><code>for iter in range(total):
    infected_people = pop.get_infected_count()
    dead_people = pop.get_dead_count()
    print('The iteration we are on is %d with %d infected' %(iter,infected_people))
    simul_display.update_plot(current_infected,current_dead)


    pop.spread_infection(current_infected)
    current_infected=pop.get_infected_table()
    pop.kill_infected(current_infected)
    current_dead = pop.get_dead_table()
</code></pre>

<p>You are mutating you population in-place, and to do so, you need to follow a complicated series of steps. A simpler option would be to have a <code>Population.advance</code> method that returns a new <code>Population</code> instance representing the state of the population. That way you can keep track of what happened, who died, ...</p>

<h1><code>dataclasses</code></h1>

<p>These kind of classes lend themselves very good to be implemented using <code>dataclasses</code></p>

<h2><code>Person</code></h2>

<pre><code>@dataclasses.dataclass(frozen=True)
class Person:
    """A Person."""

    alive: bool = True
    virus: typing.Optional[Virus] = None

    @property
    def can_spread(self) -&gt; bool:
        """A person can spread the virus when he's alive and infected."""
        return self.alive and self.virus is not None

    def infect(self, virus: Virus) -&gt; Person:
        """Returns a new, infected Person."""
        return dataclasses.replace(self, virus=virus)

    def die(self) -&gt; Person:
        """Returns a new, dead Person."""
        return dataclasses.replace(self, alive=False)
</code></pre>

<p>Using an <code>@property</code> to check whether someone can spread the disease, and returning a new person when dying or getting infected instead of changing in-place.</p>

<p>In a later stage, allowing persons with multiple infections can be as simple as changing the <code>virus</code> to a <code>set[Virus]</code> and a small tweak to the <code>infect</code> method</p>

<h2>Virus</h2>

<pre><code>@dataclasses.dataclass(frozen=True)
class Virus:
    """A Virus."""

    infection_rate: float
    mortality_rate: float

    def spread(self, subject: Person) -&gt; Person:
        """Possibly infects the subject.

        In this simple algorithm, it just picks a random number
        in the range [0.0, 1.0)]

        i this number is lower than the `virus`'s infection rate,
        the person gets inected
        """
        dice_roll = random.random()
        if dice_roll &lt; self.infection_rate:
            return subject.infect(self)
        return subject

    def advance_infection(self, subject: Person) -&gt; Person:
        """Advance the virus infection in the subject.

        If not infected, does nothing.
        I infected, checks whether the subject dies.

        In this simple algorithm, it just picks a random number
        in the range [0.0, 1.0)]

        i this number is lower than the `virus`'s mortality rate,
        the person dies
        """
        dice_roll = random.random()
        if dice_roll &lt; self.mortality_rate:
            return subject.die()
        return subject
</code></pre>

<p>This is rather self-explanatory. Doing it like this lets you easily implement more sophisticated viruses with incubation_periods, ...</p>

<h2>Population</h2>

<pre><code>People = typing.List[typing.List["Person"]]  # for typing purposes


@dataclasses.dataclass(frozen=True)
class Population:
    """A Population."""

    people: People
    virus: Virus

    @property
    def infected_count(self) -&gt; int:
        """Returns the number of alive people who have been infected."""
        return sum(person.can_spread for person in self)

    @property
    def dead_count(self) -&gt; int:
        """Returns the number of dead people."""
        return sum(not person.alive for person in self)

    def __iter__(self) -&gt; typing.Iterator[Person]:
        """Yield all the people in the population."""
        return itertools.chain.from_iterable(self.people)

    @property
    def grid_size(self) -&gt; typing.Tuple[int, int]:
        """The gridsize of the population."""
        return len(self.people), len(self.people[0])
</code></pre>

<p>Defines a simple population. Instead of keeping one list of all the people in the population, we use a grid. This makes searching for the neighbours a lot simpler later on. Doing it like this also allows us to calculate the number of dead and infected on the fly, instead of having to keep track of that separately.</p>

<p>As a convenience, we supply a method to generate a pristine population:</p>

<pre><code>    @classmethod
    def new(cls, gridsize: int, virus: Virus) -&gt; Population:
        """Generates a new Population of healthy people."""
        return cls(
            people=[
                [Person() for _ in range(gridsize)] for _ in range(gridsize)
            ],
            virus=virus,
        )
</code></pre>

<p>To infect our initial person, we add an <code>infect_person</code> method:</p>

<pre><code>    def infect_person(self, x: int, y: int) -&gt; Population:
        """Infects the person a location x, y.

        Returns a new Population.
        """
        people_copy: People = [row[:] for row in self.people]
        people_copy[x][y] = people_copy[x][y].infect(self.virus)
        return Population(people=people_copy, virus=self.virus)
</code></pre>

<h1>spread the virus</h1>

<p>To spread the virus, I would use a helper method that operates on a grid of people. We iterate over the grid, looking for people who are alive and have the virus. Then looking in the cells around that person looking for people who can be infected.</p>

<pre><code>def _spread(people: People) -&gt; People:
    """Spread the disease in a population.

    returns a new people
    """
    rows = len(people)
    columns = len(people[0])
    people_copy: People = [row[:] for row in people]

    person: Person
    for i, row in enumerate(people):
        for j, person in enumerate(row):
            if not person.alive:
                continue
            if person.virus is None:
                continue
            for di, dj in [
                (-1, 0),
                (1, 0),
                (0, -1),
                (0, 1),
            ]:
                # iterate over the neighbours
                x, y = i + di, j + dj
                if (not 0 &lt;= x &lt; rows) or not (0 &lt;= y &lt; columns):
                    # out of bounds
                    continue

                neighbour = people[x][y]
                if not neighbour.alive or neighbour.virus is person.virus:
                    # dead or already infected
                    continue

                people_copy[x][y] = person.virus.spread(neighbour)
    return people_copy
</code></pre>

<p>I use the technique of the negative check a few time.</p>

<p>Instead of </p>

<pre><code>if person.alive:
    # spread the virus
</code></pre>

<p>I do:</p>

<pre><code>if not person.alive:
    continue
# spread the virus
</code></pre>

<p>This saves on a few levels of indentation, and makes the code easier to read.</p>

<h1>kill</h1>

<p>the <code>_kill</code> helper method works much in the same way:</p>

<pre><code>def _kill(people: People) -&gt; People:
    """Kills a portion of the infected.

    returns a new people
    """
    people_copy: People = [row[:] for row in people]
    person: Person
    for i, row in enumerate(people):
        for j, person in enumerate(row):
            if not person.alive:
                continue
            if person.virus is None:
                continue
            virus = person.virus
            people_copy[i][j] = virus.advance_infection(people_copy[i][j])
    return people_copy
</code></pre>

<p>If you want to give the people who have been infected just that tick a tick of repriece,you need to do something like this:</p>

<pre><code>def _kill(original_people: People, people_post_spread: People) -&gt; People:
    """Kills a portion of the infected of the previous tick.

    returns a new people
    """
    people_copy: People = [row[:] for row in people_post_spread]
    person: Person
    for i, row in enumerate(original_people):
        for j, person in enumerate(row):
            if not person.alive:
                continue
            if person.virus is None:
                continue
            virus = person.virus
            people_copy[i][j] = virus.advance_infection(people_copy[i][j])
    return people_copy
</code></pre>

<h1><code>Population.advance</code></h1>

<p>And now to the method why we did all this work has become very simple:</p>

<pre><code>def advance(self) -&gt; Population:
    """Advances the population 1 tick.

    1. Spread the virus
    2. Kill some of the infected

    This returns a new Population
    """
    people_post_spread = _spread(self.people)
    people_post_deaths = _kill(
        original_people=self.people, people_post_spread=people_post_spread
    )

    return Population(people=people_post_deaths, virus=self.virus)
</code></pre>

<h1>using the simulation:</h1>

<p>This simulation can be used very easily:</p>

<pre><code>if __name__ == "__main__":
    virus = Virus(infection_rate=.1, mortality_rate=.1)
    population = Population.new(gridsize=10, virus=virus).infect_person(4, 4)

    # print(population.dead_count, population.infected_count)
    assert population.dead_count == 0
    assert population.infected_count == 1

    populations: typing.List[Population] = [population]
    for i in range(1, 30):
        population = population.advance()
        populations.append(population)

        print(
            f"after {i} iterations: {population.infected_count} infected and "
            f"{population.dead_count} dead"
        )
</code></pre>

<p>And now you can use those <code>populations</code> to do analyses later, plotting, ...</p>

<h2>plotting</h2>

<p>Now you have the population as a grid, you can convert this grid to a numpy array</p>

<pre><code>def matrix(self) -&gt; np.array:
    """Creates a numpy array of the grid.

    A kind of bitmap
    0 = fine
    1 = infected, alive
    2 = not infected, dead
    3 = infected, dead
    """
    return np.array(
        [
            [
                (person.virus is not None) + 2 * (not person.alive)
                for person in row
            ]
            for row in self.people
        ],
        dtype="int8",
    )
</code></pre>

<p>Then the plotting is as simple as </p>

<pre><code>fig, ax = plt.subplots()
im = ax.imshow(population.matrix())
plt.show()
</code></pre>

<p>You can choose the colormap...</p>
    </div>