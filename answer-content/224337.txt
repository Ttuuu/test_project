<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Design</h3>

<p>Is a single queue acceptable, or does each animal need its own?</p>

<p>Multiple queues need more bookkeeping, as well as slight overhead when enqueueing an animal, or dequeueing the senior resident regardless of species.<br>
While one <em>can</em> put the entrance-order in the animal-class, it certainly does not belong.</p>

<p>A single queue potentially require looking at every single animal to find one of a specific species. On the flip-side, adding additional species comes naturally.</p>

<h3>Implementation</h3>

<ol>
<li><p><code>::std</code> is not designed for wholesale inclusion. It contains myriad symbols, there is no comprehensive list, and it is always evolving. Your code might not "work" today, but tomorrow it might fail to compile, or worse silently change ist meaning.<br>
Read "<a href="https://stackoverflow.com/q/1452721">Why is “using namespace std” considered bad practice?</a>" for more detail.</p></li>
<li><p>You are flat-out leaking all your animals.</p>

<p>As the program terminates directly afterwards, and <code>delete</code>ing them has no observable effect you depend on, that <a href="https://stackoverflow.com/a/25142157/3204551">could be a good idea</a>.<br>
That is, if it was intentional, well-explained, and not demo-code, but neither is the case.</p>

<p>Consider an appropriate use of smart-pointers, specifically <a href="https://en.cppreference.com/w/cpp/memory/unique_ptr" rel="nofollow noreferrer"><code>std::unique_ptr</code></a>, as manual resource-management is error-prone.</p></li>
<li><p>Generally, polymorphic types should have a virtual dtor, so they can be <code>delete</code>d polymorphically.</p></li>
<li><p>The string type is set to the classname when enqueueing? Rip that out at the roots, you can use the source directly.</p></li>
<li><p>Unless you need a friendly name for presistence or display, consider fully relying on builtin RTTI instead of adding your own home-grown variant. Use <code>typeid</code> if you want exact type-matching, or <code>dynamic_cast</code> if subtypes are fair game.</p></li>
<li><p>All member-functions defined inline are automatically <code>inline</code>.</p></li>
<li><p>Avoid needlessly copying strings, that's inefficient. Prefer <a href="https://en.cppreference.com/w/cpp/string/basic_string_view" rel="nofollow noreferrer"><code>std::string_view</code></a> where applicable.</p></li>
<li><p>Mark functions <code>noexcept</code> if you can.</p></li>
<li><p>Mark overrides <code>override</code> for documentation and to allow the compiler to catch mistakes.</p></li>
<li><p><code>printQueue()</code> clears it? That violates all expectations. And anyway, it should be <code>std::ostream&amp; operator&lt;&lt;(std::ostream&amp;, AnimalQueue const&amp;)</code>.</p>

<p>You probably should move from <code>std::queue</code> to directly using <code>std::deque</code> when fixing that, <a href="https://stackoverflow.com/a/5877652/3204551">even though you can safely access the underlying container</a>.</p></li>
</ol>

<p>Using a single shared queue (<a href="https://coliru.stacked-crooked.com/a/02fd7e7e6e92dda8" rel="nofollow noreferrer">also live on coliru</a>):</p>

<pre><code>#include &lt;algorithm&gt;
#include &lt;iostream&gt;
#include &lt;memory&gt;
#include &lt;string&gt;
#include &lt;string_view&gt;
#include &lt;utility&gt;
#include &lt;vector&gt;

class Animal {
public:
    virtual std::string_view friendlyName() noexcept = 0;
    virtual ~Animal() = default;
};

class Cat : public Animal {
    std::string _name;
public:
    Cat(std::string name) : _name(std::move(name)) {}

    std::string_view friendlyName() noexcept override { return "Cat"; }
};

class Dog : public Animal {
    std::string _name;
public:
    Dog(std::string name) : _name(std::move(name)) {}

    std::string_view friendlyName() noexcept override { return "Dog"; }
};

class Shelter {
    std::vector&lt;std::unique_ptr&lt;Animal&gt;&gt; _queue;
public:
    template &lt;class T = Animal&gt;
    std::unique_ptr&lt;T&gt; get() noexcept {
        auto pos = std::find_if(_queue.begin(), _queue.end(), [](auto&amp;&amp; x){ return dynamic_cast&lt;T*&gt;(x.get()); });
        if (pos == _queue.end())
            return {};
        std::unique_ptr&lt;T&gt; r(dynamic_cast&lt;T*&gt;(pos-&gt;release()));
        _queue.erase(pos);
        return r;
    }

    void put(std::unique_ptr&lt;Animal&gt;&amp;&amp; a) {
        if (a)
            _queue.push_back(std::move(a));
    }

    friend std::ostream&amp; operator&lt;&lt;(std::ostream&amp; os, Shelter const&amp; s) {
        for (auto&amp;&amp; x : s._queue)
            os &lt;&lt; x-&gt;friendlyName() &lt;&lt; ' ';
        os &lt;&lt; '\n';
        return os;
    }
};

int main()
{
    auto d1 = std::make_unique&lt;Dog&gt;("Max");
    auto d2 = std::make_unique&lt;Dog&gt;("Shaun");
    auto d3 = std::make_unique&lt;Dog&gt;("Tiger");
    auto c1 = std::make_unique&lt;Cat&gt;("Trace");
    auto c2 = std::make_unique&lt;Cat&gt;("Han");
    auto c3 = std::make_unique&lt;Cat&gt;("Meow");

    Shelter shelter;
    shelter.put(std::move(d1));
    shelter.put(std::move(c1));
    shelter.put(std::move(c2));
    shelter.put(std::move(d2));
    shelter.put(std::move(d3));
    shelter.put(std::move(c3));

    std::cout &lt;&lt; shelter;
    shelter.get();
    std::cout &lt;&lt; shelter;
}
</code></pre>
    </div>