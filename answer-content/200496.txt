<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>@Deduplicator already did a worthy review of the code itself, so I'm not going to repeat their points. I'll just add a few things:</p>

<ul>
<li>Don't use <code>std::endl</code>, ever. It's almost always wrong, and in the few cases it's not, it's better to use an explicit flush anyway. Just use <code>'\n'</code>.</li>
<li>Add <code>const</code> and <code>noexcept</code> qualifiers to member functions whenever possible. The <code>const</code> helps with correctness, the <code>noexcept</code> can help considerably with performance. In your case <code>count()</code> can be both <code>const</code> and <code>noexcept</code>, and remove can be <code>noexcept</code>.</li>
</ul>

<p>Now, considering what your code currently does (which I assume accurately reflects your intentions), you can't get any more efficient than a <code>vector</code>. <code>vector</code> just can't be beat. The creator C++ himself didn't believe this, so he tested it himself (he talks about it in <a href="https://youtu.be/0iWb_qi2-uI" rel="noreferrer">this presentation</a> starting at around 40-45 minutes, but his slides were broken, so check <a href="https://bulldozer00.com/2012/02/09/vectors-and-lists/" rel="noreferrer">this blog post</a> to see them). He tested up to 100,000 elements, so your ~500 element use case is covered.</p>

<p>Okay, so you're already using the best data structure. Can it still be better?</p>

<p>Yes.</p>

<p>The first trick, which @Deduplicator mentioned, is sorting. When a list of elements is sorted, you can do much faster binary searches on it, rather than the linear searches that <code>find()</code> does. So let's start by using a sorted vector:</p>

<pre><code>class Table
{
public:
    void insert(std::string);
    void remove(std::string_view name) noexcept;

    int count(std::string_view name) const noexcept;

private:
    std::vector&lt;std::string&gt; data;
};
</code></pre>

<p>As you can see, the class structure itself doesn't change.</p>

<p>Now the simplest thing to do with <code>insert()</code> is simply to <code>push_back()</code> and then <code>sort()</code>. But... that's a little inefficient given that you know the vector is already sorted except for that one last element.</p>

<p>So what would be better would be to find the place where the new value should be inserted, and then insert it there. For that, there's <code>std::upper_bound()</code>, which does a binary search and returns the first value greater than the given value. So if the list is <code>{"apple", "orange", "orange", "pear"}</code>, searching with <code>"orange"</code> would return an iterator to <code>"pear"</code>; if the list is <code>{"apple", "pear"}</code>, it would still return an iterator to <code>"pear"</code>. This is ideal because it works whether the value is already in the list or not, and if it is, it gives us the <em>end</em> of the repetitions, so that an insertion will trigger the smallest amount of shuffling around.</p>

<p>So <code>insert()</code> might look like this:</p>

<pre><code>void Table::insert(std::string name)
{
    auto const p = std::upper_bound(data.begin(), data.end(), name);
    data.insert(p, std::move(name));
}
</code></pre>

<p>As for <code>remove()</code> it works just fine as is! (It could be a little better. First you could use a binary search rather than <code>std::find()</code>. Then, rather than removing the <em>first</em> value you find, you could remove the <em>last</em>. This will trigger less moving around of stuff in the vector. For that you could use reverse iterators and <code>std::lower_bound()</code>.)</p>

<p>For <code>count()</code> it also works just fine as it is! (Once again, it could be better. You could use <code>std::equal_range()</code> to find the full range of matches quickly, then just subtract the iterators you get as result for the count.)</p>

<p>So this is all cool, and should be a bit faster than what you've got. But can we do even <em>better</em>?</p>

<p>Yes.</p>

<p>Consider: Is there any reason to store multiple copies of a string in the data? If someone adds "apple" 10 times, is it really necessary to add 10 "apple"s? Why not just keep "apple" and a count of 10?</p>

<p>To do this, you need to modify your data structure a little bit. Rather than <code>data</code> being a <code>vector&lt;string&gt;</code>, it should be a <code>vector&lt;tuple&lt;string, int&gt;&gt;</code>. That tuple stores the name and the count.</p>

<p>So the data structure now looks like this:</p>

<pre><code>class Table
{
public:
    void insert(std::string);
    void remove(std::string_view name) noexcept;

    int count(std::string_view name) const noexcept;

private:
    std::vector&lt;std::tuple&lt;std::string, int&gt;&gt; data;
};
</code></pre>

<p>Note the only change is to the type of <code>data</code>. The class's interface is unchanged.</p>

<p>So what would <code>insert()</code> look like. Well, the first thing you'd have to do is a <code>lower_bound()</code> search to find the value. Then:</p>

<ul>
<li>If the result of <code>lower_bound()</code> is <em>not</em> <code>data.end()</code>, <em>and</em> it points to a value equal to name, just increment the count.</li>
<li>Otherwise, add a new element to the vector with a count of 1.</li>
</ul>

<p>That might look like this:</p>

<pre><code>void Table::insert(std::string name)
{
    // A lambda comparator is needed to compare a string to a
    // tuple&lt;string, int&gt;. All it needs to do is get the first
    // element (the string), and do a normal comparison.
    auto const p = std::lower_bound(data.begin(), data.end(), name,
        [](auto&amp;&amp; v, auto&amp;&amp; e) { return v &lt; std::get&lt;0&gt;(e); });

    // If the result is not end, and the string matches...
    if (p != data.end() &amp;&amp; std::get&lt;0&gt;(*p) == name))
    {
        // ... update the count.
        ++std::get&lt;1&gt;(*p);
    }
    else
    {
        // ... otherwise, add a new item with a count of 1. Because
        // we used lower_bound, p either points to end or the first
        // element greater than name, so it's the right place to
        // insert before.
        data.emplace(p, std::move(name), 1);
    }
}
</code></pre>

<p><code>remove()</code> also has a special case to consider. First you find the item you want - you can use <code>std::binary_search()</code> for that. Then (assuming you find an item), you decrement its count. Now the special case is if the count is zero, you have to remove the item from the table.</p>

<p>That might look like this:</p>

<pre><code>void Table::remove(std::string_view name) noexcept
{
    auto const p = std::binary_search(data.begin(), data.end(), name,
        [](auto&amp;&amp; v, auto&amp;&amp; e) { return v &lt; std::get&lt;0&gt;(e); });

    if (p != data.end())
    {
        --std::get&lt;1&gt;(*p);
        if (std::get&lt;1&gt;(*p) == 0)
            data.erase(p);
    }
}
</code></pre>

<p>And from that, <code>count()</code> should be obvious:</p>

<pre><code>void Table::count(std::string_view name) const noexcept
{
    auto const p = std::binary_search(data.begin(), data.end(), name,
        [](auto&amp;&amp; v, auto&amp;&amp; e) { return v &lt; std::get&lt;0&gt;(e); });

    if (p != data.end())
    {
        return std::get&lt;1&gt;(*p);
    }
    else
    {
        return 0;
    }
}
</code></pre>

<p>That will give you the most compact, and almost certainly the fastest results.</p>

<p>The two key factors here are:</p>

<ul>
<li>Compact data representation. <code>vector</code> is as compact as it gets, but using a single tuple with a name and a count is also much more compact that storing a name multiple times.</li>
<li>Sorting. Sorted data is predictable, which means you can optimize accessing it with tools like <code>binary_search()</code> and <code>lower_bound()</code> and the other binary search algorithms.</li>
</ul>

<p>Put together, that will match the observable behaviour of your code, but should be many times faster.</p>
    </div>