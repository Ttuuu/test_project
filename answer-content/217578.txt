<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Since you are not showing a whole lot of the class itself, there is not to much fundamental to be done on the presented code.</p>

<h2>Documentation</h2>

<p>First, you should add documentation to your class and to its methods. Use the <code>"""..."""</code> to write those docstrings as recommended in the official <a href="https://www.python.org/dev/peps/pep-0008/#documentation-strings" rel="nofollow noreferrer">Style Guide</a>.</p>

<h2>Style</h2>

<p>The Style Guide also has a section on variable naming (<code>snake_case</code> is recommended). You're mostly following this convention, and that's also the reason why <code>Cookies</code> as variable name almost immediately caught my attention while first screening the code. The widely accepted convention is to only use names with the first letter capitalized for class names.</p>

<h2>Looping</h2>

<p>While I was at it, the following piece of code caught my attention next.</p>

<pre class="lang-py prettyprint-override"><code>Cookies = []
for hosti in range(len(hosts)):
    if hosts[hosti] in self.jar._cookies:
        Cookies.extend(self.jar._cookies_for_domain(hosts[hosti], w_r))
</code></pre>

<p>Since <code>hosts</code> is a list, and you're not trying to do anything fancy on the elements themselves, this can be simplified to</p>

<pre class="lang-py prettyprint-override"><code>cookies = []
for host in hosts:
    if host in self.jar._cookies:
        cookies.extend(self.jar._cookies_for_domain(host, w_r))
</code></pre>

<p>which I find easier to read.</p>

<h2>String formatting</h2>

<p>This snippet comes a little bit earlier in the code: <code>l_req_host = "%s%s" % (req_host, '.local')</code>. It uses the old-old Python string formatting using <code>%</code>. Since you specifically tagged your question as Python 3, I strongly recommend to make use of the new f-string synthax which allows you to write that same line as <code>l_req_host = f"{req_host}.local"</code>. <a href="https://realpython.com/python-f-strings/" rel="nofollow noreferrer">Here</a> is a nice blog post talking about all the different ways of string formatting in Python and their pros and cons.</p>

<h2>if statements</h2>

<p>Next up on my list would be <code>if w_r.has_header("Cookie") == False</code>. In general there is no need to do <code>if sth == True</code> or <code>if sth == False</code> in Python. Both can be conveniently expressed as <code>if sth</code> or <code>if not sth</code>. Usually this will also allow someone to read the expression almost as if it was text. If that doesn't work, maybe think about the name of your bool variable.</p>

<h2>Minor tweaks</h2>

<p>At the moment the last thing I could come up with was to change <code>self.processed = self.processed + 1</code> to <code>self.processed += + 1</code> which saves you a few characters of typing in the future.</p>
    </div>