<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>(Potential) Mistakes</strong></p>

<pre><code>typeof (_this.listRequest.CacheInterval !== "undefined")
</code></pre>

<p>This is not syntactically wrong, but it's not going to work the way you intended. This is going to return the type of the expression <code>(_this.listRequest.CacheInterval !== "undefined")</code>, which is of course a boolean. Therefore, the value of the expression <code>typeof (_this.listRequest.CacheInterval !== "undefined")</code> will always be the string <code>'boolean'</code>, which is a truthy value, so this condition will always evaluate as true and fail in its purpose as a short-circuit. You can just leave out the brackets:</p>

<pre><code>typeof _this.listRequest.CacheInterval !== "undefined"
</code></pre>

<p>Or, in the case of <code>undefined</code>, you can write it even more simply:</p>

<pre><code>_this.listRequest.CacheInterval !== undefined
</code></pre>

<p>Also, there's this line:</p>

<pre><code>window["Example.Widgets.Structure.GetLandingItems"] = _this.GetLandingItems;
</code></pre>

<p>Again, this isn't wrong, but I think this isn't what you meant. If you want to access this property later, you'll be able to it with <code>window["Example.Widgets.Structure.GetLandingItems"]</code>, but not <code>window.Example.Widgets.Structure.GetLandingItems</code>. I.e. this line will create a property on the <code>window</code> object with a very long name, and not a property on the <code>Structure</code> object called <code>GetLandingItems</code>.</p>

<p>If you want to use that line to define a static method on the class of your object, you can use the <code>constructor</code> property, which is available on all objects and refers to the constructor function:</p>

<pre><code>this.constructor.GetLandingItems = _this.GetLandingItems;
</code></pre>

<p><strong>Class declaration</strong></p>

<p>The first thing I'd recommend is to read up on ES6 class syntax, which is the preferred way of declaring classes these days.</p>

<p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes" rel="nofollow noreferrer">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes</a></p>

<pre><code>class Structure {
    constructor() {
        this.version = '1.0';
    }

    getDataFromCache(request) {
        // ...etc.
    }
}
</code></pre>

<p>Note however that this syntax still does not introduce private class members, and it doesn't make it possible to use a closure like you did. There's already a proposal in progress to introduce member visibility in JavaScript, but until then you might want to consider using TypeScript if you need that kind of control.</p>

<p><a href="https://www.typescriptlang.org/" rel="nofollow noreferrer">https://www.typescriptlang.org/</a></p>

<p>This is all completely optional though; functionally, your code looks good.</p>

<p><strong>Style</strong></p>

<p>These are just very minor things, but if you're going to work together with other JS developers, they will probably come up at some point.</p>

<ul>
<li>We start method and member names with lowercase letters: <code>getDataFromCache()</code>, <code>this.cacheInterval</code>, etc.</li>
<li>We always delimit strings with single quotes <code>'</code>. Right now you're mixing single and double.</li>
</ul>

<p>If you're using an editor such as VSCode, you can download a plugin called ESLint that marks all the style mistakes in your code.</p>

<p><a href="https://code.visualstudio.com/" rel="nofollow noreferrer">https://code.visualstudio.com/</a></p>

<p>Hope that helps.</p>
    </div>