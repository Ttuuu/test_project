<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your script consumes a lot of CPU due to the while loops. Using just the <code>input</code> function in a loop should be good enough for your purpose. I can't see the need for threading in a script that is quite basic for the moment.</p>

<p>These:</p>

<pre><code>global cont
global text
</code></pre>

<p>don't belong in your class.
A class is normally supposed to be self-contained and shouldn't have to rely on global variables defined elsewhere. They should go inside the class body.
On the other hand you can pass <strong>parameters</strong> to your class instantiation method or to some class functions.</p>

<p>By the way <code>text</code> is not a good choice of variable since many objects have a <code>text</code> property and be careful with reserved keywords.</p>

<hr>

<p><strong>Exception handling</strong> is lacking. Any quality script should have at least basic exception handling (ten lines of code could do).</p>

<hr>

<p><strong>Validation of user input</strong> is also lacking.
If I type anything after <code>help</code> I have a KeyError exception and your script crashes too easily. The dictionary selection is rather clumsy but see below for suggestions.</p>

<hr>

<p><strong>Structure</strong>: I am wondering why you split the code in two classes ?
<code>InputThread</code> could have been embedded in <code>CLI</code> as a subclass or simply implemented as a function. But they are not independent from each other.</p>

<hr>

<p><strong>Style</strong>: after:</p>

<pre><code>if __name__ in '__main__':
</code></pre>

<p>the norm is to call <code>main()</code>, so it is customary to have a <code>main</code> method.</p>

<p>You don't call a class like that:</p>

<pre><code>x = CLI().loop()
</code></pre>

<p>Instead:</p>

<pre><code>x = CLI()
</code></pre>

<p>with optional parameters inside the parentheses, or you run the code in multiple steps eg:</p>

<pre><code># instantiation
x = CLI()
# or:
x = CLI(prompt="Prompt message goes here")
x.start()
x.stop()
</code></pre>

<p>Because you can perfectly instantiate a class without immediately running it.</p>

<hr>

<p><strong>Naming conventions</strong>: variable names (<code>a</code>, <code>text</code>) are not always well-chosen and <code>meaningful</code>.</p>

<hr>

<p><strong>Misc</strong>: your script does not recognize commands in <strong>uppercase</strong>. I would always convert the commands to lowercase and use <code>strip</code> to trim them (here the <code>split</code> command takes care of that).</p>

<p>Overall impression: I think that this is a way of reinventing the wheel. There are modules that already exist for interactive cli programs, for example <a href="https://github.com/CITGuru/PyInquirer" rel="nofollow noreferrer">PyInquirer</a>. There is also <a href="https://pypi.org/project/clint/" rel="nofollow noreferrer">clint</a> and quite a few others (I have not tested and compared all of them).<br>
So I think I would build on the more mature solutions available, unless the problem you are trying to solve cannot be addressed adequately by the solutions that already exist.</p>

<p>An alternative would be to use feature-rich <a href="https://docs.python.org/3/library/argparse.html" rel="nofollow noreferrer"><code>argparse</code></a>. Because it can be used not only for command line options but in functions too (I haven't done that yet though but it's worth investigating). To give you an idea have a look at this post on SO: <a href="https://stackoverflow.com/a/46418808/6843158">How to pass parameters to python function using argparse?</a>. Also have a look at the <a href="https://docs.python.org/3/library/argparse.html#sub-commands" rel="nofollow noreferrer">Sub-commands</a> section for more elaborate scenarios. As you can see this module is very powerful and very often underutilized.</p>

<p>It seems to me that it could have fulfilled all your desired functionality, with increased flexibility since the commands could be passed in a different order, as long as the grouping of dependent parameters is respected.</p>
    </div>