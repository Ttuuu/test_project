<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Summary:</strong></p>

<ul>
<li><strong>Better comments and docstrings.</strong></li>
<li><strong>Separate code that prints messages and computes values.</strong></li>
<li><strong>Try not to do too much in a single function.</strong></li>
</ul>

<p>Big things:</p>

<ul>
<li><p>First time I tried to run the program, it immediately hit an error:</p>

<pre class="lang-none prettyprint-override"><code>$ tail -n 1 /usr/share/dict/words
Zyzzogeton

$ md5 -s "Zyzzogeton"
MD5 ("Zyzzogeton") = 4f9c55496b14676f23f40117cc89e641

$ python hashcrack.py -h "4f9c55496b14676f23f40117cc89e641" -t md5 /usr/share/dict/words

Python Hash-Cracker
Version 3.0-2 Stable
[Running on posix]

[*]Hash: 4f9c55496b14676f23f40117cc89e641
[*]Hash type: md5
[*]Wordlist: None
[+]Cracking...
Traceback (most recent call last):
  File "hashcrack.py", line 172, in &lt;module&gt;
    main(sys.argv[1:])
  File "hashcrack.py", line 157, in main
    h.hashcrack(hash1, type)
  File "hashcrack.py", line 52, in hashcrack
    wordlist1 = open(wordlist, "r")
TypeError: coercing to Unicode: need string or buffer, NoneType found
</code></pre>

<p></p>

<p>Turns out I’d forgotten the <code>-w</code> flag – your program should be better about handling malformed user input.</p></li>
<li><p>You should read <a href="https://www.python.org/dev/peps/pep-0008/">PEP 8</a>, the Python style guide. Among other things: indentation is inconsistent (Python standard is 4 spaces, but this file uses 2, 3 and 4 interchangeably); class names should be CamelCase, two blank lines between functions.</p></li>
<li><p>I would consider using something like <a href="http://docopt.org">docopt</a> to do the command-line argument parsing. Even if you don’t use docopt, it’s worth looking at the style of usage message it requires:</p>

<ul>
<li>There’s a standard format for usage messages on command-line tools. Sticking to this format will make it easier for other people to quickly pick up using your tool.</li>
<li>There’s a long-standing convention of using <code>-h</code> or <code>--help</code> to print help information. Using <code>-i</code> to get info is fairly unusual.</li>
<li>And using docopt would allow you to simplify a big chunk of your argument-parsing code. </li>
</ul></li>
<li><p>There are no comments or docstrings in this code, which makes it hard to work out what something is doing (and by extension, whether it’s doing it correctly).</p></li>
<li><p>A function should either do something (e.g. print to the screen) or return a value. Your functions tend to intersperse printing with computation. If I want to get the result of a function but without the printing, that's quite hard to do. Separating the two will make it easier to reuse your code.</p>

<p>(You could use something like the <a href="https://docs.python.org/3.5/library/logging.html"><code>logging</code> module</a> for messages you want to print mid-computation, as logging is easier to turn off than printing to stdout.)</p>

<p>More generally, I’d consider breaking your code down into smaller functions. Each function can be written and tested individually, and it tends to make it easier to see what’s going on.</p></li>
</ul>

<p>And smaller comments:</p>

<ul>
<li><p>Common convention is that if a program runs successfully, it exits with code 0; any other outcome is a non-zero exit code. If I ask to check with a non-existent hash, the <code>exit()</code> on line 91 will print an error, then exit with code 0. Also, errors should be printed to stderr, not stdout.</p></li>
<li><p>Rather than a big branch of <code>if … elif</code> statements in <code>hashcracknum()</code>, use a dict for the lookup of hash name to hash function. Python hash tables are very efficient.</p></li>
<li><p>Your code could be better about handling user input. For example, this command:</p>

<pre><code>python hashcrack.py -h notahash -t MD5 -w /usr/share/dict/words
</code></pre>

<p>I claim that the hash function I want to use is obvious to a human reader, but this causes the script to error.</p></li>
<li><p>Don’t use <code>type</code> as a variable name; overriding <a href="https://docs.python.org/3.5/library/functions.html#built-in-funcs">built-in functions</a> is a recipe for weirdness.</p></li>
<li><p>You definitely shouldn’t name a class <code>hash</code>. This overrides a builtin Python function (that’s used in quite a few places), classes should have CamelCase names, and it’s not particularly descriptive.</p></li>
<li><p>Your <code>check_os()</code> function will throw a NameError if called on a  platform where <code>os.name</code> isn't <code>nt</code> or <code>posix</code>. If you want a human-readable platform name, you might want to look at the <a href="https://docs.python.org/3.5/library/platform.html"><code>platform</code> module</a>, which tends to have more granular names.</p></li>
<li><p>Don’t print anything at the module level outside the <code>main()</code> function – if anybody tries to <code>import</code> this file, those <code>print</code>s will be executed no matter what. That makes it very annoying to reuse your code.</p></li>
<li><p>It’s common practice for Python modules/libraries to present a <code>__version__</code> attribute – it would be good to do that for your version string.</p></li>
</ul>
    </div>