<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>1 Terminology</strong></p>

<p>What you deal with here, is actually finding a longest positive <em>substring</em> and not a <em>subsequence</em>, since sequences may have "gaps". For example, if we are given a sequence \$S = \langle 1, 2, 3, 4, 5 \rangle\$, \$\langle 2, 3, 4 \rangle\$ is a substring of \$S\$, whereas \$\langle 2, 4, 5 \rangle\$ is not.</p>

<p><strong>2 API design</strong> </p>

<p>You should have a separate method for computing the longest positive subsequence outside of <strong><code>main</code></strong>. That way, you can reuse your algorithm. Also, it would be nice if your algorithm returned a class that fully describes the solution.</p>

<p><strong>3 Coding conventions</strong></p>

<p>The indentation of 8 spaces is too much. Consider using 4.</p>

<p>You should always have a space before and after a binary operator. So instead of </p>

<pre><code>if (foo==bar) ...
</code></pre>

<p>you should write</p>

<pre><code>if (foo == bar) ...
</code></pre>

<p>Also, you should have a space before and after the parenthesized expression. Instead of </p>

<pre><code>for(int i = 0; i &lt; 10; ++i){ ...
</code></pre>

<p>you should write</p>

<pre><code>for (int i = 0; i &lt; 10; ++i) { ...
</code></pre>

<p><strong>4 Algorithm</strong></p>

<p>You are overkilling it. See below for alternative implementations.</p>

<p><strong>Summa summarum</strong></p>

<p>All in all, I had this in mind:</p>

<pre><code>import java.util.Objects;
import java.util.Random;

public class IntSequenceUtils {

    public static final class PositiveSequence {
        private final int fromIndex;
        private final int toIndex;

        PositiveSequence(final int fromIndex, final int toIndex) {
            this.fromIndex = fromIndex;
            this.toIndex   = toIndex;
        }

        public int getFromIndex() {
            return fromIndex;
        }

        public int getToIndex() {
            return toIndex;
        }

        public int length() {
            return toIndex - fromIndex;
        }

        public String getSequenceString(final int[] array) {
            final StringBuilder sb = new StringBuilder("[");
            final int length = length();

            if (length &gt; 0) {
                sb.append(array[fromIndex]);
            }

            for (int i = fromIndex + 1; i &lt; toIndex; ++i) {
                sb.append(", ").append(array[i]);
            }

            return sb.append("]").toString();
        }

        @Override
        public boolean equals(Object object) {
            if (object == null) {
                return false;
            }

            if (!getClass().equals(object.getClass())) {
                return false;
            }

            PositiveSequence other = (PositiveSequence) object;

            return getFromIndex() == other.getFromIndex() 
                    &amp;&amp; getToIndex() == other.getToIndex();
        }

        @Override
        public int hashCode() {
            int hash = 3;
            hash = 59 * hash + this.fromIndex;
            hash = 59 * hash + this.toIndex;
            return hash;
        }
    }

    public static PositiveSequence 
        findLongestPositiveSequenceStartIndex(final int[] array) {
        Objects.requireNonNull(array, "The input array is null.");

        int bestFromIndexSoFar       = 0;
        int bestToIndexSoFar         = 0;
        int maximumLengthSoFar       = 0;
        int currentSubsequenceLength = 0;
        int newFromIndex             = 0;

        for (int i = 0; i &lt; array.length; ++i) {
            if (array[i] &lt; 0) {
                newFromIndex = i + 1;
                currentSubsequenceLength = 0;
            } else if (maximumLengthSoFar &lt; ++currentSubsequenceLength) {
                maximumLengthSoFar = currentSubsequenceLength;
                bestFromIndexSoFar = newFromIndex;
                bestToIndexSoFar   = i + 1;
            }
        }

        return new PositiveSequence(bestFromIndexSoFar, bestToIndexSoFar);
    }

    public static PositiveSequence
        findLongestPositiveSequenceStartIndex2(final int[] array) {
        Objects.requireNonNull(array, "The input array is null.");

        int bestPositiveSequenceLengthSoFar = 0;
        int bestStartIndex                  = 0;

        for (int index = 0; index &lt; array.length; ++index) {
            if (array[index] &gt;= 0) {
                int i = index + 1;

                while (i &lt; array.length &amp;&amp; array[i] &gt;= 0) { 
                    i++; 
                }

                if (bestPositiveSequenceLengthSoFar &lt; i - index) {
                    bestPositiveSequenceLengthSoFar = i - index;
                    bestStartIndex = index;
                }

                index += i - index;
            }
        }

        return new PositiveSequence(bestStartIndex, 
                                    bestStartIndex + 
                                            bestPositiveSequenceLengthSoFar);
    }

    public static void main(String args[]) {
        final long seed = System.nanoTime();
        final Random random = new Random(seed);

        System.out.println("Seed = " + seed);

        for (int i = 0; i &lt; 1000; ++i) {
            final int[] ints = random.ints(100).toArray();

            final PositiveSequence seq1 = 
                    findLongestPositiveSequenceStartIndex(ints);

            final PositiveSequence seq2 = 
                    findLongestPositiveSequenceStartIndex2(ints);

            if (!seq1.equals(seq2)) {
                throw new RuntimeException("Algorithms did not agree.");
            }
        }
    }
}
</code></pre>

<p>Hope that helps.</p>
    </div>