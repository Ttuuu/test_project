<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>Or should I give up coding since I took for so long for so simple problem?</p>
</blockquote>

<p>It gets easier the more you do it. It's the same with everything else in life: practice, practice, practice!</p>

<p>I'll go through your code and point out issues and best practices. I hope you learn from this, and that it helps you with your next project. I also hope that me exhaustively pointing out issues doesn't discourage you.</p>

<hr>

<blockquote>
<pre><code>x = [a:b];
y = [c:d:e];
</code></pre>
</blockquote>

<p>The square brackets <code>[]</code> are for concatenating values. <code>[a,b]</code> creates a vector with these two values. The colon operator also creates a vector. Thus, <code>a:b</code> is a vector, and <code>[a:b]</code> concatenates that vector with... nothing. You can simplify this by simply removing the square brackets. Note that the MATLAB editor will give you this hint also (I see a little red squiggly line underneath the opening bracket in these two lines, and an orange marker on the right edge of the editor). Do pay attention to these hints, they'll teach you a lot.</p>

<p>I honestly don't see the reason behind the variables <code>a</code> through <code>e</code> you use here, I would simply create these vectors directly with numeric constants, which makes it easier to see what the result will be:</p>

<pre><code>x = 1:3;
y = 5:2:9;
</code></pre>

<hr>

<blockquote>
<pre><code>[rx,cx] = size(x);
[ry,cy] = size(y);
</code></pre>
</blockquote>

<p>Here you define <code>rx</code> and <code>ry</code>, but never actually use them. MATLAB has a special syntax that you can use to avoid defining values you don't use later:</p>

<pre><code>[~,cx] = size(x);
[~,cy] = size(y);
</code></pre>

<p>This reduces clutter (thus making it easier to read the program), and also explicitly states your intention of not wanting to use those values. Showing your intention as a programmer is important when you (or someone else) need to fix a bug later.</p>

<p>Alternatively, you can use the second input argument to <code>size</code>:</p>

<pre><code>cx = size(x,2);
cy = size(y,2);
</code></pre>

<p>And because you have vectors, this is equivalent to</p>

<pre><code>cx = length(x);
cy = length(y);
</code></pre>

<hr>

<blockquote>
<pre><code>r = zeros((cx*cy),1);
</code></pre>
</blockquote>

<p>You're pre-allocating the output here. Excellent! This is not strictly necessary, because MATLAB grows arrays dynamically as needed, but this is much more efficient, and considered best practice.</p>

<hr>

<blockquote>
<pre><code>for ii = x
for jj = y
xi = find(x==ii)    
yi = find(y==jj)
row = xi*cy-(cy-yi)
r(row) = ii + jj
end
end
</code></pre>
</blockquote>

<p>This is the "meat" of the program, and the bit you had difficulty with. There are simpler ways to express the same logic. But first, please indent your code. It makes reading the code much easier (and thus makes it easier spotting and fixing bugs). The MATLAB editor can indent for you, simply select the code and press <kbd>Ctrl</kbd>+<kbd>I</kbd>.</p>

<p>Kudos for using <code>ii</code> rather than <code>i</code>! <code>i</code> is a constant in MATLAB, and it's considered bad practice to change its meaning.</p>

<hr>

<p>So first for an analysis of this double loop: You iterate over each of the elements of <code>x</code>, and for each of them you iterate over each element of <code>y</code>. This gives you each of the combinations that you are looking for. Next you find the index within the two arrays for the two current elements.</p>

<p>There are several things to note there. First, <code>xi</code> is not changed in the inner loop, yet you re-compute it for each new value of <code>jj</code>. You can move this out of the inner loop like so:</p>

<pre><code>for ii = x
   xi = find(x==ii)    
   for jj = y
      yi = find(y==jj)
      ...
</code></pre>

<p>Second, this assumes that each element in <code>x</code> is unique, as is each element in <code>y</code>. What happens if the input is <code>x = [1,1,2]</code>? When <code>ii=1</code>, <code>x1</code> will have two elements. I think the computation of <code>row</code> will actually still work, but <code>row</code> will have two elements also. If both <code>x</code> and <code>y</code> have repeated elements, you'll surely get an error thrown here.</p>

<p>Instead, you can turn this logic around. Loop over the indices into the vectors, and get the value at those locations using indexing, like so:</p>

<pre><code>for xi = 1:cx
   ii = x(xi);   
   for yi = 1:cy
      jj = y(yi);
      ...
</code></pre>

<p>This code does exactly the same, but it won't trip if there are repeated values. Also note that <code>find(x==ii)</code> is quite expensive. Think about <code>x</code> having a million elements. <code>x==ii</code> will compare each of the million elements to <code>ii</code>, then <code>find</code> will look through this million-element array and find the index of the non-zero elements. And you repeat this for each of the million elements in <code>x</code>. That is a billion (or a trillion if you're American) comparisons. With the loop over indices, you're only doing a million indexing operations. This is the difference between an O(n) algorithm and an O(nÂ²) algorithm. (<a href="https://en.wikipedia.org/wiki/Time_complexity" rel="nofollow noreferrer">Read here if you don't know about the Big O notation and would like to understand this statement.</a>)</p>

<hr>

<p>Next, you compute the index into the output vector:</p>

<blockquote>
<pre><code>row = xi*cy-(cy-yi)
</code></pre>
</blockquote>

<p>This is an heroic find, you can be proud of this! Because MATLAB uses 1-based indexing, this computation is more difficult than necessary. In 0-based indexing it would simply be <code>xi*cy+yi</code>. I have always written it as <code>(xi-1)*cy+(yi-1)+1</code> (i.e. turning it into a 0-based problem).</p>

<p>But note that <code>row</code> here increases by one each iteration. You could also have done this:</p>

<pre><code>row = 1;
for ...
   for ...
      r(row) = ii + jj;
      row = row + 1;
   end
end
</code></pre>

<p>Or, you could have chosen to be "naughty" and not pre-allocate. Then you just grow <code>r</code> by one element each loop iteration, and you don't need to keep track of the index:</p>

<pre><code>r = [];
for ...
   for ...
      r(end+1) = ii + jj;
   end
end
</code></pre>

<p>(Note I'm not suggesting you do this, I'm just showing the pattern.)</p>

<hr>

<p>As an alternative, you can compute the same thing in a vectorized manner, without any loops at all. The oldest technique for this is using <code>repmat</code>, which I'm showing here so you understand what is happening:</p>

<pre><code>r = repmat(x,cy,1) + repmat(y.',1,cx);
r = r(:);
</code></pre>

<p>What we're doing here is creating two matrices by replicating the two vectors. <code>x</code> is repeated <code>cy</code> times vertically, and <code>y</code> is first transposed (<code>.'</code>) to make a column vector, then repeated <code>cx</code> times horizontally. This leads to:</p>

<pre><code>1   2   3       5   5   5       6   7   8
1   2   3   +   7   7   7   =   8   9  10
1   2   3       9   9   9      10  11  12
</code></pre>

<p>The result is then reshaped into a column matrix (<code>r(:)</code> does this, you can use <code>reshape</code> also).</p>

<p>In MATLAB R2007a, they introduced the function <code>bsxfun</code> (a terrible name), which is meant to do this exact same operation without creating the intermediate large matrices:</p>

<pre><code>r = bsxfun(@plus,x,y.');
r = r(:);
</code></pre>

<p>You need to know here that <code>plus</code> is the function that implements the <code>+</code> operator, you can learn this by typing <code>help +</code> at the command prompt. The <code>@</code> creates a function handle, which is a reference to a function that you can use as a parameter to <code>bsxfun</code> and similar functions.</p>

<p>In MATLAB R2016b (it took them 10 years to make this decision) they finally caved and made it so that <code>a+b</code> automatically does what <code>bsxfun(@plus,a,b)</code> does. Some people don't like this, but to me it was long overdue. So now you can simply write:</p>

<pre><code>r = x + y.';
r = r(:);
</code></pre>

<p>This is a lot clearer than <code>bsxfun</code> ever could be. I love it!
And given the explanation with <code>repmat</code>, I hope you understand what it does and why.</p>

<hr>

<p>Please don't be discouraged that your complicated loop could be replaced with such a short line of code. This is one of the features of MATLAB: it's easy to write code, but it takes a lot of experience to be able to simplify it like this. The more you read other people's code, and the more you write your own, the better you'll get at it.</p>

<p>You can, for example, read some of the functions that come with MATLAB. For example you can type <code>edit median</code> at the command prompt, and you'll see how the creators of MATLAB wrote the function that computes the median. Not everything is implemented as M-files, much of it is built-in, but there's still a lot of professional code that you can learn from. You can also follow the <a href="https://stackoverflow.com/questions/tagged/matlab">Matlab tag on Stack Overflow</a>, answers posted there can be very instructive!</p>

<p>Also, sorry for making this such a long post. I got carried away... :)</p>
    </div>