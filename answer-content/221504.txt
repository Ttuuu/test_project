<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Don’t roll your own encryption.  It takes a team of experts to develop new secure encryption methods, and even they can get it wrong from time to time.</p>

<p>Huge hole in your DIY encryption:</p>

<p>If I use a 2-character password, I might naïvely expect I’d have <span class="math-container">\$62^2\$</span> possible passwords that I can encrypt the data with.  I’d be really shocked when it turns out there are only 4.</p>

<pre><code>random.getrandbits(len(password))
</code></pre>

<p>generates 2 random bits, for <span class="math-container">\$2^2\$</span> possible values to multiply <code>to_num(data)</code> by.  Only 4 possibilities is a lot easier to attack than <span class="math-container">\$62^2\$</span> different possibilities!</p>

<p>And one of those possibilities ... all bits zero ... destroys all the data you want to encode.  So we’re down to actually only 3 possible numbers to test to reverse the encryption.</p>

<hr>

<p>Any encryption mechanism worth its salt uses a salt (initial random data) to prevent the same message with the same password from being encrypted as the same text.</p>

<hr>

<p>Code improvements: use generator expressions.  Eg)</p>

<pre><code>chunk = []
for digit in str(unique_id):
    chunk.append(LETTERS[int(digit)])
return "".join(chunk)
</code></pre>

<p>would be more efficient rewritten as:</p>

<pre><code>return "".join(LETTERS[int(digit)] for digit in str(unique_id))
</code></pre>

<p>The <code>chunk</code> list is never created in memory; instead, the <code>join</code> method pulls items one at a time from the generator expression.</p>

<hr>

<p>Finally, don’t roll your own encryption.</p>
    </div>