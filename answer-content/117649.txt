<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Roman letter to value map</h2>

<blockquote>
<pre><code>if (!(num % 1000)) { roman += "M"; num -= 1000; }
else if (!(num % 500)) { roman += "D"; num -= 500; }
else if (!(num % 100)) { roman += "C"; num -= 100; }
else if (!(num % 50)) { roman += "L"; num -= 50; }
else if (!(num % 10)) { roman += "X"; num -= 10; }
else if (!(num % 5)) { roman += "V"; num -= 5; }
else if (!(num % 1)){ roman += "I"; num -= 1; }
</code></pre>
</blockquote>

<p>You should be using a map here to store the roman numeral values and their corresponding characters:</p>

<pre><code>var romanCharacterMap = {
    "M": 1000,
    "D": 500,
    ...
}
</code></pre>

<p>With this, you can easily add on more letters if you ever felt like expanding it. Now, here is what your code would look like there:</p>

<pre><code>while (num &gt; 0) {
    for(var romanCharacter in romanCharacterMap) {
        var value = romanCharacterMap[romanCharacter];
        if(!(num % value)) {
            roman += romanCharacter;
            num -= value;
            break;
        }
    }
}
</code></pre>

<p>Then, to OOP this code up, you could move this function and the new map to an object to keep things together:</p>

<pre><code>var RomanNumberalConverter = {
    ...
}
</code></pre>

<p>Then, the map won't be created every time the function is called; it will be created and referenced once.</p>

<hr>

<h2>Moar regexes... moar!</h2>

<p>In this loop:</p>

<blockquote>
<pre><code>  for (var i in translationMap) {
    roman = roman.replace(new RegExp(i,'g'), translationMap[i]);
  }
</code></pre>
</blockquote>

<p>Every iteration, you are creating a regex for every entry in the map. However, every time this function is called, the same regexes are created because that map is the same every time.</p>

<p>To speed things up, try creating the regex once and keeping it in the map that is also in this <code>RomanNumberConverter</code> object:</p>

<pre><code>translationMap: {
    DCCCC: {
        replace: "CM",
        regex: /DCCCC/g
    },
    ...
}
</code></pre>

<p>Your code will now be faster because a new series of regexes doesn't have to be created every function call.</p>
    </div>