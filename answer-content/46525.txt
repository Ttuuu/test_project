<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>One way to shorten the code determining the age group is to use a Dictionary. the key is the age the value is the agegroup index.  One relatively simple way to fill the dictionary is with LINQ:</p>

<pre><code>AgeGroups = (from i in Enumerable.Range(0, 19)
                select new
                {
                    key = i,
                    value = 0
                }).ToDictionary(x =&gt; x.key, x =&gt; x.value);
AgeGroups = AgeGroups.Concat((from i in Enumerable.Range(19, 12)
                                select new
                                {
                                    Key = i,
                                    Value = 1
                                }).ToDictionary(x =&gt; x.Key, x =&gt; x.Value)).ToDictionary(x =&gt; x.Key, x =&gt; x.Value);
AgeGroups = AgeGroups.Concat((from i in Enumerable.Range(31, 15)
                                select new
                                {
                                    Key = i,
                                    Value = 2
                                }).ToDictionary(x =&gt; x.Key, x =&gt; x.Value)).ToDictionary(x =&gt; x.Key, x =&gt; x.Value);
AgeGroups = AgeGroups.Concat((from i in Enumerable.Range(46, 19)
                                select new
                                {
                                    Key = i,
                                    Value = 3
                                }).ToDictionary(x =&gt; x.Key, x =&gt; x.Value)).ToDictionary(x =&gt; x.Key, x =&gt; x.Value);
</code></pre>

<p>This creates a dictionary with 65 elements with the value of each element the appropriate agegroup index.</p>

<p>You build this once.</p>

<p>Shortening the district code is simply matter of subtracting 1 from the district number to get the appropriate index.</p>

<p>If there's a chance the size of the data wil be large, you should consider reading each line separately rather than all of them together.</p>

<p>With all this in mind the code to fill your arrays looks like this:</p>

<pre><code>using(StreamReader lines = new StreamReader("test.txt"))
{
    int i = 0;
    while(!lines.EndOfStream)
    {
        string[] fields = lines.ReadLine().Split(',');

        ageData[i] = int.Parse(fields[0]);          
        districtDataA[i] = int.Parse(fields[3]);

        if(AgeGroups.ContainsKey(ageData[i]))
            ageGroup[AgeGroups[ageData[i]]]++;
        else
            ageGroup[4]++;
        districtCount[districtDataA[i++] - 1]++;
    }
}
</code></pre>

<p>Notice how you still need one loop but you're not storing the whole file in memory.  Also, the only if statement is to check for the top age group.</p>
    </div>