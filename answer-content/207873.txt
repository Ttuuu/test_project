<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Read this entire section first</h1>

<p>Welcome to Code Review! I enjoyed trying out your game and playing it. Don't be discouraged by my long list of improvements; there's always a lot to learn when you're just starting, and every new thing you try brings its own challenges and best practices.</p>

<p>I would recommend reading the entire list and trying to understand the purpose of each of the suggestions. I have provided a revised version of your code at the end of my answer. The list is <em>not</em> ordered by importance, just by my flow when I was reviewing your code. Hopefully the logical order makes sense, and you'll be able to use this answer as a reference.</p>

<h1>Observe PEP-8 standards</h1>

<p><a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">PEP-8</a> is the widely-accepted style guide for Python and it makes Python code easier to read and more standard. It's basically the common language of Python programmers. I would recommend beginning to read it and learning the different guidelines. Here are a few style suggestions <sub>(The small text in parenthesis is regex replacements. You probably don't need to worry about them; they're just my quick way of fixing code in a text editor. For those who are familiar with <code>regex</code>, I always preview all the changes before applying the <code>regex</code>.)</sub>:</p>

<ul>
<li>I notice you often do not put spaces on both sides of your <code>=</code> and comparison operators (<code>==</code>, <code>!=</code>, <code>&gt;=</code>, and <code>&lt;=</code>). PEP-8 recommends putting spaces on both sides would make your code easier to read. <sub>(I fixed this using the regex <code>?([&gt;&lt;!]?=+) ?</code> and replacing with <code>\1</code>.)</sub></li>
<li>I would also recommend using more descriptive variable names in certain places throughout your code: on first glance, I'm not sure what <code>j</code>, <code>t</code>, and <code>z</code> represent.</li>
<li>Comments should generally be on a separate line from code, and avoided by using more clear code where possible (I'm referring to the comment after the <code>draw_hangman</code> declaration.)</li>
<li>Almost universally, you should have spaces after commas. Sometimes it's readable in function argument lists, but for declaring a <code>dict</code> or <code>list</code>, it makes the code much more readable. <sub>(This is easy to fix using regex: <code>,(?! )</code> to <code>,</code>)</sub></li>
</ul>

<h1>Nested methods</h1>

<p>I notice you have a method hierarchy:</p>

<pre><code>def play_game():
    # ...
    def correct_guess()
        # ...
    def draw_hangman()
        def legs():
            # ...
        def rest():
            # ...
</code></pre>

<p>Unless you want to restrict the scope of methods for a good reason, you shouldn't use nested methods. Just lay them flat on the same level in your file. If this makes the purpose of a method unclear, rename it and utilize docstrings. However, I think you partly did this to take advantage of being able to reference the function-scoped variable within another function. Instead, just pass the required variables as function arguments to the previous subfunction, and add those parameter the previous subfunction. For example, you reference <code>p</code> in <code>legs()</code> and <code>rest()</code>: just add <code>p</code> as a parameter to <code>legs()</code> and <code>rest()</code>.</p>

<h1>Encoding your hangman graphic</h1>

<p>Let's talk about <code>draw_hangman()</code>:</p>

<pre><code>def draw_hangman(attempts):
    def legs(at):
        # ...

    def rest(att):
        # ...

    for p in range(1, 13):
        if p == 1:
            print("")
        if attempts &gt;= 2:
            if p == 2:
                print("* * * * * * * * *")
            if attempts &gt;= 3:
                if p in (3, 4):
                    print("*               *")
                if attempts &gt;= 4:
                    # ...
                    else:
                        rest(attempts)
                else:
                    rest(attempts)
            else:
                rest(attempts)
        else:
            rest(attempts)
</code></pre>

<p>Firstly, your <code>for p in range(1, 13)</code> and generally the existence of the <code>p</code> variable is a bad pattern. All you're doing is printing out a set of lines in order; checking for where <code>p</code> is just makes your code unnecessarily inefficient and confusing to follow. As a general rule, you should never iterate through a <code>range</code> and then check your current position in the range to create conditionals; you should just <em>do</em> the things you need to do in order, and make conditional checks within at the appropriate points to change the output for specific parts. Refactoring this is complicated, but fortunately it will be unnecessary, as we'll get to in my next paragraph.</p>

<p>Instead of using conditionals to determine how to print the picture, you could simply encode the picture in an iterative way and then retrieve it conditionally. Let me show you what I mean; you can start with original hangman graphic:</p>

<pre><code>* * * * * * * * *
*               *
*               *
*             *   *
*               *
*             * * *
*            *  *  *
*               *
*              * *
* *           *   *
*   *
</code></pre>

<p>and then number it corresponding to when specific parts should be displayed:</p>

<pre><code>1 2 2 2 2 2 2 2 2
1               3
1               3
1             4   4
1               4
1             8 5 9
1            8  5  9
1               5
1              6 7
1 1           6   7
1   1
</code></pre>

<p>Conveniently, your hangman happens to have few enough parts to allow for string storage to with digits 1-9 to work; otherwise you would have to store the hangman image in a list.</p>

<p>You can then retrieve the image using string replacement. The python regex module <a href="https://docs.python.org/3.5/library/re.html" rel="nofollow noreferrer"><code>re</code></a> is particularly convenient, as I will demonstrate in the following example:</p>

<pre><code>import re

# ...

hangman_image = """
1 2 2 2 2 2 2 2 2
1               3
1               3
1             4   4
1               4
1             8 5 9
1            8  5  9
1               5
1              6 7
1 1           6   7
1   1"""

# generates image of hangman [attempts = number of wrong answers (up to 9)]
def draw_hangman(attempts):
    current_hangman = hangman_image
    current_hangman = re.sub('[1-{}]'.format(attempts), '*', current_hangman)
    current_hangman = re.sub('[{}-9]'.format(attempts + 1), ' ', current_hangman)
    print(current_hangman)
</code></pre>

<p>The first time <code>re.sub()</code> is called, the regular expression replaces all numbers in the range 1 to <code>attempts</code>. The value of attempts is inserted into the string <code>[1-{}]</code> by using <code>.format()</code> to replace <code>{}</code> with the value of <code>attempts</code>. In regular expressions, brackets surrounding a concatenation of characters form what is called a "character class": this just means it's looking for a <em>single</em> character inside the brackets and then replacing it. Character classes support ranges of characters (relying on the way characters are encoded) by using characters separated by a hyphen for both ends of the range. The second time <code>re.sub()</code> is called is similar, but it instead targets all the numbers which are greater than the number of attempts and replaces them with spaces.</p>

<p>This conveniently also eliminates the need for the <code>legs()</code> and <code>rest()</code> functions.</p>

<h1>Main loop</h1>

<p>To start with, kudos for making <code>sec</code> a variable. Generally, when you have repeated constants you should make them variables. Even if they aren't repeated, making them a variable can make procedured more clear (see <a href="https://en.wikipedia.org/wiki/Magic_number_(programming)#Unnamed_numerical_constants" rel="nofollow noreferrer">Magic constant / Magic number</a>).</p>

<p>Your main loop and your code generally needs more clear control flow.  Instead of having multiple <code>if</code> clauses for mutually exclusive outcomes, you can use <code>elif</code> and <code>else</code> to direct mutually exclusive outcomes.</p>

<pre><code>if x == "2":
    # ...
elif x == "1":
    # ...
elif x == "3":
    break
</code></pre>

<p><em>Then</em>, you need to clean up all your <code>continues</code> and <code>breaks</code>; an easy immediate change is to remove the <code>continue</code>s and <code>break</code>s preceding the each <code>x</code> comparison conditional. As you're using them now, they are a form of <code>goto</code>, and as Edgar Dijkstra famously noted in a paper, <a href="https://homepages.cwi.nl/~storm/teaching/reader/Dijkstra68.pdf" rel="nofollow noreferrer"><em>Go To Statement Considered Harmful</em></a>
(this is not to say all <code>continue</code>s and <code>break</code>s are bad, but you should probably minimize their use when possible.) Generally, you should use <code>else</code> more to obviate the need to use <code>continue</code>s and <code>break</code>s.</p>

<p>I will describe the refactoring process below:</p>

<p>The main revisions are inside <code>if x == 2:</code></p>

<ul>
<li>Made the if statements checking the <code>wordchoice</code> into a chain of <code>if elif</code> statements, and then moved the remaining code in the <code>while True</code> loop into an <code>else</code> clause. The <code>continue</code>s within the first two conditionals can now be removed.</li>
<li>Python provides the lowercase and uppercase Roman alphabet (A.K.A. the English alphabet) as an easy import: just add <code>from string import ascii_letters</code>; however this is not even necessary...</li>
<li><strong>EDIT: As you correctly pointed out, my original regex method (<code>\w+</code>) didn't exclude numbers.</strong> To check if a word contains just ascii characters, just use the follow regular expression: <code>[a-zA-Z]+</code>. You can compare a string using <a href="https://docs.python.org/3.5/library/re.html#re.fullmatch" rel="nofollow noreferrer"><code>re.fullmatch</code></a>. Refactoring the code to use this will eliminate the need for the <code>y</code> variable.</li>
<li>In the <code>invalid()</code> function, it's unclear where <code>sec</code> comes from. <code>sec</code> should passed as a parameter to <code>invalid()</code>. It's poor form to reference a global variable where the origin of the variable is unclear.</li>
<li>As a matter of simplicity, just using a list of lowercase words will simplify things, since you don't check for case inside the <code>play_game()</code>; moving the list conversion of the word inside <code>play_game()</code> would also be a good idea to separate abstraction.</li>
</ul>

<h1>Improving playgame()</h1>

<p>Here, the problems are similar to the problems with your main loop; your control flow is very unclear. Your variable names could also use some work.</p>

<ul>
<li>A <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer">list comprehension</a> can allow you to declare <code>word</code> in one line: <code>word = ["_" for _ in secret]</code></li>
<li>A <code>continue</code> directly preceded by a <code>break</code> does nothing. The <code>continue</code> will never be reached because the <code>break</code> will change the control flow.</li>
<li>You should rename:

<ul>
<li><code>k</code> to <code>wrong_guesses</code></li>
<li><code>check</code> to <code>guessed_letters</code></li>
<li><code>g</code> to <code>guess</code>.</li>
</ul></li>
<li>Multiple consecutive conditionals should never all have <code>continue</code>s within them. Just use <code>else</code> and <code>elif</code>; you can use <code>or</code> to join two conditions that have the same result.</li>
<li>Instead of doing <code>wrong_guesses = wrong_guesses + 1</code>, you can increment using <code>+=</code> like <code>wrong_guesses += 1</code>.</li>
</ul>

<p>I would get rid of <code>correct_guess</code>, because you're trying to rely on list mutation to modify a variable. Instead of passing a list and mutating it, you should just do the changes inline as follows (this is also coupled with a change to make <code>secret</code> all lowercase in the beginning of <code>playgame</code>):</p>

<pre><code>        if guess.lower() in secret or guess.upper() in secret:
            for i in range(len(secret)):
                if guess == secret[i]:
                    word[i] = guess
</code></pre>

<h1>Final code</h1>

<p>I've tested the following code and it works! It can hopefully illustrate how to do a better form of control flow and modularization.</p>

<pre><code>import time
import getpass
import random
import re

def invalid(sec):
    print("")
    print("INVALID INPUT")
    time.sleep(sec)

hangman_image = """
1 2 2 2 2 2 2 2 2
1               3
1               3
1             4   4
1               4
1             8 5 9
1            8  5  9
1               5
1              6 7
1 1           6   7
1   1"""

# generates image of hangman [attempts = number of wrong answers (up to 9)]
def draw_hangman(attempts):
    current_hangman = hangman_image
    current_hangman = re.sub('[1-{}]'.format(attempts), '*', current_hangman)
    current_hangman = re.sub('[{}-9]'.format(attempts + 1), ' ', current_hangman)
    print(current_hangman)

def play_game(target_word, sec): #the actual game
    secret = list(target_word.lower())
    word = ["_" for _ in secret]
    wrong_guesses = 0
    guessed_letters = []
    while True:
        print()
        print(word)
        print()
        guess = None
        while True:
            guess = input("Enter Guess:")        
            if len(guess) != 1 or " " in guess:
                invalid(sec)
            elif guess in guessed_letters:
                print()
                print("You already guessed this!")
                time.sleep(sec)
            else:
                break
        guessed_letters.append(guess)
        if guess.lower() in secret or guess.upper() in secret:
            for i in range(len(secret)):
                if guess == secret[i]:
                    word[i] = guess
        else:
            wrong_guesses = wrong_guesses + 1
            draw_hangman(wrong_guesses)
            if wrong_guesses == 9:
                print()
                print(secret)
                print()
                print("GAME OVER")
                break
            time.sleep(sec)
        if word == secret:
            print()
            print(target_word)
            print()
            print("VICTORY")
            return

# got this list from https://github.com/Xethron/Hangman/blob/master/words.txt
wordlibrary = ['able', 'about', 'account', 'acid', 'across', 'act', 'addition', 'adjustment', 'advertisement', 'after', 'again', 'against', 'agreement', 'air', 'all', 'almost', 'among', 'amount', 'amusement', 'and', 'angle', 'angry', 'animal', 'answer', 'ant', 'any', 'apparatus', 'apple', 'approval', 'arch', 'argument', 'arm', 'army', 'art', 'as', 'at', 'attack', 'attempt', 'attention', 'attraction', 'authority', 'automatic', 'awake', 'baby', 'back', 'bad', 'bag', 'balance', 'ball', 'band', 'base', 'basin', 'basket', 'bath', 'be', 'beautiful', 'because', 'bed', 'bee', 'before', 'behaviour', 'belief', 'bell', 'bent', 'berry', 'between', 'bird', 'birth', 'bit', 'bite', 'bitter', 'black', 'blade', 'blood', 'blow', 'blue', 'board', 'boat', 'body', 'boiling', 'bone', 'book', 'boot', 'bottle', 'box', 'boy', 'brain', 'brake', 'branch', 'brass', 'bread', 'breath', 'brick', 'bridge', 'bright', 'broken', 'brother', 'brown', 'brush', 'bucket', 'building', 'bulb', 'burn', 'burst', 'business', 'but', 'butter', 'button', 'by', 'cake', 'camera', 'canvas', 'card', 'care', 'carriage', 'cart', 'cat', 'cause', 'certain', 'chain', 'chalk', 'chance', 'change', 'cheap', 'cheese', 'chemical', 'chest', 'chief', 'chin', 'church', 'circle', 'clean', 'clear', 'clock', 'cloth', 'cloud', 'coal', 'coat', 'cold', 'collar', 'colour', 'comb', 'come', 'comfort', 'committee', 'common', 'company', 'comparison', 'competition', 'complete', 'complex', 'condition', 'connection', 'conscious', 'control', 'cook', 'copper', 'copy', 'cord', 'cork', 'cotton', 'cough', 'country', 'cover', 'cow', 'crack', 'credit', 'crime', 'cruel', 'crush', 'cry', 'cup', 'cup', 'current', 'curtain', 'curve', 'cushion', 'damage', 'danger', 'dark', 'daughter', 'day', 'dead', 'dear', 'death', 'debt', 'decision', 'deep', 'degree', 'delicate', 'dependent', 'design', 'desire', 'destruction', 'detail', 'development', 'different', 'digestion', 'direction', 'dirty', 'discovery', 'discussion', 'disease', 'disgust', 'distance', 'distribution', 'division', 'do', 'dog', 'door', 'doubt', 'down', 'drain', 'drawer', 'dress', 'drink', 'driving', 'drop', 'dry', 'dust', 'ear', 'early', 'earth', 'east', 'edge', 'education', 'effect', 'egg', 'elastic', 'electric', 'end', 'engine', 'enough', 'equal', 'error', 'even', 'event', 'ever', 'every', 'example', 'exchange', 'existence', 'expansion', 'experience', 'expert', 'eye', 'face', 'fact', 'fall', 'false', 'family', 'far', 'farm', 'fat', 'father', 'fear', 'feather', 'feeble', 'feeling', 'female', 'fertile', 'fiction', 'field', 'fight', 'finger', 'fire', 'first', 'fish', 'fixed', 'flag', 'flame', 'flat', 'flight', 'floor', 'flower', 'fly', 'fold', 'food', 'foolish', 'foot', 'for', 'force', 'fork', 'form', 'forward', 'fowl', 'frame', 'free', 'frequent', 'friend', 'from', 'front', 'fruit', 'full', 'future', 'garden', 'general', 'get', 'girl', 'give', 'glass', 'glove', 'go', 'goat', 'gold', 'good', 'government', 'grain', 'grass', 'great', 'green', 'grey', 'grip', 'group', 'growth', 'guide', 'gun', 'hair', 'hammer', 'hand', 'hanging', 'happy', 'harbour', 'hard', 'harmony', 'hat', 'hate', 'have', 'he', 'head', 'healthy', 'hear', 'hearing', 'heart', 'heat', 'help', 'high', 'history', 'hole', 'hollow', 'hook', 'hope', 'horn', 'horse', 'hospital', 'hour', 'house', 'how', 'humour', 'I', 'ice', 'idea', 'if', 'ill', 'important', 'impulse', 'in', 'increase', 'industry', 'ink', 'insect', 'instrument', 'insurance', 'interest', 'invention', 'iron', 'island', 'jelly', 'jewel', 'join', 'journey', 'judge', 'jump', 'keep', 'kettle', 'key', 'kick', 'kind', 'kiss', 'knee', 'knife', 'knot', 'knowledge', 'land', 'language', 'last', 'late', 'laugh', 'law', 'lead', 'leaf', 'learning', 'leather', 'left', 'leg', 'let', 'letter', 'level', 'library', 'lift', 'light', 'like', 'limit', 'line', 'linen', 'lip', 'liquid', 'list', 'little', 'living', 'lock', 'long', 'look', 'loose', 'loss', 'loud', 'love', 'low', 'machine', 'make', 'male', 'man', 'manager', 'map', 'mark', 'market', 'married', 'mass', 'match', 'material', 'may', 'meal', 'measure', 'meat', 'medical', 'meeting', 'memory', 'metal', 'middle', 'military', 'milk', 'mind', 'mine', 'minute', 'mist', 'mixed', 'money', 'monkey', 'month', 'moon', 'morning', 'mother', 'motion', 'mountain', 'mouth', 'move', 'much', 'muscle', 'music', 'nail', 'name', 'narrow', 'nation', 'natural', 'near', 'necessary', 'neck', 'need', 'needle', 'nerve', 'net', 'new', 'news', 'night', 'no', 'noise', 'normal', 'north', 'nose', 'not', 'note', 'now', 'number', 'nut', 'observation', 'of', 'off', 'offer', 'office', 'oil', 'old', 'on', 'only', 'open', 'operation', 'opinion', 'opposite', 'or', 'orange', 'order', 'organization', 'ornament', 'other', 'out', 'oven', 'over', 'owner', 'page', 'pain', 'paint', 'paper', 'parallel', 'parcel', 'part', 'past', 'paste', 'payment', 'peace', 'pen', 'pencil', 'person', 'physical', 'picture', 'pig', 'pin', 'pipe', 'place', 'plane', 'plant', 'plate', 'play', 'please', 'pleasure', 'plough', 'pocket', 'point', 'poison', 'polish', 'political', 'poor', 'porter', 'position', 'possible', 'pot', 'potato', 'powder', 'power', 'present', 'price', 'print', 'prison', 'private', 'probable', 'process', 'produce', 'profit', 'property', 'prose', 'protest', 'public', 'pull', 'pump', 'punishment', 'purpose', 'push', 'put', 'quality', 'question', 'quick', 'quiet', 'quite', 'rail', 'rain', 'range', 'rat', 'rate', 'ray', 'reaction', 'reading', 'ready', 'reason', 'receipt', 'record', 'red', 'regret', 'regular', 'relation', 'religion', 'representative', 'request', 'respect', 'responsible', 'rest', 'reward', 'rhythm', 'rice', 'right', 'ring', 'river', 'road', 'rod', 'roll', 'roof', 'room', 'root', 'rough', 'round', 'rub', 'rule', 'run', 'sad', 'safe', 'sail', 'salt', 'same', 'sand', 'say', 'scale', 'school', 'science', 'scissors', 'screw', 'sea', 'seat', 'second', 'secret', 'secretary', 'see', 'seed', 'seem', 'selection', 'self', 'send', 'sense', 'separate', 'serious', 'servant', 'sex', 'shade', 'shake', 'shame', 'sharp', 'sheep', 'shelf', 'ship', 'shirt', 'shock', 'shoe', 'short', 'shut', 'side', 'sign', 'silk', 'silver', 'simple', 'sister', 'size', 'skin', '', 'skirt', 'sky', 'sleep', 'slip', 'slope', 'slow', 'small', 'smash', 'smell', 'smile', 'smoke', 'smooth', 'snake', 'sneeze', 'snow', 'so', 'soap', 'society', 'sock', 'soft', 'solid', 'some', '', 'son', 'song', 'sort', 'sound', 'soup', 'south', 'space', 'spade', 'special', 'sponge', 'spoon', 'spring', 'square', 'stage', 'stamp', 'star', 'start', 'statement', 'station', 'steam', 'steel', 'stem', 'step', 'stick', 'sticky', 'stiff', 'still', 'stitch', 'stocking', 'stomach', 'stone', 'stop', 'store', 'story', 'straight', 'strange', 'street', 'stretch', 'strong', 'structure', 'substance', 'such', 'sudden', 'sugar', 'suggestion', 'summer', 'sun', 'support', 'surprise', 'sweet', 'swim', 'system', 'table', 'tail', 'take', 'talk', 'tall', 'taste', 'tax', 'teaching', 'tendency', 'test', 'than', 'that', 'the', 'then', 'theory', 'there', 'thick', 'thin', 'thing', 'this', 'thought', 'thread', 'throat', 'through', 'through', 'thumb', 'thunder', 'ticket', 'tight', 'till', 'time', 'tin', 'tired', 'to', 'toe', 'together', 'tomorrow', 'tongue', 'tooth', 'top', 'touch', 'town', 'trade', 'train', 'transport', 'tray', 'tree', 'trick', 'trouble', 'trousers', 'true', 'turn', 'twist', 'umbrella', 'under', 'unit', 'up', 'use', 'value', 'verse', 'very', 'vessel', 'view', 'violent', 'voice', 'waiting', 'walk', 'wall', 'war', 'warm', 'wash', 'waste', 'watch', 'water', 'wave', 'wax', 'way', 'weather', 'week', 'weight', 'well', 'west', 'wet', 'wheel', 'when', 'where', 'while', 'whip', 'whistle', 'white', 'who', 'why', 'wide', 'will', 'wind', 'window', 'wine', 'wing', 'winter', 'wire', 'wise', 'with', 'woman', 'wood', 'wool', 'word', 'work', 'worm', 'wound', 'writing', 'wrong', 'year', 'yellow', 'yes', 'yesterday', 'you', 'young', 'Bernhard', 'Breytenbach', 'Android']

# since all time delays are the same I wanted them all to be a variable so it is easier to change it
sec = 0.8
while True:
    print()
    print("1:New Game(Random Word)")
    print("2:New Game(With your own Word)")
    print("3:Exit Game")
    x = input("Enter(1, 2, 3):")
    if x == "2":
        wordchoice = None
        while True:
            print()
            wordchoice = getpass.getpass("Enter secret word:")
            print()
            if " " in wordchoice:
                print("Only one word!")
                time.sleep(sec)
            elif len(wordchoice) &lt; 1:
                print("Enter more than zero characters.")
            elif not re.fullmatch('[a-zA-Z]+', wordchoice):
                print("Use only letters!")
            else:
                break
            time.sleep(sec)
        play_game(wordchoice, sec)
    elif x == "1":
        play_game(random.choice(wordlibrary), sec)
    elif x == "3":
        break
    else:
        invalid(sec)
</code></pre>

<h1>Miscellaneous notes</h1>

<ul>
<li>I would move <code>wordlibrary</code> to a separate file and then import it. Or read it from a file. Also, you misspelled "wordlibrary" as "wordlibary".

<ul>
<li>I suggested this because it takes up a lot of space in your current file, and it's not something you need to look at when you're editing the code of the file; it's really an entirely separate component.</li>
</ul></li>
<li>If you're curious, I could also tell you a way to make your <code>print()</code> statements more succinct, but I didn't want to get into it in the main review.

<ul>
<li>The easiest way to make <code>print()</code> statements more succint is to take advantage of newline characters and <a href="https://docs.python.org/3/reference/lexical_analysis.html#formatted-string-literals" rel="nofollow noreferrer">formatted string literals</a>. For example if you wanted to turn the three lines <code>print()</code>, <code>print(secret)</code>, <code>print()</code> into one line, you would do: <code>print(f'\n{secret}\n')</code></li>
</ul></li>
</ul>
    </div>