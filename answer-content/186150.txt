<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Advice 1</strong></p>

<p>Fix your code indentation. Instead of </p>

<pre><code>public class LLAdd {
...
public static void printList(Node head){
...
}
...
}
</code></pre>

<p>you should have</p>

<pre><code>public class LLAd {
    ...
    public static void printList(Node head){
        ...
    }
    ...
}
</code></pre>

<p><strong>Advice 2</strong></p>

<p>In method definitions, one, according to common Java coding conventions, must have a single space between parameter-closing <code>)</code> and a block-opening <code>{</code>. Instead of </p>

<pre><code>public static void printList(Node head){
    ...
}
</code></pre>

<p>you should write </p>

<pre><code>public static void printList(Node head) {
    ...                                ^-- Space!
}
</code></pre>

<p><strong>Advice 3</strong></p>

<p>The class name <code>LLAdd</code> is really poor. Taking a look of what it does, you could come up with the name, say, <code>BigInteger</code>.</p>

<p><strong>Advice 4</strong></p>

<pre><code>static Node head, head1, head2;
</code></pre>

<p>This is an anti-pattern since there is only one "instance" of the class. Make these non-static and private instead.</p>

<p><strong>Advice 5</strong></p>

<pre><code>Node new_node ...
</code></pre>

<p>Once again, Java coding conventions dictate that the fields/variables are named in CamelCase: </p>

<pre><code>Node newNode ...
</code></pre>

<p><strong>Advice 6</strong></p>

<pre><code>static class Node {
    Node link;
    int data;

    Node(int data){
        this.data = data;
        this.link = null;
    }
}
</code></pre>

<p>Make this <code>private</code> and <code>final</code> since most likely you don't want to shine into the entire package, and you hardly need to derive from that class. Also, I would rename <code>link</code> to <code>next</code>. Finally for this advice, you don't need <code>this.link = null;</code>. Java sets all the object fields to <code>null</code> by default.</p>

<p><strong>Advice 7</strong> In principle, I think you should make your <code>BigInteger/LLAdd</code> <strong><em>immutable</em></strong>.</p>

<p><strong>Advice 8</strong></p>

<pre><code>public static Node push(int data, Node head)...
</code></pre>

<p>That's is a poor name too. Looking from what it does, I suggest you rename it to <code>prependDigit</code>. Also, I believe you would want to check that <code>data</code> is within the range 0-9 unless you want to allow dealing with arbitrary radices.</p>

<p><strong>Advice 9</strong></p>

<p>Instead of implementing <code>printList</code>, I would override <code>toString</code>.</p>

<p><strong>Alternative implementation</strong></p>

<pre><code>import java.util.Scanner;

public final class BigInteger {

    private static final class Digit {
        Digit next;
        int digit;

        Digit(char ch) {
            this.digit = ch - '0';
        }

        Digit(int digit) {
            this.digit = digit;
        }
    }

    private Digit leastSignificantDigit;

    public BigInteger(String integerText) {
        checkCharacters(integerText);
        leastSignificantDigit = 
                new Digit(integerText.charAt(integerText.length() - 1));
        Digit head = leastSignificantDigit;

        for (int i = integerText.length() - 2; i &gt;= 0; i--) {
            Digit digit = new Digit(integerText.charAt(i));
            head.next = digit;
            head = digit;
        }
    }

    private BigInteger() {

    }

    public BigInteger add(BigInteger other) {
        Digit digit1 = leastSignificantDigit;
        Digit digit2 = other.leastSignificantDigit;
        BigInteger result = new BigInteger();
        Digit headDigit = null;
        boolean carry = false;

        while (digit1 != null || digit2 != null) {
            int intDigit1 = digit1 == null ? 0 : digit1.digit;
            int intDigit2 = digit2 == null ? 0 : digit2.digit;
            int sum = intDigit1 + intDigit2 + (carry ? 1 : 0);
            carry = sum &gt; 9;
            int currentDigit = carry ? (sum - 10) : sum;
            Digit digit = new Digit(currentDigit);

            if (result.leastSignificantDigit == null) {
                result.leastSignificantDigit = digit;
                headDigit = digit;
            } else {
                headDigit.next = digit;
                headDigit = digit;
            }

            if (digit1 != null) {
                digit1 = digit1.next;
            }

            if (digit2 != null) {
                digit2 = digit2.next; 
            }
        }

        if (carry) {
            headDigit.next = new Digit(1);
        }

        return result;
    }

    @Override
    public String toString() {
        StringBuilder stringBuilder = new StringBuilder();

        for (Digit digit = leastSignificantDigit; 
                digit != null; 
                digit = digit.next) {
            stringBuilder.append((char)('0' + digit.digit));
        }

        return stringBuilder.reverse().toString();
    }

    private void checkCharacters(String integerText) {
        for (char ch : integerText.toCharArray()) {
            if (!Character.isDigit(ch)) {
                throw new IllegalArgumentException(
                        "Character '" + ch + "' is not a valid digit.");
            }
        }
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        BigInteger bi1 = new BigInteger(scanner.nextLine());
        BigInteger bi2 = new BigInteger(scanner.nextLine());
        System.out.println(bi1 + " + " + bi2 + " = " + bi1.add(bi2));
    }
}
</code></pre>
    </div>