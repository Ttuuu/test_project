<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>As per signature main function must return int value</p>

<pre><code>#include "fvpalgorithm.h"

int main() {
    FVPAlgorithm algorithm;
    algorithm.run();
}
</code></pre>

<p><strong>Task Structure</strong>: Why is taskName public? Here taskName looks like task identifier.
 Will this identifier change post creation? Do you intend to support case where
 task is created with name X and then later changed to Y? Better to take name at 
 construction time and then provide a task name getter and avoid setter.</p>

<p>If you are aware that task is going to have more attributes apart from name,
 then defining a separate task struct makes sense. But if it is only going to have name,
 and you want to keep your code readable make TaskName an alias for std::string 
 (using/typedef) ad get rid of struct completely.</p>

<pre><code>struct Task {  // Need to give Task struct a body in header.
    std::string taskName;
};
</code></pre>

<p><strong>Class FVPAlgorithm:</strong> This class violates SRP. It has three responsibilities. Read data from cin, Execute FVP algorithm, and Print. So apart from changes in algorithm steps, his class will also have to change if task input method changes (Say rather than cin, you start reading from file, or start consuming task list returned by some other module), or tasks have to be printed to streams other than cout. Also because this class is taking care of input and output, it must take case errors that can happen during input/output.
Summary: Remove input/output responsibility from this class and let it focus on algorithm implementation and its error cases.</p>

<pre><code>class FVPAlgorithm { 
private:
    std::list&lt;Task&gt; longList; // List of Tasks &lt;nkvns&gt;: tasks is better name for this variable
    std::vector&lt;std::list&lt;Task&gt;::iterator&gt; shortList; // Vector of iterators to tasks in longList &lt;nkvns&gt;: selectedTasks is better name for this variable. As per current name, shortList is actually a vector not list.

    void addTasks();
    void selectTasks(std::list&lt;Task&gt;::iterator startIterator);
    void promptToDo(std::list&lt;Task&gt;::iterator task);
    //std::list&lt;Task&gt;::iterator compareTasks(std::list&lt;Task&gt;::iterator startIterator);

public:
    void run();
&lt;nkvns&gt;: Print* method should be marked const. Print can't change state of the object.
    void printAllTasks(); 
    void printShortList();
};
</code></pre>

<p><strong>Sanitize input before consumption:</strong> Check/sanitize input before accepting it. User can input garbage string of arbitrary length. You can go out of memory. </p>

<pre><code>if (taskInput != "q") {
            longList.push_back(Task{ taskInput });
            std::cout &lt;&lt; "Added task." &lt;&lt; std::endl;
        }
    }
</code></pre>

<p><strong>Use auto to improve readability:</strong> auto is good way of improving readability. Here you can use auto for iterators like <code>std::list&lt;Task&gt;::iterator</code>. Also loop in print* method is read loops so use cbegin and cend.</p>

<pre><code>void FVPAlgorithm::printAllTasks() {    
    for (std::list&lt;Task&gt;::iterator it = longList.begin(); it != longList.end(); ++it) {
        std::cout &lt;&lt; it-&gt;taskName &lt;&lt; std::endl;
    }
}
</code></pre>

<p>void FVPAlgorithm::printShortList() {
    for (std::vector::iterator&gt;::iterator it = shortList.begin(); it != shortList.end(); ++it) {
        std::cout &lt;&lt; (*it)-&gt;taskName &lt;&lt; std::endl;
    }
}</p>

<p><strong>CompareTasks lambda</strong>: It is good use of lambda. But given that CompareTasks has many lines of codes, Define TaskComparator separately. You may choose to make it part of Task class itself. A class can provide method for comparison. If you want to have dynamic comparison criteria (Based on task in selection or some other user criteria) use strategy pattern to decide on comparison strategy at run time. </p>

<pre><code>auto compareTasks = [this](std::list&lt;Task&gt;::iterator it) {
        std::string shortlistedTaskName = shortList.back()-&gt;taskName;
        char userChoice = NULL;
        for (it; it != longList.end(); ++it) {
            std::cout &lt;&lt; "Would you like to do " &lt;&lt; it-&gt;taskName &lt;&lt; " more than " &lt;&lt; shortlistedTaskName &lt;&lt; "? (Y/N)" &lt;&lt; std::endl;
            std::cin &gt;&gt; userChoice;
            while (true) {
                if (userChoice == 'Y' || userChoice == 'y') { // User wants to do this task more than the current leader.
                    shortList.push_back(it); // Add this task to the end of the shortlist.
                    return it; // Returns the task we stopped on.
                }
                else if (userChoice == 'N' || userChoice == 'n') { break; } // User doesn't want to, move on.
                else std::cout &lt;&lt; "Please enter Y or N." &lt;&lt; std::endl; break;
            }
            userChoice = NULL;
        }
        return it;
    };
</code></pre>
    </div>