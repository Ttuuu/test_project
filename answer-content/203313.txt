<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>With your example there is almost no difference between the two fragments other than the passed in file name format.  However I suspect you want varying behavior between the two <code>Fragment</code> types.  You could implement an adapter styled pattern like this:</p>

<pre><code>public abstract class Fragment
{
    public const string RUFragmentKey = "PCPE_FRAGMENT_RU.wxs";
    public const string ESFragmentKey = "PCPE_FRAGMENT_ES.wxs";

    protected string fragmentFile;
    protected XmlDocument document;

    public virtual string NameSpace { get; } = "http://wixtoolset.org/schemas/v4/wxs";

    protected Fragment(string fileName)
    {
        string result = Path.GetFileName(fileName).Trim();

        fragmentFile = fileName;
        document = new XmlDocument();
        document.Load(fragmentFile);
        Update();
    }

    public static Fragment Create(string fileName)
    {
        fileName = fileName.Trim();
        switch (fileName)
        {
            case RUFragmentKey:
                return new RUFragment(fileName);
            case ESFragmentKey:
                return new ESFragment(fileName);
            default:
                throw new NotSupportedException($"Fragment type '{fileName}' not supported.");
        }
    }

    public virtual void Update()
    {
        XmlElement rootElement = document.DocumentElement;
        rootElement.SetAttribute("xmlns", NameSpace);

        XmlElement FragmentElement = (XmlElement)rootElement.GetElementsByTagName("Fragment")[0];
        XmlElement dirRefElement = (XmlElement)FragmentElement.GetElementsByTagName("DirectoryRef")[0];
        XmlElement compElement = (XmlElement)dirRefElement.GetElementsByTagName("Component")[0];
        XmlNodeList fileNodeList = compElement.GetElementsByTagName("File");

        for (int i = 0; i &lt; fileNodeList.Count; i++)
        {
            //Getting the File element
            XmlElement fileElement = (XmlElement)fileNodeList[i];

            string srcString = fileElement.GetAttribute("src");
            if (srcString != "")
            {
                //Storing value of src attribute in source attribute
                fileElement.SetAttribute("Source", srcString);

                //removing src attribute
                fileElement.RemoveAttribute("src");
            }
        }

        //Saving the document
        document.Save(fragmentFile);
    }
}
</code></pre>

<p><code>Update</code> is virtual so derived classes can use specific implementation if needed via override.</p>

<p>Since there is currently zero difference between the two, the initial subclasses are plain:</p>

<pre><code>public class RUFragment : Fragment
{
    internal RUFragment(string fileName)
        : base(fileName) { }

    // Override functionality and add implementation details
}

public class ESFragment : Fragment
{
    internal ESFragment(string fileName)
        : base(fileName) { }

    // Override functionality and add implementation details
}
</code></pre>

<p>So the main function could be something along the lines of:</p>

<pre><code>static void Main(string[] args)
{
    if (!(args.Length == 0))
    {
        foreach (string arg in args)
        {
            Fragment fragment = Fragment.Create(arg);
        }
    }
}
</code></pre>

<p>It's impossible to know what your intent is, but maybe this will get you started in a useful direction.</p>
    </div>