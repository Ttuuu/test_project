<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<pre><code>def chunk_adder(lst):
  for i in lst:
    if len(i) == 1:
      yield i[0]
    else:
      yield sum(i)
</code></pre>
</blockquote>

<p><code>sum</code> can happilly consume iterable of size 1, it can even consume iterable of size 0:</p>

<pre><code>&gt;&gt;&gt; sum([1])
1
&gt;&gt;&gt; sum([])
0
</code></pre>

<p>So you can simplify it to:</p>

<pre><code>def chunck_adder(iterable):
    for element in iterable:
        yield sum(element)
</code></pre>

<p>Which is simply</p>

<pre><code>def chunck_adder(iterable):
    yield from map(sum, iterable)
</code></pre>

<p>So you could simplify <code>pascal_next</code> instead:</p>

<pre><code>def pascal_next(lst):
    return list(map(sum, double_chunker(lst)))
</code></pre>

<hr>

<blockquote>
<pre><code>def double_chunker(lst):
  leng = len(lst)
  for i in range(leng):
    if i == 0:
      yield [lst[0]]
    elif i == 1:
      yield [lst[0], lst[1]]
    elif i == leng:
      yield [lst[-1]]
    else:
      yield [lst[i-1], lst[i]]
  yield [lst[-1]]
</code></pre>
</blockquote>

<p>The intent is pretty much the same than the <a href="https://docs.python.org/3/library/itertools.html#itertools-recipes" rel="noreferrer"><code>pairwise</code> recipe</a> from <code>itertools</code>. Except you want to yield the first and last element as well.</p>

<p>Here you have two possibilities:</p>

<ul>
<li><p>either yield them manually:</p>

<pre><code>import itertools

def double_chunker(lst):
    if not lst:
        return
    a, b = itertools.tee(lst)
    next(b, None)

    yield [lst[0]]
    yield from zip(a, b)
    yield [lst[-1]]
</code></pre>

<p>But this forces the argument to be a list, or at least to know if its empty and to implement <code>__getitem__</code>.</p></li>
<li><p>or add boundary values to your input so <code>pairwise</code> can work properly:</p>

<pre><code>import itertools


def pairwise(iterable):
    a, b = itertools.tee(iterable)
    next(b, None)
    return zip(a, b)


def double_chuncker(iterable):
    extended = itertools.chain([0], iterable, [0])
    return pairwise(extended)
</code></pre>

<p>Which I recommend because it happily consume any iterable.</p></li>
</ul>

<hr>

<blockquote>
<pre><code>def pascal_triangle(rows):
  end = [[1]]
  for i in range(rows):
    end.append(pascal_next(end[-1]))
  return end
</code></pre>
</blockquote>

<p>Instead of relying on the list being constructed, I would explicitly store the current row. I would also turn this into an infinite generator because it really is and maybe provide an helper function for convenience:</p>

<pre><code>def pascal_triangle():
    row = [1]
    while True:
        yield row
        row = pascal_next(row)


def pascal_triangle_up_to(n):
    return list(itertools.islice(pascal_triangle(), n))
</code></pre>

<hr>

<p>Full code:</p>

<pre><code>import itertools


def pairwise(iterable):
    a, b = itertools.tee(iterable)
    next(b, None)
    return zip(a, b)


def double_chuncker(iterable):
    extended = itertools.chain([0], iterable, [0])
    return pairwise(extended)


def pascal_next(iterable):
    return list(map(sum, double_chuncker(iterable)))


def pascal_triangle():
    row = [1]
    while True:
        yield row
        row = pascal_next(row)


def pascal_triangle_up_to(n):
    return list(itertools.islice(pascal_triangle(), n))


if __name__ == '__main__':
    # Testing
    for row in pascal_triangle():
        print(row, end='')
        if (input()):
            break
</code></pre>
    </div>