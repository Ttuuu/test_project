<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<p>To this end, any feedback, criticism, or questions are greatly appreciated.</p>
</blockquote>
<p>Here are some ideas to improve the code.</p>
<h2>Split printing and logic</h2>
<p>Might be debatable but from my POV the</p>
<blockquote>
<p>The printing of the numbers</p>
</blockquote>
<p>and</p>
<blockquote>
<p>The logic for determining what should be returned</p>
</blockquote>
<p>are not split.</p>
<p>One of the goals of object oriented design is to make the code easier to change. So imagine we want to implement now to print <code>Boom</code> if a number <code>number % 10 == 0</code>. How would we do this? We would need to implement a <code>BoomNumber</code> class and change <code>FizzBuzzer</code> and might even change the main method because <code>fizz_value</code> does not make sense anymore. Not good!</p>
<p>In this example we can just swap out the <code>builder</code> and it would work.</p>
<pre><code>class PrintableNumber
  def initialize(name)
    @name = name
  end

  def to_s
    @name
  end
end

class BoomNumberBuilder
  def initialize(number)
    @number = number
  end

  def build
    PrintableNumber.new(name)
  end

  private

  attr_reader :number

  def name
    if boom?
      "Boom"
    else
      number
    end
  end
  
  def boom?
    number % 10 == 0
  end
end

class FizzNumberBuilder
  def initialize(number)
    @number = number
  end

  def build
    PrintableNumber.new(name)
  end

  private

  attr_reader :number

  def name
    if fizzbuzz?
      "FizzBuzz"
    elsif fizz?
      "Fizz"
    elsif buzz?
      "Buzz"
    else
      number
    end
  end

  def fizzbuzz?
    fizz? &amp;&amp; buzz?
  end

  def fizz?
    number % 3 == 0
  end

  def buzz?
    number % 5 == 0
  end
end

class PrintableNumberCollector
  include Enumerable

  def initialize(collection, builder = FizzNumberBuilder)
    @collection = collection
    @builder = builder
  end

  def each
    collection.each do |item|
      yield builder.new(item).build
    end
  end

  private

  attr_reader :collection, :builder
end

puts "== Fizzer =="
fizzer = PrintableNumberCollector.new((1..10).to_a)
puts fizzer.map(&amp;:to_s).join("\n")

puts "== Boomer =="
boomer = PrintableNumberCollector.new((1..10).to_a, BoomNumberBuilder)
puts boomer.map(&amp;:to_s).join("\n")
</code></pre>
<h2>Â Implement common interface</h2>
<p>In your <code>FizzNumber</code> class you implement a <code>fizz_value</code> method which you then use in your main <code>fizzer.map(&amp;:fizz_value).join("\n")</code>. This creates an unnecessary coupling. If you look into the method, you can already see what the method name should be <code>number.to_s</code></p>
<pre class="lang-rb prettyprint-override"><code>  def fizz_value
    value = FIZZ_MAP.find { |key, value| send(value) }
    value&amp;.first || @number.to_s
  end
end
</code></pre>
<p>so a better function name would be</p>
<pre class="lang-rb prettyprint-override"><code>def to_s
  value&amp;.first || @number.to_s
end

private

def value
  FIZZ_MAP.find { |key, value| send(value) }
end
</code></pre>
<h2>Avoid meta programming</h2>
<p>Try to avoid meta programming (<code>send</code>) if not absolutely necessary. It makes the code a lot harder to read. You only have 4 different cases which can easily reflected with an if else.</p>
<pre class="lang-rb prettyprint-override"><code>  def to_s
    if fizzbuzz?
      "FizzBuzz"
    elsif fizz?
      "Fizz"
    elsif buzz?
      "Buzz"
    else
      number
    end
  end
</code></pre>
<h2>Use getter and setter</h2>
<p>Instead of using instance variables <code>@collection</code> you should try to use getter / setter methods. If you need to do e.g. validations or some processing of the variable, you only need to change one place.</p>
<pre class="lang-rb prettyprint-override"><code>class FizzBuzzer
  attr_reader :collection

  def each
    collection.each do |item|
      yield FizzNumber.new(item)
    end
  end
end
</code></pre>
<h2>Use simple delegator</h2>
<p>Instead of implementing the <code>each</code> method you could also use the <code>SimpleDelegator</code> module.</p>
<p><a href="https://ruby-doc.org/stdlib-2.5.1/libdoc/delegate/rdoc/SimpleDelegator.html" rel="nofollow noreferrer">https://ruby-doc.org/stdlib-2.5.1/libdoc/delegate/rdoc/SimpleDelegator.html</a></p>
    </div>