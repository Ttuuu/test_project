<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'm quite fine with the first approach.  You are "reinterpreting" 4 bytes as a single 32-bit value.</p>

<p>However, I might want to replace the <code>[0]</code> array look-up with a straight dereference.</p>

<pre><code>const auto val = * reinterpret_cast&lt;const int32_t *&gt;(&amp;buf[offset]);
</code></pre>

<hr>

<p>The first and second methods actually can do slightly different things.</p>

<p>The first method reads a 32 bit value using the computer's natural byte ordering, and then swaps the bytes if <code>bswap</code> is true.</p>

<p>The second method reads a 32 bit value in little endian format (if <code>bswap</code> is false) or big endian format (if <code>bswap</code> is true).</p>

<p>On a little endian machine, they are equivalent.  On a big endian machine, they perform opposite.</p>

<hr>

<p>I'm a little concerned with this code:</p>

<pre><code>if (offset &gt; buf.size() - sizeof(int32_t)) {
    // error handling
}
</code></pre>

<p>If the buffer has less than 4 bytes, the unsigned subtraction will overflow.  The buffer size less the size of an int32 is not really a meaningful, physical quantity; it doesn't represent a concrete concept.  What is important is that the starting point of the read plus the size of the value cannot extend beyond the end of the buffer.  This can be represented in code as follows, and doesn't suffer from the unsigned subtraction overflow:</p>

<pre><code>if (offset + sizeof(int32_t) &gt; buf.size()) {
    // error handling
}
</code></pre>
    </div>