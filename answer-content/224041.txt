<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>When calling your method like this:</p>

<pre><code>  for (int i = 0; i &lt; 10; i++)
  {
    Console.WriteLine(GenerateSimplePassword());
  }
</code></pre>

<p>I get this result: </p>

<pre><code>    88yuQg7H
    u5UqU36o
    u5UqU36o
    u5UqU36o
    u5UqU36o
    u5UqU36o
    u5UqU36o
    u5UqU36o
    u5UqU36o
    u5UqU36o
</code></pre>

<p>which is not so random.</p>

<p>The reason is the <code>Random</code> object being instantiated each time the method is called. Instead you must move the <code>Random</code> object outside the method as a <code>static</code> one time initialized field. </p>

<hr>

<p>You could make the valid chars as a static field string:</p>

<pre><code>const string chars = "abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";
static int DigitStart = chars.IndexOf('0');
static int UpperStart = chars.IndexOf('A');
</code></pre>

<hr>

<p>Instead of concatenate strings throughout the process it would be better to use:</p>

<p><code>char[] password = new char[length]</code></p>

<p>it will improve both performance and readability:   </p>

<pre><code>password[0] = chars[random.Next(0, DigitStart)];
</code></pre>

<hr>

<p>All in all my suggestion would be something like:</p>

<pre><code>public static class PasswordGenerator
{

  static readonly Random random = new Random();
  const string chars = "abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";
  static int DigitStart = chars.IndexOf('0');
  static int UpperStart = chars.IndexOf('A');

  public static string GenerateSimplePassword(int length = 8)
  {
    length = Math.Max(length, 8);

    char[] password = new char[length];
    password[0] = chars[random.Next(0, DigitStart)];
    password[1] = chars[random.Next(DigitStart, UpperStart)];
    password[2] = chars[random.Next(UpperStart, chars.Length)];

    for (int i = 3; i &lt; length; i++)
    {
      password[i] = chars[random.Next(0, chars.Length)];
    }

    return new string(password.OrderBy(_ =&gt; random.Next()).ToArray());
  }
}
</code></pre>
    </div>