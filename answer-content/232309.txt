<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Unfortunately I don't know of a better way (but have also not looked into one, tbh). Here are some comments on your <code>pathify</code> method instead.</p>

<p>You are currently checking <code>if i == 0</code> on every loop iteration, but it is true only once at the beginning. Just special case that one out and do</p>

<pre><code>codes = [Path.MOVETO]
codes += [Path.LINETO for _ in range(1, len(polygon.exterior.coords))]
</code></pre>

<p>Even better, lists can be multiplied. Since <code>Path.LINETO</code> seems to be a constant, you can just do</p>

<pre><code>codes = [Path.MOVETO] + [Path.LINETO] * (len(polygon.exterior.coords) - 1)
</code></pre>

<p>For the <code>vertices</code> I would use <a href="https://docs.python.org/3/library/stdtypes.html#mutable-sequence-types" rel="nofollow noreferrer"><code>list.extend</code></a> instead of list addition. This way you don't need to cast it to a list yourself but can let <code>extend</code> handle it. It might even be implemented in such a way that it just consumes an iterable. CPython actually does this, but it guesses the size by which the original list needs to be extended by asking the iterable object. If the object does not return a guess, it uses <code>8</code> instead (which might not be the most efficient for e.g. a long generator).</p>

<pre><code>for interior in polygon.interiors:
    vertices.extend(interior.coords)
    codes.extend([Path.MOVETO] + [Path.LINETO] * (len(interior.coords) - 1))
</code></pre>

<p>At this point it might make sense to put generating the commands into a function, since we already had to use it twice:</p>

<pre><code>@staticmethod
def generate_codes(n):
    """ The first command needs to be a "MOVETO" command,
        all following commands are "LINETO" commands.
    """
    return [Path.MOVETO] + [Path.LINETO] * (n - 1)

@staticmethod
def pathify(polygon):
    ''' Convert coordinates to path vertices. Objects produced by Shapely's
        analytic methods have the proper coordinate order, no need to sort.

        The codes will be all "LINETO" commands, except for "MOVETO"s at the
        beginning of each subpath
    '''
    vertices = list(polygon.exterior.coords)
    codes = self.generate_codes(len(polygon.exterior.coords))

    for interior in polygon.interiors:
        vertices.extend(interior.coords)
        codes.extend(self.generate_codes(len(interior.coords)))

    return Path(vertices, codes)
</code></pre>

<p>You should also probably put your calling code under a <a href="http://stackoverflow.com/questions/419163/what-does-if-name-main-do"><code>if __name__ == "__main__":</code> guard</a> to allow importing from this module without running the example code.</p>
    </div>