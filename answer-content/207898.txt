<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Answering your main question: </p>

<blockquote>
  <p>So, is this code any good?</p>
</blockquote>

<p>Your code is good in the sense that it works as expected in the context of the English alphabet. That's a good start and for a small program like this we could live with that.</p>

<p>But there are a couple of things to be done better.</p>

<blockquote>
<pre><code>    Console.WriteLine("Input anything and the program wil tell you how many vowels, consonants, numbers and other symbols you gave.");
    text = Console.ReadLine().ToLower();
</code></pre>
</blockquote>

<p>Your prompts are a little too descriptive. Make them shorter and more "demanding" like:</p>

<pre><code>Console.Write("Enter the text: ");
text = Console.ReadLine().ToLower();
</code></pre>

<p>Notice the use of <code>Console.Write(...)</code> instead of <code>Console.WriteLine(...)</code>. The effect is, that the user enter the text on the same line after the prompt, which is common practice in the console.</p>

<p>If you want to inform the user of the meaning by the program, then provide a explanation once in the beginning - before to loop.</p>

<hr>

<blockquote>
<pre><code>  var hsVowels = new HashSet&lt;char&gt; { 'a', 'e', 'i', 'o', 'u' };
  var hsConsonants = new HashSet&lt;char&gt; { 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z' };
  var hsNumbers = new HashSet&lt;char&gt; { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9' };
</code></pre>
</blockquote>

<p>These variables are constant and do not change per loop, so no need to instantiate them in every loop. Instead place them in the beginning of the method:</p>

<pre><code>  string repeat;

  var hsVowels = new HashSet&lt;char&gt; { 'a', 'e', 'i', 'o', 'u' };
  var hsConsonants = new HashSet&lt;char&gt; { 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z' };
  var hsNumbers = new HashSet&lt;char&gt; { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9' };

  do
  {
    //asks for input
</code></pre>

<hr>

<blockquote>
<pre><code>    int vowels, consonants, numbers, otherSymbols;
</code></pre>
</blockquote>

<p>Declaring variables like this is allowed, but considered bad practice. Instead use one line per variable:</p>

<pre><code>    int vowels = 0;
    int consonants = 0;
    int numbers = 0;
    int otherSymbols = 0;
</code></pre>

<p>It's easier to find them and hence understand the code - especially for reviewers.</p>

<hr>

<blockquote>
<pre><code>    //calculates
    vowels = text.Count(c =&gt; hsVowels.Contains(c));
    consonants = text.Count(c =&gt; hsConsonants.Contains(c));
    numbers = text.Count(c =&gt; hsNumbers.Contains(c));
    otherSymbols = text.Length - (vowels + consonants + numbers);
</code></pre>
</blockquote>

<p>Here you use the LINQ extension <code>Count()</code> which is usable for many things, but here it is rather inefficient in that calling <code>text.Count(...)</code> for every char type will cause the text to be parsed three times. For a small text it will probably be OK, but for larger texts it will slow down the process significantly. Instead a single <code>foreach</code>-loop could do the same in just one iteration:</p>

<pre><code>    foreach (char ch in text)
    {
      if (hsVowels.Contains(ch))
        vowels++;
      else if (hsConsonants.Contains(ch))
        consonants++;
      else if (hsNumbers.Contains(ch))
        numbers++;
      else
        otherSymbols++;
    }
</code></pre>

<p>It looks maybe not so smart and modern but is a lot more efficient. </p>

<hr>

<blockquote>
<pre><code>    Console.WriteLine("Your input has {0} vowels, {1} consonants, {2} numbers and {3} other Symbols.", vowels, consonants, numbers, otherSymbols);
</code></pre>
</blockquote>

<p>Printing the result on one line is not very readable. A tabular form will be more clear:</p>

<pre><code>    Console.WriteLine("Result: ");
    Console.WriteLine($"Original Text: {text}");
    Console.WriteLine($"Vowels:        {vowels,15}");
    Console.WriteLine($"Consonants:    {consonants,15}");
    Console.WriteLine($"Numbers:       {numbers,15}");
    Console.WriteLine($"OtherSymbols:  {otherSymbols,15}");
</code></pre>

<hr>

<blockquote>
<pre><code>    Console.WriteLine("Would you like to try again? (yes/no)");
    repeat = Console.ReadLine();
    //tests if the users input was valid (yes/no)
    while (!(repeat.ToLower().Contains("yes") || repeat.ToLower().Contains("no")))
    {
</code></pre>
</blockquote>

<p>Here, the user is forced to type "yes" or "no". "y" or "n" would do the trick:</p>

<pre><code>Console.Write("Would you like to try again? (Y/N): ");
</code></pre>

<p>you use <code>repeat.ToLower()</code> every time you use <code>repeat</code> so why not lower it once:</p>

<pre><code>repeat = Console.ReadLine()?.ToLower();
</code></pre>

<hr>

<p>When it comes to the overall structure you should think about splitting the code into meaningful methods. The program has three major parts:</p>

<ol>
<li>User input</li>
<li>The calculation</li>
<li>Display of the result</li>
</ol>

<p>and because you allow the user to enter more than one text it must run in a loop like:</p>

<pre><code>  string textInput;

  while ((textInput = GetUserInput()) != null)
  {
    TextInfo info = CountElements(textInput);
    PrintTextInfo(textInput, info);
  }
</code></pre>

<p>This is easy to understand, and each functionality of the program can be written and maintained separately:</p>

<pre><code>private string GetUserInput()
{
  Console.Clear();
  Console.Write("Enter some Text [To exit press: Enter]: ");
  string text = Console.ReadLine();
  if (string.IsNullOrWhiteSpace(text))
    return null;
  return text;
}



private void PrintTextInfo(string textInput, TextInfo info)
{
  Console.WriteLine("Result: ");
  Console.WriteLine($"Original Text: {textInput}");
  Console.WriteLine($"Vowels:        {info.Vowels,15}");
  Console.WriteLine($"Consonants:    {info.Consonants,15}");
  Console.WriteLine($"Numbers:       {info.Numbers,15}");
  Console.WriteLine($"OtherSymbols:  {info.OtherSymbols,15}");
  Console.WriteLine("Press Enter to Continue...");
  Console.ReadLine();
}
</code></pre>

<p>For the <code>TextInfo info = CountElements(textInput);</code> you could write a text analyzer class that could be instantiated like:</p>

<pre><code>  CharTypeAnalyzer analyzer = new CharTypeAnalyzer("aeiouAEIOU", "bcdfghijklmnpqrstvwxyzBCDFGHIJKLMNPQRSTVWXYZ");
</code></pre>

<p>with the definition of vowels and consonants as string arguments. This will make it more reusable for other languages than English (the use is of course limited to languages where the terms "vowel" and "consonant" are meaningful).</p>

<p>Using this class will change the main method to:</p>

<pre><code>static void Main()
{
  CharTypeAnalyzer analyzer = new CharTypeAnalyzer("aeiouAEIOU", "bcdfghijklmnpqrstvwxyzBCDFGHIJKLMNPQRSTVWXYZ");

  string textInput;

  while ((textInput = GetUserInput()) != null)
  {
    TextInfo info = analyzer.Analyze(textInput);
    PrintTextInfo(textInput, info);
  }
}
</code></pre>

<p>where <code>TextInfo</code> is defined as:</p>

<pre><code>public struct TextInfo
{
  public int Vowels;
  public int Consonants;
  public int Numbers;
  public int OtherSymbols;
}
</code></pre>

<p>and <code>CharTypeAnalyzer</code> as:</p>

<pre><code>public class CharTypeAnalyzer
{
  string _vowels;
  string _consonants;

  public CharTypeAnalyzer(string vowels, string consonants)
  {
    _vowels = vowels;
    _consonants = consonants;
  }

  public TextInfo Analyze(string textInput)
  {
    TextInfo info = new TextInfo();

    foreach (char ch in textInput)
    {
      if (IsVowel(ch))
        info.Vowels++;
      else if (IsConsonant(ch))
        info.Consonants++;
      else if (IsDigit(ch))
        info.Numbers++;
      else
        info.OtherSymbols++;
    }

    return info;
  }

  private bool IsVowel(char ch)
  {
    return _vowels.Contains(ch);
  }

  private bool IsConsonant(char ch)
  {
    return _consonants.Contains(ch);
  }

  private bool IsDigit(char ch)
  {
    return char.IsDigit(ch);
  }
}
</code></pre>

<p>In this way the code is easy to review and maintain, and you can easily debug and test each part separately. </p>

<p>It can be done in many other ways, but the essential messages are: </p>

<ol>
<li>Keep things simple</li>
<li>Split the code into meaningful parts - methods and classes</li>
</ol>
    </div>