<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<pre><code>template&lt;typename T, unsigned int C&gt;
class Vec;
</code></pre>

<p>The template generates redundant codes if <code>C</code> varies for the same <code>T</code>.<br>
You can look through <code>&lt;&lt;Effective C++&gt;&gt; Item 44</code> and refactor like this:</p>

<pre><code>template&lt;typename T&gt;
class VecBase {
    T* data;
public:
    VecBase(std::size_t C);
};

template&lt;typename T, unsigned int C&gt;
class Vec :VecBase&lt;T&gt; {
public:
    Vec() :VecBase&lt;T&gt;(C)
    {}
};
</code></pre>

<p>The benefit is: </p>

<ul>
<li>prevent software from being too large.  </li>
<li>shrink the size of <code>Vec&lt;T, C&gt;</code> (data is allocated on the heap, just contains a pointer)</li>
</ul>
    </div>