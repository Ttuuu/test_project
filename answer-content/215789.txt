<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Promise chain callback hell</h1>

<p>The <code>Promise API</code> and now <code>async functions</code> are designed to reduce the number of callbacks (Colloquially known as "callback hell"). You have a total of 16 defined callbacks and by all the console logs I see you are struggling to follow the flow (callback hell)</p>

<h2>Your questions</h2>

<blockquote>
  <p>Am I using the promises correct here? 
  Should I better do everything in the first then and just chain the async class to use resolve or reject on finish?</p>
</blockquote>

<p>As the chain of data (dependency, content, immediacy, life...) is not clear it is hard to say. At face value. "No" you are not handling the promises correctly, and "Yes" in this case handle the rest in the first resolve in the callback. Let the errors fall through to the calling function.</p>

<blockquote>
  <p>What could be a problem with the current design when it gets more complex, because i feel like it is not really readable currently?</p>
</blockquote>

<p>See the notes below regarding style and readability. </p>

<h2>Parallel systems</h2>

<p>As for increased complexity using the same approach will quickly become a nightmare. You are creating a node in a parallel data processing system. Parallel processing hates dependencies as they increase the latency of the system and increase the chance of dependency lock.</p>

<p>As it stands you have already set up a high latency system. B Depends on A and will not start until A has responded, thus the best response time is 2 times the response time of the service you are using. Add another dependence and the response is 3 times the service response time. This is an unmanageable condition in the real world.</p>

<p>You may ask what should I do? I can not answer as...</p>

<ul>
<li>I do not know the nature of the data you are fetching, </li>
<li>I do not know the nature of the service you are calling, especialy its dependencies on other services (lord forbid if it depended on a response from the server you are running the request on).</li>
</ul>

<p>The only suggestions is likely impractical, "Keep a local store updated via poling to remove the need for external data dependency chains when responding to requests" and would likely need a redesign of the whole system.</p>

<h2>Async functions rule.</h2>

<blockquote>
  <p>Should I use new Promise(function(resolve, reject) instead of  async function?</p>
</blockquote>

<p>Use <code>async</code>. The rule of thumb is "async means not having to type <code>new Promise</code>" 
See rewrite</p>

<h2>Notes on style and design</h2>

<ul>
<li><p><strong>DON'T!!! throw strings</strong> They require special handling and will cause most standard catch handlers to throw an error in the handlers block (the very last place a throw should ever happen). Throw a new instance of an error eg <code>new Error("message")</code> or one of the standard error types eg <code>new RangeError("Value to big")</code></p></li>
<li><p>Class syntax is bad. It has forced you to expose what should be private functions <code>getOne</code>, <code>getTwo</code>, <code>getThree</code>. In this case you are creating a single instance object for which the class syntax is completely inappropriate.</p></li>
<li><p>Use arrow functions to avoid the need for hacks like <code>var _this = this;</code></p></li>
<li><p>Use <code>const</code> for variables that do not change.</p></li>
<li><p>Use <code>var</code> for variables that do change and are function scoped.</p></li>
<li><p>Use <code>let</code> for variables that are block scoped.</p></li>
<li><p>Don't create one use variables unless it improves readability. Eg <code>let data = await response.json(); return data;</code> the variable data is just noise. In this case you can return the promise <code>return response.json();</code></p></li>
<li><p>Names add abstract meaning. Bad naming results in bugs due to confusion regarding the data being handled. eg you call a promise <code>data</code> in  <code>let data = await response.json()</code> The name <code>data</code> is already very generic, but in this case its totally misleading.</p></li>
<li><p>Avoid the use of <code>null</code> as it is often use as an alias to <code>undefined</code> however it does not have the same semantic meaning, nor does it follow JS convention for undefined return type.</p></li>
<li><p>If a statement block returns it should not be followed by an <code>else</code> or <code>else if</code> statement block.</p></li>
<li><p>The two callbacks a promise callback function is passed as arguments should be named appropriately, <code>new Promise((resolve, reject) =&gt;</code> would be better as <code>new Promise((fetchOk, fetchFailed) =&gt;</code></p></li>
<li><p>Don't create intermediate functions when not required. eg <code>.then(function(data) {resolve(data)})</code> can be <code>.then(resolve)</code></p></li>
<li><p>Exceptions float to the top. You are returning a promise when you call <code>test</code>, It looks like you intend the calling function to include a <code>.catch</code> callback. That means you do not have to handle the catches inside the function test. just let the exceptions fall though to the calling function.</p></li>
<li><p>Console logging is for debugging only and has no place in release code. You are using console.log to follow flow. Avoid console logging and use dev tools debugger to follow flow. </p>

<p>One issues with using console is that it forces you to write the code in such a way as to allow for the console expression to exist, often to the detriment of optimal execution and readability. </p></li>
</ul>

<h2>Rewrite</h2>

<p>It is unclear how you intend to handle this code. Nor is the argument <code>router</code> defined. I assume that the function <code>IndexController.index</code> is only for private use. The returned object <code>IndexController</code> is only a husk object to hold the closure. It has no interface.</p>

<p>Note <code>indexService</code> returns a parsed result not the JSON text</p>

<p>I have created only the one module as they are so tightly integrated.</p>

<pre><code>"use strict";
const fetch = require("node-fetch");
const HttpsProxyAgent = require("https-proxy-agent");

const service = {
    URL: "https://jsonplaceholder.typicode.com/todos/",
    get agent() { return new HttpsProxyAgent("http://xxx:80") },
};
async function todos(name){
    const response = await fetch(service.url + name, {agent : service.agent});
    if (response.ok) { return response.json() }
    throw new Error("Fetch of `" + name + "` failed. ");
}    
const index = async () =&gt; todos("1").then(todo =&gt; todos(todo.foo === "a" ? "2" : "3"));
function IndexController(router) =&gt; {
    router.get("/", (req, res) =&gt; index()
        .then(todos =&gt; /*respond with todos data*/)
        .catch(err =&gt; /*respond with service error*/);
    );
}
module.exports = IndexController;
</code></pre>
    </div>