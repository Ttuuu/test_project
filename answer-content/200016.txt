<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Adding to the DOM</h2>
<p>There is no one right or wrong way to add to the DOM, each has its pros and cons.</p>
<h3>Some options</h3>
<ol>
<li>Markup direct to the page via <code>element.innerHTML</code> (as you have done).</li>
<li>Using the <a href="https://developer.mozilla.org/en-US/docs/Web/API/Document" rel="nofollow noreferrer">document</a> API to create a node tree, assign properties and then add to the DOM using any of the various node insert functions like <code>node.appendChild</code>.</li>
<li>Cloning the content of a <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/template" rel="nofollow noreferrer">template</a> element that defines the nodes you want to add. Then use the document API to make the needed change and append to the page</li>
</ol>
<h3>So which to use?</h3>
<p>Its a rather subjective question and it would be best that you try them all.</p>
<blockquote>
<p>was it right to use innerHTML to add li items?</p>
</blockquote>
<p>Yes and no.</p>
<p>The method of adding was not wrong (<code>element.innerHTML</code>), but the design of the function and overall approch to procedural generated content is wrong.</p>
<p>You are re-creating the whole displayed todo list whenever you add to it. That's like building a wall one brick at a time, but before you add the next brick you smash down the wall and rebuild it to the point where you add the next brick.</p>
<p>You need only add the new todo item to the end (or top) of the list of items. The rest of them can stay where you put them before.</p>
<h2>Event listeners</h2>
<blockquote>
<p>adding event listener to all checkboxes in my case takes 4 line (in end drawTodoList). How can I short this?</p>
</blockquote>
<p>You are referring to the lines...</p>
<blockquote>
<pre><code>checkboxes = document.querySelectorAll('input[type=checkbox]')    
checkboxArray = Array.from(checkboxes)   
checkboxArray.forEach(function(checkbox) {
   checkbox.addEventListener('change', confirmCheck)    
})
</code></pre>
</blockquote>
<p>...which could be shortened to</p>
<pre><code>document.geteElementById("#"+toDo.id).addEventListener('change', confirmCheck );
</code></pre>
<p>But the question can not be  directly answered as the function <code>drawTodoList</code> is flawed, as I described in Adding to the DOM.</p>
<p>The click function can be added to the un-ordered list element once, at the start of the app, thus one event covers all todo items.</p>
<p>The checkbox that is clicked on can be found in <code>event.target</code>. Adding a property to the checkbox that holds the todo item id lets you apply the changes to the todolist via the todo id.</p>
<h2>Information, data, and the display</h2>
<blockquote>
<p>how can I improve my function countItem()?</p>
</blockquote>
<p>The count is a behavior of the information not the display, get it by stepping over the items in the todo list.</p>
<h2>The rewrite.</h2>
<p>I started from your HTML and CSS.</p>
<p>It is a bit over kill but I got lost in the writing of it. The code contains how I have implemented the 3 questions you ask. Adding to the DOM, creating event listener for new items, and counting the number of unchecked items.</p>
<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>const todoDataJSON = `[{ "id" : 1, "checked" : false, "text" : "Click Something todo" },{ "id" : 2, "checked" : false, "text" : "Check Click Something todo as done" }]`;


// the todo information and behaviours
const todoList = (() =&gt; {
    var UId = 1;                // NOTE must start above 0 to be truthy true
    const items = [];   
    const indexed = new Map();  // For quick lookups by id
    const vetRecord = record =&gt; true; // This stub Make sure incoming data is valid and safe
    const vetText = text =&gt; typeof text === "string" &amp;&amp; text !== "";
    const create = (text, checked = false, id = UId++) =&gt; ({id, text, checked});
    const reset = () =&gt; (items.length = 0, indexed.clear(), UId = 1);

    const toDoList = Object.freeze({
        get length() { return items.length },
        get uncheckedCount() { return items.reduce((uc, record) =&gt; uc += record.checked ? 0 : 1, 0) },
        set data(jsonText) { 
            var maxId = UId; 
            try {                    
                const data = JSON.parse(jsonText);
                reset();
                data.forEach(item =&gt; {
                    if (!vetRecord(item)) { throw new Error(); }
                    maxId = Math.max(item.id, maxId);
                    const record = create(item.text, item.checked, Number(item.id));
                    items.push(record);
                    indexed.set(record.id, record);
                });
                UId = maxId + 1;
            } catch(e) { reset() } // make data safe again
        },
        get data() { return JSON.stringify(items) },
        each(callback) { for (const record of items) { callback({...record}) } }, 
        toggleCheck(id) {
            const record = indexed.get(id);
            if (record) { record.checked = !record.checked }
        },
        add(text) {
            if(vetText(text)) {
                const record = create(text);
                items.push(record);
                indexed.set(record.id, record);
                return {...record};  // returns a copy not the original
            }
        }
    });    
    return toDoList;
})();


/* Display an UI */
;(()=&gt;{
    const elements = {
        list : query('#todo-list'),
        count : query('#item-count'),
        uncheckedCount : query('#unchecked-count'),
        template : query('#todo-item'),
    };
    
    elements.list.addEventListener("click", listItemClick);
    query("#add-button").addEventListener("click", promptForNew); 
    
    function query(query, el = document) { return el.querySelector(query) }
    const assign = (el, props) =&gt; Object.assign(el, props);
    const append = (node, ...items) =&gt; {
        items.forEach(el =&gt; node.appendChild(el));
        return node;
    }
    
    function listItemClick(event) {
        if(event.target.todoId) { 
            todoList.toggleCheck(event.target.todoId) 
            updatePage();
        }
    }
    function displayToDoItem(todo) {
        const listItem = document.importNode(elements.template.content, true);
        assign(query("li", listItem), {id : "todoItem" + todo.id });
        assign(query("input", listItem), { 
            checked : todo.checked,
            name : "todo" + todo.id,
            todoId : todo.id,   // added but will not be vissible in markup
        });
        assign(query("label", listItem), { 
            "for" : "todo" + todo.id,
            textContent : todo.text
        });
        append(elements.list, listItem); 
    }
    function promptForNew() {
        const todo = todoList.add(prompt("What is it you want to do", ""));
        if (todo) {  displayToDoItem(todo) }
        updatePage();
    }
    function updatePage() {
        elements.count.textContent = todoList.length;
        elements.uncheckedCount.textContent = todoList.uncheckedCount;
    }
    
    // source data and give to todolist
    todoList.data = todoDataJSON;
    todoList.each(displayToDoItem); // display existing
    updatePage();
    
})();</code></pre>
<pre class="snippet-code-css lang-css prettyprint-override"><code>.center {
  align-self: center;
}

.flow-right {
  display: flex;
  justify-content: space-around;
}
.container {
  max-width: 800px;
  margin: 0 auto;
  padding: 10px;
  display: flex;
  flex-direction: column;
  background-color: white;
  height: 100vh;
}

.title, .controls, .button {
  flex: none;
}

.button {
  padding: 10px 20px;
}</code></pre>
<pre class="snippet-code-html lang-html prettyprint-override"><code>&lt;template id="todo-item"&gt; 
  &lt;li class="todo-container"&gt;
     &lt;input type="checkbox" class="todo-checkbox"&gt;
     &lt;label&gt;&lt;/label&gt;
  &lt;/li&gt;
&lt;/template&gt;
&lt;div class="container center"&gt;
  &lt;h1 class="center title"&gt;Things to do&lt;/h1&gt;
  &lt;div class="flow-right controls"&gt;
    &lt;span&gt;All things done &amp; to do: &lt;span id="item-count"&gt;0&lt;/span&gt;&lt;/span&gt;
    &lt;span&gt;Things left to do: &lt;span id="unchecked-count"&gt;0&lt;/span&gt;&lt;/span&gt;
  &lt;/div&gt;
  &lt;button class="button center" id="add-button"&gt;I Have Something To Do&lt;/button&gt;
  &lt;ul id="todo-list" class="todo-list"&gt;&lt;/ul&gt;
&lt;/div&gt;</code></pre>
</div>
</div>

    </div>