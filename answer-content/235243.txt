<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Control.java</h2>

<p>I don't like this name as it's not specific. I'd suggest 'CalculatorApp' instead.</p>

<p>You don't need the inifinite loop. The application will already continue until the user closes the program.</p>

<pre><code>// you can remove all of this:
boolean exit = false;
while(!exit) {
}
</code></pre>

<h2>Calculator.java</h2>

<p>If you didn't write the program, would you know what <code>Calculator.calculate(String)</code> does? The naming is very ambiguous and the code itself looks very complicated (thankfully the heavy complicated, heavy lifting is done by an external library). You should add a javadoc to both the class &amp; method at the very least.</p>

<p>You could have done this entire assignment without JavaScript. You may have gotten more learning out of it if you didn't use ScriptEngine. To me it seems hacky. I do give you bonus points for cleverness, though.</p>

<h2>Gui.java</h2>

<p>You have 2 unused imports (Level &amp; Logger)</p>

<p>Avoid using wildcards (<code>.*</code>) in your imports. It clutters the local namespace and It makes it harder to tell which libraries are doing what. It will also cause a compiler error when there are two classes with the same name.</p>

<pre><code>import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
</code></pre>

<p>If you're using an IDE you should see a warning about your class not having a <code>serialversionUID</code>. You can allow your IDE to auto-generate one for you:</p>

<pre><code>private static final long serialVersionUID = 1L;
</code></pre>

<p><strong>Avoid magic numbers &amp; magic strings</strong> Your class would be easier to maintain &amp; read if you used static variables declared at the top. E.G:</p>

<pre><code>private static final int WIDTH = 400;
private static final int HEIGHT = 400;
...
//The frame
setSize(WIDTH, HEIGHT);
</code></pre>

<p>No need to count the number of values in an array yourself, instead use <code>array.length</code>. This will make maintenance easier as you don't have to re-count the values every time:</p>

<pre><code>JButton button[] = new JButton[buttonText.length];
for(int i = 0; i &lt; buttonText.length; i++) {
</code></pre>

<p>Alternatively use a 'for-each' loop since you don't need the index.</p>

<p>'17' should definitely be a variable here, as it's currently unreadable. Same goes for your other magic strings/variables:</p>

<pre><code>else if(i == 17) {
</code></pre>

<p>This is probably one of, if not the worst thing you can possibly do. You may not think it matters now but trust me, this is a really bad habit and the best way to use good practices is to never learn the bad ones.  Please use a throws declaration if you don't want to handle errors:</p>

<pre><code>catch (Exception ex) {
}
</code></pre>
    </div>