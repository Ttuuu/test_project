<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<pre><code>main :: IO ()
main = traverse_ doNoise =&lt;&lt; getClipboardString where
 doNoise = setClipboardString &lt;=&lt; traverse randCap
 randCap x = bool id toUpper &lt;$&gt; (randomIO :: IO Bool) &lt;*&gt; pure x
</code></pre>

<p>Edit: Each change was arrived at through pattern-matching from my experience; compact code is usually easier to work with further. Looking at this again makes me think there ought to be a more <code>lens</code>y solution, one that fuses getting and setting, and indeed:</p>

<pre><code>main = modifyClipboardString =&lt;&lt;
  zipWith (bool id toUpper) &lt;$&gt; getRandoms
</code></pre>

<p>We are fortunate to not actually need side effects depending on clipboard contents, but if we did, I would recommend writing a monadic variant of <code>modifyClipboardString</code>.</p>
    </div>