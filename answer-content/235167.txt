<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Building on <a href="https://codereview.stackexchange.com/a/235116/35322">Oliver Schonrock's answer</a>, here is an equivalent version of the code leveraging the <code>std::all_of</code> algorithm. Note that I did not try to change the semantics of given in Oliver's answer, as all three structures could be made much shorter by always counting, and using bitwise operations.</p>

<pre><code>#include &lt;iostream&gt;
#include &lt;string&gt;
#include &lt;cctype&gt;
#include &lt;unordered_map&gt;
#include &lt;unordered_set&gt;
#include &lt;array&gt;


struct IsFirstOccurrence_UM {
  bool operator()(char c) {
    int&amp; count = freqs[std::toupper(static_cast&lt;unsigned char&gt;(uc))];
    if (count &gt; 0) {
      return false;
    } else {
      count++;
      return true;
    }
  }
private:
  std::unordered_map&lt;char, int&gt; freqs;
};

struct IsFirstOccurrence_Set {
  bool operator()(char c) {
    if (auto uc = static_cast&lt;unsigned char&gt;(c); std::isalpha(uc)) {
      auto [iter, was_new] = freqs.insert(std::toupper(uc));
      return was_new;
    } else {
      return true; // Note that non-alpha characters are always considered first-occurrence
    }
  }
private:
  std::unordered_set&lt;char&gt; freqs;
};

struct IsFirstOccurrence_Array {
  bool operator()(char c) {
    if (auto uc = static_cast&lt;unsigned char&gt;(c); std::isalpha(uc)) {
      int idx = std::toupper(uc) - 'A';
      if (freqs[idx])  {
        return false;
      } else {
        freqs[idx] = true;
        return true;
      }
    } else {
      return true; // Note that non-alpha characters are always considered first-occurrence
    }
  }
private:
  std::array&lt;bool, 26&gt; freqs{false};
};

template&lt;typename IsFirstOccurrencePedicate&gt;
bool is_isogram(const std::string&amp; str, IsFirstOccurrencePedicate is_first_occurrence) {
  return std::all_of(str.begin(), str.end(), std::move(is_first_occurrence));
}

int main() {

  std::cout &lt;&lt; std::boolalpha
            &lt;&lt; "Algorism=" &lt;&lt; is_isogram("Algorism", IsFirstOccurrence_UM()) &lt;&lt; '\n'
            &lt;&lt; "PasSword=" &lt;&lt; is_isogram("PasSword", IsFirstOccurrence_UM()) &lt;&lt; '\n'
            &lt;&lt; "Consecutive=" &lt;&lt; is_isogram("Consecutive", IsFirstOccurrence_UM()) &lt;&lt; '\n';
  return 0;
}
</code></pre>
    </div>