<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>We are far from from beta-reduction here. The "reduction" can only be
  understood using explicit instruction flow semantics.</p>
</blockquote>

<p>No. You have chosen to interpret <code>loop</code> and <code>recur</code> in this way, but that is not how Clojure understands them. </p>

<ul>
<li><code>recur</code> is simply a flag for a tail-recursive call, functional as you like.</li>
<li><code>loop</code> is a gloss on defining and applying a function.</li>
</ul>

<p>We could define <code>loop</code> as a macro in terms of <code>fn</code>:</p>

<pre><code>(defmacro loop [bindings &amp; expressions]
  (let [[bindees values] (-&gt;&gt; bindings
                              (partition 2)
                              (apply map vector))]
    `((fn ~bindees ~@expressions) ~@values)))
</code></pre>

<p><a href="https://github.com/clojure/clojure/blob/clojure-1.9.0/src/clj/clojure/core.clj#L4541" rel="nofollow noreferrer">The real <code>loop</code> macro</a> checks the syntax of <code>bindings</code>. I've not bothered. And it handles destructuring explicitly. I've left it for <code>fn</code> to do.  </p>
    </div>