<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This is nice code, but I have some suggestions for how it might be improved.</p>

<h2>Use a better data structure</h2>

<p>The use of the <code>heap</code> is not bad and is intuitively a reasonable structure for keeping the five youngest users, but because it's only five entries, I'd suggest that a <code>std::array&lt;User,5&gt;</code> might be better.  Even a linear search would require a very few comparisons and the advantage is that it's a fixed size structure.</p>

<h2>Do the cheaper tests first</h2>

<p>Right now, the <code>processesData</code> function compares phone number first and then age.  Since the age comparison does not use a regex, I would strongly suspect that it is a less computationally expensive comparison, so it would probably make sense to do that first.  Obviously this is somewhat data-dependent, but it's worth thinking about.</p>

<h2>Use <code>regex_match</code> to match a whole string</h2>

<p>The current code is using <code>regex_search</code> which looks for a match anywhere within the string, but the regex itself starts with <code>'^'</code> and ends with <code>'$'</code>, so clearly the intent is to only match the entire string.  For that, <code>regex_match</code> is more appropriate than <code>regex_search</code> and you can omit the start and end tokens from the regex.</p>

<h2>Minimize the time a mutex is held</h2>

<p>Right now the code holds a mutex lock even before we know that this will actually alter the underlying structure.  That is, we may add a user who is older than the oldest person currently in the heap, only to remove that user again.  That's inefficient and holds the lock for longer than the mimimum time.  Instead, I'd do something like this:</p>

<pre><code>#include &lt;iostream&gt;
#include &lt;regex&gt;
#include &lt;string&gt;
#include &lt;array&gt;
#include &lt;mutex&gt;

const std::regex  phoneNumber("[0-9][0-9][0-9][- ][0-9][0-9][0-9][- ][0-9][0-9][0-9][0-9]");

struct User {
    std::string phone;
    int age{999};   // start with invalid age
};

std::ostream&amp; operator&lt;&lt;(std::ostream&amp; out, const User&amp; user) {
    return out &lt;&lt; "age: " &lt;&lt; user.age &lt;&lt; ", phone: " &lt;&lt; user.phone;
}

const auto youngestUser = [](User const&amp; lhs, User const&amp; rhs){return lhs.age &lt; rhs.age;};

int main() {
    using namespace std;

    vector&lt;User&gt; samples{
        {"212-123-4567", 10},
        {"212-123-4568", 81},
        {"212-123-4569", 18},
        {"2 2-123-4570", 99},
        {"212-123-4571", 57},
        {"2 2-123-4572", 45},
        {"212-123-4573", 33},
        {"212-123-4574", 21},
        {"212-123-4575", 18},
        {"2 2-123-4576", 16},
        {"212-123-4577", 30},
        {"2 2-123-4578", 50},
        {"212-123-4579", 77},
        {"2 2-123-4580", 23},
    };

    array&lt;User, 5&gt; result;
    cout &lt;&lt; "before:\n";
    copy(result.begin(), result.end(), ostream_iterator&lt;User&gt;{cout, "\n"});
    for (const auto&amp; person: samples) {
        if (person.age &lt; result.back().age &amp;&amp; regex_match(person.phone, phoneNumber)) {
            User youngerPerson(person);
            lock_guard&lt;mutex&gt; lock(mutex);
            if (person.age &lt; result.back()) {
                swap(youngerPerson, result.back());
                sort(result.begin(), result.end(), youngestUser); 
            }
        }
    }
    cout &lt;&lt; "after:\n";
    copy(result.begin(), result.end(), ostream_iterator&lt;User&gt;{cout, "\n"});
}
</code></pre>

<p>Obviously this sample code is single-threaded, but it shows the suggested lock placement accurately.  It also shows doing one last comparison <em>after</em> the lock is obtained to avoid data race problems in which another thread has modified <code>result</code> between the time of the check and the time this thread obtains the lock.</p>

<h2>Don't write misleading comments</h2>

<p>The code contains this:</p>

<pre><code>std::async([&amp;users, job = std::make_unique&lt;ListJob&gt;(apiList)](){job-&gt;run(users);});
    // This will not return until all async jobs have completed.
</code></pre>

<p>However, that's not really true.  An asynchronous call is, well, <em>asynchronous</em>, so depending on the launch policy (which isn't shown in this code), it might very well return immediately.  Since the intent seems to be to run the code <em>synchronously</em> here, just remove the <code>std::async</code> wrapper and execute the lambda.</p>
    </div>