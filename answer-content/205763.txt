<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>From the suggested changes I like the one about swapping arguments most so this is actually the only change I've made. To implement it I used a tuple parameter. I decided to stick to <code>ReferenceEquals</code> because otherwise when using the equality operator <code>==</code> there is a risk of runing into an <a href="https://pastebin.com/7Z5pjxh2" rel="nofollow noreferrer">infinite loop</a>. I have also added a helper method <code>ValidateType</code> to throw an exception if unsupported types are used and of course a couple of <code>null</code>-checks.</p>
<pre><code>public class DuckEqualityComparer&lt;TX, TY&gt; : EqualityComparer&lt;object&gt;
{
    private readonly Func&lt;TX, TY, bool&gt; _equals;
    private readonly Func&lt;TX, int&gt; _getHashCodeX;
    private readonly Func&lt;TY, int&gt; _getHashCodeY;

    private DuckEqualityComparer(Func&lt;TX, TY, bool&gt; equals, Func&lt;TX, int&gt; getHashCodeX, Func&lt;TY, int&gt; getHashCodeY)
    {
        _equals = equals;
        _getHashCodeX = getHashCodeX;
        _getHashCodeY = getHashCodeY;
    }

    public override bool Equals(object x, object y)
    {
        if (ReferenceEquals(x, y)) return true;
        if (ReferenceEquals(x, null)) return false;
        if (ReferenceEquals(y, null)) return false;

        ValidateType(x);
        ValidateType(y);

        if (Equals((x, y))) return true;
        if (Equals((y, x))) return true;
        
        return false;
    }

    private bool Equals((object x, object y) t)
    {
        return t.x is TX x &amp;&amp; t.y is TY y &amp;&amp; _equals(x, y);
    }

    public override int GetHashCode(object obj)
    {
        ValidateType(obj);

        switch (obj)
        {
            case TX x: return _getHashCodeX(x);
            case TY y: return _getHashCodeY(y);
            default: return 0;
        }
    }

    [NotNull]
    public static EqualityComparer&lt;object&gt; Create(
        [NotNull] Func&lt;TX, TY, bool&gt; equals,
        [NotNull] Func&lt;TX, int&gt; getHashCodeX,
        [NotNull] Func&lt;TY, int&gt; getHashCodeY
    )
    {
        if (equals == null) throw new ArgumentNullException(nameof(equals));
        if (getHashCodeX == null) throw new ArgumentNullException(nameof(getHashCodeX));
        if (getHashCodeY == null) throw new ArgumentNullException(nameof(getHashCodeY));
        
        return new DuckEqualityComparer&lt;TX, TY&gt;(equals, getHashCodeX, getHashCodeY);
    }

    private static void ValidateType(object obj)
    {
        if (!(obj is TX || obj is TY))
        {
            throw new ArgumentException($"Type '{obj.GetType().Name}' is not supported. Objects must be '{typeof(TX).Name}' or '{typeof(TY).Name}'");
        }
    }
}
</code></pre>
<hr>
<h3>Bonus - <code>DuckEqualityComparerBuilder</code></h3>
<p>Creating an equality-comparer is a tedious and error-prone process because you have to think about the <code>&amp;&amp;</code> operator between the conditions and you have to specify two <code>GetHashCode</code> methods. I'm lazy so I put together a builder that compiles the equality-comparer from expressions. To create it I borrowed code form the <a href="https://codereview.stackexchange.com/questions/175980/declarative-type-comparer">AutoEqualityComparer</a> and its great reviews.</p>
<pre><code>public static class DuckEqualityComparerBuilder
{
    public static DuckEqualityComparerBuilder&lt;TX, TY&gt; Create&lt;TX, TY&gt;(TX x, TY y) =&gt; new DuckEqualityComparerBuilder&lt;TX, TY&gt;();
}

public class DuckEqualityComparerBuilder&lt;TX, TY&gt;
{
    private readonly ParameterExpression _parameterX = Expression.Parameter(typeof(TX), "x");
    private readonly ParameterExpression _parameterY = Expression.Parameter(typeof(TY), "y");

    private readonly IList&lt;(Expression equals, Expression getHashCodeX, Expression getHashCodeY)&gt; _expressions = new List&lt;(Expression, Expression, Expression)&gt;();

    public DuckEqualityComparerBuilder&lt;TX, TY&gt; Compare&lt;T&gt;(
        Expression&lt;Func&lt;TX, T&gt;&gt; getValueX,
        Expression&lt;Func&lt;TY, T&gt;&gt; getValueY,
        IEqualityComparer&lt;T&gt; comparer = null
    )
    {
        comparer = comparer ?? EqualityComparer&lt;T&gt;.Default;

        // comparer.Equals(getValueX(x), getValueY(y));
        var equalsFunc = (Expression&lt;Func&lt;T, T, bool&gt;&gt;)((x, y) =&gt; comparer.Equals(x, y));
        var equals =
            Expression.Invoke(
                equalsFunc,
                Expression.Invoke(getValueX, _parameterX),
                Expression.Invoke(getValueY, _parameterY)
            );

        // comparer.GetHashCode(getValueX(x))
        var getHashCodeFunc = (Expression&lt;Func&lt;T, int&gt;&gt;)(obj =&gt; comparer.GetHashCode(obj));

        var getHashCodeX =
            Expression.Invoke(
                getHashCodeFunc,
                Expression.Invoke(getValueX, _parameterX)
            );

        // comparer.GetHashCode(getValueY(y))
        var getHashCodeY =
            Expression.Invoke(
                getHashCodeFunc,
                Expression.Invoke(getValueY, _parameterY)
            );

        _expressions.Add((equals, getHashCodeX, getHashCodeY));

        return this;
    }

    public EqualityComparer&lt;object&gt; Build()
    {
        var equalityComparer = _expressions.Aggregate((next, current) =&gt;
        (
            equals: ConcatenateEqualsExpressions(current.equals, next.equals),
            getHashCodeX: ConcatenateGetHashCodeExpressions(current.getHashCodeX, next.getHashCodeX),
            getHashCodeY: ConcatenateGetHashCodeExpressions(current.getHashCodeY, next.getHashCodeY)
        ));

        var equalsFunc = Expression.Lambda&lt;Func&lt;TX, TY, bool&gt;&gt;(equalityComparer.equals, _parameterX, _parameterY).Compile();
        var getHashCodeXFunc = Expression.Lambda&lt;Func&lt;TX, int&gt;&gt;(equalityComparer.getHashCodeX, _parameterX).Compile();
        var getHashCodeYFunc = Expression.Lambda&lt;Func&lt;TY, int&gt;&gt;(equalityComparer.getHashCodeY, _parameterY).Compile();

        return DuckEqualityComparer&lt;TX, TY&gt;.Create(
            equalsFunc,
            getHashCodeXFunc,
            getHashCodeYFunc
        );
    }

    public static implicit operator EqualityComparer&lt;object&gt;(DuckEqualityComparerBuilder&lt;TX, TY&gt; builder) =&gt; builder.Build();
}

internal static class ExpressionHelper
{
    public static Expression ConcatenateEqualsExpressions(Expression equalsExpressionX, Expression equalsExpressionY)
    {
        // equals &amp;&amp; equals
        return
            Expression.AndAlso(
                equalsExpressionX,
                equalsExpressionY
            );
    }

    public static Expression ConcatenateGetHashCodeExpressions(Expression getHashCodeExpressionX, Expression getHashCodeExpressionY)
    {
        // x * 31 + y
        return
            Expression.Add(
                Expression.Multiply(
                    getHashCodeExpressionX,
                    Expression.Constant(31)
                ),
                getHashCodeExpressionY
            );
    }
}
</code></pre>
<hr>
<p>I also wrote a couple of tests to have a proof that it actually works and I like the fact that it's even possible to compare named types against anonymous ones.</p>
<pre><code>using static Assert;
using static ExpressionHelper;

[TestClass]
public class DuckEqualityComparerTest
{
    [TestMethod]
    public void Equals_CanCompareTowNamedTypes()
    {
        var p1 = new PersonLib1 { FirstName = "John", LastName = "Doe" };
        var p2 = new PersonLib2 { FirstName = "JOHN", LastName = "Doe" };
        var p3 = new PersonLib2 { FirstName = "Joh", LastName = "Doe" };
        var p4 = new PersonLib2 { FirstName = default, LastName = "Doe" };

        var comparer =
            new DuckEqualityComparerBuilder&lt;PersonLib1, PersonLib2&gt;()
                .Compare(x =&gt; x.FirstName, y =&gt; y.FirstName, StringComparer.OrdinalIgnoreCase)
                .Compare(x =&gt; x.LastName, y =&gt; y.LastName, StringComparer.OrdinalIgnoreCase)
                .Build();

        IsTrue(comparer.Equals(p1, p1));
        IsTrue(comparer.Equals(p2, p2));

        IsTrue(comparer.Equals(p1, p2));
        IsTrue(comparer.Equals(p2, p1));

        IsFalse(comparer.Equals(p1, p3));
        IsFalse(comparer.Equals(p3, p1));
        IsFalse(comparer.Equals(p1, p4));
    }

    [TestMethod]
    public void Equals_CanCompareTwoAnonymousTypes()
    {
        var comparer =
            DuckEqualityComparerBuilder
                .Create(
                    new { FirstName1 = default(string), LastName1 = default(string) },
                    new { FirstName2 = default(string), LastName2 = default(string) }
                )
                .Compare(x =&gt; x.FirstName1, y =&gt; y.FirstName2, StringComparer.OrdinalIgnoreCase)
                .Compare(x =&gt; x.LastName1, y =&gt; y.LastName2, StringComparer.OrdinalIgnoreCase)
                .Build();

        IsTrue(comparer.Equals(
            new { FirstName1 = "John", LastName1 = "Doe" },
            new { FirstName2 = "JOHN", LastName2 = "DOE" }
        ));

        IsFalse(comparer.Equals(
            new { FirstName1 = "Johny", LastName1 = "Dope" },
            new { FirstName2 = "JOHN", LastName2 = "DOE" }
        ));
    }

    [TestMethod]
    public void Equals_CanCompareNamedAndAnonymousTypes()
    {
        var comparer =
            DuckEqualityComparerBuilder
                .Create(
                    default(PersonLib1),
                    new { FirstName2 = default(string), LastName2 = default(string) }
                )
                .Compare(x =&gt; x.FirstName, y =&gt; y.FirstName2, StringComparer.OrdinalIgnoreCase)
                .Compare(x =&gt; x.LastName, y =&gt; y.LastName2, StringComparer.OrdinalIgnoreCase)
                .Build();

        IsTrue(comparer.Equals(
            new PersonLib1 { FirstName = "John", LastName = "Doe" },
            new { FirstName2 = "JOHN", LastName2 = "DOE" }
        ));

        IsFalse(comparer.Equals(
            new PersonLib1 { FirstName = "Johny", LastName = "Dope" },
            new { FirstName2 = "JOHN", LastName2 = "DOE" }
        ));
    }
}
</code></pre>
    </div>