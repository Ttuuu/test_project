<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1><code>where TValue : IComparable&lt;TValue&gt;</code></h1>

<p>Don't do this. <code>OrderBy</code> doesn't require its type parameters to implement this interface like this either. Instead it uses the <code>IComparer&lt;T&gt;</code> interface. What's the difference? With <code>IComparable&lt;T&gt;</code>, the implementation of the comparison logic is sitting on the class <code>T</code> itself. This means that there is one and only one way of ordering elements of <code>T</code>. If I wanted to sort them using some customized logic, I would be out of luck.</p>

<p>Instead, <code>IComparer&lt;T&gt;</code> is a separate class that compares <code>T</code>s. Providing an instance of that interface to the method allows me to use whatever logic I want to order <code>T</code>.</p>

<p>But what if I don't want to implement an entire class, but instead want to use <code>IComparable&lt;T&gt;</code>? This is where <code>Comparer&lt;T&gt;.Default</code> comes to play. This static property provides a default implementation for <code>IComparer&lt;T&gt;</code> for <code>T</code>, which, if <code>T</code> implements <code>IComparable&lt;T&gt;</code>, will default to call that logic.</p>

<p>So how would your interface look? We have an overload with the <code>IComparer&lt;TValue&gt;</code> argument, and an overload without:</p>

<pre><code>public static async IAsyncEnumerable&lt;T&gt; Bottom&lt;T, TValue&gt;(
        this IAsyncEnumerable&lt;T&gt; source, int number, Func&lt;T, TValue&gt; selector, IComparer&lt;TValue&gt; comparer)
{
    return Bottom(source, number, selector, Comparer&lt;TValue&gt;.Default);
}

public static async IAsyncEnumerable&lt;T&gt; Bottom&lt;T, TValue&gt;(
        this IAsyncEnumerable&lt;T&gt; source, int number, Func&lt;T, TValue&gt; selector, IComparer&lt;TValue&gt; comparer)
{
    // Actual implementation.
}
</code></pre>

<h1>Binary tree</h1>

<p>I think this problem would call for a binary tree, instead of a list that's sorted/ranked continuously. This would you can quickly check whether the item you are iterating would even be in the top-<code>number</code> of items in the collection, without having to add and subsequently having to remove it again. The downside is that C# doesn't have a built-in Binary Tree that isn't hidden within the <code>SortedX</code> collection set. These classes sadly require unique values in their collections, which isn't guaranteed here.</p>

<p>Alternatively, if you can handle adding another few lines to your solution, you can check if the index returned by <code>BestIndex</code> is equal to <code>number</code>, and skip adding and removing it from the list if this is the case.</p>

<h1>Code style</h1>

<p>This needs to be said. Your code is really compact. It took me multiple reads to figure out what on earth <code>BestIndex</code> was actually doing. Docstrings, comments and/or intermediate variables with clear names please. Something as simple as "Returns the rank of <code>value</code> in the list by performing a merge-sort style algorithm." is enough to understand its role in <code>Bottom</code>.</p>
    </div>