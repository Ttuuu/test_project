<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I have very minimal <strong>flow</strong> experience, but the action definition looks right. You may also be able to define a <code>state</code> type for this reducer.</p>

<p>It's pretty generic right now, so I'm not sure I would push it much more. Maybe it should be called <code>fetchReducerFactory</code>, just to keep the terminology consistent.</p>

<p>The tests look good. By "reliable", you probably mean "good." They are readable and look to provide good coverage for the code and branches.</p>

<ul>
<li>You may want to test that the default state is correct.</li>
<li>You may want to test that unknown actions do nothing to the state.</li>
</ul>

<hr>

<p>NOTE: The following comment is pretty minor, but wanted to bring it up. The way the code is structured, the tests make sense. But there are implicit cases that work because of the code structure. Let me explain:</p>

<p>You expect <code>FETCH_TEST_SUCCESS</code> to do 3 things: (1) clear the <code>isLoading</code> flag (2) set <code>data</code> to the payload, and (3) set <code>error</code> to null. These three behaviors are wrapped together in one test. And, the only data that is actually changed by the reducer in this test is the <code>data</code> property; <code>isLoading</code> and <code>error</code> are not changed. So, for this test, you could make sure all values are <strong>changed</strong> by passing in a different state:</p>

<pre><code>expect(
       factory({ data: null, isLoading: true, error: 3 }, 
               { type: "FETCH_TEST_SUCCESS", payload: "success" })
       ).toEqual({
         data: "success",
         isLoading: false,
         error: null
  });
</code></pre>

<p>This will guard against code changes later where someone refactors. Or, you could just have three small tests, each that test single property mutations. Again, small potatoes.</p>
    </div>