<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Small portability bug: if we're using <code>false</code> in the macros, then <code>bflags.h</code> should include <code>&lt;stdbool.h&gt;</code>.  Or use <code>0</code> instead of <code>false</code>.</p>

<p>Definite portability bug: we shift a (signed) <code>int</code> before promoting:</p>

<blockquote>
<pre><code>#define BFLAGS_WORD_MASK(bit) (1 &lt;&lt; ((bit) % BFLAGS_WORD_BIT_SIZE))
</code></pre>
</blockquote>

<p>I think we need the <code>1</code> there to be of the appropriate type first:</p>

<pre><code>#define BFLAGS_WORD_MASK(bit) ((BFLAGS_WORD_T)1 &lt;&lt; ((bit) % BFLAGS_WORD_BIT_SIZE))
</code></pre>

<p>Similarly, this test:</p>

<blockquote>
<pre><code>    BFLAGS_SET(bflags, 31);
    mu_assert(bflags[0] == ((1 &lt;&lt; 0) | (1 &lt;&lt; 5) | (1 &lt;&lt; 31)));
</code></pre>
</blockquote>

<p>needs</p>

<pre><code>    BFLAGS_SET(bflags, 31);
    mu_assert(bflags[0] == ((1 &lt;&lt; 0) | (1 &lt;&lt; 5) | (1ul &lt;&lt; 31)));
</code></pre>

<p>There's quite a few more that I picked up with <code>gcc -Wall -Wextra</code> and are easily fixed.</p>

<p>Also, let's be good about <code>const char*</code> - all the test results should be pointer to const string, and it doesn't hurt to fix that.</p>

<p>The final compilation warning I see is from <code>char** UNUSED(argv)</code> - easily fixed by changing it to <code>UNUSED(char** argv)</code>.  But since we're ignoring both arguments, we can use the other legal signature: <code>int main(void)</code>.</p>

<hr>

<p>Style-wise, we could use a <code>typedef</code> instead of #define for <code>BFLAGS_WORD_T</code>.  Instead of the optional fixed-width type, we should probably use <code>uint_fast32_t</code>, as we don't really mind if <code>uint32_t</code> doesn't exist (on some exotic or ancient architecture).  In fact, we might prefer plain <code>unsigned int</code>, as that's supposed to be the hardware's "natural" (most efficient) integer size.  Everything in the code appears to adapt suitably, except for some of the tests that hard-code the 32-bit assumption.</p>

<p>BTW, if using a typedef, remember that names ending in <code>_t</code> are reserved for the library.</p>

<p>I do have reservations about the use of macros (rather than functions) when users may pass plain <code>int</code> rather than unsigned types as arguments - for example, we get unnecessary promotion in <code>BFLAGS_ARRAY_SIZE()</code> if we add a signed <code>bits</code> to unsigned <code>BFLAGS_WORD_BIT_SIZE</code>.  Perhaps these should be simple (inlinable) functions to give us strong typing?</p>

<hr>

<p>We can reduce repetition here:</p>

<blockquote>
<pre><code>#define BFLAGS_DECLARE(bflags, bits) \
    BFLAGS_WORD_T bflags[BFLAGS_ARRAY_SIZE(bits)]

#define BFLAGS_DECLARE_ZERO(bflags, bits) \
    BFLAGS_WORD_T bflags[BFLAGS_ARRAY_SIZE(bits)] = { 0 }
</code></pre>
</blockquote>

<p>like this:</p>

<pre><code>#define BFLAGS_DECLARE_ZERO(bflags, bits) \
    BFLAGS_DECLARE(bflags, bits) = { 0 }
</code></pre>
    </div>