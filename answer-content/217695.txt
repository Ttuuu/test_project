<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The <code>Move</code> class could have its getters removed by making use of <code>final</code> since its members <code>row</code> and <code>col</code> are immutable:</p>

<pre><code>class Move {

    public final int row;
    public final int col;

    public Move(int row, int col) {
        this.row = row;
        this.col = col;
    }

    @Override
    public String toString() {
        return "Move{" +
                "row=" + row +
                ", col=" + col +
                '}';
    }
}
</code></pre>

<p>Then just access it directly like <code>move.row</code>. There's a discussion on the idea <a href="https://stackoverflow.com/questions/6927763/immutable-type-public-final-fields-vs-getter">here</a>. Of course, if the members were mutable, it would be a different story, but <code>int</code>s can't be altered.</p>

<p>I also put the declarations on separate lines.</p>

<hr>

<p>It may be a better idea to make use of constants or an Enum for your <code>playerX</code> and <code>O</code> weights here (I'm assuming they're weights):</p>

<pre><code>if(countO == 4) return -1000;
if(countO == 3) return -50;
if(countO == 2) return -10;
if(countO == 1) return -1;
</code></pre>

<p>In both cases, you're using the same numbers, just negated in the first case. If you ever change the weights in the future, you may forget to change the values in both places, and may get odd behavior as a result. Something like this may be better (although with better names):</p>

<pre><code>final int EXTREME_WEIGHT = 1000;
final int HIGH_WEIGHT = 50;
final int MEDIUM_WEIGHT = 10;
final int LOW_WEIGHT = 1;

if(countX == 0) {
    if(countO == 4) return -EXTREME_WEIGHT;
    if(countO == 3) return -HIGH_WEIGHT;
    if(countO == 2) return -MEDIUM_WEIGHT;
    if(countO == 1) return -LOW_WEIGHT;
}

if(countO == 0) {
    if(countX == 4) return EXTREME_WEIGHT;
    if(countX == 3) return HIGH_WEIGHT;
    if(countX == 2) return MEDIUM_WEIGHT;
    if(countX == 1) return LOW_WEIGHT;
}
</code></pre>

<p>Now (when the names are corrected), the values will be self-explanatory, and you aren't risking asymmetrical changes in the future.</p>

<p>You may also find that a <code>switch</code> or <code>Map</code> would work well here too, although any gain from them would be unnecessary.</p>
    </div>