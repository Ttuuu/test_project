<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The implementation is <strong>wrong</strong>, and will return <strong>incorrect</strong> results once <code>n</code> exceeds 15.</p>

<p>A <code>double</code> stores values using a 53 bit mantissa, allowing accurate representation of values with approximately 16 digits of precision.  When <span class="math-container">\$n \gt 16\$</span>, then <span class="math-container">\$11^n \gt 10^{16}\$</span>, and the <code>double</code> value runs out of precision, and cannot represent the value precisely.  This inaccuracy implies that you cannot count the number of <code>1</code> digits in the result with any hope of returning the correct value.</p>

<p>It should not take long to convince yourself that <span class="math-container">\$11^n\$</span> will always end in a <code>1</code> digit.  Now, consider, <span class="math-container">\$11^{16} = 45949729863572161\$</span>, and compare with:</p>

<pre><code>jshell&gt; String.valueOf(Math.round(Math.pow(11, 16)))
$20 ==&gt; "45949729863572160"
</code></pre>

<p>To accurately count the number of <code>1</code> digits, you need to use extended precision integers (ie, <a href="https://docs.oracle.com/javase/10/docs/api/java/math/BigInteger.html" rel="nofollow noreferrer"><code>BigInteger</code></a>) or an algorithm which determines the desired value in a different fashion.</p>

<hr>

<p>Splitting a string with a regular expression is probably the least efficient way of counting <code>1</code> digits.  On top of the regular expression penalty, the JVM needs to allocate a <code>String[]</code>, as well as one <code>String</code> per character in the string.   A much more efficient way of counting <code>1</code> digits is to extract the digits one at a time as characters (not strings):</p>

<pre><code>int counter = 0;
for(int i = 0; i &lt; s.length; i++)
    if (s.charAt(i) == '1')
        counter++;
</code></pre>
    </div>