<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Format</h1>

<p>Firstly when performance is a concern you should firstly make the code as readable as possible. This is as when looking for performance gains it reduces the readability of the code, and as this is an incremental process it slowly degrades your code to possibly unmanageable levels, whilst making it harder for you to accurately improve performance. And is basically a modern explanation of the house of the rock parable.</p>

<p>You have some issues a linter can notice:</p>

<ul>
<li>Imports should be ordered alphabetically so they are easier to read when there's lots of them.</li>
<li><code>index</code> is unused, and so should be named <code>_</code> or <code>_index</code>.</li>
<li>You should try to keep lines no longer than 79 characters wide.</li>
<li>Don't mix quote delimiters, pick either <code>'</code> or <code>"</code>.</li>
<li>It's good that you have kept PEP8 spacing between your functions, it should be noted this spacing is between functions and anything, and so having one space between <code>main</code> and the main guard is a violation of this.</li>
</ul>

<p>From here I'd also:</p>

<ul>
<li>Split <code>main</code> into a program that performs the <code>birthday_problem</code> and the one that is <code>main</code>.</li>
<li>Replace <code>check_every_box_is_occupied</code> with <code>all</code>.</li>
<li>Replace <code>check_birthday_paradox</code> with <code>any</code> and a comprehension.</li>
<li>Move the generation of infinite amounts of random numbers out of <code>birthday_problem</code>, by creating an infinite generator.</li>
<li>Wrap the infinite generator in an enumerate to simplify the <code>number_of_balls</code> incrementation.</li>
<li>Move the <code>while True</code> loops into their own functions.</li>
<li>Change the <code>for index</code> loop into two comprehensions wrapped in a <code>sum</code>.</li>
<li>Simplify your naming, you have very long variables that only make the code harder to understand.</li>
<li>It'd be simpler if you set <code>birthday_paradox_graph[0]</code> to the same <code>range</code> that you iterate over.</li>
</ul>

<p>And so would get the following code. I have left main uncleaned:</p>

<pre><code>import matplotlib.pyplot as plt
import numpy as np


def random_numbers(limit):
    while True:
        yield np.random.randint(limit)


def check_birthday_paradox(values):
    return any(value &gt;= 2 for value in values)


def simulate_one_pairing(size):
    boxes = np.array([0] * size)
    for number_of_balls, choice in enumerate(random_numbers(size), 1):
        boxes[choice] += 1
        if check_birthday_paradox(boxes):
            return number_of_balls


def simulate_all_days_set(size):
    boxes = np.array([0] * size)
    for number_of_balls, choice in enumerate(random_numbers(size), size):
        boxes[choice] += 1
        if all(boxes):
            return number_of_balls


def birthday_problem(tests, boxes_limit):
    domain = range(10, boxes_limit + 1, 1)
    paired = [domain, []]
    every_box_is_occupied_graph = [domain, []]
    for boxes in domain:
        total = sum(simulate_one_pairing(boxes) for _ in range(tests))
        paired[1].append(total / tests)

        total = sum(simulate_all_days_set(boxes) for _ in range(tests))
        every_box_is_occupied_graph[1].append(total / tests)
    return paired, every_box_is_occupied_graph


def main():
    number_of_tests = 250
    boxes_max_num = 1000
    birthday_paradox_graph, every_box_is_occupied_graph = birthday_problem(number_of_tests, boxes_max_num)
    plt.rcParams.update({'font.size': 15})
    plt.figure(1)
    plt.plot(birthday_paradox_graph[0], birthday_paradox_graph[1], 'ko')
    plt.title("Conajmniej jedna urna ma conajmniej dwie kule")
    plt.xlabel("Liczba urn")
    plt.ylabel("Średnia liczba kul potrzebna do spełnienia warunku")
    plt.figure(2)
    plt.title("Wszystkie urny są zapełnione")
    plt.xlabel("Liczba urn")
    plt.ylabel("Średnia liczba kul potrzebna do spełnienia warunku")
    plt.plot(
        every_box_is_occupied_graph[0],
        every_box_is_occupied_graph[1],
        'ko')
    plt.show()


if __name__ == '__main__':
    main()
</code></pre>

<p>From this I can see a couple of problems off the bat.</p>

<ol>
<li>Why does <code>simulate_all_days_set</code>'s start enumerate start at <code>size</code>?<br>
I'll assume this is a mistake.</li>
<li>The function <code>check_birthday_paradox</code> is wasting time as it runs in <span class="math-container">\$O(n)\$</span> time, where all you need to check is that <code>boxes[choice]</code> is equal or greater than two.</li>
<li>You're building two simulations each test <code>simulate_one_pairing</code> and <code>simulate_all_days_set</code>, you can just make this a single loop and reduce duplicate simulations.</li>
<li><p>The performance of <code>np.random.randint</code> should be tested against when passing <code>size=None</code> and <code>size=n</code>. To see if chunking can reduce the performance.</p>

<p>And yes it does increase performance: &lt;<a href="https://github.com/Peilonrayz/Stack-Exchange-contributions/blob/master/code-review/219925/extra/chunked_randoms.py" rel="nofollow noreferrer">source</a>&gt;</p>

<p><a href="https://i.stack.imgur.com/Uc52W.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/Uc52W.png" alt="Comparison of random with chunk sizes"></a></p>

<p>And so I'd use chunk at the same size as <code>size</code>. You may be able to get better performance if you use a different value however.</p></li>
</ol>

<pre><code>import matplotlib.pyplot as plt
import numpy as np
import timeit


def random_numbers(limit):
    while True:
        yield from np.random.randint(limit, size=limit)


def simulate(size):
    boxes = np.array([0] * size)
    pair = None
    all_set = None
    for iteration, choice in enumerate(random_numbers(size), 1):
        boxes[choice] += 1
        if pair is None and boxes[choice] &gt;= 2:
            pair = iteration
            if all_set is not None:
                break
        if all_set is None and all(boxes):
            all_set = iteration
            if pair is not None:
                break
    return pair, all_set


def birthday_problem(tests, boxes_limit):
    domain = range(10, boxes_limit + 1, 1)
    paired = [domain, []]
    all_set = [domain, []]
    for boxes in domain:
        pairs, all_sets = zip(*(simulate(boxes) for _ in range(tests)))
        paired[1].append(sum(pairs) / tests)
        all_set[1].append(sum(all_sets) / tests)
    return paired, all_set


def main():
    start = timeit.default_timer()
    number_of_tests = 20
    boxes_max_num = 200
    birthday_paradox_graph, every_box_is_occupied_graph = birthday_problem(number_of_tests, boxes_max_num)
    print(timeit.default_timer() - start)
    plt.rcParams.update({'font.size': 15})
    plt.figure(1)
    plt.plot(birthday_paradox_graph[0], birthday_paradox_graph[1], 'ko')
    plt.title("Conajmniej jedna urna ma conajmniej dwie kule")
    plt.xlabel("Liczba urn")
    plt.ylabel("Średnia liczba kul potrzebna do spełnienia warunku")
    plt.figure(2)
    plt.title("Wszystkie urny są zapełnione")
    plt.xlabel("Liczba urn")
    plt.ylabel("Średnia liczba kul potrzebna do spełnienia warunku")
    plt.plot(
        every_box_is_occupied_graph[0],
        every_box_is_occupied_graph[1],
        'ko')
    plt.show()


if __name__ == '__main__':
    main()
</code></pre>

<p>I tested both yours and mine and at <code>number_of_tests</code>=20 and <code>boxes_max_num</code>=200. You can see this in the code above. Yours unchanged runs in ~13.5-14 seconds. Mine runs in ~3.5-4 seconds.</p>

<p>My code takes ~16.5 seconds to run at <code>boxes_max_num</code>=1000 and <code>number_of_tests</code>=1. This means it will take roughly an hour to run all of your tests. As I've taken the low-hanging fruit if you need it to be faster, then you'll have to use a <a href="https://docs.python.org/3/library/profile.html" rel="nofollow noreferrer">profiler</a>. Your code also is very unlikely to be as fast as your friends, as Python is slow.</p>
    </div>