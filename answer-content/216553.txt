<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Type Hints</h2>

<p>Based on your doctests, you must be using Python 3.6 or later (due to reliance on dictionary key order).</p>

<p>Since Python 3.5+ includes support for type hints, you could declare you function as:</p>

<pre><code>def add_error(error_dict: dict, key: str, err: list) -&gt; dict:
</code></pre>

<p>Or</p>

<pre><code>from typing import List, Dict

def add_error(error_dict: Dict[str, List[str]], key: str,
                         err: List[str]) -&gt; Dict[str]:
</code></pre>

<p>Of course, modify the type hints if you take the argument changes suggested in other answers.  In particular, as is, the type of <code>err</code> is actually a variant type.  I’d prefer a variable list of strings, <code>*err: str</code>.</p>

<h2>Detect Errors before Modifying</h2>

<p>If an error is not a string, you will raise an exception.  But first, if the key does not exist in the dictionary, you add an empty list for that key. </p>

<p>If the error list contains strings before a non-string, you add those strings to the key’s list, then raise an exception part way through. </p>

<p>Consider moving the checks up to the start of the function, before any changes have been made. </p>

<pre><code>if any(not isinstance(e, string_types) for e in err):
    raise TypeError("The error(s) must be a string, or list of strings")
</code></pre>

<h2>Duck Typing</h2>

<p>Why must the errors be a string?  Any object can be converted to a string...</p>
    </div>