<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<pre><code>def computeGCD(x, y):
</code></pre>
</blockquote>

<p>Just call it <code>gcd</code>. It's part of a computer program: you don't need to say that it computes.</p>

<hr>

<blockquote>
<pre><code>    graph = {i+1:[] for i in range(n)}
    for i in originCities:
        for j in range(n):
            if i != j+1 and computeGCD(i, j+1) &gt; g:
                graph[i].append(j+1)
</code></pre>
</blockquote>

<p>This is buggy: it doesn't build the whole graph. Consider test case <code>connectedCities(16, 1, [14], [15])</code>: there is a path <code>14 -- 6 -- 15</code> with GCDs respectively <code>2</code> and <code>3</code>.</p>

<p>As a matter of style, I would find the code more readable if it iterated over <code>range(1, n+1)</code> and didn't have to continually increment the variable.</p>

<hr>

<blockquote>
<pre><code>    for i in range(len(originCities)):
        paths = find_all_paths(graph, originCities[i], destinationCities[i])
        if len(paths) &gt; 0:
            res.append(1)
        else:
            res.append(0)
</code></pre>
</blockquote>

<p>Spot the big performance problem: to determine whether any foo exists, it suffices to find one foo. You don't need to find every foo in the universe and then count them.</p>

<p>But just fixing that still leaves a smaller performance problem: if there are a lot of queries (i.e. if <code>originCities</code> and <code>destinationCities</code> are long) then it's quicker to do an expensive preprocessing to get an object which answers queries fast than it is to evaluate each query separately. As a big hint, in graph-theoretic terms the queries are "<em>Are these two vertices in the same connected component?</em>".</p>

<p>Note that if you really want to squeeze the asymptotic complexity (and it's not too bad for practical performance either), <span class="math-container">\$O(n \lg \lg n + q)\$</span> is achievable<sup>1</sup> where <span class="math-container">\$q\$</span> is the number of queries.</p>

<p><sub><sup>1</sup> Technically there's also a factor of <span class="math-container">\$\alpha(n)\$</span> where <span class="math-container">\$\alpha\$</span> is the inverse Ackermann function, but for practical purposes it's constant.</sub></p>
    </div>