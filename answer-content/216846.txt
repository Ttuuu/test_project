<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Python's built-in <a href="https://docs.python.org/3/library/functions.html#pow" rel="nofollow noreferrer"><code>pow</code></a> already has this functionality.</p>

<pre><code>class Solution(object):
    def superPow(self, a, b):
        """
        :type a: int
        :type b: List[int]
        :rtype: int
        """
        digit = int("".join(map(str, b)))
        return pow(a, digit, 1337)
</code></pre>

<p>The bottleneck then might be parsing the list of digits into the integer. To remedy that, you can try to use the fact that</p>

<p><span class="math-container">\$
\begin{align}
a^{123} ~\text{mod}~ 1337 &amp;= (a^{100}\cdot a^{20}\cdot a^3)~\text{mod}~ 1337&amp; \\
              &amp;= (a^{100}~\text{mod}~ 1337 \cdot a^{20}~\text{mod}~ 1337\cdot a^3  ~\text{mod}~ 1337) ~\text{mod}~ 1337&amp; \\
\end{align}\$</span></p>

<pre><code>class Solution(object):
    def superPow(self, a, b):
        """
        :type a: int
        :type b: List[int]
        :rtype: int
        """
        ret = 1
        for i, digit in enumerate(reversed(b)):
            ret = (ret * pow(a, digit * 10**i, 1337)) % 1337
        return ret
</code></pre>

<hr>

<p>And here are some timings for inputs of increasing length (from 1 to 10 digits, because your function would take way too long otherwise), with <code>a = 2</code> and where <code>super_pow_op</code> is your function, <code>super_pow_built_in</code> is my first function and <code>super_pow_expanded</code> is my second function.</p>

<p><a href="https://i.stack.imgur.com/Ei9vK.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/Ei9vK.png" alt="enter image description here"></a></p>

<p>And here for 3 to 1000 digits, but only with my two functions:</p>

<p><a href="https://i.stack.imgur.com/kNZ9W.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/kNZ9W.png" alt="enter image description here"></a></p>
    </div>