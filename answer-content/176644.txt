<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I see some things that may help you improve your program.</p>

<h2>Separate the interface and implementation</h2>

<p>Perhaps you posted it as just one file for the sake of simplicity and compactness, but if you were to actually use this, I think it's more likely that it would be useful as separate header and implementation files.  This has the additional benefit of making the interface part of the code (the part that a user would have to see) a little shorter and easier to comprehend.</p>

<h2>Allow the user to specify streams</h2>

<p>Right now, the code is tied to <code>std::cin</code> and <code>std::cout</code>, but what if I wanted to use the menu, say, remotely over a socket connection?  This could very easily be allowed by adding input and output stream references to the class.  One way to do it would be to have <code>std::istream</code> and <code>std::ostream</code> arguments with defaults to <code>std::cin</code> and <code>std::cout</code>.</p>

<h2>Prefer <code>const</code> references</h2>

<p>The <code>printChoices</code> routine is currently this:</p>

<pre><code>bool ConsoleMenu::printChoices() {
  bool successful = false;
  for (auto commandByChoice : commandsByChoice_) {
    successful = static_cast&lt;bool&gt;(
        out &lt;&lt; '[' &lt;&lt; commandByChoice.first &lt;&lt; ']' &lt;&lt; '\n');
  }
  return successful;
}
</code></pre>

<p>The <code>for</code> loop should instead use <code>const auto &amp;</code> rather than <code>auto</code> to assure no copies are made of the strings.  Further, the <code>successful</code> flag isn't really necessary.  Instead we could write it like this:</p>

<pre><code>bool ConsoleMenu::printChoices() const {
  for (const auto &amp;commandByChoice : commandsByChoice_) {
    out &lt;&lt; '[' &lt;&lt; commandByChoice.first &lt;&lt; ']' &lt;&lt; '\n';
  }
  return !!out;
}
</code></pre>

<p>The <code>!!out</code> construct assures that <code>out</code> is interpreted as a <code>bool</code> but you could use a cast if you think it's more readable.  (Perhaps I've been writing too much Javascript lately!)</p>

<h2>Prefer unordered containers for performance</h2>

<p>The <code>std::map</code> container has logarithmic search performance, but the <code>std::unordered_map</code> container has constant time performance.  For that reason, it makes sense to prefer the unordered container unless there's actually a need for a sorted one.  There isn't in this case.</p>

<h2>Use <code>const</code> where practical</h2>

<p>Right now, it's not possible to declare and use a <code>const ConsoleMenu</code>.  There's no reason that shouldn't be possible.  To do that, all of the functions except the constructor would have to be <code>const</code>.  Mostly that means simply adding <code>const</code> to the declaration of the function, but we need to do a little more to adapt <code>use</code>.  The reason is the last line:</p>

<pre><code>commandsByChoice_[userChoice]();
</code></pre>

<p>There are a few problems with this simple line.  First, the <code>operator[]</code> has a side effect you probably don't want.  Specifically, if the key is not found, <em>it is inserted into the map</em>.  That's definitely not what's wanted here whether we are trying for <code>const</code> or not.  Two alternatives are using <code>at</code> (which can throw an exception) or <code>find</code>.  A way to do that would be this:</p>

<pre><code>const auto result{commandsByChoice_.find(userChoice)};
if (result != commandsByChoice_.end()) {
    result-&gt;second();
}
</code></pre>

<p>Since you're already calling <code>find</code> in the helper function, it would make sense to only call it once and save (and use) the result.  I'll show that later on.</p>

<h2>Rename <code>use</code></h2>

<p>The <code>use</code> method is a bit awkwardly named in my view.  I'd suggest instead to use <code>operator()()</code>.  This would allow us to rewrite the sample <code>main</code> like this:</p>

<pre><code>int main() {
    bool running{true};
    const ConsoleMenu menu{"What should this program do?\n", 
            "Invalid operation; ", "&gt; ", 
        {
            {"run", [&amp;running] { running = true; }},
            {"stop", [&amp;running] { running = false; }}
        }};
    while(running) {
       menu();
    } 
}
</code></pre>

<p>Note that I consistently use the <a href="https://softwareengineering.stackexchange.com/questions/133688/is-c11-uniform-initialization-a-replacement-for-the-old-style-syntax">C++11 uniform initialization syntax</a> to reduce ambiguity.</p>

<h2>Avoid re-doing work</h2>

<p>Because there is no way within this code to insert or delete menu choices once the <code>ConsoleMenu</code> is created, we can create the entire menu as a static string once (perhaps within the constructor) and simply use that rather than iterating through the menu choices and making multiple calls to <code>operator&lt;&lt;</code> every time <code>printChoices()</code> is called.  Further, one could create a single string that includes <code>message_</code>, all choices and <code>prompt_</code>.</p>

<h2>Results</h2>

<p>Using all of the suggestions above, we can simplify considerably and remove the two private helper functions.  Here's the header file:</p>

<h3>menu.h</h3>

<pre><code>#ifndef MENU_H
#define MENU_H
#include &lt;functional&gt;
#include &lt;iostream&gt;
#include &lt;unordered_map&gt;
#include &lt;string&gt;

class ConsoleMenu {
  public:
    ConsoleMenu(const std::string&amp; message,
        const std::string&amp; invalidChoiceMessage,
        const std::string&amp; prompt,
        const std::unordered_map&lt;std::string, std::function&lt;void()&gt;&gt;&amp; commandsByChoice,
        std::istream &amp;in = std::cin,
        std::ostream &amp;out = std::cout);
    void operator()() const;
  private:
    std::string invalidChoiceMessage_;
    // the prompt_ string contains the message, all choices and prompt
    std::string prompt_;
    std::unordered_map&lt;std::string, std::function&lt;void()&gt;&gt; commandsByChoice_;
    std::istream &amp;in;
    std::ostream &amp;out;
};
#endif // MENU_H
</code></pre>

<p>And this is the implementation.</p>

<h3>menu.cpp</h3>

<pre><code>#include "menu.h"
#include &lt;sstream&gt;

ConsoleMenu::ConsoleMenu(const std::string&amp; message,
    const std::string&amp; invalidChoiceMessage,
    const std::string&amp; prompt,
    const std::unordered_map&lt;std::string, std::function&lt;void()&gt;&gt;&amp; commandsByChoice,
    std::istream &amp;in, std::ostream&amp; out) :
        invalidChoiceMessage_{invalidChoiceMessage},
        commandsByChoice_{commandsByChoice},
        in{in}, 
        out{out} 
{
    std::stringstream ss;
    ss &lt;&lt; message;
    for (const auto &amp;commandByChoice : commandsByChoice_) {
      ss &lt;&lt; '[' &lt;&lt; commandByChoice.first &lt;&lt; ']' &lt;&lt; '\n';
    }
    ss &lt;&lt; prompt;
    prompt_ = ss.str();
}

void ConsoleMenu::operator()() const {
    std::string userChoice;
    const auto bad{commandsByChoice_.cend()};
    auto result{bad};
    out &lt;&lt; '\n';
    while ((out &lt;&lt; prompt_) &amp;&amp; (!(std::getline(in, userChoice)) ||
            ((result = commandsByChoice_.find(userChoice)) == bad))) {
        out &lt;&lt; '\n' &lt;&lt; invalidChoiceMessage_;
    }
    result-&gt;second();
}
</code></pre>

<h2>Additional features</h2>

<p>There are some additional things that might be nice.  One thing that comes immediately to mind is that it would be useful to be able to create a <code>constexpr ConsoleMenu</code>.  One way to do that might be to use C++17's <a href="http://en.cppreference.com/w/cpp/string/basic_string_view" rel="noreferrer"><code>std::string_view</code></a> instead of <code>std::string</code> and to use an array instead of a map.</p>

<p>Another feature that might be nice would be the ability to optionally use wide strings.  This is pretty easy to accommodate by turning the class into a templated class.</p>
    </div>