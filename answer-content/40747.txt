<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I think you've misinterpreted the <a href="http://www.cplusplus.com/reference/cstring/strncat/" rel="nofollow noreferrer">definition of strncat</a>, which says,</p>

<blockquote>
  <p>Appends the first <code>num</code> characters of source to destination, plus a terminating null-character.
  If the length of the C string in source is less than <code>num</code>, only the content up to the terminating null-character is copied.</p>
</blockquote>

<p><code>n</code> is the maximum number of characters in source you you want to copy, and <code>bfsize</code> doesn't exist in the standard version of <code>strncat</code>.</p>

<pre><code>char destination[256];
strpy(destination, "foo");
strncat(destination, "bar", 2);
// expect destination should now contain "fooba" !
</code></pre>

<p>It's good of you to write a custom version with an extra parameter to make it safe, but that's not what the question asked for.</p>

<p>See also <a href="http://www.gsp.com/cgi-bin/man.cgi?topic=Strn" rel="nofollow noreferrer">Manual Reference Pages  - Strn (3)</a> (e.g. <code>Strncat</code> instead of <code>strncat</code>); or, <a href="http://msdn.microsoft.com/en-us/library/tbyd7s1y.aspx" rel="nofollow noreferrer">the Microsoft versions</a> of the 'safe' functions have <code>_l</code> as a suffix.</p>

<p>I'm not sure that returning null and doing no copy is the standard way to avoid buffer overflow.</p>

<hr>

<p>In your <code>custom_strncmp</code> method, I'm not sure what correct behaviour should be if you call</p>

<pre><code>strncmp("foo", "foo", 10);
</code></pre>

<p>Your function might return 0 or non-zero, or crash, depending on what's after the end of the string.</p>

<p>You could perhaps write it more elegantly as a for loop:</p>

<pre><code>for ( ; n--; ++s, ++t) {
    if(*s != *t) {
        return *s - *t;
    }
}
</code></pre>

<hr>

<p>In <code>custom_strncat</code> you don't handle the condition where <code>n &gt; strlen(t)</code>.</p>

<hr>

<p>Your parameters could (should) be better named, e.g. <code>source</code> and <code>destination</code>. Parameter names are important (even more important than good names for local variables) because they may be the only documentation about how the function should be called.</p>
    </div>