<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li>Declaring a class makes sense if it can be reused, but less so if the logic and element ids are hardcoded to just one case, it only adds the unnecessary <code>this.</code> to variables.</li>
<li>It's unclear why the click listener is handled outside of the form class as it's logically and conceptually a part of the form.</li>
<li>JS naming convention is camelCase, not snake_case.</li>
<li>Consider <a href="https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams" rel="nofollow noreferrer">URLSearchParams</a> API so the HTTP headers are set <a href="https://fetch.spec.whatwg.org/#concept-bodyinit-extract" rel="nofollow noreferrer">automatically</a> and values are properly escaped.</li>
<li>Consider making the login routes more declarative e.g. <code>routes</code> in the code below.</li>
<li>If your goal was to use a class as a namespace then it might be better to switch to modules. For example using the built-in ES modules the inner contents of the function will be the entire contents of the module.</li>
</ul>

<pre class="lang-js prettyprint-override"><code>function handleLogin() {
  const request = new XMLHttpRequest();
  const loader = document.getElementById('loader');
  const btn = document.getElementById('right');
  let step = 0;
  const routes = [{
    path: 'one',
    field: 'username',
    onload() {
      step++;
      getDataElement().focus();
    },
    onerror(e) { /* show error */ },
  }, {
    path: 'two',
    field: 'password',
    onload() { /* show home page */ },
    onerror(e) { /* show error */ },
  }];

  btn.addEventListener('click', () =&gt; {
    loader.style.opacity = 1;
    const {path, field} = routes[step];
    request.open('post', `/login/step_${path}`);
    request.send(new URLSearchParams({[field]: getDataElement().value}));
  });

  request.addEventListener('loadend', e =&gt; {
    loader.style.opacity = 0;
    routes[step][request.response === 'true' ? 'onload' : 'onerror'](e);
  });

  function getDataElement() {
    return document.getElementById(routes[step].field);
  }
}
</code></pre>
    </div>