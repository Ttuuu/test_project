<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There's a lot of good feedback on how to work with the data as it's structured now, but my opinion is that - as soon as humanly possible - you should deserialize it out of a collection of weakly-typed dictionaries and lists, to a set of classes. This will make a handful of things better-structured, more testable and verifiable, and more easily maintainable and expandable. For instance, I added methods to calculate subtotals and print an "order table".</p>
<p>Also of note: please (please) do not round financials until the very last step of output. Doing otherwise is risking the wrath of accuracy loss, and in accounting that is indeed a bad place to be.</p>
<p>Example code:</p>
<pre><code>from dataclasses import dataclass
from io import StringIO
from typing import Iterable, Dict, Tuple


EXCHANGE_RATE = 1.1


@dataclass
class Product:
    product_id: int
    price: float
    vat_band: float

    @classmethod
    def product_from_dict(cls, d: dict, bands: Dict[str, float]) -&gt; 'Product':
        kwargs = {**d, 'vat_band': bands[d['vat_band']]}
        return cls(**kwargs)

    @classmethod
    def products_from_dict(cls, d: dict) -&gt; Iterable['Product']:
        bands = d['vat_bands']
        return (
            cls.product_from_dict(price_d, bands)
            for price_d in d['prices']
        )

    @property
    def price_with_exchange(self) -&gt; float:
        return self.price * EXCHANGE_RATE

    @property
    def vat_with_exchange(self) -&gt; float:
        return self.vat_band * self.price_with_exchange

    @property
    def subtotal(self) -&gt; float:
        return self.price_with_exchange + self.vat_with_exchange


@dataclass
class Item:
    product: Product
    qty: int

    @property
    def subtotal(self) -&gt; float:
        return self.qty * self.product.subtotal


class Order:
    def __init__(self, d: dict, products: Dict[int, Product]):
        d = d['order']
        self.id = d['id']
        self.items: Tuple[Item] = tuple(
            Item(products[item['product_id']], item['quantity'])
            for item in d['items']
        )

    def __str__(self):
        out = StringIO()
        out.write(f'{"ID":2} {"Price":&gt;6} {"VAT":&gt;6} {"Qty":3} {"Subtotal":&gt;6}\n')
        out.writelines(
            f'{item.product.product_id:2} '
            f'{item.product.price_with_exchange:6.2f} '
            f'{item.product.vat_with_exchange:6.2f} '
            f'{item.qty:3} '
            f'{item.subtotal:6.2f}\n'
            for item in self.items
        )
        return out.getvalue()


def main():
    products = {
        prod.product_id: prod
        for prod in Product.products_from_dict({
            'prices': [
                {'product_id': 1, 'price': 599, 'vat_band': 'standard'},
                {'product_id': 2, 'price': 250, 'vat_band': 'zero'},
                {'product_id': 3, 'price': 250, 'vat_band': 'zero'}],
            'vat_bands': {'standard': 0.2, 'zero': 0},
        })
    }
    order = Order({
        'order': {
            'id': 12, 'items': [
                {'product_id': 1, 'quantity': 1},
                {'product_id': 2, 'quantity': 5}
            ]
        }
    }, products)

    print(str(order))


if __name__ == '__main__':
    main()
</code></pre>
    </div>