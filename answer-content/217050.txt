<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<pre><code>#include &lt;sstream&gt;
</code></pre>

<p>Only include what is necessary.</p>

<hr>

<pre><code>    for(int i=0 ; i&lt;n ; i++) { ... }
</code></pre>

<p>Use range-based <code>for</code>.</p>

<pre><code>    std::cout &lt;&lt; ... &lt;&lt; std::endl;
</code></pre>

<p>Avoid <code>std::endl</code>.</p>

<hr>

<pre><code>void printArray(std::vector&lt;int&gt; &amp;arr, int n) { ... }
                                       ^^^^^
int main() {
    int n = arr.size();
          ^^^^^^^^^^^^
    printArray(arr,n);
                   ^
</code></pre>

<p>You have an implicit conversions from <code>std::vector::size_type</code> to <code>int</code> when you initialize <code>n</code> and pass an <code>int</code> argument to parameter <code>n</code>.</p>

<hr>

<pre><code>    printArray(arr, n);
    heapSort(arr, n);
</code></pre>

<p><code>std::vector</code> carries its size. You do not have to capture it in a variable and pass it.</p>

<pre><code>    int n = arr.size();
    while (arr.size() &gt; 1) {
        heapSort(arr, n);
        arr.erase(...);
        arr.push_back(...);
    }
</code></pre>

<p>With each iteration of the loop, you pop 2 elements and push 1 element reducing the size of <code>arr</code> by 1. <code>n</code> is a local copy of <code>arr.size()</code> and is never updated. This results in out-of-bounds index access in your sort functions after the first iteration of this loop.</p>

<p>As for your issues with excessive calls to <code>heapify()</code>, you are calling <code>heapSort()</code> on every iteration. <code>heapSort()</code> takes a sequence in any order, sorts all of the values into heap order, then sorts all of the values again into sequential sorted order. This is done so you can operate on the two minimum values at the same time. Instead of fully sorting the sequence on every iteration, you can take a partial sort approach. Maintain the sequence in heap order by sifting values around as you mutate the sequence. Finding each minimum values is simply a swap and a sift down. Repairing the heap order on insertion is simply a sift up. Which brings me to know your <a href="https://en.cppreference.com/w/cpp/header/algorithm" rel="nofollow noreferrer"><code>&lt;algorithm&gt;</code></a>s. The C++ standard library provides heap operations (<a href="https://en.cppreference.com/w/cpp/algorithm/is_heap" rel="nofollow noreferrer"><code>is</code></a>, <a href="https://en.cppreference.com/w/cpp/algorithm/make_heap" rel="nofollow noreferrer"><code>make</code></a>, <a href="https://en.cppreference.com/w/cpp/algorithm/push_heap" rel="nofollow noreferrer"><code>push</code></a>, <a href="https://en.cppreference.com/w/cpp/algorithm/pop_heap" rel="nofollow noreferrer"><code>pop</code></a>, <a href="https://en.cppreference.com/w/cpp/algorithm/sort_heap" rel="nofollow noreferrer"><code>sort</code></a>).</p>

<pre><code>    // Sort into min-heap order
    std::make_heap(arr.begin(), arr.end(), std::greater()) 

    while (arr.size() &gt; 1) {
        // rotate out the 1st min keeping heap order intact
        std::pop_heap(arr.begin(), arr.end(), std::greater());
        const auto first = arr.back();
        arr.pop_back();

        // rotate out the 2nd min keeping heap order intact
        std::pop_heap(arr.begin(), arr.end(), std::greater());
        const auto second = arr.back();
        arr.pop_back();

        const auto sum = first + second;
        ans += sum;

        // Move the inserted value into its heap order position
        arr.push_back(sum);
        std::push_heap(arr.begin(), arr.end(), std::greater());
    }
</code></pre>

<p><a href="https://en.cppreference.com/w/cpp/container/priority_queue" rel="nofollow noreferrer"><code>std::priority_queue</code></a> helps clean up some of the duplication.</p>

<pre><code>    std::priority_queue min_heap{std::greater(), std::move(arr)};
    while (min_heap.size() &gt; 1) {
        const auto first = min_heap.top();
        min_heap.pop();
        const auto second = min_heap.top();
        min_heap.pop();

        const auto sum = first + second;
        ans += sum;
        min_heap.push(sum);
    }
</code></pre>
    </div>