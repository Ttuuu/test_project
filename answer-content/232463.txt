<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>In no particular order:</p>

<ol>
<li><p>Comments on what the variable names represent would be helpful, if for no other reason than to encourage more thought about your data model -- if it's hard to describe what each variable contains, maybe there's a way to store your data that's less confusing?</p></li>
<li><p><code>p1</code> and <code>p2</code> look like static values, so I'd suggest making them class attributes rather than instance attributes (also it'd be good to have a comment in the code saying what these glyphs are).  Better yet, this could be its own class of <code>Enum</code> called <code>Player</code>!</p></li>
<li><p>The starting values in <code>draw</code> don't seem to have any significance, which makes the code harder to understand.  I get that you did this to make sure they'd never be equal when you're testing for win conditions, but I think it would be clearer to just have a single obvious "non-player" value like <code>None</code> and check for that when you do your comparisons.</p></li>
<li><p><code>counte</code>(r?) isn't a very descriptive name; maybe <code>turns</code>, or <code>turn_counter</code> if you wanted to get verbose about it?</p></li>
<li><p>Instead of implementing a <code>Print()</code> method, implement <code>__repr__()</code> so that <code>print(your_object)</code> will do the right thing.</p></li>
<li><p>There's no reason to make <code>Game</code> a subclass of <code>TicTacToe</code> -- indeed, there's no reason for it to even be a class/object, since it doesn't have any state.  I'd just make a top-level function that creates a <code>TicTacToe</code> and runs the game.</p></li>
<li><p>If I understand your <code>condition</code> method correctly, it's checking for a winner?  I'd maybe call this <code>get_winner</code> and have it return an <code>Optional[Player]</code>.</p></li>
<li><p>The implementation of <code>condition</code> with all the <code>if elif</code> is very repetitive, but it's also hard to visually examine it and have confidence that it's checking all the right cases.  You could instead write a helper function that does the check for an arbitrary set of spaces and run that for all the winning sets, having all the winning sets lined up neatly so it's easy to visually validate them.</p></li>
</ol>

<p>Here's a rewrite of just your <code>condition</code> method with some of the suggestions I've made, so you can get an idea of what this code might look like.</p>

<pre><code># Instead of self.p1 and self.p2 you can now say Player.ONE and Player.TWO,
# and these values will both type-check as "Player".
class Player(Enum):
    ONE = '\U00002B55'
    TWO = '\U0000274C'

...

    def get_winner(self) -&gt; Optional[Player]:
        """Returns the winning player, or None if no winner yet."""

        def owns_all_spaces(spaces: List[int]) -&gt; Optional[Player]:
            # Build a set of the owners of all the spaces.
            # If the set contains only one element, then either
            # one player owns all of them or they're all unclaimed.
            owners = set([self.board[space] for space in spaces])
            owner = owners.pop()
            if isinstance(owner, Player) and len(owners) == 0:
                return owner
            else:
                return None

        for in_a_row in [
            [0, 1, 2],  # 3 horizontal
            [3, 4, 5],
            [6, 7, 8],
            [0, 3, 6],  # 3 vertical
            [1, 4, 7],
            [2, 5, 8],
            [0, 4, 8],  # 2 diagonal
            [2, 4, 6],
        ]:
             winner = owns_all_spaces(in_a_row)
             if winner:
                 return winner
        return None
<span class="math-container">```</span>
</code></pre>
    </div>