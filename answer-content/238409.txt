<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This is a very nice project, some suggestions for you:</p>

<h2>Board</h2>

<p>You have the following code:</p>

<blockquote>
<pre><code>public class Board {
    private final int maxAttempts;
    private final PinRow code;
    private final List&lt;PinRow&gt; attempts = new ArrayList&lt;&gt;();
    public Board(PinRow code, int maxAmountTrials) {
        this.code = code;
        this.maxAttempts = maxAmountTrials;
    }
}
</code></pre>
</blockquote>

<p>You can put initialization of field <code>attempts</code> inside the constructor:</p>

<pre><code>public class Board {

    private final int maxAttempts;
    private final PinRow code;
    private final List&lt;PinRow&gt; attempts;

    public Board(PinRow code, int maxAmountTrials) {
        this.code = code;
        this.maxAttempts = maxAmountTrials;
        this.attempts = new ArrayList&lt;&gt;();
    }
}
</code></pre>

<h2>PinRow</h2>

<p>You have the following method:</p>

<blockquote>
<pre><code>public static PinRow randomPinRow(int codeWidth, Set&lt;ColorPin&gt; colors) {
        int[] indices = new int[codeWidth];
        int amountColors = colors.size();
        IntStream.range(0, codeWidth).forEach(c -&gt; indices[c] = new Random().nextInt(amountColors));
        return new PinRow(indices, colors);
}
</code></pre>
</blockquote>

<p>You can reduce method using <a href="https://docs.oracle.com/javase/8/docs/api/java/util/Random.html#ints-long-int-int-" rel="noreferrer">Random.ints</a>:</p>

<pre><code> public static PinRow randomPinRow(int codeWidth, Set&lt;ColorPin&gt; colors) {
        int[] indices = new Random().ints(codeWidth, 0, colors.size()).toArray();
        return new PinRow(indices, colors);
 }
</code></pre>

<h2>PinRowCombinations</h2>

<p>You have the following methods:</p>

<blockquote>
<pre><code>private static String leadingZeros(String numberString, int size) {
        StringBuilder sb = new StringBuilder();
        IntStream.range(0,size-numberString.length()).forEach(i -&gt; sb.append("0"));
        sb.append(numberString);
        return sb.toString();
}
private static int[] createIndice(String numberString) {
    int length = numberString.length();
    int[] indice = new int[length];
    IntStream.range(0,length).forEach(i -&gt; indice[i] = createIndex(numberString.charAt(i)));
    return indice;
}
private static int createIndex(char charAt) {
    if (charAt &gt;= '0' &amp;&amp; charAt &lt;= '9'){
          return charAt-'0';
    } else{
          return charAt-'a'+10;
    }
}
</code></pre>
</blockquote>

<p>The methods can be rewritten using <code>Collections</code> and a chars stream:</p>

<pre><code>private static String leadingZeros(String numberString, int size) {
    return String.join("", Collections.nCopies(size - numberString.length(), "0")) + numberString;
}

private static int[] createIndice(String numberString) {
    return numberString.chars().map(i -&gt; createIndex((char) i)).toArray();
}

private static int createIndex(char charAt) {
    if (Character.isDigit(charAt)) { return charAt - '0';}
     return charAt - 'a'+ 10;    
}
</code></pre>

<h2>BoardPrinter</h2>

<p>Again the <code>Collections.nCopies</code> method so you can write:</p>

<pre><code>private static String createStroke(int strokeLength, char c) {
    StringBuilder sb = new StringBuilder();
    IntStream.range(0,strokeLength).forEach(i -&gt; sb.append(c));
    return sb.toString();
}
</code></pre>

<p>The new version of the method is:</p>

<pre><code>private static String createStroke(int strokeLength, char c) {
    return String.join("", Collections.nCopies(strokeLength, Character.toString(c)));
}
</code></pre>

<p>Probably in the class BoardPrinter the method <code>nCopies</code> could be used to abbreviate some part of the code, and I suspect that in other classes some method about comparison could be deleted maybe implementing some compare interface, anyway the project is well structured and articulate. </p>
    </div>