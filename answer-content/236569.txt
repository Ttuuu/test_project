<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I am going to post my thoughts without using profanity or defame thousands of developers that I've never met.  I hope this will not lessen the perceived value or correctness of this content.</p>
<p>First things first, I think <strong>it is important to know all of the viable tools at your disposal with php</strong>.  Yes, <code>str_replace()</code> and <code>preg_replace()</code> are the two widely used replacing functions, but do you also know about <a href="https://www.php.net/manual/en/function.strtr.php" rel="nofollow noreferrer">strtr()</a>?  Through my own experiences supporting other developers in the Stack Exchange Network, it is clear to me that <code>strtr()</code> is a lesser known/used function.  For the exact case that you have provided, it does not enjoy the most concise syntax, but it does make a single pass through the input string (like your piped <code>preg_replace()</code> call).  This function has a special/useful behavior in that it will never replace replacements - this is sometimes an issue with the other two functions mentioned here.  The truth is: due to the fact that your process has no risk of replacing replacements, the other functions are both adequate tools.  <em>You have done well to order <code>&amp;amp</code> after
<code>-&amp;amp;-</code>.</em></p>
<p>Before I go any further, <strong>I will state my complete agreement with YCS about his advised solution.</strong>  I would be using a single <code>str_replace()</code> call with an array of search strings.  Assuming your project does not require word boundaries/lookarounds, case-sensitivity, or multibyte support, <code>str_replace()</code> is going to behave reliably and accurately.</p>
<p>So how do you choose what is the best tool for your project?  Well...</p>
<ol>
<li><p>Do you fully understand the coding technique and the fringe cases that may arise?  <strong>Copy-pasting code that you don't understand will lead to a project that you cannot confidently maintain.</strong>  If you understand it <em>now</em>, but might not <em>later</em> that is what comments / docblocks are for.  When in doubt, read the php docs; when you have time, read the upvoted comments.</p>
</li>
<li><p>What is the scope/usage of the technique?  <strong>If the data being processed is relatively small, is not iterated, and is not likely to be extended/expanded, then performance may never be an issue -- so toiling with benchmark tests will be a waste of dev time.</strong></p>
<p>If there is <em>any</em> chance that the input data will be relatively large, that the process will be executed in a loop, or that the data may grow in size as your application matures, then you are going to want to <strong>pay a sensible amount of attention to performance</strong>.</p>
</li>
<li><p><strong>Do you (or your dev team or your supervisor) have a preconceived bias against regular expressions?</strong> Some people may laugh at this one, but it happens because of maintainability (see #1). When I use regular expressions in a team build and I know other members on the team do not have the same level of understanding that I do, I will include demo links from 3v4l.org and/or regex101.com so that other devs can understand the intricacies when maintenance is required.</p>
</li>
<li><p>Let's not forget one of the golden rules of string manipulation: do not use regex unless there is a clear and valuable benefit.  <strong>The documentation is not telling lies -- <code>str_replace()</code> will always outperform with the same data.</strong>  So make educated and purposeful choices and give future developers reason to be confident in your scripting abilities -- you might even inspire someone.</p>
</li>
</ol>
<p>p.s. your regex doesn't need a capture group, so you can safely remove the parentheses.</p>
    </div>