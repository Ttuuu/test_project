<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li>Use <a href="https://docs.python.org/3.7/library/csv.html" rel="nofollow noreferrer">the csv library</a>

<ul>
<li><code>x.writerows(custom_tuple(row) for row in data['results'])</code></li>
</ul></li>
<li>Grabbing mutable data from the global scope is, I'm pretty sure, <em>poor form</em>. You should pass data as an argument to <code>search_output</code>.

<ul>
<li>Just pass in <code>data['results']</code> as <code>results</code>, not the whole <code>data</code> object.</li>
<li>Consider calling it <code>output_search_results</code>.</li>
<li>Consider using <a href="https://docs.python.org/3/library/typing.html" rel="nofollow noreferrer">precise type hints</a>.</li>
<li>The existing argument <code>search</code> is being used as a file-name, so call it <code>filename</code>.</li>
</ul></li>
<li>Pass the csv-writer object in as an argument to <code>output_search_results</code>. 

<ul>
<li>Maybe this means introducing a middle-layer function to create the csv-writer; that's fine.</li>
<li>This is going to let you call <code>output_search_results</code> multiple times after opening the file once.</li>
</ul></li>
<li>Encapsulate the code that fetches data from google in its own function.

<ul>
<li>Maybe even in its own class, if you're going to try to make more intelligent handlers for the failure cases.</li>
<li><strong>Now you can easily build the functionality to <em>fetch</em> a "next page" of results based on the next-page-token.</strong> It'll be a sibling to the above function, or maybe an option to it.</li>
</ul></li>
<li>From here you can either pass <code>data['next_page_token']</code> as another (optional) parameter to <code>output_search_results</code>, which will call itself recursively, or you can call it in a while loop as you grab each next page.</li>
<li>You'll probably need to add some safety measures, such as what to do if a file already exists, etc. </li>
</ul>
    </div>