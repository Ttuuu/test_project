<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Well, i actually did it on my own so, if anyone's interested, here's the code: </p>

<pre><code>#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;
#include &lt;unistd.h&gt;
#include &lt;getopt.h&gt;
#define BUF_SIZE 1024

typedef struct Counter{ //stores the count of lines, words, bytes and the value of starword
  int lines;
  int words;
  int bytes;
  int wordFlag; //when counting words, if one is found, set to 1. when digested, reset.
} Counter;

Counter* new_Counter(int lines, int words, int bytes, int wordFlag){ //constructor function for Counter
  Counter* t = (Counter*)malloc(sizeof(Counter));
  t-&gt;lines = lines;
  t-&gt;words = words;
  t-&gt;bytes = bytes;
  t-&gt;wordFlag = wordFlag;
  return t;
}

void updateTotal(Counter *t, int lines, int words, int bytes){ //updates the total counter
  t-&gt;lines += lines;
  t-&gt;words += words;
  t-&gt;bytes += bytes;
}

void count(char ch, Counter* cnt){//counts the bytes, lines and words
  cnt-&gt;bytes++; //if a char is passed, count it
  if (ch == '\n'){ //count each line
    cnt-&gt;lines++;
  }
  if (ch != ' ' &amp;&amp; ch != '\n' &amp;&amp; ch != '\r' &amp;&amp; ch != '\t'){ //if there's a visible char, there's a word
    cnt-&gt;wordFlag = 1;
  }
  if ((ch == ' ' || ch == '\n' || ch == '\r' || ch == '\t') &amp;&amp; cnt-&gt;wordFlag == 1){ //when the word ends
    cnt-&gt;words++; //increment the word counter
    cnt-&gt;wordFlag = 0; //reset the flag
  }
}

void readStdin(Counter* t, char c){ //reads from stdin and prints
  Counter* cnt = new_Counter(0,0,0,0);
  char ch;
  while((ch=fgetc(stdin)) != EOF){
    count(ch, cnt);
  }
  updateTotal(t, cnt-&gt;lines, cnt-&gt;words, cnt-&gt;bytes);

  if (c == '\0'){ //if the command was called with no arguments
    printf ("%d %d %d\n", cnt-&gt;lines, cnt-&gt;words, cnt-&gt;bytes);
  }
  else{
    printf ("%d %d %d %c\n", cnt-&gt;lines, cnt-&gt;words, cnt-&gt;bytes, c);
  }
  free(cnt);
}

void readFile(Counter *t, char* filename, FILE* fp){
  Counter* cnt = new_Counter(0,0,0,0);
  char ch;
  if (fp == NULL){
    fprintf(stderr, "./my_wc: %s: No such file or directory\n", filename);
    exit(1);
  }
  while ((ch=fgetc(fp)) != EOF){ //count the bytes, lines and words
    count(ch, cnt);
  }
  updateTotal(t, cnt-&gt;lines, cnt-&gt;words, cnt-&gt;bytes);
  printf("%d %d %d %s\n", cnt-&gt;lines, cnt-&gt;words, cnt-&gt;bytes, filename);
}

void readArgs(Counter* t, int argc, char* argv[]){
  FILE* fp;
  for (int i=1; i&lt;argc; i++){
    if (*argv[i] == '-'){//if a '-' is found, read from stdin
      readStdin(t, '-');
      clearerr(stdin);
    }
    else { //tries to read the file in argv[i]
      fp = fopen(argv[i], "r");
      readFile(t, argv[i], fp);
      fclose(fp);
    }
  }
  if (argc &gt; 2){ //if there's more than one file, print the Counter in the end
    printf("%d %d %d total\n", t-&gt;lines, t-&gt;words, t-&gt;bytes);
  }
  else {
    exit(0);
  }
}

int main(int argc, char* argv[]){
  Counter* t = new_Counter(0,0,0,0); //pointer to the total counter
  if (argc&lt;2){ //no arguments
    readStdin(t,'\0'); //pass /0 to readstin because as it is the only time it is called, there's no need to append the name of the argument
    return 0;
  }
  readArgs(t, argc, argv);
  free(t);
  return 0;
}
</code></pre>

<p>As you can see, i renamed the struct to Counter and i used it to store, not only the total counter, but also every temporary counter, then i implemented the function count() that does with the temporary counter values what those if statements in readStdin and readFile do.
If you still have any suggestions, please do not hesitate.</p>
    </div>