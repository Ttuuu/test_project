<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Both your solutions work, however they are inefficient. A warning sign is when you need to iterate the array you are iterating. Even if the inner iteration can exit early, always consider the worst possible situation. </p>

<pre><code>return lst.reduce((res, x, i) =&gt; {  // &lt;&lt; first iteration
  const j = lst.findIndex(y =&gt; target - x === y); // &lt;&lt; second iteration
</code></pre>

<p>The result is <span class="math-container">\$O(n^2)\$</span> time complexity</p>

<h2>Improved search</h2>

<p>When ever you repeat a search over the same data many times you should consider using a <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map" rel="nofollow noreferrer">Map</a> or a <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set" rel="nofollow noreferrer">Set</a></p>

<p>In this case we can take advantage of the fact that the values we have already looked at provide information about the values we want.</p>

<p>If we have the arguments <code>([1,2,3,5], 7)</code> as we step over each item we can build map of the items we want. For 1, we need a 6, 2 needs a 5, 3 needs a 4, and when you get to 5 you know you need that value and thus have a result.</p>

<p>Thus we get a solution that is <span class="math-container">\$O(n)\$</span>  time, exchanging CPU cycles for memory (<span class="math-container">\$O(n)\$</span> storage)</p>

<h3>Example 1</h3>

<pre><code>function find2SumTo(arr, k){
    const lookFor = new Map();
    var i = arr.length;
    while (i--) {
        if (lookFor.has(arr[i])) { return [i, lookFor.get(arr[i])]  }
        lookFor.set(k - arr[i], i);
    }
} // Note no final return as data is know to always have a result
</code></pre>

<h2>The functional approach.</h2>

<p>You don't have to use the built in array functions, you can add to the <code>Array.prototype</code> a more useful function.</p>

<pre><code>// Finds information related to an item
Array.prototype.findInfo = function(cb) { // Must be function() to bind array to this
    var i = 0;
    while(i &lt; this.length) {
        const result = cb(this[i], i++, this);
        if (result) { return result }
    }
}
</code></pre>

<p>With the new array function you can solve the problem with</p>

<pre><code>const find2SumTo = (arr, k) =&gt; arr.findInfo((x, i) =&gt; 
      arr.findInfo((y, j) =&gt; {
           if (i !== j &amp;&amp; k - y === x) { return [j, i] }
      });
</code></pre>

<p>However it is still an <span class="math-container">\$O(n^2)\$</span> time solution.</p>

<h2>Imperative functional</h2>

<p>The better functional approach is the first solution (Example 1). Functional does not mean you have to use lots of functions. It means that your solution must conform to the functional rules, no side effect, be pure. The function can be as complex as you need to avoid breaking the rules.</p>
    </div>