<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>I've made the Node class public so I can use it for a binary tree implementation later</p>
</blockquote>

<p>I don't think you can use this <code>Node</code> type as a node in a binary tree, because nodes in binary trees typically has references to other nodes like <code>Parent</code>, <code>Left</code> and <code>Right</code>. So IMO keep this <code>Node</code> class as a dedicated node type for this linked list:</p>

<pre><code>  public class LinkedList&lt;T&gt;
  {
    class Node
    {
      public T Data { get; }
      public Node Next { get; set; }
      public Node Previous { get; set; }

      public Node(T data)
      {
        Data = data;
      }
    }
</code></pre>

<p>In this way you can skip the type parameter on the <code>Node</code> class. As shown above I've also made the <code>Node</code> class immutable for the <code>Data</code> property and hence no default constructor. It's easier to maintain, if you know that there is a one-to-one relationship between a data object and a <code>Node</code>.</p>

<hr>

<blockquote>
<pre><code>public Node&lt;T&gt; Head { get; private set; }
public Node&lt;T&gt; Tail { get; private set; }
</code></pre>
</blockquote>

<p>It's fine to have a public <code>Head</code> and <code>Tail</code> property, but they should be of type <code>T</code> and not <code>Node</code>. The client should be agnostic about the inner implementation of your list and only "communicate" objects of type <code>T</code> with it:</p>

<pre><code>public T Head =&gt; _headNode.Data; // TODO check for null
public T Tail =&gt; _tailNode.Data; // TODO check for null
</code></pre>

<p>This will require that you have private nodes for head and tail as illustrated above.</p>

<hr>

<blockquote>
<pre><code>public LinkedList(Node&lt;T&gt; node)
{
  Head = node;
  Tail = node;
}
</code></pre>
</blockquote>

<p>Having a one and only constructor that takes a node (or item) is not a good idea, because you often want to instantiate an empty list and provide it as argument to a method or something like that. So your list should have a default constructor with no arguments:</p>

<pre><code>public LinkedList()
{
}
</code></pre>

<p>You could also consider to have a constructor with a vector of items:</p>

<pre><code>public LinkedList(IEnumerable&lt;T&gt; items)
{
  foreach (var item in items)
  {
    AddTail(item);
  }
}
</code></pre>

<hr>

<blockquote>
<pre><code>public void AddToFirst(Node toAdd) {...}
    public void AddToLast(Node toAdd) {...}
</code></pre>
</blockquote>

<p>You would typically call these methods <code>AddHead</code> and <code>AddTail</code>:</p>

<pre><code>public void AddHead(T item) {...}
public void AddTail(T item) {...}
</code></pre>

<p>as you would call <code>RemoveFirst()</code> <code>RemoveHead()</code>...</p>

<hr>

<blockquote>
<pre><code>public void AddToFirst(Node&lt;T&gt; toAdd)
{
  toAdd.Next = Head;
  Head = toAdd;
}

public void AddToLast(Node&lt;T&gt; toAdd)
{
  Tail.Next = toAdd; //OBS: This will fail if Tail is null!
  Tail = toAdd;
}
</code></pre>
</blockquote>

<p>Your <code>Node&lt;T&gt;</code> class has a <code>Previous</code> property, why don't you use that (doubly linked list)?</p>

<hr>

<blockquote>
<pre><code>public void RemoveFirst()
{
  Head = Head.Next;
}
</code></pre>
</blockquote>

<p>This will fail, if <code>Head</code> is <code>null</code>.</p>

<hr>

<blockquote>
<pre><code>public void RemoveLast()
{
  var pointer = Head;
  while (pointer.Next != Tail)
  {
    pointer = pointer.Next;
  }
  // pointer is now before Tail
  Tail = pointer;
  Tail.Next = null;
}
</code></pre>
</blockquote>

<p>Why iterate through the entire list, when you have a reference to the last node in <code>Tail</code>?:</p>

<pre><code>public void RemoveLast()
{
  if (Tail != null)
  {
    Tail = Tail.Previous;
    Tail.Next = null;
  }
}
</code></pre>

<p>You could consider to return the <code>Data</code> value from the removed nodes.</p>

<pre><code>public T RemoveLast() {...}
</code></pre>

<hr>

<blockquote>
<pre><code>public IEnumerator&lt;Node&lt;T&gt;&gt; GetEnumerator()
{
  var pointer = Head;
  while (pointer != null)
  {
    yield return pointer;
    pointer = pointer.Next;
  }
}
</code></pre>
</blockquote>

<p>It's fine to provide an enumerator. But it would be better to implement the <code>IEnumerable&lt;T&gt;</code> interface instead - where T is the <code>T</code> from your list - not <code>Node&lt;T&gt;</code>. </p>

<p>If you do that, instead of this</p>

<blockquote>
<pre><code>  using (var linkedListEnumerator = myLinkedList.GetEnumerator())
  {
    while (linkedListEnumerator.MoveNext())
    {
      Console.WriteLine(linkedListEnumerator.Current.Data);
    }
  }
</code></pre>
</blockquote>

<p>you would be able to do </p>

<pre><code>  foreach (var item in myLinkedList)
  {
    Console.WriteLine(item);
  }
</code></pre>

<p>And besides that, by implementing <code>IEnumerable&lt;T&gt;</code>, you'll be able to use LINQ extensions on the list. (see also VisualMelons comment).</p>

<hr>

<p>Consider to implement this:</p>

<pre><code>public bool Remove(T item)
{
  // TODO: implement this
  return &lt;wasRemoved&gt;;
}
</code></pre>

<hr>

<p>You could try to implement the above and make a new post with an updated version with unit tests and we could then review that... :-)</p>

<p>Your use case should look as something like:</p>

<pre><code>void RunLinkedList()
{
  Console.WriteLine("Running the LinkedList class");
  Console.WriteLine("----------------------------");
  var myLinkedList = new LinkedList&lt;int&gt;();
  myLinkedList.AddHead(99);
  myLinkedList.AddHead(56);
  myLinkedList.AddHead(23);
  myLinkedList.AddHead(33);
  myLinkedList.AddTail(8888);
  myLinkedList.RemoveTail();
  myLinkedList.RemoveHead();
  Console.WriteLine("HEAD = " + myLinkedList.Head);
  Console.WriteLine("TAIL = " + myLinkedList.Tail);

  foreach (var item in myLinkedList)
  {
    Console.WriteLine(item);
  }

}
</code></pre>
    </div>