<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Yup, it's wrong<sup>1</sup> :)</p>

<p>Forms (and literally everything in Windows) <em>already</em> run their own message loop: whenever you feel the need to wrap a form with a no-op "wait until user does something" <code>DoEvents</code> loop, you are essentially forcing your form into a procedural dialog paradigm, keeping the VBA runtime much, <em>much</em> more busy than it needs to be.</p>

<p>Embrace the objects!</p>

<p>The idiomatic way to handle this in VBA is to adopt an event-driven paradigm: instead of wait-looping for a state change and essentially "poll" your form periodically until its <code>.IsHiden</code> (typo?) state changes, have a <em>presenter</em> class that's responsible for dealing with the state of the form, by responding to its <em>events</em>.</p>

<pre><code>Dim Ui As New UserForm1
</code></pre>

<p>Instead of a local (auto-instantiated?) object variable, make that a <code>WithEvents</code> variable at module level (that's why you need a class: only class modules can have <code>WithEvents</code> variables).</p>

<pre><code>Option Explicit
Private WithEvents UI As UserForm1

Private Sub Class_Initialize()
    Set UI = New UserForm1
End Sub
</code></pre>

<p>Now this class can handle any of the <code>UI</code> events - whether they're inherited from the <code>UserForm</code> base class, or custom-defined on the <code>UserForm1</code> default interface, like this:</p>

<pre><code>Public Event ByeBye()

Private Sub CommandButton1_Click()
    Debug.Print "YES!!!!"
    this.Confirmed = True
    this.IsHiden = True
    Me.Hide
    RaiseEvent ByeBye
End Sub
</code></pre>

<p>Note the indentation is made more consistent (and arguably better, IMO) by adding an indent level for all members.</p>

<p>Doing this allows the presenter class (the one that declares a <code>WithEvents</code> instance of the form) to handle this <code>ByeBye</code> event:</p>

<pre><code>Private Sub UI_ByeBye()
    'form is no longer displayed
End Sub
</code></pre>

<p>Note that this is an entirely different paradigm: you can't <code>do stuff</code> in the same procedure that's responsible for showing the form anymore - it <em>forces</em> you to separate the responsibilies!</p>

<hr>

<p><sup>1</sup> Only because the form isn't modal though: a modal form suspends execution, which makes the explicit loop useless; the form's state can be read on the statement that immediately follows the call to <code>.Show</code>, since that next instruction will only run after the form is dismissed. That isn't the case for a non-modal form, so instead of loop-waiting, we need to embrace the asynchronous nature of the non-modal messenging, with events.</p>
    </div>