<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First: Why use a class?</p>

<pre><code>Graph graph(adjancecy_list, cost_vector);
const auto result = graph.shortest_path(source_node, target_node);
</code></pre>

<p>This could easily be refactored to a simple function call of:</p>

<pre><code>const auto result = shortest_path(adjancency_list, cost_vector, source_node, target_node);
</code></pre>

<p>Since all <code>shortest_path</code> does is access the classes <code>adjancency_list</code> and <code>cost_vector</code>, which can just be passed in, <code>queue</code>, which should just be a local variable, and <code>is_valid_node</code>, which could just be inlined as you only called it once.</p>

<p>Where you have used the class, there are some minor mistakes. In your constructor, you have initialised <code>adjancecy_list</code> and then <code>cost_list</code>. This should be the other way around (Or you should swap the members). The constructor is also explicit for no reason.</p>

<pre><code>class Graph {
public:
  Graph(const AdjacencyListType &amp;input_list,
        const CostEdgeVector &amp;input_cost_list)
    : adjancecy_list(input_list), cost_list(input_cost_list) {}
  // ...
private:
  // The other way around
  const AdjacencyListType &amp;adjancecy_list;
  const CostEdgeVector &amp;cost_list;
}
</code></pre>

<hr>

<pre><code>      const auto &amp;current_node = queue.top();
      queue.pop();
</code></pre>

<p>Is undefined behaviour. You take the const reference of a node, and then you delete it with <code>pop</code>. <code>current_node</code> would then be garbage. Just take a copy:</p>

<pre><code>      const auto current_node = queue.top();
      queue.pop();
</code></pre>

<p>You should probably not use reference at all. The objects are all <code>int</code>s or <code>std::tuple&lt;int, int&gt;</code>s, which are very cheap to copy.</p>

<hr>

<p>This:</p>

<pre><code>    try {
      const auto &amp;target_distance = distance_node.at(target);
      result = target_distance == INFINITY_VALUE ? -1 : target_distance;
    } catch (...) {
      result = -1;
    }
</code></pre>

<p>Can be worded in a much clearer way. First, try to avoid <code>catch (...)</code> as much as possible. The only thing that would throw is <code>at</code>, which throws a <code>std::out_of_range</code>, so you can write <code>catch (const std::out_of_range&amp;)</code>. However, exceptions are very confusing here. It only throws if <code>target</code> is too big, so you can write something like:</p>

<pre><code>    if (target &gt;= distance_node.size()) {
      result = -1;
    } else {
      const auto target_distance = distance_node[size];
      result = target_distance == INFINITY_VALUE ? -1 : target_distance;
    }
</code></pre>

<p>Or even better, change <code>if (!is_valid_node(source)) return -1</code> to <code>if (!is_valid_node(source) || !is_valid_node(target)) return -1</code>, so that the target will always be in <code>distance_node</code>.</p>

<p>And (this is personal preference) I would avoid the c-like pattern of declaring a result variable. Where you do <code>result =</code> at the end can be replaced with just <code>return</code>, and it's still very clear.</p>

<hr>

<p>If you are able to control your input, it would probably be easier to, instead of having two vectors which name the neighbour and have the cost of the edge, have a list of neighbours of pairs of nodes and costs. I would declare a helper struct:</p>

<pre><code>struct edge {
  NodeType neighbour;
  CostType cost;
};

// or `using edge = std::pair&lt;NodeType, CostType&gt;;`, but that has less meaning
</code></pre>

<p>And have one vector of vector of these.</p>

<p>Also, you use a <code>std::tuple&lt;int, int&gt;</code> for "<code>CostNodeTuple</code>". Since there are only 2 values, it might have been easier to use a <code>std::pair</code>, so <code>std::get&lt;0&gt;(t)</code> turns into <code>t.first</code>, and <code>std::get&lt;1&gt;(t)</code> turns into <code>t.second</code>.</p>

<p>And if you swapped the order, you wouldn't need a custom comparator (As a tuple or pair's <code>operator&lt;</code> does mostly what you want)</p>

<hr>

<p>If you can do even more refactoring, I would consider using <code>unsigned</code> instead of <code>int</code>, as this doesn't work for negative edge weights (i.e. if there is a negative loop, it should have a value of -infinity). Instead of returning <code>-1</code> for failure, you could throw an error (if this is an exceptional circumstance) or returning a <code>std::optional&lt;unsigned&gt;</code> (if disjoint graphs are common). The current solution is fine as is though.</p>

<p>Currently, using signed integers, there are a bunch of places where they are implicitly converted to unsigned integers (to use for array indices). It's not too much of a problem, but it shouldn't be the case (Maybe use <code>std::size_t</code> for <code>NodeType</code>?)</p>
    </div>