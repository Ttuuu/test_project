<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>We can simplify that a lot.  </p>

<p>You are not really using RAII on the <code>CriticalSection</code> as you declare it in one place then initialize it in another. But <code>CRITICAL_SECTION</code> is a type as you pass a pointer around.</p>

<p>Why not simplify a bit:</p>

<pre><code>class GetLock;
class CriticalSection {
public:
    CriticalSection() {
        InitializeCriticalSection(&amp;m_CS); // get a pointer to the member
    }
    ~CriticalSection() {
        DeleteCriticalSection(&amp;m_CS);
    }
private:
    friend class GetLock;   // Only GetLock should be locking/unlocking this object.
    void lock() {
        EnterCriticalSection(&amp;m_CS);
    }
    void unlock{
        LeaveCriticalSection(&amp;m_CS);
    }
private:
    CRITICAL_SECTION    m_CS;   // Make this a member
                                // Now make the constructor initialize it.
}
</code></pre>

<p>Now its use case becomes.</p>

<pre><code>CriticalSection  criticalSection;

int main() {
    // Critical section variable already up and running.
}
</code></pre>

<p>If we look at the GetLock.<br>
I would not passes pointers as parameters. This means people can accidentally pass a <code>nullptr</code> and thus cause your code to break. Always pass by reference if you have to have parameter there.</p>

<pre><code>class GetLock {
public:
    // Pass a reference to the CriticalSection
    GetLock(CriticalSection&amp; plock)
        : m_csg(plock)
    {
        m_csg.lock();
    }
    ~GetLock(void) {
        m_csg.unlock();
    }
private:
    CriticalSectionGuard&amp; m_csg;   // Keep a reference to the critical section.
};
</code></pre>

<p>Now this can be used like:</p>

<pre><code>DWORD WINAPI ThreadProc(LPVOID lpParameter)
{
    GetLock lock(criticalSection);

    return 1;
}
</code></pre>

<p>Note the difference above to your version:</p>

<pre><code>    GetLock(&amp;CSG);   // This creates a temporary object.
                     // This object is destroyed at the end of the
                     // statement (which is the ;).
                     // This mean you call lock() and unlock() before
                     // the end of the line.
</code></pre>

<p>I should also note that using global variables is considered bad practice. You should try and design your program so that you pass the things being manipulated around as parameters (or part of an object). I can't really suggest an improvement with knowing more about the code.</p>
    </div>