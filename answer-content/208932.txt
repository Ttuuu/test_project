<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<pre><code>    bool end_of_word;
    Node(): end_of_word(false) {}
</code></pre>

<p>This would be probably more idiomatic simply written as</p>

<pre><code>    bool end_of_word = false;
</code></pre>

<p>Next,</p>

<pre><code>    explicit Trie(std::vector&lt;std::string&gt;);
</code></pre>

<p>is probably more idiomatic written as</p>

<pre><code>    template&lt;typename Itr&gt; Trie(Itr begin, Itr end);
</code></pre>

<p>Next, </p>

<pre><code>    std::unique_ptr&lt;Node&gt; root;
</code></pre>

<p>Why is it allocated on heap? It's a private member owned by this object, by putting it on heap you simply get some (noticeable) dereference overhead, and that's all.</p>

<p>Same goes for branches: there's no point in keeping child <code>Node</code>s on heap, <code>std::unordered_map&lt;char, Node&gt;</code> is quite sufficient for a tree, with no additional  overhead.</p>

<pre><code>Trie::Trie() {
  root = std::unique_ptr&lt;Node&gt;(new Node());
}

Trie::Trie(std::vector&lt;std::string&gt; words) {
  root = std::unique_ptr&lt;Node&gt;(new Node());
</code></pre>

<p>Irrespective of what's said above about <code>root</code>'s type, such initializations are better put in initialization lists:</p>

<pre><code>Trie::Trie(): root(new Node) {}
</code></pre>

<p>And if you upgrade to C++14, recall that <a href="https://abseil.io/tips/126" rel="nofollow noreferrer"><code>make_unique</code> is the new <code>new</code></a></p>

<pre><code>Trie::Trie(std::vector&lt;std::string&gt; words)
  : root(std::make_unique&lt;Node&gt;())
{
</code></pre>

<p>Next,</p>

<pre><code>  for (const char &amp; key : word) {
</code></pre>

<p><code>char</code> type is small enough to be bound by value. Scalar and small POD types, when passed by reference, can create unnecessary overhead so it is better written as</p>

<pre><code>  for (char key : word) {
</code></pre>

<p>(or even</p>

<pre><code>  for (auto key : word) {
</code></pre>

<p>which makes perfect sense if you ever decide to make character type a parameter to your Trie.)</p>

<pre><code>    auto found = it-&gt;children.count(key);
    if (!found)
      return false;
    it = it-&gt;children[key].get();
</code></pre>

<p>In C++, even with unordered containers, it is better done as</p>

<pre><code>    auto where = it-&gt;children.find(key);
    if (where == it-&gt;children.end()) return false;
    it = where-&gt;second.get();
</code></pre>

<p>And similarly for <code>Insert()</code>.</p>

<p>Which, by the way, I would declare as</p>

<pre><code>  Trie &amp;Insert(const std::string &amp;);
</code></pre>

<p>But that is more like a personal preference.</p>

<p>How about adding a method that searches for all the elements whose keys start with a given prefix, and returns them either as a subnode, or a fresh container, like list or vector?</p>

<p>And the final boss: define an iterator type for your trie.</p>
    </div>