<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I am not going to be nice. That's how bad it is. The design is terrible. You are greatly confused on so many levels.</p>

<p>Internally, matrix stores runtime rows, cols, and dynamically the data in <code>std::vector&lt;std:vector&gt;</code> - while the rows and cols are defined in the template arguments and thus compile time constants. It makes no sense at all.</p>

<p>Generally there are two types of matrix implementations:</p>

<p>(1) struct with fixed rows and cols and its data is stored in, say, <code>double mData[rows][cols];</code> - a static format.</p>

<p>(2) dynamically allocated matrix with run-time chosen rows and cols with dynamically allocated data in, say, <code>std::vector&lt;double&gt; data;</code>.</p>

<p>(Note: eigen linear algebra library also has more intermediate types for greater compatiability and efficiency.)</p>

<p>Method (1) has the advantage that everything is known at compile time and data is allocated statically. Con: It requires compile time knowledge of the size of matrices and has to compile a new class for each size.
This is the preferred method for small sized matrices. </p>

<p>Method (2) can serve all matrices of all sizes but it requires dynamic allocation of data and lack of compile time knowledge of sizes might infer with optimizations and some bugs will not be discoverable at compile time. This is the preferred method for large sized matrices and those when one lacks knowledge of matrix size at compile time.</p>

<p>Your version has all the cons and none of the advantages. It requires compile time knowledge of the matrix's size and it requires run-time allocations and for some mysterious reasons it stores the size (compile-time defined) inside the matrix instance. Furthermore, you store data inside <code>std::vector&lt;std::vector&lt;double&gt;&gt;</code> which is a horrible idea in as it requires <code>rows+1</code> allocations - it is slow on both initialization and usage and in addition results in memory fragmentation problems. This is how bad it is.</p>

<p>Please, just use an open source matrix library. There are plenty.</p>
    </div>