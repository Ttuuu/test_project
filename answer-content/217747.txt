<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>A few comments about your code:</p>

<ol>
<li>Why introduce a new variable <code>n</code> copy of another variable? If you want to be more concise you could use <code>n</code> and <code>m</code> insted of <code>row</code> and <code>col</code> (that I don't like because they are singular names, while they represent the number of rows and of columns).</li>
<li>Why define <code>new-arr</code> before the test and then assign it after the test of squareness? Don't by shy of use <code>let</code> as many times as you need, to introduce variables when they are really necessary.</li>
<li>Use <code>assert</code> instead of <code>cond</code> to check for correct parameters: in this way you give the user the opportunity of correct them, and produce a shorter and more readable code.</li>
<li>Why initialize the new array to a value <code>nil</code> which is immediately overwritten?</li>
<li>The fist <code>do</code> could return the result, so to avoid the last line of the function.</li>
<li>Use the primitive function <code>1+</code> instead of summing by 1.</li>
<li>Document the function with a comment about its scope as first form of the body of the function.</li>
</ol>

<p>So, after this first set of comments, the function could be rewritten as:</p>

<pre><code>(defun quarter-turn (arr)
  "rotate a square matrix 90° clockwise"
  (let* ((dim (array-dimensions arr))
         (n (first dim))
         (m (second dim)))
    (assert (= n m) (arr) "The argument is not a square array.")
    (let ((new-arr (make-array dim)))
      (do ((i 0 (1+ i)))
          ((= i n) new-arr)
        (do ((j 0 (1+ j)))
            ((= j n))
          (setf (aref new-arr j i) (aref arr (- n i 1) j)))))))
</code></pre>

<p><strong>DO versus LOOP</strong></p>

<p>As you have already noted, in this case <code>do</code> is more verbose than <code>loop</code>. I think that in a case like this they are more or less equivalent (just a personal opinion). I would prefer the <code>loop</code> form not only because it seems to me slightly more concise, but also because it is more “natural” for me to think of a classical nested loop for a bidimensional array in terms two nested <code>loop</code> forms:</p>

<pre><code>(defun quarter-turn (arr)
  "rotate a square matrix 90° clockwise"
  (let* ((dim (array-dimensions arr))
         (n (first dim))
         (m (second dim)))
    (assert (= n m) (arr) "The argument is not a square array.")
    (let ((new-arr (make-array dim)))
      (loop for i below n
            do (loop for j below n
                     do (setf (aref new-arr j i) (aref arr (- n i 1) j))))
      new-arr)))
</code></pre>
    </div>