<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Code Review submission:</strong> It's very helpful for reviewers to be able to execute your code, so that they can observe it "in action" (and, in my case, test out possible revisions). Before I could build this code, I had to</p>

<ul>
<li><p>Create a project with the classes described (which was easy, of course)</p></li>
<li><p>Reverse-engineer the forms with the controls hinted at by your handler functions (which was a pain)</p></li>
<li><p>Google for the library you used (<code>GDIDrawer</code>), and include it in the project too. If this had been any harder, I wouldn't have bothered, and you wouldn't have gotten a review.</p></li>
</ul>

<p>Obviously not getting my feedback specifically isn't the end of the world, but presumably feedback is what you're here for, so try to make it easy on us.</p>

<hr>

<p><strong>Capitalization:</strong> Naming your classes with <code>PascalCase</code> (instead of <code>camelCase</code> or <code>alllowercase</code>) doesn't make them <em>inherently</em> easier to read... It makes them easier to read because that is the convention recommended by Microsoft and used by the majority of C# programmers. </p>

<hr>

<p><strong>Separate files for enums:</strong> In my opinion, if multiple classes use an enum to communicate, that enum doesn't "belong" to either class, and merits its own file. There's no penalty for having a file that's only 6 lines long.</p>

<hr>

<p><strong>Autoproperties:</strong> this C# feature may not be obvious, but it can be very useful to both shorten your code and better manage your objects' state. The following code defines a property called Shape that is publicly visible but only privately modifiable:</p>

<pre><code>public ShapeType Shape { get; private set; }
</code></pre>

<hr>

<p><strong>Selection Feedback:</strong> This is a feature recommendation more than a code issue, but I found it very helpful to display the current state of the program. Next to <code>master_btn_shape</code> I placed a label. Whenever the shape dialog closed, I set that label to indicate the selection (for example "Circle, no border" or "Square, border")</p>

<p>I did the same thing to indicate whether the program was currently "Stopped" or "Waiting for clicks".</p>

<p>Next to the color button, I placed a small panel. Whenever the active color changed, I changed the background color of the panel.</p>

<p>Speaking of the active color, I replaced <code>CURRENT_COLOR</code> with a property as follows. This saves the trouble of remembering to change the "indicator panel" manually from anywhere the current color can be changed.</p>

<pre><code>private Color _currentColor;
private Color CurrentColor // Not a constant, so no SCREAMING_SNAKE_CASE
{
    get =&gt; _currentColor; // Could as easily be "get { return currentColor; }"
    set
    {
        _currentColor = value;
        master_pnl_currentColor.BackColor = value;
    }
}
</code></pre>

<hr>

<p><strong>Initialization:</strong> I was puzzled at first that my shapes were being drawn in red when I had specified green. It wasn't until after I'd written the above code that I realized the active color is reset every time the start button is pressed. I recommend placing that sort of default initialization in the constructor.</p>

<hr>

<p><strong>Respect "cancel":</strong> If I open the shape picker, change my selection, and then cancel out? My selection is changed anyway. Why even create a cancel button?</p>

<hr>

<p><strong>Deep <code>if</code> nesting:</strong> The code in <code>master_timer_Tick</code> is a bit hairy. This is largely unavoidable given the structure of the overall program (and the library being used), but one way to reduce it would be with an "early bail out" if there is no click location:</p>

<pre><code>private void master_timer_Tick(object sender, EventArgs e)
{
    if (!dr.GetLastMouseLeftClick(out var lastClickLocation))
        return; // nothing to do here

    // method continues with only 2 layers of "if" nesting ...
}
</code></pre>

<hr>

<p><strong>Object orientation:</strong> This suggestion is a larger overhaul, but you might find it useful as an exercise. One of the principles of OOP is abstraction: "I have this thing that knows how to behave, so that I don't have to deal with the details". Along those lines, you could create shapes that know how to draw themselves, so that the <code>Tick</code> handler is simply</p>

<pre><code>private void master_timer_Tick(object sender, EventArgs e)
{
    sf.CurrentShape.Draw(dr);
}
</code></pre>

<p>This requires you to have defined an interface:</p>

<pre><code>public interface IShapeDrawer
{
    void Draw(CDrawer drawer);
}
</code></pre>

<p>And you'll probably want a base class to handle the common click location detection:</p>

<pre><code>public class ShapeDrawer : IShapeDrawer
{
    public Draw(CDrawer drawer)
    {
        if (!drawer.GetLastMouseLeftClick(out var lastClickLocation))
            return;

        DrawAt(drawer, lastClickLocation);
    }
    protected abstract void DrawAt(CDrawer drawer, Point location);
}
</code></pre>

<p>With child classes <code>BorderedCircleDrawer</code>, <code>NonBorderedSquareDrawer</code>, and so on. Each of those must implement <code>DrawAt</code>, making the appropriate call to <code>drawer</code>.</p>

<p>In order to make this work, the shape picker form will need to know what the current ShapeDrawer is. One way to keep track of that might be in the properties:</p>

<pre><code>public partial class ShapeForm
{
    public IShapeDrawer ShapeDrawer { get; private set; }

    private void shapeform_btn_ok_Click(object sender, EventArgs e)
    {
        select case (_shape)
        {
            case (ShapeType.Circle):
                ShapeDrawer = _hasBorder 
                    ? new BorderedCircleDrawer()
                    : new NonBorderedCircleDrawer();
            case (ShapeType.Sqaure)
                ShapeDrawer = _hasBorder 
                    ? new BorderedSquareDrawer()
                    : new NonBorderedSquareDrawer();
        }
    }
}
</code></pre>

<p>You'll notice that technically, the same if-nesting that we moved out of the <code>Tick</code> handler has been moved into this <code>Click</code> handler... It's up to you to decide where that complexity is best managed. I would argue it belongs in the ShapeForm (which I might rename to <code>ShapePicker</code> or <code>ShapeDialog</code>), because that's where the complexity of the related controls (check box and radio buttons) already lives.</p>

<hr>

<p><strong>Further improvements:</strong> It might be nice if the ShapeDialog behaved more like the ColorDialog. For example, in how it uses <code>DialogResult</code>. It's almost always a good idea to match the behavior of existing objects in the standard libraries, because if you ever share your code, folks who know how to use those objects will have a head start to using yours. (This ties into the "Respect 'cancel'" point above)</p>

<p>I don't love the <code>IShapeDrawer</code> interface I invented, in part because you have to pass around references to the <code>CDrawer</code>. You might peek into the GDIDrawer library itself, and see if you can tap into its <code>CEllipse</code> and <code>CRectangle</code> objects directly (instead of making your own <code>ShapeDrawer</code> objects. If you don't have to make different calls to the different <code>AddCenteredFoo</code> functions directly, you may be able to clean up the code even more.</p>

<p>If you go that route, you might even try to reproduce the behavior of drawing shapes on the screen without using GDIDrawer at all - you might find it easier than you think.</p>

<p>Even further along those lines, it might be neat to make the mouse behave more like a "paintbrush": Have a shape "follow" the mouse cursor around, and leave a copy behind whenever the mouse clicks.</p>

<hr>

<p>For other reviewers: You may find <a href="https://gist.github.com/benj2240/69e3a5fd3fc2933751ef82ee87e38d18" rel="nofollow noreferrer">this more complete version of the code</a> helpful. It includes the necessary Windows Forms designer files to make a functioning GUI (although I'm sure it's nowhere near as pretty as OP's). I have also included <em>some</em> of the changes I suggested in my review - mostly around the instant feedback for the state of the application. I have not included the <code>GDIDrawer</code> project, but it is <a href="https://github.com/NAIT-CNT/GDIDrawer" rel="nofollow noreferrer">publicly available on Github</a>.</p>
    </div>