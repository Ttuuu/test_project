<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You are doing it somewhat right, somewhat wrong.</p>

<p>Your visitor is more of a Mapping transformer: it is converting <code>Node</code> into an <code>int</code>.  How it gets that <code>int</code> value from the <code>Node</code> is left up to the implementation.</p>

<p>Unfortunately, all of your <code>average</code> calculation is still inside <code>inOrder()</code>.  Worse, your <code>sum</code>, <code>count</code> and <code>average</code> values are <code>static</code> members of <code>Node</code>, so you cannot do two parallel average calculations.  There is no resetting of the <code>sum</code> or <code>count</code> so a subsequent average calculation is going to compute the average of the aggregate of all data, not just the most recent tree.</p>

<p>Your <code>Visitor</code> <code>visit()</code> method should return nothing:</p>

<pre><code>public interface Visitor {
    void visit(Node node);
}
</code></pre>

<p>Then, you can create an <code>AveragingVisitor</code> which averages the data it extracts from <code>Node</code> objects:</p>

<pre><code>static class AveragingVisitor implements Visitor {
    int sum = 0;
    int count = 0;

    @Override
    public void visit(Node node) {
        sum += node.getVal();
        count++;
    }

    public double average() {
        return (double) sum / count;
    }
}
</code></pre>

<p>Each time you create a new <code>AveragingVisitor</code>, it will start new count &amp; running total at zero.</p>

<p>To compute the average, you would create this averaging visitor, and perform some kind of traversal (inOrder is fine) of the tree:</p>

<pre><code>AveragingVisitor visitor = new AveragingVisitor();

root.inOrder(visitor);

System.out.println(visitor.average());
</code></pre>

<p>Of course, <code>Node::inOrder(Visitor vistor)</code> will need to be rewritten as non-static, and call the <code>visitor.visit(node)</code> method on each node:</p>

<pre><code>public void inOrder(Visitor visitor) {
    if (left != null)
        left.inOrder(visitor);
    visitor.visit(this);
    if (right != null)
        right.inOrder(visitor);
}
</code></pre>

<p>With this visitor, you could easily make a <code>PrintingVisitor</code> to print all of the nodes.  No change would need to be made to <code>inOrder()</code>.</p>
    </div>