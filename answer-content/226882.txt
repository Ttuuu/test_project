<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2><code>MatchDelegate</code></h2>

<p>Much as I love .NET's nominal delegates, I almost always regret using a <code>delegate</code> rather than an <code>interface</code>, so I would introduced an <code>IMatcher</code> (which <code>MatcherAttribute</code> can implement directly) in its place. Granted delegates usually go wrong because I need to serialise them, which won't be an issue here, but the ability to attach meta data could be useful.</p>

<h2>The Tuple</h2>

<p>And as you know, I loathe tuples with a passion (when part of a public API), and would instead provide a dedicated <code>MatchResult</code> type, which can provide the same accessors but a nicer API for creation (e.g. providing one constructor for <code>Token</code> and <code>Length</code> (corresponding to success), and a <code>static readonly</code> corresponding to failure. The 'success' constructor can do all manner of wonderful checks to ensure that when you try to return nonsense that you are shouted at before it can do any damage (e.g. <code>Token != null &amp;&amp; Length &gt;= Token.Length</code>). This will also significantly declutter the code (which is full of <code>(bool Success, string Token, int Length)</code> at the moment), improve maintainability (you can modify the type in future without having to 'fix' everything that uses it), and you'll make <em>me</em> less miserable, which will make <em>you</em> feel warm and fuzzy inside. You can even add a <code>Deconstructor</code> magic-method if you really wish to access the tree attributes in such a manner. I'd also expect <code>MatchResult</code> to be immutable, which a <code>ValueTuple</code> cannot give you.</p>

<h2><code>RegexTextAttribute</code></h2>

<p>You might want to look at the <code>\G</code> regex token, which forces the match to occur at the exact position: this will avoid the match position check, and significantly improve performance for failed matches. I'm not sure how versatile <code>\G</code> is, but combined with lookaheads I doubt there is anything it can't give you. See the remarks on <a href="https://docs.microsoft.com/en-us/dotnet/api/system.text.regularexpressions.regex.match?redirectedfrom=MSDN&amp;view=netframework-4.8#System_Text_RegularExpressions_Regex_Match_System_String_System_Int32_" rel="nofollow noreferrer">Regex.Match</a> (ctrl-f for <code>"\G"</code>).</p>

<h2><code>QTextAttribute</code></h2>

<p>You could make the compiler happy by using <code>if (i == offset)</code> instead of the <code>switch</code>, which will be easier to maintain because it won't have code lying around for the sole purpose of making the compiler happy.</p>

<p>Regarding <code>// Don't eat quotes</code>, it seems that you an I have different definitions of 'eat', which suggests maybe a clearer term is in order.</p>

<p>I don't understand this: <code>return (false, token.ToString(), 0);</code></p>

<h2><code>Tokenize</code></h2>

<p>I think <code>if (matches.FirstOrDefault() is var match ...)</code> might as wall be <code>match = matches.FirstOrDefault()</code>. This would have the benefit of not being thoroughly confusing, since if that conditions was to fail the code would crash, but I don't believe it ever can.</p>

<p>I don't see the point in generating the tuple when you generate <code>matches</code>: I would find the match first, then generate the token if there was a successful match. This removes the tuple (did I mention I don't like tuples?), and would rip up <code>Consume</code>.</p>

<p>You might as well provide the parameter name for the <code>ArgumentException</code>: it just gives you that little bit more confidence that <code>Tokenize</code> is throwing the exception, and it isn't some re-packaged message.</p>

<p>I think the increment should be <code>i += match.Length</code>.</p>

<h2><code>State&lt;TToken&gt;</code></h2>

<p>I don't see the need to restrict <code>TToken</code> to an <code>Enum</code>, and I don't understand why <code>IsToken</code> isn't readonly and assigned in the constructor. Following on, I don't like that <code>State&lt;TToken&gt;</code> is tied to the attributes: why not provide a constructor that allows you to determine the matcher as well?</p>

<p><code>Consume</code> should return <code>null</code> for a failed match, so that anyone trying to use it finds out sooner than later. I don't think <code>Token&lt;TToken&gt;..ctor</code> should take a <code>MatchResult</code> (tuple thing): why does it care it came from a match? If it will take a <code>MatchResult</code>, then it should throw on an unsuccessful match. I also think it is bad that you don't allow empty matches: they could be misused to create misery, but equally there is no documentation saying the match must be non-empty, and they could be useful for 'optional' components.</p>

<h2>Misc</h2>

<p>As always, inline documentation would be appreciated.</p>
    </div>