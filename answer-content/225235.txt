<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'm not a big fan of your type-hinting comments.  Let JavaScript be JavaScript.  If you want typing, practice TypeScript instead.</p>

<p>I find it counterintuitive that the <code>ListNode</code> constructor takes its <code>next</code> parameter before its <code>val</code> parameter.  Putting <code>val</code> first is more natural (see my <code>piDigits</code> example below), and also allows <code>next</code> to be omitted for the last node in a list.</p>

<p>You can use the <code>{val, next}</code> syntactic shorthand.</p>

<p>As for the <code>reverseLinkedList</code> algorithm, there is too much code, with too many special cases.  The fact that you mention <code>.next.next</code>, reaching <em>two</em> elements ahead, is a sign that you aren't thinking about the loop invariant the right way.  You want the code to consider just the local situation at the <code>head</code>.</p>

<p>It's not really appropriate to explicitly set a variable to <code>undefined</code>; <a href="https://stackoverflow.com/q/5076944/1157100"><code>undefined</code> is supposed to represent the fact that no assignment has taken place</a>.  In any case, you should be more lenient than checking for <code>â€¦ === undefined</code>.</p>

<p>I find that it's nearly always unhelpful to use <code>temp</code> as a variable name or in a variable name.</p>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>const ListNode = (val, next) =&gt; { return {val, next}; };

const reverseLinkedList = (head) =&gt; {
    let newTail = null;
    while (head) {
        let next = head.next;
        head.next = newTail;
        newTail = head;
        head = next;
    }
    return newTail;
};



let piDigits = ListNode(3, ListNode(1, ListNode(4, ListNode(1, ListNode(5)))));
console.log(reverseLinkedList(piDigits));

let emptyList = null;
console.log(reverseLinkedList(emptyList));</code></pre>
</div>
</div>

    </div>