<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Use pattern matching to check for single-element lists</h1>

<p>Let's start with <code>romamCombination</code>'s second pattern:</p>

<pre><code>romanCombinations str = if length str == 1 then 1
</code></pre>

<p>Compared to Java, <code>length</code> isn't a constant time operation in Haskell. It will traverse the whole list. If we only want to know if a list consists of a single element, we should pattern match to get a constant time behaviour:</p>

<pre><code>romanCombinations [_] = 1
</code></pre>

<h1>Use named variants of folds where applicable</h1>

<p>Next, we will sum all elements in some list:</p>

<pre><code>  -- we have to change the else due to the new pattern, but more on that later
  else foldr (+) 0 [ romanCombinations xs | (x, xs) &lt;- sep , elem x possibles ]
</code></pre>

<p>However, <code>foldr (+) 0</code> is a common operation and therefore has a name in the <code>Prelude</code>: <code>sum</code>. We should use the named variant to convey our intend:</p>

<pre><code>  else sum [ romanCombinations xs | (x, xs) &lt;- sep , elem x possibles ]
</code></pre>

<p>Similarly, <code>divide</code> is already in the <code>Prelude</code>, it's called <code>splitAt</code>, although the arguments are flipped:</p>

<pre><code>  where
    divide str n = splitAt n str
</code></pre>

<h1>Use Hoogle to find functions</h1>

<p>But how would we find those functions? With Hoogle. If we search for <a href="https://hoogle.haskell.org/?hoogle=Num%20a%20%3D%3E%20%5Ba%5D%20-%3E%20a&amp;scope=set%3Astackage" rel="nofollow noreferrer"><code>Num a =&gt; \[a\] -&gt; a</code></a>, we will come across <code>sum</code> very soon, and if we search for <a href="https://hoogle.haskell.org/?hoogle=%5Ba%5D%20-%3E%20Int%20-%3E%20(%5Ba%5D%20%2C%20%5Ba%5D)" rel="nofollow noreferrer"><code>[a] -&gt; Int -&gt; ([a], [a])</code></a>, Hoogle will also find <code>splitAt</code>, even though the arguments are flipped.</p>

<p>Note that you sometimes need to use more general type signatures to find something with Hoogle.</p>

<h1>All together so far</h1>

<p>If we apply all those recommendations, we end up with</p>

<pre><code>romanCombinations :: String -&gt; Int
romanCombinations []  = 1
romanCombinations [_] = 1
romanCombinations str = sum [ romanCombinations xs | (x, xs) &lt;- sep , elem x possibles ]
  where
    sep       = map (`splitAt` str) $ take (length str) [1..4]
    possibles = ["X", "I", "II", "III", "IV", "V", "VI", "VII", "VIII", "IX"]
</code></pre>

<h1>Adjusting the length of a list by another list</h1>

<p>We're already at the end. However, there is one last step we should take: get rid of the other <code>length</code>. That can be done with <code>zip</code> and <code>map</code>:</p>

<pre><code>limit :: [a] -&gt; [b] -&gt; [b]
limit xs = map snd . zip  xs
</code></pre>

<p>In case you're not familiar with pointfree-code, it's the same as</p>

<pre><code>limit :: [a] -&gt; [b] -&gt; [b]
limit xs ys = map snd (zip xs ys)
</code></pre>

<p>As <code>zip</code> will end whenever the shorter list is exhausted, this will limit <code>str</code> to at most <code>4</code> elements in <code>[1..4]</code> and of course limit <code>[1..4]</code> to at most <code>length str</code>.</p>

<p>We end up with</p>

<pre><code>romanCombinations :: String -&gt; Int
romanCombinations []  = 1
romanCombinations [_] = 1
romanCombinations str = sum [ romanCombinations xs | (x, xs) &lt;- sep , elem x possibles ]
  where
    sep       = map (`splitAt` str) $ limit str [1..4]
    possibles = ["X", "I", "II", "III", "IV", "V", "VI", "VII", "VIII", "IX"]

limit :: [a] -&gt; [b] -&gt; [b]
limit xs = map snd . zip  xs
</code></pre>

<h1>Bottom line</h1>

<p>All in all, your original code was already easy to read, had type signatures and uses   simple splitting algorithm one can easily infer from your code. That being said, I haven't checked your algorithm or thought about improvements but only checked the code.</p>

<p>I recommend you to check the <a href="https://hackage.haskell.org/package/base-4.12.0.0/docs/Prelude.html" rel="nofollow noreferrer"><code>Prelude</code></a>, as <code>splitAt</code> and <code>sum</code> are already available for your use without any import. Also, try to avoid <code>length</code>. Either work with the list immediately (e.g. <code>map</code>, <code>fold</code>, <code>sum</code>, ...) or pattern match.</p>
    </div>