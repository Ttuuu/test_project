<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Addressing your questions</h2>

<blockquote>
  <p>Is this the way to do it, or is there some better way? Am I missing something obvious? </p>
</blockquote>

<p>I'm reminded of <a href="https://stackoverflow.com/a/3577662/1575353">this highly upvoted SO answer</a> to <a href="https://stackoverflow.com/q/3577641/1575353"><em>How do you parse and process HTML/XML in PHP?</em></a>. Based on the information there, you could choose a different tactic, like using the <a href="http://php.net/manual/en/book.dom.php" rel="nofollow noreferrer">DOM</a> API by utilizing thr <a href="http://php.net/manual/en/class.domdocument.php" rel="nofollow noreferrer">DOMDocument</a> class. This would allow you to do the following:</p>

<ul>
<li>remove the steps that encode and decode the data as JSON</li>
<li>simplify access of node attributes</li>
</ul>

<p>And the step "<em>Making a simpler array from the last array</em>" seems excessive as well - why not just create the hosts as soon as the appropriate data is parsed/found?</p>

<p>The code below has one less level of <code>foreach</code> loops because it simply checks if the <code>address</code> node has attributes for <code>addrtype</code> and <code>addr</code>. It also eliminates the second set of <code>foreach</code> statements and creates the host objects as soon as the information is available.</p>

<pre class="lang-php prettyprint-override"><code>libxml_use_internal_errors(true); //ignore invalid HTML tag warnings
$dom = new DOMDocument();
$dom-&gt;loadHTMLFile('C:/test.xml');
foreach($dom-&gt;getElementsByTagName('host') as $hostKey =&gt; $host) {
    $hostAttributes = array();
    foreach($host-&gt;getElementsByTagName('address') as $adressKey =&gt; $addressValue) {
        if ($addressValue-&gt;getAttribute('addrtype') &amp;&amp; $addressValue-&gt;getAttribute('addr')) {
            $hostAttributes[$addressValue-&gt;getAttribute('addrtype')] = $addressValue-&gt;getAttribute('addr');
        }
    }
    if (array_key_exists('ipv4', $hostAttributes) || array_key_exists('mac', $hostAttributes) {
        $hosts[$hostKey] = new Host($hostAttributes['ipv4'], $hostAttributes['mac']);
    }            
}
</code></pre>

<blockquote>
  <p>Is this the way to do it the "OOP" way?</p>
</blockquote>

<p>If you mean the parsing techniques, one might say that your approach is to parse JSON objects with arrays of nested children and then create Host objects - seems fine. </p>

<hr>

<h2>General review points</h2>

<p>If you don't decide to simplify the code with an approach like above, consider these critiques of your existing code.</p>

<p>The value of the variables <code>$ipv4</code> and <code>$mac</code> persist across iterations of the <code>foreach</code> loops, which means that if a host had only one type of address, then a previous value may be used unintentionally...</p>

<hr>

<p>The following lines can be simplified:</p>

<blockquote>
<pre><code>if(isset($addressValue)){
      if(isset($addressValue['addrtype'])){
</code></pre>
</blockquote>

<p>Why not combine those into a single line combined with the logical AND operator (i.e. <code>&amp;&amp;</code>)? I could see a reason not to do so if there was an <code>else</code> case defined immediately after one of those but that is not the case.</p>

<pre><code>if(isset($addressValue) &amp;&amp; isset($addressValue['addrtype'])){
</code></pre>
    </div>