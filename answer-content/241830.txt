<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Inadvertent case dependency?</strong></p>

<p>Should not the below code also work with <code>'Q'</code>, <code>'U'</code>?</p>

<pre><code>if (*s == 'q' &amp;&amp; *(s+1) == 'u')
</code></pre>

<p><strong><code>char</code> functions (advanced issue)</strong>`</p>

<p>The Std C library functions treat  <code>char *</code> data as if it was accessed by <code>unsigned char *</code>.</p>

<p>This is important in select cases.</p>

<p><code>tolower(int ch)</code>, <code>is...()</code> are well defined for values in the <code>unsigned char</code> range and <code>EOF</code>, else UB.  When <code>*s &lt; 0</code>, <code>tolower(*s)</code> is a problem.  Casting to <code>(unsigned char)</code> fixes that.</p>

<pre><code>isvowel(const char *s) {
  // switch (tolower(*s)) {
  switch (tolower((unsigned char) *s)) {
</code></pre>

<p>With some extended ASCII encoding this is useful, yet with UTF8, the issue moot as <code>tolower()</code> is wholly inadequate.</p>

<hr>

<p><strong>Deeper pedantic detail</strong></p>

<p><code>(unsigned char) *s</code> is the wrong solution with non-2's complement and <em>signed</em> <code>char</code> (not seen these days) as code should access the data an <code>unsigned char</code>.  </p>

<pre><code>isvowel(const char *s) {
  const char *us = (const char *) s;
  switch (tolower(*us)) {
</code></pre>

<p>With 2's complement the result is the same with either approach.  IAC, I doubt much C code these days would survive a new non-2's complement integer encoding so no real reason to worry about this deep detail.</p>

<p><strong>Formatting</strong></p>

<p>Code lacks <code>{}</code> in simple blocks.  I find the later style easier to review and maintain.  As with such style issues, code to your group's coding standard.</p>

<pre><code>} else {
    while (argc-- &gt; 0)
        piglatin(*argv++);
}
</code></pre>

<p>vs.</p>

<pre><code>} else {
    while (argc-- &gt; 0) {
        piglatin(*argv++); 
    }
}
</code></pre>

<p><strong>Consider local variables, initialization and code reduction</strong></p>

<pre><code>//bool upper;
//...
//    upper = false;
//    if (isupper(*s))
//        upper = true;
      bool upper = isupper(*s);
</code></pre>
    </div>