<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>I am trying to make a very simple event system for learning purposes,</p>
</blockquote>

<p>You've actually made a <strong>very</strong> complex event system. </p>

<p>First, let's explore the requirements of an "event system". I am basing these off a rough examination of your code.</p>

<ul>
<li>Custom <code>Event</code>s can be defined</li>
<li><code>Handler</code>s register <code>Listener</code>s</li>
<li>Calls to <code>Handler::onEvent</code> get dispatched to all registered <code>Listener</code>s</li>
</ul>

<p>A system which satisfies these requirements could be implemented with a <code>std::vector</code> of <code>std::function</code>s. Instead of a <code>Listener</code> class, it would just be a field or perhaps a type alias. The event structure could be specified in the <code>std::function&lt;&gt;</code> type. </p>

<p>Let's use this concept as a reference.</p>

<hr>

<p><strong>Event.h</strong></p>

<p>You are declaring every event type in this header essentially as a global variable. This means:</p>

<ul>
<li>Code can change the event values at runtime</li>
<li>You need to modify at least two different files just to declare a new event type</li>
<li>Events values may be important. Are two different types an alias of each other or not? You won't know until runtime.</li>
<li>Every new event type created will trigger a rebuild of every dependency of Event.h</li>
<li>Different runtime modules may disagree on the values of the event types due to this linkage</li>
</ul>

<p>The event class serves only to create a common base class for other event types. However, I don't see any utility for this. In the straw example I described, handlers must be coupled to their event types to some degree, but not to any base class. <strong>The implementation here requires every client of the system to be coupled to every other client.</strong> </p>

<p>Prefer to use enums, and declare them as privately as possible.</p>

<hr>

<p><code>LinkedList</code> appears to be a learning-exercise utility. As a general rule, prefer <code>std::vector</code> when storing a collection of objects. They're very fast and canonically ubiquitous. Note that the algorithmic complexity of adding or removing from the collection is <strong>not</strong> a good reason by itself to use a linked list over a <code>std::vector</code>. In this case, the collection stores pointers which are very small, so there's a lot of overhead in each linked list node. Also, every time a linked list node is iterated over, it may induce a cache miss due to indirecting, which a <code>std::vector</code> is much less likely to do. </p>

<hr>

<p>As a learning exercise, I recommend trying to trim away at your code until it is at the bare bones of functionality. Do you really need a default constructor that does nothing? Do you need a copy constructor on a type with no data? These should be questions raised when trying to slim down your system.</p>
    </div>