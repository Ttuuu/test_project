<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There's a chance that this can be sped up:</p>

<pre><code>any([num == 1 for num in arr])
</code></pre>

<p>Currently, you're going through all of <code>arr</code>, then giving the list to <code>any</code>. If the first <code>num</code> is 1, you're still checking the rest of <code>num</code>. Just remove the <code>[]</code> and make it a generator expression:</p>

<pre><code>any(num == 1 for num in arr)
</code></pre>

<p>I've found generator expressions to have more overhead than list comprehensions, but they can be faster in "early exit" problems like this.</p>

<hr>

<p>I'm not sure if this is due to trying to avoid mutating the original, but this is likely relatively slow:</p>

<pre><code>arr = arr + [14]
</code></pre>

<p>You're creating a new list here with that, then reassigning it back to <code>arr</code>. Unless you want to avoid mutating <code>arr</code>, just write:</p>

<pre><code>arr.append(14)
</code></pre>

<hr>

<p>You're calling <code>sorted</code> a lot. This involves the creation of a new list which will have some overhead. I didn't test it, but you can likely replace at least some of those calls with a call to <code>sort</code> and have the list sorted in place. Creating lists all over the place will add up after awhile.</p>

<hr>

<pre><code>if not(inp in deck)
</code></pre>

<p>Can just be</p>

<pre><code>if inp not in deck
</code></pre>

<p>Which reads a little nicer.</p>

<hr>

<p>Similar to my second point this chunk seems like it's creating a lot of lists:</p>

<pre><code>Pocket = []
Table = []
for i in range(2):
    Pocket = Pocket + [Request_Card("Pocket", i)]
print(str(round(100*Check_Odds(Pocket),2)) + "%")
for i in range(3):
    Table = Table + [Request_Card("Flop", i)]
print(str(round(100*Check_Odds(Pocket, Table),2)) + "%")
Table = Table + [Request_Card("Turn")]
print(str(round(100*Check_Odds(Pocket, Table),2)) + "%")
Table = Table + [Request_Card("River")]
print(str(round(100*Check_Odds(Pocket, Table),2)) + "%")
</code></pre>

<p>Every time you call <code>+</code> on a list, you're creating a new list that results from adding the two together. You can see that here:</p>

<pre><code>&gt;&gt; l = [1]
&gt;&gt; m = [2]
&gt;&gt; q = l + m
&gt;&gt; q
    [1, 2]
&gt;&gt; q.append(9)
&gt;&gt; q
    [1, 2, 9]
&gt;&gt; l
    [1]
&gt;&gt; m
    [2]
</code></pre>

<p>Normally this isn't a huge deal, but you're looking for performance suggestions.</p>

<p>Really, you should be using <code>append</code> or a similar function to mutate the lists in place unless you have a good reason to constantly create new lists.</p>

<hr>

<p>Please abide by proper <a href="https://www.python.org/dev/peps/pep-0008/#naming-conventions" rel="nofollow noreferrer">naming conventions</a>. Variables like <code>Table</code> and <code>Pocket</code> should be lower case. They aren't class names.</p>

<hr>

<p>Your use of <code>list(combinations(…))</code> is probably quite expensive. For example, you have</p>

<pre><code>undrawn_combs = list(combinations(undrawn_deck,2))
. . .

for oppCards in sample(undrawn_combs, …):
</code></pre>

<p>It seems like you're never needing all of the combinations since you're only taking a sample from them. You currently need a list because you do <code>len(undrawn_combs)</code> to calculate <code>k</code>, but this is all likely quite expensive. I would just have:</p>

<pre><code>undrawn_combs = combinations(undrawn_deck,2)
</code></pre>

<p>Then calculate the length using:</p>

<p><span class="math-container">$$\frac{n!}{k!(n - k)!}$$</span></p>

<p>Where <code>k</code> is how many elements are in each sub-set, and <code>n</code> is the length of the list.</p>
    </div>