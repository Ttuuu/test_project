<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>If you use a hashmap you can replace your entire logic with a couple of lines. It also makes other parts of the program simpler. Here's a working example:</p>

<pre><code>  select      = towers[select]
  destination = towers[destination]

  if destination.none? || select.last &lt; destination.last
    destination &lt;&lt; select.pop
  else
    puts "Invalid move. You can't place a bigger tile on top of a smaller one."
  end
</code></pre>

<p>But more on that later. First, some observations.</p>

<h3>Simplify rule checking</h3>

<p>Consider your logic to check if the player is putting the disk in the same tower, which is not a legal move. This is repeated in several places.</p>

<pre><code>  if select == 1 &amp;&amp; destination == 1
    puts "You can't put the same disc where you got it from!"
    puts ""
  end
</code></pre>

<p>No repetition necessary. It doesn't matter what the tower is. What matters is that <code>select</code> is equal to <code>destination</code>. You can also use the <code>\n</code> carriage return character instead of <code>puts ""</code> to add a blank line. Result:</p>

<pre><code>puts "You can't put the same disc where you got it from!\n" if select == destination
</code></pre>

<h3>Use idiomatic Ruby</h3>

<p>It's more to idiomatic to use <code>none?</code> and <code>any?</code> when checking array lengths for boolean operations. So instead of this:</p>

<pre><code>if tower3.length == 0
</code></pre>

<p>You can better express your intent with:</p>

<pre><code>if tower3.none?
</code></pre>

<h3>Switching to a hash simplifies a bunch of things</h3>

<p>You don't have to iterate over the discs to inject them into the tower. It's also redundant to call <code>reverse</code> twice. You can replace the following:</p>

<pre><code>(1..discs).each do |disc|
  tower1 &lt;&lt; disc
end
final = tower1.reverse
tower1.reverse!
</code></pre>

<p>With this - just create the array and duplicate it:</p>

<pre><code>towers[1] = (1..discs).to_a.reverse
final = towers[1].dup
</code></pre>

<p>The hashmap allows you to print the state of the game succinctly. Instead of this:</p>

<pre><code>  puts "Tower 1: #{tower1}"
  puts "Tower 2: #{tower2}"
  puts "Tower 3: #{tower3}"
</code></pre>

<p>You can:</p>

<pre><code>  towers.each do |tower_number, tower|
    puts "Tower #{tower_number}: #{tower}"
  end
</code></pre>

<h3>Simplified version</h3>

<p>Now you can see the benefit of using a hash. Here's a rough version of my refactoring. This can further be improved, but it's a very good start. I also added error checking to see if the user selects a tower that does not exist.</p>

<pre><code>towers = { 1 =&gt; [], 2 =&gt; [], 3 =&gt; [] }
puts "How many discs would you like to start with?"
discs = gets.chomp.to_i

towers[1] = (1..discs).to_a.reverse
final = towers[1].dup

while true
  puts "Here is how the game board looks right now:"
  towers.each { |tower_number, tower| puts "Tower #{tower_number}: #{tower}" }

  puts "Please select what tower you want to chose from:"
  select = gets.chomp.to_i
  puts "Please select what tower you want to place disc:"
  destination = gets.chomp.to_i

  if !towers.include?(select) || !towers.include?(destination)
    puts "No such tower!\n"
    next
  elsif select == destination
    puts "You can't put the same disc where you got it from!\n"
    next
  end

  select, destination = towers[select], towers[destination]

  if destination.none? || select.last &lt; destination.last
    destination &lt;&lt; select.pop
  else
    puts "Invalid move. You can't place a bigger tile on top of a smaller one."
    puts "Try again!\n"
  end

  if towers[2] == final || towers[3] == final
    puts "You win the game!"
    break
  end
end
</code></pre>

<h3>Final thoughts</h3>

<p>My second answer shows you an <a href="https://codereview.stackexchange.com/a/73454/1563">object oriented approach</a> to this game, which is arguably cleaner.</p>
    </div>