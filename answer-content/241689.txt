<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><p><code>MSE</code> and <code>RMSE</code> are suspiciously similar. Shouldn't</p>

<pre><code>def RMSE(w,X,y,ridge=False, reg_rate = 0.1):
    return np.sqrt(MSE(w,X,y,ridge=False, reg_rate = 0.1))
</code></pre>

<p>suffice?</p></li>
<li><p><code>MSE</code> could be streamlined:</p>

<pre><code>    ....
    retval = (1/len(X)) * total
    if ridge:
        retval += reg_rate*((w**2).sum())
    return retval
</code></pre></li>
<li><p>The loop</p>

<pre><code>    for i in range(len(X)):
        total += (np.dot(weights,[X[i]**(p+1) for p in range(len(weights))]) + bias - y[i])**2
</code></pre>

<p>raised some brows on the first reading. Indexing <code>y</code> with <code>i</code> - which enumerates <code>X</code> - is very suspicious. Is there any precondition on lengths of <code>X</code> and <code>y</code>?</p>

<p>Looking at your tests it appears that <span class="math-container">\$y_i = f(X_i)\$</span>, so they are of the same length indeed. I strongly recommend to make it explicit, maybe by passing a list of tuples <code>x, y</code> rather than two disconnected lists. I am not a numpy expert, so I can't say how it may affect performance.</p>

<p>Similarly, I am not sure that <code>len(weights)</code> is a good choice for an inner comprehension. <code>degrees</code> seems much more natural.</p>

<p>In any case, indexing here is anti-pythonic. Consider</p>

<pre><code>    for arg, val in zip(X, y):
        total += (np.dot(weights,[arg**(p+1) for p in range(degrees + 1)]) + bias - val)**2
</code></pre></li>
<li><p>I would like to see the tests exercising <code>ridge = True</code> case. If you don't expect to ever use this case, do not pass <code>ridge</code> argument to <code>fit</code> at all.</p></li>
</ul>
    </div>