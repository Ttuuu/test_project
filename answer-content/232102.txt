<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong><em>Tips and hints ...</em></strong></p>

<p><em>Namings</em>:</p>

<ul>
<li><p><code>leaderboard</code> as <code>Leaderboard</code> class property could have a more straightforward and comprehensive name - <code>this.players</code> (as collection of <code>Player</code> instances)</p></li>
<li><p><code>getRank</code> function may be perceived as the one that returns <em>rank</em>. <br>In real, it returns a <code>Player</code> instance for a specified <code>rank</code>. Thus, it's better named as <code>getByRank</code></p></li>
</ul>

<p><em>Design</em>:</p>

<ul>
<li><p>In terms of good design <code>Leaderboard</code> class should not be responsible for generating a new player with <code>new Player(name, score, new Date())</code>.<br>
<code>insert</code> method would optimally accept <code>Player</code> instance as a single argument.<br>In other cases - <code>Player</code> instances could be generated via supplement factory like <code>PlayerFactory</code> class</p></li>
<li><p>considering that <code>this.players</code> is an internal collection of <em>players</em>, a good idea is to prevent a mutation of it from the outer/client scope.<br>At least, you could stick to internal convention and named it as "protected" property <strong><code>this._players = []</code></strong> with further adding <strong><code>get</code></strong> accessor (used in "strict" mode):</p>

<pre><code>get players() {
   return [...this._players];
}
</code></pre>

<p>that will return a <strong>copy</strong> of <em>protected</em> collection to a client.</p></li>
</ul>

<hr>

<p>New version:</p>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>"use strict";

class Leaderboard
{
    constructor()
    {
        this._players = [];
    }
    
    get players() {
        return [...this._players];
    }

    insert(player)
    {
        this._players.push(player);
        this._players.sort((a, b) =&gt; a.score - b.score);
    }

    getByRank(rank)
    {
        if (isNaN(rank) || rank &lt; 1 || rank &gt; this._players.length) return null;
        return this._players[rank - 1];
    }
}

class Player
{
    constructor(name, score, date)
    {
        this.name = name;
        this.score = score;
        this.date = date;
    }
}

const leaderboard = new Leaderboard();

leaderboard.insert(new Player('john', 36, new Date()));
leaderboard.insert(new Player('pete', 23, new Date()));
leaderboard.insert(new Player('dave', 56, new Date()));

console.log(leaderboard.getByRank(2));</code></pre>
</div>
</div>

    </div>