<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2><code>#include</code> every necessary header</h2>

<p>or your code won't compile and is technically unfit for review here. So don't forget <code>&lt;memory&gt;</code> and <code>&lt;ostream&gt;</code> in your <code>.h</code>.</p>

<h2>Memory management</h2>

<p>That's what's most disappointing in an otherwise quite well written code. Memory management is the core of a <code>vector</code> class. Using smart pointers is a good practice, of course, but only solves part of the problem: it prevents memory leaks, but not other mismanagements of this rare resource.</p>

<p>Why would you initialize all your vectors with room for at least 100 elements? Your own example vectors contain only 20 elements, and it isn't rare at all to find smaller vectors. They're the most basic, most often used container in C++, so you can't waste that much memory in empty vectors. If you think I'm doing too much about this, just consider this:</p>

<pre><code>std::vector&lt;std::vector&lt;std::vector&lt;float&gt;&gt;&gt;&gt; temperatures; // occupies 3*sizeof(void*) bytes
Vector&lt;Vector&lt;Vector&lt;float&gt;&gt;&gt; temperatures // occupies more than 100**3*sizeof(float)
</code></pre>

<p>I'm not saying it's good to have nested vectors, I'm just saying it's something you should expect.</p>

<p>In the same way, don't add this <code>initial_capacity</code> to the capacity of the vector you're copying (in <code>deepCopy</code>), it's a waste of memory. For instance, let's say you want to compute the number of unique elements in your vector, you could write a function like this one:</p>

<pre><code>int number_of_unique_elements(Vector v);
</code></pre>

<p>where the vector is taken by value because you'll have to reorder it when looking for duplicates and don't want to modify the original.</p>

<h2>Constructors should be more coherent</h2>

<p>I find a bit weird to assign <code>0</code> as a default value to the <code>capacity</code> variable:</p>

<pre><code>template &lt;class T&gt;
class Vector {
    // ...
    int capacity = 0;
    // ...
};
</code></pre>

<p>only to set it at <code>initial_capacity</code> in your default constructor:</p>

<pre><code>template &lt;class T&gt;
Vector&lt;T&gt;::Vector() : capacity(initial_capacity), size(0), data{ new T[capacity] }
</code></pre>

<p>It is misleading and even a bit worrisome since the <code>0</code> initialization is follow by <code>expandCapacity</code>, which multiplies the previous capacity by <code>2</code>.</p>

<h2>Use <code>&lt;algorithm&gt;</code> whenever you can</h2>

<p>There are more than a few functions in which you use for loops over <code>std::copy</code>. Just don't.</p>

<h2>Separate memory management and operations on data</h2>

<p>Your interface doesn't include meaningful memory management methods (<code>reserve</code>, <code>shrink_to_fit</code>, <code>resize</code>) but is cluttered by external, and sometimes obscure operations.</p>

<p><code>operator&lt;&lt;</code> has nothing to do here. Provide a way to access your data, and enjoy the power of algorithms:</p>

<pre><code>Vector&lt;int&gt; data;
// fill data
std::copy(data.begin(), data.end(), std::ostream_iterator&lt;int&gt;(cout, ", "));
</code></pre>

<p><code>operator+</code> is worse, because it has no obvious meaning. It could mean concatenation as well as element-wise addition. Concatenation isn't a problem from outside either:</p>

<pre><code>Vector&lt;float&gt; result{srv_vec1};
result.reserve(result.size()+src_vec2.size());
result.insert(src_vec2.begin(), src.vec2.end());
</code></pre>

<p>Providing iterators is the best way to offer an access into the vector's data. If you don't want to, or at least not now, just provide a pointer to your data.</p>

<h2>Respect conventions</h2>

<p><code>get</code> and <code>set</code> aren't part of the <code>vector</code> vocabulary. Use <code>at</code> instead, and make it return a reference to the element!</p>

<h2>Use specific exceptions</h2>

<p><code>std::invalid_argument</code> isn't very explicit, all the more when <code>std::out_of_range</code> is available.</p>

<h2>Conclusion</h2>

<p>Code reviews are more about what is wrong, but your code is quite good. I believe that you should aim higher though, and think more deeply about memory management. There are two main aspects about this:</p>

<ol>
<li><p>how much memory to allocate: how much memory in an empty vector? how much more memory in a full vector? You've already thought of this even if you have to refine your approach.</p></li>
<li><p>when do I initialize the allocated memory? A <code>new[] operation</code> not only allocates memory for n objects but also initializes them. It isn't necessary optimal. You may rather allocate uninitialized storage and construct only when necessary. You may even leverage this to construct new elements directly inside your vector from their constructors' arguments.</p></li>
</ol>

<p>There are also some other optimizations you could consider, but they can be more complex to implement.</p>

<p>The first that comes to my mind is to allow for custom allocation functions: like every std::container, add <code>Allocator</code> to your template arguments and rely on the allocator interface to allocate memory.</p>

<p>Another one is to provide a <code>Vector&lt;bool&gt;</code> specialization.</p>

<p>Still another one would to implement a "small <code>Vector&lt;char&gt;</code>" optimization: memory for small <code>Vector&lt;char&gt;</code> could be allocated on the stack rather than on the heap.</p>
    </div>