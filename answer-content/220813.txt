<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Since you say in a comment that you may need to find the divisors of a number <span class="math-container">\$n\$</span> up to <span class="math-container">\$10^{60}\$</span>, trial division is not practical, even if performed only up to <span class="math-container">\$\sqrt n\$</span> . The only option is to find the prime factorisation and then reconstruct the divisors from the prime factorisation.</p>

<p>There are quite a few <a href="https://en.wikipedia.org/wiki/Integer_factorization#Factoring_algorithms" rel="nofollow noreferrer">algorithms to find the prime factorisation</a>. For the size of numbers that interest you, the <a href="https://en.wikipedia.org/wiki/Quadratic_sieve" rel="nofollow noreferrer">quadratic sieve</a> is probably the best option.</p>

<p>Given the prime factorisation, reconstruction of the divisors is just a matter of taking some Cartesian products. Generating them in order is slightly trickier: I reproduce here some code which I wrote for an earlier answer to a similar question. It assumes that <code>primeFactors</code> gives output in the form <code>[(prime, power) ...]</code> in ascending order of primes.</p>

<pre><code>import heapq

def divisors(n):
    primes = [(1, 1)] + list(primeFactors(n))
    q = [(1, 0, 1)]
    while len(q) &gt; 0:
        # d is the divisor
        # i is the index of its largest "prime" in primes
        # a is the exponent of that "prime"
        (d, i, a) = heapq.heappop(q)
        yield d
        if a &lt; primes[i][1]:
            heapq.heappush(q, (d * primes[i][0], i, a + 1))
        if i + 1 &lt; len(primes):
            heapq.heappush(q, (d * primes[i + 1][0], i + 1, 1))
            # The condition i &gt; 0 is to avoid duplicates arising because
            # d == d // primes[0][0]
            if i &gt; 0 and a == 1:
                heapq.heappush(q, (d // primes[i][0] * primes[i + 1][0], i + 1, 1))
</code></pre>
    </div>