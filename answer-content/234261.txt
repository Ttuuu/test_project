<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here are some things that may help you improve your code.</p>

<h2>Don't rely on non-standard extensions</h2>

<p>Some of your code, such as the <code>alx_mallocarrays</code> macro is relying on a braced-group within an expression which is not valid C, even if your compiler supports it.  See <a href="https://stackoverflow.com/questions/1238016/are-compound-statements-blocks-surrounded-by-parens-expressions-in-ansi-c">this question</a> for details.  The code also requires <code>__auto_type</code> and <code>__attribute__</code> which are also gcc extensions.  All of these make your code non-portable; at the very least this limitation should be expressly acknowledged in the header and/or documentation.</p>

<h2>Use include guards</h2>

<p>There should be an include guard in each <code>.h</code> file.  That is, start the file with:</p>

<pre><code>#ifndef LINKED_LIST_H
#define LINKED_LIST_H
// file contents go here
#endif // LINKED_LIST_H
</code></pre>

<p>The use of <code>#pragma once</code> is a common extension, but it's not in the standard and thus represents at least a potential portability problem.  See <a href="https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#sf8-use-include-guards-for-all-h-files" rel="noreferrer">SF.8</a></p>

<h2>Avoid relative paths in #includes</h2>

<p>Generally it's better to omit relative path names from #include files and instead point the compiler to the appropriate location.</p>

<pre><code>#include "libalx/extra/alx/linked-list.h"
#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;
#include "libalx/base/stdlib/alloc/mallocarrays.h"
#include "libalx/base/stdlib/alloc/mallocs.h"
#include "libalx/base/stdlib/alloc/reallocs.h"
</code></pre>

<p>For gcc, you'd use -I. This makes the code less dependent on the actual file structure, and leaving such details in a single location: a Makefile or compiler configuration file.  The order of these also suggests the next item.</p>

<h2>Put your own <code>#include</code>s first</h2>

<p>If you put your own <code>#include</code>s first, you will catch errors in which the <code>#include</code> is incomplete.  For example, I suspect that the three last <code>.h</code> files above need one or more things from <code>&lt;stdlib.h&gt;</code> or <code>&lt;string.h&gt;</code>.  If that's the case, then the files that need them should <code>#include</code> them.  Otherwise the code is dependent on the order of the <code>#include</code>s in the code which is a recipe for disaster and frustration.</p>

<h2>Avoid <code>goto</code></h2>

<p>The use of <code>goto</code> is error prone and is better avoided.  In the cases in which it's used, it's easily avoided.  For example instead of this:</p>

<pre><code>    if (alx_mallocs(&amp;node-&gt;data, size))
        goto err;

    memcpy(node-&gt;data, data, size);
    node-&gt;prev    = list-&gt;current-&gt;prev;
    node-&gt;next    = list-&gt;current;

    list-&gt;current-&gt;prev-&gt;next    = node;
    list-&gt;current-&gt;prev    = node;
    list-&gt;current        = node;
    (list-&gt;nmemb)++;

    return    0;
err:
    free(node);
    return    -2;
</code></pre>

<p>Write this:</p>

<pre><code>if (!alx_mallocs(&amp;node-&gt;data, size)) {

    memcpy(node-&gt;data, data, size);
    node-&gt;prev    = list-&gt;current-&gt;prev;
    node-&gt;next    = list-&gt;current;

    list-&gt;current-&gt;prev-&gt;next    = node;
    list-&gt;current-&gt;prev    = node;
    list-&gt;current        = node;
    (list-&gt;nmemb)++;

    return    0;
}
free(node);
return    -2;
</code></pre>

<h2>Eliminate "magic numbers"</h2>

<p>There are a few numbers in the code, such as <code>-1</code> and <code>-2</code> that have a specific meaning in their particular context.  By using named constants such as <code>err_mallocarrays</code> and <code>err_mallocs</code>, the program becomes easier to read and maintain.  </p>

<h2>Use <code>const</code> where practical</h2>

<p>Some of the functions, such as <code>alx_llist_find</code> do not alter the passed parameters.  Those parameters should be declared <code>const</code>.</p>

<h2>Consider documenting the header file</h2>

<p>The header is where I'd look to figure out how to use this class.  Because the nameing of functions is generally good, I wouldn't need a lot, but some functions such as <code>alx_llist_find</code> and <code>alx_llist_remove_last</code> are a bit strange.  I'd normally expect to be able to <code>find</code> by value rather than address and the <code>alx_llist_remove_last</code> seems too specialized for a general interface.  Use it internally only if it's useful, but don't clutter the public interface with unneeded functions.  An ideal interface is minimal but sufficient.</p>
    </div>