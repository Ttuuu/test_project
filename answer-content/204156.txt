<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Move <code>import</code>s outside of loops</h2>

<p>Whether or not Python optimizes this away, it is better to move <code>import</code> statements to the top of the file rather than scattered among the rest of the code.</p>

<h2>Use nouns for variable names, verbs for functions</h2>

<p>Instead of the variable <code>select</code>, give it a noun as name, such as <code>selection</code> or <code>choice</code>.</p>

<h2>Don't give magic constants useless names</h2>

<p>While it is often a good idea to define a variable holding a magic constant once, and then using it, you must give it a good name. The following is bad:</p>

<pre><code>eighteen = ("18")
</code></pre>

<p>Instead, give the variable a more meaningful name, that describes its <em>purpose</em>.
Also, sometimes a constant speaks for itself, and does not need to be put into a variable, like:</p>

<pre><code>comma = (",")
</code></pre>

<p>Just use <code>","</code> directly in the code. There is also no need to put parentheses around them.</p>

<h2>Use format strings for formatting your output</h2>

<p>Writing lines word by word is inefficient, and results in longer, convoluted code. It is better to use a format string to write a line at a time. For example:</p>

<pre><code>hotelfile.write("{},{},{},{},{},{}\n".format(username, membersname, year, status, nightsbooked, pointsbalance))
</code></pre>

<h2>Move big actions into functions</h2>

<p>Your code will grow over time, and having everything in one big function will cause you to lose overview. Try to split of the actions you perform on the list of bookings into separate functions. So your code should get the following structure:</p>

<pre><code>def addUser(...):
    # code to add a new user

def bookNight(...):
    # code to book a night

...

choice = input(...)
if choice == 'A':
    addUser(...)
elif choice == 'B':
    bookNight(...)
elif ...
</code></pre>

<p>When your code grows even more, you will probably have to think about adding classes that represent users, booking and so on. It is good to think a little bit ahead and add some more structure to your code early on (but you don't have to overdo it).</p>

<h2>Ensure usernames are really unique</h2>

<p>You are generating usernames by taking the first three characters of the surname, then adding a random number between 100 and 999, and then add the magic "18". This means that if a new user is added, and his or her surname starts with the same three characters as an existing user, that there is at least a 1 in 900 chance that you generate the same username. You blindly add the username to the file without checking for a possible collision. This will cause real problems! Fix it in one of these ways:</p>

<ul>
<li><p>Use a global counter that increments each time a user is added to the system, and make the complete value of that counter part of the username.</p></li>
<li><p>Check if any users are in the system that have the same three starting characters, if so check what the highest number associated with them is, and give the new user a number which is at least one higher than that.</p></li>
<li><p>Generate a truly random number that is at least 128 bits long, so that the average time before you have any real chance of having a collision is longer than the age of the universe. Python has a <a href="https://docs.python.org/3/library/uuid.html" rel="nofollow noreferrer">uuid library</a> for exactly this sort of thing.</p></li>
</ul>
    </div>