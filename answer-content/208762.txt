<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>1. Both versions</h3>

<ol>
<li><p>Splitting on spaces causes words not to be abbreviated if they are followed or preceded by punctuation.</p></li>
<li><p>Testing for plurals is done for every word. When there are many sentences to be reduced, it would be better to handle plurals by preprocessing the abbreviations dictionary beforehand. (Better because of speed and because of <a href="https://en.wikipedia.org/wiki/Separation_of_concerns" rel="nofollow noreferrer">separation of concerns</a>, for example pluralization rules are language-dependent.)</p></li>
<li><p>Each word is looked up in the abbreviations mapping four times. It would be better to look it up just once and remember the result.</p></li>
</ol>

<h3>2. First version (Maarten Fabré's)</h3>

<ol>
<li><p>There's no docstring.</p></li>
<li><p>Runtime is quadratic in the length of the input string due to the use of repeated string replacement.</p></li>
<li><p>Replacement does not respect word boundaries, for example, if CERCLE is found the in the sentence, then it would be changed to its abbreviation CERCL, but also RECERCLER would be changed to RECERCLR, which is not what is wanted.</p></li>
</ol>

<h3>3. Second version</h3>

<ol>
<li><p>There is no need for <code>abbreviations = set(abbreviations_file)</code> since <code>ConfigParser</code> objects <a href="https://docs.python.org/3/library/configparser.html#mapping-protocol-access" rel="nofollow noreferrer">support the mapping protocol</a>.</p></li>
<li><p>It would be better to take the maximum sentence length as a keyword argument rather than a global variable: this is more flexible and convenient for testing.</p></li>
</ol>

<h3>4. Revised code</h3>

<pre><code>import re

def shorten_sentence(abbreviations, sentence, max_length=0):
    """Shorten sentence by abbreviating words until it is max_length
    characters or shorter. First argument abbreviations must be a
    dictionary mapping words to their abbreviations.

    """
    length = len(sentence)
    words = []
    for word in re.split(r'(\W+)', sentence):
        if length &gt; max_length:
            abbrev = abbreviations.get(word, word)
        else:
            abbrev = word
        words.append(abbrev)
        length -= len(word) - len(abbrev)
    return ''.join(words)
</code></pre>

<p>I recommend that pluralization be implemented separately, perhaps like this:</p>

<pre><code>def plural_fr(word):
    """Return a naïve guess at the French plural of word."""
    if word.endswith(('AU', 'EU', 'OU')):
        return word + 'X'
    else:
        return word + 'S'

def pluralize(abbreviations, plural):
    """Return copy of abbreviations with uppercased keys, together with the
    plurals of the keys, produced by calling the plural function.

    """
    result = {key.upper(): value for key, value in abbreviations.items()}
    for key, value in abbreviations.items():
        result.setdefault(plural(key.upper()), value)
    return result
</code></pre>

<p>Then in the main part of the program you would build the table of abbreviations and their plurals like this:</p>

<pre><code>config = configfile.ConfigParser()
config.read('abbreviations.ini')
abbrevations = pluralize(config['abbreviation'], plural_fr)
</code></pre>
    </div>