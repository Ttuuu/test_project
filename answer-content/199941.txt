<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I see some things that may help you improve your code.</p>

<h2>Fix the bug (#1)</h2>

<p>The <code>Dungeon::move_player</code> takes <code>target_room</code> as a parameter, but then refers to <code>target</code> within the code for the function, so it doesn't compile at the moment.  I assume you meant <code>target_room</code> in both places.</p>

<h2>Fix the bug (#2)</h2>

<p>The code to add the wumpus currently looks like this:</p>

<pre><code>//add the wumpus
rooms[get_random(1, rooms.size())-1].has_wumpus = true;
</code></pre>

<p>No problem except that it fails to initialize <code>wumpus_room_number</code>, so the first time <code>move_wumpus</code> is called, it's referring to an uninitialized value.  Not good!  Instead, initialize the wumpus like this:</p>

<pre><code>//add the wumpus
wumpus_room_number = get_random(1, rooms.size())-1;
rooms[wumpus_room_number].has_wumpus = true;
</code></pre>

<h2>Fix the bug (#3)</h2>

<p>The reporting of room numbers is inconsistent.  For example, here's part of the play of the game:</p>

<pre><code>You are in room 2
You have 3 arrow(s) left
Tunnels lead to rooms 5, 16 and 6
what do you want to do? (M)ove or (S)hoot?
M
To where??
5
You are in room 17
You have 3 arrow(s) left
Tunnels lead to rooms 8, 14 and 5
</code></pre>

<p>So I moved to room 5 and arrived in room 17?  Also, I was in room 2 and now there's no path back to that room?  That's a bug!</p>

<h2>Fix the bug (#4)</h2>

<p>You have a number of classic off-by-one errors in the code.  An example is this:</p>

<pre><code>//add bat
for (int i = 0; i &lt; count_of_bats; ++i) {
    int index = get_random(1, rooms.size())-1;
    while (rooms[index].has_wumpus || rooms[index].has_pit || rooms[index].has_bat) {
        index = get_random(1, rooms.size());
    }
    rooms[index].has_bat = true;
}
</code></pre>

<p>The first instance of the call to <code>get_random</code> correctly subtracts 1 but subsequent calls do not.  I'd rewrite it like this:</p>

<pre><code>//add bat
for (auto i{count_of_bats}; i;  ) {
    int index = get_random(0, rooms.size()-1);
    if (!rooms[index].has_wumpus &amp;&amp; !rooms[index].has_pit &amp;&amp; !rooms[index].has_bat) {
        rooms[index].has_bat = true;
        --i;
    }
}
</code></pre>

<h2>Omit the class name from member function declarations</h2>

<p>It was probably just a typo or cut-and-paste error, but within the <code>Dungeon</code> class in <code>wumpus.h</code> we have this:</p>

<pre><code>bool Dungeon::move_wumpus();
</code></pre>

<p>As you know (because this is the only place it's done otherwise) the extra qualification is not necessary here.  Instead, that should be:</p>

<pre><code>bool move_wumpus();
</code></pre>

<h2>Use all required <code>#include</code>s</h2>

<p>The <code>wumpus.cpp</code> file contains calls to <code>std::random_shuffle</code> so it should <code>#include &lt;algorithm&gt;</code>.  Further, this should be placed in <code>wumpus.cpp</code> and not <code>wumpus.h</code> as per the next suggestion.</p>

<h2>Separate interface from implementation</h2>

<p>The interface goes into a header file and the implementation (that is, everything that actually emits bytes including all functions and data) should be in a separate <code>.cpp</code> file.  That's mostly done in this code but remember that the <code>#include</code> are actually part of the interface.  Thus, <em>only</em> the <code>#include</code>s that are required to understand the interface should be in the <code>wumpus.h</code> file and all <code>#include</code>s that are specific to the implementation should be isolated in the <code>wumpus.cpp</code> file.  In this case, that means only <code>&lt;array&gt;</code> and <code>&lt;vector&gt;</code> should be in the <code>.h</code> file.  Everything else should go into the <code>.cpp</code> file.</p>

<h2>Always <code>return</code> an appropriate value</h2>

<p>Your <code>shoot_array()</code> routine has control paths that cause it to end without <code>return</code>ing any <code>bool</code> value.  This is an error and should be fixed, probably most easily by simply adding <code>return false;</code> to the end.</p>

<h2>Prefer <code>std::array</code> to <code>std::vector</code> when fixed size is known at compile time</h2>

<p>The way this game is constructed, there will always be 20 room, each with 3 neighbors.  For that reason, the <code>get_neighbor_room</code> should probably return a <code>std::array&lt;Room_number, 3&gt;</code> instead of a <code>std::vector&lt;int&gt;</code>.</p>

<h2>Move construction from runtime to compile time where practical</h2>

<p>There is no need for the dodecahedron to be reconstructed at runtime each game.  It's a fixed structure with fixed connections.  All that the game really needs is to randomize the assigned <code>room_number</code> for each game.  So for that reason, I'd statically construct the rooms array like this:</p>

<pre><code>    std::array&lt;Room, 20&gt; rooms{{
        { &amp;rooms[1] ,&amp;rooms[4], &amp;rooms[19] },
        { &amp;rooms[0] ,&amp;rooms[2], &amp;rooms[17] },
        { &amp;rooms[1] ,&amp;rooms[3], &amp;rooms[15] },
        // and all the other rooms
    }};
</code></pre>

<h2>Use standard library algorithms</h2>

<p>The room number creation and constructor randomization could be considerably improved.  Currently the code looks like this:</p>

<pre><code>// create room numbers
std::vector&lt;Room_number&gt; random_room_numbers;

for (size_t i = 0; i &lt; rooms.size(); ++i) {
    random_room_numbers.push_back(i + 1);
}

//generate random numbers t0 use to put room numbers random
std::random_shuffle(random_room_numbers.begin(), random_room_numbers.end());

// add room numbers randomly
for (size_t i = 0; i &lt; rooms.size(), i &lt; random_room_numbers.size(); ++i) {
    rooms[i].room_number = random_room_numbers[i];
}
</code></pre>

<p>Then the wumpus, pits, bats and player are placed in the constructor which is more than 50 lines.  There's a better way to do this.  First shuffle the rooms collection, then add each feature sequentially since the rooms are already randomized.  Then shuffle again.  This makes things <em>really</em> simple:</p>

<pre><code>Dungeon::Dungeon()
{
    std::random_device rd;
    std::mt19937 g(rd());
    std::shuffle(rooms.begin(), rooms.end(), g);
    std::size_t i{0};
    rooms[i++].has_player = true;
    rooms[i++].has_wumpus = true;
    for (auto pits{count_of_pits}; pits; --pits) {
        rooms[i++].has_pit = true;
    }
    for (auto bats{count_of_bats}; bats; --bats) {
        rooms[i++].has_bat = true;
    }
    std::shuffle(rooms.begin(), rooms.end(), g);
}
</code></pre>

<p>If you adopt this method, there's no longer any need to have a separate <code>room_number</code> field, since you could just use the index.  That would eliminate the category of bugs such as caused bug #3 above.  It also eliminates the <code>wumpus_room_number</code> member variable.  If we need to find the wumpus (e.g. in the <code>move_wumpus</code> member function) we can just do it using <code>std::find_if</code> like this:</p>

<pre><code>bool Dungeon::move_wumpus() {
    auto direction = get_random(0, 3);
    if (direction == 3) {  // 25% chance that wumpus won't move
        return false;
    }
    // find the wumpus
    auto wumpus_room{std::find_if(rooms.begin(), rooms.end(), [](const Room &amp;r){ return r.has_wumpus; })};
    // move him
    wumpus_room-&gt;has_wumpus = false;
    auto new_room = wumpus_room-&gt;neighbors[direction];
    new_room-&gt;has_wumpus = true;
    if (new_room-&gt;has_player) {
        std::cout &lt;&lt; "You lost: Wumpus enters your room and eats you\n";
        return true;
    }
    return false;
}
</code></pre>

<h2>Look out for member functions</h2>

<p>There is a function in the current code with this prototype:</p>

<pre><code>int select_room_to_move(Dungeon&amp; d1);
</code></pre>

<p>Since it's being passed a non-const reference to a <code>Dungeon</code> anyway, it seems likely that this should instead be a member function.</p>

<h2>Fix the text string</h2>

<p>It looks like you may have started out with a plain string and then changed it to a literal string.  Unfortunately, now that it's literal, things like <code>\n</code> get printed just as they appear, so you might want to clean things up.</p>
    </div>