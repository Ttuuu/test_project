<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>In your code you're calling GetImageData for each pixel adding a lot of call that are not necessary, you can do this by calling it once for the entire canvas and getting the data from the array.</p>

<p>GetImageData returns a 1 dim array with RGBA for each pixel like :</p>

<pre><code>[R(pixel1),G(Pixel1),B(Pixel1),A(Pixel1),R(pixel2),G(Pixel2),...etc]
</code></pre>

<p>this means that you can get the pixel value by using <code>(y * canvasWidth+ x)*4+RGBA</code>
(RBGA is a 0-3 value representing the 4 values)</p>

<p>Another thing you can improve on is the order of your for loops. The way you're looping now you need to loop through the whole image before you can know the edge, however if you turn the loops around you can lessen the amount of pixels you need to check.</p>

<p>For example when going for the left edge you can start the double loop with x then y. This means that whenever the condition first becomes true you can be sure that it is the outer most left edge.</p>

<p>If you implement these relative easy changes the code would look more like this:</p>

<pre><code>function getEdges(tempcanv, colour, which, condition) {
    let ledge = -1, redge = -1, tedge = -1, bedge = -1;
    const canvwidth = tempcanv.width, canvheight = tempcanv.height;
    const imageData = tempcanv.getContext('2d').getImageData(0, 0, canvwidth, canvheight).data; //gets all image data
    for (let x = 0; x &lt; canvwidth; x++) {//left edge
        if (ledge &gt;= 0) {
            break;
        }
        for (let y = 0; y &lt; canvheight; y++) {
            //(y * canvwidth + x) * 4 is for getting the current location
            if (condition(imageData[(y * canvwidth + x) * 4 + which], colour)) {
                ledge = x;
                break;
            }
        }
    }
    for (let x = canvwidth - 1; x &gt;= ledge; x--) {//right edge
        if (redge &gt;= 0) {
            break;
        }
        for (let y = 0; y &lt; canvheight; y++) {
            //(y * canvwidth + x) * 4 is for getting the current location
            if (condition(imageData[(y * canvwidth + x) * 4 + which], colour)) {
                redge = x;
                break;
            }
        }
    }
    for (let y = 0; y &lt; canvheight; y++) {//top edge
        if (tedge &gt;= 0) {
            break;
        }
        for (let x = ledge; x &lt;= redge; x++) {
            //(y * canvwidth + x) * 4 is for getting the current location
            if (condition(imageData[(y * canvwidth + x) * 4 + which], colour)) {
                tedge = y;
                break;
            }
        }
    }
    for (let y = canvheight-1; y &gt;= tedge; y--) {//bottom edge
        if (bedge &gt;= 0) {
            break;
        }
        for (let x = ledge; x &lt;= redge; x++) {
            //(y * canvwidth + x) * 4 is for getting the current location
            if (condition(imageData[(y * canvwidth + x) * 4 + which], colour)) {
                bedge = y;
                break;
            }
        }
    }
    console.log('edges', [ledge, tedge, redge + 1, bedge + 1]);
    return [ledge, tedge, redge + 1, bedge + 1]
}
</code></pre>
    </div>