<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Don't hard-code your transformation</h3>

<p>With your current approach, as soon as you are faced with a new PairType or StimType you will have to adjust your function accordingly to account for them. What your current code is doing is really a hard-coded version of a wide-form to long-form conversion of the column data - and Pandas has methods to allow you to do that in an automated way. </p>

<p>Two options would be <a href="https://pandas.pydata.org/pandas-docs/stable/generated/pandas.melt.html" rel="nofollow noreferrer"><code>df.melt</code></a>, or a combination of <a href="https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.unstack.html" rel="nofollow noreferrer"><code>df.unstack</code></a> and <a href="https://pandas.pydata.org/pandas-docs/version/0.22/generated/pandas.DataFrame.reset_index.html" rel="nofollow noreferrer"><code>reset_index</code></a>.</p>

<p>Either way, after this step you'll nearly be all the way there. </p>

<pre><code>&gt;&gt;&gt; model_err.melt(var_name='PairStim', value_name='Err')

   PairStim     Err
0      fan1  0.0000
1      fan1  0.0625
2      fan1  0.0625
3      fan2  0.0000
4      fan2  0.0000
5      fan2  0.0000
6     foil1  0.0000
7     foil1  0.0625
8     foil1  0.0000
9     foil2  0.1250
10    foil2  0.1250
11    foil2  0.3125
</code></pre>

<p>The only other step in automation is to split the PairStim column up into its components, and do some cleanup. Wrapping this up in your function:</p>

<pre><code>def longform_model_error(model_err: pd.DataFrame):            
    melted = model_err.melt(var_name='PairStim', value_name='Err')
    melted[['PairType', 'StimType']] = (
        melted['PairStim'].str.extract('(\w+)(\d+)', expand=True)
    )
    melted['PairType'] = melted['PairType'].str.capitalize()
    melted['StimType'] = melted['StimType'].astype(int)
    return melted.drop('PairStim', axis='columns')
</code></pre>

<hr>

<h3>Comments on your current approach</h3>

<ul>
<li><p>Consider using the <a href="https://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.size.html" rel="nofollow noreferrer"><code>.size</code></a> attribute on a Series (or the <code>.shape</code> attribute) instead of <code>len</code>. This makes it more clear to me that <code>model_err.fan1</code> is indeed a Pandas type. </p></li>
<li><p>If you <em>did</em> want to hard-code the transformation for some reason, creating a DataFrame for each group and <code>concat</code>-ing them together is not ideal - you might as well remain in NumPy-land for as long as possible before turning it into a DataFrame. You would also benefit from hard-coding the separate columns instead of separate rows, as the dtypes of the columns are homogeneous, so you'd avoid the subsequent casting. Perhaps something like</p>

<pre><code>def longform_model_error_hardcode(model_err: pd.DataFrame):
    n_per_type = model_err.shape[0]
    pair_types = ('Fan', 'Foil')
    stim_types = (1, 2)
    n_stims = len(stim_types)

    cols = {
        'Err': model_err.values.ravel('F'),
        'PairType': np.repeat(pair_types, n_per_type*n_stims), 
        'StimType': np.tile(np.repeat(stim_types, 
                                      n_per_type), 
                            n_stims)
    }
    return pd.DataFrame(cols)
</code></pre>

<p>This will be faster, though if you were to go down the hard-coding avenue there isn't really much point in using Pandas at all if you're not performing other operations on the data - might as well just stick to NumPy in that case. </p></li>
<li><p>Nitpicking, <code>df_plotable</code> and <code>new_model_err</code> don't really help me understand what the function is supposed to do, or how <code>new_model_err</code> is different from the input DataFrame. Try and use some more descriptive variable names. </p></li>
</ul>
    </div>