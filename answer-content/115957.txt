<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here is just a quick response to your code:</p>

<ul>
<li><em>Look into the <a href="https://docs.python.org/2/library/csv.html" rel="nofollow">csv</a> module</em> – This module handles csv-files rather nicely</li>
<li><p><em>Look into using functions to separate concerns</em> – At all the places you've added comments, you should/could use functions. And the comments should rather be docstrings on line after function definition like in the following:</p>

<pre><code>def write_list_to_file(guest_list, filename):
    """Write the list to csv file."""

    with open(filename, "w") as outfile:
        for entries in guest_list:
            outfile.write(entries)
            outfile.write("\n")
</code></pre></li>
<li><p><em>Variable and function names are usually <code>snake_case</code></em> – See example above, which is according to <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow">PEP8</a></p></li>
<li><em>Use the <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow">with</a> construct to encapsulate file handling</em> – This is called a context manager, and it handles error cases, opening and closing of the file. See example above.</li>
<li><em>Why do you create the file, and not write to it directly?</em> – I don't quite see why you do the <code># Creating .csv file</code>, when you can both create and write to it directly.</li>
<li><em>Change text to avoid <code>guestNumber</code></em> – Having the <code>guestNumber</code> seems unneccessary. If you change the text, you don't need it. Using something similar to "Add another guest (Name, age, location) or 'Done': ". </li>
<li><em>Doing <code>capitalize()</code> is somewhat "dangerous"</em> – What if "John McEnroe" comes along, or "Jean von Luxembourg"?  They wouldn't like their name changed into "John Mcenroe" or "Jean Von Luxembourg". The same applies to the location part.</li>
<li><em>In general, don't add stuff you're going to remove immediately afterwards</em> – That is I would most likely not add the <code>Done</code> guest for later removal, instead of adding it first and then removing it. Add a simple <code>if</code> in front of the <code>append</code> and the issue is avoided.</li>
<li><em>Avoid lengthy <code>input</code> prompts</em> – Maybe personal preference, but I would rather have a lengthy text in front of the input prompt, instead of a lengthy prompt text. This way you could possibly also give even more examples of legal input.</li>
<li><em>Change into separate inputs</em> – If you change to using the <code>csv</code> module, I would also change to three separate input statements, and possible do some simple validation on each of the inputs before adding them into the guest list.</li>
<li><p><em>Careful think about variable names</em> – Some of your names are good, and some not so good. I.e. <code>guestNames</code> when it actually is both the name, age and location, is misleading. And in <code>for entires in guestList</code>, it would possibly read easier as <code>for guest in guest_list:</code>.</p>

<p>The latter is a typical pattern by the way, that is to use the singular of something plural, i.e. <code>for guest in guests:</code>, <code>for number in numbers:</code>, and so on. In general, plural version indicates list of some sort, whilst the singular version can be used within loops and similar.</p></li>
</ul>

<p>I'll end this hasty review with a very useful construct which could cleanup your code (when you've created functions):</p>

<pre><code>def main():
    """Main method used when called as a script."""

    guests = enter_guests()
    write_list_to_file(sorted(guests), "guestlist.csv")


if __name__ == '__main__':
    main()
</code></pre>

<p>Using this construct would allow for your code to be reused as a module later on, whilst still allowing it to be run directly from the command line. It also makes it very easy to understand what happens just skimming the code.</p>
    </div>