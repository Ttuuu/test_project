<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This is also not a very good design from the viewpoint of algorithmic complexity. Whenever you want to check if a user already exists, or to retrieve a user, you need to read the whole file content. Then you need to iterate over the list of users comparing the username until you do (or do not) find the user you are looking for. This just screams for a hashmap/dictionary, with the username being the key and the user the value, instead of a list. You instantly get \$\mathcal{O}(1)\$ behavior instead of \$\mathcal{O}(N)\$.</p>

<p>At least theoretically, practically having to read the whole file still gives you \$\mathcal{O}(N)\$ behavior. Therefore I would normally consider making a database class, which just happens to store its data in JSON, keeping the dictionary in memory and only reading it upon "connecting" to the DB, but writing whenever a user is added.</p>

<p>That might be too much for those new users, though, and a bundle of functions can also work.</p>

<hr>

<p>If the user enters an invalid username or password in <code>user_login_menu</code>, the resulting <code>ValueError</code> is not caught. It should probably just return with an unsuccessful login in that case (and thereby not reveal anything about what requirements usernames and passwords need to fulfill).</p>

<p>Also </p>

<pre><code>menu = '\n'.join([
    '---',
    'User login',
    '---'
])
print(menu)
</code></pre>

<p>is arguably less readable than just doing</p>

<pre><code>print('---')
print('User login')
print('---')
</code></pre>
    </div>