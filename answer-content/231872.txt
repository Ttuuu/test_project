<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I noticed a few things briefly scanning your code. I'de be happy to share.</p>

<h2>Exception State</h2>

<p>Note the below snippet.</p>

<pre class="lang-java prettyprint-override"><code>ClosingFailedException exception = null;
for (Key&lt;?&gt; key : entries.keySet()) {
    try {
        closeInternal(key, true);
    } catch (ClosingFailedException e) {
        exception = e;
    }
}
if (exception != null) {
    throw exception;
}
</code></pre>

<p>I understand that you want to continue closing resources even if a resource failed to close, but currently as is, only the last failing resource to close will be thrown. It is possible that multiple resources could fail to close. Maybe it would be a good idea to maintain all closure failures, not just the last.</p>

<p>Also, the <code>CyclicDependencyException</code> could probably contain more information detailing which dependencies are cyclic. The current message is not very helpful to a consumer.</p>

<h2>Nested Classes</h2>

<p>I would definitely pull the exceptions and interfaces out side of this implementation. Especially if you decide to make use of more abstractions, such as a <code>ResourceManager</code> interface. This implementation will no longer be the only class having a dependency on all your cool classes. Also, might be a good idea to give your interfaces more descriptive names, especially if they become standalone files.</p>

<h2>Consistency</h2>

<p>Just to keep things consistent, the <code>Entry</code> class should have explicit access modifiers on fields, methods and constructors.</p>
    </div>