<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Let's condense this down. What you're trying to check is that for any given x, the y values you're told are all the same.</p>

<p>Now let's try to express this as succinctly as possible:</p>

<p>Let's start with a few simplifying assumptions. All your x and y values are going to be integers. Furthermore, let's assume we handle them as Tuples and not as Lists. This enables a somewhat cleaner signature for our types</p>

<p>We start with a list of points and in the end we want a boolean to drop out. Our type signature accordingly looks like this:</p>

<pre><code>isFunction :: [(Int, Int)] -&gt; Bool
</code></pre>

<p>This function can be decomposed into a few steps. First we need to group by the x values.</p>

<pre><code>isFunction points = -- we'll fill this in later
   where
   grouped = groupWith fst points -- fst accesses the first item in a tuple
</code></pre>

<p>now that we have all points grouped, we need to examine their y values</p>

<pre><code>   ys = map (map snd) grouped -- snd gets the second item in a tuple
</code></pre>

<p>And now we want to make sure that every group of y values is always the same value.
For this I'll use a bit of a hack</p>

<pre><code>   areEqual = map (\l -&gt; all (== (head l)) (tail l)) ys
</code></pre>

<p>What this does is a bit hard to grasp at first glance, but types will help us understand.</p>

<p>Let's fill back the types for all the stuff we had until now:</p>

<pre><code>grouped :: [[(Int, Int)]]  -- List of List of Points
ys :: [[Int]]  -- List of List of Integers
</code></pre>

<p>Now let's examine what this does in <code>areUnique</code>. We know that none of the lists in <code>ys</code> are empty. That's very useful for accessing the first element in the list and setting it as baseline for the rest of the list we're examining. All items in a single list (and accordingly belonging to a single x) must be pairwise equal. This explicitly means they must be equal to the first item.</p>

<p>That's how we can use <code>all (== (head l))</code>. That line could also be written as the following:</p>

<pre><code>   areEqual = map (\yGroup -&gt; all (== yGroup!!0) yGroup)
</code></pre>

<p>Now we have in <code>areUnique</code> a <code>[Bool]</code>, each of them indicating, whether the group is consistent.</p>

<p>That allows us to formulate the final result of <code>isFunction</code> we omitted above:</p>

<pre><code>isFunction points = all id areEqual
</code></pre>

<p>So now we have a pretty function that will do the work of your <code>is_func</code>, including all the work of <code>no_other_y</code>. We need to <code>import GHC.Exts</code> for it to work, because it provides <code>groupWith</code>. If you don't have GHC on your system, you will need to write a replacement, but that's probably a good exercise in itself. Only that much: sorting before grouping helps a <strong>lot</strong>.</p>

<p>A nice sideeffect of this is that we're reducing the time-complexity from <span class="math-container">\$\mathcal{O}(n^2)\$</span> to <span class="math-container">\$\mathcal{O}(n \log n)\$</span></p>

<hr>

<p>Now aside from this move away from list comprehension into a more explicit model that should additionally be quite a bit faster, there's not that many things to say about your code.</p>

<p>Granted, you largely ignore types (which is something that I personally do exactly the opposite of) and you're using python naming conventions, which only clashes with <code>readLn</code>, <code>getLine</code> and <code>replicateM_</code>.</p>

<p>This is what we got for now:</p>

<pre><code>import GHC.Exts  (groupWith) 

isFunction :: [(Int, Int)] -&gt; Bool
isFunction points = all id areEqual
   where
   grouped = groupWith fst points
   ys = map (map snd) grouped
   areEqual = map (\l -&gt; all (== l!!0) l) ys
</code></pre>

<p>Now let's get a bit fancier. We can inline a few of these definitions:</p>

<pre><code>areEqual = map (\l -&gt; all (== l!!0) l) (map (map snd) grouped)
</code></pre>

<p>notice the repeated use of <code>map</code>. We can get around that by using function composition <code>(.)</code>:</p>

<pre><code>areEqual = map ((\l -&gt; all (== l!!0) l) . (map snd)) grouped
</code></pre>

<p>interestingly it's not necessary to map to the y value alone. While semantically appropriate, the x values already should be the same. This allows us to drop the mapping:</p>

<pre><code>areEqual = map (\l -&gt; all (== l!!0) l) grouped
</code></pre>

<p>Now we can inline <code>grouped</code> to obtain (which uses <code>$</code>, the self closing parenthesis):</p>

<pre><code>areEqual = map (\l -&gt; all (== l!!0) l) $ groupWith (fst) points
</code></pre>

<p>And to top it off, this can be inlined into our <code>all</code>, which gets us to:</p>

<pre><code>isFunction points = all id $ (map (\l -&gt; all (== l!!0) l)) $ groupWith fst points
</code></pre>

<p>At this point we replace our fancy self-closing braces with function composition to obtain</p>

<pre><code>isFunction points = (all id) . (map (\l -&gt; all (== l!!0) l)) . (groupWith fst) points 
</code></pre>

<p>which can then be reduced to:</p>

<pre><code>isFunction = (all id) . (map (\l -&gt; all (== l!!0) l)) . (groupWith fst)
</code></pre>

<p>That in turn can be simplified to (hat tip to @Gurkenglas):</p>

<pre><code>isFunction = all (\l -&gt; all (== l!!0) l) . groupWith fst
</code></pre>
    </div>