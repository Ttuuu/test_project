<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your implementation is good and easy to understand.</p>

<p>When using <code>List&lt;Double&gt;</code> for input data, be sure to use an efficient implementation. Otherwise you could get really bad read performance. E.g., when you access elements by index, <code>ArrayList&lt;Double&gt;</code> will be much faster than <code>LinkedList&lt;Double&gt;</code> (<span class="math-container">\$O(n)\$</span> vs. <span class="math-container">\$O(n^2)\$</span> for your <code>getSpeedS</code>).</p>

<p>If you must support arbitrary types of <code>List&lt;Double&gt;</code> you would probably better off when you use <code>Iterator</code>s instead of element access by index.</p>

<p>If you use an <code>ArrayList</code> and know its final size in advance, always construct it with the capacity needed (<code>new ArrayList&lt;&gt;(size)</code>). This avoids reallocation and copying of the internal array that holds the elements while adding elements.</p>

<p>If you need maximum performance, then use arrays (<code>double[]</code>) instead of lists. For large data sets they can speed up the creation of the input in-memory objects by factors greater than two. Additionally they may give you a significant advantage in read performance due to better utilization of processor caches compared to list implementations.</p>
    </div>