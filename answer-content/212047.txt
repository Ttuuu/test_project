<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'm a bit late to the party, but I'll add my two cents nonetheless!</p>

<p>Your code is quite good, even if, as other reviewers pointed, you can still improve it marginally. But I also agree with other reviewers that you could have chosen a more modern, less C-like approach. I would defend one based on ranges, that needs a bit of scaffolding but could be used to solve many other binary-oriented code challenges.</p>

<p>If you don't know what ranges are, you could start <a href="https://arne-mertz.de/2017/01/ranges-stl-next-level/" rel="noreferrer">here</a> or google "Eric Niebler ranges". With ranges you can (among other things) combine <em>views</em> on a sequence of values; <em>views</em> modify the way you look at the sequence.</p>

<p>Making a number into a binary view of the said number is relatively straight-forward thanks to the <code>view_facade</code> class:</p>

<pre><code>class binary_view
  : public ranges::view_facade&lt;binary_view&gt; // magic here ...
{
    friend ranges::range_access; // ... and here
    int value = 0;

    // how you read the current element of the view
    int read() const { return value &amp; 1; } 

    // how you know you're at the end of the view
    bool equal(ranges::default_sentinel) const { return value == 0; } 

    // how you compare two positions in the view
    bool equal(const binary_view&amp; that) const { return value == that.value; } 

    // how you get to the next position in the view
    void next() { value &gt;&gt;= 1; } 

public:
    binary_view() = default;
    explicit binary_view(int value) : value(value) {}
};
</code></pre>

<p>Once you have this view that allows you to look at a number as a sequence of zeros and ones, you can use the operator <code>|</code> to combine it with other views . For instance, we can view the sequence of zeros and ones as a sequence of sequences of consecutive zeros or consecutives ones:</p>

<pre><code>auto zeros_and_ones       = binary_view(my_number);
auto split_zeros_and_ones = zeros_and_ones | group_by(std::equal_to&lt;&gt;());
</code></pre>

<p>We can then view those groups of consecutive ones or zeros as the number of zeros they contain:</p>

<pre><code>auto numbers_of_zeros = split_zeros_and_ones | transform([](auto&amp;&amp; group) { 
    return count(group, 0); 
});
</code></pre>

<p>Then we can simply request the maximum value out of that view with <code>max_element</code>:</p>

<pre><code>auto consecutive_zeros =
    binary_view(0b1001000) 
        | group_by(std::equal_to&lt;&gt;())
        | transform([](auto&amp;&amp; group) { return count(group, 0); });

auto largest_gap =  *max_element(consecutive_zeros);
</code></pre>

<p>Here's a link to the full code (with a slightly buffed-up <code>binary_view</code> allowing bidirectional traversal): <a href="https://wandbox.org/permlink/OVlg6aJP9DC1wkPR" rel="noreferrer">https://wandbox.org/permlink/OVlg6aJP9DC1wkPR</a></p>

<p>If you're skeptical about the benefit you can get from all this (after all, my solution is quite complicated compared to the original code), I suggest you visit <a href="https://ericniebler.github.io/range-v3/index.html#range-views" rel="noreferrer">this page</a> where you'll find all pre-defined <code>view</code>s and think about all the problems you could solve with a combination of them!</p>
    </div>