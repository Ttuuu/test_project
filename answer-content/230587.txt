<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Consider replacing the while loop with two for loops that increment lower and upper iterators till they have a suitable value - and only afterwards setting closest - it might be doing more operations but it is more cache friendly.</p>

<p>Or simply create a new map2 with only valid values (simply filtrate unwanted). </p>

<p>Though, different situation have different preferred solutions - there is a trade-off which solution is better depending on number of undesirable values in map2 and relative sizes of map1 and map2.</p>

<p>I don't think that you can improve it beyond that, lest you have some extra knowledge you haven't shared. In certain cases, you might want to implement some completely different solutions that are not reliant on map.</p>

<p>About the code itself, there are just a few minor issues:</p>

<ol>
<li>You don't take care of the case when <code>lower_bound</code> return an <code>end</code>, in this case program will crash or UB. Same problem inside the <code>while</code> scope.</li>
<li>There is no need to declare the four iterators outside the scope. Just declare them with <code>auto</code> when you instantiate them. Nobody cares to see <code>std::map&lt;int,float&gt;::iterator</code>.</li>
<li><p>replace setClosest with</p>

<pre><code>  template&lt;typename MapItr&gt;
  auto getClosestMapIterator(const MapItr &amp;upper, const MapItr &amp; lower, int key ) -&gt; const MapItr&amp; 
  {
     return abs( upper-&gt;first - key ) &lt; abs( lower-&gt;first - key ) ? upper : lower;
  }
</code></pre>

<p>and adjust usage <code>auto closest = getClosestMapIterator(upper, lower, key);</code> Also you better use <code>abs</code> instead of <code>fabs</code>, as <code>fabs</code> is for floating point types, so you unnecessarily cast integers to double with <code>fabs</code>.</p></li>
<li>Inside <code>while</code> the line <code>closest == upper ? upper++ : lower--;</code> is confusing. Simply write if scope. Don't use the expression <code>cond ? ret_on_true : ret_on_false</code> for side-effects, only when you want to get the return value.</li>
</ol>
    </div>