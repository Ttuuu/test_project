<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Below, I have tried to refactor your code with some inline comments about what and why, I have done it. The overall design and workflow is preserved, so it's in the detail, I have tried to improve and optimize:</p>
<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>var locations = [
  {id: 1, region: "Ismaning/München (Hauptsitz)", street: "Robert-Bürkle-Straße", streetnumber: "1", postcode: 85737, city: "Ismaning", latitude: 48.229035, longitude: 11.686153, xaxis: 524, yaxis: 854},
  {id: 2, region: "Berlin", street: "Wittestraße", streetnumber: "30", postcode: 13509, city: "Berlin", latitude: 52.580911, longitude: 13.293884, xaxis: 648, yaxis: 302},
  {id: 3, region: "Braunschweig", street: "Mittelweg", streetnumber: "7", postcode: 38106, city: "Braunschweig", latitude: 52.278748, longitude: 10.524797, xaxis: 434, yaxis: 341},
  {id: 4, region: "Bretten", street: "Edisonstraße", streetnumber: "2", postcode: 75015, city: "Bretten", latitude: 49.032767, longitude: 8.698372, xaxis: 276, yaxis: 747},
  {id: 5, region: "Chemnitz", street: "Zwickauer Straße", streetnumber: "16a", postcode: 9122, city: "Chemnitz", latitude: 50.829383, longitude: 12.914737, xaxis: 622, yaxis: 525}
];

// HH: I have moved these functions outside of haversineDistance
// in order to keep that function more clear
const RADIUS_OF_EARTH_IN_KM = 6371;
function toRadian(angle) { return Math.PI / 180.0 * angle; }
function distance(a, b) { return (Math.PI / 180) * (a - b); }

//Haversine formula: calulate distance between two locations
// HH: This function now takes two point objects as argument
// instead of two arrays/tuples (see also below)
function haversineDistance(ptA, ptB, isMiles = false) {
  const dLat = distance(ptB.lat, ptA.lat);
  const dLon = distance(ptB.lng, ptA.lng);
  const lat1 = toRadian(ptA.lat);
  const lat2 = toRadian(ptB.lat);

  //Haversine Formula
  const a = Math.pow(Math.sin(dLat / 2), 2) + Math.pow(Math.sin(dLon / 2), 2) * Math.cos(lat1) * Math.cos(lat2);
  const c = 2 * Math.asin(Math.sqrt(a));

  let finalDistance = RADIUS_OF_EARTH_IN_KM * c;
  if (isMiles) {
    finalDistance /= 1.60934;
  }
  return finalDistance;
};

// HH: Name the function after what it does - not after how it does it.
function findShortestPath(coordinates) {
  var route = {
    msg: '',
    distance: 0,
    route: [0]
  }

  // HH: Instead of having pairs of lat, lon an object representing a location/point/position is more readable
      function getPoint(index) {
        return {
          lat: coordinates[index].latitude,
          lng: coordinates[index].longitude
        };
      }



  var currentPoint = 0;
  // HH: You iterate over and over again a lot of indices that has already been handled.
  // Instead it would be more efficient to maintain a set of remaining indices
  let indices = Array.from({ length: coordinates.length - 1 }, (_, i) =&gt; i + 1); // we don't want 0 included as it is the first currentPoint

  while (indices.length &gt; 0) {
    var nearestNeighbor = {
      key: 0,
      distance: 0
    };

    let ptA = getPoint(currentPoint);
    for (let j of indices) {
      let ptB = getPoint(j);
      // HH: Because indices only contains not handled indices, you can omit guarding against current point and points in the route
      var currentDistance = haversineDistance(ptA, ptB, 0);
      if (nearestNeighbor.distance === 0 || nearestNeighbor.distance &gt; currentDistance) {
        nearestNeighbor.key = j;
        nearestNeighbor.distance = currentDistance;
      }
    }
    route.distance += nearestNeighbor.distance;
    route.route.push(nearestNeighbor.key);
    // HH: The nearest neighbor is removed from indices
    indices.splice(indices.indexOf(nearestNeighbor.key), 1);
    currentPoint = nearestNeighbor.key;
  }

  //return to start point
  ptA = getPoint(0);
  let ptB = getPoint(route.route[route.route.length - 1]);
  route.distance += haversineDistance(ptA, ptB, 0);

  route.route.push(0);
  route.distance = Math.round((route.distance + Number.EPSILON) * 100) / 100;
  route.msg = "Die kürzeste Strecke beträgt " + route.distance + " km";
  return route;
}

console.log(findShortestPath(locations));</code></pre>
</div>
</div>

    </div>