<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>In <code>def addColumn</code> you can extract bytes and then add them to <code>put</code>:</p>
<pre class="lang-scala prettyprint-override"><code>val bytes = value match {
  case v: String =&gt; Bytes.toBytes(v)
  case v: Long =&gt; Bytes.toBytes(v)
  case v: Boolean =&gt; Bytes.toBytes(v)
  case v: Array[String] =&gt; Bytes.toBytes(v.mkString(","))
}
put.addColumn(columnFamily, col, bytes) 
</code></pre>
<p>I'm not sure that Scala can check generic types in pattern matching, so <code>Array[String]</code> may be checked only for class <code>Array</code>. If it is than the compiler will warn you.</p>
<p>2nd, if you don't use result, you can use <code>foreach</code> instead of <code>map</code>.</p>
<p>3rd <code>value.mkString(",")</code> is <code>String</code> so value type is also <code>String</code>, not <code>Array[String]</code>. Of course you can simple declare <code>def addColumn(columnName: String, value: Any)</code>, or first create <code>sealed trait ColumnValue</code> and use <code>def addColumn(columnName: String, value: ColumnValue)</code>.</p>
<p>According to 3rd, you can use:</p>
<pre class="lang-scala prettyprint-override"><code>List("f1" -&gt; row.field1, ..., "f4" -&gt; row.field4).foreach {
  // you can use only 2nd case if you handle `Array` in `def addColumn`
  case (columnName, field: Array[_]) =&gt; addColumn(columnName, field.mkString(","))
  case (columnName, field) =&gt; addColumn(columnName, field)
}
</code></pre>
    </div>