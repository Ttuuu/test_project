<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>As other have said, an AES implementation should also be secured against <a href="https://cr.yp.to/antiforgery/cachetiming-20050414.pdf" rel="nofollow noreferrer">timing/cache attacks</a> and other fun side-channels.</p>

<p>And as explained in the linked crypto.SE QA, you should typically avoid all non-constant operations on secret data, and yet currently you're relying on table lookups as explained in BoppreH's answer, as anybody implementing AES from scratch would.<br>
But those are not <a href="https://www.bearssl.org/constanttime.html" rel="nofollow noreferrer">constant-time</a>. </p>

<p>I recommend you read <a href="https://www.bearssl.org/constanttime.html" rel="nofollow noreferrer">that link</a>, which talks about a constant time implementation of AES. As explained there, the usual way to obtain a constant-time AES implementation is to perform "bit-slicing". Bit-slicing implies working at the bit level, with bitwise operations that are directly constant-time and to basically build an "AES" boolean circuit and translate it into C(++) code.<br>
Yet, this is not the only way, since the table is just a <a href="https://en.wikipedia.org/wiki/Memoization" rel="nofollow noreferrer">memoized function</a> in the end, you could also compute the function explicitly at each iteration, if you do not care much about performances.</p>

<p>Finally you might be asking yourself why it is always a bad idea to roll your own crypto and to publish it on the net, that is mostly because you'll end up with other people able to take your implementation to do their stuff without caring about the security implications...<br>
For example, the Matrix's OLM library is relying on a non constant time <a href="https://git.matrix.org/git/olm/tree/lib/crypto-algorithms/aes.c" rel="nofollow noreferrer">AES implementation</a>, even if its creator, Brad Conte, actually <a href="https://github.com/B-Con/crypto-algorithms/blob/master/README.md" rel="nofollow noreferrer">said about it</a> that: </p>

<blockquote>
  <p>"Note that these are not cryptographically secure implementations."</p>
</blockquote>
    </div>