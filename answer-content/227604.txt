<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong><em>Laziness is a programmer virtue.</em></strong></p>

<p>These folks are spending more time on theory than doing it the lazy way would take in practice.</p>

<p>The big problem here is you're doing a bunch of unnecessary work, particularly around storage.</p>

<p>You're constantly appending to arrays for no apparent reason.  You don't need the history of old numbers.  Throw them away.  Appending to arrays is <em>expensive</em> - it often has to reallocate the whole range into a new array then copy from the old one.</p>

<p>The question is "find the first 3 that's also a 5 and a 6."</p>

<p>Notice that you can rearrange those with no impact.   That's the same question as "find the first 5 that's also a 3 and a 6," because they all go straight upwards, meaning the first of any will be the first of all.</p>

<p>Fine. You don't need to track anything.  Iterate one of the columns.  At each three, ask "is this one of the others?"  If it is, ask "is this also the other other?"  If it is, return success; otherwise keep marching.</p>

<p>So really, what you need is an efficient way to be able to ask "is this a foo-angular number?"</p>

<p>Right now you're doing that by building and searching a table.  That's silly.  Just reverse the math on the two "is it also" columns.</p>

<p>Almost all of this work can go.</p>

<p>Triangular and hexagonal are easy to reverse, so pentagonal is the one I'll keep in the original direction.</p>

<p>if triangular is "triangular x is (x * (x+1)) / 2," </p>

<p>then in math, you have "n = x(x+1)/2".  </p>

<p>solve for n, you get "x^2 + x - 2n = 0", or "x = (sqrt(1 + 8n) - 1)/2"</p>

<p>Therefore,</p>

<pre><code>const triangle_from = x =&gt; (Math.sqrt(1+(x*8))-1)/2;

function is_triangular(x) {
  const pip = triangle_from(x);
  return pip == Math.floor(pip);
}
</code></pre>

<p>Now, you can actually throw that away; Euler is playing a trick on you, and I'm abusing that to show you how to do the work without actually doing it for you.</p>

<p>Why?</p>

<p>Because every hexagonal number is also a triangular number.  By the time you've tested if it's hexagonal, that it's triangular is already in the bag.  You can just skip that wholesale, as such.</p>

<p>You can retain the pentagonal in its existing notation, since we're using it to drive the bus.  Also, TEST YOUR FUCKING CODE.  I got this wrong because of order of operations differences between math and JS the first time.  Just run it on 165 and see if it matches the problem description.</p>

<pre><code>const to_pentagon = x =&gt; (x * ((3 * x)-1)) / 2;
</code></pre>

<p>Then it's just</p>

<pre><code>function find_triple(cursor = 165, bail = 1000000) { // question says "after 40755," which is pentagonal #165
  while (true) {
    if (from_start &gt;= bail) { throw new RangeException("exceeded safety cap"); }
    const current = to_pentagon(cursor);
    if (is_hexagonal(current)) { return cursor; }  
    ++cursor;
  }
}
</code></pre>

<p>Which, if you're feeling tricky, you could write as</p>

<pre><code>function find_triple(cursor = 165, bail = 1000000) { // question says "after 40755," which is pentagonal #165
  while (true) {
    if (from_start &gt;= bail) { throw new RangeException("exceeded safety cap"); }
    if (is_hexagonal(to_pentagon(cursor++))) { return --cursor; }  
  }
}
</code></pre>
    </div>