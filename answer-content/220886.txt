<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Performance</h2>

<p>Your code tests against all possible hand result kinds. Is this useful or could you abort whenever you get a match? Is performance an actual requirement anway?</p>

<blockquote>
<pre><code> public HandResult GetHandResult(int playerID)
    {
        IEnumerable&lt;Card&gt; set = GetPlayerSet(playerID).OrderBy(x =&gt; x.Face);
        return new[] { 
            GetRoyalFlush(set), GetStraightFlush(set), GetFourOfAKind(set),
            GetFullHouse(set), GetFlush(set), GetStraight(set), GetThreeOfAKind(set), 
            GetTwoPair(set), GetOnePair(set), GetHighCard(set) }
        .First(x =&gt; x != null);
    }
</code></pre>
</blockquote>

<p>A faster alternative is to use the <a href="https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/operators/null-coalescing-operator" rel="nofollow noreferrer">Null-collation</a>.</p>

<pre><code> public HandResult GetHandResult(int playerID)
    {
        var set = GetPlayerSet(playerID).OrderBy(x =&gt; x.Face);
        return GetRoyalFlush(set) ?? GetStraightFlush(set) ?? ..
    }
</code></pre>

<hr>

<h2>Formatting</h2>

<p>It is generally considered best practice use <code>var</code> whenever you can.</p>

<blockquote>
<pre><code>private HandResult GetFullHouse(IEnumerable&lt;Card&gt; set)
{
    HandResult threeOfAKind = GetThreeOfAKind(set);
    ..
}
</code></pre>
</blockquote>

<pre><code>private HandResult GetFullHouse(IEnumerable&lt;Card&gt; set)
{
    var threeOfAKind = GetThreeOfAKind(set);
    ..
}
</code></pre>

<hr>

<h2>Other</h2>

<p><em>Not really worth elaborating upon, since I feel you made a little test case, and aren't using this code for a full API.</em></p>

<ul>
<li><code>Deck</code> has too much responsibility. I would probably opt for more OO-design. Have classes as <code>Player</code> and <code>Hand</code>. Your Hand-enum could by renamed to <code>HandKind</code>.  </li>
<li>I would refactor out any <code>Console.Write</code> and have a seperate subdomain for rendering stuff. </li>
</ul>
    </div>