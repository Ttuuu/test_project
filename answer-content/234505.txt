<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The first thing I would like to do is applaud you for not immediately turning to back-to-back if statements. It's a trap I commonly see when tackling these kinds of problems. However, in this case, I'd ask a question that is counter to my previous point: are your options mutually exclusive? In other words, is it a problem if a person has multiple options in a loop accepted? Given you are accepting inputs like 31 or 12, my expectation is no. As such, instead of:</p>

<pre class="lang-py prettyprint-override"><code>if my_fruits == str(1) or my_fruits == "apple":
    fruits_ls.append("Apple")
elif my_fruits == str(2) or my_fruits == "orange":
    fruits_ls.append("Orange")
elif my_fruits == str(3) or my_fruits == "kiwi":
    fruits_ls.append("Kiwi")
elif my_fruits == str(12) or my_fruits == "appleorange" or my_fruits == str(21) or my_fruits == "orangeapple":
    fruits_ls.append("Apple")
    fruits_ls.append("Orange")

elif my_fruits == str(13) or my_fruits == "applekiwi" or my_fruits == str(31) or my_fruits == "kiwiapple":
    fruits_ls.append("Apple")
    fruits_ls.append("Kiwi")

elif my_fruits == str(23) or my_fruits == "orangekiwi" or my_fruits == str(32) or my_fruits == "kiwiorange":
    fruits_ls.append("Orange")
    fruits_ls.append("Kiwi")

elif my_fruits == str(4) or my_fruits == "exit":
    break
</code></pre>

<p>A possibility would be checking if an instance of an option is inside the input:</p>

<pre class="lang-py prettyprint-override"><code>if '1' in my_fruits or 'apple' in my_fruits:
    fruits_ls.append('Apple')
if '2' in my_fruits or 'orange' in my_fruits:
    fruits_ls.append('Orange')
if '3' in my_fruits or 'kiwi' in my_fruits:
    fruits_ls.append('Kiwi')
if '4' == my_fruits:
    break
</code></pre>

<p>There are some small problems with the above solution that may or may not be in scope. For example, "121" will only give "AppleOrange" when "AppleOrangeApple" may be desired. I can provide further insight if this is the case. </p>

<p>Hopefully this helps. Assuming the need for elifs is always a safe bet at first, but when refactoring code, elifs can be ditched if the answers can coexist without hindering the code's performance. Let me know if I can help further.</p>
    </div>