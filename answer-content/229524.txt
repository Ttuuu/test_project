<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I agree with @Reinderien that this shouldn't be a class. You can see evidence for this in your constructor:</p>

<pre><code>def __init__(self, input_list:list)-&gt;list:
    self.input_list = input_list
    self.__iter__()
</code></pre>

<p>You are constructing the object (and calling the constructor) simply to call <code>self.__iter__()</code>. There is no reason for the creation of an object here just to sort the list. If you needed to maintain some state between sorts or something (I'm not sure why you would though), then it <em>may</em> be appropriate.</p>

<p>I'll also point out, you're attempting to violate at least two "contracts" with your usage of <code>__init__</code> and <code>__iter__</code>:</p>

<ul>
<li><p><a href="https://docs.python.org/3/reference/datamodel.html#object.__init__" rel="nofollow noreferrer"><code>__init__</code> must return None</a>:</p>

<blockquote>
  <p>no non-None value may be returned by <code>__init__()</code>; doing so will cause a TypeError to be raised at runtime.</p>
</blockquote>

<p>Now, you aren't <em>actually</em> returning anything, but your type hinting is saying that you are. If you're going to use type hinting, the hints should make it clearer what types are involved, not make false claims.</p></li>
<li><p><a href="https://docs.python.org/3/reference/datamodel.html#object.__iter__" rel="nofollow noreferrer"><code>__iter__</code> should return an iterator</a>:</p>

<blockquote>
  <p>This method should return a new iterator object that can iterate over all the objects in the container</p>
</blockquote>

<p>The problem is, you're returning a list, and a list isn't an <strong>iterator</strong>, it's an <strong>iterable</strong> (it <em>has</em> an iterator). This isn't just a theoretical problem. Note how this can bite you:</p>

<pre><code>class T:
    def __iter__(self):
        return [1, 2, 3]

for n in T():
    print(n)

# TypeError: iter() returned non-iterator of type 'list'
</code></pre></li>
</ul>

<p>Use of "dunder" methods can be helpful for writing clean code, but only if you aren't abusing them. Make sure to read the documentation and understand the purpose and contracts of methods before attempting to use them.</p>

<hr>

<p>And on the subject of type hints, you could make use of a <code>TypeVar</code> to allow the type checker to see the consistency between the element types going in and out of your sorting function. After making your class into a standalone function, you basically have:</p>

<pre><code>def selection_sort(input_list: list) -&gt; list:
</code></pre>

<p>The problem with this is, it doesn't tell the checker what the relationship is between the types of elements in <code>input_list</code> and that of the list that <code>selection_sort</code> returns. This can lead to subtle issues where it won't be able to help you with types:</p>

<pre><code>lst: List[int] = [1, 2, 3]
sorted_list = selection_sort(input_list)
x = sorted_list[0]  # It has no idea what type x is
</code></pre>

<p>You can fix this by introducing a <code>TypeVar</code> that tells it that the element type remains consistent. I'm also changing from using <code>list</code> to <code>List</code> since <code>list</code> doesn't seem to support generics yet:</p>

<pre><code>from typing import List, TypeVar

T = TypeVar("T")

# The sort returns the same element type T that it received
def selection_sort(input_list: List[T]) -&gt; List[T]:
    . . .
</code></pre>

<p>Now, it is able to infer the type of <code>x</code>, and can give you better completions and type warnings.</p>
    </div>