<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>A few quick points that came to my mind when looking at your code:</p>

<h1>Documentation</h1>

<p>Your code has no documentation whatsoever. Python has so called <a href="https://www.python.org/dev/peps/pep-0257/" rel="nofollow noreferrer">documentation strings</a>, which are basically <code>"""triple quoted text blocks"""</code> immediately following <code>def whatever(...)</code>. Example:</p>

<pre class="lang-py prettyprint-override"><code>def print_tree(self):
    """Print the content of the tree

    This method performs an in-order traversal of the tree
    """
    # ... your code here
</code></pre>

<p>Since your question title indicates that you're working with Python 3, also consider using <a href="https://docs.python.org/3/library/typing.html" rel="nofollow noreferrer">type hints</a> to document your code.</p>

<h1>Naming</h1>

<p>There is the infamous <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">Style Guide for Python Code</a> (aka PEP 8) which recommends to use <code>lower_case_with_underscores</code> for variable names and (member) functions. You do this for <code>print_tree</code>, but use <code>camelCase</code> for the other member functions.</p>

<h1>Searching the tree</h1>

<p>Your <code>getSearchValue</code> function is a little bit awkward in that it always returns <code>None</code>. Although your code promises to "get" the value, you instead print it to the console (together with the string <code>"True"</code>) and return the return value of <code>print</code> which is <code>None</code> (aka no return value in that case). Your function also only returns something (other than the implicit <code>None</code>) if the value was found. In my opinion something like </p>

<pre><code>def has_value(self, data):
    """Return True or False indicating whether the value is in the BST"""
    if data == self.data:
        return True
    if data &lt; self.data:
        if self.left is not None:
            return self.left.has_value(data)   
    if data &gt; self.data:
        if self.right is not None:
            return self.right.has_value(data)
    return False
</code></pre>

<p>would be a more appropriate approach. As you can see, this function returns an appropriate bool value to signal the result. </p>

<p>Another minor tweak: this implementation uses <code>if ... is not None:</code> to explicitly check for <code>None</code> as signaling value. <a href="https://www.python.org/dev/peps/pep-0008/#programming-recommendations" rel="nofollow noreferrer">Since <code>None</code> is a singleton in Python, you should always use <code>is (not)</code> to check for equality.</a></p>

<h1>Unnecessary parentheses</h1>

<p>The parentheses around the condition in <code>while(current.left is not None):</code> are not needed. <code>while</code> works the same way as <code>if</code> in that regard. They are sometimes used for longer conditions that span multiple lines, since Python does implicit line joining in that case.</p>

<hr>

<p>I'm also not fully convinced about your <code>delValue</code> function, but unfortunately I'm a little bit short on time at the moment.</p>
    </div>