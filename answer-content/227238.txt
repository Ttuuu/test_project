<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>For <code>quote-word-count</code>, there's a few things to note.</p>

<p>I think this is a good use of <code>-&gt;&gt;</code>. Personally, I would have started the threading with <code>(range quote-count)</code> instead of splitting that though. From my experience, needlessly elongating the thread call just hurts readability. I also recommend maintaining the same type of object being threaded all the way down. I find it makes the thread much easier to understand. If you're threading collections like you are here, I'd prefer that every object being threaded is a collection (whereas <code>quote-count</code> is a number).</p>

<p>It isn't a good idea to use <code>map</code> to run side effects (like starting a <code>future</code> task). <code>map</code> doesn't run its effect immediately, so the futures aren't started when <code>(map (fn [_] (fetch-quote)))</code> runs, they're started when the <code>pmap</code> begins requesting elements. I'd switch to <code>mapv</code> which is strict, so the future's are started right away.</p>

<p>I don't think that <code>map</code>ping a <code>range</code> is the right approach here though; which is hinted at by your use of a wrapper <code>(fn [_])</code> function. <a href="https://clojuredocs.org/clojure.core/repeatedly" rel="nofollow noreferrer"><code>repeatedly</code></a> would be a better candidate for this situation. It's lazy though, so I'd probably add a call to <code>vec</code> after it to realize it right away.</p>

<hr>

<p>Your <code>zero</code> is actually unnecessary. <a href="https://clojuredocs.org/clojure.core/fnil" rel="nofollow noreferrer"><code>fnil</code></a> can be used here instead:</p>

<pre><code>(update word-counts word (fnil inc 0)))
</code></pre>

<hr>

<p>I wouldn't have parameters called <code>quote</code> ideally. <code>quote</code> is a rather important built-in, and it's a good idea to avoid shadowing built-ins.</p>

<hr>

<p>I'd probably use <code>-&gt;&gt;</code> in <code>count-words</code>:</p>

<pre><code>(defn count-words
  [quote]
  (let [cleaned-quote (clean-input quote)]
    (-&gt;&gt; (clojure.string/split cleaned-quote #" ")
         (reduce update-word {}))))
</code></pre>

<p>I personally find that to be much more readable than the nested version.</p>

<p>I'll note too that Clojure has the built-in <a href="https://clojuredocs.org/clojure.core/frequencies" rel="nofollow noreferrer"><code>frequencies</code></a> that can do the work here:</p>

<pre><code>(defn count-words
  [quote]
  (let [cleaned-quote (clean-input quote)]
    (-&gt;&gt; (clojure.string/split cleaned-quote #" ")
         (frequencies))))
</code></pre>

<hr>

<p>In <code>clean-input</code>, I wouldn't use <code>comp</code>. I think it would be much neater using <code>-&gt;</code>:</p>

<pre><code>(defn clean-input
  [input]
  (-&gt;&gt; input
       (clojure.string/lower-case)
       (remove-author)
       (remove-commas)))
</code></pre>

<p>I really only like <code>comp</code> when it's being passed to another function. Writing out <code>((comp g f) x)</code> just seems like an overly complicated way of applying <code>x</code> to <code>f</code> then <code>g</code>.</p>

<hr>

<p>Your functions are in reverse order for some reason. I'm not sure where you're running this that's allowing for functions to be used before they're declared.</p>

<hr>

<p>Personally, I like having the parameter vector on the first line unless I have a doc string. I find the functions look noisy otherwise.</p>

<hr>

<p>You're writing <code>clojure.string/</code> a fair amount. You may want to <code>require</code> that module to avoid verbose, qualified function calls. While you're at it, you might as well add a <a href="https://clojuredocs.org/clojure.core/ns" rel="nofollow noreferrer"><code>ns</code></a> macro call, since each file should really have one anyways:</p>

<pre><code>(ns your.file.path.here
  (:require [clojure.string :as s]))
</code></pre>

<p>Now, <code>clojure.string/split</code> can be written as <code>s/split</code>.</p>

<hr>

<p>And for 3.:</p>

<blockquote>
  <p>The function will take the number of quotes to download as an argument and return the <strong>atomâ€™s final value</strong>.</p>
</blockquote>

<p>It wants you to return the value of the atom, not the atom itself. They want you to update an atom inside the futures; although I don't think that's necessary, or even preferable.</p>

<hr>

<hr>

<p>Here's the final code I ended up with:</p>

<pre><code>(ns your.file.path.here
  (:require [clojure.string :as s]))

(defn remove-author [quote]
  (s/replace quote #".\n-- .*\n" ""))

(defn remove-commas [quote]
  (s/replace quote #"," ""))

(defn clean-input [input]
  (-&gt;&gt; input
       (s/lower-case)
       (remove-author)
       (remove-commas)))

(defn count-words [quote]
  (let [cleaned-quote (clean-input quote)]
    (-&gt;&gt; (s/split cleaned-quote #" ")
         (frequencies))))

(defn fetch-quote []
  (future (slurp "https://www.braveclojure.com/random-quote")))

(defn quote-word-count [quote-count]
  (-&gt;&gt; (repeatedly quote-count fetch-quote)
       (vec)  ; To ensure futures start before pmap begins processing chunks
       (pmap (comp count-words deref))
       (apply merge-with +)))
</code></pre>
    </div>