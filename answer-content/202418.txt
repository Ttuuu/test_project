<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'm not sure if it was intentional but it appears that for the most part <a href="https://www.php-fig.org/psr/psr-2/" rel="nofollow noreferrer">PSR-2</a> is being followed, except that in <code>save()</code> the opening braces for the control structures are on the next line for the <code>if</code> statements but on the same line for the <code>else</code> statement.</p>

<blockquote>
<pre><code>if (!empty($object-&gt;id))
{
    ...
} else {
</code></pre>
</blockquote>

<p>And similarly for the <code>foreach</code>.</p>

<p>Perhaps it feels like the code is self-documenting enough but it wouldnâ€™t hurt to add docblocks above each class and method...</p>

<hr>

<p>The code within <code>save()</code> to generate the <code>UPDATE</code> statement generates the variable <code>set</code> with the following lines:</p>

<blockquote>
<pre><code>$set = '';
foreach($properties as $name =&gt; $value)
{
    $set .= $this-&gt;escapeIdent($name) . " = ?,";
}
$set = substr($set, 0, -1); 
</code></pre>
</blockquote>

<p>Whenever I see code like the last line to remove the last comma, it makes me cringe. Instead of appending to a string the loop could push values into an array and then join them with <code>join()</code>:</p>

<pre><code>$set = [];
foreach($properties as $name =&gt; $value)
{
    $set[] = $this-&gt;escapeIdent($name) . " = ?";
}
$fieldsToSet = join(',', $set);
</code></pre>

<p>While it may require slightly more computational power, a functional approach could be used and would require three less lines of code:</p>

<pre><code>$set = implode(',', array_map(function($name) {
    return $this-&gt;escapeIdent($name) . " = ?";
}, array_keys($properties)));
</code></pre>

<p>And I noticed that if <code>id</code> is set, that will be included in the list of fields to set - while it likely won't lead to changing the value, it may be wise to remove that from the list of fields to set.</p>

<p>And when getting the list of fields to set - a functional approach makes it a single liner, since nothing needs to be appended to each value returned from the method call:</p>

<pre><code>$names = implode(',', array_map([$this, 'escapeIdent'], array_keys($properties)));
</code></pre>

<p>That takes a block of 6 lines down to 1! Combined with the change to generate <code>$set</code> this could be a reduction of 9 lines... could allow for expansion of your code and keeping it under 100 lines.</p>

<p>One could argue that <code>$names</code> could be better named - e.g. <code>$fieldsToSet</code>, <code>$setFields</code>, etc.</p>
    </div>