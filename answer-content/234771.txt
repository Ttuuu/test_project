<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Anytime you give up a lock you have to assume another thread could jump in</p>

<pre><code>   public static string ReadLine(int maxLength = 0)
    {
        lock (_lockObject)
        {
            if (_isReading)
                throw new InvalidOperationException("Some thread is already reading.");

            _isReading = true;
            _bufferCursorPos = 0;
            Console.Write(_prompt);
        }

        while (true)
        {
            ConsoleKeyInfo keyInfo = Console.ReadKey(true);
            lock (_lockObject)
            {
</code></pre>

<p>in ReadLine the lock is given up after setting the isReading and in the loop it give it up as well each loop.  Now WriteLine could come in and write since the lock object isn't locked.  I don't know if that's your intent or not.</p>

<p>Also I think throwing an exception would make using this harder than it should be.  The calling code will need to now to do a try/catch to around all calls.  I would suggest following some other patterns in .net by doing a TryWrite or TryRead and instead of throwing return back false if it can't do the method.  Or you could even use a TaskCompletionSource and return back a Task and implement a queue for reading and writing and complete the task when the operation is complete.  </p>

<p>Also properties like IsReading and Prompt have little to no value when talking multi-threading as the caller you don't know if another thread has changed that value once you read the value.  </p>
    </div>