<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Regarding the desire to make an implementation of the <code>$q</code> service, it is useful to consider that angular's <code>$q</code> is a stripped down version of the excellent promise library <a href="https://github.com/kriskowal/q" rel="nofollow noreferrer"><code>q</code> by, kriskowal</a> which you can leverage independently of angular. You can also achieve it through other promise implementations such as bluebird and with native ES2015 promises where available.</p>

<p>As for the implementation itself, I strongly recommend removing the <code>serialOrParallel</code> and doing one of the following.</p>

<ol>
<li><p>Turn you function into an object which exposes a parallel and a sequential property. Ex: </p>

<pre><code>var forEach = { 
    parallel: function () {...},
    sequential: function() {...}
} 
</code></pre></li>
<li><p>Create 2 separate functions, one that traverses sequentially and one that traverses in parallel.</p></li>
</ol>

<p>The reasoning behind this is that it makes the code clearer, removes the need for an exception, and makes it easier for consumers to do the right thing.</p>

<p>As @Roamer-1888 noted, In the serial case, it should be possible to construct returnValues in its entirety in the forEach loop without post-processing it.</p>
    </div>