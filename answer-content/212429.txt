<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>For anyone curious, here's my code with the comments taken on board:</p>

<h2>Header</h2>

<pre><code>#ifndef __TYPE_LIST_H__
#define __TYPE_LIST_H__

/*  Generic list implementation for holding a set of pointers to a type
    (has to be consistently handled by the element_match and element_delete 
    functions)
*/

typedef struct sdlui_list_s sdlui_list_t;

#include &lt;stdbool.h&gt;
#include &lt;stdint.h&gt;

sdlui_list_t* sdlui_list_create(
    uint32_t initial_capacity,
    bool     (*element_match )(const void* a, const void* b),
    void     (*element_delete)(void* element));

void sdlui_list_delete(sdlui_list_t* list);

bool     sdlui_list_append     (sdlui_list_t* list, void* element);
bool     sdlui_list_pop_back   (sdlui_list_t* list, void* ret);
bool     sdlui_list_get        (sdlui_list_t* list, uint32_t index, void* ret);
bool     sdlui_list_remove     (sdlui_list_t* list, void* element);
bool     sdlui_list_remove_at  (sdlui_list_t* list, uint32_t index);
void     sdlui_list_shift      (sdlui_list_t* list, int64_t start_index);
int64_t  sdlui_list_index      (sdlui_list_t* list, void* element);
int64_t  sdlui_list_index_from (sdlui_list_t* list, void* element,
                                                                int64_t start_index);
bool     sdlui_list_contains   (sdlui_list_t* list, void* element);
bool     sdlui_list_empty      (sdlui_list_t* list);
uint32_t sdlui_list_length     (sdlui_list_t* list);

#endif
</code></pre>

<h2>Source</h2>

<pre><code>#include &lt;errno.h&gt;
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;

#include &lt;type/list.h&gt;

struct sdlui_list_s
{
    uint32_t length;
    uint32_t capacity;
    void**   elements;
    bool     (*element_match )(const void* a, const void* b);
    void     (*element_delete)(void* element);
};

sdlui_list_t* sdlui_list_create(
    uint32_t initial_capacity,
    bool     (*element_match )(const void* a, const void* b),
    void     (*element_delete)(void* element))
{
    sdlui_list_t* list;

    if (!element_delete || !initial_capacity) {
        errno = EDOM;
        return NULL;
    }
    list = (sdlui_list_t*) malloc(sizeof(sdlui_list_t));
    if (!list) return NULL;

    list-&gt;length         = 0;
    list-&gt;capacity       = initial_capacity;
    list-&gt;element_match  = element_match;
    list-&gt;element_delete = element_delete;

    list-&gt;elements = (void**) malloc(sizeof(list-&gt;elements[0]) * initial_capacity);
    if (!list-&gt;elements) {
        sdlui_list_delete(list);
        return NULL;
    }
    return list;
}

void sdlui_list_delete(sdlui_list_t* list)
{
    unsigned i;
    for (i = 0; i&lt; list-&gt;length; i++) {
        list-&gt;element_delete(list-&gt;elements[i]);
    }
    free(list-&gt;elements);
    free(list);
}

bool sdlui_list_append(sdlui_list_t* list, void* element)
{
    if (!list)
        return false;
    if (list-&gt;length &gt;= list-&gt;capacity) {
        // expand the elements array
        list-&gt;capacity *= 2;
        list-&gt;elements = realloc(list-&gt;elements, sizeof(void*) * list-&gt;capacity);
        if (!list-&gt;elements) {
            return false;
        }
    }
    list-&gt;elements[list-&gt;length++] = element;
    return true;
}

bool sdlui_list_get(sdlui_list_t* list, uint32_t index, void* ret) {
    if (!list || index &gt; list-&gt;length) {
        return false;
    }
    ret = list-&gt;elements[index];
    return true;
}

bool sdlui_list_pop_back(sdlui_list_t* list, void* ret)
{
    if (!list || sdlui_list_empty(list)) {
        return false;
    }
    ret = list-&gt;elements[list-&gt;length];
    list-&gt;elements[list-&gt;length] = NULL;
    list-&gt;length--;
    return true;
}

bool sdlui_list_remove(sdlui_list_t* list, void* element)
{
    int64_t i = sdlui_list_index(list, element);

    if (i == -1) {
        return false;
    }

    sdlui_list_shift(list, i);
    list-&gt;length--;
    return true;
}

bool sdlui_list_remove_at(sdlui_list_t* list, uint32_t index)
{
    if (list-&gt;length == 0) {
        return false;
    }
    sdlui_list_shift(list, index);
    list-&gt;length--;
    return true;
}

void sdlui_list_shift(sdlui_list_t* list, int64_t start_index)
{
    while ((uint32_t)start_index &lt; list-&gt;length - 1) {
        list-&gt;elements[start_index] = list-&gt;elements[start_index+1];
        start_index++;
    }
}

int64_t sdlui_list_index(sdlui_list_t* list, void* element)
{
    return sdlui_list_index_from(list, element, 0);
}

int64_t  sdlui_list_index_from (sdlui_list_t* list, void* element,
                                                                int64_t start_index)
{
    if (!list-&gt;element_match || list-&gt;length &lt; (uint32_t) start_index) {
        /* No way to compare */
        return -1;
    }
    uint32_t i;
    for (i = start_index; i &lt; list-&gt;length; i++) {
        if (list-&gt;element_match(list-&gt;elements[i], element)) {
            return i;
        }
    }
    return -1;
}


bool sdlui_list_contains(sdlui_list_t* list, void* element) {
    return (sdlui_list_index(list, element) != -1);
}

bool sdlui_list_empty(sdlui_list_t* list)
{
    if (!list) {
        return false;
    }
    else {
        return (list-&gt;length == 0);
    }
}

uint32_t sdlui_list_length(sdlui_list_t* list) {
    return list-&gt;length;
}
</code></pre>
    </div>