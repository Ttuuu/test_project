<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Not a bug, but incorrect</h2>
<ul>
<li>You have the average calculations inside the for loop. That means you calculate the average 3 time, 2 times too many.</li>
</ul>
<h2>Improvements</h2>
<ul>
<li><p>Use <code>querySelectorAll</code> and a <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors" rel="nofollow noreferrer">CSS selector</a> string, Its flexible and you avoid the long winded combination of queries.</p>
</li>
<li><p>You can avoid the extra id for the outputs using the query <code>"#subject &gt; output"</code></p>
</li>
<li><p>Use <code>for of</code> to iterate the query, saves you having to index into the array.</p>
</li>
<li><p>Round the results <code>Math.round</code> or use <code>toFixed</code> to set the number of decimal points . Floating point numbers can add tiny amounts that make numbers look bad.</p>
</li>
<li><p>Rather than hard code the <code>calculations</code> a function can be created that takes the subject name and then does the summing and average.</p>
</li>
<li><p>Good UI design means preventing bad input using constraints. The input type number lets you set the min and max constraints values</p>
<p>As the other answer suggested that the number input type be avoided due to accidental scrolling. Do not buy into that argument. Input type number is the correct type to use, and note that the wheel only has effect when the input is focused.</p>
</li>
</ul>
<p><sup><strong>Note</strong> this answer assumes you are targeting ES6+ and HTML5 compliant browsers</sup></p>
<h2>Example</h2>
<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>const subjects = ["physics", "history"];
document.querySelector("button")
    .addEventListener("click",() =&gt; subjects.forEach(calcResults));

function calcResults(subject) {
    const tests = document.querySelectorAll(`#${subject} &gt; input`);
    const ave = document.querySelector(`#${subject} &gt; output`);
    var sum = 0, count = 0;
    for (const {value} of tests) {
        if (value !== "") { 
            sum += Number(value);
            count += 1;
        }
    }
    ave.value = count === 0 ? "No assessment." : (sum / count).toFixed(2);
}</code></pre>
<pre class="snippet-code-html lang-html prettyprint-override"><code>&lt;form&gt;
&lt;p id="physics"&gt;
    Physics:
    &lt;input type="number" min="0" max="100"/&gt;
    &lt;input type="number" min="0" max="100"/&gt;
    &lt;input type="number" min="0" max="100"/&gt;
    &lt;output/&gt;
&lt;/p&gt;
&lt;p id="history"&gt;
    History:
    &lt;input type="number" min="0" max="100"/&gt;
    &lt;input type="number" min="0" max="100"/&gt;
    &lt;input type="number" min="0" max="100"/&gt;
    &lt;output/&gt;
&lt;/p&gt;
&lt;button type="button"&gt;Calculate&lt;/button&gt;
&lt;/form&gt;</code></pre>
</div>
</div>

<h2>Extras</h2>
<p>I am guessing that the two subjects are but an example and that there may be more. JavaScript makes it easy to extend repeated content.</p>
<p>The following example creates the UI from a simple <code>settings</code> object. To reduce the amount of typing 3 helper functions provide a shorthand for common DOM calls, <code>tag</code> creates tag and sets its properties, <code>query</code> does <code>querySelectAll</code> on <code>document</code>, and <code>append</code>, append siblings to parent element</p>
<p></p><div class="snippet" data-lang="js" data-hide="true" data-console="true" data-babel="false">
<div class="snippet-code snippet-currently-hidden">
<pre class="snippet-code-js lang-js prettyprint-override"><code>settings = {
    subjects : ["Physics", "History", "English", "Biology"],
    numberOfGrades : 3,
    numberInput : {type: "number", min: "0", max: "100"},
}
const tag = (name, prop = {}) =&gt; Object.assign(document.createElement(name), prop);
const query = query =&gt;  document.querySelectorAll(query);
const append = (parent, ...sibs) =&gt; {
    for (const sib of sibs) { parent.appendChild(sib) }
    return parent;    
}

addEventListener("load", () =&gt; {
    const form = query("form")[0];
    settings.subjects.forEach(subject =&gt; {
        var count = settings.numberOfGrades;
        const inputs = [];
        while (count--) { inputs.push(tag("Input", settings.numberInput)) }
        append(
            form,
            append(
                tag("p", {textContent: subject + ": ", id: subject}),
                ...inputs,
                tag("output"),
            )
        );
    });
    const button = tag("button", {textContent: "Calculate", type: "button"});
    append(form, button);
    button.addEventListener("click", () =&gt; settings.subjects.forEach(calcResults));    
});


function calcResults(subject) {
    const tests = query(`#${subject} &gt; input`);
    const ave = query(`#${subject} &gt; output`)[0];
    var sum = 0, count = 0;
    for (const {value} of tests) {
        if (value !== "") { 
            sum += Number(value);
            count += 1;
        }
    }
    ave.value = count === 0 ? "No assessment." : (sum / count).toFixed(2);
}</code></pre>
<pre class="snippet-code-css lang-css prettyprint-override"><code>input { margin: 4px; }
p { margin: 0px; }</code></pre>
<pre class="snippet-code-html lang-html prettyprint-override"><code>&lt;form&gt;&lt;/form&gt;</code></pre>
</div>
</div>

    </div>