<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First off, this really shouldn't be a class, but a function. </p>

<p>You should have a look at <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">PEP 8</a>, which is the closest thing to a Python style guide. </p>

<p>For clarity, you should also split it up so that you have the processing separate from the input (and it's validation.) The general structure of your program might look a bit like this:</p>

<pre class="lang-py prettyprint-override"><code>def delete_duplicates(mylist):
    # Do stuff

def get_input():
    # Do stuff

if __name__ == "__main__":
    delete_duplicates(get_input())
</code></pre>

<p>We call that last bit a <a href="https://stackoverflow.com/questions/419163/what-does-if-name-main-do/419185#419185">guard</a> - it basically ensures that the script only executes when it is run as a script, but not when we import this into another script.</p>

<p>Since it looks to me like it's about the process of removing duplicates from a list and not about the input here, I'll skip the input bits for now. </p>

<p>From what your code looks to output, you seem to be counting the amount of times something occurs in a list. Python has builtin tools for that, like the <code>count()</code> method. It works like this:</p>

<pre class="lang-py prettyprint-override"><code>num_occur = mylist.count(2)  # Counts how often the int 2 is in mylist.
</code></pre>

<p>What you don't seem to do is actually remove the duplicates from that list, while your class name does claim to do so. You could of course use <code>list.remove(elem)</code> to remove a single occurrence of <code>elem</code> from your list. Another way to do this may be:</p>

<pre class="lang-py prettyprint-override"><code>new_list = list(set(old_list))
</code></pre>

<p>This removes all duplicates by transforming your list into a set, and then back in a list. Sets cannot have duplicates, so this technique removes them all. However, if the order is preserved you can count it as a happy accident. While it'll be common if you do it with a list like <code>[1, 2, 3]</code>, when things get more complex they tend to get shuffled.</p>

<p>You also seem to have a habit of calling lists arrays. They're really not, even if they look and sometimes seem to act like them on the surface. Arrays tend to be much lower level structures than lists, and it may be useful to <a href="https://docs.python.org/3.7/tutorial/datastructures.html" rel="nofollow noreferrer">read up more on python lists.</a></p>
    </div>