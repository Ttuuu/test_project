<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Object-Orientated</h1>

<p>your code is very <strong>procedural</strong> (honestly, it's just one long main methode) not very object-orientated... seperate your code into seperate concern(<a href="https://clean-code-developer.com/grades/grade-2-orange/#Separation_of_Concerns_SoC" rel="nofollow noreferrer">Segregation of concerns</a>), at least a kind of <code>DistanceParser</code> class and a <code>ErrorHandler</code> class. Doing this make your ready open for the <a href="https://clean-code-developer.com/grades/grade-4-green/#Open_Closed_Principle" rel="nofollow noreferrer">open-closed principal</a></p>

<pre><code>DistanceParser fileParser = DistanceParser.fileInstance(inputFile);   //applying dependecy injection
fileParser.setErrorHandler(new FileErrorHandler(logFile));
fileParser.parse();
</code></pre>

<p>if you would apply that logic you were able to create easily any other parser (maybe <code>DistanceParser.inputStreamInstance(inputStream)</code> ), you could easily replace your <code>FileErrorHandler</code> with any other <code>ErrorHandler</code> and you were able to test your functionality with a proper unit test</p>

<pre><code>@Test
DistanceParser fileParser = DistanceParser.fileInstance(invalidInput);
ErrorHandler errorHandlerMock = mock(ErrorHandler.class);
fileParser.setErrorHandler(errorHandlerMock );
fileParser.parse(); //errors during execution are handled by the errorHandler (handleError())
verify(errorHandlerMock , atLeastOnce()).handleError();
</code></pre>

<p>You know you could implement interfaces on your <code>Parser</code> class and your <code>Errorhandler</code> class, so you can apply <a href="https://clean-code-developer.com/grades/grade-3-yellow/#Liskov_Substitution_Principle" rel="nofollow noreferrer">Liskovs Substitution Principal</a> ...</p>

<h1><a href="https://clean-code-developer.com/grades/grade-4-green/#Tell_dont_ask" rel="nofollow noreferrer">Tell, don't ask</a></h1>

<p>another minor issue is naming of your methods, i'm still wondering about your <code>testDoubleLow()</code> methode. if you would use proper names your code would be far more readable.</p>

<p>misleading naming here: </p>

<ul>
<li><code>testDouble(String s)</code> should be named into <code>isDouble(String doubleAsString)</code></li>
<li><code>testDoubleLow(String token, double l)</code> should be named into <br><code>isBiggerThan(String doubleAsString, double minimalValue)</code></li>
</ul>
    </div>