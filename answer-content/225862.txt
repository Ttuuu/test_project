<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Rather than creating strings (as @L.F. has done) I'd consider using the stream's <code>setw</code> manipulator to place the asterisks as needed (at least for all but the last row).</p>

<p>So, given a width, we can then define a center. For what I'm going to call row 0, the first asterisk gets printed at the center: <code>cout &lt;&lt; std::setw(center) &lt;&lt; "*\n";</code>.</p>

<p>For rows 1 through N-1, we print two asterisks, one at <code>center-i</code>, and the other at <code>center+i</code>. Unfortunately, those are both relative to the left margin, but what we need for <code>std::setw</code> is relative to the current position on the line, after the previous write. To do that, we have to compute the distance from the left asterisk to the right asterisk. Fortunately, that's pretty simple: one space, then three spaces, then 5 spaces, and so on up to the number of rows we decide to print.</p>

<p>For the final line, we have a number of asterisks followed by a new-line. We certainly could use <code>setw</code> and company to do this as well:</p>

<pre><code>std::cout &lt;&lt; std::setfill('*') &lt;&lt; std::setw(2*rows) &lt;&lt; '\n';
</code></pre>

<p>...or we could use a <code>std::string</code>:</p>

<pre><code>std::cout &lt;&lt; std::string(2*rows-1, '*') + "\n";
</code></pre>

<p>I don't see huge advantages or disadvantages to either method though.</p>

<p>For the moment I'll skip over discussing putting the code into a function-- @L.F. has already covered that fairly well, with a couple of exceptions. First, I don't like the name <code>print</code>, which conveys little about what it really does. Second, I'm not entirely excited about combining generating the triangle with actually printing the results to a stream. I'd personally prefer to keep those to aspects separate.</p>

<pre><code>#include &lt;iostream&gt;
#include &lt;iomanip&gt;
#include &lt;string&gt;
#include &lt;sstream&gt;

std::string triangle(int rows) { 
    std::stringstream buf;
    buf &lt;&lt; std::setw(rows+1) &lt;&lt; "*\n";

    for (int i=1; i&lt;rows-1; i++) {
        buf &lt;&lt; std::setw(rows-i) &lt;&lt; "*" &lt;&lt; std::setw(2*i+1) &lt;&lt; "*\n";
    }
    buf &lt;&lt; std::setfill('*') &lt;&lt; std::setw(2*rows) &lt;&lt; '\n';
    return buf.str();
}

int main() { 
    const int rows = 7;

    std::cout &lt;&lt; triangle(rows);
}
</code></pre>
    </div>