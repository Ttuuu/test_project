<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This is a partial answer, that only addresses style, but I prefer something like this for the changeColor function. </p>

<p>I'm not thrilled with activateColorButton, but it works.</p>

<p>This is much more readable and maintainable to me:</p>

<pre><code>const changeColor = e =&gt; {
    const lightOrange = "rgb(221, 238, 255)"
    const lightBlue = "rgb(255, 238, 221)"
    const {style} = document.body
    style.backgroundColor = style.backgroundColor === lightOrange 
        ? lightBlue
        : lightOrange
}

const activateColorButton = e =&gt; {
    const btnColor = document.querySelector('#color');
    btnColor.removeEventListener('click', changeColor);
    btnColor.addEventListener('click', changeColor);
}
</code></pre>

<p><strong>Some Explanation:</strong></p>

<p><strong>TLDR</strong></p>

<ul>
<li>Use good variable names</li>
<li>Avoid duplication</li>
<li>Use whitespace effectively</li>
<li>Prepare assignments for future abstraction</li>
</ul>

<p><strong>/TLDR</strong></p>

<p>In changeColor, I have eliminated as much duplication as possible by assigning variables with names that are deliberately chosen to help the code to describe what it does without additional comments.</p>

<p>Moving the variable names to the top of the function allows them to be extended, changed, or even abstracted out to another function or data structure entirely.</p>

<p>The repeated reference to document.body.style.backgroundColor takes up half of a line of code, is very distracting, hard to read, hard to reason about, and unnecessary. style.backgroundColor could not be reduced to simply backgroundColor. This was as far down as it would go without losing functionality.</p>

<p>I personally find the compactness of the tertiary if statement to be more readable than the explicit if statement and especially prefer it when either assigning or returning one of 2 choices.</p>

<p>I renamed activateButton2 to activateColorButton b/c it more clearly expresses its purpose.</p>

<p>In activateColorButton, I chose to remove the click handler if it's already there and reassign it, rather than have confusing 'flag' variables lying around. I'm not thrilled with it b/c, ideally, it would check to see if the click handler was already assigned via the DOM directly, but I was too lazy to implement that here, which seems ok in this case.</p>
    </div>