<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your memo array is pretty inefficient, as it is of size <span class="math-container">\$n^2\$</span>. There's a lot of wasted cells there, right? So one idea to improve the space complexity would be for each <code>memo[i]</code> to be just the right length. For example, <code>memo[0]</code> would be an array of length 1 instead of length n.. This would reduce space complexity from <span class="math-container">\$n^2\$</span> to <span class="math-container">\$n(n+1)/2\$</span>. Still quadratic, but a small improvement.</p>

<p>But you can see that you don't need to keep all that information. All you care about is the previous row, so there's no need to keep more history than that. You could have an array of length n that represents the previous state and reuse it as you go through the triangle. This would result in a space complexity of <span class="math-container">\$O(n)\$</span>, a big improvement. Of course, if you could change the input in place you could do a space complexity of <span class="math-container">\$O(1)\$</span> - no extra space required :)</p>

<p>I also like to use a bottom up approach to these problems. It's more beautiful, as it makes the solution just bubble up. It would rid you of the last <code>for</code> loop as well, which would make it just a bit faster. </p>

<p>Here's a sketch: </p>

<pre><code>t = [v for v in triangle[-1]]
for i in range(len(triangle) - 2, -1 , -1):
  for j in range(len(triangle[i])):
    t[j] = min(t[j], t[j + 1]) + triangle[i][j]

return t[0]
</code></pre>
    </div>