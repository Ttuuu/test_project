<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There are a few things wrong security wise before we even get to the parameters.</p>

<pre><code>private char[] password;
</code></pre>

<p>Storing the plain text password in an instance field makes it discoverable from memory dumps for a considerably long time. There is no need for the field to be an instance field since it is only used in the <code>hash</code> method.</p>

<pre><code>public void hash(String rawPassword) {
</code></pre>

<p>Passing plain text password as a String parameter makes it impossible to be securely disposed of. When being passed around, passwords need to be char arrays and they need to be cleared immediately when they are no longer needed.</p>

<pre><code>public void destroy() {
</code></pre>

<p>You have the right idea that the class needs to be cleared from sensitive data, but here you have made the clearing the responsibility of the caller while the data needing to be cleared is completely irrelevant to the caller. You should avoid having to rely on other people when dealing with sensitive data. Someone will forget to call <code>destroy()</code> because it is not something that needs to be done in a garbage collected environment. At least you could make it <code>Closeable</code> so there is some common contractual indication about the class needing cleanup. Because the method also clears the actual payload it is guaranteed that the sensitive data will be in memory as long as the payload is needed, which is much longer than the sensitive data needs to exist. But it's better to write the class so that it doesn't need external cleanup at all.</p>

<pre><code>private int ammountOfBytes = 64;
private int keyLength = 512;
private int iterations = 100000;
</code></pre>

<p>These should be static and final constants, since you don't have any means to change them.</p>

<pre><code>private String saltHex;
private String hashHex;
</code></pre>

<p>These are the only fields that have a information that needs to be kept for a longer period. Instead of wrapping all the fields into a same <code>PasswordHasher</code> class, you should put these two fields into a dedicated data class called <code>HashedPassword</code>, have all the other code be static utilities and have the hash method return the data class.</p>

<p>If we look at the naming, <code>PasswordHasher</code> implies that the class is an actor that implements an algorithm. Your implementation uses it as both a data container and the algorithm. It is better to separate the responsibilities to two different classes (single responsibility principle)</p>
    </div>