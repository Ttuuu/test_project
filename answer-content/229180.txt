<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Documentation</h2>

<p>The amount of documentation you've written is ambitious, but its arrangement is slightly unhelpful for a few reasons.</p>

<p>When documenting the "parameters to a class", you're really documenting the parameters to <code>__init__</code>. As such, this block:</p>

<pre><code>    """
    Parameters
    ----------

        shapefile : str
            It is a string pointing to a geospatial vector data file which 
            has information for an american state's geometry data.

        spacing : float
            It defines the distance between the points in coordinate units.

        empty_ratio : float
            What percent of houses need to be kept empty.

        ratio : float
            What is the real ratio between the majority and minority in 
            reality in a given state.

        ratio : int
            Number of races. Currently the model is tested on 2 races, but 
            maybe in future support fot more races will be added.
    """
</code></pre>

<p>should be moved to the docstring of <code>__init__</code>.</p>

<p>Attributes generally aren't documented at all because they should mostly be private (prefixed with an underscore) and discouraged from public access except through functions. Regardless, such documentation should probably go into comments against the actual initialization of members in <code>__init__</code>.</p>

<p>Move the documentation for "Methods" to docstrings on each method.</p>

<h2>Typo</h2>

<p><code>coordiantes</code> = <code>coordinates</code></p>

<p>Modern IDEs have spell checking support, such as PyCharm.</p>

<h2>Indentation</h2>

<p>Perhaps moreso than in any other language, clear indentation in Python is critical. This:</p>

<pre><code>    self.df_county_data['MinorityPopPercent'] = \
        self.df_county_data[['TotalPop', 'MinorityPop'
                            ]].apply(lambda x: (0 if x['TotalPop']
            == 0 else x['MinorityPop'] / x['TotalPop']), axis=1)
</code></pre>

<p>could be better represented like so:</p>

<pre><code>self.df_county_data['MinorityPopPercent'] = (
    self.df_county_data[
        ['TotalPop', 'MinorityPop']
    ].apply(
        lambda x: (
            0 if x['TotalPop'] == 0 else x['MinorityPop'] / x['TotalPop']
        ),
        axis=1
    )
)
</code></pre>

<p>That being said, this is somewhat over-extending the usefulness of a lambda; you're probably better off just writing a function to pass to <code>apply</code>.</p>
    </div>