<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here are some things that may help you improve your program.</p>

<h2>Release resources as soon as practical</h2>

<p>The <code>diskHandle</code> should be released immediately after the <code>ReadFile</code> call to minimize the time that the handle is open.  Call <code>CloseHandle</code> to close the file and release the handle.</p>

<h2>Use minimal sufficient privileges</h2>

<p>In this case, the MBR is only read and not written, so the file should be opened only with the <code>FILE_SHARE_READ</code> option and not <code>FILE_SHARE_WRTE</code>.</p>

<h2>Use <code>const</code> where practical</h2>

<p>The <code>PrintMBR</code> function does not alter the passed <code>buffer</code> so the <code>buffer</code> parameter should be <code>const</code>.</p>

<h2>Use an object</h2>

<p>I'm surprised that other reviews didn't mention this, but why not treat the MBR as a C++ object?  That way your <code>main</code> could look like this:</p>

<pre><code>int main() {
    MBR mbr;
    if (mbr.read()) {
        std::cout &lt;&lt; mbr &lt;&lt; '\n';
    } else {
        std::cout &lt;&lt; "Error reading MBR\n";
    }
}
</code></pre>

<h2>Isolate platform-specific code</h2>

<p>It would be very simple to write this code so that it also runs under Linux and doesn't rely on any particular compiler.  The easiest way to do that is to isolate the Windows-specific code so that it is easy to port.  This may not seem like a big deal if you're only interested in having a Windows version at the moment, but writing portable code by habit generally pays off in the long run in my experience.</p>
    </div>