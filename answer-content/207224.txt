<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>On raw pointers</strong></p>

<p>In my opinion, games are one of the places where raw pointers are okay. They're okay because you want to tightly control the creation and destruction of objects and generally avoid memory allocation during active play, so the functionality you gain from smart pointers is not particularly valuable and mostly clutters your code and slows things down in Debug builds. That said, if you're learning C++ you really do want to learn smart pointers; they're important and useful.</p>

<p>In any case, you are abusing your raw pointers because you're not carefully managing the lifetime of your objects. You must, must, <em>must</em> consider where and when an object will be deleted when you new it. You cannot afford to ignore this. And, in your case, I think you are doing it wrong:</p>

<p><strong>You probably want to keep the states as permanent objects</strong></p>

<p>Instead of doing <code>new MenuState</code> whenever you enter the menu state, you probably want to create the states once (storing them in an object which will manage their lifetime) and then pass a pointer to the existing new state to the StateManager when you change state. You could also consider hiding the pointers away and passing a suitable message for the new state instead.</p>

<p><strong>You likely want to defer state changes</strong></p>

<p>Instead of changing state the moment a state is changed, you probably want to defer the change until the appropriate point in your game update loop so that you can correctly synchronise sounds/graphics/etc for the menu. You also probably want to decouple exit and entry so that you can transition from one menu to the other and this means you will want the menu to update its exit over several frames before the next menu begins its entry over the next few frames.</p>
    </div>