<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Things you did well:</h1>

<ul>
<li><p>You used the function <a href="http://en.cppreference.com/w/c/io/gets" rel="nofollow noreferrer"><code>gets_s</code></a>, which is an <a href="https://en.wikipedia.org/wiki/C11_%28C_standard_revision%29" rel="nofollow noreferrer">optional C11</a> function from Annex K.  Not many people use this standard yet because it is newer. I was surprised to see it in your code.</p></li>
<li><p>Your organization of the prototype functions is good.</p></li>
<li><p>You initialize your variables as soon as you create them in some areas.</p></li>
</ul>

<h1>Things you could improve:</h1>

<p>There is a lot that could be improved in this code, so I doubt I will be able to mention them all.</p>

<h3>Preprocessor</h3>

<ul>
<li><p>You include both <code>&lt;stdio.h&gt;</code> and <code>&lt;cstdio&gt;</code>.</p>

<blockquote>
<pre><code>#include &lt;stdio.h&gt;
#include &lt;conio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;cstdio&gt;
</code></pre>
</blockquote>

<p>I couldn't get the code to compile as C code with the <code>#include &lt;cstdio&gt;</code> in there, so it should be removed.</p></li>
</ul>

<h3>User-experience</h3>

<ul>
<li><p>You ask the user if he is ready to start.</p>

<blockquote>
<pre><code>printf("Would you like to start: ");
gets_s(another);

if (another[0] != 'y' &amp;&amp; another[0] != 'n')
{
    while (another[0] != 'y' &amp;&amp; another[0] != 'n')
    {
        printf("\n\n INCORRECT ANSWER. \n\n");
        printf("\n Would you like to start. (y or n)");
        gets_s(another);
    }
}
</code></pre>
</blockquote>

<p>The user initiated your program for a reason.  Asking him if he would like start is useless, and can be frustrating to a user.  To add onto the annoyance, you then tell the user that his input is "incorrect", if he doesn't input <code>'y'</code>, and you then loop the question. I would remove the whole thing.</p></li>
</ul>

<h3>Logic</h3>

<ul>
<li><p>Some of your logic can be simplified.</p>

<blockquote>
<pre><code>if (status[0] == 'S' &amp;&amp; status[1] == 'H')
{
    printf("\n\n CORRECT ANSWER. SH \n\n");
    single_total = single_total + 1;
    check = 1;
}
else if (status[0] == 'S' &amp;&amp; status[1] == '\0')
{
    printf("\n\n CORRECT ANSWER. S \n\n");
    single_total = single_total + 1;
    check = 1;
}
</code></pre>
</blockquote>

<p>Both times you are checking if <code>status[0] == 'S'</code>, so use that as the "master" <code>if</code> test condition.  Use the other tests as "children" tests.</p>

<pre><code>if (status[0] == 'S')
{
    if (status[1] == 'H') puts("Correct answer: SH");
    if (status[1] == '\0') puts("Correct answer: S");
    single_total = single_total + 1;
    check = 1;
}
</code></pre>

<p>Pull out the code that the original test conditions had in common to the "master" condition, and you have a refined test condition statement!</p></li>
<li><p>You sometimes have logic that will print out to the console that the logic in the code is wrong.</p>

<blockquote>
<pre><code>else
{
    printf("\n\n INCORRECT ANSWER. CODE IS WRONG. \n\n");
}
</code></pre>
</blockquote>

<p>I would use <a href="https://en.cppreference.com/w/c/error/assert" rel="nofollow noreferrer"><code>assert()</code></a> instead. If this expression evaluates to <code>0</code>, this causes an assertion failure that terminates the program. Also, assertions are the right mechanism to use, since those positions in the code would only be reachable due to programmer error, not due to unanticipated runtime conditions.</p>

<pre><code>else
{
    assert(income &gt; 30000);
    adjusted_income = income * .35;
}
</code></pre></li>
</ul>

<h3>Variables</h3>

<ul>
<li><p>You have a lot of <a href="https://en.wikipedia.org/wiki/Magic_number_%28programming%29" rel="nofollow noreferrer">"magic numbers"</a> in your code.  </p>

<blockquote>
<pre><code>if (income &lt;= 6000)
{
    adjusted_income = income * 0.0;
}
else if (income &gt; 6000 &amp;&amp; income &lt;= 9000)
{
    adjusted_income = income * .038;
}
else if (income &gt; 9000 &amp;&amp; income &lt;= 15000)
{
    adjusted_income = income * .074;
}
else if (income &gt; 15000 &amp;&amp; income &lt;= 21000)
{
    adjusted_income = income * .110;
}
else if (income &gt; 21000 &amp;&amp; income &lt;= 25000)
{
    adjusted_income = income * .138;
}
else if (income &gt; 25000 &amp;&amp; income &lt;= 30000)
{
    adjusted_income = income * .154;
}
else if (income &gt; 30000)
{
    adjusted_income = income * .35;
}
</code></pre>
</blockquote>

<p>You should extract all of those numbers to variables in case you have to change them later.  Then you only have to change one number in one place, instead of changing the number in multiple different places.  What if you missed a place?</p></li>
<li><p>Your variable <code>char buffer[80][90]</code> is unused and should be removed.</p></li>
<li><p>It's generally good practice to initialize all of your non-static variables when possible.</p></li>
<li><p>Don't use global variables.</p>

<blockquote>
<pre><code>int single_total = 0;
int mj_total = 0;
int ms_total = 0;
int sh_total = 0;
</code></pre>
</blockquote>

<p>The problem with global variables is that since every function has access to these, it becomes increasingly hard to figure out which functions actually read and write these variables.</p>

<p>If you don't rely on global variables, you can pass state around between different functions as needed. That way you stand a much better chance of understanding what each function does, as you don't need to take the global state into account.</p></li>
</ul>

<h3>Syntax</h3>

<ul>
<li><p>You use too much space when printing to the console.  Also, use <a href="https://en.cppreference.com/w/c/io/puts" rel="nofollow noreferrer"><code>puts()</code></a> instead of <code>printf()</code> in some cases where you are not actually formatting the string but just printing it with a newline character at the end.</p></li>
<li><p><code>mj_total = mj_total + 1</code> can be simplified to <code>mj_total += 1</code>.</p></li>
</ul>

<h3>Input</h3>

<ul>
<li><p>Your code can't handle the input of a string properly.</p>

   <pre class="lang-none prettyprint-override"><code>How much in other income. ten
</code></pre>

<p>It should tell the user that it is unacceptable input and ask for re-entry of the data.</p></li>
<li><p>Your program can't handle the input of a malformed string properly.</p>

   <pre class="lang-none prettyprint-override"><code>How much in other income. 107t
</code></pre>

<p>It should tell the user that it is unacceptable input and ask for re-entry of the data.</p></li>
<li><p>Your program can't handle the input of a <code>\n</code> (new-line) character (pressing <kbd>enter</kbd>).</p>

   <pre class="lang-none prettyprint-override"><code>How much in other income. &lt;enter&gt;
</code></pre>

<p>It should tell the user that it is unacceptable input and ask for re-entry of the data.</p></li>
<li><p>Your program is very unforgiving when asking the status of the user.  </p>

<blockquote>
<pre><code>printf("\n\nWhat is your Status: ");
gets_s(status);
</code></pre>
</blockquote>

<p>If you input a lower-case character, it won't be accepted.  Use the <a href="https://en.cppreference.com/w/c/string/byte/toupper" rel="nofollow noreferrer"><code>toupper()</code></a> function on your input character to fix this.  You have this same issue when asking the user if he has more <code>wages</code>, <code>dividends</code>, etc.</p>

<blockquote>
<pre><code>printf("\n Would you like anoter. (y or n)");
gets(another);
</code></pre>
</blockquote>

<p>Here you might want to use the <a href="https://en.cppreference.com/w/c/string/byte/tolower" rel="nofollow noreferrer"><code>tolower()</code></a> function.</p></li>
</ul>
    </div>