<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'm not surprised you had trouble modifying the code and making it work. It takes some careful thought to understand how it is working at all.</p>

<pre><code>upper_directory = "C:/Users/sh001/Desktop/onemore/content" #add your directory path here
for dirpath, directories, files in os.walk(upper_directory):
</code></pre>

<p>Here, <code>os.walk</code> creates a generator that "visits" C:/Users/sh001/Desktop/onemore/content and every subdirectory of C:/Users/sh001/Desktop/onemore/content, recursively. The <code>for</code> ensures that the code following this line will execute once for each directory visited by the generator.</p>

<pre><code>    for files in glob.iglob('C:/Users/sh001/Desktop/onemore/content/**/*.xml', recursive=True): #finds all .xml files and updates references
</code></pre>

<p>Here, <code>glob.iglob</code> returns a list containing the full paths of all *.xml files in C:/Users/sh001/Desktop/onemore/content and in all subdirectories of C:/Users/sh001/Desktop/onemore/content, recursively. The <code>for</code> ensures that the lines after it will be executed once for each filepath in the list.</p>

<p>Already I can see a reason why the script is so slow. The line starting <code>for files in glob.iglob</code> all by itself ensures that you will process every file in C:/Users/sh001/Desktop/onemore/content and all its subdirectories (recursively searched). The line <em>before</em> that line ensures that you won't just process the files once. You'll process all the files, and then you'll process them all <em>again</em> N more times, where N is the number of subdirectories of C:/Users/sh001/Desktop/onemore/content (recursively searched).</p>

<p>But didn't you need <code>dirpath</code> from <code>os.walk</code> in order to make the following work?</p>

<pre><code>            path = os.path.join(dirpath, files)
</code></pre>

<p>Actually, you didn't. Since <code>files</code> is an absolute path to a file, <code>join</code> ignores <code>dirpath</code> and just returns <code>files</code>.</p>

<p>But back to your nested loops:</p>

<pre><code>        for fname in files:
</code></pre>

<p>Here, <code>files</code> is a single string that is defined in one iteration of the previous <code>for files</code>. Since <code>files</code> is a string, <code>for fname in files:</code> iterates once for each letter in the string, setting <code>fname</code> to each letter in turn.</p>

<p>OK, so not only are you processing every file multiple times due to iterating over <code>os.walk</code>, you are also multiplying the multiple times by the number of characters in the full file path to each file.
That is, if C:/Users/sh001/Desktop/onemore/content has just 2 subdirectories that have 2 subdirectories each (and no more), that's 7 directories total; and if the average length of the full path to each file (including the initial part of the path, C:/Users/sh001/Desktop/onemore/content) is 50 characters, you are processing every single file 350 times. No wonder it's slow.</p>

<p>(It's possible I've made a mistake somewhere in this analysis. Honestly, I didn't check very carefully, because code of such poor quality is not worth the trouble. You should know that nesting three different kinds of <code>for</code> loops like this is a terrible code smell. Just don't do it.)</p>

<p>When you're learning how to process a lot of files using iterators like these, it's helpful to insert some debug printout in the early versions of your script, printing out the name of the file just before you process that file. In this case, with multiple loops, I would just debug the first loop to start with (because I would only <em>write</em> the first loop to start with and would wait until I was sure it worked right before writing any other processing). For example, instead of just calling <code>lower_figcontab_id(path)</code>, you could have</p>

<pre><code>            print(path)
            lower_figcontab_id(path)
</code></pre>

<p>You might want to take out the <code>print</code> once everything is working OK. Or maybe not--it can be helpful to have confirmation in the console output that your script is working.</p>

<hr>

<p>I think you should start over, though you can salvage some bits and pieces from this script (such as the operations you perform on the BeautifulSoup objects).
A good basic structure would be to write a loop of some kind--using os.walk is fine, or glob.iglob, <em>but not both</em>--that will list the full path to each *.xml file exactly once. Once you have such a full path in a variable named <code>path</code>, this part of your code makes a BeautifulSoup object <code>s</code> from it:</p>

<pre><code>    with open(path, encoding="utf-8") as f:
        s = f.read()
    s = bs(s, "xml")
</code></pre>

<p>Do all the operations you want on <code>s</code>. It's helpful to have a function for each transformation, as you do, but rather than take a path as the argument to the function it's better to take <code>s</code> as the argument to the function and return the modified copy of <code>s</code> back to the caller when you're done.
After all that you can use the code you've already written to write the contents of <code>s</code> to the file.</p>

<hr>

<p>To avoid making such a mess in the future, write your scripts incrementally. Get a few lines that do some part of the job and test that they actually do what you think (and not a lot more than you think or a lot less). Temporary <code>print</code> statements can help you keep track of your failures and successes.
When you have pieces that work you can put subroutines in them or use them as subroutines for other pieces.</p>
    </div>