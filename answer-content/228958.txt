<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<pre><code>        int day = 4; // Lets number the days of week from 1:7 &amp;&amp; Sunday is the first day;;; note : 1 jan 1901 was Tue day
</code></pre>
</blockquote>

<p>The comment gets lost on the right edge of this narrow screen.</p>

<p>The position of the comment implies that it is specific to the variable <code>day</code>, but that's not true of the first sentence.</p>

<p>For working with <code>%</code> it would be less confusing to use 0 to 6 rather than 1 to 7.</p>

<p>Given that <code>day = 4</code>, why does the comment tell us that <code>1 jan 1901 was Tue day</code>? What does <code>day</code> represent here? If it's 1900-12-01 then the comment should talk about that date. In general, <code>day</code> is not a self-explanatory name.</p>

<hr>

<blockquote>
<pre><code>            for(int mon = 1; mon &lt;= 12; mon++) {
</code></pre>
</blockquote>

<p><code>mon</code> for Monday? Again, not the most helpful name.</p>

<hr>

<blockquote>
<pre><code>                day += days(mon, year);
                if(day%7 == 1)
                    sundays++;
</code></pre>
</blockquote>

<p>Is overflow of <code>day</code> a risk?</p>

<hr>

<blockquote>
<pre><code>    public static int days(int num, int year) {
        int res = 0;
        int feb = 28;
        if(isLeapYear(year))
            feb = 29;
        switch(num) {
            case 1 : res = 31; break;
            case 2 : res = feb; break;
            ...
            case 12 : res = 31; break;
        }
        return res;
    }
</code></pre>
</blockquote>

<p><code>num</code>? That's <em>completely</em> uninformative. I know it's a number because I can see that its type is <code>int</code>.</p>

<p>Early returns would make this shorter and more obviously correct:</p>

<pre><code>        switch (month) {
            case 1 : return 31;
            case 2 : return isLeapYear(year) ? 29 : 28;
            ...
</code></pre>

<p>It's bad practice to have a <code>switch</code> without a <code>default</code>, even if the only thing the <code>default</code> does is <code>throw new Exception("This should be unreachable code")</code>.</p>

<p>One option would be to group the cases according to a well-known rhyme, and pull the sanity checking out of the <code>switch</code>:</p>

<pre><code>        if (month &lt; 1 || month &gt; 12) throw new IllegalArgumentException("month");

        switch (month) {
            // 30 days have September, April, June and November...
            case 9:
            case 4:
            case 6:
            case 11:
                return 30;

            // ... All the rest have 31 ...
            default:
                return 31;

            // ... except for February alone.
            case 2:
                return isLeapYear(year) ? 29 : 28;
        }
</code></pre>

<hr>

<blockquote>
<pre><code>    public static boolean isLeapYear(int year) {
        if(year%4 == 0) 
            if(year%100 == 0) {
                if(year%400 == 0)
                    return true;
            } else
                return true;
        return false;
    }
</code></pre>
</blockquote>

<p>Simplifying from the inside out, and putting in the necessary <code>{}</code> to be sure that the code does what we expect, we get:</p>

<pre><code>    public static boolean isLeapYear(int year) {
        if (year % 4 == 0) {
            if (year % 100 == 0) {
                return year % 400 == 0;
            }
            return true;
        }
        return false;
    }
</code></pre>



<pre><code>    public static boolean isLeapYear(int year) {
        if (year % 4 == 0) {
            return y % 100 &gt; 0 || year % 400 == 0;
        }
        return false;
    }
</code></pre>



<pre><code>    public static boolean isLeapYear(int year) {
        return year % 4 == 0 &amp;&amp; (y % 100 &gt; 0 || year % 400 == 0);
    }
</code></pre>



<pre><code>    public static boolean isLeapYear(int year) {
        return (year % 4 == 0 &amp;&amp; y % 100 &gt; 0) || year % 400 == 0;
    }
</code></pre>

<p>Of course, given that we're only interested in years 1901 to 2000, this could be simplified further.</p>
    </div>