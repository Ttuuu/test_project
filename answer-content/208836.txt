<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here are some things that may help you improve your code.</p>

<h2>Use <code>NULL</code> instead of <code>0</code> for pointers</h2>

<p>The value <code>0</code> is an integer, but the value <code>NULL</code> is an <a href="http://en.cppreference.com/w/c/types/NULL" rel="nofollow noreferrer">implementation-defined null-pointer constant</a>.  In a pointer context, they're equivalent, but <code>NULL</code> is a cue to the reader of the code that a pointer is involved.</p>

<h2>Use include guards</h2>

<p>There should be an include guard in the <code>.h</code> file.  That is, start the file with:</p>

<pre><code>#ifndef LIST_H
#define LIST_H
// file contents go here
#endif // LIST_H
</code></pre>

<h2>Simplify your code</h2>

<p>I'm not sure why the <code>x_upcast</code> and <code>data_upcast</code> code exists.  Maybe the intent was to more cleanly separate the <code>data</code> type (an <code>int</code> here) from the rest of the code.  However, consider that it could instead be written like this: </p>

<pre><code>static struct Link *x_upcast(struct X *const x) {
    return (struct Link *)x;
}
</code></pre>

<p>Better though, in my opinion, would be to eliminate it entirely.  The single place it's used is in <code>ListForEach</code>:</p>

<pre><code>for(x = list-&gt;head.next; (next_x = x-&gt;next); x = next_x)
        action(&amp;(x_upcast)(x)-&gt;data);
</code></pre>

<p>This could be more clearly written as:</p>

<pre><code>for(x = list-&gt;head.next; (next_x = x-&gt;next); x = next_x)
        action(&amp;((struct Link *)x)-&gt;data);
</code></pre>

<p>This also brings us to the next suggestion.</p>

<h2>Use the appropriate data type</h2>

<p>The code, as posted, appears to treat pointers to the data value and pointers to a <code>Link</code> identically.  This is a problem because it misleads the reader.  For example, the <code>get_link</code> code creates and partially initializes a <code>Link</code> but claims to be returning an <code>int *</code>.  This would be much more clear if, instead, the code were to actually return a <code>struct Link *</code>.   In other words, the interface should <em>guide correct usage</em> rather than <em>encourage incorrect usage</em>.  As an example, this code compiles just fine:</p>

<pre><code>int n = 99;
ListPush(&amp;list, &amp;n);
</code></pre>

<p>However this is a runtime disaster waiting to happen.  We would probably prefer that it not even compile because what <code>ListPush</code> actually requires is a pointer to the data member of an already created <code>struct Link</code>.  The next suggestion addresses this problem.</p>

<h2>Rethink your interface</h2>

<p>If <code>LinkPush</code> really requires a <code>List</code> and a <code>Link</code>, let's declare it that way.  Instead of this:</p>

<pre><code>void ListPush(struct List *const list, int *const add);
</code></pre>

<p>use this:</p>

<pre><code>void ListPush(struct List *const list, struct Link *const newnode);
</code></pre>

<p>Now compiler will actually assist and point out bad usage like the code mentioned previously.  This eliminates the type name <code>X</code> and also requires some redefinitions of other things such as <code>List</code> and <code>Action</code> which now look like this:</p>

<pre><code>struct List { struct Link head, tail; };
typedef void (*Action)(struct Link *const);
</code></pre>

<h2>Use better names</h2>

<p>The type name <code>List</code> is good, but the type name <code>X</code> is not.  The first name explains something about what the variable means within the context of the code, but the latter is opaque and non-descriptive.</p>

<h2>Better describe the responsibilities of the data structure</h2>

<p>It is quite important to note that this implementation of a linked list assumes that some other entity is creating (and presumably deleting) its nodes.  It gives the user some flexibility, as it would allow the use of statically or dynamically allocated memory, but it's worth explicitly mentioning to the user of the code in a comment.</p>
    </div>