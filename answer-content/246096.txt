<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Some thoughts:</p>
<p>One thing I liked is the null coalescing operator (??). If I'm not wrong it's one of those new features in PHP7.</p>
<h1>Clumsy redirect</h1>
<pre><code>header('Location: ../../index.php');
</code></pre>
<p>Use a full (absolute) URL:</p>
<pre><code>header('Location: https://www.yoursite.com/index.php');
</code></pre>
<p>In fact this is even stipulated in RFCs like 2616, for good reasons.
Otherwise the browser is left to interpret what you mean. In practice the browser will use the current URL to determine the destination but you are relying on the browser to "guess" what the correct location should be. Avoid ambiguity.</p>
<p>The root URL for your site should be defined as a constant in your application. Then all you have to do is append the desired page to the root URL to perform the redirect.</p>
<p>Use absolute URLs for the links on your site too. Speaking of relative links, be aware there is an HTML <a href="https://www.w3schools.com/tags/tag_base.asp" rel="nofollow noreferrer"><code>&lt;base&gt;</code> tag</a>.</p>
<h1>Internationalization is lacking</h1>
<p>I have the impression that your code is not character set-aware. Have you ever thought about accents ?</p>
<p>This is an arbitrary decision:</p>
<pre><code>if (!ctype_alnum($first_name)) {
    $errors[] = "Invalid first name, it only may contain letters or digits";
}
</code></pre>
<p>Why not allow more characters like apostrophes ? What if my name is Sarah O'Connor or Jean-Michel Jarre ? I cannot register on your site ?
The bigger problem is that you are forcing users to use Latin characters whereas they might want to use Arab script or Chinese characters or whatever. Lots of people are <strong>not</strong> comfortable with ASCII. Likewise, you would struggle on a Chinese keyboard.</p>
<p>Embrace <strong>Unicode</strong> now. Even if you focus on a narrow audience of native English speakers, people are going to post non-ASCII characters in comments anyway (think about emojis). So your script should handle Unicode, and the database should store the data properly so that it can be rendered as it was typed in. If you garble the comments of users they will be unhappy.</p>
<p>And in fact, your HTML pages probably have a content-encoding already, if not UTF-8 it might be ISO-8859-1 or something like that - I would check. This is an important detail because it dictates how your server will receive the form data.</p>
<hr>
<h1>Breaking it up</h1>
<p>I would also break up the code in small <strong>functions</strong> (I must have said that lots of times), for example one function that validates the input, another one that registers the user in the DB. Your functions can return a boolean value or an array of errors. Or they can be implemented as classes.</p>
<p>It makes the code more manageable and you can also move the functions to <strong>include files</strong> to declutter that file. You don't want to scroll a page that is 5000 lines long. The more code you add, the more tedious your job becomes. And the code becomes ugly.</p>
<p>Believe me, you are going to add a lot more code to have a decently-working application (if you don't lose motivation in the meantime). I do more Python these days, but I usually avoid having more than 400 lines in a single file. Smaller files are more manageable. Right now you have only 110 lines but wait.</p>
<p>And in fact, after registration it is customary to send an <strong>E-mail</strong> (hint: another template), with a link to be clicked to verify the E-mail. So there will be more logic involved in the registration process.</p>
<p>So I would probably ditch this:</p>
<pre><code>$_SESSION["id"] = $_POST['username'];
</code></pre>
<p>because I don't want the user to be logged in (have a valid session) and able to post until they have actually verified their E-mail (but where is <code>session_start</code> ?). I would rename the session variable <code>$_SESSION["username"]</code> to be consistent, unless you wanted to use the newly-created user ID instead.</p>
<hr>
<p>I have said it before, but <strong>frameworks</strong> exist for a reason: to relieve developers of complexity and avoid reinventing the wheel. Although it is good to have "low-level" understanding of how things work under the hood, one has to keep pace with modern development.</p>
<p>Another benefit would be to use <strong>templates</strong> to better separate presentation from logic. Mixing HTML with PHP (or other code) is ugly. To be honest showing something like this to a user is a bit terse:</p>
<pre><code>if ($row) {
    echo "That email is already in use";
    die();
}
</code></pre>
<p>In 2020 people are normally expecting a good-looking HTML page, with alerts, colors, images and all that stuff. Good presentation is important. You already have the page, you just have to show errors when and if they occur.</p>
<hr>
<p>One suggestion: look at open-source forum software, analyze the code, and see how it's done. Don't always try to reinvent the wheel. I am not saying that you should blindly copy from other people, no the point is to learn from others and improve where you can. Yes, you will find bad stuff too but hopefully you will recognize it. You learn a lot by looking at other people's code because it makes you think about why they did this or that. I myself am never satisfied with my code, I think code can always be improved.</p>
    </div>