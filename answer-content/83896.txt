<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Bearing in mind that I don't know much Swift...</p>

<p>Your <code>Rank</code> enum could save you a lot of typing if you simply made it a plain old autoincrementing integer enumeration:</p>

<pre><code>enum Rank: Int {
    case Ace = 1, Two, Three, Four, Five, Six, Seven,
    Eight, Nine, Ten, Jack, Queen, King, __EXHAUST
}

extension Rank: ForwardIndexType {
    func successor() -&gt; Rank {
        switch self {
        case .__EXHAUST: return .__EXHAUST
        default: return Rank(rawValue: self.rawValue + 1)!
        }
    }
}

extension Rank: Printable, DebugPrintable {
    var description: String {
        get {
            switch (self) {
            case .Ace: return "Ace"
            case .Jack: return "Jack"
            case .Queen: return "Queen"
            case .King: return "King"
            default: return self.rawValue.description
            }
        }
    }
    var debugDescription: String {
        get { return self.description }
    }
}

for i in Rank.Ace ... .King {
    print(i)
}
</code></pre>

<p>When testing out this code, please notice that <a href="https://stackoverflow.com/a/24113146/1424877">the Printable protocol doesn't work in Playgrounds at the moment.</a></p>

<p>Also, of course, shuffling the deck <code>3</code> times doesn't make the order of the cards any "more random" than shuffling the deck once. But you probably know that, since you went to the bother of <s>implementing</s> copying a correct shuffling algorithm.</p>

<p>To add jokers, the most "C-like" approach would be to add <code>Suit.Joker</code> and <code>Rank.Joker</code> and leave <code>Card</code> alone.
The most "functional-programming" approach would be to change <code>Card</code> from a <code>struct</code> to an <code>enum</code> with a special case for jokers:</p>

<pre><code>enum Card {
    case Regular(Rank, Suit)
    case Joker
}

var c = Card.Regular(.Ace, .Spades)
var j = Card.Joker
</code></pre>
    </div>