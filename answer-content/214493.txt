<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I needed to add a few headers to get this to compile:</p>

<pre><code>#include &lt;cassert&gt;
#include &lt;memory&gt;
#include &lt;type_traits&gt;
</code></pre>

<p>There's also use of an undefined identifier <code>__FUNCSIG__</code> that I needed to remove.</p>

<hr>

<p><code>std::size_t</code> is misspelt throughout (implementations are <em>allowed</em>, but not <em>required</em> to declare <code>::size_t</code> in addition to <code>std::size_t</code>; portable code shouldn't assume so).</p>

<hr>

<p>Why do we have such small limits on the number of rows and columns?  We ought to allow any size we can allocate (i.e. any combination whose product fits in a <code>std::size_t</code>).  Note that <code>assert()</code> is the wrong way to check public arguments - remember that it's compiled out when <code>NDEBUG</code> is defined.</p>

<p>At the other end of the scale, should a matrix with zero elements be allowed?  I don't see why not (and the zero-sized allocation is perfectly legal), but just to make sure you've considered it...</p>

<hr>

<p>We could move the pointer into the lambda, so we don't need to increase its reference count:</p>

<pre><code>    return [arry = std::move(arry), rows_, columns_](size_t row_, size_t col_) 
        -&gt; T&amp;
    {
        return arry[row_ * columns_ + col_];
    };
</code></pre>

<p>That allows us to use a unique pointer instead:</p>

<pre><code>    auto arry = std::make_unique&lt;T[]&gt;(rows_ * columns_);
</code></pre>

<p>And combine the two:</p>

<pre><code>    return [arry = std::make_unique&lt;T[]&gt;(rows_ * columns_), rows_, columns_]
           (size_t row_, size_t col_) -&gt; T&amp;
    {
        // arry is moved into here
        return arry[row_ * columns_ + col_];
    };
</code></pre>

<p>The lifetime is correct - the capture is destructed when the lambda is (and Valgrind confirms that, if there was any doubt).</p>

<hr>

<p>Having suggested improvements to the use of the smart pointer, it's not what I'd prefer: instead of using a pointer to an array, it's clearer to allocate a <code>std::vector</code>.  If we don't resize it, it's exactly equivalent to the shared pointer.  Like this:</p>

<pre><code>    return [arry = std::vector&lt;T&gt;(rows_ * columns_), rows_, columns_]
           (size_t row_, size_t col_) mutable -&gt; T&amp;
    {
        // arry is moved into here
        return arry[row_ * columns_ + col_];
    };
</code></pre>

<hr>

<p>Minor: <code>false == foo</code> is normally written <code>!foo</code>.</p>
    </div>