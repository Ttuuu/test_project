<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Capture global variables elsewhere</h2>

<p>These:</p>

<pre><code>outlook = win32com.client.Dispatch("Outlook.Application").GetNamespace("MAPI")

mailboxNamesList=['Generic_Mailbox']

#test input
#mailboxName = pg.prompt('please input mailbox name and press enter', 'mailbox name')
#main(mailboxName)


start = time.time()

date = datetime.date.today() - datetime.timedelta(days=30)
</code></pre>

<p>either belong as members of a class, or as local variables passed through function arguments.</p>

<h2>lower_snake_case</h2>

<p><code>itemLoop</code></p>

<p>should be</p>

<p><code>item_loop</code></p>

<p>and so on for <code>arrFolder</code>, etc.</p>

<h2>Naming</h2>

<p>For this code:</p>

<pre><code>for iterator in msg
</code></pre>

<p>Don't just call it <code>iterator</code>. Maybe call it <code>messages</code>. Name a thing based on its business purpose, not what type of Python variable it is.</p>

<h2>Implicit slice start</h2>

<pre><code>str(iterator.ReceivedTime)[0:10]
</code></pre>

<p>can be</p>

<pre><code>str(iterator.ReceivedTime)[:10]
</code></pre>

<h2>Successive append</h2>

<p>Rather than</p>

<pre><code>                line.append(folderName)
                line.append(str(iterator.SenderEmailAddress).encode(encoding='ascii',errors='replace'))
                line.append(str(iterator.Subject).encode(encoding='ascii',errors='replace'))
                line.append(str(iterator.ReceivedTime))
                line.append(Calc.action(iterator))
                line.append(body)
                line.append(iterator.Importance)
                line.append(iterator.Sensitivity)
                line.append(iterator.UnRead)
                line.append(iterator.Categories.replace(',', ';'))
                line.append(Calc.autoreply(iterator))
                line.append(iterator.
</code></pre>

<p>consider</p>

<pre><code>line.extend([
    folderName,
    (str(iterator.SenderEmailAddress).encode(encoding='ascii',errors='replace'),
    # ...
])
</code></pre>

<h2>Codes</h2>

<p>For these numbers:</p>

<pre><code>    if actionCode==102:
        actionDone="replied"
    if actionCode==103:
        actionDone="replied to all"
    if actionCode==104:
        actionDone="forwarded"
    if actionCode==0:
        actionDone="no action taken"
</code></pre>

<p>make an <code>enum.Enum</code>, perhaps</p>

<pre><code>class ActionCode(Enum):
    REPLIED = 102
    REPLIED_ALL = 103
    ...
</code></pre>

<h2>Return is a not a function</h2>

<p>Drop the parens here:</p>

<pre><code>    return(actionDone)
</code></pre>

<h2>Don't swallow exceptions</h2>

<p>This:</p>

<pre><code>        except:        
            pass
</code></pre>

<p>needs to die. At the absolute most, catch the specific exception you need to ignore.</p>

<h2>Boolean</h2>

<p><code>autoreply</code> should not return <code>'Yes'</code> or <code>'No</code>', it should return a boolean, to optionally be stringified by other code.</p>

<h2>Formatting</h2>

<pre><code>str(i)+": "+str(len(msg))
</code></pre>

<p>should be</p>

<pre><code>f'{i}: {len(msg)}'
</code></pre>

<h2>Use <code>is</code></h2>

<p>This</p>

<pre><code>                    if msg != None:
</code></pre>

<p>should be</p>

<pre><code>if msg is not None
</code></pre>

<h2>Set membership</h2>

<pre><code>if str(i)=='Junk E-Mail' or str(i) == 'Deleted Items' or str(i) == 'Sent Items' :
</code></pre>

<p>should be</p>

<pre><code>if str(I) in {'Junk E-Mail', 'Deleted Items', 'Sent Items'}:
</code></pre>
    </div>