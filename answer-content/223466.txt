<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This isn't bad code for someone learning the language, but there are a few things I'd change:</p>

<p>At the top you have:</p>

<pre><code>i_quality = ["Good", "Bad"]
i_quality = random.choice(i_quality)
</code></pre>

<p>And other such lines. The main problem here is you're overwriting <code>i_quality</code>. What if you wanted to generate a second quality later? You overwrote your master list of qualities. Have them as separate variables:</p>

<pre><code>all_qualities = ["Good", "Bad"]
all_bases = ["Sword", "Gun"]
all_elements = ["Fire", "Water"]

i_quality = random.choice(all_qualities)
i_base = random.choice(all_bases)
i_element = random.choice(all_elements)
</code></pre>

<hr>

<p>Be careful how you name things and what the responsibilities of functions are. <code>create_Item</code> does create an <code>Item</code>, but it also prints it out then discards it. Such a function isn't very useful. The caller could have just called the <code>Item</code> constructor themselves and then printed the object if they wanted to. Your function does some formatting, but that would be better off in the <code>__str__</code> method of <code>Item</code>.</p>

<p>What would make for a useful factory function though would be a <code>create_random_item</code> function that returns a random <code>Item</code>. Taking all that together, I'd change this code to something closer to:</p>

<pre><code>import random

all_qualities = ["Good", "Bad"]
all_bases = ["Sword", "Gun"]
all_elements = ["Fire", "Water"]

class Item(object):
    def __init__ (self, quality, base, element):
        self.quality = quality
        self.base = base
        self.element = element

    # What Python will call when you ask it to
    #  display an Item using str
    def __str__(self):
        return self.quality + " " + self.base + " of " + self.element

def create_random_item():
    quality = random.choice(all_qualities)
    base = random.choice(all_bases)
    element = random.choice(all_elements)

    return Item(quality, base, element)

for _ in range(10): # We'll create 10 random weapons and print them out
    item = create_random_item()
    print(str(item)) # str calls item's __str__

Good Gun of Fire
Good Sword of Fire
Bad Sword of Water
Good Sword of Fire
Good Sword of Water
Good Sword of Fire
Bad Gun of Water
Bad Sword of Water
Bad Gun of Water
Bad Sword of Water
</code></pre>

<hr>

<ul>
<li><p>This could be further improved though. Any time you have a closed set of members of a set (like how "fire" and "water" are members of the "elements" set), you should likely being using an <a href="https://docs.python.org/3/library/enum.html" rel="nofollow noreferrer">Enum</a>. They help avoid errors in many cases, and allow IDEs to assist you in auto-completing names.</p></li>
<li><p>In <code>__str__</code>, you could also make use of <a href="https://www.python.org/dev/peps/pep-0498/" rel="nofollow noreferrer">f-strings</a> to avoid needing to manually concat using <code>+</code>. It would be neater to write:</p>

<pre><code>def __str__(self):
    return f"{self.quality} {self.base} of {self.element}"
</code></pre>

<p>That allows for much less noise and allows you to focus more on what you what printed, and less on dealing with opening and closing quotes and <code>+</code>s.</p></li>
<li><p>For the sake of context, <code>create_random_item</code> may make more sense as a <a href="https://stackoverflow.com/questions/735975/static-methods-in-python">static method</a>. It makes it clearer what class it's associated with, since then you'd call the method as:</p>

<pre><code>Item.create_random_item()
</code></pre></li>
</ul>
    </div>