<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There's a lot here that I believe you can improve.  Here are some suggestions that may help you to do that.</p>

<h2>Isolate platform-specific code</h2>

<p>If you must have <code>stdafx.h</code>, consider wrapping it so that the code is portable:</p>

<pre><code>#ifdef WINDOWS
#include "stdafx.h"
#endif
</code></pre>

<p>In this case, it is being seriously abused, so I'd recommend omitting it entirely as in the next few suggestions.</p>

<h2>Avoid relative paths in #includes</h2>

<p>Generally it's better to omit relative path names from #include files and instead point the compiler to the appropriate location.  So don't write this:</p>

<pre><code>#include "engine/timer.h"
</code></pre>

<p>Write this:</p>

<pre><code>#include "timer.h"
</code></pre>

<p>For <code>gcc</code>, you'd use <code>-I</code>. This makes the code less dependent on the actual directory structure, and leaves such details in a <em>single</em> location: a <code>Makefile</code> or compiler configuration file.</p>

<h2>Separate interface from implementation</h2>

<p>In C++, this is usually done by putting the interface into separate <code>.h</code> files and the corresponding implementation into <code>.cpp</code> files.  It helps users (or reviewers) of the code see and understand the interface and hides implementation details.  So instead of having this in <code>Engine.h</code>:</p>

<pre><code>#include "../stdafx.h"
</code></pre>

<p>I would highly recommend something more like this:</p>

<pre><code>#include "graphics.h"
#include "input.h"
#include "timer.h"
#include &lt;string&gt;
#include &lt;chrono&gt;
#include &lt;ctime&gt;
</code></pre>

<p>This way, it's much easier to identify the <strong>real</strong> dependencies for the interface.  For implementation files such as <code>Engine.cpp</code>, one can hide the details of the particular implementation. For example, I'd recommend moving the implementation of <code>get_date()</code> into the <code>.cpp</code> file and moving the <code>&lt;chrono&gt;</code> and <code>&lt;ctime&gt;</code> includes there as well.  Those files are not essential details that a <em>user</em> of the class needs to know.</p>

<h2>Don't hardcode file names</h2>

<p>The font files, bitmaps, etc. might be something that a user of this program has in different locations than you do on your machine.  Because all of these settings are both hardcoded and embedded in the <code>.cpp</code> files, it would be quite tedious to fix all of those paths so that your game works on anyone else's computer.  Use a configuration file instead, or at the very least, isolate the file names within the <code>.h</code> files so that the dependencies are obvious and easy to find and update.</p>

<h2>Don't write this-&gt;</h2>

<p>Within member functions <code>this-&gt;data</code> is redundant. It add visual clutter and does not usually aid in understanding. So for example, we have the existing <code>Engine</code> destructor:</p>

<pre><code>Engine::~Engine() {
    if (this-&gt;display) al_destroy_display(this-&gt;display);
    if (this-&gt;timer) al_destroy_timer(this-&gt;timer);
    if (this-&gt;queue) al_destroy_event_queue(this-&gt;queue);

    delete(this-&gt;gfx);
    delete(this-&gt;input);
}
</code></pre>

<p>It's much less cluttered and easier to read if it's written like this instead:</p>

<pre><code>Engine::~Engine() {
    if (display) {
        al_destroy_display(display);
    }
    if (timer) {
        al_destroy_timer(timer);
    }
    if (queue) {
        al_destroy_event_queue(queue);
    }
    delete(gfx);
    delete(input);
}
</code></pre>

<p>Note also that I've eliminated the single-line <code>if</code> statements.</p>

<h2>Be wary of signed versus unsigned</h2>

<p>The code currently contains this code:</p>

<pre><code>bool Graphics::is_valid_id(unsigned int id)
{
    if (id &lt; 0 || id &gt;= this-&gt;bitmap.size())
            return false;

    if (!this-&gt;bitmap[id])
            return false;

    return true;
}
</code></pre>

<p>However, that first condition <code>id &lt; 0</code> can never be true because it's an unsigned number.  I would simplify this considerably and write it like this:</p>

<pre><code>bool Graphics::is_valid_id(unsigned int id) const
{
    return id &lt; bitmap.size() &amp;&amp; bitmap[id];
}
</code></pre>

<p>Because of <a href="https://en.wikipedia.org/wiki/Short-circuit_evaluation" rel="noreferrer">short-circuit evaluation</a>, the second clause will only be executed if the first one is true.</p>

<h2>Avoid global variables</h2>

<p>There are some very dubious design decisions embedded within the current code.  One is the use of a global <code>Engine</code> object.  Another is the fact that three important data members of <code>Engine</code> are public.  Yet another is the fact those members are all three raw pointers.  All of these make code that is brittle and hard to understand and maintain.  </p>

<h2>Rethink your class design</h2>

<p>It seems that <code>Game</code> should be a class instead of a collection of global variables and some free functions.  It also appears that the <code>GUI</code> class is inextricably bound to the <code>Engine</code> class (and to a global instance) and the <code>Graphics</code> class, but it's unclear which responsibilities belong to which class or why there are three different kinds of objects.  Another peculiar decision is that the <code>Input</code> class appears to only have a pointer to a <code>queue</code> which is actually a member of the <code>Engine</code> class instead of being a member of the <code>Input</code> class.</p>

<h2>Avoid magic numbers</h2>

<p>One of the lines of code here is this:</p>

<pre><code>engine-&gt;gfx-&gt;blit(this-&gt;gfx[(unsigned int)MAIN_ELEMENTS::BACKGROUND], -816 + (i * 48) + xoffset, (y * 48) + yoffset, 0);
</code></pre>

<p>All of those numbers, such as -816 and 48 no doubt mean something, but what?  I'm sure I could figure it out with enough study, but it would be better to use well-named constants to avoid the need to guess.  It also makes the code easier to maintain because if, for example, you wanted to change all instances of 48 to some other value, you wouldn't have to figure out, for each instance, whether this <em>particular</em> 48 is refers to the particular thing you're trying to change or not.</p>

<h2>Use <code>const</code> where possible</h2>

<p>The <code>engine_running</code>, <code>get_event</code>, <code>get_display</code> and <code>get_version</code> functions do not (and should not) alter the underlying <code>Engine</code> object and should therefore be declared <code>const</code>.</p>

<h2>Use const references where practical</h2>

<p>The code currently defines one of its error functions like so:</p>

<pre><code>void Engine::error(std::string message, std::string filepath) {
    printf(message.c_str(), filepath.c_str());
    exit(-1);
}
</code></pre>

<p>Both <code>message</code> and <code>filepath</code> could be passed by <code>const std::string &amp;</code> instead.  </p>

<h2>Eliminate unused variables</h2>

<p>In the following code:</p>

<pre><code>void set_mouse_state(int button, bool is_down) { this-&gt;mouseB = is_down; }
</code></pre>

<p>the <code>button</code> parameter is never used and could be eliminated.</p>
    </div>