<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I think above the repetition, this is the most "urgent" thing to change :</p>

<p><code>build, next = result.append, digits.pop</code> </p>

<p>It is very counter-intuitive. Being explicit with <code>result.append</code> is much clearer and easy to understand that using <code>build</code>. I searched for a little while for a <code>build</code> and <code>next</code> function in your code without finding them, only to realize this hack.</p>

<p>In the method <code>display_values</code>, there's a lot of repetition that could easily be avoided. It would make a lot of sense to have a dictionary that maps <code>Nickel</code> to the value <code>0.05</code>. This way, it would be easy to do :</p>

<pre><code>def display_values():

    money_values = {'nickels' : 0.05, ...}

    for m, amount in money.items():
        d = Decimal(amount  * Decimal(money_values[m]))
        print(amount, 'nickles = ', (moneyfmt(d, curr='$')))

    cashbox_sum()
</code></pre>

<p>Doing this would also simplify <code>cashbox_sum</code> :</p>

<pre><code>def cashbox_sum():

    total = Decimal(0)
    for m, amount in money.items():
        total += (amount * money_values[m]).quantize(Decimal('0.00'))

    print('Cash box total: ', total)
</code></pre>

<p><em>I've never used the <code>Decimal</code> class, but maybe you can actually quantize only at the end?</em></p>

<p>It is also possible to simplify your inputs : </p>

<pre><code>def input_cashbox():

    for m in money.keys():
        while True:
            try:
                entry = int(input('how many ', m, ' are in your cash box? '))
            except ValueError:
                print("\nyou must enter a whole number. e.x. 1, 2, 3... do not enter letters or characters such as $\n")    
            else:
                money[m] = Decimal(entry)
                display_values()
                break
</code></pre>

<p>This would require an effort to refactor <code>change_value</code> but I think you should be able to figure it out with the rest of this review.</p>

<p>I didn't test all of this, but I'm sure it would reduce the code duplication a lot.</p>
    </div>