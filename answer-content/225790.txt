<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I won't comment on the things you already mentioned you are planning to implement in the future, except that as Ilya Popov already said, you can use <code>SDL_RENDERER_PRESENTVSYNC</code> to have SDL limit the frame rate for you.</p>

<h1>Don't abbreviate names too much</h1>

<p>Computers have enough RAM and storage space nowadays that you don't have to skimp on characters for variable and function names. Try to only use abbreviations that are so common that there is little chance that someone would not understand what is meant. While <code>N</code> is a common abbreviation for "number-of-things", and <code>i</code> is standard idiom for a loop iterator, someone who isn't familiar with fluid dynamics might not know that <code>VISC</code> is short for viscosity or <code>DIFF</code> for diffusion. Just spell them out. If names get very long, there might be good reasons to abbreviate. But resist removing just a few vowel here and there for no good reason; write <code>set_bounds()</code> instead of <code>set_bnd()</code>, and so on.</p>

<p>If you do need to abbreviate a name to keep the code readable, such as with <code>IX()</code>, then add a comment to explain what this function is supposed to do.</p>

<h1>Use descriptive names</h1>

<p>Some variables don't make sense to me at all. They are not even abbreviations, just one-character placeholders. For example, in <code>set_bnd()</code>, what is <code>b</code>? What is <code>x</code>? Even for a physicist or mathematician, <code>x</code> usually means the x-coordinate, so having this be a two-dimensional array is very confusing.</p>

<p>Another example is <code>nsize</code>. I know <code>N</code> is the grid size (it said so in the comments, and it's not too uncommon a name for a size, and we are simulating a grid here), the name <code>nsize</code> looks kind of redundant. But actually, it's the number of elements in the simulation grid with an added border. If there is no better name for it, describe this constant in a comment.</p>

<h1>Use ALL_CAPS names only for macros</h1>

<p>Using ALL_CAPS names is normally only used to warn the reader that something is not a regular variable or function, but a macro. Since you are declaring const variables, use lower case for all of them.</p>

<h1>Don't put multiple statements on one line</h1>

<p>It's easy to miss that a line consists of multiple statements. And especially when a line contains <code>if</code>-statements, it becomes hard to see what is part of the <code>if</code>-statement and what not.</p>

<h1>Add spaces around operators, after commas</h1>

<p>Whitespace around operators and between elements of a comma-separated lists really help readability of the code.</p>

<h1>Use a code formatter</h1>

<p>Try to use a code formatter such as <code>indent</code>, <code>astyle</code> or <code>clang-format</code> to automatically reformat your code. Have a look at the output of those tools with their default settings.</p>

<h1>Make variables and functions <code>static</code> if possible</h1>

<p>If a variable or function is only used in the same file as where it is declared, then make them <code>static</code>. This prevents the names of those variables and functions from clobbering the global namespace, and can help the compiler produce more efficient code.</p>

<h1>Use <code>SDL_PollEvent()</code></h1>

<p>Instead of calling <code>SDL_PumpEvents()</code> and ignoring all <em>events</em> (you are just querying the mouse <em>state</em>), you should call <code>SDL_PollEvent()</code> process the events. Indeed, most events are not important for your program and you can ignore them, and in this case the mouse handling is probably fine, but at least handle  <code>SDL_QUIT</code> events so the user can stop your program by closing the window.</p>

<p>The proper way to do this is to do this in <code>process_input()</code>:</p>

<pre><code>SDL_Event event;

while (SDL_PollEvent(&amp;event)) {
    switch(event.type) {
        case SDL_QUIT:
            // signal the main loop to quit somehow
            break;
        default:
            break;
    }
}
</code></pre>

<h1>Consider making a struct for all grid element properties</h1>

<p>Each grid element has several properties, such as velocity, density, whether it is part of the boundary or not, and so on. You have split the grid into several arrays, one for each property. It is usually much better to then create a class or struct that describes all the properties of a grid element, and then make an single array out of that struct. This reduces the number of pointers you have to pass around to the various functions. And if you are dealing with vectors, you might want to make a struct for that too. For example:</p>

<pre><code>// A 2-dimensional vector
struct vec2 {
    float x;
    float y;
};

struct grid_element {
    vec2 velocity = {};
    float density = {};
    bool bound = {};
};

std::vector&lt;grid_element&gt; grid(nsize);
</code></pre>

<h1>Use a library for vectors and/or multidimensional arrays</h1>

<p>You can make your life easier by using one of the many C++ libraries around that implement vector types and multidimensional arrays. The only issue is that there are many to choose from, each with their own pros and cons.</p>

<h1>Don't mix stdio and iostream</h1>

<p>In <code>console_write()</code>, you use both <code>printf()</code> and <code>std::cout &lt;&lt; "\n";</code>. The problem is that <code>printf()</code> is a C stdio function, and <code>std::cout</code> is a C++ iostream. These are two different things, they can each have their own implementation of buffering. The resulting output might not be what you expect. So be consistent and use only one of them.</p>

<p>(I personally recommend you either using <code>printf()</code>, or use <a href="https://github.com/fmtlib/fmt" rel="noreferrer">fmtlib</a>. The latter is pure C++, is very similar to <code>printf()</code> except that it uses the Python way of format string notation, and it will become standard in C++20.)</p>
    </div>