<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your code can be simplified a little bit:</p>

<pre><code>use std::collections::VecDeque;
use std::ffi::{OsStr, OsString};
use std::io;
use std::path::PathBuf;

fn find(query: &amp;str, start: &amp;OsStr) -&gt; io::Result&lt;Vec&lt;PathBuf&gt;&gt; {
    let start = PathBuf::from(start);
    let mut dirs = VecDeque::from(vec![start]);
    let mut result = Vec::new();

    while let Some(dir) = dirs.pop_front() {
        for entry in dir.read_dir()? {
            let path = entry?.path();
            if path.is_dir() {
                dirs.push_back(path.clone());
            }
            if let Some(name) = path.file_name() {
                if query.is_empty() || query == name {
                    result.push(path.clone());
                }
            }
        }
    }
    Ok(result)
}

fn main() -&gt; io::Result&lt;()&gt; {
    let mut args = std::env::args().skip(1);
    let query = args.next().unwrap_or(String::new());
    let start = args.next().map(OsString::from).unwrap_or(OsString::from("."));

    for path in find(&amp;query, &amp;start)? {
        if let Some(p) = path.to_str() {
            println!("{}", p);
        }
    }
    Ok(())
}
</code></pre>

<p>In your function <code>find</code>, <a href="https://stackoverflow.com/questions/40006219/why-is-it-discouraged-to-accept-a-reference-to-a-string-string-vec-vec-or/40006220">you should use the borrowed version of <code>String</code> and <code>OsString</code> as parameters</a>; or you can just move the value if you think that <code>query</code> or <code>start</code> will not be needed anymore in the main.</p>

<p>In you main, you can take advantage of the <code>Iterator</code>'s and <code>Option</code>'s methods to make a more concise and cleaner code:</p>

<ul>
<li>You create an iterator that will iterate over all args but the first using <code>skip</code>;</li>
<li>The query is the next item: if there is no item, you give a default value with <code>unwrap_or</code>;</li>
<li>For the next item, first you apply a function to the inner with <code>map</code>, and then you provide a default value;</li>
<li>Your main can return a <code>Result</code>, so you do not need to make the error handling by hand.</li>
</ul>

<p>Just a little thing: the idiomatic way to do such an algorithm in Rust is to implement an <code>Iterator</code>. In you code you do an unnecessary allocation for all your found files.</p>
    </div>