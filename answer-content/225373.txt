<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Alright time to give this a shot!</p>

<h2>Code style</h2>

<p>I won't go in deep details, but the PEP8 standard is that methods should use <code>snake_case</code> not <code>camelCase</code>. You can do whatever you want with this information.</p>

<h2>Comments</h2>

<p>In my opinion, there are way too many comments in your code. Most of them can be removed with some refactoring. I'll try to target the different reasons why some things shouldn't be commented and the associated refactors for them.</p>

<p>There's one for which I don't have a refactor, because it's an old-school method of doing this that, I believe, shouldn't be done anymore : </p>

<pre><code>""" Variables 
================"""
</code></pre>

<p>Don't do this. People that will read your code will figure out that variables are following. If you change your code over time and keep this comment it's probable that this comment will become obsolete.</p>

<p>There's also the case of this comment : <code># if we sent a False as return value we close the "pipeline" of streams</code> which just brings a load of confusion in the code. This comment probably doesn't need to exist as when we will see where the method <code>on_data</code> is called, we'll figure it out ourself.</p>

<h3>Refactor 1 : Replace comments with better variable names.</h3>

<pre><code>maxTweets = 100000 # max number of tweets to analyse.
</code></pre>

<p>If you feel the need to put this comment, it's probably because your variable isn't well named. If you named your variable <code>maxTweetsToAnalayse</code> you wouldn't need the comment.</p>

<pre><code>self.counter = 0            # Counts amount of tweets already got
</code></pre>

<p>Same here, you should rename your variable, maybe <code>loadedTweetsCount</code> or something like that?</p>

<pre><code># Checks so that the coordinate is in the tweet
if (datadict.get('place') != None):
</code></pre>

<p>Could be replaced by :</p>

<pre><code>coordinateIsInTweet = datadict.get('place') != None
if coordinateIsInTweet:
</code></pre>

<h3>Refactor 2 : Write validation rules for comments stating rules.</h3>

<pre><code># max 250 input searches in a list of strings
</code></pre>

<p>That's something your code should be aware of. Instead of this comment, why not validate it in the code?</p>

<pre><code>if len(searches) &gt; 250:
   raise ValueError("Exceeded maximum searches inputs")
</code></pre>

<h3>Refactor 3 : Write a method for a comment explaining a bunch of code lines.</h3>

<pre><code># Get the Authentication keys from another file. (Easier to push to git)
# Twitter API needs to be validated
</code></pre>

<p>Instead of having this comments, why not do this :</p>

<pre><code>def getTwitterAuthToken():
    with open("/Users/se/Documents/Lek med Python/pyCharmProjects/dataScienceFromScratch/src/twitterKeys.txt","r") as file:
        CONSUMER_KEY        = file.readline().rstrip()
        CONSUMER_SECRET     = file.readline().rstrip()
        ACCESS_TOKEN        = file.readline().rstrip()
        ACCESS_TOKEN_SECRET = file.readline().rstrip()

    auth = tweepy.OAuthHandler(CONSUMER_KEY, CONSUMER_SECRET)
    auth.set_access_token(ACCESS_TOKEN, ACCESS_TOKEN_SECRET)

    return auth
</code></pre>

<p>The first comment was unnecessary, there are plenty of reasons why a configuration file is better than having hardcoded credentials in your code and your code is clear enough that well... the comment isn't necessary.</p>

<h3>Refactor 4 : Use documentation instead of single line comments</h3>

<pre><code># The class takes in a stream of tweets and filter out some specific properties.
# It is a live streaming so it will be kind of slow and in this purpose i filter
# the Coordinates which only around 3-4% of all tweets have.
</code></pre>

<p>This explains what the class does, so it should be inside the class. You can create class documentation by doing this (More info <a href="https://sphinxcontrib-napoleon.readthedocs.io/en/latest/example_google.html" rel="nofollow noreferrer">here</a>):</p>

<pre><code>class Stream2Screen(tweepy.StreamListener):

    """The class takes in a stream of tweets and filter out some specific properties.
    It is a live streaming so it will be kind of slow and in this purpose i filter
    the Coordinates which only around 3-4% of all tweets have."""
</code></pre>

<p>Same can be done for methods : </p>

<pre><code># This is the method that receives the tweet in the name of data.
def on_data(self, data):
</code></pre>

<p>Becomes </p>

<pre><code>def on_data(self, data):
    """This is the method that receives the tweet in the name of data."""
</code></pre>

<p>That's about it for comments, I think this was the biggest "weakness" in the code and those refactorings will help make the code much better.</p>
    </div>