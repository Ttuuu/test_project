<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>A major drawback of this design is that you <strong>cannot reuse a single instance of <code>structure.structure</code> to read multiple records</strong>.  Instead of <code>s.fill(file_ptr)</code>, consider making a method <code>s.read(f)</code> that returns an <code>OrderedDict</code> of the deserialized data.  (By the way, mentioning "pointer" in a parameter name isn't very Pythonic.)  Note that that would also replace your <code>.get_value()</code> method with a dictionary lookup, which can be dealt with more idiomatically. (Or, at least implement dict-compatible iteration and subscripting in your <code>structure</code> class.)</p>

<p>Switching to a reusable <code>.read()</code> method would also eliminate a point of awkwardness in your code, which is that <code>._table</code> is a <strong>dict of dicts</strong>, each having a <code>"format"</code> and a <code>"value"</code>.</p>

<p>In your implementation of <code>.fill()</code>, why not call <strong><code>.unpack_from(file_ptr)</code></strong> instead of <code>.unpack( file_ptr.read( self.get_size() ) )</code>?</p>

<p>A <strong>more natural default endianness</strong> would be either big-endian (because that is the standard Network Byte Order) or host byte order (because that is a non-opinionated choice that also happens to be the path of least resistance).</p>

<p>Whatever you design, it should accommodate the opposite operation — serializing data to a file.</p>

<p>Consider allowing a <code>structure</code> to contain nested <code>structure</code>s as fields.</p>

<p>The <code>.show()</code> method should probably be <code>.__str__()</code> instead.</p>

<p>I'm not convinced of the benefit of <strong>requiring multiple calls to <code>.add_field()</code> to set up the <code>structure</code></strong>.  I'd prefer to have the constructor accept the field specification as a list of 2-tuples.  Not only would the calling code be cleaner, but the implementation of the <code>structure</code> class would be simpler as well if it is immutable.</p>

<p>I'm not a fan of your <strong>printed warnings</strong>.  Utility code, such as this, has absolutely no business contaminating <code>sys.stdout</code>, and ideally shouldn't print to <code>sys.stderr</code> either.  An end user would be completely clueless about what to do about these "warnings".  A programmer would also be puzzled about where these warnings came from (if it's a large program) and what actually happened as a consequence.  Rather, you should decide to either tolerate these situations gracefully or raise exceptions.  In my opinion…</p>

<ul>
<li>"Field with name … already exists" should raise an <code>ArgumentError</code>.</li>
<li>"Format cannot be an empty string" should be tolerated (or perhaps an assertion failure).</li>
<li>"There is no such field" would be eliminated altogether based on my suggestion to return an <code>OrderedDict</code>.  If you had to offer a <code>.get_value()</code> method, then you should just let the <code>KeyError</code> propagate.</li>
</ul>
    </div>