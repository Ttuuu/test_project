<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>If you want enough size to fit a <code>void*</code> then actually use <code>sizeof(void*)</code>. If you really want to use an integer type instead of a pointer type then use <code>intptr_t</code> instead of <code>size_t</code>.</p>

<pre><code>size_t member_size = MAX(sizeof(void*), size);
</code></pre>

<p>You leak if you fail to allocate the actual pool:</p>

<pre><code>if (NULL == ret-&gt;mem) {
    free(ret);
    return NULL;
}
</code></pre>

<p>Initializing the pool can be done simpler:</p>

<pre><code>// Assign each member with the address of the next member
size_t i;
for (i = 0; i &lt; nmemb - 1; i++) {
    *temp = (void*) ((char*)temp + member_size);
    temp = (void*) ((char*)temp + member_size);
}
</code></pre>

<p>You can also avoid that entire initialization loop by using an extra member that marks the high water mark (the furthest element that was ever allocated) and is used when <code>allocator-&gt;currentFree == NULL</code>:</p>

<pre><code>void* FixedPoolAllocator_alloc(FixedPoolAllocator *allocator)
{
    if (NULL == allocator) return NULL;

    if (NULL == allocator-&gt;currentFree)
    {
        // nothing in freelist, increment highWater
        if (allocator-&gt;highWater == ret-&gt;numOfMembers) return NULL;

        void *ret = (void*) (allocator-&gt;mem + allocator-&gt;highWater);
        allocator-&gt;highWater += allocator-&gt;memberSize;
        return ret;
    }

    // Return the currently free member and update currentFree to the next member in the list
    void *ret = allocator-&gt;currentFree;
    allocator-&gt;currentFree = (void*)*allocator-&gt;currentFree;

    return ret;
}
</code></pre>
    </div>