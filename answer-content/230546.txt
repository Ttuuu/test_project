<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Counter intuitive?</h2>

<h3>Infinite loops.</h3>

<p>The function is an iterator so this may not be undesired or potentially fatal for the application. However some inputs would make one wonder about the callers intent.</p>

<pre><code>numrange(0, 100, 0); // will endlessly return 0
numrange(0, 100, -1); // will return 0, -1, -2, ... Infinity
numrange(0, -100, 1); // will return 0, 1, 2, ... Infinity
</code></pre>

<h3>Not part of sequence.</h3>

<p>There are situation where the last value can be out of sequence</p>

<pre><code>numrange(0, 4, 2); // will return 0, 2.5, 4.
</code></pre>

<p>Or two values are returned rather than one.</p>

<pre><code>numrange(4, 4, 1); // will return 4, 4.
</code></pre>

<h2>Names</h2>

<ul>
<li>The function name should be <code>numRange</code> to be consistent with JS camelCase convention.</li>
<li>The argument <code>ival</code> (should be <code>iVal</code>) in <code>shouldLoop</code> is excessive, you could just have used <code>i</code>.</li>
<li>The function name <code>shouldLoop</code> can also be simplified as it expresses a question "should loop?" which can be shortened considering the context of its use to "loop?"</li>
</ul>

<h2>Logic and flow</h2>

<p>The function <code>shouldLoop</code> is called 2 times each iteration, there is no need to do this, on top of this there are cases where the first clause of the inner statement is redundant. eg <code>numRange(0, 20, 1.01)</code> BTW use strict inequality <code>!==</code> rather than <code>!=</code></p>

<p>You can improve efficiency if you removed the inner statement and yielded <code>end</code> after the loop. You would also need to change the return condition inside the function <code>shouldLoop</code> to <code>start &gt; end ? ival &gt; end : ival &lt; end</code></p>

<p>Each time you iterate you test if <code>start &gt; end</code> This is known from the very start of the function and is thus repeating the same logic for no need. Use the condition to assign one  of two functions and avoid the repeated logic.</p>

<h2>Rewrite</h2>

<p>Thus you can have the same behavior as your original code with</p>

<pre><code>function* numRange(start = 0, end = 100, step = 1) {
    const loop = start &gt; end ? (i) =&gt; i &gt; end : (i) =&gt; i &lt; end;
    if (start &gt; end) { step = -1 * step }
    for (let i = start; loop(i); i += step) { 
        yield i;
    }
    yield end;
}
</code></pre>

<h2>Example</h2>

<ul>
<li>Fixing what I see as problems (as outlined at the start of the answer) 

<ul>
<li>Ensure that step is in the correct direction no matter what its sign.</li>
<li>Check if step is 0 and just return the <code>start</code> if so.</li>
<li>Check if end is part of the sequence and ignore it if not.</li>
</ul></li>
<li>Using the <code>var</code> as argument <code>start</code> to count.</li>
</ul>

<p>.</p>

<pre><code>function* numRange(start = 0, end = 100, step = 1) {
    step = Math.sign(end - start) * Math.abs(step);
    if (step) {
        const loop = step &gt; 0 ? () =&gt; start &lt; end : () =&gt; end &lt; start;
        while (loop()) {
            yield start;
            start += step;
        }
        if (start !== end) { return }
    }
    yield start; 
}
</code></pre>
    </div>