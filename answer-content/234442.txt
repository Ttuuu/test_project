<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Using class inheritance</h1>

<p>You can use class inheritance, the constants do inherit. I don't think the boilerplate is that much compared to the constexpr variable approach with designated initializer. It would look like:</p>

<pre><code>struct Mode {
    const char esc[2] = {};
    ...
};

struct TextMode: Mode {
};

struct BoxDrawMode: Mode {
    BoxDrawMode(): Mode {
        .esc ="\x1b",
        .cls ="\x1b[2J",
        ...
    } {
    }
};
</code></pre>

<p>So just a few extra lines to declare the constructor.
However, I don't see any benefit over the approach you posted, and one big issue is that <code>BoxDrawMode</code> has a non-trivial constructor, so you can't instantiate a <code>constexpr</code> variable of that type.</p>

<h1><code>const</code> and <code>constexpr</code></h1>

<p>I think you got that right. For performance it will not matter much whether <code>text_mode</code> and <code>box_draw_mode</code> are <code>static const</code> or <code>static constexpr</code> though.</p>

<h1>Consider making <code>Terminal</code> templated</h1>

<p>One issue with your approach is that the types of the member constants in <code>Mode</code> are fixed. Either you are wasting space by having arrays for things like colors that are not used by <code>text_mode</code>, or you might actually not have big enough arrays to hold data for future modes. For example, if you would add a Unicode box drawing mode, then you would need more than a single <code>char</code> for <code>horiz</code>, <code>vert</code> and so on.</p>

<p>However, if you make <code>struct Terminal</code> a template that accepts any type of struct that contains the mode information, then you don't have this issue. For example:</p>

<pre><code>struct TextMode {
    const char esc[] = "";
    ...;
    const char intersec = '|';
};

struct BoxDrawMode {
    const char esc[] = "\x1b",
    ...
    .intersec = '\x6e';
};

template&lt;typename Mode = TextMode&gt;
struct Terminal {
    constexpr Terminal() {...};
    ...
};
</code></pre>

<p>And then use it like so:</p>

<pre><code>vt100::Terminal&lt;TextMode&gt; t1;
vt100::Terminal&lt;BoxDrawMode&gt; t2;
vt100::Terminal t3; // selects TextMode by default
</code></pre>

<p>The drawback is that if you have to pass an instance of <code>Terminal</code> as an argument to another function, then that function has to handle all possible variants of <code>Terminal</code>, so it likely has to be templated itself, or you have to derive <code>Terminal&lt;&gt;</code> from a base class.</p>

<p>With this approach, you can also change the member variables of the various modes from being <code>const</code> to <code>static constexpr</code>.</p>
    </div>