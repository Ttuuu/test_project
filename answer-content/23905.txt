<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<pre><code>function fuzzy_match(str,pattern){
    pattern = pattern.split("").reduce(function(a,b){ return a+".*"+b; });
    return (new RegExp(pattern)).test(str);
};
</code></pre>

<ol>
<li><p>String concatenation is slow. The reason is that you need to allocate new memory anytime you concatenate two strings. A smart compiler may optimise that,  but not too much. However, what you are trying to do with that <code>reduce</code> already exists, and it's called <code>join</code>:</p>

<pre><code>pattern = pattern.split("").join(".*")
</code></pre></li>
<li><p>The regex itself can be optimised: <code>.*</code> initially grabs as much as possible, then retracts only if the rest doesn't match. This takes a larger than neccessary amount of backtracking to find out. Instead, you could use a reluctant quantifier: <code>.*?</code>. This attempts to match as little as possible. If a match is found, it is found without backtracking. However, it still does a lot of backtracking if there is no match. We can do better: <code>a[^b]*b</code> (at this point, it doesn't really matter if the quantifier is greedy). A possessive quantifier (<code>a[^b]*+b</code>) would be even better, but <a href="https://stackoverflow.com/a/2824334/499214">javascript doesn't support these</a>. Using a character class deprives us of a join, but see the next point.</p>

<pre><code>pattern = pattern.split("").reduce(function(a,b){ return a+'[^'+b+']*'+b; });
</code></pre></li>
<li><p>Since you are complaining about an operation that <a href="http://jsperf.com/fuzzy-match" rel="noreferrer">takes about 3000 ns</a> (as noted in the comments), it can be assumed you are doing a <em>lot</em> of queries. If there are very few patterns, you can cache your regexes. <a href="http://underscorejs.org" rel="noreferrer">Underscore.js</a> has a handy function that I'll demonstrate, but you could easily build the cache yourself.</p>

<pre><code>var cache = _.memoize(function(pattern){
  return new RegExp(pattern.split("").reduce(function(a,b){
    return a+'[^'+b+']*'+b;
  })
})
function fuzzy_match(str,pattern){
  return cache(pattern).test(str)
};
</code></pre></li>
<li><p>If there is a lot of repetition among the tested strings, you should use these as a pattern instead, and the pattern as the tested string. This is even easier. I will also demonstrate how to scope your variables using the export pattern. Also, a bugfix must be inserted here (we can't assume all characters in the string are alphanumeric), to properly escape non-alphanumeric characters: </p>

<pre><code>var fuzzy_match = (function(){
  var cache = _.memoize(function(str){
    return new RexEgp("^"+str.replace(/./g, function(x){
      return /[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/.test(x) ? "\\"+x+"?" : x+"?";
    })+"$");
  })
  return function(str, pattern){
    return cache(str).test(pattern)
  })
})()
</code></pre></li>
</ol>

<hr>

<p>Concerning the last regex:</p>

<p>Given some pattern <code>"ace"</code>, the regex you build (<code>/a.*c.*e/</code>) tests if the string contains the characters of the pattern in the string, in the correct order. </p>

<p>If you want to test if a given string "abcde" is matched some pattern: The pattern must only contain the characters of the string, in the correct order: <code>/^a?b?c?d?e?$/</code>. To do this, we regex-escape every regex special character (pattern source: <a href="https://stackoverflow.com/questions/3446170/escape-string-for-use-in-javascript-regex">CoolAj86</a>), make every character optional (<code>?</code>), and flank the regex with string boundary anchors.</p>
    </div>