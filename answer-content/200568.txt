<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Bug</h1>

<ul>
<li>Your code does not work when either the left or right array is empty.</li>
</ul>

<blockquote>
<pre><code>left_item = items1[left_pointer]
right_item = items2[right_pointer]
</code></pre>
</blockquote>

<p>When <code>item1</code> or <code>item2</code> is an empty <code>array</code> this will break with an <code>IndexError</code>. </p>

<blockquote>
<pre><code>if right_pointer &gt;= len(items2):
    sorted_list.extend(items1[left_pointer:])
    break
if left_pointer &gt;= len(items1):
    sorted_list.extend(items2[right_pointer:])
    break
</code></pre>
</blockquote>

<p>You should move this piece of code up to avoid the issue. Now it will break when either is empty.</p>

<h1>Tests</h1>

<ul>
<li>I think you can improve your tests quite some bit using the <a href="https://docs.python.org/3/library/unittest.html" rel="nofollow noreferrer">builtin <code>unittest</code></a> framework.</li>
</ul>

<hr>

<pre><code>import unittest

class TestMergeSort(unittest.TestCase):
    def test_normal_merge(self):
        left = [1, 4, 7]
        right = [2, 3, 6, 9]
        out = [1, 2, 3, 4, 6, 7, 9]
        self.assertEqual(merge(left, right), out)

    def test_right_empty(self):
        left = [1, 4, 7]
        right = []
        out = [1, 4, 7]
        self.assertEqual(merge(left, right), out)

    def test_left_empty(self):
        left = []
        right = [2, 3, 6, 9]
        out = [2, 3, 6, 9]
        self.assertEqual(merge(left, right), out)

if __name__ == "__main__":
    unittest.main()
</code></pre>

<h1>Merge function</h1>

<ul>
<li>An easier way would be to <code>pop</code> the left sides (<code>index=0</code>) of the list and append to the result until either one is empty, after that you can add the remaining to the result.</li>
<li><strong>Naming</strong>: I believe you should rename your <code>item1</code> and <code>item2</code> to <code>left</code> and <code>right</code> for clarity.</li>
<li>This will no longer have the bug, that it will raise an <code>IndexError</code> when either of the <code>list</code>'s are empty.</li>
</ul>

<hr>

<pre><code>def merge_sorted_lists(left, right):
    result = []
    while left and right:
        if left[0] &lt; right[0]:
            result.append(left.pop(0))
        else:
            result.append(right.pop(0))
    return result + left + right
</code></pre>
    </div>