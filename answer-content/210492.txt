<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><a href="https://codereview.stackexchange.com/a/210451/140921">@Reinderien's answer</a> makes a very good point about docstrings and using those to describe your code: it would be much easier to understand if I knew what the various components are generally intended to do. There's a PEP about docstring formatting: <a href="https://www.python.org/dev/peps/pep-0257/" rel="nofollow noreferrer">PEP 257</a>. The comments in the REPL.it link are pretty good except normal comments should come the line <em>before</em> the thing they're commenting, not at the right side of the line.</p>

<p>You could use a more descriptive name than <code>temp_dict</code>: at first I was very confused because you iterated over a dict, continually reassigning it for no reason, but then I realized you were recursively building a tree. I would suggest <code>child_dict</code>.</p>

<p>Similarly, <code>a</code> is not a very descriptive variable name. Even though it's only used once, you should still name it something slightly more descriptive, even if it's only 1 word, like <code>path</code>.</p>

<p>This is a relatively minor <a href="https://en.wikipedia.org/wiki/Don%27t_repeat_yourself" rel="nofollow noreferrer">DRY</a> infraction, but you use the conditional structure:</p>

<pre><code>if token["type"] == "tree" and "/" not in token["path"]:
  # path 1 ...
elif token["type"] == "tree" and "/" in token["path"]:
  # path 2 ...
</code></pre>

<p>when you should use the structure:</p>

<pre><code>if token["type"] == "tree":
  if "/" not in token["path"]:
    # path 1
  else:
    # path 2
</code></pre>

<p>The second form is preferred both because it's (trivially) more efficient, but more importantly, it makes the dichotomy between the two paths clear for future modification and maintenance. If you pay close attention to your control flow in general, you will often find simplifications like this.</p>

<h2>General miscellaneous improvements</h2>

<p>You imported <code>pprint</code> but never used it. You should remove unused imports. Code linters like <a href="https://www.pylint.org/" rel="nofollow noreferrer">PyLint</a> help you avoid things like this.</p>

<p>You should add an <code>if __name__ == '__main__'</code> guard to the bottom of your program, so that people can import your program without running the example. This is a general good practice you should almost always follow.</p>

<p>2 spaces is not my preferred indentation, and <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">PEP 8</a>, the widely-used style guide for Python, happens to agree: <a href="https://www.python.org/dev/peps/pep-0008/#indentation" rel="nofollow noreferrer">"Use 4 spaces per indentation level"</a>. It doesn't really make that much difference, but it is <em>slightly</em> easier to read if you're used to it, and it's the style I see other Python programmers use. I do recommend checking out PEP 8 and starting to learn its suggestions if you haven't already, because it helps create more standard looking code.</p>
    </div>