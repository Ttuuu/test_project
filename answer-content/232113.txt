<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Forgive me, I am unable to review the rust code because I do not know rust, I am only reviewing the c++ code..</p>

<h2>Use System Defined Exit Codes</h2>

<p>Returning <code>-1</code> as an exit code from a c++ program is rather uncommon, the generally accepted values to return from a c++ program are zero for success and one for failure. What is even better is that if the cstdlib header is included then the symbolic constants <a href="https://en.cppreference.com/w/cpp/utility/program/EXIT_status" rel="noreferrer"><code>EXIT_SUCCESS</code> and <code>EXIT_FAILURE</code></a> are available for use which makes the program more readable and very portable.</p>

<pre><code>int main(int argc, char *argv[]) {
    if (argc &lt; 5) {
        std::cerr &lt;&lt; "not enough arguments!\nlambda, m1, m2, max_time";
        return EXIT_FAILURE;
    }
</code></pre>

<p>In the error message above, unless the user is familiar with what <code>lambda</code>, <code>m1</code>, <code>m2</code> and <code>max_time</code> are the message may be unclear to the user.</p>

<h2>Complexity</h2>

<p>The function <code>main()</code> is too complex (does too much). As programs grow in size the use of <code>main()</code> should be limited to calling functions that parse the command line, calling functions that set up for processing, calling functions that execute the desired function of the program, and calling functions to clean up after the main portion of the program.</p>

<p>There is also a programming principle called the Single Responsibility Principle that applies here. The <a href="https://en.wikipedia.org/wiki/Single_responsibility_principle" rel="noreferrer">Single Responsibility Principle</a> states:</p>

<blockquote>
  <p>that every module, class, or function should have responsibility over a single part of the functionality provided by the software, and that responsibility should be entirely encapsulated by that module, class or function.</p>
</blockquote>

<p>There are many possible functions in <code>main()</code>:<br>
  - Process the command line arguments<br>
  - Process the states<br>
  - An <code>inserter</code> function rather than a lambda declaration<br>
  - A <code>report</code> function rather than a lambda declaration<br>
  - Print the output  </p>

<p>The declarations for the <code>stats_t</code> struct, and the enums <code>event_t</code> and <code>state_t</code> should be moved out of <code>main()</code>.</p>
    </div>