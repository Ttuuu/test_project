<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Four things come to mind immediately:</p>

<p>(1) You’re doing a lot of memory allocations.</p>

<p>(2) You’re doing a lot of copying of arrays.</p>

<p>(3) You have some unnecessary calls to pow() (which is very slow).</p>

<p>(4) You’re actually computing a factorial.</p>

<p>I think we can take care of (1) and (2) together.  You have a lot of calls to B() that can eliminated if you implement a new version of mean() that works with an array subrange, rather than using bMean() to allocate, copy, and deallocate an array every single time it’s called.  (This will also cut down on memory use, and likely do wonders for cache friendliness.)</p>

<p>Perhaps something like this (WARNING: untested code):</p>

<pre><code>public static double sum(double[] x, int i, int L) {
    double s = 0;
    int hi = i + L;
    while (i &lt; hi)
        s += x[i++];
    return s;
}

// Mean of an array
public static double mean(double[] x, int i, int L) {
    return sum(x, i, L)/((double) L);
}
</code></pre>

<p>Now all your calls to bMean() become calls to mean(), and will avoid a memory allocation, L copies of doubles, and a memory deallocation.  It would be really interesting to track memory usage before and after the change.</p>

<p>Another place where item (2) can be avoided is in rowMeans().  Since you’re accessing the array by columns, there is no need to copy each row.  Just use</p>

<pre><code>means[i] = mean(x[i]);
</code></pre>

<p>For item (3), you can optimize your frequent calls to pow(2, i).  If i is always than 64, use</p>

<pre><code>x = 1L &lt;&lt; i
</code></pre>

<p>If i is always less than 32, use</p>

<pre><code>x = 1 &lt;&lt; i
</code></pre>

<p>Otherwise, use a lookup table:</p>

<pre><code>private static double[] pow2 = { 1.0, 2.0, 4.0, 8.0, … };   // up to the size you need
// later…
x = pow2[i];
</code></pre>

<p>If i can be greater than 64, just compute the table once rather than manually.</p>

<p>Finally, item (4) can also be sped up considerably using a lookup table.</p>

<pre><code>private static double[] fact = { 1.0, 1.0, 2.0, 6.0, 24.0, … };  // up to the size you need
</code></pre>

<p>Again, if you need large factorials and don’t want to compute the table manually, compute the table once up front and then do a lookup.</p>
    </div>