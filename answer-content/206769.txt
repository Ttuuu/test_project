<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li>Usually, only working code can be reviewed. Here you have missing includes, missing <code>using</code> directive, ...</li>
<li>Don't declare multiples variables on the same line</li>
<li>Defines variables in the closest scope possible, here, after checked opening file.</li>
<li>Here, since your values (time, volt, ampere) seems to be packaged together, why doesn't package them in a struct?</li>
<li>In the same way, your max* and min* values come in pair, use a <code>std::pair</code>.</li>
<li>You declare your values as double but assign an integer. Instead, assign <code>0.0</code> and <code>10.0</code></li>
<li>Instead of a whole nested if, use a guard clause, as showed by @TobySpeight</li>
<li>Comparing floating points can sometime give wrong results, be carefull, and maybe backup on a safer way to do it. (<a href="http://c-faq.com/fp/fpequal.html" rel="nofollow noreferrer">more info</a>)</li>
<li>If max volt equal current volt, you don't want to reassign, so a comparison "lower-than" should be sufficient. Or change the relation in the comparison between min volt and current volt to be consistent.</li>
<li>Skip your first line with <code>myFile.ignore(std::numeric_limits&lt;std::streamsize&gt;::max(), '\n');</code> (need to <code>#include &lt;limits&gt;</code>).</li>
<li>Why place values in strings and after, convert to doubles? Put directly to doubles!</li>
<li>Using <code>std::endl</code> send a <code>'\n'</code> char and then flushes the output buffer, you don't have to pay for a flush unless you know you have to. And when you want it, explicitly use std::flush to show your intends.</li>
<li>You don't want to explicitly close the stream, the <code>RAII</code> magically do it for you.</li>
</ul>

<p>Putting it all together, it gives:</p>

<pre><code>#include &lt;fstream&gt;
#include &lt;iostream&gt;
#include &lt;limits&gt;
#include &lt;utility&gt;

struct Record
{
    double volt{};  
    double time{};
    double ampere{};  
};

int main()
{
    std::ifstream myFile("records.txt");

    if (!myFile) {
        std::cerr &lt;&lt; "Couldn't open input file";
        return 1;
    }

    myFile.ignore(std::numeric_limits&lt;std::streamsize&gt;::max(), '\n');

    Record current{};
    auto minmax = std::make_pair&lt;Record, Record&gt;({10.,10.,10.}, {0.,0.,0.});

    while (myFile &gt;&gt; current.time &gt;&gt; current.volt &gt;&gt; current.ampere) {
        if (current.volt &lt; minmax.first.volt) {
            minmax.first = current;
        }
        if (current.volt &gt; minmax.second.volt) {
            minmax.second = current;
        }
    }

    //Display the Minimum results
    std::cout &lt;&lt; "Min Volt: "   &lt;&lt;  minmax.first.volt      &lt;&lt; '\n';
    std::cout &lt;&lt; "Min Time: "   &lt;&lt;  minmax.first.time      &lt;&lt; '\n';
    std::cout &lt;&lt; "Min Ampere: " &lt;&lt;  minmax.first.ampere    &lt;&lt; '\n';

    //Display the Maximum results
    std::cout &lt;&lt; "Max Volt: "   &lt;&lt;  minmax.second.volt     &lt;&lt; '\n';
    std::cout &lt;&lt; "Max Time: "   &lt;&lt;  minmax.second.time     &lt;&lt; '\n';
    std::cout &lt;&lt; "Max Ampere: " &lt;&lt;  minmax.second.ampere   &lt;&lt; '\n';

    return 0;
}
</code></pre>

<p><a href="https://wandbox.org/permlink/PJsULFtoR9iHvBPD" rel="nofollow noreferrer">Test online</a></p>

<p><strong>Note</strong>: You can also put the records in a vector. In that way, you can easily work with your data (filtering, sorting, ...) or find the min and max with <a href="http://www.cplusplus.com/reference/algorithm/minmax/" rel="nofollow noreferrer">std::minmax</a></p>

<p><strong>Edit</strong>: at least, if you think I deserve it, tell me why</p>
    </div>