<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Create a <code>class Matrix</code></h1>

<p>Instead of having a vector of vectors, and have global functions that manipulate those, create a <code>class Matrix</code> and add member functions to it to manipulate matrices. You should probably also create overloads for arithmetic operations, so you can write things like <code>auto matrix3 = matrix1 + matrix2;</code></p>

<p>Have a look at <a href="https://stackoverflow.com/questions/1380371/what-are-the-most-widely-used-c-vector-matrix-math-linear-algebra-libraries-a">existing C++ matrix libraries</a> to see what is possible.</p>

<h1>Complexity of <code>getCofactor()</code> and <code>getInverse()</code></h1>

<p>In <code>getCofactor()</code>, you have four nested <code>for</code>-loops that only skip iterations if <code>x == i</code> or <code>y == j</code>, so that would make it O(N^4). However, you are calling <code>getDeterminant()</code> inside the second outer-most loop on a subvector of size (N-1)^2, so that would make it O(N^2 * (N-1)^3) = O(N^5).</p>

<p>In <code>getInverse()</code>, the complexity is dominated by the call to <code>getCofactor()</code>, so it is also O(N^5). This is really bad for large matrices, since the Gauss-Jordan method which you should learn in first year Mathematics studies is just O(N^3).</p>

<p>Wikipedia has a <a href="https://en.wikipedia.org/wiki/Computational_complexity_of_mathematical_operations#Matrix_algebra" rel="nofollow noreferrer">list of matrix algebra algorithm</a> complexities that you can check to see what is possible. Note however that the best looking algorithms with weird exponents are probably hard to implement and might actually be much less efficient for small matrices than the simpler algorithms. The best algorithm for you therefore depends on what sizes of matrices your programs are going to work with.</p>
    </div>