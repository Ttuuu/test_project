<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You don't need the <code>double[]</code>.</p>

<p>Example implementation that only loops once and discards the array:</p>

<pre><code>public static double ComputeV2(double a, double b, int n)
{
    double deltaX = DeltaX(a, b, n);

    // start with a sum of x_0 and x_n:
    double sum = Function(a) + Function(a + deltaX * n);

    for (int j = 1; j &lt; n; j++)
    {
        sum += Function(a + deltaX * j) * (j % 2 == 0 ? 2 : 4);
    }

    return Integrate(sum, deltaX);
}
</code></pre>

<p>And if you're into LINQ, something like this also works:</p>

<pre><code>public static double ComputeLinq(double a, double b, int n)
{
    double deltaX = DeltaX(a, b, n);

    double sum =
        Enumerable
        .Range(1, n - 1)
        .Select(j =&gt; Function(a + deltaX * j) * (j % 2 == 0 ? 2 : 4))
        .Aggregate(
            seed: Function(a) + Function(a + deltaX * n),
            func: (acc, v) =&gt; acc + v);

    return Integrate(sum, deltaX);
}
</code></pre>

<p>As for performance, here are some micro benchmarks:</p>

<pre><code>
BenchmarkDotNet=v0.12.1, OS=Windows 10.0.18363.720 (1909/November2018Update/19H2)
Intel Core i7-8650U CPU 1.90GHz (Kaby Lake R), 1 CPU, 8 logical and 4 physical cores
.NET Core SDK=2.2.301
  [Host]     : .NET Core 2.2.6 (CoreCLR 4.6.27817.03, CoreFX 4.6.27818.02), X64 RyuJIT
  DefaultJob : .NET Core 2.2.6 (CoreCLR 4.6.27817.03, CoreFX 4.6.27818.02), X64 RyuJIT

|      Method |     Mean |    Error |   StdDev |   Median |
|------------ |---------:|---------:|---------:|---------:|
|   SimpsonV1 | 286.6 ns |  5.53 ns | 11.30 ns | 285.9 ns |
|   SimpsonV2 | 270.1 ns |  5.52 ns | 14.04 ns | 267.0 ns |
| SimpsonLinq | 510.8 ns | 11.67 ns | 34.23 ns | 500.1 ns |
</code></pre>

<p>As you can see, using LINQ is clearly slower, but is often more readable (not really in this case, in my opinion).</p>

<p>"My" version is a bit faster than yours, but it's very negligible. The biggest gain is readability and succinctness, but I bet some will find it to be "too" short for its own good.</p>
    </div>