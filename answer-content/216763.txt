<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>'g_memStack' is a stack that contains memory unit. We can allocate
  memory unit from it</p>
</blockquote>

<p>There is not a single line of code allocating <code>MemUnit</code></p>

<blockquote>
  <p>This a thread safe and lock-free memory pool program</p>
</blockquote>

<p>Unfortunately this is not true. Assume two threads are executing <code>Allocate</code> on an empty stack in a fully interleaved manner.</p>

<pre><code>g_allocatingCounter.fetch_add(1, std::memory_order_relaxed); //T1 : 1, T2 : 2
MemUnit *unit = g_memStack.load(std::memory_order_acquire);  //T1 : nullptr, T2 : nullptr
while (unit != nullptr &amp;&amp; !g_memStack.compare_exchange_weak(unit, unit-&gt;m_next, std::memory_order_acquire, std::memory_order_acquire));
if (g_allocatingCounter.load(std::memory_order_relaxed) == 1)
{
   //let's assume its fine here
    return unit; // T1 : something
}
g_allocatingCounter.fetch_sub(1, std::memory_order_relaxed);
return unit; //T2 : nullptr
</code></pre>

<p>They reach <code>if (g_allocatingCounter.load(std::memory_order_relaxed) == 1)</code> with the variable <code>unit</code> being null. The condition is true for one thread but not the other.</p>

<p>The thread for which the condition is false will return <code>nullptr</code>.</p>
    </div>