<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You have some unnecessary <code>try</code> blocks.  Watch this:</p>

<pre><code>&gt;&gt;&gt; 'this'.split(', ')
['this']
&gt;&gt;&gt; ''.split(', ')
['']
</code></pre>

<p>Look, Ma!  No empty lists!  Since a split will always have at least one item in the result, you don't need to <code>try</code> to get the first item.  It will always be there for you.  Watch this:</p>

<pre><code>&gt;&gt;&gt; [][1:]
[]
&gt;&gt;&gt; ' '.join([])
''
</code></pre>

<p>Look, Ma!  No errors!  A slice never throws errors, and a <code>' '.join()</code> will return <code>''</code> when the argument is empty.  That means that you need only one <code>try</code> block for <code>first</code> and <code>middle</code>.</p>

<hr>

<p>An <code>except</code> block should specify what it is expecting.  A bare <code>except</code> is dangerous. I have found myself caught when I have done that because I can't even interrupt the script with <kbd>Ctrl</kbd>+<kbd>C</kbd>.  If it isn't an <code>IndexError</code> that trips the <code>except</code>, we want to know about it.  We don't want to hide it under an <code>except</code>.</p>

<hr>

<p>Your naming does not comply with PEP 8 (the Python style guide).  It says to use <code>lowercase_with_underscores</code> for function and variable names.  Besides that, <code>csSplit</code> is a little hard to understand.  Sure, one can recognize <code>cs</code> as being short for <code>comma-separated</code> if one thinks about it,  but I prefer something a little bit easier to understand.  Keeping the same spirit, why not <code>comma_split</code>?  I don't really like that name, but it seems a little easier to understand that <code>csSplit</code>.</p>

<hr>

<p>It doesn't make much difference with short strings, but <code>first</code> and <code>middle</code> both perform the same split operation.  To speed things up, make the split only once by assigning a variable to it.</p>

<hr>

<p>Why the intermediate variable <code>partsDict</code>?  We know that the function returns a dictionary of parts by its name and doc string.  Therefore, the variable cannot be for clarity.  It is longer to use than a simple <code>return</code>, so it isn't for line length.  Why then?  Just return directly.</p>

<hr>

<p>The code ends up looking like this:</p>

<pre><code>def get_name_parts(name):
    """Return a dictionary of a name's parts.
    name: e.g. 'JOHNSON, John Roberts, Jr. (Jack)'
    Ignores nicknames.
    """
    comma_split = name.split(', ')
    last = comma_split[0]

    try:
        first_mid = comma_split[1].split(' ')
    except IndexError:
        first_mid = ['']

    first = first_mid[0]
    middle = ' '.join(first_mid[1:])

    try:
        suffix = comma_split[2].split(' ')[0]
    except IndexError:
        suffix = ''

    return {'first': first,
            'last': last,
            'middle': middle,
            'suffix': suffix}
</code></pre>

<p>Is it shorter?  Not really.  It is only two or three lines shorter, but it is clearer, less repetitive, and safer.  Happy coding!</p>
    </div>