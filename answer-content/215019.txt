<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>The <code>vec!</code> macro</h1>

<p>Before we have a look at including and excluding, we should note that</p>

<pre><code>let mut myvec: Vec&lt;T&gt; = Vec::with_capacity(2);
myvec.push(a);
myvec.push(b);
myvec.push(c);
</code></pre>

<p>can be written with the <a href="https://doc.rust-lang.org/std/macro.vec.html" rel="nofollow noreferrer"><code>vec!</code> macro</a> as</p>

<pre><code>let myvec: Vec&lt;T&gt; = vec![a,b,c];
</code></pre>

<p>This has the nice side-effect that <code>myvec</code> doesn't need to be <code>mut</code> anymore. If we apply this too all your code, we end up with    </p>

<pre><code>#[derive(Debug)]
pub struct Dataset {
    pub data: Vec&lt;String&gt;,
}
fn main() {
    //setup test data
    let ds1_data = vec!["a".to_string(), "b".to_string()];
    let ds1 = Dataset { data: ds1_data };

    let ds2_data = vec!["a".to_string(), "c".to_string()];
    let ds2 = Dataset { data: ds2_data };

    let datasets = vec![ds1, ds2];

    let include = vec!["a".to_string()];
    let exclude = vec!["b".to_string()];

    //filter datasets
    for ds in datasets {
        if ds.data.iter().find(|d| include.contains(d)).is_none() {
            continue;
        }
        if ds.data.iter().find(|d| exclude.contains(d)).is_some() {
            continue;
        }

        println!("{:?}", ds);
    }
}
</code></pre>

<p>That's a lot less noise, perfect to concentrate on the original problem.</p>

<h1>Including and excluding</h1>

<p>First of all, instead of <code>find(…).is_some()</code>, we can use <a href="https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.any" rel="nofollow noreferrer"><code>any</code></a>, and instead of <code>find(…).is_none()</code> too. We could use that to simplify the expressions, but we would still traverse the set twice.</p>

<pre><code>for ds in datasets {
    if !ds.data.iter().any(|d| include.contains(d)) {
        //skip not included
        continue;
    }        
    if ds.data.iter().any(|d| exclude.contains(d)) {
        //skip excluded
        continue;
    }

    println!("{:?}", ds);
}
</code></pre>

<p>Instead, let's think about the elements we have to look at. The answer is all, as <code>exclude</code> might match the last element in our dataset, even if <code>include</code> matched the first.</p>

<p>As we have to look at all elements either way, we might as well traverse them by hand:</p>

<pre><code>    for ds in datasets {
        let mut included = false;
        let mut excluded = false;
        for d in &amp;ds.data {
            if included == false &amp;&amp; include.contains(d) {
                included = true;
            }
            if exclude.contains(d) {
                excluded = true;
                break;
            }
        }
        if included == false || excluded == true {
            continue;
        }

        println!("{:?}", ds);
    }
</code></pre>

<p>Now that we have this as a blueprint, we can check the <a href="https://doc.rust-lang.org/std/iter/trait.Iterator.html" rel="nofollow noreferrer">iterators</a> for a fitting method. We need to</p>

<ul>
<li>check that at least one <code>include</code> matches</li>
<li>check that no <code>exclude</code> matches</li>
<li>stop as soon as soon as <em>any</em> <code>exclude</code> matches.</li>
</ul>

<p>Unfortunately it's not possible to quick exit from a closure, so the last requirement cannot be done with <code>fold</code> or similar. However, we can use <code>inspect</code> and <code>all</code> to get something like our previous loop:</p>

<pre><code>    for ds in datasets {
        let mut included = false;

        if !ds
            .data
            .iter()
            .inspect(|d| {
                if included == false || include.contains(d) {
                    included = true
                }
            })
            .all(|d| !exclude.contains(d))
            || !included
        {
            continue;
        }
        println!("{:?}", ds);
    }
</code></pre>

<p>But that's a lot less readable than our previous loop, which did the same. We could increase readablity if we introduced a function, but that's left as an exercise. In the end, we would need a <code>fold</code>-like function that supports an early exit, but such a function does not exist.   </p>
    </div>