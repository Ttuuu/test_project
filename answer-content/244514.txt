<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The most expensive operation is the <code>addToKey x</code> that adds x to all keys in map, because substantially you have to create a new entry key, value + x in your <code>hashmap</code> and delete the old entry key, value. To avoid the need of caching the old entry while iterating over the map, you can distinguish two cases:</p>
<p>x &gt; 0, then if you have iterate over a <code>keyset</code> ordered descending there is no need of caching the old entries</p>
<p>x &lt; 0, same approach but the `keyset' is ordered ascending</p>
<p>Because you are using <code>hashmap</code>, there is no key order guaranteed, so you need a data structure to store keys to be ordered, before iterating over keys like below:</p>
<pre><code>private static void addtoKey(Map&lt;Integer, Integer&gt; map, int i) {
    if (i != 0) {
        List&lt;Integer&gt; list = new ArrayList&lt;&gt;(map.keySet());

        if (i &gt; 0) {
            Collections.sort(list, Collections.reverseOrder());
        } else {
            Collections.sort(list);
        }

        for(int key : list) {
            map.put(key + i, map.get(key));
            map.remove(key);
        }
    }
}
</code></pre>
<p>I excluded the case <code>0</code> because <code>map</code> remains untouched.
Other operations don't need order of the keys and as already suggested it could be better try to isolate every operation in a private method.</p>
    </div>