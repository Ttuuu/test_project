<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>How can I improve this?</p>
</blockquote>

<p><strong>Good formatting, scant documentation</strong></p>

<p>A comment per function would  go a long way in describing the function's intent.</p>

<p>Avoid the trap of too much or too little documentation.  Doc should convey the overall goal of the function, etc.</p>

<p><strong>Avoid non-standard include files</strong></p>

<p><code>#include &lt;conio.h&gt;</code> invoke a non-standard C library include file.  For maximum portability, avoid this and then code around <code>kbhit()</code>, etc.</p>

<p><strong>Senseless assignments</strong></p>

<p>Why <code>neighbors = neighbors;</code> vs. <code>;</code>?</p>

<p><strong>Unused parameters</strong></p>

<p><code>uint8_t ctx_id</code> and others are not used in <code>static bool ctx_get_ip2(const char *qiact_reply, uint8_t ctx_id, struct ip_addr *ctx_ip), getch()</code>. Why pass it?</p>

<p>Same with <code>i</code> and <code>c</code> in <code>usermode()</code> and <code>automaticmode()</code>.</p>

<hr>

<p><strong>The above all are detected with ample warnings  enable on my compiler.</strong></p>

<p>Save time!!</p>

<p>Enable <em>all</em> compile warning and generate a warning free compilation - or use a better compiler.</p>

<pre><code>gcc -std=c11 -O3 -g3 -pedantic -Wall -Wextra -Wconversion
</code></pre>

<hr>

<p><strong>Unmaintainable code</strong></p>

<p>Recognize that the 60 lines of code  is weak.  <em>Somehow</em> the test should be coded more tersely.</p>

<pre><code> if (type == 1) {
    board[10][10] = 'O';
    board[10][11] = 'O';
    .... // 50+ lines
    board[14][13] = 'O';
    board[15][14] = 'O';
    board[14][15] = 'O';
</code></pre>

<p>Hint: anytime code is repetitive, consider some loop.</p>

<p><strong>Avoid failed scanf()</strong></p>

<p>The below is naked.  Should the scan fail, the rest of code is suspect.</p>

<pre><code>scanf("%i", &amp;type);
</code></pre>

<p>Instead verify success with <em>some</em> code.</p>

<pre><code>if (scanf("%i", &amp;type) != 1) {
  puts("I'm going home now due to bad input.")'
  exit(EXIT_FAILURE);
}
</code></pre>

<p>Do you really want <code>"%i"</code> instead of <code>"%d"</code>?</p>

<p><strong>Usage of <code>#define</code> is good</strong></p>

<p>It well avoids the pitfalls of magic numbers.</p>

<p><strong><code>srand()</code></strong></p>

<p>Usually <code>srand()</code> should be called by calling code at its discretion (often only once), not by helper function such as <code>fillarrayrandomly()</code>.</p>

<p><strong>Separate code from test</strong></p>

<p>A brighter line needs to defined from test code and the "Game of Life" code.</p>

<p>Code re-use is paramount in coding.  Make clear what is "Game of Life" from the rest.</p>

<p><strong>Avoid output dependencies</strong></p>

<p>Minor: The below assumes the output is line buffered.  Highly portable does not assume that.  Flush before reading.</p>

<pre><code>printf ("\nEnter &lt;9&gt; for creating  a PENTADECATHLON\n");
fflush(stdout);
scanf ("%i", &amp;type);
</code></pre>

<p><strong><code>\n</code> at the end</strong>`</p>

<p>Rather than <code>'\n'</code> at the befing of output, use it at the end in <code>creatingpatterntypes()</code>.</p>

<p>Little reason to not just do</p>

<pre><code>printf ("\n" \ 
  "Enter &lt;1&gt; for creating  a BOX\n"
  "Enter &lt;2&gt; for creating  a BEEHIVE\n"
  ...
  "Enter &lt;9&gt; for creating  a PENTADECATHLON\n");
</code></pre>

<p><strong><code>const</code></strong></p>

<p>Functions like <code>void display2Darray(int board[HEIGHT][WIDTH])</code> deserve to be <code>void display2Darray(const int board[HEIGHT][WIDTH])</code> to allow greater application, some optimizations and clearer intent.</p>

<hr>

<p><strong>Overall</strong></p>

<p>It is these small things that inhibit good review of the larger aspects of your code.  In other words, I wish these small issues were not so prevalent so we could focus on the larger ones.</p>
    </div>