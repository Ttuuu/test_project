<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The variable <code>lastRow</code> isn't defined anywhere. From the menu Tools&gt;Options&gt;Editor tab&gt;Code Settings group&gt;Require Variable Declaration. Make sure that box is checked. It mandates all variable be declared before use. Future-you will thank present you for that.</p>

<hr>

<p>Static cell ranges like <code>"B2:B9"</code> will break if a row/column is inserted above/to-the-left-of that range. As is done elsewhere in your code use a named range. This  aids in documenting your code.</p>

<hr>

<p>The repeated <code>Select Case</code> can be shortened. It will only step in when check is true. Consolidate them and extract them into a private function.</p>

<pre><code>Private Function AreLoanInputsBlank() As Boolean
    AreLoanInputsBlank = GeneralInfo.Range("genLoanNumber").Value2 = vbNullString _
                        And SheetData.Range("Construction_Loan").Value2 = vbNullString _
                        And SheetData.Range("Do_Not_Assign_Loan_Number").Value2 = vbNullString
End Function
</code></pre>

<p>That function then is called as follows. Note the removal of <code>Else:</code>. That's a code smell. Place it on its own line. Using <code>:</code> just because you can IMO needlessly opens you to more difficulties debugging later. The assignment of <code>"X"</code> is also now explicitly done by accessing the <code>.Value2</code> property. Avoid using default members as it arguably makes code harder to understand. This includes <code>Err</code> being replaced with <code>Err.Number</code>. Just say no to default members.</p>

<pre><code>    If AreLoanInputsBlank Then
        Dim repsonse As VbMsgBoxResult
        response = MsgBox("Would you like to assign the loan number now?", vbYesNo + vbCritical, UCase$("Assign Loan Number"))
        If repsonse = vbYes Then
            AssignLoanNumber
        Else
            SheetData.Range("Do_Not_Assign_Loan_Number").Value2 = "X"
        End If
    End If
</code></pre>

<hr>

<p>Variables with numeric suffixes like <code>CustName1</code> is as code smell. Use an array instead.</p>

<pre><code>Dim CustName1 As String, CustName2 As String, CustName3 As String, custName4 As String
Dim CustName5 As String, CustName6 As String, CustName7 As String, custName8 As String

CustName1 = loanData.Range("CustLNSuff1") &amp; ", " &amp; loanData.Range("CustFMI1")
CustName2 = loanData.Range("CustLNSuff2") &amp; ", " &amp; loanData.Range("CustFMI2")
CustName3 = loanData.Range("CustLNSuff3") &amp; ", " &amp; loanData.Range("CustFMI3")
custName4 = loanData.Range("CustLNSuff4") &amp; ", " &amp; loanData.Range("CustFMI4")
CustName5 = loanData.Range("CustLNSuff5") &amp; ", " &amp; loanData.Range("CustFMI5")
CustName6 = loanData.Range("CustLNSuff6") &amp; ", " &amp; loanData.Range("CustFMI6")
CustName7 = loanData.Range("CustLNSuff7") &amp; ", " &amp; loanData.Range("CustFMI7")
custName8 = loanData.Range("CustLNSuff8") &amp; ", " &amp; loanData.Range("CustFMI8")
</code></pre>

<p>becomes</p>

<pre><code>Dim customerNames(1 To 8) As String
customerNames(1) = loanData.Range("CustLNSuff1").Value2 &amp; ", " &amp; loanData.Range("CustFMI1").Value2
customerNames(2) = loanData.Range("CustLNSuff2").Value2 &amp; ", " &amp; loanData.Range("CustFMI2").Value2
customerNames(3) = loanData.Range("CustLNSuff3").Value2 &amp; ", " &amp; loanData.Range("CustFMI3").Value2
customerNames(4) = loanData.Range("CustLNSuff4").Value2 &amp; ", " &amp; loanData.Range("CustFMI4").Value2
customerNames(5) = loanData.Range("CustLNSuff5").Value2 &amp; ", " &amp; loanData.Range("CustFMI5").Value2
customerNames(6) = loanData.Range("CustLNSuff6").Value2 &amp; ", " &amp; loanData.Range("CustFMI6").Value2
customerNames(7) = loanData.Range("CustLNSuff7").Value2 &amp; ", " &amp; loanData.Range("CustFMI7").Value2
customerNames(8) = loanData.Range("CustLNSuff8").Value2 &amp; ", " &amp; loanData.Range("CustFMI8").Value2
</code></pre>

<p>which can further be condensed to a dedicated function for populating the array</p>

<pre><code>Private Function GetCustomerNames(ByVal lowerBound As Long, ByVal upperBound As Long) As String()
    Dim tempArray() As String
    ReDim tempArray(lowerBound, upperBound)
    Dim nameCounter As Long
    For nameCounter = lowerBound To upperBound
        tempArray(nameCounter) = loanData.Range("CustLNSuff" &amp; CStr(nameCounter)).Value2 &amp; ", " &amp; loanData.Range("CustFMI" &amp; CStr(nameCounter)).Value2
    Next
    GetCustomerNames = tempArray
End Function
</code></pre>

<p>that is called via.</p>

<pre><code>Dim customerNames() As String
customerNames = GetCustomerNames(1, 8)
</code></pre>

<p>The <code>For ... Next</code> loop for population mandates you follow <code>Range("CustLNSuff" &amp; #)</code> convention for the names. If you can't follow that keep the dedicated function but return to populating each element on its own line. IE <code>tempArray(1) = loanData.Range("CustLNSuff1").Value2 &amp; ", " &amp; loanData.Range("CustFMI1").Value2</code>. I hope you got the idea.</p>

<hr>

<p>Checking <code>GeneralInfo.Range("NoGuar").value = vbNullString</code> is a smell. If you're checking that the cell is not populated <code>IsEmpty(GeneralInfo.Range("NoGuar"))</code> is preferred. The caveat to this is if that cell contains a formula that results to <code>""</code> then checking against <code>vbNullString</code> is appropriate.</p>

<hr>

<p>The section where you're assigning the named ranges <code>genBorrName</code>, <code>genGuarantorName1</code>, <code>genGuarantorName2</code>, and <code>genGuarantorName3</code> has duplicated assignment. Don't Repeat Yourself (DRY). <code>GeneralInfo.Range("genBorrName") = CustName1 &amp; " &amp; " &amp; CustName2</code> occurs in case 2 through 8. Extract this block of code into its own sub and name it. As I'm not sure the best way to deal with this section, I did what I thought best. After refactoring.</p>

<pre><code>Private Sub AssignGrantorNames(ByVal borrCount As Long, ByRef names() As String)
    If borrCount &lt; 1 Then
        Const InvalidArgument As Long = 5
        Err.Raise InvalidArgument, "AssignGrantorNames", "Invalid number provided."
    End If

    If borrCount = 1 Then
        GeneralInfo.Range("genBorrName") = names(1)
        Exit Sub
    Else
        GeneralInfo.Range("genBorrName") = names(1) &amp; " &amp; " &amp; names(2)
        If borrCount = 2 Then Exit Sub
    End If

    If borrCount = 3 Then
        GeneralInfo.Range("genGuarantorName1") = names(3)
        Exit Sub
    Else
        GeneralInfo.Range("genGuarantorName1") = names(3) &amp; " &amp; " &amp; names(4)
        If borrCount = 4 Then Exit Sub
    End If

    If borrCount = 5 Then
        GeneralInfo.Range("genGuarantorName2") = names(5)
    Else
        GeneralInfo.Range("genGuarantorName2") = names(5) &amp; " &amp; " &amp; names(6)
        If borrCount = 6 Then Exit Sub
    End If

    If borrCount = 7 Then
        GeneralInfo.Range("genGuarantorName3") = names(7)
    Else
        GeneralInfo.Range("genGuarantorName3") = names(7) &amp; " &amp; " &amp; names(8)
    End If
End Sub
</code></pre>

<p>That code is thereafter called as follows.</p>

<pre><code>AssignGrantorNames borrCount, customerNames
</code></pre>

<hr>

<p>I'm a proponent of declaring a variable just before it's use. The reason for this is <code>lnProg</code> and <code>loanAmt</code> are both declared, assigned a value, and then never used... They don't need to be there. Declaring the variable and assigning it immediately before it's used avoids scenario.</p>

<hr>

<p>Have your boolean checks be consistent. Choose one and stick with it.</p>

<ul>
<li><code>If fooSheet.Range("bar") &lt;&gt; vbNullString Then</code></li>
<li><code>If Not fooSheet.Range("bar") = vbNullString Then</code></li>
</ul>

<hr>

<p>Another instance of DRY. <code>.Interior.Color = RGB(252, 213, 180)</code> is used several times. Extract that duplicated into a dedicate Sub.</p>

<pre><code>Private Sub UpdateCellFormatting(ByVal updateCell As Range, ByVal interiorColor As Long, ByVal value As String)
    updateCell.Interior.Color = interiorColor
    updateCell.BorderAround Weight:=xlThin, ColorIndex:=xlColorIndexAutomatic
    updateCell.value = "X"
End Sub
</code></pre>

<p>Then call it and provide the arguments it needs. Note the 2 new constants that are provided to every invocation of the sub. Now instead of changing multiple lines you change it once and it will updated all usages.</p>

<pre><code>    Const PeachInteriorColor As Long = 11851260 'RGB(252, 213, 180)
    Const UpdateValue As String = "X"

    If SheetData.Range("Date_Outside_Appraisal_Received").Value2 &lt;&gt; vbNullString Then
        UpdateCellFormatting GeneralInfo.Range("genAppReceived"), PeachInteriorColor, UpdateValue
        GeneralInfo.Range("AE14").Value2 = "Appraisal Received(Outside)"
    End If
</code></pre>

<hr>

<p>The block of code below has a few issues. They are listed as I saw them to illustrate how cleaning up code leads you to find further ways to clean it:</p>

<ul>
<li>Variable reuse: Dont. <code>c</code> is used declared above and reused here. Create a new variable and use it in this location. </li>
<li>As originally written there's no need to use a <a href="https://docs.microsoft.com/en-us/office/vba/language/reference/user-interface-help/for-eachnext-statement" rel="nofollow noreferrer">For Each ... Next statement</a> and use <code>c</code> because <code>Range("Q" &amp; i)</code> is a single cell.</li>
<li>The <code>i</code> variable is being incremented as part of the <code>For ... Next statement</code>. Use <em>that</em> range, starting from row 3 to <code>lastRow</code>, for the <a href="https://docs.microsoft.com/en-us/office/vba/language/reference/user-interface-help/fornext-statement" rel="nofollow noreferrer">For Each ... Next</a> statement.</li>
<li>The statement <code>LCase(Split(countyName, " ")(0))</code> is repeatedly executed within the loop when it shouldn't. Have that occur <em>once</em> before the loop and use the result.</li>
<li>The column used <code>"Q"</code> can be referenced with a constant so that any changes require updating only that constant.</li>
<li>Only the <em>last</em> assignment to <code>GeneralInfo.Range("genProperty_Tax_Code").Value2</code> is used. All other assignments are overwritten each time.</li>
</ul>

<pre><code>lastRow = LoanCodes.Cells(LoanCodes.Rows.Count, "Q").End(xlUp).Row
Dim i As Integer
Dim countyName As String

countyName = loanData.Range("County")

Select Case loanData.Range("County")
    Case Is &lt;&gt; vbNullString
        For i = 3 To lastRow
            For Each c In LoanCodes.Range("Q" &amp; i)
                If LCase(Split(c.value, " ")(0)) = LCase(Split(countyName, " ")(0)) Then
                    GeneralInfo.Range("genProperty_Tax_Code") = c.Offset(0, -1).value
                End If
            Next c
        Next i
    Case Is = vbNullString
        Exit Sub
End Select
</code></pre>

<p>Following those points you can refactor to</p>

<pre><code>    Const LoanCodeColumn As String = "Q"
    Dim countyName As String
    countyName = loanData.Range("County").Value2
    Dim countyNameBeforeFirstSpaceCharacter As String
    countyNameBeforeFirstSpaceCharacter = LCase(Split(countyName, " ")(0))
    Select Case countyName
        Case Is &lt;&gt; vbNullString
            Dim lastRow As Long
            lastRow = LoanCodes.Cells(LoanCodes.Rows.Count, LoanCodeColumn).End(xlUp).Row
            Dim lastCell As Range
            Set lastCell = LoanCodes.Cells(lastRow, LoanCodeColumn)
            If LCase(Split(lastCell.Value2, " ")(0)) = countyNameBeforeFirstSpaceCharacter Then
                GeneralInfo.Range("genProperty_Tax_Code").Value2 = lastCell.Offset(0, -1).value
            End If
        Case Is = vbNullString
            Exit Sub
    End Select
</code></pre>

<hr>

<p><code>AssignLoanNumber</code> is implictly public. Explicitly make it public by adding the <code>Public</code> access modifier.</p>

<hr>

<p><code>MsgBox</code> with the only button available as <code>vbOKOnly</code> can only return <code>vbOK</code> as its result. No need to check the return value. Display the message and exit.</p>

<pre><code>If MsgBox("The Consumer Loan Numbers Workbook is currently open." &amp; vbCrLf &amp; _
          "Please try again later.", vbOKOnly + vbCritical) = vbOK Then
    Exit Sub
End If
</code></pre>

<p>Refactor it.</p>

<pre><code>MsgBox "The Consumer Loan Numbers Workbook is currently open." &amp; vbCrLf &amp; _
    "Please try again later.", vbOKOnly + vbCritical
Exit Sub
</code></pre>

<hr>

<p>You don't need to use <code>( )</code> for <code>Workbooks.Open ("L:\Loans\1_Frequent\Consumer Loan Numbers - MLA.xls")</code>. Notice the space between <code>Open</code> and <code>(</code>. You're coercing evaluation of the string before supplying it as an argument, causing it to be read only. Bringing this to your attention so you're not bitten by this. Illustrative example shows that even though <code>ByRef</code> is used, only the non parenthetical invocation reflects the assignment from within the method. This is different from <code>Set wbData = Workbooks.Open("L:\Loans\1_Frequent\Consumer Loan Numbers - MLA.xlsx")</code> which does not have the space after <code>Open</code> because <code>( )</code> are mandated because of the assignment of the return value.</p>

<pre><code>Public Sub Foo()
    Dim uncoercedArgument As String
    uncoercedArgument = "uncoerced argument string"
    DemonstarteTheEffectsOfCoercedEvaluation uncoercedArgument
    Debug.Print uncoercedArgument

    Dim coercedArugment As String
    coercedArugment = "coerced Arugment string"
    DemonstarteTheEffectsOfCoercedEvaluation (coercedArugment)
    Debug.Print coercedArugment
End Sub

Private Sub DemonstarteTheEffectsOfCoercedEvaluation(ByRef value As String)
    value = "I'm changed"
End Sub
</code></pre>

<hr>

<p>It feels like your <code>GoTo Message</code> can be refactored so you don't actually need to use GoTo. I'll leave that to you.</p>

<hr>

<p>Edits Rubberduck caught that I forgot/overlooked when worrying about the bigger edits. ***Disclosure: I'm a contributor to the poject. </p>

<ul>
<li><code>UCase</code> -&gt; <code>UCase$</code>: Use typed function. Same for <code>LCase</code> -&gt; <code>LCase$</code>, <code>RCase</code> -&gt; <code>RCase$</code>.</li>
<li><code>... As Integer</code> -&gt; <code>... As Long</code>: Use a 32-bit number to avoid overflows. IIRC internally <code>Integer</code> actually uses <code>Long</code>.</li>
</ul>

<hr>

<p>Complete refactoring all together.</p>

<pre><code>Public Sub foo()
    Dim customerNames(1 To 8) As String
    Dim nameCounter As Long
    For nameCounter = LBound(customerNames) To UBound(customerNames)
        customerNames(nameCounter) = loanData.Range("CustLNSuff" &amp; CStr(nameCounter)).Value2 &amp; ", " &amp; loanData.Range("CustFMI" &amp; CStr(nameCounter)).Value2
    Next
End Sub

Private Sub Worksheet_Activate()
    If AreLoanInputsBlank Then
        Dim response As VbMsgBoxResult
        response = MsgBox("Would you like to assign the loan number now?", vbYesNo + vbCritical, UCase$("Assign Loan Number"))
        If response = vbYes Then
            AssignLoanNumber "L:\Loans\1_Frequent\"
        Else
            SheetData.Range("Do_Not_Assign_Loan_Number").Value2 = "X"
        End If
    End If

    GeneralInfo.Range("A7").Value2 = vbNullString

    If loanData.Range("Entity").Value2 &lt;&gt; vbNullString Then
        If GeneralInfo.Range("NoGuar").Value2 = 0 Or IsEmpty(GeneralInfo.Range("NoGuar")) Then
            Dim cell As Range
            For Each cell In loanData.Range("B3:B9")
                If cell.value &lt;&gt; vbNullString Then
                    Dim guarantorCount As Long
                    guarantorCount = guarantorCount + 1
                End If
            Next

            With GeneralInfo
                .Range("NoGuar").Value2 = guarantorCount
                .Range("A7").Value2 = "Guarantor(s)"
                .Range("genBorrName").Value2 = loanData.Range("CustName1").Value2
                .Range("genGuarantorName1").Value2 = loanData.Range("CustName2").Value2
                .Range("genGuarantorName2").Value2 = loanData.Range("CustName3").Value2
                .Range("genGuarantorName3").Value2 = loanData.Range("CustName4").Value2
                .Range("genGuarantorName4").Value2 = loanData.Range("CustName5").Value2
                .Range("genGuarantorName5").Value2 = loanData.Range("CustName6").Value2
            End With
        End If
    Else
        GeneralInfo.Range("NoGuar").Value2 = 0
        GeneralInfo.Range("A7").Value2 = vbNullString

        Dim customerNames() As String
        customerNames = GetCustomerNames(1, 8)

        Dim borrCount As Long
        borrCount = Application.WorksheetFunction.CountA(loanData.Range("B2:B9"))

        AssignGrantorNames borrCount, customerNames
    End If

'   GETS COUNTY CODE DEPENDANT ON COUNTY NAME
    Const LoanCodeColumn As String = "Q"
    Dim countyName As String
    countyName = loanData.Range("County").Value2
    Dim countyNameBeforeFirstSpaceCharacter As String
    countyNameBeforeFirstSpaceCharacter = LCase$(Split(countyName, " ")(0))
    Select Case countyName
        Case Is &lt;&gt; vbNullString
            Dim lastRow As Long
            lastRow = LoanCodes.Cells(LoanCodes.Rows.Count, LoanCodeColumn).End(xlUp).Row
            Dim lastCell As Range
            Set lastCell = LoanCodes.Cells(lastRow, LoanCodeColumn)
            If LCase$(Split(lastCell.Value2, " ")(0)) = countyNameBeforeFirstSpaceCharacter Then
                GeneralInfo.Range("genProperty_Tax_Code").Value2 = lastCell.Offset(0, -1).Value2
            End If
        Case Is = vbNullString
            Exit Sub
    End Select

    Const PeachInteriorColor As Long = 11851260 'RGB(252, 213, 180)
    Const UpdateValue As String = "X"
    Const UpdateBorderWeight As Long = XlBorderWeight.xlThin
    Const UpdateBorderColor As Long = XlColorIndex.xlColorIndexAutomatic

    If SheetData.Range("Date_Outside_Appraisal_Received").Value2 &lt;&gt; vbNullString Then
        UpdateCellFormatting GeneralInfo.Range("genAppReceived"), PeachInteriorColor, UpdateBorderWeight, UpdateBorderColor, UpdateValue
        GeneralInfo.Range("AE14").Value2 = "Appraisal Received(Outside)"
    End If

    If SheetData.Range("Date_Outside_Title_Received").Value2 &lt;&gt; vbNullString Then
        UpdateCellFormatting GeneralInfo.Range("genTitleReceived"), PeachInteriorColor, UpdateBorderWeight, UpdateBorderColor, UpdateValue
        GeneralInfo.Range("AE15").Value2 = "Title Work Received(Outside)"
    End If

    If SheetData.Range("Date_In_House_Appraisal_Received").Value2 &lt;&gt; vbNullString Then
        UpdateCellFormatting GeneralInfo.Range("genAppReceivedIH"), PeachInteriorColor, UpdateBorderWeight, UpdateBorderColor, UpdateValue
        GeneralInfo.Range("AE16").Value2 = "In-House Eval Received"
    End If

    If SheetData.Range("Date_In_House_Title_Received").Value2 &lt;&gt; vbNullString Then
        UpdateCellFormatting GeneralInfo.Range("genTitleReceivedIH"), PeachInteriorColor, UpdateBorderWeight, UpdateBorderColor, UpdateValue
        GeneralInfo.Range("AE17").Value2 = "In-House Title Work Received"
    End If

    If SheetData.Range("In_House_Eval_Ordered").Value2 &lt;&gt; vbNullString Then
        UpdateCellFormatting GeneralInfo.Range("genAppReceivedIH"), PeachInteriorColor, UpdateBorderWeight, UpdateBorderColor, UpdateValue
        GeneralInfo.Range("AE16").Value2 = "In-House Eval Received"
    End If

    If SheetData.Range("In_House_Title_Ordered").Value2 &lt;&gt; vbNullString Then
        UpdateCellFormatting GeneralInfo.Range("genTitleReceivedIH"), PeachInteriorColor, UpdateBorderWeight, UpdateBorderColor, UpdateValue
        GeneralInfo.Range("AE17").Value2 = "In-House Title Work Received"
    End If
End Sub

Private Function AreLoanInputsBlank() As Boolean
    AreLoanInputsBlank = GeneralInfo.Range("genLoanNumber").Value2 = vbNullString _
                        And SheetData.Range("Construction_Loan").Value2 = vbNullString _
                        And SheetData.Range("Do_Not_Assign_Loan_Number").Value2 = vbNullString
End Function

Private Sub AssignGrantorNames(ByVal borrCount As Long, ByRef customerNames() As String)
    If borrCount &lt; 1 Then
        Const InvalidArgument As Long = 5
        Err.Raise InvalidArgument, "AssignGrantorNames", "Invalid number provided."
    End If

    If borrCount = 1 Then
        GeneralInfo.Range("genBorrName").Value2 = customerNames(1)
        Exit Sub
    Else
        GeneralInfo.Range("genBorrName").Value2 = customerNames(1) &amp; " &amp; " &amp; customerNames(2)
        If borrCount = 2 Then Exit Sub
    End If

    If borrCount = 3 Then
        GeneralInfo.Range("genGuarantorName1").Value2 = customerNames(3)
        Exit Sub
    Else
        GeneralInfo.Range("genGuarantorName1").Value2 = customerNames(3) &amp; " &amp; " &amp; customerNames(4)
        If borrCount = 4 Then Exit Sub
    End If

    If borrCount = 5 Then
        GeneralInfo.Range("genGuarantorName2").Value2 = customerNames(5)
    Else
        GeneralInfo.Range("genGuarantorName2").Value2 = customerNames(5) &amp; " &amp; " &amp; customerNames(6)
        If borrCount = 6 Then Exit Sub
    End If

    If borrCount = 7 Then
        GeneralInfo.Range("genGuarantorName3").Value2 = customerNames(7)
    Else
        GeneralInfo.Range("genGuarantorName3").Value2 = customerNames(7) &amp; " &amp; " &amp; customerNames(8)
    End If
End Sub

Private Function GetCustomerNames(ByVal lowerBound As Long, ByVal upperBound As Long) As String()
    Dim tempArray() As String
    ReDim tempArray(lowerBound, upperBound)
    Dim nameCounter As Long
    For nameCounter = lowerBound To upperBound
        tempArray(nameCounter) = loanData.Range("CustLNSuff" &amp; CStr(nameCounter)).Value2 &amp; ", " &amp; loanData.Range("CustFMI" &amp; CStr(nameCounter)).Value2
    Next
    GetCustomerNames = tempArray
End Function

Private Sub UpdateCellFormatting(ByVal updateCell As Range, _
                                    ByVal interiorColor As Long, _
                                    ByVal borderWeight As Long, _
                                    ByVal borderColor As Long, _
                                    ByVal value As String)
    updateCell.Interior.Color = interiorColor
    updateCell.BorderAround Weight:=borderWeight, ColorIndex:=borderColor
    updateCell.value = value
End Sub

Public Sub AssignLoanNumber(ByVal loanPath As String)
    Dim safeLoanPath As String
    If Right$(loanPath, 1) &lt;&gt; Application.PathSeparator Then
        safeLoanPath = loanPath &amp; Application.PathSeparator
    End If
    Application.DisplayAlerts = False
    Application.ScreenUpdating = False

    If IsWorkBookOpen(safeLoanPath &amp; "Consumer Loan Numbers - MLA.xlsx") Then
        MsgBox "The Consumer Loan Numbers Workbook is currently open." &amp; vbCrLf &amp; "Please try again later.", vbOKOnly + vbCritical
        Exit Sub
    Else
        Dim customerName As String
        customerName = loanData.Range("CustName1").Value2
        Select Case customerName
            Case Is = vbNullString
                MsgBox "You will need to manually enter in the Customer's Name, Application Date and Dollar Amount in the corresponding fields in the Consumer Loan Numbers Workbook.", _
                    vbOKOnly + vbInformation
                Workbooks.Open safeLoanPath &amp; "Consumer Loan Numbers - MLA.xls"
            Case Is &lt;&gt; "Zack Test"
                Dim AppDate As String
                AppDate = GeneralInfo.Range("genAppDate").Value2
                If AppDate = vbNullString Then
                    AppDate = InputBox("Please enter in the Application Date or TBD if we do not have a full Application")
                    GeneralInfo.Range("genAppDate").Value2 = AppDate
                End If

                If GeneralInfo.Range("genLoanNumber").Value2 = vbNullString Then
                    Dim wbData As Workbook
                    Set wbData = Workbooks.Open(safeLoanPath &amp; "Consumer Loan Numbers - MLA.xlsx")
                    Dim wsData As Worksheet
                    Set wsData = wbData.Sheets("MLA")

                    Dim nextCell As Long
                    nextCell = wsData.Cells(wsData.Rows.Count, "B").End(xlUp).Row + 1

                    Dim LoanNum As String
                    LoanNum = wsData.Range("B" &amp; nextCell).Offset(0, -1).Value2
                    wsData.Range("B" &amp; nextCell).Value2 = customerName
                    wsData.Range("B" &amp; nextCell).Offset(0, 1).Value2 = AppDate
                    GeneralInfo.Range("genLoanNumber").Value2 = LoanNum
                    wbData.Close True

                    Dim msgCap As String
                    msgCap = "The following information was tied to Loan Number:  " &amp; LoanNum &amp; vbCrLf &amp; _
                                                      "    Customer Name:   " &amp; customerName &amp; vbCrLf &amp; _
                                                      "    Application Date:   " &amp; AppDate
                    MsgBox msgCap, vbOKOnly + vbInformation
                End If
        End Select
    End If

    Application.ScreenUpdating = True
    Application.DisplayAlerts = True
End Sub
<span class="math-container">```</span>
</code></pre>
    </div>