<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Alternative</h1>

<p>I would use an alternative technique:</p>

<p>Since your application basically reads a file and encodes it, why not simply make the stream do the encoding?</p>

<p>I would do something like this:</p>

<pre><code>#include &lt;locale&gt;
#include &lt;algorithm&gt;
#include &lt;iostream&gt;
#include &lt;fstream&gt;

int shift = 0;

class CaesarCipher: public std::codecvt&lt;char,char,std::mbstate_t&gt;
{
  protected:
    virtual std::codecvt_base::result
        do_out(state_type&amp; tabNeeded,
                         const char* rStart, const char*  rEnd, const char*&amp;   rNewStart,
                         char*       wStart, char*        wEnd, char*&amp;         wNewStart) const
    {
        for(;rStart &lt; rEnd;++rStart, ++wStart)
        {
            if (!std::isalpha(*rStart)) {
                *wStart = *rStart;
            }
            else {
                char input = *rStart | 0x20;
                *wStart = (input - 'A' - shift) % 26 + 'A';
            }
        }

        rNewStart   = rStart;
        wNewStart   = wStart;

        return std::codecvt_base::ok;
    }

    // Override so the do_out() virtual function is called.
    virtual bool do_always_noconv() const throw()  {return false;}
};

int main(int argc, char* argv[])
{
    if (argc != 2) {
        std::cerr &lt;&lt; "Error Expected a shift value\n";
        exit(1);
    }
    shift = std::atoi(argv[1]);

    // Open the input file
    std::ifstream inFile("input.txt");

    // Create an output file.
    // Imbue it with the encoding facet
    // Open the file.
    std::ofstream outFile;
    outFile.imbue(std::locale(std::locale::classic(), new CaesarCipher()));
    outFile.open("output.txt");


    // Copy input file to output file
    outFile &lt;&lt; inFile.rdbuf();
}
</code></pre>

<hr>

<h1>Code Review</h1>

<p>This is horrible:</p>

<pre><code>const std::vector&lt;std::string&gt; finalResult = [&amp;]()
{
    return choice == 1 ? encodeVec(lines, key) : encodeVec(lines, key, true);
}();
</code></pre>

<p>Simply do:</p>

<pre><code>const std::vector&lt;std::string&gt; finalResult = encodeVec(lines, key, choice != 1);
</code></pre>

<hr>

<p>Why do you need a encode/decode version? They are doing literally the same thing. In most systems the encode and decode strings are different anyway. In this case the decode number is simply the negative of the encode number (or 26 - &lt;encode number&gt;).</p>

<pre><code>        if (decodeFlag)
        {
            return ((ch - 'A' + 26) - shift) % 26 + 'A';
        }
        else
        {
            return ((ch - 'A') + shift) % 26 + 'A';
        }
</code></pre>

<p>I would simply write:</p>

<pre><code>        return ((ch - 'A') + shift) % 26 + 'A';
</code></pre>

<p>Then have users use different values to encode/decode.</p>

<hr>

<p>This:</p>

<pre><code>if (islower(ch))
            ch ^= 0x20; // XOR 6th bit don't care if it's lower case.
</code></pre>

<p>Is just a complex way of doing:</p>

<pre><code>ch |= 0x20; // Always add this flag to make everything upper case.
</code></pre>

<p>Note the encoding stuff is not going to work for any special characters (only uppercase letters) so treat everything as a character.</p>

<hr>

<p>OK, so space is special.</p>

<pre><code>    else if (isspace(ch))
    {
        return ' ';
    }
</code></pre>

<p>As everything that is not an uppercase letter (or converted to uppercase) is not going to decode properly then everything that is not a character should treated as special.</p>

<pre><code>    else if (!std::isalpha(ch))
    {
        return c;
    }
</code></pre>

<hr>

<p>Somebody else mentioned this is a bug:</p>

<pre><code>    if (ch == 'z' || ch == 'Z')
    {
        return ch - 25;
    }
</code></pre>

<hr>

<p>You do a lot of copying of strings to get this working.</p>

<p>Some thought about doing the encoding in-place may save you a lot.</p>

<hr>
    </div>