<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I am going to use some clever and long-standing yet somewhat crytic techniques in my answer.  If you are barefoot right now, don't bother to put socks on because they may come off while you read my suggested function re-write.</p>

<p>Your custom function means to:</p>

<ol>
<li>Pack together the incoming arrays,</li>
<li>"Transpose" the subarrays' data (pivot the data),</li>
<li>Filter out the empty placeholding subarrays,</li>
<li>Flatten the data structure into an array of associative arrays or objects (conditionally)</li>
</ol>

<p>Before I get to the slight-of-hand array function calls, I want to express that  I do not support the passing of an optional <code>T_OBJECT_CAST</code> comparison value with the arrays to be processed. I feel that it is too disruptive to the otherwise direct purpose of the custom function.  To remedy this, I recommend conditionally calling <code>json_decode(json_encode())</code> on the return value after it is returned to the global scope.  There are other workarounds, but this one seems cleanest to me.</p>

<p>Code (<a href="https://3v4l.org/N8N8h" rel="nofollow noreferrer">Demo</a>)</p>

<pre><code>function multiArrayCombine() {
    $transposed = array_map(null, ...func_get_args());
    foreach ($transposed as &amp;$set) {
        $set = array_merge(...array_filter($set));
    }
    return $transposed;
}
$array1 = [['a' =&gt; 'val1'], ['a' =&gt; 'val2']];
$array2 = [['b' =&gt; 'val3'], ['b' =&gt; 'val4']];
$array3 = [['c' =&gt; 'val5'], [], ['c' =&gt; 'val6']];
var_export(multiArrayCombine($array1, $array2, $array3));
</code></pre>

<p>Output:</p>

<pre><code>array (
  0 =&gt; 
  array (
    'a' =&gt; 'val1',
    'b' =&gt; 'val3',
    'c' =&gt; 'val5',
  ),
  1 =&gt; 
  array (
    'a' =&gt; 'val2',
    'b' =&gt; 'val4',
  ),
  2 =&gt; 
  array (
    'c' =&gt; 'val6',
  ),
)
</code></pre>

<p>Using <code>array_map(null, ...func_get_args());</code> effectively unpacks the incoming arrays via the splat operator then transposes the data using <code>array_map()</code> with a <code>null</code> callback parameter. While this is far more concise than using loops, it is important to mention that this produces a complete matrix by generating null elements (which is not the case when using loop). This is little bother in your scenario because your incoming arrays contain empty placeholding arrays to be removed as well.</p>

<p>Calling <code>array_filter()</code> to remove nulls and empty arrays is swiftly done by its default behavior.  However, this makes any other legitimate zero/false/null/empty values vulnerable to unintended removal.  You will need to determine if this behavior is a threat to your project.</p>

<p>To flatten the transposed and filtered data into the desired structure, <code>array_merge(...$transpose))</code> will strip the outer array level.</p>
    </div>