<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Line 34 is a wrong tree to bark on. The problem is in</p>

<pre><code>    all_pos_chars = ["".join(seq) for seq in itertools.product("01", repeat=n_feat)]
</code></pre>

<p>which results in a list of <span class="math-container">\$2^{n\_feat}\$</span> characters. You have an exponential complexity right away.</p>

<p>An opportunistic optimization (removal of impossible characters) doesn't buy you anything; at the end of the day you still comparing each - possible or impossible - character against each input character. Notice that in a 5 feature case there are <span class="math-container">\$31 = 2^5 - 1\$</span> calls to <code>max</code>, and in a 20 feature case there are <span class="math-container">\$1048575 = 2^{20} - 1\$</span> of them.</p>

<p>Now, to get the problem right, you need to realize first that the features are independent. And second that a contribution of a particular feature only depends on how many characters have it. Hint: how would you solve the problem for just one feature?. I hope the hint is strong enough to reveal a linear time solution.</p>

<hr>

<p>An obligatory code review note. Using an <em>Impossibly high starting-point</em> is often wrong, and may not even exist. A natural starting point is safely derived from the first element:</p>

<pre><code>    curr = similarity(pos_char, character[0])
</code></pre>

<p>followed by iterating over <code>character[1:]</code>. Now the <code>if curr == 0:</code> special case disappear.</p>
    </div>