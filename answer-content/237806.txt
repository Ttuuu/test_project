<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Data modeling wise:</p>

<ul>
<li>The name <code>EventInfo</code> is ambiguous, especially when there is another class called <code>EventDetails</code>. So I am thinking about how to make their purposes more differentiable. It seems like the purpose of <code>EventInfo</code> and <code>EventType</code> is to create a composite key, which is used in <code>EventManager</code> to fork business logic.  I would recommend creating a structure <code>EventClassifier</code> which has both event type and event code as member variables. <code>Binding</code> can have an unordered set of <code>EventClassifier</code>. </li>
</ul>

<p>Coding style-wise:</p>

<ul>
<li>prefer to use initialization list rather than assignment operator in the constructor. For instance: </li>
</ul>

<pre><code>EventInfo(int a_code)
:  code(a_code)
{}
</code></pre>

<ul>
<li>It is redundant to write <code>this-&gt;size</code> in function <code>void Clear()</code>. It can just be <code>size</code>.</li>
<li>you can use structured bindings when iterating thru a map: <code>for (const auto&amp; [k,v] : bindg-&gt;events)</code>. the code will be more readable as you don't need to write things like <code>iter-&gt;second</code>. </li>
</ul>

<p>Some other things:</p>

<ul>
<li>in <code>EventManager</code> destructor, the code should check <code>if(itr.second)</code> before freeing the memory. </li>
<li><code>EventManager::AddBinding</code> takes a raw pointer of <code>Binding</code>. This is unsafe because 1) EventManager will free the memory in <code>RemoveBinding</code>. so it assumed the address is on heap however there is no guarantee. 2) Caller of <code>EventManager::AddBinding</code> has access to the binding object and could have freed the memory. Then when EventManager tries to access it, the program will segfault.  I would recommend changing the interface of <code>AddBinding(Binding* binding)</code> to <code>AddBinding(const std::string&amp; callback_name, EventType type, int event_code)</code>. Then EventManager has the ownership of <code>binding</code> objects exclusively. </li>
</ul>
    </div>