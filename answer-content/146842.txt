<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Well the exponential function is map from reals to reals (usually denoted <em>f</em>:<strong>R</strong>â†’<strong>R</strong>), so I would have expected the use of <code>real</code>s for all variables (i.e., <code>x</code> and <code>n</code>). However, I'll base my answer using <code>integer</code>s, as that is what you've used.</p>

<h3>Using larger integers</h3>

<p><a href="https://stackoverflow.com/q/9569756/">Fortran's basic integer precision</a> has a largest integer value of 2147483647, which is exceeded for <code>4**16=4294967296</code>. However, you certainly can specify a <em>larger</em> integer type (see the link) and easily fit 4**19=274877906944. This would be as easy as <a href="https://gcc.gnu.org/onlinedocs/gcc-4.6.1/gfortran/SELECTED_005fINT_005fKIND.html" rel="nofollow noreferrer">specifying the kind</a>:</p>

<pre><code>integer :: x,n
</code></pre>

<p>would become</p>

<pre><code>integer, parameter :: i_8 = selected_int_kind(15)
integer(i_8) :: x, n
</code></pre>

<p>And you easily get the values you desire.</p>

<h3>Alternative implementation</h3>

<p>Instead of specifying larger precision, you could express the Taylor-expansion of the exponential as
$$
e^x = 1 + x\cdot \left(1 + \frac{x}{2}\cdot\left(1 + \frac{x}{3}\cdot \left(\cdots\right) \right) \right)
$$
and write your function as,</p>

<pre><code>f=1.0
do i=n-1,1,-1
   f = 1.0 + x * f / i
end do
</code></pre>

<p>(here <code>n</code> is your number of terms you want). Fortran will implicitly cast <code>i</code> and <code>x</code> as reals (since they are multiplying/dividing a real in <code>f</code>), so you don't need to worry about larger precision in your integers. This version could also fit easily into a function where you can have the user specify the <code>n</code> and <code>x</code> values:</p>

<pre><code>real function my_exp(n, x) result(f)
   integer, intent(in) :: n, x
   f=1.0
   do i=n-1,1,-1
      f = 1.0 + x * f / i
   end do
end function
</code></pre>

<p>which is small enough that a simple <a href="http://www.personal.psu.edu/jhm/f90/statements/contains.html" rel="nofollow noreferrer"><code>contains</code></a> will be fine for your program (i.e., using a <a href="https://web.stanford.edu/class/me200c/tutorial_90/09_modules.html" rel="nofollow noreferrer"><code>module</code></a> isn't needed).</p>

<h3>Other odds-and-ends</h3>

<p>Modern Fortran (well, since Fortran 90) does not require the use of capitals for keywords, so you don't need to have your program yell at you that it is printing something or that you're going to specify the <code>type</code>s of all variables (i.e., you can use <code>implicit none</code>, <code>real</code> and <code>integer</code>). Most IDEs I know have support for Fortran syntax, so you'll know when you're using keywords.</p>

<p>While initializing <code>f=1.0</code> in the main will do what you expect, you may want to break the habit of doing so now because you may (accidentally) carry it over to functions where it will <a href="http://www.cs.rpi.edu/~szymansk/OOF90/bugs.html#4" rel="nofollow noreferrer">have different behaviour</a>.</p>
    </div>