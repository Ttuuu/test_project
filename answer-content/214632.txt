<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Biggest syntax suggestion</strong><br>
There's a lot of repetition and naming issues that makes the code hard to read. For example, <code>Player#valid_move?</code> could instead be (ignoring correctness of logic):</p>

<pre class="lang-ruby prettyprint-override"><code>def valid_move?(from_square, to_square, piece)
  is_pawn = piece.is_a?(Pawn) # not sure why of all piece types, pawns are specifically being singled out here
  same_x = to_square.x == from_square.x # not sure why only x is being checked
  dest_occupied = !!to_square.piece_on_square
  land_on_enemy_piece = dest_occupied &amp;&amp; to_square.piece_on_square.color == piece.color # give a name to this "concept"

  if is_pawn &amp;&amp; !same_x &amp;&amp; land_on_enemy_piece
    piece.get_valid_captures(from_square, to_square)
  elsif !is_pawn || (same_x &amp;&amp; !dest_occupied)
    piece.get_valid_moves(from_square, to_square)
  else
    false
  end
end
</code></pre>

<p><strong>Biggest OOP design suggestion</strong></p>

<blockquote>
  <p>Pieces should be as dumb as possible</p>
</blockquote>

<p><code>Piece</code>s ought to define <em>how</em> they move, but they shouldn't be able to <code>Piece.get_valid_moves</code>. Determining valid moves requires a few things:</p>

<ul>
<li>How a piece generally moves</li>
<li>The piece's position on the board</li>
<li>State of the board/where other pieces are</li>
<li>Whether pieces in their path are allies or enemies</li>
</ul>

<p>If <code>Piece</code>s can determine valid moves, they'd need to "know" nearly everything on the board. This defeats the purpose of OO Encapsulation! If pieces are "dumb" and well-encapsulated, then <a href="https://en.wikipedia.org/wiki/Dependency_inversion_principle" rel="nofollow noreferrer" title="B. Abstractions should not depend on details. Details should depend on abstractions"><code>Piece</code> is a lower level abstraction and <code>Board</code> and <code>Player</code> depends on <code>Piece</code>, not the other way around</a>.</p>
    </div>