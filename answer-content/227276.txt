<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>A try catch block is there to "Catch" a condition, some conditions you can solve yourself in code, some need to bobble up the stack to the user in form of a message, some end the application.</p>
<p>A sample for user exception would be that a transaction crashed due to a network transport layer error, never becouse the user entered 0 to withdrawal. If however you leave the UI layer and you're in the business layer and you're asked to payout a negative number then you should throw a "negative withdrawal exception" as the business layer has no way to ask for a user correction, it's the consuming code that should check for exception and work with the exception if one occurs.</p>
<p>Here is a sample from your code that I modified to demonstrate what I tried to explain</p>
<pre><code>case "2":
amount = GetAmount();

try
{
    if (accountService.DepositAmount(bankAccount, amount, out string error))
    {

        Console.WriteLine($"Deposited RM {amount} successfully.");
    }
    else
    {
        Console.WriteLine($"Sorry transaction failed due to :{error}");
    }

}
catch (AccountClosedException)
{ 
    Console.WriteLine("Dear customer, please contract your account manager, your transaction was canceled, please collect your funds");
}
catch (CounterfaitFundsException)
{
    Console.WriteLine("Dear customer, please contract your account manager, we have found some issues with your funds");
}
catch (ServiceDownException exs)
{
    Console.WriteLine($"Dear customer, we are finding having issues with {exs.ServiceLayer} this ATM, please take your funds and try another ATM");
}
catch (Exception ex)
{
    // todo: write ex.stacktrace into text file for programmer to do troubleshooting.

    Console.WriteLine(ex.Message);
}

break;
</code></pre>
<p>Then, a side note, you never would like to present the user with a stacktrace, you can log it for sure but never the user.</p>
<p>When working at NCR we used a logger that logged, depending the log level set all methods and parameter values. We had users cut money in half and glue the other half of the bill with fake/paper tricking a sensor with the sensors finding 50% of the bills validations and making a 200USD deposit from 100USD. Have paperclips or rubber bands on the bills etc.. Have a look at <a href="https://openbanking.atlassian.net/wiki/spaces/DZ/pages/11272675/ATM+API+Specification+-+v2.1.1" rel="noreferrer">this link</a> for what you need to support. ATM's have a proprietary dialect/ standard of the global standard so there is no generic api that you can implement, also the vendors like NCR, Diebold Nixdorf, etc. have different sensors for manipulation, money validation, cameras. then the cassettes that hold funds can be recyclers (they take and dispense the funds that where payed in) and some that can only pay out. you need to account how much money was taken out of the cassettes and send an alarm if a re-fill is needed, the sensors that keep track all do this a little different.</p>
    </div>