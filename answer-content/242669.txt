<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I think perhaps, you're being to literal with this.  </p>

<p>First off, when you are grouping your data by digits and getting the count of each one, a simple <code>int[]</code> will do.  In this case to keep things simple a 10 element array will give you indexes from 1-9.</p>

<p>Also consider, if you start at 9, the difference is 6 divide by 2 will result in 3 and 3 as the other 2 digits necessary.  Now you must have unique digits so you increase one by 1 and decrease the other by 1. Now you start at 4 and 2.  Now keep increasing and decreasing until the high one reaches the start number or the low one reaches 0. Each time you increase and decrease increment the elements at the indexes for the start, and the 2 other digits.  When this loop finishes decrease the start number, until the start number reaches 5.   At this point you've found all the unique combinations that add to 15.  5 works as a limit since 15/3=5.  add one and subtract 1 and you get 4,5,6 any number you consider that is less than 6 will already have been considered.</p>

<p>It could look like this:</p>

<pre><code>static int[] Sum15Dist()
{
    var dist = new int[10];
    const int target = 15;
    int start = 9;
    while(start &gt; 5)
    {
        int intA = (int)Math.Ceiling((target - start)/2.0);
        int intB = target - start - intA;
        if(intA == intB)
        {
            ++intA;
            --intB;
        }
        while(intB &gt; 0 &amp;&amp; intA &lt; start)
        {
            ++dist[start];
            ++dist[intA++];
            ++dist[intB--];
        }
        --start;
    }
    return dist;
}
</code></pre>
    </div>