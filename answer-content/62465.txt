<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There's a bit to say about this code, so I'll try to take it from the top and work my way down:</p>

<ul>
<li><p>Declare <code>main()</code> after your functions so you don't have to declare those function prototypes at the beginning of your source code.</p></li>
<li><p>You shouldn't be printing anything from the functions other than <code>main()</code> here.  You should be returning the values to <code>main()</code> and handle them there.</p></li>
<li><p>You are restricting yourself by only accepting <code>int</code> parameters into your <code>getsum()</code> function.  I would use <code>intmax_t</code> from <code>&lt;stdint.h&gt;</code> instead.</p></li>
<li><p>You don't protect yourself from integer overflow within any of your functions. Take a look at <a href="https://codereview.stackexchange.com/q/59557/27623">this question</a> and <a href="https://codereview.stackexchange.com/a/59585/27623">answer</a> for an idea of how to implement that protection using the latest standards.</p></li>
<li><p>Why does your <code>doDiv()</code> function accept <code>float</code> values, and then return a <code>double</code> value?  Inconsistent and not what a programmer would expect.  Either return a <code>float</code>, or accept <code>doubles</code> as parameters.</p></li>
<li><p>Always declare what parameters your function takes in, even if nothing.</p>

<pre><code>int main(void)
</code></pre>

<p>You might wonder why we have to do this.  Imagine we have the function <code>foo()</code> declared as such:</p>

<pre><code>int foo()
</code></pre>

<p>In C, this is known as an <strong>identifier list</strong> and means that it "can take any number of parameters of unknown types".  We can actually pass values to the function even though we don't mean to or intend to.  If the caller calls the function giving it some argument, the behavior is undefined. The stack could become corrupted for example, because the called function expects a different layout when it gains control. </p>

<p>Using identifier lists in function parameters is depreciated.  It is much better to do something like:</p>

<pre><code>int foo(void)
</code></pre>

<p>In C, this is known as a <strong>parameter type list</strong> and defines that the function takes zero arguments (and also communicates that when reading it) - like with all cases where the function is declared using a parameter type list, which is called a <em>prototype</em>.   If the caller calls the function and gives it some argument, that is an error and the compiler spits out an appropriate error.</p>

<p>The second way of declaring a function has plenty of benefits. One of course is that amount and types of parameters are checked. Another difference is that because the compiler knows the parameter types, it can apply implicit conversions of the arguments to the type of the parameters. If no parameter type list is present, that can't be done, and arguments are converted to promoted types (that is called the default argument promotion). <code>char</code> will become <code>int</code>, for example, while <code>float</code> will become <code>double</code>.</p></li>
<li><p>Use <code>%g</code> when printing <code>float</code> values.  It also allows you to print <code>double</code> if you decide to "upgrade" the type later.</p></li>
<li><p>You don't have to return <code>0</code> at the end of <code>main()</code>, just like you wouldn't bother putting <code>return;</code> at the end of a <code>void</code>-returning function. The C standard  knows how frequently this is used, and lets you not bother.</p>

<blockquote>
  <p><strong>C99 &amp; C11 ยง5.1.2.2(3)</strong></p>
  
  <p>...reaching the <code>}</code> that terminates the <code>main()</code> function returns a
  value of <code>0</code>.</p>
</blockquote></li>
<li><p>You asked me to comment on your formatting and documentation.  I find leading by example is a good way to learn something, so look at how I do it in <a href="https://codereview.stackexchange.com/q/43872/27623">this question</a> of mine. Also, I use <a href="http://www.doxygen.nl/" rel="nofollow noreferrer">doxygen</a> for my documentation generation.  I think it is a good habit that you should get into as well.</p></li>
</ul>
    </div>