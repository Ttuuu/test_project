<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Vanilla python 3 implementation based on suggestions and answers so far:</p>
<pre><code>def kadane_bound(rows, row_boundary):
    """
    Find the largest sum in a contiguous subarray.
    """
    maximum_sum = current_sum = sum(temp[i] for i in range(row_boundary))

    for i in range(rows - row_boundary):
        current_sum += temp[row_boundary + i] - temp[i]
        if current_sum &gt; maximum_sum:
           maximum_sum = current_sum
    return maximum_sum


def kadane_matrix_bound(matrix, rows, columns, row_boundary, column_boundary):
    """
    Compute maximum sum over a sliding window of fixed size.
    """
    for i in range(rows):
        temp[i] = sum(matrix[i][j] for j in range(column_boundary))

    maximum_sum = kadane_bound(rows, row_boundary)
    for j in range(columns - column_boundary):
        for i in range(rows):
            delta = matrix[i][column_boundary + j] - matrix[i][j]
            temp[i] += delta
        maximum_sum = max(maximum_sum, kadane_bound(rows, row_boundary))
    return maximum_sum


def parse_input():
    line = list(map(int, input().split()))
    rows, columns, max_rows, max_cols = line[0], line[1], line[2], line[3]
    global temp
    temp = [0] * rows
    matrix = []
    for _ in range(rows):
        matrix.append(list(map(int, input().split())))
    return matrix, rows, columns, max_rows, max_cols


def main():
    matrix, rows, columns, max_rows, max_cols = parse_input()
    maximum_submatrix_sum = kadane_matrix_bound(matrix, rows, columns, max_rows, max_cols)
    print(maximum_submatrix_sum)


if __name__ == '__main__':
    main()
</code></pre>
    </div>