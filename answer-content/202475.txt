<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>@rzzzwilson has the right idea with what you should be doing, but let's break down your code to address some of the other performance and style issues:</p>

<p>In your first snippet you should be doing a few things:</p>

<ul>
<li>Use <a href="https://docs.python.org/3/library/pathlib.html" rel="nofollow noreferrer"><code>pathlib</code></a> instead of concatenating paths</li>
<li>You are using <code>readline()</code> strangely (we usually avoid <code>while</code> in Python). If you want to be reading by line (of course, by line is definitely not the approach you want here), you can just do <code>for line in file:</code></li>
<li>You open and close <code>PR_out_path</code> a bunch of times. It should be opened first and remain open for the duration of <code>for name in PR_files</code>. Besides the obvious (that you need it for this long), this will also likely have an impact on caching as closing the file will force your writes to be flushed.</li>
<li>You get newlines between each line in the file because you do <code>g.write(line + '\n')</code> but <code>line</code> already ends in <code>'\n'</code>!</li>
<li>No need to do <code>f.close()</code> when you use a context manager (<code>with open(...):</code>). Read more about <a href="https://dbader.org/blog/python-context-managers-and-with-statement" rel="nofollow noreferrer">context managers</a></li>
<li>No need to do <code>open('...', 'r')</code>, <code>'r'</code> is the default</li>
</ul>

<p>So with that in mind, a rewrite of your first snippet would look like:</p>

<pre><code>from pathlib import Path

pr_path = Path('/path/to/pr/files')
pr_files = (pr_path / name for name in ('pr_file_1', 'pr_file_2'))

with pr_out_path.open() as output:
    for pr_file in pr_files:
        with pr_file.open() as f:
            for line in pr_file:
                output.write(line)
</code></pre>

<p>I suspect this will behave slightly better than your approach, but it's still not optimal. Your second script is entirely unnecessary because I did <code>output.write(line)</code> instead of <code>output.write(line + '\n')</code>. But, if you did need to do some processing on each line, why do you use an intermediate file? Why not just do it in your loop above? For example:</p>

<pre><code>with pr_out_path.open() as output:
    for pr_file in pr_files:
        with pr_file.open() as f:
            for line in pr_file:
                output.write(your_fancy_line_processing(line))
</code></pre>

<p>Your final snippet as was already pointed out has a problem that it reads the entirety of each file into memory (that's what <code>f.read()</code> does). This won't work for large files.</p>

<p>The solution that @rzzzwilson proposes is definitely the correct one. Buffered writing by using chunks (I'd choose a size that's in the kilobytes, perhaps the megabytes, but nothing too crazy) allows everything to fit into memory and composes nicely with some of the other buffering, cacheing, and prefetching already done by the userland IO library, operating system, and even harddisk itself.</p>

<p>However, there is something better if you are on a *nix. Python provides <code>os.sendfile()</code> which uses <a href="http://man7.org/linux/man-pages/man2/sendfile.2.html" rel="nofollow noreferrer"><code>sendfile</code></a>. This has the advantage that you don't have to do any copying yourself. All of the copying is done by the OS (which is much faster for many reasons, but most of them boiling down to <a href="https://en.wikipedia.org/wiki/Context_switch" rel="nofollow noreferrer">context switching</a>). You can use it like so:</p>

<pre><code>from os import sendfile

with pr_out_path.open() as output:
    for pr_file in pr_files:
        with pr_file.open() as f:
            sendfile(output.fileno(), f.fileno())
</code></pre>

<p>Windows doesn't support <code>sendfile</code> though, so you'd likely want to use this and fall back to copying the file in chunks when not supported. When you do this make sure to open in binary mode ('rb' and 'wb') as this matters on windows.</p>
    </div>