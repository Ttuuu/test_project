<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Bug</h3>

<p>This code doesn't compile. That's a really low bar which you should be sure you cross before submitting it for review.</p>

<h3>Structure</h3>

<p>The <code>main</code> method should at most handle I/O. The calculation should be in a separate method which takes an argument (the number of people in the circle) and returns the solution. There shouldn't be any debug printing.</p>

<p>Looking at the guard on the <code>while</code> loop, I would conclude that you don't know the <code>break</code> keyword. As an interviewer, that would be a red flag unless the job was advertised as open to people who don't know programming on the expectation that the company will train them. (Actually even <code>break</code> is unnecessary: the loop just needs to check the break condition).</p>

<h3>Names</h3>

<p><code>isTrue</code> has been mentioned in comments and another answer. <code>isNeighbour</code> also warrants inspection: <em>everyone</em> is a neighbour. What matters is whether the person is a <em>shooter</em> or not.</p>

<h3>Code complexity</h3>

<p>There's no need to keep discarding <code>list</code> and refilling it.</p>

<p>Refactoring your code, we get down to</p>

<pre><code>public static int josephus2(int numberOfGuys) {
    List&lt;Integer&gt; list = new ArrayList&lt;&gt;();
    for ( int i = 1; i &lt;= numberOfGuys; i++ ) {
        list.add( i );
    }

    boolean isShooter = true;
    Iterator&lt;Integer&gt; i = list.iterator();
    while (list.size() &gt; 1) {
        int k = i.next();
        if ( !isShooter ) i.remove();
        if ( !i.hasNext() ) i = list.iterator();
        isShooter = !isShooter;
    }

    return list.get(0);
}
</code></pre>

<p>As mentioned in another answer, <code>LinkedList</code> would be much more efficient for this than <code>ArrayList</code> because of all of the calls to <code>Iterator.remove()</code>.</p>

<p>Even this is more complex than an approach which appends to a longer array and does one loop, trading memory for simplicity:</p>

<pre><code>public static void flat(int numberOfGuys) {
    int[] pos = new int[numberOfGuys * 2 - 1];
    for (int i = 0; i &lt; numberOfGuys; i++) pos[i] = i + 1;
    for (int shot = 0; shot &lt; numberOfGuys - 1; shot++)
    {
        // Person at position 2*shot shoots person at position 2*shot+1 and goes to end of queue
        pos[numberOfGuys + shot] = pos[2 * shot];
    }
    return pos[numberOfGuys * 2 - 2];
}
</code></pre>

<h3>Algorithmic complexity</h3>

<p>These approaches loop once per shot, and there are <span class="math-container">\$n - 1\$</span> shots fired, so it takes <span class="math-container">\$O(n)\$</span> time and space. It's possible to solve the problem in <span class="math-container">\$O(\lg n)\$</span> time by thinking about who survives an entire turn round the circle.</p>

<ul>
<li>If there's only one person, they survive.</li>
<li>If there's an even number of people, those in odd positions (one-indexed) survive and it's person 1's turn to shoot again.</li>
<li>If there's an odd number of people, those in odd positions (one-indexed) survive and it's person <span class="math-container">\$n\$</span>'s turn to shoot.</li>
</ul>
    </div>