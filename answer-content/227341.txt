<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<pre><code>    if (read == bufferSize)
      yield return buffer;
    else
</code></pre>
</blockquote>

<p>Be aware that repeatedly <code>yield return</code> the same buffer is rather risky. Imagine the following use case where all returned buffers are cached for later use for some reason:</p>

<pre><code>  List&lt;byte[]&gt; buffers = new List&lt;byte[]&gt;();
  using (FileStream stream = File.OpenRead(path))
  {
    foreach (byte[] buffer in stream.EnumerateBuffers(1024))
    {
      buffers.Add(buffer);
    }
  }
</code></pre>

<p>The result is that all items in <code>buffers</code> are references to the same buffer, hence they all have the same (the last returned with full length) set of bytes.</p>

<p>I think you should go with a much simpler approach:</p>

<pre><code>public static IEnumerable&lt;byte[]&gt; EnumerateBuffers(this Stream stream, int bufferSize = DefaultBufferSize, long count = -1)
{
  long read;
  while (true)
  {
    byte[] buffer = new byte[bufferSize];
    read = stream.Read(buffer, 0, bufferSize);
    if (read &gt; 0)
      yield return buffer;
    else
      break;
  } 
}
</code></pre>

<hr>

<p><strong>Update</strong></p>

<p>Have you tested performance against reading char-by-char using a <code>StreamReader</code>like:</p>

<pre><code>public static string ReadTo(this Stream stream, string separator, Encoding encoding)
{
  if (!stream.CanSeek)
    throw new NotSupportedException("The stream must be seekable");

  StringBuilder text = new StringBuilder();
  int index = 0;
  bool searching = false;
  int sepIndex = 0;
  char cur;

  using (StreamReader reader = new StreamReader(stream, encoding, false, 1024, true))
  {
    int res;
    while ((res = reader.Read()) != -1)
    {
      cur = (char)res;
      if (!searching &amp;&amp; cur == separator[0])
      {
        searching = true;
        sepIndex = 1;
      }
      else if (searching &amp;&amp; sepIndex &lt; separator.Length &amp;&amp; cur == separator[sepIndex])
      {
        sepIndex++;
      }
      else
      {
        if (sepIndex == separator.Length)
        {
          break;
        }

        searching = false;
        sepIndex = 0;
      }

      text.Append(cur);

      index++;
    }
  }

  if (sepIndex == separator.Length &amp;&amp; text.Length &gt;= sepIndex)
    text.Length -= sepIndex;

  return text.ToString();
}
</code></pre>

<p>This is more than ten times faster than the original for a data set of 7600 kb and finding the last four chars as the <code>separator</code>.</p>
    </div>