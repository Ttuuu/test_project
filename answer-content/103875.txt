<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Comments</h2>

<p>OK I like the first comment.</p>

<pre><code>/*******************************************************************************
*
* Grant Williams
*
* Version 1.0.0
* August 27, 2015
*
* Test Program for Brent's Method Function.
*
* Brent's method makes use of the bisection method, the secant method, and inverse quadratic interpolation in one algorithm.
*
* To Compile Please use icc -std=c++11 if using intel or g++ -std=c++11 if using GCC.
*
********************************************************************************/
</code></pre>

<p>You may want to add a copyright notice.<br>
It is over my head the description but I assume somebody with some maths skills could understand it. So it provides some good information.</p>

<p>But there are a lot of other comments in this application are useless. Comments should be used judiciously within code. Bad comments are worse than no comments. You have to maintain comments in the same way you maintain the code and the compiler will not help you with the comments.</p>

<p>Your comments should not explain what the code is doing (the code should be easy to read and by self explanatory). You should explain <strong>WHY</strong> the code is doing something in a comment.</p>

<p>Example:</p>

<pre><code>    fs = f(s);  // calculate fs
    d = c;      // first time d is being used (wasnt used on first iteration because mflag was set)
    c = b;      // set c equal to upper bound
    fc = fb;    // set f(c) = f(b)
</code></pre>

<p>These comments are all should be removed. The code should also be fixed so that it makes the comments redundant.</p>

<pre><code>    fs = f(s);
    c  = upper_bound;
    fc = fb;
</code></pre>

<p>You'll notice that I even removed a line. That's because of after much clicking I found it was never used. What?! </p>

<pre><code>    double a;               // lower bound
    double b;               // upper bound
    double TOL = 0.0001;    // tolerance
    double MAX_ITER = 1000; // maximum number of iterations
</code></pre>

<p>Much easier to write if you use names that define what they mean.</p>

<pre><code>    double lowerBound;
    double upperBound;
    double tolerance     = 0.0001;
    double maxIterations = 1000;
</code></pre>

<h2>Identifier Names</h2>

<p>Using short identifier names is fine for maths. But when you write real applications that need to be maintained for decades you need people to understand your code. You can not rely on comments (because code changes over time and comments and code will drift apart). So you must use good names that explain their meaning for both variables and functions.</p>

<p>Single character names should be banned. A visual inspection of your code did not reveal any use of <code>d</code>. But I don't trust my eyes. So I had to search your code for occurrences using tools. There were so many false positives in the search because the single character <code>d</code> appears a lot in the middle of other words.</p>

<p>Pick names that are easy to see and spot and that provide meaning to the context that they are used in.</p>

<h3>Reserved Words.</h3>

<p>Certain styles of identifier are reserved for different Jobs. You should understand these reservations.</p>

<p>Identifiers that are all upper case are traditionally reserved for use by the pre-processor.</p>

<pre><code>MAX_ITER
</code></pre>

<p>This will get clobbered by the pre-processors if you are unlucky. Pick names that use a combination of upper and lower case characters.</p>

<p>Note it is allso traditional to have type names (User Defined) start with an uppercase letter and all method/variable names start with a lower case letter.</p>

<p>Whether you prefer camel-casing your words or using <code>_</code> between words is still a very divided subject. The <code>_</code> is the minority group (but it is a big minority). I am in the group of camel-casing because using <code>_</code> is error prone and hard to spot when you get it wrong.</p>

<h2>Declare and initialize in one statement.</h2>

<pre><code>    std::clock_t start;
    start = std::clock();

    // It is best to initialize your variables on declaration.
    // It makes sure that value are always defined.

    std::clock_t start = std::clock();
</code></pre>

<p>Also don't declare variables until you need them. Its not much of a problem with POD types that don't run code. But objects that have a type and therefore a constructor will run the constructor at declaration.</p>

<p>Also for readability you want the variable declared just before use so that you can see they type of variable easily and not have to go searching to the top of the function just to find the type.</p>

<h2>Prefer '\n' to std::endl</h2>

<p>The <code>std::endl</code> places a '\n' on the stream then flushes the stream. Manually flushing the stream is usually a bad idea. The code will flush it for you at the best times. You should only manually flush the streams if there is something critical that needs to happen that the code does not understand directly (like the application could be crashing and will not flush the stream).</p>

<p>If you flush streams manually you are likely to find your IO very inefficient.</p>

<h2>Declare loop variables so they are scoped correctly.</h2>

<pre><code>    for (function = 1; function &lt;= 3; function++)

    // More usual to see this:
    for (int function = 0; function &lt; 3; ++function)
</code></pre>

<ol>
<li>Scope the loop variable to the for loop.<br>
This prevent you from leaking scope informaiton.</li>
<li>Most loops in C/C++ are <code>&lt;</code> loops<br>
(Usually because we use zero indexed arrays.)</li>
<li>Prefer prefix increment<br>
For POD it does not matter. But for user defined types it does. If you change the type of the iterator later then you only need to change the type not change the type and then change all the postfix increments into prefix increments.</li>
</ol>

<p>Your loop code seems to be an obtuse way of writing:</p>

<pre><code>brents_fun(bradsFunction, -1.5, 0, tolerance, maxIteration);
brents_fun(alexsFunction, -10, 10, tolerance, maxIteration);
brents_fun(johnsFunction, -4,   3, tolerance, maxIteration);
</code></pre>

<h2>Self documenting code</h2>

<p>The body of this loop is way too long.</p>

<pre><code>    for (unsigned int iter = 1; iter &lt; MAX_ITER; ++iter)
    {
</code></pre>

<p>You should put the body in a function (with a descriptive name). Then your code becomes more self documenting.</p>

<p>Yep Crazy</p>

<pre><code>       /*
            Crazy condition statement!:
            -------------------------------------------------------
            (condition 1) s is not between  (3a+b)/4  and b or
            (condition 2) (mflag is true and |s−b| ≥ |b−c|/2) or
            (condition 3) (mflag is false and |s−b| ≥ |c−d|/2) or
            (condition 4) (mflag is set and |b−c| &lt; |TOL|) or
            (condition 5) (mflag is false and |c−d| &lt; |TOL|)
        */
</code></pre>

<p>Also the comment does not help. The comment basically restates the code, which is absolutely no help as I can read the code and see what it says. Now when I read the comment and the code I have to verify that they match (which is a pain).</p>

<p>What would be better is to describe <strong>WHY</strong> there is a conditional tests here. What are you trying to achieve with the test?</p>

<p>In the code rather than have this obtuse expression.</p>

<pre><code>        if (    ( (s &lt; (3 * a + b) * 0.25) || (s &gt; b) ) ||
                ( mflag &amp;&amp; (std::abs(s-b) &gt;= (std::abs(b-c) * 0.5)) ) ||
                ( !mflag &amp;&amp; (std::abs(s-b) &gt;= (std::abs(c-d) * 0.5)) ) ||
                ( mflag &amp;&amp; (std::abs(b-c) &lt; TOL) ) ||
                ( !mflag &amp;&amp; (std::abs(c-d) &lt; TOL))  )
</code></pre>

<p>Make the expression a function with a name that explains the test.</p>

<pre><code>      if (falloutDegredationHasDroppedBelowThreshold(sign, falloutCoeffecient, dropLevel, plank)
</code></pre>
    </div>