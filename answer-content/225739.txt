<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Race Condition</h2>

<p>You are starting two tasks concurrently, each blocking on an event to occur.</p>

<blockquote>
<pre><code>var res = await Task.WhenAny(ReadAsync(stream, buffer, ct), GetPayload(ct));
</code></pre>
</blockquote>

<p>By calling <code>WhenAny</code>, once one of tasks is completed, you continue without awaiting completion of the other task. Let's say that <code>ReadAsync</code> completes first, this means the following code rus in a task that is fired and forgotten:</p>

<blockquote>
<pre><code> var item = await _outgoingQueue.DequeueAsync(ct);
</code></pre>
</blockquote>

<p>You immediately go to a next loop of awaiting 2 newly created tasks: <code>ReadAsync</code> and <code>GetPayload</code>. However, since the previous <code>GetPayload</code> was not awaited upon, the new call to it will block until that one is finished (they both want to acquire a lock on the mutex of <code>AsyncProducerConsumerQueue</code>). </p>

<p><strong>And here is the race condition</strong>:   the old (forgotten) task completes but no-one would care about it. No handler is called on completion, because you only handle the task that completes first of the pair or newly created tasks.</p>

<p>Frankly, I don't know why you would even consider using this pattern. These are two independant tasks that should have their own scope and loop.</p>
    </div>