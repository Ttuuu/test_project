<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This is the ideal place for a class. Each book is its own object with its own method of returning its tokens. I would make a method <code>tokens</code>, which I would make a property that fills itself on the first call to it.</p>

<p>Something like this:</p>

<pre><code>from urllib import request
import nltk


class Book(object):
    def __init__(self, title, url, start=0, end=-1):
        self.title = title
        self.url = url
        self.start = start
        self.end = end
        self._raw = None
        self._tokens = None
        # self.words = None
        # self.words2tokens = None
        # self.pos = None

    def __str__(self):
        return self.title

    @property
    def raw(self):
        if self._raw is None:
            response = request.urlopen(self.url)
            draft = response.read().decode('utf8')
            self._raw = draft[self.start:self.end]
        return self._raw

    @property
    def tokens(self):
        if self._tokens is None:
            self._tokens = nltk.word_tokenize(self.raw)
        return self._tokens


if __name__ == "__main__":
    books = [Book('Moby Dick', 'http://www.gutenberg.org/files/2701/2701-0.txt', 28876, 28876 + 500),
             Book('Great Expectations', 'http://www.gutenberg.org/files/1400/1400-0.txt', 886, 886 + 500)]

    for book in books:
        print book
        print book.tokens
</code></pre>

<p>I commented out the <code>words</code>, <code>words2tokens</code> and <code>pos</code> attributes as they are not currently needed.</p>

<p>Alternatively, if you don't want to insist on the delayed getting of the values, you can do it all already in the constructor:</p>

<pre><code>class Book(object):
    def __init__(self, title, url, start=0, end=-1):
        self.title = title
        self.url = url
        self.start = start
        self.end = end
        self.raw = self.get_raw(url)
        self.tokens = nltk.word_tokenize(self.raw)
        # self.words = None
        # self.words2tokens = None
        # self.pos = None

    def __str__(self):
        return self.title

    def get_raw(self, url):
        response = request.urlopen(url)
        draft = response.read().decode('utf8')
        return draft[self.start:self.end]
</code></pre>

<p>Which you can use exactly the same way.</p>
    </div>