<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li>Don’t use macros in place of functions (or function templates). Use standard functions where appropriate (i.e. <code>std::min</code>).</li>
<li>Include all necessary headers (<code>&lt;exception&gt;</code>, <code>&lt;stdexcept&gt;</code>).</li>
<li>Fix the compile errors in your code: <code>std::exception</code> has no constructor accepting a C string.</li>
<li>Separate concerns: each function should have a single responsibility. In particular, this means that <code>readFromFile</code> should not receive <code>argc</code> and <code>argv</code>. It probably also shouldn’t receive all the other arguments, and instead <em>return</em> the result (as an appropriately defined struct of vectors).</li>
<li>In C++, unlike in C, <code>*</code> and <code>&amp;</code> in declarations go with the <em>type</em>, not with the variable name: <code>int&amp; n</code>, not <code>int &amp;n</code>.</li>
<li>Do not use RANDOM_CAPITALS in parameter names, regardless of whether the parameter is <code>const</code>.</li>
<li>Respect natural ordering: <code>min_vertexes</code> should come before <code>max_vertexes</code>.</li>
<li>Use guard clauses and early exit: Don’t indent the whole body of your function if the file successfully opened. Instead, check for failure and return/throw. Then continue without <code>else</code>.</li>
<li>But do not test whether the file was successfully opened, that’s useless. Instead, you <em>must</em> test whether each individual file reading operation was successful. You currently fail to do this.</li>
<li>I know people claim that this is a matter of opinion, but your bracing style is wasting <em>a lot</em> of vertical space: Your <code>readFromFile</code> function is 64 lines long. When putting the opening brace (and <code>else</code>) on the previous line, the function shrinks to 50 lines. 15% less. That’s a substantial reduction, and the whole function now fits on my screen. This is a <em>drastic readability improvement</em>.</li>
<li>Use consistent whitespace around operators. You mostly do this, but not everywhere.</li>
<li>Do not <code>close</code> the file explicitly unless you handle potential errors. The file will be closed automatically once the variable falls out of scope.</li>
<li>Use descriptive names. Single-letter variables in loops <em>can</em> be fine but <code>z</code>,
<code>a</code> and <code>d</code> are cryptic names. <code>i</code>… as a loop variable is conventional.</li>
<li>Avoid magic constants. Why does the main loop go to 4? You seem to encode a state machine but the code doesn’t make this obvious.</li>
<li>Keep variable scope as close as possible (e.g. declare <code>line</code> inside the loop).</li>
<li>Use appropriate standard algorithms; for instance, to read n values in a loop, use <code>std::copy_n</code> with <code>istream_iterator</code>s.</li>
<li>Don’t pass <code>int</code> (nor similar, small types) as <code>const&amp;</code>, pass it by value.</li>
<li>I think the <code>if (!visitedVertexes[x])</code> code is redundant and could be merged with the inner loop, but I currently don’t see how to do this well (= readably and efficiently). Still, consider whether this part of the algorithm can be restructured.</li>
<li>Don’t use C-style casts. In fact, the widening cast to <code>long long</code> here is unnecessary anyway.</li>
<li>Use local variables to break up excessively long expressions.</li>
<li>Use comments that describe <em>why</em> something is being done. The current comments don’t help me understand the code.</li>
<li>Use helper functions for repeated code, or when extracting code makes the logic more readable.</li>
<li><code>MAX_WEIGHT</code> is unnecessary, and its value is completely arbitrary</li>
<li>Don’t swallow errors: your <code>catch (...)</code> means that all the informative error messages you had get lost.</li>
<li>In case of error, do <em>not</em> <code>return 0</code> from <code>main</code>. You need to return an error code (usually 1).</li>
<li>Output error messages to STDERR, not STDOUT.</li>
</ul>

<p>Which leaves us with something like this:</p>

<pre class="lang-cpp prettyprint-override"><code>#include &lt;algorithm&gt;
#include &lt;iostream&gt;
#include &lt;fstream&gt;
#include &lt;iterator&gt;
#include &lt;limits&gt;
#include &lt;sstream&gt;
#include &lt;stdexcept&gt;
#include &lt;string&gt;
#include &lt;vector&gt;

struct ObjectCollection {
    std::vector&lt;int&gt; weights;
    std::vector&lt;int&gt; startingOrder;
    std::vector&lt;int&gt; endingOrder;
    int minWeight;
};

std::vector&lt;int&gt; readOrder(std::istream&amp; is, int const n) {
    std::vector&lt;int&gt; output;
    output.reserve(n);
    std::copy_n(std::istream_iterator&lt;int&gt;{is}, n, std::back_inserter(output));
    std::transform(begin(output), end(output), begin(output), [](int x) {return x - 1;});
    // FIXME: Optionally test for `is.fail()` here.
    return output;
}

ObjectCollection readFromFile(std::string const&amp; filename, int const min_vertexes, int const max_vertexes) {
    std::ifstream file{filename};
    std::vector&lt;int&gt; weights;
    std::vector&lt;int&gt; startingOrder;
    std::vector&lt;int&gt; endingOrder;
    int n;

    for (int state = 0; state &lt; 4; ++state) {
        std::string line;
        if (! std::getline(file, line)) throw std::logic_error{"Unable to read file"};
        // FIXME: This test is pretty useless: You filter empty input but not truncated input or too long input.
        if (line.empty()) throw std::logic_error{"Invalid input"};
        std::istringstream iss{line};

        if (state == 0) {
            if (! (iss &gt;&gt; n)) throw std::logic_error{"Failed to read n"};
            if (n &lt; min_vertexes || n &gt; max_vertexes) throw std::logic_error("Invalid amount of vertices");
        } else if (state == 1) {
            weights.reserve(n);
            std::copy_n(std::istream_iterator&lt;int&gt;{iss}, n, std::back_inserter(weights));
        } else if (state == 2) {
            startingOrder = readOrder(iss, n);
        } else {
            endingOrder = readOrder(iss, n);
        }
    }

    int const minWeight = *std::min_element(begin(weights), end(weights));
    return {weights, startingOrder, endingOrder, minWeight};
}

long long calculateLowestCostOfWork(ObjectCollection const&amp; objects) {
    int const n = objects.weights.size();
    std::vector&lt;int&gt; permutation(n);

    // constructing permutation p
    for (int i = 0; i &lt; n; ++i)
        permutation[objects.endingOrder[i]] = objects.startingOrder[i];

    long long result = 0;
    std::vector&lt;bool&gt; visitedVertexes(n);

    for (int i = 0; i &lt; n; ++i) {
        int numberOfElementsInCycle = 0;
        int minWeightInCycle = std::numeric_limits&lt;int&gt;::max();
        long sumOfWeightsInCycle = 0;
        if (! visitedVertexes[i]) {
            int x = i; // FIXME: Use proper name for `x`.
            // decomposition for simple cycles and calculating parameters for each cycle
            while (! visitedVertexes[x]) {
                visitedVertexes[x] = true;
                ++numberOfElementsInCycle;
                x = permutation[x];
                sumOfWeightsInCycle += objects.weights[x];
                minWeightInCycle = std::min(minWeightInCycle, objects.weights[x]);
            }
            // calculating lowest cost for each cycle
            // FIXME: Use proper names.
            int const cycleCost = (numberOfElementsInCycle - 2) * minWeightInCycle;
            int const globalCost = minWeightInCycle + (numberOfElementsInCycle + 1) * objects.minWeight;
            result += sumOfWeightsInCycle + std::min(cycleCost, globalCost);
        }
    }
    return result;
}

int main(int argc, char *argv[]) {
    if (argc != 2) {
        std::cerr &lt;&lt; "Error: missing filename\n";
        return 1;
    }
    int const MIN_VERTEXES = 2;
    int const MAX_VERTEXES = 1000000;
    try {
        auto objects = readFromFile(argv[1], MIN_VERTEXES, MAX_VERTEXES);
        std::cout &lt;&lt; calculateLowestCostOfWork(objects);
    } catch (std::exception const&amp; ex) {
        std::cerr &lt;&lt; "Error: " &lt;&lt; ex.what() &lt;&lt; "\n";
        return 1;
    }
}
</code></pre>

<p>(Untested, since I have no test data and don’t know what the algorithm is supposed to do.)</p>

<p>As mentioned elsewhere, the <em><code>reserve</code>-and-<code>push_back</code></em> pattern could be replaced by resizing the objects and then just copying directly. This means that you’d be performing redundant zero-initialisation, but on the other hand you’d avoid an out-of-bounds test inside the <code>push_back</code>. You need to benchmark to find out which of these variants is faster. However, this is unlikely to be a bottleneck in your code. Don’t sweat the small stuff.</p>
    </div>