<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>C++ review</h1>
<p>You still need a C review!</p>
<h2>Idioms/Patterns</h2>
<h3>RAII idiom</h3>
<p>In C++ we have this concept that an object should clean up its own resources. So when an object is created it will create and hold onto resources and when it is destroyed it will clean up those resources.</p>
<p>When learning about the idiom people mostly talk about memory and smart pointers. This is how we stop memory leaks in C++ that happen in C when things don't got as planned.</p>
<p>You should also note that an objects destructor is called when the control leaves the scope in which the object is created. <strong>However that scope is left</strong>. So even if you throw an exception that causes the stack to unwind as it unwinds the stack the destructors for <strong>all</strong> automatic objects are being called.</p>
<p>You need to apply this to your code.</p>
<pre><code> // this is an anti pattern in C++
 Stuff*   data = crate_data();

 ... do stuff with data
 ... do stuff with data

 destroy_data();
</code></pre>
<p>If you see this in your code you should be using RAII.</p>
<pre><code> class StuffHolder
 {
     Stuff*   data;

     public:
         StuffHolder()
             : data(crate_data())
         {}
         ~StuffHolder()
         {
              destroy_data(data);
         }
 };

 // Then in your code
 StuffHolder   dataHolder;

 ... do stuff with data
 ... do stuff with data
</code></pre>
<p>That's the pattern you should be using.</p>
<h3>Exceptions</h3>
<p>Exceptions make code easier to understand. Use them.</p>
<p>In your code you have places that you call <code>exit()</code>. Which is fine as it makes the rest of the code easy to read as you are not writing code to pass error message back through many layers of code so it keeps the code nice and simple.</p>
<p>There is a disadvantage in that you have exit locations scattered through your code. Have you been consistent with the error messages that are generated? You have to search and check every exit location.</p>
<p>A lot of code (especially bigger apps or libraries) don't want want to exit. They are part of a bigger framework so in C code you need to add error logic explicitly to the code to force the stack to unwind to the point where the user can take an action based on the error, or in a server you have a single place that is doing the error logging (so that it is consistent; otherwise each library will end up generating logs in a different way).</p>
<p>Exceptions provide the best of both worlds. You have a single place to catch and log exceptions. You don't have to write explicit error handling code (this is what exceptions do they unwind the code).</p>
<p>When you use exceptions with RAII all your resource are also correctly handled and released so you have no issues with releasing resources.</p>
<p>I can see several different ways of generating error messages in the code:</p>
<pre><code>    ERR_print_errors_fp(stderr);
    exit(EXIT_FAILURE);

    perror(hostname);
    exit(EXIT_FAILURE);

    fprintf(stderr, "%s: %s\n", hostname, gai_strerror(status));
    exit(EXIT_FAILURE);

    SSL_get_error(ssl, status);
    ERR_print_errors_fp(stderr); //High probability this doesn't do anything
    fprintf(stderr, "SSL_connect failed with SSL_get_error code %d\n", status);
    exit(EXIT_FAILURE);
</code></pre>
<p>When you start having automated tools run over your logs this will be a real pain. Have a single point generate the error message so it is consistent for all places in the code. Then you can write tools that can easily analyze your error logs.</p>
<h2>Code Review.</h2>
<p>Would like to point out you don't use a single C++ header file.</p>
<pre><code>#include &lt;errno.h&gt;
#include &lt;unistd.h&gt;
#include &lt;string.h&gt;
#include &lt;resolv.h&gt;
#include &lt;netdb.h&gt;
#include &lt;openssl/ssl.h&gt;
#include &lt;openssl/err.h&gt;
</code></pre>
<h3>Like the comment (It provides useful information).</h3>
<pre><code>//Not sure what headers are needed or not
//This code (theoretically) writes "Hello World, 123" to a socket over a secure TLS connection
//compiled with g++ -Wall -o client.out client.cpp -L/usr/lib -lssl -lcrypto
//Based off of: https://www.cs.utah.edu/~swalton/listings/articles/ssl_client.c
//The OpenConnection method was heavily based on the answer to this post: https://stackoverflow.com/questions/52727565/client-in-c-use-gethostbyname-or-getaddrinfo
</code></pre>
<h3>Returning pointers</h3>
<p>Returning pointers in C++ is very uncommon.</p>
<pre><code>SSL_CTX *InitSSL_CTX(void)
</code></pre>
<p>You usually return an object (or reference). If you have a resource it is contained within an object that you return. That way the resource is correctly handled and released. If you are returning a pointer to an object that is owned locally by the function/method then you would normally return a reference. This guarantees that the object exists (can never be <code>nullptr</code>) but it also an indication that you are not releasing ownership of the pointer.</p>
<h3>Terrible comment.</h3>
<pre><code>    // Bad comment
    const SSL_METHOD *method = TLS_client_method(); /* Create new client-method 

    // Another terrible comment
    X509 *cert = SSL_get_peer_certificate(ssl); /* get the server's certificate */
</code></pre>
<p>Comments like this are useless. In fact they are worse than useless they are dangerous. The comment tells me no more than the function name so it is not providing any real information. Also in the future as this code is maintained and made better the next developer could change the function call but leave the comment. Then a third developer sees there is a discrepancy between code and comment. Now what does he do? Does he fix the comment? Does he fix the code?</p>
<p>The point is comments de-generate over time and become less useful unless you are very active in maintaining them. So write code that is self documenting. Add comments that is explain WHAT (you are trying to do) or WHY (you are trying to do it) <strong>don't write comments</strong> that explain HOW (you are doing it). The code explains how (there are exceptions to this rule but you will have people tell you when there is an exception and the code needs to be commented).</p>
<h3>One variable declaration per line:</h3>
<pre><code>    struct addrinfo hints = {0}, *addrs;
</code></pre>
<p>One variable declaration per line. Also in C++ you don't need the <code>struct</code>. In C++ we normally (unlike C) put the <code>*</code> next to the type. Types are exceedingly important in C++ (much more than in C) so we like to know the exact type. To me the above line is hard to parse.</p>
<pre><code>    addrinfo   hints = {0};
    addrinfo*  addrs;
</code></pre>
<p>That looks so much neater and I can see the exact type of each variable.</p>
<h3>Dead Code</h3>
<p>Remove dead code.<br>
This function is not used anywhere. Delete it from your code.</p>
<pre><code>void DisplayCerts(SSL *ssl)
</code></pre>
<h3>Main is special</h3>
<p>Don't need a return in main().</p>
<pre><code>    return 0;
</code></pre>
<p>You can do it; but people use no return value to indicate that the app will never generate an error code. So if I see a <code>return 0;</code> at the end then I start looking through main to see if there are any <code>return 1;</code> in the code.</p>
<p>Now I will admit that I would also add <code>return 0;</code> because you have used <code>exit()</code> in your code. But If I had written the code I would not have an <code>exit()</code> and consequently probably not had an <code>return 0;</code>.</p>
<pre><code>int main(int argc, char* argv[])
{
    try {
       std::vector&lt;std::string&gt;   args(argv, argv + argc);
       exampleClient(args);
    }
    catch(std::exception const&amp; e)
    {
        std::cerr &lt;&lt; "Exception: " &lt;&lt; e.what() &lt;&lt; "\n";
        throw;
    }
    catch(...)
    {
        std::cerr &lt;&lt; "Unknown Error: Red Alert\n";
        throw;
    }
}
</code></pre>
<h2>Issues</h2>
<p>Not sure if this is an error but it looks like one.</p>
<pre><code>SSL_CTX *ctx = InitSSL_CTX();
SSL *ssl = SSL_new(ctx);
const int sfd = OpenConnection("127.0.0.1", argv[1]);

...

SSL_free(ssl);
close(sfd);
SSL_CTX_free(ctx);
</code></pre>
<p>You are creating the resources in a different order to closing them. Seems very code smelly. I would expect resource to be released in the reverse order of creation to make sure there are no interdependencies.</p>
<h2>Being Selfish</h2>
<p>I have already written a wrapper for C++ clients to use sockets.</p>
<p><a href="https://lokiastari.com/blog/2016/05/26/c-plus-plus-wrapper-for-socket/index.html" rel="noreferrer">https://lokiastari.com/blog/2016/05/26/c-plus-plus-wrapper-for-socket/index.html</a></p>
<p>The source is here:</p>
<p><a href="https://github.com/Loki-Astari/Examples/tree/master/Version2" rel="noreferrer">https://github.com/Loki-Astari/Examples/tree/master/Version2</a></p>
<p>Look at <code>client.cpp</code> to see how to use it look at <code>Socket.h</code> for the interface. Would be nice to have a SSL Implementation. It may be as simple as providing an implementation of <code>Protocol.h</code> ie <code>SSLProtocol</code>. Just saying. I would review that.</p>
    </div>