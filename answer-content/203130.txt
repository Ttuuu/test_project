<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Welcome! Here are my thoughts what could be improved:</p>

<ol>
<li><p>For top-level declarations, always do include types. I'm pretty sure in a few weeks it'll be difficult to realize what</p>

<pre><code>mapTuple = join (***)
</code></pre>

<p>means without knowing that it's type is</p>

<pre><code>mapTupple :: (b' -&gt; c') -&gt; (b', b') -&gt; (c', c')
</code></pre>

<p>Also as you don't need arrows anywhere else, it makes sense to specialize the type to avoid accidental errors and get nicer error messages.</p></li>
<li><p>I'd put a newline betweek 'data...' and 'label'. Keeping consistent style helps readability <em>very</em> much.</p></li>
<li><p>You don't need to nest 'let' expressions. You can write just</p>

<pre><code>let midpoint = Seq.length s `div` 2
    subseq = Seq.splitAt midpoint s
    ...
in Branch label subtrees
</code></pre></li>
<li><p>Instead of creating a sequence and then converting it into a balanced tree, you can convert a list directly into a balanced tree in <em>O(n)</em>. This is a nice exercise on its own!</p></li>
<li><p>Use <a href="https://www.haskell.org/haddock/doc/html/markup.html" rel="nofollow noreferrer">Haddock markup</a> in comments, you can then generate nice documentation very easily.</p></li>
<li><blockquote>
  <p>Algorithm runs in Î˜(n log n) which I believe is optimal. </p>
</blockquote>

<p>Are you sure?</p></li>
</ol>
    </div>