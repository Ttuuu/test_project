<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Java doesn't handle recursion very well. And by not very well I mean it should be avoided almost every time where you cannot limit the depth to something small. To show you how bad it is let's take a look at this simple program:</p>

<pre><code>public static void main(String[] args) {
    for(int n = 0; n &lt; 100_000; n+=100) {
        List&lt;Integer&gt; list = new ArrayList&lt;&gt;();
        for(int i = 0; i &lt; n; i++) {
            list.add(i);
        }
        reverse(list);
        System.out.println(n);
    }
}
</code></pre>

<p>At some point in the output we can see this:</p>

<pre><code>17800
17900
Exception in thread "main" java.lang.StackOverflowError
at slowness.SlowApp.reverse(SlowApp.java:24)
at slowness.SlowApp.reverse(SlowApp.java:24)
</code></pre>

<p>This means that on my machine with default settings I can't even handle a list of 18000 integers. Any list bigger than that just crashes the program.</p>

<p>Is it possible to do it without recursion then?</p>

<p>This has proven a little trickier than I expected when I started writing this answer.</p>

<p>I was thinking of 2 possible approaches. </p>

<p>One is to always update the list in place. Just take the last element from the list and insert it into the correct spot (insert at 0, next insert at 1, next ...). Since we don't know which kind of List we are working with this could be a really expensive operation.</p>

<p>The other approach is to first take a copy of all the elements. Then clear the input list. Reverse the copied elements and insert them back into the input list. The main advantage here is that we can copy them into an array which allows O(1) access to each element even for updating them.</p>

<p>An example implementation is then:</p>

<pre><code>public static &lt;T&gt; void reverse2(List&lt;T&gt; list) {
    T[] array = (T[]) list.toArray();

    list.clear();

    for(int i = 0; i &lt; array.length/2; i++) {
        T temp = array[i];
        array[i] = array[array.length - i-1];
        array[array.length-i-1] = temp;
    }

    for(T item : array) {
        list.add(item);
    }
}
</code></pre>

<p>This implementation has no issue with a List of a million Integers.</p>

<p>Edit: just inserting backwards was too obvious after I tried to use list.addAll(aray) which didn't work (needs collection, not an array). I'll leave the current implementation as-is in my answer.</p>

<p>Note that this also isn't the most efficient way. I highly advise you to look at the implementation of the internal Collection.reverse to see a better way.</p>
    </div>