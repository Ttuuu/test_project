<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Separate input from processing.  If you want to test your method with a number of different values, you'll have to call <code>change()</code> multiple times, and enter in the value each time.  Instead, change the function to accept the <code>amnt</code>, and you can call it many times passing in the amount of cash as an argument:</p>

<pre><code>def change(amnt):
    # ...
</code></pre>

<p>Working with tuples from <code>divmod</code> is awkward.  Python has deconstructing assignment, which will take a returned <code>tuple</code> an assign the members to separate variables:</p>

<pre><code>def change(amnt):
    quarters, amnt = divmod(amnt, 0.25)
    print("Quarters: ", quarters)

    dimes, amnt = divmod(round(amnt, 2), 0.10)
    print("Dimes: ", dimes)
</code></pre>

<p>For the last operation, you don't use the remainder, so the "throw-away" variable <code>_</code> can be used for it:</p>

<pre><code>    pennies, _ = divmod(round(amnt, 2), 0.01)
    print("Pennies: ", pennies)
</code></pre>

<p>If you import this script into another program, you probably don't want the script to immediately run; rather you just want the <code>change(amnt)</code> function to be defined so this other program can call it.  This is done by adding a "guard" at the end of the script, which only runs the code if the script is invoked directly:</p>

<pre><code>if __name__ == '__main__':
    amnt = float(input("Enter an amount in USD: "))
    change(amnt)
</code></pre>

<hr>

<p>In addition to separating input from processing, you might want to separate the processing from the output:</p>

<pre><code>def change(amnt):
    quarters, amnt = divmod(amnt, 0.25)
    dimes,    amnt = divmod(amnt, 0.10)
    nickels,  amnt = divmod(amnt, 0.05)
    pennies = round(amnt / 0.01, 0)

    return list(map(int, [quarters, dimes, nickels, pennies]))

if __name__ == '__main__':
    amnt = float(input("Enter an amount in USD: "))
    quarters, dimes, nickels, pennies = change(amnt)
    print("{} quarters, {} dimes, {} nickels, {} pennies".format(
          quarters, dimes, nickels, pennies))
</code></pre>

<hr>

<p>Despite attempts to fix rounding errors with things like <code>round(amnt,2)</code>, calling <code>change(0.85)</code> returns <code>[3, 0, 1, 5]</code>, showing that there wasn't quite enough change to make 2 nickels, but after removing 1 nickel, approximately 5 pennies remained.  This is caused by floating point math.</p>

<p>We can avoid these issues by switching to integer math, based on the number of pennies:</p>

<pre><code>def change(amnt):
    pennies = round(amnt * 100)   # Convert from dollars to pennies

    quarters, pennies = divmod(pennies, 25)
    dimes,    pennies = divmod(pennies, 10)
    nickels,  pennies = divmod(pennies, 5)

    return quarters, dimes, nickels, pennies

if __name__ == '__main__':
    amnt = float(input("Enter an amount in USD: "))
    quarters, dimes, nickels, pennies = change(amnt)
    print("{} quarters, {} dimes, {} nickels, {} pennies".format(
          quarters, dimes, nickels, pennies))
</code></pre>

<p>As mentioned in the comments by @Ilmari, <code>round(...)</code> with only a single argument will round the value to the nearest whole number and return an <strong>integer</strong> value.  When integer values are used with <code>divmod</code>, results are also integers, so switching from dollars-and-cents to integer pennies eliminates the ugly rounding issues.</p>
    </div>