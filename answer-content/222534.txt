<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>Is there a way to solve this memory or time problem using my code or should use a different algorithm?</p>
</blockquote>

<p>The <em>algorithm</em> is fine for the kind of scale you're talking about. It's the <em>implementation</em> of the algorithm which needs optimisation.</p>

<p>To tackle the memory issue, look at <code>set</code>. Given that the elements of the set are integers from a fixed range and moderately dense in that range (about 1 in 18 numbers up to <span class="math-container">\$10^8\$</span> are prime) the ideal would be a data structure which uses 1 bit per number. (I'm not sure whether one is available in Python. In the worst case, since it has big integers you can use bit manipulations on numbers). But failing that, a simple array of Boolean values probably has less overhead than a set.</p>

<hr>

<blockquote>
<pre><code>return list(sorted((2, *numbers)))
</code></pre>
</blockquote>

<p>This is actually quite heavy-weight. It's probably not the bottleneck, but it might be worth asking yourself whether the caller needs a list. Perhaps you can use <code>yield</code> inside the main loop and skip the post-processing altogether. Perhaps the memory pressure isn't so bad as to prevent you from accumulating the list in order. And if the memory pressure is a problem, perhaps you can break the set into <em>pages</em>, something like (<strong>warning:</strong> code not tested, and this doesn't include the other ideas I've mentioned):</p>

<pre><code>primes = [2]
page_size = 1000000
for page_start in range(3, num, page_size):
    page_end = min(num, page_start + page_size)
    page = set(range(page_start, page_end, 2))
    for p in primes:
        remove multiples of p from page
    for p in range(page_start, page_end, 2):
        if p in page:
            primes.append(p)
            remove multiples of p from page
</code></pre>

<hr>

<p>Note: I've thrown out several ideas. I understand that you're doing this as a learning exercise, and trying out various different directions should be useful for that purpose even if you conclude that there isn't enough benefit to compensate for the added complexity.</p>
    </div>