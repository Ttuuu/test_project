<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First, a few stylistic points:</p>

<ul>
<li>It's more common to write the <code>div</code> and <code>mod</code> functions in infix, as <code>x `mod` y == 0</code>, etc.</li>
<li>A parenthesized argument to a function is <em>never</em> written <code>f(x)</code>.  It's always with a separating space like <code>f (x)</code>, so you want <code>primes (x `div` factor)</code>.</li>
<li>The infix operator <code>$</code> is pretty much always both preceded and followed by a space.</li>
<li>Similarly, in the <code>[x..y]</code> syntax, the <code>..</code> is normally <em>not</em> surrounded by any space, though when it is, it is <em>both</em> preceded and followed by space, so either <code>[1,3..roof]</code> or <code>[1, 3 .. roof]</code> would be more common than <code>[1,3.. roof]</code>.</li>
</ul>

<p>and some advice on functions:</p>

<ul>
<li><code>even x</code> is preferred to <code>x `mod` 2 == 0</code></li>
<li>For positive values, <code>1 + truncate x</code> can be replaced with <code>ceiling x</code>.  Technically, though, you don't need to check any numbers greater than the square root, so <code>floor (sqrt $ fromIntegral x)</code> works in your case.</li>
<li><p>Also for positive values, the function pair <code>quot/rem</code> is equivalent to <code>div/mod</code> and the former can compile to faster code on x86_64 (e.g., <code>quot</code> on <code>Int</code>s can be a single machine instruction), so many Haskellers will get in the habit of using them whenever the substitution works.  (Alternatively, this is a ridiculous micro-optimization here, so sticking with the <code>div/mod</code> pair is fine if it looks more natural.)</p>

<p>However, it might be even better to introduce a predicate:</p>

<pre><code>divides :: (Integral a) =&gt; a -&gt; a -&gt; Bool
divides d n = n `rem` d == 0
</code></pre>

<p>so you can write <code>y `divides` x</code> in your list comprehension, and use the section <code>(`divides` x)</code> in your <code>filter</code>.</p></li>
</ul>

<p>Finally, it's usual practice to provide type signatures that are more general than the ones you've provided.  Certainly, generalizing <code>primes</code> and <code>isPrime</code> to all integral types would be usual:</p>

<pre><code>isPrime :: (Integral a) =&gt; a -&gt; Bool
primes :: (Integral a) =&gt; a -&gt; [a]
</code></pre>

<p>On the other hand, <code>isLengthLessThan</code> is probably fine the way it as, as it's usual to assume list lengths will fit in a 64-bit <code>Int</code>, for obvious reasons.</p>

<p>Now, with respect to your questions:</p>

<blockquote>
  <p>Should <code>isLengthLessThan</code> be in a where under <code>isPrime</code>?</p>
</blockquote>

<p>That's up to you.  A utility function that's used in only one function is often included in a <code>where</code> clause, though if the function seems "independently useful", it's sometimes kept at top-level.  In this small module, keeping it at top level seems reasonable.  In a bigger module, you might stick it in a <code>where</code> clause to reduce clutter.</p>

<p>Rearranging the functions can also help.  If you put <code>primes</code> at the top and then put utility functions after the functions that use them (e.g., <code>primes</code>, then <code>isPrime</code>, then <code>isLengthLessThan</code>), it can make it easier to follow the program's organization.</p>

<blockquote>
  <p>Is <code>isLengthLessThan</code>'s name too verbose?</p>
</blockquote>

<p>I'd say so.  Maybe <code>shorterThan</code>?  Note that the character count is probably less of an issue than the word count -- <code>shorterThan</code> is simple to read and understand; <code>isLengthLessThan</code> belongs in a Java program as a method in the <code>ListLengthCheckerFactory</code> class.  But also, see below for how to eliminate this function entirely.</p>

<blockquote>
  <p>What should I name my "primes" function?</p>
</blockquote>

<p>I'd say <code>factors</code> -- I mean, it's obviously going to be the prime factorization, because what other <code>factors</code> function would make sense?</p>

<blockquote>
  <p>Are the function type specifications called that or declarations?</p>
</blockquote>

<p>According to the <a href="https://www.haskell.org/definition/haskell2010.pdf" rel="nofollow noreferrer">Haskell 2010 Report</a>, they're called "type signatures", and the corresponding function definitions <code>f x = ...</code> are called "bindings".  <strong>Both</strong> type signatures and bindings are examples of "declarations", so <code>isPrime :: Int -&gt; Bool</code> is a declaration, but so is <code>isPrime x = ...</code>.  However, in informal speech, if you asked "should this binding have a type declaration?", everyone would know what you meant.</p>

<blockquote>
  <p>Should I put the type specifications right before the function or should I put it at the start?</p>
</blockquote>

<p>Almost universally in Haskell code, type signatures are placed immediately preceding the corresponding binding rather than collected together at the beginning of the module.  While collecting them together probably seems like a nice way of documenting the "interface" at the top of the module, it has the drawback that someone stumbling across the definition may assume there's no type signature (as signatures are often optional) and so never see it, and what's more the standard Haddock documentation tool is set up to have the signature and definition of each binding in the same place.</p>

<blockquote>
  <p>Do specifications help speed or do they only help us by giving us better errors?</p>
</blockquote>

<p>If the type signature matches what would be inferred by GHC if it was missing (which is often the most general possible type), then there is no effect on generated code.  Moreover, GHC is designed to generate efficient code even when highly generalized signatures are used, by specializing and inlining functions aggressively.  You could most likely drop your signatures, or use the signatures I suggested above with no effect on performance.</p>

<p>So, yes, type signatures are primarily useful for generating better error messages, occasionally for catching certain design errors, and -- when the code is finished -- for documenting the interface.</p>

<blockquote>
  <p>Do parenthesis make compilation faster or do they only muddle code up?</p>
</blockquote>

<p>Any effect of parentheses on compilation speed will be miniscule, and it's standard Haskell style to omit them except where they are necessary.</p>

<p>Anyway, incorporating the advice I gave above, my version of your program currently looks like the following.  Note that I turned on <code>-Wall</code>, which reminded me that your program doesn't actually need the modules it imports, and let me know that there was a type defaulting going on in the <code>sqrt</code> call that I thought should be made explicit.  I also ran <code>hlint</code> on it, which didn't have any hints for me.</p>

<pre><code>{-# OPTIONS_GHC -Wall #-}

module MorePrimes where

factors :: (Integral a) =&gt; a -&gt; [a]
factors x
    | isPrime x = [x]
    | otherwise = factor : factors (x `div` factor)
    where factor = head $ filter (`divides` x) [2..]

isPrime :: (Integral a) =&gt; a -&gt; Bool
isPrime x
    | x == 2    = True
    | even x    = False
    | otherwise = shorterThan 2 [y | y &lt;- [1,3..roof], y `divides` x]
    where roof = floor $ sqrt (fromIntegral x :: Double)

shorterThan :: Int -&gt; [a] -&gt; Bool
shorterThan 0 _      = False
shorterThan _ []     = True
shorterThan n (_:ys) = shorterThan (n-1) ys

divides :: (Integral a) =&gt; a -&gt; a -&gt; Bool
divides d n = n `rem` d == 0
</code></pre>

<p>Finally, some additional optimizations.</p>

<p>Your test in the third case of <code>isPrime</code> can be simplified.  Since <code>1</code> always divides <code>x</code>, you can replace the test with:</p>

<pre><code>shorterThan 1 [y | y &lt;- [3,5..roof], y `divides` x]
</code></pre>

<p>which is equivalent to:</p>

<pre><code>null [y | y &lt;- [3,5..roof], y `divides` x]
</code></pre>

<p>which would more usually be written:</p>

<pre><code>not $ any (`divides` x) [1,3..roof]
</code></pre>

<p>allowing you to drop the definition of <code>shorterThan</code> entirely and use:</p>

<pre><code>isPrime :: (Integral a) =&gt; a -&gt; Bool
isPrime x
    | x == 2    = True
    | even x    = False
    | otherwise = not $ any (`divides` x) [3,5..roof]
    where roof = floor $ sqrt (fromIntegral x :: Double)
</code></pre>

<p>The other problem is that <code>factors</code> is doing extra work here -- it's using <code>isPrime</code> to check if <code>x</code> is prime using an algorithm that handles even numbers specially for efficiency, but then it turns around and does trial division by all numbers <code>[2..]</code> for composites.  Instead, you could replace <code>isPrime</code> with a function to find the first prime factor of <code>x</code>, like so:</p>

<pre><code>firstPrime :: (Integral a) =&gt; a -&gt; a
firstPrime x
    | even x    = 2
    | otherwise = head [y | y &lt;- [3,5..roof]++[x], y `divides` x]
    where roof = floor $ sqrt (fromIntegral x :: Double)
</code></pre>

<p>This finds the first prime factor below <code>roof</code>, but throws in <code>x</code> itself as a last resort.  (There's an unnecessary check here that <code>x</code> divides itself, so we could improve this code to avoid that, but it might not be worth the trouble.)</p>

<p>Then, <code>factors</code> can grab this first prime factor, and see if it was <code>x</code> itself (in which case <code>x</code> is prime and we're done) or else look for more factors.  The complete code for this version looks like:</p>

<pre><code>{-# OPTIONS_GHC -Wall #-}

module MorePrimes where

factors :: (Integral a) =&gt; a -&gt; [a]
factors x = case firstPrime x of
    factor | factor == x -&gt; [x]
           | otherwise   -&gt; factor : factors (x `div` factor)

firstPrime :: (Integral a) =&gt; a -&gt; a
firstPrime x
    | even x    = 2
    | otherwise = head [y | y &lt;- [3,5..roof]++[x], y `divides` x]
    where roof = floor $ sqrt (fromIntegral x :: Double)

divides :: (Integral a) =&gt; a -&gt; a -&gt; Bool
divides d n = n `rem` d == 0
</code></pre>

<p>Obviously, further optimization is possible, as illustrated by @Gurkenglas's answer.</p>
    </div>