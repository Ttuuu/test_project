<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I see some things that may help you improve your program.</p>

<h2>Omit unused variables</h2>

<p>Because <code>argc</code> and <code>argv</code> are unused, you could use the alternative form of <code>main</code>:</p>

<pre><code>int main()
</code></pre>

<h2>Eliminate global variables where practical</h2>

<p>Having routines dependent on global variables makes it that much more difficult to understand the logic and introduces many opportunities for error.  In this case <code>master</code> can easily be eliminated and I'll show below.</p>

<h2>Minimize the scope of variables</h2>

<p>Somewhat related to eliminating global variables is the idea that variables should be defined in the minimum practical scope.  In this case, for instance, <code>key</code> doesn't really belong in <code>main</code> but should instead be in <code>smorse</code> as I'll describe in the next suggestion.</p>

<h2>Use a better data structure</h2>

<p>Right now, <code>key[]</code> is a poorly named data structure which is then post-processed at runtime to create the data structure that's actually used.  Better would be to simply use a better data structure in the first place.  Here's how I'd do it:</p>

<pre><code>static const char* morse[] = {".-", "-...", "-.-.", "-..", ".", "..-.", "--.", "....", "..", ".---", "-.-", ".-..", "--", "-.", "---", ".--.", "--.-", ".-.", "...", "-", "..-", "...-", ".--", "-..-", "-.--", "--.."};
</code></pre>

<h2>Fix the bug</h2>

<p>Right now, <code>output</code> is uninitialized when the call to <code>strcat</code> is made, making this <em>undefined behavior</em>.  You don't want that!  Instead, initialize <code>output</code> like this:</p>

<pre><code>output[0] = '\0';
</code></pre>

<h2>Check for <code>NULL</code> pointers</h2>

<p>If the call to <code>malloc</code> fails, the program will dereference a <code>NULL</code> pointer which is undefined behavior.  Instead, explicitly check for a <code>NULL</code> pointer.  You may also want to check to make sure that <code>smorse</code> has not been passed a <code>NULL</code> pointer.</p>

<h2>Don't leak memory</h2>

<p>Right now, because the pointer that <code>smorse</code> returns is only passed to <code>printf</code>, it can't be freed, which means that the program leaks memory.  I'd change <code>main</code> to look like this:</p>

<pre><code>int main() {
    const char *words[] = { "sos", "daily", "programmmer", "bits", "three", NULL };
    for (const char **word = words; *word; ++word) {
        char *morse = smorse(*word);
        puts(morse);
        free(morse);
    }
}
</code></pre>

<h2>Eliminate "magic numbers"</h2>

<p>There are a few numbers in the code, such as <code>26</code> and <code>97</code> that have a specific meaning in their particular context.  By using named constants such as <code>LetterCount</code> or the character constant <code>'a'</code>, the program becomes easier to read and maintain.  </p>

<h2>Use <code>const</code> where practical</h2>

<p>The <code>keys</code> variable should never be changed, and so it should be declared <code>const</code>.  Further, it would be better to have the argument to <code>smorse</code> also be a <code>const char *</code> to indicate to the caller that the passed word is not changed.</p>

<h2>Perform input sanitation</h2>

<p>The <code>smorse</code> function is not particularly robust for general user input.  For instance, if the user passes the string <code>"Z93!"</code>, this code doesn't catch the fact that these letters are out of range and attempts to address an array with a negative index value.  On my machine, this causes a segfault and a program crash.</p>

<h2>Create a test function</h2>

<p>Since you have some known inputs and expected outputs, it would make sense to use those to create some test vectors that could be used by a test function.  </p>
    </div>