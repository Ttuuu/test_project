<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I would consider building the board as a separate concern from displaying the board. I say this as it is more practical from a learning standpoint to understand how you might build the data structure that represents a chessboard (for example a two-dimensional array) not, just how to display it by building a string.  During your programming journey, you will likely learn to embrace the separation of logic/data storage concerns from display concerns.</p>

<p>I would also encourage you to more heavily leverage <code>Array()</code> functions.</p>

<p>This might yield something like:</p>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>function buildBoard(size) {
    var board = Array(size);
    for (var row = 0; row &lt; size; row++) {
        board[row] = Array(size).fill(0);
        for (var col = row % 2; col &lt; size; col = col + 2) {
            board[row][col] = 1;
        }
    }
    return board;
}

function displayBoard(size) {
    var board = buildBoard(size);
    var output = '';
    board.forEach(function(row) {
        row.forEach(function(col) {
             output += (col === 1) ? '#' : ' ';
        });
        output += "\n";
    });
    console.log(output);
}

displayBoard(8);
displayBoard(20);</code></pre>
</div>
</div>


<p>Now this certainly is not optimized from the standpoint of operational complexity (in that you have to perform \$O(n^2)\$ iteration twice, but it does break down the problem into the logic space of setting up a board and then displaying a board, which has more real-world applicability than building a chessboard directly into a string.</p>
    </div>