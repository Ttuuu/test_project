<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Not a fan of LINQ, yet? Then look here... You could start by grouping <code>Child</code> by <code>Sex</code> into a new lookup, this would replace the two <code>Where</code>s. In the next step you <code>Zip</code> them together and take one item from each collection at a time. You create from then new <em>tiny</em> collections that you finally flatten with <code>SelectMany</code>. No calculation necessary.</p>

<pre><code>var groups = items.ToLookup(i =&gt; i.Sex);
var alternating = 
    groups["male"]
        .Zip(groups["female"], (x, y) =&gt; new[] { x, y })
        .SelectMany(t =&gt; t)
        .ToList();
</code></pre>

<p>This will however require that both collections have the same length because <code>Zip</code> will go only as far as the shorter collection.</p>

<hr>

<p>Some nice improvement to you method would be to make it work for any group of items. When you pass it a custom comparer you can <code>GroupBy</code> the items and iterate over each group until there is nothing left to <code>yield</code>. Since enumerators are disposable you need to make sure to dispose them properly at the end thus the <code>finally</code> block.</p>

<pre><code>public static IEnumerable&lt;T&gt; Interleave&lt;T&gt;(this IEnumerable&lt;T&gt; source, IEqualityComparer&lt;T&gt; comparer)
{
    var groups = source.GroupBy(x =&gt; x, comparer);
    var enumerators = groups.Select(g =&gt; g.GetEnumerator()).ToList();
    try
    {
        var any = false;
        do
        {
            any = false;
            foreach (var e in enumerators)
            {
                if (e.MoveNext())
                {
                    any = true;
                    yield return e.Current;
                }
            }
        } while (any);
    }
    finally
    {
        foreach (var e in enumerators)
        {
            e.Dispose();
        }
    }
}
</code></pre>

<p>An example usage could then look like this:</p>

<pre><code>var innerComparer = StringComparer.OrdinalIgnoreCase;
var comparer = EqualityComparerFactory&lt;Child&gt;.Create
(
    (x, y) =&gt; innerComparer.Equals(x.Sex, y.Sex), 
    obj =&gt; innerComparer.GetHashCode(obj.Sex)
);
var result = items.Interleave(comparer);
</code></pre>
    </div>