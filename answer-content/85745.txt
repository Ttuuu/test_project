<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ol>
<li><p>Don't check for NULL pointer argument. The function should expect a valid null-terminated string, it's responsibility of the caller to ensure correct argument.</p></li>
<li><p>You don't need to know the string length. Check for null-terminator right in the hash loop.</p></li>
<li><p>It's possible to write it shorter and cleaner.</p>

<pre><code>static size_t getHash(const char* cp)
{
    size_t hash = 0;
    while (*cp)
        hash = (hash * 10) + *cp++ - '0';
    return hash;
}
</code></pre></li>
<li><p>It's not quite clear what do you mean by "ASCII decimal value". Are you referring to this expression in your code: <code>c - '0'</code>? Well, suppose at some moment <code>c == 'Z'</code>, so this expression amounts to <code>'Z' - '0'</code>. If we substitute ASCII codes for these characters, then we get <code>90 - 48</code>, this is equal to 42 which is ASCII code for <code>'*'</code> character. So you have transformed <code>'Z'</code> into <code>'*'</code>. Is this somehow supposed to improve the quality of your hash function? I'm in doubt.</p></li>
<li><p>Are you aware that for the same expression <code>c - '0'</code> for a number of possible <code>c</code> values (e.g. <code>' '</code>, <code>'!'</code>, and anything with ASCII value less than 48) you will get a negative result and when you add it to the <code>hash</code> it will be sign-extended and converted to a huge unsigned value, something like <code>0xffffffffffffffxx</code>?</p></li>
<li><p>If you are looking for a short and simple hash function then perhaps either of these might work for you.</p>

<pre><code>/* D. J. Bernstein hash function */
static size_t djb_hash(const char* cp)
{
    size_t hash = 5381;
    while (*cp)
        hash = 33 * hash ^ (unsigned char) *cp++;
    return hash;
}

/* Fowler/Noll/Vo (FNV) hash function, variant 1a */
static size_t fnv1a_hash(const char* cp)
{
    size_t hash = 0x811c9dc5;
    while (*cp) {
        hash ^= (unsigned char) *cp++;
        hash *= 0x01000193;
    }
    return hash;
}
</code></pre></li>
</ol>
    </div>