<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Why are the inputs <code>signed</code>, are you working with negative dimensions?</p>

<p>Most FPGAs have dedicated logic for multiplication so you usually can simply write <code>x*y</code> without having any issues. For better or worse, manually writing it out like you did could impact optimization. Be aware your <code>multiply</code> truncates most of the MSB bits. An 8-bit times 8-bit input would return a 16-bit value.</p>

<p><code>&lt;&lt;&lt; 1</code> is shift left and is effectively the same as multiplying by two.</p>

<p>Not sure why each output bit has its own port when you clearly could use a vector like the inputs. </p>

<p>You should add a reset and enable inputs.</p>

<p>Assuming your FPGA can handle <span class="math-container">\$ \frac{x(y1+y2)}{2} \$</span> in one clock. You could simply write:</p>

<pre><code>module trapezoidal_integration(
    input clk, rst_n, en,
    input  [7:0] x_in, y1_in, y2_in,
    output reg [15:0] area_out,
    output reg [15:0] cum_out, // cumulative (increase width ???)
    output reg err_overflow);

  wire [15:0] area = (x_in * (y1_in+y2_in)) / 4'h2;

  always @(posedge clk) begin
    if (!rst_n) begin
      area_out &lt;= 16'h0000;
      cum_out &lt;= 16'h0000;
      err_overflow &lt;= 1'b0;
    end
    else if (en) begin
      area_out &lt;= area;
      {err_overflow,cum_out} &lt;= cum_out + area;
    end
  end
endmodule
</code></pre>

<p>If you need to limit your pins or need to space out the operations, you could do something like below (untested example):</p>

<pre><code>module trapezoidal_integration(
  input clk, rst_n, en,
  input [7:0] s_in,
  output reg [15:0] cum_out, // cumulative (increase width ???)
  output reg err_overflow) );

  reg [1:0] state;
  reg [16:0] tmp;

  always @(posedge clk) begin
    if (!rst_n) begin
      state &lt;= 3'b001;
      tmp &lt;= 17'h0_0000;
      cum_out &lt;= 16'h0000;
      err_overflow &lt;= 1'b0;
    end
    else begin
      case(state)
        2'b00 : begin
          tmp[7:0] &lt;= s_in; // y1
          if (en) state &lt;= 2'b01;
        end
        2'b01 : begin
          tmp[8:0] &lt;= tmp[7:0] + s_in; // y1+y2
          state &lt;= 2'b11; // gray code
        end
        2'b11 : begin
          tmp &lt;= s_in * tmp[8:0]; // x*(y1+y2)
          state &lt;= 2'b10; // gray code
        end
        2'b10 : begin
          {err_overflow,cum_out} &lt;= cum_out + tmp[16:1]; // tmp[16:1] === tmp/2
          state &lt;= 2'b00;
        end
      endcase
    end
  end
endmodule
</code></pre>
    </div>