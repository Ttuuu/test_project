<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The one thing that I would change is that since you are already using <code>react-redux</code> library, you might as well do this -</p>

<pre><code>let store = createStore(recipes, window.__REDUX_DEVTOOLS_EXTENSION__())

render(
  &lt;Provider store={store}&gt;
    &lt;App /&gt;
  &lt;/Provider&gt;,
  document.getElementById('root')
)
</code></pre>

<p>So that you don't have to manually <code>subscribe</code> like so -</p>

<pre><code>store.subscribe(render)
render()
</code></pre>

<hr>

<hr>

<p>About the questions that you mentioned -</p>

<blockquote>
  <ol>
  <li>I have an <code>updateActiveName</code> and <code>updateActiveIngredients</code> function because there are only these two fields that get added by the form. Would it be better instead to use an <code>updateActiveObject</code> and run this when either field changes? I see this as a benefit for when other fields get added, but less efficient because I will be running an <code>onChange</code> function for several fields that aren't changing.</li>
  </ol>
</blockquote>

<p>This is again an opinion, but I wouldn't do that. One reason is that they don't/might not have similar types.</p>

<p>An example where this might work is - say - you have a big form where you have to enter a number of dates, one for birthdate, one for date of joining the company etc. You could a function <code>changeDate()/updateDate()</code> which would serve as a common function to update dates.</p>

<hr>

<blockquote>
  <ol start="2">
  <li>The naming of my action creators, reducers, and functions inside <code>mapDispatchToProps</code> are usually the same. For example <code>UPDATE_ACTIVE_INGREDIENTS</code>, <code>updateActiveIngredients</code> action creator and <code>updateActiveIngredients</code> function. Is there a better approach to this?</li>
  </ol>
</blockquote>

<p>This is fine, so long as you stick with it. You anyways don't have to worry about the <code>ActionCreator</code> names because, if you access the methods/functions that are defined in <code>mapDispatchToProps()</code> and don't directly <code>dispatch()</code> actions in the <code>Component</code> itself, you wouldn't find much problems with understanding what goes where.</p>

<p>What I mean is, if you use - <code>this.props.updateActiveIngredients()</code> - then it is fine. However, if you use - <code>this.props.dispatch(updateActiveIngredients())</code> you might get confused.</p>

<hr>

<blockquote>
  <p>3.In the <code>addRecipe</code> function inside <code>mapDispatchToProps</code>, I am validating the <code>name</code> and <code>ingredients</code> values. Should this go inside this function, or somewhere else?</p>
</blockquote>

<p>Technically, it is a function. You can move it to a named function, but for something this small this is alright.</p>

<hr>

<blockquote>
  <p>4.In the <code>addRecipe</code> function inside <code>mapDispatchToProps</code>, I am dispatching many actions. Is this correct practice?</p>
</blockquote>

<p>This is correct. You can also add a <code>redux-thunk</code> middleware and add an <code>ActionCreator</code> that returns a function instead of a simple JSON object.</p>

<p>For e.g.:</p>

<pre><code>const mapDispatchToProps = (dispatch, ownProps) =&gt; {
  return {
    addRecipe: (id, name, ingredients) =&gt; {
      if (name &amp;&amp; ingredients) {
        dispatch(addRecipe(id, name, ingredients))
        dispatch(updateActiveName(''))
        dispatch(updateActiveIngredients(''))
        saveStoreRecipesToLocalStorage(ownProps.store.getState())
      }
    }
  }
}
</code></pre>

<p>could be replaced by something like this - </p>

<pre><code>const mapDispatchToProps = (dispatch, ownProps) =&gt; {
  return {
    addRecipe: (id, name, ingredients) =&gt; dispatch(addRecipe(id, name, ingredients))
  }
}
// Action Creator
addRecipe(id, name, ingredients) =&gt; {
  return (dispatch, getState) =&gt; {
    if (name &amp;&amp; ingredients) {
      dispatch(addRecipe(id, name, ingredients))
      dispatch(updateActiveName(''))
      dispatch(updateActiveIngredients(''))
      // Get the proper state that you want using getState()
      const something = getState()
      saveStoreRecipesToLocalStorage(something)
    }
  }
}
</code></pre>
    </div>