<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The solution seems to be very specific to having exactly two parts of the list interchanged.</p>

<p>I'd be more tempted to write something more general, for when there might be many such sorted subsections.</p>

<ul>
<li>Make a single pass through the list and initialize a table that records each segment's starting and ending indexes (or start index and length).</li>
<li>Sort that table based on the value at the starting index.</li>
</ul>

<p>Then, to perform a search:</p>

<ul>
<li>Binary search the table to determine the appropriate section.</li>
<li>Binary search the section of the list.</li>
</ul>

<p>Note that if the table ends up being huge, this approach isn't appropriate.</p>

<hr>

<p>If one always knew for sure that the original list was always in only two parts, it might seem that it would be faster and easier to write very specific code.</p>

<p>But if the general algorithm is applied to that simple case, in practice it does almost no more work than the ad hoc method.</p>

<p>Specific problems are often best solved by general solutions.</p>

<p>In the real world, next week, next month, or next year, your teacher, your boss, or your client will eventually say, "<em>That program was great.  Can you change it to handle <strong>three</strong> sections of sorted data?</em>".  The original special purpose approach will take considerable work to change (and even if it isn't a lot, realized that eventually you'll be asked for four sections).  The general approach will be trivial (update the documentation), but you don't need to let your boss or client know that.</p>
    </div>