<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here is my version of your code.</p>

<ol>
<li>You never use "max" so I used it by throwing an exception if you are trying to insert too many elements.</li>
<li>You should make everything that shouldn't be public; private.  </li>
<li>In your <code>binaryInsert()</code> you should move your base case to the begining.  </li>
<li><p>Your <code>binaryInsert()</code> is a bit wonky but it works. I think this would do but I haven't checked it. Looks a bit neater and has one unnecessary if removed.</p>

<blockquote>
<pre><code>public int binaryInsert(long insertKey) {
   if (nElems == 0)
     return 0;
   int lowerBound = 0;
   int upperBound = nElems - 1;
   int curIn = 0;
   while (true) {
     curIn = (upperBound + lowerBound) / 2;
     if (a[curIn] == insertKey) {
       return curIn;
     } else if (a[curIn] &lt; insertKey) {
       lowerBound = curIn + 1; // its in the upper
       if (lowerBound &gt; upperBound)
         return curIn + 1;
     } else {
       upperBound = curIn - 1; // its in the lower
       if (lowerBound &gt; upperBound)
         return curIn;
     }
   }
 }
</code></pre>
</blockquote></li>
<li><p>Just use methods that return things directly. Don't need to store them in a temporary variable first. Talking about <code>curIn</code> here in your <code>insert</code> function.</p></li>
<li><p>If you want to return something (like an object) as a String or print something out. You should override the toString() method as I have done. Then you can just call <code>System.out.println(arr.toString())</code> whenever you want to print the Object.</p></li>
<li><p>The whole point of doing a binary insert would be to quickly find out where to insert an element. Your implementation does this, however your implementation isn't super useful because you have to move each and every element foward by one. A double linked list (as usually taught in C++ classes) is ideal for your implementation of this better version of insertion sort. The java equivalent of a doubly linked list is a <a href="http://docs.oracle.com/javase/8/docs/api/java/util/LinkedList.html" rel="nofollow"><code>LinkedList</code></a>. Which will give you much better performance as you will not need to move elements forward by one.</p></li>
</ol>

<p>.</p>

<pre><code>public class OrdArray {

  final private long[] a; // ref to array
  private int nElems; // number of dataitems
  private final int MAX;

  // ----------------------------------------------------------------------

  public OrdArray(int max) { // constructor
    this.MAX = max;
    a = new long[MAX]; // create array
    nElems = 0;
  }

  private int binaryInsert(long insertKey) {
    if (nElems == 0) {
      return 0;
    }

    int lowerBound = 0;
    int upperBound = nElems - 1;

    while (true) {
      int curIn = (upperBound + lowerBound) / 2;
      if (lowerBound == curIn) {
        if (a[curIn] &gt; insertKey) {
          return curIn;
        }
      }
      if (a[curIn] &lt; insertKey) {
        lowerBound = curIn + 1; // its in the upper
        if (lowerBound &gt; upperBound) {
          return curIn += 1;
        }
      } else if (lowerBound &gt; upperBound) {
        return curIn;
      } else {
        upperBound = curIn - 1; // its in the lower
      }
    }
  }

  @Override
  public String toString() { // display array contents
    StringBuffer sb = new StringBuffer();
    for (int j = 0; j &lt; nElems; j++) { // for each element,
      sb.append(a[j] + " "); // display it
    }
    sb.append(System.lineSeparator());
    return sb.toString();
  }

  public void insert(long value) throws Exception { // put element into array
    if (nElems == MAX)
      throw new Exception("Can not add more elements.");
    int j = binaryInsert(value);
    int k;
    for (k = nElems; k &gt; j; k--) { // move bigger ones one up.
      a[k] = a[k - 1];
    }
    a[j] = value; // insert value
    nElems++; // increment size.
  }
}
</code></pre>

<p>I'm sure I didn't get everything you need to improve on but hopefully that is atleast one step forward in the right direction. :)</p>
    </div>