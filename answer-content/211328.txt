<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I see some things that may help you improve your program.</p>

<h2>Use objects</h2>

<p>The <code>Tween struct</code> is a start, but this code would really benefit from the use of actual objects.  Right now, the <em>data</em> for each snowflake is in <code>Tween</code>, but most of the <em>code</em> to manipulate it is in <code>main</code> which makes the code much harder to read and understand than it should be.  Even more strangely, each <code>Tween</code> contains its own <code>x</code> coordinate, but a separate array holds the <code>y</code> coordinates!  </p>

<h2>Reconsider the use of random numbers</h2>

<p>The usual advice I give is to use a better random number generator, but here, I think the opposite advice is in order.  Because <code>std::generate_canonical</code> calls the generator multiple times to assure sufficient entropy (10 bits in your program), it can have the effect of slowing down the program if called frequently.  In this case, the simpler <code>std::uniform_real_distribution</code> would probably be a better choice.</p>

<h2>Avoid plain arrays</h2>

<p>In most instances in modern C++, a <code>std::array</code> is better than a plain C-style array.  Not only does the size accompany the structure, but it also simplifies the use of standard algorithms on the array.</p>

<h2>Use SFML more fully</h2>

<p>A better use of SFML in this case would be to have a <code>Snowflake</code> class, or even better, a <code>Snowstorm</code> class that contains all of the snowflakes, that that derives from both the <code>sf::Transformable</code> and <code>sf::Drawable</code> classes.  Doing so would allow your main loop to be much more readable:</p>

<pre><code>while (window.isOpen()) {
    auto event = sf::Event{};
    while (window.pollEvent(event)) {
        if (event.type == sf::Event::Closed) {
            window.close();
        }
    }
    snowstorm.update(inverseFramerate);
    window.clear();
    window.draw(snowstorm);
    window.display();
}
</code></pre>

<p>See the <a href="https://www.sfml-dev.org/tutorials/2.5/graphics-vertex-array.php" rel="noreferrer">SFML tutorial on creating entities</a> for more details.</p>
    </div>