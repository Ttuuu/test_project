<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Current algorithm</h3>

<p>The time complexity of the current solution <a href="https://stackoverflow.com/questions/11032015/how-to-find-time-complexity-of-an-algorithm">is O(N²)</a>: for a given array of length <code>N</code>, it needs to loop through its elements from 0 to its length, and then for each of those, loop again through the elements after it. Note that it is still O(N²), even with the logic of avoiding duplicate indexes (if the pair <code>(0,1)</code> was a solution, it always follows that <code>(1,0)</code> is one, so we don't need to test it).</p>

<p>About the code itself, the first <code>for</code> loop is deceiving:</p>

<blockquote>
<pre><code>for(int i=0;i&lt;=arr.length;i++){
    for(int j=i;j&lt;arr.length-1;j++){
        if(arr[i] + arr[j+1] == k){
</code></pre>
</blockquote>

<p>It makes the reader think that <code>i</code> will go up to <code>arr.length</code>. What's worse, it makes the reader think the algorithm fails because we fetch <code>arr[i]</code> later on, which cannot work for <code>arr.length</code> (and would fail with an <code>ArrayIndexOutOfBoundsException</code>). In reality, it won't, because there is a second inner loop of <code>j</code> going from <code>i</code> to <code>arr.length-1</code>, so when <code>i</code> is greater than <code>arr.length-1</code>, nothing will happen anyway.</p>

<p>I suggest making that clear in the bounds used. Consider having:</p>

<pre><code>for(int i=0;i&lt;arr.length-1;i++){
    for(int j=i;j&lt;arr.length-1;j++){
        if(arr[i] + arr[j+1] == k){
</code></pre>

<p>In the same way, instead of reasoning with <code>j+1</code>, you could have <code>j</code> loop through its natural bounds and reason with <code>j</code>:</p>

<pre><code>for (int i = 0; i &lt; arr.length - 1; i++) {
    for (int j = i + 1; j &lt; arr.length; j++) {
        if (arr[i] + arr[j] == k) {
</code></pre>

<p>With those bounds, it's clear to everyone reading the code that no out of bounds exception can happen. Note also how I added white spaces around the different operators and calculations: it adds to clarity.</p>

<p>Also, maybe I wouldn't make this method an instance method, rather a <code>static</code> one that is directly invoked in <code>main</code>.</p>

<h3>Better performance</h3>

<p>It would be possible to solve this problem in O(N) time complexity, instead of O(N²), at the expense of also being O(N) in terms of memory.</p>

<p>The idea is that we want to avoid looping through the array again and again. Here's another approach:</p>

<ul>
<li>Go through the array once, and store in a <code>Map</code> the difference of the wanted sum and the current element mapped to how many times it occured. Effectively, this map remembers how much we're missing for an element at a given index so that the sum can be reached.</li>
<li>Go through the array a second time, and check whether the map contains this element. If it does, then it means that our map contains an element <code>e</code> for which <code>e = sum - arr[i]</code>, so it means that we've found a matching pair. And the number of matching pair we found, is the number of times this element appears in the array, which is the value of the map.</li>
</ul>

<p>That's how it would look like with the example in the question where the sum to look for is 1:</p>

<pre class="lang-none prettyprint-override"><code>          arr =  4   5   6   3   1   8  -7  -6
1st pass, map = -3  -4  -5  -2   0  -7   8   7  &lt;-- how much we need to add to find the sum
    2nd pass  =  x   x   x   x   x   o   o   x  &lt;-- the initial array only contains the element marked o
</code></pre>

<p>This shows that there are 2 such pairs, and that is the answer. As an example of putting this into code, and using Java 8, you could have:</p>

<pre><code>public int noOfComplementaryPairs(int arr[], int k) {
    Map&lt;Integer, Integer&gt; map = new HashMap&lt;Integer, Integer&gt;();
    for (int i = 0; i &lt; arr.length; i++) {
        map.merge(k - arr[i], 1, Integer::sum);
    }
    return Arrays.stream(arr).map(element -&gt; map.getOrDefault(element, 0)).sum();
}
</code></pre>
    </div>