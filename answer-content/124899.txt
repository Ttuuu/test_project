<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Just quickly, here's some feedback: </p>

<ul>
<li><p>I think your set up code is fine (where you're creating the JFrames etc), it's very boiler platey, but that's java. </p></li>
<li><p>But you shouldn't put that logic in the constructor. Put it in an <code>init()</code> method, called after construction. </p></li>
<li><p>Do use scope declarations, ie. make that <code>Hangman()</code> constructor<code>public Hangman()</code>. Same with <code>void testLetter</code> is this method meant to be public or private? Make it explicit so that others (and yourself, in six months!) know how the code is meant to be used. </p></li>
<li><p>Consider separating your Swing/GUI logic, and your game logic to different classes. ie, something like <code>HangmanApp</code> (your main class) contains a <code>HangmanGui</code> and a <code>HangmanLogic</code>. </p></li>
<li><p>You have magic numbers all through your code. For example this line is particularly bad: <code>textContents.setText("Incorrect Guess! You have " + (6 - incorrectGuesses)  + " left.");</code> 
What if you want to change the number of guesses? Ideally these configurations would be set in a properties file, but for a small application setting them at the top of the class is fine. </p></li>
<li><p>Your <code>if else</code> branching in <code>testLetter</code> is scary. As it currently is, I can't immediately see what each branch is for. Comments would help on each branch, but I would move 'test if the letter fits' logic, and 'what should I do if letter is correct/incorrect' logic, into their own private methods. </p></li>
</ul>

<p>eg. something like:</p>

<pre><code>void testLetter(String a) {


     if (evaluateGuess(a)){   //returns true if guess is correct
         handleCorrectGuess(a); 
     }
     else (
         handleIncorrectGuess(a); 
     }

}
</code></pre>

<ul>
<li>You don't need to use a <code>==</code> comparison on booleans. Use a descriptive variable name and <code>!</code> operator instead. ie. <code>if (!gameLost){...</code> or <code>if(gameStillInProgress){...</code></li>
</ul>
    </div>