<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>My example you'll find below is based on most often working with large datasets and opts for speed in data handling. You didn't state the size of your Issues and Exclusions, so I worked with a large dataset in mind.</p>

<p>A couple quick things to get out of the way because these are good practices to make into consistent habits:</p>

<ol>
<li>Always use <a href="https://www.excel-easy.com/vba/examples/option-explicit.html" rel="nofollow noreferrer"><code>Option Explicit</code></a></li>
<li>Avoid a <a href="https://rubberduckvba.wordpress.com/2018/10/14/clean-vba-code-pt-1-bad-habits/" rel="nofollow noreferrer">"wall of declarations"</a>, plus the very useful other tips on that site</li>
<li>Establish specific object variables for the worksheets, instead of always using <code>Sheets</code>. Further, by only using <code>Sheets</code> you're implying that the code should operate on the currently <code>ActiveWorksheet</code>. This is quite often correct, but will trip you up at some point when you intend something different. </li>
</ol>

<p>So I make a habit of defining exactly which workbook and worksheet I'm using by initializing variables with fully qualified references.</p>

<pre><code>Dim exclusionsWS As Worksheet
Dim issuesWS As Worksheet
Set exclusionsWS = ThisWorkbook.Sheets("Exclusions")
Set issuesWS = ThisWorkbook.Sheets("Issues")
</code></pre>

<p>While I understand your rationale for handling the possible <code>ShowAllData</code> errors, I would much rather be clear about "why" you need to do this. So I'd avoid the <code>On Error Resume Next</code> by making it clear I'm <a href="https://stackoverflow.com/a/20581889/4717755">checking for a possible</a> <code>AutoFilter</code>:</p>

<pre><code>With exclusionsWS
    If (.AutoFilterMode And .FilterMode) Or .FilterMode Then
        .AutoFilter.ShowAllData
    End If
End With
With issuesWS
    If (.AutoFilterMode And .FilterMode) Or .FilterMode Then
        .AutoFilter.ShowAllData
    End If
End With
</code></pre>

<p>Next, because there may be a large dataset, I would copy the data on the worksheet into a <a href="https://excelmacromastery.com/excel-vba-array/#Reading_from_a_Range_of_Cells_to_an_Array" rel="nofollow noreferrer">memory-based array</a>. Working out of memory is MUCH faster than working with the <code>Range</code> object in Excel. Later, the process of checking to see if a value exists in another dataset is perfect for a <a href="https://excelmacromastery.com/vba-dictionary/" rel="nofollow noreferrer"><code>Dictionary</code></a>. So we'll loop through all the exclusions and create a dictionary item for each entry.</p>

<pre><code>Dim exclusionData As Variant
exclusionData = exclusionsWS.UsedRange

Dim exclusion As Dictionary
Set exclusion = New Dictionary
Dim i As Long
For i = 2 To lastRow
    If Not exclusionData(i, 10) = vbNullString Then
        exclusion.Add exclusionData(i, 10), i
    End If
Next i
</code></pre>

<p>After that, my example shows checking each Issue against the Dictionary and clearing out any excluded Issues. In order to copy the remaining issues back to the worksheet, we have to clear ALL the issues first, then copy the array data to the worksheet.</p>

<p>Here's the whole routine in a single view:</p>

<pre><code>Option Explicit

Public Sub RemoveExclusions()
    Dim exclusionsWS As Worksheet
    Dim issuesWS As Worksheet
    Set exclusionsWS = ThisWorkbook.Sheets("Exclusions")
    Set issuesWS = ThisWorkbook.Sheets("Issues")
    With exclusionsWS
        If (.AutoFilterMode And .FilterMode) Or .FilterMode Then
            .AutoFilter.ShowAllData
        End If
    End With
    With issuesWS
        If (.AutoFilterMode And .FilterMode) Or .FilterMode Then
            .AutoFilter.ShowAllData
        End If
    End With

    Dim lastRow As Long
    With exclusionsWS
        lastRow = .Cells(.Rows.Count, "J").End(xlUp).Row
    End With

    '--- move the exclusion data to a memory-based array
    '    for processing into a dictionary
    Dim exclusionData As Variant
    exclusionData = exclusionsWS.UsedRange

    Dim exclusion As Dictionary
    Set exclusion = New Dictionary
    Dim i As Long
    For i = 2 To lastRow
        If Not exclusionData(i, 10) = vbNullString Then
            exclusion.Add exclusionData(i, 10), i
        End If
    Next i

    '--- move all the issues into a memory-based array also
    '    and clear the data from exclusion matches
    Dim issuesData As Variant
    Dim excludedCount As Long
    issuesData = issuesWS.UsedRange
    For i = 2 To UBound(issuesData, 1)
        If exclusion.Exists(issuesData(i, 10)) Then
            issuesData(i, 10) = vbNullString
            excludedCount = excludedCount + 1
        End If
    Next i

    '--- now collapse all the empty rows by copying the remaining
    '    issues into a new array, then copy the array back to the
    '    worksheet
    Dim remainingIssues As Variant
    ReDim remainingIssues(1 To UBound(issuesData, 1) - excludedCount, _
                          1 To UBound(issuesData, 2))
    Dim newIssue As Long
    newIssue = 1
    Dim j As Long
    For i = 1 To UBound(issuesData, 1)
        If Not issuesData(i, 10) = vbNullString Then
            For j = 1 To UBound(issuesData, 2)
                remainingIssues(newIssue, j) = issuesData(i, j)
            Next j
            newIssue = newIssue + 1
        End If
    Next i
    issuesWS.UsedRange.ClearContents
    issuesWS.Range("A1").Resize(UBound(remainingIssues, 1), _
                                UBound(remainingIssues, 2)) = remainingIssues
End Sub
</code></pre>
    </div>