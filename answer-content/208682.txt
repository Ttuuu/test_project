<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I don't agree with @JerryCoffin on two accounts: algorithm and paramater passing, the latter being a consequence of the former. That's why I submit this extra review, even if @JerryCoffin's has already been accepted, and even if I agree with the other points he made.</p>

<p>When you design an algorithm, especially in C++, you want it to be as efficient as possible, in as many situations as possible. It's a good idea to take a look at existing algorithms in the standard library to see how it can be achieved, all the more when there is an algorithm there that is closely related to the one you're designing: <a href="https://en.cppreference.com/w/cpp/algorithm/unique" rel="nofollow noreferrer"><code>std::unique</code></a>, that removes all but the first of consecutive equivalent elements. What's interesting is 1) that it operates on a sorted range and 2) that it modifies the input sequence: thus it makes it optimal when the input sequence is already sorted, and also when it's disposable. Can we benefit from <code>std::unique</code>s interface in our largely similar problem? I would say so:</p>

<pre><code>#include &lt;algorithm&gt;

template &lt;typename Iterator&gt;
int count_duplicates(Iterator first, Iterator last) {
    // requires a sorted range
    int count = 0;
    while (true) {
        first = std::adjacent_find(first, last);
        if (first == last) return count;
        first = std::adjacent_find(++first, last, std::not_equal_to&lt;&gt;());
        ++count;
    }
}
</code></pre>

<p>Let's now compare with @JerryCoffin's proposed solution, which allocates memory for a <code>std::map</code> and then has in all cases a complexity of <code>O(n*log(n))</code> for populating it + <code>O(n)</code> for counting elements with a frequency higher than 1:</p>

<ul>
<li><p>if the input range is already sorted, this algorithm has <code>O(n)</code> complexity, which is better</p></li>
<li><p>if the input range is disposable but not sorted, this algorithm has the same complexity (<code>O(n*log(n))</code> for prior sorting and <code>O(n)</code> for counting), but doesn't allocate memory and has better cache locality</p></li>
<li><p>if the input is neither sorted nor disposable, we have the same complexity and memory requirements (we need to copy the input range) but we keep the better cache locality</p></li>
</ul>

<p>On the other hand it lacks the possibility of relying on a more efficient structure to count the occurrences of each element, such as an array or a hash table. We could then theoretically go from <code>O(n*log(n))</code> to <code>O(n)</code> when looking for duplicates. But I'm still unconvinced because those data structures would be oversized if the input range has a small alphabet.</p>

<p>EDIT: I think I've read the submitted code and the question a bit too fast. If what we need is not only to count elements appearing at least twice, but erasing other elements of the vector, then the solution is different, even if most building blocks remain:</p>

<pre><code>#include &lt;vector&gt;
#include &lt;algorithm&gt;
#include &lt;iostream&gt;

template &lt;typename Iterator&gt;
Iterator one_of_duplicates(Iterator first, Iterator last) {
    // requires a sorted input
    auto current = first;
    while (true) {
        // find a duplicated element, move it behind 'first' 
        // and find the next different element
        current = std::adjacent_find(current, last);
        if (current == last) return first;
        *first++ = std::move(*current);
        std::cerr &lt;&lt; *current &lt;&lt; std::endl;
        current = std::adjacent_find(current, last, std::not_equal_to&lt;&gt;());
    }
}


int main() {

    std::vector&lt;int&gt; data = { 0, 1, 2, 3, 4, 5, 1, 2, 2, 3, 5, 5, 5 };
    std::sort(data.begin(), data.end());
    data.erase(one_of_duplicates(data.begin(), data.end()), data.end());
    for (auto i : data) std::cout &lt;&lt; i &lt;&lt; ',';

}
</code></pre>
    </div>