<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Over all the code is really good but <code>LoadToTable()</code> could be tweaked.</p>

<pre><code>Public Sub LoadToTable()

1     Dim stylesTable As ListObject
2     Dim currentStyle As Style

3     Dim tempStyleInfo() As Variant
4     Dim counter As Long
5     Dim counterStyles As Long

6     counter = 0

7     counterStyles = ThisWorkbook.Styles.Count
8     ReDim tempStyleInfo(counterStyles + 1, 3)


9     Set stylesTable = MStyles.ListObjects("TableStyles")

10     If Not stylesTable.DataBodyRange Is Nothing Then stylesTable.DataBodyRange.Delete

11     For Each currentStyle In ThisWorkbook.Styles

12         tempStyleInfo(counter, 0) = currentStyle.name
13         tempStyleInfo(counter, 1) = IIf(currentStyle.BuiltIn, "BuiltIn", "Custom")
14         counter = counter + 1

15     Next currentStyle

16     stylesTable.Resize stylesTable.Range.Resize(RowSize:=UBound(tempStyleInfo, 1))

17     If stylesTable.DataBodyRange Is Nothing Then stylesTable.ListRows.Add

18     stylesTable.DataBodyRange = tempStyleInfo

   End Sub
</code></pre>

<blockquote>
  <p>Line 6     counter = 0</p>
</blockquote>

<p>This is the first time counter is used there is no reason to initiate a variable to its default value.</p>

<blockquote>
  <p>Line 7     counterStyles = ThisWorkbook.Styles.Count</p>
</blockquote>

<p><code>counterStyles</code> does little to add to the readability of the code. It's clear what <code>ThisWorkbook.Styles.Count</code> does <code>counterStyles</code> is just adding 2 extra lines to the subroutines body.</p>

<blockquote>
  <p>Line 8     ReDim tempStyleInfo(counterStyles + 1, 3)
  <code>counterStyles + 1</code> is wrong. It causing <code>tempStyleInfo</code> to be created with 2 extra rows.  </p>
</blockquote>

<p>I prefer to work with 1 based arrays when writing data to a range.  Using</p>

<blockquote>
<pre><code> ReDim tempStyleInfo(1 to counterStyles, 1 to 4)
</code></pre>
</blockquote>

<p>Here is the correct declaration for the 0 based array:</p>

<blockquote>
<pre><code> ReDim tempStyleInfo(0 to counterStyles - 1, 0 to 3)
</code></pre>
</blockquote>

<p>Although not necessary it is recommended to include the array base size when declaring an array.</p>

<blockquote>
  <p>Line 9     Set stylesTable = MStyles.ListObjects("TableStyles")</p>
</blockquote>

<p>Consider passing in the<code>stylesTable</code> as a parameter of the Create method.</p>

<blockquote>
<pre><code>9     Set stylesTable = MStyles.ListObjects("TableStyles")
10     If Not stylesTable.DataBodyRange Is Nothing Then 
</code></pre>
</blockquote>

<p>Lines 9 and 10 should appear after the Line 15.  There is no reason to modify the table before the data is compiled.  As a rule, I gather the data in a separate sub or function.  This allows me to test the two tasks independently. </p>

<blockquote>
  <p>Line 16     stylesTable.Resize stylesTable.Range.Resize(RowSize:=UBound(tempStyleInfo, 1))</p>
  
  <p>Line 17     If stylesTable.DataBodyRange Is Nothing Then stylesTable.ListRows.Add</p>
</blockquote>

<p>Line 17 never triggers because Line 16 already added the correct number of rows.</p>

<blockquote>
  <p>Line 11     For Each currentStyle In ThisWorkbook.Styles</p>
</blockquote>

<p>Using <code>ThisWorkbook</code> severely limits the usefulness of the code.  It would be far better to set the target workbook in the Create method.  Other classes are also limited by <code>ThisWorkbook</code>.  I would set a reference to the parent <code>StyleProcessor</code> class in these class's Create methods so you can reference the parent's target workbook (e.g.   <code>Parent.TargetWorkbook</code>).</p>

<h2>Refactored Code</h2>

<pre><code>Public Sub LoadToTable()
    Dim Values
    Values = getStyleInfo()

    If Not stylesTable.DataBodyRange Is Nothing Then stylesTable.DataBodyRange.Delete
    stylesTable.ListRows.Add
    stylesTable.DataBodyRange.Resize(UBound(Values, 1)) = Values

End Sub

Private Function getStyleInfo()
    Dim Results
    ReDim Results(1 To TargetWorkbook.Styles.Count, 1 To stylesTable.ListColumns.Count)

    Dim n As Long
    Dim currentStyle As Style
    For Each currentStyle In TargetWorkbook.Styles
        n = n + 1
        Results(n, 1) = currentStyle.name
        Results(n, 2) = IIf(currentStyle.BuiltIn, "BuiltIn", "Custom")
     Next

     getStyleInfo = Results
End Function
</code></pre>

<p><code>Application.ScreenUpdating</code> should be turned off when updating styles.  You should also test changing name of individual cells styles versus Union the range for large number of cells.</p>
    </div>