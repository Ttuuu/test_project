<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li>Potential Bug: the score doesn't appear to reset - should it go back to <code>0</code> when the button labeled <code>Start</code> is clicked??</li>
<li><code>const</code> can be used for any variable that is never re-assigned. Some argue <code>const</code> should be the default keyword and then if and only if re-assignment is necessary then use <code>let</code></li>
<li><p><code>posMatch</code> can be simplified - from:</p>

<blockquote>
<pre><code>let posMatch=(pos1,pos2)=&gt;{
    if(pos1.x==pos2.x&amp;&amp;pos1.y==pos2.y) return true;
}
</code></pre>
</blockquote>

<p>To </p>

<pre><code>const posMatch=(pos1,pos2)=&gt; pos1.x==pos2.x&amp;&amp;pos1.y==pos2.y;
</code></pre></li>
<li><p>The large <code>switch</code> statement in <code>initCreate</code> could be simplified by using <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind#Partially_applied_functions" rel="nofollow noreferrer">Function partials</a>:</p>

<pre><code>const directionMapping = {
    'up': snake.draw.bind(null, {x:snake.head.x, y:--snake.head.y}),
    'down': snake.draw.bind(null, {x:snake.head.x, y:++snake.head.y}),
    'left': snake.draw.bind(null, {x:--snake.head.x, y:snake.head.y}),
    'right': snake.draw.bind(null, {x:++snake.head.x, y:snake.head.y})
};
</code></pre>

<p>And then within the function: </p>

<pre><code>const initCreate=_=&gt;{
    if (snake.dir.current in directionMapping) {
        directionMapping[snake.dir.current]();
    }
</code></pre></li>
<li><p>Minor point: While it may only save one character, arrow functions with no parameters <em>could</em> be simplified to use a single parameter like <code>_</code> </p></li>
</ul>

<h3>Rewrite:</h3>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="false" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>/*snake game by Chase last edited 4/5/2018*/

/*lib*/
const getRandomInt=max=&gt;Math.floor(Math.random() * Math.floor(max));
const getBetweenInt=(min, max)=&gt; {
	min = Math.ceil(min);
	max = Math.floor(max);
	return Math.floor(Math.random() * (max - min + 1)) + min; 
}

const posMatch=(pos1,pos2)=&gt;pos1.x==pos2.x&amp;&amp;pos1.y==pos2.y;

const arrayMatch=(array,item)=&gt;{
	for(let x of array) if(x.x==item.x&amp;&amp;x.y==item.y) return true;
}

/*initial*/

const multiplier=10;
const speed=200;
const canvas={
	offset:{
		x:10,
		y:10
	},
	width:myCanvas.width/multiplier,
	height:myCanvas.height/multiplier,
	penColor:color=&gt;ctx.fillStyle=color,
	fill:(x,y)=&gt;ctx.fillRect(x*multiplier,y*multiplier,multiplier,multiplier)
}

const food={
	pos:{},
	create:_=&gt;{
		food.pos={
			x:getRandomInt(canvas.width),
			y:getRandomInt(canvas.height)		
		}
		if(arrayMatch(snake.body,food.pos)) food.create();
		else food.draw(food.pos);
	},
	draw:({x,y})=&gt;{
		canvas.penColor("yellow");
		canvas.fill(x,y);
	}
};

const snake={
	head:{},
	getTail:x=&gt;x=snake.body[0],
	dir:{
		current:"",
		pre:""
	},
	grow:false,
	body:[],
	length:5,
	draw:({x,y})=&gt;{
		canvas.penColor("white");
		snake.body.push({x,y});
		canvas.fill(x,y);
	},
	erase:({x,y})=&gt;{
		canvas.penColor("gray");
		snake.body.splice(0,1);
		canvas.fill(x,y);		
	},
	next:{}
};

const ctx = myCanvas.getContext("2d");
const dir=["up","down","left","right"];

let move=_=&gt;{
	let crash;
	switch(snake.dir.current){
		case "up":
			snake.next={
				x:snake.head.x,
				y:snake.head.y-1
			};
			crash=snake.next.y&lt;0;
			snake.dir.pre="up";
			break;
		case "down":
			snake.next={
				x:snake.head.x,
				y:snake.head.y+1
			};
			crash=snake.next.y==canvas.height;		
			snake.dir.pre="down";
			break;
		case "left":
			snake.next={
				x:snake.head.x-1,
				y:snake.head.y
			};
			crash=snake.next.x&lt;0;		
			snake.dir.pre="left";
			break;
		case "right":
			snake.next={
				x:snake.head.x+1,
				y:snake.head.y
			};
			crash=snake.next.x==canvas.width;		
			snake.dir.pre="right";
			break;
		}

	if(crash||arrayMatch(snake.body,snake.next)){
		clearInterval(intv);
		start.disabled="";
		return;
	};		

	snake.draw(snake.head=snake.next);
	if(snake.grow){
		snake.grow=false;
		score.innerText=Number(score.innerText)+1;
		food.create();
	}
	else snake.erase(snake.getTail());
}
const directionMapping = {
'up': snake.draw.bind(null, {x:snake.head.x, y:--snake.head.y}),
'down': snake.draw.bind(null, {x:snake.head.x, y:++snake.head.y}),
'left': snake.draw.bind(null, {x:--snake.head.x, y:snake.head.y}),
'right': snake.draw.bind(null, {x:++snake.head.x, y:snake.head.y})
};
const initCreate=_=&gt;{
  if (snake.dir.current in directionMapping) {
    directionMapping[snake.dir.current]();
    }
}

onkeydown=e=&gt;{
	switch(e.keyCode){
		case 37:
			if(snake.dir.pre=="up"||snake.dir.pre=="down") snake.dir.current="left";
			break;
		case 38:
			if(snake.dir.pre=="left"||snake.dir.pre=="right") snake.dir.current="up";
			break;
		case 39:
			if(snake.dir.pre=="up"||snake.dir.pre=="down") snake.dir.current="right";
			break;
		case 40:
			if(snake.dir.pre=="left"||snake.dir.pre=="right") snake.dir.current="down";
			break;
	}
}

let intv;

start.onclick=_=&gt;{
	start.disabled="disabled";

	canvas.penColor("gray");
	ctx.fillRect(0,0,myCanvas.width,myCanvas.height);
	snake.body=[];

	snake.head={
		x:getBetweenInt(canvas.offset.x,canvas.width-canvas.offset.x),
		y:getBetweenInt(canvas.offset.y,canvas.height-canvas.offset.y)
	};

	snake.dir.current=dir[getRandomInt(dir.length)];
	food.create();

	for(let i=0;i&lt;snake.length;i++) initCreate();

	intv=setInterval(()=&gt;{
		if(posMatch(snake.head,food.pos)) snake.grow=true;
		move();
	},speed);

}

start.click();</code></pre>
<pre class="snippet-code-html lang-html prettyprint-override"><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
	&lt;title&gt;Snake 0.8&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div&gt;
	&lt;canvas id="myCanvas" width="300" height="300" style="border:1px solid black;background:gray;"&gt;&lt;/canvas&gt;
&lt;/div&gt;
&lt;div&gt;
	&lt;button id="start"&gt;Start&lt;/button&gt;
	&lt;span&gt;Score:&lt;span id="score"&gt;0&lt;/span&gt;&lt;/span&gt;
&lt;/div&gt;
&lt;script src="js/main.js"&gt;&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre>
</div>
</div>

    </div>