<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>Handling Path and PathBuf types correctly;</p>
</blockquote>

<p>My concern is that you recreate <code>PathBuf</code> every time, I don't see the point to have a buffer if you don't use it.</p>

<blockquote>
  <p>Performance;</p>
</blockquote>

<p>I think it's ok, you search one file in particular the time you take creating the string is cheap compare to system call. So I don't think <code>read_dir</code> is better on your case. This could be benchmarked.</p>

<blockquote>
  <p>Rust writing style in general.</p>
</blockquote>

<p>You are using <code>return</code>, on your case maybe use <code>break</code> to make your function SESE (single entry single exit).</p>

<p><code>Path::new(&amp;RUSV_FILENAME);</code> the reference is not needed <code>Path::new(RUSV_FILENAME);</code>.</p>

<pre class="lang-rust prettyprint-override"><code>fn find_rusv_file(starting_directory: &amp;Path) -&gt; Option&lt;PathBuf&gt; {
    let mut path: PathBuf = starting_directory.into();
    let file = Path::new(RUSV_FILENAME);

    loop {
        path.push(file);

        if path.is_file() {
            break Some(path);
        }

        if !(path.pop() &amp;&amp; path.pop()) { // remove file &amp;&amp; remove parent
            break None;
        }
    }
}
</code></pre>
    </div>