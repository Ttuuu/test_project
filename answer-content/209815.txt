<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I am not a big fan of "smart" <code>enum</code> because they do not scale well (what if you will have a more complex logic?) and they force you to spread business logic all around in your code. Because of this - in most cases - I'd suggest to use the approach in <a href="https://codereview.stackexchange.com/a/209812/13424">t3chb0t's answer</a> ("mapping" might be even moved to a separate configuration/rule file).</p>

<p>For simple cases you have, however, an easier approach:</p>

<pre><code>enum CartonType
{
    SMALL_PASCAL = 300,
    BIG_PASCAL = 600,
    BABY_BOX = 1200,
    A485_1201 = 1800,
    A4140_1901 = 3000,
    A485 = 5000,
}

CartonType GetCartonType(int quantity)
{
    return Enum.GetValues(typeof(CartonType))
        .Cast&lt;CartonType?&gt;()
        .OrderByDescending(x =&gt; x)
        .LastorDefault(x =&gt; quantity &lt;= (int)x) ?? CartonType.A485;
}
</code></pre>

<p>I don't like that <code>CartonType.A485</code> hard-coded default then you might need to make it slightly more complex:</p>

<pre><code>CartonType GetCartonType(int quantity)
{
    var types = Enum.GetValues(typeof(CartonType));
    var biggest = types.Cast&lt;CartonType&gt;().Max();

    return types
        .Cast&lt;CartonType?&gt;()
        .OrderByDescending(x =&gt; x)
        .LastOrDefault(x =&gt; quantity &lt;= (int)x) ?? biggest;
}
</code></pre>

<p>Simply used like this:</p>

<pre><code>Debug.Assert(GetCartonQuantity(100) == CartonType.SMALL_PASCAL);
Debug.Assert(GetCartonQuantity(1000) == CartonType.BABY_BOX);
Debug.Assert(GetCartonQuantity(10000) == CartonType.A485);
</code></pre>

<p><strong>Note</strong>: if you put this "business knowledge" inside your <code>enum</code> then you must write proper tests not only for <code>GetCartonQuantity()</code> but also for <code>CartonType</code> itself (to be sure values are consistent).</p>
    </div>