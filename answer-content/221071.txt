<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your code looks pretty great, much better that mine!</p>

<p>The beauty of regular expressions is that sometimes we can do the entire task, similar to our task here, with it so that to reduce writing additional <code>if</code> and <code>then</code>s. Maybe, here we could find an expression that would do so, something similar to:</p>

<pre><code>(\b[\w']+\b)(?:.+|$)
</code></pre>

<p>which wraps our desired first word in a capturing group:</p>

<pre><code>(\b[\w']+\b)
</code></pre>

<p>followed by a non-capturing group:</p>

<pre><code>(?:.+|$)
</code></pre>

<p>Of course, if we wish to add more boundaries or reduce our boundaries or change our char list <code>[\w']</code>, we can surely do so. </p>

<hr>

<h3>Test</h3>

<p>Let's test our expression with <code>re.finditer</code> to see if that would work: </p>

<pre><code># coding=utf8
# the above tag defines encoding for this document and is for Python 2.x compatibility

import re

regex = r"(\b[\w']+\b)(?:.+|$)"

test_str = ("Hello world\n"
     " a word \n"
     "don't touch it\n"
     "greetings, friends\n"
     "... and so on ...\n"
     "hi\n"
     "Hello.world")

matches = re.finditer(regex, test_str, re.MULTILINE)

for matchNum, match in enumerate(matches, start=1):

    print ("Match {matchNum} was found at {start}-{end}: {match}".format(matchNum = matchNum, start = match.start(), end = match.end(), match = match.group()))

    for groupNum in range(0, len(match.groups())):
        groupNum = groupNum + 1

        print ("Group {groupNum} found at {start}-{end}: {group}".format(groupNum = groupNum, start = match.start(groupNum), end = match.end(groupNum), group = match.group(groupNum)))

# Note: for Python 2.7 compatibility, use ur"" to prefix the regex and u"" to prefix the test string and substitution.
</code></pre>

<h2>Output</h2>



<blockquote>
<pre class="lang-none prettyprint-override"><code>Match 1 was found at 0-11: Hello world
Group 1 found at 0-5: Hello
Match 2 was found at 13-20: a word 
Group 1 found at 13-14: a
Match 3 was found at 21-35: don't touch it
Group 1 found at 21-26: don't
Match 4 was found at 36-54: greetings, friends
Group 1 found at 36-45: greetings
Match 5 was found at 59-72: and so on ...
Group 1 found at 59-62: and
Match 6 was found at 73-75: hi
Group 1 found at 73-75: hi
Match 7 was found at 76-87: Hello.world
Group 1 found at 76-81: Hello
</code></pre>
</blockquote>

<h3>RegEx Circuit</h3>

<p><a href="https://jex.im/regulex/#!flags=&amp;re=%5E(a%7Cb)*%3F%24" rel="nofollow noreferrer">jex.im</a> visualizes regular expressions:</p>

<p><a href="https://i.stack.imgur.com/9I64o.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/9I64o.png" alt="enter image description here"></a></p>

<h3>Basic Performance Test</h3>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>const repeat = 1000000;
const start = Date.now();

for (var i = repeat; i &gt;= 0; i--) {
	const regex = /(\b[\w']+\b)(?:.+|$)/gm;
	const str = `Hello.world`;
	const subst = `$1`;

	var match = str.replace(regex, subst);
}

const end = Date.now() - start;
console.log("YAAAY! \"" + match + "\" is a match ðŸ’šðŸ’šðŸ’š ");
console.log(end / 1000 + " is the runtime of " + repeat + " times benchmark test. ðŸ˜³ ");</code></pre>
</div>
</div>


<h3><a href="https://regex101.com/r/xGOZdr/1" rel="nofollow noreferrer">DEMO</a></h3>
    </div>