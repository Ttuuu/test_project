<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This is sophisticated for a first attempt, but <strong>today would be a great day to break yourself of bad habits</strong>.  Your code is <em>full</em> of them. </p>

<p>Start with:  <strong>format your code using standard formatting conventions</strong>.  We understand code more easily if it is <em>vertical</em>, and your code is <em>horizontal</em>.</p>

<p>Let's go through this line by line.</p>

<pre><code>static void Main(string[] args)
{
</code></pre>

<p>Programs that do everything in Main are programs that cannot be easily refactored or re-used.  Main should create an object that represents the program and then execute it. </p>

<pre><code>    Random GenRandom = new Random();
</code></pre>

<p>Follow C# naming conventions. Locals get <code>camelCase</code> names.  This should be</p>

<pre><code>    Random random = new Random();

    int t = 0, r, c1 = random.Next(1, 6), c2 = random.Next(1, 6), c3 = random.Next(1, 6), c4 = random.Next(1, 6);
</code></pre>

<p>Though this style is legal, it's considered poor style.  Declare and initialize variables one per line.  <strong>Give your variables meaningful names</strong>.  You will not die younger if you spend time typing <code>turn</code> instead of <code>t</code>.  This should be:</p>

<pre><code>    int turn = 0;
    int digit;
    int cell1 = random.Next(1, 6);
    int cell2 = random.Next(1, 6);
    int cell3 = random.Next(1, 6);
    int cell4 = random.Next(1, 6);
</code></pre>

<p>Moving on:</p>

<pre><code>    bool w = false;
</code></pre>

<p>Same deal:</p>

<pre><code>    bool hasWon = false;
</code></pre>

<p>Moving on:</p>

<pre><code>    string Input, Code = Convert.ToString(c1);
    Code += c2; 
    Code += c3; 
    Code += c4;
</code></pre>

<p>Again, one per line. </p>

<p>We now see that we have the same data in two places: the locals c1, c2, c3, c4 which are <strong>never used again</strong> and <code>Code</code>.  It is time for our first refactoring.  What we want is:</p>

<pre><code>string code = GenerateCode();
</code></pre>

<p>Let's implement that:</p>

<pre><code>static Random random = new Random();
static string GenerateCode()
{
  return random.Next(1, 6).ToString() +
    random.Next(1, 6).ToString()
    random.Next(1, 6).ToString()
    random.Next(1, 6).ToString(); 
}
</code></pre>

<p>And we remove <code>random</code>, <code>c1</code>, and so on, from our method.</p>

<p>All right, where were we? We now have:</p>

<pre><code>    string input;
    string code = GenerateCode();
</code></pre>

<p>Moving on:</p>

<pre><code>    while (t != 8) {
</code></pre>

<p>First, bad form in the disco brace style.  Second, eight?  Where did eight come from? Rewrite it:</p>

<pre><code>const int maximumTurns = 8;
while (turn != maximumTurns)
{
</code></pre>

<p>Moving on:</p>

<pre><code>  t++;
</code></pre>

<p>I find increment operators distasteful.</p>

<pre><code>  turn += 1;
</code></pre>

<p>Much nicer.</p>

<pre><code>    Unepic:
</code></pre>

<p>OH THE PAIN.  Do not write unstructured code in C#; it is 2018, not 1972.</p>

<pre><code>        Console.Clear();
</code></pre>

<p>The first line I don't object to! :-)  But as we'll see, it should be in a method of its own.</p>

<pre><code>        Console.WriteLine("You have {0} turn(s) left.",9-t);
</code></pre>

<p>Better would be:</p>

<pre><code>        Console.WriteLine($"You have {maximumTurns + 1 - turn} turn(s) left.");
</code></pre>

<p>Because now if you change <code>maximumTurns</code> to 7, you only have to change the code in <em>one</em> place, not <em>many</em>.</p>

<p>Better still, make a helper function:</p>

<pre><code>static string Plural(int x, string s)
{
  return x == 1 ? s : s + "s";
} 
</code></pre>

<p>and then</p>

<pre><code>        int remainingTurns = maximumTurns - 1 - turn;
        Console.WriteLine($"You have {remainingTurns} {Plural(remainingTurns, "turn")} left.");
</code></pre>

<p>And then move <em>that</em> into a helper.</p>

<p>Moving on:</p>

<pre><code>        Console.WriteLine("Guess the code E.g 1561: ");
</code></pre>

<p>Eschew Latinisms. Should be:</p>

<pre><code>        Console.WriteLine("Guess the code (for example, 1561): ");
</code></pre>

<p>Now we come into a section that demands refactoring:</p>

<pre><code>        input = Console.ReadLine();
</code></pre>

<p>Fine so far...</p>

<pre><code>        if (input.Length != 4) goto Unepic; // Checks if input is 4 characters long
</code></pre>

<p>Do not write comments that repeat what is plainly evident in the code. And do not use spaghetti logic.</p>

<pre><code>        try { Convert.ToInt16(Input); Convert.ToString(Input); } catch (FormatException) { goto Unepic; } // Checks if input is only numbers
</code></pre>

<p>Do not re-invent the wheel; <code>TryParse</code> already exists:</p>

<pre><code>    int number; // In C# 7 you can use a discard instead.
    bool valid = int.TryParse(input, out number);
</code></pre>

<p>How should we structure this whole thing better? What we want is:</p>

<pre><code>    if (!ValidInput(input)) goto Unepic;
</code></pre>

<p>So write that:</p>

<pre><code>static bool ValidateInput(string input)
{
  int number;
  return input.Length == 4 &amp;&amp; int.TryParse(input, out number);
}
</code></pre>

<p>Moving on:</p>

<pre><code>        if (Input == Code) { w = true; goto End; }; // Checks if you've won
</code></pre>

<p>There's a feral semi at the end there. Remove it.</p>

<p>Again, when you are writing comments that are obvious, ask yourself "how could I rewrite the code so that the comment was unnecessary?"  Like this:</p>

<pre><code>        if (input == code) 
        { 
          hasWon = true; 
          goto End; 
        }
</code></pre>

<p>We'll address the goto later.</p>

<pre><code>        if (Input.Contains("0") || Input.Contains("7") || Input.Contains("8") || Input.Contains("9")) { goto Unepic; } // Checks if it has any digits that are 0 or above 7
</code></pre>

<p>Why is this check here? <strong>It should be in ValidateInput</strong>.  Put it there!</p>

<p>We then have a little loop:</p>

<pre><code>        r = -1;
        while (r != 3)
        {
            r++;
            if (Input[r] == Code[r]) Console.Write(1); else Console.Write(0); // Checks if a digit of the input is equal to a digit of the code
        }
</code></pre>

<p>Again, put it in a method.</p>

<pre><code>static void WriteHints(string input, string code)
{
</code></pre>

<p>The normal way we would write this loop is:</p>

<pre><code>  for (int i = 0; i &lt; input.Length; i += 1) 
    Console.Write(input[i] == code[i] ? 1 : 0;
}
</code></pre>

<p>Finishing up the game loop:</p>

<pre><code>        Console.WriteLine();
        Console.Write("Press any key to continue.");
        Console.ReadKey(true);
</code></pre>

<p>Why make the user press a key here?  But again, it could be put into a helper method.</p>

<pre><code>    }
    End:;
    Console.Clear();
</code></pre>

<p>Again, I'm fine with this but we'll come back to the goto later.</p>

<pre><code>    if (w == true) { Console.WriteLine("You won! The code you guessed was {0}.", Code); } else { Console.WriteLine("You lost! The code you couldnt guess was {0}.",Code); };
</code></pre>

<p>Writing <code>if (w == true)</code> is a sure sign of newbie code.  <code>w</code> is <strong>already</strong> either true or false; you don't have to say "if it is true that w is true" and you don't have to say "if w is true" -- just say "if w".  </p>

<p>And again, this could go into a helper.</p>

<p>Now, let's look at your main loop as I have refactored it, all together</p>

<pre><code>static void Main(string[] args)
{
    int turn = 0;
    bool hasWon = false;
    string code = GenerateCode();
    string input;
    const int maximumTurns = 8;
    while (turn != maximumTurns)
    {  
      turn += 1;
    Unepic:
      PromptUserForInput(maximumTurns, turn);
      input = Console.ReadLine();
      if (!ValidInput(input)) goto Unepic;
      if (input == code) 
      { 
        hasWon = true; 
        goto End; 
      }
      WriteHints(input, code);
      PromptUserToPressKey();
    }
    End:;
    PrintWinOrLoseMessage(hasWon, code);
}
</code></pre>

<p>This is already one million times easier to read but we are not done.</p>

<p>The first thing we notice is that we do some work to ensure that <code>turn</code> is not incremented if the user did a bad input. That's great! But the code does not read like that intent.  Let's rewrite it so it does.</p>

<pre><code>    int turn = 1; // not zero!
    while (turn &lt;= maximumTurns) // not !=
    {  
    Unepic:
      PromptUserForInput(maximumTurns, turn);
      input = Console.ReadLine();
      if (!ValidInput(input)) goto Unepic;
      if (input == code) 
      { 
        hasWon = true; 
        goto End; 
      }
      WriteHints(input, code);
      PromptUserToPressKey();
      turn += 1;
    }
</code></pre>

<p>Now <code>turn</code> is only ever incremented <em>after</em> the user has put in a good guess, and the code doesn't need to initialize turn to the <em>wrong</em> value so that it can be incremented later.</p>

<p>Now we notice that the <code>goto Unepic</code> and <code>goto End</code> are <code>continue</code> and <code>break</code>:</p>

<pre><code>    while (turn &lt;= maximumTurns)
    {  
      PromptUserForInput(maximumTurns, turn);
      input = Console.ReadLine();
      if (!ValidInput(input))
        continue;
      if (input == code) 
      { 
        hasWon = true; 
        break;
      }
      WriteHints(input, code);
      PromptUserToPressKey();
      turn += 1;
    }
</code></pre>

<p><strong>Look at how much easier to understand my version is compared to yours</strong>.  Anyone, even a non-coder, could look at this thing and just read it like English.  "while the turn is less than or equal to the maximum turns, prompt the user for input, then read the line from the console, then validate the input..."</p>

<p><strong>That is what you must strive for in your code</strong>.  Always be asking yourself <strong>how could I make this easier to understand? How could I make this read more like a description of my intentions?</strong></p>

<p>Could we do better?  Sure.  <strong>We actually have two loops written as one</strong>.  There's the loop that gets valid user input, and there's the loop that runs the game.  Make that explicit:</p>

<pre><code>    while (turn &lt;= maximumTurns)
    {  
      do
      {
        PromptUserForInput(maximumTurns, turn);
        input = Console.ReadLine();
      }
      while(!ValidInput(input));
      if (input == code) 
      { 
        hasWon = true; 
        break;
      }
      WriteHints(input, code);
      PromptUserToPressKey();
      turn += 1;
    }
</code></pre>

<p>And now we see another opportunity for helper methods. Move the inner loop to a helper!  Move the winning check to a helper:</p>

<pre><code>    while (turn &lt;= maximumTurns)
    {  
      input = ObtainValidatedInput(maximumTurns, turn);
      hasWon = CheckForWin(input, code);
      if (hasWon)
        break;
      WriteHints(input, code);
      PromptUserToPressKey();
      turn += 1;
    }
</code></pre>

<p>Were I writing your code from scratch, I would make it considerably more abstract than even the version I've given you here.  My main would be:</p>

<pre><code>static void Main() 
{
  var game = new Game();
  game.Start();
  while (!game.IsOver)
    game.ExecuteTurn();
  game.End();
}
</code></pre>

<p>Try writing your code starting from this template.  Notice how clear and logical it <em>forces</em> your code to be when you start from a position of the code reading like an abstract description of the workflow.  Make <strong>every</strong> method like this, where you can read the logical workflow right out of a half dozen lines of code.  <strong>Get in good habits while you are still a beginner</strong>.</p>
    </div>