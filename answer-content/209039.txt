<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Your questions</h2>

<blockquote>
  <p>How was my first javascript app?</p>
</blockquote>

<p>Overall the code seems somewhat fine for a first attempt (barring the flaw mentioned in the first section below). It isn't difficult to read though it does have a few extra levels of nesting which could be cleaned up with abstraction code functions out to named functions. </p>

<blockquote>
  <p>Is there a better way to do this?</p>
</blockquote>

<p>As was suggested by others, there isn't really a point to returning the data nested under a key <code>"data"</code>. Refer also to the other suggestions below for simplifying the code.</p>

<h1>Other Feedback/Suggestions</h1>

<h2>Likely implementation flaw</h2>

<blockquote>
<pre><code>frameworks.forEach(framework =&gt; {
  const promises = [];
  promises.push(frameworkData(framework.url));
  Promise.all(promises)
</code></pre>
</blockquote>

<p>This code will call <code>Promises.all()</code> passing an array with a single promise, which seems pointless. While there is no rule that says there has to be two or more promises it basically defeats the purpose. </p>

<p>Presumably you meant to push the promises into an array and pass the array with all promises to the call to <code>Promise.all()</code>. </p>

<h3>Creating array of promises</h3>

<p>One could use <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map" rel="nofollow noreferrer"><code>Array.prototype.map()</code></a> to construct the array. </p>

<pre><code>const promises = frameworks.map(framework =&gt; frameworkData(framework.url));
</code></pre>

<h3>utilizing data</h3>

<p>If you take the advice above, the first argument in a callback to <code>.then()</code> chained to <code>Promise.all()</code> should be an array of the data objects returned by the last promise callback within each call to <code>frameworkData()</code>, and there won’t be any reference to ‘framework<code>so you might either need to pass that object along through the call to</code>frameworkData` or look it up by index. </p>

<h3>Template inline</h3>

<p>The template literal used to define <code>card</code> could be moved out to a <a href="https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_templates_and_slots" rel="nofollow noreferrer">template tag with slots</a>  or a <code>&lt;script type="text/template”&gt;</code> that can be referenced by <code>id</code> attribute in the code. For more of an explanation of this, refer to <a href="https://stackoverflow.com/a/6932790/1575353">this post</a>, as well as an example application of it in <a href="https://codereview.stackexchange.com/q/190088/120114">this post</a>. The requirements for this may be a bit complex for a beginner but the motivation is to keep the markup (i.e. HTML) separate from the business logic (i.e. JavaScript). </p>

<p>A script tag like this could be added to the body within the HTML:</p>

<pre><code>&lt;script type=“text/template” id=“card-template”&gt;
    &lt;div class="col-lg-3"&gt;
        &lt;div class="card" style="width: 18rem;"&gt;
            &lt;img src="${logo}" alt="Card image cap" height="180" width="200"&gt;
            &lt;div class="card-body"&gt;
                &lt;h5 class="card-title"&gt;${name}&lt;/h5&gt;
            &lt;/div&gt;
            &lt;ul class="list-group list-group-flush"&gt;
                &lt;li class="list-group-item"&gt;Watchers: ${forks}&lt;/li&gt;
                &lt;li class="list-group-item"&gt;Stars: ${stars}&lt;/li&gt;
                &lt;li class="list-group-item"&gt;Commits: ${issues}&lt;/li&gt;
            &lt;/ul&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/script&gt;
</code></pre>

<p>Then that could be referenced via the JavaScript:</p>

<pre><code>const cardTemplate = document.getElementById('card-template').innerHTML;
</code></pre>

<p>You would then need interpolate the string, and unfortunately that isn't in a template literal anymore. However, an approach like outlined in <a href="https://stackoverflow.com/a/41015840/1575353">this post</a> should suffice. </p>

<p>The following function added in the JavaScript like this:</p>

<pre><code>String.prototype.interpolate = function(params) {
  const names = Object.keys(params);
  const vals = Object.values(params);
  return new Function(...names, `return \`${this}\`;`)(...vals);
}
</code></pre>

<p>Would allow for a line like this:</p>

<pre><code>row.innerHTML += cardTemplate.interpolate(data);
</code></pre>

<h3>Simplifying single line returns in arrow statements</h3>

<p>Arrow functions that simply have one line in the block, like:</p>

<blockquote>
<pre><code>resp =&gt; {
  return resp.json();
}
</code></pre>
</blockquote>

<p>Can be simplified to a single line without the block and <code>return</code>:</p>

<pre><code>resp =&gt; resp.json()
</code></pre>

<h3>Unused variable</h3>

<p>The following variable doesn't appear to be utilized:</p>

<blockquote>
<pre><code>let now = new Date();
</code></pre>
</blockquote>

<p>It can be removed unless you plan to utilize it in the future. If the value never changes, it would be wise to declare it with <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const" rel="nofollow noreferrer"><code>const</code></a>.</p>

<h2>Putting it all together</h2>

<p>See simplified code below.</p>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>String.prototype.interpolate = function(params) {
  const names = Object.keys(params);
  const vals = Object.values(params);
  return new Function(...names, `return \`${this}\`;`)(...vals);
}
const frameworks = [{
    name: "angular",
    logo: "img/angular.png",
    url: "https://api.github.com/repos/angular/angular.js"
  },
  {
    name: "ember",
    logo: "img/ember.png",
    url: "https://api.github.com/repos/emberjs/ember.js"
  },
  {
    name: "react",
    logo: "img/react.png",
    url: "https://api.github.com/repos/facebook/react"
  },
  {
    name: "vue",
    logo: "img/vue.png",
    url: "https://api.github.com/repos/vuejs/vue"
  }
];

const frameworkData = framework =&gt; {
  return fetch(framework.url)
    .then(resp =&gt; resp.json())
    .then(data =&gt; {
      return {
          logo: framework.logo,
          name: data.name,
          forks: data.forks_count,
          stars: data.stargazers_count,
          issues: data.open_issues_count
      };
    });
};

const setup = () =&gt; {
  const row = document.getElementById("row");
  const cardTemplate = document.getElementById('card-template').innerHTML;
  const promises = frameworks.map(framework =&gt; frameworkData(framework));
  Promise.all(promises).then(data =&gt; {
    row.innerHTML = data.map(obj =&gt; cardTemplate.interpolate(obj));
  });
};

document.addEventListener('DOMContentLoaded', setup);</code></pre>
<pre class="snippet-code-html lang-html prettyprint-override"><code>&lt;div id="row"&gt;&lt;/div&gt;
&lt;script type="text/template" id="card-template"&gt;
  &lt;div class="col-lg-3"&gt;
    &lt;div class="card" style="width: 18rem;"&gt;
      &lt;img src="${logo}" alt="Card image cap" height="180" width="200"&gt;
      &lt;div class="card-body"&gt;
        &lt;h5 class="card-title"&gt;${name}&lt;/h5&gt;
      &lt;/div&gt;
      &lt;ul class="list-group list-group-flush"&gt;
        &lt;li class="list-group-item"&gt;Watchers: ${forks}&lt;/li&gt;
        &lt;li class="list-group-item"&gt;Stars: ${stars}&lt;/li&gt;
        &lt;li class="list-group-item"&gt;Commits: ${issues}&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/script&gt;</code></pre>
</div>
</div>

    </div>