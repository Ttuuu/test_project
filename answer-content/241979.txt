<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This code is broken into multiple unnecessary functions. Below is all thats needed:</p>

<pre><code>operations = {
    "+": lambda x, y: x + y,
    "-": lambda x, y: x - y,
    "*": lambda x, y: x * y,
    "/": lambda x, y: x / y
}

def calculate():

    # Get numbers #
    one, two = input("Enter two numbers separated by a space: ").split()

    while operator := input("Enter an operator: + - * /"):
        if operator in ["+", "-", "*", "/"]:
            print(operations[operator](int(one), int(two)))
            return
</code></pre>

<h1>Getting multiple values from input</h1>

<p>Instead of prompting for each number, simply ask for two numbers separated by a space then split the input with a given delimiter, by default a space. <code>.split</code> returns a list, and since you only anticipate two values, can assign the output to <code>one, two</code>.</p>

<h1>Walrus Operator</h1>

<p>If you're using <code>python-3.8</code>, you can utilize the <a href="https://realpython.com/lessons/assignment-expressions/" rel="nofollow noreferrer">walrus operator</a>, also called assignment expressions. It allows you to assign and return a value in an expression. This reduces the need to define a variable before the loop and use it.</p>

<h1>Checking <code>in</code></h1>

<p>I do believe using a list/tuple instead of a string when checking <em>in this particular case</em> because it can catch some invalid input. A catch such as <code>if operator in "+-*/":</code>, it will allow "+-" as a valid operator, which we don't want. So good job there.</p>

<h1>Lambdas</h1>

<p>I've decided to use lambdas here because it's much easier to store them in a dictionary and then simply retrieve the value from the dictionary with the operator. If you want to learn more about how lambdas work, this <a href="https://www.google.com/search?q=python%20lambda&amp;rlz=1C5CHFA_enUS855US855&amp;oq=python%20lambda&amp;aqs=chrome.0.0l8.1183j0j7&amp;sourceid=chrome&amp;ie=UTF-8" rel="nofollow noreferrer">Google Search</a> brings up a plethora of sources that can explain the concept much better than I can.</p>
    </div>