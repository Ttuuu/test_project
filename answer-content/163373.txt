<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The beginning of your program obviously should be following the "HINT" and using <code>xor</code> instead of <code>add</code>.</p>

<hr>

<p>This is some really wacky code:</p>

<pre><code>    ror     eax,    0x1           ; Rotate the lowest bit out of the register. So that the carry-flag gets a new state.
    jc      evenNumber            ; jc == Jump if the carry-flag has become 1. Means the last bit has been a 1, which in turn means that the number is even.
    mov     eax,    0x1           ; Otherwise just write 0 into eax, which signals an odd number. And prints this to stdout.
    jmp     print_result

evenNumber:
    mov     eax,    0x0

print_result:
</code></pre>

<p>Typically, if you're just trying to test some bit(s) of a register, you use <code>test</code>, not this wacky <code>ror</code>-and-<code>jc</code> trick. I mean it's <em>clever</em>, but it's not <em>normal</em> â€” and thus it's not good style. Just do the normal thing, please:</p>

<pre><code>    test    eax, 0x1
    jz      evenNumber
</code></pre>

<p>Here, I'll give you a cleverness to make up for the lost <code>ror</code>. The x86 has conditional move instructions, and <code>mov</code> specifically never clears the flags, meaning that you don't need any jumps here:</p>

<pre><code>    test    eax, 0x1
    mov     eax, 0x0   ; set eax to 0...
    cmovz   eax, 0x1   ; ...but immediately set it to 1 *if* the zero flag was set
</code></pre>

<p>Or equivalently:</p>

<pre><code>    test    eax, 0x1
    mov     eax, 0x0   ; set the high bytes of eax to 0
    setz    al         ; set the low byte of eax to the value of the zero flag
</code></pre>

<p>But best of all:</p>

<pre><code>    andl    eax, 0x1   ; just extract the low-order bit...
    xorl    eax, 0x1   ; ...and flip it
</code></pre>
    </div>