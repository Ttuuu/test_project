<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You are looping over the array elements, and once you find an element greater than the element you are about to insert, you have to again find that element in the array of elements.</p>

<pre><code>        insertion_index = len(sorted_array)
        for elem_sorted in sorted_array:
            if elem_sorted &gt; elem:
                insertion_index = sorted_array.index(elem_sorted)
                break
</code></pre>

<p>You could instead use <code>enumerate</code> to extract both the element and its index:</p>

<pre><code>        insertion_index = len(sorted_array)
        for index, elem_sorted in sorted_array:
            if elem_sorted &gt; elem:
                insertion_index = index
                break
</code></pre>

<p>When you search for an element using a <code>for</code> loop and <code>break</code> when you find the element of interest, if you don't find the element, the <code>for</code> loop will execute an optional <code>else:</code> clause, so you don't need to preset the <code>insertion_index</code>:</p>

<pre><code>        for index, elem_sorted in sorted_array:
            if elem_sorted &gt; elem:
                insertion_index = index
                break
        else:
            insertion_index = len(sorted_array)
</code></pre>

<h1>Biggest inefficiency</h1>

<p><code>sorted_array</code> is in sorted order.  You could use a binary search to find the insertion location, <span class="math-container">\$O(\log N)\$</span>, instead of a linear search <span class="math-container">\$O(N)\$</span>.</p>
    </div>