<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This response is far from exhausing, but I hope it contains a few good hints.</p>

<h2>Files</h2>

<p>When dealing with OOP you'll quickly learn that it is good practice to put one class in one file and then autoload these files. It is still acceptable to include files manually in small projects, as long as you do this in a sensible manner. Your file structure looks like this:</p>

<pre><code>/home.php
/index.php
   |
   \---&gt; /includes/db.inc.php
             |
             \---&gt; /includes/user.class.php
</code></pre>

<p>Which looks weird. <code>db.inc.php</code> includes much more than just database related stuff, it starts the session and contains the user class. That is confusing. A better structure would be:</p>

<pre><code>/home.php
/index.php
   |
   \---&gt; /includes/start.inc
             |
             \---&gt; /includes/db.inc
             \---&gt; /classes/user.inc
</code></pre>

<p>Where <code>start.inc</code> start the session, database, and initializes the user. This could look something like this:</p>

<pre><code>&lt;?php

// begin or resume session
session_start();

// database access parameters
$db_access = ['host'     =&gt; 'localhost',
              'username' =&gt; 'root',
              'password' =&gt; '',
              'database' =&gt; 'oop_login'];

// connect to database
require('db.inc');

// add user class
require('../classes/user.inc');

// make use of database with users
$user = new User($database);
</code></pre>

<p>It's an include file where you 'start' everything you need. It's not perfect, but better than what you had.</p>

<p><em>note 1:</em> Make sure that files in the includes and classes directory cannot be accessed by normal visitors of your website, even if they give just a blank page. You don't want their hands on it.</p>

<p><em>note 2:</em> Files that you include don't need the .php extension, so 'db.inc' will work fine.</p>

<h2>Variable Names</h2>

<p>You are consistently using under_score notation for your variables. You also don't use too many abbreviations. Both greatly help readability. I do notice some difficulty in getting the semantics of the names correct and consistent. Weird examples are:</p>

<pre><code>$this-&gt;db = $db_conn; // is it a database or a database connection?

$query = $this-&gt;db-&gt;prepare($sql); // preparing a statement results in a query?

$returned_row = $query-&gt;fetch(PDO::FETCH_ASSOC); // will there always be a row?!
</code></pre>

<h2>Only one class? Or not?</h2>

<p>In reality you've only made one class, called 'user'. I expect it to deal with everything to do with the user. To my horror however, you access the users table in 'home.php' and in 'index.php'. I must stress that in OOP: <strong>The responsibility of dealing with the users table should be completely confined to the user class.</strong> That's reason for making classes in the first place: Isolate functionality in manageable chunks. Another reason for classes is to <em>abstract functionalily</em> for you so you don't have to deal with the nastly details outside the class itself.</p>

<p>What clearly doesn't belong in the user class is <code>redirect($url)</code>. This has nothing to do with an user.</p>

<h2>Security</h2>

<p>You've paid attention here and you use prepared statements and password hashing. Good.</p>

<h2>Error handling</h2>

<p>I don't like your error handing. Yes, you use exceptions, that's good, but a global array with all errors? That's not very OOP.</p>

<h2>Conclusion</h2>

<p>There are some other minor things in your code I could comment on, but the main issue with your code is that it was clearly designed from a procedural mindset. Not strange, given where you come from. However, instead of tackling a rather difficult user-login-logout system, why not choose something relatively easy, like the tower of Hanoi. Try to split the problem into discernible parts, like pegs, disks and moves, make classes for those. Use classes for everything, just to feel what that's like. Learn to use inheritance and chaining, important properties of classes.</p>
    </div>