<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><em>(Disclaimer -- I too am a beginner here and I am happy to read your comments.)</em></p>

<p>The code gets repeated a lot in methods <code>get_horizontal</code>, <code>get_vertical</code>, ...</p>

<p>One idea to fight this is to write a function that gets the starting position, difference in the x-axis <code>dx</code>, and difference in the y-axis <code>dy</code> (possibly also the number of numbers to multiply -- in this case 4).</p>

<p>This leads to another problem that we do not want to address out of the grid. We can have another method that returns whether or not your indexes always stay inside the grid.</p>

<pre><code>""" Solve Euler problem 11: https://projecteuler.net/problem=11 """
import numpy as np

def all_in_grid(start_x, start_y, dif_x, dif_y, numbers):
    """Check if all positions are in the grid."""
    for i in range(numbers):
        if not (
                0 &lt;= start_x + i*dif_x &lt; GRID.shape[0]
                and 0 &lt;= start_y + i*dif_y &lt; GRID.shape[1]
                ):
            return False
    return True


def product(start_x, start_y, dif_x, dif_y, numbers):
    """Return multiple of the numbers in the grid.

    return GRID[start_x][start_y] * GRID[start_x+dif_x][start_y+dif_y]
        * ... * GRID[start_x + (numbers-1)*dif_x][start_y + (numbers-1)*dif_y]
    """
    prod = 1
    for i in range(numbers):
        prod *= GRID[start_x + (i*dif_x)][start_y + (i*dif_y)]
    return prod


def max_in_direction(dif_x, dif_y, numbers=4):
    """Return maximum in the given direction."""
    return max(
        product(start_x=x, start_y=y, dif_x=dif_x, dif_y=dif_y, numbers=numbers)
        for x in range(GRID.shape[0])
        for y in range(GRID.shape[1])
        if all_in_grid(start_x=x, start_y=y, dif_x=dif_x, dif_y=dif_y, 
numbers=numbers)
        )


GRID = np.loadtxt("grid.txt")
GRID = GRID.astype(int)

SOLUTION = max(
        max_in_direction(1, 0),
        max_in_direction(0, 1),
        max_in_direction(1, 1),
        max_in_direction(1, -1),
        )
print(SOLUTION)
</code></pre>

<p>It would probably be a good idea to convert this solution to a one which would use numpy product instead of looping in python.</p>
    </div>