<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>A couple of things I noticed:</p>

<p>Using a TreeMap, instead of converting a StringBuilder to a char[] and creating the map, is much more efficient.</p>

<p>You don't test for an empty argument list.</p>

<p>Telling the user they have to use <code>.txt</code> in the filename is inaccurate as your code doesn't test for that.</p>

<p>When you're printing multiple values on one line, it is more efficient and easier to maintain to use <code>printf</code>, rather than concatenating strings;</p>

<p>Something like this will work:</p>

<pre><code>public static void main(String[] args) throws IOException {
    if (args.length &lt; 1 || args[0].equals("help")) {
        System.out.println("usage: java Main filename");
        return;
    }
    fileToChars(args[0])
            .forEach((k, v) -&gt; System.out.printf("%1$s: %2$d\n", k, v));
}

private static TreeMap&lt;Character, Integer&gt; fileToChars(String fileName) throws IOException {
    final char EOF = (char) -1;
    File file = new File(fileName);
    TreeMap&lt;Character, Integer&gt; builder = new TreeMap&lt;&gt;();
    try (FileReader reader = new FileReader(file)) {
        Character input;
        while ((input = (char) reader.read()) != EOF) {
            Integer count = builder.getOrDefault(input, 0);
            builder.put(input, ++count);
        }
    } catch (IOException e) {
        throw new IOException("Problem reading file");
    }
    return builder;
}
</code></pre>

<p>This gives a sorted output of the mapped Characters.  If an 'as is' output is wanted, change the <code>TreeMap</code> to a <code>HashMap</code>.</p>
    </div>