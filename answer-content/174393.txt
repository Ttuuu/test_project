<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Let's first address some of your logic and flow.</p>

<p>One thing that strikes me right away is that you have the same logic written twice, this can be made into a function or, in a more Pythonic fashion can be made into a list comprehension. A for loop is also to be considered for readability.</p>

<p>Moving on, you are using if blocks to check a condition and breaking inside of a while loop that is always true. You can clean this up by changing <code>while True</code> to instead be <code>while plus_prime &lt; limit and minus_prime&lt; limit</code>.
It is important to note in this case that you should recompute these values at the end of the loop, so that their current is checked before loop execution rather than after. There are many different approaches to this.</p>

<p>I'm going to specifically break down this part of code:</p>

<pre><code>for x in primes:              #for loops often can instead be comprehensions in python
    if minus_prime % x == 0:  #checking many booleans is also very easy in python
        is_prime = False
        break
if is_prime:
    primes.append(minus_prime)
is_prime = True
</code></pre>

<p>because it can be made very elegant in Python.</p>

<p>Instead of having many if statements, a sentinel boolean, and a for loop we can make this very clean with the following:</p>

<pre><code>if all(minux_prime % x for x in primes):
    primes.append(minus_prime)
</code></pre>

<p><em>What is going on here?</em></p>

<p>The statement <code>minux_prime % x for x in primes</code> is what is called a generator, it is similar to a list comprehension in python but it is different and may not always make  a list. <a href="https://stackoverflow.com/questions/47789/generator-expressions-vs-list-comprehension">Full Discussion here</a>. In this case the generator is being used to make a list </p>

<p>Then we use the Python builtin function <code>all()</code> this function returns a true or false value, <code>True</code> if the passed in list contains no <code>False</code> values. The function <code>all()</code> returns <code>False</code> if there exists any false statement. The Python function <code>any()</code> is the inverse of this, I recommend reading about it as homework ;).</p>

<p>On the topic of efficiency, a sieve is normally the fastest method to work for finding primes. it works by finding early primes, and then removing all values that we know are not primes because of our known primes then iterating. </p>

<p><a href="https://stackoverflow.com/questions/3939660/sieve-of-eratosthenes-finding-primes-python">Here's an implementation</a></p>
    </div>