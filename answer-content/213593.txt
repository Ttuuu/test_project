<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>To answer your immediate question: Yes, it is fine to mutate an array while enumerating its elements. The reason is that</p>

<pre><code>for res in result { ... }
</code></pre>

<p>is equivalent to</p>

<pre><code>var iter = result.makeIterator()
while let res = iter.next() {
    // ...
}
</code></pre>

<p>and that arrays are <em>value types</em> in Swift: Mutating <code>result</code> inside the loop creates a new value and does not affect the original array that the iterator is using. See <a href="https://stackoverflow.com/q/37997465/1187415">Remove element from collection during iteration with forEach</a> on Stack Overflow for more details.</p>

<p>There are some possible simplifications. Here</p>

<blockquote>
<pre><code>var resi = res
resi.append(arr[i])
result.append(resi)
</code></pre>
</blockquote>

<p>is is not necessary to declare another array variable, this can be shortened to</p>

<pre><code>result.append(res + [arr[i]])
</code></pre>

<p>A better name for the <code>res</code> variable might be <code>subarray</code> or <code>subset</code>.</p>

<p>Instead of looping over the array indices</p>

<blockquote>
<pre><code>for i in 0..&lt;arr.count {
    // ... do something with `arr[i]` ...
}
</code></pre>
</blockquote>

<p>you can enumerate the array (as you already do in the inner loop) </p>

<pre><code>for elem in arr {
    // ... do something with `elem` ...
}
</code></pre>

<p>The </p>

<blockquote>
<pre><code>guard arr.count &gt;= 1 else { return [arr] }
</code></pre>
</blockquote>

<p>is not needed. Your algorithm already does “the right thing” for an empty array.</p>

<p>So this is what we have so far:</p>

<pre><code>func subarrays(_ arr: [Int]) -&gt; [[Int]] {
    var result = [[Int]]()
    for elem in arr {
        for subarray in result {
            result.append(subarray + [elem])
        }
        result.append([elem])
    }
    result.append([])
    return result
}
</code></pre>

<p>It becomes a bit simpler if <code>result</code> is not initialized with an empty list, but with a list containing the empty subset. Adding the array element itself, and the empty set at the end of the function is no longer necessary:</p>

<pre><code>func subarrays(_ arr: [Int]) -&gt; [[Int]] {
    var result: [[Int]] = [[]]
    for elem in arr {
        for subarray in result {
            result.append(subarray + [elem])
        }
    }
    return result
}
</code></pre>

<p>(The subset are returned in a different order now, though.)</p>

<p>The inner loop could be replaced by a <em>map</em>  operation:</p>

<pre><code>func subarrays(_ arr: [Int]) -&gt; [[Int]] {
    var result: [[Int]] = [[]]
    for elem in arr {
        result.append(contentsOf: result.map { $0 + [elem] })
    }
    return result
}
</code></pre>

<p>or even the entire function body replaced by a single expression:</p>

<pre><code>func subarrays(_ arr: [Int]) -&gt; [[Int]] {
    return arr.reduce(into: [[]], { (result, elem) in
        result.append(contentsOf: result.map { $0 + [elem] })
    })
}
</code></pre>

<p>but that is a matter of taste – is not necessarily easier to read.</p>

<p>There is nothing particular with respect to integers in the algorithm, the function can be made generic to take arrays of any element type – or even arbitrary <em>sequences.</em></p>

<p>Finally I would call it <code>subsets(of:)</code>, which is what the function computes:</p>

<pre><code>func subsets&lt;S: Sequence&gt;(of seq: S) -&gt; [[S.Element]] {
    var result: [[S.Element]] = [[]]
    for elem in seq {
        for subset in result {
            result.append(subset + [elem])
        }
    }
    return result
}
</code></pre>
    </div>