<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>If you are just doing a single-shot printing of a container, just print the first element and then print delim-value pairs.  This reduces the iterator requirements to being equality comparable, dereferenceable, and incrementable.</p>

<pre><code>if (!vec.empty()) {  // invert to return immediately if this is a function
    auto first = vec.cbegin();
    std::cout &lt;&lt; *first;

    while (vec.cend() != ++first) {
        std::cout &lt;&lt; ", " &lt;&lt; *first;
    }
}
</code></pre>

<p>There is also a stateful approach that reduces the operation strength from branching on whether to print the delimiter to a pointer assignment.</p>

<pre><code>auto actual_delim = ", ";
auto delim = "";

for (const auto&amp; elem : vec) {
    std::cout &lt;&lt; delim &lt;&lt; elem;
    delim = actual_delim;
}
</code></pre>

<p>See <a href="https://codereview.stackexchange.com/questions/13176/infix-iterator-code"><code>infix_iterator</code></a> where this stateful approach is used.</p>
    </div>