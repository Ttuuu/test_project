<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Before I address the <code>checkBoundary</code> function, I have some review points I would like to start with.</p>

<h3>General Javascript style points</h3>

<p>Semi-colons aren't used to terminate lines. While they are only required <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#Automatic_semicolon_insertion" rel="nofollow noreferrer">after a handful of statements</a>, it could lead to errors if somehow whitespace got removed. It is a good habit to default to terminating lines with them.</p>

<p>The naming of variables (and constants) could be improved. I see <code>MARIO</code> used for a variable that corresponds to an Image object, as well as <code>mario</code> that is used as the path to the image (i.e. <code>'../images/mario.png'</code> which is actually imported and thus would likely be an object bytemap). Typically, all capitals corresponds to constant values (e.g. string literals) so it would be more appropriate to have the path to the image in all capitals - e.g. <code>MARIO_SRC</code> or <code>PATH_TO_MARIO</code>. Then the variable that corresponds to the Image is still technically mutable despite being declared with <code>const</code> so it would be more appropriate to use camel-case characters for it. Perhaps a less confusing name would be <code>marioImg</code>.</p>

<pre><code>const marioImg = new Image();
marioImg.src = MARIO_SRC;
</code></pre>

<p>I see this boolean constant declared: <code>const WILL_DISCARD = true</code>. Do you modify that manually during testing? If not, it seems superfluous and the conditionals that use it could be removed. </p>

<p>I see that the function <code>Tree</code> has been modified (from the example in <a href="https://eskerda.com/bsp-dungeon-generation/" rel="nofollow noreferrer">the post on eskerda</a>) to accept parameters <code>left</code> and <code>right</code> but those don't appear to be used. Was there a point to adding those parameters, perhaps to set the member/instance variables if those are not <code>undefined</code>?</p>

<p>Since <a href="/questions/tagged/ecmascript-6" class="post-tag" title="show questions tagged 'ecmascript-6'" rel="tag">ecmascript-6</a> features like arrow functions are used, the function <code>Tree. getLeafs()</code> could be simplified using the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax" rel="nofollow noreferrer">spread syntax</a>.</p>

<pre><code>getLeafs () {
    if (this.left === undefined &amp;&amp; this.right === undefined) {
      return [this.leaf]
    } else {
      return [...this.left.getLeafs(), ...this.right.getLeafs()];
    }
  }
</code></pre>

<p>There is a function declared for the <code>onload</code> of <code>MARIO</code>:</p>

<blockquote>
<pre><code>MARIO.onload = () =&gt; drawUser()
</code></pre>
</blockquote>

<p>This can be simplified to:</p>

<pre><code>MARIO.onload = drawUser;
</code></pre>

<h3><code>checkBoundary</code></h3>

<p>I'm not sure what the best approach is to simplifying this function and the nested functions within it. One thought I have is to abstract conditions - for example in <code>withinRoom</code> you could declare a variable like: </p>

<pre><code>const outsideLeftBound = userX &lt; x * TILE;
</code></pre>

<p>And use that in places like</p>

<blockquote>
<pre><code>if ((direction === 'left' &amp;&amp; userX === x * TILE) ||
</code></pre>
</blockquote>

<p>as in:</p>

<pre><code>if ((direction === 'left' &amp;&amp; outsideLeftBound) ||
</code></pre>

<p>And then instead of </p>

<blockquote>
<pre><code>return (userX &gt;= x * TILE &amp;&amp;
</code></pre>
</blockquote>

<p>use:</p>

<pre><code>return !outsideLeftBound
</code></pre>

<p>Though I realize that would be changing the logic slightly because <code>&lt;</code> is different than <code>===</code>.</p>
    </div>