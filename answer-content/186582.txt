<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>One possibility would be to use a <code>Set</code> in order to check for duplicate integers. If there are no duplicates, the length of the list should be <code>max - min + 1</code>:</p>

<pre><code>public static boolean areConsecutiveIntegers(Integer[] numbers) {
    List&lt;Integer&gt; numbersList = Arrays.asList(numbers);
    Integer min = Collections.min(numbersList);
    Integer max = Collections.max(numbersList);
    Set&lt;Integer&gt; uniqueNumbers = new HashSet&lt;&gt;(numbersList);
    return numbersList.size() == uniqueNumbers.size() &amp;&amp; numbersList.size() == max - min + 1;
}
</code></pre>

<p>Here are some tests:</p>

<pre><code>package stackoverflow;

import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import org.junit.Test;


public class ConsecutiveIntegers
{
    @Test
    public void testConsecutiveIntegers() {
        Integer[][] consecutives = {
                { 1, 2, 3 },
                { 3, 2, 1 },
                { 1, 3, 2 },
                { 1, 2, 3, 5, 6, 7, 4, 0, 9, 8, -1 },
                { 1 },
        };

        Integer[][] nonConsecutives = {
                { 2, 0 },
                { 1, 2, 3, 3 },
                { 1, 2, 2 },
                { -1, 1 },
                { 1, 2, 3, 5, 6, 7, 4, 9, 8, -1 },
        };

        for (int i = 0; i &lt; consecutives.length; i++) {
            assertTrue(areConsecutiveIntegers(consecutives[i]));
        }

        for (int i = 0; i &lt; nonConsecutives.length; i++) {
            assertFalse(areConsecutiveIntegers(nonConsecutives[i]));
        }
    }

    public static boolean areConsecutiveIntegers(Integer[] numbers) {
        List&lt;Integer&gt; numbersList = Arrays.asList(numbers);
        Integer min = Collections.min(numbersList);
        Integer max = Collections.max(numbersList);
        Set&lt;Integer&gt; uniqueNumbers = new HashSet&lt;&gt;(numbersList);
        return numbersList.size() == uniqueNumbers.size() &amp;&amp; numbersList.size() == max - min + 1;
    }
}
</code></pre>
    </div>