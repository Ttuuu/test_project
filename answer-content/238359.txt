<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The conversion function <code>convertedDegreeC2F()</code> handles only four of the nine possible conversions between the three units. In particular, the conversion between identical input/output unit is not handled. Also the function name is misleading because the function is not about conversion from Celsius to Fahrenheit only.</p>

<p>The conversion between temperature units can be greatly simplified using  <a href="https://developer.apple.com/documentation/foundation/measurement" rel="nofollow noreferrer"><code>Measurement</code></a> from the Foundation framework:</p>

<blockquote>
  <p>A numeric quantity labeled with a unit of measure, with support for unit conversion and unit-aware calculations.</p>
</blockquote>

<p>Here is a standalone example for demonstration:</p>

<pre><code>let t = Measurement(value: 10.0, unit: UnitTemperature.celsius)
print(t.converted(to: .fahrenheit).value) // 49.99999999999585
print(t.converted(to: .kelvin).value)     // 283.15
</code></pre>

<p>The Fahrenheit value is not “exact” due to floating point rounding issues. But that does not matter, because <em>displaying</em> the value should be done with a <em>formatter</em> anyway. Here we can use a <a href="https://developer.apple.com/documentation/foundation/measurementformatter" rel="nofollow noreferrer"><code>MeasurementFormatter</code></a>:</p>

<blockquote>
  <p>A formatter that provides localized representations of units and measurements.</p>
</blockquote>

<p>Again a standalone example for demonstration:</p>

<pre><code>let formatter = MeasurementFormatter()
formatter.unitOptions = .providedUnit

let t = Measurement(value: 10.0, unit: UnitTemperature.celsius)
print(formatter.string(from: t)) //10°C
print(formatter.string(from: t.converted(to: .fahrenheit))) // 50°F
print(formatter.string(from: t.converted(to: .kelvin))) // 283.15 K
</code></pre>

<p>The measurement formatter adds the correct unit symbol automatically, and also localizes the output correctly (e.g. “283,15 K” with a comma as fraction separator, where appropriate).</p>

<p>The conversion from the input field value to a floating point number should be done with a <code>NumberFormatter()</code> to handle localized input correctly.</p>

<p>With these preparations, the correct conversion between arbitrary temperature units becomes simple:</p>

<pre><code>func convert(temperature: String, from inputUnit: UnitTemperature, to outputUnit: UnitTemperature) -&gt; String? {
    let inputFormatter = NumberFormatter()
    guard let value = inputFormatter.number(from: temperature) else { return nil }

    let inputTemp = Measurement(value: value.doubleValue, unit: inputUnit)
    let outputTemp = inputTemp.converted(to: outputUnit)

    let outputformatter = MeasurementFormatter()
    outputformatter.unitOptions = .providedUnit
    return outputformatter.string(from: outputTemp)
}
</code></pre>

<p>In your <code>ContentView</code> you can then define the list of available units as</p>

<pre><code>let units: [UnitTemperature] = [.celsius, .fahrenheit, .kelvin]
</code></pre>

<p>instead of using a list of strings. Both pickers can be created from this list (with the correct symbol for each unit), e.g.</p>

<pre><code>Picker("Input Unit", selection: $inputUnit) {
    ForEach(0..&lt;units.count) {
        Text(self.units[$0].symbol)
    }
}
.pickerStyle(SegmentedPickerStyle())
</code></pre>

<p>Finally, converting the input value and displaying it is now simply done with</p>

<pre><code>Text(convert(temperature: inputTemp, from: units[inputUnit],
            to: units[outputUnit]) ?? "Invalid input")
</code></pre>

<p>A small performance improvement might be to create both formatters only once, e.g. by storing them as private variables in the compilation unit:</p>

<pre><code>import SwiftUI

fileprivate let inputFormatter = NumberFormatter()
fileprivate let outputformatter: MeasurementFormatter = {
    let fmt = MeasurementFormatter()
    fmt.unitOptions = .providedUnit
    return fmt
}()

func convert(...)
// ...
</code></pre>
    </div>