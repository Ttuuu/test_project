<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><p>This has been raised in many of your reviews, but let me repeat: <em>make member functions that don't modify object contents const</em>. This improves readability and advocates correctness. (One example is <code>get_board()</code>, but there are plenty more).</p></li>
<li><p>Don't pass expensive objects (like <code>std::string</code>) by value unless you have to. A better idea is to pass them by const-ref (e.g., <code>const std::string&amp; state</code>).</p></li>
<li><p>A member function like <code>class_type()</code> is a <strong>bad idea</strong>. Don't do this, it only breaks abstraction. As it stands, someone queries the objects for their type and does an action (= drawing) accordingly. Instead, make every object know how it should be drawn. For example, drop the <code>class_type()</code> function and replace it with something like <code>std::string draw()</code> that returns whatever is correct. Then your board just implements the logic of "for every object o, call o.draw()" and your code is greatly simplified.</p></li>
<li><p>It seems that <code>GameStateManager</code> is completely useless. You can replace it with a boolean in the main program and simplify your program.</p></li>
<li><p>Consider using <code>const</code> or <code>constexpr</code> values for all the colors and other strings you are printing.</p></li>
<li><p>The declaration of <code>space1</code> through <code>space9</code> is questionable. In fact, whenever you feel like writing something like that, you should start questioning yourself and think what the better alternative is. In this case, there's no need to name these variables. You can directly initialize the vector by constructing the objects in-place in a constructor call.</p></li>
<li><p>Is there a reason the Board object must be copied inside the main program on the line <code>auto board = bowsers_bigbad_laddersnake.get_board();</code>?</p></li>
</ul>
    </div>