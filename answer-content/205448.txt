<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Build on top of the standard library, not along</h2>

<p>You didn't specify which version of the standard you target. If it is the most recent one, then you have in <a href="https://en.cppreference.com/w/cpp/utility/optional" rel="nofollow noreferrer">std::optional</a> the tool to avoid explicit memory management and keep the benefit of uninitialized, local storage. </p>

<p>Even if not, a self-contained object handler probably won't bring anything worth renouncing standard tools such as <code>std::unique_ptr</code>. That you didn't notice that your program would leak resources if the given <code>Functor</code>, or <code>T</code>'s constructor, threw an exception, or even if a <code>write</code> isn't <code>read</code>, is a proof of this wise principle: don't reinvent memory management tools.</p>

<p>If you really want to provide your own memory manager, make it a dedicated, RAII based class, and then compose your <code>spsc_object</code> from it and an <code>atomic</code>.</p>

<h2>Avoid code duplication</h2>

<p>You don't need to have two <code>write</code> methods, and two <code>read</code> methods even less. <code>read</code> already uses a template argument, meaning that <code>Functor&amp;</code> will adapt to either <code>const Functor&amp;</code> or <code>Functor&amp;</code>. For the <code>write</code> method, you can introduce a template argument to get into template deduction context and benefit from a forwarding reference. </p>

<h2>Don't clutter variable names with underscores</h2>

<p>Classes are meant to qualify names and avoid conflicts, so keep your names informative and beautiful.</p>

<p>With all that in mind, here's what I'd suggest:</p>

<pre><code>#include &lt;type_traits&gt;
#include &lt;atomic&gt;
#include &lt;optional&gt;

template&lt;typename T&gt;
class spsc_object {

    std::optional&lt;T&gt; value;
    std::atomic_bool occupied;

public:
    template &lt;typename U&gt;
    bool write(U&amp;&amp; object) {
        static_assert(std::is_convertible_v&lt;U, T&gt;);
        if (!occupied.load(std::memory_order_acquire)) {
            value = std::forward&lt;U&gt;(object);
            occupied.store(true, std::memory_order_release);
            return true;
        }
        return false;
    }

    template&lt;typename Functor&gt;
    bool read(Functor&amp;&amp; functor) {
        if (!occupied.load(std::memory_order_acquire)) 
            return false;
        functor(*value);
        value.reset();
        occupied.store(false, std::memory_order_release);
        return true;
    }
};
</code></pre>
    </div>