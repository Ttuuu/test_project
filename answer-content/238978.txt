<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Some notes:</p>

<ol>
<li>If you're using mocks you are pretty much by definition doing <em>integration</em> rather than unit testing, because mocks enable you to test how a piece of code <em>integrates</em> with something else having a specific behaviour.</li>
<li>The primary goal of tests is to gain confidence that the code does what you expect. A sub-goal of this is clarity - the test should be as simple as possible while demonstrating something new and non-trivial about the code under test. Because of these I would inline <code>setUp</code> until you add more test cases which definitely need the exact same preconditions.</li>
<li>A useful pattern for test names is that they should have a name starting with the word <em>"should"</em> which says exactly and only <em>what the test is meant to demonstrate.</em> This is much more helpful than the "test" prefix, which encourages test names which only say which <em>method</em> is being tested. So if you're trying to test that <code>getAllVideos</code> simply forwards the response from the video repository's <code>findAll</code> you could name it something like <code>getAllVideosShouldReturnVideoRepositoryFindAllReturnValue</code>. At this point it's pretty obvious that the service isn't actually doing anything interesting yet — a better implementation would have no video repository at all — you might as well skip this test and think of the simplest <em>interesting</em> thing that the code could do, such as counting videos, filtering videos by some property, or something else entirely.</li>
<li>The third argument to <code>assertEquals</code> is only useful so long as it actually conveys something about the test which the assertion output doesn't already convey. This becomes super clear with TDD, because you always run the failing test before implementing the production code, so you get to check whether the error message is useful enough to debug the problem when the test inevitably fails in the future.</li>
</ol>
    </div>