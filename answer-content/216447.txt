<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Before starting with feedback on the actual code, I would like to share some thoughts about the style.</p>

<h2>Chose a style, be consistent</h2>

<p>Python comes with an official style guide called <a href="https://www.python.org/dev/peps/pep-0008/" rel="noreferrer">PEP8</a> which summarizes a whole lot of style advice and best practices generally to be used while coding Python. If you decide to stick with PEP8 or not is up to you, but if you chose a style, e.g. for variable names, <em>stick to it</em>. Your code has a mix of <code>camelCase</code> (e.g. <code>iTrial</code>), <code>snake_case</code> (e.g. <code>initial_guess</code>, actually most of the code is like this and also the PEP8 recommendation) and <code>snake_swallowed_CASE_case</code> (e.g. <code>MC_analysis_a</code>).</p>

<p>Another recommendation of PEP8 is to omit whitespace around <code>=</code> when used as keyword arguments to functions/methods. Incorporating the first one the line</p>

<pre class="lang-py prettyprint-override"><code>yTrial = y_signal_a + np.random.normal(loc = y_signal_a, scale = e_signal_a, size = np.size(y_signal_a))
</code></pre>

<p>would become</p>

<pre class="lang-py prettyprint-override"><code>y_trial = y_signal_a + np.random.normal(loc=y_signal_a, scale=e_signal_a, size=np.size(y_signal_a))
</code></pre>

<p>The same goes for <code>np.array(...)</code> and friends earlier in the code.</p>

<p>As a final note, do your future self a favor and document what you're doing in that function in a short little description right at the beginning. You might think you will remember your thoughts when looking at it in three months, but trust me, you won't. It is as simpe as:</p>

<pre class="lang-py prettyprint-override"><code>def mc_analysis_a():
    """Running Monte Carlo analysis on some 1D sample data

    This function uses scipy.optimize.curve_fit to estimate the parameters of
    a simple x -&gt; y timeseries.
    """
</code></pre>

<p>This type of documentation has the nice feature that it will be picked up by Python's built-in <code>help(...)</code> function.</p>

<h2>The code itself</h2>

<p>At the moment, there are some unused imports in your code (namely <code>import scipy.optimize</code> and <code>from scipy.stats import kde</code>, but that might be a symptom from bringing the code here on Code Review.</p>

<p>The next thing that caught my attention was that you do not use the estimated covariance matrix returned by <code>curve_fit</code>. If you really have no use for it, replace <code>covariance_matrix</code> by <code>_</code> (underscore). This a convention used to tell yourself and others that you don't care about that (part of the) return value.</p>

<p>Next up comes <code>total_iterations = 5000</code> as hardcoded value. If you ever try to increase or decrease that value you would have to edit your function before rerunning the experiment. A more convenient approach from my point of view would be to use it as input parameter with an default value of <code>5000</code>. The same applys to <code>initial_guess</code> and friends. (<strong>Sidenote:</strong> if you were to use <code>initial_guess</code>' current value as default value and ever modified it in the function, funny things can happen. See <a href="https://docs.python-guide.org/writing/gotchas/#mutable-default-arguments" rel="noreferrer">this link</a> for more information on this topic, since this would get to involved for this review.)</p>

<p>Now to the core loop of the function. While generating the noisy y values, <code>np.size(y_signal_a)</code> should be equal to <code>y_signal_a.size</code>. In your case, one could also use <code>y_signal.shape</code> in that spot which would then guarantee that the noise also fits the shape of the array if it was multidimensional.</p>

<p>Using <code>try: ... catch: ...</code> without specifying an exception type is considered a bad practice since it will catch all kinds of exceptions including keyboard interupts (Ctrl+C). So if you ever decide to stop the test because 5000 iterations where to much, well, you would have to kill the Python process itself. The <a href="https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.curve_fit.html" rel="noreferrer">documentation</a> of <code>curve_fit</code> lists all the exceptions that might be raised while using this function. These are <code>ValueError</code> for bad input data or input options and <code>Runtime Error</code> in case the least-squares minimization failed. So these would likely be your candidates to catch, with the following construct:</p>

<pre class="lang-py prettyprint-override"><code>try:
    ...
catch (ValueError, RuntimeError):
    continue # or handle the exception however you want
</code></pre>

<p>This would still stop the execution if something unexpected has happened and, as you can see, works for <a href="https://docs.python.org/3/tutorial/errors.html#handling-exceptions" rel="noreferrer">multiple exceptions</a> as well.</p>

<p>On the same loop you're using the NumPy array <code>MC_pars</code> to collect the results of those iterations step by step. As you might have noticed NumPy arrays are not really comfortable to use in an expanding way since their main purpose is to allow fast vectorized operations on "fixed" size numerical data (though their use is not limited to that). At this point using a simple Python list might be a better option. This would allow you to <code>.append(...)</code> the results of every run very conveniently. And, as you seem to know, it's quite easy to convert Python iterables (lists, tuples) into NumPy arrays.</p>

<p>For reference you can find the modified version of the total script below.</p>

<pre class="lang-py prettyprint-override"><code>import numpy as np
from scipy.optimize import curve_fit

def mc_analysis_a(total_iterations=5000):
    """Running Monte Carlo analysis on some 1D sample data

    This function uses scipy.optimize.curve_fit to estimate the parameters of
    a simple x -&gt; y timeseries.
    """
    x = (0.001, 0.002, 0.004, 0.008, 0.016, 0.032, 0.064, 0.128)
    y_signal_a = (1.0, 0.83, 0.71, 0.62, 0.55, 0.49, 0.45, 0.42)
    x = np.array(x, dtype = float)
    y_signal_a = np.array(y_signal_a, dtype = float)
    e_signal_a = (0.06, 0.05, 0.04, 0.05, 0.04, 0.02, 0.04, 0.03)

    def func(x, a, b):
        return a * np.exp(-b * x)

    initial_guess = [1.0, 1.0]
    fitting_parameters, _ = curve_fit(func, x, y_signal_a, initial_guess)
    print(round(fitting_parameters[1], 2))

    # ---&gt; PRODUCING PARAMETERS ESTIMATES
    mc_pars = []
    for _ in range(total_iterations):   # i was replaced by _ here, because it was not used
        x_trial = x
        y_trial = y_signal_a + np.random.normal(loc=y_signal_a, scale=e_signal_a, size=y_signal_a.shape)
        try:
            iteration_identifiers, _ = curve_fit(func, x_trial, y_trial, initial_guess)
        except (ValueError, RuntimeError):
            continue

        mc_pars.append(iteration_identifiers)

    # ---&gt; SLICING THE ARRAY
    mc_pars = np.array(mc_pars)
    print(mc_pars.shape)
    print(mc_pars[:, 1].std())

if __name__ == "__main__":
    mc_analysis_a(5000):
</code></pre>
    </div>