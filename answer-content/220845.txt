<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Part 1</strong>: Can't comment it properly, I am not Django user. But looks pretty good.</p>

<hr>

<p><strong>Part 2</strong>: I think it is better to retain try-except block. If a <code>value</code> will not have <code>text</code> parameter, you will get an error. If you don't want try-except block, you should add <code>hasattr</code> check:</p>

<pre><code>if hasattr(value, 'text'):
    # DO THE MAGIC!
</code></pre>

<p>or:</p>

<pre><code>if not hasattr(value, 'text'):
    # WE HAVE PROBLEMS, MY LORD!
</code></pre>

<p>About the last <code>else</code>. You can delete it and have this code:</p>

<pre><code>def get_product_type(value):
    ...
    elif value.text == 'U':
        return 'Upstream'
    return ''
</code></pre>

<p>instead of yours:</p>

<pre><code>def get_product_type(value):
    ...
    elif value.text == 'U':
        return 'Upstream'
    else:
        return ''
</code></pre>

<p>But I don't think it really does matter.</p>

<hr>

<p><strong>Part 3</strong>:</p>

<p>1.</p>

<pre><code>if field_relation != '':
...
if field_traduction != '' and field_relation == '':
...
</code></pre>

<p>You don't need the second statement if you will write <code>elif</code> instead of <code>if</code>:</p>

<pre><code>if field_relation != '':
...
elif field_traduction != '':
...
</code></pre>

<ol start="2">
<li>It is a bad idea to set <code>manufacturer_name = ''</code> to string and then change it to class instance. When another programmer will read your code, they can think that it is (and will be) a string because the variable name is fit to this mention. So I suggest you to use <code>manufacturer_name = None</code> in this case.</li>
</ol>

<p>3.</p>

<pre><code>        if field_relation == '' and field_traduction == '':
            manufacturer_name = ''
            pass
</code></pre>

<p><code>pass</code> is redundant. You already has a code inside <code>if</code>. Moreover, you can return <code>''</code> in <code>except</code> so you will not need the last if-statement (you can return the good value in the end of the <code>try</code> or after the try-except block).</p>

<ol start="4">
<li><code>field_relation == ''</code> and <code>field_relation != ''</code> can be shortened to <code>not field_relation</code> and <code>field_relation</code></li>
</ol>

<hr>

<p>The same for <strong>Part 4</strong>. Your code can be shortened to:</p>

<pre><code>try:
    if pheur_transcoded_data:
        return pheur_transcoded_data.name
    else:
        return Transcodedblah-blah-blahName.objects.get(blah-blah-blah).data_eppn.name
except ObjectDoesNotExist:
    return ''
</code></pre>

<hr>

<p><strong>Part 5</strong> is ok.</p>
    </div>