<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Understanding your code was a bit of a challenge (albeit an interesting one). </p>

<p>Overall, I see a lot of function definitions that don't seem to accomplish anything. Why did you write</p>

<pre><code>public static IOrderedEnumerable&lt;Pair&gt; SortPairs(this IEnumerable&lt;Pair&gt; data) =&gt; data.OrderBy(p =&gt; p.Key);
</code></pre>

<p>and then write</p>

<pre><code>.SortPairs()
</code></pre>

<p>when you could have just written</p>

<pre><code>.OrderBy(p =&gt; p.Key)
</code></pre>

<p>to begin with?</p>

<p>The only possible advantage of what you've done is that it's easier to read <code>.SortPairs()</code> than it is to read <code>.OrderBy(p =&gt; p.Key)</code>... but the thing is, it <strong><em>isn't</em></strong> easier to read <code>.SortPairs()</code> than it is to read <code>.OrderBy(p =&gt; p.Key)</code>. So you haven't gained anything. You've lost something, too: when I'm looking at the definition of <code>FizzBuzz</code>, now I have to go find the definition of <code>SortPairs</code> in order to see what it does.</p>

<p>Likewise, instead of defining <code>count.MakeIntArray()</code> as <code>Enumerable.Range(0, count)</code>, you could have just written <code>Enumerable.Range(0, count)</code> to begin with. Writing <code>count.MakeIntArray()</code> serves no purpose other than making me spend an extra 15 seconds in order to understand what this code does.</p>

<p>And likewise, instead of writing <code>data.IfThis(IsFizz, DoFizz)</code>, you could have just written <code>IsFizz(data) ? DoFizz(data) : data</code> to begin with. And so on and so forth and so on and so forth.</p>

<p>So, what's my advice to you?</p>

<p>Separating different pieces of logic into separate functions is a great idea... but only to a certain extent. The possible advantages of putting logic into a function include:</p>

<ul>
<li>The calling code may be easier to understand if it uses a function name than if it uses the logic directly. For example, it's easier to understand what <code>.OrderBy(p =&gt; p.Key)</code> does than to look at an entire sorting algorithm and understand what <em>it</em> does. (But it is <em>not</em> easier to understand what <code>.SortPairs()</code> does than to understand what <code>.OrderBy(p =&gt; p.Key)</code> does.)</li>
<li>The logic may be used in multiple places. If so, putting it in a function makes it so that you can change it everywhere by changing it just once. (But you're only using <code>.SortPairs()</code> in one place.)</li>
<li>You may want to pass the logic into a higher-order function. (But you're not doing that with <code>.SortPairs()</code>.)</li>
<li>Putting logic in a function may allow you to make your code easier to understand by putting that function in a more appropriate place. For example, if you have a form that needs to display sales tax, then putting the sales tax logic in a function would allow you to put that logic somewhere else besides the form class. (But you're not putting the definition of <code>.SortPairs()</code> in a more appropriate place.)</li>
<li>Putting logic in a function may make that logic reusable, as you mention yourself a few times. (But the functions you've written are never going to be useful for anything besides FizzBuzz, are they? Where's the reusability?)</li>
</ul>

<p>The cost of defining an additional function is small, but not zero. Make sure that you're getting a benefit from that costâ€”especially if you're paying that cost 24 times in a 33-line class. Each function definition took me about 15 seconds to follow, meaning that your code took me an extra 6 minutes to understand, for little if any benefit. </p>

<p>The bottom line: if you're not getting any benefits from defining a function, don't define a function!</p>
    </div>