<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>here are a few changes i would make. [<em>grin</em>] the ideas ...</p>
<ul>
<li>use <code>Get-Content</code> instead of <code>ReadLines()</code><br>
the speed difference is not large unless you are dealing with a very large number of files. go with the standard cmdlets unless there is a meaningful benefit from doing otherwise.</li>
<li>test to see if the file exists</li>
<li>build a <code>[PSCustomObject]</code> to hold the resulting items that you want</li>
<li>keep those PSCOs in a collection</li>
<li>view your hash failure items after the full test ends</li>
</ul>
<p>what it does ...</p>
<ul>
<li>sets the constants</li>
<li>builds a test file to work with<br>
remove the entire <code>#region/#endregion</code> block when you are ready to use your own data.</li>
<li>reads in the hash list file</li>
<li>iterates thru the resulting array</li>
<li>splits out the file name and hash value</li>
<li>builds the full file name to check</li>
<li>tests to see if that file exists</li>
<li>if YES, gets the file hash and saves it</li>
<li>if NO, sets the file hash $Var to <code>'__N/A__'</code></li>
<li>builds a PSCO with the properties that seem useful</li>
<li>sends that to the <code>$Result</code> collection</li>
<li>gets the hash failures from the collection and displays them<br>
if all you want it the count, wrap that all in <code>@()</code> and add <code>.Count</code> to the end.</li>
</ul>
<p>the code ...</p>
<pre><code>$SourceDir = $env:TEMP
$HashFileName = 'FileHashList.txt'
$FullHashFileName = Join-Path -Path $SourceDir -ChildPath $HashFileName

#region &gt;&gt;&gt; make a hash list to compare with
#    remove this entire "#region/#endregion" block when ready to work with your real data
$HashList = Get-ChildItem -LiteralPath $SourceDir -Filter '*.log' -File |
    ForEach-Object {
        '{0} {1}' -f $_.Name, (Get-FileHash -LiteralPath $_.FullName-Algorithm 'MD5').Hash
        }
# munge the 1st two hash values
$HashList[0] = $HashList[0] -replace '.{5}$', '--BAD'
$HashList[1] = $HashList[1] -replace '.{5}$', '--BAD'

$HashList |
    Set-Content -LiteralPath $FullHashFileName
#endregion &gt;&gt;&gt; make a hash list to compare with

$Result = foreach ($Line in (Get-Content -LiteralPath $FullHashFileName))
    {
    $TestFileName, $Hash = $Line.Split(' ')
    $FullTestFileName = Join-Path -Path $SourceDir -ChildPath $TestFileName
    if (Test-Path -LiteralPath $FullTestFileName)
        {
        $THash = (Get-FileHash -LiteralPath $FullTestFileName -Algorithm 'MD5').Hash
        }
        else
        {
        $THash = '__N/A__'
        }
    [PSCustomObject]@{
        FileName = $TestFileName
        CopyOK = $THash -eq $Hash
        OriHash = $Hash
        CopyHash = $THash
        }
    }

$Result.Where({$_.CopyOK -eq $False})
</code></pre>
<p>output [with the 1st two hash values deliberately munged] ...</p>
<pre><code>FileName                  CopyOK OriHash                          CopyHash                        
--------                  ------ -------                          --------                        
Genre-List_2020-07-07.log  False 7C0C605EA7561B7020CBDAE24D1--BAD 7C0C605EA7561B7020CBDAE24D140E40
Genre-List_2020-07-14.log  False 20F234ACE66B860821CF8F8BD5E--BAD 20F234ACE66B860821CF8F8BD5EC144D
</code></pre>
    </div>