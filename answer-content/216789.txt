<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There's a serious bug here:</p>

<pre><code>  uint32_t read_size;
  m_stream.read(reinterpret_cast&lt;char *&gt;(&amp;read_size), 4);
</code></pre>

<p>When this code is compiled for a target whose endianness matches the file endianness, I can imagine this working.  However, when the endianness is opposite, you'll have results that look very different to what's expected.</p>

<hr>

<p>Instead of specialising <code>std::iterator_traits</code>, it's usually much easier to just provide suitable member types and let the unspecialised template just do its thing:</p>

<pre><code>  class ChunkIt {
    using value_type = riffcpp::Chunk;
    using reference = value_type&amp;;
    using pointer = value_type*;
    using difference_type = std::ptrdiff_t;
    using iterator_category = std::input_iterator_tag;
    ...
  };
</code></pre>

<p>It's conventional to make the iterator an inner type <code>Chunk::iterator</code>.  It might be a good idea to include a <code>const_iterator</code> type, too.</p>

<hr>

<p>The code duplication in the iterator can be reduced.  For example, we should implement post-increment in terms of pre-increment and a temporary.</p>
    </div>