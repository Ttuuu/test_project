<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I have some suggestions for you.</p>
<h2>Extract some of the logic to methods.</h2>
<p>In your code, when the query is <code>insert</code> and <code>get</code>, you have two big blocks of code that are similar; you can extract to a method and reuse the method in both sections.</p>
<p>I suggest a method that returns a boolean based on the <code>if</code> condition, so you will be able to set the <code>currValue</code> and <code>currKey</code> variables to zero.</p>
<pre class="lang-java prettyprint-override"><code>
long hashMap(String[] queryType, int[][] query) {
   //[...]
   switch (currQuery) {
   //[...]
   case "insert":
      if (didWeCopiedValuesToMap(currKey, currValue, values)) {
         currValue = 0;
         currKey = 0;
      }
      values.put(query[i][0], query[i][1]);
      break;
      //[...]
   }
   //[...]
}


private boolean didWeCopiedValuesToMap(Integer currKey, Integer currValue, Map&lt;Integer, Integer&gt; values, HashMap&lt;Integer, Integer&gt; copiedValues) {
   if (currKey != 0 || currValue != 0) {
      Set&lt;Integer&gt; keys = values.keySet();
      for (Integer key : keys) {
         copiedValues.put(key + currKey, values.get(key) + currValue);
      }
      values.clear();
      values.putAll(copiedValues);

      return true;
   }

   return false;
}
</code></pre>
<p>Also, to check the current query <code>currQuery</code>, you can extract each of them in a method.</p>
<pre class="lang-java prettyprint-override"><code>private boolean isGet(String currQuery) {
   return "get".equals(currQuery);
}

private boolean isAddToKey(String currQuery) {
   return "addToKey".equals(currQuery);
}

private boolean isAddToValue(String currQuery) {
   return "addToValue".equals(currQuery);
}

private boolean isInsert(String currQuery) {
   return "insert".equals(currQuery);
}
</code></pre>
<h2>Always use the primitives when possible</h2>
<p>When you know that it's impossible to get a null value with the number, try to use the primitives; they take less memory and is faster than the wrapper class.</p>
<p><strong>Before</strong></p>
<pre class="lang-java prettyprint-override"><code>Integer currKey = 0;
Integer currValue = 0;
</code></pre>
<p><strong>After</strong></p>
<pre class="lang-java prettyprint-override"><code>int currKey = 0;
int currValue = 0;
</code></pre>
<h2>Try to put less code in <code>switch</code> blocks</h2>
<p>In my opinion, the code becomes less readable when there are more than 3 lines of codes in a switch block; I suggest that you convert it to a <code>is-else-if</code>. This conversion will make the code shorter and more readable.</p>
<p><strong>Before</strong></p>
<pre class="lang-java prettyprint-override"><code>switch (currQuery) {
case "insert":
   if (didWeCopiedValuesToMap(currKey, currValue, values)) {
      currValue = 0;
      currKey = 0;
   }
   values.put(query[i][0], query[i][1]);
   break;
case "addToValue":
   currValue += values.isEmpty() ? 0 : query[i][0];
   break;
case "addToKey":
   currKey += values.isEmpty() ? 0 : query[i][0];
   break;
case "get":
   if (didWeCopiedValuesToMap(currKey, currValue, values)) {
      currValue = 0;
      currKey = 0;
   }
   sum += values.get(query[i][0]);
}
</code></pre>
<p><strong>After</strong></p>
<pre class="lang-java prettyprint-override"><code>if ("insert".equals(currQuery)) {
   if (didWeCopiedValuesToMap(currKey, currValue, values)) {
      currValue = 0;
      currKey = 0;
   }
   values.put(query[i][0], query[i][1]);
} else if ("addToValue".equals(currQuery)) {
   currValue += values.isEmpty() ? 0 : query[i][0];
} else if ("addToKey".equals(currQuery)) {
   currKey += values.isEmpty() ? 0 : query[i][0];
} else if ("get".equals(currQuery)) {
   if (didWeCopiedValuesToMap(currKey, currValue, values)) {
      currValue = 0;
      currKey = 0;
   }
   sum += values.get(query[i][0]);
}
</code></pre>
<h1>Refactored code</h1>
<pre class="lang-java prettyprint-override"><code>    long hashMap(String[] queryType, int[][] query) {
        long sum = 0;
        int currKey = 0;
        int currValue = 0;

        Map&lt;Integer, Integer&gt; values = new HashMap&lt;&gt;();

        for (int i = 0; i &lt; queryType.length; i++) {
            String currQuery = queryType[i];
            if (isInsert(currQuery)) {
                if (didWeCopiedValuesToMap(currKey, currValue, values)) {
                    currValue = 0;
                    currKey = 0;
                }
                values.put(query[i][0], query[i][1]);
            } else if (isAddToValue(currQuery)) {
                currValue += values.isEmpty() ? 0 : query[i][0];
            } else if (isAddToKey(currQuery)) {
                currKey += values.isEmpty() ? 0 : query[i][0];
            } else if (isGet(currQuery)) {
                if (didWeCopiedValuesToMap(currKey, currValue, values)) {
                    currValue = 0;
                    currKey = 0;
                }
                sum += values.get(query[i][0]);
            }
        }

        return sum;
    }

    private boolean isGet(String currQuery) {
        return "get".equals(currQuery);
    }

    private boolean isAddToKey(String currQuery) {
        return "addToKey".equals(currQuery);
    }

    private boolean isAddToValue(String currQuery) {
        return "addToValue".equals(currQuery);
    }

    private boolean isInsert(String currQuery) {
        return "insert".equals(currQuery);
    }

    private boolean didWeCopiedValuesToMap(int currKey, int currValue, Map&lt;Integer, Integer&gt; values) {
        HashMap&lt;Integer, Integer&gt; copiedValues = new HashMap&lt;&gt;();

        if (currKey != 0 || currValue != 0) {
            Set&lt;Integer&gt; keys = values.keySet();

            for (Integer key : keys) {
                copiedValues.put(key + currKey, values.get(key) + currValue);
            }

            values.clear();
            values.putAll(copiedValues);

            return true;
        }

        return false;
    }

</code></pre>
    </div>