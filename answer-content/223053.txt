<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Instead of flattening arguments into the string <code>$Command</code>, I'd suggest leaving these arguments in <code>$@</code> by using <code>shift</code>:</p>

<pre><code>MaxMemory=$1; shift
MaxTime=$1; shift
# Command is now in $@
</code></pre>

<p>(Alternatively, read <code>$1</code> and <code>$2</code>, then <code>shift 2</code> for the same result.)</p>

<p>We can produce output using portable <code>printf</code> instead of non-portable <code>echo -e</code>; it's probably a good idea to send these log messages to standard error stream rather than mixing them in with the program's output:</p>

<pre><code>printf '%s = %s\n' &gt;&amp;2 \
       MaxMemory "$MaxMemory" \
       MaxTime "$MaxTime" \
       Command "$*"
</code></pre>

<p>We can now run the command very simply (with no breakage to quoted arguments):</p>

<pre><code>"$@" &amp;
</code></pre>

<p>Having done that, I recommend redirecting all of our subsequent output to avoid mixing it with the command's standard output stream:</p>

<pre><code>exec &gt;&amp;2
</code></pre>

<p>We can replace the last remaining Bashism by using plain <code>[</code> instead of <code>[[</code>:</p>

<pre><code>if [ -z "$mem" ]
then
    break
fi
</code></pre>

<p>or, more simply:</p>

<pre><code>[ "$mem" ] || break
</code></pre>

<p>Now we can run with lower overheads using <code>/bin/sh</code> instead of needing Bash.</p>

<hr>

<p>I do question the approach.  I think it's much simpler to use the existing <code>ulimit</code>, <code>timeout</code> and <code>time</code> utilities to achieve the same result:</p>

<pre><code>#!/bin/bash

set -eu

MaxMemory=$1; shift
MaxTime=$1; shift

printf '%s = %s\n' &gt;&amp;2 \
       MaxMemory "$MaxMemory" \
       MaxTime "$MaxTime" \
       Command "$*"

ulimit -v "$MaxMemory"
exec time -f 'MEM %M TIME %e' -- timeout "$MaxTime" "$@"
</code></pre>

<p>Although <code>ulimit -v</code> isn't specified in POSIX, it's accepted by many of the shells I tried, though not by Posh.  One limitation is that if <code>$MaxMemory</code> is too small for the shell, then it will fail before executing the command.  If we need to work with more shells or lower limits, then we could write a small wrapper program in C that calls <code>ulimit()</code> and <code>exec()</code>.</p>
    </div>