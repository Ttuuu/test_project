<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Overflow averted</h2>

<p>Performance of your algorithm is optimal since you iterate the input just once in <span class="math-container">\$O(n)\$</span> time complexity. There is a way to avoid the <code>checked</code> overflow guard. Noone forces you to use <code>int</code> to perform the arithmetic in the method body.</p>

<blockquote>
<pre><code>int carTravelingEast = 0, pairOfPassingCars = 0;
</code></pre>
</blockquote>

<p>Using <code>uint</code> with a max value of <span class="math-container">\$4,294,967,295\$</span> would never overflow, since:</p>

<ul>
<li><code>carTravelingEast</code> can never be more than <code>int</code>'s max value <span class="math-container">\$2,147,483,647\$</span> (because of the length of an array is capped)</li>
<li>the maximum value <span class="math-container">\$3,147,483,647\$</span>  as the sum of the custom threshold of one billion + int's max value could never exceed uint's max value (and we exit early on reaching one billion)</li>
</ul>

<h2>Code Conventions</h2>

<ul>
<li>Don't use UPPERCASE variable names for constants; use PascalCase instead.</li>
<li>Use white space according to <a href="https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/inside-a-program/coding-conventions" rel="nofollow noreferrer">Conventions</a>.

<ul>
<li><code>GetNumberOfPassingCars( int[] passingCars )</code> -&gt; <code>GetNumberOfPassingCars(int[] passingCars)</code></li>
<li><code>foreach( var passingCar in passingCars )</code> -&gt; <code>foreach (var passingCar in passingCars)</code></li>
</ul></li>
<li>Use plural name for a variable that represents multiple objects: <code>pairOfPassingCars</code> -&gt; <code>pairsOfPassingCars</code>.</li>
<li>Use a constant to avoid magic numbers; <code>const uint maxLimit = 1000000000;</code>.</li>
<li>Throw <code>ArgumentNullException</code> when mandatory arguments are null in public methods.</li>
</ul>

<hr>

<h2>Code Refactored</h2>

<pre><code>public static int GetNumberOfPassingCars(int[] passingCars)
{
    if (passingCars == null) throw new ArgumentNullException(nameof(passingCars));

    const int Overflow = -1;
    const int East = 0;
    const int West = 1;
    const uint maxLimit = 1000000000;
    uint carsTravelingEast = 0, pairsOfPassingCars = 0;

    foreach (var passingCar in passingCars)
    {
        if (passingCar == East)
        {
            ++carsTravelingEast;
        }
        else if (passingCar == West)
        { 
            pairsOfPassingCars += carsTravelingEast;
            if (pairsOfPassingCars &gt; maxLimit)
            {
                return Overflow;
            }
        }
    }

    return (int)pairsOfPassingCars;
}
</code></pre>
    </div>