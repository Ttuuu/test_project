<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This is very interesting. I love it. Good work.</p>

<hr>

<p><strong>Critcism:</strong></p>

<blockquote>
<pre><code>   with sr.Microphone() as sauce:
</code></pre>
</blockquote>

<p><a href="https://i.stack.imgur.com/1Um7G.jpg" rel="noreferrer"><img src="https://i.stack.imgur.com/1Um7G.jpg" alt="Sauce"></a></p>

<p><sub><strong>From</strong> <a href="https://pixabay.com/photos/tomato-soup-tomato-soup-sauce-482403/" rel="noreferrer">https://pixabay.com/photos/tomato-soup-tomato-soup-sauce-482403/</a></sub></p>

<ul>
<li>Sauce is what you add to pasta. Microphone is a <code>source</code>.</li>
</ul>

<blockquote>
<pre><code>def exe(command):
    duckurl = "https://www.duckduckgo.com/?q="
</code></pre>
</blockquote>

<ul>
<li>This function is too long and should be shortened.</li>
<li>We can use a dictionary of commands and callables. (Callables are functions, lambdas, classes, objects with <code>__call__</code> implementation, ...)</li>
<li>If <code>play directory</code> is different you can either iterate the dictionary (In that case you might as well use a <code>list</code>) or handle it as a special case.</li>
</ul>

<blockquote>
<pre><code># speech recognition
def listening():
</code></pre>
</blockquote>

<ul>
<li>Why not just rename to <code>recognize_speech</code>? </li>
</ul>

<blockquote>
<pre><code>from time import sleep
</code></pre>
</blockquote>

<ul>
<li>Delete this. Is this used?</li>
</ul>

<blockquote>
<pre><code># defining functions that are used 
</code></pre>
</blockquote>

<ul>
<li>This comment is not needed.</li>
</ul>

<blockquote>
<pre><code>r = sr.Recognizer()
</code></pre>
</blockquote>

<ul>
<li>Can we rename this to <code>RECOGNIZER</code> or something meaningful.</li>
</ul>

<blockquote>
<pre><code>def find_path(file):
    for path, dirs, files in os.walk(os.getcwd()):
            for f in files:
       # ^^^^^^
       # over indent  
</code></pre>
</blockquote>

<ul>
<li>Nested <code>for</code> is over-indented. (This might also be an error of copying to code-review, so check this too)</li>
</ul>

<blockquote>
<pre><code>current_files, current_dirs, current_subs = reload_files()
r = sr.Recognizer()
with open("websites.json") as websites_json:
    websites = json.load(websites_json)
</code></pre>
</blockquote>

<ul>
<li>I think it is better to move the constants to the top of the file, so we know where they come from. I would also recommend making them <code>SCREAMING_SNAKE_CASE</code> to highlight they are constants. </li>
<li>Small caveat: you might need to add <code>reload_files</code> to top of the file before calling it or import it.</li>
</ul>

<blockquote>
<pre><code>while True:
    listening()
</code></pre>
</blockquote>

<ul>
<li>It would be better to use <code>if __name__ == "__main__"</code> idiom. This way you can use this code as a module as well.</li>
<li>You can also catch keyboard inturrupt and exit gracefully.</li>
</ul>

<hr>

<p><strong>Ideas/Feature Requests:</strong></p>

<p>These are improvements that I think you can add to your code.</p>

<ul>
<li><code>print('Could not find directory "{}"!'.format(directory))</code> - replace print with speech.</li>
<li>create a help command.</li>
</ul>
    </div>