<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Are you sure that solution is correct? By your description of the problem, I would have expected the result for an input <code>[1, 6, 4, 7, 6, 6, 5]</code> to be <code>3</code>, but your solution produces <code>5</code>.</p>

<p>Your solution is interesting -- that drew me to this question. I find that code looking at adjacent elements when iterating and accumulating an optimal value is a code smell in algorithms. It typically makes a solution significantly more difficult to read and debug. Usually, you should only look at as few values in each iteration as possible -- and I believe it's sufficient to look only at the current value <em>whilst keeping the previous handy</em>.</p>

<pre><code>        if array[i-1] &lt; array[i] and array[i] &gt; array[i+1]:
</code></pre>

<p>This confers the additional benefit of removing the random access requirement for the input; that is, removing the <code>__getitem__</code> dependency (<code>array[i]</code> is actioned as <code>type( array ).__getitem__( array, i )</code>). Whilst you've indicated that the input should be an array by the parameter name, one of Python's strengths is its duck-typing. There's no fundamental reason why the algorithm could not, or should not, apply more generically to any <code>Iterable[int]</code>. My solutions below will additionally work with input (contrived, I grant you) <code>( x for x in ( 0, 1, 0 ) )</code>. If your minimum Python version requirement is sufficiently high, I would personally add a type hint to the argument, but that's usually deemed overkill.</p>

<pre><code>            if len(array) == 3:  # special case
                return 3
</code></pre>

<p>A special case that isn't an edge-value of a data-type (e.g. <code>0</code> for an unsigned integer) is an immediate code smell.</p>

<pre><code>    for i in range(1, len(array) - 1):
</code></pre>

<p>Skipping the end (and usually the start) of a sequence in an accumulation/optimisation problem is a smell. Avoid if possible.</p>

<p>The problem can be modeled by a state-machine. On each iteration of the array elements, you begin in one of four states: starting, floor, climbing, descending. You begin in the starting state and once the first element is seen immediately transition to floor. The floor represents a state in which you're neither climbing nor descending. This occurs when you've reached some plateau and haven't climbed out of it. The climbing state is self-descriptive. You begin descending once you have passed a peak having made a climb. The longest seen peak can only end whilst in a descending state. You seemed in your solution to try and defer the recalculations of the longest seen peak until you've left the peak. This isn't necessary -- if you descend further downwards, you can always carry on increasing the value of the longest seen peak.</p>

<p>Here is a descriptive algorithm:</p>

<pre><code>import enum

class TrekState( enum.Enum ):
    Begin   = 0
    Floor   = 1
    Climb   = 2
    Descend = 3

class Trek:
    def __init__( self ):
        self.state = TrekState.Begin
        self.counter = 0
        self.longest = 0

    def advance( self, i ):
        # update new state of our trek
        if self.state == TrekState.Begin:
            self.state = TrekState.Floor
            self.counter = 1
        else:
            previous = self.previous

            if self.state == TrekState.Floor:
                if previous &lt; i:
                    self.state = TrekState.Climb
                    self.counter += 1
            elif self.state == TrekState.Climb:
                if previous &lt; i:
                    self.counter += 1
                elif previous &gt; i:
                    self.state = TrekState.Descend
                    self.counter += 1
                else: # previous == i
                    self.state = TrekState.Floor
                    self.counter = 1
            elif self.state == TrekState.Descend:
                if previous &lt; i:
                    self.state = TrekState.Climb
                    self.counter = 2
                elif previous &gt; i:
                    self.counter += 1
                else: # previous == i
                    self.state = TrekState.Floor
                    self.counter = 1 

        # update longest and previous
        if self.state == TrekState.Descend:
            self.longest = max( self.counter, self.longest )
        self.previous = i 

def updatedLongestPeak( seq ):
    trek = Trek()
    for i in seq:
        trek.advance( i ) 
    return trek.longest
</code></pre>

<p>. A more concise version of the above, replacing object constructs with a more unstructured style, and some manual optimisations:</p>

<pre><code>def verboseLongestPeak( seq ):
    state = counter = longest = 0

    for i in seq:
        counter += 1
        if state == 0:
            state = 1
        elif state == 1:
            if previous &lt; i:
                state = counter = 2
        elif state == 2:
            if previous &gt; i:
                state = 3
            elif previous == i:
                state = 1
        elif state == 3:
            if previous &lt; i:
                state = counter = 2
            elif previous == i:
                state = 1

        if state == 3:
            longest = max( counter, longest )
        previous = i

    return longest
</code></pre>

<p>. If you were to go for a solution of the latter's style, it would be essential to provide comments on the meaning of each state value.</p>

<p>Neither solution is verified to be correct.</p>
    </div>