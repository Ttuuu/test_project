<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I like how you've reduced all of the words to lists, that's the right start. </p>

<p>Let's get into it: </p>

<pre><code>  for(let i = 0; tempNum; i++){
</code></pre>

<p>I have no idea what you've doing here, I assume when <code>tempNum===0</code> then the loop stops? </p>

<p>Don't do this, it's confusing as hell.</p>

<p>I'm going to suggest that you rewrite the entire thing as a recursive function or a reducing function, but if you insist on using a loop, then just make it a <code>while(true)</code> loop and add a return or a break statement to it to exit it. </p>

<p>You have a lot of branching logic: </p>

<pre><code>  for(let i = 0; tempNum; i++){
    if(hundreds){
      if(i){
      }
      if(tens){
        if(wordsForConstruction.hasOwnProperty(tens)){

        }else{
          if(ones){
          }
        }
      }

      if(hundreds){
      }
    }
  }
</code></pre>

<p>The term to think about here is <a href="https://en.wikipedia.org/wiki/Cyclomatic_complexity" rel="nofollow noreferrer">cyclomatic complexity</a> keeping track of which branch the code is currently in involves holding a lot of information in your head, and then you have to run through it again for the next number etc. If you code is looking like a lot of these nested if statements, that's a code smell, and you should be doing something else. </p>

<p>The real issue you have, is that you are manually writing the code to do the 'detect how many hundreds, thousands, millions', instead you you could abstract this to a map. </p>

<p>What I would do is: </p>

<pre><code>const powerMap = {
  "million": 1000000, 
  "thousand": 1000, 
  "hundred" : 100,  
  "rest": 1, 
}; //And ofcourse you can extend this to billions, trillions, etc. 
</code></pre>

<p>And then you can create a general abstraction to to count how many of each there are: </p>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>const powerMap = {
  "million": 1000000, 
  "thousand": 1000, 
  "hundred" : 100,  
  "rest": 1, 
}; //And ofcourse you can extend this to billions, trillions, etc. 


function getUnitCounts(value) {
    const data = Object.entries(powerMap).reduce(({value, result}, [unitName, power]) =&gt; {
        const nCount = Math.floor(value/power); 
        const nRemainder = value%power; 
        
        return {
            value: nRemainder, 
            result: {
                ...result, 
                [unitName]: nCount
            }
        }           
    
    }, {
         value, 
         result: {}
    }); 
    
    return data.result;        
    
}


console.log(getUnitCounts(20020000)); 
console.log(getUnitCounts(1100)); 
console.log(getUnitCounts(201110)); </code></pre>
</div>
</div>


<p>Now - if you're not familar with spread syntax and Array.reduce this might seem confusing. But notice how I don't use a single <code>if</code> statement - all I'm doing is looping over a list and returning an accumulator. Once you've familiar with the odd syntax, this is easier to keep in your head. </p>

<p>From the answer I've given here, it would now be a matter of converting the count of each unit into the words, and then also applying the words for 0-100 like you have. </p>
    </div>