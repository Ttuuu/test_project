<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Errors and Omissions</h2>

<p>The <code>UBound2</code> function is simply incorrect. You are operating on the assumption that every array is base zero with positive indexing...</p>

<pre><code>Private Sub ExampleOne()
    Dim bar() As Long
    ReDim bar(-10 To -5)

    Dim idx As Long
    For idx = LBound(bar) To UBound(bar)
        Debug.Print idx
    Next
End Sub
</code></pre>

<p>...that negative one is a good way to signal an "error with UBound"...</p>

<pre><code>'This is a *super* common idiom for getting an "uninitialized" dynamic array.
Private Sub ExampleTwo()
    Dim foo() As String
    foo = Split(vbNullString)
    Debug.Print LBound(foo), UBound(foo)
End Sub
</code></pre>

<p>...and all this wrongness spills over into the main body of your code (my comment):</p>

<blockquote>
<pre><code>For j = 0 To u1 '&lt;-- subscript out of range waiting to happen
    If Not (argControl.Column(argColumn(j), i) Like argValue(j)) Then
        b = False
    End If
Next
</code></pre>
</blockquote>

<p>As to the <em>purpose</em> of the function, that's also unclear. If it's intended to be used as a guard clause against uninitialized dynamic arrays, the only reliable way to do that is to tear the containing <code>VARIANT</code> structure apart and check to see if its data area contains a pointer. For an example of how to do that, you can look at <a href="https://stackoverflow.com/a/30249386/4088852">this SO answer</a>. The <code>GetBaseAddress</code> function will return zero if the array you pass it is uninitialized. </p>

<hr>

<p>Your check to see if a <code>Variant</code> is an array is also wrong:</p>

<blockquote>
<pre><code>If VarType(argValue) &gt;= vbArray
</code></pre>
</blockquote>

<p>The <code>VarType</code> function simply returns the <a href="https://msdn.microsoft.com/en-us/library/cc237865.aspx" rel="nofollow noreferrer">VT_TYPE</a> of the <code>Variant</code> (or expression) that it is passed, and VT_ARRAY is a <em>flag</em>. Your test would return true for an argument that has the VT_BYREF flag set, regardless of whether the VT_ARRAY flag (AKA <code>vbArray</code>) is set. If you really want to use the <code>VarType</code> function to determine if something is an array, you need to test for the flag:</p>

<pre><code>If (VarType(argValue) And vbArray) = vbArray
</code></pre>

<p>But there really isn't much point to that, because the built in <code>IsArray</code> function does exactly that:</p>

<pre><code>If IsArray(argValue)
</code></pre>

<p>Note also that <code>&gt;= vbArray</code> is superfluous. A <code>Variant</code> with <em>only</em> the <code>vbArray</code> flag set is not a valid <code>Variant</code>. It will always have another flag set, so it will never be equal.</p>

<hr>

<p>Unless I'm completely missing something, you're using the <code>Like</code> operator as a performance sucking, unclear alternative to <code>=</code> when you do this:</p>

<blockquote>
<pre><code>If Not (argControl.Column(argColumn(j), i) Like argValue(j)) Then
</code></pre>
</blockquote>

<p><code>Like</code> without wild-cards is <em>not</em> a shortcut for "contains". Unless you've already built the expression inside of the <code>argValue</code> element, that test is exactly the same as this much clearer test:</p>

<pre><code>If argControl.Column(argColumn(j), i) &lt;&gt; argValue(j) Then
</code></pre>

<hr>

<p>Your function signature is misleading for <code>checklist2</code> (line break added for clarity):</p>

<blockquote>
<pre><code>Public Function checklist2(ByVal argValue As Variant, ByRef argControl As Control, _
                           Optional ByVal argColumn As Variant = 0) As Boolean
</code></pre>
</blockquote>

<p>First, <code>argColumn</code> is <code>Optional</code> in the signature, but it sure isn't optional here:</p>

<blockquote>
<pre><code>If VarType(argValue) &gt;= vbArray And VarType(argColumn) &gt;= vbArray Then
</code></pre>
</blockquote>

<p>On top of that, the default value doesn't make any sense. If it <em>has to</em> be an array if supplied, then it can't have a default value, simple as that. Default values must be intrinsic types. If it made sense in the context of the function for it to <em>be</em> <code>Optional</code>, it should not have a default. You would then test to see if it was supplied with the <code>IsMissing</code> function:</p>

<pre><code>If IsMissing(argColumn) Then
    'do whatever you need to do to establish a "default" value.
</code></pre>

<hr>

<h2>Organization and Flow Control</h2>

<p><code>If</code> statements without an <code>Else</code> block should probably be inverted a couple places in your code. For example...</p>

<blockquote>
<pre><code> If argControl.ControlType = acComboBox Or argControl.ControlType = acListBox Then
     '...the rest of the function...
 End If
</code></pre>
</blockquote>

<p>...would be better as this:</p>

<pre><code>If argControl.ControlType &lt;&gt; acComboBox And argControl.ControlType &lt;&gt; acListBox Then
    Exit Function
End If
</code></pre>

<p>Otherwise you tend to end up with <a href="https://blog.codinghorror.com/flattening-arrow-code/" rel="nofollow noreferrer">arrow code</a>, and I do have to say that looking at <code>checklist2</code> makes me want to turn my head to the right.</p>

<hr>

<p>The assignment of <code>checklist2 = False</code> at the bottom of the function is completely unnecessary, and it makes you use <code>Exit Function</code> all over the place to avoid falling through <em>the default return value</em>.  Just let the function exit - if it hasn't been set to <code>True</code> then ...wait for it... it's <code>False</code>.</p>

<hr>

<p>Speaking of <code>Exit Function</code>, you have exactly <em>7 exit points</em> in the <code>checklist2</code> function. That makes it scream "REFACTOR ME". A good place to start would be to extract functions from duplicated code like this:</p>

<blockquote>
<pre><code>For i = start To argControl.ListCount - 1
    b = True
    For j = 0 To u2
        If Not (argControl.Column(argColumn(j), i) Like argValue(j)) Then
            b = False
        End If
    Next
    If b Then
        checklist2 = True
        Exit Function
    End If
Next
</code></pre>
</blockquote>

<p>That is easily extracted to something like this...</p>

<pre><code>Private Function ListElementsMatchArray(ByVal listControl As Control, ByVal testArray As Variant, _
                                        ByVal columnArray As Variant, ByVal bound As Long) As Boolean
    With listControl
        Dim outer As Long
        For outer = IIf(.ColumnHeads, 1, 0) To .ListCount - 1
            Dim inner As Long
            For inner = 0 To bound      '&lt;-- note that the LBound here is still wrong.
                If Not (.Column(columnArray(inner), outer) Like testArray(inner)) Then
                    Exit Function
                End If
            Next
        Next
    End With
    ListElementsMatchArray = True
End Function
</code></pre>

<p>...and called like so:</p>

<pre><code>If u1 = u2 Then
    checklist2 = ListElementsMatchArray(argControl, argColumn, argValue, u1)
ElseIf '...
</code></pre>

<hr>

<p>This section of code at the end is kind of tortured:</p>

<blockquote>
<pre><code>Error_Exit:
    Exit Function
Error_Handler:
    StandardErrorBox "checklist2", Err
    checklist2 = False
    Resume Error_Exit
End Function
</code></pre>
</blockquote>

<p>Let's assume for the sake of argument that you wind up in your error handler. You display the message box, set the return value to the only value can be in the error handler (pro-tip, you <em>always</em> exit early in you set <code>checklist2 = True</code> - see above), then jump 5 lines above and ... <code>Exit Function</code>.  Huh?  The entire error handler can be re-written as this:</p>

<pre><code>    Exit Function
Error_Handler:
    StandardErrorBox "checklist2", Err
End Function
</code></pre>

<hr>

<h2>Nits and Picks</h2>

<p>This line is cringe-worthy difficult to read:</p>

<blockquote>
<pre><code>If Not BasicInclude.DebugMode Then On Error GoTo Error_Handler Else On Error GoTo 0
</code></pre>
</blockquote>

<p>First, <code>On Error GoTo 0</code> is what you get by default, so there's no point in executing the <code>Else</code> clause at all. Second, this strikes me as something that would be better as a pre-compiler directive. If you want the one-liner, just do this:</p>

<pre><code>If Not BasicInclude.DebugMode Then On Error GoTo Error_Handler
</code></pre>

<p>The expanded version is much more readable though:</p>

<pre><code>If Not BasicInclude.DebugMode Then
    On Error GoTo Error_Handler
End If
</code></pre>

<hr>

<p>You don't need to "pass" <code>Err</code> around as an <code>ErrObject</code>. There is only one, and <code>Err</code> isn't even an object. It's a function that <em>returns</em> the only <code>ErrObject</code>. This leads you to alias it as the much less descriptive <code>e</code> in your <code>StandardErrorBox</code> procedure.</p>

<hr>

<p>You shouldn't add bit flags together (or use any other non-bitwise operations on them). Combine them instead. This...</p>

<blockquote>
<pre><code>MsgBox msg, vbOKOnly + vbCritical, "An Error has Occured!"
</code></pre>
</blockquote>

<p>...should be this:</p>

<pre><code>MsgBox msg, vbOKOnly Or vbCritical, "An Error has Occured!"
</code></pre>

<hr>

<p>This is already much longer than I intended, so I'll buzzword the rest and leave them to other reviewers:</p>

<ul>
<li>Use meaningful names.</li>
<li>Declare variables close to use.</li>
<li>Use <code>vbNullString</code>.</li>
<li>Pass <code>ByVal</code> unless you're changing the argument.</li>
</ul>
    </div>