<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<p>On the continuum of good or bad, where do you think my code lies?</p>
</blockquote>
<p>The Eight Queens puzzle is already some advanced programming and if we consider that you just started programming ~6 months ago it is great that you came up with a working solution.</p>
<p>I think it is a clever approach to store the valid and invalid position in a set which is an efficient way for look up.</p>
<p>However, there is of course room for some improvements.</p>
<blockquote>
<p>What are one or two things I should be working on or focusing on becoming more familiar with?</p>
</blockquote>
<p>I think you should focus on object oriented design as you basically just have one class which does everything and is quite hard to understand and change.</p>
<p>So good candidates to extract into classes are methods with the same parameters and / or body. If we look at your code, all the <code>_diagonal</code> methods are good candidates.</p>
<h1>Diagonal</h1>
<pre class="lang-rb prettyprint-override"><code>class Diagonal
  def initialize(position, size, delta)
    @row, @column = position
    @row_delta, @column_delta = delta
    @size = size
  end

  def all
    [].tap do |result|
      result &lt;&lt; update_position until border_reached?
    end
  end

  def self.for(position, size)
    Diagonal.new(position, size, [-1, -1]).all +
      Diagonal.new(position, size, [1, 1]).all +
      Diagonal.new(position, size, [-1, 1]).all +
      Diagonal.new(position, size, [1, -1]).all
  end

  private

  attr_reader :row, :column, :row_delta, :column_delta, :size

  def update_position
    [
      update_row,
      update_column
    ]
  end

  def update_row
    @row += row_delta
  end

  def update_column
    @column += column_delta
  end

  def border_reached?
    row.zero? ||
      column.zero? ||
      row == size ||
      column == size
  end
end
</code></pre>
<p>So we now DRYed this up a little bit and reuse the <code>Diagonal</code> class and just pass in the different deltas depending if it's upper right/left or lower right/left. Note that the abort function <code>border_reached?</code> is basically the same for all diagonals too.</p>
<p>We can use this class now with <code>Diagonal.for([1,1], 8).any?</code> to get all diagonals for position 1,1 in a 8 sized grid.</p>
<h1>GridPrinter</h1>
<p>We could also extract the grid printing like this</p>
<pre class="lang-rb prettyprint-override"><code>class ConsolePrinter
  def initialize(grid)
    @grid = grid
  end

  def print
    grid.each do |row|
      puts row.join(' ')
    end
  end

  private

  attr_reader :grid
end
</code></pre>
<p>You might wonder why we want to extract only 3 lines of code but it makes the code a lot more extensible. For instance, if we want to reuse your code on a website, we can implement a <code>HtmlPrinter</code> which just prints the grid as HTML code.</p>
<h2>Move</h2>
<p>We can now also extract a <code>Move</code> or <code>ValidMove</code> class. Something like this</p>
<pre class="lang-rb prettyprint-override"><code>class Move
  def initialize(position, grid)
    @row, @column = position
    @grid = grid
  end

  def valid?
    !invalid?
  end

  def invalid?
    queen_in_col? || queen_in_row? || queen_in_diagonal?
  end

  private

  attr_reader :row, :column, :grid

  def size
    grid.length - 1
  end

  def queen_in_row?
    grid[row].any? { |pos| pos == 'Q' }
  end

  def queen_in_col?
    transposed = grid.transpose
    transposed[column].any? { |pos| pos == 'Q' }
  end

  def queen_in_diagonal?
    Diagonal.for([row, column], size).any? { |pos| queen?(pos) }
  end

  def queen?(pos)
    row, col = pos
    grid[row][col] == 'Q'
  end
end
</code></pre>
<h1>Grid</h1>
<p>And finally a <code>Grid</code> class.</p>
<pre class="lang-rb prettyprint-override"><code>class Grid
  def initialize(n, printer = GridPrinter)
    @printer = printer
    @store = Array.new(n) { Array.new(n, '_') }
  end

  def place_queen(row, column)
    return false if store[row][column] == 'Q' || Move.new([row, column], store).invalid?

    store[row][column] = 'Q'
    true
  end

  def length
    store.length
  end

  def full_grid_count
    store.flatten.count
  end

  def print
    printer.new(store).print
  end

  private

  attr_reader :store, :printer
end
</code></pre>
<p>Notice that we moved the <code>place_queen</code> method in the <code>Grid</code> class and also moved the 'validation' there. This is called <a href="https://martinfowler.com/bliki/TellDontAsk.html" rel="nofollow noreferrer">tell, don't ask</a> and instead checking if the move is valid and then placing the queen we now just say, place the queen and let us know if it worked. This simplifies our code in the <code>EightQueens</code> class.</p>
<pre class="lang-rb prettyprint-override"><code>class EightQueens
  def initialize(n)
    @grid = Grid.new(n)
    @invalid_pos = Set.new
    @queen_pos = Set.new
  end

  def solve
    until queen_pos.size == grid.length
      place_queen
      reset
    end

    puts 'Eight Queens puzzle solved, observe board.'
    grid.print

    true
  end

  private

  attr_reader :invalid_pos, :queen_pos, :grid

  def place_queen
    random_pos = pick_random_pos

    if grid.place_queen(*pick_random_pos)
      queen_pos &lt;&lt; random_pos
    else
      invalid_pos &lt;&lt; random_pos
    end
  end

  def pick_random_pos
    idx1 = rand(0...grid.length)
    idx2 = rand(0...grid.length)

    [idx1, idx2]
  end

  def reset
    return unless invalid_pos.length == grid.full_grid_count - grid.length

    @grid = Grid.new(grid.length)
    @invalid_pos = Set.new
    @queen_pos = Set.new
  end
end
</code></pre>
<h1>Corner cases</h1>
<p>It's not working for grids smaller 3 and just ends up in a infinite loop. You might want to have a look at these cases when no solution exists.</p>
<p>This is mostly focused on object oriented design (and by no means a perfect solution either). There might be ways to make this more efficient too but often readable and maintainable code if preferred over efficiency.</p>
<p>Some books about object oriented design in Ruby I can highly recommend are</p>
<ul>
<li><a href="https://www.poodr.com/" rel="nofollow noreferrer">https://www.poodr.com/</a></li>
<li><a href="https://martinfowler.com/books/refactoringRubyEd.html" rel="nofollow noreferrer">https://martinfowler.com/books/refactoringRubyEd.html</a></li>
</ul>
<h2>Edit:</h2>
<p>In your solution you also use some sort of brute forcing (pick a random queen position until you have a valid solution, if no valid solution is possible reset grid). This is a simple solution! However, try to solve a 32 grid and it will take 'forever'. With your updated solution you can now easily implement new algorithms to solve the problem as you can reuse <code>Grid</code> and <code>Move</code> and we just need to implement a new <code>EightQueens</code> class (and maybe rename the old one to e.g. <code>RandomEighQueensSolver</code>. A better algorithm you might want to try to implement is called backtracking (<a href="https://en.wikipedia.org/wiki/Backtracking" rel="nofollow noreferrer">https://en.wikipedia.org/wiki/Backtracking</a>).</p>
<h2>Edit2:</h2>
<p>As discussed in the comments, my assumption to merge the abortion condition in diagonal together does not work.</p>
<pre class="lang-rb prettyprint-override"><code>class Diagonal
  def initialize(position:, delta:, to:)
    @row, @column = position
    @row_delta, @column_delta = delta
    @to_row, @to_column = to
  end

  def all
    [].tap do |result|
      result &lt;&lt; update_position until border_reached?
    end
  end

  def self.for(position, size)
    Diagonal.new(position: position, delta: [-1, -1], to: [0, 0]).all +
      Diagonal.new(position: position, delta: [1, 1], to: [size, size]).all +
      Diagonal.new(position: position, delta: [-1, 1], to: [0, size]).all +
      Diagonal.new(position: position, delta: [1, -1], to: [size, 0]).all
  end

  private

  attr_reader :row, :column, :row_delta, :column_delta, :to_row, :to_column

  def update_position
    [
      update_row,
      update_column
    ]
  end

  def update_row
    @row += row_delta
  end

  def update_column
    @column += column_delta
  end

  def border_reached?
    row == to_row ||
      column == to_column
  end
end
</code></pre>
<p>See also a working example here <a href="https://github.com/ChrisBr/queen-puzzle" rel="nofollow noreferrer">https://github.com/ChrisBr/queen-puzzle</a>.</p>
    </div>