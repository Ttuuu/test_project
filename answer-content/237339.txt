<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The main validation logic doesn't need "min node" and "max node",
only the values.
Passing the nodes as parameters adds complexity,
because you have to handle <code>null</code> values,
which would not be the case with simple integers.
Being an unnecessary complexity (since nodes are not really needed),
I suggest to eliminate it, for example:</p>

<pre><code>public static bool IsValid(TreeNode root)
{
    if (root == null)
    {
        return true;
    }

    return IsValid(root.left, long.MinValue, root.val)
        &amp;&amp; IsValid(root.right, root.val, long.MaxValue);
}

private static bool IsValid(TreeNode node, long minVal, long maxVal)
{
    if (node == null)
    {
        return true;
    }

    if (node.val &lt;= minVal || maxVal &lt;= node.val)
    {
        return false;
    }

    return IsValid(node.left, minVal, node.val)
        &amp;&amp; IsValid(node.right, node.val, maxVal);
}
</code></pre>

<p>Notice that I renamed the variable in the second method from <code>root</code> to <code>node</code>,
since in this method the node is never the root.
I would do the same in the original code,
even though there it's sometimes really the <code>root</code>,
but since that won't be the average case,
I think that not calling it root may eliminate some confusion.</p>

<p>Lastly, making the helper method use <code>long</code> is necessary to support the (perhaps a bit naughty) input:</p>

<pre><code>[-2147483648,null,2147483647]
</code></pre>
    </div>