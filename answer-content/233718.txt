<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I see some things that I think could help you improve your code.</p>

<h2>Decompose your program into functions</h2>

<p>All of the logic here is in <code>main</code> in one rather long and dense chunk of code.  It would be better to decompose this into separate functions.</p>

<h2>Check return values for errors</h2>

<p>The call to <code>scanf</code> can fail.  You must check the return values to make sure they haven't or your program may crash (or worse) when given malformed input or due to low system resources.  Rigorous error handling is the difference between mostly working versus bug-free software.  You should strive for the latter.</p>

<h2>Use more whitespace to enhance readability of the code</h2>

<p>Instead of crowding things together like this:</p>

<pre><code>for (i=0;i&lt;n;i++)
</code></pre>

<p>most people find it more easily readable if you use more space:</p>

<pre><code>for (i=0; i &lt; n; i++)
</code></pre>

<h2>Eliminate "magic numbers"</h2>

<p>Instead of hard-coding the constants 26 and 4 in the code, it would be better to use a <code>#define</code> or <code>const</code> and name them.</p>

<h2>Avoid <code>scanf</code> if you can</h2>

<p>There are so many <a href="http://stackoverflow.com/questions/2430303/disadvantages-of-scanf">well known problems with <code>scanf</code></a> that you're usually better off avoiding it. </p>

<h2>Don't recursively call <code>main</code></h2>

<p>The <code>main()</code> function can be called recursively in C, but it's a bad idea.  You could blow up your stack and there's really no good reason to do that here.  Just use a loop. See <a href="https://stackoverflow.com/questions/4238179/calling-main-in-main-in-c">https://stackoverflow.com/questions/4238179/calling-main-in-main-in-c</a> for details.</p>

<h2>Use a better random number generator</h2>

<p>You are currently using </p>

<pre><code>password[i] = numbers[rand() % 10];
</code></pre>

<p>There are a number of problems with this approach. This will generate lower numbers more often than higher ones -- it's not a uniform distribution.  Another problem is that the low order bits of the random number generator are not particularly random, so neither is the result.  On my machine, there's a slight but measurable bias toward 0 with that.  See <a href="http://stackoverflow.com/questions/2999075/generate-a-random-number-within-range/2999130#2999130">this answer</a> for details, but I'd recommend changing that to the <code>rand_lim</code> in that link and also duplicated below.</p>

<h2>Results</h2>

<p>Here's an alternative that uses all of these ideas.  It also gets a length from the command line so there's no need for a prompt or <code>scanf</code>.  It eliminates the need for counting characters and uses the better random number generator mentioned above:</p>

<pre><code>#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;time.h&gt;
#include &lt;string.h&gt;

int rand_lim(int limit) {
/* return a random number between 0 and limit inclusive.
 */

    int divisor = RAND_MAX/(limit+1);
    int retval;

    do { 
        retval = rand() / divisor;
    } while (retval &gt; limit);

    return retval;
}

char picker(const char *charset) {
    return charset[rand_lim(strlen(charset)-1)];
}

int main(int argc, char *argv[])
{
    if (argc != 2) {
        puts("Usage: pwgen len");
        return 1;
    }
    int len = atoi(argv[1]);
    if (len &lt;= 0) {
       puts("Length must be a positive non-zero integer"); 
       return 2;
    }
    const char* groups[] = {
        "1234567890",  // numbers
        "abcdefghijklmnoqprstuvwyzx",  // lowercase
        "ABCDEFGHIJKLMNOQPRSTUYWVZX",  // uppercase
        "!@#$%^&amp;*(){}[]:&lt;&gt;?,./",    // symbols
    };
    const size_t numGroups = sizeof(groups)/sizeof(groups[0]);
    srand((unsigned int)(time(NULL)));

    // only proceed if we got a number
    for ( ; len; --len) {
        unsigned group = rand_lim(numGroups-1);
        putchar(picker(groups[group]));
    }
    putchar('\n');
}
</code></pre>
    </div>