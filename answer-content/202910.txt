<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This is not so much of a code review question as it is an algorithm review question. </p>

<p>You are calling <code>dig_sum()</code> way too much.  You want pairs of primes, which summed together are not a multiple of 3: <code>p1 + p2 != 3n</code>.   If <code>p1 % 3 == 1</code> and <code>p2 % 3 == 2</code>, then these primes must not be paired together.  This implies you can partition <code>Primes</code> into two sets: <code>P1</code> and <code>P2</code>.</p>

<pre><code>P1 = [ p for p in Primes if p % 3 != 2]
P2 = [ p for p in Primes if p % 3 != 1]
</code></pre>

<p>Note that <code>3</code> is actually part of both sets. </p>

<p>You can then solve the problem using primes from one set, then the other, and choose the lowest sum.</p>

<p>This gives 2 speed ups:</p>

<ol>
<li>Half of the pairs are never considered, being from opposite sets. </li>
<li><code>dig_sum()</code> need never be called, since the pairs will never equal 3. </li>
</ol>

<hr>

<p>Your <code>prime(N)</code> function can be sped up.   You are testing for prime by testing for divisibility by all values from <code>2</code> to <code>sqrt(N)</code>.  You only need to test for divisibility by prime numbers in that range ... and you have a list of <code>Primes</code>.  Of course building the list of prime numbers using the <code>prime(N)</code> function, while using that list of prime numbers in that function is a bit of an conundrum... but not impossible.  Watch out for special cases. </p>

<p>You could also test if the number is prime by asking <code>if N in Primes:</code>.  Making <code>Primes</code> as <code>set()</code> would speed that up, but may also have a disadvantage; consider the pros and cons. </p>

<hr>

<p>Glad to see you are making progress!</p>

<p>Your next improvement will come from further reducing the set of primes you are trying to pair with.  <code>for i in P1</code> is better than <code>for i in Primes</code> because half the primes weren’t even tested.  We will further reduce the primes into smaller sets:</p>

<p>If you collect primes from <code>P1</code> which pair with <code>3</code>, and then you search the entire <code>P1</code> space again looking for another prime which pairs with both numbers, you are retesting primes you’ve already rejected. </p>

<p>Instead: collect all primes from <code>P1</code> which pair with <code>3</code>.  Call that set <code>P1{3}</code>.  Then, for each number <code>i</code> in that set, you could look for other numbers <code>j</code> <strong>in this smaller set</strong> which form a conforming pair. </p>

<p>Better: compute all sets <code>P1{i}</code>.  Then you can do set intersections: <code>P1{3} &amp; P1{i}</code>.  All numbers <code>j</code> in that intersection form conforming triples <code>(3,i,j)</code>.</p>

<p>All numbers <code>k</code> in the intersect <code>P1{3} &amp; P1{i} &amp; P1{j}</code> will form conforming quadruples <code>(3,i,j,k)</code>.</p>

<p>And so on. </p>
    </div>