<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>whenever you encounter a task where you have to combine or permute things, then backtracking is a possible approach.</p>
</blockquote>

<p>True. It is not necessarily the best though (in fact it is rarely the best).</p>

<p>In this particular case, the problem naturally maps to finding the <em>next combination</em>. In turn, it is no more than an increment of a number in some fancy numbering system. In your example, the minimal possible string is <code>ad</code>. Subsequent increments yield <code>ae</code>, then <code>af</code>, then (<code>'f' + 1</code> is <code>d</code> and a carry bit does carry) <code>bd</code>, etc.</p>

<p>Consider implementing the <code>increment/next</code> method directly. The space complexity will definitely benefit; and it is trivial to convert into a generator. The time complexity is likely to also benefit, depending on the use case.</p>

<p>PS: thank you for posting your train of thoughts.</p>
    </div>