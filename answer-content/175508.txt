<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Exception handling</h1>

<pre><code>try {
    ...          
} catch (InputMismatchException ime) {
     System.out.println("invalid input");
} finally {
     if (operator != '+' &amp; operator != '-' &amp; operator != '*' &amp; operator != '/') {
         throw new InputMismatchException();
     }
     Calculator calculator = new Calculator(firstNum, secondNum,    operator);
     ...
}
</code></pre>

<p>That's pretty weird.</p>

<p>It makes no sense to continue the computation if the <code>Scanner</code> throws. What is the point of having a finally block that throws the same exception? I would rather let the exception pass through instead of catching and rethrowing (the original exception is likely to contain a more meaningful message, too).</p>

<h1>Variable scope</h1>

<p>Try and use the narrowest possible scope. For instance, here:</p>

<pre><code>Calculator calc = new Calculator(6.0, 2.0, '+');

@Test
void addsTwoNumbers() {
     assertEquals(8.0, calc.makeCalculation());
}
</code></pre>

<p>there's no point in making <code>calc</code> a field. It can (and should) be just a local variable in the <code>addsTwoNumbers()</code> method. The same is true for other <code>calc</code>'s and test methods.</p>

<h2>Class design</h2>

<p>I don't think that the <code>Calculator</code> is a good name for your class. I would expect a calculator to be able to be instantiated once and then evaluate results of different expression. Something like this:</p>

<pre><code>Calculator calculator = new Calculator();
double sum = calculator.evaluateExpression(x, y, '+');
double difference = caclulator.evaluateExpression(x, y, '-');
</code></pre>

<p>I'd change it this way or rename this class to <code>Expression</code>.</p>

<h2>Object reuse</h2>

<p>Creating four new objects for each operation per each expression evaluation can be costly and is unreasonable because the operation are stateless.</p>

<p>You can use a static factory to reuse the same <code>Operation</code> objects in different expressions.   </p>
    </div>