<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Assuming <code>Update#getMessage()</code> is of type <code>Message</code> and <code>Update#getCallbackQuery()</code> is of type <code>CallbackQuery</code>:</p>
<p>You can make a function <code>getUpdateAttribute</code> that receives higher-order functions as handlers for the situation where your update has a message or callback query as follows.</p>
<pre><code>private static &lt;T&gt; T getUpdateAttribute(Update update,
                                        Function&lt;Message, T&gt; messageFunc,
                                        Function&lt;CallbackQuery, T&gt; callbackQueryFunc) {
    if (updateHasMessage(update)) {
        return messageFunc.apply(update.getMessage());
    }
    if (updateHasCallbackQuery(update)) {
        return callbackQueryFunc.apply(update.getCallbackQuery());
    }

    return null;
}
</code></pre>
<p>I simplified the <code>if/else</code> code flow to take advantage of early returns. <code>getUpdateAttribute</code> is also generic over <code>T</code> because your attributes can be various types, like <code>Integer</code> and <code>String</code>. Finally, I made it private so your <code>public</code> attribute fetchers are the only interface exposed. Those attribute fetchers then become:</p>
<pre><code>public static Long getChatId(Update update) {
    return getUpdateAttribute(
        update,
        Message::getChatId,
        callbackQuery -&gt; callbackQuery.getMessage().getChatId()
    );
}

public static String getUserName(Update update) {
    return getUpdateAttribute(
        update,
        message -&gt; message.getFrom().getUserName(),
        callbackQuery -&gt; callbackQuery.getFrom().getUserName()
    );
}

public static String getInputUserData(Update update) {
    return getUpdateAttribute(
        update,
        Message::getText,
        CallbackQuery::getData
    );
}

public static Integer getMessageId(Update update) {
    return getUpdateAttribute(
        update,
        Message::getMessageId,
        callbackQuery -&gt; callbackQuery.getMessage().getMessageId()
    );
}
</code></pre>
<p>Apart from this de-duplication, there is something else you can potentially improve. I'm not familiar with the Telegram API, but if it is possible that a message may have neither a message nor a callback query, then returning <code>null</code> seems like a valid response, in which case you may want to return <code>Optional&lt;T&gt;</code> from <code>getUpdateAttribute</code> (and all the other attribute fetchers), as that would signal your intent better.</p>
    </div>