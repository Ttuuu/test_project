<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>If this were a problem on the Euclidean plane, and not on the surface of the Earth, then it could be solved exactly by computing the <a href="https://en.wikipedia.org/wiki/Voronoi_diagram" rel="nofollow noreferrer">Voronoi diagram</a> for the set of airport locations, and intersecting the Voronoi regions with the bounding polygon for the state boundary. The most distant point will be one of the vertices of the intersected polygons.</p>

<p>A Voronoi diagram is a division of the plane into convex regions, each region containing one of the <em>seed points</em> (in the case in the post, one of the airports) and all other points that are closer to that seed point than any of the others.</p>

<p>For example, let's start with the set of Colorado airports with at least 10,000 enplanements per year:</p>

<pre><code># (longitude, latitude, code) for selected airports in Colorado.
AIRPORTS = [
    (-106.868889, 39.223056, 'ASE'),
    (-104.700833, 38.805833, 'COS'),
    (-104.673056, 39.861667, 'DEN'),
    (-107.753889, 37.151389, 'DRO'),
    (-106.917778, 39.642500, 'EGE'),
    (-108.526667, 39.122500, 'GJT'),
    (-106.933056, 38.533889, 'GUC'),
    (-107.217778, 40.481111, 'HDN'),
    (-107.894242, 38.509794, 'MTJ'),
]

# (longitude, latitude) for boundary of state of Colorado.
BOUNDARY = [
    (-109.0448, 37.0004),
    (-102.0424, 36.9949),
    (-102.0534, 41.0006),
    (-109.0489, 40.9996),
    (-109.0448, 37.0004),
]
</code></pre>

<p><img src="https://i.stack.imgur.com/0CfSc.png" alt="Boundary of Colorado as a green dashed polygon. Selected airports as blue circles."></p>

<p>We can compute the Voronoi diagram for this set of points using <a href="https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.Voronoi.html" rel="nofollow noreferrer"><code>scipy.spatial.Voronoi</code></a>, and plot it using <a href="https://matplotlib.org/index.html" rel="nofollow noreferrer">Matplotlib</a> and <a href="https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.voronoi_plot_2d.html" rel="nofollow noreferrer"><code>scipy.spatial.voronoi_plot_2d</code></a>, like this:</p>

<pre><code>from geopy.distance import great_circle
import matplotlib.pyplot as plt
import numpy as np
from scipy.spatial import Voronoi, voronoi_plot_2d

_, ax = plt.subplots()
points = np.array([(lon, lat) for lon, lat, code in AIRPORTS])
voronoi_plot_2d(Voronoi(points), ax=ax, show_vertices=False)
plt.plot(*points.T, 'b.')

boundary = np.array(BOUNDARY)
x, y = boundary.T
plt.plot(x, y, 'g--')
plt.xlim(round(x.min() - 1), round(x.max() + 1))
plt.ylim(round(y.min() - 1), round(y.max() + 1))
plt.show()
</code></pre>

<p><img src="https://i.stack.imgur.com/dU6wk.png" alt="Boundary of Colorado as a green dashed polygon. Selected airports as blue circles. Finite Voronoi regions for the airports as solid black lines. Infinite Voronoi ridges as black dashed lines."></p>

<p>The solid black polygons are the finite Voronoi regions, and the dashed black lines are the boundaries of the Voronoi regions extending to infinity. Note that some of the finite regions (and all of the infinite regions) extend outside the state boundary, so we need to intersect these regions with the state boundary. This can be done using the <a href="https://shapely.readthedocs.io/en/stable/" rel="nofollow noreferrer">Shapely</a> geometry library and the function <code>voronoi_polygons</code> from <a href="https://stackoverflow.com/a/52727406/68063">this answer</a> at Stack Overflow.</p>

<pre><code>diameter = np.linalg.norm(boundary.ptp(axis=0))
boundary_polygon = Polygon(boundary)
for poly in voronoi_polygons(Voronoi(points), diameter):
    coords = np.array(poly.intersection(boundary_polygon).exterior.coords)
    plt.plot(*coords.T, 'r-')
</code></pre>

<p><img src="https://i.stack.imgur.com/0HjY9.png" alt="Voronoi regions for each airport intersected with boundary of Colorado and drawn as red polygons. Airports as blue circles."></p>

<p>Now the most distant point is one of the vertices of the polygons resulting from intersecting the Voronoi regions with the boundary, and the Voronoi property means we only have to check each vertex against the seed point for its region:</p>

<pre><code>farthest_point = None
farthest_airport = None
farthest_dist = 0
polygons = voronoi_polygons(Voronoi(points), diameter)
for airport, poly in zip(AIRPORTS, polygons):
    lon, lat, _ = airport
    coords = np.array(poly.intersection(boundary_polygon).exterior.coords)
    plt.plot(*coords.T, 'r-')
    for coord in coords:
        dist = great_circle(coord[::-1], (lat, lon))
        if dist &gt; farthest_dist:
            farthest_point = coord
            farthest_airport = airport
            farthest_dist = dist
plt.plot(*farthest_point, 'go')
lon, lat, code = farthest_airport
plt.annotate(xy=(lon, lat), xytext=(lon + 0.1, lat + 0.05), s=code)
</code></pre>

<p><img src="https://i.stack.imgur.com/q91dJ.png" alt="Voronoi regions for each airport intersected with boundary of Colorado and drawn as red polygons. Airports as blue circles. Furthest point from any airport as green circle in southeast corner of the state. Its closest airport, Colorado Springs, labelled."></p>

<p>This solves the planar version of the problem exactly in time <span class="math-container">\$O(\max(m, n \log n))\$</span>, where <span class="math-container">\$m\$</span> is the number of vertices in the bounding polygon, and <span class="math-container">\$n\$</span> is the number of airports. For small areas on the surface of the Earth this will be a better approximation than the one in the post (which is only as accurate as allowed by <code>latstep</code> and <code>lonstep</code>).</p>
    </div>