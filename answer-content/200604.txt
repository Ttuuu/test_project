<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Memory Allocation Layer</h2>

<p>Before looking at everything lets look at the memory allocation layer.</p>

<pre><code>#include &lt;malloc.h&gt;

namespace gupta {
namespace detail {
namespace podvector {
template &lt;typename T&gt; inline auto malloc(size_t elm_count) {
  return ::malloc(elm_count * sizeof(T));
}

template &lt;typename T&gt; inline auto realloc(void *old_block, size_t elm_count) {
  return ::realloc(old_block, elm_count * sizeof(T));
}
} // namespace podvector
} // namespace detail

....
private:
  void alloc(size_type capacity) {
    m_capacity = capacity;
    m_size = 0;
    m_memory =
        static_cast&lt;pointer&gt;(detail::podvector::malloc&lt;value_type&gt;(capacity));
    if (!m_memory)
      throw std::bad_alloc{};
  }
  void change_capacity(size_type new_capacity) {
    m_capacity = new_capacity;
    void *new_memory =
        detail::podvector::realloc&lt;value_type&gt;(m_memory, new_capacity);
    if (!new_memory)
      throw std::bad_alloc{};
    m_memory = static_cast&lt;pointer&gt;(new_memory);
  }
</code></pre>

<p>Lets just say that <code>&lt;malloc.h&gt;</code> is not a valid header. You should probably be using <code>&lt;cstdlib&gt;</code> (this is C++ so prefer the C++ headers) which puts all the function in the standard namespace. So your use of <code>::malloc()</code> and <code>::realloc()</code> are wrong as they are not necessarily in the global namespace (you just happen to get lucky).</p>

<p>You do the memory allocation in your <code>gupta::detail::podvector</code> namespace but leave the checking for null to your vector class. Using <code>Separation of Concerns</code> we should really be doing all the memory handling (including checking for failed allocation) in your memory functions not inside your vector.</p>

<p>Also why are you <code>static_cast</code> the result in the vector. Would it not be easier to cast the type in the allocation routines so that you return the correct type.</p>

<p>Though your use of <code>static_cast</code> is correct this is the kind of thing I would want other developers to have a critical look at to make sure I got it correct. Thus I would have used <code>reinterpret_cast&lt;&gt;()</code> to make people stop and think to make sure cast is correct.</p>

<p>There is a bug in your current code. A std::vector always makes sure all members are in a specific state after initialization. You don't do this. Your main constructor simply calls <code>alloc()</code> then sets the size. Since alloc simply calls <code>std::malloc()</code> the underlying memory is not in any specific state. Thus I would use <code>std::calloc()</code> to make sure the memory returned is in a standard state.</p>

<pre><code>template &lt;typename T&gt;
T* new_malloc(size_t elm_count) {
    auto tmp = std::calloc(elm_count, sizeof(T));
    if (tmp == nullptr) {
        throw std::bad_alloc("PLOP");
    }
    return reinterpret_cast&lt;T*&gt;(tmp);
}

template &lt;typename T&gt;
T* new_realloc(void *old_block, size_t elm_count) {
    auto tmp = std::realloc(old_block, elm_count * sizeof(T));
    if (tmp == nullptr) {
        throw std::bad_alloc("PLIP");
    }
    return reinterpret_cast&lt;T*&gt;(tmp);
}

...
private:
  void alloc(size_type capacity) {
      m_capacity = capacity;
      m_size     = 0;
      m_memory   = detail::podvector::new_malloc&lt;value_type&gt;(capacity));
  }
  void change_capacity(size_type new_capacity) {
      m_capacity = new_capacity;
      m_memory   = detail::podvector::new_realloc&lt;value_type&gt;(m_memory, new_capacity);
  }
</code></pre>

<h2>Specialization for POD</h2>

<p>If you want to specialize for POD. You don't need to customize the whole vector. You just need to specialize the allocation method used by the vector.</p>

<p>You do need to keep it in mind for a couple of functions (but I don't think you need to do anything special).</p>

<pre><code>private:
  // POD Data
  typename std::enable_if_t&lt;std::is_pod&lt;PodType&gt;::value&gt;&gt;::value_type
  alloc(size_type capacity) {
      m_capacity = capacity;
      m_size     = 0;
      m_memory   = detail::podvector::new_malloc&lt;value_type&gt;(capacity));
  }
  typename std::enable_if_t&lt;std::is_pod&lt;PodType&gt;::value&gt;&gt;::value_type
  change_capacity(size_type new_capacity) {
      m_capacity = new_capacity;
      m_memory   = detail::podvector::new_realloc&lt;value_type&gt;(m_memory, new_capacity);
  }


  // Any other Data
  typename std::enable_if_t&lt;!std::is_pod&lt;PodType&gt;::value&gt;&gt;::value_type
  alloc(size_type capacity) {
      m_capacity = capacity;
      m_size     = 0;
      m_memory   = ::operator new(sizeof(T) * m_capacity);
  }
  typename std::enable_if_t&lt;!std::is_pod&lt;PodType&gt;::value&gt;&gt;::value_type
  change_capacity(size_type new_capacity) {
      podvector&lt;T&gt;  tmpBuffer(newCapacity);

      for(loop = 0; loop &lt; m_size; ++loop) {
          tmpBuffer.push_back(std::move(m_memory[loop]));
      }
      tmpBuffer.swap(*this);
  }
</code></pre>
    </div>