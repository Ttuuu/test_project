<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Answering questions of @Eric Lippert, I have done some refactoring.</p>

<p>The <code>Multidictionary</code> class I implemented as follow</p>

<pre><code>public class Multidictionary&lt;K, V&gt;
{
    private Dictionary&lt;K, List&lt;V&gt;&gt; dictionary;

    public Multidictionary()
    {
        dictionary = new Dictionary&lt;K, List&lt;V&gt;&gt;();
    }

    public void Add(K k, V v)
    {
        List&lt;V&gt; list;
        dictionary.TryGetValue(k, out list);
        if (list == null)
        {
            list = new List&lt;V&gt;();
            dictionary.Add(k, list);
        }
        list.Add(v);
    }

    public IEnumerable&lt;K&gt; Keys { get { return dictionary.Keys; } }

    public IEnumerable&lt;IEnumerable&lt;V&gt;&gt; Values
    {
        get { return dictionary.Values; }
    }
}
</code></pre>

<p>Now to find anagrams, we can use <code>Multidictionary</code>.</p>

<pre><code>     var words= new List&lt;string&gt;() { "litu", "flit", "lift", "lute", "tule", "etui", "lieu", "lite", "tile", "flue", "fuel", "felt", "left", "file", "lief", "life", "flub", "bute", "tube", "blue", "lube", "belt", "blet", "bite", "bile", "luau", "latu", "alit", "lati", "tail", "tali", "tufa", "flat", "fiat", "alif", "fail", "fila", "late", "tael", "tale", "teal", "tela", "ilea", "fate", "feat", "feta", "alef", "feal", "flea", "leaf", "abut", "tabu", "tuba", "blat", "bait", "bail", "flab", "beau", "abet", "bate", "beat", "beta", "able", "bale", "blae" };
     var anagramDictionary = new Multidictionary&lt;string, string&gt;();
     words.ForEach(word =&gt; anagramDictionary.Add(string.Concat(word.OrderBy(c =&gt; c)), word));
     var anagrams = anagramDictionary.Values.Select(vs =&gt; vs);
</code></pre>

<p>Another way, we can write <code>Partition</code> function as @Eric Lippert suggested using <code>GroupBy</code>.</p>

<pre><code>public static IEnumerable&lt;IEnumerable&lt;T&gt;&gt; Partition&lt;T&gt;(this IEnumerable&lt;T&gt; items, Func&lt;T, T&gt; canonicalize)
{
     return items.GroupBy(_ =&gt; canonicalize(_)).Select(_ =&gt; _);
}
</code></pre>

<p>In this way solution is one liner</p>

<pre><code>var groups = words.Partition(s =&gt; string.Concat(s.OrderBy(c =&gt; c)));
</code></pre>
    </div>