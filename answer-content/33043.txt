<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Interface Design</h1>

<p>The class could be better named.  (As @DaveJarvis points out, it's more of a namespace than a class, but I'm OK with a design that is not pure OOP.)  I suggest <code>BinarySearcher</code>: it describes what it can do, without repeating the name of the function, and still leaves it open for you to add a <code>findSmallestValueGreaterThanOrEqualToX()</code> function later.</p>

<p>Returning an <code>Integer</code> is weird, especially since the inputs are unboxed <code>int</code>s.  I know, you want to be able to return <code>null</code> if no suitable element is found.  I have another suggestion: return the <em>index</em> of the element found rather than the element itself; if no suitable element exists then return -1.  That behaviour is reminiscent of <code>String.indexOf()</code>, which all Java programmers should be familiar with.  Knowing the index, the caller can easily retrieve the element from the array.</p>

<p>We could also shorten the function name a bit.  I suggest that the method signature should be</p>

<pre><code>/**
 * Given a sorted array and a limit, finds the rightmost element
 * whose value does not exceed the limit.
 *
 * @param data An array sorted in ascending order
 * @param limit The maximum value to look for
 * @return The index of the last element in data whose value is less
 *         than or equal to limit.  If no such element exists, returns -1.
 */
public static int greatestIndexNotExceeding(int[] data, int limit)
</code></pre>

<h1>Search Logic</h1>

<p>There is no reason for your helper function to consult <code>arr.length</code>.  The helper function's job is to look between indices <code>lb</code> and <code>ub</code>.  The caller will vouch for the validity of those bounds.  What happens beyond that range is none of the helper function's business.</p>

<p>You have <em>seven</em> cases, which is way too many.  You should only need four:</p>

<ul>
<li>No suitable element</li>
<li>Found the result</li>
<li>Consider the upper half of the range</li>
<li>Consider the lower half of the range</li>
</ul>

<h1>Null-Handling</h1>

<p>There's no need to <code>throw new NullPointerException()</code> explicitly.  The very next line will raise a <code>NullPointerException</code> naturally when it tries to access <code>arr.length</code>.  The <code>arr != null</code> assertion is similarly pointless.</p>

<p>When might it be beneficial to check for <code>null</code> explicitly?  When a constructor or a setter method accepts an argument and stores it for future use, but does not try to use it immediately.  In those cases, it can be hard to track down later how an instance or class variable came to be <code>null</code>.</p>

<hr>

<h1>Proposed Solution</h1>

<pre><code>public class BinarySearcher {
    /**
     * Insert JavaDoc hereâ€¦
     */
    public static int greatestIndexNotExceeding(int[] data, int limit) {
        if (data.length &lt; 1) {
            return -1;
        }
        return greatestIndexNotExceeding(data, limit, 0, data.length - 1);
    }

    private static int greatestIndexNotExceeding(int[] data, int limit, int lb, int ub) {
        final int mid = (lb + ub) / 2;

        // Need to go lower but can't
        if (mid == lb &amp;&amp; data[mid] &gt; limit) {
            return -1;
        }

        // Found a candidate, and can't go higher
        if (data[mid] &lt;= limit &amp;&amp; (mid == ub || data[mid + 1] &gt; limit)) {
            return mid;
        }

        if (data[mid] &lt;= limit) {
            // Consider upper half
            return greatestIndexNotExceeding(data, limit, mid + 1, ub);
        } else {
            // Consider lower half
            return greatestIndexNotExceeding(data, limit, lb, mid);
        }
    }
}
</code></pre>

<p>It should be possible to restructure the code to reduce the number of comparisons between <code>data[mid]</code> and <code>limit</code>, but I think it's more readable this way.</p>
    </div>