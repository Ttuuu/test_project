<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p><em>I am especially unsure about looping over the sections in a scroll event.</em></p>
</blockquote>

<p>There doesn't seem to be much of an alternative. One could select all elements with class name <code>is-visible</code>:</p>

<pre><code>const visible = document.getElementsByClassName('is-visible');
</code></pre>

<p>Note that that collection is live, meaning it will be updated dynamically as the DOM changes, so there isn't any reason to re-query the DOM for those.</p>

<p>In the version that attempts to debounce the DOM updates, the IIFEs seem a bit excessive. Is the goal to limit scope of variables?</p>

<hr>

<p>The function passed to <code>panels.forEach()</code> could be simplified:</p>

<blockquote>
<pre><code>panel =&gt; {
    if(scrollTop &gt;= panel.offsetTop - ( windowHeight / 2)){
        panel.classList.add("is-visible");
    } else {
        panel.classList.remove("is-visible");
    }
    if(scrollTop &gt;= (panel.offsetTop + panel.clientHeight) - ( windowHeight / 2) ) {
        panel.classList.remove("is-visible");
    }
}
</code></pre>
</blockquote>

<p>This can be simplified by calling <a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/classList#Methods" rel="nofollow noreferrer"><code>Element.classList.toggle()</code></a> with two arguments.</p>

<pre><code>panel =&gt; {
    let addClass = scrollTop &gt;= panel.offsetTop - ( windowHeight / 2);

    if(scrollTop &gt;= (panel.offsetTop + panel.clientHeight) - ( windowHeight / 2) ) {
        addClass = false;
    }
    panel.classList.toggle("is-visible", addClass);
}
</code></pre>

<hr>

<blockquote>
<pre><code>const panels = document.querySelectorAll(".panel");
</code></pre>
</blockquote>

<p>In most browsers it would generally be quicker to fetch the game squares using <a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/getElementsByClassName" rel="nofollow noreferrer"><code>document.getElementsByClassName()</code></a>, but that would return a live collection (refer to <a href="https://stackoverflow.com/a/39213298/1575353">this SO answer</a> for an explanation). </p>

<pre><code> const panels = [...document.getElementsByClassName("panel")];
</code></pre>

<hr>

<p>The debounced version looks a little bit un-efficient because it uses an interval so that function gets executed more than it needs to. </p>

<p>There are also many arguments not to use <code>setInterval</code> and <code>setTimeout</code> - e.g. <a href="https://stackoverflow.com/q/38709923/1575353">blindman67's SO Post <em>Why is requestAnimationFrame better than setInterval or setTimeout</em></a></p>

<p>The functionality from the <code>setInterval</code> callback could be put into a function called <code>checkVisibility</code>. Then the scroll handler could be simplified to use <a href="https://developer.mozilla.org/en-US/docs/Web/API/window/requestAnimationFrame" rel="nofollow noreferrer"><code>requestAnimationFrame()</code></a></p>

<pre><code>let timeout;
window.addEventListener("scroll", _ =&gt; {
    if (timeout) {
        window.cancelAnimationFrame(timeout);
    }
    timeout = window.requestAnimationFrame(checkVisibility);
}); 
</code></pre>
    </div>