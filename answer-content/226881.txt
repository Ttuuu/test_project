<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'll put my comments inline. In order:</p>

<p><strong>Main:</strong></p>

<pre><code>import java.util.Scanner;

public class Main {
</code></pre>

<p>I saw this came up in your previous question, too, but <code>Main</code> is not a good name. As someone seeing your code for the first time, I have no idea what <code>Main</code> is - I know from the name that it's the <em>entrypoint</em> to your logic, but I have no idea <em>what</em> logic it's the entrypoint for. For classes with a <code>main()</code> method that starts up some other class' logic, I like the <code>_Runner</code> naming scheme. E.g. <code>LotteryGameRunner</code>. What does it do? It runs the lottery game. I already know what type of logic to expect (a <code>main()</code> method) and what system the logic belongs to.</p>

<pre><code>    private static Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) {
        LotteryGame game = new LotteryGame(6, 1, 49);
</code></pre>

<p>Magic numbers: I don't know what <code>6</code>, <code>1</code>, and <code>49</code> mean. I see them defined in another class, but it's a pain to have to look there every time I need to double check whether it's 6 draw size and 1 lower limit, or 1 draw size and 6 lower limit. Use variables just like you do in the other class, so when you need to change them later you can be sure you're changing the one you think you're changing, without needing to count its index in the parameters to be sure.</p>

<p>Whether it's necessary to pull out parameters into temporary variables varies, but in this case there are two strong arguments for it: 1. these are <code>int</code>'s, so we have <strong>no</strong> information about their meaning as we would if they were named objects, 2. these are really <strong>configuring</strong> your program - they're not calculated, you're just providing them in the code. Configuration, as much as possible, should be pulled out of logic, so that when you need to change the configuration, you're not touching a line of logic.</p>

<pre><code>        System.out.println(game.getExplanationString());
        boolean run = true;
        while (run) {
            game.play();
            System.out.print("Continue (Y / N): ");
            System.out.flush();
            run = scanner.nextLine().equalsIgnoreCase("Y");
            System.out.println();
        }
    }   
}
</code></pre>

<p>The above looks good. Nice!</p>

<p><strong>LotteryGame:</strong></p>

<pre><code>import java.util.Scanner;

public class LotteryGame {
    private Scanner scanner = new Scanner(System.in);

    private final int drawSize;
    private final int drawLowerLimit;
    private final int drawUpperLimit;
</code></pre>

<p>These are nicely named.</p>

<pre><code>    public LotteryGame(int drawSize, int drawLowerLimit, int drawUpperLimit) {
        this.drawSize = drawSize;
        this.drawLowerLimit = drawLowerLimit;
        this.drawUpperLimit = drawUpperLimit;
    }
</code></pre>

<p>And this is a good way to do the constructor.</p>

<pre><code>    public void play() {
        // generate new random draw
        Draw draw = Draw.generateRandomDraw(drawSize, drawLowerLimit, drawUpperLimit);

        // let the user guess
        Draw userDraw = guess();

        // compare the draws and print result
        int rightNumbers = draw.compare(userDraw);
        System.out.println("Your guess: " + userDraw.getStringRepresentation());
</code></pre>

<p>See comment on <code>getStringRepresentation()</code> below.</p>

<pre><code>        System.out.println("Draw:       " + draw.getStringRepresentation());
        System.out.println("You guessed " + rightNumbers + " right!");
        System.out.println();
    }

    public Draw guess() {
        int numbers[] = new int[drawSize];
        while (true) {
            try {
                for (int i = 0; i &lt; drawSize; i++) {
                    numbers[i] = HelpfulFunctions.saveIntInput("Number " + (i+1) + ": ");
                }
                System.out.println();
                return new Draw(numbers);
            } catch (IllegalArgumentException e) {
                System.out.println("The numbers have to be unique\n");
            }
</code></pre>

<p>Try-catch blocks should generally not be used for normal logic. A good rule of thumb is that, if the same method keeps running after the try-catch block is executed, it shouldn't be a try-catch block (there are a lot of caveats to this; one very common pattern that rightfully breaks this rule is failing slowly - running a processing loop over a collection that processes every item, catching every exception and waiting until the end to throw them all). In this case, you're using the try-catch to enable a loop in the logic itself. Instead, just check whether all the numbers the user has given you were unique:</p>

<pre><code>        while (true) {
            for (int i = 0; i &lt; drawSize; i++) {
                numbers[i] = HelpfulFunctions.saveIntInput("Number " + (i+1) + ": ");
            }
            System.out.println();

            // a set inserts only unique items, leaving out duplicates
            if (new HashSet&lt;Integer&gt;(Arrays.asList(numbers)).size() == numbers.length) {
                return new Draw(numbers);
            } else {
                System.out.println("The numbers have to be unique\n");
            }
        }
    }

    public String getExplanationString() {
        StringBuilder sb = new StringBuilder();
        sb.append("You have to guess the numbers of a lottery draw.\n");
        sb.append("A draw consists of 6 different numbers.\n");
        sb.append("Each number is in a range between 1 and 49.\n");
        sb.append("The more numbers you guess right, the luckier you can be!\n");
        return sb.toString();
    }
}
</code></pre>

<p>1 and 49?! If that's set in stone, then they shouldn't be input parameters above. If it's not set in stone, those same variables should be used here - you'll probably need to pull them out into <code>public final static</code> constants.</p>

<p>Also, is there ever a case when you're not immediately printing the result of this method? If there is not, then it would be simpler to rename it to <code>public void printExplanationString()</code> and have it <code>System.out.println()</code> each of its currently appended lines.</p>

<p><strong>Draw:</strong></p>

<pre><code>import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Random;

public class Draw {
    public int[] numbers;

    public Draw(int[] numbers) throws IllegalArgumentException {
        // check if all numbers are unique
        for (int i = 0; i &lt; numbers.length; i++) {
            for (int j = 0; j &lt; numbers.length; j++) {
                if (i == j) continue;
                if (numbers[i] == numbers[j]) {
                    throw new IllegalArgumentException("All numbers have to be unique.");
                }
            }
        }
</code></pre>

<p>Use the same uniqueness checking as above - it'll be much shorter, and it's actually more efficient than a nested loop :)</p>

<pre><code>        this.numbers = numbers;
    }

    public static Draw generateRandomDraw(int numberOfEntries, int lowerLimit, int upperLimit) {
        // generate list that contains possible values
        List&lt;Integer&gt; possibleValues = new ArrayList&lt;&gt;();
        for (int i = lowerLimit; i &lt;= upperLimit; i++) {
            possibleValues.add(i);
        }

        // fill draw with randomly picked values
        int[] numbers = new int[numberOfEntries];
        Random random = new Random();
        for (int i = 0; i &lt; numberOfEntries; i++) {
            int randomIndex = random.nextInt(possibleValues.size());
            Integer pickedValue = possibleValues.get(randomIndex);
            possibleValues.remove(pickedValue);
            numbers[i] = pickedValue;
        }
</code></pre>

<p>Rather than generate your own random <code>int</code>s between <code>lowerLimit</code> and <code>upperLimit</code>, you can let <code>Random</code> do it for you. Check out <a href="https://docs.oracle.com/javase/8/docs/api/java/util/Random.html#ints-int-int-" rel="nofollow noreferrer">Random.ints()</a></p>

<pre><code>        Arrays.sort(numbers);

        return new Draw(numbers);
    }

    // returns count of equal numbers
    public int compare(Draw draw) throws IllegalArgumentException {
        if (draw.numbers.length != numbers.length) {
            throw new IllegalArgumentException("The draws dont have the same length.");
        }

        int count = 0;
        for (int i = 0; i &lt; numbers.length; i++) {
            for (int j = 0; j &lt; numbers.length; j++) {
                if (numbers[i] == draw.numbers[j]) {
                    count++;
                }
            }
        }
</code></pre>

<p>Careful! What's the maximum value returned by <code>compare()</code>? It should probably be <code>numbers.length</code>. Is it?</p>

<pre><code>        return count;
    }

    public String getStringRepresentation() {
        StringBuilder sb = new StringBuilder();
        sb.append("[" + numbers[0]);
        for (int i = 1; i &lt; numbers.length; i++) {
            sb.append(", " + numbers[i]);
        }
        sb.append("]");
        return sb.toString();
    }
}
</code></pre>

<p>As another answer has mentioned: this method is doing what <code>toString()</code> is supposed to do. Just name it <code>toString</code> and add an <code>@Override</code> tag, and you'll be good to go.</p>

<p><strong>HelpfulFunctions:</strong></p>

<p>This name is not the best. Classes like these are nifty for beginning programmers who tinker with similar things a bunch. However, they're still not as good as just bundling related logic into helpful library classes named for what they do (InputSaving.java, anyone?). Furthermore, <strong>this</strong> class only has one method. Until you know you need this method in another place, just leave it as part of a class for this system. <code>LotteryGame</code> is probably a good spot.</p>

<pre><code>import java.util.Scanner;

public class HelpfulFunctions {
    private static Scanner scanner = new Scanner(System.in);

    public static int saveIntInput(String message) {
        while (true) {
            try {
                System.out.print(message);
                System.out.flush();
</code></pre>

<p>The method is called <code>saveIntInput</code>, but it's not saving anything (it's just returning an attempt to parse a <code>String</code> to an <code>int</code>), and worse, it <strong>is</strong> doing things other than that: it's printing messages. Another good rule of thumb is that, except for temporary debugging <code>println()</code>'s, methods should only call <code>System.out.println()</code> if they're communicating directly with the user. Couple this with the fact that communication with the user should be at the highest possible level, wrapping logic that doesn't know anything about the user at all, and it's clear that we shouldn't be printing here.</p>

<p>As usual, there's an exception (kind of) to the above. <strong>Logging</strong> - methods throughout a system might log messages to make a record of what has happened. However, this is generally done via a <code>Logger</code> from a logging framework, not using System.out().</p>

<pre><code>                return Integer.valueOf(scanner.nextLine());
            } catch (NumberFormatException e) {
                System.out.println("Not a valid number.");
            }
        }
    }
}
</code></pre>

<p><strong>Overall:</strong>
Your code style is good, and overall naming and conventions are clean. There are a couple spots where small changes could be cleaner, but your code is in general nice to read.</p>

<p>You've obviously incorporated feedback from your last review, and that's great. A lot of my suggestions here are less "you did something wrong" and more "here's a better way you might not know about". Nice job!</p>
    </div>