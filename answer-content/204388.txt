<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1><code>functools.wraps</code></h1>
<p>Unrelated to your main question, I advice you to use <a href="https://docs.python.org/3.6/library/functools.html#functools.wraps" rel="noreferrer"><code>functools.wraps</code></a>. This way, your methods metadata get transferred to the wrapped method.
For example <code>dice.__doc__</code> returns <code>None</code> without it, but the doctstring if you include it.</p>
<h1>repetitions</h1>
<p>It is possible to programatically change the number of repetitions per function. If you look at <code>functools.lru_cache</code>, where you need to specify the size of the cache too, you can see you just need an extra level of wrapper function:</p>
<pre><code>def mean_of_experiments(N=100_000):
    def inner_decorator(experiment_func):
        '''Decorator to repeat any Bernoulli trial N times and return probability of success'''
        @wraps(experiment_func)
        def wrapper(*args, **kwargs):
            # print(f"{N} repititions")
            return round(mean(experiment_func(*args, **kwargs) for _ in range(N)), 3)
        return wrapper
    return inner_decorator
</code></pre>
<p>where the <code>inner_decorator</code> is the old <code>mean_of_experiments</code> method</p>
<h1>Dynamically set repetitions</h1>
<p>A decorator is nothing but syntactic sugar for <code>decorator(func)</code>, so you can do it by not decorating the functions themselves, but doing the 'decorating' when calling them:</p>
<pre><code>mean_of_experiments(N=100)(dice(100, 20))
</code></pre>
<h1>Dynamically set repetitions 2:</h1>
<p>Another approach is to pass the repetitions on with the <code>kwargs</code> to the <code>experiment_func</code></p>
<pre><code>def mean_of_experiments_2(experiment_func):
    
    '''Decorator to repeat any Bernoulli trial N times and return probability of success'''
    def wrapper(*args, **kwargs):
        repetitions = kwargs.pop('repetitions', 100_000)
        # print(f"{repetitions} repetitions")
        return round(mean(experiment_func(*args, **kwargs) for _ in range(repetitions)), 3)
    return wrapper

@mean_of_experiments_2
def dice(n, c):
    '''Simulates an experiment to roll 'n' dice and and check if count of 6's is at least c'''
    return [randint(1, 6) for _ in range(n)].count(6) &gt;= c
</code></pre>
<p>and then call it like this: <code>dice(6, 4, repetitions=100)</code></p>
<p>The main caveat here is not to pick <code>repetitions</code> as argument to any of the <code>experiment_func</code>s</p>
<h1>Further remarks</h1>
<h2>_ in ints</h2>
<p>you wrote <code>100000</code> in 2 ways: <code>100000</code> and <code>1_00_000</code>. The second way looks incorrect to me (it is syntactically correct, but I would group numbers per 3). The way I would write it is <code>100_000</code>. You can pick another way, but stay consistent</p>
<h2><code>common_birthday</code></h2>
<p>since the <code>rands</code> as you make it will always contain <code>k</code> elements, it would be more efficient to skip this list, and immediately make the set:</p>
<pre><code>def common_birthday(k):
    '''Simulates an experiment to generate k independent uniformly random birthdays and check if there are any repeat birthdays'''
    rands = {randint(1, 365) for _ in range(k)}
    return len(rands) != k
</code></pre>
<h2><code>dice</code></h2>
<p>For large <code>n</code>, this can become a very long list. An alternative approach would be to either use a <code>collections.Counter</code>, or use <code>sum</code></p>
<pre><code>return  sum(randint(1, 6) == 6 for _ in range(n)) &gt;= c
</code></pre>
<p>or</p>
<pre><code>return Counter(randint(1, 6) for _ in range(n))[6] &gt;= c
</code></pre>
<h2><code>boardings</code></h2>
<p>If, instead of depending on <code>numpy</code> you want a native implementations, you can use <a href="https://docs.python.org/3/library/itertools.html#itertools.accumulate" rel="noreferrer"><code>itertools.accumulate</code></a> and <a href="https://docs.python.org/3.5/library/random.html#random.expovariate" rel="noreferrer"><code>random.expovariate</code></a>.</p>
<pre><code>def boardings_native(scale=5.0, N=100_000):
    '''Simulates an experiment where arrival of buses at stop follows a Poisson process and finds avg. inter-arrival time at a random instant'''
    arrivals = list(accumulate(expovariate(lambd=1/scale) for _ in range(N)))

    @mean_of_experiments(3)
    def wait():
        boarding_idx = bisect_left(arrivals, uniform(0, arrivals[-1]))
        missed_bus = 0 if boarding_idx == 0 else arrivals[boarding_idx - 1]
        return arrivals[boarding_idx] - missed_bus

    return wait()
</code></pre>
<p>If I look at the performance, it is even faster than the <code>numpy</code> implementation, but that is probably because generating the <code>arrivals</code> is an iteration instead of a vectorised operation</p>
<pre><code>%timeit boardings_native()
</code></pre>
<blockquote>
<pre><code>52 ms ± 1.42 ms per loop (mean ± std. dev. of 7 runs, 10 loops each)
</code></pre>
</blockquote>
<pre><code>%timeit boardings()
</code></pre>
<blockquote>
<pre><code>143 ms ± 713 µs per loop (mean ± std. dev. of 7 runs, 10 loops each)
</code></pre>
</blockquote>
    </div>