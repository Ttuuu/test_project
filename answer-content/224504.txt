<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Specific suggestions:</p>

<ol>
<li>Python <em>will</em> throw an <code>IndexError</code> if you try to access an element past the end of a list, so you don't need to check <code>index &gt;= len(s)</code> or <code>offset &gt; len(s)</code>.</li>
<li>After the simplification above I would inline the <code>__check</code> methods as assertions.</li>
<li>Throwing an exception and catching it again <em>within the same context</em> is a code smell - it's too much like <code>goto</code>. Why not just <code>return</code> instead? Or let the user know the input could not be processed?</li>
<li>You don't actually use any OOP in your code, so <code>apply</code> might as well not be within a class</li>
<li>In the same way I think you could just use a <code>List[str]</code> for <code>dest</code>.</li>
<li>Checking the type of an argument is unpythonic. Basically you're responsible for passing some value which <em>can be used</em> by the code. And with type checking (below) you could even enforce this at a test or linting stage.</li>
<li>Abbreviations make code harder to read. I would expand things like <code>destination</code>, <code>position</code> and <code>command</code>.</li>
<li>Magic values like <code>R</code> and <code>D</code> should be named constants to improve readability.</li>
</ol>

<p>General suggestions:</p>

<ol>
<li><a href="https://github.com/ambv/black" rel="nofollow noreferrer"><code>black</code></a> can automatically format your code to be more idiomatic.</li>
<li><a href="https://github.com/timothycrosley/isort" rel="nofollow noreferrer"><code>isort</code></a> can group and sort your imports automatically.</li>
<li><p><a href="https://gitlab.com/pycqa/flake8" rel="nofollow noreferrer"><code>flake8</code></a> with a strict complexity limit will give you more hints to write idiomatic Python:</p>

<pre><code>[flake8]
max-complexity = 4
ignore = W503,E203
</code></pre>

<p>That limit is not absolute by any means, but it's worth thinking hard whether you can keep it low whenever validation fails. For example, I'm working with a team on an application since a year now, and our complexity limit is up to 7 in only one place. Conversely, on an ugly old piece of code I wrote without static analysis support I recently found the complexity reaches 87!)</p></li>
<li><p>I would then recommend adding <a href="https://docs.python.org/3/library/typing.html" rel="nofollow noreferrer">type hints</a> everywhere and validating them using a strict <a href="https://github.com/python/mypy" rel="nofollow noreferrer"><code>mypy</code></a> configuration:</p>

<pre><code>[mypy]
check_untyped_defs = true
disallow_untyped_defs = true
ignore_missing_imports = true
no_implicit_optional = true
warn_redundant_casts = true
warn_return_any = true
warn_unused_ignores = true
</code></pre>

<p>As a Java developer I'm sure you'd appreciate the clarity this lends to the code.</p></li>
</ol>
    </div>