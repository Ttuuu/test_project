<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>To start with, I see what's likely to be a logic error. At the bottom, you do:</p>

<pre><code>if (problem == null) {
    errors.push({
        msg: `Problem with id ${problem_id} does not exist `,
        param: "id"
    });
}
return monet.Validation.success(problem)
</code></pre>

<p>If the <code>problem</code> isn't found, you push an error object to the <code>errors</code> array, but then you return <code>.success</code> anyway and don't use the <code>errors</code> array again. In such a case, I think you want to call <code>monet.Validation.fail</code> with the error object instead, and not call <code>.success</code>.</p>

<p>Once that's done, note that you only ever have at most one element in the <code>errors</code> array, which <code>.fail</code> gets called with. It would be less repetitive to immediately call <code>.fail</code> and return when an error is encountered. Also, since the <code>fail</code> calls are all similar (<code>monet.Validation.fail([{ msg: SOME_MESSAGE, param: 'id' }])</code>), you can make the code DRY by putting that into a helper function:</p>

<pre><code>const fail = msg =&gt; monet.Validation.fail([{ msg, param: 'id' }]);
</code></pre>

<p>Also, <code>switch</code> is almost never the right tool for the job IMO - it's quite verbose and can be error-prone when one forgets to <code>break</code> (which is surprisingly common). If the request type will be either <code>post</code> or <code>get</code>, use the conditional operator to figure out the property to look up on <code>req</code> instead:</p>

<pre><code>const { id } = req[requestType === 'post' ? 'body' : 'query'];
</code></pre>

<p>I'd highly recommend against using loose equality <code>==</code>. It requires an expectation that any reader of the code understands <a href="https://i.stack.imgur.com/35MpY.png" rel="nofollow noreferrer">its strange rules</a>. Better to use strict equality. Or, if the <code>id</code> or <code>problem</code>, if it exists, will be truthy (which sounds likely), it would look even nicer to use a truthy test:</p>

<pre><code>if (!id) {
    return fail('Missing id of the problem');
}
</code></pre>

<p>If you <em>actually need</em> the logic you're implementing with <code>==</code> to check that the expressions aren't <code>null</code> <em>and</em> aren't <code>undefined</code> (but could be anything else, including other falsey values), then best to test both of those explicitly:</p>

<pre><code>if (id === null || id === undefined) {
    return fail('Missing id of the problem');
}
</code></pre>

<p>I think it would also be useful to follow the standard Javascript naming conventions and use <code>camelCase</code> for variable names in most cases.</p>

<p>All together:</p>

<pre><code>const fail = msg =&gt; monet.Validation.fail([{ msg, param: 'id' }]);
async function validateRequestArgs(req, requestType) {
    const { id } = req[requestType === 'post' ? 'body' : 'query'];
    if (!id) {
        return fail('Missing id of the problem');
    }
    const problem = await models.Problem.findByPk(id);
    if (!problem) {
        return fail(`Problem with id ${id} does not exist`);
    }
    return monet.Validation.success(problem);
}
</code></pre>
    </div>