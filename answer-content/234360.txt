<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Just some small things:</p>

<p><code>find_path</code> could be neatened up a bit using <code>any</code> and <code>chain</code> from <code>itertools</code>:</p>

<pre><code>from itertools import chain

def find_path(file):
    for path, dirs, files in os.walk(os.getcwd()):
        if any(x == file for x in chain(files, dirs)):
            return os.path.join(path, file)

    return None
</code></pre>

<p><code>chain</code> essentially lets you lazily concatenate any iterables. If <code>files</code> and <code>dirs</code> are lists, and you don't mind a little extra overhead, you could just replace that bit with:</p>

<pre><code>any(x == file for x in files + dirs)
</code></pre>

<p>A thing to note though, it's possible for <code>find_path</code> to return <code>None</code> in your current code! This will cause <code>TypeError: 'NoneType' object is not iterable</code> and similar errors. You may want to ensure that it returns something valid before you use it. This can be done neatly using Python 3.8's assignment expression:</p>

<pre><code>if found := find_path(. . .):
    print("Path was found")

else:
    print("find_path returned None")
</code></pre>

<p>Regardless though, if you want to allow a function to return <code>None</code>, you should <em>explicitly</em> return <code>None</code> instead of relying on the default behavior.</p>

<hr>

<p>In multiple places, you write basically this:</p>

<pre><code>get_close_matches(#, #, cutoff=0.4)
</code></pre>

<p>If you ever decide that you want to change the 0.4 cutoff, you need to track down all the places that it's used. Don't use magic numbers. Instead, define that as a constant and use the constant:</p>

<pre><code>STANDARD_CUTOFF = 0.4

. . .

get_close_matches(directory, dir_list, cutoff=STANDARD_CUTOFF)
</code></pre>

<p>Now, you only need to change <code>STANDARD_CUTOFF</code> in the one place to have the change happen everywhere.</p>

<hr>

<p>In <code>dir_search</code> you have at the bottom:</p>

<pre><code>except:
    print('Could not find directory "{}"!'.format(directory))
</code></pre>

<p>This is a problem. The <code>try</code> is wrapping essentially eight lines of dense code, and you're using a catch-all <code>except</code>. What if you accidentally inserted an error in there when editing the code? You'll get <code>'Could not find directory "{}"!'</code> messages that mask the real error that you're getting. Specify the exact exception you want to catch so you don't accidentally silence actual errors. I'm assuming you want:</p>

<pre><code>except IOError:
    print('Could not find directory "{}"!'.format(directory))
</code></pre>

<hr>

<pre><code>if order == "search":
    website = command.split()[1]

    if website in websites:
        webbrowser.open("{}{} {}".format(duckurl, websites[website], command[command.index(command.split()[2]):]))
        return True
    else:
        webbrowser.open(duckurl + command[command.index(command.split()[1]):])
        return True
</code></pre>

<p>Notice how both the branches there end in a <code>return True</code>. That can just be taken out:</p>

<pre><code>if order == "search":
    website = command.split()[1]

    if website in websites:
        webbrowser.open("{}{} {}".format(duckurl, websites[website], command[command.index(command.split()[2]):]))
    else:
        webbrowser.open(duckurl + command[command.index(command.split()[1]):])

    return True
</code></pre>

<p>You could try getting rid of the duplicated <code>webbrowser.open</code> call too. Maybe:</p>

<pre><code>if website in websites:
    url = "{}{} {}".format(duckurl, websites[website], command[command.index(command.split()[2]):])

else:
    url = duckurl + command[command.index(command.split()[1]):]

webbrowser.open(url)

return True
</code></pre>

<p>If the lines defining <code>url</code> were shorter, you could use a conditional expression here too and avoid the double definitions. That doesn't work well here unfortunately though.</p>

<hr>

<pre><code>elif order == "refresh" or order == "reload":
</code></pre>

<p>This can be neatened up a bit using <code>in</code>:</p>

<pre><code>elif order in {"refresh", "reload"}:
</code></pre>

<p>I'm using a set, but in a case like this, a list would work fine as well.</p>

<hr>

<p>I agree with @bhathiya-perera though about <code>exe</code>. It's far too long, and having it as a series of <code>order ==</code> has two issues:</p>

<ul>
<li><p>It makes adding commands more difficult. Any time you want to add a new command, you need to modify a central function. Ideally, you should be modifying code as little as possible once it's pretty, tested and working. The less opportunities you have to add bugs to code, the better.</p></li>
<li><p>It will be a trivial difference, but the commands lower in the <code>elif</code> checks will take longer, because each time, you needed to check all the commands before it. I think a dictionary maping strings to functions would be a much cleaner long term solution, and would potentially allow users of your library to add their own commands (without needing to edit your source).</p></li>
</ul>
    </div>