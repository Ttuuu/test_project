<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I will review just one small aspect of the entire question.</p>
<p>You have <code>return 'ERROR';</code>, which is ... confusing.</p>
<p>On the languages I'm familiar with, there are 2 ways to handle errors:</p>
<ol>
<li>Return <code>null</code></li>
<li>Throw an exception</li>
</ol>
<p>You do option #3: return something unexpected with a different type than what you're expecting.</p>
<p>Instead, I suggest that you do this:</p>
<pre><code>throw new TypeError('Both values must be numbers');
</code></pre>
<p>The <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError" rel="nofollow noreferrer"><code>TypeError</code> exception</a> is clear on what the problem is: the type of some value is wrong.</p>
<p>This way, it's easier to handle and can be caught by a <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/try...catch" rel="nofollow noreferrer"><code>try...catch</code> block</a>.</p>
<hr>
<p>A tiny nitpick: your function is called <code>sumAll</code>.  But sum all? What's this "all"?</p>
<p>I suggest the name <code>sumRange</code> or similar, with the variables <code>start</code> and <code>end</code>.</p>
<p><code>lowEnd</code> and <code>highEnd</code> sounds like you're talking about the lower or higher bits from a single number that was split to fit into smaller values (like a 16-bit number into 2 8-bit variables).</p>
<hr>
<p>Another tiny nitpick, why don't you do <code>function sumAll(...)</code> instead of <code>const sumAll = function(...)</code>?</p>
<p>This created an unnamed anonymous function, while <code>sumAll</code> creates a named function that belongs in the current scope, and can be called <em>before</em> it is declared, as long as it is available in the same scope (also known as <a href="https://developer.mozilla.org/en-US/docs/Glossary/Hoisting" rel="nofollow noreferrer">"hoisting"</a>).</p>
    </div>