<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I am posting this as an answer after many edits to the question and trials of the array function. Best one can be seen in <a href="https://www.youtube.com/watch?v=IM4rwlzs5_8" rel="nofollow noreferrer">this YouTube video</a>. Fixed errors and following function is the result. Please suggest improvements. Thank you</p>
<pre><code>Option Explicit
'WWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWW
Function Color_Array(Optional RGB_Array As Boolean = False, Optional Number_of_Cells As Long = 1, _
        Optional First_Shade As Byte = 140, Optional Last_Shade As Byte = 240, _
        Optional Shade_Step As Byte = 25, Optional Skip_Black As Boolean = True)
'--------------------------------------------------------------------------------------------
'This function gives array of combinations of RGB colors
'There are two array options
' -- &gt; (1) RGB Array (values for red, green and blue) For this ensure "RGB_Array" boolean is true
' -- &gt; (2) Long Color Values. For this ensure "RGB_Array" boolean is false
'First_Shade is the color number from where to start. Say 140 default value
'Last_Shade is the color number where to end. Say 240 as default value
'Default 240 - 150 = 90 gives 90*90*90 = 729000 unique color combinations, enough for excel
'However, Excel permits only 64000 format styles.
'Refer https://docs.microsoft.com/en-us/office/troubleshoot/excel/too-many-different-cell-formats-in-excel#:~:text=Cause,are%20applied%20to%20a%20cell.
'Shade_Step is the desired gap/interval between the two consecutive shades
'If every color combination is desired then Shade_Step = 1
'Say, if every 5th color combination is desired then Shade_Step = 5
'We can skip the first black color RGB(0,0,0), with Skip_Black = True
'--------------------------------------------------------------------------------------------
'Declaration of variables
Dim r As Byte, g As Byte, b As Byte ', Shade_Step As Byte
Dim i As Byte, j As Byte, k As Byte, l As Long, Number_Of_Shades As Long
Dim arr As Variant
'--------------------------------------------------------------------------------------------
'Caculations of variable values
Number_Of_Shades = WorksheetFunction.RoundUp((Number_of_Cells + 1) ^ (1 / 3), 0)
Shade_Step = WorksheetFunction.Min(Shade_Step, WorksheetFunction.RoundDown(((Last_Shade - First_Shade + 2) / (Number_Of_Shades - 1)), 0))
'--------------------------------------------------------------------------------------------
'Sizing array depending on whether RGB_Array and Skip_Black booleans are true or false
If RGB_Array = True Then
    If Skip_Black = True Then
        ReDim arr(1 To ((Number_Of_Shades ^ 3) - 1), 1 To 3)
    Else
        ReDim arr(1 To Number_Of_Shades ^ 3, 1 To 3)
    End If
Else
    If Skip_Black = True Then
        ReDim arr(1 To ((Number_Of_Shades ^ 3) - 1), 1 To 1)
    Else
        ReDim arr(1 To Number_Of_Shades ^ 3, 1 To 1)
    End If
End If
'--------------------------------------------------------------------------------------------
'Loop populating array
r = 0
l = 0
For i = 1 To Number_Of_Shades
    g = 0
    For j = 1 To Number_Of_Shades
        b = 0
        For k = 1 To Number_Of_Shades
            l = l + 1
'--------------------------------------
'Populate array depending on whether RGB_Array and Skip_Black booleans are true or false
            If RGB_Array = True Then
                If Skip_Black = True And l &gt; 1 Then
                    arr(l - 1, 1) = r
                    arr(l - 1, 2) = g
                    arr(l - 1, 3) = b
                Else
                    arr(l, 1) = r
                    arr(l, 2) = g
                    arr(l, 3) = b
                End If
            Else
                If Skip_Black = True And l &gt; 1 Then
                    arr(l - 1, 1) = RGB(r, g, b)
                    Else
                    arr(l, 1) = RGB(r, g, b)
                End If
            End If
'--------------------------------------
            If b = 0 Then b = First_Shade Else b = b + Shade_Step
        Next
        If g = 0 Then g = First_Shade Else g = g + Shade_Step
    Next
    If r = 0 Then r = First_Shade Else r = r + Shade_Step
Next
'--------------------------------------------------------------------------------------------
Color_Array = arr
End Function
'WWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWW
</code></pre>
<p>Here is VBA code for <a href="https://www.youtube.com/watch?v=IM4rwlzs5_8" rel="nofollow noreferrer">the YouTube video</a>.</p>
<pre><code>Sub RandomColorMyRange()
' This procedure colors each cell in a given range/ selection with unique random color
Dim Number_of_Cells As Long, RGB_Start As Byte, RGB_End As Byte, rng As Range
Dim cell As Range, arr As Variant, i As Long, j As Long, x As Long
Dim ColorsColl As New Collection, CellAddress As New Collection

Set rng = Selection 'WWWWWWW Enter this Range
Number_of_Cells = rng.Cells.Count

RGB_Start = 100 'WWWWWWW Enter this value or default is 150
RGB_End = 240   'WWWWWWW Enter this value or default if 240
'If this color range is not enough for number of cells then formula uses default.

arr = Color_Array(False, Number_of_Cells, RGB_Start, RGB_End, 50, True)
'First boolena RGB_Array = false
'Second boolean Skip_Blank = True for skipping first row black color RGB(0,0,0)
'enter max shade_step (upto 255) for max rnage of colors
x = UBound(arr, 1)

For j = 1 To UBound(arr, 1)
ColorsColl.Add arr(j, 1)
Next

For Each cell In Selection
CellAddress.Add cell.Address
Next

For Each cell In Selection
    i = WorksheetFunction.RandBetween(1, ColorsColl.Count)
    j = WorksheetFunction.RandBetween(1, CellAddress.Count)
    
    If CellAddress.Count &lt;&gt; 1 Then
    Range(CellAddress.Item(j)) = ColorRGBValue(ColorsColl.Item(i), 2)
    Range(CellAddress.Item(j)).Interior.Color = ColorsColl.Item(i)
    ColorsColl.Remove (i)
    CellAddress.Remove (j)
    
    Else
    Range(CellAddress.Item(1)) = ColorRGBValue(ColorsColl.Item(i), 2)
    Range(CellAddress.Item(1)).Interior.Color = ColorsColl.Item(i)
    End If
    Application.StatusBar = CellAddress.Count
Next

End Sub
</code></pre>
<p>Following is additional procedure</p>
<pre><code>Sub ColorMyRange() 'Not random
' This procedure colors each cell in a given range (or selection) with unique color at given shade_step
Dim Number_of_Cells As Long, RGB_Start As Byte, RGB_End As Byte, rng As Range
Dim cell As Range, arr As Variant, i As Long, j As Long, x As Long
Dim Cell_Address As New Collection

Set rng = Selection 'WWWWWWW Enter this Range
Number_of_Cells = rng.Cells.Count

RGB_Start = 100 'WWWWWWW Enter this value or default is 150
RGB_End = 240   'WWWWWWW Enter this value or default if 240
'If this color range is not enough for number of cells then formula uses default.

arr = Color_Array(False, Number_of_Cells, RGB_Start, RGB_End, 200, True)
'First boolena RGB_Array = false
'Second boolean Skip_Blank = True for skipping first row black color RGB(0,0,0)
'enter max shade_step (upto 255) for max rnage of colors
x = UBound(arr, 1)
'Debug.Print UBound(arr, 1) &amp; vbTab &amp; UBound(arr, 2)
i = 1
For Each cell In Selection
    cell = ColorRGBValue(arr(i, 1), 2)
    cell.Interior.Color = arr(i, 1) 'RGB(arr(i, 1), arr(i, 2), arr(i, 3))
    i = i + 1
    Application.StatusBar = i
Next

End Sub
</code></pre>
<p><a href="https://i.stack.imgur.com/k0diR.gif" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/k0diR.gif" alt="enter image description here"></a></p>
    </div>