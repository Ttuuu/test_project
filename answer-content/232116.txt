<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>All the code looks like you are very experienced since you didn't make any obvious mistakes.</p>

<p>Some small things to consider:</p>

<ul>
<li><p>I'd compile the release binary with assertions enabled since I prefer an obvious crash over undefined behavior.</p></li>
<li><p>Since you don't include <code>&lt;assert.h&gt;</code> at all, you don't need the <code>-DNDEBUG</code> flags at all since they won't make any difference.</p></li>
<li><p>The headers from the C standard library should be sorted alphabetically.</p></li>
<li><p>The function name <code>isvalid</code> is reserved for future versions of the C standard library, though I don't think that name will ever be taken. The name <code>isvalid</code> is way too unspecific to land in the standard library. In the narrow scope of a base64 encoder/decoder, the name is perfect.</p></li>
<li><p>Your decision to have 18 table entries per line looks a bit arbitrary to me. I'd select 16 since that's how the code points in ASCII are arranged.</p></li>
<li><p>The decoding table assumes that the execution character set is ASCII. Try running this program on an IBM machine. :)</p></li>
<li><p>Since you already use the <code>const</code> keyword, it makes sense to use it for <code>enctable</code> and <code>dectable</code> as well.</p></li>
<li><p>At the very end of the program, you could check <code>stdin</code> and <code>stdout</code> for I/O errors and in such a case return <code>EXIT_FAILURE</code>.</p></li>
<li><p>Having a test suite with even fuzzing included makes the code trustworthy. :)</p></li>
<li><p>The Makefile even works on ancient Solaris where <code>/bin/sh</code> does not even know about functions. In such a situation, one can just set <code>PATH</code> before running make and thereby provide a sane shell.</p></li>
<li><p>Thank you for including <code>DESTDIR</code> in the Makefile. :)</p></li>
<li><p>For installing the program, you should not use <code>cp</code>:</p>

<ul>
<li><p>It will overwrite the file in-place, which leads to problems if the program is still running while being overwritten.</p></li>
<li><p>It doesn't overwrite write-protected files. Use <code>install -m 555 b64 $(DESTDIR)$(PREFIX)/bin/</code> instead.</p></li>
</ul></li>
</ul>

<p>In my mind the program is ready to be used and packaged. You might write a manual page to make the distribution package complete.</p>
    </div>