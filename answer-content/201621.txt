<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Don't overuse <code>var</code>.</p>

<pre><code>var resp *http.Response
resp, err = http.Get(labelsUrl)

// or

resp, err := http.Get(labelsUrl)
</code></pre>

<p>Stick to the latter, <a href="https://golang.org/ref/spec#Short_variable_declarations" rel="nofollow noreferrer">short variable declaration</a>. No need to use <code>var</code> unless you <em>really</em> need one.</p>

<p>Here we must use var because it is package level block.</p>

<pre><code>var Problem Category = Category{
    Name:        "problems",
    Description: "Issues that make the product feel broken. High priority, especially if its present in production.",
    Color:       "#CC0033",
}

// or

var Problem = Categoty{ // &lt;-- no type here
    Name:        "problems",
    Description: "Issues that make the product feel broken. High priority, especially if its present in production.",
    Color:       "#CC0033",
}
</code></pre>

<p>If we have multiple definitions we may use <code>var</code> as a block:</p>

<pre><code>var (
    Problem = Category{
        Name:        "problems",
        Description: "Issues that make the product feel broken. High priority, especially if its present in production.",
        Color:       "#CC0033",
    }

    Platform = Category{
        Name:        "platform",
        Description: "If the repository covers multiple parts, this is how we designate where the issue lives. (i.e. iOS and Android for cross-platform tablet app).",
        Color:       "#A295D6",
    }
)
</code></pre>

<p><code>var</code> blocks behave simulary to <code>import</code>, <code>const</code>, and <code>type</code> blocks. No need to repeat your self.</p>

<p><code>init</code> is not a good place to do an HTTP request. It will block all other code and <code>main</code> for <a href="https://stackoverflow.com/a/13087392">rather long time</a> until it succeeds or fails for reasons. Also it's important to handle possible networking errors which you've ignored with <code>_</code>.</p>

<p>It's nice that you've used streaming API instead of general Marshal/Unmarshal calls which may get <em>very</em> memory hungry.</p>

<p>Consider using <code>os.Exit(1)</code> or <code>log.Fatal*</code> functions to terminate process with non-zero return code. <code>panic</code> will do the thing as well.</p>

<p>Fields from struct <code>Label</code> doesn't follow Go naming conventions. If you need to handle different JSON names use <a href="https://golang.org/pkg/encoding/json/#Marshal" rel="nofollow noreferrer">field tags</a>.</p>
    </div>