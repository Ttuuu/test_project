<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I agree with Mathias Ettinger's use of <code>set</code>s and <code>deque</code>s, with two changes:</p>

<ul>
<li>name the set <code>seen</code> instead of <code>visited</code>, because your algorithm adds to set before visiting.</li>
<li><p>add the root to <code>seen</code> before entering while loop. Otherwise the root may be revisited (eg test case below where 1 points back to 0).</p>

<pre><code>import collections

def bfs(graph, root):
    seen, queue = set([root]), collections.deque([root])
    while queue:
        vertex = queue.popleft()
        visit(vertex)
        for node in graph[vertex]:
            if node not in seen:
                seen.add(node)
                queue.append(node)

def visit(n):
    print(n)

if __name__ == '__main__':
    graph = {0: [1, 2], 1: [2, 0], 2: []} 
    bfs(graph, 0)
</code></pre>

<p>Outputs:</p>

<pre><code>0
1
2
</code></pre></li>
</ul>
    </div>