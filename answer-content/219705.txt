<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<pre><code>#create a set of the differences between K and L including duplicate elements that sum to K
diff = {k-x for i, x in enumerate(l) if k != 2*x or x in l[i+1:len(l)]}
</code></pre>
</blockquote>

<p>The slice can be simplified:</p>

<pre><code>diff = {k-x for i, x in enumerate(l) if k != 2*x or x in l[i+1:]}
</code></pre>

<p>In my opinion, the <code>or x in l[i+1:]</code> is a bit too tricky to use without further explanation. My immediate reaction on seeing it was that it undermined the whole point of using a set by creating a quadratic worst case. On further reflection I see that (assuming Python is sensibly implemented, which I think is a safe assumption here) it doesn't, but it's better to preempt the doubt with a comment.</p>

<p>Alternatively, handle the special case separately by checking whether <code>k</code> is even and if so counting instances of <code>k // 2</code>.</p>

<hr>

<p>As an optimisation, you can keep only the half of each pair in <code>diff</code>:</p>

<pre><code>diff = {k-x for x in l if 2*x &lt; k}
</code></pre>

<hr>

<blockquote>
<pre><code>#Return true if an element of Diff is in L
print(bool(diff.intersection(l)))
</code></pre>
</blockquote>

<p>This is a bit cryptic. I think it might be more pythonic to use <code>any</code>:</p>

<pre><code>print(any(x in l if x in diff))
</code></pre>

<p>That's also potentially faster, because it can abort on finding the first solution.</p>
    </div>