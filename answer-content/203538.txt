<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>As far as file handling goes this seems pretty basic so not much to say about that. There are some minor points to note though.</p>

<ul>
<li><p>Consider moving private members below public ones. Most users of libraries care about the interface not the implementation.</p></li>
<li><p>I think you can get away with not defaulting/deleting your ctors/dtors here. You don't use any of them so you might as well drop them and let the compiler handle it.</p></li>
<li><p>In my opinion you should not omit parameter names from your interface as it makes it harder to understand.</p></li>
<li><p>Your variable names in general could use some work to make them more telling.<br>
E.g. what exactly is token and what does it do? Why is it compared to 0/1?<br>
<code>fp</code> is another name that should probably be changed so people don't think of C-style file pointers when they read it. Even something simple as <code>instream</code> or <code>outstream</code> (depending on use case) would be more indicative of what it is and does.<br>
<code>successfull</code>: A common typo but it's written without the 2nd <code>l</code>. </p></li>
<li><p>Hardcoding filenames all over the program is not the best of ideas. What if you want to change them later on? At least have all the names in one place or pass them in when you create the objects.</p></li>
<li><p>Instead of writing <code>std::fstream foo;</code> and <code>foo.open("bar.baz", std::ios::out);</code> you can write <code>std::ofstream</code> or <code>std::ifstream</code>.<br>
E.g <code>std::ifstream infile{"foo.bar};</code>.</p></li>
<li><p>I really don't understand why <code>Library</code> derives from either <code>Student</code> or <code>Book</code>. Not only is it unneccessary but also makes no sense.</p></li>
</ul>
    </div>