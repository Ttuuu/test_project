<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>In addition to @MaartenBodewes brilliant answer some words to your unit tests:</p>

<h1>what I like</h1>

<ul>
<li>the fact that you have unit tests at all.</li>
<li>the naming is well thought of.</li>
</ul>

<h1>what I don't like</h1>

<ul>
<li><p>Do not reduce the content of a test method to a single line.</p>

<p>Unit tests are <strong>documentation</strong>. You should write your unit test in a way, that they describe the testes expectation in detail. One formal way to do that is to keep the <em>arrange</em>, <em>act</em>, <em>assert</em> structure of each test. </p>

<pre><code> @Test
 public void return_0_when_input_is_empty() {
    // arrange  
    String input = "";
    String expectedOutput = "0"
    // act 
    String testResult =  new StringCalculator().sum(input);
    // assert 
    assertEquals(expectedOutput, testResult);
 }
</code></pre>

<p>For the same reason prefer the <code>assert*</code> methos with that extra <code>String</code> parameter so that you get a more descriptive output when the test fails:</p>

<pre><code> @Test
 public void return_0_when_input_is_empty() {
    // ...
    // assert 
    assertEquals("empty string",expectedOutput, testResult);
 }
</code></pre></li>
<li><p>verify only one expectation on your code with every test method.</p>

<p>While the testing framework will execute all test methods regardless of whether they fail or not a test method will stop a the first failing <code>assert</code> instruction. 
This will reduce the information you get about the reason why your code failed.</p>

<pre><code> @Test
 public void
 return_correct_sum_when_delimiter_is_semicolon() {
     assertEquals("3", given("//;\n1;2"));
 }

 @Test
 public void
 return_correct_sum_when_delimiter_is_pipe() {
     assertEquals("3", given("//|\n1|2"));
 }

 @Test
 public void
 return_correct_sum_when_delimiter_is_newline() {
     assertEquals("8", given("//@@\n1@@2@@5"));
 }

 @Test
 public void
 return_correct_sum_when_delimiter_is_string() {
     assertEquals("5", given("//sep\n2sep3"));
 }
</code></pre>

<p>For the time being this will force you to create more test methods, but soon you'll find out how to do this with <em>parameterized tests</em>.</p>

<p><strong>Disclaimer</strong> "one assert per test method" is a <em>rule of thumb</em>, not a natural law. There might be situations where more that one assert per method is needed, but if you're going to do that you should have a really good reason to do so.</p></li>
</ul>
    </div>