<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<pre><code>#define int long long
</code></pre>
</blockquote>

<p>Not only is redefining <code>int</code> a bad idea, but using <code>long long</code> should be reserved for legacy code. Use <code>&lt;cstdint&gt;</code> and (given the ranges used in this code) <code>std::uint_fast32_t</code>.</p>

<hr>

<blockquote>
<pre><code>    if (limit &gt; 2) 
        cout&lt;&lt;"2 ";
    if (limit &gt; 3) 
        cout&lt;&lt;"3 ";

    ... 21 lines ...
    for(int i=sieve._Find_first();i&lt; sieve.size();i = sieve._Find_next(i))
    {
        if(i==0||i==1)continue;
        cout&lt;&lt;i&lt;&lt;" ";
    }
</code></pre>
</blockquote>

<p>Why not put the special cases (and the output in general) together at the end? And would it not be more transparent to do something like this?</p>

<pre><code>    // Special cases: numbers smaller than the first prime or used in the wheel.
    sieve.reset(0);
    sieve.reset(1);
    sieve.set(2);
    sieve.set(3);
    sieve.set(5);
</code></pre>

<hr>

<blockquote>
<pre><code>    for (int x = 1; x * x &lt; limit; x++) {
        for (int y = 1; y * y &lt; limit; y++) {
            int n = (4 * x * x) + (y * y);
            if (n &lt;= limit &amp;&amp; (n % 12 == 1 || n % 12 == 5))
                sieve.flip(n);

            n = (3 * x * x) + (y * y);
            if (n &lt;= limit &amp;&amp; n % 12 == 7)
                sieve.flip(n);

            n = (3 * x * x) - (y * y);
            if (x &gt; y &amp;&amp; n &lt;= limit &amp;&amp; n % 12 == 11)
                sieve.flip(n);
        }
    }
</code></pre>
</blockquote>

<p>This looks rather inefficient. The first step in speed optimisation is to split out the cases and for each one iterate only over the <code>(x,y)</code> pairs which yield the relevant residues. E.g. for <span class="math-container">\$4x^2 + y^2 \in \{1, 5\} \pmod{12}\$</span> we have <span class="math-container">\$y \in \{1,5,7,11\} \pmod{12}\$</span> with any <span class="math-container">\$x\$</span>; or <span class="math-container">\$y \equiv 3 \pmod{6}\$</span>, <span class="math-container">\$x \not\equiv 0 \pmod{3}\$</span>.</p>

<p>Not only does this save a whole lot of <code>n % 12 == k</code> checks, but it allows you to break out of each loop independently when the quadratic form hits <code>limit</code>.</p>

<p>Moreover, if you structure it carefully you can handle each residue with a separate <code>bitset</code>, which allows parallelisation.</p>

<hr>

<p>The second speed optimisation is to look at the binary quadratic forms (BQFs) used. If you split the residues modulo 60 instead of modulo 12 then I find that there's a theoretical improvement of about 6% by using <a href="https://codereview.stackexchange.com/q/168769/1402">the following BQFs</a>:</p>

<p><span class="math-container">$$\begin{array}{} n \bmod 60 &amp; \textrm{BQF} \\
1, 19, 31, 49 &amp; 15x^2 + y^2 \\
7, 43 &amp; 3x^2 + y^2 \\
11, 59 &amp; 3x^2 - y^2 \\
13, 29, 37, 41 &amp; 4x^2 + y^2 \\
17, 23, 47, 53 &amp; 5x^2 + 3y^2 \\
\end{array}$$</span></p>
    </div>