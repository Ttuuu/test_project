<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You are currently calculating the sum of all possible subarrays. A different approach is to imagine a sliding window on the array. If the sum of the elements in this window is smaller than the target sum, you extend the window by one element, if the sum is larger, you start the window one element later. Obviously, if the sum of the elements within the window is the target, we are done.</p>

<p>This algorithm only works if the array contains only non-negative numbers (as seems to be the case here when looking at the possible answers).</p>

<p>Here is an example implementation:</p>

<pre><code>def contiguous_sum(a, target):
    start, end = 0, 1
    sum_ = sum(a[start:end])
    # print(start, end, sum_)
    while sum_ != target and start &lt; end &lt; len(a):
        if sum_ &lt; t:
            end += 1
        else:
            start += 1
            if start == end:
                end += 1
        sum_ = sum(a[start:end])
        # print(start, end, sum_)
    return sum_ == target
</code></pre>

<p>This algorithm can be further improved by only keeping a running total, from which you add or subtract:</p>

<pre><code>def contiguous_sum2(a, t):
    start, end = 0, 1
    sum_ = a[0]
    #print(start, end, sum_)
    while sum_ != t and start &lt; end &lt; len(a):
        if sum_ &lt; t:
            sum_ += a[end]
            end += 1
        else:
            sum_ -= a[start]
            start += 1
            if start == end:
                sum_ += a[end]
                end += 1
        #print(start, end, sum_)
    return sum_ == t
</code></pre>

<p>The implementation can be streamlined further by using a <code>for</code> loop, since we actually only loop once over the input array, as <a href="https://codereview.stackexchange.com/questions/215505/brilliant-org-arrays-intermediate-3-contiguous-knapsack/215516?noredirect=1#comment416876_215516">recommended in the comments</a> by <a href="https://codereview.stackexchange.com/users/42401/peilonrayz">@Peilonrayz</a>:</p>

<pre><code>def contiguous_sum_for(numbers, target):
    end = 0
    total = 0
    for value in numbers:
        total += value
        if total == target:
            return True
        while total &gt; target:
            total -= numbers[end]
            end += 1
    return False
</code></pre>

<p>All three functions are faster than your algorithm for random arrays of all lengths (containing values from 0 to 1000 and the target always being 100):</p>

<p><a href="https://i.stack.imgur.com/aXSyt.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/aXSyt.png" alt="enter image description here"></a></p>
    </div>