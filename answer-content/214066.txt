<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You problem is very open ended and you can implement in many ways so unfortunately my answer will be rather open ended too. To start, a few general remarks:</p>

<ul>
<li>I normally use <code>string.IsNullOrWhitespace(blah)</code> instead of <code>string.IsNullOrEmpty(blah)</code></li>
<li>Don't throw <code>NullReferenceException</code>. Throw <code>ArgumentNullException(nameof(argumentName))</code>. That's what it's there for.</li>
<li>C# typically uses PascalCase for constant names: <code>ReputationRequiredToBid</code>.</li>
<li><code>ArithmeticException</code> - you're not supposed to use this class as per <a href="https://docs.microsoft.com/en-us/dotnet/api/system.arithmeticexception?view=netframework-4.7.2#remarks" rel="noreferrer">documentation</a>.</li>
<li>While I don't agree with your (over)use of exceptions, you should use <a href="https://docs.microsoft.com/en-us/dotnet/api/system.invalidoperationexception?view=netframework-4.7.2" rel="noreferrer"><code>InvalidOperationException</code></a> instead of <code>ArgumentException</code>s when the current state breaks the code, and not the otherwise valid and well formed argument(s). For example a negative <code>value</code> should throw an <code>ArgumentOutOfRangeException</code> or simply an <code>ArgumentException</code>, however <code>CurrentHighestBid &gt; value</code> should throw an <code>InvalidOperationException</code> or a custom exception (I don't like custom exceptions though - keep reading for alternatives).  </li>
</ul>

<p>Anyway you're definitely overusing exceptions in my opinion. Consider creating a separate validation class and moving the validation code there - single responsibility principle. Consider returning a <code>ValidationResult</code> object with details about what went wrong, potentially in a <code>IEnumerable&lt;string&gt; Errors</code> property. I would probably still throw <code>ArgumentException</code>s for nonsensical arguments, like negative bid.</p>

<p>If I need to throw an exception, in 99% of the cases it's a variation of <code>ArgumentException</code>, and occasionally <code>InvalidOperationException</code>. The end result is that the code I write uses them quite rarely, and in predictable places, such as the entry point of the method etc. If I review a piece of code that throws any other exceptions, I'm expecting to see or hear a very strong reason for that. And an even stronger reason if the exception is a custom exception. In short, especially if you don't have experience, stay away from doing anything crazy with exceptions. They're not bad per se, but there are more elegant and readable solutions out there.</p>

<p>Bid class - parameter validation maybe?</p>
    </div>