<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<p>Is there a better way to write the JS?</p>
</blockquote>
<p>Yes there is.</p>
<p>First off, lets face it, your function <code>fixMenus</code> looks quite complex and a double for loop in one function is usually a big "no no" sign. Any company with a coding standard would want this to be different.</p>
<p>You have a double for loop with some conditions and some HTML building. That's a lot for one function and it looks hard to test accurately.</p>
<p>Your function does the following things</p>
<ol>
<li>Loops through each menu</li>
<li>Destructures some data</li>
<li>Loops through a sublist to apply a class</li>
<li>Applies the new menu to the variable</li>
</ol>
<p>So instead of having one function handle all this, let's break it up.</p>
<h1>Make small simple functions that are easy to test</h1>
<p>The concept of Test Driven Development (TDD) forces you to write code that is:</p>
<ol>
<li>Easy to understand</li>
<li>Easy to test</li>
</ol>
<p>This by itself already forces you to write better code and smaller functions.</p>
<p>You're probably not doing TDD, but writing code <em>as if you were</em> is already a great step!</p>
<h2>Focus on the simple tasks</h2>
<ul>
<li><code>fixMenus</code> should call <code>generateMenus</code> and ultimately <code>generateMenu</code></li>
<li>Use Array#map and Array#join instead of <code>forEach</code></li>
<li>create a function to update the actives</li>
<li>create a function to generate your html string</li>
</ul>
<pre><code>function updateActives(subItems){
   for (let i of subItems) {
      if (i.firstElementChild.href === window.location.href) {
        i.firstElementChild.classList.add(`is-active`);
      }
   }
}

function createMenu(labels, subMenus){
  return `
    &lt;p class="menu-label"&gt;${labels}&lt;/p&gt;
    &lt;ul class="menu-list"&gt;
       ${subMenus}
    &lt;/ul&gt;
  `
}

function generateMenu(item){
  const {children:[elem1, elem2]} = item;
  updateActives(elem2.children);
  return createMenu(elem1.innerHTML, elem2.innerHTML);
}

function generateMenus(items){
  return items.map(item =&gt; generateMenu(item)).join("");
}

function fixMenus(menu, items){
  menu.remove();
  return generateMenus(items);
}
</code></pre>
    </div>