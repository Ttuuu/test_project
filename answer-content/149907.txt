<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Obviously @Comintern knocks out the bit-swapping part, so this answer is more about, well, every other aspect of the code.</p>

<hr>

<h3>Signature</h3>

<p>Kudos for proper <code>PascalCase</code>!</p>

<p>If the function is meant to be <code>Public</code>, it's probably best to specify it as such. I like that it has an explicit return type, but the parameter is implicitly passed by reference, which is potentially confusing since the function is meant to be "pure" and thus, it's really used as a <code>ByVal</code> parameter and should be specified as such, too. <code>l</code> is a terrible name for it though.</p>

<p>I'd go with this:</p>

<pre><code>Public Function RgbToHex(ByVal rgbValue As Long) As String
</code></pre>

<p>That way none of it is ambiguous or implicit in any way.</p>

<hr>

<h3>Variables and Constant Expressions</h3>

<p>It's only 3 of them so it's probably not big of a deal, but I've seen way too many VBA procedures with a page-length wall-of-declarations at the top to skip this: variables should be declared as close as possible to their usage.</p>

<p>This reads more fluently IMO:</p>

<pre><code>Dim rValue As Long
rValue = rgbValue And ColorConstants.vbRed

Dim gValue As Long
gValue = (rgbValue And ColorConstants.vbGreen) / (2 ^ 8)

Dim bValue As Long
bValue = (rgbValue And ColorConstants.vbBlue) / (2 ^ 16)
</code></pre>

<p>I like how <code>2 ^ 8</code> and <code>2 ^ 16</code> help readability, but not how they need to be computed every time the function is called. Naming them and introducing constants will maintain the readability while avoiding the recalculation:</p>

<pre><code>Const gOffSet As Long = 2 ^ 8
Const bOffSet As Long = 2 ^ 16
</code></pre>

<p>And then:</p>

<pre><code>Dim gValue As Long
gValue = (rgbValue And ColorConstants.vbGreen) / gOffSet

Dim bValue As Long
bValue = (rgbValue And ColorConstants.vbBlue) / bOffSet
</code></pre>

<hr>

<h3>Strings</h3>

<p>Kudos for using the string-returning <code>Right$</code> function: that avoids an implicit conversion from <code>Variant</code> that <code>Right</code> would incur.</p>

<p>However <code>Hex</code> also has a string-returning little brother; you should prefer <code>Hex$</code> over it for the same reason you're using <code>Right$</code> over <code>Right</code>.</p>

<p>I like how you're using line continuations to line up the function calls, it's very elegant. Sad that it's moot with proper bit swapping :)</p>
    </div>