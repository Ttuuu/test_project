<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <ul>
  <li>The use of classes (note I've had to disable <code>too-few-public-methods</code> - was OOP the right way to go, or should I have used e.g. a function factory?);</li>
  </ul>
</blockquote>

<p>I like the idea of being able to have multiple different validation strategies encapsulated in different <code>InputValidator</code> instances. 
So OOP seems fine for me,
despite the <code>too-few-public-methods</code> warning.</p>

<blockquote>
  <ul>
  <li>The implementation of instance caching (is <code>Cached</code> sufficiently reusable in other contexts, or too tightly tied to <code>InputValidator</code>?); and</li>
  </ul>
</blockquote>

<p>It seems a bit hackish. Is caching really worth the pain?
A classed called <code>Cached</code>, and <code>InputValidator</code> inheriting from it seems odd.
From an OOP perspective and Abstract Data Type consideration,
does it really makes sense to say that an <code>InputValidator</code> <em>is a</em> <code>Cached</code>?
Seems weird to me.</p>

<p>And it's not even easy to use.
To benefit from the cache requires a non-trivial custom constructor in  <code>InputValidator</code>.</p>

<p>I think it would be better to separate the caching,
and let the user <em>compose</em> a solution with caching from independent validator and caching components.</p>

<blockquote>
  <ul>
  <li>How the testing is set up.</li>
  </ul>
</blockquote>

<p>It's great that you added the assertions,
it's easy to save one file on my PC and ready to play with it / break it.
You probably know this yourself,
but unit tests are best to be separated,
one independent case per method,
so when something breaks you have a method name to jump to.
And of course run the whole thing in a unit testing framework, for example <code>unittest</code>.</p>

<p>On a somewhat related note, it's better to split this line:</p>

<pre><code>assert VALIDATOR.get_input() == VALIDATOR() == 'test'
</code></pre>

<p>to make it 2 distinct assertions:</p>

<pre><code>assert VALIDATOR.get_input() == 'test'
assert VALIDATOR() == 'test'
</code></pre>

<p>So if one of them fails, you'll know instantly which one.</p>

<p>Lastly, why use ALL CAPS for <code>VALIDATOR</code>? 
Normally that's for global constants, so it looks surprising and unusual.</p>

<h3><code>create_empty_validator</code></h3>

<p>This is a bit of a misnomer.
The other validators include in their name some sort of requirement,
such as a length, minimum or maximum value.
This one sounds like it requires empty input,
but it's the opposite,
the purpose is to require non-empty input.
Perhaps <code>create_nonempty_validator</code> might be a better name.</p>

<p>I find it odd that this validator takes a parameter to decide whether it should actually do something or do nothing.
If I don't want to validate some condition-X,
the normal usage would be to not add the condition-X validator,
as opposed to adding an effectively disabled condition-X validator.
I suppose you did it this way to make it the default to reject empty input.
But this implementation is awkward and unnatural.
It would be better to remove from this method what doesn't really belong,
and refactor the rest of the program appropriately.</p>
    </div>