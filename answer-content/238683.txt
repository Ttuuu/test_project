<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Like I mentioned in <a href="https://codereview.stackexchange.com/a/238606/120114">my answer to your post <em>Check browser compatibility for RequestAnimationFrame and Vanilla JavaScript .animate() API</em></a>, many <a href="/questions/tagged/ecmascript-6" class="post-tag" title="show questions tagged 'ecmascript-6'" rel="tag">ecmascript-6</a> features like arrow functions and the <code>let</code> and <code>const</code> keywords are used, which <strong>cause errors</strong> in some browsers the code aims to target - e.g. IE 10 and older. So instead of an arrow function in the callback to <code>setTimeout()</code> use a regular <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/function" rel="nofollow noreferrer">function expression</a> or the name of a function declared with a <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function" rel="nofollow noreferrer">function declaration</a>, and instead of the <code>const</code> and <code>let</code> keywords, use <code>var</code>.</p>

<hr>

<blockquote>
<pre><code>const LoadRing = document.querySelector(".loader");
</code></pre>
</blockquote>

<p>Is there only one element with that class name? If so, it would likely be more appropriate to use an <em>id</em> selector instead of a class name to select it. </p>

<hr>

<blockquote>
<pre><code>switch(rafSupport ? true : false){
</code></pre>
</blockquote>

<p><code>rafSupport</code> is a boolean (see snippet below for proof) and thus there is no need to use the ternary expression here</p>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>let rafSupport = (window.requestAnimationFrame !== undefined);
console.log('typeof rafSupport: ',typeof rafSupport )</code></pre>
</div>
</div>


<p>The whole <code>switch</code> statement seems like <strong>overkill for a boolean condition</strong> - most developers would stick to <code>if</code>/<code>else</code> statements.</p>

<hr>

<blockquote>
<pre><code>default:    // Default to Css Fallback.
            var AnimeStyle = document.createElement("link");    // Default Classes to be added back in.
                AnimeStyle.setAttribute("rel", "stylesheet");
                AnimeStyle.setAttribute("type", "text/css");
                AnimeStyle.setAttribute("href", "FallBack.css");
                document.getElementsByTagName("head")[7].appendChild(AnimeStyle);
                return false;
</code></pre>
</blockquote>

<p>This section of the <code>switch</code> statement <strong>is unreachable</strong> because:</p>

<ul>
<li>the previous cases are <code>true</code> and <code>false</code>, and</li>
<li>the previous cases both contain <code>break</code> at the end</li>
</ul>

<p>And are there really 8+ elements with the tag name <code>head</code>??</p>

<hr>

<blockquote>
<pre><code>default:
      return false;
                 // Default to Css Fallback. ie ``Add Back in the Classes`` That governed the original Animation.
</code></pre>
</blockquote>

<p>This leads to an error:</p>

<blockquote>
  <p>'return' statement outside of function</p>
</blockquote>
    </div>