<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>In designing classes we should try and confirm to the <a href="http://en.wikipedia.org/wiki/Single_responsibility_principle">Single Responsibility Principle</a>. Each class should only do one thing. Sometimes defining what makes a single responsibility is hard, but your <code>Person</code> class clearly does two things: it represents a person, and it questions the user via the console. This makes it difficult to reuse your <code>Person</code> class: what if you wanted to create a <code>Person</code> from a database, or a file or a web request? You would be better splitting this into a <code>PersonQuestionnaire</code> class which is responsible for creating a <code>Person</code> from a console input.</p>

<p>You should never have any significant logic in your constructor like you have here. <a href="http://msdn.microsoft.com/en-gb/library/vstudio/ms229060%28v=vs.100%29.aspx">Design your constructors to simply save any parameters and set up any default values</a>. Any logic involving external classes, such as the Console, should definitely be placed in another method that is called once the object is constructed. </p>

<p>You should consider using the <a href="http://msdn.microsoft.com/en-gb/library/system.int32.tryparse.aspx"><code>int.TryParse()</code></a> method to read the age. Catching exceptions is slow (you will notice you ever write applications that are doing a lot of this type of thing), verbose, and sometimes unpredictable. You should definitely avoid catching the top level <code>Exception</code> type <a href="http://www.codeproject.com/Articles/7557/Exception-Handling-in-C-with-the-quot-Do-Not-Catch">other than where you can do something meaningful</a>: doing a lot of this will make your applications very difficult to debug.</p>
    </div>