<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Smurf naming convention</h2>

<p><a href="https://blog.codinghorror.com/new-programming-jargon/" rel="noreferrer">Link</a></p>

<pre><code>internal class Player
{
    public string playerName { get; set; }
</code></pre>

<p><code>playerName</code> is redundant since it's a preoperty of the <code>Player</code> class. <code>Name</code> is sufficient.</p>

<hr>

<h2>Assigning a coin option to a player</h2>

<p>There are a few issues here, it's hard to separately address them.</p>

<p><strong>Firstly</strong>, you're violating SRP by making your <code>Player</code> class responsible for UI interactions: </p>

<pre><code>public CoinOptions chooseCoinOption()
{
    //Console.WriteLine("Chose a coin option");
    //Console.ReadKey();

    return coinOption;
}
</code></pre>

<p>I see where your confusion comes from. "The player chooses the side of the coin" is a correct statement. But, and this is an important distinction, this is not equivalent to "<strong>the <code>Player</code> class</strong> should handle <strong>the UI logic</strong> for choosing the side of the coin". The second statement is incorrect as it breaks SRP.</p>

<p>The <code>Player</code> class needs to be <em>told</em> what its option is (= an external caller sets the value). The decision logic for deciding which value to set is not part of the <code>Player</code> class' responsibility. It shouldn't care <em>why</em> or <em>how</em> a particular side was chosen, it should only care <em>which</em> side was chosen.</p>

<p><code>chooseCoinOption()</code> needs to be removed.</p>

<p><strong>Secondly</strong>, the <code>setCoinOption(CoinOptions opponent)</code> method's intention really irks me. </p>

<pre><code>public void setCoinOption(CoinOptions opponent)
{
    coinOption = opponent == CoinOptions.Heads ? CoinOptions.Tails : CoinOptions.Heads;
}
</code></pre>

<p><em>As an aside, <code>opponent</code> is a really bad name for this variable. When reading your code I initially assumed <code>opponent</code> to be of the <code>Player</code> type. A better name for your parameter would've been <code>opponentCoinOption</code>.</em></p>

<p>You're adding in a lot of custom logic that does not simplify the code. Anyone who calls this method needs to know <em>exactly</em> what it does (= pick the other option), which means that it's a meaningless encapsulation. Calling the method does not meaningfully simplify the external caller's responsibility.</p>

<p>When removing the <code>opponent</code> parameter, you are left with a default set method. And since the property already has a public setter:</p>

<pre><code>public CoinOptions coinOption { get; set; }
</code></pre>

<p>There is no point to also having a setter method. You need to remove one of the setters. Which one you remove is up to you. I prefer just using the default <code>set;</code> in this case.</p>

<hr>

<h2>Checking for victory</h2>

<pre><code>public bool didPlayerWin(CoinOptions winningFlip)
{
    return winningFlip == coinOption;
}
</code></pre>

<p>This method doesn't really provide anything. It's a wrapper around an equality check, and the value you're comparing (<code>coinOption</code>) is already publically accessible. </p>

<p>I'd remove this method altogether.</p>

<p>Secondly, I just want to point out that the <code>Player</code> class should not be determining what a <code>Win</code> is. A win is defined by the rules of the game, and the <code>Player</code> does not define the rules of the game. This is again violating SRP.  </p>

<p>As a simple example, imagine if the rules of the game were changed so that you <em>lose</em> the game when your option is called. Suddenly, your method name conflicts with the rules of the game, which proves the point that your <code>Player</code> class somehow depends on the rules of the game you're playing, which means you're leaking your abstractions.</p>

<p>I know this is pedantic, but if you had named this method <code>HasCoinOptionEqualTo(CoinOptions option)</code>, I would not have considered this an SRP vioaltion, because you are no longer <em>checking for a win</em>, you are simply <em>checking an equality (which <strong>coincidentally</strong> just happens to be the win condition of the game you're playing)</em>.</p>

<hr>

<h2>Minor comments</h2>

<pre><code> private List&lt;Player&gt; players = new List&lt;Player&gt;(Enumerable.Repeat(default(Player), 2));
</code></pre>

<p>I don't see you having defined a <code>default</code> for <code>Player</code> anywhere, which means that you're simply creating a list with two <code>null</code> values. What is the benefit of doing so? I suggest simply doing <code>new List&lt;Player&gt;()</code> and adding the players at a later stage.</p>

<p>However, I would take it further and do away with the list altogether. You will always have two players, and you're going to have to create logic to always retrieve the correct player from the list. It's much easier (believe me, I've built a few two player games before) if you just keep these as two separate properties:</p>

<pre><code>private Player player1;
private Player player2;
</code></pre>

<hr>

<pre><code>class Coin { ... }
</code></pre>

<p>I see no added purpose to making an object out of <code>Coin</code>. This can be a simple static class:</p>

<pre><code>public static class Coin
{
    private static Random random = new Random();

    public static CoinOptions Flip()
    {
        // ...
    }
}
</code></pre>

<hr>

<pre><code>internal class CoinGame
{
    public void playCoinFlip() { ... }

    public void gameResult() { ... }
}
</code></pre>

<p>Similar to mentioned before, don't mix your game logic with your UI logic. <code>gameResult()</code> should not be in here.</p>

<p>Instead, <code>playCoinFlip()</code> should <strong>return</strong> the outcome of the game (in whatever form you choose), and then the UI logic can choose to display the outcome however it wants.</p>

<p>This ties into how your main function works:</p>

<pre><code>coinGame.playCoinFlip();
coinGame.gameResult();
</code></pre>

<p>Doing it this way requires the main function to call different methods in a particular order, which again requires the main method to know how the <code>CoinGame</code> works internally, thus infringing on your encapsulation.</p>

<p>It would be much cleaner if you could do something like:</p>

<pre><code>Player winner = coinGame.playGame();

Console.WriteLine($"{winner.Name} won the coin flip!");
</code></pre>

<hr>

<pre><code>public void playCoinFlip()
{
    int chooseIndex = new Random().Next(2);
    int applyIndex = chooseIndex == 0 ? 1 : 0;
    var selectedOption = players[chooseIndex].chooseCoinOption();
    players[applyIndex].setCoinOption(selectedOption);
    winningFlip = coin.flipCoin();
}
</code></pre>

<p>What I find very weird is that you let the external caller (your main function) choose the names of the players, but you don't allow the external caller to choose the <strong>coin option</strong> that each player chooses.</p>

<p><em>I understand that since either choice is a 50/50, it doesn't really matter here. But if that is the case, then <code>Player</code> shouldn't even need a <code>CoinOptions</code> to begin with.</em></p>

<p>I would reshuffle this so your <code>CoinGame</code> receives two <em>players</em>, rather than two names. This gives your external caller to choose the coin options.</p>

<pre><code>public CoinGame(Player p1, Player p2)
{
    player1 = p1;
    player2 = p2;
}
</code></pre>
    </div>