<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Feedack to the code:</strong></p>

<pre><code>this.Id = globalId;
globalId++;
</code></pre>

<p>Could be simplified as</p>

<pre><code>this.Id = globalId++;
</code></pre>

<hr>

<p><code>globalId</code> should not be public</p>

<hr>

<pre><code>switch (Convert.ToInt32(input)) { ... }
</code></pre>

<p>That is not a robust way to parse the input. If the user enters a letter, your program crashs!</p>

<hr>

<ul>
<li><code>MainMenu()</code> can be moved to the end of the MainMenu() method (as recursive call).</li>
<li><code>return</code> is not needed at the end of a method.</li>
<li>The <code>Contains</code>-Extension method is not needed because neither the name, nor the search input can be null.</li>
<li>Use <code>Environment.NewLine</code> or <code>Console.WriteLine</code> instead of "\n".</li>
</ul>

<hr>

<p><strong>Object oriented design</strong></p>

<p>It is good, that there is a person class for storing information about the person.</p>

<p>However, because the interviewer wishs an "understandable object oriented design" I would also try to model the different menu cases as objects.</p>

<p>e.g. </p>

<pre><code>public abstract class MenuEntry
{
    public MenuEntry(int id, string description)
    {
        this.Id = id;
        this.Description = description;
    }

    public int Id { get; }
    public string Description { get; }

    public abstract void Execut();
}
</code></pre>

<p>That allows to define each menu entry and its logic in a separate class and you get rid of the switch statement.</p>

<p>Further more it is simpler to extend the program with new menu items without touching existign logic ;).</p>

<hr>

<p>Example implementation for <strong>single class entries</strong>:</p>

<pre><code>    internal class Person
    {
        public int Id { get; }
        public string Name { get; }
        private static int globalId = 1;

        public Person(string name)
        {
            this.Name = name;
            this.Id = globalId++;
        }

    }

    internal abstract class MenuEntry
    {
        public MenuEntry(int id, string description)
        {
            this.Id = id;
            this.Description = description;
        }

        public int Id { get; }
        public string Description { get; }

        public abstract void Execut();
    }

    internal class DisplayNames : MenuEntry
    {
        private readonly List&lt;Person&gt; persons;

        internal DisplayNames(List&lt;Person&gt; persons) : base(1, "View Persons")
        {
            this.persons = persons;
        }

        public override void Execut()
        {
            if (persons.Count == 0)
            {
                Console.WriteLine("No People To Display Yet.");
            }
            else
            {
                Console.WriteLine("List of Current People:");
                persons.ForEach(p =&gt; Console.WriteLine(p.Id + " - " + p.Name));
            }
        }
    }

    internal class AddPerson : MenuEntry
    {
        private readonly List&lt;Person&gt; persons;

        internal AddPerson(List&lt;Person&gt; persons) : base(2, "Add Person")
        {
            this.persons = persons;
        }

        public override void Execut()
        {
            Console.WriteLine("Please Enter The Person's Name: ");
            var result = Console.ReadLine();
            Person newPerson = new Person(result);
            persons.Add(newPerson);
            Console.WriteLine(newPerson.Name + " added successfully.");
        }
    }

    internal class Exit : MenuEntry
    {
        internal Exit() : base(9, "Exit")
        {
        }

        public override void Execut()
        {
            Environment.Exit(0);
        }
    }

    internal class Menu
    {
        private readonly List&lt;Person&gt; persons = new List&lt;Person&gt;();
        private readonly List&lt;MenuEntry&gt; entries = new List&lt;MenuEntry&gt;();

        public Menu()
        {
            this.entries.Add(new DisplayNames(this.persons));
            this.entries.Add(new AddPerson(this.persons));
            // ... other entries
            this.entries.Add(new Exit());
        }

        public void Show()
        {
            Console.WriteLine("Please make a selection by entering the corresponding number:");
            this.entries.ForEach(p =&gt; Console.WriteLine($"{p.Id}. {p.Description}"));

            var input = Console.ReadLine();

            int entryId = -1;
            MenuEntry entry = null;
            if (int.TryParse(input, out entryId))
            {
                entry = this.entries.FirstOrDefault(e =&gt; e.Id == entryId);
                entry?.Execut();
            }

            if (entry == null)
            {
                Console.WriteLine("Invalid Input.");
            }

            Console.WriteLine();
            Console.WriteLine();

            this.Show();
        }
    }
</code></pre>
    </div>