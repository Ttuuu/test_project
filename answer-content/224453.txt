<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>It's fairly common to use an auxiliary parameter as an index or accumulator in recursive functions.  If you don't like having the extra function or method "cluttering" the namespace, you can nest it inside the driver like this:</p>

<pre><code>class Solution:

    def letterCasePermutation(self, S):

        def aux(S, i):

            if i &gt;= len(S) and len(S) &gt; 0:
                self.ans.append(S)
                return

            if S[i].isalpha():
                temp = list(S)
                temp[i] = S[i].upper() if S[i].islower() else S[i].lower()
                self.letterCasePermutationAux("".join(temp), i+1)

            self.letterCasePermutationAux(S,i+1)

        self.ans=[]
        self.letterCasePermutationAux(S)

        return self.ans
</code></pre>

<p>A common way to recursively process a string, list, or other sequence is to define the base case as an empty sequence which returns a list with with the base case answer.  If the sequence isn't empty, take off the first element of the sequence and recursively call the function with the rest of the list.  Then process the list returned by the recursive call to add back in the first element.</p>

<pre><code>class Solution:
    def letterCasePermutation(self, s):

        # base case the answer is a list with an empty string
        if s == '':
            return ['']

        else:
            ans = []

            if s[0].isalpha():    
                # if s[0] is a letter, prepend it to all the answers in the list
                # returned by the recursive call.  First as a lowercase letter
                # and then as an uppercase letter
                for tail in self.letterCasePermutation(s[1:]):
                    ans.append(s[0].lower() + tail)
                    ans.append(s[0].upper() + tail)

            else:
                # if it's not a letter, just prepend it to all the answers in 
                # the list returned by the recursive call.
                for tail in self.letterCasePermutation(s[1:]):
                    ans.append(s[0] + tail)

            return ans
</code></pre>

<p>Here's an elegant solution using generators to create the permutations lazily:</p>

<pre><code>class Solution:

    def letterCasePermutation(self, s):
        def aux(s, acc):
            if s == '':
                yield acc

            else:
                yield from aux(s[1:], acc + s[0])

                if s[0].isalpha():
                    yield from aux(s[1:], acc + s[0].swapcase())

        yield from  aux(s, '')
</code></pre>
    </div>