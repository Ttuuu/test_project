<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You’ve presented 5 units (classes, functions) in 3 different files. I understand that you have a few more in your repository but I think this is over-splitting. You should at least merge <code>adjustment.py</code> into <code>models.py</code> and <code>radial_bar.py</code> into <code>functional.py</code> (and, btw, this kind of file is usually named <code>utils.py</code>).</p>

<p>Out of the 5 units presented here, 2 are unused: <code>split_texts</code> and <code>Adjustment</code>. So a quick word about them:</p>

<ul>
<li>You can drop the <code>adjustment</code> parameter of <code>split_texts</code> as it is unused;</li>
<li>You can use <a href="https://docs.python.org/3/library/itertools.html#itertools.chain.from_iterable" rel="nofollow noreferrer"><code>itertools.chain.from_iterable</code></a> to flatten nested iterables;</li>
<li>You can simplify optional arguments by dropping <code>**kwargs</code> in favor of default values.</li>
</ul>

<p>All in all, these two can be condensed to:</p>

<pre><code>import itertools


class Adjustment:
    def __init__(self, title="An adjustment.", freq_lim=None, char_lim=None, exclude=None):
        self.title = title
        self.freq_lim = freq_lim
        self.char_lim = char_lim
        self.exclude = exclude


def split_texts(texts):
    return list(itertools.chain.from_iterable(map(str.split, texts)))
</code></pre>

<p>But the <code>Adjustment</code> class would be even more succint and easily extensible if it were one of the new <a href="https://docs.python.org/3/library/dataclasses.html" rel="nofollow noreferrer"><code>dataclasses</code></a>:</p>

<pre><code>from dataclasses import dataclass


@dataclass(frozen=True)
class Adjustment:
    title: str = "An adjustment."
    freq_lim: int = None
    char_lim: int = None
    exclude: str = None
</code></pre>

<hr>

<p><code>filter_unique</code> doesn't feel like it produce any usable output. For starter, you are comparing apples and oranges when <code>output</code> is <code>'text'</code> because you store the <code>.text</code> attribute of your objects in <code>unique</code> but you are only checking if the object itself is in unique, not its text. Second, you return <code>unique</code> which may contain tweets, statuses or text; but your usage in the <code>Tweet</code> class suggest that you want to return tweets every time.</p>

<p>To improve things, we could:</p>

<ul>
<li>check unicity using a <code>set</code> whose contain check is done in \$\mathcal{O}(1)\$ instead of \$\mathcal{O}(n)\$ for <code>list</code>s;</li>
<li>extract the desired attribute out of the object to test for unicity but return the actual tweet;</li>
<li>extract attributes step by step instead of having 4 explicit cases;</li>
<li>turn the function into a generator, since it will be fed into the <code>list</code> constructor anyway.</li>
</ul>

<p>Proposed improvements:</p>

<pre><code>from contextlib import suppress


def filter_unique(tweet_stats_list, output='status'):
    uniques = set()
    for tweet in tweet_stats_list:
        tweet_attr = tweet
        with suppress(AttributeError):
            tweet_attr = tweet_attr.retweeted_status
        if output == 'text':
            tweet_attr = tweet_attr.text
        if tweet_attr not in uniques:
            uniques.add(tweet_attr)
            yield tweet
</code></pre>

<hr>

<p>The <code>Tweet</code> class feels somewhat fine but I don't understand how it improves value over a simple <code>list</code> based on the provided model (I didn't read the other models on your repository, so it may be more obvious there). Other than that the docstring doesn't add any value: this is the class <code>Tweet</code> in the module <code>models</code>, sure this is some kind of <code>"""Tweet model"""</code>…</p>

<p>I also don't understand why you allow for variable number of arguments (using <code>*args</code>) but only ever use <code>args[0]</code>: you’re not even guaranteed that there is at least 1 element in <code>args</code>. Better use an explicit argument here.</p>

<p>Lastly, you should use <code>super()</code> instead of explicitly calling the parent class. It doesn't matter much in such case but it's a good habit to get into if you ever use multiple inheritance (or just in case you decide to add a layer of abstraction between <code>Tweet</code> and <code>list</code>).</p>

<p>Proposed improvements:</p>

<pre><code>import operator


class Tweets(list):
    def __init__(self, tweets, filter_by_unique=False, **kwargs):
        if filter_by_unique:
            tweets = filter_unique(tweets)

        super().__init__(tweets, **kwargs)

    @property
    def sorted_by_time(self):
        return sorted(self, key=operator.attrgetter('created_at'))

    @property
    def oldest(self):
        return min(self, key=operator.attrgetter('created_at'))

    @property
    def newest(self):
        return max(self, key=operator.attrgetter('created_at'))
</code></pre>

<hr>

<p>The <code>Author</code> class feels very messy. You extract a handful of information out of your tweets stored as attributes, but half of them end up unused.</p>

<p>Since you're only interested in counting some stats about your author, you should store only those. And to help you along the way (especially counting the number of tweets of a particular author), you can:</p>

<ul>
<li>Sort the array of tweets by author names before processing it;</li>
<li><a href="https://docs.python.org/3/library/itertools.html#itertools.groupby" rel="nofollow noreferrer">Group the array by</a> author names to gather together the tweets of a single author.</li>
</ul>

<p>Note that I don't know <code>tweepy</code> enough to know if there is a more "unique" identification method than the name of the author. (I do imagine that several author can share a single name, so there must be some.)</p>

<p>Proposed improvements:</p>

<pre><code>import operator


class Authors(object):
    def __init__(self, tweets):
        unicity_key = operator.attrgetter('author.name')
        tweets = sorted(tweets, key=unicity_key)

        self.followers_count = {}
        self.following_count = {}
        self.total_tweets = {}
        self.tweets_count = {}
        for _, author_tweets in itertools.groupby(tweets, key=unicity_key):
            author_tweets = list(author_tweets)
            author = author_tweets[0].author
            self.followers_count[author.name] = author.followers_count
            self.following_count[author.name] = author.friends_count
            self.total_tweets[author.name] = author.statuses_count
            self.tweets_count[author.name] = len(author_tweets)

    def hbar_plot(self, ax, measurement='Followers', color=(0,0,1,1), incolor_measurement=None, height=1, textsize=7, **kwargs):
        measurements = {
            'Followers': self.followers_count,
            'Following': self.following_count,
            'Total Tweets': self.total_tweets,
            'Sample Tweets': self.tweets_count,
        }
        author_measurement = measurements[measurement]
        sorted_authors = sorted(author_measurement, key=author_measurement.__getitem__)

        if isinstance(color, str):
            color = mplcolors.hex2color(mplcolors.cnames[color])

        if incolor_measurement is not None:
            color_measurement = measurements[incolor_measurement]
            minor_max = max(color_measurement.values())
            colors = [(*color[:3], color_measurement[author] / minor_max) for author in sorted_authors]
            measurement = '{} (color: {})'.format(measurement, incolor_measurement)
        else:
            colors = [color] * len(author_measurement)

        ticks, values = zip(*((i + height, author_measurement[author]) for i, author in enumerate(sorted_authors)))
        ax.barh([i - height / 2 for i in ticks], values, height=height, color=colors, **kwargs)
        ax.set_yticks(ticks)
        ax.set_yticklabels(sorted_authors, rotation='horizontal', size=textsize)
        ax.set_xlabel(measurement)
        plt.tight_layout()
</code></pre>
    </div>