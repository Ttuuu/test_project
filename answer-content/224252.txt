<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li>You have lots of unneeded empty lines, they also hinder readability.</li>
<li><code>fn(arg=value)</code> is abnormal. It's common to use <code>fn(value)</code>. It's common only to use the former when the argument is a keyword or default argument.</li>
<li><p>You don't need to make a path another path.</p>

<blockquote>
<pre><code>desination_root = Path("R:\\Pictures")
destination = Path(desination_root).joinpath(folder.stem)
</code></pre>
</blockquote></li>
<li><p><a href="https://docs.python.org/3/library/pathlib.html#pathlib.Path.mkdir" rel="nofollow noreferrer"><code>Path.mkdir</code></a> isn't a static method, and so it's abnormal to use it as <code>Path.mkdir(my_path)</code> rather than <code>my_path.mkdir()</code>.</p></li>
<li><p><code>check_if_folder_exists</code> isn't needed as <code>repository.iterdir</code> and <code>destination.mkdir</code> will error if they don't exist.</p>

<p>It should also be noted that you can pass <code>parents=True</code> to <code>Path.mkdir</code> to automatically create the folder if it doesn't exist, rather than force the user to do that.</p></li>
<li>It's better if you make another function that moves the files, and one, <code>main</code>, that passes it the values. Preferably <code>main</code> would be changed to not use static values and get the values from a config file.</li>
<li><code>finally</code> isn't needed.</li>
<li>You should raise a <code>SystemExit(1)</code> or use <code>sys.exit(1)</code> if there is an error. They both do the same thing which notifies the system that the program failed. It didn't run without problems.</li>
<li><p>Given that generating a name that doesn't conflict with existing files is not a simple one-liner I'd recommend you move it out into a function.</p>

<p>I should note that it may overwrite files, if you have a folder with <code>file_1.png</code> and <code>file_3.png</code> your code's going to overwrite <code>file_3.png</code>, but not have a <code>file_2.png</code>.</p></li>
</ul>

<p>You changed away from some of the above, and so I'd recommend you think about the differences, which is easier to re-use, which is easier to read, which performs the correct action in the situation. If you don't know what the difference is even with my explanation, such as with <code>SystemExit(1)</code>, then you should look up what it does.</p>

<pre><code>import os
from pathlib import Path
import shutil


def gen_name(path, number):
    orig_name = path.parent.name.lower().replace(" ", "_")
    return f"{orig_name}_{number}{path.suffix}"


def move_files(src, dest):
    for folder in Path(src).iterdir():
        destination = Path(dest) / folder.stem
        destination.mkdir(exist_ok=True, parents=True)
        start = len(os.listdir(destination)) + 1
        for number, image in enumerate(folder.iterdir(), start=start):
            image_name = gen_name(image, number)
            destination_image = destination / image_name
            print(f"{image} will be named {destination_image}")
            shutil.move(image, destination_image)


def main():
    try:
        move_files(
            "{0}\\{1}".format(os.getenv("USERPROFILE"), "Repository"),
            "R:\\Pictures",
        )
    except(ValueError, FileNotFoundError, OSError) as error:
        print(error)
        raise SystemExit(1) from None


if __name__ == '__main__':
    main()
</code></pre>

<p>I think it could make more sense for <code>gen_name</code> to be a closure, as then it can correctly handle existing files. I won't change how the code functions, but will show how it could be implemented.</p>

<pre><code>def gen_name_builder(folder):
    orig_name = folder.name.lower().replace(" ", "_")
    number = len(os.listdir(destination))
    def gen_name(file):
        nonlocal number
        number += 1
        return f"{orig_name}_{number}{path.suffix}"
    return name


def move_files(src, dest):
    for folder in Path(src).iterdir():
        destination = Path(dest) / folder.stem
        destination.mkdir(exist_ok=True, parents=True)
        gen_name = gen_name_builder(destination)
        for image in folder.iterdir():
            image_name = gen_name(image)
            destination_image = destination / image_name
            print(f"{image} will be named {destination_image}")
            shutil.move(image, destination_image)
</code></pre>
    </div>