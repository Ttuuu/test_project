<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Avoid unnecessary member variables</h1>
<p>You added <code>res</code> and <code>exponent</code> as member variables. However, they are only used inside <code>longestDupSubString()</code> and functions called by it. You should just declare them inside <code>longestDupSubString()</code> instead, and pass them by reference to other functions if necessary. But see below for why these variables might not be necessary at all.</p>
<h1>Use character constants</h1>
<p>Write <code>const int a_decimal = 'a'</code>, so there is no need to know the ASCII table and no possibility for errors. However, then the question is, why define <code>a_decimal</code> at all? It seems you want to force integer promotion, but you can make that more explicit. Instead of <code>base[index] - a_decimal</code>, you can write <code>(int)base[index] - 'a'</code>.</p>
<p>But this makes me wonder, why subtract <code>'a'</code> at all? Sure, the question says the input consists of only lowercase English numbers, but you can keep your solution generic.</p>
<h1>Don't return <code>const</code> values</h1>
<p>There is no point in returning something by <code>const</code> value. The following is perfectly valid:</p>
<pre><code>const std::string foo() {
    return "foo";
}

std::string bar = foo();
</code></pre>
<p>It only makes sense to make the return type <code>const</code> if you are return a pointer or reference.</p>
<h1>Avoid <code>using namespace std</code> and/or <code>#include &lt;bits/stdc++.h&gt;</code></h1>
<p>I see you forgot to add <code>std::</code> to some standard library types, implying that you have <code>using namespace std</code> somewhere or are using the non-standard <code>#include &lt;bits/stdc++.h&gt;</code>.</p>
<h1>Give proper names to variables</h1>
<p>Some of your naming choices are questionable:</p>
<ul>
<li><code>char_size</code>: sounds like it would hold the result of <code>sizeof(char)</code>, but unstead it's the number of letters in the alphabet. Maybe <code>alphabet_size</code> would be better.</li>
<li><code>hash_map</code>: the name is equivalent to  the type (<code>std::unordered_map</code>), but what you should have used is something that represents what information the hash map holds: substrings that you already visited. So maybe <code>visited_substrings</code> is a better name.</li>
<li><code>index</code>: this is one of the few times you can use a one-letter variable, like <code>i</code>, since that is the idiomatic name for a loop counter in C++.</li>
<li><code>iter</code>: in <code>for(const auto iter: hash_map[curr])</code>, the variable <code>iter</code> is not an iterator, but actually holds the value of one of the elements of a <code>std::vector&lt;int&gt;</code>. So <code>element</code>, <code>item</code> or <code>entry</code> would already be a better name, but even better is a name that reflects what that elements represents, namely an offset into the base string, so <code>offset</code> would be a good name here.</li>
</ul>
<h1>Your hash function can have collisions, and is unnecessary</h1>
<p>Your hash function can have collisions if you ever have substrings longer than 32 / logâ‚‚(26) = 6 characters. A collision would not be a problem if you would handle them, but you don't. Also, there is no need to create a hash yourself, since <code>std::unordered_map</code> already does that for you! Just pass the substring to it directly:</p>
<pre><code>std::unordered_map&lt;std::string, std::vector&lt;int&gt;&gt; visited_substrings;

auto substring = base.substr(0, length);
visited_substrings[substring] = {0};
</code></pre>
<h1>Avoid repeating type names</h1>
<p>There are a few places where you can avoid repeating type names. As shown above, when declaring a variable of type <code>std::unordered_map</code>, it is already initialized to be an empty map, so no need to explicity initialize it with another empty map.</p>
<p>When assigning to an element of a <code>std::unordered_map</code>, you can use an initializer list, and since the compiler knows the type of the map elements, you don't have to repeat that yourself. So <code>visited_substrings[substring] = {0}</code> will initialize the vector with one integer with value <code>0</code>.</p>
<h1>Don't use C library functions if there are perfectly fine C++ equivalents</h1>
<p>When comparing C++ strings, don't use <code>strcmp()</code>, but rather use the tools the <code>std::string</code> class provides you. In particular, you can just use the <code>==</code> operator:</p>
<pre><code>if (base.substr(offset, length) == base.substr(index + 1 - length, length)) {
    return base.substr(offset, length);
}
</code></pre>
<p>Also, <code>std::string</code> comes with the member function <code>compare()</code> that can compare substrings directly:</p>
<pre><code>if (base.compare(offset, length, base, index + 1 - length, length) == 0) {
    return base.substr(offset, length);
}
</code></pre>
<p>Although it doesn't look like much of an improvement, it avoids having to create new temporary strings to hold the substrings.</p>
<h1>Don't use bit twiddling tricks unnecessarily</h1>
<p>There is no need to write <code>-~index</code> when you can just write <code>index + 1</code>. The latter is much clearer. Also, <code>-~index</code> being equivalent to <code>index + 1</code> assumes <a href="https://en.wikipedia.org/wiki/Two%27s_complement" rel="nofollow noreferrer">two's complement</a> representation of integers, which is not guaranteed in C++17 (it is only since C++20).</p>
<p>Also, in <code>int mid = lo + ((hi - lo) &gt;&gt; 1)</code>, just write <code>int mid = lo + (hi - lo) / 2</code>, it is much clearer what the intention is. If you could use C++20, then you should use <a href="https://en.cppreference.com/w/cpp/numeric/midpoint" rel="nofollow noreferrer"><code>std::midpoint()</code></a> here, since there are <a href="https://www.youtube.com/watch?v=sBtAGxBh-XI" rel="nofollow noreferrer">many pitfalls</a> in your simple approach, although it works fine in the constraints of this LeetCode problem.</p>
<h1>Use unsigned integers where appropriate</h1>
<p>For array indices, sizes and non-negative offsets, you should unsigned integers, or even better <code>size_t</code>. There are several reasons for this:</p>
<ul>
<li>There's less chance of overflow. Note that unintended overlow might be a security issue.</li>
<li>When using unsigned integers as function parameters, you never have to check whether they are non-negative if that is not allowed.</li>
<li>There are less surprises when doing bitwise operations on unsigned integers.</li>
<li>Some common standard library functions, such as <code>std::string::size()</code>, also return unsigned integers, so you won't get warnings about comparing signed to unsigned numbers.</li>
</ul>
<p>Regarding that last point, ensure you have compiler warnings enabled and fix all warnings it produces.</p>
    </div>