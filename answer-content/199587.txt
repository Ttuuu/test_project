<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I know it already has an accepted answer. However, just trying my luck with a different approach. I ran this function through @Martin R's test suite.</p>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>function calculateClosestTo0 (arr) {
    if(!Array.isArray(arr) || arr.length === 0) return 0;
    arr.push(0);

    let set = new Set(arr);
    let ar = Array.from(set);
    if(ar.length === 1) return 0;

    ar.sort((a,b) =&gt; a-b);

    const index = ar.indexOf(0);

    if(index === 0) return ar[1];
    if(index === ar.length - 1) return ar[ar.length - 2];
    if(Math.abs(ar[index-1]) === ar[index+1]) return ar[index+1];

    return Math.min(Math.abs(ar[index-1]), ar[index+1]) === ar[index+1] ? ar[index+1] : ar[index-1];
}

let tests = [
    // Single element:
    { array: [5], result: 5 },
    { array: [-5], result: -5},
    // Two elements with same distance but opposite sign:
    { array: [1, -1], result: 1},
    { array: [-1, 1], result: 1},
    { array: [0, 1, -1], result: 1},
    { array: [1, 0, -1], result: 1},
    { array: [1, -1, 0], result: 1},
    { array: [0, -1, 1], result: 1},
    { array: [-1, 0, 1], result: 1},
    { array: [-1, 1, 0], result: 1},
    // Only elements of same sign:
    { array: [4, 2, 3], result: 2},
    { array: [-4, -2, -3], result: -2},
    // Empty array, or only zeros:
    { array: [], result: 0},
    { array: [0, 0, 0, 0], result: 0},
    // Closest element is at front, medium, or tail position:
    { array: [2, 0, -2, 0, -3], result: 2},
    { array: [-2, 0, 2, 0, -3], result: 2},
    { array: [-2, 0, -3, 0, 2], result: 2},
    { array: [-3, 2], result: 2},
    { array: [-3, 4], result: -3},
    { array: [3, -4], result: 3}
]

for (let i = 0; i &lt; tests.length; i++) {
    console.log(calculateClosestTo0(tests[i].array) == tests[i].result);
}
    </code></pre>
</div>
</div>


<p><strong>EDIT:</strong>
Changed the algorithm. Earlier one was flowed as pointed out by @Martin R.</p>

<p>I have the same review comments as @Martin R's so I did not specify them separately.</p>

<p>The approach I have taken was to base my logic on the threshold.</p>

<ul>
<li>I pushed the threshold in the array.</li>
<li>Removed the duplicates.</li>
<li>Tried to fail early and exit the routine.</li>
<li>Tried to use the language available functions as much as possible.</li>
</ul>

<p>As I said, the accepted answer is already elegant. I thought of listing another approach. I do not claim it to be better, I found the flow personally approachable.</p>
    </div>