<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Houston, you have some bugs</h3>

<p>The algorithm counts incorrectly in some cases involving zeros.
For example, there's only one way to make "10" or "20", not 2.</p>

<p>A different problem is the overly strict condition <code>&lt;26</code>,
which excludes "26" even it can be decoded to <code>z</code>.</p>

<h3>Beware of string slicing</h3>

<p><code>String.substring</code> creates a new string.
This could become expensive when repeated often.
If you change the logic to work with a <code>char[]</code> instead of a <code>String</code>,
then you can check if the first digit is <code>'1'</code>,
or the first digit is <code>'2'</code> and the second digit is <code>&lt;= '6'</code>.</p>

<h3>Unnecessary code</h3>

<p>This condition will never be true:</p>

<blockquote>
<pre><code>if((int)message.charAt(n-k)==0)
</code></pre>
</blockquote>

<p>The characters in the input are in the range of <code>'0'..'9'</code>,
therefore their <code>int</code> values are in the range of <code>48..57</code>.</p>

<h3>Unnecessary <code>Integer[]</code></h3>

<p>You could safely replace <code>Integer[]</code> with <code>int[]</code>,
and use a condition on zero value instead of <code>null</code> value.</p>
    </div>