<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The <code>fileArray</code> variable can be replaced with 2 variables. When looking at fileArray in the locals window, from the IDE menu at the top View&gt;Locals Window, you can see that it's it a Variant/Variant(0 to 1). Expanding that by clicking on the + icon to the left of the variable name it it contains two sub arrays. fileArray(0) and fileArray(1) are both of type Variant/Object/Range. These are distinct areas that should be named respectively. <code>customerArea</code> for those in column B and <code>cifArea</code> for those in the same column as <code>targetCol</code> let you refer to these ranges directly.</p>

<p>Because these variables house information stored vertically, that is X rows tall by 1 column wide, you can reference the rows by <code>customerArea(checkRow).Value2</code>. Doing this allows you to write self documenting code. Rather than </p>

<pre><code>If fileArray(1)(1) = vbNullString And fileArray(0)(1) &lt;&gt; vbNullString Then
</code></pre>

<p>You have </p>

<pre><code>If customerArea(checkRow).Value2 = vbNullString And cifArea(checkRow).Value2 &lt;&gt; vbNullString Then
</code></pre>

<p>I'm torn between how to go about checking each of the rows. Mulling it over I decided on extracting the check into a Sub. I added a guard clause, <code>endRow &gt; customerArea.Rows.Count Or endRow &gt; cifArea.Rows.Count</code>, that raises an error if the end row exceeds the number of rows in each area that's checked. You <strong>could</strong> also add a guard clauses to ensure that <code>startRow &gt;= 1</code>, or ensure that <code>customerArea.Rows.Count = cifArea.Rows.Count</code> or any others you deem appropriate, but that I'll leave for you.</p>

<p>Instead of checking each row explicitly I condensed that with a <a href="https://docs.microsoft.com/en-us/office/vba/language/reference/user-interface-help/fornext-statement" rel="nofollow noreferrer">For...Next statement</a> and used a descriptive variable <code>checkRow</code> to let you know which row you're checking.</p>

<pre><code>Private Sub CheckForEmptyCellsIn(ByVal customerArea As Range, ByVal cifArea As Range, ByVal startRow As Long, ByVal endRow As Long)
    Const InputMessage As String = "Please enter the CIF Number for "

    Const InvalidArgument As Long = 5
    If endRow &gt; customerArea.Rows.Count Or endRow &gt; cifArea.Rows.Count Then
        Err.Raise InvalidArgument, "CheckForEmptyCells Sub", "endRow argument exceeded number of rows in"
    End If

    Dim checkRow As Long
    For checkRow = startRow To endRow
        If customerArea(checkRow).Value2 = vbNullString And cifArea(checkRow).Value2 &lt;&gt; vbNullString Then
            customerArea.Parent.Range("CIF_" &amp; checkRow).Value2 = InputBox(InputMessage &amp; vbCrLf &amp; cifArea(1).Value2)
        End If
    Next
End Sub
</code></pre>

<p>This refactoring leaves you with </p>

<pre><code>Public Sub CodeReview()
    Dim loanData As Worksheet
    Set loanData = Worksheets("Loan Data")
    Dim finalRow As Long
    finalRow = loanData.Range("B" &amp; Rows.Count).End(xlUp).Row
    Dim targetCol As Long
    targetCol = loanData.Range("A1").EntireRow.Find("CIF #").Column

    CheckForEmptyCellsIn loanData.Range("B2:B" &amp; finalRow), _
                        loanData.Range(loanData.Cells(2, targetCol), loanData.Cells(finalRow, targetCol)), _
                        1, 8
End Sub
</code></pre>
    </div>