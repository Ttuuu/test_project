<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You might consider using custom exceptions coupled with an assertion class.  This would give you a lot of good exception type information to catch and work with, instead of just descriptions in a single exception type.  As well, it cleans up your method nicely by stating in English what is happening.</p>

<pre><code>public class MyCalculator
{   
    public long Power(int n, int p) 
    {
        Assert.AreNotZero("n and p", n, p);
        Assert.AreNotNegative("n and p", n, p);

        return (long)Math.Pow(n, p);        
    }   
}

public static class Assert
{
    public static void AreNotZero(string arg, params int[] values)
    {
        if (values.Where(v =&gt; v == 0).Any())
            throw new InvalidZeroException(arg);
    }

    public static void AreNotNegative(string arg, params int[] values)
    {
        if (values.Where(v =&gt; v &lt; 0).Any())
            throw new InvalidNegativeException(arg);
    }
}

public class InvalidZeroException : Exception
{
    public InvalidZeroException(string argument) : base(argument + " should not be zero") { }
}

public class InvalidNegativeException : Exception
{
    public InvalidNegativeException(string argument) : base(argument + " should not be negative") { }
}
</code></pre>
    </div>