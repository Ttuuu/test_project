<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>For posterity, here's how this code can be done without a list comprehension:</p>

<pre><code>import numpy as np
from itertools import combinations as comb

subsetSize = 4
elements = 100

targetArray = np.random.rand(elements)

arrayCombs = np.fromiter(comb(targetArray,subsetSize),'f,f,f')
arrayCombs = np.array((arrayCombs['f0'],arrayCombs['f1'],arrayCombs['f2']))

print np.sum(np.prod(arrayCombs,0))
</code></pre>

<p>I made use of the np.fromiter function, which creates an array based on an iterator.  It only works to make a 1D array, though, so I had to make a data type that could hold <em>n</em> elements.  Unfortunately, the result is still a 1D array, so further effort needs to be added to change the array to be something that can be easily broadcast to.</p>

<p>This isn't generalized to any <em>n</em>, and would have to take some fiddling to always work.  It is mountains faster than the original code, but still suffers from a \$ O(n^3)\$ growth rate.  Modifying the algorithm itself will be necessary for any further improvements.</p>
    </div>