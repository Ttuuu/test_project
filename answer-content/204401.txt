<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I see a number of things that may help you improve your program.</p>

<h2>Put each statement on a separate line</h2>

<p>Instead of crowding things together like this:</p>

<pre><code>case '(': p_stack.push('('); break;
</code></pre>

<p>it seems to me to be more readable if each statement is given on its own line.</p>

<pre><code>case '(': 
    p_stack.push('('); 
    break;
</code></pre>

<h2>Don't use leading underscores in names</h2>

<p>Anything in global space with a leading underscore is a <em>reserved name</em> in C++ (and in C).  See <a href="http://stackoverflow.com/questions/228783/what-are-the-rules-about-using-an-underscore-in-a-c-identifier">this question</a> for details.  I tend to avoid leading underscores completely in my code.</p>

<h2>Think of the user</h2>

<p>There are a number of things that the program could include to make life easier for the user of this calulator.  Most simply, why not provide a way to quit the program?  It's as easy as adding these to lines to <code>main</code></p>

<pre><code>if (input == "quit") 
    break;
</code></pre>

<p>Also, rather than simply saying "could not parse", it might be nice to show the user exactly what token was the problem.</p>

<h2>Never return a reference to a local!</h2>

<p>The code currently contains this function:</p>

<pre><code>static auto&amp; getInstance(std::string const&amp; expr) {
    Calculator c(expr);
    return c;
}
</code></pre>

<p>The problem is that <code>c</code>'s scope is just the function body, so it goes out of scope (and is destroyed) when the function completes.  However, we've just handed back a <em>reference</em> this now-destroyed variable.  There are a number of ways to fix this, as in the next suggestion.</p>

<h2>Use a free function instead of a member variable</h2>

<p>Using a free function makes more sense to me here than using a static member function.  For example, consider this function:</p>

<pre><code>double calc(std::string const&amp; expr) {
    Calculator c{expr};
    return c.fretval;
}
</code></pre>

<p>This also leads directly to next observation.  </p>

<h2>Separate data manipulation from output</h2>

<p>The constructor really does two things.  It calculates the result of an expression and then it outputs that to <code>std::cout</code>.  Better would be to split that into the two logical halves.  Specifically, create an expression evaluator that just returns either an answer or <code>throw</code>s an error.  Let the caller worry about how to react to that or how (and where) to print it.</p>
    </div>