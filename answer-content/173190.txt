<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here are a few suggestions:</p>

<h2>1. Don't write this</h2>

<p>Many before you have needed, and gotten, a fast Base64 decoder. Why should you write this yourself? You don't seem to have a special twist on the decoding/encoding - unless you want "base85 decoding", a term I'm not quite sure I understand.</p>

<p>Specifically, here is a nice treatment of the subject (although still far from the optimum):</p>

<p><a href="https://www.experts-exchange.com/articles/3216/Fast-Base64-Encode-and-Decode.html#c15564" rel="nofollow noreferrer">Fast Base64 encode and decode</a></p>

<p>(and see also <a href="https://web.archive.org/web/20160325160229/http://www.experts-exchange.com/articles/3216/Fast-Base64-Encode-and-Decode.html" rel="nofollow noreferrer">the suggestion in the comments there</a> - by now only available on archive.org)</p>

<h2>2. Don't work on 8-bit values</h2>

<p>The fact that base64 encoding has a 1-byte (or 1-ASCII-character) resolution the way it's defined does not mean that's how you need to decode it. Your machine is (probably) a 64-bit machine. So work on in 64-bits units unless you have reason to use another size (which you very well might - but probably not 8 bits). Work out the math for the larger sizes.</p>

<p>Now you might say "but what if the length of my output isn't divisible by 8?" - well, just handle the slack at the end, outside your main tight loop.</p>

<p>Similarly, you shouldn't use 4 distinct 8-bit variables for your input - use something bigger. </p>

<h2>3. Don't mix decoding and allocation + don't force the use of <code>std::vector</code></h2>

<p>You should not be using an <code>std::vector</code>. Take a pointer to a nicely-aligned output buffer, or better yet - a <a href="http://codexpert.ro/blog/2016/03/07/guidelines-support-library-review-spant/" rel="nofollow noreferrer"><code>gsl::span</code></a>. (You could also take a templated iterator but I wouldn't bother) with sufficient memory pre-allocated, and write there.</p>

<p>If you insist on doing the allocation yourself for some reason, have a wrapper function do it. Right now you're allocating <span class="math-container">\$log(n)\$</span> times for decoding <span class="math-container">\$\frac{n}{6}\$</span> bits! C-R-A-Z-Y!.</p>

<p>At any rate, there's no reason to force the client code for your decoder to take an <code>std::vector</code>.</p>

<h2>4. Are both lookup tables really helping you?</h2>

<p>Using a look-up table means doing less computational work. But is the trade-off worth it? Not always. Now, if you be making your lookup table larger (which you may very well do, see the linked blog post and remember we want to work with more than 8 bits at a time) you might hit cache limits. And even if you aren't - maybe in-register arithmetic is good enough?</p>

<p>Now, I might be worrying you for nothing here, and maybe lookup tables are the best thing to do - but at least profile to make sure. In fact,</p>

<h2>5. Profile profile profile</h2>

<p>If @DJuracu <a href="https://codereview.stackexchange.com/a/173166/64513">wrote already</a> - profile to find out what needs optimization. You can speed up something a zillion times, but if it's only 5% of the execution time you haven't saved much (<a href="https://en.wikipedia.org/wiki/Amdahl's_law" rel="nofollow noreferrer">Amdahl's law</a>). Of course, after you've improved something else, those 5% may now become 50%, making it worthwhile to work on that part of the code after all. Still, you need to know what worked and what didn't.</p>

<h2>6. You have to look at the compiled code</h2>

<p>When you're writing code that's this low-level, you can't allow yourself the slack of ignoring the assembly. Learn to read it and do so. I know that's a tall order but you're the one who said you want to write something that's "fast"...</p>

<h2>7. Multi-thread</h2>

<p>If this is part of an application which already has multiple threads running, then forget this point. Otherwise - why use only one core, and with one thread on it? Assuming you're on a typical modern PC, you have 2 or 4 cores, and with 'HyperThreading', they can execute instructions from 4 or 8 threads overall. While you could theoretically be bottlenecked on memory bandwidth or some other resource at full 4 or 8 thread capacity, you might not. Especially if you're not well-enough SIMDized</p>

<h2>8. Use SIMD for parallelism</h2>

<p>Your processor supports vectorized instructions. Your decoding (and your decoding) does not have "dependency chains" between the values of consecutive characters, except at most when composing a larger word from fewer bits. So - you should be able to SIMDize all or almost all of this work. I'm a GPU guy more than a CPU guy, so I can't tell you which instructions you'll want to be using, but that would definitely be necessary for maximum speed. Probably best to work on this before going multi-threaded.</p>
    </div>