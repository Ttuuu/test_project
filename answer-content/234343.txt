<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I do not have worked a lot with PyQt, but in most GUI libraries tree-view-items have facilities to store <em>userdata</em>. For <code>QTreeWidgetItem</code> you can use the <code>data</code> and <code>setData</code> methods. It might conflict with the MVC-pattern but practicality beats purity.</p>

<p>My revised <code>logic.py</code> with <code>self.xData</code> and <code>self.yData</code> removed and data stored in the GUI objects:</p>

<pre><code>import numpy as np
from PyQt5 import QtWidgets
from PyQt5.QtWidgets import QAbstractItemView, QFileDialog, QTreeWidgetItem

from ui import Ui_SPP

class SPPWindow(QtWidgets.QMainWindow, Ui_SPP):
    def __init__(self, parent=None):
        super(SPPWindow, self).__init__(parent)
        self.setupUi(self)
        self.treeWidget.setSelectionMode(QAbstractItemView.SingleSelection)
        self.loadButton.clicked.connect(self.loadData)
        self.treeWidget.itemSelectionChanged.connect(self.previewData)

    def previewData(self):
        """ Function to update the plot."""
        curr = self.treeWidget.currentItem()
        if curr:
            stuff = curr.data(0, QTreeWidgetItem.UserType)
            print(stuff['name'])
            print(stuff['meta'])
            self.widget.canvas.axes.clear()
            self.widget.canvas.axes.plot(stuff['Xdata'], stuff['Ydata'], 'r')
            self.widget.canvas.axes.grid()
            self.widget.canvas.draw()


    def loadData(self):
        """ Function to load file into QTreeWidget"""
        options = QFileDialog.Options()
        fileName, _ = QFileDialog.getOpenFileName(None,"Load interferogram", "","All Files (*);;Text Files (*.txt)", options=options)
        try:
            if fileName:
                x, y = np.loadtxt(fileName, unpack=True, delimiter=',', usecols=(0, 1))
                name = fileName.split('/')[-1]
                l1 = QTreeWidgetItem([name])
                stuff = {
                    'Xdata'  : x,
                    'Ydata'  : y,
                    'name'   : name,
                    'meta'   : 'other data',
                }
                l1.setData(0, QTreeWidgetItem.UserType, stuff)
                self.treeWidget.addTopLevelItem(l1)
            self.previewData()
        except Exception as e:
            print(e)

if __name__ == '__main__':
    import sys
    app = QtWidgets.QApplication(sys.argv)
    application = SPPWindow()
    application.show()
    sys.exit(app.exec_())
</code></pre>
    </div>