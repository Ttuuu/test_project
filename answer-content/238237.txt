<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>@dariosicily, Hi, I decided to rewrite the code using java time api. I am working with him for the first time, so I think there are problems in my code. Could you take a look at my new code?</p>

<pre><code>public class ChangeHistoryGraphManager {

public enum TimeInterval {
    LastWeek(1, 7),
    LastTwoMonth(7, 60),
    LastYear(45, 365);

    private int dayPointInterval;
    private int allDay;

    public int getDayPointInterval() {
        return dayPointInterval;
    }

    public int getAllDay() {
        return allDay;
    }

    TimeInterval(int dayPointInterval, int allDay) {
        this.dayPointInterval = dayPointInterval;
        this.allDay = allDay;
    }
}

public List&lt;Entry&gt; getGraphDataPoints(List&lt;ChangeHistoryModel&gt; inputModels, TimeInterval interval) {
    if (inputModels.size() == 0) {
        return Collections.emptyList();
    }
    ChangeHistoryUseCase.sortByDate(inputModels);
    return calculateGraphPoints(interval, inputModels);
}

private List&lt;Entry&gt; calculateGraphPoints(TimeInterval interval, List&lt;ChangeHistoryModel&gt; models) {
    List&lt;TimeIntervalPoints&gt; points = getPoints(models, interval);
    List&lt;Entry&gt; graphsPoints = getGraphsPoints(points);
    List&lt;String&gt; dates = getPointDates(points);
    DateValueFormatter.setDate(dates);

    return graphsPoints;
}

private List&lt;TimeIntervalPoints&gt; getPoints(List&lt;ChangeHistoryModel&gt; changeHistoryModels, TimeInterval interval) {
    List&lt;TimeIntervalPoints&gt; points = new ArrayList&lt;&gt;();
    int point = 0;

    LocalDate startGraphicsDate = getStartGraphicsDate(interval);
    LocalDate endIntervalTime = getEndIntervalTime(changeHistoryModels.get(point));

    for (ChangeHistoryModel model : changeHistoryModels) {
        if (addPoint(points, model, startGraphicsDate, endIntervalTime, point)) {
            point++;
            endIntervalTime = getEndIntervalTime(endIntervalTime, model, interval);
        }
    }

    return points;
}

private boolean addPoint(List&lt;TimeIntervalPoints&gt; points, ChangeHistoryModel model, LocalDate startGraphicsDate, LocalDate endIntervalTime, int point) {
    LocalDate pointDate = toLocalDateFromMilli(model.getDate());
    float pointWeight = model.getWeight();

    if (pointDate.isAfter(endIntervalTime) || pointDate.equals(endIntervalTime)) {
        return addNewPoint(startGraphicsDate, points, pointDate, point, pointWeight);
    } else {
        points.get(point - 1).getWeights().add(model.getWeight());
    }
    return false;
}

private boolean addNewPoint(LocalDate startGraphicsDate, List&lt;TimeIntervalPoints&gt; points,
                            LocalDate date, Integer pointCount, float weight) {
    if (date.isAfter(startGraphicsDate)) {
        points.add(new TimeIntervalPoints(new ArrayList&lt;&gt;(), date));
        points.get(pointCount).getWeights().add(weight);
        return true;
    }
    return false;
}

private LocalDate getStartGraphicsDate(TimeInterval interval) {
    LocalDate startIntervalTime = LocalDate.now();
    startIntervalTime = startIntervalTime.minus(interval.getAllDay(), ChronoUnit.DAYS);
    return startIntervalTime;
}

private LocalDate getEndIntervalTime(ChangeHistoryModel changeHistoryModels) {
    LocalDate endIntervalTime = toLocalDateFromMilli(changeHistoryModels.getDate());
    return endIntervalTime;
}

private LocalDate getEndIntervalTime(LocalDate date, ChangeHistoryModel model, TimeInterval interval) {
    int currentDays = toLocalDateFromMilli(model.getDate()).getDayOfYear();
    int offsetDays = interval.getDayPointInterval();
    int days = currentDays + offsetDays;
    return date.with(ChronoField.DAY_OF_YEAR, days);
}

private List&lt;Entry&gt; getGraphsPoints(List&lt;TimeIntervalPoints&gt; points) {
    List&lt;Entry&gt; dataPoints = new ArrayList&lt;&gt;();

    for (int i = 0; i &lt; points.size(); i++) {
        dataPoints.add(new Entry(i, points.get(i).getPointWeight()));
    }

    return dataPoints;
}

private List&lt;String&gt; getPointDates(List&lt;TimeIntervalPoints&gt; points) {
    List&lt;String&gt; dates = new ArrayList&lt;&gt;();

    for (int i = 0; i &lt; points.size(); i++) {
        LocalDate pointDate = points.get(i).getDate();
        DateTimeFormatter dateFormat = DateTimeFormatter.ofPattern("dd.MM");
        String date = pointDate.format(dateFormat);
        dates.add(date);
    }

    return dates;
}

private LocalDate toLocalDateFromMilli(long milli) {
    return Instant.ofEpochMilli(milli).atZone(ZoneId.systemDefault()).toLocalDate();
}}
</code></pre>
    </div>