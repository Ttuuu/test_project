<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Since posting this here I received some feedback on users.rustlang.org in <a href="https://users.rust-lang.org/t/good-needs-work-atbash-cipher-for-exercism/33839" rel="nofollow noreferrer">this post</a>. I will post the iteration made by incorporating the suggestions in users.rustlang.org, comment on those, and add more changes by using Winston Ewert's suggestions made on this site. I'll try to use the best suggestions from both the rustlang post and Winston Ewert, but certainly appreciate feedback as to whether or not I am using the best changes. At the end I post my improved code from all suggestions.</p>

<p>Spoiler alert - the suggestions made here by Winston Ewert are all around improvements on the already super helpful suggestions from users.rustlang.org.</p>

<h2>1. Code after users.rustlang.org post</h2>

<pre><code>/// "Encipher" with the Atbash cipher.
pub fn encode(plain: &amp;str) -&gt; String {
    let mut coded: String = plain.to_string();

    coded.retain(|c| c.is_ascii_alphanumeric());
    coded.make_ascii_lowercase();

    let coded_no_spacing = coded.bytes()
            .map(|c| {
                if c.is_ascii_alphabetic() {
                    (122 - c + 97) as char
                } else {
                    c as char
                }
            })
            .collect::&lt;String&gt;();

    let mut coded_no_spacing = coded_no_spacing.chars().enumerate();
    let mut coded_with_spaces = String::new();
    while let Some((counter, ch)) = coded_no_spacing.next() {
        if counter % 5 == 0 &amp;&amp; counter != 0 {
            coded_with_spaces.push(' ');
        }
        coded_with_spaces.push(ch);
    }
    coded_with_spaces
}

/// "Decipher" with the Atbash cipher.
pub fn decode(cipher: &amp;str) -&gt; String {
    let mut out = encode(cipher);
    out.retain(|c| c.is_ascii_alphanumeric());
    out
}
</code></pre>

<h2>2. Comments on code above</h2>

<p>Three basic changes here:</p>

<p><strong>a.</strong> <code>let coded_no_spacing</code> declaration changed to make use of <code>as char</code> instead of <code>String::from_utf8</code>. Also using <code>collect::&lt;String&gt;()</code> to allow code to reflect logic and avoid unnecessary <code>unwrap</code> from first iteration.</p>

<p><strong>b.</strong> <code>enumerate</code> instead of declaring extraneous <code>counter</code> variable.</p>

<p><strong>c.</strong> <code>while let</code> makes use of the <code>enumerate</code> to streamline use of temporary <code>counter</code> and <code>ch</code>.</p>

<h2>3. Best of both</h2>

<p>Looking at the suggestions of both posts, I think that the changes suggested here are all around improvements and have decided to incorporate these suggestions over those made at my users.rustlang.org <a href="https://users.rust-lang.org/t/good-needs-work-atbash-cipher-for-exercism/33839" rel="nofollow noreferrer">post</a>. These are my reasons:</p>

<p><strong>a.</strong> <code>filter_map</code> vs separate filtering and mapping: <code>filter_map</code> streamlines the process required, utilizing the standard library to better effect in fewer lines with clear logic. While writing this code I saw <code>filter_map</code> in the documentation but couldn't get a handle on it, but thanks to the example provided in the post here I am starting to get it. Thanks!</p>

<p><strong>b.</strong> <code>for</code> vs <code>while let</code>: I think the <code>for</code> works a little better here because it is more concise. Using <code>while let</code> would require one step to declare an iterator and another to set the loop running, whereas the <code>for</code> loop allows the iterator to be created within the construction of the loop. I'm not sure this is an important distinction but the <code>for</code> loop seems cleaner.</p>

<hr>

<p><strong>Miscellaneous</strong></p>

<p>Nice tip about the little optimization with the <code>String</code> capacity. I guess depending on the size of the input string this could lead to many fewer runs from stack to heap and back, which is my understanding of why it might be a good one to use. I include this in my solution.</p>

<p>As to separating <code>spacer</code> into its own function and removing the filter from <code>decode</code> - I should have mentioned above that because I am writing this for Exercism it has to pass tests by only calling <code>encode</code> and <code>decode</code>, and so I have to leave it in. However it does seem a good suggestion to keep a separate function for <code>spacer</code>, and will call it in <code>encode</code> and keep the filter in <code>decode</code>. </p>

<p><strong>Final Version</strong></p>

<pre><code>/// "Encipher" with the Atbash cipher.
pub fn encode(plain: &amp;str) -&gt; String {
    let coded_no_spacing = plain.chars()
            .filter_map(|c| {
                if c.is_ascii_alphabetic() {
                    let letter = c.to_ascii_lowercase() as u8;
                    Some(char::from(b'z' - letter + b'a'))
                } else if c.is_ascii_alphanumeric() {
                    Some(c)
                } else {
                    None
                }
            })
            .collect();

    spacer(coded_no_spacing)
}

/// "Decipher" with the Atbash cipher.
pub fn decode(cipher: &amp;str) -&gt; String {
    let mut out = encode(cipher);
    out.retain(|c| c.is_ascii_alphanumeric());
    out
}

/// Spacer adds one space every five characters to help encode function.
fn spacer(coded_no_spacing: String) -&gt; String {
    let mut coded_with_spaces = String::with_capacity(
        coded_no_spacing.len() + coded_no_spacing.len() / 5);

    for (index, ch) in coded_no_spacing.chars().enumerate() {
        if index % 5 == 0 &amp;&amp; index != 0 {
            coded_with_spaces.push(' ');
        }
        coded_with_spaces.push(ch);
    }

    coded_with_spaces
}
</code></pre>
    </div>