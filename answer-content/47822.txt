<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><code>System.Type</code> inherits a <code>Name</code> property from <code>System.Reflection.MemberInfo</code> (<a href="http://msdn.microsoft.com/en-us/library/system.type%28v=vs.110%29.aspx" rel="nofollow">MSDN</a>), which returns the name of the member, <em>not the fully qualified name</em>. As you've noticed that returns <code>Baz</code> when you want <code>Foo.Bar.Baz</code>.</p>

<p>Either you use reflection to get the three types and concatenate their <code>.Name</code>, or you do what you did and chop off the namespace from the fully qualified name.</p>

<p>And it's ugly. What are we trying to accomplish here?</p>

<pre><code>protected T LoadSample&lt;T&gt;(string fileName)
</code></pre>

<p>If you're loading data from a file named by the <code>fileName</code> argument, and using reflection to instantiate <code>Baz</code>, I'd suggest abstracting this dirt away into a <code>SampleFactory&lt;T&gt;</code>... I'm curious about what happens to the type's name in the rest of your code; reading your code makes me wonder <em>why</em> you would need to do this to <em>load a sample T from fileName</em>.</p>

<p>Is it possible that your life would be simpler if <code>T</code> had a <code>new()</code> type constraint (i.e. if <code>T</code> had a parameterless constructor)?</p>
    </div>