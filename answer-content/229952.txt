<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Possible Bug</h2>

<p>Since <code>Func&lt;int, string&gt; transform</code> is not guarded against collisions (different <code>int</code> values may yield the same string <code>result</code>), the next line is wrong. It only checks for unique elements in the already available data <code>items</code>, not in the new results fetched from <code>transform</code>.</p>

<blockquote>
<pre><code> if (hashSet.Contains( text )) {
</code></pre>
</blockquote>

<p>This could be solved by trying to add each element to the set instead:</p>

<pre><code>if (!hashSet.Add( text )) {
</code></pre>

<h2>LINQ</h2>

<p>Furthermore, I would use an <code>IEnumerable</code> to allow for some LINQ chaining.</p>

<pre><code>public static IEnumerable&lt;string&gt; GetNextName(
  int maxSize, IEnumerable&lt;string&gt; items, Func&lt;int, string&gt; transform) {
</code></pre>

<p>So we could just call:</p>

<pre><code>public class ProcessingTask : IProcessor {
    public void Execute( FileContent fileContent ) {
        GapHelper.GetNextName(5, fileContent.Components
            .Select(c =&gt; c.Name)).Take(20).Select(x 
                =&gt; new Component { Name = x, Content = "Foo" })
            .ToList().ForEach(fileContent.Components.Add);
    }
}
</code></pre>

<p>Which yields better readability. Also a fun fact about <a href="https://blogs.msdn.microsoft.com/kcwalina/2005/01/07/the-reason-why-ienumerator-extens-idisposable/" rel="nofollow noreferrer">disposing an enumerator</a> from the initial code:</p>

<blockquote>
<pre><code> using (var nameGenerator = // ..
</code></pre>
</blockquote>
    </div>