<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here's my suggestions:</p>

<h1>Design</h1>

<ul>
<li><p>Calling the constructors and destructors at the correct time with <code>constexpr</code> is indeed nontrivial, but disrespect object lifetime != POD.  Your implementation is conceptually fine with some non-POD types.  Maybe "trivial" is what you are looking for.</p></li>
<li><p>You are missing a lot of functionality.  Users may want to use them, so you shouldn't be omitting them.  In particular:</p>

<ul>
<li><p>Missing types: <code>(const_)?(reference|pointer|reverse_iterator)</code> and <code>difference_type</code>.</p></li>
<li><p>Missing constructors: <code>(count)</code>, <code>(count, value)</code>.</p></li>
<li><p>Missing functions: <code>assign</code>, <code>c?r(begin|end)</code>, <code>resize</code>, <code>emplace</code>, <code>insert</code>, <code>erase</code>, <code>swap</code>.</p></li>
<li><p>Missing operators: <code>&lt;</code>, <code>&lt;=</code>, <code>&gt;</code>, <code>&gt;=</code>.</p></li>
</ul></li>
<li><p>Don't provide a feature for the sake of providing it.  For example, <code>capacity</code> or <code>reserve</code> isn't applicable, so drop them.</p></li>
<li><p>Many things can be <code>noexcept</code>.</p></li>
<li><p><code>std::bad_alloc</code> is for dynamic allocation failures.  Don't abuse it for stack overflow.</p></li>
<li><p><code>appendCopy</code> should check the total size first instead of failing halfway done.</p></li>
</ul>

<h1>Code</h1>

<ul>
<li><p>Sort the include directives in alphabetical order.</p></li>
<li><p>Don't use ALL CAPS names for template parameters.  Reserve them for macros.</p></li>
<li><p>The <code>SIZEOF</code> and <code>DEBUG_</code> variables are never used.  Remove them.</p></li>
<li><p>Don't use multiple <code>public:</code> and <code>private:</code> labels.</p></li>
<li><p>In <code>T buffer[SIZE] = {};</code>, is there a special reason for copy-initialization from <code>{}</code>?  If yes, state it in a comment.  Otherwise, just remove the <code>=</code>.</p></li>
<li><p><code>std::initializer_list</code> should be taken by value, not const reference.</p></li>
<li><p>The <code>(first, last)</code> constructor should be constrained.</p></li>
<li><p>The comparison operators should be non-members.</p></li>
<li><p>Don't make function parameters <code>const</code>.</p></li>
<li><p><code>operator[]</code>, <code>front</code>, <code>back</code> shouldn't be <code>noexcept</code> even though it does not actually throw an exception in a well-defined way.  <code>noexcept</code> should be used for functions that <em>never fail</em>.</p></li>
</ul>
    </div>