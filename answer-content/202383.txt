<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>This is highly vulnerable for <a href="https://phpsecurity.readthedocs.io/en/latest/Cross-Site-Scripting-(XSS).html" rel="nofollow noreferrer">XSS attacks</a></h1>

<p><strong><em>Always sanitize user input, never output user input without escaping</em></strong></p>

<p>Your code will execute arbitrary HTML, CSS and JavaScript that a user can pass. Try this simple example:</p>

<pre><code>?var="&gt;&lt;script&gt;alert("How's that?")&lt;/script&gt;
</code></pre>

<p>Newer versions of Chrome and Safari will block JavaScript insertions, but this will still work in the latest Firefox.</p>

<h1>Escaping and sanitizing</h1>

<p>You can use functions like <a href="http://php.net/manual/en/function.htmlspecialchars.php" rel="nofollow noreferrer"><code>htmlspecialchars</code></a> or <a href="http://php.net/manual/en/function.htmlentities.php" rel="nofollow noreferrer"><code>htmlentities</code></a> to escape user input. Learn more: <a href="https://stackoverflow.com/q/1996122/1456376">How to prevent XSS with HTML/PHP?</a>.</p>

<p>There are also multiple ways of <a href="http://php.net/manual/de/filter.filters.sanitize.php" rel="nofollow noreferrer">sanitizing your input</a> using PHP's various <a href="http://php.net/manual/en/ref.filter.php" rel="nofollow noreferrer">filter</a> functions.</p>

<p>Alternatively you can create a white list of possible ids and check the input against this list:</p>

<pre><code>$ids = ['value-a', 'value-b'];
$id = in_array($_GET['val'], $ids) ? $_GET['val'] : null;
</code></pre>
    </div>