<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Comments regarding the structure of the program:</h2>

<ul>
<li><p><strong>Method names</strong>. The name of a method should summarize what it does. However, some of your method names are misleading because they do things they should not do.</p>

<ul>
<li>When I saw the name <code>get_files()</code>, I thought that this method just returns all the files in <code>path</code>, which is not true;</li>
<li>I would assume <code>show_todos()</code> just prints the todos, however, you also call <code>save_csv()</code> method inside it.</li>
</ul></li>
<li><p><strong>Using classes.</strong> I would not create a <code>TodoLocator</code> class. It could be just a method to which <code>path</code>, <code>ext</code>, etc. are passed as parameters. You shouldn't use class fields if you can use local variables and pass them between methods (Similarly to how you should avoid using global variables).</p></li>
</ul>

<h2>Having said that, I would structure the program as follows:</h2>

<pre><code>        def _get_files(path, ext) -&gt; List[str]:
            # return a list of files 

        def _find_todos_in_file(file, todo_token, coment_start) -&gt; List[Tuple[str, str]]:
            # return a list of todos in the file

        def find_todos(path, ext, todo_token = 'TODO', comment_start = '#') -&gt; List[Tuple[str, str]]:
            files = _get_files(path, ext)
            return [todo for file in files for todo in _find_todos_in_file(file, todo_token, coment_start)]

        def show_todos(todos: List[Tuple[str, str]]):
            # show todos

        def save_csv(todos: List[Tuple[str, str], file: str):
            # save todos to a csv file

        if __name__ == "__main__":
            todos = find_todos('.', ext='py')
            show_todos(todos)
            save_csv(todos, file)
</code></pre>

<h2>Other comments:</h2>

<ul>
<li><p>use <code>for line_no, line in enumerate(input_):</code> instead of:</p>

<pre><code>line_no = 0
with open(f, "r") as input_:
    for line in input_:
        line_no += 1
</code></pre></li>
<li><p>Regarding <code>if self.comment in line and self.td in line:</code> line: what if you have a line like this:</p>

<pre><code>TODOs.append(todo) # there are no todos in this line
</code></pre></li>
<li><p>I am not sure about whether you need a <code>recursive</code> param at all. When would you need to use <code>recursive=False</code>?</p></li>
</ul>
    </div>