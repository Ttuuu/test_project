<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Review</h3>

<p>Several issues have also been addressed in the comments below your question. A quick re-iteration:</p>

<ul>
<li>You state the user only knows Fahrenheit, yet you ask them to input in Celcius: <code>Enter a desired temperature between 73 och 77 celcius</code>.</li>
<li>For each bad attempt, you add the new input to the previous input <code>temperature = temperature + celcius;</code>. This doesn't make any sense at all.</li>
<li>You should be able to read from code what the code is about. <code>tempCheck(double temperature)</code> doesn't tell us the unit of the input. Prefer <code>celcius</code> or a custom class <code>Celcius</code>.</li>
</ul>

<hr>

<h3><code>tempCheck(double temperature)</code></h3>

<p>This method has two very different responsibilities: (1) detect status by provided temperature (2) render status information to user. These should be two different methods to allow for reusability of the status check.</p>

<p>The status could be an enum:</p>

<pre><code>enum TemperatureStatus
{
    Normal,   // 73°C - 77°C (but not 75°C)
    Perfect,  // 75°C
    Freezing, // &lt; 0°C

    // and so on ..
}
</code></pre>

<p>Have <code>tempCheck</code> return the status:</p>

<pre><code>static TemperatureStatus tempCheck(double celcius)
{
    if (celcius &lt; 0) return TemperatureStatus.Freezing;

    // and so on ..

    return TemperatureStatus.Normal;
}
</code></pre>

<p>Rendering the status message can then go to its own method:</p>

<pre><code>static string RenderStatus(TemperatureStatus status, double celcius)
{
    celcius = Math.Round(celcius);
    switch (status)
    {
        case TemperatureStatus.Freezing:
            return "The sauna has now become a freezer, \nCelcius: {celcius}";
        // and so on ..  
    }
}
</code></pre>
    </div>