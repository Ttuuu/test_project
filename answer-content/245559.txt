<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>(For anyone who stumbles across this question and decides to use the sample code).</p>
<p>Actually, the following collection does not work as intended:</p>
<pre><code>        private readonly SortedSet&lt;PathNode&gt; frontier = new SortedSet&lt;PathNode&gt;(Comparer&lt;PathNode&gt;.Create((a, b) =&gt; a.EstimatedTotalCost.CompareTo(b.EstimatedTotalCost)));
</code></pre>
<p>It disallows duplicate nodes with the same estimated cost although their positions are different. It increases pathfinding speed dramatically (there are <em>a lot</em> of nodes with the same cost), but may lead to inaccurate paths or false-negative results.</p>
<p>I didn't find any built-in collection with keys sorting <strong>and</strong> duplicate keys <strong>and</strong> fast lookup <strong>and</strong> low allocations overhead. There is non-generic <strong>binary heap</strong> implementation instead of <code>SortedSet</code>, as <a href="https://codereview.stackexchange.com/questions/245518/c-a-pathfinding-performance-and-simplicity/245522#245522">@harold</a> suggested:</p>
<pre><code>internal interface IBinaryHeap&lt;in TKey, T&gt; where TKey : IEquatable&lt;TKey&gt;
{
    void Enqueue(T item);
    T Dequeue();
    void Clear();
    bool TryGet(TKey key, out T value);
    void Modify(T value);
    int Count { get; }
}

internal class BinaryHeap : IBinaryHeap&lt;Vector2Int, PathNode&gt; 
{
    private readonly IDictionary&lt;Vector2Int, int&gt; map;
    private readonly IList&lt;PathNode&gt; collection;
    private readonly IComparer&lt;PathNode&gt; comparer;
    
    public BinaryHeap(IComparer&lt;PathNode&gt; comparer)
    {
        this.comparer = comparer;
        collection = new List&lt;PathNode&gt;();
        map = new Dictionary&lt;Vector2Int, int&gt;();
    }

    public int Count =&gt; collection.Count;

    public void Enqueue(PathNode item)
    {
        collection.Add(item);
        int i = collection.Count - 1;
        map[item.Position] = i;
        while(i &gt; 0)
        {
            int j = (i - 1) / 2;
            
            if (comparer.Compare(collection[i], collection[j]) &lt;= 0)
                break;

            Swap(i, j);
            i = j;
        }
    }

    public PathNode Dequeue()
    {
        if (collection.Count == 0) return default;
        
        var result = collection.First();
        RemoveRoot();
        map.Remove(result.Position);
        return result;
    }
    
    public bool TryGet(Vector2Int key, out PathNode value)
    {
        if (!map.TryGetValue(key, out int index))
        {
            value = default;
            return false;
        }
        
        value = collection[index];
        return true;
    }

    public void Modify(PathNode value)
    {
        if (!map.TryGetValue(value.Position, out int index))
            throw new KeyNotFoundException(nameof(value));

        collection.RemoveAt(index);
        Enqueue(value);
    }

    public void Clear()
    {
        collection.Clear();
        map.Clear();
    }

    private void RemoveRoot()
    {
        collection[0] = collection.Last();
        map[collection[0].Position] = 0;
        collection.RemoveAt(collection.Count - 1);

        int i = 0;
        while(true)
        {
            int largest = LargestIndex(i);
            if (largest == i)
                return;

            Swap(i, largest);
            i = largest;
        }
    }

    private void Swap(int i, int j)
    {
        PathNode temp = collection[i];
        collection[i] = collection[j];
        collection[j] = temp;
        map[collection[i].Position] = i;
        map[collection[j].Position] = j;
    }

    private int LargestIndex(int i)
    {
        int leftInd = 2 * i + 1;
        int rightInd = 2 * i + 2;
        int largest = i;

        if (leftInd &lt; collection.Count &amp;&amp; comparer.Compare(collection[leftInd], collection[largest]) &gt; 0) largest = leftInd;

        if (rightInd &lt; collection.Count &amp;&amp; comparer.Compare(collection[rightInd], collection[largest]) &gt; 0) largest = rightInd;
        
        return largest;
    }
}
</code></pre>
<p>Generic version:</p>
<pre><code>internal class BinaryHeap&lt;TKey, T&gt; : IBinaryHeap&lt;TKey, T&gt; where TKey : IEquatable&lt;TKey&gt;
{
    private readonly IDictionary&lt;TKey, int&gt; map;
    private readonly IList&lt;T&gt; collection;
    private readonly IComparer&lt;T&gt; comparer;
    private readonly Func&lt;T, TKey&gt; lookupFunc;
    
    public BinaryHeap(IComparer&lt;T&gt; comparer, Func&lt;T, TKey&gt; lookupFunc)
    {
        this.comparer = comparer;
        this.lookupFunc = lookupFunc;
        collection = new List&lt;T&gt;();
        map = new Dictionary&lt;TKey, int&gt;();
    }

    public int Count =&gt; collection.Count;

    public void Enqueue(T item)
    {
        collection.Add(item);
        int i = collection.Count - 1;
        map[lookupFunc(item)] = i;
        while(i &gt; 0)
        {
            int j = (i - 1) / 2;
            
            if (comparer.Compare(collection[i], collection[j]) &lt;= 0)
                break;

            Swap(i, j);
            i = j;
        }
    }

    public T Dequeue()
    {
        if (collection.Count == 0) return default;
        
        var result = collection.First();
        RemoveRoot();
        map.Remove(lookupFunc(result));
        return result;
    }

    public void Clear()
    {
        collection.Clear();
        map.Clear();
    }

    public bool TryGet(TKey key, out T value)
    {
        if (!map.TryGetValue(key, out int index))
        {
            value = default;
            return false;
        }
        
        value = collection[index];
        return true;
    }

    public void Modify(T value)
    {
        if (!map.TryGetValue(lookupFunc(value), out int index))
            throw new KeyNotFoundException(nameof(value));
        
        collection[index] = value;
    }
    
    private void RemoveRoot()
    {
        collection[0] = collection.Last();
        map[lookupFunc(collection[0])] = 0;
        collection.RemoveAt(collection.Count - 1);

        int i = 0;
        while(true)
        {
            int largest = LargestIndex(i);
            if (largest == i)
                return;

            Swap(i, largest);
            i = largest;
        }
    }

    private void Swap(int i, int j)
    {
        T temp = collection[i];
        collection[i] = collection[j];
        collection[j] = temp;
        map[lookupFunc(collection[i])] = i;
        map[lookupFunc(collection[j])] = j;
    }

    private int LargestIndex(int i)
    {
        int leftInd = 2 * i + 1;
        int rightInd = 2 * i + 2;
        int largest = i;

        if (leftInd &lt; collection.Count &amp;&amp; comparer.Compare(collection[leftInd], collection[largest]) &gt; 0) largest = leftInd;

        if (rightInd &lt; collection.Count &amp;&amp; comparer.Compare(collection[rightInd], collection[largest]) &gt; 0) largest = rightInd;
        
        return largest;
    }
}
</code></pre>
    </div>