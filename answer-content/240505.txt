<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>On your notes:</h2>

<ul>
<li><p>Problems with <code>u64</code>/<code>u32</code> got fixed once I started using <code>usize</code> everywhere. </p></li>
<li><p>Board shouldn't be copied every time in <code>next_step</code>, <code>&amp;mut Board</code> could be used instead.</p></li>
<li><p><code>next_step</code>, as well as <code>nr_of_neighbors</code> could be a methods.</p></li>
</ul>

<h2>Bugs:</h2>

<ul>
<li><p>There is a bug in calculating number of neighbors: your condition <code>!(x == cur_x &amp;&amp; y == cur_y)</code> is equivalent to <code>x != cur_x || y != cur_y</code>, which is not intended.</p></li>
<li><p>There is a problem with your algorithm: it depends on the order of the iteration, when you should really apply changes to the new board.</p></li>
</ul>

<h2>Notes about the code below</h2>

<ul>
<li>You are using <code>newtype</code> pattern to implement traits that you need on the type that doesn't do it itself. I advise you to look into <code>derive_more</code> crate. Basically, I derived a <code>Deref</code> implementation in order not to write it myself. That way, everywhere where &amp;Board is used, it can be coerced to &amp;Vec&gt; so you don't have to write <code>self.0[x]</code> to access a row.</li>
</ul>

<h2>Resulting code</h2>

<pre><code>use std::fmt;
use std::{thread, time};

use itertools::join;
use itertools::Itertools;

use derive_more::Deref;

#[repr(u8)]
#[derive(Clone, Copy, Debug, PartialEq, Eq)]
enum Cell {
    Alive,
    Dead,
}

impl fmt::Display for Cell {
    fn fmt(&amp;self, f: &amp;mut fmt::Formatter) -&gt; fmt::Result {
        match *self {
            Cell::Alive =&gt; write!(f, "x"),
            Cell::Dead =&gt; write!(f, " "),
        }
    }
}

#[derive(Deref)]
struct Board(Vec&lt;Vec&lt;Cell&gt;&gt;);

impl Board {
    fn nr_of_neighbors(&amp;self, cur_x: usize, cur_y: usize) -&gt; usize {
        let x_min = cur_x.saturating_sub(1);
        let y_min = cur_y.saturating_sub(1);

        let x_max = (cur_x + 2).min(self.len() - 1);
        let y_max = (cur_y + 2).min(self.len() - 1);

        (x_min..x_max)
            .cartesian_product(y_min..y_max)
            .filter(|&amp;(x, y)| x != cur_x &amp;&amp; y != cur_y &amp;&amp; self[x][y] == Cell::Alive)
            .count()
    }

    fn next_step(&amp;mut self) {
        let mut new_board = self.clone();

        for x in 0..self.len() {
            for y in 0..self[x].len() {
                let n = self.nr_of_neighbors(x, y);
                let cell = self[x][y];

                if cell == Cell::Alive &amp;&amp; (n == 2 || n == 3) {
                    // survives
                } else if cell == Cell::Dead &amp;&amp; n == 3 {
                    new_board[x][y] = Cell::Alive;
                } else {
                    new_board[x][y] = Cell::Dead;
                }
            }
        }

        self.0 = new_board;
    }
}

impl fmt::Display for Board {
    fn fmt(&amp;self, f: &amp;mut fmt::Formatter) -&gt; fmt::Result {
        write!(f, "{}", join(self.iter().map(|row| join(row, "|")), "\n"))
    }
}

fn main() {
    #[rustfmt::skip]
        let mut board = Board(vec![
            vec![Cell::Alive, Cell::Alive, Cell::Alive, Cell::Dead, Cell::Dead, Cell::Dead, Cell::Dead, Cell::Dead, Cell::Dead, Cell::Dead],
            vec![Cell::Alive, Cell::Dead,  Cell::Alive, Cell::Dead, Cell::Dead, Cell::Dead, Cell::Dead, Cell::Dead, Cell::Dead, Cell::Dead],
            vec![Cell::Alive, Cell::Alive, Cell::Alive, Cell::Dead, Cell::Dead, Cell::Dead, Cell::Dead, Cell::Dead, Cell::Dead, Cell::Dead],
            vec![Cell::Dead,  Cell::Alive, Cell::Alive, Cell::Dead, Cell::Dead, Cell::Dead, Cell::Dead, Cell::Dead, Cell::Dead, Cell::Dead],
            vec![Cell::Dead,  Cell::Dead,  Cell::Dead,  Cell::Dead, Cell::Dead, Cell::Dead, Cell::Dead, Cell::Dead, Cell::Dead, Cell::Dead],
            vec![Cell::Dead,  Cell::Dead,  Cell::Dead,  Cell::Dead, Cell::Dead, Cell::Dead, Cell::Dead, Cell::Dead, Cell::Dead, Cell::Dead],
            vec![Cell::Dead,  Cell::Dead,  Cell::Dead,  Cell::Dead, Cell::Dead, Cell::Dead, Cell::Dead, Cell::Dead, Cell::Dead, Cell::Dead],
            vec![Cell::Dead,  Cell::Dead,  Cell::Dead,  Cell::Dead, Cell::Dead, Cell::Dead, Cell::Dead, Cell::Dead, Cell::Dead, Cell::Dead],
            vec![Cell::Dead,  Cell::Dead,  Cell::Dead,  Cell::Dead, Cell::Dead, Cell::Dead, Cell::Dead, Cell::Dead, Cell::Dead, Cell::Dead],
            vec![Cell::Dead,  Cell::Dead,  Cell::Dead,  Cell::Dead, Cell::Dead, Cell::Dead, Cell::Dead, Cell::Dead, Cell::Dead, Cell::Dead],
        ]);

    loop {
        print!("{esc}[2J{esc}[1;1H", esc = 27 as char); // clear ANSI-compatible terminal
        println!("{}\n", board);
        board.next_step();
        thread::sleep(time::Duration::from_secs(1));
    }
}
</code></pre>
    </div>