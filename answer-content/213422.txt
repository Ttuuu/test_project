<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Since this is tagged <a href="/questions/tagged/beginner" class="post-tag" title="show questions tagged 'beginner'" rel="tag">beginner</a>, you should know that speed isn't everything. First of all you should care about making your code readable as ultimately that is more important.</p>

<ul>
<li><p>You should always put new statements on new lines. At first I ignored your first guard statement, due to this. I only caught on that you'd done this when I saw the second from last line was huge.</p></li>
<li><p>Your comments aren't great. Yes <code>[True]*(n + 1)</code> initializes a list, we can read the code to understand that.</p></li>
<li><p>Your variable names don't really help reading the code.</p></li>
</ul>



<pre><code>def sieve(limit):
    if limit &lt; 2:
        return []

    limit += 1  # Preincrement `limit` so `sieve` is inclusive, unlike `range`.
    primes = [True]*limit
    for base in range(2, int(limit**0.5 + 1)):
        if primes[base]:
            for composite in range(base*2, limit, base):
                primes[composite] = False
    return [num for num, is_prime in enumerate(primes) if is_prime][2:]
</code></pre>

<p>I'd like to point out that your memory usage can be improved. How many <span class="math-container">\$O(n)\$</span> lists do you have?</p>

<ol>
<li><code>primes</code> to perform the sieve.</li>
<li>Your list comprehension, that gets all the indexes.</li>
<li>Your duplication of the list comprehension to remove <em>two</em> values.</li>
</ol>

<p>You can remove the second by returning an iterator. As for the third, you can instead perform an <a href="https://docs.python.org/3/library/itertools.html#itertools.islice" rel="nofollow noreferrer"><code>islice</code></a>, or setting 0 and 1 to false. Yes this is now 10% slower.</p>

<p>However if you change the second for loop to run in C land rather than Python land you net a 40% speed-up from the original.</p>

<pre><code>from math import ceil


def sieve(limit):
    if limit &lt; 2:
        return []

    limit += 1  # Preincrement `limit` so sieve is inclusive, unlike `range`.
    primes = [True]*limit
    for base in range(2, int(limit**0.5 + 1)):
        if primes[base]:
            primes[base*2:limit:base] = [False]*(ceil(limit / base) - 2)

    primes[0] = primes[1] = False
    return (num for num, is_prime in enumerate(primes) if is_prime)
</code></pre>

<p>From this changing the last line to use <code>itertools.compress</code> rather than an iterator comprehension reduces time an additional 40% (nearly 70% from the original).</p>

<pre><code>from math import ceil
from itertools import compress


def sieve(limit):
    if limit &lt; 2:
        return []

    limit += 1  # Preincrement `limit` so sieve is inclusive, unlike `range`.
    primes = [True]*limit
    for base in range(2, int(limit**0.5 + 1)):
        if primes[base]:
            primes[base*2:limit:base] = [False]*(ceil(limit / base) - 2)

    primes[0] = primes[1] = False
    return compress(range(limit), primes)
</code></pre>
    </div>