<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your assumption is right: the <strong>logging library</strong> should cover your needs. I use it in every script.</p>

<p>Here is some semi-borrowed code that I use in some scripts:</p>

<pre><code># define logging options
logger = logging.getLogger(__name__)
logger.setLevel(logging.DEBUG)

# create a file handler
handler = logging.FileHandler(current_dir + log_file)
handler.setLevel(logging.DEBUG)
# create a logging format
formatter = logging.Formatter('%(asctime)s - %(filename)s:%(lineno)s - %(name)s - %(funcName)s - %(levelname)s - %(message)s', "%Y-%m-%d %H:%M:%S")
handler.setFormatter(formatter)
# add the handlers to the logger
logger.addHandler(handler)
</code></pre>

<p>Note that I am logging the <strong>line numbers</strong> as well so it's pretty easy to find the line that generated an exception and figure out the context.</p>

<p>The log looks like this:</p>

<pre><code>2020-02-12 15:51:02 - script.py:507 - __main__ - &lt;module&gt; - INFO - Result: 1500, Message: User logged out
</code></pre>

<p>There is more code actually, because I also log text <strong>to the console</strong> but in a different format, and only the INFO or ERROR messages. The DEBUG level messages on the other hand are logged to the file, which contains much more information than the console.</p>

<p>Of course the exception handlers use the same logging routine. What I like is the flexibility and the ability to <a href="https://docs.python.org/3/howto/logging-cookbook.html#logging-to-multiple-destinations" rel="nofollow noreferrer">log to multiple destinations</a>.</p>

<p>Obviously, in addition to this technique, you could also have <strong>multiple exception handlers</strong> rather than one single all-purpose <code>except Exception</code> block.</p>

<p>For example to handle key violations in SQLite you could have: </p>

<pre><code>except sqlite3.IntegrityError:
    # do something
</code></pre>

<p>It depends on opportunity and the complexity of your application. For small scripts one single handler is usually sufficient.</p>

<p>If you really want to add your own special sauce or have special needs not immediately addressed you can still implement your own class by deriving from (or overriding) logging.Logger. Since <code>logging</code> is already widespread in Pythonland I would stick with it.</p>

<p>When an exception occurs you will usually log the Python <strong>stacktrace</strong>.
But your exception handling is implemented in such a way that you are missing out on a lot of information that would really help for debugging purposes. The only information available is what you are effectively passing to your function:</p>

<pre><code>except Exception as e:
    error(2, e, table) 
</code></pre>

<p>You are discarding all the exception information available from Python. The Python stacktrace is quite verbose and when you look at it you usually understand very quickly what's wrong, or at least <em>where</em> things went wrong. Here debugging becomes a guessing game because exception handling is being underutilized.</p>
    </div>