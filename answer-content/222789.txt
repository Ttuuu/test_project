<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There are two possible memory leaks likely to occur. </p>

<ul>
<li>You should implement the <code>IDisposable</code> interface or provide an alternative way of deattaching an object from events subscribed to referenced dependencies and/or event listeners.</li>
<li>You should let the container objects dealing with <code>Converstation</code> and <code>Message</code> instances handle the lifetime of these objects correctly.</li>
</ul>

<p><code>Conversation</code> could keep <code>Message</code> instances alive and vice versa.</p>

<pre><code>public void Clear() 
{
    foreach (var message in messages) 
    {
        message.PropertyChanged -= OnMessagePropertyChanged;
    }
    messages.Clear();
}

public void Dispose()
{
    // .. dispose pattern impl
    Clear();
}
</code></pre>

<p><code>Message</code> could keep any listener alive and vice versa.</p>

<pre><code>public void Reset() 
{
    PropertyChanged = null;
}

public void Dispose()
{
    // .. dispose pattern impl
    Reset();
}
</code></pre>

<p>Consider using <a href="https://docs.microsoft.com/en-us/dotnet/framework/wpf/advanced/weak-event-patterns" rel="nofollow noreferrer">Weak Event Pattern</a> if you don't want a strong reference between an object and its event listeners.</p>
    </div>