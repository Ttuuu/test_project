<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>With this code, I think my first move would be to add a template parameter pack:</p>

<pre><code>template&lt;typename... Args&gt;
std::shared_ptr&lt;Event&gt; Event::createInstance(const EventType eventType, Args... args) {
    switch (eventType) {
        case EVENT_TYPE_SET_MATCH_TYPE:
            return std::make_shared&lt;Event::SetMatchType&gt;(args);
        // more cases
        default:
    }
    return {};
}
</code></pre>

<p>Then the unmarshalling variant gets to instantiate the template:</p>

<pre><code>std::shared_ptr&lt;Event&gt; Event::createInstanceFromJson(const Value &amp;serializedJson) {
    auto member = serializedJson.FindMember("Event.eventType");
    if (member == serializedJson.MemberEnd()) {
        throw std::invalid_argument{"Error..."};
    }
    auto eventType = static_cast&lt;EventType&gt;(member-&gt;value.GetInt());

    return Event::createInstance(eventType, serializedJson);
}
</code></pre>
    </div>