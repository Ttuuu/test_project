<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Algorithm</h1>
<p>You do a nested loop which is completely without reason</p>
<pre><code>for mult1 in range(100):
    for mult2 in range(100):
        # find all multiples of mult1 and mult2 that can be factored
        # into all numbers in a, while ignoring zero.
        if all(v == 0 for v in [(mult1 * mult2) % factor for factor in input_factors]) and (mult1 * mult2 != 0):
            fact.append(mult1 * mult2)
</code></pre>
<p>In the loop you use the counters only in a way <code>mult1 * mult2</code>. This results in</p>
<ul>
<li>199 element of the value <code>0</code> which you remove in a special clause</li>
<li>the biggest value being tested to be <code>99*99</code> which is <code>9801</code> which is far bigger than the maximum number to factor</li>
<li>typical realistic numbers being duplicated (e. g. <code>16</code> is generated 5 times)</li>
<li>10000 tests for less than 100 realistic candidates</li>
</ul>
<p>For the zeros you have a special clause and a comment for clarification. You should not generate the zeros beforehand, loop over <code>range(1, ...)</code></p>
<p>If wee look at the problem we see that a and b are in <code>range(1, 101)</code>. Any solution must be greater or equal to <code>max(a)</code>.
It also must be less or equal to <code>min(b)</code>. So it is completely sufficient to search <code>range(max(a), min(b)+1)</code>. We can improve the efficiency even a little more and step by <code>max(a)</code>.</p>
<h1>Removing duplicates</h1>
<p>If the looping is done right we do not need to remove duplicates any more. However, if you have to do de-duplication decide whether you need to preserve the order. In your code you do de-duplication while maintaining order. As maintaining order is not needed in this problem, you can simply create a set from the list. Depending on the application you may want to create a list from the set again.</p>
<pre><code>fact = set(fact)
</code></pre>
<h1>Names</h1>
<p>It is helpful to stick to the names given in the problem. That maintains readability.</p>
<p>We end up in a function like</p>
<pre><code>def get_total_x(a: Tuple[int], b: Tuple[int]) -&gt; int:
    numbers = []
    for i in range(max(a), min(b) + 1, max(a)):
        if all(i % a_i == 0 for a_i in a) and all(b_i % i == 0 for b_i in b):
            numbers.append(i)
    return len(numbers)
</code></pre>
<p>The function still misses documentation (and a better name). Type hints see @Linnys answer.</p>
    </div>