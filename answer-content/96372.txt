<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This looks pretty good. I'd propose the following.</p>

<p>First, you use <code>set_value</code> in exactly one place. It's a pretty unnecessary function, and just this would suffice:</p>

<pre><code>FlagSet &amp;operator|=(const T &amp;val)
{
    bitset.set(static_cast&lt;utype&gt;(val));
    return *this;
}
</code></pre>

<p>Second, for <code>&amp;=</code>, the expression <code>expr ? true : false</code> is an antipattern that can be replaced with just <code>expr</code>. In this case, you don't even need that as <code>bitset</code> provides <a href="http://en.cppreference.com/w/cpp/utility/bitset/set"><code>test</code></a>. The whole thing can become:</p>

<pre><code>FlagSet &amp;operator&amp;=(const T &amp;val)
{
    bool tmp = bitset.test(static_cast&lt;utype&gt;(val));
    bitset.reset();
    bitset.set(static_cast&lt;utype&gt;(val), tmp);
    return *this;
}
</code></pre>

<p>Third, you're missing a <code>return</code>:</p>

<pre><code>FlagSet &amp;operator=(const FlagSet &amp;o)
{
    bitset = o.bitset;
    return *this; // &lt;== 
}
</code></pre>

<p>But really, since these are trivial, pretty to <code>default</code> them:</p>

<pre><code>FlagSet(const FlagSet&amp; ) = default;
FlagSet&amp; operator=(const FlagSet&amp; ) = default;
</code></pre>

<p>Or don't even specify them. </p>

<p>Fourth, prefer to make <code>operator bool</code> explicit:</p>

<pre><code>explicit operator bool() const
{
    return bitset.any();
}
</code></pre>

<p>That will prevent weird expressions like <code>FlagSet{} + 4</code> from compiling.</p>

<p>Lastly, <code>__SENTINEL__</code> is a reserved word in the C++ Standard. You could instead require it to be named something else, like <code>LAST_VALUE</code> or <code>MAX_VALUE</code> or something. </p>
    </div>