<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>EDIT</strong>: I've updated the function to check for <code>phone</code> and <code>email</code>.</p>

<p>Firstly, I think it's more readable and generally preferred to put a space after each comma in a list. <a href="https://www.python.org/dev/peps/pep-0008/#id16" rel="nofollow noreferrer">PEP8</a> does not specifically mention this, but you will see that it is done in all their examples, i.e.:</p>

<pre class="lang-py prettyprint-override"><code>my_list = [
    1, 2, 3,
    4, 5, 6,
]
</code></pre>

<p>Of course in the end that's up to you, it's just a guideline.</p>

<p>Your conditions only depend on <code>phone</code> and <code>email</code>, so there's no need to apply you function to the whole DataFrame. Also, I'm not sure whether your <em>repeat the same for when both email and phone are present</em> means that in that case you also use the phone-lookup API call or another one. If in case both are present you give one of the two preference, you use that as default. So your function could look something like this:</p>

<pre class="lang-py prettyprint-override"><code>def checksocial(phone, email):
    returned_results = []
    if pd.notnull(phone) and pd.notnull(email):
        returned_results = ['skype', 'linkedin', 'twitter']  # "all" api call
    elif pd.notnull(phone) or pd.notnull(email):
        returned_results = (
            ['facebook', 'linkedin', 'twitter'] if pd.notnull(phone)
            else ['facebook', 'foursquare', 'instagram']
        )
    # I guess your returned result is a dict already, then you can skip this
    result = {social: 'Found Social Media' for social in returned_results}
    return pd.Series(result)
</code></pre>

<p>You then apply it to your two indicator columns and assign the result to the rest of your columns. Result with a slightly extended df that takes into account all possibilities:</p>

<pre class="lang-py prettyprint-override"><code>columns = ['name', 'phone', 'email', 'facebook', 'foursquare', 'instagram',
           'linkedin', 'skype', 'twitter']
df = pd.DataFrame(columns=columns, index=range(0, 4))

df['email'] = ['jim@email.com', pd.np.nan, pd.np.nan, 'jane@email.com']
df['name'] = ['Jim Bob', 'Joe Bloggs', 'Chuck Norris', 'Jane Doe']
df['phone'] = [pd.np.nan, '35543256', pd.np.nan, '123456'

df.loc[:, mycols] = df.loc[:, ["phone", "email"]].apply(
    lambda x: checksocial(*x), axis=1)

print(df)

           name     phone           email            facebook  \
0       Jim Bob       NaN   jim@email.com  Found Social Media   
1    Joe Bloggs  35543256             NaN  Found Social Media   
2  Chuck Norris       NaN             NaN                 NaN   
3      Jane Doe    123456  jane@email.com                 NaN   

           foursquare           instagram            linkedin  \
0  Found Social Media  Found Social Media                 NaN   
1                 NaN                 NaN  Found Social Media   
2                 NaN                 NaN                 NaN   
3                 NaN                 NaN  Found Social Media   

                skype             twitter  
0                 NaN                 NaN  
1                 NaN  Found Social Media  
2                 NaN                 NaN  
3  Found Social Media  Found Social Media  
</code></pre>
    </div>