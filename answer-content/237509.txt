<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Honestly, .ini is an outdated format that is considered deprecated by Microsoft.</p>

<p>Anyways, you don't actually need to write anything - you can use <code>boost::ptree</code> - property tree which can parse (read and write) ini, json, and xml formats. And it is fairly simple to use. The only reason I don't use it in my code is because I learned of it only recently.</p>

<p>At any rate I happen to also use ini format but I found the whole idea of using section+key to access data to be a poor choise. Instead I simply store all data in <code>map&lt;string,string&gt;</code> in format <code>cfg["section/key"] = "value";</code>. It deviates to some degree from classical ini format as one can effectively create subsections (e.g., <code>cfg["section/subsection/key"] = "value";</code>) as well as address values directly without sections. This way ini format becomes as powerful as xml and json - and there are major advantages to usage of such formats over classical ini. Why else do you think .ini is deprecated by Microsoft?</p>

<p><strong>Alright, about your code</strong>:
I don't see why you need to make the <code>IniSection</code> and <code>IniFile</code> to have virtual destructors and virtual functions. Do you really intend to make derived classes that are gonna override these?</p>

<p>Furthermore, it is better to write <code>IniFile() = default;</code> and <code>virtual ~IniFile() = default;</code> instead of <code>IniFile(){};</code> and <code>virtual ~IniFile(){};</code>; usually it is unimportant (as well as in the current case) but for trivial classes it can ruin performance on allocation/deallocation operations - as long as they have such class as a member or derive from it.</p>

<p>It is generally troublesome in C++, but initializing file loading from <code>std::string</code> is not a really good idea. It is fine for development code but generally you need support for non-english text. In C++20 you could simply use <code>std::u8string</code> while in current versions consider a path class as input - like one from <code>boost::filesystem</code> or one from C++17 std filesystem library.</p>

<p>Furthermore, your input/output format shouldn't be <code>int/float</code> but rather <code>long long/double</code> (or even <code>long double</code>) as otherwise you might lose data. And this isn't a class where you need performance - rather compatability is of greater value here.</p>

<p>Since compatability &gt; performance here and likely several classes in multi-threaded environment might use the same ini file class instance, you'd better make it thread-safe via <code>std::mutex</code>.</p>
    </div>