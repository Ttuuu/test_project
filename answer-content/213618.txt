<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Input validation</strong></p>

<p>User input is evil - be it nefarious or just wrong.  Spend some effort to validate it.</p>

<pre><code>printf("You are 'Crosses'. Please input co-ordinates ...\n");
// scanf(" %d %d", &amp;y_val, &amp;x_val);
if (scanf(" %d %d", &amp;y_val, &amp;x_val) != 2) {
  puts("Invalid input");
  exit(EXIT_FAILURE);
}
if (y_val &lt; 1 || y_val &gt; 3 || x_val &lt; 1 || x_val &gt; 3) {
  puts("Out of range input");
  exit(EXIT_FAILURE);
}
</code></pre>

<p>Better code would selectively allow re-inputting.</p>

<p><strong>Remove <code>//BUGGY</code> comments</strong></p>

<p>Post working code here.  For bugs you have trouble solving, consider <a href="https://stackoverflow.com/">Stack overflow</a>.</p>

<p><strong>Use <code>const</code></strong></p>

<p>Functions that do  not change their pointed-to data are better coded with <code>const</code>.  That allows for clearer function interface, wider application, more compiler time   checks and potential better optimization.</p>

<pre><code>// void update(struct game_data* game)
void update(const struct game_data* game)
</code></pre>

<p><strong>Re-use code</strong></p>

<p>Rather than 8 lines of <code>if( ((game-&gt;grid[0][0] == game-&gt;grid[0][1]) ...</code> with <code>'X'</code> and then 8 more lines of similar code with <code>'O'</code>, form a helper function.</p>

<pre><code> char three_in_row(const char g[][3]) {
   if(g[0][0] != ' ' &amp;&amp; g[0][0] == g[0][1] &amp;&amp; g[0][1] == g[0][2]) return g[0][0];
   if(g[1][0] != ' ' &amp;&amp; g[1][0] == g[1][1] &amp;&amp; g[1][1] == g[1][2]) return g[1][0];
   if(g[2][0] != ' ' &amp;&amp; g[2][0] == g[2][1] &amp;&amp; g[2][1] == g[2][2]) return g[2][0];
   if(g[0][0] != ' ' &amp;&amp; g[0][0] == g[1][0] &amp;&amp; g[1][0] == g[2][0]) return g[0][0];
   if(g[0][1] != ' ' &amp;&amp; g[0][1] == g[1][1] &amp;&amp; g[1][1] == g[2][1]) return g[0][1];
   if(g[0][2] != ' ' &amp;&amp; g[0][2] == g[1][2] &amp;&amp; g[1][2] == g[2][2]) return g[0][2];
   if(g[0][0] != ' ' &amp;&amp; g[0][0] == g[1][1] &amp;&amp; g[1][1] == g[2][2]) return g[0][0];
   if(g[0][2] != ' ' &amp;&amp; g[0][2] == g[1][1] &amp;&amp; g[1][1] == g[2][0]) return g[0][2];
   return ' ';
 }

void game_event_won(struct game_data* game) {
  switch (three_in_row(game-&gt;grid)) {
    case 'X': game-&gt;win = 1; printf("You have WON\n"); break;
    case 'O': game-&gt;win = 1; printf("You have LOST\n"); break;
  }
}
</code></pre>

<p><strong>State assessment</strong></p>

<p>Rather than <code>game_event_won()</code>, consider a function <code>TTT_rate(game)</code> that rates the board from -100 to 100.</p>

<pre><code>0: tie
100: X won
-100: O won
1...99: X winning
-1...-99: O winning
</code></pre>

<p><strong>No need for recursion</strong></p>

<p>Use a loop in <code>computer_move(struct game_data* game)</code></p>

<p><strong>Comment and code doe not jibe</strong></p>

<p>Looks like the range is [1...10].</p>

<pre><code>int turns; // Ranges from 1 to 9(game end).
if (game.turns == 10 &amp;&amp; game.win == 0){
</code></pre>

<p><strong>Format</strong></p>

<p>I'd expect the <code>while</code> block to be indented.</p>

<p>Tip: Use an auto formatter.  Manually formatting is   unproductive.</p>

<pre><code>    while (game.win == 0 ) {
    // if (game.turn == 0) {
      if (game.turn == 0) {
      ...
</code></pre>

<p><strong>No need for global data</strong></p>

<p>Move <code>struct game_data game</code> from global to inside <code>main()</code>.</p>

<p><strong>Why should user always go first?</strong></p>

<p>Consider allowing user or computer to go first.</p>

<p><strong>Advanced</strong></p>

<p>Call a function for <code>X</code> and <code>O</code> moves.  The function pair could be from <code>user_move()</code>, <code>computer_move()</code>, <code>smarter_computer_move1()</code>, <code>smarter_computer_move2()</code>, etc.  This would allow 2 to play, computer algorithm 1 vs algorithm 2, user vs various levels of play, etc.</p>
    </div>