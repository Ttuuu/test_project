<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>From the array variable:<code>symbols_list = [...'0123456789abcdefghijklmnopqrstuvwxyz']</code>, I would assume that the function would permit the use of alternative symbols for representing numbers in formats above the decimal format. I have not come across such formats, like Hexadecimal numbers being represented by letters other than the English (Latin) letters A to F.</p>
<p>However, if you stick with the English letters A to Z, then I would suggest that you could simplify the process by using the built-in (number).toString(radix) (which you are already aware of) and then just add the needed prefix (which is only required for outputs in Binary, Octal, and Hex numbers).</p>
<p>I would do this by making use of the built-in function as follows:</p>
<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>const decimalToBase = (decimal, radix = 16) =&gt; {
  let converted = (decimal).toString(radix);
  let prefix = '';
  switch (radix) {
    case 16:
      prefix = '0x';
      break;
    case 8:
      prefix = '0o';
      break;
    case 2:
      prefix = '0b';
  }
  return prefix + converted.toUpperCase();
}

console.log(decimalToBase(540));      // 0x21C  (default radix)
console.log(decimalToBase(123, 2));   // 0b1111011
console.log(decimalToBase(123, 8));   // 0o173
console.log(decimalToBase(123, 10));  // 123
console.log(decimalToBase(123, 32));  // 3R
console.log(decimalToBase(123, 36));  // 3F</code></pre>
</div>
</div>

    </div>