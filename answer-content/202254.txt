<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This is an ambitious thing to try, with many pitfalls - especially for environments which are Web-accessible.  I urge you to learn how to configure and use <code>sudo</code> instead - that's not foolproof, but it <em>is</em> a good deal safer than rolling your own.</p>

<p>That said, I'll make some observations:</p>

<ul>
<li>We're using <code>argv[1]</code> without checking whether any arguments were supplied (we should test <code>argc &gt;= 2</code> before using <code>argv[1]</code> - possibly check <code>argc == 2</code>, since we ignore any extra arguments).</li>
<li>There's a time-of-check/time-of-use (TOCTOU) race, because we examine the supplied file and later assume the properties haven't changed (we we get to running it).</li>
<li>Using <code>system</code> causes the supplied argument to be parsed as a <em>shell</em> command, which will do word splitting, expand variables and globs, and more.</li>
<li>Using a shell script from a privileged program is vulnerable to the script being changed between the interpreter being started and it opening the script to read commands (e.g. by switching symlinks).</li>
</ul>

<p>It's quite easy to exploit this script to execute anything I want on your system, if there's a directory I can write to:</p>



<ol>
<li><pre class="lang-sh prettyprint-override"><code>ln -s /bin/true 'ls -l ~root; id; cd; echo rm -rf; true .sh'
</code></pre></li>
<li><pre class="lang-sh prettyprint-override"><code>/some/path/run-as ls*.sh
</code></pre></li>
</ol>

<p>We can avoid using <code>system()</code> (and accept extra arguments if we choose), by using <code>execv()</code> instead:</p>

<pre class="lang-c++ prettyprint-override"><code>            if (match &amp;&amp; !strcasecmp(match, ".sh"))
            {
                execv(argv[1], argv+1);
                /* if we got here, exec failed */
                /* so fall through to return 1 */
            }
</code></pre>

<p>This does still leave us vulnerable to a user creating a symbolic link to a root-owned file and rewriting it to point to the user's file between the access check and the <code>exec()</code>, though.</p>

<hr>

<p>In short: <em>please</em> use <code>sudo</code> if you really have to run some things as root.  Configured properly, it can give tight control on the commands you can execute with elevated privileges.  It's not completely attack-proof, but it is much better than writing your own (it has had decades of scrutiny to improve it).</p>
    </div>