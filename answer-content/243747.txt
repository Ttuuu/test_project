<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Not an O(n) MMMR library</h2>
<p>There are a lot unnecessary inefficiency on that code. For big data, it makes a lot difference.</p>
<p>The current version, time complexity-wise...
<span class="math-container">$$\text{ mean() and mode()  are  }O(n)$$</span>.  <span class="math-container">$$\text{range() and median() are } O(n .log(n))$$</span>.</p>
<p>All could be implemented in average time complexity O(n). Not only that, checking if the list is ordered, taking the mean, max, min and mode could be done with one loop.</p>
<p>Once, you have checked the list is ordered, the median can be calculated as in this code. If is not, you can use "Median find algorithm": <a href="https://rcoh.me/posts/linear-time-median-finding/" rel="nofollow noreferrer">https://rcoh.me/posts/linear-time-median-finding/</a></p>
<p>Just as example, the code below shows how to detect ordering, and how to find the max, the min and the mean of a list. Now, you can implement "Median Finding" and add the mode calculation to have an efficient MMMR library.</p>
<pre><code>
const medianFromSorted = (numbers) =&gt; {
  const middle = Math.floor(numbers.length / 2);
  if (numbers.length % 2 === 0) {
    return (numbers[middle - 1] + numbers[middle]) / 2;
  }
  return numbers[middle];
};


const mmr = (numbers) =&gt; {

  if (numbers.length === 0) {
    return {mean: undefined, moda: undefined, median: undefined, range: undefined};
  }
  if (numbers.length === 1) {
    return {mean: numbers[0], moda: numbers[0], median: numbers[0], range: [numbers[0], numbers[0]]};
  }
  let total = 0, i;
  let asc = numbers[0] &lt;= numbers[1];
  let desc = numbers[0] &gt;= numbers[1];
  let min = numbers[0];
  let max = numbers[0];
  let previous = numbers[0];

  for (i = 0; i &lt; numbers.length; i++) {
    total += numbers[i];
    if (numbers[i] &lt; min)
      min = numbers[i];
    if (numbers[i] &gt; max)
      max = numbers[i];
    asc = asc &amp;&amp; (previous &lt;= numbers[i]);
    desc = desc &amp;&amp; (previous &gt;= numbers[i]);
    previous = numbers[i];
  }
  let median;
  if (asc || desc)
    median = medianFromSorted(numbers);
  else
    median = medianFinding(numbers);

  return {
    mean: total / numbers.length,
    median: median,
    range: [min, max]
  }

};
<span class="math-container">```</span>
</code></pre>
    </div>