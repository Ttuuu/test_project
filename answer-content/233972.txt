<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'm confused by this line of code:</p>

<pre><code>src.copyTo( dst, detected_edges);
</code></pre>

<p>What you are doing is writing into <code>dst</code>, at the location of the detected edges, the pixel value of the original input image <code>src</code>.</p>

<p>By definition, the location of the edge is somewhere half-way the transition between two more or less uniformly colored regions. Half-way you should see a color half-way between the colors of those two regions. Why is this color interesting enough to preserve in your output? What if at the location of the transition the pixel value happens to be 0?</p>

<p>The purpose of the Canny edge detector is to <em>detect</em> the location of edges. It returns a binary image where the pixels at edges are set. These locations are found by using hysteresis thresholding (a two-threshold process) of an image where the pixel values were the edge strength. That is, there is an intermediate image where the intensity of the pixel is related to the contrast at the edge. Maybe you want to recover that image? If so, you'd have to copy-paste the code inside the Canny function, and leave out the last step, the thresholding.</p>

<hr>

<p>This line:</p>

<pre><code>blur( src_gray, detected_edges, Size(3,3) );
</code></pre>

<p>is not necessary. You should be able to get the same effect by increasing the <code>apertureSize</code> parameter to <code>cv::Canny</code>. Also, a box filter is the worst type of blur filter you can apply. <a href="https://www.crisluengo.net/archives/22" rel="nofollow noreferrer">Here I wrote up a bit explaining what is so bad about the box filter.</a> One of the consequences of using a box filter before detecting edges is that you might find false edges.</p>

<p>For best precision you'd use a Gaussian filter, and then set the <code>apertureSize</code> parameter to 1 to avoid further smoothing inside the <code>cv::Canny</code> function.</p>

<hr>

<p>You also get better results if you set the <code>L2gradient</code> input parameter to <code>true</code>. This makes the function use the correct definition of norm, which leads to a more rotationally-invariant filter (this means that you will get more similar results if you rotate your image by 45 degrees, apply the filter, and then rotate the result back).</p>

<p>Combining the previous point and this point, you'd end up doing:</p>

<pre><code>GaussianBlur( src_gray, detected_edges, Size(0,0), 2 )
Canny( detected_edges, detected_edges, lowThreshold, lowThreshold*ratio, 1, true );
</code></pre>

<hr>

<p>Regarding style:</p>

<p>Try to be consistent with spacing and so on. It makes it easier to read code. For example these three consecutive lines:</p>

<pre><code>dst = Scalar::all(0);
src.copyTo( dst, detected_edges);
imshow( window_name, dst );
</code></pre>

<p>The first line has no spaces inside the parentheses, the second one only after the opening parenthesis, and the third one inside both.</p>

<p>A similar thing happens with the closing brackets: each one in your bit of code is on a different column.</p>

<p>Finally, I would suggest that you don't do</p>

<pre><code>using namespace cv;
</code></pre>

<p>and instead explicitly write <code>cv::</code> in front of each OpenCV function call. This makes it explicit where the function that you're calling comes from. This is a small program, and you only call one function that is not from OpenCV, but as your program grows, you'll have more self-written functions and maybe also call functions from a second library. Using explicit namespaces will make reading your code a lot easier.</p>

<hr>

<p>Regarding "detecting all the edges correctly":</p>

<p>This depends on your definition of edge. The Canny edge detector detects all the edges correctly, using its definition of edge.</p>

<p>If you define "edges" as the edges of all objects in the image, then it is not possible to detect them all. You can only detect edges if the contrast between the object and the background is large enough. A black object on a black background will not have any "edges" (edges according to Canny's definition) along its "edges" (the actual object's edges). If you are interested in detecting these type of edges, I recommend that you closely follow the latest research publications in the field, maybe one day someone will discover how to do this. :)</p>
    </div>