<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Some nitpicks on top of the <a href="https://codereview.stackexchange.com/a/216801/37660">already excellent review by Benjamin</a>:</p>

<ul>
<li>Use the standard library's <code>Objects.requireNonNull</code>  over <code>checkNotNull</code></li>
<li>The way you obtain the enum values feels a bit contrived. Consider using <code>values()</code> instead. It's a bit annoying that java's generics are as weak as they are, making it impossible to "just" call <code>X.values()</code> (which is guaranteed to exist)...</li>
<li>You could replace the <code>ImmutableMap</code> dependency with the standard library as well (compare <a href="https://stackoverflow.com/a/22636750/1803692">this SO answer</a>). This would allow you to use <code>EnumMap</code> for marginally better performance. </li>
<li>You could furthermore replace the Tables <code>stateProbsForObservations</code> and <code>previousStatesForObservations</code> with maps of the types <code>Map&lt;S, Double[]&gt;</code> and <code>Map&lt;S, Optional&lt;S&gt;[]&gt;</code> respectively. Which can be filled by <code>EnumMap</code> again, resulting in a further decrease in memory footprint and increase in performance. 
Again, for most uses that is only marginal.</li>
<li>I dislike the use of exceptions as flow-control and validation in the constructor of the <code>ViterbiMachine</code>. To avoid this happening, you could check the preconditions for the operations you are performing explicitly instead of relying on downstream methods to fail with a certain exception. YMMV :)</li>
<li>I dislike that the library does not expose <code>getOrDefault</code> and <code>rowOrDefault</code>, but that's really not something you can fix :/</li>
<li>The API does never imply that after calling <code>nextStep()</code> even once, <code>calculate</code> will throw an <code>IllegalStateException</code>. IG, I would try to avoid making obtaining results prone to illegal state exceptions.</li>
<li>I would also expect to be able to call <code>calculate()</code> multiple times, but that's because I'm a sucker for caching and smart &amp; lazy calculator classes. I just enjoy implementing these...</li>
</ul>
    </div>