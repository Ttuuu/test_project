<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<pre><code>        [TestMethod]
        public void LastStoneWeightTest()
        {
            int[] input = {2, 7, 4, 1, 8, 1};
            Assert.AreEqual(1, LastStoneWeight(input));
        }
        [TestMethod]
        public void LastStoneWeightCaseTest()
        {
            int[] input = { 2,2};
            Assert.AreEqual(0, LastStoneWeight(input));
        }
</code></pre>
</blockquote>

<p>These tests could be combined using <code>DataTestMethod</code> and <code>DataRow</code>.</p>

<hr>

<blockquote>
<pre><code>            BinaryMaxHeap h = new BinaryMaxHeap(stones.Length);
            foreach (var stone in stones)
            {
                h.InsertKey(stone);
            }
</code></pre>
</blockquote>

<p>This is inefficient. Inserting like this takes <span class="math-container">\$O(n \lg n)\$</span> time, whereas organising a randomly ordered array so that it satisfies the heap invariant can be done in <span class="math-container">\$O(n)\$</span> time.</p>

<p>Note that this operation on the entire array is commonly referred to as <code>heapify</code>, not the restoring of the invariant for a single insertion or deletion. I would rename <code>Heapify</code> to <code>DownHeap</code>.</p>

<hr>

<blockquote>
<pre><code>        private readonly int[] _heapArr;
        private readonly int _capacity;
</code></pre>
</blockquote>

<p>What is the purpose of <code>_capacity</code>? Would it not be better to eliminate it in favour of <code>_heapArr.Length</code>?</p>

<hr>

<blockquote>
<pre><code>            _heapSize++;
            uint i = _heapSize - 1;
            _heapArr[i] = key;
</code></pre>
</blockquote>

<p>This is a matter of opinion, but I think that</p>

<pre><code>            _heapArr[_heapSize++] = key;
</code></pre>

<p>is perfectly readable, and certainly I doubt many people would complain about</p>

<pre><code>            _heapArr[_heapSize] = key;
            _heapSize++;
</code></pre>

<hr>

<blockquote>
<pre><code>            //fix the heap as max heap
            // Fix the max heap property if it is violated
            while (i != 0 &amp;&amp; _heapArr[Parent(i)] &lt; _heapArr[i]) //bubble is generic specific
            {
                Swap(i, Parent(i));
                i = Parent(i);
            }
</code></pre>
</blockquote>

<p>I don't think the double-comment before the loop is necessary. I don't understand the third comment.</p>

<p>Why is moving down the heap pulled out as a method, but not moving up the heap?</p>

<hr>

<blockquote>
<pre><code>        public int ExtractMax()
        {
            if (_heapSize &lt;= 0)
            {
                return 0;
            }
</code></pre>
</blockquote>

<p>Not an exception?</p>

<hr>

<blockquote>
<pre><code>            if (_heapSize == 1)
            {
                _heapSize--;
                return _heapArr[0];
            }

            // Store the minimum value, and remove it from heap
            int root = _heapArr[0];
            _heapArr[0] = _heapArr[_heapSize - 1];
            _heapSize--;
            Heapify(0);
            return root;
</code></pre>
</blockquote>

<p>I would be inclined to combine the two cases:</p>

<pre><code>            int root = _heapArr[0];
            _heapSize--;
            if (_heapSize &gt; 0)
            {
                _heapArr[0] = _heapArr[_heapSize];
                Heapify(0);
            }
            return root;
</code></pre>

<hr>

<blockquote>
<pre><code>        private void Heapify(uint i)
        {
            ...
            if (largest != i)
            {
                Swap(i, largest);
                Heapify(largest);
            }
        }
</code></pre>
</blockquote>

<p>Although .Net does support tail recursion, I believe it's better supported in F# than C#. It might be worth rewriting this to be iterative instead of recursive.</p>

<hr>

<blockquote>
<pre><code>        private uint Parent(uint i)
        {
            return (i - 1) / 2;
        }
</code></pre>
</blockquote>

<p>As a matter of style here I would prefer to use <code>=&gt;</code>, but this is very subjective.</p>

<hr>

<p>In terms of performance, the only obvious improvement is the way that the heap is initialised, and that's not actually affecting the overall asymptotic performance. There may be a way to do better than <span class="math-container">\$O(n \lg n)\$</span> time overall, but it certainly isn't easy to see. A more complicated heap might give slight improvements to the average running time (e.g. by exploiting the fact that after the initial insertions all insertions will be in descending order, so you can bucket on the most significant bit), but KISS and YAGNI.</p>

<p>I commend you for including the test framework. It would be good to have some more tests: e.g. in my experience it's easy to have subtle bugs in heaps, so I now try to test them by brute force over all permutations of a small number of insertions and removals. For the <code>LastStoneWeight</code> I would consider writing a test case which uses a seeded random number generator to produce a thousand test cases, validating against a trivial but slow implementation such as proposed in Justin's answer.</p>
    </div>