<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The code is pretty good as it is. Here is how I would improve it:</p>

<h2>Constant handling</h2>

<p>In C++, you should prefer <code>const</code> over <code>#define</code>. So</p>

<pre><code>#define INITIAL_CAPACITY 5
</code></pre>

<p>becomes</p>

<pre><code>const int INITIAL_CAPACITY = 5;
</code></pre>

<p>Also don't use all uppercase names for non constant variables. It is
confusing and breaks the 50 year old tradition.</p>

<h2>Clearer names</h2>

<p>I renamed a few of your variables:</p>

<ul>
<li><p><code>MIN_CAPACITY =&gt; capacity</code> Because the instance variable holds the
<em>current</em> capacity of the dynamic array, not the <em>minimum</em> capacity.</p></li>
<li><p><code>length() =&gt; size</code> The words <em>length</em> and <em>size</em> are synonymous but
using them both can cause confusion. A reader might think is the
length the number of elements in the array and size the allocacted
size, or vice versa?</p></li>
</ul>

<h2>Offby one errors</h2>

<p>You have an offby one error in <code>deleteAt</code>. If you have a dynamic array
with 5 elements, then their positions are 0 to 4 so <code>deleteAt(5)</code>
shouldn't work, but it does. I've fixed that for you.</p>

<h2>Pretty printing</h2>

<p>Adding pretty printing functions is almost always a good idea because
they make debugging much easier. I've added one for you.</p>

<h2>Error handling</h2>

<p>Your error handling consists of printing to stdout and letting the
program continue to run. That is incorrect because errors might not be
discovered if stdout is redirected or the user is not paying attention
to what is printed.</p>

<p>There are many ways to handle errors. I've implemented basic assert
based error handling for you. But you can certainly be fancier and use
exceptions or status codes.</p>

<h2>Functions implemented in terms of each other</h2>

<p>For all dynamic arrays <code>dynarr.append(x)</code> is equivalent to
<code>dynarr.insertAt(x, dynarr.size())</code>. So <code>append</code> can just call
<code>insertAt</code>.</p>

<h2>Destructor</h2>

<p>Your dynamic array allocates memory in the constructor, but there is
no corresponding destructor that frees the memory. I've added one
looking like this:</p>

<pre><code>~dynamic_array() {
    delete[] array;
}
</code></pre>

<h2>Copying memory</h2>

<p>There's a function called <code>std::copy</code> which you can use for copying
memory. That way, you don't have to write your own copy function.</p>

<h2>Pointless comments</h2>

<p>Writing good comments is hard. As a reviewer I much prefer no comments
over pointless comments. An example of a pointless comment is <code>//
constructor init</code>. I can see that the lines below is the constructor
so the comment doesn't tell me anything I didn't already know. Same
for the comment <code>// returns size of array</code>.</p>

<h2>Source code</h2>

<p>Here is the improved version of the dynamic array:</p>

<pre><code>#include &lt;assert.h&gt;
#include &lt;cstring&gt;
#include &lt;iostream&gt;

using namespace std;

const int INITIAL_CAPACITY = 2;
const int GROWTH_FACTOR = 2;

template &lt;class T&gt;
class dynamic_array {
    T *array;
    int capacity = INITIAL_CAPACITY;
    int _size;

public:
    dynamic_array() {
        array = new T[capacity];
        _size = 0;
    }

    ~dynamic_array() {
        delete[] array;
    }

    void deleteAt(int pos) {
        assert(0 &lt;= pos &amp;&amp; pos &lt; _size);
        _size--;
        for (int i = pos; i &lt; _size; i++) {
            array[i] = array[i + 1];
        }
    }

    void insertAt(int element, int pos) {
        assert(0 &lt;= pos &amp;&amp; pos &lt;= _size);
        if(_size == capacity) {
            resize();
        }
        for(int i = _size; i &gt; pos; i--) {
            array[i] = array[i-1];
        }
        _size++;
        array[pos] = element;
    }

    void append(T element) {
        insertAt(element, _size);
    }

    int size() {
        return _size;
    }

    // doubles capacity if it has to and deletes reference to current array.
    void resize() {
        capacity *= GROWTH_FACTOR;
        T *temp = new T[capacity];
        copy(array, array + _size, temp);
        delete [] array;
        array = temp;
    }

    T get(int pos) {
        return array[pos];
    }

    void pretty_print() {
        cout &lt;&lt; "[";
        for (int i = 0; i &lt; _size - 1; i++) {
            cout &lt;&lt; array[i] &lt;&lt; " ";
        }
        if (_size) {
            cout &lt;&lt; array[_size - 1];
        }
        cout &lt;&lt; "]\n";
    }
};
</code></pre>
    </div>