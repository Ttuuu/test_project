<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><code>std::function</code> requires dynamic allocation due to its type erasure properties - plus how else to make support for <code>std::bind</code>?</p>

<p>1) The main issue with the design is that there is no way to change input types between Callable and the function. Normally, you'd want to pass data in the <code>execute</code> function by reference and then into the function according to its declaration. In your implementation inability to do so results in extra data copying. I don't know how to fix it, or if it is at all possible without making it overly complicated. You can fix it partially by utilizing the <code>std::forward</code> which will result in usage of move operations instead of copy.</p>

<pre><code>//instead of
return m_function(args...);
//write
return m_function(std::forward&lt;parameterType&gt;(args)...);
</code></pre>

<p>2) Technical issues:</p>

<pre><code>virtual returnType execute(parameterType ... params) override final;
</code></pre>

<p>It is completely meaningless to write <code>virtual ... override final</code>. It is not an error but it is clutter and it is embarrassing - shows that you aren't confident in usage of these keywords. Write either <code>virtual</code>, <code>override</code>, or <code>final</code>. Just one of them, not 2 and definitely not 3. So the <code>execute</code> function should look like:</p>

<pre><code>returnType execute(parameterType ... params) final;
</code></pre>

<p>3) template class <code>ICallable&lt;...&gt;</code> must have a virtual destruction just as all interface classes.</p>

<pre><code>template &lt;class returnType, class ... parameterType&gt;
class ICallable
{
   public:
   virtual ~ICallable() = default;
   virtual returnType execute(parameterType ... args) = 0;
};
</code></pre>

<p>Otherwise it is almost impossible to deallocate an ICallable object if it was dynamically allocated and only a pointer to <code>ICallable</code> exists. It might not be an issue since you work on embedded and try to avoid dynamic allocations but still you should keep this in mind as it limits amount of usage the class has.</p>

<p>4) Don't use <code>typedef</code>. I had to make extra effort to find definition of <code>Callbackfunction</code>. Instead utilize keyword <code>using</code> as it is much easier to read and comprehend. </p>

<pre><code>// instead of
typedef returnType (*Callbackfunction)(parameterType ... args);
typedef returnType (objectType::*Callbackfunction)(parameterType ... args);
// write
using CallbackFunction = returnType (*)(ParameterType ...);
using CallbackFunction = returnType (objectType::*)(ParameterType ...);
</code></pre>

<p>5) Initialize member pointers to <code>nullptr</code> otherwise you can't tell whether they were initialized or not. E.G.,</p>

<pre><code>CallbackFunction m_function = nullptr;
</code></pre>

<p>Imagine, you'll need to initiate <code>StaticCallback</code> empty and let somebody else fill it? Also how do you check if it was filled? Add virtual function that checks if it was initiated to the <code>interface</code> and subsequently make implementations in <code>StaticCallback</code> and <code>ObjectCallback</code>.</p>

<p>6) Also, consider making version of <code>ObjectCallback</code> that stores the object inside. Also it is advisable to make an <code>ObjectCallback</code> version that calls only the operator <code>()</code>.</p>

<p>7) Make a template helper function that generates either <code>StaticCallback</code> or <code>ObjectCallback</code> - whatever version needed depending on the parameters you pass. Though, it requires to mess with the SFINAE to make it.</p>
    </div>