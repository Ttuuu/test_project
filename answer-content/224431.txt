<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Specification</h3>

<blockquote>
  <p><em>even ValueTypes must return null for lead and lag outside the enumerable</em></p>
</blockquote>

<p>This behavior is in conflict with that of <a href="https://docs.microsoft.com/en-us/dotnet/api/system.collections.ienumerator.current?view=netframework-4.8" rel="nofollow noreferrer"><code>IEnumerator.Current</code></a>. The value should be <em>undefined</em> if out of bounds.</p>

<blockquote>
  <p>Current is <strong>undefined</strong> under any of the following conditions:</p>
  
  <ul>
  <li>The enumerator is positioned before the first element in the collection, immediately after the enumerator is created. <code>MoveNext</code> must
  be called to advance the enumerator to the first element of the
  collection before reading the value of <code>Current</code>.</li>
  <li>The last call to <code>MoveNext</code> returned <code>false</code>, which indicates the end of the collection.</li>
  <li>The enumerator is invalidated due to changes made in the collection, such as adding, modifying, or deleting elements.</li>
  </ul>
</blockquote>

<p>What exactly is 'undefined'? Find out with me..</p>

<pre><code>int[]a = new int[] {0};
var  e = a.GetEnumerator();
e.MoveNext();
e.MoveNext();

//  System.InvalidOperationException: Enumeration already finished.
Console.WriteLine(e.Current);  
</code></pre>

<p>This means that <code>lag</code> and <code>lead</code> should also throw an <code>InvalidOperationException</code> when out of bounds. So there is no value in differentiating between <em>value</em> and <em>reference</em> types.</p>

<hr>

<h3>Alternative 1</h3>

<p>What you could do is augment <code>LagLeadEnumerator&lt;T&gt;</code> with:</p>

<ul>
<li>methods <code>CanLag()</code> and <code>CanLead()</code>, optionally with overloads that take an offset.</li>
<li>methods <code>TryLag()</code> and <code>TryLead()</code>, optionally with overloads that take an offset.</li>
<li>I also like the names <code>Previous</code> and <code>Next</code> (as suggested in JanDotNet's answer) as aliases for <code>Lag(1)</code> and <code>Lead(1)</code>.</li>
</ul>

<hr>

<h3>Alternative 2</h3>

<p>As an alternative you could use a stream with look-around support. Many compiler generator APIs come with such classes. For instance, <a href="https://www.antlr.org/api/Java/org/antlr/v4/runtime/ANTLRInputStream.html" rel="nofollow noreferrer">ANTLRInputStream</a> which provides a method <code>LA(int i)</code>.</p>
    </div>