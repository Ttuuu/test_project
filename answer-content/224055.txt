<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I think this is mistake:</p>

<pre><code>self.iterable = list(iterable)
</code></pre>

<ol>
<li><p>It requires loading the entire iterable into memory. Being able to avoid this and work with large collections efficiently is one of the big benefits of iterators.</p></li>
<li><p>It won't work on non-ending iterators like <code>itertools.count()</code></p></li>
</ol>

<p>If instead, you make an iterator from the iterable, you can avoid both those problems and simplify your code by depending on the iterator's own <code>StopIteration</code> exception:</p>

<pre><code>class myEnumerate:
    def __init__(self, iterable):
        self.iterable = iter(iterable)
        self.index = -1

    def __iter__(self):
        return self

    def __next__(self):
        self.index += 1   
        return self.index, next(self.iterable)

// this now works:

from itertools import count, islice
c = count()
for (i, ch) in islice(myEnumerate(count()), 1, 10):
    print(i, ch)
</code></pre>
    </div>