<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ol>
<li><p>Distance would be easier to read if you instead used <code>def</code> as per PEP8:</p>

<blockquote>
  <p>Always use a def statement instead of an assignment statement that binds a lambda expression directly to an identifier.</p>
</blockquote></li>
<li><p>You don't need to return both the distance and the player number. If you sort the inner comprehension by the reverse of the distance.</p>

<p>This would mean you can just use <code>frisbee_held.get</code>, rather than a lambda.</p></li>
</ol>

<p>This can get:</p>

<pre><code>def distance(f, s):
    return (f[0] - s[0])**2 + (f[1] - s[1])**2

def make_player_throws_list(friends):
    throwable_friends = []
    for s in friends:
        reachable_friends = [
            (i, distance(f, s))
            for i, f in enumerate(friends)
            if s != f and distance(f, s) &lt;= s[2]**2
        ]
        throwable_friends.append([
            i for i, _ in sorted(reachable_friends, key=lambda i: i[1], reverse=True)
        ])
    return throwable_friends

def frisbees(friends, number_of_passes, player):
    frisbee_held = {i: 0 for i in range(len(friends))}
    throwable_friends = make_player_throws_list(friends)

    for _ in range(number_of_passes):
        frisbee_held[player] += 1
        player = min(throwable_friends[player], key=frisbee_held.get)
    return player
</code></pre>

<hr>

<p>Your code has a complexity of \$O(n^2 + tp)\$ where \$n\$ is <code>friends.length</code>, \$t\$ is friends that can be thrown to which is \$t \le n\$, and \$p\$ is <code>numberOfPasses</code>. The average case is also the worst case, and so this isn't great.</p>

<p>Depending on the sample you may be able to reduce the average case by using a <a href="https://en.wikipedia.org/wiki/Quadtree" rel="nofollow noreferrer">quadtree</a>. To insert into the tree takes \$O(\log(k))\$ where \$k\$ is the dimensions of the quadtree, \$400\$ here. And so you can create the tree in \$O(n\log(k))\$ time.</p>

<p>After creating the tree you may be able to get a better average speed, as you can take a square region in \$O(s\log(k))\$ time, where \$s\$ is the sample you get from the tree. Since \$s \le n\$ it has the same worst case, but allows for a better average case, depending on the sample.</p>

<p>You can then use \$s\$ to build \$t\$ making \$t \le s \le n\$. And so the worst case is worse at \$O(ns\log(k) + tp)\$, but due to potentially sampling a smaller selection can lead to a speed-up. And so this should be faster when, roughly, \$s \lt \frac{n}{\log(k)}\$. And so if each person can throw to less than one ninth of people it should be faster.</p>
    </div>