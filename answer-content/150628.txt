<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Header guards</h1>
<p>As has been pointed out in <a href="https://codereview.stackexchange.com/a/148492/4203">previous reviews</a> you aren't using header guards in your include files.  This can cause problems, in addition to slowing down your compile time.</p>
<h1>static static static</h1>
<p>If you're not planning on exporting functions then you should be declaring them as static to confine them to a <a href="https://en.wikipedia.org/wiki/Translation_unit_%28programming%29" rel="nofollow noreferrer">translation unit</a>.  <code>createNode</code> for example is only used from within 'LinkedListImpl.c'.</p>
<h1>Naming</h1>
<p>Naming is important to make your code easier to read.  It should reflect what is represented.  This is particularly important when you're naming types as they are likely to have a longer lifetime / higher visibility than variables.  You're defining an enum <code>Op</code> which is passed into <code>createList</code>.  The name tells me nothing about what it is the enum is used for.</p>
<h1>Leaky abstraction - <code>createList</code></h1>
<p>Your public list interface seems leaky to me.  You pass in an Op parameter to your <code>createList</code> method.  This parameter <em>has</em> to be <code>CREATE_NEW_LIST</code> for the linked list version, however it can be any of the values for the array implementation.  This feels wrong, if you're going to try to allow the type to be changed without the client knowing then the interface needs to work consistently across the different implementations.  For this particular issue, I would drop the extra parameter from <code>createList</code>, it makes no sense anyway.  The resize functionality should be moved into a static <code>resizeList</code> method in the arrayImpl.c.</p>
<h1>Resize</h1>
<p>At the moment, resizing is part of your public api, which means that the list clients <em>might</em> perform the action.  There are some assumptions built in to the way this resize is performed which means if the client calls it you could get into trouble.   What happens if the list is full and the client resizes it to half size, then starts pushing more items?</p>
<h1>List is incomplete</h1>
<p>Your list advertises 'createList', 'insertItem', 'deleteItem' and 'deleteLastItem'.  There's no way to actually access the items in the list.  This seems like a critical bit of functionality.  The only way to access the items is by calling 'deleteLastItem'.</p>
<h1>Missing function</h1>
<p>'arrayImpl.c' doesn't contain the function 'deleteLastItem'.  As this is a critical method for the stack to work, this <em>should</em> be causing a compilation error.</p>
<h1>Leaky abstraction - <code>deleteLastItem</code></h1>
<p>The linked list version of <code>deleteLastItem</code> returns a pointer to the node.  It should probably be returning a pointer to the item contained within the node.  As a consequence the client is either required to know what the node looks like, or expected to ignore the value.</p>
<h1>Inconsistent API</h1>
<p>The array list implementation cleans up after inserted elements by calling 'free' on the element when it is removed from the list.  The linked list version on the other hand does not perform a free on the item, it only performs a free on the node.  This means it's unclear if the list is supposed to be responsible for freeing memory of items contained within it or not.</p>
<h1><code>#if this #elif that</code></h1>
<p>I honestly don't get the point of this.  You're essentially doing the same thing in both branches <code>typedef struct List List;</code>  You're aborting the build if a macro isn't defined, but you might as well just put the typedef in and let the compiler/linker fail if it needs to.</p>
<h1>Other</h1>
<ul>
<li>There may typo in the comment in 'arrayImpl.c', which refers to the file as 'arrayImple.c'  which is it?</li>
<li>It seems strange to me that stackImpl.c includes 'list.h'  but not 'stack.h'.</li>
</ul>
    </div>