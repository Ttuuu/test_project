<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>It depends on semantics and assertions.</p>

<p>If your semantic is that any other value that 1 and 2 leads to the UNDEFINED constant AND you algorithms work then you will go fine with Martin Spamers solution.</p>

<p>Returning null or an Optional is equally good or bad if the reason to return uncertainty is bad. First you should go for a solution without returning null. In general it is a good idea to have a full covered enumeration. With that I mean that any case you can think of will always fall into exactly one of the categories the enum provides.</p>

<p>If you have a real 1:1 relationship between the value and the enum constant then you should strictly follow semantics. If an enum constant does not exists for a value then throw an exception or return null.</p>

<p>Returning an Optional should be considered carefully. For me an Optional is not an substitute for return a null value. For me it is something that states that something may be there or not NOT depending on any input parameter that provided by the caller. So you should use Optional to express a case when something currently is not available but you may come back later and the requested object will be there. And furthermore this object may disappear again in the future. Optional should be used if the requested object is nice to have but not essential. The process may not be that efficient but it will still do its job.</p>

<p>If you have a 1:1 relationship from value to enum constant and this is defined by an RFC you can assume that a missing enum constant for a value will either never comes available. Of course an enum constant could be added. But that is not what I mean. The question is: can the enum constant be resolved by an unknown value potentially at runtime? The answer is: No. That is why returning null or throwing an exception is appropriate and you should not use Optional.</p>
    </div>