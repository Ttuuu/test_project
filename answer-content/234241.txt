<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Properly document your code:<br>
Is <code>void mergeSequence(int *values, int start, int mid, int end)</code>/<code>void mergeSort(int *values, int start, int end)</code> to merge/sort in ascending or descending order?<br>
Is <code>int end</code> inclusive or exclusive?<br>
(Considering some <code>mid</code> will be used to specify the end of some <em>left</em> as well as the start of some <em>right</em>, I think it <strong>much</strong> simpler to use the [inclusive, exclusive) convention.)</p>

<p>(One thing about declaring variables in the initialisation part of a for loop that <a href="https://codereview.stackexchange.com/a/234230/93149">larkey</a> did not mention is that the scope of each such variable is restricted to that statement.)  </p>

<p>Readable, short source code is easier to grasp.<br>
Procedural abstraction can reduce the amount of code.  </p>

<p>You have <code>void displaySequence(int const *num)</code>, didn't use it in <code>void mergeSequence(int*, int,int, int)</code>. That may be because you chose to use a global variable <code>n</code> to communicate the amount of numbers to display - a static one would hardly have been better.<br>
Note how in <code>main()</code> you print different labels to know what the value-sequences are about: that should probably be a parameter to <code>displaySequence()</code> as well as the number of values to print.</p>

<p>The <code>while</code>-loop is funny for more than one thing, starting with not being a <code>for</code>-loop:<br>
You switch from <code>j++;</code> to <code>j=j+1;</code> (same for <code>i</code>).<br>
Even if boiled down to</p>

<pre><code>for (int k=start, i=0, j=0; k&lt;=end ; k++)
    if (i==n1) {
        num[k]=right[j++];
    } else if(j==n2) {
        num[k]=left[i++];
    } else if(left[i]&lt;=right[j]) {
        num[k]=right[j++];
    } else {
        num[k]=left[i++];
    }
</code></pre>

<p>, I can't make up my mind whether I'd rather<br>
- relegate <em>only one part left</em> from this loop (→ bulk copy)<br>
- use a <em>conditional expression</em> so as not to repeat <code>num[k]</code></p>
    </div>