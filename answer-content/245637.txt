<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>just need to add another approach. You could use <code>Substring</code> and <code>IndexOf</code> to get the first and the last name without looping. The only loop that you need is on last name to camelCase it. Though, names that needed to be lowered case needs to be defined in an array or a switch statement when looping over the last name, that's if you need to add more precision on your output. Here is an example :</p>
<pre><code>public static KeyValuePair&lt;string, string&gt; GetFirstAndLastName(string fullName)
{
    if(fullName?.Length == 0) { return; }

    // take the first name, trim any whitespace and camelcase it
    var firstName = ToCamelCase(fullName.Substring(0, fullName.IndexOf(' ') + 1).Trim());
    
    // take the last name, trim any whitespace, and convert it to array
    var lastNameArray = fullName.Substring(firstName.Length).Trim().Split(' '); 
    
    var lastName = string.Empty;

    foreach(var name in lastNameArray)
    {
        lastName += ToCamelCase(name) + " ";
    }

    lastName.TrimEnd();

    return new KeyValuePair&lt;string, string&gt;(firstName, lastName);
}

public static string ToCamelCase(string name)
{
    return name.Substring(0, 1).ToUpperInvariant() + name.Substring(1).ToLowerInvariant();
}
</code></pre>
<p>usage :</p>
<pre><code>var firstLastName = GetFirstAndLastName(fullName);
Console.WriteLine($"Name: {firstLastName.Key}");
Console.WriteLine($"Last name: {firstLastName.Value}");
</code></pre>
<p>another note on :</p>
<pre><code>string contents = File.ReadAllText(path);
</code></pre>
<p>it's not used, and even if it's used, it would be useless, since <code>ReadAllText</code> would open a <code>StreamReader</code>, so you either use <code>ReadAllText</code> or <code>StreamReader</code>, using both would be redundant.</p>
<p>Also, since your columns are separated by a tab, you can do this :</p>
<pre><code>string line;

while ((line = reader.ReadLine()) != null)
{
    var columns = line.Split('\t'); 

    if(columns != null &amp;&amp; columns.Length &gt; 0)
    {
        var fullName = columns[0]; 
        
        var firstLastName = GetFirstAndLastName(fullName);
        Console.WriteLine($"Name: {firstLastName.Key}");
        Console.WriteLine($"Last name: {firstLastName.Value}"); 
    }
}
</code></pre>
<p>finally, I would suggest you use any type of converter that would parse your CVS or excel file into <code>DataTable</code> or an object model to make your work much maintainable. So, you can set your validation process once, and focus on processing the data whenever needed.</p>
    </div>