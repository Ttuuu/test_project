<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Since you are constructing a full, 32-bit word from random bits, you could skip the niceties and simply generate a 32-bit random number as your p.  What is unclear is how the edge cases would behave.  For instance, I would have used an unsigned int instead of an int to hold your four values (0-255), as the leftmost one (R) might mess with the sign of p.  etc.  That should go roughly 4x faster than using 4 calls and multiplies for each pixel.</p>
<p>Also, do you really need 720 million <em>different</em> random values? or does it just need to look real random?  You could have an array of say 1,000,000 pixels, instead of p, have p[1000000].  That's a pretty fast gen, 1M v 720M.  Then, simply generate random values between 0 and 999999, do your img.setRGB() with random selections from that pallette.  And yes, that is no faster than the above code. But consider NOT generating random values from 0-999999.  Consider, instead, taking these already-random pixels in a loop, from first to last, and then repeating that loop, over and over, as you progress through your image.  Sure it will "repeat" but visually, it will be kind of hard to see a pattern.</p>
<p>As a further alternative, having very quickly generated a million random pixels, fill your image array by doing the following:</p>
<ol>
<li>generate a random number, X, from 0-970000</li>
<li>fill the first 30000 image pixels with 30000 values from the million pixels, starting at X</li>
<li>repeat for the next 30000 image pixels (a total of 24000 times.  24000 add'l calls to Math.random()).</li>
</ol>
<p>This should have a decided speed advantage over calling Math.random() 720,000,000 times and still should be uber random <em>looking</em>.</p>
    </div>