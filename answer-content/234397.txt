<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Avoid <code>using namespace std</code></h1>

<p>While it is nice to save some typing, <code>using namespace std</code> should be avoided. See this post for more details: <a href="https://stackoverflow.com/questions/1452721/why-is-using-namespace-std-considered-bad-practice">https://stackoverflow.com/questions/1452721/why-is-using-namespace-std-considered-bad-practice</a></p>

<h1>Have <code>class Scene</code> take ownership of the list</h1>

<p>At the moment, the list <code>data</code> lives outside <code>class Scene</code>. This means other code can modify the list without <code>Scene</code> knowing about it. If you only want to allow items being added via <code>Scene</code>'s <code>add()</code> and <code>del()</code> member functions, then make the list a private member variable. But in fact you already have a copy of the list in <code>Scene</code>, named <code>_items</code>. So make that the sole container of strings.</p>

<p>If you really need to have a <code>std::vector&lt;shared_ptr&lt;Item&gt;&gt;</code>, <em>and</em> a <code>std::list&lt;std::string&gt;</code>, then maybe they can be both member variables of <code>class Scene</code>?</p>

<h1>Add virtual destructors to polymorphic classes</h1>

<p>Whenever you inherit from a base class, you want the right destructor to be called. Therefore, especially if you have any non-trivial member variables, you need to declare a virtual destructor, even if it's empty:</p>

<pre><code>class Item {
    public:
    Item() {}
    virtual ~Item() {}
    ...
};

class String: public Item {
    public:
    String(...) {...}
    virtual ~String() override {}
};
</code></pre>

<p>Consider:</p>

<pre><code>Item *item = new String("foo");
delete item;
</code></pre>

<p>Without the virtual destructor, the base classes destructor would be called, which doesn't clean up <code>String</code>'s member variable <code>_s</code>.</p>

<h1>Consider making some member variables <code>private</code></h1>

<p>If a member variable should only ever be modified via a member function, then you should make that variable <code>private</code>. If other code needs to access it anyway, but only for reading, then add a function to get a <code>const</code> pointer or reference to the data. For example, in <code>Scene</code>, you don't want something to remove items directly from <code>_items</code>, because it would bypass the removal of strings from <code>data</code>. So make it private and add <code>const</code> access to it:</p>

<pre><code>class Scene {
    std::vector&lt;std::shared_ptr&lt;Item&gt;&gt; _items;

public:
    ...
    const std::vector&lt;std::shared_ptr&lt;Item&gt;&gt; &amp;get_items() const {
        return _items;
    }
}
</code></pre>

<p>Maybe the same can be applied to <code>String</code> as well.</p>

<h1>Avoid reinventing the wheel</h1>

<p>Perhaps there is a reason for it, but if I just look at the code you posted, I wonder why you create your own <code>class String</code>. If <code>Scene</code> is just a container for strings, then why not have it have <code>std::vector&lt;std::string&gt; _items</code>?</p>

<h1>Use <code>auto</code> where appropriate</h1>

<p>You can avoid repeating types by using <code>auto</code> in several places. For example, in <code>del()</code> you could write:</p>

<pre><code>auto pa = items[n];
auto pb = dynamic_pointer_cast&lt;String&gt;(pa);
</code></pre>

<h1>Use range-based <code>for</code>-loops</h1>

<p>Whenever you are iterating over the items in a container, use range-based for loops. They are easier to write, and there is less chance of errors. For example:</p>

<pre><code>for (auto item: _items) {
    item-&gt;print();
}
</code></pre>

<h1>Consider using <code>if</code>-statements with initializers</h1>

<p>C++17 made <code>if</code>-statements a bit more powerful. For example, especially when doing dynamic-casts, you can write shorter code:</p>

<pre><code>if (auto pb = dynamic_pointer_cast&lt;String&gt;(pa); pb) {
    data.remove(pb-&gt;ret());
}
</code></pre>

<h1>Prevent out-of-bounds access</h1>

<p>In <code>Scene::del()</code>, you don't check whether the supplied parameter <code>n</code> is smaller than the size of <code>_items</code>. If this function is called with a too large value, this will result in an out-of-bounds access, which, in the best case, causes a segmentation fault, but in the worst case results in weird behavior that is hard to debug.</p>

<p>If it's something that could happen due to wrong input to the program, you should add a run-time check, and for example throw an exception if <code>n</code> is too large. If the only time <code>n</code> would be too large is due to a programming error somewhere else in the code, then consider adding an <code>assert()</code> statement.</p>

<h1>Avoid using <code>std::endl</code></h1>

<p>Use <code>\n</code> instead. See this post for the rationale:
<a href="https://stackoverflow.com/questions/213907/c-stdendl-vs-n">https://stackoverflow.com/questions/213907/c-stdendl-vs-n</a></p>

<h1>Consider overloading <code>operator&lt;&lt;()</code></h1>

<p>Instead of writing a <code>print()</code> function that always prints to <code>std::cout</code>, you could rewrite this to an overload of <code>operator&lt;&lt;()</code>, so that you could print your objects to any output stream. There is a slight problem when having derived classes though, the solution is to modify your <code>print()</code> functions to take an output stream object as a parameter, and then only overload <code>operator&lt;&lt;()</code> in the base class:</p>

<pre><code>class Item {
public:
    ...
    virtual void print(std::ostream &amp;out) const = 0;

    friend std::ostream&amp; operator&lt;&lt;(std::ostream&amp; out, const Item &amp;item) {
        item.print(out);
    }
};

class String: public Item {
public:
    ...
    virtual void print(std::ostream &amp;out = std::cout) const override {
        out &lt;&lt; *_s &lt;&lt; '\n';
    }
};
</code></pre>

<p>Now you can write:</p>

<pre><code>String s;
...
std::cout &lt;&lt; s;
</code></pre>

<p>I recommend you don't print the newline character in your <code>print()</code> functions though, so code that wants to print items can decide itself whether they should be on separate lines or not.</p>

<h1>Make member functions that don't modify anything <code>const</code></h1>

<p>As I already did in the above example, functions that don't change any of the member variables should be made <code>const</code>. This will allow the compiler to perform more optimizations, and will cause it to generate errors when you accidentily do change something in const functions.</p>

<p>Another thing to consider is that if you have a const variable or const reference to a variable, then only member functions of that variable that are marked <code>const</code> can actually be called.</p>

<h1>Don't move an iterator past the end</h1>

<p>In your <code>main()</code>, you iterator over <code>data</code>. After the for loop, <code>it</code> is equal to <code>data.end()</code>. Then you write:</p>

<pre><code>*it++;
</code></pre>

<p>Depending on the implementation of <code>std::list&lt;&gt;</code>, this might cause the iterator to become invalid, and either that statement itself will cause some error, or the subsequent <code>*it = "$$$"</code> will.</p>
    </div>