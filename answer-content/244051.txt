<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>String traversal</h3>
<p>At several places in your code you convert a string to an array of its characters in order to iterate over it:</p>
<pre><code>let letters = Array(word)
for letter in letters {
    // ...
}
</code></pre>
<p>These intermediate arrays are not needed. A Swift string is a <em>collection</em> of characters, so that you can iterate over it simply with</p>
<pre><code>for letter in word {
    // ...
}
</code></pre>
<h3>Dictionary access</h3>
<p>In the <code>search()</code> method you look up the node for a character with</p>
<pre><code>guard let match = curnode.children.first(where: {(key, _) in
    key == letter
})
    else {
        return false
}
curnode = match.value
</code></pre>
<p>Similar patterns are also in the other methods. This dictionary lookup can be simplified using a subscript:</p>
<pre><code>guard let node = curnode.children[letter] else {
    return false
}
curnode = node
</code></pre>
<h3>Returning boolean values</h3>
<p>Code like</p>
<pre><code>if someCondition {
     return true
}
return false
</code></pre>
<p>can always be simplified to</p>
<pre><code>return someCondition
</code></pre>
<p>which is shorter and clearer. The search method then looks like this:</p>
<pre><code>func search(_ word: String) -&gt; Bool {
    var curnode = root
    for letter in word {
        guard let node = curnode.children[letter] else {
            return false
        }
        curnode = node
    }
    return curnode.contained
}
</code></pre>
<h3>Removing non-existent strings</h3>
<p>Removing a string which has never been inserted currently has undesired side effects:</p>
<pre><code>var trie = Trie()
trie.insert("a")
trie.remove("ab")
print(trie.search("a")) // false
</code></pre>
<p>That is easy to fix: As soon as the traversal does not find a node for the next character it should <em>return</em> instead of setting <code>curnode.contained = false</code> on the last node encountered:</p>
<pre><code>func remove(_ word: String) {
    var curnode = root
    for letter in word {
        guard let node = curnode.children[letter] else {
            return // &lt;--- HERE
        }
        curnode = node
    }
   curnode.contained = false
}
</code></pre>
<h3>Mutating (or not?) methods</h3>
<p>The <code>mutating</code> keyword in</p>
<pre><code>mutating func insert(_ word: String)
</code></pre>
<p>is not needed: <code>Node</code> is a reference type so that the properties of <code>root</code> can be modified without making the method mutating. For the same reason, the property can be declared as a constant:</p>
<pre><code>struct Trie {
    let root: Node
    // ...
}
</code></pre>
<h3>Use substrings!</h3>
<p>The main insert method create a array of all characters:</p>
<pre><code> let new_subtree = insert(Array(word), parent: root)
</code></pre>
<p>and the recursive helper methods repeatedly creates more arrays of the remaining characters:</p>
<pre><code> let rest = Array(letters.dropFirst())
</code></pre>
<p>That is very inefficient. The better approach is that the helper method takes a <code>Substring</code> argument:</p>
<pre><code>func insert(_ letters: Substring, parent: Node) -&gt; Node
</code></pre>
<p>so that it can call itself with</p>
<pre><code>let rest = letters.dropFirst()
insert(rest, parent: newNode)
</code></pre>
<p>This is called “slicing” in Swift and very efficient because the substrings share the element storage with the original string and no copies are made.</p>
<p>The main insert method then calls the helper method with a substring comprising all its characters:</p>
<pre><code>func insert(_ word: String) {
    let new_subtree = insert(word[...], parent: root)
    // ...
}
</code></pre>
<h3>Simplify the insertion method (and the Node type)</h3>
<p>I found the insertion code difficult to understand. It also has some problems (which you are already aware of):</p>
<ul>
<li>It is not possible to insert an empty string.</li>
<li>It is not possible to insert the same string twice.</li>
</ul>
<p>To be honest: I cannot see which cases are handled correctly and which are not.</p>
<p>What I also do not like is the <code>var char: Character?</code> property of <code>Node</code>. Apparently this is needed to insert a newly created subtree at the right position of the parent's <code>children</code> dictionary. But</p>
<ul>
<li>it introduces some redundancy,</li>
<li>it is not clear in which cases it can be <code>nil</code> (only in the root node?),</li>
<li>it requires forced unwrapping.</li>
</ul>
<p>Doing the insertion recursively is fine. But if we create new nodes <em>before</em> the recursive call with the rest of the string then everything becomes much simpler:</p>
<pre><code>func insert(_ word: Substring, node: Node) {
    if let letter = word.first {
        if let nextnode = node.children[letter] {
            insert(word.dropFirst(), node: nextnode)
        } else {
            let newnode = Node()
            node.children[letter] = newnode
            insert(word.dropFirst(), node: newnode)
        }
    } else {
        node.contained = true
    }
}

func insert(_ word: String) {
    insert(word[...], node: root)
}
</code></pre>
<p>The <code>char</code> property is not needed anymore, i.e. that type simplifies to</p>
<pre><code>class Node {
    var children: [Character: Node] = [:]
    var contained: Bool = false
}
</code></pre>
<p>More advantages:</p>
<ul>
<li>The recursion terminates when the string is empty, not when it is a single character. As a consequence, inserting an empty string works now.</li>
<li>Inserting the same string twice works as well.</li>
</ul>
<p>The same can be done with iteration instead of recursion:</p>
<pre><code>func insert(_ word: String) {
    var curnode = root
    for letter in word {
        if let nextnode = curnode.children[letter] {
            curnode = nextnode
        } else {
            let newnode = Node()
            curnode.children[letter] = newnode
            curnode = newnode
        }
    }
    curnode.contained = true
}
</code></pre>
<p>That is a matter of taste, but it is shorter and makes even the substrings obsolete.</p>
<h3>Naming</h3>
<p>You use different naming conventions in your code:</p>
<pre><code>curnode, newNode, new_subtree
</code></pre>
<p>The Swift naming convention is camelcase (upper camelcase for types, and lower camelcase for everything else):</p>
<pre><code>currentNode, newNode, newSubtree
</code></pre>
<p>I would also prefer <code>char</code> or <code>character</code> over <code>letter</code>: A Swift string can contain arbitrary Unicode characters, not only “letters.”</p>
    </div>