<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Recording Subclasses</h1>
<p>As of Python 3.6, there is an easy way to gather all your subclasses together, without having to risk the error-prone method of manually creating an <code>AllAlerts</code> subclass and listing all of the subclasses in it.  The key is <a href="https://docs.python.org/3/reference/datamodel.html?highlight=__init_subclass__#object.__init_subclass__" rel="nofollow noreferrer"><code>object.__init_subclass__(cls)</code></a>.  It is called when a subclass is defined.</p>
<pre><code>class BaseSource:
    subclasses = []

    def __init_subclass__(cls, **kwargs):
        super().__init_subclass__(**kwargs)
        cls.subclasses.append(cls)
        print("Registered", cls)
</code></pre>
<p>Now, whenever a subclass of <code>BaseSource</code> is defined, that subclass will be added to the <code>BaseSource.subclass</code> list.</p>
<p>Of course, <code>AllAlerts</code> did more than this.  It created one instance of each source subclass and passed the same arguments in the constructor of each.  We'll have to do that in a <code>@classmethod</code> of the base class.  It also used itertools to chain together all of the alerts from each of those source instances, so we'll have to record those source instances, and provide a <code>@classmethod</code> for getting that chain of alerts.</p>
<pre><code>from itertools import chain

class BaseSource:
    subclasses = []

    def __init_subclass__(cls, **kwargs):
        super().__init_subclass__(**kwargs)
        cls.subclasses.append(cls)
        print("Registered", cls)

    @classmethod
    def init_all(cls, db, args):
        """
        Create one instance for each subclass, constructed using the given
        'db' and 'args' values.
        """
        cls.sources = (subclass(db, args) for subclass in cls.subclasses)

    @classmethod
    def all_alerts(cls):
        """
        Return an iterable of all alerts from all subclass sources
        """
        return chain.from_iterable(src.alerts() for src in cls.sources)

    def __init__(self, db, args):
        self.db = db
        self.args = args

    def alerts(self):
        """
        Return an iterable of alerts for this class
        """
        raise NotImplementedError()
</code></pre>
<p>With this base class, you just need to define the source subclasses, as many as you like.  There is no need to remember all of the classes; the base class does that for you:</p>
<pre><code>class NagiosSource(BaseSource):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        print("Constructed Nagios Source")

    def alerts(self):
        yield "Alert 1"
        yield "Alert 2"


class ZabbixSource(BaseSource):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        print("Constructed Zabbix Source")

    def alerts(self):
        yield "Alert A"
        yield "Alert B"
</code></pre>
<p>After all of the subclass definitions have been read in, you will have to initialize them with the appropriate <code>db</code> and <code>args</code>, like you created an <code>AllAlerts</code> instance, which created all of the source objects.  And then you can request all alerts from the base class:</p>
<pre><code>BaseSource.init_all("mydb", (1, 2, 3))

print(list(BaseSource.all_alerts()))
</code></pre>
<p>Output of above:</p>
<pre><code>Registered &lt;class '__main__.NagiosSource'&gt;
Registered &lt;class '__main__.ZabbixSource'&gt;
Constructed Nagios Source
Constructed Zabbix Source
['Alert 1', 'Alert 2', 'Alert A', 'Alert B']
&gt;&gt;&gt; 
</code></pre>
<h1>Raise objects, not classes</h1>
<p>Your <code>BaseSource</code> had the method:</p>
<pre><code>    def alerts(self):
        raise NotImplementedError
</code></pre>
<p>This appears to be raise a <code>class</code> instead of an <em>instance</em> of a <code>class</code>.  You should write:</p>
<pre><code>    def alerts(self):
        raise NotImplementedError()
</code></pre>
<p>Using instances allows you to have arguments, which helps describe the error.  What does "Not Implemented" mean?  Does it mean "Not Implemented Yet", as in a later version of the library is expected to provide an implementation?  No!  We need subclasses to provide the implementation.</p>
<pre><code>    def alerts(self):
        raise NotImplementedError("This method must be overridden in derived classes")
</code></pre>
<h1>Public methods need docstrings</h1>
<p>You provide docstrings for <code>_data()</code> and <code>_raw_data()</code>, but not for <code>alerts()</code>.  This is backwards.</p>
<p>The leading underscore represents private methods.  An external caller does not need to know how to call them, because they are private.</p>
<p>On the other hand, public functions (without the leading underscore) are expected to be called by external callers.  And someone writing the code which uses these Source objects may want to know how to call the methods.  So they may type:</p>
<pre><code>&gt;&gt;&gt; help(NagiosSource)
</code></pre>
<p>and would reasonable expect to get information about how to use the class and its public method.  The docstring for <code>_data</code> and <code>_raw_data</code> would not be provided, because of the leading underscore.</p>
<p>You may provide docstrings for private methods (the expectation is the public methods would all have been documented first), but code comments may be just as useful.</p>
    </div>