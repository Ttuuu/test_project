<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Magic numbers like 0, 1, 2 and 3 returned by <code>DistanceFromObject</code> are difficult to read and are easily mixed up. Use an <code>enum</code> instead.</p>

<pre><code>[Flags]
private enum Proximity
{
    None = 0,
    Right = 1,
    Left = 2,
    LeftAndRight = Left | Right
}

// A constant allows you to change the value easily.
private const float ProximityLimit = 1.5f;

private Proximity DistanceFromObject()
{
    _RightRayCast = Physics2D.Raycast(transform.position, Vector2.right);
    _LeftRayCast = Physics2D.Raycast(transform.position, Vector2.left);

    if (_RightRayCast.distance &lt; ProximityLimit &amp;&amp; _LeftRayCast.distance &lt; ProximityLimit)
        return Proximity.LeftAndRight;

    if (_RightRayCast.distance &lt; ProximityLimit)
        return Proximity.Right;

    if (_LeftRayCast.distance &lt; ProximityLimit)
        return Proximity.Left;

    return Proximity.None;
}
</code></pre>

<p>The <code>Evade</code> method becomes easier to read.</p>

<pre><code>private Proximity Evade(float _evadeSpeed)
{
    if (Input.GetKeyDown(KeyCode.Space) &amp;&amp; _IsGrounded) {
        Proximity proximity = DistanceFromObject();
        switch (proximity) {
            case Proximity.Right:
                _RigidBody.AddForce(Vector2.up * _evadeSpeed, ForceMode2D.Impulse);
                _RigidBody.AddForce(Vector2.left * _evadeSpeed, ForceMode2D.Impulse);
                break;

            case Proximity.Left:
                _RigidBody.AddForce(Vector2.up * _evadeSpeed, ForceMode2D.Impulse);
                _RigidBody.AddForce(Vector2.right * _evadeSpeed, ForceMode2D.Impulse);
                break;

            case Proximity.LeftAndRight:
                _RigidBody.AddForce(Vector2.up * _evadeSpeed * 3, ForceMode2D.Impulse);
                break;
        }
        return proximity;
    }

    return Proximity.None;
}
</code></pre>

<p>Corresponding refactorings can be applied to <code>Attack</code> and <code>Jump</code></p>

<p>In places where Unity requires you to use an <code>int</code> (I'm not a Unity developer), at least use constants.</p>

<pre><code>const int NoProximity = 0, RightProximity = 1, ...;
</code></pre>
    </div>