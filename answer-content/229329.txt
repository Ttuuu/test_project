<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'm trying to address the same issue.
What I'm currently doing is splitting my big hooks into smaller hooks, each with a single responsability.</p>

<p>For example, in your example, you could split your <code>onKeyDown</code>, <code>rotateRight</code> and <code>rotateLeft</code> functions into a hook which takes a <code>state</code> with values and setters as only parameter:</p>

<pre class="lang-javascript prettyprint-override"><code>const useCarRotation = state =&gt; {
  const changeDirection = direction =&gt; {
    if(direction === -1) {
        state.setDirection(3)
    } else if(direction === 4) {
        state.setDirection(0)
    } else {
        state.setDirection(direction)
    }
  }

  const rotateLeft = () =&gt; {
    state.setDegrees(state.degrees - 90)
    changeDirection(state.direction - 1)
  }

  const rotateRight = () =&gt; {
    state.setDegrees(state.degrees + 90)
    changeDirection(state.direction + 1)
  }

  const onKeyDown = e =&gt; {
    switch (e.which) {
      case 37: // Left
        rotateLeft()
        break
      case 38: // Up
        move()
        break
      case 39: // Right
        rotateRight()
        break
      default:
        break
    }
  } 

  return {onKeyDown, rotateLeft, rotateRight};
}
</code></pre>

<p>You can then use it in your main hook like this:</p>

<pre class="lang-javascript prettyprint-override"><code>const useController = () =&gt; {
  const directions = [
    {x: 0, y: -1, degrees: 0}, // up
    {x: 1, y: 0, degrees: 90}, // right
    {x: 0, y: 1, degrees: 180}, // down
    {x: -1, y: 0, degrees: 270}, // left
  ]
  const [initiatedGame, setInitiatedGame] = useState(false)
  const [degrees, setDegrees] = useState(0)
  const [direction, setDirection] = useState(0)
  const [position, setPosition] = useState({'x': 0, 'y': 0})
  const [carPlaced, setCarPlaced] = useState(false)

  const chooseDirection = direction =&gt; {
    setDirection(direction)
    setDegrees(directions[direction].degrees)
    setInitiatedGame(true)
  }

  const move = () =&gt; {
    const root = process.env.REACT_APP_API_ROOT
    const {x, y} = directions[direction]
    axios.post(`${root}/move`, {
        x: position.x + x,
        y: position.y + y
      })
      .then((response) =&gt; {
        if(response.data.valid) {
          setPosition({x: position.x + x, y: position.y + y})
        }
      })
  }

  const placeCar = (x, y) =&gt; {
    if(!carPlaced) {
      setCarPlaced(true) 
      setPosition({x, y})
    }
  }

  const {onKeyDown, rotateLeft, rotateRight } = useCarRotation({
    degrees,
    direction,
    setDegrees,
    setDirection,
  })

  return {
    rotateLeft,
    rotateRight,
    move,
    degrees,
    position,
    placeCar,
    carPlaced,
    chooseDirection,
    initiatedGame,
    onKeyDown
  }
}
</code></pre>

<p>To take your example further, I believe the <code>chooseDirection</code> and <code>placeCar</code> function could be placed in a hook responsible for initializing your values. </p>

<p>I currently keep all <code>useState</code> and <code>useSelector</code> calls into my main hook but I guess they could be put into a separate hook too if you have a lot of them.</p>
    </div>