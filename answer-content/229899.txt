<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Apart from using the SE API (for example via some module like <a href="https://pypi.org/project/py-stackexchange/" rel="nofollow noreferrer">py-stackexchange</a>), there are some other optimizations possible.</p>

<p>In your <code>notify</code> function you could use the new f-strings to simplify building the command:</p>

<pre><code>def notify(title, subtitle, message, link):
    os.system(f"terminal-notifier -title {title!r}"
              f" -subtitle {subtitle!r} -message {message!r} -open {link!r}")
</code></pre>

<p>Note that strings on multiple lines like here are automatically joined.</p>

<p>Alternatively you could use the <a href="https://docs.python.org/3/library/subprocess.html" rel="nofollow noreferrer"><code>subprocess</code> module</a>, which has a lot more advanced features, which are not needed here, though:</p>

<pre><code>from subprocess import run

def notify(title, subtitle, message, link):
    run(["terminal-notifier", "-title", repr(title), "-subtitle", repr(subtitle),
         "-message", repr(message), "-open", repr(link)])
</code></pre>

<p>In your <code>fetch</code> function you have a possible slow-down. Since <code>QUE_LI</code> (not the most informative name, btw, should also probably be lowercase since it is not a global <em>constant</em>) is a <code>list</code>, checking <code>in</code> is <span class="math-container">\$\mathcal{O}(n)\$</span>. Just make it a <code>set</code> instead to get <span class="math-container">\$\mathcal{O}(1)\$</span> <code>in</code>. I would also <code>and</code> the two <code>if</code> conditions. This saves one level of indentation.</p>

<p>Instead of using <code>"html.parser"</code>, consider using <code>"lxml"</code> (you might have to <a href="https://www.crummy.com/software/BeautifulSoup/bs4/doc/#installing-a-parser" rel="nofollow noreferrer">install it first</a>). It is usually faster.</p>

<p>Also note that you are shadowing the built-in function <code>id</code> here and the way you call <code>notify</code> does not conform to Python's official style-guide, <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">PEP8</a>. It took me a while to realize that the following lines are all part of the call and its keyword arguments, and not just new lines. It is arguable whether the keywords are needed here at all.</p>

<p>It is also unclear if <code>WATCHED_TAG</code> is supposed to be one tag or multiple tags. If it is just one, as the name suggests, then <code>' '.join([WATCHED_TAG])</code> is quite pointless, since it is just <code>WATCHED_TAG</code>. If it is multiple, then that command won't join them properly and <code>if WATCHED_TAG in tags</code> will only return true if the order of the tags is the same.</p>

<pre><code>seen_ids = set()

def fetch():
    r = requests.get(SE_REALTIME)
    # r.raise_for_status()  # to enable failing if the request fails
    soup = BeautifulSoup(r.content, "lxml")
    for child in soup.find_all('div', {'data-sid': 'stackoverflow.com'}):
        question_id = child['class'][2]
        tags = child.find("span#", attrs={'class': 'realtime-tags'}).text.strip()
        if WATCHED_TAG in tags.split() and question_id not in seen_ids:
            seen_ids.add(question_id)
            question = child.find("a", attrs={'class': 'realtime-question-url realtime-title'})
            notify(f'New Question {WATCHED_TAG}', 'Stackoverflow.com',
                   question.text.strip(), question['href'])
</code></pre>
    </div>