<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ol>
<li><p>Take advantage of views, specifically C++17 <a href="https://en.cppreference.com/w/cpp/string/basic_string_view" rel="nofollow noreferrer"><code>std::string_view</code></a>, to avoid needless allocations.</p></li>
<li><p>Take advantage of the standard algorithms. They help writing clear, concise and fast code.</p></li>
<li><p>Text is hard. So, do you really want uppercase ASCII letters, all single-byte (thus non-unicode) uppercase letters the current locale supports, or full unicode support? I will ignore the last option.</p></li>
<li><p>Minimize the accessible context, and decouple as you can. <code>extractVariables()</code> can be a free function. Actually, extract a function for listing runs of any kind.</p></li>
<li><p><code>auto</code> is very useful to avoid error-prone repetition.</p></li>
</ol>

<p>Applying that:</p>

<pre><code>template &lt;class T, class F&gt;
auto listRuns(T s, F f) {
    std::vector&lt;T&gt; r;
    auto first = begin(s);
    while ((first = std::find_if(first, end(s), f) != end(s)) {
        auto last = std::find_if_not(first, end(s), f);
        r.emplace(first, last - first);
        first = last;
    }
    std::sort(begin(r), end(r));
    r.resize(end(r) - std::unique(begin(r), end(r)));
    return r;
}

auto extractVariables(std::string_view s) {
    return listRuns(s, [](unsigned char c){ return std::is_upper(c); });
    // Keep in mind the defined domain of std::is_upper()

    return listRuns(s, [](char c){ return c &gt;= 'A' &amp;&amp; c &lt;= 'Z';});
    // Assumes ASCII and asks for uppercase letters
}
</code></pre>

<p>Something to ponder:</p>

<p>It might seem (or rarely actually be) advantageous to first insert into a <code>std::set</code> or <code>std::unordered_set</code> to filter out duplicates.<br>
Unfortunately the added complexity and reduced locality of reference will almost always destroy any potential advantage, unless it leads to a very significant saving of memory. Every single dynamic allocation has (sometimes significant) overhead though.<br>
So if you want to try it, measure.</p>
    </div>