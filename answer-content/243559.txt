<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here are some things that may help you improve your code.</p>

<h2>Separate interface from implementation</h2>

<p>It makes the code somewhat longer for a code review, but it's often very useful to separate the interface from the implementation.  In C, this is usually done by putting the interface into separate <code>.h</code> files and the corresponding implementation into <code>.c</code> files.  It helps users (or reviewers) of the code see and understand the interface and hides implementation details.  The other important reason is that you might have multiple source files including the <code>.h</code> file but only one instance of the corresponding <code>.c</code> file.  In other words, split your existing <code>.h</code> file into a <code>.h</code> file and a <code>.c</code> file.</p>

<h2>Make sure you have all required <code>#include</code>s</h2>

<p>The code uses <code>perror</code> but doesn't <code>#include &lt;stdio.h&gt;</code>.  Also, carefully consider which <code>#include</code>s are part of the interface (and belong in the <code>.h</code> file) and which are part of the implementation per the above advice.</p>

<h2>Don't print from a library</h2>

<p>Because you're creating something like a library that might be called by many different kinds of programs, the code should not print anything or assume that there even is anything on which to print.  For that reason, I would strongly advise removing the <code>perror</code> line.</p>

<h2>Provide complete code to reviewers</h2>

<p>This is not so much a change to the code as a change in how you present it to other people.  Without the full context of the code and an example of how to use it, it takes more effort for other people to understand your code.  This affects not only code reviews, but also maintenance of the code in the future, by you or by others.  One good way to address that is by the use of comments.  Another good technique is to include test code showing how your code is intended to be used.  Here's code I wrote to try out your functions:</p>

<pre><code>#include "ftable.h"
#include &lt;assert.h&gt;

int main() {
    ftable *hash = alloc_ftable();
    for (unsigned i = 0; i &lt; 100; ++i) {
        hash = insert(hash, i, i*i);
    }
    for (unsigned i = 0; i &lt; 100; ++i) {
        assert(i*i == get(hash, i));
    }
    // delete odd keys
    for (unsigned i = 1; i &lt; 100; i += 2) {
        delete(hash, i);
    }
    // verify that it's still correct
    for (unsigned i = 0; i &lt; 100; ++i) {
        if (i &amp; 1) {
            assert((uin)-1 == get(hash, i));
        } else {
            assert(i*i == get(hash, i));
        }
    }
    // resize hash table
    hash = resize(hash);
    // verify that it's still correct
    for (unsigned i = 0; i &lt; 100; ++i) {
        if (i &amp; 1) {
            assert((uin)-1 == get(hash, i));
        } else {
            assert(i*i == get(hash, i));
        }
    }
    free_table(hash);
}
</code></pre>

<h2>Measure the performance before and after any changes</h2>

<p>As with the test function above, you should write many different test functions for your hash and measure their performance.  It's only by actually measuring before and after any change that you will be able to tell for certain whether you are improving or worsening the performance.</p>

<h2>Consider using better naming</h2>

<p>Although some of the names are quite brief, I didn't have much difficulty in understanding them, so I think the current names are adequate.  However, although you as the programmer are interested in the hash table mechanism, from another programmer's point of view trying to <em>use</em> this code, it would probably be better to call it a <code>map</code> or <code>hashmap</code> or even <code>associative_array</code> because that's essentially what the code is for, even if the details happen to feature a hashing algorithm internally.  Also, it seems to me that <code>resize</code> should probably not be used other than internally.  For that reason, I'd suggest that it should be <code>static</code> and solely within <code>ftable.c</code>.  Also <code>data</code> should clearly be <code>state</code> or <code>bucket_state</code>.</p>

<h2>Combine <code>typedef</code> with <code>struct</code> declaration</h2>

<p>It's purely a stylistic preference, but if you're going to use <code>typedef</code>s for your <code>struct</code>s, you should know that it's common practice to combine them for brevity and clarity:</p>

<pre><code>typedef struct sftbl {
    ftbucket* buckets;
    unsigned size;
    unsigned count;
    uint8_t lvl;
} ftable;
</code></pre>

<h2>Use <code>const</code> where practical</h2>

<p>In the <code>get</code> routine, the underlying structure is not modified and so that parameter should be declared <code>const</code> to signal that fact:</p>

<pre><code>uin get(const ftable* ft, uin key);
</code></pre>

<h2>Check the return value of <code>malloc</code></h2>

<p>If the system is running out of memory, <code>malloc</code> will return <code>NULL</code>.  Code <strong>must</strong> check the return value to make sure it is not <code>NULL</code> before dereferencing the variable or the program will crash.</p>

<h2>Consider <code>unsigned</code> instead of a custom type</h2>

<p>The code currently won't compile for an ARM processor since neither <code>__x86</code> nor <code>__x86_64</code> are defined for that processor type.  That's not really a necessary restriction, so I'd recommend instead simply using <code>unsigned</code> and making the <code>typedef</code> like this:</p>

<pre><code>#include &lt;limits.h&gt;

#if UINT_MAX == 4294967295u
    // 32-bit version
#elif UINT_MAX == 18446744073709551615u
    // 64-bit version
#else 
    #error "unsigned type does not appear to be 32- or 64-bit value."
#endif
</code></pre>

<h2>Understand constant values</h2>

<p>In C, when you write a value like <code>14480561146010017169</code> or <code>0x7FFFFFFFFFFFFFF</code> it is interpreted by the preprocessor as a signed value.  If you want unsigned values, you must say so, so these constants should be written as <code>14480561146010017169u</code> or <code>0x7FFFFFFFFFFFFFFu</code> with the trailing <code>u</code> signifying unsigned.  Also, your <code>mask</code> values should be sized appropriately as per the previous advice.</p>

<h2>Goto is <strong>still</strong> considered dangerous</h2>

<p>The <code>goto</code> in this code makes a difficult-to-understand control flow even more difficult to understand.  That is not a good idea.  So first let's look at the dubious <code>while(1)</code> loop.  Does it <em>really</em> never exit?  No, that's misleading.  If we study the code, we see it exits when it's able to place the data in a bucket.  So instead of <code>while(1)</code>, I would write this:</p>

<pre><code>unsigned nind = index &amp; mask[ft-&gt;lvl];
for (dist = 0;
     ft-&gt;buckets[nind].data != EMPTY &amp;&amp; ft-&gt;buckets[index + dist].data != TMBSTN;
     ++dist) 
{  
    // the loop
}

/* Write the data in this bucket */
ft-&gt;buckets[nind].data = OCCPD;
ft-&gt;buckets[nind].key = key;
ft-&gt;buckets[nind].val = val;
ft-&gt;buckets[nind].dist = dist;
ft-&gt;count++;
return ft;
</code></pre>

<p>Now we can eliminate the <code>goto</code> by rewriting the clause within the loop:</p>

<pre><code>if (dist &gt; MAX_PROBES) {
    ft = resize(ft);
    index = key % ft-&gt;size;
    nind = index &amp; mask[ft-&gt;lvl];
    dist = 0;
    continue;
}
</code></pre>

<p>A similar transformation can be applied elsewhere as with <code>get</code>:</p>

<pre><code>unsigned get(const ftable* ft, unsigned key) {
    unsigned index = key % ft-&gt;size;
    unsigned retval = -1;
    for (uint8_t dist = 0; dist &lt;= MAX_PROBES; ++dist) {
        unsigned nind = (index + dist) &amp; mask[ft-&gt;lvl];
        if (ft-&gt;buckets[nind].data == OCCPD &amp;&amp; ft-&gt;buckets[nind].key == key) {
            retval = ft-&gt;buckets[nind].val;
            break;
        } else if (ft-&gt;buckets[nind].data == EMPTY) {
            break;
        }
    }
    return retval;
}
</code></pre>

<h2>Use library calls efficiently</h2>

<p>Instead of these two lines:</p>

<pre><code>nt-&gt;buckets = malloc(sizeof(ftbucket) * nt-&gt;size);
memset(nt-&gt;buckets, 0, sizeof(ftbucket) * nt-&gt;size);
</code></pre>

<p>I'd write this:</p>

<pre><code>nt-&gt;buckets = calloc(nt-&gt;size, sizeof(ftbucket));
</code></pre>

<h2>Avoid C++ keywords</h2>

<p>There may come a time that you or someone else wants to incorporate this C code into a C++ project.  Unfortunately, the <code>delete</code> function sits atop the C++ reserved word <code>delete</code>.  Rename it to <code>remove</code> to avoid such clashes.</p>
    </div>