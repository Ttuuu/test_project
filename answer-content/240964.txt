<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Code Review:</h2>

<p>Please put your code in a namespace.</p>

<hr>

<pre><code>ThreadPool(uint8_t numThreads) {
    assert(numThreads &gt; 0);
</code></pre>

<p>This is dangerous and will never assert!</p>

<p>The input type here <code>uint8_t</code> which means it is not signed and thus can only be positive (so the only number that it will assert on is if <code>numThreads</code> is zero.</p>

<p>The problem is that C++ integer type conversion will "automatically" convert a negative signed number into a unsigned value (which will usually result in a very large positive value).</p>

<pre><code>ThreadPool  pool(-10);   // Will compile.
                         // Will not assert as -10 is a signed value and will
                         // be auto converted to unsigned at which point it
                         // will be positive and pass the assert test.
</code></pre>

<hr>

<p>Here is a good place to use the range based for:</p>

<pre><code>    for(int i = 0; i &lt; threads.size(); ++i){
        threads[i].join();
    }

    for(auto&amp; thread: threads){
        thread.join();
    }
</code></pre>

<hr>

<p>The use of <code>typedef</code> has been replaced by the <code>using</code> declaration:</p>

<pre><code>//get return type of the function
typedef decltype(f(args...)) retType;

// Rather use this:
using retType = decltype(f(args...));
</code></pre>

<hr>

<p>Not in favor of using <code>decltype()</code> here as you are getting the type of the function (not the return type). Then getting the return type by effectively inferring the calling.</p>

<pre><code>typedef decltype(f(args...)) retType;
std::packaged_task&lt;retType()&gt; task(std::bind(f, args...));
                   ^^^^^^^^^.  Inferred function call
</code></pre>

<p>There are actually templates to extract this value directly from the type:</p>

<pre><code>using RetType = invoke_result_t&lt;Func, Args....&gt;;
</code></pre>

<hr>

<p>Still on the same statement. It is sort of standard practice for user defined types <code>retType</code> in the case to have an initial uppercase letter. This allows you to easily see types over objects.</p>

<hr>

<p>If you set the <code>shutdown</code> flag this still never leaves the <code>wait()</code> unless there are also objects in the <code>jobQueue</code>.</p>

<pre><code>                notifier.wait(lock, [this] {return !jobQueue.empty(); });

                if(shutdown){
                    break;
                }
</code></pre>

<p>You need to test for the <code>shutdown inside the</code>wait()` test method.</p>

<pre><code>                notifier.wait(lock, [this] {return !jobQueue.empty() || shutdown; });

                if(shutdown){
                    break;
                }
</code></pre>

<hr>

<p>This is worrying. Though I can't spot the issue:</p>

<pre><code>                //strange bug where it will continue even if the job queue is empty
                if (jobQueue.size() &lt; 1)
                    continue;
</code></pre>

<hr>

<p>This seems to be wrong advice.<br>
I though function return values were already R-Values.<br>
Where is my thinking going wrong?</p>

<p><strike>
You don't need the <code>std::move()</code> here.</strike></p>

<pre><code>                job = std::move(jobQueue.front());
</code></pre>

<p></p>

<hr>

<p>When you are using <code>emplace()</code> you are building the object the container holds by using its constructor.</p>

<p>So here you are creating a temporary object then call the move constructor to move the thread into the container. But you don't need to constructor the temporary thread object as the threadFunc will be forwarded to the thread constructor in the object.</p>

<pre><code>        threads.emplace_back(std::thread(threadFunc));

        // Remove the thread
        threads.emplace_back(threadFunc);
</code></pre>

<hr>
    </div>