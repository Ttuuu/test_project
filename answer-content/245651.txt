<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ol>
<li>Regarding setting up your database connection and error reporting, please refer to <a href="https://codereview.stackexchange.com/a/243749/141885">this recent post from YCS</a>.</li>
<li>I'm noticing that you are unconditionally mutating several of the user submitted values. If you have any concerns that someone might legitimately access this page without submitting these variables, then you should have a condition to determine if the script should be used as a signup attempt or merely bounced.  Otherwise, if the only reason that a legitimate user will be accessing this page is via a signup attempt, then I would say you should remove the <code>empty()</code> calls and use a function-less falsey check (e.g. <code>if (!$_POST["first_name"]) {</code>) because if the variables are guaranteed to be set, then <code>empty()</code> is doing unnecessary work.</li>
<li>Be sure that you are calling the right encoding function for the right reason and at the right time.  In short, you should not be htmencoding values before they go into the db, you should only be encoding strings just before printing them to screen. Please read: <a href="http://htmlentities()%20vs.%20htmlspecialchars()" rel="nofollow noreferrer">htmlentities() vs. htmlspecialchars()</a> and <a href="https://stackoverflow.com/q/2077576/2943403">PHP &amp; mySQL: When exactly to use htmlentities?</a></li>
<li>I don't see any reason to declare these empty strings as variables: <code>$pw = '';</code> and <code>$pw2 = '';</code>.  I also think it is poor naming convention to declare string data as a variable including the word <code>array</code> such as <code>$friend_array = ',';</code>.</li>
<li>I think <code>if ($_POST['pw'] !== $_POST['pw2']) {</code> should be moved up the script with the other validators.  You don't want to do any db fetching until the user input has clear all basic hurdles.</li>
<li>The secondary condition in <code>if ($row &amp;&amp; $row['email'] == $_POST['email']) {</code> is nonsense.  You have already required this expression to be <code>true</code> in your sql.  There is no benefit in the redundant check in php.  In fact, because you only need to check if the username exists in the db, you should probably just write a COUNT() query.  See this suggestion: <a href="https://codereview.stackexchange.com/a/245536/141885">Return row count from mysqli prepared statement</a></li>
<li>I would not be bloating my <code>$_SESSION</code> array with the markup that you are piling into <code>$_SESSION['error']</code>.  Trim all the fat and just keep the "white meat": <code>$_SESSION['error'] = 'E-mail exists'</code>.  You should be moving all of your styling to an external stylesheet anyhow.  Drop that <code>&lt;b&gt;</code> tag and just use styling.  Never use more html markup than you need to.</li>
<li>I don't like the idea of saving a default value of a comma in the <code>friend_array</code> column.  If they have no friends, then the value should be <code>NULL</code> (or an empty string if you must).  That said, if you are unconditionally hardcoding a value to be INSERTed into every row, then that argues that you should be modifying the table structure and declaring the default value for <code>friends_array</code> as <code>','</code>.  This way you don't even need to declare the <code>$friends_array</code> variable or bloat your prepared statement / binding with the extra syntax.</li>
<li>"<em>You can now login.</em>" is not an error, so it is inappropriate to write that data into <code>$_SESSION['error']</code>.  The next developer is going to be scratching their head at your decision to write conflicting data into certain SESSION elements.  Create better naming convention and/or change your SESSION structure.</li>
<li>I don't like that you are printing the <code>$errors</code> then redirecting the user. Please read this: <a href="https://stackoverflow.com/q/7066527/2943403">Redirect a user after the headers have been sent</a> Not only will <code>header()</code> prompt problems after you have printed to screen, it doesn't make a lot of sense if you aren't going to let them see the errors that are printed.  I'd say it makes better sense to push all of the errors into <code>$_SESSION['errors']</code>, then after the redirect you should <code>echo implode("&lt;br&gt;\n", $_SESSION['errors']);</code> in whatever format will be attractive to the user.</li>
<li>I do like that you are sanitizing the input heavily and that you are using <code>$_POST</code> to transfer the form data to a database writing process.</li>
</ol>
<hr>
<p>A late note... if the <code>friends_array</code> is a collection of user ids/usernames, then a First Normal Form (1NF) rule should be implemented.  Ditch the <code>friends_array</code> column. Create a new table called <code>friends</code> with separate rows for each relationship.  The functional benefits are many.</p>
    </div>