<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Coding style guide</h2>

<p>well, simply one: Java <a href="https://www.oracle.com/java/technologies/javase/codeconventions-namingconventions.html" rel="nofollow noreferrer">uses CamelCase</a> for methods not underlines eg. <code>game1.do_game();</code> would be <code>game1.doGame();</code></p>

<h2>naming</h2>

<ul>
<li>i have a little problem with your namings, see for example <code>Play game1 = new Play();</code> is it a game or is it a play? </li>
<li>same applies here: <code>private Map board;</code> - should the class be renamed? or is the name of the variable chosen poorly?</li>
<li>same applies here: <code>Menu start = new Menu;</code> - since it's the only menu in this context</li>
<li><code>Menu.run_menu();</code> should be renamed into <code>Menu.printRunMenu</code> as all other methods have such an suffix - and: It is far more precise than a mere <code>runMenu()</code></li>
<li><code>Play.do_game()</code> is misleading, you play a party, so why don't you name it this way? <code>Play.playParty()</code> - but now it's obvious that <code>Play</code> should be renamed into <code>Game</code> as you realized on your own, when you named the instance of <code>Play</code> <code>game1</code></li>
<li>naming pun: <code>Play.make_move(Player player)</code> vs <code>Player.do_move(...);</code> - they should share the same name because they do (technically) the same thing!</li>
<li><code>Player.check_coords(x,y);</code> is misleading since it's not clear WHAT you check. maybe it should be renamed into <code>Player.isInside(x,y);</code> which leads to the next question: Why is it on <code>Player</code> and not on the <code>Board</code> ?</li>
<li>in your loops you could use the proper names for your variables - instead of <code>for (int i = 0; i &lt; map_size; i++)</code> and <code>for (int j = 0; j &lt; map_size; j++)</code> you could use <code>for (int x = 0; x &lt; map_size; x++)</code> and <code>for (int y = 0; y &lt; map_size; y++)</code> </li>
</ul>

<h2>primitive obssesion</h2>

<ul>
<li><code>private byte play_state = 0;</code> instead of using cryptic bytes as states use an <code>Enum</code> - such an enum contains cleary readable state names, that anyone can handle... what is <code>state 0</code>?</li>
<li>why not se a class for your <code>Icon</code>? is a <code>char</code> really good enough for an icon (<code>char tmp_icon;</code>) - this also violates the <a href="https://blog.cleancoder.com/uncle-bob/2014/05/12/TheOpenClosedPrinciple.html" rel="nofollow noreferrer">open/closed priniciple</a></li>
<li>further on <code>Icon</code> as class: it could replace the method <code>Bot.another_icon()</code></li>
<li>this draws further circles where icon is mis-used: <code>int starting_icon</code> ... now it's an <code>int</code> - that confuses me further - instead use a proper class for that (an <code>Enum</code> would be sufficent here as well)</li>
<li>same applied for <code>int bot_level</code> - instead give your bot class an enum of level - <code>Bot.Level.POOR</code> would be far more precise! </li>
<li>same for <code>game_mode</code> (i wont <a href="https://clean-code-developer.com/grades/grade-1-red/#Don8217t_Repeat_Yourself_DRY" rel="nofollow noreferrer">DRY</a> here) </li>
<li>same for <code>game_condition</code></li>
<li>same for <code>data_style</code></li>
</ul>

<h2>segregation of concerns</h2>

<ul>
<li>the <code>HumanPlayer</code> class should not be responsible for input handling <code>get_cords_in_seq()</code>, <code>get_cords_as_board()</code> - write a class for this responsibility</li>
<li>same for <code>Settings.get_value</code> and <code>Settings.get_valu_2</code> (also: typo here)</li>
<li>same for <code>GameSettings.</code></li>
</ul>

<h2>program logic</h2>

<p>it would be more easy to read if you reformat the condition at <code>PlayerHuman.do_move()</code> - first come the check conditions then comes the code executed (removes redundancy):</p>

<pre><code>if (map.isOutside(x,y)) {//abort criteria
    System.out.println("Your cords should be beetween 0-" + (map.map_size-1));
    return; //aborts as expected
} 
if (map.isCellOccupied(x, y)) { //another abort criteria
    System.out.println("This cell is already occupied");
    return; //aborts as expected
}

map.print_map();
do_move(map); 
</code></pre>
    </div>