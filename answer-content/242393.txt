<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>High-level</h1>

<ol>
<li><p><code>LazyEnum</code> should be separate from the underlying datatype.
You should allow a similar interface like the following:</p>

<pre class="lang-py prettyprint-override"><code>@dataclasses.dataclass
class Product:
    id: int
    name: str

class Products(metaclass=LazyEnumMeta, type=Product):
    pass

Products(1001, 'foo')
</code></pre>

<p>This can alleviate the following problem. If, however, you still run into this problem, it's because your using <code>Products</code> for something it shouldn't be used for.</p>

<blockquote>
  <p>But be careful, we may accidentally overwrite other class attributes.</p>
</blockquote></li>
<li><p>You should allow the enum class to function similarly to how Python's does.</p>

<pre class="lang-py prettyprint-override"><code>class Products(metaclass=LazyEnumMeta, type=Product):
    product_one = first_product = 1001
    product_two = 1002
</code></pre>

<p>By only using the ID we can allow the the Product to not be constructed yet, but still define the mapping.</p></li>
<li><p>You should re-decide where the following exception is handled.</p>

<blockquote>
  <p>Member with identifier value {value!r} already exists.</p>
</blockquote>

<p>If you handle it on <code>Products</code> then you could theoretically allow people to create multiple <code>Product</code>s with different values that aren't in the enum.</p>

<p>If you go Graipher's route then you're locking down <code>Product</code> when you may want to use it in two enums.</p>

<p>It boils down to, where do you want the singleton <code>Product</code>s to be scoped?</p></li>
<li><p>I'm not a fan of having the <code>__call__</code> function as a <code>__getitem__</code>.</p></li>
</ol>

<p>Here's a proof of concept for the above suggestions.</p>

<pre class="lang-py prettyprint-override"><code>import dataclasses
import inspect


class LazyEnumMeta(type):
    def __new__(mcls, name, bases, attrs, type):
        _attrs = {}
        for key in list(attrs.keys()):
            if not (key.startswith('__') and key.endswith('__')):
                _attrs[key] = attrs.pop(key)

        attrs['_type'] = type
        arguments = inspect.signature(type).parameters.values()
        attrs['_id'] = next(iter(arguments)).name
        attrs['_attrs'] = _attrs
        attrs['_items'] = {}
        return super().__new__(mcls, name, bases, attrs)

    def __call__(self, *args, **kwargs):
        id = args[0] if args else kwargs[self._id]
        if id in self._items:
            return self._items[id]
        self._items[id] = item = self._type(*args, **kwargs)
        return item

    def __getitem__(self, id):
        return self._items[id]

    def __getattr__(self, name):
        return self._items[self._attrs[name]]


@dataclasses.dataclass
class Product:
    id: int
    name: str


class Products(metaclass=LazyEnumMeta, type=Product):
    FIRST = 1001


print(Products(id=1001, name='foo'))
print(Products[1001])
print(Products.FIRST)
</code></pre>

<h1>Granular</h1>

<ul>
<li><p>Many of your names are long and needlessly use Hungarian notation <code>_object_id_to_value_map</code>. This can just be <code>_id_to_value</code> or <code>_by_ids</code>.</p>

<p>You should notice that many of my names above are really short. <code>type</code>, <code>id</code>, <code>attrs</code>, <code>items</code>. You don't need long names, and when you do it's normally a good idea to refactor the code to prevent a god class.</p></li>
<li><p>I'd much prefer to use <code>inspect</code> than the low level <code>cls.__init__.__code__.co_varnames[1]</code>.</p></li>
<li><p>Your hanging indents are not 'correct'. You should change:</p>

<blockquote>
  <pre class="lang-py prettyprint-override"><code>raise ValueError(f'Identifier field {cls._identifier_field_name!r} '
                f'has invalid value {value!r}.')
</code></pre>
</blockquote>

<p>To:</p>

<pre class="lang-py prettyprint-override"><code>raise ValueError(f'Identifier field {cls._identifier_field_name!r} '
                 f'has invalid value {value!r}.')
</code></pre>

<p>Alternately you can change your style and use:</p>

<pre class="lang-py prettyprint-override"><code>raise ValueError(
    f'Identifier field {cls._identifier_field_name!r} '
    f'has invalid value {value!r}.'
)
</code></pre></li>
<li><p>I don't really see any gain from using <code>id(new_member)</code>. If anything it makes the code more annoying.</p></li>
<li>I don't think exposing <code>identifier_value_map</code>, <code>alias_to_member_map</code>, <code>identifier_field</code> or <code>all_aliases</code> publicly are good design choices.</li>
</ul>
    </div>