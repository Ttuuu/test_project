<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>PEP8</strong></p>

<p>Python uses underscore as naming separator in function and variable names, see <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">PEP8</a></p>

<p><strong>Naming</strong></p>

<pre><code>for i,v in enumerate(nums)
</code></pre>

<p>It's better to use some obvious names so instead of <code>i,v</code> you should use <code>index, value</code></p>

<p><strong>Improvements</strong></p>

<p>You've got a right idea on how to solve this, but there are some minor things in your implementation that can be improved.</p>

<pre><code>for i,v in enumerate(nums):
    if v &gt; len(nums):
        nums[i]=-1
    elif v &lt;= 0:
        nums[i]=-1
    else:
</code></pre>

<p>this part can be simplified to</p>

<pre><code>if  0 &gt;= value &gt; len(nums):
    continue
</code></pre>

<p>Now your while loop can make infinite number of cycles on such list <code>[3,4,3,-1]</code> so you need to handle this, also you don't have to replace items that are <code>&lt;= 0</code> or items that are <code>&gt;= len(nums)</code> with <code>-1</code> you can just skip them.</p>

<p>So in the end your code should look like this:</p>

<pre><code>def first_missing_positive(nums):
    """
    :type nums: List[int]
    :rtype: int
    """
    if not nums:
        return 1
    for index, value in enumerate(nums):
        if len(nums) &lt; value &lt;= 0:
            continue
        while index + 1 != nums[index] and 0 &lt; nums[index] &lt;= len(nums):
            v = nums[index]
            nums[index], nums[v-1] = nums[v-1], nums[index]
            nums[v-1] = v

            # Don't create infinite loops
            if nums[index] == nums[v-1]:
                break

    for index, value in enumerate(nums, 1):
        if value != index:
            return index
    return len(nums) + 1
</code></pre>
    </div>