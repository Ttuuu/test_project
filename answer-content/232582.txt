<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Naming</h1>

<p>I assume that you are program a game which has multiple instances of <code>GameObject</code>.</p>

<p>Imagine we are program a chess game:<br>
There are two <code>players</code> which play on a <code>board</code> with multiple <code>pieces</code> on it.<br>
Since <em>Chess</em> is the context, I don't need to prefix all words with <code>Chess</code>: <strike><code>Chess</code></strike><code>player</code>, <strike><code>Chess</code></strike><code>board</code> and <strike><code>Chess</code></strike><code>piece</code>.</p>

<p>Now to your scenario:<br>
Since the context is a <em>Game</em> the prefix <em>Game</em> in <code>GameObject</code> is redundant.</p>

<h1>To Generell</h1>

<blockquote>
  <pre class="lang-java prettyprint-override"><code>public class GameObject {

 // ...
 public Object filling;

 // ...

 public void paint(Graphics gr) throws IOException{
     if(filling instanceof BufferedImage) {
         gr.drawImage((Image) filling, position.getX(), position.getY(), null);
     }
     else if(filling instanceof Color) {
         gr.setColor((Color) filling);
         gr.fillRect(position.getX(), position.getY(), pictureWidth, pictureHeight);
     } else {
         System.err.println("programmer, you forgot to add a way to draw this object");
     }
 }

 // ...
}
</code></pre>
</blockquote>

<p>The <code>Object filling</code> is to generell. We should create an abstract <code>DrawTechnique</code> which separate te:</p>

<pre class="lang-java prettyprint-override"><code>public class GameObject {

  // ...
  public Drawable drawable;

  // ...

  public void paint(Graphics gr) throws IOException {
    drawable.drawOn(gr);
  }

  // ...
}

class Image implements Drawable {

  /*...*/

  @Override
  public void drawOn(Graphics gr) { /*...*/ }

}

class Color implements Drawable {

  /*...*/

  @Override
  public void drawOn(Graphics gr) { /*...*/ }

}
</code></pre>

<p>By using <a href="https://en.wikipedia.org/wiki/Polymorphism_(computer_science)" rel="nofollow noreferrer">polymorphism</a> you achieve a more flexible way: We don't need <code>if</code>-branches, is more type-save, we can add a new <code>Drawable</code>-type without modifying <code>GameObject</code>. Without polymorphism we need to add a new <code>if</code>-branch to check if it is a type we want to draw.</p>
    </div>