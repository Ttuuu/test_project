<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Performance</h3>

<p>The main culprit for exceeding the time limit is here:</p>

<pre><code>while end &lt; s.count { ... }
</code></pre>

<p>A Swift string is a <code>Collection</code> but not a <code>RandomAccessCollection</code>, so that the complexity of <code>var count</code> is <span class="math-container">\$ O(n) \$</span>, where <span class="math-container">\$ n \$</span> is the number of characters in the string. </p>

<p><code>s.count</code> is called on each iteration, so that the total complexity becomes  <span class="math-container">\$ O(n^2) \$</span>.</p>

<p>Since you already converted the string to an array of characters, you can simply replace the condition by </p>

<pre><code>while end &lt; stringArray.count { ... }
</code></pre>

<p>Arrays are <code>RandomAccessCollection</code>s and determining their count is a <span class="math-container">\$ O(1) \$</span> operation. That should already improve the performance considerably for large strings.</p>

<p>An alternative is to iterate over/keep track of string <em>indices</em> instead, that makes the <code>stringArray</code> obsolete:</p>

<pre><code>var start = s.startIndex // Start of current window
var end = s.startIndex // End of current window
var len = 0 // Length of current window

while end != s.endIndex {
    let curChar = s[end]
    s.formIndex(after: &amp;end)
    len += 1

    // ...
}
</code></pre>

<h3>Some simplifications</h3>

<p>Testing for an empty string can be done with <code>isEmpty</code>:</p>

<pre><code>if s.isEmpty || t.isEmpty || s.count &lt; t.count {
    return ""
}
</code></pre>

<p>When building the frequency map you can use the dictionary subscripting with default value:</p>

<pre><code>var freq: [Character : Int] = [:]
for curChar in t {
    freq[curChar, default: 0] += 1
}
</code></pre>

<p>and that can be further shorted using <code>reduce(into:)</code>:</p>

<pre><code>var freq = t.reduce(into: [:]) { dict, char in
    dict[char, default: 0] += 1
}
</code></pre>

<h3>Use <code>Optional</code> instead of magic values</h3>

<p>Here</p>

<pre><code>var resLen = Int.max
</code></pre>

<p>you are using a “magic value”: <code>Int.max</code> indicates that no matching window has been found so far. That works because the given strings are unlikely to have <span class="math-container">\$ 2^{63} - 1 \$</span> characters, but it forces you to use exactly the same “magic value” at</p>

<pre><code>if resLen == Int.max { ... }
</code></pre>

<p>Also the initial value of</p>

<pre><code>var resStart = 0
</code></pre>

<p>is meaningless, it will be overwritten as soon as the first matching window is found.</p>

<p>Magic values are frowned upon in Swift because there is a dedicated language feature for the purpose: the <em>optional</em> values.</p>

<pre><code>var resLen: Int?
</code></pre>

<p>clearly indicates an undefined value, and later be tested with optional binding.</p>

<p>A (minor) drawback is that you no longer simply compare</p>

<pre><code>if resLen &gt; end - start { ... }
</code></pre>

<p>but I'll come back to that later.</p>

<h3>Use <code>struct</code>s to combine related properties</h3>

<p>Both the current and the best window are described by two properties (</p>

<pre><code>var end = 0
var start = 0

var resStart = 0
var resLen = Int.max
</code></pre>

<p>or – with the above suggestion – by three properties</p>

<pre><code>var start = s.startIndex // Start of current window
var end = s.startIndex // End of current window
var len = 0 // Length of current window

// Similar for best window ...
</code></pre>

<p>With a </p>

<pre><code>struct StringWindow {
    var startIndex: String.Index
    var endIndex: String.Index
    var length: Int

    // ...
}
</code></pre>

<p>these related properties are nicely combined, and it makes the code more self-documenting:</p>

<pre><code>var currentWindow = StringWindow(...)
var bestWindow: StringWindow?
</code></pre>

<p>Comparing the length against the optional <code>bestWindow</code> can be put into a method of that type, assigning a new best window is simply done with</p>

<pre><code>bestWindow = currentWindow
</code></pre>

<p>and the final result can be determined with optional binding:</p>

<pre><code>if let best = bestWindow {
    return String(s[best.startIndex..&lt;best.endIndex])
} else {
    return ""
}
</code></pre>

<h3>Putting it together</h3>

<p>Putting all the above suggestions together the code could look like this:</p>

<pre><code>func minWindow(_ s: String, _ t: String) -&gt; String {

    struct StringWindow {
        var startIndex: String.Index
        var endIndex: String.Index
        var length: Int

        init(for string: String) {
            self.startIndex = string.startIndex
            self.endIndex = string.startIndex
            self.length = 0
        }

        func shorter(than other: StringWindow?) -&gt; Bool {
            if let other = other {
                return length &lt; other.length
            } else {
                return true
            }
        }
    }

    if s.isEmpty || t.isEmpty || s.count &lt; t.count {
        return ""
    }

    var freq = t.reduce(into: [:]) { dict, char in
        dict[char, default: 0] += 1
    }
    var distinct = freq.count

    var currentWindow = StringWindow(for: s)
    var bestWindow: StringWindow?

    while currentWindow.endIndex != s.endIndex {
        let curChar = s[currentWindow.endIndex]
        s.formIndex(after: &amp;currentWindow.endIndex)
        currentWindow.length += 1

        if let val = freq[curChar] {
            freq[curChar] = val - 1
            if val - 1 == 0 {
                distinct -= 1
            }
        }

        while distinct == 0 {
            if currentWindow.shorter(than: bestWindow) {
                bestWindow = currentWindow
            }

            let curStart = s[currentWindow.startIndex]
            if let val = freq[curStart] {
                freq[curStart] = val + 1
                if val + 1 &gt; 0 {
                    distinct += 1
                }
            }
            s.formIndex(after: &amp;currentWindow.startIndex)
            currentWindow.length -= 1
        }
    }

    if let best = bestWindow {
        return String(s[best.startIndex..&lt;best.endIndex])
    } else {
        return ""
    }
}
</code></pre>

<h3>Final remarks</h3>

<ul>
<li><p>Try to use more descriptive variable names (what is <code>var distinct</code>) or at least document their meaning.</p></li>
<li><p>Don't abbreviate variable names: use e.g. <code>length</code> instead of <code>len</code>, or <code>startIndex</code> instead of <code>start</code>.</p></li>
<li><p>Determining the number of key/value entries in a dictionary can be simplified to</p>

<pre><code>var distinct = freq.count
</code></pre>

<p>instead of <code>freq.keys.count</code>.</p></li>
<li><p>The parentheses at</p>

<pre><code>while (distinct == 0) { ... }
</code></pre>

<p>are not needed.</p></li>
</ul>
    </div>