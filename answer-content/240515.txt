<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Reinventing the Wheel</h2>

<p>The code contains it's own version of the <code>ASSERT()</code> macro. It might be better to use the <code>ASSERT()</code> macro provided by `#include  so that anyone that has to maintain the code is familiar with the macro and it's usage. This will default to the macro being enabled when the code is being debugged.</p>

<p>The original version of the code had included local versions of <code>assert.h</code> and <code>math.h</code>, it would have been better to just use the standard versions of those file.</p>

<h2>Private Data</h2>

<p>Not all of the functions listed in cstack.h need to be listed in cstack.h. Some examples are <code>cstack_size(const cstack* const stack)</code>, <code>cstack_size_t cstack_capacity(const cstack* const stack)</code> and <code>cstack_size_t cstack_free_space(const cstack* const stack)</code>.</p>

<p>These functions are primarily for internal use of the library. They can be declared <code>static</code> functions which makes them private to <code>cstack.h</code>. To be able to print the values returned from those functions the function <code>print_stack()</code> should be added to <code>cstack.h</code> and the entire function should be moved to the bottom of <code>cstack.c</code>.</p>

<pre><code>static cstack_size_t cstack_size(const cstack* const stack)
{
    ASSERT(stack);

    return stack-&gt;top - stack-&gt;data;
}

static cstack_size_t cstack_capacity(const cstack* const stack)
{
    ASSERT(stack);

    return stack-&gt;cap - stack-&gt;data;
}

static cstack_size_t cstack_free_space(const cstack* const stack)
{
    ASSERT(stack);

    return cstack_capacity(stack) - cstack_size(stack);
}
</code></pre>

<h2>Function Order</h2>

<p>There really isn't any reason to have a function prototype for <code>print_stack()</code>. The order of <code>main()</code> and <code>print_stack()</code> can be swapped. This is also true of the 3 functions listed in the Private Data section. The beginning of a <code>C</code> source file should be the building blocks used by the rest of the functions, this is counter intuitive to those coming to <code>C</code> from C++ where it is better to list the public functions first.</p>

<h2>Boolean Values</h2>

<p>If the file <code>stdbool.h</code> is included, you can use variables of type bool and values of <code>true</code> and <code>false</code>. Then the function <code>cstack_empty()</code> can return a bool rather than an int.</p>
    </div>