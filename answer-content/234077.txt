<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>As far as I know, in <code>ADO.NET</code> the connection pooling is enabled by default, and if you don't need to pool connections, you'll have to explicitly disable pooling.</p>

<p>So, for your implementation, everything seems okay to me, but <code>DbConnectionManager</code> seems to be specific for handling the connection! so, <code>BuildCommand</code> method will be odd in this class! </p>

<p>I would prefer to rename it to something covers all exposed operations and keep everything simpler.</p>

<p>for <code>GetOpenSqlConnection()</code> this could be unnessary, since you can do it in the property level. </p>

<p>What I suggest is to make DbConnection &amp; ConnectionString static, so you ensure you only have a single instance of <code>SqlConnection</code>. and create two constructors one takes SqlConnection, and the other one takes connectionString. you would have something like this : </p>

<pre><code>public class DbConnectionManager : IDbConnectionManager
{
    // make it static to have a single instance
    private static SqlConnection DbConnection
    {
        get =&gt; DbConnection is null ? new SqlConnection(ConnectionString) : DbConnection;
        set =&gt; DbConnection = value;
    }

    // store the connectionString of SqlConnection, for connection backup.
    private static string ConnectionString { get; set; } = DbConnection.ConnectionString;


    public DbConnectionManager(string connectionString) 
        : this(new SqlConnection(connectionString)) { }

    public DbConnectionManager(SqlConnection dbConnection)
    {
        DbConnection = dbConnection;
        ConnectionString = dbConnection.ConnectionString;
    }
}
</code></pre>

<p>in both constructors, they're initiating a new <code>DbConnection</code> and the <code>ConnectionString</code> is just backup, in case your actual DbConnection is lost, you can re-initiate it with the connectionString that you've stored. </p>

<p>doing that, it'll eleminate the need of : </p>

<pre><code>private SqlConnection GetOpenSqlConnection()
{
    if (ReferenceEquals(DbConnection, null))
    {
        DbConnection = new SqlConnection(ConnectionString);
    }

    if (DbConnection.State != ConnectionState.Open)
    {
        DbConnection.Open();
    }

    return DbConnection;
}
</code></pre>

<p>for :</p>

<pre><code>public IDbCommand BuildCommand(DbParameter[] parameters, string query)
{
    if (parameters == null) throw new ArgumentNullException(nameof(parameters));
    if (string.IsNullOrWhiteSpace(query)) throw new ArgumentException(nameof(query));

    var command = new SqlCommand { Connection = GetOpenSqlConnection() };
    command.Parameters.AddRange(parameters);
    command.CommandText = query;

    return command;
}
</code></pre>

<p>Since there is no actual execution is going here, opening a connection here is not needed, because you built the command and return the instance back to execute it somewhere else. this may requires you to create two public methods for opening and closing connection before you call the execute methods such as <code>command.ExecuteNonQuery()</code>. </p>

<p>What I would do is maybe make this method private, and create public methods for each SQL execution type such as <code>ExecuteNonQuery</code> and <code>ExecuteScalar</code> and <code>ExecuteReader</code>, with the same arguments of <code>BuildCommand</code> has, and all will be from within the same class. 
Something like this : </p>

<pre><code>public void ExecuteNonQuery(DbParameter[] parameters, string query)
{
    var command = BuildCommand(parameters, query);

    if (DbConnection.State != ConnectionState.Open)
        DbConnection.Open();

    command.ExecuteNonQuery();
}
</code></pre>

<p>The best approach for that will be creating a static property of <code>SqlCommand</code> then you initiate it, use it across the class, dispose it whenever you're done.</p>

<p>another question got in my mind is this : </p>

<pre><code>if (parameters == null) throw new ArgumentNullException(nameof(parameters));
</code></pre>

<p>why you made parameters required? suppose you need to execute a query with no parameters such as <code>SELECT * FROM table</code>, then, you would have to adjust the current implementation or create new method for that. So, keeping it optional will come in handy. </p>
    </div>