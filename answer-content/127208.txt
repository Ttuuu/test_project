<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>1</strong></p>

<p>Despite the fact that bare <strong><code>except</code></strong> works, it would be nicer to be more explicit about what exception you are catching. I would write</p>

<pre><code>except ValueError:
</code></pre>

<p><strong>2</strong></p>

<p><strong><code>pow</code></strong> shadows away the function provided by Python; I would rename it to, say, <strong><code>mypow</code></strong>. Not that it matters in this case, but in a larger program you should not do this: finding bugs due to a shadowed identifier is hard.</p>

<p><strong>3</strong></p>

<p>You can rewrite the actual logic much more succintly by using a dictionary mapping the name of an operator to the actual function performing the operation.</p>

<p><strong>Summa summarum</strong></p>

<p>All in all, I had this in mind:</p>

<pre><code>    def add(a, b):
        return a + b


    def sub(a, b):
        return a - b


    def mul(a, b):
        return a * b


    def div(a, b):
        return a / b


    def mypow(a, b):
        return a ** b


    if __name__ == "__main__":
        operator_map = {"+": add, "-": sub, "*": mul, "/": div, "pow": mypow}

        while True:
            try:
                number1 = float(input("Enter the first number: "))
                number2 = float(input("Enter the second number: "))
            except ValueError:
                print("That is not a number!")
                continue

            operator = input("Enter an operator (valid operators are +, -, *, / and pow): ")
            print(operator_map[operator](number1, number2) if operator in operator_map else "Invalid operator!")
</code></pre>

<p>Hope that helps.</p>
    </div>