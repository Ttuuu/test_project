<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Naming</h2>

<p>Your <code>NumberGenerator</code> is actually a <code>TerrainGenerator</code>.</p>

<hr>

<p>The convention for member variable names in C# is <code>_camelCase</code> with leading underscore. That is, when they are private. Member variables should never be public. If you need to provide access to them from the outside, consider adding a public property with a backing private field.</p>

<p>Private variables are by convention spelled in <code>camelCase</code>, e.g. <code>randomChasePoint</code> instead of <code>RandomChasePoint</code>.</p>

<hr>

<p>Unfortunately you did not add the code of the <code>MinMaxInt</code> class, but it probably should be called something like <code>Range</code>, or <code>IntRange</code>. Also, it probably should be a <code>struct</code> rather than a class.</p>

<hr>

<p>A variable's type should not be part of its name. For example <code>List&lt;Terrain&gt; TerrainList</code> could be named <code>List&lt;Terrain&gt; Terrains</code>. This is more intuitive, because a list of terrains contains terrains, and also you could more easily change the variable's type if needed without having to rename it.</p>

<p>On a related note, variables whose types are collections, like lists and arrays etc., should have plural names, because they (at least potentially) contain multiple objects of that type. E.g. <code>List &lt;int&gt; EventPoint</code> would be <code>List&lt;int&gt; EventPoints</code>.</p>

<h2>Access modifiers</h2>

<p>All of the methods and most of the fields are public. From what I can see in the code supplied, most of both could be private instead. Try to keep as much as possible private, and only expose methods that should actually be able to be called from other classes.</p>

<h2>Comments</h2>

<p>The code contains quite a lot of comments, almost one comment per line of code. While it is good practice to add a comment now and then to explain the purpose of a complicated piece of code, it is usually counter productive to add redundant comments that only explain what the code itself already says. When you think of adding a comment, try to change the code instead to make it more self explanatory if possible.</p>

<p>A strong example why redundant comments are not only superfluos, but possible very bad:</p>

<pre><code>//Adding 0 which is the intro/Start Terrain
Sequence.Add (10);
</code></pre>

<p>When reading this, it is impossible to tell whether the code is wrong or the comment is wrong. Probably both were correct at some point, but then one has been changed while the other has not, which happens very often. To prevent that problem in the above case, you could add a constant <code>const int introTerrain = 0;</code> and then do <code>Sequence.Add(introTerrain);</code>. If later you would have changed the constant to <code>10</code>, the code could stay the same and the comment would not be needed, as the code would explain itself.</p>

<h2>For-Each instead of For</h2>

<p>When you iterate over a collection and you don't need to use the iteration counter, you can use a <code>foreach</code> loop rather than a <code>for</code> loop. This often makes the code more readable and easier to understand, and it is more idiomatic.</p>

<p>This</p>

<blockquote>
<pre><code>    for (int i = 0; i &lt; EventPointsRange.Count; i++) {
        int RandomChasePoint = EventPointsRange [i].random;
        EventPoint.Add (RandomChasePoint);
    }
</code></pre>
</blockquote>

<p>could be written like this:</p>

<pre><code>    foreach (var eventPointsRange in EventPointsRanges) {
        int randomChasePoint = eventPointsRange.random;
        EventPoint.Add(randomChasePoint);
    }
</code></pre>
    </div>