<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Question 1: If the parameters are mandatory anyway you might as well enforce this through your API. This reads just fine:</p>

<pre><code>Connector con = new Connector.Builder(mandatoryURL)
                    .setAccessKey(key)
                    .build();
</code></pre>

<p>Question 2: Either place, since you contained the checks entirely in the Connector class (because of the private constructor) you have full control anyway.</p>

<p>Since either one of them is mandatory and you I'm assuming you won't use both of them, you might also provide 2 separate "build" methods that take one of those parameters as input.</p>

<pre><code>public static class Builder {
    String appUrl = null;

    public Builder(String appUrl) {
        this.appUrl = appUrl;
    }

    public Connector withAccessKey(String accessKey) {
        Connector result = new Connector(appUrl);
        connector.accessKey = accessKey;
        return connector;
    }

    public Connector withOneTimePwd(String oneTimePwd) {
        Connector result = new Connector(appUrl);
        connector.oneTimePwd = oneTimePwd;
        return connector;
    }
}
</code></pre>

<p>Quick note that I changed the Connector constructor to also take the URL parameter instead of the builder. Your way works just fine in this case, I just prefer to have the builder be responsible for setting the correct fields instead of making the Connector "know" about the Builder class.</p>

<hr>

<p>Alternative solution to using a Builder is to use factory methods. Your Connector class could then look something like this:</p>

<pre><code>public class Connector {

    String appUrl = null;
    String oneTimePwd = null;
    String accessKey = null;

    private Connector(String appUrl) {
        this.appUrl = appUrl;
    }

    public static Connector createWithAccessKey(String appUrl, String accessKey) {
        Connector result = new Connector(appUrl);
        connector.accessKey = accessKey;
        return connector;
    }

    public static Connector createWithOneTimePwd(String appUrl, String oneTimePwd) {
        Connector result = new Connector(appUrl);
        connector.oneTimePwd = oneTimePwd;
        return connector;
    }

    //... rest of the class
}
</code></pre>

<p>You can now use it as follows:</p>

<pre><code>Connector con = Connector.createWithAccessKey(someUrl, myKey);
</code></pre>

<p>This has about the same effect as your Builder idea but with a lot less boilerplate code to reach it.</p>
    </div>