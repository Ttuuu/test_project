<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Big Issue</h2>

<p>You have a problem with empty Tries: <code>toSeq</code> thinks they contain one element: it returns <code>seq { 0 }</code> for an empty Trie.</p>

<pre><code>Seq.length (BitTrie.toSeq (BitTrie.create ())) = 1
</code></pre>

<p>This <code>0</code> value then goes away when you add anything. I think <code>create</code> should probably be producing a <code>NullTrie</code>. There's also no need for it to be a method; I'd prefer an <code>empty</code> value, but at that point <code>you could just rename</code>NullTrie<code>to</code>EmptyTrie<code>and everyone should be happy. Moving the union into the module would let you just use</code>Empty` without stepping on any toes.</p>

<p>I can't work out what <code>NullTrie</code> is really meant to do otherwise; except produce confusing exceptions: <code>BitTrie.add 0 NullTrie</code> will throw your <code>InvalidOperationException(sprintf "Invalid bit value: %d" bit)</code>.</p>

<p>I think you can fix this by 'ensuring' <code>curTrie</code> is not a <code>NullTrie</code>. You can probably use active patterns to resolve this nicely, but I forgot how to use those long ago, so instead I would add an <code>ensure</code> (I'm sure you can think of a better name, but it's late and I can't) function...</p>

<pre><code>let private ensure trie =
    match trie with
    | Empty -&gt; BitTrie(Empty, Empty)
    | _ -&gt; trie
</code></pre>

<p>... and then modify the <code>match</code> in <code>add</code> (which allows us to simplify it somewhat):</p>

<pre><code>match (value &gt;&gt;&gt; shift) &amp;&amp;&amp; 1, (ensure curTrie) with
| 0, BitTrie(zero, one) -&gt;
    BitTrie(adder (shift - 1) zero, one)
| 1, BitTrie(zero, one) -&gt;
    BitTrie(zero, adder (shift - 1) one)
| bit, _ -&gt; raise (InvalidOperationException(sprintf "Invalid bit value: %d" bit))
</code></pre>

<p>But there is still a big problem, because <code>BitTrie(Empty, Empty)</code> contains nothing, but apparently isn't empty. This reveals a serious design issue: the meaning of the <code>Trie</code> is tied to <code>ubound</code> but you can produce 'invalid' Tries, and trivially so. At this point I would give up on the public <code>BitTrie</code> DU, and instead implement a self-contained class where I can encapsulate and control everything, providing methods for producing Tries with a valid and meaningful state.</p>

<p>One option you could consider is making <code>BitTrie</code> a ternary union, where you have a type indicating whether the value is present or not, so that it is unambigous. This, however, goes funny because you are using a classical Trie for integers. For example, <code>00000</code> = <code>0</code>, but these sequences would have different positions in a <code>Trie</code>. I think your self-impose constraint might need to be relaxed if you want a sound API.</p>

<h2>Other</h2>

<ul>
<li><p>Using a variant of the <code>ensure</code> method above which returns just a tuple rather than a <code>BitTrie</code>, you can remove the need to cover the <code>empty</code> case in <code>add</code>. Then if you really wanted to get rid of the exception, you could go with <code>(value &gt;&gt;&gt; shift) &amp;&amp;&amp; 1 &gt; 0</code> and use <code>false</code> and <code>true</code> instead of <code>0</code> and <code>1</code>. The same can be done in <code>contains</code>, but looking at it I think it is less clear.</p></li>
<li><p>It seems odd to provide <code>BitTrie.iter</code> specifically (as opposed to <code>map</code> or <code>fold</code> or whatever); I'd be inclined to only provide <code>toSeq</code>, and just leave the consumer to call <code>Seq.iter</code> themselves.</p></li>
<li><p>As always, I would prefer all public types and functions had inline documentation. <code>toSeq</code>, for example, probably wants to document any guarantees you will make about ordering (which presently is based on the bit values, so starts with 0 and ends with -1, which some might think odd).</p></li>
</ul>
    </div>