<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>If this design is for a school project, and you've already submitted it, I fear you will have already failed the assignment.  This design is bad.</p>

<h1>Static</h1>

<p>As a guiding principle, Java programs should use the identifier <code>static</code> exactly once, specifically in the declaration <code>public static void main(String args[])</code>.  Any other usages of <code>static</code> should sound warning bells; you might be doing something wrong.</p>

<p>Consider a hotel.  It often has multiple elevators.  With <code>static int currentFloor</code>, every elevator must be on the same floor!  With <code>static ElevatorStateContext elevatorStateContext</code>, every elevator is moving in the same direction!  This is a poor design choice.  Even if you have exactly one elevator, that elevator should own its own data, instead of having it stored as global class variables.</p>

<p>Often, hotels have multiple elevator systems.  There might be a main elevator bank, for guests, as well as service elevators for hotel staff.  There could be elevators in multiple towers of the hotel, and parking garage elevators.  In short, there could be more than one <code>ElevatorControlSystem</code>, and each would own its own set of elevators.  Each time <code>ElevatorControlSystem</code> is constructed, it executes <code>elevator = Elevator.getInstance();</code> ... which means each control system is trying to operate the same elevator???</p>

<hr>

<h1>Identity -vs- Equality</h1>

<p>The test <code>if (priority == "INSIDE")</code> is testing object identity.  Only if the <code>String</code> stored in <code>priority</code> has the same identity as the <code>String</code> embedded in this compilation unit will the test pass.  This is fragile, and will break as soon as you try passing in the String <code>"INSIDE"</code> created elsewhere.  You should check for equality: <code>if (priority.equals("INSIDE"))</code>.</p>

<p>Or, use an <code>enum</code> for <code>INSIDE</code> -vs- <code>OUTSIDE</code>, like you are already using for elevator state.</p>

<hr>

<h1>Useless Items</h1>

<h2>Useless Encapsulation</h2>

<p><code>ElevatorStateContext</code> contains <code>State elevatorState</code>, and a setter and a getter, which add no additional behaviour, checks, or functionality.</p>

<p>What is the purpose of this class?  You could directly store and fetch the <code>State</code> in <code>Elevator</code>, and eliminate this class.  Or was something else supposed to be included in the <code>ElevatorStateContext</code>, like whether the doors were open/opening/closed/closing or which floors have been requested?</p>

<h2>Useless Queue</h2>

<p>You have a queue which will only ever hold at most one item.  These lines add the item, and then immediately pull the item off for processing:</p>

<pre><code>    requestQueue.add(passengersFloor);
    processQueue(requestQueue);
</code></pre>

<p>Inside <code>processQueue()</code>, you <code>peek()</code> and <code>remove()</code> items from the queue separately:</p>

<pre><code>    int passengersFloor = requestQueue.peek();
    ...
    requestQueue.remove();
    ...
</code></pre>

<p>But there is no point to peeking; you always remove the item, so the following simpler code would work:</p>

<pre><code>    int passengersFloor = requestQueue.remove();
    ...
</code></pre>

<hr>

<h1>Unused Items</h1>

<h2>Unused Singleton</h2>

<p>You execute <code>elevator = Elevator.getInstance();</code> but nowhere are you actually using the <code>elevator</code> member variable.</p>

<h2>Unused Interface</h2>

<p>You declare <code>interface ElevatorState</code>, but nothing ever implements that interface.</p>

<hr>

<h1>Sequential Tests / Operation</h1>

<p>Due to <code>dispatchRequest()</code> and <code>processQueue()</code> completely handling requests one at a time, the test code is completely incapable of testing an elevator in motion when another request comes in.  If 5 people request the elevator on the main floor, and get in, and press the floors buttons 5, 2, 6, 3, 4 ...</p>

<pre><code>    ecs.pressButton(1);
    ecs.selectFloor(5);
    ecs.selectFloor(2);
    ecs.selectFloor(6);
    ecs.selectFloor(3);
    ecs.selectFloor(4);
</code></pre>

<p>the elevator will move to the 5th floor, bypassing 2, 3 and 4.  And then it will move to the 2nd floor, bypassing 4 and 3.  Then it will move to the 6th floor, bypassing 3 and 4.  And then it will move to the 3rd floor bypassing 4.  And finally it will move to the 4th floor.  Painfully inefficient.</p>
    </div>