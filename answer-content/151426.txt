<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>That's not a bad program, despite the number of suggestions I'm about to make.  I do recognize you're a learner, and a young learner at that.</p>

<p>There are several levels at which we can analyze this program.  One is checking the current implementation.  Another is considering whether it is portable.  We can question whether the interface is good — should humans be made to count?  And there are alternative algorithms that could be used.</p>

<p>Some of the points I'm about to make are related to style.  Although you can write programs in C in all sorts of ways, some of them are easier to read than others.  What you show is not bad, but it isn't wholly consistent (and consistency is very important — and hard!).</p>

<h3>Analyzing the current implementation — line by line.</h3>

<pre><code>#include&lt;stdio.h&gt;
</code></pre>

<p>Generally, put a space between <code>#include</code> and the header name, whether a standard header like <code>&lt;stdio.h&gt;</code> or your own header like <code>"caesar.h"</code>.</p>

<pre><code>main()
</code></pre>

<p>You should always specify the return type of every function, including <code>main()</code>.  You're using either C99 or C11, so you are required to specify the return type.  (The oldest version of the standard, C90, wasn't quite so fussy.). Further, the <a href="https://stackoverflow.com/questions/204476/">return type of <code>main()</code> should be <code>int</code></a>, though if you work with Microsoft compilers, they allow <code>void</code> too.  The standard is quite clear; <code>int</code> is expected.  It's often a good idea to say explicitly 'no command line arguments' by writing <code>int main(void)</code>, but in practice, <code>int main()</code> also works fine almost all the time.  (You have to be doing weird things for it to matter.)</p>

<pre><code>{
    int size;
    scanf("%d", &amp;size);
</code></pre>

<p>One of the painful lessons you'll learn coding C is that a lot of your effort is spent error checking.  In particular, it is important to check input functions because they're one of the places where things can go wrong and have bad consequences on the rest of the program.  The <code>scanf()</code> function returns the number of successful conversions; it can also return <code>0</code> indicating no successful conversion, and <code>EOF</code> indicating that there wasn't any data to read.  You should also check that the input value is plausible: negative numbers, zero, even one are dubious, and so are huge numbers (e.g. more than 1024).</p>

<pre><code>    char str[size];
</code></pre>

<p>This is a VLA — variable length array.  They're very useful and have been a part of C since the C99 standard (though technically they're an optional feature in C11 — they were mandatory in C99).  You've allocated enough space for <code>size</code> characters, but strings are terminated with a null byte, <code>'\0'</code>, and you need to allow space for that.  You should probably use <code>char str[size+1];</code>.</p>

<pre><code>    scanf("%s", str);
</code></pre>

<p>Again, you should check that you got some data read.  Note that with <code>"%s"</code>, <code>scanf()</code> first skips any white space (blanks, tabs, newlines) and then reads one word — a sequence of non-blanks.  You've not limited the size of the input.  If the user said 10 characters but typed 20 characters before the newline or first blank or tab, you'd have problems.  If the array size was fixed at, say, 1024 bytes in total, you could use <code>"%1023s"</code> to limit the input to 1023 non-blanks and the terminating null byte.  With a variable length array, it's <a href="https://stackoverflow.com/a/1621973/15168">harder</a>.  (This is a common oversight in programs, even those by people with lots of experience.)</p>

<pre><code>    for (int i=0; i&lt;size; i++)
</code></pre>

<p>This loop is fine, except that many people prefer a bit more space around the operators.  What you've written is self-consistent; that's good.</p>

<pre><code>    {
        if (str[i]!='Z'){
            str[i] -= 1;
        }
</code></pre>

<p>You're assuming that the user is obedient and does exactly what you want.  Unfortunately, users are seldom obedient and rarely do exactly what you want.  If the user types 'abracadabra' instead of 'ABRACADABRA' as you expect, or if they type '@Wonderful2CU', you are not going to get the result you expect.  You can handle this in various ways.  The simple one, which you've currently chosen, is to ignore the issue — it is sometimes termed GIGO: Garbage In, Garbage Out.  You could decide that you'll convert lower-case letters to upper-case and then decode them. You could decide to not touch non-letters.  You could decide to complain about non-letters.  On the whole, it would probably be best to handle lower-case like upper-case and not to change non-letters, but you might decide differently.</p>

<p>Many people would put a space before the <code>{</code>.  Others (myself included) would put the <code>{</code> on the next line, like you did after the <code>else</code> below.  Here is a case of inconsistency.  Either you should use 1TBS (One True Brace Style), which is more or less what you're using in the <code>if</code>, or you should use Allman style, which is more or less what you're using in the <code>else</code>.  See Wikipedia on <a href="https://en.wikipedia.org/wiki/Indent_style" rel="nofollow noreferrer">Indent Style</a> for more information (and many more styles).</p>

<pre><code>        else
        {
            str[i] -= 25;
        }
</code></pre>

<p>You could simply translate <code>'Z'</code> to <code>'A'</code>, rather than subtracting a magic number — <code>str[i] = 'A';</code> would work well.</p>

<pre><code>        printf("%c", str[i]);
    }
</code></pre>

<p>These lines are fine.  However, it is good practice to end lines of output with a newline.  You could sensibly add <code>putchar('\n');</code> to add a newline.</p>

<pre><code>    return 0;
}
</code></pre>

<p>I like to see the explicit <code>return 0;</code> at the end of <code>main()</code>; there are others who aren't convinced.  With C99 and later, if you omit the explicit <code>return 0;</code>, then if the <code>main()</code> function — and only the <code>main()</code> function; it doesn't apply to any other functions — 'falls off the end' without any <code>return</code>, it is equivalent to doing <code>return 0;</code>.</p>

<h3>Oops!</h3>

<p>One other problem, pointed out by <a href="https://codereview.stackexchange.com/users/29902/nowigettolearnwhataheadis">NowIGetToLearnWhatAHeadIs</a> in <a href="https://codereview.stackexchange.com/questions/151409/decoding-c-program#comment285338_151426">comments</a> is that your decoding steps are not an exact reverse of your encoding steps.</p>

<pre><code>Original: ABCDEFGHIJKLMNOPQRSTUVWXYZ
Encoded:  BCDEFGHIJKLMNOPQRSTUVWXYZA
Decoded:  ABCDEFGHIJKLMNOPQRSTUVWXA@
</code></pre>

<p><sup><em>Minor cheating here; there was also a stray character after the <code>@</code> because of the issues with string length.</em></sup></p>

<p>Clearly, the decoded information is not the same as the original.  Instead of <code>Z</code> being special, it is <code>A</code> that is special; we need to subtract <code>1</code> from everything else and either add 25 or map to <code>Z</code> when the letter is <code>A</code>.</p>

<h3>Revising the current implementation</h3>

<pre><code>#include &lt;stdio.h&gt;
#include &lt;ctype.h&gt;

int main(void)
{
    int size;
    if (scanf("%d", &amp;size) != 1)
    {
        fprintf(stderr, "Failed to read an integer\n");
        return 1;
    }
    if (size &lt; 2 || size &gt; 1024)
    {
        fprintf(stderr, "Size %d is not in the range 2..1024\n", size);
        return 1;
    }

    char str[size + 1];
    char fmt[10];
    snprintf(fmt, sizeof(fmt), "%%%ds", size);

    if (scanf(fmt, str) != 1)
    {
        fprintf(stderr, "Failed to read a string\n");
        return 1;
    }

    for (int i = 0; i &lt; size; i++)
    {
        if (toupper((unsigned char)str[i]) == 'A')
        {
            str[i] = 'Z';
        }
        else if (isalpha((unsigned char)str[i]))
        {
            str[i] -= 1;
        }
        printf("%c", str[i]);
    }
    putchar('\n');

    return 0;
}
</code></pre>

<p>I used <code>#include &lt;ctype.h&gt;</code> to provide macros <code>isalpha()</code> and <code>toupper()</code>.  One mildly irksome problem is that plain <code>char</code> can be a signed or unsigned type, and the macros from <code>&lt;ctype.h&gt;</code> expect an <code>unsigned char</code> converted to an <code>int</code>.  Putting the <code>(unsigned char)</code> cast into those calls protects you from the sadistic user who types <code>à</code> or <code>ÿ</code> into your program.  (There is more to handling accented characters than that, but it is an adequate safety precaution for now.)</p>

<p>Note that this 'decodes' <code>Aa</code> to <code>ZZ</code>; that can be fixed if it matters to you.</p>

<p>I also use <code>snprintf()</code> to create an appropriate format string to ensure that the buffer won't be overflowed.  If the size given is 100, it generates <code>%100s</code> (which is the correct size to use since the array is 101 characters long — the difference by one is a nuisance).</p>

<h3>Portability</h3>

<p>You can skip this section if you wish — it matters to people like me who have to make the software they write work on lots of different machines.  If you only have one machine type to work with, you can largely ignore it.</p>

<p>The original code used <code>-= 25</code> and <code>-= 1</code> to map the characters.  As was noted in the comments, this assumes that the character code for <code>Z</code> is 25 larger than the character code for <code>A</code>.  Now, in practice, that is valid for most of the character sets used in the world — and, in particular, it is accurate for <a href="http://www.unicode.org/" rel="nofollow noreferrer">Unicode</a>.  However, there are machines — IBM mainframes for example — where the code set used is called <a href="https://en.wikipedia.org/wiki/EBCDIC" rel="nofollow noreferrer">EBCDIC</a>, where the code for <code>A</code> is 193, for <code>I</code> is 201, for <code>J</code> is 209, for <code>R</code> is 217, for <code>S</code> is 226, and for <code>Z</code> is 233.  There are gaps in those ranges which cause confusion; the gap between <code>Z</code> and <code>A</code> is 40, not 25 as you might expect.</p>

<p>If you decided to worry about it, you should devise an alternative way of mapping the characters.</p>

<p>At some point, you'll note that the original Caesar cipher used a shift of 3, not 1, and you'd upgrade your code to handle any shift between 1 and 25 (there's not much point in shifting by 0 or 26; nothing changes).  That complicates the checking for wraparound at the ends of the alphabet.  Again, that isn't an immediate problem.</p>

<h3>Interface design</h3>

<p>You currently require the human to know how long the message is.  I don't know about you, but I know I don't know how many characters are in the first sentence of this paragraph.  Sure, I could count, but computers are much better at counting.  You can work around this problem in various ways.  One simple one is to provide a fixed size but large buffer (e.g. 1024 bytes) and simply read the data into that.  You would probably use the <code>fgets()</code> function for the job instead of <code>scanf()</code>.  Then you might read more than one line of input in a run of the program, too, using a loop.  The revised program will look a bit simpler:</p>

<pre><code>#include &lt;stdio.h&gt;
#include &lt;ctype.h&gt;
#include &lt;string.h&gt;

int main(void)
{
    char str[1024];

    while (fgets(str, sizeof(str), stdin) != 0)
    {
        int size = strlen(str);    
        for (int i = 0; i &lt; size; i++)
        {
            if (toupper((unsigned char)str[i]) == 'A')
            {
                str[i] = 'Z';
            }
            else if (isalpha((unsigned char)str[i]))
            {
                str[i] -= 1;
            }
            printf("%c", str[i]);
        }
    }

    return 0;
}
</code></pre>

<p>This simply reads standard input until it encounters EOF.  You might run your program as <code>./decode-caesar &lt; encoded.txt</code>, or you might type your encoded message by hand, in which case you'd indicate EOF by typing a control character at the start of a line — it would be <kbd>Control-D</kbd> on Unix systems or <kbd>Control-Z</kbd> on Windows systems (unless you've changed the default setting for EOF on Unix).</p>

<p>Note that <code>fgets()</code> preserves newlines and the revised algorithm doesn't change newlines so there's no need to print an extra newline at the end of the output.</p>

<h3>Alternative designs</h3>

<p>The programs so far have read a whole word or line at a time, and then processed each character in turn.  Another way of doing it would be to simply read and process each character in turn.  This is simpler still:</p>

<pre><code>#include &lt;stdio.h&gt;
#include &lt;ctype.h&gt;

int main(void)
{
    int c;

    while ((c = getchar()) != EOF)
    {
        if (toupper(c) == 'A')
            c = 'Z';
        else if (isalpha(c))
            c -= 1;
        putchar(c);
    }

    return 0;
}
</code></pre>

<p>Note that I used <code>int c;</code> — that's because <code>getchar()</code> returns an <code>int</code>, not just a <code>char</code>.  It has to return every possible <code>char</code> value and a separate <code>EOF</code> value, which means that it can't return just a <code>char</code>; it must return an <code>int</code>.  A side-effect of that is that all characters in <code>c</code> will be in the range 0..255 (positive) because <code>getchar()</code> returns the character value converted to <code>unsigned char</code>.  This means that it is safe to drop the casts in the calls to <code>toupper</code> and <code>isalpha</code>.</p>

<p>I've opted not to use braces around the single-line actions after the <code>if</code> and <code>else</code> clause.  This is another style issue.  There are those who argue that you should always use braces after <code>if</code> or <code>else</code> (and there are languages such as Perl that insist on braces there), partly on the grounds that if you ever add another statement to the <code>else</code> clause, you might forget to add the necessary braces.  I'm not convinced by that argument, but maybe some programmers are careless enough that 'always use braces' really helps prevent bugs.</p>

<h3>Wrapping up</h3>

<p>There are lots of little details that could be explained and discussed.  There are still caveats that could be discussed.  However, they're minor enough that you don't need to worry about them at this stage, I think.</p>

<p>You asked about efficiency.  The code you wrote is reasonably efficient.  There are no gross inefficiencies in it.  It is clean, and that is often more important than efficient.  Before worrying about efficiency, measure whether there is a performance problem. With this code, there won't be a performance problem — none of the programs is inefficient — for the plausible sizes of input.</p>

<p>If you wanted to be more efficient, you'd print the whole word or line in one operation, rather than using <code>printf("%c", str[i])</code> to print each character one at a time.  You could replace <code>printf("%c", str[i])</code> with <code>putchar(str[i])</code> and it would be 'more efficient', but whether you'd be able to measure it is more debatable.</p>

<p>Michael Jackson (no, not the pop-star — but maybe he's before your time) had two <a href="http://wiki.c2.com/?RulesOfOptimization" rel="nofollow noreferrer">rules for optimization</a> (improving the efficiency of code):</p>

<ul>
<li><strong>First rule of optimization</strong>: Don't do it.</li>
<li><strong>Second rule of optimization</strong> (for experts only): Don't do it yet.</li>
</ul>

<p>You also ask about using <code>gets()</code>.  <strong>You should <em>never</em> use <code>gets()</code>!</strong> There is <a href="https://stackoverflow.com/questions/1694036/why-is-the-gets-function-dangerous-why-should-it-not-be-used">no safe way to use <code>gets()</code></a> because you cannot prevent buffer overflows when you do.  You should use <a href="http://pubs.opengroup.org/onlinepubs/9699919799/functions/fgets.html" rel="nofollow noreferrer"><code>fgets()</code></a> by default, or <a href="http://pubs.opengroup.org/onlinepubs/9699919799/functions/getline.html" rel="nofollow noreferrer"><code>getline()</code></a> if you work on a POSIX-based system.  Note that both those retain the newline, whereas <code>gets()</code> removes it.  One good idiom for removing a trailing newline from <code>fgets(buffer, sizeof(buffer), stdin)</code> is <code>buffer[strcspn(buffer, "\n")] = '\0';</code> which works correctly whether there's a newline in the buffer or not.  With <code>getline()</code>, it tells you how long the string is so you can use that to remove the newline (though there's an outside chance that the file doesn't end with a newline, so the last line read won't have a newline — which is irksome).</p>

<h3>Testing</h3>

<p>Oh, and it is important to test code.  I didn't run your code (or my code) on any data until @NowIGetToLearnWhatAHeadIs pointed out the error in the decoding.  That was lazy of me — copying your mistake into my code.  Testing is very important!</p>

<h3>Fixing the mapping of 'a' to 'Z'</h3>

<p>I've decided I'm not keen on the sloppy way my code maps <code>'a'</code> to <code>'Z'</code>.  It is easy enough to fix.  This variant of the third program handles it.  It contains an assertion to ensure that the code is not used successfully on an EBCDIC machine.</p>

<pre><code>#include &lt;assert.h&gt;
#include &lt;ctype.h&gt;
#include &lt;stdio.h&gt;

int main(void)
{
    int c;

    assert('Z' - 'A' == 25 &amp;&amp; 'z' - 'a' == 25);

    while ((c = getchar()) != EOF)
    {
        if (toupper(c) == 'A')
            c += 25;
        else if (isalpha(c))
            c -= 1;
        putchar(c);
    }

    return 0;
}
</code></pre>

<p>Sample input:</p>

<pre><code>ABCDEFGHIJKLMNOPQRSTUVWXYZ
abcdefghijklmnopqrstuvwxyz
09@?
</code></pre>

<p>Sample output:</p>

<pre><code>ZABCDEFGHIJKLMNOPQRSTUVWXY
zabcdefghijklmnopqrstuvwxy
09@?
</code></pre>

<p>That's cleaner!</p>

<p>Using C11, you could use a 'static assert' instead of a run-time assertion.  This would prevent the program compiling:</p>

<pre><code>static_assert('Z' - 'A' == 25 &amp;&amp; 'z' - 'a' == 25,
              "Alphabet should be contiguous but isn't");
</code></pre>
    </div>